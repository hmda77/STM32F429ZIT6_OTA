
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e41c  080201b0  080201b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000203c  0802e5cc  0802e5cc  0001e5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030608  08030608  000300e0  2**0
                  CONTENTS
  4 .ARM          00000008  08030608  08030608  00020608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030610  08030610  000300e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030610  08030610  00020610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08030614  08030614  00020614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08030618  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e0  2**0
                  CONTENTS
 10 .bss          000010cc  200000e0  200000e0  000300e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200011ac  200011ac  000300e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a9e0  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000579c  00000000  00000000  0005aaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002180  00000000  00000000  00060290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f60  00000000  00000000  00062410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002be1d  00000000  00000000  00064370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b30a  00000000  00000000  0009018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f019a  00000000  00000000  000bb497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ab631  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000097e0  00000000  00000000  001ab684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201b0 <__do_global_dtors_aux>:
 80201b0:	b510      	push	{r4, lr}
 80201b2:	4c05      	ldr	r4, [pc, #20]	; (80201c8 <__do_global_dtors_aux+0x18>)
 80201b4:	7823      	ldrb	r3, [r4, #0]
 80201b6:	b933      	cbnz	r3, 80201c6 <__do_global_dtors_aux+0x16>
 80201b8:	4b04      	ldr	r3, [pc, #16]	; (80201cc <__do_global_dtors_aux+0x1c>)
 80201ba:	b113      	cbz	r3, 80201c2 <__do_global_dtors_aux+0x12>
 80201bc:	4804      	ldr	r0, [pc, #16]	; (80201d0 <__do_global_dtors_aux+0x20>)
 80201be:	f3af 8000 	nop.w
 80201c2:	2301      	movs	r3, #1
 80201c4:	7023      	strb	r3, [r4, #0]
 80201c6:	bd10      	pop	{r4, pc}
 80201c8:	200000e0 	.word	0x200000e0
 80201cc:	00000000 	.word	0x00000000
 80201d0:	0802e5b4 	.word	0x0802e5b4

080201d4 <frame_dummy>:
 80201d4:	b508      	push	{r3, lr}
 80201d6:	4b03      	ldr	r3, [pc, #12]	; (80201e4 <frame_dummy+0x10>)
 80201d8:	b11b      	cbz	r3, 80201e2 <frame_dummy+0xe>
 80201da:	4903      	ldr	r1, [pc, #12]	; (80201e8 <frame_dummy+0x14>)
 80201dc:	4803      	ldr	r0, [pc, #12]	; (80201ec <frame_dummy+0x18>)
 80201de:	f3af 8000 	nop.w
 80201e2:	bd08      	pop	{r3, pc}
 80201e4:	00000000 	.word	0x00000000
 80201e8:	200000e4 	.word	0x200000e4
 80201ec:	0802e5b4 	.word	0x0802e5b4

080201f0 <memchr>:
 80201f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201f4:	2a10      	cmp	r2, #16
 80201f6:	db2b      	blt.n	8020250 <memchr+0x60>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	d008      	beq.n	8020210 <memchr+0x20>
 80201fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020202:	3a01      	subs	r2, #1
 8020204:	428b      	cmp	r3, r1
 8020206:	d02d      	beq.n	8020264 <memchr+0x74>
 8020208:	f010 0f07 	tst.w	r0, #7
 802020c:	b342      	cbz	r2, 8020260 <memchr+0x70>
 802020e:	d1f6      	bne.n	80201fe <memchr+0xe>
 8020210:	b4f0      	push	{r4, r5, r6, r7}
 8020212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802021a:	f022 0407 	bic.w	r4, r2, #7
 802021e:	f07f 0700 	mvns.w	r7, #0
 8020222:	2300      	movs	r3, #0
 8020224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020228:	3c08      	subs	r4, #8
 802022a:	ea85 0501 	eor.w	r5, r5, r1
 802022e:	ea86 0601 	eor.w	r6, r6, r1
 8020232:	fa85 f547 	uadd8	r5, r5, r7
 8020236:	faa3 f587 	sel	r5, r3, r7
 802023a:	fa86 f647 	uadd8	r6, r6, r7
 802023e:	faa5 f687 	sel	r6, r5, r7
 8020242:	b98e      	cbnz	r6, 8020268 <memchr+0x78>
 8020244:	d1ee      	bne.n	8020224 <memchr+0x34>
 8020246:	bcf0      	pop	{r4, r5, r6, r7}
 8020248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802024c:	f002 0207 	and.w	r2, r2, #7
 8020250:	b132      	cbz	r2, 8020260 <memchr+0x70>
 8020252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020256:	3a01      	subs	r2, #1
 8020258:	ea83 0301 	eor.w	r3, r3, r1
 802025c:	b113      	cbz	r3, 8020264 <memchr+0x74>
 802025e:	d1f8      	bne.n	8020252 <memchr+0x62>
 8020260:	2000      	movs	r0, #0
 8020262:	4770      	bx	lr
 8020264:	3801      	subs	r0, #1
 8020266:	4770      	bx	lr
 8020268:	2d00      	cmp	r5, #0
 802026a:	bf06      	itte	eq
 802026c:	4635      	moveq	r5, r6
 802026e:	3803      	subeq	r0, #3
 8020270:	3807      	subne	r0, #7
 8020272:	f015 0f01 	tst.w	r5, #1
 8020276:	d107      	bne.n	8020288 <memchr+0x98>
 8020278:	3001      	adds	r0, #1
 802027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802027e:	bf02      	ittt	eq
 8020280:	3001      	addeq	r0, #1
 8020282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020286:	3001      	addeq	r0, #1
 8020288:	bcf0      	pop	{r4, r5, r6, r7}
 802028a:	3801      	subs	r0, #1
 802028c:	4770      	bx	lr
 802028e:	bf00      	nop

08020290 <__aeabi_uldivmod>:
 8020290:	b953      	cbnz	r3, 80202a8 <__aeabi_uldivmod+0x18>
 8020292:	b94a      	cbnz	r2, 80202a8 <__aeabi_uldivmod+0x18>
 8020294:	2900      	cmp	r1, #0
 8020296:	bf08      	it	eq
 8020298:	2800      	cmpeq	r0, #0
 802029a:	bf1c      	itt	ne
 802029c:	f04f 31ff 	movne.w	r1, #4294967295
 80202a0:	f04f 30ff 	movne.w	r0, #4294967295
 80202a4:	f000 b974 	b.w	8020590 <__aeabi_idiv0>
 80202a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80202ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202b0:	f000 f806 	bl	80202c0 <__udivmoddi4>
 80202b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202bc:	b004      	add	sp, #16
 80202be:	4770      	bx	lr

080202c0 <__udivmoddi4>:
 80202c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202c4:	9d08      	ldr	r5, [sp, #32]
 80202c6:	4604      	mov	r4, r0
 80202c8:	468e      	mov	lr, r1
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d14d      	bne.n	802036a <__udivmoddi4+0xaa>
 80202ce:	428a      	cmp	r2, r1
 80202d0:	4694      	mov	ip, r2
 80202d2:	d969      	bls.n	80203a8 <__udivmoddi4+0xe8>
 80202d4:	fab2 f282 	clz	r2, r2
 80202d8:	b152      	cbz	r2, 80202f0 <__udivmoddi4+0x30>
 80202da:	fa01 f302 	lsl.w	r3, r1, r2
 80202de:	f1c2 0120 	rsb	r1, r2, #32
 80202e2:	fa20 f101 	lsr.w	r1, r0, r1
 80202e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80202ea:	ea41 0e03 	orr.w	lr, r1, r3
 80202ee:	4094      	lsls	r4, r2
 80202f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80202f4:	0c21      	lsrs	r1, r4, #16
 80202f6:	fbbe f6f8 	udiv	r6, lr, r8
 80202fa:	fa1f f78c 	uxth.w	r7, ip
 80202fe:	fb08 e316 	mls	r3, r8, r6, lr
 8020302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020306:	fb06 f107 	mul.w	r1, r6, r7
 802030a:	4299      	cmp	r1, r3
 802030c:	d90a      	bls.n	8020324 <__udivmoddi4+0x64>
 802030e:	eb1c 0303 	adds.w	r3, ip, r3
 8020312:	f106 30ff 	add.w	r0, r6, #4294967295
 8020316:	f080 811f 	bcs.w	8020558 <__udivmoddi4+0x298>
 802031a:	4299      	cmp	r1, r3
 802031c:	f240 811c 	bls.w	8020558 <__udivmoddi4+0x298>
 8020320:	3e02      	subs	r6, #2
 8020322:	4463      	add	r3, ip
 8020324:	1a5b      	subs	r3, r3, r1
 8020326:	b2a4      	uxth	r4, r4
 8020328:	fbb3 f0f8 	udiv	r0, r3, r8
 802032c:	fb08 3310 	mls	r3, r8, r0, r3
 8020330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020334:	fb00 f707 	mul.w	r7, r0, r7
 8020338:	42a7      	cmp	r7, r4
 802033a:	d90a      	bls.n	8020352 <__udivmoddi4+0x92>
 802033c:	eb1c 0404 	adds.w	r4, ip, r4
 8020340:	f100 33ff 	add.w	r3, r0, #4294967295
 8020344:	f080 810a 	bcs.w	802055c <__udivmoddi4+0x29c>
 8020348:	42a7      	cmp	r7, r4
 802034a:	f240 8107 	bls.w	802055c <__udivmoddi4+0x29c>
 802034e:	4464      	add	r4, ip
 8020350:	3802      	subs	r0, #2
 8020352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020356:	1be4      	subs	r4, r4, r7
 8020358:	2600      	movs	r6, #0
 802035a:	b11d      	cbz	r5, 8020364 <__udivmoddi4+0xa4>
 802035c:	40d4      	lsrs	r4, r2
 802035e:	2300      	movs	r3, #0
 8020360:	e9c5 4300 	strd	r4, r3, [r5]
 8020364:	4631      	mov	r1, r6
 8020366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802036a:	428b      	cmp	r3, r1
 802036c:	d909      	bls.n	8020382 <__udivmoddi4+0xc2>
 802036e:	2d00      	cmp	r5, #0
 8020370:	f000 80ef 	beq.w	8020552 <__udivmoddi4+0x292>
 8020374:	2600      	movs	r6, #0
 8020376:	e9c5 0100 	strd	r0, r1, [r5]
 802037a:	4630      	mov	r0, r6
 802037c:	4631      	mov	r1, r6
 802037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020382:	fab3 f683 	clz	r6, r3
 8020386:	2e00      	cmp	r6, #0
 8020388:	d14a      	bne.n	8020420 <__udivmoddi4+0x160>
 802038a:	428b      	cmp	r3, r1
 802038c:	d302      	bcc.n	8020394 <__udivmoddi4+0xd4>
 802038e:	4282      	cmp	r2, r0
 8020390:	f200 80f9 	bhi.w	8020586 <__udivmoddi4+0x2c6>
 8020394:	1a84      	subs	r4, r0, r2
 8020396:	eb61 0303 	sbc.w	r3, r1, r3
 802039a:	2001      	movs	r0, #1
 802039c:	469e      	mov	lr, r3
 802039e:	2d00      	cmp	r5, #0
 80203a0:	d0e0      	beq.n	8020364 <__udivmoddi4+0xa4>
 80203a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80203a6:	e7dd      	b.n	8020364 <__udivmoddi4+0xa4>
 80203a8:	b902      	cbnz	r2, 80203ac <__udivmoddi4+0xec>
 80203aa:	deff      	udf	#255	; 0xff
 80203ac:	fab2 f282 	clz	r2, r2
 80203b0:	2a00      	cmp	r2, #0
 80203b2:	f040 8092 	bne.w	80204da <__udivmoddi4+0x21a>
 80203b6:	eba1 010c 	sub.w	r1, r1, ip
 80203ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80203be:	fa1f fe8c 	uxth.w	lr, ip
 80203c2:	2601      	movs	r6, #1
 80203c4:	0c20      	lsrs	r0, r4, #16
 80203c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80203ca:	fb07 1113 	mls	r1, r7, r3, r1
 80203ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203d2:	fb0e f003 	mul.w	r0, lr, r3
 80203d6:	4288      	cmp	r0, r1
 80203d8:	d908      	bls.n	80203ec <__udivmoddi4+0x12c>
 80203da:	eb1c 0101 	adds.w	r1, ip, r1
 80203de:	f103 38ff 	add.w	r8, r3, #4294967295
 80203e2:	d202      	bcs.n	80203ea <__udivmoddi4+0x12a>
 80203e4:	4288      	cmp	r0, r1
 80203e6:	f200 80cb 	bhi.w	8020580 <__udivmoddi4+0x2c0>
 80203ea:	4643      	mov	r3, r8
 80203ec:	1a09      	subs	r1, r1, r0
 80203ee:	b2a4      	uxth	r4, r4
 80203f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80203f4:	fb07 1110 	mls	r1, r7, r0, r1
 80203f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80203fc:	fb0e fe00 	mul.w	lr, lr, r0
 8020400:	45a6      	cmp	lr, r4
 8020402:	d908      	bls.n	8020416 <__udivmoddi4+0x156>
 8020404:	eb1c 0404 	adds.w	r4, ip, r4
 8020408:	f100 31ff 	add.w	r1, r0, #4294967295
 802040c:	d202      	bcs.n	8020414 <__udivmoddi4+0x154>
 802040e:	45a6      	cmp	lr, r4
 8020410:	f200 80bb 	bhi.w	802058a <__udivmoddi4+0x2ca>
 8020414:	4608      	mov	r0, r1
 8020416:	eba4 040e 	sub.w	r4, r4, lr
 802041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802041e:	e79c      	b.n	802035a <__udivmoddi4+0x9a>
 8020420:	f1c6 0720 	rsb	r7, r6, #32
 8020424:	40b3      	lsls	r3, r6
 8020426:	fa22 fc07 	lsr.w	ip, r2, r7
 802042a:	ea4c 0c03 	orr.w	ip, ip, r3
 802042e:	fa20 f407 	lsr.w	r4, r0, r7
 8020432:	fa01 f306 	lsl.w	r3, r1, r6
 8020436:	431c      	orrs	r4, r3
 8020438:	40f9      	lsrs	r1, r7
 802043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802043e:	fa00 f306 	lsl.w	r3, r0, r6
 8020442:	fbb1 f8f9 	udiv	r8, r1, r9
 8020446:	0c20      	lsrs	r0, r4, #16
 8020448:	fa1f fe8c 	uxth.w	lr, ip
 802044c:	fb09 1118 	mls	r1, r9, r8, r1
 8020450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020454:	fb08 f00e 	mul.w	r0, r8, lr
 8020458:	4288      	cmp	r0, r1
 802045a:	fa02 f206 	lsl.w	r2, r2, r6
 802045e:	d90b      	bls.n	8020478 <__udivmoddi4+0x1b8>
 8020460:	eb1c 0101 	adds.w	r1, ip, r1
 8020464:	f108 3aff 	add.w	sl, r8, #4294967295
 8020468:	f080 8088 	bcs.w	802057c <__udivmoddi4+0x2bc>
 802046c:	4288      	cmp	r0, r1
 802046e:	f240 8085 	bls.w	802057c <__udivmoddi4+0x2bc>
 8020472:	f1a8 0802 	sub.w	r8, r8, #2
 8020476:	4461      	add	r1, ip
 8020478:	1a09      	subs	r1, r1, r0
 802047a:	b2a4      	uxth	r4, r4
 802047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020480:	fb09 1110 	mls	r1, r9, r0, r1
 8020484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020488:	fb00 fe0e 	mul.w	lr, r0, lr
 802048c:	458e      	cmp	lr, r1
 802048e:	d908      	bls.n	80204a2 <__udivmoddi4+0x1e2>
 8020490:	eb1c 0101 	adds.w	r1, ip, r1
 8020494:	f100 34ff 	add.w	r4, r0, #4294967295
 8020498:	d26c      	bcs.n	8020574 <__udivmoddi4+0x2b4>
 802049a:	458e      	cmp	lr, r1
 802049c:	d96a      	bls.n	8020574 <__udivmoddi4+0x2b4>
 802049e:	3802      	subs	r0, #2
 80204a0:	4461      	add	r1, ip
 80204a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80204a6:	fba0 9402 	umull	r9, r4, r0, r2
 80204aa:	eba1 010e 	sub.w	r1, r1, lr
 80204ae:	42a1      	cmp	r1, r4
 80204b0:	46c8      	mov	r8, r9
 80204b2:	46a6      	mov	lr, r4
 80204b4:	d356      	bcc.n	8020564 <__udivmoddi4+0x2a4>
 80204b6:	d053      	beq.n	8020560 <__udivmoddi4+0x2a0>
 80204b8:	b15d      	cbz	r5, 80204d2 <__udivmoddi4+0x212>
 80204ba:	ebb3 0208 	subs.w	r2, r3, r8
 80204be:	eb61 010e 	sbc.w	r1, r1, lr
 80204c2:	fa01 f707 	lsl.w	r7, r1, r7
 80204c6:	fa22 f306 	lsr.w	r3, r2, r6
 80204ca:	40f1      	lsrs	r1, r6
 80204cc:	431f      	orrs	r7, r3
 80204ce:	e9c5 7100 	strd	r7, r1, [r5]
 80204d2:	2600      	movs	r6, #0
 80204d4:	4631      	mov	r1, r6
 80204d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204da:	f1c2 0320 	rsb	r3, r2, #32
 80204de:	40d8      	lsrs	r0, r3
 80204e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80204e4:	fa21 f303 	lsr.w	r3, r1, r3
 80204e8:	4091      	lsls	r1, r2
 80204ea:	4301      	orrs	r1, r0
 80204ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204f0:	fa1f fe8c 	uxth.w	lr, ip
 80204f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80204f8:	fb07 3610 	mls	r6, r7, r0, r3
 80204fc:	0c0b      	lsrs	r3, r1, #16
 80204fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020502:	fb00 f60e 	mul.w	r6, r0, lr
 8020506:	429e      	cmp	r6, r3
 8020508:	fa04 f402 	lsl.w	r4, r4, r2
 802050c:	d908      	bls.n	8020520 <__udivmoddi4+0x260>
 802050e:	eb1c 0303 	adds.w	r3, ip, r3
 8020512:	f100 38ff 	add.w	r8, r0, #4294967295
 8020516:	d22f      	bcs.n	8020578 <__udivmoddi4+0x2b8>
 8020518:	429e      	cmp	r6, r3
 802051a:	d92d      	bls.n	8020578 <__udivmoddi4+0x2b8>
 802051c:	3802      	subs	r0, #2
 802051e:	4463      	add	r3, ip
 8020520:	1b9b      	subs	r3, r3, r6
 8020522:	b289      	uxth	r1, r1
 8020524:	fbb3 f6f7 	udiv	r6, r3, r7
 8020528:	fb07 3316 	mls	r3, r7, r6, r3
 802052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020530:	fb06 f30e 	mul.w	r3, r6, lr
 8020534:	428b      	cmp	r3, r1
 8020536:	d908      	bls.n	802054a <__udivmoddi4+0x28a>
 8020538:	eb1c 0101 	adds.w	r1, ip, r1
 802053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8020540:	d216      	bcs.n	8020570 <__udivmoddi4+0x2b0>
 8020542:	428b      	cmp	r3, r1
 8020544:	d914      	bls.n	8020570 <__udivmoddi4+0x2b0>
 8020546:	3e02      	subs	r6, #2
 8020548:	4461      	add	r1, ip
 802054a:	1ac9      	subs	r1, r1, r3
 802054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020550:	e738      	b.n	80203c4 <__udivmoddi4+0x104>
 8020552:	462e      	mov	r6, r5
 8020554:	4628      	mov	r0, r5
 8020556:	e705      	b.n	8020364 <__udivmoddi4+0xa4>
 8020558:	4606      	mov	r6, r0
 802055a:	e6e3      	b.n	8020324 <__udivmoddi4+0x64>
 802055c:	4618      	mov	r0, r3
 802055e:	e6f8      	b.n	8020352 <__udivmoddi4+0x92>
 8020560:	454b      	cmp	r3, r9
 8020562:	d2a9      	bcs.n	80204b8 <__udivmoddi4+0x1f8>
 8020564:	ebb9 0802 	subs.w	r8, r9, r2
 8020568:	eb64 0e0c 	sbc.w	lr, r4, ip
 802056c:	3801      	subs	r0, #1
 802056e:	e7a3      	b.n	80204b8 <__udivmoddi4+0x1f8>
 8020570:	4646      	mov	r6, r8
 8020572:	e7ea      	b.n	802054a <__udivmoddi4+0x28a>
 8020574:	4620      	mov	r0, r4
 8020576:	e794      	b.n	80204a2 <__udivmoddi4+0x1e2>
 8020578:	4640      	mov	r0, r8
 802057a:	e7d1      	b.n	8020520 <__udivmoddi4+0x260>
 802057c:	46d0      	mov	r8, sl
 802057e:	e77b      	b.n	8020478 <__udivmoddi4+0x1b8>
 8020580:	3b02      	subs	r3, #2
 8020582:	4461      	add	r1, ip
 8020584:	e732      	b.n	80203ec <__udivmoddi4+0x12c>
 8020586:	4630      	mov	r0, r6
 8020588:	e709      	b.n	802039e <__udivmoddi4+0xde>
 802058a:	4464      	add	r4, ip
 802058c:	3802      	subs	r0, #2
 802058e:	e742      	b.n	8020416 <__udivmoddi4+0x156>

08020590 <__aeabi_idiv0>:
 8020590:	4770      	bx	lr
 8020592:	bf00      	nop

08020594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020594:	b580      	push	{r7, lr}
 8020596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020598:	f002 fc5c 	bl	8022e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802059c:	f000 f8a0 	bl	80206e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80205a0:	f000 fb3a 	bl	8020c18 <MX_GPIO_Init>
  MX_CRC_Init();
 80205a4:	f000 f908 	bl	80207b8 <MX_CRC_Init>
  MX_DMA2D_Init();
 80205a8:	f000 f91a 	bl	80207e0 <MX_DMA2D_Init>
  MX_FMC_Init();
 80205ac:	f000 fae4 	bl	8020b78 <MX_FMC_Init>
  MX_I2C3_Init();
 80205b0:	f000 f948 	bl	8020844 <MX_I2C3_Init>
  MX_LTDC_Init();
 80205b4:	f000 f986 	bl	80208c4 <MX_LTDC_Init>
  MX_SPI5_Init();
 80205b8:	f000 fa04 	bl	80209c4 <MX_SPI5_Init>
  MX_TIM1_Init();
 80205bc:	f000 fa38 	bl	8020a30 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80205c0:	f000 fab0 	bl	8020b24 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80205c4:	f00c fb3c 	bl	802cc40 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80205c8:	f000 fa82 	bl	8020ad0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart5, Rx_data, 1);
 80205cc:	2201      	movs	r2, #1
 80205ce:	4937      	ldr	r1, [pc, #220]	; (80206ac <main+0x118>)
 80205d0:	4837      	ldr	r0, [pc, #220]	; (80206b0 <main+0x11c>)
 80205d2:	f008 faae 	bl	8028b32 <HAL_UART_Receive_IT>


  sprintf(buffch,"Starting Application (%d.%d)", BL_Version[0], BL_Version[1]);
 80205d6:	2300      	movs	r3, #0
 80205d8:	461a      	mov	r2, r3
 80205da:	2302      	movs	r3, #2
 80205dc:	4935      	ldr	r1, [pc, #212]	; (80206b4 <main+0x120>)
 80205de:	4836      	ldr	r0, [pc, #216]	; (80206b8 <main+0x124>)
 80205e0:	f00c ff86 	bl	802d4f0 <siprintf>
  printf("Starting Application (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80205e4:	2300      	movs	r3, #0
 80205e6:	2202      	movs	r2, #2
 80205e8:	4619      	mov	r1, r3
 80205ea:	4834      	ldr	r0, [pc, #208]	; (80206bc <main+0x128>)
 80205ec:	f00c ff58 	bl	802d4a0 <iprintf>


  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 80205f0:	f001 fdaa 	bl	8022148 <BSP_LCD_Init>

  /* Layer2 Init */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80205f4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80205f8:	2001      	movs	r0, #1
 80205fa:	f001 fe27 	bl	802224c <BSP_LCD_LayerDefaultInit>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80205fe:	2001      	movs	r0, #1
 8020600:	f001 fe88 	bl	8022314 <BSP_LCD_SelectLayer>
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020604:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020608:	f001 ff32 	bl	8022470 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_BLACK);
 802060c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8020610:	2001      	movs	r0, #1
 8020612:	f001 fecd 	bl	80223b0 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8020616:	2100      	movs	r1, #0
 8020618:	2001      	movs	r0, #1
 802061a:	f001 fe8b 	bl	8022334 <BSP_LCD_SetLayerVisible>

  /* Layer1 Init */
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 802061e:	4928      	ldr	r1, [pc, #160]	; (80206c0 <main+0x12c>)
 8020620:	2000      	movs	r0, #0
 8020622:	f001 fe13 	bl	802224c <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 8020626:	2000      	movs	r0, #0
 8020628:	f001 fe74 	bl	8022314 <BSP_LCD_SelectLayer>

  /* Enable The LCD */
  BSP_LCD_DisplayOn();
 802062c:	f002 f84a 	bl	80226c4 <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020630:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020634:	f001 ff1c 	bl	8022470 <BSP_LCD_Clear>


  /* Set Touchscreen Demo description */

  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8020638:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 802063c:	f001 fee4 	bl	8022408 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8020640:	4820      	ldr	r0, [pc, #128]	; (80206c4 <main+0x130>)
 8020642:	f001 fec9 	bl	80223d8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 8020646:	4820      	ldr	r0, [pc, #128]	; (80206c8 <main+0x134>)
 8020648:	f001 fef8 	bl	802243c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)buffch, CENTER_MODE);
 802064c:	2301      	movs	r3, #1
 802064e:	4a1a      	ldr	r2, [pc, #104]	; (80206b8 <main+0x124>)
 8020650:	2100      	movs	r1, #0
 8020652:	2000      	movs	r0, #0
 8020654:	f001 ff78 	bl	8022548 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8020658:	f04f 30ff 	mov.w	r0, #4294967295
 802065c:	f001 febc 	bl	80223d8 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"APPLICATION", CENTER_MODE);
 8020660:	f001 fde8 	bl	8022234 <BSP_LCD_GetYSize>
 8020664:	4603      	mov	r3, r0
 8020666:	085b      	lsrs	r3, r3, #1
 8020668:	b29b      	uxth	r3, r3
 802066a:	3b0c      	subs	r3, #12
 802066c:	b299      	uxth	r1, r3
 802066e:	2301      	movs	r3, #1
 8020670:	4a16      	ldr	r2, [pc, #88]	; (80206cc <main+0x138>)
 8020672:	2000      	movs	r0, #0
 8020674:	f001 ff68 	bl	8022548 <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8020678:	f00c fb08 	bl	802cc8c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 802067c:	2201      	movs	r2, #1
 802067e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020682:	4813      	ldr	r0, [pc, #76]	; (80206d0 <main+0x13c>)
 8020684:	f003 fdee 	bl	8024264 <HAL_GPIO_WritePin>
    if(eof_flag){
 8020688:	4b12      	ldr	r3, [pc, #72]	; (80206d4 <main+0x140>)
 802068a:	781b      	ldrb	r3, [r3, #0]
 802068c:	2b00      	cmp	r3, #0
 802068e:	d0f3      	beq.n	8020678 <main+0xe4>
    	printf("%s\r\n", buf);
 8020690:	4911      	ldr	r1, [pc, #68]	; (80206d8 <main+0x144>)
 8020692:	4812      	ldr	r0, [pc, #72]	; (80206dc <main+0x148>)
 8020694:	f00c ff04 	bl	802d4a0 <iprintf>
    	eof_flag= false;
 8020698:	4b0e      	ldr	r3, [pc, #56]	; (80206d4 <main+0x140>)
 802069a:	2200      	movs	r2, #0
 802069c:	701a      	strb	r2, [r3, #0]
    	memset(buf, 0, sizeof(buf));
 802069e:	f240 4209 	movw	r2, #1033	; 0x409
 80206a2:	2100      	movs	r1, #0
 80206a4:	480c      	ldr	r0, [pc, #48]	; (80206d8 <main+0x144>)
 80206a6:	f00c fe13 	bl	802d2d0 <memset>
    MX_USB_HOST_Process();
 80206aa:	e7e5      	b.n	8020678 <main+0xe4>
 80206ac:	20000400 	.word	0x20000400
 80206b0:	200002e0 	.word	0x200002e0
 80206b4:	0802e5cc 	.word	0x0802e5cc
 80206b8:	2000039c 	.word	0x2000039c
 80206bc:	0802e5ec 	.word	0x0802e5ec
 80206c0:	d0130000 	.word	0xd0130000
 80206c4:	ffff0000 	.word	0xffff0000
 80206c8:	20000048 	.word	0x20000048
 80206cc:	0802e60c 	.word	0x0802e60c
 80206d0:	40021800 	.word	0x40021800
 80206d4:	2000080d 	.word	0x2000080d
 80206d8:	20000404 	.word	0x20000404
 80206dc:	0802e618 	.word	0x0802e618

080206e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80206e0:	b580      	push	{r7, lr}
 80206e2:	b094      	sub	sp, #80	; 0x50
 80206e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80206e6:	f107 0320 	add.w	r3, r7, #32
 80206ea:	2230      	movs	r2, #48	; 0x30
 80206ec:	2100      	movs	r1, #0
 80206ee:	4618      	mov	r0, r3
 80206f0:	f00c fdee 	bl	802d2d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80206f4:	f107 030c 	add.w	r3, r7, #12
 80206f8:	2200      	movs	r2, #0
 80206fa:	601a      	str	r2, [r3, #0]
 80206fc:	605a      	str	r2, [r3, #4]
 80206fe:	609a      	str	r2, [r3, #8]
 8020700:	60da      	str	r2, [r3, #12]
 8020702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8020704:	2300      	movs	r3, #0
 8020706:	60bb      	str	r3, [r7, #8]
 8020708:	4b29      	ldr	r3, [pc, #164]	; (80207b0 <SystemClock_Config+0xd0>)
 802070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802070c:	4a28      	ldr	r2, [pc, #160]	; (80207b0 <SystemClock_Config+0xd0>)
 802070e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020712:	6413      	str	r3, [r2, #64]	; 0x40
 8020714:	4b26      	ldr	r3, [pc, #152]	; (80207b0 <SystemClock_Config+0xd0>)
 8020716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802071c:	60bb      	str	r3, [r7, #8]
 802071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8020720:	2300      	movs	r3, #0
 8020722:	607b      	str	r3, [r7, #4]
 8020724:	4b23      	ldr	r3, [pc, #140]	; (80207b4 <SystemClock_Config+0xd4>)
 8020726:	681b      	ldr	r3, [r3, #0]
 8020728:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 802072c:	4a21      	ldr	r2, [pc, #132]	; (80207b4 <SystemClock_Config+0xd4>)
 802072e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020732:	6013      	str	r3, [r2, #0]
 8020734:	4b1f      	ldr	r3, [pc, #124]	; (80207b4 <SystemClock_Config+0xd4>)
 8020736:	681b      	ldr	r3, [r3, #0]
 8020738:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802073c:	607b      	str	r3, [r7, #4]
 802073e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8020740:	2301      	movs	r3, #1
 8020742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8020744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020748:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802074a:	2302      	movs	r3, #2
 802074c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 802074e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8020752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8020754:	2310      	movs	r3, #16
 8020756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8020758:	f44f 73a8 	mov.w	r3, #336	; 0x150
 802075c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802075e:	2302      	movs	r3, #2
 8020760:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8020762:	2303      	movs	r3, #3
 8020764:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020766:	f107 0320 	add.w	r3, r7, #32
 802076a:	4618      	mov	r0, r3
 802076c:	f005 ff86 	bl	802667c <HAL_RCC_OscConfig>
 8020770:	4603      	mov	r3, r0
 8020772:	2b00      	cmp	r3, #0
 8020774:	d001      	beq.n	802077a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8020776:	f000 fb97 	bl	8020ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802077a:	230f      	movs	r3, #15
 802077c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802077e:	2302      	movs	r3, #2
 8020780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020782:	2300      	movs	r3, #0
 8020784:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8020786:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 802078a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 802078c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020790:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8020792:	f107 030c 	add.w	r3, r7, #12
 8020796:	2102      	movs	r1, #2
 8020798:	4618      	mov	r0, r3
 802079a:	f006 f9e7 	bl	8026b6c <HAL_RCC_ClockConfig>
 802079e:	4603      	mov	r3, r0
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	d001      	beq.n	80207a8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80207a4:	f000 fb80 	bl	8020ea8 <Error_Handler>
  }
}
 80207a8:	bf00      	nop
 80207aa:	3750      	adds	r7, #80	; 0x50
 80207ac:	46bd      	mov	sp, r7
 80207ae:	bd80      	pop	{r7, pc}
 80207b0:	40023800 	.word	0x40023800
 80207b4:	40007000 	.word	0x40007000

080207b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80207b8:	b580      	push	{r7, lr}
 80207ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80207bc:	4b06      	ldr	r3, [pc, #24]	; (80207d8 <MX_CRC_Init+0x20>)
 80207be:	4a07      	ldr	r2, [pc, #28]	; (80207dc <MX_CRC_Init+0x24>)
 80207c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80207c2:	4805      	ldr	r0, [pc, #20]	; (80207d8 <MX_CRC_Init+0x20>)
 80207c4:	f002 fc8e 	bl	80230e4 <HAL_CRC_Init>
 80207c8:	4603      	mov	r3, r0
 80207ca:	2b00      	cmp	r3, #0
 80207cc:	d001      	beq.n	80207d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80207ce:	f000 fb6b 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80207d2:	bf00      	nop
 80207d4:	bd80      	pop	{r7, pc}
 80207d6:	bf00      	nop
 80207d8:	200000fc 	.word	0x200000fc
 80207dc:	40023000 	.word	0x40023000

080207e0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80207e0:	b580      	push	{r7, lr}
 80207e2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80207e4:	4b15      	ldr	r3, [pc, #84]	; (802083c <MX_DMA2D_Init+0x5c>)
 80207e6:	4a16      	ldr	r2, [pc, #88]	; (8020840 <MX_DMA2D_Init+0x60>)
 80207e8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80207ea:	4b14      	ldr	r3, [pc, #80]	; (802083c <MX_DMA2D_Init+0x5c>)
 80207ec:	2200      	movs	r2, #0
 80207ee:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80207f0:	4b12      	ldr	r3, [pc, #72]	; (802083c <MX_DMA2D_Init+0x5c>)
 80207f2:	2200      	movs	r2, #0
 80207f4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80207f6:	4b11      	ldr	r3, [pc, #68]	; (802083c <MX_DMA2D_Init+0x5c>)
 80207f8:	2200      	movs	r2, #0
 80207fa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80207fc:	4b0f      	ldr	r3, [pc, #60]	; (802083c <MX_DMA2D_Init+0x5c>)
 80207fe:	2200      	movs	r2, #0
 8020800:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8020802:	4b0e      	ldr	r3, [pc, #56]	; (802083c <MX_DMA2D_Init+0x5c>)
 8020804:	2200      	movs	r2, #0
 8020806:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8020808:	4b0c      	ldr	r3, [pc, #48]	; (802083c <MX_DMA2D_Init+0x5c>)
 802080a:	2200      	movs	r2, #0
 802080c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 802080e:	4b0b      	ldr	r3, [pc, #44]	; (802083c <MX_DMA2D_Init+0x5c>)
 8020810:	2200      	movs	r2, #0
 8020812:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8020814:	4809      	ldr	r0, [pc, #36]	; (802083c <MX_DMA2D_Init+0x5c>)
 8020816:	f002 fed1 	bl	80235bc <HAL_DMA2D_Init>
 802081a:	4603      	mov	r3, r0
 802081c:	2b00      	cmp	r3, #0
 802081e:	d001      	beq.n	8020824 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8020820:	f000 fb42 	bl	8020ea8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8020824:	2101      	movs	r1, #1
 8020826:	4805      	ldr	r0, [pc, #20]	; (802083c <MX_DMA2D_Init+0x5c>)
 8020828:	f003 f936 	bl	8023a98 <HAL_DMA2D_ConfigLayer>
 802082c:	4603      	mov	r3, r0
 802082e:	2b00      	cmp	r3, #0
 8020830:	d001      	beq.n	8020836 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8020832:	f000 fb39 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8020836:	bf00      	nop
 8020838:	bd80      	pop	{r7, pc}
 802083a:	bf00      	nop
 802083c:	20000104 	.word	0x20000104
 8020840:	4002b000 	.word	0x4002b000

08020844 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8020844:	b580      	push	{r7, lr}
 8020846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8020848:	4b1b      	ldr	r3, [pc, #108]	; (80208b8 <MX_I2C3_Init+0x74>)
 802084a:	4a1c      	ldr	r2, [pc, #112]	; (80208bc <MX_I2C3_Init+0x78>)
 802084c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 802084e:	4b1a      	ldr	r3, [pc, #104]	; (80208b8 <MX_I2C3_Init+0x74>)
 8020850:	4a1b      	ldr	r2, [pc, #108]	; (80208c0 <MX_I2C3_Init+0x7c>)
 8020852:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8020854:	4b18      	ldr	r3, [pc, #96]	; (80208b8 <MX_I2C3_Init+0x74>)
 8020856:	2200      	movs	r2, #0
 8020858:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 802085a:	4b17      	ldr	r3, [pc, #92]	; (80208b8 <MX_I2C3_Init+0x74>)
 802085c:	2200      	movs	r2, #0
 802085e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020860:	4b15      	ldr	r3, [pc, #84]	; (80208b8 <MX_I2C3_Init+0x74>)
 8020862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8020866:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020868:	4b13      	ldr	r3, [pc, #76]	; (80208b8 <MX_I2C3_Init+0x74>)
 802086a:	2200      	movs	r2, #0
 802086c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 802086e:	4b12      	ldr	r3, [pc, #72]	; (80208b8 <MX_I2C3_Init+0x74>)
 8020870:	2200      	movs	r2, #0
 8020872:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8020874:	4b10      	ldr	r3, [pc, #64]	; (80208b8 <MX_I2C3_Init+0x74>)
 8020876:	2200      	movs	r2, #0
 8020878:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 802087a:	4b0f      	ldr	r3, [pc, #60]	; (80208b8 <MX_I2C3_Init+0x74>)
 802087c:	2200      	movs	r2, #0
 802087e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8020880:	480d      	ldr	r0, [pc, #52]	; (80208b8 <MX_I2C3_Init+0x74>)
 8020882:	f005 f92b 	bl	8025adc <HAL_I2C_Init>
 8020886:	4603      	mov	r3, r0
 8020888:	2b00      	cmp	r3, #0
 802088a:	d001      	beq.n	8020890 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 802088c:	f000 fb0c 	bl	8020ea8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8020890:	2100      	movs	r1, #0
 8020892:	4809      	ldr	r0, [pc, #36]	; (80208b8 <MX_I2C3_Init+0x74>)
 8020894:	f005 fa66 	bl	8025d64 <HAL_I2CEx_ConfigAnalogFilter>
 8020898:	4603      	mov	r3, r0
 802089a:	2b00      	cmp	r3, #0
 802089c:	d001      	beq.n	80208a2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 802089e:	f000 fb03 	bl	8020ea8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80208a2:	2100      	movs	r1, #0
 80208a4:	4804      	ldr	r0, [pc, #16]	; (80208b8 <MX_I2C3_Init+0x74>)
 80208a6:	f005 fa99 	bl	8025ddc <HAL_I2CEx_ConfigDigitalFilter>
 80208aa:	4603      	mov	r3, r0
 80208ac:	2b00      	cmp	r3, #0
 80208ae:	d001      	beq.n	80208b4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80208b0:	f000 fafa 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80208b4:	bf00      	nop
 80208b6:	bd80      	pop	{r7, pc}
 80208b8:	20000144 	.word	0x20000144
 80208bc:	40005c00 	.word	0x40005c00
 80208c0:	000186a0 	.word	0x000186a0

080208c4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80208c4:	b580      	push	{r7, lr}
 80208c6:	b08e      	sub	sp, #56	; 0x38
 80208c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80208ca:	1d3b      	adds	r3, r7, #4
 80208cc:	2234      	movs	r2, #52	; 0x34
 80208ce:	2100      	movs	r1, #0
 80208d0:	4618      	mov	r0, r3
 80208d2:	f00c fcfd 	bl	802d2d0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80208d6:	4b39      	ldr	r3, [pc, #228]	; (80209bc <MX_LTDC_Init+0xf8>)
 80208d8:	4a39      	ldr	r2, [pc, #228]	; (80209c0 <MX_LTDC_Init+0xfc>)
 80208da:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80208dc:	4b37      	ldr	r3, [pc, #220]	; (80209bc <MX_LTDC_Init+0xf8>)
 80208de:	2200      	movs	r2, #0
 80208e0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80208e2:	4b36      	ldr	r3, [pc, #216]	; (80209bc <MX_LTDC_Init+0xf8>)
 80208e4:	2200      	movs	r2, #0
 80208e6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80208e8:	4b34      	ldr	r3, [pc, #208]	; (80209bc <MX_LTDC_Init+0xf8>)
 80208ea:	2200      	movs	r2, #0
 80208ec:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80208ee:	4b33      	ldr	r3, [pc, #204]	; (80209bc <MX_LTDC_Init+0xf8>)
 80208f0:	2200      	movs	r2, #0
 80208f2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80208f4:	4b31      	ldr	r3, [pc, #196]	; (80209bc <MX_LTDC_Init+0xf8>)
 80208f6:	2209      	movs	r2, #9
 80208f8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80208fa:	4b30      	ldr	r3, [pc, #192]	; (80209bc <MX_LTDC_Init+0xf8>)
 80208fc:	2201      	movs	r2, #1
 80208fe:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8020900:	4b2e      	ldr	r3, [pc, #184]	; (80209bc <MX_LTDC_Init+0xf8>)
 8020902:	221d      	movs	r2, #29
 8020904:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8020906:	4b2d      	ldr	r3, [pc, #180]	; (80209bc <MX_LTDC_Init+0xf8>)
 8020908:	2203      	movs	r2, #3
 802090a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 802090c:	4b2b      	ldr	r3, [pc, #172]	; (80209bc <MX_LTDC_Init+0xf8>)
 802090e:	f240 120d 	movw	r2, #269	; 0x10d
 8020912:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8020914:	4b29      	ldr	r3, [pc, #164]	; (80209bc <MX_LTDC_Init+0xf8>)
 8020916:	f240 1243 	movw	r2, #323	; 0x143
 802091a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 802091c:	4b27      	ldr	r3, [pc, #156]	; (80209bc <MX_LTDC_Init+0xf8>)
 802091e:	f240 1217 	movw	r2, #279	; 0x117
 8020922:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8020924:	4b25      	ldr	r3, [pc, #148]	; (80209bc <MX_LTDC_Init+0xf8>)
 8020926:	f240 1247 	movw	r2, #327	; 0x147
 802092a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 802092c:	4b23      	ldr	r3, [pc, #140]	; (80209bc <MX_LTDC_Init+0xf8>)
 802092e:	2200      	movs	r2, #0
 8020930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8020934:	4b21      	ldr	r3, [pc, #132]	; (80209bc <MX_LTDC_Init+0xf8>)
 8020936:	2200      	movs	r2, #0
 8020938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 802093c:	4b1f      	ldr	r3, [pc, #124]	; (80209bc <MX_LTDC_Init+0xf8>)
 802093e:	2200      	movs	r2, #0
 8020940:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8020944:	481d      	ldr	r0, [pc, #116]	; (80209bc <MX_LTDC_Init+0xf8>)
 8020946:	f005 fa89 	bl	8025e5c <HAL_LTDC_Init>
 802094a:	4603      	mov	r3, r0
 802094c:	2b00      	cmp	r3, #0
 802094e:	d001      	beq.n	8020954 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8020950:	f000 faaa 	bl	8020ea8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8020954:	2300      	movs	r3, #0
 8020956:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8020958:	23f0      	movs	r3, #240	; 0xf0
 802095a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 802095c:	2300      	movs	r3, #0
 802095e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8020960:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8020964:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8020966:	2302      	movs	r3, #2
 8020968:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 802096a:	23ff      	movs	r3, #255	; 0xff
 802096c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 802096e:	2300      	movs	r3, #0
 8020970:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8020972:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8020976:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8020978:	2307      	movs	r3, #7
 802097a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 802097c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8020980:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8020982:	23f0      	movs	r3, #240	; 0xf0
 8020984:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8020986:	f44f 73a0 	mov.w	r3, #320	; 0x140
 802098a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 802098c:	2300      	movs	r3, #0
 802098e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8020992:	2300      	movs	r3, #0
 8020994:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8020998:	2300      	movs	r3, #0
 802099a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 802099e:	1d3b      	adds	r3, r7, #4
 80209a0:	2200      	movs	r2, #0
 80209a2:	4619      	mov	r1, r3
 80209a4:	4805      	ldr	r0, [pc, #20]	; (80209bc <MX_LTDC_Init+0xf8>)
 80209a6:	f005 fbeb 	bl	8026180 <HAL_LTDC_ConfigLayer>
 80209aa:	4603      	mov	r3, r0
 80209ac:	2b00      	cmp	r3, #0
 80209ae:	d001      	beq.n	80209b4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80209b0:	f000 fa7a 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80209b4:	bf00      	nop
 80209b6:	3738      	adds	r7, #56	; 0x38
 80209b8:	46bd      	mov	sp, r7
 80209ba:	bd80      	pop	{r7, pc}
 80209bc:	20000198 	.word	0x20000198
 80209c0:	40016800 	.word	0x40016800

080209c4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80209c4:	b580      	push	{r7, lr}
 80209c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80209c8:	4b17      	ldr	r3, [pc, #92]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209ca:	4a18      	ldr	r2, [pc, #96]	; (8020a2c <MX_SPI5_Init+0x68>)
 80209cc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80209ce:	4b16      	ldr	r3, [pc, #88]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80209d4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80209d6:	4b14      	ldr	r3, [pc, #80]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209d8:	2200      	movs	r2, #0
 80209da:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80209dc:	4b12      	ldr	r3, [pc, #72]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209de:	2200      	movs	r2, #0
 80209e0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80209e2:	4b11      	ldr	r3, [pc, #68]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209e4:	2200      	movs	r2, #0
 80209e6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80209e8:	4b0f      	ldr	r3, [pc, #60]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209ea:	2200      	movs	r2, #0
 80209ec:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80209ee:	4b0e      	ldr	r3, [pc, #56]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80209f4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80209f6:	4b0c      	ldr	r3, [pc, #48]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209f8:	2218      	movs	r2, #24
 80209fa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80209fc:	4b0a      	ldr	r3, [pc, #40]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209fe:	2200      	movs	r2, #0
 8020a00:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8020a02:	4b09      	ldr	r3, [pc, #36]	; (8020a28 <MX_SPI5_Init+0x64>)
 8020a04:	2200      	movs	r2, #0
 8020a06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020a08:	4b07      	ldr	r3, [pc, #28]	; (8020a28 <MX_SPI5_Init+0x64>)
 8020a0a:	2200      	movs	r2, #0
 8020a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8020a0e:	4b06      	ldr	r3, [pc, #24]	; (8020a28 <MX_SPI5_Init+0x64>)
 8020a10:	220a      	movs	r2, #10
 8020a12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8020a14:	4804      	ldr	r0, [pc, #16]	; (8020a28 <MX_SPI5_Init+0x64>)
 8020a16:	f006 fd4c 	bl	80274b2 <HAL_SPI_Init>
 8020a1a:	4603      	mov	r3, r0
 8020a1c:	2b00      	cmp	r3, #0
 8020a1e:	d001      	beq.n	8020a24 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8020a20:	f000 fa42 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8020a24:	bf00      	nop
 8020a26:	bd80      	pop	{r7, pc}
 8020a28:	20000240 	.word	0x20000240
 8020a2c:	40015000 	.word	0x40015000

08020a30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8020a30:	b580      	push	{r7, lr}
 8020a32:	b086      	sub	sp, #24
 8020a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8020a36:	f107 0308 	add.w	r3, r7, #8
 8020a3a:	2200      	movs	r2, #0
 8020a3c:	601a      	str	r2, [r3, #0]
 8020a3e:	605a      	str	r2, [r3, #4]
 8020a40:	609a      	str	r2, [r3, #8]
 8020a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020a44:	463b      	mov	r3, r7
 8020a46:	2200      	movs	r2, #0
 8020a48:	601a      	str	r2, [r3, #0]
 8020a4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8020a4c:	4b1e      	ldr	r3, [pc, #120]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a4e:	4a1f      	ldr	r2, [pc, #124]	; (8020acc <MX_TIM1_Init+0x9c>)
 8020a50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8020a52:	4b1d      	ldr	r3, [pc, #116]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a54:	2200      	movs	r2, #0
 8020a56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020a58:	4b1b      	ldr	r3, [pc, #108]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a5a:	2200      	movs	r2, #0
 8020a5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8020a5e:	4b1a      	ldr	r3, [pc, #104]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020a64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020a66:	4b18      	ldr	r3, [pc, #96]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a68:	2200      	movs	r2, #0
 8020a6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8020a6c:	4b16      	ldr	r3, [pc, #88]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a6e:	2200      	movs	r2, #0
 8020a70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020a72:	4b15      	ldr	r3, [pc, #84]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a74:	2200      	movs	r2, #0
 8020a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8020a78:	4813      	ldr	r0, [pc, #76]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a7a:	f007 faf9 	bl	8028070 <HAL_TIM_Base_Init>
 8020a7e:	4603      	mov	r3, r0
 8020a80:	2b00      	cmp	r3, #0
 8020a82:	d001      	beq.n	8020a88 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8020a84:	f000 fa10 	bl	8020ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8020a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8020a8e:	f107 0308 	add.w	r3, r7, #8
 8020a92:	4619      	mov	r1, r3
 8020a94:	480c      	ldr	r0, [pc, #48]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a96:	f007 fcb3 	bl	8028400 <HAL_TIM_ConfigClockSource>
 8020a9a:	4603      	mov	r3, r0
 8020a9c:	2b00      	cmp	r3, #0
 8020a9e:	d001      	beq.n	8020aa4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8020aa0:	f000 fa02 	bl	8020ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020aa4:	2300      	movs	r3, #0
 8020aa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020aa8:	2300      	movs	r3, #0
 8020aaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8020aac:	463b      	mov	r3, r7
 8020aae:	4619      	mov	r1, r3
 8020ab0:	4805      	ldr	r0, [pc, #20]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020ab2:	f007 fecf 	bl	8028854 <HAL_TIMEx_MasterConfigSynchronization>
 8020ab6:	4603      	mov	r3, r0
 8020ab8:	2b00      	cmp	r3, #0
 8020aba:	d001      	beq.n	8020ac0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8020abc:	f000 f9f4 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8020ac0:	bf00      	nop
 8020ac2:	3718      	adds	r7, #24
 8020ac4:	46bd      	mov	sp, r7
 8020ac6:	bd80      	pop	{r7, pc}
 8020ac8:	20000298 	.word	0x20000298
 8020acc:	40010000 	.word	0x40010000

08020ad0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8020ad0:	b580      	push	{r7, lr}
 8020ad2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8020ad4:	4b11      	ldr	r3, [pc, #68]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020ad6:	4a12      	ldr	r2, [pc, #72]	; (8020b20 <MX_UART5_Init+0x50>)
 8020ad8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8020ada:	4b10      	ldr	r3, [pc, #64]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020ae0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8020ae2:	4b0e      	ldr	r3, [pc, #56]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020ae4:	2200      	movs	r2, #0
 8020ae6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8020ae8:	4b0c      	ldr	r3, [pc, #48]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020aea:	2200      	movs	r2, #0
 8020aec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8020aee:	4b0b      	ldr	r3, [pc, #44]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020af0:	2200      	movs	r2, #0
 8020af2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8020af4:	4b09      	ldr	r3, [pc, #36]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020af6:	220c      	movs	r2, #12
 8020af8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020afa:	4b08      	ldr	r3, [pc, #32]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020afc:	2200      	movs	r2, #0
 8020afe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8020b00:	4b06      	ldr	r3, [pc, #24]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020b02:	2200      	movs	r2, #0
 8020b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8020b06:	4805      	ldr	r0, [pc, #20]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020b08:	f007 ff34 	bl	8028974 <HAL_UART_Init>
 8020b0c:	4603      	mov	r3, r0
 8020b0e:	2b00      	cmp	r3, #0
 8020b10:	d001      	beq.n	8020b16 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8020b12:	f000 f9c9 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8020b16:	bf00      	nop
 8020b18:	bd80      	pop	{r7, pc}
 8020b1a:	bf00      	nop
 8020b1c:	200002e0 	.word	0x200002e0
 8020b20:	40005000 	.word	0x40005000

08020b24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8020b24:	b580      	push	{r7, lr}
 8020b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8020b28:	4b11      	ldr	r3, [pc, #68]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b2a:	4a12      	ldr	r2, [pc, #72]	; (8020b74 <MX_USART1_UART_Init+0x50>)
 8020b2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8020b2e:	4b10      	ldr	r3, [pc, #64]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020b34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020b36:	4b0e      	ldr	r3, [pc, #56]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b38:	2200      	movs	r2, #0
 8020b3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8020b3c:	4b0c      	ldr	r3, [pc, #48]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b3e:	2200      	movs	r2, #0
 8020b40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8020b42:	4b0b      	ldr	r3, [pc, #44]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b44:	2200      	movs	r2, #0
 8020b46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8020b48:	4b09      	ldr	r3, [pc, #36]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b4a:	220c      	movs	r2, #12
 8020b4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020b4e:	4b08      	ldr	r3, [pc, #32]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b50:	2200      	movs	r2, #0
 8020b52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8020b54:	4b06      	ldr	r3, [pc, #24]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b56:	2200      	movs	r2, #0
 8020b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8020b5a:	4805      	ldr	r0, [pc, #20]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b5c:	f007 ff0a 	bl	8028974 <HAL_UART_Init>
 8020b60:	4603      	mov	r3, r0
 8020b62:	2b00      	cmp	r3, #0
 8020b64:	d001      	beq.n	8020b6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8020b66:	f000 f99f 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8020b6a:	bf00      	nop
 8020b6c:	bd80      	pop	{r7, pc}
 8020b6e:	bf00      	nop
 8020b70:	20000324 	.word	0x20000324
 8020b74:	40011000 	.word	0x40011000

08020b78 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8020b78:	b580      	push	{r7, lr}
 8020b7a:	b088      	sub	sp, #32
 8020b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8020b7e:	1d3b      	adds	r3, r7, #4
 8020b80:	2200      	movs	r2, #0
 8020b82:	601a      	str	r2, [r3, #0]
 8020b84:	605a      	str	r2, [r3, #4]
 8020b86:	609a      	str	r2, [r3, #8]
 8020b88:	60da      	str	r2, [r3, #12]
 8020b8a:	611a      	str	r2, [r3, #16]
 8020b8c:	615a      	str	r2, [r3, #20]
 8020b8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8020b90:	4b1f      	ldr	r3, [pc, #124]	; (8020c10 <MX_FMC_Init+0x98>)
 8020b92:	4a20      	ldr	r2, [pc, #128]	; (8020c14 <MX_FMC_Init+0x9c>)
 8020b94:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8020b96:	4b1e      	ldr	r3, [pc, #120]	; (8020c10 <MX_FMC_Init+0x98>)
 8020b98:	2201      	movs	r2, #1
 8020b9a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8020b9c:	4b1c      	ldr	r3, [pc, #112]	; (8020c10 <MX_FMC_Init+0x98>)
 8020b9e:	2200      	movs	r2, #0
 8020ba0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8020ba2:	4b1b      	ldr	r3, [pc, #108]	; (8020c10 <MX_FMC_Init+0x98>)
 8020ba4:	2204      	movs	r2, #4
 8020ba6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8020ba8:	4b19      	ldr	r3, [pc, #100]	; (8020c10 <MX_FMC_Init+0x98>)
 8020baa:	2210      	movs	r2, #16
 8020bac:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8020bae:	4b18      	ldr	r3, [pc, #96]	; (8020c10 <MX_FMC_Init+0x98>)
 8020bb0:	2240      	movs	r2, #64	; 0x40
 8020bb2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8020bb4:	4b16      	ldr	r3, [pc, #88]	; (8020c10 <MX_FMC_Init+0x98>)
 8020bb6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8020bba:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8020bbc:	4b14      	ldr	r3, [pc, #80]	; (8020c10 <MX_FMC_Init+0x98>)
 8020bbe:	2200      	movs	r2, #0
 8020bc0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8020bc2:	4b13      	ldr	r3, [pc, #76]	; (8020c10 <MX_FMC_Init+0x98>)
 8020bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020bc8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8020bca:	4b11      	ldr	r3, [pc, #68]	; (8020c10 <MX_FMC_Init+0x98>)
 8020bcc:	2200      	movs	r2, #0
 8020bce:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8020bd0:	4b0f      	ldr	r3, [pc, #60]	; (8020c10 <MX_FMC_Init+0x98>)
 8020bd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8020bd6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8020bd8:	2302      	movs	r3, #2
 8020bda:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8020bdc:	2307      	movs	r3, #7
 8020bde:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8020be0:	2304      	movs	r3, #4
 8020be2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8020be4:	2307      	movs	r3, #7
 8020be6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8020be8:	2303      	movs	r3, #3
 8020bea:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8020bec:	2302      	movs	r3, #2
 8020bee:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8020bf0:	2302      	movs	r3, #2
 8020bf2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8020bf4:	1d3b      	adds	r3, r7, #4
 8020bf6:	4619      	mov	r1, r3
 8020bf8:	4805      	ldr	r0, [pc, #20]	; (8020c10 <MX_FMC_Init+0x98>)
 8020bfa:	f006 fbc9 	bl	8027390 <HAL_SDRAM_Init>
 8020bfe:	4603      	mov	r3, r0
 8020c00:	2b00      	cmp	r3, #0
 8020c02:	d001      	beq.n	8020c08 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8020c04:	f000 f950 	bl	8020ea8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8020c08:	bf00      	nop
 8020c0a:	3720      	adds	r7, #32
 8020c0c:	46bd      	mov	sp, r7
 8020c0e:	bd80      	pop	{r7, pc}
 8020c10:	20000368 	.word	0x20000368
 8020c14:	a0000140 	.word	0xa0000140

08020c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020c18:	b580      	push	{r7, lr}
 8020c1a:	b08e      	sub	sp, #56	; 0x38
 8020c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020c22:	2200      	movs	r2, #0
 8020c24:	601a      	str	r2, [r3, #0]
 8020c26:	605a      	str	r2, [r3, #4]
 8020c28:	609a      	str	r2, [r3, #8]
 8020c2a:	60da      	str	r2, [r3, #12]
 8020c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020c2e:	2300      	movs	r3, #0
 8020c30:	623b      	str	r3, [r7, #32]
 8020c32:	4b85      	ldr	r3, [pc, #532]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c36:	4a84      	ldr	r2, [pc, #528]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c38:	f043 0304 	orr.w	r3, r3, #4
 8020c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8020c3e:	4b82      	ldr	r3, [pc, #520]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c42:	f003 0304 	and.w	r3, r3, #4
 8020c46:	623b      	str	r3, [r7, #32]
 8020c48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8020c4a:	2300      	movs	r3, #0
 8020c4c:	61fb      	str	r3, [r7, #28]
 8020c4e:	4b7e      	ldr	r3, [pc, #504]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c52:	4a7d      	ldr	r2, [pc, #500]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c54:	f043 0320 	orr.w	r3, r3, #32
 8020c58:	6313      	str	r3, [r2, #48]	; 0x30
 8020c5a:	4b7b      	ldr	r3, [pc, #492]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c5e:	f003 0320 	and.w	r3, r3, #32
 8020c62:	61fb      	str	r3, [r7, #28]
 8020c64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020c66:	2300      	movs	r3, #0
 8020c68:	61bb      	str	r3, [r7, #24]
 8020c6a:	4b77      	ldr	r3, [pc, #476]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c6e:	4a76      	ldr	r2, [pc, #472]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c74:	6313      	str	r3, [r2, #48]	; 0x30
 8020c76:	4b74      	ldr	r3, [pc, #464]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020c7e:	61bb      	str	r3, [r7, #24]
 8020c80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020c82:	2300      	movs	r3, #0
 8020c84:	617b      	str	r3, [r7, #20]
 8020c86:	4b70      	ldr	r3, [pc, #448]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c8a:	4a6f      	ldr	r2, [pc, #444]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c8c:	f043 0301 	orr.w	r3, r3, #1
 8020c90:	6313      	str	r3, [r2, #48]	; 0x30
 8020c92:	4b6d      	ldr	r3, [pc, #436]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c96:	f003 0301 	and.w	r3, r3, #1
 8020c9a:	617b      	str	r3, [r7, #20]
 8020c9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020c9e:	2300      	movs	r3, #0
 8020ca0:	613b      	str	r3, [r7, #16]
 8020ca2:	4b69      	ldr	r3, [pc, #420]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ca6:	4a68      	ldr	r2, [pc, #416]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020ca8:	f043 0302 	orr.w	r3, r3, #2
 8020cac:	6313      	str	r3, [r2, #48]	; 0x30
 8020cae:	4b66      	ldr	r3, [pc, #408]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cb2:	f003 0302 	and.w	r3, r3, #2
 8020cb6:	613b      	str	r3, [r7, #16]
 8020cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8020cba:	2300      	movs	r3, #0
 8020cbc:	60fb      	str	r3, [r7, #12]
 8020cbe:	4b62      	ldr	r3, [pc, #392]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cc2:	4a61      	ldr	r2, [pc, #388]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8020cca:	4b5f      	ldr	r3, [pc, #380]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020cd2:	60fb      	str	r3, [r7, #12]
 8020cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8020cd6:	2300      	movs	r3, #0
 8020cd8:	60bb      	str	r3, [r7, #8]
 8020cda:	4b5b      	ldr	r3, [pc, #364]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cde:	4a5a      	ldr	r2, [pc, #360]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020ce0:	f043 0310 	orr.w	r3, r3, #16
 8020ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8020ce6:	4b58      	ldr	r3, [pc, #352]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cea:	f003 0310 	and.w	r3, r3, #16
 8020cee:	60bb      	str	r3, [r7, #8]
 8020cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020cf2:	2300      	movs	r3, #0
 8020cf4:	607b      	str	r3, [r7, #4]
 8020cf6:	4b54      	ldr	r3, [pc, #336]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cfa:	4a53      	ldr	r2, [pc, #332]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020cfc:	f043 0308 	orr.w	r3, r3, #8
 8020d00:	6313      	str	r3, [r2, #48]	; 0x30
 8020d02:	4b51      	ldr	r3, [pc, #324]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d06:	f003 0308 	and.w	r3, r3, #8
 8020d0a:	607b      	str	r3, [r7, #4]
 8020d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8020d0e:	2200      	movs	r2, #0
 8020d10:	2116      	movs	r1, #22
 8020d12:	484e      	ldr	r0, [pc, #312]	; (8020e4c <MX_GPIO_Init+0x234>)
 8020d14:	f003 faa6 	bl	8024264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8020d18:	2200      	movs	r2, #0
 8020d1a:	2180      	movs	r1, #128	; 0x80
 8020d1c:	484c      	ldr	r0, [pc, #304]	; (8020e50 <MX_GPIO_Init+0x238>)
 8020d1e:	f003 faa1 	bl	8024264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8020d22:	2200      	movs	r2, #0
 8020d24:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8020d28:	484a      	ldr	r0, [pc, #296]	; (8020e54 <MX_GPIO_Init+0x23c>)
 8020d2a:	f003 fa9b 	bl	8024264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8020d2e:	2200      	movs	r2, #0
 8020d30:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8020d34:	4848      	ldr	r0, [pc, #288]	; (8020e58 <MX_GPIO_Init+0x240>)
 8020d36:	f003 fa95 	bl	8024264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8020d3a:	2316      	movs	r3, #22
 8020d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d3e:	2301      	movs	r3, #1
 8020d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d42:	2300      	movs	r3, #0
 8020d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d46:	2300      	movs	r3, #0
 8020d48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d4e:	4619      	mov	r1, r3
 8020d50:	483e      	ldr	r0, [pc, #248]	; (8020e4c <MX_GPIO_Init+0x234>)
 8020d52:	f002 ffcf 	bl	8023cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8020d56:	2301      	movs	r3, #1
 8020d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8020d5a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8020d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d60:	2300      	movs	r3, #0
 8020d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8020d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d68:	4619      	mov	r1, r3
 8020d6a:	4839      	ldr	r0, [pc, #228]	; (8020e50 <MX_GPIO_Init+0x238>)
 8020d6c:	f002 ffc2 	bl	8023cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8020d70:	f248 0306 	movw	r3, #32774	; 0x8006
 8020d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020d76:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d7c:	2300      	movs	r3, #0
 8020d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d84:	4619      	mov	r1, r3
 8020d86:	4832      	ldr	r0, [pc, #200]	; (8020e50 <MX_GPIO_Init+0x238>)
 8020d88:	f002 ffb4 	bl	8023cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8020d8c:	2380      	movs	r3, #128	; 0x80
 8020d8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d90:	2301      	movs	r3, #1
 8020d92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d94:	2300      	movs	r3, #0
 8020d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d98:	2300      	movs	r3, #0
 8020d9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8020d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020da0:	4619      	mov	r1, r3
 8020da2:	482b      	ldr	r0, [pc, #172]	; (8020e50 <MX_GPIO_Init+0x238>)
 8020da4:	f002 ffa6 	bl	8023cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8020da8:	2320      	movs	r3, #32
 8020daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020dac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020db2:	2300      	movs	r3, #0
 8020db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8020db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dba:	4619      	mov	r1, r3
 8020dbc:	4823      	ldr	r0, [pc, #140]	; (8020e4c <MX_GPIO_Init+0x234>)
 8020dbe:	f002 ff99 	bl	8023cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8020dc2:	2304      	movs	r3, #4
 8020dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020dc6:	2300      	movs	r3, #0
 8020dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dca:	2300      	movs	r3, #0
 8020dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8020dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dd2:	4619      	mov	r1, r3
 8020dd4:	4821      	ldr	r0, [pc, #132]	; (8020e5c <MX_GPIO_Init+0x244>)
 8020dd6:	f002 ff8d 	bl	8023cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8020dda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020de0:	2300      	movs	r3, #0
 8020de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020de4:	2300      	movs	r3, #0
 8020de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8020de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dec:	4619      	mov	r1, r3
 8020dee:	4819      	ldr	r0, [pc, #100]	; (8020e54 <MX_GPIO_Init+0x23c>)
 8020df0:	f002 ff80 	bl	8023cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8020df4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8020df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020dfa:	2301      	movs	r3, #1
 8020dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dfe:	2300      	movs	r3, #0
 8020e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e02:	2300      	movs	r3, #0
 8020e04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e0a:	4619      	mov	r1, r3
 8020e0c:	4811      	ldr	r0, [pc, #68]	; (8020e54 <MX_GPIO_Init+0x23c>)
 8020e0e:	f002 ff71 	bl	8023cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8020e12:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8020e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e18:	2301      	movs	r3, #1
 8020e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e1c:	2300      	movs	r3, #0
 8020e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e20:	2300      	movs	r3, #0
 8020e22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e28:	4619      	mov	r1, r3
 8020e2a:	480b      	ldr	r0, [pc, #44]	; (8020e58 <MX_GPIO_Init+0x240>)
 8020e2c:	f002 ff62 	bl	8023cf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8020e30:	2200      	movs	r2, #0
 8020e32:	2100      	movs	r1, #0
 8020e34:	2006      	movs	r0, #6
 8020e36:	f002 f92b 	bl	8023090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8020e3a:	2006      	movs	r0, #6
 8020e3c:	f002 f944 	bl	80230c8 <HAL_NVIC_EnableIRQ>

}
 8020e40:	bf00      	nop
 8020e42:	3738      	adds	r7, #56	; 0x38
 8020e44:	46bd      	mov	sp, r7
 8020e46:	bd80      	pop	{r7, pc}
 8020e48:	40023800 	.word	0x40023800
 8020e4c:	40020800 	.word	0x40020800
 8020e50:	40020000 	.word	0x40020000
 8020e54:	40020c00 	.word	0x40020c00
 8020e58:	40021800 	.word	0x40021800
 8020e5c:	40020400 	.word	0x40020400

08020e60 <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8020e60:	b580      	push	{r7, lr}
 8020e62:	b082      	sub	sp, #8
 8020e64:	af00      	add	r7, sp, #0
 8020e66:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8020e68:	1d39      	adds	r1, r7, #4
 8020e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8020e6e:	2201      	movs	r2, #1
 8020e70:	4803      	ldr	r0, [pc, #12]	; (8020e80 <__io_putchar+0x20>)
 8020e72:	f007 fdcc 	bl	8028a0e <HAL_UART_Transmit>
	return ch;
 8020e76:	687b      	ldr	r3, [r7, #4]
}
 8020e78:	4618      	mov	r0, r3
 8020e7a:	3708      	adds	r7, #8
 8020e7c:	46bd      	mov	sp, r7
 8020e7e:	bd80      	pop	{r7, pc}
 8020e80:	20000324 	.word	0x20000324

08020e84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020e84:	b580      	push	{r7, lr}
 8020e86:	b082      	sub	sp, #8
 8020e88:	af00      	add	r7, sp, #0
 8020e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8020e8c:	687b      	ldr	r3, [r7, #4]
 8020e8e:	681b      	ldr	r3, [r3, #0]
 8020e90:	4a04      	ldr	r2, [pc, #16]	; (8020ea4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8020e92:	4293      	cmp	r3, r2
 8020e94:	d101      	bne.n	8020e9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8020e96:	f001 ffff 	bl	8022e98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8020e9a:	bf00      	nop
 8020e9c:	3708      	adds	r7, #8
 8020e9e:	46bd      	mov	sp, r7
 8020ea0:	bd80      	pop	{r7, pc}
 8020ea2:	bf00      	nop
 8020ea4:	40001000 	.word	0x40001000

08020ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020ea8:	b480      	push	{r7}
 8020eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020eac:	b672      	cpsid	i
}
 8020eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020eb0:	e7fe      	b.n	8020eb0 <Error_Handler+0x8>
	...

08020eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020eb4:	b480      	push	{r7}
 8020eb6:	b083      	sub	sp, #12
 8020eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020eba:	2300      	movs	r3, #0
 8020ebc:	607b      	str	r3, [r7, #4]
 8020ebe:	4b10      	ldr	r3, [pc, #64]	; (8020f00 <HAL_MspInit+0x4c>)
 8020ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020ec2:	4a0f      	ldr	r2, [pc, #60]	; (8020f00 <HAL_MspInit+0x4c>)
 8020ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8020eca:	4b0d      	ldr	r3, [pc, #52]	; (8020f00 <HAL_MspInit+0x4c>)
 8020ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020ed2:	607b      	str	r3, [r7, #4]
 8020ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020ed6:	2300      	movs	r3, #0
 8020ed8:	603b      	str	r3, [r7, #0]
 8020eda:	4b09      	ldr	r3, [pc, #36]	; (8020f00 <HAL_MspInit+0x4c>)
 8020edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020ede:	4a08      	ldr	r2, [pc, #32]	; (8020f00 <HAL_MspInit+0x4c>)
 8020ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8020ee6:	4b06      	ldr	r3, [pc, #24]	; (8020f00 <HAL_MspInit+0x4c>)
 8020ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020eee:	603b      	str	r3, [r7, #0]
 8020ef0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020ef2:	bf00      	nop
 8020ef4:	370c      	adds	r7, #12
 8020ef6:	46bd      	mov	sp, r7
 8020ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020efc:	4770      	bx	lr
 8020efe:	bf00      	nop
 8020f00:	40023800 	.word	0x40023800

08020f04 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8020f04:	b480      	push	{r7}
 8020f06:	b085      	sub	sp, #20
 8020f08:	af00      	add	r7, sp, #0
 8020f0a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8020f0c:	687b      	ldr	r3, [r7, #4]
 8020f0e:	681b      	ldr	r3, [r3, #0]
 8020f10:	4a0b      	ldr	r2, [pc, #44]	; (8020f40 <HAL_CRC_MspInit+0x3c>)
 8020f12:	4293      	cmp	r3, r2
 8020f14:	d10d      	bne.n	8020f32 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8020f16:	2300      	movs	r3, #0
 8020f18:	60fb      	str	r3, [r7, #12]
 8020f1a:	4b0a      	ldr	r3, [pc, #40]	; (8020f44 <HAL_CRC_MspInit+0x40>)
 8020f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f1e:	4a09      	ldr	r2, [pc, #36]	; (8020f44 <HAL_CRC_MspInit+0x40>)
 8020f20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8020f24:	6313      	str	r3, [r2, #48]	; 0x30
 8020f26:	4b07      	ldr	r3, [pc, #28]	; (8020f44 <HAL_CRC_MspInit+0x40>)
 8020f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8020f2e:	60fb      	str	r3, [r7, #12]
 8020f30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8020f32:	bf00      	nop
 8020f34:	3714      	adds	r7, #20
 8020f36:	46bd      	mov	sp, r7
 8020f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f3c:	4770      	bx	lr
 8020f3e:	bf00      	nop
 8020f40:	40023000 	.word	0x40023000
 8020f44:	40023800 	.word	0x40023800

08020f48 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8020f48:	b580      	push	{r7, lr}
 8020f4a:	b084      	sub	sp, #16
 8020f4c:	af00      	add	r7, sp, #0
 8020f4e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8020f50:	687b      	ldr	r3, [r7, #4]
 8020f52:	681b      	ldr	r3, [r3, #0]
 8020f54:	4a0e      	ldr	r2, [pc, #56]	; (8020f90 <HAL_DMA2D_MspInit+0x48>)
 8020f56:	4293      	cmp	r3, r2
 8020f58:	d115      	bne.n	8020f86 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8020f5a:	2300      	movs	r3, #0
 8020f5c:	60fb      	str	r3, [r7, #12]
 8020f5e:	4b0d      	ldr	r3, [pc, #52]	; (8020f94 <HAL_DMA2D_MspInit+0x4c>)
 8020f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f62:	4a0c      	ldr	r2, [pc, #48]	; (8020f94 <HAL_DMA2D_MspInit+0x4c>)
 8020f64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8020f68:	6313      	str	r3, [r2, #48]	; 0x30
 8020f6a:	4b0a      	ldr	r3, [pc, #40]	; (8020f94 <HAL_DMA2D_MspInit+0x4c>)
 8020f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8020f72:	60fb      	str	r3, [r7, #12]
 8020f74:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8020f76:	2200      	movs	r2, #0
 8020f78:	2105      	movs	r1, #5
 8020f7a:	205a      	movs	r0, #90	; 0x5a
 8020f7c:	f002 f888 	bl	8023090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8020f80:	205a      	movs	r0, #90	; 0x5a
 8020f82:	f002 f8a1 	bl	80230c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8020f86:	bf00      	nop
 8020f88:	3710      	adds	r7, #16
 8020f8a:	46bd      	mov	sp, r7
 8020f8c:	bd80      	pop	{r7, pc}
 8020f8e:	bf00      	nop
 8020f90:	4002b000 	.word	0x4002b000
 8020f94:	40023800 	.word	0x40023800

08020f98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8020f98:	b580      	push	{r7, lr}
 8020f9a:	b08a      	sub	sp, #40	; 0x28
 8020f9c:	af00      	add	r7, sp, #0
 8020f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020fa0:	f107 0314 	add.w	r3, r7, #20
 8020fa4:	2200      	movs	r2, #0
 8020fa6:	601a      	str	r2, [r3, #0]
 8020fa8:	605a      	str	r2, [r3, #4]
 8020faa:	609a      	str	r2, [r3, #8]
 8020fac:	60da      	str	r2, [r3, #12]
 8020fae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	681b      	ldr	r3, [r3, #0]
 8020fb4:	4a29      	ldr	r2, [pc, #164]	; (802105c <HAL_I2C_MspInit+0xc4>)
 8020fb6:	4293      	cmp	r3, r2
 8020fb8:	d14b      	bne.n	8021052 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8020fba:	2300      	movs	r3, #0
 8020fbc:	613b      	str	r3, [r7, #16]
 8020fbe:	4b28      	ldr	r3, [pc, #160]	; (8021060 <HAL_I2C_MspInit+0xc8>)
 8020fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020fc2:	4a27      	ldr	r2, [pc, #156]	; (8021060 <HAL_I2C_MspInit+0xc8>)
 8020fc4:	f043 0304 	orr.w	r3, r3, #4
 8020fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8020fca:	4b25      	ldr	r3, [pc, #148]	; (8021060 <HAL_I2C_MspInit+0xc8>)
 8020fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020fce:	f003 0304 	and.w	r3, r3, #4
 8020fd2:	613b      	str	r3, [r7, #16]
 8020fd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020fd6:	2300      	movs	r3, #0
 8020fd8:	60fb      	str	r3, [r7, #12]
 8020fda:	4b21      	ldr	r3, [pc, #132]	; (8021060 <HAL_I2C_MspInit+0xc8>)
 8020fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020fde:	4a20      	ldr	r2, [pc, #128]	; (8021060 <HAL_I2C_MspInit+0xc8>)
 8020fe0:	f043 0301 	orr.w	r3, r3, #1
 8020fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8020fe6:	4b1e      	ldr	r3, [pc, #120]	; (8021060 <HAL_I2C_MspInit+0xc8>)
 8020fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020fea:	f003 0301 	and.w	r3, r3, #1
 8020fee:	60fb      	str	r3, [r7, #12]
 8020ff0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8020ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8020ff8:	2312      	movs	r3, #18
 8020ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8020ffc:	2301      	movs	r3, #1
 8020ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021000:	2300      	movs	r3, #0
 8021002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8021004:	2304      	movs	r3, #4
 8021006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8021008:	f107 0314 	add.w	r3, r7, #20
 802100c:	4619      	mov	r1, r3
 802100e:	4815      	ldr	r0, [pc, #84]	; (8021064 <HAL_I2C_MspInit+0xcc>)
 8021010:	f002 fe70 	bl	8023cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8021014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802101a:	2312      	movs	r3, #18
 802101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802101e:	2301      	movs	r3, #1
 8021020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021022:	2300      	movs	r3, #0
 8021024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8021026:	2304      	movs	r3, #4
 8021028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 802102a:	f107 0314 	add.w	r3, r7, #20
 802102e:	4619      	mov	r1, r3
 8021030:	480d      	ldr	r0, [pc, #52]	; (8021068 <HAL_I2C_MspInit+0xd0>)
 8021032:	f002 fe5f 	bl	8023cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8021036:	2300      	movs	r3, #0
 8021038:	60bb      	str	r3, [r7, #8]
 802103a:	4b09      	ldr	r3, [pc, #36]	; (8021060 <HAL_I2C_MspInit+0xc8>)
 802103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802103e:	4a08      	ldr	r2, [pc, #32]	; (8021060 <HAL_I2C_MspInit+0xc8>)
 8021040:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8021044:	6413      	str	r3, [r2, #64]	; 0x40
 8021046:	4b06      	ldr	r3, [pc, #24]	; (8021060 <HAL_I2C_MspInit+0xc8>)
 8021048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802104a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802104e:	60bb      	str	r3, [r7, #8]
 8021050:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8021052:	bf00      	nop
 8021054:	3728      	adds	r7, #40	; 0x28
 8021056:	46bd      	mov	sp, r7
 8021058:	bd80      	pop	{r7, pc}
 802105a:	bf00      	nop
 802105c:	40005c00 	.word	0x40005c00
 8021060:	40023800 	.word	0x40023800
 8021064:	40020800 	.word	0x40020800
 8021068:	40020000 	.word	0x40020000

0802106c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 802106c:	b580      	push	{r7, lr}
 802106e:	b09a      	sub	sp, #104	; 0x68
 8021070:	af00      	add	r7, sp, #0
 8021072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021074:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021078:	2200      	movs	r2, #0
 802107a:	601a      	str	r2, [r3, #0]
 802107c:	605a      	str	r2, [r3, #4]
 802107e:	609a      	str	r2, [r3, #8]
 8021080:	60da      	str	r2, [r3, #12]
 8021082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8021084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021088:	2230      	movs	r2, #48	; 0x30
 802108a:	2100      	movs	r1, #0
 802108c:	4618      	mov	r0, r3
 802108e:	f00c f91f 	bl	802d2d0 <memset>
  if(hltdc->Instance==LTDC)
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	681b      	ldr	r3, [r3, #0]
 8021096:	4a85      	ldr	r2, [pc, #532]	; (80212ac <HAL_LTDC_MspInit+0x240>)
 8021098:	4293      	cmp	r3, r2
 802109a:	f040 8102 	bne.w	80212a2 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 802109e:	2308      	movs	r3, #8
 80210a0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 80210a2:	2331      	movs	r3, #49	; 0x31
 80210a4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 80210a6:	2302      	movs	r3, #2
 80210a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80210aa:	2300      	movs	r3, #0
 80210ac:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80210ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80210b2:	4618      	mov	r0, r3
 80210b4:	f005 ffac 	bl	8027010 <HAL_RCCEx_PeriphCLKConfig>
 80210b8:	4603      	mov	r3, r0
 80210ba:	2b00      	cmp	r3, #0
 80210bc:	d001      	beq.n	80210c2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80210be:	f7ff fef3 	bl	8020ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80210c2:	2300      	movs	r3, #0
 80210c4:	623b      	str	r3, [r7, #32]
 80210c6:	4b7a      	ldr	r3, [pc, #488]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 80210c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80210ca:	4a79      	ldr	r2, [pc, #484]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 80210cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80210d0:	6453      	str	r3, [r2, #68]	; 0x44
 80210d2:	4b77      	ldr	r3, [pc, #476]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 80210d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80210d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80210da:	623b      	str	r3, [r7, #32]
 80210dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80210de:	2300      	movs	r3, #0
 80210e0:	61fb      	str	r3, [r7, #28]
 80210e2:	4b73      	ldr	r3, [pc, #460]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 80210e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210e6:	4a72      	ldr	r2, [pc, #456]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 80210e8:	f043 0320 	orr.w	r3, r3, #32
 80210ec:	6313      	str	r3, [r2, #48]	; 0x30
 80210ee:	4b70      	ldr	r3, [pc, #448]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 80210f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210f2:	f003 0320 	and.w	r3, r3, #32
 80210f6:	61fb      	str	r3, [r7, #28]
 80210f8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80210fa:	2300      	movs	r3, #0
 80210fc:	61bb      	str	r3, [r7, #24]
 80210fe:	4b6c      	ldr	r3, [pc, #432]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 8021100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021102:	4a6b      	ldr	r2, [pc, #428]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 8021104:	f043 0301 	orr.w	r3, r3, #1
 8021108:	6313      	str	r3, [r2, #48]	; 0x30
 802110a:	4b69      	ldr	r3, [pc, #420]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 802110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802110e:	f003 0301 	and.w	r3, r3, #1
 8021112:	61bb      	str	r3, [r7, #24]
 8021114:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021116:	2300      	movs	r3, #0
 8021118:	617b      	str	r3, [r7, #20]
 802111a:	4b65      	ldr	r3, [pc, #404]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 802111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802111e:	4a64      	ldr	r2, [pc, #400]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 8021120:	f043 0302 	orr.w	r3, r3, #2
 8021124:	6313      	str	r3, [r2, #48]	; 0x30
 8021126:	4b62      	ldr	r3, [pc, #392]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 8021128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802112a:	f003 0302 	and.w	r3, r3, #2
 802112e:	617b      	str	r3, [r7, #20]
 8021130:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8021132:	2300      	movs	r3, #0
 8021134:	613b      	str	r3, [r7, #16]
 8021136:	4b5e      	ldr	r3, [pc, #376]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 8021138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802113a:	4a5d      	ldr	r2, [pc, #372]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 802113c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021140:	6313      	str	r3, [r2, #48]	; 0x30
 8021142:	4b5b      	ldr	r3, [pc, #364]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 8021144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802114a:	613b      	str	r3, [r7, #16]
 802114c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802114e:	2300      	movs	r3, #0
 8021150:	60fb      	str	r3, [r7, #12]
 8021152:	4b57      	ldr	r3, [pc, #348]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 8021154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021156:	4a56      	ldr	r2, [pc, #344]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 8021158:	f043 0304 	orr.w	r3, r3, #4
 802115c:	6313      	str	r3, [r2, #48]	; 0x30
 802115e:	4b54      	ldr	r3, [pc, #336]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 8021160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021162:	f003 0304 	and.w	r3, r3, #4
 8021166:	60fb      	str	r3, [r7, #12]
 8021168:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802116a:	2300      	movs	r3, #0
 802116c:	60bb      	str	r3, [r7, #8]
 802116e:	4b50      	ldr	r3, [pc, #320]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 8021170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021172:	4a4f      	ldr	r2, [pc, #316]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 8021174:	f043 0308 	orr.w	r3, r3, #8
 8021178:	6313      	str	r3, [r2, #48]	; 0x30
 802117a:	4b4d      	ldr	r3, [pc, #308]	; (80212b0 <HAL_LTDC_MspInit+0x244>)
 802117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802117e:	f003 0308 	and.w	r3, r3, #8
 8021182:	60bb      	str	r3, [r7, #8]
 8021184:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8021186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802118a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802118c:	2302      	movs	r3, #2
 802118e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021190:	2300      	movs	r3, #0
 8021192:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021194:	2300      	movs	r3, #0
 8021196:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021198:	230e      	movs	r3, #14
 802119a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 802119c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80211a0:	4619      	mov	r1, r3
 80211a2:	4844      	ldr	r0, [pc, #272]	; (80212b4 <HAL_LTDC_MspInit+0x248>)
 80211a4:	f002 fda6 	bl	8023cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80211a8:	f641 0358 	movw	r3, #6232	; 0x1858
 80211ac:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80211ae:	2302      	movs	r3, #2
 80211b0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80211b2:	2300      	movs	r3, #0
 80211b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80211b6:	2300      	movs	r3, #0
 80211b8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80211ba:	230e      	movs	r3, #14
 80211bc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80211be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80211c2:	4619      	mov	r1, r3
 80211c4:	483c      	ldr	r0, [pc, #240]	; (80212b8 <HAL_LTDC_MspInit+0x24c>)
 80211c6:	f002 fd95 	bl	8023cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80211ca:	2303      	movs	r3, #3
 80211cc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80211ce:	2302      	movs	r3, #2
 80211d0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80211d2:	2300      	movs	r3, #0
 80211d4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80211d6:	2300      	movs	r3, #0
 80211d8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80211da:	2309      	movs	r3, #9
 80211dc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80211de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80211e2:	4619      	mov	r1, r3
 80211e4:	4835      	ldr	r0, [pc, #212]	; (80212bc <HAL_LTDC_MspInit+0x250>)
 80211e6:	f002 fd85 	bl	8023cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80211ea:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80211ee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80211f0:	2302      	movs	r3, #2
 80211f2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80211f4:	2300      	movs	r3, #0
 80211f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80211f8:	2300      	movs	r3, #0
 80211fa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80211fc:	230e      	movs	r3, #14
 80211fe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021200:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021204:	4619      	mov	r1, r3
 8021206:	482d      	ldr	r0, [pc, #180]	; (80212bc <HAL_LTDC_MspInit+0x250>)
 8021208:	f002 fd74 	bl	8023cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 802120c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8021210:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021212:	2302      	movs	r3, #2
 8021214:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021216:	2300      	movs	r3, #0
 8021218:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802121a:	2300      	movs	r3, #0
 802121c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 802121e:	230e      	movs	r3, #14
 8021220:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021222:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021226:	4619      	mov	r1, r3
 8021228:	4825      	ldr	r0, [pc, #148]	; (80212c0 <HAL_LTDC_MspInit+0x254>)
 802122a:	f002 fd63 	bl	8023cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 802122e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8021232:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021234:	2302      	movs	r3, #2
 8021236:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021238:	2300      	movs	r3, #0
 802123a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802123c:	2300      	movs	r3, #0
 802123e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021240:	230e      	movs	r3, #14
 8021242:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021244:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021248:	4619      	mov	r1, r3
 802124a:	481e      	ldr	r0, [pc, #120]	; (80212c4 <HAL_LTDC_MspInit+0x258>)
 802124c:	f002 fd52 	bl	8023cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8021250:	2348      	movs	r3, #72	; 0x48
 8021252:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021254:	2302      	movs	r3, #2
 8021256:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021258:	2300      	movs	r3, #0
 802125a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802125c:	2300      	movs	r3, #0
 802125e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021260:	230e      	movs	r3, #14
 8021262:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021264:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021268:	4619      	mov	r1, r3
 802126a:	4817      	ldr	r0, [pc, #92]	; (80212c8 <HAL_LTDC_MspInit+0x25c>)
 802126c:	f002 fd42 	bl	8023cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8021270:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8021274:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021276:	2302      	movs	r3, #2
 8021278:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802127a:	2300      	movs	r3, #0
 802127c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802127e:	2300      	movs	r3, #0
 8021280:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8021282:	2309      	movs	r3, #9
 8021284:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021286:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802128a:	4619      	mov	r1, r3
 802128c:	480c      	ldr	r0, [pc, #48]	; (80212c0 <HAL_LTDC_MspInit+0x254>)
 802128e:	f002 fd31 	bl	8023cf4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8021292:	2200      	movs	r2, #0
 8021294:	2105      	movs	r1, #5
 8021296:	2058      	movs	r0, #88	; 0x58
 8021298:	f001 fefa 	bl	8023090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 802129c:	2058      	movs	r0, #88	; 0x58
 802129e:	f001 ff13 	bl	80230c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80212a2:	bf00      	nop
 80212a4:	3768      	adds	r7, #104	; 0x68
 80212a6:	46bd      	mov	sp, r7
 80212a8:	bd80      	pop	{r7, pc}
 80212aa:	bf00      	nop
 80212ac:	40016800 	.word	0x40016800
 80212b0:	40023800 	.word	0x40023800
 80212b4:	40021400 	.word	0x40021400
 80212b8:	40020000 	.word	0x40020000
 80212bc:	40020400 	.word	0x40020400
 80212c0:	40021800 	.word	0x40021800
 80212c4:	40020800 	.word	0x40020800
 80212c8:	40020c00 	.word	0x40020c00

080212cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80212cc:	b580      	push	{r7, lr}
 80212ce:	b08a      	sub	sp, #40	; 0x28
 80212d0:	af00      	add	r7, sp, #0
 80212d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80212d4:	f107 0314 	add.w	r3, r7, #20
 80212d8:	2200      	movs	r2, #0
 80212da:	601a      	str	r2, [r3, #0]
 80212dc:	605a      	str	r2, [r3, #4]
 80212de:	609a      	str	r2, [r3, #8]
 80212e0:	60da      	str	r2, [r3, #12]
 80212e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80212e4:	687b      	ldr	r3, [r7, #4]
 80212e6:	681b      	ldr	r3, [r3, #0]
 80212e8:	4a19      	ldr	r2, [pc, #100]	; (8021350 <HAL_SPI_MspInit+0x84>)
 80212ea:	4293      	cmp	r3, r2
 80212ec:	d12c      	bne.n	8021348 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80212ee:	2300      	movs	r3, #0
 80212f0:	613b      	str	r3, [r7, #16]
 80212f2:	4b18      	ldr	r3, [pc, #96]	; (8021354 <HAL_SPI_MspInit+0x88>)
 80212f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80212f6:	4a17      	ldr	r2, [pc, #92]	; (8021354 <HAL_SPI_MspInit+0x88>)
 80212f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80212fc:	6453      	str	r3, [r2, #68]	; 0x44
 80212fe:	4b15      	ldr	r3, [pc, #84]	; (8021354 <HAL_SPI_MspInit+0x88>)
 8021300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021306:	613b      	str	r3, [r7, #16]
 8021308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 802130a:	2300      	movs	r3, #0
 802130c:	60fb      	str	r3, [r7, #12]
 802130e:	4b11      	ldr	r3, [pc, #68]	; (8021354 <HAL_SPI_MspInit+0x88>)
 8021310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021312:	4a10      	ldr	r2, [pc, #64]	; (8021354 <HAL_SPI_MspInit+0x88>)
 8021314:	f043 0320 	orr.w	r3, r3, #32
 8021318:	6313      	str	r3, [r2, #48]	; 0x30
 802131a:	4b0e      	ldr	r3, [pc, #56]	; (8021354 <HAL_SPI_MspInit+0x88>)
 802131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802131e:	f003 0320 	and.w	r3, r3, #32
 8021322:	60fb      	str	r3, [r7, #12]
 8021324:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8021326:	f44f 7360 	mov.w	r3, #896	; 0x380
 802132a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802132c:	2302      	movs	r3, #2
 802132e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021330:	2300      	movs	r3, #0
 8021332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021334:	2300      	movs	r3, #0
 8021336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8021338:	2305      	movs	r3, #5
 802133a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 802133c:	f107 0314 	add.w	r3, r7, #20
 8021340:	4619      	mov	r1, r3
 8021342:	4805      	ldr	r0, [pc, #20]	; (8021358 <HAL_SPI_MspInit+0x8c>)
 8021344:	f002 fcd6 	bl	8023cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8021348:	bf00      	nop
 802134a:	3728      	adds	r7, #40	; 0x28
 802134c:	46bd      	mov	sp, r7
 802134e:	bd80      	pop	{r7, pc}
 8021350:	40015000 	.word	0x40015000
 8021354:	40023800 	.word	0x40023800
 8021358:	40021400 	.word	0x40021400

0802135c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 802135c:	b580      	push	{r7, lr}
 802135e:	b082      	sub	sp, #8
 8021360:	af00      	add	r7, sp, #0
 8021362:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8021364:	687b      	ldr	r3, [r7, #4]
 8021366:	681b      	ldr	r3, [r3, #0]
 8021368:	4a08      	ldr	r2, [pc, #32]	; (802138c <HAL_SPI_MspDeInit+0x30>)
 802136a:	4293      	cmp	r3, r2
 802136c:	d10a      	bne.n	8021384 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 802136e:	4b08      	ldr	r3, [pc, #32]	; (8021390 <HAL_SPI_MspDeInit+0x34>)
 8021370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021372:	4a07      	ldr	r2, [pc, #28]	; (8021390 <HAL_SPI_MspDeInit+0x34>)
 8021374:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8021378:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 802137a:	f44f 7160 	mov.w	r1, #896	; 0x380
 802137e:	4805      	ldr	r0, [pc, #20]	; (8021394 <HAL_SPI_MspDeInit+0x38>)
 8021380:	f002 fe64 	bl	802404c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8021384:	bf00      	nop
 8021386:	3708      	adds	r7, #8
 8021388:	46bd      	mov	sp, r7
 802138a:	bd80      	pop	{r7, pc}
 802138c:	40015000 	.word	0x40015000
 8021390:	40023800 	.word	0x40023800
 8021394:	40021400 	.word	0x40021400

08021398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8021398:	b480      	push	{r7}
 802139a:	b085      	sub	sp, #20
 802139c:	af00      	add	r7, sp, #0
 802139e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80213a0:	687b      	ldr	r3, [r7, #4]
 80213a2:	681b      	ldr	r3, [r3, #0]
 80213a4:	4a0b      	ldr	r2, [pc, #44]	; (80213d4 <HAL_TIM_Base_MspInit+0x3c>)
 80213a6:	4293      	cmp	r3, r2
 80213a8:	d10d      	bne.n	80213c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80213aa:	2300      	movs	r3, #0
 80213ac:	60fb      	str	r3, [r7, #12]
 80213ae:	4b0a      	ldr	r3, [pc, #40]	; (80213d8 <HAL_TIM_Base_MspInit+0x40>)
 80213b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80213b2:	4a09      	ldr	r2, [pc, #36]	; (80213d8 <HAL_TIM_Base_MspInit+0x40>)
 80213b4:	f043 0301 	orr.w	r3, r3, #1
 80213b8:	6453      	str	r3, [r2, #68]	; 0x44
 80213ba:	4b07      	ldr	r3, [pc, #28]	; (80213d8 <HAL_TIM_Base_MspInit+0x40>)
 80213bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80213be:	f003 0301 	and.w	r3, r3, #1
 80213c2:	60fb      	str	r3, [r7, #12]
 80213c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80213c6:	bf00      	nop
 80213c8:	3714      	adds	r7, #20
 80213ca:	46bd      	mov	sp, r7
 80213cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213d0:	4770      	bx	lr
 80213d2:	bf00      	nop
 80213d4:	40010000 	.word	0x40010000
 80213d8:	40023800 	.word	0x40023800

080213dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80213dc:	b580      	push	{r7, lr}
 80213de:	b08c      	sub	sp, #48	; 0x30
 80213e0:	af00      	add	r7, sp, #0
 80213e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80213e4:	f107 031c 	add.w	r3, r7, #28
 80213e8:	2200      	movs	r2, #0
 80213ea:	601a      	str	r2, [r3, #0]
 80213ec:	605a      	str	r2, [r3, #4]
 80213ee:	609a      	str	r2, [r3, #8]
 80213f0:	60da      	str	r2, [r3, #12]
 80213f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80213f4:	687b      	ldr	r3, [r7, #4]
 80213f6:	681b      	ldr	r3, [r3, #0]
 80213f8:	4a46      	ldr	r2, [pc, #280]	; (8021514 <HAL_UART_MspInit+0x138>)
 80213fa:	4293      	cmp	r3, r2
 80213fc:	d153      	bne.n	80214a6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80213fe:	2300      	movs	r3, #0
 8021400:	61bb      	str	r3, [r7, #24]
 8021402:	4b45      	ldr	r3, [pc, #276]	; (8021518 <HAL_UART_MspInit+0x13c>)
 8021404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021406:	4a44      	ldr	r2, [pc, #272]	; (8021518 <HAL_UART_MspInit+0x13c>)
 8021408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802140c:	6413      	str	r3, [r2, #64]	; 0x40
 802140e:	4b42      	ldr	r3, [pc, #264]	; (8021518 <HAL_UART_MspInit+0x13c>)
 8021410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021416:	61bb      	str	r3, [r7, #24]
 8021418:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802141a:	2300      	movs	r3, #0
 802141c:	617b      	str	r3, [r7, #20]
 802141e:	4b3e      	ldr	r3, [pc, #248]	; (8021518 <HAL_UART_MspInit+0x13c>)
 8021420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021422:	4a3d      	ldr	r2, [pc, #244]	; (8021518 <HAL_UART_MspInit+0x13c>)
 8021424:	f043 0304 	orr.w	r3, r3, #4
 8021428:	6313      	str	r3, [r2, #48]	; 0x30
 802142a:	4b3b      	ldr	r3, [pc, #236]	; (8021518 <HAL_UART_MspInit+0x13c>)
 802142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802142e:	f003 0304 	and.w	r3, r3, #4
 8021432:	617b      	str	r3, [r7, #20]
 8021434:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021436:	2300      	movs	r3, #0
 8021438:	613b      	str	r3, [r7, #16]
 802143a:	4b37      	ldr	r3, [pc, #220]	; (8021518 <HAL_UART_MspInit+0x13c>)
 802143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802143e:	4a36      	ldr	r2, [pc, #216]	; (8021518 <HAL_UART_MspInit+0x13c>)
 8021440:	f043 0308 	orr.w	r3, r3, #8
 8021444:	6313      	str	r3, [r2, #48]	; 0x30
 8021446:	4b34      	ldr	r3, [pc, #208]	; (8021518 <HAL_UART_MspInit+0x13c>)
 8021448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802144a:	f003 0308 	and.w	r3, r3, #8
 802144e:	613b      	str	r3, [r7, #16]
 8021450:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8021452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021458:	2302      	movs	r3, #2
 802145a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802145c:	2300      	movs	r3, #0
 802145e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021460:	2303      	movs	r3, #3
 8021462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021464:	2308      	movs	r3, #8
 8021466:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021468:	f107 031c 	add.w	r3, r7, #28
 802146c:	4619      	mov	r1, r3
 802146e:	482b      	ldr	r0, [pc, #172]	; (802151c <HAL_UART_MspInit+0x140>)
 8021470:	f002 fc40 	bl	8023cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021474:	2304      	movs	r3, #4
 8021476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021478:	2302      	movs	r3, #2
 802147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802147c:	2300      	movs	r3, #0
 802147e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021480:	2303      	movs	r3, #3
 8021482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021484:	2308      	movs	r3, #8
 8021486:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021488:	f107 031c 	add.w	r3, r7, #28
 802148c:	4619      	mov	r1, r3
 802148e:	4824      	ldr	r0, [pc, #144]	; (8021520 <HAL_UART_MspInit+0x144>)
 8021490:	f002 fc30 	bl	8023cf4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8021494:	2200      	movs	r2, #0
 8021496:	2100      	movs	r1, #0
 8021498:	2035      	movs	r0, #53	; 0x35
 802149a:	f001 fdf9 	bl	8023090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 802149e:	2035      	movs	r0, #53	; 0x35
 80214a0:	f001 fe12 	bl	80230c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80214a4:	e031      	b.n	802150a <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 80214a6:	687b      	ldr	r3, [r7, #4]
 80214a8:	681b      	ldr	r3, [r3, #0]
 80214aa:	4a1e      	ldr	r2, [pc, #120]	; (8021524 <HAL_UART_MspInit+0x148>)
 80214ac:	4293      	cmp	r3, r2
 80214ae:	d12c      	bne.n	802150a <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80214b0:	2300      	movs	r3, #0
 80214b2:	60fb      	str	r3, [r7, #12]
 80214b4:	4b18      	ldr	r3, [pc, #96]	; (8021518 <HAL_UART_MspInit+0x13c>)
 80214b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80214b8:	4a17      	ldr	r2, [pc, #92]	; (8021518 <HAL_UART_MspInit+0x13c>)
 80214ba:	f043 0310 	orr.w	r3, r3, #16
 80214be:	6453      	str	r3, [r2, #68]	; 0x44
 80214c0:	4b15      	ldr	r3, [pc, #84]	; (8021518 <HAL_UART_MspInit+0x13c>)
 80214c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80214c4:	f003 0310 	and.w	r3, r3, #16
 80214c8:	60fb      	str	r3, [r7, #12]
 80214ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80214cc:	2300      	movs	r3, #0
 80214ce:	60bb      	str	r3, [r7, #8]
 80214d0:	4b11      	ldr	r3, [pc, #68]	; (8021518 <HAL_UART_MspInit+0x13c>)
 80214d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214d4:	4a10      	ldr	r2, [pc, #64]	; (8021518 <HAL_UART_MspInit+0x13c>)
 80214d6:	f043 0301 	orr.w	r3, r3, #1
 80214da:	6313      	str	r3, [r2, #48]	; 0x30
 80214dc:	4b0e      	ldr	r3, [pc, #56]	; (8021518 <HAL_UART_MspInit+0x13c>)
 80214de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214e0:	f003 0301 	and.w	r3, r3, #1
 80214e4:	60bb      	str	r3, [r7, #8]
 80214e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80214e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80214ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80214ee:	2302      	movs	r3, #2
 80214f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80214f2:	2300      	movs	r3, #0
 80214f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80214f6:	2303      	movs	r3, #3
 80214f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80214fa:	2307      	movs	r3, #7
 80214fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80214fe:	f107 031c 	add.w	r3, r7, #28
 8021502:	4619      	mov	r1, r3
 8021504:	4808      	ldr	r0, [pc, #32]	; (8021528 <HAL_UART_MspInit+0x14c>)
 8021506:	f002 fbf5 	bl	8023cf4 <HAL_GPIO_Init>
}
 802150a:	bf00      	nop
 802150c:	3730      	adds	r7, #48	; 0x30
 802150e:	46bd      	mov	sp, r7
 8021510:	bd80      	pop	{r7, pc}
 8021512:	bf00      	nop
 8021514:	40005000 	.word	0x40005000
 8021518:	40023800 	.word	0x40023800
 802151c:	40020800 	.word	0x40020800
 8021520:	40020c00 	.word	0x40020c00
 8021524:	40011000 	.word	0x40011000
 8021528:	40020000 	.word	0x40020000

0802152c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 802152c:	b580      	push	{r7, lr}
 802152e:	b086      	sub	sp, #24
 8021530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8021532:	1d3b      	adds	r3, r7, #4
 8021534:	2200      	movs	r2, #0
 8021536:	601a      	str	r2, [r3, #0]
 8021538:	605a      	str	r2, [r3, #4]
 802153a:	609a      	str	r2, [r3, #8]
 802153c:	60da      	str	r2, [r3, #12]
 802153e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8021540:	4b3b      	ldr	r3, [pc, #236]	; (8021630 <HAL_FMC_MspInit+0x104>)
 8021542:	681b      	ldr	r3, [r3, #0]
 8021544:	2b00      	cmp	r3, #0
 8021546:	d16f      	bne.n	8021628 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8021548:	4b39      	ldr	r3, [pc, #228]	; (8021630 <HAL_FMC_MspInit+0x104>)
 802154a:	2201      	movs	r2, #1
 802154c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 802154e:	2300      	movs	r3, #0
 8021550:	603b      	str	r3, [r7, #0]
 8021552:	4b38      	ldr	r3, [pc, #224]	; (8021634 <HAL_FMC_MspInit+0x108>)
 8021554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021556:	4a37      	ldr	r2, [pc, #220]	; (8021634 <HAL_FMC_MspInit+0x108>)
 8021558:	f043 0301 	orr.w	r3, r3, #1
 802155c:	6393      	str	r3, [r2, #56]	; 0x38
 802155e:	4b35      	ldr	r3, [pc, #212]	; (8021634 <HAL_FMC_MspInit+0x108>)
 8021560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021562:	f003 0301 	and.w	r3, r3, #1
 8021566:	603b      	str	r3, [r7, #0]
 8021568:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 802156a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 802156e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021570:	2302      	movs	r3, #2
 8021572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021574:	2300      	movs	r3, #0
 8021576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021578:	2303      	movs	r3, #3
 802157a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 802157c:	230c      	movs	r3, #12
 802157e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021580:	1d3b      	adds	r3, r7, #4
 8021582:	4619      	mov	r1, r3
 8021584:	482c      	ldr	r0, [pc, #176]	; (8021638 <HAL_FMC_MspInit+0x10c>)
 8021586:	f002 fbb5 	bl	8023cf4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 802158a:	2301      	movs	r3, #1
 802158c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802158e:	2302      	movs	r3, #2
 8021590:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021592:	2300      	movs	r3, #0
 8021594:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021596:	2303      	movs	r3, #3
 8021598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 802159a:	230c      	movs	r3, #12
 802159c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 802159e:	1d3b      	adds	r3, r7, #4
 80215a0:	4619      	mov	r1, r3
 80215a2:	4826      	ldr	r0, [pc, #152]	; (802163c <HAL_FMC_MspInit+0x110>)
 80215a4:	f002 fba6 	bl	8023cf4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80215a8:	f248 1333 	movw	r3, #33075	; 0x8133
 80215ac:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80215ae:	2302      	movs	r3, #2
 80215b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80215b2:	2300      	movs	r3, #0
 80215b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80215b6:	2303      	movs	r3, #3
 80215b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80215ba:	230c      	movs	r3, #12
 80215bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80215be:	1d3b      	adds	r3, r7, #4
 80215c0:	4619      	mov	r1, r3
 80215c2:	481f      	ldr	r0, [pc, #124]	; (8021640 <HAL_FMC_MspInit+0x114>)
 80215c4:	f002 fb96 	bl	8023cf4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80215c8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80215cc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80215ce:	2302      	movs	r3, #2
 80215d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80215d2:	2300      	movs	r3, #0
 80215d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80215d6:	2303      	movs	r3, #3
 80215d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80215da:	230c      	movs	r3, #12
 80215dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80215de:	1d3b      	adds	r3, r7, #4
 80215e0:	4619      	mov	r1, r3
 80215e2:	4818      	ldr	r0, [pc, #96]	; (8021644 <HAL_FMC_MspInit+0x118>)
 80215e4:	f002 fb86 	bl	8023cf4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80215e8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80215ec:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80215ee:	2302      	movs	r3, #2
 80215f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80215f2:	2300      	movs	r3, #0
 80215f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80215f6:	2303      	movs	r3, #3
 80215f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80215fa:	230c      	movs	r3, #12
 80215fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80215fe:	1d3b      	adds	r3, r7, #4
 8021600:	4619      	mov	r1, r3
 8021602:	4811      	ldr	r0, [pc, #68]	; (8021648 <HAL_FMC_MspInit+0x11c>)
 8021604:	f002 fb76 	bl	8023cf4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8021608:	2360      	movs	r3, #96	; 0x60
 802160a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802160c:	2302      	movs	r3, #2
 802160e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021610:	2300      	movs	r3, #0
 8021612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021614:	2303      	movs	r3, #3
 8021616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021618:	230c      	movs	r3, #12
 802161a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802161c:	1d3b      	adds	r3, r7, #4
 802161e:	4619      	mov	r1, r3
 8021620:	480a      	ldr	r0, [pc, #40]	; (802164c <HAL_FMC_MspInit+0x120>)
 8021622:	f002 fb67 	bl	8023cf4 <HAL_GPIO_Init>
 8021626:	e000      	b.n	802162a <HAL_FMC_MspInit+0xfe>
    return;
 8021628:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 802162a:	3718      	adds	r7, #24
 802162c:	46bd      	mov	sp, r7
 802162e:	bd80      	pop	{r7, pc}
 8021630:	20000810 	.word	0x20000810
 8021634:	40023800 	.word	0x40023800
 8021638:	40021400 	.word	0x40021400
 802163c:	40020800 	.word	0x40020800
 8021640:	40021800 	.word	0x40021800
 8021644:	40021000 	.word	0x40021000
 8021648:	40020c00 	.word	0x40020c00
 802164c:	40020400 	.word	0x40020400

08021650 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8021650:	b580      	push	{r7, lr}
 8021652:	b082      	sub	sp, #8
 8021654:	af00      	add	r7, sp, #0
 8021656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8021658:	f7ff ff68 	bl	802152c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 802165c:	bf00      	nop
 802165e:	3708      	adds	r7, #8
 8021660:	46bd      	mov	sp, r7
 8021662:	bd80      	pop	{r7, pc}

08021664 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021664:	b580      	push	{r7, lr}
 8021666:	b08e      	sub	sp, #56	; 0x38
 8021668:	af00      	add	r7, sp, #0
 802166a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 802166c:	2300      	movs	r3, #0
 802166e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8021670:	2300      	movs	r3, #0
 8021672:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8021674:	2300      	movs	r3, #0
 8021676:	60fb      	str	r3, [r7, #12]
 8021678:	4b33      	ldr	r3, [pc, #204]	; (8021748 <HAL_InitTick+0xe4>)
 802167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802167c:	4a32      	ldr	r2, [pc, #200]	; (8021748 <HAL_InitTick+0xe4>)
 802167e:	f043 0310 	orr.w	r3, r3, #16
 8021682:	6413      	str	r3, [r2, #64]	; 0x40
 8021684:	4b30      	ldr	r3, [pc, #192]	; (8021748 <HAL_InitTick+0xe4>)
 8021686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021688:	f003 0310 	and.w	r3, r3, #16
 802168c:	60fb      	str	r3, [r7, #12]
 802168e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8021690:	f107 0210 	add.w	r2, r7, #16
 8021694:	f107 0314 	add.w	r3, r7, #20
 8021698:	4611      	mov	r1, r2
 802169a:	4618      	mov	r0, r3
 802169c:	f005 fc86 	bl	8026fac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80216a0:	6a3b      	ldr	r3, [r7, #32]
 80216a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80216a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216a6:	2b00      	cmp	r3, #0
 80216a8:	d103      	bne.n	80216b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80216aa:	f005 fc57 	bl	8026f5c <HAL_RCC_GetPCLK1Freq>
 80216ae:	6378      	str	r0, [r7, #52]	; 0x34
 80216b0:	e004      	b.n	80216bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80216b2:	f005 fc53 	bl	8026f5c <HAL_RCC_GetPCLK1Freq>
 80216b6:	4603      	mov	r3, r0
 80216b8:	005b      	lsls	r3, r3, #1
 80216ba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80216bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80216be:	4a23      	ldr	r2, [pc, #140]	; (802174c <HAL_InitTick+0xe8>)
 80216c0:	fba2 2303 	umull	r2, r3, r2, r3
 80216c4:	0c9b      	lsrs	r3, r3, #18
 80216c6:	3b01      	subs	r3, #1
 80216c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80216ca:	4b21      	ldr	r3, [pc, #132]	; (8021750 <HAL_InitTick+0xec>)
 80216cc:	4a21      	ldr	r2, [pc, #132]	; (8021754 <HAL_InitTick+0xf0>)
 80216ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80216d0:	4b1f      	ldr	r3, [pc, #124]	; (8021750 <HAL_InitTick+0xec>)
 80216d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80216d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80216d8:	4a1d      	ldr	r2, [pc, #116]	; (8021750 <HAL_InitTick+0xec>)
 80216da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80216de:	4b1c      	ldr	r3, [pc, #112]	; (8021750 <HAL_InitTick+0xec>)
 80216e0:	2200      	movs	r2, #0
 80216e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80216e4:	4b1a      	ldr	r3, [pc, #104]	; (8021750 <HAL_InitTick+0xec>)
 80216e6:	2200      	movs	r2, #0
 80216e8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80216ea:	4b19      	ldr	r3, [pc, #100]	; (8021750 <HAL_InitTick+0xec>)
 80216ec:	2200      	movs	r2, #0
 80216ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80216f0:	4817      	ldr	r0, [pc, #92]	; (8021750 <HAL_InitTick+0xec>)
 80216f2:	f006 fcbd 	bl	8028070 <HAL_TIM_Base_Init>
 80216f6:	4603      	mov	r3, r0
 80216f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80216fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021700:	2b00      	cmp	r3, #0
 8021702:	d11b      	bne.n	802173c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8021704:	4812      	ldr	r0, [pc, #72]	; (8021750 <HAL_InitTick+0xec>)
 8021706:	f006 fd03 	bl	8028110 <HAL_TIM_Base_Start_IT>
 802170a:	4603      	mov	r3, r0
 802170c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8021710:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021714:	2b00      	cmp	r3, #0
 8021716:	d111      	bne.n	802173c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8021718:	2036      	movs	r0, #54	; 0x36
 802171a:	f001 fcd5 	bl	80230c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802171e:	687b      	ldr	r3, [r7, #4]
 8021720:	2b0f      	cmp	r3, #15
 8021722:	d808      	bhi.n	8021736 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8021724:	2200      	movs	r2, #0
 8021726:	6879      	ldr	r1, [r7, #4]
 8021728:	2036      	movs	r0, #54	; 0x36
 802172a:	f001 fcb1 	bl	8023090 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 802172e:	4a0a      	ldr	r2, [pc, #40]	; (8021758 <HAL_InitTick+0xf4>)
 8021730:	687b      	ldr	r3, [r7, #4]
 8021732:	6013      	str	r3, [r2, #0]
 8021734:	e002      	b.n	802173c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8021736:	2301      	movs	r3, #1
 8021738:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 802173c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8021740:	4618      	mov	r0, r3
 8021742:	3738      	adds	r7, #56	; 0x38
 8021744:	46bd      	mov	sp, r7
 8021746:	bd80      	pop	{r7, pc}
 8021748:	40023800 	.word	0x40023800
 802174c:	431bde83 	.word	0x431bde83
 8021750:	20000814 	.word	0x20000814
 8021754:	40001000 	.word	0x40001000
 8021758:	20000054 	.word	0x20000054

0802175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802175c:	b480      	push	{r7}
 802175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021760:	e7fe      	b.n	8021760 <NMI_Handler+0x4>

08021762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021762:	b480      	push	{r7}
 8021764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021766:	e7fe      	b.n	8021766 <HardFault_Handler+0x4>

08021768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021768:	b480      	push	{r7}
 802176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802176c:	e7fe      	b.n	802176c <MemManage_Handler+0x4>

0802176e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802176e:	b480      	push	{r7}
 8021770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021772:	e7fe      	b.n	8021772 <BusFault_Handler+0x4>

08021774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021774:	b480      	push	{r7}
 8021776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021778:	e7fe      	b.n	8021778 <UsageFault_Handler+0x4>

0802177a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802177a:	b480      	push	{r7}
 802177c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802177e:	bf00      	nop
 8021780:	46bd      	mov	sp, r7
 8021782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021786:	4770      	bx	lr

08021788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021788:	b480      	push	{r7}
 802178a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802178c:	bf00      	nop
 802178e:	46bd      	mov	sp, r7
 8021790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021794:	4770      	bx	lr

08021796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021796:	b480      	push	{r7}
 8021798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802179a:	bf00      	nop
 802179c:	46bd      	mov	sp, r7
 802179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217a2:	4770      	bx	lr

080217a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80217a4:	b480      	push	{r7}
 80217a6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80217a8:	bf00      	nop
 80217aa:	46bd      	mov	sp, r7
 80217ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217b0:	4770      	bx	lr

080217b2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80217b2:	b580      	push	{r7, lr}
 80217b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80217b6:	2001      	movs	r0, #1
 80217b8:	f002 fd6e 	bl	8024298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80217bc:	bf00      	nop
 80217be:	bd80      	pop	{r7, pc}

080217c0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80217c0:	b580      	push	{r7, lr}
 80217c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80217c4:	4802      	ldr	r0, [pc, #8]	; (80217d0 <UART5_IRQHandler+0x10>)
 80217c6:	f007 f9e5 	bl	8028b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80217ca:	bf00      	nop
 80217cc:	bd80      	pop	{r7, pc}
 80217ce:	bf00      	nop
 80217d0:	200002e0 	.word	0x200002e0

080217d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80217d4:	b580      	push	{r7, lr}
 80217d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80217d8:	4802      	ldr	r0, [pc, #8]	; (80217e4 <TIM6_DAC_IRQHandler+0x10>)
 80217da:	f006 fd09 	bl	80281f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80217de:	bf00      	nop
 80217e0:	bd80      	pop	{r7, pc}
 80217e2:	bf00      	nop
 80217e4:	20000814 	.word	0x20000814

080217e8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80217e8:	b580      	push	{r7, lr}
 80217ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80217ec:	4802      	ldr	r0, [pc, #8]	; (80217f8 <OTG_HS_IRQHandler+0x10>)
 80217ee:	f002 ffd5 	bl	802479c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80217f2:	bf00      	nop
 80217f4:	bd80      	pop	{r7, pc}
 80217f6:	bf00      	nop
 80217f8:	20000e98 	.word	0x20000e98

080217fc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80217fc:	b580      	push	{r7, lr}
 80217fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8021800:	4802      	ldr	r0, [pc, #8]	; (802180c <LTDC_IRQHandler+0x10>)
 8021802:	f004 fbfb 	bl	8025ffc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8021806:	bf00      	nop
 8021808:	bd80      	pop	{r7, pc}
 802180a:	bf00      	nop
 802180c:	20000198 	.word	0x20000198

08021810 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8021810:	b580      	push	{r7, lr}
 8021812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8021814:	4802      	ldr	r0, [pc, #8]	; (8021820 <DMA2D_IRQHandler+0x10>)
 8021816:	f002 f82e 	bl	8023876 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 802181a:	bf00      	nop
 802181c:	bd80      	pop	{r7, pc}
 802181e:	bf00      	nop
 8021820:	20000104 	.word	0x20000104

08021824 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8021824:	b480      	push	{r7}
 8021826:	b083      	sub	sp, #12
 8021828:	af00      	add	r7, sp, #0
 802182a:	4603      	mov	r3, r0
 802182c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 802182e:	88fb      	ldrh	r3, [r7, #6]
 8021830:	2b01      	cmp	r3, #1
 8021832:	d102      	bne.n	802183a <HAL_GPIO_EXTI_Callback+0x16>

	case B1_Pin: //Blue Button Interrupt
		ota_update_request = true;
 8021834:	4b04      	ldr	r3, [pc, #16]	; (8021848 <HAL_GPIO_EXTI_Callback+0x24>)
 8021836:	2201      	movs	r2, #1
 8021838:	701a      	strb	r2, [r3, #0]

	}
}
 802183a:	bf00      	nop
 802183c:	370c      	adds	r7, #12
 802183e:	46bd      	mov	sp, r7
 8021840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021844:	4770      	bx	lr
 8021846:	bf00      	nop
 8021848:	20000402 	.word	0x20000402

0802184c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 802184c:	b580      	push	{r7, lr}
 802184e:	b082      	sub	sp, #8
 8021850:	af00      	add	r7, sp, #0
 8021852:	6078      	str	r0, [r7, #4]
	if(huart==&huart5){
 8021854:	687b      	ldr	r3, [r7, #4]
 8021856:	4a18      	ldr	r2, [pc, #96]	; (80218b8 <HAL_UART_RxCpltCallback+0x6c>)
 8021858:	4293      	cmp	r3, r2
 802185a:	d128      	bne.n	80218ae <HAL_UART_RxCpltCallback+0x62>
		if(!eof_flag){
 802185c:	4b17      	ldr	r3, [pc, #92]	; (80218bc <HAL_UART_RxCpltCallback+0x70>)
 802185e:	781b      	ldrb	r3, [r3, #0]
 8021860:	f083 0301 	eor.w	r3, r3, #1
 8021864:	b2db      	uxtb	r3, r3
 8021866:	2b00      	cmp	r3, #0
 8021868:	d017      	beq.n	802189a <HAL_UART_RxCpltCallback+0x4e>
			buf[idx++] = Rx_data[0];
 802186a:	4b15      	ldr	r3, [pc, #84]	; (80218c0 <HAL_UART_RxCpltCallback+0x74>)
 802186c:	681b      	ldr	r3, [r3, #0]
 802186e:	1c5a      	adds	r2, r3, #1
 8021870:	4913      	ldr	r1, [pc, #76]	; (80218c0 <HAL_UART_RxCpltCallback+0x74>)
 8021872:	600a      	str	r2, [r1, #0]
 8021874:	4a13      	ldr	r2, [pc, #76]	; (80218c4 <HAL_UART_RxCpltCallback+0x78>)
 8021876:	7811      	ldrb	r1, [r2, #0]
 8021878:	4a13      	ldr	r2, [pc, #76]	; (80218c8 <HAL_UART_RxCpltCallback+0x7c>)
 802187a:	54d1      	strb	r1, [r2, r3]
			if( (idx >= 1024) || (Rx_data[0] == EOF_SERIAL))
 802187c:	4b10      	ldr	r3, [pc, #64]	; (80218c0 <HAL_UART_RxCpltCallback+0x74>)
 802187e:	681b      	ldr	r3, [r3, #0]
 8021880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021884:	d203      	bcs.n	802188e <HAL_UART_RxCpltCallback+0x42>
 8021886:	4b0f      	ldr	r3, [pc, #60]	; (80218c4 <HAL_UART_RxCpltCallback+0x78>)
 8021888:	781b      	ldrb	r3, [r3, #0]
 802188a:	2bbb      	cmp	r3, #187	; 0xbb
 802188c:	d105      	bne.n	802189a <HAL_UART_RxCpltCallback+0x4e>
			{
				eof_flag = true;
 802188e:	4b0b      	ldr	r3, [pc, #44]	; (80218bc <HAL_UART_RxCpltCallback+0x70>)
 8021890:	2201      	movs	r2, #1
 8021892:	701a      	strb	r2, [r3, #0]
				idx = 0;
 8021894:	4b0a      	ldr	r3, [pc, #40]	; (80218c0 <HAL_UART_RxCpltCallback+0x74>)
 8021896:	2200      	movs	r2, #0
 8021898:	601a      	str	r2, [r3, #0]
			}
		}
		memset(Rx_data, 0, sizeof(Rx_data));
 802189a:	2202      	movs	r2, #2
 802189c:	2100      	movs	r1, #0
 802189e:	4809      	ldr	r0, [pc, #36]	; (80218c4 <HAL_UART_RxCpltCallback+0x78>)
 80218a0:	f00b fd16 	bl	802d2d0 <memset>
		HAL_UART_Receive_IT(huart, Rx_data, 1);
 80218a4:	2201      	movs	r2, #1
 80218a6:	4907      	ldr	r1, [pc, #28]	; (80218c4 <HAL_UART_RxCpltCallback+0x78>)
 80218a8:	6878      	ldr	r0, [r7, #4]
 80218aa:	f007 f942 	bl	8028b32 <HAL_UART_Receive_IT>
	}
}
 80218ae:	bf00      	nop
 80218b0:	3708      	adds	r7, #8
 80218b2:	46bd      	mov	sp, r7
 80218b4:	bd80      	pop	{r7, pc}
 80218b6:	bf00      	nop
 80218b8:	200002e0 	.word	0x200002e0
 80218bc:	2000080d 	.word	0x2000080d
 80218c0:	2000085c 	.word	0x2000085c
 80218c4:	20000400 	.word	0x20000400
 80218c8:	20000404 	.word	0x20000404

080218cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80218cc:	b580      	push	{r7, lr}
 80218ce:	b086      	sub	sp, #24
 80218d0:	af00      	add	r7, sp, #0
 80218d2:	60f8      	str	r0, [r7, #12]
 80218d4:	60b9      	str	r1, [r7, #8]
 80218d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80218d8:	2300      	movs	r3, #0
 80218da:	617b      	str	r3, [r7, #20]
 80218dc:	e00a      	b.n	80218f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80218de:	f3af 8000 	nop.w
 80218e2:	4601      	mov	r1, r0
 80218e4:	68bb      	ldr	r3, [r7, #8]
 80218e6:	1c5a      	adds	r2, r3, #1
 80218e8:	60ba      	str	r2, [r7, #8]
 80218ea:	b2ca      	uxtb	r2, r1
 80218ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80218ee:	697b      	ldr	r3, [r7, #20]
 80218f0:	3301      	adds	r3, #1
 80218f2:	617b      	str	r3, [r7, #20]
 80218f4:	697a      	ldr	r2, [r7, #20]
 80218f6:	687b      	ldr	r3, [r7, #4]
 80218f8:	429a      	cmp	r2, r3
 80218fa:	dbf0      	blt.n	80218de <_read+0x12>
  }

  return len;
 80218fc:	687b      	ldr	r3, [r7, #4]
}
 80218fe:	4618      	mov	r0, r3
 8021900:	3718      	adds	r7, #24
 8021902:	46bd      	mov	sp, r7
 8021904:	bd80      	pop	{r7, pc}

08021906 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8021906:	b580      	push	{r7, lr}
 8021908:	b086      	sub	sp, #24
 802190a:	af00      	add	r7, sp, #0
 802190c:	60f8      	str	r0, [r7, #12]
 802190e:	60b9      	str	r1, [r7, #8]
 8021910:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021912:	2300      	movs	r3, #0
 8021914:	617b      	str	r3, [r7, #20]
 8021916:	e009      	b.n	802192c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8021918:	68bb      	ldr	r3, [r7, #8]
 802191a:	1c5a      	adds	r2, r3, #1
 802191c:	60ba      	str	r2, [r7, #8]
 802191e:	781b      	ldrb	r3, [r3, #0]
 8021920:	4618      	mov	r0, r3
 8021922:	f7ff fa9d 	bl	8020e60 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021926:	697b      	ldr	r3, [r7, #20]
 8021928:	3301      	adds	r3, #1
 802192a:	617b      	str	r3, [r7, #20]
 802192c:	697a      	ldr	r2, [r7, #20]
 802192e:	687b      	ldr	r3, [r7, #4]
 8021930:	429a      	cmp	r2, r3
 8021932:	dbf1      	blt.n	8021918 <_write+0x12>
  }
  return len;
 8021934:	687b      	ldr	r3, [r7, #4]
}
 8021936:	4618      	mov	r0, r3
 8021938:	3718      	adds	r7, #24
 802193a:	46bd      	mov	sp, r7
 802193c:	bd80      	pop	{r7, pc}

0802193e <_close>:

int _close(int file)
{
 802193e:	b480      	push	{r7}
 8021940:	b083      	sub	sp, #12
 8021942:	af00      	add	r7, sp, #0
 8021944:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8021946:	f04f 33ff 	mov.w	r3, #4294967295
}
 802194a:	4618      	mov	r0, r3
 802194c:	370c      	adds	r7, #12
 802194e:	46bd      	mov	sp, r7
 8021950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021954:	4770      	bx	lr

08021956 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8021956:	b480      	push	{r7}
 8021958:	b083      	sub	sp, #12
 802195a:	af00      	add	r7, sp, #0
 802195c:	6078      	str	r0, [r7, #4]
 802195e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8021960:	683b      	ldr	r3, [r7, #0]
 8021962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8021966:	605a      	str	r2, [r3, #4]
  return 0;
 8021968:	2300      	movs	r3, #0
}
 802196a:	4618      	mov	r0, r3
 802196c:	370c      	adds	r7, #12
 802196e:	46bd      	mov	sp, r7
 8021970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021974:	4770      	bx	lr

08021976 <_isatty>:

int _isatty(int file)
{
 8021976:	b480      	push	{r7}
 8021978:	b083      	sub	sp, #12
 802197a:	af00      	add	r7, sp, #0
 802197c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 802197e:	2301      	movs	r3, #1
}
 8021980:	4618      	mov	r0, r3
 8021982:	370c      	adds	r7, #12
 8021984:	46bd      	mov	sp, r7
 8021986:	f85d 7b04 	ldr.w	r7, [sp], #4
 802198a:	4770      	bx	lr

0802198c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802198c:	b480      	push	{r7}
 802198e:	b085      	sub	sp, #20
 8021990:	af00      	add	r7, sp, #0
 8021992:	60f8      	str	r0, [r7, #12]
 8021994:	60b9      	str	r1, [r7, #8]
 8021996:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8021998:	2300      	movs	r3, #0
}
 802199a:	4618      	mov	r0, r3
 802199c:	3714      	adds	r7, #20
 802199e:	46bd      	mov	sp, r7
 80219a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219a4:	4770      	bx	lr
	...

080219a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80219a8:	b580      	push	{r7, lr}
 80219aa:	b086      	sub	sp, #24
 80219ac:	af00      	add	r7, sp, #0
 80219ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80219b0:	4a14      	ldr	r2, [pc, #80]	; (8021a04 <_sbrk+0x5c>)
 80219b2:	4b15      	ldr	r3, [pc, #84]	; (8021a08 <_sbrk+0x60>)
 80219b4:	1ad3      	subs	r3, r2, r3
 80219b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80219b8:	697b      	ldr	r3, [r7, #20]
 80219ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80219bc:	4b13      	ldr	r3, [pc, #76]	; (8021a0c <_sbrk+0x64>)
 80219be:	681b      	ldr	r3, [r3, #0]
 80219c0:	2b00      	cmp	r3, #0
 80219c2:	d102      	bne.n	80219ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80219c4:	4b11      	ldr	r3, [pc, #68]	; (8021a0c <_sbrk+0x64>)
 80219c6:	4a12      	ldr	r2, [pc, #72]	; (8021a10 <_sbrk+0x68>)
 80219c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80219ca:	4b10      	ldr	r3, [pc, #64]	; (8021a0c <_sbrk+0x64>)
 80219cc:	681a      	ldr	r2, [r3, #0]
 80219ce:	687b      	ldr	r3, [r7, #4]
 80219d0:	4413      	add	r3, r2
 80219d2:	693a      	ldr	r2, [r7, #16]
 80219d4:	429a      	cmp	r2, r3
 80219d6:	d207      	bcs.n	80219e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80219d8:	f00b fc40 	bl	802d25c <__errno>
 80219dc:	4603      	mov	r3, r0
 80219de:	220c      	movs	r2, #12
 80219e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80219e2:	f04f 33ff 	mov.w	r3, #4294967295
 80219e6:	e009      	b.n	80219fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80219e8:	4b08      	ldr	r3, [pc, #32]	; (8021a0c <_sbrk+0x64>)
 80219ea:	681b      	ldr	r3, [r3, #0]
 80219ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80219ee:	4b07      	ldr	r3, [pc, #28]	; (8021a0c <_sbrk+0x64>)
 80219f0:	681a      	ldr	r2, [r3, #0]
 80219f2:	687b      	ldr	r3, [r7, #4]
 80219f4:	4413      	add	r3, r2
 80219f6:	4a05      	ldr	r2, [pc, #20]	; (8021a0c <_sbrk+0x64>)
 80219f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80219fa:	68fb      	ldr	r3, [r7, #12]
}
 80219fc:	4618      	mov	r0, r3
 80219fe:	3718      	adds	r7, #24
 8021a00:	46bd      	mov	sp, r7
 8021a02:	bd80      	pop	{r7, pc}
 8021a04:	20030000 	.word	0x20030000
 8021a08:	00000400 	.word	0x00000400
 8021a0c:	20000860 	.word	0x20000860
 8021a10:	200011b0 	.word	0x200011b0

08021a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8021a14:	b480      	push	{r7}
 8021a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8021a18:	4b07      	ldr	r3, [pc, #28]	; (8021a38 <SystemInit+0x24>)
 8021a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021a1e:	4a06      	ldr	r2, [pc, #24]	; (8021a38 <SystemInit+0x24>)
 8021a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8021a28:	4b03      	ldr	r3, [pc, #12]	; (8021a38 <SystemInit+0x24>)
 8021a2a:	4a04      	ldr	r2, [pc, #16]	; (8021a3c <SystemInit+0x28>)
 8021a2c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8021a2e:	bf00      	nop
 8021a30:	46bd      	mov	sp, r7
 8021a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a36:	4770      	bx	lr
 8021a38:	e000ed00 	.word	0xe000ed00
 8021a3c:	08020000 	.word	0x08020000

08021a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8021a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021a78 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8021a44:	480d      	ldr	r0, [pc, #52]	; (8021a7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8021a46:	490e      	ldr	r1, [pc, #56]	; (8021a80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8021a48:	4a0e      	ldr	r2, [pc, #56]	; (8021a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8021a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8021a4c:	e002      	b.n	8021a54 <LoopCopyDataInit>

08021a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8021a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8021a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8021a52:	3304      	adds	r3, #4

08021a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8021a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8021a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8021a58:	d3f9      	bcc.n	8021a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8021a5a:	4a0b      	ldr	r2, [pc, #44]	; (8021a88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8021a5c:	4c0b      	ldr	r4, [pc, #44]	; (8021a8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8021a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8021a60:	e001      	b.n	8021a66 <LoopFillZerobss>

08021a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8021a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8021a64:	3204      	adds	r2, #4

08021a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8021a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8021a68:	d3fb      	bcc.n	8021a62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8021a6a:	f7ff ffd3 	bl	8021a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8021a6e:	f00b fbfb 	bl	802d268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8021a72:	f7fe fd8f 	bl	8020594 <main>
  bx  lr    
 8021a76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8021a78:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8021a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8021a80:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8021a84:	08030618 	.word	0x08030618
  ldr r2, =_sbss
 8021a88:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8021a8c:	200011ac 	.word	0x200011ac

08021a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8021a90:	e7fe      	b.n	8021a90 <ADC_IRQHandler>

08021a92 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8021a92:	b580      	push	{r7, lr}
 8021a94:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8021a96:	f000 fa5d 	bl	8021f54 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8021a9a:	20ca      	movs	r0, #202	; 0xca
 8021a9c:	f000 f95d 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8021aa0:	20c3      	movs	r0, #195	; 0xc3
 8021aa2:	f000 f967 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8021aa6:	2008      	movs	r0, #8
 8021aa8:	f000 f964 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8021aac:	2050      	movs	r0, #80	; 0x50
 8021aae:	f000 f961 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8021ab2:	20cf      	movs	r0, #207	; 0xcf
 8021ab4:	f000 f951 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021ab8:	2000      	movs	r0, #0
 8021aba:	f000 f95b 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8021abe:	20c1      	movs	r0, #193	; 0xc1
 8021ac0:	f000 f958 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8021ac4:	2030      	movs	r0, #48	; 0x30
 8021ac6:	f000 f955 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8021aca:	20ed      	movs	r0, #237	; 0xed
 8021acc:	f000 f945 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8021ad0:	2064      	movs	r0, #100	; 0x64
 8021ad2:	f000 f94f 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8021ad6:	2003      	movs	r0, #3
 8021ad8:	f000 f94c 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8021adc:	2012      	movs	r0, #18
 8021ade:	f000 f949 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8021ae2:	2081      	movs	r0, #129	; 0x81
 8021ae4:	f000 f946 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8021ae8:	20e8      	movs	r0, #232	; 0xe8
 8021aea:	f000 f936 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8021aee:	2085      	movs	r0, #133	; 0x85
 8021af0:	f000 f940 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021af4:	2000      	movs	r0, #0
 8021af6:	f000 f93d 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8021afa:	2078      	movs	r0, #120	; 0x78
 8021afc:	f000 f93a 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8021b00:	20cb      	movs	r0, #203	; 0xcb
 8021b02:	f000 f92a 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8021b06:	2039      	movs	r0, #57	; 0x39
 8021b08:	f000 f934 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8021b0c:	202c      	movs	r0, #44	; 0x2c
 8021b0e:	f000 f931 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021b12:	2000      	movs	r0, #0
 8021b14:	f000 f92e 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8021b18:	2034      	movs	r0, #52	; 0x34
 8021b1a:	f000 f92b 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8021b1e:	2002      	movs	r0, #2
 8021b20:	f000 f928 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8021b24:	20f7      	movs	r0, #247	; 0xf7
 8021b26:	f000 f918 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8021b2a:	2020      	movs	r0, #32
 8021b2c:	f000 f922 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8021b30:	20ea      	movs	r0, #234	; 0xea
 8021b32:	f000 f912 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021b36:	2000      	movs	r0, #0
 8021b38:	f000 f91c 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021b3c:	2000      	movs	r0, #0
 8021b3e:	f000 f919 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8021b42:	20b1      	movs	r0, #177	; 0xb1
 8021b44:	f000 f909 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021b48:	2000      	movs	r0, #0
 8021b4a:	f000 f913 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8021b4e:	201b      	movs	r0, #27
 8021b50:	f000 f910 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8021b54:	20b6      	movs	r0, #182	; 0xb6
 8021b56:	f000 f900 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8021b5a:	200a      	movs	r0, #10
 8021b5c:	f000 f90a 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8021b60:	20a2      	movs	r0, #162	; 0xa2
 8021b62:	f000 f907 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8021b66:	20c0      	movs	r0, #192	; 0xc0
 8021b68:	f000 f8f7 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8021b6c:	2010      	movs	r0, #16
 8021b6e:	f000 f901 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8021b72:	20c1      	movs	r0, #193	; 0xc1
 8021b74:	f000 f8f1 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8021b78:	2010      	movs	r0, #16
 8021b7a:	f000 f8fb 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8021b7e:	20c5      	movs	r0, #197	; 0xc5
 8021b80:	f000 f8eb 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8021b84:	2045      	movs	r0, #69	; 0x45
 8021b86:	f000 f8f5 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8021b8a:	2015      	movs	r0, #21
 8021b8c:	f000 f8f2 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8021b90:	20c7      	movs	r0, #199	; 0xc7
 8021b92:	f000 f8e2 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8021b96:	2090      	movs	r0, #144	; 0x90
 8021b98:	f000 f8ec 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8021b9c:	2036      	movs	r0, #54	; 0x36
 8021b9e:	f000 f8dc 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8021ba2:	20c8      	movs	r0, #200	; 0xc8
 8021ba4:	f000 f8e6 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8021ba8:	20f2      	movs	r0, #242	; 0xf2
 8021baa:	f000 f8d6 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021bae:	2000      	movs	r0, #0
 8021bb0:	f000 f8e0 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8021bb4:	20b0      	movs	r0, #176	; 0xb0
 8021bb6:	f000 f8d0 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8021bba:	20c2      	movs	r0, #194	; 0xc2
 8021bbc:	f000 f8da 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8021bc0:	20b6      	movs	r0, #182	; 0xb6
 8021bc2:	f000 f8ca 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8021bc6:	200a      	movs	r0, #10
 8021bc8:	f000 f8d4 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8021bcc:	20a7      	movs	r0, #167	; 0xa7
 8021bce:	f000 f8d1 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8021bd2:	2027      	movs	r0, #39	; 0x27
 8021bd4:	f000 f8ce 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8021bd8:	2004      	movs	r0, #4
 8021bda:	f000 f8cb 	bl	8021d74 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8021bde:	202a      	movs	r0, #42	; 0x2a
 8021be0:	f000 f8bb 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021be4:	2000      	movs	r0, #0
 8021be6:	f000 f8c5 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021bea:	2000      	movs	r0, #0
 8021bec:	f000 f8c2 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021bf0:	2000      	movs	r0, #0
 8021bf2:	f000 f8bf 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8021bf6:	20ef      	movs	r0, #239	; 0xef
 8021bf8:	f000 f8bc 	bl	8021d74 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8021bfc:	202b      	movs	r0, #43	; 0x2b
 8021bfe:	f000 f8ac 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021c02:	2000      	movs	r0, #0
 8021c04:	f000 f8b6 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021c08:	2000      	movs	r0, #0
 8021c0a:	f000 f8b3 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8021c0e:	2001      	movs	r0, #1
 8021c10:	f000 f8b0 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8021c14:	203f      	movs	r0, #63	; 0x3f
 8021c16:	f000 f8ad 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8021c1a:	20f6      	movs	r0, #246	; 0xf6
 8021c1c:	f000 f89d 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8021c20:	2001      	movs	r0, #1
 8021c22:	f000 f8a7 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021c26:	2000      	movs	r0, #0
 8021c28:	f000 f8a4 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8021c2c:	2006      	movs	r0, #6
 8021c2e:	f000 f8a1 	bl	8021d74 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8021c32:	202c      	movs	r0, #44	; 0x2c
 8021c34:	f000 f891 	bl	8021d5a <ili9341_WriteReg>
  LCD_Delay(200);
 8021c38:	20c8      	movs	r0, #200	; 0xc8
 8021c3a:	f000 fa79 	bl	8022130 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8021c3e:	2026      	movs	r0, #38	; 0x26
 8021c40:	f000 f88b 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8021c44:	2001      	movs	r0, #1
 8021c46:	f000 f895 	bl	8021d74 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8021c4a:	20e0      	movs	r0, #224	; 0xe0
 8021c4c:	f000 f885 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8021c50:	200f      	movs	r0, #15
 8021c52:	f000 f88f 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8021c56:	2029      	movs	r0, #41	; 0x29
 8021c58:	f000 f88c 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8021c5c:	2024      	movs	r0, #36	; 0x24
 8021c5e:	f000 f889 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8021c62:	200c      	movs	r0, #12
 8021c64:	f000 f886 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8021c68:	200e      	movs	r0, #14
 8021c6a:	f000 f883 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8021c6e:	2009      	movs	r0, #9
 8021c70:	f000 f880 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8021c74:	204e      	movs	r0, #78	; 0x4e
 8021c76:	f000 f87d 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8021c7a:	2078      	movs	r0, #120	; 0x78
 8021c7c:	f000 f87a 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8021c80:	203c      	movs	r0, #60	; 0x3c
 8021c82:	f000 f877 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8021c86:	2009      	movs	r0, #9
 8021c88:	f000 f874 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8021c8c:	2013      	movs	r0, #19
 8021c8e:	f000 f871 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8021c92:	2005      	movs	r0, #5
 8021c94:	f000 f86e 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8021c98:	2017      	movs	r0, #23
 8021c9a:	f000 f86b 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8021c9e:	2011      	movs	r0, #17
 8021ca0:	f000 f868 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021ca4:	2000      	movs	r0, #0
 8021ca6:	f000 f865 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8021caa:	20e1      	movs	r0, #225	; 0xe1
 8021cac:	f000 f855 	bl	8021d5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021cb0:	2000      	movs	r0, #0
 8021cb2:	f000 f85f 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8021cb6:	2016      	movs	r0, #22
 8021cb8:	f000 f85c 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8021cbc:	201b      	movs	r0, #27
 8021cbe:	f000 f859 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8021cc2:	2004      	movs	r0, #4
 8021cc4:	f000 f856 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8021cc8:	2011      	movs	r0, #17
 8021cca:	f000 f853 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8021cce:	2007      	movs	r0, #7
 8021cd0:	f000 f850 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8021cd4:	2031      	movs	r0, #49	; 0x31
 8021cd6:	f000 f84d 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8021cda:	2033      	movs	r0, #51	; 0x33
 8021cdc:	f000 f84a 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8021ce0:	2042      	movs	r0, #66	; 0x42
 8021ce2:	f000 f847 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8021ce6:	2005      	movs	r0, #5
 8021ce8:	f000 f844 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8021cec:	200c      	movs	r0, #12
 8021cee:	f000 f841 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8021cf2:	200a      	movs	r0, #10
 8021cf4:	f000 f83e 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8021cf8:	2028      	movs	r0, #40	; 0x28
 8021cfa:	f000 f83b 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8021cfe:	202f      	movs	r0, #47	; 0x2f
 8021d00:	f000 f838 	bl	8021d74 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8021d04:	200f      	movs	r0, #15
 8021d06:	f000 f835 	bl	8021d74 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8021d0a:	2011      	movs	r0, #17
 8021d0c:	f000 f825 	bl	8021d5a <ili9341_WriteReg>
  LCD_Delay(200);
 8021d10:	20c8      	movs	r0, #200	; 0xc8
 8021d12:	f000 fa0d 	bl	8022130 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8021d16:	2029      	movs	r0, #41	; 0x29
 8021d18:	f000 f81f 	bl	8021d5a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8021d1c:	202c      	movs	r0, #44	; 0x2c
 8021d1e:	f000 f81c 	bl	8021d5a <ili9341_WriteReg>
}
 8021d22:	bf00      	nop
 8021d24:	bd80      	pop	{r7, pc}

08021d26 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8021d26:	b580      	push	{r7, lr}
 8021d28:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8021d2a:	f000 f913 	bl	8021f54 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8021d2e:	2103      	movs	r1, #3
 8021d30:	20d3      	movs	r0, #211	; 0xd3
 8021d32:	f000 f82c 	bl	8021d8e <ili9341_ReadData>
 8021d36:	4603      	mov	r3, r0
 8021d38:	b29b      	uxth	r3, r3
}
 8021d3a:	4618      	mov	r0, r3
 8021d3c:	bd80      	pop	{r7, pc}

08021d3e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8021d3e:	b580      	push	{r7, lr}
 8021d40:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8021d42:	2029      	movs	r0, #41	; 0x29
 8021d44:	f000 f809 	bl	8021d5a <ili9341_WriteReg>
}
 8021d48:	bf00      	nop
 8021d4a:	bd80      	pop	{r7, pc}

08021d4c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8021d4c:	b580      	push	{r7, lr}
 8021d4e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8021d50:	2028      	movs	r0, #40	; 0x28
 8021d52:	f000 f802 	bl	8021d5a <ili9341_WriteReg>
}
 8021d56:	bf00      	nop
 8021d58:	bd80      	pop	{r7, pc}

08021d5a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8021d5a:	b580      	push	{r7, lr}
 8021d5c:	b082      	sub	sp, #8
 8021d5e:	af00      	add	r7, sp, #0
 8021d60:	4603      	mov	r3, r0
 8021d62:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8021d64:	79fb      	ldrb	r3, [r7, #7]
 8021d66:	4618      	mov	r0, r3
 8021d68:	f000 f98e 	bl	8022088 <LCD_IO_WriteReg>
}
 8021d6c:	bf00      	nop
 8021d6e:	3708      	adds	r7, #8
 8021d70:	46bd      	mov	sp, r7
 8021d72:	bd80      	pop	{r7, pc}

08021d74 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8021d74:	b580      	push	{r7, lr}
 8021d76:	b082      	sub	sp, #8
 8021d78:	af00      	add	r7, sp, #0
 8021d7a:	4603      	mov	r3, r0
 8021d7c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8021d7e:	88fb      	ldrh	r3, [r7, #6]
 8021d80:	4618      	mov	r0, r3
 8021d82:	f000 f95f 	bl	8022044 <LCD_IO_WriteData>
}
 8021d86:	bf00      	nop
 8021d88:	3708      	adds	r7, #8
 8021d8a:	46bd      	mov	sp, r7
 8021d8c:	bd80      	pop	{r7, pc}

08021d8e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8021d8e:	b580      	push	{r7, lr}
 8021d90:	b082      	sub	sp, #8
 8021d92:	af00      	add	r7, sp, #0
 8021d94:	4603      	mov	r3, r0
 8021d96:	460a      	mov	r2, r1
 8021d98:	80fb      	strh	r3, [r7, #6]
 8021d9a:	4613      	mov	r3, r2
 8021d9c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8021d9e:	797a      	ldrb	r2, [r7, #5]
 8021da0:	88fb      	ldrh	r3, [r7, #6]
 8021da2:	4611      	mov	r1, r2
 8021da4:	4618      	mov	r0, r3
 8021da6:	f000 f991 	bl	80220cc <LCD_IO_ReadData>
 8021daa:	4603      	mov	r3, r0
}
 8021dac:	4618      	mov	r0, r3
 8021dae:	3708      	adds	r7, #8
 8021db0:	46bd      	mov	sp, r7
 8021db2:	bd80      	pop	{r7, pc}

08021db4 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8021db4:	b480      	push	{r7}
 8021db6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8021db8:	23f0      	movs	r3, #240	; 0xf0
}
 8021dba:	4618      	mov	r0, r3
 8021dbc:	46bd      	mov	sp, r7
 8021dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dc2:	4770      	bx	lr

08021dc4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8021dc4:	b480      	push	{r7}
 8021dc6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8021dc8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8021dcc:	4618      	mov	r0, r3
 8021dce:	46bd      	mov	sp, r7
 8021dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dd4:	4770      	bx	lr
	...

08021dd8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8021dd8:	b580      	push	{r7, lr}
 8021dda:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8021ddc:	4819      	ldr	r0, [pc, #100]	; (8021e44 <SPIx_Init+0x6c>)
 8021dde:	f006 f808 	bl	8027df2 <HAL_SPI_GetState>
 8021de2:	4603      	mov	r3, r0
 8021de4:	2b00      	cmp	r3, #0
 8021de6:	d12b      	bne.n	8021e40 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8021de8:	4b16      	ldr	r3, [pc, #88]	; (8021e44 <SPIx_Init+0x6c>)
 8021dea:	4a17      	ldr	r2, [pc, #92]	; (8021e48 <SPIx_Init+0x70>)
 8021dec:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8021dee:	4b15      	ldr	r3, [pc, #84]	; (8021e44 <SPIx_Init+0x6c>)
 8021df0:	2218      	movs	r2, #24
 8021df2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8021df4:	4b13      	ldr	r3, [pc, #76]	; (8021e44 <SPIx_Init+0x6c>)
 8021df6:	2200      	movs	r2, #0
 8021df8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8021dfa:	4b12      	ldr	r3, [pc, #72]	; (8021e44 <SPIx_Init+0x6c>)
 8021dfc:	2200      	movs	r2, #0
 8021dfe:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8021e00:	4b10      	ldr	r3, [pc, #64]	; (8021e44 <SPIx_Init+0x6c>)
 8021e02:	2200      	movs	r2, #0
 8021e04:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8021e06:	4b0f      	ldr	r3, [pc, #60]	; (8021e44 <SPIx_Init+0x6c>)
 8021e08:	2200      	movs	r2, #0
 8021e0a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8021e0c:	4b0d      	ldr	r3, [pc, #52]	; (8021e44 <SPIx_Init+0x6c>)
 8021e0e:	2207      	movs	r2, #7
 8021e10:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8021e12:	4b0c      	ldr	r3, [pc, #48]	; (8021e44 <SPIx_Init+0x6c>)
 8021e14:	2200      	movs	r2, #0
 8021e16:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8021e18:	4b0a      	ldr	r3, [pc, #40]	; (8021e44 <SPIx_Init+0x6c>)
 8021e1a:	2200      	movs	r2, #0
 8021e1c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8021e1e:	4b09      	ldr	r3, [pc, #36]	; (8021e44 <SPIx_Init+0x6c>)
 8021e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8021e24:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8021e26:	4b07      	ldr	r3, [pc, #28]	; (8021e44 <SPIx_Init+0x6c>)
 8021e28:	2200      	movs	r2, #0
 8021e2a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8021e2c:	4b05      	ldr	r3, [pc, #20]	; (8021e44 <SPIx_Init+0x6c>)
 8021e2e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8021e32:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8021e34:	4803      	ldr	r0, [pc, #12]	; (8021e44 <SPIx_Init+0x6c>)
 8021e36:	f000 f853 	bl	8021ee0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8021e3a:	4802      	ldr	r0, [pc, #8]	; (8021e44 <SPIx_Init+0x6c>)
 8021e3c:	f005 fb39 	bl	80274b2 <HAL_SPI_Init>
  } 
}
 8021e40:	bf00      	nop
 8021e42:	bd80      	pop	{r7, pc}
 8021e44:	20000864 	.word	0x20000864
 8021e48:	40015000 	.word	0x40015000

08021e4c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8021e4c:	b580      	push	{r7, lr}
 8021e4e:	b084      	sub	sp, #16
 8021e50:	af00      	add	r7, sp, #0
 8021e52:	4603      	mov	r3, r0
 8021e54:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8021e56:	2300      	movs	r3, #0
 8021e58:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8021e5a:	79fb      	ldrb	r3, [r7, #7]
 8021e5c:	b29a      	uxth	r2, r3
 8021e5e:	4b09      	ldr	r3, [pc, #36]	; (8021e84 <SPIx_Read+0x38>)
 8021e60:	681b      	ldr	r3, [r3, #0]
 8021e62:	f107 0108 	add.w	r1, r7, #8
 8021e66:	4808      	ldr	r0, [pc, #32]	; (8021e88 <SPIx_Read+0x3c>)
 8021e68:	f005 fd10 	bl	802788c <HAL_SPI_Receive>
 8021e6c:	4603      	mov	r3, r0
 8021e6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8021e70:	7bfb      	ldrb	r3, [r7, #15]
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	d001      	beq.n	8021e7a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8021e76:	f000 f827 	bl	8021ec8 <SPIx_Error>
  }
  
  return readvalue;
 8021e7a:	68bb      	ldr	r3, [r7, #8]
}
 8021e7c:	4618      	mov	r0, r3
 8021e7e:	3710      	adds	r7, #16
 8021e80:	46bd      	mov	sp, r7
 8021e82:	bd80      	pop	{r7, pc}
 8021e84:	2000003c 	.word	0x2000003c
 8021e88:	20000864 	.word	0x20000864

08021e8c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8021e8c:	b580      	push	{r7, lr}
 8021e8e:	b084      	sub	sp, #16
 8021e90:	af00      	add	r7, sp, #0
 8021e92:	4603      	mov	r3, r0
 8021e94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8021e96:	2300      	movs	r3, #0
 8021e98:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8021e9a:	4b09      	ldr	r3, [pc, #36]	; (8021ec0 <SPIx_Write+0x34>)
 8021e9c:	681b      	ldr	r3, [r3, #0]
 8021e9e:	1db9      	adds	r1, r7, #6
 8021ea0:	2201      	movs	r2, #1
 8021ea2:	4808      	ldr	r0, [pc, #32]	; (8021ec4 <SPIx_Write+0x38>)
 8021ea4:	f005 fbb6 	bl	8027614 <HAL_SPI_Transmit>
 8021ea8:	4603      	mov	r3, r0
 8021eaa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8021eac:	7bfb      	ldrb	r3, [r7, #15]
 8021eae:	2b00      	cmp	r3, #0
 8021eb0:	d001      	beq.n	8021eb6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8021eb2:	f000 f809 	bl	8021ec8 <SPIx_Error>
  }
}
 8021eb6:	bf00      	nop
 8021eb8:	3710      	adds	r7, #16
 8021eba:	46bd      	mov	sp, r7
 8021ebc:	bd80      	pop	{r7, pc}
 8021ebe:	bf00      	nop
 8021ec0:	2000003c 	.word	0x2000003c
 8021ec4:	20000864 	.word	0x20000864

08021ec8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8021ec8:	b580      	push	{r7, lr}
 8021eca:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8021ecc:	4803      	ldr	r0, [pc, #12]	; (8021edc <SPIx_Error+0x14>)
 8021ece:	f005 fb79 	bl	80275c4 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8021ed2:	f7ff ff81 	bl	8021dd8 <SPIx_Init>
}
 8021ed6:	bf00      	nop
 8021ed8:	bd80      	pop	{r7, pc}
 8021eda:	bf00      	nop
 8021edc:	20000864 	.word	0x20000864

08021ee0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8021ee0:	b580      	push	{r7, lr}
 8021ee2:	b08a      	sub	sp, #40	; 0x28
 8021ee4:	af00      	add	r7, sp, #0
 8021ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8021ee8:	2300      	movs	r3, #0
 8021eea:	613b      	str	r3, [r7, #16]
 8021eec:	4b17      	ldr	r3, [pc, #92]	; (8021f4c <SPIx_MspInit+0x6c>)
 8021eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021ef0:	4a16      	ldr	r2, [pc, #88]	; (8021f4c <SPIx_MspInit+0x6c>)
 8021ef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021ef6:	6453      	str	r3, [r2, #68]	; 0x44
 8021ef8:	4b14      	ldr	r3, [pc, #80]	; (8021f4c <SPIx_MspInit+0x6c>)
 8021efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021f00:	613b      	str	r3, [r7, #16]
 8021f02:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8021f04:	2300      	movs	r3, #0
 8021f06:	60fb      	str	r3, [r7, #12]
 8021f08:	4b10      	ldr	r3, [pc, #64]	; (8021f4c <SPIx_MspInit+0x6c>)
 8021f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f0c:	4a0f      	ldr	r2, [pc, #60]	; (8021f4c <SPIx_MspInit+0x6c>)
 8021f0e:	f043 0320 	orr.w	r3, r3, #32
 8021f12:	6313      	str	r3, [r2, #48]	; 0x30
 8021f14:	4b0d      	ldr	r3, [pc, #52]	; (8021f4c <SPIx_MspInit+0x6c>)
 8021f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f18:	f003 0320 	and.w	r3, r3, #32
 8021f1c:	60fb      	str	r3, [r7, #12]
 8021f1e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8021f20:	f44f 7360 	mov.w	r3, #896	; 0x380
 8021f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8021f26:	2302      	movs	r3, #2
 8021f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8021f2a:	2302      	movs	r3, #2
 8021f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8021f2e:	2301      	movs	r3, #1
 8021f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8021f32:	2305      	movs	r3, #5
 8021f34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8021f36:	f107 0314 	add.w	r3, r7, #20
 8021f3a:	4619      	mov	r1, r3
 8021f3c:	4804      	ldr	r0, [pc, #16]	; (8021f50 <SPIx_MspInit+0x70>)
 8021f3e:	f001 fed9 	bl	8023cf4 <HAL_GPIO_Init>
}
 8021f42:	bf00      	nop
 8021f44:	3728      	adds	r7, #40	; 0x28
 8021f46:	46bd      	mov	sp, r7
 8021f48:	bd80      	pop	{r7, pc}
 8021f4a:	bf00      	nop
 8021f4c:	40023800 	.word	0x40023800
 8021f50:	40021400 	.word	0x40021400

08021f54 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8021f54:	b580      	push	{r7, lr}
 8021f56:	b088      	sub	sp, #32
 8021f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8021f5a:	4b36      	ldr	r3, [pc, #216]	; (8022034 <LCD_IO_Init+0xe0>)
 8021f5c:	781b      	ldrb	r3, [r3, #0]
 8021f5e:	2b00      	cmp	r3, #0
 8021f60:	d164      	bne.n	802202c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8021f62:	4b34      	ldr	r3, [pc, #208]	; (8022034 <LCD_IO_Init+0xe0>)
 8021f64:	2201      	movs	r2, #1
 8021f66:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8021f68:	2300      	movs	r3, #0
 8021f6a:	60bb      	str	r3, [r7, #8]
 8021f6c:	4b32      	ldr	r3, [pc, #200]	; (8022038 <LCD_IO_Init+0xe4>)
 8021f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f70:	4a31      	ldr	r2, [pc, #196]	; (8022038 <LCD_IO_Init+0xe4>)
 8021f72:	f043 0308 	orr.w	r3, r3, #8
 8021f76:	6313      	str	r3, [r2, #48]	; 0x30
 8021f78:	4b2f      	ldr	r3, [pc, #188]	; (8022038 <LCD_IO_Init+0xe4>)
 8021f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f7c:	f003 0308 	and.w	r3, r3, #8
 8021f80:	60bb      	str	r3, [r7, #8]
 8021f82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8021f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021f88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8021f8a:	2301      	movs	r3, #1
 8021f8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8021f8e:	2300      	movs	r3, #0
 8021f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8021f92:	2302      	movs	r3, #2
 8021f94:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8021f96:	f107 030c 	add.w	r3, r7, #12
 8021f9a:	4619      	mov	r1, r3
 8021f9c:	4827      	ldr	r0, [pc, #156]	; (802203c <LCD_IO_Init+0xe8>)
 8021f9e:	f001 fea9 	bl	8023cf4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8021fa2:	2300      	movs	r3, #0
 8021fa4:	607b      	str	r3, [r7, #4]
 8021fa6:	4b24      	ldr	r3, [pc, #144]	; (8022038 <LCD_IO_Init+0xe4>)
 8021fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021faa:	4a23      	ldr	r2, [pc, #140]	; (8022038 <LCD_IO_Init+0xe4>)
 8021fac:	f043 0308 	orr.w	r3, r3, #8
 8021fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8021fb2:	4b21      	ldr	r3, [pc, #132]	; (8022038 <LCD_IO_Init+0xe4>)
 8021fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021fb6:	f003 0308 	and.w	r3, r3, #8
 8021fba:	607b      	str	r3, [r7, #4]
 8021fbc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8021fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021fc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8021fc4:	2301      	movs	r3, #1
 8021fc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8021fc8:	2300      	movs	r3, #0
 8021fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8021fcc:	2302      	movs	r3, #2
 8021fce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8021fd0:	f107 030c 	add.w	r3, r7, #12
 8021fd4:	4619      	mov	r1, r3
 8021fd6:	4819      	ldr	r0, [pc, #100]	; (802203c <LCD_IO_Init+0xe8>)
 8021fd8:	f001 fe8c 	bl	8023cf4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8021fdc:	2300      	movs	r3, #0
 8021fde:	603b      	str	r3, [r7, #0]
 8021fe0:	4b15      	ldr	r3, [pc, #84]	; (8022038 <LCD_IO_Init+0xe4>)
 8021fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021fe4:	4a14      	ldr	r2, [pc, #80]	; (8022038 <LCD_IO_Init+0xe4>)
 8021fe6:	f043 0304 	orr.w	r3, r3, #4
 8021fea:	6313      	str	r3, [r2, #48]	; 0x30
 8021fec:	4b12      	ldr	r3, [pc, #72]	; (8022038 <LCD_IO_Init+0xe4>)
 8021fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ff0:	f003 0304 	and.w	r3, r3, #4
 8021ff4:	603b      	str	r3, [r7, #0]
 8021ff6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8021ff8:	2304      	movs	r3, #4
 8021ffa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8021ffc:	2301      	movs	r3, #1
 8021ffe:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8022000:	2300      	movs	r3, #0
 8022002:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8022004:	2302      	movs	r3, #2
 8022006:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8022008:	f107 030c 	add.w	r3, r7, #12
 802200c:	4619      	mov	r1, r3
 802200e:	480c      	ldr	r0, [pc, #48]	; (8022040 <LCD_IO_Init+0xec>)
 8022010:	f001 fe70 	bl	8023cf4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8022014:	2200      	movs	r2, #0
 8022016:	2104      	movs	r1, #4
 8022018:	4809      	ldr	r0, [pc, #36]	; (8022040 <LCD_IO_Init+0xec>)
 802201a:	f002 f923 	bl	8024264 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 802201e:	2201      	movs	r2, #1
 8022020:	2104      	movs	r1, #4
 8022022:	4807      	ldr	r0, [pc, #28]	; (8022040 <LCD_IO_Init+0xec>)
 8022024:	f002 f91e 	bl	8024264 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8022028:	f7ff fed6 	bl	8021dd8 <SPIx_Init>
  }
}
 802202c:	bf00      	nop
 802202e:	3720      	adds	r7, #32
 8022030:	46bd      	mov	sp, r7
 8022032:	bd80      	pop	{r7, pc}
 8022034:	200008bc 	.word	0x200008bc
 8022038:	40023800 	.word	0x40023800
 802203c:	40020c00 	.word	0x40020c00
 8022040:	40020800 	.word	0x40020800

08022044 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8022044:	b580      	push	{r7, lr}
 8022046:	b082      	sub	sp, #8
 8022048:	af00      	add	r7, sp, #0
 802204a:	4603      	mov	r3, r0
 802204c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 802204e:	2201      	movs	r2, #1
 8022050:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022054:	480a      	ldr	r0, [pc, #40]	; (8022080 <LCD_IO_WriteData+0x3c>)
 8022056:	f002 f905 	bl	8024264 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 802205a:	2200      	movs	r2, #0
 802205c:	2104      	movs	r1, #4
 802205e:	4809      	ldr	r0, [pc, #36]	; (8022084 <LCD_IO_WriteData+0x40>)
 8022060:	f002 f900 	bl	8024264 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8022064:	88fb      	ldrh	r3, [r7, #6]
 8022066:	4618      	mov	r0, r3
 8022068:	f7ff ff10 	bl	8021e8c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 802206c:	2201      	movs	r2, #1
 802206e:	2104      	movs	r1, #4
 8022070:	4804      	ldr	r0, [pc, #16]	; (8022084 <LCD_IO_WriteData+0x40>)
 8022072:	f002 f8f7 	bl	8024264 <HAL_GPIO_WritePin>
}
 8022076:	bf00      	nop
 8022078:	3708      	adds	r7, #8
 802207a:	46bd      	mov	sp, r7
 802207c:	bd80      	pop	{r7, pc}
 802207e:	bf00      	nop
 8022080:	40020c00 	.word	0x40020c00
 8022084:	40020800 	.word	0x40020800

08022088 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8022088:	b580      	push	{r7, lr}
 802208a:	b082      	sub	sp, #8
 802208c:	af00      	add	r7, sp, #0
 802208e:	4603      	mov	r3, r0
 8022090:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8022092:	2200      	movs	r2, #0
 8022094:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022098:	480a      	ldr	r0, [pc, #40]	; (80220c4 <LCD_IO_WriteReg+0x3c>)
 802209a:	f002 f8e3 	bl	8024264 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 802209e:	2200      	movs	r2, #0
 80220a0:	2104      	movs	r1, #4
 80220a2:	4809      	ldr	r0, [pc, #36]	; (80220c8 <LCD_IO_WriteReg+0x40>)
 80220a4:	f002 f8de 	bl	8024264 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80220a8:	79fb      	ldrb	r3, [r7, #7]
 80220aa:	b29b      	uxth	r3, r3
 80220ac:	4618      	mov	r0, r3
 80220ae:	f7ff feed 	bl	8021e8c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80220b2:	2201      	movs	r2, #1
 80220b4:	2104      	movs	r1, #4
 80220b6:	4804      	ldr	r0, [pc, #16]	; (80220c8 <LCD_IO_WriteReg+0x40>)
 80220b8:	f002 f8d4 	bl	8024264 <HAL_GPIO_WritePin>
}
 80220bc:	bf00      	nop
 80220be:	3708      	adds	r7, #8
 80220c0:	46bd      	mov	sp, r7
 80220c2:	bd80      	pop	{r7, pc}
 80220c4:	40020c00 	.word	0x40020c00
 80220c8:	40020800 	.word	0x40020800

080220cc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80220cc:	b580      	push	{r7, lr}
 80220ce:	b084      	sub	sp, #16
 80220d0:	af00      	add	r7, sp, #0
 80220d2:	4603      	mov	r3, r0
 80220d4:	460a      	mov	r2, r1
 80220d6:	80fb      	strh	r3, [r7, #6]
 80220d8:	4613      	mov	r3, r2
 80220da:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80220dc:	2300      	movs	r3, #0
 80220de:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80220e0:	2200      	movs	r2, #0
 80220e2:	2104      	movs	r1, #4
 80220e4:	4810      	ldr	r0, [pc, #64]	; (8022128 <LCD_IO_ReadData+0x5c>)
 80220e6:	f002 f8bd 	bl	8024264 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80220ea:	2200      	movs	r2, #0
 80220ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80220f0:	480e      	ldr	r0, [pc, #56]	; (802212c <LCD_IO_ReadData+0x60>)
 80220f2:	f002 f8b7 	bl	8024264 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80220f6:	88fb      	ldrh	r3, [r7, #6]
 80220f8:	4618      	mov	r0, r3
 80220fa:	f7ff fec7 	bl	8021e8c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80220fe:	797b      	ldrb	r3, [r7, #5]
 8022100:	4618      	mov	r0, r3
 8022102:	f7ff fea3 	bl	8021e4c <SPIx_Read>
 8022106:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8022108:	2201      	movs	r2, #1
 802210a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802210e:	4807      	ldr	r0, [pc, #28]	; (802212c <LCD_IO_ReadData+0x60>)
 8022110:	f002 f8a8 	bl	8024264 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8022114:	2201      	movs	r2, #1
 8022116:	2104      	movs	r1, #4
 8022118:	4803      	ldr	r0, [pc, #12]	; (8022128 <LCD_IO_ReadData+0x5c>)
 802211a:	f002 f8a3 	bl	8024264 <HAL_GPIO_WritePin>
  
  return readvalue;
 802211e:	68fb      	ldr	r3, [r7, #12]
}
 8022120:	4618      	mov	r0, r3
 8022122:	3710      	adds	r7, #16
 8022124:	46bd      	mov	sp, r7
 8022126:	bd80      	pop	{r7, pc}
 8022128:	40020800 	.word	0x40020800
 802212c:	40020c00 	.word	0x40020c00

08022130 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8022130:	b580      	push	{r7, lr}
 8022132:	b082      	sub	sp, #8
 8022134:	af00      	add	r7, sp, #0
 8022136:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8022138:	6878      	ldr	r0, [r7, #4]
 802213a:	f000 fecd 	bl	8022ed8 <HAL_Delay>
}
 802213e:	bf00      	nop
 8022140:	3708      	adds	r7, #8
 8022142:	46bd      	mov	sp, r7
 8022144:	bd80      	pop	{r7, pc}
	...

08022148 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8022148:	b580      	push	{r7, lr}
 802214a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 802214c:	4b2d      	ldr	r3, [pc, #180]	; (8022204 <BSP_LCD_Init+0xbc>)
 802214e:	4a2e      	ldr	r2, [pc, #184]	; (8022208 <BSP_LCD_Init+0xc0>)
 8022150:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8022152:	4b2c      	ldr	r3, [pc, #176]	; (8022204 <BSP_LCD_Init+0xbc>)
 8022154:	2209      	movs	r2, #9
 8022156:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8022158:	4b2a      	ldr	r3, [pc, #168]	; (8022204 <BSP_LCD_Init+0xbc>)
 802215a:	2201      	movs	r2, #1
 802215c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 802215e:	4b29      	ldr	r3, [pc, #164]	; (8022204 <BSP_LCD_Init+0xbc>)
 8022160:	221d      	movs	r2, #29
 8022162:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8022164:	4b27      	ldr	r3, [pc, #156]	; (8022204 <BSP_LCD_Init+0xbc>)
 8022166:	2203      	movs	r2, #3
 8022168:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 802216a:	4b26      	ldr	r3, [pc, #152]	; (8022204 <BSP_LCD_Init+0xbc>)
 802216c:	f240 120d 	movw	r2, #269	; 0x10d
 8022170:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8022172:	4b24      	ldr	r3, [pc, #144]	; (8022204 <BSP_LCD_Init+0xbc>)
 8022174:	f240 1243 	movw	r2, #323	; 0x143
 8022178:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 802217a:	4b22      	ldr	r3, [pc, #136]	; (8022204 <BSP_LCD_Init+0xbc>)
 802217c:	f240 1217 	movw	r2, #279	; 0x117
 8022180:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8022182:	4b20      	ldr	r3, [pc, #128]	; (8022204 <BSP_LCD_Init+0xbc>)
 8022184:	f240 1247 	movw	r2, #327	; 0x147
 8022188:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 802218a:	4b1e      	ldr	r3, [pc, #120]	; (8022204 <BSP_LCD_Init+0xbc>)
 802218c:	2200      	movs	r2, #0
 802218e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8022192:	4b1c      	ldr	r3, [pc, #112]	; (8022204 <BSP_LCD_Init+0xbc>)
 8022194:	2200      	movs	r2, #0
 8022196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 802219a:	4b1a      	ldr	r3, [pc, #104]	; (8022204 <BSP_LCD_Init+0xbc>)
 802219c:	2200      	movs	r2, #0
 802219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80221a2:	4b1a      	ldr	r3, [pc, #104]	; (802220c <BSP_LCD_Init+0xc4>)
 80221a4:	2208      	movs	r2, #8
 80221a6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80221a8:	4b18      	ldr	r3, [pc, #96]	; (802220c <BSP_LCD_Init+0xc4>)
 80221aa:	22c0      	movs	r2, #192	; 0xc0
 80221ac:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80221ae:	4b17      	ldr	r3, [pc, #92]	; (802220c <BSP_LCD_Init+0xc4>)
 80221b0:	2204      	movs	r2, #4
 80221b2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80221b4:	4b15      	ldr	r3, [pc, #84]	; (802220c <BSP_LCD_Init+0xc4>)
 80221b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80221ba:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80221bc:	4813      	ldr	r0, [pc, #76]	; (802220c <BSP_LCD_Init+0xc4>)
 80221be:	f004 ff27 	bl	8027010 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80221c2:	4b10      	ldr	r3, [pc, #64]	; (8022204 <BSP_LCD_Init+0xbc>)
 80221c4:	2200      	movs	r2, #0
 80221c6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80221c8:	4b0e      	ldr	r3, [pc, #56]	; (8022204 <BSP_LCD_Init+0xbc>)
 80221ca:	2200      	movs	r2, #0
 80221cc:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80221ce:	4b0d      	ldr	r3, [pc, #52]	; (8022204 <BSP_LCD_Init+0xbc>)
 80221d0:	2200      	movs	r2, #0
 80221d2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80221d4:	4b0b      	ldr	r3, [pc, #44]	; (8022204 <BSP_LCD_Init+0xbc>)
 80221d6:	2200      	movs	r2, #0
 80221d8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80221da:	f000 fa83 	bl	80226e4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80221de:	4809      	ldr	r0, [pc, #36]	; (8022204 <BSP_LCD_Init+0xbc>)
 80221e0:	f003 fe3c 	bl	8025e5c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80221e4:	4b0a      	ldr	r3, [pc, #40]	; (8022210 <BSP_LCD_Init+0xc8>)
 80221e6:	4a0b      	ldr	r2, [pc, #44]	; (8022214 <BSP_LCD_Init+0xcc>)
 80221e8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80221ea:	4b09      	ldr	r3, [pc, #36]	; (8022210 <BSP_LCD_Init+0xc8>)
 80221ec:	681b      	ldr	r3, [r3, #0]
 80221ee:	681b      	ldr	r3, [r3, #0]
 80221f0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80221f2:	f000 fc65 	bl	8022ac0 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80221f6:	4808      	ldr	r0, [pc, #32]	; (8022218 <BSP_LCD_Init+0xd0>)
 80221f8:	f000 f920 	bl	802243c <BSP_LCD_SetFont>

  return LCD_OK;
 80221fc:	2300      	movs	r3, #0
}  
 80221fe:	4618      	mov	r0, r3
 8022200:	bd80      	pop	{r7, pc}
 8022202:	bf00      	nop
 8022204:	200008c0 	.word	0x200008c0
 8022208:	40016800 	.word	0x40016800
 802220c:	200009a8 	.word	0x200009a8
 8022210:	200009f4 	.word	0x200009f4
 8022214:	20000004 	.word	0x20000004
 8022218:	20000040 	.word	0x20000040

0802221c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 802221c:	b580      	push	{r7, lr}
 802221e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8022220:	4b03      	ldr	r3, [pc, #12]	; (8022230 <BSP_LCD_GetXSize+0x14>)
 8022222:	681b      	ldr	r3, [r3, #0]
 8022224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022226:	4798      	blx	r3
 8022228:	4603      	mov	r3, r0
}
 802222a:	4618      	mov	r0, r3
 802222c:	bd80      	pop	{r7, pc}
 802222e:	bf00      	nop
 8022230:	200009f4 	.word	0x200009f4

08022234 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8022234:	b580      	push	{r7, lr}
 8022236:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8022238:	4b03      	ldr	r3, [pc, #12]	; (8022248 <BSP_LCD_GetYSize+0x14>)
 802223a:	681b      	ldr	r3, [r3, #0]
 802223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802223e:	4798      	blx	r3
 8022240:	4603      	mov	r3, r0
}
 8022242:	4618      	mov	r0, r3
 8022244:	bd80      	pop	{r7, pc}
 8022246:	bf00      	nop
 8022248:	200009f4 	.word	0x200009f4

0802224c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 802224c:	b580      	push	{r7, lr}
 802224e:	b090      	sub	sp, #64	; 0x40
 8022250:	af00      	add	r7, sp, #0
 8022252:	4603      	mov	r3, r0
 8022254:	6039      	str	r1, [r7, #0]
 8022256:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8022258:	2300      	movs	r3, #0
 802225a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 802225c:	f7ff ffde 	bl	802221c <BSP_LCD_GetXSize>
 8022260:	4603      	mov	r3, r0
 8022262:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8022264:	2300      	movs	r3, #0
 8022266:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8022268:	f7ff ffe4 	bl	8022234 <BSP_LCD_GetYSize>
 802226c:	4603      	mov	r3, r0
 802226e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8022270:	2300      	movs	r3, #0
 8022272:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8022274:	683b      	ldr	r3, [r7, #0]
 8022276:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8022278:	23ff      	movs	r3, #255	; 0xff
 802227a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 802227c:	2300      	movs	r3, #0
 802227e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8022280:	2300      	movs	r3, #0
 8022282:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8022286:	2300      	movs	r3, #0
 8022288:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 802228c:	2300      	movs	r3, #0
 802228e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8022292:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8022296:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8022298:	2307      	movs	r3, #7
 802229a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 802229c:	f7ff ffbe 	bl	802221c <BSP_LCD_GetXSize>
 80222a0:	4603      	mov	r3, r0
 80222a2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80222a4:	f7ff ffc6 	bl	8022234 <BSP_LCD_GetYSize>
 80222a8:	4603      	mov	r3, r0
 80222aa:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80222ac:	88fa      	ldrh	r2, [r7, #6]
 80222ae:	f107 030c 	add.w	r3, r7, #12
 80222b2:	4619      	mov	r1, r3
 80222b4:	4814      	ldr	r0, [pc, #80]	; (8022308 <BSP_LCD_LayerDefaultInit+0xbc>)
 80222b6:	f003 ff63 	bl	8026180 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80222ba:	88fa      	ldrh	r2, [r7, #6]
 80222bc:	4913      	ldr	r1, [pc, #76]	; (802230c <BSP_LCD_LayerDefaultInit+0xc0>)
 80222be:	4613      	mov	r3, r2
 80222c0:	005b      	lsls	r3, r3, #1
 80222c2:	4413      	add	r3, r2
 80222c4:	009b      	lsls	r3, r3, #2
 80222c6:	440b      	add	r3, r1
 80222c8:	3304      	adds	r3, #4
 80222ca:	f04f 32ff 	mov.w	r2, #4294967295
 80222ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80222d0:	88fa      	ldrh	r2, [r7, #6]
 80222d2:	490e      	ldr	r1, [pc, #56]	; (802230c <BSP_LCD_LayerDefaultInit+0xc0>)
 80222d4:	4613      	mov	r3, r2
 80222d6:	005b      	lsls	r3, r3, #1
 80222d8:	4413      	add	r3, r2
 80222da:	009b      	lsls	r3, r3, #2
 80222dc:	440b      	add	r3, r1
 80222de:	3308      	adds	r3, #8
 80222e0:	4a0b      	ldr	r2, [pc, #44]	; (8022310 <BSP_LCD_LayerDefaultInit+0xc4>)
 80222e2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80222e4:	88fa      	ldrh	r2, [r7, #6]
 80222e6:	4909      	ldr	r1, [pc, #36]	; (802230c <BSP_LCD_LayerDefaultInit+0xc0>)
 80222e8:	4613      	mov	r3, r2
 80222ea:	005b      	lsls	r3, r3, #1
 80222ec:	4413      	add	r3, r2
 80222ee:	009b      	lsls	r3, r3, #2
 80222f0:	440b      	add	r3, r1
 80222f2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80222f6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80222f8:	4803      	ldr	r0, [pc, #12]	; (8022308 <BSP_LCD_LayerDefaultInit+0xbc>)
 80222fa:	f003 fffd 	bl	80262f8 <HAL_LTDC_EnableDither>
}
 80222fe:	bf00      	nop
 8022300:	3740      	adds	r7, #64	; 0x40
 8022302:	46bd      	mov	sp, r7
 8022304:	bd80      	pop	{r7, pc}
 8022306:	bf00      	nop
 8022308:	200008c0 	.word	0x200008c0
 802230c:	200009dc 	.word	0x200009dc
 8022310:	20000040 	.word	0x20000040

08022314 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8022314:	b480      	push	{r7}
 8022316:	b083      	sub	sp, #12
 8022318:	af00      	add	r7, sp, #0
 802231a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 802231c:	4a04      	ldr	r2, [pc, #16]	; (8022330 <BSP_LCD_SelectLayer+0x1c>)
 802231e:	687b      	ldr	r3, [r7, #4]
 8022320:	6013      	str	r3, [r2, #0]
}
 8022322:	bf00      	nop
 8022324:	370c      	adds	r7, #12
 8022326:	46bd      	mov	sp, r7
 8022328:	f85d 7b04 	ldr.w	r7, [sp], #4
 802232c:	4770      	bx	lr
 802232e:	bf00      	nop
 8022330:	200009d8 	.word	0x200009d8

08022334 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8022334:	b480      	push	{r7}
 8022336:	b083      	sub	sp, #12
 8022338:	af00      	add	r7, sp, #0
 802233a:	6078      	str	r0, [r7, #4]
 802233c:	460b      	mov	r3, r1
 802233e:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8022340:	78fb      	ldrb	r3, [r7, #3]
 8022342:	2b01      	cmp	r3, #1
 8022344:	d112      	bne.n	802236c <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8022346:	4b19      	ldr	r3, [pc, #100]	; (80223ac <BSP_LCD_SetLayerVisible+0x78>)
 8022348:	681b      	ldr	r3, [r3, #0]
 802234a:	461a      	mov	r2, r3
 802234c:	687b      	ldr	r3, [r7, #4]
 802234e:	01db      	lsls	r3, r3, #7
 8022350:	4413      	add	r3, r2
 8022352:	3384      	adds	r3, #132	; 0x84
 8022354:	681b      	ldr	r3, [r3, #0]
 8022356:	4a15      	ldr	r2, [pc, #84]	; (80223ac <BSP_LCD_SetLayerVisible+0x78>)
 8022358:	6812      	ldr	r2, [r2, #0]
 802235a:	4611      	mov	r1, r2
 802235c:	687a      	ldr	r2, [r7, #4]
 802235e:	01d2      	lsls	r2, r2, #7
 8022360:	440a      	add	r2, r1
 8022362:	3284      	adds	r2, #132	; 0x84
 8022364:	f043 0301 	orr.w	r3, r3, #1
 8022368:	6013      	str	r3, [r2, #0]
 802236a:	e011      	b.n	8022390 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 802236c:	4b0f      	ldr	r3, [pc, #60]	; (80223ac <BSP_LCD_SetLayerVisible+0x78>)
 802236e:	681b      	ldr	r3, [r3, #0]
 8022370:	461a      	mov	r2, r3
 8022372:	687b      	ldr	r3, [r7, #4]
 8022374:	01db      	lsls	r3, r3, #7
 8022376:	4413      	add	r3, r2
 8022378:	3384      	adds	r3, #132	; 0x84
 802237a:	681b      	ldr	r3, [r3, #0]
 802237c:	4a0b      	ldr	r2, [pc, #44]	; (80223ac <BSP_LCD_SetLayerVisible+0x78>)
 802237e:	6812      	ldr	r2, [r2, #0]
 8022380:	4611      	mov	r1, r2
 8022382:	687a      	ldr	r2, [r7, #4]
 8022384:	01d2      	lsls	r2, r2, #7
 8022386:	440a      	add	r2, r1
 8022388:	3284      	adds	r2, #132	; 0x84
 802238a:	f023 0301 	bic.w	r3, r3, #1
 802238e:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8022390:	4b06      	ldr	r3, [pc, #24]	; (80223ac <BSP_LCD_SetLayerVisible+0x78>)
 8022392:	681b      	ldr	r3, [r3, #0]
 8022394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022396:	4b05      	ldr	r3, [pc, #20]	; (80223ac <BSP_LCD_SetLayerVisible+0x78>)
 8022398:	681b      	ldr	r3, [r3, #0]
 802239a:	f042 0201 	orr.w	r2, r2, #1
 802239e:	625a      	str	r2, [r3, #36]	; 0x24
}
 80223a0:	bf00      	nop
 80223a2:	370c      	adds	r7, #12
 80223a4:	46bd      	mov	sp, r7
 80223a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223aa:	4770      	bx	lr
 80223ac:	200008c0 	.word	0x200008c0

080223b0 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 80223b0:	b580      	push	{r7, lr}
 80223b2:	b082      	sub	sp, #8
 80223b4:	af00      	add	r7, sp, #0
 80223b6:	6078      	str	r0, [r7, #4]
 80223b8:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 80223ba:	687a      	ldr	r2, [r7, #4]
 80223bc:	6839      	ldr	r1, [r7, #0]
 80223be:	4805      	ldr	r0, [pc, #20]	; (80223d4 <BSP_LCD_SetColorKeying+0x24>)
 80223c0:	f003 ff1c 	bl	80261fc <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 80223c4:	6879      	ldr	r1, [r7, #4]
 80223c6:	4803      	ldr	r0, [pc, #12]	; (80223d4 <BSP_LCD_SetColorKeying+0x24>)
 80223c8:	f003 ff5c 	bl	8026284 <HAL_LTDC_EnableColorKeying>
}
 80223cc:	bf00      	nop
 80223ce:	3708      	adds	r7, #8
 80223d0:	46bd      	mov	sp, r7
 80223d2:	bd80      	pop	{r7, pc}
 80223d4:	200008c0 	.word	0x200008c0

080223d8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80223d8:	b480      	push	{r7}
 80223da:	b083      	sub	sp, #12
 80223dc:	af00      	add	r7, sp, #0
 80223de:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80223e0:	4b07      	ldr	r3, [pc, #28]	; (8022400 <BSP_LCD_SetTextColor+0x28>)
 80223e2:	681a      	ldr	r2, [r3, #0]
 80223e4:	4907      	ldr	r1, [pc, #28]	; (8022404 <BSP_LCD_SetTextColor+0x2c>)
 80223e6:	4613      	mov	r3, r2
 80223e8:	005b      	lsls	r3, r3, #1
 80223ea:	4413      	add	r3, r2
 80223ec:	009b      	lsls	r3, r3, #2
 80223ee:	440b      	add	r3, r1
 80223f0:	687a      	ldr	r2, [r7, #4]
 80223f2:	601a      	str	r2, [r3, #0]
}
 80223f4:	bf00      	nop
 80223f6:	370c      	adds	r7, #12
 80223f8:	46bd      	mov	sp, r7
 80223fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223fe:	4770      	bx	lr
 8022400:	200009d8 	.word	0x200009d8
 8022404:	200009dc 	.word	0x200009dc

08022408 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8022408:	b480      	push	{r7}
 802240a:	b083      	sub	sp, #12
 802240c:	af00      	add	r7, sp, #0
 802240e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8022410:	4b08      	ldr	r3, [pc, #32]	; (8022434 <BSP_LCD_SetBackColor+0x2c>)
 8022412:	681a      	ldr	r2, [r3, #0]
 8022414:	4908      	ldr	r1, [pc, #32]	; (8022438 <BSP_LCD_SetBackColor+0x30>)
 8022416:	4613      	mov	r3, r2
 8022418:	005b      	lsls	r3, r3, #1
 802241a:	4413      	add	r3, r2
 802241c:	009b      	lsls	r3, r3, #2
 802241e:	440b      	add	r3, r1
 8022420:	3304      	adds	r3, #4
 8022422:	687a      	ldr	r2, [r7, #4]
 8022424:	601a      	str	r2, [r3, #0]
}
 8022426:	bf00      	nop
 8022428:	370c      	adds	r7, #12
 802242a:	46bd      	mov	sp, r7
 802242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022430:	4770      	bx	lr
 8022432:	bf00      	nop
 8022434:	200009d8 	.word	0x200009d8
 8022438:	200009dc 	.word	0x200009dc

0802243c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 802243c:	b480      	push	{r7}
 802243e:	b083      	sub	sp, #12
 8022440:	af00      	add	r7, sp, #0
 8022442:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8022444:	4b08      	ldr	r3, [pc, #32]	; (8022468 <BSP_LCD_SetFont+0x2c>)
 8022446:	681a      	ldr	r2, [r3, #0]
 8022448:	4908      	ldr	r1, [pc, #32]	; (802246c <BSP_LCD_SetFont+0x30>)
 802244a:	4613      	mov	r3, r2
 802244c:	005b      	lsls	r3, r3, #1
 802244e:	4413      	add	r3, r2
 8022450:	009b      	lsls	r3, r3, #2
 8022452:	440b      	add	r3, r1
 8022454:	3308      	adds	r3, #8
 8022456:	687a      	ldr	r2, [r7, #4]
 8022458:	601a      	str	r2, [r3, #0]
}
 802245a:	bf00      	nop
 802245c:	370c      	adds	r7, #12
 802245e:	46bd      	mov	sp, r7
 8022460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022464:	4770      	bx	lr
 8022466:	bf00      	nop
 8022468:	200009d8 	.word	0x200009d8
 802246c:	200009dc 	.word	0x200009dc

08022470 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8022470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022472:	b085      	sub	sp, #20
 8022474:	af02      	add	r7, sp, #8
 8022476:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8022478:	4b0f      	ldr	r3, [pc, #60]	; (80224b8 <BSP_LCD_Clear+0x48>)
 802247a:	681c      	ldr	r4, [r3, #0]
 802247c:	4b0e      	ldr	r3, [pc, #56]	; (80224b8 <BSP_LCD_Clear+0x48>)
 802247e:	681b      	ldr	r3, [r3, #0]
 8022480:	4a0e      	ldr	r2, [pc, #56]	; (80224bc <BSP_LCD_Clear+0x4c>)
 8022482:	2134      	movs	r1, #52	; 0x34
 8022484:	fb01 f303 	mul.w	r3, r1, r3
 8022488:	4413      	add	r3, r2
 802248a:	335c      	adds	r3, #92	; 0x5c
 802248c:	681b      	ldr	r3, [r3, #0]
 802248e:	461e      	mov	r6, r3
 8022490:	f7ff fec4 	bl	802221c <BSP_LCD_GetXSize>
 8022494:	4605      	mov	r5, r0
 8022496:	f7ff fecd 	bl	8022234 <BSP_LCD_GetYSize>
 802249a:	4602      	mov	r2, r0
 802249c:	687b      	ldr	r3, [r7, #4]
 802249e:	9301      	str	r3, [sp, #4]
 80224a0:	2300      	movs	r3, #0
 80224a2:	9300      	str	r3, [sp, #0]
 80224a4:	4613      	mov	r3, r2
 80224a6:	462a      	mov	r2, r5
 80224a8:	4631      	mov	r1, r6
 80224aa:	4620      	mov	r0, r4
 80224ac:	f000 fad0 	bl	8022a50 <FillBuffer>
}
 80224b0:	bf00      	nop
 80224b2:	370c      	adds	r7, #12
 80224b4:	46bd      	mov	sp, r7
 80224b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80224b8:	200009d8 	.word	0x200009d8
 80224bc:	200008c0 	.word	0x200008c0

080224c0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80224c0:	b590      	push	{r4, r7, lr}
 80224c2:	b083      	sub	sp, #12
 80224c4:	af00      	add	r7, sp, #0
 80224c6:	4603      	mov	r3, r0
 80224c8:	80fb      	strh	r3, [r7, #6]
 80224ca:	460b      	mov	r3, r1
 80224cc:	80bb      	strh	r3, [r7, #4]
 80224ce:	4613      	mov	r3, r2
 80224d0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80224d2:	4b1b      	ldr	r3, [pc, #108]	; (8022540 <BSP_LCD_DisplayChar+0x80>)
 80224d4:	681a      	ldr	r2, [r3, #0]
 80224d6:	491b      	ldr	r1, [pc, #108]	; (8022544 <BSP_LCD_DisplayChar+0x84>)
 80224d8:	4613      	mov	r3, r2
 80224da:	005b      	lsls	r3, r3, #1
 80224dc:	4413      	add	r3, r2
 80224de:	009b      	lsls	r3, r3, #2
 80224e0:	440b      	add	r3, r1
 80224e2:	3308      	adds	r3, #8
 80224e4:	681b      	ldr	r3, [r3, #0]
 80224e6:	6819      	ldr	r1, [r3, #0]
 80224e8:	78fb      	ldrb	r3, [r7, #3]
 80224ea:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80224ee:	4b14      	ldr	r3, [pc, #80]	; (8022540 <BSP_LCD_DisplayChar+0x80>)
 80224f0:	681a      	ldr	r2, [r3, #0]
 80224f2:	4c14      	ldr	r4, [pc, #80]	; (8022544 <BSP_LCD_DisplayChar+0x84>)
 80224f4:	4613      	mov	r3, r2
 80224f6:	005b      	lsls	r3, r3, #1
 80224f8:	4413      	add	r3, r2
 80224fa:	009b      	lsls	r3, r3, #2
 80224fc:	4423      	add	r3, r4
 80224fe:	3308      	adds	r3, #8
 8022500:	681b      	ldr	r3, [r3, #0]
 8022502:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022504:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022508:	4b0d      	ldr	r3, [pc, #52]	; (8022540 <BSP_LCD_DisplayChar+0x80>)
 802250a:	681a      	ldr	r2, [r3, #0]
 802250c:	4c0d      	ldr	r4, [pc, #52]	; (8022544 <BSP_LCD_DisplayChar+0x84>)
 802250e:	4613      	mov	r3, r2
 8022510:	005b      	lsls	r3, r3, #1
 8022512:	4413      	add	r3, r2
 8022514:	009b      	lsls	r3, r3, #2
 8022516:	4423      	add	r3, r4
 8022518:	3308      	adds	r3, #8
 802251a:	681b      	ldr	r3, [r3, #0]
 802251c:	889b      	ldrh	r3, [r3, #4]
 802251e:	3307      	adds	r3, #7
 8022520:	2b00      	cmp	r3, #0
 8022522:	da00      	bge.n	8022526 <BSP_LCD_DisplayChar+0x66>
 8022524:	3307      	adds	r3, #7
 8022526:	10db      	asrs	r3, r3, #3
 8022528:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 802252c:	18ca      	adds	r2, r1, r3
 802252e:	88b9      	ldrh	r1, [r7, #4]
 8022530:	88fb      	ldrh	r3, [r7, #6]
 8022532:	4618      	mov	r0, r3
 8022534:	f000 f9d2 	bl	80228dc <DrawChar>
}
 8022538:	bf00      	nop
 802253a:	370c      	adds	r7, #12
 802253c:	46bd      	mov	sp, r7
 802253e:	bd90      	pop	{r4, r7, pc}
 8022540:	200009d8 	.word	0x200009d8
 8022544:	200009dc 	.word	0x200009dc

08022548 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8022548:	b5b0      	push	{r4, r5, r7, lr}
 802254a:	b088      	sub	sp, #32
 802254c:	af00      	add	r7, sp, #0
 802254e:	60ba      	str	r2, [r7, #8]
 8022550:	461a      	mov	r2, r3
 8022552:	4603      	mov	r3, r0
 8022554:	81fb      	strh	r3, [r7, #14]
 8022556:	460b      	mov	r3, r1
 8022558:	81bb      	strh	r3, [r7, #12]
 802255a:	4613      	mov	r3, r2
 802255c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 802255e:	2301      	movs	r3, #1
 8022560:	83fb      	strh	r3, [r7, #30]
 8022562:	2300      	movs	r3, #0
 8022564:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8022566:	2300      	movs	r3, #0
 8022568:	61bb      	str	r3, [r7, #24]
 802256a:	2300      	movs	r3, #0
 802256c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 802256e:	68bb      	ldr	r3, [r7, #8]
 8022570:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8022572:	e002      	b.n	802257a <BSP_LCD_DisplayStringAt+0x32>
 8022574:	69bb      	ldr	r3, [r7, #24]
 8022576:	3301      	adds	r3, #1
 8022578:	61bb      	str	r3, [r7, #24]
 802257a:	697b      	ldr	r3, [r7, #20]
 802257c:	1c5a      	adds	r2, r3, #1
 802257e:	617a      	str	r2, [r7, #20]
 8022580:	781b      	ldrb	r3, [r3, #0]
 8022582:	2b00      	cmp	r3, #0
 8022584:	d1f6      	bne.n	8022574 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8022586:	f7ff fe49 	bl	802221c <BSP_LCD_GetXSize>
 802258a:	4601      	mov	r1, r0
 802258c:	4b4b      	ldr	r3, [pc, #300]	; (80226bc <BSP_LCD_DisplayStringAt+0x174>)
 802258e:	681a      	ldr	r2, [r3, #0]
 8022590:	484b      	ldr	r0, [pc, #300]	; (80226c0 <BSP_LCD_DisplayStringAt+0x178>)
 8022592:	4613      	mov	r3, r2
 8022594:	005b      	lsls	r3, r3, #1
 8022596:	4413      	add	r3, r2
 8022598:	009b      	lsls	r3, r3, #2
 802259a:	4403      	add	r3, r0
 802259c:	3308      	adds	r3, #8
 802259e:	681b      	ldr	r3, [r3, #0]
 80225a0:	889b      	ldrh	r3, [r3, #4]
 80225a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80225a6:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80225a8:	79fb      	ldrb	r3, [r7, #7]
 80225aa:	2b03      	cmp	r3, #3
 80225ac:	d01c      	beq.n	80225e8 <BSP_LCD_DisplayStringAt+0xa0>
 80225ae:	2b03      	cmp	r3, #3
 80225b0:	dc33      	bgt.n	802261a <BSP_LCD_DisplayStringAt+0xd2>
 80225b2:	2b01      	cmp	r3, #1
 80225b4:	d002      	beq.n	80225bc <BSP_LCD_DisplayStringAt+0x74>
 80225b6:	2b02      	cmp	r3, #2
 80225b8:	d019      	beq.n	80225ee <BSP_LCD_DisplayStringAt+0xa6>
 80225ba:	e02e      	b.n	802261a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80225bc:	693a      	ldr	r2, [r7, #16]
 80225be:	69bb      	ldr	r3, [r7, #24]
 80225c0:	1ad1      	subs	r1, r2, r3
 80225c2:	4b3e      	ldr	r3, [pc, #248]	; (80226bc <BSP_LCD_DisplayStringAt+0x174>)
 80225c4:	681a      	ldr	r2, [r3, #0]
 80225c6:	483e      	ldr	r0, [pc, #248]	; (80226c0 <BSP_LCD_DisplayStringAt+0x178>)
 80225c8:	4613      	mov	r3, r2
 80225ca:	005b      	lsls	r3, r3, #1
 80225cc:	4413      	add	r3, r2
 80225ce:	009b      	lsls	r3, r3, #2
 80225d0:	4403      	add	r3, r0
 80225d2:	3308      	adds	r3, #8
 80225d4:	681b      	ldr	r3, [r3, #0]
 80225d6:	889b      	ldrh	r3, [r3, #4]
 80225d8:	fb01 f303 	mul.w	r3, r1, r3
 80225dc:	085b      	lsrs	r3, r3, #1
 80225de:	b29a      	uxth	r2, r3
 80225e0:	89fb      	ldrh	r3, [r7, #14]
 80225e2:	4413      	add	r3, r2
 80225e4:	83fb      	strh	r3, [r7, #30]
      break;
 80225e6:	e01b      	b.n	8022620 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80225e8:	89fb      	ldrh	r3, [r7, #14]
 80225ea:	83fb      	strh	r3, [r7, #30]
      break;
 80225ec:	e018      	b.n	8022620 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80225ee:	693a      	ldr	r2, [r7, #16]
 80225f0:	69bb      	ldr	r3, [r7, #24]
 80225f2:	1ad3      	subs	r3, r2, r3
 80225f4:	b299      	uxth	r1, r3
 80225f6:	4b31      	ldr	r3, [pc, #196]	; (80226bc <BSP_LCD_DisplayStringAt+0x174>)
 80225f8:	681a      	ldr	r2, [r3, #0]
 80225fa:	4831      	ldr	r0, [pc, #196]	; (80226c0 <BSP_LCD_DisplayStringAt+0x178>)
 80225fc:	4613      	mov	r3, r2
 80225fe:	005b      	lsls	r3, r3, #1
 8022600:	4413      	add	r3, r2
 8022602:	009b      	lsls	r3, r3, #2
 8022604:	4403      	add	r3, r0
 8022606:	3308      	adds	r3, #8
 8022608:	681b      	ldr	r3, [r3, #0]
 802260a:	889b      	ldrh	r3, [r3, #4]
 802260c:	fb11 f303 	smulbb	r3, r1, r3
 8022610:	b29a      	uxth	r2, r3
 8022612:	89fb      	ldrh	r3, [r7, #14]
 8022614:	4413      	add	r3, r2
 8022616:	83fb      	strh	r3, [r7, #30]
      break;
 8022618:	e002      	b.n	8022620 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 802261a:	89fb      	ldrh	r3, [r7, #14]
 802261c:	83fb      	strh	r3, [r7, #30]
      break;
 802261e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022620:	e01a      	b.n	8022658 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8022622:	68bb      	ldr	r3, [r7, #8]
 8022624:	781a      	ldrb	r2, [r3, #0]
 8022626:	89b9      	ldrh	r1, [r7, #12]
 8022628:	8bfb      	ldrh	r3, [r7, #30]
 802262a:	4618      	mov	r0, r3
 802262c:	f7ff ff48 	bl	80224c0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8022630:	4b22      	ldr	r3, [pc, #136]	; (80226bc <BSP_LCD_DisplayStringAt+0x174>)
 8022632:	681a      	ldr	r2, [r3, #0]
 8022634:	4922      	ldr	r1, [pc, #136]	; (80226c0 <BSP_LCD_DisplayStringAt+0x178>)
 8022636:	4613      	mov	r3, r2
 8022638:	005b      	lsls	r3, r3, #1
 802263a:	4413      	add	r3, r2
 802263c:	009b      	lsls	r3, r3, #2
 802263e:	440b      	add	r3, r1
 8022640:	3308      	adds	r3, #8
 8022642:	681b      	ldr	r3, [r3, #0]
 8022644:	889a      	ldrh	r2, [r3, #4]
 8022646:	8bfb      	ldrh	r3, [r7, #30]
 8022648:	4413      	add	r3, r2
 802264a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 802264c:	68bb      	ldr	r3, [r7, #8]
 802264e:	3301      	adds	r3, #1
 8022650:	60bb      	str	r3, [r7, #8]
    i++;
 8022652:	8bbb      	ldrh	r3, [r7, #28]
 8022654:	3301      	adds	r3, #1
 8022656:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022658:	68bb      	ldr	r3, [r7, #8]
 802265a:	781b      	ldrb	r3, [r3, #0]
 802265c:	2b00      	cmp	r3, #0
 802265e:	bf14      	ite	ne
 8022660:	2301      	movne	r3, #1
 8022662:	2300      	moveq	r3, #0
 8022664:	b2dc      	uxtb	r4, r3
 8022666:	f7ff fdd9 	bl	802221c <BSP_LCD_GetXSize>
 802266a:	8bb9      	ldrh	r1, [r7, #28]
 802266c:	4b13      	ldr	r3, [pc, #76]	; (80226bc <BSP_LCD_DisplayStringAt+0x174>)
 802266e:	681a      	ldr	r2, [r3, #0]
 8022670:	4d13      	ldr	r5, [pc, #76]	; (80226c0 <BSP_LCD_DisplayStringAt+0x178>)
 8022672:	4613      	mov	r3, r2
 8022674:	005b      	lsls	r3, r3, #1
 8022676:	4413      	add	r3, r2
 8022678:	009b      	lsls	r3, r3, #2
 802267a:	442b      	add	r3, r5
 802267c:	3308      	adds	r3, #8
 802267e:	681b      	ldr	r3, [r3, #0]
 8022680:	889b      	ldrh	r3, [r3, #4]
 8022682:	fb01 f303 	mul.w	r3, r1, r3
 8022686:	1ac3      	subs	r3, r0, r3
 8022688:	b299      	uxth	r1, r3
 802268a:	4b0c      	ldr	r3, [pc, #48]	; (80226bc <BSP_LCD_DisplayStringAt+0x174>)
 802268c:	681a      	ldr	r2, [r3, #0]
 802268e:	480c      	ldr	r0, [pc, #48]	; (80226c0 <BSP_LCD_DisplayStringAt+0x178>)
 8022690:	4613      	mov	r3, r2
 8022692:	005b      	lsls	r3, r3, #1
 8022694:	4413      	add	r3, r2
 8022696:	009b      	lsls	r3, r3, #2
 8022698:	4403      	add	r3, r0
 802269a:	3308      	adds	r3, #8
 802269c:	681b      	ldr	r3, [r3, #0]
 802269e:	889b      	ldrh	r3, [r3, #4]
 80226a0:	4299      	cmp	r1, r3
 80226a2:	bf2c      	ite	cs
 80226a4:	2301      	movcs	r3, #1
 80226a6:	2300      	movcc	r3, #0
 80226a8:	b2db      	uxtb	r3, r3
 80226aa:	4023      	ands	r3, r4
 80226ac:	b2db      	uxtb	r3, r3
 80226ae:	2b00      	cmp	r3, #0
 80226b0:	d1b7      	bne.n	8022622 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80226b2:	bf00      	nop
 80226b4:	bf00      	nop
 80226b6:	3720      	adds	r7, #32
 80226b8:	46bd      	mov	sp, r7
 80226ba:	bdb0      	pop	{r4, r5, r7, pc}
 80226bc:	200009d8 	.word	0x200009d8
 80226c0:	200009dc 	.word	0x200009dc

080226c4 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80226c4:	b580      	push	{r7, lr}
 80226c6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80226c8:	4b05      	ldr	r3, [pc, #20]	; (80226e0 <BSP_LCD_DisplayOn+0x1c>)
 80226ca:	681b      	ldr	r3, [r3, #0]
 80226cc:	689b      	ldr	r3, [r3, #8]
 80226ce:	2b00      	cmp	r3, #0
 80226d0:	d003      	beq.n	80226da <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80226d2:	4b03      	ldr	r3, [pc, #12]	; (80226e0 <BSP_LCD_DisplayOn+0x1c>)
 80226d4:	681b      	ldr	r3, [r3, #0]
 80226d6:	689b      	ldr	r3, [r3, #8]
 80226d8:	4798      	blx	r3
  }
}
 80226da:	bf00      	nop
 80226dc:	bd80      	pop	{r7, pc}
 80226de:	bf00      	nop
 80226e0:	200009f4 	.word	0x200009f4

080226e4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80226e4:	b580      	push	{r7, lr}
 80226e6:	b08e      	sub	sp, #56	; 0x38
 80226e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80226ea:	2300      	movs	r3, #0
 80226ec:	623b      	str	r3, [r7, #32]
 80226ee:	4b61      	ldr	r3, [pc, #388]	; (8022874 <BSP_LCD_MspInit+0x190>)
 80226f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80226f2:	4a60      	ldr	r2, [pc, #384]	; (8022874 <BSP_LCD_MspInit+0x190>)
 80226f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80226f8:	6453      	str	r3, [r2, #68]	; 0x44
 80226fa:	4b5e      	ldr	r3, [pc, #376]	; (8022874 <BSP_LCD_MspInit+0x190>)
 80226fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80226fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8022702:	623b      	str	r3, [r7, #32]
 8022704:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8022706:	2300      	movs	r3, #0
 8022708:	61fb      	str	r3, [r7, #28]
 802270a:	4b5a      	ldr	r3, [pc, #360]	; (8022874 <BSP_LCD_MspInit+0x190>)
 802270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802270e:	4a59      	ldr	r2, [pc, #356]	; (8022874 <BSP_LCD_MspInit+0x190>)
 8022710:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8022714:	6313      	str	r3, [r2, #48]	; 0x30
 8022716:	4b57      	ldr	r3, [pc, #348]	; (8022874 <BSP_LCD_MspInit+0x190>)
 8022718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802271a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802271e:	61fb      	str	r3, [r7, #28]
 8022720:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8022722:	2300      	movs	r3, #0
 8022724:	61bb      	str	r3, [r7, #24]
 8022726:	4b53      	ldr	r3, [pc, #332]	; (8022874 <BSP_LCD_MspInit+0x190>)
 8022728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802272a:	4a52      	ldr	r2, [pc, #328]	; (8022874 <BSP_LCD_MspInit+0x190>)
 802272c:	f043 0301 	orr.w	r3, r3, #1
 8022730:	6313      	str	r3, [r2, #48]	; 0x30
 8022732:	4b50      	ldr	r3, [pc, #320]	; (8022874 <BSP_LCD_MspInit+0x190>)
 8022734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022736:	f003 0301 	and.w	r3, r3, #1
 802273a:	61bb      	str	r3, [r7, #24]
 802273c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802273e:	2300      	movs	r3, #0
 8022740:	617b      	str	r3, [r7, #20]
 8022742:	4b4c      	ldr	r3, [pc, #304]	; (8022874 <BSP_LCD_MspInit+0x190>)
 8022744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022746:	4a4b      	ldr	r2, [pc, #300]	; (8022874 <BSP_LCD_MspInit+0x190>)
 8022748:	f043 0302 	orr.w	r3, r3, #2
 802274c:	6313      	str	r3, [r2, #48]	; 0x30
 802274e:	4b49      	ldr	r3, [pc, #292]	; (8022874 <BSP_LCD_MspInit+0x190>)
 8022750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022752:	f003 0302 	and.w	r3, r3, #2
 8022756:	617b      	str	r3, [r7, #20]
 8022758:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802275a:	2300      	movs	r3, #0
 802275c:	613b      	str	r3, [r7, #16]
 802275e:	4b45      	ldr	r3, [pc, #276]	; (8022874 <BSP_LCD_MspInit+0x190>)
 8022760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022762:	4a44      	ldr	r2, [pc, #272]	; (8022874 <BSP_LCD_MspInit+0x190>)
 8022764:	f043 0304 	orr.w	r3, r3, #4
 8022768:	6313      	str	r3, [r2, #48]	; 0x30
 802276a:	4b42      	ldr	r3, [pc, #264]	; (8022874 <BSP_LCD_MspInit+0x190>)
 802276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802276e:	f003 0304 	and.w	r3, r3, #4
 8022772:	613b      	str	r3, [r7, #16]
 8022774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8022776:	2300      	movs	r3, #0
 8022778:	60fb      	str	r3, [r7, #12]
 802277a:	4b3e      	ldr	r3, [pc, #248]	; (8022874 <BSP_LCD_MspInit+0x190>)
 802277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802277e:	4a3d      	ldr	r2, [pc, #244]	; (8022874 <BSP_LCD_MspInit+0x190>)
 8022780:	f043 0308 	orr.w	r3, r3, #8
 8022784:	6313      	str	r3, [r2, #48]	; 0x30
 8022786:	4b3b      	ldr	r3, [pc, #236]	; (8022874 <BSP_LCD_MspInit+0x190>)
 8022788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802278a:	f003 0308 	and.w	r3, r3, #8
 802278e:	60fb      	str	r3, [r7, #12]
 8022790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8022792:	2300      	movs	r3, #0
 8022794:	60bb      	str	r3, [r7, #8]
 8022796:	4b37      	ldr	r3, [pc, #220]	; (8022874 <BSP_LCD_MspInit+0x190>)
 8022798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802279a:	4a36      	ldr	r2, [pc, #216]	; (8022874 <BSP_LCD_MspInit+0x190>)
 802279c:	f043 0320 	orr.w	r3, r3, #32
 80227a0:	6313      	str	r3, [r2, #48]	; 0x30
 80227a2:	4b34      	ldr	r3, [pc, #208]	; (8022874 <BSP_LCD_MspInit+0x190>)
 80227a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80227a6:	f003 0320 	and.w	r3, r3, #32
 80227aa:	60bb      	str	r3, [r7, #8]
 80227ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80227ae:	2300      	movs	r3, #0
 80227b0:	607b      	str	r3, [r7, #4]
 80227b2:	4b30      	ldr	r3, [pc, #192]	; (8022874 <BSP_LCD_MspInit+0x190>)
 80227b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80227b6:	4a2f      	ldr	r2, [pc, #188]	; (8022874 <BSP_LCD_MspInit+0x190>)
 80227b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80227bc:	6313      	str	r3, [r2, #48]	; 0x30
 80227be:	4b2d      	ldr	r3, [pc, #180]	; (8022874 <BSP_LCD_MspInit+0x190>)
 80227c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80227c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80227c6:	607b      	str	r3, [r7, #4]
 80227c8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80227ca:	f641 0358 	movw	r3, #6232	; 0x1858
 80227ce:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80227d0:	2302      	movs	r3, #2
 80227d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80227d4:	2300      	movs	r3, #0
 80227d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80227d8:	2302      	movs	r3, #2
 80227da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80227dc:	230e      	movs	r3, #14
 80227de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80227e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80227e4:	4619      	mov	r1, r3
 80227e6:	4824      	ldr	r0, [pc, #144]	; (8022878 <BSP_LCD_MspInit+0x194>)
 80227e8:	f001 fa84 	bl	8023cf4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80227ec:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80227f0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80227f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80227f6:	4619      	mov	r1, r3
 80227f8:	4820      	ldr	r0, [pc, #128]	; (802287c <BSP_LCD_MspInit+0x198>)
 80227fa:	f001 fa7b 	bl	8023cf4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80227fe:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8022802:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8022804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022808:	4619      	mov	r1, r3
 802280a:	481d      	ldr	r0, [pc, #116]	; (8022880 <BSP_LCD_MspInit+0x19c>)
 802280c:	f001 fa72 	bl	8023cf4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8022810:	2348      	movs	r3, #72	; 0x48
 8022812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8022814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022818:	4619      	mov	r1, r3
 802281a:	481a      	ldr	r0, [pc, #104]	; (8022884 <BSP_LCD_MspInit+0x1a0>)
 802281c:	f001 fa6a 	bl	8023cf4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8022820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022824:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8022826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802282a:	4619      	mov	r1, r3
 802282c:	4816      	ldr	r0, [pc, #88]	; (8022888 <BSP_LCD_MspInit+0x1a4>)
 802282e:	f001 fa61 	bl	8023cf4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8022832:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8022836:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802283c:	4619      	mov	r1, r3
 802283e:	4813      	ldr	r0, [pc, #76]	; (802288c <BSP_LCD_MspInit+0x1a8>)
 8022840:	f001 fa58 	bl	8023cf4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8022844:	2303      	movs	r3, #3
 8022846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8022848:	2309      	movs	r3, #9
 802284a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 802284c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022850:	4619      	mov	r1, r3
 8022852:	480a      	ldr	r0, [pc, #40]	; (802287c <BSP_LCD_MspInit+0x198>)
 8022854:	f001 fa4e 	bl	8023cf4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8022858:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 802285c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 802285e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022862:	4619      	mov	r1, r3
 8022864:	4809      	ldr	r0, [pc, #36]	; (802288c <BSP_LCD_MspInit+0x1a8>)
 8022866:	f001 fa45 	bl	8023cf4 <HAL_GPIO_Init>
}
 802286a:	bf00      	nop
 802286c:	3738      	adds	r7, #56	; 0x38
 802286e:	46bd      	mov	sp, r7
 8022870:	bd80      	pop	{r7, pc}
 8022872:	bf00      	nop
 8022874:	40023800 	.word	0x40023800
 8022878:	40020000 	.word	0x40020000
 802287c:	40020400 	.word	0x40020400
 8022880:	40020800 	.word	0x40020800
 8022884:	40020c00 	.word	0x40020c00
 8022888:	40021400 	.word	0x40021400
 802288c:	40021800 	.word	0x40021800

08022890 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8022890:	b5b0      	push	{r4, r5, r7, lr}
 8022892:	b082      	sub	sp, #8
 8022894:	af00      	add	r7, sp, #0
 8022896:	4603      	mov	r3, r0
 8022898:	603a      	str	r2, [r7, #0]
 802289a:	80fb      	strh	r3, [r7, #6]
 802289c:	460b      	mov	r3, r1
 802289e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80228a0:	4b0c      	ldr	r3, [pc, #48]	; (80228d4 <BSP_LCD_DrawPixel+0x44>)
 80228a2:	681b      	ldr	r3, [r3, #0]
 80228a4:	4a0c      	ldr	r2, [pc, #48]	; (80228d8 <BSP_LCD_DrawPixel+0x48>)
 80228a6:	2134      	movs	r1, #52	; 0x34
 80228a8:	fb01 f303 	mul.w	r3, r1, r3
 80228ac:	4413      	add	r3, r2
 80228ae:	335c      	adds	r3, #92	; 0x5c
 80228b0:	681c      	ldr	r4, [r3, #0]
 80228b2:	88bd      	ldrh	r5, [r7, #4]
 80228b4:	f7ff fcb2 	bl	802221c <BSP_LCD_GetXSize>
 80228b8:	4603      	mov	r3, r0
 80228ba:	fb03 f205 	mul.w	r2, r3, r5
 80228be:	88fb      	ldrh	r3, [r7, #6]
 80228c0:	4413      	add	r3, r2
 80228c2:	009b      	lsls	r3, r3, #2
 80228c4:	4423      	add	r3, r4
 80228c6:	461a      	mov	r2, r3
 80228c8:	683b      	ldr	r3, [r7, #0]
 80228ca:	6013      	str	r3, [r2, #0]
}
 80228cc:	bf00      	nop
 80228ce:	3708      	adds	r7, #8
 80228d0:	46bd      	mov	sp, r7
 80228d2:	bdb0      	pop	{r4, r5, r7, pc}
 80228d4:	200009d8 	.word	0x200009d8
 80228d8:	200008c0 	.word	0x200008c0

080228dc <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80228dc:	b580      	push	{r7, lr}
 80228de:	b088      	sub	sp, #32
 80228e0:	af00      	add	r7, sp, #0
 80228e2:	4603      	mov	r3, r0
 80228e4:	603a      	str	r2, [r7, #0]
 80228e6:	80fb      	strh	r3, [r7, #6]
 80228e8:	460b      	mov	r3, r1
 80228ea:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80228ec:	2300      	movs	r3, #0
 80228ee:	61fb      	str	r3, [r7, #28]
 80228f0:	2300      	movs	r3, #0
 80228f2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80228f4:	2300      	movs	r3, #0
 80228f6:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80228f8:	4b53      	ldr	r3, [pc, #332]	; (8022a48 <DrawChar+0x16c>)
 80228fa:	681a      	ldr	r2, [r3, #0]
 80228fc:	4953      	ldr	r1, [pc, #332]	; (8022a4c <DrawChar+0x170>)
 80228fe:	4613      	mov	r3, r2
 8022900:	005b      	lsls	r3, r3, #1
 8022902:	4413      	add	r3, r2
 8022904:	009b      	lsls	r3, r3, #2
 8022906:	440b      	add	r3, r1
 8022908:	3308      	adds	r3, #8
 802290a:	681b      	ldr	r3, [r3, #0]
 802290c:	88db      	ldrh	r3, [r3, #6]
 802290e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8022910:	4b4d      	ldr	r3, [pc, #308]	; (8022a48 <DrawChar+0x16c>)
 8022912:	681a      	ldr	r2, [r3, #0]
 8022914:	494d      	ldr	r1, [pc, #308]	; (8022a4c <DrawChar+0x170>)
 8022916:	4613      	mov	r3, r2
 8022918:	005b      	lsls	r3, r3, #1
 802291a:	4413      	add	r3, r2
 802291c:	009b      	lsls	r3, r3, #2
 802291e:	440b      	add	r3, r1
 8022920:	3308      	adds	r3, #8
 8022922:	681b      	ldr	r3, [r3, #0]
 8022924:	889b      	ldrh	r3, [r3, #4]
 8022926:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8022928:	8a3b      	ldrh	r3, [r7, #16]
 802292a:	3307      	adds	r3, #7
 802292c:	2b00      	cmp	r3, #0
 802292e:	da00      	bge.n	8022932 <DrawChar+0x56>
 8022930:	3307      	adds	r3, #7
 8022932:	10db      	asrs	r3, r3, #3
 8022934:	b2db      	uxtb	r3, r3
 8022936:	00db      	lsls	r3, r3, #3
 8022938:	b2da      	uxtb	r2, r3
 802293a:	8a3b      	ldrh	r3, [r7, #16]
 802293c:	b2db      	uxtb	r3, r3
 802293e:	1ad3      	subs	r3, r2, r3
 8022940:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8022942:	2300      	movs	r3, #0
 8022944:	61fb      	str	r3, [r7, #28]
 8022946:	e076      	b.n	8022a36 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8022948:	8a3b      	ldrh	r3, [r7, #16]
 802294a:	3307      	adds	r3, #7
 802294c:	2b00      	cmp	r3, #0
 802294e:	da00      	bge.n	8022952 <DrawChar+0x76>
 8022950:	3307      	adds	r3, #7
 8022952:	10db      	asrs	r3, r3, #3
 8022954:	461a      	mov	r2, r3
 8022956:	69fb      	ldr	r3, [r7, #28]
 8022958:	fb02 f303 	mul.w	r3, r2, r3
 802295c:	683a      	ldr	r2, [r7, #0]
 802295e:	4413      	add	r3, r2
 8022960:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8022962:	8a3b      	ldrh	r3, [r7, #16]
 8022964:	3307      	adds	r3, #7
 8022966:	2b00      	cmp	r3, #0
 8022968:	da00      	bge.n	802296c <DrawChar+0x90>
 802296a:	3307      	adds	r3, #7
 802296c:	10db      	asrs	r3, r3, #3
 802296e:	2b01      	cmp	r3, #1
 8022970:	d002      	beq.n	8022978 <DrawChar+0x9c>
 8022972:	2b02      	cmp	r3, #2
 8022974:	d004      	beq.n	8022980 <DrawChar+0xa4>
 8022976:	e00c      	b.n	8022992 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8022978:	68bb      	ldr	r3, [r7, #8]
 802297a:	781b      	ldrb	r3, [r3, #0]
 802297c:	617b      	str	r3, [r7, #20]
      break;
 802297e:	e016      	b.n	80229ae <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8022980:	68bb      	ldr	r3, [r7, #8]
 8022982:	781b      	ldrb	r3, [r3, #0]
 8022984:	021b      	lsls	r3, r3, #8
 8022986:	68ba      	ldr	r2, [r7, #8]
 8022988:	3201      	adds	r2, #1
 802298a:	7812      	ldrb	r2, [r2, #0]
 802298c:	4313      	orrs	r3, r2
 802298e:	617b      	str	r3, [r7, #20]
      break;
 8022990:	e00d      	b.n	80229ae <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8022992:	68bb      	ldr	r3, [r7, #8]
 8022994:	781b      	ldrb	r3, [r3, #0]
 8022996:	041a      	lsls	r2, r3, #16
 8022998:	68bb      	ldr	r3, [r7, #8]
 802299a:	3301      	adds	r3, #1
 802299c:	781b      	ldrb	r3, [r3, #0]
 802299e:	021b      	lsls	r3, r3, #8
 80229a0:	4313      	orrs	r3, r2
 80229a2:	68ba      	ldr	r2, [r7, #8]
 80229a4:	3202      	adds	r2, #2
 80229a6:	7812      	ldrb	r2, [r2, #0]
 80229a8:	4313      	orrs	r3, r2
 80229aa:	617b      	str	r3, [r7, #20]
      break;
 80229ac:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80229ae:	2300      	movs	r3, #0
 80229b0:	61bb      	str	r3, [r7, #24]
 80229b2:	e036      	b.n	8022a22 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80229b4:	8a3a      	ldrh	r2, [r7, #16]
 80229b6:	69bb      	ldr	r3, [r7, #24]
 80229b8:	1ad2      	subs	r2, r2, r3
 80229ba:	7bfb      	ldrb	r3, [r7, #15]
 80229bc:	4413      	add	r3, r2
 80229be:	3b01      	subs	r3, #1
 80229c0:	2201      	movs	r2, #1
 80229c2:	fa02 f303 	lsl.w	r3, r2, r3
 80229c6:	461a      	mov	r2, r3
 80229c8:	697b      	ldr	r3, [r7, #20]
 80229ca:	4013      	ands	r3, r2
 80229cc:	2b00      	cmp	r3, #0
 80229ce:	d012      	beq.n	80229f6 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80229d0:	69bb      	ldr	r3, [r7, #24]
 80229d2:	b29a      	uxth	r2, r3
 80229d4:	88fb      	ldrh	r3, [r7, #6]
 80229d6:	4413      	add	r3, r2
 80229d8:	b298      	uxth	r0, r3
 80229da:	4b1b      	ldr	r3, [pc, #108]	; (8022a48 <DrawChar+0x16c>)
 80229dc:	681a      	ldr	r2, [r3, #0]
 80229de:	491b      	ldr	r1, [pc, #108]	; (8022a4c <DrawChar+0x170>)
 80229e0:	4613      	mov	r3, r2
 80229e2:	005b      	lsls	r3, r3, #1
 80229e4:	4413      	add	r3, r2
 80229e6:	009b      	lsls	r3, r3, #2
 80229e8:	440b      	add	r3, r1
 80229ea:	681a      	ldr	r2, [r3, #0]
 80229ec:	88bb      	ldrh	r3, [r7, #4]
 80229ee:	4619      	mov	r1, r3
 80229f0:	f7ff ff4e 	bl	8022890 <BSP_LCD_DrawPixel>
 80229f4:	e012      	b.n	8022a1c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80229f6:	69bb      	ldr	r3, [r7, #24]
 80229f8:	b29a      	uxth	r2, r3
 80229fa:	88fb      	ldrh	r3, [r7, #6]
 80229fc:	4413      	add	r3, r2
 80229fe:	b298      	uxth	r0, r3
 8022a00:	4b11      	ldr	r3, [pc, #68]	; (8022a48 <DrawChar+0x16c>)
 8022a02:	681a      	ldr	r2, [r3, #0]
 8022a04:	4911      	ldr	r1, [pc, #68]	; (8022a4c <DrawChar+0x170>)
 8022a06:	4613      	mov	r3, r2
 8022a08:	005b      	lsls	r3, r3, #1
 8022a0a:	4413      	add	r3, r2
 8022a0c:	009b      	lsls	r3, r3, #2
 8022a0e:	440b      	add	r3, r1
 8022a10:	3304      	adds	r3, #4
 8022a12:	681a      	ldr	r2, [r3, #0]
 8022a14:	88bb      	ldrh	r3, [r7, #4]
 8022a16:	4619      	mov	r1, r3
 8022a18:	f7ff ff3a 	bl	8022890 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8022a1c:	69bb      	ldr	r3, [r7, #24]
 8022a1e:	3301      	adds	r3, #1
 8022a20:	61bb      	str	r3, [r7, #24]
 8022a22:	8a3b      	ldrh	r3, [r7, #16]
 8022a24:	69ba      	ldr	r2, [r7, #24]
 8022a26:	429a      	cmp	r2, r3
 8022a28:	d3c4      	bcc.n	80229b4 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8022a2a:	88bb      	ldrh	r3, [r7, #4]
 8022a2c:	3301      	adds	r3, #1
 8022a2e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8022a30:	69fb      	ldr	r3, [r7, #28]
 8022a32:	3301      	adds	r3, #1
 8022a34:	61fb      	str	r3, [r7, #28]
 8022a36:	8a7b      	ldrh	r3, [r7, #18]
 8022a38:	69fa      	ldr	r2, [r7, #28]
 8022a3a:	429a      	cmp	r2, r3
 8022a3c:	d384      	bcc.n	8022948 <DrawChar+0x6c>
  }
}
 8022a3e:	bf00      	nop
 8022a40:	bf00      	nop
 8022a42:	3720      	adds	r7, #32
 8022a44:	46bd      	mov	sp, r7
 8022a46:	bd80      	pop	{r7, pc}
 8022a48:	200009d8 	.word	0x200009d8
 8022a4c:	200009dc 	.word	0x200009dc

08022a50 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8022a50:	b580      	push	{r7, lr}
 8022a52:	b086      	sub	sp, #24
 8022a54:	af02      	add	r7, sp, #8
 8022a56:	60f8      	str	r0, [r7, #12]
 8022a58:	60b9      	str	r1, [r7, #8]
 8022a5a:	607a      	str	r2, [r7, #4]
 8022a5c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8022a5e:	4b16      	ldr	r3, [pc, #88]	; (8022ab8 <FillBuffer+0x68>)
 8022a60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8022a64:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8022a66:	4b14      	ldr	r3, [pc, #80]	; (8022ab8 <FillBuffer+0x68>)
 8022a68:	2200      	movs	r2, #0
 8022a6a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8022a6c:	4a12      	ldr	r2, [pc, #72]	; (8022ab8 <FillBuffer+0x68>)
 8022a6e:	69bb      	ldr	r3, [r7, #24]
 8022a70:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8022a72:	4b11      	ldr	r3, [pc, #68]	; (8022ab8 <FillBuffer+0x68>)
 8022a74:	4a11      	ldr	r2, [pc, #68]	; (8022abc <FillBuffer+0x6c>)
 8022a76:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8022a78:	480f      	ldr	r0, [pc, #60]	; (8022ab8 <FillBuffer+0x68>)
 8022a7a:	f000 fd9f 	bl	80235bc <HAL_DMA2D_Init>
 8022a7e:	4603      	mov	r3, r0
 8022a80:	2b00      	cmp	r3, #0
 8022a82:	d115      	bne.n	8022ab0 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8022a84:	68f9      	ldr	r1, [r7, #12]
 8022a86:	480c      	ldr	r0, [pc, #48]	; (8022ab8 <FillBuffer+0x68>)
 8022a88:	f001 f806 	bl	8023a98 <HAL_DMA2D_ConfigLayer>
 8022a8c:	4603      	mov	r3, r0
 8022a8e:	2b00      	cmp	r3, #0
 8022a90:	d10e      	bne.n	8022ab0 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8022a92:	68ba      	ldr	r2, [r7, #8]
 8022a94:	683b      	ldr	r3, [r7, #0]
 8022a96:	9300      	str	r3, [sp, #0]
 8022a98:	687b      	ldr	r3, [r7, #4]
 8022a9a:	69f9      	ldr	r1, [r7, #28]
 8022a9c:	4806      	ldr	r0, [pc, #24]	; (8022ab8 <FillBuffer+0x68>)
 8022a9e:	f000 fdd6 	bl	802364e <HAL_DMA2D_Start>
 8022aa2:	4603      	mov	r3, r0
 8022aa4:	2b00      	cmp	r3, #0
 8022aa6:	d103      	bne.n	8022ab0 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8022aa8:	210a      	movs	r1, #10
 8022aaa:	4803      	ldr	r0, [pc, #12]	; (8022ab8 <FillBuffer+0x68>)
 8022aac:	f000 fdfa 	bl	80236a4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8022ab0:	bf00      	nop
 8022ab2:	3710      	adds	r7, #16
 8022ab4:	46bd      	mov	sp, r7
 8022ab6:	bd80      	pop	{r7, pc}
 8022ab8:	20000968 	.word	0x20000968
 8022abc:	4002b000 	.word	0x4002b000

08022ac0 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8022ac0:	b580      	push	{r7, lr}
 8022ac2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8022ac4:	4b29      	ldr	r3, [pc, #164]	; (8022b6c <BSP_SDRAM_Init+0xac>)
 8022ac6:	4a2a      	ldr	r2, [pc, #168]	; (8022b70 <BSP_SDRAM_Init+0xb0>)
 8022ac8:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8022aca:	4b2a      	ldr	r3, [pc, #168]	; (8022b74 <BSP_SDRAM_Init+0xb4>)
 8022acc:	2202      	movs	r2, #2
 8022ace:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8022ad0:	4b28      	ldr	r3, [pc, #160]	; (8022b74 <BSP_SDRAM_Init+0xb4>)
 8022ad2:	2207      	movs	r2, #7
 8022ad4:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8022ad6:	4b27      	ldr	r3, [pc, #156]	; (8022b74 <BSP_SDRAM_Init+0xb4>)
 8022ad8:	2204      	movs	r2, #4
 8022ada:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8022adc:	4b25      	ldr	r3, [pc, #148]	; (8022b74 <BSP_SDRAM_Init+0xb4>)
 8022ade:	2207      	movs	r2, #7
 8022ae0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8022ae2:	4b24      	ldr	r3, [pc, #144]	; (8022b74 <BSP_SDRAM_Init+0xb4>)
 8022ae4:	2202      	movs	r2, #2
 8022ae6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8022ae8:	4b22      	ldr	r3, [pc, #136]	; (8022b74 <BSP_SDRAM_Init+0xb4>)
 8022aea:	2202      	movs	r2, #2
 8022aec:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8022aee:	4b21      	ldr	r3, [pc, #132]	; (8022b74 <BSP_SDRAM_Init+0xb4>)
 8022af0:	2202      	movs	r2, #2
 8022af2:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8022af4:	4b1d      	ldr	r3, [pc, #116]	; (8022b6c <BSP_SDRAM_Init+0xac>)
 8022af6:	2201      	movs	r2, #1
 8022af8:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8022afa:	4b1c      	ldr	r3, [pc, #112]	; (8022b6c <BSP_SDRAM_Init+0xac>)
 8022afc:	2200      	movs	r2, #0
 8022afe:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8022b00:	4b1a      	ldr	r3, [pc, #104]	; (8022b6c <BSP_SDRAM_Init+0xac>)
 8022b02:	2204      	movs	r2, #4
 8022b04:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8022b06:	4b19      	ldr	r3, [pc, #100]	; (8022b6c <BSP_SDRAM_Init+0xac>)
 8022b08:	2210      	movs	r2, #16
 8022b0a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8022b0c:	4b17      	ldr	r3, [pc, #92]	; (8022b6c <BSP_SDRAM_Init+0xac>)
 8022b0e:	2240      	movs	r2, #64	; 0x40
 8022b10:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8022b12:	4b16      	ldr	r3, [pc, #88]	; (8022b6c <BSP_SDRAM_Init+0xac>)
 8022b14:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8022b18:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8022b1a:	4b14      	ldr	r3, [pc, #80]	; (8022b6c <BSP_SDRAM_Init+0xac>)
 8022b1c:	2200      	movs	r2, #0
 8022b1e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8022b20:	4b12      	ldr	r3, [pc, #72]	; (8022b6c <BSP_SDRAM_Init+0xac>)
 8022b22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8022b26:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8022b28:	4b10      	ldr	r3, [pc, #64]	; (8022b6c <BSP_SDRAM_Init+0xac>)
 8022b2a:	2200      	movs	r2, #0
 8022b2c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8022b2e:	4b0f      	ldr	r3, [pc, #60]	; (8022b6c <BSP_SDRAM_Init+0xac>)
 8022b30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8022b34:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8022b36:	2100      	movs	r1, #0
 8022b38:	480c      	ldr	r0, [pc, #48]	; (8022b6c <BSP_SDRAM_Init+0xac>)
 8022b3a:	f000 f87f 	bl	8022c3c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8022b3e:	490d      	ldr	r1, [pc, #52]	; (8022b74 <BSP_SDRAM_Init+0xb4>)
 8022b40:	480a      	ldr	r0, [pc, #40]	; (8022b6c <BSP_SDRAM_Init+0xac>)
 8022b42:	f004 fc25 	bl	8027390 <HAL_SDRAM_Init>
 8022b46:	4603      	mov	r3, r0
 8022b48:	2b00      	cmp	r3, #0
 8022b4a:	d003      	beq.n	8022b54 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8022b4c:	4b0a      	ldr	r3, [pc, #40]	; (8022b78 <BSP_SDRAM_Init+0xb8>)
 8022b4e:	2201      	movs	r2, #1
 8022b50:	701a      	strb	r2, [r3, #0]
 8022b52:	e002      	b.n	8022b5a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8022b54:	4b08      	ldr	r3, [pc, #32]	; (8022b78 <BSP_SDRAM_Init+0xb8>)
 8022b56:	2200      	movs	r2, #0
 8022b58:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8022b5a:	f240 506a 	movw	r0, #1386	; 0x56a
 8022b5e:	f000 f80d 	bl	8022b7c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8022b62:	4b05      	ldr	r3, [pc, #20]	; (8022b78 <BSP_SDRAM_Init+0xb8>)
 8022b64:	781b      	ldrb	r3, [r3, #0]
}
 8022b66:	4618      	mov	r0, r3
 8022b68:	bd80      	pop	{r7, pc}
 8022b6a:	bf00      	nop
 8022b6c:	200009f8 	.word	0x200009f8
 8022b70:	a0000140 	.word	0xa0000140
 8022b74:	20000a2c 	.word	0x20000a2c
 8022b78:	20000050 	.word	0x20000050

08022b7c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8022b7c:	b580      	push	{r7, lr}
 8022b7e:	b084      	sub	sp, #16
 8022b80:	af00      	add	r7, sp, #0
 8022b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8022b84:	2300      	movs	r3, #0
 8022b86:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8022b88:	4b2a      	ldr	r3, [pc, #168]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022b8a:	2201      	movs	r2, #1
 8022b8c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8022b8e:	4b29      	ldr	r3, [pc, #164]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022b90:	2208      	movs	r2, #8
 8022b92:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8022b94:	4b27      	ldr	r3, [pc, #156]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022b96:	2201      	movs	r2, #1
 8022b98:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8022b9a:	4b26      	ldr	r3, [pc, #152]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022b9c:	2200      	movs	r2, #0
 8022b9e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8022ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022ba4:	4923      	ldr	r1, [pc, #140]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022ba6:	4824      	ldr	r0, [pc, #144]	; (8022c38 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022ba8:	f004 fc26 	bl	80273f8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8022bac:	2001      	movs	r0, #1
 8022bae:	f000 f993 	bl	8022ed8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8022bb2:	4b20      	ldr	r3, [pc, #128]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022bb4:	2202      	movs	r2, #2
 8022bb6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8022bb8:	4b1e      	ldr	r3, [pc, #120]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022bba:	2208      	movs	r2, #8
 8022bbc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8022bbe:	4b1d      	ldr	r3, [pc, #116]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022bc0:	2201      	movs	r2, #1
 8022bc2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8022bc4:	4b1b      	ldr	r3, [pc, #108]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022bc6:	2200      	movs	r2, #0
 8022bc8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8022bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022bce:	4919      	ldr	r1, [pc, #100]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022bd0:	4819      	ldr	r0, [pc, #100]	; (8022c38 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022bd2:	f004 fc11 	bl	80273f8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8022bd6:	4b17      	ldr	r3, [pc, #92]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022bd8:	2203      	movs	r2, #3
 8022bda:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8022bdc:	4b15      	ldr	r3, [pc, #84]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022bde:	2208      	movs	r2, #8
 8022be0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8022be2:	4b14      	ldr	r3, [pc, #80]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022be4:	2204      	movs	r2, #4
 8022be6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8022be8:	4b12      	ldr	r3, [pc, #72]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022bea:	2200      	movs	r2, #0
 8022bec:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8022bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022bf2:	4910      	ldr	r1, [pc, #64]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022bf4:	4810      	ldr	r0, [pc, #64]	; (8022c38 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022bf6:	f004 fbff 	bl	80273f8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8022bfa:	f44f 730c 	mov.w	r3, #560	; 0x230
 8022bfe:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8022c00:	4b0c      	ldr	r3, [pc, #48]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022c02:	2204      	movs	r2, #4
 8022c04:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8022c06:	4b0b      	ldr	r3, [pc, #44]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022c08:	2208      	movs	r2, #8
 8022c0a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8022c0c:	4b09      	ldr	r3, [pc, #36]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022c0e:	2201      	movs	r2, #1
 8022c10:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8022c12:	68fb      	ldr	r3, [r7, #12]
 8022c14:	4a07      	ldr	r2, [pc, #28]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022c16:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8022c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022c1c:	4905      	ldr	r1, [pc, #20]	; (8022c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022c1e:	4806      	ldr	r0, [pc, #24]	; (8022c38 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022c20:	f004 fbea 	bl	80273f8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8022c24:	6879      	ldr	r1, [r7, #4]
 8022c26:	4804      	ldr	r0, [pc, #16]	; (8022c38 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022c28:	f004 fc1b 	bl	8027462 <HAL_SDRAM_ProgramRefreshRate>
}
 8022c2c:	bf00      	nop
 8022c2e:	3710      	adds	r7, #16
 8022c30:	46bd      	mov	sp, r7
 8022c32:	bd80      	pop	{r7, pc}
 8022c34:	20000a48 	.word	0x20000a48
 8022c38:	200009f8 	.word	0x200009f8

08022c3c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8022c3c:	b580      	push	{r7, lr}
 8022c3e:	b090      	sub	sp, #64	; 0x40
 8022c40:	af00      	add	r7, sp, #0
 8022c42:	6078      	str	r0, [r7, #4]
 8022c44:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8022c46:	687b      	ldr	r3, [r7, #4]
 8022c48:	2b00      	cmp	r3, #0
 8022c4a:	f000 80ec 	beq.w	8022e26 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8022c4e:	2300      	movs	r3, #0
 8022c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8022c52:	4b77      	ldr	r3, [pc, #476]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022c56:	4a76      	ldr	r2, [pc, #472]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022c58:	f043 0301 	orr.w	r3, r3, #1
 8022c5c:	6393      	str	r3, [r2, #56]	; 0x38
 8022c5e:	4b74      	ldr	r3, [pc, #464]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022c62:	f003 0301 	and.w	r3, r3, #1
 8022c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8022c68:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8022c6a:	2300      	movs	r3, #0
 8022c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8022c6e:	4b70      	ldr	r3, [pc, #448]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c72:	4a6f      	ldr	r2, [pc, #444]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8022c78:	6313      	str	r3, [r2, #48]	; 0x30
 8022c7a:	4b6d      	ldr	r3, [pc, #436]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022c82:	627b      	str	r3, [r7, #36]	; 0x24
 8022c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8022c86:	2300      	movs	r3, #0
 8022c88:	623b      	str	r3, [r7, #32]
 8022c8a:	4b69      	ldr	r3, [pc, #420]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c8e:	4a68      	ldr	r2, [pc, #416]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022c90:	f043 0302 	orr.w	r3, r3, #2
 8022c94:	6313      	str	r3, [r2, #48]	; 0x30
 8022c96:	4b66      	ldr	r3, [pc, #408]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c9a:	f003 0302 	and.w	r3, r3, #2
 8022c9e:	623b      	str	r3, [r7, #32]
 8022ca0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8022ca2:	2300      	movs	r3, #0
 8022ca4:	61fb      	str	r3, [r7, #28]
 8022ca6:	4b62      	ldr	r3, [pc, #392]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022caa:	4a61      	ldr	r2, [pc, #388]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022cac:	f043 0304 	orr.w	r3, r3, #4
 8022cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8022cb2:	4b5f      	ldr	r3, [pc, #380]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022cb6:	f003 0304 	and.w	r3, r3, #4
 8022cba:	61fb      	str	r3, [r7, #28]
 8022cbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8022cbe:	2300      	movs	r3, #0
 8022cc0:	61bb      	str	r3, [r7, #24]
 8022cc2:	4b5b      	ldr	r3, [pc, #364]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022cc6:	4a5a      	ldr	r2, [pc, #360]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022cc8:	f043 0308 	orr.w	r3, r3, #8
 8022ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8022cce:	4b58      	ldr	r3, [pc, #352]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022cd2:	f003 0308 	and.w	r3, r3, #8
 8022cd6:	61bb      	str	r3, [r7, #24]
 8022cd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8022cda:	2300      	movs	r3, #0
 8022cdc:	617b      	str	r3, [r7, #20]
 8022cde:	4b54      	ldr	r3, [pc, #336]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ce2:	4a53      	ldr	r2, [pc, #332]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022ce4:	f043 0310 	orr.w	r3, r3, #16
 8022ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8022cea:	4b51      	ldr	r3, [pc, #324]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022cee:	f003 0310 	and.w	r3, r3, #16
 8022cf2:	617b      	str	r3, [r7, #20]
 8022cf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8022cf6:	2300      	movs	r3, #0
 8022cf8:	613b      	str	r3, [r7, #16]
 8022cfa:	4b4d      	ldr	r3, [pc, #308]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022cfe:	4a4c      	ldr	r2, [pc, #304]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022d00:	f043 0320 	orr.w	r3, r3, #32
 8022d04:	6313      	str	r3, [r2, #48]	; 0x30
 8022d06:	4b4a      	ldr	r3, [pc, #296]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022d0a:	f003 0320 	and.w	r3, r3, #32
 8022d0e:	613b      	str	r3, [r7, #16]
 8022d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8022d12:	2300      	movs	r3, #0
 8022d14:	60fb      	str	r3, [r7, #12]
 8022d16:	4b46      	ldr	r3, [pc, #280]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022d1a:	4a45      	ldr	r2, [pc, #276]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022d20:	6313      	str	r3, [r2, #48]	; 0x30
 8022d22:	4b43      	ldr	r3, [pc, #268]	; (8022e30 <BSP_SDRAM_MspInit+0x1f4>)
 8022d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022d2a:	60fb      	str	r3, [r7, #12]
 8022d2c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8022d2e:	2302      	movs	r3, #2
 8022d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8022d32:	2302      	movs	r3, #2
 8022d34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8022d36:	2300      	movs	r3, #0
 8022d38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8022d3a:	230c      	movs	r3, #12
 8022d3c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8022d3e:	2360      	movs	r3, #96	; 0x60
 8022d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8022d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022d46:	4619      	mov	r1, r3
 8022d48:	483a      	ldr	r0, [pc, #232]	; (8022e34 <BSP_SDRAM_MspInit+0x1f8>)
 8022d4a:	f000 ffd3 	bl	8023cf4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8022d4e:	2301      	movs	r3, #1
 8022d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8022d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022d56:	4619      	mov	r1, r3
 8022d58:	4837      	ldr	r0, [pc, #220]	; (8022e38 <BSP_SDRAM_MspInit+0x1fc>)
 8022d5a:	f000 ffcb 	bl	8023cf4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8022d5e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8022d62:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8022d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022d68:	4619      	mov	r1, r3
 8022d6a:	4834      	ldr	r0, [pc, #208]	; (8022e3c <BSP_SDRAM_MspInit+0x200>)
 8022d6c:	f000 ffc2 	bl	8023cf4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8022d70:	f64f 7383 	movw	r3, #65411	; 0xff83
 8022d74:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8022d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022d7a:	4619      	mov	r1, r3
 8022d7c:	4830      	ldr	r0, [pc, #192]	; (8022e40 <BSP_SDRAM_MspInit+0x204>)
 8022d7e:	f000 ffb9 	bl	8023cf4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8022d82:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8022d86:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8022d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022d8c:	4619      	mov	r1, r3
 8022d8e:	482d      	ldr	r0, [pc, #180]	; (8022e44 <BSP_SDRAM_MspInit+0x208>)
 8022d90:	f000 ffb0 	bl	8023cf4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8022d94:	f248 1333 	movw	r3, #33075	; 0x8133
 8022d98:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022d9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022d9e:	4619      	mov	r1, r3
 8022da0:	4829      	ldr	r0, [pc, #164]	; (8022e48 <BSP_SDRAM_MspInit+0x20c>)
 8022da2:	f000 ffa7 	bl	8023cf4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8022da6:	4b29      	ldr	r3, [pc, #164]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022da8:	2200      	movs	r2, #0
 8022daa:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8022dac:	4b27      	ldr	r3, [pc, #156]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022dae:	2280      	movs	r2, #128	; 0x80
 8022db0:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8022db2:	4b26      	ldr	r3, [pc, #152]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8022db8:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8022dba:	4b24      	ldr	r3, [pc, #144]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022dbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8022dc0:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8022dc2:	4b22      	ldr	r3, [pc, #136]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022dc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8022dc8:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8022dca:	4b20      	ldr	r3, [pc, #128]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022dcc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8022dd0:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8022dd2:	4b1e      	ldr	r3, [pc, #120]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022dd4:	2200      	movs	r2, #0
 8022dd6:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8022dd8:	4b1c      	ldr	r3, [pc, #112]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022dda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8022dde:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8022de0:	4b1a      	ldr	r3, [pc, #104]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022de2:	2200      	movs	r2, #0
 8022de4:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8022de6:	4b19      	ldr	r3, [pc, #100]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022de8:	2203      	movs	r2, #3
 8022dea:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8022dec:	4b17      	ldr	r3, [pc, #92]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022dee:	2200      	movs	r2, #0
 8022df0:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8022df2:	4b16      	ldr	r3, [pc, #88]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022df4:	2200      	movs	r2, #0
 8022df6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8022df8:	4b14      	ldr	r3, [pc, #80]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022dfa:	4a15      	ldr	r2, [pc, #84]	; (8022e50 <BSP_SDRAM_MspInit+0x214>)
 8022dfc:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8022dfe:	687b      	ldr	r3, [r7, #4]
 8022e00:	4a12      	ldr	r2, [pc, #72]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022e02:	631a      	str	r2, [r3, #48]	; 0x30
 8022e04:	4a11      	ldr	r2, [pc, #68]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022e06:	687b      	ldr	r3, [r7, #4]
 8022e08:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8022e0a:	4810      	ldr	r0, [pc, #64]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022e0c:	f000 fa34 	bl	8023278 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8022e10:	480e      	ldr	r0, [pc, #56]	; (8022e4c <BSP_SDRAM_MspInit+0x210>)
 8022e12:	f000 f983 	bl	802311c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8022e16:	2200      	movs	r2, #0
 8022e18:	210f      	movs	r1, #15
 8022e1a:	2038      	movs	r0, #56	; 0x38
 8022e1c:	f000 f938 	bl	8023090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8022e20:	2038      	movs	r0, #56	; 0x38
 8022e22:	f000 f951 	bl	80230c8 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8022e26:	bf00      	nop
 8022e28:	3740      	adds	r7, #64	; 0x40
 8022e2a:	46bd      	mov	sp, r7
 8022e2c:	bd80      	pop	{r7, pc}
 8022e2e:	bf00      	nop
 8022e30:	40023800 	.word	0x40023800
 8022e34:	40020400 	.word	0x40020400
 8022e38:	40020800 	.word	0x40020800
 8022e3c:	40020c00 	.word	0x40020c00
 8022e40:	40021000 	.word	0x40021000
 8022e44:	40021400 	.word	0x40021400
 8022e48:	40021800 	.word	0x40021800
 8022e4c:	20000a58 	.word	0x20000a58
 8022e50:	40026410 	.word	0x40026410

08022e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8022e54:	b580      	push	{r7, lr}
 8022e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8022e58:	4b0e      	ldr	r3, [pc, #56]	; (8022e94 <HAL_Init+0x40>)
 8022e5a:	681b      	ldr	r3, [r3, #0]
 8022e5c:	4a0d      	ldr	r2, [pc, #52]	; (8022e94 <HAL_Init+0x40>)
 8022e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8022e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8022e64:	4b0b      	ldr	r3, [pc, #44]	; (8022e94 <HAL_Init+0x40>)
 8022e66:	681b      	ldr	r3, [r3, #0]
 8022e68:	4a0a      	ldr	r2, [pc, #40]	; (8022e94 <HAL_Init+0x40>)
 8022e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8022e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8022e70:	4b08      	ldr	r3, [pc, #32]	; (8022e94 <HAL_Init+0x40>)
 8022e72:	681b      	ldr	r3, [r3, #0]
 8022e74:	4a07      	ldr	r2, [pc, #28]	; (8022e94 <HAL_Init+0x40>)
 8022e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8022e7c:	2003      	movs	r0, #3
 8022e7e:	f000 f8fc 	bl	802307a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8022e82:	200f      	movs	r0, #15
 8022e84:	f7fe fbee 	bl	8021664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8022e88:	f7fe f814 	bl	8020eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8022e8c:	2300      	movs	r3, #0
}
 8022e8e:	4618      	mov	r0, r3
 8022e90:	bd80      	pop	{r7, pc}
 8022e92:	bf00      	nop
 8022e94:	40023c00 	.word	0x40023c00

08022e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8022e98:	b480      	push	{r7}
 8022e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8022e9c:	4b06      	ldr	r3, [pc, #24]	; (8022eb8 <HAL_IncTick+0x20>)
 8022e9e:	781b      	ldrb	r3, [r3, #0]
 8022ea0:	461a      	mov	r2, r3
 8022ea2:	4b06      	ldr	r3, [pc, #24]	; (8022ebc <HAL_IncTick+0x24>)
 8022ea4:	681b      	ldr	r3, [r3, #0]
 8022ea6:	4413      	add	r3, r2
 8022ea8:	4a04      	ldr	r2, [pc, #16]	; (8022ebc <HAL_IncTick+0x24>)
 8022eaa:	6013      	str	r3, [r2, #0]
}
 8022eac:	bf00      	nop
 8022eae:	46bd      	mov	sp, r7
 8022eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022eb4:	4770      	bx	lr
 8022eb6:	bf00      	nop
 8022eb8:	20000058 	.word	0x20000058
 8022ebc:	20000ab8 	.word	0x20000ab8

08022ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8022ec0:	b480      	push	{r7}
 8022ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8022ec4:	4b03      	ldr	r3, [pc, #12]	; (8022ed4 <HAL_GetTick+0x14>)
 8022ec6:	681b      	ldr	r3, [r3, #0]
}
 8022ec8:	4618      	mov	r0, r3
 8022eca:	46bd      	mov	sp, r7
 8022ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ed0:	4770      	bx	lr
 8022ed2:	bf00      	nop
 8022ed4:	20000ab8 	.word	0x20000ab8

08022ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8022ed8:	b580      	push	{r7, lr}
 8022eda:	b084      	sub	sp, #16
 8022edc:	af00      	add	r7, sp, #0
 8022ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8022ee0:	f7ff ffee 	bl	8022ec0 <HAL_GetTick>
 8022ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8022ee6:	687b      	ldr	r3, [r7, #4]
 8022ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8022eea:	68fb      	ldr	r3, [r7, #12]
 8022eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022ef0:	d005      	beq.n	8022efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8022ef2:	4b0a      	ldr	r3, [pc, #40]	; (8022f1c <HAL_Delay+0x44>)
 8022ef4:	781b      	ldrb	r3, [r3, #0]
 8022ef6:	461a      	mov	r2, r3
 8022ef8:	68fb      	ldr	r3, [r7, #12]
 8022efa:	4413      	add	r3, r2
 8022efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8022efe:	bf00      	nop
 8022f00:	f7ff ffde 	bl	8022ec0 <HAL_GetTick>
 8022f04:	4602      	mov	r2, r0
 8022f06:	68bb      	ldr	r3, [r7, #8]
 8022f08:	1ad3      	subs	r3, r2, r3
 8022f0a:	68fa      	ldr	r2, [r7, #12]
 8022f0c:	429a      	cmp	r2, r3
 8022f0e:	d8f7      	bhi.n	8022f00 <HAL_Delay+0x28>
  {
  }
}
 8022f10:	bf00      	nop
 8022f12:	bf00      	nop
 8022f14:	3710      	adds	r7, #16
 8022f16:	46bd      	mov	sp, r7
 8022f18:	bd80      	pop	{r7, pc}
 8022f1a:	bf00      	nop
 8022f1c:	20000058 	.word	0x20000058

08022f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022f20:	b480      	push	{r7}
 8022f22:	b085      	sub	sp, #20
 8022f24:	af00      	add	r7, sp, #0
 8022f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8022f28:	687b      	ldr	r3, [r7, #4]
 8022f2a:	f003 0307 	and.w	r3, r3, #7
 8022f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8022f30:	4b0c      	ldr	r3, [pc, #48]	; (8022f64 <__NVIC_SetPriorityGrouping+0x44>)
 8022f32:	68db      	ldr	r3, [r3, #12]
 8022f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8022f36:	68ba      	ldr	r2, [r7, #8]
 8022f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8022f3c:	4013      	ands	r3, r2
 8022f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8022f40:	68fb      	ldr	r3, [r7, #12]
 8022f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8022f44:	68bb      	ldr	r3, [r7, #8]
 8022f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8022f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8022f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8022f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8022f52:	4a04      	ldr	r2, [pc, #16]	; (8022f64 <__NVIC_SetPriorityGrouping+0x44>)
 8022f54:	68bb      	ldr	r3, [r7, #8]
 8022f56:	60d3      	str	r3, [r2, #12]
}
 8022f58:	bf00      	nop
 8022f5a:	3714      	adds	r7, #20
 8022f5c:	46bd      	mov	sp, r7
 8022f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f62:	4770      	bx	lr
 8022f64:	e000ed00 	.word	0xe000ed00

08022f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8022f68:	b480      	push	{r7}
 8022f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8022f6c:	4b04      	ldr	r3, [pc, #16]	; (8022f80 <__NVIC_GetPriorityGrouping+0x18>)
 8022f6e:	68db      	ldr	r3, [r3, #12]
 8022f70:	0a1b      	lsrs	r3, r3, #8
 8022f72:	f003 0307 	and.w	r3, r3, #7
}
 8022f76:	4618      	mov	r0, r3
 8022f78:	46bd      	mov	sp, r7
 8022f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f7e:	4770      	bx	lr
 8022f80:	e000ed00 	.word	0xe000ed00

08022f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8022f84:	b480      	push	{r7}
 8022f86:	b083      	sub	sp, #12
 8022f88:	af00      	add	r7, sp, #0
 8022f8a:	4603      	mov	r3, r0
 8022f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022f92:	2b00      	cmp	r3, #0
 8022f94:	db0b      	blt.n	8022fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8022f96:	79fb      	ldrb	r3, [r7, #7]
 8022f98:	f003 021f 	and.w	r2, r3, #31
 8022f9c:	4907      	ldr	r1, [pc, #28]	; (8022fbc <__NVIC_EnableIRQ+0x38>)
 8022f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022fa2:	095b      	lsrs	r3, r3, #5
 8022fa4:	2001      	movs	r0, #1
 8022fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8022faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8022fae:	bf00      	nop
 8022fb0:	370c      	adds	r7, #12
 8022fb2:	46bd      	mov	sp, r7
 8022fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fb8:	4770      	bx	lr
 8022fba:	bf00      	nop
 8022fbc:	e000e100 	.word	0xe000e100

08022fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8022fc0:	b480      	push	{r7}
 8022fc2:	b083      	sub	sp, #12
 8022fc4:	af00      	add	r7, sp, #0
 8022fc6:	4603      	mov	r3, r0
 8022fc8:	6039      	str	r1, [r7, #0]
 8022fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022fd0:	2b00      	cmp	r3, #0
 8022fd2:	db0a      	blt.n	8022fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022fd4:	683b      	ldr	r3, [r7, #0]
 8022fd6:	b2da      	uxtb	r2, r3
 8022fd8:	490c      	ldr	r1, [pc, #48]	; (802300c <__NVIC_SetPriority+0x4c>)
 8022fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022fde:	0112      	lsls	r2, r2, #4
 8022fe0:	b2d2      	uxtb	r2, r2
 8022fe2:	440b      	add	r3, r1
 8022fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8022fe8:	e00a      	b.n	8023000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022fea:	683b      	ldr	r3, [r7, #0]
 8022fec:	b2da      	uxtb	r2, r3
 8022fee:	4908      	ldr	r1, [pc, #32]	; (8023010 <__NVIC_SetPriority+0x50>)
 8022ff0:	79fb      	ldrb	r3, [r7, #7]
 8022ff2:	f003 030f 	and.w	r3, r3, #15
 8022ff6:	3b04      	subs	r3, #4
 8022ff8:	0112      	lsls	r2, r2, #4
 8022ffa:	b2d2      	uxtb	r2, r2
 8022ffc:	440b      	add	r3, r1
 8022ffe:	761a      	strb	r2, [r3, #24]
}
 8023000:	bf00      	nop
 8023002:	370c      	adds	r7, #12
 8023004:	46bd      	mov	sp, r7
 8023006:	f85d 7b04 	ldr.w	r7, [sp], #4
 802300a:	4770      	bx	lr
 802300c:	e000e100 	.word	0xe000e100
 8023010:	e000ed00 	.word	0xe000ed00

08023014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8023014:	b480      	push	{r7}
 8023016:	b089      	sub	sp, #36	; 0x24
 8023018:	af00      	add	r7, sp, #0
 802301a:	60f8      	str	r0, [r7, #12]
 802301c:	60b9      	str	r1, [r7, #8]
 802301e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8023020:	68fb      	ldr	r3, [r7, #12]
 8023022:	f003 0307 	and.w	r3, r3, #7
 8023026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8023028:	69fb      	ldr	r3, [r7, #28]
 802302a:	f1c3 0307 	rsb	r3, r3, #7
 802302e:	2b04      	cmp	r3, #4
 8023030:	bf28      	it	cs
 8023032:	2304      	movcs	r3, #4
 8023034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8023036:	69fb      	ldr	r3, [r7, #28]
 8023038:	3304      	adds	r3, #4
 802303a:	2b06      	cmp	r3, #6
 802303c:	d902      	bls.n	8023044 <NVIC_EncodePriority+0x30>
 802303e:	69fb      	ldr	r3, [r7, #28]
 8023040:	3b03      	subs	r3, #3
 8023042:	e000      	b.n	8023046 <NVIC_EncodePriority+0x32>
 8023044:	2300      	movs	r3, #0
 8023046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8023048:	f04f 32ff 	mov.w	r2, #4294967295
 802304c:	69bb      	ldr	r3, [r7, #24]
 802304e:	fa02 f303 	lsl.w	r3, r2, r3
 8023052:	43da      	mvns	r2, r3
 8023054:	68bb      	ldr	r3, [r7, #8]
 8023056:	401a      	ands	r2, r3
 8023058:	697b      	ldr	r3, [r7, #20]
 802305a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802305c:	f04f 31ff 	mov.w	r1, #4294967295
 8023060:	697b      	ldr	r3, [r7, #20]
 8023062:	fa01 f303 	lsl.w	r3, r1, r3
 8023066:	43d9      	mvns	r1, r3
 8023068:	687b      	ldr	r3, [r7, #4]
 802306a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802306c:	4313      	orrs	r3, r2
         );
}
 802306e:	4618      	mov	r0, r3
 8023070:	3724      	adds	r7, #36	; 0x24
 8023072:	46bd      	mov	sp, r7
 8023074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023078:	4770      	bx	lr

0802307a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802307a:	b580      	push	{r7, lr}
 802307c:	b082      	sub	sp, #8
 802307e:	af00      	add	r7, sp, #0
 8023080:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8023082:	6878      	ldr	r0, [r7, #4]
 8023084:	f7ff ff4c 	bl	8022f20 <__NVIC_SetPriorityGrouping>
}
 8023088:	bf00      	nop
 802308a:	3708      	adds	r7, #8
 802308c:	46bd      	mov	sp, r7
 802308e:	bd80      	pop	{r7, pc}

08023090 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8023090:	b580      	push	{r7, lr}
 8023092:	b086      	sub	sp, #24
 8023094:	af00      	add	r7, sp, #0
 8023096:	4603      	mov	r3, r0
 8023098:	60b9      	str	r1, [r7, #8]
 802309a:	607a      	str	r2, [r7, #4]
 802309c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 802309e:	2300      	movs	r3, #0
 80230a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80230a2:	f7ff ff61 	bl	8022f68 <__NVIC_GetPriorityGrouping>
 80230a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80230a8:	687a      	ldr	r2, [r7, #4]
 80230aa:	68b9      	ldr	r1, [r7, #8]
 80230ac:	6978      	ldr	r0, [r7, #20]
 80230ae:	f7ff ffb1 	bl	8023014 <NVIC_EncodePriority>
 80230b2:	4602      	mov	r2, r0
 80230b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80230b8:	4611      	mov	r1, r2
 80230ba:	4618      	mov	r0, r3
 80230bc:	f7ff ff80 	bl	8022fc0 <__NVIC_SetPriority>
}
 80230c0:	bf00      	nop
 80230c2:	3718      	adds	r7, #24
 80230c4:	46bd      	mov	sp, r7
 80230c6:	bd80      	pop	{r7, pc}

080230c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80230c8:	b580      	push	{r7, lr}
 80230ca:	b082      	sub	sp, #8
 80230cc:	af00      	add	r7, sp, #0
 80230ce:	4603      	mov	r3, r0
 80230d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80230d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80230d6:	4618      	mov	r0, r3
 80230d8:	f7ff ff54 	bl	8022f84 <__NVIC_EnableIRQ>
}
 80230dc:	bf00      	nop
 80230de:	3708      	adds	r7, #8
 80230e0:	46bd      	mov	sp, r7
 80230e2:	bd80      	pop	{r7, pc}

080230e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80230e4:	b580      	push	{r7, lr}
 80230e6:	b082      	sub	sp, #8
 80230e8:	af00      	add	r7, sp, #0
 80230ea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80230ec:	687b      	ldr	r3, [r7, #4]
 80230ee:	2b00      	cmp	r3, #0
 80230f0:	d101      	bne.n	80230f6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80230f2:	2301      	movs	r3, #1
 80230f4:	e00e      	b.n	8023114 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80230f6:	687b      	ldr	r3, [r7, #4]
 80230f8:	795b      	ldrb	r3, [r3, #5]
 80230fa:	b2db      	uxtb	r3, r3
 80230fc:	2b00      	cmp	r3, #0
 80230fe:	d105      	bne.n	802310c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8023100:	687b      	ldr	r3, [r7, #4]
 8023102:	2200      	movs	r2, #0
 8023104:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8023106:	6878      	ldr	r0, [r7, #4]
 8023108:	f7fd fefc 	bl	8020f04 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 802310c:	687b      	ldr	r3, [r7, #4]
 802310e:	2201      	movs	r2, #1
 8023110:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8023112:	2300      	movs	r3, #0
}
 8023114:	4618      	mov	r0, r3
 8023116:	3708      	adds	r7, #8
 8023118:	46bd      	mov	sp, r7
 802311a:	bd80      	pop	{r7, pc}

0802311c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802311c:	b580      	push	{r7, lr}
 802311e:	b086      	sub	sp, #24
 8023120:	af00      	add	r7, sp, #0
 8023122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8023124:	2300      	movs	r3, #0
 8023126:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8023128:	f7ff feca 	bl	8022ec0 <HAL_GetTick>
 802312c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802312e:	687b      	ldr	r3, [r7, #4]
 8023130:	2b00      	cmp	r3, #0
 8023132:	d101      	bne.n	8023138 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8023134:	2301      	movs	r3, #1
 8023136:	e099      	b.n	802326c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8023138:	687b      	ldr	r3, [r7, #4]
 802313a:	2202      	movs	r2, #2
 802313c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8023140:	687b      	ldr	r3, [r7, #4]
 8023142:	2200      	movs	r2, #0
 8023144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8023148:	687b      	ldr	r3, [r7, #4]
 802314a:	681b      	ldr	r3, [r3, #0]
 802314c:	681a      	ldr	r2, [r3, #0]
 802314e:	687b      	ldr	r3, [r7, #4]
 8023150:	681b      	ldr	r3, [r3, #0]
 8023152:	f022 0201 	bic.w	r2, r2, #1
 8023156:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023158:	e00f      	b.n	802317a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802315a:	f7ff feb1 	bl	8022ec0 <HAL_GetTick>
 802315e:	4602      	mov	r2, r0
 8023160:	693b      	ldr	r3, [r7, #16]
 8023162:	1ad3      	subs	r3, r2, r3
 8023164:	2b05      	cmp	r3, #5
 8023166:	d908      	bls.n	802317a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8023168:	687b      	ldr	r3, [r7, #4]
 802316a:	2220      	movs	r2, #32
 802316c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 802316e:	687b      	ldr	r3, [r7, #4]
 8023170:	2203      	movs	r2, #3
 8023172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8023176:	2303      	movs	r3, #3
 8023178:	e078      	b.n	802326c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802317a:	687b      	ldr	r3, [r7, #4]
 802317c:	681b      	ldr	r3, [r3, #0]
 802317e:	681b      	ldr	r3, [r3, #0]
 8023180:	f003 0301 	and.w	r3, r3, #1
 8023184:	2b00      	cmp	r3, #0
 8023186:	d1e8      	bne.n	802315a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8023188:	687b      	ldr	r3, [r7, #4]
 802318a:	681b      	ldr	r3, [r3, #0]
 802318c:	681b      	ldr	r3, [r3, #0]
 802318e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8023190:	697a      	ldr	r2, [r7, #20]
 8023192:	4b38      	ldr	r3, [pc, #224]	; (8023274 <HAL_DMA_Init+0x158>)
 8023194:	4013      	ands	r3, r2
 8023196:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023198:	687b      	ldr	r3, [r7, #4]
 802319a:	685a      	ldr	r2, [r3, #4]
 802319c:	687b      	ldr	r3, [r7, #4]
 802319e:	689b      	ldr	r3, [r3, #8]
 80231a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80231a2:	687b      	ldr	r3, [r7, #4]
 80231a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80231a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80231a8:	687b      	ldr	r3, [r7, #4]
 80231aa:	691b      	ldr	r3, [r3, #16]
 80231ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80231ae:	687b      	ldr	r3, [r7, #4]
 80231b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80231b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80231b4:	687b      	ldr	r3, [r7, #4]
 80231b6:	699b      	ldr	r3, [r3, #24]
 80231b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80231ba:	687b      	ldr	r3, [r7, #4]
 80231bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80231be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80231c0:	687b      	ldr	r3, [r7, #4]
 80231c2:	6a1b      	ldr	r3, [r3, #32]
 80231c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80231c6:	697a      	ldr	r2, [r7, #20]
 80231c8:	4313      	orrs	r3, r2
 80231ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80231cc:	687b      	ldr	r3, [r7, #4]
 80231ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80231d0:	2b04      	cmp	r3, #4
 80231d2:	d107      	bne.n	80231e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80231d4:	687b      	ldr	r3, [r7, #4]
 80231d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80231d8:	687b      	ldr	r3, [r7, #4]
 80231da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231dc:	4313      	orrs	r3, r2
 80231de:	697a      	ldr	r2, [r7, #20]
 80231e0:	4313      	orrs	r3, r2
 80231e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80231e4:	687b      	ldr	r3, [r7, #4]
 80231e6:	681b      	ldr	r3, [r3, #0]
 80231e8:	697a      	ldr	r2, [r7, #20]
 80231ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80231ec:	687b      	ldr	r3, [r7, #4]
 80231ee:	681b      	ldr	r3, [r3, #0]
 80231f0:	695b      	ldr	r3, [r3, #20]
 80231f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80231f4:	697b      	ldr	r3, [r7, #20]
 80231f6:	f023 0307 	bic.w	r3, r3, #7
 80231fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80231fc:	687b      	ldr	r3, [r7, #4]
 80231fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023200:	697a      	ldr	r2, [r7, #20]
 8023202:	4313      	orrs	r3, r2
 8023204:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8023206:	687b      	ldr	r3, [r7, #4]
 8023208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802320a:	2b04      	cmp	r3, #4
 802320c:	d117      	bne.n	802323e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 802320e:	687b      	ldr	r3, [r7, #4]
 8023210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023212:	697a      	ldr	r2, [r7, #20]
 8023214:	4313      	orrs	r3, r2
 8023216:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8023218:	687b      	ldr	r3, [r7, #4]
 802321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802321c:	2b00      	cmp	r3, #0
 802321e:	d00e      	beq.n	802323e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8023220:	6878      	ldr	r0, [r7, #4]
 8023222:	f000 f94f 	bl	80234c4 <DMA_CheckFifoParam>
 8023226:	4603      	mov	r3, r0
 8023228:	2b00      	cmp	r3, #0
 802322a:	d008      	beq.n	802323e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802322c:	687b      	ldr	r3, [r7, #4]
 802322e:	2240      	movs	r2, #64	; 0x40
 8023230:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8023232:	687b      	ldr	r3, [r7, #4]
 8023234:	2201      	movs	r2, #1
 8023236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 802323a:	2301      	movs	r3, #1
 802323c:	e016      	b.n	802326c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 802323e:	687b      	ldr	r3, [r7, #4]
 8023240:	681b      	ldr	r3, [r3, #0]
 8023242:	697a      	ldr	r2, [r7, #20]
 8023244:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8023246:	6878      	ldr	r0, [r7, #4]
 8023248:	f000 f906 	bl	8023458 <DMA_CalcBaseAndBitshift>
 802324c:	4603      	mov	r3, r0
 802324e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023250:	687b      	ldr	r3, [r7, #4]
 8023252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023254:	223f      	movs	r2, #63	; 0x3f
 8023256:	409a      	lsls	r2, r3
 8023258:	68fb      	ldr	r3, [r7, #12]
 802325a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802325c:	687b      	ldr	r3, [r7, #4]
 802325e:	2200      	movs	r2, #0
 8023260:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8023262:	687b      	ldr	r3, [r7, #4]
 8023264:	2201      	movs	r2, #1
 8023266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802326a:	2300      	movs	r3, #0
}
 802326c:	4618      	mov	r0, r3
 802326e:	3718      	adds	r7, #24
 8023270:	46bd      	mov	sp, r7
 8023272:	bd80      	pop	{r7, pc}
 8023274:	f010803f 	.word	0xf010803f

08023278 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8023278:	b580      	push	{r7, lr}
 802327a:	b084      	sub	sp, #16
 802327c:	af00      	add	r7, sp, #0
 802327e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8023280:	687b      	ldr	r3, [r7, #4]
 8023282:	2b00      	cmp	r3, #0
 8023284:	d101      	bne.n	802328a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8023286:	2301      	movs	r3, #1
 8023288:	e050      	b.n	802332c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 802328a:	687b      	ldr	r3, [r7, #4]
 802328c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023290:	b2db      	uxtb	r3, r3
 8023292:	2b02      	cmp	r3, #2
 8023294:	d101      	bne.n	802329a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8023296:	2302      	movs	r3, #2
 8023298:	e048      	b.n	802332c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 802329a:	687b      	ldr	r3, [r7, #4]
 802329c:	681b      	ldr	r3, [r3, #0]
 802329e:	681a      	ldr	r2, [r3, #0]
 80232a0:	687b      	ldr	r3, [r7, #4]
 80232a2:	681b      	ldr	r3, [r3, #0]
 80232a4:	f022 0201 	bic.w	r2, r2, #1
 80232a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80232aa:	687b      	ldr	r3, [r7, #4]
 80232ac:	681b      	ldr	r3, [r3, #0]
 80232ae:	2200      	movs	r2, #0
 80232b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80232b2:	687b      	ldr	r3, [r7, #4]
 80232b4:	681b      	ldr	r3, [r3, #0]
 80232b6:	2200      	movs	r2, #0
 80232b8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80232ba:	687b      	ldr	r3, [r7, #4]
 80232bc:	681b      	ldr	r3, [r3, #0]
 80232be:	2200      	movs	r2, #0
 80232c0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80232c2:	687b      	ldr	r3, [r7, #4]
 80232c4:	681b      	ldr	r3, [r3, #0]
 80232c6:	2200      	movs	r2, #0
 80232c8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80232ca:	687b      	ldr	r3, [r7, #4]
 80232cc:	681b      	ldr	r3, [r3, #0]
 80232ce:	2200      	movs	r2, #0
 80232d0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80232d2:	687b      	ldr	r3, [r7, #4]
 80232d4:	681b      	ldr	r3, [r3, #0]
 80232d6:	2221      	movs	r2, #33	; 0x21
 80232d8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80232da:	6878      	ldr	r0, [r7, #4]
 80232dc:	f000 f8bc 	bl	8023458 <DMA_CalcBaseAndBitshift>
 80232e0:	4603      	mov	r3, r0
 80232e2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80232e4:	687b      	ldr	r3, [r7, #4]
 80232e6:	2200      	movs	r2, #0
 80232e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80232ea:	687b      	ldr	r3, [r7, #4]
 80232ec:	2200      	movs	r2, #0
 80232ee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80232f0:	687b      	ldr	r3, [r7, #4]
 80232f2:	2200      	movs	r2, #0
 80232f4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80232f6:	687b      	ldr	r3, [r7, #4]
 80232f8:	2200      	movs	r2, #0
 80232fa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80232fc:	687b      	ldr	r3, [r7, #4]
 80232fe:	2200      	movs	r2, #0
 8023300:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8023302:	687b      	ldr	r3, [r7, #4]
 8023304:	2200      	movs	r2, #0
 8023306:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023308:	687b      	ldr	r3, [r7, #4]
 802330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802330c:	223f      	movs	r2, #63	; 0x3f
 802330e:	409a      	lsls	r2, r3
 8023310:	68fb      	ldr	r3, [r7, #12]
 8023312:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023314:	687b      	ldr	r3, [r7, #4]
 8023316:	2200      	movs	r2, #0
 8023318:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 802331a:	687b      	ldr	r3, [r7, #4]
 802331c:	2200      	movs	r2, #0
 802331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8023322:	687b      	ldr	r3, [r7, #4]
 8023324:	2200      	movs	r2, #0
 8023326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 802332a:	2300      	movs	r3, #0
}
 802332c:	4618      	mov	r0, r3
 802332e:	3710      	adds	r7, #16
 8023330:	46bd      	mov	sp, r7
 8023332:	bd80      	pop	{r7, pc}

08023334 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8023334:	b580      	push	{r7, lr}
 8023336:	b084      	sub	sp, #16
 8023338:	af00      	add	r7, sp, #0
 802333a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802333c:	687b      	ldr	r3, [r7, #4]
 802333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023340:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8023342:	f7ff fdbd 	bl	8022ec0 <HAL_GetTick>
 8023346:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023348:	687b      	ldr	r3, [r7, #4]
 802334a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802334e:	b2db      	uxtb	r3, r3
 8023350:	2b02      	cmp	r3, #2
 8023352:	d008      	beq.n	8023366 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8023354:	687b      	ldr	r3, [r7, #4]
 8023356:	2280      	movs	r2, #128	; 0x80
 8023358:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802335a:	687b      	ldr	r3, [r7, #4]
 802335c:	2200      	movs	r2, #0
 802335e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8023362:	2301      	movs	r3, #1
 8023364:	e052      	b.n	802340c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8023366:	687b      	ldr	r3, [r7, #4]
 8023368:	681b      	ldr	r3, [r3, #0]
 802336a:	681a      	ldr	r2, [r3, #0]
 802336c:	687b      	ldr	r3, [r7, #4]
 802336e:	681b      	ldr	r3, [r3, #0]
 8023370:	f022 0216 	bic.w	r2, r2, #22
 8023374:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8023376:	687b      	ldr	r3, [r7, #4]
 8023378:	681b      	ldr	r3, [r3, #0]
 802337a:	695a      	ldr	r2, [r3, #20]
 802337c:	687b      	ldr	r3, [r7, #4]
 802337e:	681b      	ldr	r3, [r3, #0]
 8023380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8023384:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8023386:	687b      	ldr	r3, [r7, #4]
 8023388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802338a:	2b00      	cmp	r3, #0
 802338c:	d103      	bne.n	8023396 <HAL_DMA_Abort+0x62>
 802338e:	687b      	ldr	r3, [r7, #4]
 8023390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023392:	2b00      	cmp	r3, #0
 8023394:	d007      	beq.n	80233a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8023396:	687b      	ldr	r3, [r7, #4]
 8023398:	681b      	ldr	r3, [r3, #0]
 802339a:	681a      	ldr	r2, [r3, #0]
 802339c:	687b      	ldr	r3, [r7, #4]
 802339e:	681b      	ldr	r3, [r3, #0]
 80233a0:	f022 0208 	bic.w	r2, r2, #8
 80233a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80233a6:	687b      	ldr	r3, [r7, #4]
 80233a8:	681b      	ldr	r3, [r3, #0]
 80233aa:	681a      	ldr	r2, [r3, #0]
 80233ac:	687b      	ldr	r3, [r7, #4]
 80233ae:	681b      	ldr	r3, [r3, #0]
 80233b0:	f022 0201 	bic.w	r2, r2, #1
 80233b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80233b6:	e013      	b.n	80233e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80233b8:	f7ff fd82 	bl	8022ec0 <HAL_GetTick>
 80233bc:	4602      	mov	r2, r0
 80233be:	68bb      	ldr	r3, [r7, #8]
 80233c0:	1ad3      	subs	r3, r2, r3
 80233c2:	2b05      	cmp	r3, #5
 80233c4:	d90c      	bls.n	80233e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80233c6:	687b      	ldr	r3, [r7, #4]
 80233c8:	2220      	movs	r2, #32
 80233ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80233cc:	687b      	ldr	r3, [r7, #4]
 80233ce:	2203      	movs	r2, #3
 80233d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80233d4:	687b      	ldr	r3, [r7, #4]
 80233d6:	2200      	movs	r2, #0
 80233d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80233dc:	2303      	movs	r3, #3
 80233de:	e015      	b.n	802340c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80233e0:	687b      	ldr	r3, [r7, #4]
 80233e2:	681b      	ldr	r3, [r3, #0]
 80233e4:	681b      	ldr	r3, [r3, #0]
 80233e6:	f003 0301 	and.w	r3, r3, #1
 80233ea:	2b00      	cmp	r3, #0
 80233ec:	d1e4      	bne.n	80233b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80233ee:	687b      	ldr	r3, [r7, #4]
 80233f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80233f2:	223f      	movs	r2, #63	; 0x3f
 80233f4:	409a      	lsls	r2, r3
 80233f6:	68fb      	ldr	r3, [r7, #12]
 80233f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80233fa:	687b      	ldr	r3, [r7, #4]
 80233fc:	2201      	movs	r2, #1
 80233fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8023402:	687b      	ldr	r3, [r7, #4]
 8023404:	2200      	movs	r2, #0
 8023406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 802340a:	2300      	movs	r3, #0
}
 802340c:	4618      	mov	r0, r3
 802340e:	3710      	adds	r7, #16
 8023410:	46bd      	mov	sp, r7
 8023412:	bd80      	pop	{r7, pc}

08023414 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8023414:	b480      	push	{r7}
 8023416:	b083      	sub	sp, #12
 8023418:	af00      	add	r7, sp, #0
 802341a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802341c:	687b      	ldr	r3, [r7, #4]
 802341e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023422:	b2db      	uxtb	r3, r3
 8023424:	2b02      	cmp	r3, #2
 8023426:	d004      	beq.n	8023432 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8023428:	687b      	ldr	r3, [r7, #4]
 802342a:	2280      	movs	r2, #128	; 0x80
 802342c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 802342e:	2301      	movs	r3, #1
 8023430:	e00c      	b.n	802344c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8023432:	687b      	ldr	r3, [r7, #4]
 8023434:	2205      	movs	r2, #5
 8023436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802343a:	687b      	ldr	r3, [r7, #4]
 802343c:	681b      	ldr	r3, [r3, #0]
 802343e:	681a      	ldr	r2, [r3, #0]
 8023440:	687b      	ldr	r3, [r7, #4]
 8023442:	681b      	ldr	r3, [r3, #0]
 8023444:	f022 0201 	bic.w	r2, r2, #1
 8023448:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 802344a:	2300      	movs	r3, #0
}
 802344c:	4618      	mov	r0, r3
 802344e:	370c      	adds	r7, #12
 8023450:	46bd      	mov	sp, r7
 8023452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023456:	4770      	bx	lr

08023458 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8023458:	b480      	push	{r7}
 802345a:	b085      	sub	sp, #20
 802345c:	af00      	add	r7, sp, #0
 802345e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8023460:	687b      	ldr	r3, [r7, #4]
 8023462:	681b      	ldr	r3, [r3, #0]
 8023464:	b2db      	uxtb	r3, r3
 8023466:	3b10      	subs	r3, #16
 8023468:	4a14      	ldr	r2, [pc, #80]	; (80234bc <DMA_CalcBaseAndBitshift+0x64>)
 802346a:	fba2 2303 	umull	r2, r3, r2, r3
 802346e:	091b      	lsrs	r3, r3, #4
 8023470:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8023472:	4a13      	ldr	r2, [pc, #76]	; (80234c0 <DMA_CalcBaseAndBitshift+0x68>)
 8023474:	68fb      	ldr	r3, [r7, #12]
 8023476:	4413      	add	r3, r2
 8023478:	781b      	ldrb	r3, [r3, #0]
 802347a:	461a      	mov	r2, r3
 802347c:	687b      	ldr	r3, [r7, #4]
 802347e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8023480:	68fb      	ldr	r3, [r7, #12]
 8023482:	2b03      	cmp	r3, #3
 8023484:	d909      	bls.n	802349a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8023486:	687b      	ldr	r3, [r7, #4]
 8023488:	681b      	ldr	r3, [r3, #0]
 802348a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802348e:	f023 0303 	bic.w	r3, r3, #3
 8023492:	1d1a      	adds	r2, r3, #4
 8023494:	687b      	ldr	r3, [r7, #4]
 8023496:	659a      	str	r2, [r3, #88]	; 0x58
 8023498:	e007      	b.n	80234aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 802349a:	687b      	ldr	r3, [r7, #4]
 802349c:	681b      	ldr	r3, [r3, #0]
 802349e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80234a2:	f023 0303 	bic.w	r3, r3, #3
 80234a6:	687a      	ldr	r2, [r7, #4]
 80234a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80234aa:	687b      	ldr	r3, [r7, #4]
 80234ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80234ae:	4618      	mov	r0, r3
 80234b0:	3714      	adds	r7, #20
 80234b2:	46bd      	mov	sp, r7
 80234b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234b8:	4770      	bx	lr
 80234ba:	bf00      	nop
 80234bc:	aaaaaaab 	.word	0xaaaaaaab
 80234c0:	08030568 	.word	0x08030568

080234c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80234c4:	b480      	push	{r7}
 80234c6:	b085      	sub	sp, #20
 80234c8:	af00      	add	r7, sp, #0
 80234ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80234cc:	2300      	movs	r3, #0
 80234ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80234d0:	687b      	ldr	r3, [r7, #4]
 80234d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80234d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80234d6:	687b      	ldr	r3, [r7, #4]
 80234d8:	699b      	ldr	r3, [r3, #24]
 80234da:	2b00      	cmp	r3, #0
 80234dc:	d11f      	bne.n	802351e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80234de:	68bb      	ldr	r3, [r7, #8]
 80234e0:	2b03      	cmp	r3, #3
 80234e2:	d856      	bhi.n	8023592 <DMA_CheckFifoParam+0xce>
 80234e4:	a201      	add	r2, pc, #4	; (adr r2, 80234ec <DMA_CheckFifoParam+0x28>)
 80234e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80234ea:	bf00      	nop
 80234ec:	080234fd 	.word	0x080234fd
 80234f0:	0802350f 	.word	0x0802350f
 80234f4:	080234fd 	.word	0x080234fd
 80234f8:	08023593 	.word	0x08023593
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80234fc:	687b      	ldr	r3, [r7, #4]
 80234fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023504:	2b00      	cmp	r3, #0
 8023506:	d046      	beq.n	8023596 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8023508:	2301      	movs	r3, #1
 802350a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802350c:	e043      	b.n	8023596 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802350e:	687b      	ldr	r3, [r7, #4]
 8023510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023512:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023516:	d140      	bne.n	802359a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8023518:	2301      	movs	r3, #1
 802351a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802351c:	e03d      	b.n	802359a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802351e:	687b      	ldr	r3, [r7, #4]
 8023520:	699b      	ldr	r3, [r3, #24]
 8023522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023526:	d121      	bne.n	802356c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8023528:	68bb      	ldr	r3, [r7, #8]
 802352a:	2b03      	cmp	r3, #3
 802352c:	d837      	bhi.n	802359e <DMA_CheckFifoParam+0xda>
 802352e:	a201      	add	r2, pc, #4	; (adr r2, 8023534 <DMA_CheckFifoParam+0x70>)
 8023530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023534:	08023545 	.word	0x08023545
 8023538:	0802354b 	.word	0x0802354b
 802353c:	08023545 	.word	0x08023545
 8023540:	0802355d 	.word	0x0802355d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8023544:	2301      	movs	r3, #1
 8023546:	73fb      	strb	r3, [r7, #15]
      break;
 8023548:	e030      	b.n	80235ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802354a:	687b      	ldr	r3, [r7, #4]
 802354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802354e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023552:	2b00      	cmp	r3, #0
 8023554:	d025      	beq.n	80235a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8023556:	2301      	movs	r3, #1
 8023558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802355a:	e022      	b.n	80235a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802355c:	687b      	ldr	r3, [r7, #4]
 802355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023560:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023564:	d11f      	bne.n	80235a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8023566:	2301      	movs	r3, #1
 8023568:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 802356a:	e01c      	b.n	80235a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 802356c:	68bb      	ldr	r3, [r7, #8]
 802356e:	2b02      	cmp	r3, #2
 8023570:	d903      	bls.n	802357a <DMA_CheckFifoParam+0xb6>
 8023572:	68bb      	ldr	r3, [r7, #8]
 8023574:	2b03      	cmp	r3, #3
 8023576:	d003      	beq.n	8023580 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8023578:	e018      	b.n	80235ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 802357a:	2301      	movs	r3, #1
 802357c:	73fb      	strb	r3, [r7, #15]
      break;
 802357e:	e015      	b.n	80235ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023580:	687b      	ldr	r3, [r7, #4]
 8023582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023588:	2b00      	cmp	r3, #0
 802358a:	d00e      	beq.n	80235aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 802358c:	2301      	movs	r3, #1
 802358e:	73fb      	strb	r3, [r7, #15]
      break;
 8023590:	e00b      	b.n	80235aa <DMA_CheckFifoParam+0xe6>
      break;
 8023592:	bf00      	nop
 8023594:	e00a      	b.n	80235ac <DMA_CheckFifoParam+0xe8>
      break;
 8023596:	bf00      	nop
 8023598:	e008      	b.n	80235ac <DMA_CheckFifoParam+0xe8>
      break;
 802359a:	bf00      	nop
 802359c:	e006      	b.n	80235ac <DMA_CheckFifoParam+0xe8>
      break;
 802359e:	bf00      	nop
 80235a0:	e004      	b.n	80235ac <DMA_CheckFifoParam+0xe8>
      break;
 80235a2:	bf00      	nop
 80235a4:	e002      	b.n	80235ac <DMA_CheckFifoParam+0xe8>
      break;   
 80235a6:	bf00      	nop
 80235a8:	e000      	b.n	80235ac <DMA_CheckFifoParam+0xe8>
      break;
 80235aa:	bf00      	nop
    }
  } 
  
  return status; 
 80235ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80235ae:	4618      	mov	r0, r3
 80235b0:	3714      	adds	r7, #20
 80235b2:	46bd      	mov	sp, r7
 80235b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235b8:	4770      	bx	lr
 80235ba:	bf00      	nop

080235bc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80235bc:	b580      	push	{r7, lr}
 80235be:	b082      	sub	sp, #8
 80235c0:	af00      	add	r7, sp, #0
 80235c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80235c4:	687b      	ldr	r3, [r7, #4]
 80235c6:	2b00      	cmp	r3, #0
 80235c8:	d101      	bne.n	80235ce <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80235ca:	2301      	movs	r3, #1
 80235cc:	e03b      	b.n	8023646 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80235ce:	687b      	ldr	r3, [r7, #4]
 80235d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80235d4:	b2db      	uxtb	r3, r3
 80235d6:	2b00      	cmp	r3, #0
 80235d8:	d106      	bne.n	80235e8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80235da:	687b      	ldr	r3, [r7, #4]
 80235dc:	2200      	movs	r2, #0
 80235de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80235e2:	6878      	ldr	r0, [r7, #4]
 80235e4:	f7fd fcb0 	bl	8020f48 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80235e8:	687b      	ldr	r3, [r7, #4]
 80235ea:	2202      	movs	r2, #2
 80235ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80235f0:	687b      	ldr	r3, [r7, #4]
 80235f2:	681b      	ldr	r3, [r3, #0]
 80235f4:	681b      	ldr	r3, [r3, #0]
 80235f6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80235fa:	687b      	ldr	r3, [r7, #4]
 80235fc:	685a      	ldr	r2, [r3, #4]
 80235fe:	687b      	ldr	r3, [r7, #4]
 8023600:	681b      	ldr	r3, [r3, #0]
 8023602:	430a      	orrs	r2, r1
 8023604:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8023606:	687b      	ldr	r3, [r7, #4]
 8023608:	681b      	ldr	r3, [r3, #0]
 802360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802360c:	f023 0107 	bic.w	r1, r3, #7
 8023610:	687b      	ldr	r3, [r7, #4]
 8023612:	689a      	ldr	r2, [r3, #8]
 8023614:	687b      	ldr	r3, [r7, #4]
 8023616:	681b      	ldr	r3, [r3, #0]
 8023618:	430a      	orrs	r2, r1
 802361a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 802361c:	687b      	ldr	r3, [r7, #4]
 802361e:	681b      	ldr	r3, [r3, #0]
 8023620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023622:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8023626:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 802362a:	687a      	ldr	r2, [r7, #4]
 802362c:	68d1      	ldr	r1, [r2, #12]
 802362e:	687a      	ldr	r2, [r7, #4]
 8023630:	6812      	ldr	r2, [r2, #0]
 8023632:	430b      	orrs	r3, r1
 8023634:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8023636:	687b      	ldr	r3, [r7, #4]
 8023638:	2200      	movs	r2, #0
 802363a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 802363c:	687b      	ldr	r3, [r7, #4]
 802363e:	2201      	movs	r2, #1
 8023640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8023644:	2300      	movs	r3, #0
}
 8023646:	4618      	mov	r0, r3
 8023648:	3708      	adds	r7, #8
 802364a:	46bd      	mov	sp, r7
 802364c:	bd80      	pop	{r7, pc}

0802364e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 802364e:	b580      	push	{r7, lr}
 8023650:	b086      	sub	sp, #24
 8023652:	af02      	add	r7, sp, #8
 8023654:	60f8      	str	r0, [r7, #12]
 8023656:	60b9      	str	r1, [r7, #8]
 8023658:	607a      	str	r2, [r7, #4]
 802365a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 802365c:	68fb      	ldr	r3, [r7, #12]
 802365e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8023662:	2b01      	cmp	r3, #1
 8023664:	d101      	bne.n	802366a <HAL_DMA2D_Start+0x1c>
 8023666:	2302      	movs	r3, #2
 8023668:	e018      	b.n	802369c <HAL_DMA2D_Start+0x4e>
 802366a:	68fb      	ldr	r3, [r7, #12]
 802366c:	2201      	movs	r2, #1
 802366e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023672:	68fb      	ldr	r3, [r7, #12]
 8023674:	2202      	movs	r2, #2
 8023676:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 802367a:	69bb      	ldr	r3, [r7, #24]
 802367c:	9300      	str	r3, [sp, #0]
 802367e:	683b      	ldr	r3, [r7, #0]
 8023680:	687a      	ldr	r2, [r7, #4]
 8023682:	68b9      	ldr	r1, [r7, #8]
 8023684:	68f8      	ldr	r0, [r7, #12]
 8023686:	f000 fa99 	bl	8023bbc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 802368a:	68fb      	ldr	r3, [r7, #12]
 802368c:	681b      	ldr	r3, [r3, #0]
 802368e:	681a      	ldr	r2, [r3, #0]
 8023690:	68fb      	ldr	r3, [r7, #12]
 8023692:	681b      	ldr	r3, [r3, #0]
 8023694:	f042 0201 	orr.w	r2, r2, #1
 8023698:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 802369a:	2300      	movs	r3, #0
}
 802369c:	4618      	mov	r0, r3
 802369e:	3710      	adds	r7, #16
 80236a0:	46bd      	mov	sp, r7
 80236a2:	bd80      	pop	{r7, pc}

080236a4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80236a4:	b580      	push	{r7, lr}
 80236a6:	b086      	sub	sp, #24
 80236a8:	af00      	add	r7, sp, #0
 80236aa:	6078      	str	r0, [r7, #4]
 80236ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80236ae:	2300      	movs	r3, #0
 80236b0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80236b2:	687b      	ldr	r3, [r7, #4]
 80236b4:	681b      	ldr	r3, [r3, #0]
 80236b6:	681b      	ldr	r3, [r3, #0]
 80236b8:	f003 0301 	and.w	r3, r3, #1
 80236bc:	2b00      	cmp	r3, #0
 80236be:	d056      	beq.n	802376e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80236c0:	f7ff fbfe 	bl	8022ec0 <HAL_GetTick>
 80236c4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80236c6:	e04b      	b.n	8023760 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80236c8:	687b      	ldr	r3, [r7, #4]
 80236ca:	681b      	ldr	r3, [r3, #0]
 80236cc:	685b      	ldr	r3, [r3, #4]
 80236ce:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80236d0:	68fb      	ldr	r3, [r7, #12]
 80236d2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80236d6:	2b00      	cmp	r3, #0
 80236d8:	d023      	beq.n	8023722 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80236da:	68fb      	ldr	r3, [r7, #12]
 80236dc:	f003 0320 	and.w	r3, r3, #32
 80236e0:	2b00      	cmp	r3, #0
 80236e2:	d005      	beq.n	80236f0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80236e4:	687b      	ldr	r3, [r7, #4]
 80236e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80236e8:	f043 0202 	orr.w	r2, r3, #2
 80236ec:	687b      	ldr	r3, [r7, #4]
 80236ee:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80236f0:	68fb      	ldr	r3, [r7, #12]
 80236f2:	f003 0301 	and.w	r3, r3, #1
 80236f6:	2b00      	cmp	r3, #0
 80236f8:	d005      	beq.n	8023706 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80236fa:	687b      	ldr	r3, [r7, #4]
 80236fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80236fe:	f043 0201 	orr.w	r2, r3, #1
 8023702:	687b      	ldr	r3, [r7, #4]
 8023704:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8023706:	687b      	ldr	r3, [r7, #4]
 8023708:	681b      	ldr	r3, [r3, #0]
 802370a:	2221      	movs	r2, #33	; 0x21
 802370c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 802370e:	687b      	ldr	r3, [r7, #4]
 8023710:	2204      	movs	r2, #4
 8023712:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8023716:	687b      	ldr	r3, [r7, #4]
 8023718:	2200      	movs	r2, #0
 802371a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 802371e:	2301      	movs	r3, #1
 8023720:	e0a5      	b.n	802386e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8023722:	683b      	ldr	r3, [r7, #0]
 8023724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023728:	d01a      	beq.n	8023760 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 802372a:	f7ff fbc9 	bl	8022ec0 <HAL_GetTick>
 802372e:	4602      	mov	r2, r0
 8023730:	697b      	ldr	r3, [r7, #20]
 8023732:	1ad3      	subs	r3, r2, r3
 8023734:	683a      	ldr	r2, [r7, #0]
 8023736:	429a      	cmp	r2, r3
 8023738:	d302      	bcc.n	8023740 <HAL_DMA2D_PollForTransfer+0x9c>
 802373a:	683b      	ldr	r3, [r7, #0]
 802373c:	2b00      	cmp	r3, #0
 802373e:	d10f      	bne.n	8023760 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8023740:	687b      	ldr	r3, [r7, #4]
 8023742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023744:	f043 0220 	orr.w	r2, r3, #32
 8023748:	687b      	ldr	r3, [r7, #4]
 802374a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 802374c:	687b      	ldr	r3, [r7, #4]
 802374e:	2203      	movs	r2, #3
 8023750:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8023754:	687b      	ldr	r3, [r7, #4]
 8023756:	2200      	movs	r2, #0
 8023758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 802375c:	2303      	movs	r3, #3
 802375e:	e086      	b.n	802386e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8023760:	687b      	ldr	r3, [r7, #4]
 8023762:	681b      	ldr	r3, [r3, #0]
 8023764:	685b      	ldr	r3, [r3, #4]
 8023766:	f003 0302 	and.w	r3, r3, #2
 802376a:	2b00      	cmp	r3, #0
 802376c:	d0ac      	beq.n	80236c8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 802376e:	687b      	ldr	r3, [r7, #4]
 8023770:	681b      	ldr	r3, [r3, #0]
 8023772:	69db      	ldr	r3, [r3, #28]
 8023774:	f003 0320 	and.w	r3, r3, #32
 8023778:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 802377a:	687b      	ldr	r3, [r7, #4]
 802377c:	681b      	ldr	r3, [r3, #0]
 802377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023780:	f003 0320 	and.w	r3, r3, #32
 8023784:	693a      	ldr	r2, [r7, #16]
 8023786:	4313      	orrs	r3, r2
 8023788:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 802378a:	693b      	ldr	r3, [r7, #16]
 802378c:	2b00      	cmp	r3, #0
 802378e:	d061      	beq.n	8023854 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8023790:	f7ff fb96 	bl	8022ec0 <HAL_GetTick>
 8023794:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8023796:	e056      	b.n	8023846 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8023798:	687b      	ldr	r3, [r7, #4]
 802379a:	681b      	ldr	r3, [r3, #0]
 802379c:	685b      	ldr	r3, [r3, #4]
 802379e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80237a0:	68fb      	ldr	r3, [r7, #12]
 80237a2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80237a6:	2b00      	cmp	r3, #0
 80237a8:	d02e      	beq.n	8023808 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80237aa:	68fb      	ldr	r3, [r7, #12]
 80237ac:	f003 0308 	and.w	r3, r3, #8
 80237b0:	2b00      	cmp	r3, #0
 80237b2:	d005      	beq.n	80237c0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80237b4:	687b      	ldr	r3, [r7, #4]
 80237b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80237b8:	f043 0204 	orr.w	r2, r3, #4
 80237bc:	687b      	ldr	r3, [r7, #4]
 80237be:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80237c0:	68fb      	ldr	r3, [r7, #12]
 80237c2:	f003 0320 	and.w	r3, r3, #32
 80237c6:	2b00      	cmp	r3, #0
 80237c8:	d005      	beq.n	80237d6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80237ca:	687b      	ldr	r3, [r7, #4]
 80237cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80237ce:	f043 0202 	orr.w	r2, r3, #2
 80237d2:	687b      	ldr	r3, [r7, #4]
 80237d4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80237d6:	68fb      	ldr	r3, [r7, #12]
 80237d8:	f003 0301 	and.w	r3, r3, #1
 80237dc:	2b00      	cmp	r3, #0
 80237de:	d005      	beq.n	80237ec <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80237e0:	687b      	ldr	r3, [r7, #4]
 80237e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80237e4:	f043 0201 	orr.w	r2, r3, #1
 80237e8:	687b      	ldr	r3, [r7, #4]
 80237ea:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80237ec:	687b      	ldr	r3, [r7, #4]
 80237ee:	681b      	ldr	r3, [r3, #0]
 80237f0:	2229      	movs	r2, #41	; 0x29
 80237f2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80237f4:	687b      	ldr	r3, [r7, #4]
 80237f6:	2204      	movs	r2, #4
 80237f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80237fc:	687b      	ldr	r3, [r7, #4]
 80237fe:	2200      	movs	r2, #0
 8023800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023804:	2301      	movs	r3, #1
 8023806:	e032      	b.n	802386e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8023808:	683b      	ldr	r3, [r7, #0]
 802380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802380e:	d01a      	beq.n	8023846 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023810:	f7ff fb56 	bl	8022ec0 <HAL_GetTick>
 8023814:	4602      	mov	r2, r0
 8023816:	697b      	ldr	r3, [r7, #20]
 8023818:	1ad3      	subs	r3, r2, r3
 802381a:	683a      	ldr	r2, [r7, #0]
 802381c:	429a      	cmp	r2, r3
 802381e:	d302      	bcc.n	8023826 <HAL_DMA2D_PollForTransfer+0x182>
 8023820:	683b      	ldr	r3, [r7, #0]
 8023822:	2b00      	cmp	r3, #0
 8023824:	d10f      	bne.n	8023846 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8023826:	687b      	ldr	r3, [r7, #4]
 8023828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802382a:	f043 0220 	orr.w	r2, r3, #32
 802382e:	687b      	ldr	r3, [r7, #4]
 8023830:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8023832:	687b      	ldr	r3, [r7, #4]
 8023834:	2203      	movs	r2, #3
 8023836:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 802383a:	687b      	ldr	r3, [r7, #4]
 802383c:	2200      	movs	r2, #0
 802383e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8023842:	2303      	movs	r3, #3
 8023844:	e013      	b.n	802386e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8023846:	687b      	ldr	r3, [r7, #4]
 8023848:	681b      	ldr	r3, [r3, #0]
 802384a:	685b      	ldr	r3, [r3, #4]
 802384c:	f003 0310 	and.w	r3, r3, #16
 8023850:	2b00      	cmp	r3, #0
 8023852:	d0a1      	beq.n	8023798 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8023854:	687b      	ldr	r3, [r7, #4]
 8023856:	681b      	ldr	r3, [r3, #0]
 8023858:	2212      	movs	r2, #18
 802385a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 802385c:	687b      	ldr	r3, [r7, #4]
 802385e:	2201      	movs	r2, #1
 8023860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8023864:	687b      	ldr	r3, [r7, #4]
 8023866:	2200      	movs	r2, #0
 8023868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 802386c:	2300      	movs	r3, #0
}
 802386e:	4618      	mov	r0, r3
 8023870:	3718      	adds	r7, #24
 8023872:	46bd      	mov	sp, r7
 8023874:	bd80      	pop	{r7, pc}

08023876 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8023876:	b580      	push	{r7, lr}
 8023878:	b084      	sub	sp, #16
 802387a:	af00      	add	r7, sp, #0
 802387c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 802387e:	687b      	ldr	r3, [r7, #4]
 8023880:	681b      	ldr	r3, [r3, #0]
 8023882:	685b      	ldr	r3, [r3, #4]
 8023884:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8023886:	687b      	ldr	r3, [r7, #4]
 8023888:	681b      	ldr	r3, [r3, #0]
 802388a:	681b      	ldr	r3, [r3, #0]
 802388c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 802388e:	68fb      	ldr	r3, [r7, #12]
 8023890:	f003 0301 	and.w	r3, r3, #1
 8023894:	2b00      	cmp	r3, #0
 8023896:	d026      	beq.n	80238e6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8023898:	68bb      	ldr	r3, [r7, #8]
 802389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802389e:	2b00      	cmp	r3, #0
 80238a0:	d021      	beq.n	80238e6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80238a2:	687b      	ldr	r3, [r7, #4]
 80238a4:	681b      	ldr	r3, [r3, #0]
 80238a6:	681a      	ldr	r2, [r3, #0]
 80238a8:	687b      	ldr	r3, [r7, #4]
 80238aa:	681b      	ldr	r3, [r3, #0]
 80238ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80238b0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80238b2:	687b      	ldr	r3, [r7, #4]
 80238b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80238b6:	f043 0201 	orr.w	r2, r3, #1
 80238ba:	687b      	ldr	r3, [r7, #4]
 80238bc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80238be:	687b      	ldr	r3, [r7, #4]
 80238c0:	681b      	ldr	r3, [r3, #0]
 80238c2:	2201      	movs	r2, #1
 80238c4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80238c6:	687b      	ldr	r3, [r7, #4]
 80238c8:	2204      	movs	r2, #4
 80238ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80238ce:	687b      	ldr	r3, [r7, #4]
 80238d0:	2200      	movs	r2, #0
 80238d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80238d6:	687b      	ldr	r3, [r7, #4]
 80238d8:	695b      	ldr	r3, [r3, #20]
 80238da:	2b00      	cmp	r3, #0
 80238dc:	d003      	beq.n	80238e6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80238de:	687b      	ldr	r3, [r7, #4]
 80238e0:	695b      	ldr	r3, [r3, #20]
 80238e2:	6878      	ldr	r0, [r7, #4]
 80238e4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80238e6:	68fb      	ldr	r3, [r7, #12]
 80238e8:	f003 0320 	and.w	r3, r3, #32
 80238ec:	2b00      	cmp	r3, #0
 80238ee:	d026      	beq.n	802393e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80238f0:	68bb      	ldr	r3, [r7, #8]
 80238f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80238f6:	2b00      	cmp	r3, #0
 80238f8:	d021      	beq.n	802393e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80238fa:	687b      	ldr	r3, [r7, #4]
 80238fc:	681b      	ldr	r3, [r3, #0]
 80238fe:	681a      	ldr	r2, [r3, #0]
 8023900:	687b      	ldr	r3, [r7, #4]
 8023902:	681b      	ldr	r3, [r3, #0]
 8023904:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8023908:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 802390a:	687b      	ldr	r3, [r7, #4]
 802390c:	681b      	ldr	r3, [r3, #0]
 802390e:	2220      	movs	r2, #32
 8023910:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023912:	687b      	ldr	r3, [r7, #4]
 8023914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023916:	f043 0202 	orr.w	r2, r3, #2
 802391a:	687b      	ldr	r3, [r7, #4]
 802391c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 802391e:	687b      	ldr	r3, [r7, #4]
 8023920:	2204      	movs	r2, #4
 8023922:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023926:	687b      	ldr	r3, [r7, #4]
 8023928:	2200      	movs	r2, #0
 802392a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 802392e:	687b      	ldr	r3, [r7, #4]
 8023930:	695b      	ldr	r3, [r3, #20]
 8023932:	2b00      	cmp	r3, #0
 8023934:	d003      	beq.n	802393e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8023936:	687b      	ldr	r3, [r7, #4]
 8023938:	695b      	ldr	r3, [r3, #20]
 802393a:	6878      	ldr	r0, [r7, #4]
 802393c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 802393e:	68fb      	ldr	r3, [r7, #12]
 8023940:	f003 0308 	and.w	r3, r3, #8
 8023944:	2b00      	cmp	r3, #0
 8023946:	d026      	beq.n	8023996 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8023948:	68bb      	ldr	r3, [r7, #8]
 802394a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802394e:	2b00      	cmp	r3, #0
 8023950:	d021      	beq.n	8023996 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8023952:	687b      	ldr	r3, [r7, #4]
 8023954:	681b      	ldr	r3, [r3, #0]
 8023956:	681a      	ldr	r2, [r3, #0]
 8023958:	687b      	ldr	r3, [r7, #4]
 802395a:	681b      	ldr	r3, [r3, #0]
 802395c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8023960:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8023962:	687b      	ldr	r3, [r7, #4]
 8023964:	681b      	ldr	r3, [r3, #0]
 8023966:	2208      	movs	r2, #8
 8023968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 802396a:	687b      	ldr	r3, [r7, #4]
 802396c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802396e:	f043 0204 	orr.w	r2, r3, #4
 8023972:	687b      	ldr	r3, [r7, #4]
 8023974:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023976:	687b      	ldr	r3, [r7, #4]
 8023978:	2204      	movs	r2, #4
 802397a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 802397e:	687b      	ldr	r3, [r7, #4]
 8023980:	2200      	movs	r2, #0
 8023982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8023986:	687b      	ldr	r3, [r7, #4]
 8023988:	695b      	ldr	r3, [r3, #20]
 802398a:	2b00      	cmp	r3, #0
 802398c:	d003      	beq.n	8023996 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 802398e:	687b      	ldr	r3, [r7, #4]
 8023990:	695b      	ldr	r3, [r3, #20]
 8023992:	6878      	ldr	r0, [r7, #4]
 8023994:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8023996:	68fb      	ldr	r3, [r7, #12]
 8023998:	f003 0304 	and.w	r3, r3, #4
 802399c:	2b00      	cmp	r3, #0
 802399e:	d013      	beq.n	80239c8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80239a0:	68bb      	ldr	r3, [r7, #8]
 80239a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80239a6:	2b00      	cmp	r3, #0
 80239a8:	d00e      	beq.n	80239c8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80239aa:	687b      	ldr	r3, [r7, #4]
 80239ac:	681b      	ldr	r3, [r3, #0]
 80239ae:	681a      	ldr	r2, [r3, #0]
 80239b0:	687b      	ldr	r3, [r7, #4]
 80239b2:	681b      	ldr	r3, [r3, #0]
 80239b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80239b8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80239ba:	687b      	ldr	r3, [r7, #4]
 80239bc:	681b      	ldr	r3, [r3, #0]
 80239be:	2204      	movs	r2, #4
 80239c0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80239c2:	6878      	ldr	r0, [r7, #4]
 80239c4:	f000 f853 	bl	8023a6e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80239c8:	68fb      	ldr	r3, [r7, #12]
 80239ca:	f003 0302 	and.w	r3, r3, #2
 80239ce:	2b00      	cmp	r3, #0
 80239d0:	d024      	beq.n	8023a1c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80239d2:	68bb      	ldr	r3, [r7, #8]
 80239d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80239d8:	2b00      	cmp	r3, #0
 80239da:	d01f      	beq.n	8023a1c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80239dc:	687b      	ldr	r3, [r7, #4]
 80239de:	681b      	ldr	r3, [r3, #0]
 80239e0:	681a      	ldr	r2, [r3, #0]
 80239e2:	687b      	ldr	r3, [r7, #4]
 80239e4:	681b      	ldr	r3, [r3, #0]
 80239e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80239ea:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80239ec:	687b      	ldr	r3, [r7, #4]
 80239ee:	681b      	ldr	r3, [r3, #0]
 80239f0:	2202      	movs	r2, #2
 80239f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80239f4:	687b      	ldr	r3, [r7, #4]
 80239f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80239f8:	687b      	ldr	r3, [r7, #4]
 80239fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80239fc:	687b      	ldr	r3, [r7, #4]
 80239fe:	2201      	movs	r2, #1
 8023a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023a04:	687b      	ldr	r3, [r7, #4]
 8023a06:	2200      	movs	r2, #0
 8023a08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8023a0c:	687b      	ldr	r3, [r7, #4]
 8023a0e:	691b      	ldr	r3, [r3, #16]
 8023a10:	2b00      	cmp	r3, #0
 8023a12:	d003      	beq.n	8023a1c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8023a14:	687b      	ldr	r3, [r7, #4]
 8023a16:	691b      	ldr	r3, [r3, #16]
 8023a18:	6878      	ldr	r0, [r7, #4]
 8023a1a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8023a1c:	68fb      	ldr	r3, [r7, #12]
 8023a1e:	f003 0310 	and.w	r3, r3, #16
 8023a22:	2b00      	cmp	r3, #0
 8023a24:	d01f      	beq.n	8023a66 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8023a26:	68bb      	ldr	r3, [r7, #8]
 8023a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8023a2c:	2b00      	cmp	r3, #0
 8023a2e:	d01a      	beq.n	8023a66 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8023a30:	687b      	ldr	r3, [r7, #4]
 8023a32:	681b      	ldr	r3, [r3, #0]
 8023a34:	681a      	ldr	r2, [r3, #0]
 8023a36:	687b      	ldr	r3, [r7, #4]
 8023a38:	681b      	ldr	r3, [r3, #0]
 8023a3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8023a3e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8023a40:	687b      	ldr	r3, [r7, #4]
 8023a42:	681b      	ldr	r3, [r3, #0]
 8023a44:	2210      	movs	r2, #16
 8023a46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8023a48:	687b      	ldr	r3, [r7, #4]
 8023a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8023a4c:	687b      	ldr	r3, [r7, #4]
 8023a4e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8023a50:	687b      	ldr	r3, [r7, #4]
 8023a52:	2201      	movs	r2, #1
 8023a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023a58:	687b      	ldr	r3, [r7, #4]
 8023a5a:	2200      	movs	r2, #0
 8023a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8023a60:	6878      	ldr	r0, [r7, #4]
 8023a62:	f000 f80e 	bl	8023a82 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8023a66:	bf00      	nop
 8023a68:	3710      	adds	r7, #16
 8023a6a:	46bd      	mov	sp, r7
 8023a6c:	bd80      	pop	{r7, pc}

08023a6e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8023a6e:	b480      	push	{r7}
 8023a70:	b083      	sub	sp, #12
 8023a72:	af00      	add	r7, sp, #0
 8023a74:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8023a76:	bf00      	nop
 8023a78:	370c      	adds	r7, #12
 8023a7a:	46bd      	mov	sp, r7
 8023a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a80:	4770      	bx	lr

08023a82 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8023a82:	b480      	push	{r7}
 8023a84:	b083      	sub	sp, #12
 8023a86:	af00      	add	r7, sp, #0
 8023a88:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8023a8a:	bf00      	nop
 8023a8c:	370c      	adds	r7, #12
 8023a8e:	46bd      	mov	sp, r7
 8023a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a94:	4770      	bx	lr
	...

08023a98 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8023a98:	b480      	push	{r7}
 8023a9a:	b087      	sub	sp, #28
 8023a9c:	af00      	add	r7, sp, #0
 8023a9e:	6078      	str	r0, [r7, #4]
 8023aa0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8023aa2:	687b      	ldr	r3, [r7, #4]
 8023aa4:	685b      	ldr	r3, [r3, #4]
 8023aa6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8023aaa:	687b      	ldr	r3, [r7, #4]
 8023aac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8023ab0:	2b01      	cmp	r3, #1
 8023ab2:	d101      	bne.n	8023ab8 <HAL_DMA2D_ConfigLayer+0x20>
 8023ab4:	2302      	movs	r3, #2
 8023ab6:	e079      	b.n	8023bac <HAL_DMA2D_ConfigLayer+0x114>
 8023ab8:	687b      	ldr	r3, [r7, #4]
 8023aba:	2201      	movs	r2, #1
 8023abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023ac0:	687b      	ldr	r3, [r7, #4]
 8023ac2:	2202      	movs	r2, #2
 8023ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8023ac8:	683b      	ldr	r3, [r7, #0]
 8023aca:	011b      	lsls	r3, r3, #4
 8023acc:	3318      	adds	r3, #24
 8023ace:	687a      	ldr	r2, [r7, #4]
 8023ad0:	4413      	add	r3, r2
 8023ad2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8023ad4:	693b      	ldr	r3, [r7, #16]
 8023ad6:	685a      	ldr	r2, [r3, #4]
 8023ad8:	693b      	ldr	r3, [r7, #16]
 8023ada:	689b      	ldr	r3, [r3, #8]
 8023adc:	041b      	lsls	r3, r3, #16
 8023ade:	4313      	orrs	r3, r2
 8023ae0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8023ae2:	4b35      	ldr	r3, [pc, #212]	; (8023bb8 <HAL_DMA2D_ConfigLayer+0x120>)
 8023ae4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8023ae6:	693b      	ldr	r3, [r7, #16]
 8023ae8:	685b      	ldr	r3, [r3, #4]
 8023aea:	2b0a      	cmp	r3, #10
 8023aec:	d003      	beq.n	8023af6 <HAL_DMA2D_ConfigLayer+0x5e>
 8023aee:	693b      	ldr	r3, [r7, #16]
 8023af0:	685b      	ldr	r3, [r3, #4]
 8023af2:	2b09      	cmp	r3, #9
 8023af4:	d107      	bne.n	8023b06 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8023af6:	693b      	ldr	r3, [r7, #16]
 8023af8:	68db      	ldr	r3, [r3, #12]
 8023afa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8023afe:	697a      	ldr	r2, [r7, #20]
 8023b00:	4313      	orrs	r3, r2
 8023b02:	617b      	str	r3, [r7, #20]
 8023b04:	e005      	b.n	8023b12 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8023b06:	693b      	ldr	r3, [r7, #16]
 8023b08:	68db      	ldr	r3, [r3, #12]
 8023b0a:	061b      	lsls	r3, r3, #24
 8023b0c:	697a      	ldr	r2, [r7, #20]
 8023b0e:	4313      	orrs	r3, r2
 8023b10:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8023b12:	683b      	ldr	r3, [r7, #0]
 8023b14:	2b00      	cmp	r3, #0
 8023b16:	d120      	bne.n	8023b5a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8023b18:	687b      	ldr	r3, [r7, #4]
 8023b1a:	681b      	ldr	r3, [r3, #0]
 8023b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8023b1e:	68fb      	ldr	r3, [r7, #12]
 8023b20:	43db      	mvns	r3, r3
 8023b22:	ea02 0103 	and.w	r1, r2, r3
 8023b26:	687b      	ldr	r3, [r7, #4]
 8023b28:	681b      	ldr	r3, [r3, #0]
 8023b2a:	697a      	ldr	r2, [r7, #20]
 8023b2c:	430a      	orrs	r2, r1
 8023b2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8023b30:	687b      	ldr	r3, [r7, #4]
 8023b32:	681b      	ldr	r3, [r3, #0]
 8023b34:	693a      	ldr	r2, [r7, #16]
 8023b36:	6812      	ldr	r2, [r2, #0]
 8023b38:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8023b3a:	693b      	ldr	r3, [r7, #16]
 8023b3c:	685b      	ldr	r3, [r3, #4]
 8023b3e:	2b0a      	cmp	r3, #10
 8023b40:	d003      	beq.n	8023b4a <HAL_DMA2D_ConfigLayer+0xb2>
 8023b42:	693b      	ldr	r3, [r7, #16]
 8023b44:	685b      	ldr	r3, [r3, #4]
 8023b46:	2b09      	cmp	r3, #9
 8023b48:	d127      	bne.n	8023b9a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8023b4a:	693b      	ldr	r3, [r7, #16]
 8023b4c:	68da      	ldr	r2, [r3, #12]
 8023b4e:	687b      	ldr	r3, [r7, #4]
 8023b50:	681b      	ldr	r3, [r3, #0]
 8023b52:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8023b56:	629a      	str	r2, [r3, #40]	; 0x28
 8023b58:	e01f      	b.n	8023b9a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8023b5a:	687b      	ldr	r3, [r7, #4]
 8023b5c:	681b      	ldr	r3, [r3, #0]
 8023b5e:	69da      	ldr	r2, [r3, #28]
 8023b60:	68fb      	ldr	r3, [r7, #12]
 8023b62:	43db      	mvns	r3, r3
 8023b64:	ea02 0103 	and.w	r1, r2, r3
 8023b68:	687b      	ldr	r3, [r7, #4]
 8023b6a:	681b      	ldr	r3, [r3, #0]
 8023b6c:	697a      	ldr	r2, [r7, #20]
 8023b6e:	430a      	orrs	r2, r1
 8023b70:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8023b72:	687b      	ldr	r3, [r7, #4]
 8023b74:	681b      	ldr	r3, [r3, #0]
 8023b76:	693a      	ldr	r2, [r7, #16]
 8023b78:	6812      	ldr	r2, [r2, #0]
 8023b7a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8023b7c:	693b      	ldr	r3, [r7, #16]
 8023b7e:	685b      	ldr	r3, [r3, #4]
 8023b80:	2b0a      	cmp	r3, #10
 8023b82:	d003      	beq.n	8023b8c <HAL_DMA2D_ConfigLayer+0xf4>
 8023b84:	693b      	ldr	r3, [r7, #16]
 8023b86:	685b      	ldr	r3, [r3, #4]
 8023b88:	2b09      	cmp	r3, #9
 8023b8a:	d106      	bne.n	8023b9a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8023b8c:	693b      	ldr	r3, [r7, #16]
 8023b8e:	68da      	ldr	r2, [r3, #12]
 8023b90:	687b      	ldr	r3, [r7, #4]
 8023b92:	681b      	ldr	r3, [r3, #0]
 8023b94:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8023b98:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8023b9a:	687b      	ldr	r3, [r7, #4]
 8023b9c:	2201      	movs	r2, #1
 8023b9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8023ba2:	687b      	ldr	r3, [r7, #4]
 8023ba4:	2200      	movs	r2, #0
 8023ba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8023baa:	2300      	movs	r3, #0
}
 8023bac:	4618      	mov	r0, r3
 8023bae:	371c      	adds	r7, #28
 8023bb0:	46bd      	mov	sp, r7
 8023bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bb6:	4770      	bx	lr
 8023bb8:	ff03000f 	.word	0xff03000f

08023bbc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8023bbc:	b480      	push	{r7}
 8023bbe:	b08b      	sub	sp, #44	; 0x2c
 8023bc0:	af00      	add	r7, sp, #0
 8023bc2:	60f8      	str	r0, [r7, #12]
 8023bc4:	60b9      	str	r1, [r7, #8]
 8023bc6:	607a      	str	r2, [r7, #4]
 8023bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8023bca:	68fb      	ldr	r3, [r7, #12]
 8023bcc:	681b      	ldr	r3, [r3, #0]
 8023bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023bd0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8023bd4:	683b      	ldr	r3, [r7, #0]
 8023bd6:	041a      	lsls	r2, r3, #16
 8023bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023bda:	431a      	orrs	r2, r3
 8023bdc:	68fb      	ldr	r3, [r7, #12]
 8023bde:	681b      	ldr	r3, [r3, #0]
 8023be0:	430a      	orrs	r2, r1
 8023be2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8023be4:	68fb      	ldr	r3, [r7, #12]
 8023be6:	681b      	ldr	r3, [r3, #0]
 8023be8:	687a      	ldr	r2, [r7, #4]
 8023bea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8023bec:	68fb      	ldr	r3, [r7, #12]
 8023bee:	685b      	ldr	r3, [r3, #4]
 8023bf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8023bf4:	d174      	bne.n	8023ce0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8023bf6:	68bb      	ldr	r3, [r7, #8]
 8023bf8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8023bfc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8023bfe:	68bb      	ldr	r3, [r7, #8]
 8023c00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8023c04:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8023c06:	68bb      	ldr	r3, [r7, #8]
 8023c08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c0c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8023c0e:	68bb      	ldr	r3, [r7, #8]
 8023c10:	b2db      	uxtb	r3, r3
 8023c12:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8023c14:	68fb      	ldr	r3, [r7, #12]
 8023c16:	689b      	ldr	r3, [r3, #8]
 8023c18:	2b00      	cmp	r3, #0
 8023c1a:	d108      	bne.n	8023c2e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8023c1c:	69ba      	ldr	r2, [r7, #24]
 8023c1e:	69fb      	ldr	r3, [r7, #28]
 8023c20:	431a      	orrs	r2, r3
 8023c22:	6a3b      	ldr	r3, [r7, #32]
 8023c24:	4313      	orrs	r3, r2
 8023c26:	697a      	ldr	r2, [r7, #20]
 8023c28:	4313      	orrs	r3, r2
 8023c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8023c2c:	e053      	b.n	8023cd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8023c2e:	68fb      	ldr	r3, [r7, #12]
 8023c30:	689b      	ldr	r3, [r3, #8]
 8023c32:	2b01      	cmp	r3, #1
 8023c34:	d106      	bne.n	8023c44 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8023c36:	69ba      	ldr	r2, [r7, #24]
 8023c38:	69fb      	ldr	r3, [r7, #28]
 8023c3a:	4313      	orrs	r3, r2
 8023c3c:	697a      	ldr	r2, [r7, #20]
 8023c3e:	4313      	orrs	r3, r2
 8023c40:	627b      	str	r3, [r7, #36]	; 0x24
 8023c42:	e048      	b.n	8023cd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8023c44:	68fb      	ldr	r3, [r7, #12]
 8023c46:	689b      	ldr	r3, [r3, #8]
 8023c48:	2b02      	cmp	r3, #2
 8023c4a:	d111      	bne.n	8023c70 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8023c4c:	69fb      	ldr	r3, [r7, #28]
 8023c4e:	0cdb      	lsrs	r3, r3, #19
 8023c50:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8023c52:	69bb      	ldr	r3, [r7, #24]
 8023c54:	0a9b      	lsrs	r3, r3, #10
 8023c56:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8023c58:	697b      	ldr	r3, [r7, #20]
 8023c5a:	08db      	lsrs	r3, r3, #3
 8023c5c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8023c5e:	69bb      	ldr	r3, [r7, #24]
 8023c60:	015a      	lsls	r2, r3, #5
 8023c62:	69fb      	ldr	r3, [r7, #28]
 8023c64:	02db      	lsls	r3, r3, #11
 8023c66:	4313      	orrs	r3, r2
 8023c68:	697a      	ldr	r2, [r7, #20]
 8023c6a:	4313      	orrs	r3, r2
 8023c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8023c6e:	e032      	b.n	8023cd6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8023c70:	68fb      	ldr	r3, [r7, #12]
 8023c72:	689b      	ldr	r3, [r3, #8]
 8023c74:	2b03      	cmp	r3, #3
 8023c76:	d117      	bne.n	8023ca8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8023c78:	6a3b      	ldr	r3, [r7, #32]
 8023c7a:	0fdb      	lsrs	r3, r3, #31
 8023c7c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8023c7e:	69fb      	ldr	r3, [r7, #28]
 8023c80:	0cdb      	lsrs	r3, r3, #19
 8023c82:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8023c84:	69bb      	ldr	r3, [r7, #24]
 8023c86:	0adb      	lsrs	r3, r3, #11
 8023c88:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8023c8a:	697b      	ldr	r3, [r7, #20]
 8023c8c:	08db      	lsrs	r3, r3, #3
 8023c8e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8023c90:	69bb      	ldr	r3, [r7, #24]
 8023c92:	015a      	lsls	r2, r3, #5
 8023c94:	69fb      	ldr	r3, [r7, #28]
 8023c96:	029b      	lsls	r3, r3, #10
 8023c98:	431a      	orrs	r2, r3
 8023c9a:	6a3b      	ldr	r3, [r7, #32]
 8023c9c:	03db      	lsls	r3, r3, #15
 8023c9e:	4313      	orrs	r3, r2
 8023ca0:	697a      	ldr	r2, [r7, #20]
 8023ca2:	4313      	orrs	r3, r2
 8023ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8023ca6:	e016      	b.n	8023cd6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8023ca8:	6a3b      	ldr	r3, [r7, #32]
 8023caa:	0f1b      	lsrs	r3, r3, #28
 8023cac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8023cae:	69fb      	ldr	r3, [r7, #28]
 8023cb0:	0d1b      	lsrs	r3, r3, #20
 8023cb2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8023cb4:	69bb      	ldr	r3, [r7, #24]
 8023cb6:	0b1b      	lsrs	r3, r3, #12
 8023cb8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8023cba:	697b      	ldr	r3, [r7, #20]
 8023cbc:	091b      	lsrs	r3, r3, #4
 8023cbe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8023cc0:	69bb      	ldr	r3, [r7, #24]
 8023cc2:	011a      	lsls	r2, r3, #4
 8023cc4:	69fb      	ldr	r3, [r7, #28]
 8023cc6:	021b      	lsls	r3, r3, #8
 8023cc8:	431a      	orrs	r2, r3
 8023cca:	6a3b      	ldr	r3, [r7, #32]
 8023ccc:	031b      	lsls	r3, r3, #12
 8023cce:	4313      	orrs	r3, r2
 8023cd0:	697a      	ldr	r2, [r7, #20]
 8023cd2:	4313      	orrs	r3, r2
 8023cd4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8023cd6:	68fb      	ldr	r3, [r7, #12]
 8023cd8:	681b      	ldr	r3, [r3, #0]
 8023cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023cdc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8023cde:	e003      	b.n	8023ce8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8023ce0:	68fb      	ldr	r3, [r7, #12]
 8023ce2:	681b      	ldr	r3, [r3, #0]
 8023ce4:	68ba      	ldr	r2, [r7, #8]
 8023ce6:	60da      	str	r2, [r3, #12]
}
 8023ce8:	bf00      	nop
 8023cea:	372c      	adds	r7, #44	; 0x2c
 8023cec:	46bd      	mov	sp, r7
 8023cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cf2:	4770      	bx	lr

08023cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8023cf4:	b480      	push	{r7}
 8023cf6:	b089      	sub	sp, #36	; 0x24
 8023cf8:	af00      	add	r7, sp, #0
 8023cfa:	6078      	str	r0, [r7, #4]
 8023cfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8023cfe:	2300      	movs	r3, #0
 8023d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8023d02:	2300      	movs	r3, #0
 8023d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8023d06:	2300      	movs	r3, #0
 8023d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8023d0a:	2300      	movs	r3, #0
 8023d0c:	61fb      	str	r3, [r7, #28]
 8023d0e:	e177      	b.n	8024000 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8023d10:	2201      	movs	r2, #1
 8023d12:	69fb      	ldr	r3, [r7, #28]
 8023d14:	fa02 f303 	lsl.w	r3, r2, r3
 8023d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8023d1a:	683b      	ldr	r3, [r7, #0]
 8023d1c:	681b      	ldr	r3, [r3, #0]
 8023d1e:	697a      	ldr	r2, [r7, #20]
 8023d20:	4013      	ands	r3, r2
 8023d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8023d24:	693a      	ldr	r2, [r7, #16]
 8023d26:	697b      	ldr	r3, [r7, #20]
 8023d28:	429a      	cmp	r2, r3
 8023d2a:	f040 8166 	bne.w	8023ffa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8023d2e:	683b      	ldr	r3, [r7, #0]
 8023d30:	685b      	ldr	r3, [r3, #4]
 8023d32:	f003 0303 	and.w	r3, r3, #3
 8023d36:	2b01      	cmp	r3, #1
 8023d38:	d005      	beq.n	8023d46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8023d3a:	683b      	ldr	r3, [r7, #0]
 8023d3c:	685b      	ldr	r3, [r3, #4]
 8023d3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8023d42:	2b02      	cmp	r3, #2
 8023d44:	d130      	bne.n	8023da8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8023d46:	687b      	ldr	r3, [r7, #4]
 8023d48:	689b      	ldr	r3, [r3, #8]
 8023d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8023d4c:	69fb      	ldr	r3, [r7, #28]
 8023d4e:	005b      	lsls	r3, r3, #1
 8023d50:	2203      	movs	r2, #3
 8023d52:	fa02 f303 	lsl.w	r3, r2, r3
 8023d56:	43db      	mvns	r3, r3
 8023d58:	69ba      	ldr	r2, [r7, #24]
 8023d5a:	4013      	ands	r3, r2
 8023d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8023d5e:	683b      	ldr	r3, [r7, #0]
 8023d60:	68da      	ldr	r2, [r3, #12]
 8023d62:	69fb      	ldr	r3, [r7, #28]
 8023d64:	005b      	lsls	r3, r3, #1
 8023d66:	fa02 f303 	lsl.w	r3, r2, r3
 8023d6a:	69ba      	ldr	r2, [r7, #24]
 8023d6c:	4313      	orrs	r3, r2
 8023d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8023d70:	687b      	ldr	r3, [r7, #4]
 8023d72:	69ba      	ldr	r2, [r7, #24]
 8023d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8023d76:	687b      	ldr	r3, [r7, #4]
 8023d78:	685b      	ldr	r3, [r3, #4]
 8023d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8023d7c:	2201      	movs	r2, #1
 8023d7e:	69fb      	ldr	r3, [r7, #28]
 8023d80:	fa02 f303 	lsl.w	r3, r2, r3
 8023d84:	43db      	mvns	r3, r3
 8023d86:	69ba      	ldr	r2, [r7, #24]
 8023d88:	4013      	ands	r3, r2
 8023d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8023d8c:	683b      	ldr	r3, [r7, #0]
 8023d8e:	685b      	ldr	r3, [r3, #4]
 8023d90:	091b      	lsrs	r3, r3, #4
 8023d92:	f003 0201 	and.w	r2, r3, #1
 8023d96:	69fb      	ldr	r3, [r7, #28]
 8023d98:	fa02 f303 	lsl.w	r3, r2, r3
 8023d9c:	69ba      	ldr	r2, [r7, #24]
 8023d9e:	4313      	orrs	r3, r2
 8023da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8023da2:	687b      	ldr	r3, [r7, #4]
 8023da4:	69ba      	ldr	r2, [r7, #24]
 8023da6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8023da8:	683b      	ldr	r3, [r7, #0]
 8023daa:	685b      	ldr	r3, [r3, #4]
 8023dac:	f003 0303 	and.w	r3, r3, #3
 8023db0:	2b03      	cmp	r3, #3
 8023db2:	d017      	beq.n	8023de4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8023db4:	687b      	ldr	r3, [r7, #4]
 8023db6:	68db      	ldr	r3, [r3, #12]
 8023db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8023dba:	69fb      	ldr	r3, [r7, #28]
 8023dbc:	005b      	lsls	r3, r3, #1
 8023dbe:	2203      	movs	r2, #3
 8023dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8023dc4:	43db      	mvns	r3, r3
 8023dc6:	69ba      	ldr	r2, [r7, #24]
 8023dc8:	4013      	ands	r3, r2
 8023dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8023dcc:	683b      	ldr	r3, [r7, #0]
 8023dce:	689a      	ldr	r2, [r3, #8]
 8023dd0:	69fb      	ldr	r3, [r7, #28]
 8023dd2:	005b      	lsls	r3, r3, #1
 8023dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8023dd8:	69ba      	ldr	r2, [r7, #24]
 8023dda:	4313      	orrs	r3, r2
 8023ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8023dde:	687b      	ldr	r3, [r7, #4]
 8023de0:	69ba      	ldr	r2, [r7, #24]
 8023de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8023de4:	683b      	ldr	r3, [r7, #0]
 8023de6:	685b      	ldr	r3, [r3, #4]
 8023de8:	f003 0303 	and.w	r3, r3, #3
 8023dec:	2b02      	cmp	r3, #2
 8023dee:	d123      	bne.n	8023e38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8023df0:	69fb      	ldr	r3, [r7, #28]
 8023df2:	08da      	lsrs	r2, r3, #3
 8023df4:	687b      	ldr	r3, [r7, #4]
 8023df6:	3208      	adds	r2, #8
 8023df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8023dfe:	69fb      	ldr	r3, [r7, #28]
 8023e00:	f003 0307 	and.w	r3, r3, #7
 8023e04:	009b      	lsls	r3, r3, #2
 8023e06:	220f      	movs	r2, #15
 8023e08:	fa02 f303 	lsl.w	r3, r2, r3
 8023e0c:	43db      	mvns	r3, r3
 8023e0e:	69ba      	ldr	r2, [r7, #24]
 8023e10:	4013      	ands	r3, r2
 8023e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8023e14:	683b      	ldr	r3, [r7, #0]
 8023e16:	691a      	ldr	r2, [r3, #16]
 8023e18:	69fb      	ldr	r3, [r7, #28]
 8023e1a:	f003 0307 	and.w	r3, r3, #7
 8023e1e:	009b      	lsls	r3, r3, #2
 8023e20:	fa02 f303 	lsl.w	r3, r2, r3
 8023e24:	69ba      	ldr	r2, [r7, #24]
 8023e26:	4313      	orrs	r3, r2
 8023e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8023e2a:	69fb      	ldr	r3, [r7, #28]
 8023e2c:	08da      	lsrs	r2, r3, #3
 8023e2e:	687b      	ldr	r3, [r7, #4]
 8023e30:	3208      	adds	r2, #8
 8023e32:	69b9      	ldr	r1, [r7, #24]
 8023e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8023e38:	687b      	ldr	r3, [r7, #4]
 8023e3a:	681b      	ldr	r3, [r3, #0]
 8023e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8023e3e:	69fb      	ldr	r3, [r7, #28]
 8023e40:	005b      	lsls	r3, r3, #1
 8023e42:	2203      	movs	r2, #3
 8023e44:	fa02 f303 	lsl.w	r3, r2, r3
 8023e48:	43db      	mvns	r3, r3
 8023e4a:	69ba      	ldr	r2, [r7, #24]
 8023e4c:	4013      	ands	r3, r2
 8023e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8023e50:	683b      	ldr	r3, [r7, #0]
 8023e52:	685b      	ldr	r3, [r3, #4]
 8023e54:	f003 0203 	and.w	r2, r3, #3
 8023e58:	69fb      	ldr	r3, [r7, #28]
 8023e5a:	005b      	lsls	r3, r3, #1
 8023e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8023e60:	69ba      	ldr	r2, [r7, #24]
 8023e62:	4313      	orrs	r3, r2
 8023e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8023e66:	687b      	ldr	r3, [r7, #4]
 8023e68:	69ba      	ldr	r2, [r7, #24]
 8023e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8023e6c:	683b      	ldr	r3, [r7, #0]
 8023e6e:	685b      	ldr	r3, [r3, #4]
 8023e70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8023e74:	2b00      	cmp	r3, #0
 8023e76:	f000 80c0 	beq.w	8023ffa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8023e7a:	2300      	movs	r3, #0
 8023e7c:	60fb      	str	r3, [r7, #12]
 8023e7e:	4b66      	ldr	r3, [pc, #408]	; (8024018 <HAL_GPIO_Init+0x324>)
 8023e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023e82:	4a65      	ldr	r2, [pc, #404]	; (8024018 <HAL_GPIO_Init+0x324>)
 8023e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8023e88:	6453      	str	r3, [r2, #68]	; 0x44
 8023e8a:	4b63      	ldr	r3, [pc, #396]	; (8024018 <HAL_GPIO_Init+0x324>)
 8023e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023e92:	60fb      	str	r3, [r7, #12]
 8023e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8023e96:	4a61      	ldr	r2, [pc, #388]	; (802401c <HAL_GPIO_Init+0x328>)
 8023e98:	69fb      	ldr	r3, [r7, #28]
 8023e9a:	089b      	lsrs	r3, r3, #2
 8023e9c:	3302      	adds	r3, #2
 8023e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8023ea4:	69fb      	ldr	r3, [r7, #28]
 8023ea6:	f003 0303 	and.w	r3, r3, #3
 8023eaa:	009b      	lsls	r3, r3, #2
 8023eac:	220f      	movs	r2, #15
 8023eae:	fa02 f303 	lsl.w	r3, r2, r3
 8023eb2:	43db      	mvns	r3, r3
 8023eb4:	69ba      	ldr	r2, [r7, #24]
 8023eb6:	4013      	ands	r3, r2
 8023eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8023eba:	687b      	ldr	r3, [r7, #4]
 8023ebc:	4a58      	ldr	r2, [pc, #352]	; (8024020 <HAL_GPIO_Init+0x32c>)
 8023ebe:	4293      	cmp	r3, r2
 8023ec0:	d037      	beq.n	8023f32 <HAL_GPIO_Init+0x23e>
 8023ec2:	687b      	ldr	r3, [r7, #4]
 8023ec4:	4a57      	ldr	r2, [pc, #348]	; (8024024 <HAL_GPIO_Init+0x330>)
 8023ec6:	4293      	cmp	r3, r2
 8023ec8:	d031      	beq.n	8023f2e <HAL_GPIO_Init+0x23a>
 8023eca:	687b      	ldr	r3, [r7, #4]
 8023ecc:	4a56      	ldr	r2, [pc, #344]	; (8024028 <HAL_GPIO_Init+0x334>)
 8023ece:	4293      	cmp	r3, r2
 8023ed0:	d02b      	beq.n	8023f2a <HAL_GPIO_Init+0x236>
 8023ed2:	687b      	ldr	r3, [r7, #4]
 8023ed4:	4a55      	ldr	r2, [pc, #340]	; (802402c <HAL_GPIO_Init+0x338>)
 8023ed6:	4293      	cmp	r3, r2
 8023ed8:	d025      	beq.n	8023f26 <HAL_GPIO_Init+0x232>
 8023eda:	687b      	ldr	r3, [r7, #4]
 8023edc:	4a54      	ldr	r2, [pc, #336]	; (8024030 <HAL_GPIO_Init+0x33c>)
 8023ede:	4293      	cmp	r3, r2
 8023ee0:	d01f      	beq.n	8023f22 <HAL_GPIO_Init+0x22e>
 8023ee2:	687b      	ldr	r3, [r7, #4]
 8023ee4:	4a53      	ldr	r2, [pc, #332]	; (8024034 <HAL_GPIO_Init+0x340>)
 8023ee6:	4293      	cmp	r3, r2
 8023ee8:	d019      	beq.n	8023f1e <HAL_GPIO_Init+0x22a>
 8023eea:	687b      	ldr	r3, [r7, #4]
 8023eec:	4a52      	ldr	r2, [pc, #328]	; (8024038 <HAL_GPIO_Init+0x344>)
 8023eee:	4293      	cmp	r3, r2
 8023ef0:	d013      	beq.n	8023f1a <HAL_GPIO_Init+0x226>
 8023ef2:	687b      	ldr	r3, [r7, #4]
 8023ef4:	4a51      	ldr	r2, [pc, #324]	; (802403c <HAL_GPIO_Init+0x348>)
 8023ef6:	4293      	cmp	r3, r2
 8023ef8:	d00d      	beq.n	8023f16 <HAL_GPIO_Init+0x222>
 8023efa:	687b      	ldr	r3, [r7, #4]
 8023efc:	4a50      	ldr	r2, [pc, #320]	; (8024040 <HAL_GPIO_Init+0x34c>)
 8023efe:	4293      	cmp	r3, r2
 8023f00:	d007      	beq.n	8023f12 <HAL_GPIO_Init+0x21e>
 8023f02:	687b      	ldr	r3, [r7, #4]
 8023f04:	4a4f      	ldr	r2, [pc, #316]	; (8024044 <HAL_GPIO_Init+0x350>)
 8023f06:	4293      	cmp	r3, r2
 8023f08:	d101      	bne.n	8023f0e <HAL_GPIO_Init+0x21a>
 8023f0a:	2309      	movs	r3, #9
 8023f0c:	e012      	b.n	8023f34 <HAL_GPIO_Init+0x240>
 8023f0e:	230a      	movs	r3, #10
 8023f10:	e010      	b.n	8023f34 <HAL_GPIO_Init+0x240>
 8023f12:	2308      	movs	r3, #8
 8023f14:	e00e      	b.n	8023f34 <HAL_GPIO_Init+0x240>
 8023f16:	2307      	movs	r3, #7
 8023f18:	e00c      	b.n	8023f34 <HAL_GPIO_Init+0x240>
 8023f1a:	2306      	movs	r3, #6
 8023f1c:	e00a      	b.n	8023f34 <HAL_GPIO_Init+0x240>
 8023f1e:	2305      	movs	r3, #5
 8023f20:	e008      	b.n	8023f34 <HAL_GPIO_Init+0x240>
 8023f22:	2304      	movs	r3, #4
 8023f24:	e006      	b.n	8023f34 <HAL_GPIO_Init+0x240>
 8023f26:	2303      	movs	r3, #3
 8023f28:	e004      	b.n	8023f34 <HAL_GPIO_Init+0x240>
 8023f2a:	2302      	movs	r3, #2
 8023f2c:	e002      	b.n	8023f34 <HAL_GPIO_Init+0x240>
 8023f2e:	2301      	movs	r3, #1
 8023f30:	e000      	b.n	8023f34 <HAL_GPIO_Init+0x240>
 8023f32:	2300      	movs	r3, #0
 8023f34:	69fa      	ldr	r2, [r7, #28]
 8023f36:	f002 0203 	and.w	r2, r2, #3
 8023f3a:	0092      	lsls	r2, r2, #2
 8023f3c:	4093      	lsls	r3, r2
 8023f3e:	69ba      	ldr	r2, [r7, #24]
 8023f40:	4313      	orrs	r3, r2
 8023f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8023f44:	4935      	ldr	r1, [pc, #212]	; (802401c <HAL_GPIO_Init+0x328>)
 8023f46:	69fb      	ldr	r3, [r7, #28]
 8023f48:	089b      	lsrs	r3, r3, #2
 8023f4a:	3302      	adds	r3, #2
 8023f4c:	69ba      	ldr	r2, [r7, #24]
 8023f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8023f52:	4b3d      	ldr	r3, [pc, #244]	; (8024048 <HAL_GPIO_Init+0x354>)
 8023f54:	689b      	ldr	r3, [r3, #8]
 8023f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023f58:	693b      	ldr	r3, [r7, #16]
 8023f5a:	43db      	mvns	r3, r3
 8023f5c:	69ba      	ldr	r2, [r7, #24]
 8023f5e:	4013      	ands	r3, r2
 8023f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8023f62:	683b      	ldr	r3, [r7, #0]
 8023f64:	685b      	ldr	r3, [r3, #4]
 8023f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8023f6a:	2b00      	cmp	r3, #0
 8023f6c:	d003      	beq.n	8023f76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8023f6e:	69ba      	ldr	r2, [r7, #24]
 8023f70:	693b      	ldr	r3, [r7, #16]
 8023f72:	4313      	orrs	r3, r2
 8023f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8023f76:	4a34      	ldr	r2, [pc, #208]	; (8024048 <HAL_GPIO_Init+0x354>)
 8023f78:	69bb      	ldr	r3, [r7, #24]
 8023f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8023f7c:	4b32      	ldr	r3, [pc, #200]	; (8024048 <HAL_GPIO_Init+0x354>)
 8023f7e:	68db      	ldr	r3, [r3, #12]
 8023f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023f82:	693b      	ldr	r3, [r7, #16]
 8023f84:	43db      	mvns	r3, r3
 8023f86:	69ba      	ldr	r2, [r7, #24]
 8023f88:	4013      	ands	r3, r2
 8023f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8023f8c:	683b      	ldr	r3, [r7, #0]
 8023f8e:	685b      	ldr	r3, [r3, #4]
 8023f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8023f94:	2b00      	cmp	r3, #0
 8023f96:	d003      	beq.n	8023fa0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8023f98:	69ba      	ldr	r2, [r7, #24]
 8023f9a:	693b      	ldr	r3, [r7, #16]
 8023f9c:	4313      	orrs	r3, r2
 8023f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8023fa0:	4a29      	ldr	r2, [pc, #164]	; (8024048 <HAL_GPIO_Init+0x354>)
 8023fa2:	69bb      	ldr	r3, [r7, #24]
 8023fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8023fa6:	4b28      	ldr	r3, [pc, #160]	; (8024048 <HAL_GPIO_Init+0x354>)
 8023fa8:	685b      	ldr	r3, [r3, #4]
 8023faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023fac:	693b      	ldr	r3, [r7, #16]
 8023fae:	43db      	mvns	r3, r3
 8023fb0:	69ba      	ldr	r2, [r7, #24]
 8023fb2:	4013      	ands	r3, r2
 8023fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8023fb6:	683b      	ldr	r3, [r7, #0]
 8023fb8:	685b      	ldr	r3, [r3, #4]
 8023fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023fbe:	2b00      	cmp	r3, #0
 8023fc0:	d003      	beq.n	8023fca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8023fc2:	69ba      	ldr	r2, [r7, #24]
 8023fc4:	693b      	ldr	r3, [r7, #16]
 8023fc6:	4313      	orrs	r3, r2
 8023fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8023fca:	4a1f      	ldr	r2, [pc, #124]	; (8024048 <HAL_GPIO_Init+0x354>)
 8023fcc:	69bb      	ldr	r3, [r7, #24]
 8023fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8023fd0:	4b1d      	ldr	r3, [pc, #116]	; (8024048 <HAL_GPIO_Init+0x354>)
 8023fd2:	681b      	ldr	r3, [r3, #0]
 8023fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023fd6:	693b      	ldr	r3, [r7, #16]
 8023fd8:	43db      	mvns	r3, r3
 8023fda:	69ba      	ldr	r2, [r7, #24]
 8023fdc:	4013      	ands	r3, r2
 8023fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8023fe0:	683b      	ldr	r3, [r7, #0]
 8023fe2:	685b      	ldr	r3, [r3, #4]
 8023fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8023fe8:	2b00      	cmp	r3, #0
 8023fea:	d003      	beq.n	8023ff4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8023fec:	69ba      	ldr	r2, [r7, #24]
 8023fee:	693b      	ldr	r3, [r7, #16]
 8023ff0:	4313      	orrs	r3, r2
 8023ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8023ff4:	4a14      	ldr	r2, [pc, #80]	; (8024048 <HAL_GPIO_Init+0x354>)
 8023ff6:	69bb      	ldr	r3, [r7, #24]
 8023ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8023ffa:	69fb      	ldr	r3, [r7, #28]
 8023ffc:	3301      	adds	r3, #1
 8023ffe:	61fb      	str	r3, [r7, #28]
 8024000:	69fb      	ldr	r3, [r7, #28]
 8024002:	2b0f      	cmp	r3, #15
 8024004:	f67f ae84 	bls.w	8023d10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8024008:	bf00      	nop
 802400a:	bf00      	nop
 802400c:	3724      	adds	r7, #36	; 0x24
 802400e:	46bd      	mov	sp, r7
 8024010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024014:	4770      	bx	lr
 8024016:	bf00      	nop
 8024018:	40023800 	.word	0x40023800
 802401c:	40013800 	.word	0x40013800
 8024020:	40020000 	.word	0x40020000
 8024024:	40020400 	.word	0x40020400
 8024028:	40020800 	.word	0x40020800
 802402c:	40020c00 	.word	0x40020c00
 8024030:	40021000 	.word	0x40021000
 8024034:	40021400 	.word	0x40021400
 8024038:	40021800 	.word	0x40021800
 802403c:	40021c00 	.word	0x40021c00
 8024040:	40022000 	.word	0x40022000
 8024044:	40022400 	.word	0x40022400
 8024048:	40013c00 	.word	0x40013c00

0802404c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 802404c:	b480      	push	{r7}
 802404e:	b087      	sub	sp, #28
 8024050:	af00      	add	r7, sp, #0
 8024052:	6078      	str	r0, [r7, #4]
 8024054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024056:	2300      	movs	r3, #0
 8024058:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 802405a:	2300      	movs	r3, #0
 802405c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 802405e:	2300      	movs	r3, #0
 8024060:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024062:	2300      	movs	r3, #0
 8024064:	617b      	str	r3, [r7, #20]
 8024066:	e0d9      	b.n	802421c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024068:	2201      	movs	r2, #1
 802406a:	697b      	ldr	r3, [r7, #20]
 802406c:	fa02 f303 	lsl.w	r3, r2, r3
 8024070:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8024072:	683a      	ldr	r2, [r7, #0]
 8024074:	693b      	ldr	r3, [r7, #16]
 8024076:	4013      	ands	r3, r2
 8024078:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 802407a:	68fa      	ldr	r2, [r7, #12]
 802407c:	693b      	ldr	r3, [r7, #16]
 802407e:	429a      	cmp	r2, r3
 8024080:	f040 80c9 	bne.w	8024216 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8024084:	4a6b      	ldr	r2, [pc, #428]	; (8024234 <HAL_GPIO_DeInit+0x1e8>)
 8024086:	697b      	ldr	r3, [r7, #20]
 8024088:	089b      	lsrs	r3, r3, #2
 802408a:	3302      	adds	r3, #2
 802408c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024090:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8024092:	697b      	ldr	r3, [r7, #20]
 8024094:	f003 0303 	and.w	r3, r3, #3
 8024098:	009b      	lsls	r3, r3, #2
 802409a:	220f      	movs	r2, #15
 802409c:	fa02 f303 	lsl.w	r3, r2, r3
 80240a0:	68ba      	ldr	r2, [r7, #8]
 80240a2:	4013      	ands	r3, r2
 80240a4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80240a6:	687b      	ldr	r3, [r7, #4]
 80240a8:	4a63      	ldr	r2, [pc, #396]	; (8024238 <HAL_GPIO_DeInit+0x1ec>)
 80240aa:	4293      	cmp	r3, r2
 80240ac:	d037      	beq.n	802411e <HAL_GPIO_DeInit+0xd2>
 80240ae:	687b      	ldr	r3, [r7, #4]
 80240b0:	4a62      	ldr	r2, [pc, #392]	; (802423c <HAL_GPIO_DeInit+0x1f0>)
 80240b2:	4293      	cmp	r3, r2
 80240b4:	d031      	beq.n	802411a <HAL_GPIO_DeInit+0xce>
 80240b6:	687b      	ldr	r3, [r7, #4]
 80240b8:	4a61      	ldr	r2, [pc, #388]	; (8024240 <HAL_GPIO_DeInit+0x1f4>)
 80240ba:	4293      	cmp	r3, r2
 80240bc:	d02b      	beq.n	8024116 <HAL_GPIO_DeInit+0xca>
 80240be:	687b      	ldr	r3, [r7, #4]
 80240c0:	4a60      	ldr	r2, [pc, #384]	; (8024244 <HAL_GPIO_DeInit+0x1f8>)
 80240c2:	4293      	cmp	r3, r2
 80240c4:	d025      	beq.n	8024112 <HAL_GPIO_DeInit+0xc6>
 80240c6:	687b      	ldr	r3, [r7, #4]
 80240c8:	4a5f      	ldr	r2, [pc, #380]	; (8024248 <HAL_GPIO_DeInit+0x1fc>)
 80240ca:	4293      	cmp	r3, r2
 80240cc:	d01f      	beq.n	802410e <HAL_GPIO_DeInit+0xc2>
 80240ce:	687b      	ldr	r3, [r7, #4]
 80240d0:	4a5e      	ldr	r2, [pc, #376]	; (802424c <HAL_GPIO_DeInit+0x200>)
 80240d2:	4293      	cmp	r3, r2
 80240d4:	d019      	beq.n	802410a <HAL_GPIO_DeInit+0xbe>
 80240d6:	687b      	ldr	r3, [r7, #4]
 80240d8:	4a5d      	ldr	r2, [pc, #372]	; (8024250 <HAL_GPIO_DeInit+0x204>)
 80240da:	4293      	cmp	r3, r2
 80240dc:	d013      	beq.n	8024106 <HAL_GPIO_DeInit+0xba>
 80240de:	687b      	ldr	r3, [r7, #4]
 80240e0:	4a5c      	ldr	r2, [pc, #368]	; (8024254 <HAL_GPIO_DeInit+0x208>)
 80240e2:	4293      	cmp	r3, r2
 80240e4:	d00d      	beq.n	8024102 <HAL_GPIO_DeInit+0xb6>
 80240e6:	687b      	ldr	r3, [r7, #4]
 80240e8:	4a5b      	ldr	r2, [pc, #364]	; (8024258 <HAL_GPIO_DeInit+0x20c>)
 80240ea:	4293      	cmp	r3, r2
 80240ec:	d007      	beq.n	80240fe <HAL_GPIO_DeInit+0xb2>
 80240ee:	687b      	ldr	r3, [r7, #4]
 80240f0:	4a5a      	ldr	r2, [pc, #360]	; (802425c <HAL_GPIO_DeInit+0x210>)
 80240f2:	4293      	cmp	r3, r2
 80240f4:	d101      	bne.n	80240fa <HAL_GPIO_DeInit+0xae>
 80240f6:	2309      	movs	r3, #9
 80240f8:	e012      	b.n	8024120 <HAL_GPIO_DeInit+0xd4>
 80240fa:	230a      	movs	r3, #10
 80240fc:	e010      	b.n	8024120 <HAL_GPIO_DeInit+0xd4>
 80240fe:	2308      	movs	r3, #8
 8024100:	e00e      	b.n	8024120 <HAL_GPIO_DeInit+0xd4>
 8024102:	2307      	movs	r3, #7
 8024104:	e00c      	b.n	8024120 <HAL_GPIO_DeInit+0xd4>
 8024106:	2306      	movs	r3, #6
 8024108:	e00a      	b.n	8024120 <HAL_GPIO_DeInit+0xd4>
 802410a:	2305      	movs	r3, #5
 802410c:	e008      	b.n	8024120 <HAL_GPIO_DeInit+0xd4>
 802410e:	2304      	movs	r3, #4
 8024110:	e006      	b.n	8024120 <HAL_GPIO_DeInit+0xd4>
 8024112:	2303      	movs	r3, #3
 8024114:	e004      	b.n	8024120 <HAL_GPIO_DeInit+0xd4>
 8024116:	2302      	movs	r3, #2
 8024118:	e002      	b.n	8024120 <HAL_GPIO_DeInit+0xd4>
 802411a:	2301      	movs	r3, #1
 802411c:	e000      	b.n	8024120 <HAL_GPIO_DeInit+0xd4>
 802411e:	2300      	movs	r3, #0
 8024120:	697a      	ldr	r2, [r7, #20]
 8024122:	f002 0203 	and.w	r2, r2, #3
 8024126:	0092      	lsls	r2, r2, #2
 8024128:	4093      	lsls	r3, r2
 802412a:	68ba      	ldr	r2, [r7, #8]
 802412c:	429a      	cmp	r2, r3
 802412e:	d132      	bne.n	8024196 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8024130:	4b4b      	ldr	r3, [pc, #300]	; (8024260 <HAL_GPIO_DeInit+0x214>)
 8024132:	681a      	ldr	r2, [r3, #0]
 8024134:	68fb      	ldr	r3, [r7, #12]
 8024136:	43db      	mvns	r3, r3
 8024138:	4949      	ldr	r1, [pc, #292]	; (8024260 <HAL_GPIO_DeInit+0x214>)
 802413a:	4013      	ands	r3, r2
 802413c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 802413e:	4b48      	ldr	r3, [pc, #288]	; (8024260 <HAL_GPIO_DeInit+0x214>)
 8024140:	685a      	ldr	r2, [r3, #4]
 8024142:	68fb      	ldr	r3, [r7, #12]
 8024144:	43db      	mvns	r3, r3
 8024146:	4946      	ldr	r1, [pc, #280]	; (8024260 <HAL_GPIO_DeInit+0x214>)
 8024148:	4013      	ands	r3, r2
 802414a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 802414c:	4b44      	ldr	r3, [pc, #272]	; (8024260 <HAL_GPIO_DeInit+0x214>)
 802414e:	68da      	ldr	r2, [r3, #12]
 8024150:	68fb      	ldr	r3, [r7, #12]
 8024152:	43db      	mvns	r3, r3
 8024154:	4942      	ldr	r1, [pc, #264]	; (8024260 <HAL_GPIO_DeInit+0x214>)
 8024156:	4013      	ands	r3, r2
 8024158:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 802415a:	4b41      	ldr	r3, [pc, #260]	; (8024260 <HAL_GPIO_DeInit+0x214>)
 802415c:	689a      	ldr	r2, [r3, #8]
 802415e:	68fb      	ldr	r3, [r7, #12]
 8024160:	43db      	mvns	r3, r3
 8024162:	493f      	ldr	r1, [pc, #252]	; (8024260 <HAL_GPIO_DeInit+0x214>)
 8024164:	4013      	ands	r3, r2
 8024166:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8024168:	697b      	ldr	r3, [r7, #20]
 802416a:	f003 0303 	and.w	r3, r3, #3
 802416e:	009b      	lsls	r3, r3, #2
 8024170:	220f      	movs	r2, #15
 8024172:	fa02 f303 	lsl.w	r3, r2, r3
 8024176:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8024178:	4a2e      	ldr	r2, [pc, #184]	; (8024234 <HAL_GPIO_DeInit+0x1e8>)
 802417a:	697b      	ldr	r3, [r7, #20]
 802417c:	089b      	lsrs	r3, r3, #2
 802417e:	3302      	adds	r3, #2
 8024180:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8024184:	68bb      	ldr	r3, [r7, #8]
 8024186:	43da      	mvns	r2, r3
 8024188:	482a      	ldr	r0, [pc, #168]	; (8024234 <HAL_GPIO_DeInit+0x1e8>)
 802418a:	697b      	ldr	r3, [r7, #20]
 802418c:	089b      	lsrs	r3, r3, #2
 802418e:	400a      	ands	r2, r1
 8024190:	3302      	adds	r3, #2
 8024192:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024196:	687b      	ldr	r3, [r7, #4]
 8024198:	681a      	ldr	r2, [r3, #0]
 802419a:	697b      	ldr	r3, [r7, #20]
 802419c:	005b      	lsls	r3, r3, #1
 802419e:	2103      	movs	r1, #3
 80241a0:	fa01 f303 	lsl.w	r3, r1, r3
 80241a4:	43db      	mvns	r3, r3
 80241a6:	401a      	ands	r2, r3
 80241a8:	687b      	ldr	r3, [r7, #4]
 80241aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80241ac:	697b      	ldr	r3, [r7, #20]
 80241ae:	08da      	lsrs	r2, r3, #3
 80241b0:	687b      	ldr	r3, [r7, #4]
 80241b2:	3208      	adds	r2, #8
 80241b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80241b8:	697b      	ldr	r3, [r7, #20]
 80241ba:	f003 0307 	and.w	r3, r3, #7
 80241be:	009b      	lsls	r3, r3, #2
 80241c0:	220f      	movs	r2, #15
 80241c2:	fa02 f303 	lsl.w	r3, r2, r3
 80241c6:	43db      	mvns	r3, r3
 80241c8:	697a      	ldr	r2, [r7, #20]
 80241ca:	08d2      	lsrs	r2, r2, #3
 80241cc:	4019      	ands	r1, r3
 80241ce:	687b      	ldr	r3, [r7, #4]
 80241d0:	3208      	adds	r2, #8
 80241d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80241d6:	687b      	ldr	r3, [r7, #4]
 80241d8:	68da      	ldr	r2, [r3, #12]
 80241da:	697b      	ldr	r3, [r7, #20]
 80241dc:	005b      	lsls	r3, r3, #1
 80241de:	2103      	movs	r1, #3
 80241e0:	fa01 f303 	lsl.w	r3, r1, r3
 80241e4:	43db      	mvns	r3, r3
 80241e6:	401a      	ands	r2, r3
 80241e8:	687b      	ldr	r3, [r7, #4]
 80241ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80241ec:	687b      	ldr	r3, [r7, #4]
 80241ee:	685a      	ldr	r2, [r3, #4]
 80241f0:	2101      	movs	r1, #1
 80241f2:	697b      	ldr	r3, [r7, #20]
 80241f4:	fa01 f303 	lsl.w	r3, r1, r3
 80241f8:	43db      	mvns	r3, r3
 80241fa:	401a      	ands	r2, r3
 80241fc:	687b      	ldr	r3, [r7, #4]
 80241fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024200:	687b      	ldr	r3, [r7, #4]
 8024202:	689a      	ldr	r2, [r3, #8]
 8024204:	697b      	ldr	r3, [r7, #20]
 8024206:	005b      	lsls	r3, r3, #1
 8024208:	2103      	movs	r1, #3
 802420a:	fa01 f303 	lsl.w	r3, r1, r3
 802420e:	43db      	mvns	r3, r3
 8024210:	401a      	ands	r2, r3
 8024212:	687b      	ldr	r3, [r7, #4]
 8024214:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024216:	697b      	ldr	r3, [r7, #20]
 8024218:	3301      	adds	r3, #1
 802421a:	617b      	str	r3, [r7, #20]
 802421c:	697b      	ldr	r3, [r7, #20]
 802421e:	2b0f      	cmp	r3, #15
 8024220:	f67f af22 	bls.w	8024068 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8024224:	bf00      	nop
 8024226:	bf00      	nop
 8024228:	371c      	adds	r7, #28
 802422a:	46bd      	mov	sp, r7
 802422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024230:	4770      	bx	lr
 8024232:	bf00      	nop
 8024234:	40013800 	.word	0x40013800
 8024238:	40020000 	.word	0x40020000
 802423c:	40020400 	.word	0x40020400
 8024240:	40020800 	.word	0x40020800
 8024244:	40020c00 	.word	0x40020c00
 8024248:	40021000 	.word	0x40021000
 802424c:	40021400 	.word	0x40021400
 8024250:	40021800 	.word	0x40021800
 8024254:	40021c00 	.word	0x40021c00
 8024258:	40022000 	.word	0x40022000
 802425c:	40022400 	.word	0x40022400
 8024260:	40013c00 	.word	0x40013c00

08024264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8024264:	b480      	push	{r7}
 8024266:	b083      	sub	sp, #12
 8024268:	af00      	add	r7, sp, #0
 802426a:	6078      	str	r0, [r7, #4]
 802426c:	460b      	mov	r3, r1
 802426e:	807b      	strh	r3, [r7, #2]
 8024270:	4613      	mov	r3, r2
 8024272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8024274:	787b      	ldrb	r3, [r7, #1]
 8024276:	2b00      	cmp	r3, #0
 8024278:	d003      	beq.n	8024282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802427a:	887a      	ldrh	r2, [r7, #2]
 802427c:	687b      	ldr	r3, [r7, #4]
 802427e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8024280:	e003      	b.n	802428a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8024282:	887b      	ldrh	r3, [r7, #2]
 8024284:	041a      	lsls	r2, r3, #16
 8024286:	687b      	ldr	r3, [r7, #4]
 8024288:	619a      	str	r2, [r3, #24]
}
 802428a:	bf00      	nop
 802428c:	370c      	adds	r7, #12
 802428e:	46bd      	mov	sp, r7
 8024290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024294:	4770      	bx	lr
	...

08024298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8024298:	b580      	push	{r7, lr}
 802429a:	b082      	sub	sp, #8
 802429c:	af00      	add	r7, sp, #0
 802429e:	4603      	mov	r3, r0
 80242a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80242a2:	4b08      	ldr	r3, [pc, #32]	; (80242c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80242a4:	695a      	ldr	r2, [r3, #20]
 80242a6:	88fb      	ldrh	r3, [r7, #6]
 80242a8:	4013      	ands	r3, r2
 80242aa:	2b00      	cmp	r3, #0
 80242ac:	d006      	beq.n	80242bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80242ae:	4a05      	ldr	r2, [pc, #20]	; (80242c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80242b0:	88fb      	ldrh	r3, [r7, #6]
 80242b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80242b4:	88fb      	ldrh	r3, [r7, #6]
 80242b6:	4618      	mov	r0, r3
 80242b8:	f7fd fab4 	bl	8021824 <HAL_GPIO_EXTI_Callback>
  }
}
 80242bc:	bf00      	nop
 80242be:	3708      	adds	r7, #8
 80242c0:	46bd      	mov	sp, r7
 80242c2:	bd80      	pop	{r7, pc}
 80242c4:	40013c00 	.word	0x40013c00

080242c8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80242c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80242ca:	b08f      	sub	sp, #60	; 0x3c
 80242cc:	af0a      	add	r7, sp, #40	; 0x28
 80242ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80242d0:	687b      	ldr	r3, [r7, #4]
 80242d2:	2b00      	cmp	r3, #0
 80242d4:	d101      	bne.n	80242da <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80242d6:	2301      	movs	r3, #1
 80242d8:	e054      	b.n	8024384 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80242da:	687b      	ldr	r3, [r7, #4]
 80242dc:	681b      	ldr	r3, [r3, #0]
 80242de:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80242e0:	687b      	ldr	r3, [r7, #4]
 80242e2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80242e6:	b2db      	uxtb	r3, r3
 80242e8:	2b00      	cmp	r3, #0
 80242ea:	d106      	bne.n	80242fa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80242ec:	687b      	ldr	r3, [r7, #4]
 80242ee:	2200      	movs	r2, #0
 80242f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80242f4:	6878      	ldr	r0, [r7, #4]
 80242f6:	f008 fd01 	bl	802ccfc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80242fa:	687b      	ldr	r3, [r7, #4]
 80242fc:	2203      	movs	r2, #3
 80242fe:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8024302:	68fb      	ldr	r3, [r7, #12]
 8024304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802430a:	2b00      	cmp	r3, #0
 802430c:	d102      	bne.n	8024314 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 802430e:	687b      	ldr	r3, [r7, #4]
 8024310:	2200      	movs	r2, #0
 8024312:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8024314:	687b      	ldr	r3, [r7, #4]
 8024316:	681b      	ldr	r3, [r3, #0]
 8024318:	4618      	mov	r0, r3
 802431a:	f005 fd2f 	bl	8029d7c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 802431e:	687b      	ldr	r3, [r7, #4]
 8024320:	681b      	ldr	r3, [r3, #0]
 8024322:	603b      	str	r3, [r7, #0]
 8024324:	687e      	ldr	r6, [r7, #4]
 8024326:	466d      	mov	r5, sp
 8024328:	f106 0410 	add.w	r4, r6, #16
 802432c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802432e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024334:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024338:	e885 0003 	stmia.w	r5, {r0, r1}
 802433c:	1d33      	adds	r3, r6, #4
 802433e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8024340:	6838      	ldr	r0, [r7, #0]
 8024342:	f005 fca9 	bl	8029c98 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8024346:	687b      	ldr	r3, [r7, #4]
 8024348:	681b      	ldr	r3, [r3, #0]
 802434a:	2101      	movs	r1, #1
 802434c:	4618      	mov	r0, r3
 802434e:	f005 fd26 	bl	8029d9e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8024352:	687b      	ldr	r3, [r7, #4]
 8024354:	681b      	ldr	r3, [r3, #0]
 8024356:	603b      	str	r3, [r7, #0]
 8024358:	687e      	ldr	r6, [r7, #4]
 802435a:	466d      	mov	r5, sp
 802435c:	f106 0410 	add.w	r4, r6, #16
 8024360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024368:	e894 0003 	ldmia.w	r4, {r0, r1}
 802436c:	e885 0003 	stmia.w	r5, {r0, r1}
 8024370:	1d33      	adds	r3, r6, #4
 8024372:	cb0e      	ldmia	r3, {r1, r2, r3}
 8024374:	6838      	ldr	r0, [r7, #0]
 8024376:	f005 feaf 	bl	802a0d8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 802437a:	687b      	ldr	r3, [r7, #4]
 802437c:	2201      	movs	r2, #1
 802437e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8024382:	2300      	movs	r3, #0
}
 8024384:	4618      	mov	r0, r3
 8024386:	3714      	adds	r7, #20
 8024388:	46bd      	mov	sp, r7
 802438a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802438c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 802438c:	b590      	push	{r4, r7, lr}
 802438e:	b089      	sub	sp, #36	; 0x24
 8024390:	af04      	add	r7, sp, #16
 8024392:	6078      	str	r0, [r7, #4]
 8024394:	4608      	mov	r0, r1
 8024396:	4611      	mov	r1, r2
 8024398:	461a      	mov	r2, r3
 802439a:	4603      	mov	r3, r0
 802439c:	70fb      	strb	r3, [r7, #3]
 802439e:	460b      	mov	r3, r1
 80243a0:	70bb      	strb	r3, [r7, #2]
 80243a2:	4613      	mov	r3, r2
 80243a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80243a6:	687b      	ldr	r3, [r7, #4]
 80243a8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80243ac:	2b01      	cmp	r3, #1
 80243ae:	d101      	bne.n	80243b4 <HAL_HCD_HC_Init+0x28>
 80243b0:	2302      	movs	r3, #2
 80243b2:	e076      	b.n	80244a2 <HAL_HCD_HC_Init+0x116>
 80243b4:	687b      	ldr	r3, [r7, #4]
 80243b6:	2201      	movs	r2, #1
 80243b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80243bc:	78fb      	ldrb	r3, [r7, #3]
 80243be:	687a      	ldr	r2, [r7, #4]
 80243c0:	212c      	movs	r1, #44	; 0x2c
 80243c2:	fb01 f303 	mul.w	r3, r1, r3
 80243c6:	4413      	add	r3, r2
 80243c8:	333d      	adds	r3, #61	; 0x3d
 80243ca:	2200      	movs	r2, #0
 80243cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80243ce:	78fb      	ldrb	r3, [r7, #3]
 80243d0:	687a      	ldr	r2, [r7, #4]
 80243d2:	212c      	movs	r1, #44	; 0x2c
 80243d4:	fb01 f303 	mul.w	r3, r1, r3
 80243d8:	4413      	add	r3, r2
 80243da:	3338      	adds	r3, #56	; 0x38
 80243dc:	787a      	ldrb	r2, [r7, #1]
 80243de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80243e0:	78fb      	ldrb	r3, [r7, #3]
 80243e2:	687a      	ldr	r2, [r7, #4]
 80243e4:	212c      	movs	r1, #44	; 0x2c
 80243e6:	fb01 f303 	mul.w	r3, r1, r3
 80243ea:	4413      	add	r3, r2
 80243ec:	3340      	adds	r3, #64	; 0x40
 80243ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80243f0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80243f2:	78fb      	ldrb	r3, [r7, #3]
 80243f4:	687a      	ldr	r2, [r7, #4]
 80243f6:	212c      	movs	r1, #44	; 0x2c
 80243f8:	fb01 f303 	mul.w	r3, r1, r3
 80243fc:	4413      	add	r3, r2
 80243fe:	3339      	adds	r3, #57	; 0x39
 8024400:	78fa      	ldrb	r2, [r7, #3]
 8024402:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8024404:	78fb      	ldrb	r3, [r7, #3]
 8024406:	687a      	ldr	r2, [r7, #4]
 8024408:	212c      	movs	r1, #44	; 0x2c
 802440a:	fb01 f303 	mul.w	r3, r1, r3
 802440e:	4413      	add	r3, r2
 8024410:	333f      	adds	r3, #63	; 0x3f
 8024412:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8024416:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8024418:	78fb      	ldrb	r3, [r7, #3]
 802441a:	78ba      	ldrb	r2, [r7, #2]
 802441c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8024420:	b2d0      	uxtb	r0, r2
 8024422:	687a      	ldr	r2, [r7, #4]
 8024424:	212c      	movs	r1, #44	; 0x2c
 8024426:	fb01 f303 	mul.w	r3, r1, r3
 802442a:	4413      	add	r3, r2
 802442c:	333a      	adds	r3, #58	; 0x3a
 802442e:	4602      	mov	r2, r0
 8024430:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8024432:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8024436:	2b00      	cmp	r3, #0
 8024438:	da09      	bge.n	802444e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 802443a:	78fb      	ldrb	r3, [r7, #3]
 802443c:	687a      	ldr	r2, [r7, #4]
 802443e:	212c      	movs	r1, #44	; 0x2c
 8024440:	fb01 f303 	mul.w	r3, r1, r3
 8024444:	4413      	add	r3, r2
 8024446:	333b      	adds	r3, #59	; 0x3b
 8024448:	2201      	movs	r2, #1
 802444a:	701a      	strb	r2, [r3, #0]
 802444c:	e008      	b.n	8024460 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 802444e:	78fb      	ldrb	r3, [r7, #3]
 8024450:	687a      	ldr	r2, [r7, #4]
 8024452:	212c      	movs	r1, #44	; 0x2c
 8024454:	fb01 f303 	mul.w	r3, r1, r3
 8024458:	4413      	add	r3, r2
 802445a:	333b      	adds	r3, #59	; 0x3b
 802445c:	2200      	movs	r2, #0
 802445e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8024460:	78fb      	ldrb	r3, [r7, #3]
 8024462:	687a      	ldr	r2, [r7, #4]
 8024464:	212c      	movs	r1, #44	; 0x2c
 8024466:	fb01 f303 	mul.w	r3, r1, r3
 802446a:	4413      	add	r3, r2
 802446c:	333c      	adds	r3, #60	; 0x3c
 802446e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8024472:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8024474:	687b      	ldr	r3, [r7, #4]
 8024476:	6818      	ldr	r0, [r3, #0]
 8024478:	787c      	ldrb	r4, [r7, #1]
 802447a:	78ba      	ldrb	r2, [r7, #2]
 802447c:	78f9      	ldrb	r1, [r7, #3]
 802447e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8024480:	9302      	str	r3, [sp, #8]
 8024482:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8024486:	9301      	str	r3, [sp, #4]
 8024488:	f897 3020 	ldrb.w	r3, [r7, #32]
 802448c:	9300      	str	r3, [sp, #0]
 802448e:	4623      	mov	r3, r4
 8024490:	f005 ffa8 	bl	802a3e4 <USB_HC_Init>
 8024494:	4603      	mov	r3, r0
 8024496:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8024498:	687b      	ldr	r3, [r7, #4]
 802449a:	2200      	movs	r2, #0
 802449c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80244a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80244a2:	4618      	mov	r0, r3
 80244a4:	3714      	adds	r7, #20
 80244a6:	46bd      	mov	sp, r7
 80244a8:	bd90      	pop	{r4, r7, pc}

080244aa <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80244aa:	b580      	push	{r7, lr}
 80244ac:	b084      	sub	sp, #16
 80244ae:	af00      	add	r7, sp, #0
 80244b0:	6078      	str	r0, [r7, #4]
 80244b2:	460b      	mov	r3, r1
 80244b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80244b6:	2300      	movs	r3, #0
 80244b8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80244ba:	687b      	ldr	r3, [r7, #4]
 80244bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80244c0:	2b01      	cmp	r3, #1
 80244c2:	d101      	bne.n	80244c8 <HAL_HCD_HC_Halt+0x1e>
 80244c4:	2302      	movs	r3, #2
 80244c6:	e00f      	b.n	80244e8 <HAL_HCD_HC_Halt+0x3e>
 80244c8:	687b      	ldr	r3, [r7, #4]
 80244ca:	2201      	movs	r2, #1
 80244cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80244d0:	687b      	ldr	r3, [r7, #4]
 80244d2:	681b      	ldr	r3, [r3, #0]
 80244d4:	78fa      	ldrb	r2, [r7, #3]
 80244d6:	4611      	mov	r1, r2
 80244d8:	4618      	mov	r0, r3
 80244da:	f006 f9f8 	bl	802a8ce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80244de:	687b      	ldr	r3, [r7, #4]
 80244e0:	2200      	movs	r2, #0
 80244e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80244e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80244e8:	4618      	mov	r0, r3
 80244ea:	3710      	adds	r7, #16
 80244ec:	46bd      	mov	sp, r7
 80244ee:	bd80      	pop	{r7, pc}

080244f0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80244f0:	b580      	push	{r7, lr}
 80244f2:	b082      	sub	sp, #8
 80244f4:	af00      	add	r7, sp, #0
 80244f6:	6078      	str	r0, [r7, #4]
 80244f8:	4608      	mov	r0, r1
 80244fa:	4611      	mov	r1, r2
 80244fc:	461a      	mov	r2, r3
 80244fe:	4603      	mov	r3, r0
 8024500:	70fb      	strb	r3, [r7, #3]
 8024502:	460b      	mov	r3, r1
 8024504:	70bb      	strb	r3, [r7, #2]
 8024506:	4613      	mov	r3, r2
 8024508:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 802450a:	78fb      	ldrb	r3, [r7, #3]
 802450c:	687a      	ldr	r2, [r7, #4]
 802450e:	212c      	movs	r1, #44	; 0x2c
 8024510:	fb01 f303 	mul.w	r3, r1, r3
 8024514:	4413      	add	r3, r2
 8024516:	333b      	adds	r3, #59	; 0x3b
 8024518:	78ba      	ldrb	r2, [r7, #2]
 802451a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 802451c:	78fb      	ldrb	r3, [r7, #3]
 802451e:	687a      	ldr	r2, [r7, #4]
 8024520:	212c      	movs	r1, #44	; 0x2c
 8024522:	fb01 f303 	mul.w	r3, r1, r3
 8024526:	4413      	add	r3, r2
 8024528:	333f      	adds	r3, #63	; 0x3f
 802452a:	787a      	ldrb	r2, [r7, #1]
 802452c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 802452e:	7c3b      	ldrb	r3, [r7, #16]
 8024530:	2b00      	cmp	r3, #0
 8024532:	d112      	bne.n	802455a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8024534:	78fb      	ldrb	r3, [r7, #3]
 8024536:	687a      	ldr	r2, [r7, #4]
 8024538:	212c      	movs	r1, #44	; 0x2c
 802453a:	fb01 f303 	mul.w	r3, r1, r3
 802453e:	4413      	add	r3, r2
 8024540:	3342      	adds	r3, #66	; 0x42
 8024542:	2203      	movs	r2, #3
 8024544:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8024546:	78fb      	ldrb	r3, [r7, #3]
 8024548:	687a      	ldr	r2, [r7, #4]
 802454a:	212c      	movs	r1, #44	; 0x2c
 802454c:	fb01 f303 	mul.w	r3, r1, r3
 8024550:	4413      	add	r3, r2
 8024552:	333d      	adds	r3, #61	; 0x3d
 8024554:	7f3a      	ldrb	r2, [r7, #28]
 8024556:	701a      	strb	r2, [r3, #0]
 8024558:	e008      	b.n	802456c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802455a:	78fb      	ldrb	r3, [r7, #3]
 802455c:	687a      	ldr	r2, [r7, #4]
 802455e:	212c      	movs	r1, #44	; 0x2c
 8024560:	fb01 f303 	mul.w	r3, r1, r3
 8024564:	4413      	add	r3, r2
 8024566:	3342      	adds	r3, #66	; 0x42
 8024568:	2202      	movs	r2, #2
 802456a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 802456c:	787b      	ldrb	r3, [r7, #1]
 802456e:	2b03      	cmp	r3, #3
 8024570:	f200 80c6 	bhi.w	8024700 <HAL_HCD_HC_SubmitRequest+0x210>
 8024574:	a201      	add	r2, pc, #4	; (adr r2, 802457c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8024576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802457a:	bf00      	nop
 802457c:	0802458d 	.word	0x0802458d
 8024580:	080246ed 	.word	0x080246ed
 8024584:	080245f1 	.word	0x080245f1
 8024588:	0802466f 	.word	0x0802466f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 802458c:	7c3b      	ldrb	r3, [r7, #16]
 802458e:	2b01      	cmp	r3, #1
 8024590:	f040 80b8 	bne.w	8024704 <HAL_HCD_HC_SubmitRequest+0x214>
 8024594:	78bb      	ldrb	r3, [r7, #2]
 8024596:	2b00      	cmp	r3, #0
 8024598:	f040 80b4 	bne.w	8024704 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 802459c:	8b3b      	ldrh	r3, [r7, #24]
 802459e:	2b00      	cmp	r3, #0
 80245a0:	d108      	bne.n	80245b4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80245a2:	78fb      	ldrb	r3, [r7, #3]
 80245a4:	687a      	ldr	r2, [r7, #4]
 80245a6:	212c      	movs	r1, #44	; 0x2c
 80245a8:	fb01 f303 	mul.w	r3, r1, r3
 80245ac:	4413      	add	r3, r2
 80245ae:	3355      	adds	r3, #85	; 0x55
 80245b0:	2201      	movs	r2, #1
 80245b2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80245b4:	78fb      	ldrb	r3, [r7, #3]
 80245b6:	687a      	ldr	r2, [r7, #4]
 80245b8:	212c      	movs	r1, #44	; 0x2c
 80245ba:	fb01 f303 	mul.w	r3, r1, r3
 80245be:	4413      	add	r3, r2
 80245c0:	3355      	adds	r3, #85	; 0x55
 80245c2:	781b      	ldrb	r3, [r3, #0]
 80245c4:	2b00      	cmp	r3, #0
 80245c6:	d109      	bne.n	80245dc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80245c8:	78fb      	ldrb	r3, [r7, #3]
 80245ca:	687a      	ldr	r2, [r7, #4]
 80245cc:	212c      	movs	r1, #44	; 0x2c
 80245ce:	fb01 f303 	mul.w	r3, r1, r3
 80245d2:	4413      	add	r3, r2
 80245d4:	3342      	adds	r3, #66	; 0x42
 80245d6:	2200      	movs	r2, #0
 80245d8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80245da:	e093      	b.n	8024704 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80245dc:	78fb      	ldrb	r3, [r7, #3]
 80245de:	687a      	ldr	r2, [r7, #4]
 80245e0:	212c      	movs	r1, #44	; 0x2c
 80245e2:	fb01 f303 	mul.w	r3, r1, r3
 80245e6:	4413      	add	r3, r2
 80245e8:	3342      	adds	r3, #66	; 0x42
 80245ea:	2202      	movs	r2, #2
 80245ec:	701a      	strb	r2, [r3, #0]
      break;
 80245ee:	e089      	b.n	8024704 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80245f0:	78bb      	ldrb	r3, [r7, #2]
 80245f2:	2b00      	cmp	r3, #0
 80245f4:	d11d      	bne.n	8024632 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80245f6:	78fb      	ldrb	r3, [r7, #3]
 80245f8:	687a      	ldr	r2, [r7, #4]
 80245fa:	212c      	movs	r1, #44	; 0x2c
 80245fc:	fb01 f303 	mul.w	r3, r1, r3
 8024600:	4413      	add	r3, r2
 8024602:	3355      	adds	r3, #85	; 0x55
 8024604:	781b      	ldrb	r3, [r3, #0]
 8024606:	2b00      	cmp	r3, #0
 8024608:	d109      	bne.n	802461e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802460a:	78fb      	ldrb	r3, [r7, #3]
 802460c:	687a      	ldr	r2, [r7, #4]
 802460e:	212c      	movs	r1, #44	; 0x2c
 8024610:	fb01 f303 	mul.w	r3, r1, r3
 8024614:	4413      	add	r3, r2
 8024616:	3342      	adds	r3, #66	; 0x42
 8024618:	2200      	movs	r2, #0
 802461a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 802461c:	e073      	b.n	8024706 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802461e:	78fb      	ldrb	r3, [r7, #3]
 8024620:	687a      	ldr	r2, [r7, #4]
 8024622:	212c      	movs	r1, #44	; 0x2c
 8024624:	fb01 f303 	mul.w	r3, r1, r3
 8024628:	4413      	add	r3, r2
 802462a:	3342      	adds	r3, #66	; 0x42
 802462c:	2202      	movs	r2, #2
 802462e:	701a      	strb	r2, [r3, #0]
      break;
 8024630:	e069      	b.n	8024706 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8024632:	78fb      	ldrb	r3, [r7, #3]
 8024634:	687a      	ldr	r2, [r7, #4]
 8024636:	212c      	movs	r1, #44	; 0x2c
 8024638:	fb01 f303 	mul.w	r3, r1, r3
 802463c:	4413      	add	r3, r2
 802463e:	3354      	adds	r3, #84	; 0x54
 8024640:	781b      	ldrb	r3, [r3, #0]
 8024642:	2b00      	cmp	r3, #0
 8024644:	d109      	bne.n	802465a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024646:	78fb      	ldrb	r3, [r7, #3]
 8024648:	687a      	ldr	r2, [r7, #4]
 802464a:	212c      	movs	r1, #44	; 0x2c
 802464c:	fb01 f303 	mul.w	r3, r1, r3
 8024650:	4413      	add	r3, r2
 8024652:	3342      	adds	r3, #66	; 0x42
 8024654:	2200      	movs	r2, #0
 8024656:	701a      	strb	r2, [r3, #0]
      break;
 8024658:	e055      	b.n	8024706 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802465a:	78fb      	ldrb	r3, [r7, #3]
 802465c:	687a      	ldr	r2, [r7, #4]
 802465e:	212c      	movs	r1, #44	; 0x2c
 8024660:	fb01 f303 	mul.w	r3, r1, r3
 8024664:	4413      	add	r3, r2
 8024666:	3342      	adds	r3, #66	; 0x42
 8024668:	2202      	movs	r2, #2
 802466a:	701a      	strb	r2, [r3, #0]
      break;
 802466c:	e04b      	b.n	8024706 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 802466e:	78bb      	ldrb	r3, [r7, #2]
 8024670:	2b00      	cmp	r3, #0
 8024672:	d11d      	bne.n	80246b0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8024674:	78fb      	ldrb	r3, [r7, #3]
 8024676:	687a      	ldr	r2, [r7, #4]
 8024678:	212c      	movs	r1, #44	; 0x2c
 802467a:	fb01 f303 	mul.w	r3, r1, r3
 802467e:	4413      	add	r3, r2
 8024680:	3355      	adds	r3, #85	; 0x55
 8024682:	781b      	ldrb	r3, [r3, #0]
 8024684:	2b00      	cmp	r3, #0
 8024686:	d109      	bne.n	802469c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024688:	78fb      	ldrb	r3, [r7, #3]
 802468a:	687a      	ldr	r2, [r7, #4]
 802468c:	212c      	movs	r1, #44	; 0x2c
 802468e:	fb01 f303 	mul.w	r3, r1, r3
 8024692:	4413      	add	r3, r2
 8024694:	3342      	adds	r3, #66	; 0x42
 8024696:	2200      	movs	r2, #0
 8024698:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 802469a:	e034      	b.n	8024706 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802469c:	78fb      	ldrb	r3, [r7, #3]
 802469e:	687a      	ldr	r2, [r7, #4]
 80246a0:	212c      	movs	r1, #44	; 0x2c
 80246a2:	fb01 f303 	mul.w	r3, r1, r3
 80246a6:	4413      	add	r3, r2
 80246a8:	3342      	adds	r3, #66	; 0x42
 80246aa:	2202      	movs	r2, #2
 80246ac:	701a      	strb	r2, [r3, #0]
      break;
 80246ae:	e02a      	b.n	8024706 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80246b0:	78fb      	ldrb	r3, [r7, #3]
 80246b2:	687a      	ldr	r2, [r7, #4]
 80246b4:	212c      	movs	r1, #44	; 0x2c
 80246b6:	fb01 f303 	mul.w	r3, r1, r3
 80246ba:	4413      	add	r3, r2
 80246bc:	3354      	adds	r3, #84	; 0x54
 80246be:	781b      	ldrb	r3, [r3, #0]
 80246c0:	2b00      	cmp	r3, #0
 80246c2:	d109      	bne.n	80246d8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80246c4:	78fb      	ldrb	r3, [r7, #3]
 80246c6:	687a      	ldr	r2, [r7, #4]
 80246c8:	212c      	movs	r1, #44	; 0x2c
 80246ca:	fb01 f303 	mul.w	r3, r1, r3
 80246ce:	4413      	add	r3, r2
 80246d0:	3342      	adds	r3, #66	; 0x42
 80246d2:	2200      	movs	r2, #0
 80246d4:	701a      	strb	r2, [r3, #0]
      break;
 80246d6:	e016      	b.n	8024706 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80246d8:	78fb      	ldrb	r3, [r7, #3]
 80246da:	687a      	ldr	r2, [r7, #4]
 80246dc:	212c      	movs	r1, #44	; 0x2c
 80246de:	fb01 f303 	mul.w	r3, r1, r3
 80246e2:	4413      	add	r3, r2
 80246e4:	3342      	adds	r3, #66	; 0x42
 80246e6:	2202      	movs	r2, #2
 80246e8:	701a      	strb	r2, [r3, #0]
      break;
 80246ea:	e00c      	b.n	8024706 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80246ec:	78fb      	ldrb	r3, [r7, #3]
 80246ee:	687a      	ldr	r2, [r7, #4]
 80246f0:	212c      	movs	r1, #44	; 0x2c
 80246f2:	fb01 f303 	mul.w	r3, r1, r3
 80246f6:	4413      	add	r3, r2
 80246f8:	3342      	adds	r3, #66	; 0x42
 80246fa:	2200      	movs	r2, #0
 80246fc:	701a      	strb	r2, [r3, #0]
      break;
 80246fe:	e002      	b.n	8024706 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8024700:	bf00      	nop
 8024702:	e000      	b.n	8024706 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8024704:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8024706:	78fb      	ldrb	r3, [r7, #3]
 8024708:	687a      	ldr	r2, [r7, #4]
 802470a:	212c      	movs	r1, #44	; 0x2c
 802470c:	fb01 f303 	mul.w	r3, r1, r3
 8024710:	4413      	add	r3, r2
 8024712:	3344      	adds	r3, #68	; 0x44
 8024714:	697a      	ldr	r2, [r7, #20]
 8024716:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8024718:	78fb      	ldrb	r3, [r7, #3]
 802471a:	8b3a      	ldrh	r2, [r7, #24]
 802471c:	6879      	ldr	r1, [r7, #4]
 802471e:	202c      	movs	r0, #44	; 0x2c
 8024720:	fb00 f303 	mul.w	r3, r0, r3
 8024724:	440b      	add	r3, r1
 8024726:	334c      	adds	r3, #76	; 0x4c
 8024728:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 802472a:	78fb      	ldrb	r3, [r7, #3]
 802472c:	687a      	ldr	r2, [r7, #4]
 802472e:	212c      	movs	r1, #44	; 0x2c
 8024730:	fb01 f303 	mul.w	r3, r1, r3
 8024734:	4413      	add	r3, r2
 8024736:	3360      	adds	r3, #96	; 0x60
 8024738:	2200      	movs	r2, #0
 802473a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 802473c:	78fb      	ldrb	r3, [r7, #3]
 802473e:	687a      	ldr	r2, [r7, #4]
 8024740:	212c      	movs	r1, #44	; 0x2c
 8024742:	fb01 f303 	mul.w	r3, r1, r3
 8024746:	4413      	add	r3, r2
 8024748:	3350      	adds	r3, #80	; 0x50
 802474a:	2200      	movs	r2, #0
 802474c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 802474e:	78fb      	ldrb	r3, [r7, #3]
 8024750:	687a      	ldr	r2, [r7, #4]
 8024752:	212c      	movs	r1, #44	; 0x2c
 8024754:	fb01 f303 	mul.w	r3, r1, r3
 8024758:	4413      	add	r3, r2
 802475a:	3339      	adds	r3, #57	; 0x39
 802475c:	78fa      	ldrb	r2, [r7, #3]
 802475e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8024760:	78fb      	ldrb	r3, [r7, #3]
 8024762:	687a      	ldr	r2, [r7, #4]
 8024764:	212c      	movs	r1, #44	; 0x2c
 8024766:	fb01 f303 	mul.w	r3, r1, r3
 802476a:	4413      	add	r3, r2
 802476c:	3361      	adds	r3, #97	; 0x61
 802476e:	2200      	movs	r2, #0
 8024770:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8024772:	687b      	ldr	r3, [r7, #4]
 8024774:	6818      	ldr	r0, [r3, #0]
 8024776:	78fb      	ldrb	r3, [r7, #3]
 8024778:	222c      	movs	r2, #44	; 0x2c
 802477a:	fb02 f303 	mul.w	r3, r2, r3
 802477e:	3338      	adds	r3, #56	; 0x38
 8024780:	687a      	ldr	r2, [r7, #4]
 8024782:	18d1      	adds	r1, r2, r3
 8024784:	687b      	ldr	r3, [r7, #4]
 8024786:	691b      	ldr	r3, [r3, #16]
 8024788:	b2db      	uxtb	r3, r3
 802478a:	461a      	mov	r2, r3
 802478c:	f005 ff4c 	bl	802a628 <USB_HC_StartXfer>
 8024790:	4603      	mov	r3, r0
}
 8024792:	4618      	mov	r0, r3
 8024794:	3708      	adds	r7, #8
 8024796:	46bd      	mov	sp, r7
 8024798:	bd80      	pop	{r7, pc}
 802479a:	bf00      	nop

0802479c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 802479c:	b580      	push	{r7, lr}
 802479e:	b086      	sub	sp, #24
 80247a0:	af00      	add	r7, sp, #0
 80247a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80247a4:	687b      	ldr	r3, [r7, #4]
 80247a6:	681b      	ldr	r3, [r3, #0]
 80247a8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80247aa:	693b      	ldr	r3, [r7, #16]
 80247ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80247ae:	687b      	ldr	r3, [r7, #4]
 80247b0:	681b      	ldr	r3, [r3, #0]
 80247b2:	4618      	mov	r0, r3
 80247b4:	f005 fc4d 	bl	802a052 <USB_GetMode>
 80247b8:	4603      	mov	r3, r0
 80247ba:	2b01      	cmp	r3, #1
 80247bc:	f040 80f6 	bne.w	80249ac <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80247c0:	687b      	ldr	r3, [r7, #4]
 80247c2:	681b      	ldr	r3, [r3, #0]
 80247c4:	4618      	mov	r0, r3
 80247c6:	f005 fc31 	bl	802a02c <USB_ReadInterrupts>
 80247ca:	4603      	mov	r3, r0
 80247cc:	2b00      	cmp	r3, #0
 80247ce:	f000 80ec 	beq.w	80249aa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80247d2:	687b      	ldr	r3, [r7, #4]
 80247d4:	681b      	ldr	r3, [r3, #0]
 80247d6:	4618      	mov	r0, r3
 80247d8:	f005 fc28 	bl	802a02c <USB_ReadInterrupts>
 80247dc:	4603      	mov	r3, r0
 80247de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80247e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80247e6:	d104      	bne.n	80247f2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80247e8:	687b      	ldr	r3, [r7, #4]
 80247ea:	681b      	ldr	r3, [r3, #0]
 80247ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80247f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80247f2:	687b      	ldr	r3, [r7, #4]
 80247f4:	681b      	ldr	r3, [r3, #0]
 80247f6:	4618      	mov	r0, r3
 80247f8:	f005 fc18 	bl	802a02c <USB_ReadInterrupts>
 80247fc:	4603      	mov	r3, r0
 80247fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8024802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8024806:	d104      	bne.n	8024812 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8024808:	687b      	ldr	r3, [r7, #4]
 802480a:	681b      	ldr	r3, [r3, #0]
 802480c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8024810:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8024812:	687b      	ldr	r3, [r7, #4]
 8024814:	681b      	ldr	r3, [r3, #0]
 8024816:	4618      	mov	r0, r3
 8024818:	f005 fc08 	bl	802a02c <USB_ReadInterrupts>
 802481c:	4603      	mov	r3, r0
 802481e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8024822:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8024826:	d104      	bne.n	8024832 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8024828:	687b      	ldr	r3, [r7, #4]
 802482a:	681b      	ldr	r3, [r3, #0]
 802482c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8024830:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8024832:	687b      	ldr	r3, [r7, #4]
 8024834:	681b      	ldr	r3, [r3, #0]
 8024836:	4618      	mov	r0, r3
 8024838:	f005 fbf8 	bl	802a02c <USB_ReadInterrupts>
 802483c:	4603      	mov	r3, r0
 802483e:	f003 0302 	and.w	r3, r3, #2
 8024842:	2b02      	cmp	r3, #2
 8024844:	d103      	bne.n	802484e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8024846:	687b      	ldr	r3, [r7, #4]
 8024848:	681b      	ldr	r3, [r3, #0]
 802484a:	2202      	movs	r2, #2
 802484c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 802484e:	687b      	ldr	r3, [r7, #4]
 8024850:	681b      	ldr	r3, [r3, #0]
 8024852:	4618      	mov	r0, r3
 8024854:	f005 fbea 	bl	802a02c <USB_ReadInterrupts>
 8024858:	4603      	mov	r3, r0
 802485a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802485e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8024862:	d11c      	bne.n	802489e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8024864:	687b      	ldr	r3, [r7, #4]
 8024866:	681b      	ldr	r3, [r3, #0]
 8024868:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 802486c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 802486e:	68fb      	ldr	r3, [r7, #12]
 8024870:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8024874:	681b      	ldr	r3, [r3, #0]
 8024876:	f003 0301 	and.w	r3, r3, #1
 802487a:	2b00      	cmp	r3, #0
 802487c:	d10f      	bne.n	802489e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 802487e:	2110      	movs	r1, #16
 8024880:	6938      	ldr	r0, [r7, #16]
 8024882:	f005 fad9 	bl	8029e38 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8024886:	6938      	ldr	r0, [r7, #16]
 8024888:	f005 fb0a 	bl	8029ea0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 802488c:	687b      	ldr	r3, [r7, #4]
 802488e:	681b      	ldr	r3, [r3, #0]
 8024890:	2101      	movs	r1, #1
 8024892:	4618      	mov	r0, r3
 8024894:	f005 fce0 	bl	802a258 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8024898:	6878      	ldr	r0, [r7, #4]
 802489a:	f008 faa9 	bl	802cdf0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 802489e:	687b      	ldr	r3, [r7, #4]
 80248a0:	681b      	ldr	r3, [r3, #0]
 80248a2:	4618      	mov	r0, r3
 80248a4:	f005 fbc2 	bl	802a02c <USB_ReadInterrupts>
 80248a8:	4603      	mov	r3, r0
 80248aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80248ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80248b2:	d102      	bne.n	80248ba <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80248b4:	6878      	ldr	r0, [r7, #4]
 80248b6:	f001 f89e 	bl	80259f6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80248ba:	687b      	ldr	r3, [r7, #4]
 80248bc:	681b      	ldr	r3, [r3, #0]
 80248be:	4618      	mov	r0, r3
 80248c0:	f005 fbb4 	bl	802a02c <USB_ReadInterrupts>
 80248c4:	4603      	mov	r3, r0
 80248c6:	f003 0308 	and.w	r3, r3, #8
 80248ca:	2b08      	cmp	r3, #8
 80248cc:	d106      	bne.n	80248dc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80248ce:	6878      	ldr	r0, [r7, #4]
 80248d0:	f008 fa72 	bl	802cdb8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80248d4:	687b      	ldr	r3, [r7, #4]
 80248d6:	681b      	ldr	r3, [r3, #0]
 80248d8:	2208      	movs	r2, #8
 80248da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80248dc:	687b      	ldr	r3, [r7, #4]
 80248de:	681b      	ldr	r3, [r3, #0]
 80248e0:	4618      	mov	r0, r3
 80248e2:	f005 fba3 	bl	802a02c <USB_ReadInterrupts>
 80248e6:	4603      	mov	r3, r0
 80248e8:	f003 0310 	and.w	r3, r3, #16
 80248ec:	2b10      	cmp	r3, #16
 80248ee:	d101      	bne.n	80248f4 <HAL_HCD_IRQHandler+0x158>
 80248f0:	2301      	movs	r3, #1
 80248f2:	e000      	b.n	80248f6 <HAL_HCD_IRQHandler+0x15a>
 80248f4:	2300      	movs	r3, #0
 80248f6:	2b00      	cmp	r3, #0
 80248f8:	d012      	beq.n	8024920 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80248fa:	687b      	ldr	r3, [r7, #4]
 80248fc:	681b      	ldr	r3, [r3, #0]
 80248fe:	699a      	ldr	r2, [r3, #24]
 8024900:	687b      	ldr	r3, [r7, #4]
 8024902:	681b      	ldr	r3, [r3, #0]
 8024904:	f022 0210 	bic.w	r2, r2, #16
 8024908:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 802490a:	6878      	ldr	r0, [r7, #4]
 802490c:	f000 ffa1 	bl	8025852 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8024910:	687b      	ldr	r3, [r7, #4]
 8024912:	681b      	ldr	r3, [r3, #0]
 8024914:	699a      	ldr	r2, [r3, #24]
 8024916:	687b      	ldr	r3, [r7, #4]
 8024918:	681b      	ldr	r3, [r3, #0]
 802491a:	f042 0210 	orr.w	r2, r2, #16
 802491e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8024920:	687b      	ldr	r3, [r7, #4]
 8024922:	681b      	ldr	r3, [r3, #0]
 8024924:	4618      	mov	r0, r3
 8024926:	f005 fb81 	bl	802a02c <USB_ReadInterrupts>
 802492a:	4603      	mov	r3, r0
 802492c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024930:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8024934:	d13a      	bne.n	80249ac <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8024936:	687b      	ldr	r3, [r7, #4]
 8024938:	681b      	ldr	r3, [r3, #0]
 802493a:	4618      	mov	r0, r3
 802493c:	f005 ffb6 	bl	802a8ac <USB_HC_ReadInterrupt>
 8024940:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8024942:	2300      	movs	r3, #0
 8024944:	617b      	str	r3, [r7, #20]
 8024946:	e025      	b.n	8024994 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8024948:	697b      	ldr	r3, [r7, #20]
 802494a:	f003 030f 	and.w	r3, r3, #15
 802494e:	68ba      	ldr	r2, [r7, #8]
 8024950:	fa22 f303 	lsr.w	r3, r2, r3
 8024954:	f003 0301 	and.w	r3, r3, #1
 8024958:	2b00      	cmp	r3, #0
 802495a:	d018      	beq.n	802498e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 802495c:	697b      	ldr	r3, [r7, #20]
 802495e:	015a      	lsls	r2, r3, #5
 8024960:	68fb      	ldr	r3, [r7, #12]
 8024962:	4413      	add	r3, r2
 8024964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024968:	681b      	ldr	r3, [r3, #0]
 802496a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802496e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8024972:	d106      	bne.n	8024982 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8024974:	697b      	ldr	r3, [r7, #20]
 8024976:	b2db      	uxtb	r3, r3
 8024978:	4619      	mov	r1, r3
 802497a:	6878      	ldr	r0, [r7, #4]
 802497c:	f000 f8ab 	bl	8024ad6 <HCD_HC_IN_IRQHandler>
 8024980:	e005      	b.n	802498e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8024982:	697b      	ldr	r3, [r7, #20]
 8024984:	b2db      	uxtb	r3, r3
 8024986:	4619      	mov	r1, r3
 8024988:	6878      	ldr	r0, [r7, #4]
 802498a:	f000 fbf9 	bl	8025180 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 802498e:	697b      	ldr	r3, [r7, #20]
 8024990:	3301      	adds	r3, #1
 8024992:	617b      	str	r3, [r7, #20]
 8024994:	687b      	ldr	r3, [r7, #4]
 8024996:	689b      	ldr	r3, [r3, #8]
 8024998:	697a      	ldr	r2, [r7, #20]
 802499a:	429a      	cmp	r2, r3
 802499c:	d3d4      	bcc.n	8024948 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 802499e:	687b      	ldr	r3, [r7, #4]
 80249a0:	681b      	ldr	r3, [r3, #0]
 80249a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80249a6:	615a      	str	r2, [r3, #20]
 80249a8:	e000      	b.n	80249ac <HAL_HCD_IRQHandler+0x210>
      return;
 80249aa:	bf00      	nop
    }
  }
}
 80249ac:	3718      	adds	r7, #24
 80249ae:	46bd      	mov	sp, r7
 80249b0:	bd80      	pop	{r7, pc}

080249b2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80249b2:	b580      	push	{r7, lr}
 80249b4:	b082      	sub	sp, #8
 80249b6:	af00      	add	r7, sp, #0
 80249b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80249ba:	687b      	ldr	r3, [r7, #4]
 80249bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80249c0:	2b01      	cmp	r3, #1
 80249c2:	d101      	bne.n	80249c8 <HAL_HCD_Start+0x16>
 80249c4:	2302      	movs	r3, #2
 80249c6:	e013      	b.n	80249f0 <HAL_HCD_Start+0x3e>
 80249c8:	687b      	ldr	r3, [r7, #4]
 80249ca:	2201      	movs	r2, #1
 80249cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80249d0:	687b      	ldr	r3, [r7, #4]
 80249d2:	681b      	ldr	r3, [r3, #0]
 80249d4:	2101      	movs	r1, #1
 80249d6:	4618      	mov	r0, r3
 80249d8:	f005 fca2 	bl	802a320 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80249dc:	687b      	ldr	r3, [r7, #4]
 80249de:	681b      	ldr	r3, [r3, #0]
 80249e0:	4618      	mov	r0, r3
 80249e2:	f005 f9ba 	bl	8029d5a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80249e6:	687b      	ldr	r3, [r7, #4]
 80249e8:	2200      	movs	r2, #0
 80249ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80249ee:	2300      	movs	r3, #0
}
 80249f0:	4618      	mov	r0, r3
 80249f2:	3708      	adds	r7, #8
 80249f4:	46bd      	mov	sp, r7
 80249f6:	bd80      	pop	{r7, pc}

080249f8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80249f8:	b580      	push	{r7, lr}
 80249fa:	b082      	sub	sp, #8
 80249fc:	af00      	add	r7, sp, #0
 80249fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8024a00:	687b      	ldr	r3, [r7, #4]
 8024a02:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8024a06:	2b01      	cmp	r3, #1
 8024a08:	d101      	bne.n	8024a0e <HAL_HCD_Stop+0x16>
 8024a0a:	2302      	movs	r3, #2
 8024a0c:	e00d      	b.n	8024a2a <HAL_HCD_Stop+0x32>
 8024a0e:	687b      	ldr	r3, [r7, #4]
 8024a10:	2201      	movs	r2, #1
 8024a12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8024a16:	687b      	ldr	r3, [r7, #4]
 8024a18:	681b      	ldr	r3, [r3, #0]
 8024a1a:	4618      	mov	r0, r3
 8024a1c:	f006 f890 	bl	802ab40 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8024a20:	687b      	ldr	r3, [r7, #4]
 8024a22:	2200      	movs	r2, #0
 8024a24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8024a28:	2300      	movs	r3, #0
}
 8024a2a:	4618      	mov	r0, r3
 8024a2c:	3708      	adds	r7, #8
 8024a2e:	46bd      	mov	sp, r7
 8024a30:	bd80      	pop	{r7, pc}

08024a32 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8024a32:	b580      	push	{r7, lr}
 8024a34:	b082      	sub	sp, #8
 8024a36:	af00      	add	r7, sp, #0
 8024a38:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8024a3a:	687b      	ldr	r3, [r7, #4]
 8024a3c:	681b      	ldr	r3, [r3, #0]
 8024a3e:	4618      	mov	r0, r3
 8024a40:	f005 fc44 	bl	802a2cc <USB_ResetPort>
 8024a44:	4603      	mov	r3, r0
}
 8024a46:	4618      	mov	r0, r3
 8024a48:	3708      	adds	r7, #8
 8024a4a:	46bd      	mov	sp, r7
 8024a4c:	bd80      	pop	{r7, pc}

08024a4e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8024a4e:	b480      	push	{r7}
 8024a50:	b083      	sub	sp, #12
 8024a52:	af00      	add	r7, sp, #0
 8024a54:	6078      	str	r0, [r7, #4]
 8024a56:	460b      	mov	r3, r1
 8024a58:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8024a5a:	78fb      	ldrb	r3, [r7, #3]
 8024a5c:	687a      	ldr	r2, [r7, #4]
 8024a5e:	212c      	movs	r1, #44	; 0x2c
 8024a60:	fb01 f303 	mul.w	r3, r1, r3
 8024a64:	4413      	add	r3, r2
 8024a66:	3360      	adds	r3, #96	; 0x60
 8024a68:	781b      	ldrb	r3, [r3, #0]
}
 8024a6a:	4618      	mov	r0, r3
 8024a6c:	370c      	adds	r7, #12
 8024a6e:	46bd      	mov	sp, r7
 8024a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a74:	4770      	bx	lr

08024a76 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8024a76:	b480      	push	{r7}
 8024a78:	b083      	sub	sp, #12
 8024a7a:	af00      	add	r7, sp, #0
 8024a7c:	6078      	str	r0, [r7, #4]
 8024a7e:	460b      	mov	r3, r1
 8024a80:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8024a82:	78fb      	ldrb	r3, [r7, #3]
 8024a84:	687a      	ldr	r2, [r7, #4]
 8024a86:	212c      	movs	r1, #44	; 0x2c
 8024a88:	fb01 f303 	mul.w	r3, r1, r3
 8024a8c:	4413      	add	r3, r2
 8024a8e:	3350      	adds	r3, #80	; 0x50
 8024a90:	681b      	ldr	r3, [r3, #0]
}
 8024a92:	4618      	mov	r0, r3
 8024a94:	370c      	adds	r7, #12
 8024a96:	46bd      	mov	sp, r7
 8024a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a9c:	4770      	bx	lr

08024a9e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8024a9e:	b580      	push	{r7, lr}
 8024aa0:	b082      	sub	sp, #8
 8024aa2:	af00      	add	r7, sp, #0
 8024aa4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8024aa6:	687b      	ldr	r3, [r7, #4]
 8024aa8:	681b      	ldr	r3, [r3, #0]
 8024aaa:	4618      	mov	r0, r3
 8024aac:	f005 fc88 	bl	802a3c0 <USB_GetCurrentFrame>
 8024ab0:	4603      	mov	r3, r0
}
 8024ab2:	4618      	mov	r0, r3
 8024ab4:	3708      	adds	r7, #8
 8024ab6:	46bd      	mov	sp, r7
 8024ab8:	bd80      	pop	{r7, pc}

08024aba <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8024aba:	b580      	push	{r7, lr}
 8024abc:	b082      	sub	sp, #8
 8024abe:	af00      	add	r7, sp, #0
 8024ac0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8024ac2:	687b      	ldr	r3, [r7, #4]
 8024ac4:	681b      	ldr	r3, [r3, #0]
 8024ac6:	4618      	mov	r0, r3
 8024ac8:	f005 fc63 	bl	802a392 <USB_GetHostSpeed>
 8024acc:	4603      	mov	r3, r0
}
 8024ace:	4618      	mov	r0, r3
 8024ad0:	3708      	adds	r7, #8
 8024ad2:	46bd      	mov	sp, r7
 8024ad4:	bd80      	pop	{r7, pc}

08024ad6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8024ad6:	b580      	push	{r7, lr}
 8024ad8:	b086      	sub	sp, #24
 8024ada:	af00      	add	r7, sp, #0
 8024adc:	6078      	str	r0, [r7, #4]
 8024ade:	460b      	mov	r3, r1
 8024ae0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8024ae2:	687b      	ldr	r3, [r7, #4]
 8024ae4:	681b      	ldr	r3, [r3, #0]
 8024ae6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8024ae8:	697b      	ldr	r3, [r7, #20]
 8024aea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8024aec:	78fb      	ldrb	r3, [r7, #3]
 8024aee:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8024af0:	68fb      	ldr	r3, [r7, #12]
 8024af2:	015a      	lsls	r2, r3, #5
 8024af4:	693b      	ldr	r3, [r7, #16]
 8024af6:	4413      	add	r3, r2
 8024af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024afc:	689b      	ldr	r3, [r3, #8]
 8024afe:	f003 0304 	and.w	r3, r3, #4
 8024b02:	2b04      	cmp	r3, #4
 8024b04:	d11a      	bne.n	8024b3c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8024b06:	68fb      	ldr	r3, [r7, #12]
 8024b08:	015a      	lsls	r2, r3, #5
 8024b0a:	693b      	ldr	r3, [r7, #16]
 8024b0c:	4413      	add	r3, r2
 8024b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024b12:	461a      	mov	r2, r3
 8024b14:	2304      	movs	r3, #4
 8024b16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8024b18:	687a      	ldr	r2, [r7, #4]
 8024b1a:	68fb      	ldr	r3, [r7, #12]
 8024b1c:	212c      	movs	r1, #44	; 0x2c
 8024b1e:	fb01 f303 	mul.w	r3, r1, r3
 8024b22:	4413      	add	r3, r2
 8024b24:	3361      	adds	r3, #97	; 0x61
 8024b26:	2206      	movs	r2, #6
 8024b28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024b2a:	687b      	ldr	r3, [r7, #4]
 8024b2c:	681b      	ldr	r3, [r3, #0]
 8024b2e:	68fa      	ldr	r2, [r7, #12]
 8024b30:	b2d2      	uxtb	r2, r2
 8024b32:	4611      	mov	r1, r2
 8024b34:	4618      	mov	r0, r3
 8024b36:	f005 feca 	bl	802a8ce <USB_HC_Halt>
 8024b3a:	e0af      	b.n	8024c9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8024b3c:	68fb      	ldr	r3, [r7, #12]
 8024b3e:	015a      	lsls	r2, r3, #5
 8024b40:	693b      	ldr	r3, [r7, #16]
 8024b42:	4413      	add	r3, r2
 8024b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024b48:	689b      	ldr	r3, [r3, #8]
 8024b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024b52:	d11b      	bne.n	8024b8c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8024b54:	68fb      	ldr	r3, [r7, #12]
 8024b56:	015a      	lsls	r2, r3, #5
 8024b58:	693b      	ldr	r3, [r7, #16]
 8024b5a:	4413      	add	r3, r2
 8024b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024b60:	461a      	mov	r2, r3
 8024b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8024b66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8024b68:	687a      	ldr	r2, [r7, #4]
 8024b6a:	68fb      	ldr	r3, [r7, #12]
 8024b6c:	212c      	movs	r1, #44	; 0x2c
 8024b6e:	fb01 f303 	mul.w	r3, r1, r3
 8024b72:	4413      	add	r3, r2
 8024b74:	3361      	adds	r3, #97	; 0x61
 8024b76:	2207      	movs	r2, #7
 8024b78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024b7a:	687b      	ldr	r3, [r7, #4]
 8024b7c:	681b      	ldr	r3, [r3, #0]
 8024b7e:	68fa      	ldr	r2, [r7, #12]
 8024b80:	b2d2      	uxtb	r2, r2
 8024b82:	4611      	mov	r1, r2
 8024b84:	4618      	mov	r0, r3
 8024b86:	f005 fea2 	bl	802a8ce <USB_HC_Halt>
 8024b8a:	e087      	b.n	8024c9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8024b8c:	68fb      	ldr	r3, [r7, #12]
 8024b8e:	015a      	lsls	r2, r3, #5
 8024b90:	693b      	ldr	r3, [r7, #16]
 8024b92:	4413      	add	r3, r2
 8024b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024b98:	689b      	ldr	r3, [r3, #8]
 8024b9a:	f003 0320 	and.w	r3, r3, #32
 8024b9e:	2b20      	cmp	r3, #32
 8024ba0:	d109      	bne.n	8024bb6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8024ba2:	68fb      	ldr	r3, [r7, #12]
 8024ba4:	015a      	lsls	r2, r3, #5
 8024ba6:	693b      	ldr	r3, [r7, #16]
 8024ba8:	4413      	add	r3, r2
 8024baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024bae:	461a      	mov	r2, r3
 8024bb0:	2320      	movs	r3, #32
 8024bb2:	6093      	str	r3, [r2, #8]
 8024bb4:	e072      	b.n	8024c9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8024bb6:	68fb      	ldr	r3, [r7, #12]
 8024bb8:	015a      	lsls	r2, r3, #5
 8024bba:	693b      	ldr	r3, [r7, #16]
 8024bbc:	4413      	add	r3, r2
 8024bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024bc2:	689b      	ldr	r3, [r3, #8]
 8024bc4:	f003 0308 	and.w	r3, r3, #8
 8024bc8:	2b08      	cmp	r3, #8
 8024bca:	d11a      	bne.n	8024c02 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8024bcc:	68fb      	ldr	r3, [r7, #12]
 8024bce:	015a      	lsls	r2, r3, #5
 8024bd0:	693b      	ldr	r3, [r7, #16]
 8024bd2:	4413      	add	r3, r2
 8024bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024bd8:	461a      	mov	r2, r3
 8024bda:	2308      	movs	r3, #8
 8024bdc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8024bde:	687a      	ldr	r2, [r7, #4]
 8024be0:	68fb      	ldr	r3, [r7, #12]
 8024be2:	212c      	movs	r1, #44	; 0x2c
 8024be4:	fb01 f303 	mul.w	r3, r1, r3
 8024be8:	4413      	add	r3, r2
 8024bea:	3361      	adds	r3, #97	; 0x61
 8024bec:	2205      	movs	r2, #5
 8024bee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024bf0:	687b      	ldr	r3, [r7, #4]
 8024bf2:	681b      	ldr	r3, [r3, #0]
 8024bf4:	68fa      	ldr	r2, [r7, #12]
 8024bf6:	b2d2      	uxtb	r2, r2
 8024bf8:	4611      	mov	r1, r2
 8024bfa:	4618      	mov	r0, r3
 8024bfc:	f005 fe67 	bl	802a8ce <USB_HC_Halt>
 8024c00:	e04c      	b.n	8024c9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8024c02:	68fb      	ldr	r3, [r7, #12]
 8024c04:	015a      	lsls	r2, r3, #5
 8024c06:	693b      	ldr	r3, [r7, #16]
 8024c08:	4413      	add	r3, r2
 8024c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024c0e:	689b      	ldr	r3, [r3, #8]
 8024c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024c18:	d11b      	bne.n	8024c52 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8024c1a:	68fb      	ldr	r3, [r7, #12]
 8024c1c:	015a      	lsls	r2, r3, #5
 8024c1e:	693b      	ldr	r3, [r7, #16]
 8024c20:	4413      	add	r3, r2
 8024c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024c26:	461a      	mov	r2, r3
 8024c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024c2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8024c2e:	687a      	ldr	r2, [r7, #4]
 8024c30:	68fb      	ldr	r3, [r7, #12]
 8024c32:	212c      	movs	r1, #44	; 0x2c
 8024c34:	fb01 f303 	mul.w	r3, r1, r3
 8024c38:	4413      	add	r3, r2
 8024c3a:	3361      	adds	r3, #97	; 0x61
 8024c3c:	2208      	movs	r2, #8
 8024c3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024c40:	687b      	ldr	r3, [r7, #4]
 8024c42:	681b      	ldr	r3, [r3, #0]
 8024c44:	68fa      	ldr	r2, [r7, #12]
 8024c46:	b2d2      	uxtb	r2, r2
 8024c48:	4611      	mov	r1, r2
 8024c4a:	4618      	mov	r0, r3
 8024c4c:	f005 fe3f 	bl	802a8ce <USB_HC_Halt>
 8024c50:	e024      	b.n	8024c9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8024c52:	68fb      	ldr	r3, [r7, #12]
 8024c54:	015a      	lsls	r2, r3, #5
 8024c56:	693b      	ldr	r3, [r7, #16]
 8024c58:	4413      	add	r3, r2
 8024c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024c5e:	689b      	ldr	r3, [r3, #8]
 8024c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024c64:	2b80      	cmp	r3, #128	; 0x80
 8024c66:	d119      	bne.n	8024c9c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8024c68:	68fb      	ldr	r3, [r7, #12]
 8024c6a:	015a      	lsls	r2, r3, #5
 8024c6c:	693b      	ldr	r3, [r7, #16]
 8024c6e:	4413      	add	r3, r2
 8024c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024c74:	461a      	mov	r2, r3
 8024c76:	2380      	movs	r3, #128	; 0x80
 8024c78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8024c7a:	687a      	ldr	r2, [r7, #4]
 8024c7c:	68fb      	ldr	r3, [r7, #12]
 8024c7e:	212c      	movs	r1, #44	; 0x2c
 8024c80:	fb01 f303 	mul.w	r3, r1, r3
 8024c84:	4413      	add	r3, r2
 8024c86:	3361      	adds	r3, #97	; 0x61
 8024c88:	2206      	movs	r2, #6
 8024c8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024c8c:	687b      	ldr	r3, [r7, #4]
 8024c8e:	681b      	ldr	r3, [r3, #0]
 8024c90:	68fa      	ldr	r2, [r7, #12]
 8024c92:	b2d2      	uxtb	r2, r2
 8024c94:	4611      	mov	r1, r2
 8024c96:	4618      	mov	r0, r3
 8024c98:	f005 fe19 	bl	802a8ce <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8024c9c:	68fb      	ldr	r3, [r7, #12]
 8024c9e:	015a      	lsls	r2, r3, #5
 8024ca0:	693b      	ldr	r3, [r7, #16]
 8024ca2:	4413      	add	r3, r2
 8024ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024ca8:	689b      	ldr	r3, [r3, #8]
 8024caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8024cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024cb2:	d112      	bne.n	8024cda <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024cb4:	687b      	ldr	r3, [r7, #4]
 8024cb6:	681b      	ldr	r3, [r3, #0]
 8024cb8:	68fa      	ldr	r2, [r7, #12]
 8024cba:	b2d2      	uxtb	r2, r2
 8024cbc:	4611      	mov	r1, r2
 8024cbe:	4618      	mov	r0, r3
 8024cc0:	f005 fe05 	bl	802a8ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8024cc4:	68fb      	ldr	r3, [r7, #12]
 8024cc6:	015a      	lsls	r2, r3, #5
 8024cc8:	693b      	ldr	r3, [r7, #16]
 8024cca:	4413      	add	r3, r2
 8024ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024cd0:	461a      	mov	r2, r3
 8024cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024cd6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8024cd8:	e24e      	b.n	8025178 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8024cda:	68fb      	ldr	r3, [r7, #12]
 8024cdc:	015a      	lsls	r2, r3, #5
 8024cde:	693b      	ldr	r3, [r7, #16]
 8024ce0:	4413      	add	r3, r2
 8024ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024ce6:	689b      	ldr	r3, [r3, #8]
 8024ce8:	f003 0301 	and.w	r3, r3, #1
 8024cec:	2b01      	cmp	r3, #1
 8024cee:	f040 80df 	bne.w	8024eb0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8024cf2:	687b      	ldr	r3, [r7, #4]
 8024cf4:	691b      	ldr	r3, [r3, #16]
 8024cf6:	2b00      	cmp	r3, #0
 8024cf8:	d019      	beq.n	8024d2e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8024cfa:	687a      	ldr	r2, [r7, #4]
 8024cfc:	68fb      	ldr	r3, [r7, #12]
 8024cfe:	212c      	movs	r1, #44	; 0x2c
 8024d00:	fb01 f303 	mul.w	r3, r1, r3
 8024d04:	4413      	add	r3, r2
 8024d06:	3348      	adds	r3, #72	; 0x48
 8024d08:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8024d0a:	68fb      	ldr	r3, [r7, #12]
 8024d0c:	0159      	lsls	r1, r3, #5
 8024d0e:	693b      	ldr	r3, [r7, #16]
 8024d10:	440b      	add	r3, r1
 8024d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024d16:	691b      	ldr	r3, [r3, #16]
 8024d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8024d1c:	1ad2      	subs	r2, r2, r3
 8024d1e:	6879      	ldr	r1, [r7, #4]
 8024d20:	68fb      	ldr	r3, [r7, #12]
 8024d22:	202c      	movs	r0, #44	; 0x2c
 8024d24:	fb00 f303 	mul.w	r3, r0, r3
 8024d28:	440b      	add	r3, r1
 8024d2a:	3350      	adds	r3, #80	; 0x50
 8024d2c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8024d2e:	687a      	ldr	r2, [r7, #4]
 8024d30:	68fb      	ldr	r3, [r7, #12]
 8024d32:	212c      	movs	r1, #44	; 0x2c
 8024d34:	fb01 f303 	mul.w	r3, r1, r3
 8024d38:	4413      	add	r3, r2
 8024d3a:	3361      	adds	r3, #97	; 0x61
 8024d3c:	2201      	movs	r2, #1
 8024d3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8024d40:	687a      	ldr	r2, [r7, #4]
 8024d42:	68fb      	ldr	r3, [r7, #12]
 8024d44:	212c      	movs	r1, #44	; 0x2c
 8024d46:	fb01 f303 	mul.w	r3, r1, r3
 8024d4a:	4413      	add	r3, r2
 8024d4c:	335c      	adds	r3, #92	; 0x5c
 8024d4e:	2200      	movs	r2, #0
 8024d50:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8024d52:	68fb      	ldr	r3, [r7, #12]
 8024d54:	015a      	lsls	r2, r3, #5
 8024d56:	693b      	ldr	r3, [r7, #16]
 8024d58:	4413      	add	r3, r2
 8024d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024d5e:	461a      	mov	r2, r3
 8024d60:	2301      	movs	r3, #1
 8024d62:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8024d64:	687a      	ldr	r2, [r7, #4]
 8024d66:	68fb      	ldr	r3, [r7, #12]
 8024d68:	212c      	movs	r1, #44	; 0x2c
 8024d6a:	fb01 f303 	mul.w	r3, r1, r3
 8024d6e:	4413      	add	r3, r2
 8024d70:	333f      	adds	r3, #63	; 0x3f
 8024d72:	781b      	ldrb	r3, [r3, #0]
 8024d74:	2b00      	cmp	r3, #0
 8024d76:	d009      	beq.n	8024d8c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8024d78:	687a      	ldr	r2, [r7, #4]
 8024d7a:	68fb      	ldr	r3, [r7, #12]
 8024d7c:	212c      	movs	r1, #44	; 0x2c
 8024d7e:	fb01 f303 	mul.w	r3, r1, r3
 8024d82:	4413      	add	r3, r2
 8024d84:	333f      	adds	r3, #63	; 0x3f
 8024d86:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8024d88:	2b02      	cmp	r3, #2
 8024d8a:	d111      	bne.n	8024db0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024d8c:	687b      	ldr	r3, [r7, #4]
 8024d8e:	681b      	ldr	r3, [r3, #0]
 8024d90:	68fa      	ldr	r2, [r7, #12]
 8024d92:	b2d2      	uxtb	r2, r2
 8024d94:	4611      	mov	r1, r2
 8024d96:	4618      	mov	r0, r3
 8024d98:	f005 fd99 	bl	802a8ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8024d9c:	68fb      	ldr	r3, [r7, #12]
 8024d9e:	015a      	lsls	r2, r3, #5
 8024da0:	693b      	ldr	r3, [r7, #16]
 8024da2:	4413      	add	r3, r2
 8024da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024da8:	461a      	mov	r2, r3
 8024daa:	2310      	movs	r3, #16
 8024dac:	6093      	str	r3, [r2, #8]
 8024dae:	e03a      	b.n	8024e26 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8024db0:	687a      	ldr	r2, [r7, #4]
 8024db2:	68fb      	ldr	r3, [r7, #12]
 8024db4:	212c      	movs	r1, #44	; 0x2c
 8024db6:	fb01 f303 	mul.w	r3, r1, r3
 8024dba:	4413      	add	r3, r2
 8024dbc:	333f      	adds	r3, #63	; 0x3f
 8024dbe:	781b      	ldrb	r3, [r3, #0]
 8024dc0:	2b03      	cmp	r3, #3
 8024dc2:	d009      	beq.n	8024dd8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8024dc4:	687a      	ldr	r2, [r7, #4]
 8024dc6:	68fb      	ldr	r3, [r7, #12]
 8024dc8:	212c      	movs	r1, #44	; 0x2c
 8024dca:	fb01 f303 	mul.w	r3, r1, r3
 8024dce:	4413      	add	r3, r2
 8024dd0:	333f      	adds	r3, #63	; 0x3f
 8024dd2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8024dd4:	2b01      	cmp	r3, #1
 8024dd6:	d126      	bne.n	8024e26 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8024dd8:	68fb      	ldr	r3, [r7, #12]
 8024dda:	015a      	lsls	r2, r3, #5
 8024ddc:	693b      	ldr	r3, [r7, #16]
 8024dde:	4413      	add	r3, r2
 8024de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024de4:	681b      	ldr	r3, [r3, #0]
 8024de6:	68fa      	ldr	r2, [r7, #12]
 8024de8:	0151      	lsls	r1, r2, #5
 8024dea:	693a      	ldr	r2, [r7, #16]
 8024dec:	440a      	add	r2, r1
 8024dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8024df2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8024df6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8024df8:	687a      	ldr	r2, [r7, #4]
 8024dfa:	68fb      	ldr	r3, [r7, #12]
 8024dfc:	212c      	movs	r1, #44	; 0x2c
 8024dfe:	fb01 f303 	mul.w	r3, r1, r3
 8024e02:	4413      	add	r3, r2
 8024e04:	3360      	adds	r3, #96	; 0x60
 8024e06:	2201      	movs	r2, #1
 8024e08:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8024e0a:	68fb      	ldr	r3, [r7, #12]
 8024e0c:	b2d9      	uxtb	r1, r3
 8024e0e:	687a      	ldr	r2, [r7, #4]
 8024e10:	68fb      	ldr	r3, [r7, #12]
 8024e12:	202c      	movs	r0, #44	; 0x2c
 8024e14:	fb00 f303 	mul.w	r3, r0, r3
 8024e18:	4413      	add	r3, r2
 8024e1a:	3360      	adds	r3, #96	; 0x60
 8024e1c:	781b      	ldrb	r3, [r3, #0]
 8024e1e:	461a      	mov	r2, r3
 8024e20:	6878      	ldr	r0, [r7, #4]
 8024e22:	f007 fff3 	bl	802ce0c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8024e26:	687b      	ldr	r3, [r7, #4]
 8024e28:	691b      	ldr	r3, [r3, #16]
 8024e2a:	2b01      	cmp	r3, #1
 8024e2c:	d12b      	bne.n	8024e86 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8024e2e:	687a      	ldr	r2, [r7, #4]
 8024e30:	68fb      	ldr	r3, [r7, #12]
 8024e32:	212c      	movs	r1, #44	; 0x2c
 8024e34:	fb01 f303 	mul.w	r3, r1, r3
 8024e38:	4413      	add	r3, r2
 8024e3a:	3348      	adds	r3, #72	; 0x48
 8024e3c:	681b      	ldr	r3, [r3, #0]
 8024e3e:	6879      	ldr	r1, [r7, #4]
 8024e40:	68fa      	ldr	r2, [r7, #12]
 8024e42:	202c      	movs	r0, #44	; 0x2c
 8024e44:	fb00 f202 	mul.w	r2, r0, r2
 8024e48:	440a      	add	r2, r1
 8024e4a:	3240      	adds	r2, #64	; 0x40
 8024e4c:	8812      	ldrh	r2, [r2, #0]
 8024e4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8024e52:	f003 0301 	and.w	r3, r3, #1
 8024e56:	2b00      	cmp	r3, #0
 8024e58:	f000 818e 	beq.w	8025178 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8024e5c:	687a      	ldr	r2, [r7, #4]
 8024e5e:	68fb      	ldr	r3, [r7, #12]
 8024e60:	212c      	movs	r1, #44	; 0x2c
 8024e62:	fb01 f303 	mul.w	r3, r1, r3
 8024e66:	4413      	add	r3, r2
 8024e68:	3354      	adds	r3, #84	; 0x54
 8024e6a:	781b      	ldrb	r3, [r3, #0]
 8024e6c:	f083 0301 	eor.w	r3, r3, #1
 8024e70:	b2d8      	uxtb	r0, r3
 8024e72:	687a      	ldr	r2, [r7, #4]
 8024e74:	68fb      	ldr	r3, [r7, #12]
 8024e76:	212c      	movs	r1, #44	; 0x2c
 8024e78:	fb01 f303 	mul.w	r3, r1, r3
 8024e7c:	4413      	add	r3, r2
 8024e7e:	3354      	adds	r3, #84	; 0x54
 8024e80:	4602      	mov	r2, r0
 8024e82:	701a      	strb	r2, [r3, #0]
}
 8024e84:	e178      	b.n	8025178 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8024e86:	687a      	ldr	r2, [r7, #4]
 8024e88:	68fb      	ldr	r3, [r7, #12]
 8024e8a:	212c      	movs	r1, #44	; 0x2c
 8024e8c:	fb01 f303 	mul.w	r3, r1, r3
 8024e90:	4413      	add	r3, r2
 8024e92:	3354      	adds	r3, #84	; 0x54
 8024e94:	781b      	ldrb	r3, [r3, #0]
 8024e96:	f083 0301 	eor.w	r3, r3, #1
 8024e9a:	b2d8      	uxtb	r0, r3
 8024e9c:	687a      	ldr	r2, [r7, #4]
 8024e9e:	68fb      	ldr	r3, [r7, #12]
 8024ea0:	212c      	movs	r1, #44	; 0x2c
 8024ea2:	fb01 f303 	mul.w	r3, r1, r3
 8024ea6:	4413      	add	r3, r2
 8024ea8:	3354      	adds	r3, #84	; 0x54
 8024eaa:	4602      	mov	r2, r0
 8024eac:	701a      	strb	r2, [r3, #0]
}
 8024eae:	e163      	b.n	8025178 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8024eb0:	68fb      	ldr	r3, [r7, #12]
 8024eb2:	015a      	lsls	r2, r3, #5
 8024eb4:	693b      	ldr	r3, [r7, #16]
 8024eb6:	4413      	add	r3, r2
 8024eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024ebc:	689b      	ldr	r3, [r3, #8]
 8024ebe:	f003 0302 	and.w	r3, r3, #2
 8024ec2:	2b02      	cmp	r3, #2
 8024ec4:	f040 80f6 	bne.w	80250b4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8024ec8:	687a      	ldr	r2, [r7, #4]
 8024eca:	68fb      	ldr	r3, [r7, #12]
 8024ecc:	212c      	movs	r1, #44	; 0x2c
 8024ece:	fb01 f303 	mul.w	r3, r1, r3
 8024ed2:	4413      	add	r3, r2
 8024ed4:	3361      	adds	r3, #97	; 0x61
 8024ed6:	781b      	ldrb	r3, [r3, #0]
 8024ed8:	2b01      	cmp	r3, #1
 8024eda:	d109      	bne.n	8024ef0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8024edc:	687a      	ldr	r2, [r7, #4]
 8024ede:	68fb      	ldr	r3, [r7, #12]
 8024ee0:	212c      	movs	r1, #44	; 0x2c
 8024ee2:	fb01 f303 	mul.w	r3, r1, r3
 8024ee6:	4413      	add	r3, r2
 8024ee8:	3360      	adds	r3, #96	; 0x60
 8024eea:	2201      	movs	r2, #1
 8024eec:	701a      	strb	r2, [r3, #0]
 8024eee:	e0c9      	b.n	8025084 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8024ef0:	687a      	ldr	r2, [r7, #4]
 8024ef2:	68fb      	ldr	r3, [r7, #12]
 8024ef4:	212c      	movs	r1, #44	; 0x2c
 8024ef6:	fb01 f303 	mul.w	r3, r1, r3
 8024efa:	4413      	add	r3, r2
 8024efc:	3361      	adds	r3, #97	; 0x61
 8024efe:	781b      	ldrb	r3, [r3, #0]
 8024f00:	2b05      	cmp	r3, #5
 8024f02:	d109      	bne.n	8024f18 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8024f04:	687a      	ldr	r2, [r7, #4]
 8024f06:	68fb      	ldr	r3, [r7, #12]
 8024f08:	212c      	movs	r1, #44	; 0x2c
 8024f0a:	fb01 f303 	mul.w	r3, r1, r3
 8024f0e:	4413      	add	r3, r2
 8024f10:	3360      	adds	r3, #96	; 0x60
 8024f12:	2205      	movs	r2, #5
 8024f14:	701a      	strb	r2, [r3, #0]
 8024f16:	e0b5      	b.n	8025084 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8024f18:	687a      	ldr	r2, [r7, #4]
 8024f1a:	68fb      	ldr	r3, [r7, #12]
 8024f1c:	212c      	movs	r1, #44	; 0x2c
 8024f1e:	fb01 f303 	mul.w	r3, r1, r3
 8024f22:	4413      	add	r3, r2
 8024f24:	3361      	adds	r3, #97	; 0x61
 8024f26:	781b      	ldrb	r3, [r3, #0]
 8024f28:	2b06      	cmp	r3, #6
 8024f2a:	d009      	beq.n	8024f40 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8024f2c:	687a      	ldr	r2, [r7, #4]
 8024f2e:	68fb      	ldr	r3, [r7, #12]
 8024f30:	212c      	movs	r1, #44	; 0x2c
 8024f32:	fb01 f303 	mul.w	r3, r1, r3
 8024f36:	4413      	add	r3, r2
 8024f38:	3361      	adds	r3, #97	; 0x61
 8024f3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8024f3c:	2b08      	cmp	r3, #8
 8024f3e:	d150      	bne.n	8024fe2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8024f40:	687a      	ldr	r2, [r7, #4]
 8024f42:	68fb      	ldr	r3, [r7, #12]
 8024f44:	212c      	movs	r1, #44	; 0x2c
 8024f46:	fb01 f303 	mul.w	r3, r1, r3
 8024f4a:	4413      	add	r3, r2
 8024f4c:	335c      	adds	r3, #92	; 0x5c
 8024f4e:	681b      	ldr	r3, [r3, #0]
 8024f50:	1c5a      	adds	r2, r3, #1
 8024f52:	6879      	ldr	r1, [r7, #4]
 8024f54:	68fb      	ldr	r3, [r7, #12]
 8024f56:	202c      	movs	r0, #44	; 0x2c
 8024f58:	fb00 f303 	mul.w	r3, r0, r3
 8024f5c:	440b      	add	r3, r1
 8024f5e:	335c      	adds	r3, #92	; 0x5c
 8024f60:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8024f62:	687a      	ldr	r2, [r7, #4]
 8024f64:	68fb      	ldr	r3, [r7, #12]
 8024f66:	212c      	movs	r1, #44	; 0x2c
 8024f68:	fb01 f303 	mul.w	r3, r1, r3
 8024f6c:	4413      	add	r3, r2
 8024f6e:	335c      	adds	r3, #92	; 0x5c
 8024f70:	681b      	ldr	r3, [r3, #0]
 8024f72:	2b02      	cmp	r3, #2
 8024f74:	d912      	bls.n	8024f9c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8024f76:	687a      	ldr	r2, [r7, #4]
 8024f78:	68fb      	ldr	r3, [r7, #12]
 8024f7a:	212c      	movs	r1, #44	; 0x2c
 8024f7c:	fb01 f303 	mul.w	r3, r1, r3
 8024f80:	4413      	add	r3, r2
 8024f82:	335c      	adds	r3, #92	; 0x5c
 8024f84:	2200      	movs	r2, #0
 8024f86:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8024f88:	687a      	ldr	r2, [r7, #4]
 8024f8a:	68fb      	ldr	r3, [r7, #12]
 8024f8c:	212c      	movs	r1, #44	; 0x2c
 8024f8e:	fb01 f303 	mul.w	r3, r1, r3
 8024f92:	4413      	add	r3, r2
 8024f94:	3360      	adds	r3, #96	; 0x60
 8024f96:	2204      	movs	r2, #4
 8024f98:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8024f9a:	e073      	b.n	8025084 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8024f9c:	687a      	ldr	r2, [r7, #4]
 8024f9e:	68fb      	ldr	r3, [r7, #12]
 8024fa0:	212c      	movs	r1, #44	; 0x2c
 8024fa2:	fb01 f303 	mul.w	r3, r1, r3
 8024fa6:	4413      	add	r3, r2
 8024fa8:	3360      	adds	r3, #96	; 0x60
 8024faa:	2202      	movs	r2, #2
 8024fac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8024fae:	68fb      	ldr	r3, [r7, #12]
 8024fb0:	015a      	lsls	r2, r3, #5
 8024fb2:	693b      	ldr	r3, [r7, #16]
 8024fb4:	4413      	add	r3, r2
 8024fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024fba:	681b      	ldr	r3, [r3, #0]
 8024fbc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8024fbe:	68bb      	ldr	r3, [r7, #8]
 8024fc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8024fc4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8024fc6:	68bb      	ldr	r3, [r7, #8]
 8024fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8024fcc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8024fce:	68fb      	ldr	r3, [r7, #12]
 8024fd0:	015a      	lsls	r2, r3, #5
 8024fd2:	693b      	ldr	r3, [r7, #16]
 8024fd4:	4413      	add	r3, r2
 8024fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024fda:	461a      	mov	r2, r3
 8024fdc:	68bb      	ldr	r3, [r7, #8]
 8024fde:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8024fe0:	e050      	b.n	8025084 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8024fe2:	687a      	ldr	r2, [r7, #4]
 8024fe4:	68fb      	ldr	r3, [r7, #12]
 8024fe6:	212c      	movs	r1, #44	; 0x2c
 8024fe8:	fb01 f303 	mul.w	r3, r1, r3
 8024fec:	4413      	add	r3, r2
 8024fee:	3361      	adds	r3, #97	; 0x61
 8024ff0:	781b      	ldrb	r3, [r3, #0]
 8024ff2:	2b03      	cmp	r3, #3
 8024ff4:	d122      	bne.n	802503c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8024ff6:	687a      	ldr	r2, [r7, #4]
 8024ff8:	68fb      	ldr	r3, [r7, #12]
 8024ffa:	212c      	movs	r1, #44	; 0x2c
 8024ffc:	fb01 f303 	mul.w	r3, r1, r3
 8025000:	4413      	add	r3, r2
 8025002:	3360      	adds	r3, #96	; 0x60
 8025004:	2202      	movs	r2, #2
 8025006:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025008:	68fb      	ldr	r3, [r7, #12]
 802500a:	015a      	lsls	r2, r3, #5
 802500c:	693b      	ldr	r3, [r7, #16]
 802500e:	4413      	add	r3, r2
 8025010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025014:	681b      	ldr	r3, [r3, #0]
 8025016:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025018:	68bb      	ldr	r3, [r7, #8]
 802501a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802501e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025020:	68bb      	ldr	r3, [r7, #8]
 8025022:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025026:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025028:	68fb      	ldr	r3, [r7, #12]
 802502a:	015a      	lsls	r2, r3, #5
 802502c:	693b      	ldr	r3, [r7, #16]
 802502e:	4413      	add	r3, r2
 8025030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025034:	461a      	mov	r2, r3
 8025036:	68bb      	ldr	r3, [r7, #8]
 8025038:	6013      	str	r3, [r2, #0]
 802503a:	e023      	b.n	8025084 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 802503c:	687a      	ldr	r2, [r7, #4]
 802503e:	68fb      	ldr	r3, [r7, #12]
 8025040:	212c      	movs	r1, #44	; 0x2c
 8025042:	fb01 f303 	mul.w	r3, r1, r3
 8025046:	4413      	add	r3, r2
 8025048:	3361      	adds	r3, #97	; 0x61
 802504a:	781b      	ldrb	r3, [r3, #0]
 802504c:	2b07      	cmp	r3, #7
 802504e:	d119      	bne.n	8025084 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8025050:	687a      	ldr	r2, [r7, #4]
 8025052:	68fb      	ldr	r3, [r7, #12]
 8025054:	212c      	movs	r1, #44	; 0x2c
 8025056:	fb01 f303 	mul.w	r3, r1, r3
 802505a:	4413      	add	r3, r2
 802505c:	335c      	adds	r3, #92	; 0x5c
 802505e:	681b      	ldr	r3, [r3, #0]
 8025060:	1c5a      	adds	r2, r3, #1
 8025062:	6879      	ldr	r1, [r7, #4]
 8025064:	68fb      	ldr	r3, [r7, #12]
 8025066:	202c      	movs	r0, #44	; 0x2c
 8025068:	fb00 f303 	mul.w	r3, r0, r3
 802506c:	440b      	add	r3, r1
 802506e:	335c      	adds	r3, #92	; 0x5c
 8025070:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025072:	687a      	ldr	r2, [r7, #4]
 8025074:	68fb      	ldr	r3, [r7, #12]
 8025076:	212c      	movs	r1, #44	; 0x2c
 8025078:	fb01 f303 	mul.w	r3, r1, r3
 802507c:	4413      	add	r3, r2
 802507e:	3360      	adds	r3, #96	; 0x60
 8025080:	2204      	movs	r2, #4
 8025082:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8025084:	68fb      	ldr	r3, [r7, #12]
 8025086:	015a      	lsls	r2, r3, #5
 8025088:	693b      	ldr	r3, [r7, #16]
 802508a:	4413      	add	r3, r2
 802508c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025090:	461a      	mov	r2, r3
 8025092:	2302      	movs	r3, #2
 8025094:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025096:	68fb      	ldr	r3, [r7, #12]
 8025098:	b2d9      	uxtb	r1, r3
 802509a:	687a      	ldr	r2, [r7, #4]
 802509c:	68fb      	ldr	r3, [r7, #12]
 802509e:	202c      	movs	r0, #44	; 0x2c
 80250a0:	fb00 f303 	mul.w	r3, r0, r3
 80250a4:	4413      	add	r3, r2
 80250a6:	3360      	adds	r3, #96	; 0x60
 80250a8:	781b      	ldrb	r3, [r3, #0]
 80250aa:	461a      	mov	r2, r3
 80250ac:	6878      	ldr	r0, [r7, #4]
 80250ae:	f007 fead 	bl	802ce0c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80250b2:	e061      	b.n	8025178 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80250b4:	68fb      	ldr	r3, [r7, #12]
 80250b6:	015a      	lsls	r2, r3, #5
 80250b8:	693b      	ldr	r3, [r7, #16]
 80250ba:	4413      	add	r3, r2
 80250bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80250c0:	689b      	ldr	r3, [r3, #8]
 80250c2:	f003 0310 	and.w	r3, r3, #16
 80250c6:	2b10      	cmp	r3, #16
 80250c8:	d156      	bne.n	8025178 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80250ca:	687a      	ldr	r2, [r7, #4]
 80250cc:	68fb      	ldr	r3, [r7, #12]
 80250ce:	212c      	movs	r1, #44	; 0x2c
 80250d0:	fb01 f303 	mul.w	r3, r1, r3
 80250d4:	4413      	add	r3, r2
 80250d6:	333f      	adds	r3, #63	; 0x3f
 80250d8:	781b      	ldrb	r3, [r3, #0]
 80250da:	2b03      	cmp	r3, #3
 80250dc:	d111      	bne.n	8025102 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80250de:	687a      	ldr	r2, [r7, #4]
 80250e0:	68fb      	ldr	r3, [r7, #12]
 80250e2:	212c      	movs	r1, #44	; 0x2c
 80250e4:	fb01 f303 	mul.w	r3, r1, r3
 80250e8:	4413      	add	r3, r2
 80250ea:	335c      	adds	r3, #92	; 0x5c
 80250ec:	2200      	movs	r2, #0
 80250ee:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80250f0:	687b      	ldr	r3, [r7, #4]
 80250f2:	681b      	ldr	r3, [r3, #0]
 80250f4:	68fa      	ldr	r2, [r7, #12]
 80250f6:	b2d2      	uxtb	r2, r2
 80250f8:	4611      	mov	r1, r2
 80250fa:	4618      	mov	r0, r3
 80250fc:	f005 fbe7 	bl	802a8ce <USB_HC_Halt>
 8025100:	e031      	b.n	8025166 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025102:	687a      	ldr	r2, [r7, #4]
 8025104:	68fb      	ldr	r3, [r7, #12]
 8025106:	212c      	movs	r1, #44	; 0x2c
 8025108:	fb01 f303 	mul.w	r3, r1, r3
 802510c:	4413      	add	r3, r2
 802510e:	333f      	adds	r3, #63	; 0x3f
 8025110:	781b      	ldrb	r3, [r3, #0]
 8025112:	2b00      	cmp	r3, #0
 8025114:	d009      	beq.n	802512a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8025116:	687a      	ldr	r2, [r7, #4]
 8025118:	68fb      	ldr	r3, [r7, #12]
 802511a:	212c      	movs	r1, #44	; 0x2c
 802511c:	fb01 f303 	mul.w	r3, r1, r3
 8025120:	4413      	add	r3, r2
 8025122:	333f      	adds	r3, #63	; 0x3f
 8025124:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025126:	2b02      	cmp	r3, #2
 8025128:	d11d      	bne.n	8025166 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 802512a:	687a      	ldr	r2, [r7, #4]
 802512c:	68fb      	ldr	r3, [r7, #12]
 802512e:	212c      	movs	r1, #44	; 0x2c
 8025130:	fb01 f303 	mul.w	r3, r1, r3
 8025134:	4413      	add	r3, r2
 8025136:	335c      	adds	r3, #92	; 0x5c
 8025138:	2200      	movs	r2, #0
 802513a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 802513c:	687b      	ldr	r3, [r7, #4]
 802513e:	691b      	ldr	r3, [r3, #16]
 8025140:	2b00      	cmp	r3, #0
 8025142:	d110      	bne.n	8025166 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8025144:	687a      	ldr	r2, [r7, #4]
 8025146:	68fb      	ldr	r3, [r7, #12]
 8025148:	212c      	movs	r1, #44	; 0x2c
 802514a:	fb01 f303 	mul.w	r3, r1, r3
 802514e:	4413      	add	r3, r2
 8025150:	3361      	adds	r3, #97	; 0x61
 8025152:	2203      	movs	r2, #3
 8025154:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025156:	687b      	ldr	r3, [r7, #4]
 8025158:	681b      	ldr	r3, [r3, #0]
 802515a:	68fa      	ldr	r2, [r7, #12]
 802515c:	b2d2      	uxtb	r2, r2
 802515e:	4611      	mov	r1, r2
 8025160:	4618      	mov	r0, r3
 8025162:	f005 fbb4 	bl	802a8ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025166:	68fb      	ldr	r3, [r7, #12]
 8025168:	015a      	lsls	r2, r3, #5
 802516a:	693b      	ldr	r3, [r7, #16]
 802516c:	4413      	add	r3, r2
 802516e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025172:	461a      	mov	r2, r3
 8025174:	2310      	movs	r3, #16
 8025176:	6093      	str	r3, [r2, #8]
}
 8025178:	bf00      	nop
 802517a:	3718      	adds	r7, #24
 802517c:	46bd      	mov	sp, r7
 802517e:	bd80      	pop	{r7, pc}

08025180 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025180:	b580      	push	{r7, lr}
 8025182:	b088      	sub	sp, #32
 8025184:	af00      	add	r7, sp, #0
 8025186:	6078      	str	r0, [r7, #4]
 8025188:	460b      	mov	r3, r1
 802518a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 802518c:	687b      	ldr	r3, [r7, #4]
 802518e:	681b      	ldr	r3, [r3, #0]
 8025190:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025192:	69fb      	ldr	r3, [r7, #28]
 8025194:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8025196:	78fb      	ldrb	r3, [r7, #3]
 8025198:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 802519a:	697b      	ldr	r3, [r7, #20]
 802519c:	015a      	lsls	r2, r3, #5
 802519e:	69bb      	ldr	r3, [r7, #24]
 80251a0:	4413      	add	r3, r2
 80251a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80251a6:	689b      	ldr	r3, [r3, #8]
 80251a8:	f003 0304 	and.w	r3, r3, #4
 80251ac:	2b04      	cmp	r3, #4
 80251ae:	d11a      	bne.n	80251e6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80251b0:	697b      	ldr	r3, [r7, #20]
 80251b2:	015a      	lsls	r2, r3, #5
 80251b4:	69bb      	ldr	r3, [r7, #24]
 80251b6:	4413      	add	r3, r2
 80251b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80251bc:	461a      	mov	r2, r3
 80251be:	2304      	movs	r3, #4
 80251c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80251c2:	687a      	ldr	r2, [r7, #4]
 80251c4:	697b      	ldr	r3, [r7, #20]
 80251c6:	212c      	movs	r1, #44	; 0x2c
 80251c8:	fb01 f303 	mul.w	r3, r1, r3
 80251cc:	4413      	add	r3, r2
 80251ce:	3361      	adds	r3, #97	; 0x61
 80251d0:	2206      	movs	r2, #6
 80251d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80251d4:	687b      	ldr	r3, [r7, #4]
 80251d6:	681b      	ldr	r3, [r3, #0]
 80251d8:	697a      	ldr	r2, [r7, #20]
 80251da:	b2d2      	uxtb	r2, r2
 80251dc:	4611      	mov	r1, r2
 80251de:	4618      	mov	r0, r3
 80251e0:	f005 fb75 	bl	802a8ce <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80251e4:	e331      	b.n	802584a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80251e6:	697b      	ldr	r3, [r7, #20]
 80251e8:	015a      	lsls	r2, r3, #5
 80251ea:	69bb      	ldr	r3, [r7, #24]
 80251ec:	4413      	add	r3, r2
 80251ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80251f2:	689b      	ldr	r3, [r3, #8]
 80251f4:	f003 0320 	and.w	r3, r3, #32
 80251f8:	2b20      	cmp	r3, #32
 80251fa:	d12e      	bne.n	802525a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80251fc:	697b      	ldr	r3, [r7, #20]
 80251fe:	015a      	lsls	r2, r3, #5
 8025200:	69bb      	ldr	r3, [r7, #24]
 8025202:	4413      	add	r3, r2
 8025204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025208:	461a      	mov	r2, r3
 802520a:	2320      	movs	r3, #32
 802520c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 802520e:	687a      	ldr	r2, [r7, #4]
 8025210:	697b      	ldr	r3, [r7, #20]
 8025212:	212c      	movs	r1, #44	; 0x2c
 8025214:	fb01 f303 	mul.w	r3, r1, r3
 8025218:	4413      	add	r3, r2
 802521a:	333d      	adds	r3, #61	; 0x3d
 802521c:	781b      	ldrb	r3, [r3, #0]
 802521e:	2b01      	cmp	r3, #1
 8025220:	f040 8313 	bne.w	802584a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8025224:	687a      	ldr	r2, [r7, #4]
 8025226:	697b      	ldr	r3, [r7, #20]
 8025228:	212c      	movs	r1, #44	; 0x2c
 802522a:	fb01 f303 	mul.w	r3, r1, r3
 802522e:	4413      	add	r3, r2
 8025230:	333d      	adds	r3, #61	; 0x3d
 8025232:	2200      	movs	r2, #0
 8025234:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025236:	687a      	ldr	r2, [r7, #4]
 8025238:	697b      	ldr	r3, [r7, #20]
 802523a:	212c      	movs	r1, #44	; 0x2c
 802523c:	fb01 f303 	mul.w	r3, r1, r3
 8025240:	4413      	add	r3, r2
 8025242:	3360      	adds	r3, #96	; 0x60
 8025244:	2202      	movs	r2, #2
 8025246:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025248:	687b      	ldr	r3, [r7, #4]
 802524a:	681b      	ldr	r3, [r3, #0]
 802524c:	697a      	ldr	r2, [r7, #20]
 802524e:	b2d2      	uxtb	r2, r2
 8025250:	4611      	mov	r1, r2
 8025252:	4618      	mov	r0, r3
 8025254:	f005 fb3b 	bl	802a8ce <USB_HC_Halt>
}
 8025258:	e2f7      	b.n	802584a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 802525a:	697b      	ldr	r3, [r7, #20]
 802525c:	015a      	lsls	r2, r3, #5
 802525e:	69bb      	ldr	r3, [r7, #24]
 8025260:	4413      	add	r3, r2
 8025262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025266:	689b      	ldr	r3, [r3, #8]
 8025268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802526c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025270:	d112      	bne.n	8025298 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8025272:	697b      	ldr	r3, [r7, #20]
 8025274:	015a      	lsls	r2, r3, #5
 8025276:	69bb      	ldr	r3, [r7, #24]
 8025278:	4413      	add	r3, r2
 802527a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802527e:	461a      	mov	r2, r3
 8025280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025284:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025286:	687b      	ldr	r3, [r7, #4]
 8025288:	681b      	ldr	r3, [r3, #0]
 802528a:	697a      	ldr	r2, [r7, #20]
 802528c:	b2d2      	uxtb	r2, r2
 802528e:	4611      	mov	r1, r2
 8025290:	4618      	mov	r0, r3
 8025292:	f005 fb1c 	bl	802a8ce <USB_HC_Halt>
}
 8025296:	e2d8      	b.n	802584a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8025298:	697b      	ldr	r3, [r7, #20]
 802529a:	015a      	lsls	r2, r3, #5
 802529c:	69bb      	ldr	r3, [r7, #24]
 802529e:	4413      	add	r3, r2
 80252a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80252a4:	689b      	ldr	r3, [r3, #8]
 80252a6:	f003 0301 	and.w	r3, r3, #1
 80252aa:	2b01      	cmp	r3, #1
 80252ac:	d140      	bne.n	8025330 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80252ae:	687a      	ldr	r2, [r7, #4]
 80252b0:	697b      	ldr	r3, [r7, #20]
 80252b2:	212c      	movs	r1, #44	; 0x2c
 80252b4:	fb01 f303 	mul.w	r3, r1, r3
 80252b8:	4413      	add	r3, r2
 80252ba:	335c      	adds	r3, #92	; 0x5c
 80252bc:	2200      	movs	r2, #0
 80252be:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80252c0:	697b      	ldr	r3, [r7, #20]
 80252c2:	015a      	lsls	r2, r3, #5
 80252c4:	69bb      	ldr	r3, [r7, #24]
 80252c6:	4413      	add	r3, r2
 80252c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80252cc:	689b      	ldr	r3, [r3, #8]
 80252ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80252d2:	2b40      	cmp	r3, #64	; 0x40
 80252d4:	d111      	bne.n	80252fa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80252d6:	687a      	ldr	r2, [r7, #4]
 80252d8:	697b      	ldr	r3, [r7, #20]
 80252da:	212c      	movs	r1, #44	; 0x2c
 80252dc:	fb01 f303 	mul.w	r3, r1, r3
 80252e0:	4413      	add	r3, r2
 80252e2:	333d      	adds	r3, #61	; 0x3d
 80252e4:	2201      	movs	r2, #1
 80252e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80252e8:	697b      	ldr	r3, [r7, #20]
 80252ea:	015a      	lsls	r2, r3, #5
 80252ec:	69bb      	ldr	r3, [r7, #24]
 80252ee:	4413      	add	r3, r2
 80252f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80252f4:	461a      	mov	r2, r3
 80252f6:	2340      	movs	r3, #64	; 0x40
 80252f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80252fa:	697b      	ldr	r3, [r7, #20]
 80252fc:	015a      	lsls	r2, r3, #5
 80252fe:	69bb      	ldr	r3, [r7, #24]
 8025300:	4413      	add	r3, r2
 8025302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025306:	461a      	mov	r2, r3
 8025308:	2301      	movs	r3, #1
 802530a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 802530c:	687a      	ldr	r2, [r7, #4]
 802530e:	697b      	ldr	r3, [r7, #20]
 8025310:	212c      	movs	r1, #44	; 0x2c
 8025312:	fb01 f303 	mul.w	r3, r1, r3
 8025316:	4413      	add	r3, r2
 8025318:	3361      	adds	r3, #97	; 0x61
 802531a:	2201      	movs	r2, #1
 802531c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802531e:	687b      	ldr	r3, [r7, #4]
 8025320:	681b      	ldr	r3, [r3, #0]
 8025322:	697a      	ldr	r2, [r7, #20]
 8025324:	b2d2      	uxtb	r2, r2
 8025326:	4611      	mov	r1, r2
 8025328:	4618      	mov	r0, r3
 802532a:	f005 fad0 	bl	802a8ce <USB_HC_Halt>
}
 802532e:	e28c      	b.n	802584a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8025330:	697b      	ldr	r3, [r7, #20]
 8025332:	015a      	lsls	r2, r3, #5
 8025334:	69bb      	ldr	r3, [r7, #24]
 8025336:	4413      	add	r3, r2
 8025338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802533c:	689b      	ldr	r3, [r3, #8]
 802533e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025342:	2b40      	cmp	r3, #64	; 0x40
 8025344:	d12c      	bne.n	80253a0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8025346:	687a      	ldr	r2, [r7, #4]
 8025348:	697b      	ldr	r3, [r7, #20]
 802534a:	212c      	movs	r1, #44	; 0x2c
 802534c:	fb01 f303 	mul.w	r3, r1, r3
 8025350:	4413      	add	r3, r2
 8025352:	3361      	adds	r3, #97	; 0x61
 8025354:	2204      	movs	r2, #4
 8025356:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8025358:	687a      	ldr	r2, [r7, #4]
 802535a:	697b      	ldr	r3, [r7, #20]
 802535c:	212c      	movs	r1, #44	; 0x2c
 802535e:	fb01 f303 	mul.w	r3, r1, r3
 8025362:	4413      	add	r3, r2
 8025364:	333d      	adds	r3, #61	; 0x3d
 8025366:	2201      	movs	r2, #1
 8025368:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 802536a:	687a      	ldr	r2, [r7, #4]
 802536c:	697b      	ldr	r3, [r7, #20]
 802536e:	212c      	movs	r1, #44	; 0x2c
 8025370:	fb01 f303 	mul.w	r3, r1, r3
 8025374:	4413      	add	r3, r2
 8025376:	335c      	adds	r3, #92	; 0x5c
 8025378:	2200      	movs	r2, #0
 802537a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802537c:	687b      	ldr	r3, [r7, #4]
 802537e:	681b      	ldr	r3, [r3, #0]
 8025380:	697a      	ldr	r2, [r7, #20]
 8025382:	b2d2      	uxtb	r2, r2
 8025384:	4611      	mov	r1, r2
 8025386:	4618      	mov	r0, r3
 8025388:	f005 faa1 	bl	802a8ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 802538c:	697b      	ldr	r3, [r7, #20]
 802538e:	015a      	lsls	r2, r3, #5
 8025390:	69bb      	ldr	r3, [r7, #24]
 8025392:	4413      	add	r3, r2
 8025394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025398:	461a      	mov	r2, r3
 802539a:	2340      	movs	r3, #64	; 0x40
 802539c:	6093      	str	r3, [r2, #8]
}
 802539e:	e254      	b.n	802584a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80253a0:	697b      	ldr	r3, [r7, #20]
 80253a2:	015a      	lsls	r2, r3, #5
 80253a4:	69bb      	ldr	r3, [r7, #24]
 80253a6:	4413      	add	r3, r2
 80253a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80253ac:	689b      	ldr	r3, [r3, #8]
 80253ae:	f003 0308 	and.w	r3, r3, #8
 80253b2:	2b08      	cmp	r3, #8
 80253b4:	d11a      	bne.n	80253ec <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80253b6:	697b      	ldr	r3, [r7, #20]
 80253b8:	015a      	lsls	r2, r3, #5
 80253ba:	69bb      	ldr	r3, [r7, #24]
 80253bc:	4413      	add	r3, r2
 80253be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80253c2:	461a      	mov	r2, r3
 80253c4:	2308      	movs	r3, #8
 80253c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80253c8:	687a      	ldr	r2, [r7, #4]
 80253ca:	697b      	ldr	r3, [r7, #20]
 80253cc:	212c      	movs	r1, #44	; 0x2c
 80253ce:	fb01 f303 	mul.w	r3, r1, r3
 80253d2:	4413      	add	r3, r2
 80253d4:	3361      	adds	r3, #97	; 0x61
 80253d6:	2205      	movs	r2, #5
 80253d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80253da:	687b      	ldr	r3, [r7, #4]
 80253dc:	681b      	ldr	r3, [r3, #0]
 80253de:	697a      	ldr	r2, [r7, #20]
 80253e0:	b2d2      	uxtb	r2, r2
 80253e2:	4611      	mov	r1, r2
 80253e4:	4618      	mov	r0, r3
 80253e6:	f005 fa72 	bl	802a8ce <USB_HC_Halt>
}
 80253ea:	e22e      	b.n	802584a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80253ec:	697b      	ldr	r3, [r7, #20]
 80253ee:	015a      	lsls	r2, r3, #5
 80253f0:	69bb      	ldr	r3, [r7, #24]
 80253f2:	4413      	add	r3, r2
 80253f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80253f8:	689b      	ldr	r3, [r3, #8]
 80253fa:	f003 0310 	and.w	r3, r3, #16
 80253fe:	2b10      	cmp	r3, #16
 8025400:	d140      	bne.n	8025484 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025402:	687a      	ldr	r2, [r7, #4]
 8025404:	697b      	ldr	r3, [r7, #20]
 8025406:	212c      	movs	r1, #44	; 0x2c
 8025408:	fb01 f303 	mul.w	r3, r1, r3
 802540c:	4413      	add	r3, r2
 802540e:	335c      	adds	r3, #92	; 0x5c
 8025410:	2200      	movs	r2, #0
 8025412:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8025414:	687a      	ldr	r2, [r7, #4]
 8025416:	697b      	ldr	r3, [r7, #20]
 8025418:	212c      	movs	r1, #44	; 0x2c
 802541a:	fb01 f303 	mul.w	r3, r1, r3
 802541e:	4413      	add	r3, r2
 8025420:	3361      	adds	r3, #97	; 0x61
 8025422:	2203      	movs	r2, #3
 8025424:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8025426:	687a      	ldr	r2, [r7, #4]
 8025428:	697b      	ldr	r3, [r7, #20]
 802542a:	212c      	movs	r1, #44	; 0x2c
 802542c:	fb01 f303 	mul.w	r3, r1, r3
 8025430:	4413      	add	r3, r2
 8025432:	333d      	adds	r3, #61	; 0x3d
 8025434:	781b      	ldrb	r3, [r3, #0]
 8025436:	2b00      	cmp	r3, #0
 8025438:	d112      	bne.n	8025460 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 802543a:	687a      	ldr	r2, [r7, #4]
 802543c:	697b      	ldr	r3, [r7, #20]
 802543e:	212c      	movs	r1, #44	; 0x2c
 8025440:	fb01 f303 	mul.w	r3, r1, r3
 8025444:	4413      	add	r3, r2
 8025446:	333c      	adds	r3, #60	; 0x3c
 8025448:	781b      	ldrb	r3, [r3, #0]
 802544a:	2b00      	cmp	r3, #0
 802544c:	d108      	bne.n	8025460 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 802544e:	687a      	ldr	r2, [r7, #4]
 8025450:	697b      	ldr	r3, [r7, #20]
 8025452:	212c      	movs	r1, #44	; 0x2c
 8025454:	fb01 f303 	mul.w	r3, r1, r3
 8025458:	4413      	add	r3, r2
 802545a:	333d      	adds	r3, #61	; 0x3d
 802545c:	2201      	movs	r2, #1
 802545e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025460:	687b      	ldr	r3, [r7, #4]
 8025462:	681b      	ldr	r3, [r3, #0]
 8025464:	697a      	ldr	r2, [r7, #20]
 8025466:	b2d2      	uxtb	r2, r2
 8025468:	4611      	mov	r1, r2
 802546a:	4618      	mov	r0, r3
 802546c:	f005 fa2f 	bl	802a8ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025470:	697b      	ldr	r3, [r7, #20]
 8025472:	015a      	lsls	r2, r3, #5
 8025474:	69bb      	ldr	r3, [r7, #24]
 8025476:	4413      	add	r3, r2
 8025478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802547c:	461a      	mov	r2, r3
 802547e:	2310      	movs	r3, #16
 8025480:	6093      	str	r3, [r2, #8]
}
 8025482:	e1e2      	b.n	802584a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8025484:	697b      	ldr	r3, [r7, #20]
 8025486:	015a      	lsls	r2, r3, #5
 8025488:	69bb      	ldr	r3, [r7, #24]
 802548a:	4413      	add	r3, r2
 802548c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025490:	689b      	ldr	r3, [r3, #8]
 8025492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025496:	2b80      	cmp	r3, #128	; 0x80
 8025498:	d164      	bne.n	8025564 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 802549a:	687b      	ldr	r3, [r7, #4]
 802549c:	691b      	ldr	r3, [r3, #16]
 802549e:	2b00      	cmp	r3, #0
 80254a0:	d111      	bne.n	80254c6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80254a2:	687a      	ldr	r2, [r7, #4]
 80254a4:	697b      	ldr	r3, [r7, #20]
 80254a6:	212c      	movs	r1, #44	; 0x2c
 80254a8:	fb01 f303 	mul.w	r3, r1, r3
 80254ac:	4413      	add	r3, r2
 80254ae:	3361      	adds	r3, #97	; 0x61
 80254b0:	2206      	movs	r2, #6
 80254b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80254b4:	687b      	ldr	r3, [r7, #4]
 80254b6:	681b      	ldr	r3, [r3, #0]
 80254b8:	697a      	ldr	r2, [r7, #20]
 80254ba:	b2d2      	uxtb	r2, r2
 80254bc:	4611      	mov	r1, r2
 80254be:	4618      	mov	r0, r3
 80254c0:	f005 fa05 	bl	802a8ce <USB_HC_Halt>
 80254c4:	e044      	b.n	8025550 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80254c6:	687a      	ldr	r2, [r7, #4]
 80254c8:	697b      	ldr	r3, [r7, #20]
 80254ca:	212c      	movs	r1, #44	; 0x2c
 80254cc:	fb01 f303 	mul.w	r3, r1, r3
 80254d0:	4413      	add	r3, r2
 80254d2:	335c      	adds	r3, #92	; 0x5c
 80254d4:	681b      	ldr	r3, [r3, #0]
 80254d6:	1c5a      	adds	r2, r3, #1
 80254d8:	6879      	ldr	r1, [r7, #4]
 80254da:	697b      	ldr	r3, [r7, #20]
 80254dc:	202c      	movs	r0, #44	; 0x2c
 80254de:	fb00 f303 	mul.w	r3, r0, r3
 80254e2:	440b      	add	r3, r1
 80254e4:	335c      	adds	r3, #92	; 0x5c
 80254e6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80254e8:	687a      	ldr	r2, [r7, #4]
 80254ea:	697b      	ldr	r3, [r7, #20]
 80254ec:	212c      	movs	r1, #44	; 0x2c
 80254ee:	fb01 f303 	mul.w	r3, r1, r3
 80254f2:	4413      	add	r3, r2
 80254f4:	335c      	adds	r3, #92	; 0x5c
 80254f6:	681b      	ldr	r3, [r3, #0]
 80254f8:	2b02      	cmp	r3, #2
 80254fa:	d920      	bls.n	802553e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80254fc:	687a      	ldr	r2, [r7, #4]
 80254fe:	697b      	ldr	r3, [r7, #20]
 8025500:	212c      	movs	r1, #44	; 0x2c
 8025502:	fb01 f303 	mul.w	r3, r1, r3
 8025506:	4413      	add	r3, r2
 8025508:	335c      	adds	r3, #92	; 0x5c
 802550a:	2200      	movs	r2, #0
 802550c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 802550e:	687a      	ldr	r2, [r7, #4]
 8025510:	697b      	ldr	r3, [r7, #20]
 8025512:	212c      	movs	r1, #44	; 0x2c
 8025514:	fb01 f303 	mul.w	r3, r1, r3
 8025518:	4413      	add	r3, r2
 802551a:	3360      	adds	r3, #96	; 0x60
 802551c:	2204      	movs	r2, #4
 802551e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025520:	697b      	ldr	r3, [r7, #20]
 8025522:	b2d9      	uxtb	r1, r3
 8025524:	687a      	ldr	r2, [r7, #4]
 8025526:	697b      	ldr	r3, [r7, #20]
 8025528:	202c      	movs	r0, #44	; 0x2c
 802552a:	fb00 f303 	mul.w	r3, r0, r3
 802552e:	4413      	add	r3, r2
 8025530:	3360      	adds	r3, #96	; 0x60
 8025532:	781b      	ldrb	r3, [r3, #0]
 8025534:	461a      	mov	r2, r3
 8025536:	6878      	ldr	r0, [r7, #4]
 8025538:	f007 fc68 	bl	802ce0c <HAL_HCD_HC_NotifyURBChange_Callback>
 802553c:	e008      	b.n	8025550 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 802553e:	687a      	ldr	r2, [r7, #4]
 8025540:	697b      	ldr	r3, [r7, #20]
 8025542:	212c      	movs	r1, #44	; 0x2c
 8025544:	fb01 f303 	mul.w	r3, r1, r3
 8025548:	4413      	add	r3, r2
 802554a:	3360      	adds	r3, #96	; 0x60
 802554c:	2202      	movs	r2, #2
 802554e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8025550:	697b      	ldr	r3, [r7, #20]
 8025552:	015a      	lsls	r2, r3, #5
 8025554:	69bb      	ldr	r3, [r7, #24]
 8025556:	4413      	add	r3, r2
 8025558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802555c:	461a      	mov	r2, r3
 802555e:	2380      	movs	r3, #128	; 0x80
 8025560:	6093      	str	r3, [r2, #8]
}
 8025562:	e172      	b.n	802584a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8025564:	697b      	ldr	r3, [r7, #20]
 8025566:	015a      	lsls	r2, r3, #5
 8025568:	69bb      	ldr	r3, [r7, #24]
 802556a:	4413      	add	r3, r2
 802556c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025570:	689b      	ldr	r3, [r3, #8]
 8025572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8025576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802557a:	d11b      	bne.n	80255b4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 802557c:	687a      	ldr	r2, [r7, #4]
 802557e:	697b      	ldr	r3, [r7, #20]
 8025580:	212c      	movs	r1, #44	; 0x2c
 8025582:	fb01 f303 	mul.w	r3, r1, r3
 8025586:	4413      	add	r3, r2
 8025588:	3361      	adds	r3, #97	; 0x61
 802558a:	2208      	movs	r2, #8
 802558c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802558e:	687b      	ldr	r3, [r7, #4]
 8025590:	681b      	ldr	r3, [r3, #0]
 8025592:	697a      	ldr	r2, [r7, #20]
 8025594:	b2d2      	uxtb	r2, r2
 8025596:	4611      	mov	r1, r2
 8025598:	4618      	mov	r0, r3
 802559a:	f005 f998 	bl	802a8ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 802559e:	697b      	ldr	r3, [r7, #20]
 80255a0:	015a      	lsls	r2, r3, #5
 80255a2:	69bb      	ldr	r3, [r7, #24]
 80255a4:	4413      	add	r3, r2
 80255a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80255aa:	461a      	mov	r2, r3
 80255ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80255b0:	6093      	str	r3, [r2, #8]
}
 80255b2:	e14a      	b.n	802584a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80255b4:	697b      	ldr	r3, [r7, #20]
 80255b6:	015a      	lsls	r2, r3, #5
 80255b8:	69bb      	ldr	r3, [r7, #24]
 80255ba:	4413      	add	r3, r2
 80255bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80255c0:	689b      	ldr	r3, [r3, #8]
 80255c2:	f003 0302 	and.w	r3, r3, #2
 80255c6:	2b02      	cmp	r3, #2
 80255c8:	f040 813f 	bne.w	802584a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80255cc:	687a      	ldr	r2, [r7, #4]
 80255ce:	697b      	ldr	r3, [r7, #20]
 80255d0:	212c      	movs	r1, #44	; 0x2c
 80255d2:	fb01 f303 	mul.w	r3, r1, r3
 80255d6:	4413      	add	r3, r2
 80255d8:	3361      	adds	r3, #97	; 0x61
 80255da:	781b      	ldrb	r3, [r3, #0]
 80255dc:	2b01      	cmp	r3, #1
 80255de:	d17d      	bne.n	80256dc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80255e0:	687a      	ldr	r2, [r7, #4]
 80255e2:	697b      	ldr	r3, [r7, #20]
 80255e4:	212c      	movs	r1, #44	; 0x2c
 80255e6:	fb01 f303 	mul.w	r3, r1, r3
 80255ea:	4413      	add	r3, r2
 80255ec:	3360      	adds	r3, #96	; 0x60
 80255ee:	2201      	movs	r2, #1
 80255f0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80255f2:	687a      	ldr	r2, [r7, #4]
 80255f4:	697b      	ldr	r3, [r7, #20]
 80255f6:	212c      	movs	r1, #44	; 0x2c
 80255f8:	fb01 f303 	mul.w	r3, r1, r3
 80255fc:	4413      	add	r3, r2
 80255fe:	333f      	adds	r3, #63	; 0x3f
 8025600:	781b      	ldrb	r3, [r3, #0]
 8025602:	2b02      	cmp	r3, #2
 8025604:	d00a      	beq.n	802561c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8025606:	687a      	ldr	r2, [r7, #4]
 8025608:	697b      	ldr	r3, [r7, #20]
 802560a:	212c      	movs	r1, #44	; 0x2c
 802560c:	fb01 f303 	mul.w	r3, r1, r3
 8025610:	4413      	add	r3, r2
 8025612:	333f      	adds	r3, #63	; 0x3f
 8025614:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8025616:	2b03      	cmp	r3, #3
 8025618:	f040 8100 	bne.w	802581c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 802561c:	687b      	ldr	r3, [r7, #4]
 802561e:	691b      	ldr	r3, [r3, #16]
 8025620:	2b00      	cmp	r3, #0
 8025622:	d113      	bne.n	802564c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8025624:	687a      	ldr	r2, [r7, #4]
 8025626:	697b      	ldr	r3, [r7, #20]
 8025628:	212c      	movs	r1, #44	; 0x2c
 802562a:	fb01 f303 	mul.w	r3, r1, r3
 802562e:	4413      	add	r3, r2
 8025630:	3355      	adds	r3, #85	; 0x55
 8025632:	781b      	ldrb	r3, [r3, #0]
 8025634:	f083 0301 	eor.w	r3, r3, #1
 8025638:	b2d8      	uxtb	r0, r3
 802563a:	687a      	ldr	r2, [r7, #4]
 802563c:	697b      	ldr	r3, [r7, #20]
 802563e:	212c      	movs	r1, #44	; 0x2c
 8025640:	fb01 f303 	mul.w	r3, r1, r3
 8025644:	4413      	add	r3, r2
 8025646:	3355      	adds	r3, #85	; 0x55
 8025648:	4602      	mov	r2, r0
 802564a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 802564c:	687b      	ldr	r3, [r7, #4]
 802564e:	691b      	ldr	r3, [r3, #16]
 8025650:	2b01      	cmp	r3, #1
 8025652:	f040 80e3 	bne.w	802581c <HCD_HC_OUT_IRQHandler+0x69c>
 8025656:	687a      	ldr	r2, [r7, #4]
 8025658:	697b      	ldr	r3, [r7, #20]
 802565a:	212c      	movs	r1, #44	; 0x2c
 802565c:	fb01 f303 	mul.w	r3, r1, r3
 8025660:	4413      	add	r3, r2
 8025662:	334c      	adds	r3, #76	; 0x4c
 8025664:	681b      	ldr	r3, [r3, #0]
 8025666:	2b00      	cmp	r3, #0
 8025668:	f000 80d8 	beq.w	802581c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 802566c:	687a      	ldr	r2, [r7, #4]
 802566e:	697b      	ldr	r3, [r7, #20]
 8025670:	212c      	movs	r1, #44	; 0x2c
 8025672:	fb01 f303 	mul.w	r3, r1, r3
 8025676:	4413      	add	r3, r2
 8025678:	334c      	adds	r3, #76	; 0x4c
 802567a:	681b      	ldr	r3, [r3, #0]
 802567c:	6879      	ldr	r1, [r7, #4]
 802567e:	697a      	ldr	r2, [r7, #20]
 8025680:	202c      	movs	r0, #44	; 0x2c
 8025682:	fb00 f202 	mul.w	r2, r0, r2
 8025686:	440a      	add	r2, r1
 8025688:	3240      	adds	r2, #64	; 0x40
 802568a:	8812      	ldrh	r2, [r2, #0]
 802568c:	4413      	add	r3, r2
 802568e:	3b01      	subs	r3, #1
 8025690:	6879      	ldr	r1, [r7, #4]
 8025692:	697a      	ldr	r2, [r7, #20]
 8025694:	202c      	movs	r0, #44	; 0x2c
 8025696:	fb00 f202 	mul.w	r2, r0, r2
 802569a:	440a      	add	r2, r1
 802569c:	3240      	adds	r2, #64	; 0x40
 802569e:	8812      	ldrh	r2, [r2, #0]
 80256a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80256a4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80256a6:	68fb      	ldr	r3, [r7, #12]
 80256a8:	f003 0301 	and.w	r3, r3, #1
 80256ac:	2b00      	cmp	r3, #0
 80256ae:	f000 80b5 	beq.w	802581c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80256b2:	687a      	ldr	r2, [r7, #4]
 80256b4:	697b      	ldr	r3, [r7, #20]
 80256b6:	212c      	movs	r1, #44	; 0x2c
 80256b8:	fb01 f303 	mul.w	r3, r1, r3
 80256bc:	4413      	add	r3, r2
 80256be:	3355      	adds	r3, #85	; 0x55
 80256c0:	781b      	ldrb	r3, [r3, #0]
 80256c2:	f083 0301 	eor.w	r3, r3, #1
 80256c6:	b2d8      	uxtb	r0, r3
 80256c8:	687a      	ldr	r2, [r7, #4]
 80256ca:	697b      	ldr	r3, [r7, #20]
 80256cc:	212c      	movs	r1, #44	; 0x2c
 80256ce:	fb01 f303 	mul.w	r3, r1, r3
 80256d2:	4413      	add	r3, r2
 80256d4:	3355      	adds	r3, #85	; 0x55
 80256d6:	4602      	mov	r2, r0
 80256d8:	701a      	strb	r2, [r3, #0]
 80256da:	e09f      	b.n	802581c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80256dc:	687a      	ldr	r2, [r7, #4]
 80256de:	697b      	ldr	r3, [r7, #20]
 80256e0:	212c      	movs	r1, #44	; 0x2c
 80256e2:	fb01 f303 	mul.w	r3, r1, r3
 80256e6:	4413      	add	r3, r2
 80256e8:	3361      	adds	r3, #97	; 0x61
 80256ea:	781b      	ldrb	r3, [r3, #0]
 80256ec:	2b03      	cmp	r3, #3
 80256ee:	d109      	bne.n	8025704 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80256f0:	687a      	ldr	r2, [r7, #4]
 80256f2:	697b      	ldr	r3, [r7, #20]
 80256f4:	212c      	movs	r1, #44	; 0x2c
 80256f6:	fb01 f303 	mul.w	r3, r1, r3
 80256fa:	4413      	add	r3, r2
 80256fc:	3360      	adds	r3, #96	; 0x60
 80256fe:	2202      	movs	r2, #2
 8025700:	701a      	strb	r2, [r3, #0]
 8025702:	e08b      	b.n	802581c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8025704:	687a      	ldr	r2, [r7, #4]
 8025706:	697b      	ldr	r3, [r7, #20]
 8025708:	212c      	movs	r1, #44	; 0x2c
 802570a:	fb01 f303 	mul.w	r3, r1, r3
 802570e:	4413      	add	r3, r2
 8025710:	3361      	adds	r3, #97	; 0x61
 8025712:	781b      	ldrb	r3, [r3, #0]
 8025714:	2b04      	cmp	r3, #4
 8025716:	d109      	bne.n	802572c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8025718:	687a      	ldr	r2, [r7, #4]
 802571a:	697b      	ldr	r3, [r7, #20]
 802571c:	212c      	movs	r1, #44	; 0x2c
 802571e:	fb01 f303 	mul.w	r3, r1, r3
 8025722:	4413      	add	r3, r2
 8025724:	3360      	adds	r3, #96	; 0x60
 8025726:	2202      	movs	r2, #2
 8025728:	701a      	strb	r2, [r3, #0]
 802572a:	e077      	b.n	802581c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 802572c:	687a      	ldr	r2, [r7, #4]
 802572e:	697b      	ldr	r3, [r7, #20]
 8025730:	212c      	movs	r1, #44	; 0x2c
 8025732:	fb01 f303 	mul.w	r3, r1, r3
 8025736:	4413      	add	r3, r2
 8025738:	3361      	adds	r3, #97	; 0x61
 802573a:	781b      	ldrb	r3, [r3, #0]
 802573c:	2b05      	cmp	r3, #5
 802573e:	d109      	bne.n	8025754 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8025740:	687a      	ldr	r2, [r7, #4]
 8025742:	697b      	ldr	r3, [r7, #20]
 8025744:	212c      	movs	r1, #44	; 0x2c
 8025746:	fb01 f303 	mul.w	r3, r1, r3
 802574a:	4413      	add	r3, r2
 802574c:	3360      	adds	r3, #96	; 0x60
 802574e:	2205      	movs	r2, #5
 8025750:	701a      	strb	r2, [r3, #0]
 8025752:	e063      	b.n	802581c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025754:	687a      	ldr	r2, [r7, #4]
 8025756:	697b      	ldr	r3, [r7, #20]
 8025758:	212c      	movs	r1, #44	; 0x2c
 802575a:	fb01 f303 	mul.w	r3, r1, r3
 802575e:	4413      	add	r3, r2
 8025760:	3361      	adds	r3, #97	; 0x61
 8025762:	781b      	ldrb	r3, [r3, #0]
 8025764:	2b06      	cmp	r3, #6
 8025766:	d009      	beq.n	802577c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8025768:	687a      	ldr	r2, [r7, #4]
 802576a:	697b      	ldr	r3, [r7, #20]
 802576c:	212c      	movs	r1, #44	; 0x2c
 802576e:	fb01 f303 	mul.w	r3, r1, r3
 8025772:	4413      	add	r3, r2
 8025774:	3361      	adds	r3, #97	; 0x61
 8025776:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025778:	2b08      	cmp	r3, #8
 802577a:	d14f      	bne.n	802581c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 802577c:	687a      	ldr	r2, [r7, #4]
 802577e:	697b      	ldr	r3, [r7, #20]
 8025780:	212c      	movs	r1, #44	; 0x2c
 8025782:	fb01 f303 	mul.w	r3, r1, r3
 8025786:	4413      	add	r3, r2
 8025788:	335c      	adds	r3, #92	; 0x5c
 802578a:	681b      	ldr	r3, [r3, #0]
 802578c:	1c5a      	adds	r2, r3, #1
 802578e:	6879      	ldr	r1, [r7, #4]
 8025790:	697b      	ldr	r3, [r7, #20]
 8025792:	202c      	movs	r0, #44	; 0x2c
 8025794:	fb00 f303 	mul.w	r3, r0, r3
 8025798:	440b      	add	r3, r1
 802579a:	335c      	adds	r3, #92	; 0x5c
 802579c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 802579e:	687a      	ldr	r2, [r7, #4]
 80257a0:	697b      	ldr	r3, [r7, #20]
 80257a2:	212c      	movs	r1, #44	; 0x2c
 80257a4:	fb01 f303 	mul.w	r3, r1, r3
 80257a8:	4413      	add	r3, r2
 80257aa:	335c      	adds	r3, #92	; 0x5c
 80257ac:	681b      	ldr	r3, [r3, #0]
 80257ae:	2b02      	cmp	r3, #2
 80257b0:	d912      	bls.n	80257d8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80257b2:	687a      	ldr	r2, [r7, #4]
 80257b4:	697b      	ldr	r3, [r7, #20]
 80257b6:	212c      	movs	r1, #44	; 0x2c
 80257b8:	fb01 f303 	mul.w	r3, r1, r3
 80257bc:	4413      	add	r3, r2
 80257be:	335c      	adds	r3, #92	; 0x5c
 80257c0:	2200      	movs	r2, #0
 80257c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80257c4:	687a      	ldr	r2, [r7, #4]
 80257c6:	697b      	ldr	r3, [r7, #20]
 80257c8:	212c      	movs	r1, #44	; 0x2c
 80257ca:	fb01 f303 	mul.w	r3, r1, r3
 80257ce:	4413      	add	r3, r2
 80257d0:	3360      	adds	r3, #96	; 0x60
 80257d2:	2204      	movs	r2, #4
 80257d4:	701a      	strb	r2, [r3, #0]
 80257d6:	e021      	b.n	802581c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80257d8:	687a      	ldr	r2, [r7, #4]
 80257da:	697b      	ldr	r3, [r7, #20]
 80257dc:	212c      	movs	r1, #44	; 0x2c
 80257de:	fb01 f303 	mul.w	r3, r1, r3
 80257e2:	4413      	add	r3, r2
 80257e4:	3360      	adds	r3, #96	; 0x60
 80257e6:	2202      	movs	r2, #2
 80257e8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80257ea:	697b      	ldr	r3, [r7, #20]
 80257ec:	015a      	lsls	r2, r3, #5
 80257ee:	69bb      	ldr	r3, [r7, #24]
 80257f0:	4413      	add	r3, r2
 80257f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80257f6:	681b      	ldr	r3, [r3, #0]
 80257f8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80257fa:	693b      	ldr	r3, [r7, #16]
 80257fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025800:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025802:	693b      	ldr	r3, [r7, #16]
 8025804:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025808:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 802580a:	697b      	ldr	r3, [r7, #20]
 802580c:	015a      	lsls	r2, r3, #5
 802580e:	69bb      	ldr	r3, [r7, #24]
 8025810:	4413      	add	r3, r2
 8025812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025816:	461a      	mov	r2, r3
 8025818:	693b      	ldr	r3, [r7, #16]
 802581a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 802581c:	697b      	ldr	r3, [r7, #20]
 802581e:	015a      	lsls	r2, r3, #5
 8025820:	69bb      	ldr	r3, [r7, #24]
 8025822:	4413      	add	r3, r2
 8025824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025828:	461a      	mov	r2, r3
 802582a:	2302      	movs	r3, #2
 802582c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 802582e:	697b      	ldr	r3, [r7, #20]
 8025830:	b2d9      	uxtb	r1, r3
 8025832:	687a      	ldr	r2, [r7, #4]
 8025834:	697b      	ldr	r3, [r7, #20]
 8025836:	202c      	movs	r0, #44	; 0x2c
 8025838:	fb00 f303 	mul.w	r3, r0, r3
 802583c:	4413      	add	r3, r2
 802583e:	3360      	adds	r3, #96	; 0x60
 8025840:	781b      	ldrb	r3, [r3, #0]
 8025842:	461a      	mov	r2, r3
 8025844:	6878      	ldr	r0, [r7, #4]
 8025846:	f007 fae1 	bl	802ce0c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 802584a:	bf00      	nop
 802584c:	3720      	adds	r7, #32
 802584e:	46bd      	mov	sp, r7
 8025850:	bd80      	pop	{r7, pc}

08025852 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8025852:	b580      	push	{r7, lr}
 8025854:	b08a      	sub	sp, #40	; 0x28
 8025856:	af00      	add	r7, sp, #0
 8025858:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 802585a:	687b      	ldr	r3, [r7, #4]
 802585c:	681b      	ldr	r3, [r3, #0]
 802585e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025862:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8025864:	687b      	ldr	r3, [r7, #4]
 8025866:	681b      	ldr	r3, [r3, #0]
 8025868:	6a1b      	ldr	r3, [r3, #32]
 802586a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 802586c:	69fb      	ldr	r3, [r7, #28]
 802586e:	f003 030f 	and.w	r3, r3, #15
 8025872:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8025874:	69fb      	ldr	r3, [r7, #28]
 8025876:	0c5b      	lsrs	r3, r3, #17
 8025878:	f003 030f 	and.w	r3, r3, #15
 802587c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 802587e:	69fb      	ldr	r3, [r7, #28]
 8025880:	091b      	lsrs	r3, r3, #4
 8025882:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8025886:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8025888:	697b      	ldr	r3, [r7, #20]
 802588a:	2b02      	cmp	r3, #2
 802588c:	d004      	beq.n	8025898 <HCD_RXQLVL_IRQHandler+0x46>
 802588e:	697b      	ldr	r3, [r7, #20]
 8025890:	2b05      	cmp	r3, #5
 8025892:	f000 80a9 	beq.w	80259e8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8025896:	e0aa      	b.n	80259ee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8025898:	693b      	ldr	r3, [r7, #16]
 802589a:	2b00      	cmp	r3, #0
 802589c:	f000 80a6 	beq.w	80259ec <HCD_RXQLVL_IRQHandler+0x19a>
 80258a0:	687a      	ldr	r2, [r7, #4]
 80258a2:	69bb      	ldr	r3, [r7, #24]
 80258a4:	212c      	movs	r1, #44	; 0x2c
 80258a6:	fb01 f303 	mul.w	r3, r1, r3
 80258aa:	4413      	add	r3, r2
 80258ac:	3344      	adds	r3, #68	; 0x44
 80258ae:	681b      	ldr	r3, [r3, #0]
 80258b0:	2b00      	cmp	r3, #0
 80258b2:	f000 809b 	beq.w	80259ec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80258b6:	687a      	ldr	r2, [r7, #4]
 80258b8:	69bb      	ldr	r3, [r7, #24]
 80258ba:	212c      	movs	r1, #44	; 0x2c
 80258bc:	fb01 f303 	mul.w	r3, r1, r3
 80258c0:	4413      	add	r3, r2
 80258c2:	3350      	adds	r3, #80	; 0x50
 80258c4:	681a      	ldr	r2, [r3, #0]
 80258c6:	693b      	ldr	r3, [r7, #16]
 80258c8:	441a      	add	r2, r3
 80258ca:	6879      	ldr	r1, [r7, #4]
 80258cc:	69bb      	ldr	r3, [r7, #24]
 80258ce:	202c      	movs	r0, #44	; 0x2c
 80258d0:	fb00 f303 	mul.w	r3, r0, r3
 80258d4:	440b      	add	r3, r1
 80258d6:	334c      	adds	r3, #76	; 0x4c
 80258d8:	681b      	ldr	r3, [r3, #0]
 80258da:	429a      	cmp	r2, r3
 80258dc:	d87a      	bhi.n	80259d4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80258de:	687b      	ldr	r3, [r7, #4]
 80258e0:	6818      	ldr	r0, [r3, #0]
 80258e2:	687a      	ldr	r2, [r7, #4]
 80258e4:	69bb      	ldr	r3, [r7, #24]
 80258e6:	212c      	movs	r1, #44	; 0x2c
 80258e8:	fb01 f303 	mul.w	r3, r1, r3
 80258ec:	4413      	add	r3, r2
 80258ee:	3344      	adds	r3, #68	; 0x44
 80258f0:	681b      	ldr	r3, [r3, #0]
 80258f2:	693a      	ldr	r2, [r7, #16]
 80258f4:	b292      	uxth	r2, r2
 80258f6:	4619      	mov	r1, r3
 80258f8:	f004 fb40 	bl	8029f7c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80258fc:	687a      	ldr	r2, [r7, #4]
 80258fe:	69bb      	ldr	r3, [r7, #24]
 8025900:	212c      	movs	r1, #44	; 0x2c
 8025902:	fb01 f303 	mul.w	r3, r1, r3
 8025906:	4413      	add	r3, r2
 8025908:	3344      	adds	r3, #68	; 0x44
 802590a:	681a      	ldr	r2, [r3, #0]
 802590c:	693b      	ldr	r3, [r7, #16]
 802590e:	441a      	add	r2, r3
 8025910:	6879      	ldr	r1, [r7, #4]
 8025912:	69bb      	ldr	r3, [r7, #24]
 8025914:	202c      	movs	r0, #44	; 0x2c
 8025916:	fb00 f303 	mul.w	r3, r0, r3
 802591a:	440b      	add	r3, r1
 802591c:	3344      	adds	r3, #68	; 0x44
 802591e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8025920:	687a      	ldr	r2, [r7, #4]
 8025922:	69bb      	ldr	r3, [r7, #24]
 8025924:	212c      	movs	r1, #44	; 0x2c
 8025926:	fb01 f303 	mul.w	r3, r1, r3
 802592a:	4413      	add	r3, r2
 802592c:	3350      	adds	r3, #80	; 0x50
 802592e:	681a      	ldr	r2, [r3, #0]
 8025930:	693b      	ldr	r3, [r7, #16]
 8025932:	441a      	add	r2, r3
 8025934:	6879      	ldr	r1, [r7, #4]
 8025936:	69bb      	ldr	r3, [r7, #24]
 8025938:	202c      	movs	r0, #44	; 0x2c
 802593a:	fb00 f303 	mul.w	r3, r0, r3
 802593e:	440b      	add	r3, r1
 8025940:	3350      	adds	r3, #80	; 0x50
 8025942:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8025944:	69bb      	ldr	r3, [r7, #24]
 8025946:	015a      	lsls	r2, r3, #5
 8025948:	6a3b      	ldr	r3, [r7, #32]
 802594a:	4413      	add	r3, r2
 802594c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025950:	691b      	ldr	r3, [r3, #16]
 8025952:	0cdb      	lsrs	r3, r3, #19
 8025954:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8025958:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 802595a:	687a      	ldr	r2, [r7, #4]
 802595c:	69bb      	ldr	r3, [r7, #24]
 802595e:	212c      	movs	r1, #44	; 0x2c
 8025960:	fb01 f303 	mul.w	r3, r1, r3
 8025964:	4413      	add	r3, r2
 8025966:	3340      	adds	r3, #64	; 0x40
 8025968:	881b      	ldrh	r3, [r3, #0]
 802596a:	461a      	mov	r2, r3
 802596c:	693b      	ldr	r3, [r7, #16]
 802596e:	4293      	cmp	r3, r2
 8025970:	d13c      	bne.n	80259ec <HCD_RXQLVL_IRQHandler+0x19a>
 8025972:	68fb      	ldr	r3, [r7, #12]
 8025974:	2b00      	cmp	r3, #0
 8025976:	d039      	beq.n	80259ec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025978:	69bb      	ldr	r3, [r7, #24]
 802597a:	015a      	lsls	r2, r3, #5
 802597c:	6a3b      	ldr	r3, [r7, #32]
 802597e:	4413      	add	r3, r2
 8025980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025984:	681b      	ldr	r3, [r3, #0]
 8025986:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025988:	68bb      	ldr	r3, [r7, #8]
 802598a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802598e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025990:	68bb      	ldr	r3, [r7, #8]
 8025992:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025996:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025998:	69bb      	ldr	r3, [r7, #24]
 802599a:	015a      	lsls	r2, r3, #5
 802599c:	6a3b      	ldr	r3, [r7, #32]
 802599e:	4413      	add	r3, r2
 80259a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259a4:	461a      	mov	r2, r3
 80259a6:	68bb      	ldr	r3, [r7, #8]
 80259a8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80259aa:	687a      	ldr	r2, [r7, #4]
 80259ac:	69bb      	ldr	r3, [r7, #24]
 80259ae:	212c      	movs	r1, #44	; 0x2c
 80259b0:	fb01 f303 	mul.w	r3, r1, r3
 80259b4:	4413      	add	r3, r2
 80259b6:	3354      	adds	r3, #84	; 0x54
 80259b8:	781b      	ldrb	r3, [r3, #0]
 80259ba:	f083 0301 	eor.w	r3, r3, #1
 80259be:	b2d8      	uxtb	r0, r3
 80259c0:	687a      	ldr	r2, [r7, #4]
 80259c2:	69bb      	ldr	r3, [r7, #24]
 80259c4:	212c      	movs	r1, #44	; 0x2c
 80259c6:	fb01 f303 	mul.w	r3, r1, r3
 80259ca:	4413      	add	r3, r2
 80259cc:	3354      	adds	r3, #84	; 0x54
 80259ce:	4602      	mov	r2, r0
 80259d0:	701a      	strb	r2, [r3, #0]
      break;
 80259d2:	e00b      	b.n	80259ec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80259d4:	687a      	ldr	r2, [r7, #4]
 80259d6:	69bb      	ldr	r3, [r7, #24]
 80259d8:	212c      	movs	r1, #44	; 0x2c
 80259da:	fb01 f303 	mul.w	r3, r1, r3
 80259de:	4413      	add	r3, r2
 80259e0:	3360      	adds	r3, #96	; 0x60
 80259e2:	2204      	movs	r2, #4
 80259e4:	701a      	strb	r2, [r3, #0]
      break;
 80259e6:	e001      	b.n	80259ec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80259e8:	bf00      	nop
 80259ea:	e000      	b.n	80259ee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80259ec:	bf00      	nop
  }
}
 80259ee:	bf00      	nop
 80259f0:	3728      	adds	r7, #40	; 0x28
 80259f2:	46bd      	mov	sp, r7
 80259f4:	bd80      	pop	{r7, pc}

080259f6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80259f6:	b580      	push	{r7, lr}
 80259f8:	b086      	sub	sp, #24
 80259fa:	af00      	add	r7, sp, #0
 80259fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80259fe:	687b      	ldr	r3, [r7, #4]
 8025a00:	681b      	ldr	r3, [r3, #0]
 8025a02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025a04:	697b      	ldr	r3, [r7, #20]
 8025a06:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8025a08:	693b      	ldr	r3, [r7, #16]
 8025a0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025a0e:	681b      	ldr	r3, [r3, #0]
 8025a10:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8025a12:	693b      	ldr	r3, [r7, #16]
 8025a14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025a18:	681b      	ldr	r3, [r3, #0]
 8025a1a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8025a1c:	68bb      	ldr	r3, [r7, #8]
 8025a1e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8025a22:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8025a24:	68fb      	ldr	r3, [r7, #12]
 8025a26:	f003 0302 	and.w	r3, r3, #2
 8025a2a:	2b02      	cmp	r3, #2
 8025a2c:	d10b      	bne.n	8025a46 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8025a2e:	68fb      	ldr	r3, [r7, #12]
 8025a30:	f003 0301 	and.w	r3, r3, #1
 8025a34:	2b01      	cmp	r3, #1
 8025a36:	d102      	bne.n	8025a3e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8025a38:	6878      	ldr	r0, [r7, #4]
 8025a3a:	f007 f9cb 	bl	802cdd4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8025a3e:	68bb      	ldr	r3, [r7, #8]
 8025a40:	f043 0302 	orr.w	r3, r3, #2
 8025a44:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8025a46:	68fb      	ldr	r3, [r7, #12]
 8025a48:	f003 0308 	and.w	r3, r3, #8
 8025a4c:	2b08      	cmp	r3, #8
 8025a4e:	d132      	bne.n	8025ab6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8025a50:	68bb      	ldr	r3, [r7, #8]
 8025a52:	f043 0308 	orr.w	r3, r3, #8
 8025a56:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8025a58:	68fb      	ldr	r3, [r7, #12]
 8025a5a:	f003 0304 	and.w	r3, r3, #4
 8025a5e:	2b04      	cmp	r3, #4
 8025a60:	d126      	bne.n	8025ab0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8025a62:	687b      	ldr	r3, [r7, #4]
 8025a64:	699b      	ldr	r3, [r3, #24]
 8025a66:	2b02      	cmp	r3, #2
 8025a68:	d113      	bne.n	8025a92 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8025a6a:	68fb      	ldr	r3, [r7, #12]
 8025a6c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8025a70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8025a74:	d106      	bne.n	8025a84 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8025a76:	687b      	ldr	r3, [r7, #4]
 8025a78:	681b      	ldr	r3, [r3, #0]
 8025a7a:	2102      	movs	r1, #2
 8025a7c:	4618      	mov	r0, r3
 8025a7e:	f004 fbeb 	bl	802a258 <USB_InitFSLSPClkSel>
 8025a82:	e011      	b.n	8025aa8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8025a84:	687b      	ldr	r3, [r7, #4]
 8025a86:	681b      	ldr	r3, [r3, #0]
 8025a88:	2101      	movs	r1, #1
 8025a8a:	4618      	mov	r0, r3
 8025a8c:	f004 fbe4 	bl	802a258 <USB_InitFSLSPClkSel>
 8025a90:	e00a      	b.n	8025aa8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8025a92:	687b      	ldr	r3, [r7, #4]
 8025a94:	68db      	ldr	r3, [r3, #12]
 8025a96:	2b01      	cmp	r3, #1
 8025a98:	d106      	bne.n	8025aa8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8025a9a:	693b      	ldr	r3, [r7, #16]
 8025a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8025aa0:	461a      	mov	r2, r3
 8025aa2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8025aa6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8025aa8:	6878      	ldr	r0, [r7, #4]
 8025aaa:	f007 f9bd 	bl	802ce28 <HAL_HCD_PortEnabled_Callback>
 8025aae:	e002      	b.n	8025ab6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8025ab0:	6878      	ldr	r0, [r7, #4]
 8025ab2:	f007 f9c7 	bl	802ce44 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8025ab6:	68fb      	ldr	r3, [r7, #12]
 8025ab8:	f003 0320 	and.w	r3, r3, #32
 8025abc:	2b20      	cmp	r3, #32
 8025abe:	d103      	bne.n	8025ac8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8025ac0:	68bb      	ldr	r3, [r7, #8]
 8025ac2:	f043 0320 	orr.w	r3, r3, #32
 8025ac6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8025ac8:	693b      	ldr	r3, [r7, #16]
 8025aca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025ace:	461a      	mov	r2, r3
 8025ad0:	68bb      	ldr	r3, [r7, #8]
 8025ad2:	6013      	str	r3, [r2, #0]
}
 8025ad4:	bf00      	nop
 8025ad6:	3718      	adds	r7, #24
 8025ad8:	46bd      	mov	sp, r7
 8025ada:	bd80      	pop	{r7, pc}

08025adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8025adc:	b580      	push	{r7, lr}
 8025ade:	b084      	sub	sp, #16
 8025ae0:	af00      	add	r7, sp, #0
 8025ae2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8025ae4:	687b      	ldr	r3, [r7, #4]
 8025ae6:	2b00      	cmp	r3, #0
 8025ae8:	d101      	bne.n	8025aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8025aea:	2301      	movs	r3, #1
 8025aec:	e12b      	b.n	8025d46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8025aee:	687b      	ldr	r3, [r7, #4]
 8025af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025af4:	b2db      	uxtb	r3, r3
 8025af6:	2b00      	cmp	r3, #0
 8025af8:	d106      	bne.n	8025b08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8025afa:	687b      	ldr	r3, [r7, #4]
 8025afc:	2200      	movs	r2, #0
 8025afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8025b02:	6878      	ldr	r0, [r7, #4]
 8025b04:	f7fb fa48 	bl	8020f98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8025b08:	687b      	ldr	r3, [r7, #4]
 8025b0a:	2224      	movs	r2, #36	; 0x24
 8025b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8025b10:	687b      	ldr	r3, [r7, #4]
 8025b12:	681b      	ldr	r3, [r3, #0]
 8025b14:	681a      	ldr	r2, [r3, #0]
 8025b16:	687b      	ldr	r3, [r7, #4]
 8025b18:	681b      	ldr	r3, [r3, #0]
 8025b1a:	f022 0201 	bic.w	r2, r2, #1
 8025b1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8025b20:	687b      	ldr	r3, [r7, #4]
 8025b22:	681b      	ldr	r3, [r3, #0]
 8025b24:	681a      	ldr	r2, [r3, #0]
 8025b26:	687b      	ldr	r3, [r7, #4]
 8025b28:	681b      	ldr	r3, [r3, #0]
 8025b2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8025b2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8025b30:	687b      	ldr	r3, [r7, #4]
 8025b32:	681b      	ldr	r3, [r3, #0]
 8025b34:	681a      	ldr	r2, [r3, #0]
 8025b36:	687b      	ldr	r3, [r7, #4]
 8025b38:	681b      	ldr	r3, [r3, #0]
 8025b3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8025b3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8025b40:	f001 fa0c 	bl	8026f5c <HAL_RCC_GetPCLK1Freq>
 8025b44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8025b46:	687b      	ldr	r3, [r7, #4]
 8025b48:	685b      	ldr	r3, [r3, #4]
 8025b4a:	4a81      	ldr	r2, [pc, #516]	; (8025d50 <HAL_I2C_Init+0x274>)
 8025b4c:	4293      	cmp	r3, r2
 8025b4e:	d807      	bhi.n	8025b60 <HAL_I2C_Init+0x84>
 8025b50:	68fb      	ldr	r3, [r7, #12]
 8025b52:	4a80      	ldr	r2, [pc, #512]	; (8025d54 <HAL_I2C_Init+0x278>)
 8025b54:	4293      	cmp	r3, r2
 8025b56:	bf94      	ite	ls
 8025b58:	2301      	movls	r3, #1
 8025b5a:	2300      	movhi	r3, #0
 8025b5c:	b2db      	uxtb	r3, r3
 8025b5e:	e006      	b.n	8025b6e <HAL_I2C_Init+0x92>
 8025b60:	68fb      	ldr	r3, [r7, #12]
 8025b62:	4a7d      	ldr	r2, [pc, #500]	; (8025d58 <HAL_I2C_Init+0x27c>)
 8025b64:	4293      	cmp	r3, r2
 8025b66:	bf94      	ite	ls
 8025b68:	2301      	movls	r3, #1
 8025b6a:	2300      	movhi	r3, #0
 8025b6c:	b2db      	uxtb	r3, r3
 8025b6e:	2b00      	cmp	r3, #0
 8025b70:	d001      	beq.n	8025b76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8025b72:	2301      	movs	r3, #1
 8025b74:	e0e7      	b.n	8025d46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8025b76:	68fb      	ldr	r3, [r7, #12]
 8025b78:	4a78      	ldr	r2, [pc, #480]	; (8025d5c <HAL_I2C_Init+0x280>)
 8025b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8025b7e:	0c9b      	lsrs	r3, r3, #18
 8025b80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8025b82:	687b      	ldr	r3, [r7, #4]
 8025b84:	681b      	ldr	r3, [r3, #0]
 8025b86:	685b      	ldr	r3, [r3, #4]
 8025b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8025b8c:	687b      	ldr	r3, [r7, #4]
 8025b8e:	681b      	ldr	r3, [r3, #0]
 8025b90:	68ba      	ldr	r2, [r7, #8]
 8025b92:	430a      	orrs	r2, r1
 8025b94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8025b96:	687b      	ldr	r3, [r7, #4]
 8025b98:	681b      	ldr	r3, [r3, #0]
 8025b9a:	6a1b      	ldr	r3, [r3, #32]
 8025b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8025ba0:	687b      	ldr	r3, [r7, #4]
 8025ba2:	685b      	ldr	r3, [r3, #4]
 8025ba4:	4a6a      	ldr	r2, [pc, #424]	; (8025d50 <HAL_I2C_Init+0x274>)
 8025ba6:	4293      	cmp	r3, r2
 8025ba8:	d802      	bhi.n	8025bb0 <HAL_I2C_Init+0xd4>
 8025baa:	68bb      	ldr	r3, [r7, #8]
 8025bac:	3301      	adds	r3, #1
 8025bae:	e009      	b.n	8025bc4 <HAL_I2C_Init+0xe8>
 8025bb0:	68bb      	ldr	r3, [r7, #8]
 8025bb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8025bb6:	fb02 f303 	mul.w	r3, r2, r3
 8025bba:	4a69      	ldr	r2, [pc, #420]	; (8025d60 <HAL_I2C_Init+0x284>)
 8025bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8025bc0:	099b      	lsrs	r3, r3, #6
 8025bc2:	3301      	adds	r3, #1
 8025bc4:	687a      	ldr	r2, [r7, #4]
 8025bc6:	6812      	ldr	r2, [r2, #0]
 8025bc8:	430b      	orrs	r3, r1
 8025bca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8025bcc:	687b      	ldr	r3, [r7, #4]
 8025bce:	681b      	ldr	r3, [r3, #0]
 8025bd0:	69db      	ldr	r3, [r3, #28]
 8025bd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8025bd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8025bda:	687b      	ldr	r3, [r7, #4]
 8025bdc:	685b      	ldr	r3, [r3, #4]
 8025bde:	495c      	ldr	r1, [pc, #368]	; (8025d50 <HAL_I2C_Init+0x274>)
 8025be0:	428b      	cmp	r3, r1
 8025be2:	d819      	bhi.n	8025c18 <HAL_I2C_Init+0x13c>
 8025be4:	68fb      	ldr	r3, [r7, #12]
 8025be6:	1e59      	subs	r1, r3, #1
 8025be8:	687b      	ldr	r3, [r7, #4]
 8025bea:	685b      	ldr	r3, [r3, #4]
 8025bec:	005b      	lsls	r3, r3, #1
 8025bee:	fbb1 f3f3 	udiv	r3, r1, r3
 8025bf2:	1c59      	adds	r1, r3, #1
 8025bf4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8025bf8:	400b      	ands	r3, r1
 8025bfa:	2b00      	cmp	r3, #0
 8025bfc:	d00a      	beq.n	8025c14 <HAL_I2C_Init+0x138>
 8025bfe:	68fb      	ldr	r3, [r7, #12]
 8025c00:	1e59      	subs	r1, r3, #1
 8025c02:	687b      	ldr	r3, [r7, #4]
 8025c04:	685b      	ldr	r3, [r3, #4]
 8025c06:	005b      	lsls	r3, r3, #1
 8025c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8025c0c:	3301      	adds	r3, #1
 8025c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025c12:	e051      	b.n	8025cb8 <HAL_I2C_Init+0x1dc>
 8025c14:	2304      	movs	r3, #4
 8025c16:	e04f      	b.n	8025cb8 <HAL_I2C_Init+0x1dc>
 8025c18:	687b      	ldr	r3, [r7, #4]
 8025c1a:	689b      	ldr	r3, [r3, #8]
 8025c1c:	2b00      	cmp	r3, #0
 8025c1e:	d111      	bne.n	8025c44 <HAL_I2C_Init+0x168>
 8025c20:	68fb      	ldr	r3, [r7, #12]
 8025c22:	1e58      	subs	r0, r3, #1
 8025c24:	687b      	ldr	r3, [r7, #4]
 8025c26:	6859      	ldr	r1, [r3, #4]
 8025c28:	460b      	mov	r3, r1
 8025c2a:	005b      	lsls	r3, r3, #1
 8025c2c:	440b      	add	r3, r1
 8025c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8025c32:	3301      	adds	r3, #1
 8025c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025c38:	2b00      	cmp	r3, #0
 8025c3a:	bf0c      	ite	eq
 8025c3c:	2301      	moveq	r3, #1
 8025c3e:	2300      	movne	r3, #0
 8025c40:	b2db      	uxtb	r3, r3
 8025c42:	e012      	b.n	8025c6a <HAL_I2C_Init+0x18e>
 8025c44:	68fb      	ldr	r3, [r7, #12]
 8025c46:	1e58      	subs	r0, r3, #1
 8025c48:	687b      	ldr	r3, [r7, #4]
 8025c4a:	6859      	ldr	r1, [r3, #4]
 8025c4c:	460b      	mov	r3, r1
 8025c4e:	009b      	lsls	r3, r3, #2
 8025c50:	440b      	add	r3, r1
 8025c52:	0099      	lsls	r1, r3, #2
 8025c54:	440b      	add	r3, r1
 8025c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8025c5a:	3301      	adds	r3, #1
 8025c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025c60:	2b00      	cmp	r3, #0
 8025c62:	bf0c      	ite	eq
 8025c64:	2301      	moveq	r3, #1
 8025c66:	2300      	movne	r3, #0
 8025c68:	b2db      	uxtb	r3, r3
 8025c6a:	2b00      	cmp	r3, #0
 8025c6c:	d001      	beq.n	8025c72 <HAL_I2C_Init+0x196>
 8025c6e:	2301      	movs	r3, #1
 8025c70:	e022      	b.n	8025cb8 <HAL_I2C_Init+0x1dc>
 8025c72:	687b      	ldr	r3, [r7, #4]
 8025c74:	689b      	ldr	r3, [r3, #8]
 8025c76:	2b00      	cmp	r3, #0
 8025c78:	d10e      	bne.n	8025c98 <HAL_I2C_Init+0x1bc>
 8025c7a:	68fb      	ldr	r3, [r7, #12]
 8025c7c:	1e58      	subs	r0, r3, #1
 8025c7e:	687b      	ldr	r3, [r7, #4]
 8025c80:	6859      	ldr	r1, [r3, #4]
 8025c82:	460b      	mov	r3, r1
 8025c84:	005b      	lsls	r3, r3, #1
 8025c86:	440b      	add	r3, r1
 8025c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8025c8c:	3301      	adds	r3, #1
 8025c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8025c96:	e00f      	b.n	8025cb8 <HAL_I2C_Init+0x1dc>
 8025c98:	68fb      	ldr	r3, [r7, #12]
 8025c9a:	1e58      	subs	r0, r3, #1
 8025c9c:	687b      	ldr	r3, [r7, #4]
 8025c9e:	6859      	ldr	r1, [r3, #4]
 8025ca0:	460b      	mov	r3, r1
 8025ca2:	009b      	lsls	r3, r3, #2
 8025ca4:	440b      	add	r3, r1
 8025ca6:	0099      	lsls	r1, r3, #2
 8025ca8:	440b      	add	r3, r1
 8025caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8025cae:	3301      	adds	r3, #1
 8025cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025cb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8025cb8:	6879      	ldr	r1, [r7, #4]
 8025cba:	6809      	ldr	r1, [r1, #0]
 8025cbc:	4313      	orrs	r3, r2
 8025cbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8025cc0:	687b      	ldr	r3, [r7, #4]
 8025cc2:	681b      	ldr	r3, [r3, #0]
 8025cc4:	681b      	ldr	r3, [r3, #0]
 8025cc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8025cca:	687b      	ldr	r3, [r7, #4]
 8025ccc:	69da      	ldr	r2, [r3, #28]
 8025cce:	687b      	ldr	r3, [r7, #4]
 8025cd0:	6a1b      	ldr	r3, [r3, #32]
 8025cd2:	431a      	orrs	r2, r3
 8025cd4:	687b      	ldr	r3, [r7, #4]
 8025cd6:	681b      	ldr	r3, [r3, #0]
 8025cd8:	430a      	orrs	r2, r1
 8025cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8025cdc:	687b      	ldr	r3, [r7, #4]
 8025cde:	681b      	ldr	r3, [r3, #0]
 8025ce0:	689b      	ldr	r3, [r3, #8]
 8025ce2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8025ce6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8025cea:	687a      	ldr	r2, [r7, #4]
 8025cec:	6911      	ldr	r1, [r2, #16]
 8025cee:	687a      	ldr	r2, [r7, #4]
 8025cf0:	68d2      	ldr	r2, [r2, #12]
 8025cf2:	4311      	orrs	r1, r2
 8025cf4:	687a      	ldr	r2, [r7, #4]
 8025cf6:	6812      	ldr	r2, [r2, #0]
 8025cf8:	430b      	orrs	r3, r1
 8025cfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8025cfc:	687b      	ldr	r3, [r7, #4]
 8025cfe:	681b      	ldr	r3, [r3, #0]
 8025d00:	68db      	ldr	r3, [r3, #12]
 8025d02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8025d06:	687b      	ldr	r3, [r7, #4]
 8025d08:	695a      	ldr	r2, [r3, #20]
 8025d0a:	687b      	ldr	r3, [r7, #4]
 8025d0c:	699b      	ldr	r3, [r3, #24]
 8025d0e:	431a      	orrs	r2, r3
 8025d10:	687b      	ldr	r3, [r7, #4]
 8025d12:	681b      	ldr	r3, [r3, #0]
 8025d14:	430a      	orrs	r2, r1
 8025d16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8025d18:	687b      	ldr	r3, [r7, #4]
 8025d1a:	681b      	ldr	r3, [r3, #0]
 8025d1c:	681a      	ldr	r2, [r3, #0]
 8025d1e:	687b      	ldr	r3, [r7, #4]
 8025d20:	681b      	ldr	r3, [r3, #0]
 8025d22:	f042 0201 	orr.w	r2, r2, #1
 8025d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8025d28:	687b      	ldr	r3, [r7, #4]
 8025d2a:	2200      	movs	r2, #0
 8025d2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8025d2e:	687b      	ldr	r3, [r7, #4]
 8025d30:	2220      	movs	r2, #32
 8025d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8025d36:	687b      	ldr	r3, [r7, #4]
 8025d38:	2200      	movs	r2, #0
 8025d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8025d3c:	687b      	ldr	r3, [r7, #4]
 8025d3e:	2200      	movs	r2, #0
 8025d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8025d44:	2300      	movs	r3, #0
}
 8025d46:	4618      	mov	r0, r3
 8025d48:	3710      	adds	r7, #16
 8025d4a:	46bd      	mov	sp, r7
 8025d4c:	bd80      	pop	{r7, pc}
 8025d4e:	bf00      	nop
 8025d50:	000186a0 	.word	0x000186a0
 8025d54:	001e847f 	.word	0x001e847f
 8025d58:	003d08ff 	.word	0x003d08ff
 8025d5c:	431bde83 	.word	0x431bde83
 8025d60:	10624dd3 	.word	0x10624dd3

08025d64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8025d64:	b480      	push	{r7}
 8025d66:	b083      	sub	sp, #12
 8025d68:	af00      	add	r7, sp, #0
 8025d6a:	6078      	str	r0, [r7, #4]
 8025d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8025d6e:	687b      	ldr	r3, [r7, #4]
 8025d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025d74:	b2db      	uxtb	r3, r3
 8025d76:	2b20      	cmp	r3, #32
 8025d78:	d129      	bne.n	8025dce <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8025d7a:	687b      	ldr	r3, [r7, #4]
 8025d7c:	2224      	movs	r2, #36	; 0x24
 8025d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8025d82:	687b      	ldr	r3, [r7, #4]
 8025d84:	681b      	ldr	r3, [r3, #0]
 8025d86:	681a      	ldr	r2, [r3, #0]
 8025d88:	687b      	ldr	r3, [r7, #4]
 8025d8a:	681b      	ldr	r3, [r3, #0]
 8025d8c:	f022 0201 	bic.w	r2, r2, #1
 8025d90:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8025d92:	687b      	ldr	r3, [r7, #4]
 8025d94:	681b      	ldr	r3, [r3, #0]
 8025d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025d98:	687b      	ldr	r3, [r7, #4]
 8025d9a:	681b      	ldr	r3, [r3, #0]
 8025d9c:	f022 0210 	bic.w	r2, r2, #16
 8025da0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8025da2:	687b      	ldr	r3, [r7, #4]
 8025da4:	681b      	ldr	r3, [r3, #0]
 8025da6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8025da8:	687b      	ldr	r3, [r7, #4]
 8025daa:	681b      	ldr	r3, [r3, #0]
 8025dac:	683a      	ldr	r2, [r7, #0]
 8025dae:	430a      	orrs	r2, r1
 8025db0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8025db2:	687b      	ldr	r3, [r7, #4]
 8025db4:	681b      	ldr	r3, [r3, #0]
 8025db6:	681a      	ldr	r2, [r3, #0]
 8025db8:	687b      	ldr	r3, [r7, #4]
 8025dba:	681b      	ldr	r3, [r3, #0]
 8025dbc:	f042 0201 	orr.w	r2, r2, #1
 8025dc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8025dc2:	687b      	ldr	r3, [r7, #4]
 8025dc4:	2220      	movs	r2, #32
 8025dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8025dca:	2300      	movs	r3, #0
 8025dcc:	e000      	b.n	8025dd0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8025dce:	2302      	movs	r3, #2
  }
}
 8025dd0:	4618      	mov	r0, r3
 8025dd2:	370c      	adds	r7, #12
 8025dd4:	46bd      	mov	sp, r7
 8025dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dda:	4770      	bx	lr

08025ddc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8025ddc:	b480      	push	{r7}
 8025dde:	b085      	sub	sp, #20
 8025de0:	af00      	add	r7, sp, #0
 8025de2:	6078      	str	r0, [r7, #4]
 8025de4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8025de6:	2300      	movs	r3, #0
 8025de8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8025dea:	687b      	ldr	r3, [r7, #4]
 8025dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025df0:	b2db      	uxtb	r3, r3
 8025df2:	2b20      	cmp	r3, #32
 8025df4:	d12a      	bne.n	8025e4c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8025df6:	687b      	ldr	r3, [r7, #4]
 8025df8:	2224      	movs	r2, #36	; 0x24
 8025dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8025dfe:	687b      	ldr	r3, [r7, #4]
 8025e00:	681b      	ldr	r3, [r3, #0]
 8025e02:	681a      	ldr	r2, [r3, #0]
 8025e04:	687b      	ldr	r3, [r7, #4]
 8025e06:	681b      	ldr	r3, [r3, #0]
 8025e08:	f022 0201 	bic.w	r2, r2, #1
 8025e0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8025e0e:	687b      	ldr	r3, [r7, #4]
 8025e10:	681b      	ldr	r3, [r3, #0]
 8025e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025e14:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8025e16:	89fb      	ldrh	r3, [r7, #14]
 8025e18:	f023 030f 	bic.w	r3, r3, #15
 8025e1c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8025e1e:	683b      	ldr	r3, [r7, #0]
 8025e20:	b29a      	uxth	r2, r3
 8025e22:	89fb      	ldrh	r3, [r7, #14]
 8025e24:	4313      	orrs	r3, r2
 8025e26:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8025e28:	687b      	ldr	r3, [r7, #4]
 8025e2a:	681b      	ldr	r3, [r3, #0]
 8025e2c:	89fa      	ldrh	r2, [r7, #14]
 8025e2e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8025e30:	687b      	ldr	r3, [r7, #4]
 8025e32:	681b      	ldr	r3, [r3, #0]
 8025e34:	681a      	ldr	r2, [r3, #0]
 8025e36:	687b      	ldr	r3, [r7, #4]
 8025e38:	681b      	ldr	r3, [r3, #0]
 8025e3a:	f042 0201 	orr.w	r2, r2, #1
 8025e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8025e40:	687b      	ldr	r3, [r7, #4]
 8025e42:	2220      	movs	r2, #32
 8025e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8025e48:	2300      	movs	r3, #0
 8025e4a:	e000      	b.n	8025e4e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8025e4c:	2302      	movs	r3, #2
  }
}
 8025e4e:	4618      	mov	r0, r3
 8025e50:	3714      	adds	r7, #20
 8025e52:	46bd      	mov	sp, r7
 8025e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e58:	4770      	bx	lr
	...

08025e5c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8025e5c:	b580      	push	{r7, lr}
 8025e5e:	b084      	sub	sp, #16
 8025e60:	af00      	add	r7, sp, #0
 8025e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8025e64:	687b      	ldr	r3, [r7, #4]
 8025e66:	2b00      	cmp	r3, #0
 8025e68:	d101      	bne.n	8025e6e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8025e6a:	2301      	movs	r3, #1
 8025e6c:	e0bf      	b.n	8025fee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8025e6e:	687b      	ldr	r3, [r7, #4]
 8025e70:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8025e74:	b2db      	uxtb	r3, r3
 8025e76:	2b00      	cmp	r3, #0
 8025e78:	d106      	bne.n	8025e88 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8025e7a:	687b      	ldr	r3, [r7, #4]
 8025e7c:	2200      	movs	r2, #0
 8025e7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8025e82:	6878      	ldr	r0, [r7, #4]
 8025e84:	f7fb f8f2 	bl	802106c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8025e88:	687b      	ldr	r3, [r7, #4]
 8025e8a:	2202      	movs	r2, #2
 8025e8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8025e90:	687b      	ldr	r3, [r7, #4]
 8025e92:	681b      	ldr	r3, [r3, #0]
 8025e94:	699a      	ldr	r2, [r3, #24]
 8025e96:	687b      	ldr	r3, [r7, #4]
 8025e98:	681b      	ldr	r3, [r3, #0]
 8025e9a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8025e9e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8025ea0:	687b      	ldr	r3, [r7, #4]
 8025ea2:	681b      	ldr	r3, [r3, #0]
 8025ea4:	6999      	ldr	r1, [r3, #24]
 8025ea6:	687b      	ldr	r3, [r7, #4]
 8025ea8:	685a      	ldr	r2, [r3, #4]
 8025eaa:	687b      	ldr	r3, [r7, #4]
 8025eac:	689b      	ldr	r3, [r3, #8]
 8025eae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8025eb0:	687b      	ldr	r3, [r7, #4]
 8025eb2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8025eb4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8025eb6:	687b      	ldr	r3, [r7, #4]
 8025eb8:	691b      	ldr	r3, [r3, #16]
 8025eba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8025ebc:	687b      	ldr	r3, [r7, #4]
 8025ebe:	681b      	ldr	r3, [r3, #0]
 8025ec0:	430a      	orrs	r2, r1
 8025ec2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8025ec4:	687b      	ldr	r3, [r7, #4]
 8025ec6:	681b      	ldr	r3, [r3, #0]
 8025ec8:	6899      	ldr	r1, [r3, #8]
 8025eca:	687b      	ldr	r3, [r7, #4]
 8025ecc:	681a      	ldr	r2, [r3, #0]
 8025ece:	4b4a      	ldr	r3, [pc, #296]	; (8025ff8 <HAL_LTDC_Init+0x19c>)
 8025ed0:	400b      	ands	r3, r1
 8025ed2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8025ed4:	687b      	ldr	r3, [r7, #4]
 8025ed6:	695b      	ldr	r3, [r3, #20]
 8025ed8:	041b      	lsls	r3, r3, #16
 8025eda:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8025edc:	687b      	ldr	r3, [r7, #4]
 8025ede:	681b      	ldr	r3, [r3, #0]
 8025ee0:	6899      	ldr	r1, [r3, #8]
 8025ee2:	687b      	ldr	r3, [r7, #4]
 8025ee4:	699a      	ldr	r2, [r3, #24]
 8025ee6:	68fb      	ldr	r3, [r7, #12]
 8025ee8:	431a      	orrs	r2, r3
 8025eea:	687b      	ldr	r3, [r7, #4]
 8025eec:	681b      	ldr	r3, [r3, #0]
 8025eee:	430a      	orrs	r2, r1
 8025ef0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8025ef2:	687b      	ldr	r3, [r7, #4]
 8025ef4:	681b      	ldr	r3, [r3, #0]
 8025ef6:	68d9      	ldr	r1, [r3, #12]
 8025ef8:	687b      	ldr	r3, [r7, #4]
 8025efa:	681a      	ldr	r2, [r3, #0]
 8025efc:	4b3e      	ldr	r3, [pc, #248]	; (8025ff8 <HAL_LTDC_Init+0x19c>)
 8025efe:	400b      	ands	r3, r1
 8025f00:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8025f02:	687b      	ldr	r3, [r7, #4]
 8025f04:	69db      	ldr	r3, [r3, #28]
 8025f06:	041b      	lsls	r3, r3, #16
 8025f08:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8025f0a:	687b      	ldr	r3, [r7, #4]
 8025f0c:	681b      	ldr	r3, [r3, #0]
 8025f0e:	68d9      	ldr	r1, [r3, #12]
 8025f10:	687b      	ldr	r3, [r7, #4]
 8025f12:	6a1a      	ldr	r2, [r3, #32]
 8025f14:	68fb      	ldr	r3, [r7, #12]
 8025f16:	431a      	orrs	r2, r3
 8025f18:	687b      	ldr	r3, [r7, #4]
 8025f1a:	681b      	ldr	r3, [r3, #0]
 8025f1c:	430a      	orrs	r2, r1
 8025f1e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8025f20:	687b      	ldr	r3, [r7, #4]
 8025f22:	681b      	ldr	r3, [r3, #0]
 8025f24:	6919      	ldr	r1, [r3, #16]
 8025f26:	687b      	ldr	r3, [r7, #4]
 8025f28:	681a      	ldr	r2, [r3, #0]
 8025f2a:	4b33      	ldr	r3, [pc, #204]	; (8025ff8 <HAL_LTDC_Init+0x19c>)
 8025f2c:	400b      	ands	r3, r1
 8025f2e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8025f30:	687b      	ldr	r3, [r7, #4]
 8025f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025f34:	041b      	lsls	r3, r3, #16
 8025f36:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8025f38:	687b      	ldr	r3, [r7, #4]
 8025f3a:	681b      	ldr	r3, [r3, #0]
 8025f3c:	6919      	ldr	r1, [r3, #16]
 8025f3e:	687b      	ldr	r3, [r7, #4]
 8025f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8025f42:	68fb      	ldr	r3, [r7, #12]
 8025f44:	431a      	orrs	r2, r3
 8025f46:	687b      	ldr	r3, [r7, #4]
 8025f48:	681b      	ldr	r3, [r3, #0]
 8025f4a:	430a      	orrs	r2, r1
 8025f4c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8025f4e:	687b      	ldr	r3, [r7, #4]
 8025f50:	681b      	ldr	r3, [r3, #0]
 8025f52:	6959      	ldr	r1, [r3, #20]
 8025f54:	687b      	ldr	r3, [r7, #4]
 8025f56:	681a      	ldr	r2, [r3, #0]
 8025f58:	4b27      	ldr	r3, [pc, #156]	; (8025ff8 <HAL_LTDC_Init+0x19c>)
 8025f5a:	400b      	ands	r3, r1
 8025f5c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8025f5e:	687b      	ldr	r3, [r7, #4]
 8025f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025f62:	041b      	lsls	r3, r3, #16
 8025f64:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8025f66:	687b      	ldr	r3, [r7, #4]
 8025f68:	681b      	ldr	r3, [r3, #0]
 8025f6a:	6959      	ldr	r1, [r3, #20]
 8025f6c:	687b      	ldr	r3, [r7, #4]
 8025f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8025f70:	68fb      	ldr	r3, [r7, #12]
 8025f72:	431a      	orrs	r2, r3
 8025f74:	687b      	ldr	r3, [r7, #4]
 8025f76:	681b      	ldr	r3, [r3, #0]
 8025f78:	430a      	orrs	r2, r1
 8025f7a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8025f7c:	687b      	ldr	r3, [r7, #4]
 8025f7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8025f82:	021b      	lsls	r3, r3, #8
 8025f84:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8025f86:	687b      	ldr	r3, [r7, #4]
 8025f88:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8025f8c:	041b      	lsls	r3, r3, #16
 8025f8e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8025f90:	687b      	ldr	r3, [r7, #4]
 8025f92:	681b      	ldr	r3, [r3, #0]
 8025f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8025f96:	687b      	ldr	r3, [r7, #4]
 8025f98:	681b      	ldr	r3, [r3, #0]
 8025f9a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8025f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8025fa0:	687b      	ldr	r3, [r7, #4]
 8025fa2:	681b      	ldr	r3, [r3, #0]
 8025fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8025fa6:	68ba      	ldr	r2, [r7, #8]
 8025fa8:	68fb      	ldr	r3, [r7, #12]
 8025faa:	4313      	orrs	r3, r2
 8025fac:	687a      	ldr	r2, [r7, #4]
 8025fae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8025fb2:	431a      	orrs	r2, r3
 8025fb4:	687b      	ldr	r3, [r7, #4]
 8025fb6:	681b      	ldr	r3, [r3, #0]
 8025fb8:	430a      	orrs	r2, r1
 8025fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8025fbc:	687b      	ldr	r3, [r7, #4]
 8025fbe:	681b      	ldr	r3, [r3, #0]
 8025fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8025fc2:	687b      	ldr	r3, [r7, #4]
 8025fc4:	681b      	ldr	r3, [r3, #0]
 8025fc6:	f042 0206 	orr.w	r2, r2, #6
 8025fca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8025fcc:	687b      	ldr	r3, [r7, #4]
 8025fce:	681b      	ldr	r3, [r3, #0]
 8025fd0:	699a      	ldr	r2, [r3, #24]
 8025fd2:	687b      	ldr	r3, [r7, #4]
 8025fd4:	681b      	ldr	r3, [r3, #0]
 8025fd6:	f042 0201 	orr.w	r2, r2, #1
 8025fda:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8025fdc:	687b      	ldr	r3, [r7, #4]
 8025fde:	2200      	movs	r2, #0
 8025fe0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8025fe4:	687b      	ldr	r3, [r7, #4]
 8025fe6:	2201      	movs	r2, #1
 8025fe8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8025fec:	2300      	movs	r3, #0
}
 8025fee:	4618      	mov	r0, r3
 8025ff0:	3710      	adds	r7, #16
 8025ff2:	46bd      	mov	sp, r7
 8025ff4:	bd80      	pop	{r7, pc}
 8025ff6:	bf00      	nop
 8025ff8:	f000f800 	.word	0xf000f800

08025ffc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8025ffc:	b580      	push	{r7, lr}
 8025ffe:	b084      	sub	sp, #16
 8026000:	af00      	add	r7, sp, #0
 8026002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8026004:	687b      	ldr	r3, [r7, #4]
 8026006:	681b      	ldr	r3, [r3, #0]
 8026008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802600a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 802600c:	687b      	ldr	r3, [r7, #4]
 802600e:	681b      	ldr	r3, [r3, #0]
 8026010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026012:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8026014:	68fb      	ldr	r3, [r7, #12]
 8026016:	f003 0304 	and.w	r3, r3, #4
 802601a:	2b00      	cmp	r3, #0
 802601c:	d023      	beq.n	8026066 <HAL_LTDC_IRQHandler+0x6a>
 802601e:	68bb      	ldr	r3, [r7, #8]
 8026020:	f003 0304 	and.w	r3, r3, #4
 8026024:	2b00      	cmp	r3, #0
 8026026:	d01e      	beq.n	8026066 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8026028:	687b      	ldr	r3, [r7, #4]
 802602a:	681b      	ldr	r3, [r3, #0]
 802602c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802602e:	687b      	ldr	r3, [r7, #4]
 8026030:	681b      	ldr	r3, [r3, #0]
 8026032:	f022 0204 	bic.w	r2, r2, #4
 8026036:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8026038:	687b      	ldr	r3, [r7, #4]
 802603a:	681b      	ldr	r3, [r3, #0]
 802603c:	2204      	movs	r2, #4
 802603e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8026040:	687b      	ldr	r3, [r7, #4]
 8026042:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8026046:	f043 0201 	orr.w	r2, r3, #1
 802604a:	687b      	ldr	r3, [r7, #4]
 802604c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8026050:	687b      	ldr	r3, [r7, #4]
 8026052:	2204      	movs	r2, #4
 8026054:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026058:	687b      	ldr	r3, [r7, #4]
 802605a:	2200      	movs	r2, #0
 802605c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8026060:	6878      	ldr	r0, [r7, #4]
 8026062:	f000 f86f 	bl	8026144 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8026066:	68fb      	ldr	r3, [r7, #12]
 8026068:	f003 0302 	and.w	r3, r3, #2
 802606c:	2b00      	cmp	r3, #0
 802606e:	d023      	beq.n	80260b8 <HAL_LTDC_IRQHandler+0xbc>
 8026070:	68bb      	ldr	r3, [r7, #8]
 8026072:	f003 0302 	and.w	r3, r3, #2
 8026076:	2b00      	cmp	r3, #0
 8026078:	d01e      	beq.n	80260b8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 802607a:	687b      	ldr	r3, [r7, #4]
 802607c:	681b      	ldr	r3, [r3, #0]
 802607e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026080:	687b      	ldr	r3, [r7, #4]
 8026082:	681b      	ldr	r3, [r3, #0]
 8026084:	f022 0202 	bic.w	r2, r2, #2
 8026088:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 802608a:	687b      	ldr	r3, [r7, #4]
 802608c:	681b      	ldr	r3, [r3, #0]
 802608e:	2202      	movs	r2, #2
 8026090:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8026092:	687b      	ldr	r3, [r7, #4]
 8026094:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8026098:	f043 0202 	orr.w	r2, r3, #2
 802609c:	687b      	ldr	r3, [r7, #4]
 802609e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80260a2:	687b      	ldr	r3, [r7, #4]
 80260a4:	2204      	movs	r2, #4
 80260a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80260aa:	687b      	ldr	r3, [r7, #4]
 80260ac:	2200      	movs	r2, #0
 80260ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80260b2:	6878      	ldr	r0, [r7, #4]
 80260b4:	f000 f846 	bl	8026144 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80260b8:	68fb      	ldr	r3, [r7, #12]
 80260ba:	f003 0301 	and.w	r3, r3, #1
 80260be:	2b00      	cmp	r3, #0
 80260c0:	d01b      	beq.n	80260fa <HAL_LTDC_IRQHandler+0xfe>
 80260c2:	68bb      	ldr	r3, [r7, #8]
 80260c4:	f003 0301 	and.w	r3, r3, #1
 80260c8:	2b00      	cmp	r3, #0
 80260ca:	d016      	beq.n	80260fa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80260cc:	687b      	ldr	r3, [r7, #4]
 80260ce:	681b      	ldr	r3, [r3, #0]
 80260d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80260d2:	687b      	ldr	r3, [r7, #4]
 80260d4:	681b      	ldr	r3, [r3, #0]
 80260d6:	f022 0201 	bic.w	r2, r2, #1
 80260da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80260dc:	687b      	ldr	r3, [r7, #4]
 80260de:	681b      	ldr	r3, [r3, #0]
 80260e0:	2201      	movs	r2, #1
 80260e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80260e4:	687b      	ldr	r3, [r7, #4]
 80260e6:	2201      	movs	r2, #1
 80260e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80260ec:	687b      	ldr	r3, [r7, #4]
 80260ee:	2200      	movs	r2, #0
 80260f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80260f4:	6878      	ldr	r0, [r7, #4]
 80260f6:	f000 f82f 	bl	8026158 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80260fa:	68fb      	ldr	r3, [r7, #12]
 80260fc:	f003 0308 	and.w	r3, r3, #8
 8026100:	2b00      	cmp	r3, #0
 8026102:	d01b      	beq.n	802613c <HAL_LTDC_IRQHandler+0x140>
 8026104:	68bb      	ldr	r3, [r7, #8]
 8026106:	f003 0308 	and.w	r3, r3, #8
 802610a:	2b00      	cmp	r3, #0
 802610c:	d016      	beq.n	802613c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 802610e:	687b      	ldr	r3, [r7, #4]
 8026110:	681b      	ldr	r3, [r3, #0]
 8026112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026114:	687b      	ldr	r3, [r7, #4]
 8026116:	681b      	ldr	r3, [r3, #0]
 8026118:	f022 0208 	bic.w	r2, r2, #8
 802611c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 802611e:	687b      	ldr	r3, [r7, #4]
 8026120:	681b      	ldr	r3, [r3, #0]
 8026122:	2208      	movs	r2, #8
 8026124:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8026126:	687b      	ldr	r3, [r7, #4]
 8026128:	2201      	movs	r2, #1
 802612a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 802612e:	687b      	ldr	r3, [r7, #4]
 8026130:	2200      	movs	r2, #0
 8026132:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8026136:	6878      	ldr	r0, [r7, #4]
 8026138:	f000 f818 	bl	802616c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 802613c:	bf00      	nop
 802613e:	3710      	adds	r7, #16
 8026140:	46bd      	mov	sp, r7
 8026142:	bd80      	pop	{r7, pc}

08026144 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8026144:	b480      	push	{r7}
 8026146:	b083      	sub	sp, #12
 8026148:	af00      	add	r7, sp, #0
 802614a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 802614c:	bf00      	nop
 802614e:	370c      	adds	r7, #12
 8026150:	46bd      	mov	sp, r7
 8026152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026156:	4770      	bx	lr

08026158 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8026158:	b480      	push	{r7}
 802615a:	b083      	sub	sp, #12
 802615c:	af00      	add	r7, sp, #0
 802615e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8026160:	bf00      	nop
 8026162:	370c      	adds	r7, #12
 8026164:	46bd      	mov	sp, r7
 8026166:	f85d 7b04 	ldr.w	r7, [sp], #4
 802616a:	4770      	bx	lr

0802616c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 802616c:	b480      	push	{r7}
 802616e:	b083      	sub	sp, #12
 8026170:	af00      	add	r7, sp, #0
 8026172:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8026174:	bf00      	nop
 8026176:	370c      	adds	r7, #12
 8026178:	46bd      	mov	sp, r7
 802617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802617e:	4770      	bx	lr

08026180 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8026180:	b5b0      	push	{r4, r5, r7, lr}
 8026182:	b084      	sub	sp, #16
 8026184:	af00      	add	r7, sp, #0
 8026186:	60f8      	str	r0, [r7, #12]
 8026188:	60b9      	str	r1, [r7, #8]
 802618a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 802618c:	68fb      	ldr	r3, [r7, #12]
 802618e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026192:	2b01      	cmp	r3, #1
 8026194:	d101      	bne.n	802619a <HAL_LTDC_ConfigLayer+0x1a>
 8026196:	2302      	movs	r3, #2
 8026198:	e02c      	b.n	80261f4 <HAL_LTDC_ConfigLayer+0x74>
 802619a:	68fb      	ldr	r3, [r7, #12]
 802619c:	2201      	movs	r2, #1
 802619e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80261a2:	68fb      	ldr	r3, [r7, #12]
 80261a4:	2202      	movs	r2, #2
 80261a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80261aa:	68fa      	ldr	r2, [r7, #12]
 80261ac:	687b      	ldr	r3, [r7, #4]
 80261ae:	2134      	movs	r1, #52	; 0x34
 80261b0:	fb01 f303 	mul.w	r3, r1, r3
 80261b4:	4413      	add	r3, r2
 80261b6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80261ba:	68bb      	ldr	r3, [r7, #8]
 80261bc:	4614      	mov	r4, r2
 80261be:	461d      	mov	r5, r3
 80261c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80261c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80261c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80261c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80261c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80261ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80261cc:	682b      	ldr	r3, [r5, #0]
 80261ce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80261d0:	687a      	ldr	r2, [r7, #4]
 80261d2:	68b9      	ldr	r1, [r7, #8]
 80261d4:	68f8      	ldr	r0, [r7, #12]
 80261d6:	f000 f8b9 	bl	802634c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80261da:	68fb      	ldr	r3, [r7, #12]
 80261dc:	681b      	ldr	r3, [r3, #0]
 80261de:	2201      	movs	r2, #1
 80261e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80261e2:	68fb      	ldr	r3, [r7, #12]
 80261e4:	2201      	movs	r2, #1
 80261e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80261ea:	68fb      	ldr	r3, [r7, #12]
 80261ec:	2200      	movs	r2, #0
 80261ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80261f2:	2300      	movs	r3, #0
}
 80261f4:	4618      	mov	r0, r3
 80261f6:	3710      	adds	r7, #16
 80261f8:	46bd      	mov	sp, r7
 80261fa:	bdb0      	pop	{r4, r5, r7, pc}

080261fc <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 80261fc:	b480      	push	{r7}
 80261fe:	b085      	sub	sp, #20
 8026200:	af00      	add	r7, sp, #0
 8026202:	60f8      	str	r0, [r7, #12]
 8026204:	60b9      	str	r1, [r7, #8]
 8026206:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026208:	68fb      	ldr	r3, [r7, #12]
 802620a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 802620e:	2b01      	cmp	r3, #1
 8026210:	d101      	bne.n	8026216 <HAL_LTDC_ConfigColorKeying+0x1a>
 8026212:	2302      	movs	r3, #2
 8026214:	e030      	b.n	8026278 <HAL_LTDC_ConfigColorKeying+0x7c>
 8026216:	68fb      	ldr	r3, [r7, #12]
 8026218:	2201      	movs	r2, #1
 802621a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 802621e:	68fb      	ldr	r3, [r7, #12]
 8026220:	2202      	movs	r2, #2
 8026222:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8026226:	68fb      	ldr	r3, [r7, #12]
 8026228:	681b      	ldr	r3, [r3, #0]
 802622a:	461a      	mov	r2, r3
 802622c:	687b      	ldr	r3, [r7, #4]
 802622e:	01db      	lsls	r3, r3, #7
 8026230:	4413      	add	r3, r2
 8026232:	3384      	adds	r3, #132	; 0x84
 8026234:	68db      	ldr	r3, [r3, #12]
 8026236:	68fa      	ldr	r2, [r7, #12]
 8026238:	6812      	ldr	r2, [r2, #0]
 802623a:	4611      	mov	r1, r2
 802623c:	687a      	ldr	r2, [r7, #4]
 802623e:	01d2      	lsls	r2, r2, #7
 8026240:	440a      	add	r2, r1
 8026242:	3284      	adds	r2, #132	; 0x84
 8026244:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8026248:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 802624a:	68fb      	ldr	r3, [r7, #12]
 802624c:	681b      	ldr	r3, [r3, #0]
 802624e:	461a      	mov	r2, r3
 8026250:	687b      	ldr	r3, [r7, #4]
 8026252:	01db      	lsls	r3, r3, #7
 8026254:	4413      	add	r3, r2
 8026256:	3384      	adds	r3, #132	; 0x84
 8026258:	461a      	mov	r2, r3
 802625a:	68bb      	ldr	r3, [r7, #8]
 802625c:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 802625e:	68fb      	ldr	r3, [r7, #12]
 8026260:	681b      	ldr	r3, [r3, #0]
 8026262:	2201      	movs	r2, #1
 8026264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026266:	68fb      	ldr	r3, [r7, #12]
 8026268:	2201      	movs	r2, #1
 802626a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 802626e:	68fb      	ldr	r3, [r7, #12]
 8026270:	2200      	movs	r2, #0
 8026272:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026276:	2300      	movs	r3, #0
}
 8026278:	4618      	mov	r0, r3
 802627a:	3714      	adds	r7, #20
 802627c:	46bd      	mov	sp, r7
 802627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026282:	4770      	bx	lr

08026284 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8026284:	b480      	push	{r7}
 8026286:	b083      	sub	sp, #12
 8026288:	af00      	add	r7, sp, #0
 802628a:	6078      	str	r0, [r7, #4]
 802628c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 802628e:	687b      	ldr	r3, [r7, #4]
 8026290:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026294:	2b01      	cmp	r3, #1
 8026296:	d101      	bne.n	802629c <HAL_LTDC_EnableColorKeying+0x18>
 8026298:	2302      	movs	r3, #2
 802629a:	e026      	b.n	80262ea <HAL_LTDC_EnableColorKeying+0x66>
 802629c:	687b      	ldr	r3, [r7, #4]
 802629e:	2201      	movs	r2, #1
 80262a0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80262a4:	687b      	ldr	r3, [r7, #4]
 80262a6:	2202      	movs	r2, #2
 80262a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80262ac:	687b      	ldr	r3, [r7, #4]
 80262ae:	681b      	ldr	r3, [r3, #0]
 80262b0:	461a      	mov	r2, r3
 80262b2:	683b      	ldr	r3, [r7, #0]
 80262b4:	01db      	lsls	r3, r3, #7
 80262b6:	4413      	add	r3, r2
 80262b8:	3384      	adds	r3, #132	; 0x84
 80262ba:	681b      	ldr	r3, [r3, #0]
 80262bc:	687a      	ldr	r2, [r7, #4]
 80262be:	6812      	ldr	r2, [r2, #0]
 80262c0:	4611      	mov	r1, r2
 80262c2:	683a      	ldr	r2, [r7, #0]
 80262c4:	01d2      	lsls	r2, r2, #7
 80262c6:	440a      	add	r2, r1
 80262c8:	3284      	adds	r2, #132	; 0x84
 80262ca:	f043 0302 	orr.w	r3, r3, #2
 80262ce:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80262d0:	687b      	ldr	r3, [r7, #4]
 80262d2:	681b      	ldr	r3, [r3, #0]
 80262d4:	2201      	movs	r2, #1
 80262d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80262d8:	687b      	ldr	r3, [r7, #4]
 80262da:	2201      	movs	r2, #1
 80262dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80262e0:	687b      	ldr	r3, [r7, #4]
 80262e2:	2200      	movs	r2, #0
 80262e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80262e8:	2300      	movs	r3, #0
}
 80262ea:	4618      	mov	r0, r3
 80262ec:	370c      	adds	r7, #12
 80262ee:	46bd      	mov	sp, r7
 80262f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262f4:	4770      	bx	lr
	...

080262f8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80262f8:	b480      	push	{r7}
 80262fa:	b083      	sub	sp, #12
 80262fc:	af00      	add	r7, sp, #0
 80262fe:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8026300:	687b      	ldr	r3, [r7, #4]
 8026302:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026306:	2b01      	cmp	r3, #1
 8026308:	d101      	bne.n	802630e <HAL_LTDC_EnableDither+0x16>
 802630a:	2302      	movs	r3, #2
 802630c:	e016      	b.n	802633c <HAL_LTDC_EnableDither+0x44>
 802630e:	687b      	ldr	r3, [r7, #4]
 8026310:	2201      	movs	r2, #1
 8026312:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026316:	687b      	ldr	r3, [r7, #4]
 8026318:	2202      	movs	r2, #2
 802631a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 802631e:	4b0a      	ldr	r3, [pc, #40]	; (8026348 <HAL_LTDC_EnableDither+0x50>)
 8026320:	699b      	ldr	r3, [r3, #24]
 8026322:	4a09      	ldr	r2, [pc, #36]	; (8026348 <HAL_LTDC_EnableDither+0x50>)
 8026324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026328:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 802632a:	687b      	ldr	r3, [r7, #4]
 802632c:	2201      	movs	r2, #1
 802632e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026332:	687b      	ldr	r3, [r7, #4]
 8026334:	2200      	movs	r2, #0
 8026336:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 802633a:	2300      	movs	r3, #0
}
 802633c:	4618      	mov	r0, r3
 802633e:	370c      	adds	r7, #12
 8026340:	46bd      	mov	sp, r7
 8026342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026346:	4770      	bx	lr
 8026348:	40016800 	.word	0x40016800

0802634c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 802634c:	b480      	push	{r7}
 802634e:	b089      	sub	sp, #36	; 0x24
 8026350:	af00      	add	r7, sp, #0
 8026352:	60f8      	str	r0, [r7, #12]
 8026354:	60b9      	str	r1, [r7, #8]
 8026356:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8026358:	68bb      	ldr	r3, [r7, #8]
 802635a:	685a      	ldr	r2, [r3, #4]
 802635c:	68fb      	ldr	r3, [r7, #12]
 802635e:	681b      	ldr	r3, [r3, #0]
 8026360:	68db      	ldr	r3, [r3, #12]
 8026362:	0c1b      	lsrs	r3, r3, #16
 8026364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026368:	4413      	add	r3, r2
 802636a:	041b      	lsls	r3, r3, #16
 802636c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 802636e:	68fb      	ldr	r3, [r7, #12]
 8026370:	681b      	ldr	r3, [r3, #0]
 8026372:	461a      	mov	r2, r3
 8026374:	687b      	ldr	r3, [r7, #4]
 8026376:	01db      	lsls	r3, r3, #7
 8026378:	4413      	add	r3, r2
 802637a:	3384      	adds	r3, #132	; 0x84
 802637c:	685b      	ldr	r3, [r3, #4]
 802637e:	68fa      	ldr	r2, [r7, #12]
 8026380:	6812      	ldr	r2, [r2, #0]
 8026382:	4611      	mov	r1, r2
 8026384:	687a      	ldr	r2, [r7, #4]
 8026386:	01d2      	lsls	r2, r2, #7
 8026388:	440a      	add	r2, r1
 802638a:	3284      	adds	r2, #132	; 0x84
 802638c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8026390:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8026392:	68bb      	ldr	r3, [r7, #8]
 8026394:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8026396:	68fb      	ldr	r3, [r7, #12]
 8026398:	681b      	ldr	r3, [r3, #0]
 802639a:	68db      	ldr	r3, [r3, #12]
 802639c:	0c1b      	lsrs	r3, r3, #16
 802639e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80263a2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80263a4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80263a6:	68fb      	ldr	r3, [r7, #12]
 80263a8:	681b      	ldr	r3, [r3, #0]
 80263aa:	4619      	mov	r1, r3
 80263ac:	687b      	ldr	r3, [r7, #4]
 80263ae:	01db      	lsls	r3, r3, #7
 80263b0:	440b      	add	r3, r1
 80263b2:	3384      	adds	r3, #132	; 0x84
 80263b4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80263b6:	69fb      	ldr	r3, [r7, #28]
 80263b8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80263ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80263bc:	68bb      	ldr	r3, [r7, #8]
 80263be:	68da      	ldr	r2, [r3, #12]
 80263c0:	68fb      	ldr	r3, [r7, #12]
 80263c2:	681b      	ldr	r3, [r3, #0]
 80263c4:	68db      	ldr	r3, [r3, #12]
 80263c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80263ca:	4413      	add	r3, r2
 80263cc:	041b      	lsls	r3, r3, #16
 80263ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80263d0:	68fb      	ldr	r3, [r7, #12]
 80263d2:	681b      	ldr	r3, [r3, #0]
 80263d4:	461a      	mov	r2, r3
 80263d6:	687b      	ldr	r3, [r7, #4]
 80263d8:	01db      	lsls	r3, r3, #7
 80263da:	4413      	add	r3, r2
 80263dc:	3384      	adds	r3, #132	; 0x84
 80263de:	689b      	ldr	r3, [r3, #8]
 80263e0:	68fa      	ldr	r2, [r7, #12]
 80263e2:	6812      	ldr	r2, [r2, #0]
 80263e4:	4611      	mov	r1, r2
 80263e6:	687a      	ldr	r2, [r7, #4]
 80263e8:	01d2      	lsls	r2, r2, #7
 80263ea:	440a      	add	r2, r1
 80263ec:	3284      	adds	r2, #132	; 0x84
 80263ee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80263f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80263f4:	68bb      	ldr	r3, [r7, #8]
 80263f6:	689a      	ldr	r2, [r3, #8]
 80263f8:	68fb      	ldr	r3, [r7, #12]
 80263fa:	681b      	ldr	r3, [r3, #0]
 80263fc:	68db      	ldr	r3, [r3, #12]
 80263fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026402:	4413      	add	r3, r2
 8026404:	1c5a      	adds	r2, r3, #1
 8026406:	68fb      	ldr	r3, [r7, #12]
 8026408:	681b      	ldr	r3, [r3, #0]
 802640a:	4619      	mov	r1, r3
 802640c:	687b      	ldr	r3, [r7, #4]
 802640e:	01db      	lsls	r3, r3, #7
 8026410:	440b      	add	r3, r1
 8026412:	3384      	adds	r3, #132	; 0x84
 8026414:	4619      	mov	r1, r3
 8026416:	69fb      	ldr	r3, [r7, #28]
 8026418:	4313      	orrs	r3, r2
 802641a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 802641c:	68fb      	ldr	r3, [r7, #12]
 802641e:	681b      	ldr	r3, [r3, #0]
 8026420:	461a      	mov	r2, r3
 8026422:	687b      	ldr	r3, [r7, #4]
 8026424:	01db      	lsls	r3, r3, #7
 8026426:	4413      	add	r3, r2
 8026428:	3384      	adds	r3, #132	; 0x84
 802642a:	691b      	ldr	r3, [r3, #16]
 802642c:	68fa      	ldr	r2, [r7, #12]
 802642e:	6812      	ldr	r2, [r2, #0]
 8026430:	4611      	mov	r1, r2
 8026432:	687a      	ldr	r2, [r7, #4]
 8026434:	01d2      	lsls	r2, r2, #7
 8026436:	440a      	add	r2, r1
 8026438:	3284      	adds	r2, #132	; 0x84
 802643a:	f023 0307 	bic.w	r3, r3, #7
 802643e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8026440:	68fb      	ldr	r3, [r7, #12]
 8026442:	681b      	ldr	r3, [r3, #0]
 8026444:	461a      	mov	r2, r3
 8026446:	687b      	ldr	r3, [r7, #4]
 8026448:	01db      	lsls	r3, r3, #7
 802644a:	4413      	add	r3, r2
 802644c:	3384      	adds	r3, #132	; 0x84
 802644e:	461a      	mov	r2, r3
 8026450:	68bb      	ldr	r3, [r7, #8]
 8026452:	691b      	ldr	r3, [r3, #16]
 8026454:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8026456:	68bb      	ldr	r3, [r7, #8]
 8026458:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802645c:	021b      	lsls	r3, r3, #8
 802645e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8026460:	68bb      	ldr	r3, [r7, #8]
 8026462:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8026466:	041b      	lsls	r3, r3, #16
 8026468:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 802646a:	68bb      	ldr	r3, [r7, #8]
 802646c:	699b      	ldr	r3, [r3, #24]
 802646e:	061b      	lsls	r3, r3, #24
 8026470:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8026472:	68fb      	ldr	r3, [r7, #12]
 8026474:	681b      	ldr	r3, [r3, #0]
 8026476:	461a      	mov	r2, r3
 8026478:	687b      	ldr	r3, [r7, #4]
 802647a:	01db      	lsls	r3, r3, #7
 802647c:	4413      	add	r3, r2
 802647e:	3384      	adds	r3, #132	; 0x84
 8026480:	699b      	ldr	r3, [r3, #24]
 8026482:	68fb      	ldr	r3, [r7, #12]
 8026484:	681b      	ldr	r3, [r3, #0]
 8026486:	461a      	mov	r2, r3
 8026488:	687b      	ldr	r3, [r7, #4]
 802648a:	01db      	lsls	r3, r3, #7
 802648c:	4413      	add	r3, r2
 802648e:	3384      	adds	r3, #132	; 0x84
 8026490:	461a      	mov	r2, r3
 8026492:	2300      	movs	r3, #0
 8026494:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8026496:	68bb      	ldr	r3, [r7, #8]
 8026498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802649c:	461a      	mov	r2, r3
 802649e:	69fb      	ldr	r3, [r7, #28]
 80264a0:	431a      	orrs	r2, r3
 80264a2:	69bb      	ldr	r3, [r7, #24]
 80264a4:	431a      	orrs	r2, r3
 80264a6:	68fb      	ldr	r3, [r7, #12]
 80264a8:	681b      	ldr	r3, [r3, #0]
 80264aa:	4619      	mov	r1, r3
 80264ac:	687b      	ldr	r3, [r7, #4]
 80264ae:	01db      	lsls	r3, r3, #7
 80264b0:	440b      	add	r3, r1
 80264b2:	3384      	adds	r3, #132	; 0x84
 80264b4:	4619      	mov	r1, r3
 80264b6:	697b      	ldr	r3, [r7, #20]
 80264b8:	4313      	orrs	r3, r2
 80264ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80264bc:	68fb      	ldr	r3, [r7, #12]
 80264be:	681b      	ldr	r3, [r3, #0]
 80264c0:	461a      	mov	r2, r3
 80264c2:	687b      	ldr	r3, [r7, #4]
 80264c4:	01db      	lsls	r3, r3, #7
 80264c6:	4413      	add	r3, r2
 80264c8:	3384      	adds	r3, #132	; 0x84
 80264ca:	695b      	ldr	r3, [r3, #20]
 80264cc:	68fa      	ldr	r2, [r7, #12]
 80264ce:	6812      	ldr	r2, [r2, #0]
 80264d0:	4611      	mov	r1, r2
 80264d2:	687a      	ldr	r2, [r7, #4]
 80264d4:	01d2      	lsls	r2, r2, #7
 80264d6:	440a      	add	r2, r1
 80264d8:	3284      	adds	r2, #132	; 0x84
 80264da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80264de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80264e0:	68fb      	ldr	r3, [r7, #12]
 80264e2:	681b      	ldr	r3, [r3, #0]
 80264e4:	461a      	mov	r2, r3
 80264e6:	687b      	ldr	r3, [r7, #4]
 80264e8:	01db      	lsls	r3, r3, #7
 80264ea:	4413      	add	r3, r2
 80264ec:	3384      	adds	r3, #132	; 0x84
 80264ee:	461a      	mov	r2, r3
 80264f0:	68bb      	ldr	r3, [r7, #8]
 80264f2:	695b      	ldr	r3, [r3, #20]
 80264f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80264f6:	68fb      	ldr	r3, [r7, #12]
 80264f8:	681b      	ldr	r3, [r3, #0]
 80264fa:	461a      	mov	r2, r3
 80264fc:	687b      	ldr	r3, [r7, #4]
 80264fe:	01db      	lsls	r3, r3, #7
 8026500:	4413      	add	r3, r2
 8026502:	3384      	adds	r3, #132	; 0x84
 8026504:	69db      	ldr	r3, [r3, #28]
 8026506:	68fa      	ldr	r2, [r7, #12]
 8026508:	6812      	ldr	r2, [r2, #0]
 802650a:	4611      	mov	r1, r2
 802650c:	687a      	ldr	r2, [r7, #4]
 802650e:	01d2      	lsls	r2, r2, #7
 8026510:	440a      	add	r2, r1
 8026512:	3284      	adds	r2, #132	; 0x84
 8026514:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8026518:	f023 0307 	bic.w	r3, r3, #7
 802651c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 802651e:	68bb      	ldr	r3, [r7, #8]
 8026520:	69da      	ldr	r2, [r3, #28]
 8026522:	68bb      	ldr	r3, [r7, #8]
 8026524:	6a1b      	ldr	r3, [r3, #32]
 8026526:	68f9      	ldr	r1, [r7, #12]
 8026528:	6809      	ldr	r1, [r1, #0]
 802652a:	4608      	mov	r0, r1
 802652c:	6879      	ldr	r1, [r7, #4]
 802652e:	01c9      	lsls	r1, r1, #7
 8026530:	4401      	add	r1, r0
 8026532:	3184      	adds	r1, #132	; 0x84
 8026534:	4313      	orrs	r3, r2
 8026536:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8026538:	68fb      	ldr	r3, [r7, #12]
 802653a:	681b      	ldr	r3, [r3, #0]
 802653c:	461a      	mov	r2, r3
 802653e:	687b      	ldr	r3, [r7, #4]
 8026540:	01db      	lsls	r3, r3, #7
 8026542:	4413      	add	r3, r2
 8026544:	3384      	adds	r3, #132	; 0x84
 8026546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026548:	68fb      	ldr	r3, [r7, #12]
 802654a:	681b      	ldr	r3, [r3, #0]
 802654c:	461a      	mov	r2, r3
 802654e:	687b      	ldr	r3, [r7, #4]
 8026550:	01db      	lsls	r3, r3, #7
 8026552:	4413      	add	r3, r2
 8026554:	3384      	adds	r3, #132	; 0x84
 8026556:	461a      	mov	r2, r3
 8026558:	2300      	movs	r3, #0
 802655a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 802655c:	68fb      	ldr	r3, [r7, #12]
 802655e:	681b      	ldr	r3, [r3, #0]
 8026560:	461a      	mov	r2, r3
 8026562:	687b      	ldr	r3, [r7, #4]
 8026564:	01db      	lsls	r3, r3, #7
 8026566:	4413      	add	r3, r2
 8026568:	3384      	adds	r3, #132	; 0x84
 802656a:	461a      	mov	r2, r3
 802656c:	68bb      	ldr	r3, [r7, #8]
 802656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026570:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8026572:	68bb      	ldr	r3, [r7, #8]
 8026574:	691b      	ldr	r3, [r3, #16]
 8026576:	2b00      	cmp	r3, #0
 8026578:	d102      	bne.n	8026580 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 802657a:	2304      	movs	r3, #4
 802657c:	61fb      	str	r3, [r7, #28]
 802657e:	e01b      	b.n	80265b8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8026580:	68bb      	ldr	r3, [r7, #8]
 8026582:	691b      	ldr	r3, [r3, #16]
 8026584:	2b01      	cmp	r3, #1
 8026586:	d102      	bne.n	802658e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8026588:	2303      	movs	r3, #3
 802658a:	61fb      	str	r3, [r7, #28]
 802658c:	e014      	b.n	80265b8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 802658e:	68bb      	ldr	r3, [r7, #8]
 8026590:	691b      	ldr	r3, [r3, #16]
 8026592:	2b04      	cmp	r3, #4
 8026594:	d00b      	beq.n	80265ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8026596:	68bb      	ldr	r3, [r7, #8]
 8026598:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 802659a:	2b02      	cmp	r3, #2
 802659c:	d007      	beq.n	80265ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 802659e:	68bb      	ldr	r3, [r7, #8]
 80265a0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80265a2:	2b03      	cmp	r3, #3
 80265a4:	d003      	beq.n	80265ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80265a6:	68bb      	ldr	r3, [r7, #8]
 80265a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80265aa:	2b07      	cmp	r3, #7
 80265ac:	d102      	bne.n	80265b4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80265ae:	2302      	movs	r3, #2
 80265b0:	61fb      	str	r3, [r7, #28]
 80265b2:	e001      	b.n	80265b8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80265b4:	2301      	movs	r3, #1
 80265b6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80265b8:	68fb      	ldr	r3, [r7, #12]
 80265ba:	681b      	ldr	r3, [r3, #0]
 80265bc:	461a      	mov	r2, r3
 80265be:	687b      	ldr	r3, [r7, #4]
 80265c0:	01db      	lsls	r3, r3, #7
 80265c2:	4413      	add	r3, r2
 80265c4:	3384      	adds	r3, #132	; 0x84
 80265c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80265c8:	68fa      	ldr	r2, [r7, #12]
 80265ca:	6812      	ldr	r2, [r2, #0]
 80265cc:	4611      	mov	r1, r2
 80265ce:	687a      	ldr	r2, [r7, #4]
 80265d0:	01d2      	lsls	r2, r2, #7
 80265d2:	440a      	add	r2, r1
 80265d4:	3284      	adds	r2, #132	; 0x84
 80265d6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80265da:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80265dc:	68bb      	ldr	r3, [r7, #8]
 80265de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80265e0:	69fa      	ldr	r2, [r7, #28]
 80265e2:	fb02 f303 	mul.w	r3, r2, r3
 80265e6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80265e8:	68bb      	ldr	r3, [r7, #8]
 80265ea:	6859      	ldr	r1, [r3, #4]
 80265ec:	68bb      	ldr	r3, [r7, #8]
 80265ee:	681b      	ldr	r3, [r3, #0]
 80265f0:	1acb      	subs	r3, r1, r3
 80265f2:	69f9      	ldr	r1, [r7, #28]
 80265f4:	fb01 f303 	mul.w	r3, r1, r3
 80265f8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80265fa:	68f9      	ldr	r1, [r7, #12]
 80265fc:	6809      	ldr	r1, [r1, #0]
 80265fe:	4608      	mov	r0, r1
 8026600:	6879      	ldr	r1, [r7, #4]
 8026602:	01c9      	lsls	r1, r1, #7
 8026604:	4401      	add	r1, r0
 8026606:	3184      	adds	r1, #132	; 0x84
 8026608:	4313      	orrs	r3, r2
 802660a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 802660c:	68fb      	ldr	r3, [r7, #12]
 802660e:	681b      	ldr	r3, [r3, #0]
 8026610:	461a      	mov	r2, r3
 8026612:	687b      	ldr	r3, [r7, #4]
 8026614:	01db      	lsls	r3, r3, #7
 8026616:	4413      	add	r3, r2
 8026618:	3384      	adds	r3, #132	; 0x84
 802661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802661c:	68fa      	ldr	r2, [r7, #12]
 802661e:	6812      	ldr	r2, [r2, #0]
 8026620:	4611      	mov	r1, r2
 8026622:	687a      	ldr	r2, [r7, #4]
 8026624:	01d2      	lsls	r2, r2, #7
 8026626:	440a      	add	r2, r1
 8026628:	3284      	adds	r2, #132	; 0x84
 802662a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802662e:	f023 0307 	bic.w	r3, r3, #7
 8026632:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8026634:	68fb      	ldr	r3, [r7, #12]
 8026636:	681b      	ldr	r3, [r3, #0]
 8026638:	461a      	mov	r2, r3
 802663a:	687b      	ldr	r3, [r7, #4]
 802663c:	01db      	lsls	r3, r3, #7
 802663e:	4413      	add	r3, r2
 8026640:	3384      	adds	r3, #132	; 0x84
 8026642:	461a      	mov	r2, r3
 8026644:	68bb      	ldr	r3, [r7, #8]
 8026646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026648:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 802664a:	68fb      	ldr	r3, [r7, #12]
 802664c:	681b      	ldr	r3, [r3, #0]
 802664e:	461a      	mov	r2, r3
 8026650:	687b      	ldr	r3, [r7, #4]
 8026652:	01db      	lsls	r3, r3, #7
 8026654:	4413      	add	r3, r2
 8026656:	3384      	adds	r3, #132	; 0x84
 8026658:	681b      	ldr	r3, [r3, #0]
 802665a:	68fa      	ldr	r2, [r7, #12]
 802665c:	6812      	ldr	r2, [r2, #0]
 802665e:	4611      	mov	r1, r2
 8026660:	687a      	ldr	r2, [r7, #4]
 8026662:	01d2      	lsls	r2, r2, #7
 8026664:	440a      	add	r2, r1
 8026666:	3284      	adds	r2, #132	; 0x84
 8026668:	f043 0301 	orr.w	r3, r3, #1
 802666c:	6013      	str	r3, [r2, #0]
}
 802666e:	bf00      	nop
 8026670:	3724      	adds	r7, #36	; 0x24
 8026672:	46bd      	mov	sp, r7
 8026674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026678:	4770      	bx	lr
	...

0802667c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802667c:	b580      	push	{r7, lr}
 802667e:	b086      	sub	sp, #24
 8026680:	af00      	add	r7, sp, #0
 8026682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8026684:	687b      	ldr	r3, [r7, #4]
 8026686:	2b00      	cmp	r3, #0
 8026688:	d101      	bne.n	802668e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802668a:	2301      	movs	r3, #1
 802668c:	e267      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802668e:	687b      	ldr	r3, [r7, #4]
 8026690:	681b      	ldr	r3, [r3, #0]
 8026692:	f003 0301 	and.w	r3, r3, #1
 8026696:	2b00      	cmp	r3, #0
 8026698:	d075      	beq.n	8026786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802669a:	4b88      	ldr	r3, [pc, #544]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 802669c:	689b      	ldr	r3, [r3, #8]
 802669e:	f003 030c 	and.w	r3, r3, #12
 80266a2:	2b04      	cmp	r3, #4
 80266a4:	d00c      	beq.n	80266c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80266a6:	4b85      	ldr	r3, [pc, #532]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 80266a8:	689b      	ldr	r3, [r3, #8]
 80266aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80266ae:	2b08      	cmp	r3, #8
 80266b0:	d112      	bne.n	80266d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80266b2:	4b82      	ldr	r3, [pc, #520]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 80266b4:	685b      	ldr	r3, [r3, #4]
 80266b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80266ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80266be:	d10b      	bne.n	80266d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80266c0:	4b7e      	ldr	r3, [pc, #504]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 80266c2:	681b      	ldr	r3, [r3, #0]
 80266c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80266c8:	2b00      	cmp	r3, #0
 80266ca:	d05b      	beq.n	8026784 <HAL_RCC_OscConfig+0x108>
 80266cc:	687b      	ldr	r3, [r7, #4]
 80266ce:	685b      	ldr	r3, [r3, #4]
 80266d0:	2b00      	cmp	r3, #0
 80266d2:	d157      	bne.n	8026784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80266d4:	2301      	movs	r3, #1
 80266d6:	e242      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80266d8:	687b      	ldr	r3, [r7, #4]
 80266da:	685b      	ldr	r3, [r3, #4]
 80266dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80266e0:	d106      	bne.n	80266f0 <HAL_RCC_OscConfig+0x74>
 80266e2:	4b76      	ldr	r3, [pc, #472]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 80266e4:	681b      	ldr	r3, [r3, #0]
 80266e6:	4a75      	ldr	r2, [pc, #468]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 80266e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80266ec:	6013      	str	r3, [r2, #0]
 80266ee:	e01d      	b.n	802672c <HAL_RCC_OscConfig+0xb0>
 80266f0:	687b      	ldr	r3, [r7, #4]
 80266f2:	685b      	ldr	r3, [r3, #4]
 80266f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80266f8:	d10c      	bne.n	8026714 <HAL_RCC_OscConfig+0x98>
 80266fa:	4b70      	ldr	r3, [pc, #448]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 80266fc:	681b      	ldr	r3, [r3, #0]
 80266fe:	4a6f      	ldr	r2, [pc, #444]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 8026700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8026704:	6013      	str	r3, [r2, #0]
 8026706:	4b6d      	ldr	r3, [pc, #436]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 8026708:	681b      	ldr	r3, [r3, #0]
 802670a:	4a6c      	ldr	r2, [pc, #432]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 802670c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026710:	6013      	str	r3, [r2, #0]
 8026712:	e00b      	b.n	802672c <HAL_RCC_OscConfig+0xb0>
 8026714:	4b69      	ldr	r3, [pc, #420]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 8026716:	681b      	ldr	r3, [r3, #0]
 8026718:	4a68      	ldr	r2, [pc, #416]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 802671a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802671e:	6013      	str	r3, [r2, #0]
 8026720:	4b66      	ldr	r3, [pc, #408]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 8026722:	681b      	ldr	r3, [r3, #0]
 8026724:	4a65      	ldr	r2, [pc, #404]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 8026726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802672a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802672c:	687b      	ldr	r3, [r7, #4]
 802672e:	685b      	ldr	r3, [r3, #4]
 8026730:	2b00      	cmp	r3, #0
 8026732:	d013      	beq.n	802675c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026734:	f7fc fbc4 	bl	8022ec0 <HAL_GetTick>
 8026738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802673a:	e008      	b.n	802674e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802673c:	f7fc fbc0 	bl	8022ec0 <HAL_GetTick>
 8026740:	4602      	mov	r2, r0
 8026742:	693b      	ldr	r3, [r7, #16]
 8026744:	1ad3      	subs	r3, r2, r3
 8026746:	2b64      	cmp	r3, #100	; 0x64
 8026748:	d901      	bls.n	802674e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802674a:	2303      	movs	r3, #3
 802674c:	e207      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802674e:	4b5b      	ldr	r3, [pc, #364]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 8026750:	681b      	ldr	r3, [r3, #0]
 8026752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026756:	2b00      	cmp	r3, #0
 8026758:	d0f0      	beq.n	802673c <HAL_RCC_OscConfig+0xc0>
 802675a:	e014      	b.n	8026786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802675c:	f7fc fbb0 	bl	8022ec0 <HAL_GetTick>
 8026760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026762:	e008      	b.n	8026776 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026764:	f7fc fbac 	bl	8022ec0 <HAL_GetTick>
 8026768:	4602      	mov	r2, r0
 802676a:	693b      	ldr	r3, [r7, #16]
 802676c:	1ad3      	subs	r3, r2, r3
 802676e:	2b64      	cmp	r3, #100	; 0x64
 8026770:	d901      	bls.n	8026776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8026772:	2303      	movs	r3, #3
 8026774:	e1f3      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026776:	4b51      	ldr	r3, [pc, #324]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 8026778:	681b      	ldr	r3, [r3, #0]
 802677a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802677e:	2b00      	cmp	r3, #0
 8026780:	d1f0      	bne.n	8026764 <HAL_RCC_OscConfig+0xe8>
 8026782:	e000      	b.n	8026786 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8026786:	687b      	ldr	r3, [r7, #4]
 8026788:	681b      	ldr	r3, [r3, #0]
 802678a:	f003 0302 	and.w	r3, r3, #2
 802678e:	2b00      	cmp	r3, #0
 8026790:	d063      	beq.n	802685a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8026792:	4b4a      	ldr	r3, [pc, #296]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 8026794:	689b      	ldr	r3, [r3, #8]
 8026796:	f003 030c 	and.w	r3, r3, #12
 802679a:	2b00      	cmp	r3, #0
 802679c:	d00b      	beq.n	80267b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802679e:	4b47      	ldr	r3, [pc, #284]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 80267a0:	689b      	ldr	r3, [r3, #8]
 80267a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80267a6:	2b08      	cmp	r3, #8
 80267a8:	d11c      	bne.n	80267e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80267aa:	4b44      	ldr	r3, [pc, #272]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 80267ac:	685b      	ldr	r3, [r3, #4]
 80267ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80267b2:	2b00      	cmp	r3, #0
 80267b4:	d116      	bne.n	80267e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80267b6:	4b41      	ldr	r3, [pc, #260]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 80267b8:	681b      	ldr	r3, [r3, #0]
 80267ba:	f003 0302 	and.w	r3, r3, #2
 80267be:	2b00      	cmp	r3, #0
 80267c0:	d005      	beq.n	80267ce <HAL_RCC_OscConfig+0x152>
 80267c2:	687b      	ldr	r3, [r7, #4]
 80267c4:	68db      	ldr	r3, [r3, #12]
 80267c6:	2b01      	cmp	r3, #1
 80267c8:	d001      	beq.n	80267ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80267ca:	2301      	movs	r3, #1
 80267cc:	e1c7      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80267ce:	4b3b      	ldr	r3, [pc, #236]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 80267d0:	681b      	ldr	r3, [r3, #0]
 80267d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80267d6:	687b      	ldr	r3, [r7, #4]
 80267d8:	691b      	ldr	r3, [r3, #16]
 80267da:	00db      	lsls	r3, r3, #3
 80267dc:	4937      	ldr	r1, [pc, #220]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 80267de:	4313      	orrs	r3, r2
 80267e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80267e2:	e03a      	b.n	802685a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80267e4:	687b      	ldr	r3, [r7, #4]
 80267e6:	68db      	ldr	r3, [r3, #12]
 80267e8:	2b00      	cmp	r3, #0
 80267ea:	d020      	beq.n	802682e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80267ec:	4b34      	ldr	r3, [pc, #208]	; (80268c0 <HAL_RCC_OscConfig+0x244>)
 80267ee:	2201      	movs	r2, #1
 80267f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80267f2:	f7fc fb65 	bl	8022ec0 <HAL_GetTick>
 80267f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80267f8:	e008      	b.n	802680c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80267fa:	f7fc fb61 	bl	8022ec0 <HAL_GetTick>
 80267fe:	4602      	mov	r2, r0
 8026800:	693b      	ldr	r3, [r7, #16]
 8026802:	1ad3      	subs	r3, r2, r3
 8026804:	2b02      	cmp	r3, #2
 8026806:	d901      	bls.n	802680c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8026808:	2303      	movs	r3, #3
 802680a:	e1a8      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802680c:	4b2b      	ldr	r3, [pc, #172]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 802680e:	681b      	ldr	r3, [r3, #0]
 8026810:	f003 0302 	and.w	r3, r3, #2
 8026814:	2b00      	cmp	r3, #0
 8026816:	d0f0      	beq.n	80267fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026818:	4b28      	ldr	r3, [pc, #160]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 802681a:	681b      	ldr	r3, [r3, #0]
 802681c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026820:	687b      	ldr	r3, [r7, #4]
 8026822:	691b      	ldr	r3, [r3, #16]
 8026824:	00db      	lsls	r3, r3, #3
 8026826:	4925      	ldr	r1, [pc, #148]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 8026828:	4313      	orrs	r3, r2
 802682a:	600b      	str	r3, [r1, #0]
 802682c:	e015      	b.n	802685a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802682e:	4b24      	ldr	r3, [pc, #144]	; (80268c0 <HAL_RCC_OscConfig+0x244>)
 8026830:	2200      	movs	r2, #0
 8026832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026834:	f7fc fb44 	bl	8022ec0 <HAL_GetTick>
 8026838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802683a:	e008      	b.n	802684e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802683c:	f7fc fb40 	bl	8022ec0 <HAL_GetTick>
 8026840:	4602      	mov	r2, r0
 8026842:	693b      	ldr	r3, [r7, #16]
 8026844:	1ad3      	subs	r3, r2, r3
 8026846:	2b02      	cmp	r3, #2
 8026848:	d901      	bls.n	802684e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802684a:	2303      	movs	r3, #3
 802684c:	e187      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802684e:	4b1b      	ldr	r3, [pc, #108]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 8026850:	681b      	ldr	r3, [r3, #0]
 8026852:	f003 0302 	and.w	r3, r3, #2
 8026856:	2b00      	cmp	r3, #0
 8026858:	d1f0      	bne.n	802683c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802685a:	687b      	ldr	r3, [r7, #4]
 802685c:	681b      	ldr	r3, [r3, #0]
 802685e:	f003 0308 	and.w	r3, r3, #8
 8026862:	2b00      	cmp	r3, #0
 8026864:	d036      	beq.n	80268d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8026866:	687b      	ldr	r3, [r7, #4]
 8026868:	695b      	ldr	r3, [r3, #20]
 802686a:	2b00      	cmp	r3, #0
 802686c:	d016      	beq.n	802689c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802686e:	4b15      	ldr	r3, [pc, #84]	; (80268c4 <HAL_RCC_OscConfig+0x248>)
 8026870:	2201      	movs	r2, #1
 8026872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026874:	f7fc fb24 	bl	8022ec0 <HAL_GetTick>
 8026878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802687a:	e008      	b.n	802688e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802687c:	f7fc fb20 	bl	8022ec0 <HAL_GetTick>
 8026880:	4602      	mov	r2, r0
 8026882:	693b      	ldr	r3, [r7, #16]
 8026884:	1ad3      	subs	r3, r2, r3
 8026886:	2b02      	cmp	r3, #2
 8026888:	d901      	bls.n	802688e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802688a:	2303      	movs	r3, #3
 802688c:	e167      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802688e:	4b0b      	ldr	r3, [pc, #44]	; (80268bc <HAL_RCC_OscConfig+0x240>)
 8026890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026892:	f003 0302 	and.w	r3, r3, #2
 8026896:	2b00      	cmp	r3, #0
 8026898:	d0f0      	beq.n	802687c <HAL_RCC_OscConfig+0x200>
 802689a:	e01b      	b.n	80268d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802689c:	4b09      	ldr	r3, [pc, #36]	; (80268c4 <HAL_RCC_OscConfig+0x248>)
 802689e:	2200      	movs	r2, #0
 80268a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80268a2:	f7fc fb0d 	bl	8022ec0 <HAL_GetTick>
 80268a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80268a8:	e00e      	b.n	80268c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80268aa:	f7fc fb09 	bl	8022ec0 <HAL_GetTick>
 80268ae:	4602      	mov	r2, r0
 80268b0:	693b      	ldr	r3, [r7, #16]
 80268b2:	1ad3      	subs	r3, r2, r3
 80268b4:	2b02      	cmp	r3, #2
 80268b6:	d907      	bls.n	80268c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80268b8:	2303      	movs	r3, #3
 80268ba:	e150      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
 80268bc:	40023800 	.word	0x40023800
 80268c0:	42470000 	.word	0x42470000
 80268c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80268c8:	4b88      	ldr	r3, [pc, #544]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 80268ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80268cc:	f003 0302 	and.w	r3, r3, #2
 80268d0:	2b00      	cmp	r3, #0
 80268d2:	d1ea      	bne.n	80268aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80268d4:	687b      	ldr	r3, [r7, #4]
 80268d6:	681b      	ldr	r3, [r3, #0]
 80268d8:	f003 0304 	and.w	r3, r3, #4
 80268dc:	2b00      	cmp	r3, #0
 80268de:	f000 8097 	beq.w	8026a10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80268e2:	2300      	movs	r3, #0
 80268e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80268e6:	4b81      	ldr	r3, [pc, #516]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 80268e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80268ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80268ee:	2b00      	cmp	r3, #0
 80268f0:	d10f      	bne.n	8026912 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80268f2:	2300      	movs	r3, #0
 80268f4:	60bb      	str	r3, [r7, #8]
 80268f6:	4b7d      	ldr	r3, [pc, #500]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 80268f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80268fa:	4a7c      	ldr	r2, [pc, #496]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 80268fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8026900:	6413      	str	r3, [r2, #64]	; 0x40
 8026902:	4b7a      	ldr	r3, [pc, #488]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 8026904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802690a:	60bb      	str	r3, [r7, #8]
 802690c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802690e:	2301      	movs	r3, #1
 8026910:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026912:	4b77      	ldr	r3, [pc, #476]	; (8026af0 <HAL_RCC_OscConfig+0x474>)
 8026914:	681b      	ldr	r3, [r3, #0]
 8026916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802691a:	2b00      	cmp	r3, #0
 802691c:	d118      	bne.n	8026950 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802691e:	4b74      	ldr	r3, [pc, #464]	; (8026af0 <HAL_RCC_OscConfig+0x474>)
 8026920:	681b      	ldr	r3, [r3, #0]
 8026922:	4a73      	ldr	r2, [pc, #460]	; (8026af0 <HAL_RCC_OscConfig+0x474>)
 8026924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802692a:	f7fc fac9 	bl	8022ec0 <HAL_GetTick>
 802692e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026930:	e008      	b.n	8026944 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8026932:	f7fc fac5 	bl	8022ec0 <HAL_GetTick>
 8026936:	4602      	mov	r2, r0
 8026938:	693b      	ldr	r3, [r7, #16]
 802693a:	1ad3      	subs	r3, r2, r3
 802693c:	2b02      	cmp	r3, #2
 802693e:	d901      	bls.n	8026944 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8026940:	2303      	movs	r3, #3
 8026942:	e10c      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026944:	4b6a      	ldr	r3, [pc, #424]	; (8026af0 <HAL_RCC_OscConfig+0x474>)
 8026946:	681b      	ldr	r3, [r3, #0]
 8026948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802694c:	2b00      	cmp	r3, #0
 802694e:	d0f0      	beq.n	8026932 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8026950:	687b      	ldr	r3, [r7, #4]
 8026952:	689b      	ldr	r3, [r3, #8]
 8026954:	2b01      	cmp	r3, #1
 8026956:	d106      	bne.n	8026966 <HAL_RCC_OscConfig+0x2ea>
 8026958:	4b64      	ldr	r3, [pc, #400]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 802695a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802695c:	4a63      	ldr	r2, [pc, #396]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 802695e:	f043 0301 	orr.w	r3, r3, #1
 8026962:	6713      	str	r3, [r2, #112]	; 0x70
 8026964:	e01c      	b.n	80269a0 <HAL_RCC_OscConfig+0x324>
 8026966:	687b      	ldr	r3, [r7, #4]
 8026968:	689b      	ldr	r3, [r3, #8]
 802696a:	2b05      	cmp	r3, #5
 802696c:	d10c      	bne.n	8026988 <HAL_RCC_OscConfig+0x30c>
 802696e:	4b5f      	ldr	r3, [pc, #380]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 8026970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026972:	4a5e      	ldr	r2, [pc, #376]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 8026974:	f043 0304 	orr.w	r3, r3, #4
 8026978:	6713      	str	r3, [r2, #112]	; 0x70
 802697a:	4b5c      	ldr	r3, [pc, #368]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 802697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802697e:	4a5b      	ldr	r2, [pc, #364]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 8026980:	f043 0301 	orr.w	r3, r3, #1
 8026984:	6713      	str	r3, [r2, #112]	; 0x70
 8026986:	e00b      	b.n	80269a0 <HAL_RCC_OscConfig+0x324>
 8026988:	4b58      	ldr	r3, [pc, #352]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 802698a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802698c:	4a57      	ldr	r2, [pc, #348]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 802698e:	f023 0301 	bic.w	r3, r3, #1
 8026992:	6713      	str	r3, [r2, #112]	; 0x70
 8026994:	4b55      	ldr	r3, [pc, #340]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 8026996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026998:	4a54      	ldr	r2, [pc, #336]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 802699a:	f023 0304 	bic.w	r3, r3, #4
 802699e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80269a0:	687b      	ldr	r3, [r7, #4]
 80269a2:	689b      	ldr	r3, [r3, #8]
 80269a4:	2b00      	cmp	r3, #0
 80269a6:	d015      	beq.n	80269d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80269a8:	f7fc fa8a 	bl	8022ec0 <HAL_GetTick>
 80269ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80269ae:	e00a      	b.n	80269c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80269b0:	f7fc fa86 	bl	8022ec0 <HAL_GetTick>
 80269b4:	4602      	mov	r2, r0
 80269b6:	693b      	ldr	r3, [r7, #16]
 80269b8:	1ad3      	subs	r3, r2, r3
 80269ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80269be:	4293      	cmp	r3, r2
 80269c0:	d901      	bls.n	80269c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80269c2:	2303      	movs	r3, #3
 80269c4:	e0cb      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80269c6:	4b49      	ldr	r3, [pc, #292]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 80269c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80269ca:	f003 0302 	and.w	r3, r3, #2
 80269ce:	2b00      	cmp	r3, #0
 80269d0:	d0ee      	beq.n	80269b0 <HAL_RCC_OscConfig+0x334>
 80269d2:	e014      	b.n	80269fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80269d4:	f7fc fa74 	bl	8022ec0 <HAL_GetTick>
 80269d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80269da:	e00a      	b.n	80269f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80269dc:	f7fc fa70 	bl	8022ec0 <HAL_GetTick>
 80269e0:	4602      	mov	r2, r0
 80269e2:	693b      	ldr	r3, [r7, #16]
 80269e4:	1ad3      	subs	r3, r2, r3
 80269e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80269ea:	4293      	cmp	r3, r2
 80269ec:	d901      	bls.n	80269f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80269ee:	2303      	movs	r3, #3
 80269f0:	e0b5      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80269f2:	4b3e      	ldr	r3, [pc, #248]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 80269f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80269f6:	f003 0302 	and.w	r3, r3, #2
 80269fa:	2b00      	cmp	r3, #0
 80269fc:	d1ee      	bne.n	80269dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80269fe:	7dfb      	ldrb	r3, [r7, #23]
 8026a00:	2b01      	cmp	r3, #1
 8026a02:	d105      	bne.n	8026a10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8026a04:	4b39      	ldr	r3, [pc, #228]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 8026a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026a08:	4a38      	ldr	r2, [pc, #224]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 8026a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8026a0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8026a10:	687b      	ldr	r3, [r7, #4]
 8026a12:	699b      	ldr	r3, [r3, #24]
 8026a14:	2b00      	cmp	r3, #0
 8026a16:	f000 80a1 	beq.w	8026b5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8026a1a:	4b34      	ldr	r3, [pc, #208]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 8026a1c:	689b      	ldr	r3, [r3, #8]
 8026a1e:	f003 030c 	and.w	r3, r3, #12
 8026a22:	2b08      	cmp	r3, #8
 8026a24:	d05c      	beq.n	8026ae0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8026a26:	687b      	ldr	r3, [r7, #4]
 8026a28:	699b      	ldr	r3, [r3, #24]
 8026a2a:	2b02      	cmp	r3, #2
 8026a2c:	d141      	bne.n	8026ab2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026a2e:	4b31      	ldr	r3, [pc, #196]	; (8026af4 <HAL_RCC_OscConfig+0x478>)
 8026a30:	2200      	movs	r2, #0
 8026a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026a34:	f7fc fa44 	bl	8022ec0 <HAL_GetTick>
 8026a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026a3a:	e008      	b.n	8026a4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026a3c:	f7fc fa40 	bl	8022ec0 <HAL_GetTick>
 8026a40:	4602      	mov	r2, r0
 8026a42:	693b      	ldr	r3, [r7, #16]
 8026a44:	1ad3      	subs	r3, r2, r3
 8026a46:	2b02      	cmp	r3, #2
 8026a48:	d901      	bls.n	8026a4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8026a4a:	2303      	movs	r3, #3
 8026a4c:	e087      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026a4e:	4b27      	ldr	r3, [pc, #156]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 8026a50:	681b      	ldr	r3, [r3, #0]
 8026a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026a56:	2b00      	cmp	r3, #0
 8026a58:	d1f0      	bne.n	8026a3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8026a5a:	687b      	ldr	r3, [r7, #4]
 8026a5c:	69da      	ldr	r2, [r3, #28]
 8026a5e:	687b      	ldr	r3, [r7, #4]
 8026a60:	6a1b      	ldr	r3, [r3, #32]
 8026a62:	431a      	orrs	r2, r3
 8026a64:	687b      	ldr	r3, [r7, #4]
 8026a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026a68:	019b      	lsls	r3, r3, #6
 8026a6a:	431a      	orrs	r2, r3
 8026a6c:	687b      	ldr	r3, [r7, #4]
 8026a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026a70:	085b      	lsrs	r3, r3, #1
 8026a72:	3b01      	subs	r3, #1
 8026a74:	041b      	lsls	r3, r3, #16
 8026a76:	431a      	orrs	r2, r3
 8026a78:	687b      	ldr	r3, [r7, #4]
 8026a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026a7c:	061b      	lsls	r3, r3, #24
 8026a7e:	491b      	ldr	r1, [pc, #108]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 8026a80:	4313      	orrs	r3, r2
 8026a82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8026a84:	4b1b      	ldr	r3, [pc, #108]	; (8026af4 <HAL_RCC_OscConfig+0x478>)
 8026a86:	2201      	movs	r2, #1
 8026a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026a8a:	f7fc fa19 	bl	8022ec0 <HAL_GetTick>
 8026a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026a90:	e008      	b.n	8026aa4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026a92:	f7fc fa15 	bl	8022ec0 <HAL_GetTick>
 8026a96:	4602      	mov	r2, r0
 8026a98:	693b      	ldr	r3, [r7, #16]
 8026a9a:	1ad3      	subs	r3, r2, r3
 8026a9c:	2b02      	cmp	r3, #2
 8026a9e:	d901      	bls.n	8026aa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8026aa0:	2303      	movs	r3, #3
 8026aa2:	e05c      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026aa4:	4b11      	ldr	r3, [pc, #68]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 8026aa6:	681b      	ldr	r3, [r3, #0]
 8026aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026aac:	2b00      	cmp	r3, #0
 8026aae:	d0f0      	beq.n	8026a92 <HAL_RCC_OscConfig+0x416>
 8026ab0:	e054      	b.n	8026b5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026ab2:	4b10      	ldr	r3, [pc, #64]	; (8026af4 <HAL_RCC_OscConfig+0x478>)
 8026ab4:	2200      	movs	r2, #0
 8026ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026ab8:	f7fc fa02 	bl	8022ec0 <HAL_GetTick>
 8026abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026abe:	e008      	b.n	8026ad2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026ac0:	f7fc f9fe 	bl	8022ec0 <HAL_GetTick>
 8026ac4:	4602      	mov	r2, r0
 8026ac6:	693b      	ldr	r3, [r7, #16]
 8026ac8:	1ad3      	subs	r3, r2, r3
 8026aca:	2b02      	cmp	r3, #2
 8026acc:	d901      	bls.n	8026ad2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8026ace:	2303      	movs	r3, #3
 8026ad0:	e045      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026ad2:	4b06      	ldr	r3, [pc, #24]	; (8026aec <HAL_RCC_OscConfig+0x470>)
 8026ad4:	681b      	ldr	r3, [r3, #0]
 8026ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026ada:	2b00      	cmp	r3, #0
 8026adc:	d1f0      	bne.n	8026ac0 <HAL_RCC_OscConfig+0x444>
 8026ade:	e03d      	b.n	8026b5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8026ae0:	687b      	ldr	r3, [r7, #4]
 8026ae2:	699b      	ldr	r3, [r3, #24]
 8026ae4:	2b01      	cmp	r3, #1
 8026ae6:	d107      	bne.n	8026af8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8026ae8:	2301      	movs	r3, #1
 8026aea:	e038      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
 8026aec:	40023800 	.word	0x40023800
 8026af0:	40007000 	.word	0x40007000
 8026af4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8026af8:	4b1b      	ldr	r3, [pc, #108]	; (8026b68 <HAL_RCC_OscConfig+0x4ec>)
 8026afa:	685b      	ldr	r3, [r3, #4]
 8026afc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8026afe:	687b      	ldr	r3, [r7, #4]
 8026b00:	699b      	ldr	r3, [r3, #24]
 8026b02:	2b01      	cmp	r3, #1
 8026b04:	d028      	beq.n	8026b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8026b06:	68fb      	ldr	r3, [r7, #12]
 8026b08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8026b0c:	687b      	ldr	r3, [r7, #4]
 8026b0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8026b10:	429a      	cmp	r2, r3
 8026b12:	d121      	bne.n	8026b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8026b14:	68fb      	ldr	r3, [r7, #12]
 8026b16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8026b1a:	687b      	ldr	r3, [r7, #4]
 8026b1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8026b1e:	429a      	cmp	r2, r3
 8026b20:	d11a      	bne.n	8026b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8026b22:	68fa      	ldr	r2, [r7, #12]
 8026b24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8026b28:	4013      	ands	r3, r2
 8026b2a:	687a      	ldr	r2, [r7, #4]
 8026b2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8026b2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8026b30:	4293      	cmp	r3, r2
 8026b32:	d111      	bne.n	8026b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8026b34:	68fb      	ldr	r3, [r7, #12]
 8026b36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8026b3a:	687b      	ldr	r3, [r7, #4]
 8026b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026b3e:	085b      	lsrs	r3, r3, #1
 8026b40:	3b01      	subs	r3, #1
 8026b42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8026b44:	429a      	cmp	r2, r3
 8026b46:	d107      	bne.n	8026b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8026b48:	68fb      	ldr	r3, [r7, #12]
 8026b4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8026b4e:	687b      	ldr	r3, [r7, #4]
 8026b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026b52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8026b54:	429a      	cmp	r2, r3
 8026b56:	d001      	beq.n	8026b5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8026b58:	2301      	movs	r3, #1
 8026b5a:	e000      	b.n	8026b5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8026b5c:	2300      	movs	r3, #0
}
 8026b5e:	4618      	mov	r0, r3
 8026b60:	3718      	adds	r7, #24
 8026b62:	46bd      	mov	sp, r7
 8026b64:	bd80      	pop	{r7, pc}
 8026b66:	bf00      	nop
 8026b68:	40023800 	.word	0x40023800

08026b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8026b6c:	b580      	push	{r7, lr}
 8026b6e:	b084      	sub	sp, #16
 8026b70:	af00      	add	r7, sp, #0
 8026b72:	6078      	str	r0, [r7, #4]
 8026b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8026b76:	687b      	ldr	r3, [r7, #4]
 8026b78:	2b00      	cmp	r3, #0
 8026b7a:	d101      	bne.n	8026b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8026b7c:	2301      	movs	r3, #1
 8026b7e:	e0cc      	b.n	8026d1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8026b80:	4b68      	ldr	r3, [pc, #416]	; (8026d24 <HAL_RCC_ClockConfig+0x1b8>)
 8026b82:	681b      	ldr	r3, [r3, #0]
 8026b84:	f003 030f 	and.w	r3, r3, #15
 8026b88:	683a      	ldr	r2, [r7, #0]
 8026b8a:	429a      	cmp	r2, r3
 8026b8c:	d90c      	bls.n	8026ba8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8026b8e:	4b65      	ldr	r3, [pc, #404]	; (8026d24 <HAL_RCC_ClockConfig+0x1b8>)
 8026b90:	683a      	ldr	r2, [r7, #0]
 8026b92:	b2d2      	uxtb	r2, r2
 8026b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8026b96:	4b63      	ldr	r3, [pc, #396]	; (8026d24 <HAL_RCC_ClockConfig+0x1b8>)
 8026b98:	681b      	ldr	r3, [r3, #0]
 8026b9a:	f003 030f 	and.w	r3, r3, #15
 8026b9e:	683a      	ldr	r2, [r7, #0]
 8026ba0:	429a      	cmp	r2, r3
 8026ba2:	d001      	beq.n	8026ba8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8026ba4:	2301      	movs	r3, #1
 8026ba6:	e0b8      	b.n	8026d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8026ba8:	687b      	ldr	r3, [r7, #4]
 8026baa:	681b      	ldr	r3, [r3, #0]
 8026bac:	f003 0302 	and.w	r3, r3, #2
 8026bb0:	2b00      	cmp	r3, #0
 8026bb2:	d020      	beq.n	8026bf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8026bb4:	687b      	ldr	r3, [r7, #4]
 8026bb6:	681b      	ldr	r3, [r3, #0]
 8026bb8:	f003 0304 	and.w	r3, r3, #4
 8026bbc:	2b00      	cmp	r3, #0
 8026bbe:	d005      	beq.n	8026bcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8026bc0:	4b59      	ldr	r3, [pc, #356]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026bc2:	689b      	ldr	r3, [r3, #8]
 8026bc4:	4a58      	ldr	r2, [pc, #352]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026bc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8026bca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8026bcc:	687b      	ldr	r3, [r7, #4]
 8026bce:	681b      	ldr	r3, [r3, #0]
 8026bd0:	f003 0308 	and.w	r3, r3, #8
 8026bd4:	2b00      	cmp	r3, #0
 8026bd6:	d005      	beq.n	8026be4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8026bd8:	4b53      	ldr	r3, [pc, #332]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026bda:	689b      	ldr	r3, [r3, #8]
 8026bdc:	4a52      	ldr	r2, [pc, #328]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026bde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8026be2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8026be4:	4b50      	ldr	r3, [pc, #320]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026be6:	689b      	ldr	r3, [r3, #8]
 8026be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8026bec:	687b      	ldr	r3, [r7, #4]
 8026bee:	689b      	ldr	r3, [r3, #8]
 8026bf0:	494d      	ldr	r1, [pc, #308]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026bf2:	4313      	orrs	r3, r2
 8026bf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8026bf6:	687b      	ldr	r3, [r7, #4]
 8026bf8:	681b      	ldr	r3, [r3, #0]
 8026bfa:	f003 0301 	and.w	r3, r3, #1
 8026bfe:	2b00      	cmp	r3, #0
 8026c00:	d044      	beq.n	8026c8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8026c02:	687b      	ldr	r3, [r7, #4]
 8026c04:	685b      	ldr	r3, [r3, #4]
 8026c06:	2b01      	cmp	r3, #1
 8026c08:	d107      	bne.n	8026c1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026c0a:	4b47      	ldr	r3, [pc, #284]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026c0c:	681b      	ldr	r3, [r3, #0]
 8026c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026c12:	2b00      	cmp	r3, #0
 8026c14:	d119      	bne.n	8026c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8026c16:	2301      	movs	r3, #1
 8026c18:	e07f      	b.n	8026d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8026c1a:	687b      	ldr	r3, [r7, #4]
 8026c1c:	685b      	ldr	r3, [r3, #4]
 8026c1e:	2b02      	cmp	r3, #2
 8026c20:	d003      	beq.n	8026c2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8026c22:	687b      	ldr	r3, [r7, #4]
 8026c24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8026c26:	2b03      	cmp	r3, #3
 8026c28:	d107      	bne.n	8026c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026c2a:	4b3f      	ldr	r3, [pc, #252]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026c2c:	681b      	ldr	r3, [r3, #0]
 8026c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026c32:	2b00      	cmp	r3, #0
 8026c34:	d109      	bne.n	8026c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8026c36:	2301      	movs	r3, #1
 8026c38:	e06f      	b.n	8026d1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026c3a:	4b3b      	ldr	r3, [pc, #236]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026c3c:	681b      	ldr	r3, [r3, #0]
 8026c3e:	f003 0302 	and.w	r3, r3, #2
 8026c42:	2b00      	cmp	r3, #0
 8026c44:	d101      	bne.n	8026c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8026c46:	2301      	movs	r3, #1
 8026c48:	e067      	b.n	8026d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8026c4a:	4b37      	ldr	r3, [pc, #220]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026c4c:	689b      	ldr	r3, [r3, #8]
 8026c4e:	f023 0203 	bic.w	r2, r3, #3
 8026c52:	687b      	ldr	r3, [r7, #4]
 8026c54:	685b      	ldr	r3, [r3, #4]
 8026c56:	4934      	ldr	r1, [pc, #208]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026c58:	4313      	orrs	r3, r2
 8026c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8026c5c:	f7fc f930 	bl	8022ec0 <HAL_GetTick>
 8026c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8026c62:	e00a      	b.n	8026c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8026c64:	f7fc f92c 	bl	8022ec0 <HAL_GetTick>
 8026c68:	4602      	mov	r2, r0
 8026c6a:	68fb      	ldr	r3, [r7, #12]
 8026c6c:	1ad3      	subs	r3, r2, r3
 8026c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8026c72:	4293      	cmp	r3, r2
 8026c74:	d901      	bls.n	8026c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8026c76:	2303      	movs	r3, #3
 8026c78:	e04f      	b.n	8026d1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8026c7a:	4b2b      	ldr	r3, [pc, #172]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026c7c:	689b      	ldr	r3, [r3, #8]
 8026c7e:	f003 020c 	and.w	r2, r3, #12
 8026c82:	687b      	ldr	r3, [r7, #4]
 8026c84:	685b      	ldr	r3, [r3, #4]
 8026c86:	009b      	lsls	r3, r3, #2
 8026c88:	429a      	cmp	r2, r3
 8026c8a:	d1eb      	bne.n	8026c64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8026c8c:	4b25      	ldr	r3, [pc, #148]	; (8026d24 <HAL_RCC_ClockConfig+0x1b8>)
 8026c8e:	681b      	ldr	r3, [r3, #0]
 8026c90:	f003 030f 	and.w	r3, r3, #15
 8026c94:	683a      	ldr	r2, [r7, #0]
 8026c96:	429a      	cmp	r2, r3
 8026c98:	d20c      	bcs.n	8026cb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8026c9a:	4b22      	ldr	r3, [pc, #136]	; (8026d24 <HAL_RCC_ClockConfig+0x1b8>)
 8026c9c:	683a      	ldr	r2, [r7, #0]
 8026c9e:	b2d2      	uxtb	r2, r2
 8026ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8026ca2:	4b20      	ldr	r3, [pc, #128]	; (8026d24 <HAL_RCC_ClockConfig+0x1b8>)
 8026ca4:	681b      	ldr	r3, [r3, #0]
 8026ca6:	f003 030f 	and.w	r3, r3, #15
 8026caa:	683a      	ldr	r2, [r7, #0]
 8026cac:	429a      	cmp	r2, r3
 8026cae:	d001      	beq.n	8026cb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8026cb0:	2301      	movs	r3, #1
 8026cb2:	e032      	b.n	8026d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8026cb4:	687b      	ldr	r3, [r7, #4]
 8026cb6:	681b      	ldr	r3, [r3, #0]
 8026cb8:	f003 0304 	and.w	r3, r3, #4
 8026cbc:	2b00      	cmp	r3, #0
 8026cbe:	d008      	beq.n	8026cd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8026cc0:	4b19      	ldr	r3, [pc, #100]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026cc2:	689b      	ldr	r3, [r3, #8]
 8026cc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8026cc8:	687b      	ldr	r3, [r7, #4]
 8026cca:	68db      	ldr	r3, [r3, #12]
 8026ccc:	4916      	ldr	r1, [pc, #88]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026cce:	4313      	orrs	r3, r2
 8026cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8026cd2:	687b      	ldr	r3, [r7, #4]
 8026cd4:	681b      	ldr	r3, [r3, #0]
 8026cd6:	f003 0308 	and.w	r3, r3, #8
 8026cda:	2b00      	cmp	r3, #0
 8026cdc:	d009      	beq.n	8026cf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8026cde:	4b12      	ldr	r3, [pc, #72]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026ce0:	689b      	ldr	r3, [r3, #8]
 8026ce2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8026ce6:	687b      	ldr	r3, [r7, #4]
 8026ce8:	691b      	ldr	r3, [r3, #16]
 8026cea:	00db      	lsls	r3, r3, #3
 8026cec:	490e      	ldr	r1, [pc, #56]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026cee:	4313      	orrs	r3, r2
 8026cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8026cf2:	f000 f821 	bl	8026d38 <HAL_RCC_GetSysClockFreq>
 8026cf6:	4602      	mov	r2, r0
 8026cf8:	4b0b      	ldr	r3, [pc, #44]	; (8026d28 <HAL_RCC_ClockConfig+0x1bc>)
 8026cfa:	689b      	ldr	r3, [r3, #8]
 8026cfc:	091b      	lsrs	r3, r3, #4
 8026cfe:	f003 030f 	and.w	r3, r3, #15
 8026d02:	490a      	ldr	r1, [pc, #40]	; (8026d2c <HAL_RCC_ClockConfig+0x1c0>)
 8026d04:	5ccb      	ldrb	r3, [r1, r3]
 8026d06:	fa22 f303 	lsr.w	r3, r2, r3
 8026d0a:	4a09      	ldr	r2, [pc, #36]	; (8026d30 <HAL_RCC_ClockConfig+0x1c4>)
 8026d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8026d0e:	4b09      	ldr	r3, [pc, #36]	; (8026d34 <HAL_RCC_ClockConfig+0x1c8>)
 8026d10:	681b      	ldr	r3, [r3, #0]
 8026d12:	4618      	mov	r0, r3
 8026d14:	f7fa fca6 	bl	8021664 <HAL_InitTick>

  return HAL_OK;
 8026d18:	2300      	movs	r3, #0
}
 8026d1a:	4618      	mov	r0, r3
 8026d1c:	3710      	adds	r7, #16
 8026d1e:	46bd      	mov	sp, r7
 8026d20:	bd80      	pop	{r7, pc}
 8026d22:	bf00      	nop
 8026d24:	40023c00 	.word	0x40023c00
 8026d28:	40023800 	.word	0x40023800
 8026d2c:	0802e624 	.word	0x0802e624
 8026d30:	20000000 	.word	0x20000000
 8026d34:	20000054 	.word	0x20000054

08026d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8026d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8026d3c:	b094      	sub	sp, #80	; 0x50
 8026d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8026d40:	2300      	movs	r3, #0
 8026d42:	647b      	str	r3, [r7, #68]	; 0x44
 8026d44:	2300      	movs	r3, #0
 8026d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8026d48:	2300      	movs	r3, #0
 8026d4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8026d4c:	2300      	movs	r3, #0
 8026d4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8026d50:	4b79      	ldr	r3, [pc, #484]	; (8026f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8026d52:	689b      	ldr	r3, [r3, #8]
 8026d54:	f003 030c 	and.w	r3, r3, #12
 8026d58:	2b08      	cmp	r3, #8
 8026d5a:	d00d      	beq.n	8026d78 <HAL_RCC_GetSysClockFreq+0x40>
 8026d5c:	2b08      	cmp	r3, #8
 8026d5e:	f200 80e1 	bhi.w	8026f24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8026d62:	2b00      	cmp	r3, #0
 8026d64:	d002      	beq.n	8026d6c <HAL_RCC_GetSysClockFreq+0x34>
 8026d66:	2b04      	cmp	r3, #4
 8026d68:	d003      	beq.n	8026d72 <HAL_RCC_GetSysClockFreq+0x3a>
 8026d6a:	e0db      	b.n	8026f24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8026d6c:	4b73      	ldr	r3, [pc, #460]	; (8026f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8026d6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8026d70:	e0db      	b.n	8026f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8026d72:	4b73      	ldr	r3, [pc, #460]	; (8026f40 <HAL_RCC_GetSysClockFreq+0x208>)
 8026d74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8026d76:	e0d8      	b.n	8026f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8026d78:	4b6f      	ldr	r3, [pc, #444]	; (8026f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8026d7a:	685b      	ldr	r3, [r3, #4]
 8026d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8026d80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8026d82:	4b6d      	ldr	r3, [pc, #436]	; (8026f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8026d84:	685b      	ldr	r3, [r3, #4]
 8026d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026d8a:	2b00      	cmp	r3, #0
 8026d8c:	d063      	beq.n	8026e56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8026d8e:	4b6a      	ldr	r3, [pc, #424]	; (8026f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8026d90:	685b      	ldr	r3, [r3, #4]
 8026d92:	099b      	lsrs	r3, r3, #6
 8026d94:	2200      	movs	r2, #0
 8026d96:	63bb      	str	r3, [r7, #56]	; 0x38
 8026d98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8026d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026da0:	633b      	str	r3, [r7, #48]	; 0x30
 8026da2:	2300      	movs	r3, #0
 8026da4:	637b      	str	r3, [r7, #52]	; 0x34
 8026da6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8026daa:	4622      	mov	r2, r4
 8026dac:	462b      	mov	r3, r5
 8026dae:	f04f 0000 	mov.w	r0, #0
 8026db2:	f04f 0100 	mov.w	r1, #0
 8026db6:	0159      	lsls	r1, r3, #5
 8026db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8026dbc:	0150      	lsls	r0, r2, #5
 8026dbe:	4602      	mov	r2, r0
 8026dc0:	460b      	mov	r3, r1
 8026dc2:	4621      	mov	r1, r4
 8026dc4:	1a51      	subs	r1, r2, r1
 8026dc6:	6139      	str	r1, [r7, #16]
 8026dc8:	4629      	mov	r1, r5
 8026dca:	eb63 0301 	sbc.w	r3, r3, r1
 8026dce:	617b      	str	r3, [r7, #20]
 8026dd0:	f04f 0200 	mov.w	r2, #0
 8026dd4:	f04f 0300 	mov.w	r3, #0
 8026dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8026ddc:	4659      	mov	r1, fp
 8026dde:	018b      	lsls	r3, r1, #6
 8026de0:	4651      	mov	r1, sl
 8026de2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8026de6:	4651      	mov	r1, sl
 8026de8:	018a      	lsls	r2, r1, #6
 8026dea:	4651      	mov	r1, sl
 8026dec:	ebb2 0801 	subs.w	r8, r2, r1
 8026df0:	4659      	mov	r1, fp
 8026df2:	eb63 0901 	sbc.w	r9, r3, r1
 8026df6:	f04f 0200 	mov.w	r2, #0
 8026dfa:	f04f 0300 	mov.w	r3, #0
 8026dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8026e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8026e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8026e0a:	4690      	mov	r8, r2
 8026e0c:	4699      	mov	r9, r3
 8026e0e:	4623      	mov	r3, r4
 8026e10:	eb18 0303 	adds.w	r3, r8, r3
 8026e14:	60bb      	str	r3, [r7, #8]
 8026e16:	462b      	mov	r3, r5
 8026e18:	eb49 0303 	adc.w	r3, r9, r3
 8026e1c:	60fb      	str	r3, [r7, #12]
 8026e1e:	f04f 0200 	mov.w	r2, #0
 8026e22:	f04f 0300 	mov.w	r3, #0
 8026e26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8026e2a:	4629      	mov	r1, r5
 8026e2c:	024b      	lsls	r3, r1, #9
 8026e2e:	4621      	mov	r1, r4
 8026e30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8026e34:	4621      	mov	r1, r4
 8026e36:	024a      	lsls	r2, r1, #9
 8026e38:	4610      	mov	r0, r2
 8026e3a:	4619      	mov	r1, r3
 8026e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026e3e:	2200      	movs	r2, #0
 8026e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8026e42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8026e44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8026e48:	f7f9 fa22 	bl	8020290 <__aeabi_uldivmod>
 8026e4c:	4602      	mov	r2, r0
 8026e4e:	460b      	mov	r3, r1
 8026e50:	4613      	mov	r3, r2
 8026e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8026e54:	e058      	b.n	8026f08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8026e56:	4b38      	ldr	r3, [pc, #224]	; (8026f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8026e58:	685b      	ldr	r3, [r3, #4]
 8026e5a:	099b      	lsrs	r3, r3, #6
 8026e5c:	2200      	movs	r2, #0
 8026e5e:	4618      	mov	r0, r3
 8026e60:	4611      	mov	r1, r2
 8026e62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8026e66:	623b      	str	r3, [r7, #32]
 8026e68:	2300      	movs	r3, #0
 8026e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8026e6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8026e70:	4642      	mov	r2, r8
 8026e72:	464b      	mov	r3, r9
 8026e74:	f04f 0000 	mov.w	r0, #0
 8026e78:	f04f 0100 	mov.w	r1, #0
 8026e7c:	0159      	lsls	r1, r3, #5
 8026e7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8026e82:	0150      	lsls	r0, r2, #5
 8026e84:	4602      	mov	r2, r0
 8026e86:	460b      	mov	r3, r1
 8026e88:	4641      	mov	r1, r8
 8026e8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8026e8e:	4649      	mov	r1, r9
 8026e90:	eb63 0b01 	sbc.w	fp, r3, r1
 8026e94:	f04f 0200 	mov.w	r2, #0
 8026e98:	f04f 0300 	mov.w	r3, #0
 8026e9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8026ea0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8026ea4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8026ea8:	ebb2 040a 	subs.w	r4, r2, sl
 8026eac:	eb63 050b 	sbc.w	r5, r3, fp
 8026eb0:	f04f 0200 	mov.w	r2, #0
 8026eb4:	f04f 0300 	mov.w	r3, #0
 8026eb8:	00eb      	lsls	r3, r5, #3
 8026eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8026ebe:	00e2      	lsls	r2, r4, #3
 8026ec0:	4614      	mov	r4, r2
 8026ec2:	461d      	mov	r5, r3
 8026ec4:	4643      	mov	r3, r8
 8026ec6:	18e3      	adds	r3, r4, r3
 8026ec8:	603b      	str	r3, [r7, #0]
 8026eca:	464b      	mov	r3, r9
 8026ecc:	eb45 0303 	adc.w	r3, r5, r3
 8026ed0:	607b      	str	r3, [r7, #4]
 8026ed2:	f04f 0200 	mov.w	r2, #0
 8026ed6:	f04f 0300 	mov.w	r3, #0
 8026eda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8026ede:	4629      	mov	r1, r5
 8026ee0:	028b      	lsls	r3, r1, #10
 8026ee2:	4621      	mov	r1, r4
 8026ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8026ee8:	4621      	mov	r1, r4
 8026eea:	028a      	lsls	r2, r1, #10
 8026eec:	4610      	mov	r0, r2
 8026eee:	4619      	mov	r1, r3
 8026ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026ef2:	2200      	movs	r2, #0
 8026ef4:	61bb      	str	r3, [r7, #24]
 8026ef6:	61fa      	str	r2, [r7, #28]
 8026ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8026efc:	f7f9 f9c8 	bl	8020290 <__aeabi_uldivmod>
 8026f00:	4602      	mov	r2, r0
 8026f02:	460b      	mov	r3, r1
 8026f04:	4613      	mov	r3, r2
 8026f06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8026f08:	4b0b      	ldr	r3, [pc, #44]	; (8026f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8026f0a:	685b      	ldr	r3, [r3, #4]
 8026f0c:	0c1b      	lsrs	r3, r3, #16
 8026f0e:	f003 0303 	and.w	r3, r3, #3
 8026f12:	3301      	adds	r3, #1
 8026f14:	005b      	lsls	r3, r3, #1
 8026f16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8026f18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8026f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8026f20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8026f22:	e002      	b.n	8026f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8026f24:	4b05      	ldr	r3, [pc, #20]	; (8026f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8026f26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8026f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8026f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8026f2c:	4618      	mov	r0, r3
 8026f2e:	3750      	adds	r7, #80	; 0x50
 8026f30:	46bd      	mov	sp, r7
 8026f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8026f36:	bf00      	nop
 8026f38:	40023800 	.word	0x40023800
 8026f3c:	00f42400 	.word	0x00f42400
 8026f40:	007a1200 	.word	0x007a1200

08026f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8026f44:	b480      	push	{r7}
 8026f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8026f48:	4b03      	ldr	r3, [pc, #12]	; (8026f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8026f4a:	681b      	ldr	r3, [r3, #0]
}
 8026f4c:	4618      	mov	r0, r3
 8026f4e:	46bd      	mov	sp, r7
 8026f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f54:	4770      	bx	lr
 8026f56:	bf00      	nop
 8026f58:	20000000 	.word	0x20000000

08026f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8026f5c:	b580      	push	{r7, lr}
 8026f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8026f60:	f7ff fff0 	bl	8026f44 <HAL_RCC_GetHCLKFreq>
 8026f64:	4602      	mov	r2, r0
 8026f66:	4b05      	ldr	r3, [pc, #20]	; (8026f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8026f68:	689b      	ldr	r3, [r3, #8]
 8026f6a:	0a9b      	lsrs	r3, r3, #10
 8026f6c:	f003 0307 	and.w	r3, r3, #7
 8026f70:	4903      	ldr	r1, [pc, #12]	; (8026f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8026f72:	5ccb      	ldrb	r3, [r1, r3]
 8026f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8026f78:	4618      	mov	r0, r3
 8026f7a:	bd80      	pop	{r7, pc}
 8026f7c:	40023800 	.word	0x40023800
 8026f80:	0802e634 	.word	0x0802e634

08026f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8026f84:	b580      	push	{r7, lr}
 8026f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8026f88:	f7ff ffdc 	bl	8026f44 <HAL_RCC_GetHCLKFreq>
 8026f8c:	4602      	mov	r2, r0
 8026f8e:	4b05      	ldr	r3, [pc, #20]	; (8026fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8026f90:	689b      	ldr	r3, [r3, #8]
 8026f92:	0b5b      	lsrs	r3, r3, #13
 8026f94:	f003 0307 	and.w	r3, r3, #7
 8026f98:	4903      	ldr	r1, [pc, #12]	; (8026fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8026f9a:	5ccb      	ldrb	r3, [r1, r3]
 8026f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8026fa0:	4618      	mov	r0, r3
 8026fa2:	bd80      	pop	{r7, pc}
 8026fa4:	40023800 	.word	0x40023800
 8026fa8:	0802e634 	.word	0x0802e634

08026fac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8026fac:	b480      	push	{r7}
 8026fae:	b083      	sub	sp, #12
 8026fb0:	af00      	add	r7, sp, #0
 8026fb2:	6078      	str	r0, [r7, #4]
 8026fb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8026fb6:	687b      	ldr	r3, [r7, #4]
 8026fb8:	220f      	movs	r2, #15
 8026fba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8026fbc:	4b12      	ldr	r3, [pc, #72]	; (8027008 <HAL_RCC_GetClockConfig+0x5c>)
 8026fbe:	689b      	ldr	r3, [r3, #8]
 8026fc0:	f003 0203 	and.w	r2, r3, #3
 8026fc4:	687b      	ldr	r3, [r7, #4]
 8026fc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8026fc8:	4b0f      	ldr	r3, [pc, #60]	; (8027008 <HAL_RCC_GetClockConfig+0x5c>)
 8026fca:	689b      	ldr	r3, [r3, #8]
 8026fcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8026fd0:	687b      	ldr	r3, [r7, #4]
 8026fd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8026fd4:	4b0c      	ldr	r3, [pc, #48]	; (8027008 <HAL_RCC_GetClockConfig+0x5c>)
 8026fd6:	689b      	ldr	r3, [r3, #8]
 8026fd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8026fdc:	687b      	ldr	r3, [r7, #4]
 8026fde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8026fe0:	4b09      	ldr	r3, [pc, #36]	; (8027008 <HAL_RCC_GetClockConfig+0x5c>)
 8026fe2:	689b      	ldr	r3, [r3, #8]
 8026fe4:	08db      	lsrs	r3, r3, #3
 8026fe6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8026fea:	687b      	ldr	r3, [r7, #4]
 8026fec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8026fee:	4b07      	ldr	r3, [pc, #28]	; (802700c <HAL_RCC_GetClockConfig+0x60>)
 8026ff0:	681b      	ldr	r3, [r3, #0]
 8026ff2:	f003 020f 	and.w	r2, r3, #15
 8026ff6:	683b      	ldr	r3, [r7, #0]
 8026ff8:	601a      	str	r2, [r3, #0]
}
 8026ffa:	bf00      	nop
 8026ffc:	370c      	adds	r7, #12
 8026ffe:	46bd      	mov	sp, r7
 8027000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027004:	4770      	bx	lr
 8027006:	bf00      	nop
 8027008:	40023800 	.word	0x40023800
 802700c:	40023c00 	.word	0x40023c00

08027010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8027010:	b580      	push	{r7, lr}
 8027012:	b086      	sub	sp, #24
 8027014:	af00      	add	r7, sp, #0
 8027016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027018:	2300      	movs	r3, #0
 802701a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 802701c:	2300      	movs	r3, #0
 802701e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8027020:	687b      	ldr	r3, [r7, #4]
 8027022:	681b      	ldr	r3, [r3, #0]
 8027024:	f003 0301 	and.w	r3, r3, #1
 8027028:	2b00      	cmp	r3, #0
 802702a:	d10b      	bne.n	8027044 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 802702c:	687b      	ldr	r3, [r7, #4]
 802702e:	681b      	ldr	r3, [r3, #0]
 8027030:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8027034:	2b00      	cmp	r3, #0
 8027036:	d105      	bne.n	8027044 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8027038:	687b      	ldr	r3, [r7, #4]
 802703a:	681b      	ldr	r3, [r3, #0]
 802703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8027040:	2b00      	cmp	r3, #0
 8027042:	d075      	beq.n	8027130 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8027044:	4b91      	ldr	r3, [pc, #580]	; (802728c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8027046:	2200      	movs	r2, #0
 8027048:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802704a:	f7fb ff39 	bl	8022ec0 <HAL_GetTick>
 802704e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027050:	e008      	b.n	8027064 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8027052:	f7fb ff35 	bl	8022ec0 <HAL_GetTick>
 8027056:	4602      	mov	r2, r0
 8027058:	697b      	ldr	r3, [r7, #20]
 802705a:	1ad3      	subs	r3, r2, r3
 802705c:	2b02      	cmp	r3, #2
 802705e:	d901      	bls.n	8027064 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027060:	2303      	movs	r3, #3
 8027062:	e189      	b.n	8027378 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027064:	4b8a      	ldr	r3, [pc, #552]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027066:	681b      	ldr	r3, [r3, #0]
 8027068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802706c:	2b00      	cmp	r3, #0
 802706e:	d1f0      	bne.n	8027052 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8027070:	687b      	ldr	r3, [r7, #4]
 8027072:	681b      	ldr	r3, [r3, #0]
 8027074:	f003 0301 	and.w	r3, r3, #1
 8027078:	2b00      	cmp	r3, #0
 802707a:	d009      	beq.n	8027090 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 802707c:	687b      	ldr	r3, [r7, #4]
 802707e:	685b      	ldr	r3, [r3, #4]
 8027080:	019a      	lsls	r2, r3, #6
 8027082:	687b      	ldr	r3, [r7, #4]
 8027084:	689b      	ldr	r3, [r3, #8]
 8027086:	071b      	lsls	r3, r3, #28
 8027088:	4981      	ldr	r1, [pc, #516]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802708a:	4313      	orrs	r3, r2
 802708c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8027090:	687b      	ldr	r3, [r7, #4]
 8027092:	681b      	ldr	r3, [r3, #0]
 8027094:	f003 0302 	and.w	r3, r3, #2
 8027098:	2b00      	cmp	r3, #0
 802709a:	d01f      	beq.n	80270dc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 802709c:	4b7c      	ldr	r3, [pc, #496]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802709e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80270a2:	0f1b      	lsrs	r3, r3, #28
 80270a4:	f003 0307 	and.w	r3, r3, #7
 80270a8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80270aa:	687b      	ldr	r3, [r7, #4]
 80270ac:	685b      	ldr	r3, [r3, #4]
 80270ae:	019a      	lsls	r2, r3, #6
 80270b0:	687b      	ldr	r3, [r7, #4]
 80270b2:	68db      	ldr	r3, [r3, #12]
 80270b4:	061b      	lsls	r3, r3, #24
 80270b6:	431a      	orrs	r2, r3
 80270b8:	693b      	ldr	r3, [r7, #16]
 80270ba:	071b      	lsls	r3, r3, #28
 80270bc:	4974      	ldr	r1, [pc, #464]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80270be:	4313      	orrs	r3, r2
 80270c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80270c4:	4b72      	ldr	r3, [pc, #456]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80270c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80270ca:	f023 021f 	bic.w	r2, r3, #31
 80270ce:	687b      	ldr	r3, [r7, #4]
 80270d0:	69db      	ldr	r3, [r3, #28]
 80270d2:	3b01      	subs	r3, #1
 80270d4:	496e      	ldr	r1, [pc, #440]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80270d6:	4313      	orrs	r3, r2
 80270d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80270dc:	687b      	ldr	r3, [r7, #4]
 80270de:	681b      	ldr	r3, [r3, #0]
 80270e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80270e4:	2b00      	cmp	r3, #0
 80270e6:	d00d      	beq.n	8027104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80270e8:	687b      	ldr	r3, [r7, #4]
 80270ea:	685b      	ldr	r3, [r3, #4]
 80270ec:	019a      	lsls	r2, r3, #6
 80270ee:	687b      	ldr	r3, [r7, #4]
 80270f0:	68db      	ldr	r3, [r3, #12]
 80270f2:	061b      	lsls	r3, r3, #24
 80270f4:	431a      	orrs	r2, r3
 80270f6:	687b      	ldr	r3, [r7, #4]
 80270f8:	689b      	ldr	r3, [r3, #8]
 80270fa:	071b      	lsls	r3, r3, #28
 80270fc:	4964      	ldr	r1, [pc, #400]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80270fe:	4313      	orrs	r3, r2
 8027100:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8027104:	4b61      	ldr	r3, [pc, #388]	; (802728c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8027106:	2201      	movs	r2, #1
 8027108:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802710a:	f7fb fed9 	bl	8022ec0 <HAL_GetTick>
 802710e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027110:	e008      	b.n	8027124 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8027112:	f7fb fed5 	bl	8022ec0 <HAL_GetTick>
 8027116:	4602      	mov	r2, r0
 8027118:	697b      	ldr	r3, [r7, #20]
 802711a:	1ad3      	subs	r3, r2, r3
 802711c:	2b02      	cmp	r3, #2
 802711e:	d901      	bls.n	8027124 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027120:	2303      	movs	r3, #3
 8027122:	e129      	b.n	8027378 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027124:	4b5a      	ldr	r3, [pc, #360]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027126:	681b      	ldr	r3, [r3, #0]
 8027128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802712c:	2b00      	cmp	r3, #0
 802712e:	d0f0      	beq.n	8027112 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8027130:	687b      	ldr	r3, [r7, #4]
 8027132:	681b      	ldr	r3, [r3, #0]
 8027134:	f003 0304 	and.w	r3, r3, #4
 8027138:	2b00      	cmp	r3, #0
 802713a:	d105      	bne.n	8027148 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 802713c:	687b      	ldr	r3, [r7, #4]
 802713e:	681b      	ldr	r3, [r3, #0]
 8027140:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8027144:	2b00      	cmp	r3, #0
 8027146:	d079      	beq.n	802723c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8027148:	4b52      	ldr	r3, [pc, #328]	; (8027294 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 802714a:	2200      	movs	r2, #0
 802714c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802714e:	f7fb feb7 	bl	8022ec0 <HAL_GetTick>
 8027152:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027154:	e008      	b.n	8027168 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8027156:	f7fb feb3 	bl	8022ec0 <HAL_GetTick>
 802715a:	4602      	mov	r2, r0
 802715c:	697b      	ldr	r3, [r7, #20]
 802715e:	1ad3      	subs	r3, r2, r3
 8027160:	2b02      	cmp	r3, #2
 8027162:	d901      	bls.n	8027168 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027164:	2303      	movs	r3, #3
 8027166:	e107      	b.n	8027378 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027168:	4b49      	ldr	r3, [pc, #292]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802716a:	681b      	ldr	r3, [r3, #0]
 802716c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8027170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027174:	d0ef      	beq.n	8027156 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8027176:	687b      	ldr	r3, [r7, #4]
 8027178:	681b      	ldr	r3, [r3, #0]
 802717a:	f003 0304 	and.w	r3, r3, #4
 802717e:	2b00      	cmp	r3, #0
 8027180:	d020      	beq.n	80271c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8027182:	4b43      	ldr	r3, [pc, #268]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027188:	0f1b      	lsrs	r3, r3, #28
 802718a:	f003 0307 	and.w	r3, r3, #7
 802718e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8027190:	687b      	ldr	r3, [r7, #4]
 8027192:	691b      	ldr	r3, [r3, #16]
 8027194:	019a      	lsls	r2, r3, #6
 8027196:	687b      	ldr	r3, [r7, #4]
 8027198:	695b      	ldr	r3, [r3, #20]
 802719a:	061b      	lsls	r3, r3, #24
 802719c:	431a      	orrs	r2, r3
 802719e:	693b      	ldr	r3, [r7, #16]
 80271a0:	071b      	lsls	r3, r3, #28
 80271a2:	493b      	ldr	r1, [pc, #236]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80271a4:	4313      	orrs	r3, r2
 80271a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80271aa:	4b39      	ldr	r3, [pc, #228]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80271ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80271b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80271b4:	687b      	ldr	r3, [r7, #4]
 80271b6:	6a1b      	ldr	r3, [r3, #32]
 80271b8:	3b01      	subs	r3, #1
 80271ba:	021b      	lsls	r3, r3, #8
 80271bc:	4934      	ldr	r1, [pc, #208]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80271be:	4313      	orrs	r3, r2
 80271c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80271c4:	687b      	ldr	r3, [r7, #4]
 80271c6:	681b      	ldr	r3, [r3, #0]
 80271c8:	f003 0308 	and.w	r3, r3, #8
 80271cc:	2b00      	cmp	r3, #0
 80271ce:	d01e      	beq.n	802720e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80271d0:	4b2f      	ldr	r3, [pc, #188]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80271d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80271d6:	0e1b      	lsrs	r3, r3, #24
 80271d8:	f003 030f 	and.w	r3, r3, #15
 80271dc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80271de:	687b      	ldr	r3, [r7, #4]
 80271e0:	691b      	ldr	r3, [r3, #16]
 80271e2:	019a      	lsls	r2, r3, #6
 80271e4:	693b      	ldr	r3, [r7, #16]
 80271e6:	061b      	lsls	r3, r3, #24
 80271e8:	431a      	orrs	r2, r3
 80271ea:	687b      	ldr	r3, [r7, #4]
 80271ec:	699b      	ldr	r3, [r3, #24]
 80271ee:	071b      	lsls	r3, r3, #28
 80271f0:	4927      	ldr	r1, [pc, #156]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80271f2:	4313      	orrs	r3, r2
 80271f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80271f8:	4b25      	ldr	r3, [pc, #148]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80271fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80271fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8027202:	687b      	ldr	r3, [r7, #4]
 8027204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027206:	4922      	ldr	r1, [pc, #136]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027208:	4313      	orrs	r3, r2
 802720a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 802720e:	4b21      	ldr	r3, [pc, #132]	; (8027294 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8027210:	2201      	movs	r2, #1
 8027212:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027214:	f7fb fe54 	bl	8022ec0 <HAL_GetTick>
 8027218:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 802721a:	e008      	b.n	802722e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 802721c:	f7fb fe50 	bl	8022ec0 <HAL_GetTick>
 8027220:	4602      	mov	r2, r0
 8027222:	697b      	ldr	r3, [r7, #20]
 8027224:	1ad3      	subs	r3, r2, r3
 8027226:	2b02      	cmp	r3, #2
 8027228:	d901      	bls.n	802722e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802722a:	2303      	movs	r3, #3
 802722c:	e0a4      	b.n	8027378 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 802722e:	4b18      	ldr	r3, [pc, #96]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027230:	681b      	ldr	r3, [r3, #0]
 8027232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8027236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802723a:	d1ef      	bne.n	802721c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 802723c:	687b      	ldr	r3, [r7, #4]
 802723e:	681b      	ldr	r3, [r3, #0]
 8027240:	f003 0320 	and.w	r3, r3, #32
 8027244:	2b00      	cmp	r3, #0
 8027246:	f000 808b 	beq.w	8027360 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 802724a:	2300      	movs	r3, #0
 802724c:	60fb      	str	r3, [r7, #12]
 802724e:	4b10      	ldr	r3, [pc, #64]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027252:	4a0f      	ldr	r2, [pc, #60]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027258:	6413      	str	r3, [r2, #64]	; 0x40
 802725a:	4b0d      	ldr	r3, [pc, #52]	; (8027290 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802725e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027262:	60fb      	str	r3, [r7, #12]
 8027264:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8027266:	4b0c      	ldr	r3, [pc, #48]	; (8027298 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8027268:	681b      	ldr	r3, [r3, #0]
 802726a:	4a0b      	ldr	r2, [pc, #44]	; (8027298 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 802726c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027270:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8027272:	f7fb fe25 	bl	8022ec0 <HAL_GetTick>
 8027276:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8027278:	e010      	b.n	802729c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 802727a:	f7fb fe21 	bl	8022ec0 <HAL_GetTick>
 802727e:	4602      	mov	r2, r0
 8027280:	697b      	ldr	r3, [r7, #20]
 8027282:	1ad3      	subs	r3, r2, r3
 8027284:	2b02      	cmp	r3, #2
 8027286:	d909      	bls.n	802729c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8027288:	2303      	movs	r3, #3
 802728a:	e075      	b.n	8027378 <HAL_RCCEx_PeriphCLKConfig+0x368>
 802728c:	42470068 	.word	0x42470068
 8027290:	40023800 	.word	0x40023800
 8027294:	42470070 	.word	0x42470070
 8027298:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 802729c:	4b38      	ldr	r3, [pc, #224]	; (8027380 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 802729e:	681b      	ldr	r3, [r3, #0]
 80272a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80272a4:	2b00      	cmp	r3, #0
 80272a6:	d0e8      	beq.n	802727a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80272a8:	4b36      	ldr	r3, [pc, #216]	; (8027384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80272aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80272ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80272b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80272b2:	693b      	ldr	r3, [r7, #16]
 80272b4:	2b00      	cmp	r3, #0
 80272b6:	d02f      	beq.n	8027318 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80272b8:	687b      	ldr	r3, [r7, #4]
 80272ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80272bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80272c0:	693a      	ldr	r2, [r7, #16]
 80272c2:	429a      	cmp	r2, r3
 80272c4:	d028      	beq.n	8027318 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80272c6:	4b2f      	ldr	r3, [pc, #188]	; (8027384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80272c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80272ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80272ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80272d0:	4b2d      	ldr	r3, [pc, #180]	; (8027388 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80272d2:	2201      	movs	r2, #1
 80272d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80272d6:	4b2c      	ldr	r3, [pc, #176]	; (8027388 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80272d8:	2200      	movs	r2, #0
 80272da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80272dc:	4a29      	ldr	r2, [pc, #164]	; (8027384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80272de:	693b      	ldr	r3, [r7, #16]
 80272e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80272e2:	4b28      	ldr	r3, [pc, #160]	; (8027384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80272e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80272e6:	f003 0301 	and.w	r3, r3, #1
 80272ea:	2b01      	cmp	r3, #1
 80272ec:	d114      	bne.n	8027318 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80272ee:	f7fb fde7 	bl	8022ec0 <HAL_GetTick>
 80272f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80272f4:	e00a      	b.n	802730c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80272f6:	f7fb fde3 	bl	8022ec0 <HAL_GetTick>
 80272fa:	4602      	mov	r2, r0
 80272fc:	697b      	ldr	r3, [r7, #20]
 80272fe:	1ad3      	subs	r3, r2, r3
 8027300:	f241 3288 	movw	r2, #5000	; 0x1388
 8027304:	4293      	cmp	r3, r2
 8027306:	d901      	bls.n	802730c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8027308:	2303      	movs	r3, #3
 802730a:	e035      	b.n	8027378 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802730c:	4b1d      	ldr	r3, [pc, #116]	; (8027384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802730e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027310:	f003 0302 	and.w	r3, r3, #2
 8027314:	2b00      	cmp	r3, #0
 8027316:	d0ee      	beq.n	80272f6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8027318:	687b      	ldr	r3, [r7, #4]
 802731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802731c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8027324:	d10d      	bne.n	8027342 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8027326:	4b17      	ldr	r3, [pc, #92]	; (8027384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027328:	689b      	ldr	r3, [r3, #8]
 802732a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 802732e:	687b      	ldr	r3, [r7, #4]
 8027330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027332:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8027336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802733a:	4912      	ldr	r1, [pc, #72]	; (8027384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802733c:	4313      	orrs	r3, r2
 802733e:	608b      	str	r3, [r1, #8]
 8027340:	e005      	b.n	802734e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8027342:	4b10      	ldr	r3, [pc, #64]	; (8027384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027344:	689b      	ldr	r3, [r3, #8]
 8027346:	4a0f      	ldr	r2, [pc, #60]	; (8027384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027348:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 802734c:	6093      	str	r3, [r2, #8]
 802734e:	4b0d      	ldr	r3, [pc, #52]	; (8027384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027350:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8027352:	687b      	ldr	r3, [r7, #4]
 8027354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802735a:	490a      	ldr	r1, [pc, #40]	; (8027384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802735c:	4313      	orrs	r3, r2
 802735e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8027360:	687b      	ldr	r3, [r7, #4]
 8027362:	681b      	ldr	r3, [r3, #0]
 8027364:	f003 0310 	and.w	r3, r3, #16
 8027368:	2b00      	cmp	r3, #0
 802736a:	d004      	beq.n	8027376 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 802736c:	687b      	ldr	r3, [r7, #4]
 802736e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8027372:	4b06      	ldr	r3, [pc, #24]	; (802738c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8027374:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8027376:	2300      	movs	r3, #0
}
 8027378:	4618      	mov	r0, r3
 802737a:	3718      	adds	r7, #24
 802737c:	46bd      	mov	sp, r7
 802737e:	bd80      	pop	{r7, pc}
 8027380:	40007000 	.word	0x40007000
 8027384:	40023800 	.word	0x40023800
 8027388:	42470e40 	.word	0x42470e40
 802738c:	424711e0 	.word	0x424711e0

08027390 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8027390:	b580      	push	{r7, lr}
 8027392:	b082      	sub	sp, #8
 8027394:	af00      	add	r7, sp, #0
 8027396:	6078      	str	r0, [r7, #4]
 8027398:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 802739a:	687b      	ldr	r3, [r7, #4]
 802739c:	2b00      	cmp	r3, #0
 802739e:	d101      	bne.n	80273a4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80273a0:	2301      	movs	r3, #1
 80273a2:	e025      	b.n	80273f0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80273a4:	687b      	ldr	r3, [r7, #4]
 80273a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80273aa:	b2db      	uxtb	r3, r3
 80273ac:	2b00      	cmp	r3, #0
 80273ae:	d106      	bne.n	80273be <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80273b0:	687b      	ldr	r3, [r7, #4]
 80273b2:	2200      	movs	r2, #0
 80273b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80273b8:	6878      	ldr	r0, [r7, #4]
 80273ba:	f7fa f949 	bl	8021650 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80273be:	687b      	ldr	r3, [r7, #4]
 80273c0:	2202      	movs	r2, #2
 80273c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80273c6:	687b      	ldr	r3, [r7, #4]
 80273c8:	681a      	ldr	r2, [r3, #0]
 80273ca:	687b      	ldr	r3, [r7, #4]
 80273cc:	3304      	adds	r3, #4
 80273ce:	4619      	mov	r1, r3
 80273d0:	4610      	mov	r0, r2
 80273d2:	f002 fb47 	bl	8029a64 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80273d6:	687b      	ldr	r3, [r7, #4]
 80273d8:	6818      	ldr	r0, [r3, #0]
 80273da:	687b      	ldr	r3, [r7, #4]
 80273dc:	685b      	ldr	r3, [r3, #4]
 80273de:	461a      	mov	r2, r3
 80273e0:	6839      	ldr	r1, [r7, #0]
 80273e2:	f002 fb9c 	bl	8029b1e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80273e6:	687b      	ldr	r3, [r7, #4]
 80273e8:	2201      	movs	r2, #1
 80273ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80273ee:	2300      	movs	r3, #0
}
 80273f0:	4618      	mov	r0, r3
 80273f2:	3708      	adds	r7, #8
 80273f4:	46bd      	mov	sp, r7
 80273f6:	bd80      	pop	{r7, pc}

080273f8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80273f8:	b580      	push	{r7, lr}
 80273fa:	b086      	sub	sp, #24
 80273fc:	af00      	add	r7, sp, #0
 80273fe:	60f8      	str	r0, [r7, #12]
 8027400:	60b9      	str	r1, [r7, #8]
 8027402:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8027404:	68fb      	ldr	r3, [r7, #12]
 8027406:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802740a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 802740c:	7dfb      	ldrb	r3, [r7, #23]
 802740e:	2b02      	cmp	r3, #2
 8027410:	d101      	bne.n	8027416 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8027412:	2302      	movs	r3, #2
 8027414:	e021      	b.n	802745a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8027416:	7dfb      	ldrb	r3, [r7, #23]
 8027418:	2b01      	cmp	r3, #1
 802741a:	d002      	beq.n	8027422 <HAL_SDRAM_SendCommand+0x2a>
 802741c:	7dfb      	ldrb	r3, [r7, #23]
 802741e:	2b05      	cmp	r3, #5
 8027420:	d118      	bne.n	8027454 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8027422:	68fb      	ldr	r3, [r7, #12]
 8027424:	2202      	movs	r2, #2
 8027426:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 802742a:	68fb      	ldr	r3, [r7, #12]
 802742c:	681b      	ldr	r3, [r3, #0]
 802742e:	687a      	ldr	r2, [r7, #4]
 8027430:	68b9      	ldr	r1, [r7, #8]
 8027432:	4618      	mov	r0, r3
 8027434:	f002 fbdc 	bl	8029bf0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8027438:	68bb      	ldr	r3, [r7, #8]
 802743a:	681b      	ldr	r3, [r3, #0]
 802743c:	2b02      	cmp	r3, #2
 802743e:	d104      	bne.n	802744a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8027440:	68fb      	ldr	r3, [r7, #12]
 8027442:	2205      	movs	r2, #5
 8027444:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8027448:	e006      	b.n	8027458 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 802744a:	68fb      	ldr	r3, [r7, #12]
 802744c:	2201      	movs	r2, #1
 802744e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8027452:	e001      	b.n	8027458 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8027454:	2301      	movs	r3, #1
 8027456:	e000      	b.n	802745a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8027458:	2300      	movs	r3, #0
}
 802745a:	4618      	mov	r0, r3
 802745c:	3718      	adds	r7, #24
 802745e:	46bd      	mov	sp, r7
 8027460:	bd80      	pop	{r7, pc}

08027462 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8027462:	b580      	push	{r7, lr}
 8027464:	b082      	sub	sp, #8
 8027466:	af00      	add	r7, sp, #0
 8027468:	6078      	str	r0, [r7, #4]
 802746a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 802746c:	687b      	ldr	r3, [r7, #4]
 802746e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8027472:	b2db      	uxtb	r3, r3
 8027474:	2b02      	cmp	r3, #2
 8027476:	d101      	bne.n	802747c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8027478:	2302      	movs	r3, #2
 802747a:	e016      	b.n	80274aa <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 802747c:	687b      	ldr	r3, [r7, #4]
 802747e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8027482:	b2db      	uxtb	r3, r3
 8027484:	2b01      	cmp	r3, #1
 8027486:	d10f      	bne.n	80274a8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8027488:	687b      	ldr	r3, [r7, #4]
 802748a:	2202      	movs	r2, #2
 802748c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8027490:	687b      	ldr	r3, [r7, #4]
 8027492:	681b      	ldr	r3, [r3, #0]
 8027494:	6839      	ldr	r1, [r7, #0]
 8027496:	4618      	mov	r0, r3
 8027498:	f002 fbe7 	bl	8029c6a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 802749c:	687b      	ldr	r3, [r7, #4]
 802749e:	2201      	movs	r2, #1
 80274a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80274a4:	2300      	movs	r3, #0
 80274a6:	e000      	b.n	80274aa <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80274a8:	2301      	movs	r3, #1
}
 80274aa:	4618      	mov	r0, r3
 80274ac:	3708      	adds	r7, #8
 80274ae:	46bd      	mov	sp, r7
 80274b0:	bd80      	pop	{r7, pc}

080274b2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80274b2:	b580      	push	{r7, lr}
 80274b4:	b082      	sub	sp, #8
 80274b6:	af00      	add	r7, sp, #0
 80274b8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80274ba:	687b      	ldr	r3, [r7, #4]
 80274bc:	2b00      	cmp	r3, #0
 80274be:	d101      	bne.n	80274c4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80274c0:	2301      	movs	r3, #1
 80274c2:	e07b      	b.n	80275bc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80274c4:	687b      	ldr	r3, [r7, #4]
 80274c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80274c8:	2b00      	cmp	r3, #0
 80274ca:	d108      	bne.n	80274de <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80274cc:	687b      	ldr	r3, [r7, #4]
 80274ce:	685b      	ldr	r3, [r3, #4]
 80274d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80274d4:	d009      	beq.n	80274ea <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80274d6:	687b      	ldr	r3, [r7, #4]
 80274d8:	2200      	movs	r2, #0
 80274da:	61da      	str	r2, [r3, #28]
 80274dc:	e005      	b.n	80274ea <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80274de:	687b      	ldr	r3, [r7, #4]
 80274e0:	2200      	movs	r2, #0
 80274e2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80274e4:	687b      	ldr	r3, [r7, #4]
 80274e6:	2200      	movs	r2, #0
 80274e8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80274ea:	687b      	ldr	r3, [r7, #4]
 80274ec:	2200      	movs	r2, #0
 80274ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80274f0:	687b      	ldr	r3, [r7, #4]
 80274f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80274f6:	b2db      	uxtb	r3, r3
 80274f8:	2b00      	cmp	r3, #0
 80274fa:	d106      	bne.n	802750a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80274fc:	687b      	ldr	r3, [r7, #4]
 80274fe:	2200      	movs	r2, #0
 8027500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8027504:	6878      	ldr	r0, [r7, #4]
 8027506:	f7f9 fee1 	bl	80212cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802750a:	687b      	ldr	r3, [r7, #4]
 802750c:	2202      	movs	r2, #2
 802750e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8027512:	687b      	ldr	r3, [r7, #4]
 8027514:	681b      	ldr	r3, [r3, #0]
 8027516:	681a      	ldr	r2, [r3, #0]
 8027518:	687b      	ldr	r3, [r7, #4]
 802751a:	681b      	ldr	r3, [r3, #0]
 802751c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027520:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8027522:	687b      	ldr	r3, [r7, #4]
 8027524:	685b      	ldr	r3, [r3, #4]
 8027526:	f403 7282 	and.w	r2, r3, #260	; 0x104
 802752a:	687b      	ldr	r3, [r7, #4]
 802752c:	689b      	ldr	r3, [r3, #8]
 802752e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8027532:	431a      	orrs	r2, r3
 8027534:	687b      	ldr	r3, [r7, #4]
 8027536:	68db      	ldr	r3, [r3, #12]
 8027538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802753c:	431a      	orrs	r2, r3
 802753e:	687b      	ldr	r3, [r7, #4]
 8027540:	691b      	ldr	r3, [r3, #16]
 8027542:	f003 0302 	and.w	r3, r3, #2
 8027546:	431a      	orrs	r2, r3
 8027548:	687b      	ldr	r3, [r7, #4]
 802754a:	695b      	ldr	r3, [r3, #20]
 802754c:	f003 0301 	and.w	r3, r3, #1
 8027550:	431a      	orrs	r2, r3
 8027552:	687b      	ldr	r3, [r7, #4]
 8027554:	699b      	ldr	r3, [r3, #24]
 8027556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802755a:	431a      	orrs	r2, r3
 802755c:	687b      	ldr	r3, [r7, #4]
 802755e:	69db      	ldr	r3, [r3, #28]
 8027560:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8027564:	431a      	orrs	r2, r3
 8027566:	687b      	ldr	r3, [r7, #4]
 8027568:	6a1b      	ldr	r3, [r3, #32]
 802756a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802756e:	ea42 0103 	orr.w	r1, r2, r3
 8027572:	687b      	ldr	r3, [r7, #4]
 8027574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027576:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 802757a:	687b      	ldr	r3, [r7, #4]
 802757c:	681b      	ldr	r3, [r3, #0]
 802757e:	430a      	orrs	r2, r1
 8027580:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8027582:	687b      	ldr	r3, [r7, #4]
 8027584:	699b      	ldr	r3, [r3, #24]
 8027586:	0c1b      	lsrs	r3, r3, #16
 8027588:	f003 0104 	and.w	r1, r3, #4
 802758c:	687b      	ldr	r3, [r7, #4]
 802758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027590:	f003 0210 	and.w	r2, r3, #16
 8027594:	687b      	ldr	r3, [r7, #4]
 8027596:	681b      	ldr	r3, [r3, #0]
 8027598:	430a      	orrs	r2, r1
 802759a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 802759c:	687b      	ldr	r3, [r7, #4]
 802759e:	681b      	ldr	r3, [r3, #0]
 80275a0:	69da      	ldr	r2, [r3, #28]
 80275a2:	687b      	ldr	r3, [r7, #4]
 80275a4:	681b      	ldr	r3, [r3, #0]
 80275a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80275aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80275ac:	687b      	ldr	r3, [r7, #4]
 80275ae:	2200      	movs	r2, #0
 80275b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80275b2:	687b      	ldr	r3, [r7, #4]
 80275b4:	2201      	movs	r2, #1
 80275b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80275ba:	2300      	movs	r3, #0
}
 80275bc:	4618      	mov	r0, r3
 80275be:	3708      	adds	r7, #8
 80275c0:	46bd      	mov	sp, r7
 80275c2:	bd80      	pop	{r7, pc}

080275c4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80275c4:	b580      	push	{r7, lr}
 80275c6:	b082      	sub	sp, #8
 80275c8:	af00      	add	r7, sp, #0
 80275ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80275cc:	687b      	ldr	r3, [r7, #4]
 80275ce:	2b00      	cmp	r3, #0
 80275d0:	d101      	bne.n	80275d6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80275d2:	2301      	movs	r3, #1
 80275d4:	e01a      	b.n	802760c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80275d6:	687b      	ldr	r3, [r7, #4]
 80275d8:	2202      	movs	r2, #2
 80275da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80275de:	687b      	ldr	r3, [r7, #4]
 80275e0:	681b      	ldr	r3, [r3, #0]
 80275e2:	681a      	ldr	r2, [r3, #0]
 80275e4:	687b      	ldr	r3, [r7, #4]
 80275e6:	681b      	ldr	r3, [r3, #0]
 80275e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80275ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80275ee:	6878      	ldr	r0, [r7, #4]
 80275f0:	f7f9 feb4 	bl	802135c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80275f4:	687b      	ldr	r3, [r7, #4]
 80275f6:	2200      	movs	r2, #0
 80275f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80275fa:	687b      	ldr	r3, [r7, #4]
 80275fc:	2200      	movs	r2, #0
 80275fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8027602:	687b      	ldr	r3, [r7, #4]
 8027604:	2200      	movs	r2, #0
 8027606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 802760a:	2300      	movs	r3, #0
}
 802760c:	4618      	mov	r0, r3
 802760e:	3708      	adds	r7, #8
 8027610:	46bd      	mov	sp, r7
 8027612:	bd80      	pop	{r7, pc}

08027614 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8027614:	b580      	push	{r7, lr}
 8027616:	b088      	sub	sp, #32
 8027618:	af00      	add	r7, sp, #0
 802761a:	60f8      	str	r0, [r7, #12]
 802761c:	60b9      	str	r1, [r7, #8]
 802761e:	603b      	str	r3, [r7, #0]
 8027620:	4613      	mov	r3, r2
 8027622:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8027624:	2300      	movs	r3, #0
 8027626:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8027628:	68fb      	ldr	r3, [r7, #12]
 802762a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802762e:	2b01      	cmp	r3, #1
 8027630:	d101      	bne.n	8027636 <HAL_SPI_Transmit+0x22>
 8027632:	2302      	movs	r3, #2
 8027634:	e126      	b.n	8027884 <HAL_SPI_Transmit+0x270>
 8027636:	68fb      	ldr	r3, [r7, #12]
 8027638:	2201      	movs	r2, #1
 802763a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802763e:	f7fb fc3f 	bl	8022ec0 <HAL_GetTick>
 8027642:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8027644:	88fb      	ldrh	r3, [r7, #6]
 8027646:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8027648:	68fb      	ldr	r3, [r7, #12]
 802764a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802764e:	b2db      	uxtb	r3, r3
 8027650:	2b01      	cmp	r3, #1
 8027652:	d002      	beq.n	802765a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8027654:	2302      	movs	r3, #2
 8027656:	77fb      	strb	r3, [r7, #31]
    goto error;
 8027658:	e10b      	b.n	8027872 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 802765a:	68bb      	ldr	r3, [r7, #8]
 802765c:	2b00      	cmp	r3, #0
 802765e:	d002      	beq.n	8027666 <HAL_SPI_Transmit+0x52>
 8027660:	88fb      	ldrh	r3, [r7, #6]
 8027662:	2b00      	cmp	r3, #0
 8027664:	d102      	bne.n	802766c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8027666:	2301      	movs	r3, #1
 8027668:	77fb      	strb	r3, [r7, #31]
    goto error;
 802766a:	e102      	b.n	8027872 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 802766c:	68fb      	ldr	r3, [r7, #12]
 802766e:	2203      	movs	r2, #3
 8027670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027674:	68fb      	ldr	r3, [r7, #12]
 8027676:	2200      	movs	r2, #0
 8027678:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 802767a:	68fb      	ldr	r3, [r7, #12]
 802767c:	68ba      	ldr	r2, [r7, #8]
 802767e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8027680:	68fb      	ldr	r3, [r7, #12]
 8027682:	88fa      	ldrh	r2, [r7, #6]
 8027684:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8027686:	68fb      	ldr	r3, [r7, #12]
 8027688:	88fa      	ldrh	r2, [r7, #6]
 802768a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 802768c:	68fb      	ldr	r3, [r7, #12]
 802768e:	2200      	movs	r2, #0
 8027690:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8027692:	68fb      	ldr	r3, [r7, #12]
 8027694:	2200      	movs	r2, #0
 8027696:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8027698:	68fb      	ldr	r3, [r7, #12]
 802769a:	2200      	movs	r2, #0
 802769c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 802769e:	68fb      	ldr	r3, [r7, #12]
 80276a0:	2200      	movs	r2, #0
 80276a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80276a4:	68fb      	ldr	r3, [r7, #12]
 80276a6:	2200      	movs	r2, #0
 80276a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80276aa:	68fb      	ldr	r3, [r7, #12]
 80276ac:	689b      	ldr	r3, [r3, #8]
 80276ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80276b2:	d10f      	bne.n	80276d4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80276b4:	68fb      	ldr	r3, [r7, #12]
 80276b6:	681b      	ldr	r3, [r3, #0]
 80276b8:	681a      	ldr	r2, [r3, #0]
 80276ba:	68fb      	ldr	r3, [r7, #12]
 80276bc:	681b      	ldr	r3, [r3, #0]
 80276be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80276c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80276c4:	68fb      	ldr	r3, [r7, #12]
 80276c6:	681b      	ldr	r3, [r3, #0]
 80276c8:	681a      	ldr	r2, [r3, #0]
 80276ca:	68fb      	ldr	r3, [r7, #12]
 80276cc:	681b      	ldr	r3, [r3, #0]
 80276ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80276d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80276d4:	68fb      	ldr	r3, [r7, #12]
 80276d6:	681b      	ldr	r3, [r3, #0]
 80276d8:	681b      	ldr	r3, [r3, #0]
 80276da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80276de:	2b40      	cmp	r3, #64	; 0x40
 80276e0:	d007      	beq.n	80276f2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80276e2:	68fb      	ldr	r3, [r7, #12]
 80276e4:	681b      	ldr	r3, [r3, #0]
 80276e6:	681a      	ldr	r2, [r3, #0]
 80276e8:	68fb      	ldr	r3, [r7, #12]
 80276ea:	681b      	ldr	r3, [r3, #0]
 80276ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80276f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80276f2:	68fb      	ldr	r3, [r7, #12]
 80276f4:	68db      	ldr	r3, [r3, #12]
 80276f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80276fa:	d14b      	bne.n	8027794 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80276fc:	68fb      	ldr	r3, [r7, #12]
 80276fe:	685b      	ldr	r3, [r3, #4]
 8027700:	2b00      	cmp	r3, #0
 8027702:	d002      	beq.n	802770a <HAL_SPI_Transmit+0xf6>
 8027704:	8afb      	ldrh	r3, [r7, #22]
 8027706:	2b01      	cmp	r3, #1
 8027708:	d13e      	bne.n	8027788 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802770a:	68fb      	ldr	r3, [r7, #12]
 802770c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802770e:	881a      	ldrh	r2, [r3, #0]
 8027710:	68fb      	ldr	r3, [r7, #12]
 8027712:	681b      	ldr	r3, [r3, #0]
 8027714:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8027716:	68fb      	ldr	r3, [r7, #12]
 8027718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802771a:	1c9a      	adds	r2, r3, #2
 802771c:	68fb      	ldr	r3, [r7, #12]
 802771e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027720:	68fb      	ldr	r3, [r7, #12]
 8027722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027724:	b29b      	uxth	r3, r3
 8027726:	3b01      	subs	r3, #1
 8027728:	b29a      	uxth	r2, r3
 802772a:	68fb      	ldr	r3, [r7, #12]
 802772c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 802772e:	e02b      	b.n	8027788 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8027730:	68fb      	ldr	r3, [r7, #12]
 8027732:	681b      	ldr	r3, [r3, #0]
 8027734:	689b      	ldr	r3, [r3, #8]
 8027736:	f003 0302 	and.w	r3, r3, #2
 802773a:	2b02      	cmp	r3, #2
 802773c:	d112      	bne.n	8027764 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802773e:	68fb      	ldr	r3, [r7, #12]
 8027740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027742:	881a      	ldrh	r2, [r3, #0]
 8027744:	68fb      	ldr	r3, [r7, #12]
 8027746:	681b      	ldr	r3, [r3, #0]
 8027748:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802774a:	68fb      	ldr	r3, [r7, #12]
 802774c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802774e:	1c9a      	adds	r2, r3, #2
 8027750:	68fb      	ldr	r3, [r7, #12]
 8027752:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027754:	68fb      	ldr	r3, [r7, #12]
 8027756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027758:	b29b      	uxth	r3, r3
 802775a:	3b01      	subs	r3, #1
 802775c:	b29a      	uxth	r2, r3
 802775e:	68fb      	ldr	r3, [r7, #12]
 8027760:	86da      	strh	r2, [r3, #54]	; 0x36
 8027762:	e011      	b.n	8027788 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027764:	f7fb fbac 	bl	8022ec0 <HAL_GetTick>
 8027768:	4602      	mov	r2, r0
 802776a:	69bb      	ldr	r3, [r7, #24]
 802776c:	1ad3      	subs	r3, r2, r3
 802776e:	683a      	ldr	r2, [r7, #0]
 8027770:	429a      	cmp	r2, r3
 8027772:	d803      	bhi.n	802777c <HAL_SPI_Transmit+0x168>
 8027774:	683b      	ldr	r3, [r7, #0]
 8027776:	f1b3 3fff 	cmp.w	r3, #4294967295
 802777a:	d102      	bne.n	8027782 <HAL_SPI_Transmit+0x16e>
 802777c:	683b      	ldr	r3, [r7, #0]
 802777e:	2b00      	cmp	r3, #0
 8027780:	d102      	bne.n	8027788 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8027782:	2303      	movs	r3, #3
 8027784:	77fb      	strb	r3, [r7, #31]
          goto error;
 8027786:	e074      	b.n	8027872 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8027788:	68fb      	ldr	r3, [r7, #12]
 802778a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802778c:	b29b      	uxth	r3, r3
 802778e:	2b00      	cmp	r3, #0
 8027790:	d1ce      	bne.n	8027730 <HAL_SPI_Transmit+0x11c>
 8027792:	e04c      	b.n	802782e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027794:	68fb      	ldr	r3, [r7, #12]
 8027796:	685b      	ldr	r3, [r3, #4]
 8027798:	2b00      	cmp	r3, #0
 802779a:	d002      	beq.n	80277a2 <HAL_SPI_Transmit+0x18e>
 802779c:	8afb      	ldrh	r3, [r7, #22]
 802779e:	2b01      	cmp	r3, #1
 80277a0:	d140      	bne.n	8027824 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80277a2:	68fb      	ldr	r3, [r7, #12]
 80277a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80277a6:	68fb      	ldr	r3, [r7, #12]
 80277a8:	681b      	ldr	r3, [r3, #0]
 80277aa:	330c      	adds	r3, #12
 80277ac:	7812      	ldrb	r2, [r2, #0]
 80277ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80277b0:	68fb      	ldr	r3, [r7, #12]
 80277b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80277b4:	1c5a      	adds	r2, r3, #1
 80277b6:	68fb      	ldr	r3, [r7, #12]
 80277b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80277ba:	68fb      	ldr	r3, [r7, #12]
 80277bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80277be:	b29b      	uxth	r3, r3
 80277c0:	3b01      	subs	r3, #1
 80277c2:	b29a      	uxth	r2, r3
 80277c4:	68fb      	ldr	r3, [r7, #12]
 80277c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80277c8:	e02c      	b.n	8027824 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80277ca:	68fb      	ldr	r3, [r7, #12]
 80277cc:	681b      	ldr	r3, [r3, #0]
 80277ce:	689b      	ldr	r3, [r3, #8]
 80277d0:	f003 0302 	and.w	r3, r3, #2
 80277d4:	2b02      	cmp	r3, #2
 80277d6:	d113      	bne.n	8027800 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80277d8:	68fb      	ldr	r3, [r7, #12]
 80277da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80277dc:	68fb      	ldr	r3, [r7, #12]
 80277de:	681b      	ldr	r3, [r3, #0]
 80277e0:	330c      	adds	r3, #12
 80277e2:	7812      	ldrb	r2, [r2, #0]
 80277e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80277e6:	68fb      	ldr	r3, [r7, #12]
 80277e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80277ea:	1c5a      	adds	r2, r3, #1
 80277ec:	68fb      	ldr	r3, [r7, #12]
 80277ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80277f0:	68fb      	ldr	r3, [r7, #12]
 80277f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80277f4:	b29b      	uxth	r3, r3
 80277f6:	3b01      	subs	r3, #1
 80277f8:	b29a      	uxth	r2, r3
 80277fa:	68fb      	ldr	r3, [r7, #12]
 80277fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80277fe:	e011      	b.n	8027824 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027800:	f7fb fb5e 	bl	8022ec0 <HAL_GetTick>
 8027804:	4602      	mov	r2, r0
 8027806:	69bb      	ldr	r3, [r7, #24]
 8027808:	1ad3      	subs	r3, r2, r3
 802780a:	683a      	ldr	r2, [r7, #0]
 802780c:	429a      	cmp	r2, r3
 802780e:	d803      	bhi.n	8027818 <HAL_SPI_Transmit+0x204>
 8027810:	683b      	ldr	r3, [r7, #0]
 8027812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027816:	d102      	bne.n	802781e <HAL_SPI_Transmit+0x20a>
 8027818:	683b      	ldr	r3, [r7, #0]
 802781a:	2b00      	cmp	r3, #0
 802781c:	d102      	bne.n	8027824 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 802781e:	2303      	movs	r3, #3
 8027820:	77fb      	strb	r3, [r7, #31]
          goto error;
 8027822:	e026      	b.n	8027872 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8027824:	68fb      	ldr	r3, [r7, #12]
 8027826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027828:	b29b      	uxth	r3, r3
 802782a:	2b00      	cmp	r3, #0
 802782c:	d1cd      	bne.n	80277ca <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802782e:	69ba      	ldr	r2, [r7, #24]
 8027830:	6839      	ldr	r1, [r7, #0]
 8027832:	68f8      	ldr	r0, [r7, #12]
 8027834:	f000 fbda 	bl	8027fec <SPI_EndRxTxTransaction>
 8027838:	4603      	mov	r3, r0
 802783a:	2b00      	cmp	r3, #0
 802783c:	d002      	beq.n	8027844 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802783e:	68fb      	ldr	r3, [r7, #12]
 8027840:	2220      	movs	r2, #32
 8027842:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8027844:	68fb      	ldr	r3, [r7, #12]
 8027846:	689b      	ldr	r3, [r3, #8]
 8027848:	2b00      	cmp	r3, #0
 802784a:	d10a      	bne.n	8027862 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802784c:	2300      	movs	r3, #0
 802784e:	613b      	str	r3, [r7, #16]
 8027850:	68fb      	ldr	r3, [r7, #12]
 8027852:	681b      	ldr	r3, [r3, #0]
 8027854:	68db      	ldr	r3, [r3, #12]
 8027856:	613b      	str	r3, [r7, #16]
 8027858:	68fb      	ldr	r3, [r7, #12]
 802785a:	681b      	ldr	r3, [r3, #0]
 802785c:	689b      	ldr	r3, [r3, #8]
 802785e:	613b      	str	r3, [r7, #16]
 8027860:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8027862:	68fb      	ldr	r3, [r7, #12]
 8027864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027866:	2b00      	cmp	r3, #0
 8027868:	d002      	beq.n	8027870 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 802786a:	2301      	movs	r3, #1
 802786c:	77fb      	strb	r3, [r7, #31]
 802786e:	e000      	b.n	8027872 <HAL_SPI_Transmit+0x25e>
  }

error:
 8027870:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027872:	68fb      	ldr	r3, [r7, #12]
 8027874:	2201      	movs	r2, #1
 8027876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 802787a:	68fb      	ldr	r3, [r7, #12]
 802787c:	2200      	movs	r2, #0
 802787e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027882:	7ffb      	ldrb	r3, [r7, #31]
}
 8027884:	4618      	mov	r0, r3
 8027886:	3720      	adds	r7, #32
 8027888:	46bd      	mov	sp, r7
 802788a:	bd80      	pop	{r7, pc}

0802788c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802788c:	b580      	push	{r7, lr}
 802788e:	b088      	sub	sp, #32
 8027890:	af02      	add	r7, sp, #8
 8027892:	60f8      	str	r0, [r7, #12]
 8027894:	60b9      	str	r1, [r7, #8]
 8027896:	603b      	str	r3, [r7, #0]
 8027898:	4613      	mov	r3, r2
 802789a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 802789c:	2300      	movs	r3, #0
 802789e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80278a0:	68fb      	ldr	r3, [r7, #12]
 80278a2:	685b      	ldr	r3, [r3, #4]
 80278a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80278a8:	d112      	bne.n	80278d0 <HAL_SPI_Receive+0x44>
 80278aa:	68fb      	ldr	r3, [r7, #12]
 80278ac:	689b      	ldr	r3, [r3, #8]
 80278ae:	2b00      	cmp	r3, #0
 80278b0:	d10e      	bne.n	80278d0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80278b2:	68fb      	ldr	r3, [r7, #12]
 80278b4:	2204      	movs	r2, #4
 80278b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80278ba:	88fa      	ldrh	r2, [r7, #6]
 80278bc:	683b      	ldr	r3, [r7, #0]
 80278be:	9300      	str	r3, [sp, #0]
 80278c0:	4613      	mov	r3, r2
 80278c2:	68ba      	ldr	r2, [r7, #8]
 80278c4:	68b9      	ldr	r1, [r7, #8]
 80278c6:	68f8      	ldr	r0, [r7, #12]
 80278c8:	f000 f8f1 	bl	8027aae <HAL_SPI_TransmitReceive>
 80278cc:	4603      	mov	r3, r0
 80278ce:	e0ea      	b.n	8027aa6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80278d0:	68fb      	ldr	r3, [r7, #12]
 80278d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80278d6:	2b01      	cmp	r3, #1
 80278d8:	d101      	bne.n	80278de <HAL_SPI_Receive+0x52>
 80278da:	2302      	movs	r3, #2
 80278dc:	e0e3      	b.n	8027aa6 <HAL_SPI_Receive+0x21a>
 80278de:	68fb      	ldr	r3, [r7, #12]
 80278e0:	2201      	movs	r2, #1
 80278e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80278e6:	f7fb faeb 	bl	8022ec0 <HAL_GetTick>
 80278ea:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80278ec:	68fb      	ldr	r3, [r7, #12]
 80278ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80278f2:	b2db      	uxtb	r3, r3
 80278f4:	2b01      	cmp	r3, #1
 80278f6:	d002      	beq.n	80278fe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80278f8:	2302      	movs	r3, #2
 80278fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80278fc:	e0ca      	b.n	8027a94 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80278fe:	68bb      	ldr	r3, [r7, #8]
 8027900:	2b00      	cmp	r3, #0
 8027902:	d002      	beq.n	802790a <HAL_SPI_Receive+0x7e>
 8027904:	88fb      	ldrh	r3, [r7, #6]
 8027906:	2b00      	cmp	r3, #0
 8027908:	d102      	bne.n	8027910 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 802790a:	2301      	movs	r3, #1
 802790c:	75fb      	strb	r3, [r7, #23]
    goto error;
 802790e:	e0c1      	b.n	8027a94 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8027910:	68fb      	ldr	r3, [r7, #12]
 8027912:	2204      	movs	r2, #4
 8027914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027918:	68fb      	ldr	r3, [r7, #12]
 802791a:	2200      	movs	r2, #0
 802791c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 802791e:	68fb      	ldr	r3, [r7, #12]
 8027920:	68ba      	ldr	r2, [r7, #8]
 8027922:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8027924:	68fb      	ldr	r3, [r7, #12]
 8027926:	88fa      	ldrh	r2, [r7, #6]
 8027928:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 802792a:	68fb      	ldr	r3, [r7, #12]
 802792c:	88fa      	ldrh	r2, [r7, #6]
 802792e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8027930:	68fb      	ldr	r3, [r7, #12]
 8027932:	2200      	movs	r2, #0
 8027934:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8027936:	68fb      	ldr	r3, [r7, #12]
 8027938:	2200      	movs	r2, #0
 802793a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 802793c:	68fb      	ldr	r3, [r7, #12]
 802793e:	2200      	movs	r2, #0
 8027940:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8027942:	68fb      	ldr	r3, [r7, #12]
 8027944:	2200      	movs	r2, #0
 8027946:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8027948:	68fb      	ldr	r3, [r7, #12]
 802794a:	2200      	movs	r2, #0
 802794c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802794e:	68fb      	ldr	r3, [r7, #12]
 8027950:	689b      	ldr	r3, [r3, #8]
 8027952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027956:	d10f      	bne.n	8027978 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8027958:	68fb      	ldr	r3, [r7, #12]
 802795a:	681b      	ldr	r3, [r3, #0]
 802795c:	681a      	ldr	r2, [r3, #0]
 802795e:	68fb      	ldr	r3, [r7, #12]
 8027960:	681b      	ldr	r3, [r3, #0]
 8027962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027966:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8027968:	68fb      	ldr	r3, [r7, #12]
 802796a:	681b      	ldr	r3, [r3, #0]
 802796c:	681a      	ldr	r2, [r3, #0]
 802796e:	68fb      	ldr	r3, [r7, #12]
 8027970:	681b      	ldr	r3, [r3, #0]
 8027972:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8027976:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8027978:	68fb      	ldr	r3, [r7, #12]
 802797a:	681b      	ldr	r3, [r3, #0]
 802797c:	681b      	ldr	r3, [r3, #0]
 802797e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027982:	2b40      	cmp	r3, #64	; 0x40
 8027984:	d007      	beq.n	8027996 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8027986:	68fb      	ldr	r3, [r7, #12]
 8027988:	681b      	ldr	r3, [r3, #0]
 802798a:	681a      	ldr	r2, [r3, #0]
 802798c:	68fb      	ldr	r3, [r7, #12]
 802798e:	681b      	ldr	r3, [r3, #0]
 8027990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027994:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8027996:	68fb      	ldr	r3, [r7, #12]
 8027998:	68db      	ldr	r3, [r3, #12]
 802799a:	2b00      	cmp	r3, #0
 802799c:	d162      	bne.n	8027a64 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 802799e:	e02e      	b.n	80279fe <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80279a0:	68fb      	ldr	r3, [r7, #12]
 80279a2:	681b      	ldr	r3, [r3, #0]
 80279a4:	689b      	ldr	r3, [r3, #8]
 80279a6:	f003 0301 	and.w	r3, r3, #1
 80279aa:	2b01      	cmp	r3, #1
 80279ac:	d115      	bne.n	80279da <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80279ae:	68fb      	ldr	r3, [r7, #12]
 80279b0:	681b      	ldr	r3, [r3, #0]
 80279b2:	f103 020c 	add.w	r2, r3, #12
 80279b6:	68fb      	ldr	r3, [r7, #12]
 80279b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80279ba:	7812      	ldrb	r2, [r2, #0]
 80279bc:	b2d2      	uxtb	r2, r2
 80279be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80279c0:	68fb      	ldr	r3, [r7, #12]
 80279c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80279c4:	1c5a      	adds	r2, r3, #1
 80279c6:	68fb      	ldr	r3, [r7, #12]
 80279c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80279ca:	68fb      	ldr	r3, [r7, #12]
 80279cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80279ce:	b29b      	uxth	r3, r3
 80279d0:	3b01      	subs	r3, #1
 80279d2:	b29a      	uxth	r2, r3
 80279d4:	68fb      	ldr	r3, [r7, #12]
 80279d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80279d8:	e011      	b.n	80279fe <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80279da:	f7fb fa71 	bl	8022ec0 <HAL_GetTick>
 80279de:	4602      	mov	r2, r0
 80279e0:	693b      	ldr	r3, [r7, #16]
 80279e2:	1ad3      	subs	r3, r2, r3
 80279e4:	683a      	ldr	r2, [r7, #0]
 80279e6:	429a      	cmp	r2, r3
 80279e8:	d803      	bhi.n	80279f2 <HAL_SPI_Receive+0x166>
 80279ea:	683b      	ldr	r3, [r7, #0]
 80279ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80279f0:	d102      	bne.n	80279f8 <HAL_SPI_Receive+0x16c>
 80279f2:	683b      	ldr	r3, [r7, #0]
 80279f4:	2b00      	cmp	r3, #0
 80279f6:	d102      	bne.n	80279fe <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80279f8:	2303      	movs	r3, #3
 80279fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80279fc:	e04a      	b.n	8027a94 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80279fe:	68fb      	ldr	r3, [r7, #12]
 8027a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027a02:	b29b      	uxth	r3, r3
 8027a04:	2b00      	cmp	r3, #0
 8027a06:	d1cb      	bne.n	80279a0 <HAL_SPI_Receive+0x114>
 8027a08:	e031      	b.n	8027a6e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8027a0a:	68fb      	ldr	r3, [r7, #12]
 8027a0c:	681b      	ldr	r3, [r3, #0]
 8027a0e:	689b      	ldr	r3, [r3, #8]
 8027a10:	f003 0301 	and.w	r3, r3, #1
 8027a14:	2b01      	cmp	r3, #1
 8027a16:	d113      	bne.n	8027a40 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8027a18:	68fb      	ldr	r3, [r7, #12]
 8027a1a:	681b      	ldr	r3, [r3, #0]
 8027a1c:	68da      	ldr	r2, [r3, #12]
 8027a1e:	68fb      	ldr	r3, [r7, #12]
 8027a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027a22:	b292      	uxth	r2, r2
 8027a24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8027a26:	68fb      	ldr	r3, [r7, #12]
 8027a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027a2a:	1c9a      	adds	r2, r3, #2
 8027a2c:	68fb      	ldr	r3, [r7, #12]
 8027a2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027a30:	68fb      	ldr	r3, [r7, #12]
 8027a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027a34:	b29b      	uxth	r3, r3
 8027a36:	3b01      	subs	r3, #1
 8027a38:	b29a      	uxth	r2, r3
 8027a3a:	68fb      	ldr	r3, [r7, #12]
 8027a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8027a3e:	e011      	b.n	8027a64 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027a40:	f7fb fa3e 	bl	8022ec0 <HAL_GetTick>
 8027a44:	4602      	mov	r2, r0
 8027a46:	693b      	ldr	r3, [r7, #16]
 8027a48:	1ad3      	subs	r3, r2, r3
 8027a4a:	683a      	ldr	r2, [r7, #0]
 8027a4c:	429a      	cmp	r2, r3
 8027a4e:	d803      	bhi.n	8027a58 <HAL_SPI_Receive+0x1cc>
 8027a50:	683b      	ldr	r3, [r7, #0]
 8027a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027a56:	d102      	bne.n	8027a5e <HAL_SPI_Receive+0x1d2>
 8027a58:	683b      	ldr	r3, [r7, #0]
 8027a5a:	2b00      	cmp	r3, #0
 8027a5c:	d102      	bne.n	8027a64 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8027a5e:	2303      	movs	r3, #3
 8027a60:	75fb      	strb	r3, [r7, #23]
          goto error;
 8027a62:	e017      	b.n	8027a94 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8027a64:	68fb      	ldr	r3, [r7, #12]
 8027a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027a68:	b29b      	uxth	r3, r3
 8027a6a:	2b00      	cmp	r3, #0
 8027a6c:	d1cd      	bne.n	8027a0a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027a6e:	693a      	ldr	r2, [r7, #16]
 8027a70:	6839      	ldr	r1, [r7, #0]
 8027a72:	68f8      	ldr	r0, [r7, #12]
 8027a74:	f000 fa54 	bl	8027f20 <SPI_EndRxTransaction>
 8027a78:	4603      	mov	r3, r0
 8027a7a:	2b00      	cmp	r3, #0
 8027a7c:	d002      	beq.n	8027a84 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027a7e:	68fb      	ldr	r3, [r7, #12]
 8027a80:	2220      	movs	r2, #32
 8027a82:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8027a84:	68fb      	ldr	r3, [r7, #12]
 8027a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027a88:	2b00      	cmp	r3, #0
 8027a8a:	d002      	beq.n	8027a92 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8027a8c:	2301      	movs	r3, #1
 8027a8e:	75fb      	strb	r3, [r7, #23]
 8027a90:	e000      	b.n	8027a94 <HAL_SPI_Receive+0x208>
  }

error :
 8027a92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027a94:	68fb      	ldr	r3, [r7, #12]
 8027a96:	2201      	movs	r2, #1
 8027a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8027a9c:	68fb      	ldr	r3, [r7, #12]
 8027a9e:	2200      	movs	r2, #0
 8027aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8027aa6:	4618      	mov	r0, r3
 8027aa8:	3718      	adds	r7, #24
 8027aaa:	46bd      	mov	sp, r7
 8027aac:	bd80      	pop	{r7, pc}

08027aae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8027aae:	b580      	push	{r7, lr}
 8027ab0:	b08c      	sub	sp, #48	; 0x30
 8027ab2:	af00      	add	r7, sp, #0
 8027ab4:	60f8      	str	r0, [r7, #12]
 8027ab6:	60b9      	str	r1, [r7, #8]
 8027ab8:	607a      	str	r2, [r7, #4]
 8027aba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8027abc:	2301      	movs	r3, #1
 8027abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8027ac0:	2300      	movs	r3, #0
 8027ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8027ac6:	68fb      	ldr	r3, [r7, #12]
 8027ac8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027acc:	2b01      	cmp	r3, #1
 8027ace:	d101      	bne.n	8027ad4 <HAL_SPI_TransmitReceive+0x26>
 8027ad0:	2302      	movs	r3, #2
 8027ad2:	e18a      	b.n	8027dea <HAL_SPI_TransmitReceive+0x33c>
 8027ad4:	68fb      	ldr	r3, [r7, #12]
 8027ad6:	2201      	movs	r2, #1
 8027ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027adc:	f7fb f9f0 	bl	8022ec0 <HAL_GetTick>
 8027ae0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8027ae2:	68fb      	ldr	r3, [r7, #12]
 8027ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8027aec:	68fb      	ldr	r3, [r7, #12]
 8027aee:	685b      	ldr	r3, [r3, #4]
 8027af0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8027af2:	887b      	ldrh	r3, [r7, #2]
 8027af4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8027af6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027afa:	2b01      	cmp	r3, #1
 8027afc:	d00f      	beq.n	8027b1e <HAL_SPI_TransmitReceive+0x70>
 8027afe:	69fb      	ldr	r3, [r7, #28]
 8027b00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027b04:	d107      	bne.n	8027b16 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8027b06:	68fb      	ldr	r3, [r7, #12]
 8027b08:	689b      	ldr	r3, [r3, #8]
 8027b0a:	2b00      	cmp	r3, #0
 8027b0c:	d103      	bne.n	8027b16 <HAL_SPI_TransmitReceive+0x68>
 8027b0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027b12:	2b04      	cmp	r3, #4
 8027b14:	d003      	beq.n	8027b1e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8027b16:	2302      	movs	r3, #2
 8027b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027b1c:	e15b      	b.n	8027dd6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8027b1e:	68bb      	ldr	r3, [r7, #8]
 8027b20:	2b00      	cmp	r3, #0
 8027b22:	d005      	beq.n	8027b30 <HAL_SPI_TransmitReceive+0x82>
 8027b24:	687b      	ldr	r3, [r7, #4]
 8027b26:	2b00      	cmp	r3, #0
 8027b28:	d002      	beq.n	8027b30 <HAL_SPI_TransmitReceive+0x82>
 8027b2a:	887b      	ldrh	r3, [r7, #2]
 8027b2c:	2b00      	cmp	r3, #0
 8027b2e:	d103      	bne.n	8027b38 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8027b30:	2301      	movs	r3, #1
 8027b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027b36:	e14e      	b.n	8027dd6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8027b38:	68fb      	ldr	r3, [r7, #12]
 8027b3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027b3e:	b2db      	uxtb	r3, r3
 8027b40:	2b04      	cmp	r3, #4
 8027b42:	d003      	beq.n	8027b4c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8027b44:	68fb      	ldr	r3, [r7, #12]
 8027b46:	2205      	movs	r2, #5
 8027b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027b4c:	68fb      	ldr	r3, [r7, #12]
 8027b4e:	2200      	movs	r2, #0
 8027b50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8027b52:	68fb      	ldr	r3, [r7, #12]
 8027b54:	687a      	ldr	r2, [r7, #4]
 8027b56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8027b58:	68fb      	ldr	r3, [r7, #12]
 8027b5a:	887a      	ldrh	r2, [r7, #2]
 8027b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8027b5e:	68fb      	ldr	r3, [r7, #12]
 8027b60:	887a      	ldrh	r2, [r7, #2]
 8027b62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8027b64:	68fb      	ldr	r3, [r7, #12]
 8027b66:	68ba      	ldr	r2, [r7, #8]
 8027b68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8027b6a:	68fb      	ldr	r3, [r7, #12]
 8027b6c:	887a      	ldrh	r2, [r7, #2]
 8027b6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8027b70:	68fb      	ldr	r3, [r7, #12]
 8027b72:	887a      	ldrh	r2, [r7, #2]
 8027b74:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8027b76:	68fb      	ldr	r3, [r7, #12]
 8027b78:	2200      	movs	r2, #0
 8027b7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8027b7c:	68fb      	ldr	r3, [r7, #12]
 8027b7e:	2200      	movs	r2, #0
 8027b80:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8027b82:	68fb      	ldr	r3, [r7, #12]
 8027b84:	681b      	ldr	r3, [r3, #0]
 8027b86:	681b      	ldr	r3, [r3, #0]
 8027b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027b8c:	2b40      	cmp	r3, #64	; 0x40
 8027b8e:	d007      	beq.n	8027ba0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8027b90:	68fb      	ldr	r3, [r7, #12]
 8027b92:	681b      	ldr	r3, [r3, #0]
 8027b94:	681a      	ldr	r2, [r3, #0]
 8027b96:	68fb      	ldr	r3, [r7, #12]
 8027b98:	681b      	ldr	r3, [r3, #0]
 8027b9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027b9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8027ba0:	68fb      	ldr	r3, [r7, #12]
 8027ba2:	68db      	ldr	r3, [r3, #12]
 8027ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8027ba8:	d178      	bne.n	8027c9c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027baa:	68fb      	ldr	r3, [r7, #12]
 8027bac:	685b      	ldr	r3, [r3, #4]
 8027bae:	2b00      	cmp	r3, #0
 8027bb0:	d002      	beq.n	8027bb8 <HAL_SPI_TransmitReceive+0x10a>
 8027bb2:	8b7b      	ldrh	r3, [r7, #26]
 8027bb4:	2b01      	cmp	r3, #1
 8027bb6:	d166      	bne.n	8027c86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027bb8:	68fb      	ldr	r3, [r7, #12]
 8027bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027bbc:	881a      	ldrh	r2, [r3, #0]
 8027bbe:	68fb      	ldr	r3, [r7, #12]
 8027bc0:	681b      	ldr	r3, [r3, #0]
 8027bc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8027bc4:	68fb      	ldr	r3, [r7, #12]
 8027bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027bc8:	1c9a      	adds	r2, r3, #2
 8027bca:	68fb      	ldr	r3, [r7, #12]
 8027bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027bce:	68fb      	ldr	r3, [r7, #12]
 8027bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027bd2:	b29b      	uxth	r3, r3
 8027bd4:	3b01      	subs	r3, #1
 8027bd6:	b29a      	uxth	r2, r3
 8027bd8:	68fb      	ldr	r3, [r7, #12]
 8027bda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027bdc:	e053      	b.n	8027c86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027bde:	68fb      	ldr	r3, [r7, #12]
 8027be0:	681b      	ldr	r3, [r3, #0]
 8027be2:	689b      	ldr	r3, [r3, #8]
 8027be4:	f003 0302 	and.w	r3, r3, #2
 8027be8:	2b02      	cmp	r3, #2
 8027bea:	d11b      	bne.n	8027c24 <HAL_SPI_TransmitReceive+0x176>
 8027bec:	68fb      	ldr	r3, [r7, #12]
 8027bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027bf0:	b29b      	uxth	r3, r3
 8027bf2:	2b00      	cmp	r3, #0
 8027bf4:	d016      	beq.n	8027c24 <HAL_SPI_TransmitReceive+0x176>
 8027bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027bf8:	2b01      	cmp	r3, #1
 8027bfa:	d113      	bne.n	8027c24 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027bfc:	68fb      	ldr	r3, [r7, #12]
 8027bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c00:	881a      	ldrh	r2, [r3, #0]
 8027c02:	68fb      	ldr	r3, [r7, #12]
 8027c04:	681b      	ldr	r3, [r3, #0]
 8027c06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8027c08:	68fb      	ldr	r3, [r7, #12]
 8027c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c0c:	1c9a      	adds	r2, r3, #2
 8027c0e:	68fb      	ldr	r3, [r7, #12]
 8027c10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027c12:	68fb      	ldr	r3, [r7, #12]
 8027c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027c16:	b29b      	uxth	r3, r3
 8027c18:	3b01      	subs	r3, #1
 8027c1a:	b29a      	uxth	r2, r3
 8027c1c:	68fb      	ldr	r3, [r7, #12]
 8027c1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027c20:	2300      	movs	r3, #0
 8027c22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027c24:	68fb      	ldr	r3, [r7, #12]
 8027c26:	681b      	ldr	r3, [r3, #0]
 8027c28:	689b      	ldr	r3, [r3, #8]
 8027c2a:	f003 0301 	and.w	r3, r3, #1
 8027c2e:	2b01      	cmp	r3, #1
 8027c30:	d119      	bne.n	8027c66 <HAL_SPI_TransmitReceive+0x1b8>
 8027c32:	68fb      	ldr	r3, [r7, #12]
 8027c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027c36:	b29b      	uxth	r3, r3
 8027c38:	2b00      	cmp	r3, #0
 8027c3a:	d014      	beq.n	8027c66 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8027c3c:	68fb      	ldr	r3, [r7, #12]
 8027c3e:	681b      	ldr	r3, [r3, #0]
 8027c40:	68da      	ldr	r2, [r3, #12]
 8027c42:	68fb      	ldr	r3, [r7, #12]
 8027c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027c46:	b292      	uxth	r2, r2
 8027c48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8027c4a:	68fb      	ldr	r3, [r7, #12]
 8027c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027c4e:	1c9a      	adds	r2, r3, #2
 8027c50:	68fb      	ldr	r3, [r7, #12]
 8027c52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027c54:	68fb      	ldr	r3, [r7, #12]
 8027c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027c58:	b29b      	uxth	r3, r3
 8027c5a:	3b01      	subs	r3, #1
 8027c5c:	b29a      	uxth	r2, r3
 8027c5e:	68fb      	ldr	r3, [r7, #12]
 8027c60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8027c62:	2301      	movs	r3, #1
 8027c64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8027c66:	f7fb f92b 	bl	8022ec0 <HAL_GetTick>
 8027c6a:	4602      	mov	r2, r0
 8027c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c6e:	1ad3      	subs	r3, r2, r3
 8027c70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027c72:	429a      	cmp	r2, r3
 8027c74:	d807      	bhi.n	8027c86 <HAL_SPI_TransmitReceive+0x1d8>
 8027c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027c7c:	d003      	beq.n	8027c86 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8027c7e:	2303      	movs	r3, #3
 8027c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8027c84:	e0a7      	b.n	8027dd6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027c86:	68fb      	ldr	r3, [r7, #12]
 8027c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027c8a:	b29b      	uxth	r3, r3
 8027c8c:	2b00      	cmp	r3, #0
 8027c8e:	d1a6      	bne.n	8027bde <HAL_SPI_TransmitReceive+0x130>
 8027c90:	68fb      	ldr	r3, [r7, #12]
 8027c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027c94:	b29b      	uxth	r3, r3
 8027c96:	2b00      	cmp	r3, #0
 8027c98:	d1a1      	bne.n	8027bde <HAL_SPI_TransmitReceive+0x130>
 8027c9a:	e07c      	b.n	8027d96 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027c9c:	68fb      	ldr	r3, [r7, #12]
 8027c9e:	685b      	ldr	r3, [r3, #4]
 8027ca0:	2b00      	cmp	r3, #0
 8027ca2:	d002      	beq.n	8027caa <HAL_SPI_TransmitReceive+0x1fc>
 8027ca4:	8b7b      	ldrh	r3, [r7, #26]
 8027ca6:	2b01      	cmp	r3, #1
 8027ca8:	d16b      	bne.n	8027d82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027caa:	68fb      	ldr	r3, [r7, #12]
 8027cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027cae:	68fb      	ldr	r3, [r7, #12]
 8027cb0:	681b      	ldr	r3, [r3, #0]
 8027cb2:	330c      	adds	r3, #12
 8027cb4:	7812      	ldrb	r2, [r2, #0]
 8027cb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8027cb8:	68fb      	ldr	r3, [r7, #12]
 8027cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027cbc:	1c5a      	adds	r2, r3, #1
 8027cbe:	68fb      	ldr	r3, [r7, #12]
 8027cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027cc2:	68fb      	ldr	r3, [r7, #12]
 8027cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027cc6:	b29b      	uxth	r3, r3
 8027cc8:	3b01      	subs	r3, #1
 8027cca:	b29a      	uxth	r2, r3
 8027ccc:	68fb      	ldr	r3, [r7, #12]
 8027cce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027cd0:	e057      	b.n	8027d82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027cd2:	68fb      	ldr	r3, [r7, #12]
 8027cd4:	681b      	ldr	r3, [r3, #0]
 8027cd6:	689b      	ldr	r3, [r3, #8]
 8027cd8:	f003 0302 	and.w	r3, r3, #2
 8027cdc:	2b02      	cmp	r3, #2
 8027cde:	d11c      	bne.n	8027d1a <HAL_SPI_TransmitReceive+0x26c>
 8027ce0:	68fb      	ldr	r3, [r7, #12]
 8027ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027ce4:	b29b      	uxth	r3, r3
 8027ce6:	2b00      	cmp	r3, #0
 8027ce8:	d017      	beq.n	8027d1a <HAL_SPI_TransmitReceive+0x26c>
 8027cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027cec:	2b01      	cmp	r3, #1
 8027cee:	d114      	bne.n	8027d1a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8027cf0:	68fb      	ldr	r3, [r7, #12]
 8027cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027cf4:	68fb      	ldr	r3, [r7, #12]
 8027cf6:	681b      	ldr	r3, [r3, #0]
 8027cf8:	330c      	adds	r3, #12
 8027cfa:	7812      	ldrb	r2, [r2, #0]
 8027cfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8027cfe:	68fb      	ldr	r3, [r7, #12]
 8027d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027d02:	1c5a      	adds	r2, r3, #1
 8027d04:	68fb      	ldr	r3, [r7, #12]
 8027d06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027d08:	68fb      	ldr	r3, [r7, #12]
 8027d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027d0c:	b29b      	uxth	r3, r3
 8027d0e:	3b01      	subs	r3, #1
 8027d10:	b29a      	uxth	r2, r3
 8027d12:	68fb      	ldr	r3, [r7, #12]
 8027d14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027d16:	2300      	movs	r3, #0
 8027d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027d1a:	68fb      	ldr	r3, [r7, #12]
 8027d1c:	681b      	ldr	r3, [r3, #0]
 8027d1e:	689b      	ldr	r3, [r3, #8]
 8027d20:	f003 0301 	and.w	r3, r3, #1
 8027d24:	2b01      	cmp	r3, #1
 8027d26:	d119      	bne.n	8027d5c <HAL_SPI_TransmitReceive+0x2ae>
 8027d28:	68fb      	ldr	r3, [r7, #12]
 8027d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027d2c:	b29b      	uxth	r3, r3
 8027d2e:	2b00      	cmp	r3, #0
 8027d30:	d014      	beq.n	8027d5c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8027d32:	68fb      	ldr	r3, [r7, #12]
 8027d34:	681b      	ldr	r3, [r3, #0]
 8027d36:	68da      	ldr	r2, [r3, #12]
 8027d38:	68fb      	ldr	r3, [r7, #12]
 8027d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027d3c:	b2d2      	uxtb	r2, r2
 8027d3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8027d40:	68fb      	ldr	r3, [r7, #12]
 8027d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027d44:	1c5a      	adds	r2, r3, #1
 8027d46:	68fb      	ldr	r3, [r7, #12]
 8027d48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027d4a:	68fb      	ldr	r3, [r7, #12]
 8027d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027d4e:	b29b      	uxth	r3, r3
 8027d50:	3b01      	subs	r3, #1
 8027d52:	b29a      	uxth	r2, r3
 8027d54:	68fb      	ldr	r3, [r7, #12]
 8027d56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8027d58:	2301      	movs	r3, #1
 8027d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8027d5c:	f7fb f8b0 	bl	8022ec0 <HAL_GetTick>
 8027d60:	4602      	mov	r2, r0
 8027d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027d64:	1ad3      	subs	r3, r2, r3
 8027d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027d68:	429a      	cmp	r2, r3
 8027d6a:	d803      	bhi.n	8027d74 <HAL_SPI_TransmitReceive+0x2c6>
 8027d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027d72:	d102      	bne.n	8027d7a <HAL_SPI_TransmitReceive+0x2cc>
 8027d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027d76:	2b00      	cmp	r3, #0
 8027d78:	d103      	bne.n	8027d82 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8027d7a:	2303      	movs	r3, #3
 8027d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8027d80:	e029      	b.n	8027dd6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027d82:	68fb      	ldr	r3, [r7, #12]
 8027d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027d86:	b29b      	uxth	r3, r3
 8027d88:	2b00      	cmp	r3, #0
 8027d8a:	d1a2      	bne.n	8027cd2 <HAL_SPI_TransmitReceive+0x224>
 8027d8c:	68fb      	ldr	r3, [r7, #12]
 8027d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027d90:	b29b      	uxth	r3, r3
 8027d92:	2b00      	cmp	r3, #0
 8027d94:	d19d      	bne.n	8027cd2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027d98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8027d9a:	68f8      	ldr	r0, [r7, #12]
 8027d9c:	f000 f926 	bl	8027fec <SPI_EndRxTxTransaction>
 8027da0:	4603      	mov	r3, r0
 8027da2:	2b00      	cmp	r3, #0
 8027da4:	d006      	beq.n	8027db4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8027da6:	2301      	movs	r3, #1
 8027da8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027dac:	68fb      	ldr	r3, [r7, #12]
 8027dae:	2220      	movs	r2, #32
 8027db0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8027db2:	e010      	b.n	8027dd6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8027db4:	68fb      	ldr	r3, [r7, #12]
 8027db6:	689b      	ldr	r3, [r3, #8]
 8027db8:	2b00      	cmp	r3, #0
 8027dba:	d10b      	bne.n	8027dd4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8027dbc:	2300      	movs	r3, #0
 8027dbe:	617b      	str	r3, [r7, #20]
 8027dc0:	68fb      	ldr	r3, [r7, #12]
 8027dc2:	681b      	ldr	r3, [r3, #0]
 8027dc4:	68db      	ldr	r3, [r3, #12]
 8027dc6:	617b      	str	r3, [r7, #20]
 8027dc8:	68fb      	ldr	r3, [r7, #12]
 8027dca:	681b      	ldr	r3, [r3, #0]
 8027dcc:	689b      	ldr	r3, [r3, #8]
 8027dce:	617b      	str	r3, [r7, #20]
 8027dd0:	697b      	ldr	r3, [r7, #20]
 8027dd2:	e000      	b.n	8027dd6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8027dd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027dd6:	68fb      	ldr	r3, [r7, #12]
 8027dd8:	2201      	movs	r2, #1
 8027dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8027dde:	68fb      	ldr	r3, [r7, #12]
 8027de0:	2200      	movs	r2, #0
 8027de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027de6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8027dea:	4618      	mov	r0, r3
 8027dec:	3730      	adds	r7, #48	; 0x30
 8027dee:	46bd      	mov	sp, r7
 8027df0:	bd80      	pop	{r7, pc}

08027df2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8027df2:	b480      	push	{r7}
 8027df4:	b083      	sub	sp, #12
 8027df6:	af00      	add	r7, sp, #0
 8027df8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8027dfa:	687b      	ldr	r3, [r7, #4]
 8027dfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027e00:	b2db      	uxtb	r3, r3
}
 8027e02:	4618      	mov	r0, r3
 8027e04:	370c      	adds	r7, #12
 8027e06:	46bd      	mov	sp, r7
 8027e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e0c:	4770      	bx	lr
	...

08027e10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8027e10:	b580      	push	{r7, lr}
 8027e12:	b088      	sub	sp, #32
 8027e14:	af00      	add	r7, sp, #0
 8027e16:	60f8      	str	r0, [r7, #12]
 8027e18:	60b9      	str	r1, [r7, #8]
 8027e1a:	603b      	str	r3, [r7, #0]
 8027e1c:	4613      	mov	r3, r2
 8027e1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8027e20:	f7fb f84e 	bl	8022ec0 <HAL_GetTick>
 8027e24:	4602      	mov	r2, r0
 8027e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027e28:	1a9b      	subs	r3, r3, r2
 8027e2a:	683a      	ldr	r2, [r7, #0]
 8027e2c:	4413      	add	r3, r2
 8027e2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8027e30:	f7fb f846 	bl	8022ec0 <HAL_GetTick>
 8027e34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8027e36:	4b39      	ldr	r3, [pc, #228]	; (8027f1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8027e38:	681b      	ldr	r3, [r3, #0]
 8027e3a:	015b      	lsls	r3, r3, #5
 8027e3c:	0d1b      	lsrs	r3, r3, #20
 8027e3e:	69fa      	ldr	r2, [r7, #28]
 8027e40:	fb02 f303 	mul.w	r3, r2, r3
 8027e44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8027e46:	e054      	b.n	8027ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8027e48:	683b      	ldr	r3, [r7, #0]
 8027e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027e4e:	d050      	beq.n	8027ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8027e50:	f7fb f836 	bl	8022ec0 <HAL_GetTick>
 8027e54:	4602      	mov	r2, r0
 8027e56:	69bb      	ldr	r3, [r7, #24]
 8027e58:	1ad3      	subs	r3, r2, r3
 8027e5a:	69fa      	ldr	r2, [r7, #28]
 8027e5c:	429a      	cmp	r2, r3
 8027e5e:	d902      	bls.n	8027e66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8027e60:	69fb      	ldr	r3, [r7, #28]
 8027e62:	2b00      	cmp	r3, #0
 8027e64:	d13d      	bne.n	8027ee2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8027e66:	68fb      	ldr	r3, [r7, #12]
 8027e68:	681b      	ldr	r3, [r3, #0]
 8027e6a:	685a      	ldr	r2, [r3, #4]
 8027e6c:	68fb      	ldr	r3, [r7, #12]
 8027e6e:	681b      	ldr	r3, [r3, #0]
 8027e70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8027e74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027e76:	68fb      	ldr	r3, [r7, #12]
 8027e78:	685b      	ldr	r3, [r3, #4]
 8027e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027e7e:	d111      	bne.n	8027ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8027e80:	68fb      	ldr	r3, [r7, #12]
 8027e82:	689b      	ldr	r3, [r3, #8]
 8027e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027e88:	d004      	beq.n	8027e94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8027e8a:	68fb      	ldr	r3, [r7, #12]
 8027e8c:	689b      	ldr	r3, [r3, #8]
 8027e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027e92:	d107      	bne.n	8027ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8027e94:	68fb      	ldr	r3, [r7, #12]
 8027e96:	681b      	ldr	r3, [r3, #0]
 8027e98:	681a      	ldr	r2, [r3, #0]
 8027e9a:	68fb      	ldr	r3, [r7, #12]
 8027e9c:	681b      	ldr	r3, [r3, #0]
 8027e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027ea2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8027ea4:	68fb      	ldr	r3, [r7, #12]
 8027ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027eac:	d10f      	bne.n	8027ece <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8027eae:	68fb      	ldr	r3, [r7, #12]
 8027eb0:	681b      	ldr	r3, [r3, #0]
 8027eb2:	681a      	ldr	r2, [r3, #0]
 8027eb4:	68fb      	ldr	r3, [r7, #12]
 8027eb6:	681b      	ldr	r3, [r3, #0]
 8027eb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8027ebc:	601a      	str	r2, [r3, #0]
 8027ebe:	68fb      	ldr	r3, [r7, #12]
 8027ec0:	681b      	ldr	r3, [r3, #0]
 8027ec2:	681a      	ldr	r2, [r3, #0]
 8027ec4:	68fb      	ldr	r3, [r7, #12]
 8027ec6:	681b      	ldr	r3, [r3, #0]
 8027ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8027ecc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8027ece:	68fb      	ldr	r3, [r7, #12]
 8027ed0:	2201      	movs	r2, #1
 8027ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8027ed6:	68fb      	ldr	r3, [r7, #12]
 8027ed8:	2200      	movs	r2, #0
 8027eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8027ede:	2303      	movs	r3, #3
 8027ee0:	e017      	b.n	8027f12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8027ee2:	697b      	ldr	r3, [r7, #20]
 8027ee4:	2b00      	cmp	r3, #0
 8027ee6:	d101      	bne.n	8027eec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8027ee8:	2300      	movs	r3, #0
 8027eea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8027eec:	697b      	ldr	r3, [r7, #20]
 8027eee:	3b01      	subs	r3, #1
 8027ef0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8027ef2:	68fb      	ldr	r3, [r7, #12]
 8027ef4:	681b      	ldr	r3, [r3, #0]
 8027ef6:	689a      	ldr	r2, [r3, #8]
 8027ef8:	68bb      	ldr	r3, [r7, #8]
 8027efa:	4013      	ands	r3, r2
 8027efc:	68ba      	ldr	r2, [r7, #8]
 8027efe:	429a      	cmp	r2, r3
 8027f00:	bf0c      	ite	eq
 8027f02:	2301      	moveq	r3, #1
 8027f04:	2300      	movne	r3, #0
 8027f06:	b2db      	uxtb	r3, r3
 8027f08:	461a      	mov	r2, r3
 8027f0a:	79fb      	ldrb	r3, [r7, #7]
 8027f0c:	429a      	cmp	r2, r3
 8027f0e:	d19b      	bne.n	8027e48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8027f10:	2300      	movs	r3, #0
}
 8027f12:	4618      	mov	r0, r3
 8027f14:	3720      	adds	r7, #32
 8027f16:	46bd      	mov	sp, r7
 8027f18:	bd80      	pop	{r7, pc}
 8027f1a:	bf00      	nop
 8027f1c:	20000000 	.word	0x20000000

08027f20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8027f20:	b580      	push	{r7, lr}
 8027f22:	b086      	sub	sp, #24
 8027f24:	af02      	add	r7, sp, #8
 8027f26:	60f8      	str	r0, [r7, #12]
 8027f28:	60b9      	str	r1, [r7, #8]
 8027f2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027f2c:	68fb      	ldr	r3, [r7, #12]
 8027f2e:	685b      	ldr	r3, [r3, #4]
 8027f30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027f34:	d111      	bne.n	8027f5a <SPI_EndRxTransaction+0x3a>
 8027f36:	68fb      	ldr	r3, [r7, #12]
 8027f38:	689b      	ldr	r3, [r3, #8]
 8027f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027f3e:	d004      	beq.n	8027f4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8027f40:	68fb      	ldr	r3, [r7, #12]
 8027f42:	689b      	ldr	r3, [r3, #8]
 8027f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027f48:	d107      	bne.n	8027f5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8027f4a:	68fb      	ldr	r3, [r7, #12]
 8027f4c:	681b      	ldr	r3, [r3, #0]
 8027f4e:	681a      	ldr	r2, [r3, #0]
 8027f50:	68fb      	ldr	r3, [r7, #12]
 8027f52:	681b      	ldr	r3, [r3, #0]
 8027f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027f58:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8027f5a:	68fb      	ldr	r3, [r7, #12]
 8027f5c:	685b      	ldr	r3, [r3, #4]
 8027f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027f62:	d12a      	bne.n	8027fba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8027f64:	68fb      	ldr	r3, [r7, #12]
 8027f66:	689b      	ldr	r3, [r3, #8]
 8027f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027f6c:	d012      	beq.n	8027f94 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8027f6e:	687b      	ldr	r3, [r7, #4]
 8027f70:	9300      	str	r3, [sp, #0]
 8027f72:	68bb      	ldr	r3, [r7, #8]
 8027f74:	2200      	movs	r2, #0
 8027f76:	2180      	movs	r1, #128	; 0x80
 8027f78:	68f8      	ldr	r0, [r7, #12]
 8027f7a:	f7ff ff49 	bl	8027e10 <SPI_WaitFlagStateUntilTimeout>
 8027f7e:	4603      	mov	r3, r0
 8027f80:	2b00      	cmp	r3, #0
 8027f82:	d02d      	beq.n	8027fe0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8027f84:	68fb      	ldr	r3, [r7, #12]
 8027f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027f88:	f043 0220 	orr.w	r2, r3, #32
 8027f8c:	68fb      	ldr	r3, [r7, #12]
 8027f8e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8027f90:	2303      	movs	r3, #3
 8027f92:	e026      	b.n	8027fe2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8027f94:	687b      	ldr	r3, [r7, #4]
 8027f96:	9300      	str	r3, [sp, #0]
 8027f98:	68bb      	ldr	r3, [r7, #8]
 8027f9a:	2200      	movs	r2, #0
 8027f9c:	2101      	movs	r1, #1
 8027f9e:	68f8      	ldr	r0, [r7, #12]
 8027fa0:	f7ff ff36 	bl	8027e10 <SPI_WaitFlagStateUntilTimeout>
 8027fa4:	4603      	mov	r3, r0
 8027fa6:	2b00      	cmp	r3, #0
 8027fa8:	d01a      	beq.n	8027fe0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8027faa:	68fb      	ldr	r3, [r7, #12]
 8027fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027fae:	f043 0220 	orr.w	r2, r3, #32
 8027fb2:	68fb      	ldr	r3, [r7, #12]
 8027fb4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8027fb6:	2303      	movs	r3, #3
 8027fb8:	e013      	b.n	8027fe2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8027fba:	687b      	ldr	r3, [r7, #4]
 8027fbc:	9300      	str	r3, [sp, #0]
 8027fbe:	68bb      	ldr	r3, [r7, #8]
 8027fc0:	2200      	movs	r2, #0
 8027fc2:	2101      	movs	r1, #1
 8027fc4:	68f8      	ldr	r0, [r7, #12]
 8027fc6:	f7ff ff23 	bl	8027e10 <SPI_WaitFlagStateUntilTimeout>
 8027fca:	4603      	mov	r3, r0
 8027fcc:	2b00      	cmp	r3, #0
 8027fce:	d007      	beq.n	8027fe0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8027fd0:	68fb      	ldr	r3, [r7, #12]
 8027fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027fd4:	f043 0220 	orr.w	r2, r3, #32
 8027fd8:	68fb      	ldr	r3, [r7, #12]
 8027fda:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8027fdc:	2303      	movs	r3, #3
 8027fde:	e000      	b.n	8027fe2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8027fe0:	2300      	movs	r3, #0
}
 8027fe2:	4618      	mov	r0, r3
 8027fe4:	3710      	adds	r7, #16
 8027fe6:	46bd      	mov	sp, r7
 8027fe8:	bd80      	pop	{r7, pc}
	...

08027fec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8027fec:	b580      	push	{r7, lr}
 8027fee:	b088      	sub	sp, #32
 8027ff0:	af02      	add	r7, sp, #8
 8027ff2:	60f8      	str	r0, [r7, #12]
 8027ff4:	60b9      	str	r1, [r7, #8]
 8027ff6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8027ff8:	4b1b      	ldr	r3, [pc, #108]	; (8028068 <SPI_EndRxTxTransaction+0x7c>)
 8027ffa:	681b      	ldr	r3, [r3, #0]
 8027ffc:	4a1b      	ldr	r2, [pc, #108]	; (802806c <SPI_EndRxTxTransaction+0x80>)
 8027ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8028002:	0d5b      	lsrs	r3, r3, #21
 8028004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8028008:	fb02 f303 	mul.w	r3, r2, r3
 802800c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802800e:	68fb      	ldr	r3, [r7, #12]
 8028010:	685b      	ldr	r3, [r3, #4]
 8028012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028016:	d112      	bne.n	802803e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028018:	687b      	ldr	r3, [r7, #4]
 802801a:	9300      	str	r3, [sp, #0]
 802801c:	68bb      	ldr	r3, [r7, #8]
 802801e:	2200      	movs	r2, #0
 8028020:	2180      	movs	r1, #128	; 0x80
 8028022:	68f8      	ldr	r0, [r7, #12]
 8028024:	f7ff fef4 	bl	8027e10 <SPI_WaitFlagStateUntilTimeout>
 8028028:	4603      	mov	r3, r0
 802802a:	2b00      	cmp	r3, #0
 802802c:	d016      	beq.n	802805c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802802e:	68fb      	ldr	r3, [r7, #12]
 8028030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028032:	f043 0220 	orr.w	r2, r3, #32
 8028036:	68fb      	ldr	r3, [r7, #12]
 8028038:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802803a:	2303      	movs	r3, #3
 802803c:	e00f      	b.n	802805e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 802803e:	697b      	ldr	r3, [r7, #20]
 8028040:	2b00      	cmp	r3, #0
 8028042:	d00a      	beq.n	802805a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8028044:	697b      	ldr	r3, [r7, #20]
 8028046:	3b01      	subs	r3, #1
 8028048:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 802804a:	68fb      	ldr	r3, [r7, #12]
 802804c:	681b      	ldr	r3, [r3, #0]
 802804e:	689b      	ldr	r3, [r3, #8]
 8028050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028054:	2b80      	cmp	r3, #128	; 0x80
 8028056:	d0f2      	beq.n	802803e <SPI_EndRxTxTransaction+0x52>
 8028058:	e000      	b.n	802805c <SPI_EndRxTxTransaction+0x70>
        break;
 802805a:	bf00      	nop
  }

  return HAL_OK;
 802805c:	2300      	movs	r3, #0
}
 802805e:	4618      	mov	r0, r3
 8028060:	3718      	adds	r7, #24
 8028062:	46bd      	mov	sp, r7
 8028064:	bd80      	pop	{r7, pc}
 8028066:	bf00      	nop
 8028068:	20000000 	.word	0x20000000
 802806c:	165e9f81 	.word	0x165e9f81

08028070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8028070:	b580      	push	{r7, lr}
 8028072:	b082      	sub	sp, #8
 8028074:	af00      	add	r7, sp, #0
 8028076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8028078:	687b      	ldr	r3, [r7, #4]
 802807a:	2b00      	cmp	r3, #0
 802807c:	d101      	bne.n	8028082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802807e:	2301      	movs	r3, #1
 8028080:	e041      	b.n	8028106 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8028082:	687b      	ldr	r3, [r7, #4]
 8028084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028088:	b2db      	uxtb	r3, r3
 802808a:	2b00      	cmp	r3, #0
 802808c:	d106      	bne.n	802809c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802808e:	687b      	ldr	r3, [r7, #4]
 8028090:	2200      	movs	r2, #0
 8028092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8028096:	6878      	ldr	r0, [r7, #4]
 8028098:	f7f9 f97e 	bl	8021398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802809c:	687b      	ldr	r3, [r7, #4]
 802809e:	2202      	movs	r2, #2
 80280a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80280a4:	687b      	ldr	r3, [r7, #4]
 80280a6:	681a      	ldr	r2, [r3, #0]
 80280a8:	687b      	ldr	r3, [r7, #4]
 80280aa:	3304      	adds	r3, #4
 80280ac:	4619      	mov	r1, r3
 80280ae:	4610      	mov	r0, r2
 80280b0:	f000 fa96 	bl	80285e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80280b4:	687b      	ldr	r3, [r7, #4]
 80280b6:	2201      	movs	r2, #1
 80280b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80280bc:	687b      	ldr	r3, [r7, #4]
 80280be:	2201      	movs	r2, #1
 80280c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80280c4:	687b      	ldr	r3, [r7, #4]
 80280c6:	2201      	movs	r2, #1
 80280c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80280cc:	687b      	ldr	r3, [r7, #4]
 80280ce:	2201      	movs	r2, #1
 80280d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80280d4:	687b      	ldr	r3, [r7, #4]
 80280d6:	2201      	movs	r2, #1
 80280d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80280dc:	687b      	ldr	r3, [r7, #4]
 80280de:	2201      	movs	r2, #1
 80280e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80280e4:	687b      	ldr	r3, [r7, #4]
 80280e6:	2201      	movs	r2, #1
 80280e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80280ec:	687b      	ldr	r3, [r7, #4]
 80280ee:	2201      	movs	r2, #1
 80280f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80280f4:	687b      	ldr	r3, [r7, #4]
 80280f6:	2201      	movs	r2, #1
 80280f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80280fc:	687b      	ldr	r3, [r7, #4]
 80280fe:	2201      	movs	r2, #1
 8028100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8028104:	2300      	movs	r3, #0
}
 8028106:	4618      	mov	r0, r3
 8028108:	3708      	adds	r7, #8
 802810a:	46bd      	mov	sp, r7
 802810c:	bd80      	pop	{r7, pc}
	...

08028110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8028110:	b480      	push	{r7}
 8028112:	b085      	sub	sp, #20
 8028114:	af00      	add	r7, sp, #0
 8028116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8028118:	687b      	ldr	r3, [r7, #4]
 802811a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802811e:	b2db      	uxtb	r3, r3
 8028120:	2b01      	cmp	r3, #1
 8028122:	d001      	beq.n	8028128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8028124:	2301      	movs	r3, #1
 8028126:	e04e      	b.n	80281c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028128:	687b      	ldr	r3, [r7, #4]
 802812a:	2202      	movs	r2, #2
 802812c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8028130:	687b      	ldr	r3, [r7, #4]
 8028132:	681b      	ldr	r3, [r3, #0]
 8028134:	68da      	ldr	r2, [r3, #12]
 8028136:	687b      	ldr	r3, [r7, #4]
 8028138:	681b      	ldr	r3, [r3, #0]
 802813a:	f042 0201 	orr.w	r2, r2, #1
 802813e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028140:	687b      	ldr	r3, [r7, #4]
 8028142:	681b      	ldr	r3, [r3, #0]
 8028144:	4a23      	ldr	r2, [pc, #140]	; (80281d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8028146:	4293      	cmp	r3, r2
 8028148:	d022      	beq.n	8028190 <HAL_TIM_Base_Start_IT+0x80>
 802814a:	687b      	ldr	r3, [r7, #4]
 802814c:	681b      	ldr	r3, [r3, #0]
 802814e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028152:	d01d      	beq.n	8028190 <HAL_TIM_Base_Start_IT+0x80>
 8028154:	687b      	ldr	r3, [r7, #4]
 8028156:	681b      	ldr	r3, [r3, #0]
 8028158:	4a1f      	ldr	r2, [pc, #124]	; (80281d8 <HAL_TIM_Base_Start_IT+0xc8>)
 802815a:	4293      	cmp	r3, r2
 802815c:	d018      	beq.n	8028190 <HAL_TIM_Base_Start_IT+0x80>
 802815e:	687b      	ldr	r3, [r7, #4]
 8028160:	681b      	ldr	r3, [r3, #0]
 8028162:	4a1e      	ldr	r2, [pc, #120]	; (80281dc <HAL_TIM_Base_Start_IT+0xcc>)
 8028164:	4293      	cmp	r3, r2
 8028166:	d013      	beq.n	8028190 <HAL_TIM_Base_Start_IT+0x80>
 8028168:	687b      	ldr	r3, [r7, #4]
 802816a:	681b      	ldr	r3, [r3, #0]
 802816c:	4a1c      	ldr	r2, [pc, #112]	; (80281e0 <HAL_TIM_Base_Start_IT+0xd0>)
 802816e:	4293      	cmp	r3, r2
 8028170:	d00e      	beq.n	8028190 <HAL_TIM_Base_Start_IT+0x80>
 8028172:	687b      	ldr	r3, [r7, #4]
 8028174:	681b      	ldr	r3, [r3, #0]
 8028176:	4a1b      	ldr	r2, [pc, #108]	; (80281e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8028178:	4293      	cmp	r3, r2
 802817a:	d009      	beq.n	8028190 <HAL_TIM_Base_Start_IT+0x80>
 802817c:	687b      	ldr	r3, [r7, #4]
 802817e:	681b      	ldr	r3, [r3, #0]
 8028180:	4a19      	ldr	r2, [pc, #100]	; (80281e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8028182:	4293      	cmp	r3, r2
 8028184:	d004      	beq.n	8028190 <HAL_TIM_Base_Start_IT+0x80>
 8028186:	687b      	ldr	r3, [r7, #4]
 8028188:	681b      	ldr	r3, [r3, #0]
 802818a:	4a18      	ldr	r2, [pc, #96]	; (80281ec <HAL_TIM_Base_Start_IT+0xdc>)
 802818c:	4293      	cmp	r3, r2
 802818e:	d111      	bne.n	80281b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028190:	687b      	ldr	r3, [r7, #4]
 8028192:	681b      	ldr	r3, [r3, #0]
 8028194:	689b      	ldr	r3, [r3, #8]
 8028196:	f003 0307 	and.w	r3, r3, #7
 802819a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802819c:	68fb      	ldr	r3, [r7, #12]
 802819e:	2b06      	cmp	r3, #6
 80281a0:	d010      	beq.n	80281c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80281a2:	687b      	ldr	r3, [r7, #4]
 80281a4:	681b      	ldr	r3, [r3, #0]
 80281a6:	681a      	ldr	r2, [r3, #0]
 80281a8:	687b      	ldr	r3, [r7, #4]
 80281aa:	681b      	ldr	r3, [r3, #0]
 80281ac:	f042 0201 	orr.w	r2, r2, #1
 80281b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80281b2:	e007      	b.n	80281c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80281b4:	687b      	ldr	r3, [r7, #4]
 80281b6:	681b      	ldr	r3, [r3, #0]
 80281b8:	681a      	ldr	r2, [r3, #0]
 80281ba:	687b      	ldr	r3, [r7, #4]
 80281bc:	681b      	ldr	r3, [r3, #0]
 80281be:	f042 0201 	orr.w	r2, r2, #1
 80281c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80281c4:	2300      	movs	r3, #0
}
 80281c6:	4618      	mov	r0, r3
 80281c8:	3714      	adds	r7, #20
 80281ca:	46bd      	mov	sp, r7
 80281cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281d0:	4770      	bx	lr
 80281d2:	bf00      	nop
 80281d4:	40010000 	.word	0x40010000
 80281d8:	40000400 	.word	0x40000400
 80281dc:	40000800 	.word	0x40000800
 80281e0:	40000c00 	.word	0x40000c00
 80281e4:	40010400 	.word	0x40010400
 80281e8:	40014000 	.word	0x40014000
 80281ec:	40001800 	.word	0x40001800

080281f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80281f0:	b580      	push	{r7, lr}
 80281f2:	b082      	sub	sp, #8
 80281f4:	af00      	add	r7, sp, #0
 80281f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80281f8:	687b      	ldr	r3, [r7, #4]
 80281fa:	681b      	ldr	r3, [r3, #0]
 80281fc:	691b      	ldr	r3, [r3, #16]
 80281fe:	f003 0302 	and.w	r3, r3, #2
 8028202:	2b02      	cmp	r3, #2
 8028204:	d122      	bne.n	802824c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8028206:	687b      	ldr	r3, [r7, #4]
 8028208:	681b      	ldr	r3, [r3, #0]
 802820a:	68db      	ldr	r3, [r3, #12]
 802820c:	f003 0302 	and.w	r3, r3, #2
 8028210:	2b02      	cmp	r3, #2
 8028212:	d11b      	bne.n	802824c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8028214:	687b      	ldr	r3, [r7, #4]
 8028216:	681b      	ldr	r3, [r3, #0]
 8028218:	f06f 0202 	mvn.w	r2, #2
 802821c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802821e:	687b      	ldr	r3, [r7, #4]
 8028220:	2201      	movs	r2, #1
 8028222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8028224:	687b      	ldr	r3, [r7, #4]
 8028226:	681b      	ldr	r3, [r3, #0]
 8028228:	699b      	ldr	r3, [r3, #24]
 802822a:	f003 0303 	and.w	r3, r3, #3
 802822e:	2b00      	cmp	r3, #0
 8028230:	d003      	beq.n	802823a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8028232:	6878      	ldr	r0, [r7, #4]
 8028234:	f000 f9b5 	bl	80285a2 <HAL_TIM_IC_CaptureCallback>
 8028238:	e005      	b.n	8028246 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802823a:	6878      	ldr	r0, [r7, #4]
 802823c:	f000 f9a7 	bl	802858e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028240:	6878      	ldr	r0, [r7, #4]
 8028242:	f000 f9b8 	bl	80285b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028246:	687b      	ldr	r3, [r7, #4]
 8028248:	2200      	movs	r2, #0
 802824a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802824c:	687b      	ldr	r3, [r7, #4]
 802824e:	681b      	ldr	r3, [r3, #0]
 8028250:	691b      	ldr	r3, [r3, #16]
 8028252:	f003 0304 	and.w	r3, r3, #4
 8028256:	2b04      	cmp	r3, #4
 8028258:	d122      	bne.n	80282a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802825a:	687b      	ldr	r3, [r7, #4]
 802825c:	681b      	ldr	r3, [r3, #0]
 802825e:	68db      	ldr	r3, [r3, #12]
 8028260:	f003 0304 	and.w	r3, r3, #4
 8028264:	2b04      	cmp	r3, #4
 8028266:	d11b      	bne.n	80282a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8028268:	687b      	ldr	r3, [r7, #4]
 802826a:	681b      	ldr	r3, [r3, #0]
 802826c:	f06f 0204 	mvn.w	r2, #4
 8028270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8028272:	687b      	ldr	r3, [r7, #4]
 8028274:	2202      	movs	r2, #2
 8028276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8028278:	687b      	ldr	r3, [r7, #4]
 802827a:	681b      	ldr	r3, [r3, #0]
 802827c:	699b      	ldr	r3, [r3, #24]
 802827e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028282:	2b00      	cmp	r3, #0
 8028284:	d003      	beq.n	802828e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028286:	6878      	ldr	r0, [r7, #4]
 8028288:	f000 f98b 	bl	80285a2 <HAL_TIM_IC_CaptureCallback>
 802828c:	e005      	b.n	802829a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802828e:	6878      	ldr	r0, [r7, #4]
 8028290:	f000 f97d 	bl	802858e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028294:	6878      	ldr	r0, [r7, #4]
 8028296:	f000 f98e 	bl	80285b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802829a:	687b      	ldr	r3, [r7, #4]
 802829c:	2200      	movs	r2, #0
 802829e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80282a0:	687b      	ldr	r3, [r7, #4]
 80282a2:	681b      	ldr	r3, [r3, #0]
 80282a4:	691b      	ldr	r3, [r3, #16]
 80282a6:	f003 0308 	and.w	r3, r3, #8
 80282aa:	2b08      	cmp	r3, #8
 80282ac:	d122      	bne.n	80282f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80282ae:	687b      	ldr	r3, [r7, #4]
 80282b0:	681b      	ldr	r3, [r3, #0]
 80282b2:	68db      	ldr	r3, [r3, #12]
 80282b4:	f003 0308 	and.w	r3, r3, #8
 80282b8:	2b08      	cmp	r3, #8
 80282ba:	d11b      	bne.n	80282f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80282bc:	687b      	ldr	r3, [r7, #4]
 80282be:	681b      	ldr	r3, [r3, #0]
 80282c0:	f06f 0208 	mvn.w	r2, #8
 80282c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80282c6:	687b      	ldr	r3, [r7, #4]
 80282c8:	2204      	movs	r2, #4
 80282ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80282cc:	687b      	ldr	r3, [r7, #4]
 80282ce:	681b      	ldr	r3, [r3, #0]
 80282d0:	69db      	ldr	r3, [r3, #28]
 80282d2:	f003 0303 	and.w	r3, r3, #3
 80282d6:	2b00      	cmp	r3, #0
 80282d8:	d003      	beq.n	80282e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80282da:	6878      	ldr	r0, [r7, #4]
 80282dc:	f000 f961 	bl	80285a2 <HAL_TIM_IC_CaptureCallback>
 80282e0:	e005      	b.n	80282ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80282e2:	6878      	ldr	r0, [r7, #4]
 80282e4:	f000 f953 	bl	802858e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80282e8:	6878      	ldr	r0, [r7, #4]
 80282ea:	f000 f964 	bl	80285b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80282ee:	687b      	ldr	r3, [r7, #4]
 80282f0:	2200      	movs	r2, #0
 80282f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80282f4:	687b      	ldr	r3, [r7, #4]
 80282f6:	681b      	ldr	r3, [r3, #0]
 80282f8:	691b      	ldr	r3, [r3, #16]
 80282fa:	f003 0310 	and.w	r3, r3, #16
 80282fe:	2b10      	cmp	r3, #16
 8028300:	d122      	bne.n	8028348 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8028302:	687b      	ldr	r3, [r7, #4]
 8028304:	681b      	ldr	r3, [r3, #0]
 8028306:	68db      	ldr	r3, [r3, #12]
 8028308:	f003 0310 	and.w	r3, r3, #16
 802830c:	2b10      	cmp	r3, #16
 802830e:	d11b      	bne.n	8028348 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8028310:	687b      	ldr	r3, [r7, #4]
 8028312:	681b      	ldr	r3, [r3, #0]
 8028314:	f06f 0210 	mvn.w	r2, #16
 8028318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802831a:	687b      	ldr	r3, [r7, #4]
 802831c:	2208      	movs	r2, #8
 802831e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8028320:	687b      	ldr	r3, [r7, #4]
 8028322:	681b      	ldr	r3, [r3, #0]
 8028324:	69db      	ldr	r3, [r3, #28]
 8028326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802832a:	2b00      	cmp	r3, #0
 802832c:	d003      	beq.n	8028336 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802832e:	6878      	ldr	r0, [r7, #4]
 8028330:	f000 f937 	bl	80285a2 <HAL_TIM_IC_CaptureCallback>
 8028334:	e005      	b.n	8028342 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028336:	6878      	ldr	r0, [r7, #4]
 8028338:	f000 f929 	bl	802858e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802833c:	6878      	ldr	r0, [r7, #4]
 802833e:	f000 f93a 	bl	80285b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028342:	687b      	ldr	r3, [r7, #4]
 8028344:	2200      	movs	r2, #0
 8028346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8028348:	687b      	ldr	r3, [r7, #4]
 802834a:	681b      	ldr	r3, [r3, #0]
 802834c:	691b      	ldr	r3, [r3, #16]
 802834e:	f003 0301 	and.w	r3, r3, #1
 8028352:	2b01      	cmp	r3, #1
 8028354:	d10e      	bne.n	8028374 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8028356:	687b      	ldr	r3, [r7, #4]
 8028358:	681b      	ldr	r3, [r3, #0]
 802835a:	68db      	ldr	r3, [r3, #12]
 802835c:	f003 0301 	and.w	r3, r3, #1
 8028360:	2b01      	cmp	r3, #1
 8028362:	d107      	bne.n	8028374 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8028364:	687b      	ldr	r3, [r7, #4]
 8028366:	681b      	ldr	r3, [r3, #0]
 8028368:	f06f 0201 	mvn.w	r2, #1
 802836c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802836e:	6878      	ldr	r0, [r7, #4]
 8028370:	f7f8 fd88 	bl	8020e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8028374:	687b      	ldr	r3, [r7, #4]
 8028376:	681b      	ldr	r3, [r3, #0]
 8028378:	691b      	ldr	r3, [r3, #16]
 802837a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802837e:	2b80      	cmp	r3, #128	; 0x80
 8028380:	d10e      	bne.n	80283a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8028382:	687b      	ldr	r3, [r7, #4]
 8028384:	681b      	ldr	r3, [r3, #0]
 8028386:	68db      	ldr	r3, [r3, #12]
 8028388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802838c:	2b80      	cmp	r3, #128	; 0x80
 802838e:	d107      	bne.n	80283a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8028390:	687b      	ldr	r3, [r7, #4]
 8028392:	681b      	ldr	r3, [r3, #0]
 8028394:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8028398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802839a:	6878      	ldr	r0, [r7, #4]
 802839c:	f000 fae0 	bl	8028960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80283a0:	687b      	ldr	r3, [r7, #4]
 80283a2:	681b      	ldr	r3, [r3, #0]
 80283a4:	691b      	ldr	r3, [r3, #16]
 80283a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80283aa:	2b40      	cmp	r3, #64	; 0x40
 80283ac:	d10e      	bne.n	80283cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80283ae:	687b      	ldr	r3, [r7, #4]
 80283b0:	681b      	ldr	r3, [r3, #0]
 80283b2:	68db      	ldr	r3, [r3, #12]
 80283b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80283b8:	2b40      	cmp	r3, #64	; 0x40
 80283ba:	d107      	bne.n	80283cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80283bc:	687b      	ldr	r3, [r7, #4]
 80283be:	681b      	ldr	r3, [r3, #0]
 80283c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80283c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80283c6:	6878      	ldr	r0, [r7, #4]
 80283c8:	f000 f8ff 	bl	80285ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80283cc:	687b      	ldr	r3, [r7, #4]
 80283ce:	681b      	ldr	r3, [r3, #0]
 80283d0:	691b      	ldr	r3, [r3, #16]
 80283d2:	f003 0320 	and.w	r3, r3, #32
 80283d6:	2b20      	cmp	r3, #32
 80283d8:	d10e      	bne.n	80283f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80283da:	687b      	ldr	r3, [r7, #4]
 80283dc:	681b      	ldr	r3, [r3, #0]
 80283de:	68db      	ldr	r3, [r3, #12]
 80283e0:	f003 0320 	and.w	r3, r3, #32
 80283e4:	2b20      	cmp	r3, #32
 80283e6:	d107      	bne.n	80283f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80283e8:	687b      	ldr	r3, [r7, #4]
 80283ea:	681b      	ldr	r3, [r3, #0]
 80283ec:	f06f 0220 	mvn.w	r2, #32
 80283f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80283f2:	6878      	ldr	r0, [r7, #4]
 80283f4:	f000 faaa 	bl	802894c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80283f8:	bf00      	nop
 80283fa:	3708      	adds	r7, #8
 80283fc:	46bd      	mov	sp, r7
 80283fe:	bd80      	pop	{r7, pc}

08028400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8028400:	b580      	push	{r7, lr}
 8028402:	b084      	sub	sp, #16
 8028404:	af00      	add	r7, sp, #0
 8028406:	6078      	str	r0, [r7, #4]
 8028408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802840a:	2300      	movs	r3, #0
 802840c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 802840e:	687b      	ldr	r3, [r7, #4]
 8028410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028414:	2b01      	cmp	r3, #1
 8028416:	d101      	bne.n	802841c <HAL_TIM_ConfigClockSource+0x1c>
 8028418:	2302      	movs	r3, #2
 802841a:	e0b4      	b.n	8028586 <HAL_TIM_ConfigClockSource+0x186>
 802841c:	687b      	ldr	r3, [r7, #4]
 802841e:	2201      	movs	r2, #1
 8028420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8028424:	687b      	ldr	r3, [r7, #4]
 8028426:	2202      	movs	r2, #2
 8028428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 802842c:	687b      	ldr	r3, [r7, #4]
 802842e:	681b      	ldr	r3, [r3, #0]
 8028430:	689b      	ldr	r3, [r3, #8]
 8028432:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8028434:	68bb      	ldr	r3, [r7, #8]
 8028436:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802843a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802843c:	68bb      	ldr	r3, [r7, #8]
 802843e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8028442:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8028444:	687b      	ldr	r3, [r7, #4]
 8028446:	681b      	ldr	r3, [r3, #0]
 8028448:	68ba      	ldr	r2, [r7, #8]
 802844a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 802844c:	683b      	ldr	r3, [r7, #0]
 802844e:	681b      	ldr	r3, [r3, #0]
 8028450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028454:	d03e      	beq.n	80284d4 <HAL_TIM_ConfigClockSource+0xd4>
 8028456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802845a:	f200 8087 	bhi.w	802856c <HAL_TIM_ConfigClockSource+0x16c>
 802845e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028462:	f000 8086 	beq.w	8028572 <HAL_TIM_ConfigClockSource+0x172>
 8028466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802846a:	d87f      	bhi.n	802856c <HAL_TIM_ConfigClockSource+0x16c>
 802846c:	2b70      	cmp	r3, #112	; 0x70
 802846e:	d01a      	beq.n	80284a6 <HAL_TIM_ConfigClockSource+0xa6>
 8028470:	2b70      	cmp	r3, #112	; 0x70
 8028472:	d87b      	bhi.n	802856c <HAL_TIM_ConfigClockSource+0x16c>
 8028474:	2b60      	cmp	r3, #96	; 0x60
 8028476:	d050      	beq.n	802851a <HAL_TIM_ConfigClockSource+0x11a>
 8028478:	2b60      	cmp	r3, #96	; 0x60
 802847a:	d877      	bhi.n	802856c <HAL_TIM_ConfigClockSource+0x16c>
 802847c:	2b50      	cmp	r3, #80	; 0x50
 802847e:	d03c      	beq.n	80284fa <HAL_TIM_ConfigClockSource+0xfa>
 8028480:	2b50      	cmp	r3, #80	; 0x50
 8028482:	d873      	bhi.n	802856c <HAL_TIM_ConfigClockSource+0x16c>
 8028484:	2b40      	cmp	r3, #64	; 0x40
 8028486:	d058      	beq.n	802853a <HAL_TIM_ConfigClockSource+0x13a>
 8028488:	2b40      	cmp	r3, #64	; 0x40
 802848a:	d86f      	bhi.n	802856c <HAL_TIM_ConfigClockSource+0x16c>
 802848c:	2b30      	cmp	r3, #48	; 0x30
 802848e:	d064      	beq.n	802855a <HAL_TIM_ConfigClockSource+0x15a>
 8028490:	2b30      	cmp	r3, #48	; 0x30
 8028492:	d86b      	bhi.n	802856c <HAL_TIM_ConfigClockSource+0x16c>
 8028494:	2b20      	cmp	r3, #32
 8028496:	d060      	beq.n	802855a <HAL_TIM_ConfigClockSource+0x15a>
 8028498:	2b20      	cmp	r3, #32
 802849a:	d867      	bhi.n	802856c <HAL_TIM_ConfigClockSource+0x16c>
 802849c:	2b00      	cmp	r3, #0
 802849e:	d05c      	beq.n	802855a <HAL_TIM_ConfigClockSource+0x15a>
 80284a0:	2b10      	cmp	r3, #16
 80284a2:	d05a      	beq.n	802855a <HAL_TIM_ConfigClockSource+0x15a>
 80284a4:	e062      	b.n	802856c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80284a6:	687b      	ldr	r3, [r7, #4]
 80284a8:	6818      	ldr	r0, [r3, #0]
 80284aa:	683b      	ldr	r3, [r7, #0]
 80284ac:	6899      	ldr	r1, [r3, #8]
 80284ae:	683b      	ldr	r3, [r7, #0]
 80284b0:	685a      	ldr	r2, [r3, #4]
 80284b2:	683b      	ldr	r3, [r7, #0]
 80284b4:	68db      	ldr	r3, [r3, #12]
 80284b6:	f000 f9ad 	bl	8028814 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80284ba:	687b      	ldr	r3, [r7, #4]
 80284bc:	681b      	ldr	r3, [r3, #0]
 80284be:	689b      	ldr	r3, [r3, #8]
 80284c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80284c2:	68bb      	ldr	r3, [r7, #8]
 80284c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80284c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80284ca:	687b      	ldr	r3, [r7, #4]
 80284cc:	681b      	ldr	r3, [r3, #0]
 80284ce:	68ba      	ldr	r2, [r7, #8]
 80284d0:	609a      	str	r2, [r3, #8]
      break;
 80284d2:	e04f      	b.n	8028574 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80284d4:	687b      	ldr	r3, [r7, #4]
 80284d6:	6818      	ldr	r0, [r3, #0]
 80284d8:	683b      	ldr	r3, [r7, #0]
 80284da:	6899      	ldr	r1, [r3, #8]
 80284dc:	683b      	ldr	r3, [r7, #0]
 80284de:	685a      	ldr	r2, [r3, #4]
 80284e0:	683b      	ldr	r3, [r7, #0]
 80284e2:	68db      	ldr	r3, [r3, #12]
 80284e4:	f000 f996 	bl	8028814 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80284e8:	687b      	ldr	r3, [r7, #4]
 80284ea:	681b      	ldr	r3, [r3, #0]
 80284ec:	689a      	ldr	r2, [r3, #8]
 80284ee:	687b      	ldr	r3, [r7, #4]
 80284f0:	681b      	ldr	r3, [r3, #0]
 80284f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80284f6:	609a      	str	r2, [r3, #8]
      break;
 80284f8:	e03c      	b.n	8028574 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80284fa:	687b      	ldr	r3, [r7, #4]
 80284fc:	6818      	ldr	r0, [r3, #0]
 80284fe:	683b      	ldr	r3, [r7, #0]
 8028500:	6859      	ldr	r1, [r3, #4]
 8028502:	683b      	ldr	r3, [r7, #0]
 8028504:	68db      	ldr	r3, [r3, #12]
 8028506:	461a      	mov	r2, r3
 8028508:	f000 f90a 	bl	8028720 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 802850c:	687b      	ldr	r3, [r7, #4]
 802850e:	681b      	ldr	r3, [r3, #0]
 8028510:	2150      	movs	r1, #80	; 0x50
 8028512:	4618      	mov	r0, r3
 8028514:	f000 f963 	bl	80287de <TIM_ITRx_SetConfig>
      break;
 8028518:	e02c      	b.n	8028574 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 802851a:	687b      	ldr	r3, [r7, #4]
 802851c:	6818      	ldr	r0, [r3, #0]
 802851e:	683b      	ldr	r3, [r7, #0]
 8028520:	6859      	ldr	r1, [r3, #4]
 8028522:	683b      	ldr	r3, [r7, #0]
 8028524:	68db      	ldr	r3, [r3, #12]
 8028526:	461a      	mov	r2, r3
 8028528:	f000 f929 	bl	802877e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802852c:	687b      	ldr	r3, [r7, #4]
 802852e:	681b      	ldr	r3, [r3, #0]
 8028530:	2160      	movs	r1, #96	; 0x60
 8028532:	4618      	mov	r0, r3
 8028534:	f000 f953 	bl	80287de <TIM_ITRx_SetConfig>
      break;
 8028538:	e01c      	b.n	8028574 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802853a:	687b      	ldr	r3, [r7, #4]
 802853c:	6818      	ldr	r0, [r3, #0]
 802853e:	683b      	ldr	r3, [r7, #0]
 8028540:	6859      	ldr	r1, [r3, #4]
 8028542:	683b      	ldr	r3, [r7, #0]
 8028544:	68db      	ldr	r3, [r3, #12]
 8028546:	461a      	mov	r2, r3
 8028548:	f000 f8ea 	bl	8028720 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802854c:	687b      	ldr	r3, [r7, #4]
 802854e:	681b      	ldr	r3, [r3, #0]
 8028550:	2140      	movs	r1, #64	; 0x40
 8028552:	4618      	mov	r0, r3
 8028554:	f000 f943 	bl	80287de <TIM_ITRx_SetConfig>
      break;
 8028558:	e00c      	b.n	8028574 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802855a:	687b      	ldr	r3, [r7, #4]
 802855c:	681a      	ldr	r2, [r3, #0]
 802855e:	683b      	ldr	r3, [r7, #0]
 8028560:	681b      	ldr	r3, [r3, #0]
 8028562:	4619      	mov	r1, r3
 8028564:	4610      	mov	r0, r2
 8028566:	f000 f93a 	bl	80287de <TIM_ITRx_SetConfig>
      break;
 802856a:	e003      	b.n	8028574 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 802856c:	2301      	movs	r3, #1
 802856e:	73fb      	strb	r3, [r7, #15]
      break;
 8028570:	e000      	b.n	8028574 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8028572:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8028574:	687b      	ldr	r3, [r7, #4]
 8028576:	2201      	movs	r2, #1
 8028578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802857c:	687b      	ldr	r3, [r7, #4]
 802857e:	2200      	movs	r2, #0
 8028580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8028584:	7bfb      	ldrb	r3, [r7, #15]
}
 8028586:	4618      	mov	r0, r3
 8028588:	3710      	adds	r7, #16
 802858a:	46bd      	mov	sp, r7
 802858c:	bd80      	pop	{r7, pc}

0802858e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802858e:	b480      	push	{r7}
 8028590:	b083      	sub	sp, #12
 8028592:	af00      	add	r7, sp, #0
 8028594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8028596:	bf00      	nop
 8028598:	370c      	adds	r7, #12
 802859a:	46bd      	mov	sp, r7
 802859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80285a0:	4770      	bx	lr

080285a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80285a2:	b480      	push	{r7}
 80285a4:	b083      	sub	sp, #12
 80285a6:	af00      	add	r7, sp, #0
 80285a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80285aa:	bf00      	nop
 80285ac:	370c      	adds	r7, #12
 80285ae:	46bd      	mov	sp, r7
 80285b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80285b4:	4770      	bx	lr

080285b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80285b6:	b480      	push	{r7}
 80285b8:	b083      	sub	sp, #12
 80285ba:	af00      	add	r7, sp, #0
 80285bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80285be:	bf00      	nop
 80285c0:	370c      	adds	r7, #12
 80285c2:	46bd      	mov	sp, r7
 80285c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80285c8:	4770      	bx	lr

080285ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80285ca:	b480      	push	{r7}
 80285cc:	b083      	sub	sp, #12
 80285ce:	af00      	add	r7, sp, #0
 80285d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80285d2:	bf00      	nop
 80285d4:	370c      	adds	r7, #12
 80285d6:	46bd      	mov	sp, r7
 80285d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80285dc:	4770      	bx	lr
	...

080285e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80285e0:	b480      	push	{r7}
 80285e2:	b085      	sub	sp, #20
 80285e4:	af00      	add	r7, sp, #0
 80285e6:	6078      	str	r0, [r7, #4]
 80285e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80285ea:	687b      	ldr	r3, [r7, #4]
 80285ec:	681b      	ldr	r3, [r3, #0]
 80285ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80285f0:	687b      	ldr	r3, [r7, #4]
 80285f2:	4a40      	ldr	r2, [pc, #256]	; (80286f4 <TIM_Base_SetConfig+0x114>)
 80285f4:	4293      	cmp	r3, r2
 80285f6:	d013      	beq.n	8028620 <TIM_Base_SetConfig+0x40>
 80285f8:	687b      	ldr	r3, [r7, #4]
 80285fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80285fe:	d00f      	beq.n	8028620 <TIM_Base_SetConfig+0x40>
 8028600:	687b      	ldr	r3, [r7, #4]
 8028602:	4a3d      	ldr	r2, [pc, #244]	; (80286f8 <TIM_Base_SetConfig+0x118>)
 8028604:	4293      	cmp	r3, r2
 8028606:	d00b      	beq.n	8028620 <TIM_Base_SetConfig+0x40>
 8028608:	687b      	ldr	r3, [r7, #4]
 802860a:	4a3c      	ldr	r2, [pc, #240]	; (80286fc <TIM_Base_SetConfig+0x11c>)
 802860c:	4293      	cmp	r3, r2
 802860e:	d007      	beq.n	8028620 <TIM_Base_SetConfig+0x40>
 8028610:	687b      	ldr	r3, [r7, #4]
 8028612:	4a3b      	ldr	r2, [pc, #236]	; (8028700 <TIM_Base_SetConfig+0x120>)
 8028614:	4293      	cmp	r3, r2
 8028616:	d003      	beq.n	8028620 <TIM_Base_SetConfig+0x40>
 8028618:	687b      	ldr	r3, [r7, #4]
 802861a:	4a3a      	ldr	r2, [pc, #232]	; (8028704 <TIM_Base_SetConfig+0x124>)
 802861c:	4293      	cmp	r3, r2
 802861e:	d108      	bne.n	8028632 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8028620:	68fb      	ldr	r3, [r7, #12]
 8028622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8028628:	683b      	ldr	r3, [r7, #0]
 802862a:	685b      	ldr	r3, [r3, #4]
 802862c:	68fa      	ldr	r2, [r7, #12]
 802862e:	4313      	orrs	r3, r2
 8028630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8028632:	687b      	ldr	r3, [r7, #4]
 8028634:	4a2f      	ldr	r2, [pc, #188]	; (80286f4 <TIM_Base_SetConfig+0x114>)
 8028636:	4293      	cmp	r3, r2
 8028638:	d02b      	beq.n	8028692 <TIM_Base_SetConfig+0xb2>
 802863a:	687b      	ldr	r3, [r7, #4]
 802863c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028640:	d027      	beq.n	8028692 <TIM_Base_SetConfig+0xb2>
 8028642:	687b      	ldr	r3, [r7, #4]
 8028644:	4a2c      	ldr	r2, [pc, #176]	; (80286f8 <TIM_Base_SetConfig+0x118>)
 8028646:	4293      	cmp	r3, r2
 8028648:	d023      	beq.n	8028692 <TIM_Base_SetConfig+0xb2>
 802864a:	687b      	ldr	r3, [r7, #4]
 802864c:	4a2b      	ldr	r2, [pc, #172]	; (80286fc <TIM_Base_SetConfig+0x11c>)
 802864e:	4293      	cmp	r3, r2
 8028650:	d01f      	beq.n	8028692 <TIM_Base_SetConfig+0xb2>
 8028652:	687b      	ldr	r3, [r7, #4]
 8028654:	4a2a      	ldr	r2, [pc, #168]	; (8028700 <TIM_Base_SetConfig+0x120>)
 8028656:	4293      	cmp	r3, r2
 8028658:	d01b      	beq.n	8028692 <TIM_Base_SetConfig+0xb2>
 802865a:	687b      	ldr	r3, [r7, #4]
 802865c:	4a29      	ldr	r2, [pc, #164]	; (8028704 <TIM_Base_SetConfig+0x124>)
 802865e:	4293      	cmp	r3, r2
 8028660:	d017      	beq.n	8028692 <TIM_Base_SetConfig+0xb2>
 8028662:	687b      	ldr	r3, [r7, #4]
 8028664:	4a28      	ldr	r2, [pc, #160]	; (8028708 <TIM_Base_SetConfig+0x128>)
 8028666:	4293      	cmp	r3, r2
 8028668:	d013      	beq.n	8028692 <TIM_Base_SetConfig+0xb2>
 802866a:	687b      	ldr	r3, [r7, #4]
 802866c:	4a27      	ldr	r2, [pc, #156]	; (802870c <TIM_Base_SetConfig+0x12c>)
 802866e:	4293      	cmp	r3, r2
 8028670:	d00f      	beq.n	8028692 <TIM_Base_SetConfig+0xb2>
 8028672:	687b      	ldr	r3, [r7, #4]
 8028674:	4a26      	ldr	r2, [pc, #152]	; (8028710 <TIM_Base_SetConfig+0x130>)
 8028676:	4293      	cmp	r3, r2
 8028678:	d00b      	beq.n	8028692 <TIM_Base_SetConfig+0xb2>
 802867a:	687b      	ldr	r3, [r7, #4]
 802867c:	4a25      	ldr	r2, [pc, #148]	; (8028714 <TIM_Base_SetConfig+0x134>)
 802867e:	4293      	cmp	r3, r2
 8028680:	d007      	beq.n	8028692 <TIM_Base_SetConfig+0xb2>
 8028682:	687b      	ldr	r3, [r7, #4]
 8028684:	4a24      	ldr	r2, [pc, #144]	; (8028718 <TIM_Base_SetConfig+0x138>)
 8028686:	4293      	cmp	r3, r2
 8028688:	d003      	beq.n	8028692 <TIM_Base_SetConfig+0xb2>
 802868a:	687b      	ldr	r3, [r7, #4]
 802868c:	4a23      	ldr	r2, [pc, #140]	; (802871c <TIM_Base_SetConfig+0x13c>)
 802868e:	4293      	cmp	r3, r2
 8028690:	d108      	bne.n	80286a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8028692:	68fb      	ldr	r3, [r7, #12]
 8028694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8028698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802869a:	683b      	ldr	r3, [r7, #0]
 802869c:	68db      	ldr	r3, [r3, #12]
 802869e:	68fa      	ldr	r2, [r7, #12]
 80286a0:	4313      	orrs	r3, r2
 80286a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80286a4:	68fb      	ldr	r3, [r7, #12]
 80286a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80286aa:	683b      	ldr	r3, [r7, #0]
 80286ac:	695b      	ldr	r3, [r3, #20]
 80286ae:	4313      	orrs	r3, r2
 80286b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80286b2:	687b      	ldr	r3, [r7, #4]
 80286b4:	68fa      	ldr	r2, [r7, #12]
 80286b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80286b8:	683b      	ldr	r3, [r7, #0]
 80286ba:	689a      	ldr	r2, [r3, #8]
 80286bc:	687b      	ldr	r3, [r7, #4]
 80286be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80286c0:	683b      	ldr	r3, [r7, #0]
 80286c2:	681a      	ldr	r2, [r3, #0]
 80286c4:	687b      	ldr	r3, [r7, #4]
 80286c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80286c8:	687b      	ldr	r3, [r7, #4]
 80286ca:	4a0a      	ldr	r2, [pc, #40]	; (80286f4 <TIM_Base_SetConfig+0x114>)
 80286cc:	4293      	cmp	r3, r2
 80286ce:	d003      	beq.n	80286d8 <TIM_Base_SetConfig+0xf8>
 80286d0:	687b      	ldr	r3, [r7, #4]
 80286d2:	4a0c      	ldr	r2, [pc, #48]	; (8028704 <TIM_Base_SetConfig+0x124>)
 80286d4:	4293      	cmp	r3, r2
 80286d6:	d103      	bne.n	80286e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80286d8:	683b      	ldr	r3, [r7, #0]
 80286da:	691a      	ldr	r2, [r3, #16]
 80286dc:	687b      	ldr	r3, [r7, #4]
 80286de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80286e0:	687b      	ldr	r3, [r7, #4]
 80286e2:	2201      	movs	r2, #1
 80286e4:	615a      	str	r2, [r3, #20]
}
 80286e6:	bf00      	nop
 80286e8:	3714      	adds	r7, #20
 80286ea:	46bd      	mov	sp, r7
 80286ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80286f0:	4770      	bx	lr
 80286f2:	bf00      	nop
 80286f4:	40010000 	.word	0x40010000
 80286f8:	40000400 	.word	0x40000400
 80286fc:	40000800 	.word	0x40000800
 8028700:	40000c00 	.word	0x40000c00
 8028704:	40010400 	.word	0x40010400
 8028708:	40014000 	.word	0x40014000
 802870c:	40014400 	.word	0x40014400
 8028710:	40014800 	.word	0x40014800
 8028714:	40001800 	.word	0x40001800
 8028718:	40001c00 	.word	0x40001c00
 802871c:	40002000 	.word	0x40002000

08028720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8028720:	b480      	push	{r7}
 8028722:	b087      	sub	sp, #28
 8028724:	af00      	add	r7, sp, #0
 8028726:	60f8      	str	r0, [r7, #12]
 8028728:	60b9      	str	r1, [r7, #8]
 802872a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802872c:	68fb      	ldr	r3, [r7, #12]
 802872e:	6a1b      	ldr	r3, [r3, #32]
 8028730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8028732:	68fb      	ldr	r3, [r7, #12]
 8028734:	6a1b      	ldr	r3, [r3, #32]
 8028736:	f023 0201 	bic.w	r2, r3, #1
 802873a:	68fb      	ldr	r3, [r7, #12]
 802873c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802873e:	68fb      	ldr	r3, [r7, #12]
 8028740:	699b      	ldr	r3, [r3, #24]
 8028742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8028744:	693b      	ldr	r3, [r7, #16]
 8028746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802874a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802874c:	687b      	ldr	r3, [r7, #4]
 802874e:	011b      	lsls	r3, r3, #4
 8028750:	693a      	ldr	r2, [r7, #16]
 8028752:	4313      	orrs	r3, r2
 8028754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8028756:	697b      	ldr	r3, [r7, #20]
 8028758:	f023 030a 	bic.w	r3, r3, #10
 802875c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802875e:	697a      	ldr	r2, [r7, #20]
 8028760:	68bb      	ldr	r3, [r7, #8]
 8028762:	4313      	orrs	r3, r2
 8028764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8028766:	68fb      	ldr	r3, [r7, #12]
 8028768:	693a      	ldr	r2, [r7, #16]
 802876a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802876c:	68fb      	ldr	r3, [r7, #12]
 802876e:	697a      	ldr	r2, [r7, #20]
 8028770:	621a      	str	r2, [r3, #32]
}
 8028772:	bf00      	nop
 8028774:	371c      	adds	r7, #28
 8028776:	46bd      	mov	sp, r7
 8028778:	f85d 7b04 	ldr.w	r7, [sp], #4
 802877c:	4770      	bx	lr

0802877e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802877e:	b480      	push	{r7}
 8028780:	b087      	sub	sp, #28
 8028782:	af00      	add	r7, sp, #0
 8028784:	60f8      	str	r0, [r7, #12]
 8028786:	60b9      	str	r1, [r7, #8]
 8028788:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802878a:	68fb      	ldr	r3, [r7, #12]
 802878c:	6a1b      	ldr	r3, [r3, #32]
 802878e:	f023 0210 	bic.w	r2, r3, #16
 8028792:	68fb      	ldr	r3, [r7, #12]
 8028794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8028796:	68fb      	ldr	r3, [r7, #12]
 8028798:	699b      	ldr	r3, [r3, #24]
 802879a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802879c:	68fb      	ldr	r3, [r7, #12]
 802879e:	6a1b      	ldr	r3, [r3, #32]
 80287a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80287a2:	697b      	ldr	r3, [r7, #20]
 80287a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80287a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80287aa:	687b      	ldr	r3, [r7, #4]
 80287ac:	031b      	lsls	r3, r3, #12
 80287ae:	697a      	ldr	r2, [r7, #20]
 80287b0:	4313      	orrs	r3, r2
 80287b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80287b4:	693b      	ldr	r3, [r7, #16]
 80287b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80287ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80287bc:	68bb      	ldr	r3, [r7, #8]
 80287be:	011b      	lsls	r3, r3, #4
 80287c0:	693a      	ldr	r2, [r7, #16]
 80287c2:	4313      	orrs	r3, r2
 80287c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80287c6:	68fb      	ldr	r3, [r7, #12]
 80287c8:	697a      	ldr	r2, [r7, #20]
 80287ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80287cc:	68fb      	ldr	r3, [r7, #12]
 80287ce:	693a      	ldr	r2, [r7, #16]
 80287d0:	621a      	str	r2, [r3, #32]
}
 80287d2:	bf00      	nop
 80287d4:	371c      	adds	r7, #28
 80287d6:	46bd      	mov	sp, r7
 80287d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287dc:	4770      	bx	lr

080287de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80287de:	b480      	push	{r7}
 80287e0:	b085      	sub	sp, #20
 80287e2:	af00      	add	r7, sp, #0
 80287e4:	6078      	str	r0, [r7, #4]
 80287e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80287e8:	687b      	ldr	r3, [r7, #4]
 80287ea:	689b      	ldr	r3, [r3, #8]
 80287ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80287ee:	68fb      	ldr	r3, [r7, #12]
 80287f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80287f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80287f6:	683a      	ldr	r2, [r7, #0]
 80287f8:	68fb      	ldr	r3, [r7, #12]
 80287fa:	4313      	orrs	r3, r2
 80287fc:	f043 0307 	orr.w	r3, r3, #7
 8028800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8028802:	687b      	ldr	r3, [r7, #4]
 8028804:	68fa      	ldr	r2, [r7, #12]
 8028806:	609a      	str	r2, [r3, #8]
}
 8028808:	bf00      	nop
 802880a:	3714      	adds	r7, #20
 802880c:	46bd      	mov	sp, r7
 802880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028812:	4770      	bx	lr

08028814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8028814:	b480      	push	{r7}
 8028816:	b087      	sub	sp, #28
 8028818:	af00      	add	r7, sp, #0
 802881a:	60f8      	str	r0, [r7, #12]
 802881c:	60b9      	str	r1, [r7, #8]
 802881e:	607a      	str	r2, [r7, #4]
 8028820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8028822:	68fb      	ldr	r3, [r7, #12]
 8028824:	689b      	ldr	r3, [r3, #8]
 8028826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8028828:	697b      	ldr	r3, [r7, #20]
 802882a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802882e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8028830:	683b      	ldr	r3, [r7, #0]
 8028832:	021a      	lsls	r2, r3, #8
 8028834:	687b      	ldr	r3, [r7, #4]
 8028836:	431a      	orrs	r2, r3
 8028838:	68bb      	ldr	r3, [r7, #8]
 802883a:	4313      	orrs	r3, r2
 802883c:	697a      	ldr	r2, [r7, #20]
 802883e:	4313      	orrs	r3, r2
 8028840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8028842:	68fb      	ldr	r3, [r7, #12]
 8028844:	697a      	ldr	r2, [r7, #20]
 8028846:	609a      	str	r2, [r3, #8]
}
 8028848:	bf00      	nop
 802884a:	371c      	adds	r7, #28
 802884c:	46bd      	mov	sp, r7
 802884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028852:	4770      	bx	lr

08028854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8028854:	b480      	push	{r7}
 8028856:	b085      	sub	sp, #20
 8028858:	af00      	add	r7, sp, #0
 802885a:	6078      	str	r0, [r7, #4]
 802885c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802885e:	687b      	ldr	r3, [r7, #4]
 8028860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028864:	2b01      	cmp	r3, #1
 8028866:	d101      	bne.n	802886c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8028868:	2302      	movs	r3, #2
 802886a:	e05a      	b.n	8028922 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802886c:	687b      	ldr	r3, [r7, #4]
 802886e:	2201      	movs	r2, #1
 8028870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028874:	687b      	ldr	r3, [r7, #4]
 8028876:	2202      	movs	r2, #2
 8028878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802887c:	687b      	ldr	r3, [r7, #4]
 802887e:	681b      	ldr	r3, [r3, #0]
 8028880:	685b      	ldr	r3, [r3, #4]
 8028882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8028884:	687b      	ldr	r3, [r7, #4]
 8028886:	681b      	ldr	r3, [r3, #0]
 8028888:	689b      	ldr	r3, [r3, #8]
 802888a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802888c:	68fb      	ldr	r3, [r7, #12]
 802888e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8028894:	683b      	ldr	r3, [r7, #0]
 8028896:	681b      	ldr	r3, [r3, #0]
 8028898:	68fa      	ldr	r2, [r7, #12]
 802889a:	4313      	orrs	r3, r2
 802889c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802889e:	687b      	ldr	r3, [r7, #4]
 80288a0:	681b      	ldr	r3, [r3, #0]
 80288a2:	68fa      	ldr	r2, [r7, #12]
 80288a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80288a6:	687b      	ldr	r3, [r7, #4]
 80288a8:	681b      	ldr	r3, [r3, #0]
 80288aa:	4a21      	ldr	r2, [pc, #132]	; (8028930 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80288ac:	4293      	cmp	r3, r2
 80288ae:	d022      	beq.n	80288f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80288b0:	687b      	ldr	r3, [r7, #4]
 80288b2:	681b      	ldr	r3, [r3, #0]
 80288b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80288b8:	d01d      	beq.n	80288f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80288ba:	687b      	ldr	r3, [r7, #4]
 80288bc:	681b      	ldr	r3, [r3, #0]
 80288be:	4a1d      	ldr	r2, [pc, #116]	; (8028934 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80288c0:	4293      	cmp	r3, r2
 80288c2:	d018      	beq.n	80288f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80288c4:	687b      	ldr	r3, [r7, #4]
 80288c6:	681b      	ldr	r3, [r3, #0]
 80288c8:	4a1b      	ldr	r2, [pc, #108]	; (8028938 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80288ca:	4293      	cmp	r3, r2
 80288cc:	d013      	beq.n	80288f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80288ce:	687b      	ldr	r3, [r7, #4]
 80288d0:	681b      	ldr	r3, [r3, #0]
 80288d2:	4a1a      	ldr	r2, [pc, #104]	; (802893c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80288d4:	4293      	cmp	r3, r2
 80288d6:	d00e      	beq.n	80288f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80288d8:	687b      	ldr	r3, [r7, #4]
 80288da:	681b      	ldr	r3, [r3, #0]
 80288dc:	4a18      	ldr	r2, [pc, #96]	; (8028940 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80288de:	4293      	cmp	r3, r2
 80288e0:	d009      	beq.n	80288f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80288e2:	687b      	ldr	r3, [r7, #4]
 80288e4:	681b      	ldr	r3, [r3, #0]
 80288e6:	4a17      	ldr	r2, [pc, #92]	; (8028944 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80288e8:	4293      	cmp	r3, r2
 80288ea:	d004      	beq.n	80288f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80288ec:	687b      	ldr	r3, [r7, #4]
 80288ee:	681b      	ldr	r3, [r3, #0]
 80288f0:	4a15      	ldr	r2, [pc, #84]	; (8028948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80288f2:	4293      	cmp	r3, r2
 80288f4:	d10c      	bne.n	8028910 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80288f6:	68bb      	ldr	r3, [r7, #8]
 80288f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80288fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80288fe:	683b      	ldr	r3, [r7, #0]
 8028900:	685b      	ldr	r3, [r3, #4]
 8028902:	68ba      	ldr	r2, [r7, #8]
 8028904:	4313      	orrs	r3, r2
 8028906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8028908:	687b      	ldr	r3, [r7, #4]
 802890a:	681b      	ldr	r3, [r3, #0]
 802890c:	68ba      	ldr	r2, [r7, #8]
 802890e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8028910:	687b      	ldr	r3, [r7, #4]
 8028912:	2201      	movs	r2, #1
 8028914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8028918:	687b      	ldr	r3, [r7, #4]
 802891a:	2200      	movs	r2, #0
 802891c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8028920:	2300      	movs	r3, #0
}
 8028922:	4618      	mov	r0, r3
 8028924:	3714      	adds	r7, #20
 8028926:	46bd      	mov	sp, r7
 8028928:	f85d 7b04 	ldr.w	r7, [sp], #4
 802892c:	4770      	bx	lr
 802892e:	bf00      	nop
 8028930:	40010000 	.word	0x40010000
 8028934:	40000400 	.word	0x40000400
 8028938:	40000800 	.word	0x40000800
 802893c:	40000c00 	.word	0x40000c00
 8028940:	40010400 	.word	0x40010400
 8028944:	40014000 	.word	0x40014000
 8028948:	40001800 	.word	0x40001800

0802894c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802894c:	b480      	push	{r7}
 802894e:	b083      	sub	sp, #12
 8028950:	af00      	add	r7, sp, #0
 8028952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8028954:	bf00      	nop
 8028956:	370c      	adds	r7, #12
 8028958:	46bd      	mov	sp, r7
 802895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802895e:	4770      	bx	lr

08028960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8028960:	b480      	push	{r7}
 8028962:	b083      	sub	sp, #12
 8028964:	af00      	add	r7, sp, #0
 8028966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8028968:	bf00      	nop
 802896a:	370c      	adds	r7, #12
 802896c:	46bd      	mov	sp, r7
 802896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028972:	4770      	bx	lr

08028974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8028974:	b580      	push	{r7, lr}
 8028976:	b082      	sub	sp, #8
 8028978:	af00      	add	r7, sp, #0
 802897a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802897c:	687b      	ldr	r3, [r7, #4]
 802897e:	2b00      	cmp	r3, #0
 8028980:	d101      	bne.n	8028986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8028982:	2301      	movs	r3, #1
 8028984:	e03f      	b.n	8028a06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8028986:	687b      	ldr	r3, [r7, #4]
 8028988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802898c:	b2db      	uxtb	r3, r3
 802898e:	2b00      	cmp	r3, #0
 8028990:	d106      	bne.n	80289a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8028992:	687b      	ldr	r3, [r7, #4]
 8028994:	2200      	movs	r2, #0
 8028996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802899a:	6878      	ldr	r0, [r7, #4]
 802899c:	f7f8 fd1e 	bl	80213dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80289a0:	687b      	ldr	r3, [r7, #4]
 80289a2:	2224      	movs	r2, #36	; 0x24
 80289a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80289a8:	687b      	ldr	r3, [r7, #4]
 80289aa:	681b      	ldr	r3, [r3, #0]
 80289ac:	68da      	ldr	r2, [r3, #12]
 80289ae:	687b      	ldr	r3, [r7, #4]
 80289b0:	681b      	ldr	r3, [r3, #0]
 80289b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80289b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80289b8:	6878      	ldr	r0, [r7, #4]
 80289ba:	f000 fddf 	bl	802957c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80289be:	687b      	ldr	r3, [r7, #4]
 80289c0:	681b      	ldr	r3, [r3, #0]
 80289c2:	691a      	ldr	r2, [r3, #16]
 80289c4:	687b      	ldr	r3, [r7, #4]
 80289c6:	681b      	ldr	r3, [r3, #0]
 80289c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80289cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80289ce:	687b      	ldr	r3, [r7, #4]
 80289d0:	681b      	ldr	r3, [r3, #0]
 80289d2:	695a      	ldr	r2, [r3, #20]
 80289d4:	687b      	ldr	r3, [r7, #4]
 80289d6:	681b      	ldr	r3, [r3, #0]
 80289d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80289dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80289de:	687b      	ldr	r3, [r7, #4]
 80289e0:	681b      	ldr	r3, [r3, #0]
 80289e2:	68da      	ldr	r2, [r3, #12]
 80289e4:	687b      	ldr	r3, [r7, #4]
 80289e6:	681b      	ldr	r3, [r3, #0]
 80289e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80289ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80289ee:	687b      	ldr	r3, [r7, #4]
 80289f0:	2200      	movs	r2, #0
 80289f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80289f4:	687b      	ldr	r3, [r7, #4]
 80289f6:	2220      	movs	r2, #32
 80289f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80289fc:	687b      	ldr	r3, [r7, #4]
 80289fe:	2220      	movs	r2, #32
 8028a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8028a04:	2300      	movs	r3, #0
}
 8028a06:	4618      	mov	r0, r3
 8028a08:	3708      	adds	r7, #8
 8028a0a:	46bd      	mov	sp, r7
 8028a0c:	bd80      	pop	{r7, pc}

08028a0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028a0e:	b580      	push	{r7, lr}
 8028a10:	b08a      	sub	sp, #40	; 0x28
 8028a12:	af02      	add	r7, sp, #8
 8028a14:	60f8      	str	r0, [r7, #12]
 8028a16:	60b9      	str	r1, [r7, #8]
 8028a18:	603b      	str	r3, [r7, #0]
 8028a1a:	4613      	mov	r3, r2
 8028a1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8028a1e:	2300      	movs	r3, #0
 8028a20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8028a22:	68fb      	ldr	r3, [r7, #12]
 8028a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028a28:	b2db      	uxtb	r3, r3
 8028a2a:	2b20      	cmp	r3, #32
 8028a2c:	d17c      	bne.n	8028b28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8028a2e:	68bb      	ldr	r3, [r7, #8]
 8028a30:	2b00      	cmp	r3, #0
 8028a32:	d002      	beq.n	8028a3a <HAL_UART_Transmit+0x2c>
 8028a34:	88fb      	ldrh	r3, [r7, #6]
 8028a36:	2b00      	cmp	r3, #0
 8028a38:	d101      	bne.n	8028a3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8028a3a:	2301      	movs	r3, #1
 8028a3c:	e075      	b.n	8028b2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8028a3e:	68fb      	ldr	r3, [r7, #12]
 8028a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028a44:	2b01      	cmp	r3, #1
 8028a46:	d101      	bne.n	8028a4c <HAL_UART_Transmit+0x3e>
 8028a48:	2302      	movs	r3, #2
 8028a4a:	e06e      	b.n	8028b2a <HAL_UART_Transmit+0x11c>
 8028a4c:	68fb      	ldr	r3, [r7, #12]
 8028a4e:	2201      	movs	r2, #1
 8028a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028a54:	68fb      	ldr	r3, [r7, #12]
 8028a56:	2200      	movs	r2, #0
 8028a58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8028a5a:	68fb      	ldr	r3, [r7, #12]
 8028a5c:	2221      	movs	r2, #33	; 0x21
 8028a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8028a62:	f7fa fa2d 	bl	8022ec0 <HAL_GetTick>
 8028a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8028a68:	68fb      	ldr	r3, [r7, #12]
 8028a6a:	88fa      	ldrh	r2, [r7, #6]
 8028a6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8028a6e:	68fb      	ldr	r3, [r7, #12]
 8028a70:	88fa      	ldrh	r2, [r7, #6]
 8028a72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8028a74:	68fb      	ldr	r3, [r7, #12]
 8028a76:	689b      	ldr	r3, [r3, #8]
 8028a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028a7c:	d108      	bne.n	8028a90 <HAL_UART_Transmit+0x82>
 8028a7e:	68fb      	ldr	r3, [r7, #12]
 8028a80:	691b      	ldr	r3, [r3, #16]
 8028a82:	2b00      	cmp	r3, #0
 8028a84:	d104      	bne.n	8028a90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8028a86:	2300      	movs	r3, #0
 8028a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8028a8a:	68bb      	ldr	r3, [r7, #8]
 8028a8c:	61bb      	str	r3, [r7, #24]
 8028a8e:	e003      	b.n	8028a98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8028a90:	68bb      	ldr	r3, [r7, #8]
 8028a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8028a94:	2300      	movs	r3, #0
 8028a96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8028a98:	68fb      	ldr	r3, [r7, #12]
 8028a9a:	2200      	movs	r2, #0
 8028a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8028aa0:	e02a      	b.n	8028af8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8028aa2:	683b      	ldr	r3, [r7, #0]
 8028aa4:	9300      	str	r3, [sp, #0]
 8028aa6:	697b      	ldr	r3, [r7, #20]
 8028aa8:	2200      	movs	r2, #0
 8028aaa:	2180      	movs	r1, #128	; 0x80
 8028aac:	68f8      	ldr	r0, [r7, #12]
 8028aae:	f000 fb1f 	bl	80290f0 <UART_WaitOnFlagUntilTimeout>
 8028ab2:	4603      	mov	r3, r0
 8028ab4:	2b00      	cmp	r3, #0
 8028ab6:	d001      	beq.n	8028abc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8028ab8:	2303      	movs	r3, #3
 8028aba:	e036      	b.n	8028b2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8028abc:	69fb      	ldr	r3, [r7, #28]
 8028abe:	2b00      	cmp	r3, #0
 8028ac0:	d10b      	bne.n	8028ada <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8028ac2:	69bb      	ldr	r3, [r7, #24]
 8028ac4:	881b      	ldrh	r3, [r3, #0]
 8028ac6:	461a      	mov	r2, r3
 8028ac8:	68fb      	ldr	r3, [r7, #12]
 8028aca:	681b      	ldr	r3, [r3, #0]
 8028acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8028ad0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8028ad2:	69bb      	ldr	r3, [r7, #24]
 8028ad4:	3302      	adds	r3, #2
 8028ad6:	61bb      	str	r3, [r7, #24]
 8028ad8:	e007      	b.n	8028aea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8028ada:	69fb      	ldr	r3, [r7, #28]
 8028adc:	781a      	ldrb	r2, [r3, #0]
 8028ade:	68fb      	ldr	r3, [r7, #12]
 8028ae0:	681b      	ldr	r3, [r3, #0]
 8028ae2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8028ae4:	69fb      	ldr	r3, [r7, #28]
 8028ae6:	3301      	adds	r3, #1
 8028ae8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8028aea:	68fb      	ldr	r3, [r7, #12]
 8028aec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8028aee:	b29b      	uxth	r3, r3
 8028af0:	3b01      	subs	r3, #1
 8028af2:	b29a      	uxth	r2, r3
 8028af4:	68fb      	ldr	r3, [r7, #12]
 8028af6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8028af8:	68fb      	ldr	r3, [r7, #12]
 8028afa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8028afc:	b29b      	uxth	r3, r3
 8028afe:	2b00      	cmp	r3, #0
 8028b00:	d1cf      	bne.n	8028aa2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8028b02:	683b      	ldr	r3, [r7, #0]
 8028b04:	9300      	str	r3, [sp, #0]
 8028b06:	697b      	ldr	r3, [r7, #20]
 8028b08:	2200      	movs	r2, #0
 8028b0a:	2140      	movs	r1, #64	; 0x40
 8028b0c:	68f8      	ldr	r0, [r7, #12]
 8028b0e:	f000 faef 	bl	80290f0 <UART_WaitOnFlagUntilTimeout>
 8028b12:	4603      	mov	r3, r0
 8028b14:	2b00      	cmp	r3, #0
 8028b16:	d001      	beq.n	8028b1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8028b18:	2303      	movs	r3, #3
 8028b1a:	e006      	b.n	8028b2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8028b1c:	68fb      	ldr	r3, [r7, #12]
 8028b1e:	2220      	movs	r2, #32
 8028b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8028b24:	2300      	movs	r3, #0
 8028b26:	e000      	b.n	8028b2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8028b28:	2302      	movs	r3, #2
  }
}
 8028b2a:	4618      	mov	r0, r3
 8028b2c:	3720      	adds	r7, #32
 8028b2e:	46bd      	mov	sp, r7
 8028b30:	bd80      	pop	{r7, pc}

08028b32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8028b32:	b580      	push	{r7, lr}
 8028b34:	b084      	sub	sp, #16
 8028b36:	af00      	add	r7, sp, #0
 8028b38:	60f8      	str	r0, [r7, #12]
 8028b3a:	60b9      	str	r1, [r7, #8]
 8028b3c:	4613      	mov	r3, r2
 8028b3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8028b40:	68fb      	ldr	r3, [r7, #12]
 8028b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8028b46:	b2db      	uxtb	r3, r3
 8028b48:	2b20      	cmp	r3, #32
 8028b4a:	d11d      	bne.n	8028b88 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8028b4c:	68bb      	ldr	r3, [r7, #8]
 8028b4e:	2b00      	cmp	r3, #0
 8028b50:	d002      	beq.n	8028b58 <HAL_UART_Receive_IT+0x26>
 8028b52:	88fb      	ldrh	r3, [r7, #6]
 8028b54:	2b00      	cmp	r3, #0
 8028b56:	d101      	bne.n	8028b5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8028b58:	2301      	movs	r3, #1
 8028b5a:	e016      	b.n	8028b8a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8028b5c:	68fb      	ldr	r3, [r7, #12]
 8028b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028b62:	2b01      	cmp	r3, #1
 8028b64:	d101      	bne.n	8028b6a <HAL_UART_Receive_IT+0x38>
 8028b66:	2302      	movs	r3, #2
 8028b68:	e00f      	b.n	8028b8a <HAL_UART_Receive_IT+0x58>
 8028b6a:	68fb      	ldr	r3, [r7, #12]
 8028b6c:	2201      	movs	r2, #1
 8028b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8028b72:	68fb      	ldr	r3, [r7, #12]
 8028b74:	2200      	movs	r2, #0
 8028b76:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8028b78:	88fb      	ldrh	r3, [r7, #6]
 8028b7a:	461a      	mov	r2, r3
 8028b7c:	68b9      	ldr	r1, [r7, #8]
 8028b7e:	68f8      	ldr	r0, [r7, #12]
 8028b80:	f000 fb24 	bl	80291cc <UART_Start_Receive_IT>
 8028b84:	4603      	mov	r3, r0
 8028b86:	e000      	b.n	8028b8a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8028b88:	2302      	movs	r3, #2
  }
}
 8028b8a:	4618      	mov	r0, r3
 8028b8c:	3710      	adds	r7, #16
 8028b8e:	46bd      	mov	sp, r7
 8028b90:	bd80      	pop	{r7, pc}
	...

08028b94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8028b94:	b580      	push	{r7, lr}
 8028b96:	b0ba      	sub	sp, #232	; 0xe8
 8028b98:	af00      	add	r7, sp, #0
 8028b9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8028b9c:	687b      	ldr	r3, [r7, #4]
 8028b9e:	681b      	ldr	r3, [r3, #0]
 8028ba0:	681b      	ldr	r3, [r3, #0]
 8028ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8028ba6:	687b      	ldr	r3, [r7, #4]
 8028ba8:	681b      	ldr	r3, [r3, #0]
 8028baa:	68db      	ldr	r3, [r3, #12]
 8028bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8028bb0:	687b      	ldr	r3, [r7, #4]
 8028bb2:	681b      	ldr	r3, [r3, #0]
 8028bb4:	695b      	ldr	r3, [r3, #20]
 8028bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8028bba:	2300      	movs	r3, #0
 8028bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8028bc0:	2300      	movs	r3, #0
 8028bc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8028bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028bca:	f003 030f 	and.w	r3, r3, #15
 8028bce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8028bd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8028bd6:	2b00      	cmp	r3, #0
 8028bd8:	d10f      	bne.n	8028bfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8028bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028bde:	f003 0320 	and.w	r3, r3, #32
 8028be2:	2b00      	cmp	r3, #0
 8028be4:	d009      	beq.n	8028bfa <HAL_UART_IRQHandler+0x66>
 8028be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8028bea:	f003 0320 	and.w	r3, r3, #32
 8028bee:	2b00      	cmp	r3, #0
 8028bf0:	d003      	beq.n	8028bfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8028bf2:	6878      	ldr	r0, [r7, #4]
 8028bf4:	f000 fc07 	bl	8029406 <UART_Receive_IT>
      return;
 8028bf8:	e256      	b.n	80290a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8028bfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8028bfe:	2b00      	cmp	r3, #0
 8028c00:	f000 80de 	beq.w	8028dc0 <HAL_UART_IRQHandler+0x22c>
 8028c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8028c08:	f003 0301 	and.w	r3, r3, #1
 8028c0c:	2b00      	cmp	r3, #0
 8028c0e:	d106      	bne.n	8028c1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8028c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8028c14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8028c18:	2b00      	cmp	r3, #0
 8028c1a:	f000 80d1 	beq.w	8028dc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8028c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028c22:	f003 0301 	and.w	r3, r3, #1
 8028c26:	2b00      	cmp	r3, #0
 8028c28:	d00b      	beq.n	8028c42 <HAL_UART_IRQHandler+0xae>
 8028c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8028c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028c32:	2b00      	cmp	r3, #0
 8028c34:	d005      	beq.n	8028c42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8028c36:	687b      	ldr	r3, [r7, #4]
 8028c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028c3a:	f043 0201 	orr.w	r2, r3, #1
 8028c3e:	687b      	ldr	r3, [r7, #4]
 8028c40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8028c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028c46:	f003 0304 	and.w	r3, r3, #4
 8028c4a:	2b00      	cmp	r3, #0
 8028c4c:	d00b      	beq.n	8028c66 <HAL_UART_IRQHandler+0xd2>
 8028c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8028c52:	f003 0301 	and.w	r3, r3, #1
 8028c56:	2b00      	cmp	r3, #0
 8028c58:	d005      	beq.n	8028c66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8028c5a:	687b      	ldr	r3, [r7, #4]
 8028c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028c5e:	f043 0202 	orr.w	r2, r3, #2
 8028c62:	687b      	ldr	r3, [r7, #4]
 8028c64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8028c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028c6a:	f003 0302 	and.w	r3, r3, #2
 8028c6e:	2b00      	cmp	r3, #0
 8028c70:	d00b      	beq.n	8028c8a <HAL_UART_IRQHandler+0xf6>
 8028c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8028c76:	f003 0301 	and.w	r3, r3, #1
 8028c7a:	2b00      	cmp	r3, #0
 8028c7c:	d005      	beq.n	8028c8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8028c7e:	687b      	ldr	r3, [r7, #4]
 8028c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028c82:	f043 0204 	orr.w	r2, r3, #4
 8028c86:	687b      	ldr	r3, [r7, #4]
 8028c88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8028c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028c8e:	f003 0308 	and.w	r3, r3, #8
 8028c92:	2b00      	cmp	r3, #0
 8028c94:	d011      	beq.n	8028cba <HAL_UART_IRQHandler+0x126>
 8028c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8028c9a:	f003 0320 	and.w	r3, r3, #32
 8028c9e:	2b00      	cmp	r3, #0
 8028ca0:	d105      	bne.n	8028cae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8028ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8028ca6:	f003 0301 	and.w	r3, r3, #1
 8028caa:	2b00      	cmp	r3, #0
 8028cac:	d005      	beq.n	8028cba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8028cae:	687b      	ldr	r3, [r7, #4]
 8028cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028cb2:	f043 0208 	orr.w	r2, r3, #8
 8028cb6:	687b      	ldr	r3, [r7, #4]
 8028cb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8028cba:	687b      	ldr	r3, [r7, #4]
 8028cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028cbe:	2b00      	cmp	r3, #0
 8028cc0:	f000 81ed 	beq.w	802909e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8028cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028cc8:	f003 0320 	and.w	r3, r3, #32
 8028ccc:	2b00      	cmp	r3, #0
 8028cce:	d008      	beq.n	8028ce2 <HAL_UART_IRQHandler+0x14e>
 8028cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8028cd4:	f003 0320 	and.w	r3, r3, #32
 8028cd8:	2b00      	cmp	r3, #0
 8028cda:	d002      	beq.n	8028ce2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8028cdc:	6878      	ldr	r0, [r7, #4]
 8028cde:	f000 fb92 	bl	8029406 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8028ce2:	687b      	ldr	r3, [r7, #4]
 8028ce4:	681b      	ldr	r3, [r3, #0]
 8028ce6:	695b      	ldr	r3, [r3, #20]
 8028ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028cec:	2b40      	cmp	r3, #64	; 0x40
 8028cee:	bf0c      	ite	eq
 8028cf0:	2301      	moveq	r3, #1
 8028cf2:	2300      	movne	r3, #0
 8028cf4:	b2db      	uxtb	r3, r3
 8028cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8028cfa:	687b      	ldr	r3, [r7, #4]
 8028cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028cfe:	f003 0308 	and.w	r3, r3, #8
 8028d02:	2b00      	cmp	r3, #0
 8028d04:	d103      	bne.n	8028d0e <HAL_UART_IRQHandler+0x17a>
 8028d06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8028d0a:	2b00      	cmp	r3, #0
 8028d0c:	d04f      	beq.n	8028dae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8028d0e:	6878      	ldr	r0, [r7, #4]
 8028d10:	f000 fa9a 	bl	8029248 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028d14:	687b      	ldr	r3, [r7, #4]
 8028d16:	681b      	ldr	r3, [r3, #0]
 8028d18:	695b      	ldr	r3, [r3, #20]
 8028d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028d1e:	2b40      	cmp	r3, #64	; 0x40
 8028d20:	d141      	bne.n	8028da6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8028d22:	687b      	ldr	r3, [r7, #4]
 8028d24:	681b      	ldr	r3, [r3, #0]
 8028d26:	3314      	adds	r3, #20
 8028d28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8028d30:	e853 3f00 	ldrex	r3, [r3]
 8028d34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8028d38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8028d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8028d40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8028d44:	687b      	ldr	r3, [r7, #4]
 8028d46:	681b      	ldr	r3, [r3, #0]
 8028d48:	3314      	adds	r3, #20
 8028d4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8028d4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8028d52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028d56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8028d5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8028d5e:	e841 2300 	strex	r3, r2, [r1]
 8028d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8028d66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8028d6a:	2b00      	cmp	r3, #0
 8028d6c:	d1d9      	bne.n	8028d22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8028d6e:	687b      	ldr	r3, [r7, #4]
 8028d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028d72:	2b00      	cmp	r3, #0
 8028d74:	d013      	beq.n	8028d9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8028d76:	687b      	ldr	r3, [r7, #4]
 8028d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028d7a:	4a7d      	ldr	r2, [pc, #500]	; (8028f70 <HAL_UART_IRQHandler+0x3dc>)
 8028d7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8028d7e:	687b      	ldr	r3, [r7, #4]
 8028d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028d82:	4618      	mov	r0, r3
 8028d84:	f7fa fb46 	bl	8023414 <HAL_DMA_Abort_IT>
 8028d88:	4603      	mov	r3, r0
 8028d8a:	2b00      	cmp	r3, #0
 8028d8c:	d016      	beq.n	8028dbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8028d8e:	687b      	ldr	r3, [r7, #4]
 8028d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028d94:	687a      	ldr	r2, [r7, #4]
 8028d96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8028d98:	4610      	mov	r0, r2
 8028d9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028d9c:	e00e      	b.n	8028dbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8028d9e:	6878      	ldr	r0, [r7, #4]
 8028da0:	f000 f990 	bl	80290c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028da4:	e00a      	b.n	8028dbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8028da6:	6878      	ldr	r0, [r7, #4]
 8028da8:	f000 f98c 	bl	80290c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028dac:	e006      	b.n	8028dbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8028dae:	6878      	ldr	r0, [r7, #4]
 8028db0:	f000 f988 	bl	80290c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028db4:	687b      	ldr	r3, [r7, #4]
 8028db6:	2200      	movs	r2, #0
 8028db8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8028dba:	e170      	b.n	802909e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028dbc:	bf00      	nop
    return;
 8028dbe:	e16e      	b.n	802909e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8028dc0:	687b      	ldr	r3, [r7, #4]
 8028dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028dc4:	2b01      	cmp	r3, #1
 8028dc6:	f040 814a 	bne.w	802905e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8028dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028dce:	f003 0310 	and.w	r3, r3, #16
 8028dd2:	2b00      	cmp	r3, #0
 8028dd4:	f000 8143 	beq.w	802905e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8028dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8028ddc:	f003 0310 	and.w	r3, r3, #16
 8028de0:	2b00      	cmp	r3, #0
 8028de2:	f000 813c 	beq.w	802905e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8028de6:	2300      	movs	r3, #0
 8028de8:	60bb      	str	r3, [r7, #8]
 8028dea:	687b      	ldr	r3, [r7, #4]
 8028dec:	681b      	ldr	r3, [r3, #0]
 8028dee:	681b      	ldr	r3, [r3, #0]
 8028df0:	60bb      	str	r3, [r7, #8]
 8028df2:	687b      	ldr	r3, [r7, #4]
 8028df4:	681b      	ldr	r3, [r3, #0]
 8028df6:	685b      	ldr	r3, [r3, #4]
 8028df8:	60bb      	str	r3, [r7, #8]
 8028dfa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028dfc:	687b      	ldr	r3, [r7, #4]
 8028dfe:	681b      	ldr	r3, [r3, #0]
 8028e00:	695b      	ldr	r3, [r3, #20]
 8028e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028e06:	2b40      	cmp	r3, #64	; 0x40
 8028e08:	f040 80b4 	bne.w	8028f74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8028e0c:	687b      	ldr	r3, [r7, #4]
 8028e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028e10:	681b      	ldr	r3, [r3, #0]
 8028e12:	685b      	ldr	r3, [r3, #4]
 8028e14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8028e18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8028e1c:	2b00      	cmp	r3, #0
 8028e1e:	f000 8140 	beq.w	80290a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8028e22:	687b      	ldr	r3, [r7, #4]
 8028e24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8028e26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8028e2a:	429a      	cmp	r2, r3
 8028e2c:	f080 8139 	bcs.w	80290a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8028e30:	687b      	ldr	r3, [r7, #4]
 8028e32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8028e36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8028e38:	687b      	ldr	r3, [r7, #4]
 8028e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028e3c:	69db      	ldr	r3, [r3, #28]
 8028e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8028e42:	f000 8088 	beq.w	8028f56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8028e46:	687b      	ldr	r3, [r7, #4]
 8028e48:	681b      	ldr	r3, [r3, #0]
 8028e4a:	330c      	adds	r3, #12
 8028e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028e50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8028e54:	e853 3f00 	ldrex	r3, [r3]
 8028e58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8028e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8028e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8028e64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8028e68:	687b      	ldr	r3, [r7, #4]
 8028e6a:	681b      	ldr	r3, [r3, #0]
 8028e6c:	330c      	adds	r3, #12
 8028e6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8028e72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8028e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028e7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8028e7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8028e82:	e841 2300 	strex	r3, r2, [r1]
 8028e86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8028e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8028e8e:	2b00      	cmp	r3, #0
 8028e90:	d1d9      	bne.n	8028e46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8028e92:	687b      	ldr	r3, [r7, #4]
 8028e94:	681b      	ldr	r3, [r3, #0]
 8028e96:	3314      	adds	r3, #20
 8028e98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e9c:	e853 3f00 	ldrex	r3, [r3]
 8028ea0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8028ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028ea4:	f023 0301 	bic.w	r3, r3, #1
 8028ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8028eac:	687b      	ldr	r3, [r7, #4]
 8028eae:	681b      	ldr	r3, [r3, #0]
 8028eb0:	3314      	adds	r3, #20
 8028eb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8028eb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8028eba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028ebc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8028ebe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8028ec2:	e841 2300 	strex	r3, r2, [r1]
 8028ec6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8028ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8028eca:	2b00      	cmp	r3, #0
 8028ecc:	d1e1      	bne.n	8028e92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8028ece:	687b      	ldr	r3, [r7, #4]
 8028ed0:	681b      	ldr	r3, [r3, #0]
 8028ed2:	3314      	adds	r3, #20
 8028ed4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8028ed8:	e853 3f00 	ldrex	r3, [r3]
 8028edc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8028ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8028ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8028ee8:	687b      	ldr	r3, [r7, #4]
 8028eea:	681b      	ldr	r3, [r3, #0]
 8028eec:	3314      	adds	r3, #20
 8028eee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8028ef2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8028ef4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028ef6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8028ef8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8028efa:	e841 2300 	strex	r3, r2, [r1]
 8028efe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8028f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8028f02:	2b00      	cmp	r3, #0
 8028f04:	d1e3      	bne.n	8028ece <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8028f06:	687b      	ldr	r3, [r7, #4]
 8028f08:	2220      	movs	r2, #32
 8028f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8028f0e:	687b      	ldr	r3, [r7, #4]
 8028f10:	2200      	movs	r2, #0
 8028f12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8028f14:	687b      	ldr	r3, [r7, #4]
 8028f16:	681b      	ldr	r3, [r3, #0]
 8028f18:	330c      	adds	r3, #12
 8028f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028f1e:	e853 3f00 	ldrex	r3, [r3]
 8028f22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8028f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028f26:	f023 0310 	bic.w	r3, r3, #16
 8028f2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8028f2e:	687b      	ldr	r3, [r7, #4]
 8028f30:	681b      	ldr	r3, [r3, #0]
 8028f32:	330c      	adds	r3, #12
 8028f34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8028f38:	65ba      	str	r2, [r7, #88]	; 0x58
 8028f3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028f3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8028f3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8028f40:	e841 2300 	strex	r3, r2, [r1]
 8028f44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8028f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028f48:	2b00      	cmp	r3, #0
 8028f4a:	d1e3      	bne.n	8028f14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8028f4c:	687b      	ldr	r3, [r7, #4]
 8028f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028f50:	4618      	mov	r0, r3
 8028f52:	f7fa f9ef 	bl	8023334 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8028f56:	687b      	ldr	r3, [r7, #4]
 8028f58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8028f5a:	687b      	ldr	r3, [r7, #4]
 8028f5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8028f5e:	b29b      	uxth	r3, r3
 8028f60:	1ad3      	subs	r3, r2, r3
 8028f62:	b29b      	uxth	r3, r3
 8028f64:	4619      	mov	r1, r3
 8028f66:	6878      	ldr	r0, [r7, #4]
 8028f68:	f000 f8b6 	bl	80290d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8028f6c:	e099      	b.n	80290a2 <HAL_UART_IRQHandler+0x50e>
 8028f6e:	bf00      	nop
 8028f70:	0802930f 	.word	0x0802930f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8028f74:	687b      	ldr	r3, [r7, #4]
 8028f76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8028f78:	687b      	ldr	r3, [r7, #4]
 8028f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8028f7c:	b29b      	uxth	r3, r3
 8028f7e:	1ad3      	subs	r3, r2, r3
 8028f80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8028f84:	687b      	ldr	r3, [r7, #4]
 8028f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8028f88:	b29b      	uxth	r3, r3
 8028f8a:	2b00      	cmp	r3, #0
 8028f8c:	f000 808b 	beq.w	80290a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8028f90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8028f94:	2b00      	cmp	r3, #0
 8028f96:	f000 8086 	beq.w	80290a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8028f9a:	687b      	ldr	r3, [r7, #4]
 8028f9c:	681b      	ldr	r3, [r3, #0]
 8028f9e:	330c      	adds	r3, #12
 8028fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028fa4:	e853 3f00 	ldrex	r3, [r3]
 8028fa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8028faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028fac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8028fb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8028fb4:	687b      	ldr	r3, [r7, #4]
 8028fb6:	681b      	ldr	r3, [r3, #0]
 8028fb8:	330c      	adds	r3, #12
 8028fba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8028fbe:	647a      	str	r2, [r7, #68]	; 0x44
 8028fc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028fc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8028fc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8028fc6:	e841 2300 	strex	r3, r2, [r1]
 8028fca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8028fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028fce:	2b00      	cmp	r3, #0
 8028fd0:	d1e3      	bne.n	8028f9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8028fd2:	687b      	ldr	r3, [r7, #4]
 8028fd4:	681b      	ldr	r3, [r3, #0]
 8028fd6:	3314      	adds	r3, #20
 8028fd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028fdc:	e853 3f00 	ldrex	r3, [r3]
 8028fe0:	623b      	str	r3, [r7, #32]
   return(result);
 8028fe2:	6a3b      	ldr	r3, [r7, #32]
 8028fe4:	f023 0301 	bic.w	r3, r3, #1
 8028fe8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8028fec:	687b      	ldr	r3, [r7, #4]
 8028fee:	681b      	ldr	r3, [r3, #0]
 8028ff0:	3314      	adds	r3, #20
 8028ff2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8028ff6:	633a      	str	r2, [r7, #48]	; 0x30
 8028ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8028ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8028ffe:	e841 2300 	strex	r3, r2, [r1]
 8029002:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8029004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029006:	2b00      	cmp	r3, #0
 8029008:	d1e3      	bne.n	8028fd2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802900a:	687b      	ldr	r3, [r7, #4]
 802900c:	2220      	movs	r2, #32
 802900e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029012:	687b      	ldr	r3, [r7, #4]
 8029014:	2200      	movs	r2, #0
 8029016:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029018:	687b      	ldr	r3, [r7, #4]
 802901a:	681b      	ldr	r3, [r3, #0]
 802901c:	330c      	adds	r3, #12
 802901e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029020:	693b      	ldr	r3, [r7, #16]
 8029022:	e853 3f00 	ldrex	r3, [r3]
 8029026:	60fb      	str	r3, [r7, #12]
   return(result);
 8029028:	68fb      	ldr	r3, [r7, #12]
 802902a:	f023 0310 	bic.w	r3, r3, #16
 802902e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8029032:	687b      	ldr	r3, [r7, #4]
 8029034:	681b      	ldr	r3, [r3, #0]
 8029036:	330c      	adds	r3, #12
 8029038:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 802903c:	61fa      	str	r2, [r7, #28]
 802903e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029040:	69b9      	ldr	r1, [r7, #24]
 8029042:	69fa      	ldr	r2, [r7, #28]
 8029044:	e841 2300 	strex	r3, r2, [r1]
 8029048:	617b      	str	r3, [r7, #20]
   return(result);
 802904a:	697b      	ldr	r3, [r7, #20]
 802904c:	2b00      	cmp	r3, #0
 802904e:	d1e3      	bne.n	8029018 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8029050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8029054:	4619      	mov	r1, r3
 8029056:	6878      	ldr	r0, [r7, #4]
 8029058:	f000 f83e 	bl	80290d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802905c:	e023      	b.n	80290a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 802905e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029066:	2b00      	cmp	r3, #0
 8029068:	d009      	beq.n	802907e <HAL_UART_IRQHandler+0x4ea>
 802906a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802906e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029072:	2b00      	cmp	r3, #0
 8029074:	d003      	beq.n	802907e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8029076:	6878      	ldr	r0, [r7, #4]
 8029078:	f000 f95d 	bl	8029336 <UART_Transmit_IT>
    return;
 802907c:	e014      	b.n	80290a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802907e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029086:	2b00      	cmp	r3, #0
 8029088:	d00e      	beq.n	80290a8 <HAL_UART_IRQHandler+0x514>
 802908a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802908e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029092:	2b00      	cmp	r3, #0
 8029094:	d008      	beq.n	80290a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8029096:	6878      	ldr	r0, [r7, #4]
 8029098:	f000 f99d 	bl	80293d6 <UART_EndTransmit_IT>
    return;
 802909c:	e004      	b.n	80290a8 <HAL_UART_IRQHandler+0x514>
    return;
 802909e:	bf00      	nop
 80290a0:	e002      	b.n	80290a8 <HAL_UART_IRQHandler+0x514>
      return;
 80290a2:	bf00      	nop
 80290a4:	e000      	b.n	80290a8 <HAL_UART_IRQHandler+0x514>
      return;
 80290a6:	bf00      	nop
  }
}
 80290a8:	37e8      	adds	r7, #232	; 0xe8
 80290aa:	46bd      	mov	sp, r7
 80290ac:	bd80      	pop	{r7, pc}
 80290ae:	bf00      	nop

080290b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80290b0:	b480      	push	{r7}
 80290b2:	b083      	sub	sp, #12
 80290b4:	af00      	add	r7, sp, #0
 80290b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80290b8:	bf00      	nop
 80290ba:	370c      	adds	r7, #12
 80290bc:	46bd      	mov	sp, r7
 80290be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80290c2:	4770      	bx	lr

080290c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80290c4:	b480      	push	{r7}
 80290c6:	b083      	sub	sp, #12
 80290c8:	af00      	add	r7, sp, #0
 80290ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80290cc:	bf00      	nop
 80290ce:	370c      	adds	r7, #12
 80290d0:	46bd      	mov	sp, r7
 80290d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80290d6:	4770      	bx	lr

080290d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80290d8:	b480      	push	{r7}
 80290da:	b083      	sub	sp, #12
 80290dc:	af00      	add	r7, sp, #0
 80290de:	6078      	str	r0, [r7, #4]
 80290e0:	460b      	mov	r3, r1
 80290e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80290e4:	bf00      	nop
 80290e6:	370c      	adds	r7, #12
 80290e8:	46bd      	mov	sp, r7
 80290ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80290ee:	4770      	bx	lr

080290f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80290f0:	b580      	push	{r7, lr}
 80290f2:	b090      	sub	sp, #64	; 0x40
 80290f4:	af00      	add	r7, sp, #0
 80290f6:	60f8      	str	r0, [r7, #12]
 80290f8:	60b9      	str	r1, [r7, #8]
 80290fa:	603b      	str	r3, [r7, #0]
 80290fc:	4613      	mov	r3, r2
 80290fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8029100:	e050      	b.n	80291a4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8029102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029108:	d04c      	beq.n	80291a4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 802910a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802910c:	2b00      	cmp	r3, #0
 802910e:	d007      	beq.n	8029120 <UART_WaitOnFlagUntilTimeout+0x30>
 8029110:	f7f9 fed6 	bl	8022ec0 <HAL_GetTick>
 8029114:	4602      	mov	r2, r0
 8029116:	683b      	ldr	r3, [r7, #0]
 8029118:	1ad3      	subs	r3, r2, r3
 802911a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802911c:	429a      	cmp	r2, r3
 802911e:	d241      	bcs.n	80291a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8029120:	68fb      	ldr	r3, [r7, #12]
 8029122:	681b      	ldr	r3, [r3, #0]
 8029124:	330c      	adds	r3, #12
 8029126:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802912a:	e853 3f00 	ldrex	r3, [r3]
 802912e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8029130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029132:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8029136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8029138:	68fb      	ldr	r3, [r7, #12]
 802913a:	681b      	ldr	r3, [r3, #0]
 802913c:	330c      	adds	r3, #12
 802913e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8029140:	637a      	str	r2, [r7, #52]	; 0x34
 8029142:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029144:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8029146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029148:	e841 2300 	strex	r3, r2, [r1]
 802914c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802914e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029150:	2b00      	cmp	r3, #0
 8029152:	d1e5      	bne.n	8029120 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029154:	68fb      	ldr	r3, [r7, #12]
 8029156:	681b      	ldr	r3, [r3, #0]
 8029158:	3314      	adds	r3, #20
 802915a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802915c:	697b      	ldr	r3, [r7, #20]
 802915e:	e853 3f00 	ldrex	r3, [r3]
 8029162:	613b      	str	r3, [r7, #16]
   return(result);
 8029164:	693b      	ldr	r3, [r7, #16]
 8029166:	f023 0301 	bic.w	r3, r3, #1
 802916a:	63bb      	str	r3, [r7, #56]	; 0x38
 802916c:	68fb      	ldr	r3, [r7, #12]
 802916e:	681b      	ldr	r3, [r3, #0]
 8029170:	3314      	adds	r3, #20
 8029172:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8029174:	623a      	str	r2, [r7, #32]
 8029176:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029178:	69f9      	ldr	r1, [r7, #28]
 802917a:	6a3a      	ldr	r2, [r7, #32]
 802917c:	e841 2300 	strex	r3, r2, [r1]
 8029180:	61bb      	str	r3, [r7, #24]
   return(result);
 8029182:	69bb      	ldr	r3, [r7, #24]
 8029184:	2b00      	cmp	r3, #0
 8029186:	d1e5      	bne.n	8029154 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8029188:	68fb      	ldr	r3, [r7, #12]
 802918a:	2220      	movs	r2, #32
 802918c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8029190:	68fb      	ldr	r3, [r7, #12]
 8029192:	2220      	movs	r2, #32
 8029194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8029198:	68fb      	ldr	r3, [r7, #12]
 802919a:	2200      	movs	r2, #0
 802919c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80291a0:	2303      	movs	r3, #3
 80291a2:	e00f      	b.n	80291c4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80291a4:	68fb      	ldr	r3, [r7, #12]
 80291a6:	681b      	ldr	r3, [r3, #0]
 80291a8:	681a      	ldr	r2, [r3, #0]
 80291aa:	68bb      	ldr	r3, [r7, #8]
 80291ac:	4013      	ands	r3, r2
 80291ae:	68ba      	ldr	r2, [r7, #8]
 80291b0:	429a      	cmp	r2, r3
 80291b2:	bf0c      	ite	eq
 80291b4:	2301      	moveq	r3, #1
 80291b6:	2300      	movne	r3, #0
 80291b8:	b2db      	uxtb	r3, r3
 80291ba:	461a      	mov	r2, r3
 80291bc:	79fb      	ldrb	r3, [r7, #7]
 80291be:	429a      	cmp	r2, r3
 80291c0:	d09f      	beq.n	8029102 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80291c2:	2300      	movs	r3, #0
}
 80291c4:	4618      	mov	r0, r3
 80291c6:	3740      	adds	r7, #64	; 0x40
 80291c8:	46bd      	mov	sp, r7
 80291ca:	bd80      	pop	{r7, pc}

080291cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80291cc:	b480      	push	{r7}
 80291ce:	b085      	sub	sp, #20
 80291d0:	af00      	add	r7, sp, #0
 80291d2:	60f8      	str	r0, [r7, #12]
 80291d4:	60b9      	str	r1, [r7, #8]
 80291d6:	4613      	mov	r3, r2
 80291d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80291da:	68fb      	ldr	r3, [r7, #12]
 80291dc:	68ba      	ldr	r2, [r7, #8]
 80291de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80291e0:	68fb      	ldr	r3, [r7, #12]
 80291e2:	88fa      	ldrh	r2, [r7, #6]
 80291e4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80291e6:	68fb      	ldr	r3, [r7, #12]
 80291e8:	88fa      	ldrh	r2, [r7, #6]
 80291ea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80291ec:	68fb      	ldr	r3, [r7, #12]
 80291ee:	2200      	movs	r2, #0
 80291f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80291f2:	68fb      	ldr	r3, [r7, #12]
 80291f4:	2222      	movs	r2, #34	; 0x22
 80291f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80291fa:	68fb      	ldr	r3, [r7, #12]
 80291fc:	2200      	movs	r2, #0
 80291fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8029202:	68fb      	ldr	r3, [r7, #12]
 8029204:	691b      	ldr	r3, [r3, #16]
 8029206:	2b00      	cmp	r3, #0
 8029208:	d007      	beq.n	802921a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 802920a:	68fb      	ldr	r3, [r7, #12]
 802920c:	681b      	ldr	r3, [r3, #0]
 802920e:	68da      	ldr	r2, [r3, #12]
 8029210:	68fb      	ldr	r3, [r7, #12]
 8029212:	681b      	ldr	r3, [r3, #0]
 8029214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8029218:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 802921a:	68fb      	ldr	r3, [r7, #12]
 802921c:	681b      	ldr	r3, [r3, #0]
 802921e:	695a      	ldr	r2, [r3, #20]
 8029220:	68fb      	ldr	r3, [r7, #12]
 8029222:	681b      	ldr	r3, [r3, #0]
 8029224:	f042 0201 	orr.w	r2, r2, #1
 8029228:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 802922a:	68fb      	ldr	r3, [r7, #12]
 802922c:	681b      	ldr	r3, [r3, #0]
 802922e:	68da      	ldr	r2, [r3, #12]
 8029230:	68fb      	ldr	r3, [r7, #12]
 8029232:	681b      	ldr	r3, [r3, #0]
 8029234:	f042 0220 	orr.w	r2, r2, #32
 8029238:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802923a:	2300      	movs	r3, #0
}
 802923c:	4618      	mov	r0, r3
 802923e:	3714      	adds	r7, #20
 8029240:	46bd      	mov	sp, r7
 8029242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029246:	4770      	bx	lr

08029248 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8029248:	b480      	push	{r7}
 802924a:	b095      	sub	sp, #84	; 0x54
 802924c:	af00      	add	r7, sp, #0
 802924e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8029250:	687b      	ldr	r3, [r7, #4]
 8029252:	681b      	ldr	r3, [r3, #0]
 8029254:	330c      	adds	r3, #12
 8029256:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802925a:	e853 3f00 	ldrex	r3, [r3]
 802925e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8029260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029262:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8029266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029268:	687b      	ldr	r3, [r7, #4]
 802926a:	681b      	ldr	r3, [r3, #0]
 802926c:	330c      	adds	r3, #12
 802926e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029270:	643a      	str	r2, [r7, #64]	; 0x40
 8029272:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029274:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8029276:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8029278:	e841 2300 	strex	r3, r2, [r1]
 802927c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802927e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029280:	2b00      	cmp	r3, #0
 8029282:	d1e5      	bne.n	8029250 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029284:	687b      	ldr	r3, [r7, #4]
 8029286:	681b      	ldr	r3, [r3, #0]
 8029288:	3314      	adds	r3, #20
 802928a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802928c:	6a3b      	ldr	r3, [r7, #32]
 802928e:	e853 3f00 	ldrex	r3, [r3]
 8029292:	61fb      	str	r3, [r7, #28]
   return(result);
 8029294:	69fb      	ldr	r3, [r7, #28]
 8029296:	f023 0301 	bic.w	r3, r3, #1
 802929a:	64bb      	str	r3, [r7, #72]	; 0x48
 802929c:	687b      	ldr	r3, [r7, #4]
 802929e:	681b      	ldr	r3, [r3, #0]
 80292a0:	3314      	adds	r3, #20
 80292a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80292a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80292a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80292a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80292aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80292ac:	e841 2300 	strex	r3, r2, [r1]
 80292b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80292b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80292b4:	2b00      	cmp	r3, #0
 80292b6:	d1e5      	bne.n	8029284 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80292b8:	687b      	ldr	r3, [r7, #4]
 80292ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80292bc:	2b01      	cmp	r3, #1
 80292be:	d119      	bne.n	80292f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80292c0:	687b      	ldr	r3, [r7, #4]
 80292c2:	681b      	ldr	r3, [r3, #0]
 80292c4:	330c      	adds	r3, #12
 80292c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80292c8:	68fb      	ldr	r3, [r7, #12]
 80292ca:	e853 3f00 	ldrex	r3, [r3]
 80292ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80292d0:	68bb      	ldr	r3, [r7, #8]
 80292d2:	f023 0310 	bic.w	r3, r3, #16
 80292d6:	647b      	str	r3, [r7, #68]	; 0x44
 80292d8:	687b      	ldr	r3, [r7, #4]
 80292da:	681b      	ldr	r3, [r3, #0]
 80292dc:	330c      	adds	r3, #12
 80292de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80292e0:	61ba      	str	r2, [r7, #24]
 80292e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80292e4:	6979      	ldr	r1, [r7, #20]
 80292e6:	69ba      	ldr	r2, [r7, #24]
 80292e8:	e841 2300 	strex	r3, r2, [r1]
 80292ec:	613b      	str	r3, [r7, #16]
   return(result);
 80292ee:	693b      	ldr	r3, [r7, #16]
 80292f0:	2b00      	cmp	r3, #0
 80292f2:	d1e5      	bne.n	80292c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80292f4:	687b      	ldr	r3, [r7, #4]
 80292f6:	2220      	movs	r2, #32
 80292f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80292fc:	687b      	ldr	r3, [r7, #4]
 80292fe:	2200      	movs	r2, #0
 8029300:	631a      	str	r2, [r3, #48]	; 0x30
}
 8029302:	bf00      	nop
 8029304:	3754      	adds	r7, #84	; 0x54
 8029306:	46bd      	mov	sp, r7
 8029308:	f85d 7b04 	ldr.w	r7, [sp], #4
 802930c:	4770      	bx	lr

0802930e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802930e:	b580      	push	{r7, lr}
 8029310:	b084      	sub	sp, #16
 8029312:	af00      	add	r7, sp, #0
 8029314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8029316:	687b      	ldr	r3, [r7, #4]
 8029318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802931a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802931c:	68fb      	ldr	r3, [r7, #12]
 802931e:	2200      	movs	r2, #0
 8029320:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8029322:	68fb      	ldr	r3, [r7, #12]
 8029324:	2200      	movs	r2, #0
 8029326:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8029328:	68f8      	ldr	r0, [r7, #12]
 802932a:	f7ff fecb 	bl	80290c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802932e:	bf00      	nop
 8029330:	3710      	adds	r7, #16
 8029332:	46bd      	mov	sp, r7
 8029334:	bd80      	pop	{r7, pc}

08029336 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8029336:	b480      	push	{r7}
 8029338:	b085      	sub	sp, #20
 802933a:	af00      	add	r7, sp, #0
 802933c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802933e:	687b      	ldr	r3, [r7, #4]
 8029340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029344:	b2db      	uxtb	r3, r3
 8029346:	2b21      	cmp	r3, #33	; 0x21
 8029348:	d13e      	bne.n	80293c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802934a:	687b      	ldr	r3, [r7, #4]
 802934c:	689b      	ldr	r3, [r3, #8]
 802934e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029352:	d114      	bne.n	802937e <UART_Transmit_IT+0x48>
 8029354:	687b      	ldr	r3, [r7, #4]
 8029356:	691b      	ldr	r3, [r3, #16]
 8029358:	2b00      	cmp	r3, #0
 802935a:	d110      	bne.n	802937e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802935c:	687b      	ldr	r3, [r7, #4]
 802935e:	6a1b      	ldr	r3, [r3, #32]
 8029360:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8029362:	68fb      	ldr	r3, [r7, #12]
 8029364:	881b      	ldrh	r3, [r3, #0]
 8029366:	461a      	mov	r2, r3
 8029368:	687b      	ldr	r3, [r7, #4]
 802936a:	681b      	ldr	r3, [r3, #0]
 802936c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8029370:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8029372:	687b      	ldr	r3, [r7, #4]
 8029374:	6a1b      	ldr	r3, [r3, #32]
 8029376:	1c9a      	adds	r2, r3, #2
 8029378:	687b      	ldr	r3, [r7, #4]
 802937a:	621a      	str	r2, [r3, #32]
 802937c:	e008      	b.n	8029390 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802937e:	687b      	ldr	r3, [r7, #4]
 8029380:	6a1b      	ldr	r3, [r3, #32]
 8029382:	1c59      	adds	r1, r3, #1
 8029384:	687a      	ldr	r2, [r7, #4]
 8029386:	6211      	str	r1, [r2, #32]
 8029388:	781a      	ldrb	r2, [r3, #0]
 802938a:	687b      	ldr	r3, [r7, #4]
 802938c:	681b      	ldr	r3, [r3, #0]
 802938e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8029390:	687b      	ldr	r3, [r7, #4]
 8029392:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8029394:	b29b      	uxth	r3, r3
 8029396:	3b01      	subs	r3, #1
 8029398:	b29b      	uxth	r3, r3
 802939a:	687a      	ldr	r2, [r7, #4]
 802939c:	4619      	mov	r1, r3
 802939e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80293a0:	2b00      	cmp	r3, #0
 80293a2:	d10f      	bne.n	80293c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80293a4:	687b      	ldr	r3, [r7, #4]
 80293a6:	681b      	ldr	r3, [r3, #0]
 80293a8:	68da      	ldr	r2, [r3, #12]
 80293aa:	687b      	ldr	r3, [r7, #4]
 80293ac:	681b      	ldr	r3, [r3, #0]
 80293ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80293b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80293b4:	687b      	ldr	r3, [r7, #4]
 80293b6:	681b      	ldr	r3, [r3, #0]
 80293b8:	68da      	ldr	r2, [r3, #12]
 80293ba:	687b      	ldr	r3, [r7, #4]
 80293bc:	681b      	ldr	r3, [r3, #0]
 80293be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80293c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80293c4:	2300      	movs	r3, #0
 80293c6:	e000      	b.n	80293ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80293c8:	2302      	movs	r3, #2
  }
}
 80293ca:	4618      	mov	r0, r3
 80293cc:	3714      	adds	r7, #20
 80293ce:	46bd      	mov	sp, r7
 80293d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293d4:	4770      	bx	lr

080293d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80293d6:	b580      	push	{r7, lr}
 80293d8:	b082      	sub	sp, #8
 80293da:	af00      	add	r7, sp, #0
 80293dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80293de:	687b      	ldr	r3, [r7, #4]
 80293e0:	681b      	ldr	r3, [r3, #0]
 80293e2:	68da      	ldr	r2, [r3, #12]
 80293e4:	687b      	ldr	r3, [r7, #4]
 80293e6:	681b      	ldr	r3, [r3, #0]
 80293e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80293ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80293ee:	687b      	ldr	r3, [r7, #4]
 80293f0:	2220      	movs	r2, #32
 80293f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80293f6:	6878      	ldr	r0, [r7, #4]
 80293f8:	f7ff fe5a 	bl	80290b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80293fc:	2300      	movs	r3, #0
}
 80293fe:	4618      	mov	r0, r3
 8029400:	3708      	adds	r7, #8
 8029402:	46bd      	mov	sp, r7
 8029404:	bd80      	pop	{r7, pc}

08029406 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8029406:	b580      	push	{r7, lr}
 8029408:	b08c      	sub	sp, #48	; 0x30
 802940a:	af00      	add	r7, sp, #0
 802940c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802940e:	687b      	ldr	r3, [r7, #4]
 8029410:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8029414:	b2db      	uxtb	r3, r3
 8029416:	2b22      	cmp	r3, #34	; 0x22
 8029418:	f040 80ab 	bne.w	8029572 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802941c:	687b      	ldr	r3, [r7, #4]
 802941e:	689b      	ldr	r3, [r3, #8]
 8029420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029424:	d117      	bne.n	8029456 <UART_Receive_IT+0x50>
 8029426:	687b      	ldr	r3, [r7, #4]
 8029428:	691b      	ldr	r3, [r3, #16]
 802942a:	2b00      	cmp	r3, #0
 802942c:	d113      	bne.n	8029456 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 802942e:	2300      	movs	r3, #0
 8029430:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8029432:	687b      	ldr	r3, [r7, #4]
 8029434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029436:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8029438:	687b      	ldr	r3, [r7, #4]
 802943a:	681b      	ldr	r3, [r3, #0]
 802943c:	685b      	ldr	r3, [r3, #4]
 802943e:	b29b      	uxth	r3, r3
 8029440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8029444:	b29a      	uxth	r2, r3
 8029446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029448:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802944a:	687b      	ldr	r3, [r7, #4]
 802944c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802944e:	1c9a      	adds	r2, r3, #2
 8029450:	687b      	ldr	r3, [r7, #4]
 8029452:	629a      	str	r2, [r3, #40]	; 0x28
 8029454:	e026      	b.n	80294a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8029456:	687b      	ldr	r3, [r7, #4]
 8029458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802945a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 802945c:	2300      	movs	r3, #0
 802945e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8029460:	687b      	ldr	r3, [r7, #4]
 8029462:	689b      	ldr	r3, [r3, #8]
 8029464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029468:	d007      	beq.n	802947a <UART_Receive_IT+0x74>
 802946a:	687b      	ldr	r3, [r7, #4]
 802946c:	689b      	ldr	r3, [r3, #8]
 802946e:	2b00      	cmp	r3, #0
 8029470:	d10a      	bne.n	8029488 <UART_Receive_IT+0x82>
 8029472:	687b      	ldr	r3, [r7, #4]
 8029474:	691b      	ldr	r3, [r3, #16]
 8029476:	2b00      	cmp	r3, #0
 8029478:	d106      	bne.n	8029488 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802947a:	687b      	ldr	r3, [r7, #4]
 802947c:	681b      	ldr	r3, [r3, #0]
 802947e:	685b      	ldr	r3, [r3, #4]
 8029480:	b2da      	uxtb	r2, r3
 8029482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029484:	701a      	strb	r2, [r3, #0]
 8029486:	e008      	b.n	802949a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8029488:	687b      	ldr	r3, [r7, #4]
 802948a:	681b      	ldr	r3, [r3, #0]
 802948c:	685b      	ldr	r3, [r3, #4]
 802948e:	b2db      	uxtb	r3, r3
 8029490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8029494:	b2da      	uxtb	r2, r3
 8029496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029498:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 802949a:	687b      	ldr	r3, [r7, #4]
 802949c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802949e:	1c5a      	adds	r2, r3, #1
 80294a0:	687b      	ldr	r3, [r7, #4]
 80294a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80294a4:	687b      	ldr	r3, [r7, #4]
 80294a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80294a8:	b29b      	uxth	r3, r3
 80294aa:	3b01      	subs	r3, #1
 80294ac:	b29b      	uxth	r3, r3
 80294ae:	687a      	ldr	r2, [r7, #4]
 80294b0:	4619      	mov	r1, r3
 80294b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80294b4:	2b00      	cmp	r3, #0
 80294b6:	d15a      	bne.n	802956e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80294b8:	687b      	ldr	r3, [r7, #4]
 80294ba:	681b      	ldr	r3, [r3, #0]
 80294bc:	68da      	ldr	r2, [r3, #12]
 80294be:	687b      	ldr	r3, [r7, #4]
 80294c0:	681b      	ldr	r3, [r3, #0]
 80294c2:	f022 0220 	bic.w	r2, r2, #32
 80294c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80294c8:	687b      	ldr	r3, [r7, #4]
 80294ca:	681b      	ldr	r3, [r3, #0]
 80294cc:	68da      	ldr	r2, [r3, #12]
 80294ce:	687b      	ldr	r3, [r7, #4]
 80294d0:	681b      	ldr	r3, [r3, #0]
 80294d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80294d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80294d8:	687b      	ldr	r3, [r7, #4]
 80294da:	681b      	ldr	r3, [r3, #0]
 80294dc:	695a      	ldr	r2, [r3, #20]
 80294de:	687b      	ldr	r3, [r7, #4]
 80294e0:	681b      	ldr	r3, [r3, #0]
 80294e2:	f022 0201 	bic.w	r2, r2, #1
 80294e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80294e8:	687b      	ldr	r3, [r7, #4]
 80294ea:	2220      	movs	r2, #32
 80294ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80294f0:	687b      	ldr	r3, [r7, #4]
 80294f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80294f4:	2b01      	cmp	r3, #1
 80294f6:	d135      	bne.n	8029564 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80294f8:	687b      	ldr	r3, [r7, #4]
 80294fa:	2200      	movs	r2, #0
 80294fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80294fe:	687b      	ldr	r3, [r7, #4]
 8029500:	681b      	ldr	r3, [r3, #0]
 8029502:	330c      	adds	r3, #12
 8029504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029506:	697b      	ldr	r3, [r7, #20]
 8029508:	e853 3f00 	ldrex	r3, [r3]
 802950c:	613b      	str	r3, [r7, #16]
   return(result);
 802950e:	693b      	ldr	r3, [r7, #16]
 8029510:	f023 0310 	bic.w	r3, r3, #16
 8029514:	627b      	str	r3, [r7, #36]	; 0x24
 8029516:	687b      	ldr	r3, [r7, #4]
 8029518:	681b      	ldr	r3, [r3, #0]
 802951a:	330c      	adds	r3, #12
 802951c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802951e:	623a      	str	r2, [r7, #32]
 8029520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029522:	69f9      	ldr	r1, [r7, #28]
 8029524:	6a3a      	ldr	r2, [r7, #32]
 8029526:	e841 2300 	strex	r3, r2, [r1]
 802952a:	61bb      	str	r3, [r7, #24]
   return(result);
 802952c:	69bb      	ldr	r3, [r7, #24]
 802952e:	2b00      	cmp	r3, #0
 8029530:	d1e5      	bne.n	80294fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8029532:	687b      	ldr	r3, [r7, #4]
 8029534:	681b      	ldr	r3, [r3, #0]
 8029536:	681b      	ldr	r3, [r3, #0]
 8029538:	f003 0310 	and.w	r3, r3, #16
 802953c:	2b10      	cmp	r3, #16
 802953e:	d10a      	bne.n	8029556 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8029540:	2300      	movs	r3, #0
 8029542:	60fb      	str	r3, [r7, #12]
 8029544:	687b      	ldr	r3, [r7, #4]
 8029546:	681b      	ldr	r3, [r3, #0]
 8029548:	681b      	ldr	r3, [r3, #0]
 802954a:	60fb      	str	r3, [r7, #12]
 802954c:	687b      	ldr	r3, [r7, #4]
 802954e:	681b      	ldr	r3, [r3, #0]
 8029550:	685b      	ldr	r3, [r3, #4]
 8029552:	60fb      	str	r3, [r7, #12]
 8029554:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8029556:	687b      	ldr	r3, [r7, #4]
 8029558:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802955a:	4619      	mov	r1, r3
 802955c:	6878      	ldr	r0, [r7, #4]
 802955e:	f7ff fdbb 	bl	80290d8 <HAL_UARTEx_RxEventCallback>
 8029562:	e002      	b.n	802956a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8029564:	6878      	ldr	r0, [r7, #4]
 8029566:	f7f8 f971 	bl	802184c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 802956a:	2300      	movs	r3, #0
 802956c:	e002      	b.n	8029574 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 802956e:	2300      	movs	r3, #0
 8029570:	e000      	b.n	8029574 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8029572:	2302      	movs	r3, #2
  }
}
 8029574:	4618      	mov	r0, r3
 8029576:	3730      	adds	r7, #48	; 0x30
 8029578:	46bd      	mov	sp, r7
 802957a:	bd80      	pop	{r7, pc}

0802957c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802957c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8029580:	b0c0      	sub	sp, #256	; 0x100
 8029582:	af00      	add	r7, sp, #0
 8029584:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8029588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802958c:	681b      	ldr	r3, [r3, #0]
 802958e:	691b      	ldr	r3, [r3, #16]
 8029590:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8029594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029598:	68d9      	ldr	r1, [r3, #12]
 802959a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802959e:	681a      	ldr	r2, [r3, #0]
 80295a0:	ea40 0301 	orr.w	r3, r0, r1
 80295a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80295a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80295aa:	689a      	ldr	r2, [r3, #8]
 80295ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80295b0:	691b      	ldr	r3, [r3, #16]
 80295b2:	431a      	orrs	r2, r3
 80295b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80295b8:	695b      	ldr	r3, [r3, #20]
 80295ba:	431a      	orrs	r2, r3
 80295bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80295c0:	69db      	ldr	r3, [r3, #28]
 80295c2:	4313      	orrs	r3, r2
 80295c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80295c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80295cc:	681b      	ldr	r3, [r3, #0]
 80295ce:	68db      	ldr	r3, [r3, #12]
 80295d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80295d4:	f021 010c 	bic.w	r1, r1, #12
 80295d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80295dc:	681a      	ldr	r2, [r3, #0]
 80295de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80295e2:	430b      	orrs	r3, r1
 80295e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80295e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80295ea:	681b      	ldr	r3, [r3, #0]
 80295ec:	695b      	ldr	r3, [r3, #20]
 80295ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80295f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80295f6:	6999      	ldr	r1, [r3, #24]
 80295f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80295fc:	681a      	ldr	r2, [r3, #0]
 80295fe:	ea40 0301 	orr.w	r3, r0, r1
 8029602:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8029604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029608:	681a      	ldr	r2, [r3, #0]
 802960a:	4b8f      	ldr	r3, [pc, #572]	; (8029848 <UART_SetConfig+0x2cc>)
 802960c:	429a      	cmp	r2, r3
 802960e:	d005      	beq.n	802961c <UART_SetConfig+0xa0>
 8029610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029614:	681a      	ldr	r2, [r3, #0]
 8029616:	4b8d      	ldr	r3, [pc, #564]	; (802984c <UART_SetConfig+0x2d0>)
 8029618:	429a      	cmp	r2, r3
 802961a:	d104      	bne.n	8029626 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802961c:	f7fd fcb2 	bl	8026f84 <HAL_RCC_GetPCLK2Freq>
 8029620:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8029624:	e003      	b.n	802962e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8029626:	f7fd fc99 	bl	8026f5c <HAL_RCC_GetPCLK1Freq>
 802962a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802962e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029632:	69db      	ldr	r3, [r3, #28]
 8029634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029638:	f040 810c 	bne.w	8029854 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802963c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029640:	2200      	movs	r2, #0
 8029642:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8029646:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 802964a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 802964e:	4622      	mov	r2, r4
 8029650:	462b      	mov	r3, r5
 8029652:	1891      	adds	r1, r2, r2
 8029654:	65b9      	str	r1, [r7, #88]	; 0x58
 8029656:	415b      	adcs	r3, r3
 8029658:	65fb      	str	r3, [r7, #92]	; 0x5c
 802965a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 802965e:	4621      	mov	r1, r4
 8029660:	eb12 0801 	adds.w	r8, r2, r1
 8029664:	4629      	mov	r1, r5
 8029666:	eb43 0901 	adc.w	r9, r3, r1
 802966a:	f04f 0200 	mov.w	r2, #0
 802966e:	f04f 0300 	mov.w	r3, #0
 8029672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8029676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802967a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802967e:	4690      	mov	r8, r2
 8029680:	4699      	mov	r9, r3
 8029682:	4623      	mov	r3, r4
 8029684:	eb18 0303 	adds.w	r3, r8, r3
 8029688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 802968c:	462b      	mov	r3, r5
 802968e:	eb49 0303 	adc.w	r3, r9, r3
 8029692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8029696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802969a:	685b      	ldr	r3, [r3, #4]
 802969c:	2200      	movs	r2, #0
 802969e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80296a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80296a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80296aa:	460b      	mov	r3, r1
 80296ac:	18db      	adds	r3, r3, r3
 80296ae:	653b      	str	r3, [r7, #80]	; 0x50
 80296b0:	4613      	mov	r3, r2
 80296b2:	eb42 0303 	adc.w	r3, r2, r3
 80296b6:	657b      	str	r3, [r7, #84]	; 0x54
 80296b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80296bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80296c0:	f7f6 fde6 	bl	8020290 <__aeabi_uldivmod>
 80296c4:	4602      	mov	r2, r0
 80296c6:	460b      	mov	r3, r1
 80296c8:	4b61      	ldr	r3, [pc, #388]	; (8029850 <UART_SetConfig+0x2d4>)
 80296ca:	fba3 2302 	umull	r2, r3, r3, r2
 80296ce:	095b      	lsrs	r3, r3, #5
 80296d0:	011c      	lsls	r4, r3, #4
 80296d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80296d6:	2200      	movs	r2, #0
 80296d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80296dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80296e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80296e4:	4642      	mov	r2, r8
 80296e6:	464b      	mov	r3, r9
 80296e8:	1891      	adds	r1, r2, r2
 80296ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80296ec:	415b      	adcs	r3, r3
 80296ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80296f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80296f4:	4641      	mov	r1, r8
 80296f6:	eb12 0a01 	adds.w	sl, r2, r1
 80296fa:	4649      	mov	r1, r9
 80296fc:	eb43 0b01 	adc.w	fp, r3, r1
 8029700:	f04f 0200 	mov.w	r2, #0
 8029704:	f04f 0300 	mov.w	r3, #0
 8029708:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802970c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8029710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8029714:	4692      	mov	sl, r2
 8029716:	469b      	mov	fp, r3
 8029718:	4643      	mov	r3, r8
 802971a:	eb1a 0303 	adds.w	r3, sl, r3
 802971e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8029722:	464b      	mov	r3, r9
 8029724:	eb4b 0303 	adc.w	r3, fp, r3
 8029728:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802972c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029730:	685b      	ldr	r3, [r3, #4]
 8029732:	2200      	movs	r2, #0
 8029734:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8029738:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 802973c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8029740:	460b      	mov	r3, r1
 8029742:	18db      	adds	r3, r3, r3
 8029744:	643b      	str	r3, [r7, #64]	; 0x40
 8029746:	4613      	mov	r3, r2
 8029748:	eb42 0303 	adc.w	r3, r2, r3
 802974c:	647b      	str	r3, [r7, #68]	; 0x44
 802974e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8029752:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8029756:	f7f6 fd9b 	bl	8020290 <__aeabi_uldivmod>
 802975a:	4602      	mov	r2, r0
 802975c:	460b      	mov	r3, r1
 802975e:	4611      	mov	r1, r2
 8029760:	4b3b      	ldr	r3, [pc, #236]	; (8029850 <UART_SetConfig+0x2d4>)
 8029762:	fba3 2301 	umull	r2, r3, r3, r1
 8029766:	095b      	lsrs	r3, r3, #5
 8029768:	2264      	movs	r2, #100	; 0x64
 802976a:	fb02 f303 	mul.w	r3, r2, r3
 802976e:	1acb      	subs	r3, r1, r3
 8029770:	00db      	lsls	r3, r3, #3
 8029772:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8029776:	4b36      	ldr	r3, [pc, #216]	; (8029850 <UART_SetConfig+0x2d4>)
 8029778:	fba3 2302 	umull	r2, r3, r3, r2
 802977c:	095b      	lsrs	r3, r3, #5
 802977e:	005b      	lsls	r3, r3, #1
 8029780:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8029784:	441c      	add	r4, r3
 8029786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802978a:	2200      	movs	r2, #0
 802978c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8029790:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8029794:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8029798:	4642      	mov	r2, r8
 802979a:	464b      	mov	r3, r9
 802979c:	1891      	adds	r1, r2, r2
 802979e:	63b9      	str	r1, [r7, #56]	; 0x38
 80297a0:	415b      	adcs	r3, r3
 80297a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80297a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80297a8:	4641      	mov	r1, r8
 80297aa:	1851      	adds	r1, r2, r1
 80297ac:	6339      	str	r1, [r7, #48]	; 0x30
 80297ae:	4649      	mov	r1, r9
 80297b0:	414b      	adcs	r3, r1
 80297b2:	637b      	str	r3, [r7, #52]	; 0x34
 80297b4:	f04f 0200 	mov.w	r2, #0
 80297b8:	f04f 0300 	mov.w	r3, #0
 80297bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80297c0:	4659      	mov	r1, fp
 80297c2:	00cb      	lsls	r3, r1, #3
 80297c4:	4651      	mov	r1, sl
 80297c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80297ca:	4651      	mov	r1, sl
 80297cc:	00ca      	lsls	r2, r1, #3
 80297ce:	4610      	mov	r0, r2
 80297d0:	4619      	mov	r1, r3
 80297d2:	4603      	mov	r3, r0
 80297d4:	4642      	mov	r2, r8
 80297d6:	189b      	adds	r3, r3, r2
 80297d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80297dc:	464b      	mov	r3, r9
 80297de:	460a      	mov	r2, r1
 80297e0:	eb42 0303 	adc.w	r3, r2, r3
 80297e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80297e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80297ec:	685b      	ldr	r3, [r3, #4]
 80297ee:	2200      	movs	r2, #0
 80297f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80297f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80297f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80297fc:	460b      	mov	r3, r1
 80297fe:	18db      	adds	r3, r3, r3
 8029800:	62bb      	str	r3, [r7, #40]	; 0x28
 8029802:	4613      	mov	r3, r2
 8029804:	eb42 0303 	adc.w	r3, r2, r3
 8029808:	62fb      	str	r3, [r7, #44]	; 0x2c
 802980a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802980e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8029812:	f7f6 fd3d 	bl	8020290 <__aeabi_uldivmod>
 8029816:	4602      	mov	r2, r0
 8029818:	460b      	mov	r3, r1
 802981a:	4b0d      	ldr	r3, [pc, #52]	; (8029850 <UART_SetConfig+0x2d4>)
 802981c:	fba3 1302 	umull	r1, r3, r3, r2
 8029820:	095b      	lsrs	r3, r3, #5
 8029822:	2164      	movs	r1, #100	; 0x64
 8029824:	fb01 f303 	mul.w	r3, r1, r3
 8029828:	1ad3      	subs	r3, r2, r3
 802982a:	00db      	lsls	r3, r3, #3
 802982c:	3332      	adds	r3, #50	; 0x32
 802982e:	4a08      	ldr	r2, [pc, #32]	; (8029850 <UART_SetConfig+0x2d4>)
 8029830:	fba2 2303 	umull	r2, r3, r2, r3
 8029834:	095b      	lsrs	r3, r3, #5
 8029836:	f003 0207 	and.w	r2, r3, #7
 802983a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802983e:	681b      	ldr	r3, [r3, #0]
 8029840:	4422      	add	r2, r4
 8029842:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8029844:	e105      	b.n	8029a52 <UART_SetConfig+0x4d6>
 8029846:	bf00      	nop
 8029848:	40011000 	.word	0x40011000
 802984c:	40011400 	.word	0x40011400
 8029850:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8029854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029858:	2200      	movs	r2, #0
 802985a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802985e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8029862:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8029866:	4642      	mov	r2, r8
 8029868:	464b      	mov	r3, r9
 802986a:	1891      	adds	r1, r2, r2
 802986c:	6239      	str	r1, [r7, #32]
 802986e:	415b      	adcs	r3, r3
 8029870:	627b      	str	r3, [r7, #36]	; 0x24
 8029872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8029876:	4641      	mov	r1, r8
 8029878:	1854      	adds	r4, r2, r1
 802987a:	4649      	mov	r1, r9
 802987c:	eb43 0501 	adc.w	r5, r3, r1
 8029880:	f04f 0200 	mov.w	r2, #0
 8029884:	f04f 0300 	mov.w	r3, #0
 8029888:	00eb      	lsls	r3, r5, #3
 802988a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802988e:	00e2      	lsls	r2, r4, #3
 8029890:	4614      	mov	r4, r2
 8029892:	461d      	mov	r5, r3
 8029894:	4643      	mov	r3, r8
 8029896:	18e3      	adds	r3, r4, r3
 8029898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802989c:	464b      	mov	r3, r9
 802989e:	eb45 0303 	adc.w	r3, r5, r3
 80298a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80298a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80298aa:	685b      	ldr	r3, [r3, #4]
 80298ac:	2200      	movs	r2, #0
 80298ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80298b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80298b6:	f04f 0200 	mov.w	r2, #0
 80298ba:	f04f 0300 	mov.w	r3, #0
 80298be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80298c2:	4629      	mov	r1, r5
 80298c4:	008b      	lsls	r3, r1, #2
 80298c6:	4621      	mov	r1, r4
 80298c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80298cc:	4621      	mov	r1, r4
 80298ce:	008a      	lsls	r2, r1, #2
 80298d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80298d4:	f7f6 fcdc 	bl	8020290 <__aeabi_uldivmod>
 80298d8:	4602      	mov	r2, r0
 80298da:	460b      	mov	r3, r1
 80298dc:	4b60      	ldr	r3, [pc, #384]	; (8029a60 <UART_SetConfig+0x4e4>)
 80298de:	fba3 2302 	umull	r2, r3, r3, r2
 80298e2:	095b      	lsrs	r3, r3, #5
 80298e4:	011c      	lsls	r4, r3, #4
 80298e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80298ea:	2200      	movs	r2, #0
 80298ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80298f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80298f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80298f8:	4642      	mov	r2, r8
 80298fa:	464b      	mov	r3, r9
 80298fc:	1891      	adds	r1, r2, r2
 80298fe:	61b9      	str	r1, [r7, #24]
 8029900:	415b      	adcs	r3, r3
 8029902:	61fb      	str	r3, [r7, #28]
 8029904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8029908:	4641      	mov	r1, r8
 802990a:	1851      	adds	r1, r2, r1
 802990c:	6139      	str	r1, [r7, #16]
 802990e:	4649      	mov	r1, r9
 8029910:	414b      	adcs	r3, r1
 8029912:	617b      	str	r3, [r7, #20]
 8029914:	f04f 0200 	mov.w	r2, #0
 8029918:	f04f 0300 	mov.w	r3, #0
 802991c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8029920:	4659      	mov	r1, fp
 8029922:	00cb      	lsls	r3, r1, #3
 8029924:	4651      	mov	r1, sl
 8029926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802992a:	4651      	mov	r1, sl
 802992c:	00ca      	lsls	r2, r1, #3
 802992e:	4610      	mov	r0, r2
 8029930:	4619      	mov	r1, r3
 8029932:	4603      	mov	r3, r0
 8029934:	4642      	mov	r2, r8
 8029936:	189b      	adds	r3, r3, r2
 8029938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802993c:	464b      	mov	r3, r9
 802993e:	460a      	mov	r2, r1
 8029940:	eb42 0303 	adc.w	r3, r2, r3
 8029944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8029948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802994c:	685b      	ldr	r3, [r3, #4]
 802994e:	2200      	movs	r2, #0
 8029950:	67bb      	str	r3, [r7, #120]	; 0x78
 8029952:	67fa      	str	r2, [r7, #124]	; 0x7c
 8029954:	f04f 0200 	mov.w	r2, #0
 8029958:	f04f 0300 	mov.w	r3, #0
 802995c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8029960:	4649      	mov	r1, r9
 8029962:	008b      	lsls	r3, r1, #2
 8029964:	4641      	mov	r1, r8
 8029966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802996a:	4641      	mov	r1, r8
 802996c:	008a      	lsls	r2, r1, #2
 802996e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8029972:	f7f6 fc8d 	bl	8020290 <__aeabi_uldivmod>
 8029976:	4602      	mov	r2, r0
 8029978:	460b      	mov	r3, r1
 802997a:	4b39      	ldr	r3, [pc, #228]	; (8029a60 <UART_SetConfig+0x4e4>)
 802997c:	fba3 1302 	umull	r1, r3, r3, r2
 8029980:	095b      	lsrs	r3, r3, #5
 8029982:	2164      	movs	r1, #100	; 0x64
 8029984:	fb01 f303 	mul.w	r3, r1, r3
 8029988:	1ad3      	subs	r3, r2, r3
 802998a:	011b      	lsls	r3, r3, #4
 802998c:	3332      	adds	r3, #50	; 0x32
 802998e:	4a34      	ldr	r2, [pc, #208]	; (8029a60 <UART_SetConfig+0x4e4>)
 8029990:	fba2 2303 	umull	r2, r3, r2, r3
 8029994:	095b      	lsrs	r3, r3, #5
 8029996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802999a:	441c      	add	r4, r3
 802999c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80299a0:	2200      	movs	r2, #0
 80299a2:	673b      	str	r3, [r7, #112]	; 0x70
 80299a4:	677a      	str	r2, [r7, #116]	; 0x74
 80299a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80299aa:	4642      	mov	r2, r8
 80299ac:	464b      	mov	r3, r9
 80299ae:	1891      	adds	r1, r2, r2
 80299b0:	60b9      	str	r1, [r7, #8]
 80299b2:	415b      	adcs	r3, r3
 80299b4:	60fb      	str	r3, [r7, #12]
 80299b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80299ba:	4641      	mov	r1, r8
 80299bc:	1851      	adds	r1, r2, r1
 80299be:	6039      	str	r1, [r7, #0]
 80299c0:	4649      	mov	r1, r9
 80299c2:	414b      	adcs	r3, r1
 80299c4:	607b      	str	r3, [r7, #4]
 80299c6:	f04f 0200 	mov.w	r2, #0
 80299ca:	f04f 0300 	mov.w	r3, #0
 80299ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80299d2:	4659      	mov	r1, fp
 80299d4:	00cb      	lsls	r3, r1, #3
 80299d6:	4651      	mov	r1, sl
 80299d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80299dc:	4651      	mov	r1, sl
 80299de:	00ca      	lsls	r2, r1, #3
 80299e0:	4610      	mov	r0, r2
 80299e2:	4619      	mov	r1, r3
 80299e4:	4603      	mov	r3, r0
 80299e6:	4642      	mov	r2, r8
 80299e8:	189b      	adds	r3, r3, r2
 80299ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80299ec:	464b      	mov	r3, r9
 80299ee:	460a      	mov	r2, r1
 80299f0:	eb42 0303 	adc.w	r3, r2, r3
 80299f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80299f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80299fa:	685b      	ldr	r3, [r3, #4]
 80299fc:	2200      	movs	r2, #0
 80299fe:	663b      	str	r3, [r7, #96]	; 0x60
 8029a00:	667a      	str	r2, [r7, #100]	; 0x64
 8029a02:	f04f 0200 	mov.w	r2, #0
 8029a06:	f04f 0300 	mov.w	r3, #0
 8029a0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8029a0e:	4649      	mov	r1, r9
 8029a10:	008b      	lsls	r3, r1, #2
 8029a12:	4641      	mov	r1, r8
 8029a14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029a18:	4641      	mov	r1, r8
 8029a1a:	008a      	lsls	r2, r1, #2
 8029a1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8029a20:	f7f6 fc36 	bl	8020290 <__aeabi_uldivmod>
 8029a24:	4602      	mov	r2, r0
 8029a26:	460b      	mov	r3, r1
 8029a28:	4b0d      	ldr	r3, [pc, #52]	; (8029a60 <UART_SetConfig+0x4e4>)
 8029a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8029a2e:	095b      	lsrs	r3, r3, #5
 8029a30:	2164      	movs	r1, #100	; 0x64
 8029a32:	fb01 f303 	mul.w	r3, r1, r3
 8029a36:	1ad3      	subs	r3, r2, r3
 8029a38:	011b      	lsls	r3, r3, #4
 8029a3a:	3332      	adds	r3, #50	; 0x32
 8029a3c:	4a08      	ldr	r2, [pc, #32]	; (8029a60 <UART_SetConfig+0x4e4>)
 8029a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8029a42:	095b      	lsrs	r3, r3, #5
 8029a44:	f003 020f 	and.w	r2, r3, #15
 8029a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a4c:	681b      	ldr	r3, [r3, #0]
 8029a4e:	4422      	add	r2, r4
 8029a50:	609a      	str	r2, [r3, #8]
}
 8029a52:	bf00      	nop
 8029a54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8029a58:	46bd      	mov	sp, r7
 8029a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8029a5e:	bf00      	nop
 8029a60:	51eb851f 	.word	0x51eb851f

08029a64 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8029a64:	b480      	push	{r7}
 8029a66:	b083      	sub	sp, #12
 8029a68:	af00      	add	r7, sp, #0
 8029a6a:	6078      	str	r0, [r7, #4]
 8029a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8029a6e:	683b      	ldr	r3, [r7, #0]
 8029a70:	681b      	ldr	r3, [r3, #0]
 8029a72:	2b00      	cmp	r3, #0
 8029a74:	d123      	bne.n	8029abe <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8029a76:	687b      	ldr	r3, [r7, #4]
 8029a78:	681b      	ldr	r3, [r3, #0]
 8029a7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8029a7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8029a82:	683a      	ldr	r2, [r7, #0]
 8029a84:	6851      	ldr	r1, [r2, #4]
 8029a86:	683a      	ldr	r2, [r7, #0]
 8029a88:	6892      	ldr	r2, [r2, #8]
 8029a8a:	4311      	orrs	r1, r2
 8029a8c:	683a      	ldr	r2, [r7, #0]
 8029a8e:	68d2      	ldr	r2, [r2, #12]
 8029a90:	4311      	orrs	r1, r2
 8029a92:	683a      	ldr	r2, [r7, #0]
 8029a94:	6912      	ldr	r2, [r2, #16]
 8029a96:	4311      	orrs	r1, r2
 8029a98:	683a      	ldr	r2, [r7, #0]
 8029a9a:	6952      	ldr	r2, [r2, #20]
 8029a9c:	4311      	orrs	r1, r2
 8029a9e:	683a      	ldr	r2, [r7, #0]
 8029aa0:	6992      	ldr	r2, [r2, #24]
 8029aa2:	4311      	orrs	r1, r2
 8029aa4:	683a      	ldr	r2, [r7, #0]
 8029aa6:	69d2      	ldr	r2, [r2, #28]
 8029aa8:	4311      	orrs	r1, r2
 8029aaa:	683a      	ldr	r2, [r7, #0]
 8029aac:	6a12      	ldr	r2, [r2, #32]
 8029aae:	4311      	orrs	r1, r2
 8029ab0:	683a      	ldr	r2, [r7, #0]
 8029ab2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8029ab4:	430a      	orrs	r2, r1
 8029ab6:	431a      	orrs	r2, r3
 8029ab8:	687b      	ldr	r3, [r7, #4]
 8029aba:	601a      	str	r2, [r3, #0]
 8029abc:	e028      	b.n	8029b10 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8029abe:	687b      	ldr	r3, [r7, #4]
 8029ac0:	681b      	ldr	r3, [r3, #0]
 8029ac2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8029ac6:	683b      	ldr	r3, [r7, #0]
 8029ac8:	69d9      	ldr	r1, [r3, #28]
 8029aca:	683b      	ldr	r3, [r7, #0]
 8029acc:	6a1b      	ldr	r3, [r3, #32]
 8029ace:	4319      	orrs	r1, r3
 8029ad0:	683b      	ldr	r3, [r7, #0]
 8029ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029ad4:	430b      	orrs	r3, r1
 8029ad6:	431a      	orrs	r2, r3
 8029ad8:	687b      	ldr	r3, [r7, #4]
 8029ada:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8029adc:	687b      	ldr	r3, [r7, #4]
 8029ade:	685b      	ldr	r3, [r3, #4]
 8029ae0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8029ae4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8029ae8:	683a      	ldr	r2, [r7, #0]
 8029aea:	6851      	ldr	r1, [r2, #4]
 8029aec:	683a      	ldr	r2, [r7, #0]
 8029aee:	6892      	ldr	r2, [r2, #8]
 8029af0:	4311      	orrs	r1, r2
 8029af2:	683a      	ldr	r2, [r7, #0]
 8029af4:	68d2      	ldr	r2, [r2, #12]
 8029af6:	4311      	orrs	r1, r2
 8029af8:	683a      	ldr	r2, [r7, #0]
 8029afa:	6912      	ldr	r2, [r2, #16]
 8029afc:	4311      	orrs	r1, r2
 8029afe:	683a      	ldr	r2, [r7, #0]
 8029b00:	6952      	ldr	r2, [r2, #20]
 8029b02:	4311      	orrs	r1, r2
 8029b04:	683a      	ldr	r2, [r7, #0]
 8029b06:	6992      	ldr	r2, [r2, #24]
 8029b08:	430a      	orrs	r2, r1
 8029b0a:	431a      	orrs	r2, r3
 8029b0c:	687b      	ldr	r3, [r7, #4]
 8029b0e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8029b10:	2300      	movs	r3, #0
}
 8029b12:	4618      	mov	r0, r3
 8029b14:	370c      	adds	r7, #12
 8029b16:	46bd      	mov	sp, r7
 8029b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b1c:	4770      	bx	lr

08029b1e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8029b1e:	b480      	push	{r7}
 8029b20:	b085      	sub	sp, #20
 8029b22:	af00      	add	r7, sp, #0
 8029b24:	60f8      	str	r0, [r7, #12]
 8029b26:	60b9      	str	r1, [r7, #8]
 8029b28:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8029b2a:	687b      	ldr	r3, [r7, #4]
 8029b2c:	2b00      	cmp	r3, #0
 8029b2e:	d128      	bne.n	8029b82 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8029b30:	68fb      	ldr	r3, [r7, #12]
 8029b32:	689b      	ldr	r3, [r3, #8]
 8029b34:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8029b38:	68bb      	ldr	r3, [r7, #8]
 8029b3a:	681b      	ldr	r3, [r3, #0]
 8029b3c:	1e59      	subs	r1, r3, #1
 8029b3e:	68bb      	ldr	r3, [r7, #8]
 8029b40:	685b      	ldr	r3, [r3, #4]
 8029b42:	3b01      	subs	r3, #1
 8029b44:	011b      	lsls	r3, r3, #4
 8029b46:	4319      	orrs	r1, r3
 8029b48:	68bb      	ldr	r3, [r7, #8]
 8029b4a:	689b      	ldr	r3, [r3, #8]
 8029b4c:	3b01      	subs	r3, #1
 8029b4e:	021b      	lsls	r3, r3, #8
 8029b50:	4319      	orrs	r1, r3
 8029b52:	68bb      	ldr	r3, [r7, #8]
 8029b54:	68db      	ldr	r3, [r3, #12]
 8029b56:	3b01      	subs	r3, #1
 8029b58:	031b      	lsls	r3, r3, #12
 8029b5a:	4319      	orrs	r1, r3
 8029b5c:	68bb      	ldr	r3, [r7, #8]
 8029b5e:	691b      	ldr	r3, [r3, #16]
 8029b60:	3b01      	subs	r3, #1
 8029b62:	041b      	lsls	r3, r3, #16
 8029b64:	4319      	orrs	r1, r3
 8029b66:	68bb      	ldr	r3, [r7, #8]
 8029b68:	695b      	ldr	r3, [r3, #20]
 8029b6a:	3b01      	subs	r3, #1
 8029b6c:	051b      	lsls	r3, r3, #20
 8029b6e:	4319      	orrs	r1, r3
 8029b70:	68bb      	ldr	r3, [r7, #8]
 8029b72:	699b      	ldr	r3, [r3, #24]
 8029b74:	3b01      	subs	r3, #1
 8029b76:	061b      	lsls	r3, r3, #24
 8029b78:	430b      	orrs	r3, r1
 8029b7a:	431a      	orrs	r2, r3
 8029b7c:	68fb      	ldr	r3, [r7, #12]
 8029b7e:	609a      	str	r2, [r3, #8]
 8029b80:	e02f      	b.n	8029be2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8029b82:	68fb      	ldr	r3, [r7, #12]
 8029b84:	689b      	ldr	r3, [r3, #8]
 8029b86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8029b8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029b8e:	68ba      	ldr	r2, [r7, #8]
 8029b90:	68d2      	ldr	r2, [r2, #12]
 8029b92:	3a01      	subs	r2, #1
 8029b94:	0311      	lsls	r1, r2, #12
 8029b96:	68ba      	ldr	r2, [r7, #8]
 8029b98:	6952      	ldr	r2, [r2, #20]
 8029b9a:	3a01      	subs	r2, #1
 8029b9c:	0512      	lsls	r2, r2, #20
 8029b9e:	430a      	orrs	r2, r1
 8029ba0:	431a      	orrs	r2, r3
 8029ba2:	68fb      	ldr	r3, [r7, #12]
 8029ba4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8029ba6:	68fb      	ldr	r3, [r7, #12]
 8029ba8:	68db      	ldr	r3, [r3, #12]
 8029baa:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8029bae:	68bb      	ldr	r3, [r7, #8]
 8029bb0:	681b      	ldr	r3, [r3, #0]
 8029bb2:	1e59      	subs	r1, r3, #1
 8029bb4:	68bb      	ldr	r3, [r7, #8]
 8029bb6:	685b      	ldr	r3, [r3, #4]
 8029bb8:	3b01      	subs	r3, #1
 8029bba:	011b      	lsls	r3, r3, #4
 8029bbc:	4319      	orrs	r1, r3
 8029bbe:	68bb      	ldr	r3, [r7, #8]
 8029bc0:	689b      	ldr	r3, [r3, #8]
 8029bc2:	3b01      	subs	r3, #1
 8029bc4:	021b      	lsls	r3, r3, #8
 8029bc6:	4319      	orrs	r1, r3
 8029bc8:	68bb      	ldr	r3, [r7, #8]
 8029bca:	691b      	ldr	r3, [r3, #16]
 8029bcc:	3b01      	subs	r3, #1
 8029bce:	041b      	lsls	r3, r3, #16
 8029bd0:	4319      	orrs	r1, r3
 8029bd2:	68bb      	ldr	r3, [r7, #8]
 8029bd4:	699b      	ldr	r3, [r3, #24]
 8029bd6:	3b01      	subs	r3, #1
 8029bd8:	061b      	lsls	r3, r3, #24
 8029bda:	430b      	orrs	r3, r1
 8029bdc:	431a      	orrs	r2, r3
 8029bde:	68fb      	ldr	r3, [r7, #12]
 8029be0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8029be2:	2300      	movs	r3, #0
}
 8029be4:	4618      	mov	r0, r3
 8029be6:	3714      	adds	r7, #20
 8029be8:	46bd      	mov	sp, r7
 8029bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bee:	4770      	bx	lr

08029bf0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8029bf0:	b580      	push	{r7, lr}
 8029bf2:	b086      	sub	sp, #24
 8029bf4:	af00      	add	r7, sp, #0
 8029bf6:	60f8      	str	r0, [r7, #12]
 8029bf8:	60b9      	str	r1, [r7, #8]
 8029bfa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8029bfc:	2300      	movs	r3, #0
 8029bfe:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8029c00:	68fb      	ldr	r3, [r7, #12]
 8029c02:	691b      	ldr	r3, [r3, #16]
 8029c04:	0d9b      	lsrs	r3, r3, #22
 8029c06:	059b      	lsls	r3, r3, #22
 8029c08:	68ba      	ldr	r2, [r7, #8]
 8029c0a:	6811      	ldr	r1, [r2, #0]
 8029c0c:	68ba      	ldr	r2, [r7, #8]
 8029c0e:	6852      	ldr	r2, [r2, #4]
 8029c10:	4311      	orrs	r1, r2
 8029c12:	68ba      	ldr	r2, [r7, #8]
 8029c14:	6892      	ldr	r2, [r2, #8]
 8029c16:	3a01      	subs	r2, #1
 8029c18:	0152      	lsls	r2, r2, #5
 8029c1a:	4311      	orrs	r1, r2
 8029c1c:	68ba      	ldr	r2, [r7, #8]
 8029c1e:	68d2      	ldr	r2, [r2, #12]
 8029c20:	0252      	lsls	r2, r2, #9
 8029c22:	430a      	orrs	r2, r1
 8029c24:	431a      	orrs	r2, r3
 8029c26:	68fb      	ldr	r3, [r7, #12]
 8029c28:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8029c2a:	f7f9 f949 	bl	8022ec0 <HAL_GetTick>
 8029c2e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8029c30:	e010      	b.n	8029c54 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8029c32:	687b      	ldr	r3, [r7, #4]
 8029c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029c38:	d00c      	beq.n	8029c54 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8029c3a:	687b      	ldr	r3, [r7, #4]
 8029c3c:	2b00      	cmp	r3, #0
 8029c3e:	d007      	beq.n	8029c50 <FMC_SDRAM_SendCommand+0x60>
 8029c40:	f7f9 f93e 	bl	8022ec0 <HAL_GetTick>
 8029c44:	4602      	mov	r2, r0
 8029c46:	697b      	ldr	r3, [r7, #20]
 8029c48:	1ad3      	subs	r3, r2, r3
 8029c4a:	687a      	ldr	r2, [r7, #4]
 8029c4c:	429a      	cmp	r2, r3
 8029c4e:	d201      	bcs.n	8029c54 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8029c50:	2303      	movs	r3, #3
 8029c52:	e006      	b.n	8029c62 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8029c54:	68fb      	ldr	r3, [r7, #12]
 8029c56:	699b      	ldr	r3, [r3, #24]
 8029c58:	f003 0320 	and.w	r3, r3, #32
 8029c5c:	2b20      	cmp	r3, #32
 8029c5e:	d0e8      	beq.n	8029c32 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8029c60:	2300      	movs	r3, #0
}
 8029c62:	4618      	mov	r0, r3
 8029c64:	3718      	adds	r7, #24
 8029c66:	46bd      	mov	sp, r7
 8029c68:	bd80      	pop	{r7, pc}

08029c6a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8029c6a:	b480      	push	{r7}
 8029c6c:	b083      	sub	sp, #12
 8029c6e:	af00      	add	r7, sp, #0
 8029c70:	6078      	str	r0, [r7, #4]
 8029c72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8029c74:	687b      	ldr	r3, [r7, #4]
 8029c76:	695b      	ldr	r3, [r3, #20]
 8029c78:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8029c7c:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8029c80:	683a      	ldr	r2, [r7, #0]
 8029c82:	0052      	lsls	r2, r2, #1
 8029c84:	431a      	orrs	r2, r3
 8029c86:	687b      	ldr	r3, [r7, #4]
 8029c88:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8029c8a:	2300      	movs	r3, #0
}
 8029c8c:	4618      	mov	r0, r3
 8029c8e:	370c      	adds	r7, #12
 8029c90:	46bd      	mov	sp, r7
 8029c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c96:	4770      	bx	lr

08029c98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8029c98:	b084      	sub	sp, #16
 8029c9a:	b580      	push	{r7, lr}
 8029c9c:	b084      	sub	sp, #16
 8029c9e:	af00      	add	r7, sp, #0
 8029ca0:	6078      	str	r0, [r7, #4]
 8029ca2:	f107 001c 	add.w	r0, r7, #28
 8029ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8029caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029cac:	2b01      	cmp	r3, #1
 8029cae:	d122      	bne.n	8029cf6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8029cb0:	687b      	ldr	r3, [r7, #4]
 8029cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029cb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8029cb8:	687b      	ldr	r3, [r7, #4]
 8029cba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8029cbc:	687b      	ldr	r3, [r7, #4]
 8029cbe:	68db      	ldr	r3, [r3, #12]
 8029cc0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8029cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029cc8:	687a      	ldr	r2, [r7, #4]
 8029cca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8029ccc:	687b      	ldr	r3, [r7, #4]
 8029cce:	68db      	ldr	r3, [r3, #12]
 8029cd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8029cd4:	687b      	ldr	r3, [r7, #4]
 8029cd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8029cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029cda:	2b01      	cmp	r3, #1
 8029cdc:	d105      	bne.n	8029cea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8029cde:	687b      	ldr	r3, [r7, #4]
 8029ce0:	68db      	ldr	r3, [r3, #12]
 8029ce2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8029ce6:	687b      	ldr	r3, [r7, #4]
 8029ce8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8029cea:	6878      	ldr	r0, [r7, #4]
 8029cec:	f000 f9c0 	bl	802a070 <USB_CoreReset>
 8029cf0:	4603      	mov	r3, r0
 8029cf2:	73fb      	strb	r3, [r7, #15]
 8029cf4:	e01a      	b.n	8029d2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8029cf6:	687b      	ldr	r3, [r7, #4]
 8029cf8:	68db      	ldr	r3, [r3, #12]
 8029cfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8029cfe:	687b      	ldr	r3, [r7, #4]
 8029d00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8029d02:	6878      	ldr	r0, [r7, #4]
 8029d04:	f000 f9b4 	bl	802a070 <USB_CoreReset>
 8029d08:	4603      	mov	r3, r0
 8029d0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8029d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029d0e:	2b00      	cmp	r3, #0
 8029d10:	d106      	bne.n	8029d20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8029d12:	687b      	ldr	r3, [r7, #4]
 8029d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029d16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8029d1a:	687b      	ldr	r3, [r7, #4]
 8029d1c:	639a      	str	r2, [r3, #56]	; 0x38
 8029d1e:	e005      	b.n	8029d2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8029d20:	687b      	ldr	r3, [r7, #4]
 8029d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029d24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8029d28:	687b      	ldr	r3, [r7, #4]
 8029d2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8029d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029d2e:	2b01      	cmp	r3, #1
 8029d30:	d10b      	bne.n	8029d4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8029d32:	687b      	ldr	r3, [r7, #4]
 8029d34:	689b      	ldr	r3, [r3, #8]
 8029d36:	f043 0206 	orr.w	r2, r3, #6
 8029d3a:	687b      	ldr	r3, [r7, #4]
 8029d3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8029d3e:	687b      	ldr	r3, [r7, #4]
 8029d40:	689b      	ldr	r3, [r3, #8]
 8029d42:	f043 0220 	orr.w	r2, r3, #32
 8029d46:	687b      	ldr	r3, [r7, #4]
 8029d48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8029d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8029d4c:	4618      	mov	r0, r3
 8029d4e:	3710      	adds	r7, #16
 8029d50:	46bd      	mov	sp, r7
 8029d52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8029d56:	b004      	add	sp, #16
 8029d58:	4770      	bx	lr

08029d5a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8029d5a:	b480      	push	{r7}
 8029d5c:	b083      	sub	sp, #12
 8029d5e:	af00      	add	r7, sp, #0
 8029d60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8029d62:	687b      	ldr	r3, [r7, #4]
 8029d64:	689b      	ldr	r3, [r3, #8]
 8029d66:	f043 0201 	orr.w	r2, r3, #1
 8029d6a:	687b      	ldr	r3, [r7, #4]
 8029d6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8029d6e:	2300      	movs	r3, #0
}
 8029d70:	4618      	mov	r0, r3
 8029d72:	370c      	adds	r7, #12
 8029d74:	46bd      	mov	sp, r7
 8029d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d7a:	4770      	bx	lr

08029d7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8029d7c:	b480      	push	{r7}
 8029d7e:	b083      	sub	sp, #12
 8029d80:	af00      	add	r7, sp, #0
 8029d82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8029d84:	687b      	ldr	r3, [r7, #4]
 8029d86:	689b      	ldr	r3, [r3, #8]
 8029d88:	f023 0201 	bic.w	r2, r3, #1
 8029d8c:	687b      	ldr	r3, [r7, #4]
 8029d8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8029d90:	2300      	movs	r3, #0
}
 8029d92:	4618      	mov	r0, r3
 8029d94:	370c      	adds	r7, #12
 8029d96:	46bd      	mov	sp, r7
 8029d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d9c:	4770      	bx	lr

08029d9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8029d9e:	b580      	push	{r7, lr}
 8029da0:	b084      	sub	sp, #16
 8029da2:	af00      	add	r7, sp, #0
 8029da4:	6078      	str	r0, [r7, #4]
 8029da6:	460b      	mov	r3, r1
 8029da8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8029daa:	2300      	movs	r3, #0
 8029dac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8029dae:	687b      	ldr	r3, [r7, #4]
 8029db0:	68db      	ldr	r3, [r3, #12]
 8029db2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8029db6:	687b      	ldr	r3, [r7, #4]
 8029db8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8029dba:	78fb      	ldrb	r3, [r7, #3]
 8029dbc:	2b01      	cmp	r3, #1
 8029dbe:	d115      	bne.n	8029dec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8029dc0:	687b      	ldr	r3, [r7, #4]
 8029dc2:	68db      	ldr	r3, [r3, #12]
 8029dc4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8029dc8:	687b      	ldr	r3, [r7, #4]
 8029dca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8029dcc:	2001      	movs	r0, #1
 8029dce:	f7f9 f883 	bl	8022ed8 <HAL_Delay>
      ms++;
 8029dd2:	68fb      	ldr	r3, [r7, #12]
 8029dd4:	3301      	adds	r3, #1
 8029dd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8029dd8:	6878      	ldr	r0, [r7, #4]
 8029dda:	f000 f93a 	bl	802a052 <USB_GetMode>
 8029dde:	4603      	mov	r3, r0
 8029de0:	2b01      	cmp	r3, #1
 8029de2:	d01e      	beq.n	8029e22 <USB_SetCurrentMode+0x84>
 8029de4:	68fb      	ldr	r3, [r7, #12]
 8029de6:	2b31      	cmp	r3, #49	; 0x31
 8029de8:	d9f0      	bls.n	8029dcc <USB_SetCurrentMode+0x2e>
 8029dea:	e01a      	b.n	8029e22 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8029dec:	78fb      	ldrb	r3, [r7, #3]
 8029dee:	2b00      	cmp	r3, #0
 8029df0:	d115      	bne.n	8029e1e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8029df2:	687b      	ldr	r3, [r7, #4]
 8029df4:	68db      	ldr	r3, [r3, #12]
 8029df6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8029dfa:	687b      	ldr	r3, [r7, #4]
 8029dfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8029dfe:	2001      	movs	r0, #1
 8029e00:	f7f9 f86a 	bl	8022ed8 <HAL_Delay>
      ms++;
 8029e04:	68fb      	ldr	r3, [r7, #12]
 8029e06:	3301      	adds	r3, #1
 8029e08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8029e0a:	6878      	ldr	r0, [r7, #4]
 8029e0c:	f000 f921 	bl	802a052 <USB_GetMode>
 8029e10:	4603      	mov	r3, r0
 8029e12:	2b00      	cmp	r3, #0
 8029e14:	d005      	beq.n	8029e22 <USB_SetCurrentMode+0x84>
 8029e16:	68fb      	ldr	r3, [r7, #12]
 8029e18:	2b31      	cmp	r3, #49	; 0x31
 8029e1a:	d9f0      	bls.n	8029dfe <USB_SetCurrentMode+0x60>
 8029e1c:	e001      	b.n	8029e22 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8029e1e:	2301      	movs	r3, #1
 8029e20:	e005      	b.n	8029e2e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8029e22:	68fb      	ldr	r3, [r7, #12]
 8029e24:	2b32      	cmp	r3, #50	; 0x32
 8029e26:	d101      	bne.n	8029e2c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8029e28:	2301      	movs	r3, #1
 8029e2a:	e000      	b.n	8029e2e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8029e2c:	2300      	movs	r3, #0
}
 8029e2e:	4618      	mov	r0, r3
 8029e30:	3710      	adds	r7, #16
 8029e32:	46bd      	mov	sp, r7
 8029e34:	bd80      	pop	{r7, pc}
	...

08029e38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8029e38:	b480      	push	{r7}
 8029e3a:	b085      	sub	sp, #20
 8029e3c:	af00      	add	r7, sp, #0
 8029e3e:	6078      	str	r0, [r7, #4]
 8029e40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8029e42:	2300      	movs	r3, #0
 8029e44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8029e46:	68fb      	ldr	r3, [r7, #12]
 8029e48:	3301      	adds	r3, #1
 8029e4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8029e4c:	68fb      	ldr	r3, [r7, #12]
 8029e4e:	4a13      	ldr	r2, [pc, #76]	; (8029e9c <USB_FlushTxFifo+0x64>)
 8029e50:	4293      	cmp	r3, r2
 8029e52:	d901      	bls.n	8029e58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8029e54:	2303      	movs	r3, #3
 8029e56:	e01b      	b.n	8029e90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8029e58:	687b      	ldr	r3, [r7, #4]
 8029e5a:	691b      	ldr	r3, [r3, #16]
 8029e5c:	2b00      	cmp	r3, #0
 8029e5e:	daf2      	bge.n	8029e46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8029e60:	2300      	movs	r3, #0
 8029e62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8029e64:	683b      	ldr	r3, [r7, #0]
 8029e66:	019b      	lsls	r3, r3, #6
 8029e68:	f043 0220 	orr.w	r2, r3, #32
 8029e6c:	687b      	ldr	r3, [r7, #4]
 8029e6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8029e70:	68fb      	ldr	r3, [r7, #12]
 8029e72:	3301      	adds	r3, #1
 8029e74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8029e76:	68fb      	ldr	r3, [r7, #12]
 8029e78:	4a08      	ldr	r2, [pc, #32]	; (8029e9c <USB_FlushTxFifo+0x64>)
 8029e7a:	4293      	cmp	r3, r2
 8029e7c:	d901      	bls.n	8029e82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8029e7e:	2303      	movs	r3, #3
 8029e80:	e006      	b.n	8029e90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8029e82:	687b      	ldr	r3, [r7, #4]
 8029e84:	691b      	ldr	r3, [r3, #16]
 8029e86:	f003 0320 	and.w	r3, r3, #32
 8029e8a:	2b20      	cmp	r3, #32
 8029e8c:	d0f0      	beq.n	8029e70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8029e8e:	2300      	movs	r3, #0
}
 8029e90:	4618      	mov	r0, r3
 8029e92:	3714      	adds	r7, #20
 8029e94:	46bd      	mov	sp, r7
 8029e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e9a:	4770      	bx	lr
 8029e9c:	00030d40 	.word	0x00030d40

08029ea0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8029ea0:	b480      	push	{r7}
 8029ea2:	b085      	sub	sp, #20
 8029ea4:	af00      	add	r7, sp, #0
 8029ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8029ea8:	2300      	movs	r3, #0
 8029eaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8029eac:	68fb      	ldr	r3, [r7, #12]
 8029eae:	3301      	adds	r3, #1
 8029eb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8029eb2:	68fb      	ldr	r3, [r7, #12]
 8029eb4:	4a11      	ldr	r2, [pc, #68]	; (8029efc <USB_FlushRxFifo+0x5c>)
 8029eb6:	4293      	cmp	r3, r2
 8029eb8:	d901      	bls.n	8029ebe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8029eba:	2303      	movs	r3, #3
 8029ebc:	e018      	b.n	8029ef0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8029ebe:	687b      	ldr	r3, [r7, #4]
 8029ec0:	691b      	ldr	r3, [r3, #16]
 8029ec2:	2b00      	cmp	r3, #0
 8029ec4:	daf2      	bge.n	8029eac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8029ec6:	2300      	movs	r3, #0
 8029ec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8029eca:	687b      	ldr	r3, [r7, #4]
 8029ecc:	2210      	movs	r2, #16
 8029ece:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8029ed0:	68fb      	ldr	r3, [r7, #12]
 8029ed2:	3301      	adds	r3, #1
 8029ed4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8029ed6:	68fb      	ldr	r3, [r7, #12]
 8029ed8:	4a08      	ldr	r2, [pc, #32]	; (8029efc <USB_FlushRxFifo+0x5c>)
 8029eda:	4293      	cmp	r3, r2
 8029edc:	d901      	bls.n	8029ee2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8029ede:	2303      	movs	r3, #3
 8029ee0:	e006      	b.n	8029ef0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8029ee2:	687b      	ldr	r3, [r7, #4]
 8029ee4:	691b      	ldr	r3, [r3, #16]
 8029ee6:	f003 0310 	and.w	r3, r3, #16
 8029eea:	2b10      	cmp	r3, #16
 8029eec:	d0f0      	beq.n	8029ed0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8029eee:	2300      	movs	r3, #0
}
 8029ef0:	4618      	mov	r0, r3
 8029ef2:	3714      	adds	r7, #20
 8029ef4:	46bd      	mov	sp, r7
 8029ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029efa:	4770      	bx	lr
 8029efc:	00030d40 	.word	0x00030d40

08029f00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8029f00:	b480      	push	{r7}
 8029f02:	b089      	sub	sp, #36	; 0x24
 8029f04:	af00      	add	r7, sp, #0
 8029f06:	60f8      	str	r0, [r7, #12]
 8029f08:	60b9      	str	r1, [r7, #8]
 8029f0a:	4611      	mov	r1, r2
 8029f0c:	461a      	mov	r2, r3
 8029f0e:	460b      	mov	r3, r1
 8029f10:	71fb      	strb	r3, [r7, #7]
 8029f12:	4613      	mov	r3, r2
 8029f14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029f16:	68fb      	ldr	r3, [r7, #12]
 8029f18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8029f1a:	68bb      	ldr	r3, [r7, #8]
 8029f1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8029f1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8029f22:	2b00      	cmp	r3, #0
 8029f24:	d123      	bne.n	8029f6e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8029f26:	88bb      	ldrh	r3, [r7, #4]
 8029f28:	3303      	adds	r3, #3
 8029f2a:	089b      	lsrs	r3, r3, #2
 8029f2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8029f2e:	2300      	movs	r3, #0
 8029f30:	61bb      	str	r3, [r7, #24]
 8029f32:	e018      	b.n	8029f66 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8029f34:	79fb      	ldrb	r3, [r7, #7]
 8029f36:	031a      	lsls	r2, r3, #12
 8029f38:	697b      	ldr	r3, [r7, #20]
 8029f3a:	4413      	add	r3, r2
 8029f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8029f40:	461a      	mov	r2, r3
 8029f42:	69fb      	ldr	r3, [r7, #28]
 8029f44:	681b      	ldr	r3, [r3, #0]
 8029f46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8029f48:	69fb      	ldr	r3, [r7, #28]
 8029f4a:	3301      	adds	r3, #1
 8029f4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8029f4e:	69fb      	ldr	r3, [r7, #28]
 8029f50:	3301      	adds	r3, #1
 8029f52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8029f54:	69fb      	ldr	r3, [r7, #28]
 8029f56:	3301      	adds	r3, #1
 8029f58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8029f5a:	69fb      	ldr	r3, [r7, #28]
 8029f5c:	3301      	adds	r3, #1
 8029f5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8029f60:	69bb      	ldr	r3, [r7, #24]
 8029f62:	3301      	adds	r3, #1
 8029f64:	61bb      	str	r3, [r7, #24]
 8029f66:	69ba      	ldr	r2, [r7, #24]
 8029f68:	693b      	ldr	r3, [r7, #16]
 8029f6a:	429a      	cmp	r2, r3
 8029f6c:	d3e2      	bcc.n	8029f34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8029f6e:	2300      	movs	r3, #0
}
 8029f70:	4618      	mov	r0, r3
 8029f72:	3724      	adds	r7, #36	; 0x24
 8029f74:	46bd      	mov	sp, r7
 8029f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f7a:	4770      	bx	lr

08029f7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8029f7c:	b480      	push	{r7}
 8029f7e:	b08b      	sub	sp, #44	; 0x2c
 8029f80:	af00      	add	r7, sp, #0
 8029f82:	60f8      	str	r0, [r7, #12]
 8029f84:	60b9      	str	r1, [r7, #8]
 8029f86:	4613      	mov	r3, r2
 8029f88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029f8a:	68fb      	ldr	r3, [r7, #12]
 8029f8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8029f8e:	68bb      	ldr	r3, [r7, #8]
 8029f90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8029f92:	88fb      	ldrh	r3, [r7, #6]
 8029f94:	089b      	lsrs	r3, r3, #2
 8029f96:	b29b      	uxth	r3, r3
 8029f98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8029f9a:	88fb      	ldrh	r3, [r7, #6]
 8029f9c:	f003 0303 	and.w	r3, r3, #3
 8029fa0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8029fa2:	2300      	movs	r3, #0
 8029fa4:	623b      	str	r3, [r7, #32]
 8029fa6:	e014      	b.n	8029fd2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8029fa8:	69bb      	ldr	r3, [r7, #24]
 8029faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8029fae:	681a      	ldr	r2, [r3, #0]
 8029fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029fb2:	601a      	str	r2, [r3, #0]
    pDest++;
 8029fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029fb6:	3301      	adds	r3, #1
 8029fb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8029fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029fbc:	3301      	adds	r3, #1
 8029fbe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8029fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029fc2:	3301      	adds	r3, #1
 8029fc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8029fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029fc8:	3301      	adds	r3, #1
 8029fca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8029fcc:	6a3b      	ldr	r3, [r7, #32]
 8029fce:	3301      	adds	r3, #1
 8029fd0:	623b      	str	r3, [r7, #32]
 8029fd2:	6a3a      	ldr	r2, [r7, #32]
 8029fd4:	697b      	ldr	r3, [r7, #20]
 8029fd6:	429a      	cmp	r2, r3
 8029fd8:	d3e6      	bcc.n	8029fa8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8029fda:	8bfb      	ldrh	r3, [r7, #30]
 8029fdc:	2b00      	cmp	r3, #0
 8029fde:	d01e      	beq.n	802a01e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8029fe0:	2300      	movs	r3, #0
 8029fe2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8029fe4:	69bb      	ldr	r3, [r7, #24]
 8029fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8029fea:	461a      	mov	r2, r3
 8029fec:	f107 0310 	add.w	r3, r7, #16
 8029ff0:	6812      	ldr	r2, [r2, #0]
 8029ff2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8029ff4:	693a      	ldr	r2, [r7, #16]
 8029ff6:	6a3b      	ldr	r3, [r7, #32]
 8029ff8:	b2db      	uxtb	r3, r3
 8029ffa:	00db      	lsls	r3, r3, #3
 8029ffc:	fa22 f303 	lsr.w	r3, r2, r3
 802a000:	b2da      	uxtb	r2, r3
 802a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a004:	701a      	strb	r2, [r3, #0]
      i++;
 802a006:	6a3b      	ldr	r3, [r7, #32]
 802a008:	3301      	adds	r3, #1
 802a00a:	623b      	str	r3, [r7, #32]
      pDest++;
 802a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a00e:	3301      	adds	r3, #1
 802a010:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 802a012:	8bfb      	ldrh	r3, [r7, #30]
 802a014:	3b01      	subs	r3, #1
 802a016:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 802a018:	8bfb      	ldrh	r3, [r7, #30]
 802a01a:	2b00      	cmp	r3, #0
 802a01c:	d1ea      	bne.n	8029ff4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802a020:	4618      	mov	r0, r3
 802a022:	372c      	adds	r7, #44	; 0x2c
 802a024:	46bd      	mov	sp, r7
 802a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a02a:	4770      	bx	lr

0802a02c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802a02c:	b480      	push	{r7}
 802a02e:	b085      	sub	sp, #20
 802a030:	af00      	add	r7, sp, #0
 802a032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802a034:	687b      	ldr	r3, [r7, #4]
 802a036:	695b      	ldr	r3, [r3, #20]
 802a038:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802a03a:	687b      	ldr	r3, [r7, #4]
 802a03c:	699b      	ldr	r3, [r3, #24]
 802a03e:	68fa      	ldr	r2, [r7, #12]
 802a040:	4013      	ands	r3, r2
 802a042:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802a044:	68fb      	ldr	r3, [r7, #12]
}
 802a046:	4618      	mov	r0, r3
 802a048:	3714      	adds	r7, #20
 802a04a:	46bd      	mov	sp, r7
 802a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a050:	4770      	bx	lr

0802a052 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802a052:	b480      	push	{r7}
 802a054:	b083      	sub	sp, #12
 802a056:	af00      	add	r7, sp, #0
 802a058:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802a05a:	687b      	ldr	r3, [r7, #4]
 802a05c:	695b      	ldr	r3, [r3, #20]
 802a05e:	f003 0301 	and.w	r3, r3, #1
}
 802a062:	4618      	mov	r0, r3
 802a064:	370c      	adds	r7, #12
 802a066:	46bd      	mov	sp, r7
 802a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a06c:	4770      	bx	lr
	...

0802a070 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802a070:	b480      	push	{r7}
 802a072:	b085      	sub	sp, #20
 802a074:	af00      	add	r7, sp, #0
 802a076:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802a078:	2300      	movs	r3, #0
 802a07a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802a07c:	68fb      	ldr	r3, [r7, #12]
 802a07e:	3301      	adds	r3, #1
 802a080:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a082:	68fb      	ldr	r3, [r7, #12]
 802a084:	4a13      	ldr	r2, [pc, #76]	; (802a0d4 <USB_CoreReset+0x64>)
 802a086:	4293      	cmp	r3, r2
 802a088:	d901      	bls.n	802a08e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802a08a:	2303      	movs	r3, #3
 802a08c:	e01b      	b.n	802a0c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802a08e:	687b      	ldr	r3, [r7, #4]
 802a090:	691b      	ldr	r3, [r3, #16]
 802a092:	2b00      	cmp	r3, #0
 802a094:	daf2      	bge.n	802a07c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802a096:	2300      	movs	r3, #0
 802a098:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802a09a:	687b      	ldr	r3, [r7, #4]
 802a09c:	691b      	ldr	r3, [r3, #16]
 802a09e:	f043 0201 	orr.w	r2, r3, #1
 802a0a2:	687b      	ldr	r3, [r7, #4]
 802a0a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802a0a6:	68fb      	ldr	r3, [r7, #12]
 802a0a8:	3301      	adds	r3, #1
 802a0aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a0ac:	68fb      	ldr	r3, [r7, #12]
 802a0ae:	4a09      	ldr	r2, [pc, #36]	; (802a0d4 <USB_CoreReset+0x64>)
 802a0b0:	4293      	cmp	r3, r2
 802a0b2:	d901      	bls.n	802a0b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802a0b4:	2303      	movs	r3, #3
 802a0b6:	e006      	b.n	802a0c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802a0b8:	687b      	ldr	r3, [r7, #4]
 802a0ba:	691b      	ldr	r3, [r3, #16]
 802a0bc:	f003 0301 	and.w	r3, r3, #1
 802a0c0:	2b01      	cmp	r3, #1
 802a0c2:	d0f0      	beq.n	802a0a6 <USB_CoreReset+0x36>

  return HAL_OK;
 802a0c4:	2300      	movs	r3, #0
}
 802a0c6:	4618      	mov	r0, r3
 802a0c8:	3714      	adds	r7, #20
 802a0ca:	46bd      	mov	sp, r7
 802a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0d0:	4770      	bx	lr
 802a0d2:	bf00      	nop
 802a0d4:	00030d40 	.word	0x00030d40

0802a0d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802a0d8:	b084      	sub	sp, #16
 802a0da:	b580      	push	{r7, lr}
 802a0dc:	b086      	sub	sp, #24
 802a0de:	af00      	add	r7, sp, #0
 802a0e0:	6078      	str	r0, [r7, #4]
 802a0e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802a0e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802a0ea:	2300      	movs	r3, #0
 802a0ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a0ee:	687b      	ldr	r3, [r7, #4]
 802a0f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802a0f2:	68fb      	ldr	r3, [r7, #12]
 802a0f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802a0f8:	461a      	mov	r2, r3
 802a0fa:	2300      	movs	r3, #0
 802a0fc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 802a0fe:	687b      	ldr	r3, [r7, #4]
 802a100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a102:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802a106:	687b      	ldr	r3, [r7, #4]
 802a108:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802a10a:	687b      	ldr	r3, [r7, #4]
 802a10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a10e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802a112:	687b      	ldr	r3, [r7, #4]
 802a114:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 802a116:	687b      	ldr	r3, [r7, #4]
 802a118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a11a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 802a11e:	687b      	ldr	r3, [r7, #4]
 802a120:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802a122:	687b      	ldr	r3, [r7, #4]
 802a124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a12a:	2b00      	cmp	r3, #0
 802a12c:	d018      	beq.n	802a160 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 802a12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a130:	2b01      	cmp	r3, #1
 802a132:	d10a      	bne.n	802a14a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 802a134:	68fb      	ldr	r3, [r7, #12]
 802a136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a13a:	681b      	ldr	r3, [r3, #0]
 802a13c:	68fa      	ldr	r2, [r7, #12]
 802a13e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a142:	f043 0304 	orr.w	r3, r3, #4
 802a146:	6013      	str	r3, [r2, #0]
 802a148:	e014      	b.n	802a174 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802a14a:	68fb      	ldr	r3, [r7, #12]
 802a14c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a150:	681b      	ldr	r3, [r3, #0]
 802a152:	68fa      	ldr	r2, [r7, #12]
 802a154:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a158:	f023 0304 	bic.w	r3, r3, #4
 802a15c:	6013      	str	r3, [r2, #0]
 802a15e:	e009      	b.n	802a174 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802a160:	68fb      	ldr	r3, [r7, #12]
 802a162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a166:	681b      	ldr	r3, [r3, #0]
 802a168:	68fa      	ldr	r2, [r7, #12]
 802a16a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a16e:	f023 0304 	bic.w	r3, r3, #4
 802a172:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802a174:	2110      	movs	r1, #16
 802a176:	6878      	ldr	r0, [r7, #4]
 802a178:	f7ff fe5e 	bl	8029e38 <USB_FlushTxFifo>
 802a17c:	4603      	mov	r3, r0
 802a17e:	2b00      	cmp	r3, #0
 802a180:	d001      	beq.n	802a186 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 802a182:	2301      	movs	r3, #1
 802a184:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802a186:	6878      	ldr	r0, [r7, #4]
 802a188:	f7ff fe8a 	bl	8029ea0 <USB_FlushRxFifo>
 802a18c:	4603      	mov	r3, r0
 802a18e:	2b00      	cmp	r3, #0
 802a190:	d001      	beq.n	802a196 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 802a192:	2301      	movs	r3, #1
 802a194:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 802a196:	2300      	movs	r3, #0
 802a198:	613b      	str	r3, [r7, #16]
 802a19a:	e015      	b.n	802a1c8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 802a19c:	693b      	ldr	r3, [r7, #16]
 802a19e:	015a      	lsls	r2, r3, #5
 802a1a0:	68fb      	ldr	r3, [r7, #12]
 802a1a2:	4413      	add	r3, r2
 802a1a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a1a8:	461a      	mov	r2, r3
 802a1aa:	f04f 33ff 	mov.w	r3, #4294967295
 802a1ae:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 802a1b0:	693b      	ldr	r3, [r7, #16]
 802a1b2:	015a      	lsls	r2, r3, #5
 802a1b4:	68fb      	ldr	r3, [r7, #12]
 802a1b6:	4413      	add	r3, r2
 802a1b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a1bc:	461a      	mov	r2, r3
 802a1be:	2300      	movs	r3, #0
 802a1c0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 802a1c2:	693b      	ldr	r3, [r7, #16]
 802a1c4:	3301      	adds	r3, #1
 802a1c6:	613b      	str	r3, [r7, #16]
 802a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a1ca:	693a      	ldr	r2, [r7, #16]
 802a1cc:	429a      	cmp	r2, r3
 802a1ce:	d3e5      	bcc.n	802a19c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802a1d0:	687b      	ldr	r3, [r7, #4]
 802a1d2:	2200      	movs	r2, #0
 802a1d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 802a1d6:	687b      	ldr	r3, [r7, #4]
 802a1d8:	f04f 32ff 	mov.w	r2, #4294967295
 802a1dc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802a1de:	687b      	ldr	r3, [r7, #4]
 802a1e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a1e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a1e6:	2b00      	cmp	r3, #0
 802a1e8:	d00b      	beq.n	802a202 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 802a1ea:	687b      	ldr	r3, [r7, #4]
 802a1ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 802a1f0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 802a1f2:	687b      	ldr	r3, [r7, #4]
 802a1f4:	4a13      	ldr	r2, [pc, #76]	; (802a244 <USB_HostInit+0x16c>)
 802a1f6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 802a1f8:	687b      	ldr	r3, [r7, #4]
 802a1fa:	4a13      	ldr	r2, [pc, #76]	; (802a248 <USB_HostInit+0x170>)
 802a1fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 802a200:	e009      	b.n	802a216 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 802a202:	687b      	ldr	r3, [r7, #4]
 802a204:	2280      	movs	r2, #128	; 0x80
 802a206:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 802a208:	687b      	ldr	r3, [r7, #4]
 802a20a:	4a10      	ldr	r2, [pc, #64]	; (802a24c <USB_HostInit+0x174>)
 802a20c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 802a20e:	687b      	ldr	r3, [r7, #4]
 802a210:	4a0f      	ldr	r2, [pc, #60]	; (802a250 <USB_HostInit+0x178>)
 802a212:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802a216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a218:	2b00      	cmp	r3, #0
 802a21a:	d105      	bne.n	802a228 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802a21c:	687b      	ldr	r3, [r7, #4]
 802a21e:	699b      	ldr	r3, [r3, #24]
 802a220:	f043 0210 	orr.w	r2, r3, #16
 802a224:	687b      	ldr	r3, [r7, #4]
 802a226:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 802a228:	687b      	ldr	r3, [r7, #4]
 802a22a:	699a      	ldr	r2, [r3, #24]
 802a22c:	4b09      	ldr	r3, [pc, #36]	; (802a254 <USB_HostInit+0x17c>)
 802a22e:	4313      	orrs	r3, r2
 802a230:	687a      	ldr	r2, [r7, #4]
 802a232:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 802a234:	7dfb      	ldrb	r3, [r7, #23]
}
 802a236:	4618      	mov	r0, r3
 802a238:	3718      	adds	r7, #24
 802a23a:	46bd      	mov	sp, r7
 802a23c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802a240:	b004      	add	sp, #16
 802a242:	4770      	bx	lr
 802a244:	01000200 	.word	0x01000200
 802a248:	00e00300 	.word	0x00e00300
 802a24c:	00600080 	.word	0x00600080
 802a250:	004000e0 	.word	0x004000e0
 802a254:	a3200008 	.word	0xa3200008

0802a258 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 802a258:	b480      	push	{r7}
 802a25a:	b085      	sub	sp, #20
 802a25c:	af00      	add	r7, sp, #0
 802a25e:	6078      	str	r0, [r7, #4]
 802a260:	460b      	mov	r3, r1
 802a262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a264:	687b      	ldr	r3, [r7, #4]
 802a266:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 802a268:	68fb      	ldr	r3, [r7, #12]
 802a26a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a26e:	681b      	ldr	r3, [r3, #0]
 802a270:	68fa      	ldr	r2, [r7, #12]
 802a272:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a276:	f023 0303 	bic.w	r3, r3, #3
 802a27a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 802a27c:	68fb      	ldr	r3, [r7, #12]
 802a27e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a282:	681a      	ldr	r2, [r3, #0]
 802a284:	78fb      	ldrb	r3, [r7, #3]
 802a286:	f003 0303 	and.w	r3, r3, #3
 802a28a:	68f9      	ldr	r1, [r7, #12]
 802a28c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802a290:	4313      	orrs	r3, r2
 802a292:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 802a294:	78fb      	ldrb	r3, [r7, #3]
 802a296:	2b01      	cmp	r3, #1
 802a298:	d107      	bne.n	802a2aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 802a29a:	68fb      	ldr	r3, [r7, #12]
 802a29c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a2a0:	461a      	mov	r2, r3
 802a2a2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 802a2a6:	6053      	str	r3, [r2, #4]
 802a2a8:	e009      	b.n	802a2be <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 802a2aa:	78fb      	ldrb	r3, [r7, #3]
 802a2ac:	2b02      	cmp	r3, #2
 802a2ae:	d106      	bne.n	802a2be <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 802a2b0:	68fb      	ldr	r3, [r7, #12]
 802a2b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a2b6:	461a      	mov	r2, r3
 802a2b8:	f241 7370 	movw	r3, #6000	; 0x1770
 802a2bc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 802a2be:	2300      	movs	r3, #0
}
 802a2c0:	4618      	mov	r0, r3
 802a2c2:	3714      	adds	r7, #20
 802a2c4:	46bd      	mov	sp, r7
 802a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2ca:	4770      	bx	lr

0802a2cc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 802a2cc:	b580      	push	{r7, lr}
 802a2ce:	b084      	sub	sp, #16
 802a2d0:	af00      	add	r7, sp, #0
 802a2d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a2d4:	687b      	ldr	r3, [r7, #4]
 802a2d6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 802a2d8:	2300      	movs	r3, #0
 802a2da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802a2dc:	68fb      	ldr	r3, [r7, #12]
 802a2de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802a2e2:	681b      	ldr	r3, [r3, #0]
 802a2e4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802a2e6:	68bb      	ldr	r3, [r7, #8]
 802a2e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802a2ec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 802a2ee:	68bb      	ldr	r3, [r7, #8]
 802a2f0:	68fa      	ldr	r2, [r7, #12]
 802a2f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a2f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a2fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 802a2fc:	2064      	movs	r0, #100	; 0x64
 802a2fe:	f7f8 fdeb 	bl	8022ed8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 802a302:	68bb      	ldr	r3, [r7, #8]
 802a304:	68fa      	ldr	r2, [r7, #12]
 802a306:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a30a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802a30e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 802a310:	200a      	movs	r0, #10
 802a312:	f7f8 fde1 	bl	8022ed8 <HAL_Delay>

  return HAL_OK;
 802a316:	2300      	movs	r3, #0
}
 802a318:	4618      	mov	r0, r3
 802a31a:	3710      	adds	r7, #16
 802a31c:	46bd      	mov	sp, r7
 802a31e:	bd80      	pop	{r7, pc}

0802a320 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 802a320:	b480      	push	{r7}
 802a322:	b085      	sub	sp, #20
 802a324:	af00      	add	r7, sp, #0
 802a326:	6078      	str	r0, [r7, #4]
 802a328:	460b      	mov	r3, r1
 802a32a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a32c:	687b      	ldr	r3, [r7, #4]
 802a32e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802a330:	2300      	movs	r3, #0
 802a332:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802a334:	68fb      	ldr	r3, [r7, #12]
 802a336:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802a33a:	681b      	ldr	r3, [r3, #0]
 802a33c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802a33e:	68bb      	ldr	r3, [r7, #8]
 802a340:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802a344:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 802a346:	68bb      	ldr	r3, [r7, #8]
 802a348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802a34c:	2b00      	cmp	r3, #0
 802a34e:	d109      	bne.n	802a364 <USB_DriveVbus+0x44>
 802a350:	78fb      	ldrb	r3, [r7, #3]
 802a352:	2b01      	cmp	r3, #1
 802a354:	d106      	bne.n	802a364 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 802a356:	68bb      	ldr	r3, [r7, #8]
 802a358:	68fa      	ldr	r2, [r7, #12]
 802a35a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a35e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802a362:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 802a364:	68bb      	ldr	r3, [r7, #8]
 802a366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802a36a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a36e:	d109      	bne.n	802a384 <USB_DriveVbus+0x64>
 802a370:	78fb      	ldrb	r3, [r7, #3]
 802a372:	2b00      	cmp	r3, #0
 802a374:	d106      	bne.n	802a384 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 802a376:	68bb      	ldr	r3, [r7, #8]
 802a378:	68fa      	ldr	r2, [r7, #12]
 802a37a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a37e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a382:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 802a384:	2300      	movs	r3, #0
}
 802a386:	4618      	mov	r0, r3
 802a388:	3714      	adds	r7, #20
 802a38a:	46bd      	mov	sp, r7
 802a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a390:	4770      	bx	lr

0802a392 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802a392:	b480      	push	{r7}
 802a394:	b085      	sub	sp, #20
 802a396:	af00      	add	r7, sp, #0
 802a398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a39a:	687b      	ldr	r3, [r7, #4]
 802a39c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802a39e:	2300      	movs	r3, #0
 802a3a0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802a3a2:	68fb      	ldr	r3, [r7, #12]
 802a3a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802a3a8:	681b      	ldr	r3, [r3, #0]
 802a3aa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 802a3ac:	68bb      	ldr	r3, [r7, #8]
 802a3ae:	0c5b      	lsrs	r3, r3, #17
 802a3b0:	f003 0303 	and.w	r3, r3, #3
}
 802a3b4:	4618      	mov	r0, r3
 802a3b6:	3714      	adds	r7, #20
 802a3b8:	46bd      	mov	sp, r7
 802a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3be:	4770      	bx	lr

0802a3c0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 802a3c0:	b480      	push	{r7}
 802a3c2:	b085      	sub	sp, #20
 802a3c4:	af00      	add	r7, sp, #0
 802a3c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a3c8:	687b      	ldr	r3, [r7, #4]
 802a3ca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 802a3cc:	68fb      	ldr	r3, [r7, #12]
 802a3ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a3d2:	689b      	ldr	r3, [r3, #8]
 802a3d4:	b29b      	uxth	r3, r3
}
 802a3d6:	4618      	mov	r0, r3
 802a3d8:	3714      	adds	r7, #20
 802a3da:	46bd      	mov	sp, r7
 802a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3e0:	4770      	bx	lr
	...

0802a3e4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 802a3e4:	b580      	push	{r7, lr}
 802a3e6:	b088      	sub	sp, #32
 802a3e8:	af00      	add	r7, sp, #0
 802a3ea:	6078      	str	r0, [r7, #4]
 802a3ec:	4608      	mov	r0, r1
 802a3ee:	4611      	mov	r1, r2
 802a3f0:	461a      	mov	r2, r3
 802a3f2:	4603      	mov	r3, r0
 802a3f4:	70fb      	strb	r3, [r7, #3]
 802a3f6:	460b      	mov	r3, r1
 802a3f8:	70bb      	strb	r3, [r7, #2]
 802a3fa:	4613      	mov	r3, r2
 802a3fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 802a3fe:	2300      	movs	r3, #0
 802a400:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a402:	687b      	ldr	r3, [r7, #4]
 802a404:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 802a406:	78fb      	ldrb	r3, [r7, #3]
 802a408:	015a      	lsls	r2, r3, #5
 802a40a:	693b      	ldr	r3, [r7, #16]
 802a40c:	4413      	add	r3, r2
 802a40e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a412:	461a      	mov	r2, r3
 802a414:	f04f 33ff 	mov.w	r3, #4294967295
 802a418:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 802a41a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802a41e:	2b03      	cmp	r3, #3
 802a420:	d87e      	bhi.n	802a520 <USB_HC_Init+0x13c>
 802a422:	a201      	add	r2, pc, #4	; (adr r2, 802a428 <USB_HC_Init+0x44>)
 802a424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a428:	0802a439 	.word	0x0802a439
 802a42c:	0802a4e3 	.word	0x0802a4e3
 802a430:	0802a439 	.word	0x0802a439
 802a434:	0802a4a5 	.word	0x0802a4a5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802a438:	78fb      	ldrb	r3, [r7, #3]
 802a43a:	015a      	lsls	r2, r3, #5
 802a43c:	693b      	ldr	r3, [r7, #16]
 802a43e:	4413      	add	r3, r2
 802a440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a444:	461a      	mov	r2, r3
 802a446:	f240 439d 	movw	r3, #1181	; 0x49d
 802a44a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 802a44c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a450:	2b00      	cmp	r3, #0
 802a452:	da10      	bge.n	802a476 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802a454:	78fb      	ldrb	r3, [r7, #3]
 802a456:	015a      	lsls	r2, r3, #5
 802a458:	693b      	ldr	r3, [r7, #16]
 802a45a:	4413      	add	r3, r2
 802a45c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a460:	68db      	ldr	r3, [r3, #12]
 802a462:	78fa      	ldrb	r2, [r7, #3]
 802a464:	0151      	lsls	r1, r2, #5
 802a466:	693a      	ldr	r2, [r7, #16]
 802a468:	440a      	add	r2, r1
 802a46a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a46e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a472:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 802a474:	e057      	b.n	802a526 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 802a476:	687b      	ldr	r3, [r7, #4]
 802a478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a47a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a47e:	2b00      	cmp	r3, #0
 802a480:	d051      	beq.n	802a526 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 802a482:	78fb      	ldrb	r3, [r7, #3]
 802a484:	015a      	lsls	r2, r3, #5
 802a486:	693b      	ldr	r3, [r7, #16]
 802a488:	4413      	add	r3, r2
 802a48a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a48e:	68db      	ldr	r3, [r3, #12]
 802a490:	78fa      	ldrb	r2, [r7, #3]
 802a492:	0151      	lsls	r1, r2, #5
 802a494:	693a      	ldr	r2, [r7, #16]
 802a496:	440a      	add	r2, r1
 802a498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a49c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802a4a0:	60d3      	str	r3, [r2, #12]
      break;
 802a4a2:	e040      	b.n	802a526 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802a4a4:	78fb      	ldrb	r3, [r7, #3]
 802a4a6:	015a      	lsls	r2, r3, #5
 802a4a8:	693b      	ldr	r3, [r7, #16]
 802a4aa:	4413      	add	r3, r2
 802a4ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a4b0:	461a      	mov	r2, r3
 802a4b2:	f240 639d 	movw	r3, #1693	; 0x69d
 802a4b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802a4b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a4bc:	2b00      	cmp	r3, #0
 802a4be:	da34      	bge.n	802a52a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802a4c0:	78fb      	ldrb	r3, [r7, #3]
 802a4c2:	015a      	lsls	r2, r3, #5
 802a4c4:	693b      	ldr	r3, [r7, #16]
 802a4c6:	4413      	add	r3, r2
 802a4c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a4cc:	68db      	ldr	r3, [r3, #12]
 802a4ce:	78fa      	ldrb	r2, [r7, #3]
 802a4d0:	0151      	lsls	r1, r2, #5
 802a4d2:	693a      	ldr	r2, [r7, #16]
 802a4d4:	440a      	add	r2, r1
 802a4d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a4da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a4de:	60d3      	str	r3, [r2, #12]
      }

      break;
 802a4e0:	e023      	b.n	802a52a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802a4e2:	78fb      	ldrb	r3, [r7, #3]
 802a4e4:	015a      	lsls	r2, r3, #5
 802a4e6:	693b      	ldr	r3, [r7, #16]
 802a4e8:	4413      	add	r3, r2
 802a4ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a4ee:	461a      	mov	r2, r3
 802a4f0:	f240 2325 	movw	r3, #549	; 0x225
 802a4f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802a4f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a4fa:	2b00      	cmp	r3, #0
 802a4fc:	da17      	bge.n	802a52e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 802a4fe:	78fb      	ldrb	r3, [r7, #3]
 802a500:	015a      	lsls	r2, r3, #5
 802a502:	693b      	ldr	r3, [r7, #16]
 802a504:	4413      	add	r3, r2
 802a506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a50a:	68db      	ldr	r3, [r3, #12]
 802a50c:	78fa      	ldrb	r2, [r7, #3]
 802a50e:	0151      	lsls	r1, r2, #5
 802a510:	693a      	ldr	r2, [r7, #16]
 802a512:	440a      	add	r2, r1
 802a514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a518:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 802a51c:	60d3      	str	r3, [r2, #12]
      }
      break;
 802a51e:	e006      	b.n	802a52e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 802a520:	2301      	movs	r3, #1
 802a522:	77fb      	strb	r3, [r7, #31]
      break;
 802a524:	e004      	b.n	802a530 <USB_HC_Init+0x14c>
      break;
 802a526:	bf00      	nop
 802a528:	e002      	b.n	802a530 <USB_HC_Init+0x14c>
      break;
 802a52a:	bf00      	nop
 802a52c:	e000      	b.n	802a530 <USB_HC_Init+0x14c>
      break;
 802a52e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 802a530:	78fb      	ldrb	r3, [r7, #3]
 802a532:	015a      	lsls	r2, r3, #5
 802a534:	693b      	ldr	r3, [r7, #16]
 802a536:	4413      	add	r3, r2
 802a538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a53c:	68db      	ldr	r3, [r3, #12]
 802a53e:	78fa      	ldrb	r2, [r7, #3]
 802a540:	0151      	lsls	r1, r2, #5
 802a542:	693a      	ldr	r2, [r7, #16]
 802a544:	440a      	add	r2, r1
 802a546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a54a:	f043 0302 	orr.w	r3, r3, #2
 802a54e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 802a550:	693b      	ldr	r3, [r7, #16]
 802a552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a556:	699a      	ldr	r2, [r3, #24]
 802a558:	78fb      	ldrb	r3, [r7, #3]
 802a55a:	f003 030f 	and.w	r3, r3, #15
 802a55e:	2101      	movs	r1, #1
 802a560:	fa01 f303 	lsl.w	r3, r1, r3
 802a564:	6939      	ldr	r1, [r7, #16]
 802a566:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802a56a:	4313      	orrs	r3, r2
 802a56c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 802a56e:	687b      	ldr	r3, [r7, #4]
 802a570:	699b      	ldr	r3, [r3, #24]
 802a572:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 802a576:	687b      	ldr	r3, [r7, #4]
 802a578:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 802a57a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a57e:	2b00      	cmp	r3, #0
 802a580:	da03      	bge.n	802a58a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 802a582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a586:	61bb      	str	r3, [r7, #24]
 802a588:	e001      	b.n	802a58e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 802a58a:	2300      	movs	r3, #0
 802a58c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 802a58e:	6878      	ldr	r0, [r7, #4]
 802a590:	f7ff feff 	bl	802a392 <USB_GetHostSpeed>
 802a594:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 802a596:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802a59a:	2b02      	cmp	r3, #2
 802a59c:	d106      	bne.n	802a5ac <USB_HC_Init+0x1c8>
 802a59e:	68fb      	ldr	r3, [r7, #12]
 802a5a0:	2b02      	cmp	r3, #2
 802a5a2:	d003      	beq.n	802a5ac <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 802a5a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802a5a8:	617b      	str	r3, [r7, #20]
 802a5aa:	e001      	b.n	802a5b0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 802a5ac:	2300      	movs	r3, #0
 802a5ae:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802a5b0:	787b      	ldrb	r3, [r7, #1]
 802a5b2:	059b      	lsls	r3, r3, #22
 802a5b4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802a5b8:	78bb      	ldrb	r3, [r7, #2]
 802a5ba:	02db      	lsls	r3, r3, #11
 802a5bc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802a5c0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802a5c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802a5c6:	049b      	lsls	r3, r3, #18
 802a5c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802a5cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802a5ce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802a5d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802a5d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802a5d6:	69bb      	ldr	r3, [r7, #24]
 802a5d8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802a5da:	78fb      	ldrb	r3, [r7, #3]
 802a5dc:	0159      	lsls	r1, r3, #5
 802a5de:	693b      	ldr	r3, [r7, #16]
 802a5e0:	440b      	add	r3, r1
 802a5e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a5e6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802a5e8:	697b      	ldr	r3, [r7, #20]
 802a5ea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802a5ec:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 802a5ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802a5f2:	2b03      	cmp	r3, #3
 802a5f4:	d003      	beq.n	802a5fe <USB_HC_Init+0x21a>
 802a5f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802a5fa:	2b01      	cmp	r3, #1
 802a5fc:	d10f      	bne.n	802a61e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 802a5fe:	78fb      	ldrb	r3, [r7, #3]
 802a600:	015a      	lsls	r2, r3, #5
 802a602:	693b      	ldr	r3, [r7, #16]
 802a604:	4413      	add	r3, r2
 802a606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a60a:	681b      	ldr	r3, [r3, #0]
 802a60c:	78fa      	ldrb	r2, [r7, #3]
 802a60e:	0151      	lsls	r1, r2, #5
 802a610:	693a      	ldr	r2, [r7, #16]
 802a612:	440a      	add	r2, r1
 802a614:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a618:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802a61c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 802a61e:	7ffb      	ldrb	r3, [r7, #31]
}
 802a620:	4618      	mov	r0, r3
 802a622:	3720      	adds	r7, #32
 802a624:	46bd      	mov	sp, r7
 802a626:	bd80      	pop	{r7, pc}

0802a628 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 802a628:	b580      	push	{r7, lr}
 802a62a:	b08c      	sub	sp, #48	; 0x30
 802a62c:	af02      	add	r7, sp, #8
 802a62e:	60f8      	str	r0, [r7, #12]
 802a630:	60b9      	str	r1, [r7, #8]
 802a632:	4613      	mov	r3, r2
 802a634:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a636:	68fb      	ldr	r3, [r7, #12]
 802a638:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 802a63a:	68bb      	ldr	r3, [r7, #8]
 802a63c:	785b      	ldrb	r3, [r3, #1]
 802a63e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 802a640:	f44f 7380 	mov.w	r3, #256	; 0x100
 802a644:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 802a646:	68fb      	ldr	r3, [r7, #12]
 802a648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a64a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a64e:	2b00      	cmp	r3, #0
 802a650:	d02d      	beq.n	802a6ae <USB_HC_StartXfer+0x86>
 802a652:	68bb      	ldr	r3, [r7, #8]
 802a654:	791b      	ldrb	r3, [r3, #4]
 802a656:	2b00      	cmp	r3, #0
 802a658:	d129      	bne.n	802a6ae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 802a65a:	79fb      	ldrb	r3, [r7, #7]
 802a65c:	2b01      	cmp	r3, #1
 802a65e:	d117      	bne.n	802a690 <USB_HC_StartXfer+0x68>
 802a660:	68bb      	ldr	r3, [r7, #8]
 802a662:	79db      	ldrb	r3, [r3, #7]
 802a664:	2b00      	cmp	r3, #0
 802a666:	d003      	beq.n	802a670 <USB_HC_StartXfer+0x48>
 802a668:	68bb      	ldr	r3, [r7, #8]
 802a66a:	79db      	ldrb	r3, [r3, #7]
 802a66c:	2b02      	cmp	r3, #2
 802a66e:	d10f      	bne.n	802a690 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 802a670:	69fb      	ldr	r3, [r7, #28]
 802a672:	015a      	lsls	r2, r3, #5
 802a674:	6a3b      	ldr	r3, [r7, #32]
 802a676:	4413      	add	r3, r2
 802a678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a67c:	68db      	ldr	r3, [r3, #12]
 802a67e:	69fa      	ldr	r2, [r7, #28]
 802a680:	0151      	lsls	r1, r2, #5
 802a682:	6a3a      	ldr	r2, [r7, #32]
 802a684:	440a      	add	r2, r1
 802a686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a68a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a68e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 802a690:	79fb      	ldrb	r3, [r7, #7]
 802a692:	2b00      	cmp	r3, #0
 802a694:	d10b      	bne.n	802a6ae <USB_HC_StartXfer+0x86>
 802a696:	68bb      	ldr	r3, [r7, #8]
 802a698:	795b      	ldrb	r3, [r3, #5]
 802a69a:	2b01      	cmp	r3, #1
 802a69c:	d107      	bne.n	802a6ae <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 802a69e:	68bb      	ldr	r3, [r7, #8]
 802a6a0:	785b      	ldrb	r3, [r3, #1]
 802a6a2:	4619      	mov	r1, r3
 802a6a4:	68f8      	ldr	r0, [r7, #12]
 802a6a6:	f000 fa0f 	bl	802aac8 <USB_DoPing>
      return HAL_OK;
 802a6aa:	2300      	movs	r3, #0
 802a6ac:	e0f8      	b.n	802a8a0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 802a6ae:	68bb      	ldr	r3, [r7, #8]
 802a6b0:	695b      	ldr	r3, [r3, #20]
 802a6b2:	2b00      	cmp	r3, #0
 802a6b4:	d018      	beq.n	802a6e8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 802a6b6:	68bb      	ldr	r3, [r7, #8]
 802a6b8:	695b      	ldr	r3, [r3, #20]
 802a6ba:	68ba      	ldr	r2, [r7, #8]
 802a6bc:	8912      	ldrh	r2, [r2, #8]
 802a6be:	4413      	add	r3, r2
 802a6c0:	3b01      	subs	r3, #1
 802a6c2:	68ba      	ldr	r2, [r7, #8]
 802a6c4:	8912      	ldrh	r2, [r2, #8]
 802a6c6:	fbb3 f3f2 	udiv	r3, r3, r2
 802a6ca:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 802a6cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802a6ce:	8b7b      	ldrh	r3, [r7, #26]
 802a6d0:	429a      	cmp	r2, r3
 802a6d2:	d90b      	bls.n	802a6ec <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 802a6d4:	8b7b      	ldrh	r3, [r7, #26]
 802a6d6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802a6d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802a6da:	68ba      	ldr	r2, [r7, #8]
 802a6dc:	8912      	ldrh	r2, [r2, #8]
 802a6de:	fb03 f202 	mul.w	r2, r3, r2
 802a6e2:	68bb      	ldr	r3, [r7, #8]
 802a6e4:	611a      	str	r2, [r3, #16]
 802a6e6:	e001      	b.n	802a6ec <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 802a6e8:	2301      	movs	r3, #1
 802a6ea:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 802a6ec:	68bb      	ldr	r3, [r7, #8]
 802a6ee:	78db      	ldrb	r3, [r3, #3]
 802a6f0:	2b00      	cmp	r3, #0
 802a6f2:	d007      	beq.n	802a704 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802a6f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802a6f6:	68ba      	ldr	r2, [r7, #8]
 802a6f8:	8912      	ldrh	r2, [r2, #8]
 802a6fa:	fb03 f202 	mul.w	r2, r3, r2
 802a6fe:	68bb      	ldr	r3, [r7, #8]
 802a700:	611a      	str	r2, [r3, #16]
 802a702:	e003      	b.n	802a70c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 802a704:	68bb      	ldr	r3, [r7, #8]
 802a706:	695a      	ldr	r2, [r3, #20]
 802a708:	68bb      	ldr	r3, [r7, #8]
 802a70a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802a70c:	68bb      	ldr	r3, [r7, #8]
 802a70e:	691b      	ldr	r3, [r3, #16]
 802a710:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802a714:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802a716:	04d9      	lsls	r1, r3, #19
 802a718:	4b63      	ldr	r3, [pc, #396]	; (802a8a8 <USB_HC_StartXfer+0x280>)
 802a71a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802a71c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 802a71e:	68bb      	ldr	r3, [r7, #8]
 802a720:	7a9b      	ldrb	r3, [r3, #10]
 802a722:	075b      	lsls	r3, r3, #29
 802a724:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802a728:	69f9      	ldr	r1, [r7, #28]
 802a72a:	0148      	lsls	r0, r1, #5
 802a72c:	6a39      	ldr	r1, [r7, #32]
 802a72e:	4401      	add	r1, r0
 802a730:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802a734:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802a736:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 802a738:	79fb      	ldrb	r3, [r7, #7]
 802a73a:	2b00      	cmp	r3, #0
 802a73c:	d009      	beq.n	802a752 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 802a73e:	68bb      	ldr	r3, [r7, #8]
 802a740:	68d9      	ldr	r1, [r3, #12]
 802a742:	69fb      	ldr	r3, [r7, #28]
 802a744:	015a      	lsls	r2, r3, #5
 802a746:	6a3b      	ldr	r3, [r7, #32]
 802a748:	4413      	add	r3, r2
 802a74a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a74e:	460a      	mov	r2, r1
 802a750:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 802a752:	6a3b      	ldr	r3, [r7, #32]
 802a754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a758:	689b      	ldr	r3, [r3, #8]
 802a75a:	f003 0301 	and.w	r3, r3, #1
 802a75e:	2b00      	cmp	r3, #0
 802a760:	bf0c      	ite	eq
 802a762:	2301      	moveq	r3, #1
 802a764:	2300      	movne	r3, #0
 802a766:	b2db      	uxtb	r3, r3
 802a768:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 802a76a:	69fb      	ldr	r3, [r7, #28]
 802a76c:	015a      	lsls	r2, r3, #5
 802a76e:	6a3b      	ldr	r3, [r7, #32]
 802a770:	4413      	add	r3, r2
 802a772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a776:	681b      	ldr	r3, [r3, #0]
 802a778:	69fa      	ldr	r2, [r7, #28]
 802a77a:	0151      	lsls	r1, r2, #5
 802a77c:	6a3a      	ldr	r2, [r7, #32]
 802a77e:	440a      	add	r2, r1
 802a780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a784:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802a788:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 802a78a:	69fb      	ldr	r3, [r7, #28]
 802a78c:	015a      	lsls	r2, r3, #5
 802a78e:	6a3b      	ldr	r3, [r7, #32]
 802a790:	4413      	add	r3, r2
 802a792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a796:	681a      	ldr	r2, [r3, #0]
 802a798:	7e7b      	ldrb	r3, [r7, #25]
 802a79a:	075b      	lsls	r3, r3, #29
 802a79c:	69f9      	ldr	r1, [r7, #28]
 802a79e:	0148      	lsls	r0, r1, #5
 802a7a0:	6a39      	ldr	r1, [r7, #32]
 802a7a2:	4401      	add	r1, r0
 802a7a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 802a7a8:	4313      	orrs	r3, r2
 802a7aa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 802a7ac:	69fb      	ldr	r3, [r7, #28]
 802a7ae:	015a      	lsls	r2, r3, #5
 802a7b0:	6a3b      	ldr	r3, [r7, #32]
 802a7b2:	4413      	add	r3, r2
 802a7b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a7b8:	681b      	ldr	r3, [r3, #0]
 802a7ba:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802a7bc:	693b      	ldr	r3, [r7, #16]
 802a7be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802a7c2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 802a7c4:	68bb      	ldr	r3, [r7, #8]
 802a7c6:	78db      	ldrb	r3, [r3, #3]
 802a7c8:	2b00      	cmp	r3, #0
 802a7ca:	d004      	beq.n	802a7d6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 802a7cc:	693b      	ldr	r3, [r7, #16]
 802a7ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802a7d2:	613b      	str	r3, [r7, #16]
 802a7d4:	e003      	b.n	802a7de <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 802a7d6:	693b      	ldr	r3, [r7, #16]
 802a7d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802a7dc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802a7de:	693b      	ldr	r3, [r7, #16]
 802a7e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802a7e4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 802a7e6:	69fb      	ldr	r3, [r7, #28]
 802a7e8:	015a      	lsls	r2, r3, #5
 802a7ea:	6a3b      	ldr	r3, [r7, #32]
 802a7ec:	4413      	add	r3, r2
 802a7ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a7f2:	461a      	mov	r2, r3
 802a7f4:	693b      	ldr	r3, [r7, #16]
 802a7f6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 802a7f8:	79fb      	ldrb	r3, [r7, #7]
 802a7fa:	2b00      	cmp	r3, #0
 802a7fc:	d001      	beq.n	802a802 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 802a7fe:	2300      	movs	r3, #0
 802a800:	e04e      	b.n	802a8a0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 802a802:	68bb      	ldr	r3, [r7, #8]
 802a804:	78db      	ldrb	r3, [r3, #3]
 802a806:	2b00      	cmp	r3, #0
 802a808:	d149      	bne.n	802a89e <USB_HC_StartXfer+0x276>
 802a80a:	68bb      	ldr	r3, [r7, #8]
 802a80c:	695b      	ldr	r3, [r3, #20]
 802a80e:	2b00      	cmp	r3, #0
 802a810:	d045      	beq.n	802a89e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 802a812:	68bb      	ldr	r3, [r7, #8]
 802a814:	79db      	ldrb	r3, [r3, #7]
 802a816:	2b03      	cmp	r3, #3
 802a818:	d830      	bhi.n	802a87c <USB_HC_StartXfer+0x254>
 802a81a:	a201      	add	r2, pc, #4	; (adr r2, 802a820 <USB_HC_StartXfer+0x1f8>)
 802a81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a820:	0802a831 	.word	0x0802a831
 802a824:	0802a855 	.word	0x0802a855
 802a828:	0802a831 	.word	0x0802a831
 802a82c:	0802a855 	.word	0x0802a855
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802a830:	68bb      	ldr	r3, [r7, #8]
 802a832:	695b      	ldr	r3, [r3, #20]
 802a834:	3303      	adds	r3, #3
 802a836:	089b      	lsrs	r3, r3, #2
 802a838:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 802a83a:	8afa      	ldrh	r2, [r7, #22]
 802a83c:	68fb      	ldr	r3, [r7, #12]
 802a83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a840:	b29b      	uxth	r3, r3
 802a842:	429a      	cmp	r2, r3
 802a844:	d91c      	bls.n	802a880 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 802a846:	68fb      	ldr	r3, [r7, #12]
 802a848:	699b      	ldr	r3, [r3, #24]
 802a84a:	f043 0220 	orr.w	r2, r3, #32
 802a84e:	68fb      	ldr	r3, [r7, #12]
 802a850:	619a      	str	r2, [r3, #24]
        }
        break;
 802a852:	e015      	b.n	802a880 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802a854:	68bb      	ldr	r3, [r7, #8]
 802a856:	695b      	ldr	r3, [r3, #20]
 802a858:	3303      	adds	r3, #3
 802a85a:	089b      	lsrs	r3, r3, #2
 802a85c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 802a85e:	8afa      	ldrh	r2, [r7, #22]
 802a860:	6a3b      	ldr	r3, [r7, #32]
 802a862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a866:	691b      	ldr	r3, [r3, #16]
 802a868:	b29b      	uxth	r3, r3
 802a86a:	429a      	cmp	r2, r3
 802a86c:	d90a      	bls.n	802a884 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 802a86e:	68fb      	ldr	r3, [r7, #12]
 802a870:	699b      	ldr	r3, [r3, #24]
 802a872:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 802a876:	68fb      	ldr	r3, [r7, #12]
 802a878:	619a      	str	r2, [r3, #24]
        }
        break;
 802a87a:	e003      	b.n	802a884 <USB_HC_StartXfer+0x25c>

      default:
        break;
 802a87c:	bf00      	nop
 802a87e:	e002      	b.n	802a886 <USB_HC_StartXfer+0x25e>
        break;
 802a880:	bf00      	nop
 802a882:	e000      	b.n	802a886 <USB_HC_StartXfer+0x25e>
        break;
 802a884:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 802a886:	68bb      	ldr	r3, [r7, #8]
 802a888:	68d9      	ldr	r1, [r3, #12]
 802a88a:	68bb      	ldr	r3, [r7, #8]
 802a88c:	785a      	ldrb	r2, [r3, #1]
 802a88e:	68bb      	ldr	r3, [r7, #8]
 802a890:	695b      	ldr	r3, [r3, #20]
 802a892:	b29b      	uxth	r3, r3
 802a894:	2000      	movs	r0, #0
 802a896:	9000      	str	r0, [sp, #0]
 802a898:	68f8      	ldr	r0, [r7, #12]
 802a89a:	f7ff fb31 	bl	8029f00 <USB_WritePacket>
  }

  return HAL_OK;
 802a89e:	2300      	movs	r3, #0
}
 802a8a0:	4618      	mov	r0, r3
 802a8a2:	3728      	adds	r7, #40	; 0x28
 802a8a4:	46bd      	mov	sp, r7
 802a8a6:	bd80      	pop	{r7, pc}
 802a8a8:	1ff80000 	.word	0x1ff80000

0802a8ac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802a8ac:	b480      	push	{r7}
 802a8ae:	b085      	sub	sp, #20
 802a8b0:	af00      	add	r7, sp, #0
 802a8b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a8b4:	687b      	ldr	r3, [r7, #4]
 802a8b6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 802a8b8:	68fb      	ldr	r3, [r7, #12]
 802a8ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a8be:	695b      	ldr	r3, [r3, #20]
 802a8c0:	b29b      	uxth	r3, r3
}
 802a8c2:	4618      	mov	r0, r3
 802a8c4:	3714      	adds	r7, #20
 802a8c6:	46bd      	mov	sp, r7
 802a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8cc:	4770      	bx	lr

0802a8ce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 802a8ce:	b480      	push	{r7}
 802a8d0:	b089      	sub	sp, #36	; 0x24
 802a8d2:	af00      	add	r7, sp, #0
 802a8d4:	6078      	str	r0, [r7, #4]
 802a8d6:	460b      	mov	r3, r1
 802a8d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a8da:	687b      	ldr	r3, [r7, #4]
 802a8dc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 802a8de:	78fb      	ldrb	r3, [r7, #3]
 802a8e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 802a8e2:	2300      	movs	r3, #0
 802a8e4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 802a8e6:	69bb      	ldr	r3, [r7, #24]
 802a8e8:	015a      	lsls	r2, r3, #5
 802a8ea:	69fb      	ldr	r3, [r7, #28]
 802a8ec:	4413      	add	r3, r2
 802a8ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a8f2:	681b      	ldr	r3, [r3, #0]
 802a8f4:	0c9b      	lsrs	r3, r3, #18
 802a8f6:	f003 0303 	and.w	r3, r3, #3
 802a8fa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 802a8fc:	69bb      	ldr	r3, [r7, #24]
 802a8fe:	015a      	lsls	r2, r3, #5
 802a900:	69fb      	ldr	r3, [r7, #28]
 802a902:	4413      	add	r3, r2
 802a904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a908:	681b      	ldr	r3, [r3, #0]
 802a90a:	0fdb      	lsrs	r3, r3, #31
 802a90c:	f003 0301 	and.w	r3, r3, #1
 802a910:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 802a912:	687b      	ldr	r3, [r7, #4]
 802a914:	689b      	ldr	r3, [r3, #8]
 802a916:	f003 0320 	and.w	r3, r3, #32
 802a91a:	2b20      	cmp	r3, #32
 802a91c:	d104      	bne.n	802a928 <USB_HC_Halt+0x5a>
 802a91e:	693b      	ldr	r3, [r7, #16]
 802a920:	2b00      	cmp	r3, #0
 802a922:	d101      	bne.n	802a928 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 802a924:	2300      	movs	r3, #0
 802a926:	e0c8      	b.n	802aaba <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 802a928:	697b      	ldr	r3, [r7, #20]
 802a92a:	2b00      	cmp	r3, #0
 802a92c:	d002      	beq.n	802a934 <USB_HC_Halt+0x66>
 802a92e:	697b      	ldr	r3, [r7, #20]
 802a930:	2b02      	cmp	r3, #2
 802a932:	d163      	bne.n	802a9fc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802a934:	69bb      	ldr	r3, [r7, #24]
 802a936:	015a      	lsls	r2, r3, #5
 802a938:	69fb      	ldr	r3, [r7, #28]
 802a93a:	4413      	add	r3, r2
 802a93c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a940:	681b      	ldr	r3, [r3, #0]
 802a942:	69ba      	ldr	r2, [r7, #24]
 802a944:	0151      	lsls	r1, r2, #5
 802a946:	69fa      	ldr	r2, [r7, #28]
 802a948:	440a      	add	r2, r1
 802a94a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a94e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802a952:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802a954:	687b      	ldr	r3, [r7, #4]
 802a956:	689b      	ldr	r3, [r3, #8]
 802a958:	f003 0320 	and.w	r3, r3, #32
 802a95c:	2b00      	cmp	r3, #0
 802a95e:	f040 80ab 	bne.w	802aab8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 802a962:	687b      	ldr	r3, [r7, #4]
 802a964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a966:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802a96a:	2b00      	cmp	r3, #0
 802a96c:	d133      	bne.n	802a9d6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802a96e:	69bb      	ldr	r3, [r7, #24]
 802a970:	015a      	lsls	r2, r3, #5
 802a972:	69fb      	ldr	r3, [r7, #28]
 802a974:	4413      	add	r3, r2
 802a976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a97a:	681b      	ldr	r3, [r3, #0]
 802a97c:	69ba      	ldr	r2, [r7, #24]
 802a97e:	0151      	lsls	r1, r2, #5
 802a980:	69fa      	ldr	r2, [r7, #28]
 802a982:	440a      	add	r2, r1
 802a984:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802a98c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802a98e:	69bb      	ldr	r3, [r7, #24]
 802a990:	015a      	lsls	r2, r3, #5
 802a992:	69fb      	ldr	r3, [r7, #28]
 802a994:	4413      	add	r3, r2
 802a996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a99a:	681b      	ldr	r3, [r3, #0]
 802a99c:	69ba      	ldr	r2, [r7, #24]
 802a99e:	0151      	lsls	r1, r2, #5
 802a9a0:	69fa      	ldr	r2, [r7, #28]
 802a9a2:	440a      	add	r2, r1
 802a9a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a9a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802a9ac:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 802a9ae:	68fb      	ldr	r3, [r7, #12]
 802a9b0:	3301      	adds	r3, #1
 802a9b2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 802a9b4:	68fb      	ldr	r3, [r7, #12]
 802a9b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802a9ba:	d81d      	bhi.n	802a9f8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802a9bc:	69bb      	ldr	r3, [r7, #24]
 802a9be:	015a      	lsls	r2, r3, #5
 802a9c0:	69fb      	ldr	r3, [r7, #28]
 802a9c2:	4413      	add	r3, r2
 802a9c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a9c8:	681b      	ldr	r3, [r3, #0]
 802a9ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802a9ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802a9d2:	d0ec      	beq.n	802a9ae <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802a9d4:	e070      	b.n	802aab8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802a9d6:	69bb      	ldr	r3, [r7, #24]
 802a9d8:	015a      	lsls	r2, r3, #5
 802a9da:	69fb      	ldr	r3, [r7, #28]
 802a9dc:	4413      	add	r3, r2
 802a9de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a9e2:	681b      	ldr	r3, [r3, #0]
 802a9e4:	69ba      	ldr	r2, [r7, #24]
 802a9e6:	0151      	lsls	r1, r2, #5
 802a9e8:	69fa      	ldr	r2, [r7, #28]
 802a9ea:	440a      	add	r2, r1
 802a9ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a9f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802a9f4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802a9f6:	e05f      	b.n	802aab8 <USB_HC_Halt+0x1ea>
            break;
 802a9f8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802a9fa:	e05d      	b.n	802aab8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802a9fc:	69bb      	ldr	r3, [r7, #24]
 802a9fe:	015a      	lsls	r2, r3, #5
 802aa00:	69fb      	ldr	r3, [r7, #28]
 802aa02:	4413      	add	r3, r2
 802aa04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aa08:	681b      	ldr	r3, [r3, #0]
 802aa0a:	69ba      	ldr	r2, [r7, #24]
 802aa0c:	0151      	lsls	r1, r2, #5
 802aa0e:	69fa      	ldr	r2, [r7, #28]
 802aa10:	440a      	add	r2, r1
 802aa12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802aa16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802aa1a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 802aa1c:	69fb      	ldr	r3, [r7, #28]
 802aa1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802aa22:	691b      	ldr	r3, [r3, #16]
 802aa24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802aa28:	2b00      	cmp	r3, #0
 802aa2a:	d133      	bne.n	802aa94 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802aa2c:	69bb      	ldr	r3, [r7, #24]
 802aa2e:	015a      	lsls	r2, r3, #5
 802aa30:	69fb      	ldr	r3, [r7, #28]
 802aa32:	4413      	add	r3, r2
 802aa34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aa38:	681b      	ldr	r3, [r3, #0]
 802aa3a:	69ba      	ldr	r2, [r7, #24]
 802aa3c:	0151      	lsls	r1, r2, #5
 802aa3e:	69fa      	ldr	r2, [r7, #28]
 802aa40:	440a      	add	r2, r1
 802aa42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802aa46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802aa4a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802aa4c:	69bb      	ldr	r3, [r7, #24]
 802aa4e:	015a      	lsls	r2, r3, #5
 802aa50:	69fb      	ldr	r3, [r7, #28]
 802aa52:	4413      	add	r3, r2
 802aa54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aa58:	681b      	ldr	r3, [r3, #0]
 802aa5a:	69ba      	ldr	r2, [r7, #24]
 802aa5c:	0151      	lsls	r1, r2, #5
 802aa5e:	69fa      	ldr	r2, [r7, #28]
 802aa60:	440a      	add	r2, r1
 802aa62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802aa66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802aa6a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 802aa6c:	68fb      	ldr	r3, [r7, #12]
 802aa6e:	3301      	adds	r3, #1
 802aa70:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 802aa72:	68fb      	ldr	r3, [r7, #12]
 802aa74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802aa78:	d81d      	bhi.n	802aab6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802aa7a:	69bb      	ldr	r3, [r7, #24]
 802aa7c:	015a      	lsls	r2, r3, #5
 802aa7e:	69fb      	ldr	r3, [r7, #28]
 802aa80:	4413      	add	r3, r2
 802aa82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aa86:	681b      	ldr	r3, [r3, #0]
 802aa88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802aa8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802aa90:	d0ec      	beq.n	802aa6c <USB_HC_Halt+0x19e>
 802aa92:	e011      	b.n	802aab8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802aa94:	69bb      	ldr	r3, [r7, #24]
 802aa96:	015a      	lsls	r2, r3, #5
 802aa98:	69fb      	ldr	r3, [r7, #28]
 802aa9a:	4413      	add	r3, r2
 802aa9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aaa0:	681b      	ldr	r3, [r3, #0]
 802aaa2:	69ba      	ldr	r2, [r7, #24]
 802aaa4:	0151      	lsls	r1, r2, #5
 802aaa6:	69fa      	ldr	r2, [r7, #28]
 802aaa8:	440a      	add	r2, r1
 802aaaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802aaae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802aab2:	6013      	str	r3, [r2, #0]
 802aab4:	e000      	b.n	802aab8 <USB_HC_Halt+0x1ea>
          break;
 802aab6:	bf00      	nop
    }
  }

  return HAL_OK;
 802aab8:	2300      	movs	r3, #0
}
 802aaba:	4618      	mov	r0, r3
 802aabc:	3724      	adds	r7, #36	; 0x24
 802aabe:	46bd      	mov	sp, r7
 802aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aac4:	4770      	bx	lr
	...

0802aac8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 802aac8:	b480      	push	{r7}
 802aaca:	b087      	sub	sp, #28
 802aacc:	af00      	add	r7, sp, #0
 802aace:	6078      	str	r0, [r7, #4]
 802aad0:	460b      	mov	r3, r1
 802aad2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802aad4:	687b      	ldr	r3, [r7, #4]
 802aad6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 802aad8:	78fb      	ldrb	r3, [r7, #3]
 802aada:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 802aadc:	2301      	movs	r3, #1
 802aade:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802aae0:	68fb      	ldr	r3, [r7, #12]
 802aae2:	04da      	lsls	r2, r3, #19
 802aae4:	4b15      	ldr	r3, [pc, #84]	; (802ab3c <USB_DoPing+0x74>)
 802aae6:	4013      	ands	r3, r2
 802aae8:	693a      	ldr	r2, [r7, #16]
 802aaea:	0151      	lsls	r1, r2, #5
 802aaec:	697a      	ldr	r2, [r7, #20]
 802aaee:	440a      	add	r2, r1
 802aaf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802aaf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802aaf8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 802aafa:	693b      	ldr	r3, [r7, #16]
 802aafc:	015a      	lsls	r2, r3, #5
 802aafe:	697b      	ldr	r3, [r7, #20]
 802ab00:	4413      	add	r3, r2
 802ab02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ab06:	681b      	ldr	r3, [r3, #0]
 802ab08:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802ab0a:	68bb      	ldr	r3, [r7, #8]
 802ab0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802ab10:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802ab12:	68bb      	ldr	r3, [r7, #8]
 802ab14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802ab18:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 802ab1a:	693b      	ldr	r3, [r7, #16]
 802ab1c:	015a      	lsls	r2, r3, #5
 802ab1e:	697b      	ldr	r3, [r7, #20]
 802ab20:	4413      	add	r3, r2
 802ab22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ab26:	461a      	mov	r2, r3
 802ab28:	68bb      	ldr	r3, [r7, #8]
 802ab2a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 802ab2c:	2300      	movs	r3, #0
}
 802ab2e:	4618      	mov	r0, r3
 802ab30:	371c      	adds	r7, #28
 802ab32:	46bd      	mov	sp, r7
 802ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab38:	4770      	bx	lr
 802ab3a:	bf00      	nop
 802ab3c:	1ff80000 	.word	0x1ff80000

0802ab40 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 802ab40:	b580      	push	{r7, lr}
 802ab42:	b088      	sub	sp, #32
 802ab44:	af00      	add	r7, sp, #0
 802ab46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 802ab48:	2300      	movs	r3, #0
 802ab4a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ab4c:	687b      	ldr	r3, [r7, #4]
 802ab4e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 802ab50:	2300      	movs	r3, #0
 802ab52:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 802ab54:	6878      	ldr	r0, [r7, #4]
 802ab56:	f7ff f911 	bl	8029d7c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802ab5a:	2110      	movs	r1, #16
 802ab5c:	6878      	ldr	r0, [r7, #4]
 802ab5e:	f7ff f96b 	bl	8029e38 <USB_FlushTxFifo>
 802ab62:	4603      	mov	r3, r0
 802ab64:	2b00      	cmp	r3, #0
 802ab66:	d001      	beq.n	802ab6c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 802ab68:	2301      	movs	r3, #1
 802ab6a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802ab6c:	6878      	ldr	r0, [r7, #4]
 802ab6e:	f7ff f997 	bl	8029ea0 <USB_FlushRxFifo>
 802ab72:	4603      	mov	r3, r0
 802ab74:	2b00      	cmp	r3, #0
 802ab76:	d001      	beq.n	802ab7c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 802ab78:	2301      	movs	r3, #1
 802ab7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 802ab7c:	2300      	movs	r3, #0
 802ab7e:	61bb      	str	r3, [r7, #24]
 802ab80:	e01f      	b.n	802abc2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 802ab82:	69bb      	ldr	r3, [r7, #24]
 802ab84:	015a      	lsls	r2, r3, #5
 802ab86:	697b      	ldr	r3, [r7, #20]
 802ab88:	4413      	add	r3, r2
 802ab8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ab8e:	681b      	ldr	r3, [r3, #0]
 802ab90:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 802ab92:	693b      	ldr	r3, [r7, #16]
 802ab94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802ab98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 802ab9a:	693b      	ldr	r3, [r7, #16]
 802ab9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802aba0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802aba2:	693b      	ldr	r3, [r7, #16]
 802aba4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802aba8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802abaa:	69bb      	ldr	r3, [r7, #24]
 802abac:	015a      	lsls	r2, r3, #5
 802abae:	697b      	ldr	r3, [r7, #20]
 802abb0:	4413      	add	r3, r2
 802abb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802abb6:	461a      	mov	r2, r3
 802abb8:	693b      	ldr	r3, [r7, #16]
 802abba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 802abbc:	69bb      	ldr	r3, [r7, #24]
 802abbe:	3301      	adds	r3, #1
 802abc0:	61bb      	str	r3, [r7, #24]
 802abc2:	69bb      	ldr	r3, [r7, #24]
 802abc4:	2b0f      	cmp	r3, #15
 802abc6:	d9dc      	bls.n	802ab82 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 802abc8:	2300      	movs	r3, #0
 802abca:	61bb      	str	r3, [r7, #24]
 802abcc:	e034      	b.n	802ac38 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 802abce:	69bb      	ldr	r3, [r7, #24]
 802abd0:	015a      	lsls	r2, r3, #5
 802abd2:	697b      	ldr	r3, [r7, #20]
 802abd4:	4413      	add	r3, r2
 802abd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802abda:	681b      	ldr	r3, [r3, #0]
 802abdc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 802abde:	693b      	ldr	r3, [r7, #16]
 802abe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802abe4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 802abe6:	693b      	ldr	r3, [r7, #16]
 802abe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802abec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802abee:	693b      	ldr	r3, [r7, #16]
 802abf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802abf4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802abf6:	69bb      	ldr	r3, [r7, #24]
 802abf8:	015a      	lsls	r2, r3, #5
 802abfa:	697b      	ldr	r3, [r7, #20]
 802abfc:	4413      	add	r3, r2
 802abfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ac02:	461a      	mov	r2, r3
 802ac04:	693b      	ldr	r3, [r7, #16]
 802ac06:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 802ac08:	68fb      	ldr	r3, [r7, #12]
 802ac0a:	3301      	adds	r3, #1
 802ac0c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 802ac0e:	68fb      	ldr	r3, [r7, #12]
 802ac10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802ac14:	d80c      	bhi.n	802ac30 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802ac16:	69bb      	ldr	r3, [r7, #24]
 802ac18:	015a      	lsls	r2, r3, #5
 802ac1a:	697b      	ldr	r3, [r7, #20]
 802ac1c:	4413      	add	r3, r2
 802ac1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ac22:	681b      	ldr	r3, [r3, #0]
 802ac24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802ac28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802ac2c:	d0ec      	beq.n	802ac08 <USB_StopHost+0xc8>
 802ac2e:	e000      	b.n	802ac32 <USB_StopHost+0xf2>
        break;
 802ac30:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 802ac32:	69bb      	ldr	r3, [r7, #24]
 802ac34:	3301      	adds	r3, #1
 802ac36:	61bb      	str	r3, [r7, #24]
 802ac38:	69bb      	ldr	r3, [r7, #24]
 802ac3a:	2b0f      	cmp	r3, #15
 802ac3c:	d9c7      	bls.n	802abce <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 802ac3e:	697b      	ldr	r3, [r7, #20]
 802ac40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802ac44:	461a      	mov	r2, r3
 802ac46:	f04f 33ff 	mov.w	r3, #4294967295
 802ac4a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 802ac4c:	687b      	ldr	r3, [r7, #4]
 802ac4e:	f04f 32ff 	mov.w	r2, #4294967295
 802ac52:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 802ac54:	6878      	ldr	r0, [r7, #4]
 802ac56:	f7ff f880 	bl	8029d5a <USB_EnableGlobalInt>

  return ret;
 802ac5a:	7ffb      	ldrb	r3, [r7, #31]
}
 802ac5c:	4618      	mov	r0, r3
 802ac5e:	3720      	adds	r7, #32
 802ac60:	46bd      	mov	sp, r7
 802ac62:	bd80      	pop	{r7, pc}

0802ac64 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 802ac64:	b590      	push	{r4, r7, lr}
 802ac66:	b089      	sub	sp, #36	; 0x24
 802ac68:	af04      	add	r7, sp, #16
 802ac6a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 802ac6c:	2301      	movs	r3, #1
 802ac6e:	2202      	movs	r2, #2
 802ac70:	2102      	movs	r1, #2
 802ac72:	6878      	ldr	r0, [r7, #4]
 802ac74:	f000 fc66 	bl	802b544 <USBH_FindInterface>
 802ac78:	4603      	mov	r3, r0
 802ac7a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802ac7c:	7bfb      	ldrb	r3, [r7, #15]
 802ac7e:	2bff      	cmp	r3, #255	; 0xff
 802ac80:	d002      	beq.n	802ac88 <USBH_CDC_InterfaceInit+0x24>
 802ac82:	7bfb      	ldrb	r3, [r7, #15]
 802ac84:	2b01      	cmp	r3, #1
 802ac86:	d901      	bls.n	802ac8c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802ac88:	2302      	movs	r3, #2
 802ac8a:	e13d      	b.n	802af08 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 802ac8c:	7bfb      	ldrb	r3, [r7, #15]
 802ac8e:	4619      	mov	r1, r3
 802ac90:	6878      	ldr	r0, [r7, #4]
 802ac92:	f000 fc3b 	bl	802b50c <USBH_SelectInterface>
 802ac96:	4603      	mov	r3, r0
 802ac98:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 802ac9a:	7bbb      	ldrb	r3, [r7, #14]
 802ac9c:	2b00      	cmp	r3, #0
 802ac9e:	d001      	beq.n	802aca4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 802aca0:	2302      	movs	r3, #2
 802aca2:	e131      	b.n	802af08 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 802aca4:	687b      	ldr	r3, [r7, #4]
 802aca6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 802acaa:	2050      	movs	r0, #80	; 0x50
 802acac:	f002 fb00 	bl	802d2b0 <malloc>
 802acb0:	4603      	mov	r3, r0
 802acb2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802acb4:	687b      	ldr	r3, [r7, #4]
 802acb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802acba:	69db      	ldr	r3, [r3, #28]
 802acbc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 802acbe:	68bb      	ldr	r3, [r7, #8]
 802acc0:	2b00      	cmp	r3, #0
 802acc2:	d101      	bne.n	802acc8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 802acc4:	2302      	movs	r3, #2
 802acc6:	e11f      	b.n	802af08 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 802acc8:	2250      	movs	r2, #80	; 0x50
 802acca:	2100      	movs	r1, #0
 802accc:	68b8      	ldr	r0, [r7, #8]
 802acce:	f002 faff 	bl	802d2d0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802acd2:	7bfb      	ldrb	r3, [r7, #15]
 802acd4:	687a      	ldr	r2, [r7, #4]
 802acd6:	211a      	movs	r1, #26
 802acd8:	fb01 f303 	mul.w	r3, r1, r3
 802acdc:	4413      	add	r3, r2
 802acde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802ace2:	781b      	ldrb	r3, [r3, #0]
 802ace4:	b25b      	sxtb	r3, r3
 802ace6:	2b00      	cmp	r3, #0
 802ace8:	da15      	bge.n	802ad16 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802acea:	7bfb      	ldrb	r3, [r7, #15]
 802acec:	687a      	ldr	r2, [r7, #4]
 802acee:	211a      	movs	r1, #26
 802acf0:	fb01 f303 	mul.w	r3, r1, r3
 802acf4:	4413      	add	r3, r2
 802acf6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802acfa:	781a      	ldrb	r2, [r3, #0]
 802acfc:	68bb      	ldr	r3, [r7, #8]
 802acfe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802ad00:	7bfb      	ldrb	r3, [r7, #15]
 802ad02:	687a      	ldr	r2, [r7, #4]
 802ad04:	211a      	movs	r1, #26
 802ad06:	fb01 f303 	mul.w	r3, r1, r3
 802ad0a:	4413      	add	r3, r2
 802ad0c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802ad10:	881a      	ldrh	r2, [r3, #0]
 802ad12:	68bb      	ldr	r3, [r7, #8]
 802ad14:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 802ad16:	68bb      	ldr	r3, [r7, #8]
 802ad18:	785b      	ldrb	r3, [r3, #1]
 802ad1a:	4619      	mov	r1, r3
 802ad1c:	6878      	ldr	r0, [r7, #4]
 802ad1e:	f001 ff2c 	bl	802cb7a <USBH_AllocPipe>
 802ad22:	4603      	mov	r3, r0
 802ad24:	461a      	mov	r2, r3
 802ad26:	68bb      	ldr	r3, [r7, #8]
 802ad28:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 802ad2a:	68bb      	ldr	r3, [r7, #8]
 802ad2c:	7819      	ldrb	r1, [r3, #0]
 802ad2e:	68bb      	ldr	r3, [r7, #8]
 802ad30:	7858      	ldrb	r0, [r3, #1]
 802ad32:	687b      	ldr	r3, [r7, #4]
 802ad34:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802ad38:	687b      	ldr	r3, [r7, #4]
 802ad3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802ad3e:	68ba      	ldr	r2, [r7, #8]
 802ad40:	8952      	ldrh	r2, [r2, #10]
 802ad42:	9202      	str	r2, [sp, #8]
 802ad44:	2203      	movs	r2, #3
 802ad46:	9201      	str	r2, [sp, #4]
 802ad48:	9300      	str	r3, [sp, #0]
 802ad4a:	4623      	mov	r3, r4
 802ad4c:	4602      	mov	r2, r0
 802ad4e:	6878      	ldr	r0, [r7, #4]
 802ad50:	f001 fee4 	bl	802cb1c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 802ad54:	68bb      	ldr	r3, [r7, #8]
 802ad56:	781b      	ldrb	r3, [r3, #0]
 802ad58:	2200      	movs	r2, #0
 802ad5a:	4619      	mov	r1, r3
 802ad5c:	6878      	ldr	r0, [r7, #4]
 802ad5e:	f002 f9f9 	bl	802d154 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 802ad62:	2300      	movs	r3, #0
 802ad64:	2200      	movs	r2, #0
 802ad66:	210a      	movs	r1, #10
 802ad68:	6878      	ldr	r0, [r7, #4]
 802ad6a:	f000 fbeb 	bl	802b544 <USBH_FindInterface>
 802ad6e:	4603      	mov	r3, r0
 802ad70:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802ad72:	7bfb      	ldrb	r3, [r7, #15]
 802ad74:	2bff      	cmp	r3, #255	; 0xff
 802ad76:	d002      	beq.n	802ad7e <USBH_CDC_InterfaceInit+0x11a>
 802ad78:	7bfb      	ldrb	r3, [r7, #15]
 802ad7a:	2b01      	cmp	r3, #1
 802ad7c:	d901      	bls.n	802ad82 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802ad7e:	2302      	movs	r3, #2
 802ad80:	e0c2      	b.n	802af08 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802ad82:	7bfb      	ldrb	r3, [r7, #15]
 802ad84:	687a      	ldr	r2, [r7, #4]
 802ad86:	211a      	movs	r1, #26
 802ad88:	fb01 f303 	mul.w	r3, r1, r3
 802ad8c:	4413      	add	r3, r2
 802ad8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802ad92:	781b      	ldrb	r3, [r3, #0]
 802ad94:	b25b      	sxtb	r3, r3
 802ad96:	2b00      	cmp	r3, #0
 802ad98:	da16      	bge.n	802adc8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802ad9a:	7bfb      	ldrb	r3, [r7, #15]
 802ad9c:	687a      	ldr	r2, [r7, #4]
 802ad9e:	211a      	movs	r1, #26
 802ada0:	fb01 f303 	mul.w	r3, r1, r3
 802ada4:	4413      	add	r3, r2
 802ada6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802adaa:	781a      	ldrb	r2, [r3, #0]
 802adac:	68bb      	ldr	r3, [r7, #8]
 802adae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802adb0:	7bfb      	ldrb	r3, [r7, #15]
 802adb2:	687a      	ldr	r2, [r7, #4]
 802adb4:	211a      	movs	r1, #26
 802adb6:	fb01 f303 	mul.w	r3, r1, r3
 802adba:	4413      	add	r3, r2
 802adbc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802adc0:	881a      	ldrh	r2, [r3, #0]
 802adc2:	68bb      	ldr	r3, [r7, #8]
 802adc4:	835a      	strh	r2, [r3, #26]
 802adc6:	e015      	b.n	802adf4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802adc8:	7bfb      	ldrb	r3, [r7, #15]
 802adca:	687a      	ldr	r2, [r7, #4]
 802adcc:	211a      	movs	r1, #26
 802adce:	fb01 f303 	mul.w	r3, r1, r3
 802add2:	4413      	add	r3, r2
 802add4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802add8:	781a      	ldrb	r2, [r3, #0]
 802adda:	68bb      	ldr	r3, [r7, #8]
 802addc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802adde:	7bfb      	ldrb	r3, [r7, #15]
 802ade0:	687a      	ldr	r2, [r7, #4]
 802ade2:	211a      	movs	r1, #26
 802ade4:	fb01 f303 	mul.w	r3, r1, r3
 802ade8:	4413      	add	r3, r2
 802adea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802adee:	881a      	ldrh	r2, [r3, #0]
 802adf0:	68bb      	ldr	r3, [r7, #8]
 802adf2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 802adf4:	7bfb      	ldrb	r3, [r7, #15]
 802adf6:	687a      	ldr	r2, [r7, #4]
 802adf8:	211a      	movs	r1, #26
 802adfa:	fb01 f303 	mul.w	r3, r1, r3
 802adfe:	4413      	add	r3, r2
 802ae00:	f203 3356 	addw	r3, r3, #854	; 0x356
 802ae04:	781b      	ldrb	r3, [r3, #0]
 802ae06:	b25b      	sxtb	r3, r3
 802ae08:	2b00      	cmp	r3, #0
 802ae0a:	da16      	bge.n	802ae3a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802ae0c:	7bfb      	ldrb	r3, [r7, #15]
 802ae0e:	687a      	ldr	r2, [r7, #4]
 802ae10:	211a      	movs	r1, #26
 802ae12:	fb01 f303 	mul.w	r3, r1, r3
 802ae16:	4413      	add	r3, r2
 802ae18:	f203 3356 	addw	r3, r3, #854	; 0x356
 802ae1c:	781a      	ldrb	r2, [r3, #0]
 802ae1e:	68bb      	ldr	r3, [r7, #8]
 802ae20:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802ae22:	7bfb      	ldrb	r3, [r7, #15]
 802ae24:	687a      	ldr	r2, [r7, #4]
 802ae26:	211a      	movs	r1, #26
 802ae28:	fb01 f303 	mul.w	r3, r1, r3
 802ae2c:	4413      	add	r3, r2
 802ae2e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802ae32:	881a      	ldrh	r2, [r3, #0]
 802ae34:	68bb      	ldr	r3, [r7, #8]
 802ae36:	835a      	strh	r2, [r3, #26]
 802ae38:	e015      	b.n	802ae66 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802ae3a:	7bfb      	ldrb	r3, [r7, #15]
 802ae3c:	687a      	ldr	r2, [r7, #4]
 802ae3e:	211a      	movs	r1, #26
 802ae40:	fb01 f303 	mul.w	r3, r1, r3
 802ae44:	4413      	add	r3, r2
 802ae46:	f203 3356 	addw	r3, r3, #854	; 0x356
 802ae4a:	781a      	ldrb	r2, [r3, #0]
 802ae4c:	68bb      	ldr	r3, [r7, #8]
 802ae4e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802ae50:	7bfb      	ldrb	r3, [r7, #15]
 802ae52:	687a      	ldr	r2, [r7, #4]
 802ae54:	211a      	movs	r1, #26
 802ae56:	fb01 f303 	mul.w	r3, r1, r3
 802ae5a:	4413      	add	r3, r2
 802ae5c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802ae60:	881a      	ldrh	r2, [r3, #0]
 802ae62:	68bb      	ldr	r3, [r7, #8]
 802ae64:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 802ae66:	68bb      	ldr	r3, [r7, #8]
 802ae68:	7b9b      	ldrb	r3, [r3, #14]
 802ae6a:	4619      	mov	r1, r3
 802ae6c:	6878      	ldr	r0, [r7, #4]
 802ae6e:	f001 fe84 	bl	802cb7a <USBH_AllocPipe>
 802ae72:	4603      	mov	r3, r0
 802ae74:	461a      	mov	r2, r3
 802ae76:	68bb      	ldr	r3, [r7, #8]
 802ae78:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 802ae7a:	68bb      	ldr	r3, [r7, #8]
 802ae7c:	7bdb      	ldrb	r3, [r3, #15]
 802ae7e:	4619      	mov	r1, r3
 802ae80:	6878      	ldr	r0, [r7, #4]
 802ae82:	f001 fe7a 	bl	802cb7a <USBH_AllocPipe>
 802ae86:	4603      	mov	r3, r0
 802ae88:	461a      	mov	r2, r3
 802ae8a:	68bb      	ldr	r3, [r7, #8]
 802ae8c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 802ae8e:	68bb      	ldr	r3, [r7, #8]
 802ae90:	7b59      	ldrb	r1, [r3, #13]
 802ae92:	68bb      	ldr	r3, [r7, #8]
 802ae94:	7b98      	ldrb	r0, [r3, #14]
 802ae96:	687b      	ldr	r3, [r7, #4]
 802ae98:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802ae9c:	687b      	ldr	r3, [r7, #4]
 802ae9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802aea2:	68ba      	ldr	r2, [r7, #8]
 802aea4:	8b12      	ldrh	r2, [r2, #24]
 802aea6:	9202      	str	r2, [sp, #8]
 802aea8:	2202      	movs	r2, #2
 802aeaa:	9201      	str	r2, [sp, #4]
 802aeac:	9300      	str	r3, [sp, #0]
 802aeae:	4623      	mov	r3, r4
 802aeb0:	4602      	mov	r2, r0
 802aeb2:	6878      	ldr	r0, [r7, #4]
 802aeb4:	f001 fe32 	bl	802cb1c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 802aeb8:	68bb      	ldr	r3, [r7, #8]
 802aeba:	7b19      	ldrb	r1, [r3, #12]
 802aebc:	68bb      	ldr	r3, [r7, #8]
 802aebe:	7bd8      	ldrb	r0, [r3, #15]
 802aec0:	687b      	ldr	r3, [r7, #4]
 802aec2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802aec6:	687b      	ldr	r3, [r7, #4]
 802aec8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802aecc:	68ba      	ldr	r2, [r7, #8]
 802aece:	8b52      	ldrh	r2, [r2, #26]
 802aed0:	9202      	str	r2, [sp, #8]
 802aed2:	2202      	movs	r2, #2
 802aed4:	9201      	str	r2, [sp, #4]
 802aed6:	9300      	str	r3, [sp, #0]
 802aed8:	4623      	mov	r3, r4
 802aeda:	4602      	mov	r2, r0
 802aedc:	6878      	ldr	r0, [r7, #4]
 802aede:	f001 fe1d 	bl	802cb1c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 802aee2:	68bb      	ldr	r3, [r7, #8]
 802aee4:	2200      	movs	r2, #0
 802aee6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 802aeea:	68bb      	ldr	r3, [r7, #8]
 802aeec:	7b5b      	ldrb	r3, [r3, #13]
 802aeee:	2200      	movs	r2, #0
 802aef0:	4619      	mov	r1, r3
 802aef2:	6878      	ldr	r0, [r7, #4]
 802aef4:	f002 f92e 	bl	802d154 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 802aef8:	68bb      	ldr	r3, [r7, #8]
 802aefa:	7b1b      	ldrb	r3, [r3, #12]
 802aefc:	2200      	movs	r2, #0
 802aefe:	4619      	mov	r1, r3
 802af00:	6878      	ldr	r0, [r7, #4]
 802af02:	f002 f927 	bl	802d154 <USBH_LL_SetToggle>

  return USBH_OK;
 802af06:	2300      	movs	r3, #0
}
 802af08:	4618      	mov	r0, r3
 802af0a:	3714      	adds	r7, #20
 802af0c:	46bd      	mov	sp, r7
 802af0e:	bd90      	pop	{r4, r7, pc}

0802af10 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 802af10:	b580      	push	{r7, lr}
 802af12:	b084      	sub	sp, #16
 802af14:	af00      	add	r7, sp, #0
 802af16:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802af18:	687b      	ldr	r3, [r7, #4]
 802af1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802af1e:	69db      	ldr	r3, [r3, #28]
 802af20:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 802af22:	68fb      	ldr	r3, [r7, #12]
 802af24:	781b      	ldrb	r3, [r3, #0]
 802af26:	2b00      	cmp	r3, #0
 802af28:	d00e      	beq.n	802af48 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802af2a:	68fb      	ldr	r3, [r7, #12]
 802af2c:	781b      	ldrb	r3, [r3, #0]
 802af2e:	4619      	mov	r1, r3
 802af30:	6878      	ldr	r0, [r7, #4]
 802af32:	f001 fe12 	bl	802cb5a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802af36:	68fb      	ldr	r3, [r7, #12]
 802af38:	781b      	ldrb	r3, [r3, #0]
 802af3a:	4619      	mov	r1, r3
 802af3c:	6878      	ldr	r0, [r7, #4]
 802af3e:	f001 fe3d 	bl	802cbbc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 802af42:	68fb      	ldr	r3, [r7, #12]
 802af44:	2200      	movs	r2, #0
 802af46:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 802af48:	68fb      	ldr	r3, [r7, #12]
 802af4a:	7b1b      	ldrb	r3, [r3, #12]
 802af4c:	2b00      	cmp	r3, #0
 802af4e:	d00e      	beq.n	802af6e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 802af50:	68fb      	ldr	r3, [r7, #12]
 802af52:	7b1b      	ldrb	r3, [r3, #12]
 802af54:	4619      	mov	r1, r3
 802af56:	6878      	ldr	r0, [r7, #4]
 802af58:	f001 fdff 	bl	802cb5a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 802af5c:	68fb      	ldr	r3, [r7, #12]
 802af5e:	7b1b      	ldrb	r3, [r3, #12]
 802af60:	4619      	mov	r1, r3
 802af62:	6878      	ldr	r0, [r7, #4]
 802af64:	f001 fe2a 	bl	802cbbc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 802af68:	68fb      	ldr	r3, [r7, #12]
 802af6a:	2200      	movs	r2, #0
 802af6c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 802af6e:	68fb      	ldr	r3, [r7, #12]
 802af70:	7b5b      	ldrb	r3, [r3, #13]
 802af72:	2b00      	cmp	r3, #0
 802af74:	d00e      	beq.n	802af94 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 802af76:	68fb      	ldr	r3, [r7, #12]
 802af78:	7b5b      	ldrb	r3, [r3, #13]
 802af7a:	4619      	mov	r1, r3
 802af7c:	6878      	ldr	r0, [r7, #4]
 802af7e:	f001 fdec 	bl	802cb5a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 802af82:	68fb      	ldr	r3, [r7, #12]
 802af84:	7b5b      	ldrb	r3, [r3, #13]
 802af86:	4619      	mov	r1, r3
 802af88:	6878      	ldr	r0, [r7, #4]
 802af8a:	f001 fe17 	bl	802cbbc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 802af8e:	68fb      	ldr	r3, [r7, #12]
 802af90:	2200      	movs	r2, #0
 802af92:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 802af94:	687b      	ldr	r3, [r7, #4]
 802af96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802af9a:	69db      	ldr	r3, [r3, #28]
 802af9c:	2b00      	cmp	r3, #0
 802af9e:	d00b      	beq.n	802afb8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 802afa0:	687b      	ldr	r3, [r7, #4]
 802afa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802afa6:	69db      	ldr	r3, [r3, #28]
 802afa8:	4618      	mov	r0, r3
 802afaa:	f002 f989 	bl	802d2c0 <free>
    phost->pActiveClass->pData = 0U;
 802afae:	687b      	ldr	r3, [r7, #4]
 802afb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802afb4:	2200      	movs	r2, #0
 802afb6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 802afb8:	2300      	movs	r3, #0
}
 802afba:	4618      	mov	r0, r3
 802afbc:	3710      	adds	r7, #16
 802afbe:	46bd      	mov	sp, r7
 802afc0:	bd80      	pop	{r7, pc}

0802afc2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 802afc2:	b580      	push	{r7, lr}
 802afc4:	b084      	sub	sp, #16
 802afc6:	af00      	add	r7, sp, #0
 802afc8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802afca:	687b      	ldr	r3, [r7, #4]
 802afcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802afd0:	69db      	ldr	r3, [r3, #28]
 802afd2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 802afd4:	68fb      	ldr	r3, [r7, #12]
 802afd6:	3340      	adds	r3, #64	; 0x40
 802afd8:	4619      	mov	r1, r3
 802afda:	6878      	ldr	r0, [r7, #4]
 802afdc:	f000 f8b1 	bl	802b142 <GetLineCoding>
 802afe0:	4603      	mov	r3, r0
 802afe2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 802afe4:	7afb      	ldrb	r3, [r7, #11]
 802afe6:	2b00      	cmp	r3, #0
 802afe8:	d105      	bne.n	802aff6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 802afea:	687b      	ldr	r3, [r7, #4]
 802afec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802aff0:	2102      	movs	r1, #2
 802aff2:	6878      	ldr	r0, [r7, #4]
 802aff4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 802aff6:	7afb      	ldrb	r3, [r7, #11]
}
 802aff8:	4618      	mov	r0, r3
 802affa:	3710      	adds	r7, #16
 802affc:	46bd      	mov	sp, r7
 802affe:	bd80      	pop	{r7, pc}

0802b000 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 802b000:	b580      	push	{r7, lr}
 802b002:	b084      	sub	sp, #16
 802b004:	af00      	add	r7, sp, #0
 802b006:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 802b008:	2301      	movs	r3, #1
 802b00a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 802b00c:	2300      	movs	r3, #0
 802b00e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b010:	687b      	ldr	r3, [r7, #4]
 802b012:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b016:	69db      	ldr	r3, [r3, #28]
 802b018:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 802b01a:	68bb      	ldr	r3, [r7, #8]
 802b01c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802b020:	2b04      	cmp	r3, #4
 802b022:	d877      	bhi.n	802b114 <USBH_CDC_Process+0x114>
 802b024:	a201      	add	r2, pc, #4	; (adr r2, 802b02c <USBH_CDC_Process+0x2c>)
 802b026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b02a:	bf00      	nop
 802b02c:	0802b041 	.word	0x0802b041
 802b030:	0802b047 	.word	0x0802b047
 802b034:	0802b077 	.word	0x0802b077
 802b038:	0802b0eb 	.word	0x0802b0eb
 802b03c:	0802b0f9 	.word	0x0802b0f9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 802b040:	2300      	movs	r3, #0
 802b042:	73fb      	strb	r3, [r7, #15]
      break;
 802b044:	e06d      	b.n	802b122 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 802b046:	68bb      	ldr	r3, [r7, #8]
 802b048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b04a:	4619      	mov	r1, r3
 802b04c:	6878      	ldr	r0, [r7, #4]
 802b04e:	f000 f897 	bl	802b180 <SetLineCoding>
 802b052:	4603      	mov	r3, r0
 802b054:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802b056:	7bbb      	ldrb	r3, [r7, #14]
 802b058:	2b00      	cmp	r3, #0
 802b05a:	d104      	bne.n	802b066 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 802b05c:	68bb      	ldr	r3, [r7, #8]
 802b05e:	2202      	movs	r2, #2
 802b060:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802b064:	e058      	b.n	802b118 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 802b066:	7bbb      	ldrb	r3, [r7, #14]
 802b068:	2b01      	cmp	r3, #1
 802b06a:	d055      	beq.n	802b118 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 802b06c:	68bb      	ldr	r3, [r7, #8]
 802b06e:	2204      	movs	r2, #4
 802b070:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802b074:	e050      	b.n	802b118 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 802b076:	68bb      	ldr	r3, [r7, #8]
 802b078:	3340      	adds	r3, #64	; 0x40
 802b07a:	4619      	mov	r1, r3
 802b07c:	6878      	ldr	r0, [r7, #4]
 802b07e:	f000 f860 	bl	802b142 <GetLineCoding>
 802b082:	4603      	mov	r3, r0
 802b084:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802b086:	7bbb      	ldrb	r3, [r7, #14]
 802b088:	2b00      	cmp	r3, #0
 802b08a:	d126      	bne.n	802b0da <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 802b08c:	68bb      	ldr	r3, [r7, #8]
 802b08e:	2200      	movs	r2, #0
 802b090:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802b094:	68bb      	ldr	r3, [r7, #8]
 802b096:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 802b09a:	68bb      	ldr	r3, [r7, #8]
 802b09c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b09e:	791b      	ldrb	r3, [r3, #4]
 802b0a0:	429a      	cmp	r2, r3
 802b0a2:	d13b      	bne.n	802b11c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802b0a4:	68bb      	ldr	r3, [r7, #8]
 802b0a6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 802b0aa:	68bb      	ldr	r3, [r7, #8]
 802b0ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b0ae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802b0b0:	429a      	cmp	r2, r3
 802b0b2:	d133      	bne.n	802b11c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802b0b4:	68bb      	ldr	r3, [r7, #8]
 802b0b6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 802b0ba:	68bb      	ldr	r3, [r7, #8]
 802b0bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b0be:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802b0c0:	429a      	cmp	r2, r3
 802b0c2:	d12b      	bne.n	802b11c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 802b0c4:	68bb      	ldr	r3, [r7, #8]
 802b0c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802b0c8:	68bb      	ldr	r3, [r7, #8]
 802b0ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b0cc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802b0ce:	429a      	cmp	r2, r3
 802b0d0:	d124      	bne.n	802b11c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 802b0d2:	6878      	ldr	r0, [r7, #4]
 802b0d4:	f000 f958 	bl	802b388 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802b0d8:	e020      	b.n	802b11c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 802b0da:	7bbb      	ldrb	r3, [r7, #14]
 802b0dc:	2b01      	cmp	r3, #1
 802b0de:	d01d      	beq.n	802b11c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 802b0e0:	68bb      	ldr	r3, [r7, #8]
 802b0e2:	2204      	movs	r2, #4
 802b0e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802b0e8:	e018      	b.n	802b11c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 802b0ea:	6878      	ldr	r0, [r7, #4]
 802b0ec:	f000 f867 	bl	802b1be <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 802b0f0:	6878      	ldr	r0, [r7, #4]
 802b0f2:	f000 f8da 	bl	802b2aa <CDC_ProcessReception>
      break;
 802b0f6:	e014      	b.n	802b122 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 802b0f8:	2100      	movs	r1, #0
 802b0fa:	6878      	ldr	r0, [r7, #4]
 802b0fc:	f000 ffef 	bl	802c0de <USBH_ClrFeature>
 802b100:	4603      	mov	r3, r0
 802b102:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802b104:	7bbb      	ldrb	r3, [r7, #14]
 802b106:	2b00      	cmp	r3, #0
 802b108:	d10a      	bne.n	802b120 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 802b10a:	68bb      	ldr	r3, [r7, #8]
 802b10c:	2200      	movs	r2, #0
 802b10e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 802b112:	e005      	b.n	802b120 <USBH_CDC_Process+0x120>

    default:
      break;
 802b114:	bf00      	nop
 802b116:	e004      	b.n	802b122 <USBH_CDC_Process+0x122>
      break;
 802b118:	bf00      	nop
 802b11a:	e002      	b.n	802b122 <USBH_CDC_Process+0x122>
      break;
 802b11c:	bf00      	nop
 802b11e:	e000      	b.n	802b122 <USBH_CDC_Process+0x122>
      break;
 802b120:	bf00      	nop

  }

  return status;
 802b122:	7bfb      	ldrb	r3, [r7, #15]
}
 802b124:	4618      	mov	r0, r3
 802b126:	3710      	adds	r7, #16
 802b128:	46bd      	mov	sp, r7
 802b12a:	bd80      	pop	{r7, pc}

0802b12c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 802b12c:	b480      	push	{r7}
 802b12e:	b083      	sub	sp, #12
 802b130:	af00      	add	r7, sp, #0
 802b132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 802b134:	2300      	movs	r3, #0
}
 802b136:	4618      	mov	r0, r3
 802b138:	370c      	adds	r7, #12
 802b13a:	46bd      	mov	sp, r7
 802b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b140:	4770      	bx	lr

0802b142 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 802b142:	b580      	push	{r7, lr}
 802b144:	b082      	sub	sp, #8
 802b146:	af00      	add	r7, sp, #0
 802b148:	6078      	str	r0, [r7, #4]
 802b14a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 802b14c:	687b      	ldr	r3, [r7, #4]
 802b14e:	22a1      	movs	r2, #161	; 0xa1
 802b150:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 802b152:	687b      	ldr	r3, [r7, #4]
 802b154:	2221      	movs	r2, #33	; 0x21
 802b156:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802b158:	687b      	ldr	r3, [r7, #4]
 802b15a:	2200      	movs	r2, #0
 802b15c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 802b15e:	687b      	ldr	r3, [r7, #4]
 802b160:	2200      	movs	r2, #0
 802b162:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802b164:	687b      	ldr	r3, [r7, #4]
 802b166:	2207      	movs	r2, #7
 802b168:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802b16a:	683b      	ldr	r3, [r7, #0]
 802b16c:	2207      	movs	r2, #7
 802b16e:	4619      	mov	r1, r3
 802b170:	6878      	ldr	r0, [r7, #4]
 802b172:	f001 fa81 	bl	802c678 <USBH_CtlReq>
 802b176:	4603      	mov	r3, r0
}
 802b178:	4618      	mov	r0, r3
 802b17a:	3708      	adds	r7, #8
 802b17c:	46bd      	mov	sp, r7
 802b17e:	bd80      	pop	{r7, pc}

0802b180 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 802b180:	b580      	push	{r7, lr}
 802b182:	b082      	sub	sp, #8
 802b184:	af00      	add	r7, sp, #0
 802b186:	6078      	str	r0, [r7, #4]
 802b188:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 802b18a:	687b      	ldr	r3, [r7, #4]
 802b18c:	2221      	movs	r2, #33	; 0x21
 802b18e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 802b190:	687b      	ldr	r3, [r7, #4]
 802b192:	2220      	movs	r2, #32
 802b194:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802b196:	687b      	ldr	r3, [r7, #4]
 802b198:	2200      	movs	r2, #0
 802b19a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 802b19c:	687b      	ldr	r3, [r7, #4]
 802b19e:	2200      	movs	r2, #0
 802b1a0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802b1a2:	687b      	ldr	r3, [r7, #4]
 802b1a4:	2207      	movs	r2, #7
 802b1a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802b1a8:	683b      	ldr	r3, [r7, #0]
 802b1aa:	2207      	movs	r2, #7
 802b1ac:	4619      	mov	r1, r3
 802b1ae:	6878      	ldr	r0, [r7, #4]
 802b1b0:	f001 fa62 	bl	802c678 <USBH_CtlReq>
 802b1b4:	4603      	mov	r3, r0
}
 802b1b6:	4618      	mov	r0, r3
 802b1b8:	3708      	adds	r7, #8
 802b1ba:	46bd      	mov	sp, r7
 802b1bc:	bd80      	pop	{r7, pc}

0802b1be <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 802b1be:	b580      	push	{r7, lr}
 802b1c0:	b086      	sub	sp, #24
 802b1c2:	af02      	add	r7, sp, #8
 802b1c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b1c6:	687b      	ldr	r3, [r7, #4]
 802b1c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b1cc:	69db      	ldr	r3, [r3, #28]
 802b1ce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802b1d0:	2300      	movs	r3, #0
 802b1d2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 802b1d4:	68fb      	ldr	r3, [r7, #12]
 802b1d6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802b1da:	2b01      	cmp	r3, #1
 802b1dc:	d002      	beq.n	802b1e4 <CDC_ProcessTransmission+0x26>
 802b1de:	2b02      	cmp	r3, #2
 802b1e0:	d023      	beq.n	802b22a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 802b1e2:	e05e      	b.n	802b2a2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802b1e4:	68fb      	ldr	r3, [r7, #12]
 802b1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b1e8:	68fa      	ldr	r2, [r7, #12]
 802b1ea:	8b12      	ldrh	r2, [r2, #24]
 802b1ec:	4293      	cmp	r3, r2
 802b1ee:	d90b      	bls.n	802b208 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 802b1f0:	68fb      	ldr	r3, [r7, #12]
 802b1f2:	69d9      	ldr	r1, [r3, #28]
 802b1f4:	68fb      	ldr	r3, [r7, #12]
 802b1f6:	8b1a      	ldrh	r2, [r3, #24]
 802b1f8:	68fb      	ldr	r3, [r7, #12]
 802b1fa:	7b5b      	ldrb	r3, [r3, #13]
 802b1fc:	2001      	movs	r0, #1
 802b1fe:	9000      	str	r0, [sp, #0]
 802b200:	6878      	ldr	r0, [r7, #4]
 802b202:	f001 fc48 	bl	802ca96 <USBH_BulkSendData>
 802b206:	e00b      	b.n	802b220 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 802b208:	68fb      	ldr	r3, [r7, #12]
 802b20a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 802b20c:	68fb      	ldr	r3, [r7, #12]
 802b20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 802b210:	b29a      	uxth	r2, r3
 802b212:	68fb      	ldr	r3, [r7, #12]
 802b214:	7b5b      	ldrb	r3, [r3, #13]
 802b216:	2001      	movs	r0, #1
 802b218:	9000      	str	r0, [sp, #0]
 802b21a:	6878      	ldr	r0, [r7, #4]
 802b21c:	f001 fc3b 	bl	802ca96 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 802b220:	68fb      	ldr	r3, [r7, #12]
 802b222:	2202      	movs	r2, #2
 802b224:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802b228:	e03b      	b.n	802b2a2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 802b22a:	68fb      	ldr	r3, [r7, #12]
 802b22c:	7b5b      	ldrb	r3, [r3, #13]
 802b22e:	4619      	mov	r1, r3
 802b230:	6878      	ldr	r0, [r7, #4]
 802b232:	f001 ff65 	bl	802d100 <USBH_LL_GetURBState>
 802b236:	4603      	mov	r3, r0
 802b238:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 802b23a:	7afb      	ldrb	r3, [r7, #11]
 802b23c:	2b01      	cmp	r3, #1
 802b23e:	d128      	bne.n	802b292 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802b240:	68fb      	ldr	r3, [r7, #12]
 802b242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b244:	68fa      	ldr	r2, [r7, #12]
 802b246:	8b12      	ldrh	r2, [r2, #24]
 802b248:	4293      	cmp	r3, r2
 802b24a:	d90e      	bls.n	802b26a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 802b24c:	68fb      	ldr	r3, [r7, #12]
 802b24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b250:	68fa      	ldr	r2, [r7, #12]
 802b252:	8b12      	ldrh	r2, [r2, #24]
 802b254:	1a9a      	subs	r2, r3, r2
 802b256:	68fb      	ldr	r3, [r7, #12]
 802b258:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 802b25a:	68fb      	ldr	r3, [r7, #12]
 802b25c:	69db      	ldr	r3, [r3, #28]
 802b25e:	68fa      	ldr	r2, [r7, #12]
 802b260:	8b12      	ldrh	r2, [r2, #24]
 802b262:	441a      	add	r2, r3
 802b264:	68fb      	ldr	r3, [r7, #12]
 802b266:	61da      	str	r2, [r3, #28]
 802b268:	e002      	b.n	802b270 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 802b26a:	68fb      	ldr	r3, [r7, #12]
 802b26c:	2200      	movs	r2, #0
 802b26e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 802b270:	68fb      	ldr	r3, [r7, #12]
 802b272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b274:	2b00      	cmp	r3, #0
 802b276:	d004      	beq.n	802b282 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802b278:	68fb      	ldr	r3, [r7, #12]
 802b27a:	2201      	movs	r2, #1
 802b27c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802b280:	e00e      	b.n	802b2a0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 802b282:	68fb      	ldr	r3, [r7, #12]
 802b284:	2200      	movs	r2, #0
 802b286:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 802b28a:	6878      	ldr	r0, [r7, #4]
 802b28c:	f000 f868 	bl	802b360 <USBH_CDC_TransmitCallback>
      break;
 802b290:	e006      	b.n	802b2a0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 802b292:	7afb      	ldrb	r3, [r7, #11]
 802b294:	2b02      	cmp	r3, #2
 802b296:	d103      	bne.n	802b2a0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802b298:	68fb      	ldr	r3, [r7, #12]
 802b29a:	2201      	movs	r2, #1
 802b29c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802b2a0:	bf00      	nop
  }
}
 802b2a2:	bf00      	nop
 802b2a4:	3710      	adds	r7, #16
 802b2a6:	46bd      	mov	sp, r7
 802b2a8:	bd80      	pop	{r7, pc}

0802b2aa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 802b2aa:	b580      	push	{r7, lr}
 802b2ac:	b086      	sub	sp, #24
 802b2ae:	af00      	add	r7, sp, #0
 802b2b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b2b2:	687b      	ldr	r3, [r7, #4]
 802b2b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b2b8:	69db      	ldr	r3, [r3, #28]
 802b2ba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802b2bc:	2300      	movs	r3, #0
 802b2be:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 802b2c0:	697b      	ldr	r3, [r7, #20]
 802b2c2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 802b2c6:	2b03      	cmp	r3, #3
 802b2c8:	d002      	beq.n	802b2d0 <CDC_ProcessReception+0x26>
 802b2ca:	2b04      	cmp	r3, #4
 802b2cc:	d00e      	beq.n	802b2ec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 802b2ce:	e043      	b.n	802b358 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 802b2d0:	697b      	ldr	r3, [r7, #20]
 802b2d2:	6a19      	ldr	r1, [r3, #32]
 802b2d4:	697b      	ldr	r3, [r7, #20]
 802b2d6:	8b5a      	ldrh	r2, [r3, #26]
 802b2d8:	697b      	ldr	r3, [r7, #20]
 802b2da:	7b1b      	ldrb	r3, [r3, #12]
 802b2dc:	6878      	ldr	r0, [r7, #4]
 802b2de:	f001 fbff 	bl	802cae0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 802b2e2:	697b      	ldr	r3, [r7, #20]
 802b2e4:	2204      	movs	r2, #4
 802b2e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802b2ea:	e035      	b.n	802b358 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 802b2ec:	697b      	ldr	r3, [r7, #20]
 802b2ee:	7b1b      	ldrb	r3, [r3, #12]
 802b2f0:	4619      	mov	r1, r3
 802b2f2:	6878      	ldr	r0, [r7, #4]
 802b2f4:	f001 ff04 	bl	802d100 <USBH_LL_GetURBState>
 802b2f8:	4603      	mov	r3, r0
 802b2fa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 802b2fc:	7cfb      	ldrb	r3, [r7, #19]
 802b2fe:	2b01      	cmp	r3, #1
 802b300:	d129      	bne.n	802b356 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 802b302:	697b      	ldr	r3, [r7, #20]
 802b304:	7b1b      	ldrb	r3, [r3, #12]
 802b306:	4619      	mov	r1, r3
 802b308:	6878      	ldr	r0, [r7, #4]
 802b30a:	f001 fe67 	bl	802cfdc <USBH_LL_GetLastXferSize>
 802b30e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 802b310:	697b      	ldr	r3, [r7, #20]
 802b312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b314:	68fa      	ldr	r2, [r7, #12]
 802b316:	429a      	cmp	r2, r3
 802b318:	d016      	beq.n	802b348 <CDC_ProcessReception+0x9e>
 802b31a:	697b      	ldr	r3, [r7, #20]
 802b31c:	8b5b      	ldrh	r3, [r3, #26]
 802b31e:	461a      	mov	r2, r3
 802b320:	68fb      	ldr	r3, [r7, #12]
 802b322:	4293      	cmp	r3, r2
 802b324:	d910      	bls.n	802b348 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 802b326:	697b      	ldr	r3, [r7, #20]
 802b328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802b32a:	68fb      	ldr	r3, [r7, #12]
 802b32c:	1ad2      	subs	r2, r2, r3
 802b32e:	697b      	ldr	r3, [r7, #20]
 802b330:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 802b332:	697b      	ldr	r3, [r7, #20]
 802b334:	6a1a      	ldr	r2, [r3, #32]
 802b336:	68fb      	ldr	r3, [r7, #12]
 802b338:	441a      	add	r2, r3
 802b33a:	697b      	ldr	r3, [r7, #20]
 802b33c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 802b33e:	697b      	ldr	r3, [r7, #20]
 802b340:	2203      	movs	r2, #3
 802b342:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802b346:	e006      	b.n	802b356 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 802b348:	697b      	ldr	r3, [r7, #20]
 802b34a:	2200      	movs	r2, #0
 802b34c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 802b350:	6878      	ldr	r0, [r7, #4]
 802b352:	f000 f80f 	bl	802b374 <USBH_CDC_ReceiveCallback>
      break;
 802b356:	bf00      	nop
  }
}
 802b358:	bf00      	nop
 802b35a:	3718      	adds	r7, #24
 802b35c:	46bd      	mov	sp, r7
 802b35e:	bd80      	pop	{r7, pc}

0802b360 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 802b360:	b480      	push	{r7}
 802b362:	b083      	sub	sp, #12
 802b364:	af00      	add	r7, sp, #0
 802b366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802b368:	bf00      	nop
 802b36a:	370c      	adds	r7, #12
 802b36c:	46bd      	mov	sp, r7
 802b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b372:	4770      	bx	lr

0802b374 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 802b374:	b480      	push	{r7}
 802b376:	b083      	sub	sp, #12
 802b378:	af00      	add	r7, sp, #0
 802b37a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802b37c:	bf00      	nop
 802b37e:	370c      	adds	r7, #12
 802b380:	46bd      	mov	sp, r7
 802b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b386:	4770      	bx	lr

0802b388 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 802b388:	b480      	push	{r7}
 802b38a:	b083      	sub	sp, #12
 802b38c:	af00      	add	r7, sp, #0
 802b38e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802b390:	bf00      	nop
 802b392:	370c      	adds	r7, #12
 802b394:	46bd      	mov	sp, r7
 802b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b39a:	4770      	bx	lr

0802b39c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 802b39c:	b580      	push	{r7, lr}
 802b39e:	b084      	sub	sp, #16
 802b3a0:	af00      	add	r7, sp, #0
 802b3a2:	60f8      	str	r0, [r7, #12]
 802b3a4:	60b9      	str	r1, [r7, #8]
 802b3a6:	4613      	mov	r3, r2
 802b3a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 802b3aa:	68fb      	ldr	r3, [r7, #12]
 802b3ac:	2b00      	cmp	r3, #0
 802b3ae:	d101      	bne.n	802b3b4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 802b3b0:	2302      	movs	r3, #2
 802b3b2:	e029      	b.n	802b408 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 802b3b4:	68fb      	ldr	r3, [r7, #12]
 802b3b6:	79fa      	ldrb	r2, [r7, #7]
 802b3b8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 802b3bc:	68fb      	ldr	r3, [r7, #12]
 802b3be:	2200      	movs	r2, #0
 802b3c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 802b3c4:	68fb      	ldr	r3, [r7, #12]
 802b3c6:	2200      	movs	r2, #0
 802b3c8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 802b3cc:	68f8      	ldr	r0, [r7, #12]
 802b3ce:	f000 f81f 	bl	802b410 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 802b3d2:	68fb      	ldr	r3, [r7, #12]
 802b3d4:	2200      	movs	r2, #0
 802b3d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 802b3da:	68fb      	ldr	r3, [r7, #12]
 802b3dc:	2200      	movs	r2, #0
 802b3de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802b3e2:	68fb      	ldr	r3, [r7, #12]
 802b3e4:	2200      	movs	r2, #0
 802b3e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802b3ea:	68fb      	ldr	r3, [r7, #12]
 802b3ec:	2200      	movs	r2, #0
 802b3ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 802b3f2:	68bb      	ldr	r3, [r7, #8]
 802b3f4:	2b00      	cmp	r3, #0
 802b3f6:	d003      	beq.n	802b400 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 802b3f8:	68fb      	ldr	r3, [r7, #12]
 802b3fa:	68ba      	ldr	r2, [r7, #8]
 802b3fc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 802b400:	68f8      	ldr	r0, [r7, #12]
 802b402:	f001 fd2d 	bl	802ce60 <USBH_LL_Init>

  return USBH_OK;
 802b406:	2300      	movs	r3, #0
}
 802b408:	4618      	mov	r0, r3
 802b40a:	3710      	adds	r7, #16
 802b40c:	46bd      	mov	sp, r7
 802b40e:	bd80      	pop	{r7, pc}

0802b410 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 802b410:	b480      	push	{r7}
 802b412:	b085      	sub	sp, #20
 802b414:	af00      	add	r7, sp, #0
 802b416:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 802b418:	2300      	movs	r3, #0
 802b41a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802b41c:	2300      	movs	r3, #0
 802b41e:	60fb      	str	r3, [r7, #12]
 802b420:	e009      	b.n	802b436 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 802b422:	687a      	ldr	r2, [r7, #4]
 802b424:	68fb      	ldr	r3, [r7, #12]
 802b426:	33e0      	adds	r3, #224	; 0xe0
 802b428:	009b      	lsls	r3, r3, #2
 802b42a:	4413      	add	r3, r2
 802b42c:	2200      	movs	r2, #0
 802b42e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802b430:	68fb      	ldr	r3, [r7, #12]
 802b432:	3301      	adds	r3, #1
 802b434:	60fb      	str	r3, [r7, #12]
 802b436:	68fb      	ldr	r3, [r7, #12]
 802b438:	2b0f      	cmp	r3, #15
 802b43a:	d9f2      	bls.n	802b422 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802b43c:	2300      	movs	r3, #0
 802b43e:	60fb      	str	r3, [r7, #12]
 802b440:	e009      	b.n	802b456 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 802b442:	687a      	ldr	r2, [r7, #4]
 802b444:	68fb      	ldr	r3, [r7, #12]
 802b446:	4413      	add	r3, r2
 802b448:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802b44c:	2200      	movs	r2, #0
 802b44e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802b450:	68fb      	ldr	r3, [r7, #12]
 802b452:	3301      	adds	r3, #1
 802b454:	60fb      	str	r3, [r7, #12]
 802b456:	68fb      	ldr	r3, [r7, #12]
 802b458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b45c:	d3f1      	bcc.n	802b442 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 802b45e:	687b      	ldr	r3, [r7, #4]
 802b460:	2200      	movs	r2, #0
 802b462:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 802b464:	687b      	ldr	r3, [r7, #4]
 802b466:	2200      	movs	r2, #0
 802b468:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 802b46a:	687b      	ldr	r3, [r7, #4]
 802b46c:	2201      	movs	r2, #1
 802b46e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 802b470:	687b      	ldr	r3, [r7, #4]
 802b472:	2200      	movs	r2, #0
 802b474:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 802b478:	687b      	ldr	r3, [r7, #4]
 802b47a:	2201      	movs	r2, #1
 802b47c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 802b47e:	687b      	ldr	r3, [r7, #4]
 802b480:	2240      	movs	r2, #64	; 0x40
 802b482:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 802b484:	687b      	ldr	r3, [r7, #4]
 802b486:	2200      	movs	r2, #0
 802b488:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 802b48a:	687b      	ldr	r3, [r7, #4]
 802b48c:	2200      	movs	r2, #0
 802b48e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 802b492:	687b      	ldr	r3, [r7, #4]
 802b494:	2201      	movs	r2, #1
 802b496:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 802b49a:	687b      	ldr	r3, [r7, #4]
 802b49c:	2200      	movs	r2, #0
 802b49e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 802b4a2:	687b      	ldr	r3, [r7, #4]
 802b4a4:	2200      	movs	r2, #0
 802b4a6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 802b4aa:	2300      	movs	r3, #0
}
 802b4ac:	4618      	mov	r0, r3
 802b4ae:	3714      	adds	r7, #20
 802b4b0:	46bd      	mov	sp, r7
 802b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b4b6:	4770      	bx	lr

0802b4b8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 802b4b8:	b480      	push	{r7}
 802b4ba:	b085      	sub	sp, #20
 802b4bc:	af00      	add	r7, sp, #0
 802b4be:	6078      	str	r0, [r7, #4]
 802b4c0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 802b4c2:	2300      	movs	r3, #0
 802b4c4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 802b4c6:	683b      	ldr	r3, [r7, #0]
 802b4c8:	2b00      	cmp	r3, #0
 802b4ca:	d016      	beq.n	802b4fa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 802b4cc:	687b      	ldr	r3, [r7, #4]
 802b4ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802b4d2:	2b00      	cmp	r3, #0
 802b4d4:	d10e      	bne.n	802b4f4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 802b4d6:	687b      	ldr	r3, [r7, #4]
 802b4d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802b4dc:	1c59      	adds	r1, r3, #1
 802b4de:	687a      	ldr	r2, [r7, #4]
 802b4e0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 802b4e4:	687a      	ldr	r2, [r7, #4]
 802b4e6:	33de      	adds	r3, #222	; 0xde
 802b4e8:	6839      	ldr	r1, [r7, #0]
 802b4ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 802b4ee:	2300      	movs	r3, #0
 802b4f0:	73fb      	strb	r3, [r7, #15]
 802b4f2:	e004      	b.n	802b4fe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 802b4f4:	2302      	movs	r3, #2
 802b4f6:	73fb      	strb	r3, [r7, #15]
 802b4f8:	e001      	b.n	802b4fe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 802b4fa:	2302      	movs	r3, #2
 802b4fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802b4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 802b500:	4618      	mov	r0, r3
 802b502:	3714      	adds	r7, #20
 802b504:	46bd      	mov	sp, r7
 802b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b50a:	4770      	bx	lr

0802b50c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 802b50c:	b480      	push	{r7}
 802b50e:	b085      	sub	sp, #20
 802b510:	af00      	add	r7, sp, #0
 802b512:	6078      	str	r0, [r7, #4]
 802b514:	460b      	mov	r3, r1
 802b516:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 802b518:	2300      	movs	r3, #0
 802b51a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 802b51c:	687b      	ldr	r3, [r7, #4]
 802b51e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 802b522:	78fa      	ldrb	r2, [r7, #3]
 802b524:	429a      	cmp	r2, r3
 802b526:	d204      	bcs.n	802b532 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 802b528:	687b      	ldr	r3, [r7, #4]
 802b52a:	78fa      	ldrb	r2, [r7, #3]
 802b52c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 802b530:	e001      	b.n	802b536 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 802b532:	2302      	movs	r3, #2
 802b534:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802b536:	7bfb      	ldrb	r3, [r7, #15]
}
 802b538:	4618      	mov	r0, r3
 802b53a:	3714      	adds	r7, #20
 802b53c:	46bd      	mov	sp, r7
 802b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b542:	4770      	bx	lr

0802b544 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 802b544:	b480      	push	{r7}
 802b546:	b087      	sub	sp, #28
 802b548:	af00      	add	r7, sp, #0
 802b54a:	6078      	str	r0, [r7, #4]
 802b54c:	4608      	mov	r0, r1
 802b54e:	4611      	mov	r1, r2
 802b550:	461a      	mov	r2, r3
 802b552:	4603      	mov	r3, r0
 802b554:	70fb      	strb	r3, [r7, #3]
 802b556:	460b      	mov	r3, r1
 802b558:	70bb      	strb	r3, [r7, #2]
 802b55a:	4613      	mov	r3, r2
 802b55c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 802b55e:	2300      	movs	r3, #0
 802b560:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 802b562:	2300      	movs	r3, #0
 802b564:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 802b566:	687b      	ldr	r3, [r7, #4]
 802b568:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802b56c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802b56e:	e025      	b.n	802b5bc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 802b570:	7dfb      	ldrb	r3, [r7, #23]
 802b572:	221a      	movs	r2, #26
 802b574:	fb02 f303 	mul.w	r3, r2, r3
 802b578:	3308      	adds	r3, #8
 802b57a:	68fa      	ldr	r2, [r7, #12]
 802b57c:	4413      	add	r3, r2
 802b57e:	3302      	adds	r3, #2
 802b580:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802b582:	693b      	ldr	r3, [r7, #16]
 802b584:	795b      	ldrb	r3, [r3, #5]
 802b586:	78fa      	ldrb	r2, [r7, #3]
 802b588:	429a      	cmp	r2, r3
 802b58a:	d002      	beq.n	802b592 <USBH_FindInterface+0x4e>
 802b58c:	78fb      	ldrb	r3, [r7, #3]
 802b58e:	2bff      	cmp	r3, #255	; 0xff
 802b590:	d111      	bne.n	802b5b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802b592:	693b      	ldr	r3, [r7, #16]
 802b594:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802b596:	78ba      	ldrb	r2, [r7, #2]
 802b598:	429a      	cmp	r2, r3
 802b59a:	d002      	beq.n	802b5a2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802b59c:	78bb      	ldrb	r3, [r7, #2]
 802b59e:	2bff      	cmp	r3, #255	; 0xff
 802b5a0:	d109      	bne.n	802b5b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802b5a2:	693b      	ldr	r3, [r7, #16]
 802b5a4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802b5a6:	787a      	ldrb	r2, [r7, #1]
 802b5a8:	429a      	cmp	r2, r3
 802b5aa:	d002      	beq.n	802b5b2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802b5ac:	787b      	ldrb	r3, [r7, #1]
 802b5ae:	2bff      	cmp	r3, #255	; 0xff
 802b5b0:	d101      	bne.n	802b5b6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 802b5b2:	7dfb      	ldrb	r3, [r7, #23]
 802b5b4:	e006      	b.n	802b5c4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 802b5b6:	7dfb      	ldrb	r3, [r7, #23]
 802b5b8:	3301      	adds	r3, #1
 802b5ba:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802b5bc:	7dfb      	ldrb	r3, [r7, #23]
 802b5be:	2b01      	cmp	r3, #1
 802b5c0:	d9d6      	bls.n	802b570 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 802b5c2:	23ff      	movs	r3, #255	; 0xff
}
 802b5c4:	4618      	mov	r0, r3
 802b5c6:	371c      	adds	r7, #28
 802b5c8:	46bd      	mov	sp, r7
 802b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b5ce:	4770      	bx	lr

0802b5d0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 802b5d0:	b580      	push	{r7, lr}
 802b5d2:	b082      	sub	sp, #8
 802b5d4:	af00      	add	r7, sp, #0
 802b5d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 802b5d8:	6878      	ldr	r0, [r7, #4]
 802b5da:	f001 fc87 	bl	802ceec <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 802b5de:	2101      	movs	r1, #1
 802b5e0:	6878      	ldr	r0, [r7, #4]
 802b5e2:	f001 fda0 	bl	802d126 <USBH_LL_DriverVBUS>

  return USBH_OK;
 802b5e6:	2300      	movs	r3, #0
}
 802b5e8:	4618      	mov	r0, r3
 802b5ea:	3708      	adds	r7, #8
 802b5ec:	46bd      	mov	sp, r7
 802b5ee:	bd80      	pop	{r7, pc}

0802b5f0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 802b5f0:	b580      	push	{r7, lr}
 802b5f2:	b088      	sub	sp, #32
 802b5f4:	af04      	add	r7, sp, #16
 802b5f6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 802b5f8:	2302      	movs	r3, #2
 802b5fa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 802b5fc:	2300      	movs	r3, #0
 802b5fe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 802b600:	687b      	ldr	r3, [r7, #4]
 802b602:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 802b606:	b2db      	uxtb	r3, r3
 802b608:	2b01      	cmp	r3, #1
 802b60a:	d102      	bne.n	802b612 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 802b60c:	687b      	ldr	r3, [r7, #4]
 802b60e:	2203      	movs	r2, #3
 802b610:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 802b612:	687b      	ldr	r3, [r7, #4]
 802b614:	781b      	ldrb	r3, [r3, #0]
 802b616:	b2db      	uxtb	r3, r3
 802b618:	2b0b      	cmp	r3, #11
 802b61a:	f200 81be 	bhi.w	802b99a <USBH_Process+0x3aa>
 802b61e:	a201      	add	r2, pc, #4	; (adr r2, 802b624 <USBH_Process+0x34>)
 802b620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b624:	0802b655 	.word	0x0802b655
 802b628:	0802b687 	.word	0x0802b687
 802b62c:	0802b6ef 	.word	0x0802b6ef
 802b630:	0802b935 	.word	0x0802b935
 802b634:	0802b99b 	.word	0x0802b99b
 802b638:	0802b793 	.word	0x0802b793
 802b63c:	0802b8db 	.word	0x0802b8db
 802b640:	0802b7c9 	.word	0x0802b7c9
 802b644:	0802b7e9 	.word	0x0802b7e9
 802b648:	0802b809 	.word	0x0802b809
 802b64c:	0802b84d 	.word	0x0802b84d
 802b650:	0802b91d 	.word	0x0802b91d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 802b654:	687b      	ldr	r3, [r7, #4]
 802b656:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802b65a:	b2db      	uxtb	r3, r3
 802b65c:	2b00      	cmp	r3, #0
 802b65e:	f000 819e 	beq.w	802b99e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 802b662:	687b      	ldr	r3, [r7, #4]
 802b664:	2201      	movs	r2, #1
 802b666:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 802b668:	20c8      	movs	r0, #200	; 0xc8
 802b66a:	f001 fda3 	bl	802d1b4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 802b66e:	6878      	ldr	r0, [r7, #4]
 802b670:	f001 fc99 	bl	802cfa6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 802b674:	687b      	ldr	r3, [r7, #4]
 802b676:	2200      	movs	r2, #0
 802b678:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 802b67c:	687b      	ldr	r3, [r7, #4]
 802b67e:	2200      	movs	r2, #0
 802b680:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802b684:	e18b      	b.n	802b99e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 802b686:	687b      	ldr	r3, [r7, #4]
 802b688:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 802b68c:	2b01      	cmp	r3, #1
 802b68e:	d107      	bne.n	802b6a0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 802b690:	687b      	ldr	r3, [r7, #4]
 802b692:	2200      	movs	r2, #0
 802b694:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 802b698:	687b      	ldr	r3, [r7, #4]
 802b69a:	2202      	movs	r2, #2
 802b69c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802b69e:	e18d      	b.n	802b9bc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 802b6a0:	687b      	ldr	r3, [r7, #4]
 802b6a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802b6a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b6aa:	d914      	bls.n	802b6d6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 802b6ac:	687b      	ldr	r3, [r7, #4]
 802b6ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802b6b2:	3301      	adds	r3, #1
 802b6b4:	b2da      	uxtb	r2, r3
 802b6b6:	687b      	ldr	r3, [r7, #4]
 802b6b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 802b6bc:	687b      	ldr	r3, [r7, #4]
 802b6be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802b6c2:	2b03      	cmp	r3, #3
 802b6c4:	d903      	bls.n	802b6ce <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 802b6c6:	687b      	ldr	r3, [r7, #4]
 802b6c8:	220d      	movs	r2, #13
 802b6ca:	701a      	strb	r2, [r3, #0]
      break;
 802b6cc:	e176      	b.n	802b9bc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 802b6ce:	687b      	ldr	r3, [r7, #4]
 802b6d0:	2200      	movs	r2, #0
 802b6d2:	701a      	strb	r2, [r3, #0]
      break;
 802b6d4:	e172      	b.n	802b9bc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 802b6d6:	687b      	ldr	r3, [r7, #4]
 802b6d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802b6dc:	f103 020a 	add.w	r2, r3, #10
 802b6e0:	687b      	ldr	r3, [r7, #4]
 802b6e2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 802b6e6:	200a      	movs	r0, #10
 802b6e8:	f001 fd64 	bl	802d1b4 <USBH_Delay>
      break;
 802b6ec:	e166      	b.n	802b9bc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 802b6ee:	687b      	ldr	r3, [r7, #4]
 802b6f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802b6f4:	2b00      	cmp	r3, #0
 802b6f6:	d005      	beq.n	802b704 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 802b6f8:	687b      	ldr	r3, [r7, #4]
 802b6fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802b6fe:	2104      	movs	r1, #4
 802b700:	6878      	ldr	r0, [r7, #4]
 802b702:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 802b704:	2064      	movs	r0, #100	; 0x64
 802b706:	f001 fd55 	bl	802d1b4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 802b70a:	6878      	ldr	r0, [r7, #4]
 802b70c:	f001 fc24 	bl	802cf58 <USBH_LL_GetSpeed>
 802b710:	4603      	mov	r3, r0
 802b712:	461a      	mov	r2, r3
 802b714:	687b      	ldr	r3, [r7, #4]
 802b716:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 802b71a:	687b      	ldr	r3, [r7, #4]
 802b71c:	2205      	movs	r2, #5
 802b71e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 802b720:	2100      	movs	r1, #0
 802b722:	6878      	ldr	r0, [r7, #4]
 802b724:	f001 fa29 	bl	802cb7a <USBH_AllocPipe>
 802b728:	4603      	mov	r3, r0
 802b72a:	461a      	mov	r2, r3
 802b72c:	687b      	ldr	r3, [r7, #4]
 802b72e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 802b730:	2180      	movs	r1, #128	; 0x80
 802b732:	6878      	ldr	r0, [r7, #4]
 802b734:	f001 fa21 	bl	802cb7a <USBH_AllocPipe>
 802b738:	4603      	mov	r3, r0
 802b73a:	461a      	mov	r2, r3
 802b73c:	687b      	ldr	r3, [r7, #4]
 802b73e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802b740:	687b      	ldr	r3, [r7, #4]
 802b742:	7919      	ldrb	r1, [r3, #4]
 802b744:	687b      	ldr	r3, [r7, #4]
 802b746:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802b74a:	687b      	ldr	r3, [r7, #4]
 802b74c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802b750:	687a      	ldr	r2, [r7, #4]
 802b752:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802b754:	b292      	uxth	r2, r2
 802b756:	9202      	str	r2, [sp, #8]
 802b758:	2200      	movs	r2, #0
 802b75a:	9201      	str	r2, [sp, #4]
 802b75c:	9300      	str	r3, [sp, #0]
 802b75e:	4603      	mov	r3, r0
 802b760:	2280      	movs	r2, #128	; 0x80
 802b762:	6878      	ldr	r0, [r7, #4]
 802b764:	f001 f9da 	bl	802cb1c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802b768:	687b      	ldr	r3, [r7, #4]
 802b76a:	7959      	ldrb	r1, [r3, #5]
 802b76c:	687b      	ldr	r3, [r7, #4]
 802b76e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802b772:	687b      	ldr	r3, [r7, #4]
 802b774:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802b778:	687a      	ldr	r2, [r7, #4]
 802b77a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802b77c:	b292      	uxth	r2, r2
 802b77e:	9202      	str	r2, [sp, #8]
 802b780:	2200      	movs	r2, #0
 802b782:	9201      	str	r2, [sp, #4]
 802b784:	9300      	str	r3, [sp, #0]
 802b786:	4603      	mov	r3, r0
 802b788:	2200      	movs	r2, #0
 802b78a:	6878      	ldr	r0, [r7, #4]
 802b78c:	f001 f9c6 	bl	802cb1c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802b790:	e114      	b.n	802b9bc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 802b792:	6878      	ldr	r0, [r7, #4]
 802b794:	f000 f918 	bl	802b9c8 <USBH_HandleEnum>
 802b798:	4603      	mov	r3, r0
 802b79a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 802b79c:	7bbb      	ldrb	r3, [r7, #14]
 802b79e:	b2db      	uxtb	r3, r3
 802b7a0:	2b00      	cmp	r3, #0
 802b7a2:	f040 80fe 	bne.w	802b9a2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 802b7a6:	687b      	ldr	r3, [r7, #4]
 802b7a8:	2200      	movs	r2, #0
 802b7aa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 802b7ae:	687b      	ldr	r3, [r7, #4]
 802b7b0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 802b7b4:	2b01      	cmp	r3, #1
 802b7b6:	d103      	bne.n	802b7c0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 802b7b8:	687b      	ldr	r3, [r7, #4]
 802b7ba:	2208      	movs	r2, #8
 802b7bc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802b7be:	e0f0      	b.n	802b9a2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 802b7c0:	687b      	ldr	r3, [r7, #4]
 802b7c2:	2207      	movs	r2, #7
 802b7c4:	701a      	strb	r2, [r3, #0]
      break;
 802b7c6:	e0ec      	b.n	802b9a2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 802b7c8:	687b      	ldr	r3, [r7, #4]
 802b7ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802b7ce:	2b00      	cmp	r3, #0
 802b7d0:	f000 80e9 	beq.w	802b9a6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 802b7d4:	687b      	ldr	r3, [r7, #4]
 802b7d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802b7da:	2101      	movs	r1, #1
 802b7dc:	6878      	ldr	r0, [r7, #4]
 802b7de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 802b7e0:	687b      	ldr	r3, [r7, #4]
 802b7e2:	2208      	movs	r2, #8
 802b7e4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 802b7e6:	e0de      	b.n	802b9a6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 802b7e8:	687b      	ldr	r3, [r7, #4]
 802b7ea:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 802b7ee:	b29b      	uxth	r3, r3
 802b7f0:	4619      	mov	r1, r3
 802b7f2:	6878      	ldr	r0, [r7, #4]
 802b7f4:	f000 fc2c 	bl	802c050 <USBH_SetCfg>
 802b7f8:	4603      	mov	r3, r0
 802b7fa:	2b00      	cmp	r3, #0
 802b7fc:	f040 80d5 	bne.w	802b9aa <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 802b800:	687b      	ldr	r3, [r7, #4]
 802b802:	2209      	movs	r2, #9
 802b804:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802b806:	e0d0      	b.n	802b9aa <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 802b808:	687b      	ldr	r3, [r7, #4]
 802b80a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 802b80e:	f003 0320 	and.w	r3, r3, #32
 802b812:	2b00      	cmp	r3, #0
 802b814:	d016      	beq.n	802b844 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 802b816:	2101      	movs	r1, #1
 802b818:	6878      	ldr	r0, [r7, #4]
 802b81a:	f000 fc3c 	bl	802c096 <USBH_SetFeature>
 802b81e:	4603      	mov	r3, r0
 802b820:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802b822:	7bbb      	ldrb	r3, [r7, #14]
 802b824:	b2db      	uxtb	r3, r3
 802b826:	2b00      	cmp	r3, #0
 802b828:	d103      	bne.n	802b832 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 802b82a:	687b      	ldr	r3, [r7, #4]
 802b82c:	220a      	movs	r2, #10
 802b82e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802b830:	e0bd      	b.n	802b9ae <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 802b832:	7bbb      	ldrb	r3, [r7, #14]
 802b834:	b2db      	uxtb	r3, r3
 802b836:	2b03      	cmp	r3, #3
 802b838:	f040 80b9 	bne.w	802b9ae <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 802b83c:	687b      	ldr	r3, [r7, #4]
 802b83e:	220a      	movs	r2, #10
 802b840:	701a      	strb	r2, [r3, #0]
      break;
 802b842:	e0b4      	b.n	802b9ae <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 802b844:	687b      	ldr	r3, [r7, #4]
 802b846:	220a      	movs	r2, #10
 802b848:	701a      	strb	r2, [r3, #0]
      break;
 802b84a:	e0b0      	b.n	802b9ae <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 802b84c:	687b      	ldr	r3, [r7, #4]
 802b84e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802b852:	2b00      	cmp	r3, #0
 802b854:	f000 80ad 	beq.w	802b9b2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 802b858:	687b      	ldr	r3, [r7, #4]
 802b85a:	2200      	movs	r2, #0
 802b85c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802b860:	2300      	movs	r3, #0
 802b862:	73fb      	strb	r3, [r7, #15]
 802b864:	e016      	b.n	802b894 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 802b866:	7bfa      	ldrb	r2, [r7, #15]
 802b868:	687b      	ldr	r3, [r7, #4]
 802b86a:	32de      	adds	r2, #222	; 0xde
 802b86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802b870:	791a      	ldrb	r2, [r3, #4]
 802b872:	687b      	ldr	r3, [r7, #4]
 802b874:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 802b878:	429a      	cmp	r2, r3
 802b87a:	d108      	bne.n	802b88e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 802b87c:	7bfa      	ldrb	r2, [r7, #15]
 802b87e:	687b      	ldr	r3, [r7, #4]
 802b880:	32de      	adds	r2, #222	; 0xde
 802b882:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802b886:	687b      	ldr	r3, [r7, #4]
 802b888:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 802b88c:	e005      	b.n	802b89a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802b88e:	7bfb      	ldrb	r3, [r7, #15]
 802b890:	3301      	adds	r3, #1
 802b892:	73fb      	strb	r3, [r7, #15]
 802b894:	7bfb      	ldrb	r3, [r7, #15]
 802b896:	2b00      	cmp	r3, #0
 802b898:	d0e5      	beq.n	802b866 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 802b89a:	687b      	ldr	r3, [r7, #4]
 802b89c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b8a0:	2b00      	cmp	r3, #0
 802b8a2:	d016      	beq.n	802b8d2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 802b8a4:	687b      	ldr	r3, [r7, #4]
 802b8a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b8aa:	689b      	ldr	r3, [r3, #8]
 802b8ac:	6878      	ldr	r0, [r7, #4]
 802b8ae:	4798      	blx	r3
 802b8b0:	4603      	mov	r3, r0
 802b8b2:	2b00      	cmp	r3, #0
 802b8b4:	d109      	bne.n	802b8ca <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 802b8b6:	687b      	ldr	r3, [r7, #4]
 802b8b8:	2206      	movs	r2, #6
 802b8ba:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 802b8bc:	687b      	ldr	r3, [r7, #4]
 802b8be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802b8c2:	2103      	movs	r1, #3
 802b8c4:	6878      	ldr	r0, [r7, #4]
 802b8c6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802b8c8:	e073      	b.n	802b9b2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 802b8ca:	687b      	ldr	r3, [r7, #4]
 802b8cc:	220d      	movs	r2, #13
 802b8ce:	701a      	strb	r2, [r3, #0]
      break;
 802b8d0:	e06f      	b.n	802b9b2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 802b8d2:	687b      	ldr	r3, [r7, #4]
 802b8d4:	220d      	movs	r2, #13
 802b8d6:	701a      	strb	r2, [r3, #0]
      break;
 802b8d8:	e06b      	b.n	802b9b2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 802b8da:	687b      	ldr	r3, [r7, #4]
 802b8dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b8e0:	2b00      	cmp	r3, #0
 802b8e2:	d017      	beq.n	802b914 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 802b8e4:	687b      	ldr	r3, [r7, #4]
 802b8e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b8ea:	691b      	ldr	r3, [r3, #16]
 802b8ec:	6878      	ldr	r0, [r7, #4]
 802b8ee:	4798      	blx	r3
 802b8f0:	4603      	mov	r3, r0
 802b8f2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802b8f4:	7bbb      	ldrb	r3, [r7, #14]
 802b8f6:	b2db      	uxtb	r3, r3
 802b8f8:	2b00      	cmp	r3, #0
 802b8fa:	d103      	bne.n	802b904 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 802b8fc:	687b      	ldr	r3, [r7, #4]
 802b8fe:	220b      	movs	r2, #11
 802b900:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802b902:	e058      	b.n	802b9b6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 802b904:	7bbb      	ldrb	r3, [r7, #14]
 802b906:	b2db      	uxtb	r3, r3
 802b908:	2b02      	cmp	r3, #2
 802b90a:	d154      	bne.n	802b9b6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 802b90c:	687b      	ldr	r3, [r7, #4]
 802b90e:	220d      	movs	r2, #13
 802b910:	701a      	strb	r2, [r3, #0]
      break;
 802b912:	e050      	b.n	802b9b6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 802b914:	687b      	ldr	r3, [r7, #4]
 802b916:	220d      	movs	r2, #13
 802b918:	701a      	strb	r2, [r3, #0]
      break;
 802b91a:	e04c      	b.n	802b9b6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 802b91c:	687b      	ldr	r3, [r7, #4]
 802b91e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b922:	2b00      	cmp	r3, #0
 802b924:	d049      	beq.n	802b9ba <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 802b926:	687b      	ldr	r3, [r7, #4]
 802b928:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b92c:	695b      	ldr	r3, [r3, #20]
 802b92e:	6878      	ldr	r0, [r7, #4]
 802b930:	4798      	blx	r3
      }
      break;
 802b932:	e042      	b.n	802b9ba <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 802b934:	687b      	ldr	r3, [r7, #4]
 802b936:	2200      	movs	r2, #0
 802b938:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 802b93c:	6878      	ldr	r0, [r7, #4]
 802b93e:	f7ff fd67 	bl	802b410 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 802b942:	687b      	ldr	r3, [r7, #4]
 802b944:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b948:	2b00      	cmp	r3, #0
 802b94a:	d009      	beq.n	802b960 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 802b94c:	687b      	ldr	r3, [r7, #4]
 802b94e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b952:	68db      	ldr	r3, [r3, #12]
 802b954:	6878      	ldr	r0, [r7, #4]
 802b956:	4798      	blx	r3
        phost->pActiveClass = NULL;
 802b958:	687b      	ldr	r3, [r7, #4]
 802b95a:	2200      	movs	r2, #0
 802b95c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 802b960:	687b      	ldr	r3, [r7, #4]
 802b962:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802b966:	2b00      	cmp	r3, #0
 802b968:	d005      	beq.n	802b976 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 802b96a:	687b      	ldr	r3, [r7, #4]
 802b96c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802b970:	2105      	movs	r1, #5
 802b972:	6878      	ldr	r0, [r7, #4]
 802b974:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 802b976:	687b      	ldr	r3, [r7, #4]
 802b978:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 802b97c:	b2db      	uxtb	r3, r3
 802b97e:	2b01      	cmp	r3, #1
 802b980:	d107      	bne.n	802b992 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 802b982:	687b      	ldr	r3, [r7, #4]
 802b984:	2200      	movs	r2, #0
 802b986:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 802b98a:	6878      	ldr	r0, [r7, #4]
 802b98c:	f7ff fe20 	bl	802b5d0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802b990:	e014      	b.n	802b9bc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 802b992:	6878      	ldr	r0, [r7, #4]
 802b994:	f001 faaa 	bl	802ceec <USBH_LL_Start>
      break;
 802b998:	e010      	b.n	802b9bc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 802b99a:	bf00      	nop
 802b99c:	e00e      	b.n	802b9bc <USBH_Process+0x3cc>
      break;
 802b99e:	bf00      	nop
 802b9a0:	e00c      	b.n	802b9bc <USBH_Process+0x3cc>
      break;
 802b9a2:	bf00      	nop
 802b9a4:	e00a      	b.n	802b9bc <USBH_Process+0x3cc>
    break;
 802b9a6:	bf00      	nop
 802b9a8:	e008      	b.n	802b9bc <USBH_Process+0x3cc>
      break;
 802b9aa:	bf00      	nop
 802b9ac:	e006      	b.n	802b9bc <USBH_Process+0x3cc>
      break;
 802b9ae:	bf00      	nop
 802b9b0:	e004      	b.n	802b9bc <USBH_Process+0x3cc>
      break;
 802b9b2:	bf00      	nop
 802b9b4:	e002      	b.n	802b9bc <USBH_Process+0x3cc>
      break;
 802b9b6:	bf00      	nop
 802b9b8:	e000      	b.n	802b9bc <USBH_Process+0x3cc>
      break;
 802b9ba:	bf00      	nop
  }
  return USBH_OK;
 802b9bc:	2300      	movs	r3, #0
}
 802b9be:	4618      	mov	r0, r3
 802b9c0:	3710      	adds	r7, #16
 802b9c2:	46bd      	mov	sp, r7
 802b9c4:	bd80      	pop	{r7, pc}
 802b9c6:	bf00      	nop

0802b9c8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 802b9c8:	b580      	push	{r7, lr}
 802b9ca:	b088      	sub	sp, #32
 802b9cc:	af04      	add	r7, sp, #16
 802b9ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 802b9d0:	2301      	movs	r3, #1
 802b9d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 802b9d4:	2301      	movs	r3, #1
 802b9d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 802b9d8:	687b      	ldr	r3, [r7, #4]
 802b9da:	785b      	ldrb	r3, [r3, #1]
 802b9dc:	2b07      	cmp	r3, #7
 802b9de:	f200 81c1 	bhi.w	802bd64 <USBH_HandleEnum+0x39c>
 802b9e2:	a201      	add	r2, pc, #4	; (adr r2, 802b9e8 <USBH_HandleEnum+0x20>)
 802b9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b9e8:	0802ba09 	.word	0x0802ba09
 802b9ec:	0802bac7 	.word	0x0802bac7
 802b9f0:	0802bb31 	.word	0x0802bb31
 802b9f4:	0802bbbf 	.word	0x0802bbbf
 802b9f8:	0802bc29 	.word	0x0802bc29
 802b9fc:	0802bc99 	.word	0x0802bc99
 802ba00:	0802bcdf 	.word	0x0802bcdf
 802ba04:	0802bd25 	.word	0x0802bd25
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 802ba08:	2108      	movs	r1, #8
 802ba0a:	6878      	ldr	r0, [r7, #4]
 802ba0c:	f000 fa50 	bl	802beb0 <USBH_Get_DevDesc>
 802ba10:	4603      	mov	r3, r0
 802ba12:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802ba14:	7bbb      	ldrb	r3, [r7, #14]
 802ba16:	2b00      	cmp	r3, #0
 802ba18:	d130      	bne.n	802ba7c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 802ba1a:	687b      	ldr	r3, [r7, #4]
 802ba1c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 802ba20:	687b      	ldr	r3, [r7, #4]
 802ba22:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 802ba24:	687b      	ldr	r3, [r7, #4]
 802ba26:	2201      	movs	r2, #1
 802ba28:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802ba2a:	687b      	ldr	r3, [r7, #4]
 802ba2c:	7919      	ldrb	r1, [r3, #4]
 802ba2e:	687b      	ldr	r3, [r7, #4]
 802ba30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802ba34:	687b      	ldr	r3, [r7, #4]
 802ba36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802ba3a:	687a      	ldr	r2, [r7, #4]
 802ba3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802ba3e:	b292      	uxth	r2, r2
 802ba40:	9202      	str	r2, [sp, #8]
 802ba42:	2200      	movs	r2, #0
 802ba44:	9201      	str	r2, [sp, #4]
 802ba46:	9300      	str	r3, [sp, #0]
 802ba48:	4603      	mov	r3, r0
 802ba4a:	2280      	movs	r2, #128	; 0x80
 802ba4c:	6878      	ldr	r0, [r7, #4]
 802ba4e:	f001 f865 	bl	802cb1c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802ba52:	687b      	ldr	r3, [r7, #4]
 802ba54:	7959      	ldrb	r1, [r3, #5]
 802ba56:	687b      	ldr	r3, [r7, #4]
 802ba58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802ba5c:	687b      	ldr	r3, [r7, #4]
 802ba5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802ba62:	687a      	ldr	r2, [r7, #4]
 802ba64:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802ba66:	b292      	uxth	r2, r2
 802ba68:	9202      	str	r2, [sp, #8]
 802ba6a:	2200      	movs	r2, #0
 802ba6c:	9201      	str	r2, [sp, #4]
 802ba6e:	9300      	str	r3, [sp, #0]
 802ba70:	4603      	mov	r3, r0
 802ba72:	2200      	movs	r2, #0
 802ba74:	6878      	ldr	r0, [r7, #4]
 802ba76:	f001 f851 	bl	802cb1c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802ba7a:	e175      	b.n	802bd68 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ba7c:	7bbb      	ldrb	r3, [r7, #14]
 802ba7e:	2b03      	cmp	r3, #3
 802ba80:	f040 8172 	bne.w	802bd68 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 802ba84:	687b      	ldr	r3, [r7, #4]
 802ba86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ba8a:	3301      	adds	r3, #1
 802ba8c:	b2da      	uxtb	r2, r3
 802ba8e:	687b      	ldr	r3, [r7, #4]
 802ba90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802ba94:	687b      	ldr	r3, [r7, #4]
 802ba96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ba9a:	2b03      	cmp	r3, #3
 802ba9c:	d903      	bls.n	802baa6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 802ba9e:	687b      	ldr	r3, [r7, #4]
 802baa0:	220d      	movs	r2, #13
 802baa2:	701a      	strb	r2, [r3, #0]
      break;
 802baa4:	e160      	b.n	802bd68 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802baa6:	687b      	ldr	r3, [r7, #4]
 802baa8:	795b      	ldrb	r3, [r3, #5]
 802baaa:	4619      	mov	r1, r3
 802baac:	6878      	ldr	r0, [r7, #4]
 802baae:	f001 f885 	bl	802cbbc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802bab2:	687b      	ldr	r3, [r7, #4]
 802bab4:	791b      	ldrb	r3, [r3, #4]
 802bab6:	4619      	mov	r1, r3
 802bab8:	6878      	ldr	r0, [r7, #4]
 802baba:	f001 f87f 	bl	802cbbc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 802babe:	687b      	ldr	r3, [r7, #4]
 802bac0:	2200      	movs	r2, #0
 802bac2:	701a      	strb	r2, [r3, #0]
      break;
 802bac4:	e150      	b.n	802bd68 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 802bac6:	2112      	movs	r1, #18
 802bac8:	6878      	ldr	r0, [r7, #4]
 802baca:	f000 f9f1 	bl	802beb0 <USBH_Get_DevDesc>
 802bace:	4603      	mov	r3, r0
 802bad0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802bad2:	7bbb      	ldrb	r3, [r7, #14]
 802bad4:	2b00      	cmp	r3, #0
 802bad6:	d103      	bne.n	802bae0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 802bad8:	687b      	ldr	r3, [r7, #4]
 802bada:	2202      	movs	r2, #2
 802badc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802bade:	e145      	b.n	802bd6c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bae0:	7bbb      	ldrb	r3, [r7, #14]
 802bae2:	2b03      	cmp	r3, #3
 802bae4:	f040 8142 	bne.w	802bd6c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 802bae8:	687b      	ldr	r3, [r7, #4]
 802baea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802baee:	3301      	adds	r3, #1
 802baf0:	b2da      	uxtb	r2, r3
 802baf2:	687b      	ldr	r3, [r7, #4]
 802baf4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802baf8:	687b      	ldr	r3, [r7, #4]
 802bafa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bafe:	2b03      	cmp	r3, #3
 802bb00:	d903      	bls.n	802bb0a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 802bb02:	687b      	ldr	r3, [r7, #4]
 802bb04:	220d      	movs	r2, #13
 802bb06:	701a      	strb	r2, [r3, #0]
      break;
 802bb08:	e130      	b.n	802bd6c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802bb0a:	687b      	ldr	r3, [r7, #4]
 802bb0c:	795b      	ldrb	r3, [r3, #5]
 802bb0e:	4619      	mov	r1, r3
 802bb10:	6878      	ldr	r0, [r7, #4]
 802bb12:	f001 f853 	bl	802cbbc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802bb16:	687b      	ldr	r3, [r7, #4]
 802bb18:	791b      	ldrb	r3, [r3, #4]
 802bb1a:	4619      	mov	r1, r3
 802bb1c:	6878      	ldr	r0, [r7, #4]
 802bb1e:	f001 f84d 	bl	802cbbc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802bb22:	687b      	ldr	r3, [r7, #4]
 802bb24:	2200      	movs	r2, #0
 802bb26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802bb28:	687b      	ldr	r3, [r7, #4]
 802bb2a:	2200      	movs	r2, #0
 802bb2c:	701a      	strb	r2, [r3, #0]
      break;
 802bb2e:	e11d      	b.n	802bd6c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 802bb30:	2101      	movs	r1, #1
 802bb32:	6878      	ldr	r0, [r7, #4]
 802bb34:	f000 fa68 	bl	802c008 <USBH_SetAddress>
 802bb38:	4603      	mov	r3, r0
 802bb3a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802bb3c:	7bbb      	ldrb	r3, [r7, #14]
 802bb3e:	2b00      	cmp	r3, #0
 802bb40:	d132      	bne.n	802bba8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 802bb42:	2002      	movs	r0, #2
 802bb44:	f001 fb36 	bl	802d1b4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 802bb48:	687b      	ldr	r3, [r7, #4]
 802bb4a:	2201      	movs	r2, #1
 802bb4c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 802bb50:	687b      	ldr	r3, [r7, #4]
 802bb52:	2203      	movs	r2, #3
 802bb54:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802bb56:	687b      	ldr	r3, [r7, #4]
 802bb58:	7919      	ldrb	r1, [r3, #4]
 802bb5a:	687b      	ldr	r3, [r7, #4]
 802bb5c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bb60:	687b      	ldr	r3, [r7, #4]
 802bb62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802bb66:	687a      	ldr	r2, [r7, #4]
 802bb68:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802bb6a:	b292      	uxth	r2, r2
 802bb6c:	9202      	str	r2, [sp, #8]
 802bb6e:	2200      	movs	r2, #0
 802bb70:	9201      	str	r2, [sp, #4]
 802bb72:	9300      	str	r3, [sp, #0]
 802bb74:	4603      	mov	r3, r0
 802bb76:	2280      	movs	r2, #128	; 0x80
 802bb78:	6878      	ldr	r0, [r7, #4]
 802bb7a:	f000 ffcf 	bl	802cb1c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802bb7e:	687b      	ldr	r3, [r7, #4]
 802bb80:	7959      	ldrb	r1, [r3, #5]
 802bb82:	687b      	ldr	r3, [r7, #4]
 802bb84:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bb88:	687b      	ldr	r3, [r7, #4]
 802bb8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802bb8e:	687a      	ldr	r2, [r7, #4]
 802bb90:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802bb92:	b292      	uxth	r2, r2
 802bb94:	9202      	str	r2, [sp, #8]
 802bb96:	2200      	movs	r2, #0
 802bb98:	9201      	str	r2, [sp, #4]
 802bb9a:	9300      	str	r3, [sp, #0]
 802bb9c:	4603      	mov	r3, r0
 802bb9e:	2200      	movs	r2, #0
 802bba0:	6878      	ldr	r0, [r7, #4]
 802bba2:	f000 ffbb 	bl	802cb1c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802bba6:	e0e3      	b.n	802bd70 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bba8:	7bbb      	ldrb	r3, [r7, #14]
 802bbaa:	2b03      	cmp	r3, #3
 802bbac:	f040 80e0 	bne.w	802bd70 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 802bbb0:	687b      	ldr	r3, [r7, #4]
 802bbb2:	220d      	movs	r2, #13
 802bbb4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 802bbb6:	687b      	ldr	r3, [r7, #4]
 802bbb8:	2200      	movs	r2, #0
 802bbba:	705a      	strb	r2, [r3, #1]
      break;
 802bbbc:	e0d8      	b.n	802bd70 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 802bbbe:	2109      	movs	r1, #9
 802bbc0:	6878      	ldr	r0, [r7, #4]
 802bbc2:	f000 f99d 	bl	802bf00 <USBH_Get_CfgDesc>
 802bbc6:	4603      	mov	r3, r0
 802bbc8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802bbca:	7bbb      	ldrb	r3, [r7, #14]
 802bbcc:	2b00      	cmp	r3, #0
 802bbce:	d103      	bne.n	802bbd8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 802bbd0:	687b      	ldr	r3, [r7, #4]
 802bbd2:	2204      	movs	r2, #4
 802bbd4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802bbd6:	e0cd      	b.n	802bd74 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bbd8:	7bbb      	ldrb	r3, [r7, #14]
 802bbda:	2b03      	cmp	r3, #3
 802bbdc:	f040 80ca 	bne.w	802bd74 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 802bbe0:	687b      	ldr	r3, [r7, #4]
 802bbe2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bbe6:	3301      	adds	r3, #1
 802bbe8:	b2da      	uxtb	r2, r3
 802bbea:	687b      	ldr	r3, [r7, #4]
 802bbec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802bbf0:	687b      	ldr	r3, [r7, #4]
 802bbf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bbf6:	2b03      	cmp	r3, #3
 802bbf8:	d903      	bls.n	802bc02 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 802bbfa:	687b      	ldr	r3, [r7, #4]
 802bbfc:	220d      	movs	r2, #13
 802bbfe:	701a      	strb	r2, [r3, #0]
      break;
 802bc00:	e0b8      	b.n	802bd74 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802bc02:	687b      	ldr	r3, [r7, #4]
 802bc04:	795b      	ldrb	r3, [r3, #5]
 802bc06:	4619      	mov	r1, r3
 802bc08:	6878      	ldr	r0, [r7, #4]
 802bc0a:	f000 ffd7 	bl	802cbbc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802bc0e:	687b      	ldr	r3, [r7, #4]
 802bc10:	791b      	ldrb	r3, [r3, #4]
 802bc12:	4619      	mov	r1, r3
 802bc14:	6878      	ldr	r0, [r7, #4]
 802bc16:	f000 ffd1 	bl	802cbbc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802bc1a:	687b      	ldr	r3, [r7, #4]
 802bc1c:	2200      	movs	r2, #0
 802bc1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802bc20:	687b      	ldr	r3, [r7, #4]
 802bc22:	2200      	movs	r2, #0
 802bc24:	701a      	strb	r2, [r3, #0]
      break;
 802bc26:	e0a5      	b.n	802bd74 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 802bc28:	687b      	ldr	r3, [r7, #4]
 802bc2a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 802bc2e:	4619      	mov	r1, r3
 802bc30:	6878      	ldr	r0, [r7, #4]
 802bc32:	f000 f965 	bl	802bf00 <USBH_Get_CfgDesc>
 802bc36:	4603      	mov	r3, r0
 802bc38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802bc3a:	7bbb      	ldrb	r3, [r7, #14]
 802bc3c:	2b00      	cmp	r3, #0
 802bc3e:	d103      	bne.n	802bc48 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 802bc40:	687b      	ldr	r3, [r7, #4]
 802bc42:	2205      	movs	r2, #5
 802bc44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802bc46:	e097      	b.n	802bd78 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bc48:	7bbb      	ldrb	r3, [r7, #14]
 802bc4a:	2b03      	cmp	r3, #3
 802bc4c:	f040 8094 	bne.w	802bd78 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 802bc50:	687b      	ldr	r3, [r7, #4]
 802bc52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bc56:	3301      	adds	r3, #1
 802bc58:	b2da      	uxtb	r2, r3
 802bc5a:	687b      	ldr	r3, [r7, #4]
 802bc5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802bc60:	687b      	ldr	r3, [r7, #4]
 802bc62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bc66:	2b03      	cmp	r3, #3
 802bc68:	d903      	bls.n	802bc72 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 802bc6a:	687b      	ldr	r3, [r7, #4]
 802bc6c:	220d      	movs	r2, #13
 802bc6e:	701a      	strb	r2, [r3, #0]
      break;
 802bc70:	e082      	b.n	802bd78 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802bc72:	687b      	ldr	r3, [r7, #4]
 802bc74:	795b      	ldrb	r3, [r3, #5]
 802bc76:	4619      	mov	r1, r3
 802bc78:	6878      	ldr	r0, [r7, #4]
 802bc7a:	f000 ff9f 	bl	802cbbc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802bc7e:	687b      	ldr	r3, [r7, #4]
 802bc80:	791b      	ldrb	r3, [r3, #4]
 802bc82:	4619      	mov	r1, r3
 802bc84:	6878      	ldr	r0, [r7, #4]
 802bc86:	f000 ff99 	bl	802cbbc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802bc8a:	687b      	ldr	r3, [r7, #4]
 802bc8c:	2200      	movs	r2, #0
 802bc8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802bc90:	687b      	ldr	r3, [r7, #4]
 802bc92:	2200      	movs	r2, #0
 802bc94:	701a      	strb	r2, [r3, #0]
      break;
 802bc96:	e06f      	b.n	802bd78 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 802bc98:	687b      	ldr	r3, [r7, #4]
 802bc9a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 802bc9e:	2b00      	cmp	r3, #0
 802bca0:	d019      	beq.n	802bcd6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802bca2:	687b      	ldr	r3, [r7, #4]
 802bca4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 802bca8:	687b      	ldr	r3, [r7, #4]
 802bcaa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802bcae:	23ff      	movs	r3, #255	; 0xff
 802bcb0:	6878      	ldr	r0, [r7, #4]
 802bcb2:	f000 f949 	bl	802bf48 <USBH_Get_StringDesc>
 802bcb6:	4603      	mov	r3, r0
 802bcb8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802bcba:	7bbb      	ldrb	r3, [r7, #14]
 802bcbc:	2b00      	cmp	r3, #0
 802bcbe:	d103      	bne.n	802bcc8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802bcc0:	687b      	ldr	r3, [r7, #4]
 802bcc2:	2206      	movs	r2, #6
 802bcc4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802bcc6:	e059      	b.n	802bd7c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bcc8:	7bbb      	ldrb	r3, [r7, #14]
 802bcca:	2b03      	cmp	r3, #3
 802bccc:	d156      	bne.n	802bd7c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802bcce:	687b      	ldr	r3, [r7, #4]
 802bcd0:	2206      	movs	r2, #6
 802bcd2:	705a      	strb	r2, [r3, #1]
      break;
 802bcd4:	e052      	b.n	802bd7c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802bcd6:	687b      	ldr	r3, [r7, #4]
 802bcd8:	2206      	movs	r2, #6
 802bcda:	705a      	strb	r2, [r3, #1]
      break;
 802bcdc:	e04e      	b.n	802bd7c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 802bcde:	687b      	ldr	r3, [r7, #4]
 802bce0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 802bce4:	2b00      	cmp	r3, #0
 802bce6:	d019      	beq.n	802bd1c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802bce8:	687b      	ldr	r3, [r7, #4]
 802bcea:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 802bcee:	687b      	ldr	r3, [r7, #4]
 802bcf0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802bcf4:	23ff      	movs	r3, #255	; 0xff
 802bcf6:	6878      	ldr	r0, [r7, #4]
 802bcf8:	f000 f926 	bl	802bf48 <USBH_Get_StringDesc>
 802bcfc:	4603      	mov	r3, r0
 802bcfe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802bd00:	7bbb      	ldrb	r3, [r7, #14]
 802bd02:	2b00      	cmp	r3, #0
 802bd04:	d103      	bne.n	802bd0e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802bd06:	687b      	ldr	r3, [r7, #4]
 802bd08:	2207      	movs	r2, #7
 802bd0a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802bd0c:	e038      	b.n	802bd80 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bd0e:	7bbb      	ldrb	r3, [r7, #14]
 802bd10:	2b03      	cmp	r3, #3
 802bd12:	d135      	bne.n	802bd80 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802bd14:	687b      	ldr	r3, [r7, #4]
 802bd16:	2207      	movs	r2, #7
 802bd18:	705a      	strb	r2, [r3, #1]
      break;
 802bd1a:	e031      	b.n	802bd80 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802bd1c:	687b      	ldr	r3, [r7, #4]
 802bd1e:	2207      	movs	r2, #7
 802bd20:	705a      	strb	r2, [r3, #1]
      break;
 802bd22:	e02d      	b.n	802bd80 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 802bd24:	687b      	ldr	r3, [r7, #4]
 802bd26:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 802bd2a:	2b00      	cmp	r3, #0
 802bd2c:	d017      	beq.n	802bd5e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802bd2e:	687b      	ldr	r3, [r7, #4]
 802bd30:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 802bd34:	687b      	ldr	r3, [r7, #4]
 802bd36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802bd3a:	23ff      	movs	r3, #255	; 0xff
 802bd3c:	6878      	ldr	r0, [r7, #4]
 802bd3e:	f000 f903 	bl	802bf48 <USBH_Get_StringDesc>
 802bd42:	4603      	mov	r3, r0
 802bd44:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802bd46:	7bbb      	ldrb	r3, [r7, #14]
 802bd48:	2b00      	cmp	r3, #0
 802bd4a:	d102      	bne.n	802bd52 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 802bd4c:	2300      	movs	r3, #0
 802bd4e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 802bd50:	e018      	b.n	802bd84 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bd52:	7bbb      	ldrb	r3, [r7, #14]
 802bd54:	2b03      	cmp	r3, #3
 802bd56:	d115      	bne.n	802bd84 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 802bd58:	2300      	movs	r3, #0
 802bd5a:	73fb      	strb	r3, [r7, #15]
      break;
 802bd5c:	e012      	b.n	802bd84 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 802bd5e:	2300      	movs	r3, #0
 802bd60:	73fb      	strb	r3, [r7, #15]
      break;
 802bd62:	e00f      	b.n	802bd84 <USBH_HandleEnum+0x3bc>

    default:
      break;
 802bd64:	bf00      	nop
 802bd66:	e00e      	b.n	802bd86 <USBH_HandleEnum+0x3be>
      break;
 802bd68:	bf00      	nop
 802bd6a:	e00c      	b.n	802bd86 <USBH_HandleEnum+0x3be>
      break;
 802bd6c:	bf00      	nop
 802bd6e:	e00a      	b.n	802bd86 <USBH_HandleEnum+0x3be>
      break;
 802bd70:	bf00      	nop
 802bd72:	e008      	b.n	802bd86 <USBH_HandleEnum+0x3be>
      break;
 802bd74:	bf00      	nop
 802bd76:	e006      	b.n	802bd86 <USBH_HandleEnum+0x3be>
      break;
 802bd78:	bf00      	nop
 802bd7a:	e004      	b.n	802bd86 <USBH_HandleEnum+0x3be>
      break;
 802bd7c:	bf00      	nop
 802bd7e:	e002      	b.n	802bd86 <USBH_HandleEnum+0x3be>
      break;
 802bd80:	bf00      	nop
 802bd82:	e000      	b.n	802bd86 <USBH_HandleEnum+0x3be>
      break;
 802bd84:	bf00      	nop
  }
  return Status;
 802bd86:	7bfb      	ldrb	r3, [r7, #15]
}
 802bd88:	4618      	mov	r0, r3
 802bd8a:	3710      	adds	r7, #16
 802bd8c:	46bd      	mov	sp, r7
 802bd8e:	bd80      	pop	{r7, pc}

0802bd90 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 802bd90:	b480      	push	{r7}
 802bd92:	b083      	sub	sp, #12
 802bd94:	af00      	add	r7, sp, #0
 802bd96:	6078      	str	r0, [r7, #4]
 802bd98:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 802bd9a:	687b      	ldr	r3, [r7, #4]
 802bd9c:	683a      	ldr	r2, [r7, #0]
 802bd9e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 802bda2:	bf00      	nop
 802bda4:	370c      	adds	r7, #12
 802bda6:	46bd      	mov	sp, r7
 802bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bdac:	4770      	bx	lr

0802bdae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 802bdae:	b580      	push	{r7, lr}
 802bdb0:	b082      	sub	sp, #8
 802bdb2:	af00      	add	r7, sp, #0
 802bdb4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 802bdb6:	687b      	ldr	r3, [r7, #4]
 802bdb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802bdbc:	1c5a      	adds	r2, r3, #1
 802bdbe:	687b      	ldr	r3, [r7, #4]
 802bdc0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 802bdc4:	6878      	ldr	r0, [r7, #4]
 802bdc6:	f000 f804 	bl	802bdd2 <USBH_HandleSof>
}
 802bdca:	bf00      	nop
 802bdcc:	3708      	adds	r7, #8
 802bdce:	46bd      	mov	sp, r7
 802bdd0:	bd80      	pop	{r7, pc}

0802bdd2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 802bdd2:	b580      	push	{r7, lr}
 802bdd4:	b082      	sub	sp, #8
 802bdd6:	af00      	add	r7, sp, #0
 802bdd8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 802bdda:	687b      	ldr	r3, [r7, #4]
 802bddc:	781b      	ldrb	r3, [r3, #0]
 802bdde:	b2db      	uxtb	r3, r3
 802bde0:	2b0b      	cmp	r3, #11
 802bde2:	d10a      	bne.n	802bdfa <USBH_HandleSof+0x28>
 802bde4:	687b      	ldr	r3, [r7, #4]
 802bde6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bdea:	2b00      	cmp	r3, #0
 802bdec:	d005      	beq.n	802bdfa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 802bdee:	687b      	ldr	r3, [r7, #4]
 802bdf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bdf4:	699b      	ldr	r3, [r3, #24]
 802bdf6:	6878      	ldr	r0, [r7, #4]
 802bdf8:	4798      	blx	r3
  }
}
 802bdfa:	bf00      	nop
 802bdfc:	3708      	adds	r7, #8
 802bdfe:	46bd      	mov	sp, r7
 802be00:	bd80      	pop	{r7, pc}

0802be02 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 802be02:	b480      	push	{r7}
 802be04:	b083      	sub	sp, #12
 802be06:	af00      	add	r7, sp, #0
 802be08:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 802be0a:	687b      	ldr	r3, [r7, #4]
 802be0c:	2201      	movs	r2, #1
 802be0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 802be12:	bf00      	nop
}
 802be14:	370c      	adds	r7, #12
 802be16:	46bd      	mov	sp, r7
 802be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 802be1c:	4770      	bx	lr

0802be1e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 802be1e:	b480      	push	{r7}
 802be20:	b083      	sub	sp, #12
 802be22:	af00      	add	r7, sp, #0
 802be24:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 802be26:	687b      	ldr	r3, [r7, #4]
 802be28:	2200      	movs	r2, #0
 802be2a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 802be2e:	bf00      	nop
}
 802be30:	370c      	adds	r7, #12
 802be32:	46bd      	mov	sp, r7
 802be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 802be38:	4770      	bx	lr

0802be3a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 802be3a:	b480      	push	{r7}
 802be3c:	b083      	sub	sp, #12
 802be3e:	af00      	add	r7, sp, #0
 802be40:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 802be42:	687b      	ldr	r3, [r7, #4]
 802be44:	2201      	movs	r2, #1
 802be46:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802be4a:	687b      	ldr	r3, [r7, #4]
 802be4c:	2200      	movs	r2, #0
 802be4e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802be52:	687b      	ldr	r3, [r7, #4]
 802be54:	2200      	movs	r2, #0
 802be56:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802be5a:	2300      	movs	r3, #0
}
 802be5c:	4618      	mov	r0, r3
 802be5e:	370c      	adds	r7, #12
 802be60:	46bd      	mov	sp, r7
 802be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 802be66:	4770      	bx	lr

0802be68 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 802be68:	b580      	push	{r7, lr}
 802be6a:	b082      	sub	sp, #8
 802be6c:	af00      	add	r7, sp, #0
 802be6e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 802be70:	687b      	ldr	r3, [r7, #4]
 802be72:	2201      	movs	r2, #1
 802be74:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 802be78:	687b      	ldr	r3, [r7, #4]
 802be7a:	2200      	movs	r2, #0
 802be7c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 802be80:	687b      	ldr	r3, [r7, #4]
 802be82:	2200      	movs	r2, #0
 802be84:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 802be88:	6878      	ldr	r0, [r7, #4]
 802be8a:	f001 f84a 	bl	802cf22 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802be8e:	687b      	ldr	r3, [r7, #4]
 802be90:	791b      	ldrb	r3, [r3, #4]
 802be92:	4619      	mov	r1, r3
 802be94:	6878      	ldr	r0, [r7, #4]
 802be96:	f000 fe91 	bl	802cbbc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802be9a:	687b      	ldr	r3, [r7, #4]
 802be9c:	795b      	ldrb	r3, [r3, #5]
 802be9e:	4619      	mov	r1, r3
 802bea0:	6878      	ldr	r0, [r7, #4]
 802bea2:	f000 fe8b 	bl	802cbbc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802bea6:	2300      	movs	r3, #0
}
 802bea8:	4618      	mov	r0, r3
 802beaa:	3708      	adds	r7, #8
 802beac:	46bd      	mov	sp, r7
 802beae:	bd80      	pop	{r7, pc}

0802beb0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 802beb0:	b580      	push	{r7, lr}
 802beb2:	b086      	sub	sp, #24
 802beb4:	af02      	add	r7, sp, #8
 802beb6:	6078      	str	r0, [r7, #4]
 802beb8:	460b      	mov	r3, r1
 802beba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 802bebc:	687b      	ldr	r3, [r7, #4]
 802bebe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802bec2:	78fb      	ldrb	r3, [r7, #3]
 802bec4:	b29b      	uxth	r3, r3
 802bec6:	9300      	str	r3, [sp, #0]
 802bec8:	4613      	mov	r3, r2
 802beca:	f44f 7280 	mov.w	r2, #256	; 0x100
 802bece:	2100      	movs	r1, #0
 802bed0:	6878      	ldr	r0, [r7, #4]
 802bed2:	f000 f864 	bl	802bf9e <USBH_GetDescriptor>
 802bed6:	4603      	mov	r3, r0
 802bed8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 802beda:	7bfb      	ldrb	r3, [r7, #15]
 802bedc:	2b00      	cmp	r3, #0
 802bede:	d10a      	bne.n	802bef6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 802bee0:	687b      	ldr	r3, [r7, #4]
 802bee2:	f203 3026 	addw	r0, r3, #806	; 0x326
 802bee6:	687b      	ldr	r3, [r7, #4]
 802bee8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802beec:	78fa      	ldrb	r2, [r7, #3]
 802beee:	b292      	uxth	r2, r2
 802bef0:	4619      	mov	r1, r3
 802bef2:	f000 f918 	bl	802c126 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 802bef6:	7bfb      	ldrb	r3, [r7, #15]
}
 802bef8:	4618      	mov	r0, r3
 802befa:	3710      	adds	r7, #16
 802befc:	46bd      	mov	sp, r7
 802befe:	bd80      	pop	{r7, pc}

0802bf00 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 802bf00:	b580      	push	{r7, lr}
 802bf02:	b086      	sub	sp, #24
 802bf04:	af02      	add	r7, sp, #8
 802bf06:	6078      	str	r0, [r7, #4]
 802bf08:	460b      	mov	r3, r1
 802bf0a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 802bf0c:	687b      	ldr	r3, [r7, #4]
 802bf0e:	331c      	adds	r3, #28
 802bf10:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 802bf12:	887b      	ldrh	r3, [r7, #2]
 802bf14:	9300      	str	r3, [sp, #0]
 802bf16:	68bb      	ldr	r3, [r7, #8]
 802bf18:	f44f 7200 	mov.w	r2, #512	; 0x200
 802bf1c:	2100      	movs	r1, #0
 802bf1e:	6878      	ldr	r0, [r7, #4]
 802bf20:	f000 f83d 	bl	802bf9e <USBH_GetDescriptor>
 802bf24:	4603      	mov	r3, r0
 802bf26:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 802bf28:	7bfb      	ldrb	r3, [r7, #15]
 802bf2a:	2b00      	cmp	r3, #0
 802bf2c:	d107      	bne.n	802bf3e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 802bf2e:	887b      	ldrh	r3, [r7, #2]
 802bf30:	461a      	mov	r2, r3
 802bf32:	68b9      	ldr	r1, [r7, #8]
 802bf34:	6878      	ldr	r0, [r7, #4]
 802bf36:	f000 f987 	bl	802c248 <USBH_ParseCfgDesc>
 802bf3a:	4603      	mov	r3, r0
 802bf3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802bf3e:	7bfb      	ldrb	r3, [r7, #15]
}
 802bf40:	4618      	mov	r0, r3
 802bf42:	3710      	adds	r7, #16
 802bf44:	46bd      	mov	sp, r7
 802bf46:	bd80      	pop	{r7, pc}

0802bf48 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 802bf48:	b580      	push	{r7, lr}
 802bf4a:	b088      	sub	sp, #32
 802bf4c:	af02      	add	r7, sp, #8
 802bf4e:	60f8      	str	r0, [r7, #12]
 802bf50:	607a      	str	r2, [r7, #4]
 802bf52:	461a      	mov	r2, r3
 802bf54:	460b      	mov	r3, r1
 802bf56:	72fb      	strb	r3, [r7, #11]
 802bf58:	4613      	mov	r3, r2
 802bf5a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 802bf5c:	7afb      	ldrb	r3, [r7, #11]
 802bf5e:	b29b      	uxth	r3, r3
 802bf60:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802bf64:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 802bf66:	68fb      	ldr	r3, [r7, #12]
 802bf68:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802bf6c:	893b      	ldrh	r3, [r7, #8]
 802bf6e:	9300      	str	r3, [sp, #0]
 802bf70:	460b      	mov	r3, r1
 802bf72:	2100      	movs	r1, #0
 802bf74:	68f8      	ldr	r0, [r7, #12]
 802bf76:	f000 f812 	bl	802bf9e <USBH_GetDescriptor>
 802bf7a:	4603      	mov	r3, r0
 802bf7c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 802bf7e:	7dfb      	ldrb	r3, [r7, #23]
 802bf80:	2b00      	cmp	r3, #0
 802bf82:	d107      	bne.n	802bf94 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 802bf84:	68fb      	ldr	r3, [r7, #12]
 802bf86:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802bf8a:	893a      	ldrh	r2, [r7, #8]
 802bf8c:	6879      	ldr	r1, [r7, #4]
 802bf8e:	4618      	mov	r0, r3
 802bf90:	f000 fb24 	bl	802c5dc <USBH_ParseStringDesc>
  }

  return status;
 802bf94:	7dfb      	ldrb	r3, [r7, #23]
}
 802bf96:	4618      	mov	r0, r3
 802bf98:	3718      	adds	r7, #24
 802bf9a:	46bd      	mov	sp, r7
 802bf9c:	bd80      	pop	{r7, pc}

0802bf9e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 802bf9e:	b580      	push	{r7, lr}
 802bfa0:	b084      	sub	sp, #16
 802bfa2:	af00      	add	r7, sp, #0
 802bfa4:	60f8      	str	r0, [r7, #12]
 802bfa6:	607b      	str	r3, [r7, #4]
 802bfa8:	460b      	mov	r3, r1
 802bfaa:	72fb      	strb	r3, [r7, #11]
 802bfac:	4613      	mov	r3, r2
 802bfae:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 802bfb0:	68fb      	ldr	r3, [r7, #12]
 802bfb2:	789b      	ldrb	r3, [r3, #2]
 802bfb4:	2b01      	cmp	r3, #1
 802bfb6:	d11c      	bne.n	802bff2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 802bfb8:	7afb      	ldrb	r3, [r7, #11]
 802bfba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802bfbe:	b2da      	uxtb	r2, r3
 802bfc0:	68fb      	ldr	r3, [r7, #12]
 802bfc2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 802bfc4:	68fb      	ldr	r3, [r7, #12]
 802bfc6:	2206      	movs	r2, #6
 802bfc8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 802bfca:	68fb      	ldr	r3, [r7, #12]
 802bfcc:	893a      	ldrh	r2, [r7, #8]
 802bfce:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 802bfd0:	893b      	ldrh	r3, [r7, #8]
 802bfd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802bfd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802bfda:	d104      	bne.n	802bfe6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 802bfdc:	68fb      	ldr	r3, [r7, #12]
 802bfde:	f240 4209 	movw	r2, #1033	; 0x409
 802bfe2:	829a      	strh	r2, [r3, #20]
 802bfe4:	e002      	b.n	802bfec <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 802bfe6:	68fb      	ldr	r3, [r7, #12]
 802bfe8:	2200      	movs	r2, #0
 802bfea:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 802bfec:	68fb      	ldr	r3, [r7, #12]
 802bfee:	8b3a      	ldrh	r2, [r7, #24]
 802bff0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 802bff2:	8b3b      	ldrh	r3, [r7, #24]
 802bff4:	461a      	mov	r2, r3
 802bff6:	6879      	ldr	r1, [r7, #4]
 802bff8:	68f8      	ldr	r0, [r7, #12]
 802bffa:	f000 fb3d 	bl	802c678 <USBH_CtlReq>
 802bffe:	4603      	mov	r3, r0
}
 802c000:	4618      	mov	r0, r3
 802c002:	3710      	adds	r7, #16
 802c004:	46bd      	mov	sp, r7
 802c006:	bd80      	pop	{r7, pc}

0802c008 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 802c008:	b580      	push	{r7, lr}
 802c00a:	b082      	sub	sp, #8
 802c00c:	af00      	add	r7, sp, #0
 802c00e:	6078      	str	r0, [r7, #4]
 802c010:	460b      	mov	r3, r1
 802c012:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802c014:	687b      	ldr	r3, [r7, #4]
 802c016:	789b      	ldrb	r3, [r3, #2]
 802c018:	2b01      	cmp	r3, #1
 802c01a:	d10f      	bne.n	802c03c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 802c01c:	687b      	ldr	r3, [r7, #4]
 802c01e:	2200      	movs	r2, #0
 802c020:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 802c022:	687b      	ldr	r3, [r7, #4]
 802c024:	2205      	movs	r2, #5
 802c026:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 802c028:	78fb      	ldrb	r3, [r7, #3]
 802c02a:	b29a      	uxth	r2, r3
 802c02c:	687b      	ldr	r3, [r7, #4]
 802c02e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802c030:	687b      	ldr	r3, [r7, #4]
 802c032:	2200      	movs	r2, #0
 802c034:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c036:	687b      	ldr	r3, [r7, #4]
 802c038:	2200      	movs	r2, #0
 802c03a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802c03c:	2200      	movs	r2, #0
 802c03e:	2100      	movs	r1, #0
 802c040:	6878      	ldr	r0, [r7, #4]
 802c042:	f000 fb19 	bl	802c678 <USBH_CtlReq>
 802c046:	4603      	mov	r3, r0
}
 802c048:	4618      	mov	r0, r3
 802c04a:	3708      	adds	r7, #8
 802c04c:	46bd      	mov	sp, r7
 802c04e:	bd80      	pop	{r7, pc}

0802c050 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 802c050:	b580      	push	{r7, lr}
 802c052:	b082      	sub	sp, #8
 802c054:	af00      	add	r7, sp, #0
 802c056:	6078      	str	r0, [r7, #4]
 802c058:	460b      	mov	r3, r1
 802c05a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 802c05c:	687b      	ldr	r3, [r7, #4]
 802c05e:	789b      	ldrb	r3, [r3, #2]
 802c060:	2b01      	cmp	r3, #1
 802c062:	d10e      	bne.n	802c082 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802c064:	687b      	ldr	r3, [r7, #4]
 802c066:	2200      	movs	r2, #0
 802c068:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 802c06a:	687b      	ldr	r3, [r7, #4]
 802c06c:	2209      	movs	r2, #9
 802c06e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 802c070:	687b      	ldr	r3, [r7, #4]
 802c072:	887a      	ldrh	r2, [r7, #2]
 802c074:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802c076:	687b      	ldr	r3, [r7, #4]
 802c078:	2200      	movs	r2, #0
 802c07a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c07c:	687b      	ldr	r3, [r7, #4]
 802c07e:	2200      	movs	r2, #0
 802c080:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802c082:	2200      	movs	r2, #0
 802c084:	2100      	movs	r1, #0
 802c086:	6878      	ldr	r0, [r7, #4]
 802c088:	f000 faf6 	bl	802c678 <USBH_CtlReq>
 802c08c:	4603      	mov	r3, r0
}
 802c08e:	4618      	mov	r0, r3
 802c090:	3708      	adds	r7, #8
 802c092:	46bd      	mov	sp, r7
 802c094:	bd80      	pop	{r7, pc}

0802c096 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 802c096:	b580      	push	{r7, lr}
 802c098:	b082      	sub	sp, #8
 802c09a:	af00      	add	r7, sp, #0
 802c09c:	6078      	str	r0, [r7, #4]
 802c09e:	460b      	mov	r3, r1
 802c0a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802c0a2:	687b      	ldr	r3, [r7, #4]
 802c0a4:	789b      	ldrb	r3, [r3, #2]
 802c0a6:	2b01      	cmp	r3, #1
 802c0a8:	d10f      	bne.n	802c0ca <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802c0aa:	687b      	ldr	r3, [r7, #4]
 802c0ac:	2200      	movs	r2, #0
 802c0ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 802c0b0:	687b      	ldr	r3, [r7, #4]
 802c0b2:	2203      	movs	r2, #3
 802c0b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 802c0b6:	78fb      	ldrb	r3, [r7, #3]
 802c0b8:	b29a      	uxth	r2, r3
 802c0ba:	687b      	ldr	r3, [r7, #4]
 802c0bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802c0be:	687b      	ldr	r3, [r7, #4]
 802c0c0:	2200      	movs	r2, #0
 802c0c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c0c4:	687b      	ldr	r3, [r7, #4]
 802c0c6:	2200      	movs	r2, #0
 802c0c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802c0ca:	2200      	movs	r2, #0
 802c0cc:	2100      	movs	r1, #0
 802c0ce:	6878      	ldr	r0, [r7, #4]
 802c0d0:	f000 fad2 	bl	802c678 <USBH_CtlReq>
 802c0d4:	4603      	mov	r3, r0
}
 802c0d6:	4618      	mov	r0, r3
 802c0d8:	3708      	adds	r7, #8
 802c0da:	46bd      	mov	sp, r7
 802c0dc:	bd80      	pop	{r7, pc}

0802c0de <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 802c0de:	b580      	push	{r7, lr}
 802c0e0:	b082      	sub	sp, #8
 802c0e2:	af00      	add	r7, sp, #0
 802c0e4:	6078      	str	r0, [r7, #4]
 802c0e6:	460b      	mov	r3, r1
 802c0e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802c0ea:	687b      	ldr	r3, [r7, #4]
 802c0ec:	789b      	ldrb	r3, [r3, #2]
 802c0ee:	2b01      	cmp	r3, #1
 802c0f0:	d10f      	bne.n	802c112 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 802c0f2:	687b      	ldr	r3, [r7, #4]
 802c0f4:	2202      	movs	r2, #2
 802c0f6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 802c0f8:	687b      	ldr	r3, [r7, #4]
 802c0fa:	2201      	movs	r2, #1
 802c0fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 802c0fe:	687b      	ldr	r3, [r7, #4]
 802c100:	2200      	movs	r2, #0
 802c102:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 802c104:	78fb      	ldrb	r3, [r7, #3]
 802c106:	b29a      	uxth	r2, r3
 802c108:	687b      	ldr	r3, [r7, #4]
 802c10a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c10c:	687b      	ldr	r3, [r7, #4]
 802c10e:	2200      	movs	r2, #0
 802c110:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 802c112:	2200      	movs	r2, #0
 802c114:	2100      	movs	r1, #0
 802c116:	6878      	ldr	r0, [r7, #4]
 802c118:	f000 faae 	bl	802c678 <USBH_CtlReq>
 802c11c:	4603      	mov	r3, r0
}
 802c11e:	4618      	mov	r0, r3
 802c120:	3708      	adds	r7, #8
 802c122:	46bd      	mov	sp, r7
 802c124:	bd80      	pop	{r7, pc}

0802c126 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 802c126:	b480      	push	{r7}
 802c128:	b085      	sub	sp, #20
 802c12a:	af00      	add	r7, sp, #0
 802c12c:	60f8      	str	r0, [r7, #12]
 802c12e:	60b9      	str	r1, [r7, #8]
 802c130:	4613      	mov	r3, r2
 802c132:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 802c134:	68bb      	ldr	r3, [r7, #8]
 802c136:	781a      	ldrb	r2, [r3, #0]
 802c138:	68fb      	ldr	r3, [r7, #12]
 802c13a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 802c13c:	68bb      	ldr	r3, [r7, #8]
 802c13e:	785a      	ldrb	r2, [r3, #1]
 802c140:	68fb      	ldr	r3, [r7, #12]
 802c142:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 802c144:	68bb      	ldr	r3, [r7, #8]
 802c146:	3302      	adds	r3, #2
 802c148:	781b      	ldrb	r3, [r3, #0]
 802c14a:	b29a      	uxth	r2, r3
 802c14c:	68bb      	ldr	r3, [r7, #8]
 802c14e:	3303      	adds	r3, #3
 802c150:	781b      	ldrb	r3, [r3, #0]
 802c152:	b29b      	uxth	r3, r3
 802c154:	021b      	lsls	r3, r3, #8
 802c156:	b29b      	uxth	r3, r3
 802c158:	4313      	orrs	r3, r2
 802c15a:	b29a      	uxth	r2, r3
 802c15c:	68fb      	ldr	r3, [r7, #12]
 802c15e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 802c160:	68bb      	ldr	r3, [r7, #8]
 802c162:	791a      	ldrb	r2, [r3, #4]
 802c164:	68fb      	ldr	r3, [r7, #12]
 802c166:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 802c168:	68bb      	ldr	r3, [r7, #8]
 802c16a:	795a      	ldrb	r2, [r3, #5]
 802c16c:	68fb      	ldr	r3, [r7, #12]
 802c16e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 802c170:	68bb      	ldr	r3, [r7, #8]
 802c172:	799a      	ldrb	r2, [r3, #6]
 802c174:	68fb      	ldr	r3, [r7, #12]
 802c176:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 802c178:	68bb      	ldr	r3, [r7, #8]
 802c17a:	79da      	ldrb	r2, [r3, #7]
 802c17c:	68fb      	ldr	r3, [r7, #12]
 802c17e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 802c180:	68fb      	ldr	r3, [r7, #12]
 802c182:	79db      	ldrb	r3, [r3, #7]
 802c184:	2b20      	cmp	r3, #32
 802c186:	dc11      	bgt.n	802c1ac <USBH_ParseDevDesc+0x86>
 802c188:	2b08      	cmp	r3, #8
 802c18a:	db16      	blt.n	802c1ba <USBH_ParseDevDesc+0x94>
 802c18c:	3b08      	subs	r3, #8
 802c18e:	2201      	movs	r2, #1
 802c190:	fa02 f303 	lsl.w	r3, r2, r3
 802c194:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 802c198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802c19c:	2b00      	cmp	r3, #0
 802c19e:	bf14      	ite	ne
 802c1a0:	2301      	movne	r3, #1
 802c1a2:	2300      	moveq	r3, #0
 802c1a4:	b2db      	uxtb	r3, r3
 802c1a6:	2b00      	cmp	r3, #0
 802c1a8:	d102      	bne.n	802c1b0 <USBH_ParseDevDesc+0x8a>
 802c1aa:	e006      	b.n	802c1ba <USBH_ParseDevDesc+0x94>
 802c1ac:	2b40      	cmp	r3, #64	; 0x40
 802c1ae:	d104      	bne.n	802c1ba <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 802c1b0:	68fb      	ldr	r3, [r7, #12]
 802c1b2:	79da      	ldrb	r2, [r3, #7]
 802c1b4:	68fb      	ldr	r3, [r7, #12]
 802c1b6:	71da      	strb	r2, [r3, #7]
      break;
 802c1b8:	e003      	b.n	802c1c2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 802c1ba:	68fb      	ldr	r3, [r7, #12]
 802c1bc:	2240      	movs	r2, #64	; 0x40
 802c1be:	71da      	strb	r2, [r3, #7]
      break;
 802c1c0:	bf00      	nop
  }

  if (length > 8U)
 802c1c2:	88fb      	ldrh	r3, [r7, #6]
 802c1c4:	2b08      	cmp	r3, #8
 802c1c6:	d939      	bls.n	802c23c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 802c1c8:	68bb      	ldr	r3, [r7, #8]
 802c1ca:	3308      	adds	r3, #8
 802c1cc:	781b      	ldrb	r3, [r3, #0]
 802c1ce:	b29a      	uxth	r2, r3
 802c1d0:	68bb      	ldr	r3, [r7, #8]
 802c1d2:	3309      	adds	r3, #9
 802c1d4:	781b      	ldrb	r3, [r3, #0]
 802c1d6:	b29b      	uxth	r3, r3
 802c1d8:	021b      	lsls	r3, r3, #8
 802c1da:	b29b      	uxth	r3, r3
 802c1dc:	4313      	orrs	r3, r2
 802c1de:	b29a      	uxth	r2, r3
 802c1e0:	68fb      	ldr	r3, [r7, #12]
 802c1e2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 802c1e4:	68bb      	ldr	r3, [r7, #8]
 802c1e6:	330a      	adds	r3, #10
 802c1e8:	781b      	ldrb	r3, [r3, #0]
 802c1ea:	b29a      	uxth	r2, r3
 802c1ec:	68bb      	ldr	r3, [r7, #8]
 802c1ee:	330b      	adds	r3, #11
 802c1f0:	781b      	ldrb	r3, [r3, #0]
 802c1f2:	b29b      	uxth	r3, r3
 802c1f4:	021b      	lsls	r3, r3, #8
 802c1f6:	b29b      	uxth	r3, r3
 802c1f8:	4313      	orrs	r3, r2
 802c1fa:	b29a      	uxth	r2, r3
 802c1fc:	68fb      	ldr	r3, [r7, #12]
 802c1fe:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 802c200:	68bb      	ldr	r3, [r7, #8]
 802c202:	330c      	adds	r3, #12
 802c204:	781b      	ldrb	r3, [r3, #0]
 802c206:	b29a      	uxth	r2, r3
 802c208:	68bb      	ldr	r3, [r7, #8]
 802c20a:	330d      	adds	r3, #13
 802c20c:	781b      	ldrb	r3, [r3, #0]
 802c20e:	b29b      	uxth	r3, r3
 802c210:	021b      	lsls	r3, r3, #8
 802c212:	b29b      	uxth	r3, r3
 802c214:	4313      	orrs	r3, r2
 802c216:	b29a      	uxth	r2, r3
 802c218:	68fb      	ldr	r3, [r7, #12]
 802c21a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 802c21c:	68bb      	ldr	r3, [r7, #8]
 802c21e:	7b9a      	ldrb	r2, [r3, #14]
 802c220:	68fb      	ldr	r3, [r7, #12]
 802c222:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 802c224:	68bb      	ldr	r3, [r7, #8]
 802c226:	7bda      	ldrb	r2, [r3, #15]
 802c228:	68fb      	ldr	r3, [r7, #12]
 802c22a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 802c22c:	68bb      	ldr	r3, [r7, #8]
 802c22e:	7c1a      	ldrb	r2, [r3, #16]
 802c230:	68fb      	ldr	r3, [r7, #12]
 802c232:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 802c234:	68bb      	ldr	r3, [r7, #8]
 802c236:	7c5a      	ldrb	r2, [r3, #17]
 802c238:	68fb      	ldr	r3, [r7, #12]
 802c23a:	745a      	strb	r2, [r3, #17]
  }
}
 802c23c:	bf00      	nop
 802c23e:	3714      	adds	r7, #20
 802c240:	46bd      	mov	sp, r7
 802c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c246:	4770      	bx	lr

0802c248 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 802c248:	b580      	push	{r7, lr}
 802c24a:	b08c      	sub	sp, #48	; 0x30
 802c24c:	af00      	add	r7, sp, #0
 802c24e:	60f8      	str	r0, [r7, #12]
 802c250:	60b9      	str	r1, [r7, #8]
 802c252:	4613      	mov	r3, r2
 802c254:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 802c256:	68fb      	ldr	r3, [r7, #12]
 802c258:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802c25c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 802c25e:	2300      	movs	r3, #0
 802c260:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 802c264:	68bb      	ldr	r3, [r7, #8]
 802c266:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 802c268:	2300      	movs	r3, #0
 802c26a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 802c26e:	2300      	movs	r3, #0
 802c270:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 802c274:	68bb      	ldr	r3, [r7, #8]
 802c276:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 802c278:	68bb      	ldr	r3, [r7, #8]
 802c27a:	781a      	ldrb	r2, [r3, #0]
 802c27c:	6a3b      	ldr	r3, [r7, #32]
 802c27e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 802c280:	68bb      	ldr	r3, [r7, #8]
 802c282:	785a      	ldrb	r2, [r3, #1]
 802c284:	6a3b      	ldr	r3, [r7, #32]
 802c286:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 802c288:	68bb      	ldr	r3, [r7, #8]
 802c28a:	3302      	adds	r3, #2
 802c28c:	781b      	ldrb	r3, [r3, #0]
 802c28e:	b29a      	uxth	r2, r3
 802c290:	68bb      	ldr	r3, [r7, #8]
 802c292:	3303      	adds	r3, #3
 802c294:	781b      	ldrb	r3, [r3, #0]
 802c296:	b29b      	uxth	r3, r3
 802c298:	021b      	lsls	r3, r3, #8
 802c29a:	b29b      	uxth	r3, r3
 802c29c:	4313      	orrs	r3, r2
 802c29e:	b29b      	uxth	r3, r3
 802c2a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802c2a4:	bf28      	it	cs
 802c2a6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 802c2aa:	b29a      	uxth	r2, r3
 802c2ac:	6a3b      	ldr	r3, [r7, #32]
 802c2ae:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 802c2b0:	68bb      	ldr	r3, [r7, #8]
 802c2b2:	791a      	ldrb	r2, [r3, #4]
 802c2b4:	6a3b      	ldr	r3, [r7, #32]
 802c2b6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 802c2b8:	68bb      	ldr	r3, [r7, #8]
 802c2ba:	795a      	ldrb	r2, [r3, #5]
 802c2bc:	6a3b      	ldr	r3, [r7, #32]
 802c2be:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 802c2c0:	68bb      	ldr	r3, [r7, #8]
 802c2c2:	799a      	ldrb	r2, [r3, #6]
 802c2c4:	6a3b      	ldr	r3, [r7, #32]
 802c2c6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 802c2c8:	68bb      	ldr	r3, [r7, #8]
 802c2ca:	79da      	ldrb	r2, [r3, #7]
 802c2cc:	6a3b      	ldr	r3, [r7, #32]
 802c2ce:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 802c2d0:	68bb      	ldr	r3, [r7, #8]
 802c2d2:	7a1a      	ldrb	r2, [r3, #8]
 802c2d4:	6a3b      	ldr	r3, [r7, #32]
 802c2d6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 802c2d8:	6a3b      	ldr	r3, [r7, #32]
 802c2da:	781b      	ldrb	r3, [r3, #0]
 802c2dc:	2b09      	cmp	r3, #9
 802c2de:	d002      	beq.n	802c2e6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 802c2e0:	6a3b      	ldr	r3, [r7, #32]
 802c2e2:	2209      	movs	r2, #9
 802c2e4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 802c2e6:	88fb      	ldrh	r3, [r7, #6]
 802c2e8:	2b09      	cmp	r3, #9
 802c2ea:	f240 809d 	bls.w	802c428 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 802c2ee:	2309      	movs	r3, #9
 802c2f0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 802c2f2:	2300      	movs	r3, #0
 802c2f4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802c2f6:	e081      	b.n	802c3fc <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802c2f8:	f107 0316 	add.w	r3, r7, #22
 802c2fc:	4619      	mov	r1, r3
 802c2fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c300:	f000 f99f 	bl	802c642 <USBH_GetNextDesc>
 802c304:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 802c306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c308:	785b      	ldrb	r3, [r3, #1]
 802c30a:	2b04      	cmp	r3, #4
 802c30c:	d176      	bne.n	802c3fc <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 802c30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c310:	781b      	ldrb	r3, [r3, #0]
 802c312:	2b09      	cmp	r3, #9
 802c314:	d002      	beq.n	802c31c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 802c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c318:	2209      	movs	r2, #9
 802c31a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 802c31c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c320:	221a      	movs	r2, #26
 802c322:	fb02 f303 	mul.w	r3, r2, r3
 802c326:	3308      	adds	r3, #8
 802c328:	6a3a      	ldr	r2, [r7, #32]
 802c32a:	4413      	add	r3, r2
 802c32c:	3302      	adds	r3, #2
 802c32e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 802c330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802c332:	69f8      	ldr	r0, [r7, #28]
 802c334:	f000 f87e 	bl	802c434 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 802c338:	2300      	movs	r3, #0
 802c33a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 802c33e:	2300      	movs	r3, #0
 802c340:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802c342:	e043      	b.n	802c3cc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802c344:	f107 0316 	add.w	r3, r7, #22
 802c348:	4619      	mov	r1, r3
 802c34a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c34c:	f000 f979 	bl	802c642 <USBH_GetNextDesc>
 802c350:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802c352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c354:	785b      	ldrb	r3, [r3, #1]
 802c356:	2b05      	cmp	r3, #5
 802c358:	d138      	bne.n	802c3cc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 802c35a:	69fb      	ldr	r3, [r7, #28]
 802c35c:	795b      	ldrb	r3, [r3, #5]
 802c35e:	2b01      	cmp	r3, #1
 802c360:	d10f      	bne.n	802c382 <USBH_ParseCfgDesc+0x13a>
 802c362:	69fb      	ldr	r3, [r7, #28]
 802c364:	799b      	ldrb	r3, [r3, #6]
 802c366:	2b02      	cmp	r3, #2
 802c368:	d10b      	bne.n	802c382 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802c36a:	69fb      	ldr	r3, [r7, #28]
 802c36c:	79db      	ldrb	r3, [r3, #7]
 802c36e:	2b00      	cmp	r3, #0
 802c370:	d10f      	bne.n	802c392 <USBH_ParseCfgDesc+0x14a>
 802c372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c374:	781b      	ldrb	r3, [r3, #0]
 802c376:	2b09      	cmp	r3, #9
 802c378:	d00b      	beq.n	802c392 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 802c37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c37c:	2209      	movs	r2, #9
 802c37e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802c380:	e007      	b.n	802c392 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 802c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c384:	781b      	ldrb	r3, [r3, #0]
 802c386:	2b07      	cmp	r3, #7
 802c388:	d004      	beq.n	802c394 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 802c38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c38c:	2207      	movs	r2, #7
 802c38e:	701a      	strb	r2, [r3, #0]
 802c390:	e000      	b.n	802c394 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802c392:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 802c394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c398:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c39c:	3201      	adds	r2, #1
 802c39e:	00d2      	lsls	r2, r2, #3
 802c3a0:	211a      	movs	r1, #26
 802c3a2:	fb01 f303 	mul.w	r3, r1, r3
 802c3a6:	4413      	add	r3, r2
 802c3a8:	3308      	adds	r3, #8
 802c3aa:	6a3a      	ldr	r2, [r7, #32]
 802c3ac:	4413      	add	r3, r2
 802c3ae:	3304      	adds	r3, #4
 802c3b0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 802c3b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802c3b4:	69b9      	ldr	r1, [r7, #24]
 802c3b6:	68f8      	ldr	r0, [r7, #12]
 802c3b8:	f000 f86b 	bl	802c492 <USBH_ParseEPDesc>
 802c3bc:	4603      	mov	r3, r0
 802c3be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 802c3c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c3c6:	3301      	adds	r3, #1
 802c3c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802c3cc:	69fb      	ldr	r3, [r7, #28]
 802c3ce:	791b      	ldrb	r3, [r3, #4]
 802c3d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c3d4:	429a      	cmp	r2, r3
 802c3d6:	d204      	bcs.n	802c3e2 <USBH_ParseCfgDesc+0x19a>
 802c3d8:	6a3b      	ldr	r3, [r7, #32]
 802c3da:	885a      	ldrh	r2, [r3, #2]
 802c3dc:	8afb      	ldrh	r3, [r7, #22]
 802c3de:	429a      	cmp	r2, r3
 802c3e0:	d8b0      	bhi.n	802c344 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 802c3e2:	69fb      	ldr	r3, [r7, #28]
 802c3e4:	791b      	ldrb	r3, [r3, #4]
 802c3e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c3ea:	429a      	cmp	r2, r3
 802c3ec:	d201      	bcs.n	802c3f2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 802c3ee:	2303      	movs	r3, #3
 802c3f0:	e01c      	b.n	802c42c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 802c3f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c3f6:	3301      	adds	r3, #1
 802c3f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802c3fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c400:	2b01      	cmp	r3, #1
 802c402:	d805      	bhi.n	802c410 <USBH_ParseCfgDesc+0x1c8>
 802c404:	6a3b      	ldr	r3, [r7, #32]
 802c406:	885a      	ldrh	r2, [r3, #2]
 802c408:	8afb      	ldrh	r3, [r7, #22]
 802c40a:	429a      	cmp	r2, r3
 802c40c:	f63f af74 	bhi.w	802c2f8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 802c410:	6a3b      	ldr	r3, [r7, #32]
 802c412:	791b      	ldrb	r3, [r3, #4]
 802c414:	2b02      	cmp	r3, #2
 802c416:	bf28      	it	cs
 802c418:	2302      	movcs	r3, #2
 802c41a:	b2db      	uxtb	r3, r3
 802c41c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802c420:	429a      	cmp	r2, r3
 802c422:	d201      	bcs.n	802c428 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 802c424:	2303      	movs	r3, #3
 802c426:	e001      	b.n	802c42c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 802c428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802c42c:	4618      	mov	r0, r3
 802c42e:	3730      	adds	r7, #48	; 0x30
 802c430:	46bd      	mov	sp, r7
 802c432:	bd80      	pop	{r7, pc}

0802c434 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 802c434:	b480      	push	{r7}
 802c436:	b083      	sub	sp, #12
 802c438:	af00      	add	r7, sp, #0
 802c43a:	6078      	str	r0, [r7, #4]
 802c43c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 802c43e:	683b      	ldr	r3, [r7, #0]
 802c440:	781a      	ldrb	r2, [r3, #0]
 802c442:	687b      	ldr	r3, [r7, #4]
 802c444:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 802c446:	683b      	ldr	r3, [r7, #0]
 802c448:	785a      	ldrb	r2, [r3, #1]
 802c44a:	687b      	ldr	r3, [r7, #4]
 802c44c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 802c44e:	683b      	ldr	r3, [r7, #0]
 802c450:	789a      	ldrb	r2, [r3, #2]
 802c452:	687b      	ldr	r3, [r7, #4]
 802c454:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 802c456:	683b      	ldr	r3, [r7, #0]
 802c458:	78da      	ldrb	r2, [r3, #3]
 802c45a:	687b      	ldr	r3, [r7, #4]
 802c45c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 802c45e:	683b      	ldr	r3, [r7, #0]
 802c460:	791a      	ldrb	r2, [r3, #4]
 802c462:	687b      	ldr	r3, [r7, #4]
 802c464:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 802c466:	683b      	ldr	r3, [r7, #0]
 802c468:	795a      	ldrb	r2, [r3, #5]
 802c46a:	687b      	ldr	r3, [r7, #4]
 802c46c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 802c46e:	683b      	ldr	r3, [r7, #0]
 802c470:	799a      	ldrb	r2, [r3, #6]
 802c472:	687b      	ldr	r3, [r7, #4]
 802c474:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 802c476:	683b      	ldr	r3, [r7, #0]
 802c478:	79da      	ldrb	r2, [r3, #7]
 802c47a:	687b      	ldr	r3, [r7, #4]
 802c47c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 802c47e:	683b      	ldr	r3, [r7, #0]
 802c480:	7a1a      	ldrb	r2, [r3, #8]
 802c482:	687b      	ldr	r3, [r7, #4]
 802c484:	721a      	strb	r2, [r3, #8]
}
 802c486:	bf00      	nop
 802c488:	370c      	adds	r7, #12
 802c48a:	46bd      	mov	sp, r7
 802c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c490:	4770      	bx	lr

0802c492 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 802c492:	b480      	push	{r7}
 802c494:	b087      	sub	sp, #28
 802c496:	af00      	add	r7, sp, #0
 802c498:	60f8      	str	r0, [r7, #12]
 802c49a:	60b9      	str	r1, [r7, #8]
 802c49c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 802c49e:	2300      	movs	r3, #0
 802c4a0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 802c4a2:	687b      	ldr	r3, [r7, #4]
 802c4a4:	781a      	ldrb	r2, [r3, #0]
 802c4a6:	68bb      	ldr	r3, [r7, #8]
 802c4a8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 802c4aa:	687b      	ldr	r3, [r7, #4]
 802c4ac:	785a      	ldrb	r2, [r3, #1]
 802c4ae:	68bb      	ldr	r3, [r7, #8]
 802c4b0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 802c4b2:	687b      	ldr	r3, [r7, #4]
 802c4b4:	789a      	ldrb	r2, [r3, #2]
 802c4b6:	68bb      	ldr	r3, [r7, #8]
 802c4b8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 802c4ba:	687b      	ldr	r3, [r7, #4]
 802c4bc:	78da      	ldrb	r2, [r3, #3]
 802c4be:	68bb      	ldr	r3, [r7, #8]
 802c4c0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 802c4c2:	687b      	ldr	r3, [r7, #4]
 802c4c4:	3304      	adds	r3, #4
 802c4c6:	781b      	ldrb	r3, [r3, #0]
 802c4c8:	b29a      	uxth	r2, r3
 802c4ca:	687b      	ldr	r3, [r7, #4]
 802c4cc:	3305      	adds	r3, #5
 802c4ce:	781b      	ldrb	r3, [r3, #0]
 802c4d0:	b29b      	uxth	r3, r3
 802c4d2:	021b      	lsls	r3, r3, #8
 802c4d4:	b29b      	uxth	r3, r3
 802c4d6:	4313      	orrs	r3, r2
 802c4d8:	b29a      	uxth	r2, r3
 802c4da:	68bb      	ldr	r3, [r7, #8]
 802c4dc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 802c4de:	687b      	ldr	r3, [r7, #4]
 802c4e0:	799a      	ldrb	r2, [r3, #6]
 802c4e2:	68bb      	ldr	r3, [r7, #8]
 802c4e4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 802c4e6:	68bb      	ldr	r3, [r7, #8]
 802c4e8:	889b      	ldrh	r3, [r3, #4]
 802c4ea:	2b00      	cmp	r3, #0
 802c4ec:	d102      	bne.n	802c4f4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 802c4ee:	2303      	movs	r3, #3
 802c4f0:	75fb      	strb	r3, [r7, #23]
 802c4f2:	e033      	b.n	802c55c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 802c4f4:	68bb      	ldr	r3, [r7, #8]
 802c4f6:	889b      	ldrh	r3, [r3, #4]
 802c4f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802c4fc:	f023 0307 	bic.w	r3, r3, #7
 802c500:	b29a      	uxth	r2, r3
 802c502:	68bb      	ldr	r3, [r7, #8]
 802c504:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 802c506:	68bb      	ldr	r3, [r7, #8]
 802c508:	889b      	ldrh	r3, [r3, #4]
 802c50a:	b21a      	sxth	r2, r3
 802c50c:	687b      	ldr	r3, [r7, #4]
 802c50e:	3304      	adds	r3, #4
 802c510:	781b      	ldrb	r3, [r3, #0]
 802c512:	b299      	uxth	r1, r3
 802c514:	687b      	ldr	r3, [r7, #4]
 802c516:	3305      	adds	r3, #5
 802c518:	781b      	ldrb	r3, [r3, #0]
 802c51a:	b29b      	uxth	r3, r3
 802c51c:	021b      	lsls	r3, r3, #8
 802c51e:	b29b      	uxth	r3, r3
 802c520:	430b      	orrs	r3, r1
 802c522:	b29b      	uxth	r3, r3
 802c524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802c528:	2b00      	cmp	r3, #0
 802c52a:	d110      	bne.n	802c54e <USBH_ParseEPDesc+0xbc>
 802c52c:	687b      	ldr	r3, [r7, #4]
 802c52e:	3304      	adds	r3, #4
 802c530:	781b      	ldrb	r3, [r3, #0]
 802c532:	b299      	uxth	r1, r3
 802c534:	687b      	ldr	r3, [r7, #4]
 802c536:	3305      	adds	r3, #5
 802c538:	781b      	ldrb	r3, [r3, #0]
 802c53a:	b29b      	uxth	r3, r3
 802c53c:	021b      	lsls	r3, r3, #8
 802c53e:	b29b      	uxth	r3, r3
 802c540:	430b      	orrs	r3, r1
 802c542:	b29b      	uxth	r3, r3
 802c544:	b21b      	sxth	r3, r3
 802c546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802c54a:	b21b      	sxth	r3, r3
 802c54c:	e001      	b.n	802c552 <USBH_ParseEPDesc+0xc0>
 802c54e:	f44f 7300 	mov.w	r3, #512	; 0x200
 802c552:	4313      	orrs	r3, r2
 802c554:	b21b      	sxth	r3, r3
 802c556:	b29a      	uxth	r2, r3
 802c558:	68bb      	ldr	r3, [r7, #8]
 802c55a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 802c55c:	68fb      	ldr	r3, [r7, #12]
 802c55e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802c562:	2b00      	cmp	r3, #0
 802c564:	d116      	bne.n	802c594 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802c566:	68bb      	ldr	r3, [r7, #8]
 802c568:	78db      	ldrb	r3, [r3, #3]
 802c56a:	f003 0303 	and.w	r3, r3, #3
 802c56e:	2b01      	cmp	r3, #1
 802c570:	d005      	beq.n	802c57e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 802c572:	68bb      	ldr	r3, [r7, #8]
 802c574:	78db      	ldrb	r3, [r3, #3]
 802c576:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802c57a:	2b03      	cmp	r3, #3
 802c57c:	d127      	bne.n	802c5ce <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802c57e:	68bb      	ldr	r3, [r7, #8]
 802c580:	799b      	ldrb	r3, [r3, #6]
 802c582:	2b00      	cmp	r3, #0
 802c584:	d003      	beq.n	802c58e <USBH_ParseEPDesc+0xfc>
 802c586:	68bb      	ldr	r3, [r7, #8]
 802c588:	799b      	ldrb	r3, [r3, #6]
 802c58a:	2b10      	cmp	r3, #16
 802c58c:	d91f      	bls.n	802c5ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802c58e:	2303      	movs	r3, #3
 802c590:	75fb      	strb	r3, [r7, #23]
 802c592:	e01c      	b.n	802c5ce <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 802c594:	68bb      	ldr	r3, [r7, #8]
 802c596:	78db      	ldrb	r3, [r3, #3]
 802c598:	f003 0303 	and.w	r3, r3, #3
 802c59c:	2b01      	cmp	r3, #1
 802c59e:	d10a      	bne.n	802c5b6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802c5a0:	68bb      	ldr	r3, [r7, #8]
 802c5a2:	799b      	ldrb	r3, [r3, #6]
 802c5a4:	2b00      	cmp	r3, #0
 802c5a6:	d003      	beq.n	802c5b0 <USBH_ParseEPDesc+0x11e>
 802c5a8:	68bb      	ldr	r3, [r7, #8]
 802c5aa:	799b      	ldrb	r3, [r3, #6]
 802c5ac:	2b10      	cmp	r3, #16
 802c5ae:	d90e      	bls.n	802c5ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802c5b0:	2303      	movs	r3, #3
 802c5b2:	75fb      	strb	r3, [r7, #23]
 802c5b4:	e00b      	b.n	802c5ce <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 802c5b6:	68bb      	ldr	r3, [r7, #8]
 802c5b8:	78db      	ldrb	r3, [r3, #3]
 802c5ba:	f003 0303 	and.w	r3, r3, #3
 802c5be:	2b03      	cmp	r3, #3
 802c5c0:	d105      	bne.n	802c5ce <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 802c5c2:	68bb      	ldr	r3, [r7, #8]
 802c5c4:	799b      	ldrb	r3, [r3, #6]
 802c5c6:	2b00      	cmp	r3, #0
 802c5c8:	d101      	bne.n	802c5ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802c5ca:	2303      	movs	r3, #3
 802c5cc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 802c5ce:	7dfb      	ldrb	r3, [r7, #23]
}
 802c5d0:	4618      	mov	r0, r3
 802c5d2:	371c      	adds	r7, #28
 802c5d4:	46bd      	mov	sp, r7
 802c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c5da:	4770      	bx	lr

0802c5dc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 802c5dc:	b480      	push	{r7}
 802c5de:	b087      	sub	sp, #28
 802c5e0:	af00      	add	r7, sp, #0
 802c5e2:	60f8      	str	r0, [r7, #12]
 802c5e4:	60b9      	str	r1, [r7, #8]
 802c5e6:	4613      	mov	r3, r2
 802c5e8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 802c5ea:	68fb      	ldr	r3, [r7, #12]
 802c5ec:	3301      	adds	r3, #1
 802c5ee:	781b      	ldrb	r3, [r3, #0]
 802c5f0:	2b03      	cmp	r3, #3
 802c5f2:	d120      	bne.n	802c636 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 802c5f4:	68fb      	ldr	r3, [r7, #12]
 802c5f6:	781b      	ldrb	r3, [r3, #0]
 802c5f8:	1e9a      	subs	r2, r3, #2
 802c5fa:	88fb      	ldrh	r3, [r7, #6]
 802c5fc:	4293      	cmp	r3, r2
 802c5fe:	bf28      	it	cs
 802c600:	4613      	movcs	r3, r2
 802c602:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 802c604:	68fb      	ldr	r3, [r7, #12]
 802c606:	3302      	adds	r3, #2
 802c608:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 802c60a:	2300      	movs	r3, #0
 802c60c:	82fb      	strh	r3, [r7, #22]
 802c60e:	e00b      	b.n	802c628 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 802c610:	8afb      	ldrh	r3, [r7, #22]
 802c612:	68fa      	ldr	r2, [r7, #12]
 802c614:	4413      	add	r3, r2
 802c616:	781a      	ldrb	r2, [r3, #0]
 802c618:	68bb      	ldr	r3, [r7, #8]
 802c61a:	701a      	strb	r2, [r3, #0]
      pdest++;
 802c61c:	68bb      	ldr	r3, [r7, #8]
 802c61e:	3301      	adds	r3, #1
 802c620:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 802c622:	8afb      	ldrh	r3, [r7, #22]
 802c624:	3302      	adds	r3, #2
 802c626:	82fb      	strh	r3, [r7, #22]
 802c628:	8afa      	ldrh	r2, [r7, #22]
 802c62a:	8abb      	ldrh	r3, [r7, #20]
 802c62c:	429a      	cmp	r2, r3
 802c62e:	d3ef      	bcc.n	802c610 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 802c630:	68bb      	ldr	r3, [r7, #8]
 802c632:	2200      	movs	r2, #0
 802c634:	701a      	strb	r2, [r3, #0]
  }
}
 802c636:	bf00      	nop
 802c638:	371c      	adds	r7, #28
 802c63a:	46bd      	mov	sp, r7
 802c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c640:	4770      	bx	lr

0802c642 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 802c642:	b480      	push	{r7}
 802c644:	b085      	sub	sp, #20
 802c646:	af00      	add	r7, sp, #0
 802c648:	6078      	str	r0, [r7, #4]
 802c64a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 802c64c:	683b      	ldr	r3, [r7, #0]
 802c64e:	881a      	ldrh	r2, [r3, #0]
 802c650:	687b      	ldr	r3, [r7, #4]
 802c652:	781b      	ldrb	r3, [r3, #0]
 802c654:	b29b      	uxth	r3, r3
 802c656:	4413      	add	r3, r2
 802c658:	b29a      	uxth	r2, r3
 802c65a:	683b      	ldr	r3, [r7, #0]
 802c65c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 802c65e:	687b      	ldr	r3, [r7, #4]
 802c660:	781b      	ldrb	r3, [r3, #0]
 802c662:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 802c664:	687b      	ldr	r3, [r7, #4]
 802c666:	4413      	add	r3, r2
 802c668:	60fb      	str	r3, [r7, #12]

  return (pnext);
 802c66a:	68fb      	ldr	r3, [r7, #12]
}
 802c66c:	4618      	mov	r0, r3
 802c66e:	3714      	adds	r7, #20
 802c670:	46bd      	mov	sp, r7
 802c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c676:	4770      	bx	lr

0802c678 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 802c678:	b580      	push	{r7, lr}
 802c67a:	b086      	sub	sp, #24
 802c67c:	af00      	add	r7, sp, #0
 802c67e:	60f8      	str	r0, [r7, #12]
 802c680:	60b9      	str	r1, [r7, #8]
 802c682:	4613      	mov	r3, r2
 802c684:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 802c686:	2301      	movs	r3, #1
 802c688:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 802c68a:	68fb      	ldr	r3, [r7, #12]
 802c68c:	789b      	ldrb	r3, [r3, #2]
 802c68e:	2b01      	cmp	r3, #1
 802c690:	d002      	beq.n	802c698 <USBH_CtlReq+0x20>
 802c692:	2b02      	cmp	r3, #2
 802c694:	d00f      	beq.n	802c6b6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 802c696:	e027      	b.n	802c6e8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 802c698:	68fb      	ldr	r3, [r7, #12]
 802c69a:	68ba      	ldr	r2, [r7, #8]
 802c69c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 802c69e:	68fb      	ldr	r3, [r7, #12]
 802c6a0:	88fa      	ldrh	r2, [r7, #6]
 802c6a2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 802c6a4:	68fb      	ldr	r3, [r7, #12]
 802c6a6:	2201      	movs	r2, #1
 802c6a8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 802c6aa:	68fb      	ldr	r3, [r7, #12]
 802c6ac:	2202      	movs	r2, #2
 802c6ae:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 802c6b0:	2301      	movs	r3, #1
 802c6b2:	75fb      	strb	r3, [r7, #23]
      break;
 802c6b4:	e018      	b.n	802c6e8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 802c6b6:	68f8      	ldr	r0, [r7, #12]
 802c6b8:	f000 f81c 	bl	802c6f4 <USBH_HandleControl>
 802c6bc:	4603      	mov	r3, r0
 802c6be:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 802c6c0:	7dfb      	ldrb	r3, [r7, #23]
 802c6c2:	2b00      	cmp	r3, #0
 802c6c4:	d002      	beq.n	802c6cc <USBH_CtlReq+0x54>
 802c6c6:	7dfb      	ldrb	r3, [r7, #23]
 802c6c8:	2b03      	cmp	r3, #3
 802c6ca:	d106      	bne.n	802c6da <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 802c6cc:	68fb      	ldr	r3, [r7, #12]
 802c6ce:	2201      	movs	r2, #1
 802c6d0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 802c6d2:	68fb      	ldr	r3, [r7, #12]
 802c6d4:	2200      	movs	r2, #0
 802c6d6:	761a      	strb	r2, [r3, #24]
      break;
 802c6d8:	e005      	b.n	802c6e6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 802c6da:	7dfb      	ldrb	r3, [r7, #23]
 802c6dc:	2b02      	cmp	r3, #2
 802c6de:	d102      	bne.n	802c6e6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 802c6e0:	68fb      	ldr	r3, [r7, #12]
 802c6e2:	2201      	movs	r2, #1
 802c6e4:	709a      	strb	r2, [r3, #2]
      break;
 802c6e6:	bf00      	nop
  }
  return status;
 802c6e8:	7dfb      	ldrb	r3, [r7, #23]
}
 802c6ea:	4618      	mov	r0, r3
 802c6ec:	3718      	adds	r7, #24
 802c6ee:	46bd      	mov	sp, r7
 802c6f0:	bd80      	pop	{r7, pc}
	...

0802c6f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 802c6f4:	b580      	push	{r7, lr}
 802c6f6:	b086      	sub	sp, #24
 802c6f8:	af02      	add	r7, sp, #8
 802c6fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 802c6fc:	2301      	movs	r3, #1
 802c6fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802c700:	2300      	movs	r3, #0
 802c702:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 802c704:	687b      	ldr	r3, [r7, #4]
 802c706:	7e1b      	ldrb	r3, [r3, #24]
 802c708:	3b01      	subs	r3, #1
 802c70a:	2b0a      	cmp	r3, #10
 802c70c:	f200 8156 	bhi.w	802c9bc <USBH_HandleControl+0x2c8>
 802c710:	a201      	add	r2, pc, #4	; (adr r2, 802c718 <USBH_HandleControl+0x24>)
 802c712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c716:	bf00      	nop
 802c718:	0802c745 	.word	0x0802c745
 802c71c:	0802c75f 	.word	0x0802c75f
 802c720:	0802c7c9 	.word	0x0802c7c9
 802c724:	0802c7ef 	.word	0x0802c7ef
 802c728:	0802c827 	.word	0x0802c827
 802c72c:	0802c851 	.word	0x0802c851
 802c730:	0802c8a3 	.word	0x0802c8a3
 802c734:	0802c8c5 	.word	0x0802c8c5
 802c738:	0802c901 	.word	0x0802c901
 802c73c:	0802c927 	.word	0x0802c927
 802c740:	0802c965 	.word	0x0802c965
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 802c744:	687b      	ldr	r3, [r7, #4]
 802c746:	f103 0110 	add.w	r1, r3, #16
 802c74a:	687b      	ldr	r3, [r7, #4]
 802c74c:	795b      	ldrb	r3, [r3, #5]
 802c74e:	461a      	mov	r2, r3
 802c750:	6878      	ldr	r0, [r7, #4]
 802c752:	f000 f943 	bl	802c9dc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 802c756:	687b      	ldr	r3, [r7, #4]
 802c758:	2202      	movs	r2, #2
 802c75a:	761a      	strb	r2, [r3, #24]
      break;
 802c75c:	e139      	b.n	802c9d2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802c75e:	687b      	ldr	r3, [r7, #4]
 802c760:	795b      	ldrb	r3, [r3, #5]
 802c762:	4619      	mov	r1, r3
 802c764:	6878      	ldr	r0, [r7, #4]
 802c766:	f000 fccb 	bl	802d100 <USBH_LL_GetURBState>
 802c76a:	4603      	mov	r3, r0
 802c76c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 802c76e:	7bbb      	ldrb	r3, [r7, #14]
 802c770:	2b01      	cmp	r3, #1
 802c772:	d11e      	bne.n	802c7b2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 802c774:	687b      	ldr	r3, [r7, #4]
 802c776:	7c1b      	ldrb	r3, [r3, #16]
 802c778:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802c77c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 802c77e:	687b      	ldr	r3, [r7, #4]
 802c780:	8adb      	ldrh	r3, [r3, #22]
 802c782:	2b00      	cmp	r3, #0
 802c784:	d00a      	beq.n	802c79c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 802c786:	7b7b      	ldrb	r3, [r7, #13]
 802c788:	2b80      	cmp	r3, #128	; 0x80
 802c78a:	d103      	bne.n	802c794 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 802c78c:	687b      	ldr	r3, [r7, #4]
 802c78e:	2203      	movs	r2, #3
 802c790:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802c792:	e115      	b.n	802c9c0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 802c794:	687b      	ldr	r3, [r7, #4]
 802c796:	2205      	movs	r2, #5
 802c798:	761a      	strb	r2, [r3, #24]
      break;
 802c79a:	e111      	b.n	802c9c0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 802c79c:	7b7b      	ldrb	r3, [r7, #13]
 802c79e:	2b80      	cmp	r3, #128	; 0x80
 802c7a0:	d103      	bne.n	802c7aa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 802c7a2:	687b      	ldr	r3, [r7, #4]
 802c7a4:	2209      	movs	r2, #9
 802c7a6:	761a      	strb	r2, [r3, #24]
      break;
 802c7a8:	e10a      	b.n	802c9c0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 802c7aa:	687b      	ldr	r3, [r7, #4]
 802c7ac:	2207      	movs	r2, #7
 802c7ae:	761a      	strb	r2, [r3, #24]
      break;
 802c7b0:	e106      	b.n	802c9c0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 802c7b2:	7bbb      	ldrb	r3, [r7, #14]
 802c7b4:	2b04      	cmp	r3, #4
 802c7b6:	d003      	beq.n	802c7c0 <USBH_HandleControl+0xcc>
 802c7b8:	7bbb      	ldrb	r3, [r7, #14]
 802c7ba:	2b02      	cmp	r3, #2
 802c7bc:	f040 8100 	bne.w	802c9c0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 802c7c0:	687b      	ldr	r3, [r7, #4]
 802c7c2:	220b      	movs	r2, #11
 802c7c4:	761a      	strb	r2, [r3, #24]
      break;
 802c7c6:	e0fb      	b.n	802c9c0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 802c7c8:	687b      	ldr	r3, [r7, #4]
 802c7ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802c7ce:	b29a      	uxth	r2, r3
 802c7d0:	687b      	ldr	r3, [r7, #4]
 802c7d2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 802c7d4:	687b      	ldr	r3, [r7, #4]
 802c7d6:	6899      	ldr	r1, [r3, #8]
 802c7d8:	687b      	ldr	r3, [r7, #4]
 802c7da:	899a      	ldrh	r2, [r3, #12]
 802c7dc:	687b      	ldr	r3, [r7, #4]
 802c7de:	791b      	ldrb	r3, [r3, #4]
 802c7e0:	6878      	ldr	r0, [r7, #4]
 802c7e2:	f000 f93a 	bl	802ca5a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 802c7e6:	687b      	ldr	r3, [r7, #4]
 802c7e8:	2204      	movs	r2, #4
 802c7ea:	761a      	strb	r2, [r3, #24]
      break;
 802c7ec:	e0f1      	b.n	802c9d2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802c7ee:	687b      	ldr	r3, [r7, #4]
 802c7f0:	791b      	ldrb	r3, [r3, #4]
 802c7f2:	4619      	mov	r1, r3
 802c7f4:	6878      	ldr	r0, [r7, #4]
 802c7f6:	f000 fc83 	bl	802d100 <USBH_LL_GetURBState>
 802c7fa:	4603      	mov	r3, r0
 802c7fc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 802c7fe:	7bbb      	ldrb	r3, [r7, #14]
 802c800:	2b01      	cmp	r3, #1
 802c802:	d102      	bne.n	802c80a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 802c804:	687b      	ldr	r3, [r7, #4]
 802c806:	2209      	movs	r2, #9
 802c808:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 802c80a:	7bbb      	ldrb	r3, [r7, #14]
 802c80c:	2b05      	cmp	r3, #5
 802c80e:	d102      	bne.n	802c816 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 802c810:	2303      	movs	r3, #3
 802c812:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802c814:	e0d6      	b.n	802c9c4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 802c816:	7bbb      	ldrb	r3, [r7, #14]
 802c818:	2b04      	cmp	r3, #4
 802c81a:	f040 80d3 	bne.w	802c9c4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 802c81e:	687b      	ldr	r3, [r7, #4]
 802c820:	220b      	movs	r2, #11
 802c822:	761a      	strb	r2, [r3, #24]
      break;
 802c824:	e0ce      	b.n	802c9c4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 802c826:	687b      	ldr	r3, [r7, #4]
 802c828:	6899      	ldr	r1, [r3, #8]
 802c82a:	687b      	ldr	r3, [r7, #4]
 802c82c:	899a      	ldrh	r2, [r3, #12]
 802c82e:	687b      	ldr	r3, [r7, #4]
 802c830:	795b      	ldrb	r3, [r3, #5]
 802c832:	2001      	movs	r0, #1
 802c834:	9000      	str	r0, [sp, #0]
 802c836:	6878      	ldr	r0, [r7, #4]
 802c838:	f000 f8ea 	bl	802ca10 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 802c83c:	687b      	ldr	r3, [r7, #4]
 802c83e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802c842:	b29a      	uxth	r2, r3
 802c844:	687b      	ldr	r3, [r7, #4]
 802c846:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 802c848:	687b      	ldr	r3, [r7, #4]
 802c84a:	2206      	movs	r2, #6
 802c84c:	761a      	strb	r2, [r3, #24]
      break;
 802c84e:	e0c0      	b.n	802c9d2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802c850:	687b      	ldr	r3, [r7, #4]
 802c852:	795b      	ldrb	r3, [r3, #5]
 802c854:	4619      	mov	r1, r3
 802c856:	6878      	ldr	r0, [r7, #4]
 802c858:	f000 fc52 	bl	802d100 <USBH_LL_GetURBState>
 802c85c:	4603      	mov	r3, r0
 802c85e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802c860:	7bbb      	ldrb	r3, [r7, #14]
 802c862:	2b01      	cmp	r3, #1
 802c864:	d103      	bne.n	802c86e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 802c866:	687b      	ldr	r3, [r7, #4]
 802c868:	2207      	movs	r2, #7
 802c86a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802c86c:	e0ac      	b.n	802c9c8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 802c86e:	7bbb      	ldrb	r3, [r7, #14]
 802c870:	2b05      	cmp	r3, #5
 802c872:	d105      	bne.n	802c880 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 802c874:	687b      	ldr	r3, [r7, #4]
 802c876:	220c      	movs	r2, #12
 802c878:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 802c87a:	2303      	movs	r3, #3
 802c87c:	73fb      	strb	r3, [r7, #15]
      break;
 802c87e:	e0a3      	b.n	802c9c8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 802c880:	7bbb      	ldrb	r3, [r7, #14]
 802c882:	2b02      	cmp	r3, #2
 802c884:	d103      	bne.n	802c88e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 802c886:	687b      	ldr	r3, [r7, #4]
 802c888:	2205      	movs	r2, #5
 802c88a:	761a      	strb	r2, [r3, #24]
      break;
 802c88c:	e09c      	b.n	802c9c8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 802c88e:	7bbb      	ldrb	r3, [r7, #14]
 802c890:	2b04      	cmp	r3, #4
 802c892:	f040 8099 	bne.w	802c9c8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 802c896:	687b      	ldr	r3, [r7, #4]
 802c898:	220b      	movs	r2, #11
 802c89a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 802c89c:	2302      	movs	r3, #2
 802c89e:	73fb      	strb	r3, [r7, #15]
      break;
 802c8a0:	e092      	b.n	802c9c8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 802c8a2:	687b      	ldr	r3, [r7, #4]
 802c8a4:	791b      	ldrb	r3, [r3, #4]
 802c8a6:	2200      	movs	r2, #0
 802c8a8:	2100      	movs	r1, #0
 802c8aa:	6878      	ldr	r0, [r7, #4]
 802c8ac:	f000 f8d5 	bl	802ca5a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802c8b0:	687b      	ldr	r3, [r7, #4]
 802c8b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802c8b6:	b29a      	uxth	r2, r3
 802c8b8:	687b      	ldr	r3, [r7, #4]
 802c8ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 802c8bc:	687b      	ldr	r3, [r7, #4]
 802c8be:	2208      	movs	r2, #8
 802c8c0:	761a      	strb	r2, [r3, #24]

      break;
 802c8c2:	e086      	b.n	802c9d2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802c8c4:	687b      	ldr	r3, [r7, #4]
 802c8c6:	791b      	ldrb	r3, [r3, #4]
 802c8c8:	4619      	mov	r1, r3
 802c8ca:	6878      	ldr	r0, [r7, #4]
 802c8cc:	f000 fc18 	bl	802d100 <USBH_LL_GetURBState>
 802c8d0:	4603      	mov	r3, r0
 802c8d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802c8d4:	7bbb      	ldrb	r3, [r7, #14]
 802c8d6:	2b01      	cmp	r3, #1
 802c8d8:	d105      	bne.n	802c8e6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 802c8da:	687b      	ldr	r3, [r7, #4]
 802c8dc:	220d      	movs	r2, #13
 802c8de:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 802c8e0:	2300      	movs	r3, #0
 802c8e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802c8e4:	e072      	b.n	802c9cc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 802c8e6:	7bbb      	ldrb	r3, [r7, #14]
 802c8e8:	2b04      	cmp	r3, #4
 802c8ea:	d103      	bne.n	802c8f4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 802c8ec:	687b      	ldr	r3, [r7, #4]
 802c8ee:	220b      	movs	r2, #11
 802c8f0:	761a      	strb	r2, [r3, #24]
      break;
 802c8f2:	e06b      	b.n	802c9cc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 802c8f4:	7bbb      	ldrb	r3, [r7, #14]
 802c8f6:	2b05      	cmp	r3, #5
 802c8f8:	d168      	bne.n	802c9cc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 802c8fa:	2303      	movs	r3, #3
 802c8fc:	73fb      	strb	r3, [r7, #15]
      break;
 802c8fe:	e065      	b.n	802c9cc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 802c900:	687b      	ldr	r3, [r7, #4]
 802c902:	795b      	ldrb	r3, [r3, #5]
 802c904:	2201      	movs	r2, #1
 802c906:	9200      	str	r2, [sp, #0]
 802c908:	2200      	movs	r2, #0
 802c90a:	2100      	movs	r1, #0
 802c90c:	6878      	ldr	r0, [r7, #4]
 802c90e:	f000 f87f 	bl	802ca10 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802c912:	687b      	ldr	r3, [r7, #4]
 802c914:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802c918:	b29a      	uxth	r2, r3
 802c91a:	687b      	ldr	r3, [r7, #4]
 802c91c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 802c91e:	687b      	ldr	r3, [r7, #4]
 802c920:	220a      	movs	r2, #10
 802c922:	761a      	strb	r2, [r3, #24]
      break;
 802c924:	e055      	b.n	802c9d2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802c926:	687b      	ldr	r3, [r7, #4]
 802c928:	795b      	ldrb	r3, [r3, #5]
 802c92a:	4619      	mov	r1, r3
 802c92c:	6878      	ldr	r0, [r7, #4]
 802c92e:	f000 fbe7 	bl	802d100 <USBH_LL_GetURBState>
 802c932:	4603      	mov	r3, r0
 802c934:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 802c936:	7bbb      	ldrb	r3, [r7, #14]
 802c938:	2b01      	cmp	r3, #1
 802c93a:	d105      	bne.n	802c948 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 802c93c:	2300      	movs	r3, #0
 802c93e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 802c940:	687b      	ldr	r3, [r7, #4]
 802c942:	220d      	movs	r2, #13
 802c944:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802c946:	e043      	b.n	802c9d0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 802c948:	7bbb      	ldrb	r3, [r7, #14]
 802c94a:	2b02      	cmp	r3, #2
 802c94c:	d103      	bne.n	802c956 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 802c94e:	687b      	ldr	r3, [r7, #4]
 802c950:	2209      	movs	r2, #9
 802c952:	761a      	strb	r2, [r3, #24]
      break;
 802c954:	e03c      	b.n	802c9d0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 802c956:	7bbb      	ldrb	r3, [r7, #14]
 802c958:	2b04      	cmp	r3, #4
 802c95a:	d139      	bne.n	802c9d0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 802c95c:	687b      	ldr	r3, [r7, #4]
 802c95e:	220b      	movs	r2, #11
 802c960:	761a      	strb	r2, [r3, #24]
      break;
 802c962:	e035      	b.n	802c9d0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 802c964:	687b      	ldr	r3, [r7, #4]
 802c966:	7e5b      	ldrb	r3, [r3, #25]
 802c968:	3301      	adds	r3, #1
 802c96a:	b2da      	uxtb	r2, r3
 802c96c:	687b      	ldr	r3, [r7, #4]
 802c96e:	765a      	strb	r2, [r3, #25]
 802c970:	687b      	ldr	r3, [r7, #4]
 802c972:	7e5b      	ldrb	r3, [r3, #25]
 802c974:	2b02      	cmp	r3, #2
 802c976:	d806      	bhi.n	802c986 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 802c978:	687b      	ldr	r3, [r7, #4]
 802c97a:	2201      	movs	r2, #1
 802c97c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 802c97e:	687b      	ldr	r3, [r7, #4]
 802c980:	2201      	movs	r2, #1
 802c982:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 802c984:	e025      	b.n	802c9d2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 802c986:	687b      	ldr	r3, [r7, #4]
 802c988:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c98c:	2106      	movs	r1, #6
 802c98e:	6878      	ldr	r0, [r7, #4]
 802c990:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 802c992:	687b      	ldr	r3, [r7, #4]
 802c994:	2200      	movs	r2, #0
 802c996:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c998:	687b      	ldr	r3, [r7, #4]
 802c99a:	795b      	ldrb	r3, [r3, #5]
 802c99c:	4619      	mov	r1, r3
 802c99e:	6878      	ldr	r0, [r7, #4]
 802c9a0:	f000 f90c 	bl	802cbbc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c9a4:	687b      	ldr	r3, [r7, #4]
 802c9a6:	791b      	ldrb	r3, [r3, #4]
 802c9a8:	4619      	mov	r1, r3
 802c9aa:	6878      	ldr	r0, [r7, #4]
 802c9ac:	f000 f906 	bl	802cbbc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 802c9b0:	687b      	ldr	r3, [r7, #4]
 802c9b2:	2200      	movs	r2, #0
 802c9b4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 802c9b6:	2302      	movs	r3, #2
 802c9b8:	73fb      	strb	r3, [r7, #15]
      break;
 802c9ba:	e00a      	b.n	802c9d2 <USBH_HandleControl+0x2de>

    default:
      break;
 802c9bc:	bf00      	nop
 802c9be:	e008      	b.n	802c9d2 <USBH_HandleControl+0x2de>
      break;
 802c9c0:	bf00      	nop
 802c9c2:	e006      	b.n	802c9d2 <USBH_HandleControl+0x2de>
      break;
 802c9c4:	bf00      	nop
 802c9c6:	e004      	b.n	802c9d2 <USBH_HandleControl+0x2de>
      break;
 802c9c8:	bf00      	nop
 802c9ca:	e002      	b.n	802c9d2 <USBH_HandleControl+0x2de>
      break;
 802c9cc:	bf00      	nop
 802c9ce:	e000      	b.n	802c9d2 <USBH_HandleControl+0x2de>
      break;
 802c9d0:	bf00      	nop
  }

  return status;
 802c9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 802c9d4:	4618      	mov	r0, r3
 802c9d6:	3710      	adds	r7, #16
 802c9d8:	46bd      	mov	sp, r7
 802c9da:	bd80      	pop	{r7, pc}

0802c9dc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 802c9dc:	b580      	push	{r7, lr}
 802c9de:	b088      	sub	sp, #32
 802c9e0:	af04      	add	r7, sp, #16
 802c9e2:	60f8      	str	r0, [r7, #12]
 802c9e4:	60b9      	str	r1, [r7, #8]
 802c9e6:	4613      	mov	r3, r2
 802c9e8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802c9ea:	79f9      	ldrb	r1, [r7, #7]
 802c9ec:	2300      	movs	r3, #0
 802c9ee:	9303      	str	r3, [sp, #12]
 802c9f0:	2308      	movs	r3, #8
 802c9f2:	9302      	str	r3, [sp, #8]
 802c9f4:	68bb      	ldr	r3, [r7, #8]
 802c9f6:	9301      	str	r3, [sp, #4]
 802c9f8:	2300      	movs	r3, #0
 802c9fa:	9300      	str	r3, [sp, #0]
 802c9fc:	2300      	movs	r3, #0
 802c9fe:	2200      	movs	r2, #0
 802ca00:	68f8      	ldr	r0, [r7, #12]
 802ca02:	f000 fb4c 	bl	802d09e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 802ca06:	2300      	movs	r3, #0
}
 802ca08:	4618      	mov	r0, r3
 802ca0a:	3710      	adds	r7, #16
 802ca0c:	46bd      	mov	sp, r7
 802ca0e:	bd80      	pop	{r7, pc}

0802ca10 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 802ca10:	b580      	push	{r7, lr}
 802ca12:	b088      	sub	sp, #32
 802ca14:	af04      	add	r7, sp, #16
 802ca16:	60f8      	str	r0, [r7, #12]
 802ca18:	60b9      	str	r1, [r7, #8]
 802ca1a:	4611      	mov	r1, r2
 802ca1c:	461a      	mov	r2, r3
 802ca1e:	460b      	mov	r3, r1
 802ca20:	80fb      	strh	r3, [r7, #6]
 802ca22:	4613      	mov	r3, r2
 802ca24:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802ca26:	68fb      	ldr	r3, [r7, #12]
 802ca28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802ca2c:	2b00      	cmp	r3, #0
 802ca2e:	d001      	beq.n	802ca34 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 802ca30:	2300      	movs	r3, #0
 802ca32:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802ca34:	7979      	ldrb	r1, [r7, #5]
 802ca36:	7e3b      	ldrb	r3, [r7, #24]
 802ca38:	9303      	str	r3, [sp, #12]
 802ca3a:	88fb      	ldrh	r3, [r7, #6]
 802ca3c:	9302      	str	r3, [sp, #8]
 802ca3e:	68bb      	ldr	r3, [r7, #8]
 802ca40:	9301      	str	r3, [sp, #4]
 802ca42:	2301      	movs	r3, #1
 802ca44:	9300      	str	r3, [sp, #0]
 802ca46:	2300      	movs	r3, #0
 802ca48:	2200      	movs	r2, #0
 802ca4a:	68f8      	ldr	r0, [r7, #12]
 802ca4c:	f000 fb27 	bl	802d09e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 802ca50:	2300      	movs	r3, #0
}
 802ca52:	4618      	mov	r0, r3
 802ca54:	3710      	adds	r7, #16
 802ca56:	46bd      	mov	sp, r7
 802ca58:	bd80      	pop	{r7, pc}

0802ca5a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 802ca5a:	b580      	push	{r7, lr}
 802ca5c:	b088      	sub	sp, #32
 802ca5e:	af04      	add	r7, sp, #16
 802ca60:	60f8      	str	r0, [r7, #12]
 802ca62:	60b9      	str	r1, [r7, #8]
 802ca64:	4611      	mov	r1, r2
 802ca66:	461a      	mov	r2, r3
 802ca68:	460b      	mov	r3, r1
 802ca6a:	80fb      	strh	r3, [r7, #6]
 802ca6c:	4613      	mov	r3, r2
 802ca6e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802ca70:	7979      	ldrb	r1, [r7, #5]
 802ca72:	2300      	movs	r3, #0
 802ca74:	9303      	str	r3, [sp, #12]
 802ca76:	88fb      	ldrh	r3, [r7, #6]
 802ca78:	9302      	str	r3, [sp, #8]
 802ca7a:	68bb      	ldr	r3, [r7, #8]
 802ca7c:	9301      	str	r3, [sp, #4]
 802ca7e:	2301      	movs	r3, #1
 802ca80:	9300      	str	r3, [sp, #0]
 802ca82:	2300      	movs	r3, #0
 802ca84:	2201      	movs	r2, #1
 802ca86:	68f8      	ldr	r0, [r7, #12]
 802ca88:	f000 fb09 	bl	802d09e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802ca8c:	2300      	movs	r3, #0

}
 802ca8e:	4618      	mov	r0, r3
 802ca90:	3710      	adds	r7, #16
 802ca92:	46bd      	mov	sp, r7
 802ca94:	bd80      	pop	{r7, pc}

0802ca96 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 802ca96:	b580      	push	{r7, lr}
 802ca98:	b088      	sub	sp, #32
 802ca9a:	af04      	add	r7, sp, #16
 802ca9c:	60f8      	str	r0, [r7, #12]
 802ca9e:	60b9      	str	r1, [r7, #8]
 802caa0:	4611      	mov	r1, r2
 802caa2:	461a      	mov	r2, r3
 802caa4:	460b      	mov	r3, r1
 802caa6:	80fb      	strh	r3, [r7, #6]
 802caa8:	4613      	mov	r3, r2
 802caaa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802caac:	68fb      	ldr	r3, [r7, #12]
 802caae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802cab2:	2b00      	cmp	r3, #0
 802cab4:	d001      	beq.n	802caba <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 802cab6:	2300      	movs	r3, #0
 802cab8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802caba:	7979      	ldrb	r1, [r7, #5]
 802cabc:	7e3b      	ldrb	r3, [r7, #24]
 802cabe:	9303      	str	r3, [sp, #12]
 802cac0:	88fb      	ldrh	r3, [r7, #6]
 802cac2:	9302      	str	r3, [sp, #8]
 802cac4:	68bb      	ldr	r3, [r7, #8]
 802cac6:	9301      	str	r3, [sp, #4]
 802cac8:	2301      	movs	r3, #1
 802caca:	9300      	str	r3, [sp, #0]
 802cacc:	2302      	movs	r3, #2
 802cace:	2200      	movs	r2, #0
 802cad0:	68f8      	ldr	r0, [r7, #12]
 802cad2:	f000 fae4 	bl	802d09e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 802cad6:	2300      	movs	r3, #0
}
 802cad8:	4618      	mov	r0, r3
 802cada:	3710      	adds	r7, #16
 802cadc:	46bd      	mov	sp, r7
 802cade:	bd80      	pop	{r7, pc}

0802cae0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 802cae0:	b580      	push	{r7, lr}
 802cae2:	b088      	sub	sp, #32
 802cae4:	af04      	add	r7, sp, #16
 802cae6:	60f8      	str	r0, [r7, #12]
 802cae8:	60b9      	str	r1, [r7, #8]
 802caea:	4611      	mov	r1, r2
 802caec:	461a      	mov	r2, r3
 802caee:	460b      	mov	r3, r1
 802caf0:	80fb      	strh	r3, [r7, #6]
 802caf2:	4613      	mov	r3, r2
 802caf4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802caf6:	7979      	ldrb	r1, [r7, #5]
 802caf8:	2300      	movs	r3, #0
 802cafa:	9303      	str	r3, [sp, #12]
 802cafc:	88fb      	ldrh	r3, [r7, #6]
 802cafe:	9302      	str	r3, [sp, #8]
 802cb00:	68bb      	ldr	r3, [r7, #8]
 802cb02:	9301      	str	r3, [sp, #4]
 802cb04:	2301      	movs	r3, #1
 802cb06:	9300      	str	r3, [sp, #0]
 802cb08:	2302      	movs	r3, #2
 802cb0a:	2201      	movs	r2, #1
 802cb0c:	68f8      	ldr	r0, [r7, #12]
 802cb0e:	f000 fac6 	bl	802d09e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802cb12:	2300      	movs	r3, #0
}
 802cb14:	4618      	mov	r0, r3
 802cb16:	3710      	adds	r7, #16
 802cb18:	46bd      	mov	sp, r7
 802cb1a:	bd80      	pop	{r7, pc}

0802cb1c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802cb1c:	b580      	push	{r7, lr}
 802cb1e:	b086      	sub	sp, #24
 802cb20:	af04      	add	r7, sp, #16
 802cb22:	6078      	str	r0, [r7, #4]
 802cb24:	4608      	mov	r0, r1
 802cb26:	4611      	mov	r1, r2
 802cb28:	461a      	mov	r2, r3
 802cb2a:	4603      	mov	r3, r0
 802cb2c:	70fb      	strb	r3, [r7, #3]
 802cb2e:	460b      	mov	r3, r1
 802cb30:	70bb      	strb	r3, [r7, #2]
 802cb32:	4613      	mov	r3, r2
 802cb34:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 802cb36:	7878      	ldrb	r0, [r7, #1]
 802cb38:	78ba      	ldrb	r2, [r7, #2]
 802cb3a:	78f9      	ldrb	r1, [r7, #3]
 802cb3c:	8b3b      	ldrh	r3, [r7, #24]
 802cb3e:	9302      	str	r3, [sp, #8]
 802cb40:	7d3b      	ldrb	r3, [r7, #20]
 802cb42:	9301      	str	r3, [sp, #4]
 802cb44:	7c3b      	ldrb	r3, [r7, #16]
 802cb46:	9300      	str	r3, [sp, #0]
 802cb48:	4603      	mov	r3, r0
 802cb4a:	6878      	ldr	r0, [r7, #4]
 802cb4c:	f000 fa59 	bl	802d002 <USBH_LL_OpenPipe>

  return USBH_OK;
 802cb50:	2300      	movs	r3, #0
}
 802cb52:	4618      	mov	r0, r3
 802cb54:	3708      	adds	r7, #8
 802cb56:	46bd      	mov	sp, r7
 802cb58:	bd80      	pop	{r7, pc}

0802cb5a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 802cb5a:	b580      	push	{r7, lr}
 802cb5c:	b082      	sub	sp, #8
 802cb5e:	af00      	add	r7, sp, #0
 802cb60:	6078      	str	r0, [r7, #4]
 802cb62:	460b      	mov	r3, r1
 802cb64:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 802cb66:	78fb      	ldrb	r3, [r7, #3]
 802cb68:	4619      	mov	r1, r3
 802cb6a:	6878      	ldr	r0, [r7, #4]
 802cb6c:	f000 fa78 	bl	802d060 <USBH_LL_ClosePipe>

  return USBH_OK;
 802cb70:	2300      	movs	r3, #0
}
 802cb72:	4618      	mov	r0, r3
 802cb74:	3708      	adds	r7, #8
 802cb76:	46bd      	mov	sp, r7
 802cb78:	bd80      	pop	{r7, pc}

0802cb7a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 802cb7a:	b580      	push	{r7, lr}
 802cb7c:	b084      	sub	sp, #16
 802cb7e:	af00      	add	r7, sp, #0
 802cb80:	6078      	str	r0, [r7, #4]
 802cb82:	460b      	mov	r3, r1
 802cb84:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 802cb86:	6878      	ldr	r0, [r7, #4]
 802cb88:	f000 f836 	bl	802cbf8 <USBH_GetFreePipe>
 802cb8c:	4603      	mov	r3, r0
 802cb8e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 802cb90:	89fb      	ldrh	r3, [r7, #14]
 802cb92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802cb96:	4293      	cmp	r3, r2
 802cb98:	d00a      	beq.n	802cbb0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 802cb9a:	78fa      	ldrb	r2, [r7, #3]
 802cb9c:	89fb      	ldrh	r3, [r7, #14]
 802cb9e:	f003 030f 	and.w	r3, r3, #15
 802cba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802cba6:	6879      	ldr	r1, [r7, #4]
 802cba8:	33e0      	adds	r3, #224	; 0xe0
 802cbaa:	009b      	lsls	r3, r3, #2
 802cbac:	440b      	add	r3, r1
 802cbae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 802cbb0:	89fb      	ldrh	r3, [r7, #14]
 802cbb2:	b2db      	uxtb	r3, r3
}
 802cbb4:	4618      	mov	r0, r3
 802cbb6:	3710      	adds	r7, #16
 802cbb8:	46bd      	mov	sp, r7
 802cbba:	bd80      	pop	{r7, pc}

0802cbbc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 802cbbc:	b480      	push	{r7}
 802cbbe:	b083      	sub	sp, #12
 802cbc0:	af00      	add	r7, sp, #0
 802cbc2:	6078      	str	r0, [r7, #4]
 802cbc4:	460b      	mov	r3, r1
 802cbc6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 802cbc8:	78fb      	ldrb	r3, [r7, #3]
 802cbca:	2b0f      	cmp	r3, #15
 802cbcc:	d80d      	bhi.n	802cbea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 802cbce:	78fb      	ldrb	r3, [r7, #3]
 802cbd0:	687a      	ldr	r2, [r7, #4]
 802cbd2:	33e0      	adds	r3, #224	; 0xe0
 802cbd4:	009b      	lsls	r3, r3, #2
 802cbd6:	4413      	add	r3, r2
 802cbd8:	685a      	ldr	r2, [r3, #4]
 802cbda:	78fb      	ldrb	r3, [r7, #3]
 802cbdc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 802cbe0:	6879      	ldr	r1, [r7, #4]
 802cbe2:	33e0      	adds	r3, #224	; 0xe0
 802cbe4:	009b      	lsls	r3, r3, #2
 802cbe6:	440b      	add	r3, r1
 802cbe8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 802cbea:	2300      	movs	r3, #0
}
 802cbec:	4618      	mov	r0, r3
 802cbee:	370c      	adds	r7, #12
 802cbf0:	46bd      	mov	sp, r7
 802cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cbf6:	4770      	bx	lr

0802cbf8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 802cbf8:	b480      	push	{r7}
 802cbfa:	b085      	sub	sp, #20
 802cbfc:	af00      	add	r7, sp, #0
 802cbfe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 802cc00:	2300      	movs	r3, #0
 802cc02:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802cc04:	2300      	movs	r3, #0
 802cc06:	73fb      	strb	r3, [r7, #15]
 802cc08:	e00f      	b.n	802cc2a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 802cc0a:	7bfb      	ldrb	r3, [r7, #15]
 802cc0c:	687a      	ldr	r2, [r7, #4]
 802cc0e:	33e0      	adds	r3, #224	; 0xe0
 802cc10:	009b      	lsls	r3, r3, #2
 802cc12:	4413      	add	r3, r2
 802cc14:	685b      	ldr	r3, [r3, #4]
 802cc16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802cc1a:	2b00      	cmp	r3, #0
 802cc1c:	d102      	bne.n	802cc24 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 802cc1e:	7bfb      	ldrb	r3, [r7, #15]
 802cc20:	b29b      	uxth	r3, r3
 802cc22:	e007      	b.n	802cc34 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802cc24:	7bfb      	ldrb	r3, [r7, #15]
 802cc26:	3301      	adds	r3, #1
 802cc28:	73fb      	strb	r3, [r7, #15]
 802cc2a:	7bfb      	ldrb	r3, [r7, #15]
 802cc2c:	2b0f      	cmp	r3, #15
 802cc2e:	d9ec      	bls.n	802cc0a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 802cc30:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 802cc34:	4618      	mov	r0, r3
 802cc36:	3714      	adds	r7, #20
 802cc38:	46bd      	mov	sp, r7
 802cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cc3e:	4770      	bx	lr

0802cc40 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 802cc40:	b580      	push	{r7, lr}
 802cc42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 802cc44:	2200      	movs	r2, #0
 802cc46:	490e      	ldr	r1, [pc, #56]	; (802cc80 <MX_USB_HOST_Init+0x40>)
 802cc48:	480e      	ldr	r0, [pc, #56]	; (802cc84 <MX_USB_HOST_Init+0x44>)
 802cc4a:	f7fe fba7 	bl	802b39c <USBH_Init>
 802cc4e:	4603      	mov	r3, r0
 802cc50:	2b00      	cmp	r3, #0
 802cc52:	d001      	beq.n	802cc58 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 802cc54:	f7f4 f928 	bl	8020ea8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 802cc58:	490b      	ldr	r1, [pc, #44]	; (802cc88 <MX_USB_HOST_Init+0x48>)
 802cc5a:	480a      	ldr	r0, [pc, #40]	; (802cc84 <MX_USB_HOST_Init+0x44>)
 802cc5c:	f7fe fc2c 	bl	802b4b8 <USBH_RegisterClass>
 802cc60:	4603      	mov	r3, r0
 802cc62:	2b00      	cmp	r3, #0
 802cc64:	d001      	beq.n	802cc6a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 802cc66:	f7f4 f91f 	bl	8020ea8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 802cc6a:	4806      	ldr	r0, [pc, #24]	; (802cc84 <MX_USB_HOST_Init+0x44>)
 802cc6c:	f7fe fcb0 	bl	802b5d0 <USBH_Start>
 802cc70:	4603      	mov	r3, r0
 802cc72:	2b00      	cmp	r3, #0
 802cc74:	d001      	beq.n	802cc7a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 802cc76:	f7f4 f917 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 802cc7a:	bf00      	nop
 802cc7c:	bd80      	pop	{r7, pc}
 802cc7e:	bf00      	nop
 802cc80:	0802cca1 	.word	0x0802cca1
 802cc84:	20000abc 	.word	0x20000abc
 802cc88:	2000005c 	.word	0x2000005c

0802cc8c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 802cc8c:	b580      	push	{r7, lr}
 802cc8e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 802cc90:	4802      	ldr	r0, [pc, #8]	; (802cc9c <MX_USB_HOST_Process+0x10>)
 802cc92:	f7fe fcad 	bl	802b5f0 <USBH_Process>
}
 802cc96:	bf00      	nop
 802cc98:	bd80      	pop	{r7, pc}
 802cc9a:	bf00      	nop
 802cc9c:	20000abc 	.word	0x20000abc

0802cca0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 802cca0:	b480      	push	{r7}
 802cca2:	b083      	sub	sp, #12
 802cca4:	af00      	add	r7, sp, #0
 802cca6:	6078      	str	r0, [r7, #4]
 802cca8:	460b      	mov	r3, r1
 802ccaa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 802ccac:	78fb      	ldrb	r3, [r7, #3]
 802ccae:	3b01      	subs	r3, #1
 802ccb0:	2b04      	cmp	r3, #4
 802ccb2:	d819      	bhi.n	802cce8 <USBH_UserProcess+0x48>
 802ccb4:	a201      	add	r2, pc, #4	; (adr r2, 802ccbc <USBH_UserProcess+0x1c>)
 802ccb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ccba:	bf00      	nop
 802ccbc:	0802cce9 	.word	0x0802cce9
 802ccc0:	0802ccd9 	.word	0x0802ccd9
 802ccc4:	0802cce9 	.word	0x0802cce9
 802ccc8:	0802cce1 	.word	0x0802cce1
 802cccc:	0802ccd1 	.word	0x0802ccd1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 802ccd0:	4b09      	ldr	r3, [pc, #36]	; (802ccf8 <USBH_UserProcess+0x58>)
 802ccd2:	2203      	movs	r2, #3
 802ccd4:	701a      	strb	r2, [r3, #0]
  break;
 802ccd6:	e008      	b.n	802ccea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 802ccd8:	4b07      	ldr	r3, [pc, #28]	; (802ccf8 <USBH_UserProcess+0x58>)
 802ccda:	2202      	movs	r2, #2
 802ccdc:	701a      	strb	r2, [r3, #0]
  break;
 802ccde:	e004      	b.n	802ccea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 802cce0:	4b05      	ldr	r3, [pc, #20]	; (802ccf8 <USBH_UserProcess+0x58>)
 802cce2:	2201      	movs	r2, #1
 802cce4:	701a      	strb	r2, [r3, #0]
  break;
 802cce6:	e000      	b.n	802ccea <USBH_UserProcess+0x4a>

  default:
  break;
 802cce8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 802ccea:	bf00      	nop
 802ccec:	370c      	adds	r7, #12
 802ccee:	46bd      	mov	sp, r7
 802ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ccf4:	4770      	bx	lr
 802ccf6:	bf00      	nop
 802ccf8:	20000e94 	.word	0x20000e94

0802ccfc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 802ccfc:	b580      	push	{r7, lr}
 802ccfe:	b08a      	sub	sp, #40	; 0x28
 802cd00:	af00      	add	r7, sp, #0
 802cd02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802cd04:	f107 0314 	add.w	r3, r7, #20
 802cd08:	2200      	movs	r2, #0
 802cd0a:	601a      	str	r2, [r3, #0]
 802cd0c:	605a      	str	r2, [r3, #4]
 802cd0e:	609a      	str	r2, [r3, #8]
 802cd10:	60da      	str	r2, [r3, #12]
 802cd12:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 802cd14:	687b      	ldr	r3, [r7, #4]
 802cd16:	681b      	ldr	r3, [r3, #0]
 802cd18:	4a24      	ldr	r2, [pc, #144]	; (802cdac <HAL_HCD_MspInit+0xb0>)
 802cd1a:	4293      	cmp	r3, r2
 802cd1c:	d141      	bne.n	802cda2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802cd1e:	2300      	movs	r3, #0
 802cd20:	613b      	str	r3, [r7, #16]
 802cd22:	4b23      	ldr	r3, [pc, #140]	; (802cdb0 <HAL_HCD_MspInit+0xb4>)
 802cd24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802cd26:	4a22      	ldr	r2, [pc, #136]	; (802cdb0 <HAL_HCD_MspInit+0xb4>)
 802cd28:	f043 0302 	orr.w	r3, r3, #2
 802cd2c:	6313      	str	r3, [r2, #48]	; 0x30
 802cd2e:	4b20      	ldr	r3, [pc, #128]	; (802cdb0 <HAL_HCD_MspInit+0xb4>)
 802cd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802cd32:	f003 0302 	and.w	r3, r3, #2
 802cd36:	613b      	str	r3, [r7, #16]
 802cd38:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 802cd3a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 802cd3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802cd40:	2302      	movs	r3, #2
 802cd42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802cd44:	2300      	movs	r3, #0
 802cd46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802cd48:	2300      	movs	r3, #0
 802cd4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 802cd4c:	230c      	movs	r3, #12
 802cd4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802cd50:	f107 0314 	add.w	r3, r7, #20
 802cd54:	4619      	mov	r1, r3
 802cd56:	4817      	ldr	r0, [pc, #92]	; (802cdb4 <HAL_HCD_MspInit+0xb8>)
 802cd58:	f7f6 ffcc 	bl	8023cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 802cd5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802cd60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802cd62:	2300      	movs	r3, #0
 802cd64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802cd66:	2300      	movs	r3, #0
 802cd68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 802cd6a:	f107 0314 	add.w	r3, r7, #20
 802cd6e:	4619      	mov	r1, r3
 802cd70:	4810      	ldr	r0, [pc, #64]	; (802cdb4 <HAL_HCD_MspInit+0xb8>)
 802cd72:	f7f6 ffbf 	bl	8023cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 802cd76:	2300      	movs	r3, #0
 802cd78:	60fb      	str	r3, [r7, #12]
 802cd7a:	4b0d      	ldr	r3, [pc, #52]	; (802cdb0 <HAL_HCD_MspInit+0xb4>)
 802cd7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802cd7e:	4a0c      	ldr	r2, [pc, #48]	; (802cdb0 <HAL_HCD_MspInit+0xb4>)
 802cd80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802cd84:	6313      	str	r3, [r2, #48]	; 0x30
 802cd86:	4b0a      	ldr	r3, [pc, #40]	; (802cdb0 <HAL_HCD_MspInit+0xb4>)
 802cd88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802cd8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802cd8e:	60fb      	str	r3, [r7, #12]
 802cd90:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 802cd92:	2200      	movs	r2, #0
 802cd94:	2100      	movs	r1, #0
 802cd96:	204d      	movs	r0, #77	; 0x4d
 802cd98:	f7f6 f97a 	bl	8023090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 802cd9c:	204d      	movs	r0, #77	; 0x4d
 802cd9e:	f7f6 f993 	bl	80230c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 802cda2:	bf00      	nop
 802cda4:	3728      	adds	r7, #40	; 0x28
 802cda6:	46bd      	mov	sp, r7
 802cda8:	bd80      	pop	{r7, pc}
 802cdaa:	bf00      	nop
 802cdac:	40040000 	.word	0x40040000
 802cdb0:	40023800 	.word	0x40023800
 802cdb4:	40020400 	.word	0x40020400

0802cdb8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 802cdb8:	b580      	push	{r7, lr}
 802cdba:	b082      	sub	sp, #8
 802cdbc:	af00      	add	r7, sp, #0
 802cdbe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 802cdc0:	687b      	ldr	r3, [r7, #4]
 802cdc2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802cdc6:	4618      	mov	r0, r3
 802cdc8:	f7fe fff1 	bl	802bdae <USBH_LL_IncTimer>
}
 802cdcc:	bf00      	nop
 802cdce:	3708      	adds	r7, #8
 802cdd0:	46bd      	mov	sp, r7
 802cdd2:	bd80      	pop	{r7, pc}

0802cdd4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 802cdd4:	b580      	push	{r7, lr}
 802cdd6:	b082      	sub	sp, #8
 802cdd8:	af00      	add	r7, sp, #0
 802cdda:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 802cddc:	687b      	ldr	r3, [r7, #4]
 802cdde:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802cde2:	4618      	mov	r0, r3
 802cde4:	f7ff f829 	bl	802be3a <USBH_LL_Connect>
}
 802cde8:	bf00      	nop
 802cdea:	3708      	adds	r7, #8
 802cdec:	46bd      	mov	sp, r7
 802cdee:	bd80      	pop	{r7, pc}

0802cdf0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 802cdf0:	b580      	push	{r7, lr}
 802cdf2:	b082      	sub	sp, #8
 802cdf4:	af00      	add	r7, sp, #0
 802cdf6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 802cdf8:	687b      	ldr	r3, [r7, #4]
 802cdfa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802cdfe:	4618      	mov	r0, r3
 802ce00:	f7ff f832 	bl	802be68 <USBH_LL_Disconnect>
}
 802ce04:	bf00      	nop
 802ce06:	3708      	adds	r7, #8
 802ce08:	46bd      	mov	sp, r7
 802ce0a:	bd80      	pop	{r7, pc}

0802ce0c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 802ce0c:	b480      	push	{r7}
 802ce0e:	b083      	sub	sp, #12
 802ce10:	af00      	add	r7, sp, #0
 802ce12:	6078      	str	r0, [r7, #4]
 802ce14:	460b      	mov	r3, r1
 802ce16:	70fb      	strb	r3, [r7, #3]
 802ce18:	4613      	mov	r3, r2
 802ce1a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 802ce1c:	bf00      	nop
 802ce1e:	370c      	adds	r7, #12
 802ce20:	46bd      	mov	sp, r7
 802ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ce26:	4770      	bx	lr

0802ce28 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802ce28:	b580      	push	{r7, lr}
 802ce2a:	b082      	sub	sp, #8
 802ce2c:	af00      	add	r7, sp, #0
 802ce2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 802ce30:	687b      	ldr	r3, [r7, #4]
 802ce32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802ce36:	4618      	mov	r0, r3
 802ce38:	f7fe ffe3 	bl	802be02 <USBH_LL_PortEnabled>
}
 802ce3c:	bf00      	nop
 802ce3e:	3708      	adds	r7, #8
 802ce40:	46bd      	mov	sp, r7
 802ce42:	bd80      	pop	{r7, pc}

0802ce44 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802ce44:	b580      	push	{r7, lr}
 802ce46:	b082      	sub	sp, #8
 802ce48:	af00      	add	r7, sp, #0
 802ce4a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 802ce4c:	687b      	ldr	r3, [r7, #4]
 802ce4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802ce52:	4618      	mov	r0, r3
 802ce54:	f7fe ffe3 	bl	802be1e <USBH_LL_PortDisabled>
}
 802ce58:	bf00      	nop
 802ce5a:	3708      	adds	r7, #8
 802ce5c:	46bd      	mov	sp, r7
 802ce5e:	bd80      	pop	{r7, pc}

0802ce60 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 802ce60:	b580      	push	{r7, lr}
 802ce62:	b082      	sub	sp, #8
 802ce64:	af00      	add	r7, sp, #0
 802ce66:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 802ce68:	687b      	ldr	r3, [r7, #4]
 802ce6a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802ce6e:	2b00      	cmp	r3, #0
 802ce70:	d132      	bne.n	802ced8 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 802ce72:	4a1c      	ldr	r2, [pc, #112]	; (802cee4 <USBH_LL_Init+0x84>)
 802ce74:	687b      	ldr	r3, [r7, #4]
 802ce76:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 802ce7a:	687b      	ldr	r3, [r7, #4]
 802ce7c:	4a19      	ldr	r2, [pc, #100]	; (802cee4 <USBH_LL_Init+0x84>)
 802ce7e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 802ce82:	4b18      	ldr	r3, [pc, #96]	; (802cee4 <USBH_LL_Init+0x84>)
 802ce84:	4a18      	ldr	r2, [pc, #96]	; (802cee8 <USBH_LL_Init+0x88>)
 802ce86:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 802ce88:	4b16      	ldr	r3, [pc, #88]	; (802cee4 <USBH_LL_Init+0x84>)
 802ce8a:	220c      	movs	r2, #12
 802ce8c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 802ce8e:	4b15      	ldr	r3, [pc, #84]	; (802cee4 <USBH_LL_Init+0x84>)
 802ce90:	2201      	movs	r2, #1
 802ce92:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 802ce94:	4b13      	ldr	r3, [pc, #76]	; (802cee4 <USBH_LL_Init+0x84>)
 802ce96:	2200      	movs	r2, #0
 802ce98:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 802ce9a:	4b12      	ldr	r3, [pc, #72]	; (802cee4 <USBH_LL_Init+0x84>)
 802ce9c:	2202      	movs	r2, #2
 802ce9e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 802cea0:	4b10      	ldr	r3, [pc, #64]	; (802cee4 <USBH_LL_Init+0x84>)
 802cea2:	2200      	movs	r2, #0
 802cea4:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 802cea6:	4b0f      	ldr	r3, [pc, #60]	; (802cee4 <USBH_LL_Init+0x84>)
 802cea8:	2200      	movs	r2, #0
 802ceaa:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 802ceac:	4b0d      	ldr	r3, [pc, #52]	; (802cee4 <USBH_LL_Init+0x84>)
 802ceae:	2200      	movs	r2, #0
 802ceb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 802ceb2:	4b0c      	ldr	r3, [pc, #48]	; (802cee4 <USBH_LL_Init+0x84>)
 802ceb4:	2200      	movs	r2, #0
 802ceb6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 802ceb8:	480a      	ldr	r0, [pc, #40]	; (802cee4 <USBH_LL_Init+0x84>)
 802ceba:	f7f7 fa05 	bl	80242c8 <HAL_HCD_Init>
 802cebe:	4603      	mov	r3, r0
 802cec0:	2b00      	cmp	r3, #0
 802cec2:	d001      	beq.n	802cec8 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 802cec4:	f7f3 fff0 	bl	8020ea8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 802cec8:	4806      	ldr	r0, [pc, #24]	; (802cee4 <USBH_LL_Init+0x84>)
 802ceca:	f7f7 fde8 	bl	8024a9e <HAL_HCD_GetCurrentFrame>
 802cece:	4603      	mov	r3, r0
 802ced0:	4619      	mov	r1, r3
 802ced2:	6878      	ldr	r0, [r7, #4]
 802ced4:	f7fe ff5c 	bl	802bd90 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 802ced8:	2300      	movs	r3, #0
}
 802ceda:	4618      	mov	r0, r3
 802cedc:	3708      	adds	r7, #8
 802cede:	46bd      	mov	sp, r7
 802cee0:	bd80      	pop	{r7, pc}
 802cee2:	bf00      	nop
 802cee4:	20000e98 	.word	0x20000e98
 802cee8:	40040000 	.word	0x40040000

0802ceec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 802ceec:	b580      	push	{r7, lr}
 802ceee:	b084      	sub	sp, #16
 802cef0:	af00      	add	r7, sp, #0
 802cef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802cef4:	2300      	movs	r3, #0
 802cef6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802cef8:	2300      	movs	r3, #0
 802cefa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 802cefc:	687b      	ldr	r3, [r7, #4]
 802cefe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802cf02:	4618      	mov	r0, r3
 802cf04:	f7f7 fd55 	bl	80249b2 <HAL_HCD_Start>
 802cf08:	4603      	mov	r3, r0
 802cf0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802cf0c:	7bfb      	ldrb	r3, [r7, #15]
 802cf0e:	4618      	mov	r0, r3
 802cf10:	f000 f95c 	bl	802d1cc <USBH_Get_USB_Status>
 802cf14:	4603      	mov	r3, r0
 802cf16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802cf18:	7bbb      	ldrb	r3, [r7, #14]
}
 802cf1a:	4618      	mov	r0, r3
 802cf1c:	3710      	adds	r7, #16
 802cf1e:	46bd      	mov	sp, r7
 802cf20:	bd80      	pop	{r7, pc}

0802cf22 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 802cf22:	b580      	push	{r7, lr}
 802cf24:	b084      	sub	sp, #16
 802cf26:	af00      	add	r7, sp, #0
 802cf28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802cf2a:	2300      	movs	r3, #0
 802cf2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802cf2e:	2300      	movs	r3, #0
 802cf30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 802cf32:	687b      	ldr	r3, [r7, #4]
 802cf34:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802cf38:	4618      	mov	r0, r3
 802cf3a:	f7f7 fd5d 	bl	80249f8 <HAL_HCD_Stop>
 802cf3e:	4603      	mov	r3, r0
 802cf40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802cf42:	7bfb      	ldrb	r3, [r7, #15]
 802cf44:	4618      	mov	r0, r3
 802cf46:	f000 f941 	bl	802d1cc <USBH_Get_USB_Status>
 802cf4a:	4603      	mov	r3, r0
 802cf4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802cf4e:	7bbb      	ldrb	r3, [r7, #14]
}
 802cf50:	4618      	mov	r0, r3
 802cf52:	3710      	adds	r7, #16
 802cf54:	46bd      	mov	sp, r7
 802cf56:	bd80      	pop	{r7, pc}

0802cf58 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 802cf58:	b580      	push	{r7, lr}
 802cf5a:	b084      	sub	sp, #16
 802cf5c:	af00      	add	r7, sp, #0
 802cf5e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 802cf60:	2301      	movs	r3, #1
 802cf62:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 802cf64:	687b      	ldr	r3, [r7, #4]
 802cf66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802cf6a:	4618      	mov	r0, r3
 802cf6c:	f7f7 fda5 	bl	8024aba <HAL_HCD_GetCurrentSpeed>
 802cf70:	4603      	mov	r3, r0
 802cf72:	2b02      	cmp	r3, #2
 802cf74:	d00c      	beq.n	802cf90 <USBH_LL_GetSpeed+0x38>
 802cf76:	2b02      	cmp	r3, #2
 802cf78:	d80d      	bhi.n	802cf96 <USBH_LL_GetSpeed+0x3e>
 802cf7a:	2b00      	cmp	r3, #0
 802cf7c:	d002      	beq.n	802cf84 <USBH_LL_GetSpeed+0x2c>
 802cf7e:	2b01      	cmp	r3, #1
 802cf80:	d003      	beq.n	802cf8a <USBH_LL_GetSpeed+0x32>
 802cf82:	e008      	b.n	802cf96 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 802cf84:	2300      	movs	r3, #0
 802cf86:	73fb      	strb	r3, [r7, #15]
    break;
 802cf88:	e008      	b.n	802cf9c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 802cf8a:	2301      	movs	r3, #1
 802cf8c:	73fb      	strb	r3, [r7, #15]
    break;
 802cf8e:	e005      	b.n	802cf9c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 802cf90:	2302      	movs	r3, #2
 802cf92:	73fb      	strb	r3, [r7, #15]
    break;
 802cf94:	e002      	b.n	802cf9c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 802cf96:	2301      	movs	r3, #1
 802cf98:	73fb      	strb	r3, [r7, #15]
    break;
 802cf9a:	bf00      	nop
  }
  return  speed;
 802cf9c:	7bfb      	ldrb	r3, [r7, #15]
}
 802cf9e:	4618      	mov	r0, r3
 802cfa0:	3710      	adds	r7, #16
 802cfa2:	46bd      	mov	sp, r7
 802cfa4:	bd80      	pop	{r7, pc}

0802cfa6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 802cfa6:	b580      	push	{r7, lr}
 802cfa8:	b084      	sub	sp, #16
 802cfaa:	af00      	add	r7, sp, #0
 802cfac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802cfae:	2300      	movs	r3, #0
 802cfb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802cfb2:	2300      	movs	r3, #0
 802cfb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 802cfb6:	687b      	ldr	r3, [r7, #4]
 802cfb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802cfbc:	4618      	mov	r0, r3
 802cfbe:	f7f7 fd38 	bl	8024a32 <HAL_HCD_ResetPort>
 802cfc2:	4603      	mov	r3, r0
 802cfc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802cfc6:	7bfb      	ldrb	r3, [r7, #15]
 802cfc8:	4618      	mov	r0, r3
 802cfca:	f000 f8ff 	bl	802d1cc <USBH_Get_USB_Status>
 802cfce:	4603      	mov	r3, r0
 802cfd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802cfd2:	7bbb      	ldrb	r3, [r7, #14]
}
 802cfd4:	4618      	mov	r0, r3
 802cfd6:	3710      	adds	r7, #16
 802cfd8:	46bd      	mov	sp, r7
 802cfda:	bd80      	pop	{r7, pc}

0802cfdc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802cfdc:	b580      	push	{r7, lr}
 802cfde:	b082      	sub	sp, #8
 802cfe0:	af00      	add	r7, sp, #0
 802cfe2:	6078      	str	r0, [r7, #4]
 802cfe4:	460b      	mov	r3, r1
 802cfe6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 802cfe8:	687b      	ldr	r3, [r7, #4]
 802cfea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802cfee:	78fa      	ldrb	r2, [r7, #3]
 802cff0:	4611      	mov	r1, r2
 802cff2:	4618      	mov	r0, r3
 802cff4:	f7f7 fd3f 	bl	8024a76 <HAL_HCD_HC_GetXferCount>
 802cff8:	4603      	mov	r3, r0
}
 802cffa:	4618      	mov	r0, r3
 802cffc:	3708      	adds	r7, #8
 802cffe:	46bd      	mov	sp, r7
 802d000:	bd80      	pop	{r7, pc}

0802d002 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802d002:	b590      	push	{r4, r7, lr}
 802d004:	b089      	sub	sp, #36	; 0x24
 802d006:	af04      	add	r7, sp, #16
 802d008:	6078      	str	r0, [r7, #4]
 802d00a:	4608      	mov	r0, r1
 802d00c:	4611      	mov	r1, r2
 802d00e:	461a      	mov	r2, r3
 802d010:	4603      	mov	r3, r0
 802d012:	70fb      	strb	r3, [r7, #3]
 802d014:	460b      	mov	r3, r1
 802d016:	70bb      	strb	r3, [r7, #2]
 802d018:	4613      	mov	r3, r2
 802d01a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d01c:	2300      	movs	r3, #0
 802d01e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d020:	2300      	movs	r3, #0
 802d022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 802d024:	687b      	ldr	r3, [r7, #4]
 802d026:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802d02a:	787c      	ldrb	r4, [r7, #1]
 802d02c:	78ba      	ldrb	r2, [r7, #2]
 802d02e:	78f9      	ldrb	r1, [r7, #3]
 802d030:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802d032:	9302      	str	r3, [sp, #8]
 802d034:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802d038:	9301      	str	r3, [sp, #4]
 802d03a:	f897 3020 	ldrb.w	r3, [r7, #32]
 802d03e:	9300      	str	r3, [sp, #0]
 802d040:	4623      	mov	r3, r4
 802d042:	f7f7 f9a3 	bl	802438c <HAL_HCD_HC_Init>
 802d046:	4603      	mov	r3, r0
 802d048:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 802d04a:	7bfb      	ldrb	r3, [r7, #15]
 802d04c:	4618      	mov	r0, r3
 802d04e:	f000 f8bd 	bl	802d1cc <USBH_Get_USB_Status>
 802d052:	4603      	mov	r3, r0
 802d054:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d056:	7bbb      	ldrb	r3, [r7, #14]
}
 802d058:	4618      	mov	r0, r3
 802d05a:	3714      	adds	r7, #20
 802d05c:	46bd      	mov	sp, r7
 802d05e:	bd90      	pop	{r4, r7, pc}

0802d060 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802d060:	b580      	push	{r7, lr}
 802d062:	b084      	sub	sp, #16
 802d064:	af00      	add	r7, sp, #0
 802d066:	6078      	str	r0, [r7, #4]
 802d068:	460b      	mov	r3, r1
 802d06a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d06c:	2300      	movs	r3, #0
 802d06e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d070:	2300      	movs	r3, #0
 802d072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 802d074:	687b      	ldr	r3, [r7, #4]
 802d076:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d07a:	78fa      	ldrb	r2, [r7, #3]
 802d07c:	4611      	mov	r1, r2
 802d07e:	4618      	mov	r0, r3
 802d080:	f7f7 fa13 	bl	80244aa <HAL_HCD_HC_Halt>
 802d084:	4603      	mov	r3, r0
 802d086:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d088:	7bfb      	ldrb	r3, [r7, #15]
 802d08a:	4618      	mov	r0, r3
 802d08c:	f000 f89e 	bl	802d1cc <USBH_Get_USB_Status>
 802d090:	4603      	mov	r3, r0
 802d092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d094:	7bbb      	ldrb	r3, [r7, #14]
}
 802d096:	4618      	mov	r0, r3
 802d098:	3710      	adds	r7, #16
 802d09a:	46bd      	mov	sp, r7
 802d09c:	bd80      	pop	{r7, pc}

0802d09e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 802d09e:	b590      	push	{r4, r7, lr}
 802d0a0:	b089      	sub	sp, #36	; 0x24
 802d0a2:	af04      	add	r7, sp, #16
 802d0a4:	6078      	str	r0, [r7, #4]
 802d0a6:	4608      	mov	r0, r1
 802d0a8:	4611      	mov	r1, r2
 802d0aa:	461a      	mov	r2, r3
 802d0ac:	4603      	mov	r3, r0
 802d0ae:	70fb      	strb	r3, [r7, #3]
 802d0b0:	460b      	mov	r3, r1
 802d0b2:	70bb      	strb	r3, [r7, #2]
 802d0b4:	4613      	mov	r3, r2
 802d0b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d0b8:	2300      	movs	r3, #0
 802d0ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d0bc:	2300      	movs	r3, #0
 802d0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 802d0c0:	687b      	ldr	r3, [r7, #4]
 802d0c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802d0c6:	787c      	ldrb	r4, [r7, #1]
 802d0c8:	78ba      	ldrb	r2, [r7, #2]
 802d0ca:	78f9      	ldrb	r1, [r7, #3]
 802d0cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802d0d0:	9303      	str	r3, [sp, #12]
 802d0d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802d0d4:	9302      	str	r3, [sp, #8]
 802d0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d0d8:	9301      	str	r3, [sp, #4]
 802d0da:	f897 3020 	ldrb.w	r3, [r7, #32]
 802d0de:	9300      	str	r3, [sp, #0]
 802d0e0:	4623      	mov	r3, r4
 802d0e2:	f7f7 fa05 	bl	80244f0 <HAL_HCD_HC_SubmitRequest>
 802d0e6:	4603      	mov	r3, r0
 802d0e8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 802d0ea:	7bfb      	ldrb	r3, [r7, #15]
 802d0ec:	4618      	mov	r0, r3
 802d0ee:	f000 f86d 	bl	802d1cc <USBH_Get_USB_Status>
 802d0f2:	4603      	mov	r3, r0
 802d0f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d0f6:	7bbb      	ldrb	r3, [r7, #14]
}
 802d0f8:	4618      	mov	r0, r3
 802d0fa:	3714      	adds	r7, #20
 802d0fc:	46bd      	mov	sp, r7
 802d0fe:	bd90      	pop	{r4, r7, pc}

0802d100 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802d100:	b580      	push	{r7, lr}
 802d102:	b082      	sub	sp, #8
 802d104:	af00      	add	r7, sp, #0
 802d106:	6078      	str	r0, [r7, #4]
 802d108:	460b      	mov	r3, r1
 802d10a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 802d10c:	687b      	ldr	r3, [r7, #4]
 802d10e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d112:	78fa      	ldrb	r2, [r7, #3]
 802d114:	4611      	mov	r1, r2
 802d116:	4618      	mov	r0, r3
 802d118:	f7f7 fc99 	bl	8024a4e <HAL_HCD_HC_GetURBState>
 802d11c:	4603      	mov	r3, r0
}
 802d11e:	4618      	mov	r0, r3
 802d120:	3708      	adds	r7, #8
 802d122:	46bd      	mov	sp, r7
 802d124:	bd80      	pop	{r7, pc}

0802d126 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 802d126:	b580      	push	{r7, lr}
 802d128:	b082      	sub	sp, #8
 802d12a:	af00      	add	r7, sp, #0
 802d12c:	6078      	str	r0, [r7, #4]
 802d12e:	460b      	mov	r3, r1
 802d130:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 802d132:	687b      	ldr	r3, [r7, #4]
 802d134:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802d138:	2b00      	cmp	r3, #0
 802d13a:	d103      	bne.n	802d144 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 802d13c:	78fb      	ldrb	r3, [r7, #3]
 802d13e:	4618      	mov	r0, r3
 802d140:	f000 f870 	bl	802d224 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 802d144:	20c8      	movs	r0, #200	; 0xc8
 802d146:	f7f5 fec7 	bl	8022ed8 <HAL_Delay>
  return USBH_OK;
 802d14a:	2300      	movs	r3, #0
}
 802d14c:	4618      	mov	r0, r3
 802d14e:	3708      	adds	r7, #8
 802d150:	46bd      	mov	sp, r7
 802d152:	bd80      	pop	{r7, pc}

0802d154 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 802d154:	b480      	push	{r7}
 802d156:	b085      	sub	sp, #20
 802d158:	af00      	add	r7, sp, #0
 802d15a:	6078      	str	r0, [r7, #4]
 802d15c:	460b      	mov	r3, r1
 802d15e:	70fb      	strb	r3, [r7, #3]
 802d160:	4613      	mov	r3, r2
 802d162:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 802d164:	687b      	ldr	r3, [r7, #4]
 802d166:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d16a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 802d16c:	78fb      	ldrb	r3, [r7, #3]
 802d16e:	68fa      	ldr	r2, [r7, #12]
 802d170:	212c      	movs	r1, #44	; 0x2c
 802d172:	fb01 f303 	mul.w	r3, r1, r3
 802d176:	4413      	add	r3, r2
 802d178:	333b      	adds	r3, #59	; 0x3b
 802d17a:	781b      	ldrb	r3, [r3, #0]
 802d17c:	2b00      	cmp	r3, #0
 802d17e:	d009      	beq.n	802d194 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 802d180:	78fb      	ldrb	r3, [r7, #3]
 802d182:	68fa      	ldr	r2, [r7, #12]
 802d184:	212c      	movs	r1, #44	; 0x2c
 802d186:	fb01 f303 	mul.w	r3, r1, r3
 802d18a:	4413      	add	r3, r2
 802d18c:	3354      	adds	r3, #84	; 0x54
 802d18e:	78ba      	ldrb	r2, [r7, #2]
 802d190:	701a      	strb	r2, [r3, #0]
 802d192:	e008      	b.n	802d1a6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 802d194:	78fb      	ldrb	r3, [r7, #3]
 802d196:	68fa      	ldr	r2, [r7, #12]
 802d198:	212c      	movs	r1, #44	; 0x2c
 802d19a:	fb01 f303 	mul.w	r3, r1, r3
 802d19e:	4413      	add	r3, r2
 802d1a0:	3355      	adds	r3, #85	; 0x55
 802d1a2:	78ba      	ldrb	r2, [r7, #2]
 802d1a4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 802d1a6:	2300      	movs	r3, #0
}
 802d1a8:	4618      	mov	r0, r3
 802d1aa:	3714      	adds	r7, #20
 802d1ac:	46bd      	mov	sp, r7
 802d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d1b2:	4770      	bx	lr

0802d1b4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 802d1b4:	b580      	push	{r7, lr}
 802d1b6:	b082      	sub	sp, #8
 802d1b8:	af00      	add	r7, sp, #0
 802d1ba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 802d1bc:	6878      	ldr	r0, [r7, #4]
 802d1be:	f7f5 fe8b 	bl	8022ed8 <HAL_Delay>
}
 802d1c2:	bf00      	nop
 802d1c4:	3708      	adds	r7, #8
 802d1c6:	46bd      	mov	sp, r7
 802d1c8:	bd80      	pop	{r7, pc}
	...

0802d1cc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802d1cc:	b480      	push	{r7}
 802d1ce:	b085      	sub	sp, #20
 802d1d0:	af00      	add	r7, sp, #0
 802d1d2:	4603      	mov	r3, r0
 802d1d4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d1d6:	2300      	movs	r3, #0
 802d1d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802d1da:	79fb      	ldrb	r3, [r7, #7]
 802d1dc:	2b03      	cmp	r3, #3
 802d1de:	d817      	bhi.n	802d210 <USBH_Get_USB_Status+0x44>
 802d1e0:	a201      	add	r2, pc, #4	; (adr r2, 802d1e8 <USBH_Get_USB_Status+0x1c>)
 802d1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d1e6:	bf00      	nop
 802d1e8:	0802d1f9 	.word	0x0802d1f9
 802d1ec:	0802d1ff 	.word	0x0802d1ff
 802d1f0:	0802d205 	.word	0x0802d205
 802d1f4:	0802d20b 	.word	0x0802d20b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 802d1f8:	2300      	movs	r3, #0
 802d1fa:	73fb      	strb	r3, [r7, #15]
    break;
 802d1fc:	e00b      	b.n	802d216 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 802d1fe:	2302      	movs	r3, #2
 802d200:	73fb      	strb	r3, [r7, #15]
    break;
 802d202:	e008      	b.n	802d216 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 802d204:	2301      	movs	r3, #1
 802d206:	73fb      	strb	r3, [r7, #15]
    break;
 802d208:	e005      	b.n	802d216 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 802d20a:	2302      	movs	r3, #2
 802d20c:	73fb      	strb	r3, [r7, #15]
    break;
 802d20e:	e002      	b.n	802d216 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 802d210:	2302      	movs	r3, #2
 802d212:	73fb      	strb	r3, [r7, #15]
    break;
 802d214:	bf00      	nop
  }
  return usb_status;
 802d216:	7bfb      	ldrb	r3, [r7, #15]
}
 802d218:	4618      	mov	r0, r3
 802d21a:	3714      	adds	r7, #20
 802d21c:	46bd      	mov	sp, r7
 802d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d222:	4770      	bx	lr

0802d224 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 802d224:	b580      	push	{r7, lr}
 802d226:	b084      	sub	sp, #16
 802d228:	af00      	add	r7, sp, #0
 802d22a:	4603      	mov	r3, r0
 802d22c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 802d22e:	79fb      	ldrb	r3, [r7, #7]
 802d230:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 802d232:	79fb      	ldrb	r3, [r7, #7]
 802d234:	2b00      	cmp	r3, #0
 802d236:	d102      	bne.n	802d23e <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 802d238:	2301      	movs	r3, #1
 802d23a:	73fb      	strb	r3, [r7, #15]
 802d23c:	e001      	b.n	802d242 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 802d23e:	2300      	movs	r3, #0
 802d240:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 802d242:	7bfb      	ldrb	r3, [r7, #15]
 802d244:	461a      	mov	r2, r3
 802d246:	2110      	movs	r1, #16
 802d248:	4803      	ldr	r0, [pc, #12]	; (802d258 <MX_DriverVbusHS+0x34>)
 802d24a:	f7f7 f80b 	bl	8024264 <HAL_GPIO_WritePin>
}
 802d24e:	bf00      	nop
 802d250:	3710      	adds	r7, #16
 802d252:	46bd      	mov	sp, r7
 802d254:	bd80      	pop	{r7, pc}
 802d256:	bf00      	nop
 802d258:	40020800 	.word	0x40020800

0802d25c <__errno>:
 802d25c:	4b01      	ldr	r3, [pc, #4]	; (802d264 <__errno+0x8>)
 802d25e:	6818      	ldr	r0, [r3, #0]
 802d260:	4770      	bx	lr
 802d262:	bf00      	nop
 802d264:	2000007c 	.word	0x2000007c

0802d268 <__libc_init_array>:
 802d268:	b570      	push	{r4, r5, r6, lr}
 802d26a:	4d0d      	ldr	r5, [pc, #52]	; (802d2a0 <__libc_init_array+0x38>)
 802d26c:	4c0d      	ldr	r4, [pc, #52]	; (802d2a4 <__libc_init_array+0x3c>)
 802d26e:	1b64      	subs	r4, r4, r5
 802d270:	10a4      	asrs	r4, r4, #2
 802d272:	2600      	movs	r6, #0
 802d274:	42a6      	cmp	r6, r4
 802d276:	d109      	bne.n	802d28c <__libc_init_array+0x24>
 802d278:	4d0b      	ldr	r5, [pc, #44]	; (802d2a8 <__libc_init_array+0x40>)
 802d27a:	4c0c      	ldr	r4, [pc, #48]	; (802d2ac <__libc_init_array+0x44>)
 802d27c:	f001 f99a 	bl	802e5b4 <_init>
 802d280:	1b64      	subs	r4, r4, r5
 802d282:	10a4      	asrs	r4, r4, #2
 802d284:	2600      	movs	r6, #0
 802d286:	42a6      	cmp	r6, r4
 802d288:	d105      	bne.n	802d296 <__libc_init_array+0x2e>
 802d28a:	bd70      	pop	{r4, r5, r6, pc}
 802d28c:	f855 3b04 	ldr.w	r3, [r5], #4
 802d290:	4798      	blx	r3
 802d292:	3601      	adds	r6, #1
 802d294:	e7ee      	b.n	802d274 <__libc_init_array+0xc>
 802d296:	f855 3b04 	ldr.w	r3, [r5], #4
 802d29a:	4798      	blx	r3
 802d29c:	3601      	adds	r6, #1
 802d29e:	e7f2      	b.n	802d286 <__libc_init_array+0x1e>
 802d2a0:	08030610 	.word	0x08030610
 802d2a4:	08030610 	.word	0x08030610
 802d2a8:	08030610 	.word	0x08030610
 802d2ac:	08030614 	.word	0x08030614

0802d2b0 <malloc>:
 802d2b0:	4b02      	ldr	r3, [pc, #8]	; (802d2bc <malloc+0xc>)
 802d2b2:	4601      	mov	r1, r0
 802d2b4:	6818      	ldr	r0, [r3, #0]
 802d2b6:	f000 b87f 	b.w	802d3b8 <_malloc_r>
 802d2ba:	bf00      	nop
 802d2bc:	2000007c 	.word	0x2000007c

0802d2c0 <free>:
 802d2c0:	4b02      	ldr	r3, [pc, #8]	; (802d2cc <free+0xc>)
 802d2c2:	4601      	mov	r1, r0
 802d2c4:	6818      	ldr	r0, [r3, #0]
 802d2c6:	f000 b80b 	b.w	802d2e0 <_free_r>
 802d2ca:	bf00      	nop
 802d2cc:	2000007c 	.word	0x2000007c

0802d2d0 <memset>:
 802d2d0:	4402      	add	r2, r0
 802d2d2:	4603      	mov	r3, r0
 802d2d4:	4293      	cmp	r3, r2
 802d2d6:	d100      	bne.n	802d2da <memset+0xa>
 802d2d8:	4770      	bx	lr
 802d2da:	f803 1b01 	strb.w	r1, [r3], #1
 802d2de:	e7f9      	b.n	802d2d4 <memset+0x4>

0802d2e0 <_free_r>:
 802d2e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802d2e2:	2900      	cmp	r1, #0
 802d2e4:	d044      	beq.n	802d370 <_free_r+0x90>
 802d2e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802d2ea:	9001      	str	r0, [sp, #4]
 802d2ec:	2b00      	cmp	r3, #0
 802d2ee:	f1a1 0404 	sub.w	r4, r1, #4
 802d2f2:	bfb8      	it	lt
 802d2f4:	18e4      	addlt	r4, r4, r3
 802d2f6:	f000 fa13 	bl	802d720 <__malloc_lock>
 802d2fa:	4a1e      	ldr	r2, [pc, #120]	; (802d374 <_free_r+0x94>)
 802d2fc:	9801      	ldr	r0, [sp, #4]
 802d2fe:	6813      	ldr	r3, [r2, #0]
 802d300:	b933      	cbnz	r3, 802d310 <_free_r+0x30>
 802d302:	6063      	str	r3, [r4, #4]
 802d304:	6014      	str	r4, [r2, #0]
 802d306:	b003      	add	sp, #12
 802d308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d30c:	f000 ba0e 	b.w	802d72c <__malloc_unlock>
 802d310:	42a3      	cmp	r3, r4
 802d312:	d908      	bls.n	802d326 <_free_r+0x46>
 802d314:	6825      	ldr	r5, [r4, #0]
 802d316:	1961      	adds	r1, r4, r5
 802d318:	428b      	cmp	r3, r1
 802d31a:	bf01      	itttt	eq
 802d31c:	6819      	ldreq	r1, [r3, #0]
 802d31e:	685b      	ldreq	r3, [r3, #4]
 802d320:	1949      	addeq	r1, r1, r5
 802d322:	6021      	streq	r1, [r4, #0]
 802d324:	e7ed      	b.n	802d302 <_free_r+0x22>
 802d326:	461a      	mov	r2, r3
 802d328:	685b      	ldr	r3, [r3, #4]
 802d32a:	b10b      	cbz	r3, 802d330 <_free_r+0x50>
 802d32c:	42a3      	cmp	r3, r4
 802d32e:	d9fa      	bls.n	802d326 <_free_r+0x46>
 802d330:	6811      	ldr	r1, [r2, #0]
 802d332:	1855      	adds	r5, r2, r1
 802d334:	42a5      	cmp	r5, r4
 802d336:	d10b      	bne.n	802d350 <_free_r+0x70>
 802d338:	6824      	ldr	r4, [r4, #0]
 802d33a:	4421      	add	r1, r4
 802d33c:	1854      	adds	r4, r2, r1
 802d33e:	42a3      	cmp	r3, r4
 802d340:	6011      	str	r1, [r2, #0]
 802d342:	d1e0      	bne.n	802d306 <_free_r+0x26>
 802d344:	681c      	ldr	r4, [r3, #0]
 802d346:	685b      	ldr	r3, [r3, #4]
 802d348:	6053      	str	r3, [r2, #4]
 802d34a:	4421      	add	r1, r4
 802d34c:	6011      	str	r1, [r2, #0]
 802d34e:	e7da      	b.n	802d306 <_free_r+0x26>
 802d350:	d902      	bls.n	802d358 <_free_r+0x78>
 802d352:	230c      	movs	r3, #12
 802d354:	6003      	str	r3, [r0, #0]
 802d356:	e7d6      	b.n	802d306 <_free_r+0x26>
 802d358:	6825      	ldr	r5, [r4, #0]
 802d35a:	1961      	adds	r1, r4, r5
 802d35c:	428b      	cmp	r3, r1
 802d35e:	bf04      	itt	eq
 802d360:	6819      	ldreq	r1, [r3, #0]
 802d362:	685b      	ldreq	r3, [r3, #4]
 802d364:	6063      	str	r3, [r4, #4]
 802d366:	bf04      	itt	eq
 802d368:	1949      	addeq	r1, r1, r5
 802d36a:	6021      	streq	r1, [r4, #0]
 802d36c:	6054      	str	r4, [r2, #4]
 802d36e:	e7ca      	b.n	802d306 <_free_r+0x26>
 802d370:	b003      	add	sp, #12
 802d372:	bd30      	pop	{r4, r5, pc}
 802d374:	2000119c 	.word	0x2000119c

0802d378 <sbrk_aligned>:
 802d378:	b570      	push	{r4, r5, r6, lr}
 802d37a:	4e0e      	ldr	r6, [pc, #56]	; (802d3b4 <sbrk_aligned+0x3c>)
 802d37c:	460c      	mov	r4, r1
 802d37e:	6831      	ldr	r1, [r6, #0]
 802d380:	4605      	mov	r5, r0
 802d382:	b911      	cbnz	r1, 802d38a <sbrk_aligned+0x12>
 802d384:	f000 f8a4 	bl	802d4d0 <_sbrk_r>
 802d388:	6030      	str	r0, [r6, #0]
 802d38a:	4621      	mov	r1, r4
 802d38c:	4628      	mov	r0, r5
 802d38e:	f000 f89f 	bl	802d4d0 <_sbrk_r>
 802d392:	1c43      	adds	r3, r0, #1
 802d394:	d00a      	beq.n	802d3ac <sbrk_aligned+0x34>
 802d396:	1cc4      	adds	r4, r0, #3
 802d398:	f024 0403 	bic.w	r4, r4, #3
 802d39c:	42a0      	cmp	r0, r4
 802d39e:	d007      	beq.n	802d3b0 <sbrk_aligned+0x38>
 802d3a0:	1a21      	subs	r1, r4, r0
 802d3a2:	4628      	mov	r0, r5
 802d3a4:	f000 f894 	bl	802d4d0 <_sbrk_r>
 802d3a8:	3001      	adds	r0, #1
 802d3aa:	d101      	bne.n	802d3b0 <sbrk_aligned+0x38>
 802d3ac:	f04f 34ff 	mov.w	r4, #4294967295
 802d3b0:	4620      	mov	r0, r4
 802d3b2:	bd70      	pop	{r4, r5, r6, pc}
 802d3b4:	200011a0 	.word	0x200011a0

0802d3b8 <_malloc_r>:
 802d3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d3bc:	1ccd      	adds	r5, r1, #3
 802d3be:	f025 0503 	bic.w	r5, r5, #3
 802d3c2:	3508      	adds	r5, #8
 802d3c4:	2d0c      	cmp	r5, #12
 802d3c6:	bf38      	it	cc
 802d3c8:	250c      	movcc	r5, #12
 802d3ca:	2d00      	cmp	r5, #0
 802d3cc:	4607      	mov	r7, r0
 802d3ce:	db01      	blt.n	802d3d4 <_malloc_r+0x1c>
 802d3d0:	42a9      	cmp	r1, r5
 802d3d2:	d905      	bls.n	802d3e0 <_malloc_r+0x28>
 802d3d4:	230c      	movs	r3, #12
 802d3d6:	603b      	str	r3, [r7, #0]
 802d3d8:	2600      	movs	r6, #0
 802d3da:	4630      	mov	r0, r6
 802d3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d3e0:	4e2e      	ldr	r6, [pc, #184]	; (802d49c <_malloc_r+0xe4>)
 802d3e2:	f000 f99d 	bl	802d720 <__malloc_lock>
 802d3e6:	6833      	ldr	r3, [r6, #0]
 802d3e8:	461c      	mov	r4, r3
 802d3ea:	bb34      	cbnz	r4, 802d43a <_malloc_r+0x82>
 802d3ec:	4629      	mov	r1, r5
 802d3ee:	4638      	mov	r0, r7
 802d3f0:	f7ff ffc2 	bl	802d378 <sbrk_aligned>
 802d3f4:	1c43      	adds	r3, r0, #1
 802d3f6:	4604      	mov	r4, r0
 802d3f8:	d14d      	bne.n	802d496 <_malloc_r+0xde>
 802d3fa:	6834      	ldr	r4, [r6, #0]
 802d3fc:	4626      	mov	r6, r4
 802d3fe:	2e00      	cmp	r6, #0
 802d400:	d140      	bne.n	802d484 <_malloc_r+0xcc>
 802d402:	6823      	ldr	r3, [r4, #0]
 802d404:	4631      	mov	r1, r6
 802d406:	4638      	mov	r0, r7
 802d408:	eb04 0803 	add.w	r8, r4, r3
 802d40c:	f000 f860 	bl	802d4d0 <_sbrk_r>
 802d410:	4580      	cmp	r8, r0
 802d412:	d13a      	bne.n	802d48a <_malloc_r+0xd2>
 802d414:	6821      	ldr	r1, [r4, #0]
 802d416:	3503      	adds	r5, #3
 802d418:	1a6d      	subs	r5, r5, r1
 802d41a:	f025 0503 	bic.w	r5, r5, #3
 802d41e:	3508      	adds	r5, #8
 802d420:	2d0c      	cmp	r5, #12
 802d422:	bf38      	it	cc
 802d424:	250c      	movcc	r5, #12
 802d426:	4629      	mov	r1, r5
 802d428:	4638      	mov	r0, r7
 802d42a:	f7ff ffa5 	bl	802d378 <sbrk_aligned>
 802d42e:	3001      	adds	r0, #1
 802d430:	d02b      	beq.n	802d48a <_malloc_r+0xd2>
 802d432:	6823      	ldr	r3, [r4, #0]
 802d434:	442b      	add	r3, r5
 802d436:	6023      	str	r3, [r4, #0]
 802d438:	e00e      	b.n	802d458 <_malloc_r+0xa0>
 802d43a:	6822      	ldr	r2, [r4, #0]
 802d43c:	1b52      	subs	r2, r2, r5
 802d43e:	d41e      	bmi.n	802d47e <_malloc_r+0xc6>
 802d440:	2a0b      	cmp	r2, #11
 802d442:	d916      	bls.n	802d472 <_malloc_r+0xba>
 802d444:	1961      	adds	r1, r4, r5
 802d446:	42a3      	cmp	r3, r4
 802d448:	6025      	str	r5, [r4, #0]
 802d44a:	bf18      	it	ne
 802d44c:	6059      	strne	r1, [r3, #4]
 802d44e:	6863      	ldr	r3, [r4, #4]
 802d450:	bf08      	it	eq
 802d452:	6031      	streq	r1, [r6, #0]
 802d454:	5162      	str	r2, [r4, r5]
 802d456:	604b      	str	r3, [r1, #4]
 802d458:	4638      	mov	r0, r7
 802d45a:	f104 060b 	add.w	r6, r4, #11
 802d45e:	f000 f965 	bl	802d72c <__malloc_unlock>
 802d462:	f026 0607 	bic.w	r6, r6, #7
 802d466:	1d23      	adds	r3, r4, #4
 802d468:	1af2      	subs	r2, r6, r3
 802d46a:	d0b6      	beq.n	802d3da <_malloc_r+0x22>
 802d46c:	1b9b      	subs	r3, r3, r6
 802d46e:	50a3      	str	r3, [r4, r2]
 802d470:	e7b3      	b.n	802d3da <_malloc_r+0x22>
 802d472:	6862      	ldr	r2, [r4, #4]
 802d474:	42a3      	cmp	r3, r4
 802d476:	bf0c      	ite	eq
 802d478:	6032      	streq	r2, [r6, #0]
 802d47a:	605a      	strne	r2, [r3, #4]
 802d47c:	e7ec      	b.n	802d458 <_malloc_r+0xa0>
 802d47e:	4623      	mov	r3, r4
 802d480:	6864      	ldr	r4, [r4, #4]
 802d482:	e7b2      	b.n	802d3ea <_malloc_r+0x32>
 802d484:	4634      	mov	r4, r6
 802d486:	6876      	ldr	r6, [r6, #4]
 802d488:	e7b9      	b.n	802d3fe <_malloc_r+0x46>
 802d48a:	230c      	movs	r3, #12
 802d48c:	603b      	str	r3, [r7, #0]
 802d48e:	4638      	mov	r0, r7
 802d490:	f000 f94c 	bl	802d72c <__malloc_unlock>
 802d494:	e7a1      	b.n	802d3da <_malloc_r+0x22>
 802d496:	6025      	str	r5, [r4, #0]
 802d498:	e7de      	b.n	802d458 <_malloc_r+0xa0>
 802d49a:	bf00      	nop
 802d49c:	2000119c 	.word	0x2000119c

0802d4a0 <iprintf>:
 802d4a0:	b40f      	push	{r0, r1, r2, r3}
 802d4a2:	4b0a      	ldr	r3, [pc, #40]	; (802d4cc <iprintf+0x2c>)
 802d4a4:	b513      	push	{r0, r1, r4, lr}
 802d4a6:	681c      	ldr	r4, [r3, #0]
 802d4a8:	b124      	cbz	r4, 802d4b4 <iprintf+0x14>
 802d4aa:	69a3      	ldr	r3, [r4, #24]
 802d4ac:	b913      	cbnz	r3, 802d4b4 <iprintf+0x14>
 802d4ae:	4620      	mov	r0, r4
 802d4b0:	f000 f896 	bl	802d5e0 <__sinit>
 802d4b4:	ab05      	add	r3, sp, #20
 802d4b6:	9a04      	ldr	r2, [sp, #16]
 802d4b8:	68a1      	ldr	r1, [r4, #8]
 802d4ba:	9301      	str	r3, [sp, #4]
 802d4bc:	4620      	mov	r0, r4
 802d4be:	f000 fac1 	bl	802da44 <_vfiprintf_r>
 802d4c2:	b002      	add	sp, #8
 802d4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d4c8:	b004      	add	sp, #16
 802d4ca:	4770      	bx	lr
 802d4cc:	2000007c 	.word	0x2000007c

0802d4d0 <_sbrk_r>:
 802d4d0:	b538      	push	{r3, r4, r5, lr}
 802d4d2:	4d06      	ldr	r5, [pc, #24]	; (802d4ec <_sbrk_r+0x1c>)
 802d4d4:	2300      	movs	r3, #0
 802d4d6:	4604      	mov	r4, r0
 802d4d8:	4608      	mov	r0, r1
 802d4da:	602b      	str	r3, [r5, #0]
 802d4dc:	f7f4 fa64 	bl	80219a8 <_sbrk>
 802d4e0:	1c43      	adds	r3, r0, #1
 802d4e2:	d102      	bne.n	802d4ea <_sbrk_r+0x1a>
 802d4e4:	682b      	ldr	r3, [r5, #0]
 802d4e6:	b103      	cbz	r3, 802d4ea <_sbrk_r+0x1a>
 802d4e8:	6023      	str	r3, [r4, #0]
 802d4ea:	bd38      	pop	{r3, r4, r5, pc}
 802d4ec:	200011a8 	.word	0x200011a8

0802d4f0 <siprintf>:
 802d4f0:	b40e      	push	{r1, r2, r3}
 802d4f2:	b500      	push	{lr}
 802d4f4:	b09c      	sub	sp, #112	; 0x70
 802d4f6:	ab1d      	add	r3, sp, #116	; 0x74
 802d4f8:	9002      	str	r0, [sp, #8]
 802d4fa:	9006      	str	r0, [sp, #24]
 802d4fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802d500:	4809      	ldr	r0, [pc, #36]	; (802d528 <siprintf+0x38>)
 802d502:	9107      	str	r1, [sp, #28]
 802d504:	9104      	str	r1, [sp, #16]
 802d506:	4909      	ldr	r1, [pc, #36]	; (802d52c <siprintf+0x3c>)
 802d508:	f853 2b04 	ldr.w	r2, [r3], #4
 802d50c:	9105      	str	r1, [sp, #20]
 802d50e:	6800      	ldr	r0, [r0, #0]
 802d510:	9301      	str	r3, [sp, #4]
 802d512:	a902      	add	r1, sp, #8
 802d514:	f000 f96c 	bl	802d7f0 <_svfiprintf_r>
 802d518:	9b02      	ldr	r3, [sp, #8]
 802d51a:	2200      	movs	r2, #0
 802d51c:	701a      	strb	r2, [r3, #0]
 802d51e:	b01c      	add	sp, #112	; 0x70
 802d520:	f85d eb04 	ldr.w	lr, [sp], #4
 802d524:	b003      	add	sp, #12
 802d526:	4770      	bx	lr
 802d528:	2000007c 	.word	0x2000007c
 802d52c:	ffff0208 	.word	0xffff0208

0802d530 <std>:
 802d530:	2300      	movs	r3, #0
 802d532:	b510      	push	{r4, lr}
 802d534:	4604      	mov	r4, r0
 802d536:	e9c0 3300 	strd	r3, r3, [r0]
 802d53a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802d53e:	6083      	str	r3, [r0, #8]
 802d540:	8181      	strh	r1, [r0, #12]
 802d542:	6643      	str	r3, [r0, #100]	; 0x64
 802d544:	81c2      	strh	r2, [r0, #14]
 802d546:	6183      	str	r3, [r0, #24]
 802d548:	4619      	mov	r1, r3
 802d54a:	2208      	movs	r2, #8
 802d54c:	305c      	adds	r0, #92	; 0x5c
 802d54e:	f7ff febf 	bl	802d2d0 <memset>
 802d552:	4b05      	ldr	r3, [pc, #20]	; (802d568 <std+0x38>)
 802d554:	6263      	str	r3, [r4, #36]	; 0x24
 802d556:	4b05      	ldr	r3, [pc, #20]	; (802d56c <std+0x3c>)
 802d558:	62a3      	str	r3, [r4, #40]	; 0x28
 802d55a:	4b05      	ldr	r3, [pc, #20]	; (802d570 <std+0x40>)
 802d55c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802d55e:	4b05      	ldr	r3, [pc, #20]	; (802d574 <std+0x44>)
 802d560:	6224      	str	r4, [r4, #32]
 802d562:	6323      	str	r3, [r4, #48]	; 0x30
 802d564:	bd10      	pop	{r4, pc}
 802d566:	bf00      	nop
 802d568:	0802dfcd 	.word	0x0802dfcd
 802d56c:	0802dfef 	.word	0x0802dfef
 802d570:	0802e027 	.word	0x0802e027
 802d574:	0802e04b 	.word	0x0802e04b

0802d578 <_cleanup_r>:
 802d578:	4901      	ldr	r1, [pc, #4]	; (802d580 <_cleanup_r+0x8>)
 802d57a:	f000 b8af 	b.w	802d6dc <_fwalk_reent>
 802d57e:	bf00      	nop
 802d580:	0802e325 	.word	0x0802e325

0802d584 <__sfmoreglue>:
 802d584:	b570      	push	{r4, r5, r6, lr}
 802d586:	2268      	movs	r2, #104	; 0x68
 802d588:	1e4d      	subs	r5, r1, #1
 802d58a:	4355      	muls	r5, r2
 802d58c:	460e      	mov	r6, r1
 802d58e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802d592:	f7ff ff11 	bl	802d3b8 <_malloc_r>
 802d596:	4604      	mov	r4, r0
 802d598:	b140      	cbz	r0, 802d5ac <__sfmoreglue+0x28>
 802d59a:	2100      	movs	r1, #0
 802d59c:	e9c0 1600 	strd	r1, r6, [r0]
 802d5a0:	300c      	adds	r0, #12
 802d5a2:	60a0      	str	r0, [r4, #8]
 802d5a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802d5a8:	f7ff fe92 	bl	802d2d0 <memset>
 802d5ac:	4620      	mov	r0, r4
 802d5ae:	bd70      	pop	{r4, r5, r6, pc}

0802d5b0 <__sfp_lock_acquire>:
 802d5b0:	4801      	ldr	r0, [pc, #4]	; (802d5b8 <__sfp_lock_acquire+0x8>)
 802d5b2:	f000 b8b3 	b.w	802d71c <__retarget_lock_acquire_recursive>
 802d5b6:	bf00      	nop
 802d5b8:	200011a5 	.word	0x200011a5

0802d5bc <__sfp_lock_release>:
 802d5bc:	4801      	ldr	r0, [pc, #4]	; (802d5c4 <__sfp_lock_release+0x8>)
 802d5be:	f000 b8ae 	b.w	802d71e <__retarget_lock_release_recursive>
 802d5c2:	bf00      	nop
 802d5c4:	200011a5 	.word	0x200011a5

0802d5c8 <__sinit_lock_acquire>:
 802d5c8:	4801      	ldr	r0, [pc, #4]	; (802d5d0 <__sinit_lock_acquire+0x8>)
 802d5ca:	f000 b8a7 	b.w	802d71c <__retarget_lock_acquire_recursive>
 802d5ce:	bf00      	nop
 802d5d0:	200011a6 	.word	0x200011a6

0802d5d4 <__sinit_lock_release>:
 802d5d4:	4801      	ldr	r0, [pc, #4]	; (802d5dc <__sinit_lock_release+0x8>)
 802d5d6:	f000 b8a2 	b.w	802d71e <__retarget_lock_release_recursive>
 802d5da:	bf00      	nop
 802d5dc:	200011a6 	.word	0x200011a6

0802d5e0 <__sinit>:
 802d5e0:	b510      	push	{r4, lr}
 802d5e2:	4604      	mov	r4, r0
 802d5e4:	f7ff fff0 	bl	802d5c8 <__sinit_lock_acquire>
 802d5e8:	69a3      	ldr	r3, [r4, #24]
 802d5ea:	b11b      	cbz	r3, 802d5f4 <__sinit+0x14>
 802d5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d5f0:	f7ff bff0 	b.w	802d5d4 <__sinit_lock_release>
 802d5f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802d5f8:	6523      	str	r3, [r4, #80]	; 0x50
 802d5fa:	4b13      	ldr	r3, [pc, #76]	; (802d648 <__sinit+0x68>)
 802d5fc:	4a13      	ldr	r2, [pc, #76]	; (802d64c <__sinit+0x6c>)
 802d5fe:	681b      	ldr	r3, [r3, #0]
 802d600:	62a2      	str	r2, [r4, #40]	; 0x28
 802d602:	42a3      	cmp	r3, r4
 802d604:	bf04      	itt	eq
 802d606:	2301      	moveq	r3, #1
 802d608:	61a3      	streq	r3, [r4, #24]
 802d60a:	4620      	mov	r0, r4
 802d60c:	f000 f820 	bl	802d650 <__sfp>
 802d610:	6060      	str	r0, [r4, #4]
 802d612:	4620      	mov	r0, r4
 802d614:	f000 f81c 	bl	802d650 <__sfp>
 802d618:	60a0      	str	r0, [r4, #8]
 802d61a:	4620      	mov	r0, r4
 802d61c:	f000 f818 	bl	802d650 <__sfp>
 802d620:	2200      	movs	r2, #0
 802d622:	60e0      	str	r0, [r4, #12]
 802d624:	2104      	movs	r1, #4
 802d626:	6860      	ldr	r0, [r4, #4]
 802d628:	f7ff ff82 	bl	802d530 <std>
 802d62c:	68a0      	ldr	r0, [r4, #8]
 802d62e:	2201      	movs	r2, #1
 802d630:	2109      	movs	r1, #9
 802d632:	f7ff ff7d 	bl	802d530 <std>
 802d636:	68e0      	ldr	r0, [r4, #12]
 802d638:	2202      	movs	r2, #2
 802d63a:	2112      	movs	r1, #18
 802d63c:	f7ff ff78 	bl	802d530 <std>
 802d640:	2301      	movs	r3, #1
 802d642:	61a3      	str	r3, [r4, #24]
 802d644:	e7d2      	b.n	802d5ec <__sinit+0xc>
 802d646:	bf00      	nop
 802d648:	08030570 	.word	0x08030570
 802d64c:	0802d579 	.word	0x0802d579

0802d650 <__sfp>:
 802d650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d652:	4607      	mov	r7, r0
 802d654:	f7ff ffac 	bl	802d5b0 <__sfp_lock_acquire>
 802d658:	4b1e      	ldr	r3, [pc, #120]	; (802d6d4 <__sfp+0x84>)
 802d65a:	681e      	ldr	r6, [r3, #0]
 802d65c:	69b3      	ldr	r3, [r6, #24]
 802d65e:	b913      	cbnz	r3, 802d666 <__sfp+0x16>
 802d660:	4630      	mov	r0, r6
 802d662:	f7ff ffbd 	bl	802d5e0 <__sinit>
 802d666:	3648      	adds	r6, #72	; 0x48
 802d668:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802d66c:	3b01      	subs	r3, #1
 802d66e:	d503      	bpl.n	802d678 <__sfp+0x28>
 802d670:	6833      	ldr	r3, [r6, #0]
 802d672:	b30b      	cbz	r3, 802d6b8 <__sfp+0x68>
 802d674:	6836      	ldr	r6, [r6, #0]
 802d676:	e7f7      	b.n	802d668 <__sfp+0x18>
 802d678:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802d67c:	b9d5      	cbnz	r5, 802d6b4 <__sfp+0x64>
 802d67e:	4b16      	ldr	r3, [pc, #88]	; (802d6d8 <__sfp+0x88>)
 802d680:	60e3      	str	r3, [r4, #12]
 802d682:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802d686:	6665      	str	r5, [r4, #100]	; 0x64
 802d688:	f000 f847 	bl	802d71a <__retarget_lock_init_recursive>
 802d68c:	f7ff ff96 	bl	802d5bc <__sfp_lock_release>
 802d690:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802d694:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802d698:	6025      	str	r5, [r4, #0]
 802d69a:	61a5      	str	r5, [r4, #24]
 802d69c:	2208      	movs	r2, #8
 802d69e:	4629      	mov	r1, r5
 802d6a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802d6a4:	f7ff fe14 	bl	802d2d0 <memset>
 802d6a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802d6ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802d6b0:	4620      	mov	r0, r4
 802d6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d6b4:	3468      	adds	r4, #104	; 0x68
 802d6b6:	e7d9      	b.n	802d66c <__sfp+0x1c>
 802d6b8:	2104      	movs	r1, #4
 802d6ba:	4638      	mov	r0, r7
 802d6bc:	f7ff ff62 	bl	802d584 <__sfmoreglue>
 802d6c0:	4604      	mov	r4, r0
 802d6c2:	6030      	str	r0, [r6, #0]
 802d6c4:	2800      	cmp	r0, #0
 802d6c6:	d1d5      	bne.n	802d674 <__sfp+0x24>
 802d6c8:	f7ff ff78 	bl	802d5bc <__sfp_lock_release>
 802d6cc:	230c      	movs	r3, #12
 802d6ce:	603b      	str	r3, [r7, #0]
 802d6d0:	e7ee      	b.n	802d6b0 <__sfp+0x60>
 802d6d2:	bf00      	nop
 802d6d4:	08030570 	.word	0x08030570
 802d6d8:	ffff0001 	.word	0xffff0001

0802d6dc <_fwalk_reent>:
 802d6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d6e0:	4606      	mov	r6, r0
 802d6e2:	4688      	mov	r8, r1
 802d6e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802d6e8:	2700      	movs	r7, #0
 802d6ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802d6ee:	f1b9 0901 	subs.w	r9, r9, #1
 802d6f2:	d505      	bpl.n	802d700 <_fwalk_reent+0x24>
 802d6f4:	6824      	ldr	r4, [r4, #0]
 802d6f6:	2c00      	cmp	r4, #0
 802d6f8:	d1f7      	bne.n	802d6ea <_fwalk_reent+0xe>
 802d6fa:	4638      	mov	r0, r7
 802d6fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d700:	89ab      	ldrh	r3, [r5, #12]
 802d702:	2b01      	cmp	r3, #1
 802d704:	d907      	bls.n	802d716 <_fwalk_reent+0x3a>
 802d706:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802d70a:	3301      	adds	r3, #1
 802d70c:	d003      	beq.n	802d716 <_fwalk_reent+0x3a>
 802d70e:	4629      	mov	r1, r5
 802d710:	4630      	mov	r0, r6
 802d712:	47c0      	blx	r8
 802d714:	4307      	orrs	r7, r0
 802d716:	3568      	adds	r5, #104	; 0x68
 802d718:	e7e9      	b.n	802d6ee <_fwalk_reent+0x12>

0802d71a <__retarget_lock_init_recursive>:
 802d71a:	4770      	bx	lr

0802d71c <__retarget_lock_acquire_recursive>:
 802d71c:	4770      	bx	lr

0802d71e <__retarget_lock_release_recursive>:
 802d71e:	4770      	bx	lr

0802d720 <__malloc_lock>:
 802d720:	4801      	ldr	r0, [pc, #4]	; (802d728 <__malloc_lock+0x8>)
 802d722:	f7ff bffb 	b.w	802d71c <__retarget_lock_acquire_recursive>
 802d726:	bf00      	nop
 802d728:	200011a4 	.word	0x200011a4

0802d72c <__malloc_unlock>:
 802d72c:	4801      	ldr	r0, [pc, #4]	; (802d734 <__malloc_unlock+0x8>)
 802d72e:	f7ff bff6 	b.w	802d71e <__retarget_lock_release_recursive>
 802d732:	bf00      	nop
 802d734:	200011a4 	.word	0x200011a4

0802d738 <__ssputs_r>:
 802d738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d73c:	688e      	ldr	r6, [r1, #8]
 802d73e:	429e      	cmp	r6, r3
 802d740:	4682      	mov	sl, r0
 802d742:	460c      	mov	r4, r1
 802d744:	4690      	mov	r8, r2
 802d746:	461f      	mov	r7, r3
 802d748:	d838      	bhi.n	802d7bc <__ssputs_r+0x84>
 802d74a:	898a      	ldrh	r2, [r1, #12]
 802d74c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802d750:	d032      	beq.n	802d7b8 <__ssputs_r+0x80>
 802d752:	6825      	ldr	r5, [r4, #0]
 802d754:	6909      	ldr	r1, [r1, #16]
 802d756:	eba5 0901 	sub.w	r9, r5, r1
 802d75a:	6965      	ldr	r5, [r4, #20]
 802d75c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802d760:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802d764:	3301      	adds	r3, #1
 802d766:	444b      	add	r3, r9
 802d768:	106d      	asrs	r5, r5, #1
 802d76a:	429d      	cmp	r5, r3
 802d76c:	bf38      	it	cc
 802d76e:	461d      	movcc	r5, r3
 802d770:	0553      	lsls	r3, r2, #21
 802d772:	d531      	bpl.n	802d7d8 <__ssputs_r+0xa0>
 802d774:	4629      	mov	r1, r5
 802d776:	f7ff fe1f 	bl	802d3b8 <_malloc_r>
 802d77a:	4606      	mov	r6, r0
 802d77c:	b950      	cbnz	r0, 802d794 <__ssputs_r+0x5c>
 802d77e:	230c      	movs	r3, #12
 802d780:	f8ca 3000 	str.w	r3, [sl]
 802d784:	89a3      	ldrh	r3, [r4, #12]
 802d786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d78a:	81a3      	strh	r3, [r4, #12]
 802d78c:	f04f 30ff 	mov.w	r0, #4294967295
 802d790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d794:	6921      	ldr	r1, [r4, #16]
 802d796:	464a      	mov	r2, r9
 802d798:	f000 fe78 	bl	802e48c <memcpy>
 802d79c:	89a3      	ldrh	r3, [r4, #12]
 802d79e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802d7a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802d7a6:	81a3      	strh	r3, [r4, #12]
 802d7a8:	6126      	str	r6, [r4, #16]
 802d7aa:	6165      	str	r5, [r4, #20]
 802d7ac:	444e      	add	r6, r9
 802d7ae:	eba5 0509 	sub.w	r5, r5, r9
 802d7b2:	6026      	str	r6, [r4, #0]
 802d7b4:	60a5      	str	r5, [r4, #8]
 802d7b6:	463e      	mov	r6, r7
 802d7b8:	42be      	cmp	r6, r7
 802d7ba:	d900      	bls.n	802d7be <__ssputs_r+0x86>
 802d7bc:	463e      	mov	r6, r7
 802d7be:	6820      	ldr	r0, [r4, #0]
 802d7c0:	4632      	mov	r2, r6
 802d7c2:	4641      	mov	r1, r8
 802d7c4:	f000 fe70 	bl	802e4a8 <memmove>
 802d7c8:	68a3      	ldr	r3, [r4, #8]
 802d7ca:	1b9b      	subs	r3, r3, r6
 802d7cc:	60a3      	str	r3, [r4, #8]
 802d7ce:	6823      	ldr	r3, [r4, #0]
 802d7d0:	4433      	add	r3, r6
 802d7d2:	6023      	str	r3, [r4, #0]
 802d7d4:	2000      	movs	r0, #0
 802d7d6:	e7db      	b.n	802d790 <__ssputs_r+0x58>
 802d7d8:	462a      	mov	r2, r5
 802d7da:	f000 fe7f 	bl	802e4dc <_realloc_r>
 802d7de:	4606      	mov	r6, r0
 802d7e0:	2800      	cmp	r0, #0
 802d7e2:	d1e1      	bne.n	802d7a8 <__ssputs_r+0x70>
 802d7e4:	6921      	ldr	r1, [r4, #16]
 802d7e6:	4650      	mov	r0, sl
 802d7e8:	f7ff fd7a 	bl	802d2e0 <_free_r>
 802d7ec:	e7c7      	b.n	802d77e <__ssputs_r+0x46>
	...

0802d7f0 <_svfiprintf_r>:
 802d7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d7f4:	4698      	mov	r8, r3
 802d7f6:	898b      	ldrh	r3, [r1, #12]
 802d7f8:	061b      	lsls	r3, r3, #24
 802d7fa:	b09d      	sub	sp, #116	; 0x74
 802d7fc:	4607      	mov	r7, r0
 802d7fe:	460d      	mov	r5, r1
 802d800:	4614      	mov	r4, r2
 802d802:	d50e      	bpl.n	802d822 <_svfiprintf_r+0x32>
 802d804:	690b      	ldr	r3, [r1, #16]
 802d806:	b963      	cbnz	r3, 802d822 <_svfiprintf_r+0x32>
 802d808:	2140      	movs	r1, #64	; 0x40
 802d80a:	f7ff fdd5 	bl	802d3b8 <_malloc_r>
 802d80e:	6028      	str	r0, [r5, #0]
 802d810:	6128      	str	r0, [r5, #16]
 802d812:	b920      	cbnz	r0, 802d81e <_svfiprintf_r+0x2e>
 802d814:	230c      	movs	r3, #12
 802d816:	603b      	str	r3, [r7, #0]
 802d818:	f04f 30ff 	mov.w	r0, #4294967295
 802d81c:	e0d1      	b.n	802d9c2 <_svfiprintf_r+0x1d2>
 802d81e:	2340      	movs	r3, #64	; 0x40
 802d820:	616b      	str	r3, [r5, #20]
 802d822:	2300      	movs	r3, #0
 802d824:	9309      	str	r3, [sp, #36]	; 0x24
 802d826:	2320      	movs	r3, #32
 802d828:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802d82c:	f8cd 800c 	str.w	r8, [sp, #12]
 802d830:	2330      	movs	r3, #48	; 0x30
 802d832:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802d9dc <_svfiprintf_r+0x1ec>
 802d836:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802d83a:	f04f 0901 	mov.w	r9, #1
 802d83e:	4623      	mov	r3, r4
 802d840:	469a      	mov	sl, r3
 802d842:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d846:	b10a      	cbz	r2, 802d84c <_svfiprintf_r+0x5c>
 802d848:	2a25      	cmp	r2, #37	; 0x25
 802d84a:	d1f9      	bne.n	802d840 <_svfiprintf_r+0x50>
 802d84c:	ebba 0b04 	subs.w	fp, sl, r4
 802d850:	d00b      	beq.n	802d86a <_svfiprintf_r+0x7a>
 802d852:	465b      	mov	r3, fp
 802d854:	4622      	mov	r2, r4
 802d856:	4629      	mov	r1, r5
 802d858:	4638      	mov	r0, r7
 802d85a:	f7ff ff6d 	bl	802d738 <__ssputs_r>
 802d85e:	3001      	adds	r0, #1
 802d860:	f000 80aa 	beq.w	802d9b8 <_svfiprintf_r+0x1c8>
 802d864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802d866:	445a      	add	r2, fp
 802d868:	9209      	str	r2, [sp, #36]	; 0x24
 802d86a:	f89a 3000 	ldrb.w	r3, [sl]
 802d86e:	2b00      	cmp	r3, #0
 802d870:	f000 80a2 	beq.w	802d9b8 <_svfiprintf_r+0x1c8>
 802d874:	2300      	movs	r3, #0
 802d876:	f04f 32ff 	mov.w	r2, #4294967295
 802d87a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802d87e:	f10a 0a01 	add.w	sl, sl, #1
 802d882:	9304      	str	r3, [sp, #16]
 802d884:	9307      	str	r3, [sp, #28]
 802d886:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802d88a:	931a      	str	r3, [sp, #104]	; 0x68
 802d88c:	4654      	mov	r4, sl
 802d88e:	2205      	movs	r2, #5
 802d890:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d894:	4851      	ldr	r0, [pc, #324]	; (802d9dc <_svfiprintf_r+0x1ec>)
 802d896:	f7f2 fcab 	bl	80201f0 <memchr>
 802d89a:	9a04      	ldr	r2, [sp, #16]
 802d89c:	b9d8      	cbnz	r0, 802d8d6 <_svfiprintf_r+0xe6>
 802d89e:	06d0      	lsls	r0, r2, #27
 802d8a0:	bf44      	itt	mi
 802d8a2:	2320      	movmi	r3, #32
 802d8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d8a8:	0711      	lsls	r1, r2, #28
 802d8aa:	bf44      	itt	mi
 802d8ac:	232b      	movmi	r3, #43	; 0x2b
 802d8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d8b2:	f89a 3000 	ldrb.w	r3, [sl]
 802d8b6:	2b2a      	cmp	r3, #42	; 0x2a
 802d8b8:	d015      	beq.n	802d8e6 <_svfiprintf_r+0xf6>
 802d8ba:	9a07      	ldr	r2, [sp, #28]
 802d8bc:	4654      	mov	r4, sl
 802d8be:	2000      	movs	r0, #0
 802d8c0:	f04f 0c0a 	mov.w	ip, #10
 802d8c4:	4621      	mov	r1, r4
 802d8c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d8ca:	3b30      	subs	r3, #48	; 0x30
 802d8cc:	2b09      	cmp	r3, #9
 802d8ce:	d94e      	bls.n	802d96e <_svfiprintf_r+0x17e>
 802d8d0:	b1b0      	cbz	r0, 802d900 <_svfiprintf_r+0x110>
 802d8d2:	9207      	str	r2, [sp, #28]
 802d8d4:	e014      	b.n	802d900 <_svfiprintf_r+0x110>
 802d8d6:	eba0 0308 	sub.w	r3, r0, r8
 802d8da:	fa09 f303 	lsl.w	r3, r9, r3
 802d8de:	4313      	orrs	r3, r2
 802d8e0:	9304      	str	r3, [sp, #16]
 802d8e2:	46a2      	mov	sl, r4
 802d8e4:	e7d2      	b.n	802d88c <_svfiprintf_r+0x9c>
 802d8e6:	9b03      	ldr	r3, [sp, #12]
 802d8e8:	1d19      	adds	r1, r3, #4
 802d8ea:	681b      	ldr	r3, [r3, #0]
 802d8ec:	9103      	str	r1, [sp, #12]
 802d8ee:	2b00      	cmp	r3, #0
 802d8f0:	bfbb      	ittet	lt
 802d8f2:	425b      	neglt	r3, r3
 802d8f4:	f042 0202 	orrlt.w	r2, r2, #2
 802d8f8:	9307      	strge	r3, [sp, #28]
 802d8fa:	9307      	strlt	r3, [sp, #28]
 802d8fc:	bfb8      	it	lt
 802d8fe:	9204      	strlt	r2, [sp, #16]
 802d900:	7823      	ldrb	r3, [r4, #0]
 802d902:	2b2e      	cmp	r3, #46	; 0x2e
 802d904:	d10c      	bne.n	802d920 <_svfiprintf_r+0x130>
 802d906:	7863      	ldrb	r3, [r4, #1]
 802d908:	2b2a      	cmp	r3, #42	; 0x2a
 802d90a:	d135      	bne.n	802d978 <_svfiprintf_r+0x188>
 802d90c:	9b03      	ldr	r3, [sp, #12]
 802d90e:	1d1a      	adds	r2, r3, #4
 802d910:	681b      	ldr	r3, [r3, #0]
 802d912:	9203      	str	r2, [sp, #12]
 802d914:	2b00      	cmp	r3, #0
 802d916:	bfb8      	it	lt
 802d918:	f04f 33ff 	movlt.w	r3, #4294967295
 802d91c:	3402      	adds	r4, #2
 802d91e:	9305      	str	r3, [sp, #20]
 802d920:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802d9ec <_svfiprintf_r+0x1fc>
 802d924:	7821      	ldrb	r1, [r4, #0]
 802d926:	2203      	movs	r2, #3
 802d928:	4650      	mov	r0, sl
 802d92a:	f7f2 fc61 	bl	80201f0 <memchr>
 802d92e:	b140      	cbz	r0, 802d942 <_svfiprintf_r+0x152>
 802d930:	2340      	movs	r3, #64	; 0x40
 802d932:	eba0 000a 	sub.w	r0, r0, sl
 802d936:	fa03 f000 	lsl.w	r0, r3, r0
 802d93a:	9b04      	ldr	r3, [sp, #16]
 802d93c:	4303      	orrs	r3, r0
 802d93e:	3401      	adds	r4, #1
 802d940:	9304      	str	r3, [sp, #16]
 802d942:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d946:	4826      	ldr	r0, [pc, #152]	; (802d9e0 <_svfiprintf_r+0x1f0>)
 802d948:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802d94c:	2206      	movs	r2, #6
 802d94e:	f7f2 fc4f 	bl	80201f0 <memchr>
 802d952:	2800      	cmp	r0, #0
 802d954:	d038      	beq.n	802d9c8 <_svfiprintf_r+0x1d8>
 802d956:	4b23      	ldr	r3, [pc, #140]	; (802d9e4 <_svfiprintf_r+0x1f4>)
 802d958:	bb1b      	cbnz	r3, 802d9a2 <_svfiprintf_r+0x1b2>
 802d95a:	9b03      	ldr	r3, [sp, #12]
 802d95c:	3307      	adds	r3, #7
 802d95e:	f023 0307 	bic.w	r3, r3, #7
 802d962:	3308      	adds	r3, #8
 802d964:	9303      	str	r3, [sp, #12]
 802d966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d968:	4433      	add	r3, r6
 802d96a:	9309      	str	r3, [sp, #36]	; 0x24
 802d96c:	e767      	b.n	802d83e <_svfiprintf_r+0x4e>
 802d96e:	fb0c 3202 	mla	r2, ip, r2, r3
 802d972:	460c      	mov	r4, r1
 802d974:	2001      	movs	r0, #1
 802d976:	e7a5      	b.n	802d8c4 <_svfiprintf_r+0xd4>
 802d978:	2300      	movs	r3, #0
 802d97a:	3401      	adds	r4, #1
 802d97c:	9305      	str	r3, [sp, #20]
 802d97e:	4619      	mov	r1, r3
 802d980:	f04f 0c0a 	mov.w	ip, #10
 802d984:	4620      	mov	r0, r4
 802d986:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d98a:	3a30      	subs	r2, #48	; 0x30
 802d98c:	2a09      	cmp	r2, #9
 802d98e:	d903      	bls.n	802d998 <_svfiprintf_r+0x1a8>
 802d990:	2b00      	cmp	r3, #0
 802d992:	d0c5      	beq.n	802d920 <_svfiprintf_r+0x130>
 802d994:	9105      	str	r1, [sp, #20]
 802d996:	e7c3      	b.n	802d920 <_svfiprintf_r+0x130>
 802d998:	fb0c 2101 	mla	r1, ip, r1, r2
 802d99c:	4604      	mov	r4, r0
 802d99e:	2301      	movs	r3, #1
 802d9a0:	e7f0      	b.n	802d984 <_svfiprintf_r+0x194>
 802d9a2:	ab03      	add	r3, sp, #12
 802d9a4:	9300      	str	r3, [sp, #0]
 802d9a6:	462a      	mov	r2, r5
 802d9a8:	4b0f      	ldr	r3, [pc, #60]	; (802d9e8 <_svfiprintf_r+0x1f8>)
 802d9aa:	a904      	add	r1, sp, #16
 802d9ac:	4638      	mov	r0, r7
 802d9ae:	f3af 8000 	nop.w
 802d9b2:	1c42      	adds	r2, r0, #1
 802d9b4:	4606      	mov	r6, r0
 802d9b6:	d1d6      	bne.n	802d966 <_svfiprintf_r+0x176>
 802d9b8:	89ab      	ldrh	r3, [r5, #12]
 802d9ba:	065b      	lsls	r3, r3, #25
 802d9bc:	f53f af2c 	bmi.w	802d818 <_svfiprintf_r+0x28>
 802d9c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 802d9c2:	b01d      	add	sp, #116	; 0x74
 802d9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d9c8:	ab03      	add	r3, sp, #12
 802d9ca:	9300      	str	r3, [sp, #0]
 802d9cc:	462a      	mov	r2, r5
 802d9ce:	4b06      	ldr	r3, [pc, #24]	; (802d9e8 <_svfiprintf_r+0x1f8>)
 802d9d0:	a904      	add	r1, sp, #16
 802d9d2:	4638      	mov	r0, r7
 802d9d4:	f000 f9d4 	bl	802dd80 <_printf_i>
 802d9d8:	e7eb      	b.n	802d9b2 <_svfiprintf_r+0x1c2>
 802d9da:	bf00      	nop
 802d9dc:	080305d4 	.word	0x080305d4
 802d9e0:	080305de 	.word	0x080305de
 802d9e4:	00000000 	.word	0x00000000
 802d9e8:	0802d739 	.word	0x0802d739
 802d9ec:	080305da 	.word	0x080305da

0802d9f0 <__sfputc_r>:
 802d9f0:	6893      	ldr	r3, [r2, #8]
 802d9f2:	3b01      	subs	r3, #1
 802d9f4:	2b00      	cmp	r3, #0
 802d9f6:	b410      	push	{r4}
 802d9f8:	6093      	str	r3, [r2, #8]
 802d9fa:	da08      	bge.n	802da0e <__sfputc_r+0x1e>
 802d9fc:	6994      	ldr	r4, [r2, #24]
 802d9fe:	42a3      	cmp	r3, r4
 802da00:	db01      	blt.n	802da06 <__sfputc_r+0x16>
 802da02:	290a      	cmp	r1, #10
 802da04:	d103      	bne.n	802da0e <__sfputc_r+0x1e>
 802da06:	f85d 4b04 	ldr.w	r4, [sp], #4
 802da0a:	f000 bb23 	b.w	802e054 <__swbuf_r>
 802da0e:	6813      	ldr	r3, [r2, #0]
 802da10:	1c58      	adds	r0, r3, #1
 802da12:	6010      	str	r0, [r2, #0]
 802da14:	7019      	strb	r1, [r3, #0]
 802da16:	4608      	mov	r0, r1
 802da18:	f85d 4b04 	ldr.w	r4, [sp], #4
 802da1c:	4770      	bx	lr

0802da1e <__sfputs_r>:
 802da1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802da20:	4606      	mov	r6, r0
 802da22:	460f      	mov	r7, r1
 802da24:	4614      	mov	r4, r2
 802da26:	18d5      	adds	r5, r2, r3
 802da28:	42ac      	cmp	r4, r5
 802da2a:	d101      	bne.n	802da30 <__sfputs_r+0x12>
 802da2c:	2000      	movs	r0, #0
 802da2e:	e007      	b.n	802da40 <__sfputs_r+0x22>
 802da30:	f814 1b01 	ldrb.w	r1, [r4], #1
 802da34:	463a      	mov	r2, r7
 802da36:	4630      	mov	r0, r6
 802da38:	f7ff ffda 	bl	802d9f0 <__sfputc_r>
 802da3c:	1c43      	adds	r3, r0, #1
 802da3e:	d1f3      	bne.n	802da28 <__sfputs_r+0xa>
 802da40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802da44 <_vfiprintf_r>:
 802da44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802da48:	460d      	mov	r5, r1
 802da4a:	b09d      	sub	sp, #116	; 0x74
 802da4c:	4614      	mov	r4, r2
 802da4e:	4698      	mov	r8, r3
 802da50:	4606      	mov	r6, r0
 802da52:	b118      	cbz	r0, 802da5c <_vfiprintf_r+0x18>
 802da54:	6983      	ldr	r3, [r0, #24]
 802da56:	b90b      	cbnz	r3, 802da5c <_vfiprintf_r+0x18>
 802da58:	f7ff fdc2 	bl	802d5e0 <__sinit>
 802da5c:	4b89      	ldr	r3, [pc, #548]	; (802dc84 <_vfiprintf_r+0x240>)
 802da5e:	429d      	cmp	r5, r3
 802da60:	d11b      	bne.n	802da9a <_vfiprintf_r+0x56>
 802da62:	6875      	ldr	r5, [r6, #4]
 802da64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802da66:	07d9      	lsls	r1, r3, #31
 802da68:	d405      	bmi.n	802da76 <_vfiprintf_r+0x32>
 802da6a:	89ab      	ldrh	r3, [r5, #12]
 802da6c:	059a      	lsls	r2, r3, #22
 802da6e:	d402      	bmi.n	802da76 <_vfiprintf_r+0x32>
 802da70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802da72:	f7ff fe53 	bl	802d71c <__retarget_lock_acquire_recursive>
 802da76:	89ab      	ldrh	r3, [r5, #12]
 802da78:	071b      	lsls	r3, r3, #28
 802da7a:	d501      	bpl.n	802da80 <_vfiprintf_r+0x3c>
 802da7c:	692b      	ldr	r3, [r5, #16]
 802da7e:	b9eb      	cbnz	r3, 802dabc <_vfiprintf_r+0x78>
 802da80:	4629      	mov	r1, r5
 802da82:	4630      	mov	r0, r6
 802da84:	f000 fb4a 	bl	802e11c <__swsetup_r>
 802da88:	b1c0      	cbz	r0, 802dabc <_vfiprintf_r+0x78>
 802da8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802da8c:	07dc      	lsls	r4, r3, #31
 802da8e:	d50e      	bpl.n	802daae <_vfiprintf_r+0x6a>
 802da90:	f04f 30ff 	mov.w	r0, #4294967295
 802da94:	b01d      	add	sp, #116	; 0x74
 802da96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802da9a:	4b7b      	ldr	r3, [pc, #492]	; (802dc88 <_vfiprintf_r+0x244>)
 802da9c:	429d      	cmp	r5, r3
 802da9e:	d101      	bne.n	802daa4 <_vfiprintf_r+0x60>
 802daa0:	68b5      	ldr	r5, [r6, #8]
 802daa2:	e7df      	b.n	802da64 <_vfiprintf_r+0x20>
 802daa4:	4b79      	ldr	r3, [pc, #484]	; (802dc8c <_vfiprintf_r+0x248>)
 802daa6:	429d      	cmp	r5, r3
 802daa8:	bf08      	it	eq
 802daaa:	68f5      	ldreq	r5, [r6, #12]
 802daac:	e7da      	b.n	802da64 <_vfiprintf_r+0x20>
 802daae:	89ab      	ldrh	r3, [r5, #12]
 802dab0:	0598      	lsls	r0, r3, #22
 802dab2:	d4ed      	bmi.n	802da90 <_vfiprintf_r+0x4c>
 802dab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802dab6:	f7ff fe32 	bl	802d71e <__retarget_lock_release_recursive>
 802daba:	e7e9      	b.n	802da90 <_vfiprintf_r+0x4c>
 802dabc:	2300      	movs	r3, #0
 802dabe:	9309      	str	r3, [sp, #36]	; 0x24
 802dac0:	2320      	movs	r3, #32
 802dac2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802dac6:	f8cd 800c 	str.w	r8, [sp, #12]
 802daca:	2330      	movs	r3, #48	; 0x30
 802dacc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802dc90 <_vfiprintf_r+0x24c>
 802dad0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802dad4:	f04f 0901 	mov.w	r9, #1
 802dad8:	4623      	mov	r3, r4
 802dada:	469a      	mov	sl, r3
 802dadc:	f813 2b01 	ldrb.w	r2, [r3], #1
 802dae0:	b10a      	cbz	r2, 802dae6 <_vfiprintf_r+0xa2>
 802dae2:	2a25      	cmp	r2, #37	; 0x25
 802dae4:	d1f9      	bne.n	802dada <_vfiprintf_r+0x96>
 802dae6:	ebba 0b04 	subs.w	fp, sl, r4
 802daea:	d00b      	beq.n	802db04 <_vfiprintf_r+0xc0>
 802daec:	465b      	mov	r3, fp
 802daee:	4622      	mov	r2, r4
 802daf0:	4629      	mov	r1, r5
 802daf2:	4630      	mov	r0, r6
 802daf4:	f7ff ff93 	bl	802da1e <__sfputs_r>
 802daf8:	3001      	adds	r0, #1
 802dafa:	f000 80aa 	beq.w	802dc52 <_vfiprintf_r+0x20e>
 802dafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802db00:	445a      	add	r2, fp
 802db02:	9209      	str	r2, [sp, #36]	; 0x24
 802db04:	f89a 3000 	ldrb.w	r3, [sl]
 802db08:	2b00      	cmp	r3, #0
 802db0a:	f000 80a2 	beq.w	802dc52 <_vfiprintf_r+0x20e>
 802db0e:	2300      	movs	r3, #0
 802db10:	f04f 32ff 	mov.w	r2, #4294967295
 802db14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802db18:	f10a 0a01 	add.w	sl, sl, #1
 802db1c:	9304      	str	r3, [sp, #16]
 802db1e:	9307      	str	r3, [sp, #28]
 802db20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802db24:	931a      	str	r3, [sp, #104]	; 0x68
 802db26:	4654      	mov	r4, sl
 802db28:	2205      	movs	r2, #5
 802db2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802db2e:	4858      	ldr	r0, [pc, #352]	; (802dc90 <_vfiprintf_r+0x24c>)
 802db30:	f7f2 fb5e 	bl	80201f0 <memchr>
 802db34:	9a04      	ldr	r2, [sp, #16]
 802db36:	b9d8      	cbnz	r0, 802db70 <_vfiprintf_r+0x12c>
 802db38:	06d1      	lsls	r1, r2, #27
 802db3a:	bf44      	itt	mi
 802db3c:	2320      	movmi	r3, #32
 802db3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802db42:	0713      	lsls	r3, r2, #28
 802db44:	bf44      	itt	mi
 802db46:	232b      	movmi	r3, #43	; 0x2b
 802db48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802db4c:	f89a 3000 	ldrb.w	r3, [sl]
 802db50:	2b2a      	cmp	r3, #42	; 0x2a
 802db52:	d015      	beq.n	802db80 <_vfiprintf_r+0x13c>
 802db54:	9a07      	ldr	r2, [sp, #28]
 802db56:	4654      	mov	r4, sl
 802db58:	2000      	movs	r0, #0
 802db5a:	f04f 0c0a 	mov.w	ip, #10
 802db5e:	4621      	mov	r1, r4
 802db60:	f811 3b01 	ldrb.w	r3, [r1], #1
 802db64:	3b30      	subs	r3, #48	; 0x30
 802db66:	2b09      	cmp	r3, #9
 802db68:	d94e      	bls.n	802dc08 <_vfiprintf_r+0x1c4>
 802db6a:	b1b0      	cbz	r0, 802db9a <_vfiprintf_r+0x156>
 802db6c:	9207      	str	r2, [sp, #28]
 802db6e:	e014      	b.n	802db9a <_vfiprintf_r+0x156>
 802db70:	eba0 0308 	sub.w	r3, r0, r8
 802db74:	fa09 f303 	lsl.w	r3, r9, r3
 802db78:	4313      	orrs	r3, r2
 802db7a:	9304      	str	r3, [sp, #16]
 802db7c:	46a2      	mov	sl, r4
 802db7e:	e7d2      	b.n	802db26 <_vfiprintf_r+0xe2>
 802db80:	9b03      	ldr	r3, [sp, #12]
 802db82:	1d19      	adds	r1, r3, #4
 802db84:	681b      	ldr	r3, [r3, #0]
 802db86:	9103      	str	r1, [sp, #12]
 802db88:	2b00      	cmp	r3, #0
 802db8a:	bfbb      	ittet	lt
 802db8c:	425b      	neglt	r3, r3
 802db8e:	f042 0202 	orrlt.w	r2, r2, #2
 802db92:	9307      	strge	r3, [sp, #28]
 802db94:	9307      	strlt	r3, [sp, #28]
 802db96:	bfb8      	it	lt
 802db98:	9204      	strlt	r2, [sp, #16]
 802db9a:	7823      	ldrb	r3, [r4, #0]
 802db9c:	2b2e      	cmp	r3, #46	; 0x2e
 802db9e:	d10c      	bne.n	802dbba <_vfiprintf_r+0x176>
 802dba0:	7863      	ldrb	r3, [r4, #1]
 802dba2:	2b2a      	cmp	r3, #42	; 0x2a
 802dba4:	d135      	bne.n	802dc12 <_vfiprintf_r+0x1ce>
 802dba6:	9b03      	ldr	r3, [sp, #12]
 802dba8:	1d1a      	adds	r2, r3, #4
 802dbaa:	681b      	ldr	r3, [r3, #0]
 802dbac:	9203      	str	r2, [sp, #12]
 802dbae:	2b00      	cmp	r3, #0
 802dbb0:	bfb8      	it	lt
 802dbb2:	f04f 33ff 	movlt.w	r3, #4294967295
 802dbb6:	3402      	adds	r4, #2
 802dbb8:	9305      	str	r3, [sp, #20]
 802dbba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802dca0 <_vfiprintf_r+0x25c>
 802dbbe:	7821      	ldrb	r1, [r4, #0]
 802dbc0:	2203      	movs	r2, #3
 802dbc2:	4650      	mov	r0, sl
 802dbc4:	f7f2 fb14 	bl	80201f0 <memchr>
 802dbc8:	b140      	cbz	r0, 802dbdc <_vfiprintf_r+0x198>
 802dbca:	2340      	movs	r3, #64	; 0x40
 802dbcc:	eba0 000a 	sub.w	r0, r0, sl
 802dbd0:	fa03 f000 	lsl.w	r0, r3, r0
 802dbd4:	9b04      	ldr	r3, [sp, #16]
 802dbd6:	4303      	orrs	r3, r0
 802dbd8:	3401      	adds	r4, #1
 802dbda:	9304      	str	r3, [sp, #16]
 802dbdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 802dbe0:	482c      	ldr	r0, [pc, #176]	; (802dc94 <_vfiprintf_r+0x250>)
 802dbe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802dbe6:	2206      	movs	r2, #6
 802dbe8:	f7f2 fb02 	bl	80201f0 <memchr>
 802dbec:	2800      	cmp	r0, #0
 802dbee:	d03f      	beq.n	802dc70 <_vfiprintf_r+0x22c>
 802dbf0:	4b29      	ldr	r3, [pc, #164]	; (802dc98 <_vfiprintf_r+0x254>)
 802dbf2:	bb1b      	cbnz	r3, 802dc3c <_vfiprintf_r+0x1f8>
 802dbf4:	9b03      	ldr	r3, [sp, #12]
 802dbf6:	3307      	adds	r3, #7
 802dbf8:	f023 0307 	bic.w	r3, r3, #7
 802dbfc:	3308      	adds	r3, #8
 802dbfe:	9303      	str	r3, [sp, #12]
 802dc00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802dc02:	443b      	add	r3, r7
 802dc04:	9309      	str	r3, [sp, #36]	; 0x24
 802dc06:	e767      	b.n	802dad8 <_vfiprintf_r+0x94>
 802dc08:	fb0c 3202 	mla	r2, ip, r2, r3
 802dc0c:	460c      	mov	r4, r1
 802dc0e:	2001      	movs	r0, #1
 802dc10:	e7a5      	b.n	802db5e <_vfiprintf_r+0x11a>
 802dc12:	2300      	movs	r3, #0
 802dc14:	3401      	adds	r4, #1
 802dc16:	9305      	str	r3, [sp, #20]
 802dc18:	4619      	mov	r1, r3
 802dc1a:	f04f 0c0a 	mov.w	ip, #10
 802dc1e:	4620      	mov	r0, r4
 802dc20:	f810 2b01 	ldrb.w	r2, [r0], #1
 802dc24:	3a30      	subs	r2, #48	; 0x30
 802dc26:	2a09      	cmp	r2, #9
 802dc28:	d903      	bls.n	802dc32 <_vfiprintf_r+0x1ee>
 802dc2a:	2b00      	cmp	r3, #0
 802dc2c:	d0c5      	beq.n	802dbba <_vfiprintf_r+0x176>
 802dc2e:	9105      	str	r1, [sp, #20]
 802dc30:	e7c3      	b.n	802dbba <_vfiprintf_r+0x176>
 802dc32:	fb0c 2101 	mla	r1, ip, r1, r2
 802dc36:	4604      	mov	r4, r0
 802dc38:	2301      	movs	r3, #1
 802dc3a:	e7f0      	b.n	802dc1e <_vfiprintf_r+0x1da>
 802dc3c:	ab03      	add	r3, sp, #12
 802dc3e:	9300      	str	r3, [sp, #0]
 802dc40:	462a      	mov	r2, r5
 802dc42:	4b16      	ldr	r3, [pc, #88]	; (802dc9c <_vfiprintf_r+0x258>)
 802dc44:	a904      	add	r1, sp, #16
 802dc46:	4630      	mov	r0, r6
 802dc48:	f3af 8000 	nop.w
 802dc4c:	4607      	mov	r7, r0
 802dc4e:	1c78      	adds	r0, r7, #1
 802dc50:	d1d6      	bne.n	802dc00 <_vfiprintf_r+0x1bc>
 802dc52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802dc54:	07d9      	lsls	r1, r3, #31
 802dc56:	d405      	bmi.n	802dc64 <_vfiprintf_r+0x220>
 802dc58:	89ab      	ldrh	r3, [r5, #12]
 802dc5a:	059a      	lsls	r2, r3, #22
 802dc5c:	d402      	bmi.n	802dc64 <_vfiprintf_r+0x220>
 802dc5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802dc60:	f7ff fd5d 	bl	802d71e <__retarget_lock_release_recursive>
 802dc64:	89ab      	ldrh	r3, [r5, #12]
 802dc66:	065b      	lsls	r3, r3, #25
 802dc68:	f53f af12 	bmi.w	802da90 <_vfiprintf_r+0x4c>
 802dc6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802dc6e:	e711      	b.n	802da94 <_vfiprintf_r+0x50>
 802dc70:	ab03      	add	r3, sp, #12
 802dc72:	9300      	str	r3, [sp, #0]
 802dc74:	462a      	mov	r2, r5
 802dc76:	4b09      	ldr	r3, [pc, #36]	; (802dc9c <_vfiprintf_r+0x258>)
 802dc78:	a904      	add	r1, sp, #16
 802dc7a:	4630      	mov	r0, r6
 802dc7c:	f000 f880 	bl	802dd80 <_printf_i>
 802dc80:	e7e4      	b.n	802dc4c <_vfiprintf_r+0x208>
 802dc82:	bf00      	nop
 802dc84:	08030594 	.word	0x08030594
 802dc88:	080305b4 	.word	0x080305b4
 802dc8c:	08030574 	.word	0x08030574
 802dc90:	080305d4 	.word	0x080305d4
 802dc94:	080305de 	.word	0x080305de
 802dc98:	00000000 	.word	0x00000000
 802dc9c:	0802da1f 	.word	0x0802da1f
 802dca0:	080305da 	.word	0x080305da

0802dca4 <_printf_common>:
 802dca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802dca8:	4616      	mov	r6, r2
 802dcaa:	4699      	mov	r9, r3
 802dcac:	688a      	ldr	r2, [r1, #8]
 802dcae:	690b      	ldr	r3, [r1, #16]
 802dcb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802dcb4:	4293      	cmp	r3, r2
 802dcb6:	bfb8      	it	lt
 802dcb8:	4613      	movlt	r3, r2
 802dcba:	6033      	str	r3, [r6, #0]
 802dcbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802dcc0:	4607      	mov	r7, r0
 802dcc2:	460c      	mov	r4, r1
 802dcc4:	b10a      	cbz	r2, 802dcca <_printf_common+0x26>
 802dcc6:	3301      	adds	r3, #1
 802dcc8:	6033      	str	r3, [r6, #0]
 802dcca:	6823      	ldr	r3, [r4, #0]
 802dccc:	0699      	lsls	r1, r3, #26
 802dcce:	bf42      	ittt	mi
 802dcd0:	6833      	ldrmi	r3, [r6, #0]
 802dcd2:	3302      	addmi	r3, #2
 802dcd4:	6033      	strmi	r3, [r6, #0]
 802dcd6:	6825      	ldr	r5, [r4, #0]
 802dcd8:	f015 0506 	ands.w	r5, r5, #6
 802dcdc:	d106      	bne.n	802dcec <_printf_common+0x48>
 802dcde:	f104 0a19 	add.w	sl, r4, #25
 802dce2:	68e3      	ldr	r3, [r4, #12]
 802dce4:	6832      	ldr	r2, [r6, #0]
 802dce6:	1a9b      	subs	r3, r3, r2
 802dce8:	42ab      	cmp	r3, r5
 802dcea:	dc26      	bgt.n	802dd3a <_printf_common+0x96>
 802dcec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802dcf0:	1e13      	subs	r3, r2, #0
 802dcf2:	6822      	ldr	r2, [r4, #0]
 802dcf4:	bf18      	it	ne
 802dcf6:	2301      	movne	r3, #1
 802dcf8:	0692      	lsls	r2, r2, #26
 802dcfa:	d42b      	bmi.n	802dd54 <_printf_common+0xb0>
 802dcfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802dd00:	4649      	mov	r1, r9
 802dd02:	4638      	mov	r0, r7
 802dd04:	47c0      	blx	r8
 802dd06:	3001      	adds	r0, #1
 802dd08:	d01e      	beq.n	802dd48 <_printf_common+0xa4>
 802dd0a:	6823      	ldr	r3, [r4, #0]
 802dd0c:	68e5      	ldr	r5, [r4, #12]
 802dd0e:	6832      	ldr	r2, [r6, #0]
 802dd10:	f003 0306 	and.w	r3, r3, #6
 802dd14:	2b04      	cmp	r3, #4
 802dd16:	bf08      	it	eq
 802dd18:	1aad      	subeq	r5, r5, r2
 802dd1a:	68a3      	ldr	r3, [r4, #8]
 802dd1c:	6922      	ldr	r2, [r4, #16]
 802dd1e:	bf0c      	ite	eq
 802dd20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802dd24:	2500      	movne	r5, #0
 802dd26:	4293      	cmp	r3, r2
 802dd28:	bfc4      	itt	gt
 802dd2a:	1a9b      	subgt	r3, r3, r2
 802dd2c:	18ed      	addgt	r5, r5, r3
 802dd2e:	2600      	movs	r6, #0
 802dd30:	341a      	adds	r4, #26
 802dd32:	42b5      	cmp	r5, r6
 802dd34:	d11a      	bne.n	802dd6c <_printf_common+0xc8>
 802dd36:	2000      	movs	r0, #0
 802dd38:	e008      	b.n	802dd4c <_printf_common+0xa8>
 802dd3a:	2301      	movs	r3, #1
 802dd3c:	4652      	mov	r2, sl
 802dd3e:	4649      	mov	r1, r9
 802dd40:	4638      	mov	r0, r7
 802dd42:	47c0      	blx	r8
 802dd44:	3001      	adds	r0, #1
 802dd46:	d103      	bne.n	802dd50 <_printf_common+0xac>
 802dd48:	f04f 30ff 	mov.w	r0, #4294967295
 802dd4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802dd50:	3501      	adds	r5, #1
 802dd52:	e7c6      	b.n	802dce2 <_printf_common+0x3e>
 802dd54:	18e1      	adds	r1, r4, r3
 802dd56:	1c5a      	adds	r2, r3, #1
 802dd58:	2030      	movs	r0, #48	; 0x30
 802dd5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802dd5e:	4422      	add	r2, r4
 802dd60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802dd64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802dd68:	3302      	adds	r3, #2
 802dd6a:	e7c7      	b.n	802dcfc <_printf_common+0x58>
 802dd6c:	2301      	movs	r3, #1
 802dd6e:	4622      	mov	r2, r4
 802dd70:	4649      	mov	r1, r9
 802dd72:	4638      	mov	r0, r7
 802dd74:	47c0      	blx	r8
 802dd76:	3001      	adds	r0, #1
 802dd78:	d0e6      	beq.n	802dd48 <_printf_common+0xa4>
 802dd7a:	3601      	adds	r6, #1
 802dd7c:	e7d9      	b.n	802dd32 <_printf_common+0x8e>
	...

0802dd80 <_printf_i>:
 802dd80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802dd84:	7e0f      	ldrb	r7, [r1, #24]
 802dd86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802dd88:	2f78      	cmp	r7, #120	; 0x78
 802dd8a:	4691      	mov	r9, r2
 802dd8c:	4680      	mov	r8, r0
 802dd8e:	460c      	mov	r4, r1
 802dd90:	469a      	mov	sl, r3
 802dd92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802dd96:	d807      	bhi.n	802dda8 <_printf_i+0x28>
 802dd98:	2f62      	cmp	r7, #98	; 0x62
 802dd9a:	d80a      	bhi.n	802ddb2 <_printf_i+0x32>
 802dd9c:	2f00      	cmp	r7, #0
 802dd9e:	f000 80d8 	beq.w	802df52 <_printf_i+0x1d2>
 802dda2:	2f58      	cmp	r7, #88	; 0x58
 802dda4:	f000 80a3 	beq.w	802deee <_printf_i+0x16e>
 802dda8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ddac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802ddb0:	e03a      	b.n	802de28 <_printf_i+0xa8>
 802ddb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802ddb6:	2b15      	cmp	r3, #21
 802ddb8:	d8f6      	bhi.n	802dda8 <_printf_i+0x28>
 802ddba:	a101      	add	r1, pc, #4	; (adr r1, 802ddc0 <_printf_i+0x40>)
 802ddbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802ddc0:	0802de19 	.word	0x0802de19
 802ddc4:	0802de2d 	.word	0x0802de2d
 802ddc8:	0802dda9 	.word	0x0802dda9
 802ddcc:	0802dda9 	.word	0x0802dda9
 802ddd0:	0802dda9 	.word	0x0802dda9
 802ddd4:	0802dda9 	.word	0x0802dda9
 802ddd8:	0802de2d 	.word	0x0802de2d
 802dddc:	0802dda9 	.word	0x0802dda9
 802dde0:	0802dda9 	.word	0x0802dda9
 802dde4:	0802dda9 	.word	0x0802dda9
 802dde8:	0802dda9 	.word	0x0802dda9
 802ddec:	0802df39 	.word	0x0802df39
 802ddf0:	0802de5d 	.word	0x0802de5d
 802ddf4:	0802df1b 	.word	0x0802df1b
 802ddf8:	0802dda9 	.word	0x0802dda9
 802ddfc:	0802dda9 	.word	0x0802dda9
 802de00:	0802df5b 	.word	0x0802df5b
 802de04:	0802dda9 	.word	0x0802dda9
 802de08:	0802de5d 	.word	0x0802de5d
 802de0c:	0802dda9 	.word	0x0802dda9
 802de10:	0802dda9 	.word	0x0802dda9
 802de14:	0802df23 	.word	0x0802df23
 802de18:	682b      	ldr	r3, [r5, #0]
 802de1a:	1d1a      	adds	r2, r3, #4
 802de1c:	681b      	ldr	r3, [r3, #0]
 802de1e:	602a      	str	r2, [r5, #0]
 802de20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802de24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802de28:	2301      	movs	r3, #1
 802de2a:	e0a3      	b.n	802df74 <_printf_i+0x1f4>
 802de2c:	6820      	ldr	r0, [r4, #0]
 802de2e:	6829      	ldr	r1, [r5, #0]
 802de30:	0606      	lsls	r6, r0, #24
 802de32:	f101 0304 	add.w	r3, r1, #4
 802de36:	d50a      	bpl.n	802de4e <_printf_i+0xce>
 802de38:	680e      	ldr	r6, [r1, #0]
 802de3a:	602b      	str	r3, [r5, #0]
 802de3c:	2e00      	cmp	r6, #0
 802de3e:	da03      	bge.n	802de48 <_printf_i+0xc8>
 802de40:	232d      	movs	r3, #45	; 0x2d
 802de42:	4276      	negs	r6, r6
 802de44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802de48:	485e      	ldr	r0, [pc, #376]	; (802dfc4 <_printf_i+0x244>)
 802de4a:	230a      	movs	r3, #10
 802de4c:	e019      	b.n	802de82 <_printf_i+0x102>
 802de4e:	680e      	ldr	r6, [r1, #0]
 802de50:	602b      	str	r3, [r5, #0]
 802de52:	f010 0f40 	tst.w	r0, #64	; 0x40
 802de56:	bf18      	it	ne
 802de58:	b236      	sxthne	r6, r6
 802de5a:	e7ef      	b.n	802de3c <_printf_i+0xbc>
 802de5c:	682b      	ldr	r3, [r5, #0]
 802de5e:	6820      	ldr	r0, [r4, #0]
 802de60:	1d19      	adds	r1, r3, #4
 802de62:	6029      	str	r1, [r5, #0]
 802de64:	0601      	lsls	r1, r0, #24
 802de66:	d501      	bpl.n	802de6c <_printf_i+0xec>
 802de68:	681e      	ldr	r6, [r3, #0]
 802de6a:	e002      	b.n	802de72 <_printf_i+0xf2>
 802de6c:	0646      	lsls	r6, r0, #25
 802de6e:	d5fb      	bpl.n	802de68 <_printf_i+0xe8>
 802de70:	881e      	ldrh	r6, [r3, #0]
 802de72:	4854      	ldr	r0, [pc, #336]	; (802dfc4 <_printf_i+0x244>)
 802de74:	2f6f      	cmp	r7, #111	; 0x6f
 802de76:	bf0c      	ite	eq
 802de78:	2308      	moveq	r3, #8
 802de7a:	230a      	movne	r3, #10
 802de7c:	2100      	movs	r1, #0
 802de7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802de82:	6865      	ldr	r5, [r4, #4]
 802de84:	60a5      	str	r5, [r4, #8]
 802de86:	2d00      	cmp	r5, #0
 802de88:	bfa2      	ittt	ge
 802de8a:	6821      	ldrge	r1, [r4, #0]
 802de8c:	f021 0104 	bicge.w	r1, r1, #4
 802de90:	6021      	strge	r1, [r4, #0]
 802de92:	b90e      	cbnz	r6, 802de98 <_printf_i+0x118>
 802de94:	2d00      	cmp	r5, #0
 802de96:	d04d      	beq.n	802df34 <_printf_i+0x1b4>
 802de98:	4615      	mov	r5, r2
 802de9a:	fbb6 f1f3 	udiv	r1, r6, r3
 802de9e:	fb03 6711 	mls	r7, r3, r1, r6
 802dea2:	5dc7      	ldrb	r7, [r0, r7]
 802dea4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802dea8:	4637      	mov	r7, r6
 802deaa:	42bb      	cmp	r3, r7
 802deac:	460e      	mov	r6, r1
 802deae:	d9f4      	bls.n	802de9a <_printf_i+0x11a>
 802deb0:	2b08      	cmp	r3, #8
 802deb2:	d10b      	bne.n	802decc <_printf_i+0x14c>
 802deb4:	6823      	ldr	r3, [r4, #0]
 802deb6:	07de      	lsls	r6, r3, #31
 802deb8:	d508      	bpl.n	802decc <_printf_i+0x14c>
 802deba:	6923      	ldr	r3, [r4, #16]
 802debc:	6861      	ldr	r1, [r4, #4]
 802debe:	4299      	cmp	r1, r3
 802dec0:	bfde      	ittt	le
 802dec2:	2330      	movle	r3, #48	; 0x30
 802dec4:	f805 3c01 	strble.w	r3, [r5, #-1]
 802dec8:	f105 35ff 	addle.w	r5, r5, #4294967295
 802decc:	1b52      	subs	r2, r2, r5
 802dece:	6122      	str	r2, [r4, #16]
 802ded0:	f8cd a000 	str.w	sl, [sp]
 802ded4:	464b      	mov	r3, r9
 802ded6:	aa03      	add	r2, sp, #12
 802ded8:	4621      	mov	r1, r4
 802deda:	4640      	mov	r0, r8
 802dedc:	f7ff fee2 	bl	802dca4 <_printf_common>
 802dee0:	3001      	adds	r0, #1
 802dee2:	d14c      	bne.n	802df7e <_printf_i+0x1fe>
 802dee4:	f04f 30ff 	mov.w	r0, #4294967295
 802dee8:	b004      	add	sp, #16
 802deea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802deee:	4835      	ldr	r0, [pc, #212]	; (802dfc4 <_printf_i+0x244>)
 802def0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802def4:	6829      	ldr	r1, [r5, #0]
 802def6:	6823      	ldr	r3, [r4, #0]
 802def8:	f851 6b04 	ldr.w	r6, [r1], #4
 802defc:	6029      	str	r1, [r5, #0]
 802defe:	061d      	lsls	r5, r3, #24
 802df00:	d514      	bpl.n	802df2c <_printf_i+0x1ac>
 802df02:	07df      	lsls	r7, r3, #31
 802df04:	bf44      	itt	mi
 802df06:	f043 0320 	orrmi.w	r3, r3, #32
 802df0a:	6023      	strmi	r3, [r4, #0]
 802df0c:	b91e      	cbnz	r6, 802df16 <_printf_i+0x196>
 802df0e:	6823      	ldr	r3, [r4, #0]
 802df10:	f023 0320 	bic.w	r3, r3, #32
 802df14:	6023      	str	r3, [r4, #0]
 802df16:	2310      	movs	r3, #16
 802df18:	e7b0      	b.n	802de7c <_printf_i+0xfc>
 802df1a:	6823      	ldr	r3, [r4, #0]
 802df1c:	f043 0320 	orr.w	r3, r3, #32
 802df20:	6023      	str	r3, [r4, #0]
 802df22:	2378      	movs	r3, #120	; 0x78
 802df24:	4828      	ldr	r0, [pc, #160]	; (802dfc8 <_printf_i+0x248>)
 802df26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802df2a:	e7e3      	b.n	802def4 <_printf_i+0x174>
 802df2c:	0659      	lsls	r1, r3, #25
 802df2e:	bf48      	it	mi
 802df30:	b2b6      	uxthmi	r6, r6
 802df32:	e7e6      	b.n	802df02 <_printf_i+0x182>
 802df34:	4615      	mov	r5, r2
 802df36:	e7bb      	b.n	802deb0 <_printf_i+0x130>
 802df38:	682b      	ldr	r3, [r5, #0]
 802df3a:	6826      	ldr	r6, [r4, #0]
 802df3c:	6961      	ldr	r1, [r4, #20]
 802df3e:	1d18      	adds	r0, r3, #4
 802df40:	6028      	str	r0, [r5, #0]
 802df42:	0635      	lsls	r5, r6, #24
 802df44:	681b      	ldr	r3, [r3, #0]
 802df46:	d501      	bpl.n	802df4c <_printf_i+0x1cc>
 802df48:	6019      	str	r1, [r3, #0]
 802df4a:	e002      	b.n	802df52 <_printf_i+0x1d2>
 802df4c:	0670      	lsls	r0, r6, #25
 802df4e:	d5fb      	bpl.n	802df48 <_printf_i+0x1c8>
 802df50:	8019      	strh	r1, [r3, #0]
 802df52:	2300      	movs	r3, #0
 802df54:	6123      	str	r3, [r4, #16]
 802df56:	4615      	mov	r5, r2
 802df58:	e7ba      	b.n	802ded0 <_printf_i+0x150>
 802df5a:	682b      	ldr	r3, [r5, #0]
 802df5c:	1d1a      	adds	r2, r3, #4
 802df5e:	602a      	str	r2, [r5, #0]
 802df60:	681d      	ldr	r5, [r3, #0]
 802df62:	6862      	ldr	r2, [r4, #4]
 802df64:	2100      	movs	r1, #0
 802df66:	4628      	mov	r0, r5
 802df68:	f7f2 f942 	bl	80201f0 <memchr>
 802df6c:	b108      	cbz	r0, 802df72 <_printf_i+0x1f2>
 802df6e:	1b40      	subs	r0, r0, r5
 802df70:	6060      	str	r0, [r4, #4]
 802df72:	6863      	ldr	r3, [r4, #4]
 802df74:	6123      	str	r3, [r4, #16]
 802df76:	2300      	movs	r3, #0
 802df78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802df7c:	e7a8      	b.n	802ded0 <_printf_i+0x150>
 802df7e:	6923      	ldr	r3, [r4, #16]
 802df80:	462a      	mov	r2, r5
 802df82:	4649      	mov	r1, r9
 802df84:	4640      	mov	r0, r8
 802df86:	47d0      	blx	sl
 802df88:	3001      	adds	r0, #1
 802df8a:	d0ab      	beq.n	802dee4 <_printf_i+0x164>
 802df8c:	6823      	ldr	r3, [r4, #0]
 802df8e:	079b      	lsls	r3, r3, #30
 802df90:	d413      	bmi.n	802dfba <_printf_i+0x23a>
 802df92:	68e0      	ldr	r0, [r4, #12]
 802df94:	9b03      	ldr	r3, [sp, #12]
 802df96:	4298      	cmp	r0, r3
 802df98:	bfb8      	it	lt
 802df9a:	4618      	movlt	r0, r3
 802df9c:	e7a4      	b.n	802dee8 <_printf_i+0x168>
 802df9e:	2301      	movs	r3, #1
 802dfa0:	4632      	mov	r2, r6
 802dfa2:	4649      	mov	r1, r9
 802dfa4:	4640      	mov	r0, r8
 802dfa6:	47d0      	blx	sl
 802dfa8:	3001      	adds	r0, #1
 802dfaa:	d09b      	beq.n	802dee4 <_printf_i+0x164>
 802dfac:	3501      	adds	r5, #1
 802dfae:	68e3      	ldr	r3, [r4, #12]
 802dfb0:	9903      	ldr	r1, [sp, #12]
 802dfb2:	1a5b      	subs	r3, r3, r1
 802dfb4:	42ab      	cmp	r3, r5
 802dfb6:	dcf2      	bgt.n	802df9e <_printf_i+0x21e>
 802dfb8:	e7eb      	b.n	802df92 <_printf_i+0x212>
 802dfba:	2500      	movs	r5, #0
 802dfbc:	f104 0619 	add.w	r6, r4, #25
 802dfc0:	e7f5      	b.n	802dfae <_printf_i+0x22e>
 802dfc2:	bf00      	nop
 802dfc4:	080305e5 	.word	0x080305e5
 802dfc8:	080305f6 	.word	0x080305f6

0802dfcc <__sread>:
 802dfcc:	b510      	push	{r4, lr}
 802dfce:	460c      	mov	r4, r1
 802dfd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802dfd4:	f000 fab2 	bl	802e53c <_read_r>
 802dfd8:	2800      	cmp	r0, #0
 802dfda:	bfab      	itete	ge
 802dfdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802dfde:	89a3      	ldrhlt	r3, [r4, #12]
 802dfe0:	181b      	addge	r3, r3, r0
 802dfe2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802dfe6:	bfac      	ite	ge
 802dfe8:	6563      	strge	r3, [r4, #84]	; 0x54
 802dfea:	81a3      	strhlt	r3, [r4, #12]
 802dfec:	bd10      	pop	{r4, pc}

0802dfee <__swrite>:
 802dfee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802dff2:	461f      	mov	r7, r3
 802dff4:	898b      	ldrh	r3, [r1, #12]
 802dff6:	05db      	lsls	r3, r3, #23
 802dff8:	4605      	mov	r5, r0
 802dffa:	460c      	mov	r4, r1
 802dffc:	4616      	mov	r6, r2
 802dffe:	d505      	bpl.n	802e00c <__swrite+0x1e>
 802e000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e004:	2302      	movs	r3, #2
 802e006:	2200      	movs	r2, #0
 802e008:	f000 f9c8 	bl	802e39c <_lseek_r>
 802e00c:	89a3      	ldrh	r3, [r4, #12]
 802e00e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802e016:	81a3      	strh	r3, [r4, #12]
 802e018:	4632      	mov	r2, r6
 802e01a:	463b      	mov	r3, r7
 802e01c:	4628      	mov	r0, r5
 802e01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802e022:	f000 b869 	b.w	802e0f8 <_write_r>

0802e026 <__sseek>:
 802e026:	b510      	push	{r4, lr}
 802e028:	460c      	mov	r4, r1
 802e02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e02e:	f000 f9b5 	bl	802e39c <_lseek_r>
 802e032:	1c43      	adds	r3, r0, #1
 802e034:	89a3      	ldrh	r3, [r4, #12]
 802e036:	bf15      	itete	ne
 802e038:	6560      	strne	r0, [r4, #84]	; 0x54
 802e03a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802e03e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802e042:	81a3      	strheq	r3, [r4, #12]
 802e044:	bf18      	it	ne
 802e046:	81a3      	strhne	r3, [r4, #12]
 802e048:	bd10      	pop	{r4, pc}

0802e04a <__sclose>:
 802e04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e04e:	f000 b8d3 	b.w	802e1f8 <_close_r>
	...

0802e054 <__swbuf_r>:
 802e054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e056:	460e      	mov	r6, r1
 802e058:	4614      	mov	r4, r2
 802e05a:	4605      	mov	r5, r0
 802e05c:	b118      	cbz	r0, 802e066 <__swbuf_r+0x12>
 802e05e:	6983      	ldr	r3, [r0, #24]
 802e060:	b90b      	cbnz	r3, 802e066 <__swbuf_r+0x12>
 802e062:	f7ff fabd 	bl	802d5e0 <__sinit>
 802e066:	4b21      	ldr	r3, [pc, #132]	; (802e0ec <__swbuf_r+0x98>)
 802e068:	429c      	cmp	r4, r3
 802e06a:	d12b      	bne.n	802e0c4 <__swbuf_r+0x70>
 802e06c:	686c      	ldr	r4, [r5, #4]
 802e06e:	69a3      	ldr	r3, [r4, #24]
 802e070:	60a3      	str	r3, [r4, #8]
 802e072:	89a3      	ldrh	r3, [r4, #12]
 802e074:	071a      	lsls	r2, r3, #28
 802e076:	d52f      	bpl.n	802e0d8 <__swbuf_r+0x84>
 802e078:	6923      	ldr	r3, [r4, #16]
 802e07a:	b36b      	cbz	r3, 802e0d8 <__swbuf_r+0x84>
 802e07c:	6923      	ldr	r3, [r4, #16]
 802e07e:	6820      	ldr	r0, [r4, #0]
 802e080:	1ac0      	subs	r0, r0, r3
 802e082:	6963      	ldr	r3, [r4, #20]
 802e084:	b2f6      	uxtb	r6, r6
 802e086:	4283      	cmp	r3, r0
 802e088:	4637      	mov	r7, r6
 802e08a:	dc04      	bgt.n	802e096 <__swbuf_r+0x42>
 802e08c:	4621      	mov	r1, r4
 802e08e:	4628      	mov	r0, r5
 802e090:	f000 f948 	bl	802e324 <_fflush_r>
 802e094:	bb30      	cbnz	r0, 802e0e4 <__swbuf_r+0x90>
 802e096:	68a3      	ldr	r3, [r4, #8]
 802e098:	3b01      	subs	r3, #1
 802e09a:	60a3      	str	r3, [r4, #8]
 802e09c:	6823      	ldr	r3, [r4, #0]
 802e09e:	1c5a      	adds	r2, r3, #1
 802e0a0:	6022      	str	r2, [r4, #0]
 802e0a2:	701e      	strb	r6, [r3, #0]
 802e0a4:	6963      	ldr	r3, [r4, #20]
 802e0a6:	3001      	adds	r0, #1
 802e0a8:	4283      	cmp	r3, r0
 802e0aa:	d004      	beq.n	802e0b6 <__swbuf_r+0x62>
 802e0ac:	89a3      	ldrh	r3, [r4, #12]
 802e0ae:	07db      	lsls	r3, r3, #31
 802e0b0:	d506      	bpl.n	802e0c0 <__swbuf_r+0x6c>
 802e0b2:	2e0a      	cmp	r6, #10
 802e0b4:	d104      	bne.n	802e0c0 <__swbuf_r+0x6c>
 802e0b6:	4621      	mov	r1, r4
 802e0b8:	4628      	mov	r0, r5
 802e0ba:	f000 f933 	bl	802e324 <_fflush_r>
 802e0be:	b988      	cbnz	r0, 802e0e4 <__swbuf_r+0x90>
 802e0c0:	4638      	mov	r0, r7
 802e0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e0c4:	4b0a      	ldr	r3, [pc, #40]	; (802e0f0 <__swbuf_r+0x9c>)
 802e0c6:	429c      	cmp	r4, r3
 802e0c8:	d101      	bne.n	802e0ce <__swbuf_r+0x7a>
 802e0ca:	68ac      	ldr	r4, [r5, #8]
 802e0cc:	e7cf      	b.n	802e06e <__swbuf_r+0x1a>
 802e0ce:	4b09      	ldr	r3, [pc, #36]	; (802e0f4 <__swbuf_r+0xa0>)
 802e0d0:	429c      	cmp	r4, r3
 802e0d2:	bf08      	it	eq
 802e0d4:	68ec      	ldreq	r4, [r5, #12]
 802e0d6:	e7ca      	b.n	802e06e <__swbuf_r+0x1a>
 802e0d8:	4621      	mov	r1, r4
 802e0da:	4628      	mov	r0, r5
 802e0dc:	f000 f81e 	bl	802e11c <__swsetup_r>
 802e0e0:	2800      	cmp	r0, #0
 802e0e2:	d0cb      	beq.n	802e07c <__swbuf_r+0x28>
 802e0e4:	f04f 37ff 	mov.w	r7, #4294967295
 802e0e8:	e7ea      	b.n	802e0c0 <__swbuf_r+0x6c>
 802e0ea:	bf00      	nop
 802e0ec:	08030594 	.word	0x08030594
 802e0f0:	080305b4 	.word	0x080305b4
 802e0f4:	08030574 	.word	0x08030574

0802e0f8 <_write_r>:
 802e0f8:	b538      	push	{r3, r4, r5, lr}
 802e0fa:	4d07      	ldr	r5, [pc, #28]	; (802e118 <_write_r+0x20>)
 802e0fc:	4604      	mov	r4, r0
 802e0fe:	4608      	mov	r0, r1
 802e100:	4611      	mov	r1, r2
 802e102:	2200      	movs	r2, #0
 802e104:	602a      	str	r2, [r5, #0]
 802e106:	461a      	mov	r2, r3
 802e108:	f7f3 fbfd 	bl	8021906 <_write>
 802e10c:	1c43      	adds	r3, r0, #1
 802e10e:	d102      	bne.n	802e116 <_write_r+0x1e>
 802e110:	682b      	ldr	r3, [r5, #0]
 802e112:	b103      	cbz	r3, 802e116 <_write_r+0x1e>
 802e114:	6023      	str	r3, [r4, #0]
 802e116:	bd38      	pop	{r3, r4, r5, pc}
 802e118:	200011a8 	.word	0x200011a8

0802e11c <__swsetup_r>:
 802e11c:	4b32      	ldr	r3, [pc, #200]	; (802e1e8 <__swsetup_r+0xcc>)
 802e11e:	b570      	push	{r4, r5, r6, lr}
 802e120:	681d      	ldr	r5, [r3, #0]
 802e122:	4606      	mov	r6, r0
 802e124:	460c      	mov	r4, r1
 802e126:	b125      	cbz	r5, 802e132 <__swsetup_r+0x16>
 802e128:	69ab      	ldr	r3, [r5, #24]
 802e12a:	b913      	cbnz	r3, 802e132 <__swsetup_r+0x16>
 802e12c:	4628      	mov	r0, r5
 802e12e:	f7ff fa57 	bl	802d5e0 <__sinit>
 802e132:	4b2e      	ldr	r3, [pc, #184]	; (802e1ec <__swsetup_r+0xd0>)
 802e134:	429c      	cmp	r4, r3
 802e136:	d10f      	bne.n	802e158 <__swsetup_r+0x3c>
 802e138:	686c      	ldr	r4, [r5, #4]
 802e13a:	89a3      	ldrh	r3, [r4, #12]
 802e13c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802e140:	0719      	lsls	r1, r3, #28
 802e142:	d42c      	bmi.n	802e19e <__swsetup_r+0x82>
 802e144:	06dd      	lsls	r5, r3, #27
 802e146:	d411      	bmi.n	802e16c <__swsetup_r+0x50>
 802e148:	2309      	movs	r3, #9
 802e14a:	6033      	str	r3, [r6, #0]
 802e14c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802e150:	81a3      	strh	r3, [r4, #12]
 802e152:	f04f 30ff 	mov.w	r0, #4294967295
 802e156:	e03e      	b.n	802e1d6 <__swsetup_r+0xba>
 802e158:	4b25      	ldr	r3, [pc, #148]	; (802e1f0 <__swsetup_r+0xd4>)
 802e15a:	429c      	cmp	r4, r3
 802e15c:	d101      	bne.n	802e162 <__swsetup_r+0x46>
 802e15e:	68ac      	ldr	r4, [r5, #8]
 802e160:	e7eb      	b.n	802e13a <__swsetup_r+0x1e>
 802e162:	4b24      	ldr	r3, [pc, #144]	; (802e1f4 <__swsetup_r+0xd8>)
 802e164:	429c      	cmp	r4, r3
 802e166:	bf08      	it	eq
 802e168:	68ec      	ldreq	r4, [r5, #12]
 802e16a:	e7e6      	b.n	802e13a <__swsetup_r+0x1e>
 802e16c:	0758      	lsls	r0, r3, #29
 802e16e:	d512      	bpl.n	802e196 <__swsetup_r+0x7a>
 802e170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e172:	b141      	cbz	r1, 802e186 <__swsetup_r+0x6a>
 802e174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802e178:	4299      	cmp	r1, r3
 802e17a:	d002      	beq.n	802e182 <__swsetup_r+0x66>
 802e17c:	4630      	mov	r0, r6
 802e17e:	f7ff f8af 	bl	802d2e0 <_free_r>
 802e182:	2300      	movs	r3, #0
 802e184:	6363      	str	r3, [r4, #52]	; 0x34
 802e186:	89a3      	ldrh	r3, [r4, #12]
 802e188:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802e18c:	81a3      	strh	r3, [r4, #12]
 802e18e:	2300      	movs	r3, #0
 802e190:	6063      	str	r3, [r4, #4]
 802e192:	6923      	ldr	r3, [r4, #16]
 802e194:	6023      	str	r3, [r4, #0]
 802e196:	89a3      	ldrh	r3, [r4, #12]
 802e198:	f043 0308 	orr.w	r3, r3, #8
 802e19c:	81a3      	strh	r3, [r4, #12]
 802e19e:	6923      	ldr	r3, [r4, #16]
 802e1a0:	b94b      	cbnz	r3, 802e1b6 <__swsetup_r+0x9a>
 802e1a2:	89a3      	ldrh	r3, [r4, #12]
 802e1a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802e1a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802e1ac:	d003      	beq.n	802e1b6 <__swsetup_r+0x9a>
 802e1ae:	4621      	mov	r1, r4
 802e1b0:	4630      	mov	r0, r6
 802e1b2:	f000 f92b 	bl	802e40c <__smakebuf_r>
 802e1b6:	89a0      	ldrh	r0, [r4, #12]
 802e1b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802e1bc:	f010 0301 	ands.w	r3, r0, #1
 802e1c0:	d00a      	beq.n	802e1d8 <__swsetup_r+0xbc>
 802e1c2:	2300      	movs	r3, #0
 802e1c4:	60a3      	str	r3, [r4, #8]
 802e1c6:	6963      	ldr	r3, [r4, #20]
 802e1c8:	425b      	negs	r3, r3
 802e1ca:	61a3      	str	r3, [r4, #24]
 802e1cc:	6923      	ldr	r3, [r4, #16]
 802e1ce:	b943      	cbnz	r3, 802e1e2 <__swsetup_r+0xc6>
 802e1d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802e1d4:	d1ba      	bne.n	802e14c <__swsetup_r+0x30>
 802e1d6:	bd70      	pop	{r4, r5, r6, pc}
 802e1d8:	0781      	lsls	r1, r0, #30
 802e1da:	bf58      	it	pl
 802e1dc:	6963      	ldrpl	r3, [r4, #20]
 802e1de:	60a3      	str	r3, [r4, #8]
 802e1e0:	e7f4      	b.n	802e1cc <__swsetup_r+0xb0>
 802e1e2:	2000      	movs	r0, #0
 802e1e4:	e7f7      	b.n	802e1d6 <__swsetup_r+0xba>
 802e1e6:	bf00      	nop
 802e1e8:	2000007c 	.word	0x2000007c
 802e1ec:	08030594 	.word	0x08030594
 802e1f0:	080305b4 	.word	0x080305b4
 802e1f4:	08030574 	.word	0x08030574

0802e1f8 <_close_r>:
 802e1f8:	b538      	push	{r3, r4, r5, lr}
 802e1fa:	4d06      	ldr	r5, [pc, #24]	; (802e214 <_close_r+0x1c>)
 802e1fc:	2300      	movs	r3, #0
 802e1fe:	4604      	mov	r4, r0
 802e200:	4608      	mov	r0, r1
 802e202:	602b      	str	r3, [r5, #0]
 802e204:	f7f3 fb9b 	bl	802193e <_close>
 802e208:	1c43      	adds	r3, r0, #1
 802e20a:	d102      	bne.n	802e212 <_close_r+0x1a>
 802e20c:	682b      	ldr	r3, [r5, #0]
 802e20e:	b103      	cbz	r3, 802e212 <_close_r+0x1a>
 802e210:	6023      	str	r3, [r4, #0]
 802e212:	bd38      	pop	{r3, r4, r5, pc}
 802e214:	200011a8 	.word	0x200011a8

0802e218 <__sflush_r>:
 802e218:	898a      	ldrh	r2, [r1, #12]
 802e21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e21e:	4605      	mov	r5, r0
 802e220:	0710      	lsls	r0, r2, #28
 802e222:	460c      	mov	r4, r1
 802e224:	d458      	bmi.n	802e2d8 <__sflush_r+0xc0>
 802e226:	684b      	ldr	r3, [r1, #4]
 802e228:	2b00      	cmp	r3, #0
 802e22a:	dc05      	bgt.n	802e238 <__sflush_r+0x20>
 802e22c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802e22e:	2b00      	cmp	r3, #0
 802e230:	dc02      	bgt.n	802e238 <__sflush_r+0x20>
 802e232:	2000      	movs	r0, #0
 802e234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802e23a:	2e00      	cmp	r6, #0
 802e23c:	d0f9      	beq.n	802e232 <__sflush_r+0x1a>
 802e23e:	2300      	movs	r3, #0
 802e240:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802e244:	682f      	ldr	r7, [r5, #0]
 802e246:	602b      	str	r3, [r5, #0]
 802e248:	d032      	beq.n	802e2b0 <__sflush_r+0x98>
 802e24a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802e24c:	89a3      	ldrh	r3, [r4, #12]
 802e24e:	075a      	lsls	r2, r3, #29
 802e250:	d505      	bpl.n	802e25e <__sflush_r+0x46>
 802e252:	6863      	ldr	r3, [r4, #4]
 802e254:	1ac0      	subs	r0, r0, r3
 802e256:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802e258:	b10b      	cbz	r3, 802e25e <__sflush_r+0x46>
 802e25a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802e25c:	1ac0      	subs	r0, r0, r3
 802e25e:	2300      	movs	r3, #0
 802e260:	4602      	mov	r2, r0
 802e262:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802e264:	6a21      	ldr	r1, [r4, #32]
 802e266:	4628      	mov	r0, r5
 802e268:	47b0      	blx	r6
 802e26a:	1c43      	adds	r3, r0, #1
 802e26c:	89a3      	ldrh	r3, [r4, #12]
 802e26e:	d106      	bne.n	802e27e <__sflush_r+0x66>
 802e270:	6829      	ldr	r1, [r5, #0]
 802e272:	291d      	cmp	r1, #29
 802e274:	d82c      	bhi.n	802e2d0 <__sflush_r+0xb8>
 802e276:	4a2a      	ldr	r2, [pc, #168]	; (802e320 <__sflush_r+0x108>)
 802e278:	40ca      	lsrs	r2, r1
 802e27a:	07d6      	lsls	r6, r2, #31
 802e27c:	d528      	bpl.n	802e2d0 <__sflush_r+0xb8>
 802e27e:	2200      	movs	r2, #0
 802e280:	6062      	str	r2, [r4, #4]
 802e282:	04d9      	lsls	r1, r3, #19
 802e284:	6922      	ldr	r2, [r4, #16]
 802e286:	6022      	str	r2, [r4, #0]
 802e288:	d504      	bpl.n	802e294 <__sflush_r+0x7c>
 802e28a:	1c42      	adds	r2, r0, #1
 802e28c:	d101      	bne.n	802e292 <__sflush_r+0x7a>
 802e28e:	682b      	ldr	r3, [r5, #0]
 802e290:	b903      	cbnz	r3, 802e294 <__sflush_r+0x7c>
 802e292:	6560      	str	r0, [r4, #84]	; 0x54
 802e294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e296:	602f      	str	r7, [r5, #0]
 802e298:	2900      	cmp	r1, #0
 802e29a:	d0ca      	beq.n	802e232 <__sflush_r+0x1a>
 802e29c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802e2a0:	4299      	cmp	r1, r3
 802e2a2:	d002      	beq.n	802e2aa <__sflush_r+0x92>
 802e2a4:	4628      	mov	r0, r5
 802e2a6:	f7ff f81b 	bl	802d2e0 <_free_r>
 802e2aa:	2000      	movs	r0, #0
 802e2ac:	6360      	str	r0, [r4, #52]	; 0x34
 802e2ae:	e7c1      	b.n	802e234 <__sflush_r+0x1c>
 802e2b0:	6a21      	ldr	r1, [r4, #32]
 802e2b2:	2301      	movs	r3, #1
 802e2b4:	4628      	mov	r0, r5
 802e2b6:	47b0      	blx	r6
 802e2b8:	1c41      	adds	r1, r0, #1
 802e2ba:	d1c7      	bne.n	802e24c <__sflush_r+0x34>
 802e2bc:	682b      	ldr	r3, [r5, #0]
 802e2be:	2b00      	cmp	r3, #0
 802e2c0:	d0c4      	beq.n	802e24c <__sflush_r+0x34>
 802e2c2:	2b1d      	cmp	r3, #29
 802e2c4:	d001      	beq.n	802e2ca <__sflush_r+0xb2>
 802e2c6:	2b16      	cmp	r3, #22
 802e2c8:	d101      	bne.n	802e2ce <__sflush_r+0xb6>
 802e2ca:	602f      	str	r7, [r5, #0]
 802e2cc:	e7b1      	b.n	802e232 <__sflush_r+0x1a>
 802e2ce:	89a3      	ldrh	r3, [r4, #12]
 802e2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e2d4:	81a3      	strh	r3, [r4, #12]
 802e2d6:	e7ad      	b.n	802e234 <__sflush_r+0x1c>
 802e2d8:	690f      	ldr	r7, [r1, #16]
 802e2da:	2f00      	cmp	r7, #0
 802e2dc:	d0a9      	beq.n	802e232 <__sflush_r+0x1a>
 802e2de:	0793      	lsls	r3, r2, #30
 802e2e0:	680e      	ldr	r6, [r1, #0]
 802e2e2:	bf08      	it	eq
 802e2e4:	694b      	ldreq	r3, [r1, #20]
 802e2e6:	600f      	str	r7, [r1, #0]
 802e2e8:	bf18      	it	ne
 802e2ea:	2300      	movne	r3, #0
 802e2ec:	eba6 0807 	sub.w	r8, r6, r7
 802e2f0:	608b      	str	r3, [r1, #8]
 802e2f2:	f1b8 0f00 	cmp.w	r8, #0
 802e2f6:	dd9c      	ble.n	802e232 <__sflush_r+0x1a>
 802e2f8:	6a21      	ldr	r1, [r4, #32]
 802e2fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802e2fc:	4643      	mov	r3, r8
 802e2fe:	463a      	mov	r2, r7
 802e300:	4628      	mov	r0, r5
 802e302:	47b0      	blx	r6
 802e304:	2800      	cmp	r0, #0
 802e306:	dc06      	bgt.n	802e316 <__sflush_r+0xfe>
 802e308:	89a3      	ldrh	r3, [r4, #12]
 802e30a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e30e:	81a3      	strh	r3, [r4, #12]
 802e310:	f04f 30ff 	mov.w	r0, #4294967295
 802e314:	e78e      	b.n	802e234 <__sflush_r+0x1c>
 802e316:	4407      	add	r7, r0
 802e318:	eba8 0800 	sub.w	r8, r8, r0
 802e31c:	e7e9      	b.n	802e2f2 <__sflush_r+0xda>
 802e31e:	bf00      	nop
 802e320:	20400001 	.word	0x20400001

0802e324 <_fflush_r>:
 802e324:	b538      	push	{r3, r4, r5, lr}
 802e326:	690b      	ldr	r3, [r1, #16]
 802e328:	4605      	mov	r5, r0
 802e32a:	460c      	mov	r4, r1
 802e32c:	b913      	cbnz	r3, 802e334 <_fflush_r+0x10>
 802e32e:	2500      	movs	r5, #0
 802e330:	4628      	mov	r0, r5
 802e332:	bd38      	pop	{r3, r4, r5, pc}
 802e334:	b118      	cbz	r0, 802e33e <_fflush_r+0x1a>
 802e336:	6983      	ldr	r3, [r0, #24]
 802e338:	b90b      	cbnz	r3, 802e33e <_fflush_r+0x1a>
 802e33a:	f7ff f951 	bl	802d5e0 <__sinit>
 802e33e:	4b14      	ldr	r3, [pc, #80]	; (802e390 <_fflush_r+0x6c>)
 802e340:	429c      	cmp	r4, r3
 802e342:	d11b      	bne.n	802e37c <_fflush_r+0x58>
 802e344:	686c      	ldr	r4, [r5, #4]
 802e346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e34a:	2b00      	cmp	r3, #0
 802e34c:	d0ef      	beq.n	802e32e <_fflush_r+0xa>
 802e34e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802e350:	07d0      	lsls	r0, r2, #31
 802e352:	d404      	bmi.n	802e35e <_fflush_r+0x3a>
 802e354:	0599      	lsls	r1, r3, #22
 802e356:	d402      	bmi.n	802e35e <_fflush_r+0x3a>
 802e358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e35a:	f7ff f9df 	bl	802d71c <__retarget_lock_acquire_recursive>
 802e35e:	4628      	mov	r0, r5
 802e360:	4621      	mov	r1, r4
 802e362:	f7ff ff59 	bl	802e218 <__sflush_r>
 802e366:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e368:	07da      	lsls	r2, r3, #31
 802e36a:	4605      	mov	r5, r0
 802e36c:	d4e0      	bmi.n	802e330 <_fflush_r+0xc>
 802e36e:	89a3      	ldrh	r3, [r4, #12]
 802e370:	059b      	lsls	r3, r3, #22
 802e372:	d4dd      	bmi.n	802e330 <_fflush_r+0xc>
 802e374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e376:	f7ff f9d2 	bl	802d71e <__retarget_lock_release_recursive>
 802e37a:	e7d9      	b.n	802e330 <_fflush_r+0xc>
 802e37c:	4b05      	ldr	r3, [pc, #20]	; (802e394 <_fflush_r+0x70>)
 802e37e:	429c      	cmp	r4, r3
 802e380:	d101      	bne.n	802e386 <_fflush_r+0x62>
 802e382:	68ac      	ldr	r4, [r5, #8]
 802e384:	e7df      	b.n	802e346 <_fflush_r+0x22>
 802e386:	4b04      	ldr	r3, [pc, #16]	; (802e398 <_fflush_r+0x74>)
 802e388:	429c      	cmp	r4, r3
 802e38a:	bf08      	it	eq
 802e38c:	68ec      	ldreq	r4, [r5, #12]
 802e38e:	e7da      	b.n	802e346 <_fflush_r+0x22>
 802e390:	08030594 	.word	0x08030594
 802e394:	080305b4 	.word	0x080305b4
 802e398:	08030574 	.word	0x08030574

0802e39c <_lseek_r>:
 802e39c:	b538      	push	{r3, r4, r5, lr}
 802e39e:	4d07      	ldr	r5, [pc, #28]	; (802e3bc <_lseek_r+0x20>)
 802e3a0:	4604      	mov	r4, r0
 802e3a2:	4608      	mov	r0, r1
 802e3a4:	4611      	mov	r1, r2
 802e3a6:	2200      	movs	r2, #0
 802e3a8:	602a      	str	r2, [r5, #0]
 802e3aa:	461a      	mov	r2, r3
 802e3ac:	f7f3 faee 	bl	802198c <_lseek>
 802e3b0:	1c43      	adds	r3, r0, #1
 802e3b2:	d102      	bne.n	802e3ba <_lseek_r+0x1e>
 802e3b4:	682b      	ldr	r3, [r5, #0]
 802e3b6:	b103      	cbz	r3, 802e3ba <_lseek_r+0x1e>
 802e3b8:	6023      	str	r3, [r4, #0]
 802e3ba:	bd38      	pop	{r3, r4, r5, pc}
 802e3bc:	200011a8 	.word	0x200011a8

0802e3c0 <__swhatbuf_r>:
 802e3c0:	b570      	push	{r4, r5, r6, lr}
 802e3c2:	460e      	mov	r6, r1
 802e3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e3c8:	2900      	cmp	r1, #0
 802e3ca:	b096      	sub	sp, #88	; 0x58
 802e3cc:	4614      	mov	r4, r2
 802e3ce:	461d      	mov	r5, r3
 802e3d0:	da08      	bge.n	802e3e4 <__swhatbuf_r+0x24>
 802e3d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802e3d6:	2200      	movs	r2, #0
 802e3d8:	602a      	str	r2, [r5, #0]
 802e3da:	061a      	lsls	r2, r3, #24
 802e3dc:	d410      	bmi.n	802e400 <__swhatbuf_r+0x40>
 802e3de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802e3e2:	e00e      	b.n	802e402 <__swhatbuf_r+0x42>
 802e3e4:	466a      	mov	r2, sp
 802e3e6:	f000 f8bb 	bl	802e560 <_fstat_r>
 802e3ea:	2800      	cmp	r0, #0
 802e3ec:	dbf1      	blt.n	802e3d2 <__swhatbuf_r+0x12>
 802e3ee:	9a01      	ldr	r2, [sp, #4]
 802e3f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802e3f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802e3f8:	425a      	negs	r2, r3
 802e3fa:	415a      	adcs	r2, r3
 802e3fc:	602a      	str	r2, [r5, #0]
 802e3fe:	e7ee      	b.n	802e3de <__swhatbuf_r+0x1e>
 802e400:	2340      	movs	r3, #64	; 0x40
 802e402:	2000      	movs	r0, #0
 802e404:	6023      	str	r3, [r4, #0]
 802e406:	b016      	add	sp, #88	; 0x58
 802e408:	bd70      	pop	{r4, r5, r6, pc}
	...

0802e40c <__smakebuf_r>:
 802e40c:	898b      	ldrh	r3, [r1, #12]
 802e40e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802e410:	079d      	lsls	r5, r3, #30
 802e412:	4606      	mov	r6, r0
 802e414:	460c      	mov	r4, r1
 802e416:	d507      	bpl.n	802e428 <__smakebuf_r+0x1c>
 802e418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802e41c:	6023      	str	r3, [r4, #0]
 802e41e:	6123      	str	r3, [r4, #16]
 802e420:	2301      	movs	r3, #1
 802e422:	6163      	str	r3, [r4, #20]
 802e424:	b002      	add	sp, #8
 802e426:	bd70      	pop	{r4, r5, r6, pc}
 802e428:	ab01      	add	r3, sp, #4
 802e42a:	466a      	mov	r2, sp
 802e42c:	f7ff ffc8 	bl	802e3c0 <__swhatbuf_r>
 802e430:	9900      	ldr	r1, [sp, #0]
 802e432:	4605      	mov	r5, r0
 802e434:	4630      	mov	r0, r6
 802e436:	f7fe ffbf 	bl	802d3b8 <_malloc_r>
 802e43a:	b948      	cbnz	r0, 802e450 <__smakebuf_r+0x44>
 802e43c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e440:	059a      	lsls	r2, r3, #22
 802e442:	d4ef      	bmi.n	802e424 <__smakebuf_r+0x18>
 802e444:	f023 0303 	bic.w	r3, r3, #3
 802e448:	f043 0302 	orr.w	r3, r3, #2
 802e44c:	81a3      	strh	r3, [r4, #12]
 802e44e:	e7e3      	b.n	802e418 <__smakebuf_r+0xc>
 802e450:	4b0d      	ldr	r3, [pc, #52]	; (802e488 <__smakebuf_r+0x7c>)
 802e452:	62b3      	str	r3, [r6, #40]	; 0x28
 802e454:	89a3      	ldrh	r3, [r4, #12]
 802e456:	6020      	str	r0, [r4, #0]
 802e458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e45c:	81a3      	strh	r3, [r4, #12]
 802e45e:	9b00      	ldr	r3, [sp, #0]
 802e460:	6163      	str	r3, [r4, #20]
 802e462:	9b01      	ldr	r3, [sp, #4]
 802e464:	6120      	str	r0, [r4, #16]
 802e466:	b15b      	cbz	r3, 802e480 <__smakebuf_r+0x74>
 802e468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e46c:	4630      	mov	r0, r6
 802e46e:	f000 f889 	bl	802e584 <_isatty_r>
 802e472:	b128      	cbz	r0, 802e480 <__smakebuf_r+0x74>
 802e474:	89a3      	ldrh	r3, [r4, #12]
 802e476:	f023 0303 	bic.w	r3, r3, #3
 802e47a:	f043 0301 	orr.w	r3, r3, #1
 802e47e:	81a3      	strh	r3, [r4, #12]
 802e480:	89a0      	ldrh	r0, [r4, #12]
 802e482:	4305      	orrs	r5, r0
 802e484:	81a5      	strh	r5, [r4, #12]
 802e486:	e7cd      	b.n	802e424 <__smakebuf_r+0x18>
 802e488:	0802d579 	.word	0x0802d579

0802e48c <memcpy>:
 802e48c:	440a      	add	r2, r1
 802e48e:	4291      	cmp	r1, r2
 802e490:	f100 33ff 	add.w	r3, r0, #4294967295
 802e494:	d100      	bne.n	802e498 <memcpy+0xc>
 802e496:	4770      	bx	lr
 802e498:	b510      	push	{r4, lr}
 802e49a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e49e:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e4a2:	4291      	cmp	r1, r2
 802e4a4:	d1f9      	bne.n	802e49a <memcpy+0xe>
 802e4a6:	bd10      	pop	{r4, pc}

0802e4a8 <memmove>:
 802e4a8:	4288      	cmp	r0, r1
 802e4aa:	b510      	push	{r4, lr}
 802e4ac:	eb01 0402 	add.w	r4, r1, r2
 802e4b0:	d902      	bls.n	802e4b8 <memmove+0x10>
 802e4b2:	4284      	cmp	r4, r0
 802e4b4:	4623      	mov	r3, r4
 802e4b6:	d807      	bhi.n	802e4c8 <memmove+0x20>
 802e4b8:	1e43      	subs	r3, r0, #1
 802e4ba:	42a1      	cmp	r1, r4
 802e4bc:	d008      	beq.n	802e4d0 <memmove+0x28>
 802e4be:	f811 2b01 	ldrb.w	r2, [r1], #1
 802e4c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 802e4c6:	e7f8      	b.n	802e4ba <memmove+0x12>
 802e4c8:	4402      	add	r2, r0
 802e4ca:	4601      	mov	r1, r0
 802e4cc:	428a      	cmp	r2, r1
 802e4ce:	d100      	bne.n	802e4d2 <memmove+0x2a>
 802e4d0:	bd10      	pop	{r4, pc}
 802e4d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802e4d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802e4da:	e7f7      	b.n	802e4cc <memmove+0x24>

0802e4dc <_realloc_r>:
 802e4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e4e0:	4680      	mov	r8, r0
 802e4e2:	4614      	mov	r4, r2
 802e4e4:	460e      	mov	r6, r1
 802e4e6:	b921      	cbnz	r1, 802e4f2 <_realloc_r+0x16>
 802e4e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802e4ec:	4611      	mov	r1, r2
 802e4ee:	f7fe bf63 	b.w	802d3b8 <_malloc_r>
 802e4f2:	b92a      	cbnz	r2, 802e500 <_realloc_r+0x24>
 802e4f4:	f7fe fef4 	bl	802d2e0 <_free_r>
 802e4f8:	4625      	mov	r5, r4
 802e4fa:	4628      	mov	r0, r5
 802e4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e500:	f000 f850 	bl	802e5a4 <_malloc_usable_size_r>
 802e504:	4284      	cmp	r4, r0
 802e506:	4607      	mov	r7, r0
 802e508:	d802      	bhi.n	802e510 <_realloc_r+0x34>
 802e50a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802e50e:	d812      	bhi.n	802e536 <_realloc_r+0x5a>
 802e510:	4621      	mov	r1, r4
 802e512:	4640      	mov	r0, r8
 802e514:	f7fe ff50 	bl	802d3b8 <_malloc_r>
 802e518:	4605      	mov	r5, r0
 802e51a:	2800      	cmp	r0, #0
 802e51c:	d0ed      	beq.n	802e4fa <_realloc_r+0x1e>
 802e51e:	42bc      	cmp	r4, r7
 802e520:	4622      	mov	r2, r4
 802e522:	4631      	mov	r1, r6
 802e524:	bf28      	it	cs
 802e526:	463a      	movcs	r2, r7
 802e528:	f7ff ffb0 	bl	802e48c <memcpy>
 802e52c:	4631      	mov	r1, r6
 802e52e:	4640      	mov	r0, r8
 802e530:	f7fe fed6 	bl	802d2e0 <_free_r>
 802e534:	e7e1      	b.n	802e4fa <_realloc_r+0x1e>
 802e536:	4635      	mov	r5, r6
 802e538:	e7df      	b.n	802e4fa <_realloc_r+0x1e>
	...

0802e53c <_read_r>:
 802e53c:	b538      	push	{r3, r4, r5, lr}
 802e53e:	4d07      	ldr	r5, [pc, #28]	; (802e55c <_read_r+0x20>)
 802e540:	4604      	mov	r4, r0
 802e542:	4608      	mov	r0, r1
 802e544:	4611      	mov	r1, r2
 802e546:	2200      	movs	r2, #0
 802e548:	602a      	str	r2, [r5, #0]
 802e54a:	461a      	mov	r2, r3
 802e54c:	f7f3 f9be 	bl	80218cc <_read>
 802e550:	1c43      	adds	r3, r0, #1
 802e552:	d102      	bne.n	802e55a <_read_r+0x1e>
 802e554:	682b      	ldr	r3, [r5, #0]
 802e556:	b103      	cbz	r3, 802e55a <_read_r+0x1e>
 802e558:	6023      	str	r3, [r4, #0]
 802e55a:	bd38      	pop	{r3, r4, r5, pc}
 802e55c:	200011a8 	.word	0x200011a8

0802e560 <_fstat_r>:
 802e560:	b538      	push	{r3, r4, r5, lr}
 802e562:	4d07      	ldr	r5, [pc, #28]	; (802e580 <_fstat_r+0x20>)
 802e564:	2300      	movs	r3, #0
 802e566:	4604      	mov	r4, r0
 802e568:	4608      	mov	r0, r1
 802e56a:	4611      	mov	r1, r2
 802e56c:	602b      	str	r3, [r5, #0]
 802e56e:	f7f3 f9f2 	bl	8021956 <_fstat>
 802e572:	1c43      	adds	r3, r0, #1
 802e574:	d102      	bne.n	802e57c <_fstat_r+0x1c>
 802e576:	682b      	ldr	r3, [r5, #0]
 802e578:	b103      	cbz	r3, 802e57c <_fstat_r+0x1c>
 802e57a:	6023      	str	r3, [r4, #0]
 802e57c:	bd38      	pop	{r3, r4, r5, pc}
 802e57e:	bf00      	nop
 802e580:	200011a8 	.word	0x200011a8

0802e584 <_isatty_r>:
 802e584:	b538      	push	{r3, r4, r5, lr}
 802e586:	4d06      	ldr	r5, [pc, #24]	; (802e5a0 <_isatty_r+0x1c>)
 802e588:	2300      	movs	r3, #0
 802e58a:	4604      	mov	r4, r0
 802e58c:	4608      	mov	r0, r1
 802e58e:	602b      	str	r3, [r5, #0]
 802e590:	f7f3 f9f1 	bl	8021976 <_isatty>
 802e594:	1c43      	adds	r3, r0, #1
 802e596:	d102      	bne.n	802e59e <_isatty_r+0x1a>
 802e598:	682b      	ldr	r3, [r5, #0]
 802e59a:	b103      	cbz	r3, 802e59e <_isatty_r+0x1a>
 802e59c:	6023      	str	r3, [r4, #0]
 802e59e:	bd38      	pop	{r3, r4, r5, pc}
 802e5a0:	200011a8 	.word	0x200011a8

0802e5a4 <_malloc_usable_size_r>:
 802e5a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e5a8:	1f18      	subs	r0, r3, #4
 802e5aa:	2b00      	cmp	r3, #0
 802e5ac:	bfbc      	itt	lt
 802e5ae:	580b      	ldrlt	r3, [r1, r0]
 802e5b0:	18c0      	addlt	r0, r0, r3
 802e5b2:	4770      	bx	lr

0802e5b4 <_init>:
 802e5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e5b6:	bf00      	nop
 802e5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802e5ba:	bc08      	pop	{r3}
 802e5bc:	469e      	mov	lr, r3
 802e5be:	4770      	bx	lr

0802e5c0 <_fini>:
 802e5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e5c2:	bf00      	nop
 802e5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802e5c6:	bc08      	pop	{r3}
 802e5c8:	469e      	mov	lr, r3
 802e5ca:	4770      	bx	lr
