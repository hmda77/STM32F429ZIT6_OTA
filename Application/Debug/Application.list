
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca60  080401b0  080401b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fc4  0804cc10  0804cc10  0001cc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804ebd4  0804ebd4  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  0804ebd4  0804ebd4  0001ebd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804ebdc  0804ebdc  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804ebdc  0804ebdc  0001ebdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804ebe0  0804ebe0  0001ebe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0804ebe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e0  2**0
                  CONTENTS
 10 .bss          00000c74  200000e0  200000e0  000200e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d54  20000d54  000200e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029af3  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054d1  00000000  00000000  00049c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020a8  00000000  00000000  0004f0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e98  00000000  00000000  00051180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b26a  00000000  00000000  00053018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000297fd  00000000  00000000  0007e282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eeec6  00000000  00000000  000a7a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00196945  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008efc  00000000  00000000  00196998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401b0 <__do_global_dtors_aux>:
 80401b0:	b510      	push	{r4, lr}
 80401b2:	4c05      	ldr	r4, [pc, #20]	; (80401c8 <__do_global_dtors_aux+0x18>)
 80401b4:	7823      	ldrb	r3, [r4, #0]
 80401b6:	b933      	cbnz	r3, 80401c6 <__do_global_dtors_aux+0x16>
 80401b8:	4b04      	ldr	r3, [pc, #16]	; (80401cc <__do_global_dtors_aux+0x1c>)
 80401ba:	b113      	cbz	r3, 80401c2 <__do_global_dtors_aux+0x12>
 80401bc:	4804      	ldr	r0, [pc, #16]	; (80401d0 <__do_global_dtors_aux+0x20>)
 80401be:	f3af 8000 	nop.w
 80401c2:	2301      	movs	r3, #1
 80401c4:	7023      	strb	r3, [r4, #0]
 80401c6:	bd10      	pop	{r4, pc}
 80401c8:	200000e0 	.word	0x200000e0
 80401cc:	00000000 	.word	0x00000000
 80401d0:	0804cbf8 	.word	0x0804cbf8

080401d4 <frame_dummy>:
 80401d4:	b508      	push	{r3, lr}
 80401d6:	4b03      	ldr	r3, [pc, #12]	; (80401e4 <frame_dummy+0x10>)
 80401d8:	b11b      	cbz	r3, 80401e2 <frame_dummy+0xe>
 80401da:	4903      	ldr	r1, [pc, #12]	; (80401e8 <frame_dummy+0x14>)
 80401dc:	4803      	ldr	r0, [pc, #12]	; (80401ec <frame_dummy+0x18>)
 80401de:	f3af 8000 	nop.w
 80401e2:	bd08      	pop	{r3, pc}
 80401e4:	00000000 	.word	0x00000000
 80401e8:	200000e4 	.word	0x200000e4
 80401ec:	0804cbf8 	.word	0x0804cbf8

080401f0 <memchr>:
 80401f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80401f4:	2a10      	cmp	r2, #16
 80401f6:	db2b      	blt.n	8040250 <memchr+0x60>
 80401f8:	f010 0f07 	tst.w	r0, #7
 80401fc:	d008      	beq.n	8040210 <memchr+0x20>
 80401fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040202:	3a01      	subs	r2, #1
 8040204:	428b      	cmp	r3, r1
 8040206:	d02d      	beq.n	8040264 <memchr+0x74>
 8040208:	f010 0f07 	tst.w	r0, #7
 804020c:	b342      	cbz	r2, 8040260 <memchr+0x70>
 804020e:	d1f6      	bne.n	80401fe <memchr+0xe>
 8040210:	b4f0      	push	{r4, r5, r6, r7}
 8040212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804021a:	f022 0407 	bic.w	r4, r2, #7
 804021e:	f07f 0700 	mvns.w	r7, #0
 8040222:	2300      	movs	r3, #0
 8040224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040228:	3c08      	subs	r4, #8
 804022a:	ea85 0501 	eor.w	r5, r5, r1
 804022e:	ea86 0601 	eor.w	r6, r6, r1
 8040232:	fa85 f547 	uadd8	r5, r5, r7
 8040236:	faa3 f587 	sel	r5, r3, r7
 804023a:	fa86 f647 	uadd8	r6, r6, r7
 804023e:	faa5 f687 	sel	r6, r5, r7
 8040242:	b98e      	cbnz	r6, 8040268 <memchr+0x78>
 8040244:	d1ee      	bne.n	8040224 <memchr+0x34>
 8040246:	bcf0      	pop	{r4, r5, r6, r7}
 8040248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804024c:	f002 0207 	and.w	r2, r2, #7
 8040250:	b132      	cbz	r2, 8040260 <memchr+0x70>
 8040252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040256:	3a01      	subs	r2, #1
 8040258:	ea83 0301 	eor.w	r3, r3, r1
 804025c:	b113      	cbz	r3, 8040264 <memchr+0x74>
 804025e:	d1f8      	bne.n	8040252 <memchr+0x62>
 8040260:	2000      	movs	r0, #0
 8040262:	4770      	bx	lr
 8040264:	3801      	subs	r0, #1
 8040266:	4770      	bx	lr
 8040268:	2d00      	cmp	r5, #0
 804026a:	bf06      	itte	eq
 804026c:	4635      	moveq	r5, r6
 804026e:	3803      	subeq	r0, #3
 8040270:	3807      	subne	r0, #7
 8040272:	f015 0f01 	tst.w	r5, #1
 8040276:	d107      	bne.n	8040288 <memchr+0x98>
 8040278:	3001      	adds	r0, #1
 804027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804027e:	bf02      	ittt	eq
 8040280:	3001      	addeq	r0, #1
 8040282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040286:	3001      	addeq	r0, #1
 8040288:	bcf0      	pop	{r4, r5, r6, r7}
 804028a:	3801      	subs	r0, #1
 804028c:	4770      	bx	lr
 804028e:	bf00      	nop

08040290 <__aeabi_uldivmod>:
 8040290:	b953      	cbnz	r3, 80402a8 <__aeabi_uldivmod+0x18>
 8040292:	b94a      	cbnz	r2, 80402a8 <__aeabi_uldivmod+0x18>
 8040294:	2900      	cmp	r1, #0
 8040296:	bf08      	it	eq
 8040298:	2800      	cmpeq	r0, #0
 804029a:	bf1c      	itt	ne
 804029c:	f04f 31ff 	movne.w	r1, #4294967295
 80402a0:	f04f 30ff 	movne.w	r0, #4294967295
 80402a4:	f000 b974 	b.w	8040590 <__aeabi_idiv0>
 80402a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80402ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80402b0:	f000 f806 	bl	80402c0 <__udivmoddi4>
 80402b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80402b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80402bc:	b004      	add	sp, #16
 80402be:	4770      	bx	lr

080402c0 <__udivmoddi4>:
 80402c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80402c4:	9d08      	ldr	r5, [sp, #32]
 80402c6:	4604      	mov	r4, r0
 80402c8:	468e      	mov	lr, r1
 80402ca:	2b00      	cmp	r3, #0
 80402cc:	d14d      	bne.n	804036a <__udivmoddi4+0xaa>
 80402ce:	428a      	cmp	r2, r1
 80402d0:	4694      	mov	ip, r2
 80402d2:	d969      	bls.n	80403a8 <__udivmoddi4+0xe8>
 80402d4:	fab2 f282 	clz	r2, r2
 80402d8:	b152      	cbz	r2, 80402f0 <__udivmoddi4+0x30>
 80402da:	fa01 f302 	lsl.w	r3, r1, r2
 80402de:	f1c2 0120 	rsb	r1, r2, #32
 80402e2:	fa20 f101 	lsr.w	r1, r0, r1
 80402e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80402ea:	ea41 0e03 	orr.w	lr, r1, r3
 80402ee:	4094      	lsls	r4, r2
 80402f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80402f4:	0c21      	lsrs	r1, r4, #16
 80402f6:	fbbe f6f8 	udiv	r6, lr, r8
 80402fa:	fa1f f78c 	uxth.w	r7, ip
 80402fe:	fb08 e316 	mls	r3, r8, r6, lr
 8040302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040306:	fb06 f107 	mul.w	r1, r6, r7
 804030a:	4299      	cmp	r1, r3
 804030c:	d90a      	bls.n	8040324 <__udivmoddi4+0x64>
 804030e:	eb1c 0303 	adds.w	r3, ip, r3
 8040312:	f106 30ff 	add.w	r0, r6, #4294967295
 8040316:	f080 811f 	bcs.w	8040558 <__udivmoddi4+0x298>
 804031a:	4299      	cmp	r1, r3
 804031c:	f240 811c 	bls.w	8040558 <__udivmoddi4+0x298>
 8040320:	3e02      	subs	r6, #2
 8040322:	4463      	add	r3, ip
 8040324:	1a5b      	subs	r3, r3, r1
 8040326:	b2a4      	uxth	r4, r4
 8040328:	fbb3 f0f8 	udiv	r0, r3, r8
 804032c:	fb08 3310 	mls	r3, r8, r0, r3
 8040330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040334:	fb00 f707 	mul.w	r7, r0, r7
 8040338:	42a7      	cmp	r7, r4
 804033a:	d90a      	bls.n	8040352 <__udivmoddi4+0x92>
 804033c:	eb1c 0404 	adds.w	r4, ip, r4
 8040340:	f100 33ff 	add.w	r3, r0, #4294967295
 8040344:	f080 810a 	bcs.w	804055c <__udivmoddi4+0x29c>
 8040348:	42a7      	cmp	r7, r4
 804034a:	f240 8107 	bls.w	804055c <__udivmoddi4+0x29c>
 804034e:	4464      	add	r4, ip
 8040350:	3802      	subs	r0, #2
 8040352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040356:	1be4      	subs	r4, r4, r7
 8040358:	2600      	movs	r6, #0
 804035a:	b11d      	cbz	r5, 8040364 <__udivmoddi4+0xa4>
 804035c:	40d4      	lsrs	r4, r2
 804035e:	2300      	movs	r3, #0
 8040360:	e9c5 4300 	strd	r4, r3, [r5]
 8040364:	4631      	mov	r1, r6
 8040366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804036a:	428b      	cmp	r3, r1
 804036c:	d909      	bls.n	8040382 <__udivmoddi4+0xc2>
 804036e:	2d00      	cmp	r5, #0
 8040370:	f000 80ef 	beq.w	8040552 <__udivmoddi4+0x292>
 8040374:	2600      	movs	r6, #0
 8040376:	e9c5 0100 	strd	r0, r1, [r5]
 804037a:	4630      	mov	r0, r6
 804037c:	4631      	mov	r1, r6
 804037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040382:	fab3 f683 	clz	r6, r3
 8040386:	2e00      	cmp	r6, #0
 8040388:	d14a      	bne.n	8040420 <__udivmoddi4+0x160>
 804038a:	428b      	cmp	r3, r1
 804038c:	d302      	bcc.n	8040394 <__udivmoddi4+0xd4>
 804038e:	4282      	cmp	r2, r0
 8040390:	f200 80f9 	bhi.w	8040586 <__udivmoddi4+0x2c6>
 8040394:	1a84      	subs	r4, r0, r2
 8040396:	eb61 0303 	sbc.w	r3, r1, r3
 804039a:	2001      	movs	r0, #1
 804039c:	469e      	mov	lr, r3
 804039e:	2d00      	cmp	r5, #0
 80403a0:	d0e0      	beq.n	8040364 <__udivmoddi4+0xa4>
 80403a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80403a6:	e7dd      	b.n	8040364 <__udivmoddi4+0xa4>
 80403a8:	b902      	cbnz	r2, 80403ac <__udivmoddi4+0xec>
 80403aa:	deff      	udf	#255	; 0xff
 80403ac:	fab2 f282 	clz	r2, r2
 80403b0:	2a00      	cmp	r2, #0
 80403b2:	f040 8092 	bne.w	80404da <__udivmoddi4+0x21a>
 80403b6:	eba1 010c 	sub.w	r1, r1, ip
 80403ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80403be:	fa1f fe8c 	uxth.w	lr, ip
 80403c2:	2601      	movs	r6, #1
 80403c4:	0c20      	lsrs	r0, r4, #16
 80403c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80403ca:	fb07 1113 	mls	r1, r7, r3, r1
 80403ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80403d2:	fb0e f003 	mul.w	r0, lr, r3
 80403d6:	4288      	cmp	r0, r1
 80403d8:	d908      	bls.n	80403ec <__udivmoddi4+0x12c>
 80403da:	eb1c 0101 	adds.w	r1, ip, r1
 80403de:	f103 38ff 	add.w	r8, r3, #4294967295
 80403e2:	d202      	bcs.n	80403ea <__udivmoddi4+0x12a>
 80403e4:	4288      	cmp	r0, r1
 80403e6:	f200 80cb 	bhi.w	8040580 <__udivmoddi4+0x2c0>
 80403ea:	4643      	mov	r3, r8
 80403ec:	1a09      	subs	r1, r1, r0
 80403ee:	b2a4      	uxth	r4, r4
 80403f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80403f4:	fb07 1110 	mls	r1, r7, r0, r1
 80403f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80403fc:	fb0e fe00 	mul.w	lr, lr, r0
 8040400:	45a6      	cmp	lr, r4
 8040402:	d908      	bls.n	8040416 <__udivmoddi4+0x156>
 8040404:	eb1c 0404 	adds.w	r4, ip, r4
 8040408:	f100 31ff 	add.w	r1, r0, #4294967295
 804040c:	d202      	bcs.n	8040414 <__udivmoddi4+0x154>
 804040e:	45a6      	cmp	lr, r4
 8040410:	f200 80bb 	bhi.w	804058a <__udivmoddi4+0x2ca>
 8040414:	4608      	mov	r0, r1
 8040416:	eba4 040e 	sub.w	r4, r4, lr
 804041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804041e:	e79c      	b.n	804035a <__udivmoddi4+0x9a>
 8040420:	f1c6 0720 	rsb	r7, r6, #32
 8040424:	40b3      	lsls	r3, r6
 8040426:	fa22 fc07 	lsr.w	ip, r2, r7
 804042a:	ea4c 0c03 	orr.w	ip, ip, r3
 804042e:	fa20 f407 	lsr.w	r4, r0, r7
 8040432:	fa01 f306 	lsl.w	r3, r1, r6
 8040436:	431c      	orrs	r4, r3
 8040438:	40f9      	lsrs	r1, r7
 804043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804043e:	fa00 f306 	lsl.w	r3, r0, r6
 8040442:	fbb1 f8f9 	udiv	r8, r1, r9
 8040446:	0c20      	lsrs	r0, r4, #16
 8040448:	fa1f fe8c 	uxth.w	lr, ip
 804044c:	fb09 1118 	mls	r1, r9, r8, r1
 8040450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040454:	fb08 f00e 	mul.w	r0, r8, lr
 8040458:	4288      	cmp	r0, r1
 804045a:	fa02 f206 	lsl.w	r2, r2, r6
 804045e:	d90b      	bls.n	8040478 <__udivmoddi4+0x1b8>
 8040460:	eb1c 0101 	adds.w	r1, ip, r1
 8040464:	f108 3aff 	add.w	sl, r8, #4294967295
 8040468:	f080 8088 	bcs.w	804057c <__udivmoddi4+0x2bc>
 804046c:	4288      	cmp	r0, r1
 804046e:	f240 8085 	bls.w	804057c <__udivmoddi4+0x2bc>
 8040472:	f1a8 0802 	sub.w	r8, r8, #2
 8040476:	4461      	add	r1, ip
 8040478:	1a09      	subs	r1, r1, r0
 804047a:	b2a4      	uxth	r4, r4
 804047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8040480:	fb09 1110 	mls	r1, r9, r0, r1
 8040484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040488:	fb00 fe0e 	mul.w	lr, r0, lr
 804048c:	458e      	cmp	lr, r1
 804048e:	d908      	bls.n	80404a2 <__udivmoddi4+0x1e2>
 8040490:	eb1c 0101 	adds.w	r1, ip, r1
 8040494:	f100 34ff 	add.w	r4, r0, #4294967295
 8040498:	d26c      	bcs.n	8040574 <__udivmoddi4+0x2b4>
 804049a:	458e      	cmp	lr, r1
 804049c:	d96a      	bls.n	8040574 <__udivmoddi4+0x2b4>
 804049e:	3802      	subs	r0, #2
 80404a0:	4461      	add	r1, ip
 80404a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80404a6:	fba0 9402 	umull	r9, r4, r0, r2
 80404aa:	eba1 010e 	sub.w	r1, r1, lr
 80404ae:	42a1      	cmp	r1, r4
 80404b0:	46c8      	mov	r8, r9
 80404b2:	46a6      	mov	lr, r4
 80404b4:	d356      	bcc.n	8040564 <__udivmoddi4+0x2a4>
 80404b6:	d053      	beq.n	8040560 <__udivmoddi4+0x2a0>
 80404b8:	b15d      	cbz	r5, 80404d2 <__udivmoddi4+0x212>
 80404ba:	ebb3 0208 	subs.w	r2, r3, r8
 80404be:	eb61 010e 	sbc.w	r1, r1, lr
 80404c2:	fa01 f707 	lsl.w	r7, r1, r7
 80404c6:	fa22 f306 	lsr.w	r3, r2, r6
 80404ca:	40f1      	lsrs	r1, r6
 80404cc:	431f      	orrs	r7, r3
 80404ce:	e9c5 7100 	strd	r7, r1, [r5]
 80404d2:	2600      	movs	r6, #0
 80404d4:	4631      	mov	r1, r6
 80404d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80404da:	f1c2 0320 	rsb	r3, r2, #32
 80404de:	40d8      	lsrs	r0, r3
 80404e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80404e4:	fa21 f303 	lsr.w	r3, r1, r3
 80404e8:	4091      	lsls	r1, r2
 80404ea:	4301      	orrs	r1, r0
 80404ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80404f0:	fa1f fe8c 	uxth.w	lr, ip
 80404f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80404f8:	fb07 3610 	mls	r6, r7, r0, r3
 80404fc:	0c0b      	lsrs	r3, r1, #16
 80404fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040502:	fb00 f60e 	mul.w	r6, r0, lr
 8040506:	429e      	cmp	r6, r3
 8040508:	fa04 f402 	lsl.w	r4, r4, r2
 804050c:	d908      	bls.n	8040520 <__udivmoddi4+0x260>
 804050e:	eb1c 0303 	adds.w	r3, ip, r3
 8040512:	f100 38ff 	add.w	r8, r0, #4294967295
 8040516:	d22f      	bcs.n	8040578 <__udivmoddi4+0x2b8>
 8040518:	429e      	cmp	r6, r3
 804051a:	d92d      	bls.n	8040578 <__udivmoddi4+0x2b8>
 804051c:	3802      	subs	r0, #2
 804051e:	4463      	add	r3, ip
 8040520:	1b9b      	subs	r3, r3, r6
 8040522:	b289      	uxth	r1, r1
 8040524:	fbb3 f6f7 	udiv	r6, r3, r7
 8040528:	fb07 3316 	mls	r3, r7, r6, r3
 804052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040530:	fb06 f30e 	mul.w	r3, r6, lr
 8040534:	428b      	cmp	r3, r1
 8040536:	d908      	bls.n	804054a <__udivmoddi4+0x28a>
 8040538:	eb1c 0101 	adds.w	r1, ip, r1
 804053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8040540:	d216      	bcs.n	8040570 <__udivmoddi4+0x2b0>
 8040542:	428b      	cmp	r3, r1
 8040544:	d914      	bls.n	8040570 <__udivmoddi4+0x2b0>
 8040546:	3e02      	subs	r6, #2
 8040548:	4461      	add	r1, ip
 804054a:	1ac9      	subs	r1, r1, r3
 804054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040550:	e738      	b.n	80403c4 <__udivmoddi4+0x104>
 8040552:	462e      	mov	r6, r5
 8040554:	4628      	mov	r0, r5
 8040556:	e705      	b.n	8040364 <__udivmoddi4+0xa4>
 8040558:	4606      	mov	r6, r0
 804055a:	e6e3      	b.n	8040324 <__udivmoddi4+0x64>
 804055c:	4618      	mov	r0, r3
 804055e:	e6f8      	b.n	8040352 <__udivmoddi4+0x92>
 8040560:	454b      	cmp	r3, r9
 8040562:	d2a9      	bcs.n	80404b8 <__udivmoddi4+0x1f8>
 8040564:	ebb9 0802 	subs.w	r8, r9, r2
 8040568:	eb64 0e0c 	sbc.w	lr, r4, ip
 804056c:	3801      	subs	r0, #1
 804056e:	e7a3      	b.n	80404b8 <__udivmoddi4+0x1f8>
 8040570:	4646      	mov	r6, r8
 8040572:	e7ea      	b.n	804054a <__udivmoddi4+0x28a>
 8040574:	4620      	mov	r0, r4
 8040576:	e794      	b.n	80404a2 <__udivmoddi4+0x1e2>
 8040578:	4640      	mov	r0, r8
 804057a:	e7d1      	b.n	8040520 <__udivmoddi4+0x260>
 804057c:	46d0      	mov	r8, sl
 804057e:	e77b      	b.n	8040478 <__udivmoddi4+0x1b8>
 8040580:	3b02      	subs	r3, #2
 8040582:	4461      	add	r1, ip
 8040584:	e732      	b.n	80403ec <__udivmoddi4+0x12c>
 8040586:	4630      	mov	r0, r6
 8040588:	e709      	b.n	804039e <__udivmoddi4+0xde>
 804058a:	4464      	add	r4, ip
 804058c:	3802      	subs	r0, #2
 804058e:	e742      	b.n	8040416 <__udivmoddi4+0x156>

08040590 <__aeabi_idiv0>:
 8040590:	4770      	bx	lr
 8040592:	bf00      	nop

08040594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040594:	b580      	push	{r7, lr}
 8040596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040598:	f002 fada 	bl	8042b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 804059c:	f000 f8a0 	bl	80406e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80405a0:	f000 fb10 	bl	8040bc4 <MX_GPIO_Init>
  MX_CRC_Init();
 80405a4:	f000 f908 	bl	80407b8 <MX_CRC_Init>
  MX_DMA2D_Init();
 80405a8:	f000 f91a 	bl	80407e0 <MX_DMA2D_Init>
  MX_FMC_Init();
 80405ac:	f000 faba 	bl	8040b24 <MX_FMC_Init>
  MX_I2C3_Init();
 80405b0:	f000 f948 	bl	8040844 <MX_I2C3_Init>
  MX_LTDC_Init();
 80405b4:	f000 f986 	bl	80408c4 <MX_LTDC_Init>
  MX_SPI5_Init();
 80405b8:	f000 fa04 	bl	80409c4 <MX_SPI5_Init>
  MX_TIM1_Init();
 80405bc:	f000 fa38 	bl	8040a30 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80405c0:	f000 fa86 	bl	8040ad0 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80405c4:	f00b fb5a 	bl	804bc7c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */


  sprintf(buffch,"Starting Application (%d.%d)", BL_Version[0], BL_Version[1]);
 80405c8:	2300      	movs	r3, #0
 80405ca:	461a      	mov	r2, r3
 80405cc:	2301      	movs	r3, #1
 80405ce:	493b      	ldr	r1, [pc, #236]	; (80406bc <main+0x128>)
 80405d0:	483b      	ldr	r0, [pc, #236]	; (80406c0 <main+0x12c>)
 80405d2:	f00b ff93 	bl	804c4fc <siprintf>

  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 80405d6:	f001 fc35 	bl	8041e44 <BSP_LCD_Init>

  /* Layer2 Init */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80405da:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80405de:	2001      	movs	r0, #1
 80405e0:	f001 fcb2 	bl	8041f48 <BSP_LCD_LayerDefaultInit>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80405e4:	2001      	movs	r0, #1
 80405e6:	f001 fd13 	bl	8042010 <BSP_LCD_SelectLayer>
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80405ea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80405ee:	f001 fdbd 	bl	804216c <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_BLACK);
 80405f2:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 80405f6:	2001      	movs	r0, #1
 80405f8:	f001 fd58 	bl	80420ac <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 80405fc:	2100      	movs	r1, #0
 80405fe:	2001      	movs	r0, #1
 8040600:	f001 fd16 	bl	8042030 <BSP_LCD_SetLayerVisible>

  /* Layer1 Init */
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8040604:	492f      	ldr	r1, [pc, #188]	; (80406c4 <main+0x130>)
 8040606:	2000      	movs	r0, #0
 8040608:	f001 fc9e 	bl	8041f48 <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 804060c:	2000      	movs	r0, #0
 804060e:	f001 fcff 	bl	8042010 <BSP_LCD_SelectLayer>

  /* Enable The LCD */
  BSP_LCD_DisplayOn();
 8040612:	f001 fed5 	bl	80423c0 <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8040616:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 804061a:	f001 fda7 	bl	804216c <BSP_LCD_Clear>


  /* Set Touchscreen Demo description */

  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 804061e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8040622:	f001 fd6f 	bl	8042104 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8040626:	4828      	ldr	r0, [pc, #160]	; (80406c8 <main+0x134>)
 8040628:	f001 fd54 	bl	80420d4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 804062c:	4827      	ldr	r0, [pc, #156]	; (80406cc <main+0x138>)
 804062e:	f001 fd83 	bl	8042138 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)buffch, CENTER_MODE);
 8040632:	2301      	movs	r3, #1
 8040634:	4a22      	ldr	r2, [pc, #136]	; (80406c0 <main+0x12c>)
 8040636:	2100      	movs	r1, #0
 8040638:	2000      	movs	r0, #0
 804063a:	f001 fe03 	bl	8042244 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 804063e:	f04f 30ff 	mov.w	r0, #4294967295
 8040642:	f001 fd47 	bl	80420d4 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"MUST'V BEEN THE", CENTER_MODE);
 8040646:	f001 fc73 	bl	8041f30 <BSP_LCD_GetYSize>
 804064a:	4603      	mov	r3, r0
 804064c:	085b      	lsrs	r3, r3, #1
 804064e:	b29b      	uxth	r3, r3
 8040650:	3b1b      	subs	r3, #27
 8040652:	b299      	uxth	r1, r3
 8040654:	2301      	movs	r3, #1
 8040656:	4a1e      	ldr	r2, [pc, #120]	; (80406d0 <main+0x13c>)
 8040658:	2000      	movs	r0, #0
 804065a:	f001 fdf3 	bl	8042244 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"DEADLY", CENTER_MODE);
 804065e:	f001 fc67 	bl	8041f30 <BSP_LCD_GetYSize>
 8040662:	4603      	mov	r3, r0
 8040664:	085b      	lsrs	r3, r3, #1
 8040666:	b29b      	uxth	r3, r3
 8040668:	3b0c      	subs	r3, #12
 804066a:	b299      	uxth	r1, r3
 804066c:	2301      	movs	r3, #1
 804066e:	4a19      	ldr	r2, [pc, #100]	; (80406d4 <main+0x140>)
 8040670:	2000      	movs	r0, #0
 8040672:	f001 fde7 	bl	8042244 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"KISS", CENTER_MODE);
 8040676:	f001 fc5b 	bl	8041f30 <BSP_LCD_GetYSize>
 804067a:	4603      	mov	r3, r0
 804067c:	085b      	lsrs	r3, r3, #1
 804067e:	b29b      	uxth	r3, r3
 8040680:	3303      	adds	r3, #3
 8040682:	b299      	uxth	r1, r3
 8040684:	2301      	movs	r3, #1
 8040686:	4a14      	ldr	r2, [pc, #80]	; (80406d8 <main+0x144>)
 8040688:	2000      	movs	r0, #0
 804068a:	f001 fddb 	bl	8042244 <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 804068e:	f00b fb1b 	bl	804bcc8 <MX_USB_HOST_Process>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8040692:	2201      	movs	r2, #1
 8040694:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8040698:	4810      	ldr	r0, [pc, #64]	; (80406dc <main+0x148>)
 804069a:	f003 fbcf 	bl	8043e3c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 804069e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80406a2:	f002 fa97 	bl	8042bd4 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80406a6:	2200      	movs	r2, #0
 80406a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406ac:	480b      	ldr	r0, [pc, #44]	; (80406dc <main+0x148>)
 80406ae:	f003 fbc5 	bl	8043e3c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80406b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80406b6:	f002 fa8d 	bl	8042bd4 <HAL_Delay>
    MX_USB_HOST_Process();
 80406ba:	e7e8      	b.n	804068e <main+0xfa>
 80406bc:	0804cc10 	.word	0x0804cc10
 80406c0:	20000358 	.word	0x20000358
 80406c4:	d0130000 	.word	0xd0130000
 80406c8:	ffff0000 	.word	0xffff0000
 80406cc:	20000048 	.word	0x20000048
 80406d0:	0804cc30 	.word	0x0804cc30
 80406d4:	0804cc40 	.word	0x0804cc40
 80406d8:	0804cc48 	.word	0x0804cc48
 80406dc:	40021800 	.word	0x40021800

080406e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80406e0:	b580      	push	{r7, lr}
 80406e2:	b094      	sub	sp, #80	; 0x50
 80406e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80406e6:	f107 0320 	add.w	r3, r7, #32
 80406ea:	2230      	movs	r2, #48	; 0x30
 80406ec:	2100      	movs	r1, #0
 80406ee:	4618      	mov	r0, r3
 80406f0:	f00b fe0c 	bl	804c30c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80406f4:	f107 030c 	add.w	r3, r7, #12
 80406f8:	2200      	movs	r2, #0
 80406fa:	601a      	str	r2, [r3, #0]
 80406fc:	605a      	str	r2, [r3, #4]
 80406fe:	609a      	str	r2, [r3, #8]
 8040700:	60da      	str	r2, [r3, #12]
 8040702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8040704:	2300      	movs	r3, #0
 8040706:	60bb      	str	r3, [r7, #8]
 8040708:	4b29      	ldr	r3, [pc, #164]	; (80407b0 <SystemClock_Config+0xd0>)
 804070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804070c:	4a28      	ldr	r2, [pc, #160]	; (80407b0 <SystemClock_Config+0xd0>)
 804070e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040712:	6413      	str	r3, [r2, #64]	; 0x40
 8040714:	4b26      	ldr	r3, [pc, #152]	; (80407b0 <SystemClock_Config+0xd0>)
 8040716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804071c:	60bb      	str	r3, [r7, #8]
 804071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8040720:	2300      	movs	r3, #0
 8040722:	607b      	str	r3, [r7, #4]
 8040724:	4b23      	ldr	r3, [pc, #140]	; (80407b4 <SystemClock_Config+0xd4>)
 8040726:	681b      	ldr	r3, [r3, #0]
 8040728:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 804072c:	4a21      	ldr	r2, [pc, #132]	; (80407b4 <SystemClock_Config+0xd4>)
 804072e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040732:	6013      	str	r3, [r2, #0]
 8040734:	4b1f      	ldr	r3, [pc, #124]	; (80407b4 <SystemClock_Config+0xd4>)
 8040736:	681b      	ldr	r3, [r3, #0]
 8040738:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 804073c:	607b      	str	r3, [r7, #4]
 804073e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8040740:	2301      	movs	r3, #1
 8040742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8040744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8040748:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804074a:	2302      	movs	r3, #2
 804074c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 804074e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8040752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8040754:	2310      	movs	r3, #16
 8040756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8040758:	f44f 73a8 	mov.w	r3, #336	; 0x150
 804075c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 804075e:	2302      	movs	r3, #2
 8040760:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8040762:	2307      	movs	r3, #7
 8040764:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040766:	f107 0320 	add.w	r3, r7, #32
 804076a:	4618      	mov	r0, r3
 804076c:	f005 fd5a 	bl	8046224 <HAL_RCC_OscConfig>
 8040770:	4603      	mov	r3, r0
 8040772:	2b00      	cmp	r3, #0
 8040774:	d001      	beq.n	804077a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8040776:	f000 fb47 	bl	8040e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 804077a:	230f      	movs	r3, #15
 804077c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 804077e:	2302      	movs	r3, #2
 8040780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8040782:	2300      	movs	r3, #0
 8040784:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8040786:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 804078a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 804078c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8040790:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8040792:	f107 030c 	add.w	r3, r7, #12
 8040796:	2102      	movs	r1, #2
 8040798:	4618      	mov	r0, r3
 804079a:	f005 ffbb 	bl	8046714 <HAL_RCC_ClockConfig>
 804079e:	4603      	mov	r3, r0
 80407a0:	2b00      	cmp	r3, #0
 80407a2:	d001      	beq.n	80407a8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80407a4:	f000 fb30 	bl	8040e08 <Error_Handler>
  }
}
 80407a8:	bf00      	nop
 80407aa:	3750      	adds	r7, #80	; 0x50
 80407ac:	46bd      	mov	sp, r7
 80407ae:	bd80      	pop	{r7, pc}
 80407b0:	40023800 	.word	0x40023800
 80407b4:	40007000 	.word	0x40007000

080407b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80407b8:	b580      	push	{r7, lr}
 80407ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80407bc:	4b06      	ldr	r3, [pc, #24]	; (80407d8 <MX_CRC_Init+0x20>)
 80407be:	4a07      	ldr	r2, [pc, #28]	; (80407dc <MX_CRC_Init+0x24>)
 80407c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80407c2:	4805      	ldr	r0, [pc, #20]	; (80407d8 <MX_CRC_Init+0x20>)
 80407c4:	f002 fb0c 	bl	8042de0 <HAL_CRC_Init>
 80407c8:	4603      	mov	r3, r0
 80407ca:	2b00      	cmp	r3, #0
 80407cc:	d001      	beq.n	80407d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80407ce:	f000 fb1b 	bl	8040e08 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80407d2:	bf00      	nop
 80407d4:	bd80      	pop	{r7, pc}
 80407d6:	bf00      	nop
 80407d8:	200000fc 	.word	0x200000fc
 80407dc:	40023000 	.word	0x40023000

080407e0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80407e0:	b580      	push	{r7, lr}
 80407e2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80407e4:	4b15      	ldr	r3, [pc, #84]	; (804083c <MX_DMA2D_Init+0x5c>)
 80407e6:	4a16      	ldr	r2, [pc, #88]	; (8040840 <MX_DMA2D_Init+0x60>)
 80407e8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80407ea:	4b14      	ldr	r3, [pc, #80]	; (804083c <MX_DMA2D_Init+0x5c>)
 80407ec:	2200      	movs	r2, #0
 80407ee:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80407f0:	4b12      	ldr	r3, [pc, #72]	; (804083c <MX_DMA2D_Init+0x5c>)
 80407f2:	2200      	movs	r2, #0
 80407f4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80407f6:	4b11      	ldr	r3, [pc, #68]	; (804083c <MX_DMA2D_Init+0x5c>)
 80407f8:	2200      	movs	r2, #0
 80407fa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80407fc:	4b0f      	ldr	r3, [pc, #60]	; (804083c <MX_DMA2D_Init+0x5c>)
 80407fe:	2200      	movs	r2, #0
 8040800:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8040802:	4b0e      	ldr	r3, [pc, #56]	; (804083c <MX_DMA2D_Init+0x5c>)
 8040804:	2200      	movs	r2, #0
 8040806:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8040808:	4b0c      	ldr	r3, [pc, #48]	; (804083c <MX_DMA2D_Init+0x5c>)
 804080a:	2200      	movs	r2, #0
 804080c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 804080e:	4b0b      	ldr	r3, [pc, #44]	; (804083c <MX_DMA2D_Init+0x5c>)
 8040810:	2200      	movs	r2, #0
 8040812:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8040814:	4809      	ldr	r0, [pc, #36]	; (804083c <MX_DMA2D_Init+0x5c>)
 8040816:	f002 fcbd 	bl	8043194 <HAL_DMA2D_Init>
 804081a:	4603      	mov	r3, r0
 804081c:	2b00      	cmp	r3, #0
 804081e:	d001      	beq.n	8040824 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8040820:	f000 faf2 	bl	8040e08 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8040824:	2101      	movs	r1, #1
 8040826:	4805      	ldr	r0, [pc, #20]	; (804083c <MX_DMA2D_Init+0x5c>)
 8040828:	f002 ff22 	bl	8043670 <HAL_DMA2D_ConfigLayer>
 804082c:	4603      	mov	r3, r0
 804082e:	2b00      	cmp	r3, #0
 8040830:	d001      	beq.n	8040836 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8040832:	f000 fae9 	bl	8040e08 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8040836:	bf00      	nop
 8040838:	bd80      	pop	{r7, pc}
 804083a:	bf00      	nop
 804083c:	20000104 	.word	0x20000104
 8040840:	4002b000 	.word	0x4002b000

08040844 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8040844:	b580      	push	{r7, lr}
 8040846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8040848:	4b1b      	ldr	r3, [pc, #108]	; (80408b8 <MX_I2C3_Init+0x74>)
 804084a:	4a1c      	ldr	r2, [pc, #112]	; (80408bc <MX_I2C3_Init+0x78>)
 804084c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 804084e:	4b1a      	ldr	r3, [pc, #104]	; (80408b8 <MX_I2C3_Init+0x74>)
 8040850:	4a1b      	ldr	r2, [pc, #108]	; (80408c0 <MX_I2C3_Init+0x7c>)
 8040852:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8040854:	4b18      	ldr	r3, [pc, #96]	; (80408b8 <MX_I2C3_Init+0x74>)
 8040856:	2200      	movs	r2, #0
 8040858:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 804085a:	4b17      	ldr	r3, [pc, #92]	; (80408b8 <MX_I2C3_Init+0x74>)
 804085c:	2200      	movs	r2, #0
 804085e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8040860:	4b15      	ldr	r3, [pc, #84]	; (80408b8 <MX_I2C3_Init+0x74>)
 8040862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8040866:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8040868:	4b13      	ldr	r3, [pc, #76]	; (80408b8 <MX_I2C3_Init+0x74>)
 804086a:	2200      	movs	r2, #0
 804086c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 804086e:	4b12      	ldr	r3, [pc, #72]	; (80408b8 <MX_I2C3_Init+0x74>)
 8040870:	2200      	movs	r2, #0
 8040872:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8040874:	4b10      	ldr	r3, [pc, #64]	; (80408b8 <MX_I2C3_Init+0x74>)
 8040876:	2200      	movs	r2, #0
 8040878:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 804087a:	4b0f      	ldr	r3, [pc, #60]	; (80408b8 <MX_I2C3_Init+0x74>)
 804087c:	2200      	movs	r2, #0
 804087e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8040880:	480d      	ldr	r0, [pc, #52]	; (80408b8 <MX_I2C3_Init+0x74>)
 8040882:	f004 feff 	bl	8045684 <HAL_I2C_Init>
 8040886:	4603      	mov	r3, r0
 8040888:	2b00      	cmp	r3, #0
 804088a:	d001      	beq.n	8040890 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 804088c:	f000 fabc 	bl	8040e08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8040890:	2100      	movs	r1, #0
 8040892:	4809      	ldr	r0, [pc, #36]	; (80408b8 <MX_I2C3_Init+0x74>)
 8040894:	f005 f83a 	bl	804590c <HAL_I2CEx_ConfigAnalogFilter>
 8040898:	4603      	mov	r3, r0
 804089a:	2b00      	cmp	r3, #0
 804089c:	d001      	beq.n	80408a2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 804089e:	f000 fab3 	bl	8040e08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80408a2:	2100      	movs	r1, #0
 80408a4:	4804      	ldr	r0, [pc, #16]	; (80408b8 <MX_I2C3_Init+0x74>)
 80408a6:	f005 f86d 	bl	8045984 <HAL_I2CEx_ConfigDigitalFilter>
 80408aa:	4603      	mov	r3, r0
 80408ac:	2b00      	cmp	r3, #0
 80408ae:	d001      	beq.n	80408b4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80408b0:	f000 faaa 	bl	8040e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80408b4:	bf00      	nop
 80408b6:	bd80      	pop	{r7, pc}
 80408b8:	20000144 	.word	0x20000144
 80408bc:	40005c00 	.word	0x40005c00
 80408c0:	000186a0 	.word	0x000186a0

080408c4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80408c4:	b580      	push	{r7, lr}
 80408c6:	b08e      	sub	sp, #56	; 0x38
 80408c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80408ca:	1d3b      	adds	r3, r7, #4
 80408cc:	2234      	movs	r2, #52	; 0x34
 80408ce:	2100      	movs	r1, #0
 80408d0:	4618      	mov	r0, r3
 80408d2:	f00b fd1b 	bl	804c30c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80408d6:	4b39      	ldr	r3, [pc, #228]	; (80409bc <MX_LTDC_Init+0xf8>)
 80408d8:	4a39      	ldr	r2, [pc, #228]	; (80409c0 <MX_LTDC_Init+0xfc>)
 80408da:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80408dc:	4b37      	ldr	r3, [pc, #220]	; (80409bc <MX_LTDC_Init+0xf8>)
 80408de:	2200      	movs	r2, #0
 80408e0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80408e2:	4b36      	ldr	r3, [pc, #216]	; (80409bc <MX_LTDC_Init+0xf8>)
 80408e4:	2200      	movs	r2, #0
 80408e6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80408e8:	4b34      	ldr	r3, [pc, #208]	; (80409bc <MX_LTDC_Init+0xf8>)
 80408ea:	2200      	movs	r2, #0
 80408ec:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80408ee:	4b33      	ldr	r3, [pc, #204]	; (80409bc <MX_LTDC_Init+0xf8>)
 80408f0:	2200      	movs	r2, #0
 80408f2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80408f4:	4b31      	ldr	r3, [pc, #196]	; (80409bc <MX_LTDC_Init+0xf8>)
 80408f6:	2209      	movs	r2, #9
 80408f8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80408fa:	4b30      	ldr	r3, [pc, #192]	; (80409bc <MX_LTDC_Init+0xf8>)
 80408fc:	2201      	movs	r2, #1
 80408fe:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8040900:	4b2e      	ldr	r3, [pc, #184]	; (80409bc <MX_LTDC_Init+0xf8>)
 8040902:	221d      	movs	r2, #29
 8040904:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8040906:	4b2d      	ldr	r3, [pc, #180]	; (80409bc <MX_LTDC_Init+0xf8>)
 8040908:	2203      	movs	r2, #3
 804090a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 804090c:	4b2b      	ldr	r3, [pc, #172]	; (80409bc <MX_LTDC_Init+0xf8>)
 804090e:	f240 120d 	movw	r2, #269	; 0x10d
 8040912:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8040914:	4b29      	ldr	r3, [pc, #164]	; (80409bc <MX_LTDC_Init+0xf8>)
 8040916:	f240 1243 	movw	r2, #323	; 0x143
 804091a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 804091c:	4b27      	ldr	r3, [pc, #156]	; (80409bc <MX_LTDC_Init+0xf8>)
 804091e:	f240 1217 	movw	r2, #279	; 0x117
 8040922:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8040924:	4b25      	ldr	r3, [pc, #148]	; (80409bc <MX_LTDC_Init+0xf8>)
 8040926:	f240 1247 	movw	r2, #327	; 0x147
 804092a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 804092c:	4b23      	ldr	r3, [pc, #140]	; (80409bc <MX_LTDC_Init+0xf8>)
 804092e:	2200      	movs	r2, #0
 8040930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8040934:	4b21      	ldr	r3, [pc, #132]	; (80409bc <MX_LTDC_Init+0xf8>)
 8040936:	2200      	movs	r2, #0
 8040938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 804093c:	4b1f      	ldr	r3, [pc, #124]	; (80409bc <MX_LTDC_Init+0xf8>)
 804093e:	2200      	movs	r2, #0
 8040940:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8040944:	481d      	ldr	r0, [pc, #116]	; (80409bc <MX_LTDC_Init+0xf8>)
 8040946:	f005 f85d 	bl	8045a04 <HAL_LTDC_Init>
 804094a:	4603      	mov	r3, r0
 804094c:	2b00      	cmp	r3, #0
 804094e:	d001      	beq.n	8040954 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8040950:	f000 fa5a 	bl	8040e08 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8040954:	2300      	movs	r3, #0
 8040956:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8040958:	23f0      	movs	r3, #240	; 0xf0
 804095a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 804095c:	2300      	movs	r3, #0
 804095e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8040960:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8040964:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8040966:	2302      	movs	r3, #2
 8040968:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 804096a:	23ff      	movs	r3, #255	; 0xff
 804096c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 804096e:	2300      	movs	r3, #0
 8040970:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8040972:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8040976:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8040978:	2307      	movs	r3, #7
 804097a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 804097c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8040980:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8040982:	23f0      	movs	r3, #240	; 0xf0
 8040984:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8040986:	f44f 73a0 	mov.w	r3, #320	; 0x140
 804098a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 804098c:	2300      	movs	r3, #0
 804098e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8040992:	2300      	movs	r3, #0
 8040994:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8040998:	2300      	movs	r3, #0
 804099a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 804099e:	1d3b      	adds	r3, r7, #4
 80409a0:	2200      	movs	r2, #0
 80409a2:	4619      	mov	r1, r3
 80409a4:	4805      	ldr	r0, [pc, #20]	; (80409bc <MX_LTDC_Init+0xf8>)
 80409a6:	f005 f9bf 	bl	8045d28 <HAL_LTDC_ConfigLayer>
 80409aa:	4603      	mov	r3, r0
 80409ac:	2b00      	cmp	r3, #0
 80409ae:	d001      	beq.n	80409b4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80409b0:	f000 fa2a 	bl	8040e08 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80409b4:	bf00      	nop
 80409b6:	3738      	adds	r7, #56	; 0x38
 80409b8:	46bd      	mov	sp, r7
 80409ba:	bd80      	pop	{r7, pc}
 80409bc:	20000198 	.word	0x20000198
 80409c0:	40016800 	.word	0x40016800

080409c4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80409c4:	b580      	push	{r7, lr}
 80409c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80409c8:	4b17      	ldr	r3, [pc, #92]	; (8040a28 <MX_SPI5_Init+0x64>)
 80409ca:	4a18      	ldr	r2, [pc, #96]	; (8040a2c <MX_SPI5_Init+0x68>)
 80409cc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80409ce:	4b16      	ldr	r3, [pc, #88]	; (8040a28 <MX_SPI5_Init+0x64>)
 80409d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80409d4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80409d6:	4b14      	ldr	r3, [pc, #80]	; (8040a28 <MX_SPI5_Init+0x64>)
 80409d8:	2200      	movs	r2, #0
 80409da:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80409dc:	4b12      	ldr	r3, [pc, #72]	; (8040a28 <MX_SPI5_Init+0x64>)
 80409de:	2200      	movs	r2, #0
 80409e0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80409e2:	4b11      	ldr	r3, [pc, #68]	; (8040a28 <MX_SPI5_Init+0x64>)
 80409e4:	2200      	movs	r2, #0
 80409e6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80409e8:	4b0f      	ldr	r3, [pc, #60]	; (8040a28 <MX_SPI5_Init+0x64>)
 80409ea:	2200      	movs	r2, #0
 80409ec:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80409ee:	4b0e      	ldr	r3, [pc, #56]	; (8040a28 <MX_SPI5_Init+0x64>)
 80409f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80409f4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80409f6:	4b0c      	ldr	r3, [pc, #48]	; (8040a28 <MX_SPI5_Init+0x64>)
 80409f8:	2218      	movs	r2, #24
 80409fa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80409fc:	4b0a      	ldr	r3, [pc, #40]	; (8040a28 <MX_SPI5_Init+0x64>)
 80409fe:	2200      	movs	r2, #0
 8040a00:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8040a02:	4b09      	ldr	r3, [pc, #36]	; (8040a28 <MX_SPI5_Init+0x64>)
 8040a04:	2200      	movs	r2, #0
 8040a06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8040a08:	4b07      	ldr	r3, [pc, #28]	; (8040a28 <MX_SPI5_Init+0x64>)
 8040a0a:	2200      	movs	r2, #0
 8040a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8040a0e:	4b06      	ldr	r3, [pc, #24]	; (8040a28 <MX_SPI5_Init+0x64>)
 8040a10:	220a      	movs	r2, #10
 8040a12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8040a14:	4804      	ldr	r0, [pc, #16]	; (8040a28 <MX_SPI5_Init+0x64>)
 8040a16:	f006 fb20 	bl	804705a <HAL_SPI_Init>
 8040a1a:	4603      	mov	r3, r0
 8040a1c:	2b00      	cmp	r3, #0
 8040a1e:	d001      	beq.n	8040a24 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8040a20:	f000 f9f2 	bl	8040e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8040a24:	bf00      	nop
 8040a26:	bd80      	pop	{r7, pc}
 8040a28:	20000240 	.word	0x20000240
 8040a2c:	40015000 	.word	0x40015000

08040a30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8040a30:	b580      	push	{r7, lr}
 8040a32:	b086      	sub	sp, #24
 8040a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8040a36:	f107 0308 	add.w	r3, r7, #8
 8040a3a:	2200      	movs	r2, #0
 8040a3c:	601a      	str	r2, [r3, #0]
 8040a3e:	605a      	str	r2, [r3, #4]
 8040a40:	609a      	str	r2, [r3, #8]
 8040a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8040a44:	463b      	mov	r3, r7
 8040a46:	2200      	movs	r2, #0
 8040a48:	601a      	str	r2, [r3, #0]
 8040a4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8040a4c:	4b1e      	ldr	r3, [pc, #120]	; (8040ac8 <MX_TIM1_Init+0x98>)
 8040a4e:	4a1f      	ldr	r2, [pc, #124]	; (8040acc <MX_TIM1_Init+0x9c>)
 8040a50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8040a52:	4b1d      	ldr	r3, [pc, #116]	; (8040ac8 <MX_TIM1_Init+0x98>)
 8040a54:	2200      	movs	r2, #0
 8040a56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8040a58:	4b1b      	ldr	r3, [pc, #108]	; (8040ac8 <MX_TIM1_Init+0x98>)
 8040a5a:	2200      	movs	r2, #0
 8040a5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8040a5e:	4b1a      	ldr	r3, [pc, #104]	; (8040ac8 <MX_TIM1_Init+0x98>)
 8040a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8040a64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8040a66:	4b18      	ldr	r3, [pc, #96]	; (8040ac8 <MX_TIM1_Init+0x98>)
 8040a68:	2200      	movs	r2, #0
 8040a6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8040a6c:	4b16      	ldr	r3, [pc, #88]	; (8040ac8 <MX_TIM1_Init+0x98>)
 8040a6e:	2200      	movs	r2, #0
 8040a70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8040a72:	4b15      	ldr	r3, [pc, #84]	; (8040ac8 <MX_TIM1_Init+0x98>)
 8040a74:	2200      	movs	r2, #0
 8040a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8040a78:	4813      	ldr	r0, [pc, #76]	; (8040ac8 <MX_TIM1_Init+0x98>)
 8040a7a:	f007 f8cd 	bl	8047c18 <HAL_TIM_Base_Init>
 8040a7e:	4603      	mov	r3, r0
 8040a80:	2b00      	cmp	r3, #0
 8040a82:	d001      	beq.n	8040a88 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8040a84:	f000 f9c0 	bl	8040e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8040a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8040a8e:	f107 0308 	add.w	r3, r7, #8
 8040a92:	4619      	mov	r1, r3
 8040a94:	480c      	ldr	r0, [pc, #48]	; (8040ac8 <MX_TIM1_Init+0x98>)
 8040a96:	f007 fa87 	bl	8047fa8 <HAL_TIM_ConfigClockSource>
 8040a9a:	4603      	mov	r3, r0
 8040a9c:	2b00      	cmp	r3, #0
 8040a9e:	d001      	beq.n	8040aa4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8040aa0:	f000 f9b2 	bl	8040e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8040aa4:	2300      	movs	r3, #0
 8040aa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8040aa8:	2300      	movs	r3, #0
 8040aaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8040aac:	463b      	mov	r3, r7
 8040aae:	4619      	mov	r1, r3
 8040ab0:	4805      	ldr	r0, [pc, #20]	; (8040ac8 <MX_TIM1_Init+0x98>)
 8040ab2:	f007 fca3 	bl	80483fc <HAL_TIMEx_MasterConfigSynchronization>
 8040ab6:	4603      	mov	r3, r0
 8040ab8:	2b00      	cmp	r3, #0
 8040aba:	d001      	beq.n	8040ac0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8040abc:	f000 f9a4 	bl	8040e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8040ac0:	bf00      	nop
 8040ac2:	3718      	adds	r7, #24
 8040ac4:	46bd      	mov	sp, r7
 8040ac6:	bd80      	pop	{r7, pc}
 8040ac8:	20000298 	.word	0x20000298
 8040acc:	40010000 	.word	0x40010000

08040ad0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040ad0:	b580      	push	{r7, lr}
 8040ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040ad4:	4b11      	ldr	r3, [pc, #68]	; (8040b1c <MX_USART1_UART_Init+0x4c>)
 8040ad6:	4a12      	ldr	r2, [pc, #72]	; (8040b20 <MX_USART1_UART_Init+0x50>)
 8040ad8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8040ada:	4b10      	ldr	r3, [pc, #64]	; (8040b1c <MX_USART1_UART_Init+0x4c>)
 8040adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040ae0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040ae2:	4b0e      	ldr	r3, [pc, #56]	; (8040b1c <MX_USART1_UART_Init+0x4c>)
 8040ae4:	2200      	movs	r2, #0
 8040ae6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040ae8:	4b0c      	ldr	r3, [pc, #48]	; (8040b1c <MX_USART1_UART_Init+0x4c>)
 8040aea:	2200      	movs	r2, #0
 8040aec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040aee:	4b0b      	ldr	r3, [pc, #44]	; (8040b1c <MX_USART1_UART_Init+0x4c>)
 8040af0:	2200      	movs	r2, #0
 8040af2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040af4:	4b09      	ldr	r3, [pc, #36]	; (8040b1c <MX_USART1_UART_Init+0x4c>)
 8040af6:	220c      	movs	r2, #12
 8040af8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040afa:	4b08      	ldr	r3, [pc, #32]	; (8040b1c <MX_USART1_UART_Init+0x4c>)
 8040afc:	2200      	movs	r2, #0
 8040afe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040b00:	4b06      	ldr	r3, [pc, #24]	; (8040b1c <MX_USART1_UART_Init+0x4c>)
 8040b02:	2200      	movs	r2, #0
 8040b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040b06:	4805      	ldr	r0, [pc, #20]	; (8040b1c <MX_USART1_UART_Init+0x4c>)
 8040b08:	f007 fd08 	bl	804851c <HAL_UART_Init>
 8040b0c:	4603      	mov	r3, r0
 8040b0e:	2b00      	cmp	r3, #0
 8040b10:	d001      	beq.n	8040b16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8040b12:	f000 f979 	bl	8040e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040b16:	bf00      	nop
 8040b18:	bd80      	pop	{r7, pc}
 8040b1a:	bf00      	nop
 8040b1c:	200002e0 	.word	0x200002e0
 8040b20:	40011000 	.word	0x40011000

08040b24 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8040b24:	b580      	push	{r7, lr}
 8040b26:	b088      	sub	sp, #32
 8040b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8040b2a:	1d3b      	adds	r3, r7, #4
 8040b2c:	2200      	movs	r2, #0
 8040b2e:	601a      	str	r2, [r3, #0]
 8040b30:	605a      	str	r2, [r3, #4]
 8040b32:	609a      	str	r2, [r3, #8]
 8040b34:	60da      	str	r2, [r3, #12]
 8040b36:	611a      	str	r2, [r3, #16]
 8040b38:	615a      	str	r2, [r3, #20]
 8040b3a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8040b3c:	4b1f      	ldr	r3, [pc, #124]	; (8040bbc <MX_FMC_Init+0x98>)
 8040b3e:	4a20      	ldr	r2, [pc, #128]	; (8040bc0 <MX_FMC_Init+0x9c>)
 8040b40:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8040b42:	4b1e      	ldr	r3, [pc, #120]	; (8040bbc <MX_FMC_Init+0x98>)
 8040b44:	2201      	movs	r2, #1
 8040b46:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8040b48:	4b1c      	ldr	r3, [pc, #112]	; (8040bbc <MX_FMC_Init+0x98>)
 8040b4a:	2200      	movs	r2, #0
 8040b4c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8040b4e:	4b1b      	ldr	r3, [pc, #108]	; (8040bbc <MX_FMC_Init+0x98>)
 8040b50:	2204      	movs	r2, #4
 8040b52:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8040b54:	4b19      	ldr	r3, [pc, #100]	; (8040bbc <MX_FMC_Init+0x98>)
 8040b56:	2210      	movs	r2, #16
 8040b58:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8040b5a:	4b18      	ldr	r3, [pc, #96]	; (8040bbc <MX_FMC_Init+0x98>)
 8040b5c:	2240      	movs	r2, #64	; 0x40
 8040b5e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8040b60:	4b16      	ldr	r3, [pc, #88]	; (8040bbc <MX_FMC_Init+0x98>)
 8040b62:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8040b66:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8040b68:	4b14      	ldr	r3, [pc, #80]	; (8040bbc <MX_FMC_Init+0x98>)
 8040b6a:	2200      	movs	r2, #0
 8040b6c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8040b6e:	4b13      	ldr	r3, [pc, #76]	; (8040bbc <MX_FMC_Init+0x98>)
 8040b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8040b74:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8040b76:	4b11      	ldr	r3, [pc, #68]	; (8040bbc <MX_FMC_Init+0x98>)
 8040b78:	2200      	movs	r2, #0
 8040b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8040b7c:	4b0f      	ldr	r3, [pc, #60]	; (8040bbc <MX_FMC_Init+0x98>)
 8040b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8040b82:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8040b84:	2302      	movs	r3, #2
 8040b86:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8040b88:	2307      	movs	r3, #7
 8040b8a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8040b8c:	2304      	movs	r3, #4
 8040b8e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8040b90:	2307      	movs	r3, #7
 8040b92:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8040b94:	2303      	movs	r3, #3
 8040b96:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8040b98:	2302      	movs	r3, #2
 8040b9a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8040b9c:	2302      	movs	r3, #2
 8040b9e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8040ba0:	1d3b      	adds	r3, r7, #4
 8040ba2:	4619      	mov	r1, r3
 8040ba4:	4805      	ldr	r0, [pc, #20]	; (8040bbc <MX_FMC_Init+0x98>)
 8040ba6:	f006 f9c7 	bl	8046f38 <HAL_SDRAM_Init>
 8040baa:	4603      	mov	r3, r0
 8040bac:	2b00      	cmp	r3, #0
 8040bae:	d001      	beq.n	8040bb4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8040bb0:	f000 f92a 	bl	8040e08 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8040bb4:	bf00      	nop
 8040bb6:	3720      	adds	r7, #32
 8040bb8:	46bd      	mov	sp, r7
 8040bba:	bd80      	pop	{r7, pc}
 8040bbc:	20000324 	.word	0x20000324
 8040bc0:	a0000140 	.word	0xa0000140

08040bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040bc4:	b580      	push	{r7, lr}
 8040bc6:	b08e      	sub	sp, #56	; 0x38
 8040bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040bce:	2200      	movs	r2, #0
 8040bd0:	601a      	str	r2, [r3, #0]
 8040bd2:	605a      	str	r2, [r3, #4]
 8040bd4:	609a      	str	r2, [r3, #8]
 8040bd6:	60da      	str	r2, [r3, #12]
 8040bd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040bda:	2300      	movs	r3, #0
 8040bdc:	623b      	str	r3, [r7, #32]
 8040bde:	4b7b      	ldr	r3, [pc, #492]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040be2:	4a7a      	ldr	r2, [pc, #488]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040be4:	f043 0304 	orr.w	r3, r3, #4
 8040be8:	6313      	str	r3, [r2, #48]	; 0x30
 8040bea:	4b78      	ldr	r3, [pc, #480]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040bee:	f003 0304 	and.w	r3, r3, #4
 8040bf2:	623b      	str	r3, [r7, #32]
 8040bf4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8040bf6:	2300      	movs	r3, #0
 8040bf8:	61fb      	str	r3, [r7, #28]
 8040bfa:	4b74      	ldr	r3, [pc, #464]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040bfe:	4a73      	ldr	r2, [pc, #460]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c00:	f043 0320 	orr.w	r3, r3, #32
 8040c04:	6313      	str	r3, [r2, #48]	; 0x30
 8040c06:	4b71      	ldr	r3, [pc, #452]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c0a:	f003 0320 	and.w	r3, r3, #32
 8040c0e:	61fb      	str	r3, [r7, #28]
 8040c10:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040c12:	2300      	movs	r3, #0
 8040c14:	61bb      	str	r3, [r7, #24]
 8040c16:	4b6d      	ldr	r3, [pc, #436]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c1a:	4a6c      	ldr	r2, [pc, #432]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8040c20:	6313      	str	r3, [r2, #48]	; 0x30
 8040c22:	4b6a      	ldr	r3, [pc, #424]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8040c2a:	61bb      	str	r3, [r7, #24]
 8040c2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040c2e:	2300      	movs	r3, #0
 8040c30:	617b      	str	r3, [r7, #20]
 8040c32:	4b66      	ldr	r3, [pc, #408]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c36:	4a65      	ldr	r2, [pc, #404]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c38:	f043 0301 	orr.w	r3, r3, #1
 8040c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8040c3e:	4b63      	ldr	r3, [pc, #396]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c42:	f003 0301 	and.w	r3, r3, #1
 8040c46:	617b      	str	r3, [r7, #20]
 8040c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040c4a:	2300      	movs	r3, #0
 8040c4c:	613b      	str	r3, [r7, #16]
 8040c4e:	4b5f      	ldr	r3, [pc, #380]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c52:	4a5e      	ldr	r2, [pc, #376]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c54:	f043 0302 	orr.w	r3, r3, #2
 8040c58:	6313      	str	r3, [r2, #48]	; 0x30
 8040c5a:	4b5c      	ldr	r3, [pc, #368]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c5e:	f003 0302 	and.w	r3, r3, #2
 8040c62:	613b      	str	r3, [r7, #16]
 8040c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8040c66:	2300      	movs	r3, #0
 8040c68:	60fb      	str	r3, [r7, #12]
 8040c6a:	4b58      	ldr	r3, [pc, #352]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c6e:	4a57      	ldr	r2, [pc, #348]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8040c74:	6313      	str	r3, [r2, #48]	; 0x30
 8040c76:	4b55      	ldr	r3, [pc, #340]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8040c7e:	60fb      	str	r3, [r7, #12]
 8040c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8040c82:	2300      	movs	r3, #0
 8040c84:	60bb      	str	r3, [r7, #8]
 8040c86:	4b51      	ldr	r3, [pc, #324]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c8a:	4a50      	ldr	r2, [pc, #320]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c8c:	f043 0310 	orr.w	r3, r3, #16
 8040c90:	6313      	str	r3, [r2, #48]	; 0x30
 8040c92:	4b4e      	ldr	r3, [pc, #312]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c96:	f003 0310 	and.w	r3, r3, #16
 8040c9a:	60bb      	str	r3, [r7, #8]
 8040c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040c9e:	2300      	movs	r3, #0
 8040ca0:	607b      	str	r3, [r7, #4]
 8040ca2:	4b4a      	ldr	r3, [pc, #296]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ca6:	4a49      	ldr	r2, [pc, #292]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040ca8:	f043 0308 	orr.w	r3, r3, #8
 8040cac:	6313      	str	r3, [r2, #48]	; 0x30
 8040cae:	4b47      	ldr	r3, [pc, #284]	; (8040dcc <MX_GPIO_Init+0x208>)
 8040cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cb2:	f003 0308 	and.w	r3, r3, #8
 8040cb6:	607b      	str	r3, [r7, #4]
 8040cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8040cba:	2200      	movs	r2, #0
 8040cbc:	2116      	movs	r1, #22
 8040cbe:	4844      	ldr	r0, [pc, #272]	; (8040dd0 <MX_GPIO_Init+0x20c>)
 8040cc0:	f003 f8bc 	bl	8043e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8040cc4:	2200      	movs	r2, #0
 8040cc6:	2180      	movs	r1, #128	; 0x80
 8040cc8:	4842      	ldr	r0, [pc, #264]	; (8040dd4 <MX_GPIO_Init+0x210>)
 8040cca:	f003 f8b7 	bl	8043e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8040cce:	2200      	movs	r2, #0
 8040cd0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8040cd4:	4840      	ldr	r0, [pc, #256]	; (8040dd8 <MX_GPIO_Init+0x214>)
 8040cd6:	f003 f8b1 	bl	8043e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8040cda:	2200      	movs	r2, #0
 8040cdc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8040ce0:	483e      	ldr	r0, [pc, #248]	; (8040ddc <MX_GPIO_Init+0x218>)
 8040ce2:	f003 f8ab 	bl	8043e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8040ce6:	2316      	movs	r3, #22
 8040ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040cea:	2301      	movs	r3, #1
 8040cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040cee:	2300      	movs	r3, #0
 8040cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040cf2:	2300      	movs	r3, #0
 8040cf4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8040cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040cfa:	4619      	mov	r1, r3
 8040cfc:	4834      	ldr	r0, [pc, #208]	; (8040dd0 <MX_GPIO_Init+0x20c>)
 8040cfe:	f002 fde5 	bl	80438cc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8040d02:	f248 0307 	movw	r3, #32775	; 0x8007
 8040d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8040d08:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8040d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d0e:	2300      	movs	r3, #0
 8040d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040d16:	4619      	mov	r1, r3
 8040d18:	482e      	ldr	r0, [pc, #184]	; (8040dd4 <MX_GPIO_Init+0x210>)
 8040d1a:	f002 fdd7 	bl	80438cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8040d1e:	2380      	movs	r3, #128	; 0x80
 8040d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040d22:	2301      	movs	r3, #1
 8040d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d26:	2300      	movs	r3, #0
 8040d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040d2a:	2300      	movs	r3, #0
 8040d2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8040d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040d32:	4619      	mov	r1, r3
 8040d34:	4827      	ldr	r0, [pc, #156]	; (8040dd4 <MX_GPIO_Init+0x210>)
 8040d36:	f002 fdc9 	bl	80438cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8040d3a:	2320      	movs	r3, #32
 8040d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8040d3e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8040d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d44:	2300      	movs	r3, #0
 8040d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8040d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040d4c:	4619      	mov	r1, r3
 8040d4e:	4820      	ldr	r0, [pc, #128]	; (8040dd0 <MX_GPIO_Init+0x20c>)
 8040d50:	f002 fdbc 	bl	80438cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8040d54:	2304      	movs	r3, #4
 8040d56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040d58:	2300      	movs	r3, #0
 8040d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d5c:	2300      	movs	r3, #0
 8040d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8040d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040d64:	4619      	mov	r1, r3
 8040d66:	481e      	ldr	r0, [pc, #120]	; (8040de0 <MX_GPIO_Init+0x21c>)
 8040d68:	f002 fdb0 	bl	80438cc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8040d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8040d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040d72:	2300      	movs	r3, #0
 8040d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d76:	2300      	movs	r3, #0
 8040d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8040d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040d7e:	4619      	mov	r1, r3
 8040d80:	4815      	ldr	r0, [pc, #84]	; (8040dd8 <MX_GPIO_Init+0x214>)
 8040d82:	f002 fda3 	bl	80438cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8040d86:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8040d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040d8c:	2301      	movs	r3, #1
 8040d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d90:	2300      	movs	r3, #0
 8040d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040d94:	2300      	movs	r3, #0
 8040d96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040d9c:	4619      	mov	r1, r3
 8040d9e:	480e      	ldr	r0, [pc, #56]	; (8040dd8 <MX_GPIO_Init+0x214>)
 8040da0:	f002 fd94 	bl	80438cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8040da4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8040da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040daa:	2301      	movs	r3, #1
 8040dac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040dae:	2300      	movs	r3, #0
 8040db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040db2:	2300      	movs	r3, #0
 8040db4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8040db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040dba:	4619      	mov	r1, r3
 8040dbc:	4807      	ldr	r0, [pc, #28]	; (8040ddc <MX_GPIO_Init+0x218>)
 8040dbe:	f002 fd85 	bl	80438cc <HAL_GPIO_Init>

}
 8040dc2:	bf00      	nop
 8040dc4:	3738      	adds	r7, #56	; 0x38
 8040dc6:	46bd      	mov	sp, r7
 8040dc8:	bd80      	pop	{r7, pc}
 8040dca:	bf00      	nop
 8040dcc:	40023800 	.word	0x40023800
 8040dd0:	40020800 	.word	0x40020800
 8040dd4:	40020000 	.word	0x40020000
 8040dd8:	40020c00 	.word	0x40020c00
 8040ddc:	40021800 	.word	0x40021800
 8040de0:	40020400 	.word	0x40020400

08040de4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8040de4:	b580      	push	{r7, lr}
 8040de6:	b082      	sub	sp, #8
 8040de8:	af00      	add	r7, sp, #0
 8040dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8040dec:	687b      	ldr	r3, [r7, #4]
 8040dee:	681b      	ldr	r3, [r3, #0]
 8040df0:	4a04      	ldr	r2, [pc, #16]	; (8040e04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8040df2:	4293      	cmp	r3, r2
 8040df4:	d101      	bne.n	8040dfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8040df6:	f001 fecd 	bl	8042b94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8040dfa:	bf00      	nop
 8040dfc:	3708      	adds	r7, #8
 8040dfe:	46bd      	mov	sp, r7
 8040e00:	bd80      	pop	{r7, pc}
 8040e02:	bf00      	nop
 8040e04:	40001000 	.word	0x40001000

08040e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040e08:	b480      	push	{r7}
 8040e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040e0c:	b672      	cpsid	i
}
 8040e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040e10:	e7fe      	b.n	8040e10 <Error_Handler+0x8>
	...

08040e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040e14:	b480      	push	{r7}
 8040e16:	b083      	sub	sp, #12
 8040e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040e1a:	2300      	movs	r3, #0
 8040e1c:	607b      	str	r3, [r7, #4]
 8040e1e:	4b10      	ldr	r3, [pc, #64]	; (8040e60 <HAL_MspInit+0x4c>)
 8040e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040e22:	4a0f      	ldr	r2, [pc, #60]	; (8040e60 <HAL_MspInit+0x4c>)
 8040e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040e28:	6453      	str	r3, [r2, #68]	; 0x44
 8040e2a:	4b0d      	ldr	r3, [pc, #52]	; (8040e60 <HAL_MspInit+0x4c>)
 8040e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040e32:	607b      	str	r3, [r7, #4]
 8040e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040e36:	2300      	movs	r3, #0
 8040e38:	603b      	str	r3, [r7, #0]
 8040e3a:	4b09      	ldr	r3, [pc, #36]	; (8040e60 <HAL_MspInit+0x4c>)
 8040e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040e3e:	4a08      	ldr	r2, [pc, #32]	; (8040e60 <HAL_MspInit+0x4c>)
 8040e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040e44:	6413      	str	r3, [r2, #64]	; 0x40
 8040e46:	4b06      	ldr	r3, [pc, #24]	; (8040e60 <HAL_MspInit+0x4c>)
 8040e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040e4e:	603b      	str	r3, [r7, #0]
 8040e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040e52:	bf00      	nop
 8040e54:	370c      	adds	r7, #12
 8040e56:	46bd      	mov	sp, r7
 8040e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e5c:	4770      	bx	lr
 8040e5e:	bf00      	nop
 8040e60:	40023800 	.word	0x40023800

08040e64 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8040e64:	b480      	push	{r7}
 8040e66:	b085      	sub	sp, #20
 8040e68:	af00      	add	r7, sp, #0
 8040e6a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8040e6c:	687b      	ldr	r3, [r7, #4]
 8040e6e:	681b      	ldr	r3, [r3, #0]
 8040e70:	4a0b      	ldr	r2, [pc, #44]	; (8040ea0 <HAL_CRC_MspInit+0x3c>)
 8040e72:	4293      	cmp	r3, r2
 8040e74:	d10d      	bne.n	8040e92 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8040e76:	2300      	movs	r3, #0
 8040e78:	60fb      	str	r3, [r7, #12]
 8040e7a:	4b0a      	ldr	r3, [pc, #40]	; (8040ea4 <HAL_CRC_MspInit+0x40>)
 8040e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040e7e:	4a09      	ldr	r2, [pc, #36]	; (8040ea4 <HAL_CRC_MspInit+0x40>)
 8040e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8040e84:	6313      	str	r3, [r2, #48]	; 0x30
 8040e86:	4b07      	ldr	r3, [pc, #28]	; (8040ea4 <HAL_CRC_MspInit+0x40>)
 8040e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8040e8e:	60fb      	str	r3, [r7, #12]
 8040e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8040e92:	bf00      	nop
 8040e94:	3714      	adds	r7, #20
 8040e96:	46bd      	mov	sp, r7
 8040e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e9c:	4770      	bx	lr
 8040e9e:	bf00      	nop
 8040ea0:	40023000 	.word	0x40023000
 8040ea4:	40023800 	.word	0x40023800

08040ea8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8040ea8:	b580      	push	{r7, lr}
 8040eaa:	b084      	sub	sp, #16
 8040eac:	af00      	add	r7, sp, #0
 8040eae:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8040eb0:	687b      	ldr	r3, [r7, #4]
 8040eb2:	681b      	ldr	r3, [r3, #0]
 8040eb4:	4a0e      	ldr	r2, [pc, #56]	; (8040ef0 <HAL_DMA2D_MspInit+0x48>)
 8040eb6:	4293      	cmp	r3, r2
 8040eb8:	d115      	bne.n	8040ee6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8040eba:	2300      	movs	r3, #0
 8040ebc:	60fb      	str	r3, [r7, #12]
 8040ebe:	4b0d      	ldr	r3, [pc, #52]	; (8040ef4 <HAL_DMA2D_MspInit+0x4c>)
 8040ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ec2:	4a0c      	ldr	r2, [pc, #48]	; (8040ef4 <HAL_DMA2D_MspInit+0x4c>)
 8040ec4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8040ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8040eca:	4b0a      	ldr	r3, [pc, #40]	; (8040ef4 <HAL_DMA2D_MspInit+0x4c>)
 8040ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8040ed2:	60fb      	str	r3, [r7, #12]
 8040ed4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8040ed6:	2200      	movs	r2, #0
 8040ed8:	2105      	movs	r1, #5
 8040eda:	205a      	movs	r0, #90	; 0x5a
 8040edc:	f001 ff56 	bl	8042d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8040ee0:	205a      	movs	r0, #90	; 0x5a
 8040ee2:	f001 ff6f 	bl	8042dc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8040ee6:	bf00      	nop
 8040ee8:	3710      	adds	r7, #16
 8040eea:	46bd      	mov	sp, r7
 8040eec:	bd80      	pop	{r7, pc}
 8040eee:	bf00      	nop
 8040ef0:	4002b000 	.word	0x4002b000
 8040ef4:	40023800 	.word	0x40023800

08040ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8040ef8:	b580      	push	{r7, lr}
 8040efa:	b08a      	sub	sp, #40	; 0x28
 8040efc:	af00      	add	r7, sp, #0
 8040efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040f00:	f107 0314 	add.w	r3, r7, #20
 8040f04:	2200      	movs	r2, #0
 8040f06:	601a      	str	r2, [r3, #0]
 8040f08:	605a      	str	r2, [r3, #4]
 8040f0a:	609a      	str	r2, [r3, #8]
 8040f0c:	60da      	str	r2, [r3, #12]
 8040f0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8040f10:	687b      	ldr	r3, [r7, #4]
 8040f12:	681b      	ldr	r3, [r3, #0]
 8040f14:	4a29      	ldr	r2, [pc, #164]	; (8040fbc <HAL_I2C_MspInit+0xc4>)
 8040f16:	4293      	cmp	r3, r2
 8040f18:	d14b      	bne.n	8040fb2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8040f1a:	2300      	movs	r3, #0
 8040f1c:	613b      	str	r3, [r7, #16]
 8040f1e:	4b28      	ldr	r3, [pc, #160]	; (8040fc0 <HAL_I2C_MspInit+0xc8>)
 8040f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f22:	4a27      	ldr	r2, [pc, #156]	; (8040fc0 <HAL_I2C_MspInit+0xc8>)
 8040f24:	f043 0304 	orr.w	r3, r3, #4
 8040f28:	6313      	str	r3, [r2, #48]	; 0x30
 8040f2a:	4b25      	ldr	r3, [pc, #148]	; (8040fc0 <HAL_I2C_MspInit+0xc8>)
 8040f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f2e:	f003 0304 	and.w	r3, r3, #4
 8040f32:	613b      	str	r3, [r7, #16]
 8040f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040f36:	2300      	movs	r3, #0
 8040f38:	60fb      	str	r3, [r7, #12]
 8040f3a:	4b21      	ldr	r3, [pc, #132]	; (8040fc0 <HAL_I2C_MspInit+0xc8>)
 8040f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f3e:	4a20      	ldr	r2, [pc, #128]	; (8040fc0 <HAL_I2C_MspInit+0xc8>)
 8040f40:	f043 0301 	orr.w	r3, r3, #1
 8040f44:	6313      	str	r3, [r2, #48]	; 0x30
 8040f46:	4b1e      	ldr	r3, [pc, #120]	; (8040fc0 <HAL_I2C_MspInit+0xc8>)
 8040f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f4a:	f003 0301 	and.w	r3, r3, #1
 8040f4e:	60fb      	str	r3, [r7, #12]
 8040f50:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8040f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8040f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8040f58:	2312      	movs	r3, #18
 8040f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8040f5c:	2301      	movs	r3, #1
 8040f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040f60:	2300      	movs	r3, #0
 8040f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8040f64:	2304      	movs	r3, #4
 8040f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8040f68:	f107 0314 	add.w	r3, r7, #20
 8040f6c:	4619      	mov	r1, r3
 8040f6e:	4815      	ldr	r0, [pc, #84]	; (8040fc4 <HAL_I2C_MspInit+0xcc>)
 8040f70:	f002 fcac 	bl	80438cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8040f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8040f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8040f7a:	2312      	movs	r3, #18
 8040f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8040f7e:	2301      	movs	r3, #1
 8040f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040f82:	2300      	movs	r3, #0
 8040f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8040f86:	2304      	movs	r3, #4
 8040f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8040f8a:	f107 0314 	add.w	r3, r7, #20
 8040f8e:	4619      	mov	r1, r3
 8040f90:	480d      	ldr	r0, [pc, #52]	; (8040fc8 <HAL_I2C_MspInit+0xd0>)
 8040f92:	f002 fc9b 	bl	80438cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8040f96:	2300      	movs	r3, #0
 8040f98:	60bb      	str	r3, [r7, #8]
 8040f9a:	4b09      	ldr	r3, [pc, #36]	; (8040fc0 <HAL_I2C_MspInit+0xc8>)
 8040f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040f9e:	4a08      	ldr	r2, [pc, #32]	; (8040fc0 <HAL_I2C_MspInit+0xc8>)
 8040fa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8040fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8040fa6:	4b06      	ldr	r3, [pc, #24]	; (8040fc0 <HAL_I2C_MspInit+0xc8>)
 8040fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8040fae:	60bb      	str	r3, [r7, #8]
 8040fb0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8040fb2:	bf00      	nop
 8040fb4:	3728      	adds	r7, #40	; 0x28
 8040fb6:	46bd      	mov	sp, r7
 8040fb8:	bd80      	pop	{r7, pc}
 8040fba:	bf00      	nop
 8040fbc:	40005c00 	.word	0x40005c00
 8040fc0:	40023800 	.word	0x40023800
 8040fc4:	40020800 	.word	0x40020800
 8040fc8:	40020000 	.word	0x40020000

08040fcc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8040fcc:	b580      	push	{r7, lr}
 8040fce:	b09a      	sub	sp, #104	; 0x68
 8040fd0:	af00      	add	r7, sp, #0
 8040fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040fd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8040fd8:	2200      	movs	r2, #0
 8040fda:	601a      	str	r2, [r3, #0]
 8040fdc:	605a      	str	r2, [r3, #4]
 8040fde:	609a      	str	r2, [r3, #8]
 8040fe0:	60da      	str	r2, [r3, #12]
 8040fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040fe8:	2230      	movs	r2, #48	; 0x30
 8040fea:	2100      	movs	r1, #0
 8040fec:	4618      	mov	r0, r3
 8040fee:	f00b f98d 	bl	804c30c <memset>
  if(hltdc->Instance==LTDC)
 8040ff2:	687b      	ldr	r3, [r7, #4]
 8040ff4:	681b      	ldr	r3, [r3, #0]
 8040ff6:	4a85      	ldr	r2, [pc, #532]	; (804120c <HAL_LTDC_MspInit+0x240>)
 8040ff8:	4293      	cmp	r3, r2
 8040ffa:	f040 8102 	bne.w	8041202 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8040ffe:	2308      	movs	r3, #8
 8041000:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 8041002:	2331      	movs	r3, #49	; 0x31
 8041004:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8041006:	2302      	movs	r3, #2
 8041008:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 804100a:	2300      	movs	r3, #0
 804100c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8041012:	4618      	mov	r0, r3
 8041014:	f005 fdd0 	bl	8046bb8 <HAL_RCCEx_PeriphCLKConfig>
 8041018:	4603      	mov	r3, r0
 804101a:	2b00      	cmp	r3, #0
 804101c:	d001      	beq.n	8041022 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 804101e:	f7ff fef3 	bl	8040e08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8041022:	2300      	movs	r3, #0
 8041024:	623b      	str	r3, [r7, #32]
 8041026:	4b7a      	ldr	r3, [pc, #488]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 8041028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804102a:	4a79      	ldr	r2, [pc, #484]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 804102c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8041030:	6453      	str	r3, [r2, #68]	; 0x44
 8041032:	4b77      	ldr	r3, [pc, #476]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 8041034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041036:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 804103a:	623b      	str	r3, [r7, #32]
 804103c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 804103e:	2300      	movs	r3, #0
 8041040:	61fb      	str	r3, [r7, #28]
 8041042:	4b73      	ldr	r3, [pc, #460]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 8041044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041046:	4a72      	ldr	r2, [pc, #456]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 8041048:	f043 0320 	orr.w	r3, r3, #32
 804104c:	6313      	str	r3, [r2, #48]	; 0x30
 804104e:	4b70      	ldr	r3, [pc, #448]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 8041050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041052:	f003 0320 	and.w	r3, r3, #32
 8041056:	61fb      	str	r3, [r7, #28]
 8041058:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 804105a:	2300      	movs	r3, #0
 804105c:	61bb      	str	r3, [r7, #24]
 804105e:	4b6c      	ldr	r3, [pc, #432]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 8041060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041062:	4a6b      	ldr	r2, [pc, #428]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 8041064:	f043 0301 	orr.w	r3, r3, #1
 8041068:	6313      	str	r3, [r2, #48]	; 0x30
 804106a:	4b69      	ldr	r3, [pc, #420]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 804106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804106e:	f003 0301 	and.w	r3, r3, #1
 8041072:	61bb      	str	r3, [r7, #24]
 8041074:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8041076:	2300      	movs	r3, #0
 8041078:	617b      	str	r3, [r7, #20]
 804107a:	4b65      	ldr	r3, [pc, #404]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 804107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804107e:	4a64      	ldr	r2, [pc, #400]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 8041080:	f043 0302 	orr.w	r3, r3, #2
 8041084:	6313      	str	r3, [r2, #48]	; 0x30
 8041086:	4b62      	ldr	r3, [pc, #392]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 8041088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804108a:	f003 0302 	and.w	r3, r3, #2
 804108e:	617b      	str	r3, [r7, #20]
 8041090:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8041092:	2300      	movs	r3, #0
 8041094:	613b      	str	r3, [r7, #16]
 8041096:	4b5e      	ldr	r3, [pc, #376]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 8041098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804109a:	4a5d      	ldr	r2, [pc, #372]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 804109c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80410a0:	6313      	str	r3, [r2, #48]	; 0x30
 80410a2:	4b5b      	ldr	r3, [pc, #364]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 80410a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80410a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80410aa:	613b      	str	r3, [r7, #16]
 80410ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80410ae:	2300      	movs	r3, #0
 80410b0:	60fb      	str	r3, [r7, #12]
 80410b2:	4b57      	ldr	r3, [pc, #348]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 80410b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80410b6:	4a56      	ldr	r2, [pc, #344]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 80410b8:	f043 0304 	orr.w	r3, r3, #4
 80410bc:	6313      	str	r3, [r2, #48]	; 0x30
 80410be:	4b54      	ldr	r3, [pc, #336]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 80410c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80410c2:	f003 0304 	and.w	r3, r3, #4
 80410c6:	60fb      	str	r3, [r7, #12]
 80410c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80410ca:	2300      	movs	r3, #0
 80410cc:	60bb      	str	r3, [r7, #8]
 80410ce:	4b50      	ldr	r3, [pc, #320]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 80410d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80410d2:	4a4f      	ldr	r2, [pc, #316]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 80410d4:	f043 0308 	orr.w	r3, r3, #8
 80410d8:	6313      	str	r3, [r2, #48]	; 0x30
 80410da:	4b4d      	ldr	r3, [pc, #308]	; (8041210 <HAL_LTDC_MspInit+0x244>)
 80410dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80410de:	f003 0308 	and.w	r3, r3, #8
 80410e2:	60bb      	str	r3, [r7, #8]
 80410e4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80410e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80410ea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80410ec:	2302      	movs	r3, #2
 80410ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80410f0:	2300      	movs	r3, #0
 80410f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80410f4:	2300      	movs	r3, #0
 80410f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80410f8:	230e      	movs	r3, #14
 80410fa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80410fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041100:	4619      	mov	r1, r3
 8041102:	4844      	ldr	r0, [pc, #272]	; (8041214 <HAL_LTDC_MspInit+0x248>)
 8041104:	f002 fbe2 	bl	80438cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8041108:	f641 0358 	movw	r3, #6232	; 0x1858
 804110c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804110e:	2302      	movs	r3, #2
 8041110:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041112:	2300      	movs	r3, #0
 8041114:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041116:	2300      	movs	r3, #0
 8041118:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 804111a:	230e      	movs	r3, #14
 804111c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804111e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041122:	4619      	mov	r1, r3
 8041124:	483c      	ldr	r0, [pc, #240]	; (8041218 <HAL_LTDC_MspInit+0x24c>)
 8041126:	f002 fbd1 	bl	80438cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 804112a:	2303      	movs	r3, #3
 804112c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804112e:	2302      	movs	r3, #2
 8041130:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041132:	2300      	movs	r3, #0
 8041134:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041136:	2300      	movs	r3, #0
 8041138:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 804113a:	2309      	movs	r3, #9
 804113c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804113e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041142:	4619      	mov	r1, r3
 8041144:	4835      	ldr	r0, [pc, #212]	; (804121c <HAL_LTDC_MspInit+0x250>)
 8041146:	f002 fbc1 	bl	80438cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 804114a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 804114e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041150:	2302      	movs	r3, #2
 8041152:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041154:	2300      	movs	r3, #0
 8041156:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041158:	2300      	movs	r3, #0
 804115a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 804115c:	230e      	movs	r3, #14
 804115e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8041160:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041164:	4619      	mov	r1, r3
 8041166:	482d      	ldr	r0, [pc, #180]	; (804121c <HAL_LTDC_MspInit+0x250>)
 8041168:	f002 fbb0 	bl	80438cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 804116c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8041170:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041172:	2302      	movs	r3, #2
 8041174:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041176:	2300      	movs	r3, #0
 8041178:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804117a:	2300      	movs	r3, #0
 804117c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 804117e:	230e      	movs	r3, #14
 8041180:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8041182:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041186:	4619      	mov	r1, r3
 8041188:	4825      	ldr	r0, [pc, #148]	; (8041220 <HAL_LTDC_MspInit+0x254>)
 804118a:	f002 fb9f 	bl	80438cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 804118e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8041192:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041194:	2302      	movs	r3, #2
 8041196:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041198:	2300      	movs	r3, #0
 804119a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804119c:	2300      	movs	r3, #0
 804119e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80411a0:	230e      	movs	r3, #14
 80411a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80411a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80411a8:	4619      	mov	r1, r3
 80411aa:	481e      	ldr	r0, [pc, #120]	; (8041224 <HAL_LTDC_MspInit+0x258>)
 80411ac:	f002 fb8e 	bl	80438cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80411b0:	2348      	movs	r3, #72	; 0x48
 80411b2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80411b4:	2302      	movs	r3, #2
 80411b6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80411b8:	2300      	movs	r3, #0
 80411ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80411bc:	2300      	movs	r3, #0
 80411be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80411c0:	230e      	movs	r3, #14
 80411c2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80411c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80411c8:	4619      	mov	r1, r3
 80411ca:	4817      	ldr	r0, [pc, #92]	; (8041228 <HAL_LTDC_MspInit+0x25c>)
 80411cc:	f002 fb7e 	bl	80438cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80411d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80411d4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80411d6:	2302      	movs	r3, #2
 80411d8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80411da:	2300      	movs	r3, #0
 80411dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80411de:	2300      	movs	r3, #0
 80411e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80411e2:	2309      	movs	r3, #9
 80411e4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80411e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80411ea:	4619      	mov	r1, r3
 80411ec:	480c      	ldr	r0, [pc, #48]	; (8041220 <HAL_LTDC_MspInit+0x254>)
 80411ee:	f002 fb6d 	bl	80438cc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80411f2:	2200      	movs	r2, #0
 80411f4:	2105      	movs	r1, #5
 80411f6:	2058      	movs	r0, #88	; 0x58
 80411f8:	f001 fdc8 	bl	8042d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80411fc:	2058      	movs	r0, #88	; 0x58
 80411fe:	f001 fde1 	bl	8042dc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8041202:	bf00      	nop
 8041204:	3768      	adds	r7, #104	; 0x68
 8041206:	46bd      	mov	sp, r7
 8041208:	bd80      	pop	{r7, pc}
 804120a:	bf00      	nop
 804120c:	40016800 	.word	0x40016800
 8041210:	40023800 	.word	0x40023800
 8041214:	40021400 	.word	0x40021400
 8041218:	40020000 	.word	0x40020000
 804121c:	40020400 	.word	0x40020400
 8041220:	40021800 	.word	0x40021800
 8041224:	40020800 	.word	0x40020800
 8041228:	40020c00 	.word	0x40020c00

0804122c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 804122c:	b580      	push	{r7, lr}
 804122e:	b08a      	sub	sp, #40	; 0x28
 8041230:	af00      	add	r7, sp, #0
 8041232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041234:	f107 0314 	add.w	r3, r7, #20
 8041238:	2200      	movs	r2, #0
 804123a:	601a      	str	r2, [r3, #0]
 804123c:	605a      	str	r2, [r3, #4]
 804123e:	609a      	str	r2, [r3, #8]
 8041240:	60da      	str	r2, [r3, #12]
 8041242:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8041244:	687b      	ldr	r3, [r7, #4]
 8041246:	681b      	ldr	r3, [r3, #0]
 8041248:	4a19      	ldr	r2, [pc, #100]	; (80412b0 <HAL_SPI_MspInit+0x84>)
 804124a:	4293      	cmp	r3, r2
 804124c:	d12c      	bne.n	80412a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 804124e:	2300      	movs	r3, #0
 8041250:	613b      	str	r3, [r7, #16]
 8041252:	4b18      	ldr	r3, [pc, #96]	; (80412b4 <HAL_SPI_MspInit+0x88>)
 8041254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041256:	4a17      	ldr	r2, [pc, #92]	; (80412b4 <HAL_SPI_MspInit+0x88>)
 8041258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804125c:	6453      	str	r3, [r2, #68]	; 0x44
 804125e:	4b15      	ldr	r3, [pc, #84]	; (80412b4 <HAL_SPI_MspInit+0x88>)
 8041260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041266:	613b      	str	r3, [r7, #16]
 8041268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 804126a:	2300      	movs	r3, #0
 804126c:	60fb      	str	r3, [r7, #12]
 804126e:	4b11      	ldr	r3, [pc, #68]	; (80412b4 <HAL_SPI_MspInit+0x88>)
 8041270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041272:	4a10      	ldr	r2, [pc, #64]	; (80412b4 <HAL_SPI_MspInit+0x88>)
 8041274:	f043 0320 	orr.w	r3, r3, #32
 8041278:	6313      	str	r3, [r2, #48]	; 0x30
 804127a:	4b0e      	ldr	r3, [pc, #56]	; (80412b4 <HAL_SPI_MspInit+0x88>)
 804127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804127e:	f003 0320 	and.w	r3, r3, #32
 8041282:	60fb      	str	r3, [r7, #12]
 8041284:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8041286:	f44f 7360 	mov.w	r3, #896	; 0x380
 804128a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804128c:	2302      	movs	r3, #2
 804128e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041290:	2300      	movs	r3, #0
 8041292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041294:	2300      	movs	r3, #0
 8041296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8041298:	2305      	movs	r3, #5
 804129a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 804129c:	f107 0314 	add.w	r3, r7, #20
 80412a0:	4619      	mov	r1, r3
 80412a2:	4805      	ldr	r0, [pc, #20]	; (80412b8 <HAL_SPI_MspInit+0x8c>)
 80412a4:	f002 fb12 	bl	80438cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80412a8:	bf00      	nop
 80412aa:	3728      	adds	r7, #40	; 0x28
 80412ac:	46bd      	mov	sp, r7
 80412ae:	bd80      	pop	{r7, pc}
 80412b0:	40015000 	.word	0x40015000
 80412b4:	40023800 	.word	0x40023800
 80412b8:	40021400 	.word	0x40021400

080412bc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80412bc:	b580      	push	{r7, lr}
 80412be:	b082      	sub	sp, #8
 80412c0:	af00      	add	r7, sp, #0
 80412c2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80412c4:	687b      	ldr	r3, [r7, #4]
 80412c6:	681b      	ldr	r3, [r3, #0]
 80412c8:	4a08      	ldr	r2, [pc, #32]	; (80412ec <HAL_SPI_MspDeInit+0x30>)
 80412ca:	4293      	cmp	r3, r2
 80412cc:	d10a      	bne.n	80412e4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80412ce:	4b08      	ldr	r3, [pc, #32]	; (80412f0 <HAL_SPI_MspDeInit+0x34>)
 80412d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80412d2:	4a07      	ldr	r2, [pc, #28]	; (80412f0 <HAL_SPI_MspDeInit+0x34>)
 80412d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80412d8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80412da:	f44f 7160 	mov.w	r1, #896	; 0x380
 80412de:	4805      	ldr	r0, [pc, #20]	; (80412f4 <HAL_SPI_MspDeInit+0x38>)
 80412e0:	f002 fca0 	bl	8043c24 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80412e4:	bf00      	nop
 80412e6:	3708      	adds	r7, #8
 80412e8:	46bd      	mov	sp, r7
 80412ea:	bd80      	pop	{r7, pc}
 80412ec:	40015000 	.word	0x40015000
 80412f0:	40023800 	.word	0x40023800
 80412f4:	40021400 	.word	0x40021400

080412f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80412f8:	b480      	push	{r7}
 80412fa:	b085      	sub	sp, #20
 80412fc:	af00      	add	r7, sp, #0
 80412fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8041300:	687b      	ldr	r3, [r7, #4]
 8041302:	681b      	ldr	r3, [r3, #0]
 8041304:	4a0b      	ldr	r2, [pc, #44]	; (8041334 <HAL_TIM_Base_MspInit+0x3c>)
 8041306:	4293      	cmp	r3, r2
 8041308:	d10d      	bne.n	8041326 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 804130a:	2300      	movs	r3, #0
 804130c:	60fb      	str	r3, [r7, #12]
 804130e:	4b0a      	ldr	r3, [pc, #40]	; (8041338 <HAL_TIM_Base_MspInit+0x40>)
 8041310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041312:	4a09      	ldr	r2, [pc, #36]	; (8041338 <HAL_TIM_Base_MspInit+0x40>)
 8041314:	f043 0301 	orr.w	r3, r3, #1
 8041318:	6453      	str	r3, [r2, #68]	; 0x44
 804131a:	4b07      	ldr	r3, [pc, #28]	; (8041338 <HAL_TIM_Base_MspInit+0x40>)
 804131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804131e:	f003 0301 	and.w	r3, r3, #1
 8041322:	60fb      	str	r3, [r7, #12]
 8041324:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8041326:	bf00      	nop
 8041328:	3714      	adds	r7, #20
 804132a:	46bd      	mov	sp, r7
 804132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041330:	4770      	bx	lr
 8041332:	bf00      	nop
 8041334:	40010000 	.word	0x40010000
 8041338:	40023800 	.word	0x40023800

0804133c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 804133c:	b580      	push	{r7, lr}
 804133e:	b08a      	sub	sp, #40	; 0x28
 8041340:	af00      	add	r7, sp, #0
 8041342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041344:	f107 0314 	add.w	r3, r7, #20
 8041348:	2200      	movs	r2, #0
 804134a:	601a      	str	r2, [r3, #0]
 804134c:	605a      	str	r2, [r3, #4]
 804134e:	609a      	str	r2, [r3, #8]
 8041350:	60da      	str	r2, [r3, #12]
 8041352:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8041354:	687b      	ldr	r3, [r7, #4]
 8041356:	681b      	ldr	r3, [r3, #0]
 8041358:	4a19      	ldr	r2, [pc, #100]	; (80413c0 <HAL_UART_MspInit+0x84>)
 804135a:	4293      	cmp	r3, r2
 804135c:	d12c      	bne.n	80413b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 804135e:	2300      	movs	r3, #0
 8041360:	613b      	str	r3, [r7, #16]
 8041362:	4b18      	ldr	r3, [pc, #96]	; (80413c4 <HAL_UART_MspInit+0x88>)
 8041364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041366:	4a17      	ldr	r2, [pc, #92]	; (80413c4 <HAL_UART_MspInit+0x88>)
 8041368:	f043 0310 	orr.w	r3, r3, #16
 804136c:	6453      	str	r3, [r2, #68]	; 0x44
 804136e:	4b15      	ldr	r3, [pc, #84]	; (80413c4 <HAL_UART_MspInit+0x88>)
 8041370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041372:	f003 0310 	and.w	r3, r3, #16
 8041376:	613b      	str	r3, [r7, #16]
 8041378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 804137a:	2300      	movs	r3, #0
 804137c:	60fb      	str	r3, [r7, #12]
 804137e:	4b11      	ldr	r3, [pc, #68]	; (80413c4 <HAL_UART_MspInit+0x88>)
 8041380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041382:	4a10      	ldr	r2, [pc, #64]	; (80413c4 <HAL_UART_MspInit+0x88>)
 8041384:	f043 0301 	orr.w	r3, r3, #1
 8041388:	6313      	str	r3, [r2, #48]	; 0x30
 804138a:	4b0e      	ldr	r3, [pc, #56]	; (80413c4 <HAL_UART_MspInit+0x88>)
 804138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804138e:	f003 0301 	and.w	r3, r3, #1
 8041392:	60fb      	str	r3, [r7, #12]
 8041394:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8041396:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 804139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804139c:	2302      	movs	r3, #2
 804139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80413a0:	2300      	movs	r3, #0
 80413a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80413a4:	2303      	movs	r3, #3
 80413a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80413a8:	2307      	movs	r3, #7
 80413aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80413ac:	f107 0314 	add.w	r3, r7, #20
 80413b0:	4619      	mov	r1, r3
 80413b2:	4805      	ldr	r0, [pc, #20]	; (80413c8 <HAL_UART_MspInit+0x8c>)
 80413b4:	f002 fa8a 	bl	80438cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80413b8:	bf00      	nop
 80413ba:	3728      	adds	r7, #40	; 0x28
 80413bc:	46bd      	mov	sp, r7
 80413be:	bd80      	pop	{r7, pc}
 80413c0:	40011000 	.word	0x40011000
 80413c4:	40023800 	.word	0x40023800
 80413c8:	40020000 	.word	0x40020000

080413cc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80413cc:	b580      	push	{r7, lr}
 80413ce:	b086      	sub	sp, #24
 80413d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80413d2:	1d3b      	adds	r3, r7, #4
 80413d4:	2200      	movs	r2, #0
 80413d6:	601a      	str	r2, [r3, #0]
 80413d8:	605a      	str	r2, [r3, #4]
 80413da:	609a      	str	r2, [r3, #8]
 80413dc:	60da      	str	r2, [r3, #12]
 80413de:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80413e0:	4b3b      	ldr	r3, [pc, #236]	; (80414d0 <HAL_FMC_MspInit+0x104>)
 80413e2:	681b      	ldr	r3, [r3, #0]
 80413e4:	2b00      	cmp	r3, #0
 80413e6:	d16f      	bne.n	80414c8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80413e8:	4b39      	ldr	r3, [pc, #228]	; (80414d0 <HAL_FMC_MspInit+0x104>)
 80413ea:	2201      	movs	r2, #1
 80413ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80413ee:	2300      	movs	r3, #0
 80413f0:	603b      	str	r3, [r7, #0]
 80413f2:	4b38      	ldr	r3, [pc, #224]	; (80414d4 <HAL_FMC_MspInit+0x108>)
 80413f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80413f6:	4a37      	ldr	r2, [pc, #220]	; (80414d4 <HAL_FMC_MspInit+0x108>)
 80413f8:	f043 0301 	orr.w	r3, r3, #1
 80413fc:	6393      	str	r3, [r2, #56]	; 0x38
 80413fe:	4b35      	ldr	r3, [pc, #212]	; (80414d4 <HAL_FMC_MspInit+0x108>)
 8041400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041402:	f003 0301 	and.w	r3, r3, #1
 8041406:	603b      	str	r3, [r7, #0]
 8041408:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 804140a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 804140e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041410:	2302      	movs	r3, #2
 8041412:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041414:	2300      	movs	r3, #0
 8041416:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041418:	2303      	movs	r3, #3
 804141a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 804141c:	230c      	movs	r3, #12
 804141e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8041420:	1d3b      	adds	r3, r7, #4
 8041422:	4619      	mov	r1, r3
 8041424:	482c      	ldr	r0, [pc, #176]	; (80414d8 <HAL_FMC_MspInit+0x10c>)
 8041426:	f002 fa51 	bl	80438cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 804142a:	2301      	movs	r3, #1
 804142c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804142e:	2302      	movs	r3, #2
 8041430:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041432:	2300      	movs	r3, #0
 8041434:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041436:	2303      	movs	r3, #3
 8041438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 804143a:	230c      	movs	r3, #12
 804143c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 804143e:	1d3b      	adds	r3, r7, #4
 8041440:	4619      	mov	r1, r3
 8041442:	4826      	ldr	r0, [pc, #152]	; (80414dc <HAL_FMC_MspInit+0x110>)
 8041444:	f002 fa42 	bl	80438cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8041448:	f248 1333 	movw	r3, #33075	; 0x8133
 804144c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804144e:	2302      	movs	r3, #2
 8041450:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041452:	2300      	movs	r3, #0
 8041454:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041456:	2303      	movs	r3, #3
 8041458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 804145a:	230c      	movs	r3, #12
 804145c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 804145e:	1d3b      	adds	r3, r7, #4
 8041460:	4619      	mov	r1, r3
 8041462:	481f      	ldr	r0, [pc, #124]	; (80414e0 <HAL_FMC_MspInit+0x114>)
 8041464:	f002 fa32 	bl	80438cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8041468:	f64f 7383 	movw	r3, #65411	; 0xff83
 804146c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804146e:	2302      	movs	r3, #2
 8041470:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041472:	2300      	movs	r3, #0
 8041474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041476:	2303      	movs	r3, #3
 8041478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 804147a:	230c      	movs	r3, #12
 804147c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 804147e:	1d3b      	adds	r3, r7, #4
 8041480:	4619      	mov	r1, r3
 8041482:	4818      	ldr	r0, [pc, #96]	; (80414e4 <HAL_FMC_MspInit+0x118>)
 8041484:	f002 fa22 	bl	80438cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8041488:	f24c 7303 	movw	r3, #50947	; 0xc703
 804148c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804148e:	2302      	movs	r3, #2
 8041490:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041492:	2300      	movs	r3, #0
 8041494:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041496:	2303      	movs	r3, #3
 8041498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 804149a:	230c      	movs	r3, #12
 804149c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804149e:	1d3b      	adds	r3, r7, #4
 80414a0:	4619      	mov	r1, r3
 80414a2:	4811      	ldr	r0, [pc, #68]	; (80414e8 <HAL_FMC_MspInit+0x11c>)
 80414a4:	f002 fa12 	bl	80438cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80414a8:	2360      	movs	r3, #96	; 0x60
 80414aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80414ac:	2302      	movs	r3, #2
 80414ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80414b0:	2300      	movs	r3, #0
 80414b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80414b4:	2303      	movs	r3, #3
 80414b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80414b8:	230c      	movs	r3, #12
 80414ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80414bc:	1d3b      	adds	r3, r7, #4
 80414be:	4619      	mov	r1, r3
 80414c0:	480a      	ldr	r0, [pc, #40]	; (80414ec <HAL_FMC_MspInit+0x120>)
 80414c2:	f002 fa03 	bl	80438cc <HAL_GPIO_Init>
 80414c6:	e000      	b.n	80414ca <HAL_FMC_MspInit+0xfe>
    return;
 80414c8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80414ca:	3718      	adds	r7, #24
 80414cc:	46bd      	mov	sp, r7
 80414ce:	bd80      	pop	{r7, pc}
 80414d0:	200003bc 	.word	0x200003bc
 80414d4:	40023800 	.word	0x40023800
 80414d8:	40021400 	.word	0x40021400
 80414dc:	40020800 	.word	0x40020800
 80414e0:	40021800 	.word	0x40021800
 80414e4:	40021000 	.word	0x40021000
 80414e8:	40020c00 	.word	0x40020c00
 80414ec:	40020400 	.word	0x40020400

080414f0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80414f0:	b580      	push	{r7, lr}
 80414f2:	b082      	sub	sp, #8
 80414f4:	af00      	add	r7, sp, #0
 80414f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80414f8:	f7ff ff68 	bl	80413cc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80414fc:	bf00      	nop
 80414fe:	3708      	adds	r7, #8
 8041500:	46bd      	mov	sp, r7
 8041502:	bd80      	pop	{r7, pc}

08041504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8041504:	b580      	push	{r7, lr}
 8041506:	b08e      	sub	sp, #56	; 0x38
 8041508:	af00      	add	r7, sp, #0
 804150a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 804150c:	2300      	movs	r3, #0
 804150e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8041510:	2300      	movs	r3, #0
 8041512:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8041514:	2300      	movs	r3, #0
 8041516:	60fb      	str	r3, [r7, #12]
 8041518:	4b33      	ldr	r3, [pc, #204]	; (80415e8 <HAL_InitTick+0xe4>)
 804151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804151c:	4a32      	ldr	r2, [pc, #200]	; (80415e8 <HAL_InitTick+0xe4>)
 804151e:	f043 0310 	orr.w	r3, r3, #16
 8041522:	6413      	str	r3, [r2, #64]	; 0x40
 8041524:	4b30      	ldr	r3, [pc, #192]	; (80415e8 <HAL_InitTick+0xe4>)
 8041526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041528:	f003 0310 	and.w	r3, r3, #16
 804152c:	60fb      	str	r3, [r7, #12]
 804152e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8041530:	f107 0210 	add.w	r2, r7, #16
 8041534:	f107 0314 	add.w	r3, r7, #20
 8041538:	4611      	mov	r1, r2
 804153a:	4618      	mov	r0, r3
 804153c:	f005 fb0a 	bl	8046b54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8041540:	6a3b      	ldr	r3, [r7, #32]
 8041542:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8041544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041546:	2b00      	cmp	r3, #0
 8041548:	d103      	bne.n	8041552 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 804154a:	f005 fadb 	bl	8046b04 <HAL_RCC_GetPCLK1Freq>
 804154e:	6378      	str	r0, [r7, #52]	; 0x34
 8041550:	e004      	b.n	804155c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8041552:	f005 fad7 	bl	8046b04 <HAL_RCC_GetPCLK1Freq>
 8041556:	4603      	mov	r3, r0
 8041558:	005b      	lsls	r3, r3, #1
 804155a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 804155c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804155e:	4a23      	ldr	r2, [pc, #140]	; (80415ec <HAL_InitTick+0xe8>)
 8041560:	fba2 2303 	umull	r2, r3, r2, r3
 8041564:	0c9b      	lsrs	r3, r3, #18
 8041566:	3b01      	subs	r3, #1
 8041568:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 804156a:	4b21      	ldr	r3, [pc, #132]	; (80415f0 <HAL_InitTick+0xec>)
 804156c:	4a21      	ldr	r2, [pc, #132]	; (80415f4 <HAL_InitTick+0xf0>)
 804156e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8041570:	4b1f      	ldr	r3, [pc, #124]	; (80415f0 <HAL_InitTick+0xec>)
 8041572:	f240 32e7 	movw	r2, #999	; 0x3e7
 8041576:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8041578:	4a1d      	ldr	r2, [pc, #116]	; (80415f0 <HAL_InitTick+0xec>)
 804157a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804157c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 804157e:	4b1c      	ldr	r3, [pc, #112]	; (80415f0 <HAL_InitTick+0xec>)
 8041580:	2200      	movs	r2, #0
 8041582:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8041584:	4b1a      	ldr	r3, [pc, #104]	; (80415f0 <HAL_InitTick+0xec>)
 8041586:	2200      	movs	r2, #0
 8041588:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 804158a:	4b19      	ldr	r3, [pc, #100]	; (80415f0 <HAL_InitTick+0xec>)
 804158c:	2200      	movs	r2, #0
 804158e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8041590:	4817      	ldr	r0, [pc, #92]	; (80415f0 <HAL_InitTick+0xec>)
 8041592:	f006 fb41 	bl	8047c18 <HAL_TIM_Base_Init>
 8041596:	4603      	mov	r3, r0
 8041598:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 804159c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80415a0:	2b00      	cmp	r3, #0
 80415a2:	d11b      	bne.n	80415dc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80415a4:	4812      	ldr	r0, [pc, #72]	; (80415f0 <HAL_InitTick+0xec>)
 80415a6:	f006 fb87 	bl	8047cb8 <HAL_TIM_Base_Start_IT>
 80415aa:	4603      	mov	r3, r0
 80415ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80415b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80415b4:	2b00      	cmp	r3, #0
 80415b6:	d111      	bne.n	80415dc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80415b8:	2036      	movs	r0, #54	; 0x36
 80415ba:	f001 fc03 	bl	8042dc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80415be:	687b      	ldr	r3, [r7, #4]
 80415c0:	2b0f      	cmp	r3, #15
 80415c2:	d808      	bhi.n	80415d6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80415c4:	2200      	movs	r2, #0
 80415c6:	6879      	ldr	r1, [r7, #4]
 80415c8:	2036      	movs	r0, #54	; 0x36
 80415ca:	f001 fbdf 	bl	8042d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80415ce:	4a0a      	ldr	r2, [pc, #40]	; (80415f8 <HAL_InitTick+0xf4>)
 80415d0:	687b      	ldr	r3, [r7, #4]
 80415d2:	6013      	str	r3, [r2, #0]
 80415d4:	e002      	b.n	80415dc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80415d6:	2301      	movs	r3, #1
 80415d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80415dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80415e0:	4618      	mov	r0, r3
 80415e2:	3738      	adds	r7, #56	; 0x38
 80415e4:	46bd      	mov	sp, r7
 80415e6:	bd80      	pop	{r7, pc}
 80415e8:	40023800 	.word	0x40023800
 80415ec:	431bde83 	.word	0x431bde83
 80415f0:	200003c0 	.word	0x200003c0
 80415f4:	40001000 	.word	0x40001000
 80415f8:	20000054 	.word	0x20000054

080415fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80415fc:	b480      	push	{r7}
 80415fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8041600:	e7fe      	b.n	8041600 <NMI_Handler+0x4>

08041602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8041602:	b480      	push	{r7}
 8041604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8041606:	e7fe      	b.n	8041606 <HardFault_Handler+0x4>

08041608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8041608:	b480      	push	{r7}
 804160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 804160c:	e7fe      	b.n	804160c <MemManage_Handler+0x4>

0804160e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 804160e:	b480      	push	{r7}
 8041610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8041612:	e7fe      	b.n	8041612 <BusFault_Handler+0x4>

08041614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8041614:	b480      	push	{r7}
 8041616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8041618:	e7fe      	b.n	8041618 <UsageFault_Handler+0x4>

0804161a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 804161a:	b480      	push	{r7}
 804161c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 804161e:	bf00      	nop
 8041620:	46bd      	mov	sp, r7
 8041622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041626:	4770      	bx	lr

08041628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8041628:	b480      	push	{r7}
 804162a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 804162c:	bf00      	nop
 804162e:	46bd      	mov	sp, r7
 8041630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041634:	4770      	bx	lr

08041636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8041636:	b480      	push	{r7}
 8041638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 804163a:	bf00      	nop
 804163c:	46bd      	mov	sp, r7
 804163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041642:	4770      	bx	lr

08041644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8041644:	b480      	push	{r7}
 8041646:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8041648:	bf00      	nop
 804164a:	46bd      	mov	sp, r7
 804164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041650:	4770      	bx	lr
	...

08041654 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8041654:	b580      	push	{r7, lr}
 8041656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8041658:	4802      	ldr	r0, [pc, #8]	; (8041664 <TIM6_DAC_IRQHandler+0x10>)
 804165a:	f006 fb9d 	bl	8047d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 804165e:	bf00      	nop
 8041660:	bd80      	pop	{r7, pc}
 8041662:	bf00      	nop
 8041664:	200003c0 	.word	0x200003c0

08041668 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8041668:	b580      	push	{r7, lr}
 804166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 804166c:	4802      	ldr	r0, [pc, #8]	; (8041678 <OTG_HS_IRQHandler+0x10>)
 804166e:	f002 fe69 	bl	8044344 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8041672:	bf00      	nop
 8041674:	bd80      	pop	{r7, pc}
 8041676:	bf00      	nop
 8041678:	20000a40 	.word	0x20000a40

0804167c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 804167c:	b580      	push	{r7, lr}
 804167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8041680:	4802      	ldr	r0, [pc, #8]	; (804168c <LTDC_IRQHandler+0x10>)
 8041682:	f004 fa8f 	bl	8045ba4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8041686:	bf00      	nop
 8041688:	bd80      	pop	{r7, pc}
 804168a:	bf00      	nop
 804168c:	20000198 	.word	0x20000198

08041690 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8041690:	b580      	push	{r7, lr}
 8041692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8041694:	4802      	ldr	r0, [pc, #8]	; (80416a0 <DMA2D_IRQHandler+0x10>)
 8041696:	f001 feda 	bl	804344e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 804169a:	bf00      	nop
 804169c:	bd80      	pop	{r7, pc}
 804169e:	bf00      	nop
 80416a0:	20000104 	.word	0x20000104

080416a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80416a4:	b580      	push	{r7, lr}
 80416a6:	b086      	sub	sp, #24
 80416a8:	af00      	add	r7, sp, #0
 80416aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80416ac:	4a14      	ldr	r2, [pc, #80]	; (8041700 <_sbrk+0x5c>)
 80416ae:	4b15      	ldr	r3, [pc, #84]	; (8041704 <_sbrk+0x60>)
 80416b0:	1ad3      	subs	r3, r2, r3
 80416b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80416b4:	697b      	ldr	r3, [r7, #20]
 80416b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80416b8:	4b13      	ldr	r3, [pc, #76]	; (8041708 <_sbrk+0x64>)
 80416ba:	681b      	ldr	r3, [r3, #0]
 80416bc:	2b00      	cmp	r3, #0
 80416be:	d102      	bne.n	80416c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80416c0:	4b11      	ldr	r3, [pc, #68]	; (8041708 <_sbrk+0x64>)
 80416c2:	4a12      	ldr	r2, [pc, #72]	; (804170c <_sbrk+0x68>)
 80416c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80416c6:	4b10      	ldr	r3, [pc, #64]	; (8041708 <_sbrk+0x64>)
 80416c8:	681a      	ldr	r2, [r3, #0]
 80416ca:	687b      	ldr	r3, [r7, #4]
 80416cc:	4413      	add	r3, r2
 80416ce:	693a      	ldr	r2, [r7, #16]
 80416d0:	429a      	cmp	r2, r3
 80416d2:	d207      	bcs.n	80416e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80416d4:	f00a fde0 	bl	804c298 <__errno>
 80416d8:	4603      	mov	r3, r0
 80416da:	220c      	movs	r2, #12
 80416dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80416de:	f04f 33ff 	mov.w	r3, #4294967295
 80416e2:	e009      	b.n	80416f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80416e4:	4b08      	ldr	r3, [pc, #32]	; (8041708 <_sbrk+0x64>)
 80416e6:	681b      	ldr	r3, [r3, #0]
 80416e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80416ea:	4b07      	ldr	r3, [pc, #28]	; (8041708 <_sbrk+0x64>)
 80416ec:	681a      	ldr	r2, [r3, #0]
 80416ee:	687b      	ldr	r3, [r7, #4]
 80416f0:	4413      	add	r3, r2
 80416f2:	4a05      	ldr	r2, [pc, #20]	; (8041708 <_sbrk+0x64>)
 80416f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80416f6:	68fb      	ldr	r3, [r7, #12]
}
 80416f8:	4618      	mov	r0, r3
 80416fa:	3718      	adds	r7, #24
 80416fc:	46bd      	mov	sp, r7
 80416fe:	bd80      	pop	{r7, pc}
 8041700:	20030000 	.word	0x20030000
 8041704:	00000400 	.word	0x00000400
 8041708:	20000408 	.word	0x20000408
 804170c:	20000d58 	.word	0x20000d58

08041710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8041710:	b480      	push	{r7}
 8041712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8041714:	4b07      	ldr	r3, [pc, #28]	; (8041734 <SystemInit+0x24>)
 8041716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804171a:	4a06      	ldr	r2, [pc, #24]	; (8041734 <SystemInit+0x24>)
 804171c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8041720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8041724:	4b03      	ldr	r3, [pc, #12]	; (8041734 <SystemInit+0x24>)
 8041726:	4a04      	ldr	r2, [pc, #16]	; (8041738 <SystemInit+0x28>)
 8041728:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 804172a:	bf00      	nop
 804172c:	46bd      	mov	sp, r7
 804172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041732:	4770      	bx	lr
 8041734:	e000ed00 	.word	0xe000ed00
 8041738:	08040000 	.word	0x08040000

0804173c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 804173c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8041774 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8041740:	480d      	ldr	r0, [pc, #52]	; (8041778 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8041742:	490e      	ldr	r1, [pc, #56]	; (804177c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8041744:	4a0e      	ldr	r2, [pc, #56]	; (8041780 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8041746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8041748:	e002      	b.n	8041750 <LoopCopyDataInit>

0804174a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 804174a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 804174c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 804174e:	3304      	adds	r3, #4

08041750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8041750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8041752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8041754:	d3f9      	bcc.n	804174a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8041756:	4a0b      	ldr	r2, [pc, #44]	; (8041784 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8041758:	4c0b      	ldr	r4, [pc, #44]	; (8041788 <LoopFillZerobss+0x26>)
  movs r3, #0
 804175a:	2300      	movs	r3, #0
  b LoopFillZerobss
 804175c:	e001      	b.n	8041762 <LoopFillZerobss>

0804175e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 804175e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8041760:	3204      	adds	r2, #4

08041762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8041762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8041764:	d3fb      	bcc.n	804175e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8041766:	f7ff ffd3 	bl	8041710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 804176a:	f00a fd9b 	bl	804c2a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 804176e:	f7fe ff11 	bl	8040594 <main>
  bx  lr    
 8041772:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8041774:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8041778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 804177c:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8041780:	0804ebe4 	.word	0x0804ebe4
  ldr r2, =_sbss
 8041784:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8041788:	20000d54 	.word	0x20000d54

0804178c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 804178c:	e7fe      	b.n	804178c <ADC_IRQHandler>

0804178e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 804178e:	b580      	push	{r7, lr}
 8041790:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8041792:	f000 fa5d 	bl	8041c50 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8041796:	20ca      	movs	r0, #202	; 0xca
 8041798:	f000 f95d 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 804179c:	20c3      	movs	r0, #195	; 0xc3
 804179e:	f000 f967 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80417a2:	2008      	movs	r0, #8
 80417a4:	f000 f964 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80417a8:	2050      	movs	r0, #80	; 0x50
 80417aa:	f000 f961 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80417ae:	20cf      	movs	r0, #207	; 0xcf
 80417b0:	f000 f951 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80417b4:	2000      	movs	r0, #0
 80417b6:	f000 f95b 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80417ba:	20c1      	movs	r0, #193	; 0xc1
 80417bc:	f000 f958 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80417c0:	2030      	movs	r0, #48	; 0x30
 80417c2:	f000 f955 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80417c6:	20ed      	movs	r0, #237	; 0xed
 80417c8:	f000 f945 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80417cc:	2064      	movs	r0, #100	; 0x64
 80417ce:	f000 f94f 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80417d2:	2003      	movs	r0, #3
 80417d4:	f000 f94c 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80417d8:	2012      	movs	r0, #18
 80417da:	f000 f949 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80417de:	2081      	movs	r0, #129	; 0x81
 80417e0:	f000 f946 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80417e4:	20e8      	movs	r0, #232	; 0xe8
 80417e6:	f000 f936 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80417ea:	2085      	movs	r0, #133	; 0x85
 80417ec:	f000 f940 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80417f0:	2000      	movs	r0, #0
 80417f2:	f000 f93d 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80417f6:	2078      	movs	r0, #120	; 0x78
 80417f8:	f000 f93a 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80417fc:	20cb      	movs	r0, #203	; 0xcb
 80417fe:	f000 f92a 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8041802:	2039      	movs	r0, #57	; 0x39
 8041804:	f000 f934 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8041808:	202c      	movs	r0, #44	; 0x2c
 804180a:	f000 f931 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 804180e:	2000      	movs	r0, #0
 8041810:	f000 f92e 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8041814:	2034      	movs	r0, #52	; 0x34
 8041816:	f000 f92b 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 804181a:	2002      	movs	r0, #2
 804181c:	f000 f928 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8041820:	20f7      	movs	r0, #247	; 0xf7
 8041822:	f000 f918 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8041826:	2020      	movs	r0, #32
 8041828:	f000 f922 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 804182c:	20ea      	movs	r0, #234	; 0xea
 804182e:	f000 f912 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041832:	2000      	movs	r0, #0
 8041834:	f000 f91c 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041838:	2000      	movs	r0, #0
 804183a:	f000 f919 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 804183e:	20b1      	movs	r0, #177	; 0xb1
 8041840:	f000 f909 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041844:	2000      	movs	r0, #0
 8041846:	f000 f913 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 804184a:	201b      	movs	r0, #27
 804184c:	f000 f910 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8041850:	20b6      	movs	r0, #182	; 0xb6
 8041852:	f000 f900 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8041856:	200a      	movs	r0, #10
 8041858:	f000 f90a 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 804185c:	20a2      	movs	r0, #162	; 0xa2
 804185e:	f000 f907 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8041862:	20c0      	movs	r0, #192	; 0xc0
 8041864:	f000 f8f7 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8041868:	2010      	movs	r0, #16
 804186a:	f000 f901 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 804186e:	20c1      	movs	r0, #193	; 0xc1
 8041870:	f000 f8f1 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8041874:	2010      	movs	r0, #16
 8041876:	f000 f8fb 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 804187a:	20c5      	movs	r0, #197	; 0xc5
 804187c:	f000 f8eb 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8041880:	2045      	movs	r0, #69	; 0x45
 8041882:	f000 f8f5 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8041886:	2015      	movs	r0, #21
 8041888:	f000 f8f2 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 804188c:	20c7      	movs	r0, #199	; 0xc7
 804188e:	f000 f8e2 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8041892:	2090      	movs	r0, #144	; 0x90
 8041894:	f000 f8ec 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8041898:	2036      	movs	r0, #54	; 0x36
 804189a:	f000 f8dc 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 804189e:	20c8      	movs	r0, #200	; 0xc8
 80418a0:	f000 f8e6 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80418a4:	20f2      	movs	r0, #242	; 0xf2
 80418a6:	f000 f8d6 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80418aa:	2000      	movs	r0, #0
 80418ac:	f000 f8e0 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80418b0:	20b0      	movs	r0, #176	; 0xb0
 80418b2:	f000 f8d0 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80418b6:	20c2      	movs	r0, #194	; 0xc2
 80418b8:	f000 f8da 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80418bc:	20b6      	movs	r0, #182	; 0xb6
 80418be:	f000 f8ca 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80418c2:	200a      	movs	r0, #10
 80418c4:	f000 f8d4 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80418c8:	20a7      	movs	r0, #167	; 0xa7
 80418ca:	f000 f8d1 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80418ce:	2027      	movs	r0, #39	; 0x27
 80418d0:	f000 f8ce 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80418d4:	2004      	movs	r0, #4
 80418d6:	f000 f8cb 	bl	8041a70 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80418da:	202a      	movs	r0, #42	; 0x2a
 80418dc:	f000 f8bb 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80418e0:	2000      	movs	r0, #0
 80418e2:	f000 f8c5 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80418e6:	2000      	movs	r0, #0
 80418e8:	f000 f8c2 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80418ec:	2000      	movs	r0, #0
 80418ee:	f000 f8bf 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80418f2:	20ef      	movs	r0, #239	; 0xef
 80418f4:	f000 f8bc 	bl	8041a70 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80418f8:	202b      	movs	r0, #43	; 0x2b
 80418fa:	f000 f8ac 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80418fe:	2000      	movs	r0, #0
 8041900:	f000 f8b6 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041904:	2000      	movs	r0, #0
 8041906:	f000 f8b3 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 804190a:	2001      	movs	r0, #1
 804190c:	f000 f8b0 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8041910:	203f      	movs	r0, #63	; 0x3f
 8041912:	f000 f8ad 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8041916:	20f6      	movs	r0, #246	; 0xf6
 8041918:	f000 f89d 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 804191c:	2001      	movs	r0, #1
 804191e:	f000 f8a7 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041922:	2000      	movs	r0, #0
 8041924:	f000 f8a4 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8041928:	2006      	movs	r0, #6
 804192a:	f000 f8a1 	bl	8041a70 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 804192e:	202c      	movs	r0, #44	; 0x2c
 8041930:	f000 f891 	bl	8041a56 <ili9341_WriteReg>
  LCD_Delay(200);
 8041934:	20c8      	movs	r0, #200	; 0xc8
 8041936:	f000 fa79 	bl	8041e2c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 804193a:	2026      	movs	r0, #38	; 0x26
 804193c:	f000 f88b 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8041940:	2001      	movs	r0, #1
 8041942:	f000 f895 	bl	8041a70 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8041946:	20e0      	movs	r0, #224	; 0xe0
 8041948:	f000 f885 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 804194c:	200f      	movs	r0, #15
 804194e:	f000 f88f 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8041952:	2029      	movs	r0, #41	; 0x29
 8041954:	f000 f88c 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8041958:	2024      	movs	r0, #36	; 0x24
 804195a:	f000 f889 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 804195e:	200c      	movs	r0, #12
 8041960:	f000 f886 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8041964:	200e      	movs	r0, #14
 8041966:	f000 f883 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 804196a:	2009      	movs	r0, #9
 804196c:	f000 f880 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8041970:	204e      	movs	r0, #78	; 0x4e
 8041972:	f000 f87d 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8041976:	2078      	movs	r0, #120	; 0x78
 8041978:	f000 f87a 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 804197c:	203c      	movs	r0, #60	; 0x3c
 804197e:	f000 f877 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8041982:	2009      	movs	r0, #9
 8041984:	f000 f874 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8041988:	2013      	movs	r0, #19
 804198a:	f000 f871 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 804198e:	2005      	movs	r0, #5
 8041990:	f000 f86e 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8041994:	2017      	movs	r0, #23
 8041996:	f000 f86b 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 804199a:	2011      	movs	r0, #17
 804199c:	f000 f868 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80419a0:	2000      	movs	r0, #0
 80419a2:	f000 f865 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80419a6:	20e1      	movs	r0, #225	; 0xe1
 80419a8:	f000 f855 	bl	8041a56 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80419ac:	2000      	movs	r0, #0
 80419ae:	f000 f85f 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80419b2:	2016      	movs	r0, #22
 80419b4:	f000 f85c 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80419b8:	201b      	movs	r0, #27
 80419ba:	f000 f859 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80419be:	2004      	movs	r0, #4
 80419c0:	f000 f856 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80419c4:	2011      	movs	r0, #17
 80419c6:	f000 f853 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80419ca:	2007      	movs	r0, #7
 80419cc:	f000 f850 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80419d0:	2031      	movs	r0, #49	; 0x31
 80419d2:	f000 f84d 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80419d6:	2033      	movs	r0, #51	; 0x33
 80419d8:	f000 f84a 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80419dc:	2042      	movs	r0, #66	; 0x42
 80419de:	f000 f847 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80419e2:	2005      	movs	r0, #5
 80419e4:	f000 f844 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80419e8:	200c      	movs	r0, #12
 80419ea:	f000 f841 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80419ee:	200a      	movs	r0, #10
 80419f0:	f000 f83e 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80419f4:	2028      	movs	r0, #40	; 0x28
 80419f6:	f000 f83b 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80419fa:	202f      	movs	r0, #47	; 0x2f
 80419fc:	f000 f838 	bl	8041a70 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8041a00:	200f      	movs	r0, #15
 8041a02:	f000 f835 	bl	8041a70 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8041a06:	2011      	movs	r0, #17
 8041a08:	f000 f825 	bl	8041a56 <ili9341_WriteReg>
  LCD_Delay(200);
 8041a0c:	20c8      	movs	r0, #200	; 0xc8
 8041a0e:	f000 fa0d 	bl	8041e2c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8041a12:	2029      	movs	r0, #41	; 0x29
 8041a14:	f000 f81f 	bl	8041a56 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8041a18:	202c      	movs	r0, #44	; 0x2c
 8041a1a:	f000 f81c 	bl	8041a56 <ili9341_WriteReg>
}
 8041a1e:	bf00      	nop
 8041a20:	bd80      	pop	{r7, pc}

08041a22 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8041a22:	b580      	push	{r7, lr}
 8041a24:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8041a26:	f000 f913 	bl	8041c50 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8041a2a:	2103      	movs	r1, #3
 8041a2c:	20d3      	movs	r0, #211	; 0xd3
 8041a2e:	f000 f82c 	bl	8041a8a <ili9341_ReadData>
 8041a32:	4603      	mov	r3, r0
 8041a34:	b29b      	uxth	r3, r3
}
 8041a36:	4618      	mov	r0, r3
 8041a38:	bd80      	pop	{r7, pc}

08041a3a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8041a3a:	b580      	push	{r7, lr}
 8041a3c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8041a3e:	2029      	movs	r0, #41	; 0x29
 8041a40:	f000 f809 	bl	8041a56 <ili9341_WriteReg>
}
 8041a44:	bf00      	nop
 8041a46:	bd80      	pop	{r7, pc}

08041a48 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8041a48:	b580      	push	{r7, lr}
 8041a4a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8041a4c:	2028      	movs	r0, #40	; 0x28
 8041a4e:	f000 f802 	bl	8041a56 <ili9341_WriteReg>
}
 8041a52:	bf00      	nop
 8041a54:	bd80      	pop	{r7, pc}

08041a56 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8041a56:	b580      	push	{r7, lr}
 8041a58:	b082      	sub	sp, #8
 8041a5a:	af00      	add	r7, sp, #0
 8041a5c:	4603      	mov	r3, r0
 8041a5e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8041a60:	79fb      	ldrb	r3, [r7, #7]
 8041a62:	4618      	mov	r0, r3
 8041a64:	f000 f98e 	bl	8041d84 <LCD_IO_WriteReg>
}
 8041a68:	bf00      	nop
 8041a6a:	3708      	adds	r7, #8
 8041a6c:	46bd      	mov	sp, r7
 8041a6e:	bd80      	pop	{r7, pc}

08041a70 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8041a70:	b580      	push	{r7, lr}
 8041a72:	b082      	sub	sp, #8
 8041a74:	af00      	add	r7, sp, #0
 8041a76:	4603      	mov	r3, r0
 8041a78:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8041a7a:	88fb      	ldrh	r3, [r7, #6]
 8041a7c:	4618      	mov	r0, r3
 8041a7e:	f000 f95f 	bl	8041d40 <LCD_IO_WriteData>
}
 8041a82:	bf00      	nop
 8041a84:	3708      	adds	r7, #8
 8041a86:	46bd      	mov	sp, r7
 8041a88:	bd80      	pop	{r7, pc}

08041a8a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8041a8a:	b580      	push	{r7, lr}
 8041a8c:	b082      	sub	sp, #8
 8041a8e:	af00      	add	r7, sp, #0
 8041a90:	4603      	mov	r3, r0
 8041a92:	460a      	mov	r2, r1
 8041a94:	80fb      	strh	r3, [r7, #6]
 8041a96:	4613      	mov	r3, r2
 8041a98:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8041a9a:	797a      	ldrb	r2, [r7, #5]
 8041a9c:	88fb      	ldrh	r3, [r7, #6]
 8041a9e:	4611      	mov	r1, r2
 8041aa0:	4618      	mov	r0, r3
 8041aa2:	f000 f991 	bl	8041dc8 <LCD_IO_ReadData>
 8041aa6:	4603      	mov	r3, r0
}
 8041aa8:	4618      	mov	r0, r3
 8041aaa:	3708      	adds	r7, #8
 8041aac:	46bd      	mov	sp, r7
 8041aae:	bd80      	pop	{r7, pc}

08041ab0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8041ab0:	b480      	push	{r7}
 8041ab2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8041ab4:	23f0      	movs	r3, #240	; 0xf0
}
 8041ab6:	4618      	mov	r0, r3
 8041ab8:	46bd      	mov	sp, r7
 8041aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041abe:	4770      	bx	lr

08041ac0 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8041ac0:	b480      	push	{r7}
 8041ac2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8041ac4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8041ac8:	4618      	mov	r0, r3
 8041aca:	46bd      	mov	sp, r7
 8041acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ad0:	4770      	bx	lr
	...

08041ad4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8041ad4:	b580      	push	{r7, lr}
 8041ad6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8041ad8:	4819      	ldr	r0, [pc, #100]	; (8041b40 <SPIx_Init+0x6c>)
 8041ada:	f005 ff5e 	bl	804799a <HAL_SPI_GetState>
 8041ade:	4603      	mov	r3, r0
 8041ae0:	2b00      	cmp	r3, #0
 8041ae2:	d12b      	bne.n	8041b3c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8041ae4:	4b16      	ldr	r3, [pc, #88]	; (8041b40 <SPIx_Init+0x6c>)
 8041ae6:	4a17      	ldr	r2, [pc, #92]	; (8041b44 <SPIx_Init+0x70>)
 8041ae8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8041aea:	4b15      	ldr	r3, [pc, #84]	; (8041b40 <SPIx_Init+0x6c>)
 8041aec:	2218      	movs	r2, #24
 8041aee:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8041af0:	4b13      	ldr	r3, [pc, #76]	; (8041b40 <SPIx_Init+0x6c>)
 8041af2:	2200      	movs	r2, #0
 8041af4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8041af6:	4b12      	ldr	r3, [pc, #72]	; (8041b40 <SPIx_Init+0x6c>)
 8041af8:	2200      	movs	r2, #0
 8041afa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8041afc:	4b10      	ldr	r3, [pc, #64]	; (8041b40 <SPIx_Init+0x6c>)
 8041afe:	2200      	movs	r2, #0
 8041b00:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8041b02:	4b0f      	ldr	r3, [pc, #60]	; (8041b40 <SPIx_Init+0x6c>)
 8041b04:	2200      	movs	r2, #0
 8041b06:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8041b08:	4b0d      	ldr	r3, [pc, #52]	; (8041b40 <SPIx_Init+0x6c>)
 8041b0a:	2207      	movs	r2, #7
 8041b0c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8041b0e:	4b0c      	ldr	r3, [pc, #48]	; (8041b40 <SPIx_Init+0x6c>)
 8041b10:	2200      	movs	r2, #0
 8041b12:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8041b14:	4b0a      	ldr	r3, [pc, #40]	; (8041b40 <SPIx_Init+0x6c>)
 8041b16:	2200      	movs	r2, #0
 8041b18:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8041b1a:	4b09      	ldr	r3, [pc, #36]	; (8041b40 <SPIx_Init+0x6c>)
 8041b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8041b20:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8041b22:	4b07      	ldr	r3, [pc, #28]	; (8041b40 <SPIx_Init+0x6c>)
 8041b24:	2200      	movs	r2, #0
 8041b26:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8041b28:	4b05      	ldr	r3, [pc, #20]	; (8041b40 <SPIx_Init+0x6c>)
 8041b2a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8041b2e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8041b30:	4803      	ldr	r0, [pc, #12]	; (8041b40 <SPIx_Init+0x6c>)
 8041b32:	f000 f853 	bl	8041bdc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8041b36:	4802      	ldr	r0, [pc, #8]	; (8041b40 <SPIx_Init+0x6c>)
 8041b38:	f005 fa8f 	bl	804705a <HAL_SPI_Init>
  } 
}
 8041b3c:	bf00      	nop
 8041b3e:	bd80      	pop	{r7, pc}
 8041b40:	2000040c 	.word	0x2000040c
 8041b44:	40015000 	.word	0x40015000

08041b48 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8041b48:	b580      	push	{r7, lr}
 8041b4a:	b084      	sub	sp, #16
 8041b4c:	af00      	add	r7, sp, #0
 8041b4e:	4603      	mov	r3, r0
 8041b50:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8041b52:	2300      	movs	r3, #0
 8041b54:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8041b56:	79fb      	ldrb	r3, [r7, #7]
 8041b58:	b29a      	uxth	r2, r3
 8041b5a:	4b09      	ldr	r3, [pc, #36]	; (8041b80 <SPIx_Read+0x38>)
 8041b5c:	681b      	ldr	r3, [r3, #0]
 8041b5e:	f107 0108 	add.w	r1, r7, #8
 8041b62:	4808      	ldr	r0, [pc, #32]	; (8041b84 <SPIx_Read+0x3c>)
 8041b64:	f005 fc66 	bl	8047434 <HAL_SPI_Receive>
 8041b68:	4603      	mov	r3, r0
 8041b6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8041b6c:	7bfb      	ldrb	r3, [r7, #15]
 8041b6e:	2b00      	cmp	r3, #0
 8041b70:	d001      	beq.n	8041b76 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8041b72:	f000 f827 	bl	8041bc4 <SPIx_Error>
  }
  
  return readvalue;
 8041b76:	68bb      	ldr	r3, [r7, #8]
}
 8041b78:	4618      	mov	r0, r3
 8041b7a:	3710      	adds	r7, #16
 8041b7c:	46bd      	mov	sp, r7
 8041b7e:	bd80      	pop	{r7, pc}
 8041b80:	2000003c 	.word	0x2000003c
 8041b84:	2000040c 	.word	0x2000040c

08041b88 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8041b88:	b580      	push	{r7, lr}
 8041b8a:	b084      	sub	sp, #16
 8041b8c:	af00      	add	r7, sp, #0
 8041b8e:	4603      	mov	r3, r0
 8041b90:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8041b92:	2300      	movs	r3, #0
 8041b94:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8041b96:	4b09      	ldr	r3, [pc, #36]	; (8041bbc <SPIx_Write+0x34>)
 8041b98:	681b      	ldr	r3, [r3, #0]
 8041b9a:	1db9      	adds	r1, r7, #6
 8041b9c:	2201      	movs	r2, #1
 8041b9e:	4808      	ldr	r0, [pc, #32]	; (8041bc0 <SPIx_Write+0x38>)
 8041ba0:	f005 fb0c 	bl	80471bc <HAL_SPI_Transmit>
 8041ba4:	4603      	mov	r3, r0
 8041ba6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8041ba8:	7bfb      	ldrb	r3, [r7, #15]
 8041baa:	2b00      	cmp	r3, #0
 8041bac:	d001      	beq.n	8041bb2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8041bae:	f000 f809 	bl	8041bc4 <SPIx_Error>
  }
}
 8041bb2:	bf00      	nop
 8041bb4:	3710      	adds	r7, #16
 8041bb6:	46bd      	mov	sp, r7
 8041bb8:	bd80      	pop	{r7, pc}
 8041bba:	bf00      	nop
 8041bbc:	2000003c 	.word	0x2000003c
 8041bc0:	2000040c 	.word	0x2000040c

08041bc4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8041bc4:	b580      	push	{r7, lr}
 8041bc6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8041bc8:	4803      	ldr	r0, [pc, #12]	; (8041bd8 <SPIx_Error+0x14>)
 8041bca:	f005 facf 	bl	804716c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8041bce:	f7ff ff81 	bl	8041ad4 <SPIx_Init>
}
 8041bd2:	bf00      	nop
 8041bd4:	bd80      	pop	{r7, pc}
 8041bd6:	bf00      	nop
 8041bd8:	2000040c 	.word	0x2000040c

08041bdc <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8041bdc:	b580      	push	{r7, lr}
 8041bde:	b08a      	sub	sp, #40	; 0x28
 8041be0:	af00      	add	r7, sp, #0
 8041be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8041be4:	2300      	movs	r3, #0
 8041be6:	613b      	str	r3, [r7, #16]
 8041be8:	4b17      	ldr	r3, [pc, #92]	; (8041c48 <SPIx_MspInit+0x6c>)
 8041bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041bec:	4a16      	ldr	r2, [pc, #88]	; (8041c48 <SPIx_MspInit+0x6c>)
 8041bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041bf2:	6453      	str	r3, [r2, #68]	; 0x44
 8041bf4:	4b14      	ldr	r3, [pc, #80]	; (8041c48 <SPIx_MspInit+0x6c>)
 8041bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041bfc:	613b      	str	r3, [r7, #16]
 8041bfe:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8041c00:	2300      	movs	r3, #0
 8041c02:	60fb      	str	r3, [r7, #12]
 8041c04:	4b10      	ldr	r3, [pc, #64]	; (8041c48 <SPIx_MspInit+0x6c>)
 8041c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041c08:	4a0f      	ldr	r2, [pc, #60]	; (8041c48 <SPIx_MspInit+0x6c>)
 8041c0a:	f043 0320 	orr.w	r3, r3, #32
 8041c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8041c10:	4b0d      	ldr	r3, [pc, #52]	; (8041c48 <SPIx_MspInit+0x6c>)
 8041c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041c14:	f003 0320 	and.w	r3, r3, #32
 8041c18:	60fb      	str	r3, [r7, #12]
 8041c1a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8041c1c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8041c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8041c22:	2302      	movs	r3, #2
 8041c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8041c26:	2302      	movs	r3, #2
 8041c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8041c2a:	2301      	movs	r3, #1
 8041c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8041c2e:	2305      	movs	r3, #5
 8041c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8041c32:	f107 0314 	add.w	r3, r7, #20
 8041c36:	4619      	mov	r1, r3
 8041c38:	4804      	ldr	r0, [pc, #16]	; (8041c4c <SPIx_MspInit+0x70>)
 8041c3a:	f001 fe47 	bl	80438cc <HAL_GPIO_Init>
}
 8041c3e:	bf00      	nop
 8041c40:	3728      	adds	r7, #40	; 0x28
 8041c42:	46bd      	mov	sp, r7
 8041c44:	bd80      	pop	{r7, pc}
 8041c46:	bf00      	nop
 8041c48:	40023800 	.word	0x40023800
 8041c4c:	40021400 	.word	0x40021400

08041c50 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8041c50:	b580      	push	{r7, lr}
 8041c52:	b088      	sub	sp, #32
 8041c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8041c56:	4b36      	ldr	r3, [pc, #216]	; (8041d30 <LCD_IO_Init+0xe0>)
 8041c58:	781b      	ldrb	r3, [r3, #0]
 8041c5a:	2b00      	cmp	r3, #0
 8041c5c:	d164      	bne.n	8041d28 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8041c5e:	4b34      	ldr	r3, [pc, #208]	; (8041d30 <LCD_IO_Init+0xe0>)
 8041c60:	2201      	movs	r2, #1
 8041c62:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8041c64:	2300      	movs	r3, #0
 8041c66:	60bb      	str	r3, [r7, #8]
 8041c68:	4b32      	ldr	r3, [pc, #200]	; (8041d34 <LCD_IO_Init+0xe4>)
 8041c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041c6c:	4a31      	ldr	r2, [pc, #196]	; (8041d34 <LCD_IO_Init+0xe4>)
 8041c6e:	f043 0308 	orr.w	r3, r3, #8
 8041c72:	6313      	str	r3, [r2, #48]	; 0x30
 8041c74:	4b2f      	ldr	r3, [pc, #188]	; (8041d34 <LCD_IO_Init+0xe4>)
 8041c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041c78:	f003 0308 	and.w	r3, r3, #8
 8041c7c:	60bb      	str	r3, [r7, #8]
 8041c7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8041c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8041c84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8041c86:	2301      	movs	r3, #1
 8041c88:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8041c8a:	2300      	movs	r3, #0
 8041c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8041c8e:	2302      	movs	r3, #2
 8041c90:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8041c92:	f107 030c 	add.w	r3, r7, #12
 8041c96:	4619      	mov	r1, r3
 8041c98:	4827      	ldr	r0, [pc, #156]	; (8041d38 <LCD_IO_Init+0xe8>)
 8041c9a:	f001 fe17 	bl	80438cc <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8041c9e:	2300      	movs	r3, #0
 8041ca0:	607b      	str	r3, [r7, #4]
 8041ca2:	4b24      	ldr	r3, [pc, #144]	; (8041d34 <LCD_IO_Init+0xe4>)
 8041ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041ca6:	4a23      	ldr	r2, [pc, #140]	; (8041d34 <LCD_IO_Init+0xe4>)
 8041ca8:	f043 0308 	orr.w	r3, r3, #8
 8041cac:	6313      	str	r3, [r2, #48]	; 0x30
 8041cae:	4b21      	ldr	r3, [pc, #132]	; (8041d34 <LCD_IO_Init+0xe4>)
 8041cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041cb2:	f003 0308 	and.w	r3, r3, #8
 8041cb6:	607b      	str	r3, [r7, #4]
 8041cb8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8041cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8041cbe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8041cc0:	2301      	movs	r3, #1
 8041cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8041cc4:	2300      	movs	r3, #0
 8041cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8041cc8:	2302      	movs	r3, #2
 8041cca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8041ccc:	f107 030c 	add.w	r3, r7, #12
 8041cd0:	4619      	mov	r1, r3
 8041cd2:	4819      	ldr	r0, [pc, #100]	; (8041d38 <LCD_IO_Init+0xe8>)
 8041cd4:	f001 fdfa 	bl	80438cc <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8041cd8:	2300      	movs	r3, #0
 8041cda:	603b      	str	r3, [r7, #0]
 8041cdc:	4b15      	ldr	r3, [pc, #84]	; (8041d34 <LCD_IO_Init+0xe4>)
 8041cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041ce0:	4a14      	ldr	r2, [pc, #80]	; (8041d34 <LCD_IO_Init+0xe4>)
 8041ce2:	f043 0304 	orr.w	r3, r3, #4
 8041ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8041ce8:	4b12      	ldr	r3, [pc, #72]	; (8041d34 <LCD_IO_Init+0xe4>)
 8041cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041cec:	f003 0304 	and.w	r3, r3, #4
 8041cf0:	603b      	str	r3, [r7, #0]
 8041cf2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8041cf4:	2304      	movs	r3, #4
 8041cf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8041cf8:	2301      	movs	r3, #1
 8041cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8041cfc:	2300      	movs	r3, #0
 8041cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8041d00:	2302      	movs	r3, #2
 8041d02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8041d04:	f107 030c 	add.w	r3, r7, #12
 8041d08:	4619      	mov	r1, r3
 8041d0a:	480c      	ldr	r0, [pc, #48]	; (8041d3c <LCD_IO_Init+0xec>)
 8041d0c:	f001 fdde 	bl	80438cc <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8041d10:	2200      	movs	r2, #0
 8041d12:	2104      	movs	r1, #4
 8041d14:	4809      	ldr	r0, [pc, #36]	; (8041d3c <LCD_IO_Init+0xec>)
 8041d16:	f002 f891 	bl	8043e3c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8041d1a:	2201      	movs	r2, #1
 8041d1c:	2104      	movs	r1, #4
 8041d1e:	4807      	ldr	r0, [pc, #28]	; (8041d3c <LCD_IO_Init+0xec>)
 8041d20:	f002 f88c 	bl	8043e3c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8041d24:	f7ff fed6 	bl	8041ad4 <SPIx_Init>
  }
}
 8041d28:	bf00      	nop
 8041d2a:	3720      	adds	r7, #32
 8041d2c:	46bd      	mov	sp, r7
 8041d2e:	bd80      	pop	{r7, pc}
 8041d30:	20000464 	.word	0x20000464
 8041d34:	40023800 	.word	0x40023800
 8041d38:	40020c00 	.word	0x40020c00
 8041d3c:	40020800 	.word	0x40020800

08041d40 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8041d40:	b580      	push	{r7, lr}
 8041d42:	b082      	sub	sp, #8
 8041d44:	af00      	add	r7, sp, #0
 8041d46:	4603      	mov	r3, r0
 8041d48:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8041d4a:	2201      	movs	r2, #1
 8041d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8041d50:	480a      	ldr	r0, [pc, #40]	; (8041d7c <LCD_IO_WriteData+0x3c>)
 8041d52:	f002 f873 	bl	8043e3c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8041d56:	2200      	movs	r2, #0
 8041d58:	2104      	movs	r1, #4
 8041d5a:	4809      	ldr	r0, [pc, #36]	; (8041d80 <LCD_IO_WriteData+0x40>)
 8041d5c:	f002 f86e 	bl	8043e3c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8041d60:	88fb      	ldrh	r3, [r7, #6]
 8041d62:	4618      	mov	r0, r3
 8041d64:	f7ff ff10 	bl	8041b88 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8041d68:	2201      	movs	r2, #1
 8041d6a:	2104      	movs	r1, #4
 8041d6c:	4804      	ldr	r0, [pc, #16]	; (8041d80 <LCD_IO_WriteData+0x40>)
 8041d6e:	f002 f865 	bl	8043e3c <HAL_GPIO_WritePin>
}
 8041d72:	bf00      	nop
 8041d74:	3708      	adds	r7, #8
 8041d76:	46bd      	mov	sp, r7
 8041d78:	bd80      	pop	{r7, pc}
 8041d7a:	bf00      	nop
 8041d7c:	40020c00 	.word	0x40020c00
 8041d80:	40020800 	.word	0x40020800

08041d84 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8041d84:	b580      	push	{r7, lr}
 8041d86:	b082      	sub	sp, #8
 8041d88:	af00      	add	r7, sp, #0
 8041d8a:	4603      	mov	r3, r0
 8041d8c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8041d8e:	2200      	movs	r2, #0
 8041d90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8041d94:	480a      	ldr	r0, [pc, #40]	; (8041dc0 <LCD_IO_WriteReg+0x3c>)
 8041d96:	f002 f851 	bl	8043e3c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8041d9a:	2200      	movs	r2, #0
 8041d9c:	2104      	movs	r1, #4
 8041d9e:	4809      	ldr	r0, [pc, #36]	; (8041dc4 <LCD_IO_WriteReg+0x40>)
 8041da0:	f002 f84c 	bl	8043e3c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8041da4:	79fb      	ldrb	r3, [r7, #7]
 8041da6:	b29b      	uxth	r3, r3
 8041da8:	4618      	mov	r0, r3
 8041daa:	f7ff feed 	bl	8041b88 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8041dae:	2201      	movs	r2, #1
 8041db0:	2104      	movs	r1, #4
 8041db2:	4804      	ldr	r0, [pc, #16]	; (8041dc4 <LCD_IO_WriteReg+0x40>)
 8041db4:	f002 f842 	bl	8043e3c <HAL_GPIO_WritePin>
}
 8041db8:	bf00      	nop
 8041dba:	3708      	adds	r7, #8
 8041dbc:	46bd      	mov	sp, r7
 8041dbe:	bd80      	pop	{r7, pc}
 8041dc0:	40020c00 	.word	0x40020c00
 8041dc4:	40020800 	.word	0x40020800

08041dc8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8041dc8:	b580      	push	{r7, lr}
 8041dca:	b084      	sub	sp, #16
 8041dcc:	af00      	add	r7, sp, #0
 8041dce:	4603      	mov	r3, r0
 8041dd0:	460a      	mov	r2, r1
 8041dd2:	80fb      	strh	r3, [r7, #6]
 8041dd4:	4613      	mov	r3, r2
 8041dd6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8041dd8:	2300      	movs	r3, #0
 8041dda:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8041ddc:	2200      	movs	r2, #0
 8041dde:	2104      	movs	r1, #4
 8041de0:	4810      	ldr	r0, [pc, #64]	; (8041e24 <LCD_IO_ReadData+0x5c>)
 8041de2:	f002 f82b 	bl	8043e3c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8041de6:	2200      	movs	r2, #0
 8041de8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8041dec:	480e      	ldr	r0, [pc, #56]	; (8041e28 <LCD_IO_ReadData+0x60>)
 8041dee:	f002 f825 	bl	8043e3c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8041df2:	88fb      	ldrh	r3, [r7, #6]
 8041df4:	4618      	mov	r0, r3
 8041df6:	f7ff fec7 	bl	8041b88 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8041dfa:	797b      	ldrb	r3, [r7, #5]
 8041dfc:	4618      	mov	r0, r3
 8041dfe:	f7ff fea3 	bl	8041b48 <SPIx_Read>
 8041e02:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8041e04:	2201      	movs	r2, #1
 8041e06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8041e0a:	4807      	ldr	r0, [pc, #28]	; (8041e28 <LCD_IO_ReadData+0x60>)
 8041e0c:	f002 f816 	bl	8043e3c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8041e10:	2201      	movs	r2, #1
 8041e12:	2104      	movs	r1, #4
 8041e14:	4803      	ldr	r0, [pc, #12]	; (8041e24 <LCD_IO_ReadData+0x5c>)
 8041e16:	f002 f811 	bl	8043e3c <HAL_GPIO_WritePin>
  
  return readvalue;
 8041e1a:	68fb      	ldr	r3, [r7, #12]
}
 8041e1c:	4618      	mov	r0, r3
 8041e1e:	3710      	adds	r7, #16
 8041e20:	46bd      	mov	sp, r7
 8041e22:	bd80      	pop	{r7, pc}
 8041e24:	40020800 	.word	0x40020800
 8041e28:	40020c00 	.word	0x40020c00

08041e2c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8041e2c:	b580      	push	{r7, lr}
 8041e2e:	b082      	sub	sp, #8
 8041e30:	af00      	add	r7, sp, #0
 8041e32:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8041e34:	6878      	ldr	r0, [r7, #4]
 8041e36:	f000 fecd 	bl	8042bd4 <HAL_Delay>
}
 8041e3a:	bf00      	nop
 8041e3c:	3708      	adds	r7, #8
 8041e3e:	46bd      	mov	sp, r7
 8041e40:	bd80      	pop	{r7, pc}
	...

08041e44 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8041e44:	b580      	push	{r7, lr}
 8041e46:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8041e48:	4b2d      	ldr	r3, [pc, #180]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041e4a:	4a2e      	ldr	r2, [pc, #184]	; (8041f04 <BSP_LCD_Init+0xc0>)
 8041e4c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8041e4e:	4b2c      	ldr	r3, [pc, #176]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041e50:	2209      	movs	r2, #9
 8041e52:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8041e54:	4b2a      	ldr	r3, [pc, #168]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041e56:	2201      	movs	r2, #1
 8041e58:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8041e5a:	4b29      	ldr	r3, [pc, #164]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041e5c:	221d      	movs	r2, #29
 8041e5e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8041e60:	4b27      	ldr	r3, [pc, #156]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041e62:	2203      	movs	r2, #3
 8041e64:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8041e66:	4b26      	ldr	r3, [pc, #152]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041e68:	f240 120d 	movw	r2, #269	; 0x10d
 8041e6c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8041e6e:	4b24      	ldr	r3, [pc, #144]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041e70:	f240 1243 	movw	r2, #323	; 0x143
 8041e74:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8041e76:	4b22      	ldr	r3, [pc, #136]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041e78:	f240 1217 	movw	r2, #279	; 0x117
 8041e7c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8041e7e:	4b20      	ldr	r3, [pc, #128]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041e80:	f240 1247 	movw	r2, #327	; 0x147
 8041e84:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8041e86:	4b1e      	ldr	r3, [pc, #120]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041e88:	2200      	movs	r2, #0
 8041e8a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8041e8e:	4b1c      	ldr	r3, [pc, #112]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041e90:	2200      	movs	r2, #0
 8041e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8041e96:	4b1a      	ldr	r3, [pc, #104]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041e98:	2200      	movs	r2, #0
 8041e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8041e9e:	4b1a      	ldr	r3, [pc, #104]	; (8041f08 <BSP_LCD_Init+0xc4>)
 8041ea0:	2208      	movs	r2, #8
 8041ea2:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8041ea4:	4b18      	ldr	r3, [pc, #96]	; (8041f08 <BSP_LCD_Init+0xc4>)
 8041ea6:	22c0      	movs	r2, #192	; 0xc0
 8041ea8:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8041eaa:	4b17      	ldr	r3, [pc, #92]	; (8041f08 <BSP_LCD_Init+0xc4>)
 8041eac:	2204      	movs	r2, #4
 8041eae:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8041eb0:	4b15      	ldr	r3, [pc, #84]	; (8041f08 <BSP_LCD_Init+0xc4>)
 8041eb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8041eb6:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8041eb8:	4813      	ldr	r0, [pc, #76]	; (8041f08 <BSP_LCD_Init+0xc4>)
 8041eba:	f004 fe7d 	bl	8046bb8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8041ebe:	4b10      	ldr	r3, [pc, #64]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041ec0:	2200      	movs	r2, #0
 8041ec2:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8041ec4:	4b0e      	ldr	r3, [pc, #56]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041ec6:	2200      	movs	r2, #0
 8041ec8:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8041eca:	4b0d      	ldr	r3, [pc, #52]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041ecc:	2200      	movs	r2, #0
 8041ece:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8041ed0:	4b0b      	ldr	r3, [pc, #44]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041ed2:	2200      	movs	r2, #0
 8041ed4:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8041ed6:	f000 fa83 	bl	80423e0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8041eda:	4809      	ldr	r0, [pc, #36]	; (8041f00 <BSP_LCD_Init+0xbc>)
 8041edc:	f003 fd92 	bl	8045a04 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8041ee0:	4b0a      	ldr	r3, [pc, #40]	; (8041f0c <BSP_LCD_Init+0xc8>)
 8041ee2:	4a0b      	ldr	r2, [pc, #44]	; (8041f10 <BSP_LCD_Init+0xcc>)
 8041ee4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8041ee6:	4b09      	ldr	r3, [pc, #36]	; (8041f0c <BSP_LCD_Init+0xc8>)
 8041ee8:	681b      	ldr	r3, [r3, #0]
 8041eea:	681b      	ldr	r3, [r3, #0]
 8041eec:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8041eee:	f000 fc65 	bl	80427bc <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8041ef2:	4808      	ldr	r0, [pc, #32]	; (8041f14 <BSP_LCD_Init+0xd0>)
 8041ef4:	f000 f920 	bl	8042138 <BSP_LCD_SetFont>

  return LCD_OK;
 8041ef8:	2300      	movs	r3, #0
}  
 8041efa:	4618      	mov	r0, r3
 8041efc:	bd80      	pop	{r7, pc}
 8041efe:	bf00      	nop
 8041f00:	20000468 	.word	0x20000468
 8041f04:	40016800 	.word	0x40016800
 8041f08:	20000550 	.word	0x20000550
 8041f0c:	2000059c 	.word	0x2000059c
 8041f10:	20000004 	.word	0x20000004
 8041f14:	20000040 	.word	0x20000040

08041f18 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8041f18:	b580      	push	{r7, lr}
 8041f1a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8041f1c:	4b03      	ldr	r3, [pc, #12]	; (8041f2c <BSP_LCD_GetXSize+0x14>)
 8041f1e:	681b      	ldr	r3, [r3, #0]
 8041f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041f22:	4798      	blx	r3
 8041f24:	4603      	mov	r3, r0
}
 8041f26:	4618      	mov	r0, r3
 8041f28:	bd80      	pop	{r7, pc}
 8041f2a:	bf00      	nop
 8041f2c:	2000059c 	.word	0x2000059c

08041f30 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8041f30:	b580      	push	{r7, lr}
 8041f32:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8041f34:	4b03      	ldr	r3, [pc, #12]	; (8041f44 <BSP_LCD_GetYSize+0x14>)
 8041f36:	681b      	ldr	r3, [r3, #0]
 8041f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041f3a:	4798      	blx	r3
 8041f3c:	4603      	mov	r3, r0
}
 8041f3e:	4618      	mov	r0, r3
 8041f40:	bd80      	pop	{r7, pc}
 8041f42:	bf00      	nop
 8041f44:	2000059c 	.word	0x2000059c

08041f48 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8041f48:	b580      	push	{r7, lr}
 8041f4a:	b090      	sub	sp, #64	; 0x40
 8041f4c:	af00      	add	r7, sp, #0
 8041f4e:	4603      	mov	r3, r0
 8041f50:	6039      	str	r1, [r7, #0]
 8041f52:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8041f54:	2300      	movs	r3, #0
 8041f56:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8041f58:	f7ff ffde 	bl	8041f18 <BSP_LCD_GetXSize>
 8041f5c:	4603      	mov	r3, r0
 8041f5e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8041f60:	2300      	movs	r3, #0
 8041f62:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8041f64:	f7ff ffe4 	bl	8041f30 <BSP_LCD_GetYSize>
 8041f68:	4603      	mov	r3, r0
 8041f6a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8041f6c:	2300      	movs	r3, #0
 8041f6e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8041f70:	683b      	ldr	r3, [r7, #0]
 8041f72:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8041f74:	23ff      	movs	r3, #255	; 0xff
 8041f76:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8041f78:	2300      	movs	r3, #0
 8041f7a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8041f7c:	2300      	movs	r3, #0
 8041f7e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8041f82:	2300      	movs	r3, #0
 8041f84:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8041f88:	2300      	movs	r3, #0
 8041f8a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8041f8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8041f92:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8041f94:	2307      	movs	r3, #7
 8041f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8041f98:	f7ff ffbe 	bl	8041f18 <BSP_LCD_GetXSize>
 8041f9c:	4603      	mov	r3, r0
 8041f9e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8041fa0:	f7ff ffc6 	bl	8041f30 <BSP_LCD_GetYSize>
 8041fa4:	4603      	mov	r3, r0
 8041fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8041fa8:	88fa      	ldrh	r2, [r7, #6]
 8041faa:	f107 030c 	add.w	r3, r7, #12
 8041fae:	4619      	mov	r1, r3
 8041fb0:	4814      	ldr	r0, [pc, #80]	; (8042004 <BSP_LCD_LayerDefaultInit+0xbc>)
 8041fb2:	f003 feb9 	bl	8045d28 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8041fb6:	88fa      	ldrh	r2, [r7, #6]
 8041fb8:	4913      	ldr	r1, [pc, #76]	; (8042008 <BSP_LCD_LayerDefaultInit+0xc0>)
 8041fba:	4613      	mov	r3, r2
 8041fbc:	005b      	lsls	r3, r3, #1
 8041fbe:	4413      	add	r3, r2
 8041fc0:	009b      	lsls	r3, r3, #2
 8041fc2:	440b      	add	r3, r1
 8041fc4:	3304      	adds	r3, #4
 8041fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8041fca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8041fcc:	88fa      	ldrh	r2, [r7, #6]
 8041fce:	490e      	ldr	r1, [pc, #56]	; (8042008 <BSP_LCD_LayerDefaultInit+0xc0>)
 8041fd0:	4613      	mov	r3, r2
 8041fd2:	005b      	lsls	r3, r3, #1
 8041fd4:	4413      	add	r3, r2
 8041fd6:	009b      	lsls	r3, r3, #2
 8041fd8:	440b      	add	r3, r1
 8041fda:	3308      	adds	r3, #8
 8041fdc:	4a0b      	ldr	r2, [pc, #44]	; (804200c <BSP_LCD_LayerDefaultInit+0xc4>)
 8041fde:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8041fe0:	88fa      	ldrh	r2, [r7, #6]
 8041fe2:	4909      	ldr	r1, [pc, #36]	; (8042008 <BSP_LCD_LayerDefaultInit+0xc0>)
 8041fe4:	4613      	mov	r3, r2
 8041fe6:	005b      	lsls	r3, r3, #1
 8041fe8:	4413      	add	r3, r2
 8041fea:	009b      	lsls	r3, r3, #2
 8041fec:	440b      	add	r3, r1
 8041fee:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8041ff2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8041ff4:	4803      	ldr	r0, [pc, #12]	; (8042004 <BSP_LCD_LayerDefaultInit+0xbc>)
 8041ff6:	f003 ff53 	bl	8045ea0 <HAL_LTDC_EnableDither>
}
 8041ffa:	bf00      	nop
 8041ffc:	3740      	adds	r7, #64	; 0x40
 8041ffe:	46bd      	mov	sp, r7
 8042000:	bd80      	pop	{r7, pc}
 8042002:	bf00      	nop
 8042004:	20000468 	.word	0x20000468
 8042008:	20000584 	.word	0x20000584
 804200c:	20000040 	.word	0x20000040

08042010 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8042010:	b480      	push	{r7}
 8042012:	b083      	sub	sp, #12
 8042014:	af00      	add	r7, sp, #0
 8042016:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8042018:	4a04      	ldr	r2, [pc, #16]	; (804202c <BSP_LCD_SelectLayer+0x1c>)
 804201a:	687b      	ldr	r3, [r7, #4]
 804201c:	6013      	str	r3, [r2, #0]
}
 804201e:	bf00      	nop
 8042020:	370c      	adds	r7, #12
 8042022:	46bd      	mov	sp, r7
 8042024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042028:	4770      	bx	lr
 804202a:	bf00      	nop
 804202c:	20000580 	.word	0x20000580

08042030 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8042030:	b480      	push	{r7}
 8042032:	b083      	sub	sp, #12
 8042034:	af00      	add	r7, sp, #0
 8042036:	6078      	str	r0, [r7, #4]
 8042038:	460b      	mov	r3, r1
 804203a:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 804203c:	78fb      	ldrb	r3, [r7, #3]
 804203e:	2b01      	cmp	r3, #1
 8042040:	d112      	bne.n	8042068 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8042042:	4b19      	ldr	r3, [pc, #100]	; (80420a8 <BSP_LCD_SetLayerVisible+0x78>)
 8042044:	681b      	ldr	r3, [r3, #0]
 8042046:	461a      	mov	r2, r3
 8042048:	687b      	ldr	r3, [r7, #4]
 804204a:	01db      	lsls	r3, r3, #7
 804204c:	4413      	add	r3, r2
 804204e:	3384      	adds	r3, #132	; 0x84
 8042050:	681b      	ldr	r3, [r3, #0]
 8042052:	4a15      	ldr	r2, [pc, #84]	; (80420a8 <BSP_LCD_SetLayerVisible+0x78>)
 8042054:	6812      	ldr	r2, [r2, #0]
 8042056:	4611      	mov	r1, r2
 8042058:	687a      	ldr	r2, [r7, #4]
 804205a:	01d2      	lsls	r2, r2, #7
 804205c:	440a      	add	r2, r1
 804205e:	3284      	adds	r2, #132	; 0x84
 8042060:	f043 0301 	orr.w	r3, r3, #1
 8042064:	6013      	str	r3, [r2, #0]
 8042066:	e011      	b.n	804208c <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8042068:	4b0f      	ldr	r3, [pc, #60]	; (80420a8 <BSP_LCD_SetLayerVisible+0x78>)
 804206a:	681b      	ldr	r3, [r3, #0]
 804206c:	461a      	mov	r2, r3
 804206e:	687b      	ldr	r3, [r7, #4]
 8042070:	01db      	lsls	r3, r3, #7
 8042072:	4413      	add	r3, r2
 8042074:	3384      	adds	r3, #132	; 0x84
 8042076:	681b      	ldr	r3, [r3, #0]
 8042078:	4a0b      	ldr	r2, [pc, #44]	; (80420a8 <BSP_LCD_SetLayerVisible+0x78>)
 804207a:	6812      	ldr	r2, [r2, #0]
 804207c:	4611      	mov	r1, r2
 804207e:	687a      	ldr	r2, [r7, #4]
 8042080:	01d2      	lsls	r2, r2, #7
 8042082:	440a      	add	r2, r1
 8042084:	3284      	adds	r2, #132	; 0x84
 8042086:	f023 0301 	bic.w	r3, r3, #1
 804208a:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 804208c:	4b06      	ldr	r3, [pc, #24]	; (80420a8 <BSP_LCD_SetLayerVisible+0x78>)
 804208e:	681b      	ldr	r3, [r3, #0]
 8042090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8042092:	4b05      	ldr	r3, [pc, #20]	; (80420a8 <BSP_LCD_SetLayerVisible+0x78>)
 8042094:	681b      	ldr	r3, [r3, #0]
 8042096:	f042 0201 	orr.w	r2, r2, #1
 804209a:	625a      	str	r2, [r3, #36]	; 0x24
}
 804209c:	bf00      	nop
 804209e:	370c      	adds	r7, #12
 80420a0:	46bd      	mov	sp, r7
 80420a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80420a6:	4770      	bx	lr
 80420a8:	20000468 	.word	0x20000468

080420ac <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 80420ac:	b580      	push	{r7, lr}
 80420ae:	b082      	sub	sp, #8
 80420b0:	af00      	add	r7, sp, #0
 80420b2:	6078      	str	r0, [r7, #4]
 80420b4:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 80420b6:	687a      	ldr	r2, [r7, #4]
 80420b8:	6839      	ldr	r1, [r7, #0]
 80420ba:	4805      	ldr	r0, [pc, #20]	; (80420d0 <BSP_LCD_SetColorKeying+0x24>)
 80420bc:	f003 fe72 	bl	8045da4 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 80420c0:	6879      	ldr	r1, [r7, #4]
 80420c2:	4803      	ldr	r0, [pc, #12]	; (80420d0 <BSP_LCD_SetColorKeying+0x24>)
 80420c4:	f003 feb2 	bl	8045e2c <HAL_LTDC_EnableColorKeying>
}
 80420c8:	bf00      	nop
 80420ca:	3708      	adds	r7, #8
 80420cc:	46bd      	mov	sp, r7
 80420ce:	bd80      	pop	{r7, pc}
 80420d0:	20000468 	.word	0x20000468

080420d4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80420d4:	b480      	push	{r7}
 80420d6:	b083      	sub	sp, #12
 80420d8:	af00      	add	r7, sp, #0
 80420da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80420dc:	4b07      	ldr	r3, [pc, #28]	; (80420fc <BSP_LCD_SetTextColor+0x28>)
 80420de:	681a      	ldr	r2, [r3, #0]
 80420e0:	4907      	ldr	r1, [pc, #28]	; (8042100 <BSP_LCD_SetTextColor+0x2c>)
 80420e2:	4613      	mov	r3, r2
 80420e4:	005b      	lsls	r3, r3, #1
 80420e6:	4413      	add	r3, r2
 80420e8:	009b      	lsls	r3, r3, #2
 80420ea:	440b      	add	r3, r1
 80420ec:	687a      	ldr	r2, [r7, #4]
 80420ee:	601a      	str	r2, [r3, #0]
}
 80420f0:	bf00      	nop
 80420f2:	370c      	adds	r7, #12
 80420f4:	46bd      	mov	sp, r7
 80420f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80420fa:	4770      	bx	lr
 80420fc:	20000580 	.word	0x20000580
 8042100:	20000584 	.word	0x20000584

08042104 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8042104:	b480      	push	{r7}
 8042106:	b083      	sub	sp, #12
 8042108:	af00      	add	r7, sp, #0
 804210a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 804210c:	4b08      	ldr	r3, [pc, #32]	; (8042130 <BSP_LCD_SetBackColor+0x2c>)
 804210e:	681a      	ldr	r2, [r3, #0]
 8042110:	4908      	ldr	r1, [pc, #32]	; (8042134 <BSP_LCD_SetBackColor+0x30>)
 8042112:	4613      	mov	r3, r2
 8042114:	005b      	lsls	r3, r3, #1
 8042116:	4413      	add	r3, r2
 8042118:	009b      	lsls	r3, r3, #2
 804211a:	440b      	add	r3, r1
 804211c:	3304      	adds	r3, #4
 804211e:	687a      	ldr	r2, [r7, #4]
 8042120:	601a      	str	r2, [r3, #0]
}
 8042122:	bf00      	nop
 8042124:	370c      	adds	r7, #12
 8042126:	46bd      	mov	sp, r7
 8042128:	f85d 7b04 	ldr.w	r7, [sp], #4
 804212c:	4770      	bx	lr
 804212e:	bf00      	nop
 8042130:	20000580 	.word	0x20000580
 8042134:	20000584 	.word	0x20000584

08042138 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8042138:	b480      	push	{r7}
 804213a:	b083      	sub	sp, #12
 804213c:	af00      	add	r7, sp, #0
 804213e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8042140:	4b08      	ldr	r3, [pc, #32]	; (8042164 <BSP_LCD_SetFont+0x2c>)
 8042142:	681a      	ldr	r2, [r3, #0]
 8042144:	4908      	ldr	r1, [pc, #32]	; (8042168 <BSP_LCD_SetFont+0x30>)
 8042146:	4613      	mov	r3, r2
 8042148:	005b      	lsls	r3, r3, #1
 804214a:	4413      	add	r3, r2
 804214c:	009b      	lsls	r3, r3, #2
 804214e:	440b      	add	r3, r1
 8042150:	3308      	adds	r3, #8
 8042152:	687a      	ldr	r2, [r7, #4]
 8042154:	601a      	str	r2, [r3, #0]
}
 8042156:	bf00      	nop
 8042158:	370c      	adds	r7, #12
 804215a:	46bd      	mov	sp, r7
 804215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042160:	4770      	bx	lr
 8042162:	bf00      	nop
 8042164:	20000580 	.word	0x20000580
 8042168:	20000584 	.word	0x20000584

0804216c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 804216c:	b5f0      	push	{r4, r5, r6, r7, lr}
 804216e:	b085      	sub	sp, #20
 8042170:	af02      	add	r7, sp, #8
 8042172:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8042174:	4b0f      	ldr	r3, [pc, #60]	; (80421b4 <BSP_LCD_Clear+0x48>)
 8042176:	681c      	ldr	r4, [r3, #0]
 8042178:	4b0e      	ldr	r3, [pc, #56]	; (80421b4 <BSP_LCD_Clear+0x48>)
 804217a:	681b      	ldr	r3, [r3, #0]
 804217c:	4a0e      	ldr	r2, [pc, #56]	; (80421b8 <BSP_LCD_Clear+0x4c>)
 804217e:	2134      	movs	r1, #52	; 0x34
 8042180:	fb01 f303 	mul.w	r3, r1, r3
 8042184:	4413      	add	r3, r2
 8042186:	335c      	adds	r3, #92	; 0x5c
 8042188:	681b      	ldr	r3, [r3, #0]
 804218a:	461e      	mov	r6, r3
 804218c:	f7ff fec4 	bl	8041f18 <BSP_LCD_GetXSize>
 8042190:	4605      	mov	r5, r0
 8042192:	f7ff fecd 	bl	8041f30 <BSP_LCD_GetYSize>
 8042196:	4602      	mov	r2, r0
 8042198:	687b      	ldr	r3, [r7, #4]
 804219a:	9301      	str	r3, [sp, #4]
 804219c:	2300      	movs	r3, #0
 804219e:	9300      	str	r3, [sp, #0]
 80421a0:	4613      	mov	r3, r2
 80421a2:	462a      	mov	r2, r5
 80421a4:	4631      	mov	r1, r6
 80421a6:	4620      	mov	r0, r4
 80421a8:	f000 fad0 	bl	804274c <FillBuffer>
}
 80421ac:	bf00      	nop
 80421ae:	370c      	adds	r7, #12
 80421b0:	46bd      	mov	sp, r7
 80421b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80421b4:	20000580 	.word	0x20000580
 80421b8:	20000468 	.word	0x20000468

080421bc <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80421bc:	b590      	push	{r4, r7, lr}
 80421be:	b083      	sub	sp, #12
 80421c0:	af00      	add	r7, sp, #0
 80421c2:	4603      	mov	r3, r0
 80421c4:	80fb      	strh	r3, [r7, #6]
 80421c6:	460b      	mov	r3, r1
 80421c8:	80bb      	strh	r3, [r7, #4]
 80421ca:	4613      	mov	r3, r2
 80421cc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80421ce:	4b1b      	ldr	r3, [pc, #108]	; (804223c <BSP_LCD_DisplayChar+0x80>)
 80421d0:	681a      	ldr	r2, [r3, #0]
 80421d2:	491b      	ldr	r1, [pc, #108]	; (8042240 <BSP_LCD_DisplayChar+0x84>)
 80421d4:	4613      	mov	r3, r2
 80421d6:	005b      	lsls	r3, r3, #1
 80421d8:	4413      	add	r3, r2
 80421da:	009b      	lsls	r3, r3, #2
 80421dc:	440b      	add	r3, r1
 80421de:	3308      	adds	r3, #8
 80421e0:	681b      	ldr	r3, [r3, #0]
 80421e2:	6819      	ldr	r1, [r3, #0]
 80421e4:	78fb      	ldrb	r3, [r7, #3]
 80421e6:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80421ea:	4b14      	ldr	r3, [pc, #80]	; (804223c <BSP_LCD_DisplayChar+0x80>)
 80421ec:	681a      	ldr	r2, [r3, #0]
 80421ee:	4c14      	ldr	r4, [pc, #80]	; (8042240 <BSP_LCD_DisplayChar+0x84>)
 80421f0:	4613      	mov	r3, r2
 80421f2:	005b      	lsls	r3, r3, #1
 80421f4:	4413      	add	r3, r2
 80421f6:	009b      	lsls	r3, r3, #2
 80421f8:	4423      	add	r3, r4
 80421fa:	3308      	adds	r3, #8
 80421fc:	681b      	ldr	r3, [r3, #0]
 80421fe:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8042200:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8042204:	4b0d      	ldr	r3, [pc, #52]	; (804223c <BSP_LCD_DisplayChar+0x80>)
 8042206:	681a      	ldr	r2, [r3, #0]
 8042208:	4c0d      	ldr	r4, [pc, #52]	; (8042240 <BSP_LCD_DisplayChar+0x84>)
 804220a:	4613      	mov	r3, r2
 804220c:	005b      	lsls	r3, r3, #1
 804220e:	4413      	add	r3, r2
 8042210:	009b      	lsls	r3, r3, #2
 8042212:	4423      	add	r3, r4
 8042214:	3308      	adds	r3, #8
 8042216:	681b      	ldr	r3, [r3, #0]
 8042218:	889b      	ldrh	r3, [r3, #4]
 804221a:	3307      	adds	r3, #7
 804221c:	2b00      	cmp	r3, #0
 804221e:	da00      	bge.n	8042222 <BSP_LCD_DisplayChar+0x66>
 8042220:	3307      	adds	r3, #7
 8042222:	10db      	asrs	r3, r3, #3
 8042224:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8042228:	18ca      	adds	r2, r1, r3
 804222a:	88b9      	ldrh	r1, [r7, #4]
 804222c:	88fb      	ldrh	r3, [r7, #6]
 804222e:	4618      	mov	r0, r3
 8042230:	f000 f9d2 	bl	80425d8 <DrawChar>
}
 8042234:	bf00      	nop
 8042236:	370c      	adds	r7, #12
 8042238:	46bd      	mov	sp, r7
 804223a:	bd90      	pop	{r4, r7, pc}
 804223c:	20000580 	.word	0x20000580
 8042240:	20000584 	.word	0x20000584

08042244 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8042244:	b5b0      	push	{r4, r5, r7, lr}
 8042246:	b088      	sub	sp, #32
 8042248:	af00      	add	r7, sp, #0
 804224a:	60ba      	str	r2, [r7, #8]
 804224c:	461a      	mov	r2, r3
 804224e:	4603      	mov	r3, r0
 8042250:	81fb      	strh	r3, [r7, #14]
 8042252:	460b      	mov	r3, r1
 8042254:	81bb      	strh	r3, [r7, #12]
 8042256:	4613      	mov	r3, r2
 8042258:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 804225a:	2301      	movs	r3, #1
 804225c:	83fb      	strh	r3, [r7, #30]
 804225e:	2300      	movs	r3, #0
 8042260:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8042262:	2300      	movs	r3, #0
 8042264:	61bb      	str	r3, [r7, #24]
 8042266:	2300      	movs	r3, #0
 8042268:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 804226a:	68bb      	ldr	r3, [r7, #8]
 804226c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 804226e:	e002      	b.n	8042276 <BSP_LCD_DisplayStringAt+0x32>
 8042270:	69bb      	ldr	r3, [r7, #24]
 8042272:	3301      	adds	r3, #1
 8042274:	61bb      	str	r3, [r7, #24]
 8042276:	697b      	ldr	r3, [r7, #20]
 8042278:	1c5a      	adds	r2, r3, #1
 804227a:	617a      	str	r2, [r7, #20]
 804227c:	781b      	ldrb	r3, [r3, #0]
 804227e:	2b00      	cmp	r3, #0
 8042280:	d1f6      	bne.n	8042270 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8042282:	f7ff fe49 	bl	8041f18 <BSP_LCD_GetXSize>
 8042286:	4601      	mov	r1, r0
 8042288:	4b4b      	ldr	r3, [pc, #300]	; (80423b8 <BSP_LCD_DisplayStringAt+0x174>)
 804228a:	681a      	ldr	r2, [r3, #0]
 804228c:	484b      	ldr	r0, [pc, #300]	; (80423bc <BSP_LCD_DisplayStringAt+0x178>)
 804228e:	4613      	mov	r3, r2
 8042290:	005b      	lsls	r3, r3, #1
 8042292:	4413      	add	r3, r2
 8042294:	009b      	lsls	r3, r3, #2
 8042296:	4403      	add	r3, r0
 8042298:	3308      	adds	r3, #8
 804229a:	681b      	ldr	r3, [r3, #0]
 804229c:	889b      	ldrh	r3, [r3, #4]
 804229e:	fbb1 f3f3 	udiv	r3, r1, r3
 80422a2:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80422a4:	79fb      	ldrb	r3, [r7, #7]
 80422a6:	2b03      	cmp	r3, #3
 80422a8:	d01c      	beq.n	80422e4 <BSP_LCD_DisplayStringAt+0xa0>
 80422aa:	2b03      	cmp	r3, #3
 80422ac:	dc33      	bgt.n	8042316 <BSP_LCD_DisplayStringAt+0xd2>
 80422ae:	2b01      	cmp	r3, #1
 80422b0:	d002      	beq.n	80422b8 <BSP_LCD_DisplayStringAt+0x74>
 80422b2:	2b02      	cmp	r3, #2
 80422b4:	d019      	beq.n	80422ea <BSP_LCD_DisplayStringAt+0xa6>
 80422b6:	e02e      	b.n	8042316 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80422b8:	693a      	ldr	r2, [r7, #16]
 80422ba:	69bb      	ldr	r3, [r7, #24]
 80422bc:	1ad1      	subs	r1, r2, r3
 80422be:	4b3e      	ldr	r3, [pc, #248]	; (80423b8 <BSP_LCD_DisplayStringAt+0x174>)
 80422c0:	681a      	ldr	r2, [r3, #0]
 80422c2:	483e      	ldr	r0, [pc, #248]	; (80423bc <BSP_LCD_DisplayStringAt+0x178>)
 80422c4:	4613      	mov	r3, r2
 80422c6:	005b      	lsls	r3, r3, #1
 80422c8:	4413      	add	r3, r2
 80422ca:	009b      	lsls	r3, r3, #2
 80422cc:	4403      	add	r3, r0
 80422ce:	3308      	adds	r3, #8
 80422d0:	681b      	ldr	r3, [r3, #0]
 80422d2:	889b      	ldrh	r3, [r3, #4]
 80422d4:	fb01 f303 	mul.w	r3, r1, r3
 80422d8:	085b      	lsrs	r3, r3, #1
 80422da:	b29a      	uxth	r2, r3
 80422dc:	89fb      	ldrh	r3, [r7, #14]
 80422de:	4413      	add	r3, r2
 80422e0:	83fb      	strh	r3, [r7, #30]
      break;
 80422e2:	e01b      	b.n	804231c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80422e4:	89fb      	ldrh	r3, [r7, #14]
 80422e6:	83fb      	strh	r3, [r7, #30]
      break;
 80422e8:	e018      	b.n	804231c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80422ea:	693a      	ldr	r2, [r7, #16]
 80422ec:	69bb      	ldr	r3, [r7, #24]
 80422ee:	1ad3      	subs	r3, r2, r3
 80422f0:	b299      	uxth	r1, r3
 80422f2:	4b31      	ldr	r3, [pc, #196]	; (80423b8 <BSP_LCD_DisplayStringAt+0x174>)
 80422f4:	681a      	ldr	r2, [r3, #0]
 80422f6:	4831      	ldr	r0, [pc, #196]	; (80423bc <BSP_LCD_DisplayStringAt+0x178>)
 80422f8:	4613      	mov	r3, r2
 80422fa:	005b      	lsls	r3, r3, #1
 80422fc:	4413      	add	r3, r2
 80422fe:	009b      	lsls	r3, r3, #2
 8042300:	4403      	add	r3, r0
 8042302:	3308      	adds	r3, #8
 8042304:	681b      	ldr	r3, [r3, #0]
 8042306:	889b      	ldrh	r3, [r3, #4]
 8042308:	fb11 f303 	smulbb	r3, r1, r3
 804230c:	b29a      	uxth	r2, r3
 804230e:	89fb      	ldrh	r3, [r7, #14]
 8042310:	4413      	add	r3, r2
 8042312:	83fb      	strh	r3, [r7, #30]
      break;
 8042314:	e002      	b.n	804231c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8042316:	89fb      	ldrh	r3, [r7, #14]
 8042318:	83fb      	strh	r3, [r7, #30]
      break;
 804231a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 804231c:	e01a      	b.n	8042354 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 804231e:	68bb      	ldr	r3, [r7, #8]
 8042320:	781a      	ldrb	r2, [r3, #0]
 8042322:	89b9      	ldrh	r1, [r7, #12]
 8042324:	8bfb      	ldrh	r3, [r7, #30]
 8042326:	4618      	mov	r0, r3
 8042328:	f7ff ff48 	bl	80421bc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 804232c:	4b22      	ldr	r3, [pc, #136]	; (80423b8 <BSP_LCD_DisplayStringAt+0x174>)
 804232e:	681a      	ldr	r2, [r3, #0]
 8042330:	4922      	ldr	r1, [pc, #136]	; (80423bc <BSP_LCD_DisplayStringAt+0x178>)
 8042332:	4613      	mov	r3, r2
 8042334:	005b      	lsls	r3, r3, #1
 8042336:	4413      	add	r3, r2
 8042338:	009b      	lsls	r3, r3, #2
 804233a:	440b      	add	r3, r1
 804233c:	3308      	adds	r3, #8
 804233e:	681b      	ldr	r3, [r3, #0]
 8042340:	889a      	ldrh	r2, [r3, #4]
 8042342:	8bfb      	ldrh	r3, [r7, #30]
 8042344:	4413      	add	r3, r2
 8042346:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8042348:	68bb      	ldr	r3, [r7, #8]
 804234a:	3301      	adds	r3, #1
 804234c:	60bb      	str	r3, [r7, #8]
    i++;
 804234e:	8bbb      	ldrh	r3, [r7, #28]
 8042350:	3301      	adds	r3, #1
 8042352:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8042354:	68bb      	ldr	r3, [r7, #8]
 8042356:	781b      	ldrb	r3, [r3, #0]
 8042358:	2b00      	cmp	r3, #0
 804235a:	bf14      	ite	ne
 804235c:	2301      	movne	r3, #1
 804235e:	2300      	moveq	r3, #0
 8042360:	b2dc      	uxtb	r4, r3
 8042362:	f7ff fdd9 	bl	8041f18 <BSP_LCD_GetXSize>
 8042366:	8bb9      	ldrh	r1, [r7, #28]
 8042368:	4b13      	ldr	r3, [pc, #76]	; (80423b8 <BSP_LCD_DisplayStringAt+0x174>)
 804236a:	681a      	ldr	r2, [r3, #0]
 804236c:	4d13      	ldr	r5, [pc, #76]	; (80423bc <BSP_LCD_DisplayStringAt+0x178>)
 804236e:	4613      	mov	r3, r2
 8042370:	005b      	lsls	r3, r3, #1
 8042372:	4413      	add	r3, r2
 8042374:	009b      	lsls	r3, r3, #2
 8042376:	442b      	add	r3, r5
 8042378:	3308      	adds	r3, #8
 804237a:	681b      	ldr	r3, [r3, #0]
 804237c:	889b      	ldrh	r3, [r3, #4]
 804237e:	fb01 f303 	mul.w	r3, r1, r3
 8042382:	1ac3      	subs	r3, r0, r3
 8042384:	b299      	uxth	r1, r3
 8042386:	4b0c      	ldr	r3, [pc, #48]	; (80423b8 <BSP_LCD_DisplayStringAt+0x174>)
 8042388:	681a      	ldr	r2, [r3, #0]
 804238a:	480c      	ldr	r0, [pc, #48]	; (80423bc <BSP_LCD_DisplayStringAt+0x178>)
 804238c:	4613      	mov	r3, r2
 804238e:	005b      	lsls	r3, r3, #1
 8042390:	4413      	add	r3, r2
 8042392:	009b      	lsls	r3, r3, #2
 8042394:	4403      	add	r3, r0
 8042396:	3308      	adds	r3, #8
 8042398:	681b      	ldr	r3, [r3, #0]
 804239a:	889b      	ldrh	r3, [r3, #4]
 804239c:	4299      	cmp	r1, r3
 804239e:	bf2c      	ite	cs
 80423a0:	2301      	movcs	r3, #1
 80423a2:	2300      	movcc	r3, #0
 80423a4:	b2db      	uxtb	r3, r3
 80423a6:	4023      	ands	r3, r4
 80423a8:	b2db      	uxtb	r3, r3
 80423aa:	2b00      	cmp	r3, #0
 80423ac:	d1b7      	bne.n	804231e <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80423ae:	bf00      	nop
 80423b0:	bf00      	nop
 80423b2:	3720      	adds	r7, #32
 80423b4:	46bd      	mov	sp, r7
 80423b6:	bdb0      	pop	{r4, r5, r7, pc}
 80423b8:	20000580 	.word	0x20000580
 80423bc:	20000584 	.word	0x20000584

080423c0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80423c0:	b580      	push	{r7, lr}
 80423c2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80423c4:	4b05      	ldr	r3, [pc, #20]	; (80423dc <BSP_LCD_DisplayOn+0x1c>)
 80423c6:	681b      	ldr	r3, [r3, #0]
 80423c8:	689b      	ldr	r3, [r3, #8]
 80423ca:	2b00      	cmp	r3, #0
 80423cc:	d003      	beq.n	80423d6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80423ce:	4b03      	ldr	r3, [pc, #12]	; (80423dc <BSP_LCD_DisplayOn+0x1c>)
 80423d0:	681b      	ldr	r3, [r3, #0]
 80423d2:	689b      	ldr	r3, [r3, #8]
 80423d4:	4798      	blx	r3
  }
}
 80423d6:	bf00      	nop
 80423d8:	bd80      	pop	{r7, pc}
 80423da:	bf00      	nop
 80423dc:	2000059c 	.word	0x2000059c

080423e0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80423e0:	b580      	push	{r7, lr}
 80423e2:	b08e      	sub	sp, #56	; 0x38
 80423e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80423e6:	2300      	movs	r3, #0
 80423e8:	623b      	str	r3, [r7, #32]
 80423ea:	4b61      	ldr	r3, [pc, #388]	; (8042570 <BSP_LCD_MspInit+0x190>)
 80423ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80423ee:	4a60      	ldr	r2, [pc, #384]	; (8042570 <BSP_LCD_MspInit+0x190>)
 80423f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80423f4:	6453      	str	r3, [r2, #68]	; 0x44
 80423f6:	4b5e      	ldr	r3, [pc, #376]	; (8042570 <BSP_LCD_MspInit+0x190>)
 80423f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80423fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80423fe:	623b      	str	r3, [r7, #32]
 8042400:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8042402:	2300      	movs	r3, #0
 8042404:	61fb      	str	r3, [r7, #28]
 8042406:	4b5a      	ldr	r3, [pc, #360]	; (8042570 <BSP_LCD_MspInit+0x190>)
 8042408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804240a:	4a59      	ldr	r2, [pc, #356]	; (8042570 <BSP_LCD_MspInit+0x190>)
 804240c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8042410:	6313      	str	r3, [r2, #48]	; 0x30
 8042412:	4b57      	ldr	r3, [pc, #348]	; (8042570 <BSP_LCD_MspInit+0x190>)
 8042414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804241a:	61fb      	str	r3, [r7, #28]
 804241c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 804241e:	2300      	movs	r3, #0
 8042420:	61bb      	str	r3, [r7, #24]
 8042422:	4b53      	ldr	r3, [pc, #332]	; (8042570 <BSP_LCD_MspInit+0x190>)
 8042424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042426:	4a52      	ldr	r2, [pc, #328]	; (8042570 <BSP_LCD_MspInit+0x190>)
 8042428:	f043 0301 	orr.w	r3, r3, #1
 804242c:	6313      	str	r3, [r2, #48]	; 0x30
 804242e:	4b50      	ldr	r3, [pc, #320]	; (8042570 <BSP_LCD_MspInit+0x190>)
 8042430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042432:	f003 0301 	and.w	r3, r3, #1
 8042436:	61bb      	str	r3, [r7, #24]
 8042438:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 804243a:	2300      	movs	r3, #0
 804243c:	617b      	str	r3, [r7, #20]
 804243e:	4b4c      	ldr	r3, [pc, #304]	; (8042570 <BSP_LCD_MspInit+0x190>)
 8042440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042442:	4a4b      	ldr	r2, [pc, #300]	; (8042570 <BSP_LCD_MspInit+0x190>)
 8042444:	f043 0302 	orr.w	r3, r3, #2
 8042448:	6313      	str	r3, [r2, #48]	; 0x30
 804244a:	4b49      	ldr	r3, [pc, #292]	; (8042570 <BSP_LCD_MspInit+0x190>)
 804244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804244e:	f003 0302 	and.w	r3, r3, #2
 8042452:	617b      	str	r3, [r7, #20]
 8042454:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8042456:	2300      	movs	r3, #0
 8042458:	613b      	str	r3, [r7, #16]
 804245a:	4b45      	ldr	r3, [pc, #276]	; (8042570 <BSP_LCD_MspInit+0x190>)
 804245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804245e:	4a44      	ldr	r2, [pc, #272]	; (8042570 <BSP_LCD_MspInit+0x190>)
 8042460:	f043 0304 	orr.w	r3, r3, #4
 8042464:	6313      	str	r3, [r2, #48]	; 0x30
 8042466:	4b42      	ldr	r3, [pc, #264]	; (8042570 <BSP_LCD_MspInit+0x190>)
 8042468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804246a:	f003 0304 	and.w	r3, r3, #4
 804246e:	613b      	str	r3, [r7, #16]
 8042470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8042472:	2300      	movs	r3, #0
 8042474:	60fb      	str	r3, [r7, #12]
 8042476:	4b3e      	ldr	r3, [pc, #248]	; (8042570 <BSP_LCD_MspInit+0x190>)
 8042478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804247a:	4a3d      	ldr	r2, [pc, #244]	; (8042570 <BSP_LCD_MspInit+0x190>)
 804247c:	f043 0308 	orr.w	r3, r3, #8
 8042480:	6313      	str	r3, [r2, #48]	; 0x30
 8042482:	4b3b      	ldr	r3, [pc, #236]	; (8042570 <BSP_LCD_MspInit+0x190>)
 8042484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042486:	f003 0308 	and.w	r3, r3, #8
 804248a:	60fb      	str	r3, [r7, #12]
 804248c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 804248e:	2300      	movs	r3, #0
 8042490:	60bb      	str	r3, [r7, #8]
 8042492:	4b37      	ldr	r3, [pc, #220]	; (8042570 <BSP_LCD_MspInit+0x190>)
 8042494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042496:	4a36      	ldr	r2, [pc, #216]	; (8042570 <BSP_LCD_MspInit+0x190>)
 8042498:	f043 0320 	orr.w	r3, r3, #32
 804249c:	6313      	str	r3, [r2, #48]	; 0x30
 804249e:	4b34      	ldr	r3, [pc, #208]	; (8042570 <BSP_LCD_MspInit+0x190>)
 80424a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80424a2:	f003 0320 	and.w	r3, r3, #32
 80424a6:	60bb      	str	r3, [r7, #8]
 80424a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80424aa:	2300      	movs	r3, #0
 80424ac:	607b      	str	r3, [r7, #4]
 80424ae:	4b30      	ldr	r3, [pc, #192]	; (8042570 <BSP_LCD_MspInit+0x190>)
 80424b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80424b2:	4a2f      	ldr	r2, [pc, #188]	; (8042570 <BSP_LCD_MspInit+0x190>)
 80424b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80424b8:	6313      	str	r3, [r2, #48]	; 0x30
 80424ba:	4b2d      	ldr	r3, [pc, #180]	; (8042570 <BSP_LCD_MspInit+0x190>)
 80424bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80424be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80424c2:	607b      	str	r3, [r7, #4]
 80424c4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80424c6:	f641 0358 	movw	r3, #6232	; 0x1858
 80424ca:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80424cc:	2302      	movs	r3, #2
 80424ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80424d0:	2300      	movs	r3, #0
 80424d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80424d4:	2302      	movs	r3, #2
 80424d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80424d8:	230e      	movs	r3, #14
 80424da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80424dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80424e0:	4619      	mov	r1, r3
 80424e2:	4824      	ldr	r0, [pc, #144]	; (8042574 <BSP_LCD_MspInit+0x194>)
 80424e4:	f001 f9f2 	bl	80438cc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80424e8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80424ec:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80424ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80424f2:	4619      	mov	r1, r3
 80424f4:	4820      	ldr	r0, [pc, #128]	; (8042578 <BSP_LCD_MspInit+0x198>)
 80424f6:	f001 f9e9 	bl	80438cc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80424fa:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80424fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8042500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042504:	4619      	mov	r1, r3
 8042506:	481d      	ldr	r0, [pc, #116]	; (804257c <BSP_LCD_MspInit+0x19c>)
 8042508:	f001 f9e0 	bl	80438cc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 804250c:	2348      	movs	r3, #72	; 0x48
 804250e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8042510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042514:	4619      	mov	r1, r3
 8042516:	481a      	ldr	r0, [pc, #104]	; (8042580 <BSP_LCD_MspInit+0x1a0>)
 8042518:	f001 f9d8 	bl	80438cc <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 804251c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8042520:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8042522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042526:	4619      	mov	r1, r3
 8042528:	4816      	ldr	r0, [pc, #88]	; (8042584 <BSP_LCD_MspInit+0x1a4>)
 804252a:	f001 f9cf 	bl	80438cc <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 804252e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8042532:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8042534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042538:	4619      	mov	r1, r3
 804253a:	4813      	ldr	r0, [pc, #76]	; (8042588 <BSP_LCD_MspInit+0x1a8>)
 804253c:	f001 f9c6 	bl	80438cc <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8042540:	2303      	movs	r3, #3
 8042542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8042544:	2309      	movs	r3, #9
 8042546:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8042548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804254c:	4619      	mov	r1, r3
 804254e:	480a      	ldr	r0, [pc, #40]	; (8042578 <BSP_LCD_MspInit+0x198>)
 8042550:	f001 f9bc 	bl	80438cc <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8042554:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8042558:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 804255a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804255e:	4619      	mov	r1, r3
 8042560:	4809      	ldr	r0, [pc, #36]	; (8042588 <BSP_LCD_MspInit+0x1a8>)
 8042562:	f001 f9b3 	bl	80438cc <HAL_GPIO_Init>
}
 8042566:	bf00      	nop
 8042568:	3738      	adds	r7, #56	; 0x38
 804256a:	46bd      	mov	sp, r7
 804256c:	bd80      	pop	{r7, pc}
 804256e:	bf00      	nop
 8042570:	40023800 	.word	0x40023800
 8042574:	40020000 	.word	0x40020000
 8042578:	40020400 	.word	0x40020400
 804257c:	40020800 	.word	0x40020800
 8042580:	40020c00 	.word	0x40020c00
 8042584:	40021400 	.word	0x40021400
 8042588:	40021800 	.word	0x40021800

0804258c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 804258c:	b5b0      	push	{r4, r5, r7, lr}
 804258e:	b082      	sub	sp, #8
 8042590:	af00      	add	r7, sp, #0
 8042592:	4603      	mov	r3, r0
 8042594:	603a      	str	r2, [r7, #0]
 8042596:	80fb      	strh	r3, [r7, #6]
 8042598:	460b      	mov	r3, r1
 804259a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 804259c:	4b0c      	ldr	r3, [pc, #48]	; (80425d0 <BSP_LCD_DrawPixel+0x44>)
 804259e:	681b      	ldr	r3, [r3, #0]
 80425a0:	4a0c      	ldr	r2, [pc, #48]	; (80425d4 <BSP_LCD_DrawPixel+0x48>)
 80425a2:	2134      	movs	r1, #52	; 0x34
 80425a4:	fb01 f303 	mul.w	r3, r1, r3
 80425a8:	4413      	add	r3, r2
 80425aa:	335c      	adds	r3, #92	; 0x5c
 80425ac:	681c      	ldr	r4, [r3, #0]
 80425ae:	88bd      	ldrh	r5, [r7, #4]
 80425b0:	f7ff fcb2 	bl	8041f18 <BSP_LCD_GetXSize>
 80425b4:	4603      	mov	r3, r0
 80425b6:	fb03 f205 	mul.w	r2, r3, r5
 80425ba:	88fb      	ldrh	r3, [r7, #6]
 80425bc:	4413      	add	r3, r2
 80425be:	009b      	lsls	r3, r3, #2
 80425c0:	4423      	add	r3, r4
 80425c2:	461a      	mov	r2, r3
 80425c4:	683b      	ldr	r3, [r7, #0]
 80425c6:	6013      	str	r3, [r2, #0]
}
 80425c8:	bf00      	nop
 80425ca:	3708      	adds	r7, #8
 80425cc:	46bd      	mov	sp, r7
 80425ce:	bdb0      	pop	{r4, r5, r7, pc}
 80425d0:	20000580 	.word	0x20000580
 80425d4:	20000468 	.word	0x20000468

080425d8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80425d8:	b580      	push	{r7, lr}
 80425da:	b088      	sub	sp, #32
 80425dc:	af00      	add	r7, sp, #0
 80425de:	4603      	mov	r3, r0
 80425e0:	603a      	str	r2, [r7, #0]
 80425e2:	80fb      	strh	r3, [r7, #6]
 80425e4:	460b      	mov	r3, r1
 80425e6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80425e8:	2300      	movs	r3, #0
 80425ea:	61fb      	str	r3, [r7, #28]
 80425ec:	2300      	movs	r3, #0
 80425ee:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80425f0:	2300      	movs	r3, #0
 80425f2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80425f4:	4b53      	ldr	r3, [pc, #332]	; (8042744 <DrawChar+0x16c>)
 80425f6:	681a      	ldr	r2, [r3, #0]
 80425f8:	4953      	ldr	r1, [pc, #332]	; (8042748 <DrawChar+0x170>)
 80425fa:	4613      	mov	r3, r2
 80425fc:	005b      	lsls	r3, r3, #1
 80425fe:	4413      	add	r3, r2
 8042600:	009b      	lsls	r3, r3, #2
 8042602:	440b      	add	r3, r1
 8042604:	3308      	adds	r3, #8
 8042606:	681b      	ldr	r3, [r3, #0]
 8042608:	88db      	ldrh	r3, [r3, #6]
 804260a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 804260c:	4b4d      	ldr	r3, [pc, #308]	; (8042744 <DrawChar+0x16c>)
 804260e:	681a      	ldr	r2, [r3, #0]
 8042610:	494d      	ldr	r1, [pc, #308]	; (8042748 <DrawChar+0x170>)
 8042612:	4613      	mov	r3, r2
 8042614:	005b      	lsls	r3, r3, #1
 8042616:	4413      	add	r3, r2
 8042618:	009b      	lsls	r3, r3, #2
 804261a:	440b      	add	r3, r1
 804261c:	3308      	adds	r3, #8
 804261e:	681b      	ldr	r3, [r3, #0]
 8042620:	889b      	ldrh	r3, [r3, #4]
 8042622:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8042624:	8a3b      	ldrh	r3, [r7, #16]
 8042626:	3307      	adds	r3, #7
 8042628:	2b00      	cmp	r3, #0
 804262a:	da00      	bge.n	804262e <DrawChar+0x56>
 804262c:	3307      	adds	r3, #7
 804262e:	10db      	asrs	r3, r3, #3
 8042630:	b2db      	uxtb	r3, r3
 8042632:	00db      	lsls	r3, r3, #3
 8042634:	b2da      	uxtb	r2, r3
 8042636:	8a3b      	ldrh	r3, [r7, #16]
 8042638:	b2db      	uxtb	r3, r3
 804263a:	1ad3      	subs	r3, r2, r3
 804263c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 804263e:	2300      	movs	r3, #0
 8042640:	61fb      	str	r3, [r7, #28]
 8042642:	e076      	b.n	8042732 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8042644:	8a3b      	ldrh	r3, [r7, #16]
 8042646:	3307      	adds	r3, #7
 8042648:	2b00      	cmp	r3, #0
 804264a:	da00      	bge.n	804264e <DrawChar+0x76>
 804264c:	3307      	adds	r3, #7
 804264e:	10db      	asrs	r3, r3, #3
 8042650:	461a      	mov	r2, r3
 8042652:	69fb      	ldr	r3, [r7, #28]
 8042654:	fb02 f303 	mul.w	r3, r2, r3
 8042658:	683a      	ldr	r2, [r7, #0]
 804265a:	4413      	add	r3, r2
 804265c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 804265e:	8a3b      	ldrh	r3, [r7, #16]
 8042660:	3307      	adds	r3, #7
 8042662:	2b00      	cmp	r3, #0
 8042664:	da00      	bge.n	8042668 <DrawChar+0x90>
 8042666:	3307      	adds	r3, #7
 8042668:	10db      	asrs	r3, r3, #3
 804266a:	2b01      	cmp	r3, #1
 804266c:	d002      	beq.n	8042674 <DrawChar+0x9c>
 804266e:	2b02      	cmp	r3, #2
 8042670:	d004      	beq.n	804267c <DrawChar+0xa4>
 8042672:	e00c      	b.n	804268e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8042674:	68bb      	ldr	r3, [r7, #8]
 8042676:	781b      	ldrb	r3, [r3, #0]
 8042678:	617b      	str	r3, [r7, #20]
      break;
 804267a:	e016      	b.n	80426aa <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 804267c:	68bb      	ldr	r3, [r7, #8]
 804267e:	781b      	ldrb	r3, [r3, #0]
 8042680:	021b      	lsls	r3, r3, #8
 8042682:	68ba      	ldr	r2, [r7, #8]
 8042684:	3201      	adds	r2, #1
 8042686:	7812      	ldrb	r2, [r2, #0]
 8042688:	4313      	orrs	r3, r2
 804268a:	617b      	str	r3, [r7, #20]
      break;
 804268c:	e00d      	b.n	80426aa <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 804268e:	68bb      	ldr	r3, [r7, #8]
 8042690:	781b      	ldrb	r3, [r3, #0]
 8042692:	041a      	lsls	r2, r3, #16
 8042694:	68bb      	ldr	r3, [r7, #8]
 8042696:	3301      	adds	r3, #1
 8042698:	781b      	ldrb	r3, [r3, #0]
 804269a:	021b      	lsls	r3, r3, #8
 804269c:	4313      	orrs	r3, r2
 804269e:	68ba      	ldr	r2, [r7, #8]
 80426a0:	3202      	adds	r2, #2
 80426a2:	7812      	ldrb	r2, [r2, #0]
 80426a4:	4313      	orrs	r3, r2
 80426a6:	617b      	str	r3, [r7, #20]
      break;
 80426a8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80426aa:	2300      	movs	r3, #0
 80426ac:	61bb      	str	r3, [r7, #24]
 80426ae:	e036      	b.n	804271e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80426b0:	8a3a      	ldrh	r2, [r7, #16]
 80426b2:	69bb      	ldr	r3, [r7, #24]
 80426b4:	1ad2      	subs	r2, r2, r3
 80426b6:	7bfb      	ldrb	r3, [r7, #15]
 80426b8:	4413      	add	r3, r2
 80426ba:	3b01      	subs	r3, #1
 80426bc:	2201      	movs	r2, #1
 80426be:	fa02 f303 	lsl.w	r3, r2, r3
 80426c2:	461a      	mov	r2, r3
 80426c4:	697b      	ldr	r3, [r7, #20]
 80426c6:	4013      	ands	r3, r2
 80426c8:	2b00      	cmp	r3, #0
 80426ca:	d012      	beq.n	80426f2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80426cc:	69bb      	ldr	r3, [r7, #24]
 80426ce:	b29a      	uxth	r2, r3
 80426d0:	88fb      	ldrh	r3, [r7, #6]
 80426d2:	4413      	add	r3, r2
 80426d4:	b298      	uxth	r0, r3
 80426d6:	4b1b      	ldr	r3, [pc, #108]	; (8042744 <DrawChar+0x16c>)
 80426d8:	681a      	ldr	r2, [r3, #0]
 80426da:	491b      	ldr	r1, [pc, #108]	; (8042748 <DrawChar+0x170>)
 80426dc:	4613      	mov	r3, r2
 80426de:	005b      	lsls	r3, r3, #1
 80426e0:	4413      	add	r3, r2
 80426e2:	009b      	lsls	r3, r3, #2
 80426e4:	440b      	add	r3, r1
 80426e6:	681a      	ldr	r2, [r3, #0]
 80426e8:	88bb      	ldrh	r3, [r7, #4]
 80426ea:	4619      	mov	r1, r3
 80426ec:	f7ff ff4e 	bl	804258c <BSP_LCD_DrawPixel>
 80426f0:	e012      	b.n	8042718 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80426f2:	69bb      	ldr	r3, [r7, #24]
 80426f4:	b29a      	uxth	r2, r3
 80426f6:	88fb      	ldrh	r3, [r7, #6]
 80426f8:	4413      	add	r3, r2
 80426fa:	b298      	uxth	r0, r3
 80426fc:	4b11      	ldr	r3, [pc, #68]	; (8042744 <DrawChar+0x16c>)
 80426fe:	681a      	ldr	r2, [r3, #0]
 8042700:	4911      	ldr	r1, [pc, #68]	; (8042748 <DrawChar+0x170>)
 8042702:	4613      	mov	r3, r2
 8042704:	005b      	lsls	r3, r3, #1
 8042706:	4413      	add	r3, r2
 8042708:	009b      	lsls	r3, r3, #2
 804270a:	440b      	add	r3, r1
 804270c:	3304      	adds	r3, #4
 804270e:	681a      	ldr	r2, [r3, #0]
 8042710:	88bb      	ldrh	r3, [r7, #4]
 8042712:	4619      	mov	r1, r3
 8042714:	f7ff ff3a 	bl	804258c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8042718:	69bb      	ldr	r3, [r7, #24]
 804271a:	3301      	adds	r3, #1
 804271c:	61bb      	str	r3, [r7, #24]
 804271e:	8a3b      	ldrh	r3, [r7, #16]
 8042720:	69ba      	ldr	r2, [r7, #24]
 8042722:	429a      	cmp	r2, r3
 8042724:	d3c4      	bcc.n	80426b0 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8042726:	88bb      	ldrh	r3, [r7, #4]
 8042728:	3301      	adds	r3, #1
 804272a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 804272c:	69fb      	ldr	r3, [r7, #28]
 804272e:	3301      	adds	r3, #1
 8042730:	61fb      	str	r3, [r7, #28]
 8042732:	8a7b      	ldrh	r3, [r7, #18]
 8042734:	69fa      	ldr	r2, [r7, #28]
 8042736:	429a      	cmp	r2, r3
 8042738:	d384      	bcc.n	8042644 <DrawChar+0x6c>
  }
}
 804273a:	bf00      	nop
 804273c:	bf00      	nop
 804273e:	3720      	adds	r7, #32
 8042740:	46bd      	mov	sp, r7
 8042742:	bd80      	pop	{r7, pc}
 8042744:	20000580 	.word	0x20000580
 8042748:	20000584 	.word	0x20000584

0804274c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 804274c:	b580      	push	{r7, lr}
 804274e:	b086      	sub	sp, #24
 8042750:	af02      	add	r7, sp, #8
 8042752:	60f8      	str	r0, [r7, #12]
 8042754:	60b9      	str	r1, [r7, #8]
 8042756:	607a      	str	r2, [r7, #4]
 8042758:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 804275a:	4b16      	ldr	r3, [pc, #88]	; (80427b4 <FillBuffer+0x68>)
 804275c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8042760:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8042762:	4b14      	ldr	r3, [pc, #80]	; (80427b4 <FillBuffer+0x68>)
 8042764:	2200      	movs	r2, #0
 8042766:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8042768:	4a12      	ldr	r2, [pc, #72]	; (80427b4 <FillBuffer+0x68>)
 804276a:	69bb      	ldr	r3, [r7, #24]
 804276c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 804276e:	4b11      	ldr	r3, [pc, #68]	; (80427b4 <FillBuffer+0x68>)
 8042770:	4a11      	ldr	r2, [pc, #68]	; (80427b8 <FillBuffer+0x6c>)
 8042772:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8042774:	480f      	ldr	r0, [pc, #60]	; (80427b4 <FillBuffer+0x68>)
 8042776:	f000 fd0d 	bl	8043194 <HAL_DMA2D_Init>
 804277a:	4603      	mov	r3, r0
 804277c:	2b00      	cmp	r3, #0
 804277e:	d115      	bne.n	80427ac <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8042780:	68f9      	ldr	r1, [r7, #12]
 8042782:	480c      	ldr	r0, [pc, #48]	; (80427b4 <FillBuffer+0x68>)
 8042784:	f000 ff74 	bl	8043670 <HAL_DMA2D_ConfigLayer>
 8042788:	4603      	mov	r3, r0
 804278a:	2b00      	cmp	r3, #0
 804278c:	d10e      	bne.n	80427ac <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 804278e:	68ba      	ldr	r2, [r7, #8]
 8042790:	683b      	ldr	r3, [r7, #0]
 8042792:	9300      	str	r3, [sp, #0]
 8042794:	687b      	ldr	r3, [r7, #4]
 8042796:	69f9      	ldr	r1, [r7, #28]
 8042798:	4806      	ldr	r0, [pc, #24]	; (80427b4 <FillBuffer+0x68>)
 804279a:	f000 fd44 	bl	8043226 <HAL_DMA2D_Start>
 804279e:	4603      	mov	r3, r0
 80427a0:	2b00      	cmp	r3, #0
 80427a2:	d103      	bne.n	80427ac <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80427a4:	210a      	movs	r1, #10
 80427a6:	4803      	ldr	r0, [pc, #12]	; (80427b4 <FillBuffer+0x68>)
 80427a8:	f000 fd68 	bl	804327c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80427ac:	bf00      	nop
 80427ae:	3710      	adds	r7, #16
 80427b0:	46bd      	mov	sp, r7
 80427b2:	bd80      	pop	{r7, pc}
 80427b4:	20000510 	.word	0x20000510
 80427b8:	4002b000 	.word	0x4002b000

080427bc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80427bc:	b580      	push	{r7, lr}
 80427be:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80427c0:	4b29      	ldr	r3, [pc, #164]	; (8042868 <BSP_SDRAM_Init+0xac>)
 80427c2:	4a2a      	ldr	r2, [pc, #168]	; (804286c <BSP_SDRAM_Init+0xb0>)
 80427c4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80427c6:	4b2a      	ldr	r3, [pc, #168]	; (8042870 <BSP_SDRAM_Init+0xb4>)
 80427c8:	2202      	movs	r2, #2
 80427ca:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80427cc:	4b28      	ldr	r3, [pc, #160]	; (8042870 <BSP_SDRAM_Init+0xb4>)
 80427ce:	2207      	movs	r2, #7
 80427d0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80427d2:	4b27      	ldr	r3, [pc, #156]	; (8042870 <BSP_SDRAM_Init+0xb4>)
 80427d4:	2204      	movs	r2, #4
 80427d6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80427d8:	4b25      	ldr	r3, [pc, #148]	; (8042870 <BSP_SDRAM_Init+0xb4>)
 80427da:	2207      	movs	r2, #7
 80427dc:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80427de:	4b24      	ldr	r3, [pc, #144]	; (8042870 <BSP_SDRAM_Init+0xb4>)
 80427e0:	2202      	movs	r2, #2
 80427e2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80427e4:	4b22      	ldr	r3, [pc, #136]	; (8042870 <BSP_SDRAM_Init+0xb4>)
 80427e6:	2202      	movs	r2, #2
 80427e8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80427ea:	4b21      	ldr	r3, [pc, #132]	; (8042870 <BSP_SDRAM_Init+0xb4>)
 80427ec:	2202      	movs	r2, #2
 80427ee:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80427f0:	4b1d      	ldr	r3, [pc, #116]	; (8042868 <BSP_SDRAM_Init+0xac>)
 80427f2:	2201      	movs	r2, #1
 80427f4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80427f6:	4b1c      	ldr	r3, [pc, #112]	; (8042868 <BSP_SDRAM_Init+0xac>)
 80427f8:	2200      	movs	r2, #0
 80427fa:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80427fc:	4b1a      	ldr	r3, [pc, #104]	; (8042868 <BSP_SDRAM_Init+0xac>)
 80427fe:	2204      	movs	r2, #4
 8042800:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8042802:	4b19      	ldr	r3, [pc, #100]	; (8042868 <BSP_SDRAM_Init+0xac>)
 8042804:	2210      	movs	r2, #16
 8042806:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8042808:	4b17      	ldr	r3, [pc, #92]	; (8042868 <BSP_SDRAM_Init+0xac>)
 804280a:	2240      	movs	r2, #64	; 0x40
 804280c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 804280e:	4b16      	ldr	r3, [pc, #88]	; (8042868 <BSP_SDRAM_Init+0xac>)
 8042810:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8042814:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8042816:	4b14      	ldr	r3, [pc, #80]	; (8042868 <BSP_SDRAM_Init+0xac>)
 8042818:	2200      	movs	r2, #0
 804281a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 804281c:	4b12      	ldr	r3, [pc, #72]	; (8042868 <BSP_SDRAM_Init+0xac>)
 804281e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042822:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8042824:	4b10      	ldr	r3, [pc, #64]	; (8042868 <BSP_SDRAM_Init+0xac>)
 8042826:	2200      	movs	r2, #0
 8042828:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 804282a:	4b0f      	ldr	r3, [pc, #60]	; (8042868 <BSP_SDRAM_Init+0xac>)
 804282c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8042830:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8042832:	2100      	movs	r1, #0
 8042834:	480c      	ldr	r0, [pc, #48]	; (8042868 <BSP_SDRAM_Init+0xac>)
 8042836:	f000 f87f 	bl	8042938 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 804283a:	490d      	ldr	r1, [pc, #52]	; (8042870 <BSP_SDRAM_Init+0xb4>)
 804283c:	480a      	ldr	r0, [pc, #40]	; (8042868 <BSP_SDRAM_Init+0xac>)
 804283e:	f004 fb7b 	bl	8046f38 <HAL_SDRAM_Init>
 8042842:	4603      	mov	r3, r0
 8042844:	2b00      	cmp	r3, #0
 8042846:	d003      	beq.n	8042850 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8042848:	4b0a      	ldr	r3, [pc, #40]	; (8042874 <BSP_SDRAM_Init+0xb8>)
 804284a:	2201      	movs	r2, #1
 804284c:	701a      	strb	r2, [r3, #0]
 804284e:	e002      	b.n	8042856 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8042850:	4b08      	ldr	r3, [pc, #32]	; (8042874 <BSP_SDRAM_Init+0xb8>)
 8042852:	2200      	movs	r2, #0
 8042854:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8042856:	f240 506a 	movw	r0, #1386	; 0x56a
 804285a:	f000 f80d 	bl	8042878 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 804285e:	4b05      	ldr	r3, [pc, #20]	; (8042874 <BSP_SDRAM_Init+0xb8>)
 8042860:	781b      	ldrb	r3, [r3, #0]
}
 8042862:	4618      	mov	r0, r3
 8042864:	bd80      	pop	{r7, pc}
 8042866:	bf00      	nop
 8042868:	200005a0 	.word	0x200005a0
 804286c:	a0000140 	.word	0xa0000140
 8042870:	200005d4 	.word	0x200005d4
 8042874:	20000050 	.word	0x20000050

08042878 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8042878:	b580      	push	{r7, lr}
 804287a:	b084      	sub	sp, #16
 804287c:	af00      	add	r7, sp, #0
 804287e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8042880:	2300      	movs	r3, #0
 8042882:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8042884:	4b2a      	ldr	r3, [pc, #168]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042886:	2201      	movs	r2, #1
 8042888:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 804288a:	4b29      	ldr	r3, [pc, #164]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 804288c:	2208      	movs	r2, #8
 804288e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8042890:	4b27      	ldr	r3, [pc, #156]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042892:	2201      	movs	r2, #1
 8042894:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8042896:	4b26      	ldr	r3, [pc, #152]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042898:	2200      	movs	r2, #0
 804289a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 804289c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80428a0:	4923      	ldr	r1, [pc, #140]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80428a2:	4824      	ldr	r0, [pc, #144]	; (8042934 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80428a4:	f004 fb7c 	bl	8046fa0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80428a8:	2001      	movs	r0, #1
 80428aa:	f000 f993 	bl	8042bd4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80428ae:	4b20      	ldr	r3, [pc, #128]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80428b0:	2202      	movs	r2, #2
 80428b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80428b4:	4b1e      	ldr	r3, [pc, #120]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80428b6:	2208      	movs	r2, #8
 80428b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80428ba:	4b1d      	ldr	r3, [pc, #116]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80428bc:	2201      	movs	r2, #1
 80428be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80428c0:	4b1b      	ldr	r3, [pc, #108]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80428c2:	2200      	movs	r2, #0
 80428c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80428c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80428ca:	4919      	ldr	r1, [pc, #100]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80428cc:	4819      	ldr	r0, [pc, #100]	; (8042934 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80428ce:	f004 fb67 	bl	8046fa0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80428d2:	4b17      	ldr	r3, [pc, #92]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80428d4:	2203      	movs	r2, #3
 80428d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80428d8:	4b15      	ldr	r3, [pc, #84]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80428da:	2208      	movs	r2, #8
 80428dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80428de:	4b14      	ldr	r3, [pc, #80]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80428e0:	2204      	movs	r2, #4
 80428e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80428e4:	4b12      	ldr	r3, [pc, #72]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80428e6:	2200      	movs	r2, #0
 80428e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80428ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80428ee:	4910      	ldr	r1, [pc, #64]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80428f0:	4810      	ldr	r0, [pc, #64]	; (8042934 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80428f2:	f004 fb55 	bl	8046fa0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80428f6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80428fa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80428fc:	4b0c      	ldr	r3, [pc, #48]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80428fe:	2204      	movs	r2, #4
 8042900:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8042902:	4b0b      	ldr	r3, [pc, #44]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042904:	2208      	movs	r2, #8
 8042906:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8042908:	4b09      	ldr	r3, [pc, #36]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 804290a:	2201      	movs	r2, #1
 804290c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 804290e:	68fb      	ldr	r3, [r7, #12]
 8042910:	4a07      	ldr	r2, [pc, #28]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042912:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8042914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042918:	4905      	ldr	r1, [pc, #20]	; (8042930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 804291a:	4806      	ldr	r0, [pc, #24]	; (8042934 <BSP_SDRAM_Initialization_sequence+0xbc>)
 804291c:	f004 fb40 	bl	8046fa0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8042920:	6879      	ldr	r1, [r7, #4]
 8042922:	4804      	ldr	r0, [pc, #16]	; (8042934 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8042924:	f004 fb71 	bl	804700a <HAL_SDRAM_ProgramRefreshRate>
}
 8042928:	bf00      	nop
 804292a:	3710      	adds	r7, #16
 804292c:	46bd      	mov	sp, r7
 804292e:	bd80      	pop	{r7, pc}
 8042930:	200005f0 	.word	0x200005f0
 8042934:	200005a0 	.word	0x200005a0

08042938 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8042938:	b580      	push	{r7, lr}
 804293a:	b090      	sub	sp, #64	; 0x40
 804293c:	af00      	add	r7, sp, #0
 804293e:	6078      	str	r0, [r7, #4]
 8042940:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8042942:	687b      	ldr	r3, [r7, #4]
 8042944:	2b00      	cmp	r3, #0
 8042946:	f000 80ec 	beq.w	8042b22 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 804294a:	2300      	movs	r3, #0
 804294c:	62bb      	str	r3, [r7, #40]	; 0x28
 804294e:	4b77      	ldr	r3, [pc, #476]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 8042950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042952:	4a76      	ldr	r2, [pc, #472]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 8042954:	f043 0301 	orr.w	r3, r3, #1
 8042958:	6393      	str	r3, [r2, #56]	; 0x38
 804295a:	4b74      	ldr	r3, [pc, #464]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 804295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804295e:	f003 0301 	and.w	r3, r3, #1
 8042962:	62bb      	str	r3, [r7, #40]	; 0x28
 8042964:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8042966:	2300      	movs	r3, #0
 8042968:	627b      	str	r3, [r7, #36]	; 0x24
 804296a:	4b70      	ldr	r3, [pc, #448]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 804296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804296e:	4a6f      	ldr	r2, [pc, #444]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 8042970:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8042974:	6313      	str	r3, [r2, #48]	; 0x30
 8042976:	4b6d      	ldr	r3, [pc, #436]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 8042978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804297e:	627b      	str	r3, [r7, #36]	; 0x24
 8042980:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8042982:	2300      	movs	r3, #0
 8042984:	623b      	str	r3, [r7, #32]
 8042986:	4b69      	ldr	r3, [pc, #420]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 8042988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804298a:	4a68      	ldr	r2, [pc, #416]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 804298c:	f043 0302 	orr.w	r3, r3, #2
 8042990:	6313      	str	r3, [r2, #48]	; 0x30
 8042992:	4b66      	ldr	r3, [pc, #408]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 8042994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042996:	f003 0302 	and.w	r3, r3, #2
 804299a:	623b      	str	r3, [r7, #32]
 804299c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 804299e:	2300      	movs	r3, #0
 80429a0:	61fb      	str	r3, [r7, #28]
 80429a2:	4b62      	ldr	r3, [pc, #392]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 80429a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80429a6:	4a61      	ldr	r2, [pc, #388]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 80429a8:	f043 0304 	orr.w	r3, r3, #4
 80429ac:	6313      	str	r3, [r2, #48]	; 0x30
 80429ae:	4b5f      	ldr	r3, [pc, #380]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 80429b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80429b2:	f003 0304 	and.w	r3, r3, #4
 80429b6:	61fb      	str	r3, [r7, #28]
 80429b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80429ba:	2300      	movs	r3, #0
 80429bc:	61bb      	str	r3, [r7, #24]
 80429be:	4b5b      	ldr	r3, [pc, #364]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 80429c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80429c2:	4a5a      	ldr	r2, [pc, #360]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 80429c4:	f043 0308 	orr.w	r3, r3, #8
 80429c8:	6313      	str	r3, [r2, #48]	; 0x30
 80429ca:	4b58      	ldr	r3, [pc, #352]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 80429cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80429ce:	f003 0308 	and.w	r3, r3, #8
 80429d2:	61bb      	str	r3, [r7, #24]
 80429d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80429d6:	2300      	movs	r3, #0
 80429d8:	617b      	str	r3, [r7, #20]
 80429da:	4b54      	ldr	r3, [pc, #336]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 80429dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80429de:	4a53      	ldr	r2, [pc, #332]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 80429e0:	f043 0310 	orr.w	r3, r3, #16
 80429e4:	6313      	str	r3, [r2, #48]	; 0x30
 80429e6:	4b51      	ldr	r3, [pc, #324]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 80429e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80429ea:	f003 0310 	and.w	r3, r3, #16
 80429ee:	617b      	str	r3, [r7, #20]
 80429f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80429f2:	2300      	movs	r3, #0
 80429f4:	613b      	str	r3, [r7, #16]
 80429f6:	4b4d      	ldr	r3, [pc, #308]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 80429f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80429fa:	4a4c      	ldr	r2, [pc, #304]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 80429fc:	f043 0320 	orr.w	r3, r3, #32
 8042a00:	6313      	str	r3, [r2, #48]	; 0x30
 8042a02:	4b4a      	ldr	r3, [pc, #296]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 8042a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042a06:	f003 0320 	and.w	r3, r3, #32
 8042a0a:	613b      	str	r3, [r7, #16]
 8042a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8042a0e:	2300      	movs	r3, #0
 8042a10:	60fb      	str	r3, [r7, #12]
 8042a12:	4b46      	ldr	r3, [pc, #280]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 8042a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042a16:	4a45      	ldr	r2, [pc, #276]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 8042a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8042a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8042a1e:	4b43      	ldr	r3, [pc, #268]	; (8042b2c <BSP_SDRAM_MspInit+0x1f4>)
 8042a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042a26:	60fb      	str	r3, [r7, #12]
 8042a28:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8042a2a:	2302      	movs	r3, #2
 8042a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8042a2e:	2302      	movs	r3, #2
 8042a30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8042a32:	2300      	movs	r3, #0
 8042a34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8042a36:	230c      	movs	r3, #12
 8042a38:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8042a3a:	2360      	movs	r3, #96	; 0x60
 8042a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8042a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042a42:	4619      	mov	r1, r3
 8042a44:	483a      	ldr	r0, [pc, #232]	; (8042b30 <BSP_SDRAM_MspInit+0x1f8>)
 8042a46:	f000 ff41 	bl	80438cc <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8042a4a:	2301      	movs	r3, #1
 8042a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8042a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042a52:	4619      	mov	r1, r3
 8042a54:	4837      	ldr	r0, [pc, #220]	; (8042b34 <BSP_SDRAM_MspInit+0x1fc>)
 8042a56:	f000 ff39 	bl	80438cc <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8042a5a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8042a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8042a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042a64:	4619      	mov	r1, r3
 8042a66:	4834      	ldr	r0, [pc, #208]	; (8042b38 <BSP_SDRAM_MspInit+0x200>)
 8042a68:	f000 ff30 	bl	80438cc <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8042a6c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8042a70:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8042a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042a76:	4619      	mov	r1, r3
 8042a78:	4830      	ldr	r0, [pc, #192]	; (8042b3c <BSP_SDRAM_MspInit+0x204>)
 8042a7a:	f000 ff27 	bl	80438cc <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8042a7e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8042a82:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8042a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042a88:	4619      	mov	r1, r3
 8042a8a:	482d      	ldr	r0, [pc, #180]	; (8042b40 <BSP_SDRAM_MspInit+0x208>)
 8042a8c:	f000 ff1e 	bl	80438cc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8042a90:	f248 1333 	movw	r3, #33075	; 0x8133
 8042a94:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8042a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042a9a:	4619      	mov	r1, r3
 8042a9c:	4829      	ldr	r0, [pc, #164]	; (8042b44 <BSP_SDRAM_MspInit+0x20c>)
 8042a9e:	f000 ff15 	bl	80438cc <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8042aa2:	4b29      	ldr	r3, [pc, #164]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042aa4:	2200      	movs	r2, #0
 8042aa6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8042aa8:	4b27      	ldr	r3, [pc, #156]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042aaa:	2280      	movs	r2, #128	; 0x80
 8042aac:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8042aae:	4b26      	ldr	r3, [pc, #152]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8042ab4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8042ab6:	4b24      	ldr	r3, [pc, #144]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042ab8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8042abc:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8042abe:	4b22      	ldr	r3, [pc, #136]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8042ac4:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8042ac6:	4b20      	ldr	r3, [pc, #128]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042ac8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8042acc:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8042ace:	4b1e      	ldr	r3, [pc, #120]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042ad0:	2200      	movs	r2, #0
 8042ad2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8042ad4:	4b1c      	ldr	r3, [pc, #112]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042ad6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8042ada:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8042adc:	4b1a      	ldr	r3, [pc, #104]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042ade:	2200      	movs	r2, #0
 8042ae0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8042ae2:	4b19      	ldr	r3, [pc, #100]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042ae4:	2203      	movs	r2, #3
 8042ae6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8042ae8:	4b17      	ldr	r3, [pc, #92]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042aea:	2200      	movs	r2, #0
 8042aec:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8042aee:	4b16      	ldr	r3, [pc, #88]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042af0:	2200      	movs	r2, #0
 8042af2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8042af4:	4b14      	ldr	r3, [pc, #80]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042af6:	4a15      	ldr	r2, [pc, #84]	; (8042b4c <BSP_SDRAM_MspInit+0x214>)
 8042af8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8042afa:	687b      	ldr	r3, [r7, #4]
 8042afc:	4a12      	ldr	r2, [pc, #72]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042afe:	631a      	str	r2, [r3, #48]	; 0x30
 8042b00:	4a11      	ldr	r2, [pc, #68]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042b02:	687b      	ldr	r3, [r7, #4]
 8042b04:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8042b06:	4810      	ldr	r0, [pc, #64]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042b08:	f000 fa34 	bl	8042f74 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8042b0c:	480e      	ldr	r0, [pc, #56]	; (8042b48 <BSP_SDRAM_MspInit+0x210>)
 8042b0e:	f000 f983 	bl	8042e18 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8042b12:	2200      	movs	r2, #0
 8042b14:	210f      	movs	r1, #15
 8042b16:	2038      	movs	r0, #56	; 0x38
 8042b18:	f000 f938 	bl	8042d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8042b1c:	2038      	movs	r0, #56	; 0x38
 8042b1e:	f000 f951 	bl	8042dc4 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8042b22:	bf00      	nop
 8042b24:	3740      	adds	r7, #64	; 0x40
 8042b26:	46bd      	mov	sp, r7
 8042b28:	bd80      	pop	{r7, pc}
 8042b2a:	bf00      	nop
 8042b2c:	40023800 	.word	0x40023800
 8042b30:	40020400 	.word	0x40020400
 8042b34:	40020800 	.word	0x40020800
 8042b38:	40020c00 	.word	0x40020c00
 8042b3c:	40021000 	.word	0x40021000
 8042b40:	40021400 	.word	0x40021400
 8042b44:	40021800 	.word	0x40021800
 8042b48:	20000600 	.word	0x20000600
 8042b4c:	40026410 	.word	0x40026410

08042b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8042b50:	b580      	push	{r7, lr}
 8042b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8042b54:	4b0e      	ldr	r3, [pc, #56]	; (8042b90 <HAL_Init+0x40>)
 8042b56:	681b      	ldr	r3, [r3, #0]
 8042b58:	4a0d      	ldr	r2, [pc, #52]	; (8042b90 <HAL_Init+0x40>)
 8042b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8042b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8042b60:	4b0b      	ldr	r3, [pc, #44]	; (8042b90 <HAL_Init+0x40>)
 8042b62:	681b      	ldr	r3, [r3, #0]
 8042b64:	4a0a      	ldr	r2, [pc, #40]	; (8042b90 <HAL_Init+0x40>)
 8042b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8042b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8042b6c:	4b08      	ldr	r3, [pc, #32]	; (8042b90 <HAL_Init+0x40>)
 8042b6e:	681b      	ldr	r3, [r3, #0]
 8042b70:	4a07      	ldr	r2, [pc, #28]	; (8042b90 <HAL_Init+0x40>)
 8042b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8042b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8042b78:	2003      	movs	r0, #3
 8042b7a:	f000 f8fc 	bl	8042d76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8042b7e:	200f      	movs	r0, #15
 8042b80:	f7fe fcc0 	bl	8041504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8042b84:	f7fe f946 	bl	8040e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8042b88:	2300      	movs	r3, #0
}
 8042b8a:	4618      	mov	r0, r3
 8042b8c:	bd80      	pop	{r7, pc}
 8042b8e:	bf00      	nop
 8042b90:	40023c00 	.word	0x40023c00

08042b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8042b94:	b480      	push	{r7}
 8042b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8042b98:	4b06      	ldr	r3, [pc, #24]	; (8042bb4 <HAL_IncTick+0x20>)
 8042b9a:	781b      	ldrb	r3, [r3, #0]
 8042b9c:	461a      	mov	r2, r3
 8042b9e:	4b06      	ldr	r3, [pc, #24]	; (8042bb8 <HAL_IncTick+0x24>)
 8042ba0:	681b      	ldr	r3, [r3, #0]
 8042ba2:	4413      	add	r3, r2
 8042ba4:	4a04      	ldr	r2, [pc, #16]	; (8042bb8 <HAL_IncTick+0x24>)
 8042ba6:	6013      	str	r3, [r2, #0]
}
 8042ba8:	bf00      	nop
 8042baa:	46bd      	mov	sp, r7
 8042bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042bb0:	4770      	bx	lr
 8042bb2:	bf00      	nop
 8042bb4:	20000058 	.word	0x20000058
 8042bb8:	20000660 	.word	0x20000660

08042bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8042bbc:	b480      	push	{r7}
 8042bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8042bc0:	4b03      	ldr	r3, [pc, #12]	; (8042bd0 <HAL_GetTick+0x14>)
 8042bc2:	681b      	ldr	r3, [r3, #0]
}
 8042bc4:	4618      	mov	r0, r3
 8042bc6:	46bd      	mov	sp, r7
 8042bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042bcc:	4770      	bx	lr
 8042bce:	bf00      	nop
 8042bd0:	20000660 	.word	0x20000660

08042bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8042bd4:	b580      	push	{r7, lr}
 8042bd6:	b084      	sub	sp, #16
 8042bd8:	af00      	add	r7, sp, #0
 8042bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8042bdc:	f7ff ffee 	bl	8042bbc <HAL_GetTick>
 8042be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8042be2:	687b      	ldr	r3, [r7, #4]
 8042be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8042be6:	68fb      	ldr	r3, [r7, #12]
 8042be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042bec:	d005      	beq.n	8042bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8042bee:	4b0a      	ldr	r3, [pc, #40]	; (8042c18 <HAL_Delay+0x44>)
 8042bf0:	781b      	ldrb	r3, [r3, #0]
 8042bf2:	461a      	mov	r2, r3
 8042bf4:	68fb      	ldr	r3, [r7, #12]
 8042bf6:	4413      	add	r3, r2
 8042bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8042bfa:	bf00      	nop
 8042bfc:	f7ff ffde 	bl	8042bbc <HAL_GetTick>
 8042c00:	4602      	mov	r2, r0
 8042c02:	68bb      	ldr	r3, [r7, #8]
 8042c04:	1ad3      	subs	r3, r2, r3
 8042c06:	68fa      	ldr	r2, [r7, #12]
 8042c08:	429a      	cmp	r2, r3
 8042c0a:	d8f7      	bhi.n	8042bfc <HAL_Delay+0x28>
  {
  }
}
 8042c0c:	bf00      	nop
 8042c0e:	bf00      	nop
 8042c10:	3710      	adds	r7, #16
 8042c12:	46bd      	mov	sp, r7
 8042c14:	bd80      	pop	{r7, pc}
 8042c16:	bf00      	nop
 8042c18:	20000058 	.word	0x20000058

08042c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8042c1c:	b480      	push	{r7}
 8042c1e:	b085      	sub	sp, #20
 8042c20:	af00      	add	r7, sp, #0
 8042c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8042c24:	687b      	ldr	r3, [r7, #4]
 8042c26:	f003 0307 	and.w	r3, r3, #7
 8042c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8042c2c:	4b0c      	ldr	r3, [pc, #48]	; (8042c60 <__NVIC_SetPriorityGrouping+0x44>)
 8042c2e:	68db      	ldr	r3, [r3, #12]
 8042c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8042c32:	68ba      	ldr	r2, [r7, #8]
 8042c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8042c38:	4013      	ands	r3, r2
 8042c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8042c3c:	68fb      	ldr	r3, [r7, #12]
 8042c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8042c40:	68bb      	ldr	r3, [r7, #8]
 8042c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8042c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8042c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8042c4e:	4a04      	ldr	r2, [pc, #16]	; (8042c60 <__NVIC_SetPriorityGrouping+0x44>)
 8042c50:	68bb      	ldr	r3, [r7, #8]
 8042c52:	60d3      	str	r3, [r2, #12]
}
 8042c54:	bf00      	nop
 8042c56:	3714      	adds	r7, #20
 8042c58:	46bd      	mov	sp, r7
 8042c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c5e:	4770      	bx	lr
 8042c60:	e000ed00 	.word	0xe000ed00

08042c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8042c64:	b480      	push	{r7}
 8042c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8042c68:	4b04      	ldr	r3, [pc, #16]	; (8042c7c <__NVIC_GetPriorityGrouping+0x18>)
 8042c6a:	68db      	ldr	r3, [r3, #12]
 8042c6c:	0a1b      	lsrs	r3, r3, #8
 8042c6e:	f003 0307 	and.w	r3, r3, #7
}
 8042c72:	4618      	mov	r0, r3
 8042c74:	46bd      	mov	sp, r7
 8042c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c7a:	4770      	bx	lr
 8042c7c:	e000ed00 	.word	0xe000ed00

08042c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8042c80:	b480      	push	{r7}
 8042c82:	b083      	sub	sp, #12
 8042c84:	af00      	add	r7, sp, #0
 8042c86:	4603      	mov	r3, r0
 8042c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8042c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042c8e:	2b00      	cmp	r3, #0
 8042c90:	db0b      	blt.n	8042caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8042c92:	79fb      	ldrb	r3, [r7, #7]
 8042c94:	f003 021f 	and.w	r2, r3, #31
 8042c98:	4907      	ldr	r1, [pc, #28]	; (8042cb8 <__NVIC_EnableIRQ+0x38>)
 8042c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042c9e:	095b      	lsrs	r3, r3, #5
 8042ca0:	2001      	movs	r0, #1
 8042ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8042ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8042caa:	bf00      	nop
 8042cac:	370c      	adds	r7, #12
 8042cae:	46bd      	mov	sp, r7
 8042cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042cb4:	4770      	bx	lr
 8042cb6:	bf00      	nop
 8042cb8:	e000e100 	.word	0xe000e100

08042cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8042cbc:	b480      	push	{r7}
 8042cbe:	b083      	sub	sp, #12
 8042cc0:	af00      	add	r7, sp, #0
 8042cc2:	4603      	mov	r3, r0
 8042cc4:	6039      	str	r1, [r7, #0]
 8042cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8042cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042ccc:	2b00      	cmp	r3, #0
 8042cce:	db0a      	blt.n	8042ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8042cd0:	683b      	ldr	r3, [r7, #0]
 8042cd2:	b2da      	uxtb	r2, r3
 8042cd4:	490c      	ldr	r1, [pc, #48]	; (8042d08 <__NVIC_SetPriority+0x4c>)
 8042cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042cda:	0112      	lsls	r2, r2, #4
 8042cdc:	b2d2      	uxtb	r2, r2
 8042cde:	440b      	add	r3, r1
 8042ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8042ce4:	e00a      	b.n	8042cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8042ce6:	683b      	ldr	r3, [r7, #0]
 8042ce8:	b2da      	uxtb	r2, r3
 8042cea:	4908      	ldr	r1, [pc, #32]	; (8042d0c <__NVIC_SetPriority+0x50>)
 8042cec:	79fb      	ldrb	r3, [r7, #7]
 8042cee:	f003 030f 	and.w	r3, r3, #15
 8042cf2:	3b04      	subs	r3, #4
 8042cf4:	0112      	lsls	r2, r2, #4
 8042cf6:	b2d2      	uxtb	r2, r2
 8042cf8:	440b      	add	r3, r1
 8042cfa:	761a      	strb	r2, [r3, #24]
}
 8042cfc:	bf00      	nop
 8042cfe:	370c      	adds	r7, #12
 8042d00:	46bd      	mov	sp, r7
 8042d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042d06:	4770      	bx	lr
 8042d08:	e000e100 	.word	0xe000e100
 8042d0c:	e000ed00 	.word	0xe000ed00

08042d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8042d10:	b480      	push	{r7}
 8042d12:	b089      	sub	sp, #36	; 0x24
 8042d14:	af00      	add	r7, sp, #0
 8042d16:	60f8      	str	r0, [r7, #12]
 8042d18:	60b9      	str	r1, [r7, #8]
 8042d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8042d1c:	68fb      	ldr	r3, [r7, #12]
 8042d1e:	f003 0307 	and.w	r3, r3, #7
 8042d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8042d24:	69fb      	ldr	r3, [r7, #28]
 8042d26:	f1c3 0307 	rsb	r3, r3, #7
 8042d2a:	2b04      	cmp	r3, #4
 8042d2c:	bf28      	it	cs
 8042d2e:	2304      	movcs	r3, #4
 8042d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8042d32:	69fb      	ldr	r3, [r7, #28]
 8042d34:	3304      	adds	r3, #4
 8042d36:	2b06      	cmp	r3, #6
 8042d38:	d902      	bls.n	8042d40 <NVIC_EncodePriority+0x30>
 8042d3a:	69fb      	ldr	r3, [r7, #28]
 8042d3c:	3b03      	subs	r3, #3
 8042d3e:	e000      	b.n	8042d42 <NVIC_EncodePriority+0x32>
 8042d40:	2300      	movs	r3, #0
 8042d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8042d44:	f04f 32ff 	mov.w	r2, #4294967295
 8042d48:	69bb      	ldr	r3, [r7, #24]
 8042d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8042d4e:	43da      	mvns	r2, r3
 8042d50:	68bb      	ldr	r3, [r7, #8]
 8042d52:	401a      	ands	r2, r3
 8042d54:	697b      	ldr	r3, [r7, #20]
 8042d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8042d58:	f04f 31ff 	mov.w	r1, #4294967295
 8042d5c:	697b      	ldr	r3, [r7, #20]
 8042d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8042d62:	43d9      	mvns	r1, r3
 8042d64:	687b      	ldr	r3, [r7, #4]
 8042d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8042d68:	4313      	orrs	r3, r2
         );
}
 8042d6a:	4618      	mov	r0, r3
 8042d6c:	3724      	adds	r7, #36	; 0x24
 8042d6e:	46bd      	mov	sp, r7
 8042d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042d74:	4770      	bx	lr

08042d76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8042d76:	b580      	push	{r7, lr}
 8042d78:	b082      	sub	sp, #8
 8042d7a:	af00      	add	r7, sp, #0
 8042d7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8042d7e:	6878      	ldr	r0, [r7, #4]
 8042d80:	f7ff ff4c 	bl	8042c1c <__NVIC_SetPriorityGrouping>
}
 8042d84:	bf00      	nop
 8042d86:	3708      	adds	r7, #8
 8042d88:	46bd      	mov	sp, r7
 8042d8a:	bd80      	pop	{r7, pc}

08042d8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8042d8c:	b580      	push	{r7, lr}
 8042d8e:	b086      	sub	sp, #24
 8042d90:	af00      	add	r7, sp, #0
 8042d92:	4603      	mov	r3, r0
 8042d94:	60b9      	str	r1, [r7, #8]
 8042d96:	607a      	str	r2, [r7, #4]
 8042d98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8042d9a:	2300      	movs	r3, #0
 8042d9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8042d9e:	f7ff ff61 	bl	8042c64 <__NVIC_GetPriorityGrouping>
 8042da2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8042da4:	687a      	ldr	r2, [r7, #4]
 8042da6:	68b9      	ldr	r1, [r7, #8]
 8042da8:	6978      	ldr	r0, [r7, #20]
 8042daa:	f7ff ffb1 	bl	8042d10 <NVIC_EncodePriority>
 8042dae:	4602      	mov	r2, r0
 8042db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8042db4:	4611      	mov	r1, r2
 8042db6:	4618      	mov	r0, r3
 8042db8:	f7ff ff80 	bl	8042cbc <__NVIC_SetPriority>
}
 8042dbc:	bf00      	nop
 8042dbe:	3718      	adds	r7, #24
 8042dc0:	46bd      	mov	sp, r7
 8042dc2:	bd80      	pop	{r7, pc}

08042dc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8042dc4:	b580      	push	{r7, lr}
 8042dc6:	b082      	sub	sp, #8
 8042dc8:	af00      	add	r7, sp, #0
 8042dca:	4603      	mov	r3, r0
 8042dcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8042dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042dd2:	4618      	mov	r0, r3
 8042dd4:	f7ff ff54 	bl	8042c80 <__NVIC_EnableIRQ>
}
 8042dd8:	bf00      	nop
 8042dda:	3708      	adds	r7, #8
 8042ddc:	46bd      	mov	sp, r7
 8042dde:	bd80      	pop	{r7, pc}

08042de0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8042de0:	b580      	push	{r7, lr}
 8042de2:	b082      	sub	sp, #8
 8042de4:	af00      	add	r7, sp, #0
 8042de6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8042de8:	687b      	ldr	r3, [r7, #4]
 8042dea:	2b00      	cmp	r3, #0
 8042dec:	d101      	bne.n	8042df2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8042dee:	2301      	movs	r3, #1
 8042df0:	e00e      	b.n	8042e10 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8042df2:	687b      	ldr	r3, [r7, #4]
 8042df4:	795b      	ldrb	r3, [r3, #5]
 8042df6:	b2db      	uxtb	r3, r3
 8042df8:	2b00      	cmp	r3, #0
 8042dfa:	d105      	bne.n	8042e08 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8042dfc:	687b      	ldr	r3, [r7, #4]
 8042dfe:	2200      	movs	r2, #0
 8042e00:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8042e02:	6878      	ldr	r0, [r7, #4]
 8042e04:	f7fe f82e 	bl	8040e64 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8042e08:	687b      	ldr	r3, [r7, #4]
 8042e0a:	2201      	movs	r2, #1
 8042e0c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8042e0e:	2300      	movs	r3, #0
}
 8042e10:	4618      	mov	r0, r3
 8042e12:	3708      	adds	r7, #8
 8042e14:	46bd      	mov	sp, r7
 8042e16:	bd80      	pop	{r7, pc}

08042e18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8042e18:	b580      	push	{r7, lr}
 8042e1a:	b086      	sub	sp, #24
 8042e1c:	af00      	add	r7, sp, #0
 8042e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8042e20:	2300      	movs	r3, #0
 8042e22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8042e24:	f7ff feca 	bl	8042bbc <HAL_GetTick>
 8042e28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8042e2a:	687b      	ldr	r3, [r7, #4]
 8042e2c:	2b00      	cmp	r3, #0
 8042e2e:	d101      	bne.n	8042e34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8042e30:	2301      	movs	r3, #1
 8042e32:	e099      	b.n	8042f68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8042e34:	687b      	ldr	r3, [r7, #4]
 8042e36:	2202      	movs	r2, #2
 8042e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8042e3c:	687b      	ldr	r3, [r7, #4]
 8042e3e:	2200      	movs	r2, #0
 8042e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8042e44:	687b      	ldr	r3, [r7, #4]
 8042e46:	681b      	ldr	r3, [r3, #0]
 8042e48:	681a      	ldr	r2, [r3, #0]
 8042e4a:	687b      	ldr	r3, [r7, #4]
 8042e4c:	681b      	ldr	r3, [r3, #0]
 8042e4e:	f022 0201 	bic.w	r2, r2, #1
 8042e52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8042e54:	e00f      	b.n	8042e76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8042e56:	f7ff feb1 	bl	8042bbc <HAL_GetTick>
 8042e5a:	4602      	mov	r2, r0
 8042e5c:	693b      	ldr	r3, [r7, #16]
 8042e5e:	1ad3      	subs	r3, r2, r3
 8042e60:	2b05      	cmp	r3, #5
 8042e62:	d908      	bls.n	8042e76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8042e64:	687b      	ldr	r3, [r7, #4]
 8042e66:	2220      	movs	r2, #32
 8042e68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8042e6a:	687b      	ldr	r3, [r7, #4]
 8042e6c:	2203      	movs	r2, #3
 8042e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8042e72:	2303      	movs	r3, #3
 8042e74:	e078      	b.n	8042f68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8042e76:	687b      	ldr	r3, [r7, #4]
 8042e78:	681b      	ldr	r3, [r3, #0]
 8042e7a:	681b      	ldr	r3, [r3, #0]
 8042e7c:	f003 0301 	and.w	r3, r3, #1
 8042e80:	2b00      	cmp	r3, #0
 8042e82:	d1e8      	bne.n	8042e56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8042e84:	687b      	ldr	r3, [r7, #4]
 8042e86:	681b      	ldr	r3, [r3, #0]
 8042e88:	681b      	ldr	r3, [r3, #0]
 8042e8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8042e8c:	697a      	ldr	r2, [r7, #20]
 8042e8e:	4b38      	ldr	r3, [pc, #224]	; (8042f70 <HAL_DMA_Init+0x158>)
 8042e90:	4013      	ands	r3, r2
 8042e92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8042e94:	687b      	ldr	r3, [r7, #4]
 8042e96:	685a      	ldr	r2, [r3, #4]
 8042e98:	687b      	ldr	r3, [r7, #4]
 8042e9a:	689b      	ldr	r3, [r3, #8]
 8042e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8042e9e:	687b      	ldr	r3, [r7, #4]
 8042ea0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8042ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8042ea4:	687b      	ldr	r3, [r7, #4]
 8042ea6:	691b      	ldr	r3, [r3, #16]
 8042ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8042eaa:	687b      	ldr	r3, [r7, #4]
 8042eac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8042eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8042eb0:	687b      	ldr	r3, [r7, #4]
 8042eb2:	699b      	ldr	r3, [r3, #24]
 8042eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8042eb6:	687b      	ldr	r3, [r7, #4]
 8042eb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8042eba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8042ebc:	687b      	ldr	r3, [r7, #4]
 8042ebe:	6a1b      	ldr	r3, [r3, #32]
 8042ec0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8042ec2:	697a      	ldr	r2, [r7, #20]
 8042ec4:	4313      	orrs	r3, r2
 8042ec6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8042ec8:	687b      	ldr	r3, [r7, #4]
 8042eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042ecc:	2b04      	cmp	r3, #4
 8042ece:	d107      	bne.n	8042ee0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8042ed0:	687b      	ldr	r3, [r7, #4]
 8042ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8042ed4:	687b      	ldr	r3, [r7, #4]
 8042ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042ed8:	4313      	orrs	r3, r2
 8042eda:	697a      	ldr	r2, [r7, #20]
 8042edc:	4313      	orrs	r3, r2
 8042ede:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8042ee0:	687b      	ldr	r3, [r7, #4]
 8042ee2:	681b      	ldr	r3, [r3, #0]
 8042ee4:	697a      	ldr	r2, [r7, #20]
 8042ee6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8042ee8:	687b      	ldr	r3, [r7, #4]
 8042eea:	681b      	ldr	r3, [r3, #0]
 8042eec:	695b      	ldr	r3, [r3, #20]
 8042eee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8042ef0:	697b      	ldr	r3, [r7, #20]
 8042ef2:	f023 0307 	bic.w	r3, r3, #7
 8042ef6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8042ef8:	687b      	ldr	r3, [r7, #4]
 8042efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042efc:	697a      	ldr	r2, [r7, #20]
 8042efe:	4313      	orrs	r3, r2
 8042f00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8042f02:	687b      	ldr	r3, [r7, #4]
 8042f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042f06:	2b04      	cmp	r3, #4
 8042f08:	d117      	bne.n	8042f3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8042f0a:	687b      	ldr	r3, [r7, #4]
 8042f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042f0e:	697a      	ldr	r2, [r7, #20]
 8042f10:	4313      	orrs	r3, r2
 8042f12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8042f14:	687b      	ldr	r3, [r7, #4]
 8042f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042f18:	2b00      	cmp	r3, #0
 8042f1a:	d00e      	beq.n	8042f3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8042f1c:	6878      	ldr	r0, [r7, #4]
 8042f1e:	f000 f8bd 	bl	804309c <DMA_CheckFifoParam>
 8042f22:	4603      	mov	r3, r0
 8042f24:	2b00      	cmp	r3, #0
 8042f26:	d008      	beq.n	8042f3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8042f28:	687b      	ldr	r3, [r7, #4]
 8042f2a:	2240      	movs	r2, #64	; 0x40
 8042f2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8042f2e:	687b      	ldr	r3, [r7, #4]
 8042f30:	2201      	movs	r2, #1
 8042f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8042f36:	2301      	movs	r3, #1
 8042f38:	e016      	b.n	8042f68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8042f3a:	687b      	ldr	r3, [r7, #4]
 8042f3c:	681b      	ldr	r3, [r3, #0]
 8042f3e:	697a      	ldr	r2, [r7, #20]
 8042f40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8042f42:	6878      	ldr	r0, [r7, #4]
 8042f44:	f000 f874 	bl	8043030 <DMA_CalcBaseAndBitshift>
 8042f48:	4603      	mov	r3, r0
 8042f4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8042f4c:	687b      	ldr	r3, [r7, #4]
 8042f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8042f50:	223f      	movs	r2, #63	; 0x3f
 8042f52:	409a      	lsls	r2, r3
 8042f54:	68fb      	ldr	r3, [r7, #12]
 8042f56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8042f58:	687b      	ldr	r3, [r7, #4]
 8042f5a:	2200      	movs	r2, #0
 8042f5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8042f5e:	687b      	ldr	r3, [r7, #4]
 8042f60:	2201      	movs	r2, #1
 8042f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8042f66:	2300      	movs	r3, #0
}
 8042f68:	4618      	mov	r0, r3
 8042f6a:	3718      	adds	r7, #24
 8042f6c:	46bd      	mov	sp, r7
 8042f6e:	bd80      	pop	{r7, pc}
 8042f70:	f010803f 	.word	0xf010803f

08042f74 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8042f74:	b580      	push	{r7, lr}
 8042f76:	b084      	sub	sp, #16
 8042f78:	af00      	add	r7, sp, #0
 8042f7a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8042f7c:	687b      	ldr	r3, [r7, #4]
 8042f7e:	2b00      	cmp	r3, #0
 8042f80:	d101      	bne.n	8042f86 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8042f82:	2301      	movs	r3, #1
 8042f84:	e050      	b.n	8043028 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8042f86:	687b      	ldr	r3, [r7, #4]
 8042f88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8042f8c:	b2db      	uxtb	r3, r3
 8042f8e:	2b02      	cmp	r3, #2
 8042f90:	d101      	bne.n	8042f96 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8042f92:	2302      	movs	r3, #2
 8042f94:	e048      	b.n	8043028 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8042f96:	687b      	ldr	r3, [r7, #4]
 8042f98:	681b      	ldr	r3, [r3, #0]
 8042f9a:	681a      	ldr	r2, [r3, #0]
 8042f9c:	687b      	ldr	r3, [r7, #4]
 8042f9e:	681b      	ldr	r3, [r3, #0]
 8042fa0:	f022 0201 	bic.w	r2, r2, #1
 8042fa4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8042fa6:	687b      	ldr	r3, [r7, #4]
 8042fa8:	681b      	ldr	r3, [r3, #0]
 8042faa:	2200      	movs	r2, #0
 8042fac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8042fae:	687b      	ldr	r3, [r7, #4]
 8042fb0:	681b      	ldr	r3, [r3, #0]
 8042fb2:	2200      	movs	r2, #0
 8042fb4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8042fb6:	687b      	ldr	r3, [r7, #4]
 8042fb8:	681b      	ldr	r3, [r3, #0]
 8042fba:	2200      	movs	r2, #0
 8042fbc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8042fbe:	687b      	ldr	r3, [r7, #4]
 8042fc0:	681b      	ldr	r3, [r3, #0]
 8042fc2:	2200      	movs	r2, #0
 8042fc4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8042fc6:	687b      	ldr	r3, [r7, #4]
 8042fc8:	681b      	ldr	r3, [r3, #0]
 8042fca:	2200      	movs	r2, #0
 8042fcc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8042fce:	687b      	ldr	r3, [r7, #4]
 8042fd0:	681b      	ldr	r3, [r3, #0]
 8042fd2:	2221      	movs	r2, #33	; 0x21
 8042fd4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8042fd6:	6878      	ldr	r0, [r7, #4]
 8042fd8:	f000 f82a 	bl	8043030 <DMA_CalcBaseAndBitshift>
 8042fdc:	4603      	mov	r3, r0
 8042fde:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8042fe0:	687b      	ldr	r3, [r7, #4]
 8042fe2:	2200      	movs	r2, #0
 8042fe4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8042fe6:	687b      	ldr	r3, [r7, #4]
 8042fe8:	2200      	movs	r2, #0
 8042fea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8042fec:	687b      	ldr	r3, [r7, #4]
 8042fee:	2200      	movs	r2, #0
 8042ff0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8042ff2:	687b      	ldr	r3, [r7, #4]
 8042ff4:	2200      	movs	r2, #0
 8042ff6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8042ff8:	687b      	ldr	r3, [r7, #4]
 8042ffa:	2200      	movs	r2, #0
 8042ffc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8042ffe:	687b      	ldr	r3, [r7, #4]
 8043000:	2200      	movs	r2, #0
 8043002:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043004:	687b      	ldr	r3, [r7, #4]
 8043006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043008:	223f      	movs	r2, #63	; 0x3f
 804300a:	409a      	lsls	r2, r3
 804300c:	68fb      	ldr	r3, [r7, #12]
 804300e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8043010:	687b      	ldr	r3, [r7, #4]
 8043012:	2200      	movs	r2, #0
 8043014:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8043016:	687b      	ldr	r3, [r7, #4]
 8043018:	2200      	movs	r2, #0
 804301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 804301e:	687b      	ldr	r3, [r7, #4]
 8043020:	2200      	movs	r2, #0
 8043022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8043026:	2300      	movs	r3, #0
}
 8043028:	4618      	mov	r0, r3
 804302a:	3710      	adds	r7, #16
 804302c:	46bd      	mov	sp, r7
 804302e:	bd80      	pop	{r7, pc}

08043030 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8043030:	b480      	push	{r7}
 8043032:	b085      	sub	sp, #20
 8043034:	af00      	add	r7, sp, #0
 8043036:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8043038:	687b      	ldr	r3, [r7, #4]
 804303a:	681b      	ldr	r3, [r3, #0]
 804303c:	b2db      	uxtb	r3, r3
 804303e:	3b10      	subs	r3, #16
 8043040:	4a14      	ldr	r2, [pc, #80]	; (8043094 <DMA_CalcBaseAndBitshift+0x64>)
 8043042:	fba2 2303 	umull	r2, r3, r2, r3
 8043046:	091b      	lsrs	r3, r3, #4
 8043048:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 804304a:	4a13      	ldr	r2, [pc, #76]	; (8043098 <DMA_CalcBaseAndBitshift+0x68>)
 804304c:	68fb      	ldr	r3, [r7, #12]
 804304e:	4413      	add	r3, r2
 8043050:	781b      	ldrb	r3, [r3, #0]
 8043052:	461a      	mov	r2, r3
 8043054:	687b      	ldr	r3, [r7, #4]
 8043056:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8043058:	68fb      	ldr	r3, [r7, #12]
 804305a:	2b03      	cmp	r3, #3
 804305c:	d909      	bls.n	8043072 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 804305e:	687b      	ldr	r3, [r7, #4]
 8043060:	681b      	ldr	r3, [r3, #0]
 8043062:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8043066:	f023 0303 	bic.w	r3, r3, #3
 804306a:	1d1a      	adds	r2, r3, #4
 804306c:	687b      	ldr	r3, [r7, #4]
 804306e:	659a      	str	r2, [r3, #88]	; 0x58
 8043070:	e007      	b.n	8043082 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8043072:	687b      	ldr	r3, [r7, #4]
 8043074:	681b      	ldr	r3, [r3, #0]
 8043076:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 804307a:	f023 0303 	bic.w	r3, r3, #3
 804307e:	687a      	ldr	r2, [r7, #4]
 8043080:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8043082:	687b      	ldr	r3, [r7, #4]
 8043084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8043086:	4618      	mov	r0, r3
 8043088:	3714      	adds	r7, #20
 804308a:	46bd      	mov	sp, r7
 804308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043090:	4770      	bx	lr
 8043092:	bf00      	nop
 8043094:	aaaaaaab 	.word	0xaaaaaaab
 8043098:	0804eb98 	.word	0x0804eb98

0804309c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 804309c:	b480      	push	{r7}
 804309e:	b085      	sub	sp, #20
 80430a0:	af00      	add	r7, sp, #0
 80430a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80430a4:	2300      	movs	r3, #0
 80430a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80430a8:	687b      	ldr	r3, [r7, #4]
 80430aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80430ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80430ae:	687b      	ldr	r3, [r7, #4]
 80430b0:	699b      	ldr	r3, [r3, #24]
 80430b2:	2b00      	cmp	r3, #0
 80430b4:	d11f      	bne.n	80430f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80430b6:	68bb      	ldr	r3, [r7, #8]
 80430b8:	2b03      	cmp	r3, #3
 80430ba:	d856      	bhi.n	804316a <DMA_CheckFifoParam+0xce>
 80430bc:	a201      	add	r2, pc, #4	; (adr r2, 80430c4 <DMA_CheckFifoParam+0x28>)
 80430be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80430c2:	bf00      	nop
 80430c4:	080430d5 	.word	0x080430d5
 80430c8:	080430e7 	.word	0x080430e7
 80430cc:	080430d5 	.word	0x080430d5
 80430d0:	0804316b 	.word	0x0804316b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80430d4:	687b      	ldr	r3, [r7, #4]
 80430d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80430d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80430dc:	2b00      	cmp	r3, #0
 80430de:	d046      	beq.n	804316e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80430e0:	2301      	movs	r3, #1
 80430e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80430e4:	e043      	b.n	804316e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80430e6:	687b      	ldr	r3, [r7, #4]
 80430e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80430ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80430ee:	d140      	bne.n	8043172 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80430f0:	2301      	movs	r3, #1
 80430f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80430f4:	e03d      	b.n	8043172 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80430f6:	687b      	ldr	r3, [r7, #4]
 80430f8:	699b      	ldr	r3, [r3, #24]
 80430fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80430fe:	d121      	bne.n	8043144 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8043100:	68bb      	ldr	r3, [r7, #8]
 8043102:	2b03      	cmp	r3, #3
 8043104:	d837      	bhi.n	8043176 <DMA_CheckFifoParam+0xda>
 8043106:	a201      	add	r2, pc, #4	; (adr r2, 804310c <DMA_CheckFifoParam+0x70>)
 8043108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804310c:	0804311d 	.word	0x0804311d
 8043110:	08043123 	.word	0x08043123
 8043114:	0804311d 	.word	0x0804311d
 8043118:	08043135 	.word	0x08043135
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 804311c:	2301      	movs	r3, #1
 804311e:	73fb      	strb	r3, [r7, #15]
      break;
 8043120:	e030      	b.n	8043184 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8043122:	687b      	ldr	r3, [r7, #4]
 8043124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804312a:	2b00      	cmp	r3, #0
 804312c:	d025      	beq.n	804317a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 804312e:	2301      	movs	r3, #1
 8043130:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8043132:	e022      	b.n	804317a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8043134:	687b      	ldr	r3, [r7, #4]
 8043136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043138:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 804313c:	d11f      	bne.n	804317e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 804313e:	2301      	movs	r3, #1
 8043140:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8043142:	e01c      	b.n	804317e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8043144:	68bb      	ldr	r3, [r7, #8]
 8043146:	2b02      	cmp	r3, #2
 8043148:	d903      	bls.n	8043152 <DMA_CheckFifoParam+0xb6>
 804314a:	68bb      	ldr	r3, [r7, #8]
 804314c:	2b03      	cmp	r3, #3
 804314e:	d003      	beq.n	8043158 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8043150:	e018      	b.n	8043184 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8043152:	2301      	movs	r3, #1
 8043154:	73fb      	strb	r3, [r7, #15]
      break;
 8043156:	e015      	b.n	8043184 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8043158:	687b      	ldr	r3, [r7, #4]
 804315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804315c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8043160:	2b00      	cmp	r3, #0
 8043162:	d00e      	beq.n	8043182 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8043164:	2301      	movs	r3, #1
 8043166:	73fb      	strb	r3, [r7, #15]
      break;
 8043168:	e00b      	b.n	8043182 <DMA_CheckFifoParam+0xe6>
      break;
 804316a:	bf00      	nop
 804316c:	e00a      	b.n	8043184 <DMA_CheckFifoParam+0xe8>
      break;
 804316e:	bf00      	nop
 8043170:	e008      	b.n	8043184 <DMA_CheckFifoParam+0xe8>
      break;
 8043172:	bf00      	nop
 8043174:	e006      	b.n	8043184 <DMA_CheckFifoParam+0xe8>
      break;
 8043176:	bf00      	nop
 8043178:	e004      	b.n	8043184 <DMA_CheckFifoParam+0xe8>
      break;
 804317a:	bf00      	nop
 804317c:	e002      	b.n	8043184 <DMA_CheckFifoParam+0xe8>
      break;   
 804317e:	bf00      	nop
 8043180:	e000      	b.n	8043184 <DMA_CheckFifoParam+0xe8>
      break;
 8043182:	bf00      	nop
    }
  } 
  
  return status; 
 8043184:	7bfb      	ldrb	r3, [r7, #15]
}
 8043186:	4618      	mov	r0, r3
 8043188:	3714      	adds	r7, #20
 804318a:	46bd      	mov	sp, r7
 804318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043190:	4770      	bx	lr
 8043192:	bf00      	nop

08043194 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8043194:	b580      	push	{r7, lr}
 8043196:	b082      	sub	sp, #8
 8043198:	af00      	add	r7, sp, #0
 804319a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 804319c:	687b      	ldr	r3, [r7, #4]
 804319e:	2b00      	cmp	r3, #0
 80431a0:	d101      	bne.n	80431a6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80431a2:	2301      	movs	r3, #1
 80431a4:	e03b      	b.n	804321e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80431a6:	687b      	ldr	r3, [r7, #4]
 80431a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80431ac:	b2db      	uxtb	r3, r3
 80431ae:	2b00      	cmp	r3, #0
 80431b0:	d106      	bne.n	80431c0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80431b2:	687b      	ldr	r3, [r7, #4]
 80431b4:	2200      	movs	r2, #0
 80431b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80431ba:	6878      	ldr	r0, [r7, #4]
 80431bc:	f7fd fe74 	bl	8040ea8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80431c0:	687b      	ldr	r3, [r7, #4]
 80431c2:	2202      	movs	r2, #2
 80431c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80431c8:	687b      	ldr	r3, [r7, #4]
 80431ca:	681b      	ldr	r3, [r3, #0]
 80431cc:	681b      	ldr	r3, [r3, #0]
 80431ce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80431d2:	687b      	ldr	r3, [r7, #4]
 80431d4:	685a      	ldr	r2, [r3, #4]
 80431d6:	687b      	ldr	r3, [r7, #4]
 80431d8:	681b      	ldr	r3, [r3, #0]
 80431da:	430a      	orrs	r2, r1
 80431dc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80431de:	687b      	ldr	r3, [r7, #4]
 80431e0:	681b      	ldr	r3, [r3, #0]
 80431e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80431e4:	f023 0107 	bic.w	r1, r3, #7
 80431e8:	687b      	ldr	r3, [r7, #4]
 80431ea:	689a      	ldr	r2, [r3, #8]
 80431ec:	687b      	ldr	r3, [r7, #4]
 80431ee:	681b      	ldr	r3, [r3, #0]
 80431f0:	430a      	orrs	r2, r1
 80431f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80431f4:	687b      	ldr	r3, [r7, #4]
 80431f6:	681b      	ldr	r3, [r3, #0]
 80431f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80431fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80431fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8043202:	687a      	ldr	r2, [r7, #4]
 8043204:	68d1      	ldr	r1, [r2, #12]
 8043206:	687a      	ldr	r2, [r7, #4]
 8043208:	6812      	ldr	r2, [r2, #0]
 804320a:	430b      	orrs	r3, r1
 804320c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 804320e:	687b      	ldr	r3, [r7, #4]
 8043210:	2200      	movs	r2, #0
 8043212:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8043214:	687b      	ldr	r3, [r7, #4]
 8043216:	2201      	movs	r2, #1
 8043218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 804321c:	2300      	movs	r3, #0
}
 804321e:	4618      	mov	r0, r3
 8043220:	3708      	adds	r7, #8
 8043222:	46bd      	mov	sp, r7
 8043224:	bd80      	pop	{r7, pc}

08043226 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8043226:	b580      	push	{r7, lr}
 8043228:	b086      	sub	sp, #24
 804322a:	af02      	add	r7, sp, #8
 804322c:	60f8      	str	r0, [r7, #12]
 804322e:	60b9      	str	r1, [r7, #8]
 8043230:	607a      	str	r2, [r7, #4]
 8043232:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8043234:	68fb      	ldr	r3, [r7, #12]
 8043236:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 804323a:	2b01      	cmp	r3, #1
 804323c:	d101      	bne.n	8043242 <HAL_DMA2D_Start+0x1c>
 804323e:	2302      	movs	r3, #2
 8043240:	e018      	b.n	8043274 <HAL_DMA2D_Start+0x4e>
 8043242:	68fb      	ldr	r3, [r7, #12]
 8043244:	2201      	movs	r2, #1
 8043246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 804324a:	68fb      	ldr	r3, [r7, #12]
 804324c:	2202      	movs	r2, #2
 804324e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8043252:	69bb      	ldr	r3, [r7, #24]
 8043254:	9300      	str	r3, [sp, #0]
 8043256:	683b      	ldr	r3, [r7, #0]
 8043258:	687a      	ldr	r2, [r7, #4]
 804325a:	68b9      	ldr	r1, [r7, #8]
 804325c:	68f8      	ldr	r0, [r7, #12]
 804325e:	f000 fa99 	bl	8043794 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8043262:	68fb      	ldr	r3, [r7, #12]
 8043264:	681b      	ldr	r3, [r3, #0]
 8043266:	681a      	ldr	r2, [r3, #0]
 8043268:	68fb      	ldr	r3, [r7, #12]
 804326a:	681b      	ldr	r3, [r3, #0]
 804326c:	f042 0201 	orr.w	r2, r2, #1
 8043270:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8043272:	2300      	movs	r3, #0
}
 8043274:	4618      	mov	r0, r3
 8043276:	3710      	adds	r7, #16
 8043278:	46bd      	mov	sp, r7
 804327a:	bd80      	pop	{r7, pc}

0804327c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 804327c:	b580      	push	{r7, lr}
 804327e:	b086      	sub	sp, #24
 8043280:	af00      	add	r7, sp, #0
 8043282:	6078      	str	r0, [r7, #4]
 8043284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8043286:	2300      	movs	r3, #0
 8043288:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 804328a:	687b      	ldr	r3, [r7, #4]
 804328c:	681b      	ldr	r3, [r3, #0]
 804328e:	681b      	ldr	r3, [r3, #0]
 8043290:	f003 0301 	and.w	r3, r3, #1
 8043294:	2b00      	cmp	r3, #0
 8043296:	d056      	beq.n	8043346 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8043298:	f7ff fc90 	bl	8042bbc <HAL_GetTick>
 804329c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 804329e:	e04b      	b.n	8043338 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80432a0:	687b      	ldr	r3, [r7, #4]
 80432a2:	681b      	ldr	r3, [r3, #0]
 80432a4:	685b      	ldr	r3, [r3, #4]
 80432a6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80432a8:	68fb      	ldr	r3, [r7, #12]
 80432aa:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80432ae:	2b00      	cmp	r3, #0
 80432b0:	d023      	beq.n	80432fa <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80432b2:	68fb      	ldr	r3, [r7, #12]
 80432b4:	f003 0320 	and.w	r3, r3, #32
 80432b8:	2b00      	cmp	r3, #0
 80432ba:	d005      	beq.n	80432c8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80432bc:	687b      	ldr	r3, [r7, #4]
 80432be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80432c0:	f043 0202 	orr.w	r2, r3, #2
 80432c4:	687b      	ldr	r3, [r7, #4]
 80432c6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80432c8:	68fb      	ldr	r3, [r7, #12]
 80432ca:	f003 0301 	and.w	r3, r3, #1
 80432ce:	2b00      	cmp	r3, #0
 80432d0:	d005      	beq.n	80432de <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80432d2:	687b      	ldr	r3, [r7, #4]
 80432d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80432d6:	f043 0201 	orr.w	r2, r3, #1
 80432da:	687b      	ldr	r3, [r7, #4]
 80432dc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80432de:	687b      	ldr	r3, [r7, #4]
 80432e0:	681b      	ldr	r3, [r3, #0]
 80432e2:	2221      	movs	r2, #33	; 0x21
 80432e4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80432e6:	687b      	ldr	r3, [r7, #4]
 80432e8:	2204      	movs	r2, #4
 80432ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80432ee:	687b      	ldr	r3, [r7, #4]
 80432f0:	2200      	movs	r2, #0
 80432f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80432f6:	2301      	movs	r3, #1
 80432f8:	e0a5      	b.n	8043446 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80432fa:	683b      	ldr	r3, [r7, #0]
 80432fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043300:	d01a      	beq.n	8043338 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8043302:	f7ff fc5b 	bl	8042bbc <HAL_GetTick>
 8043306:	4602      	mov	r2, r0
 8043308:	697b      	ldr	r3, [r7, #20]
 804330a:	1ad3      	subs	r3, r2, r3
 804330c:	683a      	ldr	r2, [r7, #0]
 804330e:	429a      	cmp	r2, r3
 8043310:	d302      	bcc.n	8043318 <HAL_DMA2D_PollForTransfer+0x9c>
 8043312:	683b      	ldr	r3, [r7, #0]
 8043314:	2b00      	cmp	r3, #0
 8043316:	d10f      	bne.n	8043338 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8043318:	687b      	ldr	r3, [r7, #4]
 804331a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804331c:	f043 0220 	orr.w	r2, r3, #32
 8043320:	687b      	ldr	r3, [r7, #4]
 8043322:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8043324:	687b      	ldr	r3, [r7, #4]
 8043326:	2203      	movs	r2, #3
 8043328:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 804332c:	687b      	ldr	r3, [r7, #4]
 804332e:	2200      	movs	r2, #0
 8043330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8043334:	2303      	movs	r3, #3
 8043336:	e086      	b.n	8043446 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8043338:	687b      	ldr	r3, [r7, #4]
 804333a:	681b      	ldr	r3, [r3, #0]
 804333c:	685b      	ldr	r3, [r3, #4]
 804333e:	f003 0302 	and.w	r3, r3, #2
 8043342:	2b00      	cmp	r3, #0
 8043344:	d0ac      	beq.n	80432a0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8043346:	687b      	ldr	r3, [r7, #4]
 8043348:	681b      	ldr	r3, [r3, #0]
 804334a:	69db      	ldr	r3, [r3, #28]
 804334c:	f003 0320 	and.w	r3, r3, #32
 8043350:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8043352:	687b      	ldr	r3, [r7, #4]
 8043354:	681b      	ldr	r3, [r3, #0]
 8043356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043358:	f003 0320 	and.w	r3, r3, #32
 804335c:	693a      	ldr	r2, [r7, #16]
 804335e:	4313      	orrs	r3, r2
 8043360:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8043362:	693b      	ldr	r3, [r7, #16]
 8043364:	2b00      	cmp	r3, #0
 8043366:	d061      	beq.n	804342c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8043368:	f7ff fc28 	bl	8042bbc <HAL_GetTick>
 804336c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 804336e:	e056      	b.n	804341e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8043370:	687b      	ldr	r3, [r7, #4]
 8043372:	681b      	ldr	r3, [r3, #0]
 8043374:	685b      	ldr	r3, [r3, #4]
 8043376:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8043378:	68fb      	ldr	r3, [r7, #12]
 804337a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 804337e:	2b00      	cmp	r3, #0
 8043380:	d02e      	beq.n	80433e0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8043382:	68fb      	ldr	r3, [r7, #12]
 8043384:	f003 0308 	and.w	r3, r3, #8
 8043388:	2b00      	cmp	r3, #0
 804338a:	d005      	beq.n	8043398 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 804338c:	687b      	ldr	r3, [r7, #4]
 804338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043390:	f043 0204 	orr.w	r2, r3, #4
 8043394:	687b      	ldr	r3, [r7, #4]
 8043396:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8043398:	68fb      	ldr	r3, [r7, #12]
 804339a:	f003 0320 	and.w	r3, r3, #32
 804339e:	2b00      	cmp	r3, #0
 80433a0:	d005      	beq.n	80433ae <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80433a2:	687b      	ldr	r3, [r7, #4]
 80433a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80433a6:	f043 0202 	orr.w	r2, r3, #2
 80433aa:	687b      	ldr	r3, [r7, #4]
 80433ac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80433ae:	68fb      	ldr	r3, [r7, #12]
 80433b0:	f003 0301 	and.w	r3, r3, #1
 80433b4:	2b00      	cmp	r3, #0
 80433b6:	d005      	beq.n	80433c4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80433b8:	687b      	ldr	r3, [r7, #4]
 80433ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80433bc:	f043 0201 	orr.w	r2, r3, #1
 80433c0:	687b      	ldr	r3, [r7, #4]
 80433c2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80433c4:	687b      	ldr	r3, [r7, #4]
 80433c6:	681b      	ldr	r3, [r3, #0]
 80433c8:	2229      	movs	r2, #41	; 0x29
 80433ca:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80433cc:	687b      	ldr	r3, [r7, #4]
 80433ce:	2204      	movs	r2, #4
 80433d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80433d4:	687b      	ldr	r3, [r7, #4]
 80433d6:	2200      	movs	r2, #0
 80433d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80433dc:	2301      	movs	r3, #1
 80433de:	e032      	b.n	8043446 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80433e0:	683b      	ldr	r3, [r7, #0]
 80433e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80433e6:	d01a      	beq.n	804341e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80433e8:	f7ff fbe8 	bl	8042bbc <HAL_GetTick>
 80433ec:	4602      	mov	r2, r0
 80433ee:	697b      	ldr	r3, [r7, #20]
 80433f0:	1ad3      	subs	r3, r2, r3
 80433f2:	683a      	ldr	r2, [r7, #0]
 80433f4:	429a      	cmp	r2, r3
 80433f6:	d302      	bcc.n	80433fe <HAL_DMA2D_PollForTransfer+0x182>
 80433f8:	683b      	ldr	r3, [r7, #0]
 80433fa:	2b00      	cmp	r3, #0
 80433fc:	d10f      	bne.n	804341e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80433fe:	687b      	ldr	r3, [r7, #4]
 8043400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043402:	f043 0220 	orr.w	r2, r3, #32
 8043406:	687b      	ldr	r3, [r7, #4]
 8043408:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 804340a:	687b      	ldr	r3, [r7, #4]
 804340c:	2203      	movs	r2, #3
 804340e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8043412:	687b      	ldr	r3, [r7, #4]
 8043414:	2200      	movs	r2, #0
 8043416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 804341a:	2303      	movs	r3, #3
 804341c:	e013      	b.n	8043446 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 804341e:	687b      	ldr	r3, [r7, #4]
 8043420:	681b      	ldr	r3, [r3, #0]
 8043422:	685b      	ldr	r3, [r3, #4]
 8043424:	f003 0310 	and.w	r3, r3, #16
 8043428:	2b00      	cmp	r3, #0
 804342a:	d0a1      	beq.n	8043370 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 804342c:	687b      	ldr	r3, [r7, #4]
 804342e:	681b      	ldr	r3, [r3, #0]
 8043430:	2212      	movs	r2, #18
 8043432:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8043434:	687b      	ldr	r3, [r7, #4]
 8043436:	2201      	movs	r2, #1
 8043438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 804343c:	687b      	ldr	r3, [r7, #4]
 804343e:	2200      	movs	r2, #0
 8043440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8043444:	2300      	movs	r3, #0
}
 8043446:	4618      	mov	r0, r3
 8043448:	3718      	adds	r7, #24
 804344a:	46bd      	mov	sp, r7
 804344c:	bd80      	pop	{r7, pc}

0804344e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 804344e:	b580      	push	{r7, lr}
 8043450:	b084      	sub	sp, #16
 8043452:	af00      	add	r7, sp, #0
 8043454:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8043456:	687b      	ldr	r3, [r7, #4]
 8043458:	681b      	ldr	r3, [r3, #0]
 804345a:	685b      	ldr	r3, [r3, #4]
 804345c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 804345e:	687b      	ldr	r3, [r7, #4]
 8043460:	681b      	ldr	r3, [r3, #0]
 8043462:	681b      	ldr	r3, [r3, #0]
 8043464:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8043466:	68fb      	ldr	r3, [r7, #12]
 8043468:	f003 0301 	and.w	r3, r3, #1
 804346c:	2b00      	cmp	r3, #0
 804346e:	d026      	beq.n	80434be <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8043470:	68bb      	ldr	r3, [r7, #8]
 8043472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043476:	2b00      	cmp	r3, #0
 8043478:	d021      	beq.n	80434be <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 804347a:	687b      	ldr	r3, [r7, #4]
 804347c:	681b      	ldr	r3, [r3, #0]
 804347e:	681a      	ldr	r2, [r3, #0]
 8043480:	687b      	ldr	r3, [r7, #4]
 8043482:	681b      	ldr	r3, [r3, #0]
 8043484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8043488:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 804348a:	687b      	ldr	r3, [r7, #4]
 804348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804348e:	f043 0201 	orr.w	r2, r3, #1
 8043492:	687b      	ldr	r3, [r7, #4]
 8043494:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8043496:	687b      	ldr	r3, [r7, #4]
 8043498:	681b      	ldr	r3, [r3, #0]
 804349a:	2201      	movs	r2, #1
 804349c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 804349e:	687b      	ldr	r3, [r7, #4]
 80434a0:	2204      	movs	r2, #4
 80434a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80434a6:	687b      	ldr	r3, [r7, #4]
 80434a8:	2200      	movs	r2, #0
 80434aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80434ae:	687b      	ldr	r3, [r7, #4]
 80434b0:	695b      	ldr	r3, [r3, #20]
 80434b2:	2b00      	cmp	r3, #0
 80434b4:	d003      	beq.n	80434be <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80434b6:	687b      	ldr	r3, [r7, #4]
 80434b8:	695b      	ldr	r3, [r3, #20]
 80434ba:	6878      	ldr	r0, [r7, #4]
 80434bc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80434be:	68fb      	ldr	r3, [r7, #12]
 80434c0:	f003 0320 	and.w	r3, r3, #32
 80434c4:	2b00      	cmp	r3, #0
 80434c6:	d026      	beq.n	8043516 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80434c8:	68bb      	ldr	r3, [r7, #8]
 80434ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80434ce:	2b00      	cmp	r3, #0
 80434d0:	d021      	beq.n	8043516 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80434d2:	687b      	ldr	r3, [r7, #4]
 80434d4:	681b      	ldr	r3, [r3, #0]
 80434d6:	681a      	ldr	r2, [r3, #0]
 80434d8:	687b      	ldr	r3, [r7, #4]
 80434da:	681b      	ldr	r3, [r3, #0]
 80434dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80434e0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80434e2:	687b      	ldr	r3, [r7, #4]
 80434e4:	681b      	ldr	r3, [r3, #0]
 80434e6:	2220      	movs	r2, #32
 80434e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80434ea:	687b      	ldr	r3, [r7, #4]
 80434ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80434ee:	f043 0202 	orr.w	r2, r3, #2
 80434f2:	687b      	ldr	r3, [r7, #4]
 80434f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80434f6:	687b      	ldr	r3, [r7, #4]
 80434f8:	2204      	movs	r2, #4
 80434fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80434fe:	687b      	ldr	r3, [r7, #4]
 8043500:	2200      	movs	r2, #0
 8043502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8043506:	687b      	ldr	r3, [r7, #4]
 8043508:	695b      	ldr	r3, [r3, #20]
 804350a:	2b00      	cmp	r3, #0
 804350c:	d003      	beq.n	8043516 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 804350e:	687b      	ldr	r3, [r7, #4]
 8043510:	695b      	ldr	r3, [r3, #20]
 8043512:	6878      	ldr	r0, [r7, #4]
 8043514:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8043516:	68fb      	ldr	r3, [r7, #12]
 8043518:	f003 0308 	and.w	r3, r3, #8
 804351c:	2b00      	cmp	r3, #0
 804351e:	d026      	beq.n	804356e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8043520:	68bb      	ldr	r3, [r7, #8]
 8043522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8043526:	2b00      	cmp	r3, #0
 8043528:	d021      	beq.n	804356e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 804352a:	687b      	ldr	r3, [r7, #4]
 804352c:	681b      	ldr	r3, [r3, #0]
 804352e:	681a      	ldr	r2, [r3, #0]
 8043530:	687b      	ldr	r3, [r7, #4]
 8043532:	681b      	ldr	r3, [r3, #0]
 8043534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8043538:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 804353a:	687b      	ldr	r3, [r7, #4]
 804353c:	681b      	ldr	r3, [r3, #0]
 804353e:	2208      	movs	r2, #8
 8043540:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8043542:	687b      	ldr	r3, [r7, #4]
 8043544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043546:	f043 0204 	orr.w	r2, r3, #4
 804354a:	687b      	ldr	r3, [r7, #4]
 804354c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 804354e:	687b      	ldr	r3, [r7, #4]
 8043550:	2204      	movs	r2, #4
 8043552:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043556:	687b      	ldr	r3, [r7, #4]
 8043558:	2200      	movs	r2, #0
 804355a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 804355e:	687b      	ldr	r3, [r7, #4]
 8043560:	695b      	ldr	r3, [r3, #20]
 8043562:	2b00      	cmp	r3, #0
 8043564:	d003      	beq.n	804356e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8043566:	687b      	ldr	r3, [r7, #4]
 8043568:	695b      	ldr	r3, [r3, #20]
 804356a:	6878      	ldr	r0, [r7, #4]
 804356c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 804356e:	68fb      	ldr	r3, [r7, #12]
 8043570:	f003 0304 	and.w	r3, r3, #4
 8043574:	2b00      	cmp	r3, #0
 8043576:	d013      	beq.n	80435a0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8043578:	68bb      	ldr	r3, [r7, #8]
 804357a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804357e:	2b00      	cmp	r3, #0
 8043580:	d00e      	beq.n	80435a0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8043582:	687b      	ldr	r3, [r7, #4]
 8043584:	681b      	ldr	r3, [r3, #0]
 8043586:	681a      	ldr	r2, [r3, #0]
 8043588:	687b      	ldr	r3, [r7, #4]
 804358a:	681b      	ldr	r3, [r3, #0]
 804358c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8043590:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8043592:	687b      	ldr	r3, [r7, #4]
 8043594:	681b      	ldr	r3, [r3, #0]
 8043596:	2204      	movs	r2, #4
 8043598:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 804359a:	6878      	ldr	r0, [r7, #4]
 804359c:	f000 f853 	bl	8043646 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80435a0:	68fb      	ldr	r3, [r7, #12]
 80435a2:	f003 0302 	and.w	r3, r3, #2
 80435a6:	2b00      	cmp	r3, #0
 80435a8:	d024      	beq.n	80435f4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80435aa:	68bb      	ldr	r3, [r7, #8]
 80435ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80435b0:	2b00      	cmp	r3, #0
 80435b2:	d01f      	beq.n	80435f4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80435b4:	687b      	ldr	r3, [r7, #4]
 80435b6:	681b      	ldr	r3, [r3, #0]
 80435b8:	681a      	ldr	r2, [r3, #0]
 80435ba:	687b      	ldr	r3, [r7, #4]
 80435bc:	681b      	ldr	r3, [r3, #0]
 80435be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80435c2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80435c4:	687b      	ldr	r3, [r7, #4]
 80435c6:	681b      	ldr	r3, [r3, #0]
 80435c8:	2202      	movs	r2, #2
 80435ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80435cc:	687b      	ldr	r3, [r7, #4]
 80435ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80435d0:	687b      	ldr	r3, [r7, #4]
 80435d2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80435d4:	687b      	ldr	r3, [r7, #4]
 80435d6:	2201      	movs	r2, #1
 80435d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80435dc:	687b      	ldr	r3, [r7, #4]
 80435de:	2200      	movs	r2, #0
 80435e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80435e4:	687b      	ldr	r3, [r7, #4]
 80435e6:	691b      	ldr	r3, [r3, #16]
 80435e8:	2b00      	cmp	r3, #0
 80435ea:	d003      	beq.n	80435f4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80435ec:	687b      	ldr	r3, [r7, #4]
 80435ee:	691b      	ldr	r3, [r3, #16]
 80435f0:	6878      	ldr	r0, [r7, #4]
 80435f2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80435f4:	68fb      	ldr	r3, [r7, #12]
 80435f6:	f003 0310 	and.w	r3, r3, #16
 80435fa:	2b00      	cmp	r3, #0
 80435fc:	d01f      	beq.n	804363e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80435fe:	68bb      	ldr	r3, [r7, #8]
 8043600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8043604:	2b00      	cmp	r3, #0
 8043606:	d01a      	beq.n	804363e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8043608:	687b      	ldr	r3, [r7, #4]
 804360a:	681b      	ldr	r3, [r3, #0]
 804360c:	681a      	ldr	r2, [r3, #0]
 804360e:	687b      	ldr	r3, [r7, #4]
 8043610:	681b      	ldr	r3, [r3, #0]
 8043612:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8043616:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8043618:	687b      	ldr	r3, [r7, #4]
 804361a:	681b      	ldr	r3, [r3, #0]
 804361c:	2210      	movs	r2, #16
 804361e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8043620:	687b      	ldr	r3, [r7, #4]
 8043622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8043624:	687b      	ldr	r3, [r7, #4]
 8043626:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8043628:	687b      	ldr	r3, [r7, #4]
 804362a:	2201      	movs	r2, #1
 804362c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043630:	687b      	ldr	r3, [r7, #4]
 8043632:	2200      	movs	r2, #0
 8043634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8043638:	6878      	ldr	r0, [r7, #4]
 804363a:	f000 f80e 	bl	804365a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 804363e:	bf00      	nop
 8043640:	3710      	adds	r7, #16
 8043642:	46bd      	mov	sp, r7
 8043644:	bd80      	pop	{r7, pc}

08043646 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8043646:	b480      	push	{r7}
 8043648:	b083      	sub	sp, #12
 804364a:	af00      	add	r7, sp, #0
 804364c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 804364e:	bf00      	nop
 8043650:	370c      	adds	r7, #12
 8043652:	46bd      	mov	sp, r7
 8043654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043658:	4770      	bx	lr

0804365a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 804365a:	b480      	push	{r7}
 804365c:	b083      	sub	sp, #12
 804365e:	af00      	add	r7, sp, #0
 8043660:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8043662:	bf00      	nop
 8043664:	370c      	adds	r7, #12
 8043666:	46bd      	mov	sp, r7
 8043668:	f85d 7b04 	ldr.w	r7, [sp], #4
 804366c:	4770      	bx	lr
	...

08043670 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8043670:	b480      	push	{r7}
 8043672:	b087      	sub	sp, #28
 8043674:	af00      	add	r7, sp, #0
 8043676:	6078      	str	r0, [r7, #4]
 8043678:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 804367a:	687b      	ldr	r3, [r7, #4]
 804367c:	685b      	ldr	r3, [r3, #4]
 804367e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8043682:	687b      	ldr	r3, [r7, #4]
 8043684:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8043688:	2b01      	cmp	r3, #1
 804368a:	d101      	bne.n	8043690 <HAL_DMA2D_ConfigLayer+0x20>
 804368c:	2302      	movs	r3, #2
 804368e:	e079      	b.n	8043784 <HAL_DMA2D_ConfigLayer+0x114>
 8043690:	687b      	ldr	r3, [r7, #4]
 8043692:	2201      	movs	r2, #1
 8043694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8043698:	687b      	ldr	r3, [r7, #4]
 804369a:	2202      	movs	r2, #2
 804369c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80436a0:	683b      	ldr	r3, [r7, #0]
 80436a2:	011b      	lsls	r3, r3, #4
 80436a4:	3318      	adds	r3, #24
 80436a6:	687a      	ldr	r2, [r7, #4]
 80436a8:	4413      	add	r3, r2
 80436aa:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80436ac:	693b      	ldr	r3, [r7, #16]
 80436ae:	685a      	ldr	r2, [r3, #4]
 80436b0:	693b      	ldr	r3, [r7, #16]
 80436b2:	689b      	ldr	r3, [r3, #8]
 80436b4:	041b      	lsls	r3, r3, #16
 80436b6:	4313      	orrs	r3, r2
 80436b8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80436ba:	4b35      	ldr	r3, [pc, #212]	; (8043790 <HAL_DMA2D_ConfigLayer+0x120>)
 80436bc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80436be:	693b      	ldr	r3, [r7, #16]
 80436c0:	685b      	ldr	r3, [r3, #4]
 80436c2:	2b0a      	cmp	r3, #10
 80436c4:	d003      	beq.n	80436ce <HAL_DMA2D_ConfigLayer+0x5e>
 80436c6:	693b      	ldr	r3, [r7, #16]
 80436c8:	685b      	ldr	r3, [r3, #4]
 80436ca:	2b09      	cmp	r3, #9
 80436cc:	d107      	bne.n	80436de <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80436ce:	693b      	ldr	r3, [r7, #16]
 80436d0:	68db      	ldr	r3, [r3, #12]
 80436d2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80436d6:	697a      	ldr	r2, [r7, #20]
 80436d8:	4313      	orrs	r3, r2
 80436da:	617b      	str	r3, [r7, #20]
 80436dc:	e005      	b.n	80436ea <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80436de:	693b      	ldr	r3, [r7, #16]
 80436e0:	68db      	ldr	r3, [r3, #12]
 80436e2:	061b      	lsls	r3, r3, #24
 80436e4:	697a      	ldr	r2, [r7, #20]
 80436e6:	4313      	orrs	r3, r2
 80436e8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80436ea:	683b      	ldr	r3, [r7, #0]
 80436ec:	2b00      	cmp	r3, #0
 80436ee:	d120      	bne.n	8043732 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80436f0:	687b      	ldr	r3, [r7, #4]
 80436f2:	681b      	ldr	r3, [r3, #0]
 80436f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80436f6:	68fb      	ldr	r3, [r7, #12]
 80436f8:	43db      	mvns	r3, r3
 80436fa:	ea02 0103 	and.w	r1, r2, r3
 80436fe:	687b      	ldr	r3, [r7, #4]
 8043700:	681b      	ldr	r3, [r3, #0]
 8043702:	697a      	ldr	r2, [r7, #20]
 8043704:	430a      	orrs	r2, r1
 8043706:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8043708:	687b      	ldr	r3, [r7, #4]
 804370a:	681b      	ldr	r3, [r3, #0]
 804370c:	693a      	ldr	r2, [r7, #16]
 804370e:	6812      	ldr	r2, [r2, #0]
 8043710:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8043712:	693b      	ldr	r3, [r7, #16]
 8043714:	685b      	ldr	r3, [r3, #4]
 8043716:	2b0a      	cmp	r3, #10
 8043718:	d003      	beq.n	8043722 <HAL_DMA2D_ConfigLayer+0xb2>
 804371a:	693b      	ldr	r3, [r7, #16]
 804371c:	685b      	ldr	r3, [r3, #4]
 804371e:	2b09      	cmp	r3, #9
 8043720:	d127      	bne.n	8043772 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8043722:	693b      	ldr	r3, [r7, #16]
 8043724:	68da      	ldr	r2, [r3, #12]
 8043726:	687b      	ldr	r3, [r7, #4]
 8043728:	681b      	ldr	r3, [r3, #0]
 804372a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 804372e:	629a      	str	r2, [r3, #40]	; 0x28
 8043730:	e01f      	b.n	8043772 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8043732:	687b      	ldr	r3, [r7, #4]
 8043734:	681b      	ldr	r3, [r3, #0]
 8043736:	69da      	ldr	r2, [r3, #28]
 8043738:	68fb      	ldr	r3, [r7, #12]
 804373a:	43db      	mvns	r3, r3
 804373c:	ea02 0103 	and.w	r1, r2, r3
 8043740:	687b      	ldr	r3, [r7, #4]
 8043742:	681b      	ldr	r3, [r3, #0]
 8043744:	697a      	ldr	r2, [r7, #20]
 8043746:	430a      	orrs	r2, r1
 8043748:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 804374a:	687b      	ldr	r3, [r7, #4]
 804374c:	681b      	ldr	r3, [r3, #0]
 804374e:	693a      	ldr	r2, [r7, #16]
 8043750:	6812      	ldr	r2, [r2, #0]
 8043752:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8043754:	693b      	ldr	r3, [r7, #16]
 8043756:	685b      	ldr	r3, [r3, #4]
 8043758:	2b0a      	cmp	r3, #10
 804375a:	d003      	beq.n	8043764 <HAL_DMA2D_ConfigLayer+0xf4>
 804375c:	693b      	ldr	r3, [r7, #16]
 804375e:	685b      	ldr	r3, [r3, #4]
 8043760:	2b09      	cmp	r3, #9
 8043762:	d106      	bne.n	8043772 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8043764:	693b      	ldr	r3, [r7, #16]
 8043766:	68da      	ldr	r2, [r3, #12]
 8043768:	687b      	ldr	r3, [r7, #4]
 804376a:	681b      	ldr	r3, [r3, #0]
 804376c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8043770:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8043772:	687b      	ldr	r3, [r7, #4]
 8043774:	2201      	movs	r2, #1
 8043776:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 804377a:	687b      	ldr	r3, [r7, #4]
 804377c:	2200      	movs	r2, #0
 804377e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8043782:	2300      	movs	r3, #0
}
 8043784:	4618      	mov	r0, r3
 8043786:	371c      	adds	r7, #28
 8043788:	46bd      	mov	sp, r7
 804378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804378e:	4770      	bx	lr
 8043790:	ff03000f 	.word	0xff03000f

08043794 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8043794:	b480      	push	{r7}
 8043796:	b08b      	sub	sp, #44	; 0x2c
 8043798:	af00      	add	r7, sp, #0
 804379a:	60f8      	str	r0, [r7, #12]
 804379c:	60b9      	str	r1, [r7, #8]
 804379e:	607a      	str	r2, [r7, #4]
 80437a0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80437a2:	68fb      	ldr	r3, [r7, #12]
 80437a4:	681b      	ldr	r3, [r3, #0]
 80437a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80437a8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80437ac:	683b      	ldr	r3, [r7, #0]
 80437ae:	041a      	lsls	r2, r3, #16
 80437b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80437b2:	431a      	orrs	r2, r3
 80437b4:	68fb      	ldr	r3, [r7, #12]
 80437b6:	681b      	ldr	r3, [r3, #0]
 80437b8:	430a      	orrs	r2, r1
 80437ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80437bc:	68fb      	ldr	r3, [r7, #12]
 80437be:	681b      	ldr	r3, [r3, #0]
 80437c0:	687a      	ldr	r2, [r7, #4]
 80437c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80437c4:	68fb      	ldr	r3, [r7, #12]
 80437c6:	685b      	ldr	r3, [r3, #4]
 80437c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80437cc:	d174      	bne.n	80438b8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80437ce:	68bb      	ldr	r3, [r7, #8]
 80437d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80437d4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80437d6:	68bb      	ldr	r3, [r7, #8]
 80437d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80437dc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80437de:	68bb      	ldr	r3, [r7, #8]
 80437e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80437e4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80437e6:	68bb      	ldr	r3, [r7, #8]
 80437e8:	b2db      	uxtb	r3, r3
 80437ea:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80437ec:	68fb      	ldr	r3, [r7, #12]
 80437ee:	689b      	ldr	r3, [r3, #8]
 80437f0:	2b00      	cmp	r3, #0
 80437f2:	d108      	bne.n	8043806 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80437f4:	69ba      	ldr	r2, [r7, #24]
 80437f6:	69fb      	ldr	r3, [r7, #28]
 80437f8:	431a      	orrs	r2, r3
 80437fa:	6a3b      	ldr	r3, [r7, #32]
 80437fc:	4313      	orrs	r3, r2
 80437fe:	697a      	ldr	r2, [r7, #20]
 8043800:	4313      	orrs	r3, r2
 8043802:	627b      	str	r3, [r7, #36]	; 0x24
 8043804:	e053      	b.n	80438ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8043806:	68fb      	ldr	r3, [r7, #12]
 8043808:	689b      	ldr	r3, [r3, #8]
 804380a:	2b01      	cmp	r3, #1
 804380c:	d106      	bne.n	804381c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 804380e:	69ba      	ldr	r2, [r7, #24]
 8043810:	69fb      	ldr	r3, [r7, #28]
 8043812:	4313      	orrs	r3, r2
 8043814:	697a      	ldr	r2, [r7, #20]
 8043816:	4313      	orrs	r3, r2
 8043818:	627b      	str	r3, [r7, #36]	; 0x24
 804381a:	e048      	b.n	80438ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 804381c:	68fb      	ldr	r3, [r7, #12]
 804381e:	689b      	ldr	r3, [r3, #8]
 8043820:	2b02      	cmp	r3, #2
 8043822:	d111      	bne.n	8043848 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8043824:	69fb      	ldr	r3, [r7, #28]
 8043826:	0cdb      	lsrs	r3, r3, #19
 8043828:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 804382a:	69bb      	ldr	r3, [r7, #24]
 804382c:	0a9b      	lsrs	r3, r3, #10
 804382e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8043830:	697b      	ldr	r3, [r7, #20]
 8043832:	08db      	lsrs	r3, r3, #3
 8043834:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8043836:	69bb      	ldr	r3, [r7, #24]
 8043838:	015a      	lsls	r2, r3, #5
 804383a:	69fb      	ldr	r3, [r7, #28]
 804383c:	02db      	lsls	r3, r3, #11
 804383e:	4313      	orrs	r3, r2
 8043840:	697a      	ldr	r2, [r7, #20]
 8043842:	4313      	orrs	r3, r2
 8043844:	627b      	str	r3, [r7, #36]	; 0x24
 8043846:	e032      	b.n	80438ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8043848:	68fb      	ldr	r3, [r7, #12]
 804384a:	689b      	ldr	r3, [r3, #8]
 804384c:	2b03      	cmp	r3, #3
 804384e:	d117      	bne.n	8043880 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8043850:	6a3b      	ldr	r3, [r7, #32]
 8043852:	0fdb      	lsrs	r3, r3, #31
 8043854:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8043856:	69fb      	ldr	r3, [r7, #28]
 8043858:	0cdb      	lsrs	r3, r3, #19
 804385a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 804385c:	69bb      	ldr	r3, [r7, #24]
 804385e:	0adb      	lsrs	r3, r3, #11
 8043860:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8043862:	697b      	ldr	r3, [r7, #20]
 8043864:	08db      	lsrs	r3, r3, #3
 8043866:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8043868:	69bb      	ldr	r3, [r7, #24]
 804386a:	015a      	lsls	r2, r3, #5
 804386c:	69fb      	ldr	r3, [r7, #28]
 804386e:	029b      	lsls	r3, r3, #10
 8043870:	431a      	orrs	r2, r3
 8043872:	6a3b      	ldr	r3, [r7, #32]
 8043874:	03db      	lsls	r3, r3, #15
 8043876:	4313      	orrs	r3, r2
 8043878:	697a      	ldr	r2, [r7, #20]
 804387a:	4313      	orrs	r3, r2
 804387c:	627b      	str	r3, [r7, #36]	; 0x24
 804387e:	e016      	b.n	80438ae <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8043880:	6a3b      	ldr	r3, [r7, #32]
 8043882:	0f1b      	lsrs	r3, r3, #28
 8043884:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8043886:	69fb      	ldr	r3, [r7, #28]
 8043888:	0d1b      	lsrs	r3, r3, #20
 804388a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 804388c:	69bb      	ldr	r3, [r7, #24]
 804388e:	0b1b      	lsrs	r3, r3, #12
 8043890:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8043892:	697b      	ldr	r3, [r7, #20]
 8043894:	091b      	lsrs	r3, r3, #4
 8043896:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8043898:	69bb      	ldr	r3, [r7, #24]
 804389a:	011a      	lsls	r2, r3, #4
 804389c:	69fb      	ldr	r3, [r7, #28]
 804389e:	021b      	lsls	r3, r3, #8
 80438a0:	431a      	orrs	r2, r3
 80438a2:	6a3b      	ldr	r3, [r7, #32]
 80438a4:	031b      	lsls	r3, r3, #12
 80438a6:	4313      	orrs	r3, r2
 80438a8:	697a      	ldr	r2, [r7, #20]
 80438aa:	4313      	orrs	r3, r2
 80438ac:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80438ae:	68fb      	ldr	r3, [r7, #12]
 80438b0:	681b      	ldr	r3, [r3, #0]
 80438b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80438b4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80438b6:	e003      	b.n	80438c0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80438b8:	68fb      	ldr	r3, [r7, #12]
 80438ba:	681b      	ldr	r3, [r3, #0]
 80438bc:	68ba      	ldr	r2, [r7, #8]
 80438be:	60da      	str	r2, [r3, #12]
}
 80438c0:	bf00      	nop
 80438c2:	372c      	adds	r7, #44	; 0x2c
 80438c4:	46bd      	mov	sp, r7
 80438c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80438ca:	4770      	bx	lr

080438cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80438cc:	b480      	push	{r7}
 80438ce:	b089      	sub	sp, #36	; 0x24
 80438d0:	af00      	add	r7, sp, #0
 80438d2:	6078      	str	r0, [r7, #4]
 80438d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80438d6:	2300      	movs	r3, #0
 80438d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80438da:	2300      	movs	r3, #0
 80438dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80438de:	2300      	movs	r3, #0
 80438e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80438e2:	2300      	movs	r3, #0
 80438e4:	61fb      	str	r3, [r7, #28]
 80438e6:	e177      	b.n	8043bd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80438e8:	2201      	movs	r2, #1
 80438ea:	69fb      	ldr	r3, [r7, #28]
 80438ec:	fa02 f303 	lsl.w	r3, r2, r3
 80438f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80438f2:	683b      	ldr	r3, [r7, #0]
 80438f4:	681b      	ldr	r3, [r3, #0]
 80438f6:	697a      	ldr	r2, [r7, #20]
 80438f8:	4013      	ands	r3, r2
 80438fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80438fc:	693a      	ldr	r2, [r7, #16]
 80438fe:	697b      	ldr	r3, [r7, #20]
 8043900:	429a      	cmp	r2, r3
 8043902:	f040 8166 	bne.w	8043bd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8043906:	683b      	ldr	r3, [r7, #0]
 8043908:	685b      	ldr	r3, [r3, #4]
 804390a:	f003 0303 	and.w	r3, r3, #3
 804390e:	2b01      	cmp	r3, #1
 8043910:	d005      	beq.n	804391e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8043912:	683b      	ldr	r3, [r7, #0]
 8043914:	685b      	ldr	r3, [r3, #4]
 8043916:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 804391a:	2b02      	cmp	r3, #2
 804391c:	d130      	bne.n	8043980 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 804391e:	687b      	ldr	r3, [r7, #4]
 8043920:	689b      	ldr	r3, [r3, #8]
 8043922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8043924:	69fb      	ldr	r3, [r7, #28]
 8043926:	005b      	lsls	r3, r3, #1
 8043928:	2203      	movs	r2, #3
 804392a:	fa02 f303 	lsl.w	r3, r2, r3
 804392e:	43db      	mvns	r3, r3
 8043930:	69ba      	ldr	r2, [r7, #24]
 8043932:	4013      	ands	r3, r2
 8043934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8043936:	683b      	ldr	r3, [r7, #0]
 8043938:	68da      	ldr	r2, [r3, #12]
 804393a:	69fb      	ldr	r3, [r7, #28]
 804393c:	005b      	lsls	r3, r3, #1
 804393e:	fa02 f303 	lsl.w	r3, r2, r3
 8043942:	69ba      	ldr	r2, [r7, #24]
 8043944:	4313      	orrs	r3, r2
 8043946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8043948:	687b      	ldr	r3, [r7, #4]
 804394a:	69ba      	ldr	r2, [r7, #24]
 804394c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 804394e:	687b      	ldr	r3, [r7, #4]
 8043950:	685b      	ldr	r3, [r3, #4]
 8043952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8043954:	2201      	movs	r2, #1
 8043956:	69fb      	ldr	r3, [r7, #28]
 8043958:	fa02 f303 	lsl.w	r3, r2, r3
 804395c:	43db      	mvns	r3, r3
 804395e:	69ba      	ldr	r2, [r7, #24]
 8043960:	4013      	ands	r3, r2
 8043962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8043964:	683b      	ldr	r3, [r7, #0]
 8043966:	685b      	ldr	r3, [r3, #4]
 8043968:	091b      	lsrs	r3, r3, #4
 804396a:	f003 0201 	and.w	r2, r3, #1
 804396e:	69fb      	ldr	r3, [r7, #28]
 8043970:	fa02 f303 	lsl.w	r3, r2, r3
 8043974:	69ba      	ldr	r2, [r7, #24]
 8043976:	4313      	orrs	r3, r2
 8043978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 804397a:	687b      	ldr	r3, [r7, #4]
 804397c:	69ba      	ldr	r2, [r7, #24]
 804397e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8043980:	683b      	ldr	r3, [r7, #0]
 8043982:	685b      	ldr	r3, [r3, #4]
 8043984:	f003 0303 	and.w	r3, r3, #3
 8043988:	2b03      	cmp	r3, #3
 804398a:	d017      	beq.n	80439bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 804398c:	687b      	ldr	r3, [r7, #4]
 804398e:	68db      	ldr	r3, [r3, #12]
 8043990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8043992:	69fb      	ldr	r3, [r7, #28]
 8043994:	005b      	lsls	r3, r3, #1
 8043996:	2203      	movs	r2, #3
 8043998:	fa02 f303 	lsl.w	r3, r2, r3
 804399c:	43db      	mvns	r3, r3
 804399e:	69ba      	ldr	r2, [r7, #24]
 80439a0:	4013      	ands	r3, r2
 80439a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80439a4:	683b      	ldr	r3, [r7, #0]
 80439a6:	689a      	ldr	r2, [r3, #8]
 80439a8:	69fb      	ldr	r3, [r7, #28]
 80439aa:	005b      	lsls	r3, r3, #1
 80439ac:	fa02 f303 	lsl.w	r3, r2, r3
 80439b0:	69ba      	ldr	r2, [r7, #24]
 80439b2:	4313      	orrs	r3, r2
 80439b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80439b6:	687b      	ldr	r3, [r7, #4]
 80439b8:	69ba      	ldr	r2, [r7, #24]
 80439ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80439bc:	683b      	ldr	r3, [r7, #0]
 80439be:	685b      	ldr	r3, [r3, #4]
 80439c0:	f003 0303 	and.w	r3, r3, #3
 80439c4:	2b02      	cmp	r3, #2
 80439c6:	d123      	bne.n	8043a10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80439c8:	69fb      	ldr	r3, [r7, #28]
 80439ca:	08da      	lsrs	r2, r3, #3
 80439cc:	687b      	ldr	r3, [r7, #4]
 80439ce:	3208      	adds	r2, #8
 80439d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80439d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80439d6:	69fb      	ldr	r3, [r7, #28]
 80439d8:	f003 0307 	and.w	r3, r3, #7
 80439dc:	009b      	lsls	r3, r3, #2
 80439de:	220f      	movs	r2, #15
 80439e0:	fa02 f303 	lsl.w	r3, r2, r3
 80439e4:	43db      	mvns	r3, r3
 80439e6:	69ba      	ldr	r2, [r7, #24]
 80439e8:	4013      	ands	r3, r2
 80439ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80439ec:	683b      	ldr	r3, [r7, #0]
 80439ee:	691a      	ldr	r2, [r3, #16]
 80439f0:	69fb      	ldr	r3, [r7, #28]
 80439f2:	f003 0307 	and.w	r3, r3, #7
 80439f6:	009b      	lsls	r3, r3, #2
 80439f8:	fa02 f303 	lsl.w	r3, r2, r3
 80439fc:	69ba      	ldr	r2, [r7, #24]
 80439fe:	4313      	orrs	r3, r2
 8043a00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8043a02:	69fb      	ldr	r3, [r7, #28]
 8043a04:	08da      	lsrs	r2, r3, #3
 8043a06:	687b      	ldr	r3, [r7, #4]
 8043a08:	3208      	adds	r2, #8
 8043a0a:	69b9      	ldr	r1, [r7, #24]
 8043a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8043a10:	687b      	ldr	r3, [r7, #4]
 8043a12:	681b      	ldr	r3, [r3, #0]
 8043a14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8043a16:	69fb      	ldr	r3, [r7, #28]
 8043a18:	005b      	lsls	r3, r3, #1
 8043a1a:	2203      	movs	r2, #3
 8043a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8043a20:	43db      	mvns	r3, r3
 8043a22:	69ba      	ldr	r2, [r7, #24]
 8043a24:	4013      	ands	r3, r2
 8043a26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8043a28:	683b      	ldr	r3, [r7, #0]
 8043a2a:	685b      	ldr	r3, [r3, #4]
 8043a2c:	f003 0203 	and.w	r2, r3, #3
 8043a30:	69fb      	ldr	r3, [r7, #28]
 8043a32:	005b      	lsls	r3, r3, #1
 8043a34:	fa02 f303 	lsl.w	r3, r2, r3
 8043a38:	69ba      	ldr	r2, [r7, #24]
 8043a3a:	4313      	orrs	r3, r2
 8043a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8043a3e:	687b      	ldr	r3, [r7, #4]
 8043a40:	69ba      	ldr	r2, [r7, #24]
 8043a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8043a44:	683b      	ldr	r3, [r7, #0]
 8043a46:	685b      	ldr	r3, [r3, #4]
 8043a48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8043a4c:	2b00      	cmp	r3, #0
 8043a4e:	f000 80c0 	beq.w	8043bd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8043a52:	2300      	movs	r3, #0
 8043a54:	60fb      	str	r3, [r7, #12]
 8043a56:	4b66      	ldr	r3, [pc, #408]	; (8043bf0 <HAL_GPIO_Init+0x324>)
 8043a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043a5a:	4a65      	ldr	r2, [pc, #404]	; (8043bf0 <HAL_GPIO_Init+0x324>)
 8043a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8043a60:	6453      	str	r3, [r2, #68]	; 0x44
 8043a62:	4b63      	ldr	r3, [pc, #396]	; (8043bf0 <HAL_GPIO_Init+0x324>)
 8043a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8043a6a:	60fb      	str	r3, [r7, #12]
 8043a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8043a6e:	4a61      	ldr	r2, [pc, #388]	; (8043bf4 <HAL_GPIO_Init+0x328>)
 8043a70:	69fb      	ldr	r3, [r7, #28]
 8043a72:	089b      	lsrs	r3, r3, #2
 8043a74:	3302      	adds	r3, #2
 8043a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8043a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8043a7c:	69fb      	ldr	r3, [r7, #28]
 8043a7e:	f003 0303 	and.w	r3, r3, #3
 8043a82:	009b      	lsls	r3, r3, #2
 8043a84:	220f      	movs	r2, #15
 8043a86:	fa02 f303 	lsl.w	r3, r2, r3
 8043a8a:	43db      	mvns	r3, r3
 8043a8c:	69ba      	ldr	r2, [r7, #24]
 8043a8e:	4013      	ands	r3, r2
 8043a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8043a92:	687b      	ldr	r3, [r7, #4]
 8043a94:	4a58      	ldr	r2, [pc, #352]	; (8043bf8 <HAL_GPIO_Init+0x32c>)
 8043a96:	4293      	cmp	r3, r2
 8043a98:	d037      	beq.n	8043b0a <HAL_GPIO_Init+0x23e>
 8043a9a:	687b      	ldr	r3, [r7, #4]
 8043a9c:	4a57      	ldr	r2, [pc, #348]	; (8043bfc <HAL_GPIO_Init+0x330>)
 8043a9e:	4293      	cmp	r3, r2
 8043aa0:	d031      	beq.n	8043b06 <HAL_GPIO_Init+0x23a>
 8043aa2:	687b      	ldr	r3, [r7, #4]
 8043aa4:	4a56      	ldr	r2, [pc, #344]	; (8043c00 <HAL_GPIO_Init+0x334>)
 8043aa6:	4293      	cmp	r3, r2
 8043aa8:	d02b      	beq.n	8043b02 <HAL_GPIO_Init+0x236>
 8043aaa:	687b      	ldr	r3, [r7, #4]
 8043aac:	4a55      	ldr	r2, [pc, #340]	; (8043c04 <HAL_GPIO_Init+0x338>)
 8043aae:	4293      	cmp	r3, r2
 8043ab0:	d025      	beq.n	8043afe <HAL_GPIO_Init+0x232>
 8043ab2:	687b      	ldr	r3, [r7, #4]
 8043ab4:	4a54      	ldr	r2, [pc, #336]	; (8043c08 <HAL_GPIO_Init+0x33c>)
 8043ab6:	4293      	cmp	r3, r2
 8043ab8:	d01f      	beq.n	8043afa <HAL_GPIO_Init+0x22e>
 8043aba:	687b      	ldr	r3, [r7, #4]
 8043abc:	4a53      	ldr	r2, [pc, #332]	; (8043c0c <HAL_GPIO_Init+0x340>)
 8043abe:	4293      	cmp	r3, r2
 8043ac0:	d019      	beq.n	8043af6 <HAL_GPIO_Init+0x22a>
 8043ac2:	687b      	ldr	r3, [r7, #4]
 8043ac4:	4a52      	ldr	r2, [pc, #328]	; (8043c10 <HAL_GPIO_Init+0x344>)
 8043ac6:	4293      	cmp	r3, r2
 8043ac8:	d013      	beq.n	8043af2 <HAL_GPIO_Init+0x226>
 8043aca:	687b      	ldr	r3, [r7, #4]
 8043acc:	4a51      	ldr	r2, [pc, #324]	; (8043c14 <HAL_GPIO_Init+0x348>)
 8043ace:	4293      	cmp	r3, r2
 8043ad0:	d00d      	beq.n	8043aee <HAL_GPIO_Init+0x222>
 8043ad2:	687b      	ldr	r3, [r7, #4]
 8043ad4:	4a50      	ldr	r2, [pc, #320]	; (8043c18 <HAL_GPIO_Init+0x34c>)
 8043ad6:	4293      	cmp	r3, r2
 8043ad8:	d007      	beq.n	8043aea <HAL_GPIO_Init+0x21e>
 8043ada:	687b      	ldr	r3, [r7, #4]
 8043adc:	4a4f      	ldr	r2, [pc, #316]	; (8043c1c <HAL_GPIO_Init+0x350>)
 8043ade:	4293      	cmp	r3, r2
 8043ae0:	d101      	bne.n	8043ae6 <HAL_GPIO_Init+0x21a>
 8043ae2:	2309      	movs	r3, #9
 8043ae4:	e012      	b.n	8043b0c <HAL_GPIO_Init+0x240>
 8043ae6:	230a      	movs	r3, #10
 8043ae8:	e010      	b.n	8043b0c <HAL_GPIO_Init+0x240>
 8043aea:	2308      	movs	r3, #8
 8043aec:	e00e      	b.n	8043b0c <HAL_GPIO_Init+0x240>
 8043aee:	2307      	movs	r3, #7
 8043af0:	e00c      	b.n	8043b0c <HAL_GPIO_Init+0x240>
 8043af2:	2306      	movs	r3, #6
 8043af4:	e00a      	b.n	8043b0c <HAL_GPIO_Init+0x240>
 8043af6:	2305      	movs	r3, #5
 8043af8:	e008      	b.n	8043b0c <HAL_GPIO_Init+0x240>
 8043afa:	2304      	movs	r3, #4
 8043afc:	e006      	b.n	8043b0c <HAL_GPIO_Init+0x240>
 8043afe:	2303      	movs	r3, #3
 8043b00:	e004      	b.n	8043b0c <HAL_GPIO_Init+0x240>
 8043b02:	2302      	movs	r3, #2
 8043b04:	e002      	b.n	8043b0c <HAL_GPIO_Init+0x240>
 8043b06:	2301      	movs	r3, #1
 8043b08:	e000      	b.n	8043b0c <HAL_GPIO_Init+0x240>
 8043b0a:	2300      	movs	r3, #0
 8043b0c:	69fa      	ldr	r2, [r7, #28]
 8043b0e:	f002 0203 	and.w	r2, r2, #3
 8043b12:	0092      	lsls	r2, r2, #2
 8043b14:	4093      	lsls	r3, r2
 8043b16:	69ba      	ldr	r2, [r7, #24]
 8043b18:	4313      	orrs	r3, r2
 8043b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8043b1c:	4935      	ldr	r1, [pc, #212]	; (8043bf4 <HAL_GPIO_Init+0x328>)
 8043b1e:	69fb      	ldr	r3, [r7, #28]
 8043b20:	089b      	lsrs	r3, r3, #2
 8043b22:	3302      	adds	r3, #2
 8043b24:	69ba      	ldr	r2, [r7, #24]
 8043b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8043b2a:	4b3d      	ldr	r3, [pc, #244]	; (8043c20 <HAL_GPIO_Init+0x354>)
 8043b2c:	689b      	ldr	r3, [r3, #8]
 8043b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043b30:	693b      	ldr	r3, [r7, #16]
 8043b32:	43db      	mvns	r3, r3
 8043b34:	69ba      	ldr	r2, [r7, #24]
 8043b36:	4013      	ands	r3, r2
 8043b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8043b3a:	683b      	ldr	r3, [r7, #0]
 8043b3c:	685b      	ldr	r3, [r3, #4]
 8043b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8043b42:	2b00      	cmp	r3, #0
 8043b44:	d003      	beq.n	8043b4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8043b46:	69ba      	ldr	r2, [r7, #24]
 8043b48:	693b      	ldr	r3, [r7, #16]
 8043b4a:	4313      	orrs	r3, r2
 8043b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8043b4e:	4a34      	ldr	r2, [pc, #208]	; (8043c20 <HAL_GPIO_Init+0x354>)
 8043b50:	69bb      	ldr	r3, [r7, #24]
 8043b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8043b54:	4b32      	ldr	r3, [pc, #200]	; (8043c20 <HAL_GPIO_Init+0x354>)
 8043b56:	68db      	ldr	r3, [r3, #12]
 8043b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043b5a:	693b      	ldr	r3, [r7, #16]
 8043b5c:	43db      	mvns	r3, r3
 8043b5e:	69ba      	ldr	r2, [r7, #24]
 8043b60:	4013      	ands	r3, r2
 8043b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8043b64:	683b      	ldr	r3, [r7, #0]
 8043b66:	685b      	ldr	r3, [r3, #4]
 8043b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8043b6c:	2b00      	cmp	r3, #0
 8043b6e:	d003      	beq.n	8043b78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8043b70:	69ba      	ldr	r2, [r7, #24]
 8043b72:	693b      	ldr	r3, [r7, #16]
 8043b74:	4313      	orrs	r3, r2
 8043b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8043b78:	4a29      	ldr	r2, [pc, #164]	; (8043c20 <HAL_GPIO_Init+0x354>)
 8043b7a:	69bb      	ldr	r3, [r7, #24]
 8043b7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8043b7e:	4b28      	ldr	r3, [pc, #160]	; (8043c20 <HAL_GPIO_Init+0x354>)
 8043b80:	685b      	ldr	r3, [r3, #4]
 8043b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043b84:	693b      	ldr	r3, [r7, #16]
 8043b86:	43db      	mvns	r3, r3
 8043b88:	69ba      	ldr	r2, [r7, #24]
 8043b8a:	4013      	ands	r3, r2
 8043b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8043b8e:	683b      	ldr	r3, [r7, #0]
 8043b90:	685b      	ldr	r3, [r3, #4]
 8043b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043b96:	2b00      	cmp	r3, #0
 8043b98:	d003      	beq.n	8043ba2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8043b9a:	69ba      	ldr	r2, [r7, #24]
 8043b9c:	693b      	ldr	r3, [r7, #16]
 8043b9e:	4313      	orrs	r3, r2
 8043ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8043ba2:	4a1f      	ldr	r2, [pc, #124]	; (8043c20 <HAL_GPIO_Init+0x354>)
 8043ba4:	69bb      	ldr	r3, [r7, #24]
 8043ba6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8043ba8:	4b1d      	ldr	r3, [pc, #116]	; (8043c20 <HAL_GPIO_Init+0x354>)
 8043baa:	681b      	ldr	r3, [r3, #0]
 8043bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043bae:	693b      	ldr	r3, [r7, #16]
 8043bb0:	43db      	mvns	r3, r3
 8043bb2:	69ba      	ldr	r2, [r7, #24]
 8043bb4:	4013      	ands	r3, r2
 8043bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8043bb8:	683b      	ldr	r3, [r7, #0]
 8043bba:	685b      	ldr	r3, [r3, #4]
 8043bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8043bc0:	2b00      	cmp	r3, #0
 8043bc2:	d003      	beq.n	8043bcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8043bc4:	69ba      	ldr	r2, [r7, #24]
 8043bc6:	693b      	ldr	r3, [r7, #16]
 8043bc8:	4313      	orrs	r3, r2
 8043bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8043bcc:	4a14      	ldr	r2, [pc, #80]	; (8043c20 <HAL_GPIO_Init+0x354>)
 8043bce:	69bb      	ldr	r3, [r7, #24]
 8043bd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043bd2:	69fb      	ldr	r3, [r7, #28]
 8043bd4:	3301      	adds	r3, #1
 8043bd6:	61fb      	str	r3, [r7, #28]
 8043bd8:	69fb      	ldr	r3, [r7, #28]
 8043bda:	2b0f      	cmp	r3, #15
 8043bdc:	f67f ae84 	bls.w	80438e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8043be0:	bf00      	nop
 8043be2:	bf00      	nop
 8043be4:	3724      	adds	r7, #36	; 0x24
 8043be6:	46bd      	mov	sp, r7
 8043be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043bec:	4770      	bx	lr
 8043bee:	bf00      	nop
 8043bf0:	40023800 	.word	0x40023800
 8043bf4:	40013800 	.word	0x40013800
 8043bf8:	40020000 	.word	0x40020000
 8043bfc:	40020400 	.word	0x40020400
 8043c00:	40020800 	.word	0x40020800
 8043c04:	40020c00 	.word	0x40020c00
 8043c08:	40021000 	.word	0x40021000
 8043c0c:	40021400 	.word	0x40021400
 8043c10:	40021800 	.word	0x40021800
 8043c14:	40021c00 	.word	0x40021c00
 8043c18:	40022000 	.word	0x40022000
 8043c1c:	40022400 	.word	0x40022400
 8043c20:	40013c00 	.word	0x40013c00

08043c24 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8043c24:	b480      	push	{r7}
 8043c26:	b087      	sub	sp, #28
 8043c28:	af00      	add	r7, sp, #0
 8043c2a:	6078      	str	r0, [r7, #4]
 8043c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8043c2e:	2300      	movs	r3, #0
 8043c30:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8043c32:	2300      	movs	r3, #0
 8043c34:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8043c36:	2300      	movs	r3, #0
 8043c38:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043c3a:	2300      	movs	r3, #0
 8043c3c:	617b      	str	r3, [r7, #20]
 8043c3e:	e0d9      	b.n	8043df4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8043c40:	2201      	movs	r2, #1
 8043c42:	697b      	ldr	r3, [r7, #20]
 8043c44:	fa02 f303 	lsl.w	r3, r2, r3
 8043c48:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8043c4a:	683a      	ldr	r2, [r7, #0]
 8043c4c:	693b      	ldr	r3, [r7, #16]
 8043c4e:	4013      	ands	r3, r2
 8043c50:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8043c52:	68fa      	ldr	r2, [r7, #12]
 8043c54:	693b      	ldr	r3, [r7, #16]
 8043c56:	429a      	cmp	r2, r3
 8043c58:	f040 80c9 	bne.w	8043dee <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8043c5c:	4a6b      	ldr	r2, [pc, #428]	; (8043e0c <HAL_GPIO_DeInit+0x1e8>)
 8043c5e:	697b      	ldr	r3, [r7, #20]
 8043c60:	089b      	lsrs	r3, r3, #2
 8043c62:	3302      	adds	r3, #2
 8043c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8043c68:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8043c6a:	697b      	ldr	r3, [r7, #20]
 8043c6c:	f003 0303 	and.w	r3, r3, #3
 8043c70:	009b      	lsls	r3, r3, #2
 8043c72:	220f      	movs	r2, #15
 8043c74:	fa02 f303 	lsl.w	r3, r2, r3
 8043c78:	68ba      	ldr	r2, [r7, #8]
 8043c7a:	4013      	ands	r3, r2
 8043c7c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8043c7e:	687b      	ldr	r3, [r7, #4]
 8043c80:	4a63      	ldr	r2, [pc, #396]	; (8043e10 <HAL_GPIO_DeInit+0x1ec>)
 8043c82:	4293      	cmp	r3, r2
 8043c84:	d037      	beq.n	8043cf6 <HAL_GPIO_DeInit+0xd2>
 8043c86:	687b      	ldr	r3, [r7, #4]
 8043c88:	4a62      	ldr	r2, [pc, #392]	; (8043e14 <HAL_GPIO_DeInit+0x1f0>)
 8043c8a:	4293      	cmp	r3, r2
 8043c8c:	d031      	beq.n	8043cf2 <HAL_GPIO_DeInit+0xce>
 8043c8e:	687b      	ldr	r3, [r7, #4]
 8043c90:	4a61      	ldr	r2, [pc, #388]	; (8043e18 <HAL_GPIO_DeInit+0x1f4>)
 8043c92:	4293      	cmp	r3, r2
 8043c94:	d02b      	beq.n	8043cee <HAL_GPIO_DeInit+0xca>
 8043c96:	687b      	ldr	r3, [r7, #4]
 8043c98:	4a60      	ldr	r2, [pc, #384]	; (8043e1c <HAL_GPIO_DeInit+0x1f8>)
 8043c9a:	4293      	cmp	r3, r2
 8043c9c:	d025      	beq.n	8043cea <HAL_GPIO_DeInit+0xc6>
 8043c9e:	687b      	ldr	r3, [r7, #4]
 8043ca0:	4a5f      	ldr	r2, [pc, #380]	; (8043e20 <HAL_GPIO_DeInit+0x1fc>)
 8043ca2:	4293      	cmp	r3, r2
 8043ca4:	d01f      	beq.n	8043ce6 <HAL_GPIO_DeInit+0xc2>
 8043ca6:	687b      	ldr	r3, [r7, #4]
 8043ca8:	4a5e      	ldr	r2, [pc, #376]	; (8043e24 <HAL_GPIO_DeInit+0x200>)
 8043caa:	4293      	cmp	r3, r2
 8043cac:	d019      	beq.n	8043ce2 <HAL_GPIO_DeInit+0xbe>
 8043cae:	687b      	ldr	r3, [r7, #4]
 8043cb0:	4a5d      	ldr	r2, [pc, #372]	; (8043e28 <HAL_GPIO_DeInit+0x204>)
 8043cb2:	4293      	cmp	r3, r2
 8043cb4:	d013      	beq.n	8043cde <HAL_GPIO_DeInit+0xba>
 8043cb6:	687b      	ldr	r3, [r7, #4]
 8043cb8:	4a5c      	ldr	r2, [pc, #368]	; (8043e2c <HAL_GPIO_DeInit+0x208>)
 8043cba:	4293      	cmp	r3, r2
 8043cbc:	d00d      	beq.n	8043cda <HAL_GPIO_DeInit+0xb6>
 8043cbe:	687b      	ldr	r3, [r7, #4]
 8043cc0:	4a5b      	ldr	r2, [pc, #364]	; (8043e30 <HAL_GPIO_DeInit+0x20c>)
 8043cc2:	4293      	cmp	r3, r2
 8043cc4:	d007      	beq.n	8043cd6 <HAL_GPIO_DeInit+0xb2>
 8043cc6:	687b      	ldr	r3, [r7, #4]
 8043cc8:	4a5a      	ldr	r2, [pc, #360]	; (8043e34 <HAL_GPIO_DeInit+0x210>)
 8043cca:	4293      	cmp	r3, r2
 8043ccc:	d101      	bne.n	8043cd2 <HAL_GPIO_DeInit+0xae>
 8043cce:	2309      	movs	r3, #9
 8043cd0:	e012      	b.n	8043cf8 <HAL_GPIO_DeInit+0xd4>
 8043cd2:	230a      	movs	r3, #10
 8043cd4:	e010      	b.n	8043cf8 <HAL_GPIO_DeInit+0xd4>
 8043cd6:	2308      	movs	r3, #8
 8043cd8:	e00e      	b.n	8043cf8 <HAL_GPIO_DeInit+0xd4>
 8043cda:	2307      	movs	r3, #7
 8043cdc:	e00c      	b.n	8043cf8 <HAL_GPIO_DeInit+0xd4>
 8043cde:	2306      	movs	r3, #6
 8043ce0:	e00a      	b.n	8043cf8 <HAL_GPIO_DeInit+0xd4>
 8043ce2:	2305      	movs	r3, #5
 8043ce4:	e008      	b.n	8043cf8 <HAL_GPIO_DeInit+0xd4>
 8043ce6:	2304      	movs	r3, #4
 8043ce8:	e006      	b.n	8043cf8 <HAL_GPIO_DeInit+0xd4>
 8043cea:	2303      	movs	r3, #3
 8043cec:	e004      	b.n	8043cf8 <HAL_GPIO_DeInit+0xd4>
 8043cee:	2302      	movs	r3, #2
 8043cf0:	e002      	b.n	8043cf8 <HAL_GPIO_DeInit+0xd4>
 8043cf2:	2301      	movs	r3, #1
 8043cf4:	e000      	b.n	8043cf8 <HAL_GPIO_DeInit+0xd4>
 8043cf6:	2300      	movs	r3, #0
 8043cf8:	697a      	ldr	r2, [r7, #20]
 8043cfa:	f002 0203 	and.w	r2, r2, #3
 8043cfe:	0092      	lsls	r2, r2, #2
 8043d00:	4093      	lsls	r3, r2
 8043d02:	68ba      	ldr	r2, [r7, #8]
 8043d04:	429a      	cmp	r2, r3
 8043d06:	d132      	bne.n	8043d6e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8043d08:	4b4b      	ldr	r3, [pc, #300]	; (8043e38 <HAL_GPIO_DeInit+0x214>)
 8043d0a:	681a      	ldr	r2, [r3, #0]
 8043d0c:	68fb      	ldr	r3, [r7, #12]
 8043d0e:	43db      	mvns	r3, r3
 8043d10:	4949      	ldr	r1, [pc, #292]	; (8043e38 <HAL_GPIO_DeInit+0x214>)
 8043d12:	4013      	ands	r3, r2
 8043d14:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8043d16:	4b48      	ldr	r3, [pc, #288]	; (8043e38 <HAL_GPIO_DeInit+0x214>)
 8043d18:	685a      	ldr	r2, [r3, #4]
 8043d1a:	68fb      	ldr	r3, [r7, #12]
 8043d1c:	43db      	mvns	r3, r3
 8043d1e:	4946      	ldr	r1, [pc, #280]	; (8043e38 <HAL_GPIO_DeInit+0x214>)
 8043d20:	4013      	ands	r3, r2
 8043d22:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8043d24:	4b44      	ldr	r3, [pc, #272]	; (8043e38 <HAL_GPIO_DeInit+0x214>)
 8043d26:	68da      	ldr	r2, [r3, #12]
 8043d28:	68fb      	ldr	r3, [r7, #12]
 8043d2a:	43db      	mvns	r3, r3
 8043d2c:	4942      	ldr	r1, [pc, #264]	; (8043e38 <HAL_GPIO_DeInit+0x214>)
 8043d2e:	4013      	ands	r3, r2
 8043d30:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8043d32:	4b41      	ldr	r3, [pc, #260]	; (8043e38 <HAL_GPIO_DeInit+0x214>)
 8043d34:	689a      	ldr	r2, [r3, #8]
 8043d36:	68fb      	ldr	r3, [r7, #12]
 8043d38:	43db      	mvns	r3, r3
 8043d3a:	493f      	ldr	r1, [pc, #252]	; (8043e38 <HAL_GPIO_DeInit+0x214>)
 8043d3c:	4013      	ands	r3, r2
 8043d3e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8043d40:	697b      	ldr	r3, [r7, #20]
 8043d42:	f003 0303 	and.w	r3, r3, #3
 8043d46:	009b      	lsls	r3, r3, #2
 8043d48:	220f      	movs	r2, #15
 8043d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8043d4e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8043d50:	4a2e      	ldr	r2, [pc, #184]	; (8043e0c <HAL_GPIO_DeInit+0x1e8>)
 8043d52:	697b      	ldr	r3, [r7, #20]
 8043d54:	089b      	lsrs	r3, r3, #2
 8043d56:	3302      	adds	r3, #2
 8043d58:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8043d5c:	68bb      	ldr	r3, [r7, #8]
 8043d5e:	43da      	mvns	r2, r3
 8043d60:	482a      	ldr	r0, [pc, #168]	; (8043e0c <HAL_GPIO_DeInit+0x1e8>)
 8043d62:	697b      	ldr	r3, [r7, #20]
 8043d64:	089b      	lsrs	r3, r3, #2
 8043d66:	400a      	ands	r2, r1
 8043d68:	3302      	adds	r3, #2
 8043d6a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8043d6e:	687b      	ldr	r3, [r7, #4]
 8043d70:	681a      	ldr	r2, [r3, #0]
 8043d72:	697b      	ldr	r3, [r7, #20]
 8043d74:	005b      	lsls	r3, r3, #1
 8043d76:	2103      	movs	r1, #3
 8043d78:	fa01 f303 	lsl.w	r3, r1, r3
 8043d7c:	43db      	mvns	r3, r3
 8043d7e:	401a      	ands	r2, r3
 8043d80:	687b      	ldr	r3, [r7, #4]
 8043d82:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8043d84:	697b      	ldr	r3, [r7, #20]
 8043d86:	08da      	lsrs	r2, r3, #3
 8043d88:	687b      	ldr	r3, [r7, #4]
 8043d8a:	3208      	adds	r2, #8
 8043d8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8043d90:	697b      	ldr	r3, [r7, #20]
 8043d92:	f003 0307 	and.w	r3, r3, #7
 8043d96:	009b      	lsls	r3, r3, #2
 8043d98:	220f      	movs	r2, #15
 8043d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8043d9e:	43db      	mvns	r3, r3
 8043da0:	697a      	ldr	r2, [r7, #20]
 8043da2:	08d2      	lsrs	r2, r2, #3
 8043da4:	4019      	ands	r1, r3
 8043da6:	687b      	ldr	r3, [r7, #4]
 8043da8:	3208      	adds	r2, #8
 8043daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8043dae:	687b      	ldr	r3, [r7, #4]
 8043db0:	68da      	ldr	r2, [r3, #12]
 8043db2:	697b      	ldr	r3, [r7, #20]
 8043db4:	005b      	lsls	r3, r3, #1
 8043db6:	2103      	movs	r1, #3
 8043db8:	fa01 f303 	lsl.w	r3, r1, r3
 8043dbc:	43db      	mvns	r3, r3
 8043dbe:	401a      	ands	r2, r3
 8043dc0:	687b      	ldr	r3, [r7, #4]
 8043dc2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8043dc4:	687b      	ldr	r3, [r7, #4]
 8043dc6:	685a      	ldr	r2, [r3, #4]
 8043dc8:	2101      	movs	r1, #1
 8043dca:	697b      	ldr	r3, [r7, #20]
 8043dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8043dd0:	43db      	mvns	r3, r3
 8043dd2:	401a      	ands	r2, r3
 8043dd4:	687b      	ldr	r3, [r7, #4]
 8043dd6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8043dd8:	687b      	ldr	r3, [r7, #4]
 8043dda:	689a      	ldr	r2, [r3, #8]
 8043ddc:	697b      	ldr	r3, [r7, #20]
 8043dde:	005b      	lsls	r3, r3, #1
 8043de0:	2103      	movs	r1, #3
 8043de2:	fa01 f303 	lsl.w	r3, r1, r3
 8043de6:	43db      	mvns	r3, r3
 8043de8:	401a      	ands	r2, r3
 8043dea:	687b      	ldr	r3, [r7, #4]
 8043dec:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043dee:	697b      	ldr	r3, [r7, #20]
 8043df0:	3301      	adds	r3, #1
 8043df2:	617b      	str	r3, [r7, #20]
 8043df4:	697b      	ldr	r3, [r7, #20]
 8043df6:	2b0f      	cmp	r3, #15
 8043df8:	f67f af22 	bls.w	8043c40 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8043dfc:	bf00      	nop
 8043dfe:	bf00      	nop
 8043e00:	371c      	adds	r7, #28
 8043e02:	46bd      	mov	sp, r7
 8043e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e08:	4770      	bx	lr
 8043e0a:	bf00      	nop
 8043e0c:	40013800 	.word	0x40013800
 8043e10:	40020000 	.word	0x40020000
 8043e14:	40020400 	.word	0x40020400
 8043e18:	40020800 	.word	0x40020800
 8043e1c:	40020c00 	.word	0x40020c00
 8043e20:	40021000 	.word	0x40021000
 8043e24:	40021400 	.word	0x40021400
 8043e28:	40021800 	.word	0x40021800
 8043e2c:	40021c00 	.word	0x40021c00
 8043e30:	40022000 	.word	0x40022000
 8043e34:	40022400 	.word	0x40022400
 8043e38:	40013c00 	.word	0x40013c00

08043e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8043e3c:	b480      	push	{r7}
 8043e3e:	b083      	sub	sp, #12
 8043e40:	af00      	add	r7, sp, #0
 8043e42:	6078      	str	r0, [r7, #4]
 8043e44:	460b      	mov	r3, r1
 8043e46:	807b      	strh	r3, [r7, #2]
 8043e48:	4613      	mov	r3, r2
 8043e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8043e4c:	787b      	ldrb	r3, [r7, #1]
 8043e4e:	2b00      	cmp	r3, #0
 8043e50:	d003      	beq.n	8043e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8043e52:	887a      	ldrh	r2, [r7, #2]
 8043e54:	687b      	ldr	r3, [r7, #4]
 8043e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8043e58:	e003      	b.n	8043e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8043e5a:	887b      	ldrh	r3, [r7, #2]
 8043e5c:	041a      	lsls	r2, r3, #16
 8043e5e:	687b      	ldr	r3, [r7, #4]
 8043e60:	619a      	str	r2, [r3, #24]
}
 8043e62:	bf00      	nop
 8043e64:	370c      	adds	r7, #12
 8043e66:	46bd      	mov	sp, r7
 8043e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e6c:	4770      	bx	lr

08043e6e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8043e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8043e70:	b08f      	sub	sp, #60	; 0x3c
 8043e72:	af0a      	add	r7, sp, #40	; 0x28
 8043e74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8043e76:	687b      	ldr	r3, [r7, #4]
 8043e78:	2b00      	cmp	r3, #0
 8043e7a:	d101      	bne.n	8043e80 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8043e7c:	2301      	movs	r3, #1
 8043e7e:	e054      	b.n	8043f2a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8043e80:	687b      	ldr	r3, [r7, #4]
 8043e82:	681b      	ldr	r3, [r3, #0]
 8043e84:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8043e86:	687b      	ldr	r3, [r7, #4]
 8043e88:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8043e8c:	b2db      	uxtb	r3, r3
 8043e8e:	2b00      	cmp	r3, #0
 8043e90:	d106      	bne.n	8043ea0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8043e92:	687b      	ldr	r3, [r7, #4]
 8043e94:	2200      	movs	r2, #0
 8043e96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8043e9a:	6878      	ldr	r0, [r7, #4]
 8043e9c:	f007 ff4c 	bl	804bd38 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8043ea0:	687b      	ldr	r3, [r7, #4]
 8043ea2:	2203      	movs	r2, #3
 8043ea4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8043ea8:	68fb      	ldr	r3, [r7, #12]
 8043eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043eb0:	2b00      	cmp	r3, #0
 8043eb2:	d102      	bne.n	8043eba <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8043eb4:	687b      	ldr	r3, [r7, #4]
 8043eb6:	2200      	movs	r2, #0
 8043eb8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8043eba:	687b      	ldr	r3, [r7, #4]
 8043ebc:	681b      	ldr	r3, [r3, #0]
 8043ebe:	4618      	mov	r0, r3
 8043ec0:	f004 ff7a 	bl	8048db8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8043ec4:	687b      	ldr	r3, [r7, #4]
 8043ec6:	681b      	ldr	r3, [r3, #0]
 8043ec8:	603b      	str	r3, [r7, #0]
 8043eca:	687e      	ldr	r6, [r7, #4]
 8043ecc:	466d      	mov	r5, sp
 8043ece:	f106 0410 	add.w	r4, r6, #16
 8043ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8043ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8043ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8043ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8043eda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8043ede:	e885 0003 	stmia.w	r5, {r0, r1}
 8043ee2:	1d33      	adds	r3, r6, #4
 8043ee4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8043ee6:	6838      	ldr	r0, [r7, #0]
 8043ee8:	f004 fef4 	bl	8048cd4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8043eec:	687b      	ldr	r3, [r7, #4]
 8043eee:	681b      	ldr	r3, [r3, #0]
 8043ef0:	2101      	movs	r1, #1
 8043ef2:	4618      	mov	r0, r3
 8043ef4:	f004 ff71 	bl	8048dda <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8043ef8:	687b      	ldr	r3, [r7, #4]
 8043efa:	681b      	ldr	r3, [r3, #0]
 8043efc:	603b      	str	r3, [r7, #0]
 8043efe:	687e      	ldr	r6, [r7, #4]
 8043f00:	466d      	mov	r5, sp
 8043f02:	f106 0410 	add.w	r4, r6, #16
 8043f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8043f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8043f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8043f0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8043f0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8043f12:	e885 0003 	stmia.w	r5, {r0, r1}
 8043f16:	1d33      	adds	r3, r6, #4
 8043f18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8043f1a:	6838      	ldr	r0, [r7, #0]
 8043f1c:	f005 f8fa 	bl	8049114 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8043f20:	687b      	ldr	r3, [r7, #4]
 8043f22:	2201      	movs	r2, #1
 8043f24:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8043f28:	2300      	movs	r3, #0
}
 8043f2a:	4618      	mov	r0, r3
 8043f2c:	3714      	adds	r7, #20
 8043f2e:	46bd      	mov	sp, r7
 8043f30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08043f32 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8043f32:	b590      	push	{r4, r7, lr}
 8043f34:	b089      	sub	sp, #36	; 0x24
 8043f36:	af04      	add	r7, sp, #16
 8043f38:	6078      	str	r0, [r7, #4]
 8043f3a:	4608      	mov	r0, r1
 8043f3c:	4611      	mov	r1, r2
 8043f3e:	461a      	mov	r2, r3
 8043f40:	4603      	mov	r3, r0
 8043f42:	70fb      	strb	r3, [r7, #3]
 8043f44:	460b      	mov	r3, r1
 8043f46:	70bb      	strb	r3, [r7, #2]
 8043f48:	4613      	mov	r3, r2
 8043f4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8043f4c:	687b      	ldr	r3, [r7, #4]
 8043f4e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8043f52:	2b01      	cmp	r3, #1
 8043f54:	d101      	bne.n	8043f5a <HAL_HCD_HC_Init+0x28>
 8043f56:	2302      	movs	r3, #2
 8043f58:	e076      	b.n	8044048 <HAL_HCD_HC_Init+0x116>
 8043f5a:	687b      	ldr	r3, [r7, #4]
 8043f5c:	2201      	movs	r2, #1
 8043f5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8043f62:	78fb      	ldrb	r3, [r7, #3]
 8043f64:	687a      	ldr	r2, [r7, #4]
 8043f66:	212c      	movs	r1, #44	; 0x2c
 8043f68:	fb01 f303 	mul.w	r3, r1, r3
 8043f6c:	4413      	add	r3, r2
 8043f6e:	333d      	adds	r3, #61	; 0x3d
 8043f70:	2200      	movs	r2, #0
 8043f72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8043f74:	78fb      	ldrb	r3, [r7, #3]
 8043f76:	687a      	ldr	r2, [r7, #4]
 8043f78:	212c      	movs	r1, #44	; 0x2c
 8043f7a:	fb01 f303 	mul.w	r3, r1, r3
 8043f7e:	4413      	add	r3, r2
 8043f80:	3338      	adds	r3, #56	; 0x38
 8043f82:	787a      	ldrb	r2, [r7, #1]
 8043f84:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8043f86:	78fb      	ldrb	r3, [r7, #3]
 8043f88:	687a      	ldr	r2, [r7, #4]
 8043f8a:	212c      	movs	r1, #44	; 0x2c
 8043f8c:	fb01 f303 	mul.w	r3, r1, r3
 8043f90:	4413      	add	r3, r2
 8043f92:	3340      	adds	r3, #64	; 0x40
 8043f94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8043f96:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8043f98:	78fb      	ldrb	r3, [r7, #3]
 8043f9a:	687a      	ldr	r2, [r7, #4]
 8043f9c:	212c      	movs	r1, #44	; 0x2c
 8043f9e:	fb01 f303 	mul.w	r3, r1, r3
 8043fa2:	4413      	add	r3, r2
 8043fa4:	3339      	adds	r3, #57	; 0x39
 8043fa6:	78fa      	ldrb	r2, [r7, #3]
 8043fa8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8043faa:	78fb      	ldrb	r3, [r7, #3]
 8043fac:	687a      	ldr	r2, [r7, #4]
 8043fae:	212c      	movs	r1, #44	; 0x2c
 8043fb0:	fb01 f303 	mul.w	r3, r1, r3
 8043fb4:	4413      	add	r3, r2
 8043fb6:	333f      	adds	r3, #63	; 0x3f
 8043fb8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8043fbc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8043fbe:	78fb      	ldrb	r3, [r7, #3]
 8043fc0:	78ba      	ldrb	r2, [r7, #2]
 8043fc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8043fc6:	b2d0      	uxtb	r0, r2
 8043fc8:	687a      	ldr	r2, [r7, #4]
 8043fca:	212c      	movs	r1, #44	; 0x2c
 8043fcc:	fb01 f303 	mul.w	r3, r1, r3
 8043fd0:	4413      	add	r3, r2
 8043fd2:	333a      	adds	r3, #58	; 0x3a
 8043fd4:	4602      	mov	r2, r0
 8043fd6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8043fd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8043fdc:	2b00      	cmp	r3, #0
 8043fde:	da09      	bge.n	8043ff4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8043fe0:	78fb      	ldrb	r3, [r7, #3]
 8043fe2:	687a      	ldr	r2, [r7, #4]
 8043fe4:	212c      	movs	r1, #44	; 0x2c
 8043fe6:	fb01 f303 	mul.w	r3, r1, r3
 8043fea:	4413      	add	r3, r2
 8043fec:	333b      	adds	r3, #59	; 0x3b
 8043fee:	2201      	movs	r2, #1
 8043ff0:	701a      	strb	r2, [r3, #0]
 8043ff2:	e008      	b.n	8044006 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8043ff4:	78fb      	ldrb	r3, [r7, #3]
 8043ff6:	687a      	ldr	r2, [r7, #4]
 8043ff8:	212c      	movs	r1, #44	; 0x2c
 8043ffa:	fb01 f303 	mul.w	r3, r1, r3
 8043ffe:	4413      	add	r3, r2
 8044000:	333b      	adds	r3, #59	; 0x3b
 8044002:	2200      	movs	r2, #0
 8044004:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8044006:	78fb      	ldrb	r3, [r7, #3]
 8044008:	687a      	ldr	r2, [r7, #4]
 804400a:	212c      	movs	r1, #44	; 0x2c
 804400c:	fb01 f303 	mul.w	r3, r1, r3
 8044010:	4413      	add	r3, r2
 8044012:	333c      	adds	r3, #60	; 0x3c
 8044014:	f897 2020 	ldrb.w	r2, [r7, #32]
 8044018:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 804401a:	687b      	ldr	r3, [r7, #4]
 804401c:	6818      	ldr	r0, [r3, #0]
 804401e:	787c      	ldrb	r4, [r7, #1]
 8044020:	78ba      	ldrb	r2, [r7, #2]
 8044022:	78f9      	ldrb	r1, [r7, #3]
 8044024:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8044026:	9302      	str	r3, [sp, #8]
 8044028:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 804402c:	9301      	str	r3, [sp, #4]
 804402e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8044032:	9300      	str	r3, [sp, #0]
 8044034:	4623      	mov	r3, r4
 8044036:	f005 f9f3 	bl	8049420 <USB_HC_Init>
 804403a:	4603      	mov	r3, r0
 804403c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 804403e:	687b      	ldr	r3, [r7, #4]
 8044040:	2200      	movs	r2, #0
 8044042:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8044046:	7bfb      	ldrb	r3, [r7, #15]
}
 8044048:	4618      	mov	r0, r3
 804404a:	3714      	adds	r7, #20
 804404c:	46bd      	mov	sp, r7
 804404e:	bd90      	pop	{r4, r7, pc}

08044050 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8044050:	b580      	push	{r7, lr}
 8044052:	b084      	sub	sp, #16
 8044054:	af00      	add	r7, sp, #0
 8044056:	6078      	str	r0, [r7, #4]
 8044058:	460b      	mov	r3, r1
 804405a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 804405c:	2300      	movs	r3, #0
 804405e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8044060:	687b      	ldr	r3, [r7, #4]
 8044062:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8044066:	2b01      	cmp	r3, #1
 8044068:	d101      	bne.n	804406e <HAL_HCD_HC_Halt+0x1e>
 804406a:	2302      	movs	r3, #2
 804406c:	e00f      	b.n	804408e <HAL_HCD_HC_Halt+0x3e>
 804406e:	687b      	ldr	r3, [r7, #4]
 8044070:	2201      	movs	r2, #1
 8044072:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044076:	687b      	ldr	r3, [r7, #4]
 8044078:	681b      	ldr	r3, [r3, #0]
 804407a:	78fa      	ldrb	r2, [r7, #3]
 804407c:	4611      	mov	r1, r2
 804407e:	4618      	mov	r0, r3
 8044080:	f005 fc43 	bl	804990a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8044084:	687b      	ldr	r3, [r7, #4]
 8044086:	2200      	movs	r2, #0
 8044088:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 804408c:	7bfb      	ldrb	r3, [r7, #15]
}
 804408e:	4618      	mov	r0, r3
 8044090:	3710      	adds	r7, #16
 8044092:	46bd      	mov	sp, r7
 8044094:	bd80      	pop	{r7, pc}
	...

08044098 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8044098:	b580      	push	{r7, lr}
 804409a:	b082      	sub	sp, #8
 804409c:	af00      	add	r7, sp, #0
 804409e:	6078      	str	r0, [r7, #4]
 80440a0:	4608      	mov	r0, r1
 80440a2:	4611      	mov	r1, r2
 80440a4:	461a      	mov	r2, r3
 80440a6:	4603      	mov	r3, r0
 80440a8:	70fb      	strb	r3, [r7, #3]
 80440aa:	460b      	mov	r3, r1
 80440ac:	70bb      	strb	r3, [r7, #2]
 80440ae:	4613      	mov	r3, r2
 80440b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80440b2:	78fb      	ldrb	r3, [r7, #3]
 80440b4:	687a      	ldr	r2, [r7, #4]
 80440b6:	212c      	movs	r1, #44	; 0x2c
 80440b8:	fb01 f303 	mul.w	r3, r1, r3
 80440bc:	4413      	add	r3, r2
 80440be:	333b      	adds	r3, #59	; 0x3b
 80440c0:	78ba      	ldrb	r2, [r7, #2]
 80440c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80440c4:	78fb      	ldrb	r3, [r7, #3]
 80440c6:	687a      	ldr	r2, [r7, #4]
 80440c8:	212c      	movs	r1, #44	; 0x2c
 80440ca:	fb01 f303 	mul.w	r3, r1, r3
 80440ce:	4413      	add	r3, r2
 80440d0:	333f      	adds	r3, #63	; 0x3f
 80440d2:	787a      	ldrb	r2, [r7, #1]
 80440d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80440d6:	7c3b      	ldrb	r3, [r7, #16]
 80440d8:	2b00      	cmp	r3, #0
 80440da:	d112      	bne.n	8044102 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80440dc:	78fb      	ldrb	r3, [r7, #3]
 80440de:	687a      	ldr	r2, [r7, #4]
 80440e0:	212c      	movs	r1, #44	; 0x2c
 80440e2:	fb01 f303 	mul.w	r3, r1, r3
 80440e6:	4413      	add	r3, r2
 80440e8:	3342      	adds	r3, #66	; 0x42
 80440ea:	2203      	movs	r2, #3
 80440ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80440ee:	78fb      	ldrb	r3, [r7, #3]
 80440f0:	687a      	ldr	r2, [r7, #4]
 80440f2:	212c      	movs	r1, #44	; 0x2c
 80440f4:	fb01 f303 	mul.w	r3, r1, r3
 80440f8:	4413      	add	r3, r2
 80440fa:	333d      	adds	r3, #61	; 0x3d
 80440fc:	7f3a      	ldrb	r2, [r7, #28]
 80440fe:	701a      	strb	r2, [r3, #0]
 8044100:	e008      	b.n	8044114 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8044102:	78fb      	ldrb	r3, [r7, #3]
 8044104:	687a      	ldr	r2, [r7, #4]
 8044106:	212c      	movs	r1, #44	; 0x2c
 8044108:	fb01 f303 	mul.w	r3, r1, r3
 804410c:	4413      	add	r3, r2
 804410e:	3342      	adds	r3, #66	; 0x42
 8044110:	2202      	movs	r2, #2
 8044112:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8044114:	787b      	ldrb	r3, [r7, #1]
 8044116:	2b03      	cmp	r3, #3
 8044118:	f200 80c6 	bhi.w	80442a8 <HAL_HCD_HC_SubmitRequest+0x210>
 804411c:	a201      	add	r2, pc, #4	; (adr r2, 8044124 <HAL_HCD_HC_SubmitRequest+0x8c>)
 804411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044122:	bf00      	nop
 8044124:	08044135 	.word	0x08044135
 8044128:	08044295 	.word	0x08044295
 804412c:	08044199 	.word	0x08044199
 8044130:	08044217 	.word	0x08044217
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8044134:	7c3b      	ldrb	r3, [r7, #16]
 8044136:	2b01      	cmp	r3, #1
 8044138:	f040 80b8 	bne.w	80442ac <HAL_HCD_HC_SubmitRequest+0x214>
 804413c:	78bb      	ldrb	r3, [r7, #2]
 804413e:	2b00      	cmp	r3, #0
 8044140:	f040 80b4 	bne.w	80442ac <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8044144:	8b3b      	ldrh	r3, [r7, #24]
 8044146:	2b00      	cmp	r3, #0
 8044148:	d108      	bne.n	804415c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 804414a:	78fb      	ldrb	r3, [r7, #3]
 804414c:	687a      	ldr	r2, [r7, #4]
 804414e:	212c      	movs	r1, #44	; 0x2c
 8044150:	fb01 f303 	mul.w	r3, r1, r3
 8044154:	4413      	add	r3, r2
 8044156:	3355      	adds	r3, #85	; 0x55
 8044158:	2201      	movs	r2, #1
 804415a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 804415c:	78fb      	ldrb	r3, [r7, #3]
 804415e:	687a      	ldr	r2, [r7, #4]
 8044160:	212c      	movs	r1, #44	; 0x2c
 8044162:	fb01 f303 	mul.w	r3, r1, r3
 8044166:	4413      	add	r3, r2
 8044168:	3355      	adds	r3, #85	; 0x55
 804416a:	781b      	ldrb	r3, [r3, #0]
 804416c:	2b00      	cmp	r3, #0
 804416e:	d109      	bne.n	8044184 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8044170:	78fb      	ldrb	r3, [r7, #3]
 8044172:	687a      	ldr	r2, [r7, #4]
 8044174:	212c      	movs	r1, #44	; 0x2c
 8044176:	fb01 f303 	mul.w	r3, r1, r3
 804417a:	4413      	add	r3, r2
 804417c:	3342      	adds	r3, #66	; 0x42
 804417e:	2200      	movs	r2, #0
 8044180:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8044182:	e093      	b.n	80442ac <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8044184:	78fb      	ldrb	r3, [r7, #3]
 8044186:	687a      	ldr	r2, [r7, #4]
 8044188:	212c      	movs	r1, #44	; 0x2c
 804418a:	fb01 f303 	mul.w	r3, r1, r3
 804418e:	4413      	add	r3, r2
 8044190:	3342      	adds	r3, #66	; 0x42
 8044192:	2202      	movs	r2, #2
 8044194:	701a      	strb	r2, [r3, #0]
      break;
 8044196:	e089      	b.n	80442ac <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8044198:	78bb      	ldrb	r3, [r7, #2]
 804419a:	2b00      	cmp	r3, #0
 804419c:	d11d      	bne.n	80441da <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 804419e:	78fb      	ldrb	r3, [r7, #3]
 80441a0:	687a      	ldr	r2, [r7, #4]
 80441a2:	212c      	movs	r1, #44	; 0x2c
 80441a4:	fb01 f303 	mul.w	r3, r1, r3
 80441a8:	4413      	add	r3, r2
 80441aa:	3355      	adds	r3, #85	; 0x55
 80441ac:	781b      	ldrb	r3, [r3, #0]
 80441ae:	2b00      	cmp	r3, #0
 80441b0:	d109      	bne.n	80441c6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80441b2:	78fb      	ldrb	r3, [r7, #3]
 80441b4:	687a      	ldr	r2, [r7, #4]
 80441b6:	212c      	movs	r1, #44	; 0x2c
 80441b8:	fb01 f303 	mul.w	r3, r1, r3
 80441bc:	4413      	add	r3, r2
 80441be:	3342      	adds	r3, #66	; 0x42
 80441c0:	2200      	movs	r2, #0
 80441c2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80441c4:	e073      	b.n	80442ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80441c6:	78fb      	ldrb	r3, [r7, #3]
 80441c8:	687a      	ldr	r2, [r7, #4]
 80441ca:	212c      	movs	r1, #44	; 0x2c
 80441cc:	fb01 f303 	mul.w	r3, r1, r3
 80441d0:	4413      	add	r3, r2
 80441d2:	3342      	adds	r3, #66	; 0x42
 80441d4:	2202      	movs	r2, #2
 80441d6:	701a      	strb	r2, [r3, #0]
      break;
 80441d8:	e069      	b.n	80442ae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80441da:	78fb      	ldrb	r3, [r7, #3]
 80441dc:	687a      	ldr	r2, [r7, #4]
 80441de:	212c      	movs	r1, #44	; 0x2c
 80441e0:	fb01 f303 	mul.w	r3, r1, r3
 80441e4:	4413      	add	r3, r2
 80441e6:	3354      	adds	r3, #84	; 0x54
 80441e8:	781b      	ldrb	r3, [r3, #0]
 80441ea:	2b00      	cmp	r3, #0
 80441ec:	d109      	bne.n	8044202 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80441ee:	78fb      	ldrb	r3, [r7, #3]
 80441f0:	687a      	ldr	r2, [r7, #4]
 80441f2:	212c      	movs	r1, #44	; 0x2c
 80441f4:	fb01 f303 	mul.w	r3, r1, r3
 80441f8:	4413      	add	r3, r2
 80441fa:	3342      	adds	r3, #66	; 0x42
 80441fc:	2200      	movs	r2, #0
 80441fe:	701a      	strb	r2, [r3, #0]
      break;
 8044200:	e055      	b.n	80442ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8044202:	78fb      	ldrb	r3, [r7, #3]
 8044204:	687a      	ldr	r2, [r7, #4]
 8044206:	212c      	movs	r1, #44	; 0x2c
 8044208:	fb01 f303 	mul.w	r3, r1, r3
 804420c:	4413      	add	r3, r2
 804420e:	3342      	adds	r3, #66	; 0x42
 8044210:	2202      	movs	r2, #2
 8044212:	701a      	strb	r2, [r3, #0]
      break;
 8044214:	e04b      	b.n	80442ae <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8044216:	78bb      	ldrb	r3, [r7, #2]
 8044218:	2b00      	cmp	r3, #0
 804421a:	d11d      	bne.n	8044258 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 804421c:	78fb      	ldrb	r3, [r7, #3]
 804421e:	687a      	ldr	r2, [r7, #4]
 8044220:	212c      	movs	r1, #44	; 0x2c
 8044222:	fb01 f303 	mul.w	r3, r1, r3
 8044226:	4413      	add	r3, r2
 8044228:	3355      	adds	r3, #85	; 0x55
 804422a:	781b      	ldrb	r3, [r3, #0]
 804422c:	2b00      	cmp	r3, #0
 804422e:	d109      	bne.n	8044244 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8044230:	78fb      	ldrb	r3, [r7, #3]
 8044232:	687a      	ldr	r2, [r7, #4]
 8044234:	212c      	movs	r1, #44	; 0x2c
 8044236:	fb01 f303 	mul.w	r3, r1, r3
 804423a:	4413      	add	r3, r2
 804423c:	3342      	adds	r3, #66	; 0x42
 804423e:	2200      	movs	r2, #0
 8044240:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8044242:	e034      	b.n	80442ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8044244:	78fb      	ldrb	r3, [r7, #3]
 8044246:	687a      	ldr	r2, [r7, #4]
 8044248:	212c      	movs	r1, #44	; 0x2c
 804424a:	fb01 f303 	mul.w	r3, r1, r3
 804424e:	4413      	add	r3, r2
 8044250:	3342      	adds	r3, #66	; 0x42
 8044252:	2202      	movs	r2, #2
 8044254:	701a      	strb	r2, [r3, #0]
      break;
 8044256:	e02a      	b.n	80442ae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8044258:	78fb      	ldrb	r3, [r7, #3]
 804425a:	687a      	ldr	r2, [r7, #4]
 804425c:	212c      	movs	r1, #44	; 0x2c
 804425e:	fb01 f303 	mul.w	r3, r1, r3
 8044262:	4413      	add	r3, r2
 8044264:	3354      	adds	r3, #84	; 0x54
 8044266:	781b      	ldrb	r3, [r3, #0]
 8044268:	2b00      	cmp	r3, #0
 804426a:	d109      	bne.n	8044280 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 804426c:	78fb      	ldrb	r3, [r7, #3]
 804426e:	687a      	ldr	r2, [r7, #4]
 8044270:	212c      	movs	r1, #44	; 0x2c
 8044272:	fb01 f303 	mul.w	r3, r1, r3
 8044276:	4413      	add	r3, r2
 8044278:	3342      	adds	r3, #66	; 0x42
 804427a:	2200      	movs	r2, #0
 804427c:	701a      	strb	r2, [r3, #0]
      break;
 804427e:	e016      	b.n	80442ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8044280:	78fb      	ldrb	r3, [r7, #3]
 8044282:	687a      	ldr	r2, [r7, #4]
 8044284:	212c      	movs	r1, #44	; 0x2c
 8044286:	fb01 f303 	mul.w	r3, r1, r3
 804428a:	4413      	add	r3, r2
 804428c:	3342      	adds	r3, #66	; 0x42
 804428e:	2202      	movs	r2, #2
 8044290:	701a      	strb	r2, [r3, #0]
      break;
 8044292:	e00c      	b.n	80442ae <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8044294:	78fb      	ldrb	r3, [r7, #3]
 8044296:	687a      	ldr	r2, [r7, #4]
 8044298:	212c      	movs	r1, #44	; 0x2c
 804429a:	fb01 f303 	mul.w	r3, r1, r3
 804429e:	4413      	add	r3, r2
 80442a0:	3342      	adds	r3, #66	; 0x42
 80442a2:	2200      	movs	r2, #0
 80442a4:	701a      	strb	r2, [r3, #0]
      break;
 80442a6:	e002      	b.n	80442ae <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80442a8:	bf00      	nop
 80442aa:	e000      	b.n	80442ae <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80442ac:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80442ae:	78fb      	ldrb	r3, [r7, #3]
 80442b0:	687a      	ldr	r2, [r7, #4]
 80442b2:	212c      	movs	r1, #44	; 0x2c
 80442b4:	fb01 f303 	mul.w	r3, r1, r3
 80442b8:	4413      	add	r3, r2
 80442ba:	3344      	adds	r3, #68	; 0x44
 80442bc:	697a      	ldr	r2, [r7, #20]
 80442be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80442c0:	78fb      	ldrb	r3, [r7, #3]
 80442c2:	8b3a      	ldrh	r2, [r7, #24]
 80442c4:	6879      	ldr	r1, [r7, #4]
 80442c6:	202c      	movs	r0, #44	; 0x2c
 80442c8:	fb00 f303 	mul.w	r3, r0, r3
 80442cc:	440b      	add	r3, r1
 80442ce:	334c      	adds	r3, #76	; 0x4c
 80442d0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80442d2:	78fb      	ldrb	r3, [r7, #3]
 80442d4:	687a      	ldr	r2, [r7, #4]
 80442d6:	212c      	movs	r1, #44	; 0x2c
 80442d8:	fb01 f303 	mul.w	r3, r1, r3
 80442dc:	4413      	add	r3, r2
 80442de:	3360      	adds	r3, #96	; 0x60
 80442e0:	2200      	movs	r2, #0
 80442e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80442e4:	78fb      	ldrb	r3, [r7, #3]
 80442e6:	687a      	ldr	r2, [r7, #4]
 80442e8:	212c      	movs	r1, #44	; 0x2c
 80442ea:	fb01 f303 	mul.w	r3, r1, r3
 80442ee:	4413      	add	r3, r2
 80442f0:	3350      	adds	r3, #80	; 0x50
 80442f2:	2200      	movs	r2, #0
 80442f4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80442f6:	78fb      	ldrb	r3, [r7, #3]
 80442f8:	687a      	ldr	r2, [r7, #4]
 80442fa:	212c      	movs	r1, #44	; 0x2c
 80442fc:	fb01 f303 	mul.w	r3, r1, r3
 8044300:	4413      	add	r3, r2
 8044302:	3339      	adds	r3, #57	; 0x39
 8044304:	78fa      	ldrb	r2, [r7, #3]
 8044306:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8044308:	78fb      	ldrb	r3, [r7, #3]
 804430a:	687a      	ldr	r2, [r7, #4]
 804430c:	212c      	movs	r1, #44	; 0x2c
 804430e:	fb01 f303 	mul.w	r3, r1, r3
 8044312:	4413      	add	r3, r2
 8044314:	3361      	adds	r3, #97	; 0x61
 8044316:	2200      	movs	r2, #0
 8044318:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 804431a:	687b      	ldr	r3, [r7, #4]
 804431c:	6818      	ldr	r0, [r3, #0]
 804431e:	78fb      	ldrb	r3, [r7, #3]
 8044320:	222c      	movs	r2, #44	; 0x2c
 8044322:	fb02 f303 	mul.w	r3, r2, r3
 8044326:	3338      	adds	r3, #56	; 0x38
 8044328:	687a      	ldr	r2, [r7, #4]
 804432a:	18d1      	adds	r1, r2, r3
 804432c:	687b      	ldr	r3, [r7, #4]
 804432e:	691b      	ldr	r3, [r3, #16]
 8044330:	b2db      	uxtb	r3, r3
 8044332:	461a      	mov	r2, r3
 8044334:	f005 f996 	bl	8049664 <USB_HC_StartXfer>
 8044338:	4603      	mov	r3, r0
}
 804433a:	4618      	mov	r0, r3
 804433c:	3708      	adds	r7, #8
 804433e:	46bd      	mov	sp, r7
 8044340:	bd80      	pop	{r7, pc}
 8044342:	bf00      	nop

08044344 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8044344:	b580      	push	{r7, lr}
 8044346:	b086      	sub	sp, #24
 8044348:	af00      	add	r7, sp, #0
 804434a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 804434c:	687b      	ldr	r3, [r7, #4]
 804434e:	681b      	ldr	r3, [r3, #0]
 8044350:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8044352:	693b      	ldr	r3, [r7, #16]
 8044354:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8044356:	687b      	ldr	r3, [r7, #4]
 8044358:	681b      	ldr	r3, [r3, #0]
 804435a:	4618      	mov	r0, r3
 804435c:	f004 fe97 	bl	804908e <USB_GetMode>
 8044360:	4603      	mov	r3, r0
 8044362:	2b01      	cmp	r3, #1
 8044364:	f040 80f6 	bne.w	8044554 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8044368:	687b      	ldr	r3, [r7, #4]
 804436a:	681b      	ldr	r3, [r3, #0]
 804436c:	4618      	mov	r0, r3
 804436e:	f004 fe7b 	bl	8049068 <USB_ReadInterrupts>
 8044372:	4603      	mov	r3, r0
 8044374:	2b00      	cmp	r3, #0
 8044376:	f000 80ec 	beq.w	8044552 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 804437a:	687b      	ldr	r3, [r7, #4]
 804437c:	681b      	ldr	r3, [r3, #0]
 804437e:	4618      	mov	r0, r3
 8044380:	f004 fe72 	bl	8049068 <USB_ReadInterrupts>
 8044384:	4603      	mov	r3, r0
 8044386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804438a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 804438e:	d104      	bne.n	804439a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8044390:	687b      	ldr	r3, [r7, #4]
 8044392:	681b      	ldr	r3, [r3, #0]
 8044394:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8044398:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 804439a:	687b      	ldr	r3, [r7, #4]
 804439c:	681b      	ldr	r3, [r3, #0]
 804439e:	4618      	mov	r0, r3
 80443a0:	f004 fe62 	bl	8049068 <USB_ReadInterrupts>
 80443a4:	4603      	mov	r3, r0
 80443a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80443aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80443ae:	d104      	bne.n	80443ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80443b0:	687b      	ldr	r3, [r7, #4]
 80443b2:	681b      	ldr	r3, [r3, #0]
 80443b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80443b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80443ba:	687b      	ldr	r3, [r7, #4]
 80443bc:	681b      	ldr	r3, [r3, #0]
 80443be:	4618      	mov	r0, r3
 80443c0:	f004 fe52 	bl	8049068 <USB_ReadInterrupts>
 80443c4:	4603      	mov	r3, r0
 80443c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80443ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80443ce:	d104      	bne.n	80443da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80443d0:	687b      	ldr	r3, [r7, #4]
 80443d2:	681b      	ldr	r3, [r3, #0]
 80443d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80443d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80443da:	687b      	ldr	r3, [r7, #4]
 80443dc:	681b      	ldr	r3, [r3, #0]
 80443de:	4618      	mov	r0, r3
 80443e0:	f004 fe42 	bl	8049068 <USB_ReadInterrupts>
 80443e4:	4603      	mov	r3, r0
 80443e6:	f003 0302 	and.w	r3, r3, #2
 80443ea:	2b02      	cmp	r3, #2
 80443ec:	d103      	bne.n	80443f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80443ee:	687b      	ldr	r3, [r7, #4]
 80443f0:	681b      	ldr	r3, [r3, #0]
 80443f2:	2202      	movs	r2, #2
 80443f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80443f6:	687b      	ldr	r3, [r7, #4]
 80443f8:	681b      	ldr	r3, [r3, #0]
 80443fa:	4618      	mov	r0, r3
 80443fc:	f004 fe34 	bl	8049068 <USB_ReadInterrupts>
 8044400:	4603      	mov	r3, r0
 8044402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8044406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 804440a:	d11c      	bne.n	8044446 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 804440c:	687b      	ldr	r3, [r7, #4]
 804440e:	681b      	ldr	r3, [r3, #0]
 8044410:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8044414:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8044416:	68fb      	ldr	r3, [r7, #12]
 8044418:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 804441c:	681b      	ldr	r3, [r3, #0]
 804441e:	f003 0301 	and.w	r3, r3, #1
 8044422:	2b00      	cmp	r3, #0
 8044424:	d10f      	bne.n	8044446 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8044426:	2110      	movs	r1, #16
 8044428:	6938      	ldr	r0, [r7, #16]
 804442a:	f004 fd23 	bl	8048e74 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 804442e:	6938      	ldr	r0, [r7, #16]
 8044430:	f004 fd54 	bl	8048edc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8044434:	687b      	ldr	r3, [r7, #4]
 8044436:	681b      	ldr	r3, [r3, #0]
 8044438:	2101      	movs	r1, #1
 804443a:	4618      	mov	r0, r3
 804443c:	f004 ff2a 	bl	8049294 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8044440:	6878      	ldr	r0, [r7, #4]
 8044442:	f007 fcf3 	bl	804be2c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8044446:	687b      	ldr	r3, [r7, #4]
 8044448:	681b      	ldr	r3, [r3, #0]
 804444a:	4618      	mov	r0, r3
 804444c:	f004 fe0c 	bl	8049068 <USB_ReadInterrupts>
 8044450:	4603      	mov	r3, r0
 8044452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8044456:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 804445a:	d102      	bne.n	8044462 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 804445c:	6878      	ldr	r0, [r7, #4]
 804445e:	f001 f89e 	bl	804559e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8044462:	687b      	ldr	r3, [r7, #4]
 8044464:	681b      	ldr	r3, [r3, #0]
 8044466:	4618      	mov	r0, r3
 8044468:	f004 fdfe 	bl	8049068 <USB_ReadInterrupts>
 804446c:	4603      	mov	r3, r0
 804446e:	f003 0308 	and.w	r3, r3, #8
 8044472:	2b08      	cmp	r3, #8
 8044474:	d106      	bne.n	8044484 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8044476:	6878      	ldr	r0, [r7, #4]
 8044478:	f007 fcbc 	bl	804bdf4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 804447c:	687b      	ldr	r3, [r7, #4]
 804447e:	681b      	ldr	r3, [r3, #0]
 8044480:	2208      	movs	r2, #8
 8044482:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8044484:	687b      	ldr	r3, [r7, #4]
 8044486:	681b      	ldr	r3, [r3, #0]
 8044488:	4618      	mov	r0, r3
 804448a:	f004 fded 	bl	8049068 <USB_ReadInterrupts>
 804448e:	4603      	mov	r3, r0
 8044490:	f003 0310 	and.w	r3, r3, #16
 8044494:	2b10      	cmp	r3, #16
 8044496:	d101      	bne.n	804449c <HAL_HCD_IRQHandler+0x158>
 8044498:	2301      	movs	r3, #1
 804449a:	e000      	b.n	804449e <HAL_HCD_IRQHandler+0x15a>
 804449c:	2300      	movs	r3, #0
 804449e:	2b00      	cmp	r3, #0
 80444a0:	d012      	beq.n	80444c8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80444a2:	687b      	ldr	r3, [r7, #4]
 80444a4:	681b      	ldr	r3, [r3, #0]
 80444a6:	699a      	ldr	r2, [r3, #24]
 80444a8:	687b      	ldr	r3, [r7, #4]
 80444aa:	681b      	ldr	r3, [r3, #0]
 80444ac:	f022 0210 	bic.w	r2, r2, #16
 80444b0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80444b2:	6878      	ldr	r0, [r7, #4]
 80444b4:	f000 ffa1 	bl	80453fa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80444b8:	687b      	ldr	r3, [r7, #4]
 80444ba:	681b      	ldr	r3, [r3, #0]
 80444bc:	699a      	ldr	r2, [r3, #24]
 80444be:	687b      	ldr	r3, [r7, #4]
 80444c0:	681b      	ldr	r3, [r3, #0]
 80444c2:	f042 0210 	orr.w	r2, r2, #16
 80444c6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80444c8:	687b      	ldr	r3, [r7, #4]
 80444ca:	681b      	ldr	r3, [r3, #0]
 80444cc:	4618      	mov	r0, r3
 80444ce:	f004 fdcb 	bl	8049068 <USB_ReadInterrupts>
 80444d2:	4603      	mov	r3, r0
 80444d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80444d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80444dc:	d13a      	bne.n	8044554 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80444de:	687b      	ldr	r3, [r7, #4]
 80444e0:	681b      	ldr	r3, [r3, #0]
 80444e2:	4618      	mov	r0, r3
 80444e4:	f005 fa00 	bl	80498e8 <USB_HC_ReadInterrupt>
 80444e8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80444ea:	2300      	movs	r3, #0
 80444ec:	617b      	str	r3, [r7, #20]
 80444ee:	e025      	b.n	804453c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80444f0:	697b      	ldr	r3, [r7, #20]
 80444f2:	f003 030f 	and.w	r3, r3, #15
 80444f6:	68ba      	ldr	r2, [r7, #8]
 80444f8:	fa22 f303 	lsr.w	r3, r2, r3
 80444fc:	f003 0301 	and.w	r3, r3, #1
 8044500:	2b00      	cmp	r3, #0
 8044502:	d018      	beq.n	8044536 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8044504:	697b      	ldr	r3, [r7, #20]
 8044506:	015a      	lsls	r2, r3, #5
 8044508:	68fb      	ldr	r3, [r7, #12]
 804450a:	4413      	add	r3, r2
 804450c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044510:	681b      	ldr	r3, [r3, #0]
 8044512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8044516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804451a:	d106      	bne.n	804452a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 804451c:	697b      	ldr	r3, [r7, #20]
 804451e:	b2db      	uxtb	r3, r3
 8044520:	4619      	mov	r1, r3
 8044522:	6878      	ldr	r0, [r7, #4]
 8044524:	f000 f8ab 	bl	804467e <HCD_HC_IN_IRQHandler>
 8044528:	e005      	b.n	8044536 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 804452a:	697b      	ldr	r3, [r7, #20]
 804452c:	b2db      	uxtb	r3, r3
 804452e:	4619      	mov	r1, r3
 8044530:	6878      	ldr	r0, [r7, #4]
 8044532:	f000 fbf9 	bl	8044d28 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8044536:	697b      	ldr	r3, [r7, #20]
 8044538:	3301      	adds	r3, #1
 804453a:	617b      	str	r3, [r7, #20]
 804453c:	687b      	ldr	r3, [r7, #4]
 804453e:	689b      	ldr	r3, [r3, #8]
 8044540:	697a      	ldr	r2, [r7, #20]
 8044542:	429a      	cmp	r2, r3
 8044544:	d3d4      	bcc.n	80444f0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8044546:	687b      	ldr	r3, [r7, #4]
 8044548:	681b      	ldr	r3, [r3, #0]
 804454a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 804454e:	615a      	str	r2, [r3, #20]
 8044550:	e000      	b.n	8044554 <HAL_HCD_IRQHandler+0x210>
      return;
 8044552:	bf00      	nop
    }
  }
}
 8044554:	3718      	adds	r7, #24
 8044556:	46bd      	mov	sp, r7
 8044558:	bd80      	pop	{r7, pc}

0804455a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 804455a:	b580      	push	{r7, lr}
 804455c:	b082      	sub	sp, #8
 804455e:	af00      	add	r7, sp, #0
 8044560:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8044562:	687b      	ldr	r3, [r7, #4]
 8044564:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8044568:	2b01      	cmp	r3, #1
 804456a:	d101      	bne.n	8044570 <HAL_HCD_Start+0x16>
 804456c:	2302      	movs	r3, #2
 804456e:	e013      	b.n	8044598 <HAL_HCD_Start+0x3e>
 8044570:	687b      	ldr	r3, [r7, #4]
 8044572:	2201      	movs	r2, #1
 8044574:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8044578:	687b      	ldr	r3, [r7, #4]
 804457a:	681b      	ldr	r3, [r3, #0]
 804457c:	2101      	movs	r1, #1
 804457e:	4618      	mov	r0, r3
 8044580:	f004 feec 	bl	804935c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8044584:	687b      	ldr	r3, [r7, #4]
 8044586:	681b      	ldr	r3, [r3, #0]
 8044588:	4618      	mov	r0, r3
 804458a:	f004 fc04 	bl	8048d96 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 804458e:	687b      	ldr	r3, [r7, #4]
 8044590:	2200      	movs	r2, #0
 8044592:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8044596:	2300      	movs	r3, #0
}
 8044598:	4618      	mov	r0, r3
 804459a:	3708      	adds	r7, #8
 804459c:	46bd      	mov	sp, r7
 804459e:	bd80      	pop	{r7, pc}

080445a0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80445a0:	b580      	push	{r7, lr}
 80445a2:	b082      	sub	sp, #8
 80445a4:	af00      	add	r7, sp, #0
 80445a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80445a8:	687b      	ldr	r3, [r7, #4]
 80445aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80445ae:	2b01      	cmp	r3, #1
 80445b0:	d101      	bne.n	80445b6 <HAL_HCD_Stop+0x16>
 80445b2:	2302      	movs	r3, #2
 80445b4:	e00d      	b.n	80445d2 <HAL_HCD_Stop+0x32>
 80445b6:	687b      	ldr	r3, [r7, #4]
 80445b8:	2201      	movs	r2, #1
 80445ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80445be:	687b      	ldr	r3, [r7, #4]
 80445c0:	681b      	ldr	r3, [r3, #0]
 80445c2:	4618      	mov	r0, r3
 80445c4:	f005 fada 	bl	8049b7c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80445c8:	687b      	ldr	r3, [r7, #4]
 80445ca:	2200      	movs	r2, #0
 80445cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80445d0:	2300      	movs	r3, #0
}
 80445d2:	4618      	mov	r0, r3
 80445d4:	3708      	adds	r7, #8
 80445d6:	46bd      	mov	sp, r7
 80445d8:	bd80      	pop	{r7, pc}

080445da <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80445da:	b580      	push	{r7, lr}
 80445dc:	b082      	sub	sp, #8
 80445de:	af00      	add	r7, sp, #0
 80445e0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80445e2:	687b      	ldr	r3, [r7, #4]
 80445e4:	681b      	ldr	r3, [r3, #0]
 80445e6:	4618      	mov	r0, r3
 80445e8:	f004 fe8e 	bl	8049308 <USB_ResetPort>
 80445ec:	4603      	mov	r3, r0
}
 80445ee:	4618      	mov	r0, r3
 80445f0:	3708      	adds	r7, #8
 80445f2:	46bd      	mov	sp, r7
 80445f4:	bd80      	pop	{r7, pc}

080445f6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80445f6:	b480      	push	{r7}
 80445f8:	b083      	sub	sp, #12
 80445fa:	af00      	add	r7, sp, #0
 80445fc:	6078      	str	r0, [r7, #4]
 80445fe:	460b      	mov	r3, r1
 8044600:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8044602:	78fb      	ldrb	r3, [r7, #3]
 8044604:	687a      	ldr	r2, [r7, #4]
 8044606:	212c      	movs	r1, #44	; 0x2c
 8044608:	fb01 f303 	mul.w	r3, r1, r3
 804460c:	4413      	add	r3, r2
 804460e:	3360      	adds	r3, #96	; 0x60
 8044610:	781b      	ldrb	r3, [r3, #0]
}
 8044612:	4618      	mov	r0, r3
 8044614:	370c      	adds	r7, #12
 8044616:	46bd      	mov	sp, r7
 8044618:	f85d 7b04 	ldr.w	r7, [sp], #4
 804461c:	4770      	bx	lr

0804461e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 804461e:	b480      	push	{r7}
 8044620:	b083      	sub	sp, #12
 8044622:	af00      	add	r7, sp, #0
 8044624:	6078      	str	r0, [r7, #4]
 8044626:	460b      	mov	r3, r1
 8044628:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 804462a:	78fb      	ldrb	r3, [r7, #3]
 804462c:	687a      	ldr	r2, [r7, #4]
 804462e:	212c      	movs	r1, #44	; 0x2c
 8044630:	fb01 f303 	mul.w	r3, r1, r3
 8044634:	4413      	add	r3, r2
 8044636:	3350      	adds	r3, #80	; 0x50
 8044638:	681b      	ldr	r3, [r3, #0]
}
 804463a:	4618      	mov	r0, r3
 804463c:	370c      	adds	r7, #12
 804463e:	46bd      	mov	sp, r7
 8044640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044644:	4770      	bx	lr

08044646 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8044646:	b580      	push	{r7, lr}
 8044648:	b082      	sub	sp, #8
 804464a:	af00      	add	r7, sp, #0
 804464c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 804464e:	687b      	ldr	r3, [r7, #4]
 8044650:	681b      	ldr	r3, [r3, #0]
 8044652:	4618      	mov	r0, r3
 8044654:	f004 fed2 	bl	80493fc <USB_GetCurrentFrame>
 8044658:	4603      	mov	r3, r0
}
 804465a:	4618      	mov	r0, r3
 804465c:	3708      	adds	r7, #8
 804465e:	46bd      	mov	sp, r7
 8044660:	bd80      	pop	{r7, pc}

08044662 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8044662:	b580      	push	{r7, lr}
 8044664:	b082      	sub	sp, #8
 8044666:	af00      	add	r7, sp, #0
 8044668:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 804466a:	687b      	ldr	r3, [r7, #4]
 804466c:	681b      	ldr	r3, [r3, #0]
 804466e:	4618      	mov	r0, r3
 8044670:	f004 fead 	bl	80493ce <USB_GetHostSpeed>
 8044674:	4603      	mov	r3, r0
}
 8044676:	4618      	mov	r0, r3
 8044678:	3708      	adds	r7, #8
 804467a:	46bd      	mov	sp, r7
 804467c:	bd80      	pop	{r7, pc}

0804467e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 804467e:	b580      	push	{r7, lr}
 8044680:	b086      	sub	sp, #24
 8044682:	af00      	add	r7, sp, #0
 8044684:	6078      	str	r0, [r7, #4]
 8044686:	460b      	mov	r3, r1
 8044688:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 804468a:	687b      	ldr	r3, [r7, #4]
 804468c:	681b      	ldr	r3, [r3, #0]
 804468e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8044690:	697b      	ldr	r3, [r7, #20]
 8044692:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8044694:	78fb      	ldrb	r3, [r7, #3]
 8044696:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8044698:	68fb      	ldr	r3, [r7, #12]
 804469a:	015a      	lsls	r2, r3, #5
 804469c:	693b      	ldr	r3, [r7, #16]
 804469e:	4413      	add	r3, r2
 80446a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80446a4:	689b      	ldr	r3, [r3, #8]
 80446a6:	f003 0304 	and.w	r3, r3, #4
 80446aa:	2b04      	cmp	r3, #4
 80446ac:	d11a      	bne.n	80446e4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80446ae:	68fb      	ldr	r3, [r7, #12]
 80446b0:	015a      	lsls	r2, r3, #5
 80446b2:	693b      	ldr	r3, [r7, #16]
 80446b4:	4413      	add	r3, r2
 80446b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80446ba:	461a      	mov	r2, r3
 80446bc:	2304      	movs	r3, #4
 80446be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80446c0:	687a      	ldr	r2, [r7, #4]
 80446c2:	68fb      	ldr	r3, [r7, #12]
 80446c4:	212c      	movs	r1, #44	; 0x2c
 80446c6:	fb01 f303 	mul.w	r3, r1, r3
 80446ca:	4413      	add	r3, r2
 80446cc:	3361      	adds	r3, #97	; 0x61
 80446ce:	2206      	movs	r2, #6
 80446d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80446d2:	687b      	ldr	r3, [r7, #4]
 80446d4:	681b      	ldr	r3, [r3, #0]
 80446d6:	68fa      	ldr	r2, [r7, #12]
 80446d8:	b2d2      	uxtb	r2, r2
 80446da:	4611      	mov	r1, r2
 80446dc:	4618      	mov	r0, r3
 80446de:	f005 f914 	bl	804990a <USB_HC_Halt>
 80446e2:	e0af      	b.n	8044844 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80446e4:	68fb      	ldr	r3, [r7, #12]
 80446e6:	015a      	lsls	r2, r3, #5
 80446e8:	693b      	ldr	r3, [r7, #16]
 80446ea:	4413      	add	r3, r2
 80446ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80446f0:	689b      	ldr	r3, [r3, #8]
 80446f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80446f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80446fa:	d11b      	bne.n	8044734 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80446fc:	68fb      	ldr	r3, [r7, #12]
 80446fe:	015a      	lsls	r2, r3, #5
 8044700:	693b      	ldr	r3, [r7, #16]
 8044702:	4413      	add	r3, r2
 8044704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044708:	461a      	mov	r2, r3
 804470a:	f44f 7380 	mov.w	r3, #256	; 0x100
 804470e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8044710:	687a      	ldr	r2, [r7, #4]
 8044712:	68fb      	ldr	r3, [r7, #12]
 8044714:	212c      	movs	r1, #44	; 0x2c
 8044716:	fb01 f303 	mul.w	r3, r1, r3
 804471a:	4413      	add	r3, r2
 804471c:	3361      	adds	r3, #97	; 0x61
 804471e:	2207      	movs	r2, #7
 8044720:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044722:	687b      	ldr	r3, [r7, #4]
 8044724:	681b      	ldr	r3, [r3, #0]
 8044726:	68fa      	ldr	r2, [r7, #12]
 8044728:	b2d2      	uxtb	r2, r2
 804472a:	4611      	mov	r1, r2
 804472c:	4618      	mov	r0, r3
 804472e:	f005 f8ec 	bl	804990a <USB_HC_Halt>
 8044732:	e087      	b.n	8044844 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8044734:	68fb      	ldr	r3, [r7, #12]
 8044736:	015a      	lsls	r2, r3, #5
 8044738:	693b      	ldr	r3, [r7, #16]
 804473a:	4413      	add	r3, r2
 804473c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044740:	689b      	ldr	r3, [r3, #8]
 8044742:	f003 0320 	and.w	r3, r3, #32
 8044746:	2b20      	cmp	r3, #32
 8044748:	d109      	bne.n	804475e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 804474a:	68fb      	ldr	r3, [r7, #12]
 804474c:	015a      	lsls	r2, r3, #5
 804474e:	693b      	ldr	r3, [r7, #16]
 8044750:	4413      	add	r3, r2
 8044752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044756:	461a      	mov	r2, r3
 8044758:	2320      	movs	r3, #32
 804475a:	6093      	str	r3, [r2, #8]
 804475c:	e072      	b.n	8044844 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 804475e:	68fb      	ldr	r3, [r7, #12]
 8044760:	015a      	lsls	r2, r3, #5
 8044762:	693b      	ldr	r3, [r7, #16]
 8044764:	4413      	add	r3, r2
 8044766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804476a:	689b      	ldr	r3, [r3, #8]
 804476c:	f003 0308 	and.w	r3, r3, #8
 8044770:	2b08      	cmp	r3, #8
 8044772:	d11a      	bne.n	80447aa <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8044774:	68fb      	ldr	r3, [r7, #12]
 8044776:	015a      	lsls	r2, r3, #5
 8044778:	693b      	ldr	r3, [r7, #16]
 804477a:	4413      	add	r3, r2
 804477c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044780:	461a      	mov	r2, r3
 8044782:	2308      	movs	r3, #8
 8044784:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8044786:	687a      	ldr	r2, [r7, #4]
 8044788:	68fb      	ldr	r3, [r7, #12]
 804478a:	212c      	movs	r1, #44	; 0x2c
 804478c:	fb01 f303 	mul.w	r3, r1, r3
 8044790:	4413      	add	r3, r2
 8044792:	3361      	adds	r3, #97	; 0x61
 8044794:	2205      	movs	r2, #5
 8044796:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044798:	687b      	ldr	r3, [r7, #4]
 804479a:	681b      	ldr	r3, [r3, #0]
 804479c:	68fa      	ldr	r2, [r7, #12]
 804479e:	b2d2      	uxtb	r2, r2
 80447a0:	4611      	mov	r1, r2
 80447a2:	4618      	mov	r0, r3
 80447a4:	f005 f8b1 	bl	804990a <USB_HC_Halt>
 80447a8:	e04c      	b.n	8044844 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80447aa:	68fb      	ldr	r3, [r7, #12]
 80447ac:	015a      	lsls	r2, r3, #5
 80447ae:	693b      	ldr	r3, [r7, #16]
 80447b0:	4413      	add	r3, r2
 80447b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80447b6:	689b      	ldr	r3, [r3, #8]
 80447b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80447bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80447c0:	d11b      	bne.n	80447fa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80447c2:	68fb      	ldr	r3, [r7, #12]
 80447c4:	015a      	lsls	r2, r3, #5
 80447c6:	693b      	ldr	r3, [r7, #16]
 80447c8:	4413      	add	r3, r2
 80447ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80447ce:	461a      	mov	r2, r3
 80447d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80447d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80447d6:	687a      	ldr	r2, [r7, #4]
 80447d8:	68fb      	ldr	r3, [r7, #12]
 80447da:	212c      	movs	r1, #44	; 0x2c
 80447dc:	fb01 f303 	mul.w	r3, r1, r3
 80447e0:	4413      	add	r3, r2
 80447e2:	3361      	adds	r3, #97	; 0x61
 80447e4:	2208      	movs	r2, #8
 80447e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80447e8:	687b      	ldr	r3, [r7, #4]
 80447ea:	681b      	ldr	r3, [r3, #0]
 80447ec:	68fa      	ldr	r2, [r7, #12]
 80447ee:	b2d2      	uxtb	r2, r2
 80447f0:	4611      	mov	r1, r2
 80447f2:	4618      	mov	r0, r3
 80447f4:	f005 f889 	bl	804990a <USB_HC_Halt>
 80447f8:	e024      	b.n	8044844 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80447fa:	68fb      	ldr	r3, [r7, #12]
 80447fc:	015a      	lsls	r2, r3, #5
 80447fe:	693b      	ldr	r3, [r7, #16]
 8044800:	4413      	add	r3, r2
 8044802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044806:	689b      	ldr	r3, [r3, #8]
 8044808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804480c:	2b80      	cmp	r3, #128	; 0x80
 804480e:	d119      	bne.n	8044844 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8044810:	68fb      	ldr	r3, [r7, #12]
 8044812:	015a      	lsls	r2, r3, #5
 8044814:	693b      	ldr	r3, [r7, #16]
 8044816:	4413      	add	r3, r2
 8044818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804481c:	461a      	mov	r2, r3
 804481e:	2380      	movs	r3, #128	; 0x80
 8044820:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8044822:	687a      	ldr	r2, [r7, #4]
 8044824:	68fb      	ldr	r3, [r7, #12]
 8044826:	212c      	movs	r1, #44	; 0x2c
 8044828:	fb01 f303 	mul.w	r3, r1, r3
 804482c:	4413      	add	r3, r2
 804482e:	3361      	adds	r3, #97	; 0x61
 8044830:	2206      	movs	r2, #6
 8044832:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044834:	687b      	ldr	r3, [r7, #4]
 8044836:	681b      	ldr	r3, [r3, #0]
 8044838:	68fa      	ldr	r2, [r7, #12]
 804483a:	b2d2      	uxtb	r2, r2
 804483c:	4611      	mov	r1, r2
 804483e:	4618      	mov	r0, r3
 8044840:	f005 f863 	bl	804990a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8044844:	68fb      	ldr	r3, [r7, #12]
 8044846:	015a      	lsls	r2, r3, #5
 8044848:	693b      	ldr	r3, [r7, #16]
 804484a:	4413      	add	r3, r2
 804484c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044850:	689b      	ldr	r3, [r3, #8]
 8044852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8044856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804485a:	d112      	bne.n	8044882 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804485c:	687b      	ldr	r3, [r7, #4]
 804485e:	681b      	ldr	r3, [r3, #0]
 8044860:	68fa      	ldr	r2, [r7, #12]
 8044862:	b2d2      	uxtb	r2, r2
 8044864:	4611      	mov	r1, r2
 8044866:	4618      	mov	r0, r3
 8044868:	f005 f84f 	bl	804990a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 804486c:	68fb      	ldr	r3, [r7, #12]
 804486e:	015a      	lsls	r2, r3, #5
 8044870:	693b      	ldr	r3, [r7, #16]
 8044872:	4413      	add	r3, r2
 8044874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044878:	461a      	mov	r2, r3
 804487a:	f44f 7300 	mov.w	r3, #512	; 0x200
 804487e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8044880:	e24e      	b.n	8044d20 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8044882:	68fb      	ldr	r3, [r7, #12]
 8044884:	015a      	lsls	r2, r3, #5
 8044886:	693b      	ldr	r3, [r7, #16]
 8044888:	4413      	add	r3, r2
 804488a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804488e:	689b      	ldr	r3, [r3, #8]
 8044890:	f003 0301 	and.w	r3, r3, #1
 8044894:	2b01      	cmp	r3, #1
 8044896:	f040 80df 	bne.w	8044a58 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 804489a:	687b      	ldr	r3, [r7, #4]
 804489c:	691b      	ldr	r3, [r3, #16]
 804489e:	2b00      	cmp	r3, #0
 80448a0:	d019      	beq.n	80448d6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80448a2:	687a      	ldr	r2, [r7, #4]
 80448a4:	68fb      	ldr	r3, [r7, #12]
 80448a6:	212c      	movs	r1, #44	; 0x2c
 80448a8:	fb01 f303 	mul.w	r3, r1, r3
 80448ac:	4413      	add	r3, r2
 80448ae:	3348      	adds	r3, #72	; 0x48
 80448b0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80448b2:	68fb      	ldr	r3, [r7, #12]
 80448b4:	0159      	lsls	r1, r3, #5
 80448b6:	693b      	ldr	r3, [r7, #16]
 80448b8:	440b      	add	r3, r1
 80448ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80448be:	691b      	ldr	r3, [r3, #16]
 80448c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80448c4:	1ad2      	subs	r2, r2, r3
 80448c6:	6879      	ldr	r1, [r7, #4]
 80448c8:	68fb      	ldr	r3, [r7, #12]
 80448ca:	202c      	movs	r0, #44	; 0x2c
 80448cc:	fb00 f303 	mul.w	r3, r0, r3
 80448d0:	440b      	add	r3, r1
 80448d2:	3350      	adds	r3, #80	; 0x50
 80448d4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80448d6:	687a      	ldr	r2, [r7, #4]
 80448d8:	68fb      	ldr	r3, [r7, #12]
 80448da:	212c      	movs	r1, #44	; 0x2c
 80448dc:	fb01 f303 	mul.w	r3, r1, r3
 80448e0:	4413      	add	r3, r2
 80448e2:	3361      	adds	r3, #97	; 0x61
 80448e4:	2201      	movs	r2, #1
 80448e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80448e8:	687a      	ldr	r2, [r7, #4]
 80448ea:	68fb      	ldr	r3, [r7, #12]
 80448ec:	212c      	movs	r1, #44	; 0x2c
 80448ee:	fb01 f303 	mul.w	r3, r1, r3
 80448f2:	4413      	add	r3, r2
 80448f4:	335c      	adds	r3, #92	; 0x5c
 80448f6:	2200      	movs	r2, #0
 80448f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80448fa:	68fb      	ldr	r3, [r7, #12]
 80448fc:	015a      	lsls	r2, r3, #5
 80448fe:	693b      	ldr	r3, [r7, #16]
 8044900:	4413      	add	r3, r2
 8044902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044906:	461a      	mov	r2, r3
 8044908:	2301      	movs	r3, #1
 804490a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 804490c:	687a      	ldr	r2, [r7, #4]
 804490e:	68fb      	ldr	r3, [r7, #12]
 8044910:	212c      	movs	r1, #44	; 0x2c
 8044912:	fb01 f303 	mul.w	r3, r1, r3
 8044916:	4413      	add	r3, r2
 8044918:	333f      	adds	r3, #63	; 0x3f
 804491a:	781b      	ldrb	r3, [r3, #0]
 804491c:	2b00      	cmp	r3, #0
 804491e:	d009      	beq.n	8044934 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8044920:	687a      	ldr	r2, [r7, #4]
 8044922:	68fb      	ldr	r3, [r7, #12]
 8044924:	212c      	movs	r1, #44	; 0x2c
 8044926:	fb01 f303 	mul.w	r3, r1, r3
 804492a:	4413      	add	r3, r2
 804492c:	333f      	adds	r3, #63	; 0x3f
 804492e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8044930:	2b02      	cmp	r3, #2
 8044932:	d111      	bne.n	8044958 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044934:	687b      	ldr	r3, [r7, #4]
 8044936:	681b      	ldr	r3, [r3, #0]
 8044938:	68fa      	ldr	r2, [r7, #12]
 804493a:	b2d2      	uxtb	r2, r2
 804493c:	4611      	mov	r1, r2
 804493e:	4618      	mov	r0, r3
 8044940:	f004 ffe3 	bl	804990a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8044944:	68fb      	ldr	r3, [r7, #12]
 8044946:	015a      	lsls	r2, r3, #5
 8044948:	693b      	ldr	r3, [r7, #16]
 804494a:	4413      	add	r3, r2
 804494c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044950:	461a      	mov	r2, r3
 8044952:	2310      	movs	r3, #16
 8044954:	6093      	str	r3, [r2, #8]
 8044956:	e03a      	b.n	80449ce <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8044958:	687a      	ldr	r2, [r7, #4]
 804495a:	68fb      	ldr	r3, [r7, #12]
 804495c:	212c      	movs	r1, #44	; 0x2c
 804495e:	fb01 f303 	mul.w	r3, r1, r3
 8044962:	4413      	add	r3, r2
 8044964:	333f      	adds	r3, #63	; 0x3f
 8044966:	781b      	ldrb	r3, [r3, #0]
 8044968:	2b03      	cmp	r3, #3
 804496a:	d009      	beq.n	8044980 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 804496c:	687a      	ldr	r2, [r7, #4]
 804496e:	68fb      	ldr	r3, [r7, #12]
 8044970:	212c      	movs	r1, #44	; 0x2c
 8044972:	fb01 f303 	mul.w	r3, r1, r3
 8044976:	4413      	add	r3, r2
 8044978:	333f      	adds	r3, #63	; 0x3f
 804497a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 804497c:	2b01      	cmp	r3, #1
 804497e:	d126      	bne.n	80449ce <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8044980:	68fb      	ldr	r3, [r7, #12]
 8044982:	015a      	lsls	r2, r3, #5
 8044984:	693b      	ldr	r3, [r7, #16]
 8044986:	4413      	add	r3, r2
 8044988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804498c:	681b      	ldr	r3, [r3, #0]
 804498e:	68fa      	ldr	r2, [r7, #12]
 8044990:	0151      	lsls	r1, r2, #5
 8044992:	693a      	ldr	r2, [r7, #16]
 8044994:	440a      	add	r2, r1
 8044996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804499a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 804499e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80449a0:	687a      	ldr	r2, [r7, #4]
 80449a2:	68fb      	ldr	r3, [r7, #12]
 80449a4:	212c      	movs	r1, #44	; 0x2c
 80449a6:	fb01 f303 	mul.w	r3, r1, r3
 80449aa:	4413      	add	r3, r2
 80449ac:	3360      	adds	r3, #96	; 0x60
 80449ae:	2201      	movs	r2, #1
 80449b0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80449b2:	68fb      	ldr	r3, [r7, #12]
 80449b4:	b2d9      	uxtb	r1, r3
 80449b6:	687a      	ldr	r2, [r7, #4]
 80449b8:	68fb      	ldr	r3, [r7, #12]
 80449ba:	202c      	movs	r0, #44	; 0x2c
 80449bc:	fb00 f303 	mul.w	r3, r0, r3
 80449c0:	4413      	add	r3, r2
 80449c2:	3360      	adds	r3, #96	; 0x60
 80449c4:	781b      	ldrb	r3, [r3, #0]
 80449c6:	461a      	mov	r2, r3
 80449c8:	6878      	ldr	r0, [r7, #4]
 80449ca:	f007 fa3d 	bl	804be48 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80449ce:	687b      	ldr	r3, [r7, #4]
 80449d0:	691b      	ldr	r3, [r3, #16]
 80449d2:	2b01      	cmp	r3, #1
 80449d4:	d12b      	bne.n	8044a2e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80449d6:	687a      	ldr	r2, [r7, #4]
 80449d8:	68fb      	ldr	r3, [r7, #12]
 80449da:	212c      	movs	r1, #44	; 0x2c
 80449dc:	fb01 f303 	mul.w	r3, r1, r3
 80449e0:	4413      	add	r3, r2
 80449e2:	3348      	adds	r3, #72	; 0x48
 80449e4:	681b      	ldr	r3, [r3, #0]
 80449e6:	6879      	ldr	r1, [r7, #4]
 80449e8:	68fa      	ldr	r2, [r7, #12]
 80449ea:	202c      	movs	r0, #44	; 0x2c
 80449ec:	fb00 f202 	mul.w	r2, r0, r2
 80449f0:	440a      	add	r2, r1
 80449f2:	3240      	adds	r2, #64	; 0x40
 80449f4:	8812      	ldrh	r2, [r2, #0]
 80449f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80449fa:	f003 0301 	and.w	r3, r3, #1
 80449fe:	2b00      	cmp	r3, #0
 8044a00:	f000 818e 	beq.w	8044d20 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8044a04:	687a      	ldr	r2, [r7, #4]
 8044a06:	68fb      	ldr	r3, [r7, #12]
 8044a08:	212c      	movs	r1, #44	; 0x2c
 8044a0a:	fb01 f303 	mul.w	r3, r1, r3
 8044a0e:	4413      	add	r3, r2
 8044a10:	3354      	adds	r3, #84	; 0x54
 8044a12:	781b      	ldrb	r3, [r3, #0]
 8044a14:	f083 0301 	eor.w	r3, r3, #1
 8044a18:	b2d8      	uxtb	r0, r3
 8044a1a:	687a      	ldr	r2, [r7, #4]
 8044a1c:	68fb      	ldr	r3, [r7, #12]
 8044a1e:	212c      	movs	r1, #44	; 0x2c
 8044a20:	fb01 f303 	mul.w	r3, r1, r3
 8044a24:	4413      	add	r3, r2
 8044a26:	3354      	adds	r3, #84	; 0x54
 8044a28:	4602      	mov	r2, r0
 8044a2a:	701a      	strb	r2, [r3, #0]
}
 8044a2c:	e178      	b.n	8044d20 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8044a2e:	687a      	ldr	r2, [r7, #4]
 8044a30:	68fb      	ldr	r3, [r7, #12]
 8044a32:	212c      	movs	r1, #44	; 0x2c
 8044a34:	fb01 f303 	mul.w	r3, r1, r3
 8044a38:	4413      	add	r3, r2
 8044a3a:	3354      	adds	r3, #84	; 0x54
 8044a3c:	781b      	ldrb	r3, [r3, #0]
 8044a3e:	f083 0301 	eor.w	r3, r3, #1
 8044a42:	b2d8      	uxtb	r0, r3
 8044a44:	687a      	ldr	r2, [r7, #4]
 8044a46:	68fb      	ldr	r3, [r7, #12]
 8044a48:	212c      	movs	r1, #44	; 0x2c
 8044a4a:	fb01 f303 	mul.w	r3, r1, r3
 8044a4e:	4413      	add	r3, r2
 8044a50:	3354      	adds	r3, #84	; 0x54
 8044a52:	4602      	mov	r2, r0
 8044a54:	701a      	strb	r2, [r3, #0]
}
 8044a56:	e163      	b.n	8044d20 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8044a58:	68fb      	ldr	r3, [r7, #12]
 8044a5a:	015a      	lsls	r2, r3, #5
 8044a5c:	693b      	ldr	r3, [r7, #16]
 8044a5e:	4413      	add	r3, r2
 8044a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044a64:	689b      	ldr	r3, [r3, #8]
 8044a66:	f003 0302 	and.w	r3, r3, #2
 8044a6a:	2b02      	cmp	r3, #2
 8044a6c:	f040 80f6 	bne.w	8044c5c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8044a70:	687a      	ldr	r2, [r7, #4]
 8044a72:	68fb      	ldr	r3, [r7, #12]
 8044a74:	212c      	movs	r1, #44	; 0x2c
 8044a76:	fb01 f303 	mul.w	r3, r1, r3
 8044a7a:	4413      	add	r3, r2
 8044a7c:	3361      	adds	r3, #97	; 0x61
 8044a7e:	781b      	ldrb	r3, [r3, #0]
 8044a80:	2b01      	cmp	r3, #1
 8044a82:	d109      	bne.n	8044a98 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8044a84:	687a      	ldr	r2, [r7, #4]
 8044a86:	68fb      	ldr	r3, [r7, #12]
 8044a88:	212c      	movs	r1, #44	; 0x2c
 8044a8a:	fb01 f303 	mul.w	r3, r1, r3
 8044a8e:	4413      	add	r3, r2
 8044a90:	3360      	adds	r3, #96	; 0x60
 8044a92:	2201      	movs	r2, #1
 8044a94:	701a      	strb	r2, [r3, #0]
 8044a96:	e0c9      	b.n	8044c2c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8044a98:	687a      	ldr	r2, [r7, #4]
 8044a9a:	68fb      	ldr	r3, [r7, #12]
 8044a9c:	212c      	movs	r1, #44	; 0x2c
 8044a9e:	fb01 f303 	mul.w	r3, r1, r3
 8044aa2:	4413      	add	r3, r2
 8044aa4:	3361      	adds	r3, #97	; 0x61
 8044aa6:	781b      	ldrb	r3, [r3, #0]
 8044aa8:	2b05      	cmp	r3, #5
 8044aaa:	d109      	bne.n	8044ac0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8044aac:	687a      	ldr	r2, [r7, #4]
 8044aae:	68fb      	ldr	r3, [r7, #12]
 8044ab0:	212c      	movs	r1, #44	; 0x2c
 8044ab2:	fb01 f303 	mul.w	r3, r1, r3
 8044ab6:	4413      	add	r3, r2
 8044ab8:	3360      	adds	r3, #96	; 0x60
 8044aba:	2205      	movs	r2, #5
 8044abc:	701a      	strb	r2, [r3, #0]
 8044abe:	e0b5      	b.n	8044c2c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8044ac0:	687a      	ldr	r2, [r7, #4]
 8044ac2:	68fb      	ldr	r3, [r7, #12]
 8044ac4:	212c      	movs	r1, #44	; 0x2c
 8044ac6:	fb01 f303 	mul.w	r3, r1, r3
 8044aca:	4413      	add	r3, r2
 8044acc:	3361      	adds	r3, #97	; 0x61
 8044ace:	781b      	ldrb	r3, [r3, #0]
 8044ad0:	2b06      	cmp	r3, #6
 8044ad2:	d009      	beq.n	8044ae8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8044ad4:	687a      	ldr	r2, [r7, #4]
 8044ad6:	68fb      	ldr	r3, [r7, #12]
 8044ad8:	212c      	movs	r1, #44	; 0x2c
 8044ada:	fb01 f303 	mul.w	r3, r1, r3
 8044ade:	4413      	add	r3, r2
 8044ae0:	3361      	adds	r3, #97	; 0x61
 8044ae2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8044ae4:	2b08      	cmp	r3, #8
 8044ae6:	d150      	bne.n	8044b8a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8044ae8:	687a      	ldr	r2, [r7, #4]
 8044aea:	68fb      	ldr	r3, [r7, #12]
 8044aec:	212c      	movs	r1, #44	; 0x2c
 8044aee:	fb01 f303 	mul.w	r3, r1, r3
 8044af2:	4413      	add	r3, r2
 8044af4:	335c      	adds	r3, #92	; 0x5c
 8044af6:	681b      	ldr	r3, [r3, #0]
 8044af8:	1c5a      	adds	r2, r3, #1
 8044afa:	6879      	ldr	r1, [r7, #4]
 8044afc:	68fb      	ldr	r3, [r7, #12]
 8044afe:	202c      	movs	r0, #44	; 0x2c
 8044b00:	fb00 f303 	mul.w	r3, r0, r3
 8044b04:	440b      	add	r3, r1
 8044b06:	335c      	adds	r3, #92	; 0x5c
 8044b08:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8044b0a:	687a      	ldr	r2, [r7, #4]
 8044b0c:	68fb      	ldr	r3, [r7, #12]
 8044b0e:	212c      	movs	r1, #44	; 0x2c
 8044b10:	fb01 f303 	mul.w	r3, r1, r3
 8044b14:	4413      	add	r3, r2
 8044b16:	335c      	adds	r3, #92	; 0x5c
 8044b18:	681b      	ldr	r3, [r3, #0]
 8044b1a:	2b02      	cmp	r3, #2
 8044b1c:	d912      	bls.n	8044b44 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8044b1e:	687a      	ldr	r2, [r7, #4]
 8044b20:	68fb      	ldr	r3, [r7, #12]
 8044b22:	212c      	movs	r1, #44	; 0x2c
 8044b24:	fb01 f303 	mul.w	r3, r1, r3
 8044b28:	4413      	add	r3, r2
 8044b2a:	335c      	adds	r3, #92	; 0x5c
 8044b2c:	2200      	movs	r2, #0
 8044b2e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8044b30:	687a      	ldr	r2, [r7, #4]
 8044b32:	68fb      	ldr	r3, [r7, #12]
 8044b34:	212c      	movs	r1, #44	; 0x2c
 8044b36:	fb01 f303 	mul.w	r3, r1, r3
 8044b3a:	4413      	add	r3, r2
 8044b3c:	3360      	adds	r3, #96	; 0x60
 8044b3e:	2204      	movs	r2, #4
 8044b40:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8044b42:	e073      	b.n	8044c2c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8044b44:	687a      	ldr	r2, [r7, #4]
 8044b46:	68fb      	ldr	r3, [r7, #12]
 8044b48:	212c      	movs	r1, #44	; 0x2c
 8044b4a:	fb01 f303 	mul.w	r3, r1, r3
 8044b4e:	4413      	add	r3, r2
 8044b50:	3360      	adds	r3, #96	; 0x60
 8044b52:	2202      	movs	r2, #2
 8044b54:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8044b56:	68fb      	ldr	r3, [r7, #12]
 8044b58:	015a      	lsls	r2, r3, #5
 8044b5a:	693b      	ldr	r3, [r7, #16]
 8044b5c:	4413      	add	r3, r2
 8044b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044b62:	681b      	ldr	r3, [r3, #0]
 8044b64:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8044b66:	68bb      	ldr	r3, [r7, #8]
 8044b68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8044b6c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8044b6e:	68bb      	ldr	r3, [r7, #8]
 8044b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8044b74:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8044b76:	68fb      	ldr	r3, [r7, #12]
 8044b78:	015a      	lsls	r2, r3, #5
 8044b7a:	693b      	ldr	r3, [r7, #16]
 8044b7c:	4413      	add	r3, r2
 8044b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044b82:	461a      	mov	r2, r3
 8044b84:	68bb      	ldr	r3, [r7, #8]
 8044b86:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8044b88:	e050      	b.n	8044c2c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8044b8a:	687a      	ldr	r2, [r7, #4]
 8044b8c:	68fb      	ldr	r3, [r7, #12]
 8044b8e:	212c      	movs	r1, #44	; 0x2c
 8044b90:	fb01 f303 	mul.w	r3, r1, r3
 8044b94:	4413      	add	r3, r2
 8044b96:	3361      	adds	r3, #97	; 0x61
 8044b98:	781b      	ldrb	r3, [r3, #0]
 8044b9a:	2b03      	cmp	r3, #3
 8044b9c:	d122      	bne.n	8044be4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8044b9e:	687a      	ldr	r2, [r7, #4]
 8044ba0:	68fb      	ldr	r3, [r7, #12]
 8044ba2:	212c      	movs	r1, #44	; 0x2c
 8044ba4:	fb01 f303 	mul.w	r3, r1, r3
 8044ba8:	4413      	add	r3, r2
 8044baa:	3360      	adds	r3, #96	; 0x60
 8044bac:	2202      	movs	r2, #2
 8044bae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8044bb0:	68fb      	ldr	r3, [r7, #12]
 8044bb2:	015a      	lsls	r2, r3, #5
 8044bb4:	693b      	ldr	r3, [r7, #16]
 8044bb6:	4413      	add	r3, r2
 8044bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044bbc:	681b      	ldr	r3, [r3, #0]
 8044bbe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8044bc0:	68bb      	ldr	r3, [r7, #8]
 8044bc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8044bc6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8044bc8:	68bb      	ldr	r3, [r7, #8]
 8044bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8044bce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8044bd0:	68fb      	ldr	r3, [r7, #12]
 8044bd2:	015a      	lsls	r2, r3, #5
 8044bd4:	693b      	ldr	r3, [r7, #16]
 8044bd6:	4413      	add	r3, r2
 8044bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044bdc:	461a      	mov	r2, r3
 8044bde:	68bb      	ldr	r3, [r7, #8]
 8044be0:	6013      	str	r3, [r2, #0]
 8044be2:	e023      	b.n	8044c2c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8044be4:	687a      	ldr	r2, [r7, #4]
 8044be6:	68fb      	ldr	r3, [r7, #12]
 8044be8:	212c      	movs	r1, #44	; 0x2c
 8044bea:	fb01 f303 	mul.w	r3, r1, r3
 8044bee:	4413      	add	r3, r2
 8044bf0:	3361      	adds	r3, #97	; 0x61
 8044bf2:	781b      	ldrb	r3, [r3, #0]
 8044bf4:	2b07      	cmp	r3, #7
 8044bf6:	d119      	bne.n	8044c2c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8044bf8:	687a      	ldr	r2, [r7, #4]
 8044bfa:	68fb      	ldr	r3, [r7, #12]
 8044bfc:	212c      	movs	r1, #44	; 0x2c
 8044bfe:	fb01 f303 	mul.w	r3, r1, r3
 8044c02:	4413      	add	r3, r2
 8044c04:	335c      	adds	r3, #92	; 0x5c
 8044c06:	681b      	ldr	r3, [r3, #0]
 8044c08:	1c5a      	adds	r2, r3, #1
 8044c0a:	6879      	ldr	r1, [r7, #4]
 8044c0c:	68fb      	ldr	r3, [r7, #12]
 8044c0e:	202c      	movs	r0, #44	; 0x2c
 8044c10:	fb00 f303 	mul.w	r3, r0, r3
 8044c14:	440b      	add	r3, r1
 8044c16:	335c      	adds	r3, #92	; 0x5c
 8044c18:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8044c1a:	687a      	ldr	r2, [r7, #4]
 8044c1c:	68fb      	ldr	r3, [r7, #12]
 8044c1e:	212c      	movs	r1, #44	; 0x2c
 8044c20:	fb01 f303 	mul.w	r3, r1, r3
 8044c24:	4413      	add	r3, r2
 8044c26:	3360      	adds	r3, #96	; 0x60
 8044c28:	2204      	movs	r2, #4
 8044c2a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8044c2c:	68fb      	ldr	r3, [r7, #12]
 8044c2e:	015a      	lsls	r2, r3, #5
 8044c30:	693b      	ldr	r3, [r7, #16]
 8044c32:	4413      	add	r3, r2
 8044c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044c38:	461a      	mov	r2, r3
 8044c3a:	2302      	movs	r3, #2
 8044c3c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8044c3e:	68fb      	ldr	r3, [r7, #12]
 8044c40:	b2d9      	uxtb	r1, r3
 8044c42:	687a      	ldr	r2, [r7, #4]
 8044c44:	68fb      	ldr	r3, [r7, #12]
 8044c46:	202c      	movs	r0, #44	; 0x2c
 8044c48:	fb00 f303 	mul.w	r3, r0, r3
 8044c4c:	4413      	add	r3, r2
 8044c4e:	3360      	adds	r3, #96	; 0x60
 8044c50:	781b      	ldrb	r3, [r3, #0]
 8044c52:	461a      	mov	r2, r3
 8044c54:	6878      	ldr	r0, [r7, #4]
 8044c56:	f007 f8f7 	bl	804be48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8044c5a:	e061      	b.n	8044d20 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8044c5c:	68fb      	ldr	r3, [r7, #12]
 8044c5e:	015a      	lsls	r2, r3, #5
 8044c60:	693b      	ldr	r3, [r7, #16]
 8044c62:	4413      	add	r3, r2
 8044c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044c68:	689b      	ldr	r3, [r3, #8]
 8044c6a:	f003 0310 	and.w	r3, r3, #16
 8044c6e:	2b10      	cmp	r3, #16
 8044c70:	d156      	bne.n	8044d20 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8044c72:	687a      	ldr	r2, [r7, #4]
 8044c74:	68fb      	ldr	r3, [r7, #12]
 8044c76:	212c      	movs	r1, #44	; 0x2c
 8044c78:	fb01 f303 	mul.w	r3, r1, r3
 8044c7c:	4413      	add	r3, r2
 8044c7e:	333f      	adds	r3, #63	; 0x3f
 8044c80:	781b      	ldrb	r3, [r3, #0]
 8044c82:	2b03      	cmp	r3, #3
 8044c84:	d111      	bne.n	8044caa <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8044c86:	687a      	ldr	r2, [r7, #4]
 8044c88:	68fb      	ldr	r3, [r7, #12]
 8044c8a:	212c      	movs	r1, #44	; 0x2c
 8044c8c:	fb01 f303 	mul.w	r3, r1, r3
 8044c90:	4413      	add	r3, r2
 8044c92:	335c      	adds	r3, #92	; 0x5c
 8044c94:	2200      	movs	r2, #0
 8044c96:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044c98:	687b      	ldr	r3, [r7, #4]
 8044c9a:	681b      	ldr	r3, [r3, #0]
 8044c9c:	68fa      	ldr	r2, [r7, #12]
 8044c9e:	b2d2      	uxtb	r2, r2
 8044ca0:	4611      	mov	r1, r2
 8044ca2:	4618      	mov	r0, r3
 8044ca4:	f004 fe31 	bl	804990a <USB_HC_Halt>
 8044ca8:	e031      	b.n	8044d0e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8044caa:	687a      	ldr	r2, [r7, #4]
 8044cac:	68fb      	ldr	r3, [r7, #12]
 8044cae:	212c      	movs	r1, #44	; 0x2c
 8044cb0:	fb01 f303 	mul.w	r3, r1, r3
 8044cb4:	4413      	add	r3, r2
 8044cb6:	333f      	adds	r3, #63	; 0x3f
 8044cb8:	781b      	ldrb	r3, [r3, #0]
 8044cba:	2b00      	cmp	r3, #0
 8044cbc:	d009      	beq.n	8044cd2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8044cbe:	687a      	ldr	r2, [r7, #4]
 8044cc0:	68fb      	ldr	r3, [r7, #12]
 8044cc2:	212c      	movs	r1, #44	; 0x2c
 8044cc4:	fb01 f303 	mul.w	r3, r1, r3
 8044cc8:	4413      	add	r3, r2
 8044cca:	333f      	adds	r3, #63	; 0x3f
 8044ccc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8044cce:	2b02      	cmp	r3, #2
 8044cd0:	d11d      	bne.n	8044d0e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8044cd2:	687a      	ldr	r2, [r7, #4]
 8044cd4:	68fb      	ldr	r3, [r7, #12]
 8044cd6:	212c      	movs	r1, #44	; 0x2c
 8044cd8:	fb01 f303 	mul.w	r3, r1, r3
 8044cdc:	4413      	add	r3, r2
 8044cde:	335c      	adds	r3, #92	; 0x5c
 8044ce0:	2200      	movs	r2, #0
 8044ce2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8044ce4:	687b      	ldr	r3, [r7, #4]
 8044ce6:	691b      	ldr	r3, [r3, #16]
 8044ce8:	2b00      	cmp	r3, #0
 8044cea:	d110      	bne.n	8044d0e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8044cec:	687a      	ldr	r2, [r7, #4]
 8044cee:	68fb      	ldr	r3, [r7, #12]
 8044cf0:	212c      	movs	r1, #44	; 0x2c
 8044cf2:	fb01 f303 	mul.w	r3, r1, r3
 8044cf6:	4413      	add	r3, r2
 8044cf8:	3361      	adds	r3, #97	; 0x61
 8044cfa:	2203      	movs	r2, #3
 8044cfc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044cfe:	687b      	ldr	r3, [r7, #4]
 8044d00:	681b      	ldr	r3, [r3, #0]
 8044d02:	68fa      	ldr	r2, [r7, #12]
 8044d04:	b2d2      	uxtb	r2, r2
 8044d06:	4611      	mov	r1, r2
 8044d08:	4618      	mov	r0, r3
 8044d0a:	f004 fdfe 	bl	804990a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8044d0e:	68fb      	ldr	r3, [r7, #12]
 8044d10:	015a      	lsls	r2, r3, #5
 8044d12:	693b      	ldr	r3, [r7, #16]
 8044d14:	4413      	add	r3, r2
 8044d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044d1a:	461a      	mov	r2, r3
 8044d1c:	2310      	movs	r3, #16
 8044d1e:	6093      	str	r3, [r2, #8]
}
 8044d20:	bf00      	nop
 8044d22:	3718      	adds	r7, #24
 8044d24:	46bd      	mov	sp, r7
 8044d26:	bd80      	pop	{r7, pc}

08044d28 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8044d28:	b580      	push	{r7, lr}
 8044d2a:	b088      	sub	sp, #32
 8044d2c:	af00      	add	r7, sp, #0
 8044d2e:	6078      	str	r0, [r7, #4]
 8044d30:	460b      	mov	r3, r1
 8044d32:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8044d34:	687b      	ldr	r3, [r7, #4]
 8044d36:	681b      	ldr	r3, [r3, #0]
 8044d38:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8044d3a:	69fb      	ldr	r3, [r7, #28]
 8044d3c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8044d3e:	78fb      	ldrb	r3, [r7, #3]
 8044d40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8044d42:	697b      	ldr	r3, [r7, #20]
 8044d44:	015a      	lsls	r2, r3, #5
 8044d46:	69bb      	ldr	r3, [r7, #24]
 8044d48:	4413      	add	r3, r2
 8044d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044d4e:	689b      	ldr	r3, [r3, #8]
 8044d50:	f003 0304 	and.w	r3, r3, #4
 8044d54:	2b04      	cmp	r3, #4
 8044d56:	d11a      	bne.n	8044d8e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8044d58:	697b      	ldr	r3, [r7, #20]
 8044d5a:	015a      	lsls	r2, r3, #5
 8044d5c:	69bb      	ldr	r3, [r7, #24]
 8044d5e:	4413      	add	r3, r2
 8044d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044d64:	461a      	mov	r2, r3
 8044d66:	2304      	movs	r3, #4
 8044d68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8044d6a:	687a      	ldr	r2, [r7, #4]
 8044d6c:	697b      	ldr	r3, [r7, #20]
 8044d6e:	212c      	movs	r1, #44	; 0x2c
 8044d70:	fb01 f303 	mul.w	r3, r1, r3
 8044d74:	4413      	add	r3, r2
 8044d76:	3361      	adds	r3, #97	; 0x61
 8044d78:	2206      	movs	r2, #6
 8044d7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044d7c:	687b      	ldr	r3, [r7, #4]
 8044d7e:	681b      	ldr	r3, [r3, #0]
 8044d80:	697a      	ldr	r2, [r7, #20]
 8044d82:	b2d2      	uxtb	r2, r2
 8044d84:	4611      	mov	r1, r2
 8044d86:	4618      	mov	r0, r3
 8044d88:	f004 fdbf 	bl	804990a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8044d8c:	e331      	b.n	80453f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8044d8e:	697b      	ldr	r3, [r7, #20]
 8044d90:	015a      	lsls	r2, r3, #5
 8044d92:	69bb      	ldr	r3, [r7, #24]
 8044d94:	4413      	add	r3, r2
 8044d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044d9a:	689b      	ldr	r3, [r3, #8]
 8044d9c:	f003 0320 	and.w	r3, r3, #32
 8044da0:	2b20      	cmp	r3, #32
 8044da2:	d12e      	bne.n	8044e02 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8044da4:	697b      	ldr	r3, [r7, #20]
 8044da6:	015a      	lsls	r2, r3, #5
 8044da8:	69bb      	ldr	r3, [r7, #24]
 8044daa:	4413      	add	r3, r2
 8044dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044db0:	461a      	mov	r2, r3
 8044db2:	2320      	movs	r3, #32
 8044db4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8044db6:	687a      	ldr	r2, [r7, #4]
 8044db8:	697b      	ldr	r3, [r7, #20]
 8044dba:	212c      	movs	r1, #44	; 0x2c
 8044dbc:	fb01 f303 	mul.w	r3, r1, r3
 8044dc0:	4413      	add	r3, r2
 8044dc2:	333d      	adds	r3, #61	; 0x3d
 8044dc4:	781b      	ldrb	r3, [r3, #0]
 8044dc6:	2b01      	cmp	r3, #1
 8044dc8:	f040 8313 	bne.w	80453f2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8044dcc:	687a      	ldr	r2, [r7, #4]
 8044dce:	697b      	ldr	r3, [r7, #20]
 8044dd0:	212c      	movs	r1, #44	; 0x2c
 8044dd2:	fb01 f303 	mul.w	r3, r1, r3
 8044dd6:	4413      	add	r3, r2
 8044dd8:	333d      	adds	r3, #61	; 0x3d
 8044dda:	2200      	movs	r2, #0
 8044ddc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8044dde:	687a      	ldr	r2, [r7, #4]
 8044de0:	697b      	ldr	r3, [r7, #20]
 8044de2:	212c      	movs	r1, #44	; 0x2c
 8044de4:	fb01 f303 	mul.w	r3, r1, r3
 8044de8:	4413      	add	r3, r2
 8044dea:	3360      	adds	r3, #96	; 0x60
 8044dec:	2202      	movs	r2, #2
 8044dee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044df0:	687b      	ldr	r3, [r7, #4]
 8044df2:	681b      	ldr	r3, [r3, #0]
 8044df4:	697a      	ldr	r2, [r7, #20]
 8044df6:	b2d2      	uxtb	r2, r2
 8044df8:	4611      	mov	r1, r2
 8044dfa:	4618      	mov	r0, r3
 8044dfc:	f004 fd85 	bl	804990a <USB_HC_Halt>
}
 8044e00:	e2f7      	b.n	80453f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8044e02:	697b      	ldr	r3, [r7, #20]
 8044e04:	015a      	lsls	r2, r3, #5
 8044e06:	69bb      	ldr	r3, [r7, #24]
 8044e08:	4413      	add	r3, r2
 8044e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044e0e:	689b      	ldr	r3, [r3, #8]
 8044e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8044e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8044e18:	d112      	bne.n	8044e40 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8044e1a:	697b      	ldr	r3, [r7, #20]
 8044e1c:	015a      	lsls	r2, r3, #5
 8044e1e:	69bb      	ldr	r3, [r7, #24]
 8044e20:	4413      	add	r3, r2
 8044e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044e26:	461a      	mov	r2, r3
 8044e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8044e2c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044e2e:	687b      	ldr	r3, [r7, #4]
 8044e30:	681b      	ldr	r3, [r3, #0]
 8044e32:	697a      	ldr	r2, [r7, #20]
 8044e34:	b2d2      	uxtb	r2, r2
 8044e36:	4611      	mov	r1, r2
 8044e38:	4618      	mov	r0, r3
 8044e3a:	f004 fd66 	bl	804990a <USB_HC_Halt>
}
 8044e3e:	e2d8      	b.n	80453f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8044e40:	697b      	ldr	r3, [r7, #20]
 8044e42:	015a      	lsls	r2, r3, #5
 8044e44:	69bb      	ldr	r3, [r7, #24]
 8044e46:	4413      	add	r3, r2
 8044e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044e4c:	689b      	ldr	r3, [r3, #8]
 8044e4e:	f003 0301 	and.w	r3, r3, #1
 8044e52:	2b01      	cmp	r3, #1
 8044e54:	d140      	bne.n	8044ed8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8044e56:	687a      	ldr	r2, [r7, #4]
 8044e58:	697b      	ldr	r3, [r7, #20]
 8044e5a:	212c      	movs	r1, #44	; 0x2c
 8044e5c:	fb01 f303 	mul.w	r3, r1, r3
 8044e60:	4413      	add	r3, r2
 8044e62:	335c      	adds	r3, #92	; 0x5c
 8044e64:	2200      	movs	r2, #0
 8044e66:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8044e68:	697b      	ldr	r3, [r7, #20]
 8044e6a:	015a      	lsls	r2, r3, #5
 8044e6c:	69bb      	ldr	r3, [r7, #24]
 8044e6e:	4413      	add	r3, r2
 8044e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044e74:	689b      	ldr	r3, [r3, #8]
 8044e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044e7a:	2b40      	cmp	r3, #64	; 0x40
 8044e7c:	d111      	bne.n	8044ea2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8044e7e:	687a      	ldr	r2, [r7, #4]
 8044e80:	697b      	ldr	r3, [r7, #20]
 8044e82:	212c      	movs	r1, #44	; 0x2c
 8044e84:	fb01 f303 	mul.w	r3, r1, r3
 8044e88:	4413      	add	r3, r2
 8044e8a:	333d      	adds	r3, #61	; 0x3d
 8044e8c:	2201      	movs	r2, #1
 8044e8e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8044e90:	697b      	ldr	r3, [r7, #20]
 8044e92:	015a      	lsls	r2, r3, #5
 8044e94:	69bb      	ldr	r3, [r7, #24]
 8044e96:	4413      	add	r3, r2
 8044e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044e9c:	461a      	mov	r2, r3
 8044e9e:	2340      	movs	r3, #64	; 0x40
 8044ea0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8044ea2:	697b      	ldr	r3, [r7, #20]
 8044ea4:	015a      	lsls	r2, r3, #5
 8044ea6:	69bb      	ldr	r3, [r7, #24]
 8044ea8:	4413      	add	r3, r2
 8044eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044eae:	461a      	mov	r2, r3
 8044eb0:	2301      	movs	r3, #1
 8044eb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8044eb4:	687a      	ldr	r2, [r7, #4]
 8044eb6:	697b      	ldr	r3, [r7, #20]
 8044eb8:	212c      	movs	r1, #44	; 0x2c
 8044eba:	fb01 f303 	mul.w	r3, r1, r3
 8044ebe:	4413      	add	r3, r2
 8044ec0:	3361      	adds	r3, #97	; 0x61
 8044ec2:	2201      	movs	r2, #1
 8044ec4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044ec6:	687b      	ldr	r3, [r7, #4]
 8044ec8:	681b      	ldr	r3, [r3, #0]
 8044eca:	697a      	ldr	r2, [r7, #20]
 8044ecc:	b2d2      	uxtb	r2, r2
 8044ece:	4611      	mov	r1, r2
 8044ed0:	4618      	mov	r0, r3
 8044ed2:	f004 fd1a 	bl	804990a <USB_HC_Halt>
}
 8044ed6:	e28c      	b.n	80453f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8044ed8:	697b      	ldr	r3, [r7, #20]
 8044eda:	015a      	lsls	r2, r3, #5
 8044edc:	69bb      	ldr	r3, [r7, #24]
 8044ede:	4413      	add	r3, r2
 8044ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044ee4:	689b      	ldr	r3, [r3, #8]
 8044ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044eea:	2b40      	cmp	r3, #64	; 0x40
 8044eec:	d12c      	bne.n	8044f48 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8044eee:	687a      	ldr	r2, [r7, #4]
 8044ef0:	697b      	ldr	r3, [r7, #20]
 8044ef2:	212c      	movs	r1, #44	; 0x2c
 8044ef4:	fb01 f303 	mul.w	r3, r1, r3
 8044ef8:	4413      	add	r3, r2
 8044efa:	3361      	adds	r3, #97	; 0x61
 8044efc:	2204      	movs	r2, #4
 8044efe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8044f00:	687a      	ldr	r2, [r7, #4]
 8044f02:	697b      	ldr	r3, [r7, #20]
 8044f04:	212c      	movs	r1, #44	; 0x2c
 8044f06:	fb01 f303 	mul.w	r3, r1, r3
 8044f0a:	4413      	add	r3, r2
 8044f0c:	333d      	adds	r3, #61	; 0x3d
 8044f0e:	2201      	movs	r2, #1
 8044f10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8044f12:	687a      	ldr	r2, [r7, #4]
 8044f14:	697b      	ldr	r3, [r7, #20]
 8044f16:	212c      	movs	r1, #44	; 0x2c
 8044f18:	fb01 f303 	mul.w	r3, r1, r3
 8044f1c:	4413      	add	r3, r2
 8044f1e:	335c      	adds	r3, #92	; 0x5c
 8044f20:	2200      	movs	r2, #0
 8044f22:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044f24:	687b      	ldr	r3, [r7, #4]
 8044f26:	681b      	ldr	r3, [r3, #0]
 8044f28:	697a      	ldr	r2, [r7, #20]
 8044f2a:	b2d2      	uxtb	r2, r2
 8044f2c:	4611      	mov	r1, r2
 8044f2e:	4618      	mov	r0, r3
 8044f30:	f004 fceb 	bl	804990a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8044f34:	697b      	ldr	r3, [r7, #20]
 8044f36:	015a      	lsls	r2, r3, #5
 8044f38:	69bb      	ldr	r3, [r7, #24]
 8044f3a:	4413      	add	r3, r2
 8044f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044f40:	461a      	mov	r2, r3
 8044f42:	2340      	movs	r3, #64	; 0x40
 8044f44:	6093      	str	r3, [r2, #8]
}
 8044f46:	e254      	b.n	80453f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8044f48:	697b      	ldr	r3, [r7, #20]
 8044f4a:	015a      	lsls	r2, r3, #5
 8044f4c:	69bb      	ldr	r3, [r7, #24]
 8044f4e:	4413      	add	r3, r2
 8044f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044f54:	689b      	ldr	r3, [r3, #8]
 8044f56:	f003 0308 	and.w	r3, r3, #8
 8044f5a:	2b08      	cmp	r3, #8
 8044f5c:	d11a      	bne.n	8044f94 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8044f5e:	697b      	ldr	r3, [r7, #20]
 8044f60:	015a      	lsls	r2, r3, #5
 8044f62:	69bb      	ldr	r3, [r7, #24]
 8044f64:	4413      	add	r3, r2
 8044f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044f6a:	461a      	mov	r2, r3
 8044f6c:	2308      	movs	r3, #8
 8044f6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8044f70:	687a      	ldr	r2, [r7, #4]
 8044f72:	697b      	ldr	r3, [r7, #20]
 8044f74:	212c      	movs	r1, #44	; 0x2c
 8044f76:	fb01 f303 	mul.w	r3, r1, r3
 8044f7a:	4413      	add	r3, r2
 8044f7c:	3361      	adds	r3, #97	; 0x61
 8044f7e:	2205      	movs	r2, #5
 8044f80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044f82:	687b      	ldr	r3, [r7, #4]
 8044f84:	681b      	ldr	r3, [r3, #0]
 8044f86:	697a      	ldr	r2, [r7, #20]
 8044f88:	b2d2      	uxtb	r2, r2
 8044f8a:	4611      	mov	r1, r2
 8044f8c:	4618      	mov	r0, r3
 8044f8e:	f004 fcbc 	bl	804990a <USB_HC_Halt>
}
 8044f92:	e22e      	b.n	80453f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8044f94:	697b      	ldr	r3, [r7, #20]
 8044f96:	015a      	lsls	r2, r3, #5
 8044f98:	69bb      	ldr	r3, [r7, #24]
 8044f9a:	4413      	add	r3, r2
 8044f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044fa0:	689b      	ldr	r3, [r3, #8]
 8044fa2:	f003 0310 	and.w	r3, r3, #16
 8044fa6:	2b10      	cmp	r3, #16
 8044fa8:	d140      	bne.n	804502c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8044faa:	687a      	ldr	r2, [r7, #4]
 8044fac:	697b      	ldr	r3, [r7, #20]
 8044fae:	212c      	movs	r1, #44	; 0x2c
 8044fb0:	fb01 f303 	mul.w	r3, r1, r3
 8044fb4:	4413      	add	r3, r2
 8044fb6:	335c      	adds	r3, #92	; 0x5c
 8044fb8:	2200      	movs	r2, #0
 8044fba:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8044fbc:	687a      	ldr	r2, [r7, #4]
 8044fbe:	697b      	ldr	r3, [r7, #20]
 8044fc0:	212c      	movs	r1, #44	; 0x2c
 8044fc2:	fb01 f303 	mul.w	r3, r1, r3
 8044fc6:	4413      	add	r3, r2
 8044fc8:	3361      	adds	r3, #97	; 0x61
 8044fca:	2203      	movs	r2, #3
 8044fcc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8044fce:	687a      	ldr	r2, [r7, #4]
 8044fd0:	697b      	ldr	r3, [r7, #20]
 8044fd2:	212c      	movs	r1, #44	; 0x2c
 8044fd4:	fb01 f303 	mul.w	r3, r1, r3
 8044fd8:	4413      	add	r3, r2
 8044fda:	333d      	adds	r3, #61	; 0x3d
 8044fdc:	781b      	ldrb	r3, [r3, #0]
 8044fde:	2b00      	cmp	r3, #0
 8044fe0:	d112      	bne.n	8045008 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8044fe2:	687a      	ldr	r2, [r7, #4]
 8044fe4:	697b      	ldr	r3, [r7, #20]
 8044fe6:	212c      	movs	r1, #44	; 0x2c
 8044fe8:	fb01 f303 	mul.w	r3, r1, r3
 8044fec:	4413      	add	r3, r2
 8044fee:	333c      	adds	r3, #60	; 0x3c
 8044ff0:	781b      	ldrb	r3, [r3, #0]
 8044ff2:	2b00      	cmp	r3, #0
 8044ff4:	d108      	bne.n	8045008 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8044ff6:	687a      	ldr	r2, [r7, #4]
 8044ff8:	697b      	ldr	r3, [r7, #20]
 8044ffa:	212c      	movs	r1, #44	; 0x2c
 8044ffc:	fb01 f303 	mul.w	r3, r1, r3
 8045000:	4413      	add	r3, r2
 8045002:	333d      	adds	r3, #61	; 0x3d
 8045004:	2201      	movs	r2, #1
 8045006:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045008:	687b      	ldr	r3, [r7, #4]
 804500a:	681b      	ldr	r3, [r3, #0]
 804500c:	697a      	ldr	r2, [r7, #20]
 804500e:	b2d2      	uxtb	r2, r2
 8045010:	4611      	mov	r1, r2
 8045012:	4618      	mov	r0, r3
 8045014:	f004 fc79 	bl	804990a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8045018:	697b      	ldr	r3, [r7, #20]
 804501a:	015a      	lsls	r2, r3, #5
 804501c:	69bb      	ldr	r3, [r7, #24]
 804501e:	4413      	add	r3, r2
 8045020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045024:	461a      	mov	r2, r3
 8045026:	2310      	movs	r3, #16
 8045028:	6093      	str	r3, [r2, #8]
}
 804502a:	e1e2      	b.n	80453f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 804502c:	697b      	ldr	r3, [r7, #20]
 804502e:	015a      	lsls	r2, r3, #5
 8045030:	69bb      	ldr	r3, [r7, #24]
 8045032:	4413      	add	r3, r2
 8045034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045038:	689b      	ldr	r3, [r3, #8]
 804503a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804503e:	2b80      	cmp	r3, #128	; 0x80
 8045040:	d164      	bne.n	804510c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8045042:	687b      	ldr	r3, [r7, #4]
 8045044:	691b      	ldr	r3, [r3, #16]
 8045046:	2b00      	cmp	r3, #0
 8045048:	d111      	bne.n	804506e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 804504a:	687a      	ldr	r2, [r7, #4]
 804504c:	697b      	ldr	r3, [r7, #20]
 804504e:	212c      	movs	r1, #44	; 0x2c
 8045050:	fb01 f303 	mul.w	r3, r1, r3
 8045054:	4413      	add	r3, r2
 8045056:	3361      	adds	r3, #97	; 0x61
 8045058:	2206      	movs	r2, #6
 804505a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804505c:	687b      	ldr	r3, [r7, #4]
 804505e:	681b      	ldr	r3, [r3, #0]
 8045060:	697a      	ldr	r2, [r7, #20]
 8045062:	b2d2      	uxtb	r2, r2
 8045064:	4611      	mov	r1, r2
 8045066:	4618      	mov	r0, r3
 8045068:	f004 fc4f 	bl	804990a <USB_HC_Halt>
 804506c:	e044      	b.n	80450f8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 804506e:	687a      	ldr	r2, [r7, #4]
 8045070:	697b      	ldr	r3, [r7, #20]
 8045072:	212c      	movs	r1, #44	; 0x2c
 8045074:	fb01 f303 	mul.w	r3, r1, r3
 8045078:	4413      	add	r3, r2
 804507a:	335c      	adds	r3, #92	; 0x5c
 804507c:	681b      	ldr	r3, [r3, #0]
 804507e:	1c5a      	adds	r2, r3, #1
 8045080:	6879      	ldr	r1, [r7, #4]
 8045082:	697b      	ldr	r3, [r7, #20]
 8045084:	202c      	movs	r0, #44	; 0x2c
 8045086:	fb00 f303 	mul.w	r3, r0, r3
 804508a:	440b      	add	r3, r1
 804508c:	335c      	adds	r3, #92	; 0x5c
 804508e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8045090:	687a      	ldr	r2, [r7, #4]
 8045092:	697b      	ldr	r3, [r7, #20]
 8045094:	212c      	movs	r1, #44	; 0x2c
 8045096:	fb01 f303 	mul.w	r3, r1, r3
 804509a:	4413      	add	r3, r2
 804509c:	335c      	adds	r3, #92	; 0x5c
 804509e:	681b      	ldr	r3, [r3, #0]
 80450a0:	2b02      	cmp	r3, #2
 80450a2:	d920      	bls.n	80450e6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80450a4:	687a      	ldr	r2, [r7, #4]
 80450a6:	697b      	ldr	r3, [r7, #20]
 80450a8:	212c      	movs	r1, #44	; 0x2c
 80450aa:	fb01 f303 	mul.w	r3, r1, r3
 80450ae:	4413      	add	r3, r2
 80450b0:	335c      	adds	r3, #92	; 0x5c
 80450b2:	2200      	movs	r2, #0
 80450b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80450b6:	687a      	ldr	r2, [r7, #4]
 80450b8:	697b      	ldr	r3, [r7, #20]
 80450ba:	212c      	movs	r1, #44	; 0x2c
 80450bc:	fb01 f303 	mul.w	r3, r1, r3
 80450c0:	4413      	add	r3, r2
 80450c2:	3360      	adds	r3, #96	; 0x60
 80450c4:	2204      	movs	r2, #4
 80450c6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80450c8:	697b      	ldr	r3, [r7, #20]
 80450ca:	b2d9      	uxtb	r1, r3
 80450cc:	687a      	ldr	r2, [r7, #4]
 80450ce:	697b      	ldr	r3, [r7, #20]
 80450d0:	202c      	movs	r0, #44	; 0x2c
 80450d2:	fb00 f303 	mul.w	r3, r0, r3
 80450d6:	4413      	add	r3, r2
 80450d8:	3360      	adds	r3, #96	; 0x60
 80450da:	781b      	ldrb	r3, [r3, #0]
 80450dc:	461a      	mov	r2, r3
 80450de:	6878      	ldr	r0, [r7, #4]
 80450e0:	f006 feb2 	bl	804be48 <HAL_HCD_HC_NotifyURBChange_Callback>
 80450e4:	e008      	b.n	80450f8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80450e6:	687a      	ldr	r2, [r7, #4]
 80450e8:	697b      	ldr	r3, [r7, #20]
 80450ea:	212c      	movs	r1, #44	; 0x2c
 80450ec:	fb01 f303 	mul.w	r3, r1, r3
 80450f0:	4413      	add	r3, r2
 80450f2:	3360      	adds	r3, #96	; 0x60
 80450f4:	2202      	movs	r2, #2
 80450f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80450f8:	697b      	ldr	r3, [r7, #20]
 80450fa:	015a      	lsls	r2, r3, #5
 80450fc:	69bb      	ldr	r3, [r7, #24]
 80450fe:	4413      	add	r3, r2
 8045100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045104:	461a      	mov	r2, r3
 8045106:	2380      	movs	r3, #128	; 0x80
 8045108:	6093      	str	r3, [r2, #8]
}
 804510a:	e172      	b.n	80453f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 804510c:	697b      	ldr	r3, [r7, #20]
 804510e:	015a      	lsls	r2, r3, #5
 8045110:	69bb      	ldr	r3, [r7, #24]
 8045112:	4413      	add	r3, r2
 8045114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045118:	689b      	ldr	r3, [r3, #8]
 804511a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804511e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8045122:	d11b      	bne.n	804515c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8045124:	687a      	ldr	r2, [r7, #4]
 8045126:	697b      	ldr	r3, [r7, #20]
 8045128:	212c      	movs	r1, #44	; 0x2c
 804512a:	fb01 f303 	mul.w	r3, r1, r3
 804512e:	4413      	add	r3, r2
 8045130:	3361      	adds	r3, #97	; 0x61
 8045132:	2208      	movs	r2, #8
 8045134:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045136:	687b      	ldr	r3, [r7, #4]
 8045138:	681b      	ldr	r3, [r3, #0]
 804513a:	697a      	ldr	r2, [r7, #20]
 804513c:	b2d2      	uxtb	r2, r2
 804513e:	4611      	mov	r1, r2
 8045140:	4618      	mov	r0, r3
 8045142:	f004 fbe2 	bl	804990a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8045146:	697b      	ldr	r3, [r7, #20]
 8045148:	015a      	lsls	r2, r3, #5
 804514a:	69bb      	ldr	r3, [r7, #24]
 804514c:	4413      	add	r3, r2
 804514e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045152:	461a      	mov	r2, r3
 8045154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8045158:	6093      	str	r3, [r2, #8]
}
 804515a:	e14a      	b.n	80453f2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 804515c:	697b      	ldr	r3, [r7, #20]
 804515e:	015a      	lsls	r2, r3, #5
 8045160:	69bb      	ldr	r3, [r7, #24]
 8045162:	4413      	add	r3, r2
 8045164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045168:	689b      	ldr	r3, [r3, #8]
 804516a:	f003 0302 	and.w	r3, r3, #2
 804516e:	2b02      	cmp	r3, #2
 8045170:	f040 813f 	bne.w	80453f2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8045174:	687a      	ldr	r2, [r7, #4]
 8045176:	697b      	ldr	r3, [r7, #20]
 8045178:	212c      	movs	r1, #44	; 0x2c
 804517a:	fb01 f303 	mul.w	r3, r1, r3
 804517e:	4413      	add	r3, r2
 8045180:	3361      	adds	r3, #97	; 0x61
 8045182:	781b      	ldrb	r3, [r3, #0]
 8045184:	2b01      	cmp	r3, #1
 8045186:	d17d      	bne.n	8045284 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8045188:	687a      	ldr	r2, [r7, #4]
 804518a:	697b      	ldr	r3, [r7, #20]
 804518c:	212c      	movs	r1, #44	; 0x2c
 804518e:	fb01 f303 	mul.w	r3, r1, r3
 8045192:	4413      	add	r3, r2
 8045194:	3360      	adds	r3, #96	; 0x60
 8045196:	2201      	movs	r2, #1
 8045198:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 804519a:	687a      	ldr	r2, [r7, #4]
 804519c:	697b      	ldr	r3, [r7, #20]
 804519e:	212c      	movs	r1, #44	; 0x2c
 80451a0:	fb01 f303 	mul.w	r3, r1, r3
 80451a4:	4413      	add	r3, r2
 80451a6:	333f      	adds	r3, #63	; 0x3f
 80451a8:	781b      	ldrb	r3, [r3, #0]
 80451aa:	2b02      	cmp	r3, #2
 80451ac:	d00a      	beq.n	80451c4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80451ae:	687a      	ldr	r2, [r7, #4]
 80451b0:	697b      	ldr	r3, [r7, #20]
 80451b2:	212c      	movs	r1, #44	; 0x2c
 80451b4:	fb01 f303 	mul.w	r3, r1, r3
 80451b8:	4413      	add	r3, r2
 80451ba:	333f      	adds	r3, #63	; 0x3f
 80451bc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80451be:	2b03      	cmp	r3, #3
 80451c0:	f040 8100 	bne.w	80453c4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80451c4:	687b      	ldr	r3, [r7, #4]
 80451c6:	691b      	ldr	r3, [r3, #16]
 80451c8:	2b00      	cmp	r3, #0
 80451ca:	d113      	bne.n	80451f4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80451cc:	687a      	ldr	r2, [r7, #4]
 80451ce:	697b      	ldr	r3, [r7, #20]
 80451d0:	212c      	movs	r1, #44	; 0x2c
 80451d2:	fb01 f303 	mul.w	r3, r1, r3
 80451d6:	4413      	add	r3, r2
 80451d8:	3355      	adds	r3, #85	; 0x55
 80451da:	781b      	ldrb	r3, [r3, #0]
 80451dc:	f083 0301 	eor.w	r3, r3, #1
 80451e0:	b2d8      	uxtb	r0, r3
 80451e2:	687a      	ldr	r2, [r7, #4]
 80451e4:	697b      	ldr	r3, [r7, #20]
 80451e6:	212c      	movs	r1, #44	; 0x2c
 80451e8:	fb01 f303 	mul.w	r3, r1, r3
 80451ec:	4413      	add	r3, r2
 80451ee:	3355      	adds	r3, #85	; 0x55
 80451f0:	4602      	mov	r2, r0
 80451f2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80451f4:	687b      	ldr	r3, [r7, #4]
 80451f6:	691b      	ldr	r3, [r3, #16]
 80451f8:	2b01      	cmp	r3, #1
 80451fa:	f040 80e3 	bne.w	80453c4 <HCD_HC_OUT_IRQHandler+0x69c>
 80451fe:	687a      	ldr	r2, [r7, #4]
 8045200:	697b      	ldr	r3, [r7, #20]
 8045202:	212c      	movs	r1, #44	; 0x2c
 8045204:	fb01 f303 	mul.w	r3, r1, r3
 8045208:	4413      	add	r3, r2
 804520a:	334c      	adds	r3, #76	; 0x4c
 804520c:	681b      	ldr	r3, [r3, #0]
 804520e:	2b00      	cmp	r3, #0
 8045210:	f000 80d8 	beq.w	80453c4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8045214:	687a      	ldr	r2, [r7, #4]
 8045216:	697b      	ldr	r3, [r7, #20]
 8045218:	212c      	movs	r1, #44	; 0x2c
 804521a:	fb01 f303 	mul.w	r3, r1, r3
 804521e:	4413      	add	r3, r2
 8045220:	334c      	adds	r3, #76	; 0x4c
 8045222:	681b      	ldr	r3, [r3, #0]
 8045224:	6879      	ldr	r1, [r7, #4]
 8045226:	697a      	ldr	r2, [r7, #20]
 8045228:	202c      	movs	r0, #44	; 0x2c
 804522a:	fb00 f202 	mul.w	r2, r0, r2
 804522e:	440a      	add	r2, r1
 8045230:	3240      	adds	r2, #64	; 0x40
 8045232:	8812      	ldrh	r2, [r2, #0]
 8045234:	4413      	add	r3, r2
 8045236:	3b01      	subs	r3, #1
 8045238:	6879      	ldr	r1, [r7, #4]
 804523a:	697a      	ldr	r2, [r7, #20]
 804523c:	202c      	movs	r0, #44	; 0x2c
 804523e:	fb00 f202 	mul.w	r2, r0, r2
 8045242:	440a      	add	r2, r1
 8045244:	3240      	adds	r2, #64	; 0x40
 8045246:	8812      	ldrh	r2, [r2, #0]
 8045248:	fbb3 f3f2 	udiv	r3, r3, r2
 804524c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 804524e:	68fb      	ldr	r3, [r7, #12]
 8045250:	f003 0301 	and.w	r3, r3, #1
 8045254:	2b00      	cmp	r3, #0
 8045256:	f000 80b5 	beq.w	80453c4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 804525a:	687a      	ldr	r2, [r7, #4]
 804525c:	697b      	ldr	r3, [r7, #20]
 804525e:	212c      	movs	r1, #44	; 0x2c
 8045260:	fb01 f303 	mul.w	r3, r1, r3
 8045264:	4413      	add	r3, r2
 8045266:	3355      	adds	r3, #85	; 0x55
 8045268:	781b      	ldrb	r3, [r3, #0]
 804526a:	f083 0301 	eor.w	r3, r3, #1
 804526e:	b2d8      	uxtb	r0, r3
 8045270:	687a      	ldr	r2, [r7, #4]
 8045272:	697b      	ldr	r3, [r7, #20]
 8045274:	212c      	movs	r1, #44	; 0x2c
 8045276:	fb01 f303 	mul.w	r3, r1, r3
 804527a:	4413      	add	r3, r2
 804527c:	3355      	adds	r3, #85	; 0x55
 804527e:	4602      	mov	r2, r0
 8045280:	701a      	strb	r2, [r3, #0]
 8045282:	e09f      	b.n	80453c4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8045284:	687a      	ldr	r2, [r7, #4]
 8045286:	697b      	ldr	r3, [r7, #20]
 8045288:	212c      	movs	r1, #44	; 0x2c
 804528a:	fb01 f303 	mul.w	r3, r1, r3
 804528e:	4413      	add	r3, r2
 8045290:	3361      	adds	r3, #97	; 0x61
 8045292:	781b      	ldrb	r3, [r3, #0]
 8045294:	2b03      	cmp	r3, #3
 8045296:	d109      	bne.n	80452ac <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8045298:	687a      	ldr	r2, [r7, #4]
 804529a:	697b      	ldr	r3, [r7, #20]
 804529c:	212c      	movs	r1, #44	; 0x2c
 804529e:	fb01 f303 	mul.w	r3, r1, r3
 80452a2:	4413      	add	r3, r2
 80452a4:	3360      	adds	r3, #96	; 0x60
 80452a6:	2202      	movs	r2, #2
 80452a8:	701a      	strb	r2, [r3, #0]
 80452aa:	e08b      	b.n	80453c4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80452ac:	687a      	ldr	r2, [r7, #4]
 80452ae:	697b      	ldr	r3, [r7, #20]
 80452b0:	212c      	movs	r1, #44	; 0x2c
 80452b2:	fb01 f303 	mul.w	r3, r1, r3
 80452b6:	4413      	add	r3, r2
 80452b8:	3361      	adds	r3, #97	; 0x61
 80452ba:	781b      	ldrb	r3, [r3, #0]
 80452bc:	2b04      	cmp	r3, #4
 80452be:	d109      	bne.n	80452d4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80452c0:	687a      	ldr	r2, [r7, #4]
 80452c2:	697b      	ldr	r3, [r7, #20]
 80452c4:	212c      	movs	r1, #44	; 0x2c
 80452c6:	fb01 f303 	mul.w	r3, r1, r3
 80452ca:	4413      	add	r3, r2
 80452cc:	3360      	adds	r3, #96	; 0x60
 80452ce:	2202      	movs	r2, #2
 80452d0:	701a      	strb	r2, [r3, #0]
 80452d2:	e077      	b.n	80453c4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80452d4:	687a      	ldr	r2, [r7, #4]
 80452d6:	697b      	ldr	r3, [r7, #20]
 80452d8:	212c      	movs	r1, #44	; 0x2c
 80452da:	fb01 f303 	mul.w	r3, r1, r3
 80452de:	4413      	add	r3, r2
 80452e0:	3361      	adds	r3, #97	; 0x61
 80452e2:	781b      	ldrb	r3, [r3, #0]
 80452e4:	2b05      	cmp	r3, #5
 80452e6:	d109      	bne.n	80452fc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80452e8:	687a      	ldr	r2, [r7, #4]
 80452ea:	697b      	ldr	r3, [r7, #20]
 80452ec:	212c      	movs	r1, #44	; 0x2c
 80452ee:	fb01 f303 	mul.w	r3, r1, r3
 80452f2:	4413      	add	r3, r2
 80452f4:	3360      	adds	r3, #96	; 0x60
 80452f6:	2205      	movs	r2, #5
 80452f8:	701a      	strb	r2, [r3, #0]
 80452fa:	e063      	b.n	80453c4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80452fc:	687a      	ldr	r2, [r7, #4]
 80452fe:	697b      	ldr	r3, [r7, #20]
 8045300:	212c      	movs	r1, #44	; 0x2c
 8045302:	fb01 f303 	mul.w	r3, r1, r3
 8045306:	4413      	add	r3, r2
 8045308:	3361      	adds	r3, #97	; 0x61
 804530a:	781b      	ldrb	r3, [r3, #0]
 804530c:	2b06      	cmp	r3, #6
 804530e:	d009      	beq.n	8045324 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8045310:	687a      	ldr	r2, [r7, #4]
 8045312:	697b      	ldr	r3, [r7, #20]
 8045314:	212c      	movs	r1, #44	; 0x2c
 8045316:	fb01 f303 	mul.w	r3, r1, r3
 804531a:	4413      	add	r3, r2
 804531c:	3361      	adds	r3, #97	; 0x61
 804531e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8045320:	2b08      	cmp	r3, #8
 8045322:	d14f      	bne.n	80453c4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8045324:	687a      	ldr	r2, [r7, #4]
 8045326:	697b      	ldr	r3, [r7, #20]
 8045328:	212c      	movs	r1, #44	; 0x2c
 804532a:	fb01 f303 	mul.w	r3, r1, r3
 804532e:	4413      	add	r3, r2
 8045330:	335c      	adds	r3, #92	; 0x5c
 8045332:	681b      	ldr	r3, [r3, #0]
 8045334:	1c5a      	adds	r2, r3, #1
 8045336:	6879      	ldr	r1, [r7, #4]
 8045338:	697b      	ldr	r3, [r7, #20]
 804533a:	202c      	movs	r0, #44	; 0x2c
 804533c:	fb00 f303 	mul.w	r3, r0, r3
 8045340:	440b      	add	r3, r1
 8045342:	335c      	adds	r3, #92	; 0x5c
 8045344:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8045346:	687a      	ldr	r2, [r7, #4]
 8045348:	697b      	ldr	r3, [r7, #20]
 804534a:	212c      	movs	r1, #44	; 0x2c
 804534c:	fb01 f303 	mul.w	r3, r1, r3
 8045350:	4413      	add	r3, r2
 8045352:	335c      	adds	r3, #92	; 0x5c
 8045354:	681b      	ldr	r3, [r3, #0]
 8045356:	2b02      	cmp	r3, #2
 8045358:	d912      	bls.n	8045380 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 804535a:	687a      	ldr	r2, [r7, #4]
 804535c:	697b      	ldr	r3, [r7, #20]
 804535e:	212c      	movs	r1, #44	; 0x2c
 8045360:	fb01 f303 	mul.w	r3, r1, r3
 8045364:	4413      	add	r3, r2
 8045366:	335c      	adds	r3, #92	; 0x5c
 8045368:	2200      	movs	r2, #0
 804536a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 804536c:	687a      	ldr	r2, [r7, #4]
 804536e:	697b      	ldr	r3, [r7, #20]
 8045370:	212c      	movs	r1, #44	; 0x2c
 8045372:	fb01 f303 	mul.w	r3, r1, r3
 8045376:	4413      	add	r3, r2
 8045378:	3360      	adds	r3, #96	; 0x60
 804537a:	2204      	movs	r2, #4
 804537c:	701a      	strb	r2, [r3, #0]
 804537e:	e021      	b.n	80453c4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8045380:	687a      	ldr	r2, [r7, #4]
 8045382:	697b      	ldr	r3, [r7, #20]
 8045384:	212c      	movs	r1, #44	; 0x2c
 8045386:	fb01 f303 	mul.w	r3, r1, r3
 804538a:	4413      	add	r3, r2
 804538c:	3360      	adds	r3, #96	; 0x60
 804538e:	2202      	movs	r2, #2
 8045390:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8045392:	697b      	ldr	r3, [r7, #20]
 8045394:	015a      	lsls	r2, r3, #5
 8045396:	69bb      	ldr	r3, [r7, #24]
 8045398:	4413      	add	r3, r2
 804539a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804539e:	681b      	ldr	r3, [r3, #0]
 80453a0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80453a2:	693b      	ldr	r3, [r7, #16]
 80453a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80453a8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80453aa:	693b      	ldr	r3, [r7, #16]
 80453ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80453b0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80453b2:	697b      	ldr	r3, [r7, #20]
 80453b4:	015a      	lsls	r2, r3, #5
 80453b6:	69bb      	ldr	r3, [r7, #24]
 80453b8:	4413      	add	r3, r2
 80453ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80453be:	461a      	mov	r2, r3
 80453c0:	693b      	ldr	r3, [r7, #16]
 80453c2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80453c4:	697b      	ldr	r3, [r7, #20]
 80453c6:	015a      	lsls	r2, r3, #5
 80453c8:	69bb      	ldr	r3, [r7, #24]
 80453ca:	4413      	add	r3, r2
 80453cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80453d0:	461a      	mov	r2, r3
 80453d2:	2302      	movs	r3, #2
 80453d4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80453d6:	697b      	ldr	r3, [r7, #20]
 80453d8:	b2d9      	uxtb	r1, r3
 80453da:	687a      	ldr	r2, [r7, #4]
 80453dc:	697b      	ldr	r3, [r7, #20]
 80453de:	202c      	movs	r0, #44	; 0x2c
 80453e0:	fb00 f303 	mul.w	r3, r0, r3
 80453e4:	4413      	add	r3, r2
 80453e6:	3360      	adds	r3, #96	; 0x60
 80453e8:	781b      	ldrb	r3, [r3, #0]
 80453ea:	461a      	mov	r2, r3
 80453ec:	6878      	ldr	r0, [r7, #4]
 80453ee:	f006 fd2b 	bl	804be48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80453f2:	bf00      	nop
 80453f4:	3720      	adds	r7, #32
 80453f6:	46bd      	mov	sp, r7
 80453f8:	bd80      	pop	{r7, pc}

080453fa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80453fa:	b580      	push	{r7, lr}
 80453fc:	b08a      	sub	sp, #40	; 0x28
 80453fe:	af00      	add	r7, sp, #0
 8045400:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8045402:	687b      	ldr	r3, [r7, #4]
 8045404:	681b      	ldr	r3, [r3, #0]
 8045406:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8045408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804540a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 804540c:	687b      	ldr	r3, [r7, #4]
 804540e:	681b      	ldr	r3, [r3, #0]
 8045410:	6a1b      	ldr	r3, [r3, #32]
 8045412:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8045414:	69fb      	ldr	r3, [r7, #28]
 8045416:	f003 030f 	and.w	r3, r3, #15
 804541a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 804541c:	69fb      	ldr	r3, [r7, #28]
 804541e:	0c5b      	lsrs	r3, r3, #17
 8045420:	f003 030f 	and.w	r3, r3, #15
 8045424:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8045426:	69fb      	ldr	r3, [r7, #28]
 8045428:	091b      	lsrs	r3, r3, #4
 804542a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 804542e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8045430:	697b      	ldr	r3, [r7, #20]
 8045432:	2b02      	cmp	r3, #2
 8045434:	d004      	beq.n	8045440 <HCD_RXQLVL_IRQHandler+0x46>
 8045436:	697b      	ldr	r3, [r7, #20]
 8045438:	2b05      	cmp	r3, #5
 804543a:	f000 80a9 	beq.w	8045590 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 804543e:	e0aa      	b.n	8045596 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8045440:	693b      	ldr	r3, [r7, #16]
 8045442:	2b00      	cmp	r3, #0
 8045444:	f000 80a6 	beq.w	8045594 <HCD_RXQLVL_IRQHandler+0x19a>
 8045448:	687a      	ldr	r2, [r7, #4]
 804544a:	69bb      	ldr	r3, [r7, #24]
 804544c:	212c      	movs	r1, #44	; 0x2c
 804544e:	fb01 f303 	mul.w	r3, r1, r3
 8045452:	4413      	add	r3, r2
 8045454:	3344      	adds	r3, #68	; 0x44
 8045456:	681b      	ldr	r3, [r3, #0]
 8045458:	2b00      	cmp	r3, #0
 804545a:	f000 809b 	beq.w	8045594 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 804545e:	687a      	ldr	r2, [r7, #4]
 8045460:	69bb      	ldr	r3, [r7, #24]
 8045462:	212c      	movs	r1, #44	; 0x2c
 8045464:	fb01 f303 	mul.w	r3, r1, r3
 8045468:	4413      	add	r3, r2
 804546a:	3350      	adds	r3, #80	; 0x50
 804546c:	681a      	ldr	r2, [r3, #0]
 804546e:	693b      	ldr	r3, [r7, #16]
 8045470:	441a      	add	r2, r3
 8045472:	6879      	ldr	r1, [r7, #4]
 8045474:	69bb      	ldr	r3, [r7, #24]
 8045476:	202c      	movs	r0, #44	; 0x2c
 8045478:	fb00 f303 	mul.w	r3, r0, r3
 804547c:	440b      	add	r3, r1
 804547e:	334c      	adds	r3, #76	; 0x4c
 8045480:	681b      	ldr	r3, [r3, #0]
 8045482:	429a      	cmp	r2, r3
 8045484:	d87a      	bhi.n	804557c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8045486:	687b      	ldr	r3, [r7, #4]
 8045488:	6818      	ldr	r0, [r3, #0]
 804548a:	687a      	ldr	r2, [r7, #4]
 804548c:	69bb      	ldr	r3, [r7, #24]
 804548e:	212c      	movs	r1, #44	; 0x2c
 8045490:	fb01 f303 	mul.w	r3, r1, r3
 8045494:	4413      	add	r3, r2
 8045496:	3344      	adds	r3, #68	; 0x44
 8045498:	681b      	ldr	r3, [r3, #0]
 804549a:	693a      	ldr	r2, [r7, #16]
 804549c:	b292      	uxth	r2, r2
 804549e:	4619      	mov	r1, r3
 80454a0:	f003 fd8a 	bl	8048fb8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80454a4:	687a      	ldr	r2, [r7, #4]
 80454a6:	69bb      	ldr	r3, [r7, #24]
 80454a8:	212c      	movs	r1, #44	; 0x2c
 80454aa:	fb01 f303 	mul.w	r3, r1, r3
 80454ae:	4413      	add	r3, r2
 80454b0:	3344      	adds	r3, #68	; 0x44
 80454b2:	681a      	ldr	r2, [r3, #0]
 80454b4:	693b      	ldr	r3, [r7, #16]
 80454b6:	441a      	add	r2, r3
 80454b8:	6879      	ldr	r1, [r7, #4]
 80454ba:	69bb      	ldr	r3, [r7, #24]
 80454bc:	202c      	movs	r0, #44	; 0x2c
 80454be:	fb00 f303 	mul.w	r3, r0, r3
 80454c2:	440b      	add	r3, r1
 80454c4:	3344      	adds	r3, #68	; 0x44
 80454c6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80454c8:	687a      	ldr	r2, [r7, #4]
 80454ca:	69bb      	ldr	r3, [r7, #24]
 80454cc:	212c      	movs	r1, #44	; 0x2c
 80454ce:	fb01 f303 	mul.w	r3, r1, r3
 80454d2:	4413      	add	r3, r2
 80454d4:	3350      	adds	r3, #80	; 0x50
 80454d6:	681a      	ldr	r2, [r3, #0]
 80454d8:	693b      	ldr	r3, [r7, #16]
 80454da:	441a      	add	r2, r3
 80454dc:	6879      	ldr	r1, [r7, #4]
 80454de:	69bb      	ldr	r3, [r7, #24]
 80454e0:	202c      	movs	r0, #44	; 0x2c
 80454e2:	fb00 f303 	mul.w	r3, r0, r3
 80454e6:	440b      	add	r3, r1
 80454e8:	3350      	adds	r3, #80	; 0x50
 80454ea:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80454ec:	69bb      	ldr	r3, [r7, #24]
 80454ee:	015a      	lsls	r2, r3, #5
 80454f0:	6a3b      	ldr	r3, [r7, #32]
 80454f2:	4413      	add	r3, r2
 80454f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80454f8:	691b      	ldr	r3, [r3, #16]
 80454fa:	0cdb      	lsrs	r3, r3, #19
 80454fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8045500:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8045502:	687a      	ldr	r2, [r7, #4]
 8045504:	69bb      	ldr	r3, [r7, #24]
 8045506:	212c      	movs	r1, #44	; 0x2c
 8045508:	fb01 f303 	mul.w	r3, r1, r3
 804550c:	4413      	add	r3, r2
 804550e:	3340      	adds	r3, #64	; 0x40
 8045510:	881b      	ldrh	r3, [r3, #0]
 8045512:	461a      	mov	r2, r3
 8045514:	693b      	ldr	r3, [r7, #16]
 8045516:	4293      	cmp	r3, r2
 8045518:	d13c      	bne.n	8045594 <HCD_RXQLVL_IRQHandler+0x19a>
 804551a:	68fb      	ldr	r3, [r7, #12]
 804551c:	2b00      	cmp	r3, #0
 804551e:	d039      	beq.n	8045594 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8045520:	69bb      	ldr	r3, [r7, #24]
 8045522:	015a      	lsls	r2, r3, #5
 8045524:	6a3b      	ldr	r3, [r7, #32]
 8045526:	4413      	add	r3, r2
 8045528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804552c:	681b      	ldr	r3, [r3, #0]
 804552e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8045530:	68bb      	ldr	r3, [r7, #8]
 8045532:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8045536:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8045538:	68bb      	ldr	r3, [r7, #8]
 804553a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804553e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8045540:	69bb      	ldr	r3, [r7, #24]
 8045542:	015a      	lsls	r2, r3, #5
 8045544:	6a3b      	ldr	r3, [r7, #32]
 8045546:	4413      	add	r3, r2
 8045548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804554c:	461a      	mov	r2, r3
 804554e:	68bb      	ldr	r3, [r7, #8]
 8045550:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8045552:	687a      	ldr	r2, [r7, #4]
 8045554:	69bb      	ldr	r3, [r7, #24]
 8045556:	212c      	movs	r1, #44	; 0x2c
 8045558:	fb01 f303 	mul.w	r3, r1, r3
 804555c:	4413      	add	r3, r2
 804555e:	3354      	adds	r3, #84	; 0x54
 8045560:	781b      	ldrb	r3, [r3, #0]
 8045562:	f083 0301 	eor.w	r3, r3, #1
 8045566:	b2d8      	uxtb	r0, r3
 8045568:	687a      	ldr	r2, [r7, #4]
 804556a:	69bb      	ldr	r3, [r7, #24]
 804556c:	212c      	movs	r1, #44	; 0x2c
 804556e:	fb01 f303 	mul.w	r3, r1, r3
 8045572:	4413      	add	r3, r2
 8045574:	3354      	adds	r3, #84	; 0x54
 8045576:	4602      	mov	r2, r0
 8045578:	701a      	strb	r2, [r3, #0]
      break;
 804557a:	e00b      	b.n	8045594 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 804557c:	687a      	ldr	r2, [r7, #4]
 804557e:	69bb      	ldr	r3, [r7, #24]
 8045580:	212c      	movs	r1, #44	; 0x2c
 8045582:	fb01 f303 	mul.w	r3, r1, r3
 8045586:	4413      	add	r3, r2
 8045588:	3360      	adds	r3, #96	; 0x60
 804558a:	2204      	movs	r2, #4
 804558c:	701a      	strb	r2, [r3, #0]
      break;
 804558e:	e001      	b.n	8045594 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8045590:	bf00      	nop
 8045592:	e000      	b.n	8045596 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8045594:	bf00      	nop
  }
}
 8045596:	bf00      	nop
 8045598:	3728      	adds	r7, #40	; 0x28
 804559a:	46bd      	mov	sp, r7
 804559c:	bd80      	pop	{r7, pc}

0804559e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 804559e:	b580      	push	{r7, lr}
 80455a0:	b086      	sub	sp, #24
 80455a2:	af00      	add	r7, sp, #0
 80455a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80455a6:	687b      	ldr	r3, [r7, #4]
 80455a8:	681b      	ldr	r3, [r3, #0]
 80455aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80455ac:	697b      	ldr	r3, [r7, #20]
 80455ae:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80455b0:	693b      	ldr	r3, [r7, #16]
 80455b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80455b6:	681b      	ldr	r3, [r3, #0]
 80455b8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80455ba:	693b      	ldr	r3, [r7, #16]
 80455bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80455c0:	681b      	ldr	r3, [r3, #0]
 80455c2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80455c4:	68bb      	ldr	r3, [r7, #8]
 80455c6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80455ca:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80455cc:	68fb      	ldr	r3, [r7, #12]
 80455ce:	f003 0302 	and.w	r3, r3, #2
 80455d2:	2b02      	cmp	r3, #2
 80455d4:	d10b      	bne.n	80455ee <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80455d6:	68fb      	ldr	r3, [r7, #12]
 80455d8:	f003 0301 	and.w	r3, r3, #1
 80455dc:	2b01      	cmp	r3, #1
 80455de:	d102      	bne.n	80455e6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80455e0:	6878      	ldr	r0, [r7, #4]
 80455e2:	f006 fc15 	bl	804be10 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80455e6:	68bb      	ldr	r3, [r7, #8]
 80455e8:	f043 0302 	orr.w	r3, r3, #2
 80455ec:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80455ee:	68fb      	ldr	r3, [r7, #12]
 80455f0:	f003 0308 	and.w	r3, r3, #8
 80455f4:	2b08      	cmp	r3, #8
 80455f6:	d132      	bne.n	804565e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80455f8:	68bb      	ldr	r3, [r7, #8]
 80455fa:	f043 0308 	orr.w	r3, r3, #8
 80455fe:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8045600:	68fb      	ldr	r3, [r7, #12]
 8045602:	f003 0304 	and.w	r3, r3, #4
 8045606:	2b04      	cmp	r3, #4
 8045608:	d126      	bne.n	8045658 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 804560a:	687b      	ldr	r3, [r7, #4]
 804560c:	699b      	ldr	r3, [r3, #24]
 804560e:	2b02      	cmp	r3, #2
 8045610:	d113      	bne.n	804563a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8045612:	68fb      	ldr	r3, [r7, #12]
 8045614:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8045618:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 804561c:	d106      	bne.n	804562c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 804561e:	687b      	ldr	r3, [r7, #4]
 8045620:	681b      	ldr	r3, [r3, #0]
 8045622:	2102      	movs	r1, #2
 8045624:	4618      	mov	r0, r3
 8045626:	f003 fe35 	bl	8049294 <USB_InitFSLSPClkSel>
 804562a:	e011      	b.n	8045650 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 804562c:	687b      	ldr	r3, [r7, #4]
 804562e:	681b      	ldr	r3, [r3, #0]
 8045630:	2101      	movs	r1, #1
 8045632:	4618      	mov	r0, r3
 8045634:	f003 fe2e 	bl	8049294 <USB_InitFSLSPClkSel>
 8045638:	e00a      	b.n	8045650 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 804563a:	687b      	ldr	r3, [r7, #4]
 804563c:	68db      	ldr	r3, [r3, #12]
 804563e:	2b01      	cmp	r3, #1
 8045640:	d106      	bne.n	8045650 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8045642:	693b      	ldr	r3, [r7, #16]
 8045644:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8045648:	461a      	mov	r2, r3
 804564a:	f64e 2360 	movw	r3, #60000	; 0xea60
 804564e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8045650:	6878      	ldr	r0, [r7, #4]
 8045652:	f006 fc07 	bl	804be64 <HAL_HCD_PortEnabled_Callback>
 8045656:	e002      	b.n	804565e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8045658:	6878      	ldr	r0, [r7, #4]
 804565a:	f006 fc11 	bl	804be80 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 804565e:	68fb      	ldr	r3, [r7, #12]
 8045660:	f003 0320 	and.w	r3, r3, #32
 8045664:	2b20      	cmp	r3, #32
 8045666:	d103      	bne.n	8045670 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8045668:	68bb      	ldr	r3, [r7, #8]
 804566a:	f043 0320 	orr.w	r3, r3, #32
 804566e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8045670:	693b      	ldr	r3, [r7, #16]
 8045672:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8045676:	461a      	mov	r2, r3
 8045678:	68bb      	ldr	r3, [r7, #8]
 804567a:	6013      	str	r3, [r2, #0]
}
 804567c:	bf00      	nop
 804567e:	3718      	adds	r7, #24
 8045680:	46bd      	mov	sp, r7
 8045682:	bd80      	pop	{r7, pc}

08045684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8045684:	b580      	push	{r7, lr}
 8045686:	b084      	sub	sp, #16
 8045688:	af00      	add	r7, sp, #0
 804568a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 804568c:	687b      	ldr	r3, [r7, #4]
 804568e:	2b00      	cmp	r3, #0
 8045690:	d101      	bne.n	8045696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8045692:	2301      	movs	r3, #1
 8045694:	e12b      	b.n	80458ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8045696:	687b      	ldr	r3, [r7, #4]
 8045698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804569c:	b2db      	uxtb	r3, r3
 804569e:	2b00      	cmp	r3, #0
 80456a0:	d106      	bne.n	80456b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80456a2:	687b      	ldr	r3, [r7, #4]
 80456a4:	2200      	movs	r2, #0
 80456a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80456aa:	6878      	ldr	r0, [r7, #4]
 80456ac:	f7fb fc24 	bl	8040ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80456b0:	687b      	ldr	r3, [r7, #4]
 80456b2:	2224      	movs	r2, #36	; 0x24
 80456b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80456b8:	687b      	ldr	r3, [r7, #4]
 80456ba:	681b      	ldr	r3, [r3, #0]
 80456bc:	681a      	ldr	r2, [r3, #0]
 80456be:	687b      	ldr	r3, [r7, #4]
 80456c0:	681b      	ldr	r3, [r3, #0]
 80456c2:	f022 0201 	bic.w	r2, r2, #1
 80456c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80456c8:	687b      	ldr	r3, [r7, #4]
 80456ca:	681b      	ldr	r3, [r3, #0]
 80456cc:	681a      	ldr	r2, [r3, #0]
 80456ce:	687b      	ldr	r3, [r7, #4]
 80456d0:	681b      	ldr	r3, [r3, #0]
 80456d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80456d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80456d8:	687b      	ldr	r3, [r7, #4]
 80456da:	681b      	ldr	r3, [r3, #0]
 80456dc:	681a      	ldr	r2, [r3, #0]
 80456de:	687b      	ldr	r3, [r7, #4]
 80456e0:	681b      	ldr	r3, [r3, #0]
 80456e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80456e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80456e8:	f001 fa0c 	bl	8046b04 <HAL_RCC_GetPCLK1Freq>
 80456ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80456ee:	687b      	ldr	r3, [r7, #4]
 80456f0:	685b      	ldr	r3, [r3, #4]
 80456f2:	4a81      	ldr	r2, [pc, #516]	; (80458f8 <HAL_I2C_Init+0x274>)
 80456f4:	4293      	cmp	r3, r2
 80456f6:	d807      	bhi.n	8045708 <HAL_I2C_Init+0x84>
 80456f8:	68fb      	ldr	r3, [r7, #12]
 80456fa:	4a80      	ldr	r2, [pc, #512]	; (80458fc <HAL_I2C_Init+0x278>)
 80456fc:	4293      	cmp	r3, r2
 80456fe:	bf94      	ite	ls
 8045700:	2301      	movls	r3, #1
 8045702:	2300      	movhi	r3, #0
 8045704:	b2db      	uxtb	r3, r3
 8045706:	e006      	b.n	8045716 <HAL_I2C_Init+0x92>
 8045708:	68fb      	ldr	r3, [r7, #12]
 804570a:	4a7d      	ldr	r2, [pc, #500]	; (8045900 <HAL_I2C_Init+0x27c>)
 804570c:	4293      	cmp	r3, r2
 804570e:	bf94      	ite	ls
 8045710:	2301      	movls	r3, #1
 8045712:	2300      	movhi	r3, #0
 8045714:	b2db      	uxtb	r3, r3
 8045716:	2b00      	cmp	r3, #0
 8045718:	d001      	beq.n	804571e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 804571a:	2301      	movs	r3, #1
 804571c:	e0e7      	b.n	80458ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 804571e:	68fb      	ldr	r3, [r7, #12]
 8045720:	4a78      	ldr	r2, [pc, #480]	; (8045904 <HAL_I2C_Init+0x280>)
 8045722:	fba2 2303 	umull	r2, r3, r2, r3
 8045726:	0c9b      	lsrs	r3, r3, #18
 8045728:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 804572a:	687b      	ldr	r3, [r7, #4]
 804572c:	681b      	ldr	r3, [r3, #0]
 804572e:	685b      	ldr	r3, [r3, #4]
 8045730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8045734:	687b      	ldr	r3, [r7, #4]
 8045736:	681b      	ldr	r3, [r3, #0]
 8045738:	68ba      	ldr	r2, [r7, #8]
 804573a:	430a      	orrs	r2, r1
 804573c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 804573e:	687b      	ldr	r3, [r7, #4]
 8045740:	681b      	ldr	r3, [r3, #0]
 8045742:	6a1b      	ldr	r3, [r3, #32]
 8045744:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8045748:	687b      	ldr	r3, [r7, #4]
 804574a:	685b      	ldr	r3, [r3, #4]
 804574c:	4a6a      	ldr	r2, [pc, #424]	; (80458f8 <HAL_I2C_Init+0x274>)
 804574e:	4293      	cmp	r3, r2
 8045750:	d802      	bhi.n	8045758 <HAL_I2C_Init+0xd4>
 8045752:	68bb      	ldr	r3, [r7, #8]
 8045754:	3301      	adds	r3, #1
 8045756:	e009      	b.n	804576c <HAL_I2C_Init+0xe8>
 8045758:	68bb      	ldr	r3, [r7, #8]
 804575a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 804575e:	fb02 f303 	mul.w	r3, r2, r3
 8045762:	4a69      	ldr	r2, [pc, #420]	; (8045908 <HAL_I2C_Init+0x284>)
 8045764:	fba2 2303 	umull	r2, r3, r2, r3
 8045768:	099b      	lsrs	r3, r3, #6
 804576a:	3301      	adds	r3, #1
 804576c:	687a      	ldr	r2, [r7, #4]
 804576e:	6812      	ldr	r2, [r2, #0]
 8045770:	430b      	orrs	r3, r1
 8045772:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8045774:	687b      	ldr	r3, [r7, #4]
 8045776:	681b      	ldr	r3, [r3, #0]
 8045778:	69db      	ldr	r3, [r3, #28]
 804577a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 804577e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8045782:	687b      	ldr	r3, [r7, #4]
 8045784:	685b      	ldr	r3, [r3, #4]
 8045786:	495c      	ldr	r1, [pc, #368]	; (80458f8 <HAL_I2C_Init+0x274>)
 8045788:	428b      	cmp	r3, r1
 804578a:	d819      	bhi.n	80457c0 <HAL_I2C_Init+0x13c>
 804578c:	68fb      	ldr	r3, [r7, #12]
 804578e:	1e59      	subs	r1, r3, #1
 8045790:	687b      	ldr	r3, [r7, #4]
 8045792:	685b      	ldr	r3, [r3, #4]
 8045794:	005b      	lsls	r3, r3, #1
 8045796:	fbb1 f3f3 	udiv	r3, r1, r3
 804579a:	1c59      	adds	r1, r3, #1
 804579c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80457a0:	400b      	ands	r3, r1
 80457a2:	2b00      	cmp	r3, #0
 80457a4:	d00a      	beq.n	80457bc <HAL_I2C_Init+0x138>
 80457a6:	68fb      	ldr	r3, [r7, #12]
 80457a8:	1e59      	subs	r1, r3, #1
 80457aa:	687b      	ldr	r3, [r7, #4]
 80457ac:	685b      	ldr	r3, [r3, #4]
 80457ae:	005b      	lsls	r3, r3, #1
 80457b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80457b4:	3301      	adds	r3, #1
 80457b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80457ba:	e051      	b.n	8045860 <HAL_I2C_Init+0x1dc>
 80457bc:	2304      	movs	r3, #4
 80457be:	e04f      	b.n	8045860 <HAL_I2C_Init+0x1dc>
 80457c0:	687b      	ldr	r3, [r7, #4]
 80457c2:	689b      	ldr	r3, [r3, #8]
 80457c4:	2b00      	cmp	r3, #0
 80457c6:	d111      	bne.n	80457ec <HAL_I2C_Init+0x168>
 80457c8:	68fb      	ldr	r3, [r7, #12]
 80457ca:	1e58      	subs	r0, r3, #1
 80457cc:	687b      	ldr	r3, [r7, #4]
 80457ce:	6859      	ldr	r1, [r3, #4]
 80457d0:	460b      	mov	r3, r1
 80457d2:	005b      	lsls	r3, r3, #1
 80457d4:	440b      	add	r3, r1
 80457d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80457da:	3301      	adds	r3, #1
 80457dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80457e0:	2b00      	cmp	r3, #0
 80457e2:	bf0c      	ite	eq
 80457e4:	2301      	moveq	r3, #1
 80457e6:	2300      	movne	r3, #0
 80457e8:	b2db      	uxtb	r3, r3
 80457ea:	e012      	b.n	8045812 <HAL_I2C_Init+0x18e>
 80457ec:	68fb      	ldr	r3, [r7, #12]
 80457ee:	1e58      	subs	r0, r3, #1
 80457f0:	687b      	ldr	r3, [r7, #4]
 80457f2:	6859      	ldr	r1, [r3, #4]
 80457f4:	460b      	mov	r3, r1
 80457f6:	009b      	lsls	r3, r3, #2
 80457f8:	440b      	add	r3, r1
 80457fa:	0099      	lsls	r1, r3, #2
 80457fc:	440b      	add	r3, r1
 80457fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8045802:	3301      	adds	r3, #1
 8045804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045808:	2b00      	cmp	r3, #0
 804580a:	bf0c      	ite	eq
 804580c:	2301      	moveq	r3, #1
 804580e:	2300      	movne	r3, #0
 8045810:	b2db      	uxtb	r3, r3
 8045812:	2b00      	cmp	r3, #0
 8045814:	d001      	beq.n	804581a <HAL_I2C_Init+0x196>
 8045816:	2301      	movs	r3, #1
 8045818:	e022      	b.n	8045860 <HAL_I2C_Init+0x1dc>
 804581a:	687b      	ldr	r3, [r7, #4]
 804581c:	689b      	ldr	r3, [r3, #8]
 804581e:	2b00      	cmp	r3, #0
 8045820:	d10e      	bne.n	8045840 <HAL_I2C_Init+0x1bc>
 8045822:	68fb      	ldr	r3, [r7, #12]
 8045824:	1e58      	subs	r0, r3, #1
 8045826:	687b      	ldr	r3, [r7, #4]
 8045828:	6859      	ldr	r1, [r3, #4]
 804582a:	460b      	mov	r3, r1
 804582c:	005b      	lsls	r3, r3, #1
 804582e:	440b      	add	r3, r1
 8045830:	fbb0 f3f3 	udiv	r3, r0, r3
 8045834:	3301      	adds	r3, #1
 8045836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804583a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 804583e:	e00f      	b.n	8045860 <HAL_I2C_Init+0x1dc>
 8045840:	68fb      	ldr	r3, [r7, #12]
 8045842:	1e58      	subs	r0, r3, #1
 8045844:	687b      	ldr	r3, [r7, #4]
 8045846:	6859      	ldr	r1, [r3, #4]
 8045848:	460b      	mov	r3, r1
 804584a:	009b      	lsls	r3, r3, #2
 804584c:	440b      	add	r3, r1
 804584e:	0099      	lsls	r1, r3, #2
 8045850:	440b      	add	r3, r1
 8045852:	fbb0 f3f3 	udiv	r3, r0, r3
 8045856:	3301      	adds	r3, #1
 8045858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804585c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8045860:	6879      	ldr	r1, [r7, #4]
 8045862:	6809      	ldr	r1, [r1, #0]
 8045864:	4313      	orrs	r3, r2
 8045866:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8045868:	687b      	ldr	r3, [r7, #4]
 804586a:	681b      	ldr	r3, [r3, #0]
 804586c:	681b      	ldr	r3, [r3, #0]
 804586e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8045872:	687b      	ldr	r3, [r7, #4]
 8045874:	69da      	ldr	r2, [r3, #28]
 8045876:	687b      	ldr	r3, [r7, #4]
 8045878:	6a1b      	ldr	r3, [r3, #32]
 804587a:	431a      	orrs	r2, r3
 804587c:	687b      	ldr	r3, [r7, #4]
 804587e:	681b      	ldr	r3, [r3, #0]
 8045880:	430a      	orrs	r2, r1
 8045882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8045884:	687b      	ldr	r3, [r7, #4]
 8045886:	681b      	ldr	r3, [r3, #0]
 8045888:	689b      	ldr	r3, [r3, #8]
 804588a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 804588e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8045892:	687a      	ldr	r2, [r7, #4]
 8045894:	6911      	ldr	r1, [r2, #16]
 8045896:	687a      	ldr	r2, [r7, #4]
 8045898:	68d2      	ldr	r2, [r2, #12]
 804589a:	4311      	orrs	r1, r2
 804589c:	687a      	ldr	r2, [r7, #4]
 804589e:	6812      	ldr	r2, [r2, #0]
 80458a0:	430b      	orrs	r3, r1
 80458a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80458a4:	687b      	ldr	r3, [r7, #4]
 80458a6:	681b      	ldr	r3, [r3, #0]
 80458a8:	68db      	ldr	r3, [r3, #12]
 80458aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80458ae:	687b      	ldr	r3, [r7, #4]
 80458b0:	695a      	ldr	r2, [r3, #20]
 80458b2:	687b      	ldr	r3, [r7, #4]
 80458b4:	699b      	ldr	r3, [r3, #24]
 80458b6:	431a      	orrs	r2, r3
 80458b8:	687b      	ldr	r3, [r7, #4]
 80458ba:	681b      	ldr	r3, [r3, #0]
 80458bc:	430a      	orrs	r2, r1
 80458be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80458c0:	687b      	ldr	r3, [r7, #4]
 80458c2:	681b      	ldr	r3, [r3, #0]
 80458c4:	681a      	ldr	r2, [r3, #0]
 80458c6:	687b      	ldr	r3, [r7, #4]
 80458c8:	681b      	ldr	r3, [r3, #0]
 80458ca:	f042 0201 	orr.w	r2, r2, #1
 80458ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80458d0:	687b      	ldr	r3, [r7, #4]
 80458d2:	2200      	movs	r2, #0
 80458d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80458d6:	687b      	ldr	r3, [r7, #4]
 80458d8:	2220      	movs	r2, #32
 80458da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80458de:	687b      	ldr	r3, [r7, #4]
 80458e0:	2200      	movs	r2, #0
 80458e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80458e4:	687b      	ldr	r3, [r7, #4]
 80458e6:	2200      	movs	r2, #0
 80458e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80458ec:	2300      	movs	r3, #0
}
 80458ee:	4618      	mov	r0, r3
 80458f0:	3710      	adds	r7, #16
 80458f2:	46bd      	mov	sp, r7
 80458f4:	bd80      	pop	{r7, pc}
 80458f6:	bf00      	nop
 80458f8:	000186a0 	.word	0x000186a0
 80458fc:	001e847f 	.word	0x001e847f
 8045900:	003d08ff 	.word	0x003d08ff
 8045904:	431bde83 	.word	0x431bde83
 8045908:	10624dd3 	.word	0x10624dd3

0804590c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 804590c:	b480      	push	{r7}
 804590e:	b083      	sub	sp, #12
 8045910:	af00      	add	r7, sp, #0
 8045912:	6078      	str	r0, [r7, #4]
 8045914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8045916:	687b      	ldr	r3, [r7, #4]
 8045918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804591c:	b2db      	uxtb	r3, r3
 804591e:	2b20      	cmp	r3, #32
 8045920:	d129      	bne.n	8045976 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8045922:	687b      	ldr	r3, [r7, #4]
 8045924:	2224      	movs	r2, #36	; 0x24
 8045926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 804592a:	687b      	ldr	r3, [r7, #4]
 804592c:	681b      	ldr	r3, [r3, #0]
 804592e:	681a      	ldr	r2, [r3, #0]
 8045930:	687b      	ldr	r3, [r7, #4]
 8045932:	681b      	ldr	r3, [r3, #0]
 8045934:	f022 0201 	bic.w	r2, r2, #1
 8045938:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 804593a:	687b      	ldr	r3, [r7, #4]
 804593c:	681b      	ldr	r3, [r3, #0]
 804593e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8045940:	687b      	ldr	r3, [r7, #4]
 8045942:	681b      	ldr	r3, [r3, #0]
 8045944:	f022 0210 	bic.w	r2, r2, #16
 8045948:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 804594a:	687b      	ldr	r3, [r7, #4]
 804594c:	681b      	ldr	r3, [r3, #0]
 804594e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8045950:	687b      	ldr	r3, [r7, #4]
 8045952:	681b      	ldr	r3, [r3, #0]
 8045954:	683a      	ldr	r2, [r7, #0]
 8045956:	430a      	orrs	r2, r1
 8045958:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 804595a:	687b      	ldr	r3, [r7, #4]
 804595c:	681b      	ldr	r3, [r3, #0]
 804595e:	681a      	ldr	r2, [r3, #0]
 8045960:	687b      	ldr	r3, [r7, #4]
 8045962:	681b      	ldr	r3, [r3, #0]
 8045964:	f042 0201 	orr.w	r2, r2, #1
 8045968:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 804596a:	687b      	ldr	r3, [r7, #4]
 804596c:	2220      	movs	r2, #32
 804596e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8045972:	2300      	movs	r3, #0
 8045974:	e000      	b.n	8045978 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8045976:	2302      	movs	r3, #2
  }
}
 8045978:	4618      	mov	r0, r3
 804597a:	370c      	adds	r7, #12
 804597c:	46bd      	mov	sp, r7
 804597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045982:	4770      	bx	lr

08045984 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8045984:	b480      	push	{r7}
 8045986:	b085      	sub	sp, #20
 8045988:	af00      	add	r7, sp, #0
 804598a:	6078      	str	r0, [r7, #4]
 804598c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 804598e:	2300      	movs	r3, #0
 8045990:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8045992:	687b      	ldr	r3, [r7, #4]
 8045994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045998:	b2db      	uxtb	r3, r3
 804599a:	2b20      	cmp	r3, #32
 804599c:	d12a      	bne.n	80459f4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 804599e:	687b      	ldr	r3, [r7, #4]
 80459a0:	2224      	movs	r2, #36	; 0x24
 80459a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80459a6:	687b      	ldr	r3, [r7, #4]
 80459a8:	681b      	ldr	r3, [r3, #0]
 80459aa:	681a      	ldr	r2, [r3, #0]
 80459ac:	687b      	ldr	r3, [r7, #4]
 80459ae:	681b      	ldr	r3, [r3, #0]
 80459b0:	f022 0201 	bic.w	r2, r2, #1
 80459b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80459b6:	687b      	ldr	r3, [r7, #4]
 80459b8:	681b      	ldr	r3, [r3, #0]
 80459ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80459bc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80459be:	89fb      	ldrh	r3, [r7, #14]
 80459c0:	f023 030f 	bic.w	r3, r3, #15
 80459c4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80459c6:	683b      	ldr	r3, [r7, #0]
 80459c8:	b29a      	uxth	r2, r3
 80459ca:	89fb      	ldrh	r3, [r7, #14]
 80459cc:	4313      	orrs	r3, r2
 80459ce:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80459d0:	687b      	ldr	r3, [r7, #4]
 80459d2:	681b      	ldr	r3, [r3, #0]
 80459d4:	89fa      	ldrh	r2, [r7, #14]
 80459d6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80459d8:	687b      	ldr	r3, [r7, #4]
 80459da:	681b      	ldr	r3, [r3, #0]
 80459dc:	681a      	ldr	r2, [r3, #0]
 80459de:	687b      	ldr	r3, [r7, #4]
 80459e0:	681b      	ldr	r3, [r3, #0]
 80459e2:	f042 0201 	orr.w	r2, r2, #1
 80459e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80459e8:	687b      	ldr	r3, [r7, #4]
 80459ea:	2220      	movs	r2, #32
 80459ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80459f0:	2300      	movs	r3, #0
 80459f2:	e000      	b.n	80459f6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80459f4:	2302      	movs	r3, #2
  }
}
 80459f6:	4618      	mov	r0, r3
 80459f8:	3714      	adds	r7, #20
 80459fa:	46bd      	mov	sp, r7
 80459fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045a00:	4770      	bx	lr
	...

08045a04 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8045a04:	b580      	push	{r7, lr}
 8045a06:	b084      	sub	sp, #16
 8045a08:	af00      	add	r7, sp, #0
 8045a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8045a0c:	687b      	ldr	r3, [r7, #4]
 8045a0e:	2b00      	cmp	r3, #0
 8045a10:	d101      	bne.n	8045a16 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8045a12:	2301      	movs	r3, #1
 8045a14:	e0bf      	b.n	8045b96 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8045a16:	687b      	ldr	r3, [r7, #4]
 8045a18:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8045a1c:	b2db      	uxtb	r3, r3
 8045a1e:	2b00      	cmp	r3, #0
 8045a20:	d106      	bne.n	8045a30 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8045a22:	687b      	ldr	r3, [r7, #4]
 8045a24:	2200      	movs	r2, #0
 8045a26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8045a2a:	6878      	ldr	r0, [r7, #4]
 8045a2c:	f7fb face 	bl	8040fcc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8045a30:	687b      	ldr	r3, [r7, #4]
 8045a32:	2202      	movs	r2, #2
 8045a34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8045a38:	687b      	ldr	r3, [r7, #4]
 8045a3a:	681b      	ldr	r3, [r3, #0]
 8045a3c:	699a      	ldr	r2, [r3, #24]
 8045a3e:	687b      	ldr	r3, [r7, #4]
 8045a40:	681b      	ldr	r3, [r3, #0]
 8045a42:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8045a46:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8045a48:	687b      	ldr	r3, [r7, #4]
 8045a4a:	681b      	ldr	r3, [r3, #0]
 8045a4c:	6999      	ldr	r1, [r3, #24]
 8045a4e:	687b      	ldr	r3, [r7, #4]
 8045a50:	685a      	ldr	r2, [r3, #4]
 8045a52:	687b      	ldr	r3, [r7, #4]
 8045a54:	689b      	ldr	r3, [r3, #8]
 8045a56:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8045a58:	687b      	ldr	r3, [r7, #4]
 8045a5a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8045a5c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8045a5e:	687b      	ldr	r3, [r7, #4]
 8045a60:	691b      	ldr	r3, [r3, #16]
 8045a62:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8045a64:	687b      	ldr	r3, [r7, #4]
 8045a66:	681b      	ldr	r3, [r3, #0]
 8045a68:	430a      	orrs	r2, r1
 8045a6a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8045a6c:	687b      	ldr	r3, [r7, #4]
 8045a6e:	681b      	ldr	r3, [r3, #0]
 8045a70:	6899      	ldr	r1, [r3, #8]
 8045a72:	687b      	ldr	r3, [r7, #4]
 8045a74:	681a      	ldr	r2, [r3, #0]
 8045a76:	4b4a      	ldr	r3, [pc, #296]	; (8045ba0 <HAL_LTDC_Init+0x19c>)
 8045a78:	400b      	ands	r3, r1
 8045a7a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8045a7c:	687b      	ldr	r3, [r7, #4]
 8045a7e:	695b      	ldr	r3, [r3, #20]
 8045a80:	041b      	lsls	r3, r3, #16
 8045a82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8045a84:	687b      	ldr	r3, [r7, #4]
 8045a86:	681b      	ldr	r3, [r3, #0]
 8045a88:	6899      	ldr	r1, [r3, #8]
 8045a8a:	687b      	ldr	r3, [r7, #4]
 8045a8c:	699a      	ldr	r2, [r3, #24]
 8045a8e:	68fb      	ldr	r3, [r7, #12]
 8045a90:	431a      	orrs	r2, r3
 8045a92:	687b      	ldr	r3, [r7, #4]
 8045a94:	681b      	ldr	r3, [r3, #0]
 8045a96:	430a      	orrs	r2, r1
 8045a98:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8045a9a:	687b      	ldr	r3, [r7, #4]
 8045a9c:	681b      	ldr	r3, [r3, #0]
 8045a9e:	68d9      	ldr	r1, [r3, #12]
 8045aa0:	687b      	ldr	r3, [r7, #4]
 8045aa2:	681a      	ldr	r2, [r3, #0]
 8045aa4:	4b3e      	ldr	r3, [pc, #248]	; (8045ba0 <HAL_LTDC_Init+0x19c>)
 8045aa6:	400b      	ands	r3, r1
 8045aa8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8045aaa:	687b      	ldr	r3, [r7, #4]
 8045aac:	69db      	ldr	r3, [r3, #28]
 8045aae:	041b      	lsls	r3, r3, #16
 8045ab0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8045ab2:	687b      	ldr	r3, [r7, #4]
 8045ab4:	681b      	ldr	r3, [r3, #0]
 8045ab6:	68d9      	ldr	r1, [r3, #12]
 8045ab8:	687b      	ldr	r3, [r7, #4]
 8045aba:	6a1a      	ldr	r2, [r3, #32]
 8045abc:	68fb      	ldr	r3, [r7, #12]
 8045abe:	431a      	orrs	r2, r3
 8045ac0:	687b      	ldr	r3, [r7, #4]
 8045ac2:	681b      	ldr	r3, [r3, #0]
 8045ac4:	430a      	orrs	r2, r1
 8045ac6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8045ac8:	687b      	ldr	r3, [r7, #4]
 8045aca:	681b      	ldr	r3, [r3, #0]
 8045acc:	6919      	ldr	r1, [r3, #16]
 8045ace:	687b      	ldr	r3, [r7, #4]
 8045ad0:	681a      	ldr	r2, [r3, #0]
 8045ad2:	4b33      	ldr	r3, [pc, #204]	; (8045ba0 <HAL_LTDC_Init+0x19c>)
 8045ad4:	400b      	ands	r3, r1
 8045ad6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8045ad8:	687b      	ldr	r3, [r7, #4]
 8045ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045adc:	041b      	lsls	r3, r3, #16
 8045ade:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8045ae0:	687b      	ldr	r3, [r7, #4]
 8045ae2:	681b      	ldr	r3, [r3, #0]
 8045ae4:	6919      	ldr	r1, [r3, #16]
 8045ae6:	687b      	ldr	r3, [r7, #4]
 8045ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8045aea:	68fb      	ldr	r3, [r7, #12]
 8045aec:	431a      	orrs	r2, r3
 8045aee:	687b      	ldr	r3, [r7, #4]
 8045af0:	681b      	ldr	r3, [r3, #0]
 8045af2:	430a      	orrs	r2, r1
 8045af4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8045af6:	687b      	ldr	r3, [r7, #4]
 8045af8:	681b      	ldr	r3, [r3, #0]
 8045afa:	6959      	ldr	r1, [r3, #20]
 8045afc:	687b      	ldr	r3, [r7, #4]
 8045afe:	681a      	ldr	r2, [r3, #0]
 8045b00:	4b27      	ldr	r3, [pc, #156]	; (8045ba0 <HAL_LTDC_Init+0x19c>)
 8045b02:	400b      	ands	r3, r1
 8045b04:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8045b06:	687b      	ldr	r3, [r7, #4]
 8045b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045b0a:	041b      	lsls	r3, r3, #16
 8045b0c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8045b0e:	687b      	ldr	r3, [r7, #4]
 8045b10:	681b      	ldr	r3, [r3, #0]
 8045b12:	6959      	ldr	r1, [r3, #20]
 8045b14:	687b      	ldr	r3, [r7, #4]
 8045b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8045b18:	68fb      	ldr	r3, [r7, #12]
 8045b1a:	431a      	orrs	r2, r3
 8045b1c:	687b      	ldr	r3, [r7, #4]
 8045b1e:	681b      	ldr	r3, [r3, #0]
 8045b20:	430a      	orrs	r2, r1
 8045b22:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8045b24:	687b      	ldr	r3, [r7, #4]
 8045b26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8045b2a:	021b      	lsls	r3, r3, #8
 8045b2c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8045b2e:	687b      	ldr	r3, [r7, #4]
 8045b30:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8045b34:	041b      	lsls	r3, r3, #16
 8045b36:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8045b38:	687b      	ldr	r3, [r7, #4]
 8045b3a:	681b      	ldr	r3, [r3, #0]
 8045b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8045b3e:	687b      	ldr	r3, [r7, #4]
 8045b40:	681b      	ldr	r3, [r3, #0]
 8045b42:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8045b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8045b48:	687b      	ldr	r3, [r7, #4]
 8045b4a:	681b      	ldr	r3, [r3, #0]
 8045b4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8045b4e:	68ba      	ldr	r2, [r7, #8]
 8045b50:	68fb      	ldr	r3, [r7, #12]
 8045b52:	4313      	orrs	r3, r2
 8045b54:	687a      	ldr	r2, [r7, #4]
 8045b56:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8045b5a:	431a      	orrs	r2, r3
 8045b5c:	687b      	ldr	r3, [r7, #4]
 8045b5e:	681b      	ldr	r3, [r3, #0]
 8045b60:	430a      	orrs	r2, r1
 8045b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8045b64:	687b      	ldr	r3, [r7, #4]
 8045b66:	681b      	ldr	r3, [r3, #0]
 8045b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8045b6a:	687b      	ldr	r3, [r7, #4]
 8045b6c:	681b      	ldr	r3, [r3, #0]
 8045b6e:	f042 0206 	orr.w	r2, r2, #6
 8045b72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8045b74:	687b      	ldr	r3, [r7, #4]
 8045b76:	681b      	ldr	r3, [r3, #0]
 8045b78:	699a      	ldr	r2, [r3, #24]
 8045b7a:	687b      	ldr	r3, [r7, #4]
 8045b7c:	681b      	ldr	r3, [r3, #0]
 8045b7e:	f042 0201 	orr.w	r2, r2, #1
 8045b82:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8045b84:	687b      	ldr	r3, [r7, #4]
 8045b86:	2200      	movs	r2, #0
 8045b88:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8045b8c:	687b      	ldr	r3, [r7, #4]
 8045b8e:	2201      	movs	r2, #1
 8045b90:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8045b94:	2300      	movs	r3, #0
}
 8045b96:	4618      	mov	r0, r3
 8045b98:	3710      	adds	r7, #16
 8045b9a:	46bd      	mov	sp, r7
 8045b9c:	bd80      	pop	{r7, pc}
 8045b9e:	bf00      	nop
 8045ba0:	f000f800 	.word	0xf000f800

08045ba4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8045ba4:	b580      	push	{r7, lr}
 8045ba6:	b084      	sub	sp, #16
 8045ba8:	af00      	add	r7, sp, #0
 8045baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8045bac:	687b      	ldr	r3, [r7, #4]
 8045bae:	681b      	ldr	r3, [r3, #0]
 8045bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8045bb2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8045bb4:	687b      	ldr	r3, [r7, #4]
 8045bb6:	681b      	ldr	r3, [r3, #0]
 8045bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8045bba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8045bbc:	68fb      	ldr	r3, [r7, #12]
 8045bbe:	f003 0304 	and.w	r3, r3, #4
 8045bc2:	2b00      	cmp	r3, #0
 8045bc4:	d023      	beq.n	8045c0e <HAL_LTDC_IRQHandler+0x6a>
 8045bc6:	68bb      	ldr	r3, [r7, #8]
 8045bc8:	f003 0304 	and.w	r3, r3, #4
 8045bcc:	2b00      	cmp	r3, #0
 8045bce:	d01e      	beq.n	8045c0e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8045bd0:	687b      	ldr	r3, [r7, #4]
 8045bd2:	681b      	ldr	r3, [r3, #0]
 8045bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8045bd6:	687b      	ldr	r3, [r7, #4]
 8045bd8:	681b      	ldr	r3, [r3, #0]
 8045bda:	f022 0204 	bic.w	r2, r2, #4
 8045bde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8045be0:	687b      	ldr	r3, [r7, #4]
 8045be2:	681b      	ldr	r3, [r3, #0]
 8045be4:	2204      	movs	r2, #4
 8045be6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8045be8:	687b      	ldr	r3, [r7, #4]
 8045bea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8045bee:	f043 0201 	orr.w	r2, r3, #1
 8045bf2:	687b      	ldr	r3, [r7, #4]
 8045bf4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8045bf8:	687b      	ldr	r3, [r7, #4]
 8045bfa:	2204      	movs	r2, #4
 8045bfc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8045c00:	687b      	ldr	r3, [r7, #4]
 8045c02:	2200      	movs	r2, #0
 8045c04:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8045c08:	6878      	ldr	r0, [r7, #4]
 8045c0a:	f000 f86f 	bl	8045cec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8045c0e:	68fb      	ldr	r3, [r7, #12]
 8045c10:	f003 0302 	and.w	r3, r3, #2
 8045c14:	2b00      	cmp	r3, #0
 8045c16:	d023      	beq.n	8045c60 <HAL_LTDC_IRQHandler+0xbc>
 8045c18:	68bb      	ldr	r3, [r7, #8]
 8045c1a:	f003 0302 	and.w	r3, r3, #2
 8045c1e:	2b00      	cmp	r3, #0
 8045c20:	d01e      	beq.n	8045c60 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8045c22:	687b      	ldr	r3, [r7, #4]
 8045c24:	681b      	ldr	r3, [r3, #0]
 8045c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8045c28:	687b      	ldr	r3, [r7, #4]
 8045c2a:	681b      	ldr	r3, [r3, #0]
 8045c2c:	f022 0202 	bic.w	r2, r2, #2
 8045c30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8045c32:	687b      	ldr	r3, [r7, #4]
 8045c34:	681b      	ldr	r3, [r3, #0]
 8045c36:	2202      	movs	r2, #2
 8045c38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8045c3a:	687b      	ldr	r3, [r7, #4]
 8045c3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8045c40:	f043 0202 	orr.w	r2, r3, #2
 8045c44:	687b      	ldr	r3, [r7, #4]
 8045c46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8045c4a:	687b      	ldr	r3, [r7, #4]
 8045c4c:	2204      	movs	r2, #4
 8045c4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8045c52:	687b      	ldr	r3, [r7, #4]
 8045c54:	2200      	movs	r2, #0
 8045c56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8045c5a:	6878      	ldr	r0, [r7, #4]
 8045c5c:	f000 f846 	bl	8045cec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8045c60:	68fb      	ldr	r3, [r7, #12]
 8045c62:	f003 0301 	and.w	r3, r3, #1
 8045c66:	2b00      	cmp	r3, #0
 8045c68:	d01b      	beq.n	8045ca2 <HAL_LTDC_IRQHandler+0xfe>
 8045c6a:	68bb      	ldr	r3, [r7, #8]
 8045c6c:	f003 0301 	and.w	r3, r3, #1
 8045c70:	2b00      	cmp	r3, #0
 8045c72:	d016      	beq.n	8045ca2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8045c74:	687b      	ldr	r3, [r7, #4]
 8045c76:	681b      	ldr	r3, [r3, #0]
 8045c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8045c7a:	687b      	ldr	r3, [r7, #4]
 8045c7c:	681b      	ldr	r3, [r3, #0]
 8045c7e:	f022 0201 	bic.w	r2, r2, #1
 8045c82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8045c84:	687b      	ldr	r3, [r7, #4]
 8045c86:	681b      	ldr	r3, [r3, #0]
 8045c88:	2201      	movs	r2, #1
 8045c8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8045c8c:	687b      	ldr	r3, [r7, #4]
 8045c8e:	2201      	movs	r2, #1
 8045c90:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8045c94:	687b      	ldr	r3, [r7, #4]
 8045c96:	2200      	movs	r2, #0
 8045c98:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8045c9c:	6878      	ldr	r0, [r7, #4]
 8045c9e:	f000 f82f 	bl	8045d00 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8045ca2:	68fb      	ldr	r3, [r7, #12]
 8045ca4:	f003 0308 	and.w	r3, r3, #8
 8045ca8:	2b00      	cmp	r3, #0
 8045caa:	d01b      	beq.n	8045ce4 <HAL_LTDC_IRQHandler+0x140>
 8045cac:	68bb      	ldr	r3, [r7, #8]
 8045cae:	f003 0308 	and.w	r3, r3, #8
 8045cb2:	2b00      	cmp	r3, #0
 8045cb4:	d016      	beq.n	8045ce4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8045cb6:	687b      	ldr	r3, [r7, #4]
 8045cb8:	681b      	ldr	r3, [r3, #0]
 8045cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8045cbc:	687b      	ldr	r3, [r7, #4]
 8045cbe:	681b      	ldr	r3, [r3, #0]
 8045cc0:	f022 0208 	bic.w	r2, r2, #8
 8045cc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8045cc6:	687b      	ldr	r3, [r7, #4]
 8045cc8:	681b      	ldr	r3, [r3, #0]
 8045cca:	2208      	movs	r2, #8
 8045ccc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8045cce:	687b      	ldr	r3, [r7, #4]
 8045cd0:	2201      	movs	r2, #1
 8045cd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8045cd6:	687b      	ldr	r3, [r7, #4]
 8045cd8:	2200      	movs	r2, #0
 8045cda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8045cde:	6878      	ldr	r0, [r7, #4]
 8045ce0:	f000 f818 	bl	8045d14 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8045ce4:	bf00      	nop
 8045ce6:	3710      	adds	r7, #16
 8045ce8:	46bd      	mov	sp, r7
 8045cea:	bd80      	pop	{r7, pc}

08045cec <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8045cec:	b480      	push	{r7}
 8045cee:	b083      	sub	sp, #12
 8045cf0:	af00      	add	r7, sp, #0
 8045cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8045cf4:	bf00      	nop
 8045cf6:	370c      	adds	r7, #12
 8045cf8:	46bd      	mov	sp, r7
 8045cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045cfe:	4770      	bx	lr

08045d00 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8045d00:	b480      	push	{r7}
 8045d02:	b083      	sub	sp, #12
 8045d04:	af00      	add	r7, sp, #0
 8045d06:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8045d08:	bf00      	nop
 8045d0a:	370c      	adds	r7, #12
 8045d0c:	46bd      	mov	sp, r7
 8045d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045d12:	4770      	bx	lr

08045d14 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8045d14:	b480      	push	{r7}
 8045d16:	b083      	sub	sp, #12
 8045d18:	af00      	add	r7, sp, #0
 8045d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8045d1c:	bf00      	nop
 8045d1e:	370c      	adds	r7, #12
 8045d20:	46bd      	mov	sp, r7
 8045d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045d26:	4770      	bx	lr

08045d28 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8045d28:	b5b0      	push	{r4, r5, r7, lr}
 8045d2a:	b084      	sub	sp, #16
 8045d2c:	af00      	add	r7, sp, #0
 8045d2e:	60f8      	str	r0, [r7, #12]
 8045d30:	60b9      	str	r1, [r7, #8]
 8045d32:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8045d34:	68fb      	ldr	r3, [r7, #12]
 8045d36:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8045d3a:	2b01      	cmp	r3, #1
 8045d3c:	d101      	bne.n	8045d42 <HAL_LTDC_ConfigLayer+0x1a>
 8045d3e:	2302      	movs	r3, #2
 8045d40:	e02c      	b.n	8045d9c <HAL_LTDC_ConfigLayer+0x74>
 8045d42:	68fb      	ldr	r3, [r7, #12]
 8045d44:	2201      	movs	r2, #1
 8045d46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8045d4a:	68fb      	ldr	r3, [r7, #12]
 8045d4c:	2202      	movs	r2, #2
 8045d4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8045d52:	68fa      	ldr	r2, [r7, #12]
 8045d54:	687b      	ldr	r3, [r7, #4]
 8045d56:	2134      	movs	r1, #52	; 0x34
 8045d58:	fb01 f303 	mul.w	r3, r1, r3
 8045d5c:	4413      	add	r3, r2
 8045d5e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8045d62:	68bb      	ldr	r3, [r7, #8]
 8045d64:	4614      	mov	r4, r2
 8045d66:	461d      	mov	r5, r3
 8045d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8045d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8045d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8045d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8045d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8045d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8045d74:	682b      	ldr	r3, [r5, #0]
 8045d76:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8045d78:	687a      	ldr	r2, [r7, #4]
 8045d7a:	68b9      	ldr	r1, [r7, #8]
 8045d7c:	68f8      	ldr	r0, [r7, #12]
 8045d7e:	f000 f8b9 	bl	8045ef4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8045d82:	68fb      	ldr	r3, [r7, #12]
 8045d84:	681b      	ldr	r3, [r3, #0]
 8045d86:	2201      	movs	r2, #1
 8045d88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8045d8a:	68fb      	ldr	r3, [r7, #12]
 8045d8c:	2201      	movs	r2, #1
 8045d8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8045d92:	68fb      	ldr	r3, [r7, #12]
 8045d94:	2200      	movs	r2, #0
 8045d96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8045d9a:	2300      	movs	r3, #0
}
 8045d9c:	4618      	mov	r0, r3
 8045d9e:	3710      	adds	r7, #16
 8045da0:	46bd      	mov	sp, r7
 8045da2:	bdb0      	pop	{r4, r5, r7, pc}

08045da4 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8045da4:	b480      	push	{r7}
 8045da6:	b085      	sub	sp, #20
 8045da8:	af00      	add	r7, sp, #0
 8045daa:	60f8      	str	r0, [r7, #12]
 8045dac:	60b9      	str	r1, [r7, #8]
 8045dae:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8045db0:	68fb      	ldr	r3, [r7, #12]
 8045db2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8045db6:	2b01      	cmp	r3, #1
 8045db8:	d101      	bne.n	8045dbe <HAL_LTDC_ConfigColorKeying+0x1a>
 8045dba:	2302      	movs	r3, #2
 8045dbc:	e030      	b.n	8045e20 <HAL_LTDC_ConfigColorKeying+0x7c>
 8045dbe:	68fb      	ldr	r3, [r7, #12]
 8045dc0:	2201      	movs	r2, #1
 8045dc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8045dc6:	68fb      	ldr	r3, [r7, #12]
 8045dc8:	2202      	movs	r2, #2
 8045dca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8045dce:	68fb      	ldr	r3, [r7, #12]
 8045dd0:	681b      	ldr	r3, [r3, #0]
 8045dd2:	461a      	mov	r2, r3
 8045dd4:	687b      	ldr	r3, [r7, #4]
 8045dd6:	01db      	lsls	r3, r3, #7
 8045dd8:	4413      	add	r3, r2
 8045dda:	3384      	adds	r3, #132	; 0x84
 8045ddc:	68db      	ldr	r3, [r3, #12]
 8045dde:	68fa      	ldr	r2, [r7, #12]
 8045de0:	6812      	ldr	r2, [r2, #0]
 8045de2:	4611      	mov	r1, r2
 8045de4:	687a      	ldr	r2, [r7, #4]
 8045de6:	01d2      	lsls	r2, r2, #7
 8045de8:	440a      	add	r2, r1
 8045dea:	3284      	adds	r2, #132	; 0x84
 8045dec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8045df0:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8045df2:	68fb      	ldr	r3, [r7, #12]
 8045df4:	681b      	ldr	r3, [r3, #0]
 8045df6:	461a      	mov	r2, r3
 8045df8:	687b      	ldr	r3, [r7, #4]
 8045dfa:	01db      	lsls	r3, r3, #7
 8045dfc:	4413      	add	r3, r2
 8045dfe:	3384      	adds	r3, #132	; 0x84
 8045e00:	461a      	mov	r2, r3
 8045e02:	68bb      	ldr	r3, [r7, #8]
 8045e04:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8045e06:	68fb      	ldr	r3, [r7, #12]
 8045e08:	681b      	ldr	r3, [r3, #0]
 8045e0a:	2201      	movs	r2, #1
 8045e0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8045e0e:	68fb      	ldr	r3, [r7, #12]
 8045e10:	2201      	movs	r2, #1
 8045e12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8045e16:	68fb      	ldr	r3, [r7, #12]
 8045e18:	2200      	movs	r2, #0
 8045e1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8045e1e:	2300      	movs	r3, #0
}
 8045e20:	4618      	mov	r0, r3
 8045e22:	3714      	adds	r7, #20
 8045e24:	46bd      	mov	sp, r7
 8045e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045e2a:	4770      	bx	lr

08045e2c <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8045e2c:	b480      	push	{r7}
 8045e2e:	b083      	sub	sp, #12
 8045e30:	af00      	add	r7, sp, #0
 8045e32:	6078      	str	r0, [r7, #4]
 8045e34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8045e36:	687b      	ldr	r3, [r7, #4]
 8045e38:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8045e3c:	2b01      	cmp	r3, #1
 8045e3e:	d101      	bne.n	8045e44 <HAL_LTDC_EnableColorKeying+0x18>
 8045e40:	2302      	movs	r3, #2
 8045e42:	e026      	b.n	8045e92 <HAL_LTDC_EnableColorKeying+0x66>
 8045e44:	687b      	ldr	r3, [r7, #4]
 8045e46:	2201      	movs	r2, #1
 8045e48:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8045e4c:	687b      	ldr	r3, [r7, #4]
 8045e4e:	2202      	movs	r2, #2
 8045e50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8045e54:	687b      	ldr	r3, [r7, #4]
 8045e56:	681b      	ldr	r3, [r3, #0]
 8045e58:	461a      	mov	r2, r3
 8045e5a:	683b      	ldr	r3, [r7, #0]
 8045e5c:	01db      	lsls	r3, r3, #7
 8045e5e:	4413      	add	r3, r2
 8045e60:	3384      	adds	r3, #132	; 0x84
 8045e62:	681b      	ldr	r3, [r3, #0]
 8045e64:	687a      	ldr	r2, [r7, #4]
 8045e66:	6812      	ldr	r2, [r2, #0]
 8045e68:	4611      	mov	r1, r2
 8045e6a:	683a      	ldr	r2, [r7, #0]
 8045e6c:	01d2      	lsls	r2, r2, #7
 8045e6e:	440a      	add	r2, r1
 8045e70:	3284      	adds	r2, #132	; 0x84
 8045e72:	f043 0302 	orr.w	r3, r3, #2
 8045e76:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8045e78:	687b      	ldr	r3, [r7, #4]
 8045e7a:	681b      	ldr	r3, [r3, #0]
 8045e7c:	2201      	movs	r2, #1
 8045e7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8045e80:	687b      	ldr	r3, [r7, #4]
 8045e82:	2201      	movs	r2, #1
 8045e84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8045e88:	687b      	ldr	r3, [r7, #4]
 8045e8a:	2200      	movs	r2, #0
 8045e8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8045e90:	2300      	movs	r3, #0
}
 8045e92:	4618      	mov	r0, r3
 8045e94:	370c      	adds	r7, #12
 8045e96:	46bd      	mov	sp, r7
 8045e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045e9c:	4770      	bx	lr
	...

08045ea0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8045ea0:	b480      	push	{r7}
 8045ea2:	b083      	sub	sp, #12
 8045ea4:	af00      	add	r7, sp, #0
 8045ea6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8045ea8:	687b      	ldr	r3, [r7, #4]
 8045eaa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8045eae:	2b01      	cmp	r3, #1
 8045eb0:	d101      	bne.n	8045eb6 <HAL_LTDC_EnableDither+0x16>
 8045eb2:	2302      	movs	r3, #2
 8045eb4:	e016      	b.n	8045ee4 <HAL_LTDC_EnableDither+0x44>
 8045eb6:	687b      	ldr	r3, [r7, #4]
 8045eb8:	2201      	movs	r2, #1
 8045eba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8045ebe:	687b      	ldr	r3, [r7, #4]
 8045ec0:	2202      	movs	r2, #2
 8045ec2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8045ec6:	4b0a      	ldr	r3, [pc, #40]	; (8045ef0 <HAL_LTDC_EnableDither+0x50>)
 8045ec8:	699b      	ldr	r3, [r3, #24]
 8045eca:	4a09      	ldr	r2, [pc, #36]	; (8045ef0 <HAL_LTDC_EnableDither+0x50>)
 8045ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8045ed0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8045ed2:	687b      	ldr	r3, [r7, #4]
 8045ed4:	2201      	movs	r2, #1
 8045ed6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8045eda:	687b      	ldr	r3, [r7, #4]
 8045edc:	2200      	movs	r2, #0
 8045ede:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8045ee2:	2300      	movs	r3, #0
}
 8045ee4:	4618      	mov	r0, r3
 8045ee6:	370c      	adds	r7, #12
 8045ee8:	46bd      	mov	sp, r7
 8045eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045eee:	4770      	bx	lr
 8045ef0:	40016800 	.word	0x40016800

08045ef4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8045ef4:	b480      	push	{r7}
 8045ef6:	b089      	sub	sp, #36	; 0x24
 8045ef8:	af00      	add	r7, sp, #0
 8045efa:	60f8      	str	r0, [r7, #12]
 8045efc:	60b9      	str	r1, [r7, #8]
 8045efe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8045f00:	68bb      	ldr	r3, [r7, #8]
 8045f02:	685a      	ldr	r2, [r3, #4]
 8045f04:	68fb      	ldr	r3, [r7, #12]
 8045f06:	681b      	ldr	r3, [r3, #0]
 8045f08:	68db      	ldr	r3, [r3, #12]
 8045f0a:	0c1b      	lsrs	r3, r3, #16
 8045f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045f10:	4413      	add	r3, r2
 8045f12:	041b      	lsls	r3, r3, #16
 8045f14:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8045f16:	68fb      	ldr	r3, [r7, #12]
 8045f18:	681b      	ldr	r3, [r3, #0]
 8045f1a:	461a      	mov	r2, r3
 8045f1c:	687b      	ldr	r3, [r7, #4]
 8045f1e:	01db      	lsls	r3, r3, #7
 8045f20:	4413      	add	r3, r2
 8045f22:	3384      	adds	r3, #132	; 0x84
 8045f24:	685b      	ldr	r3, [r3, #4]
 8045f26:	68fa      	ldr	r2, [r7, #12]
 8045f28:	6812      	ldr	r2, [r2, #0]
 8045f2a:	4611      	mov	r1, r2
 8045f2c:	687a      	ldr	r2, [r7, #4]
 8045f2e:	01d2      	lsls	r2, r2, #7
 8045f30:	440a      	add	r2, r1
 8045f32:	3284      	adds	r2, #132	; 0x84
 8045f34:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8045f38:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8045f3a:	68bb      	ldr	r3, [r7, #8]
 8045f3c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8045f3e:	68fb      	ldr	r3, [r7, #12]
 8045f40:	681b      	ldr	r3, [r3, #0]
 8045f42:	68db      	ldr	r3, [r3, #12]
 8045f44:	0c1b      	lsrs	r3, r3, #16
 8045f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8045f4a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8045f4c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8045f4e:	68fb      	ldr	r3, [r7, #12]
 8045f50:	681b      	ldr	r3, [r3, #0]
 8045f52:	4619      	mov	r1, r3
 8045f54:	687b      	ldr	r3, [r7, #4]
 8045f56:	01db      	lsls	r3, r3, #7
 8045f58:	440b      	add	r3, r1
 8045f5a:	3384      	adds	r3, #132	; 0x84
 8045f5c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8045f5e:	69fb      	ldr	r3, [r7, #28]
 8045f60:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8045f62:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8045f64:	68bb      	ldr	r3, [r7, #8]
 8045f66:	68da      	ldr	r2, [r3, #12]
 8045f68:	68fb      	ldr	r3, [r7, #12]
 8045f6a:	681b      	ldr	r3, [r3, #0]
 8045f6c:	68db      	ldr	r3, [r3, #12]
 8045f6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8045f72:	4413      	add	r3, r2
 8045f74:	041b      	lsls	r3, r3, #16
 8045f76:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8045f78:	68fb      	ldr	r3, [r7, #12]
 8045f7a:	681b      	ldr	r3, [r3, #0]
 8045f7c:	461a      	mov	r2, r3
 8045f7e:	687b      	ldr	r3, [r7, #4]
 8045f80:	01db      	lsls	r3, r3, #7
 8045f82:	4413      	add	r3, r2
 8045f84:	3384      	adds	r3, #132	; 0x84
 8045f86:	689b      	ldr	r3, [r3, #8]
 8045f88:	68fa      	ldr	r2, [r7, #12]
 8045f8a:	6812      	ldr	r2, [r2, #0]
 8045f8c:	4611      	mov	r1, r2
 8045f8e:	687a      	ldr	r2, [r7, #4]
 8045f90:	01d2      	lsls	r2, r2, #7
 8045f92:	440a      	add	r2, r1
 8045f94:	3284      	adds	r2, #132	; 0x84
 8045f96:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8045f9a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8045f9c:	68bb      	ldr	r3, [r7, #8]
 8045f9e:	689a      	ldr	r2, [r3, #8]
 8045fa0:	68fb      	ldr	r3, [r7, #12]
 8045fa2:	681b      	ldr	r3, [r3, #0]
 8045fa4:	68db      	ldr	r3, [r3, #12]
 8045fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8045faa:	4413      	add	r3, r2
 8045fac:	1c5a      	adds	r2, r3, #1
 8045fae:	68fb      	ldr	r3, [r7, #12]
 8045fb0:	681b      	ldr	r3, [r3, #0]
 8045fb2:	4619      	mov	r1, r3
 8045fb4:	687b      	ldr	r3, [r7, #4]
 8045fb6:	01db      	lsls	r3, r3, #7
 8045fb8:	440b      	add	r3, r1
 8045fba:	3384      	adds	r3, #132	; 0x84
 8045fbc:	4619      	mov	r1, r3
 8045fbe:	69fb      	ldr	r3, [r7, #28]
 8045fc0:	4313      	orrs	r3, r2
 8045fc2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8045fc4:	68fb      	ldr	r3, [r7, #12]
 8045fc6:	681b      	ldr	r3, [r3, #0]
 8045fc8:	461a      	mov	r2, r3
 8045fca:	687b      	ldr	r3, [r7, #4]
 8045fcc:	01db      	lsls	r3, r3, #7
 8045fce:	4413      	add	r3, r2
 8045fd0:	3384      	adds	r3, #132	; 0x84
 8045fd2:	691b      	ldr	r3, [r3, #16]
 8045fd4:	68fa      	ldr	r2, [r7, #12]
 8045fd6:	6812      	ldr	r2, [r2, #0]
 8045fd8:	4611      	mov	r1, r2
 8045fda:	687a      	ldr	r2, [r7, #4]
 8045fdc:	01d2      	lsls	r2, r2, #7
 8045fde:	440a      	add	r2, r1
 8045fe0:	3284      	adds	r2, #132	; 0x84
 8045fe2:	f023 0307 	bic.w	r3, r3, #7
 8045fe6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8045fe8:	68fb      	ldr	r3, [r7, #12]
 8045fea:	681b      	ldr	r3, [r3, #0]
 8045fec:	461a      	mov	r2, r3
 8045fee:	687b      	ldr	r3, [r7, #4]
 8045ff0:	01db      	lsls	r3, r3, #7
 8045ff2:	4413      	add	r3, r2
 8045ff4:	3384      	adds	r3, #132	; 0x84
 8045ff6:	461a      	mov	r2, r3
 8045ff8:	68bb      	ldr	r3, [r7, #8]
 8045ffa:	691b      	ldr	r3, [r3, #16]
 8045ffc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8045ffe:	68bb      	ldr	r3, [r7, #8]
 8046000:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8046004:	021b      	lsls	r3, r3, #8
 8046006:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8046008:	68bb      	ldr	r3, [r7, #8]
 804600a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 804600e:	041b      	lsls	r3, r3, #16
 8046010:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8046012:	68bb      	ldr	r3, [r7, #8]
 8046014:	699b      	ldr	r3, [r3, #24]
 8046016:	061b      	lsls	r3, r3, #24
 8046018:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 804601a:	68fb      	ldr	r3, [r7, #12]
 804601c:	681b      	ldr	r3, [r3, #0]
 804601e:	461a      	mov	r2, r3
 8046020:	687b      	ldr	r3, [r7, #4]
 8046022:	01db      	lsls	r3, r3, #7
 8046024:	4413      	add	r3, r2
 8046026:	3384      	adds	r3, #132	; 0x84
 8046028:	699b      	ldr	r3, [r3, #24]
 804602a:	68fb      	ldr	r3, [r7, #12]
 804602c:	681b      	ldr	r3, [r3, #0]
 804602e:	461a      	mov	r2, r3
 8046030:	687b      	ldr	r3, [r7, #4]
 8046032:	01db      	lsls	r3, r3, #7
 8046034:	4413      	add	r3, r2
 8046036:	3384      	adds	r3, #132	; 0x84
 8046038:	461a      	mov	r2, r3
 804603a:	2300      	movs	r3, #0
 804603c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 804603e:	68bb      	ldr	r3, [r7, #8]
 8046040:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8046044:	461a      	mov	r2, r3
 8046046:	69fb      	ldr	r3, [r7, #28]
 8046048:	431a      	orrs	r2, r3
 804604a:	69bb      	ldr	r3, [r7, #24]
 804604c:	431a      	orrs	r2, r3
 804604e:	68fb      	ldr	r3, [r7, #12]
 8046050:	681b      	ldr	r3, [r3, #0]
 8046052:	4619      	mov	r1, r3
 8046054:	687b      	ldr	r3, [r7, #4]
 8046056:	01db      	lsls	r3, r3, #7
 8046058:	440b      	add	r3, r1
 804605a:	3384      	adds	r3, #132	; 0x84
 804605c:	4619      	mov	r1, r3
 804605e:	697b      	ldr	r3, [r7, #20]
 8046060:	4313      	orrs	r3, r2
 8046062:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8046064:	68fb      	ldr	r3, [r7, #12]
 8046066:	681b      	ldr	r3, [r3, #0]
 8046068:	461a      	mov	r2, r3
 804606a:	687b      	ldr	r3, [r7, #4]
 804606c:	01db      	lsls	r3, r3, #7
 804606e:	4413      	add	r3, r2
 8046070:	3384      	adds	r3, #132	; 0x84
 8046072:	695b      	ldr	r3, [r3, #20]
 8046074:	68fa      	ldr	r2, [r7, #12]
 8046076:	6812      	ldr	r2, [r2, #0]
 8046078:	4611      	mov	r1, r2
 804607a:	687a      	ldr	r2, [r7, #4]
 804607c:	01d2      	lsls	r2, r2, #7
 804607e:	440a      	add	r2, r1
 8046080:	3284      	adds	r2, #132	; 0x84
 8046082:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8046086:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8046088:	68fb      	ldr	r3, [r7, #12]
 804608a:	681b      	ldr	r3, [r3, #0]
 804608c:	461a      	mov	r2, r3
 804608e:	687b      	ldr	r3, [r7, #4]
 8046090:	01db      	lsls	r3, r3, #7
 8046092:	4413      	add	r3, r2
 8046094:	3384      	adds	r3, #132	; 0x84
 8046096:	461a      	mov	r2, r3
 8046098:	68bb      	ldr	r3, [r7, #8]
 804609a:	695b      	ldr	r3, [r3, #20]
 804609c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 804609e:	68fb      	ldr	r3, [r7, #12]
 80460a0:	681b      	ldr	r3, [r3, #0]
 80460a2:	461a      	mov	r2, r3
 80460a4:	687b      	ldr	r3, [r7, #4]
 80460a6:	01db      	lsls	r3, r3, #7
 80460a8:	4413      	add	r3, r2
 80460aa:	3384      	adds	r3, #132	; 0x84
 80460ac:	69db      	ldr	r3, [r3, #28]
 80460ae:	68fa      	ldr	r2, [r7, #12]
 80460b0:	6812      	ldr	r2, [r2, #0]
 80460b2:	4611      	mov	r1, r2
 80460b4:	687a      	ldr	r2, [r7, #4]
 80460b6:	01d2      	lsls	r2, r2, #7
 80460b8:	440a      	add	r2, r1
 80460ba:	3284      	adds	r2, #132	; 0x84
 80460bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80460c0:	f023 0307 	bic.w	r3, r3, #7
 80460c4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80460c6:	68bb      	ldr	r3, [r7, #8]
 80460c8:	69da      	ldr	r2, [r3, #28]
 80460ca:	68bb      	ldr	r3, [r7, #8]
 80460cc:	6a1b      	ldr	r3, [r3, #32]
 80460ce:	68f9      	ldr	r1, [r7, #12]
 80460d0:	6809      	ldr	r1, [r1, #0]
 80460d2:	4608      	mov	r0, r1
 80460d4:	6879      	ldr	r1, [r7, #4]
 80460d6:	01c9      	lsls	r1, r1, #7
 80460d8:	4401      	add	r1, r0
 80460da:	3184      	adds	r1, #132	; 0x84
 80460dc:	4313      	orrs	r3, r2
 80460de:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80460e0:	68fb      	ldr	r3, [r7, #12]
 80460e2:	681b      	ldr	r3, [r3, #0]
 80460e4:	461a      	mov	r2, r3
 80460e6:	687b      	ldr	r3, [r7, #4]
 80460e8:	01db      	lsls	r3, r3, #7
 80460ea:	4413      	add	r3, r2
 80460ec:	3384      	adds	r3, #132	; 0x84
 80460ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80460f0:	68fb      	ldr	r3, [r7, #12]
 80460f2:	681b      	ldr	r3, [r3, #0]
 80460f4:	461a      	mov	r2, r3
 80460f6:	687b      	ldr	r3, [r7, #4]
 80460f8:	01db      	lsls	r3, r3, #7
 80460fa:	4413      	add	r3, r2
 80460fc:	3384      	adds	r3, #132	; 0x84
 80460fe:	461a      	mov	r2, r3
 8046100:	2300      	movs	r3, #0
 8046102:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8046104:	68fb      	ldr	r3, [r7, #12]
 8046106:	681b      	ldr	r3, [r3, #0]
 8046108:	461a      	mov	r2, r3
 804610a:	687b      	ldr	r3, [r7, #4]
 804610c:	01db      	lsls	r3, r3, #7
 804610e:	4413      	add	r3, r2
 8046110:	3384      	adds	r3, #132	; 0x84
 8046112:	461a      	mov	r2, r3
 8046114:	68bb      	ldr	r3, [r7, #8]
 8046116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046118:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 804611a:	68bb      	ldr	r3, [r7, #8]
 804611c:	691b      	ldr	r3, [r3, #16]
 804611e:	2b00      	cmp	r3, #0
 8046120:	d102      	bne.n	8046128 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8046122:	2304      	movs	r3, #4
 8046124:	61fb      	str	r3, [r7, #28]
 8046126:	e01b      	b.n	8046160 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8046128:	68bb      	ldr	r3, [r7, #8]
 804612a:	691b      	ldr	r3, [r3, #16]
 804612c:	2b01      	cmp	r3, #1
 804612e:	d102      	bne.n	8046136 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8046130:	2303      	movs	r3, #3
 8046132:	61fb      	str	r3, [r7, #28]
 8046134:	e014      	b.n	8046160 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8046136:	68bb      	ldr	r3, [r7, #8]
 8046138:	691b      	ldr	r3, [r3, #16]
 804613a:	2b04      	cmp	r3, #4
 804613c:	d00b      	beq.n	8046156 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 804613e:	68bb      	ldr	r3, [r7, #8]
 8046140:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8046142:	2b02      	cmp	r3, #2
 8046144:	d007      	beq.n	8046156 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8046146:	68bb      	ldr	r3, [r7, #8]
 8046148:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 804614a:	2b03      	cmp	r3, #3
 804614c:	d003      	beq.n	8046156 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 804614e:	68bb      	ldr	r3, [r7, #8]
 8046150:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8046152:	2b07      	cmp	r3, #7
 8046154:	d102      	bne.n	804615c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8046156:	2302      	movs	r3, #2
 8046158:	61fb      	str	r3, [r7, #28]
 804615a:	e001      	b.n	8046160 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 804615c:	2301      	movs	r3, #1
 804615e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8046160:	68fb      	ldr	r3, [r7, #12]
 8046162:	681b      	ldr	r3, [r3, #0]
 8046164:	461a      	mov	r2, r3
 8046166:	687b      	ldr	r3, [r7, #4]
 8046168:	01db      	lsls	r3, r3, #7
 804616a:	4413      	add	r3, r2
 804616c:	3384      	adds	r3, #132	; 0x84
 804616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046170:	68fa      	ldr	r2, [r7, #12]
 8046172:	6812      	ldr	r2, [r2, #0]
 8046174:	4611      	mov	r1, r2
 8046176:	687a      	ldr	r2, [r7, #4]
 8046178:	01d2      	lsls	r2, r2, #7
 804617a:	440a      	add	r2, r1
 804617c:	3284      	adds	r2, #132	; 0x84
 804617e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8046182:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8046184:	68bb      	ldr	r3, [r7, #8]
 8046186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046188:	69fa      	ldr	r2, [r7, #28]
 804618a:	fb02 f303 	mul.w	r3, r2, r3
 804618e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8046190:	68bb      	ldr	r3, [r7, #8]
 8046192:	6859      	ldr	r1, [r3, #4]
 8046194:	68bb      	ldr	r3, [r7, #8]
 8046196:	681b      	ldr	r3, [r3, #0]
 8046198:	1acb      	subs	r3, r1, r3
 804619a:	69f9      	ldr	r1, [r7, #28]
 804619c:	fb01 f303 	mul.w	r3, r1, r3
 80461a0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80461a2:	68f9      	ldr	r1, [r7, #12]
 80461a4:	6809      	ldr	r1, [r1, #0]
 80461a6:	4608      	mov	r0, r1
 80461a8:	6879      	ldr	r1, [r7, #4]
 80461aa:	01c9      	lsls	r1, r1, #7
 80461ac:	4401      	add	r1, r0
 80461ae:	3184      	adds	r1, #132	; 0x84
 80461b0:	4313      	orrs	r3, r2
 80461b2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80461b4:	68fb      	ldr	r3, [r7, #12]
 80461b6:	681b      	ldr	r3, [r3, #0]
 80461b8:	461a      	mov	r2, r3
 80461ba:	687b      	ldr	r3, [r7, #4]
 80461bc:	01db      	lsls	r3, r3, #7
 80461be:	4413      	add	r3, r2
 80461c0:	3384      	adds	r3, #132	; 0x84
 80461c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80461c4:	68fa      	ldr	r2, [r7, #12]
 80461c6:	6812      	ldr	r2, [r2, #0]
 80461c8:	4611      	mov	r1, r2
 80461ca:	687a      	ldr	r2, [r7, #4]
 80461cc:	01d2      	lsls	r2, r2, #7
 80461ce:	440a      	add	r2, r1
 80461d0:	3284      	adds	r2, #132	; 0x84
 80461d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80461d6:	f023 0307 	bic.w	r3, r3, #7
 80461da:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80461dc:	68fb      	ldr	r3, [r7, #12]
 80461de:	681b      	ldr	r3, [r3, #0]
 80461e0:	461a      	mov	r2, r3
 80461e2:	687b      	ldr	r3, [r7, #4]
 80461e4:	01db      	lsls	r3, r3, #7
 80461e6:	4413      	add	r3, r2
 80461e8:	3384      	adds	r3, #132	; 0x84
 80461ea:	461a      	mov	r2, r3
 80461ec:	68bb      	ldr	r3, [r7, #8]
 80461ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80461f0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80461f2:	68fb      	ldr	r3, [r7, #12]
 80461f4:	681b      	ldr	r3, [r3, #0]
 80461f6:	461a      	mov	r2, r3
 80461f8:	687b      	ldr	r3, [r7, #4]
 80461fa:	01db      	lsls	r3, r3, #7
 80461fc:	4413      	add	r3, r2
 80461fe:	3384      	adds	r3, #132	; 0x84
 8046200:	681b      	ldr	r3, [r3, #0]
 8046202:	68fa      	ldr	r2, [r7, #12]
 8046204:	6812      	ldr	r2, [r2, #0]
 8046206:	4611      	mov	r1, r2
 8046208:	687a      	ldr	r2, [r7, #4]
 804620a:	01d2      	lsls	r2, r2, #7
 804620c:	440a      	add	r2, r1
 804620e:	3284      	adds	r2, #132	; 0x84
 8046210:	f043 0301 	orr.w	r3, r3, #1
 8046214:	6013      	str	r3, [r2, #0]
}
 8046216:	bf00      	nop
 8046218:	3724      	adds	r7, #36	; 0x24
 804621a:	46bd      	mov	sp, r7
 804621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046220:	4770      	bx	lr
	...

08046224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8046224:	b580      	push	{r7, lr}
 8046226:	b086      	sub	sp, #24
 8046228:	af00      	add	r7, sp, #0
 804622a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 804622c:	687b      	ldr	r3, [r7, #4]
 804622e:	2b00      	cmp	r3, #0
 8046230:	d101      	bne.n	8046236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8046232:	2301      	movs	r3, #1
 8046234:	e267      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8046236:	687b      	ldr	r3, [r7, #4]
 8046238:	681b      	ldr	r3, [r3, #0]
 804623a:	f003 0301 	and.w	r3, r3, #1
 804623e:	2b00      	cmp	r3, #0
 8046240:	d075      	beq.n	804632e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8046242:	4b88      	ldr	r3, [pc, #544]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 8046244:	689b      	ldr	r3, [r3, #8]
 8046246:	f003 030c 	and.w	r3, r3, #12
 804624a:	2b04      	cmp	r3, #4
 804624c:	d00c      	beq.n	8046268 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804624e:	4b85      	ldr	r3, [pc, #532]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 8046250:	689b      	ldr	r3, [r3, #8]
 8046252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8046256:	2b08      	cmp	r3, #8
 8046258:	d112      	bne.n	8046280 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804625a:	4b82      	ldr	r3, [pc, #520]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 804625c:	685b      	ldr	r3, [r3, #4]
 804625e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8046262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8046266:	d10b      	bne.n	8046280 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8046268:	4b7e      	ldr	r3, [pc, #504]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 804626a:	681b      	ldr	r3, [r3, #0]
 804626c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046270:	2b00      	cmp	r3, #0
 8046272:	d05b      	beq.n	804632c <HAL_RCC_OscConfig+0x108>
 8046274:	687b      	ldr	r3, [r7, #4]
 8046276:	685b      	ldr	r3, [r3, #4]
 8046278:	2b00      	cmp	r3, #0
 804627a:	d157      	bne.n	804632c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 804627c:	2301      	movs	r3, #1
 804627e:	e242      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8046280:	687b      	ldr	r3, [r7, #4]
 8046282:	685b      	ldr	r3, [r3, #4]
 8046284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8046288:	d106      	bne.n	8046298 <HAL_RCC_OscConfig+0x74>
 804628a:	4b76      	ldr	r3, [pc, #472]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 804628c:	681b      	ldr	r3, [r3, #0]
 804628e:	4a75      	ldr	r2, [pc, #468]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 8046290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8046294:	6013      	str	r3, [r2, #0]
 8046296:	e01d      	b.n	80462d4 <HAL_RCC_OscConfig+0xb0>
 8046298:	687b      	ldr	r3, [r7, #4]
 804629a:	685b      	ldr	r3, [r3, #4]
 804629c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80462a0:	d10c      	bne.n	80462bc <HAL_RCC_OscConfig+0x98>
 80462a2:	4b70      	ldr	r3, [pc, #448]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 80462a4:	681b      	ldr	r3, [r3, #0]
 80462a6:	4a6f      	ldr	r2, [pc, #444]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 80462a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80462ac:	6013      	str	r3, [r2, #0]
 80462ae:	4b6d      	ldr	r3, [pc, #436]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 80462b0:	681b      	ldr	r3, [r3, #0]
 80462b2:	4a6c      	ldr	r2, [pc, #432]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 80462b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80462b8:	6013      	str	r3, [r2, #0]
 80462ba:	e00b      	b.n	80462d4 <HAL_RCC_OscConfig+0xb0>
 80462bc:	4b69      	ldr	r3, [pc, #420]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 80462be:	681b      	ldr	r3, [r3, #0]
 80462c0:	4a68      	ldr	r2, [pc, #416]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 80462c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80462c6:	6013      	str	r3, [r2, #0]
 80462c8:	4b66      	ldr	r3, [pc, #408]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 80462ca:	681b      	ldr	r3, [r3, #0]
 80462cc:	4a65      	ldr	r2, [pc, #404]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 80462ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80462d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80462d4:	687b      	ldr	r3, [r7, #4]
 80462d6:	685b      	ldr	r3, [r3, #4]
 80462d8:	2b00      	cmp	r3, #0
 80462da:	d013      	beq.n	8046304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80462dc:	f7fc fc6e 	bl	8042bbc <HAL_GetTick>
 80462e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80462e2:	e008      	b.n	80462f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80462e4:	f7fc fc6a 	bl	8042bbc <HAL_GetTick>
 80462e8:	4602      	mov	r2, r0
 80462ea:	693b      	ldr	r3, [r7, #16]
 80462ec:	1ad3      	subs	r3, r2, r3
 80462ee:	2b64      	cmp	r3, #100	; 0x64
 80462f0:	d901      	bls.n	80462f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80462f2:	2303      	movs	r3, #3
 80462f4:	e207      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80462f6:	4b5b      	ldr	r3, [pc, #364]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 80462f8:	681b      	ldr	r3, [r3, #0]
 80462fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80462fe:	2b00      	cmp	r3, #0
 8046300:	d0f0      	beq.n	80462e4 <HAL_RCC_OscConfig+0xc0>
 8046302:	e014      	b.n	804632e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046304:	f7fc fc5a 	bl	8042bbc <HAL_GetTick>
 8046308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804630a:	e008      	b.n	804631e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 804630c:	f7fc fc56 	bl	8042bbc <HAL_GetTick>
 8046310:	4602      	mov	r2, r0
 8046312:	693b      	ldr	r3, [r7, #16]
 8046314:	1ad3      	subs	r3, r2, r3
 8046316:	2b64      	cmp	r3, #100	; 0x64
 8046318:	d901      	bls.n	804631e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 804631a:	2303      	movs	r3, #3
 804631c:	e1f3      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804631e:	4b51      	ldr	r3, [pc, #324]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 8046320:	681b      	ldr	r3, [r3, #0]
 8046322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046326:	2b00      	cmp	r3, #0
 8046328:	d1f0      	bne.n	804630c <HAL_RCC_OscConfig+0xe8>
 804632a:	e000      	b.n	804632e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804632c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 804632e:	687b      	ldr	r3, [r7, #4]
 8046330:	681b      	ldr	r3, [r3, #0]
 8046332:	f003 0302 	and.w	r3, r3, #2
 8046336:	2b00      	cmp	r3, #0
 8046338:	d063      	beq.n	8046402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 804633a:	4b4a      	ldr	r3, [pc, #296]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 804633c:	689b      	ldr	r3, [r3, #8]
 804633e:	f003 030c 	and.w	r3, r3, #12
 8046342:	2b00      	cmp	r3, #0
 8046344:	d00b      	beq.n	804635e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8046346:	4b47      	ldr	r3, [pc, #284]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 8046348:	689b      	ldr	r3, [r3, #8]
 804634a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 804634e:	2b08      	cmp	r3, #8
 8046350:	d11c      	bne.n	804638c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8046352:	4b44      	ldr	r3, [pc, #272]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 8046354:	685b      	ldr	r3, [r3, #4]
 8046356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804635a:	2b00      	cmp	r3, #0
 804635c:	d116      	bne.n	804638c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 804635e:	4b41      	ldr	r3, [pc, #260]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 8046360:	681b      	ldr	r3, [r3, #0]
 8046362:	f003 0302 	and.w	r3, r3, #2
 8046366:	2b00      	cmp	r3, #0
 8046368:	d005      	beq.n	8046376 <HAL_RCC_OscConfig+0x152>
 804636a:	687b      	ldr	r3, [r7, #4]
 804636c:	68db      	ldr	r3, [r3, #12]
 804636e:	2b01      	cmp	r3, #1
 8046370:	d001      	beq.n	8046376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8046372:	2301      	movs	r3, #1
 8046374:	e1c7      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8046376:	4b3b      	ldr	r3, [pc, #236]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 8046378:	681b      	ldr	r3, [r3, #0]
 804637a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 804637e:	687b      	ldr	r3, [r7, #4]
 8046380:	691b      	ldr	r3, [r3, #16]
 8046382:	00db      	lsls	r3, r3, #3
 8046384:	4937      	ldr	r1, [pc, #220]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 8046386:	4313      	orrs	r3, r2
 8046388:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 804638a:	e03a      	b.n	8046402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 804638c:	687b      	ldr	r3, [r7, #4]
 804638e:	68db      	ldr	r3, [r3, #12]
 8046390:	2b00      	cmp	r3, #0
 8046392:	d020      	beq.n	80463d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8046394:	4b34      	ldr	r3, [pc, #208]	; (8046468 <HAL_RCC_OscConfig+0x244>)
 8046396:	2201      	movs	r2, #1
 8046398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804639a:	f7fc fc0f 	bl	8042bbc <HAL_GetTick>
 804639e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80463a0:	e008      	b.n	80463b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80463a2:	f7fc fc0b 	bl	8042bbc <HAL_GetTick>
 80463a6:	4602      	mov	r2, r0
 80463a8:	693b      	ldr	r3, [r7, #16]
 80463aa:	1ad3      	subs	r3, r2, r3
 80463ac:	2b02      	cmp	r3, #2
 80463ae:	d901      	bls.n	80463b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80463b0:	2303      	movs	r3, #3
 80463b2:	e1a8      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80463b4:	4b2b      	ldr	r3, [pc, #172]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 80463b6:	681b      	ldr	r3, [r3, #0]
 80463b8:	f003 0302 	and.w	r3, r3, #2
 80463bc:	2b00      	cmp	r3, #0
 80463be:	d0f0      	beq.n	80463a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80463c0:	4b28      	ldr	r3, [pc, #160]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 80463c2:	681b      	ldr	r3, [r3, #0]
 80463c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80463c8:	687b      	ldr	r3, [r7, #4]
 80463ca:	691b      	ldr	r3, [r3, #16]
 80463cc:	00db      	lsls	r3, r3, #3
 80463ce:	4925      	ldr	r1, [pc, #148]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 80463d0:	4313      	orrs	r3, r2
 80463d2:	600b      	str	r3, [r1, #0]
 80463d4:	e015      	b.n	8046402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80463d6:	4b24      	ldr	r3, [pc, #144]	; (8046468 <HAL_RCC_OscConfig+0x244>)
 80463d8:	2200      	movs	r2, #0
 80463da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80463dc:	f7fc fbee 	bl	8042bbc <HAL_GetTick>
 80463e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80463e2:	e008      	b.n	80463f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80463e4:	f7fc fbea 	bl	8042bbc <HAL_GetTick>
 80463e8:	4602      	mov	r2, r0
 80463ea:	693b      	ldr	r3, [r7, #16]
 80463ec:	1ad3      	subs	r3, r2, r3
 80463ee:	2b02      	cmp	r3, #2
 80463f0:	d901      	bls.n	80463f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80463f2:	2303      	movs	r3, #3
 80463f4:	e187      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80463f6:	4b1b      	ldr	r3, [pc, #108]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 80463f8:	681b      	ldr	r3, [r3, #0]
 80463fa:	f003 0302 	and.w	r3, r3, #2
 80463fe:	2b00      	cmp	r3, #0
 8046400:	d1f0      	bne.n	80463e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8046402:	687b      	ldr	r3, [r7, #4]
 8046404:	681b      	ldr	r3, [r3, #0]
 8046406:	f003 0308 	and.w	r3, r3, #8
 804640a:	2b00      	cmp	r3, #0
 804640c:	d036      	beq.n	804647c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 804640e:	687b      	ldr	r3, [r7, #4]
 8046410:	695b      	ldr	r3, [r3, #20]
 8046412:	2b00      	cmp	r3, #0
 8046414:	d016      	beq.n	8046444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8046416:	4b15      	ldr	r3, [pc, #84]	; (804646c <HAL_RCC_OscConfig+0x248>)
 8046418:	2201      	movs	r2, #1
 804641a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804641c:	f7fc fbce 	bl	8042bbc <HAL_GetTick>
 8046420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8046422:	e008      	b.n	8046436 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8046424:	f7fc fbca 	bl	8042bbc <HAL_GetTick>
 8046428:	4602      	mov	r2, r0
 804642a:	693b      	ldr	r3, [r7, #16]
 804642c:	1ad3      	subs	r3, r2, r3
 804642e:	2b02      	cmp	r3, #2
 8046430:	d901      	bls.n	8046436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8046432:	2303      	movs	r3, #3
 8046434:	e167      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8046436:	4b0b      	ldr	r3, [pc, #44]	; (8046464 <HAL_RCC_OscConfig+0x240>)
 8046438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804643a:	f003 0302 	and.w	r3, r3, #2
 804643e:	2b00      	cmp	r3, #0
 8046440:	d0f0      	beq.n	8046424 <HAL_RCC_OscConfig+0x200>
 8046442:	e01b      	b.n	804647c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8046444:	4b09      	ldr	r3, [pc, #36]	; (804646c <HAL_RCC_OscConfig+0x248>)
 8046446:	2200      	movs	r2, #0
 8046448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 804644a:	f7fc fbb7 	bl	8042bbc <HAL_GetTick>
 804644e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8046450:	e00e      	b.n	8046470 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8046452:	f7fc fbb3 	bl	8042bbc <HAL_GetTick>
 8046456:	4602      	mov	r2, r0
 8046458:	693b      	ldr	r3, [r7, #16]
 804645a:	1ad3      	subs	r3, r2, r3
 804645c:	2b02      	cmp	r3, #2
 804645e:	d907      	bls.n	8046470 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8046460:	2303      	movs	r3, #3
 8046462:	e150      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
 8046464:	40023800 	.word	0x40023800
 8046468:	42470000 	.word	0x42470000
 804646c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8046470:	4b88      	ldr	r3, [pc, #544]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 8046472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046474:	f003 0302 	and.w	r3, r3, #2
 8046478:	2b00      	cmp	r3, #0
 804647a:	d1ea      	bne.n	8046452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 804647c:	687b      	ldr	r3, [r7, #4]
 804647e:	681b      	ldr	r3, [r3, #0]
 8046480:	f003 0304 	and.w	r3, r3, #4
 8046484:	2b00      	cmp	r3, #0
 8046486:	f000 8097 	beq.w	80465b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 804648a:	2300      	movs	r3, #0
 804648c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 804648e:	4b81      	ldr	r3, [pc, #516]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 8046490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8046496:	2b00      	cmp	r3, #0
 8046498:	d10f      	bne.n	80464ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 804649a:	2300      	movs	r3, #0
 804649c:	60bb      	str	r3, [r7, #8]
 804649e:	4b7d      	ldr	r3, [pc, #500]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 80464a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80464a2:	4a7c      	ldr	r2, [pc, #496]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 80464a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80464a8:	6413      	str	r3, [r2, #64]	; 0x40
 80464aa:	4b7a      	ldr	r3, [pc, #488]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 80464ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80464ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80464b2:	60bb      	str	r3, [r7, #8]
 80464b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80464b6:	2301      	movs	r3, #1
 80464b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80464ba:	4b77      	ldr	r3, [pc, #476]	; (8046698 <HAL_RCC_OscConfig+0x474>)
 80464bc:	681b      	ldr	r3, [r3, #0]
 80464be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80464c2:	2b00      	cmp	r3, #0
 80464c4:	d118      	bne.n	80464f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80464c6:	4b74      	ldr	r3, [pc, #464]	; (8046698 <HAL_RCC_OscConfig+0x474>)
 80464c8:	681b      	ldr	r3, [r3, #0]
 80464ca:	4a73      	ldr	r2, [pc, #460]	; (8046698 <HAL_RCC_OscConfig+0x474>)
 80464cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80464d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80464d2:	f7fc fb73 	bl	8042bbc <HAL_GetTick>
 80464d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80464d8:	e008      	b.n	80464ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80464da:	f7fc fb6f 	bl	8042bbc <HAL_GetTick>
 80464de:	4602      	mov	r2, r0
 80464e0:	693b      	ldr	r3, [r7, #16]
 80464e2:	1ad3      	subs	r3, r2, r3
 80464e4:	2b02      	cmp	r3, #2
 80464e6:	d901      	bls.n	80464ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80464e8:	2303      	movs	r3, #3
 80464ea:	e10c      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80464ec:	4b6a      	ldr	r3, [pc, #424]	; (8046698 <HAL_RCC_OscConfig+0x474>)
 80464ee:	681b      	ldr	r3, [r3, #0]
 80464f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80464f4:	2b00      	cmp	r3, #0
 80464f6:	d0f0      	beq.n	80464da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80464f8:	687b      	ldr	r3, [r7, #4]
 80464fa:	689b      	ldr	r3, [r3, #8]
 80464fc:	2b01      	cmp	r3, #1
 80464fe:	d106      	bne.n	804650e <HAL_RCC_OscConfig+0x2ea>
 8046500:	4b64      	ldr	r3, [pc, #400]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 8046502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046504:	4a63      	ldr	r2, [pc, #396]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 8046506:	f043 0301 	orr.w	r3, r3, #1
 804650a:	6713      	str	r3, [r2, #112]	; 0x70
 804650c:	e01c      	b.n	8046548 <HAL_RCC_OscConfig+0x324>
 804650e:	687b      	ldr	r3, [r7, #4]
 8046510:	689b      	ldr	r3, [r3, #8]
 8046512:	2b05      	cmp	r3, #5
 8046514:	d10c      	bne.n	8046530 <HAL_RCC_OscConfig+0x30c>
 8046516:	4b5f      	ldr	r3, [pc, #380]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 8046518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804651a:	4a5e      	ldr	r2, [pc, #376]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 804651c:	f043 0304 	orr.w	r3, r3, #4
 8046520:	6713      	str	r3, [r2, #112]	; 0x70
 8046522:	4b5c      	ldr	r3, [pc, #368]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 8046524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046526:	4a5b      	ldr	r2, [pc, #364]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 8046528:	f043 0301 	orr.w	r3, r3, #1
 804652c:	6713      	str	r3, [r2, #112]	; 0x70
 804652e:	e00b      	b.n	8046548 <HAL_RCC_OscConfig+0x324>
 8046530:	4b58      	ldr	r3, [pc, #352]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 8046532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046534:	4a57      	ldr	r2, [pc, #348]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 8046536:	f023 0301 	bic.w	r3, r3, #1
 804653a:	6713      	str	r3, [r2, #112]	; 0x70
 804653c:	4b55      	ldr	r3, [pc, #340]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 804653e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046540:	4a54      	ldr	r2, [pc, #336]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 8046542:	f023 0304 	bic.w	r3, r3, #4
 8046546:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8046548:	687b      	ldr	r3, [r7, #4]
 804654a:	689b      	ldr	r3, [r3, #8]
 804654c:	2b00      	cmp	r3, #0
 804654e:	d015      	beq.n	804657c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8046550:	f7fc fb34 	bl	8042bbc <HAL_GetTick>
 8046554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8046556:	e00a      	b.n	804656e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8046558:	f7fc fb30 	bl	8042bbc <HAL_GetTick>
 804655c:	4602      	mov	r2, r0
 804655e:	693b      	ldr	r3, [r7, #16]
 8046560:	1ad3      	subs	r3, r2, r3
 8046562:	f241 3288 	movw	r2, #5000	; 0x1388
 8046566:	4293      	cmp	r3, r2
 8046568:	d901      	bls.n	804656e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 804656a:	2303      	movs	r3, #3
 804656c:	e0cb      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804656e:	4b49      	ldr	r3, [pc, #292]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 8046570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046572:	f003 0302 	and.w	r3, r3, #2
 8046576:	2b00      	cmp	r3, #0
 8046578:	d0ee      	beq.n	8046558 <HAL_RCC_OscConfig+0x334>
 804657a:	e014      	b.n	80465a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 804657c:	f7fc fb1e 	bl	8042bbc <HAL_GetTick>
 8046580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8046582:	e00a      	b.n	804659a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8046584:	f7fc fb1a 	bl	8042bbc <HAL_GetTick>
 8046588:	4602      	mov	r2, r0
 804658a:	693b      	ldr	r3, [r7, #16]
 804658c:	1ad3      	subs	r3, r2, r3
 804658e:	f241 3288 	movw	r2, #5000	; 0x1388
 8046592:	4293      	cmp	r3, r2
 8046594:	d901      	bls.n	804659a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8046596:	2303      	movs	r3, #3
 8046598:	e0b5      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 804659a:	4b3e      	ldr	r3, [pc, #248]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 804659c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804659e:	f003 0302 	and.w	r3, r3, #2
 80465a2:	2b00      	cmp	r3, #0
 80465a4:	d1ee      	bne.n	8046584 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80465a6:	7dfb      	ldrb	r3, [r7, #23]
 80465a8:	2b01      	cmp	r3, #1
 80465aa:	d105      	bne.n	80465b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80465ac:	4b39      	ldr	r3, [pc, #228]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 80465ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80465b0:	4a38      	ldr	r2, [pc, #224]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 80465b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80465b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80465b8:	687b      	ldr	r3, [r7, #4]
 80465ba:	699b      	ldr	r3, [r3, #24]
 80465bc:	2b00      	cmp	r3, #0
 80465be:	f000 80a1 	beq.w	8046704 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80465c2:	4b34      	ldr	r3, [pc, #208]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 80465c4:	689b      	ldr	r3, [r3, #8]
 80465c6:	f003 030c 	and.w	r3, r3, #12
 80465ca:	2b08      	cmp	r3, #8
 80465cc:	d05c      	beq.n	8046688 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80465ce:	687b      	ldr	r3, [r7, #4]
 80465d0:	699b      	ldr	r3, [r3, #24]
 80465d2:	2b02      	cmp	r3, #2
 80465d4:	d141      	bne.n	804665a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80465d6:	4b31      	ldr	r3, [pc, #196]	; (804669c <HAL_RCC_OscConfig+0x478>)
 80465d8:	2200      	movs	r2, #0
 80465da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80465dc:	f7fc faee 	bl	8042bbc <HAL_GetTick>
 80465e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80465e2:	e008      	b.n	80465f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80465e4:	f7fc faea 	bl	8042bbc <HAL_GetTick>
 80465e8:	4602      	mov	r2, r0
 80465ea:	693b      	ldr	r3, [r7, #16]
 80465ec:	1ad3      	subs	r3, r2, r3
 80465ee:	2b02      	cmp	r3, #2
 80465f0:	d901      	bls.n	80465f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80465f2:	2303      	movs	r3, #3
 80465f4:	e087      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80465f6:	4b27      	ldr	r3, [pc, #156]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 80465f8:	681b      	ldr	r3, [r3, #0]
 80465fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80465fe:	2b00      	cmp	r3, #0
 8046600:	d1f0      	bne.n	80465e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8046602:	687b      	ldr	r3, [r7, #4]
 8046604:	69da      	ldr	r2, [r3, #28]
 8046606:	687b      	ldr	r3, [r7, #4]
 8046608:	6a1b      	ldr	r3, [r3, #32]
 804660a:	431a      	orrs	r2, r3
 804660c:	687b      	ldr	r3, [r7, #4]
 804660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046610:	019b      	lsls	r3, r3, #6
 8046612:	431a      	orrs	r2, r3
 8046614:	687b      	ldr	r3, [r7, #4]
 8046616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046618:	085b      	lsrs	r3, r3, #1
 804661a:	3b01      	subs	r3, #1
 804661c:	041b      	lsls	r3, r3, #16
 804661e:	431a      	orrs	r2, r3
 8046620:	687b      	ldr	r3, [r7, #4]
 8046622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046624:	061b      	lsls	r3, r3, #24
 8046626:	491b      	ldr	r1, [pc, #108]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 8046628:	4313      	orrs	r3, r2
 804662a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 804662c:	4b1b      	ldr	r3, [pc, #108]	; (804669c <HAL_RCC_OscConfig+0x478>)
 804662e:	2201      	movs	r2, #1
 8046630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046632:	f7fc fac3 	bl	8042bbc <HAL_GetTick>
 8046636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8046638:	e008      	b.n	804664c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 804663a:	f7fc fabf 	bl	8042bbc <HAL_GetTick>
 804663e:	4602      	mov	r2, r0
 8046640:	693b      	ldr	r3, [r7, #16]
 8046642:	1ad3      	subs	r3, r2, r3
 8046644:	2b02      	cmp	r3, #2
 8046646:	d901      	bls.n	804664c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8046648:	2303      	movs	r3, #3
 804664a:	e05c      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804664c:	4b11      	ldr	r3, [pc, #68]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 804664e:	681b      	ldr	r3, [r3, #0]
 8046650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8046654:	2b00      	cmp	r3, #0
 8046656:	d0f0      	beq.n	804663a <HAL_RCC_OscConfig+0x416>
 8046658:	e054      	b.n	8046704 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804665a:	4b10      	ldr	r3, [pc, #64]	; (804669c <HAL_RCC_OscConfig+0x478>)
 804665c:	2200      	movs	r2, #0
 804665e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046660:	f7fc faac 	bl	8042bbc <HAL_GetTick>
 8046664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8046666:	e008      	b.n	804667a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8046668:	f7fc faa8 	bl	8042bbc <HAL_GetTick>
 804666c:	4602      	mov	r2, r0
 804666e:	693b      	ldr	r3, [r7, #16]
 8046670:	1ad3      	subs	r3, r2, r3
 8046672:	2b02      	cmp	r3, #2
 8046674:	d901      	bls.n	804667a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8046676:	2303      	movs	r3, #3
 8046678:	e045      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804667a:	4b06      	ldr	r3, [pc, #24]	; (8046694 <HAL_RCC_OscConfig+0x470>)
 804667c:	681b      	ldr	r3, [r3, #0]
 804667e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8046682:	2b00      	cmp	r3, #0
 8046684:	d1f0      	bne.n	8046668 <HAL_RCC_OscConfig+0x444>
 8046686:	e03d      	b.n	8046704 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8046688:	687b      	ldr	r3, [r7, #4]
 804668a:	699b      	ldr	r3, [r3, #24]
 804668c:	2b01      	cmp	r3, #1
 804668e:	d107      	bne.n	80466a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8046690:	2301      	movs	r3, #1
 8046692:	e038      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
 8046694:	40023800 	.word	0x40023800
 8046698:	40007000 	.word	0x40007000
 804669c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80466a0:	4b1b      	ldr	r3, [pc, #108]	; (8046710 <HAL_RCC_OscConfig+0x4ec>)
 80466a2:	685b      	ldr	r3, [r3, #4]
 80466a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80466a6:	687b      	ldr	r3, [r7, #4]
 80466a8:	699b      	ldr	r3, [r3, #24]
 80466aa:	2b01      	cmp	r3, #1
 80466ac:	d028      	beq.n	8046700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80466ae:	68fb      	ldr	r3, [r7, #12]
 80466b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80466b4:	687b      	ldr	r3, [r7, #4]
 80466b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80466b8:	429a      	cmp	r2, r3
 80466ba:	d121      	bne.n	8046700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80466bc:	68fb      	ldr	r3, [r7, #12]
 80466be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80466c2:	687b      	ldr	r3, [r7, #4]
 80466c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80466c6:	429a      	cmp	r2, r3
 80466c8:	d11a      	bne.n	8046700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80466ca:	68fa      	ldr	r2, [r7, #12]
 80466cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80466d0:	4013      	ands	r3, r2
 80466d2:	687a      	ldr	r2, [r7, #4]
 80466d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80466d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80466d8:	4293      	cmp	r3, r2
 80466da:	d111      	bne.n	8046700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80466dc:	68fb      	ldr	r3, [r7, #12]
 80466de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80466e2:	687b      	ldr	r3, [r7, #4]
 80466e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80466e6:	085b      	lsrs	r3, r3, #1
 80466e8:	3b01      	subs	r3, #1
 80466ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80466ec:	429a      	cmp	r2, r3
 80466ee:	d107      	bne.n	8046700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80466f0:	68fb      	ldr	r3, [r7, #12]
 80466f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80466f6:	687b      	ldr	r3, [r7, #4]
 80466f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80466fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80466fc:	429a      	cmp	r2, r3
 80466fe:	d001      	beq.n	8046704 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8046700:	2301      	movs	r3, #1
 8046702:	e000      	b.n	8046706 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8046704:	2300      	movs	r3, #0
}
 8046706:	4618      	mov	r0, r3
 8046708:	3718      	adds	r7, #24
 804670a:	46bd      	mov	sp, r7
 804670c:	bd80      	pop	{r7, pc}
 804670e:	bf00      	nop
 8046710:	40023800 	.word	0x40023800

08046714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8046714:	b580      	push	{r7, lr}
 8046716:	b084      	sub	sp, #16
 8046718:	af00      	add	r7, sp, #0
 804671a:	6078      	str	r0, [r7, #4]
 804671c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 804671e:	687b      	ldr	r3, [r7, #4]
 8046720:	2b00      	cmp	r3, #0
 8046722:	d101      	bne.n	8046728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8046724:	2301      	movs	r3, #1
 8046726:	e0cc      	b.n	80468c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8046728:	4b68      	ldr	r3, [pc, #416]	; (80468cc <HAL_RCC_ClockConfig+0x1b8>)
 804672a:	681b      	ldr	r3, [r3, #0]
 804672c:	f003 030f 	and.w	r3, r3, #15
 8046730:	683a      	ldr	r2, [r7, #0]
 8046732:	429a      	cmp	r2, r3
 8046734:	d90c      	bls.n	8046750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8046736:	4b65      	ldr	r3, [pc, #404]	; (80468cc <HAL_RCC_ClockConfig+0x1b8>)
 8046738:	683a      	ldr	r2, [r7, #0]
 804673a:	b2d2      	uxtb	r2, r2
 804673c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 804673e:	4b63      	ldr	r3, [pc, #396]	; (80468cc <HAL_RCC_ClockConfig+0x1b8>)
 8046740:	681b      	ldr	r3, [r3, #0]
 8046742:	f003 030f 	and.w	r3, r3, #15
 8046746:	683a      	ldr	r2, [r7, #0]
 8046748:	429a      	cmp	r2, r3
 804674a:	d001      	beq.n	8046750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 804674c:	2301      	movs	r3, #1
 804674e:	e0b8      	b.n	80468c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8046750:	687b      	ldr	r3, [r7, #4]
 8046752:	681b      	ldr	r3, [r3, #0]
 8046754:	f003 0302 	and.w	r3, r3, #2
 8046758:	2b00      	cmp	r3, #0
 804675a:	d020      	beq.n	804679e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 804675c:	687b      	ldr	r3, [r7, #4]
 804675e:	681b      	ldr	r3, [r3, #0]
 8046760:	f003 0304 	and.w	r3, r3, #4
 8046764:	2b00      	cmp	r3, #0
 8046766:	d005      	beq.n	8046774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8046768:	4b59      	ldr	r3, [pc, #356]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 804676a:	689b      	ldr	r3, [r3, #8]
 804676c:	4a58      	ldr	r2, [pc, #352]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 804676e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8046772:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8046774:	687b      	ldr	r3, [r7, #4]
 8046776:	681b      	ldr	r3, [r3, #0]
 8046778:	f003 0308 	and.w	r3, r3, #8
 804677c:	2b00      	cmp	r3, #0
 804677e:	d005      	beq.n	804678c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8046780:	4b53      	ldr	r3, [pc, #332]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 8046782:	689b      	ldr	r3, [r3, #8]
 8046784:	4a52      	ldr	r2, [pc, #328]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 8046786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 804678a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804678c:	4b50      	ldr	r3, [pc, #320]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 804678e:	689b      	ldr	r3, [r3, #8]
 8046790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8046794:	687b      	ldr	r3, [r7, #4]
 8046796:	689b      	ldr	r3, [r3, #8]
 8046798:	494d      	ldr	r1, [pc, #308]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 804679a:	4313      	orrs	r3, r2
 804679c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 804679e:	687b      	ldr	r3, [r7, #4]
 80467a0:	681b      	ldr	r3, [r3, #0]
 80467a2:	f003 0301 	and.w	r3, r3, #1
 80467a6:	2b00      	cmp	r3, #0
 80467a8:	d044      	beq.n	8046834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80467aa:	687b      	ldr	r3, [r7, #4]
 80467ac:	685b      	ldr	r3, [r3, #4]
 80467ae:	2b01      	cmp	r3, #1
 80467b0:	d107      	bne.n	80467c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80467b2:	4b47      	ldr	r3, [pc, #284]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 80467b4:	681b      	ldr	r3, [r3, #0]
 80467b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80467ba:	2b00      	cmp	r3, #0
 80467bc:	d119      	bne.n	80467f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80467be:	2301      	movs	r3, #1
 80467c0:	e07f      	b.n	80468c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80467c2:	687b      	ldr	r3, [r7, #4]
 80467c4:	685b      	ldr	r3, [r3, #4]
 80467c6:	2b02      	cmp	r3, #2
 80467c8:	d003      	beq.n	80467d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80467ca:	687b      	ldr	r3, [r7, #4]
 80467cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80467ce:	2b03      	cmp	r3, #3
 80467d0:	d107      	bne.n	80467e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80467d2:	4b3f      	ldr	r3, [pc, #252]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 80467d4:	681b      	ldr	r3, [r3, #0]
 80467d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80467da:	2b00      	cmp	r3, #0
 80467dc:	d109      	bne.n	80467f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80467de:	2301      	movs	r3, #1
 80467e0:	e06f      	b.n	80468c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80467e2:	4b3b      	ldr	r3, [pc, #236]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 80467e4:	681b      	ldr	r3, [r3, #0]
 80467e6:	f003 0302 	and.w	r3, r3, #2
 80467ea:	2b00      	cmp	r3, #0
 80467ec:	d101      	bne.n	80467f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80467ee:	2301      	movs	r3, #1
 80467f0:	e067      	b.n	80468c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80467f2:	4b37      	ldr	r3, [pc, #220]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 80467f4:	689b      	ldr	r3, [r3, #8]
 80467f6:	f023 0203 	bic.w	r2, r3, #3
 80467fa:	687b      	ldr	r3, [r7, #4]
 80467fc:	685b      	ldr	r3, [r3, #4]
 80467fe:	4934      	ldr	r1, [pc, #208]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 8046800:	4313      	orrs	r3, r2
 8046802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8046804:	f7fc f9da 	bl	8042bbc <HAL_GetTick>
 8046808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804680a:	e00a      	b.n	8046822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804680c:	f7fc f9d6 	bl	8042bbc <HAL_GetTick>
 8046810:	4602      	mov	r2, r0
 8046812:	68fb      	ldr	r3, [r7, #12]
 8046814:	1ad3      	subs	r3, r2, r3
 8046816:	f241 3288 	movw	r2, #5000	; 0x1388
 804681a:	4293      	cmp	r3, r2
 804681c:	d901      	bls.n	8046822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 804681e:	2303      	movs	r3, #3
 8046820:	e04f      	b.n	80468c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8046822:	4b2b      	ldr	r3, [pc, #172]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 8046824:	689b      	ldr	r3, [r3, #8]
 8046826:	f003 020c 	and.w	r2, r3, #12
 804682a:	687b      	ldr	r3, [r7, #4]
 804682c:	685b      	ldr	r3, [r3, #4]
 804682e:	009b      	lsls	r3, r3, #2
 8046830:	429a      	cmp	r2, r3
 8046832:	d1eb      	bne.n	804680c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8046834:	4b25      	ldr	r3, [pc, #148]	; (80468cc <HAL_RCC_ClockConfig+0x1b8>)
 8046836:	681b      	ldr	r3, [r3, #0]
 8046838:	f003 030f 	and.w	r3, r3, #15
 804683c:	683a      	ldr	r2, [r7, #0]
 804683e:	429a      	cmp	r2, r3
 8046840:	d20c      	bcs.n	804685c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8046842:	4b22      	ldr	r3, [pc, #136]	; (80468cc <HAL_RCC_ClockConfig+0x1b8>)
 8046844:	683a      	ldr	r2, [r7, #0]
 8046846:	b2d2      	uxtb	r2, r2
 8046848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 804684a:	4b20      	ldr	r3, [pc, #128]	; (80468cc <HAL_RCC_ClockConfig+0x1b8>)
 804684c:	681b      	ldr	r3, [r3, #0]
 804684e:	f003 030f 	and.w	r3, r3, #15
 8046852:	683a      	ldr	r2, [r7, #0]
 8046854:	429a      	cmp	r2, r3
 8046856:	d001      	beq.n	804685c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8046858:	2301      	movs	r3, #1
 804685a:	e032      	b.n	80468c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 804685c:	687b      	ldr	r3, [r7, #4]
 804685e:	681b      	ldr	r3, [r3, #0]
 8046860:	f003 0304 	and.w	r3, r3, #4
 8046864:	2b00      	cmp	r3, #0
 8046866:	d008      	beq.n	804687a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8046868:	4b19      	ldr	r3, [pc, #100]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 804686a:	689b      	ldr	r3, [r3, #8]
 804686c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8046870:	687b      	ldr	r3, [r7, #4]
 8046872:	68db      	ldr	r3, [r3, #12]
 8046874:	4916      	ldr	r1, [pc, #88]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 8046876:	4313      	orrs	r3, r2
 8046878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 804687a:	687b      	ldr	r3, [r7, #4]
 804687c:	681b      	ldr	r3, [r3, #0]
 804687e:	f003 0308 	and.w	r3, r3, #8
 8046882:	2b00      	cmp	r3, #0
 8046884:	d009      	beq.n	804689a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8046886:	4b12      	ldr	r3, [pc, #72]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 8046888:	689b      	ldr	r3, [r3, #8]
 804688a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 804688e:	687b      	ldr	r3, [r7, #4]
 8046890:	691b      	ldr	r3, [r3, #16]
 8046892:	00db      	lsls	r3, r3, #3
 8046894:	490e      	ldr	r1, [pc, #56]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 8046896:	4313      	orrs	r3, r2
 8046898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 804689a:	f000 f821 	bl	80468e0 <HAL_RCC_GetSysClockFreq>
 804689e:	4602      	mov	r2, r0
 80468a0:	4b0b      	ldr	r3, [pc, #44]	; (80468d0 <HAL_RCC_ClockConfig+0x1bc>)
 80468a2:	689b      	ldr	r3, [r3, #8]
 80468a4:	091b      	lsrs	r3, r3, #4
 80468a6:	f003 030f 	and.w	r3, r3, #15
 80468aa:	490a      	ldr	r1, [pc, #40]	; (80468d4 <HAL_RCC_ClockConfig+0x1c0>)
 80468ac:	5ccb      	ldrb	r3, [r1, r3]
 80468ae:	fa22 f303 	lsr.w	r3, r2, r3
 80468b2:	4a09      	ldr	r2, [pc, #36]	; (80468d8 <HAL_RCC_ClockConfig+0x1c4>)
 80468b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80468b6:	4b09      	ldr	r3, [pc, #36]	; (80468dc <HAL_RCC_ClockConfig+0x1c8>)
 80468b8:	681b      	ldr	r3, [r3, #0]
 80468ba:	4618      	mov	r0, r3
 80468bc:	f7fa fe22 	bl	8041504 <HAL_InitTick>

  return HAL_OK;
 80468c0:	2300      	movs	r3, #0
}
 80468c2:	4618      	mov	r0, r3
 80468c4:	3710      	adds	r7, #16
 80468c6:	46bd      	mov	sp, r7
 80468c8:	bd80      	pop	{r7, pc}
 80468ca:	bf00      	nop
 80468cc:	40023c00 	.word	0x40023c00
 80468d0:	40023800 	.word	0x40023800
 80468d4:	0804cc54 	.word	0x0804cc54
 80468d8:	20000000 	.word	0x20000000
 80468dc:	20000054 	.word	0x20000054

080468e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80468e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80468e4:	b094      	sub	sp, #80	; 0x50
 80468e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80468e8:	2300      	movs	r3, #0
 80468ea:	647b      	str	r3, [r7, #68]	; 0x44
 80468ec:	2300      	movs	r3, #0
 80468ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80468f0:	2300      	movs	r3, #0
 80468f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80468f4:	2300      	movs	r3, #0
 80468f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80468f8:	4b79      	ldr	r3, [pc, #484]	; (8046ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 80468fa:	689b      	ldr	r3, [r3, #8]
 80468fc:	f003 030c 	and.w	r3, r3, #12
 8046900:	2b08      	cmp	r3, #8
 8046902:	d00d      	beq.n	8046920 <HAL_RCC_GetSysClockFreq+0x40>
 8046904:	2b08      	cmp	r3, #8
 8046906:	f200 80e1 	bhi.w	8046acc <HAL_RCC_GetSysClockFreq+0x1ec>
 804690a:	2b00      	cmp	r3, #0
 804690c:	d002      	beq.n	8046914 <HAL_RCC_GetSysClockFreq+0x34>
 804690e:	2b04      	cmp	r3, #4
 8046910:	d003      	beq.n	804691a <HAL_RCC_GetSysClockFreq+0x3a>
 8046912:	e0db      	b.n	8046acc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8046914:	4b73      	ldr	r3, [pc, #460]	; (8046ae4 <HAL_RCC_GetSysClockFreq+0x204>)
 8046916:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8046918:	e0db      	b.n	8046ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 804691a:	4b73      	ldr	r3, [pc, #460]	; (8046ae8 <HAL_RCC_GetSysClockFreq+0x208>)
 804691c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 804691e:	e0d8      	b.n	8046ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8046920:	4b6f      	ldr	r3, [pc, #444]	; (8046ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8046922:	685b      	ldr	r3, [r3, #4]
 8046924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8046928:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 804692a:	4b6d      	ldr	r3, [pc, #436]	; (8046ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 804692c:	685b      	ldr	r3, [r3, #4]
 804692e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8046932:	2b00      	cmp	r3, #0
 8046934:	d063      	beq.n	80469fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8046936:	4b6a      	ldr	r3, [pc, #424]	; (8046ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8046938:	685b      	ldr	r3, [r3, #4]
 804693a:	099b      	lsrs	r3, r3, #6
 804693c:	2200      	movs	r2, #0
 804693e:	63bb      	str	r3, [r7, #56]	; 0x38
 8046940:	63fa      	str	r2, [r7, #60]	; 0x3c
 8046942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8046948:	633b      	str	r3, [r7, #48]	; 0x30
 804694a:	2300      	movs	r3, #0
 804694c:	637b      	str	r3, [r7, #52]	; 0x34
 804694e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8046952:	4622      	mov	r2, r4
 8046954:	462b      	mov	r3, r5
 8046956:	f04f 0000 	mov.w	r0, #0
 804695a:	f04f 0100 	mov.w	r1, #0
 804695e:	0159      	lsls	r1, r3, #5
 8046960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8046964:	0150      	lsls	r0, r2, #5
 8046966:	4602      	mov	r2, r0
 8046968:	460b      	mov	r3, r1
 804696a:	4621      	mov	r1, r4
 804696c:	1a51      	subs	r1, r2, r1
 804696e:	6139      	str	r1, [r7, #16]
 8046970:	4629      	mov	r1, r5
 8046972:	eb63 0301 	sbc.w	r3, r3, r1
 8046976:	617b      	str	r3, [r7, #20]
 8046978:	f04f 0200 	mov.w	r2, #0
 804697c:	f04f 0300 	mov.w	r3, #0
 8046980:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8046984:	4659      	mov	r1, fp
 8046986:	018b      	lsls	r3, r1, #6
 8046988:	4651      	mov	r1, sl
 804698a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 804698e:	4651      	mov	r1, sl
 8046990:	018a      	lsls	r2, r1, #6
 8046992:	4651      	mov	r1, sl
 8046994:	ebb2 0801 	subs.w	r8, r2, r1
 8046998:	4659      	mov	r1, fp
 804699a:	eb63 0901 	sbc.w	r9, r3, r1
 804699e:	f04f 0200 	mov.w	r2, #0
 80469a2:	f04f 0300 	mov.w	r3, #0
 80469a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80469aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80469ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80469b2:	4690      	mov	r8, r2
 80469b4:	4699      	mov	r9, r3
 80469b6:	4623      	mov	r3, r4
 80469b8:	eb18 0303 	adds.w	r3, r8, r3
 80469bc:	60bb      	str	r3, [r7, #8]
 80469be:	462b      	mov	r3, r5
 80469c0:	eb49 0303 	adc.w	r3, r9, r3
 80469c4:	60fb      	str	r3, [r7, #12]
 80469c6:	f04f 0200 	mov.w	r2, #0
 80469ca:	f04f 0300 	mov.w	r3, #0
 80469ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80469d2:	4629      	mov	r1, r5
 80469d4:	024b      	lsls	r3, r1, #9
 80469d6:	4621      	mov	r1, r4
 80469d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80469dc:	4621      	mov	r1, r4
 80469de:	024a      	lsls	r2, r1, #9
 80469e0:	4610      	mov	r0, r2
 80469e2:	4619      	mov	r1, r3
 80469e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80469e6:	2200      	movs	r2, #0
 80469e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80469ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80469ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80469f0:	f7f9 fc4e 	bl	8040290 <__aeabi_uldivmod>
 80469f4:	4602      	mov	r2, r0
 80469f6:	460b      	mov	r3, r1
 80469f8:	4613      	mov	r3, r2
 80469fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80469fc:	e058      	b.n	8046ab0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80469fe:	4b38      	ldr	r3, [pc, #224]	; (8046ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8046a00:	685b      	ldr	r3, [r3, #4]
 8046a02:	099b      	lsrs	r3, r3, #6
 8046a04:	2200      	movs	r2, #0
 8046a06:	4618      	mov	r0, r3
 8046a08:	4611      	mov	r1, r2
 8046a0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8046a0e:	623b      	str	r3, [r7, #32]
 8046a10:	2300      	movs	r3, #0
 8046a12:	627b      	str	r3, [r7, #36]	; 0x24
 8046a14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8046a18:	4642      	mov	r2, r8
 8046a1a:	464b      	mov	r3, r9
 8046a1c:	f04f 0000 	mov.w	r0, #0
 8046a20:	f04f 0100 	mov.w	r1, #0
 8046a24:	0159      	lsls	r1, r3, #5
 8046a26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8046a2a:	0150      	lsls	r0, r2, #5
 8046a2c:	4602      	mov	r2, r0
 8046a2e:	460b      	mov	r3, r1
 8046a30:	4641      	mov	r1, r8
 8046a32:	ebb2 0a01 	subs.w	sl, r2, r1
 8046a36:	4649      	mov	r1, r9
 8046a38:	eb63 0b01 	sbc.w	fp, r3, r1
 8046a3c:	f04f 0200 	mov.w	r2, #0
 8046a40:	f04f 0300 	mov.w	r3, #0
 8046a44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8046a48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8046a4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8046a50:	ebb2 040a 	subs.w	r4, r2, sl
 8046a54:	eb63 050b 	sbc.w	r5, r3, fp
 8046a58:	f04f 0200 	mov.w	r2, #0
 8046a5c:	f04f 0300 	mov.w	r3, #0
 8046a60:	00eb      	lsls	r3, r5, #3
 8046a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8046a66:	00e2      	lsls	r2, r4, #3
 8046a68:	4614      	mov	r4, r2
 8046a6a:	461d      	mov	r5, r3
 8046a6c:	4643      	mov	r3, r8
 8046a6e:	18e3      	adds	r3, r4, r3
 8046a70:	603b      	str	r3, [r7, #0]
 8046a72:	464b      	mov	r3, r9
 8046a74:	eb45 0303 	adc.w	r3, r5, r3
 8046a78:	607b      	str	r3, [r7, #4]
 8046a7a:	f04f 0200 	mov.w	r2, #0
 8046a7e:	f04f 0300 	mov.w	r3, #0
 8046a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8046a86:	4629      	mov	r1, r5
 8046a88:	028b      	lsls	r3, r1, #10
 8046a8a:	4621      	mov	r1, r4
 8046a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8046a90:	4621      	mov	r1, r4
 8046a92:	028a      	lsls	r2, r1, #10
 8046a94:	4610      	mov	r0, r2
 8046a96:	4619      	mov	r1, r3
 8046a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8046a9a:	2200      	movs	r2, #0
 8046a9c:	61bb      	str	r3, [r7, #24]
 8046a9e:	61fa      	str	r2, [r7, #28]
 8046aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8046aa4:	f7f9 fbf4 	bl	8040290 <__aeabi_uldivmod>
 8046aa8:	4602      	mov	r2, r0
 8046aaa:	460b      	mov	r3, r1
 8046aac:	4613      	mov	r3, r2
 8046aae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8046ab0:	4b0b      	ldr	r3, [pc, #44]	; (8046ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8046ab2:	685b      	ldr	r3, [r3, #4]
 8046ab4:	0c1b      	lsrs	r3, r3, #16
 8046ab6:	f003 0303 	and.w	r3, r3, #3
 8046aba:	3301      	adds	r3, #1
 8046abc:	005b      	lsls	r3, r3, #1
 8046abe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8046ac0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8046ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8046ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8046ac8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8046aca:	e002      	b.n	8046ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8046acc:	4b05      	ldr	r3, [pc, #20]	; (8046ae4 <HAL_RCC_GetSysClockFreq+0x204>)
 8046ace:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8046ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8046ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8046ad4:	4618      	mov	r0, r3
 8046ad6:	3750      	adds	r7, #80	; 0x50
 8046ad8:	46bd      	mov	sp, r7
 8046ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8046ade:	bf00      	nop
 8046ae0:	40023800 	.word	0x40023800
 8046ae4:	00f42400 	.word	0x00f42400
 8046ae8:	007a1200 	.word	0x007a1200

08046aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8046aec:	b480      	push	{r7}
 8046aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8046af0:	4b03      	ldr	r3, [pc, #12]	; (8046b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8046af2:	681b      	ldr	r3, [r3, #0]
}
 8046af4:	4618      	mov	r0, r3
 8046af6:	46bd      	mov	sp, r7
 8046af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046afc:	4770      	bx	lr
 8046afe:	bf00      	nop
 8046b00:	20000000 	.word	0x20000000

08046b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8046b04:	b580      	push	{r7, lr}
 8046b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8046b08:	f7ff fff0 	bl	8046aec <HAL_RCC_GetHCLKFreq>
 8046b0c:	4602      	mov	r2, r0
 8046b0e:	4b05      	ldr	r3, [pc, #20]	; (8046b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8046b10:	689b      	ldr	r3, [r3, #8]
 8046b12:	0a9b      	lsrs	r3, r3, #10
 8046b14:	f003 0307 	and.w	r3, r3, #7
 8046b18:	4903      	ldr	r1, [pc, #12]	; (8046b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8046b1a:	5ccb      	ldrb	r3, [r1, r3]
 8046b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8046b20:	4618      	mov	r0, r3
 8046b22:	bd80      	pop	{r7, pc}
 8046b24:	40023800 	.word	0x40023800
 8046b28:	0804cc64 	.word	0x0804cc64

08046b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8046b2c:	b580      	push	{r7, lr}
 8046b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8046b30:	f7ff ffdc 	bl	8046aec <HAL_RCC_GetHCLKFreq>
 8046b34:	4602      	mov	r2, r0
 8046b36:	4b05      	ldr	r3, [pc, #20]	; (8046b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8046b38:	689b      	ldr	r3, [r3, #8]
 8046b3a:	0b5b      	lsrs	r3, r3, #13
 8046b3c:	f003 0307 	and.w	r3, r3, #7
 8046b40:	4903      	ldr	r1, [pc, #12]	; (8046b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8046b42:	5ccb      	ldrb	r3, [r1, r3]
 8046b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8046b48:	4618      	mov	r0, r3
 8046b4a:	bd80      	pop	{r7, pc}
 8046b4c:	40023800 	.word	0x40023800
 8046b50:	0804cc64 	.word	0x0804cc64

08046b54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8046b54:	b480      	push	{r7}
 8046b56:	b083      	sub	sp, #12
 8046b58:	af00      	add	r7, sp, #0
 8046b5a:	6078      	str	r0, [r7, #4]
 8046b5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8046b5e:	687b      	ldr	r3, [r7, #4]
 8046b60:	220f      	movs	r2, #15
 8046b62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8046b64:	4b12      	ldr	r3, [pc, #72]	; (8046bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8046b66:	689b      	ldr	r3, [r3, #8]
 8046b68:	f003 0203 	and.w	r2, r3, #3
 8046b6c:	687b      	ldr	r3, [r7, #4]
 8046b6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8046b70:	4b0f      	ldr	r3, [pc, #60]	; (8046bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8046b72:	689b      	ldr	r3, [r3, #8]
 8046b74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8046b78:	687b      	ldr	r3, [r7, #4]
 8046b7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8046b7c:	4b0c      	ldr	r3, [pc, #48]	; (8046bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8046b7e:	689b      	ldr	r3, [r3, #8]
 8046b80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8046b84:	687b      	ldr	r3, [r7, #4]
 8046b86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8046b88:	4b09      	ldr	r3, [pc, #36]	; (8046bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8046b8a:	689b      	ldr	r3, [r3, #8]
 8046b8c:	08db      	lsrs	r3, r3, #3
 8046b8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8046b92:	687b      	ldr	r3, [r7, #4]
 8046b94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8046b96:	4b07      	ldr	r3, [pc, #28]	; (8046bb4 <HAL_RCC_GetClockConfig+0x60>)
 8046b98:	681b      	ldr	r3, [r3, #0]
 8046b9a:	f003 020f 	and.w	r2, r3, #15
 8046b9e:	683b      	ldr	r3, [r7, #0]
 8046ba0:	601a      	str	r2, [r3, #0]
}
 8046ba2:	bf00      	nop
 8046ba4:	370c      	adds	r7, #12
 8046ba6:	46bd      	mov	sp, r7
 8046ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046bac:	4770      	bx	lr
 8046bae:	bf00      	nop
 8046bb0:	40023800 	.word	0x40023800
 8046bb4:	40023c00 	.word	0x40023c00

08046bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8046bb8:	b580      	push	{r7, lr}
 8046bba:	b086      	sub	sp, #24
 8046bbc:	af00      	add	r7, sp, #0
 8046bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8046bc0:	2300      	movs	r3, #0
 8046bc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8046bc4:	2300      	movs	r3, #0
 8046bc6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8046bc8:	687b      	ldr	r3, [r7, #4]
 8046bca:	681b      	ldr	r3, [r3, #0]
 8046bcc:	f003 0301 	and.w	r3, r3, #1
 8046bd0:	2b00      	cmp	r3, #0
 8046bd2:	d10b      	bne.n	8046bec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8046bd4:	687b      	ldr	r3, [r7, #4]
 8046bd6:	681b      	ldr	r3, [r3, #0]
 8046bd8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8046bdc:	2b00      	cmp	r3, #0
 8046bde:	d105      	bne.n	8046bec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8046be0:	687b      	ldr	r3, [r7, #4]
 8046be2:	681b      	ldr	r3, [r3, #0]
 8046be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8046be8:	2b00      	cmp	r3, #0
 8046bea:	d075      	beq.n	8046cd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8046bec:	4b91      	ldr	r3, [pc, #580]	; (8046e34 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8046bee:	2200      	movs	r2, #0
 8046bf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8046bf2:	f7fb ffe3 	bl	8042bbc <HAL_GetTick>
 8046bf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8046bf8:	e008      	b.n	8046c0c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8046bfa:	f7fb ffdf 	bl	8042bbc <HAL_GetTick>
 8046bfe:	4602      	mov	r2, r0
 8046c00:	697b      	ldr	r3, [r7, #20]
 8046c02:	1ad3      	subs	r3, r2, r3
 8046c04:	2b02      	cmp	r3, #2
 8046c06:	d901      	bls.n	8046c0c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8046c08:	2303      	movs	r3, #3
 8046c0a:	e189      	b.n	8046f20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8046c0c:	4b8a      	ldr	r3, [pc, #552]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046c0e:	681b      	ldr	r3, [r3, #0]
 8046c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8046c14:	2b00      	cmp	r3, #0
 8046c16:	d1f0      	bne.n	8046bfa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8046c18:	687b      	ldr	r3, [r7, #4]
 8046c1a:	681b      	ldr	r3, [r3, #0]
 8046c1c:	f003 0301 	and.w	r3, r3, #1
 8046c20:	2b00      	cmp	r3, #0
 8046c22:	d009      	beq.n	8046c38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8046c24:	687b      	ldr	r3, [r7, #4]
 8046c26:	685b      	ldr	r3, [r3, #4]
 8046c28:	019a      	lsls	r2, r3, #6
 8046c2a:	687b      	ldr	r3, [r7, #4]
 8046c2c:	689b      	ldr	r3, [r3, #8]
 8046c2e:	071b      	lsls	r3, r3, #28
 8046c30:	4981      	ldr	r1, [pc, #516]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046c32:	4313      	orrs	r3, r2
 8046c34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8046c38:	687b      	ldr	r3, [r7, #4]
 8046c3a:	681b      	ldr	r3, [r3, #0]
 8046c3c:	f003 0302 	and.w	r3, r3, #2
 8046c40:	2b00      	cmp	r3, #0
 8046c42:	d01f      	beq.n	8046c84 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8046c44:	4b7c      	ldr	r3, [pc, #496]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8046c4a:	0f1b      	lsrs	r3, r3, #28
 8046c4c:	f003 0307 	and.w	r3, r3, #7
 8046c50:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8046c52:	687b      	ldr	r3, [r7, #4]
 8046c54:	685b      	ldr	r3, [r3, #4]
 8046c56:	019a      	lsls	r2, r3, #6
 8046c58:	687b      	ldr	r3, [r7, #4]
 8046c5a:	68db      	ldr	r3, [r3, #12]
 8046c5c:	061b      	lsls	r3, r3, #24
 8046c5e:	431a      	orrs	r2, r3
 8046c60:	693b      	ldr	r3, [r7, #16]
 8046c62:	071b      	lsls	r3, r3, #28
 8046c64:	4974      	ldr	r1, [pc, #464]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046c66:	4313      	orrs	r3, r2
 8046c68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8046c6c:	4b72      	ldr	r3, [pc, #456]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8046c72:	f023 021f 	bic.w	r2, r3, #31
 8046c76:	687b      	ldr	r3, [r7, #4]
 8046c78:	69db      	ldr	r3, [r3, #28]
 8046c7a:	3b01      	subs	r3, #1
 8046c7c:	496e      	ldr	r1, [pc, #440]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046c7e:	4313      	orrs	r3, r2
 8046c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8046c84:	687b      	ldr	r3, [r7, #4]
 8046c86:	681b      	ldr	r3, [r3, #0]
 8046c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8046c8c:	2b00      	cmp	r3, #0
 8046c8e:	d00d      	beq.n	8046cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8046c90:	687b      	ldr	r3, [r7, #4]
 8046c92:	685b      	ldr	r3, [r3, #4]
 8046c94:	019a      	lsls	r2, r3, #6
 8046c96:	687b      	ldr	r3, [r7, #4]
 8046c98:	68db      	ldr	r3, [r3, #12]
 8046c9a:	061b      	lsls	r3, r3, #24
 8046c9c:	431a      	orrs	r2, r3
 8046c9e:	687b      	ldr	r3, [r7, #4]
 8046ca0:	689b      	ldr	r3, [r3, #8]
 8046ca2:	071b      	lsls	r3, r3, #28
 8046ca4:	4964      	ldr	r1, [pc, #400]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046ca6:	4313      	orrs	r3, r2
 8046ca8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8046cac:	4b61      	ldr	r3, [pc, #388]	; (8046e34 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8046cae:	2201      	movs	r2, #1
 8046cb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8046cb2:	f7fb ff83 	bl	8042bbc <HAL_GetTick>
 8046cb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8046cb8:	e008      	b.n	8046ccc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8046cba:	f7fb ff7f 	bl	8042bbc <HAL_GetTick>
 8046cbe:	4602      	mov	r2, r0
 8046cc0:	697b      	ldr	r3, [r7, #20]
 8046cc2:	1ad3      	subs	r3, r2, r3
 8046cc4:	2b02      	cmp	r3, #2
 8046cc6:	d901      	bls.n	8046ccc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8046cc8:	2303      	movs	r3, #3
 8046cca:	e129      	b.n	8046f20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8046ccc:	4b5a      	ldr	r3, [pc, #360]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046cce:	681b      	ldr	r3, [r3, #0]
 8046cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8046cd4:	2b00      	cmp	r3, #0
 8046cd6:	d0f0      	beq.n	8046cba <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8046cd8:	687b      	ldr	r3, [r7, #4]
 8046cda:	681b      	ldr	r3, [r3, #0]
 8046cdc:	f003 0304 	and.w	r3, r3, #4
 8046ce0:	2b00      	cmp	r3, #0
 8046ce2:	d105      	bne.n	8046cf0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8046ce4:	687b      	ldr	r3, [r7, #4]
 8046ce6:	681b      	ldr	r3, [r3, #0]
 8046ce8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8046cec:	2b00      	cmp	r3, #0
 8046cee:	d079      	beq.n	8046de4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8046cf0:	4b52      	ldr	r3, [pc, #328]	; (8046e3c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8046cf2:	2200      	movs	r2, #0
 8046cf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8046cf6:	f7fb ff61 	bl	8042bbc <HAL_GetTick>
 8046cfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8046cfc:	e008      	b.n	8046d10 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8046cfe:	f7fb ff5d 	bl	8042bbc <HAL_GetTick>
 8046d02:	4602      	mov	r2, r0
 8046d04:	697b      	ldr	r3, [r7, #20]
 8046d06:	1ad3      	subs	r3, r2, r3
 8046d08:	2b02      	cmp	r3, #2
 8046d0a:	d901      	bls.n	8046d10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8046d0c:	2303      	movs	r3, #3
 8046d0e:	e107      	b.n	8046f20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8046d10:	4b49      	ldr	r3, [pc, #292]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046d12:	681b      	ldr	r3, [r3, #0]
 8046d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8046d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8046d1c:	d0ef      	beq.n	8046cfe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8046d1e:	687b      	ldr	r3, [r7, #4]
 8046d20:	681b      	ldr	r3, [r3, #0]
 8046d22:	f003 0304 	and.w	r3, r3, #4
 8046d26:	2b00      	cmp	r3, #0
 8046d28:	d020      	beq.n	8046d6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8046d2a:	4b43      	ldr	r3, [pc, #268]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046d30:	0f1b      	lsrs	r3, r3, #28
 8046d32:	f003 0307 	and.w	r3, r3, #7
 8046d36:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8046d38:	687b      	ldr	r3, [r7, #4]
 8046d3a:	691b      	ldr	r3, [r3, #16]
 8046d3c:	019a      	lsls	r2, r3, #6
 8046d3e:	687b      	ldr	r3, [r7, #4]
 8046d40:	695b      	ldr	r3, [r3, #20]
 8046d42:	061b      	lsls	r3, r3, #24
 8046d44:	431a      	orrs	r2, r3
 8046d46:	693b      	ldr	r3, [r7, #16]
 8046d48:	071b      	lsls	r3, r3, #28
 8046d4a:	493b      	ldr	r1, [pc, #236]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046d4c:	4313      	orrs	r3, r2
 8046d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8046d52:	4b39      	ldr	r3, [pc, #228]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8046d58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8046d5c:	687b      	ldr	r3, [r7, #4]
 8046d5e:	6a1b      	ldr	r3, [r3, #32]
 8046d60:	3b01      	subs	r3, #1
 8046d62:	021b      	lsls	r3, r3, #8
 8046d64:	4934      	ldr	r1, [pc, #208]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046d66:	4313      	orrs	r3, r2
 8046d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8046d6c:	687b      	ldr	r3, [r7, #4]
 8046d6e:	681b      	ldr	r3, [r3, #0]
 8046d70:	f003 0308 	and.w	r3, r3, #8
 8046d74:	2b00      	cmp	r3, #0
 8046d76:	d01e      	beq.n	8046db6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8046d78:	4b2f      	ldr	r3, [pc, #188]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046d7e:	0e1b      	lsrs	r3, r3, #24
 8046d80:	f003 030f 	and.w	r3, r3, #15
 8046d84:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8046d86:	687b      	ldr	r3, [r7, #4]
 8046d88:	691b      	ldr	r3, [r3, #16]
 8046d8a:	019a      	lsls	r2, r3, #6
 8046d8c:	693b      	ldr	r3, [r7, #16]
 8046d8e:	061b      	lsls	r3, r3, #24
 8046d90:	431a      	orrs	r2, r3
 8046d92:	687b      	ldr	r3, [r7, #4]
 8046d94:	699b      	ldr	r3, [r3, #24]
 8046d96:	071b      	lsls	r3, r3, #28
 8046d98:	4927      	ldr	r1, [pc, #156]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046d9a:	4313      	orrs	r3, r2
 8046d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8046da0:	4b25      	ldr	r3, [pc, #148]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8046da6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8046daa:	687b      	ldr	r3, [r7, #4]
 8046dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046dae:	4922      	ldr	r1, [pc, #136]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046db0:	4313      	orrs	r3, r2
 8046db2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8046db6:	4b21      	ldr	r3, [pc, #132]	; (8046e3c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8046db8:	2201      	movs	r2, #1
 8046dba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8046dbc:	f7fb fefe 	bl	8042bbc <HAL_GetTick>
 8046dc0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8046dc2:	e008      	b.n	8046dd6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8046dc4:	f7fb fefa 	bl	8042bbc <HAL_GetTick>
 8046dc8:	4602      	mov	r2, r0
 8046dca:	697b      	ldr	r3, [r7, #20]
 8046dcc:	1ad3      	subs	r3, r2, r3
 8046dce:	2b02      	cmp	r3, #2
 8046dd0:	d901      	bls.n	8046dd6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8046dd2:	2303      	movs	r3, #3
 8046dd4:	e0a4      	b.n	8046f20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8046dd6:	4b18      	ldr	r3, [pc, #96]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046dd8:	681b      	ldr	r3, [r3, #0]
 8046dda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8046dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8046de2:	d1ef      	bne.n	8046dc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8046de4:	687b      	ldr	r3, [r7, #4]
 8046de6:	681b      	ldr	r3, [r3, #0]
 8046de8:	f003 0320 	and.w	r3, r3, #32
 8046dec:	2b00      	cmp	r3, #0
 8046dee:	f000 808b 	beq.w	8046f08 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8046df2:	2300      	movs	r3, #0
 8046df4:	60fb      	str	r3, [r7, #12]
 8046df6:	4b10      	ldr	r3, [pc, #64]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046dfa:	4a0f      	ldr	r2, [pc, #60]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8046e00:	6413      	str	r3, [r2, #64]	; 0x40
 8046e02:	4b0d      	ldr	r3, [pc, #52]	; (8046e38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8046e0a:	60fb      	str	r3, [r7, #12]
 8046e0c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8046e0e:	4b0c      	ldr	r3, [pc, #48]	; (8046e40 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8046e10:	681b      	ldr	r3, [r3, #0]
 8046e12:	4a0b      	ldr	r2, [pc, #44]	; (8046e40 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8046e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8046e18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8046e1a:	f7fb fecf 	bl	8042bbc <HAL_GetTick>
 8046e1e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8046e20:	e010      	b.n	8046e44 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8046e22:	f7fb fecb 	bl	8042bbc <HAL_GetTick>
 8046e26:	4602      	mov	r2, r0
 8046e28:	697b      	ldr	r3, [r7, #20]
 8046e2a:	1ad3      	subs	r3, r2, r3
 8046e2c:	2b02      	cmp	r3, #2
 8046e2e:	d909      	bls.n	8046e44 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8046e30:	2303      	movs	r3, #3
 8046e32:	e075      	b.n	8046f20 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8046e34:	42470068 	.word	0x42470068
 8046e38:	40023800 	.word	0x40023800
 8046e3c:	42470070 	.word	0x42470070
 8046e40:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8046e44:	4b38      	ldr	r3, [pc, #224]	; (8046f28 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8046e46:	681b      	ldr	r3, [r3, #0]
 8046e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8046e4c:	2b00      	cmp	r3, #0
 8046e4e:	d0e8      	beq.n	8046e22 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8046e50:	4b36      	ldr	r3, [pc, #216]	; (8046f2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8046e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8046e58:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8046e5a:	693b      	ldr	r3, [r7, #16]
 8046e5c:	2b00      	cmp	r3, #0
 8046e5e:	d02f      	beq.n	8046ec0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8046e60:	687b      	ldr	r3, [r7, #4]
 8046e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8046e68:	693a      	ldr	r2, [r7, #16]
 8046e6a:	429a      	cmp	r2, r3
 8046e6c:	d028      	beq.n	8046ec0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8046e6e:	4b2f      	ldr	r3, [pc, #188]	; (8046f2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8046e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8046e76:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8046e78:	4b2d      	ldr	r3, [pc, #180]	; (8046f30 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8046e7a:	2201      	movs	r2, #1
 8046e7c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8046e7e:	4b2c      	ldr	r3, [pc, #176]	; (8046f30 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8046e80:	2200      	movs	r2, #0
 8046e82:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8046e84:	4a29      	ldr	r2, [pc, #164]	; (8046f2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8046e86:	693b      	ldr	r3, [r7, #16]
 8046e88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8046e8a:	4b28      	ldr	r3, [pc, #160]	; (8046f2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8046e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046e8e:	f003 0301 	and.w	r3, r3, #1
 8046e92:	2b01      	cmp	r3, #1
 8046e94:	d114      	bne.n	8046ec0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8046e96:	f7fb fe91 	bl	8042bbc <HAL_GetTick>
 8046e9a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8046e9c:	e00a      	b.n	8046eb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8046e9e:	f7fb fe8d 	bl	8042bbc <HAL_GetTick>
 8046ea2:	4602      	mov	r2, r0
 8046ea4:	697b      	ldr	r3, [r7, #20]
 8046ea6:	1ad3      	subs	r3, r2, r3
 8046ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8046eac:	4293      	cmp	r3, r2
 8046eae:	d901      	bls.n	8046eb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8046eb0:	2303      	movs	r3, #3
 8046eb2:	e035      	b.n	8046f20 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8046eb4:	4b1d      	ldr	r3, [pc, #116]	; (8046f2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8046eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046eb8:	f003 0302 	and.w	r3, r3, #2
 8046ebc:	2b00      	cmp	r3, #0
 8046ebe:	d0ee      	beq.n	8046e9e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8046ec0:	687b      	ldr	r3, [r7, #4]
 8046ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8046ec8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8046ecc:	d10d      	bne.n	8046eea <HAL_RCCEx_PeriphCLKConfig+0x332>
 8046ece:	4b17      	ldr	r3, [pc, #92]	; (8046f2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8046ed0:	689b      	ldr	r3, [r3, #8]
 8046ed2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8046ed6:	687b      	ldr	r3, [r7, #4]
 8046ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046eda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8046ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8046ee2:	4912      	ldr	r1, [pc, #72]	; (8046f2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8046ee4:	4313      	orrs	r3, r2
 8046ee6:	608b      	str	r3, [r1, #8]
 8046ee8:	e005      	b.n	8046ef6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8046eea:	4b10      	ldr	r3, [pc, #64]	; (8046f2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8046eec:	689b      	ldr	r3, [r3, #8]
 8046eee:	4a0f      	ldr	r2, [pc, #60]	; (8046f2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8046ef0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8046ef4:	6093      	str	r3, [r2, #8]
 8046ef6:	4b0d      	ldr	r3, [pc, #52]	; (8046f2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8046ef8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8046efa:	687b      	ldr	r3, [r7, #4]
 8046efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8046f02:	490a      	ldr	r1, [pc, #40]	; (8046f2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8046f04:	4313      	orrs	r3, r2
 8046f06:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8046f08:	687b      	ldr	r3, [r7, #4]
 8046f0a:	681b      	ldr	r3, [r3, #0]
 8046f0c:	f003 0310 	and.w	r3, r3, #16
 8046f10:	2b00      	cmp	r3, #0
 8046f12:	d004      	beq.n	8046f1e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8046f14:	687b      	ldr	r3, [r7, #4]
 8046f16:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8046f1a:	4b06      	ldr	r3, [pc, #24]	; (8046f34 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8046f1c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8046f1e:	2300      	movs	r3, #0
}
 8046f20:	4618      	mov	r0, r3
 8046f22:	3718      	adds	r7, #24
 8046f24:	46bd      	mov	sp, r7
 8046f26:	bd80      	pop	{r7, pc}
 8046f28:	40007000 	.word	0x40007000
 8046f2c:	40023800 	.word	0x40023800
 8046f30:	42470e40 	.word	0x42470e40
 8046f34:	424711e0 	.word	0x424711e0

08046f38 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8046f38:	b580      	push	{r7, lr}
 8046f3a:	b082      	sub	sp, #8
 8046f3c:	af00      	add	r7, sp, #0
 8046f3e:	6078      	str	r0, [r7, #4]
 8046f40:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8046f42:	687b      	ldr	r3, [r7, #4]
 8046f44:	2b00      	cmp	r3, #0
 8046f46:	d101      	bne.n	8046f4c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8046f48:	2301      	movs	r3, #1
 8046f4a:	e025      	b.n	8046f98 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8046f4c:	687b      	ldr	r3, [r7, #4]
 8046f4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8046f52:	b2db      	uxtb	r3, r3
 8046f54:	2b00      	cmp	r3, #0
 8046f56:	d106      	bne.n	8046f66 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8046f58:	687b      	ldr	r3, [r7, #4]
 8046f5a:	2200      	movs	r2, #0
 8046f5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8046f60:	6878      	ldr	r0, [r7, #4]
 8046f62:	f7fa fac5 	bl	80414f0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8046f66:	687b      	ldr	r3, [r7, #4]
 8046f68:	2202      	movs	r2, #2
 8046f6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8046f6e:	687b      	ldr	r3, [r7, #4]
 8046f70:	681a      	ldr	r2, [r3, #0]
 8046f72:	687b      	ldr	r3, [r7, #4]
 8046f74:	3304      	adds	r3, #4
 8046f76:	4619      	mov	r1, r3
 8046f78:	4610      	mov	r0, r2
 8046f7a:	f001 fd91 	bl	8048aa0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8046f7e:	687b      	ldr	r3, [r7, #4]
 8046f80:	6818      	ldr	r0, [r3, #0]
 8046f82:	687b      	ldr	r3, [r7, #4]
 8046f84:	685b      	ldr	r3, [r3, #4]
 8046f86:	461a      	mov	r2, r3
 8046f88:	6839      	ldr	r1, [r7, #0]
 8046f8a:	f001 fde6 	bl	8048b5a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8046f8e:	687b      	ldr	r3, [r7, #4]
 8046f90:	2201      	movs	r2, #1
 8046f92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8046f96:	2300      	movs	r3, #0
}
 8046f98:	4618      	mov	r0, r3
 8046f9a:	3708      	adds	r7, #8
 8046f9c:	46bd      	mov	sp, r7
 8046f9e:	bd80      	pop	{r7, pc}

08046fa0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8046fa0:	b580      	push	{r7, lr}
 8046fa2:	b086      	sub	sp, #24
 8046fa4:	af00      	add	r7, sp, #0
 8046fa6:	60f8      	str	r0, [r7, #12]
 8046fa8:	60b9      	str	r1, [r7, #8]
 8046faa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8046fac:	68fb      	ldr	r3, [r7, #12]
 8046fae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8046fb2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8046fb4:	7dfb      	ldrb	r3, [r7, #23]
 8046fb6:	2b02      	cmp	r3, #2
 8046fb8:	d101      	bne.n	8046fbe <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8046fba:	2302      	movs	r3, #2
 8046fbc:	e021      	b.n	8047002 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8046fbe:	7dfb      	ldrb	r3, [r7, #23]
 8046fc0:	2b01      	cmp	r3, #1
 8046fc2:	d002      	beq.n	8046fca <HAL_SDRAM_SendCommand+0x2a>
 8046fc4:	7dfb      	ldrb	r3, [r7, #23]
 8046fc6:	2b05      	cmp	r3, #5
 8046fc8:	d118      	bne.n	8046ffc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8046fca:	68fb      	ldr	r3, [r7, #12]
 8046fcc:	2202      	movs	r2, #2
 8046fce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8046fd2:	68fb      	ldr	r3, [r7, #12]
 8046fd4:	681b      	ldr	r3, [r3, #0]
 8046fd6:	687a      	ldr	r2, [r7, #4]
 8046fd8:	68b9      	ldr	r1, [r7, #8]
 8046fda:	4618      	mov	r0, r3
 8046fdc:	f001 fe26 	bl	8048c2c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8046fe0:	68bb      	ldr	r3, [r7, #8]
 8046fe2:	681b      	ldr	r3, [r3, #0]
 8046fe4:	2b02      	cmp	r3, #2
 8046fe6:	d104      	bne.n	8046ff2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8046fe8:	68fb      	ldr	r3, [r7, #12]
 8046fea:	2205      	movs	r2, #5
 8046fec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8046ff0:	e006      	b.n	8047000 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8046ff2:	68fb      	ldr	r3, [r7, #12]
 8046ff4:	2201      	movs	r2, #1
 8046ff6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8046ffa:	e001      	b.n	8047000 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8046ffc:	2301      	movs	r3, #1
 8046ffe:	e000      	b.n	8047002 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8047000:	2300      	movs	r3, #0
}
 8047002:	4618      	mov	r0, r3
 8047004:	3718      	adds	r7, #24
 8047006:	46bd      	mov	sp, r7
 8047008:	bd80      	pop	{r7, pc}

0804700a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 804700a:	b580      	push	{r7, lr}
 804700c:	b082      	sub	sp, #8
 804700e:	af00      	add	r7, sp, #0
 8047010:	6078      	str	r0, [r7, #4]
 8047012:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8047014:	687b      	ldr	r3, [r7, #4]
 8047016:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 804701a:	b2db      	uxtb	r3, r3
 804701c:	2b02      	cmp	r3, #2
 804701e:	d101      	bne.n	8047024 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8047020:	2302      	movs	r3, #2
 8047022:	e016      	b.n	8047052 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8047024:	687b      	ldr	r3, [r7, #4]
 8047026:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 804702a:	b2db      	uxtb	r3, r3
 804702c:	2b01      	cmp	r3, #1
 804702e:	d10f      	bne.n	8047050 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8047030:	687b      	ldr	r3, [r7, #4]
 8047032:	2202      	movs	r2, #2
 8047034:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8047038:	687b      	ldr	r3, [r7, #4]
 804703a:	681b      	ldr	r3, [r3, #0]
 804703c:	6839      	ldr	r1, [r7, #0]
 804703e:	4618      	mov	r0, r3
 8047040:	f001 fe31 	bl	8048ca6 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8047044:	687b      	ldr	r3, [r7, #4]
 8047046:	2201      	movs	r2, #1
 8047048:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 804704c:	2300      	movs	r3, #0
 804704e:	e000      	b.n	8047052 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8047050:	2301      	movs	r3, #1
}
 8047052:	4618      	mov	r0, r3
 8047054:	3708      	adds	r7, #8
 8047056:	46bd      	mov	sp, r7
 8047058:	bd80      	pop	{r7, pc}

0804705a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 804705a:	b580      	push	{r7, lr}
 804705c:	b082      	sub	sp, #8
 804705e:	af00      	add	r7, sp, #0
 8047060:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8047062:	687b      	ldr	r3, [r7, #4]
 8047064:	2b00      	cmp	r3, #0
 8047066:	d101      	bne.n	804706c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8047068:	2301      	movs	r3, #1
 804706a:	e07b      	b.n	8047164 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 804706c:	687b      	ldr	r3, [r7, #4]
 804706e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8047070:	2b00      	cmp	r3, #0
 8047072:	d108      	bne.n	8047086 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8047074:	687b      	ldr	r3, [r7, #4]
 8047076:	685b      	ldr	r3, [r3, #4]
 8047078:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804707c:	d009      	beq.n	8047092 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 804707e:	687b      	ldr	r3, [r7, #4]
 8047080:	2200      	movs	r2, #0
 8047082:	61da      	str	r2, [r3, #28]
 8047084:	e005      	b.n	8047092 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8047086:	687b      	ldr	r3, [r7, #4]
 8047088:	2200      	movs	r2, #0
 804708a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 804708c:	687b      	ldr	r3, [r7, #4]
 804708e:	2200      	movs	r2, #0
 8047090:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8047092:	687b      	ldr	r3, [r7, #4]
 8047094:	2200      	movs	r2, #0
 8047096:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8047098:	687b      	ldr	r3, [r7, #4]
 804709a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 804709e:	b2db      	uxtb	r3, r3
 80470a0:	2b00      	cmp	r3, #0
 80470a2:	d106      	bne.n	80470b2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80470a4:	687b      	ldr	r3, [r7, #4]
 80470a6:	2200      	movs	r2, #0
 80470a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80470ac:	6878      	ldr	r0, [r7, #4]
 80470ae:	f7fa f8bd 	bl	804122c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80470b2:	687b      	ldr	r3, [r7, #4]
 80470b4:	2202      	movs	r2, #2
 80470b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80470ba:	687b      	ldr	r3, [r7, #4]
 80470bc:	681b      	ldr	r3, [r3, #0]
 80470be:	681a      	ldr	r2, [r3, #0]
 80470c0:	687b      	ldr	r3, [r7, #4]
 80470c2:	681b      	ldr	r3, [r3, #0]
 80470c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80470c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80470ca:	687b      	ldr	r3, [r7, #4]
 80470cc:	685b      	ldr	r3, [r3, #4]
 80470ce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80470d2:	687b      	ldr	r3, [r7, #4]
 80470d4:	689b      	ldr	r3, [r3, #8]
 80470d6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80470da:	431a      	orrs	r2, r3
 80470dc:	687b      	ldr	r3, [r7, #4]
 80470de:	68db      	ldr	r3, [r3, #12]
 80470e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80470e4:	431a      	orrs	r2, r3
 80470e6:	687b      	ldr	r3, [r7, #4]
 80470e8:	691b      	ldr	r3, [r3, #16]
 80470ea:	f003 0302 	and.w	r3, r3, #2
 80470ee:	431a      	orrs	r2, r3
 80470f0:	687b      	ldr	r3, [r7, #4]
 80470f2:	695b      	ldr	r3, [r3, #20]
 80470f4:	f003 0301 	and.w	r3, r3, #1
 80470f8:	431a      	orrs	r2, r3
 80470fa:	687b      	ldr	r3, [r7, #4]
 80470fc:	699b      	ldr	r3, [r3, #24]
 80470fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8047102:	431a      	orrs	r2, r3
 8047104:	687b      	ldr	r3, [r7, #4]
 8047106:	69db      	ldr	r3, [r3, #28]
 8047108:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804710c:	431a      	orrs	r2, r3
 804710e:	687b      	ldr	r3, [r7, #4]
 8047110:	6a1b      	ldr	r3, [r3, #32]
 8047112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8047116:	ea42 0103 	orr.w	r1, r2, r3
 804711a:	687b      	ldr	r3, [r7, #4]
 804711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804711e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8047122:	687b      	ldr	r3, [r7, #4]
 8047124:	681b      	ldr	r3, [r3, #0]
 8047126:	430a      	orrs	r2, r1
 8047128:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 804712a:	687b      	ldr	r3, [r7, #4]
 804712c:	699b      	ldr	r3, [r3, #24]
 804712e:	0c1b      	lsrs	r3, r3, #16
 8047130:	f003 0104 	and.w	r1, r3, #4
 8047134:	687b      	ldr	r3, [r7, #4]
 8047136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8047138:	f003 0210 	and.w	r2, r3, #16
 804713c:	687b      	ldr	r3, [r7, #4]
 804713e:	681b      	ldr	r3, [r3, #0]
 8047140:	430a      	orrs	r2, r1
 8047142:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8047144:	687b      	ldr	r3, [r7, #4]
 8047146:	681b      	ldr	r3, [r3, #0]
 8047148:	69da      	ldr	r2, [r3, #28]
 804714a:	687b      	ldr	r3, [r7, #4]
 804714c:	681b      	ldr	r3, [r3, #0]
 804714e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8047152:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8047154:	687b      	ldr	r3, [r7, #4]
 8047156:	2200      	movs	r2, #0
 8047158:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 804715a:	687b      	ldr	r3, [r7, #4]
 804715c:	2201      	movs	r2, #1
 804715e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8047162:	2300      	movs	r3, #0
}
 8047164:	4618      	mov	r0, r3
 8047166:	3708      	adds	r7, #8
 8047168:	46bd      	mov	sp, r7
 804716a:	bd80      	pop	{r7, pc}

0804716c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 804716c:	b580      	push	{r7, lr}
 804716e:	b082      	sub	sp, #8
 8047170:	af00      	add	r7, sp, #0
 8047172:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8047174:	687b      	ldr	r3, [r7, #4]
 8047176:	2b00      	cmp	r3, #0
 8047178:	d101      	bne.n	804717e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 804717a:	2301      	movs	r3, #1
 804717c:	e01a      	b.n	80471b4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 804717e:	687b      	ldr	r3, [r7, #4]
 8047180:	2202      	movs	r2, #2
 8047182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8047186:	687b      	ldr	r3, [r7, #4]
 8047188:	681b      	ldr	r3, [r3, #0]
 804718a:	681a      	ldr	r2, [r3, #0]
 804718c:	687b      	ldr	r3, [r7, #4]
 804718e:	681b      	ldr	r3, [r3, #0]
 8047190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047194:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8047196:	6878      	ldr	r0, [r7, #4]
 8047198:	f7fa f890 	bl	80412bc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 804719c:	687b      	ldr	r3, [r7, #4]
 804719e:	2200      	movs	r2, #0
 80471a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80471a2:	687b      	ldr	r3, [r7, #4]
 80471a4:	2200      	movs	r2, #0
 80471a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80471aa:	687b      	ldr	r3, [r7, #4]
 80471ac:	2200      	movs	r2, #0
 80471ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80471b2:	2300      	movs	r3, #0
}
 80471b4:	4618      	mov	r0, r3
 80471b6:	3708      	adds	r7, #8
 80471b8:	46bd      	mov	sp, r7
 80471ba:	bd80      	pop	{r7, pc}

080471bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80471bc:	b580      	push	{r7, lr}
 80471be:	b088      	sub	sp, #32
 80471c0:	af00      	add	r7, sp, #0
 80471c2:	60f8      	str	r0, [r7, #12]
 80471c4:	60b9      	str	r1, [r7, #8]
 80471c6:	603b      	str	r3, [r7, #0]
 80471c8:	4613      	mov	r3, r2
 80471ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80471cc:	2300      	movs	r3, #0
 80471ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80471d0:	68fb      	ldr	r3, [r7, #12]
 80471d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80471d6:	2b01      	cmp	r3, #1
 80471d8:	d101      	bne.n	80471de <HAL_SPI_Transmit+0x22>
 80471da:	2302      	movs	r3, #2
 80471dc:	e126      	b.n	804742c <HAL_SPI_Transmit+0x270>
 80471de:	68fb      	ldr	r3, [r7, #12]
 80471e0:	2201      	movs	r2, #1
 80471e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80471e6:	f7fb fce9 	bl	8042bbc <HAL_GetTick>
 80471ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80471ec:	88fb      	ldrh	r3, [r7, #6]
 80471ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80471f0:	68fb      	ldr	r3, [r7, #12]
 80471f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80471f6:	b2db      	uxtb	r3, r3
 80471f8:	2b01      	cmp	r3, #1
 80471fa:	d002      	beq.n	8047202 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80471fc:	2302      	movs	r3, #2
 80471fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8047200:	e10b      	b.n	804741a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8047202:	68bb      	ldr	r3, [r7, #8]
 8047204:	2b00      	cmp	r3, #0
 8047206:	d002      	beq.n	804720e <HAL_SPI_Transmit+0x52>
 8047208:	88fb      	ldrh	r3, [r7, #6]
 804720a:	2b00      	cmp	r3, #0
 804720c:	d102      	bne.n	8047214 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 804720e:	2301      	movs	r3, #1
 8047210:	77fb      	strb	r3, [r7, #31]
    goto error;
 8047212:	e102      	b.n	804741a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8047214:	68fb      	ldr	r3, [r7, #12]
 8047216:	2203      	movs	r2, #3
 8047218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 804721c:	68fb      	ldr	r3, [r7, #12]
 804721e:	2200      	movs	r2, #0
 8047220:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8047222:	68fb      	ldr	r3, [r7, #12]
 8047224:	68ba      	ldr	r2, [r7, #8]
 8047226:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8047228:	68fb      	ldr	r3, [r7, #12]
 804722a:	88fa      	ldrh	r2, [r7, #6]
 804722c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 804722e:	68fb      	ldr	r3, [r7, #12]
 8047230:	88fa      	ldrh	r2, [r7, #6]
 8047232:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8047234:	68fb      	ldr	r3, [r7, #12]
 8047236:	2200      	movs	r2, #0
 8047238:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 804723a:	68fb      	ldr	r3, [r7, #12]
 804723c:	2200      	movs	r2, #0
 804723e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8047240:	68fb      	ldr	r3, [r7, #12]
 8047242:	2200      	movs	r2, #0
 8047244:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8047246:	68fb      	ldr	r3, [r7, #12]
 8047248:	2200      	movs	r2, #0
 804724a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 804724c:	68fb      	ldr	r3, [r7, #12]
 804724e:	2200      	movs	r2, #0
 8047250:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8047252:	68fb      	ldr	r3, [r7, #12]
 8047254:	689b      	ldr	r3, [r3, #8]
 8047256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804725a:	d10f      	bne.n	804727c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 804725c:	68fb      	ldr	r3, [r7, #12]
 804725e:	681b      	ldr	r3, [r3, #0]
 8047260:	681a      	ldr	r2, [r3, #0]
 8047262:	68fb      	ldr	r3, [r7, #12]
 8047264:	681b      	ldr	r3, [r3, #0]
 8047266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804726a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 804726c:	68fb      	ldr	r3, [r7, #12]
 804726e:	681b      	ldr	r3, [r3, #0]
 8047270:	681a      	ldr	r2, [r3, #0]
 8047272:	68fb      	ldr	r3, [r7, #12]
 8047274:	681b      	ldr	r3, [r3, #0]
 8047276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804727a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 804727c:	68fb      	ldr	r3, [r7, #12]
 804727e:	681b      	ldr	r3, [r3, #0]
 8047280:	681b      	ldr	r3, [r3, #0]
 8047282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047286:	2b40      	cmp	r3, #64	; 0x40
 8047288:	d007      	beq.n	804729a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 804728a:	68fb      	ldr	r3, [r7, #12]
 804728c:	681b      	ldr	r3, [r3, #0]
 804728e:	681a      	ldr	r2, [r3, #0]
 8047290:	68fb      	ldr	r3, [r7, #12]
 8047292:	681b      	ldr	r3, [r3, #0]
 8047294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8047298:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 804729a:	68fb      	ldr	r3, [r7, #12]
 804729c:	68db      	ldr	r3, [r3, #12]
 804729e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80472a2:	d14b      	bne.n	804733c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80472a4:	68fb      	ldr	r3, [r7, #12]
 80472a6:	685b      	ldr	r3, [r3, #4]
 80472a8:	2b00      	cmp	r3, #0
 80472aa:	d002      	beq.n	80472b2 <HAL_SPI_Transmit+0xf6>
 80472ac:	8afb      	ldrh	r3, [r7, #22]
 80472ae:	2b01      	cmp	r3, #1
 80472b0:	d13e      	bne.n	8047330 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80472b2:	68fb      	ldr	r3, [r7, #12]
 80472b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80472b6:	881a      	ldrh	r2, [r3, #0]
 80472b8:	68fb      	ldr	r3, [r7, #12]
 80472ba:	681b      	ldr	r3, [r3, #0]
 80472bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80472be:	68fb      	ldr	r3, [r7, #12]
 80472c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80472c2:	1c9a      	adds	r2, r3, #2
 80472c4:	68fb      	ldr	r3, [r7, #12]
 80472c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80472c8:	68fb      	ldr	r3, [r7, #12]
 80472ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80472cc:	b29b      	uxth	r3, r3
 80472ce:	3b01      	subs	r3, #1
 80472d0:	b29a      	uxth	r2, r3
 80472d2:	68fb      	ldr	r3, [r7, #12]
 80472d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80472d6:	e02b      	b.n	8047330 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80472d8:	68fb      	ldr	r3, [r7, #12]
 80472da:	681b      	ldr	r3, [r3, #0]
 80472dc:	689b      	ldr	r3, [r3, #8]
 80472de:	f003 0302 	and.w	r3, r3, #2
 80472e2:	2b02      	cmp	r3, #2
 80472e4:	d112      	bne.n	804730c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80472e6:	68fb      	ldr	r3, [r7, #12]
 80472e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80472ea:	881a      	ldrh	r2, [r3, #0]
 80472ec:	68fb      	ldr	r3, [r7, #12]
 80472ee:	681b      	ldr	r3, [r3, #0]
 80472f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80472f2:	68fb      	ldr	r3, [r7, #12]
 80472f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80472f6:	1c9a      	adds	r2, r3, #2
 80472f8:	68fb      	ldr	r3, [r7, #12]
 80472fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80472fc:	68fb      	ldr	r3, [r7, #12]
 80472fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047300:	b29b      	uxth	r3, r3
 8047302:	3b01      	subs	r3, #1
 8047304:	b29a      	uxth	r2, r3
 8047306:	68fb      	ldr	r3, [r7, #12]
 8047308:	86da      	strh	r2, [r3, #54]	; 0x36
 804730a:	e011      	b.n	8047330 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 804730c:	f7fb fc56 	bl	8042bbc <HAL_GetTick>
 8047310:	4602      	mov	r2, r0
 8047312:	69bb      	ldr	r3, [r7, #24]
 8047314:	1ad3      	subs	r3, r2, r3
 8047316:	683a      	ldr	r2, [r7, #0]
 8047318:	429a      	cmp	r2, r3
 804731a:	d803      	bhi.n	8047324 <HAL_SPI_Transmit+0x168>
 804731c:	683b      	ldr	r3, [r7, #0]
 804731e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047322:	d102      	bne.n	804732a <HAL_SPI_Transmit+0x16e>
 8047324:	683b      	ldr	r3, [r7, #0]
 8047326:	2b00      	cmp	r3, #0
 8047328:	d102      	bne.n	8047330 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 804732a:	2303      	movs	r3, #3
 804732c:	77fb      	strb	r3, [r7, #31]
          goto error;
 804732e:	e074      	b.n	804741a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8047330:	68fb      	ldr	r3, [r7, #12]
 8047332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047334:	b29b      	uxth	r3, r3
 8047336:	2b00      	cmp	r3, #0
 8047338:	d1ce      	bne.n	80472d8 <HAL_SPI_Transmit+0x11c>
 804733a:	e04c      	b.n	80473d6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 804733c:	68fb      	ldr	r3, [r7, #12]
 804733e:	685b      	ldr	r3, [r3, #4]
 8047340:	2b00      	cmp	r3, #0
 8047342:	d002      	beq.n	804734a <HAL_SPI_Transmit+0x18e>
 8047344:	8afb      	ldrh	r3, [r7, #22]
 8047346:	2b01      	cmp	r3, #1
 8047348:	d140      	bne.n	80473cc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 804734a:	68fb      	ldr	r3, [r7, #12]
 804734c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804734e:	68fb      	ldr	r3, [r7, #12]
 8047350:	681b      	ldr	r3, [r3, #0]
 8047352:	330c      	adds	r3, #12
 8047354:	7812      	ldrb	r2, [r2, #0]
 8047356:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8047358:	68fb      	ldr	r3, [r7, #12]
 804735a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804735c:	1c5a      	adds	r2, r3, #1
 804735e:	68fb      	ldr	r3, [r7, #12]
 8047360:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8047362:	68fb      	ldr	r3, [r7, #12]
 8047364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047366:	b29b      	uxth	r3, r3
 8047368:	3b01      	subs	r3, #1
 804736a:	b29a      	uxth	r2, r3
 804736c:	68fb      	ldr	r3, [r7, #12]
 804736e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8047370:	e02c      	b.n	80473cc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8047372:	68fb      	ldr	r3, [r7, #12]
 8047374:	681b      	ldr	r3, [r3, #0]
 8047376:	689b      	ldr	r3, [r3, #8]
 8047378:	f003 0302 	and.w	r3, r3, #2
 804737c:	2b02      	cmp	r3, #2
 804737e:	d113      	bne.n	80473a8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8047380:	68fb      	ldr	r3, [r7, #12]
 8047382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8047384:	68fb      	ldr	r3, [r7, #12]
 8047386:	681b      	ldr	r3, [r3, #0]
 8047388:	330c      	adds	r3, #12
 804738a:	7812      	ldrb	r2, [r2, #0]
 804738c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 804738e:	68fb      	ldr	r3, [r7, #12]
 8047390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047392:	1c5a      	adds	r2, r3, #1
 8047394:	68fb      	ldr	r3, [r7, #12]
 8047396:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8047398:	68fb      	ldr	r3, [r7, #12]
 804739a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804739c:	b29b      	uxth	r3, r3
 804739e:	3b01      	subs	r3, #1
 80473a0:	b29a      	uxth	r2, r3
 80473a2:	68fb      	ldr	r3, [r7, #12]
 80473a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80473a6:	e011      	b.n	80473cc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80473a8:	f7fb fc08 	bl	8042bbc <HAL_GetTick>
 80473ac:	4602      	mov	r2, r0
 80473ae:	69bb      	ldr	r3, [r7, #24]
 80473b0:	1ad3      	subs	r3, r2, r3
 80473b2:	683a      	ldr	r2, [r7, #0]
 80473b4:	429a      	cmp	r2, r3
 80473b6:	d803      	bhi.n	80473c0 <HAL_SPI_Transmit+0x204>
 80473b8:	683b      	ldr	r3, [r7, #0]
 80473ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80473be:	d102      	bne.n	80473c6 <HAL_SPI_Transmit+0x20a>
 80473c0:	683b      	ldr	r3, [r7, #0]
 80473c2:	2b00      	cmp	r3, #0
 80473c4:	d102      	bne.n	80473cc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80473c6:	2303      	movs	r3, #3
 80473c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80473ca:	e026      	b.n	804741a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80473cc:	68fb      	ldr	r3, [r7, #12]
 80473ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80473d0:	b29b      	uxth	r3, r3
 80473d2:	2b00      	cmp	r3, #0
 80473d4:	d1cd      	bne.n	8047372 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80473d6:	69ba      	ldr	r2, [r7, #24]
 80473d8:	6839      	ldr	r1, [r7, #0]
 80473da:	68f8      	ldr	r0, [r7, #12]
 80473dc:	f000 fbda 	bl	8047b94 <SPI_EndRxTxTransaction>
 80473e0:	4603      	mov	r3, r0
 80473e2:	2b00      	cmp	r3, #0
 80473e4:	d002      	beq.n	80473ec <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80473e6:	68fb      	ldr	r3, [r7, #12]
 80473e8:	2220      	movs	r2, #32
 80473ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80473ec:	68fb      	ldr	r3, [r7, #12]
 80473ee:	689b      	ldr	r3, [r3, #8]
 80473f0:	2b00      	cmp	r3, #0
 80473f2:	d10a      	bne.n	804740a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80473f4:	2300      	movs	r3, #0
 80473f6:	613b      	str	r3, [r7, #16]
 80473f8:	68fb      	ldr	r3, [r7, #12]
 80473fa:	681b      	ldr	r3, [r3, #0]
 80473fc:	68db      	ldr	r3, [r3, #12]
 80473fe:	613b      	str	r3, [r7, #16]
 8047400:	68fb      	ldr	r3, [r7, #12]
 8047402:	681b      	ldr	r3, [r3, #0]
 8047404:	689b      	ldr	r3, [r3, #8]
 8047406:	613b      	str	r3, [r7, #16]
 8047408:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 804740a:	68fb      	ldr	r3, [r7, #12]
 804740c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804740e:	2b00      	cmp	r3, #0
 8047410:	d002      	beq.n	8047418 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8047412:	2301      	movs	r3, #1
 8047414:	77fb      	strb	r3, [r7, #31]
 8047416:	e000      	b.n	804741a <HAL_SPI_Transmit+0x25e>
  }

error:
 8047418:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 804741a:	68fb      	ldr	r3, [r7, #12]
 804741c:	2201      	movs	r2, #1
 804741e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8047422:	68fb      	ldr	r3, [r7, #12]
 8047424:	2200      	movs	r2, #0
 8047426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 804742a:	7ffb      	ldrb	r3, [r7, #31]
}
 804742c:	4618      	mov	r0, r3
 804742e:	3720      	adds	r7, #32
 8047430:	46bd      	mov	sp, r7
 8047432:	bd80      	pop	{r7, pc}

08047434 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8047434:	b580      	push	{r7, lr}
 8047436:	b088      	sub	sp, #32
 8047438:	af02      	add	r7, sp, #8
 804743a:	60f8      	str	r0, [r7, #12]
 804743c:	60b9      	str	r1, [r7, #8]
 804743e:	603b      	str	r3, [r7, #0]
 8047440:	4613      	mov	r3, r2
 8047442:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8047444:	2300      	movs	r3, #0
 8047446:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8047448:	68fb      	ldr	r3, [r7, #12]
 804744a:	685b      	ldr	r3, [r3, #4]
 804744c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047450:	d112      	bne.n	8047478 <HAL_SPI_Receive+0x44>
 8047452:	68fb      	ldr	r3, [r7, #12]
 8047454:	689b      	ldr	r3, [r3, #8]
 8047456:	2b00      	cmp	r3, #0
 8047458:	d10e      	bne.n	8047478 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 804745a:	68fb      	ldr	r3, [r7, #12]
 804745c:	2204      	movs	r2, #4
 804745e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8047462:	88fa      	ldrh	r2, [r7, #6]
 8047464:	683b      	ldr	r3, [r7, #0]
 8047466:	9300      	str	r3, [sp, #0]
 8047468:	4613      	mov	r3, r2
 804746a:	68ba      	ldr	r2, [r7, #8]
 804746c:	68b9      	ldr	r1, [r7, #8]
 804746e:	68f8      	ldr	r0, [r7, #12]
 8047470:	f000 f8f1 	bl	8047656 <HAL_SPI_TransmitReceive>
 8047474:	4603      	mov	r3, r0
 8047476:	e0ea      	b.n	804764e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8047478:	68fb      	ldr	r3, [r7, #12]
 804747a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 804747e:	2b01      	cmp	r3, #1
 8047480:	d101      	bne.n	8047486 <HAL_SPI_Receive+0x52>
 8047482:	2302      	movs	r3, #2
 8047484:	e0e3      	b.n	804764e <HAL_SPI_Receive+0x21a>
 8047486:	68fb      	ldr	r3, [r7, #12]
 8047488:	2201      	movs	r2, #1
 804748a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 804748e:	f7fb fb95 	bl	8042bbc <HAL_GetTick>
 8047492:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8047494:	68fb      	ldr	r3, [r7, #12]
 8047496:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 804749a:	b2db      	uxtb	r3, r3
 804749c:	2b01      	cmp	r3, #1
 804749e:	d002      	beq.n	80474a6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80474a0:	2302      	movs	r3, #2
 80474a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80474a4:	e0ca      	b.n	804763c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80474a6:	68bb      	ldr	r3, [r7, #8]
 80474a8:	2b00      	cmp	r3, #0
 80474aa:	d002      	beq.n	80474b2 <HAL_SPI_Receive+0x7e>
 80474ac:	88fb      	ldrh	r3, [r7, #6]
 80474ae:	2b00      	cmp	r3, #0
 80474b0:	d102      	bne.n	80474b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80474b2:	2301      	movs	r3, #1
 80474b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80474b6:	e0c1      	b.n	804763c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80474b8:	68fb      	ldr	r3, [r7, #12]
 80474ba:	2204      	movs	r2, #4
 80474bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80474c0:	68fb      	ldr	r3, [r7, #12]
 80474c2:	2200      	movs	r2, #0
 80474c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80474c6:	68fb      	ldr	r3, [r7, #12]
 80474c8:	68ba      	ldr	r2, [r7, #8]
 80474ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80474cc:	68fb      	ldr	r3, [r7, #12]
 80474ce:	88fa      	ldrh	r2, [r7, #6]
 80474d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80474d2:	68fb      	ldr	r3, [r7, #12]
 80474d4:	88fa      	ldrh	r2, [r7, #6]
 80474d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80474d8:	68fb      	ldr	r3, [r7, #12]
 80474da:	2200      	movs	r2, #0
 80474dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80474de:	68fb      	ldr	r3, [r7, #12]
 80474e0:	2200      	movs	r2, #0
 80474e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80474e4:	68fb      	ldr	r3, [r7, #12]
 80474e6:	2200      	movs	r2, #0
 80474e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80474ea:	68fb      	ldr	r3, [r7, #12]
 80474ec:	2200      	movs	r2, #0
 80474ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80474f0:	68fb      	ldr	r3, [r7, #12]
 80474f2:	2200      	movs	r2, #0
 80474f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80474f6:	68fb      	ldr	r3, [r7, #12]
 80474f8:	689b      	ldr	r3, [r3, #8]
 80474fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80474fe:	d10f      	bne.n	8047520 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8047500:	68fb      	ldr	r3, [r7, #12]
 8047502:	681b      	ldr	r3, [r3, #0]
 8047504:	681a      	ldr	r2, [r3, #0]
 8047506:	68fb      	ldr	r3, [r7, #12]
 8047508:	681b      	ldr	r3, [r3, #0]
 804750a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804750e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8047510:	68fb      	ldr	r3, [r7, #12]
 8047512:	681b      	ldr	r3, [r3, #0]
 8047514:	681a      	ldr	r2, [r3, #0]
 8047516:	68fb      	ldr	r3, [r7, #12]
 8047518:	681b      	ldr	r3, [r3, #0]
 804751a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 804751e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8047520:	68fb      	ldr	r3, [r7, #12]
 8047522:	681b      	ldr	r3, [r3, #0]
 8047524:	681b      	ldr	r3, [r3, #0]
 8047526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804752a:	2b40      	cmp	r3, #64	; 0x40
 804752c:	d007      	beq.n	804753e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 804752e:	68fb      	ldr	r3, [r7, #12]
 8047530:	681b      	ldr	r3, [r3, #0]
 8047532:	681a      	ldr	r2, [r3, #0]
 8047534:	68fb      	ldr	r3, [r7, #12]
 8047536:	681b      	ldr	r3, [r3, #0]
 8047538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 804753c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 804753e:	68fb      	ldr	r3, [r7, #12]
 8047540:	68db      	ldr	r3, [r3, #12]
 8047542:	2b00      	cmp	r3, #0
 8047544:	d162      	bne.n	804760c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8047546:	e02e      	b.n	80475a6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8047548:	68fb      	ldr	r3, [r7, #12]
 804754a:	681b      	ldr	r3, [r3, #0]
 804754c:	689b      	ldr	r3, [r3, #8]
 804754e:	f003 0301 	and.w	r3, r3, #1
 8047552:	2b01      	cmp	r3, #1
 8047554:	d115      	bne.n	8047582 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8047556:	68fb      	ldr	r3, [r7, #12]
 8047558:	681b      	ldr	r3, [r3, #0]
 804755a:	f103 020c 	add.w	r2, r3, #12
 804755e:	68fb      	ldr	r3, [r7, #12]
 8047560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047562:	7812      	ldrb	r2, [r2, #0]
 8047564:	b2d2      	uxtb	r2, r2
 8047566:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8047568:	68fb      	ldr	r3, [r7, #12]
 804756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804756c:	1c5a      	adds	r2, r3, #1
 804756e:	68fb      	ldr	r3, [r7, #12]
 8047570:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8047572:	68fb      	ldr	r3, [r7, #12]
 8047574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047576:	b29b      	uxth	r3, r3
 8047578:	3b01      	subs	r3, #1
 804757a:	b29a      	uxth	r2, r3
 804757c:	68fb      	ldr	r3, [r7, #12]
 804757e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8047580:	e011      	b.n	80475a6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8047582:	f7fb fb1b 	bl	8042bbc <HAL_GetTick>
 8047586:	4602      	mov	r2, r0
 8047588:	693b      	ldr	r3, [r7, #16]
 804758a:	1ad3      	subs	r3, r2, r3
 804758c:	683a      	ldr	r2, [r7, #0]
 804758e:	429a      	cmp	r2, r3
 8047590:	d803      	bhi.n	804759a <HAL_SPI_Receive+0x166>
 8047592:	683b      	ldr	r3, [r7, #0]
 8047594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047598:	d102      	bne.n	80475a0 <HAL_SPI_Receive+0x16c>
 804759a:	683b      	ldr	r3, [r7, #0]
 804759c:	2b00      	cmp	r3, #0
 804759e:	d102      	bne.n	80475a6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80475a0:	2303      	movs	r3, #3
 80475a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80475a4:	e04a      	b.n	804763c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80475a6:	68fb      	ldr	r3, [r7, #12]
 80475a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80475aa:	b29b      	uxth	r3, r3
 80475ac:	2b00      	cmp	r3, #0
 80475ae:	d1cb      	bne.n	8047548 <HAL_SPI_Receive+0x114>
 80475b0:	e031      	b.n	8047616 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80475b2:	68fb      	ldr	r3, [r7, #12]
 80475b4:	681b      	ldr	r3, [r3, #0]
 80475b6:	689b      	ldr	r3, [r3, #8]
 80475b8:	f003 0301 	and.w	r3, r3, #1
 80475bc:	2b01      	cmp	r3, #1
 80475be:	d113      	bne.n	80475e8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80475c0:	68fb      	ldr	r3, [r7, #12]
 80475c2:	681b      	ldr	r3, [r3, #0]
 80475c4:	68da      	ldr	r2, [r3, #12]
 80475c6:	68fb      	ldr	r3, [r7, #12]
 80475c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80475ca:	b292      	uxth	r2, r2
 80475cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80475ce:	68fb      	ldr	r3, [r7, #12]
 80475d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80475d2:	1c9a      	adds	r2, r3, #2
 80475d4:	68fb      	ldr	r3, [r7, #12]
 80475d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80475d8:	68fb      	ldr	r3, [r7, #12]
 80475da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80475dc:	b29b      	uxth	r3, r3
 80475de:	3b01      	subs	r3, #1
 80475e0:	b29a      	uxth	r2, r3
 80475e2:	68fb      	ldr	r3, [r7, #12]
 80475e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80475e6:	e011      	b.n	804760c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80475e8:	f7fb fae8 	bl	8042bbc <HAL_GetTick>
 80475ec:	4602      	mov	r2, r0
 80475ee:	693b      	ldr	r3, [r7, #16]
 80475f0:	1ad3      	subs	r3, r2, r3
 80475f2:	683a      	ldr	r2, [r7, #0]
 80475f4:	429a      	cmp	r2, r3
 80475f6:	d803      	bhi.n	8047600 <HAL_SPI_Receive+0x1cc>
 80475f8:	683b      	ldr	r3, [r7, #0]
 80475fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80475fe:	d102      	bne.n	8047606 <HAL_SPI_Receive+0x1d2>
 8047600:	683b      	ldr	r3, [r7, #0]
 8047602:	2b00      	cmp	r3, #0
 8047604:	d102      	bne.n	804760c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8047606:	2303      	movs	r3, #3
 8047608:	75fb      	strb	r3, [r7, #23]
          goto error;
 804760a:	e017      	b.n	804763c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 804760c:	68fb      	ldr	r3, [r7, #12]
 804760e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047610:	b29b      	uxth	r3, r3
 8047612:	2b00      	cmp	r3, #0
 8047614:	d1cd      	bne.n	80475b2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8047616:	693a      	ldr	r2, [r7, #16]
 8047618:	6839      	ldr	r1, [r7, #0]
 804761a:	68f8      	ldr	r0, [r7, #12]
 804761c:	f000 fa54 	bl	8047ac8 <SPI_EndRxTransaction>
 8047620:	4603      	mov	r3, r0
 8047622:	2b00      	cmp	r3, #0
 8047624:	d002      	beq.n	804762c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8047626:	68fb      	ldr	r3, [r7, #12]
 8047628:	2220      	movs	r2, #32
 804762a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 804762c:	68fb      	ldr	r3, [r7, #12]
 804762e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047630:	2b00      	cmp	r3, #0
 8047632:	d002      	beq.n	804763a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8047634:	2301      	movs	r3, #1
 8047636:	75fb      	strb	r3, [r7, #23]
 8047638:	e000      	b.n	804763c <HAL_SPI_Receive+0x208>
  }

error :
 804763a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 804763c:	68fb      	ldr	r3, [r7, #12]
 804763e:	2201      	movs	r2, #1
 8047640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8047644:	68fb      	ldr	r3, [r7, #12]
 8047646:	2200      	movs	r2, #0
 8047648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 804764c:	7dfb      	ldrb	r3, [r7, #23]
}
 804764e:	4618      	mov	r0, r3
 8047650:	3718      	adds	r7, #24
 8047652:	46bd      	mov	sp, r7
 8047654:	bd80      	pop	{r7, pc}

08047656 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8047656:	b580      	push	{r7, lr}
 8047658:	b08c      	sub	sp, #48	; 0x30
 804765a:	af00      	add	r7, sp, #0
 804765c:	60f8      	str	r0, [r7, #12]
 804765e:	60b9      	str	r1, [r7, #8]
 8047660:	607a      	str	r2, [r7, #4]
 8047662:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8047664:	2301      	movs	r3, #1
 8047666:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8047668:	2300      	movs	r3, #0
 804766a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 804766e:	68fb      	ldr	r3, [r7, #12]
 8047670:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8047674:	2b01      	cmp	r3, #1
 8047676:	d101      	bne.n	804767c <HAL_SPI_TransmitReceive+0x26>
 8047678:	2302      	movs	r3, #2
 804767a:	e18a      	b.n	8047992 <HAL_SPI_TransmitReceive+0x33c>
 804767c:	68fb      	ldr	r3, [r7, #12]
 804767e:	2201      	movs	r2, #1
 8047680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8047684:	f7fb fa9a 	bl	8042bbc <HAL_GetTick>
 8047688:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 804768a:	68fb      	ldr	r3, [r7, #12]
 804768c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8047690:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8047694:	68fb      	ldr	r3, [r7, #12]
 8047696:	685b      	ldr	r3, [r3, #4]
 8047698:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 804769a:	887b      	ldrh	r3, [r7, #2]
 804769c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 804769e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80476a2:	2b01      	cmp	r3, #1
 80476a4:	d00f      	beq.n	80476c6 <HAL_SPI_TransmitReceive+0x70>
 80476a6:	69fb      	ldr	r3, [r7, #28]
 80476a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80476ac:	d107      	bne.n	80476be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80476ae:	68fb      	ldr	r3, [r7, #12]
 80476b0:	689b      	ldr	r3, [r3, #8]
 80476b2:	2b00      	cmp	r3, #0
 80476b4:	d103      	bne.n	80476be <HAL_SPI_TransmitReceive+0x68>
 80476b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80476ba:	2b04      	cmp	r3, #4
 80476bc:	d003      	beq.n	80476c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80476be:	2302      	movs	r3, #2
 80476c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80476c4:	e15b      	b.n	804797e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80476c6:	68bb      	ldr	r3, [r7, #8]
 80476c8:	2b00      	cmp	r3, #0
 80476ca:	d005      	beq.n	80476d8 <HAL_SPI_TransmitReceive+0x82>
 80476cc:	687b      	ldr	r3, [r7, #4]
 80476ce:	2b00      	cmp	r3, #0
 80476d0:	d002      	beq.n	80476d8 <HAL_SPI_TransmitReceive+0x82>
 80476d2:	887b      	ldrh	r3, [r7, #2]
 80476d4:	2b00      	cmp	r3, #0
 80476d6:	d103      	bne.n	80476e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80476d8:	2301      	movs	r3, #1
 80476da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80476de:	e14e      	b.n	804797e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80476e0:	68fb      	ldr	r3, [r7, #12]
 80476e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80476e6:	b2db      	uxtb	r3, r3
 80476e8:	2b04      	cmp	r3, #4
 80476ea:	d003      	beq.n	80476f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80476ec:	68fb      	ldr	r3, [r7, #12]
 80476ee:	2205      	movs	r2, #5
 80476f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80476f4:	68fb      	ldr	r3, [r7, #12]
 80476f6:	2200      	movs	r2, #0
 80476f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80476fa:	68fb      	ldr	r3, [r7, #12]
 80476fc:	687a      	ldr	r2, [r7, #4]
 80476fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8047700:	68fb      	ldr	r3, [r7, #12]
 8047702:	887a      	ldrh	r2, [r7, #2]
 8047704:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8047706:	68fb      	ldr	r3, [r7, #12]
 8047708:	887a      	ldrh	r2, [r7, #2]
 804770a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 804770c:	68fb      	ldr	r3, [r7, #12]
 804770e:	68ba      	ldr	r2, [r7, #8]
 8047710:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8047712:	68fb      	ldr	r3, [r7, #12]
 8047714:	887a      	ldrh	r2, [r7, #2]
 8047716:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8047718:	68fb      	ldr	r3, [r7, #12]
 804771a:	887a      	ldrh	r2, [r7, #2]
 804771c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 804771e:	68fb      	ldr	r3, [r7, #12]
 8047720:	2200      	movs	r2, #0
 8047722:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8047724:	68fb      	ldr	r3, [r7, #12]
 8047726:	2200      	movs	r2, #0
 8047728:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 804772a:	68fb      	ldr	r3, [r7, #12]
 804772c:	681b      	ldr	r3, [r3, #0]
 804772e:	681b      	ldr	r3, [r3, #0]
 8047730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047734:	2b40      	cmp	r3, #64	; 0x40
 8047736:	d007      	beq.n	8047748 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8047738:	68fb      	ldr	r3, [r7, #12]
 804773a:	681b      	ldr	r3, [r3, #0]
 804773c:	681a      	ldr	r2, [r3, #0]
 804773e:	68fb      	ldr	r3, [r7, #12]
 8047740:	681b      	ldr	r3, [r3, #0]
 8047742:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8047746:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8047748:	68fb      	ldr	r3, [r7, #12]
 804774a:	68db      	ldr	r3, [r3, #12]
 804774c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8047750:	d178      	bne.n	8047844 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8047752:	68fb      	ldr	r3, [r7, #12]
 8047754:	685b      	ldr	r3, [r3, #4]
 8047756:	2b00      	cmp	r3, #0
 8047758:	d002      	beq.n	8047760 <HAL_SPI_TransmitReceive+0x10a>
 804775a:	8b7b      	ldrh	r3, [r7, #26]
 804775c:	2b01      	cmp	r3, #1
 804775e:	d166      	bne.n	804782e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8047760:	68fb      	ldr	r3, [r7, #12]
 8047762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047764:	881a      	ldrh	r2, [r3, #0]
 8047766:	68fb      	ldr	r3, [r7, #12]
 8047768:	681b      	ldr	r3, [r3, #0]
 804776a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 804776c:	68fb      	ldr	r3, [r7, #12]
 804776e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047770:	1c9a      	adds	r2, r3, #2
 8047772:	68fb      	ldr	r3, [r7, #12]
 8047774:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8047776:	68fb      	ldr	r3, [r7, #12]
 8047778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804777a:	b29b      	uxth	r3, r3
 804777c:	3b01      	subs	r3, #1
 804777e:	b29a      	uxth	r2, r3
 8047780:	68fb      	ldr	r3, [r7, #12]
 8047782:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047784:	e053      	b.n	804782e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8047786:	68fb      	ldr	r3, [r7, #12]
 8047788:	681b      	ldr	r3, [r3, #0]
 804778a:	689b      	ldr	r3, [r3, #8]
 804778c:	f003 0302 	and.w	r3, r3, #2
 8047790:	2b02      	cmp	r3, #2
 8047792:	d11b      	bne.n	80477cc <HAL_SPI_TransmitReceive+0x176>
 8047794:	68fb      	ldr	r3, [r7, #12]
 8047796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047798:	b29b      	uxth	r3, r3
 804779a:	2b00      	cmp	r3, #0
 804779c:	d016      	beq.n	80477cc <HAL_SPI_TransmitReceive+0x176>
 804779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80477a0:	2b01      	cmp	r3, #1
 80477a2:	d113      	bne.n	80477cc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80477a4:	68fb      	ldr	r3, [r7, #12]
 80477a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80477a8:	881a      	ldrh	r2, [r3, #0]
 80477aa:	68fb      	ldr	r3, [r7, #12]
 80477ac:	681b      	ldr	r3, [r3, #0]
 80477ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80477b0:	68fb      	ldr	r3, [r7, #12]
 80477b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80477b4:	1c9a      	adds	r2, r3, #2
 80477b6:	68fb      	ldr	r3, [r7, #12]
 80477b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80477ba:	68fb      	ldr	r3, [r7, #12]
 80477bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80477be:	b29b      	uxth	r3, r3
 80477c0:	3b01      	subs	r3, #1
 80477c2:	b29a      	uxth	r2, r3
 80477c4:	68fb      	ldr	r3, [r7, #12]
 80477c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80477c8:	2300      	movs	r3, #0
 80477ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80477cc:	68fb      	ldr	r3, [r7, #12]
 80477ce:	681b      	ldr	r3, [r3, #0]
 80477d0:	689b      	ldr	r3, [r3, #8]
 80477d2:	f003 0301 	and.w	r3, r3, #1
 80477d6:	2b01      	cmp	r3, #1
 80477d8:	d119      	bne.n	804780e <HAL_SPI_TransmitReceive+0x1b8>
 80477da:	68fb      	ldr	r3, [r7, #12]
 80477dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80477de:	b29b      	uxth	r3, r3
 80477e0:	2b00      	cmp	r3, #0
 80477e2:	d014      	beq.n	804780e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80477e4:	68fb      	ldr	r3, [r7, #12]
 80477e6:	681b      	ldr	r3, [r3, #0]
 80477e8:	68da      	ldr	r2, [r3, #12]
 80477ea:	68fb      	ldr	r3, [r7, #12]
 80477ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80477ee:	b292      	uxth	r2, r2
 80477f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80477f2:	68fb      	ldr	r3, [r7, #12]
 80477f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80477f6:	1c9a      	adds	r2, r3, #2
 80477f8:	68fb      	ldr	r3, [r7, #12]
 80477fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80477fc:	68fb      	ldr	r3, [r7, #12]
 80477fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047800:	b29b      	uxth	r3, r3
 8047802:	3b01      	subs	r3, #1
 8047804:	b29a      	uxth	r2, r3
 8047806:	68fb      	ldr	r3, [r7, #12]
 8047808:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 804780a:	2301      	movs	r3, #1
 804780c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 804780e:	f7fb f9d5 	bl	8042bbc <HAL_GetTick>
 8047812:	4602      	mov	r2, r0
 8047814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047816:	1ad3      	subs	r3, r2, r3
 8047818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 804781a:	429a      	cmp	r2, r3
 804781c:	d807      	bhi.n	804782e <HAL_SPI_TransmitReceive+0x1d8>
 804781e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047824:	d003      	beq.n	804782e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8047826:	2303      	movs	r3, #3
 8047828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 804782c:	e0a7      	b.n	804797e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804782e:	68fb      	ldr	r3, [r7, #12]
 8047830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047832:	b29b      	uxth	r3, r3
 8047834:	2b00      	cmp	r3, #0
 8047836:	d1a6      	bne.n	8047786 <HAL_SPI_TransmitReceive+0x130>
 8047838:	68fb      	ldr	r3, [r7, #12]
 804783a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804783c:	b29b      	uxth	r3, r3
 804783e:	2b00      	cmp	r3, #0
 8047840:	d1a1      	bne.n	8047786 <HAL_SPI_TransmitReceive+0x130>
 8047842:	e07c      	b.n	804793e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8047844:	68fb      	ldr	r3, [r7, #12]
 8047846:	685b      	ldr	r3, [r3, #4]
 8047848:	2b00      	cmp	r3, #0
 804784a:	d002      	beq.n	8047852 <HAL_SPI_TransmitReceive+0x1fc>
 804784c:	8b7b      	ldrh	r3, [r7, #26]
 804784e:	2b01      	cmp	r3, #1
 8047850:	d16b      	bne.n	804792a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8047852:	68fb      	ldr	r3, [r7, #12]
 8047854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8047856:	68fb      	ldr	r3, [r7, #12]
 8047858:	681b      	ldr	r3, [r3, #0]
 804785a:	330c      	adds	r3, #12
 804785c:	7812      	ldrb	r2, [r2, #0]
 804785e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8047860:	68fb      	ldr	r3, [r7, #12]
 8047862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047864:	1c5a      	adds	r2, r3, #1
 8047866:	68fb      	ldr	r3, [r7, #12]
 8047868:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 804786a:	68fb      	ldr	r3, [r7, #12]
 804786c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804786e:	b29b      	uxth	r3, r3
 8047870:	3b01      	subs	r3, #1
 8047872:	b29a      	uxth	r2, r3
 8047874:	68fb      	ldr	r3, [r7, #12]
 8047876:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047878:	e057      	b.n	804792a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 804787a:	68fb      	ldr	r3, [r7, #12]
 804787c:	681b      	ldr	r3, [r3, #0]
 804787e:	689b      	ldr	r3, [r3, #8]
 8047880:	f003 0302 	and.w	r3, r3, #2
 8047884:	2b02      	cmp	r3, #2
 8047886:	d11c      	bne.n	80478c2 <HAL_SPI_TransmitReceive+0x26c>
 8047888:	68fb      	ldr	r3, [r7, #12]
 804788a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804788c:	b29b      	uxth	r3, r3
 804788e:	2b00      	cmp	r3, #0
 8047890:	d017      	beq.n	80478c2 <HAL_SPI_TransmitReceive+0x26c>
 8047892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8047894:	2b01      	cmp	r3, #1
 8047896:	d114      	bne.n	80478c2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8047898:	68fb      	ldr	r3, [r7, #12]
 804789a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804789c:	68fb      	ldr	r3, [r7, #12]
 804789e:	681b      	ldr	r3, [r3, #0]
 80478a0:	330c      	adds	r3, #12
 80478a2:	7812      	ldrb	r2, [r2, #0]
 80478a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80478a6:	68fb      	ldr	r3, [r7, #12]
 80478a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80478aa:	1c5a      	adds	r2, r3, #1
 80478ac:	68fb      	ldr	r3, [r7, #12]
 80478ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80478b0:	68fb      	ldr	r3, [r7, #12]
 80478b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80478b4:	b29b      	uxth	r3, r3
 80478b6:	3b01      	subs	r3, #1
 80478b8:	b29a      	uxth	r2, r3
 80478ba:	68fb      	ldr	r3, [r7, #12]
 80478bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80478be:	2300      	movs	r3, #0
 80478c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80478c2:	68fb      	ldr	r3, [r7, #12]
 80478c4:	681b      	ldr	r3, [r3, #0]
 80478c6:	689b      	ldr	r3, [r3, #8]
 80478c8:	f003 0301 	and.w	r3, r3, #1
 80478cc:	2b01      	cmp	r3, #1
 80478ce:	d119      	bne.n	8047904 <HAL_SPI_TransmitReceive+0x2ae>
 80478d0:	68fb      	ldr	r3, [r7, #12]
 80478d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80478d4:	b29b      	uxth	r3, r3
 80478d6:	2b00      	cmp	r3, #0
 80478d8:	d014      	beq.n	8047904 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80478da:	68fb      	ldr	r3, [r7, #12]
 80478dc:	681b      	ldr	r3, [r3, #0]
 80478de:	68da      	ldr	r2, [r3, #12]
 80478e0:	68fb      	ldr	r3, [r7, #12]
 80478e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80478e4:	b2d2      	uxtb	r2, r2
 80478e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80478e8:	68fb      	ldr	r3, [r7, #12]
 80478ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80478ec:	1c5a      	adds	r2, r3, #1
 80478ee:	68fb      	ldr	r3, [r7, #12]
 80478f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80478f2:	68fb      	ldr	r3, [r7, #12]
 80478f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80478f6:	b29b      	uxth	r3, r3
 80478f8:	3b01      	subs	r3, #1
 80478fa:	b29a      	uxth	r2, r3
 80478fc:	68fb      	ldr	r3, [r7, #12]
 80478fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8047900:	2301      	movs	r3, #1
 8047902:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8047904:	f7fb f95a 	bl	8042bbc <HAL_GetTick>
 8047908:	4602      	mov	r2, r0
 804790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804790c:	1ad3      	subs	r3, r2, r3
 804790e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8047910:	429a      	cmp	r2, r3
 8047912:	d803      	bhi.n	804791c <HAL_SPI_TransmitReceive+0x2c6>
 8047914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047916:	f1b3 3fff 	cmp.w	r3, #4294967295
 804791a:	d102      	bne.n	8047922 <HAL_SPI_TransmitReceive+0x2cc>
 804791c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804791e:	2b00      	cmp	r3, #0
 8047920:	d103      	bne.n	804792a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8047922:	2303      	movs	r3, #3
 8047924:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8047928:	e029      	b.n	804797e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804792a:	68fb      	ldr	r3, [r7, #12]
 804792c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804792e:	b29b      	uxth	r3, r3
 8047930:	2b00      	cmp	r3, #0
 8047932:	d1a2      	bne.n	804787a <HAL_SPI_TransmitReceive+0x224>
 8047934:	68fb      	ldr	r3, [r7, #12]
 8047936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047938:	b29b      	uxth	r3, r3
 804793a:	2b00      	cmp	r3, #0
 804793c:	d19d      	bne.n	804787a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 804793e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8047940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8047942:	68f8      	ldr	r0, [r7, #12]
 8047944:	f000 f926 	bl	8047b94 <SPI_EndRxTxTransaction>
 8047948:	4603      	mov	r3, r0
 804794a:	2b00      	cmp	r3, #0
 804794c:	d006      	beq.n	804795c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 804794e:	2301      	movs	r3, #1
 8047950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8047954:	68fb      	ldr	r3, [r7, #12]
 8047956:	2220      	movs	r2, #32
 8047958:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 804795a:	e010      	b.n	804797e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 804795c:	68fb      	ldr	r3, [r7, #12]
 804795e:	689b      	ldr	r3, [r3, #8]
 8047960:	2b00      	cmp	r3, #0
 8047962:	d10b      	bne.n	804797c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8047964:	2300      	movs	r3, #0
 8047966:	617b      	str	r3, [r7, #20]
 8047968:	68fb      	ldr	r3, [r7, #12]
 804796a:	681b      	ldr	r3, [r3, #0]
 804796c:	68db      	ldr	r3, [r3, #12]
 804796e:	617b      	str	r3, [r7, #20]
 8047970:	68fb      	ldr	r3, [r7, #12]
 8047972:	681b      	ldr	r3, [r3, #0]
 8047974:	689b      	ldr	r3, [r3, #8]
 8047976:	617b      	str	r3, [r7, #20]
 8047978:	697b      	ldr	r3, [r7, #20]
 804797a:	e000      	b.n	804797e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 804797c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 804797e:	68fb      	ldr	r3, [r7, #12]
 8047980:	2201      	movs	r2, #1
 8047982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8047986:	68fb      	ldr	r3, [r7, #12]
 8047988:	2200      	movs	r2, #0
 804798a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 804798e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8047992:	4618      	mov	r0, r3
 8047994:	3730      	adds	r7, #48	; 0x30
 8047996:	46bd      	mov	sp, r7
 8047998:	bd80      	pop	{r7, pc}

0804799a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 804799a:	b480      	push	{r7}
 804799c:	b083      	sub	sp, #12
 804799e:	af00      	add	r7, sp, #0
 80479a0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80479a2:	687b      	ldr	r3, [r7, #4]
 80479a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80479a8:	b2db      	uxtb	r3, r3
}
 80479aa:	4618      	mov	r0, r3
 80479ac:	370c      	adds	r7, #12
 80479ae:	46bd      	mov	sp, r7
 80479b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80479b4:	4770      	bx	lr
	...

080479b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80479b8:	b580      	push	{r7, lr}
 80479ba:	b088      	sub	sp, #32
 80479bc:	af00      	add	r7, sp, #0
 80479be:	60f8      	str	r0, [r7, #12]
 80479c0:	60b9      	str	r1, [r7, #8]
 80479c2:	603b      	str	r3, [r7, #0]
 80479c4:	4613      	mov	r3, r2
 80479c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80479c8:	f7fb f8f8 	bl	8042bbc <HAL_GetTick>
 80479cc:	4602      	mov	r2, r0
 80479ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80479d0:	1a9b      	subs	r3, r3, r2
 80479d2:	683a      	ldr	r2, [r7, #0]
 80479d4:	4413      	add	r3, r2
 80479d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80479d8:	f7fb f8f0 	bl	8042bbc <HAL_GetTick>
 80479dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80479de:	4b39      	ldr	r3, [pc, #228]	; (8047ac4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80479e0:	681b      	ldr	r3, [r3, #0]
 80479e2:	015b      	lsls	r3, r3, #5
 80479e4:	0d1b      	lsrs	r3, r3, #20
 80479e6:	69fa      	ldr	r2, [r7, #28]
 80479e8:	fb02 f303 	mul.w	r3, r2, r3
 80479ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80479ee:	e054      	b.n	8047a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80479f0:	683b      	ldr	r3, [r7, #0]
 80479f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80479f6:	d050      	beq.n	8047a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80479f8:	f7fb f8e0 	bl	8042bbc <HAL_GetTick>
 80479fc:	4602      	mov	r2, r0
 80479fe:	69bb      	ldr	r3, [r7, #24]
 8047a00:	1ad3      	subs	r3, r2, r3
 8047a02:	69fa      	ldr	r2, [r7, #28]
 8047a04:	429a      	cmp	r2, r3
 8047a06:	d902      	bls.n	8047a0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8047a08:	69fb      	ldr	r3, [r7, #28]
 8047a0a:	2b00      	cmp	r3, #0
 8047a0c:	d13d      	bne.n	8047a8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8047a0e:	68fb      	ldr	r3, [r7, #12]
 8047a10:	681b      	ldr	r3, [r3, #0]
 8047a12:	685a      	ldr	r2, [r3, #4]
 8047a14:	68fb      	ldr	r3, [r7, #12]
 8047a16:	681b      	ldr	r3, [r3, #0]
 8047a18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8047a1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8047a1e:	68fb      	ldr	r3, [r7, #12]
 8047a20:	685b      	ldr	r3, [r3, #4]
 8047a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047a26:	d111      	bne.n	8047a4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8047a28:	68fb      	ldr	r3, [r7, #12]
 8047a2a:	689b      	ldr	r3, [r3, #8]
 8047a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8047a30:	d004      	beq.n	8047a3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8047a32:	68fb      	ldr	r3, [r7, #12]
 8047a34:	689b      	ldr	r3, [r3, #8]
 8047a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8047a3a:	d107      	bne.n	8047a4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8047a3c:	68fb      	ldr	r3, [r7, #12]
 8047a3e:	681b      	ldr	r3, [r3, #0]
 8047a40:	681a      	ldr	r2, [r3, #0]
 8047a42:	68fb      	ldr	r3, [r7, #12]
 8047a44:	681b      	ldr	r3, [r3, #0]
 8047a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047a4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8047a4c:	68fb      	ldr	r3, [r7, #12]
 8047a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8047a54:	d10f      	bne.n	8047a76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8047a56:	68fb      	ldr	r3, [r7, #12]
 8047a58:	681b      	ldr	r3, [r3, #0]
 8047a5a:	681a      	ldr	r2, [r3, #0]
 8047a5c:	68fb      	ldr	r3, [r7, #12]
 8047a5e:	681b      	ldr	r3, [r3, #0]
 8047a60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8047a64:	601a      	str	r2, [r3, #0]
 8047a66:	68fb      	ldr	r3, [r7, #12]
 8047a68:	681b      	ldr	r3, [r3, #0]
 8047a6a:	681a      	ldr	r2, [r3, #0]
 8047a6c:	68fb      	ldr	r3, [r7, #12]
 8047a6e:	681b      	ldr	r3, [r3, #0]
 8047a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8047a74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8047a76:	68fb      	ldr	r3, [r7, #12]
 8047a78:	2201      	movs	r2, #1
 8047a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8047a7e:	68fb      	ldr	r3, [r7, #12]
 8047a80:	2200      	movs	r2, #0
 8047a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8047a86:	2303      	movs	r3, #3
 8047a88:	e017      	b.n	8047aba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8047a8a:	697b      	ldr	r3, [r7, #20]
 8047a8c:	2b00      	cmp	r3, #0
 8047a8e:	d101      	bne.n	8047a94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8047a90:	2300      	movs	r3, #0
 8047a92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8047a94:	697b      	ldr	r3, [r7, #20]
 8047a96:	3b01      	subs	r3, #1
 8047a98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8047a9a:	68fb      	ldr	r3, [r7, #12]
 8047a9c:	681b      	ldr	r3, [r3, #0]
 8047a9e:	689a      	ldr	r2, [r3, #8]
 8047aa0:	68bb      	ldr	r3, [r7, #8]
 8047aa2:	4013      	ands	r3, r2
 8047aa4:	68ba      	ldr	r2, [r7, #8]
 8047aa6:	429a      	cmp	r2, r3
 8047aa8:	bf0c      	ite	eq
 8047aaa:	2301      	moveq	r3, #1
 8047aac:	2300      	movne	r3, #0
 8047aae:	b2db      	uxtb	r3, r3
 8047ab0:	461a      	mov	r2, r3
 8047ab2:	79fb      	ldrb	r3, [r7, #7]
 8047ab4:	429a      	cmp	r2, r3
 8047ab6:	d19b      	bne.n	80479f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8047ab8:	2300      	movs	r3, #0
}
 8047aba:	4618      	mov	r0, r3
 8047abc:	3720      	adds	r7, #32
 8047abe:	46bd      	mov	sp, r7
 8047ac0:	bd80      	pop	{r7, pc}
 8047ac2:	bf00      	nop
 8047ac4:	20000000 	.word	0x20000000

08047ac8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8047ac8:	b580      	push	{r7, lr}
 8047aca:	b086      	sub	sp, #24
 8047acc:	af02      	add	r7, sp, #8
 8047ace:	60f8      	str	r0, [r7, #12]
 8047ad0:	60b9      	str	r1, [r7, #8]
 8047ad2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8047ad4:	68fb      	ldr	r3, [r7, #12]
 8047ad6:	685b      	ldr	r3, [r3, #4]
 8047ad8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047adc:	d111      	bne.n	8047b02 <SPI_EndRxTransaction+0x3a>
 8047ade:	68fb      	ldr	r3, [r7, #12]
 8047ae0:	689b      	ldr	r3, [r3, #8]
 8047ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8047ae6:	d004      	beq.n	8047af2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8047ae8:	68fb      	ldr	r3, [r7, #12]
 8047aea:	689b      	ldr	r3, [r3, #8]
 8047aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8047af0:	d107      	bne.n	8047b02 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8047af2:	68fb      	ldr	r3, [r7, #12]
 8047af4:	681b      	ldr	r3, [r3, #0]
 8047af6:	681a      	ldr	r2, [r3, #0]
 8047af8:	68fb      	ldr	r3, [r7, #12]
 8047afa:	681b      	ldr	r3, [r3, #0]
 8047afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047b00:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8047b02:	68fb      	ldr	r3, [r7, #12]
 8047b04:	685b      	ldr	r3, [r3, #4]
 8047b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047b0a:	d12a      	bne.n	8047b62 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8047b0c:	68fb      	ldr	r3, [r7, #12]
 8047b0e:	689b      	ldr	r3, [r3, #8]
 8047b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8047b14:	d012      	beq.n	8047b3c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8047b16:	687b      	ldr	r3, [r7, #4]
 8047b18:	9300      	str	r3, [sp, #0]
 8047b1a:	68bb      	ldr	r3, [r7, #8]
 8047b1c:	2200      	movs	r2, #0
 8047b1e:	2180      	movs	r1, #128	; 0x80
 8047b20:	68f8      	ldr	r0, [r7, #12]
 8047b22:	f7ff ff49 	bl	80479b8 <SPI_WaitFlagStateUntilTimeout>
 8047b26:	4603      	mov	r3, r0
 8047b28:	2b00      	cmp	r3, #0
 8047b2a:	d02d      	beq.n	8047b88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047b2c:	68fb      	ldr	r3, [r7, #12]
 8047b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047b30:	f043 0220 	orr.w	r2, r3, #32
 8047b34:	68fb      	ldr	r3, [r7, #12]
 8047b36:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8047b38:	2303      	movs	r3, #3
 8047b3a:	e026      	b.n	8047b8a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8047b3c:	687b      	ldr	r3, [r7, #4]
 8047b3e:	9300      	str	r3, [sp, #0]
 8047b40:	68bb      	ldr	r3, [r7, #8]
 8047b42:	2200      	movs	r2, #0
 8047b44:	2101      	movs	r1, #1
 8047b46:	68f8      	ldr	r0, [r7, #12]
 8047b48:	f7ff ff36 	bl	80479b8 <SPI_WaitFlagStateUntilTimeout>
 8047b4c:	4603      	mov	r3, r0
 8047b4e:	2b00      	cmp	r3, #0
 8047b50:	d01a      	beq.n	8047b88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047b52:	68fb      	ldr	r3, [r7, #12]
 8047b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047b56:	f043 0220 	orr.w	r2, r3, #32
 8047b5a:	68fb      	ldr	r3, [r7, #12]
 8047b5c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8047b5e:	2303      	movs	r3, #3
 8047b60:	e013      	b.n	8047b8a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8047b62:	687b      	ldr	r3, [r7, #4]
 8047b64:	9300      	str	r3, [sp, #0]
 8047b66:	68bb      	ldr	r3, [r7, #8]
 8047b68:	2200      	movs	r2, #0
 8047b6a:	2101      	movs	r1, #1
 8047b6c:	68f8      	ldr	r0, [r7, #12]
 8047b6e:	f7ff ff23 	bl	80479b8 <SPI_WaitFlagStateUntilTimeout>
 8047b72:	4603      	mov	r3, r0
 8047b74:	2b00      	cmp	r3, #0
 8047b76:	d007      	beq.n	8047b88 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047b78:	68fb      	ldr	r3, [r7, #12]
 8047b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047b7c:	f043 0220 	orr.w	r2, r3, #32
 8047b80:	68fb      	ldr	r3, [r7, #12]
 8047b82:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8047b84:	2303      	movs	r3, #3
 8047b86:	e000      	b.n	8047b8a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8047b88:	2300      	movs	r3, #0
}
 8047b8a:	4618      	mov	r0, r3
 8047b8c:	3710      	adds	r7, #16
 8047b8e:	46bd      	mov	sp, r7
 8047b90:	bd80      	pop	{r7, pc}
	...

08047b94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8047b94:	b580      	push	{r7, lr}
 8047b96:	b088      	sub	sp, #32
 8047b98:	af02      	add	r7, sp, #8
 8047b9a:	60f8      	str	r0, [r7, #12]
 8047b9c:	60b9      	str	r1, [r7, #8]
 8047b9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8047ba0:	4b1b      	ldr	r3, [pc, #108]	; (8047c10 <SPI_EndRxTxTransaction+0x7c>)
 8047ba2:	681b      	ldr	r3, [r3, #0]
 8047ba4:	4a1b      	ldr	r2, [pc, #108]	; (8047c14 <SPI_EndRxTxTransaction+0x80>)
 8047ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8047baa:	0d5b      	lsrs	r3, r3, #21
 8047bac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8047bb0:	fb02 f303 	mul.w	r3, r2, r3
 8047bb4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8047bb6:	68fb      	ldr	r3, [r7, #12]
 8047bb8:	685b      	ldr	r3, [r3, #4]
 8047bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047bbe:	d112      	bne.n	8047be6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8047bc0:	687b      	ldr	r3, [r7, #4]
 8047bc2:	9300      	str	r3, [sp, #0]
 8047bc4:	68bb      	ldr	r3, [r7, #8]
 8047bc6:	2200      	movs	r2, #0
 8047bc8:	2180      	movs	r1, #128	; 0x80
 8047bca:	68f8      	ldr	r0, [r7, #12]
 8047bcc:	f7ff fef4 	bl	80479b8 <SPI_WaitFlagStateUntilTimeout>
 8047bd0:	4603      	mov	r3, r0
 8047bd2:	2b00      	cmp	r3, #0
 8047bd4:	d016      	beq.n	8047c04 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047bd6:	68fb      	ldr	r3, [r7, #12]
 8047bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047bda:	f043 0220 	orr.w	r2, r3, #32
 8047bde:	68fb      	ldr	r3, [r7, #12]
 8047be0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8047be2:	2303      	movs	r3, #3
 8047be4:	e00f      	b.n	8047c06 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8047be6:	697b      	ldr	r3, [r7, #20]
 8047be8:	2b00      	cmp	r3, #0
 8047bea:	d00a      	beq.n	8047c02 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8047bec:	697b      	ldr	r3, [r7, #20]
 8047bee:	3b01      	subs	r3, #1
 8047bf0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8047bf2:	68fb      	ldr	r3, [r7, #12]
 8047bf4:	681b      	ldr	r3, [r3, #0]
 8047bf6:	689b      	ldr	r3, [r3, #8]
 8047bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8047bfc:	2b80      	cmp	r3, #128	; 0x80
 8047bfe:	d0f2      	beq.n	8047be6 <SPI_EndRxTxTransaction+0x52>
 8047c00:	e000      	b.n	8047c04 <SPI_EndRxTxTransaction+0x70>
        break;
 8047c02:	bf00      	nop
  }

  return HAL_OK;
 8047c04:	2300      	movs	r3, #0
}
 8047c06:	4618      	mov	r0, r3
 8047c08:	3718      	adds	r7, #24
 8047c0a:	46bd      	mov	sp, r7
 8047c0c:	bd80      	pop	{r7, pc}
 8047c0e:	bf00      	nop
 8047c10:	20000000 	.word	0x20000000
 8047c14:	165e9f81 	.word	0x165e9f81

08047c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8047c18:	b580      	push	{r7, lr}
 8047c1a:	b082      	sub	sp, #8
 8047c1c:	af00      	add	r7, sp, #0
 8047c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8047c20:	687b      	ldr	r3, [r7, #4]
 8047c22:	2b00      	cmp	r3, #0
 8047c24:	d101      	bne.n	8047c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8047c26:	2301      	movs	r3, #1
 8047c28:	e041      	b.n	8047cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8047c2a:	687b      	ldr	r3, [r7, #4]
 8047c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8047c30:	b2db      	uxtb	r3, r3
 8047c32:	2b00      	cmp	r3, #0
 8047c34:	d106      	bne.n	8047c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8047c36:	687b      	ldr	r3, [r7, #4]
 8047c38:	2200      	movs	r2, #0
 8047c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8047c3e:	6878      	ldr	r0, [r7, #4]
 8047c40:	f7f9 fb5a 	bl	80412f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8047c44:	687b      	ldr	r3, [r7, #4]
 8047c46:	2202      	movs	r2, #2
 8047c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8047c4c:	687b      	ldr	r3, [r7, #4]
 8047c4e:	681a      	ldr	r2, [r3, #0]
 8047c50:	687b      	ldr	r3, [r7, #4]
 8047c52:	3304      	adds	r3, #4
 8047c54:	4619      	mov	r1, r3
 8047c56:	4610      	mov	r0, r2
 8047c58:	f000 fa96 	bl	8048188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8047c5c:	687b      	ldr	r3, [r7, #4]
 8047c5e:	2201      	movs	r2, #1
 8047c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8047c64:	687b      	ldr	r3, [r7, #4]
 8047c66:	2201      	movs	r2, #1
 8047c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8047c6c:	687b      	ldr	r3, [r7, #4]
 8047c6e:	2201      	movs	r2, #1
 8047c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8047c74:	687b      	ldr	r3, [r7, #4]
 8047c76:	2201      	movs	r2, #1
 8047c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8047c7c:	687b      	ldr	r3, [r7, #4]
 8047c7e:	2201      	movs	r2, #1
 8047c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8047c84:	687b      	ldr	r3, [r7, #4]
 8047c86:	2201      	movs	r2, #1
 8047c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8047c8c:	687b      	ldr	r3, [r7, #4]
 8047c8e:	2201      	movs	r2, #1
 8047c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8047c94:	687b      	ldr	r3, [r7, #4]
 8047c96:	2201      	movs	r2, #1
 8047c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8047c9c:	687b      	ldr	r3, [r7, #4]
 8047c9e:	2201      	movs	r2, #1
 8047ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8047ca4:	687b      	ldr	r3, [r7, #4]
 8047ca6:	2201      	movs	r2, #1
 8047ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8047cac:	2300      	movs	r3, #0
}
 8047cae:	4618      	mov	r0, r3
 8047cb0:	3708      	adds	r7, #8
 8047cb2:	46bd      	mov	sp, r7
 8047cb4:	bd80      	pop	{r7, pc}
	...

08047cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8047cb8:	b480      	push	{r7}
 8047cba:	b085      	sub	sp, #20
 8047cbc:	af00      	add	r7, sp, #0
 8047cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8047cc0:	687b      	ldr	r3, [r7, #4]
 8047cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8047cc6:	b2db      	uxtb	r3, r3
 8047cc8:	2b01      	cmp	r3, #1
 8047cca:	d001      	beq.n	8047cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8047ccc:	2301      	movs	r3, #1
 8047cce:	e04e      	b.n	8047d6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8047cd0:	687b      	ldr	r3, [r7, #4]
 8047cd2:	2202      	movs	r2, #2
 8047cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8047cd8:	687b      	ldr	r3, [r7, #4]
 8047cda:	681b      	ldr	r3, [r3, #0]
 8047cdc:	68da      	ldr	r2, [r3, #12]
 8047cde:	687b      	ldr	r3, [r7, #4]
 8047ce0:	681b      	ldr	r3, [r3, #0]
 8047ce2:	f042 0201 	orr.w	r2, r2, #1
 8047ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8047ce8:	687b      	ldr	r3, [r7, #4]
 8047cea:	681b      	ldr	r3, [r3, #0]
 8047cec:	4a23      	ldr	r2, [pc, #140]	; (8047d7c <HAL_TIM_Base_Start_IT+0xc4>)
 8047cee:	4293      	cmp	r3, r2
 8047cf0:	d022      	beq.n	8047d38 <HAL_TIM_Base_Start_IT+0x80>
 8047cf2:	687b      	ldr	r3, [r7, #4]
 8047cf4:	681b      	ldr	r3, [r3, #0]
 8047cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8047cfa:	d01d      	beq.n	8047d38 <HAL_TIM_Base_Start_IT+0x80>
 8047cfc:	687b      	ldr	r3, [r7, #4]
 8047cfe:	681b      	ldr	r3, [r3, #0]
 8047d00:	4a1f      	ldr	r2, [pc, #124]	; (8047d80 <HAL_TIM_Base_Start_IT+0xc8>)
 8047d02:	4293      	cmp	r3, r2
 8047d04:	d018      	beq.n	8047d38 <HAL_TIM_Base_Start_IT+0x80>
 8047d06:	687b      	ldr	r3, [r7, #4]
 8047d08:	681b      	ldr	r3, [r3, #0]
 8047d0a:	4a1e      	ldr	r2, [pc, #120]	; (8047d84 <HAL_TIM_Base_Start_IT+0xcc>)
 8047d0c:	4293      	cmp	r3, r2
 8047d0e:	d013      	beq.n	8047d38 <HAL_TIM_Base_Start_IT+0x80>
 8047d10:	687b      	ldr	r3, [r7, #4]
 8047d12:	681b      	ldr	r3, [r3, #0]
 8047d14:	4a1c      	ldr	r2, [pc, #112]	; (8047d88 <HAL_TIM_Base_Start_IT+0xd0>)
 8047d16:	4293      	cmp	r3, r2
 8047d18:	d00e      	beq.n	8047d38 <HAL_TIM_Base_Start_IT+0x80>
 8047d1a:	687b      	ldr	r3, [r7, #4]
 8047d1c:	681b      	ldr	r3, [r3, #0]
 8047d1e:	4a1b      	ldr	r2, [pc, #108]	; (8047d8c <HAL_TIM_Base_Start_IT+0xd4>)
 8047d20:	4293      	cmp	r3, r2
 8047d22:	d009      	beq.n	8047d38 <HAL_TIM_Base_Start_IT+0x80>
 8047d24:	687b      	ldr	r3, [r7, #4]
 8047d26:	681b      	ldr	r3, [r3, #0]
 8047d28:	4a19      	ldr	r2, [pc, #100]	; (8047d90 <HAL_TIM_Base_Start_IT+0xd8>)
 8047d2a:	4293      	cmp	r3, r2
 8047d2c:	d004      	beq.n	8047d38 <HAL_TIM_Base_Start_IT+0x80>
 8047d2e:	687b      	ldr	r3, [r7, #4]
 8047d30:	681b      	ldr	r3, [r3, #0]
 8047d32:	4a18      	ldr	r2, [pc, #96]	; (8047d94 <HAL_TIM_Base_Start_IT+0xdc>)
 8047d34:	4293      	cmp	r3, r2
 8047d36:	d111      	bne.n	8047d5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8047d38:	687b      	ldr	r3, [r7, #4]
 8047d3a:	681b      	ldr	r3, [r3, #0]
 8047d3c:	689b      	ldr	r3, [r3, #8]
 8047d3e:	f003 0307 	and.w	r3, r3, #7
 8047d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8047d44:	68fb      	ldr	r3, [r7, #12]
 8047d46:	2b06      	cmp	r3, #6
 8047d48:	d010      	beq.n	8047d6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8047d4a:	687b      	ldr	r3, [r7, #4]
 8047d4c:	681b      	ldr	r3, [r3, #0]
 8047d4e:	681a      	ldr	r2, [r3, #0]
 8047d50:	687b      	ldr	r3, [r7, #4]
 8047d52:	681b      	ldr	r3, [r3, #0]
 8047d54:	f042 0201 	orr.w	r2, r2, #1
 8047d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8047d5a:	e007      	b.n	8047d6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8047d5c:	687b      	ldr	r3, [r7, #4]
 8047d5e:	681b      	ldr	r3, [r3, #0]
 8047d60:	681a      	ldr	r2, [r3, #0]
 8047d62:	687b      	ldr	r3, [r7, #4]
 8047d64:	681b      	ldr	r3, [r3, #0]
 8047d66:	f042 0201 	orr.w	r2, r2, #1
 8047d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8047d6c:	2300      	movs	r3, #0
}
 8047d6e:	4618      	mov	r0, r3
 8047d70:	3714      	adds	r7, #20
 8047d72:	46bd      	mov	sp, r7
 8047d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047d78:	4770      	bx	lr
 8047d7a:	bf00      	nop
 8047d7c:	40010000 	.word	0x40010000
 8047d80:	40000400 	.word	0x40000400
 8047d84:	40000800 	.word	0x40000800
 8047d88:	40000c00 	.word	0x40000c00
 8047d8c:	40010400 	.word	0x40010400
 8047d90:	40014000 	.word	0x40014000
 8047d94:	40001800 	.word	0x40001800

08047d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8047d98:	b580      	push	{r7, lr}
 8047d9a:	b082      	sub	sp, #8
 8047d9c:	af00      	add	r7, sp, #0
 8047d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8047da0:	687b      	ldr	r3, [r7, #4]
 8047da2:	681b      	ldr	r3, [r3, #0]
 8047da4:	691b      	ldr	r3, [r3, #16]
 8047da6:	f003 0302 	and.w	r3, r3, #2
 8047daa:	2b02      	cmp	r3, #2
 8047dac:	d122      	bne.n	8047df4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8047dae:	687b      	ldr	r3, [r7, #4]
 8047db0:	681b      	ldr	r3, [r3, #0]
 8047db2:	68db      	ldr	r3, [r3, #12]
 8047db4:	f003 0302 	and.w	r3, r3, #2
 8047db8:	2b02      	cmp	r3, #2
 8047dba:	d11b      	bne.n	8047df4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8047dbc:	687b      	ldr	r3, [r7, #4]
 8047dbe:	681b      	ldr	r3, [r3, #0]
 8047dc0:	f06f 0202 	mvn.w	r2, #2
 8047dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8047dc6:	687b      	ldr	r3, [r7, #4]
 8047dc8:	2201      	movs	r2, #1
 8047dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8047dcc:	687b      	ldr	r3, [r7, #4]
 8047dce:	681b      	ldr	r3, [r3, #0]
 8047dd0:	699b      	ldr	r3, [r3, #24]
 8047dd2:	f003 0303 	and.w	r3, r3, #3
 8047dd6:	2b00      	cmp	r3, #0
 8047dd8:	d003      	beq.n	8047de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8047dda:	6878      	ldr	r0, [r7, #4]
 8047ddc:	f000 f9b5 	bl	804814a <HAL_TIM_IC_CaptureCallback>
 8047de0:	e005      	b.n	8047dee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8047de2:	6878      	ldr	r0, [r7, #4]
 8047de4:	f000 f9a7 	bl	8048136 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8047de8:	6878      	ldr	r0, [r7, #4]
 8047dea:	f000 f9b8 	bl	804815e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8047dee:	687b      	ldr	r3, [r7, #4]
 8047df0:	2200      	movs	r2, #0
 8047df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8047df4:	687b      	ldr	r3, [r7, #4]
 8047df6:	681b      	ldr	r3, [r3, #0]
 8047df8:	691b      	ldr	r3, [r3, #16]
 8047dfa:	f003 0304 	and.w	r3, r3, #4
 8047dfe:	2b04      	cmp	r3, #4
 8047e00:	d122      	bne.n	8047e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8047e02:	687b      	ldr	r3, [r7, #4]
 8047e04:	681b      	ldr	r3, [r3, #0]
 8047e06:	68db      	ldr	r3, [r3, #12]
 8047e08:	f003 0304 	and.w	r3, r3, #4
 8047e0c:	2b04      	cmp	r3, #4
 8047e0e:	d11b      	bne.n	8047e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8047e10:	687b      	ldr	r3, [r7, #4]
 8047e12:	681b      	ldr	r3, [r3, #0]
 8047e14:	f06f 0204 	mvn.w	r2, #4
 8047e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8047e1a:	687b      	ldr	r3, [r7, #4]
 8047e1c:	2202      	movs	r2, #2
 8047e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8047e20:	687b      	ldr	r3, [r7, #4]
 8047e22:	681b      	ldr	r3, [r3, #0]
 8047e24:	699b      	ldr	r3, [r3, #24]
 8047e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8047e2a:	2b00      	cmp	r3, #0
 8047e2c:	d003      	beq.n	8047e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8047e2e:	6878      	ldr	r0, [r7, #4]
 8047e30:	f000 f98b 	bl	804814a <HAL_TIM_IC_CaptureCallback>
 8047e34:	e005      	b.n	8047e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8047e36:	6878      	ldr	r0, [r7, #4]
 8047e38:	f000 f97d 	bl	8048136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8047e3c:	6878      	ldr	r0, [r7, #4]
 8047e3e:	f000 f98e 	bl	804815e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8047e42:	687b      	ldr	r3, [r7, #4]
 8047e44:	2200      	movs	r2, #0
 8047e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8047e48:	687b      	ldr	r3, [r7, #4]
 8047e4a:	681b      	ldr	r3, [r3, #0]
 8047e4c:	691b      	ldr	r3, [r3, #16]
 8047e4e:	f003 0308 	and.w	r3, r3, #8
 8047e52:	2b08      	cmp	r3, #8
 8047e54:	d122      	bne.n	8047e9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8047e56:	687b      	ldr	r3, [r7, #4]
 8047e58:	681b      	ldr	r3, [r3, #0]
 8047e5a:	68db      	ldr	r3, [r3, #12]
 8047e5c:	f003 0308 	and.w	r3, r3, #8
 8047e60:	2b08      	cmp	r3, #8
 8047e62:	d11b      	bne.n	8047e9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8047e64:	687b      	ldr	r3, [r7, #4]
 8047e66:	681b      	ldr	r3, [r3, #0]
 8047e68:	f06f 0208 	mvn.w	r2, #8
 8047e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8047e6e:	687b      	ldr	r3, [r7, #4]
 8047e70:	2204      	movs	r2, #4
 8047e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8047e74:	687b      	ldr	r3, [r7, #4]
 8047e76:	681b      	ldr	r3, [r3, #0]
 8047e78:	69db      	ldr	r3, [r3, #28]
 8047e7a:	f003 0303 	and.w	r3, r3, #3
 8047e7e:	2b00      	cmp	r3, #0
 8047e80:	d003      	beq.n	8047e8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8047e82:	6878      	ldr	r0, [r7, #4]
 8047e84:	f000 f961 	bl	804814a <HAL_TIM_IC_CaptureCallback>
 8047e88:	e005      	b.n	8047e96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8047e8a:	6878      	ldr	r0, [r7, #4]
 8047e8c:	f000 f953 	bl	8048136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8047e90:	6878      	ldr	r0, [r7, #4]
 8047e92:	f000 f964 	bl	804815e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8047e96:	687b      	ldr	r3, [r7, #4]
 8047e98:	2200      	movs	r2, #0
 8047e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8047e9c:	687b      	ldr	r3, [r7, #4]
 8047e9e:	681b      	ldr	r3, [r3, #0]
 8047ea0:	691b      	ldr	r3, [r3, #16]
 8047ea2:	f003 0310 	and.w	r3, r3, #16
 8047ea6:	2b10      	cmp	r3, #16
 8047ea8:	d122      	bne.n	8047ef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8047eaa:	687b      	ldr	r3, [r7, #4]
 8047eac:	681b      	ldr	r3, [r3, #0]
 8047eae:	68db      	ldr	r3, [r3, #12]
 8047eb0:	f003 0310 	and.w	r3, r3, #16
 8047eb4:	2b10      	cmp	r3, #16
 8047eb6:	d11b      	bne.n	8047ef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8047eb8:	687b      	ldr	r3, [r7, #4]
 8047eba:	681b      	ldr	r3, [r3, #0]
 8047ebc:	f06f 0210 	mvn.w	r2, #16
 8047ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8047ec2:	687b      	ldr	r3, [r7, #4]
 8047ec4:	2208      	movs	r2, #8
 8047ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8047ec8:	687b      	ldr	r3, [r7, #4]
 8047eca:	681b      	ldr	r3, [r3, #0]
 8047ecc:	69db      	ldr	r3, [r3, #28]
 8047ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8047ed2:	2b00      	cmp	r3, #0
 8047ed4:	d003      	beq.n	8047ede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8047ed6:	6878      	ldr	r0, [r7, #4]
 8047ed8:	f000 f937 	bl	804814a <HAL_TIM_IC_CaptureCallback>
 8047edc:	e005      	b.n	8047eea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8047ede:	6878      	ldr	r0, [r7, #4]
 8047ee0:	f000 f929 	bl	8048136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8047ee4:	6878      	ldr	r0, [r7, #4]
 8047ee6:	f000 f93a 	bl	804815e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8047eea:	687b      	ldr	r3, [r7, #4]
 8047eec:	2200      	movs	r2, #0
 8047eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8047ef0:	687b      	ldr	r3, [r7, #4]
 8047ef2:	681b      	ldr	r3, [r3, #0]
 8047ef4:	691b      	ldr	r3, [r3, #16]
 8047ef6:	f003 0301 	and.w	r3, r3, #1
 8047efa:	2b01      	cmp	r3, #1
 8047efc:	d10e      	bne.n	8047f1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8047efe:	687b      	ldr	r3, [r7, #4]
 8047f00:	681b      	ldr	r3, [r3, #0]
 8047f02:	68db      	ldr	r3, [r3, #12]
 8047f04:	f003 0301 	and.w	r3, r3, #1
 8047f08:	2b01      	cmp	r3, #1
 8047f0a:	d107      	bne.n	8047f1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8047f0c:	687b      	ldr	r3, [r7, #4]
 8047f0e:	681b      	ldr	r3, [r3, #0]
 8047f10:	f06f 0201 	mvn.w	r2, #1
 8047f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8047f16:	6878      	ldr	r0, [r7, #4]
 8047f18:	f7f8 ff64 	bl	8040de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8047f1c:	687b      	ldr	r3, [r7, #4]
 8047f1e:	681b      	ldr	r3, [r3, #0]
 8047f20:	691b      	ldr	r3, [r3, #16]
 8047f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8047f26:	2b80      	cmp	r3, #128	; 0x80
 8047f28:	d10e      	bne.n	8047f48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8047f2a:	687b      	ldr	r3, [r7, #4]
 8047f2c:	681b      	ldr	r3, [r3, #0]
 8047f2e:	68db      	ldr	r3, [r3, #12]
 8047f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8047f34:	2b80      	cmp	r3, #128	; 0x80
 8047f36:	d107      	bne.n	8047f48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8047f38:	687b      	ldr	r3, [r7, #4]
 8047f3a:	681b      	ldr	r3, [r3, #0]
 8047f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8047f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8047f42:	6878      	ldr	r0, [r7, #4]
 8047f44:	f000 fae0 	bl	8048508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8047f48:	687b      	ldr	r3, [r7, #4]
 8047f4a:	681b      	ldr	r3, [r3, #0]
 8047f4c:	691b      	ldr	r3, [r3, #16]
 8047f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047f52:	2b40      	cmp	r3, #64	; 0x40
 8047f54:	d10e      	bne.n	8047f74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8047f56:	687b      	ldr	r3, [r7, #4]
 8047f58:	681b      	ldr	r3, [r3, #0]
 8047f5a:	68db      	ldr	r3, [r3, #12]
 8047f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047f60:	2b40      	cmp	r3, #64	; 0x40
 8047f62:	d107      	bne.n	8047f74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8047f64:	687b      	ldr	r3, [r7, #4]
 8047f66:	681b      	ldr	r3, [r3, #0]
 8047f68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8047f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8047f6e:	6878      	ldr	r0, [r7, #4]
 8047f70:	f000 f8ff 	bl	8048172 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8047f74:	687b      	ldr	r3, [r7, #4]
 8047f76:	681b      	ldr	r3, [r3, #0]
 8047f78:	691b      	ldr	r3, [r3, #16]
 8047f7a:	f003 0320 	and.w	r3, r3, #32
 8047f7e:	2b20      	cmp	r3, #32
 8047f80:	d10e      	bne.n	8047fa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8047f82:	687b      	ldr	r3, [r7, #4]
 8047f84:	681b      	ldr	r3, [r3, #0]
 8047f86:	68db      	ldr	r3, [r3, #12]
 8047f88:	f003 0320 	and.w	r3, r3, #32
 8047f8c:	2b20      	cmp	r3, #32
 8047f8e:	d107      	bne.n	8047fa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8047f90:	687b      	ldr	r3, [r7, #4]
 8047f92:	681b      	ldr	r3, [r3, #0]
 8047f94:	f06f 0220 	mvn.w	r2, #32
 8047f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8047f9a:	6878      	ldr	r0, [r7, #4]
 8047f9c:	f000 faaa 	bl	80484f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8047fa0:	bf00      	nop
 8047fa2:	3708      	adds	r7, #8
 8047fa4:	46bd      	mov	sp, r7
 8047fa6:	bd80      	pop	{r7, pc}

08047fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8047fa8:	b580      	push	{r7, lr}
 8047faa:	b084      	sub	sp, #16
 8047fac:	af00      	add	r7, sp, #0
 8047fae:	6078      	str	r0, [r7, #4]
 8047fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8047fb2:	2300      	movs	r3, #0
 8047fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8047fb6:	687b      	ldr	r3, [r7, #4]
 8047fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8047fbc:	2b01      	cmp	r3, #1
 8047fbe:	d101      	bne.n	8047fc4 <HAL_TIM_ConfigClockSource+0x1c>
 8047fc0:	2302      	movs	r3, #2
 8047fc2:	e0b4      	b.n	804812e <HAL_TIM_ConfigClockSource+0x186>
 8047fc4:	687b      	ldr	r3, [r7, #4]
 8047fc6:	2201      	movs	r2, #1
 8047fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8047fcc:	687b      	ldr	r3, [r7, #4]
 8047fce:	2202      	movs	r2, #2
 8047fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8047fd4:	687b      	ldr	r3, [r7, #4]
 8047fd6:	681b      	ldr	r3, [r3, #0]
 8047fd8:	689b      	ldr	r3, [r3, #8]
 8047fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8047fdc:	68bb      	ldr	r3, [r7, #8]
 8047fde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8047fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8047fe4:	68bb      	ldr	r3, [r7, #8]
 8047fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8047fea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8047fec:	687b      	ldr	r3, [r7, #4]
 8047fee:	681b      	ldr	r3, [r3, #0]
 8047ff0:	68ba      	ldr	r2, [r7, #8]
 8047ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8047ff4:	683b      	ldr	r3, [r7, #0]
 8047ff6:	681b      	ldr	r3, [r3, #0]
 8047ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8047ffc:	d03e      	beq.n	804807c <HAL_TIM_ConfigClockSource+0xd4>
 8047ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8048002:	f200 8087 	bhi.w	8048114 <HAL_TIM_ConfigClockSource+0x16c>
 8048006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804800a:	f000 8086 	beq.w	804811a <HAL_TIM_ConfigClockSource+0x172>
 804800e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8048012:	d87f      	bhi.n	8048114 <HAL_TIM_ConfigClockSource+0x16c>
 8048014:	2b70      	cmp	r3, #112	; 0x70
 8048016:	d01a      	beq.n	804804e <HAL_TIM_ConfigClockSource+0xa6>
 8048018:	2b70      	cmp	r3, #112	; 0x70
 804801a:	d87b      	bhi.n	8048114 <HAL_TIM_ConfigClockSource+0x16c>
 804801c:	2b60      	cmp	r3, #96	; 0x60
 804801e:	d050      	beq.n	80480c2 <HAL_TIM_ConfigClockSource+0x11a>
 8048020:	2b60      	cmp	r3, #96	; 0x60
 8048022:	d877      	bhi.n	8048114 <HAL_TIM_ConfigClockSource+0x16c>
 8048024:	2b50      	cmp	r3, #80	; 0x50
 8048026:	d03c      	beq.n	80480a2 <HAL_TIM_ConfigClockSource+0xfa>
 8048028:	2b50      	cmp	r3, #80	; 0x50
 804802a:	d873      	bhi.n	8048114 <HAL_TIM_ConfigClockSource+0x16c>
 804802c:	2b40      	cmp	r3, #64	; 0x40
 804802e:	d058      	beq.n	80480e2 <HAL_TIM_ConfigClockSource+0x13a>
 8048030:	2b40      	cmp	r3, #64	; 0x40
 8048032:	d86f      	bhi.n	8048114 <HAL_TIM_ConfigClockSource+0x16c>
 8048034:	2b30      	cmp	r3, #48	; 0x30
 8048036:	d064      	beq.n	8048102 <HAL_TIM_ConfigClockSource+0x15a>
 8048038:	2b30      	cmp	r3, #48	; 0x30
 804803a:	d86b      	bhi.n	8048114 <HAL_TIM_ConfigClockSource+0x16c>
 804803c:	2b20      	cmp	r3, #32
 804803e:	d060      	beq.n	8048102 <HAL_TIM_ConfigClockSource+0x15a>
 8048040:	2b20      	cmp	r3, #32
 8048042:	d867      	bhi.n	8048114 <HAL_TIM_ConfigClockSource+0x16c>
 8048044:	2b00      	cmp	r3, #0
 8048046:	d05c      	beq.n	8048102 <HAL_TIM_ConfigClockSource+0x15a>
 8048048:	2b10      	cmp	r3, #16
 804804a:	d05a      	beq.n	8048102 <HAL_TIM_ConfigClockSource+0x15a>
 804804c:	e062      	b.n	8048114 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 804804e:	687b      	ldr	r3, [r7, #4]
 8048050:	6818      	ldr	r0, [r3, #0]
 8048052:	683b      	ldr	r3, [r7, #0]
 8048054:	6899      	ldr	r1, [r3, #8]
 8048056:	683b      	ldr	r3, [r7, #0]
 8048058:	685a      	ldr	r2, [r3, #4]
 804805a:	683b      	ldr	r3, [r7, #0]
 804805c:	68db      	ldr	r3, [r3, #12]
 804805e:	f000 f9ad 	bl	80483bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8048062:	687b      	ldr	r3, [r7, #4]
 8048064:	681b      	ldr	r3, [r3, #0]
 8048066:	689b      	ldr	r3, [r3, #8]
 8048068:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 804806a:	68bb      	ldr	r3, [r7, #8]
 804806c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8048070:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8048072:	687b      	ldr	r3, [r7, #4]
 8048074:	681b      	ldr	r3, [r3, #0]
 8048076:	68ba      	ldr	r2, [r7, #8]
 8048078:	609a      	str	r2, [r3, #8]
      break;
 804807a:	e04f      	b.n	804811c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 804807c:	687b      	ldr	r3, [r7, #4]
 804807e:	6818      	ldr	r0, [r3, #0]
 8048080:	683b      	ldr	r3, [r7, #0]
 8048082:	6899      	ldr	r1, [r3, #8]
 8048084:	683b      	ldr	r3, [r7, #0]
 8048086:	685a      	ldr	r2, [r3, #4]
 8048088:	683b      	ldr	r3, [r7, #0]
 804808a:	68db      	ldr	r3, [r3, #12]
 804808c:	f000 f996 	bl	80483bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8048090:	687b      	ldr	r3, [r7, #4]
 8048092:	681b      	ldr	r3, [r3, #0]
 8048094:	689a      	ldr	r2, [r3, #8]
 8048096:	687b      	ldr	r3, [r7, #4]
 8048098:	681b      	ldr	r3, [r3, #0]
 804809a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804809e:	609a      	str	r2, [r3, #8]
      break;
 80480a0:	e03c      	b.n	804811c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80480a2:	687b      	ldr	r3, [r7, #4]
 80480a4:	6818      	ldr	r0, [r3, #0]
 80480a6:	683b      	ldr	r3, [r7, #0]
 80480a8:	6859      	ldr	r1, [r3, #4]
 80480aa:	683b      	ldr	r3, [r7, #0]
 80480ac:	68db      	ldr	r3, [r3, #12]
 80480ae:	461a      	mov	r2, r3
 80480b0:	f000 f90a 	bl	80482c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80480b4:	687b      	ldr	r3, [r7, #4]
 80480b6:	681b      	ldr	r3, [r3, #0]
 80480b8:	2150      	movs	r1, #80	; 0x50
 80480ba:	4618      	mov	r0, r3
 80480bc:	f000 f963 	bl	8048386 <TIM_ITRx_SetConfig>
      break;
 80480c0:	e02c      	b.n	804811c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80480c2:	687b      	ldr	r3, [r7, #4]
 80480c4:	6818      	ldr	r0, [r3, #0]
 80480c6:	683b      	ldr	r3, [r7, #0]
 80480c8:	6859      	ldr	r1, [r3, #4]
 80480ca:	683b      	ldr	r3, [r7, #0]
 80480cc:	68db      	ldr	r3, [r3, #12]
 80480ce:	461a      	mov	r2, r3
 80480d0:	f000 f929 	bl	8048326 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80480d4:	687b      	ldr	r3, [r7, #4]
 80480d6:	681b      	ldr	r3, [r3, #0]
 80480d8:	2160      	movs	r1, #96	; 0x60
 80480da:	4618      	mov	r0, r3
 80480dc:	f000 f953 	bl	8048386 <TIM_ITRx_SetConfig>
      break;
 80480e0:	e01c      	b.n	804811c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80480e2:	687b      	ldr	r3, [r7, #4]
 80480e4:	6818      	ldr	r0, [r3, #0]
 80480e6:	683b      	ldr	r3, [r7, #0]
 80480e8:	6859      	ldr	r1, [r3, #4]
 80480ea:	683b      	ldr	r3, [r7, #0]
 80480ec:	68db      	ldr	r3, [r3, #12]
 80480ee:	461a      	mov	r2, r3
 80480f0:	f000 f8ea 	bl	80482c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80480f4:	687b      	ldr	r3, [r7, #4]
 80480f6:	681b      	ldr	r3, [r3, #0]
 80480f8:	2140      	movs	r1, #64	; 0x40
 80480fa:	4618      	mov	r0, r3
 80480fc:	f000 f943 	bl	8048386 <TIM_ITRx_SetConfig>
      break;
 8048100:	e00c      	b.n	804811c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8048102:	687b      	ldr	r3, [r7, #4]
 8048104:	681a      	ldr	r2, [r3, #0]
 8048106:	683b      	ldr	r3, [r7, #0]
 8048108:	681b      	ldr	r3, [r3, #0]
 804810a:	4619      	mov	r1, r3
 804810c:	4610      	mov	r0, r2
 804810e:	f000 f93a 	bl	8048386 <TIM_ITRx_SetConfig>
      break;
 8048112:	e003      	b.n	804811c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8048114:	2301      	movs	r3, #1
 8048116:	73fb      	strb	r3, [r7, #15]
      break;
 8048118:	e000      	b.n	804811c <HAL_TIM_ConfigClockSource+0x174>
      break;
 804811a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 804811c:	687b      	ldr	r3, [r7, #4]
 804811e:	2201      	movs	r2, #1
 8048120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8048124:	687b      	ldr	r3, [r7, #4]
 8048126:	2200      	movs	r2, #0
 8048128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 804812c:	7bfb      	ldrb	r3, [r7, #15]
}
 804812e:	4618      	mov	r0, r3
 8048130:	3710      	adds	r7, #16
 8048132:	46bd      	mov	sp, r7
 8048134:	bd80      	pop	{r7, pc}

08048136 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8048136:	b480      	push	{r7}
 8048138:	b083      	sub	sp, #12
 804813a:	af00      	add	r7, sp, #0
 804813c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 804813e:	bf00      	nop
 8048140:	370c      	adds	r7, #12
 8048142:	46bd      	mov	sp, r7
 8048144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048148:	4770      	bx	lr

0804814a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 804814a:	b480      	push	{r7}
 804814c:	b083      	sub	sp, #12
 804814e:	af00      	add	r7, sp, #0
 8048150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8048152:	bf00      	nop
 8048154:	370c      	adds	r7, #12
 8048156:	46bd      	mov	sp, r7
 8048158:	f85d 7b04 	ldr.w	r7, [sp], #4
 804815c:	4770      	bx	lr

0804815e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 804815e:	b480      	push	{r7}
 8048160:	b083      	sub	sp, #12
 8048162:	af00      	add	r7, sp, #0
 8048164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8048166:	bf00      	nop
 8048168:	370c      	adds	r7, #12
 804816a:	46bd      	mov	sp, r7
 804816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048170:	4770      	bx	lr

08048172 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8048172:	b480      	push	{r7}
 8048174:	b083      	sub	sp, #12
 8048176:	af00      	add	r7, sp, #0
 8048178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 804817a:	bf00      	nop
 804817c:	370c      	adds	r7, #12
 804817e:	46bd      	mov	sp, r7
 8048180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048184:	4770      	bx	lr
	...

08048188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8048188:	b480      	push	{r7}
 804818a:	b085      	sub	sp, #20
 804818c:	af00      	add	r7, sp, #0
 804818e:	6078      	str	r0, [r7, #4]
 8048190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8048192:	687b      	ldr	r3, [r7, #4]
 8048194:	681b      	ldr	r3, [r3, #0]
 8048196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8048198:	687b      	ldr	r3, [r7, #4]
 804819a:	4a40      	ldr	r2, [pc, #256]	; (804829c <TIM_Base_SetConfig+0x114>)
 804819c:	4293      	cmp	r3, r2
 804819e:	d013      	beq.n	80481c8 <TIM_Base_SetConfig+0x40>
 80481a0:	687b      	ldr	r3, [r7, #4]
 80481a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80481a6:	d00f      	beq.n	80481c8 <TIM_Base_SetConfig+0x40>
 80481a8:	687b      	ldr	r3, [r7, #4]
 80481aa:	4a3d      	ldr	r2, [pc, #244]	; (80482a0 <TIM_Base_SetConfig+0x118>)
 80481ac:	4293      	cmp	r3, r2
 80481ae:	d00b      	beq.n	80481c8 <TIM_Base_SetConfig+0x40>
 80481b0:	687b      	ldr	r3, [r7, #4]
 80481b2:	4a3c      	ldr	r2, [pc, #240]	; (80482a4 <TIM_Base_SetConfig+0x11c>)
 80481b4:	4293      	cmp	r3, r2
 80481b6:	d007      	beq.n	80481c8 <TIM_Base_SetConfig+0x40>
 80481b8:	687b      	ldr	r3, [r7, #4]
 80481ba:	4a3b      	ldr	r2, [pc, #236]	; (80482a8 <TIM_Base_SetConfig+0x120>)
 80481bc:	4293      	cmp	r3, r2
 80481be:	d003      	beq.n	80481c8 <TIM_Base_SetConfig+0x40>
 80481c0:	687b      	ldr	r3, [r7, #4]
 80481c2:	4a3a      	ldr	r2, [pc, #232]	; (80482ac <TIM_Base_SetConfig+0x124>)
 80481c4:	4293      	cmp	r3, r2
 80481c6:	d108      	bne.n	80481da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80481c8:	68fb      	ldr	r3, [r7, #12]
 80481ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80481ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80481d0:	683b      	ldr	r3, [r7, #0]
 80481d2:	685b      	ldr	r3, [r3, #4]
 80481d4:	68fa      	ldr	r2, [r7, #12]
 80481d6:	4313      	orrs	r3, r2
 80481d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80481da:	687b      	ldr	r3, [r7, #4]
 80481dc:	4a2f      	ldr	r2, [pc, #188]	; (804829c <TIM_Base_SetConfig+0x114>)
 80481de:	4293      	cmp	r3, r2
 80481e0:	d02b      	beq.n	804823a <TIM_Base_SetConfig+0xb2>
 80481e2:	687b      	ldr	r3, [r7, #4]
 80481e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80481e8:	d027      	beq.n	804823a <TIM_Base_SetConfig+0xb2>
 80481ea:	687b      	ldr	r3, [r7, #4]
 80481ec:	4a2c      	ldr	r2, [pc, #176]	; (80482a0 <TIM_Base_SetConfig+0x118>)
 80481ee:	4293      	cmp	r3, r2
 80481f0:	d023      	beq.n	804823a <TIM_Base_SetConfig+0xb2>
 80481f2:	687b      	ldr	r3, [r7, #4]
 80481f4:	4a2b      	ldr	r2, [pc, #172]	; (80482a4 <TIM_Base_SetConfig+0x11c>)
 80481f6:	4293      	cmp	r3, r2
 80481f8:	d01f      	beq.n	804823a <TIM_Base_SetConfig+0xb2>
 80481fa:	687b      	ldr	r3, [r7, #4]
 80481fc:	4a2a      	ldr	r2, [pc, #168]	; (80482a8 <TIM_Base_SetConfig+0x120>)
 80481fe:	4293      	cmp	r3, r2
 8048200:	d01b      	beq.n	804823a <TIM_Base_SetConfig+0xb2>
 8048202:	687b      	ldr	r3, [r7, #4]
 8048204:	4a29      	ldr	r2, [pc, #164]	; (80482ac <TIM_Base_SetConfig+0x124>)
 8048206:	4293      	cmp	r3, r2
 8048208:	d017      	beq.n	804823a <TIM_Base_SetConfig+0xb2>
 804820a:	687b      	ldr	r3, [r7, #4]
 804820c:	4a28      	ldr	r2, [pc, #160]	; (80482b0 <TIM_Base_SetConfig+0x128>)
 804820e:	4293      	cmp	r3, r2
 8048210:	d013      	beq.n	804823a <TIM_Base_SetConfig+0xb2>
 8048212:	687b      	ldr	r3, [r7, #4]
 8048214:	4a27      	ldr	r2, [pc, #156]	; (80482b4 <TIM_Base_SetConfig+0x12c>)
 8048216:	4293      	cmp	r3, r2
 8048218:	d00f      	beq.n	804823a <TIM_Base_SetConfig+0xb2>
 804821a:	687b      	ldr	r3, [r7, #4]
 804821c:	4a26      	ldr	r2, [pc, #152]	; (80482b8 <TIM_Base_SetConfig+0x130>)
 804821e:	4293      	cmp	r3, r2
 8048220:	d00b      	beq.n	804823a <TIM_Base_SetConfig+0xb2>
 8048222:	687b      	ldr	r3, [r7, #4]
 8048224:	4a25      	ldr	r2, [pc, #148]	; (80482bc <TIM_Base_SetConfig+0x134>)
 8048226:	4293      	cmp	r3, r2
 8048228:	d007      	beq.n	804823a <TIM_Base_SetConfig+0xb2>
 804822a:	687b      	ldr	r3, [r7, #4]
 804822c:	4a24      	ldr	r2, [pc, #144]	; (80482c0 <TIM_Base_SetConfig+0x138>)
 804822e:	4293      	cmp	r3, r2
 8048230:	d003      	beq.n	804823a <TIM_Base_SetConfig+0xb2>
 8048232:	687b      	ldr	r3, [r7, #4]
 8048234:	4a23      	ldr	r2, [pc, #140]	; (80482c4 <TIM_Base_SetConfig+0x13c>)
 8048236:	4293      	cmp	r3, r2
 8048238:	d108      	bne.n	804824c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 804823a:	68fb      	ldr	r3, [r7, #12]
 804823c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8048240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8048242:	683b      	ldr	r3, [r7, #0]
 8048244:	68db      	ldr	r3, [r3, #12]
 8048246:	68fa      	ldr	r2, [r7, #12]
 8048248:	4313      	orrs	r3, r2
 804824a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 804824c:	68fb      	ldr	r3, [r7, #12]
 804824e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8048252:	683b      	ldr	r3, [r7, #0]
 8048254:	695b      	ldr	r3, [r3, #20]
 8048256:	4313      	orrs	r3, r2
 8048258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 804825a:	687b      	ldr	r3, [r7, #4]
 804825c:	68fa      	ldr	r2, [r7, #12]
 804825e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8048260:	683b      	ldr	r3, [r7, #0]
 8048262:	689a      	ldr	r2, [r3, #8]
 8048264:	687b      	ldr	r3, [r7, #4]
 8048266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8048268:	683b      	ldr	r3, [r7, #0]
 804826a:	681a      	ldr	r2, [r3, #0]
 804826c:	687b      	ldr	r3, [r7, #4]
 804826e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8048270:	687b      	ldr	r3, [r7, #4]
 8048272:	4a0a      	ldr	r2, [pc, #40]	; (804829c <TIM_Base_SetConfig+0x114>)
 8048274:	4293      	cmp	r3, r2
 8048276:	d003      	beq.n	8048280 <TIM_Base_SetConfig+0xf8>
 8048278:	687b      	ldr	r3, [r7, #4]
 804827a:	4a0c      	ldr	r2, [pc, #48]	; (80482ac <TIM_Base_SetConfig+0x124>)
 804827c:	4293      	cmp	r3, r2
 804827e:	d103      	bne.n	8048288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8048280:	683b      	ldr	r3, [r7, #0]
 8048282:	691a      	ldr	r2, [r3, #16]
 8048284:	687b      	ldr	r3, [r7, #4]
 8048286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8048288:	687b      	ldr	r3, [r7, #4]
 804828a:	2201      	movs	r2, #1
 804828c:	615a      	str	r2, [r3, #20]
}
 804828e:	bf00      	nop
 8048290:	3714      	adds	r7, #20
 8048292:	46bd      	mov	sp, r7
 8048294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048298:	4770      	bx	lr
 804829a:	bf00      	nop
 804829c:	40010000 	.word	0x40010000
 80482a0:	40000400 	.word	0x40000400
 80482a4:	40000800 	.word	0x40000800
 80482a8:	40000c00 	.word	0x40000c00
 80482ac:	40010400 	.word	0x40010400
 80482b0:	40014000 	.word	0x40014000
 80482b4:	40014400 	.word	0x40014400
 80482b8:	40014800 	.word	0x40014800
 80482bc:	40001800 	.word	0x40001800
 80482c0:	40001c00 	.word	0x40001c00
 80482c4:	40002000 	.word	0x40002000

080482c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80482c8:	b480      	push	{r7}
 80482ca:	b087      	sub	sp, #28
 80482cc:	af00      	add	r7, sp, #0
 80482ce:	60f8      	str	r0, [r7, #12]
 80482d0:	60b9      	str	r1, [r7, #8]
 80482d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80482d4:	68fb      	ldr	r3, [r7, #12]
 80482d6:	6a1b      	ldr	r3, [r3, #32]
 80482d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80482da:	68fb      	ldr	r3, [r7, #12]
 80482dc:	6a1b      	ldr	r3, [r3, #32]
 80482de:	f023 0201 	bic.w	r2, r3, #1
 80482e2:	68fb      	ldr	r3, [r7, #12]
 80482e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80482e6:	68fb      	ldr	r3, [r7, #12]
 80482e8:	699b      	ldr	r3, [r3, #24]
 80482ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80482ec:	693b      	ldr	r3, [r7, #16]
 80482ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80482f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80482f4:	687b      	ldr	r3, [r7, #4]
 80482f6:	011b      	lsls	r3, r3, #4
 80482f8:	693a      	ldr	r2, [r7, #16]
 80482fa:	4313      	orrs	r3, r2
 80482fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80482fe:	697b      	ldr	r3, [r7, #20]
 8048300:	f023 030a 	bic.w	r3, r3, #10
 8048304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8048306:	697a      	ldr	r2, [r7, #20]
 8048308:	68bb      	ldr	r3, [r7, #8]
 804830a:	4313      	orrs	r3, r2
 804830c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 804830e:	68fb      	ldr	r3, [r7, #12]
 8048310:	693a      	ldr	r2, [r7, #16]
 8048312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8048314:	68fb      	ldr	r3, [r7, #12]
 8048316:	697a      	ldr	r2, [r7, #20]
 8048318:	621a      	str	r2, [r3, #32]
}
 804831a:	bf00      	nop
 804831c:	371c      	adds	r7, #28
 804831e:	46bd      	mov	sp, r7
 8048320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048324:	4770      	bx	lr

08048326 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8048326:	b480      	push	{r7}
 8048328:	b087      	sub	sp, #28
 804832a:	af00      	add	r7, sp, #0
 804832c:	60f8      	str	r0, [r7, #12]
 804832e:	60b9      	str	r1, [r7, #8]
 8048330:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8048332:	68fb      	ldr	r3, [r7, #12]
 8048334:	6a1b      	ldr	r3, [r3, #32]
 8048336:	f023 0210 	bic.w	r2, r3, #16
 804833a:	68fb      	ldr	r3, [r7, #12]
 804833c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 804833e:	68fb      	ldr	r3, [r7, #12]
 8048340:	699b      	ldr	r3, [r3, #24]
 8048342:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8048344:	68fb      	ldr	r3, [r7, #12]
 8048346:	6a1b      	ldr	r3, [r3, #32]
 8048348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 804834a:	697b      	ldr	r3, [r7, #20]
 804834c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8048350:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8048352:	687b      	ldr	r3, [r7, #4]
 8048354:	031b      	lsls	r3, r3, #12
 8048356:	697a      	ldr	r2, [r7, #20]
 8048358:	4313      	orrs	r3, r2
 804835a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 804835c:	693b      	ldr	r3, [r7, #16]
 804835e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8048362:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8048364:	68bb      	ldr	r3, [r7, #8]
 8048366:	011b      	lsls	r3, r3, #4
 8048368:	693a      	ldr	r2, [r7, #16]
 804836a:	4313      	orrs	r3, r2
 804836c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 804836e:	68fb      	ldr	r3, [r7, #12]
 8048370:	697a      	ldr	r2, [r7, #20]
 8048372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8048374:	68fb      	ldr	r3, [r7, #12]
 8048376:	693a      	ldr	r2, [r7, #16]
 8048378:	621a      	str	r2, [r3, #32]
}
 804837a:	bf00      	nop
 804837c:	371c      	adds	r7, #28
 804837e:	46bd      	mov	sp, r7
 8048380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048384:	4770      	bx	lr

08048386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8048386:	b480      	push	{r7}
 8048388:	b085      	sub	sp, #20
 804838a:	af00      	add	r7, sp, #0
 804838c:	6078      	str	r0, [r7, #4]
 804838e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8048390:	687b      	ldr	r3, [r7, #4]
 8048392:	689b      	ldr	r3, [r3, #8]
 8048394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8048396:	68fb      	ldr	r3, [r7, #12]
 8048398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804839c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 804839e:	683a      	ldr	r2, [r7, #0]
 80483a0:	68fb      	ldr	r3, [r7, #12]
 80483a2:	4313      	orrs	r3, r2
 80483a4:	f043 0307 	orr.w	r3, r3, #7
 80483a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80483aa:	687b      	ldr	r3, [r7, #4]
 80483ac:	68fa      	ldr	r2, [r7, #12]
 80483ae:	609a      	str	r2, [r3, #8]
}
 80483b0:	bf00      	nop
 80483b2:	3714      	adds	r7, #20
 80483b4:	46bd      	mov	sp, r7
 80483b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80483ba:	4770      	bx	lr

080483bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80483bc:	b480      	push	{r7}
 80483be:	b087      	sub	sp, #28
 80483c0:	af00      	add	r7, sp, #0
 80483c2:	60f8      	str	r0, [r7, #12]
 80483c4:	60b9      	str	r1, [r7, #8]
 80483c6:	607a      	str	r2, [r7, #4]
 80483c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80483ca:	68fb      	ldr	r3, [r7, #12]
 80483cc:	689b      	ldr	r3, [r3, #8]
 80483ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80483d0:	697b      	ldr	r3, [r7, #20]
 80483d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80483d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80483d8:	683b      	ldr	r3, [r7, #0]
 80483da:	021a      	lsls	r2, r3, #8
 80483dc:	687b      	ldr	r3, [r7, #4]
 80483de:	431a      	orrs	r2, r3
 80483e0:	68bb      	ldr	r3, [r7, #8]
 80483e2:	4313      	orrs	r3, r2
 80483e4:	697a      	ldr	r2, [r7, #20]
 80483e6:	4313      	orrs	r3, r2
 80483e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80483ea:	68fb      	ldr	r3, [r7, #12]
 80483ec:	697a      	ldr	r2, [r7, #20]
 80483ee:	609a      	str	r2, [r3, #8]
}
 80483f0:	bf00      	nop
 80483f2:	371c      	adds	r7, #28
 80483f4:	46bd      	mov	sp, r7
 80483f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80483fa:	4770      	bx	lr

080483fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80483fc:	b480      	push	{r7}
 80483fe:	b085      	sub	sp, #20
 8048400:	af00      	add	r7, sp, #0
 8048402:	6078      	str	r0, [r7, #4]
 8048404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8048406:	687b      	ldr	r3, [r7, #4]
 8048408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 804840c:	2b01      	cmp	r3, #1
 804840e:	d101      	bne.n	8048414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8048410:	2302      	movs	r3, #2
 8048412:	e05a      	b.n	80484ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8048414:	687b      	ldr	r3, [r7, #4]
 8048416:	2201      	movs	r2, #1
 8048418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 804841c:	687b      	ldr	r3, [r7, #4]
 804841e:	2202      	movs	r2, #2
 8048420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8048424:	687b      	ldr	r3, [r7, #4]
 8048426:	681b      	ldr	r3, [r3, #0]
 8048428:	685b      	ldr	r3, [r3, #4]
 804842a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 804842c:	687b      	ldr	r3, [r7, #4]
 804842e:	681b      	ldr	r3, [r3, #0]
 8048430:	689b      	ldr	r3, [r3, #8]
 8048432:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8048434:	68fb      	ldr	r3, [r7, #12]
 8048436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804843a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 804843c:	683b      	ldr	r3, [r7, #0]
 804843e:	681b      	ldr	r3, [r3, #0]
 8048440:	68fa      	ldr	r2, [r7, #12]
 8048442:	4313      	orrs	r3, r2
 8048444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8048446:	687b      	ldr	r3, [r7, #4]
 8048448:	681b      	ldr	r3, [r3, #0]
 804844a:	68fa      	ldr	r2, [r7, #12]
 804844c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 804844e:	687b      	ldr	r3, [r7, #4]
 8048450:	681b      	ldr	r3, [r3, #0]
 8048452:	4a21      	ldr	r2, [pc, #132]	; (80484d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8048454:	4293      	cmp	r3, r2
 8048456:	d022      	beq.n	804849e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048458:	687b      	ldr	r3, [r7, #4]
 804845a:	681b      	ldr	r3, [r3, #0]
 804845c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048460:	d01d      	beq.n	804849e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048462:	687b      	ldr	r3, [r7, #4]
 8048464:	681b      	ldr	r3, [r3, #0]
 8048466:	4a1d      	ldr	r2, [pc, #116]	; (80484dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8048468:	4293      	cmp	r3, r2
 804846a:	d018      	beq.n	804849e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 804846c:	687b      	ldr	r3, [r7, #4]
 804846e:	681b      	ldr	r3, [r3, #0]
 8048470:	4a1b      	ldr	r2, [pc, #108]	; (80484e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8048472:	4293      	cmp	r3, r2
 8048474:	d013      	beq.n	804849e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048476:	687b      	ldr	r3, [r7, #4]
 8048478:	681b      	ldr	r3, [r3, #0]
 804847a:	4a1a      	ldr	r2, [pc, #104]	; (80484e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 804847c:	4293      	cmp	r3, r2
 804847e:	d00e      	beq.n	804849e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048480:	687b      	ldr	r3, [r7, #4]
 8048482:	681b      	ldr	r3, [r3, #0]
 8048484:	4a18      	ldr	r2, [pc, #96]	; (80484e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8048486:	4293      	cmp	r3, r2
 8048488:	d009      	beq.n	804849e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 804848a:	687b      	ldr	r3, [r7, #4]
 804848c:	681b      	ldr	r3, [r3, #0]
 804848e:	4a17      	ldr	r2, [pc, #92]	; (80484ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8048490:	4293      	cmp	r3, r2
 8048492:	d004      	beq.n	804849e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048494:	687b      	ldr	r3, [r7, #4]
 8048496:	681b      	ldr	r3, [r3, #0]
 8048498:	4a15      	ldr	r2, [pc, #84]	; (80484f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 804849a:	4293      	cmp	r3, r2
 804849c:	d10c      	bne.n	80484b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 804849e:	68bb      	ldr	r3, [r7, #8]
 80484a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80484a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80484a6:	683b      	ldr	r3, [r7, #0]
 80484a8:	685b      	ldr	r3, [r3, #4]
 80484aa:	68ba      	ldr	r2, [r7, #8]
 80484ac:	4313      	orrs	r3, r2
 80484ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80484b0:	687b      	ldr	r3, [r7, #4]
 80484b2:	681b      	ldr	r3, [r3, #0]
 80484b4:	68ba      	ldr	r2, [r7, #8]
 80484b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80484b8:	687b      	ldr	r3, [r7, #4]
 80484ba:	2201      	movs	r2, #1
 80484bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80484c0:	687b      	ldr	r3, [r7, #4]
 80484c2:	2200      	movs	r2, #0
 80484c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80484c8:	2300      	movs	r3, #0
}
 80484ca:	4618      	mov	r0, r3
 80484cc:	3714      	adds	r7, #20
 80484ce:	46bd      	mov	sp, r7
 80484d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80484d4:	4770      	bx	lr
 80484d6:	bf00      	nop
 80484d8:	40010000 	.word	0x40010000
 80484dc:	40000400 	.word	0x40000400
 80484e0:	40000800 	.word	0x40000800
 80484e4:	40000c00 	.word	0x40000c00
 80484e8:	40010400 	.word	0x40010400
 80484ec:	40014000 	.word	0x40014000
 80484f0:	40001800 	.word	0x40001800

080484f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80484f4:	b480      	push	{r7}
 80484f6:	b083      	sub	sp, #12
 80484f8:	af00      	add	r7, sp, #0
 80484fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80484fc:	bf00      	nop
 80484fe:	370c      	adds	r7, #12
 8048500:	46bd      	mov	sp, r7
 8048502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048506:	4770      	bx	lr

08048508 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8048508:	b480      	push	{r7}
 804850a:	b083      	sub	sp, #12
 804850c:	af00      	add	r7, sp, #0
 804850e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8048510:	bf00      	nop
 8048512:	370c      	adds	r7, #12
 8048514:	46bd      	mov	sp, r7
 8048516:	f85d 7b04 	ldr.w	r7, [sp], #4
 804851a:	4770      	bx	lr

0804851c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 804851c:	b580      	push	{r7, lr}
 804851e:	b082      	sub	sp, #8
 8048520:	af00      	add	r7, sp, #0
 8048522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8048524:	687b      	ldr	r3, [r7, #4]
 8048526:	2b00      	cmp	r3, #0
 8048528:	d101      	bne.n	804852e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 804852a:	2301      	movs	r3, #1
 804852c:	e03f      	b.n	80485ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 804852e:	687b      	ldr	r3, [r7, #4]
 8048530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8048534:	b2db      	uxtb	r3, r3
 8048536:	2b00      	cmp	r3, #0
 8048538:	d106      	bne.n	8048548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 804853a:	687b      	ldr	r3, [r7, #4]
 804853c:	2200      	movs	r2, #0
 804853e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8048542:	6878      	ldr	r0, [r7, #4]
 8048544:	f7f8 fefa 	bl	804133c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8048548:	687b      	ldr	r3, [r7, #4]
 804854a:	2224      	movs	r2, #36	; 0x24
 804854c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8048550:	687b      	ldr	r3, [r7, #4]
 8048552:	681b      	ldr	r3, [r3, #0]
 8048554:	68da      	ldr	r2, [r3, #12]
 8048556:	687b      	ldr	r3, [r7, #4]
 8048558:	681b      	ldr	r3, [r3, #0]
 804855a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 804855e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8048560:	6878      	ldr	r0, [r7, #4]
 8048562:	f000 f829 	bl	80485b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8048566:	687b      	ldr	r3, [r7, #4]
 8048568:	681b      	ldr	r3, [r3, #0]
 804856a:	691a      	ldr	r2, [r3, #16]
 804856c:	687b      	ldr	r3, [r7, #4]
 804856e:	681b      	ldr	r3, [r3, #0]
 8048570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8048574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8048576:	687b      	ldr	r3, [r7, #4]
 8048578:	681b      	ldr	r3, [r3, #0]
 804857a:	695a      	ldr	r2, [r3, #20]
 804857c:	687b      	ldr	r3, [r7, #4]
 804857e:	681b      	ldr	r3, [r3, #0]
 8048580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8048584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8048586:	687b      	ldr	r3, [r7, #4]
 8048588:	681b      	ldr	r3, [r3, #0]
 804858a:	68da      	ldr	r2, [r3, #12]
 804858c:	687b      	ldr	r3, [r7, #4]
 804858e:	681b      	ldr	r3, [r3, #0]
 8048590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8048594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8048596:	687b      	ldr	r3, [r7, #4]
 8048598:	2200      	movs	r2, #0
 804859a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 804859c:	687b      	ldr	r3, [r7, #4]
 804859e:	2220      	movs	r2, #32
 80485a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80485a4:	687b      	ldr	r3, [r7, #4]
 80485a6:	2220      	movs	r2, #32
 80485a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80485ac:	2300      	movs	r3, #0
}
 80485ae:	4618      	mov	r0, r3
 80485b0:	3708      	adds	r7, #8
 80485b2:	46bd      	mov	sp, r7
 80485b4:	bd80      	pop	{r7, pc}
	...

080485b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80485b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80485bc:	b0c0      	sub	sp, #256	; 0x100
 80485be:	af00      	add	r7, sp, #0
 80485c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80485c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80485c8:	681b      	ldr	r3, [r3, #0]
 80485ca:	691b      	ldr	r3, [r3, #16]
 80485cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80485d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80485d4:	68d9      	ldr	r1, [r3, #12]
 80485d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80485da:	681a      	ldr	r2, [r3, #0]
 80485dc:	ea40 0301 	orr.w	r3, r0, r1
 80485e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80485e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80485e6:	689a      	ldr	r2, [r3, #8]
 80485e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80485ec:	691b      	ldr	r3, [r3, #16]
 80485ee:	431a      	orrs	r2, r3
 80485f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80485f4:	695b      	ldr	r3, [r3, #20]
 80485f6:	431a      	orrs	r2, r3
 80485f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80485fc:	69db      	ldr	r3, [r3, #28]
 80485fe:	4313      	orrs	r3, r2
 8048600:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8048604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048608:	681b      	ldr	r3, [r3, #0]
 804860a:	68db      	ldr	r3, [r3, #12]
 804860c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8048610:	f021 010c 	bic.w	r1, r1, #12
 8048614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048618:	681a      	ldr	r2, [r3, #0]
 804861a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 804861e:	430b      	orrs	r3, r1
 8048620:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8048622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048626:	681b      	ldr	r3, [r3, #0]
 8048628:	695b      	ldr	r3, [r3, #20]
 804862a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 804862e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048632:	6999      	ldr	r1, [r3, #24]
 8048634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048638:	681a      	ldr	r2, [r3, #0]
 804863a:	ea40 0301 	orr.w	r3, r0, r1
 804863e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8048640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048644:	681a      	ldr	r2, [r3, #0]
 8048646:	4b8f      	ldr	r3, [pc, #572]	; (8048884 <UART_SetConfig+0x2cc>)
 8048648:	429a      	cmp	r2, r3
 804864a:	d005      	beq.n	8048658 <UART_SetConfig+0xa0>
 804864c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048650:	681a      	ldr	r2, [r3, #0]
 8048652:	4b8d      	ldr	r3, [pc, #564]	; (8048888 <UART_SetConfig+0x2d0>)
 8048654:	429a      	cmp	r2, r3
 8048656:	d104      	bne.n	8048662 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8048658:	f7fe fa68 	bl	8046b2c <HAL_RCC_GetPCLK2Freq>
 804865c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8048660:	e003      	b.n	804866a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8048662:	f7fe fa4f 	bl	8046b04 <HAL_RCC_GetPCLK1Freq>
 8048666:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 804866a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804866e:	69db      	ldr	r3, [r3, #28]
 8048670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8048674:	f040 810c 	bne.w	8048890 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8048678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 804867c:	2200      	movs	r2, #0
 804867e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8048682:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8048686:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 804868a:	4622      	mov	r2, r4
 804868c:	462b      	mov	r3, r5
 804868e:	1891      	adds	r1, r2, r2
 8048690:	65b9      	str	r1, [r7, #88]	; 0x58
 8048692:	415b      	adcs	r3, r3
 8048694:	65fb      	str	r3, [r7, #92]	; 0x5c
 8048696:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 804869a:	4621      	mov	r1, r4
 804869c:	eb12 0801 	adds.w	r8, r2, r1
 80486a0:	4629      	mov	r1, r5
 80486a2:	eb43 0901 	adc.w	r9, r3, r1
 80486a6:	f04f 0200 	mov.w	r2, #0
 80486aa:	f04f 0300 	mov.w	r3, #0
 80486ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80486b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80486b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80486ba:	4690      	mov	r8, r2
 80486bc:	4699      	mov	r9, r3
 80486be:	4623      	mov	r3, r4
 80486c0:	eb18 0303 	adds.w	r3, r8, r3
 80486c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80486c8:	462b      	mov	r3, r5
 80486ca:	eb49 0303 	adc.w	r3, r9, r3
 80486ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80486d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80486d6:	685b      	ldr	r3, [r3, #4]
 80486d8:	2200      	movs	r2, #0
 80486da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80486de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80486e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80486e6:	460b      	mov	r3, r1
 80486e8:	18db      	adds	r3, r3, r3
 80486ea:	653b      	str	r3, [r7, #80]	; 0x50
 80486ec:	4613      	mov	r3, r2
 80486ee:	eb42 0303 	adc.w	r3, r2, r3
 80486f2:	657b      	str	r3, [r7, #84]	; 0x54
 80486f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80486f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80486fc:	f7f7 fdc8 	bl	8040290 <__aeabi_uldivmod>
 8048700:	4602      	mov	r2, r0
 8048702:	460b      	mov	r3, r1
 8048704:	4b61      	ldr	r3, [pc, #388]	; (804888c <UART_SetConfig+0x2d4>)
 8048706:	fba3 2302 	umull	r2, r3, r3, r2
 804870a:	095b      	lsrs	r3, r3, #5
 804870c:	011c      	lsls	r4, r3, #4
 804870e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8048712:	2200      	movs	r2, #0
 8048714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8048718:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 804871c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8048720:	4642      	mov	r2, r8
 8048722:	464b      	mov	r3, r9
 8048724:	1891      	adds	r1, r2, r2
 8048726:	64b9      	str	r1, [r7, #72]	; 0x48
 8048728:	415b      	adcs	r3, r3
 804872a:	64fb      	str	r3, [r7, #76]	; 0x4c
 804872c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8048730:	4641      	mov	r1, r8
 8048732:	eb12 0a01 	adds.w	sl, r2, r1
 8048736:	4649      	mov	r1, r9
 8048738:	eb43 0b01 	adc.w	fp, r3, r1
 804873c:	f04f 0200 	mov.w	r2, #0
 8048740:	f04f 0300 	mov.w	r3, #0
 8048744:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8048748:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 804874c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8048750:	4692      	mov	sl, r2
 8048752:	469b      	mov	fp, r3
 8048754:	4643      	mov	r3, r8
 8048756:	eb1a 0303 	adds.w	r3, sl, r3
 804875a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 804875e:	464b      	mov	r3, r9
 8048760:	eb4b 0303 	adc.w	r3, fp, r3
 8048764:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8048768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804876c:	685b      	ldr	r3, [r3, #4]
 804876e:	2200      	movs	r2, #0
 8048770:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8048774:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8048778:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 804877c:	460b      	mov	r3, r1
 804877e:	18db      	adds	r3, r3, r3
 8048780:	643b      	str	r3, [r7, #64]	; 0x40
 8048782:	4613      	mov	r3, r2
 8048784:	eb42 0303 	adc.w	r3, r2, r3
 8048788:	647b      	str	r3, [r7, #68]	; 0x44
 804878a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 804878e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8048792:	f7f7 fd7d 	bl	8040290 <__aeabi_uldivmod>
 8048796:	4602      	mov	r2, r0
 8048798:	460b      	mov	r3, r1
 804879a:	4611      	mov	r1, r2
 804879c:	4b3b      	ldr	r3, [pc, #236]	; (804888c <UART_SetConfig+0x2d4>)
 804879e:	fba3 2301 	umull	r2, r3, r3, r1
 80487a2:	095b      	lsrs	r3, r3, #5
 80487a4:	2264      	movs	r2, #100	; 0x64
 80487a6:	fb02 f303 	mul.w	r3, r2, r3
 80487aa:	1acb      	subs	r3, r1, r3
 80487ac:	00db      	lsls	r3, r3, #3
 80487ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80487b2:	4b36      	ldr	r3, [pc, #216]	; (804888c <UART_SetConfig+0x2d4>)
 80487b4:	fba3 2302 	umull	r2, r3, r3, r2
 80487b8:	095b      	lsrs	r3, r3, #5
 80487ba:	005b      	lsls	r3, r3, #1
 80487bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80487c0:	441c      	add	r4, r3
 80487c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80487c6:	2200      	movs	r2, #0
 80487c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80487cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80487d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80487d4:	4642      	mov	r2, r8
 80487d6:	464b      	mov	r3, r9
 80487d8:	1891      	adds	r1, r2, r2
 80487da:	63b9      	str	r1, [r7, #56]	; 0x38
 80487dc:	415b      	adcs	r3, r3
 80487de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80487e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80487e4:	4641      	mov	r1, r8
 80487e6:	1851      	adds	r1, r2, r1
 80487e8:	6339      	str	r1, [r7, #48]	; 0x30
 80487ea:	4649      	mov	r1, r9
 80487ec:	414b      	adcs	r3, r1
 80487ee:	637b      	str	r3, [r7, #52]	; 0x34
 80487f0:	f04f 0200 	mov.w	r2, #0
 80487f4:	f04f 0300 	mov.w	r3, #0
 80487f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80487fc:	4659      	mov	r1, fp
 80487fe:	00cb      	lsls	r3, r1, #3
 8048800:	4651      	mov	r1, sl
 8048802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8048806:	4651      	mov	r1, sl
 8048808:	00ca      	lsls	r2, r1, #3
 804880a:	4610      	mov	r0, r2
 804880c:	4619      	mov	r1, r3
 804880e:	4603      	mov	r3, r0
 8048810:	4642      	mov	r2, r8
 8048812:	189b      	adds	r3, r3, r2
 8048814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8048818:	464b      	mov	r3, r9
 804881a:	460a      	mov	r2, r1
 804881c:	eb42 0303 	adc.w	r3, r2, r3
 8048820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8048824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048828:	685b      	ldr	r3, [r3, #4]
 804882a:	2200      	movs	r2, #0
 804882c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8048830:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8048834:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8048838:	460b      	mov	r3, r1
 804883a:	18db      	adds	r3, r3, r3
 804883c:	62bb      	str	r3, [r7, #40]	; 0x28
 804883e:	4613      	mov	r3, r2
 8048840:	eb42 0303 	adc.w	r3, r2, r3
 8048844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8048846:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 804884a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 804884e:	f7f7 fd1f 	bl	8040290 <__aeabi_uldivmod>
 8048852:	4602      	mov	r2, r0
 8048854:	460b      	mov	r3, r1
 8048856:	4b0d      	ldr	r3, [pc, #52]	; (804888c <UART_SetConfig+0x2d4>)
 8048858:	fba3 1302 	umull	r1, r3, r3, r2
 804885c:	095b      	lsrs	r3, r3, #5
 804885e:	2164      	movs	r1, #100	; 0x64
 8048860:	fb01 f303 	mul.w	r3, r1, r3
 8048864:	1ad3      	subs	r3, r2, r3
 8048866:	00db      	lsls	r3, r3, #3
 8048868:	3332      	adds	r3, #50	; 0x32
 804886a:	4a08      	ldr	r2, [pc, #32]	; (804888c <UART_SetConfig+0x2d4>)
 804886c:	fba2 2303 	umull	r2, r3, r2, r3
 8048870:	095b      	lsrs	r3, r3, #5
 8048872:	f003 0207 	and.w	r2, r3, #7
 8048876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804887a:	681b      	ldr	r3, [r3, #0]
 804887c:	4422      	add	r2, r4
 804887e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8048880:	e105      	b.n	8048a8e <UART_SetConfig+0x4d6>
 8048882:	bf00      	nop
 8048884:	40011000 	.word	0x40011000
 8048888:	40011400 	.word	0x40011400
 804888c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8048890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8048894:	2200      	movs	r2, #0
 8048896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 804889a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 804889e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80488a2:	4642      	mov	r2, r8
 80488a4:	464b      	mov	r3, r9
 80488a6:	1891      	adds	r1, r2, r2
 80488a8:	6239      	str	r1, [r7, #32]
 80488aa:	415b      	adcs	r3, r3
 80488ac:	627b      	str	r3, [r7, #36]	; 0x24
 80488ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80488b2:	4641      	mov	r1, r8
 80488b4:	1854      	adds	r4, r2, r1
 80488b6:	4649      	mov	r1, r9
 80488b8:	eb43 0501 	adc.w	r5, r3, r1
 80488bc:	f04f 0200 	mov.w	r2, #0
 80488c0:	f04f 0300 	mov.w	r3, #0
 80488c4:	00eb      	lsls	r3, r5, #3
 80488c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80488ca:	00e2      	lsls	r2, r4, #3
 80488cc:	4614      	mov	r4, r2
 80488ce:	461d      	mov	r5, r3
 80488d0:	4643      	mov	r3, r8
 80488d2:	18e3      	adds	r3, r4, r3
 80488d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80488d8:	464b      	mov	r3, r9
 80488da:	eb45 0303 	adc.w	r3, r5, r3
 80488de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80488e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80488e6:	685b      	ldr	r3, [r3, #4]
 80488e8:	2200      	movs	r2, #0
 80488ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80488ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80488f2:	f04f 0200 	mov.w	r2, #0
 80488f6:	f04f 0300 	mov.w	r3, #0
 80488fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80488fe:	4629      	mov	r1, r5
 8048900:	008b      	lsls	r3, r1, #2
 8048902:	4621      	mov	r1, r4
 8048904:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8048908:	4621      	mov	r1, r4
 804890a:	008a      	lsls	r2, r1, #2
 804890c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8048910:	f7f7 fcbe 	bl	8040290 <__aeabi_uldivmod>
 8048914:	4602      	mov	r2, r0
 8048916:	460b      	mov	r3, r1
 8048918:	4b60      	ldr	r3, [pc, #384]	; (8048a9c <UART_SetConfig+0x4e4>)
 804891a:	fba3 2302 	umull	r2, r3, r3, r2
 804891e:	095b      	lsrs	r3, r3, #5
 8048920:	011c      	lsls	r4, r3, #4
 8048922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8048926:	2200      	movs	r2, #0
 8048928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 804892c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8048930:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8048934:	4642      	mov	r2, r8
 8048936:	464b      	mov	r3, r9
 8048938:	1891      	adds	r1, r2, r2
 804893a:	61b9      	str	r1, [r7, #24]
 804893c:	415b      	adcs	r3, r3
 804893e:	61fb      	str	r3, [r7, #28]
 8048940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8048944:	4641      	mov	r1, r8
 8048946:	1851      	adds	r1, r2, r1
 8048948:	6139      	str	r1, [r7, #16]
 804894a:	4649      	mov	r1, r9
 804894c:	414b      	adcs	r3, r1
 804894e:	617b      	str	r3, [r7, #20]
 8048950:	f04f 0200 	mov.w	r2, #0
 8048954:	f04f 0300 	mov.w	r3, #0
 8048958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 804895c:	4659      	mov	r1, fp
 804895e:	00cb      	lsls	r3, r1, #3
 8048960:	4651      	mov	r1, sl
 8048962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8048966:	4651      	mov	r1, sl
 8048968:	00ca      	lsls	r2, r1, #3
 804896a:	4610      	mov	r0, r2
 804896c:	4619      	mov	r1, r3
 804896e:	4603      	mov	r3, r0
 8048970:	4642      	mov	r2, r8
 8048972:	189b      	adds	r3, r3, r2
 8048974:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8048978:	464b      	mov	r3, r9
 804897a:	460a      	mov	r2, r1
 804897c:	eb42 0303 	adc.w	r3, r2, r3
 8048980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8048984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048988:	685b      	ldr	r3, [r3, #4]
 804898a:	2200      	movs	r2, #0
 804898c:	67bb      	str	r3, [r7, #120]	; 0x78
 804898e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8048990:	f04f 0200 	mov.w	r2, #0
 8048994:	f04f 0300 	mov.w	r3, #0
 8048998:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 804899c:	4649      	mov	r1, r9
 804899e:	008b      	lsls	r3, r1, #2
 80489a0:	4641      	mov	r1, r8
 80489a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80489a6:	4641      	mov	r1, r8
 80489a8:	008a      	lsls	r2, r1, #2
 80489aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80489ae:	f7f7 fc6f 	bl	8040290 <__aeabi_uldivmod>
 80489b2:	4602      	mov	r2, r0
 80489b4:	460b      	mov	r3, r1
 80489b6:	4b39      	ldr	r3, [pc, #228]	; (8048a9c <UART_SetConfig+0x4e4>)
 80489b8:	fba3 1302 	umull	r1, r3, r3, r2
 80489bc:	095b      	lsrs	r3, r3, #5
 80489be:	2164      	movs	r1, #100	; 0x64
 80489c0:	fb01 f303 	mul.w	r3, r1, r3
 80489c4:	1ad3      	subs	r3, r2, r3
 80489c6:	011b      	lsls	r3, r3, #4
 80489c8:	3332      	adds	r3, #50	; 0x32
 80489ca:	4a34      	ldr	r2, [pc, #208]	; (8048a9c <UART_SetConfig+0x4e4>)
 80489cc:	fba2 2303 	umull	r2, r3, r2, r3
 80489d0:	095b      	lsrs	r3, r3, #5
 80489d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80489d6:	441c      	add	r4, r3
 80489d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80489dc:	2200      	movs	r2, #0
 80489de:	673b      	str	r3, [r7, #112]	; 0x70
 80489e0:	677a      	str	r2, [r7, #116]	; 0x74
 80489e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80489e6:	4642      	mov	r2, r8
 80489e8:	464b      	mov	r3, r9
 80489ea:	1891      	adds	r1, r2, r2
 80489ec:	60b9      	str	r1, [r7, #8]
 80489ee:	415b      	adcs	r3, r3
 80489f0:	60fb      	str	r3, [r7, #12]
 80489f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80489f6:	4641      	mov	r1, r8
 80489f8:	1851      	adds	r1, r2, r1
 80489fa:	6039      	str	r1, [r7, #0]
 80489fc:	4649      	mov	r1, r9
 80489fe:	414b      	adcs	r3, r1
 8048a00:	607b      	str	r3, [r7, #4]
 8048a02:	f04f 0200 	mov.w	r2, #0
 8048a06:	f04f 0300 	mov.w	r3, #0
 8048a0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8048a0e:	4659      	mov	r1, fp
 8048a10:	00cb      	lsls	r3, r1, #3
 8048a12:	4651      	mov	r1, sl
 8048a14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8048a18:	4651      	mov	r1, sl
 8048a1a:	00ca      	lsls	r2, r1, #3
 8048a1c:	4610      	mov	r0, r2
 8048a1e:	4619      	mov	r1, r3
 8048a20:	4603      	mov	r3, r0
 8048a22:	4642      	mov	r2, r8
 8048a24:	189b      	adds	r3, r3, r2
 8048a26:	66bb      	str	r3, [r7, #104]	; 0x68
 8048a28:	464b      	mov	r3, r9
 8048a2a:	460a      	mov	r2, r1
 8048a2c:	eb42 0303 	adc.w	r3, r2, r3
 8048a30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8048a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a36:	685b      	ldr	r3, [r3, #4]
 8048a38:	2200      	movs	r2, #0
 8048a3a:	663b      	str	r3, [r7, #96]	; 0x60
 8048a3c:	667a      	str	r2, [r7, #100]	; 0x64
 8048a3e:	f04f 0200 	mov.w	r2, #0
 8048a42:	f04f 0300 	mov.w	r3, #0
 8048a46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8048a4a:	4649      	mov	r1, r9
 8048a4c:	008b      	lsls	r3, r1, #2
 8048a4e:	4641      	mov	r1, r8
 8048a50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8048a54:	4641      	mov	r1, r8
 8048a56:	008a      	lsls	r2, r1, #2
 8048a58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8048a5c:	f7f7 fc18 	bl	8040290 <__aeabi_uldivmod>
 8048a60:	4602      	mov	r2, r0
 8048a62:	460b      	mov	r3, r1
 8048a64:	4b0d      	ldr	r3, [pc, #52]	; (8048a9c <UART_SetConfig+0x4e4>)
 8048a66:	fba3 1302 	umull	r1, r3, r3, r2
 8048a6a:	095b      	lsrs	r3, r3, #5
 8048a6c:	2164      	movs	r1, #100	; 0x64
 8048a6e:	fb01 f303 	mul.w	r3, r1, r3
 8048a72:	1ad3      	subs	r3, r2, r3
 8048a74:	011b      	lsls	r3, r3, #4
 8048a76:	3332      	adds	r3, #50	; 0x32
 8048a78:	4a08      	ldr	r2, [pc, #32]	; (8048a9c <UART_SetConfig+0x4e4>)
 8048a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8048a7e:	095b      	lsrs	r3, r3, #5
 8048a80:	f003 020f 	and.w	r2, r3, #15
 8048a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a88:	681b      	ldr	r3, [r3, #0]
 8048a8a:	4422      	add	r2, r4
 8048a8c:	609a      	str	r2, [r3, #8]
}
 8048a8e:	bf00      	nop
 8048a90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8048a94:	46bd      	mov	sp, r7
 8048a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8048a9a:	bf00      	nop
 8048a9c:	51eb851f 	.word	0x51eb851f

08048aa0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8048aa0:	b480      	push	{r7}
 8048aa2:	b083      	sub	sp, #12
 8048aa4:	af00      	add	r7, sp, #0
 8048aa6:	6078      	str	r0, [r7, #4]
 8048aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8048aaa:	683b      	ldr	r3, [r7, #0]
 8048aac:	681b      	ldr	r3, [r3, #0]
 8048aae:	2b00      	cmp	r3, #0
 8048ab0:	d123      	bne.n	8048afa <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8048ab2:	687b      	ldr	r3, [r7, #4]
 8048ab4:	681b      	ldr	r3, [r3, #0]
 8048ab6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8048aba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8048abe:	683a      	ldr	r2, [r7, #0]
 8048ac0:	6851      	ldr	r1, [r2, #4]
 8048ac2:	683a      	ldr	r2, [r7, #0]
 8048ac4:	6892      	ldr	r2, [r2, #8]
 8048ac6:	4311      	orrs	r1, r2
 8048ac8:	683a      	ldr	r2, [r7, #0]
 8048aca:	68d2      	ldr	r2, [r2, #12]
 8048acc:	4311      	orrs	r1, r2
 8048ace:	683a      	ldr	r2, [r7, #0]
 8048ad0:	6912      	ldr	r2, [r2, #16]
 8048ad2:	4311      	orrs	r1, r2
 8048ad4:	683a      	ldr	r2, [r7, #0]
 8048ad6:	6952      	ldr	r2, [r2, #20]
 8048ad8:	4311      	orrs	r1, r2
 8048ada:	683a      	ldr	r2, [r7, #0]
 8048adc:	6992      	ldr	r2, [r2, #24]
 8048ade:	4311      	orrs	r1, r2
 8048ae0:	683a      	ldr	r2, [r7, #0]
 8048ae2:	69d2      	ldr	r2, [r2, #28]
 8048ae4:	4311      	orrs	r1, r2
 8048ae6:	683a      	ldr	r2, [r7, #0]
 8048ae8:	6a12      	ldr	r2, [r2, #32]
 8048aea:	4311      	orrs	r1, r2
 8048aec:	683a      	ldr	r2, [r7, #0]
 8048aee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8048af0:	430a      	orrs	r2, r1
 8048af2:	431a      	orrs	r2, r3
 8048af4:	687b      	ldr	r3, [r7, #4]
 8048af6:	601a      	str	r2, [r3, #0]
 8048af8:	e028      	b.n	8048b4c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8048afa:	687b      	ldr	r3, [r7, #4]
 8048afc:	681b      	ldr	r3, [r3, #0]
 8048afe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8048b02:	683b      	ldr	r3, [r7, #0]
 8048b04:	69d9      	ldr	r1, [r3, #28]
 8048b06:	683b      	ldr	r3, [r7, #0]
 8048b08:	6a1b      	ldr	r3, [r3, #32]
 8048b0a:	4319      	orrs	r1, r3
 8048b0c:	683b      	ldr	r3, [r7, #0]
 8048b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8048b10:	430b      	orrs	r3, r1
 8048b12:	431a      	orrs	r2, r3
 8048b14:	687b      	ldr	r3, [r7, #4]
 8048b16:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8048b18:	687b      	ldr	r3, [r7, #4]
 8048b1a:	685b      	ldr	r3, [r3, #4]
 8048b1c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8048b20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8048b24:	683a      	ldr	r2, [r7, #0]
 8048b26:	6851      	ldr	r1, [r2, #4]
 8048b28:	683a      	ldr	r2, [r7, #0]
 8048b2a:	6892      	ldr	r2, [r2, #8]
 8048b2c:	4311      	orrs	r1, r2
 8048b2e:	683a      	ldr	r2, [r7, #0]
 8048b30:	68d2      	ldr	r2, [r2, #12]
 8048b32:	4311      	orrs	r1, r2
 8048b34:	683a      	ldr	r2, [r7, #0]
 8048b36:	6912      	ldr	r2, [r2, #16]
 8048b38:	4311      	orrs	r1, r2
 8048b3a:	683a      	ldr	r2, [r7, #0]
 8048b3c:	6952      	ldr	r2, [r2, #20]
 8048b3e:	4311      	orrs	r1, r2
 8048b40:	683a      	ldr	r2, [r7, #0]
 8048b42:	6992      	ldr	r2, [r2, #24]
 8048b44:	430a      	orrs	r2, r1
 8048b46:	431a      	orrs	r2, r3
 8048b48:	687b      	ldr	r3, [r7, #4]
 8048b4a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8048b4c:	2300      	movs	r3, #0
}
 8048b4e:	4618      	mov	r0, r3
 8048b50:	370c      	adds	r7, #12
 8048b52:	46bd      	mov	sp, r7
 8048b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b58:	4770      	bx	lr

08048b5a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8048b5a:	b480      	push	{r7}
 8048b5c:	b085      	sub	sp, #20
 8048b5e:	af00      	add	r7, sp, #0
 8048b60:	60f8      	str	r0, [r7, #12]
 8048b62:	60b9      	str	r1, [r7, #8]
 8048b64:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8048b66:	687b      	ldr	r3, [r7, #4]
 8048b68:	2b00      	cmp	r3, #0
 8048b6a:	d128      	bne.n	8048bbe <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8048b6c:	68fb      	ldr	r3, [r7, #12]
 8048b6e:	689b      	ldr	r3, [r3, #8]
 8048b70:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8048b74:	68bb      	ldr	r3, [r7, #8]
 8048b76:	681b      	ldr	r3, [r3, #0]
 8048b78:	1e59      	subs	r1, r3, #1
 8048b7a:	68bb      	ldr	r3, [r7, #8]
 8048b7c:	685b      	ldr	r3, [r3, #4]
 8048b7e:	3b01      	subs	r3, #1
 8048b80:	011b      	lsls	r3, r3, #4
 8048b82:	4319      	orrs	r1, r3
 8048b84:	68bb      	ldr	r3, [r7, #8]
 8048b86:	689b      	ldr	r3, [r3, #8]
 8048b88:	3b01      	subs	r3, #1
 8048b8a:	021b      	lsls	r3, r3, #8
 8048b8c:	4319      	orrs	r1, r3
 8048b8e:	68bb      	ldr	r3, [r7, #8]
 8048b90:	68db      	ldr	r3, [r3, #12]
 8048b92:	3b01      	subs	r3, #1
 8048b94:	031b      	lsls	r3, r3, #12
 8048b96:	4319      	orrs	r1, r3
 8048b98:	68bb      	ldr	r3, [r7, #8]
 8048b9a:	691b      	ldr	r3, [r3, #16]
 8048b9c:	3b01      	subs	r3, #1
 8048b9e:	041b      	lsls	r3, r3, #16
 8048ba0:	4319      	orrs	r1, r3
 8048ba2:	68bb      	ldr	r3, [r7, #8]
 8048ba4:	695b      	ldr	r3, [r3, #20]
 8048ba6:	3b01      	subs	r3, #1
 8048ba8:	051b      	lsls	r3, r3, #20
 8048baa:	4319      	orrs	r1, r3
 8048bac:	68bb      	ldr	r3, [r7, #8]
 8048bae:	699b      	ldr	r3, [r3, #24]
 8048bb0:	3b01      	subs	r3, #1
 8048bb2:	061b      	lsls	r3, r3, #24
 8048bb4:	430b      	orrs	r3, r1
 8048bb6:	431a      	orrs	r2, r3
 8048bb8:	68fb      	ldr	r3, [r7, #12]
 8048bba:	609a      	str	r2, [r3, #8]
 8048bbc:	e02f      	b.n	8048c1e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8048bbe:	68fb      	ldr	r3, [r7, #12]
 8048bc0:	689b      	ldr	r3, [r3, #8]
 8048bc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8048bc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8048bca:	68ba      	ldr	r2, [r7, #8]
 8048bcc:	68d2      	ldr	r2, [r2, #12]
 8048bce:	3a01      	subs	r2, #1
 8048bd0:	0311      	lsls	r1, r2, #12
 8048bd2:	68ba      	ldr	r2, [r7, #8]
 8048bd4:	6952      	ldr	r2, [r2, #20]
 8048bd6:	3a01      	subs	r2, #1
 8048bd8:	0512      	lsls	r2, r2, #20
 8048bda:	430a      	orrs	r2, r1
 8048bdc:	431a      	orrs	r2, r3
 8048bde:	68fb      	ldr	r3, [r7, #12]
 8048be0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8048be2:	68fb      	ldr	r3, [r7, #12]
 8048be4:	68db      	ldr	r3, [r3, #12]
 8048be6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8048bea:	68bb      	ldr	r3, [r7, #8]
 8048bec:	681b      	ldr	r3, [r3, #0]
 8048bee:	1e59      	subs	r1, r3, #1
 8048bf0:	68bb      	ldr	r3, [r7, #8]
 8048bf2:	685b      	ldr	r3, [r3, #4]
 8048bf4:	3b01      	subs	r3, #1
 8048bf6:	011b      	lsls	r3, r3, #4
 8048bf8:	4319      	orrs	r1, r3
 8048bfa:	68bb      	ldr	r3, [r7, #8]
 8048bfc:	689b      	ldr	r3, [r3, #8]
 8048bfe:	3b01      	subs	r3, #1
 8048c00:	021b      	lsls	r3, r3, #8
 8048c02:	4319      	orrs	r1, r3
 8048c04:	68bb      	ldr	r3, [r7, #8]
 8048c06:	691b      	ldr	r3, [r3, #16]
 8048c08:	3b01      	subs	r3, #1
 8048c0a:	041b      	lsls	r3, r3, #16
 8048c0c:	4319      	orrs	r1, r3
 8048c0e:	68bb      	ldr	r3, [r7, #8]
 8048c10:	699b      	ldr	r3, [r3, #24]
 8048c12:	3b01      	subs	r3, #1
 8048c14:	061b      	lsls	r3, r3, #24
 8048c16:	430b      	orrs	r3, r1
 8048c18:	431a      	orrs	r2, r3
 8048c1a:	68fb      	ldr	r3, [r7, #12]
 8048c1c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8048c1e:	2300      	movs	r3, #0
}
 8048c20:	4618      	mov	r0, r3
 8048c22:	3714      	adds	r7, #20
 8048c24:	46bd      	mov	sp, r7
 8048c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048c2a:	4770      	bx	lr

08048c2c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8048c2c:	b580      	push	{r7, lr}
 8048c2e:	b086      	sub	sp, #24
 8048c30:	af00      	add	r7, sp, #0
 8048c32:	60f8      	str	r0, [r7, #12]
 8048c34:	60b9      	str	r1, [r7, #8]
 8048c36:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8048c38:	2300      	movs	r3, #0
 8048c3a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8048c3c:	68fb      	ldr	r3, [r7, #12]
 8048c3e:	691b      	ldr	r3, [r3, #16]
 8048c40:	0d9b      	lsrs	r3, r3, #22
 8048c42:	059b      	lsls	r3, r3, #22
 8048c44:	68ba      	ldr	r2, [r7, #8]
 8048c46:	6811      	ldr	r1, [r2, #0]
 8048c48:	68ba      	ldr	r2, [r7, #8]
 8048c4a:	6852      	ldr	r2, [r2, #4]
 8048c4c:	4311      	orrs	r1, r2
 8048c4e:	68ba      	ldr	r2, [r7, #8]
 8048c50:	6892      	ldr	r2, [r2, #8]
 8048c52:	3a01      	subs	r2, #1
 8048c54:	0152      	lsls	r2, r2, #5
 8048c56:	4311      	orrs	r1, r2
 8048c58:	68ba      	ldr	r2, [r7, #8]
 8048c5a:	68d2      	ldr	r2, [r2, #12]
 8048c5c:	0252      	lsls	r2, r2, #9
 8048c5e:	430a      	orrs	r2, r1
 8048c60:	431a      	orrs	r2, r3
 8048c62:	68fb      	ldr	r3, [r7, #12]
 8048c64:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8048c66:	f7f9 ffa9 	bl	8042bbc <HAL_GetTick>
 8048c6a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8048c6c:	e010      	b.n	8048c90 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8048c6e:	687b      	ldr	r3, [r7, #4]
 8048c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8048c74:	d00c      	beq.n	8048c90 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8048c76:	687b      	ldr	r3, [r7, #4]
 8048c78:	2b00      	cmp	r3, #0
 8048c7a:	d007      	beq.n	8048c8c <FMC_SDRAM_SendCommand+0x60>
 8048c7c:	f7f9 ff9e 	bl	8042bbc <HAL_GetTick>
 8048c80:	4602      	mov	r2, r0
 8048c82:	697b      	ldr	r3, [r7, #20]
 8048c84:	1ad3      	subs	r3, r2, r3
 8048c86:	687a      	ldr	r2, [r7, #4]
 8048c88:	429a      	cmp	r2, r3
 8048c8a:	d201      	bcs.n	8048c90 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8048c8c:	2303      	movs	r3, #3
 8048c8e:	e006      	b.n	8048c9e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8048c90:	68fb      	ldr	r3, [r7, #12]
 8048c92:	699b      	ldr	r3, [r3, #24]
 8048c94:	f003 0320 	and.w	r3, r3, #32
 8048c98:	2b20      	cmp	r3, #32
 8048c9a:	d0e8      	beq.n	8048c6e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8048c9c:	2300      	movs	r3, #0
}
 8048c9e:	4618      	mov	r0, r3
 8048ca0:	3718      	adds	r7, #24
 8048ca2:	46bd      	mov	sp, r7
 8048ca4:	bd80      	pop	{r7, pc}

08048ca6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8048ca6:	b480      	push	{r7}
 8048ca8:	b083      	sub	sp, #12
 8048caa:	af00      	add	r7, sp, #0
 8048cac:	6078      	str	r0, [r7, #4]
 8048cae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8048cb0:	687b      	ldr	r3, [r7, #4]
 8048cb2:	695b      	ldr	r3, [r3, #20]
 8048cb4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8048cb8:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8048cbc:	683a      	ldr	r2, [r7, #0]
 8048cbe:	0052      	lsls	r2, r2, #1
 8048cc0:	431a      	orrs	r2, r3
 8048cc2:	687b      	ldr	r3, [r7, #4]
 8048cc4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8048cc6:	2300      	movs	r3, #0
}
 8048cc8:	4618      	mov	r0, r3
 8048cca:	370c      	adds	r7, #12
 8048ccc:	46bd      	mov	sp, r7
 8048cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048cd2:	4770      	bx	lr

08048cd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8048cd4:	b084      	sub	sp, #16
 8048cd6:	b580      	push	{r7, lr}
 8048cd8:	b084      	sub	sp, #16
 8048cda:	af00      	add	r7, sp, #0
 8048cdc:	6078      	str	r0, [r7, #4]
 8048cde:	f107 001c 	add.w	r0, r7, #28
 8048ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8048ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048ce8:	2b01      	cmp	r3, #1
 8048cea:	d122      	bne.n	8048d32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8048cec:	687b      	ldr	r3, [r7, #4]
 8048cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048cf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8048cf4:	687b      	ldr	r3, [r7, #4]
 8048cf6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8048cf8:	687b      	ldr	r3, [r7, #4]
 8048cfa:	68db      	ldr	r3, [r3, #12]
 8048cfc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8048d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8048d04:	687a      	ldr	r2, [r7, #4]
 8048d06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8048d08:	687b      	ldr	r3, [r7, #4]
 8048d0a:	68db      	ldr	r3, [r3, #12]
 8048d0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8048d10:	687b      	ldr	r3, [r7, #4]
 8048d12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8048d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8048d16:	2b01      	cmp	r3, #1
 8048d18:	d105      	bne.n	8048d26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8048d1a:	687b      	ldr	r3, [r7, #4]
 8048d1c:	68db      	ldr	r3, [r3, #12]
 8048d1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8048d22:	687b      	ldr	r3, [r7, #4]
 8048d24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8048d26:	6878      	ldr	r0, [r7, #4]
 8048d28:	f000 f9c0 	bl	80490ac <USB_CoreReset>
 8048d2c:	4603      	mov	r3, r0
 8048d2e:	73fb      	strb	r3, [r7, #15]
 8048d30:	e01a      	b.n	8048d68 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8048d32:	687b      	ldr	r3, [r7, #4]
 8048d34:	68db      	ldr	r3, [r3, #12]
 8048d36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8048d3a:	687b      	ldr	r3, [r7, #4]
 8048d3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8048d3e:	6878      	ldr	r0, [r7, #4]
 8048d40:	f000 f9b4 	bl	80490ac <USB_CoreReset>
 8048d44:	4603      	mov	r3, r0
 8048d46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8048d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8048d4a:	2b00      	cmp	r3, #0
 8048d4c:	d106      	bne.n	8048d5c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8048d4e:	687b      	ldr	r3, [r7, #4]
 8048d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048d52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8048d56:	687b      	ldr	r3, [r7, #4]
 8048d58:	639a      	str	r2, [r3, #56]	; 0x38
 8048d5a:	e005      	b.n	8048d68 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8048d5c:	687b      	ldr	r3, [r7, #4]
 8048d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048d60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8048d64:	687b      	ldr	r3, [r7, #4]
 8048d66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8048d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8048d6a:	2b01      	cmp	r3, #1
 8048d6c:	d10b      	bne.n	8048d86 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8048d6e:	687b      	ldr	r3, [r7, #4]
 8048d70:	689b      	ldr	r3, [r3, #8]
 8048d72:	f043 0206 	orr.w	r2, r3, #6
 8048d76:	687b      	ldr	r3, [r7, #4]
 8048d78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8048d7a:	687b      	ldr	r3, [r7, #4]
 8048d7c:	689b      	ldr	r3, [r3, #8]
 8048d7e:	f043 0220 	orr.w	r2, r3, #32
 8048d82:	687b      	ldr	r3, [r7, #4]
 8048d84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8048d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8048d88:	4618      	mov	r0, r3
 8048d8a:	3710      	adds	r7, #16
 8048d8c:	46bd      	mov	sp, r7
 8048d8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8048d92:	b004      	add	sp, #16
 8048d94:	4770      	bx	lr

08048d96 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8048d96:	b480      	push	{r7}
 8048d98:	b083      	sub	sp, #12
 8048d9a:	af00      	add	r7, sp, #0
 8048d9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8048d9e:	687b      	ldr	r3, [r7, #4]
 8048da0:	689b      	ldr	r3, [r3, #8]
 8048da2:	f043 0201 	orr.w	r2, r3, #1
 8048da6:	687b      	ldr	r3, [r7, #4]
 8048da8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8048daa:	2300      	movs	r3, #0
}
 8048dac:	4618      	mov	r0, r3
 8048dae:	370c      	adds	r7, #12
 8048db0:	46bd      	mov	sp, r7
 8048db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048db6:	4770      	bx	lr

08048db8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8048db8:	b480      	push	{r7}
 8048dba:	b083      	sub	sp, #12
 8048dbc:	af00      	add	r7, sp, #0
 8048dbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8048dc0:	687b      	ldr	r3, [r7, #4]
 8048dc2:	689b      	ldr	r3, [r3, #8]
 8048dc4:	f023 0201 	bic.w	r2, r3, #1
 8048dc8:	687b      	ldr	r3, [r7, #4]
 8048dca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8048dcc:	2300      	movs	r3, #0
}
 8048dce:	4618      	mov	r0, r3
 8048dd0:	370c      	adds	r7, #12
 8048dd2:	46bd      	mov	sp, r7
 8048dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048dd8:	4770      	bx	lr

08048dda <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8048dda:	b580      	push	{r7, lr}
 8048ddc:	b084      	sub	sp, #16
 8048dde:	af00      	add	r7, sp, #0
 8048de0:	6078      	str	r0, [r7, #4]
 8048de2:	460b      	mov	r3, r1
 8048de4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8048de6:	2300      	movs	r3, #0
 8048de8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8048dea:	687b      	ldr	r3, [r7, #4]
 8048dec:	68db      	ldr	r3, [r3, #12]
 8048dee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8048df2:	687b      	ldr	r3, [r7, #4]
 8048df4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8048df6:	78fb      	ldrb	r3, [r7, #3]
 8048df8:	2b01      	cmp	r3, #1
 8048dfa:	d115      	bne.n	8048e28 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8048dfc:	687b      	ldr	r3, [r7, #4]
 8048dfe:	68db      	ldr	r3, [r3, #12]
 8048e00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8048e04:	687b      	ldr	r3, [r7, #4]
 8048e06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8048e08:	2001      	movs	r0, #1
 8048e0a:	f7f9 fee3 	bl	8042bd4 <HAL_Delay>
      ms++;
 8048e0e:	68fb      	ldr	r3, [r7, #12]
 8048e10:	3301      	adds	r3, #1
 8048e12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8048e14:	6878      	ldr	r0, [r7, #4]
 8048e16:	f000 f93a 	bl	804908e <USB_GetMode>
 8048e1a:	4603      	mov	r3, r0
 8048e1c:	2b01      	cmp	r3, #1
 8048e1e:	d01e      	beq.n	8048e5e <USB_SetCurrentMode+0x84>
 8048e20:	68fb      	ldr	r3, [r7, #12]
 8048e22:	2b31      	cmp	r3, #49	; 0x31
 8048e24:	d9f0      	bls.n	8048e08 <USB_SetCurrentMode+0x2e>
 8048e26:	e01a      	b.n	8048e5e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8048e28:	78fb      	ldrb	r3, [r7, #3]
 8048e2a:	2b00      	cmp	r3, #0
 8048e2c:	d115      	bne.n	8048e5a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8048e2e:	687b      	ldr	r3, [r7, #4]
 8048e30:	68db      	ldr	r3, [r3, #12]
 8048e32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8048e36:	687b      	ldr	r3, [r7, #4]
 8048e38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8048e3a:	2001      	movs	r0, #1
 8048e3c:	f7f9 feca 	bl	8042bd4 <HAL_Delay>
      ms++;
 8048e40:	68fb      	ldr	r3, [r7, #12]
 8048e42:	3301      	adds	r3, #1
 8048e44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8048e46:	6878      	ldr	r0, [r7, #4]
 8048e48:	f000 f921 	bl	804908e <USB_GetMode>
 8048e4c:	4603      	mov	r3, r0
 8048e4e:	2b00      	cmp	r3, #0
 8048e50:	d005      	beq.n	8048e5e <USB_SetCurrentMode+0x84>
 8048e52:	68fb      	ldr	r3, [r7, #12]
 8048e54:	2b31      	cmp	r3, #49	; 0x31
 8048e56:	d9f0      	bls.n	8048e3a <USB_SetCurrentMode+0x60>
 8048e58:	e001      	b.n	8048e5e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8048e5a:	2301      	movs	r3, #1
 8048e5c:	e005      	b.n	8048e6a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8048e5e:	68fb      	ldr	r3, [r7, #12]
 8048e60:	2b32      	cmp	r3, #50	; 0x32
 8048e62:	d101      	bne.n	8048e68 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8048e64:	2301      	movs	r3, #1
 8048e66:	e000      	b.n	8048e6a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8048e68:	2300      	movs	r3, #0
}
 8048e6a:	4618      	mov	r0, r3
 8048e6c:	3710      	adds	r7, #16
 8048e6e:	46bd      	mov	sp, r7
 8048e70:	bd80      	pop	{r7, pc}
	...

08048e74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8048e74:	b480      	push	{r7}
 8048e76:	b085      	sub	sp, #20
 8048e78:	af00      	add	r7, sp, #0
 8048e7a:	6078      	str	r0, [r7, #4]
 8048e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8048e7e:	2300      	movs	r3, #0
 8048e80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8048e82:	68fb      	ldr	r3, [r7, #12]
 8048e84:	3301      	adds	r3, #1
 8048e86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8048e88:	68fb      	ldr	r3, [r7, #12]
 8048e8a:	4a13      	ldr	r2, [pc, #76]	; (8048ed8 <USB_FlushTxFifo+0x64>)
 8048e8c:	4293      	cmp	r3, r2
 8048e8e:	d901      	bls.n	8048e94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8048e90:	2303      	movs	r3, #3
 8048e92:	e01b      	b.n	8048ecc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8048e94:	687b      	ldr	r3, [r7, #4]
 8048e96:	691b      	ldr	r3, [r3, #16]
 8048e98:	2b00      	cmp	r3, #0
 8048e9a:	daf2      	bge.n	8048e82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8048e9c:	2300      	movs	r3, #0
 8048e9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8048ea0:	683b      	ldr	r3, [r7, #0]
 8048ea2:	019b      	lsls	r3, r3, #6
 8048ea4:	f043 0220 	orr.w	r2, r3, #32
 8048ea8:	687b      	ldr	r3, [r7, #4]
 8048eaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8048eac:	68fb      	ldr	r3, [r7, #12]
 8048eae:	3301      	adds	r3, #1
 8048eb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8048eb2:	68fb      	ldr	r3, [r7, #12]
 8048eb4:	4a08      	ldr	r2, [pc, #32]	; (8048ed8 <USB_FlushTxFifo+0x64>)
 8048eb6:	4293      	cmp	r3, r2
 8048eb8:	d901      	bls.n	8048ebe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8048eba:	2303      	movs	r3, #3
 8048ebc:	e006      	b.n	8048ecc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8048ebe:	687b      	ldr	r3, [r7, #4]
 8048ec0:	691b      	ldr	r3, [r3, #16]
 8048ec2:	f003 0320 	and.w	r3, r3, #32
 8048ec6:	2b20      	cmp	r3, #32
 8048ec8:	d0f0      	beq.n	8048eac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8048eca:	2300      	movs	r3, #0
}
 8048ecc:	4618      	mov	r0, r3
 8048ece:	3714      	adds	r7, #20
 8048ed0:	46bd      	mov	sp, r7
 8048ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048ed6:	4770      	bx	lr
 8048ed8:	00030d40 	.word	0x00030d40

08048edc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8048edc:	b480      	push	{r7}
 8048ede:	b085      	sub	sp, #20
 8048ee0:	af00      	add	r7, sp, #0
 8048ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8048ee4:	2300      	movs	r3, #0
 8048ee6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8048ee8:	68fb      	ldr	r3, [r7, #12]
 8048eea:	3301      	adds	r3, #1
 8048eec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8048eee:	68fb      	ldr	r3, [r7, #12]
 8048ef0:	4a11      	ldr	r2, [pc, #68]	; (8048f38 <USB_FlushRxFifo+0x5c>)
 8048ef2:	4293      	cmp	r3, r2
 8048ef4:	d901      	bls.n	8048efa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8048ef6:	2303      	movs	r3, #3
 8048ef8:	e018      	b.n	8048f2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8048efa:	687b      	ldr	r3, [r7, #4]
 8048efc:	691b      	ldr	r3, [r3, #16]
 8048efe:	2b00      	cmp	r3, #0
 8048f00:	daf2      	bge.n	8048ee8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8048f02:	2300      	movs	r3, #0
 8048f04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8048f06:	687b      	ldr	r3, [r7, #4]
 8048f08:	2210      	movs	r2, #16
 8048f0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8048f0c:	68fb      	ldr	r3, [r7, #12]
 8048f0e:	3301      	adds	r3, #1
 8048f10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8048f12:	68fb      	ldr	r3, [r7, #12]
 8048f14:	4a08      	ldr	r2, [pc, #32]	; (8048f38 <USB_FlushRxFifo+0x5c>)
 8048f16:	4293      	cmp	r3, r2
 8048f18:	d901      	bls.n	8048f1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8048f1a:	2303      	movs	r3, #3
 8048f1c:	e006      	b.n	8048f2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8048f1e:	687b      	ldr	r3, [r7, #4]
 8048f20:	691b      	ldr	r3, [r3, #16]
 8048f22:	f003 0310 	and.w	r3, r3, #16
 8048f26:	2b10      	cmp	r3, #16
 8048f28:	d0f0      	beq.n	8048f0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8048f2a:	2300      	movs	r3, #0
}
 8048f2c:	4618      	mov	r0, r3
 8048f2e:	3714      	adds	r7, #20
 8048f30:	46bd      	mov	sp, r7
 8048f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048f36:	4770      	bx	lr
 8048f38:	00030d40 	.word	0x00030d40

08048f3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8048f3c:	b480      	push	{r7}
 8048f3e:	b089      	sub	sp, #36	; 0x24
 8048f40:	af00      	add	r7, sp, #0
 8048f42:	60f8      	str	r0, [r7, #12]
 8048f44:	60b9      	str	r1, [r7, #8]
 8048f46:	4611      	mov	r1, r2
 8048f48:	461a      	mov	r2, r3
 8048f4a:	460b      	mov	r3, r1
 8048f4c:	71fb      	strb	r3, [r7, #7]
 8048f4e:	4613      	mov	r3, r2
 8048f50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048f52:	68fb      	ldr	r3, [r7, #12]
 8048f54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8048f56:	68bb      	ldr	r3, [r7, #8]
 8048f58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8048f5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8048f5e:	2b00      	cmp	r3, #0
 8048f60:	d123      	bne.n	8048faa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8048f62:	88bb      	ldrh	r3, [r7, #4]
 8048f64:	3303      	adds	r3, #3
 8048f66:	089b      	lsrs	r3, r3, #2
 8048f68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8048f6a:	2300      	movs	r3, #0
 8048f6c:	61bb      	str	r3, [r7, #24]
 8048f6e:	e018      	b.n	8048fa2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8048f70:	79fb      	ldrb	r3, [r7, #7]
 8048f72:	031a      	lsls	r2, r3, #12
 8048f74:	697b      	ldr	r3, [r7, #20]
 8048f76:	4413      	add	r3, r2
 8048f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8048f7c:	461a      	mov	r2, r3
 8048f7e:	69fb      	ldr	r3, [r7, #28]
 8048f80:	681b      	ldr	r3, [r3, #0]
 8048f82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8048f84:	69fb      	ldr	r3, [r7, #28]
 8048f86:	3301      	adds	r3, #1
 8048f88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8048f8a:	69fb      	ldr	r3, [r7, #28]
 8048f8c:	3301      	adds	r3, #1
 8048f8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8048f90:	69fb      	ldr	r3, [r7, #28]
 8048f92:	3301      	adds	r3, #1
 8048f94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8048f96:	69fb      	ldr	r3, [r7, #28]
 8048f98:	3301      	adds	r3, #1
 8048f9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8048f9c:	69bb      	ldr	r3, [r7, #24]
 8048f9e:	3301      	adds	r3, #1
 8048fa0:	61bb      	str	r3, [r7, #24]
 8048fa2:	69ba      	ldr	r2, [r7, #24]
 8048fa4:	693b      	ldr	r3, [r7, #16]
 8048fa6:	429a      	cmp	r2, r3
 8048fa8:	d3e2      	bcc.n	8048f70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8048faa:	2300      	movs	r3, #0
}
 8048fac:	4618      	mov	r0, r3
 8048fae:	3724      	adds	r7, #36	; 0x24
 8048fb0:	46bd      	mov	sp, r7
 8048fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048fb6:	4770      	bx	lr

08048fb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8048fb8:	b480      	push	{r7}
 8048fba:	b08b      	sub	sp, #44	; 0x2c
 8048fbc:	af00      	add	r7, sp, #0
 8048fbe:	60f8      	str	r0, [r7, #12]
 8048fc0:	60b9      	str	r1, [r7, #8]
 8048fc2:	4613      	mov	r3, r2
 8048fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048fc6:	68fb      	ldr	r3, [r7, #12]
 8048fc8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8048fca:	68bb      	ldr	r3, [r7, #8]
 8048fcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8048fce:	88fb      	ldrh	r3, [r7, #6]
 8048fd0:	089b      	lsrs	r3, r3, #2
 8048fd2:	b29b      	uxth	r3, r3
 8048fd4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8048fd6:	88fb      	ldrh	r3, [r7, #6]
 8048fd8:	f003 0303 	and.w	r3, r3, #3
 8048fdc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8048fde:	2300      	movs	r3, #0
 8048fe0:	623b      	str	r3, [r7, #32]
 8048fe2:	e014      	b.n	804900e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8048fe4:	69bb      	ldr	r3, [r7, #24]
 8048fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8048fea:	681a      	ldr	r2, [r3, #0]
 8048fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048fee:	601a      	str	r2, [r3, #0]
    pDest++;
 8048ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048ff2:	3301      	adds	r3, #1
 8048ff4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8048ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048ff8:	3301      	adds	r3, #1
 8048ffa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8048ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048ffe:	3301      	adds	r3, #1
 8049000:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8049002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049004:	3301      	adds	r3, #1
 8049006:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8049008:	6a3b      	ldr	r3, [r7, #32]
 804900a:	3301      	adds	r3, #1
 804900c:	623b      	str	r3, [r7, #32]
 804900e:	6a3a      	ldr	r2, [r7, #32]
 8049010:	697b      	ldr	r3, [r7, #20]
 8049012:	429a      	cmp	r2, r3
 8049014:	d3e6      	bcc.n	8048fe4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8049016:	8bfb      	ldrh	r3, [r7, #30]
 8049018:	2b00      	cmp	r3, #0
 804901a:	d01e      	beq.n	804905a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 804901c:	2300      	movs	r3, #0
 804901e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8049020:	69bb      	ldr	r3, [r7, #24]
 8049022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8049026:	461a      	mov	r2, r3
 8049028:	f107 0310 	add.w	r3, r7, #16
 804902c:	6812      	ldr	r2, [r2, #0]
 804902e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8049030:	693a      	ldr	r2, [r7, #16]
 8049032:	6a3b      	ldr	r3, [r7, #32]
 8049034:	b2db      	uxtb	r3, r3
 8049036:	00db      	lsls	r3, r3, #3
 8049038:	fa22 f303 	lsr.w	r3, r2, r3
 804903c:	b2da      	uxtb	r2, r3
 804903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049040:	701a      	strb	r2, [r3, #0]
      i++;
 8049042:	6a3b      	ldr	r3, [r7, #32]
 8049044:	3301      	adds	r3, #1
 8049046:	623b      	str	r3, [r7, #32]
      pDest++;
 8049048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804904a:	3301      	adds	r3, #1
 804904c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 804904e:	8bfb      	ldrh	r3, [r7, #30]
 8049050:	3b01      	subs	r3, #1
 8049052:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8049054:	8bfb      	ldrh	r3, [r7, #30]
 8049056:	2b00      	cmp	r3, #0
 8049058:	d1ea      	bne.n	8049030 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 804905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 804905c:	4618      	mov	r0, r3
 804905e:	372c      	adds	r7, #44	; 0x2c
 8049060:	46bd      	mov	sp, r7
 8049062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049066:	4770      	bx	lr

08049068 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8049068:	b480      	push	{r7}
 804906a:	b085      	sub	sp, #20
 804906c:	af00      	add	r7, sp, #0
 804906e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8049070:	687b      	ldr	r3, [r7, #4]
 8049072:	695b      	ldr	r3, [r3, #20]
 8049074:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8049076:	687b      	ldr	r3, [r7, #4]
 8049078:	699b      	ldr	r3, [r3, #24]
 804907a:	68fa      	ldr	r2, [r7, #12]
 804907c:	4013      	ands	r3, r2
 804907e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8049080:	68fb      	ldr	r3, [r7, #12]
}
 8049082:	4618      	mov	r0, r3
 8049084:	3714      	adds	r7, #20
 8049086:	46bd      	mov	sp, r7
 8049088:	f85d 7b04 	ldr.w	r7, [sp], #4
 804908c:	4770      	bx	lr

0804908e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 804908e:	b480      	push	{r7}
 8049090:	b083      	sub	sp, #12
 8049092:	af00      	add	r7, sp, #0
 8049094:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8049096:	687b      	ldr	r3, [r7, #4]
 8049098:	695b      	ldr	r3, [r3, #20]
 804909a:	f003 0301 	and.w	r3, r3, #1
}
 804909e:	4618      	mov	r0, r3
 80490a0:	370c      	adds	r7, #12
 80490a2:	46bd      	mov	sp, r7
 80490a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80490a8:	4770      	bx	lr
	...

080490ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80490ac:	b480      	push	{r7}
 80490ae:	b085      	sub	sp, #20
 80490b0:	af00      	add	r7, sp, #0
 80490b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80490b4:	2300      	movs	r3, #0
 80490b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80490b8:	68fb      	ldr	r3, [r7, #12]
 80490ba:	3301      	adds	r3, #1
 80490bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80490be:	68fb      	ldr	r3, [r7, #12]
 80490c0:	4a13      	ldr	r2, [pc, #76]	; (8049110 <USB_CoreReset+0x64>)
 80490c2:	4293      	cmp	r3, r2
 80490c4:	d901      	bls.n	80490ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80490c6:	2303      	movs	r3, #3
 80490c8:	e01b      	b.n	8049102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80490ca:	687b      	ldr	r3, [r7, #4]
 80490cc:	691b      	ldr	r3, [r3, #16]
 80490ce:	2b00      	cmp	r3, #0
 80490d0:	daf2      	bge.n	80490b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80490d2:	2300      	movs	r3, #0
 80490d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80490d6:	687b      	ldr	r3, [r7, #4]
 80490d8:	691b      	ldr	r3, [r3, #16]
 80490da:	f043 0201 	orr.w	r2, r3, #1
 80490de:	687b      	ldr	r3, [r7, #4]
 80490e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80490e2:	68fb      	ldr	r3, [r7, #12]
 80490e4:	3301      	adds	r3, #1
 80490e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80490e8:	68fb      	ldr	r3, [r7, #12]
 80490ea:	4a09      	ldr	r2, [pc, #36]	; (8049110 <USB_CoreReset+0x64>)
 80490ec:	4293      	cmp	r3, r2
 80490ee:	d901      	bls.n	80490f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80490f0:	2303      	movs	r3, #3
 80490f2:	e006      	b.n	8049102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80490f4:	687b      	ldr	r3, [r7, #4]
 80490f6:	691b      	ldr	r3, [r3, #16]
 80490f8:	f003 0301 	and.w	r3, r3, #1
 80490fc:	2b01      	cmp	r3, #1
 80490fe:	d0f0      	beq.n	80490e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8049100:	2300      	movs	r3, #0
}
 8049102:	4618      	mov	r0, r3
 8049104:	3714      	adds	r7, #20
 8049106:	46bd      	mov	sp, r7
 8049108:	f85d 7b04 	ldr.w	r7, [sp], #4
 804910c:	4770      	bx	lr
 804910e:	bf00      	nop
 8049110:	00030d40 	.word	0x00030d40

08049114 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8049114:	b084      	sub	sp, #16
 8049116:	b580      	push	{r7, lr}
 8049118:	b086      	sub	sp, #24
 804911a:	af00      	add	r7, sp, #0
 804911c:	6078      	str	r0, [r7, #4]
 804911e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8049122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8049126:	2300      	movs	r3, #0
 8049128:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804912a:	687b      	ldr	r3, [r7, #4]
 804912c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 804912e:	68fb      	ldr	r3, [r7, #12]
 8049130:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8049134:	461a      	mov	r2, r3
 8049136:	2300      	movs	r3, #0
 8049138:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 804913a:	687b      	ldr	r3, [r7, #4]
 804913c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804913e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8049142:	687b      	ldr	r3, [r7, #4]
 8049144:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8049146:	687b      	ldr	r3, [r7, #4]
 8049148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804914a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 804914e:	687b      	ldr	r3, [r7, #4]
 8049150:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8049152:	687b      	ldr	r3, [r7, #4]
 8049154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049156:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 804915a:	687b      	ldr	r3, [r7, #4]
 804915c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 804915e:	687b      	ldr	r3, [r7, #4]
 8049160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8049162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8049166:	2b00      	cmp	r3, #0
 8049168:	d018      	beq.n	804919c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 804916a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804916c:	2b01      	cmp	r3, #1
 804916e:	d10a      	bne.n	8049186 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8049170:	68fb      	ldr	r3, [r7, #12]
 8049172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049176:	681b      	ldr	r3, [r3, #0]
 8049178:	68fa      	ldr	r2, [r7, #12]
 804917a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804917e:	f043 0304 	orr.w	r3, r3, #4
 8049182:	6013      	str	r3, [r2, #0]
 8049184:	e014      	b.n	80491b0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8049186:	68fb      	ldr	r3, [r7, #12]
 8049188:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804918c:	681b      	ldr	r3, [r3, #0]
 804918e:	68fa      	ldr	r2, [r7, #12]
 8049190:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8049194:	f023 0304 	bic.w	r3, r3, #4
 8049198:	6013      	str	r3, [r2, #0]
 804919a:	e009      	b.n	80491b0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 804919c:	68fb      	ldr	r3, [r7, #12]
 804919e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80491a2:	681b      	ldr	r3, [r3, #0]
 80491a4:	68fa      	ldr	r2, [r7, #12]
 80491a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80491aa:	f023 0304 	bic.w	r3, r3, #4
 80491ae:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80491b0:	2110      	movs	r1, #16
 80491b2:	6878      	ldr	r0, [r7, #4]
 80491b4:	f7ff fe5e 	bl	8048e74 <USB_FlushTxFifo>
 80491b8:	4603      	mov	r3, r0
 80491ba:	2b00      	cmp	r3, #0
 80491bc:	d001      	beq.n	80491c2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80491be:	2301      	movs	r3, #1
 80491c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80491c2:	6878      	ldr	r0, [r7, #4]
 80491c4:	f7ff fe8a 	bl	8048edc <USB_FlushRxFifo>
 80491c8:	4603      	mov	r3, r0
 80491ca:	2b00      	cmp	r3, #0
 80491cc:	d001      	beq.n	80491d2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80491ce:	2301      	movs	r3, #1
 80491d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80491d2:	2300      	movs	r3, #0
 80491d4:	613b      	str	r3, [r7, #16]
 80491d6:	e015      	b.n	8049204 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80491d8:	693b      	ldr	r3, [r7, #16]
 80491da:	015a      	lsls	r2, r3, #5
 80491dc:	68fb      	ldr	r3, [r7, #12]
 80491de:	4413      	add	r3, r2
 80491e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80491e4:	461a      	mov	r2, r3
 80491e6:	f04f 33ff 	mov.w	r3, #4294967295
 80491ea:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80491ec:	693b      	ldr	r3, [r7, #16]
 80491ee:	015a      	lsls	r2, r3, #5
 80491f0:	68fb      	ldr	r3, [r7, #12]
 80491f2:	4413      	add	r3, r2
 80491f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80491f8:	461a      	mov	r2, r3
 80491fa:	2300      	movs	r3, #0
 80491fc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80491fe:	693b      	ldr	r3, [r7, #16]
 8049200:	3301      	adds	r3, #1
 8049202:	613b      	str	r3, [r7, #16]
 8049204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049206:	693a      	ldr	r2, [r7, #16]
 8049208:	429a      	cmp	r2, r3
 804920a:	d3e5      	bcc.n	80491d8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 804920c:	687b      	ldr	r3, [r7, #4]
 804920e:	2200      	movs	r2, #0
 8049210:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8049212:	687b      	ldr	r3, [r7, #4]
 8049214:	f04f 32ff 	mov.w	r2, #4294967295
 8049218:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 804921a:	687b      	ldr	r3, [r7, #4]
 804921c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804921e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8049222:	2b00      	cmp	r3, #0
 8049224:	d00b      	beq.n	804923e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8049226:	687b      	ldr	r3, [r7, #4]
 8049228:	f44f 7200 	mov.w	r2, #512	; 0x200
 804922c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 804922e:	687b      	ldr	r3, [r7, #4]
 8049230:	4a13      	ldr	r2, [pc, #76]	; (8049280 <USB_HostInit+0x16c>)
 8049232:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8049234:	687b      	ldr	r3, [r7, #4]
 8049236:	4a13      	ldr	r2, [pc, #76]	; (8049284 <USB_HostInit+0x170>)
 8049238:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 804923c:	e009      	b.n	8049252 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 804923e:	687b      	ldr	r3, [r7, #4]
 8049240:	2280      	movs	r2, #128	; 0x80
 8049242:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8049244:	687b      	ldr	r3, [r7, #4]
 8049246:	4a10      	ldr	r2, [pc, #64]	; (8049288 <USB_HostInit+0x174>)
 8049248:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 804924a:	687b      	ldr	r3, [r7, #4]
 804924c:	4a0f      	ldr	r2, [pc, #60]	; (804928c <USB_HostInit+0x178>)
 804924e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8049252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049254:	2b00      	cmp	r3, #0
 8049256:	d105      	bne.n	8049264 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8049258:	687b      	ldr	r3, [r7, #4]
 804925a:	699b      	ldr	r3, [r3, #24]
 804925c:	f043 0210 	orr.w	r2, r3, #16
 8049260:	687b      	ldr	r3, [r7, #4]
 8049262:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8049264:	687b      	ldr	r3, [r7, #4]
 8049266:	699a      	ldr	r2, [r3, #24]
 8049268:	4b09      	ldr	r3, [pc, #36]	; (8049290 <USB_HostInit+0x17c>)
 804926a:	4313      	orrs	r3, r2
 804926c:	687a      	ldr	r2, [r7, #4]
 804926e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8049270:	7dfb      	ldrb	r3, [r7, #23]
}
 8049272:	4618      	mov	r0, r3
 8049274:	3718      	adds	r7, #24
 8049276:	46bd      	mov	sp, r7
 8049278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 804927c:	b004      	add	sp, #16
 804927e:	4770      	bx	lr
 8049280:	01000200 	.word	0x01000200
 8049284:	00e00300 	.word	0x00e00300
 8049288:	00600080 	.word	0x00600080
 804928c:	004000e0 	.word	0x004000e0
 8049290:	a3200008 	.word	0xa3200008

08049294 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8049294:	b480      	push	{r7}
 8049296:	b085      	sub	sp, #20
 8049298:	af00      	add	r7, sp, #0
 804929a:	6078      	str	r0, [r7, #4]
 804929c:	460b      	mov	r3, r1
 804929e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80492a0:	687b      	ldr	r3, [r7, #4]
 80492a2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80492a4:	68fb      	ldr	r3, [r7, #12]
 80492a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80492aa:	681b      	ldr	r3, [r3, #0]
 80492ac:	68fa      	ldr	r2, [r7, #12]
 80492ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80492b2:	f023 0303 	bic.w	r3, r3, #3
 80492b6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80492b8:	68fb      	ldr	r3, [r7, #12]
 80492ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80492be:	681a      	ldr	r2, [r3, #0]
 80492c0:	78fb      	ldrb	r3, [r7, #3]
 80492c2:	f003 0303 	and.w	r3, r3, #3
 80492c6:	68f9      	ldr	r1, [r7, #12]
 80492c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80492cc:	4313      	orrs	r3, r2
 80492ce:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80492d0:	78fb      	ldrb	r3, [r7, #3]
 80492d2:	2b01      	cmp	r3, #1
 80492d4:	d107      	bne.n	80492e6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80492d6:	68fb      	ldr	r3, [r7, #12]
 80492d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80492dc:	461a      	mov	r2, r3
 80492de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80492e2:	6053      	str	r3, [r2, #4]
 80492e4:	e009      	b.n	80492fa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80492e6:	78fb      	ldrb	r3, [r7, #3]
 80492e8:	2b02      	cmp	r3, #2
 80492ea:	d106      	bne.n	80492fa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80492ec:	68fb      	ldr	r3, [r7, #12]
 80492ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80492f2:	461a      	mov	r2, r3
 80492f4:	f241 7370 	movw	r3, #6000	; 0x1770
 80492f8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80492fa:	2300      	movs	r3, #0
}
 80492fc:	4618      	mov	r0, r3
 80492fe:	3714      	adds	r7, #20
 8049300:	46bd      	mov	sp, r7
 8049302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049306:	4770      	bx	lr

08049308 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8049308:	b580      	push	{r7, lr}
 804930a:	b084      	sub	sp, #16
 804930c:	af00      	add	r7, sp, #0
 804930e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049310:	687b      	ldr	r3, [r7, #4]
 8049312:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8049314:	2300      	movs	r3, #0
 8049316:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8049318:	68fb      	ldr	r3, [r7, #12]
 804931a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 804931e:	681b      	ldr	r3, [r3, #0]
 8049320:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8049322:	68bb      	ldr	r3, [r7, #8]
 8049324:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8049328:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 804932a:	68bb      	ldr	r3, [r7, #8]
 804932c:	68fa      	ldr	r2, [r7, #12]
 804932e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8049332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8049336:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8049338:	2064      	movs	r0, #100	; 0x64
 804933a:	f7f9 fc4b 	bl	8042bd4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 804933e:	68bb      	ldr	r3, [r7, #8]
 8049340:	68fa      	ldr	r2, [r7, #12]
 8049342:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8049346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 804934a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 804934c:	200a      	movs	r0, #10
 804934e:	f7f9 fc41 	bl	8042bd4 <HAL_Delay>

  return HAL_OK;
 8049352:	2300      	movs	r3, #0
}
 8049354:	4618      	mov	r0, r3
 8049356:	3710      	adds	r7, #16
 8049358:	46bd      	mov	sp, r7
 804935a:	bd80      	pop	{r7, pc}

0804935c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 804935c:	b480      	push	{r7}
 804935e:	b085      	sub	sp, #20
 8049360:	af00      	add	r7, sp, #0
 8049362:	6078      	str	r0, [r7, #4]
 8049364:	460b      	mov	r3, r1
 8049366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049368:	687b      	ldr	r3, [r7, #4]
 804936a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 804936c:	2300      	movs	r3, #0
 804936e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8049370:	68fb      	ldr	r3, [r7, #12]
 8049372:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8049376:	681b      	ldr	r3, [r3, #0]
 8049378:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 804937a:	68bb      	ldr	r3, [r7, #8]
 804937c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8049380:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8049382:	68bb      	ldr	r3, [r7, #8]
 8049384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8049388:	2b00      	cmp	r3, #0
 804938a:	d109      	bne.n	80493a0 <USB_DriveVbus+0x44>
 804938c:	78fb      	ldrb	r3, [r7, #3]
 804938e:	2b01      	cmp	r3, #1
 8049390:	d106      	bne.n	80493a0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8049392:	68bb      	ldr	r3, [r7, #8]
 8049394:	68fa      	ldr	r2, [r7, #12]
 8049396:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 804939a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804939e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80493a0:	68bb      	ldr	r3, [r7, #8]
 80493a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80493a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80493aa:	d109      	bne.n	80493c0 <USB_DriveVbus+0x64>
 80493ac:	78fb      	ldrb	r3, [r7, #3]
 80493ae:	2b00      	cmp	r3, #0
 80493b0:	d106      	bne.n	80493c0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80493b2:	68bb      	ldr	r3, [r7, #8]
 80493b4:	68fa      	ldr	r2, [r7, #12]
 80493b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80493ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80493be:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80493c0:	2300      	movs	r3, #0
}
 80493c2:	4618      	mov	r0, r3
 80493c4:	3714      	adds	r7, #20
 80493c6:	46bd      	mov	sp, r7
 80493c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80493cc:	4770      	bx	lr

080493ce <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80493ce:	b480      	push	{r7}
 80493d0:	b085      	sub	sp, #20
 80493d2:	af00      	add	r7, sp, #0
 80493d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80493d6:	687b      	ldr	r3, [r7, #4]
 80493d8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80493da:	2300      	movs	r3, #0
 80493dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80493de:	68fb      	ldr	r3, [r7, #12]
 80493e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80493e4:	681b      	ldr	r3, [r3, #0]
 80493e6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80493e8:	68bb      	ldr	r3, [r7, #8]
 80493ea:	0c5b      	lsrs	r3, r3, #17
 80493ec:	f003 0303 	and.w	r3, r3, #3
}
 80493f0:	4618      	mov	r0, r3
 80493f2:	3714      	adds	r7, #20
 80493f4:	46bd      	mov	sp, r7
 80493f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80493fa:	4770      	bx	lr

080493fc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80493fc:	b480      	push	{r7}
 80493fe:	b085      	sub	sp, #20
 8049400:	af00      	add	r7, sp, #0
 8049402:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049404:	687b      	ldr	r3, [r7, #4]
 8049406:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8049408:	68fb      	ldr	r3, [r7, #12]
 804940a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804940e:	689b      	ldr	r3, [r3, #8]
 8049410:	b29b      	uxth	r3, r3
}
 8049412:	4618      	mov	r0, r3
 8049414:	3714      	adds	r7, #20
 8049416:	46bd      	mov	sp, r7
 8049418:	f85d 7b04 	ldr.w	r7, [sp], #4
 804941c:	4770      	bx	lr
	...

08049420 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8049420:	b580      	push	{r7, lr}
 8049422:	b088      	sub	sp, #32
 8049424:	af00      	add	r7, sp, #0
 8049426:	6078      	str	r0, [r7, #4]
 8049428:	4608      	mov	r0, r1
 804942a:	4611      	mov	r1, r2
 804942c:	461a      	mov	r2, r3
 804942e:	4603      	mov	r3, r0
 8049430:	70fb      	strb	r3, [r7, #3]
 8049432:	460b      	mov	r3, r1
 8049434:	70bb      	strb	r3, [r7, #2]
 8049436:	4613      	mov	r3, r2
 8049438:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 804943a:	2300      	movs	r3, #0
 804943c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804943e:	687b      	ldr	r3, [r7, #4]
 8049440:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8049442:	78fb      	ldrb	r3, [r7, #3]
 8049444:	015a      	lsls	r2, r3, #5
 8049446:	693b      	ldr	r3, [r7, #16]
 8049448:	4413      	add	r3, r2
 804944a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804944e:	461a      	mov	r2, r3
 8049450:	f04f 33ff 	mov.w	r3, #4294967295
 8049454:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8049456:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804945a:	2b03      	cmp	r3, #3
 804945c:	d87e      	bhi.n	804955c <USB_HC_Init+0x13c>
 804945e:	a201      	add	r2, pc, #4	; (adr r2, 8049464 <USB_HC_Init+0x44>)
 8049460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049464:	08049475 	.word	0x08049475
 8049468:	0804951f 	.word	0x0804951f
 804946c:	08049475 	.word	0x08049475
 8049470:	080494e1 	.word	0x080494e1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8049474:	78fb      	ldrb	r3, [r7, #3]
 8049476:	015a      	lsls	r2, r3, #5
 8049478:	693b      	ldr	r3, [r7, #16]
 804947a:	4413      	add	r3, r2
 804947c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049480:	461a      	mov	r2, r3
 8049482:	f240 439d 	movw	r3, #1181	; 0x49d
 8049486:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8049488:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804948c:	2b00      	cmp	r3, #0
 804948e:	da10      	bge.n	80494b2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8049490:	78fb      	ldrb	r3, [r7, #3]
 8049492:	015a      	lsls	r2, r3, #5
 8049494:	693b      	ldr	r3, [r7, #16]
 8049496:	4413      	add	r3, r2
 8049498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804949c:	68db      	ldr	r3, [r3, #12]
 804949e:	78fa      	ldrb	r2, [r7, #3]
 80494a0:	0151      	lsls	r1, r2, #5
 80494a2:	693a      	ldr	r2, [r7, #16]
 80494a4:	440a      	add	r2, r1
 80494a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80494aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80494ae:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80494b0:	e057      	b.n	8049562 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80494b2:	687b      	ldr	r3, [r7, #4]
 80494b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80494b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80494ba:	2b00      	cmp	r3, #0
 80494bc:	d051      	beq.n	8049562 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80494be:	78fb      	ldrb	r3, [r7, #3]
 80494c0:	015a      	lsls	r2, r3, #5
 80494c2:	693b      	ldr	r3, [r7, #16]
 80494c4:	4413      	add	r3, r2
 80494c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80494ca:	68db      	ldr	r3, [r3, #12]
 80494cc:	78fa      	ldrb	r2, [r7, #3]
 80494ce:	0151      	lsls	r1, r2, #5
 80494d0:	693a      	ldr	r2, [r7, #16]
 80494d2:	440a      	add	r2, r1
 80494d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80494d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80494dc:	60d3      	str	r3, [r2, #12]
      break;
 80494de:	e040      	b.n	8049562 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80494e0:	78fb      	ldrb	r3, [r7, #3]
 80494e2:	015a      	lsls	r2, r3, #5
 80494e4:	693b      	ldr	r3, [r7, #16]
 80494e6:	4413      	add	r3, r2
 80494e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80494ec:	461a      	mov	r2, r3
 80494ee:	f240 639d 	movw	r3, #1693	; 0x69d
 80494f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80494f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80494f8:	2b00      	cmp	r3, #0
 80494fa:	da34      	bge.n	8049566 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80494fc:	78fb      	ldrb	r3, [r7, #3]
 80494fe:	015a      	lsls	r2, r3, #5
 8049500:	693b      	ldr	r3, [r7, #16]
 8049502:	4413      	add	r3, r2
 8049504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049508:	68db      	ldr	r3, [r3, #12]
 804950a:	78fa      	ldrb	r2, [r7, #3]
 804950c:	0151      	lsls	r1, r2, #5
 804950e:	693a      	ldr	r2, [r7, #16]
 8049510:	440a      	add	r2, r1
 8049512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804951a:	60d3      	str	r3, [r2, #12]
      }

      break;
 804951c:	e023      	b.n	8049566 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 804951e:	78fb      	ldrb	r3, [r7, #3]
 8049520:	015a      	lsls	r2, r3, #5
 8049522:	693b      	ldr	r3, [r7, #16]
 8049524:	4413      	add	r3, r2
 8049526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804952a:	461a      	mov	r2, r3
 804952c:	f240 2325 	movw	r3, #549	; 0x225
 8049530:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8049532:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8049536:	2b00      	cmp	r3, #0
 8049538:	da17      	bge.n	804956a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 804953a:	78fb      	ldrb	r3, [r7, #3]
 804953c:	015a      	lsls	r2, r3, #5
 804953e:	693b      	ldr	r3, [r7, #16]
 8049540:	4413      	add	r3, r2
 8049542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049546:	68db      	ldr	r3, [r3, #12]
 8049548:	78fa      	ldrb	r2, [r7, #3]
 804954a:	0151      	lsls	r1, r2, #5
 804954c:	693a      	ldr	r2, [r7, #16]
 804954e:	440a      	add	r2, r1
 8049550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049554:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8049558:	60d3      	str	r3, [r2, #12]
      }
      break;
 804955a:	e006      	b.n	804956a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 804955c:	2301      	movs	r3, #1
 804955e:	77fb      	strb	r3, [r7, #31]
      break;
 8049560:	e004      	b.n	804956c <USB_HC_Init+0x14c>
      break;
 8049562:	bf00      	nop
 8049564:	e002      	b.n	804956c <USB_HC_Init+0x14c>
      break;
 8049566:	bf00      	nop
 8049568:	e000      	b.n	804956c <USB_HC_Init+0x14c>
      break;
 804956a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 804956c:	78fb      	ldrb	r3, [r7, #3]
 804956e:	015a      	lsls	r2, r3, #5
 8049570:	693b      	ldr	r3, [r7, #16]
 8049572:	4413      	add	r3, r2
 8049574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049578:	68db      	ldr	r3, [r3, #12]
 804957a:	78fa      	ldrb	r2, [r7, #3]
 804957c:	0151      	lsls	r1, r2, #5
 804957e:	693a      	ldr	r2, [r7, #16]
 8049580:	440a      	add	r2, r1
 8049582:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049586:	f043 0302 	orr.w	r3, r3, #2
 804958a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 804958c:	693b      	ldr	r3, [r7, #16]
 804958e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049592:	699a      	ldr	r2, [r3, #24]
 8049594:	78fb      	ldrb	r3, [r7, #3]
 8049596:	f003 030f 	and.w	r3, r3, #15
 804959a:	2101      	movs	r1, #1
 804959c:	fa01 f303 	lsl.w	r3, r1, r3
 80495a0:	6939      	ldr	r1, [r7, #16]
 80495a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80495a6:	4313      	orrs	r3, r2
 80495a8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80495aa:	687b      	ldr	r3, [r7, #4]
 80495ac:	699b      	ldr	r3, [r3, #24]
 80495ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80495b2:	687b      	ldr	r3, [r7, #4]
 80495b4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80495b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80495ba:	2b00      	cmp	r3, #0
 80495bc:	da03      	bge.n	80495c6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80495be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80495c2:	61bb      	str	r3, [r7, #24]
 80495c4:	e001      	b.n	80495ca <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80495c6:	2300      	movs	r3, #0
 80495c8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80495ca:	6878      	ldr	r0, [r7, #4]
 80495cc:	f7ff feff 	bl	80493ce <USB_GetHostSpeed>
 80495d0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80495d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80495d6:	2b02      	cmp	r3, #2
 80495d8:	d106      	bne.n	80495e8 <USB_HC_Init+0x1c8>
 80495da:	68fb      	ldr	r3, [r7, #12]
 80495dc:	2b02      	cmp	r3, #2
 80495de:	d003      	beq.n	80495e8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80495e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80495e4:	617b      	str	r3, [r7, #20]
 80495e6:	e001      	b.n	80495ec <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80495e8:	2300      	movs	r3, #0
 80495ea:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80495ec:	787b      	ldrb	r3, [r7, #1]
 80495ee:	059b      	lsls	r3, r3, #22
 80495f0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80495f4:	78bb      	ldrb	r3, [r7, #2]
 80495f6:	02db      	lsls	r3, r3, #11
 80495f8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80495fc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80495fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8049602:	049b      	lsls	r3, r3, #18
 8049604:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8049608:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 804960a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 804960c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8049610:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8049612:	69bb      	ldr	r3, [r7, #24]
 8049614:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8049616:	78fb      	ldrb	r3, [r7, #3]
 8049618:	0159      	lsls	r1, r3, #5
 804961a:	693b      	ldr	r3, [r7, #16]
 804961c:	440b      	add	r3, r1
 804961e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049622:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8049624:	697b      	ldr	r3, [r7, #20]
 8049626:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8049628:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 804962a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804962e:	2b03      	cmp	r3, #3
 8049630:	d003      	beq.n	804963a <USB_HC_Init+0x21a>
 8049632:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8049636:	2b01      	cmp	r3, #1
 8049638:	d10f      	bne.n	804965a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 804963a:	78fb      	ldrb	r3, [r7, #3]
 804963c:	015a      	lsls	r2, r3, #5
 804963e:	693b      	ldr	r3, [r7, #16]
 8049640:	4413      	add	r3, r2
 8049642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049646:	681b      	ldr	r3, [r3, #0]
 8049648:	78fa      	ldrb	r2, [r7, #3]
 804964a:	0151      	lsls	r1, r2, #5
 804964c:	693a      	ldr	r2, [r7, #16]
 804964e:	440a      	add	r2, r1
 8049650:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049654:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8049658:	6013      	str	r3, [r2, #0]
  }

  return ret;
 804965a:	7ffb      	ldrb	r3, [r7, #31]
}
 804965c:	4618      	mov	r0, r3
 804965e:	3720      	adds	r7, #32
 8049660:	46bd      	mov	sp, r7
 8049662:	bd80      	pop	{r7, pc}

08049664 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8049664:	b580      	push	{r7, lr}
 8049666:	b08c      	sub	sp, #48	; 0x30
 8049668:	af02      	add	r7, sp, #8
 804966a:	60f8      	str	r0, [r7, #12]
 804966c:	60b9      	str	r1, [r7, #8]
 804966e:	4613      	mov	r3, r2
 8049670:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049672:	68fb      	ldr	r3, [r7, #12]
 8049674:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8049676:	68bb      	ldr	r3, [r7, #8]
 8049678:	785b      	ldrb	r3, [r3, #1]
 804967a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 804967c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8049680:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8049682:	68fb      	ldr	r3, [r7, #12]
 8049684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8049686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804968a:	2b00      	cmp	r3, #0
 804968c:	d02d      	beq.n	80496ea <USB_HC_StartXfer+0x86>
 804968e:	68bb      	ldr	r3, [r7, #8]
 8049690:	791b      	ldrb	r3, [r3, #4]
 8049692:	2b00      	cmp	r3, #0
 8049694:	d129      	bne.n	80496ea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8049696:	79fb      	ldrb	r3, [r7, #7]
 8049698:	2b01      	cmp	r3, #1
 804969a:	d117      	bne.n	80496cc <USB_HC_StartXfer+0x68>
 804969c:	68bb      	ldr	r3, [r7, #8]
 804969e:	79db      	ldrb	r3, [r3, #7]
 80496a0:	2b00      	cmp	r3, #0
 80496a2:	d003      	beq.n	80496ac <USB_HC_StartXfer+0x48>
 80496a4:	68bb      	ldr	r3, [r7, #8]
 80496a6:	79db      	ldrb	r3, [r3, #7]
 80496a8:	2b02      	cmp	r3, #2
 80496aa:	d10f      	bne.n	80496cc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80496ac:	69fb      	ldr	r3, [r7, #28]
 80496ae:	015a      	lsls	r2, r3, #5
 80496b0:	6a3b      	ldr	r3, [r7, #32]
 80496b2:	4413      	add	r3, r2
 80496b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80496b8:	68db      	ldr	r3, [r3, #12]
 80496ba:	69fa      	ldr	r2, [r7, #28]
 80496bc:	0151      	lsls	r1, r2, #5
 80496be:	6a3a      	ldr	r2, [r7, #32]
 80496c0:	440a      	add	r2, r1
 80496c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80496c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80496ca:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80496cc:	79fb      	ldrb	r3, [r7, #7]
 80496ce:	2b00      	cmp	r3, #0
 80496d0:	d10b      	bne.n	80496ea <USB_HC_StartXfer+0x86>
 80496d2:	68bb      	ldr	r3, [r7, #8]
 80496d4:	795b      	ldrb	r3, [r3, #5]
 80496d6:	2b01      	cmp	r3, #1
 80496d8:	d107      	bne.n	80496ea <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80496da:	68bb      	ldr	r3, [r7, #8]
 80496dc:	785b      	ldrb	r3, [r3, #1]
 80496de:	4619      	mov	r1, r3
 80496e0:	68f8      	ldr	r0, [r7, #12]
 80496e2:	f000 fa0f 	bl	8049b04 <USB_DoPing>
      return HAL_OK;
 80496e6:	2300      	movs	r3, #0
 80496e8:	e0f8      	b.n	80498dc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80496ea:	68bb      	ldr	r3, [r7, #8]
 80496ec:	695b      	ldr	r3, [r3, #20]
 80496ee:	2b00      	cmp	r3, #0
 80496f0:	d018      	beq.n	8049724 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80496f2:	68bb      	ldr	r3, [r7, #8]
 80496f4:	695b      	ldr	r3, [r3, #20]
 80496f6:	68ba      	ldr	r2, [r7, #8]
 80496f8:	8912      	ldrh	r2, [r2, #8]
 80496fa:	4413      	add	r3, r2
 80496fc:	3b01      	subs	r3, #1
 80496fe:	68ba      	ldr	r2, [r7, #8]
 8049700:	8912      	ldrh	r2, [r2, #8]
 8049702:	fbb3 f3f2 	udiv	r3, r3, r2
 8049706:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8049708:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 804970a:	8b7b      	ldrh	r3, [r7, #26]
 804970c:	429a      	cmp	r2, r3
 804970e:	d90b      	bls.n	8049728 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8049710:	8b7b      	ldrh	r3, [r7, #26]
 8049712:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8049714:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8049716:	68ba      	ldr	r2, [r7, #8]
 8049718:	8912      	ldrh	r2, [r2, #8]
 804971a:	fb03 f202 	mul.w	r2, r3, r2
 804971e:	68bb      	ldr	r3, [r7, #8]
 8049720:	611a      	str	r2, [r3, #16]
 8049722:	e001      	b.n	8049728 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8049724:	2301      	movs	r3, #1
 8049726:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8049728:	68bb      	ldr	r3, [r7, #8]
 804972a:	78db      	ldrb	r3, [r3, #3]
 804972c:	2b00      	cmp	r3, #0
 804972e:	d007      	beq.n	8049740 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8049730:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8049732:	68ba      	ldr	r2, [r7, #8]
 8049734:	8912      	ldrh	r2, [r2, #8]
 8049736:	fb03 f202 	mul.w	r2, r3, r2
 804973a:	68bb      	ldr	r3, [r7, #8]
 804973c:	611a      	str	r2, [r3, #16]
 804973e:	e003      	b.n	8049748 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8049740:	68bb      	ldr	r3, [r7, #8]
 8049742:	695a      	ldr	r2, [r3, #20]
 8049744:	68bb      	ldr	r3, [r7, #8]
 8049746:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8049748:	68bb      	ldr	r3, [r7, #8]
 804974a:	691b      	ldr	r3, [r3, #16]
 804974c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8049750:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8049752:	04d9      	lsls	r1, r3, #19
 8049754:	4b63      	ldr	r3, [pc, #396]	; (80498e4 <USB_HC_StartXfer+0x280>)
 8049756:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8049758:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 804975a:	68bb      	ldr	r3, [r7, #8]
 804975c:	7a9b      	ldrb	r3, [r3, #10]
 804975e:	075b      	lsls	r3, r3, #29
 8049760:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8049764:	69f9      	ldr	r1, [r7, #28]
 8049766:	0148      	lsls	r0, r1, #5
 8049768:	6a39      	ldr	r1, [r7, #32]
 804976a:	4401      	add	r1, r0
 804976c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8049770:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8049772:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8049774:	79fb      	ldrb	r3, [r7, #7]
 8049776:	2b00      	cmp	r3, #0
 8049778:	d009      	beq.n	804978e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 804977a:	68bb      	ldr	r3, [r7, #8]
 804977c:	68d9      	ldr	r1, [r3, #12]
 804977e:	69fb      	ldr	r3, [r7, #28]
 8049780:	015a      	lsls	r2, r3, #5
 8049782:	6a3b      	ldr	r3, [r7, #32]
 8049784:	4413      	add	r3, r2
 8049786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804978a:	460a      	mov	r2, r1
 804978c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 804978e:	6a3b      	ldr	r3, [r7, #32]
 8049790:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049794:	689b      	ldr	r3, [r3, #8]
 8049796:	f003 0301 	and.w	r3, r3, #1
 804979a:	2b00      	cmp	r3, #0
 804979c:	bf0c      	ite	eq
 804979e:	2301      	moveq	r3, #1
 80497a0:	2300      	movne	r3, #0
 80497a2:	b2db      	uxtb	r3, r3
 80497a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80497a6:	69fb      	ldr	r3, [r7, #28]
 80497a8:	015a      	lsls	r2, r3, #5
 80497aa:	6a3b      	ldr	r3, [r7, #32]
 80497ac:	4413      	add	r3, r2
 80497ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80497b2:	681b      	ldr	r3, [r3, #0]
 80497b4:	69fa      	ldr	r2, [r7, #28]
 80497b6:	0151      	lsls	r1, r2, #5
 80497b8:	6a3a      	ldr	r2, [r7, #32]
 80497ba:	440a      	add	r2, r1
 80497bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80497c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80497c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80497c6:	69fb      	ldr	r3, [r7, #28]
 80497c8:	015a      	lsls	r2, r3, #5
 80497ca:	6a3b      	ldr	r3, [r7, #32]
 80497cc:	4413      	add	r3, r2
 80497ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80497d2:	681a      	ldr	r2, [r3, #0]
 80497d4:	7e7b      	ldrb	r3, [r7, #25]
 80497d6:	075b      	lsls	r3, r3, #29
 80497d8:	69f9      	ldr	r1, [r7, #28]
 80497da:	0148      	lsls	r0, r1, #5
 80497dc:	6a39      	ldr	r1, [r7, #32]
 80497de:	4401      	add	r1, r0
 80497e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80497e4:	4313      	orrs	r3, r2
 80497e6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80497e8:	69fb      	ldr	r3, [r7, #28]
 80497ea:	015a      	lsls	r2, r3, #5
 80497ec:	6a3b      	ldr	r3, [r7, #32]
 80497ee:	4413      	add	r3, r2
 80497f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80497f4:	681b      	ldr	r3, [r3, #0]
 80497f6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80497f8:	693b      	ldr	r3, [r7, #16]
 80497fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80497fe:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8049800:	68bb      	ldr	r3, [r7, #8]
 8049802:	78db      	ldrb	r3, [r3, #3]
 8049804:	2b00      	cmp	r3, #0
 8049806:	d004      	beq.n	8049812 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8049808:	693b      	ldr	r3, [r7, #16]
 804980a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 804980e:	613b      	str	r3, [r7, #16]
 8049810:	e003      	b.n	804981a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8049812:	693b      	ldr	r3, [r7, #16]
 8049814:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8049818:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 804981a:	693b      	ldr	r3, [r7, #16]
 804981c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049820:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8049822:	69fb      	ldr	r3, [r7, #28]
 8049824:	015a      	lsls	r2, r3, #5
 8049826:	6a3b      	ldr	r3, [r7, #32]
 8049828:	4413      	add	r3, r2
 804982a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804982e:	461a      	mov	r2, r3
 8049830:	693b      	ldr	r3, [r7, #16]
 8049832:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8049834:	79fb      	ldrb	r3, [r7, #7]
 8049836:	2b00      	cmp	r3, #0
 8049838:	d001      	beq.n	804983e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 804983a:	2300      	movs	r3, #0
 804983c:	e04e      	b.n	80498dc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 804983e:	68bb      	ldr	r3, [r7, #8]
 8049840:	78db      	ldrb	r3, [r3, #3]
 8049842:	2b00      	cmp	r3, #0
 8049844:	d149      	bne.n	80498da <USB_HC_StartXfer+0x276>
 8049846:	68bb      	ldr	r3, [r7, #8]
 8049848:	695b      	ldr	r3, [r3, #20]
 804984a:	2b00      	cmp	r3, #0
 804984c:	d045      	beq.n	80498da <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 804984e:	68bb      	ldr	r3, [r7, #8]
 8049850:	79db      	ldrb	r3, [r3, #7]
 8049852:	2b03      	cmp	r3, #3
 8049854:	d830      	bhi.n	80498b8 <USB_HC_StartXfer+0x254>
 8049856:	a201      	add	r2, pc, #4	; (adr r2, 804985c <USB_HC_StartXfer+0x1f8>)
 8049858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804985c:	0804986d 	.word	0x0804986d
 8049860:	08049891 	.word	0x08049891
 8049864:	0804986d 	.word	0x0804986d
 8049868:	08049891 	.word	0x08049891
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 804986c:	68bb      	ldr	r3, [r7, #8]
 804986e:	695b      	ldr	r3, [r3, #20]
 8049870:	3303      	adds	r3, #3
 8049872:	089b      	lsrs	r3, r3, #2
 8049874:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8049876:	8afa      	ldrh	r2, [r7, #22]
 8049878:	68fb      	ldr	r3, [r7, #12]
 804987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804987c:	b29b      	uxth	r3, r3
 804987e:	429a      	cmp	r2, r3
 8049880:	d91c      	bls.n	80498bc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8049882:	68fb      	ldr	r3, [r7, #12]
 8049884:	699b      	ldr	r3, [r3, #24]
 8049886:	f043 0220 	orr.w	r2, r3, #32
 804988a:	68fb      	ldr	r3, [r7, #12]
 804988c:	619a      	str	r2, [r3, #24]
        }
        break;
 804988e:	e015      	b.n	80498bc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8049890:	68bb      	ldr	r3, [r7, #8]
 8049892:	695b      	ldr	r3, [r3, #20]
 8049894:	3303      	adds	r3, #3
 8049896:	089b      	lsrs	r3, r3, #2
 8049898:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 804989a:	8afa      	ldrh	r2, [r7, #22]
 804989c:	6a3b      	ldr	r3, [r7, #32]
 804989e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80498a2:	691b      	ldr	r3, [r3, #16]
 80498a4:	b29b      	uxth	r3, r3
 80498a6:	429a      	cmp	r2, r3
 80498a8:	d90a      	bls.n	80498c0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80498aa:	68fb      	ldr	r3, [r7, #12]
 80498ac:	699b      	ldr	r3, [r3, #24]
 80498ae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80498b2:	68fb      	ldr	r3, [r7, #12]
 80498b4:	619a      	str	r2, [r3, #24]
        }
        break;
 80498b6:	e003      	b.n	80498c0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80498b8:	bf00      	nop
 80498ba:	e002      	b.n	80498c2 <USB_HC_StartXfer+0x25e>
        break;
 80498bc:	bf00      	nop
 80498be:	e000      	b.n	80498c2 <USB_HC_StartXfer+0x25e>
        break;
 80498c0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80498c2:	68bb      	ldr	r3, [r7, #8]
 80498c4:	68d9      	ldr	r1, [r3, #12]
 80498c6:	68bb      	ldr	r3, [r7, #8]
 80498c8:	785a      	ldrb	r2, [r3, #1]
 80498ca:	68bb      	ldr	r3, [r7, #8]
 80498cc:	695b      	ldr	r3, [r3, #20]
 80498ce:	b29b      	uxth	r3, r3
 80498d0:	2000      	movs	r0, #0
 80498d2:	9000      	str	r0, [sp, #0]
 80498d4:	68f8      	ldr	r0, [r7, #12]
 80498d6:	f7ff fb31 	bl	8048f3c <USB_WritePacket>
  }

  return HAL_OK;
 80498da:	2300      	movs	r3, #0
}
 80498dc:	4618      	mov	r0, r3
 80498de:	3728      	adds	r7, #40	; 0x28
 80498e0:	46bd      	mov	sp, r7
 80498e2:	bd80      	pop	{r7, pc}
 80498e4:	1ff80000 	.word	0x1ff80000

080498e8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80498e8:	b480      	push	{r7}
 80498ea:	b085      	sub	sp, #20
 80498ec:	af00      	add	r7, sp, #0
 80498ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80498f0:	687b      	ldr	r3, [r7, #4]
 80498f2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80498f4:	68fb      	ldr	r3, [r7, #12]
 80498f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80498fa:	695b      	ldr	r3, [r3, #20]
 80498fc:	b29b      	uxth	r3, r3
}
 80498fe:	4618      	mov	r0, r3
 8049900:	3714      	adds	r7, #20
 8049902:	46bd      	mov	sp, r7
 8049904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049908:	4770      	bx	lr

0804990a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 804990a:	b480      	push	{r7}
 804990c:	b089      	sub	sp, #36	; 0x24
 804990e:	af00      	add	r7, sp, #0
 8049910:	6078      	str	r0, [r7, #4]
 8049912:	460b      	mov	r3, r1
 8049914:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049916:	687b      	ldr	r3, [r7, #4]
 8049918:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 804991a:	78fb      	ldrb	r3, [r7, #3]
 804991c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 804991e:	2300      	movs	r3, #0
 8049920:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8049922:	69bb      	ldr	r3, [r7, #24]
 8049924:	015a      	lsls	r2, r3, #5
 8049926:	69fb      	ldr	r3, [r7, #28]
 8049928:	4413      	add	r3, r2
 804992a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804992e:	681b      	ldr	r3, [r3, #0]
 8049930:	0c9b      	lsrs	r3, r3, #18
 8049932:	f003 0303 	and.w	r3, r3, #3
 8049936:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8049938:	69bb      	ldr	r3, [r7, #24]
 804993a:	015a      	lsls	r2, r3, #5
 804993c:	69fb      	ldr	r3, [r7, #28]
 804993e:	4413      	add	r3, r2
 8049940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049944:	681b      	ldr	r3, [r3, #0]
 8049946:	0fdb      	lsrs	r3, r3, #31
 8049948:	f003 0301 	and.w	r3, r3, #1
 804994c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 804994e:	687b      	ldr	r3, [r7, #4]
 8049950:	689b      	ldr	r3, [r3, #8]
 8049952:	f003 0320 	and.w	r3, r3, #32
 8049956:	2b20      	cmp	r3, #32
 8049958:	d104      	bne.n	8049964 <USB_HC_Halt+0x5a>
 804995a:	693b      	ldr	r3, [r7, #16]
 804995c:	2b00      	cmp	r3, #0
 804995e:	d101      	bne.n	8049964 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8049960:	2300      	movs	r3, #0
 8049962:	e0c8      	b.n	8049af6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8049964:	697b      	ldr	r3, [r7, #20]
 8049966:	2b00      	cmp	r3, #0
 8049968:	d002      	beq.n	8049970 <USB_HC_Halt+0x66>
 804996a:	697b      	ldr	r3, [r7, #20]
 804996c:	2b02      	cmp	r3, #2
 804996e:	d163      	bne.n	8049a38 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8049970:	69bb      	ldr	r3, [r7, #24]
 8049972:	015a      	lsls	r2, r3, #5
 8049974:	69fb      	ldr	r3, [r7, #28]
 8049976:	4413      	add	r3, r2
 8049978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804997c:	681b      	ldr	r3, [r3, #0]
 804997e:	69ba      	ldr	r2, [r7, #24]
 8049980:	0151      	lsls	r1, r2, #5
 8049982:	69fa      	ldr	r2, [r7, #28]
 8049984:	440a      	add	r2, r1
 8049986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804998a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804998e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8049990:	687b      	ldr	r3, [r7, #4]
 8049992:	689b      	ldr	r3, [r3, #8]
 8049994:	f003 0320 	and.w	r3, r3, #32
 8049998:	2b00      	cmp	r3, #0
 804999a:	f040 80ab 	bne.w	8049af4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 804999e:	687b      	ldr	r3, [r7, #4]
 80499a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80499a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80499a6:	2b00      	cmp	r3, #0
 80499a8:	d133      	bne.n	8049a12 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80499aa:	69bb      	ldr	r3, [r7, #24]
 80499ac:	015a      	lsls	r2, r3, #5
 80499ae:	69fb      	ldr	r3, [r7, #28]
 80499b0:	4413      	add	r3, r2
 80499b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80499b6:	681b      	ldr	r3, [r3, #0]
 80499b8:	69ba      	ldr	r2, [r7, #24]
 80499ba:	0151      	lsls	r1, r2, #5
 80499bc:	69fa      	ldr	r2, [r7, #28]
 80499be:	440a      	add	r2, r1
 80499c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80499c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80499c8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80499ca:	69bb      	ldr	r3, [r7, #24]
 80499cc:	015a      	lsls	r2, r3, #5
 80499ce:	69fb      	ldr	r3, [r7, #28]
 80499d0:	4413      	add	r3, r2
 80499d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80499d6:	681b      	ldr	r3, [r3, #0]
 80499d8:	69ba      	ldr	r2, [r7, #24]
 80499da:	0151      	lsls	r1, r2, #5
 80499dc:	69fa      	ldr	r2, [r7, #28]
 80499de:	440a      	add	r2, r1
 80499e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80499e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80499e8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80499ea:	68fb      	ldr	r3, [r7, #12]
 80499ec:	3301      	adds	r3, #1
 80499ee:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80499f0:	68fb      	ldr	r3, [r7, #12]
 80499f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80499f6:	d81d      	bhi.n	8049a34 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80499f8:	69bb      	ldr	r3, [r7, #24]
 80499fa:	015a      	lsls	r2, r3, #5
 80499fc:	69fb      	ldr	r3, [r7, #28]
 80499fe:	4413      	add	r3, r2
 8049a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049a04:	681b      	ldr	r3, [r3, #0]
 8049a06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8049a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8049a0e:	d0ec      	beq.n	80499ea <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8049a10:	e070      	b.n	8049af4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8049a12:	69bb      	ldr	r3, [r7, #24]
 8049a14:	015a      	lsls	r2, r3, #5
 8049a16:	69fb      	ldr	r3, [r7, #28]
 8049a18:	4413      	add	r3, r2
 8049a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049a1e:	681b      	ldr	r3, [r3, #0]
 8049a20:	69ba      	ldr	r2, [r7, #24]
 8049a22:	0151      	lsls	r1, r2, #5
 8049a24:	69fa      	ldr	r2, [r7, #28]
 8049a26:	440a      	add	r2, r1
 8049a28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049a2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049a30:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8049a32:	e05f      	b.n	8049af4 <USB_HC_Halt+0x1ea>
            break;
 8049a34:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8049a36:	e05d      	b.n	8049af4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8049a38:	69bb      	ldr	r3, [r7, #24]
 8049a3a:	015a      	lsls	r2, r3, #5
 8049a3c:	69fb      	ldr	r3, [r7, #28]
 8049a3e:	4413      	add	r3, r2
 8049a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049a44:	681b      	ldr	r3, [r3, #0]
 8049a46:	69ba      	ldr	r2, [r7, #24]
 8049a48:	0151      	lsls	r1, r2, #5
 8049a4a:	69fa      	ldr	r2, [r7, #28]
 8049a4c:	440a      	add	r2, r1
 8049a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049a52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8049a56:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8049a58:	69fb      	ldr	r3, [r7, #28]
 8049a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049a5e:	691b      	ldr	r3, [r3, #16]
 8049a60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8049a64:	2b00      	cmp	r3, #0
 8049a66:	d133      	bne.n	8049ad0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8049a68:	69bb      	ldr	r3, [r7, #24]
 8049a6a:	015a      	lsls	r2, r3, #5
 8049a6c:	69fb      	ldr	r3, [r7, #28]
 8049a6e:	4413      	add	r3, r2
 8049a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049a74:	681b      	ldr	r3, [r3, #0]
 8049a76:	69ba      	ldr	r2, [r7, #24]
 8049a78:	0151      	lsls	r1, r2, #5
 8049a7a:	69fa      	ldr	r2, [r7, #28]
 8049a7c:	440a      	add	r2, r1
 8049a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049a82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8049a86:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8049a88:	69bb      	ldr	r3, [r7, #24]
 8049a8a:	015a      	lsls	r2, r3, #5
 8049a8c:	69fb      	ldr	r3, [r7, #28]
 8049a8e:	4413      	add	r3, r2
 8049a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049a94:	681b      	ldr	r3, [r3, #0]
 8049a96:	69ba      	ldr	r2, [r7, #24]
 8049a98:	0151      	lsls	r1, r2, #5
 8049a9a:	69fa      	ldr	r2, [r7, #28]
 8049a9c:	440a      	add	r2, r1
 8049a9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049aa6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8049aa8:	68fb      	ldr	r3, [r7, #12]
 8049aaa:	3301      	adds	r3, #1
 8049aac:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8049aae:	68fb      	ldr	r3, [r7, #12]
 8049ab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8049ab4:	d81d      	bhi.n	8049af2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8049ab6:	69bb      	ldr	r3, [r7, #24]
 8049ab8:	015a      	lsls	r2, r3, #5
 8049aba:	69fb      	ldr	r3, [r7, #28]
 8049abc:	4413      	add	r3, r2
 8049abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049ac2:	681b      	ldr	r3, [r3, #0]
 8049ac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8049ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8049acc:	d0ec      	beq.n	8049aa8 <USB_HC_Halt+0x19e>
 8049ace:	e011      	b.n	8049af4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8049ad0:	69bb      	ldr	r3, [r7, #24]
 8049ad2:	015a      	lsls	r2, r3, #5
 8049ad4:	69fb      	ldr	r3, [r7, #28]
 8049ad6:	4413      	add	r3, r2
 8049ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049adc:	681b      	ldr	r3, [r3, #0]
 8049ade:	69ba      	ldr	r2, [r7, #24]
 8049ae0:	0151      	lsls	r1, r2, #5
 8049ae2:	69fa      	ldr	r2, [r7, #28]
 8049ae4:	440a      	add	r2, r1
 8049ae6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049aea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049aee:	6013      	str	r3, [r2, #0]
 8049af0:	e000      	b.n	8049af4 <USB_HC_Halt+0x1ea>
          break;
 8049af2:	bf00      	nop
    }
  }

  return HAL_OK;
 8049af4:	2300      	movs	r3, #0
}
 8049af6:	4618      	mov	r0, r3
 8049af8:	3724      	adds	r7, #36	; 0x24
 8049afa:	46bd      	mov	sp, r7
 8049afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049b00:	4770      	bx	lr
	...

08049b04 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8049b04:	b480      	push	{r7}
 8049b06:	b087      	sub	sp, #28
 8049b08:	af00      	add	r7, sp, #0
 8049b0a:	6078      	str	r0, [r7, #4]
 8049b0c:	460b      	mov	r3, r1
 8049b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049b10:	687b      	ldr	r3, [r7, #4]
 8049b12:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8049b14:	78fb      	ldrb	r3, [r7, #3]
 8049b16:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8049b18:	2301      	movs	r3, #1
 8049b1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8049b1c:	68fb      	ldr	r3, [r7, #12]
 8049b1e:	04da      	lsls	r2, r3, #19
 8049b20:	4b15      	ldr	r3, [pc, #84]	; (8049b78 <USB_DoPing+0x74>)
 8049b22:	4013      	ands	r3, r2
 8049b24:	693a      	ldr	r2, [r7, #16]
 8049b26:	0151      	lsls	r1, r2, #5
 8049b28:	697a      	ldr	r2, [r7, #20]
 8049b2a:	440a      	add	r2, r1
 8049b2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049b30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049b34:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8049b36:	693b      	ldr	r3, [r7, #16]
 8049b38:	015a      	lsls	r2, r3, #5
 8049b3a:	697b      	ldr	r3, [r7, #20]
 8049b3c:	4413      	add	r3, r2
 8049b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049b42:	681b      	ldr	r3, [r3, #0]
 8049b44:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8049b46:	68bb      	ldr	r3, [r7, #8]
 8049b48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8049b4c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8049b4e:	68bb      	ldr	r3, [r7, #8]
 8049b50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049b54:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8049b56:	693b      	ldr	r3, [r7, #16]
 8049b58:	015a      	lsls	r2, r3, #5
 8049b5a:	697b      	ldr	r3, [r7, #20]
 8049b5c:	4413      	add	r3, r2
 8049b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049b62:	461a      	mov	r2, r3
 8049b64:	68bb      	ldr	r3, [r7, #8]
 8049b66:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8049b68:	2300      	movs	r3, #0
}
 8049b6a:	4618      	mov	r0, r3
 8049b6c:	371c      	adds	r7, #28
 8049b6e:	46bd      	mov	sp, r7
 8049b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049b74:	4770      	bx	lr
 8049b76:	bf00      	nop
 8049b78:	1ff80000 	.word	0x1ff80000

08049b7c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8049b7c:	b580      	push	{r7, lr}
 8049b7e:	b088      	sub	sp, #32
 8049b80:	af00      	add	r7, sp, #0
 8049b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8049b84:	2300      	movs	r3, #0
 8049b86:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049b88:	687b      	ldr	r3, [r7, #4]
 8049b8a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8049b8c:	2300      	movs	r3, #0
 8049b8e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8049b90:	6878      	ldr	r0, [r7, #4]
 8049b92:	f7ff f911 	bl	8048db8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8049b96:	2110      	movs	r1, #16
 8049b98:	6878      	ldr	r0, [r7, #4]
 8049b9a:	f7ff f96b 	bl	8048e74 <USB_FlushTxFifo>
 8049b9e:	4603      	mov	r3, r0
 8049ba0:	2b00      	cmp	r3, #0
 8049ba2:	d001      	beq.n	8049ba8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8049ba4:	2301      	movs	r3, #1
 8049ba6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8049ba8:	6878      	ldr	r0, [r7, #4]
 8049baa:	f7ff f997 	bl	8048edc <USB_FlushRxFifo>
 8049bae:	4603      	mov	r3, r0
 8049bb0:	2b00      	cmp	r3, #0
 8049bb2:	d001      	beq.n	8049bb8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8049bb4:	2301      	movs	r3, #1
 8049bb6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8049bb8:	2300      	movs	r3, #0
 8049bba:	61bb      	str	r3, [r7, #24]
 8049bbc:	e01f      	b.n	8049bfe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8049bbe:	69bb      	ldr	r3, [r7, #24]
 8049bc0:	015a      	lsls	r2, r3, #5
 8049bc2:	697b      	ldr	r3, [r7, #20]
 8049bc4:	4413      	add	r3, r2
 8049bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049bca:	681b      	ldr	r3, [r3, #0]
 8049bcc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8049bce:	693b      	ldr	r3, [r7, #16]
 8049bd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8049bd4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8049bd6:	693b      	ldr	r3, [r7, #16]
 8049bd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8049bdc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8049bde:	693b      	ldr	r3, [r7, #16]
 8049be0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8049be4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8049be6:	69bb      	ldr	r3, [r7, #24]
 8049be8:	015a      	lsls	r2, r3, #5
 8049bea:	697b      	ldr	r3, [r7, #20]
 8049bec:	4413      	add	r3, r2
 8049bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049bf2:	461a      	mov	r2, r3
 8049bf4:	693b      	ldr	r3, [r7, #16]
 8049bf6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8049bf8:	69bb      	ldr	r3, [r7, #24]
 8049bfa:	3301      	adds	r3, #1
 8049bfc:	61bb      	str	r3, [r7, #24]
 8049bfe:	69bb      	ldr	r3, [r7, #24]
 8049c00:	2b0f      	cmp	r3, #15
 8049c02:	d9dc      	bls.n	8049bbe <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8049c04:	2300      	movs	r3, #0
 8049c06:	61bb      	str	r3, [r7, #24]
 8049c08:	e034      	b.n	8049c74 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8049c0a:	69bb      	ldr	r3, [r7, #24]
 8049c0c:	015a      	lsls	r2, r3, #5
 8049c0e:	697b      	ldr	r3, [r7, #20]
 8049c10:	4413      	add	r3, r2
 8049c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049c16:	681b      	ldr	r3, [r3, #0]
 8049c18:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8049c1a:	693b      	ldr	r3, [r7, #16]
 8049c1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8049c20:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8049c22:	693b      	ldr	r3, [r7, #16]
 8049c24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049c28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8049c2a:	693b      	ldr	r3, [r7, #16]
 8049c2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8049c30:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8049c32:	69bb      	ldr	r3, [r7, #24]
 8049c34:	015a      	lsls	r2, r3, #5
 8049c36:	697b      	ldr	r3, [r7, #20]
 8049c38:	4413      	add	r3, r2
 8049c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049c3e:	461a      	mov	r2, r3
 8049c40:	693b      	ldr	r3, [r7, #16]
 8049c42:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8049c44:	68fb      	ldr	r3, [r7, #12]
 8049c46:	3301      	adds	r3, #1
 8049c48:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8049c4a:	68fb      	ldr	r3, [r7, #12]
 8049c4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8049c50:	d80c      	bhi.n	8049c6c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8049c52:	69bb      	ldr	r3, [r7, #24]
 8049c54:	015a      	lsls	r2, r3, #5
 8049c56:	697b      	ldr	r3, [r7, #20]
 8049c58:	4413      	add	r3, r2
 8049c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049c5e:	681b      	ldr	r3, [r3, #0]
 8049c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8049c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8049c68:	d0ec      	beq.n	8049c44 <USB_StopHost+0xc8>
 8049c6a:	e000      	b.n	8049c6e <USB_StopHost+0xf2>
        break;
 8049c6c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8049c6e:	69bb      	ldr	r3, [r7, #24]
 8049c70:	3301      	adds	r3, #1
 8049c72:	61bb      	str	r3, [r7, #24]
 8049c74:	69bb      	ldr	r3, [r7, #24]
 8049c76:	2b0f      	cmp	r3, #15
 8049c78:	d9c7      	bls.n	8049c0a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8049c7a:	697b      	ldr	r3, [r7, #20]
 8049c7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049c80:	461a      	mov	r2, r3
 8049c82:	f04f 33ff 	mov.w	r3, #4294967295
 8049c86:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8049c88:	687b      	ldr	r3, [r7, #4]
 8049c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8049c8e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8049c90:	6878      	ldr	r0, [r7, #4]
 8049c92:	f7ff f880 	bl	8048d96 <USB_EnableGlobalInt>

  return ret;
 8049c96:	7ffb      	ldrb	r3, [r7, #31]
}
 8049c98:	4618      	mov	r0, r3
 8049c9a:	3720      	adds	r7, #32
 8049c9c:	46bd      	mov	sp, r7
 8049c9e:	bd80      	pop	{r7, pc}

08049ca0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8049ca0:	b590      	push	{r4, r7, lr}
 8049ca2:	b089      	sub	sp, #36	; 0x24
 8049ca4:	af04      	add	r7, sp, #16
 8049ca6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8049ca8:	2301      	movs	r3, #1
 8049caa:	2202      	movs	r2, #2
 8049cac:	2102      	movs	r1, #2
 8049cae:	6878      	ldr	r0, [r7, #4]
 8049cb0:	f000 fc66 	bl	804a580 <USBH_FindInterface>
 8049cb4:	4603      	mov	r3, r0
 8049cb6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8049cb8:	7bfb      	ldrb	r3, [r7, #15]
 8049cba:	2bff      	cmp	r3, #255	; 0xff
 8049cbc:	d002      	beq.n	8049cc4 <USBH_CDC_InterfaceInit+0x24>
 8049cbe:	7bfb      	ldrb	r3, [r7, #15]
 8049cc0:	2b01      	cmp	r3, #1
 8049cc2:	d901      	bls.n	8049cc8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8049cc4:	2302      	movs	r3, #2
 8049cc6:	e13d      	b.n	8049f44 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8049cc8:	7bfb      	ldrb	r3, [r7, #15]
 8049cca:	4619      	mov	r1, r3
 8049ccc:	6878      	ldr	r0, [r7, #4]
 8049cce:	f000 fc3b 	bl	804a548 <USBH_SelectInterface>
 8049cd2:	4603      	mov	r3, r0
 8049cd4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8049cd6:	7bbb      	ldrb	r3, [r7, #14]
 8049cd8:	2b00      	cmp	r3, #0
 8049cda:	d001      	beq.n	8049ce0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8049cdc:	2302      	movs	r3, #2
 8049cde:	e131      	b.n	8049f44 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8049ce0:	687b      	ldr	r3, [r7, #4]
 8049ce2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8049ce6:	2050      	movs	r0, #80	; 0x50
 8049ce8:	f002 fb00 	bl	804c2ec <malloc>
 8049cec:	4603      	mov	r3, r0
 8049cee:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8049cf0:	687b      	ldr	r3, [r7, #4]
 8049cf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8049cf6:	69db      	ldr	r3, [r3, #28]
 8049cf8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8049cfa:	68bb      	ldr	r3, [r7, #8]
 8049cfc:	2b00      	cmp	r3, #0
 8049cfe:	d101      	bne.n	8049d04 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8049d00:	2302      	movs	r3, #2
 8049d02:	e11f      	b.n	8049f44 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8049d04:	2250      	movs	r2, #80	; 0x50
 8049d06:	2100      	movs	r1, #0
 8049d08:	68b8      	ldr	r0, [r7, #8]
 8049d0a:	f002 faff 	bl	804c30c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8049d0e:	7bfb      	ldrb	r3, [r7, #15]
 8049d10:	687a      	ldr	r2, [r7, #4]
 8049d12:	211a      	movs	r1, #26
 8049d14:	fb01 f303 	mul.w	r3, r1, r3
 8049d18:	4413      	add	r3, r2
 8049d1a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8049d1e:	781b      	ldrb	r3, [r3, #0]
 8049d20:	b25b      	sxtb	r3, r3
 8049d22:	2b00      	cmp	r3, #0
 8049d24:	da15      	bge.n	8049d52 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8049d26:	7bfb      	ldrb	r3, [r7, #15]
 8049d28:	687a      	ldr	r2, [r7, #4]
 8049d2a:	211a      	movs	r1, #26
 8049d2c:	fb01 f303 	mul.w	r3, r1, r3
 8049d30:	4413      	add	r3, r2
 8049d32:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8049d36:	781a      	ldrb	r2, [r3, #0]
 8049d38:	68bb      	ldr	r3, [r7, #8]
 8049d3a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8049d3c:	7bfb      	ldrb	r3, [r7, #15]
 8049d3e:	687a      	ldr	r2, [r7, #4]
 8049d40:	211a      	movs	r1, #26
 8049d42:	fb01 f303 	mul.w	r3, r1, r3
 8049d46:	4413      	add	r3, r2
 8049d48:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8049d4c:	881a      	ldrh	r2, [r3, #0]
 8049d4e:	68bb      	ldr	r3, [r7, #8]
 8049d50:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8049d52:	68bb      	ldr	r3, [r7, #8]
 8049d54:	785b      	ldrb	r3, [r3, #1]
 8049d56:	4619      	mov	r1, r3
 8049d58:	6878      	ldr	r0, [r7, #4]
 8049d5a:	f001 ff2c 	bl	804bbb6 <USBH_AllocPipe>
 8049d5e:	4603      	mov	r3, r0
 8049d60:	461a      	mov	r2, r3
 8049d62:	68bb      	ldr	r3, [r7, #8]
 8049d64:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8049d66:	68bb      	ldr	r3, [r7, #8]
 8049d68:	7819      	ldrb	r1, [r3, #0]
 8049d6a:	68bb      	ldr	r3, [r7, #8]
 8049d6c:	7858      	ldrb	r0, [r3, #1]
 8049d6e:	687b      	ldr	r3, [r7, #4]
 8049d70:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8049d74:	687b      	ldr	r3, [r7, #4]
 8049d76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8049d7a:	68ba      	ldr	r2, [r7, #8]
 8049d7c:	8952      	ldrh	r2, [r2, #10]
 8049d7e:	9202      	str	r2, [sp, #8]
 8049d80:	2203      	movs	r2, #3
 8049d82:	9201      	str	r2, [sp, #4]
 8049d84:	9300      	str	r3, [sp, #0]
 8049d86:	4623      	mov	r3, r4
 8049d88:	4602      	mov	r2, r0
 8049d8a:	6878      	ldr	r0, [r7, #4]
 8049d8c:	f001 fee4 	bl	804bb58 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8049d90:	68bb      	ldr	r3, [r7, #8]
 8049d92:	781b      	ldrb	r3, [r3, #0]
 8049d94:	2200      	movs	r2, #0
 8049d96:	4619      	mov	r1, r3
 8049d98:	6878      	ldr	r0, [r7, #4]
 8049d9a:	f002 f9f9 	bl	804c190 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8049d9e:	2300      	movs	r3, #0
 8049da0:	2200      	movs	r2, #0
 8049da2:	210a      	movs	r1, #10
 8049da4:	6878      	ldr	r0, [r7, #4]
 8049da6:	f000 fbeb 	bl	804a580 <USBH_FindInterface>
 8049daa:	4603      	mov	r3, r0
 8049dac:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8049dae:	7bfb      	ldrb	r3, [r7, #15]
 8049db0:	2bff      	cmp	r3, #255	; 0xff
 8049db2:	d002      	beq.n	8049dba <USBH_CDC_InterfaceInit+0x11a>
 8049db4:	7bfb      	ldrb	r3, [r7, #15]
 8049db6:	2b01      	cmp	r3, #1
 8049db8:	d901      	bls.n	8049dbe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8049dba:	2302      	movs	r3, #2
 8049dbc:	e0c2      	b.n	8049f44 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8049dbe:	7bfb      	ldrb	r3, [r7, #15]
 8049dc0:	687a      	ldr	r2, [r7, #4]
 8049dc2:	211a      	movs	r1, #26
 8049dc4:	fb01 f303 	mul.w	r3, r1, r3
 8049dc8:	4413      	add	r3, r2
 8049dca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8049dce:	781b      	ldrb	r3, [r3, #0]
 8049dd0:	b25b      	sxtb	r3, r3
 8049dd2:	2b00      	cmp	r3, #0
 8049dd4:	da16      	bge.n	8049e04 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8049dd6:	7bfb      	ldrb	r3, [r7, #15]
 8049dd8:	687a      	ldr	r2, [r7, #4]
 8049dda:	211a      	movs	r1, #26
 8049ddc:	fb01 f303 	mul.w	r3, r1, r3
 8049de0:	4413      	add	r3, r2
 8049de2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8049de6:	781a      	ldrb	r2, [r3, #0]
 8049de8:	68bb      	ldr	r3, [r7, #8]
 8049dea:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8049dec:	7bfb      	ldrb	r3, [r7, #15]
 8049dee:	687a      	ldr	r2, [r7, #4]
 8049df0:	211a      	movs	r1, #26
 8049df2:	fb01 f303 	mul.w	r3, r1, r3
 8049df6:	4413      	add	r3, r2
 8049df8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8049dfc:	881a      	ldrh	r2, [r3, #0]
 8049dfe:	68bb      	ldr	r3, [r7, #8]
 8049e00:	835a      	strh	r2, [r3, #26]
 8049e02:	e015      	b.n	8049e30 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8049e04:	7bfb      	ldrb	r3, [r7, #15]
 8049e06:	687a      	ldr	r2, [r7, #4]
 8049e08:	211a      	movs	r1, #26
 8049e0a:	fb01 f303 	mul.w	r3, r1, r3
 8049e0e:	4413      	add	r3, r2
 8049e10:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8049e14:	781a      	ldrb	r2, [r3, #0]
 8049e16:	68bb      	ldr	r3, [r7, #8]
 8049e18:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8049e1a:	7bfb      	ldrb	r3, [r7, #15]
 8049e1c:	687a      	ldr	r2, [r7, #4]
 8049e1e:	211a      	movs	r1, #26
 8049e20:	fb01 f303 	mul.w	r3, r1, r3
 8049e24:	4413      	add	r3, r2
 8049e26:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8049e2a:	881a      	ldrh	r2, [r3, #0]
 8049e2c:	68bb      	ldr	r3, [r7, #8]
 8049e2e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8049e30:	7bfb      	ldrb	r3, [r7, #15]
 8049e32:	687a      	ldr	r2, [r7, #4]
 8049e34:	211a      	movs	r1, #26
 8049e36:	fb01 f303 	mul.w	r3, r1, r3
 8049e3a:	4413      	add	r3, r2
 8049e3c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8049e40:	781b      	ldrb	r3, [r3, #0]
 8049e42:	b25b      	sxtb	r3, r3
 8049e44:	2b00      	cmp	r3, #0
 8049e46:	da16      	bge.n	8049e76 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8049e48:	7bfb      	ldrb	r3, [r7, #15]
 8049e4a:	687a      	ldr	r2, [r7, #4]
 8049e4c:	211a      	movs	r1, #26
 8049e4e:	fb01 f303 	mul.w	r3, r1, r3
 8049e52:	4413      	add	r3, r2
 8049e54:	f203 3356 	addw	r3, r3, #854	; 0x356
 8049e58:	781a      	ldrb	r2, [r3, #0]
 8049e5a:	68bb      	ldr	r3, [r7, #8]
 8049e5c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8049e5e:	7bfb      	ldrb	r3, [r7, #15]
 8049e60:	687a      	ldr	r2, [r7, #4]
 8049e62:	211a      	movs	r1, #26
 8049e64:	fb01 f303 	mul.w	r3, r1, r3
 8049e68:	4413      	add	r3, r2
 8049e6a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8049e6e:	881a      	ldrh	r2, [r3, #0]
 8049e70:	68bb      	ldr	r3, [r7, #8]
 8049e72:	835a      	strh	r2, [r3, #26]
 8049e74:	e015      	b.n	8049ea2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8049e76:	7bfb      	ldrb	r3, [r7, #15]
 8049e78:	687a      	ldr	r2, [r7, #4]
 8049e7a:	211a      	movs	r1, #26
 8049e7c:	fb01 f303 	mul.w	r3, r1, r3
 8049e80:	4413      	add	r3, r2
 8049e82:	f203 3356 	addw	r3, r3, #854	; 0x356
 8049e86:	781a      	ldrb	r2, [r3, #0]
 8049e88:	68bb      	ldr	r3, [r7, #8]
 8049e8a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8049e8c:	7bfb      	ldrb	r3, [r7, #15]
 8049e8e:	687a      	ldr	r2, [r7, #4]
 8049e90:	211a      	movs	r1, #26
 8049e92:	fb01 f303 	mul.w	r3, r1, r3
 8049e96:	4413      	add	r3, r2
 8049e98:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8049e9c:	881a      	ldrh	r2, [r3, #0]
 8049e9e:	68bb      	ldr	r3, [r7, #8]
 8049ea0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8049ea2:	68bb      	ldr	r3, [r7, #8]
 8049ea4:	7b9b      	ldrb	r3, [r3, #14]
 8049ea6:	4619      	mov	r1, r3
 8049ea8:	6878      	ldr	r0, [r7, #4]
 8049eaa:	f001 fe84 	bl	804bbb6 <USBH_AllocPipe>
 8049eae:	4603      	mov	r3, r0
 8049eb0:	461a      	mov	r2, r3
 8049eb2:	68bb      	ldr	r3, [r7, #8]
 8049eb4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8049eb6:	68bb      	ldr	r3, [r7, #8]
 8049eb8:	7bdb      	ldrb	r3, [r3, #15]
 8049eba:	4619      	mov	r1, r3
 8049ebc:	6878      	ldr	r0, [r7, #4]
 8049ebe:	f001 fe7a 	bl	804bbb6 <USBH_AllocPipe>
 8049ec2:	4603      	mov	r3, r0
 8049ec4:	461a      	mov	r2, r3
 8049ec6:	68bb      	ldr	r3, [r7, #8]
 8049ec8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8049eca:	68bb      	ldr	r3, [r7, #8]
 8049ecc:	7b59      	ldrb	r1, [r3, #13]
 8049ece:	68bb      	ldr	r3, [r7, #8]
 8049ed0:	7b98      	ldrb	r0, [r3, #14]
 8049ed2:	687b      	ldr	r3, [r7, #4]
 8049ed4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8049ed8:	687b      	ldr	r3, [r7, #4]
 8049eda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8049ede:	68ba      	ldr	r2, [r7, #8]
 8049ee0:	8b12      	ldrh	r2, [r2, #24]
 8049ee2:	9202      	str	r2, [sp, #8]
 8049ee4:	2202      	movs	r2, #2
 8049ee6:	9201      	str	r2, [sp, #4]
 8049ee8:	9300      	str	r3, [sp, #0]
 8049eea:	4623      	mov	r3, r4
 8049eec:	4602      	mov	r2, r0
 8049eee:	6878      	ldr	r0, [r7, #4]
 8049ef0:	f001 fe32 	bl	804bb58 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8049ef4:	68bb      	ldr	r3, [r7, #8]
 8049ef6:	7b19      	ldrb	r1, [r3, #12]
 8049ef8:	68bb      	ldr	r3, [r7, #8]
 8049efa:	7bd8      	ldrb	r0, [r3, #15]
 8049efc:	687b      	ldr	r3, [r7, #4]
 8049efe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8049f02:	687b      	ldr	r3, [r7, #4]
 8049f04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8049f08:	68ba      	ldr	r2, [r7, #8]
 8049f0a:	8b52      	ldrh	r2, [r2, #26]
 8049f0c:	9202      	str	r2, [sp, #8]
 8049f0e:	2202      	movs	r2, #2
 8049f10:	9201      	str	r2, [sp, #4]
 8049f12:	9300      	str	r3, [sp, #0]
 8049f14:	4623      	mov	r3, r4
 8049f16:	4602      	mov	r2, r0
 8049f18:	6878      	ldr	r0, [r7, #4]
 8049f1a:	f001 fe1d 	bl	804bb58 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8049f1e:	68bb      	ldr	r3, [r7, #8]
 8049f20:	2200      	movs	r2, #0
 8049f22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8049f26:	68bb      	ldr	r3, [r7, #8]
 8049f28:	7b5b      	ldrb	r3, [r3, #13]
 8049f2a:	2200      	movs	r2, #0
 8049f2c:	4619      	mov	r1, r3
 8049f2e:	6878      	ldr	r0, [r7, #4]
 8049f30:	f002 f92e 	bl	804c190 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8049f34:	68bb      	ldr	r3, [r7, #8]
 8049f36:	7b1b      	ldrb	r3, [r3, #12]
 8049f38:	2200      	movs	r2, #0
 8049f3a:	4619      	mov	r1, r3
 8049f3c:	6878      	ldr	r0, [r7, #4]
 8049f3e:	f002 f927 	bl	804c190 <USBH_LL_SetToggle>

  return USBH_OK;
 8049f42:	2300      	movs	r3, #0
}
 8049f44:	4618      	mov	r0, r3
 8049f46:	3714      	adds	r7, #20
 8049f48:	46bd      	mov	sp, r7
 8049f4a:	bd90      	pop	{r4, r7, pc}

08049f4c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8049f4c:	b580      	push	{r7, lr}
 8049f4e:	b084      	sub	sp, #16
 8049f50:	af00      	add	r7, sp, #0
 8049f52:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8049f54:	687b      	ldr	r3, [r7, #4]
 8049f56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8049f5a:	69db      	ldr	r3, [r3, #28]
 8049f5c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8049f5e:	68fb      	ldr	r3, [r7, #12]
 8049f60:	781b      	ldrb	r3, [r3, #0]
 8049f62:	2b00      	cmp	r3, #0
 8049f64:	d00e      	beq.n	8049f84 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8049f66:	68fb      	ldr	r3, [r7, #12]
 8049f68:	781b      	ldrb	r3, [r3, #0]
 8049f6a:	4619      	mov	r1, r3
 8049f6c:	6878      	ldr	r0, [r7, #4]
 8049f6e:	f001 fe12 	bl	804bb96 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8049f72:	68fb      	ldr	r3, [r7, #12]
 8049f74:	781b      	ldrb	r3, [r3, #0]
 8049f76:	4619      	mov	r1, r3
 8049f78:	6878      	ldr	r0, [r7, #4]
 8049f7a:	f001 fe3d 	bl	804bbf8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8049f7e:	68fb      	ldr	r3, [r7, #12]
 8049f80:	2200      	movs	r2, #0
 8049f82:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8049f84:	68fb      	ldr	r3, [r7, #12]
 8049f86:	7b1b      	ldrb	r3, [r3, #12]
 8049f88:	2b00      	cmp	r3, #0
 8049f8a:	d00e      	beq.n	8049faa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8049f8c:	68fb      	ldr	r3, [r7, #12]
 8049f8e:	7b1b      	ldrb	r3, [r3, #12]
 8049f90:	4619      	mov	r1, r3
 8049f92:	6878      	ldr	r0, [r7, #4]
 8049f94:	f001 fdff 	bl	804bb96 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8049f98:	68fb      	ldr	r3, [r7, #12]
 8049f9a:	7b1b      	ldrb	r3, [r3, #12]
 8049f9c:	4619      	mov	r1, r3
 8049f9e:	6878      	ldr	r0, [r7, #4]
 8049fa0:	f001 fe2a 	bl	804bbf8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8049fa4:	68fb      	ldr	r3, [r7, #12]
 8049fa6:	2200      	movs	r2, #0
 8049fa8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8049faa:	68fb      	ldr	r3, [r7, #12]
 8049fac:	7b5b      	ldrb	r3, [r3, #13]
 8049fae:	2b00      	cmp	r3, #0
 8049fb0:	d00e      	beq.n	8049fd0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8049fb2:	68fb      	ldr	r3, [r7, #12]
 8049fb4:	7b5b      	ldrb	r3, [r3, #13]
 8049fb6:	4619      	mov	r1, r3
 8049fb8:	6878      	ldr	r0, [r7, #4]
 8049fba:	f001 fdec 	bl	804bb96 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8049fbe:	68fb      	ldr	r3, [r7, #12]
 8049fc0:	7b5b      	ldrb	r3, [r3, #13]
 8049fc2:	4619      	mov	r1, r3
 8049fc4:	6878      	ldr	r0, [r7, #4]
 8049fc6:	f001 fe17 	bl	804bbf8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8049fca:	68fb      	ldr	r3, [r7, #12]
 8049fcc:	2200      	movs	r2, #0
 8049fce:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8049fd0:	687b      	ldr	r3, [r7, #4]
 8049fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8049fd6:	69db      	ldr	r3, [r3, #28]
 8049fd8:	2b00      	cmp	r3, #0
 8049fda:	d00b      	beq.n	8049ff4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8049fdc:	687b      	ldr	r3, [r7, #4]
 8049fde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8049fe2:	69db      	ldr	r3, [r3, #28]
 8049fe4:	4618      	mov	r0, r3
 8049fe6:	f002 f989 	bl	804c2fc <free>
    phost->pActiveClass->pData = 0U;
 8049fea:	687b      	ldr	r3, [r7, #4]
 8049fec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8049ff0:	2200      	movs	r2, #0
 8049ff2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8049ff4:	2300      	movs	r3, #0
}
 8049ff6:	4618      	mov	r0, r3
 8049ff8:	3710      	adds	r7, #16
 8049ffa:	46bd      	mov	sp, r7
 8049ffc:	bd80      	pop	{r7, pc}

08049ffe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8049ffe:	b580      	push	{r7, lr}
 804a000:	b084      	sub	sp, #16
 804a002:	af00      	add	r7, sp, #0
 804a004:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a006:	687b      	ldr	r3, [r7, #4]
 804a008:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a00c:	69db      	ldr	r3, [r3, #28]
 804a00e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 804a010:	68fb      	ldr	r3, [r7, #12]
 804a012:	3340      	adds	r3, #64	; 0x40
 804a014:	4619      	mov	r1, r3
 804a016:	6878      	ldr	r0, [r7, #4]
 804a018:	f000 f8b1 	bl	804a17e <GetLineCoding>
 804a01c:	4603      	mov	r3, r0
 804a01e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 804a020:	7afb      	ldrb	r3, [r7, #11]
 804a022:	2b00      	cmp	r3, #0
 804a024:	d105      	bne.n	804a032 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 804a026:	687b      	ldr	r3, [r7, #4]
 804a028:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804a02c:	2102      	movs	r1, #2
 804a02e:	6878      	ldr	r0, [r7, #4]
 804a030:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 804a032:	7afb      	ldrb	r3, [r7, #11]
}
 804a034:	4618      	mov	r0, r3
 804a036:	3710      	adds	r7, #16
 804a038:	46bd      	mov	sp, r7
 804a03a:	bd80      	pop	{r7, pc}

0804a03c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 804a03c:	b580      	push	{r7, lr}
 804a03e:	b084      	sub	sp, #16
 804a040:	af00      	add	r7, sp, #0
 804a042:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 804a044:	2301      	movs	r3, #1
 804a046:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 804a048:	2300      	movs	r3, #0
 804a04a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a04c:	687b      	ldr	r3, [r7, #4]
 804a04e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a052:	69db      	ldr	r3, [r3, #28]
 804a054:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 804a056:	68bb      	ldr	r3, [r7, #8]
 804a058:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 804a05c:	2b04      	cmp	r3, #4
 804a05e:	d877      	bhi.n	804a150 <USBH_CDC_Process+0x114>
 804a060:	a201      	add	r2, pc, #4	; (adr r2, 804a068 <USBH_CDC_Process+0x2c>)
 804a062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a066:	bf00      	nop
 804a068:	0804a07d 	.word	0x0804a07d
 804a06c:	0804a083 	.word	0x0804a083
 804a070:	0804a0b3 	.word	0x0804a0b3
 804a074:	0804a127 	.word	0x0804a127
 804a078:	0804a135 	.word	0x0804a135
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 804a07c:	2300      	movs	r3, #0
 804a07e:	73fb      	strb	r3, [r7, #15]
      break;
 804a080:	e06d      	b.n	804a15e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 804a082:	68bb      	ldr	r3, [r7, #8]
 804a084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804a086:	4619      	mov	r1, r3
 804a088:	6878      	ldr	r0, [r7, #4]
 804a08a:	f000 f897 	bl	804a1bc <SetLineCoding>
 804a08e:	4603      	mov	r3, r0
 804a090:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804a092:	7bbb      	ldrb	r3, [r7, #14]
 804a094:	2b00      	cmp	r3, #0
 804a096:	d104      	bne.n	804a0a2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 804a098:	68bb      	ldr	r3, [r7, #8]
 804a09a:	2202      	movs	r2, #2
 804a09c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 804a0a0:	e058      	b.n	804a154 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 804a0a2:	7bbb      	ldrb	r3, [r7, #14]
 804a0a4:	2b01      	cmp	r3, #1
 804a0a6:	d055      	beq.n	804a154 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 804a0a8:	68bb      	ldr	r3, [r7, #8]
 804a0aa:	2204      	movs	r2, #4
 804a0ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 804a0b0:	e050      	b.n	804a154 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 804a0b2:	68bb      	ldr	r3, [r7, #8]
 804a0b4:	3340      	adds	r3, #64	; 0x40
 804a0b6:	4619      	mov	r1, r3
 804a0b8:	6878      	ldr	r0, [r7, #4]
 804a0ba:	f000 f860 	bl	804a17e <GetLineCoding>
 804a0be:	4603      	mov	r3, r0
 804a0c0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804a0c2:	7bbb      	ldrb	r3, [r7, #14]
 804a0c4:	2b00      	cmp	r3, #0
 804a0c6:	d126      	bne.n	804a116 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 804a0c8:	68bb      	ldr	r3, [r7, #8]
 804a0ca:	2200      	movs	r2, #0
 804a0cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 804a0d0:	68bb      	ldr	r3, [r7, #8]
 804a0d2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 804a0d6:	68bb      	ldr	r3, [r7, #8]
 804a0d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804a0da:	791b      	ldrb	r3, [r3, #4]
 804a0dc:	429a      	cmp	r2, r3
 804a0de:	d13b      	bne.n	804a158 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 804a0e0:	68bb      	ldr	r3, [r7, #8]
 804a0e2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 804a0e6:	68bb      	ldr	r3, [r7, #8]
 804a0e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804a0ea:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 804a0ec:	429a      	cmp	r2, r3
 804a0ee:	d133      	bne.n	804a158 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 804a0f0:	68bb      	ldr	r3, [r7, #8]
 804a0f2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 804a0f6:	68bb      	ldr	r3, [r7, #8]
 804a0f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804a0fa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 804a0fc:	429a      	cmp	r2, r3
 804a0fe:	d12b      	bne.n	804a158 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 804a100:	68bb      	ldr	r3, [r7, #8]
 804a102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804a104:	68bb      	ldr	r3, [r7, #8]
 804a106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804a108:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 804a10a:	429a      	cmp	r2, r3
 804a10c:	d124      	bne.n	804a158 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 804a10e:	6878      	ldr	r0, [r7, #4]
 804a110:	f000 f958 	bl	804a3c4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 804a114:	e020      	b.n	804a158 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 804a116:	7bbb      	ldrb	r3, [r7, #14]
 804a118:	2b01      	cmp	r3, #1
 804a11a:	d01d      	beq.n	804a158 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 804a11c:	68bb      	ldr	r3, [r7, #8]
 804a11e:	2204      	movs	r2, #4
 804a120:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 804a124:	e018      	b.n	804a158 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 804a126:	6878      	ldr	r0, [r7, #4]
 804a128:	f000 f867 	bl	804a1fa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 804a12c:	6878      	ldr	r0, [r7, #4]
 804a12e:	f000 f8da 	bl	804a2e6 <CDC_ProcessReception>
      break;
 804a132:	e014      	b.n	804a15e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 804a134:	2100      	movs	r1, #0
 804a136:	6878      	ldr	r0, [r7, #4]
 804a138:	f000 ffef 	bl	804b11a <USBH_ClrFeature>
 804a13c:	4603      	mov	r3, r0
 804a13e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804a140:	7bbb      	ldrb	r3, [r7, #14]
 804a142:	2b00      	cmp	r3, #0
 804a144:	d10a      	bne.n	804a15c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 804a146:	68bb      	ldr	r3, [r7, #8]
 804a148:	2200      	movs	r2, #0
 804a14a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 804a14e:	e005      	b.n	804a15c <USBH_CDC_Process+0x120>

    default:
      break;
 804a150:	bf00      	nop
 804a152:	e004      	b.n	804a15e <USBH_CDC_Process+0x122>
      break;
 804a154:	bf00      	nop
 804a156:	e002      	b.n	804a15e <USBH_CDC_Process+0x122>
      break;
 804a158:	bf00      	nop
 804a15a:	e000      	b.n	804a15e <USBH_CDC_Process+0x122>
      break;
 804a15c:	bf00      	nop

  }

  return status;
 804a15e:	7bfb      	ldrb	r3, [r7, #15]
}
 804a160:	4618      	mov	r0, r3
 804a162:	3710      	adds	r7, #16
 804a164:	46bd      	mov	sp, r7
 804a166:	bd80      	pop	{r7, pc}

0804a168 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 804a168:	b480      	push	{r7}
 804a16a:	b083      	sub	sp, #12
 804a16c:	af00      	add	r7, sp, #0
 804a16e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 804a170:	2300      	movs	r3, #0
}
 804a172:	4618      	mov	r0, r3
 804a174:	370c      	adds	r7, #12
 804a176:	46bd      	mov	sp, r7
 804a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a17c:	4770      	bx	lr

0804a17e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 804a17e:	b580      	push	{r7, lr}
 804a180:	b082      	sub	sp, #8
 804a182:	af00      	add	r7, sp, #0
 804a184:	6078      	str	r0, [r7, #4]
 804a186:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 804a188:	687b      	ldr	r3, [r7, #4]
 804a18a:	22a1      	movs	r2, #161	; 0xa1
 804a18c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 804a18e:	687b      	ldr	r3, [r7, #4]
 804a190:	2221      	movs	r2, #33	; 0x21
 804a192:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 804a194:	687b      	ldr	r3, [r7, #4]
 804a196:	2200      	movs	r2, #0
 804a198:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 804a19a:	687b      	ldr	r3, [r7, #4]
 804a19c:	2200      	movs	r2, #0
 804a19e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 804a1a0:	687b      	ldr	r3, [r7, #4]
 804a1a2:	2207      	movs	r2, #7
 804a1a4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 804a1a6:	683b      	ldr	r3, [r7, #0]
 804a1a8:	2207      	movs	r2, #7
 804a1aa:	4619      	mov	r1, r3
 804a1ac:	6878      	ldr	r0, [r7, #4]
 804a1ae:	f001 fa81 	bl	804b6b4 <USBH_CtlReq>
 804a1b2:	4603      	mov	r3, r0
}
 804a1b4:	4618      	mov	r0, r3
 804a1b6:	3708      	adds	r7, #8
 804a1b8:	46bd      	mov	sp, r7
 804a1ba:	bd80      	pop	{r7, pc}

0804a1bc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 804a1bc:	b580      	push	{r7, lr}
 804a1be:	b082      	sub	sp, #8
 804a1c0:	af00      	add	r7, sp, #0
 804a1c2:	6078      	str	r0, [r7, #4]
 804a1c4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 804a1c6:	687b      	ldr	r3, [r7, #4]
 804a1c8:	2221      	movs	r2, #33	; 0x21
 804a1ca:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 804a1cc:	687b      	ldr	r3, [r7, #4]
 804a1ce:	2220      	movs	r2, #32
 804a1d0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 804a1d2:	687b      	ldr	r3, [r7, #4]
 804a1d4:	2200      	movs	r2, #0
 804a1d6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 804a1d8:	687b      	ldr	r3, [r7, #4]
 804a1da:	2200      	movs	r2, #0
 804a1dc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 804a1de:	687b      	ldr	r3, [r7, #4]
 804a1e0:	2207      	movs	r2, #7
 804a1e2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 804a1e4:	683b      	ldr	r3, [r7, #0]
 804a1e6:	2207      	movs	r2, #7
 804a1e8:	4619      	mov	r1, r3
 804a1ea:	6878      	ldr	r0, [r7, #4]
 804a1ec:	f001 fa62 	bl	804b6b4 <USBH_CtlReq>
 804a1f0:	4603      	mov	r3, r0
}
 804a1f2:	4618      	mov	r0, r3
 804a1f4:	3708      	adds	r7, #8
 804a1f6:	46bd      	mov	sp, r7
 804a1f8:	bd80      	pop	{r7, pc}

0804a1fa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 804a1fa:	b580      	push	{r7, lr}
 804a1fc:	b086      	sub	sp, #24
 804a1fe:	af02      	add	r7, sp, #8
 804a200:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a202:	687b      	ldr	r3, [r7, #4]
 804a204:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a208:	69db      	ldr	r3, [r3, #28]
 804a20a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804a20c:	2300      	movs	r3, #0
 804a20e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 804a210:	68fb      	ldr	r3, [r7, #12]
 804a212:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 804a216:	2b01      	cmp	r3, #1
 804a218:	d002      	beq.n	804a220 <CDC_ProcessTransmission+0x26>
 804a21a:	2b02      	cmp	r3, #2
 804a21c:	d023      	beq.n	804a266 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 804a21e:	e05e      	b.n	804a2de <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 804a220:	68fb      	ldr	r3, [r7, #12]
 804a222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a224:	68fa      	ldr	r2, [r7, #12]
 804a226:	8b12      	ldrh	r2, [r2, #24]
 804a228:	4293      	cmp	r3, r2
 804a22a:	d90b      	bls.n	804a244 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 804a22c:	68fb      	ldr	r3, [r7, #12]
 804a22e:	69d9      	ldr	r1, [r3, #28]
 804a230:	68fb      	ldr	r3, [r7, #12]
 804a232:	8b1a      	ldrh	r2, [r3, #24]
 804a234:	68fb      	ldr	r3, [r7, #12]
 804a236:	7b5b      	ldrb	r3, [r3, #13]
 804a238:	2001      	movs	r0, #1
 804a23a:	9000      	str	r0, [sp, #0]
 804a23c:	6878      	ldr	r0, [r7, #4]
 804a23e:	f001 fc48 	bl	804bad2 <USBH_BulkSendData>
 804a242:	e00b      	b.n	804a25c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 804a244:	68fb      	ldr	r3, [r7, #12]
 804a246:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 804a248:	68fb      	ldr	r3, [r7, #12]
 804a24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 804a24c:	b29a      	uxth	r2, r3
 804a24e:	68fb      	ldr	r3, [r7, #12]
 804a250:	7b5b      	ldrb	r3, [r3, #13]
 804a252:	2001      	movs	r0, #1
 804a254:	9000      	str	r0, [sp, #0]
 804a256:	6878      	ldr	r0, [r7, #4]
 804a258:	f001 fc3b 	bl	804bad2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 804a25c:	68fb      	ldr	r3, [r7, #12]
 804a25e:	2202      	movs	r2, #2
 804a260:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804a264:	e03b      	b.n	804a2de <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 804a266:	68fb      	ldr	r3, [r7, #12]
 804a268:	7b5b      	ldrb	r3, [r3, #13]
 804a26a:	4619      	mov	r1, r3
 804a26c:	6878      	ldr	r0, [r7, #4]
 804a26e:	f001 ff65 	bl	804c13c <USBH_LL_GetURBState>
 804a272:	4603      	mov	r3, r0
 804a274:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 804a276:	7afb      	ldrb	r3, [r7, #11]
 804a278:	2b01      	cmp	r3, #1
 804a27a:	d128      	bne.n	804a2ce <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 804a27c:	68fb      	ldr	r3, [r7, #12]
 804a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a280:	68fa      	ldr	r2, [r7, #12]
 804a282:	8b12      	ldrh	r2, [r2, #24]
 804a284:	4293      	cmp	r3, r2
 804a286:	d90e      	bls.n	804a2a6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 804a288:	68fb      	ldr	r3, [r7, #12]
 804a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a28c:	68fa      	ldr	r2, [r7, #12]
 804a28e:	8b12      	ldrh	r2, [r2, #24]
 804a290:	1a9a      	subs	r2, r3, r2
 804a292:	68fb      	ldr	r3, [r7, #12]
 804a294:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 804a296:	68fb      	ldr	r3, [r7, #12]
 804a298:	69db      	ldr	r3, [r3, #28]
 804a29a:	68fa      	ldr	r2, [r7, #12]
 804a29c:	8b12      	ldrh	r2, [r2, #24]
 804a29e:	441a      	add	r2, r3
 804a2a0:	68fb      	ldr	r3, [r7, #12]
 804a2a2:	61da      	str	r2, [r3, #28]
 804a2a4:	e002      	b.n	804a2ac <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 804a2a6:	68fb      	ldr	r3, [r7, #12]
 804a2a8:	2200      	movs	r2, #0
 804a2aa:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 804a2ac:	68fb      	ldr	r3, [r7, #12]
 804a2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a2b0:	2b00      	cmp	r3, #0
 804a2b2:	d004      	beq.n	804a2be <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 804a2b4:	68fb      	ldr	r3, [r7, #12]
 804a2b6:	2201      	movs	r2, #1
 804a2b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804a2bc:	e00e      	b.n	804a2dc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 804a2be:	68fb      	ldr	r3, [r7, #12]
 804a2c0:	2200      	movs	r2, #0
 804a2c2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 804a2c6:	6878      	ldr	r0, [r7, #4]
 804a2c8:	f000 f868 	bl	804a39c <USBH_CDC_TransmitCallback>
      break;
 804a2cc:	e006      	b.n	804a2dc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 804a2ce:	7afb      	ldrb	r3, [r7, #11]
 804a2d0:	2b02      	cmp	r3, #2
 804a2d2:	d103      	bne.n	804a2dc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 804a2d4:	68fb      	ldr	r3, [r7, #12]
 804a2d6:	2201      	movs	r2, #1
 804a2d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804a2dc:	bf00      	nop
  }
}
 804a2de:	bf00      	nop
 804a2e0:	3710      	adds	r7, #16
 804a2e2:	46bd      	mov	sp, r7
 804a2e4:	bd80      	pop	{r7, pc}

0804a2e6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 804a2e6:	b580      	push	{r7, lr}
 804a2e8:	b086      	sub	sp, #24
 804a2ea:	af00      	add	r7, sp, #0
 804a2ec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a2ee:	687b      	ldr	r3, [r7, #4]
 804a2f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a2f4:	69db      	ldr	r3, [r3, #28]
 804a2f6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804a2f8:	2300      	movs	r3, #0
 804a2fa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 804a2fc:	697b      	ldr	r3, [r7, #20]
 804a2fe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 804a302:	2b03      	cmp	r3, #3
 804a304:	d002      	beq.n	804a30c <CDC_ProcessReception+0x26>
 804a306:	2b04      	cmp	r3, #4
 804a308:	d00e      	beq.n	804a328 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 804a30a:	e043      	b.n	804a394 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 804a30c:	697b      	ldr	r3, [r7, #20]
 804a30e:	6a19      	ldr	r1, [r3, #32]
 804a310:	697b      	ldr	r3, [r7, #20]
 804a312:	8b5a      	ldrh	r2, [r3, #26]
 804a314:	697b      	ldr	r3, [r7, #20]
 804a316:	7b1b      	ldrb	r3, [r3, #12]
 804a318:	6878      	ldr	r0, [r7, #4]
 804a31a:	f001 fbff 	bl	804bb1c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 804a31e:	697b      	ldr	r3, [r7, #20]
 804a320:	2204      	movs	r2, #4
 804a322:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 804a326:	e035      	b.n	804a394 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 804a328:	697b      	ldr	r3, [r7, #20]
 804a32a:	7b1b      	ldrb	r3, [r3, #12]
 804a32c:	4619      	mov	r1, r3
 804a32e:	6878      	ldr	r0, [r7, #4]
 804a330:	f001 ff04 	bl	804c13c <USBH_LL_GetURBState>
 804a334:	4603      	mov	r3, r0
 804a336:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 804a338:	7cfb      	ldrb	r3, [r7, #19]
 804a33a:	2b01      	cmp	r3, #1
 804a33c:	d129      	bne.n	804a392 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 804a33e:	697b      	ldr	r3, [r7, #20]
 804a340:	7b1b      	ldrb	r3, [r3, #12]
 804a342:	4619      	mov	r1, r3
 804a344:	6878      	ldr	r0, [r7, #4]
 804a346:	f001 fe67 	bl	804c018 <USBH_LL_GetLastXferSize>
 804a34a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 804a34c:	697b      	ldr	r3, [r7, #20]
 804a34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804a350:	68fa      	ldr	r2, [r7, #12]
 804a352:	429a      	cmp	r2, r3
 804a354:	d016      	beq.n	804a384 <CDC_ProcessReception+0x9e>
 804a356:	697b      	ldr	r3, [r7, #20]
 804a358:	8b5b      	ldrh	r3, [r3, #26]
 804a35a:	461a      	mov	r2, r3
 804a35c:	68fb      	ldr	r3, [r7, #12]
 804a35e:	4293      	cmp	r3, r2
 804a360:	d910      	bls.n	804a384 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 804a362:	697b      	ldr	r3, [r7, #20]
 804a364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804a366:	68fb      	ldr	r3, [r7, #12]
 804a368:	1ad2      	subs	r2, r2, r3
 804a36a:	697b      	ldr	r3, [r7, #20]
 804a36c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 804a36e:	697b      	ldr	r3, [r7, #20]
 804a370:	6a1a      	ldr	r2, [r3, #32]
 804a372:	68fb      	ldr	r3, [r7, #12]
 804a374:	441a      	add	r2, r3
 804a376:	697b      	ldr	r3, [r7, #20]
 804a378:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 804a37a:	697b      	ldr	r3, [r7, #20]
 804a37c:	2203      	movs	r2, #3
 804a37e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 804a382:	e006      	b.n	804a392 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 804a384:	697b      	ldr	r3, [r7, #20]
 804a386:	2200      	movs	r2, #0
 804a388:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 804a38c:	6878      	ldr	r0, [r7, #4]
 804a38e:	f000 f80f 	bl	804a3b0 <USBH_CDC_ReceiveCallback>
      break;
 804a392:	bf00      	nop
  }
}
 804a394:	bf00      	nop
 804a396:	3718      	adds	r7, #24
 804a398:	46bd      	mov	sp, r7
 804a39a:	bd80      	pop	{r7, pc}

0804a39c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 804a39c:	b480      	push	{r7}
 804a39e:	b083      	sub	sp, #12
 804a3a0:	af00      	add	r7, sp, #0
 804a3a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804a3a4:	bf00      	nop
 804a3a6:	370c      	adds	r7, #12
 804a3a8:	46bd      	mov	sp, r7
 804a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a3ae:	4770      	bx	lr

0804a3b0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 804a3b0:	b480      	push	{r7}
 804a3b2:	b083      	sub	sp, #12
 804a3b4:	af00      	add	r7, sp, #0
 804a3b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804a3b8:	bf00      	nop
 804a3ba:	370c      	adds	r7, #12
 804a3bc:	46bd      	mov	sp, r7
 804a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a3c2:	4770      	bx	lr

0804a3c4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 804a3c4:	b480      	push	{r7}
 804a3c6:	b083      	sub	sp, #12
 804a3c8:	af00      	add	r7, sp, #0
 804a3ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804a3cc:	bf00      	nop
 804a3ce:	370c      	adds	r7, #12
 804a3d0:	46bd      	mov	sp, r7
 804a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a3d6:	4770      	bx	lr

0804a3d8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 804a3d8:	b580      	push	{r7, lr}
 804a3da:	b084      	sub	sp, #16
 804a3dc:	af00      	add	r7, sp, #0
 804a3de:	60f8      	str	r0, [r7, #12]
 804a3e0:	60b9      	str	r1, [r7, #8]
 804a3e2:	4613      	mov	r3, r2
 804a3e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 804a3e6:	68fb      	ldr	r3, [r7, #12]
 804a3e8:	2b00      	cmp	r3, #0
 804a3ea:	d101      	bne.n	804a3f0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 804a3ec:	2302      	movs	r3, #2
 804a3ee:	e029      	b.n	804a444 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 804a3f0:	68fb      	ldr	r3, [r7, #12]
 804a3f2:	79fa      	ldrb	r2, [r7, #7]
 804a3f4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 804a3f8:	68fb      	ldr	r3, [r7, #12]
 804a3fa:	2200      	movs	r2, #0
 804a3fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 804a400:	68fb      	ldr	r3, [r7, #12]
 804a402:	2200      	movs	r2, #0
 804a404:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 804a408:	68f8      	ldr	r0, [r7, #12]
 804a40a:	f000 f81f 	bl	804a44c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 804a40e:	68fb      	ldr	r3, [r7, #12]
 804a410:	2200      	movs	r2, #0
 804a412:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 804a416:	68fb      	ldr	r3, [r7, #12]
 804a418:	2200      	movs	r2, #0
 804a41a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 804a41e:	68fb      	ldr	r3, [r7, #12]
 804a420:	2200      	movs	r2, #0
 804a422:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 804a426:	68fb      	ldr	r3, [r7, #12]
 804a428:	2200      	movs	r2, #0
 804a42a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 804a42e:	68bb      	ldr	r3, [r7, #8]
 804a430:	2b00      	cmp	r3, #0
 804a432:	d003      	beq.n	804a43c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 804a434:	68fb      	ldr	r3, [r7, #12]
 804a436:	68ba      	ldr	r2, [r7, #8]
 804a438:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 804a43c:	68f8      	ldr	r0, [r7, #12]
 804a43e:	f001 fd2d 	bl	804be9c <USBH_LL_Init>

  return USBH_OK;
 804a442:	2300      	movs	r3, #0
}
 804a444:	4618      	mov	r0, r3
 804a446:	3710      	adds	r7, #16
 804a448:	46bd      	mov	sp, r7
 804a44a:	bd80      	pop	{r7, pc}

0804a44c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 804a44c:	b480      	push	{r7}
 804a44e:	b085      	sub	sp, #20
 804a450:	af00      	add	r7, sp, #0
 804a452:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 804a454:	2300      	movs	r3, #0
 804a456:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 804a458:	2300      	movs	r3, #0
 804a45a:	60fb      	str	r3, [r7, #12]
 804a45c:	e009      	b.n	804a472 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 804a45e:	687a      	ldr	r2, [r7, #4]
 804a460:	68fb      	ldr	r3, [r7, #12]
 804a462:	33e0      	adds	r3, #224	; 0xe0
 804a464:	009b      	lsls	r3, r3, #2
 804a466:	4413      	add	r3, r2
 804a468:	2200      	movs	r2, #0
 804a46a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 804a46c:	68fb      	ldr	r3, [r7, #12]
 804a46e:	3301      	adds	r3, #1
 804a470:	60fb      	str	r3, [r7, #12]
 804a472:	68fb      	ldr	r3, [r7, #12]
 804a474:	2b0f      	cmp	r3, #15
 804a476:	d9f2      	bls.n	804a45e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 804a478:	2300      	movs	r3, #0
 804a47a:	60fb      	str	r3, [r7, #12]
 804a47c:	e009      	b.n	804a492 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 804a47e:	687a      	ldr	r2, [r7, #4]
 804a480:	68fb      	ldr	r3, [r7, #12]
 804a482:	4413      	add	r3, r2
 804a484:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804a488:	2200      	movs	r2, #0
 804a48a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 804a48c:	68fb      	ldr	r3, [r7, #12]
 804a48e:	3301      	adds	r3, #1
 804a490:	60fb      	str	r3, [r7, #12]
 804a492:	68fb      	ldr	r3, [r7, #12]
 804a494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804a498:	d3f1      	bcc.n	804a47e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 804a49a:	687b      	ldr	r3, [r7, #4]
 804a49c:	2200      	movs	r2, #0
 804a49e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 804a4a0:	687b      	ldr	r3, [r7, #4]
 804a4a2:	2200      	movs	r2, #0
 804a4a4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 804a4a6:	687b      	ldr	r3, [r7, #4]
 804a4a8:	2201      	movs	r2, #1
 804a4aa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 804a4ac:	687b      	ldr	r3, [r7, #4]
 804a4ae:	2200      	movs	r2, #0
 804a4b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 804a4b4:	687b      	ldr	r3, [r7, #4]
 804a4b6:	2201      	movs	r2, #1
 804a4b8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 804a4ba:	687b      	ldr	r3, [r7, #4]
 804a4bc:	2240      	movs	r2, #64	; 0x40
 804a4be:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 804a4c0:	687b      	ldr	r3, [r7, #4]
 804a4c2:	2200      	movs	r2, #0
 804a4c4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 804a4c6:	687b      	ldr	r3, [r7, #4]
 804a4c8:	2200      	movs	r2, #0
 804a4ca:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 804a4ce:	687b      	ldr	r3, [r7, #4]
 804a4d0:	2201      	movs	r2, #1
 804a4d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 804a4d6:	687b      	ldr	r3, [r7, #4]
 804a4d8:	2200      	movs	r2, #0
 804a4da:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 804a4de:	687b      	ldr	r3, [r7, #4]
 804a4e0:	2200      	movs	r2, #0
 804a4e2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 804a4e6:	2300      	movs	r3, #0
}
 804a4e8:	4618      	mov	r0, r3
 804a4ea:	3714      	adds	r7, #20
 804a4ec:	46bd      	mov	sp, r7
 804a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a4f2:	4770      	bx	lr

0804a4f4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 804a4f4:	b480      	push	{r7}
 804a4f6:	b085      	sub	sp, #20
 804a4f8:	af00      	add	r7, sp, #0
 804a4fa:	6078      	str	r0, [r7, #4]
 804a4fc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 804a4fe:	2300      	movs	r3, #0
 804a500:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 804a502:	683b      	ldr	r3, [r7, #0]
 804a504:	2b00      	cmp	r3, #0
 804a506:	d016      	beq.n	804a536 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 804a508:	687b      	ldr	r3, [r7, #4]
 804a50a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804a50e:	2b00      	cmp	r3, #0
 804a510:	d10e      	bne.n	804a530 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 804a512:	687b      	ldr	r3, [r7, #4]
 804a514:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804a518:	1c59      	adds	r1, r3, #1
 804a51a:	687a      	ldr	r2, [r7, #4]
 804a51c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 804a520:	687a      	ldr	r2, [r7, #4]
 804a522:	33de      	adds	r3, #222	; 0xde
 804a524:	6839      	ldr	r1, [r7, #0]
 804a526:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 804a52a:	2300      	movs	r3, #0
 804a52c:	73fb      	strb	r3, [r7, #15]
 804a52e:	e004      	b.n	804a53a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 804a530:	2302      	movs	r3, #2
 804a532:	73fb      	strb	r3, [r7, #15]
 804a534:	e001      	b.n	804a53a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 804a536:	2302      	movs	r3, #2
 804a538:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804a53a:	7bfb      	ldrb	r3, [r7, #15]
}
 804a53c:	4618      	mov	r0, r3
 804a53e:	3714      	adds	r7, #20
 804a540:	46bd      	mov	sp, r7
 804a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a546:	4770      	bx	lr

0804a548 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 804a548:	b480      	push	{r7}
 804a54a:	b085      	sub	sp, #20
 804a54c:	af00      	add	r7, sp, #0
 804a54e:	6078      	str	r0, [r7, #4]
 804a550:	460b      	mov	r3, r1
 804a552:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 804a554:	2300      	movs	r3, #0
 804a556:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 804a558:	687b      	ldr	r3, [r7, #4]
 804a55a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 804a55e:	78fa      	ldrb	r2, [r7, #3]
 804a560:	429a      	cmp	r2, r3
 804a562:	d204      	bcs.n	804a56e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 804a564:	687b      	ldr	r3, [r7, #4]
 804a566:	78fa      	ldrb	r2, [r7, #3]
 804a568:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 804a56c:	e001      	b.n	804a572 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 804a56e:	2302      	movs	r3, #2
 804a570:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804a572:	7bfb      	ldrb	r3, [r7, #15]
}
 804a574:	4618      	mov	r0, r3
 804a576:	3714      	adds	r7, #20
 804a578:	46bd      	mov	sp, r7
 804a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a57e:	4770      	bx	lr

0804a580 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 804a580:	b480      	push	{r7}
 804a582:	b087      	sub	sp, #28
 804a584:	af00      	add	r7, sp, #0
 804a586:	6078      	str	r0, [r7, #4]
 804a588:	4608      	mov	r0, r1
 804a58a:	4611      	mov	r1, r2
 804a58c:	461a      	mov	r2, r3
 804a58e:	4603      	mov	r3, r0
 804a590:	70fb      	strb	r3, [r7, #3]
 804a592:	460b      	mov	r3, r1
 804a594:	70bb      	strb	r3, [r7, #2]
 804a596:	4613      	mov	r3, r2
 804a598:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 804a59a:	2300      	movs	r3, #0
 804a59c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 804a59e:	2300      	movs	r3, #0
 804a5a0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 804a5a2:	687b      	ldr	r3, [r7, #4]
 804a5a4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 804a5a8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 804a5aa:	e025      	b.n	804a5f8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 804a5ac:	7dfb      	ldrb	r3, [r7, #23]
 804a5ae:	221a      	movs	r2, #26
 804a5b0:	fb02 f303 	mul.w	r3, r2, r3
 804a5b4:	3308      	adds	r3, #8
 804a5b6:	68fa      	ldr	r2, [r7, #12]
 804a5b8:	4413      	add	r3, r2
 804a5ba:	3302      	adds	r3, #2
 804a5bc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 804a5be:	693b      	ldr	r3, [r7, #16]
 804a5c0:	795b      	ldrb	r3, [r3, #5]
 804a5c2:	78fa      	ldrb	r2, [r7, #3]
 804a5c4:	429a      	cmp	r2, r3
 804a5c6:	d002      	beq.n	804a5ce <USBH_FindInterface+0x4e>
 804a5c8:	78fb      	ldrb	r3, [r7, #3]
 804a5ca:	2bff      	cmp	r3, #255	; 0xff
 804a5cc:	d111      	bne.n	804a5f2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804a5ce:	693b      	ldr	r3, [r7, #16]
 804a5d0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 804a5d2:	78ba      	ldrb	r2, [r7, #2]
 804a5d4:	429a      	cmp	r2, r3
 804a5d6:	d002      	beq.n	804a5de <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804a5d8:	78bb      	ldrb	r3, [r7, #2]
 804a5da:	2bff      	cmp	r3, #255	; 0xff
 804a5dc:	d109      	bne.n	804a5f2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 804a5de:	693b      	ldr	r3, [r7, #16]
 804a5e0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804a5e2:	787a      	ldrb	r2, [r7, #1]
 804a5e4:	429a      	cmp	r2, r3
 804a5e6:	d002      	beq.n	804a5ee <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 804a5e8:	787b      	ldrb	r3, [r7, #1]
 804a5ea:	2bff      	cmp	r3, #255	; 0xff
 804a5ec:	d101      	bne.n	804a5f2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 804a5ee:	7dfb      	ldrb	r3, [r7, #23]
 804a5f0:	e006      	b.n	804a600 <USBH_FindInterface+0x80>
    }
    if_ix++;
 804a5f2:	7dfb      	ldrb	r3, [r7, #23]
 804a5f4:	3301      	adds	r3, #1
 804a5f6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 804a5f8:	7dfb      	ldrb	r3, [r7, #23]
 804a5fa:	2b01      	cmp	r3, #1
 804a5fc:	d9d6      	bls.n	804a5ac <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 804a5fe:	23ff      	movs	r3, #255	; 0xff
}
 804a600:	4618      	mov	r0, r3
 804a602:	371c      	adds	r7, #28
 804a604:	46bd      	mov	sp, r7
 804a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a60a:	4770      	bx	lr

0804a60c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 804a60c:	b580      	push	{r7, lr}
 804a60e:	b082      	sub	sp, #8
 804a610:	af00      	add	r7, sp, #0
 804a612:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 804a614:	6878      	ldr	r0, [r7, #4]
 804a616:	f001 fc87 	bl	804bf28 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 804a61a:	2101      	movs	r1, #1
 804a61c:	6878      	ldr	r0, [r7, #4]
 804a61e:	f001 fda0 	bl	804c162 <USBH_LL_DriverVBUS>

  return USBH_OK;
 804a622:	2300      	movs	r3, #0
}
 804a624:	4618      	mov	r0, r3
 804a626:	3708      	adds	r7, #8
 804a628:	46bd      	mov	sp, r7
 804a62a:	bd80      	pop	{r7, pc}

0804a62c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 804a62c:	b580      	push	{r7, lr}
 804a62e:	b088      	sub	sp, #32
 804a630:	af04      	add	r7, sp, #16
 804a632:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 804a634:	2302      	movs	r3, #2
 804a636:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 804a638:	2300      	movs	r3, #0
 804a63a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 804a63c:	687b      	ldr	r3, [r7, #4]
 804a63e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 804a642:	b2db      	uxtb	r3, r3
 804a644:	2b01      	cmp	r3, #1
 804a646:	d102      	bne.n	804a64e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 804a648:	687b      	ldr	r3, [r7, #4]
 804a64a:	2203      	movs	r2, #3
 804a64c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 804a64e:	687b      	ldr	r3, [r7, #4]
 804a650:	781b      	ldrb	r3, [r3, #0]
 804a652:	b2db      	uxtb	r3, r3
 804a654:	2b0b      	cmp	r3, #11
 804a656:	f200 81be 	bhi.w	804a9d6 <USBH_Process+0x3aa>
 804a65a:	a201      	add	r2, pc, #4	; (adr r2, 804a660 <USBH_Process+0x34>)
 804a65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a660:	0804a691 	.word	0x0804a691
 804a664:	0804a6c3 	.word	0x0804a6c3
 804a668:	0804a72b 	.word	0x0804a72b
 804a66c:	0804a971 	.word	0x0804a971
 804a670:	0804a9d7 	.word	0x0804a9d7
 804a674:	0804a7cf 	.word	0x0804a7cf
 804a678:	0804a917 	.word	0x0804a917
 804a67c:	0804a805 	.word	0x0804a805
 804a680:	0804a825 	.word	0x0804a825
 804a684:	0804a845 	.word	0x0804a845
 804a688:	0804a889 	.word	0x0804a889
 804a68c:	0804a959 	.word	0x0804a959
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 804a690:	687b      	ldr	r3, [r7, #4]
 804a692:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 804a696:	b2db      	uxtb	r3, r3
 804a698:	2b00      	cmp	r3, #0
 804a69a:	f000 819e 	beq.w	804a9da <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 804a69e:	687b      	ldr	r3, [r7, #4]
 804a6a0:	2201      	movs	r2, #1
 804a6a2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 804a6a4:	20c8      	movs	r0, #200	; 0xc8
 804a6a6:	f001 fda3 	bl	804c1f0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 804a6aa:	6878      	ldr	r0, [r7, #4]
 804a6ac:	f001 fc99 	bl	804bfe2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 804a6b0:	687b      	ldr	r3, [r7, #4]
 804a6b2:	2200      	movs	r2, #0
 804a6b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 804a6b8:	687b      	ldr	r3, [r7, #4]
 804a6ba:	2200      	movs	r2, #0
 804a6bc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804a6c0:	e18b      	b.n	804a9da <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 804a6c2:	687b      	ldr	r3, [r7, #4]
 804a6c4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 804a6c8:	2b01      	cmp	r3, #1
 804a6ca:	d107      	bne.n	804a6dc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 804a6cc:	687b      	ldr	r3, [r7, #4]
 804a6ce:	2200      	movs	r2, #0
 804a6d0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 804a6d4:	687b      	ldr	r3, [r7, #4]
 804a6d6:	2202      	movs	r2, #2
 804a6d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804a6da:	e18d      	b.n	804a9f8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 804a6dc:	687b      	ldr	r3, [r7, #4]
 804a6de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 804a6e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804a6e6:	d914      	bls.n	804a712 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 804a6e8:	687b      	ldr	r3, [r7, #4]
 804a6ea:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 804a6ee:	3301      	adds	r3, #1
 804a6f0:	b2da      	uxtb	r2, r3
 804a6f2:	687b      	ldr	r3, [r7, #4]
 804a6f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 804a6f8:	687b      	ldr	r3, [r7, #4]
 804a6fa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 804a6fe:	2b03      	cmp	r3, #3
 804a700:	d903      	bls.n	804a70a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 804a702:	687b      	ldr	r3, [r7, #4]
 804a704:	220d      	movs	r2, #13
 804a706:	701a      	strb	r2, [r3, #0]
      break;
 804a708:	e176      	b.n	804a9f8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 804a70a:	687b      	ldr	r3, [r7, #4]
 804a70c:	2200      	movs	r2, #0
 804a70e:	701a      	strb	r2, [r3, #0]
      break;
 804a710:	e172      	b.n	804a9f8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 804a712:	687b      	ldr	r3, [r7, #4]
 804a714:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 804a718:	f103 020a 	add.w	r2, r3, #10
 804a71c:	687b      	ldr	r3, [r7, #4]
 804a71e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 804a722:	200a      	movs	r0, #10
 804a724:	f001 fd64 	bl	804c1f0 <USBH_Delay>
      break;
 804a728:	e166      	b.n	804a9f8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 804a72a:	687b      	ldr	r3, [r7, #4]
 804a72c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804a730:	2b00      	cmp	r3, #0
 804a732:	d005      	beq.n	804a740 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 804a734:	687b      	ldr	r3, [r7, #4]
 804a736:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804a73a:	2104      	movs	r1, #4
 804a73c:	6878      	ldr	r0, [r7, #4]
 804a73e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 804a740:	2064      	movs	r0, #100	; 0x64
 804a742:	f001 fd55 	bl	804c1f0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 804a746:	6878      	ldr	r0, [r7, #4]
 804a748:	f001 fc24 	bl	804bf94 <USBH_LL_GetSpeed>
 804a74c:	4603      	mov	r3, r0
 804a74e:	461a      	mov	r2, r3
 804a750:	687b      	ldr	r3, [r7, #4]
 804a752:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 804a756:	687b      	ldr	r3, [r7, #4]
 804a758:	2205      	movs	r2, #5
 804a75a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 804a75c:	2100      	movs	r1, #0
 804a75e:	6878      	ldr	r0, [r7, #4]
 804a760:	f001 fa29 	bl	804bbb6 <USBH_AllocPipe>
 804a764:	4603      	mov	r3, r0
 804a766:	461a      	mov	r2, r3
 804a768:	687b      	ldr	r3, [r7, #4]
 804a76a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 804a76c:	2180      	movs	r1, #128	; 0x80
 804a76e:	6878      	ldr	r0, [r7, #4]
 804a770:	f001 fa21 	bl	804bbb6 <USBH_AllocPipe>
 804a774:	4603      	mov	r3, r0
 804a776:	461a      	mov	r2, r3
 804a778:	687b      	ldr	r3, [r7, #4]
 804a77a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 804a77c:	687b      	ldr	r3, [r7, #4]
 804a77e:	7919      	ldrb	r1, [r3, #4]
 804a780:	687b      	ldr	r3, [r7, #4]
 804a782:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804a786:	687b      	ldr	r3, [r7, #4]
 804a788:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 804a78c:	687a      	ldr	r2, [r7, #4]
 804a78e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 804a790:	b292      	uxth	r2, r2
 804a792:	9202      	str	r2, [sp, #8]
 804a794:	2200      	movs	r2, #0
 804a796:	9201      	str	r2, [sp, #4]
 804a798:	9300      	str	r3, [sp, #0]
 804a79a:	4603      	mov	r3, r0
 804a79c:	2280      	movs	r2, #128	; 0x80
 804a79e:	6878      	ldr	r0, [r7, #4]
 804a7a0:	f001 f9da 	bl	804bb58 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 804a7a4:	687b      	ldr	r3, [r7, #4]
 804a7a6:	7959      	ldrb	r1, [r3, #5]
 804a7a8:	687b      	ldr	r3, [r7, #4]
 804a7aa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804a7ae:	687b      	ldr	r3, [r7, #4]
 804a7b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 804a7b4:	687a      	ldr	r2, [r7, #4]
 804a7b6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 804a7b8:	b292      	uxth	r2, r2
 804a7ba:	9202      	str	r2, [sp, #8]
 804a7bc:	2200      	movs	r2, #0
 804a7be:	9201      	str	r2, [sp, #4]
 804a7c0:	9300      	str	r3, [sp, #0]
 804a7c2:	4603      	mov	r3, r0
 804a7c4:	2200      	movs	r2, #0
 804a7c6:	6878      	ldr	r0, [r7, #4]
 804a7c8:	f001 f9c6 	bl	804bb58 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804a7cc:	e114      	b.n	804a9f8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 804a7ce:	6878      	ldr	r0, [r7, #4]
 804a7d0:	f000 f918 	bl	804aa04 <USBH_HandleEnum>
 804a7d4:	4603      	mov	r3, r0
 804a7d6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 804a7d8:	7bbb      	ldrb	r3, [r7, #14]
 804a7da:	b2db      	uxtb	r3, r3
 804a7dc:	2b00      	cmp	r3, #0
 804a7de:	f040 80fe 	bne.w	804a9de <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 804a7e2:	687b      	ldr	r3, [r7, #4]
 804a7e4:	2200      	movs	r2, #0
 804a7e6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 804a7ea:	687b      	ldr	r3, [r7, #4]
 804a7ec:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 804a7f0:	2b01      	cmp	r3, #1
 804a7f2:	d103      	bne.n	804a7fc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 804a7f4:	687b      	ldr	r3, [r7, #4]
 804a7f6:	2208      	movs	r2, #8
 804a7f8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804a7fa:	e0f0      	b.n	804a9de <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 804a7fc:	687b      	ldr	r3, [r7, #4]
 804a7fe:	2207      	movs	r2, #7
 804a800:	701a      	strb	r2, [r3, #0]
      break;
 804a802:	e0ec      	b.n	804a9de <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 804a804:	687b      	ldr	r3, [r7, #4]
 804a806:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804a80a:	2b00      	cmp	r3, #0
 804a80c:	f000 80e9 	beq.w	804a9e2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 804a810:	687b      	ldr	r3, [r7, #4]
 804a812:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804a816:	2101      	movs	r1, #1
 804a818:	6878      	ldr	r0, [r7, #4]
 804a81a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 804a81c:	687b      	ldr	r3, [r7, #4]
 804a81e:	2208      	movs	r2, #8
 804a820:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 804a822:	e0de      	b.n	804a9e2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 804a824:	687b      	ldr	r3, [r7, #4]
 804a826:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 804a82a:	b29b      	uxth	r3, r3
 804a82c:	4619      	mov	r1, r3
 804a82e:	6878      	ldr	r0, [r7, #4]
 804a830:	f000 fc2c 	bl	804b08c <USBH_SetCfg>
 804a834:	4603      	mov	r3, r0
 804a836:	2b00      	cmp	r3, #0
 804a838:	f040 80d5 	bne.w	804a9e6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 804a83c:	687b      	ldr	r3, [r7, #4]
 804a83e:	2209      	movs	r2, #9
 804a840:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804a842:	e0d0      	b.n	804a9e6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 804a844:	687b      	ldr	r3, [r7, #4]
 804a846:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 804a84a:	f003 0320 	and.w	r3, r3, #32
 804a84e:	2b00      	cmp	r3, #0
 804a850:	d016      	beq.n	804a880 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 804a852:	2101      	movs	r1, #1
 804a854:	6878      	ldr	r0, [r7, #4]
 804a856:	f000 fc3c 	bl	804b0d2 <USBH_SetFeature>
 804a85a:	4603      	mov	r3, r0
 804a85c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 804a85e:	7bbb      	ldrb	r3, [r7, #14]
 804a860:	b2db      	uxtb	r3, r3
 804a862:	2b00      	cmp	r3, #0
 804a864:	d103      	bne.n	804a86e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 804a866:	687b      	ldr	r3, [r7, #4]
 804a868:	220a      	movs	r2, #10
 804a86a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804a86c:	e0bd      	b.n	804a9ea <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 804a86e:	7bbb      	ldrb	r3, [r7, #14]
 804a870:	b2db      	uxtb	r3, r3
 804a872:	2b03      	cmp	r3, #3
 804a874:	f040 80b9 	bne.w	804a9ea <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 804a878:	687b      	ldr	r3, [r7, #4]
 804a87a:	220a      	movs	r2, #10
 804a87c:	701a      	strb	r2, [r3, #0]
      break;
 804a87e:	e0b4      	b.n	804a9ea <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 804a880:	687b      	ldr	r3, [r7, #4]
 804a882:	220a      	movs	r2, #10
 804a884:	701a      	strb	r2, [r3, #0]
      break;
 804a886:	e0b0      	b.n	804a9ea <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 804a888:	687b      	ldr	r3, [r7, #4]
 804a88a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804a88e:	2b00      	cmp	r3, #0
 804a890:	f000 80ad 	beq.w	804a9ee <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 804a894:	687b      	ldr	r3, [r7, #4]
 804a896:	2200      	movs	r2, #0
 804a898:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 804a89c:	2300      	movs	r3, #0
 804a89e:	73fb      	strb	r3, [r7, #15]
 804a8a0:	e016      	b.n	804a8d0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 804a8a2:	7bfa      	ldrb	r2, [r7, #15]
 804a8a4:	687b      	ldr	r3, [r7, #4]
 804a8a6:	32de      	adds	r2, #222	; 0xde
 804a8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804a8ac:	791a      	ldrb	r2, [r3, #4]
 804a8ae:	687b      	ldr	r3, [r7, #4]
 804a8b0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 804a8b4:	429a      	cmp	r2, r3
 804a8b6:	d108      	bne.n	804a8ca <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 804a8b8:	7bfa      	ldrb	r2, [r7, #15]
 804a8ba:	687b      	ldr	r3, [r7, #4]
 804a8bc:	32de      	adds	r2, #222	; 0xde
 804a8be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 804a8c2:	687b      	ldr	r3, [r7, #4]
 804a8c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 804a8c8:	e005      	b.n	804a8d6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 804a8ca:	7bfb      	ldrb	r3, [r7, #15]
 804a8cc:	3301      	adds	r3, #1
 804a8ce:	73fb      	strb	r3, [r7, #15]
 804a8d0:	7bfb      	ldrb	r3, [r7, #15]
 804a8d2:	2b00      	cmp	r3, #0
 804a8d4:	d0e5      	beq.n	804a8a2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 804a8d6:	687b      	ldr	r3, [r7, #4]
 804a8d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a8dc:	2b00      	cmp	r3, #0
 804a8de:	d016      	beq.n	804a90e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 804a8e0:	687b      	ldr	r3, [r7, #4]
 804a8e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a8e6:	689b      	ldr	r3, [r3, #8]
 804a8e8:	6878      	ldr	r0, [r7, #4]
 804a8ea:	4798      	blx	r3
 804a8ec:	4603      	mov	r3, r0
 804a8ee:	2b00      	cmp	r3, #0
 804a8f0:	d109      	bne.n	804a906 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 804a8f2:	687b      	ldr	r3, [r7, #4]
 804a8f4:	2206      	movs	r2, #6
 804a8f6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 804a8f8:	687b      	ldr	r3, [r7, #4]
 804a8fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804a8fe:	2103      	movs	r1, #3
 804a900:	6878      	ldr	r0, [r7, #4]
 804a902:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804a904:	e073      	b.n	804a9ee <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 804a906:	687b      	ldr	r3, [r7, #4]
 804a908:	220d      	movs	r2, #13
 804a90a:	701a      	strb	r2, [r3, #0]
      break;
 804a90c:	e06f      	b.n	804a9ee <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 804a90e:	687b      	ldr	r3, [r7, #4]
 804a910:	220d      	movs	r2, #13
 804a912:	701a      	strb	r2, [r3, #0]
      break;
 804a914:	e06b      	b.n	804a9ee <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 804a916:	687b      	ldr	r3, [r7, #4]
 804a918:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a91c:	2b00      	cmp	r3, #0
 804a91e:	d017      	beq.n	804a950 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 804a920:	687b      	ldr	r3, [r7, #4]
 804a922:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a926:	691b      	ldr	r3, [r3, #16]
 804a928:	6878      	ldr	r0, [r7, #4]
 804a92a:	4798      	blx	r3
 804a92c:	4603      	mov	r3, r0
 804a92e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 804a930:	7bbb      	ldrb	r3, [r7, #14]
 804a932:	b2db      	uxtb	r3, r3
 804a934:	2b00      	cmp	r3, #0
 804a936:	d103      	bne.n	804a940 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 804a938:	687b      	ldr	r3, [r7, #4]
 804a93a:	220b      	movs	r2, #11
 804a93c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804a93e:	e058      	b.n	804a9f2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 804a940:	7bbb      	ldrb	r3, [r7, #14]
 804a942:	b2db      	uxtb	r3, r3
 804a944:	2b02      	cmp	r3, #2
 804a946:	d154      	bne.n	804a9f2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 804a948:	687b      	ldr	r3, [r7, #4]
 804a94a:	220d      	movs	r2, #13
 804a94c:	701a      	strb	r2, [r3, #0]
      break;
 804a94e:	e050      	b.n	804a9f2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 804a950:	687b      	ldr	r3, [r7, #4]
 804a952:	220d      	movs	r2, #13
 804a954:	701a      	strb	r2, [r3, #0]
      break;
 804a956:	e04c      	b.n	804a9f2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 804a958:	687b      	ldr	r3, [r7, #4]
 804a95a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a95e:	2b00      	cmp	r3, #0
 804a960:	d049      	beq.n	804a9f6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 804a962:	687b      	ldr	r3, [r7, #4]
 804a964:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a968:	695b      	ldr	r3, [r3, #20]
 804a96a:	6878      	ldr	r0, [r7, #4]
 804a96c:	4798      	blx	r3
      }
      break;
 804a96e:	e042      	b.n	804a9f6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 804a970:	687b      	ldr	r3, [r7, #4]
 804a972:	2200      	movs	r2, #0
 804a974:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 804a978:	6878      	ldr	r0, [r7, #4]
 804a97a:	f7ff fd67 	bl	804a44c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 804a97e:	687b      	ldr	r3, [r7, #4]
 804a980:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a984:	2b00      	cmp	r3, #0
 804a986:	d009      	beq.n	804a99c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 804a988:	687b      	ldr	r3, [r7, #4]
 804a98a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a98e:	68db      	ldr	r3, [r3, #12]
 804a990:	6878      	ldr	r0, [r7, #4]
 804a992:	4798      	blx	r3
        phost->pActiveClass = NULL;
 804a994:	687b      	ldr	r3, [r7, #4]
 804a996:	2200      	movs	r2, #0
 804a998:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 804a99c:	687b      	ldr	r3, [r7, #4]
 804a99e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804a9a2:	2b00      	cmp	r3, #0
 804a9a4:	d005      	beq.n	804a9b2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 804a9a6:	687b      	ldr	r3, [r7, #4]
 804a9a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804a9ac:	2105      	movs	r1, #5
 804a9ae:	6878      	ldr	r0, [r7, #4]
 804a9b0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 804a9b2:	687b      	ldr	r3, [r7, #4]
 804a9b4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 804a9b8:	b2db      	uxtb	r3, r3
 804a9ba:	2b01      	cmp	r3, #1
 804a9bc:	d107      	bne.n	804a9ce <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 804a9be:	687b      	ldr	r3, [r7, #4]
 804a9c0:	2200      	movs	r2, #0
 804a9c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 804a9c6:	6878      	ldr	r0, [r7, #4]
 804a9c8:	f7ff fe20 	bl	804a60c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804a9cc:	e014      	b.n	804a9f8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 804a9ce:	6878      	ldr	r0, [r7, #4]
 804a9d0:	f001 faaa 	bl	804bf28 <USBH_LL_Start>
      break;
 804a9d4:	e010      	b.n	804a9f8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 804a9d6:	bf00      	nop
 804a9d8:	e00e      	b.n	804a9f8 <USBH_Process+0x3cc>
      break;
 804a9da:	bf00      	nop
 804a9dc:	e00c      	b.n	804a9f8 <USBH_Process+0x3cc>
      break;
 804a9de:	bf00      	nop
 804a9e0:	e00a      	b.n	804a9f8 <USBH_Process+0x3cc>
    break;
 804a9e2:	bf00      	nop
 804a9e4:	e008      	b.n	804a9f8 <USBH_Process+0x3cc>
      break;
 804a9e6:	bf00      	nop
 804a9e8:	e006      	b.n	804a9f8 <USBH_Process+0x3cc>
      break;
 804a9ea:	bf00      	nop
 804a9ec:	e004      	b.n	804a9f8 <USBH_Process+0x3cc>
      break;
 804a9ee:	bf00      	nop
 804a9f0:	e002      	b.n	804a9f8 <USBH_Process+0x3cc>
      break;
 804a9f2:	bf00      	nop
 804a9f4:	e000      	b.n	804a9f8 <USBH_Process+0x3cc>
      break;
 804a9f6:	bf00      	nop
  }
  return USBH_OK;
 804a9f8:	2300      	movs	r3, #0
}
 804a9fa:	4618      	mov	r0, r3
 804a9fc:	3710      	adds	r7, #16
 804a9fe:	46bd      	mov	sp, r7
 804aa00:	bd80      	pop	{r7, pc}
 804aa02:	bf00      	nop

0804aa04 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 804aa04:	b580      	push	{r7, lr}
 804aa06:	b088      	sub	sp, #32
 804aa08:	af04      	add	r7, sp, #16
 804aa0a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 804aa0c:	2301      	movs	r3, #1
 804aa0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 804aa10:	2301      	movs	r3, #1
 804aa12:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 804aa14:	687b      	ldr	r3, [r7, #4]
 804aa16:	785b      	ldrb	r3, [r3, #1]
 804aa18:	2b07      	cmp	r3, #7
 804aa1a:	f200 81c1 	bhi.w	804ada0 <USBH_HandleEnum+0x39c>
 804aa1e:	a201      	add	r2, pc, #4	; (adr r2, 804aa24 <USBH_HandleEnum+0x20>)
 804aa20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804aa24:	0804aa45 	.word	0x0804aa45
 804aa28:	0804ab03 	.word	0x0804ab03
 804aa2c:	0804ab6d 	.word	0x0804ab6d
 804aa30:	0804abfb 	.word	0x0804abfb
 804aa34:	0804ac65 	.word	0x0804ac65
 804aa38:	0804acd5 	.word	0x0804acd5
 804aa3c:	0804ad1b 	.word	0x0804ad1b
 804aa40:	0804ad61 	.word	0x0804ad61
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 804aa44:	2108      	movs	r1, #8
 804aa46:	6878      	ldr	r0, [r7, #4]
 804aa48:	f000 fa50 	bl	804aeec <USBH_Get_DevDesc>
 804aa4c:	4603      	mov	r3, r0
 804aa4e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804aa50:	7bbb      	ldrb	r3, [r7, #14]
 804aa52:	2b00      	cmp	r3, #0
 804aa54:	d130      	bne.n	804aab8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 804aa56:	687b      	ldr	r3, [r7, #4]
 804aa58:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 804aa5c:	687b      	ldr	r3, [r7, #4]
 804aa5e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 804aa60:	687b      	ldr	r3, [r7, #4]
 804aa62:	2201      	movs	r2, #1
 804aa64:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 804aa66:	687b      	ldr	r3, [r7, #4]
 804aa68:	7919      	ldrb	r1, [r3, #4]
 804aa6a:	687b      	ldr	r3, [r7, #4]
 804aa6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804aa70:	687b      	ldr	r3, [r7, #4]
 804aa72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804aa76:	687a      	ldr	r2, [r7, #4]
 804aa78:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 804aa7a:	b292      	uxth	r2, r2
 804aa7c:	9202      	str	r2, [sp, #8]
 804aa7e:	2200      	movs	r2, #0
 804aa80:	9201      	str	r2, [sp, #4]
 804aa82:	9300      	str	r3, [sp, #0]
 804aa84:	4603      	mov	r3, r0
 804aa86:	2280      	movs	r2, #128	; 0x80
 804aa88:	6878      	ldr	r0, [r7, #4]
 804aa8a:	f001 f865 	bl	804bb58 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804aa8e:	687b      	ldr	r3, [r7, #4]
 804aa90:	7959      	ldrb	r1, [r3, #5]
 804aa92:	687b      	ldr	r3, [r7, #4]
 804aa94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804aa98:	687b      	ldr	r3, [r7, #4]
 804aa9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804aa9e:	687a      	ldr	r2, [r7, #4]
 804aaa0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804aaa2:	b292      	uxth	r2, r2
 804aaa4:	9202      	str	r2, [sp, #8]
 804aaa6:	2200      	movs	r2, #0
 804aaa8:	9201      	str	r2, [sp, #4]
 804aaaa:	9300      	str	r3, [sp, #0]
 804aaac:	4603      	mov	r3, r0
 804aaae:	2200      	movs	r2, #0
 804aab0:	6878      	ldr	r0, [r7, #4]
 804aab2:	f001 f851 	bl	804bb58 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 804aab6:	e175      	b.n	804ada4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804aab8:	7bbb      	ldrb	r3, [r7, #14]
 804aaba:	2b03      	cmp	r3, #3
 804aabc:	f040 8172 	bne.w	804ada4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 804aac0:	687b      	ldr	r3, [r7, #4]
 804aac2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804aac6:	3301      	adds	r3, #1
 804aac8:	b2da      	uxtb	r2, r3
 804aaca:	687b      	ldr	r3, [r7, #4]
 804aacc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804aad0:	687b      	ldr	r3, [r7, #4]
 804aad2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804aad6:	2b03      	cmp	r3, #3
 804aad8:	d903      	bls.n	804aae2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 804aada:	687b      	ldr	r3, [r7, #4]
 804aadc:	220d      	movs	r2, #13
 804aade:	701a      	strb	r2, [r3, #0]
      break;
 804aae0:	e160      	b.n	804ada4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804aae2:	687b      	ldr	r3, [r7, #4]
 804aae4:	795b      	ldrb	r3, [r3, #5]
 804aae6:	4619      	mov	r1, r3
 804aae8:	6878      	ldr	r0, [r7, #4]
 804aaea:	f001 f885 	bl	804bbf8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804aaee:	687b      	ldr	r3, [r7, #4]
 804aaf0:	791b      	ldrb	r3, [r3, #4]
 804aaf2:	4619      	mov	r1, r3
 804aaf4:	6878      	ldr	r0, [r7, #4]
 804aaf6:	f001 f87f 	bl	804bbf8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 804aafa:	687b      	ldr	r3, [r7, #4]
 804aafc:	2200      	movs	r2, #0
 804aafe:	701a      	strb	r2, [r3, #0]
      break;
 804ab00:	e150      	b.n	804ada4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 804ab02:	2112      	movs	r1, #18
 804ab04:	6878      	ldr	r0, [r7, #4]
 804ab06:	f000 f9f1 	bl	804aeec <USBH_Get_DevDesc>
 804ab0a:	4603      	mov	r3, r0
 804ab0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804ab0e:	7bbb      	ldrb	r3, [r7, #14]
 804ab10:	2b00      	cmp	r3, #0
 804ab12:	d103      	bne.n	804ab1c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 804ab14:	687b      	ldr	r3, [r7, #4]
 804ab16:	2202      	movs	r2, #2
 804ab18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804ab1a:	e145      	b.n	804ada8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804ab1c:	7bbb      	ldrb	r3, [r7, #14]
 804ab1e:	2b03      	cmp	r3, #3
 804ab20:	f040 8142 	bne.w	804ada8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 804ab24:	687b      	ldr	r3, [r7, #4]
 804ab26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804ab2a:	3301      	adds	r3, #1
 804ab2c:	b2da      	uxtb	r2, r3
 804ab2e:	687b      	ldr	r3, [r7, #4]
 804ab30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804ab34:	687b      	ldr	r3, [r7, #4]
 804ab36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804ab3a:	2b03      	cmp	r3, #3
 804ab3c:	d903      	bls.n	804ab46 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 804ab3e:	687b      	ldr	r3, [r7, #4]
 804ab40:	220d      	movs	r2, #13
 804ab42:	701a      	strb	r2, [r3, #0]
      break;
 804ab44:	e130      	b.n	804ada8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804ab46:	687b      	ldr	r3, [r7, #4]
 804ab48:	795b      	ldrb	r3, [r3, #5]
 804ab4a:	4619      	mov	r1, r3
 804ab4c:	6878      	ldr	r0, [r7, #4]
 804ab4e:	f001 f853 	bl	804bbf8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804ab52:	687b      	ldr	r3, [r7, #4]
 804ab54:	791b      	ldrb	r3, [r3, #4]
 804ab56:	4619      	mov	r1, r3
 804ab58:	6878      	ldr	r0, [r7, #4]
 804ab5a:	f001 f84d 	bl	804bbf8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804ab5e:	687b      	ldr	r3, [r7, #4]
 804ab60:	2200      	movs	r2, #0
 804ab62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804ab64:	687b      	ldr	r3, [r7, #4]
 804ab66:	2200      	movs	r2, #0
 804ab68:	701a      	strb	r2, [r3, #0]
      break;
 804ab6a:	e11d      	b.n	804ada8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 804ab6c:	2101      	movs	r1, #1
 804ab6e:	6878      	ldr	r0, [r7, #4]
 804ab70:	f000 fa68 	bl	804b044 <USBH_SetAddress>
 804ab74:	4603      	mov	r3, r0
 804ab76:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804ab78:	7bbb      	ldrb	r3, [r7, #14]
 804ab7a:	2b00      	cmp	r3, #0
 804ab7c:	d132      	bne.n	804abe4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 804ab7e:	2002      	movs	r0, #2
 804ab80:	f001 fb36 	bl	804c1f0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 804ab84:	687b      	ldr	r3, [r7, #4]
 804ab86:	2201      	movs	r2, #1
 804ab88:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 804ab8c:	687b      	ldr	r3, [r7, #4]
 804ab8e:	2203      	movs	r2, #3
 804ab90:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 804ab92:	687b      	ldr	r3, [r7, #4]
 804ab94:	7919      	ldrb	r1, [r3, #4]
 804ab96:	687b      	ldr	r3, [r7, #4]
 804ab98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804ab9c:	687b      	ldr	r3, [r7, #4]
 804ab9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804aba2:	687a      	ldr	r2, [r7, #4]
 804aba4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 804aba6:	b292      	uxth	r2, r2
 804aba8:	9202      	str	r2, [sp, #8]
 804abaa:	2200      	movs	r2, #0
 804abac:	9201      	str	r2, [sp, #4]
 804abae:	9300      	str	r3, [sp, #0]
 804abb0:	4603      	mov	r3, r0
 804abb2:	2280      	movs	r2, #128	; 0x80
 804abb4:	6878      	ldr	r0, [r7, #4]
 804abb6:	f000 ffcf 	bl	804bb58 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804abba:	687b      	ldr	r3, [r7, #4]
 804abbc:	7959      	ldrb	r1, [r3, #5]
 804abbe:	687b      	ldr	r3, [r7, #4]
 804abc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804abc4:	687b      	ldr	r3, [r7, #4]
 804abc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804abca:	687a      	ldr	r2, [r7, #4]
 804abcc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804abce:	b292      	uxth	r2, r2
 804abd0:	9202      	str	r2, [sp, #8]
 804abd2:	2200      	movs	r2, #0
 804abd4:	9201      	str	r2, [sp, #4]
 804abd6:	9300      	str	r3, [sp, #0]
 804abd8:	4603      	mov	r3, r0
 804abda:	2200      	movs	r2, #0
 804abdc:	6878      	ldr	r0, [r7, #4]
 804abde:	f000 ffbb 	bl	804bb58 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 804abe2:	e0e3      	b.n	804adac <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804abe4:	7bbb      	ldrb	r3, [r7, #14]
 804abe6:	2b03      	cmp	r3, #3
 804abe8:	f040 80e0 	bne.w	804adac <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 804abec:	687b      	ldr	r3, [r7, #4]
 804abee:	220d      	movs	r2, #13
 804abf0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 804abf2:	687b      	ldr	r3, [r7, #4]
 804abf4:	2200      	movs	r2, #0
 804abf6:	705a      	strb	r2, [r3, #1]
      break;
 804abf8:	e0d8      	b.n	804adac <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 804abfa:	2109      	movs	r1, #9
 804abfc:	6878      	ldr	r0, [r7, #4]
 804abfe:	f000 f99d 	bl	804af3c <USBH_Get_CfgDesc>
 804ac02:	4603      	mov	r3, r0
 804ac04:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804ac06:	7bbb      	ldrb	r3, [r7, #14]
 804ac08:	2b00      	cmp	r3, #0
 804ac0a:	d103      	bne.n	804ac14 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 804ac0c:	687b      	ldr	r3, [r7, #4]
 804ac0e:	2204      	movs	r2, #4
 804ac10:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804ac12:	e0cd      	b.n	804adb0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804ac14:	7bbb      	ldrb	r3, [r7, #14]
 804ac16:	2b03      	cmp	r3, #3
 804ac18:	f040 80ca 	bne.w	804adb0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 804ac1c:	687b      	ldr	r3, [r7, #4]
 804ac1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804ac22:	3301      	adds	r3, #1
 804ac24:	b2da      	uxtb	r2, r3
 804ac26:	687b      	ldr	r3, [r7, #4]
 804ac28:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804ac2c:	687b      	ldr	r3, [r7, #4]
 804ac2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804ac32:	2b03      	cmp	r3, #3
 804ac34:	d903      	bls.n	804ac3e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 804ac36:	687b      	ldr	r3, [r7, #4]
 804ac38:	220d      	movs	r2, #13
 804ac3a:	701a      	strb	r2, [r3, #0]
      break;
 804ac3c:	e0b8      	b.n	804adb0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804ac3e:	687b      	ldr	r3, [r7, #4]
 804ac40:	795b      	ldrb	r3, [r3, #5]
 804ac42:	4619      	mov	r1, r3
 804ac44:	6878      	ldr	r0, [r7, #4]
 804ac46:	f000 ffd7 	bl	804bbf8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804ac4a:	687b      	ldr	r3, [r7, #4]
 804ac4c:	791b      	ldrb	r3, [r3, #4]
 804ac4e:	4619      	mov	r1, r3
 804ac50:	6878      	ldr	r0, [r7, #4]
 804ac52:	f000 ffd1 	bl	804bbf8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804ac56:	687b      	ldr	r3, [r7, #4]
 804ac58:	2200      	movs	r2, #0
 804ac5a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804ac5c:	687b      	ldr	r3, [r7, #4]
 804ac5e:	2200      	movs	r2, #0
 804ac60:	701a      	strb	r2, [r3, #0]
      break;
 804ac62:	e0a5      	b.n	804adb0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 804ac64:	687b      	ldr	r3, [r7, #4]
 804ac66:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 804ac6a:	4619      	mov	r1, r3
 804ac6c:	6878      	ldr	r0, [r7, #4]
 804ac6e:	f000 f965 	bl	804af3c <USBH_Get_CfgDesc>
 804ac72:	4603      	mov	r3, r0
 804ac74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804ac76:	7bbb      	ldrb	r3, [r7, #14]
 804ac78:	2b00      	cmp	r3, #0
 804ac7a:	d103      	bne.n	804ac84 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 804ac7c:	687b      	ldr	r3, [r7, #4]
 804ac7e:	2205      	movs	r2, #5
 804ac80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804ac82:	e097      	b.n	804adb4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804ac84:	7bbb      	ldrb	r3, [r7, #14]
 804ac86:	2b03      	cmp	r3, #3
 804ac88:	f040 8094 	bne.w	804adb4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 804ac8c:	687b      	ldr	r3, [r7, #4]
 804ac8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804ac92:	3301      	adds	r3, #1
 804ac94:	b2da      	uxtb	r2, r3
 804ac96:	687b      	ldr	r3, [r7, #4]
 804ac98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804ac9c:	687b      	ldr	r3, [r7, #4]
 804ac9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804aca2:	2b03      	cmp	r3, #3
 804aca4:	d903      	bls.n	804acae <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 804aca6:	687b      	ldr	r3, [r7, #4]
 804aca8:	220d      	movs	r2, #13
 804acaa:	701a      	strb	r2, [r3, #0]
      break;
 804acac:	e082      	b.n	804adb4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804acae:	687b      	ldr	r3, [r7, #4]
 804acb0:	795b      	ldrb	r3, [r3, #5]
 804acb2:	4619      	mov	r1, r3
 804acb4:	6878      	ldr	r0, [r7, #4]
 804acb6:	f000 ff9f 	bl	804bbf8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804acba:	687b      	ldr	r3, [r7, #4]
 804acbc:	791b      	ldrb	r3, [r3, #4]
 804acbe:	4619      	mov	r1, r3
 804acc0:	6878      	ldr	r0, [r7, #4]
 804acc2:	f000 ff99 	bl	804bbf8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804acc6:	687b      	ldr	r3, [r7, #4]
 804acc8:	2200      	movs	r2, #0
 804acca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804accc:	687b      	ldr	r3, [r7, #4]
 804acce:	2200      	movs	r2, #0
 804acd0:	701a      	strb	r2, [r3, #0]
      break;
 804acd2:	e06f      	b.n	804adb4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 804acd4:	687b      	ldr	r3, [r7, #4]
 804acd6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 804acda:	2b00      	cmp	r3, #0
 804acdc:	d019      	beq.n	804ad12 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 804acde:	687b      	ldr	r3, [r7, #4]
 804ace0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 804ace4:	687b      	ldr	r3, [r7, #4]
 804ace6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 804acea:	23ff      	movs	r3, #255	; 0xff
 804acec:	6878      	ldr	r0, [r7, #4]
 804acee:	f000 f949 	bl	804af84 <USBH_Get_StringDesc>
 804acf2:	4603      	mov	r3, r0
 804acf4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804acf6:	7bbb      	ldrb	r3, [r7, #14]
 804acf8:	2b00      	cmp	r3, #0
 804acfa:	d103      	bne.n	804ad04 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804acfc:	687b      	ldr	r3, [r7, #4]
 804acfe:	2206      	movs	r2, #6
 804ad00:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804ad02:	e059      	b.n	804adb8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804ad04:	7bbb      	ldrb	r3, [r7, #14]
 804ad06:	2b03      	cmp	r3, #3
 804ad08:	d156      	bne.n	804adb8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804ad0a:	687b      	ldr	r3, [r7, #4]
 804ad0c:	2206      	movs	r2, #6
 804ad0e:	705a      	strb	r2, [r3, #1]
      break;
 804ad10:	e052      	b.n	804adb8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804ad12:	687b      	ldr	r3, [r7, #4]
 804ad14:	2206      	movs	r2, #6
 804ad16:	705a      	strb	r2, [r3, #1]
      break;
 804ad18:	e04e      	b.n	804adb8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 804ad1a:	687b      	ldr	r3, [r7, #4]
 804ad1c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 804ad20:	2b00      	cmp	r3, #0
 804ad22:	d019      	beq.n	804ad58 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 804ad24:	687b      	ldr	r3, [r7, #4]
 804ad26:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 804ad2a:	687b      	ldr	r3, [r7, #4]
 804ad2c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 804ad30:	23ff      	movs	r3, #255	; 0xff
 804ad32:	6878      	ldr	r0, [r7, #4]
 804ad34:	f000 f926 	bl	804af84 <USBH_Get_StringDesc>
 804ad38:	4603      	mov	r3, r0
 804ad3a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804ad3c:	7bbb      	ldrb	r3, [r7, #14]
 804ad3e:	2b00      	cmp	r3, #0
 804ad40:	d103      	bne.n	804ad4a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804ad42:	687b      	ldr	r3, [r7, #4]
 804ad44:	2207      	movs	r2, #7
 804ad46:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804ad48:	e038      	b.n	804adbc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804ad4a:	7bbb      	ldrb	r3, [r7, #14]
 804ad4c:	2b03      	cmp	r3, #3
 804ad4e:	d135      	bne.n	804adbc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804ad50:	687b      	ldr	r3, [r7, #4]
 804ad52:	2207      	movs	r2, #7
 804ad54:	705a      	strb	r2, [r3, #1]
      break;
 804ad56:	e031      	b.n	804adbc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804ad58:	687b      	ldr	r3, [r7, #4]
 804ad5a:	2207      	movs	r2, #7
 804ad5c:	705a      	strb	r2, [r3, #1]
      break;
 804ad5e:	e02d      	b.n	804adbc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 804ad60:	687b      	ldr	r3, [r7, #4]
 804ad62:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 804ad66:	2b00      	cmp	r3, #0
 804ad68:	d017      	beq.n	804ad9a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 804ad6a:	687b      	ldr	r3, [r7, #4]
 804ad6c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 804ad70:	687b      	ldr	r3, [r7, #4]
 804ad72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 804ad76:	23ff      	movs	r3, #255	; 0xff
 804ad78:	6878      	ldr	r0, [r7, #4]
 804ad7a:	f000 f903 	bl	804af84 <USBH_Get_StringDesc>
 804ad7e:	4603      	mov	r3, r0
 804ad80:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804ad82:	7bbb      	ldrb	r3, [r7, #14]
 804ad84:	2b00      	cmp	r3, #0
 804ad86:	d102      	bne.n	804ad8e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 804ad88:	2300      	movs	r3, #0
 804ad8a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 804ad8c:	e018      	b.n	804adc0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804ad8e:	7bbb      	ldrb	r3, [r7, #14]
 804ad90:	2b03      	cmp	r3, #3
 804ad92:	d115      	bne.n	804adc0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 804ad94:	2300      	movs	r3, #0
 804ad96:	73fb      	strb	r3, [r7, #15]
      break;
 804ad98:	e012      	b.n	804adc0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 804ad9a:	2300      	movs	r3, #0
 804ad9c:	73fb      	strb	r3, [r7, #15]
      break;
 804ad9e:	e00f      	b.n	804adc0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 804ada0:	bf00      	nop
 804ada2:	e00e      	b.n	804adc2 <USBH_HandleEnum+0x3be>
      break;
 804ada4:	bf00      	nop
 804ada6:	e00c      	b.n	804adc2 <USBH_HandleEnum+0x3be>
      break;
 804ada8:	bf00      	nop
 804adaa:	e00a      	b.n	804adc2 <USBH_HandleEnum+0x3be>
      break;
 804adac:	bf00      	nop
 804adae:	e008      	b.n	804adc2 <USBH_HandleEnum+0x3be>
      break;
 804adb0:	bf00      	nop
 804adb2:	e006      	b.n	804adc2 <USBH_HandleEnum+0x3be>
      break;
 804adb4:	bf00      	nop
 804adb6:	e004      	b.n	804adc2 <USBH_HandleEnum+0x3be>
      break;
 804adb8:	bf00      	nop
 804adba:	e002      	b.n	804adc2 <USBH_HandleEnum+0x3be>
      break;
 804adbc:	bf00      	nop
 804adbe:	e000      	b.n	804adc2 <USBH_HandleEnum+0x3be>
      break;
 804adc0:	bf00      	nop
  }
  return Status;
 804adc2:	7bfb      	ldrb	r3, [r7, #15]
}
 804adc4:	4618      	mov	r0, r3
 804adc6:	3710      	adds	r7, #16
 804adc8:	46bd      	mov	sp, r7
 804adca:	bd80      	pop	{r7, pc}

0804adcc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 804adcc:	b480      	push	{r7}
 804adce:	b083      	sub	sp, #12
 804add0:	af00      	add	r7, sp, #0
 804add2:	6078      	str	r0, [r7, #4]
 804add4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 804add6:	687b      	ldr	r3, [r7, #4]
 804add8:	683a      	ldr	r2, [r7, #0]
 804adda:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 804adde:	bf00      	nop
 804ade0:	370c      	adds	r7, #12
 804ade2:	46bd      	mov	sp, r7
 804ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ade8:	4770      	bx	lr

0804adea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 804adea:	b580      	push	{r7, lr}
 804adec:	b082      	sub	sp, #8
 804adee:	af00      	add	r7, sp, #0
 804adf0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 804adf2:	687b      	ldr	r3, [r7, #4]
 804adf4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804adf8:	1c5a      	adds	r2, r3, #1
 804adfa:	687b      	ldr	r3, [r7, #4]
 804adfc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 804ae00:	6878      	ldr	r0, [r7, #4]
 804ae02:	f000 f804 	bl	804ae0e <USBH_HandleSof>
}
 804ae06:	bf00      	nop
 804ae08:	3708      	adds	r7, #8
 804ae0a:	46bd      	mov	sp, r7
 804ae0c:	bd80      	pop	{r7, pc}

0804ae0e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 804ae0e:	b580      	push	{r7, lr}
 804ae10:	b082      	sub	sp, #8
 804ae12:	af00      	add	r7, sp, #0
 804ae14:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 804ae16:	687b      	ldr	r3, [r7, #4]
 804ae18:	781b      	ldrb	r3, [r3, #0]
 804ae1a:	b2db      	uxtb	r3, r3
 804ae1c:	2b0b      	cmp	r3, #11
 804ae1e:	d10a      	bne.n	804ae36 <USBH_HandleSof+0x28>
 804ae20:	687b      	ldr	r3, [r7, #4]
 804ae22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ae26:	2b00      	cmp	r3, #0
 804ae28:	d005      	beq.n	804ae36 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 804ae2a:	687b      	ldr	r3, [r7, #4]
 804ae2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ae30:	699b      	ldr	r3, [r3, #24]
 804ae32:	6878      	ldr	r0, [r7, #4]
 804ae34:	4798      	blx	r3
  }
}
 804ae36:	bf00      	nop
 804ae38:	3708      	adds	r7, #8
 804ae3a:	46bd      	mov	sp, r7
 804ae3c:	bd80      	pop	{r7, pc}

0804ae3e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 804ae3e:	b480      	push	{r7}
 804ae40:	b083      	sub	sp, #12
 804ae42:	af00      	add	r7, sp, #0
 804ae44:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 804ae46:	687b      	ldr	r3, [r7, #4]
 804ae48:	2201      	movs	r2, #1
 804ae4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 804ae4e:	bf00      	nop
}
 804ae50:	370c      	adds	r7, #12
 804ae52:	46bd      	mov	sp, r7
 804ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ae58:	4770      	bx	lr

0804ae5a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 804ae5a:	b480      	push	{r7}
 804ae5c:	b083      	sub	sp, #12
 804ae5e:	af00      	add	r7, sp, #0
 804ae60:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 804ae62:	687b      	ldr	r3, [r7, #4]
 804ae64:	2200      	movs	r2, #0
 804ae66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 804ae6a:	bf00      	nop
}
 804ae6c:	370c      	adds	r7, #12
 804ae6e:	46bd      	mov	sp, r7
 804ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ae74:	4770      	bx	lr

0804ae76 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 804ae76:	b480      	push	{r7}
 804ae78:	b083      	sub	sp, #12
 804ae7a:	af00      	add	r7, sp, #0
 804ae7c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 804ae7e:	687b      	ldr	r3, [r7, #4]
 804ae80:	2201      	movs	r2, #1
 804ae82:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 804ae86:	687b      	ldr	r3, [r7, #4]
 804ae88:	2200      	movs	r2, #0
 804ae8a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 804ae8e:	687b      	ldr	r3, [r7, #4]
 804ae90:	2200      	movs	r2, #0
 804ae92:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 804ae96:	2300      	movs	r3, #0
}
 804ae98:	4618      	mov	r0, r3
 804ae9a:	370c      	adds	r7, #12
 804ae9c:	46bd      	mov	sp, r7
 804ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804aea2:	4770      	bx	lr

0804aea4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 804aea4:	b580      	push	{r7, lr}
 804aea6:	b082      	sub	sp, #8
 804aea8:	af00      	add	r7, sp, #0
 804aeaa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 804aeac:	687b      	ldr	r3, [r7, #4]
 804aeae:	2201      	movs	r2, #1
 804aeb0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 804aeb4:	687b      	ldr	r3, [r7, #4]
 804aeb6:	2200      	movs	r2, #0
 804aeb8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 804aebc:	687b      	ldr	r3, [r7, #4]
 804aebe:	2200      	movs	r2, #0
 804aec0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 804aec4:	6878      	ldr	r0, [r7, #4]
 804aec6:	f001 f84a 	bl	804bf5e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804aeca:	687b      	ldr	r3, [r7, #4]
 804aecc:	791b      	ldrb	r3, [r3, #4]
 804aece:	4619      	mov	r1, r3
 804aed0:	6878      	ldr	r0, [r7, #4]
 804aed2:	f000 fe91 	bl	804bbf8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804aed6:	687b      	ldr	r3, [r7, #4]
 804aed8:	795b      	ldrb	r3, [r3, #5]
 804aeda:	4619      	mov	r1, r3
 804aedc:	6878      	ldr	r0, [r7, #4]
 804aede:	f000 fe8b 	bl	804bbf8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 804aee2:	2300      	movs	r3, #0
}
 804aee4:	4618      	mov	r0, r3
 804aee6:	3708      	adds	r7, #8
 804aee8:	46bd      	mov	sp, r7
 804aeea:	bd80      	pop	{r7, pc}

0804aeec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 804aeec:	b580      	push	{r7, lr}
 804aeee:	b086      	sub	sp, #24
 804aef0:	af02      	add	r7, sp, #8
 804aef2:	6078      	str	r0, [r7, #4]
 804aef4:	460b      	mov	r3, r1
 804aef6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 804aef8:	687b      	ldr	r3, [r7, #4]
 804aefa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 804aefe:	78fb      	ldrb	r3, [r7, #3]
 804af00:	b29b      	uxth	r3, r3
 804af02:	9300      	str	r3, [sp, #0]
 804af04:	4613      	mov	r3, r2
 804af06:	f44f 7280 	mov.w	r2, #256	; 0x100
 804af0a:	2100      	movs	r1, #0
 804af0c:	6878      	ldr	r0, [r7, #4]
 804af0e:	f000 f864 	bl	804afda <USBH_GetDescriptor>
 804af12:	4603      	mov	r3, r0
 804af14:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 804af16:	7bfb      	ldrb	r3, [r7, #15]
 804af18:	2b00      	cmp	r3, #0
 804af1a:	d10a      	bne.n	804af32 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 804af1c:	687b      	ldr	r3, [r7, #4]
 804af1e:	f203 3026 	addw	r0, r3, #806	; 0x326
 804af22:	687b      	ldr	r3, [r7, #4]
 804af24:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804af28:	78fa      	ldrb	r2, [r7, #3]
 804af2a:	b292      	uxth	r2, r2
 804af2c:	4619      	mov	r1, r3
 804af2e:	f000 f918 	bl	804b162 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 804af32:	7bfb      	ldrb	r3, [r7, #15]
}
 804af34:	4618      	mov	r0, r3
 804af36:	3710      	adds	r7, #16
 804af38:	46bd      	mov	sp, r7
 804af3a:	bd80      	pop	{r7, pc}

0804af3c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 804af3c:	b580      	push	{r7, lr}
 804af3e:	b086      	sub	sp, #24
 804af40:	af02      	add	r7, sp, #8
 804af42:	6078      	str	r0, [r7, #4]
 804af44:	460b      	mov	r3, r1
 804af46:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 804af48:	687b      	ldr	r3, [r7, #4]
 804af4a:	331c      	adds	r3, #28
 804af4c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 804af4e:	887b      	ldrh	r3, [r7, #2]
 804af50:	9300      	str	r3, [sp, #0]
 804af52:	68bb      	ldr	r3, [r7, #8]
 804af54:	f44f 7200 	mov.w	r2, #512	; 0x200
 804af58:	2100      	movs	r1, #0
 804af5a:	6878      	ldr	r0, [r7, #4]
 804af5c:	f000 f83d 	bl	804afda <USBH_GetDescriptor>
 804af60:	4603      	mov	r3, r0
 804af62:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 804af64:	7bfb      	ldrb	r3, [r7, #15]
 804af66:	2b00      	cmp	r3, #0
 804af68:	d107      	bne.n	804af7a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 804af6a:	887b      	ldrh	r3, [r7, #2]
 804af6c:	461a      	mov	r2, r3
 804af6e:	68b9      	ldr	r1, [r7, #8]
 804af70:	6878      	ldr	r0, [r7, #4]
 804af72:	f000 f987 	bl	804b284 <USBH_ParseCfgDesc>
 804af76:	4603      	mov	r3, r0
 804af78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804af7a:	7bfb      	ldrb	r3, [r7, #15]
}
 804af7c:	4618      	mov	r0, r3
 804af7e:	3710      	adds	r7, #16
 804af80:	46bd      	mov	sp, r7
 804af82:	bd80      	pop	{r7, pc}

0804af84 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 804af84:	b580      	push	{r7, lr}
 804af86:	b088      	sub	sp, #32
 804af88:	af02      	add	r7, sp, #8
 804af8a:	60f8      	str	r0, [r7, #12]
 804af8c:	607a      	str	r2, [r7, #4]
 804af8e:	461a      	mov	r2, r3
 804af90:	460b      	mov	r3, r1
 804af92:	72fb      	strb	r3, [r7, #11]
 804af94:	4613      	mov	r3, r2
 804af96:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 804af98:	7afb      	ldrb	r3, [r7, #11]
 804af9a:	b29b      	uxth	r3, r3
 804af9c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 804afa0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 804afa2:	68fb      	ldr	r3, [r7, #12]
 804afa4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 804afa8:	893b      	ldrh	r3, [r7, #8]
 804afaa:	9300      	str	r3, [sp, #0]
 804afac:	460b      	mov	r3, r1
 804afae:	2100      	movs	r1, #0
 804afb0:	68f8      	ldr	r0, [r7, #12]
 804afb2:	f000 f812 	bl	804afda <USBH_GetDescriptor>
 804afb6:	4603      	mov	r3, r0
 804afb8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 804afba:	7dfb      	ldrb	r3, [r7, #23]
 804afbc:	2b00      	cmp	r3, #0
 804afbe:	d107      	bne.n	804afd0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 804afc0:	68fb      	ldr	r3, [r7, #12]
 804afc2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804afc6:	893a      	ldrh	r2, [r7, #8]
 804afc8:	6879      	ldr	r1, [r7, #4]
 804afca:	4618      	mov	r0, r3
 804afcc:	f000 fb24 	bl	804b618 <USBH_ParseStringDesc>
  }

  return status;
 804afd0:	7dfb      	ldrb	r3, [r7, #23]
}
 804afd2:	4618      	mov	r0, r3
 804afd4:	3718      	adds	r7, #24
 804afd6:	46bd      	mov	sp, r7
 804afd8:	bd80      	pop	{r7, pc}

0804afda <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 804afda:	b580      	push	{r7, lr}
 804afdc:	b084      	sub	sp, #16
 804afde:	af00      	add	r7, sp, #0
 804afe0:	60f8      	str	r0, [r7, #12]
 804afe2:	607b      	str	r3, [r7, #4]
 804afe4:	460b      	mov	r3, r1
 804afe6:	72fb      	strb	r3, [r7, #11]
 804afe8:	4613      	mov	r3, r2
 804afea:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 804afec:	68fb      	ldr	r3, [r7, #12]
 804afee:	789b      	ldrb	r3, [r3, #2]
 804aff0:	2b01      	cmp	r3, #1
 804aff2:	d11c      	bne.n	804b02e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 804aff4:	7afb      	ldrb	r3, [r7, #11]
 804aff6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 804affa:	b2da      	uxtb	r2, r3
 804affc:	68fb      	ldr	r3, [r7, #12]
 804affe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 804b000:	68fb      	ldr	r3, [r7, #12]
 804b002:	2206      	movs	r2, #6
 804b004:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 804b006:	68fb      	ldr	r3, [r7, #12]
 804b008:	893a      	ldrh	r2, [r7, #8]
 804b00a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 804b00c:	893b      	ldrh	r3, [r7, #8]
 804b00e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 804b012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804b016:	d104      	bne.n	804b022 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 804b018:	68fb      	ldr	r3, [r7, #12]
 804b01a:	f240 4209 	movw	r2, #1033	; 0x409
 804b01e:	829a      	strh	r2, [r3, #20]
 804b020:	e002      	b.n	804b028 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 804b022:	68fb      	ldr	r3, [r7, #12]
 804b024:	2200      	movs	r2, #0
 804b026:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 804b028:	68fb      	ldr	r3, [r7, #12]
 804b02a:	8b3a      	ldrh	r2, [r7, #24]
 804b02c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 804b02e:	8b3b      	ldrh	r3, [r7, #24]
 804b030:	461a      	mov	r2, r3
 804b032:	6879      	ldr	r1, [r7, #4]
 804b034:	68f8      	ldr	r0, [r7, #12]
 804b036:	f000 fb3d 	bl	804b6b4 <USBH_CtlReq>
 804b03a:	4603      	mov	r3, r0
}
 804b03c:	4618      	mov	r0, r3
 804b03e:	3710      	adds	r7, #16
 804b040:	46bd      	mov	sp, r7
 804b042:	bd80      	pop	{r7, pc}

0804b044 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 804b044:	b580      	push	{r7, lr}
 804b046:	b082      	sub	sp, #8
 804b048:	af00      	add	r7, sp, #0
 804b04a:	6078      	str	r0, [r7, #4]
 804b04c:	460b      	mov	r3, r1
 804b04e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804b050:	687b      	ldr	r3, [r7, #4]
 804b052:	789b      	ldrb	r3, [r3, #2]
 804b054:	2b01      	cmp	r3, #1
 804b056:	d10f      	bne.n	804b078 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 804b058:	687b      	ldr	r3, [r7, #4]
 804b05a:	2200      	movs	r2, #0
 804b05c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 804b05e:	687b      	ldr	r3, [r7, #4]
 804b060:	2205      	movs	r2, #5
 804b062:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 804b064:	78fb      	ldrb	r3, [r7, #3]
 804b066:	b29a      	uxth	r2, r3
 804b068:	687b      	ldr	r3, [r7, #4]
 804b06a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804b06c:	687b      	ldr	r3, [r7, #4]
 804b06e:	2200      	movs	r2, #0
 804b070:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804b072:	687b      	ldr	r3, [r7, #4]
 804b074:	2200      	movs	r2, #0
 804b076:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804b078:	2200      	movs	r2, #0
 804b07a:	2100      	movs	r1, #0
 804b07c:	6878      	ldr	r0, [r7, #4]
 804b07e:	f000 fb19 	bl	804b6b4 <USBH_CtlReq>
 804b082:	4603      	mov	r3, r0
}
 804b084:	4618      	mov	r0, r3
 804b086:	3708      	adds	r7, #8
 804b088:	46bd      	mov	sp, r7
 804b08a:	bd80      	pop	{r7, pc}

0804b08c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 804b08c:	b580      	push	{r7, lr}
 804b08e:	b082      	sub	sp, #8
 804b090:	af00      	add	r7, sp, #0
 804b092:	6078      	str	r0, [r7, #4]
 804b094:	460b      	mov	r3, r1
 804b096:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 804b098:	687b      	ldr	r3, [r7, #4]
 804b09a:	789b      	ldrb	r3, [r3, #2]
 804b09c:	2b01      	cmp	r3, #1
 804b09e:	d10e      	bne.n	804b0be <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 804b0a0:	687b      	ldr	r3, [r7, #4]
 804b0a2:	2200      	movs	r2, #0
 804b0a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 804b0a6:	687b      	ldr	r3, [r7, #4]
 804b0a8:	2209      	movs	r2, #9
 804b0aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 804b0ac:	687b      	ldr	r3, [r7, #4]
 804b0ae:	887a      	ldrh	r2, [r7, #2]
 804b0b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804b0b2:	687b      	ldr	r3, [r7, #4]
 804b0b4:	2200      	movs	r2, #0
 804b0b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804b0b8:	687b      	ldr	r3, [r7, #4]
 804b0ba:	2200      	movs	r2, #0
 804b0bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804b0be:	2200      	movs	r2, #0
 804b0c0:	2100      	movs	r1, #0
 804b0c2:	6878      	ldr	r0, [r7, #4]
 804b0c4:	f000 faf6 	bl	804b6b4 <USBH_CtlReq>
 804b0c8:	4603      	mov	r3, r0
}
 804b0ca:	4618      	mov	r0, r3
 804b0cc:	3708      	adds	r7, #8
 804b0ce:	46bd      	mov	sp, r7
 804b0d0:	bd80      	pop	{r7, pc}

0804b0d2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 804b0d2:	b580      	push	{r7, lr}
 804b0d4:	b082      	sub	sp, #8
 804b0d6:	af00      	add	r7, sp, #0
 804b0d8:	6078      	str	r0, [r7, #4]
 804b0da:	460b      	mov	r3, r1
 804b0dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804b0de:	687b      	ldr	r3, [r7, #4]
 804b0e0:	789b      	ldrb	r3, [r3, #2]
 804b0e2:	2b01      	cmp	r3, #1
 804b0e4:	d10f      	bne.n	804b106 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 804b0e6:	687b      	ldr	r3, [r7, #4]
 804b0e8:	2200      	movs	r2, #0
 804b0ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 804b0ec:	687b      	ldr	r3, [r7, #4]
 804b0ee:	2203      	movs	r2, #3
 804b0f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 804b0f2:	78fb      	ldrb	r3, [r7, #3]
 804b0f4:	b29a      	uxth	r2, r3
 804b0f6:	687b      	ldr	r3, [r7, #4]
 804b0f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804b0fa:	687b      	ldr	r3, [r7, #4]
 804b0fc:	2200      	movs	r2, #0
 804b0fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804b100:	687b      	ldr	r3, [r7, #4]
 804b102:	2200      	movs	r2, #0
 804b104:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804b106:	2200      	movs	r2, #0
 804b108:	2100      	movs	r1, #0
 804b10a:	6878      	ldr	r0, [r7, #4]
 804b10c:	f000 fad2 	bl	804b6b4 <USBH_CtlReq>
 804b110:	4603      	mov	r3, r0
}
 804b112:	4618      	mov	r0, r3
 804b114:	3708      	adds	r7, #8
 804b116:	46bd      	mov	sp, r7
 804b118:	bd80      	pop	{r7, pc}

0804b11a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 804b11a:	b580      	push	{r7, lr}
 804b11c:	b082      	sub	sp, #8
 804b11e:	af00      	add	r7, sp, #0
 804b120:	6078      	str	r0, [r7, #4]
 804b122:	460b      	mov	r3, r1
 804b124:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804b126:	687b      	ldr	r3, [r7, #4]
 804b128:	789b      	ldrb	r3, [r3, #2]
 804b12a:	2b01      	cmp	r3, #1
 804b12c:	d10f      	bne.n	804b14e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 804b12e:	687b      	ldr	r3, [r7, #4]
 804b130:	2202      	movs	r2, #2
 804b132:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 804b134:	687b      	ldr	r3, [r7, #4]
 804b136:	2201      	movs	r2, #1
 804b138:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 804b13a:	687b      	ldr	r3, [r7, #4]
 804b13c:	2200      	movs	r2, #0
 804b13e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 804b140:	78fb      	ldrb	r3, [r7, #3]
 804b142:	b29a      	uxth	r2, r3
 804b144:	687b      	ldr	r3, [r7, #4]
 804b146:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804b148:	687b      	ldr	r3, [r7, #4]
 804b14a:	2200      	movs	r2, #0
 804b14c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 804b14e:	2200      	movs	r2, #0
 804b150:	2100      	movs	r1, #0
 804b152:	6878      	ldr	r0, [r7, #4]
 804b154:	f000 faae 	bl	804b6b4 <USBH_CtlReq>
 804b158:	4603      	mov	r3, r0
}
 804b15a:	4618      	mov	r0, r3
 804b15c:	3708      	adds	r7, #8
 804b15e:	46bd      	mov	sp, r7
 804b160:	bd80      	pop	{r7, pc}

0804b162 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 804b162:	b480      	push	{r7}
 804b164:	b085      	sub	sp, #20
 804b166:	af00      	add	r7, sp, #0
 804b168:	60f8      	str	r0, [r7, #12]
 804b16a:	60b9      	str	r1, [r7, #8]
 804b16c:	4613      	mov	r3, r2
 804b16e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 804b170:	68bb      	ldr	r3, [r7, #8]
 804b172:	781a      	ldrb	r2, [r3, #0]
 804b174:	68fb      	ldr	r3, [r7, #12]
 804b176:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 804b178:	68bb      	ldr	r3, [r7, #8]
 804b17a:	785a      	ldrb	r2, [r3, #1]
 804b17c:	68fb      	ldr	r3, [r7, #12]
 804b17e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 804b180:	68bb      	ldr	r3, [r7, #8]
 804b182:	3302      	adds	r3, #2
 804b184:	781b      	ldrb	r3, [r3, #0]
 804b186:	b29a      	uxth	r2, r3
 804b188:	68bb      	ldr	r3, [r7, #8]
 804b18a:	3303      	adds	r3, #3
 804b18c:	781b      	ldrb	r3, [r3, #0]
 804b18e:	b29b      	uxth	r3, r3
 804b190:	021b      	lsls	r3, r3, #8
 804b192:	b29b      	uxth	r3, r3
 804b194:	4313      	orrs	r3, r2
 804b196:	b29a      	uxth	r2, r3
 804b198:	68fb      	ldr	r3, [r7, #12]
 804b19a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 804b19c:	68bb      	ldr	r3, [r7, #8]
 804b19e:	791a      	ldrb	r2, [r3, #4]
 804b1a0:	68fb      	ldr	r3, [r7, #12]
 804b1a2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 804b1a4:	68bb      	ldr	r3, [r7, #8]
 804b1a6:	795a      	ldrb	r2, [r3, #5]
 804b1a8:	68fb      	ldr	r3, [r7, #12]
 804b1aa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 804b1ac:	68bb      	ldr	r3, [r7, #8]
 804b1ae:	799a      	ldrb	r2, [r3, #6]
 804b1b0:	68fb      	ldr	r3, [r7, #12]
 804b1b2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 804b1b4:	68bb      	ldr	r3, [r7, #8]
 804b1b6:	79da      	ldrb	r2, [r3, #7]
 804b1b8:	68fb      	ldr	r3, [r7, #12]
 804b1ba:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 804b1bc:	68fb      	ldr	r3, [r7, #12]
 804b1be:	79db      	ldrb	r3, [r3, #7]
 804b1c0:	2b20      	cmp	r3, #32
 804b1c2:	dc11      	bgt.n	804b1e8 <USBH_ParseDevDesc+0x86>
 804b1c4:	2b08      	cmp	r3, #8
 804b1c6:	db16      	blt.n	804b1f6 <USBH_ParseDevDesc+0x94>
 804b1c8:	3b08      	subs	r3, #8
 804b1ca:	2201      	movs	r2, #1
 804b1cc:	fa02 f303 	lsl.w	r3, r2, r3
 804b1d0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 804b1d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804b1d8:	2b00      	cmp	r3, #0
 804b1da:	bf14      	ite	ne
 804b1dc:	2301      	movne	r3, #1
 804b1de:	2300      	moveq	r3, #0
 804b1e0:	b2db      	uxtb	r3, r3
 804b1e2:	2b00      	cmp	r3, #0
 804b1e4:	d102      	bne.n	804b1ec <USBH_ParseDevDesc+0x8a>
 804b1e6:	e006      	b.n	804b1f6 <USBH_ParseDevDesc+0x94>
 804b1e8:	2b40      	cmp	r3, #64	; 0x40
 804b1ea:	d104      	bne.n	804b1f6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 804b1ec:	68fb      	ldr	r3, [r7, #12]
 804b1ee:	79da      	ldrb	r2, [r3, #7]
 804b1f0:	68fb      	ldr	r3, [r7, #12]
 804b1f2:	71da      	strb	r2, [r3, #7]
      break;
 804b1f4:	e003      	b.n	804b1fe <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 804b1f6:	68fb      	ldr	r3, [r7, #12]
 804b1f8:	2240      	movs	r2, #64	; 0x40
 804b1fa:	71da      	strb	r2, [r3, #7]
      break;
 804b1fc:	bf00      	nop
  }

  if (length > 8U)
 804b1fe:	88fb      	ldrh	r3, [r7, #6]
 804b200:	2b08      	cmp	r3, #8
 804b202:	d939      	bls.n	804b278 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 804b204:	68bb      	ldr	r3, [r7, #8]
 804b206:	3308      	adds	r3, #8
 804b208:	781b      	ldrb	r3, [r3, #0]
 804b20a:	b29a      	uxth	r2, r3
 804b20c:	68bb      	ldr	r3, [r7, #8]
 804b20e:	3309      	adds	r3, #9
 804b210:	781b      	ldrb	r3, [r3, #0]
 804b212:	b29b      	uxth	r3, r3
 804b214:	021b      	lsls	r3, r3, #8
 804b216:	b29b      	uxth	r3, r3
 804b218:	4313      	orrs	r3, r2
 804b21a:	b29a      	uxth	r2, r3
 804b21c:	68fb      	ldr	r3, [r7, #12]
 804b21e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 804b220:	68bb      	ldr	r3, [r7, #8]
 804b222:	330a      	adds	r3, #10
 804b224:	781b      	ldrb	r3, [r3, #0]
 804b226:	b29a      	uxth	r2, r3
 804b228:	68bb      	ldr	r3, [r7, #8]
 804b22a:	330b      	adds	r3, #11
 804b22c:	781b      	ldrb	r3, [r3, #0]
 804b22e:	b29b      	uxth	r3, r3
 804b230:	021b      	lsls	r3, r3, #8
 804b232:	b29b      	uxth	r3, r3
 804b234:	4313      	orrs	r3, r2
 804b236:	b29a      	uxth	r2, r3
 804b238:	68fb      	ldr	r3, [r7, #12]
 804b23a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 804b23c:	68bb      	ldr	r3, [r7, #8]
 804b23e:	330c      	adds	r3, #12
 804b240:	781b      	ldrb	r3, [r3, #0]
 804b242:	b29a      	uxth	r2, r3
 804b244:	68bb      	ldr	r3, [r7, #8]
 804b246:	330d      	adds	r3, #13
 804b248:	781b      	ldrb	r3, [r3, #0]
 804b24a:	b29b      	uxth	r3, r3
 804b24c:	021b      	lsls	r3, r3, #8
 804b24e:	b29b      	uxth	r3, r3
 804b250:	4313      	orrs	r3, r2
 804b252:	b29a      	uxth	r2, r3
 804b254:	68fb      	ldr	r3, [r7, #12]
 804b256:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 804b258:	68bb      	ldr	r3, [r7, #8]
 804b25a:	7b9a      	ldrb	r2, [r3, #14]
 804b25c:	68fb      	ldr	r3, [r7, #12]
 804b25e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 804b260:	68bb      	ldr	r3, [r7, #8]
 804b262:	7bda      	ldrb	r2, [r3, #15]
 804b264:	68fb      	ldr	r3, [r7, #12]
 804b266:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 804b268:	68bb      	ldr	r3, [r7, #8]
 804b26a:	7c1a      	ldrb	r2, [r3, #16]
 804b26c:	68fb      	ldr	r3, [r7, #12]
 804b26e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 804b270:	68bb      	ldr	r3, [r7, #8]
 804b272:	7c5a      	ldrb	r2, [r3, #17]
 804b274:	68fb      	ldr	r3, [r7, #12]
 804b276:	745a      	strb	r2, [r3, #17]
  }
}
 804b278:	bf00      	nop
 804b27a:	3714      	adds	r7, #20
 804b27c:	46bd      	mov	sp, r7
 804b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b282:	4770      	bx	lr

0804b284 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 804b284:	b580      	push	{r7, lr}
 804b286:	b08c      	sub	sp, #48	; 0x30
 804b288:	af00      	add	r7, sp, #0
 804b28a:	60f8      	str	r0, [r7, #12]
 804b28c:	60b9      	str	r1, [r7, #8]
 804b28e:	4613      	mov	r3, r2
 804b290:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 804b292:	68fb      	ldr	r3, [r7, #12]
 804b294:	f503 734e 	add.w	r3, r3, #824	; 0x338
 804b298:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 804b29a:	2300      	movs	r3, #0
 804b29c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 804b2a0:	68bb      	ldr	r3, [r7, #8]
 804b2a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 804b2a4:	2300      	movs	r3, #0
 804b2a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 804b2aa:	2300      	movs	r3, #0
 804b2ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 804b2b0:	68bb      	ldr	r3, [r7, #8]
 804b2b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 804b2b4:	68bb      	ldr	r3, [r7, #8]
 804b2b6:	781a      	ldrb	r2, [r3, #0]
 804b2b8:	6a3b      	ldr	r3, [r7, #32]
 804b2ba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 804b2bc:	68bb      	ldr	r3, [r7, #8]
 804b2be:	785a      	ldrb	r2, [r3, #1]
 804b2c0:	6a3b      	ldr	r3, [r7, #32]
 804b2c2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 804b2c4:	68bb      	ldr	r3, [r7, #8]
 804b2c6:	3302      	adds	r3, #2
 804b2c8:	781b      	ldrb	r3, [r3, #0]
 804b2ca:	b29a      	uxth	r2, r3
 804b2cc:	68bb      	ldr	r3, [r7, #8]
 804b2ce:	3303      	adds	r3, #3
 804b2d0:	781b      	ldrb	r3, [r3, #0]
 804b2d2:	b29b      	uxth	r3, r3
 804b2d4:	021b      	lsls	r3, r3, #8
 804b2d6:	b29b      	uxth	r3, r3
 804b2d8:	4313      	orrs	r3, r2
 804b2da:	b29b      	uxth	r3, r3
 804b2dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804b2e0:	bf28      	it	cs
 804b2e2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 804b2e6:	b29a      	uxth	r2, r3
 804b2e8:	6a3b      	ldr	r3, [r7, #32]
 804b2ea:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 804b2ec:	68bb      	ldr	r3, [r7, #8]
 804b2ee:	791a      	ldrb	r2, [r3, #4]
 804b2f0:	6a3b      	ldr	r3, [r7, #32]
 804b2f2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 804b2f4:	68bb      	ldr	r3, [r7, #8]
 804b2f6:	795a      	ldrb	r2, [r3, #5]
 804b2f8:	6a3b      	ldr	r3, [r7, #32]
 804b2fa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 804b2fc:	68bb      	ldr	r3, [r7, #8]
 804b2fe:	799a      	ldrb	r2, [r3, #6]
 804b300:	6a3b      	ldr	r3, [r7, #32]
 804b302:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 804b304:	68bb      	ldr	r3, [r7, #8]
 804b306:	79da      	ldrb	r2, [r3, #7]
 804b308:	6a3b      	ldr	r3, [r7, #32]
 804b30a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 804b30c:	68bb      	ldr	r3, [r7, #8]
 804b30e:	7a1a      	ldrb	r2, [r3, #8]
 804b310:	6a3b      	ldr	r3, [r7, #32]
 804b312:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 804b314:	6a3b      	ldr	r3, [r7, #32]
 804b316:	781b      	ldrb	r3, [r3, #0]
 804b318:	2b09      	cmp	r3, #9
 804b31a:	d002      	beq.n	804b322 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 804b31c:	6a3b      	ldr	r3, [r7, #32]
 804b31e:	2209      	movs	r2, #9
 804b320:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 804b322:	88fb      	ldrh	r3, [r7, #6]
 804b324:	2b09      	cmp	r3, #9
 804b326:	f240 809d 	bls.w	804b464 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 804b32a:	2309      	movs	r3, #9
 804b32c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 804b32e:	2300      	movs	r3, #0
 804b330:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 804b332:	e081      	b.n	804b438 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 804b334:	f107 0316 	add.w	r3, r7, #22
 804b338:	4619      	mov	r1, r3
 804b33a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804b33c:	f000 f99f 	bl	804b67e <USBH_GetNextDesc>
 804b340:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 804b342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b344:	785b      	ldrb	r3, [r3, #1]
 804b346:	2b04      	cmp	r3, #4
 804b348:	d176      	bne.n	804b438 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 804b34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b34c:	781b      	ldrb	r3, [r3, #0]
 804b34e:	2b09      	cmp	r3, #9
 804b350:	d002      	beq.n	804b358 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 804b352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b354:	2209      	movs	r2, #9
 804b356:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 804b358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804b35c:	221a      	movs	r2, #26
 804b35e:	fb02 f303 	mul.w	r3, r2, r3
 804b362:	3308      	adds	r3, #8
 804b364:	6a3a      	ldr	r2, [r7, #32]
 804b366:	4413      	add	r3, r2
 804b368:	3302      	adds	r3, #2
 804b36a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 804b36c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804b36e:	69f8      	ldr	r0, [r7, #28]
 804b370:	f000 f87e 	bl	804b470 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 804b374:	2300      	movs	r3, #0
 804b376:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 804b37a:	2300      	movs	r3, #0
 804b37c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 804b37e:	e043      	b.n	804b408 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 804b380:	f107 0316 	add.w	r3, r7, #22
 804b384:	4619      	mov	r1, r3
 804b386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804b388:	f000 f979 	bl	804b67e <USBH_GetNextDesc>
 804b38c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 804b38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b390:	785b      	ldrb	r3, [r3, #1]
 804b392:	2b05      	cmp	r3, #5
 804b394:	d138      	bne.n	804b408 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 804b396:	69fb      	ldr	r3, [r7, #28]
 804b398:	795b      	ldrb	r3, [r3, #5]
 804b39a:	2b01      	cmp	r3, #1
 804b39c:	d10f      	bne.n	804b3be <USBH_ParseCfgDesc+0x13a>
 804b39e:	69fb      	ldr	r3, [r7, #28]
 804b3a0:	799b      	ldrb	r3, [r3, #6]
 804b3a2:	2b02      	cmp	r3, #2
 804b3a4:	d10b      	bne.n	804b3be <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804b3a6:	69fb      	ldr	r3, [r7, #28]
 804b3a8:	79db      	ldrb	r3, [r3, #7]
 804b3aa:	2b00      	cmp	r3, #0
 804b3ac:	d10f      	bne.n	804b3ce <USBH_ParseCfgDesc+0x14a>
 804b3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b3b0:	781b      	ldrb	r3, [r3, #0]
 804b3b2:	2b09      	cmp	r3, #9
 804b3b4:	d00b      	beq.n	804b3ce <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 804b3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b3b8:	2209      	movs	r2, #9
 804b3ba:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804b3bc:	e007      	b.n	804b3ce <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 804b3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b3c0:	781b      	ldrb	r3, [r3, #0]
 804b3c2:	2b07      	cmp	r3, #7
 804b3c4:	d004      	beq.n	804b3d0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 804b3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b3c8:	2207      	movs	r2, #7
 804b3ca:	701a      	strb	r2, [r3, #0]
 804b3cc:	e000      	b.n	804b3d0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804b3ce:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 804b3d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804b3d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804b3d8:	3201      	adds	r2, #1
 804b3da:	00d2      	lsls	r2, r2, #3
 804b3dc:	211a      	movs	r1, #26
 804b3de:	fb01 f303 	mul.w	r3, r1, r3
 804b3e2:	4413      	add	r3, r2
 804b3e4:	3308      	adds	r3, #8
 804b3e6:	6a3a      	ldr	r2, [r7, #32]
 804b3e8:	4413      	add	r3, r2
 804b3ea:	3304      	adds	r3, #4
 804b3ec:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 804b3ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804b3f0:	69b9      	ldr	r1, [r7, #24]
 804b3f2:	68f8      	ldr	r0, [r7, #12]
 804b3f4:	f000 f86b 	bl	804b4ce <USBH_ParseEPDesc>
 804b3f8:	4603      	mov	r3, r0
 804b3fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 804b3fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 804b402:	3301      	adds	r3, #1
 804b404:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 804b408:	69fb      	ldr	r3, [r7, #28]
 804b40a:	791b      	ldrb	r3, [r3, #4]
 804b40c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804b410:	429a      	cmp	r2, r3
 804b412:	d204      	bcs.n	804b41e <USBH_ParseCfgDesc+0x19a>
 804b414:	6a3b      	ldr	r3, [r7, #32]
 804b416:	885a      	ldrh	r2, [r3, #2]
 804b418:	8afb      	ldrh	r3, [r7, #22]
 804b41a:	429a      	cmp	r2, r3
 804b41c:	d8b0      	bhi.n	804b380 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 804b41e:	69fb      	ldr	r3, [r7, #28]
 804b420:	791b      	ldrb	r3, [r3, #4]
 804b422:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804b426:	429a      	cmp	r2, r3
 804b428:	d201      	bcs.n	804b42e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 804b42a:	2303      	movs	r3, #3
 804b42c:	e01c      	b.n	804b468 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 804b42e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804b432:	3301      	adds	r3, #1
 804b434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 804b438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804b43c:	2b01      	cmp	r3, #1
 804b43e:	d805      	bhi.n	804b44c <USBH_ParseCfgDesc+0x1c8>
 804b440:	6a3b      	ldr	r3, [r7, #32]
 804b442:	885a      	ldrh	r2, [r3, #2]
 804b444:	8afb      	ldrh	r3, [r7, #22]
 804b446:	429a      	cmp	r2, r3
 804b448:	f63f af74 	bhi.w	804b334 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 804b44c:	6a3b      	ldr	r3, [r7, #32]
 804b44e:	791b      	ldrb	r3, [r3, #4]
 804b450:	2b02      	cmp	r3, #2
 804b452:	bf28      	it	cs
 804b454:	2302      	movcs	r3, #2
 804b456:	b2db      	uxtb	r3, r3
 804b458:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 804b45c:	429a      	cmp	r2, r3
 804b45e:	d201      	bcs.n	804b464 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 804b460:	2303      	movs	r3, #3
 804b462:	e001      	b.n	804b468 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 804b464:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 804b468:	4618      	mov	r0, r3
 804b46a:	3730      	adds	r7, #48	; 0x30
 804b46c:	46bd      	mov	sp, r7
 804b46e:	bd80      	pop	{r7, pc}

0804b470 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 804b470:	b480      	push	{r7}
 804b472:	b083      	sub	sp, #12
 804b474:	af00      	add	r7, sp, #0
 804b476:	6078      	str	r0, [r7, #4]
 804b478:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 804b47a:	683b      	ldr	r3, [r7, #0]
 804b47c:	781a      	ldrb	r2, [r3, #0]
 804b47e:	687b      	ldr	r3, [r7, #4]
 804b480:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 804b482:	683b      	ldr	r3, [r7, #0]
 804b484:	785a      	ldrb	r2, [r3, #1]
 804b486:	687b      	ldr	r3, [r7, #4]
 804b488:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 804b48a:	683b      	ldr	r3, [r7, #0]
 804b48c:	789a      	ldrb	r2, [r3, #2]
 804b48e:	687b      	ldr	r3, [r7, #4]
 804b490:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 804b492:	683b      	ldr	r3, [r7, #0]
 804b494:	78da      	ldrb	r2, [r3, #3]
 804b496:	687b      	ldr	r3, [r7, #4]
 804b498:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 804b49a:	683b      	ldr	r3, [r7, #0]
 804b49c:	791a      	ldrb	r2, [r3, #4]
 804b49e:	687b      	ldr	r3, [r7, #4]
 804b4a0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 804b4a2:	683b      	ldr	r3, [r7, #0]
 804b4a4:	795a      	ldrb	r2, [r3, #5]
 804b4a6:	687b      	ldr	r3, [r7, #4]
 804b4a8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 804b4aa:	683b      	ldr	r3, [r7, #0]
 804b4ac:	799a      	ldrb	r2, [r3, #6]
 804b4ae:	687b      	ldr	r3, [r7, #4]
 804b4b0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 804b4b2:	683b      	ldr	r3, [r7, #0]
 804b4b4:	79da      	ldrb	r2, [r3, #7]
 804b4b6:	687b      	ldr	r3, [r7, #4]
 804b4b8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 804b4ba:	683b      	ldr	r3, [r7, #0]
 804b4bc:	7a1a      	ldrb	r2, [r3, #8]
 804b4be:	687b      	ldr	r3, [r7, #4]
 804b4c0:	721a      	strb	r2, [r3, #8]
}
 804b4c2:	bf00      	nop
 804b4c4:	370c      	adds	r7, #12
 804b4c6:	46bd      	mov	sp, r7
 804b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b4cc:	4770      	bx	lr

0804b4ce <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 804b4ce:	b480      	push	{r7}
 804b4d0:	b087      	sub	sp, #28
 804b4d2:	af00      	add	r7, sp, #0
 804b4d4:	60f8      	str	r0, [r7, #12]
 804b4d6:	60b9      	str	r1, [r7, #8]
 804b4d8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 804b4da:	2300      	movs	r3, #0
 804b4dc:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 804b4de:	687b      	ldr	r3, [r7, #4]
 804b4e0:	781a      	ldrb	r2, [r3, #0]
 804b4e2:	68bb      	ldr	r3, [r7, #8]
 804b4e4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 804b4e6:	687b      	ldr	r3, [r7, #4]
 804b4e8:	785a      	ldrb	r2, [r3, #1]
 804b4ea:	68bb      	ldr	r3, [r7, #8]
 804b4ec:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 804b4ee:	687b      	ldr	r3, [r7, #4]
 804b4f0:	789a      	ldrb	r2, [r3, #2]
 804b4f2:	68bb      	ldr	r3, [r7, #8]
 804b4f4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 804b4f6:	687b      	ldr	r3, [r7, #4]
 804b4f8:	78da      	ldrb	r2, [r3, #3]
 804b4fa:	68bb      	ldr	r3, [r7, #8]
 804b4fc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 804b4fe:	687b      	ldr	r3, [r7, #4]
 804b500:	3304      	adds	r3, #4
 804b502:	781b      	ldrb	r3, [r3, #0]
 804b504:	b29a      	uxth	r2, r3
 804b506:	687b      	ldr	r3, [r7, #4]
 804b508:	3305      	adds	r3, #5
 804b50a:	781b      	ldrb	r3, [r3, #0]
 804b50c:	b29b      	uxth	r3, r3
 804b50e:	021b      	lsls	r3, r3, #8
 804b510:	b29b      	uxth	r3, r3
 804b512:	4313      	orrs	r3, r2
 804b514:	b29a      	uxth	r2, r3
 804b516:	68bb      	ldr	r3, [r7, #8]
 804b518:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 804b51a:	687b      	ldr	r3, [r7, #4]
 804b51c:	799a      	ldrb	r2, [r3, #6]
 804b51e:	68bb      	ldr	r3, [r7, #8]
 804b520:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 804b522:	68bb      	ldr	r3, [r7, #8]
 804b524:	889b      	ldrh	r3, [r3, #4]
 804b526:	2b00      	cmp	r3, #0
 804b528:	d102      	bne.n	804b530 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 804b52a:	2303      	movs	r3, #3
 804b52c:	75fb      	strb	r3, [r7, #23]
 804b52e:	e033      	b.n	804b598 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 804b530:	68bb      	ldr	r3, [r7, #8]
 804b532:	889b      	ldrh	r3, [r3, #4]
 804b534:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 804b538:	f023 0307 	bic.w	r3, r3, #7
 804b53c:	b29a      	uxth	r2, r3
 804b53e:	68bb      	ldr	r3, [r7, #8]
 804b540:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 804b542:	68bb      	ldr	r3, [r7, #8]
 804b544:	889b      	ldrh	r3, [r3, #4]
 804b546:	b21a      	sxth	r2, r3
 804b548:	687b      	ldr	r3, [r7, #4]
 804b54a:	3304      	adds	r3, #4
 804b54c:	781b      	ldrb	r3, [r3, #0]
 804b54e:	b299      	uxth	r1, r3
 804b550:	687b      	ldr	r3, [r7, #4]
 804b552:	3305      	adds	r3, #5
 804b554:	781b      	ldrb	r3, [r3, #0]
 804b556:	b29b      	uxth	r3, r3
 804b558:	021b      	lsls	r3, r3, #8
 804b55a:	b29b      	uxth	r3, r3
 804b55c:	430b      	orrs	r3, r1
 804b55e:	b29b      	uxth	r3, r3
 804b560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 804b564:	2b00      	cmp	r3, #0
 804b566:	d110      	bne.n	804b58a <USBH_ParseEPDesc+0xbc>
 804b568:	687b      	ldr	r3, [r7, #4]
 804b56a:	3304      	adds	r3, #4
 804b56c:	781b      	ldrb	r3, [r3, #0]
 804b56e:	b299      	uxth	r1, r3
 804b570:	687b      	ldr	r3, [r7, #4]
 804b572:	3305      	adds	r3, #5
 804b574:	781b      	ldrb	r3, [r3, #0]
 804b576:	b29b      	uxth	r3, r3
 804b578:	021b      	lsls	r3, r3, #8
 804b57a:	b29b      	uxth	r3, r3
 804b57c:	430b      	orrs	r3, r1
 804b57e:	b29b      	uxth	r3, r3
 804b580:	b21b      	sxth	r3, r3
 804b582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 804b586:	b21b      	sxth	r3, r3
 804b588:	e001      	b.n	804b58e <USBH_ParseEPDesc+0xc0>
 804b58a:	f44f 7300 	mov.w	r3, #512	; 0x200
 804b58e:	4313      	orrs	r3, r2
 804b590:	b21b      	sxth	r3, r3
 804b592:	b29a      	uxth	r2, r3
 804b594:	68bb      	ldr	r3, [r7, #8]
 804b596:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 804b598:	68fb      	ldr	r3, [r7, #12]
 804b59a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804b59e:	2b00      	cmp	r3, #0
 804b5a0:	d116      	bne.n	804b5d0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 804b5a2:	68bb      	ldr	r3, [r7, #8]
 804b5a4:	78db      	ldrb	r3, [r3, #3]
 804b5a6:	f003 0303 	and.w	r3, r3, #3
 804b5aa:	2b01      	cmp	r3, #1
 804b5ac:	d005      	beq.n	804b5ba <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 804b5ae:	68bb      	ldr	r3, [r7, #8]
 804b5b0:	78db      	ldrb	r3, [r3, #3]
 804b5b2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 804b5b6:	2b03      	cmp	r3, #3
 804b5b8:	d127      	bne.n	804b60a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 804b5ba:	68bb      	ldr	r3, [r7, #8]
 804b5bc:	799b      	ldrb	r3, [r3, #6]
 804b5be:	2b00      	cmp	r3, #0
 804b5c0:	d003      	beq.n	804b5ca <USBH_ParseEPDesc+0xfc>
 804b5c2:	68bb      	ldr	r3, [r7, #8]
 804b5c4:	799b      	ldrb	r3, [r3, #6]
 804b5c6:	2b10      	cmp	r3, #16
 804b5c8:	d91f      	bls.n	804b60a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804b5ca:	2303      	movs	r3, #3
 804b5cc:	75fb      	strb	r3, [r7, #23]
 804b5ce:	e01c      	b.n	804b60a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 804b5d0:	68bb      	ldr	r3, [r7, #8]
 804b5d2:	78db      	ldrb	r3, [r3, #3]
 804b5d4:	f003 0303 	and.w	r3, r3, #3
 804b5d8:	2b01      	cmp	r3, #1
 804b5da:	d10a      	bne.n	804b5f2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 804b5dc:	68bb      	ldr	r3, [r7, #8]
 804b5de:	799b      	ldrb	r3, [r3, #6]
 804b5e0:	2b00      	cmp	r3, #0
 804b5e2:	d003      	beq.n	804b5ec <USBH_ParseEPDesc+0x11e>
 804b5e4:	68bb      	ldr	r3, [r7, #8]
 804b5e6:	799b      	ldrb	r3, [r3, #6]
 804b5e8:	2b10      	cmp	r3, #16
 804b5ea:	d90e      	bls.n	804b60a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804b5ec:	2303      	movs	r3, #3
 804b5ee:	75fb      	strb	r3, [r7, #23]
 804b5f0:	e00b      	b.n	804b60a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 804b5f2:	68bb      	ldr	r3, [r7, #8]
 804b5f4:	78db      	ldrb	r3, [r3, #3]
 804b5f6:	f003 0303 	and.w	r3, r3, #3
 804b5fa:	2b03      	cmp	r3, #3
 804b5fc:	d105      	bne.n	804b60a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 804b5fe:	68bb      	ldr	r3, [r7, #8]
 804b600:	799b      	ldrb	r3, [r3, #6]
 804b602:	2b00      	cmp	r3, #0
 804b604:	d101      	bne.n	804b60a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804b606:	2303      	movs	r3, #3
 804b608:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 804b60a:	7dfb      	ldrb	r3, [r7, #23]
}
 804b60c:	4618      	mov	r0, r3
 804b60e:	371c      	adds	r7, #28
 804b610:	46bd      	mov	sp, r7
 804b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b616:	4770      	bx	lr

0804b618 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 804b618:	b480      	push	{r7}
 804b61a:	b087      	sub	sp, #28
 804b61c:	af00      	add	r7, sp, #0
 804b61e:	60f8      	str	r0, [r7, #12]
 804b620:	60b9      	str	r1, [r7, #8]
 804b622:	4613      	mov	r3, r2
 804b624:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 804b626:	68fb      	ldr	r3, [r7, #12]
 804b628:	3301      	adds	r3, #1
 804b62a:	781b      	ldrb	r3, [r3, #0]
 804b62c:	2b03      	cmp	r3, #3
 804b62e:	d120      	bne.n	804b672 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 804b630:	68fb      	ldr	r3, [r7, #12]
 804b632:	781b      	ldrb	r3, [r3, #0]
 804b634:	1e9a      	subs	r2, r3, #2
 804b636:	88fb      	ldrh	r3, [r7, #6]
 804b638:	4293      	cmp	r3, r2
 804b63a:	bf28      	it	cs
 804b63c:	4613      	movcs	r3, r2
 804b63e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 804b640:	68fb      	ldr	r3, [r7, #12]
 804b642:	3302      	adds	r3, #2
 804b644:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 804b646:	2300      	movs	r3, #0
 804b648:	82fb      	strh	r3, [r7, #22]
 804b64a:	e00b      	b.n	804b664 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 804b64c:	8afb      	ldrh	r3, [r7, #22]
 804b64e:	68fa      	ldr	r2, [r7, #12]
 804b650:	4413      	add	r3, r2
 804b652:	781a      	ldrb	r2, [r3, #0]
 804b654:	68bb      	ldr	r3, [r7, #8]
 804b656:	701a      	strb	r2, [r3, #0]
      pdest++;
 804b658:	68bb      	ldr	r3, [r7, #8]
 804b65a:	3301      	adds	r3, #1
 804b65c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 804b65e:	8afb      	ldrh	r3, [r7, #22]
 804b660:	3302      	adds	r3, #2
 804b662:	82fb      	strh	r3, [r7, #22]
 804b664:	8afa      	ldrh	r2, [r7, #22]
 804b666:	8abb      	ldrh	r3, [r7, #20]
 804b668:	429a      	cmp	r2, r3
 804b66a:	d3ef      	bcc.n	804b64c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 804b66c:	68bb      	ldr	r3, [r7, #8]
 804b66e:	2200      	movs	r2, #0
 804b670:	701a      	strb	r2, [r3, #0]
  }
}
 804b672:	bf00      	nop
 804b674:	371c      	adds	r7, #28
 804b676:	46bd      	mov	sp, r7
 804b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b67c:	4770      	bx	lr

0804b67e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 804b67e:	b480      	push	{r7}
 804b680:	b085      	sub	sp, #20
 804b682:	af00      	add	r7, sp, #0
 804b684:	6078      	str	r0, [r7, #4]
 804b686:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 804b688:	683b      	ldr	r3, [r7, #0]
 804b68a:	881a      	ldrh	r2, [r3, #0]
 804b68c:	687b      	ldr	r3, [r7, #4]
 804b68e:	781b      	ldrb	r3, [r3, #0]
 804b690:	b29b      	uxth	r3, r3
 804b692:	4413      	add	r3, r2
 804b694:	b29a      	uxth	r2, r3
 804b696:	683b      	ldr	r3, [r7, #0]
 804b698:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 804b69a:	687b      	ldr	r3, [r7, #4]
 804b69c:	781b      	ldrb	r3, [r3, #0]
 804b69e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 804b6a0:	687b      	ldr	r3, [r7, #4]
 804b6a2:	4413      	add	r3, r2
 804b6a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 804b6a6:	68fb      	ldr	r3, [r7, #12]
}
 804b6a8:	4618      	mov	r0, r3
 804b6aa:	3714      	adds	r7, #20
 804b6ac:	46bd      	mov	sp, r7
 804b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b6b2:	4770      	bx	lr

0804b6b4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 804b6b4:	b580      	push	{r7, lr}
 804b6b6:	b086      	sub	sp, #24
 804b6b8:	af00      	add	r7, sp, #0
 804b6ba:	60f8      	str	r0, [r7, #12]
 804b6bc:	60b9      	str	r1, [r7, #8]
 804b6be:	4613      	mov	r3, r2
 804b6c0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 804b6c2:	2301      	movs	r3, #1
 804b6c4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 804b6c6:	68fb      	ldr	r3, [r7, #12]
 804b6c8:	789b      	ldrb	r3, [r3, #2]
 804b6ca:	2b01      	cmp	r3, #1
 804b6cc:	d002      	beq.n	804b6d4 <USBH_CtlReq+0x20>
 804b6ce:	2b02      	cmp	r3, #2
 804b6d0:	d00f      	beq.n	804b6f2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 804b6d2:	e027      	b.n	804b724 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 804b6d4:	68fb      	ldr	r3, [r7, #12]
 804b6d6:	68ba      	ldr	r2, [r7, #8]
 804b6d8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 804b6da:	68fb      	ldr	r3, [r7, #12]
 804b6dc:	88fa      	ldrh	r2, [r7, #6]
 804b6de:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 804b6e0:	68fb      	ldr	r3, [r7, #12]
 804b6e2:	2201      	movs	r2, #1
 804b6e4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 804b6e6:	68fb      	ldr	r3, [r7, #12]
 804b6e8:	2202      	movs	r2, #2
 804b6ea:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 804b6ec:	2301      	movs	r3, #1
 804b6ee:	75fb      	strb	r3, [r7, #23]
      break;
 804b6f0:	e018      	b.n	804b724 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 804b6f2:	68f8      	ldr	r0, [r7, #12]
 804b6f4:	f000 f81c 	bl	804b730 <USBH_HandleControl>
 804b6f8:	4603      	mov	r3, r0
 804b6fa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 804b6fc:	7dfb      	ldrb	r3, [r7, #23]
 804b6fe:	2b00      	cmp	r3, #0
 804b700:	d002      	beq.n	804b708 <USBH_CtlReq+0x54>
 804b702:	7dfb      	ldrb	r3, [r7, #23]
 804b704:	2b03      	cmp	r3, #3
 804b706:	d106      	bne.n	804b716 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 804b708:	68fb      	ldr	r3, [r7, #12]
 804b70a:	2201      	movs	r2, #1
 804b70c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 804b70e:	68fb      	ldr	r3, [r7, #12]
 804b710:	2200      	movs	r2, #0
 804b712:	761a      	strb	r2, [r3, #24]
      break;
 804b714:	e005      	b.n	804b722 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 804b716:	7dfb      	ldrb	r3, [r7, #23]
 804b718:	2b02      	cmp	r3, #2
 804b71a:	d102      	bne.n	804b722 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 804b71c:	68fb      	ldr	r3, [r7, #12]
 804b71e:	2201      	movs	r2, #1
 804b720:	709a      	strb	r2, [r3, #2]
      break;
 804b722:	bf00      	nop
  }
  return status;
 804b724:	7dfb      	ldrb	r3, [r7, #23]
}
 804b726:	4618      	mov	r0, r3
 804b728:	3718      	adds	r7, #24
 804b72a:	46bd      	mov	sp, r7
 804b72c:	bd80      	pop	{r7, pc}
	...

0804b730 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 804b730:	b580      	push	{r7, lr}
 804b732:	b086      	sub	sp, #24
 804b734:	af02      	add	r7, sp, #8
 804b736:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 804b738:	2301      	movs	r3, #1
 804b73a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804b73c:	2300      	movs	r3, #0
 804b73e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 804b740:	687b      	ldr	r3, [r7, #4]
 804b742:	7e1b      	ldrb	r3, [r3, #24]
 804b744:	3b01      	subs	r3, #1
 804b746:	2b0a      	cmp	r3, #10
 804b748:	f200 8156 	bhi.w	804b9f8 <USBH_HandleControl+0x2c8>
 804b74c:	a201      	add	r2, pc, #4	; (adr r2, 804b754 <USBH_HandleControl+0x24>)
 804b74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804b752:	bf00      	nop
 804b754:	0804b781 	.word	0x0804b781
 804b758:	0804b79b 	.word	0x0804b79b
 804b75c:	0804b805 	.word	0x0804b805
 804b760:	0804b82b 	.word	0x0804b82b
 804b764:	0804b863 	.word	0x0804b863
 804b768:	0804b88d 	.word	0x0804b88d
 804b76c:	0804b8df 	.word	0x0804b8df
 804b770:	0804b901 	.word	0x0804b901
 804b774:	0804b93d 	.word	0x0804b93d
 804b778:	0804b963 	.word	0x0804b963
 804b77c:	0804b9a1 	.word	0x0804b9a1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 804b780:	687b      	ldr	r3, [r7, #4]
 804b782:	f103 0110 	add.w	r1, r3, #16
 804b786:	687b      	ldr	r3, [r7, #4]
 804b788:	795b      	ldrb	r3, [r3, #5]
 804b78a:	461a      	mov	r2, r3
 804b78c:	6878      	ldr	r0, [r7, #4]
 804b78e:	f000 f943 	bl	804ba18 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 804b792:	687b      	ldr	r3, [r7, #4]
 804b794:	2202      	movs	r2, #2
 804b796:	761a      	strb	r2, [r3, #24]
      break;
 804b798:	e139      	b.n	804ba0e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804b79a:	687b      	ldr	r3, [r7, #4]
 804b79c:	795b      	ldrb	r3, [r3, #5]
 804b79e:	4619      	mov	r1, r3
 804b7a0:	6878      	ldr	r0, [r7, #4]
 804b7a2:	f000 fccb 	bl	804c13c <USBH_LL_GetURBState>
 804b7a6:	4603      	mov	r3, r0
 804b7a8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 804b7aa:	7bbb      	ldrb	r3, [r7, #14]
 804b7ac:	2b01      	cmp	r3, #1
 804b7ae:	d11e      	bne.n	804b7ee <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 804b7b0:	687b      	ldr	r3, [r7, #4]
 804b7b2:	7c1b      	ldrb	r3, [r3, #16]
 804b7b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 804b7b8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 804b7ba:	687b      	ldr	r3, [r7, #4]
 804b7bc:	8adb      	ldrh	r3, [r3, #22]
 804b7be:	2b00      	cmp	r3, #0
 804b7c0:	d00a      	beq.n	804b7d8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 804b7c2:	7b7b      	ldrb	r3, [r7, #13]
 804b7c4:	2b80      	cmp	r3, #128	; 0x80
 804b7c6:	d103      	bne.n	804b7d0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 804b7c8:	687b      	ldr	r3, [r7, #4]
 804b7ca:	2203      	movs	r2, #3
 804b7cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804b7ce:	e115      	b.n	804b9fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 804b7d0:	687b      	ldr	r3, [r7, #4]
 804b7d2:	2205      	movs	r2, #5
 804b7d4:	761a      	strb	r2, [r3, #24]
      break;
 804b7d6:	e111      	b.n	804b9fc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 804b7d8:	7b7b      	ldrb	r3, [r7, #13]
 804b7da:	2b80      	cmp	r3, #128	; 0x80
 804b7dc:	d103      	bne.n	804b7e6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 804b7de:	687b      	ldr	r3, [r7, #4]
 804b7e0:	2209      	movs	r2, #9
 804b7e2:	761a      	strb	r2, [r3, #24]
      break;
 804b7e4:	e10a      	b.n	804b9fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 804b7e6:	687b      	ldr	r3, [r7, #4]
 804b7e8:	2207      	movs	r2, #7
 804b7ea:	761a      	strb	r2, [r3, #24]
      break;
 804b7ec:	e106      	b.n	804b9fc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 804b7ee:	7bbb      	ldrb	r3, [r7, #14]
 804b7f0:	2b04      	cmp	r3, #4
 804b7f2:	d003      	beq.n	804b7fc <USBH_HandleControl+0xcc>
 804b7f4:	7bbb      	ldrb	r3, [r7, #14]
 804b7f6:	2b02      	cmp	r3, #2
 804b7f8:	f040 8100 	bne.w	804b9fc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 804b7fc:	687b      	ldr	r3, [r7, #4]
 804b7fe:	220b      	movs	r2, #11
 804b800:	761a      	strb	r2, [r3, #24]
      break;
 804b802:	e0fb      	b.n	804b9fc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 804b804:	687b      	ldr	r3, [r7, #4]
 804b806:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804b80a:	b29a      	uxth	r2, r3
 804b80c:	687b      	ldr	r3, [r7, #4]
 804b80e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 804b810:	687b      	ldr	r3, [r7, #4]
 804b812:	6899      	ldr	r1, [r3, #8]
 804b814:	687b      	ldr	r3, [r7, #4]
 804b816:	899a      	ldrh	r2, [r3, #12]
 804b818:	687b      	ldr	r3, [r7, #4]
 804b81a:	791b      	ldrb	r3, [r3, #4]
 804b81c:	6878      	ldr	r0, [r7, #4]
 804b81e:	f000 f93a 	bl	804ba96 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 804b822:	687b      	ldr	r3, [r7, #4]
 804b824:	2204      	movs	r2, #4
 804b826:	761a      	strb	r2, [r3, #24]
      break;
 804b828:	e0f1      	b.n	804ba0e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 804b82a:	687b      	ldr	r3, [r7, #4]
 804b82c:	791b      	ldrb	r3, [r3, #4]
 804b82e:	4619      	mov	r1, r3
 804b830:	6878      	ldr	r0, [r7, #4]
 804b832:	f000 fc83 	bl	804c13c <USBH_LL_GetURBState>
 804b836:	4603      	mov	r3, r0
 804b838:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 804b83a:	7bbb      	ldrb	r3, [r7, #14]
 804b83c:	2b01      	cmp	r3, #1
 804b83e:	d102      	bne.n	804b846 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 804b840:	687b      	ldr	r3, [r7, #4]
 804b842:	2209      	movs	r2, #9
 804b844:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 804b846:	7bbb      	ldrb	r3, [r7, #14]
 804b848:	2b05      	cmp	r3, #5
 804b84a:	d102      	bne.n	804b852 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 804b84c:	2303      	movs	r3, #3
 804b84e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804b850:	e0d6      	b.n	804ba00 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 804b852:	7bbb      	ldrb	r3, [r7, #14]
 804b854:	2b04      	cmp	r3, #4
 804b856:	f040 80d3 	bne.w	804ba00 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 804b85a:	687b      	ldr	r3, [r7, #4]
 804b85c:	220b      	movs	r2, #11
 804b85e:	761a      	strb	r2, [r3, #24]
      break;
 804b860:	e0ce      	b.n	804ba00 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 804b862:	687b      	ldr	r3, [r7, #4]
 804b864:	6899      	ldr	r1, [r3, #8]
 804b866:	687b      	ldr	r3, [r7, #4]
 804b868:	899a      	ldrh	r2, [r3, #12]
 804b86a:	687b      	ldr	r3, [r7, #4]
 804b86c:	795b      	ldrb	r3, [r3, #5]
 804b86e:	2001      	movs	r0, #1
 804b870:	9000      	str	r0, [sp, #0]
 804b872:	6878      	ldr	r0, [r7, #4]
 804b874:	f000 f8ea 	bl	804ba4c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 804b878:	687b      	ldr	r3, [r7, #4]
 804b87a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804b87e:	b29a      	uxth	r2, r3
 804b880:	687b      	ldr	r3, [r7, #4]
 804b882:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 804b884:	687b      	ldr	r3, [r7, #4]
 804b886:	2206      	movs	r2, #6
 804b888:	761a      	strb	r2, [r3, #24]
      break;
 804b88a:	e0c0      	b.n	804ba0e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804b88c:	687b      	ldr	r3, [r7, #4]
 804b88e:	795b      	ldrb	r3, [r3, #5]
 804b890:	4619      	mov	r1, r3
 804b892:	6878      	ldr	r0, [r7, #4]
 804b894:	f000 fc52 	bl	804c13c <USBH_LL_GetURBState>
 804b898:	4603      	mov	r3, r0
 804b89a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 804b89c:	7bbb      	ldrb	r3, [r7, #14]
 804b89e:	2b01      	cmp	r3, #1
 804b8a0:	d103      	bne.n	804b8aa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 804b8a2:	687b      	ldr	r3, [r7, #4]
 804b8a4:	2207      	movs	r2, #7
 804b8a6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804b8a8:	e0ac      	b.n	804ba04 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 804b8aa:	7bbb      	ldrb	r3, [r7, #14]
 804b8ac:	2b05      	cmp	r3, #5
 804b8ae:	d105      	bne.n	804b8bc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 804b8b0:	687b      	ldr	r3, [r7, #4]
 804b8b2:	220c      	movs	r2, #12
 804b8b4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 804b8b6:	2303      	movs	r3, #3
 804b8b8:	73fb      	strb	r3, [r7, #15]
      break;
 804b8ba:	e0a3      	b.n	804ba04 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 804b8bc:	7bbb      	ldrb	r3, [r7, #14]
 804b8be:	2b02      	cmp	r3, #2
 804b8c0:	d103      	bne.n	804b8ca <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 804b8c2:	687b      	ldr	r3, [r7, #4]
 804b8c4:	2205      	movs	r2, #5
 804b8c6:	761a      	strb	r2, [r3, #24]
      break;
 804b8c8:	e09c      	b.n	804ba04 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 804b8ca:	7bbb      	ldrb	r3, [r7, #14]
 804b8cc:	2b04      	cmp	r3, #4
 804b8ce:	f040 8099 	bne.w	804ba04 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 804b8d2:	687b      	ldr	r3, [r7, #4]
 804b8d4:	220b      	movs	r2, #11
 804b8d6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 804b8d8:	2302      	movs	r3, #2
 804b8da:	73fb      	strb	r3, [r7, #15]
      break;
 804b8dc:	e092      	b.n	804ba04 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 804b8de:	687b      	ldr	r3, [r7, #4]
 804b8e0:	791b      	ldrb	r3, [r3, #4]
 804b8e2:	2200      	movs	r2, #0
 804b8e4:	2100      	movs	r1, #0
 804b8e6:	6878      	ldr	r0, [r7, #4]
 804b8e8:	f000 f8d5 	bl	804ba96 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 804b8ec:	687b      	ldr	r3, [r7, #4]
 804b8ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804b8f2:	b29a      	uxth	r2, r3
 804b8f4:	687b      	ldr	r3, [r7, #4]
 804b8f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 804b8f8:	687b      	ldr	r3, [r7, #4]
 804b8fa:	2208      	movs	r2, #8
 804b8fc:	761a      	strb	r2, [r3, #24]

      break;
 804b8fe:	e086      	b.n	804ba0e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 804b900:	687b      	ldr	r3, [r7, #4]
 804b902:	791b      	ldrb	r3, [r3, #4]
 804b904:	4619      	mov	r1, r3
 804b906:	6878      	ldr	r0, [r7, #4]
 804b908:	f000 fc18 	bl	804c13c <USBH_LL_GetURBState>
 804b90c:	4603      	mov	r3, r0
 804b90e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 804b910:	7bbb      	ldrb	r3, [r7, #14]
 804b912:	2b01      	cmp	r3, #1
 804b914:	d105      	bne.n	804b922 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 804b916:	687b      	ldr	r3, [r7, #4]
 804b918:	220d      	movs	r2, #13
 804b91a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 804b91c:	2300      	movs	r3, #0
 804b91e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804b920:	e072      	b.n	804ba08 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 804b922:	7bbb      	ldrb	r3, [r7, #14]
 804b924:	2b04      	cmp	r3, #4
 804b926:	d103      	bne.n	804b930 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 804b928:	687b      	ldr	r3, [r7, #4]
 804b92a:	220b      	movs	r2, #11
 804b92c:	761a      	strb	r2, [r3, #24]
      break;
 804b92e:	e06b      	b.n	804ba08 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 804b930:	7bbb      	ldrb	r3, [r7, #14]
 804b932:	2b05      	cmp	r3, #5
 804b934:	d168      	bne.n	804ba08 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 804b936:	2303      	movs	r3, #3
 804b938:	73fb      	strb	r3, [r7, #15]
      break;
 804b93a:	e065      	b.n	804ba08 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 804b93c:	687b      	ldr	r3, [r7, #4]
 804b93e:	795b      	ldrb	r3, [r3, #5]
 804b940:	2201      	movs	r2, #1
 804b942:	9200      	str	r2, [sp, #0]
 804b944:	2200      	movs	r2, #0
 804b946:	2100      	movs	r1, #0
 804b948:	6878      	ldr	r0, [r7, #4]
 804b94a:	f000 f87f 	bl	804ba4c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 804b94e:	687b      	ldr	r3, [r7, #4]
 804b950:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804b954:	b29a      	uxth	r2, r3
 804b956:	687b      	ldr	r3, [r7, #4]
 804b958:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 804b95a:	687b      	ldr	r3, [r7, #4]
 804b95c:	220a      	movs	r2, #10
 804b95e:	761a      	strb	r2, [r3, #24]
      break;
 804b960:	e055      	b.n	804ba0e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804b962:	687b      	ldr	r3, [r7, #4]
 804b964:	795b      	ldrb	r3, [r3, #5]
 804b966:	4619      	mov	r1, r3
 804b968:	6878      	ldr	r0, [r7, #4]
 804b96a:	f000 fbe7 	bl	804c13c <USBH_LL_GetURBState>
 804b96e:	4603      	mov	r3, r0
 804b970:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 804b972:	7bbb      	ldrb	r3, [r7, #14]
 804b974:	2b01      	cmp	r3, #1
 804b976:	d105      	bne.n	804b984 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 804b978:	2300      	movs	r3, #0
 804b97a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 804b97c:	687b      	ldr	r3, [r7, #4]
 804b97e:	220d      	movs	r2, #13
 804b980:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804b982:	e043      	b.n	804ba0c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 804b984:	7bbb      	ldrb	r3, [r7, #14]
 804b986:	2b02      	cmp	r3, #2
 804b988:	d103      	bne.n	804b992 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 804b98a:	687b      	ldr	r3, [r7, #4]
 804b98c:	2209      	movs	r2, #9
 804b98e:	761a      	strb	r2, [r3, #24]
      break;
 804b990:	e03c      	b.n	804ba0c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 804b992:	7bbb      	ldrb	r3, [r7, #14]
 804b994:	2b04      	cmp	r3, #4
 804b996:	d139      	bne.n	804ba0c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 804b998:	687b      	ldr	r3, [r7, #4]
 804b99a:	220b      	movs	r2, #11
 804b99c:	761a      	strb	r2, [r3, #24]
      break;
 804b99e:	e035      	b.n	804ba0c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 804b9a0:	687b      	ldr	r3, [r7, #4]
 804b9a2:	7e5b      	ldrb	r3, [r3, #25]
 804b9a4:	3301      	adds	r3, #1
 804b9a6:	b2da      	uxtb	r2, r3
 804b9a8:	687b      	ldr	r3, [r7, #4]
 804b9aa:	765a      	strb	r2, [r3, #25]
 804b9ac:	687b      	ldr	r3, [r7, #4]
 804b9ae:	7e5b      	ldrb	r3, [r3, #25]
 804b9b0:	2b02      	cmp	r3, #2
 804b9b2:	d806      	bhi.n	804b9c2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 804b9b4:	687b      	ldr	r3, [r7, #4]
 804b9b6:	2201      	movs	r2, #1
 804b9b8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 804b9ba:	687b      	ldr	r3, [r7, #4]
 804b9bc:	2201      	movs	r2, #1
 804b9be:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 804b9c0:	e025      	b.n	804ba0e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 804b9c2:	687b      	ldr	r3, [r7, #4]
 804b9c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b9c8:	2106      	movs	r1, #6
 804b9ca:	6878      	ldr	r0, [r7, #4]
 804b9cc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 804b9ce:	687b      	ldr	r3, [r7, #4]
 804b9d0:	2200      	movs	r2, #0
 804b9d2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804b9d4:	687b      	ldr	r3, [r7, #4]
 804b9d6:	795b      	ldrb	r3, [r3, #5]
 804b9d8:	4619      	mov	r1, r3
 804b9da:	6878      	ldr	r0, [r7, #4]
 804b9dc:	f000 f90c 	bl	804bbf8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804b9e0:	687b      	ldr	r3, [r7, #4]
 804b9e2:	791b      	ldrb	r3, [r3, #4]
 804b9e4:	4619      	mov	r1, r3
 804b9e6:	6878      	ldr	r0, [r7, #4]
 804b9e8:	f000 f906 	bl	804bbf8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 804b9ec:	687b      	ldr	r3, [r7, #4]
 804b9ee:	2200      	movs	r2, #0
 804b9f0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 804b9f2:	2302      	movs	r3, #2
 804b9f4:	73fb      	strb	r3, [r7, #15]
      break;
 804b9f6:	e00a      	b.n	804ba0e <USBH_HandleControl+0x2de>

    default:
      break;
 804b9f8:	bf00      	nop
 804b9fa:	e008      	b.n	804ba0e <USBH_HandleControl+0x2de>
      break;
 804b9fc:	bf00      	nop
 804b9fe:	e006      	b.n	804ba0e <USBH_HandleControl+0x2de>
      break;
 804ba00:	bf00      	nop
 804ba02:	e004      	b.n	804ba0e <USBH_HandleControl+0x2de>
      break;
 804ba04:	bf00      	nop
 804ba06:	e002      	b.n	804ba0e <USBH_HandleControl+0x2de>
      break;
 804ba08:	bf00      	nop
 804ba0a:	e000      	b.n	804ba0e <USBH_HandleControl+0x2de>
      break;
 804ba0c:	bf00      	nop
  }

  return status;
 804ba0e:	7bfb      	ldrb	r3, [r7, #15]
}
 804ba10:	4618      	mov	r0, r3
 804ba12:	3710      	adds	r7, #16
 804ba14:	46bd      	mov	sp, r7
 804ba16:	bd80      	pop	{r7, pc}

0804ba18 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 804ba18:	b580      	push	{r7, lr}
 804ba1a:	b088      	sub	sp, #32
 804ba1c:	af04      	add	r7, sp, #16
 804ba1e:	60f8      	str	r0, [r7, #12]
 804ba20:	60b9      	str	r1, [r7, #8]
 804ba22:	4613      	mov	r3, r2
 804ba24:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804ba26:	79f9      	ldrb	r1, [r7, #7]
 804ba28:	2300      	movs	r3, #0
 804ba2a:	9303      	str	r3, [sp, #12]
 804ba2c:	2308      	movs	r3, #8
 804ba2e:	9302      	str	r3, [sp, #8]
 804ba30:	68bb      	ldr	r3, [r7, #8]
 804ba32:	9301      	str	r3, [sp, #4]
 804ba34:	2300      	movs	r3, #0
 804ba36:	9300      	str	r3, [sp, #0]
 804ba38:	2300      	movs	r3, #0
 804ba3a:	2200      	movs	r2, #0
 804ba3c:	68f8      	ldr	r0, [r7, #12]
 804ba3e:	f000 fb4c 	bl	804c0da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 804ba42:	2300      	movs	r3, #0
}
 804ba44:	4618      	mov	r0, r3
 804ba46:	3710      	adds	r7, #16
 804ba48:	46bd      	mov	sp, r7
 804ba4a:	bd80      	pop	{r7, pc}

0804ba4c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 804ba4c:	b580      	push	{r7, lr}
 804ba4e:	b088      	sub	sp, #32
 804ba50:	af04      	add	r7, sp, #16
 804ba52:	60f8      	str	r0, [r7, #12]
 804ba54:	60b9      	str	r1, [r7, #8]
 804ba56:	4611      	mov	r1, r2
 804ba58:	461a      	mov	r2, r3
 804ba5a:	460b      	mov	r3, r1
 804ba5c:	80fb      	strh	r3, [r7, #6]
 804ba5e:	4613      	mov	r3, r2
 804ba60:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 804ba62:	68fb      	ldr	r3, [r7, #12]
 804ba64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804ba68:	2b00      	cmp	r3, #0
 804ba6a:	d001      	beq.n	804ba70 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 804ba6c:	2300      	movs	r3, #0
 804ba6e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804ba70:	7979      	ldrb	r1, [r7, #5]
 804ba72:	7e3b      	ldrb	r3, [r7, #24]
 804ba74:	9303      	str	r3, [sp, #12]
 804ba76:	88fb      	ldrh	r3, [r7, #6]
 804ba78:	9302      	str	r3, [sp, #8]
 804ba7a:	68bb      	ldr	r3, [r7, #8]
 804ba7c:	9301      	str	r3, [sp, #4]
 804ba7e:	2301      	movs	r3, #1
 804ba80:	9300      	str	r3, [sp, #0]
 804ba82:	2300      	movs	r3, #0
 804ba84:	2200      	movs	r2, #0
 804ba86:	68f8      	ldr	r0, [r7, #12]
 804ba88:	f000 fb27 	bl	804c0da <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 804ba8c:	2300      	movs	r3, #0
}
 804ba8e:	4618      	mov	r0, r3
 804ba90:	3710      	adds	r7, #16
 804ba92:	46bd      	mov	sp, r7
 804ba94:	bd80      	pop	{r7, pc}

0804ba96 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 804ba96:	b580      	push	{r7, lr}
 804ba98:	b088      	sub	sp, #32
 804ba9a:	af04      	add	r7, sp, #16
 804ba9c:	60f8      	str	r0, [r7, #12]
 804ba9e:	60b9      	str	r1, [r7, #8]
 804baa0:	4611      	mov	r1, r2
 804baa2:	461a      	mov	r2, r3
 804baa4:	460b      	mov	r3, r1
 804baa6:	80fb      	strh	r3, [r7, #6]
 804baa8:	4613      	mov	r3, r2
 804baaa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804baac:	7979      	ldrb	r1, [r7, #5]
 804baae:	2300      	movs	r3, #0
 804bab0:	9303      	str	r3, [sp, #12]
 804bab2:	88fb      	ldrh	r3, [r7, #6]
 804bab4:	9302      	str	r3, [sp, #8]
 804bab6:	68bb      	ldr	r3, [r7, #8]
 804bab8:	9301      	str	r3, [sp, #4]
 804baba:	2301      	movs	r3, #1
 804babc:	9300      	str	r3, [sp, #0]
 804babe:	2300      	movs	r3, #0
 804bac0:	2201      	movs	r2, #1
 804bac2:	68f8      	ldr	r0, [r7, #12]
 804bac4:	f000 fb09 	bl	804c0da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 804bac8:	2300      	movs	r3, #0

}
 804baca:	4618      	mov	r0, r3
 804bacc:	3710      	adds	r7, #16
 804bace:	46bd      	mov	sp, r7
 804bad0:	bd80      	pop	{r7, pc}

0804bad2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 804bad2:	b580      	push	{r7, lr}
 804bad4:	b088      	sub	sp, #32
 804bad6:	af04      	add	r7, sp, #16
 804bad8:	60f8      	str	r0, [r7, #12]
 804bada:	60b9      	str	r1, [r7, #8]
 804badc:	4611      	mov	r1, r2
 804bade:	461a      	mov	r2, r3
 804bae0:	460b      	mov	r3, r1
 804bae2:	80fb      	strh	r3, [r7, #6]
 804bae4:	4613      	mov	r3, r2
 804bae6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 804bae8:	68fb      	ldr	r3, [r7, #12]
 804baea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804baee:	2b00      	cmp	r3, #0
 804baf0:	d001      	beq.n	804baf6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 804baf2:	2300      	movs	r3, #0
 804baf4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804baf6:	7979      	ldrb	r1, [r7, #5]
 804baf8:	7e3b      	ldrb	r3, [r7, #24]
 804bafa:	9303      	str	r3, [sp, #12]
 804bafc:	88fb      	ldrh	r3, [r7, #6]
 804bafe:	9302      	str	r3, [sp, #8]
 804bb00:	68bb      	ldr	r3, [r7, #8]
 804bb02:	9301      	str	r3, [sp, #4]
 804bb04:	2301      	movs	r3, #1
 804bb06:	9300      	str	r3, [sp, #0]
 804bb08:	2302      	movs	r3, #2
 804bb0a:	2200      	movs	r2, #0
 804bb0c:	68f8      	ldr	r0, [r7, #12]
 804bb0e:	f000 fae4 	bl	804c0da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 804bb12:	2300      	movs	r3, #0
}
 804bb14:	4618      	mov	r0, r3
 804bb16:	3710      	adds	r7, #16
 804bb18:	46bd      	mov	sp, r7
 804bb1a:	bd80      	pop	{r7, pc}

0804bb1c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 804bb1c:	b580      	push	{r7, lr}
 804bb1e:	b088      	sub	sp, #32
 804bb20:	af04      	add	r7, sp, #16
 804bb22:	60f8      	str	r0, [r7, #12]
 804bb24:	60b9      	str	r1, [r7, #8]
 804bb26:	4611      	mov	r1, r2
 804bb28:	461a      	mov	r2, r3
 804bb2a:	460b      	mov	r3, r1
 804bb2c:	80fb      	strh	r3, [r7, #6]
 804bb2e:	4613      	mov	r3, r2
 804bb30:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804bb32:	7979      	ldrb	r1, [r7, #5]
 804bb34:	2300      	movs	r3, #0
 804bb36:	9303      	str	r3, [sp, #12]
 804bb38:	88fb      	ldrh	r3, [r7, #6]
 804bb3a:	9302      	str	r3, [sp, #8]
 804bb3c:	68bb      	ldr	r3, [r7, #8]
 804bb3e:	9301      	str	r3, [sp, #4]
 804bb40:	2301      	movs	r3, #1
 804bb42:	9300      	str	r3, [sp, #0]
 804bb44:	2302      	movs	r3, #2
 804bb46:	2201      	movs	r2, #1
 804bb48:	68f8      	ldr	r0, [r7, #12]
 804bb4a:	f000 fac6 	bl	804c0da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 804bb4e:	2300      	movs	r3, #0
}
 804bb50:	4618      	mov	r0, r3
 804bb52:	3710      	adds	r7, #16
 804bb54:	46bd      	mov	sp, r7
 804bb56:	bd80      	pop	{r7, pc}

0804bb58 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 804bb58:	b580      	push	{r7, lr}
 804bb5a:	b086      	sub	sp, #24
 804bb5c:	af04      	add	r7, sp, #16
 804bb5e:	6078      	str	r0, [r7, #4]
 804bb60:	4608      	mov	r0, r1
 804bb62:	4611      	mov	r1, r2
 804bb64:	461a      	mov	r2, r3
 804bb66:	4603      	mov	r3, r0
 804bb68:	70fb      	strb	r3, [r7, #3]
 804bb6a:	460b      	mov	r3, r1
 804bb6c:	70bb      	strb	r3, [r7, #2]
 804bb6e:	4613      	mov	r3, r2
 804bb70:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 804bb72:	7878      	ldrb	r0, [r7, #1]
 804bb74:	78ba      	ldrb	r2, [r7, #2]
 804bb76:	78f9      	ldrb	r1, [r7, #3]
 804bb78:	8b3b      	ldrh	r3, [r7, #24]
 804bb7a:	9302      	str	r3, [sp, #8]
 804bb7c:	7d3b      	ldrb	r3, [r7, #20]
 804bb7e:	9301      	str	r3, [sp, #4]
 804bb80:	7c3b      	ldrb	r3, [r7, #16]
 804bb82:	9300      	str	r3, [sp, #0]
 804bb84:	4603      	mov	r3, r0
 804bb86:	6878      	ldr	r0, [r7, #4]
 804bb88:	f000 fa59 	bl	804c03e <USBH_LL_OpenPipe>

  return USBH_OK;
 804bb8c:	2300      	movs	r3, #0
}
 804bb8e:	4618      	mov	r0, r3
 804bb90:	3708      	adds	r7, #8
 804bb92:	46bd      	mov	sp, r7
 804bb94:	bd80      	pop	{r7, pc}

0804bb96 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 804bb96:	b580      	push	{r7, lr}
 804bb98:	b082      	sub	sp, #8
 804bb9a:	af00      	add	r7, sp, #0
 804bb9c:	6078      	str	r0, [r7, #4]
 804bb9e:	460b      	mov	r3, r1
 804bba0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 804bba2:	78fb      	ldrb	r3, [r7, #3]
 804bba4:	4619      	mov	r1, r3
 804bba6:	6878      	ldr	r0, [r7, #4]
 804bba8:	f000 fa78 	bl	804c09c <USBH_LL_ClosePipe>

  return USBH_OK;
 804bbac:	2300      	movs	r3, #0
}
 804bbae:	4618      	mov	r0, r3
 804bbb0:	3708      	adds	r7, #8
 804bbb2:	46bd      	mov	sp, r7
 804bbb4:	bd80      	pop	{r7, pc}

0804bbb6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 804bbb6:	b580      	push	{r7, lr}
 804bbb8:	b084      	sub	sp, #16
 804bbba:	af00      	add	r7, sp, #0
 804bbbc:	6078      	str	r0, [r7, #4]
 804bbbe:	460b      	mov	r3, r1
 804bbc0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 804bbc2:	6878      	ldr	r0, [r7, #4]
 804bbc4:	f000 f836 	bl	804bc34 <USBH_GetFreePipe>
 804bbc8:	4603      	mov	r3, r0
 804bbca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 804bbcc:	89fb      	ldrh	r3, [r7, #14]
 804bbce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804bbd2:	4293      	cmp	r3, r2
 804bbd4:	d00a      	beq.n	804bbec <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 804bbd6:	78fa      	ldrb	r2, [r7, #3]
 804bbd8:	89fb      	ldrh	r3, [r7, #14]
 804bbda:	f003 030f 	and.w	r3, r3, #15
 804bbde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 804bbe2:	6879      	ldr	r1, [r7, #4]
 804bbe4:	33e0      	adds	r3, #224	; 0xe0
 804bbe6:	009b      	lsls	r3, r3, #2
 804bbe8:	440b      	add	r3, r1
 804bbea:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 804bbec:	89fb      	ldrh	r3, [r7, #14]
 804bbee:	b2db      	uxtb	r3, r3
}
 804bbf0:	4618      	mov	r0, r3
 804bbf2:	3710      	adds	r7, #16
 804bbf4:	46bd      	mov	sp, r7
 804bbf6:	bd80      	pop	{r7, pc}

0804bbf8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 804bbf8:	b480      	push	{r7}
 804bbfa:	b083      	sub	sp, #12
 804bbfc:	af00      	add	r7, sp, #0
 804bbfe:	6078      	str	r0, [r7, #4]
 804bc00:	460b      	mov	r3, r1
 804bc02:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 804bc04:	78fb      	ldrb	r3, [r7, #3]
 804bc06:	2b0f      	cmp	r3, #15
 804bc08:	d80d      	bhi.n	804bc26 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 804bc0a:	78fb      	ldrb	r3, [r7, #3]
 804bc0c:	687a      	ldr	r2, [r7, #4]
 804bc0e:	33e0      	adds	r3, #224	; 0xe0
 804bc10:	009b      	lsls	r3, r3, #2
 804bc12:	4413      	add	r3, r2
 804bc14:	685a      	ldr	r2, [r3, #4]
 804bc16:	78fb      	ldrb	r3, [r7, #3]
 804bc18:	f3c2 020e 	ubfx	r2, r2, #0, #15
 804bc1c:	6879      	ldr	r1, [r7, #4]
 804bc1e:	33e0      	adds	r3, #224	; 0xe0
 804bc20:	009b      	lsls	r3, r3, #2
 804bc22:	440b      	add	r3, r1
 804bc24:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 804bc26:	2300      	movs	r3, #0
}
 804bc28:	4618      	mov	r0, r3
 804bc2a:	370c      	adds	r7, #12
 804bc2c:	46bd      	mov	sp, r7
 804bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bc32:	4770      	bx	lr

0804bc34 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 804bc34:	b480      	push	{r7}
 804bc36:	b085      	sub	sp, #20
 804bc38:	af00      	add	r7, sp, #0
 804bc3a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 804bc3c:	2300      	movs	r3, #0
 804bc3e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 804bc40:	2300      	movs	r3, #0
 804bc42:	73fb      	strb	r3, [r7, #15]
 804bc44:	e00f      	b.n	804bc66 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 804bc46:	7bfb      	ldrb	r3, [r7, #15]
 804bc48:	687a      	ldr	r2, [r7, #4]
 804bc4a:	33e0      	adds	r3, #224	; 0xe0
 804bc4c:	009b      	lsls	r3, r3, #2
 804bc4e:	4413      	add	r3, r2
 804bc50:	685b      	ldr	r3, [r3, #4]
 804bc52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804bc56:	2b00      	cmp	r3, #0
 804bc58:	d102      	bne.n	804bc60 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 804bc5a:	7bfb      	ldrb	r3, [r7, #15]
 804bc5c:	b29b      	uxth	r3, r3
 804bc5e:	e007      	b.n	804bc70 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 804bc60:	7bfb      	ldrb	r3, [r7, #15]
 804bc62:	3301      	adds	r3, #1
 804bc64:	73fb      	strb	r3, [r7, #15]
 804bc66:	7bfb      	ldrb	r3, [r7, #15]
 804bc68:	2b0f      	cmp	r3, #15
 804bc6a:	d9ec      	bls.n	804bc46 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 804bc6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 804bc70:	4618      	mov	r0, r3
 804bc72:	3714      	adds	r7, #20
 804bc74:	46bd      	mov	sp, r7
 804bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bc7a:	4770      	bx	lr

0804bc7c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 804bc7c:	b580      	push	{r7, lr}
 804bc7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 804bc80:	2200      	movs	r2, #0
 804bc82:	490e      	ldr	r1, [pc, #56]	; (804bcbc <MX_USB_HOST_Init+0x40>)
 804bc84:	480e      	ldr	r0, [pc, #56]	; (804bcc0 <MX_USB_HOST_Init+0x44>)
 804bc86:	f7fe fba7 	bl	804a3d8 <USBH_Init>
 804bc8a:	4603      	mov	r3, r0
 804bc8c:	2b00      	cmp	r3, #0
 804bc8e:	d001      	beq.n	804bc94 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 804bc90:	f7f5 f8ba 	bl	8040e08 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 804bc94:	490b      	ldr	r1, [pc, #44]	; (804bcc4 <MX_USB_HOST_Init+0x48>)
 804bc96:	480a      	ldr	r0, [pc, #40]	; (804bcc0 <MX_USB_HOST_Init+0x44>)
 804bc98:	f7fe fc2c 	bl	804a4f4 <USBH_RegisterClass>
 804bc9c:	4603      	mov	r3, r0
 804bc9e:	2b00      	cmp	r3, #0
 804bca0:	d001      	beq.n	804bca6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 804bca2:	f7f5 f8b1 	bl	8040e08 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 804bca6:	4806      	ldr	r0, [pc, #24]	; (804bcc0 <MX_USB_HOST_Init+0x44>)
 804bca8:	f7fe fcb0 	bl	804a60c <USBH_Start>
 804bcac:	4603      	mov	r3, r0
 804bcae:	2b00      	cmp	r3, #0
 804bcb0:	d001      	beq.n	804bcb6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 804bcb2:	f7f5 f8a9 	bl	8040e08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 804bcb6:	bf00      	nop
 804bcb8:	bd80      	pop	{r7, pc}
 804bcba:	bf00      	nop
 804bcbc:	0804bcdd 	.word	0x0804bcdd
 804bcc0:	20000664 	.word	0x20000664
 804bcc4:	2000005c 	.word	0x2000005c

0804bcc8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 804bcc8:	b580      	push	{r7, lr}
 804bcca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 804bccc:	4802      	ldr	r0, [pc, #8]	; (804bcd8 <MX_USB_HOST_Process+0x10>)
 804bcce:	f7fe fcad 	bl	804a62c <USBH_Process>
}
 804bcd2:	bf00      	nop
 804bcd4:	bd80      	pop	{r7, pc}
 804bcd6:	bf00      	nop
 804bcd8:	20000664 	.word	0x20000664

0804bcdc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 804bcdc:	b480      	push	{r7}
 804bcde:	b083      	sub	sp, #12
 804bce0:	af00      	add	r7, sp, #0
 804bce2:	6078      	str	r0, [r7, #4]
 804bce4:	460b      	mov	r3, r1
 804bce6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 804bce8:	78fb      	ldrb	r3, [r7, #3]
 804bcea:	3b01      	subs	r3, #1
 804bcec:	2b04      	cmp	r3, #4
 804bcee:	d819      	bhi.n	804bd24 <USBH_UserProcess+0x48>
 804bcf0:	a201      	add	r2, pc, #4	; (adr r2, 804bcf8 <USBH_UserProcess+0x1c>)
 804bcf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804bcf6:	bf00      	nop
 804bcf8:	0804bd25 	.word	0x0804bd25
 804bcfc:	0804bd15 	.word	0x0804bd15
 804bd00:	0804bd25 	.word	0x0804bd25
 804bd04:	0804bd1d 	.word	0x0804bd1d
 804bd08:	0804bd0d 	.word	0x0804bd0d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 804bd0c:	4b09      	ldr	r3, [pc, #36]	; (804bd34 <USBH_UserProcess+0x58>)
 804bd0e:	2203      	movs	r2, #3
 804bd10:	701a      	strb	r2, [r3, #0]
  break;
 804bd12:	e008      	b.n	804bd26 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 804bd14:	4b07      	ldr	r3, [pc, #28]	; (804bd34 <USBH_UserProcess+0x58>)
 804bd16:	2202      	movs	r2, #2
 804bd18:	701a      	strb	r2, [r3, #0]
  break;
 804bd1a:	e004      	b.n	804bd26 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 804bd1c:	4b05      	ldr	r3, [pc, #20]	; (804bd34 <USBH_UserProcess+0x58>)
 804bd1e:	2201      	movs	r2, #1
 804bd20:	701a      	strb	r2, [r3, #0]
  break;
 804bd22:	e000      	b.n	804bd26 <USBH_UserProcess+0x4a>

  default:
  break;
 804bd24:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 804bd26:	bf00      	nop
 804bd28:	370c      	adds	r7, #12
 804bd2a:	46bd      	mov	sp, r7
 804bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bd30:	4770      	bx	lr
 804bd32:	bf00      	nop
 804bd34:	20000a3c 	.word	0x20000a3c

0804bd38 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 804bd38:	b580      	push	{r7, lr}
 804bd3a:	b08a      	sub	sp, #40	; 0x28
 804bd3c:	af00      	add	r7, sp, #0
 804bd3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804bd40:	f107 0314 	add.w	r3, r7, #20
 804bd44:	2200      	movs	r2, #0
 804bd46:	601a      	str	r2, [r3, #0]
 804bd48:	605a      	str	r2, [r3, #4]
 804bd4a:	609a      	str	r2, [r3, #8]
 804bd4c:	60da      	str	r2, [r3, #12]
 804bd4e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 804bd50:	687b      	ldr	r3, [r7, #4]
 804bd52:	681b      	ldr	r3, [r3, #0]
 804bd54:	4a24      	ldr	r2, [pc, #144]	; (804bde8 <HAL_HCD_MspInit+0xb0>)
 804bd56:	4293      	cmp	r3, r2
 804bd58:	d141      	bne.n	804bdde <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 804bd5a:	2300      	movs	r3, #0
 804bd5c:	613b      	str	r3, [r7, #16]
 804bd5e:	4b23      	ldr	r3, [pc, #140]	; (804bdec <HAL_HCD_MspInit+0xb4>)
 804bd60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804bd62:	4a22      	ldr	r2, [pc, #136]	; (804bdec <HAL_HCD_MspInit+0xb4>)
 804bd64:	f043 0302 	orr.w	r3, r3, #2
 804bd68:	6313      	str	r3, [r2, #48]	; 0x30
 804bd6a:	4b20      	ldr	r3, [pc, #128]	; (804bdec <HAL_HCD_MspInit+0xb4>)
 804bd6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804bd6e:	f003 0302 	and.w	r3, r3, #2
 804bd72:	613b      	str	r3, [r7, #16]
 804bd74:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 804bd76:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 804bd7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804bd7c:	2302      	movs	r3, #2
 804bd7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804bd80:	2300      	movs	r3, #0
 804bd82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804bd84:	2300      	movs	r3, #0
 804bd86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 804bd88:	230c      	movs	r3, #12
 804bd8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804bd8c:	f107 0314 	add.w	r3, r7, #20
 804bd90:	4619      	mov	r1, r3
 804bd92:	4817      	ldr	r0, [pc, #92]	; (804bdf0 <HAL_HCD_MspInit+0xb8>)
 804bd94:	f7f7 fd9a 	bl	80438cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 804bd98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 804bd9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 804bd9e:	2300      	movs	r3, #0
 804bda0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804bda2:	2300      	movs	r3, #0
 804bda4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 804bda6:	f107 0314 	add.w	r3, r7, #20
 804bdaa:	4619      	mov	r1, r3
 804bdac:	4810      	ldr	r0, [pc, #64]	; (804bdf0 <HAL_HCD_MspInit+0xb8>)
 804bdae:	f7f7 fd8d 	bl	80438cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 804bdb2:	2300      	movs	r3, #0
 804bdb4:	60fb      	str	r3, [r7, #12]
 804bdb6:	4b0d      	ldr	r3, [pc, #52]	; (804bdec <HAL_HCD_MspInit+0xb4>)
 804bdb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804bdba:	4a0c      	ldr	r2, [pc, #48]	; (804bdec <HAL_HCD_MspInit+0xb4>)
 804bdbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 804bdc0:	6313      	str	r3, [r2, #48]	; 0x30
 804bdc2:	4b0a      	ldr	r3, [pc, #40]	; (804bdec <HAL_HCD_MspInit+0xb4>)
 804bdc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804bdc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804bdca:	60fb      	str	r3, [r7, #12]
 804bdcc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 804bdce:	2200      	movs	r2, #0
 804bdd0:	2100      	movs	r1, #0
 804bdd2:	204d      	movs	r0, #77	; 0x4d
 804bdd4:	f7f6 ffda 	bl	8042d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 804bdd8:	204d      	movs	r0, #77	; 0x4d
 804bdda:	f7f6 fff3 	bl	8042dc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 804bdde:	bf00      	nop
 804bde0:	3728      	adds	r7, #40	; 0x28
 804bde2:	46bd      	mov	sp, r7
 804bde4:	bd80      	pop	{r7, pc}
 804bde6:	bf00      	nop
 804bde8:	40040000 	.word	0x40040000
 804bdec:	40023800 	.word	0x40023800
 804bdf0:	40020400 	.word	0x40020400

0804bdf4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 804bdf4:	b580      	push	{r7, lr}
 804bdf6:	b082      	sub	sp, #8
 804bdf8:	af00      	add	r7, sp, #0
 804bdfa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 804bdfc:	687b      	ldr	r3, [r7, #4]
 804bdfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804be02:	4618      	mov	r0, r3
 804be04:	f7fe fff1 	bl	804adea <USBH_LL_IncTimer>
}
 804be08:	bf00      	nop
 804be0a:	3708      	adds	r7, #8
 804be0c:	46bd      	mov	sp, r7
 804be0e:	bd80      	pop	{r7, pc}

0804be10 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 804be10:	b580      	push	{r7, lr}
 804be12:	b082      	sub	sp, #8
 804be14:	af00      	add	r7, sp, #0
 804be16:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 804be18:	687b      	ldr	r3, [r7, #4]
 804be1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804be1e:	4618      	mov	r0, r3
 804be20:	f7ff f829 	bl	804ae76 <USBH_LL_Connect>
}
 804be24:	bf00      	nop
 804be26:	3708      	adds	r7, #8
 804be28:	46bd      	mov	sp, r7
 804be2a:	bd80      	pop	{r7, pc}

0804be2c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 804be2c:	b580      	push	{r7, lr}
 804be2e:	b082      	sub	sp, #8
 804be30:	af00      	add	r7, sp, #0
 804be32:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 804be34:	687b      	ldr	r3, [r7, #4]
 804be36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804be3a:	4618      	mov	r0, r3
 804be3c:	f7ff f832 	bl	804aea4 <USBH_LL_Disconnect>
}
 804be40:	bf00      	nop
 804be42:	3708      	adds	r7, #8
 804be44:	46bd      	mov	sp, r7
 804be46:	bd80      	pop	{r7, pc}

0804be48 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 804be48:	b480      	push	{r7}
 804be4a:	b083      	sub	sp, #12
 804be4c:	af00      	add	r7, sp, #0
 804be4e:	6078      	str	r0, [r7, #4]
 804be50:	460b      	mov	r3, r1
 804be52:	70fb      	strb	r3, [r7, #3]
 804be54:	4613      	mov	r3, r2
 804be56:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 804be58:	bf00      	nop
 804be5a:	370c      	adds	r7, #12
 804be5c:	46bd      	mov	sp, r7
 804be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804be62:	4770      	bx	lr

0804be64 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 804be64:	b580      	push	{r7, lr}
 804be66:	b082      	sub	sp, #8
 804be68:	af00      	add	r7, sp, #0
 804be6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 804be6c:	687b      	ldr	r3, [r7, #4]
 804be6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804be72:	4618      	mov	r0, r3
 804be74:	f7fe ffe3 	bl	804ae3e <USBH_LL_PortEnabled>
}
 804be78:	bf00      	nop
 804be7a:	3708      	adds	r7, #8
 804be7c:	46bd      	mov	sp, r7
 804be7e:	bd80      	pop	{r7, pc}

0804be80 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 804be80:	b580      	push	{r7, lr}
 804be82:	b082      	sub	sp, #8
 804be84:	af00      	add	r7, sp, #0
 804be86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 804be88:	687b      	ldr	r3, [r7, #4]
 804be8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804be8e:	4618      	mov	r0, r3
 804be90:	f7fe ffe3 	bl	804ae5a <USBH_LL_PortDisabled>
}
 804be94:	bf00      	nop
 804be96:	3708      	adds	r7, #8
 804be98:	46bd      	mov	sp, r7
 804be9a:	bd80      	pop	{r7, pc}

0804be9c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 804be9c:	b580      	push	{r7, lr}
 804be9e:	b082      	sub	sp, #8
 804bea0:	af00      	add	r7, sp, #0
 804bea2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 804bea4:	687b      	ldr	r3, [r7, #4]
 804bea6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 804beaa:	2b00      	cmp	r3, #0
 804beac:	d132      	bne.n	804bf14 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 804beae:	4a1c      	ldr	r2, [pc, #112]	; (804bf20 <USBH_LL_Init+0x84>)
 804beb0:	687b      	ldr	r3, [r7, #4]
 804beb2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 804beb6:	687b      	ldr	r3, [r7, #4]
 804beb8:	4a19      	ldr	r2, [pc, #100]	; (804bf20 <USBH_LL_Init+0x84>)
 804beba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 804bebe:	4b18      	ldr	r3, [pc, #96]	; (804bf20 <USBH_LL_Init+0x84>)
 804bec0:	4a18      	ldr	r2, [pc, #96]	; (804bf24 <USBH_LL_Init+0x88>)
 804bec2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 804bec4:	4b16      	ldr	r3, [pc, #88]	; (804bf20 <USBH_LL_Init+0x84>)
 804bec6:	220c      	movs	r2, #12
 804bec8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 804beca:	4b15      	ldr	r3, [pc, #84]	; (804bf20 <USBH_LL_Init+0x84>)
 804becc:	2201      	movs	r2, #1
 804bece:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 804bed0:	4b13      	ldr	r3, [pc, #76]	; (804bf20 <USBH_LL_Init+0x84>)
 804bed2:	2200      	movs	r2, #0
 804bed4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 804bed6:	4b12      	ldr	r3, [pc, #72]	; (804bf20 <USBH_LL_Init+0x84>)
 804bed8:	2202      	movs	r2, #2
 804beda:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 804bedc:	4b10      	ldr	r3, [pc, #64]	; (804bf20 <USBH_LL_Init+0x84>)
 804bede:	2200      	movs	r2, #0
 804bee0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 804bee2:	4b0f      	ldr	r3, [pc, #60]	; (804bf20 <USBH_LL_Init+0x84>)
 804bee4:	2200      	movs	r2, #0
 804bee6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 804bee8:	4b0d      	ldr	r3, [pc, #52]	; (804bf20 <USBH_LL_Init+0x84>)
 804beea:	2200      	movs	r2, #0
 804beec:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 804beee:	4b0c      	ldr	r3, [pc, #48]	; (804bf20 <USBH_LL_Init+0x84>)
 804bef0:	2200      	movs	r2, #0
 804bef2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 804bef4:	480a      	ldr	r0, [pc, #40]	; (804bf20 <USBH_LL_Init+0x84>)
 804bef6:	f7f7 ffba 	bl	8043e6e <HAL_HCD_Init>
 804befa:	4603      	mov	r3, r0
 804befc:	2b00      	cmp	r3, #0
 804befe:	d001      	beq.n	804bf04 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 804bf00:	f7f4 ff82 	bl	8040e08 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 804bf04:	4806      	ldr	r0, [pc, #24]	; (804bf20 <USBH_LL_Init+0x84>)
 804bf06:	f7f8 fb9e 	bl	8044646 <HAL_HCD_GetCurrentFrame>
 804bf0a:	4603      	mov	r3, r0
 804bf0c:	4619      	mov	r1, r3
 804bf0e:	6878      	ldr	r0, [r7, #4]
 804bf10:	f7fe ff5c 	bl	804adcc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 804bf14:	2300      	movs	r3, #0
}
 804bf16:	4618      	mov	r0, r3
 804bf18:	3708      	adds	r7, #8
 804bf1a:	46bd      	mov	sp, r7
 804bf1c:	bd80      	pop	{r7, pc}
 804bf1e:	bf00      	nop
 804bf20:	20000a40 	.word	0x20000a40
 804bf24:	40040000 	.word	0x40040000

0804bf28 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 804bf28:	b580      	push	{r7, lr}
 804bf2a:	b084      	sub	sp, #16
 804bf2c:	af00      	add	r7, sp, #0
 804bf2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804bf30:	2300      	movs	r3, #0
 804bf32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804bf34:	2300      	movs	r3, #0
 804bf36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 804bf38:	687b      	ldr	r3, [r7, #4]
 804bf3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804bf3e:	4618      	mov	r0, r3
 804bf40:	f7f8 fb0b 	bl	804455a <HAL_HCD_Start>
 804bf44:	4603      	mov	r3, r0
 804bf46:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804bf48:	7bfb      	ldrb	r3, [r7, #15]
 804bf4a:	4618      	mov	r0, r3
 804bf4c:	f000 f95c 	bl	804c208 <USBH_Get_USB_Status>
 804bf50:	4603      	mov	r3, r0
 804bf52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804bf54:	7bbb      	ldrb	r3, [r7, #14]
}
 804bf56:	4618      	mov	r0, r3
 804bf58:	3710      	adds	r7, #16
 804bf5a:	46bd      	mov	sp, r7
 804bf5c:	bd80      	pop	{r7, pc}

0804bf5e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 804bf5e:	b580      	push	{r7, lr}
 804bf60:	b084      	sub	sp, #16
 804bf62:	af00      	add	r7, sp, #0
 804bf64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804bf66:	2300      	movs	r3, #0
 804bf68:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804bf6a:	2300      	movs	r3, #0
 804bf6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 804bf6e:	687b      	ldr	r3, [r7, #4]
 804bf70:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804bf74:	4618      	mov	r0, r3
 804bf76:	f7f8 fb13 	bl	80445a0 <HAL_HCD_Stop>
 804bf7a:	4603      	mov	r3, r0
 804bf7c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804bf7e:	7bfb      	ldrb	r3, [r7, #15]
 804bf80:	4618      	mov	r0, r3
 804bf82:	f000 f941 	bl	804c208 <USBH_Get_USB_Status>
 804bf86:	4603      	mov	r3, r0
 804bf88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804bf8a:	7bbb      	ldrb	r3, [r7, #14]
}
 804bf8c:	4618      	mov	r0, r3
 804bf8e:	3710      	adds	r7, #16
 804bf90:	46bd      	mov	sp, r7
 804bf92:	bd80      	pop	{r7, pc}

0804bf94 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 804bf94:	b580      	push	{r7, lr}
 804bf96:	b084      	sub	sp, #16
 804bf98:	af00      	add	r7, sp, #0
 804bf9a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 804bf9c:	2301      	movs	r3, #1
 804bf9e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 804bfa0:	687b      	ldr	r3, [r7, #4]
 804bfa2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804bfa6:	4618      	mov	r0, r3
 804bfa8:	f7f8 fb5b 	bl	8044662 <HAL_HCD_GetCurrentSpeed>
 804bfac:	4603      	mov	r3, r0
 804bfae:	2b02      	cmp	r3, #2
 804bfb0:	d00c      	beq.n	804bfcc <USBH_LL_GetSpeed+0x38>
 804bfb2:	2b02      	cmp	r3, #2
 804bfb4:	d80d      	bhi.n	804bfd2 <USBH_LL_GetSpeed+0x3e>
 804bfb6:	2b00      	cmp	r3, #0
 804bfb8:	d002      	beq.n	804bfc0 <USBH_LL_GetSpeed+0x2c>
 804bfba:	2b01      	cmp	r3, #1
 804bfbc:	d003      	beq.n	804bfc6 <USBH_LL_GetSpeed+0x32>
 804bfbe:	e008      	b.n	804bfd2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 804bfc0:	2300      	movs	r3, #0
 804bfc2:	73fb      	strb	r3, [r7, #15]
    break;
 804bfc4:	e008      	b.n	804bfd8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 804bfc6:	2301      	movs	r3, #1
 804bfc8:	73fb      	strb	r3, [r7, #15]
    break;
 804bfca:	e005      	b.n	804bfd8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 804bfcc:	2302      	movs	r3, #2
 804bfce:	73fb      	strb	r3, [r7, #15]
    break;
 804bfd0:	e002      	b.n	804bfd8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 804bfd2:	2301      	movs	r3, #1
 804bfd4:	73fb      	strb	r3, [r7, #15]
    break;
 804bfd6:	bf00      	nop
  }
  return  speed;
 804bfd8:	7bfb      	ldrb	r3, [r7, #15]
}
 804bfda:	4618      	mov	r0, r3
 804bfdc:	3710      	adds	r7, #16
 804bfde:	46bd      	mov	sp, r7
 804bfe0:	bd80      	pop	{r7, pc}

0804bfe2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 804bfe2:	b580      	push	{r7, lr}
 804bfe4:	b084      	sub	sp, #16
 804bfe6:	af00      	add	r7, sp, #0
 804bfe8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804bfea:	2300      	movs	r3, #0
 804bfec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804bfee:	2300      	movs	r3, #0
 804bff0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 804bff2:	687b      	ldr	r3, [r7, #4]
 804bff4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804bff8:	4618      	mov	r0, r3
 804bffa:	f7f8 faee 	bl	80445da <HAL_HCD_ResetPort>
 804bffe:	4603      	mov	r3, r0
 804c000:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804c002:	7bfb      	ldrb	r3, [r7, #15]
 804c004:	4618      	mov	r0, r3
 804c006:	f000 f8ff 	bl	804c208 <USBH_Get_USB_Status>
 804c00a:	4603      	mov	r3, r0
 804c00c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c00e:	7bbb      	ldrb	r3, [r7, #14]
}
 804c010:	4618      	mov	r0, r3
 804c012:	3710      	adds	r7, #16
 804c014:	46bd      	mov	sp, r7
 804c016:	bd80      	pop	{r7, pc}

0804c018 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804c018:	b580      	push	{r7, lr}
 804c01a:	b082      	sub	sp, #8
 804c01c:	af00      	add	r7, sp, #0
 804c01e:	6078      	str	r0, [r7, #4]
 804c020:	460b      	mov	r3, r1
 804c022:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 804c024:	687b      	ldr	r3, [r7, #4]
 804c026:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c02a:	78fa      	ldrb	r2, [r7, #3]
 804c02c:	4611      	mov	r1, r2
 804c02e:	4618      	mov	r0, r3
 804c030:	f7f8 faf5 	bl	804461e <HAL_HCD_HC_GetXferCount>
 804c034:	4603      	mov	r3, r0
}
 804c036:	4618      	mov	r0, r3
 804c038:	3708      	adds	r7, #8
 804c03a:	46bd      	mov	sp, r7
 804c03c:	bd80      	pop	{r7, pc}

0804c03e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 804c03e:	b590      	push	{r4, r7, lr}
 804c040:	b089      	sub	sp, #36	; 0x24
 804c042:	af04      	add	r7, sp, #16
 804c044:	6078      	str	r0, [r7, #4]
 804c046:	4608      	mov	r0, r1
 804c048:	4611      	mov	r1, r2
 804c04a:	461a      	mov	r2, r3
 804c04c:	4603      	mov	r3, r0
 804c04e:	70fb      	strb	r3, [r7, #3]
 804c050:	460b      	mov	r3, r1
 804c052:	70bb      	strb	r3, [r7, #2]
 804c054:	4613      	mov	r3, r2
 804c056:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c058:	2300      	movs	r3, #0
 804c05a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c05c:	2300      	movs	r3, #0
 804c05e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 804c060:	687b      	ldr	r3, [r7, #4]
 804c062:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 804c066:	787c      	ldrb	r4, [r7, #1]
 804c068:	78ba      	ldrb	r2, [r7, #2]
 804c06a:	78f9      	ldrb	r1, [r7, #3]
 804c06c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804c06e:	9302      	str	r3, [sp, #8]
 804c070:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 804c074:	9301      	str	r3, [sp, #4]
 804c076:	f897 3020 	ldrb.w	r3, [r7, #32]
 804c07a:	9300      	str	r3, [sp, #0]
 804c07c:	4623      	mov	r3, r4
 804c07e:	f7f7 ff58 	bl	8043f32 <HAL_HCD_HC_Init>
 804c082:	4603      	mov	r3, r0
 804c084:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 804c086:	7bfb      	ldrb	r3, [r7, #15]
 804c088:	4618      	mov	r0, r3
 804c08a:	f000 f8bd 	bl	804c208 <USBH_Get_USB_Status>
 804c08e:	4603      	mov	r3, r0
 804c090:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c092:	7bbb      	ldrb	r3, [r7, #14]
}
 804c094:	4618      	mov	r0, r3
 804c096:	3714      	adds	r7, #20
 804c098:	46bd      	mov	sp, r7
 804c09a:	bd90      	pop	{r4, r7, pc}

0804c09c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804c09c:	b580      	push	{r7, lr}
 804c09e:	b084      	sub	sp, #16
 804c0a0:	af00      	add	r7, sp, #0
 804c0a2:	6078      	str	r0, [r7, #4]
 804c0a4:	460b      	mov	r3, r1
 804c0a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c0a8:	2300      	movs	r3, #0
 804c0aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c0ac:	2300      	movs	r3, #0
 804c0ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 804c0b0:	687b      	ldr	r3, [r7, #4]
 804c0b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c0b6:	78fa      	ldrb	r2, [r7, #3]
 804c0b8:	4611      	mov	r1, r2
 804c0ba:	4618      	mov	r0, r3
 804c0bc:	f7f7 ffc8 	bl	8044050 <HAL_HCD_HC_Halt>
 804c0c0:	4603      	mov	r3, r0
 804c0c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804c0c4:	7bfb      	ldrb	r3, [r7, #15]
 804c0c6:	4618      	mov	r0, r3
 804c0c8:	f000 f89e 	bl	804c208 <USBH_Get_USB_Status>
 804c0cc:	4603      	mov	r3, r0
 804c0ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c0d0:	7bbb      	ldrb	r3, [r7, #14]
}
 804c0d2:	4618      	mov	r0, r3
 804c0d4:	3710      	adds	r7, #16
 804c0d6:	46bd      	mov	sp, r7
 804c0d8:	bd80      	pop	{r7, pc}

0804c0da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 804c0da:	b590      	push	{r4, r7, lr}
 804c0dc:	b089      	sub	sp, #36	; 0x24
 804c0de:	af04      	add	r7, sp, #16
 804c0e0:	6078      	str	r0, [r7, #4]
 804c0e2:	4608      	mov	r0, r1
 804c0e4:	4611      	mov	r1, r2
 804c0e6:	461a      	mov	r2, r3
 804c0e8:	4603      	mov	r3, r0
 804c0ea:	70fb      	strb	r3, [r7, #3]
 804c0ec:	460b      	mov	r3, r1
 804c0ee:	70bb      	strb	r3, [r7, #2]
 804c0f0:	4613      	mov	r3, r2
 804c0f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c0f4:	2300      	movs	r3, #0
 804c0f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c0f8:	2300      	movs	r3, #0
 804c0fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 804c0fc:	687b      	ldr	r3, [r7, #4]
 804c0fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 804c102:	787c      	ldrb	r4, [r7, #1]
 804c104:	78ba      	ldrb	r2, [r7, #2]
 804c106:	78f9      	ldrb	r1, [r7, #3]
 804c108:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804c10c:	9303      	str	r3, [sp, #12]
 804c10e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804c110:	9302      	str	r3, [sp, #8]
 804c112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804c114:	9301      	str	r3, [sp, #4]
 804c116:	f897 3020 	ldrb.w	r3, [r7, #32]
 804c11a:	9300      	str	r3, [sp, #0]
 804c11c:	4623      	mov	r3, r4
 804c11e:	f7f7 ffbb 	bl	8044098 <HAL_HCD_HC_SubmitRequest>
 804c122:	4603      	mov	r3, r0
 804c124:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 804c126:	7bfb      	ldrb	r3, [r7, #15]
 804c128:	4618      	mov	r0, r3
 804c12a:	f000 f86d 	bl	804c208 <USBH_Get_USB_Status>
 804c12e:	4603      	mov	r3, r0
 804c130:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c132:	7bbb      	ldrb	r3, [r7, #14]
}
 804c134:	4618      	mov	r0, r3
 804c136:	3714      	adds	r7, #20
 804c138:	46bd      	mov	sp, r7
 804c13a:	bd90      	pop	{r4, r7, pc}

0804c13c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804c13c:	b580      	push	{r7, lr}
 804c13e:	b082      	sub	sp, #8
 804c140:	af00      	add	r7, sp, #0
 804c142:	6078      	str	r0, [r7, #4]
 804c144:	460b      	mov	r3, r1
 804c146:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 804c148:	687b      	ldr	r3, [r7, #4]
 804c14a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c14e:	78fa      	ldrb	r2, [r7, #3]
 804c150:	4611      	mov	r1, r2
 804c152:	4618      	mov	r0, r3
 804c154:	f7f8 fa4f 	bl	80445f6 <HAL_HCD_HC_GetURBState>
 804c158:	4603      	mov	r3, r0
}
 804c15a:	4618      	mov	r0, r3
 804c15c:	3708      	adds	r7, #8
 804c15e:	46bd      	mov	sp, r7
 804c160:	bd80      	pop	{r7, pc}

0804c162 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 804c162:	b580      	push	{r7, lr}
 804c164:	b082      	sub	sp, #8
 804c166:	af00      	add	r7, sp, #0
 804c168:	6078      	str	r0, [r7, #4]
 804c16a:	460b      	mov	r3, r1
 804c16c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 804c16e:	687b      	ldr	r3, [r7, #4]
 804c170:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 804c174:	2b00      	cmp	r3, #0
 804c176:	d103      	bne.n	804c180 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 804c178:	78fb      	ldrb	r3, [r7, #3]
 804c17a:	4618      	mov	r0, r3
 804c17c:	f000 f870 	bl	804c260 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 804c180:	20c8      	movs	r0, #200	; 0xc8
 804c182:	f7f6 fd27 	bl	8042bd4 <HAL_Delay>
  return USBH_OK;
 804c186:	2300      	movs	r3, #0
}
 804c188:	4618      	mov	r0, r3
 804c18a:	3708      	adds	r7, #8
 804c18c:	46bd      	mov	sp, r7
 804c18e:	bd80      	pop	{r7, pc}

0804c190 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 804c190:	b480      	push	{r7}
 804c192:	b085      	sub	sp, #20
 804c194:	af00      	add	r7, sp, #0
 804c196:	6078      	str	r0, [r7, #4]
 804c198:	460b      	mov	r3, r1
 804c19a:	70fb      	strb	r3, [r7, #3]
 804c19c:	4613      	mov	r3, r2
 804c19e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 804c1a0:	687b      	ldr	r3, [r7, #4]
 804c1a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c1a6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 804c1a8:	78fb      	ldrb	r3, [r7, #3]
 804c1aa:	68fa      	ldr	r2, [r7, #12]
 804c1ac:	212c      	movs	r1, #44	; 0x2c
 804c1ae:	fb01 f303 	mul.w	r3, r1, r3
 804c1b2:	4413      	add	r3, r2
 804c1b4:	333b      	adds	r3, #59	; 0x3b
 804c1b6:	781b      	ldrb	r3, [r3, #0]
 804c1b8:	2b00      	cmp	r3, #0
 804c1ba:	d009      	beq.n	804c1d0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 804c1bc:	78fb      	ldrb	r3, [r7, #3]
 804c1be:	68fa      	ldr	r2, [r7, #12]
 804c1c0:	212c      	movs	r1, #44	; 0x2c
 804c1c2:	fb01 f303 	mul.w	r3, r1, r3
 804c1c6:	4413      	add	r3, r2
 804c1c8:	3354      	adds	r3, #84	; 0x54
 804c1ca:	78ba      	ldrb	r2, [r7, #2]
 804c1cc:	701a      	strb	r2, [r3, #0]
 804c1ce:	e008      	b.n	804c1e2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 804c1d0:	78fb      	ldrb	r3, [r7, #3]
 804c1d2:	68fa      	ldr	r2, [r7, #12]
 804c1d4:	212c      	movs	r1, #44	; 0x2c
 804c1d6:	fb01 f303 	mul.w	r3, r1, r3
 804c1da:	4413      	add	r3, r2
 804c1dc:	3355      	adds	r3, #85	; 0x55
 804c1de:	78ba      	ldrb	r2, [r7, #2]
 804c1e0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 804c1e2:	2300      	movs	r3, #0
}
 804c1e4:	4618      	mov	r0, r3
 804c1e6:	3714      	adds	r7, #20
 804c1e8:	46bd      	mov	sp, r7
 804c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c1ee:	4770      	bx	lr

0804c1f0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 804c1f0:	b580      	push	{r7, lr}
 804c1f2:	b082      	sub	sp, #8
 804c1f4:	af00      	add	r7, sp, #0
 804c1f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 804c1f8:	6878      	ldr	r0, [r7, #4]
 804c1fa:	f7f6 fceb 	bl	8042bd4 <HAL_Delay>
}
 804c1fe:	bf00      	nop
 804c200:	3708      	adds	r7, #8
 804c202:	46bd      	mov	sp, r7
 804c204:	bd80      	pop	{r7, pc}
	...

0804c208 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 804c208:	b480      	push	{r7}
 804c20a:	b085      	sub	sp, #20
 804c20c:	af00      	add	r7, sp, #0
 804c20e:	4603      	mov	r3, r0
 804c210:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c212:	2300      	movs	r3, #0
 804c214:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 804c216:	79fb      	ldrb	r3, [r7, #7]
 804c218:	2b03      	cmp	r3, #3
 804c21a:	d817      	bhi.n	804c24c <USBH_Get_USB_Status+0x44>
 804c21c:	a201      	add	r2, pc, #4	; (adr r2, 804c224 <USBH_Get_USB_Status+0x1c>)
 804c21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804c222:	bf00      	nop
 804c224:	0804c235 	.word	0x0804c235
 804c228:	0804c23b 	.word	0x0804c23b
 804c22c:	0804c241 	.word	0x0804c241
 804c230:	0804c247 	.word	0x0804c247
  {
    case HAL_OK :
      usb_status = USBH_OK;
 804c234:	2300      	movs	r3, #0
 804c236:	73fb      	strb	r3, [r7, #15]
    break;
 804c238:	e00b      	b.n	804c252 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 804c23a:	2302      	movs	r3, #2
 804c23c:	73fb      	strb	r3, [r7, #15]
    break;
 804c23e:	e008      	b.n	804c252 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 804c240:	2301      	movs	r3, #1
 804c242:	73fb      	strb	r3, [r7, #15]
    break;
 804c244:	e005      	b.n	804c252 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 804c246:	2302      	movs	r3, #2
 804c248:	73fb      	strb	r3, [r7, #15]
    break;
 804c24a:	e002      	b.n	804c252 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 804c24c:	2302      	movs	r3, #2
 804c24e:	73fb      	strb	r3, [r7, #15]
    break;
 804c250:	bf00      	nop
  }
  return usb_status;
 804c252:	7bfb      	ldrb	r3, [r7, #15]
}
 804c254:	4618      	mov	r0, r3
 804c256:	3714      	adds	r7, #20
 804c258:	46bd      	mov	sp, r7
 804c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c25e:	4770      	bx	lr

0804c260 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 804c260:	b580      	push	{r7, lr}
 804c262:	b084      	sub	sp, #16
 804c264:	af00      	add	r7, sp, #0
 804c266:	4603      	mov	r3, r0
 804c268:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 804c26a:	79fb      	ldrb	r3, [r7, #7]
 804c26c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 804c26e:	79fb      	ldrb	r3, [r7, #7]
 804c270:	2b00      	cmp	r3, #0
 804c272:	d102      	bne.n	804c27a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 804c274:	2301      	movs	r3, #1
 804c276:	73fb      	strb	r3, [r7, #15]
 804c278:	e001      	b.n	804c27e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 804c27a:	2300      	movs	r3, #0
 804c27c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 804c27e:	7bfb      	ldrb	r3, [r7, #15]
 804c280:	461a      	mov	r2, r3
 804c282:	2110      	movs	r1, #16
 804c284:	4803      	ldr	r0, [pc, #12]	; (804c294 <MX_DriverVbusHS+0x34>)
 804c286:	f7f7 fdd9 	bl	8043e3c <HAL_GPIO_WritePin>
}
 804c28a:	bf00      	nop
 804c28c:	3710      	adds	r7, #16
 804c28e:	46bd      	mov	sp, r7
 804c290:	bd80      	pop	{r7, pc}
 804c292:	bf00      	nop
 804c294:	40020800 	.word	0x40020800

0804c298 <__errno>:
 804c298:	4b01      	ldr	r3, [pc, #4]	; (804c2a0 <__errno+0x8>)
 804c29a:	6818      	ldr	r0, [r3, #0]
 804c29c:	4770      	bx	lr
 804c29e:	bf00      	nop
 804c2a0:	2000007c 	.word	0x2000007c

0804c2a4 <__libc_init_array>:
 804c2a4:	b570      	push	{r4, r5, r6, lr}
 804c2a6:	4d0d      	ldr	r5, [pc, #52]	; (804c2dc <__libc_init_array+0x38>)
 804c2a8:	4c0d      	ldr	r4, [pc, #52]	; (804c2e0 <__libc_init_array+0x3c>)
 804c2aa:	1b64      	subs	r4, r4, r5
 804c2ac:	10a4      	asrs	r4, r4, #2
 804c2ae:	2600      	movs	r6, #0
 804c2b0:	42a6      	cmp	r6, r4
 804c2b2:	d109      	bne.n	804c2c8 <__libc_init_array+0x24>
 804c2b4:	4d0b      	ldr	r5, [pc, #44]	; (804c2e4 <__libc_init_array+0x40>)
 804c2b6:	4c0c      	ldr	r4, [pc, #48]	; (804c2e8 <__libc_init_array+0x44>)
 804c2b8:	f000 fc9e 	bl	804cbf8 <_init>
 804c2bc:	1b64      	subs	r4, r4, r5
 804c2be:	10a4      	asrs	r4, r4, #2
 804c2c0:	2600      	movs	r6, #0
 804c2c2:	42a6      	cmp	r6, r4
 804c2c4:	d105      	bne.n	804c2d2 <__libc_init_array+0x2e>
 804c2c6:	bd70      	pop	{r4, r5, r6, pc}
 804c2c8:	f855 3b04 	ldr.w	r3, [r5], #4
 804c2cc:	4798      	blx	r3
 804c2ce:	3601      	adds	r6, #1
 804c2d0:	e7ee      	b.n	804c2b0 <__libc_init_array+0xc>
 804c2d2:	f855 3b04 	ldr.w	r3, [r5], #4
 804c2d6:	4798      	blx	r3
 804c2d8:	3601      	adds	r6, #1
 804c2da:	e7f2      	b.n	804c2c2 <__libc_init_array+0x1e>
 804c2dc:	0804ebdc 	.word	0x0804ebdc
 804c2e0:	0804ebdc 	.word	0x0804ebdc
 804c2e4:	0804ebdc 	.word	0x0804ebdc
 804c2e8:	0804ebe0 	.word	0x0804ebe0

0804c2ec <malloc>:
 804c2ec:	4b02      	ldr	r3, [pc, #8]	; (804c2f8 <malloc+0xc>)
 804c2ee:	4601      	mov	r1, r0
 804c2f0:	6818      	ldr	r0, [r3, #0]
 804c2f2:	f000 b87f 	b.w	804c3f4 <_malloc_r>
 804c2f6:	bf00      	nop
 804c2f8:	2000007c 	.word	0x2000007c

0804c2fc <free>:
 804c2fc:	4b02      	ldr	r3, [pc, #8]	; (804c308 <free+0xc>)
 804c2fe:	4601      	mov	r1, r0
 804c300:	6818      	ldr	r0, [r3, #0]
 804c302:	f000 b80b 	b.w	804c31c <_free_r>
 804c306:	bf00      	nop
 804c308:	2000007c 	.word	0x2000007c

0804c30c <memset>:
 804c30c:	4402      	add	r2, r0
 804c30e:	4603      	mov	r3, r0
 804c310:	4293      	cmp	r3, r2
 804c312:	d100      	bne.n	804c316 <memset+0xa>
 804c314:	4770      	bx	lr
 804c316:	f803 1b01 	strb.w	r1, [r3], #1
 804c31a:	e7f9      	b.n	804c310 <memset+0x4>

0804c31c <_free_r>:
 804c31c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804c31e:	2900      	cmp	r1, #0
 804c320:	d044      	beq.n	804c3ac <_free_r+0x90>
 804c322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804c326:	9001      	str	r0, [sp, #4]
 804c328:	2b00      	cmp	r3, #0
 804c32a:	f1a1 0404 	sub.w	r4, r1, #4
 804c32e:	bfb8      	it	lt
 804c330:	18e4      	addlt	r4, r4, r3
 804c332:	f000 f903 	bl	804c53c <__malloc_lock>
 804c336:	4a1e      	ldr	r2, [pc, #120]	; (804c3b0 <_free_r+0x94>)
 804c338:	9801      	ldr	r0, [sp, #4]
 804c33a:	6813      	ldr	r3, [r2, #0]
 804c33c:	b933      	cbnz	r3, 804c34c <_free_r+0x30>
 804c33e:	6063      	str	r3, [r4, #4]
 804c340:	6014      	str	r4, [r2, #0]
 804c342:	b003      	add	sp, #12
 804c344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 804c348:	f000 b8fe 	b.w	804c548 <__malloc_unlock>
 804c34c:	42a3      	cmp	r3, r4
 804c34e:	d908      	bls.n	804c362 <_free_r+0x46>
 804c350:	6825      	ldr	r5, [r4, #0]
 804c352:	1961      	adds	r1, r4, r5
 804c354:	428b      	cmp	r3, r1
 804c356:	bf01      	itttt	eq
 804c358:	6819      	ldreq	r1, [r3, #0]
 804c35a:	685b      	ldreq	r3, [r3, #4]
 804c35c:	1949      	addeq	r1, r1, r5
 804c35e:	6021      	streq	r1, [r4, #0]
 804c360:	e7ed      	b.n	804c33e <_free_r+0x22>
 804c362:	461a      	mov	r2, r3
 804c364:	685b      	ldr	r3, [r3, #4]
 804c366:	b10b      	cbz	r3, 804c36c <_free_r+0x50>
 804c368:	42a3      	cmp	r3, r4
 804c36a:	d9fa      	bls.n	804c362 <_free_r+0x46>
 804c36c:	6811      	ldr	r1, [r2, #0]
 804c36e:	1855      	adds	r5, r2, r1
 804c370:	42a5      	cmp	r5, r4
 804c372:	d10b      	bne.n	804c38c <_free_r+0x70>
 804c374:	6824      	ldr	r4, [r4, #0]
 804c376:	4421      	add	r1, r4
 804c378:	1854      	adds	r4, r2, r1
 804c37a:	42a3      	cmp	r3, r4
 804c37c:	6011      	str	r1, [r2, #0]
 804c37e:	d1e0      	bne.n	804c342 <_free_r+0x26>
 804c380:	681c      	ldr	r4, [r3, #0]
 804c382:	685b      	ldr	r3, [r3, #4]
 804c384:	6053      	str	r3, [r2, #4]
 804c386:	4421      	add	r1, r4
 804c388:	6011      	str	r1, [r2, #0]
 804c38a:	e7da      	b.n	804c342 <_free_r+0x26>
 804c38c:	d902      	bls.n	804c394 <_free_r+0x78>
 804c38e:	230c      	movs	r3, #12
 804c390:	6003      	str	r3, [r0, #0]
 804c392:	e7d6      	b.n	804c342 <_free_r+0x26>
 804c394:	6825      	ldr	r5, [r4, #0]
 804c396:	1961      	adds	r1, r4, r5
 804c398:	428b      	cmp	r3, r1
 804c39a:	bf04      	itt	eq
 804c39c:	6819      	ldreq	r1, [r3, #0]
 804c39e:	685b      	ldreq	r3, [r3, #4]
 804c3a0:	6063      	str	r3, [r4, #4]
 804c3a2:	bf04      	itt	eq
 804c3a4:	1949      	addeq	r1, r1, r5
 804c3a6:	6021      	streq	r1, [r4, #0]
 804c3a8:	6054      	str	r4, [r2, #4]
 804c3aa:	e7ca      	b.n	804c342 <_free_r+0x26>
 804c3ac:	b003      	add	sp, #12
 804c3ae:	bd30      	pop	{r4, r5, pc}
 804c3b0:	20000d44 	.word	0x20000d44

0804c3b4 <sbrk_aligned>:
 804c3b4:	b570      	push	{r4, r5, r6, lr}
 804c3b6:	4e0e      	ldr	r6, [pc, #56]	; (804c3f0 <sbrk_aligned+0x3c>)
 804c3b8:	460c      	mov	r4, r1
 804c3ba:	6831      	ldr	r1, [r6, #0]
 804c3bc:	4605      	mov	r5, r0
 804c3be:	b911      	cbnz	r1, 804c3c6 <sbrk_aligned+0x12>
 804c3c0:	f000 f88c 	bl	804c4dc <_sbrk_r>
 804c3c4:	6030      	str	r0, [r6, #0]
 804c3c6:	4621      	mov	r1, r4
 804c3c8:	4628      	mov	r0, r5
 804c3ca:	f000 f887 	bl	804c4dc <_sbrk_r>
 804c3ce:	1c43      	adds	r3, r0, #1
 804c3d0:	d00a      	beq.n	804c3e8 <sbrk_aligned+0x34>
 804c3d2:	1cc4      	adds	r4, r0, #3
 804c3d4:	f024 0403 	bic.w	r4, r4, #3
 804c3d8:	42a0      	cmp	r0, r4
 804c3da:	d007      	beq.n	804c3ec <sbrk_aligned+0x38>
 804c3dc:	1a21      	subs	r1, r4, r0
 804c3de:	4628      	mov	r0, r5
 804c3e0:	f000 f87c 	bl	804c4dc <_sbrk_r>
 804c3e4:	3001      	adds	r0, #1
 804c3e6:	d101      	bne.n	804c3ec <sbrk_aligned+0x38>
 804c3e8:	f04f 34ff 	mov.w	r4, #4294967295
 804c3ec:	4620      	mov	r0, r4
 804c3ee:	bd70      	pop	{r4, r5, r6, pc}
 804c3f0:	20000d48 	.word	0x20000d48

0804c3f4 <_malloc_r>:
 804c3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804c3f8:	1ccd      	adds	r5, r1, #3
 804c3fa:	f025 0503 	bic.w	r5, r5, #3
 804c3fe:	3508      	adds	r5, #8
 804c400:	2d0c      	cmp	r5, #12
 804c402:	bf38      	it	cc
 804c404:	250c      	movcc	r5, #12
 804c406:	2d00      	cmp	r5, #0
 804c408:	4607      	mov	r7, r0
 804c40a:	db01      	blt.n	804c410 <_malloc_r+0x1c>
 804c40c:	42a9      	cmp	r1, r5
 804c40e:	d905      	bls.n	804c41c <_malloc_r+0x28>
 804c410:	230c      	movs	r3, #12
 804c412:	603b      	str	r3, [r7, #0]
 804c414:	2600      	movs	r6, #0
 804c416:	4630      	mov	r0, r6
 804c418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804c41c:	4e2e      	ldr	r6, [pc, #184]	; (804c4d8 <_malloc_r+0xe4>)
 804c41e:	f000 f88d 	bl	804c53c <__malloc_lock>
 804c422:	6833      	ldr	r3, [r6, #0]
 804c424:	461c      	mov	r4, r3
 804c426:	bb34      	cbnz	r4, 804c476 <_malloc_r+0x82>
 804c428:	4629      	mov	r1, r5
 804c42a:	4638      	mov	r0, r7
 804c42c:	f7ff ffc2 	bl	804c3b4 <sbrk_aligned>
 804c430:	1c43      	adds	r3, r0, #1
 804c432:	4604      	mov	r4, r0
 804c434:	d14d      	bne.n	804c4d2 <_malloc_r+0xde>
 804c436:	6834      	ldr	r4, [r6, #0]
 804c438:	4626      	mov	r6, r4
 804c43a:	2e00      	cmp	r6, #0
 804c43c:	d140      	bne.n	804c4c0 <_malloc_r+0xcc>
 804c43e:	6823      	ldr	r3, [r4, #0]
 804c440:	4631      	mov	r1, r6
 804c442:	4638      	mov	r0, r7
 804c444:	eb04 0803 	add.w	r8, r4, r3
 804c448:	f000 f848 	bl	804c4dc <_sbrk_r>
 804c44c:	4580      	cmp	r8, r0
 804c44e:	d13a      	bne.n	804c4c6 <_malloc_r+0xd2>
 804c450:	6821      	ldr	r1, [r4, #0]
 804c452:	3503      	adds	r5, #3
 804c454:	1a6d      	subs	r5, r5, r1
 804c456:	f025 0503 	bic.w	r5, r5, #3
 804c45a:	3508      	adds	r5, #8
 804c45c:	2d0c      	cmp	r5, #12
 804c45e:	bf38      	it	cc
 804c460:	250c      	movcc	r5, #12
 804c462:	4629      	mov	r1, r5
 804c464:	4638      	mov	r0, r7
 804c466:	f7ff ffa5 	bl	804c3b4 <sbrk_aligned>
 804c46a:	3001      	adds	r0, #1
 804c46c:	d02b      	beq.n	804c4c6 <_malloc_r+0xd2>
 804c46e:	6823      	ldr	r3, [r4, #0]
 804c470:	442b      	add	r3, r5
 804c472:	6023      	str	r3, [r4, #0]
 804c474:	e00e      	b.n	804c494 <_malloc_r+0xa0>
 804c476:	6822      	ldr	r2, [r4, #0]
 804c478:	1b52      	subs	r2, r2, r5
 804c47a:	d41e      	bmi.n	804c4ba <_malloc_r+0xc6>
 804c47c:	2a0b      	cmp	r2, #11
 804c47e:	d916      	bls.n	804c4ae <_malloc_r+0xba>
 804c480:	1961      	adds	r1, r4, r5
 804c482:	42a3      	cmp	r3, r4
 804c484:	6025      	str	r5, [r4, #0]
 804c486:	bf18      	it	ne
 804c488:	6059      	strne	r1, [r3, #4]
 804c48a:	6863      	ldr	r3, [r4, #4]
 804c48c:	bf08      	it	eq
 804c48e:	6031      	streq	r1, [r6, #0]
 804c490:	5162      	str	r2, [r4, r5]
 804c492:	604b      	str	r3, [r1, #4]
 804c494:	4638      	mov	r0, r7
 804c496:	f104 060b 	add.w	r6, r4, #11
 804c49a:	f000 f855 	bl	804c548 <__malloc_unlock>
 804c49e:	f026 0607 	bic.w	r6, r6, #7
 804c4a2:	1d23      	adds	r3, r4, #4
 804c4a4:	1af2      	subs	r2, r6, r3
 804c4a6:	d0b6      	beq.n	804c416 <_malloc_r+0x22>
 804c4a8:	1b9b      	subs	r3, r3, r6
 804c4aa:	50a3      	str	r3, [r4, r2]
 804c4ac:	e7b3      	b.n	804c416 <_malloc_r+0x22>
 804c4ae:	6862      	ldr	r2, [r4, #4]
 804c4b0:	42a3      	cmp	r3, r4
 804c4b2:	bf0c      	ite	eq
 804c4b4:	6032      	streq	r2, [r6, #0]
 804c4b6:	605a      	strne	r2, [r3, #4]
 804c4b8:	e7ec      	b.n	804c494 <_malloc_r+0xa0>
 804c4ba:	4623      	mov	r3, r4
 804c4bc:	6864      	ldr	r4, [r4, #4]
 804c4be:	e7b2      	b.n	804c426 <_malloc_r+0x32>
 804c4c0:	4634      	mov	r4, r6
 804c4c2:	6876      	ldr	r6, [r6, #4]
 804c4c4:	e7b9      	b.n	804c43a <_malloc_r+0x46>
 804c4c6:	230c      	movs	r3, #12
 804c4c8:	603b      	str	r3, [r7, #0]
 804c4ca:	4638      	mov	r0, r7
 804c4cc:	f000 f83c 	bl	804c548 <__malloc_unlock>
 804c4d0:	e7a1      	b.n	804c416 <_malloc_r+0x22>
 804c4d2:	6025      	str	r5, [r4, #0]
 804c4d4:	e7de      	b.n	804c494 <_malloc_r+0xa0>
 804c4d6:	bf00      	nop
 804c4d8:	20000d44 	.word	0x20000d44

0804c4dc <_sbrk_r>:
 804c4dc:	b538      	push	{r3, r4, r5, lr}
 804c4de:	4d06      	ldr	r5, [pc, #24]	; (804c4f8 <_sbrk_r+0x1c>)
 804c4e0:	2300      	movs	r3, #0
 804c4e2:	4604      	mov	r4, r0
 804c4e4:	4608      	mov	r0, r1
 804c4e6:	602b      	str	r3, [r5, #0]
 804c4e8:	f7f5 f8dc 	bl	80416a4 <_sbrk>
 804c4ec:	1c43      	adds	r3, r0, #1
 804c4ee:	d102      	bne.n	804c4f6 <_sbrk_r+0x1a>
 804c4f0:	682b      	ldr	r3, [r5, #0]
 804c4f2:	b103      	cbz	r3, 804c4f6 <_sbrk_r+0x1a>
 804c4f4:	6023      	str	r3, [r4, #0]
 804c4f6:	bd38      	pop	{r3, r4, r5, pc}
 804c4f8:	20000d4c 	.word	0x20000d4c

0804c4fc <siprintf>:
 804c4fc:	b40e      	push	{r1, r2, r3}
 804c4fe:	b500      	push	{lr}
 804c500:	b09c      	sub	sp, #112	; 0x70
 804c502:	ab1d      	add	r3, sp, #116	; 0x74
 804c504:	9002      	str	r0, [sp, #8]
 804c506:	9006      	str	r0, [sp, #24]
 804c508:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 804c50c:	4809      	ldr	r0, [pc, #36]	; (804c534 <siprintf+0x38>)
 804c50e:	9107      	str	r1, [sp, #28]
 804c510:	9104      	str	r1, [sp, #16]
 804c512:	4909      	ldr	r1, [pc, #36]	; (804c538 <siprintf+0x3c>)
 804c514:	f853 2b04 	ldr.w	r2, [r3], #4
 804c518:	9105      	str	r1, [sp, #20]
 804c51a:	6800      	ldr	r0, [r0, #0]
 804c51c:	9301      	str	r3, [sp, #4]
 804c51e:	a902      	add	r1, sp, #8
 804c520:	f000 f874 	bl	804c60c <_svfiprintf_r>
 804c524:	9b02      	ldr	r3, [sp, #8]
 804c526:	2200      	movs	r2, #0
 804c528:	701a      	strb	r2, [r3, #0]
 804c52a:	b01c      	add	sp, #112	; 0x70
 804c52c:	f85d eb04 	ldr.w	lr, [sp], #4
 804c530:	b003      	add	sp, #12
 804c532:	4770      	bx	lr
 804c534:	2000007c 	.word	0x2000007c
 804c538:	ffff0208 	.word	0xffff0208

0804c53c <__malloc_lock>:
 804c53c:	4801      	ldr	r0, [pc, #4]	; (804c544 <__malloc_lock+0x8>)
 804c53e:	f000 baf9 	b.w	804cb34 <__retarget_lock_acquire_recursive>
 804c542:	bf00      	nop
 804c544:	20000d50 	.word	0x20000d50

0804c548 <__malloc_unlock>:
 804c548:	4801      	ldr	r0, [pc, #4]	; (804c550 <__malloc_unlock+0x8>)
 804c54a:	f000 baf4 	b.w	804cb36 <__retarget_lock_release_recursive>
 804c54e:	bf00      	nop
 804c550:	20000d50 	.word	0x20000d50

0804c554 <__ssputs_r>:
 804c554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804c558:	688e      	ldr	r6, [r1, #8]
 804c55a:	429e      	cmp	r6, r3
 804c55c:	4682      	mov	sl, r0
 804c55e:	460c      	mov	r4, r1
 804c560:	4690      	mov	r8, r2
 804c562:	461f      	mov	r7, r3
 804c564:	d838      	bhi.n	804c5d8 <__ssputs_r+0x84>
 804c566:	898a      	ldrh	r2, [r1, #12]
 804c568:	f412 6f90 	tst.w	r2, #1152	; 0x480
 804c56c:	d032      	beq.n	804c5d4 <__ssputs_r+0x80>
 804c56e:	6825      	ldr	r5, [r4, #0]
 804c570:	6909      	ldr	r1, [r1, #16]
 804c572:	eba5 0901 	sub.w	r9, r5, r1
 804c576:	6965      	ldr	r5, [r4, #20]
 804c578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 804c57c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 804c580:	3301      	adds	r3, #1
 804c582:	444b      	add	r3, r9
 804c584:	106d      	asrs	r5, r5, #1
 804c586:	429d      	cmp	r5, r3
 804c588:	bf38      	it	cc
 804c58a:	461d      	movcc	r5, r3
 804c58c:	0553      	lsls	r3, r2, #21
 804c58e:	d531      	bpl.n	804c5f4 <__ssputs_r+0xa0>
 804c590:	4629      	mov	r1, r5
 804c592:	f7ff ff2f 	bl	804c3f4 <_malloc_r>
 804c596:	4606      	mov	r6, r0
 804c598:	b950      	cbnz	r0, 804c5b0 <__ssputs_r+0x5c>
 804c59a:	230c      	movs	r3, #12
 804c59c:	f8ca 3000 	str.w	r3, [sl]
 804c5a0:	89a3      	ldrh	r3, [r4, #12]
 804c5a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804c5a6:	81a3      	strh	r3, [r4, #12]
 804c5a8:	f04f 30ff 	mov.w	r0, #4294967295
 804c5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804c5b0:	6921      	ldr	r1, [r4, #16]
 804c5b2:	464a      	mov	r2, r9
 804c5b4:	f000 fac0 	bl	804cb38 <memcpy>
 804c5b8:	89a3      	ldrh	r3, [r4, #12]
 804c5ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 804c5be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804c5c2:	81a3      	strh	r3, [r4, #12]
 804c5c4:	6126      	str	r6, [r4, #16]
 804c5c6:	6165      	str	r5, [r4, #20]
 804c5c8:	444e      	add	r6, r9
 804c5ca:	eba5 0509 	sub.w	r5, r5, r9
 804c5ce:	6026      	str	r6, [r4, #0]
 804c5d0:	60a5      	str	r5, [r4, #8]
 804c5d2:	463e      	mov	r6, r7
 804c5d4:	42be      	cmp	r6, r7
 804c5d6:	d900      	bls.n	804c5da <__ssputs_r+0x86>
 804c5d8:	463e      	mov	r6, r7
 804c5da:	6820      	ldr	r0, [r4, #0]
 804c5dc:	4632      	mov	r2, r6
 804c5de:	4641      	mov	r1, r8
 804c5e0:	f000 fab8 	bl	804cb54 <memmove>
 804c5e4:	68a3      	ldr	r3, [r4, #8]
 804c5e6:	1b9b      	subs	r3, r3, r6
 804c5e8:	60a3      	str	r3, [r4, #8]
 804c5ea:	6823      	ldr	r3, [r4, #0]
 804c5ec:	4433      	add	r3, r6
 804c5ee:	6023      	str	r3, [r4, #0]
 804c5f0:	2000      	movs	r0, #0
 804c5f2:	e7db      	b.n	804c5ac <__ssputs_r+0x58>
 804c5f4:	462a      	mov	r2, r5
 804c5f6:	f000 fac7 	bl	804cb88 <_realloc_r>
 804c5fa:	4606      	mov	r6, r0
 804c5fc:	2800      	cmp	r0, #0
 804c5fe:	d1e1      	bne.n	804c5c4 <__ssputs_r+0x70>
 804c600:	6921      	ldr	r1, [r4, #16]
 804c602:	4650      	mov	r0, sl
 804c604:	f7ff fe8a 	bl	804c31c <_free_r>
 804c608:	e7c7      	b.n	804c59a <__ssputs_r+0x46>
	...

0804c60c <_svfiprintf_r>:
 804c60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804c610:	4698      	mov	r8, r3
 804c612:	898b      	ldrh	r3, [r1, #12]
 804c614:	061b      	lsls	r3, r3, #24
 804c616:	b09d      	sub	sp, #116	; 0x74
 804c618:	4607      	mov	r7, r0
 804c61a:	460d      	mov	r5, r1
 804c61c:	4614      	mov	r4, r2
 804c61e:	d50e      	bpl.n	804c63e <_svfiprintf_r+0x32>
 804c620:	690b      	ldr	r3, [r1, #16]
 804c622:	b963      	cbnz	r3, 804c63e <_svfiprintf_r+0x32>
 804c624:	2140      	movs	r1, #64	; 0x40
 804c626:	f7ff fee5 	bl	804c3f4 <_malloc_r>
 804c62a:	6028      	str	r0, [r5, #0]
 804c62c:	6128      	str	r0, [r5, #16]
 804c62e:	b920      	cbnz	r0, 804c63a <_svfiprintf_r+0x2e>
 804c630:	230c      	movs	r3, #12
 804c632:	603b      	str	r3, [r7, #0]
 804c634:	f04f 30ff 	mov.w	r0, #4294967295
 804c638:	e0d1      	b.n	804c7de <_svfiprintf_r+0x1d2>
 804c63a:	2340      	movs	r3, #64	; 0x40
 804c63c:	616b      	str	r3, [r5, #20]
 804c63e:	2300      	movs	r3, #0
 804c640:	9309      	str	r3, [sp, #36]	; 0x24
 804c642:	2320      	movs	r3, #32
 804c644:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804c648:	f8cd 800c 	str.w	r8, [sp, #12]
 804c64c:	2330      	movs	r3, #48	; 0x30
 804c64e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 804c7f8 <_svfiprintf_r+0x1ec>
 804c652:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804c656:	f04f 0901 	mov.w	r9, #1
 804c65a:	4623      	mov	r3, r4
 804c65c:	469a      	mov	sl, r3
 804c65e:	f813 2b01 	ldrb.w	r2, [r3], #1
 804c662:	b10a      	cbz	r2, 804c668 <_svfiprintf_r+0x5c>
 804c664:	2a25      	cmp	r2, #37	; 0x25
 804c666:	d1f9      	bne.n	804c65c <_svfiprintf_r+0x50>
 804c668:	ebba 0b04 	subs.w	fp, sl, r4
 804c66c:	d00b      	beq.n	804c686 <_svfiprintf_r+0x7a>
 804c66e:	465b      	mov	r3, fp
 804c670:	4622      	mov	r2, r4
 804c672:	4629      	mov	r1, r5
 804c674:	4638      	mov	r0, r7
 804c676:	f7ff ff6d 	bl	804c554 <__ssputs_r>
 804c67a:	3001      	adds	r0, #1
 804c67c:	f000 80aa 	beq.w	804c7d4 <_svfiprintf_r+0x1c8>
 804c680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804c682:	445a      	add	r2, fp
 804c684:	9209      	str	r2, [sp, #36]	; 0x24
 804c686:	f89a 3000 	ldrb.w	r3, [sl]
 804c68a:	2b00      	cmp	r3, #0
 804c68c:	f000 80a2 	beq.w	804c7d4 <_svfiprintf_r+0x1c8>
 804c690:	2300      	movs	r3, #0
 804c692:	f04f 32ff 	mov.w	r2, #4294967295
 804c696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804c69a:	f10a 0a01 	add.w	sl, sl, #1
 804c69e:	9304      	str	r3, [sp, #16]
 804c6a0:	9307      	str	r3, [sp, #28]
 804c6a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804c6a6:	931a      	str	r3, [sp, #104]	; 0x68
 804c6a8:	4654      	mov	r4, sl
 804c6aa:	2205      	movs	r2, #5
 804c6ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 804c6b0:	4851      	ldr	r0, [pc, #324]	; (804c7f8 <_svfiprintf_r+0x1ec>)
 804c6b2:	f7f3 fd9d 	bl	80401f0 <memchr>
 804c6b6:	9a04      	ldr	r2, [sp, #16]
 804c6b8:	b9d8      	cbnz	r0, 804c6f2 <_svfiprintf_r+0xe6>
 804c6ba:	06d0      	lsls	r0, r2, #27
 804c6bc:	bf44      	itt	mi
 804c6be:	2320      	movmi	r3, #32
 804c6c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804c6c4:	0711      	lsls	r1, r2, #28
 804c6c6:	bf44      	itt	mi
 804c6c8:	232b      	movmi	r3, #43	; 0x2b
 804c6ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804c6ce:	f89a 3000 	ldrb.w	r3, [sl]
 804c6d2:	2b2a      	cmp	r3, #42	; 0x2a
 804c6d4:	d015      	beq.n	804c702 <_svfiprintf_r+0xf6>
 804c6d6:	9a07      	ldr	r2, [sp, #28]
 804c6d8:	4654      	mov	r4, sl
 804c6da:	2000      	movs	r0, #0
 804c6dc:	f04f 0c0a 	mov.w	ip, #10
 804c6e0:	4621      	mov	r1, r4
 804c6e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 804c6e6:	3b30      	subs	r3, #48	; 0x30
 804c6e8:	2b09      	cmp	r3, #9
 804c6ea:	d94e      	bls.n	804c78a <_svfiprintf_r+0x17e>
 804c6ec:	b1b0      	cbz	r0, 804c71c <_svfiprintf_r+0x110>
 804c6ee:	9207      	str	r2, [sp, #28]
 804c6f0:	e014      	b.n	804c71c <_svfiprintf_r+0x110>
 804c6f2:	eba0 0308 	sub.w	r3, r0, r8
 804c6f6:	fa09 f303 	lsl.w	r3, r9, r3
 804c6fa:	4313      	orrs	r3, r2
 804c6fc:	9304      	str	r3, [sp, #16]
 804c6fe:	46a2      	mov	sl, r4
 804c700:	e7d2      	b.n	804c6a8 <_svfiprintf_r+0x9c>
 804c702:	9b03      	ldr	r3, [sp, #12]
 804c704:	1d19      	adds	r1, r3, #4
 804c706:	681b      	ldr	r3, [r3, #0]
 804c708:	9103      	str	r1, [sp, #12]
 804c70a:	2b00      	cmp	r3, #0
 804c70c:	bfbb      	ittet	lt
 804c70e:	425b      	neglt	r3, r3
 804c710:	f042 0202 	orrlt.w	r2, r2, #2
 804c714:	9307      	strge	r3, [sp, #28]
 804c716:	9307      	strlt	r3, [sp, #28]
 804c718:	bfb8      	it	lt
 804c71a:	9204      	strlt	r2, [sp, #16]
 804c71c:	7823      	ldrb	r3, [r4, #0]
 804c71e:	2b2e      	cmp	r3, #46	; 0x2e
 804c720:	d10c      	bne.n	804c73c <_svfiprintf_r+0x130>
 804c722:	7863      	ldrb	r3, [r4, #1]
 804c724:	2b2a      	cmp	r3, #42	; 0x2a
 804c726:	d135      	bne.n	804c794 <_svfiprintf_r+0x188>
 804c728:	9b03      	ldr	r3, [sp, #12]
 804c72a:	1d1a      	adds	r2, r3, #4
 804c72c:	681b      	ldr	r3, [r3, #0]
 804c72e:	9203      	str	r2, [sp, #12]
 804c730:	2b00      	cmp	r3, #0
 804c732:	bfb8      	it	lt
 804c734:	f04f 33ff 	movlt.w	r3, #4294967295
 804c738:	3402      	adds	r4, #2
 804c73a:	9305      	str	r3, [sp, #20]
 804c73c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 804c808 <_svfiprintf_r+0x1fc>
 804c740:	7821      	ldrb	r1, [r4, #0]
 804c742:	2203      	movs	r2, #3
 804c744:	4650      	mov	r0, sl
 804c746:	f7f3 fd53 	bl	80401f0 <memchr>
 804c74a:	b140      	cbz	r0, 804c75e <_svfiprintf_r+0x152>
 804c74c:	2340      	movs	r3, #64	; 0x40
 804c74e:	eba0 000a 	sub.w	r0, r0, sl
 804c752:	fa03 f000 	lsl.w	r0, r3, r0
 804c756:	9b04      	ldr	r3, [sp, #16]
 804c758:	4303      	orrs	r3, r0
 804c75a:	3401      	adds	r4, #1
 804c75c:	9304      	str	r3, [sp, #16]
 804c75e:	f814 1b01 	ldrb.w	r1, [r4], #1
 804c762:	4826      	ldr	r0, [pc, #152]	; (804c7fc <_svfiprintf_r+0x1f0>)
 804c764:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804c768:	2206      	movs	r2, #6
 804c76a:	f7f3 fd41 	bl	80401f0 <memchr>
 804c76e:	2800      	cmp	r0, #0
 804c770:	d038      	beq.n	804c7e4 <_svfiprintf_r+0x1d8>
 804c772:	4b23      	ldr	r3, [pc, #140]	; (804c800 <_svfiprintf_r+0x1f4>)
 804c774:	bb1b      	cbnz	r3, 804c7be <_svfiprintf_r+0x1b2>
 804c776:	9b03      	ldr	r3, [sp, #12]
 804c778:	3307      	adds	r3, #7
 804c77a:	f023 0307 	bic.w	r3, r3, #7
 804c77e:	3308      	adds	r3, #8
 804c780:	9303      	str	r3, [sp, #12]
 804c782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804c784:	4433      	add	r3, r6
 804c786:	9309      	str	r3, [sp, #36]	; 0x24
 804c788:	e767      	b.n	804c65a <_svfiprintf_r+0x4e>
 804c78a:	fb0c 3202 	mla	r2, ip, r2, r3
 804c78e:	460c      	mov	r4, r1
 804c790:	2001      	movs	r0, #1
 804c792:	e7a5      	b.n	804c6e0 <_svfiprintf_r+0xd4>
 804c794:	2300      	movs	r3, #0
 804c796:	3401      	adds	r4, #1
 804c798:	9305      	str	r3, [sp, #20]
 804c79a:	4619      	mov	r1, r3
 804c79c:	f04f 0c0a 	mov.w	ip, #10
 804c7a0:	4620      	mov	r0, r4
 804c7a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 804c7a6:	3a30      	subs	r2, #48	; 0x30
 804c7a8:	2a09      	cmp	r2, #9
 804c7aa:	d903      	bls.n	804c7b4 <_svfiprintf_r+0x1a8>
 804c7ac:	2b00      	cmp	r3, #0
 804c7ae:	d0c5      	beq.n	804c73c <_svfiprintf_r+0x130>
 804c7b0:	9105      	str	r1, [sp, #20]
 804c7b2:	e7c3      	b.n	804c73c <_svfiprintf_r+0x130>
 804c7b4:	fb0c 2101 	mla	r1, ip, r1, r2
 804c7b8:	4604      	mov	r4, r0
 804c7ba:	2301      	movs	r3, #1
 804c7bc:	e7f0      	b.n	804c7a0 <_svfiprintf_r+0x194>
 804c7be:	ab03      	add	r3, sp, #12
 804c7c0:	9300      	str	r3, [sp, #0]
 804c7c2:	462a      	mov	r2, r5
 804c7c4:	4b0f      	ldr	r3, [pc, #60]	; (804c804 <_svfiprintf_r+0x1f8>)
 804c7c6:	a904      	add	r1, sp, #16
 804c7c8:	4638      	mov	r0, r7
 804c7ca:	f3af 8000 	nop.w
 804c7ce:	1c42      	adds	r2, r0, #1
 804c7d0:	4606      	mov	r6, r0
 804c7d2:	d1d6      	bne.n	804c782 <_svfiprintf_r+0x176>
 804c7d4:	89ab      	ldrh	r3, [r5, #12]
 804c7d6:	065b      	lsls	r3, r3, #25
 804c7d8:	f53f af2c 	bmi.w	804c634 <_svfiprintf_r+0x28>
 804c7dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 804c7de:	b01d      	add	sp, #116	; 0x74
 804c7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804c7e4:	ab03      	add	r3, sp, #12
 804c7e6:	9300      	str	r3, [sp, #0]
 804c7e8:	462a      	mov	r2, r5
 804c7ea:	4b06      	ldr	r3, [pc, #24]	; (804c804 <_svfiprintf_r+0x1f8>)
 804c7ec:	a904      	add	r1, sp, #16
 804c7ee:	4638      	mov	r0, r7
 804c7f0:	f000 f87a 	bl	804c8e8 <_printf_i>
 804c7f4:	e7eb      	b.n	804c7ce <_svfiprintf_r+0x1c2>
 804c7f6:	bf00      	nop
 804c7f8:	0804eba0 	.word	0x0804eba0
 804c7fc:	0804ebaa 	.word	0x0804ebaa
 804c800:	00000000 	.word	0x00000000
 804c804:	0804c555 	.word	0x0804c555
 804c808:	0804eba6 	.word	0x0804eba6

0804c80c <_printf_common>:
 804c80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804c810:	4616      	mov	r6, r2
 804c812:	4699      	mov	r9, r3
 804c814:	688a      	ldr	r2, [r1, #8]
 804c816:	690b      	ldr	r3, [r1, #16]
 804c818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 804c81c:	4293      	cmp	r3, r2
 804c81e:	bfb8      	it	lt
 804c820:	4613      	movlt	r3, r2
 804c822:	6033      	str	r3, [r6, #0]
 804c824:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 804c828:	4607      	mov	r7, r0
 804c82a:	460c      	mov	r4, r1
 804c82c:	b10a      	cbz	r2, 804c832 <_printf_common+0x26>
 804c82e:	3301      	adds	r3, #1
 804c830:	6033      	str	r3, [r6, #0]
 804c832:	6823      	ldr	r3, [r4, #0]
 804c834:	0699      	lsls	r1, r3, #26
 804c836:	bf42      	ittt	mi
 804c838:	6833      	ldrmi	r3, [r6, #0]
 804c83a:	3302      	addmi	r3, #2
 804c83c:	6033      	strmi	r3, [r6, #0]
 804c83e:	6825      	ldr	r5, [r4, #0]
 804c840:	f015 0506 	ands.w	r5, r5, #6
 804c844:	d106      	bne.n	804c854 <_printf_common+0x48>
 804c846:	f104 0a19 	add.w	sl, r4, #25
 804c84a:	68e3      	ldr	r3, [r4, #12]
 804c84c:	6832      	ldr	r2, [r6, #0]
 804c84e:	1a9b      	subs	r3, r3, r2
 804c850:	42ab      	cmp	r3, r5
 804c852:	dc26      	bgt.n	804c8a2 <_printf_common+0x96>
 804c854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 804c858:	1e13      	subs	r3, r2, #0
 804c85a:	6822      	ldr	r2, [r4, #0]
 804c85c:	bf18      	it	ne
 804c85e:	2301      	movne	r3, #1
 804c860:	0692      	lsls	r2, r2, #26
 804c862:	d42b      	bmi.n	804c8bc <_printf_common+0xb0>
 804c864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 804c868:	4649      	mov	r1, r9
 804c86a:	4638      	mov	r0, r7
 804c86c:	47c0      	blx	r8
 804c86e:	3001      	adds	r0, #1
 804c870:	d01e      	beq.n	804c8b0 <_printf_common+0xa4>
 804c872:	6823      	ldr	r3, [r4, #0]
 804c874:	68e5      	ldr	r5, [r4, #12]
 804c876:	6832      	ldr	r2, [r6, #0]
 804c878:	f003 0306 	and.w	r3, r3, #6
 804c87c:	2b04      	cmp	r3, #4
 804c87e:	bf08      	it	eq
 804c880:	1aad      	subeq	r5, r5, r2
 804c882:	68a3      	ldr	r3, [r4, #8]
 804c884:	6922      	ldr	r2, [r4, #16]
 804c886:	bf0c      	ite	eq
 804c888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804c88c:	2500      	movne	r5, #0
 804c88e:	4293      	cmp	r3, r2
 804c890:	bfc4      	itt	gt
 804c892:	1a9b      	subgt	r3, r3, r2
 804c894:	18ed      	addgt	r5, r5, r3
 804c896:	2600      	movs	r6, #0
 804c898:	341a      	adds	r4, #26
 804c89a:	42b5      	cmp	r5, r6
 804c89c:	d11a      	bne.n	804c8d4 <_printf_common+0xc8>
 804c89e:	2000      	movs	r0, #0
 804c8a0:	e008      	b.n	804c8b4 <_printf_common+0xa8>
 804c8a2:	2301      	movs	r3, #1
 804c8a4:	4652      	mov	r2, sl
 804c8a6:	4649      	mov	r1, r9
 804c8a8:	4638      	mov	r0, r7
 804c8aa:	47c0      	blx	r8
 804c8ac:	3001      	adds	r0, #1
 804c8ae:	d103      	bne.n	804c8b8 <_printf_common+0xac>
 804c8b0:	f04f 30ff 	mov.w	r0, #4294967295
 804c8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804c8b8:	3501      	adds	r5, #1
 804c8ba:	e7c6      	b.n	804c84a <_printf_common+0x3e>
 804c8bc:	18e1      	adds	r1, r4, r3
 804c8be:	1c5a      	adds	r2, r3, #1
 804c8c0:	2030      	movs	r0, #48	; 0x30
 804c8c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 804c8c6:	4422      	add	r2, r4
 804c8c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 804c8cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 804c8d0:	3302      	adds	r3, #2
 804c8d2:	e7c7      	b.n	804c864 <_printf_common+0x58>
 804c8d4:	2301      	movs	r3, #1
 804c8d6:	4622      	mov	r2, r4
 804c8d8:	4649      	mov	r1, r9
 804c8da:	4638      	mov	r0, r7
 804c8dc:	47c0      	blx	r8
 804c8de:	3001      	adds	r0, #1
 804c8e0:	d0e6      	beq.n	804c8b0 <_printf_common+0xa4>
 804c8e2:	3601      	adds	r6, #1
 804c8e4:	e7d9      	b.n	804c89a <_printf_common+0x8e>
	...

0804c8e8 <_printf_i>:
 804c8e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 804c8ec:	7e0f      	ldrb	r7, [r1, #24]
 804c8ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 804c8f0:	2f78      	cmp	r7, #120	; 0x78
 804c8f2:	4691      	mov	r9, r2
 804c8f4:	4680      	mov	r8, r0
 804c8f6:	460c      	mov	r4, r1
 804c8f8:	469a      	mov	sl, r3
 804c8fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 804c8fe:	d807      	bhi.n	804c910 <_printf_i+0x28>
 804c900:	2f62      	cmp	r7, #98	; 0x62
 804c902:	d80a      	bhi.n	804c91a <_printf_i+0x32>
 804c904:	2f00      	cmp	r7, #0
 804c906:	f000 80d8 	beq.w	804caba <_printf_i+0x1d2>
 804c90a:	2f58      	cmp	r7, #88	; 0x58
 804c90c:	f000 80a3 	beq.w	804ca56 <_printf_i+0x16e>
 804c910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804c914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 804c918:	e03a      	b.n	804c990 <_printf_i+0xa8>
 804c91a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 804c91e:	2b15      	cmp	r3, #21
 804c920:	d8f6      	bhi.n	804c910 <_printf_i+0x28>
 804c922:	a101      	add	r1, pc, #4	; (adr r1, 804c928 <_printf_i+0x40>)
 804c924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 804c928:	0804c981 	.word	0x0804c981
 804c92c:	0804c995 	.word	0x0804c995
 804c930:	0804c911 	.word	0x0804c911
 804c934:	0804c911 	.word	0x0804c911
 804c938:	0804c911 	.word	0x0804c911
 804c93c:	0804c911 	.word	0x0804c911
 804c940:	0804c995 	.word	0x0804c995
 804c944:	0804c911 	.word	0x0804c911
 804c948:	0804c911 	.word	0x0804c911
 804c94c:	0804c911 	.word	0x0804c911
 804c950:	0804c911 	.word	0x0804c911
 804c954:	0804caa1 	.word	0x0804caa1
 804c958:	0804c9c5 	.word	0x0804c9c5
 804c95c:	0804ca83 	.word	0x0804ca83
 804c960:	0804c911 	.word	0x0804c911
 804c964:	0804c911 	.word	0x0804c911
 804c968:	0804cac3 	.word	0x0804cac3
 804c96c:	0804c911 	.word	0x0804c911
 804c970:	0804c9c5 	.word	0x0804c9c5
 804c974:	0804c911 	.word	0x0804c911
 804c978:	0804c911 	.word	0x0804c911
 804c97c:	0804ca8b 	.word	0x0804ca8b
 804c980:	682b      	ldr	r3, [r5, #0]
 804c982:	1d1a      	adds	r2, r3, #4
 804c984:	681b      	ldr	r3, [r3, #0]
 804c986:	602a      	str	r2, [r5, #0]
 804c988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804c98c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 804c990:	2301      	movs	r3, #1
 804c992:	e0a3      	b.n	804cadc <_printf_i+0x1f4>
 804c994:	6820      	ldr	r0, [r4, #0]
 804c996:	6829      	ldr	r1, [r5, #0]
 804c998:	0606      	lsls	r6, r0, #24
 804c99a:	f101 0304 	add.w	r3, r1, #4
 804c99e:	d50a      	bpl.n	804c9b6 <_printf_i+0xce>
 804c9a0:	680e      	ldr	r6, [r1, #0]
 804c9a2:	602b      	str	r3, [r5, #0]
 804c9a4:	2e00      	cmp	r6, #0
 804c9a6:	da03      	bge.n	804c9b0 <_printf_i+0xc8>
 804c9a8:	232d      	movs	r3, #45	; 0x2d
 804c9aa:	4276      	negs	r6, r6
 804c9ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804c9b0:	485e      	ldr	r0, [pc, #376]	; (804cb2c <_printf_i+0x244>)
 804c9b2:	230a      	movs	r3, #10
 804c9b4:	e019      	b.n	804c9ea <_printf_i+0x102>
 804c9b6:	680e      	ldr	r6, [r1, #0]
 804c9b8:	602b      	str	r3, [r5, #0]
 804c9ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 804c9be:	bf18      	it	ne
 804c9c0:	b236      	sxthne	r6, r6
 804c9c2:	e7ef      	b.n	804c9a4 <_printf_i+0xbc>
 804c9c4:	682b      	ldr	r3, [r5, #0]
 804c9c6:	6820      	ldr	r0, [r4, #0]
 804c9c8:	1d19      	adds	r1, r3, #4
 804c9ca:	6029      	str	r1, [r5, #0]
 804c9cc:	0601      	lsls	r1, r0, #24
 804c9ce:	d501      	bpl.n	804c9d4 <_printf_i+0xec>
 804c9d0:	681e      	ldr	r6, [r3, #0]
 804c9d2:	e002      	b.n	804c9da <_printf_i+0xf2>
 804c9d4:	0646      	lsls	r6, r0, #25
 804c9d6:	d5fb      	bpl.n	804c9d0 <_printf_i+0xe8>
 804c9d8:	881e      	ldrh	r6, [r3, #0]
 804c9da:	4854      	ldr	r0, [pc, #336]	; (804cb2c <_printf_i+0x244>)
 804c9dc:	2f6f      	cmp	r7, #111	; 0x6f
 804c9de:	bf0c      	ite	eq
 804c9e0:	2308      	moveq	r3, #8
 804c9e2:	230a      	movne	r3, #10
 804c9e4:	2100      	movs	r1, #0
 804c9e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 804c9ea:	6865      	ldr	r5, [r4, #4]
 804c9ec:	60a5      	str	r5, [r4, #8]
 804c9ee:	2d00      	cmp	r5, #0
 804c9f0:	bfa2      	ittt	ge
 804c9f2:	6821      	ldrge	r1, [r4, #0]
 804c9f4:	f021 0104 	bicge.w	r1, r1, #4
 804c9f8:	6021      	strge	r1, [r4, #0]
 804c9fa:	b90e      	cbnz	r6, 804ca00 <_printf_i+0x118>
 804c9fc:	2d00      	cmp	r5, #0
 804c9fe:	d04d      	beq.n	804ca9c <_printf_i+0x1b4>
 804ca00:	4615      	mov	r5, r2
 804ca02:	fbb6 f1f3 	udiv	r1, r6, r3
 804ca06:	fb03 6711 	mls	r7, r3, r1, r6
 804ca0a:	5dc7      	ldrb	r7, [r0, r7]
 804ca0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 804ca10:	4637      	mov	r7, r6
 804ca12:	42bb      	cmp	r3, r7
 804ca14:	460e      	mov	r6, r1
 804ca16:	d9f4      	bls.n	804ca02 <_printf_i+0x11a>
 804ca18:	2b08      	cmp	r3, #8
 804ca1a:	d10b      	bne.n	804ca34 <_printf_i+0x14c>
 804ca1c:	6823      	ldr	r3, [r4, #0]
 804ca1e:	07de      	lsls	r6, r3, #31
 804ca20:	d508      	bpl.n	804ca34 <_printf_i+0x14c>
 804ca22:	6923      	ldr	r3, [r4, #16]
 804ca24:	6861      	ldr	r1, [r4, #4]
 804ca26:	4299      	cmp	r1, r3
 804ca28:	bfde      	ittt	le
 804ca2a:	2330      	movle	r3, #48	; 0x30
 804ca2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 804ca30:	f105 35ff 	addle.w	r5, r5, #4294967295
 804ca34:	1b52      	subs	r2, r2, r5
 804ca36:	6122      	str	r2, [r4, #16]
 804ca38:	f8cd a000 	str.w	sl, [sp]
 804ca3c:	464b      	mov	r3, r9
 804ca3e:	aa03      	add	r2, sp, #12
 804ca40:	4621      	mov	r1, r4
 804ca42:	4640      	mov	r0, r8
 804ca44:	f7ff fee2 	bl	804c80c <_printf_common>
 804ca48:	3001      	adds	r0, #1
 804ca4a:	d14c      	bne.n	804cae6 <_printf_i+0x1fe>
 804ca4c:	f04f 30ff 	mov.w	r0, #4294967295
 804ca50:	b004      	add	sp, #16
 804ca52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804ca56:	4835      	ldr	r0, [pc, #212]	; (804cb2c <_printf_i+0x244>)
 804ca58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 804ca5c:	6829      	ldr	r1, [r5, #0]
 804ca5e:	6823      	ldr	r3, [r4, #0]
 804ca60:	f851 6b04 	ldr.w	r6, [r1], #4
 804ca64:	6029      	str	r1, [r5, #0]
 804ca66:	061d      	lsls	r5, r3, #24
 804ca68:	d514      	bpl.n	804ca94 <_printf_i+0x1ac>
 804ca6a:	07df      	lsls	r7, r3, #31
 804ca6c:	bf44      	itt	mi
 804ca6e:	f043 0320 	orrmi.w	r3, r3, #32
 804ca72:	6023      	strmi	r3, [r4, #0]
 804ca74:	b91e      	cbnz	r6, 804ca7e <_printf_i+0x196>
 804ca76:	6823      	ldr	r3, [r4, #0]
 804ca78:	f023 0320 	bic.w	r3, r3, #32
 804ca7c:	6023      	str	r3, [r4, #0]
 804ca7e:	2310      	movs	r3, #16
 804ca80:	e7b0      	b.n	804c9e4 <_printf_i+0xfc>
 804ca82:	6823      	ldr	r3, [r4, #0]
 804ca84:	f043 0320 	orr.w	r3, r3, #32
 804ca88:	6023      	str	r3, [r4, #0]
 804ca8a:	2378      	movs	r3, #120	; 0x78
 804ca8c:	4828      	ldr	r0, [pc, #160]	; (804cb30 <_printf_i+0x248>)
 804ca8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 804ca92:	e7e3      	b.n	804ca5c <_printf_i+0x174>
 804ca94:	0659      	lsls	r1, r3, #25
 804ca96:	bf48      	it	mi
 804ca98:	b2b6      	uxthmi	r6, r6
 804ca9a:	e7e6      	b.n	804ca6a <_printf_i+0x182>
 804ca9c:	4615      	mov	r5, r2
 804ca9e:	e7bb      	b.n	804ca18 <_printf_i+0x130>
 804caa0:	682b      	ldr	r3, [r5, #0]
 804caa2:	6826      	ldr	r6, [r4, #0]
 804caa4:	6961      	ldr	r1, [r4, #20]
 804caa6:	1d18      	adds	r0, r3, #4
 804caa8:	6028      	str	r0, [r5, #0]
 804caaa:	0635      	lsls	r5, r6, #24
 804caac:	681b      	ldr	r3, [r3, #0]
 804caae:	d501      	bpl.n	804cab4 <_printf_i+0x1cc>
 804cab0:	6019      	str	r1, [r3, #0]
 804cab2:	e002      	b.n	804caba <_printf_i+0x1d2>
 804cab4:	0670      	lsls	r0, r6, #25
 804cab6:	d5fb      	bpl.n	804cab0 <_printf_i+0x1c8>
 804cab8:	8019      	strh	r1, [r3, #0]
 804caba:	2300      	movs	r3, #0
 804cabc:	6123      	str	r3, [r4, #16]
 804cabe:	4615      	mov	r5, r2
 804cac0:	e7ba      	b.n	804ca38 <_printf_i+0x150>
 804cac2:	682b      	ldr	r3, [r5, #0]
 804cac4:	1d1a      	adds	r2, r3, #4
 804cac6:	602a      	str	r2, [r5, #0]
 804cac8:	681d      	ldr	r5, [r3, #0]
 804caca:	6862      	ldr	r2, [r4, #4]
 804cacc:	2100      	movs	r1, #0
 804cace:	4628      	mov	r0, r5
 804cad0:	f7f3 fb8e 	bl	80401f0 <memchr>
 804cad4:	b108      	cbz	r0, 804cada <_printf_i+0x1f2>
 804cad6:	1b40      	subs	r0, r0, r5
 804cad8:	6060      	str	r0, [r4, #4]
 804cada:	6863      	ldr	r3, [r4, #4]
 804cadc:	6123      	str	r3, [r4, #16]
 804cade:	2300      	movs	r3, #0
 804cae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804cae4:	e7a8      	b.n	804ca38 <_printf_i+0x150>
 804cae6:	6923      	ldr	r3, [r4, #16]
 804cae8:	462a      	mov	r2, r5
 804caea:	4649      	mov	r1, r9
 804caec:	4640      	mov	r0, r8
 804caee:	47d0      	blx	sl
 804caf0:	3001      	adds	r0, #1
 804caf2:	d0ab      	beq.n	804ca4c <_printf_i+0x164>
 804caf4:	6823      	ldr	r3, [r4, #0]
 804caf6:	079b      	lsls	r3, r3, #30
 804caf8:	d413      	bmi.n	804cb22 <_printf_i+0x23a>
 804cafa:	68e0      	ldr	r0, [r4, #12]
 804cafc:	9b03      	ldr	r3, [sp, #12]
 804cafe:	4298      	cmp	r0, r3
 804cb00:	bfb8      	it	lt
 804cb02:	4618      	movlt	r0, r3
 804cb04:	e7a4      	b.n	804ca50 <_printf_i+0x168>
 804cb06:	2301      	movs	r3, #1
 804cb08:	4632      	mov	r2, r6
 804cb0a:	4649      	mov	r1, r9
 804cb0c:	4640      	mov	r0, r8
 804cb0e:	47d0      	blx	sl
 804cb10:	3001      	adds	r0, #1
 804cb12:	d09b      	beq.n	804ca4c <_printf_i+0x164>
 804cb14:	3501      	adds	r5, #1
 804cb16:	68e3      	ldr	r3, [r4, #12]
 804cb18:	9903      	ldr	r1, [sp, #12]
 804cb1a:	1a5b      	subs	r3, r3, r1
 804cb1c:	42ab      	cmp	r3, r5
 804cb1e:	dcf2      	bgt.n	804cb06 <_printf_i+0x21e>
 804cb20:	e7eb      	b.n	804cafa <_printf_i+0x212>
 804cb22:	2500      	movs	r5, #0
 804cb24:	f104 0619 	add.w	r6, r4, #25
 804cb28:	e7f5      	b.n	804cb16 <_printf_i+0x22e>
 804cb2a:	bf00      	nop
 804cb2c:	0804ebb1 	.word	0x0804ebb1
 804cb30:	0804ebc2 	.word	0x0804ebc2

0804cb34 <__retarget_lock_acquire_recursive>:
 804cb34:	4770      	bx	lr

0804cb36 <__retarget_lock_release_recursive>:
 804cb36:	4770      	bx	lr

0804cb38 <memcpy>:
 804cb38:	440a      	add	r2, r1
 804cb3a:	4291      	cmp	r1, r2
 804cb3c:	f100 33ff 	add.w	r3, r0, #4294967295
 804cb40:	d100      	bne.n	804cb44 <memcpy+0xc>
 804cb42:	4770      	bx	lr
 804cb44:	b510      	push	{r4, lr}
 804cb46:	f811 4b01 	ldrb.w	r4, [r1], #1
 804cb4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 804cb4e:	4291      	cmp	r1, r2
 804cb50:	d1f9      	bne.n	804cb46 <memcpy+0xe>
 804cb52:	bd10      	pop	{r4, pc}

0804cb54 <memmove>:
 804cb54:	4288      	cmp	r0, r1
 804cb56:	b510      	push	{r4, lr}
 804cb58:	eb01 0402 	add.w	r4, r1, r2
 804cb5c:	d902      	bls.n	804cb64 <memmove+0x10>
 804cb5e:	4284      	cmp	r4, r0
 804cb60:	4623      	mov	r3, r4
 804cb62:	d807      	bhi.n	804cb74 <memmove+0x20>
 804cb64:	1e43      	subs	r3, r0, #1
 804cb66:	42a1      	cmp	r1, r4
 804cb68:	d008      	beq.n	804cb7c <memmove+0x28>
 804cb6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 804cb6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 804cb72:	e7f8      	b.n	804cb66 <memmove+0x12>
 804cb74:	4402      	add	r2, r0
 804cb76:	4601      	mov	r1, r0
 804cb78:	428a      	cmp	r2, r1
 804cb7a:	d100      	bne.n	804cb7e <memmove+0x2a>
 804cb7c:	bd10      	pop	{r4, pc}
 804cb7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 804cb82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 804cb86:	e7f7      	b.n	804cb78 <memmove+0x24>

0804cb88 <_realloc_r>:
 804cb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804cb8c:	4680      	mov	r8, r0
 804cb8e:	4614      	mov	r4, r2
 804cb90:	460e      	mov	r6, r1
 804cb92:	b921      	cbnz	r1, 804cb9e <_realloc_r+0x16>
 804cb94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804cb98:	4611      	mov	r1, r2
 804cb9a:	f7ff bc2b 	b.w	804c3f4 <_malloc_r>
 804cb9e:	b92a      	cbnz	r2, 804cbac <_realloc_r+0x24>
 804cba0:	f7ff fbbc 	bl	804c31c <_free_r>
 804cba4:	4625      	mov	r5, r4
 804cba6:	4628      	mov	r0, r5
 804cba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804cbac:	f000 f81b 	bl	804cbe6 <_malloc_usable_size_r>
 804cbb0:	4284      	cmp	r4, r0
 804cbb2:	4607      	mov	r7, r0
 804cbb4:	d802      	bhi.n	804cbbc <_realloc_r+0x34>
 804cbb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 804cbba:	d812      	bhi.n	804cbe2 <_realloc_r+0x5a>
 804cbbc:	4621      	mov	r1, r4
 804cbbe:	4640      	mov	r0, r8
 804cbc0:	f7ff fc18 	bl	804c3f4 <_malloc_r>
 804cbc4:	4605      	mov	r5, r0
 804cbc6:	2800      	cmp	r0, #0
 804cbc8:	d0ed      	beq.n	804cba6 <_realloc_r+0x1e>
 804cbca:	42bc      	cmp	r4, r7
 804cbcc:	4622      	mov	r2, r4
 804cbce:	4631      	mov	r1, r6
 804cbd0:	bf28      	it	cs
 804cbd2:	463a      	movcs	r2, r7
 804cbd4:	f7ff ffb0 	bl	804cb38 <memcpy>
 804cbd8:	4631      	mov	r1, r6
 804cbda:	4640      	mov	r0, r8
 804cbdc:	f7ff fb9e 	bl	804c31c <_free_r>
 804cbe0:	e7e1      	b.n	804cba6 <_realloc_r+0x1e>
 804cbe2:	4635      	mov	r5, r6
 804cbe4:	e7df      	b.n	804cba6 <_realloc_r+0x1e>

0804cbe6 <_malloc_usable_size_r>:
 804cbe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804cbea:	1f18      	subs	r0, r3, #4
 804cbec:	2b00      	cmp	r3, #0
 804cbee:	bfbc      	itt	lt
 804cbf0:	580b      	ldrlt	r3, [r1, r0]
 804cbf2:	18c0      	addlt	r0, r0, r3
 804cbf4:	4770      	bx	lr
	...

0804cbf8 <_init>:
 804cbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804cbfa:	bf00      	nop
 804cbfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804cbfe:	bc08      	pop	{r3}
 804cc00:	469e      	mov	lr, r3
 804cc02:	4770      	bx	lr

0804cc04 <_fini>:
 804cc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804cc06:	bf00      	nop
 804cc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804cc0a:	bc08      	pop	{r3}
 804cc0c:	469e      	mov	lr, r3
 804cc0e:	4770      	bx	lr
