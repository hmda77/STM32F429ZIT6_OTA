
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d94c  080401b0  080401b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002080  0804dafc  0804dafc  0001dafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804fb7c  0804fb7c  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  0804fb7c  0804fb7c  0001fb7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804fb84  0804fb84  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804fb84  0804fb84  0001fb84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804fb88  0804fb88  0001fb88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0804fb8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e0  2**0
                  CONTENTS
 10 .bss          00000c78  200000e0  200000e0  000200e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d58  20000d58  000200e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a621  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000579b  00000000  00000000  0004a731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002188  00000000  00000000  0004fed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f58  00000000  00000000  00052058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c2e7  00000000  00000000  00053fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c550  00000000  00000000  00080297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f016e  00000000  00000000  000ac7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019c955  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000097ec  00000000  00000000  0019c9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401b0 <__do_global_dtors_aux>:
 80401b0:	b510      	push	{r4, lr}
 80401b2:	4c05      	ldr	r4, [pc, #20]	; (80401c8 <__do_global_dtors_aux+0x18>)
 80401b4:	7823      	ldrb	r3, [r4, #0]
 80401b6:	b933      	cbnz	r3, 80401c6 <__do_global_dtors_aux+0x16>
 80401b8:	4b04      	ldr	r3, [pc, #16]	; (80401cc <__do_global_dtors_aux+0x1c>)
 80401ba:	b113      	cbz	r3, 80401c2 <__do_global_dtors_aux+0x12>
 80401bc:	4804      	ldr	r0, [pc, #16]	; (80401d0 <__do_global_dtors_aux+0x20>)
 80401be:	f3af 8000 	nop.w
 80401c2:	2301      	movs	r3, #1
 80401c4:	7023      	strb	r3, [r4, #0]
 80401c6:	bd10      	pop	{r4, pc}
 80401c8:	200000e0 	.word	0x200000e0
 80401cc:	00000000 	.word	0x00000000
 80401d0:	0804dae4 	.word	0x0804dae4

080401d4 <frame_dummy>:
 80401d4:	b508      	push	{r3, lr}
 80401d6:	4b03      	ldr	r3, [pc, #12]	; (80401e4 <frame_dummy+0x10>)
 80401d8:	b11b      	cbz	r3, 80401e2 <frame_dummy+0xe>
 80401da:	4903      	ldr	r1, [pc, #12]	; (80401e8 <frame_dummy+0x14>)
 80401dc:	4803      	ldr	r0, [pc, #12]	; (80401ec <frame_dummy+0x18>)
 80401de:	f3af 8000 	nop.w
 80401e2:	bd08      	pop	{r3, pc}
 80401e4:	00000000 	.word	0x00000000
 80401e8:	200000e4 	.word	0x200000e4
 80401ec:	0804dae4 	.word	0x0804dae4

080401f0 <memchr>:
 80401f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80401f4:	2a10      	cmp	r2, #16
 80401f6:	db2b      	blt.n	8040250 <memchr+0x60>
 80401f8:	f010 0f07 	tst.w	r0, #7
 80401fc:	d008      	beq.n	8040210 <memchr+0x20>
 80401fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040202:	3a01      	subs	r2, #1
 8040204:	428b      	cmp	r3, r1
 8040206:	d02d      	beq.n	8040264 <memchr+0x74>
 8040208:	f010 0f07 	tst.w	r0, #7
 804020c:	b342      	cbz	r2, 8040260 <memchr+0x70>
 804020e:	d1f6      	bne.n	80401fe <memchr+0xe>
 8040210:	b4f0      	push	{r4, r5, r6, r7}
 8040212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804021a:	f022 0407 	bic.w	r4, r2, #7
 804021e:	f07f 0700 	mvns.w	r7, #0
 8040222:	2300      	movs	r3, #0
 8040224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040228:	3c08      	subs	r4, #8
 804022a:	ea85 0501 	eor.w	r5, r5, r1
 804022e:	ea86 0601 	eor.w	r6, r6, r1
 8040232:	fa85 f547 	uadd8	r5, r5, r7
 8040236:	faa3 f587 	sel	r5, r3, r7
 804023a:	fa86 f647 	uadd8	r6, r6, r7
 804023e:	faa5 f687 	sel	r6, r5, r7
 8040242:	b98e      	cbnz	r6, 8040268 <memchr+0x78>
 8040244:	d1ee      	bne.n	8040224 <memchr+0x34>
 8040246:	bcf0      	pop	{r4, r5, r6, r7}
 8040248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804024c:	f002 0207 	and.w	r2, r2, #7
 8040250:	b132      	cbz	r2, 8040260 <memchr+0x70>
 8040252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040256:	3a01      	subs	r2, #1
 8040258:	ea83 0301 	eor.w	r3, r3, r1
 804025c:	b113      	cbz	r3, 8040264 <memchr+0x74>
 804025e:	d1f8      	bne.n	8040252 <memchr+0x62>
 8040260:	2000      	movs	r0, #0
 8040262:	4770      	bx	lr
 8040264:	3801      	subs	r0, #1
 8040266:	4770      	bx	lr
 8040268:	2d00      	cmp	r5, #0
 804026a:	bf06      	itte	eq
 804026c:	4635      	moveq	r5, r6
 804026e:	3803      	subeq	r0, #3
 8040270:	3807      	subne	r0, #7
 8040272:	f015 0f01 	tst.w	r5, #1
 8040276:	d107      	bne.n	8040288 <memchr+0x98>
 8040278:	3001      	adds	r0, #1
 804027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804027e:	bf02      	ittt	eq
 8040280:	3001      	addeq	r0, #1
 8040282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040286:	3001      	addeq	r0, #1
 8040288:	bcf0      	pop	{r4, r5, r6, r7}
 804028a:	3801      	subs	r0, #1
 804028c:	4770      	bx	lr
 804028e:	bf00      	nop

08040290 <__aeabi_uldivmod>:
 8040290:	b953      	cbnz	r3, 80402a8 <__aeabi_uldivmod+0x18>
 8040292:	b94a      	cbnz	r2, 80402a8 <__aeabi_uldivmod+0x18>
 8040294:	2900      	cmp	r1, #0
 8040296:	bf08      	it	eq
 8040298:	2800      	cmpeq	r0, #0
 804029a:	bf1c      	itt	ne
 804029c:	f04f 31ff 	movne.w	r1, #4294967295
 80402a0:	f04f 30ff 	movne.w	r0, #4294967295
 80402a4:	f000 b974 	b.w	8040590 <__aeabi_idiv0>
 80402a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80402ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80402b0:	f000 f806 	bl	80402c0 <__udivmoddi4>
 80402b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80402b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80402bc:	b004      	add	sp, #16
 80402be:	4770      	bx	lr

080402c0 <__udivmoddi4>:
 80402c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80402c4:	9d08      	ldr	r5, [sp, #32]
 80402c6:	4604      	mov	r4, r0
 80402c8:	468e      	mov	lr, r1
 80402ca:	2b00      	cmp	r3, #0
 80402cc:	d14d      	bne.n	804036a <__udivmoddi4+0xaa>
 80402ce:	428a      	cmp	r2, r1
 80402d0:	4694      	mov	ip, r2
 80402d2:	d969      	bls.n	80403a8 <__udivmoddi4+0xe8>
 80402d4:	fab2 f282 	clz	r2, r2
 80402d8:	b152      	cbz	r2, 80402f0 <__udivmoddi4+0x30>
 80402da:	fa01 f302 	lsl.w	r3, r1, r2
 80402de:	f1c2 0120 	rsb	r1, r2, #32
 80402e2:	fa20 f101 	lsr.w	r1, r0, r1
 80402e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80402ea:	ea41 0e03 	orr.w	lr, r1, r3
 80402ee:	4094      	lsls	r4, r2
 80402f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80402f4:	0c21      	lsrs	r1, r4, #16
 80402f6:	fbbe f6f8 	udiv	r6, lr, r8
 80402fa:	fa1f f78c 	uxth.w	r7, ip
 80402fe:	fb08 e316 	mls	r3, r8, r6, lr
 8040302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040306:	fb06 f107 	mul.w	r1, r6, r7
 804030a:	4299      	cmp	r1, r3
 804030c:	d90a      	bls.n	8040324 <__udivmoddi4+0x64>
 804030e:	eb1c 0303 	adds.w	r3, ip, r3
 8040312:	f106 30ff 	add.w	r0, r6, #4294967295
 8040316:	f080 811f 	bcs.w	8040558 <__udivmoddi4+0x298>
 804031a:	4299      	cmp	r1, r3
 804031c:	f240 811c 	bls.w	8040558 <__udivmoddi4+0x298>
 8040320:	3e02      	subs	r6, #2
 8040322:	4463      	add	r3, ip
 8040324:	1a5b      	subs	r3, r3, r1
 8040326:	b2a4      	uxth	r4, r4
 8040328:	fbb3 f0f8 	udiv	r0, r3, r8
 804032c:	fb08 3310 	mls	r3, r8, r0, r3
 8040330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040334:	fb00 f707 	mul.w	r7, r0, r7
 8040338:	42a7      	cmp	r7, r4
 804033a:	d90a      	bls.n	8040352 <__udivmoddi4+0x92>
 804033c:	eb1c 0404 	adds.w	r4, ip, r4
 8040340:	f100 33ff 	add.w	r3, r0, #4294967295
 8040344:	f080 810a 	bcs.w	804055c <__udivmoddi4+0x29c>
 8040348:	42a7      	cmp	r7, r4
 804034a:	f240 8107 	bls.w	804055c <__udivmoddi4+0x29c>
 804034e:	4464      	add	r4, ip
 8040350:	3802      	subs	r0, #2
 8040352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040356:	1be4      	subs	r4, r4, r7
 8040358:	2600      	movs	r6, #0
 804035a:	b11d      	cbz	r5, 8040364 <__udivmoddi4+0xa4>
 804035c:	40d4      	lsrs	r4, r2
 804035e:	2300      	movs	r3, #0
 8040360:	e9c5 4300 	strd	r4, r3, [r5]
 8040364:	4631      	mov	r1, r6
 8040366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804036a:	428b      	cmp	r3, r1
 804036c:	d909      	bls.n	8040382 <__udivmoddi4+0xc2>
 804036e:	2d00      	cmp	r5, #0
 8040370:	f000 80ef 	beq.w	8040552 <__udivmoddi4+0x292>
 8040374:	2600      	movs	r6, #0
 8040376:	e9c5 0100 	strd	r0, r1, [r5]
 804037a:	4630      	mov	r0, r6
 804037c:	4631      	mov	r1, r6
 804037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040382:	fab3 f683 	clz	r6, r3
 8040386:	2e00      	cmp	r6, #0
 8040388:	d14a      	bne.n	8040420 <__udivmoddi4+0x160>
 804038a:	428b      	cmp	r3, r1
 804038c:	d302      	bcc.n	8040394 <__udivmoddi4+0xd4>
 804038e:	4282      	cmp	r2, r0
 8040390:	f200 80f9 	bhi.w	8040586 <__udivmoddi4+0x2c6>
 8040394:	1a84      	subs	r4, r0, r2
 8040396:	eb61 0303 	sbc.w	r3, r1, r3
 804039a:	2001      	movs	r0, #1
 804039c:	469e      	mov	lr, r3
 804039e:	2d00      	cmp	r5, #0
 80403a0:	d0e0      	beq.n	8040364 <__udivmoddi4+0xa4>
 80403a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80403a6:	e7dd      	b.n	8040364 <__udivmoddi4+0xa4>
 80403a8:	b902      	cbnz	r2, 80403ac <__udivmoddi4+0xec>
 80403aa:	deff      	udf	#255	; 0xff
 80403ac:	fab2 f282 	clz	r2, r2
 80403b0:	2a00      	cmp	r2, #0
 80403b2:	f040 8092 	bne.w	80404da <__udivmoddi4+0x21a>
 80403b6:	eba1 010c 	sub.w	r1, r1, ip
 80403ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80403be:	fa1f fe8c 	uxth.w	lr, ip
 80403c2:	2601      	movs	r6, #1
 80403c4:	0c20      	lsrs	r0, r4, #16
 80403c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80403ca:	fb07 1113 	mls	r1, r7, r3, r1
 80403ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80403d2:	fb0e f003 	mul.w	r0, lr, r3
 80403d6:	4288      	cmp	r0, r1
 80403d8:	d908      	bls.n	80403ec <__udivmoddi4+0x12c>
 80403da:	eb1c 0101 	adds.w	r1, ip, r1
 80403de:	f103 38ff 	add.w	r8, r3, #4294967295
 80403e2:	d202      	bcs.n	80403ea <__udivmoddi4+0x12a>
 80403e4:	4288      	cmp	r0, r1
 80403e6:	f200 80cb 	bhi.w	8040580 <__udivmoddi4+0x2c0>
 80403ea:	4643      	mov	r3, r8
 80403ec:	1a09      	subs	r1, r1, r0
 80403ee:	b2a4      	uxth	r4, r4
 80403f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80403f4:	fb07 1110 	mls	r1, r7, r0, r1
 80403f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80403fc:	fb0e fe00 	mul.w	lr, lr, r0
 8040400:	45a6      	cmp	lr, r4
 8040402:	d908      	bls.n	8040416 <__udivmoddi4+0x156>
 8040404:	eb1c 0404 	adds.w	r4, ip, r4
 8040408:	f100 31ff 	add.w	r1, r0, #4294967295
 804040c:	d202      	bcs.n	8040414 <__udivmoddi4+0x154>
 804040e:	45a6      	cmp	lr, r4
 8040410:	f200 80bb 	bhi.w	804058a <__udivmoddi4+0x2ca>
 8040414:	4608      	mov	r0, r1
 8040416:	eba4 040e 	sub.w	r4, r4, lr
 804041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804041e:	e79c      	b.n	804035a <__udivmoddi4+0x9a>
 8040420:	f1c6 0720 	rsb	r7, r6, #32
 8040424:	40b3      	lsls	r3, r6
 8040426:	fa22 fc07 	lsr.w	ip, r2, r7
 804042a:	ea4c 0c03 	orr.w	ip, ip, r3
 804042e:	fa20 f407 	lsr.w	r4, r0, r7
 8040432:	fa01 f306 	lsl.w	r3, r1, r6
 8040436:	431c      	orrs	r4, r3
 8040438:	40f9      	lsrs	r1, r7
 804043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804043e:	fa00 f306 	lsl.w	r3, r0, r6
 8040442:	fbb1 f8f9 	udiv	r8, r1, r9
 8040446:	0c20      	lsrs	r0, r4, #16
 8040448:	fa1f fe8c 	uxth.w	lr, ip
 804044c:	fb09 1118 	mls	r1, r9, r8, r1
 8040450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040454:	fb08 f00e 	mul.w	r0, r8, lr
 8040458:	4288      	cmp	r0, r1
 804045a:	fa02 f206 	lsl.w	r2, r2, r6
 804045e:	d90b      	bls.n	8040478 <__udivmoddi4+0x1b8>
 8040460:	eb1c 0101 	adds.w	r1, ip, r1
 8040464:	f108 3aff 	add.w	sl, r8, #4294967295
 8040468:	f080 8088 	bcs.w	804057c <__udivmoddi4+0x2bc>
 804046c:	4288      	cmp	r0, r1
 804046e:	f240 8085 	bls.w	804057c <__udivmoddi4+0x2bc>
 8040472:	f1a8 0802 	sub.w	r8, r8, #2
 8040476:	4461      	add	r1, ip
 8040478:	1a09      	subs	r1, r1, r0
 804047a:	b2a4      	uxth	r4, r4
 804047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8040480:	fb09 1110 	mls	r1, r9, r0, r1
 8040484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040488:	fb00 fe0e 	mul.w	lr, r0, lr
 804048c:	458e      	cmp	lr, r1
 804048e:	d908      	bls.n	80404a2 <__udivmoddi4+0x1e2>
 8040490:	eb1c 0101 	adds.w	r1, ip, r1
 8040494:	f100 34ff 	add.w	r4, r0, #4294967295
 8040498:	d26c      	bcs.n	8040574 <__udivmoddi4+0x2b4>
 804049a:	458e      	cmp	lr, r1
 804049c:	d96a      	bls.n	8040574 <__udivmoddi4+0x2b4>
 804049e:	3802      	subs	r0, #2
 80404a0:	4461      	add	r1, ip
 80404a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80404a6:	fba0 9402 	umull	r9, r4, r0, r2
 80404aa:	eba1 010e 	sub.w	r1, r1, lr
 80404ae:	42a1      	cmp	r1, r4
 80404b0:	46c8      	mov	r8, r9
 80404b2:	46a6      	mov	lr, r4
 80404b4:	d356      	bcc.n	8040564 <__udivmoddi4+0x2a4>
 80404b6:	d053      	beq.n	8040560 <__udivmoddi4+0x2a0>
 80404b8:	b15d      	cbz	r5, 80404d2 <__udivmoddi4+0x212>
 80404ba:	ebb3 0208 	subs.w	r2, r3, r8
 80404be:	eb61 010e 	sbc.w	r1, r1, lr
 80404c2:	fa01 f707 	lsl.w	r7, r1, r7
 80404c6:	fa22 f306 	lsr.w	r3, r2, r6
 80404ca:	40f1      	lsrs	r1, r6
 80404cc:	431f      	orrs	r7, r3
 80404ce:	e9c5 7100 	strd	r7, r1, [r5]
 80404d2:	2600      	movs	r6, #0
 80404d4:	4631      	mov	r1, r6
 80404d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80404da:	f1c2 0320 	rsb	r3, r2, #32
 80404de:	40d8      	lsrs	r0, r3
 80404e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80404e4:	fa21 f303 	lsr.w	r3, r1, r3
 80404e8:	4091      	lsls	r1, r2
 80404ea:	4301      	orrs	r1, r0
 80404ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80404f0:	fa1f fe8c 	uxth.w	lr, ip
 80404f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80404f8:	fb07 3610 	mls	r6, r7, r0, r3
 80404fc:	0c0b      	lsrs	r3, r1, #16
 80404fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040502:	fb00 f60e 	mul.w	r6, r0, lr
 8040506:	429e      	cmp	r6, r3
 8040508:	fa04 f402 	lsl.w	r4, r4, r2
 804050c:	d908      	bls.n	8040520 <__udivmoddi4+0x260>
 804050e:	eb1c 0303 	adds.w	r3, ip, r3
 8040512:	f100 38ff 	add.w	r8, r0, #4294967295
 8040516:	d22f      	bcs.n	8040578 <__udivmoddi4+0x2b8>
 8040518:	429e      	cmp	r6, r3
 804051a:	d92d      	bls.n	8040578 <__udivmoddi4+0x2b8>
 804051c:	3802      	subs	r0, #2
 804051e:	4463      	add	r3, ip
 8040520:	1b9b      	subs	r3, r3, r6
 8040522:	b289      	uxth	r1, r1
 8040524:	fbb3 f6f7 	udiv	r6, r3, r7
 8040528:	fb07 3316 	mls	r3, r7, r6, r3
 804052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040530:	fb06 f30e 	mul.w	r3, r6, lr
 8040534:	428b      	cmp	r3, r1
 8040536:	d908      	bls.n	804054a <__udivmoddi4+0x28a>
 8040538:	eb1c 0101 	adds.w	r1, ip, r1
 804053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8040540:	d216      	bcs.n	8040570 <__udivmoddi4+0x2b0>
 8040542:	428b      	cmp	r3, r1
 8040544:	d914      	bls.n	8040570 <__udivmoddi4+0x2b0>
 8040546:	3e02      	subs	r6, #2
 8040548:	4461      	add	r1, ip
 804054a:	1ac9      	subs	r1, r1, r3
 804054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040550:	e738      	b.n	80403c4 <__udivmoddi4+0x104>
 8040552:	462e      	mov	r6, r5
 8040554:	4628      	mov	r0, r5
 8040556:	e705      	b.n	8040364 <__udivmoddi4+0xa4>
 8040558:	4606      	mov	r6, r0
 804055a:	e6e3      	b.n	8040324 <__udivmoddi4+0x64>
 804055c:	4618      	mov	r0, r3
 804055e:	e6f8      	b.n	8040352 <__udivmoddi4+0x92>
 8040560:	454b      	cmp	r3, r9
 8040562:	d2a9      	bcs.n	80404b8 <__udivmoddi4+0x1f8>
 8040564:	ebb9 0802 	subs.w	r8, r9, r2
 8040568:	eb64 0e0c 	sbc.w	lr, r4, ip
 804056c:	3801      	subs	r0, #1
 804056e:	e7a3      	b.n	80404b8 <__udivmoddi4+0x1f8>
 8040570:	4646      	mov	r6, r8
 8040572:	e7ea      	b.n	804054a <__udivmoddi4+0x28a>
 8040574:	4620      	mov	r0, r4
 8040576:	e794      	b.n	80404a2 <__udivmoddi4+0x1e2>
 8040578:	4640      	mov	r0, r8
 804057a:	e7d1      	b.n	8040520 <__udivmoddi4+0x260>
 804057c:	46d0      	mov	r8, sl
 804057e:	e77b      	b.n	8040478 <__udivmoddi4+0x1b8>
 8040580:	3b02      	subs	r3, #2
 8040582:	4461      	add	r1, ip
 8040584:	e732      	b.n	80403ec <__udivmoddi4+0x12c>
 8040586:	4630      	mov	r0, r6
 8040588:	e709      	b.n	804039e <__udivmoddi4+0xde>
 804058a:	4464      	add	r4, ip
 804058c:	3802      	subs	r0, #2
 804058e:	e742      	b.n	8040416 <__udivmoddi4+0x156>

08040590 <__aeabi_idiv0>:
 8040590:	4770      	bx	lr
 8040592:	bf00      	nop

08040594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040594:	b580      	push	{r7, lr}
 8040596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040598:	f002 fbc6 	bl	8042d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 804059c:	f000 f8d0 	bl	8040740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80405a0:	f000 fb40 	bl	8040c24 <MX_GPIO_Init>
  MX_CRC_Init();
 80405a4:	f000 f938 	bl	8040818 <MX_CRC_Init>
  MX_DMA2D_Init();
 80405a8:	f000 f94a 	bl	8040840 <MX_DMA2D_Init>
  MX_FMC_Init();
 80405ac:	f000 faea 	bl	8040b84 <MX_FMC_Init>
  MX_I2C3_Init();
 80405b0:	f000 f978 	bl	80408a4 <MX_I2C3_Init>
  MX_LTDC_Init();
 80405b4:	f000 f9b6 	bl	8040924 <MX_LTDC_Init>
  MX_SPI5_Init();
 80405b8:	f000 fa34 	bl	8040a24 <MX_SPI5_Init>
  MX_TIM1_Init();
 80405bc:	f000 fa68 	bl	8040a90 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80405c0:	f000 fab6 	bl	8040b30 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80405c4:	f00b fd5e 	bl	804c084 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */


  sprintf(buffch,"Starting Application (%d.%d)", BL_Version[0], BL_Version[1]);
 80405c8:	2300      	movs	r3, #0
 80405ca:	461a      	mov	r2, r3
 80405cc:	2301      	movs	r3, #1
 80405ce:	4950      	ldr	r1, [pc, #320]	; (8040710 <main+0x17c>)
 80405d0:	4850      	ldr	r0, [pc, #320]	; (8040714 <main+0x180>)
 80405d2:	f00c fa25 	bl	804ca20 <siprintf>
  printf("Starting Application (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80405d6:	2300      	movs	r3, #0
 80405d8:	2201      	movs	r2, #1
 80405da:	4619      	mov	r1, r3
 80405dc:	484e      	ldr	r0, [pc, #312]	; (8040718 <main+0x184>)
 80405de:	f00c f981 	bl	804c8e4 <iprintf>


  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 80405e2:	f001 fd1b 	bl	804201c <BSP_LCD_Init>

  /* Layer2 Init */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80405e6:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80405ea:	2001      	movs	r0, #1
 80405ec:	f001 fd98 	bl	8042120 <BSP_LCD_LayerDefaultInit>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80405f0:	2001      	movs	r0, #1
 80405f2:	f001 fdf9 	bl	80421e8 <BSP_LCD_SelectLayer>
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80405f6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80405fa:	f001 fea3 	bl	8042344 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_BLACK);
 80405fe:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8040602:	2001      	movs	r0, #1
 8040604:	f001 fe3e 	bl	8042284 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8040608:	2100      	movs	r1, #0
 804060a:	2001      	movs	r0, #1
 804060c:	f001 fdfc 	bl	8042208 <BSP_LCD_SetLayerVisible>

  /* Layer1 Init */
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8040610:	4942      	ldr	r1, [pc, #264]	; (804071c <main+0x188>)
 8040612:	2000      	movs	r0, #0
 8040614:	f001 fd84 	bl	8042120 <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 8040618:	2000      	movs	r0, #0
 804061a:	f001 fde5 	bl	80421e8 <BSP_LCD_SelectLayer>

  /* Enable The LCD */
  BSP_LCD_DisplayOn();
 804061e:	f001 ffbb 	bl	8042598 <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8040622:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8040626:	f001 fe8d 	bl	8042344 <BSP_LCD_Clear>


  /* Set Touchscreen Demo description */

  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 804062a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 804062e:	f001 fe55 	bl	80422dc <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8040632:	483b      	ldr	r0, [pc, #236]	; (8040720 <main+0x18c>)
 8040634:	f001 fe3a 	bl	80422ac <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 8040638:	483a      	ldr	r0, [pc, #232]	; (8040724 <main+0x190>)
 804063a:	f001 fe69 	bl	8042310 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)buffch, CENTER_MODE);
 804063e:	2301      	movs	r3, #1
 8040640:	4a34      	ldr	r2, [pc, #208]	; (8040714 <main+0x180>)
 8040642:	2100      	movs	r1, #0
 8040644:	2000      	movs	r0, #0
 8040646:	f001 fee9 	bl	804241c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 804064a:	f04f 30ff 	mov.w	r0, #4294967295
 804064e:	f001 fe2d 	bl	80422ac <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"MUST'V BEEN THE", CENTER_MODE);
 8040652:	f001 fd59 	bl	8042108 <BSP_LCD_GetYSize>
 8040656:	4603      	mov	r3, r0
 8040658:	085b      	lsrs	r3, r3, #1
 804065a:	b29b      	uxth	r3, r3
 804065c:	3b1b      	subs	r3, #27
 804065e:	b299      	uxth	r1, r3
 8040660:	2301      	movs	r3, #1
 8040662:	4a31      	ldr	r2, [pc, #196]	; (8040728 <main+0x194>)
 8040664:	2000      	movs	r0, #0
 8040666:	f001 fed9 	bl	804241c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"DEADLY", CENTER_MODE);
 804066a:	f001 fd4d 	bl	8042108 <BSP_LCD_GetYSize>
 804066e:	4603      	mov	r3, r0
 8040670:	085b      	lsrs	r3, r3, #1
 8040672:	b29b      	uxth	r3, r3
 8040674:	3b0c      	subs	r3, #12
 8040676:	b299      	uxth	r1, r3
 8040678:	2301      	movs	r3, #1
 804067a:	4a2c      	ldr	r2, [pc, #176]	; (804072c <main+0x198>)
 804067c:	2000      	movs	r0, #0
 804067e:	f001 fecd 	bl	804241c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"KISS", CENTER_MODE);
 8040682:	f001 fd41 	bl	8042108 <BSP_LCD_GetYSize>
 8040686:	4603      	mov	r3, r0
 8040688:	085b      	lsrs	r3, r3, #1
 804068a:	b29b      	uxth	r3, r3
 804068c:	3303      	adds	r3, #3
 804068e:	b299      	uxth	r1, r3
 8040690:	2301      	movs	r3, #1
 8040692:	4a27      	ldr	r2, [pc, #156]	; (8040730 <main+0x19c>)
 8040694:	2000      	movs	r0, #0
 8040696:	f001 fec1 	bl	804241c <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 804069a:	f00b fd19 	bl	804c0d0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 804069e:	2201      	movs	r2, #1
 80406a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406a4:	4823      	ldr	r0, [pc, #140]	; (8040734 <main+0x1a0>)
 80406a6:	f003 fcb5 	bl	8044014 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80406aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80406ae:	f002 fb7d 	bl	8042dac <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80406b2:	2200      	movs	r2, #0
 80406b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406b8:	481e      	ldr	r0, [pc, #120]	; (8040734 <main+0x1a0>)
 80406ba:	f003 fcab 	bl	8044014 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80406be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80406c2:	f002 fb73 	bl	8042dac <HAL_Delay>
    if (ota_update_request){
 80406c6:	4b1c      	ldr	r3, [pc, #112]	; (8040738 <main+0x1a4>)
 80406c8:	781b      	ldrb	r3, [r3, #0]
 80406ca:	2b00      	cmp	r3, #0
 80406cc:	d0e5      	beq.n	804069a <main+0x106>
    	printf("OTA Update Requested\r\n");
 80406ce:	481b      	ldr	r0, [pc, #108]	; (804073c <main+0x1a8>)
 80406d0:	f00c f98e 	bl	804c9f0 <puts>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80406d4:	2201      	movs	r2, #1
 80406d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406da:	4816      	ldr	r0, [pc, #88]	; (8040734 <main+0x1a0>)
 80406dc:	f003 fc9a 	bl	8044014 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80406e0:	2201      	movs	r2, #1
 80406e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80406e6:	4813      	ldr	r0, [pc, #76]	; (8040734 <main+0x1a0>)
 80406e8:	f003 fc94 	bl	8044014 <HAL_GPIO_WritePin>
    	go_to_ota_app();
 80406ec:	f000 fbe8 	bl	8040ec0 <go_to_ota_app>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80406f0:	2200      	movs	r2, #0
 80406f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406f6:	480f      	ldr	r0, [pc, #60]	; (8040734 <main+0x1a0>)
 80406f8:	f003 fc8c 	bl	8044014 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80406fc:	2200      	movs	r2, #0
 80406fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8040702:	480c      	ldr	r0, [pc, #48]	; (8040734 <main+0x1a0>)
 8040704:	f003 fc86 	bl	8044014 <HAL_GPIO_WritePin>
    	ota_update_request = false;
 8040708:	4b0b      	ldr	r3, [pc, #44]	; (8040738 <main+0x1a4>)
 804070a:	2200      	movs	r2, #0
 804070c:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 804070e:	e7c4      	b.n	804069a <main+0x106>
 8040710:	0804dafc 	.word	0x0804dafc
 8040714:	20000358 	.word	0x20000358
 8040718:	0804db1c 	.word	0x0804db1c
 804071c:	d0130000 	.word	0xd0130000
 8040720:	ffff0000 	.word	0xffff0000
 8040724:	20000048 	.word	0x20000048
 8040728:	0804db3c 	.word	0x0804db3c
 804072c:	0804db4c 	.word	0x0804db4c
 8040730:	0804db54 	.word	0x0804db54
 8040734:	40021800 	.word	0x40021800
 8040738:	200003bc 	.word	0x200003bc
 804073c:	0804db5c 	.word	0x0804db5c

08040740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040740:	b580      	push	{r7, lr}
 8040742:	b094      	sub	sp, #80	; 0x50
 8040744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040746:	f107 0320 	add.w	r3, r7, #32
 804074a:	2230      	movs	r2, #48	; 0x30
 804074c:	2100      	movs	r1, #0
 804074e:	4618      	mov	r0, r3
 8040750:	f00b ffe0 	bl	804c714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040754:	f107 030c 	add.w	r3, r7, #12
 8040758:	2200      	movs	r2, #0
 804075a:	601a      	str	r2, [r3, #0]
 804075c:	605a      	str	r2, [r3, #4]
 804075e:	609a      	str	r2, [r3, #8]
 8040760:	60da      	str	r2, [r3, #12]
 8040762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8040764:	2300      	movs	r3, #0
 8040766:	60bb      	str	r3, [r7, #8]
 8040768:	4b29      	ldr	r3, [pc, #164]	; (8040810 <SystemClock_Config+0xd0>)
 804076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804076c:	4a28      	ldr	r2, [pc, #160]	; (8040810 <SystemClock_Config+0xd0>)
 804076e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040772:	6413      	str	r3, [r2, #64]	; 0x40
 8040774:	4b26      	ldr	r3, [pc, #152]	; (8040810 <SystemClock_Config+0xd0>)
 8040776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804077c:	60bb      	str	r3, [r7, #8]
 804077e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8040780:	2300      	movs	r3, #0
 8040782:	607b      	str	r3, [r7, #4]
 8040784:	4b23      	ldr	r3, [pc, #140]	; (8040814 <SystemClock_Config+0xd4>)
 8040786:	681b      	ldr	r3, [r3, #0]
 8040788:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 804078c:	4a21      	ldr	r2, [pc, #132]	; (8040814 <SystemClock_Config+0xd4>)
 804078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040792:	6013      	str	r3, [r2, #0]
 8040794:	4b1f      	ldr	r3, [pc, #124]	; (8040814 <SystemClock_Config+0xd4>)
 8040796:	681b      	ldr	r3, [r3, #0]
 8040798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 804079c:	607b      	str	r3, [r7, #4]
 804079e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80407a0:	2301      	movs	r3, #1
 80407a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80407a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80407a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80407aa:	2302      	movs	r3, #2
 80407ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80407ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80407b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80407b4:	2310      	movs	r3, #16
 80407b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80407b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80407bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80407be:	2302      	movs	r3, #2
 80407c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80407c2:	2307      	movs	r3, #7
 80407c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80407c6:	f107 0320 	add.w	r3, r7, #32
 80407ca:	4618      	mov	r0, r3
 80407cc:	f005 fe2e 	bl	804642c <HAL_RCC_OscConfig>
 80407d0:	4603      	mov	r3, r0
 80407d2:	2b00      	cmp	r3, #0
 80407d4:	d001      	beq.n	80407da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80407d6:	f000 fb6d 	bl	8040eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80407da:	230f      	movs	r3, #15
 80407dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80407de:	2302      	movs	r3, #2
 80407e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80407e2:	2300      	movs	r3, #0
 80407e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80407e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80407ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80407ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80407f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80407f2:	f107 030c 	add.w	r3, r7, #12
 80407f6:	2102      	movs	r1, #2
 80407f8:	4618      	mov	r0, r3
 80407fa:	f006 f88f 	bl	804691c <HAL_RCC_ClockConfig>
 80407fe:	4603      	mov	r3, r0
 8040800:	2b00      	cmp	r3, #0
 8040802:	d001      	beq.n	8040808 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8040804:	f000 fb56 	bl	8040eb4 <Error_Handler>
  }
}
 8040808:	bf00      	nop
 804080a:	3750      	adds	r7, #80	; 0x50
 804080c:	46bd      	mov	sp, r7
 804080e:	bd80      	pop	{r7, pc}
 8040810:	40023800 	.word	0x40023800
 8040814:	40007000 	.word	0x40007000

08040818 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8040818:	b580      	push	{r7, lr}
 804081a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 804081c:	4b06      	ldr	r3, [pc, #24]	; (8040838 <MX_CRC_Init+0x20>)
 804081e:	4a07      	ldr	r2, [pc, #28]	; (804083c <MX_CRC_Init+0x24>)
 8040820:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8040822:	4805      	ldr	r0, [pc, #20]	; (8040838 <MX_CRC_Init+0x20>)
 8040824:	f002 fbc8 	bl	8042fb8 <HAL_CRC_Init>
 8040828:	4603      	mov	r3, r0
 804082a:	2b00      	cmp	r3, #0
 804082c:	d001      	beq.n	8040832 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 804082e:	f000 fb41 	bl	8040eb4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8040832:	bf00      	nop
 8040834:	bd80      	pop	{r7, pc}
 8040836:	bf00      	nop
 8040838:	200000fc 	.word	0x200000fc
 804083c:	40023000 	.word	0x40023000

08040840 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8040840:	b580      	push	{r7, lr}
 8040842:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8040844:	4b15      	ldr	r3, [pc, #84]	; (804089c <MX_DMA2D_Init+0x5c>)
 8040846:	4a16      	ldr	r2, [pc, #88]	; (80408a0 <MX_DMA2D_Init+0x60>)
 8040848:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 804084a:	4b14      	ldr	r3, [pc, #80]	; (804089c <MX_DMA2D_Init+0x5c>)
 804084c:	2200      	movs	r2, #0
 804084e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8040850:	4b12      	ldr	r3, [pc, #72]	; (804089c <MX_DMA2D_Init+0x5c>)
 8040852:	2200      	movs	r2, #0
 8040854:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8040856:	4b11      	ldr	r3, [pc, #68]	; (804089c <MX_DMA2D_Init+0x5c>)
 8040858:	2200      	movs	r2, #0
 804085a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 804085c:	4b0f      	ldr	r3, [pc, #60]	; (804089c <MX_DMA2D_Init+0x5c>)
 804085e:	2200      	movs	r2, #0
 8040860:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8040862:	4b0e      	ldr	r3, [pc, #56]	; (804089c <MX_DMA2D_Init+0x5c>)
 8040864:	2200      	movs	r2, #0
 8040866:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8040868:	4b0c      	ldr	r3, [pc, #48]	; (804089c <MX_DMA2D_Init+0x5c>)
 804086a:	2200      	movs	r2, #0
 804086c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 804086e:	4b0b      	ldr	r3, [pc, #44]	; (804089c <MX_DMA2D_Init+0x5c>)
 8040870:	2200      	movs	r2, #0
 8040872:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8040874:	4809      	ldr	r0, [pc, #36]	; (804089c <MX_DMA2D_Init+0x5c>)
 8040876:	f002 fd79 	bl	804336c <HAL_DMA2D_Init>
 804087a:	4603      	mov	r3, r0
 804087c:	2b00      	cmp	r3, #0
 804087e:	d001      	beq.n	8040884 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8040880:	f000 fb18 	bl	8040eb4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8040884:	2101      	movs	r1, #1
 8040886:	4805      	ldr	r0, [pc, #20]	; (804089c <MX_DMA2D_Init+0x5c>)
 8040888:	f002 ffde 	bl	8043848 <HAL_DMA2D_ConfigLayer>
 804088c:	4603      	mov	r3, r0
 804088e:	2b00      	cmp	r3, #0
 8040890:	d001      	beq.n	8040896 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8040892:	f000 fb0f 	bl	8040eb4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8040896:	bf00      	nop
 8040898:	bd80      	pop	{r7, pc}
 804089a:	bf00      	nop
 804089c:	20000104 	.word	0x20000104
 80408a0:	4002b000 	.word	0x4002b000

080408a4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80408a4:	b580      	push	{r7, lr}
 80408a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80408a8:	4b1b      	ldr	r3, [pc, #108]	; (8040918 <MX_I2C3_Init+0x74>)
 80408aa:	4a1c      	ldr	r2, [pc, #112]	; (804091c <MX_I2C3_Init+0x78>)
 80408ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80408ae:	4b1a      	ldr	r3, [pc, #104]	; (8040918 <MX_I2C3_Init+0x74>)
 80408b0:	4a1b      	ldr	r2, [pc, #108]	; (8040920 <MX_I2C3_Init+0x7c>)
 80408b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80408b4:	4b18      	ldr	r3, [pc, #96]	; (8040918 <MX_I2C3_Init+0x74>)
 80408b6:	2200      	movs	r2, #0
 80408b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80408ba:	4b17      	ldr	r3, [pc, #92]	; (8040918 <MX_I2C3_Init+0x74>)
 80408bc:	2200      	movs	r2, #0
 80408be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80408c0:	4b15      	ldr	r3, [pc, #84]	; (8040918 <MX_I2C3_Init+0x74>)
 80408c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80408c6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80408c8:	4b13      	ldr	r3, [pc, #76]	; (8040918 <MX_I2C3_Init+0x74>)
 80408ca:	2200      	movs	r2, #0
 80408cc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80408ce:	4b12      	ldr	r3, [pc, #72]	; (8040918 <MX_I2C3_Init+0x74>)
 80408d0:	2200      	movs	r2, #0
 80408d2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80408d4:	4b10      	ldr	r3, [pc, #64]	; (8040918 <MX_I2C3_Init+0x74>)
 80408d6:	2200      	movs	r2, #0
 80408d8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80408da:	4b0f      	ldr	r3, [pc, #60]	; (8040918 <MX_I2C3_Init+0x74>)
 80408dc:	2200      	movs	r2, #0
 80408de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80408e0:	480d      	ldr	r0, [pc, #52]	; (8040918 <MX_I2C3_Init+0x74>)
 80408e2:	f004 ffd3 	bl	804588c <HAL_I2C_Init>
 80408e6:	4603      	mov	r3, r0
 80408e8:	2b00      	cmp	r3, #0
 80408ea:	d001      	beq.n	80408f0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80408ec:	f000 fae2 	bl	8040eb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80408f0:	2100      	movs	r1, #0
 80408f2:	4809      	ldr	r0, [pc, #36]	; (8040918 <MX_I2C3_Init+0x74>)
 80408f4:	f005 f90e 	bl	8045b14 <HAL_I2CEx_ConfigAnalogFilter>
 80408f8:	4603      	mov	r3, r0
 80408fa:	2b00      	cmp	r3, #0
 80408fc:	d001      	beq.n	8040902 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80408fe:	f000 fad9 	bl	8040eb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8040902:	2100      	movs	r1, #0
 8040904:	4804      	ldr	r0, [pc, #16]	; (8040918 <MX_I2C3_Init+0x74>)
 8040906:	f005 f941 	bl	8045b8c <HAL_I2CEx_ConfigDigitalFilter>
 804090a:	4603      	mov	r3, r0
 804090c:	2b00      	cmp	r3, #0
 804090e:	d001      	beq.n	8040914 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8040910:	f000 fad0 	bl	8040eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8040914:	bf00      	nop
 8040916:	bd80      	pop	{r7, pc}
 8040918:	20000144 	.word	0x20000144
 804091c:	40005c00 	.word	0x40005c00
 8040920:	000186a0 	.word	0x000186a0

08040924 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8040924:	b580      	push	{r7, lr}
 8040926:	b08e      	sub	sp, #56	; 0x38
 8040928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 804092a:	1d3b      	adds	r3, r7, #4
 804092c:	2234      	movs	r2, #52	; 0x34
 804092e:	2100      	movs	r1, #0
 8040930:	4618      	mov	r0, r3
 8040932:	f00b feef 	bl	804c714 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8040936:	4b39      	ldr	r3, [pc, #228]	; (8040a1c <MX_LTDC_Init+0xf8>)
 8040938:	4a39      	ldr	r2, [pc, #228]	; (8040a20 <MX_LTDC_Init+0xfc>)
 804093a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 804093c:	4b37      	ldr	r3, [pc, #220]	; (8040a1c <MX_LTDC_Init+0xf8>)
 804093e:	2200      	movs	r2, #0
 8040940:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8040942:	4b36      	ldr	r3, [pc, #216]	; (8040a1c <MX_LTDC_Init+0xf8>)
 8040944:	2200      	movs	r2, #0
 8040946:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8040948:	4b34      	ldr	r3, [pc, #208]	; (8040a1c <MX_LTDC_Init+0xf8>)
 804094a:	2200      	movs	r2, #0
 804094c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 804094e:	4b33      	ldr	r3, [pc, #204]	; (8040a1c <MX_LTDC_Init+0xf8>)
 8040950:	2200      	movs	r2, #0
 8040952:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8040954:	4b31      	ldr	r3, [pc, #196]	; (8040a1c <MX_LTDC_Init+0xf8>)
 8040956:	2209      	movs	r2, #9
 8040958:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 804095a:	4b30      	ldr	r3, [pc, #192]	; (8040a1c <MX_LTDC_Init+0xf8>)
 804095c:	2201      	movs	r2, #1
 804095e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8040960:	4b2e      	ldr	r3, [pc, #184]	; (8040a1c <MX_LTDC_Init+0xf8>)
 8040962:	221d      	movs	r2, #29
 8040964:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8040966:	4b2d      	ldr	r3, [pc, #180]	; (8040a1c <MX_LTDC_Init+0xf8>)
 8040968:	2203      	movs	r2, #3
 804096a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 804096c:	4b2b      	ldr	r3, [pc, #172]	; (8040a1c <MX_LTDC_Init+0xf8>)
 804096e:	f240 120d 	movw	r2, #269	; 0x10d
 8040972:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8040974:	4b29      	ldr	r3, [pc, #164]	; (8040a1c <MX_LTDC_Init+0xf8>)
 8040976:	f240 1243 	movw	r2, #323	; 0x143
 804097a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 804097c:	4b27      	ldr	r3, [pc, #156]	; (8040a1c <MX_LTDC_Init+0xf8>)
 804097e:	f240 1217 	movw	r2, #279	; 0x117
 8040982:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8040984:	4b25      	ldr	r3, [pc, #148]	; (8040a1c <MX_LTDC_Init+0xf8>)
 8040986:	f240 1247 	movw	r2, #327	; 0x147
 804098a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 804098c:	4b23      	ldr	r3, [pc, #140]	; (8040a1c <MX_LTDC_Init+0xf8>)
 804098e:	2200      	movs	r2, #0
 8040990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8040994:	4b21      	ldr	r3, [pc, #132]	; (8040a1c <MX_LTDC_Init+0xf8>)
 8040996:	2200      	movs	r2, #0
 8040998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 804099c:	4b1f      	ldr	r3, [pc, #124]	; (8040a1c <MX_LTDC_Init+0xf8>)
 804099e:	2200      	movs	r2, #0
 80409a0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80409a4:	481d      	ldr	r0, [pc, #116]	; (8040a1c <MX_LTDC_Init+0xf8>)
 80409a6:	f005 f931 	bl	8045c0c <HAL_LTDC_Init>
 80409aa:	4603      	mov	r3, r0
 80409ac:	2b00      	cmp	r3, #0
 80409ae:	d001      	beq.n	80409b4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80409b0:	f000 fa80 	bl	8040eb4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80409b4:	2300      	movs	r3, #0
 80409b6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80409b8:	23f0      	movs	r3, #240	; 0xf0
 80409ba:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80409bc:	2300      	movs	r3, #0
 80409be:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80409c0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80409c4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80409c6:	2302      	movs	r3, #2
 80409c8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80409ca:	23ff      	movs	r3, #255	; 0xff
 80409cc:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80409ce:	2300      	movs	r3, #0
 80409d0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80409d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80409d6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80409d8:	2307      	movs	r3, #7
 80409da:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80409dc:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80409e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80409e2:	23f0      	movs	r3, #240	; 0xf0
 80409e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80409e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80409ea:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80409ec:	2300      	movs	r3, #0
 80409ee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80409f2:	2300      	movs	r3, #0
 80409f4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80409f8:	2300      	movs	r3, #0
 80409fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80409fe:	1d3b      	adds	r3, r7, #4
 8040a00:	2200      	movs	r2, #0
 8040a02:	4619      	mov	r1, r3
 8040a04:	4805      	ldr	r0, [pc, #20]	; (8040a1c <MX_LTDC_Init+0xf8>)
 8040a06:	f005 fa93 	bl	8045f30 <HAL_LTDC_ConfigLayer>
 8040a0a:	4603      	mov	r3, r0
 8040a0c:	2b00      	cmp	r3, #0
 8040a0e:	d001      	beq.n	8040a14 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8040a10:	f000 fa50 	bl	8040eb4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8040a14:	bf00      	nop
 8040a16:	3738      	adds	r7, #56	; 0x38
 8040a18:	46bd      	mov	sp, r7
 8040a1a:	bd80      	pop	{r7, pc}
 8040a1c:	20000198 	.word	0x20000198
 8040a20:	40016800 	.word	0x40016800

08040a24 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8040a24:	b580      	push	{r7, lr}
 8040a26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8040a28:	4b17      	ldr	r3, [pc, #92]	; (8040a88 <MX_SPI5_Init+0x64>)
 8040a2a:	4a18      	ldr	r2, [pc, #96]	; (8040a8c <MX_SPI5_Init+0x68>)
 8040a2c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8040a2e:	4b16      	ldr	r3, [pc, #88]	; (8040a88 <MX_SPI5_Init+0x64>)
 8040a30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8040a34:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8040a36:	4b14      	ldr	r3, [pc, #80]	; (8040a88 <MX_SPI5_Init+0x64>)
 8040a38:	2200      	movs	r2, #0
 8040a3a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8040a3c:	4b12      	ldr	r3, [pc, #72]	; (8040a88 <MX_SPI5_Init+0x64>)
 8040a3e:	2200      	movs	r2, #0
 8040a40:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8040a42:	4b11      	ldr	r3, [pc, #68]	; (8040a88 <MX_SPI5_Init+0x64>)
 8040a44:	2200      	movs	r2, #0
 8040a46:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8040a48:	4b0f      	ldr	r3, [pc, #60]	; (8040a88 <MX_SPI5_Init+0x64>)
 8040a4a:	2200      	movs	r2, #0
 8040a4c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8040a4e:	4b0e      	ldr	r3, [pc, #56]	; (8040a88 <MX_SPI5_Init+0x64>)
 8040a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8040a54:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8040a56:	4b0c      	ldr	r3, [pc, #48]	; (8040a88 <MX_SPI5_Init+0x64>)
 8040a58:	2218      	movs	r2, #24
 8040a5a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8040a5c:	4b0a      	ldr	r3, [pc, #40]	; (8040a88 <MX_SPI5_Init+0x64>)
 8040a5e:	2200      	movs	r2, #0
 8040a60:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8040a62:	4b09      	ldr	r3, [pc, #36]	; (8040a88 <MX_SPI5_Init+0x64>)
 8040a64:	2200      	movs	r2, #0
 8040a66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8040a68:	4b07      	ldr	r3, [pc, #28]	; (8040a88 <MX_SPI5_Init+0x64>)
 8040a6a:	2200      	movs	r2, #0
 8040a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8040a6e:	4b06      	ldr	r3, [pc, #24]	; (8040a88 <MX_SPI5_Init+0x64>)
 8040a70:	220a      	movs	r2, #10
 8040a72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8040a74:	4804      	ldr	r0, [pc, #16]	; (8040a88 <MX_SPI5_Init+0x64>)
 8040a76:	f006 fbf4 	bl	8047262 <HAL_SPI_Init>
 8040a7a:	4603      	mov	r3, r0
 8040a7c:	2b00      	cmp	r3, #0
 8040a7e:	d001      	beq.n	8040a84 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8040a80:	f000 fa18 	bl	8040eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8040a84:	bf00      	nop
 8040a86:	bd80      	pop	{r7, pc}
 8040a88:	20000240 	.word	0x20000240
 8040a8c:	40015000 	.word	0x40015000

08040a90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8040a90:	b580      	push	{r7, lr}
 8040a92:	b086      	sub	sp, #24
 8040a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8040a96:	f107 0308 	add.w	r3, r7, #8
 8040a9a:	2200      	movs	r2, #0
 8040a9c:	601a      	str	r2, [r3, #0]
 8040a9e:	605a      	str	r2, [r3, #4]
 8040aa0:	609a      	str	r2, [r3, #8]
 8040aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8040aa4:	463b      	mov	r3, r7
 8040aa6:	2200      	movs	r2, #0
 8040aa8:	601a      	str	r2, [r3, #0]
 8040aaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8040aac:	4b1e      	ldr	r3, [pc, #120]	; (8040b28 <MX_TIM1_Init+0x98>)
 8040aae:	4a1f      	ldr	r2, [pc, #124]	; (8040b2c <MX_TIM1_Init+0x9c>)
 8040ab0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8040ab2:	4b1d      	ldr	r3, [pc, #116]	; (8040b28 <MX_TIM1_Init+0x98>)
 8040ab4:	2200      	movs	r2, #0
 8040ab6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8040ab8:	4b1b      	ldr	r3, [pc, #108]	; (8040b28 <MX_TIM1_Init+0x98>)
 8040aba:	2200      	movs	r2, #0
 8040abc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8040abe:	4b1a      	ldr	r3, [pc, #104]	; (8040b28 <MX_TIM1_Init+0x98>)
 8040ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8040ac4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8040ac6:	4b18      	ldr	r3, [pc, #96]	; (8040b28 <MX_TIM1_Init+0x98>)
 8040ac8:	2200      	movs	r2, #0
 8040aca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8040acc:	4b16      	ldr	r3, [pc, #88]	; (8040b28 <MX_TIM1_Init+0x98>)
 8040ace:	2200      	movs	r2, #0
 8040ad0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8040ad2:	4b15      	ldr	r3, [pc, #84]	; (8040b28 <MX_TIM1_Init+0x98>)
 8040ad4:	2200      	movs	r2, #0
 8040ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8040ad8:	4813      	ldr	r0, [pc, #76]	; (8040b28 <MX_TIM1_Init+0x98>)
 8040ada:	f007 f9a1 	bl	8047e20 <HAL_TIM_Base_Init>
 8040ade:	4603      	mov	r3, r0
 8040ae0:	2b00      	cmp	r3, #0
 8040ae2:	d001      	beq.n	8040ae8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8040ae4:	f000 f9e6 	bl	8040eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8040ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040aec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8040aee:	f107 0308 	add.w	r3, r7, #8
 8040af2:	4619      	mov	r1, r3
 8040af4:	480c      	ldr	r0, [pc, #48]	; (8040b28 <MX_TIM1_Init+0x98>)
 8040af6:	f007 fb5b 	bl	80481b0 <HAL_TIM_ConfigClockSource>
 8040afa:	4603      	mov	r3, r0
 8040afc:	2b00      	cmp	r3, #0
 8040afe:	d001      	beq.n	8040b04 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8040b00:	f000 f9d8 	bl	8040eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8040b04:	2300      	movs	r3, #0
 8040b06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8040b08:	2300      	movs	r3, #0
 8040b0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8040b0c:	463b      	mov	r3, r7
 8040b0e:	4619      	mov	r1, r3
 8040b10:	4805      	ldr	r0, [pc, #20]	; (8040b28 <MX_TIM1_Init+0x98>)
 8040b12:	f007 fd77 	bl	8048604 <HAL_TIMEx_MasterConfigSynchronization>
 8040b16:	4603      	mov	r3, r0
 8040b18:	2b00      	cmp	r3, #0
 8040b1a:	d001      	beq.n	8040b20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8040b1c:	f000 f9ca 	bl	8040eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8040b20:	bf00      	nop
 8040b22:	3718      	adds	r7, #24
 8040b24:	46bd      	mov	sp, r7
 8040b26:	bd80      	pop	{r7, pc}
 8040b28:	20000298 	.word	0x20000298
 8040b2c:	40010000 	.word	0x40010000

08040b30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040b30:	b580      	push	{r7, lr}
 8040b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040b34:	4b11      	ldr	r3, [pc, #68]	; (8040b7c <MX_USART1_UART_Init+0x4c>)
 8040b36:	4a12      	ldr	r2, [pc, #72]	; (8040b80 <MX_USART1_UART_Init+0x50>)
 8040b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8040b3a:	4b10      	ldr	r3, [pc, #64]	; (8040b7c <MX_USART1_UART_Init+0x4c>)
 8040b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040b42:	4b0e      	ldr	r3, [pc, #56]	; (8040b7c <MX_USART1_UART_Init+0x4c>)
 8040b44:	2200      	movs	r2, #0
 8040b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040b48:	4b0c      	ldr	r3, [pc, #48]	; (8040b7c <MX_USART1_UART_Init+0x4c>)
 8040b4a:	2200      	movs	r2, #0
 8040b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040b4e:	4b0b      	ldr	r3, [pc, #44]	; (8040b7c <MX_USART1_UART_Init+0x4c>)
 8040b50:	2200      	movs	r2, #0
 8040b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040b54:	4b09      	ldr	r3, [pc, #36]	; (8040b7c <MX_USART1_UART_Init+0x4c>)
 8040b56:	220c      	movs	r2, #12
 8040b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040b5a:	4b08      	ldr	r3, [pc, #32]	; (8040b7c <MX_USART1_UART_Init+0x4c>)
 8040b5c:	2200      	movs	r2, #0
 8040b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040b60:	4b06      	ldr	r3, [pc, #24]	; (8040b7c <MX_USART1_UART_Init+0x4c>)
 8040b62:	2200      	movs	r2, #0
 8040b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040b66:	4805      	ldr	r0, [pc, #20]	; (8040b7c <MX_USART1_UART_Init+0x4c>)
 8040b68:	f007 fddc 	bl	8048724 <HAL_UART_Init>
 8040b6c:	4603      	mov	r3, r0
 8040b6e:	2b00      	cmp	r3, #0
 8040b70:	d001      	beq.n	8040b76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8040b72:	f000 f99f 	bl	8040eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040b76:	bf00      	nop
 8040b78:	bd80      	pop	{r7, pc}
 8040b7a:	bf00      	nop
 8040b7c:	200002e0 	.word	0x200002e0
 8040b80:	40011000 	.word	0x40011000

08040b84 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8040b84:	b580      	push	{r7, lr}
 8040b86:	b088      	sub	sp, #32
 8040b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8040b8a:	1d3b      	adds	r3, r7, #4
 8040b8c:	2200      	movs	r2, #0
 8040b8e:	601a      	str	r2, [r3, #0]
 8040b90:	605a      	str	r2, [r3, #4]
 8040b92:	609a      	str	r2, [r3, #8]
 8040b94:	60da      	str	r2, [r3, #12]
 8040b96:	611a      	str	r2, [r3, #16]
 8040b98:	615a      	str	r2, [r3, #20]
 8040b9a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8040b9c:	4b1f      	ldr	r3, [pc, #124]	; (8040c1c <MX_FMC_Init+0x98>)
 8040b9e:	4a20      	ldr	r2, [pc, #128]	; (8040c20 <MX_FMC_Init+0x9c>)
 8040ba0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8040ba2:	4b1e      	ldr	r3, [pc, #120]	; (8040c1c <MX_FMC_Init+0x98>)
 8040ba4:	2201      	movs	r2, #1
 8040ba6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8040ba8:	4b1c      	ldr	r3, [pc, #112]	; (8040c1c <MX_FMC_Init+0x98>)
 8040baa:	2200      	movs	r2, #0
 8040bac:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8040bae:	4b1b      	ldr	r3, [pc, #108]	; (8040c1c <MX_FMC_Init+0x98>)
 8040bb0:	2204      	movs	r2, #4
 8040bb2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8040bb4:	4b19      	ldr	r3, [pc, #100]	; (8040c1c <MX_FMC_Init+0x98>)
 8040bb6:	2210      	movs	r2, #16
 8040bb8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8040bba:	4b18      	ldr	r3, [pc, #96]	; (8040c1c <MX_FMC_Init+0x98>)
 8040bbc:	2240      	movs	r2, #64	; 0x40
 8040bbe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8040bc0:	4b16      	ldr	r3, [pc, #88]	; (8040c1c <MX_FMC_Init+0x98>)
 8040bc2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8040bc6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8040bc8:	4b14      	ldr	r3, [pc, #80]	; (8040c1c <MX_FMC_Init+0x98>)
 8040bca:	2200      	movs	r2, #0
 8040bcc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8040bce:	4b13      	ldr	r3, [pc, #76]	; (8040c1c <MX_FMC_Init+0x98>)
 8040bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8040bd4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8040bd6:	4b11      	ldr	r3, [pc, #68]	; (8040c1c <MX_FMC_Init+0x98>)
 8040bd8:	2200      	movs	r2, #0
 8040bda:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8040bdc:	4b0f      	ldr	r3, [pc, #60]	; (8040c1c <MX_FMC_Init+0x98>)
 8040bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8040be2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8040be4:	2302      	movs	r3, #2
 8040be6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8040be8:	2307      	movs	r3, #7
 8040bea:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8040bec:	2304      	movs	r3, #4
 8040bee:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8040bf0:	2307      	movs	r3, #7
 8040bf2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8040bf4:	2303      	movs	r3, #3
 8040bf6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8040bf8:	2302      	movs	r3, #2
 8040bfa:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8040bfc:	2302      	movs	r3, #2
 8040bfe:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8040c00:	1d3b      	adds	r3, r7, #4
 8040c02:	4619      	mov	r1, r3
 8040c04:	4805      	ldr	r0, [pc, #20]	; (8040c1c <MX_FMC_Init+0x98>)
 8040c06:	f006 fa9b 	bl	8047140 <HAL_SDRAM_Init>
 8040c0a:	4603      	mov	r3, r0
 8040c0c:	2b00      	cmp	r3, #0
 8040c0e:	d001      	beq.n	8040c14 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8040c10:	f000 f950 	bl	8040eb4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8040c14:	bf00      	nop
 8040c16:	3720      	adds	r7, #32
 8040c18:	46bd      	mov	sp, r7
 8040c1a:	bd80      	pop	{r7, pc}
 8040c1c:	20000324 	.word	0x20000324
 8040c20:	a0000140 	.word	0xa0000140

08040c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040c24:	b580      	push	{r7, lr}
 8040c26:	b08e      	sub	sp, #56	; 0x38
 8040c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040c2e:	2200      	movs	r2, #0
 8040c30:	601a      	str	r2, [r3, #0]
 8040c32:	605a      	str	r2, [r3, #4]
 8040c34:	609a      	str	r2, [r3, #8]
 8040c36:	60da      	str	r2, [r3, #12]
 8040c38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040c3a:	2300      	movs	r3, #0
 8040c3c:	623b      	str	r3, [r7, #32]
 8040c3e:	4b85      	ldr	r3, [pc, #532]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c42:	4a84      	ldr	r2, [pc, #528]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040c44:	f043 0304 	orr.w	r3, r3, #4
 8040c48:	6313      	str	r3, [r2, #48]	; 0x30
 8040c4a:	4b82      	ldr	r3, [pc, #520]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c4e:	f003 0304 	and.w	r3, r3, #4
 8040c52:	623b      	str	r3, [r7, #32]
 8040c54:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8040c56:	2300      	movs	r3, #0
 8040c58:	61fb      	str	r3, [r7, #28]
 8040c5a:	4b7e      	ldr	r3, [pc, #504]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c5e:	4a7d      	ldr	r2, [pc, #500]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040c60:	f043 0320 	orr.w	r3, r3, #32
 8040c64:	6313      	str	r3, [r2, #48]	; 0x30
 8040c66:	4b7b      	ldr	r3, [pc, #492]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c6a:	f003 0320 	and.w	r3, r3, #32
 8040c6e:	61fb      	str	r3, [r7, #28]
 8040c70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040c72:	2300      	movs	r3, #0
 8040c74:	61bb      	str	r3, [r7, #24]
 8040c76:	4b77      	ldr	r3, [pc, #476]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c7a:	4a76      	ldr	r2, [pc, #472]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8040c80:	6313      	str	r3, [r2, #48]	; 0x30
 8040c82:	4b74      	ldr	r3, [pc, #464]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8040c8a:	61bb      	str	r3, [r7, #24]
 8040c8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040c8e:	2300      	movs	r3, #0
 8040c90:	617b      	str	r3, [r7, #20]
 8040c92:	4b70      	ldr	r3, [pc, #448]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c96:	4a6f      	ldr	r2, [pc, #444]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040c98:	f043 0301 	orr.w	r3, r3, #1
 8040c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8040c9e:	4b6d      	ldr	r3, [pc, #436]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ca2:	f003 0301 	and.w	r3, r3, #1
 8040ca6:	617b      	str	r3, [r7, #20]
 8040ca8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040caa:	2300      	movs	r3, #0
 8040cac:	613b      	str	r3, [r7, #16]
 8040cae:	4b69      	ldr	r3, [pc, #420]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cb2:	4a68      	ldr	r2, [pc, #416]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040cb4:	f043 0302 	orr.w	r3, r3, #2
 8040cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8040cba:	4b66      	ldr	r3, [pc, #408]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cbe:	f003 0302 	and.w	r3, r3, #2
 8040cc2:	613b      	str	r3, [r7, #16]
 8040cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8040cc6:	2300      	movs	r3, #0
 8040cc8:	60fb      	str	r3, [r7, #12]
 8040cca:	4b62      	ldr	r3, [pc, #392]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cce:	4a61      	ldr	r2, [pc, #388]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8040cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8040cd6:	4b5f      	ldr	r3, [pc, #380]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8040cde:	60fb      	str	r3, [r7, #12]
 8040ce0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8040ce2:	2300      	movs	r3, #0
 8040ce4:	60bb      	str	r3, [r7, #8]
 8040ce6:	4b5b      	ldr	r3, [pc, #364]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cea:	4a5a      	ldr	r2, [pc, #360]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040cec:	f043 0310 	orr.w	r3, r3, #16
 8040cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8040cf2:	4b58      	ldr	r3, [pc, #352]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cf6:	f003 0310 	and.w	r3, r3, #16
 8040cfa:	60bb      	str	r3, [r7, #8]
 8040cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040cfe:	2300      	movs	r3, #0
 8040d00:	607b      	str	r3, [r7, #4]
 8040d02:	4b54      	ldr	r3, [pc, #336]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d06:	4a53      	ldr	r2, [pc, #332]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040d08:	f043 0308 	orr.w	r3, r3, #8
 8040d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8040d0e:	4b51      	ldr	r3, [pc, #324]	; (8040e54 <MX_GPIO_Init+0x230>)
 8040d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d12:	f003 0308 	and.w	r3, r3, #8
 8040d16:	607b      	str	r3, [r7, #4]
 8040d18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8040d1a:	2200      	movs	r2, #0
 8040d1c:	2116      	movs	r1, #22
 8040d1e:	484e      	ldr	r0, [pc, #312]	; (8040e58 <MX_GPIO_Init+0x234>)
 8040d20:	f003 f978 	bl	8044014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8040d24:	2200      	movs	r2, #0
 8040d26:	2180      	movs	r1, #128	; 0x80
 8040d28:	484c      	ldr	r0, [pc, #304]	; (8040e5c <MX_GPIO_Init+0x238>)
 8040d2a:	f003 f973 	bl	8044014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8040d2e:	2200      	movs	r2, #0
 8040d30:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8040d34:	484a      	ldr	r0, [pc, #296]	; (8040e60 <MX_GPIO_Init+0x23c>)
 8040d36:	f003 f96d 	bl	8044014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8040d3a:	2200      	movs	r2, #0
 8040d3c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8040d40:	4848      	ldr	r0, [pc, #288]	; (8040e64 <MX_GPIO_Init+0x240>)
 8040d42:	f003 f967 	bl	8044014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8040d46:	2316      	movs	r3, #22
 8040d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040d4a:	2301      	movs	r3, #1
 8040d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d4e:	2300      	movs	r3, #0
 8040d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040d52:	2300      	movs	r3, #0
 8040d54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8040d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040d5a:	4619      	mov	r1, r3
 8040d5c:	483e      	ldr	r0, [pc, #248]	; (8040e58 <MX_GPIO_Init+0x234>)
 8040d5e:	f002 fea1 	bl	8043aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8040d62:	2301      	movs	r3, #1
 8040d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8040d66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8040d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d6c:	2300      	movs	r3, #0
 8040d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8040d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040d74:	4619      	mov	r1, r3
 8040d76:	4839      	ldr	r0, [pc, #228]	; (8040e5c <MX_GPIO_Init+0x238>)
 8040d78:	f002 fe94 	bl	8043aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8040d7c:	f248 0306 	movw	r3, #32774	; 0x8006
 8040d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8040d82:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8040d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d88:	2300      	movs	r3, #0
 8040d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040d90:	4619      	mov	r1, r3
 8040d92:	4832      	ldr	r0, [pc, #200]	; (8040e5c <MX_GPIO_Init+0x238>)
 8040d94:	f002 fe86 	bl	8043aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8040d98:	2380      	movs	r3, #128	; 0x80
 8040d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040d9c:	2301      	movs	r3, #1
 8040d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040da0:	2300      	movs	r3, #0
 8040da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040da4:	2300      	movs	r3, #0
 8040da6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8040da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040dac:	4619      	mov	r1, r3
 8040dae:	482b      	ldr	r0, [pc, #172]	; (8040e5c <MX_GPIO_Init+0x238>)
 8040db0:	f002 fe78 	bl	8043aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8040db4:	2320      	movs	r3, #32
 8040db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8040db8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8040dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040dbe:	2300      	movs	r3, #0
 8040dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8040dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040dc6:	4619      	mov	r1, r3
 8040dc8:	4823      	ldr	r0, [pc, #140]	; (8040e58 <MX_GPIO_Init+0x234>)
 8040dca:	f002 fe6b 	bl	8043aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8040dce:	2304      	movs	r3, #4
 8040dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040dd2:	2300      	movs	r3, #0
 8040dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040dd6:	2300      	movs	r3, #0
 8040dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8040dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040dde:	4619      	mov	r1, r3
 8040de0:	4821      	ldr	r0, [pc, #132]	; (8040e68 <MX_GPIO_Init+0x244>)
 8040de2:	f002 fe5f 	bl	8043aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8040de6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8040dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040dec:	2300      	movs	r3, #0
 8040dee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040df0:	2300      	movs	r3, #0
 8040df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8040df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040df8:	4619      	mov	r1, r3
 8040dfa:	4819      	ldr	r0, [pc, #100]	; (8040e60 <MX_GPIO_Init+0x23c>)
 8040dfc:	f002 fe52 	bl	8043aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8040e00:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8040e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040e06:	2301      	movs	r3, #1
 8040e08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e0a:	2300      	movs	r3, #0
 8040e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040e0e:	2300      	movs	r3, #0
 8040e10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e16:	4619      	mov	r1, r3
 8040e18:	4811      	ldr	r0, [pc, #68]	; (8040e60 <MX_GPIO_Init+0x23c>)
 8040e1a:	f002 fe43 	bl	8043aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8040e1e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8040e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040e24:	2301      	movs	r3, #1
 8040e26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e28:	2300      	movs	r3, #0
 8040e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040e2c:	2300      	movs	r3, #0
 8040e2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8040e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e34:	4619      	mov	r1, r3
 8040e36:	480b      	ldr	r0, [pc, #44]	; (8040e64 <MX_GPIO_Init+0x240>)
 8040e38:	f002 fe34 	bl	8043aa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8040e3c:	2200      	movs	r2, #0
 8040e3e:	2100      	movs	r1, #0
 8040e40:	2006      	movs	r0, #6
 8040e42:	f002 f88f 	bl	8042f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8040e46:	2006      	movs	r0, #6
 8040e48:	f002 f8a8 	bl	8042f9c <HAL_NVIC_EnableIRQ>

}
 8040e4c:	bf00      	nop
 8040e4e:	3738      	adds	r7, #56	; 0x38
 8040e50:	46bd      	mov	sp, r7
 8040e52:	bd80      	pop	{r7, pc}
 8040e54:	40023800 	.word	0x40023800
 8040e58:	40020800 	.word	0x40020800
 8040e5c:	40020000 	.word	0x40020000
 8040e60:	40020c00 	.word	0x40020c00
 8040e64:	40021800 	.word	0x40021800
 8040e68:	40020400 	.word	0x40020400

08040e6c <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8040e6c:	b580      	push	{r7, lr}
 8040e6e:	b082      	sub	sp, #8
 8040e70:	af00      	add	r7, sp, #0
 8040e72:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8040e74:	1d39      	adds	r1, r7, #4
 8040e76:	f04f 33ff 	mov.w	r3, #4294967295
 8040e7a:	2201      	movs	r2, #1
 8040e7c:	4803      	ldr	r0, [pc, #12]	; (8040e8c <__io_putchar+0x20>)
 8040e7e:	f007 fc9e 	bl	80487be <HAL_UART_Transmit>
	return ch;
 8040e82:	687b      	ldr	r3, [r7, #4]
}
 8040e84:	4618      	mov	r0, r3
 8040e86:	3708      	adds	r7, #8
 8040e88:	46bd      	mov	sp, r7
 8040e8a:	bd80      	pop	{r7, pc}
 8040e8c:	200002e0 	.word	0x200002e0

08040e90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8040e90:	b580      	push	{r7, lr}
 8040e92:	b082      	sub	sp, #8
 8040e94:	af00      	add	r7, sp, #0
 8040e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8040e98:	687b      	ldr	r3, [r7, #4]
 8040e9a:	681b      	ldr	r3, [r3, #0]
 8040e9c:	4a04      	ldr	r2, [pc, #16]	; (8040eb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8040e9e:	4293      	cmp	r3, r2
 8040ea0:	d101      	bne.n	8040ea6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8040ea2:	f001 ff63 	bl	8042d6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8040ea6:	bf00      	nop
 8040ea8:	3708      	adds	r7, #8
 8040eaa:	46bd      	mov	sp, r7
 8040eac:	bd80      	pop	{r7, pc}
 8040eae:	bf00      	nop
 8040eb0:	40001000 	.word	0x40001000

08040eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040eb4:	b480      	push	{r7}
 8040eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040eb8:	b672      	cpsid	i
}
 8040eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040ebc:	e7fe      	b.n	8040ebc <Error_Handler+0x8>
	...

08040ec0 <go_to_ota_app>:
 */

#include "ota_app.h"

void go_to_ota_app()
{
 8040ec0:	b580      	push	{r7, lr}
 8040ec2:	af00      	add	r7, sp, #0
  /*Start the Firmware or Application update */
    printf("Starting Firmware Download!!!\r\n");
 8040ec4:	4804      	ldr	r0, [pc, #16]	; (8040ed8 <go_to_ota_app+0x18>)
 8040ec6:	f00b fd93 	bl	804c9f0 <puts>
//    if( etx_ota_download_and_flash(&huart5) != ETX_OTA_EX_OK )
      /* Error. Don't process. */
//      printf("OTA Update : ERROR!!! HALT!!!\r\n");
//      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
    HAL_Delay(10000);
 8040eca:	f242 7010 	movw	r0, #10000	; 0x2710
 8040ece:	f001 ff6d 	bl	8042dac <HAL_Delay>
//      /* Reset to load the new application */
//      printf("Firmware update is done!!! Rebooting...\r\n");
//      HAL_NVIC_SystemReset();
//    }
//  }
}
 8040ed2:	bf00      	nop
 8040ed4:	bd80      	pop	{r7, pc}
 8040ed6:	bf00      	nop
 8040ed8:	0804db74 	.word	0x0804db74

08040edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040edc:	b480      	push	{r7}
 8040ede:	b083      	sub	sp, #12
 8040ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040ee2:	2300      	movs	r3, #0
 8040ee4:	607b      	str	r3, [r7, #4]
 8040ee6:	4b10      	ldr	r3, [pc, #64]	; (8040f28 <HAL_MspInit+0x4c>)
 8040ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040eea:	4a0f      	ldr	r2, [pc, #60]	; (8040f28 <HAL_MspInit+0x4c>)
 8040eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8040ef2:	4b0d      	ldr	r3, [pc, #52]	; (8040f28 <HAL_MspInit+0x4c>)
 8040ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040efa:	607b      	str	r3, [r7, #4]
 8040efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040efe:	2300      	movs	r3, #0
 8040f00:	603b      	str	r3, [r7, #0]
 8040f02:	4b09      	ldr	r3, [pc, #36]	; (8040f28 <HAL_MspInit+0x4c>)
 8040f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040f06:	4a08      	ldr	r2, [pc, #32]	; (8040f28 <HAL_MspInit+0x4c>)
 8040f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8040f0e:	4b06      	ldr	r3, [pc, #24]	; (8040f28 <HAL_MspInit+0x4c>)
 8040f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040f16:	603b      	str	r3, [r7, #0]
 8040f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040f1a:	bf00      	nop
 8040f1c:	370c      	adds	r7, #12
 8040f1e:	46bd      	mov	sp, r7
 8040f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f24:	4770      	bx	lr
 8040f26:	bf00      	nop
 8040f28:	40023800 	.word	0x40023800

08040f2c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8040f2c:	b480      	push	{r7}
 8040f2e:	b085      	sub	sp, #20
 8040f30:	af00      	add	r7, sp, #0
 8040f32:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8040f34:	687b      	ldr	r3, [r7, #4]
 8040f36:	681b      	ldr	r3, [r3, #0]
 8040f38:	4a0b      	ldr	r2, [pc, #44]	; (8040f68 <HAL_CRC_MspInit+0x3c>)
 8040f3a:	4293      	cmp	r3, r2
 8040f3c:	d10d      	bne.n	8040f5a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8040f3e:	2300      	movs	r3, #0
 8040f40:	60fb      	str	r3, [r7, #12]
 8040f42:	4b0a      	ldr	r3, [pc, #40]	; (8040f6c <HAL_CRC_MspInit+0x40>)
 8040f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f46:	4a09      	ldr	r2, [pc, #36]	; (8040f6c <HAL_CRC_MspInit+0x40>)
 8040f48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8040f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8040f4e:	4b07      	ldr	r3, [pc, #28]	; (8040f6c <HAL_CRC_MspInit+0x40>)
 8040f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8040f56:	60fb      	str	r3, [r7, #12]
 8040f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8040f5a:	bf00      	nop
 8040f5c:	3714      	adds	r7, #20
 8040f5e:	46bd      	mov	sp, r7
 8040f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f64:	4770      	bx	lr
 8040f66:	bf00      	nop
 8040f68:	40023000 	.word	0x40023000
 8040f6c:	40023800 	.word	0x40023800

08040f70 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8040f70:	b580      	push	{r7, lr}
 8040f72:	b084      	sub	sp, #16
 8040f74:	af00      	add	r7, sp, #0
 8040f76:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8040f78:	687b      	ldr	r3, [r7, #4]
 8040f7a:	681b      	ldr	r3, [r3, #0]
 8040f7c:	4a0e      	ldr	r2, [pc, #56]	; (8040fb8 <HAL_DMA2D_MspInit+0x48>)
 8040f7e:	4293      	cmp	r3, r2
 8040f80:	d115      	bne.n	8040fae <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8040f82:	2300      	movs	r3, #0
 8040f84:	60fb      	str	r3, [r7, #12]
 8040f86:	4b0d      	ldr	r3, [pc, #52]	; (8040fbc <HAL_DMA2D_MspInit+0x4c>)
 8040f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f8a:	4a0c      	ldr	r2, [pc, #48]	; (8040fbc <HAL_DMA2D_MspInit+0x4c>)
 8040f8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8040f90:	6313      	str	r3, [r2, #48]	; 0x30
 8040f92:	4b0a      	ldr	r3, [pc, #40]	; (8040fbc <HAL_DMA2D_MspInit+0x4c>)
 8040f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8040f9a:	60fb      	str	r3, [r7, #12]
 8040f9c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8040f9e:	2200      	movs	r2, #0
 8040fa0:	2105      	movs	r1, #5
 8040fa2:	205a      	movs	r0, #90	; 0x5a
 8040fa4:	f001 ffde 	bl	8042f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8040fa8:	205a      	movs	r0, #90	; 0x5a
 8040faa:	f001 fff7 	bl	8042f9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8040fae:	bf00      	nop
 8040fb0:	3710      	adds	r7, #16
 8040fb2:	46bd      	mov	sp, r7
 8040fb4:	bd80      	pop	{r7, pc}
 8040fb6:	bf00      	nop
 8040fb8:	4002b000 	.word	0x4002b000
 8040fbc:	40023800 	.word	0x40023800

08040fc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8040fc0:	b580      	push	{r7, lr}
 8040fc2:	b08a      	sub	sp, #40	; 0x28
 8040fc4:	af00      	add	r7, sp, #0
 8040fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040fc8:	f107 0314 	add.w	r3, r7, #20
 8040fcc:	2200      	movs	r2, #0
 8040fce:	601a      	str	r2, [r3, #0]
 8040fd0:	605a      	str	r2, [r3, #4]
 8040fd2:	609a      	str	r2, [r3, #8]
 8040fd4:	60da      	str	r2, [r3, #12]
 8040fd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8040fd8:	687b      	ldr	r3, [r7, #4]
 8040fda:	681b      	ldr	r3, [r3, #0]
 8040fdc:	4a29      	ldr	r2, [pc, #164]	; (8041084 <HAL_I2C_MspInit+0xc4>)
 8040fde:	4293      	cmp	r3, r2
 8040fe0:	d14b      	bne.n	804107a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8040fe2:	2300      	movs	r3, #0
 8040fe4:	613b      	str	r3, [r7, #16]
 8040fe6:	4b28      	ldr	r3, [pc, #160]	; (8041088 <HAL_I2C_MspInit+0xc8>)
 8040fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040fea:	4a27      	ldr	r2, [pc, #156]	; (8041088 <HAL_I2C_MspInit+0xc8>)
 8040fec:	f043 0304 	orr.w	r3, r3, #4
 8040ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8040ff2:	4b25      	ldr	r3, [pc, #148]	; (8041088 <HAL_I2C_MspInit+0xc8>)
 8040ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ff6:	f003 0304 	and.w	r3, r3, #4
 8040ffa:	613b      	str	r3, [r7, #16]
 8040ffc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040ffe:	2300      	movs	r3, #0
 8041000:	60fb      	str	r3, [r7, #12]
 8041002:	4b21      	ldr	r3, [pc, #132]	; (8041088 <HAL_I2C_MspInit+0xc8>)
 8041004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041006:	4a20      	ldr	r2, [pc, #128]	; (8041088 <HAL_I2C_MspInit+0xc8>)
 8041008:	f043 0301 	orr.w	r3, r3, #1
 804100c:	6313      	str	r3, [r2, #48]	; 0x30
 804100e:	4b1e      	ldr	r3, [pc, #120]	; (8041088 <HAL_I2C_MspInit+0xc8>)
 8041010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041012:	f003 0301 	and.w	r3, r3, #1
 8041016:	60fb      	str	r3, [r7, #12]
 8041018:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 804101a:	f44f 7300 	mov.w	r3, #512	; 0x200
 804101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8041020:	2312      	movs	r3, #18
 8041022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8041024:	2301      	movs	r3, #1
 8041026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041028:	2300      	movs	r3, #0
 804102a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 804102c:	2304      	movs	r3, #4
 804102e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8041030:	f107 0314 	add.w	r3, r7, #20
 8041034:	4619      	mov	r1, r3
 8041036:	4815      	ldr	r0, [pc, #84]	; (804108c <HAL_I2C_MspInit+0xcc>)
 8041038:	f002 fd34 	bl	8043aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 804103c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8041040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8041042:	2312      	movs	r3, #18
 8041044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8041046:	2301      	movs	r3, #1
 8041048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804104a:	2300      	movs	r3, #0
 804104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 804104e:	2304      	movs	r3, #4
 8041050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8041052:	f107 0314 	add.w	r3, r7, #20
 8041056:	4619      	mov	r1, r3
 8041058:	480d      	ldr	r0, [pc, #52]	; (8041090 <HAL_I2C_MspInit+0xd0>)
 804105a:	f002 fd23 	bl	8043aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 804105e:	2300      	movs	r3, #0
 8041060:	60bb      	str	r3, [r7, #8]
 8041062:	4b09      	ldr	r3, [pc, #36]	; (8041088 <HAL_I2C_MspInit+0xc8>)
 8041064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041066:	4a08      	ldr	r2, [pc, #32]	; (8041088 <HAL_I2C_MspInit+0xc8>)
 8041068:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 804106c:	6413      	str	r3, [r2, #64]	; 0x40
 804106e:	4b06      	ldr	r3, [pc, #24]	; (8041088 <HAL_I2C_MspInit+0xc8>)
 8041070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041072:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8041076:	60bb      	str	r3, [r7, #8]
 8041078:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 804107a:	bf00      	nop
 804107c:	3728      	adds	r7, #40	; 0x28
 804107e:	46bd      	mov	sp, r7
 8041080:	bd80      	pop	{r7, pc}
 8041082:	bf00      	nop
 8041084:	40005c00 	.word	0x40005c00
 8041088:	40023800 	.word	0x40023800
 804108c:	40020800 	.word	0x40020800
 8041090:	40020000 	.word	0x40020000

08041094 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8041094:	b580      	push	{r7, lr}
 8041096:	b09a      	sub	sp, #104	; 0x68
 8041098:	af00      	add	r7, sp, #0
 804109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804109c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80410a0:	2200      	movs	r2, #0
 80410a2:	601a      	str	r2, [r3, #0]
 80410a4:	605a      	str	r2, [r3, #4]
 80410a6:	609a      	str	r2, [r3, #8]
 80410a8:	60da      	str	r2, [r3, #12]
 80410aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80410ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80410b0:	2230      	movs	r2, #48	; 0x30
 80410b2:	2100      	movs	r1, #0
 80410b4:	4618      	mov	r0, r3
 80410b6:	f00b fb2d 	bl	804c714 <memset>
  if(hltdc->Instance==LTDC)
 80410ba:	687b      	ldr	r3, [r7, #4]
 80410bc:	681b      	ldr	r3, [r3, #0]
 80410be:	4a85      	ldr	r2, [pc, #532]	; (80412d4 <HAL_LTDC_MspInit+0x240>)
 80410c0:	4293      	cmp	r3, r2
 80410c2:	f040 8102 	bne.w	80412ca <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80410c6:	2308      	movs	r3, #8
 80410c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 80410ca:	2331      	movs	r3, #49	; 0x31
 80410cc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 80410ce:	2302      	movs	r3, #2
 80410d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80410d2:	2300      	movs	r3, #0
 80410d4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80410d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80410da:	4618      	mov	r0, r3
 80410dc:	f005 fe70 	bl	8046dc0 <HAL_RCCEx_PeriphCLKConfig>
 80410e0:	4603      	mov	r3, r0
 80410e2:	2b00      	cmp	r3, #0
 80410e4:	d001      	beq.n	80410ea <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80410e6:	f7ff fee5 	bl	8040eb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80410ea:	2300      	movs	r3, #0
 80410ec:	623b      	str	r3, [r7, #32]
 80410ee:	4b7a      	ldr	r3, [pc, #488]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 80410f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80410f2:	4a79      	ldr	r2, [pc, #484]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 80410f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80410f8:	6453      	str	r3, [r2, #68]	; 0x44
 80410fa:	4b77      	ldr	r3, [pc, #476]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 80410fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80410fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8041102:	623b      	str	r3, [r7, #32]
 8041104:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8041106:	2300      	movs	r3, #0
 8041108:	61fb      	str	r3, [r7, #28]
 804110a:	4b73      	ldr	r3, [pc, #460]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 804110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804110e:	4a72      	ldr	r2, [pc, #456]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 8041110:	f043 0320 	orr.w	r3, r3, #32
 8041114:	6313      	str	r3, [r2, #48]	; 0x30
 8041116:	4b70      	ldr	r3, [pc, #448]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 8041118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804111a:	f003 0320 	and.w	r3, r3, #32
 804111e:	61fb      	str	r3, [r7, #28]
 8041120:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8041122:	2300      	movs	r3, #0
 8041124:	61bb      	str	r3, [r7, #24]
 8041126:	4b6c      	ldr	r3, [pc, #432]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 8041128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804112a:	4a6b      	ldr	r2, [pc, #428]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 804112c:	f043 0301 	orr.w	r3, r3, #1
 8041130:	6313      	str	r3, [r2, #48]	; 0x30
 8041132:	4b69      	ldr	r3, [pc, #420]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 8041134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041136:	f003 0301 	and.w	r3, r3, #1
 804113a:	61bb      	str	r3, [r7, #24]
 804113c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 804113e:	2300      	movs	r3, #0
 8041140:	617b      	str	r3, [r7, #20]
 8041142:	4b65      	ldr	r3, [pc, #404]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 8041144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041146:	4a64      	ldr	r2, [pc, #400]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 8041148:	f043 0302 	orr.w	r3, r3, #2
 804114c:	6313      	str	r3, [r2, #48]	; 0x30
 804114e:	4b62      	ldr	r3, [pc, #392]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 8041150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041152:	f003 0302 	and.w	r3, r3, #2
 8041156:	617b      	str	r3, [r7, #20]
 8041158:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 804115a:	2300      	movs	r3, #0
 804115c:	613b      	str	r3, [r7, #16]
 804115e:	4b5e      	ldr	r3, [pc, #376]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 8041160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041162:	4a5d      	ldr	r2, [pc, #372]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 8041164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8041168:	6313      	str	r3, [r2, #48]	; 0x30
 804116a:	4b5b      	ldr	r3, [pc, #364]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 804116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804116e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041172:	613b      	str	r3, [r7, #16]
 8041174:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8041176:	2300      	movs	r3, #0
 8041178:	60fb      	str	r3, [r7, #12]
 804117a:	4b57      	ldr	r3, [pc, #348]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 804117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804117e:	4a56      	ldr	r2, [pc, #344]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 8041180:	f043 0304 	orr.w	r3, r3, #4
 8041184:	6313      	str	r3, [r2, #48]	; 0x30
 8041186:	4b54      	ldr	r3, [pc, #336]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 8041188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804118a:	f003 0304 	and.w	r3, r3, #4
 804118e:	60fb      	str	r3, [r7, #12]
 8041190:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8041192:	2300      	movs	r3, #0
 8041194:	60bb      	str	r3, [r7, #8]
 8041196:	4b50      	ldr	r3, [pc, #320]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 8041198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804119a:	4a4f      	ldr	r2, [pc, #316]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 804119c:	f043 0308 	orr.w	r3, r3, #8
 80411a0:	6313      	str	r3, [r2, #48]	; 0x30
 80411a2:	4b4d      	ldr	r3, [pc, #308]	; (80412d8 <HAL_LTDC_MspInit+0x244>)
 80411a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80411a6:	f003 0308 	and.w	r3, r3, #8
 80411aa:	60bb      	str	r3, [r7, #8]
 80411ac:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80411ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80411b2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80411b4:	2302      	movs	r3, #2
 80411b6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80411b8:	2300      	movs	r3, #0
 80411ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80411bc:	2300      	movs	r3, #0
 80411be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80411c0:	230e      	movs	r3, #14
 80411c2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80411c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80411c8:	4619      	mov	r1, r3
 80411ca:	4844      	ldr	r0, [pc, #272]	; (80412dc <HAL_LTDC_MspInit+0x248>)
 80411cc:	f002 fc6a 	bl	8043aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80411d0:	f641 0358 	movw	r3, #6232	; 0x1858
 80411d4:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80411d6:	2302      	movs	r3, #2
 80411d8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80411da:	2300      	movs	r3, #0
 80411dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80411de:	2300      	movs	r3, #0
 80411e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80411e2:	230e      	movs	r3, #14
 80411e4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80411e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80411ea:	4619      	mov	r1, r3
 80411ec:	483c      	ldr	r0, [pc, #240]	; (80412e0 <HAL_LTDC_MspInit+0x24c>)
 80411ee:	f002 fc59 	bl	8043aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80411f2:	2303      	movs	r3, #3
 80411f4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80411f6:	2302      	movs	r3, #2
 80411f8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80411fa:	2300      	movs	r3, #0
 80411fc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80411fe:	2300      	movs	r3, #0
 8041200:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8041202:	2309      	movs	r3, #9
 8041204:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8041206:	f107 0354 	add.w	r3, r7, #84	; 0x54
 804120a:	4619      	mov	r1, r3
 804120c:	4835      	ldr	r0, [pc, #212]	; (80412e4 <HAL_LTDC_MspInit+0x250>)
 804120e:	f002 fc49 	bl	8043aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8041212:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8041216:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041218:	2302      	movs	r3, #2
 804121a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804121c:	2300      	movs	r3, #0
 804121e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041220:	2300      	movs	r3, #0
 8041222:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8041224:	230e      	movs	r3, #14
 8041226:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8041228:	f107 0354 	add.w	r3, r7, #84	; 0x54
 804122c:	4619      	mov	r1, r3
 804122e:	482d      	ldr	r0, [pc, #180]	; (80412e4 <HAL_LTDC_MspInit+0x250>)
 8041230:	f002 fc38 	bl	8043aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8041234:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8041238:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804123a:	2302      	movs	r3, #2
 804123c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804123e:	2300      	movs	r3, #0
 8041240:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041242:	2300      	movs	r3, #0
 8041244:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8041246:	230e      	movs	r3, #14
 8041248:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 804124a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 804124e:	4619      	mov	r1, r3
 8041250:	4825      	ldr	r0, [pc, #148]	; (80412e8 <HAL_LTDC_MspInit+0x254>)
 8041252:	f002 fc27 	bl	8043aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8041256:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 804125a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804125c:	2302      	movs	r3, #2
 804125e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041260:	2300      	movs	r3, #0
 8041262:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041264:	2300      	movs	r3, #0
 8041266:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8041268:	230e      	movs	r3, #14
 804126a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804126c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041270:	4619      	mov	r1, r3
 8041272:	481e      	ldr	r0, [pc, #120]	; (80412ec <HAL_LTDC_MspInit+0x258>)
 8041274:	f002 fc16 	bl	8043aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8041278:	2348      	movs	r3, #72	; 0x48
 804127a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804127c:	2302      	movs	r3, #2
 804127e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041280:	2300      	movs	r3, #0
 8041282:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041284:	2300      	movs	r3, #0
 8041286:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8041288:	230e      	movs	r3, #14
 804128a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804128c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041290:	4619      	mov	r1, r3
 8041292:	4817      	ldr	r0, [pc, #92]	; (80412f0 <HAL_LTDC_MspInit+0x25c>)
 8041294:	f002 fc06 	bl	8043aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8041298:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 804129c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804129e:	2302      	movs	r3, #2
 80412a0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80412a2:	2300      	movs	r3, #0
 80412a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80412a6:	2300      	movs	r3, #0
 80412a8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80412aa:	2309      	movs	r3, #9
 80412ac:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80412ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80412b2:	4619      	mov	r1, r3
 80412b4:	480c      	ldr	r0, [pc, #48]	; (80412e8 <HAL_LTDC_MspInit+0x254>)
 80412b6:	f002 fbf5 	bl	8043aa4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80412ba:	2200      	movs	r2, #0
 80412bc:	2105      	movs	r1, #5
 80412be:	2058      	movs	r0, #88	; 0x58
 80412c0:	f001 fe50 	bl	8042f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80412c4:	2058      	movs	r0, #88	; 0x58
 80412c6:	f001 fe69 	bl	8042f9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80412ca:	bf00      	nop
 80412cc:	3768      	adds	r7, #104	; 0x68
 80412ce:	46bd      	mov	sp, r7
 80412d0:	bd80      	pop	{r7, pc}
 80412d2:	bf00      	nop
 80412d4:	40016800 	.word	0x40016800
 80412d8:	40023800 	.word	0x40023800
 80412dc:	40021400 	.word	0x40021400
 80412e0:	40020000 	.word	0x40020000
 80412e4:	40020400 	.word	0x40020400
 80412e8:	40021800 	.word	0x40021800
 80412ec:	40020800 	.word	0x40020800
 80412f0:	40020c00 	.word	0x40020c00

080412f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80412f4:	b580      	push	{r7, lr}
 80412f6:	b08a      	sub	sp, #40	; 0x28
 80412f8:	af00      	add	r7, sp, #0
 80412fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80412fc:	f107 0314 	add.w	r3, r7, #20
 8041300:	2200      	movs	r2, #0
 8041302:	601a      	str	r2, [r3, #0]
 8041304:	605a      	str	r2, [r3, #4]
 8041306:	609a      	str	r2, [r3, #8]
 8041308:	60da      	str	r2, [r3, #12]
 804130a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 804130c:	687b      	ldr	r3, [r7, #4]
 804130e:	681b      	ldr	r3, [r3, #0]
 8041310:	4a19      	ldr	r2, [pc, #100]	; (8041378 <HAL_SPI_MspInit+0x84>)
 8041312:	4293      	cmp	r3, r2
 8041314:	d12c      	bne.n	8041370 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8041316:	2300      	movs	r3, #0
 8041318:	613b      	str	r3, [r7, #16]
 804131a:	4b18      	ldr	r3, [pc, #96]	; (804137c <HAL_SPI_MspInit+0x88>)
 804131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804131e:	4a17      	ldr	r2, [pc, #92]	; (804137c <HAL_SPI_MspInit+0x88>)
 8041320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041324:	6453      	str	r3, [r2, #68]	; 0x44
 8041326:	4b15      	ldr	r3, [pc, #84]	; (804137c <HAL_SPI_MspInit+0x88>)
 8041328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804132a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804132e:	613b      	str	r3, [r7, #16]
 8041330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8041332:	2300      	movs	r3, #0
 8041334:	60fb      	str	r3, [r7, #12]
 8041336:	4b11      	ldr	r3, [pc, #68]	; (804137c <HAL_SPI_MspInit+0x88>)
 8041338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804133a:	4a10      	ldr	r2, [pc, #64]	; (804137c <HAL_SPI_MspInit+0x88>)
 804133c:	f043 0320 	orr.w	r3, r3, #32
 8041340:	6313      	str	r3, [r2, #48]	; 0x30
 8041342:	4b0e      	ldr	r3, [pc, #56]	; (804137c <HAL_SPI_MspInit+0x88>)
 8041344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041346:	f003 0320 	and.w	r3, r3, #32
 804134a:	60fb      	str	r3, [r7, #12]
 804134c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 804134e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8041352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041354:	2302      	movs	r3, #2
 8041356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041358:	2300      	movs	r3, #0
 804135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804135c:	2300      	movs	r3, #0
 804135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8041360:	2305      	movs	r3, #5
 8041362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8041364:	f107 0314 	add.w	r3, r7, #20
 8041368:	4619      	mov	r1, r3
 804136a:	4805      	ldr	r0, [pc, #20]	; (8041380 <HAL_SPI_MspInit+0x8c>)
 804136c:	f002 fb9a 	bl	8043aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8041370:	bf00      	nop
 8041372:	3728      	adds	r7, #40	; 0x28
 8041374:	46bd      	mov	sp, r7
 8041376:	bd80      	pop	{r7, pc}
 8041378:	40015000 	.word	0x40015000
 804137c:	40023800 	.word	0x40023800
 8041380:	40021400 	.word	0x40021400

08041384 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8041384:	b580      	push	{r7, lr}
 8041386:	b082      	sub	sp, #8
 8041388:	af00      	add	r7, sp, #0
 804138a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 804138c:	687b      	ldr	r3, [r7, #4]
 804138e:	681b      	ldr	r3, [r3, #0]
 8041390:	4a08      	ldr	r2, [pc, #32]	; (80413b4 <HAL_SPI_MspDeInit+0x30>)
 8041392:	4293      	cmp	r3, r2
 8041394:	d10a      	bne.n	80413ac <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8041396:	4b08      	ldr	r3, [pc, #32]	; (80413b8 <HAL_SPI_MspDeInit+0x34>)
 8041398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804139a:	4a07      	ldr	r2, [pc, #28]	; (80413b8 <HAL_SPI_MspDeInit+0x34>)
 804139c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80413a0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80413a2:	f44f 7160 	mov.w	r1, #896	; 0x380
 80413a6:	4805      	ldr	r0, [pc, #20]	; (80413bc <HAL_SPI_MspDeInit+0x38>)
 80413a8:	f002 fd28 	bl	8043dfc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80413ac:	bf00      	nop
 80413ae:	3708      	adds	r7, #8
 80413b0:	46bd      	mov	sp, r7
 80413b2:	bd80      	pop	{r7, pc}
 80413b4:	40015000 	.word	0x40015000
 80413b8:	40023800 	.word	0x40023800
 80413bc:	40021400 	.word	0x40021400

080413c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80413c0:	b480      	push	{r7}
 80413c2:	b085      	sub	sp, #20
 80413c4:	af00      	add	r7, sp, #0
 80413c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80413c8:	687b      	ldr	r3, [r7, #4]
 80413ca:	681b      	ldr	r3, [r3, #0]
 80413cc:	4a0b      	ldr	r2, [pc, #44]	; (80413fc <HAL_TIM_Base_MspInit+0x3c>)
 80413ce:	4293      	cmp	r3, r2
 80413d0:	d10d      	bne.n	80413ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80413d2:	2300      	movs	r3, #0
 80413d4:	60fb      	str	r3, [r7, #12]
 80413d6:	4b0a      	ldr	r3, [pc, #40]	; (8041400 <HAL_TIM_Base_MspInit+0x40>)
 80413d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80413da:	4a09      	ldr	r2, [pc, #36]	; (8041400 <HAL_TIM_Base_MspInit+0x40>)
 80413dc:	f043 0301 	orr.w	r3, r3, #1
 80413e0:	6453      	str	r3, [r2, #68]	; 0x44
 80413e2:	4b07      	ldr	r3, [pc, #28]	; (8041400 <HAL_TIM_Base_MspInit+0x40>)
 80413e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80413e6:	f003 0301 	and.w	r3, r3, #1
 80413ea:	60fb      	str	r3, [r7, #12]
 80413ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80413ee:	bf00      	nop
 80413f0:	3714      	adds	r7, #20
 80413f2:	46bd      	mov	sp, r7
 80413f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80413f8:	4770      	bx	lr
 80413fa:	bf00      	nop
 80413fc:	40010000 	.word	0x40010000
 8041400:	40023800 	.word	0x40023800

08041404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8041404:	b580      	push	{r7, lr}
 8041406:	b08a      	sub	sp, #40	; 0x28
 8041408:	af00      	add	r7, sp, #0
 804140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804140c:	f107 0314 	add.w	r3, r7, #20
 8041410:	2200      	movs	r2, #0
 8041412:	601a      	str	r2, [r3, #0]
 8041414:	605a      	str	r2, [r3, #4]
 8041416:	609a      	str	r2, [r3, #8]
 8041418:	60da      	str	r2, [r3, #12]
 804141a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 804141c:	687b      	ldr	r3, [r7, #4]
 804141e:	681b      	ldr	r3, [r3, #0]
 8041420:	4a19      	ldr	r2, [pc, #100]	; (8041488 <HAL_UART_MspInit+0x84>)
 8041422:	4293      	cmp	r3, r2
 8041424:	d12c      	bne.n	8041480 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8041426:	2300      	movs	r3, #0
 8041428:	613b      	str	r3, [r7, #16]
 804142a:	4b18      	ldr	r3, [pc, #96]	; (804148c <HAL_UART_MspInit+0x88>)
 804142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804142e:	4a17      	ldr	r2, [pc, #92]	; (804148c <HAL_UART_MspInit+0x88>)
 8041430:	f043 0310 	orr.w	r3, r3, #16
 8041434:	6453      	str	r3, [r2, #68]	; 0x44
 8041436:	4b15      	ldr	r3, [pc, #84]	; (804148c <HAL_UART_MspInit+0x88>)
 8041438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804143a:	f003 0310 	and.w	r3, r3, #16
 804143e:	613b      	str	r3, [r7, #16]
 8041440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8041442:	2300      	movs	r3, #0
 8041444:	60fb      	str	r3, [r7, #12]
 8041446:	4b11      	ldr	r3, [pc, #68]	; (804148c <HAL_UART_MspInit+0x88>)
 8041448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804144a:	4a10      	ldr	r2, [pc, #64]	; (804148c <HAL_UART_MspInit+0x88>)
 804144c:	f043 0301 	orr.w	r3, r3, #1
 8041450:	6313      	str	r3, [r2, #48]	; 0x30
 8041452:	4b0e      	ldr	r3, [pc, #56]	; (804148c <HAL_UART_MspInit+0x88>)
 8041454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041456:	f003 0301 	and.w	r3, r3, #1
 804145a:	60fb      	str	r3, [r7, #12]
 804145c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 804145e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8041462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041464:	2302      	movs	r3, #2
 8041466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041468:	2300      	movs	r3, #0
 804146a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804146c:	2303      	movs	r3, #3
 804146e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8041470:	2307      	movs	r3, #7
 8041472:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041474:	f107 0314 	add.w	r3, r7, #20
 8041478:	4619      	mov	r1, r3
 804147a:	4805      	ldr	r0, [pc, #20]	; (8041490 <HAL_UART_MspInit+0x8c>)
 804147c:	f002 fb12 	bl	8043aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8041480:	bf00      	nop
 8041482:	3728      	adds	r7, #40	; 0x28
 8041484:	46bd      	mov	sp, r7
 8041486:	bd80      	pop	{r7, pc}
 8041488:	40011000 	.word	0x40011000
 804148c:	40023800 	.word	0x40023800
 8041490:	40020000 	.word	0x40020000

08041494 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8041494:	b580      	push	{r7, lr}
 8041496:	b086      	sub	sp, #24
 8041498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 804149a:	1d3b      	adds	r3, r7, #4
 804149c:	2200      	movs	r2, #0
 804149e:	601a      	str	r2, [r3, #0]
 80414a0:	605a      	str	r2, [r3, #4]
 80414a2:	609a      	str	r2, [r3, #8]
 80414a4:	60da      	str	r2, [r3, #12]
 80414a6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80414a8:	4b3b      	ldr	r3, [pc, #236]	; (8041598 <HAL_FMC_MspInit+0x104>)
 80414aa:	681b      	ldr	r3, [r3, #0]
 80414ac:	2b00      	cmp	r3, #0
 80414ae:	d16f      	bne.n	8041590 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80414b0:	4b39      	ldr	r3, [pc, #228]	; (8041598 <HAL_FMC_MspInit+0x104>)
 80414b2:	2201      	movs	r2, #1
 80414b4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80414b6:	2300      	movs	r3, #0
 80414b8:	603b      	str	r3, [r7, #0]
 80414ba:	4b38      	ldr	r3, [pc, #224]	; (804159c <HAL_FMC_MspInit+0x108>)
 80414bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80414be:	4a37      	ldr	r2, [pc, #220]	; (804159c <HAL_FMC_MspInit+0x108>)
 80414c0:	f043 0301 	orr.w	r3, r3, #1
 80414c4:	6393      	str	r3, [r2, #56]	; 0x38
 80414c6:	4b35      	ldr	r3, [pc, #212]	; (804159c <HAL_FMC_MspInit+0x108>)
 80414c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80414ca:	f003 0301 	and.w	r3, r3, #1
 80414ce:	603b      	str	r3, [r7, #0]
 80414d0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80414d2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80414d6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80414d8:	2302      	movs	r3, #2
 80414da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80414dc:	2300      	movs	r3, #0
 80414de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80414e0:	2303      	movs	r3, #3
 80414e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80414e4:	230c      	movs	r3, #12
 80414e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80414e8:	1d3b      	adds	r3, r7, #4
 80414ea:	4619      	mov	r1, r3
 80414ec:	482c      	ldr	r0, [pc, #176]	; (80415a0 <HAL_FMC_MspInit+0x10c>)
 80414ee:	f002 fad9 	bl	8043aa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80414f2:	2301      	movs	r3, #1
 80414f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80414f6:	2302      	movs	r3, #2
 80414f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80414fa:	2300      	movs	r3, #0
 80414fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80414fe:	2303      	movs	r3, #3
 8041500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041502:	230c      	movs	r3, #12
 8041504:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8041506:	1d3b      	adds	r3, r7, #4
 8041508:	4619      	mov	r1, r3
 804150a:	4826      	ldr	r0, [pc, #152]	; (80415a4 <HAL_FMC_MspInit+0x110>)
 804150c:	f002 faca 	bl	8043aa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8041510:	f248 1333 	movw	r3, #33075	; 0x8133
 8041514:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041516:	2302      	movs	r3, #2
 8041518:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804151a:	2300      	movs	r3, #0
 804151c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804151e:	2303      	movs	r3, #3
 8041520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041522:	230c      	movs	r3, #12
 8041524:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8041526:	1d3b      	adds	r3, r7, #4
 8041528:	4619      	mov	r1, r3
 804152a:	481f      	ldr	r0, [pc, #124]	; (80415a8 <HAL_FMC_MspInit+0x114>)
 804152c:	f002 faba 	bl	8043aa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8041530:	f64f 7383 	movw	r3, #65411	; 0xff83
 8041534:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041536:	2302      	movs	r3, #2
 8041538:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804153a:	2300      	movs	r3, #0
 804153c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804153e:	2303      	movs	r3, #3
 8041540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041542:	230c      	movs	r3, #12
 8041544:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8041546:	1d3b      	adds	r3, r7, #4
 8041548:	4619      	mov	r1, r3
 804154a:	4818      	ldr	r0, [pc, #96]	; (80415ac <HAL_FMC_MspInit+0x118>)
 804154c:	f002 faaa 	bl	8043aa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8041550:	f24c 7303 	movw	r3, #50947	; 0xc703
 8041554:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041556:	2302      	movs	r3, #2
 8041558:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804155a:	2300      	movs	r3, #0
 804155c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804155e:	2303      	movs	r3, #3
 8041560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041562:	230c      	movs	r3, #12
 8041564:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8041566:	1d3b      	adds	r3, r7, #4
 8041568:	4619      	mov	r1, r3
 804156a:	4811      	ldr	r0, [pc, #68]	; (80415b0 <HAL_FMC_MspInit+0x11c>)
 804156c:	f002 fa9a 	bl	8043aa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8041570:	2360      	movs	r3, #96	; 0x60
 8041572:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041574:	2302      	movs	r3, #2
 8041576:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041578:	2300      	movs	r3, #0
 804157a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804157c:	2303      	movs	r3, #3
 804157e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041580:	230c      	movs	r3, #12
 8041582:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8041584:	1d3b      	adds	r3, r7, #4
 8041586:	4619      	mov	r1, r3
 8041588:	480a      	ldr	r0, [pc, #40]	; (80415b4 <HAL_FMC_MspInit+0x120>)
 804158a:	f002 fa8b 	bl	8043aa4 <HAL_GPIO_Init>
 804158e:	e000      	b.n	8041592 <HAL_FMC_MspInit+0xfe>
    return;
 8041590:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8041592:	3718      	adds	r7, #24
 8041594:	46bd      	mov	sp, r7
 8041596:	bd80      	pop	{r7, pc}
 8041598:	200003c0 	.word	0x200003c0
 804159c:	40023800 	.word	0x40023800
 80415a0:	40021400 	.word	0x40021400
 80415a4:	40020800 	.word	0x40020800
 80415a8:	40021800 	.word	0x40021800
 80415ac:	40021000 	.word	0x40021000
 80415b0:	40020c00 	.word	0x40020c00
 80415b4:	40020400 	.word	0x40020400

080415b8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80415b8:	b580      	push	{r7, lr}
 80415ba:	b082      	sub	sp, #8
 80415bc:	af00      	add	r7, sp, #0
 80415be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80415c0:	f7ff ff68 	bl	8041494 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80415c4:	bf00      	nop
 80415c6:	3708      	adds	r7, #8
 80415c8:	46bd      	mov	sp, r7
 80415ca:	bd80      	pop	{r7, pc}

080415cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80415cc:	b580      	push	{r7, lr}
 80415ce:	b08e      	sub	sp, #56	; 0x38
 80415d0:	af00      	add	r7, sp, #0
 80415d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80415d4:	2300      	movs	r3, #0
 80415d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80415d8:	2300      	movs	r3, #0
 80415da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80415dc:	2300      	movs	r3, #0
 80415de:	60fb      	str	r3, [r7, #12]
 80415e0:	4b33      	ldr	r3, [pc, #204]	; (80416b0 <HAL_InitTick+0xe4>)
 80415e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80415e4:	4a32      	ldr	r2, [pc, #200]	; (80416b0 <HAL_InitTick+0xe4>)
 80415e6:	f043 0310 	orr.w	r3, r3, #16
 80415ea:	6413      	str	r3, [r2, #64]	; 0x40
 80415ec:	4b30      	ldr	r3, [pc, #192]	; (80416b0 <HAL_InitTick+0xe4>)
 80415ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80415f0:	f003 0310 	and.w	r3, r3, #16
 80415f4:	60fb      	str	r3, [r7, #12]
 80415f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80415f8:	f107 0210 	add.w	r2, r7, #16
 80415fc:	f107 0314 	add.w	r3, r7, #20
 8041600:	4611      	mov	r1, r2
 8041602:	4618      	mov	r0, r3
 8041604:	f005 fbaa 	bl	8046d5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8041608:	6a3b      	ldr	r3, [r7, #32]
 804160a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 804160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804160e:	2b00      	cmp	r3, #0
 8041610:	d103      	bne.n	804161a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8041612:	f005 fb7b 	bl	8046d0c <HAL_RCC_GetPCLK1Freq>
 8041616:	6378      	str	r0, [r7, #52]	; 0x34
 8041618:	e004      	b.n	8041624 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 804161a:	f005 fb77 	bl	8046d0c <HAL_RCC_GetPCLK1Freq>
 804161e:	4603      	mov	r3, r0
 8041620:	005b      	lsls	r3, r3, #1
 8041622:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8041624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041626:	4a23      	ldr	r2, [pc, #140]	; (80416b4 <HAL_InitTick+0xe8>)
 8041628:	fba2 2303 	umull	r2, r3, r2, r3
 804162c:	0c9b      	lsrs	r3, r3, #18
 804162e:	3b01      	subs	r3, #1
 8041630:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8041632:	4b21      	ldr	r3, [pc, #132]	; (80416b8 <HAL_InitTick+0xec>)
 8041634:	4a21      	ldr	r2, [pc, #132]	; (80416bc <HAL_InitTick+0xf0>)
 8041636:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8041638:	4b1f      	ldr	r3, [pc, #124]	; (80416b8 <HAL_InitTick+0xec>)
 804163a:	f240 32e7 	movw	r2, #999	; 0x3e7
 804163e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8041640:	4a1d      	ldr	r2, [pc, #116]	; (80416b8 <HAL_InitTick+0xec>)
 8041642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041644:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8041646:	4b1c      	ldr	r3, [pc, #112]	; (80416b8 <HAL_InitTick+0xec>)
 8041648:	2200      	movs	r2, #0
 804164a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 804164c:	4b1a      	ldr	r3, [pc, #104]	; (80416b8 <HAL_InitTick+0xec>)
 804164e:	2200      	movs	r2, #0
 8041650:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8041652:	4b19      	ldr	r3, [pc, #100]	; (80416b8 <HAL_InitTick+0xec>)
 8041654:	2200      	movs	r2, #0
 8041656:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8041658:	4817      	ldr	r0, [pc, #92]	; (80416b8 <HAL_InitTick+0xec>)
 804165a:	f006 fbe1 	bl	8047e20 <HAL_TIM_Base_Init>
 804165e:	4603      	mov	r3, r0
 8041660:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8041664:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8041668:	2b00      	cmp	r3, #0
 804166a:	d11b      	bne.n	80416a4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 804166c:	4812      	ldr	r0, [pc, #72]	; (80416b8 <HAL_InitTick+0xec>)
 804166e:	f006 fc27 	bl	8047ec0 <HAL_TIM_Base_Start_IT>
 8041672:	4603      	mov	r3, r0
 8041674:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8041678:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 804167c:	2b00      	cmp	r3, #0
 804167e:	d111      	bne.n	80416a4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8041680:	2036      	movs	r0, #54	; 0x36
 8041682:	f001 fc8b 	bl	8042f9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8041686:	687b      	ldr	r3, [r7, #4]
 8041688:	2b0f      	cmp	r3, #15
 804168a:	d808      	bhi.n	804169e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 804168c:	2200      	movs	r2, #0
 804168e:	6879      	ldr	r1, [r7, #4]
 8041690:	2036      	movs	r0, #54	; 0x36
 8041692:	f001 fc67 	bl	8042f64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8041696:	4a0a      	ldr	r2, [pc, #40]	; (80416c0 <HAL_InitTick+0xf4>)
 8041698:	687b      	ldr	r3, [r7, #4]
 804169a:	6013      	str	r3, [r2, #0]
 804169c:	e002      	b.n	80416a4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 804169e:	2301      	movs	r3, #1
 80416a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80416a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80416a8:	4618      	mov	r0, r3
 80416aa:	3738      	adds	r7, #56	; 0x38
 80416ac:	46bd      	mov	sp, r7
 80416ae:	bd80      	pop	{r7, pc}
 80416b0:	40023800 	.word	0x40023800
 80416b4:	431bde83 	.word	0x431bde83
 80416b8:	200003c4 	.word	0x200003c4
 80416bc:	40001000 	.word	0x40001000
 80416c0:	20000054 	.word	0x20000054

080416c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80416c4:	b480      	push	{r7}
 80416c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80416c8:	e7fe      	b.n	80416c8 <NMI_Handler+0x4>

080416ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80416ca:	b480      	push	{r7}
 80416cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80416ce:	e7fe      	b.n	80416ce <HardFault_Handler+0x4>

080416d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80416d0:	b480      	push	{r7}
 80416d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80416d4:	e7fe      	b.n	80416d4 <MemManage_Handler+0x4>

080416d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80416d6:	b480      	push	{r7}
 80416d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80416da:	e7fe      	b.n	80416da <BusFault_Handler+0x4>

080416dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80416dc:	b480      	push	{r7}
 80416de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80416e0:	e7fe      	b.n	80416e0 <UsageFault_Handler+0x4>

080416e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80416e2:	b480      	push	{r7}
 80416e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80416e6:	bf00      	nop
 80416e8:	46bd      	mov	sp, r7
 80416ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80416ee:	4770      	bx	lr

080416f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80416f0:	b480      	push	{r7}
 80416f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80416f4:	bf00      	nop
 80416f6:	46bd      	mov	sp, r7
 80416f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80416fc:	4770      	bx	lr

080416fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80416fe:	b480      	push	{r7}
 8041700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8041702:	bf00      	nop
 8041704:	46bd      	mov	sp, r7
 8041706:	f85d 7b04 	ldr.w	r7, [sp], #4
 804170a:	4770      	bx	lr

0804170c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 804170c:	b480      	push	{r7}
 804170e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8041710:	bf00      	nop
 8041712:	46bd      	mov	sp, r7
 8041714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041718:	4770      	bx	lr

0804171a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 804171a:	b580      	push	{r7, lr}
 804171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 804171e:	2001      	movs	r0, #1
 8041720:	f002 fc92 	bl	8044048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8041724:	bf00      	nop
 8041726:	bd80      	pop	{r7, pc}

08041728 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8041728:	b580      	push	{r7, lr}
 804172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 804172c:	4802      	ldr	r0, [pc, #8]	; (8041738 <TIM6_DAC_IRQHandler+0x10>)
 804172e:	f006 fc37 	bl	8047fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8041732:	bf00      	nop
 8041734:	bd80      	pop	{r7, pc}
 8041736:	bf00      	nop
 8041738:	200003c4 	.word	0x200003c4

0804173c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 804173c:	b580      	push	{r7, lr}
 804173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8041740:	4802      	ldr	r0, [pc, #8]	; (804174c <OTG_HS_IRQHandler+0x10>)
 8041742:	f002 ff03 	bl	804454c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8041746:	bf00      	nop
 8041748:	bd80      	pop	{r7, pc}
 804174a:	bf00      	nop
 804174c:	20000a44 	.word	0x20000a44

08041750 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8041750:	b580      	push	{r7, lr}
 8041752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8041754:	4802      	ldr	r0, [pc, #8]	; (8041760 <LTDC_IRQHandler+0x10>)
 8041756:	f004 fb29 	bl	8045dac <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 804175a:	bf00      	nop
 804175c:	bd80      	pop	{r7, pc}
 804175e:	bf00      	nop
 8041760:	20000198 	.word	0x20000198

08041764 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8041764:	b580      	push	{r7, lr}
 8041766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8041768:	4802      	ldr	r0, [pc, #8]	; (8041774 <DMA2D_IRQHandler+0x10>)
 804176a:	f001 ff5c 	bl	8043626 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 804176e:	bf00      	nop
 8041770:	bd80      	pop	{r7, pc}
 8041772:	bf00      	nop
 8041774:	20000104 	.word	0x20000104

08041778 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8041778:	b480      	push	{r7}
 804177a:	b083      	sub	sp, #12
 804177c:	af00      	add	r7, sp, #0
 804177e:	4603      	mov	r3, r0
 8041780:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8041782:	88fb      	ldrh	r3, [r7, #6]
 8041784:	2b01      	cmp	r3, #1
 8041786:	d102      	bne.n	804178e <HAL_GPIO_EXTI_Callback+0x16>

	case B1_Pin: //Blue Button Interrupt
		ota_update_request = true;
 8041788:	4b04      	ldr	r3, [pc, #16]	; (804179c <HAL_GPIO_EXTI_Callback+0x24>)
 804178a:	2201      	movs	r2, #1
 804178c:	701a      	strb	r2, [r3, #0]

	}
}
 804178e:	bf00      	nop
 8041790:	370c      	adds	r7, #12
 8041792:	46bd      	mov	sp, r7
 8041794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041798:	4770      	bx	lr
 804179a:	bf00      	nop
 804179c:	200003bc 	.word	0x200003bc

080417a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80417a0:	b580      	push	{r7, lr}
 80417a2:	b086      	sub	sp, #24
 80417a4:	af00      	add	r7, sp, #0
 80417a6:	60f8      	str	r0, [r7, #12]
 80417a8:	60b9      	str	r1, [r7, #8]
 80417aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80417ac:	2300      	movs	r3, #0
 80417ae:	617b      	str	r3, [r7, #20]
 80417b0:	e00a      	b.n	80417c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80417b2:	f3af 8000 	nop.w
 80417b6:	4601      	mov	r1, r0
 80417b8:	68bb      	ldr	r3, [r7, #8]
 80417ba:	1c5a      	adds	r2, r3, #1
 80417bc:	60ba      	str	r2, [r7, #8]
 80417be:	b2ca      	uxtb	r2, r1
 80417c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80417c2:	697b      	ldr	r3, [r7, #20]
 80417c4:	3301      	adds	r3, #1
 80417c6:	617b      	str	r3, [r7, #20]
 80417c8:	697a      	ldr	r2, [r7, #20]
 80417ca:	687b      	ldr	r3, [r7, #4]
 80417cc:	429a      	cmp	r2, r3
 80417ce:	dbf0      	blt.n	80417b2 <_read+0x12>
  }

  return len;
 80417d0:	687b      	ldr	r3, [r7, #4]
}
 80417d2:	4618      	mov	r0, r3
 80417d4:	3718      	adds	r7, #24
 80417d6:	46bd      	mov	sp, r7
 80417d8:	bd80      	pop	{r7, pc}

080417da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80417da:	b580      	push	{r7, lr}
 80417dc:	b086      	sub	sp, #24
 80417de:	af00      	add	r7, sp, #0
 80417e0:	60f8      	str	r0, [r7, #12]
 80417e2:	60b9      	str	r1, [r7, #8]
 80417e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80417e6:	2300      	movs	r3, #0
 80417e8:	617b      	str	r3, [r7, #20]
 80417ea:	e009      	b.n	8041800 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80417ec:	68bb      	ldr	r3, [r7, #8]
 80417ee:	1c5a      	adds	r2, r3, #1
 80417f0:	60ba      	str	r2, [r7, #8]
 80417f2:	781b      	ldrb	r3, [r3, #0]
 80417f4:	4618      	mov	r0, r3
 80417f6:	f7ff fb39 	bl	8040e6c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80417fa:	697b      	ldr	r3, [r7, #20]
 80417fc:	3301      	adds	r3, #1
 80417fe:	617b      	str	r3, [r7, #20]
 8041800:	697a      	ldr	r2, [r7, #20]
 8041802:	687b      	ldr	r3, [r7, #4]
 8041804:	429a      	cmp	r2, r3
 8041806:	dbf1      	blt.n	80417ec <_write+0x12>
  }
  return len;
 8041808:	687b      	ldr	r3, [r7, #4]
}
 804180a:	4618      	mov	r0, r3
 804180c:	3718      	adds	r7, #24
 804180e:	46bd      	mov	sp, r7
 8041810:	bd80      	pop	{r7, pc}

08041812 <_close>:

int _close(int file)
{
 8041812:	b480      	push	{r7}
 8041814:	b083      	sub	sp, #12
 8041816:	af00      	add	r7, sp, #0
 8041818:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 804181a:	f04f 33ff 	mov.w	r3, #4294967295
}
 804181e:	4618      	mov	r0, r3
 8041820:	370c      	adds	r7, #12
 8041822:	46bd      	mov	sp, r7
 8041824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041828:	4770      	bx	lr

0804182a <_fstat>:


int _fstat(int file, struct stat *st)
{
 804182a:	b480      	push	{r7}
 804182c:	b083      	sub	sp, #12
 804182e:	af00      	add	r7, sp, #0
 8041830:	6078      	str	r0, [r7, #4]
 8041832:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8041834:	683b      	ldr	r3, [r7, #0]
 8041836:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 804183a:	605a      	str	r2, [r3, #4]
  return 0;
 804183c:	2300      	movs	r3, #0
}
 804183e:	4618      	mov	r0, r3
 8041840:	370c      	adds	r7, #12
 8041842:	46bd      	mov	sp, r7
 8041844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041848:	4770      	bx	lr

0804184a <_isatty>:

int _isatty(int file)
{
 804184a:	b480      	push	{r7}
 804184c:	b083      	sub	sp, #12
 804184e:	af00      	add	r7, sp, #0
 8041850:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8041852:	2301      	movs	r3, #1
}
 8041854:	4618      	mov	r0, r3
 8041856:	370c      	adds	r7, #12
 8041858:	46bd      	mov	sp, r7
 804185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804185e:	4770      	bx	lr

08041860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8041860:	b480      	push	{r7}
 8041862:	b085      	sub	sp, #20
 8041864:	af00      	add	r7, sp, #0
 8041866:	60f8      	str	r0, [r7, #12]
 8041868:	60b9      	str	r1, [r7, #8]
 804186a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 804186c:	2300      	movs	r3, #0
}
 804186e:	4618      	mov	r0, r3
 8041870:	3714      	adds	r7, #20
 8041872:	46bd      	mov	sp, r7
 8041874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041878:	4770      	bx	lr
	...

0804187c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 804187c:	b580      	push	{r7, lr}
 804187e:	b086      	sub	sp, #24
 8041880:	af00      	add	r7, sp, #0
 8041882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8041884:	4a14      	ldr	r2, [pc, #80]	; (80418d8 <_sbrk+0x5c>)
 8041886:	4b15      	ldr	r3, [pc, #84]	; (80418dc <_sbrk+0x60>)
 8041888:	1ad3      	subs	r3, r2, r3
 804188a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 804188c:	697b      	ldr	r3, [r7, #20]
 804188e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8041890:	4b13      	ldr	r3, [pc, #76]	; (80418e0 <_sbrk+0x64>)
 8041892:	681b      	ldr	r3, [r3, #0]
 8041894:	2b00      	cmp	r3, #0
 8041896:	d102      	bne.n	804189e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8041898:	4b11      	ldr	r3, [pc, #68]	; (80418e0 <_sbrk+0x64>)
 804189a:	4a12      	ldr	r2, [pc, #72]	; (80418e4 <_sbrk+0x68>)
 804189c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 804189e:	4b10      	ldr	r3, [pc, #64]	; (80418e0 <_sbrk+0x64>)
 80418a0:	681a      	ldr	r2, [r3, #0]
 80418a2:	687b      	ldr	r3, [r7, #4]
 80418a4:	4413      	add	r3, r2
 80418a6:	693a      	ldr	r2, [r7, #16]
 80418a8:	429a      	cmp	r2, r3
 80418aa:	d207      	bcs.n	80418bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80418ac:	f00a fef8 	bl	804c6a0 <__errno>
 80418b0:	4603      	mov	r3, r0
 80418b2:	220c      	movs	r2, #12
 80418b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80418b6:	f04f 33ff 	mov.w	r3, #4294967295
 80418ba:	e009      	b.n	80418d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80418bc:	4b08      	ldr	r3, [pc, #32]	; (80418e0 <_sbrk+0x64>)
 80418be:	681b      	ldr	r3, [r3, #0]
 80418c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80418c2:	4b07      	ldr	r3, [pc, #28]	; (80418e0 <_sbrk+0x64>)
 80418c4:	681a      	ldr	r2, [r3, #0]
 80418c6:	687b      	ldr	r3, [r7, #4]
 80418c8:	4413      	add	r3, r2
 80418ca:	4a05      	ldr	r2, [pc, #20]	; (80418e0 <_sbrk+0x64>)
 80418cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80418ce:	68fb      	ldr	r3, [r7, #12]
}
 80418d0:	4618      	mov	r0, r3
 80418d2:	3718      	adds	r7, #24
 80418d4:	46bd      	mov	sp, r7
 80418d6:	bd80      	pop	{r7, pc}
 80418d8:	20030000 	.word	0x20030000
 80418dc:	00000400 	.word	0x00000400
 80418e0:	2000040c 	.word	0x2000040c
 80418e4:	20000d58 	.word	0x20000d58

080418e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80418e8:	b480      	push	{r7}
 80418ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80418ec:	4b07      	ldr	r3, [pc, #28]	; (804190c <SystemInit+0x24>)
 80418ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80418f2:	4a06      	ldr	r2, [pc, #24]	; (804190c <SystemInit+0x24>)
 80418f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80418f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80418fc:	4b03      	ldr	r3, [pc, #12]	; (804190c <SystemInit+0x24>)
 80418fe:	4a04      	ldr	r2, [pc, #16]	; (8041910 <SystemInit+0x28>)
 8041900:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8041902:	bf00      	nop
 8041904:	46bd      	mov	sp, r7
 8041906:	f85d 7b04 	ldr.w	r7, [sp], #4
 804190a:	4770      	bx	lr
 804190c:	e000ed00 	.word	0xe000ed00
 8041910:	08040000 	.word	0x08040000

08041914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8041914:	f8df d034 	ldr.w	sp, [pc, #52]	; 804194c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8041918:	480d      	ldr	r0, [pc, #52]	; (8041950 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 804191a:	490e      	ldr	r1, [pc, #56]	; (8041954 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 804191c:	4a0e      	ldr	r2, [pc, #56]	; (8041958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 804191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8041920:	e002      	b.n	8041928 <LoopCopyDataInit>

08041922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8041922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8041924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8041926:	3304      	adds	r3, #4

08041928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8041928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 804192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 804192c:	d3f9      	bcc.n	8041922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 804192e:	4a0b      	ldr	r2, [pc, #44]	; (804195c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8041930:	4c0b      	ldr	r4, [pc, #44]	; (8041960 <LoopFillZerobss+0x26>)
  movs r3, #0
 8041932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8041934:	e001      	b.n	804193a <LoopFillZerobss>

08041936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8041936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8041938:	3204      	adds	r2, #4

0804193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 804193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 804193c:	d3fb      	bcc.n	8041936 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 804193e:	f7ff ffd3 	bl	80418e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8041942:	f00a feb3 	bl	804c6ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8041946:	f7fe fe25 	bl	8040594 <main>
  bx  lr    
 804194a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 804194c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8041950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8041954:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8041958:	0804fb8c 	.word	0x0804fb8c
  ldr r2, =_sbss
 804195c:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8041960:	20000d58 	.word	0x20000d58

08041964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8041964:	e7fe      	b.n	8041964 <ADC_IRQHandler>

08041966 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8041966:	b580      	push	{r7, lr}
 8041968:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 804196a:	f000 fa5d 	bl	8041e28 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 804196e:	20ca      	movs	r0, #202	; 0xca
 8041970:	f000 f95d 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8041974:	20c3      	movs	r0, #195	; 0xc3
 8041976:	f000 f967 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 804197a:	2008      	movs	r0, #8
 804197c:	f000 f964 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8041980:	2050      	movs	r0, #80	; 0x50
 8041982:	f000 f961 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8041986:	20cf      	movs	r0, #207	; 0xcf
 8041988:	f000 f951 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 804198c:	2000      	movs	r0, #0
 804198e:	f000 f95b 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8041992:	20c1      	movs	r0, #193	; 0xc1
 8041994:	f000 f958 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8041998:	2030      	movs	r0, #48	; 0x30
 804199a:	f000 f955 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 804199e:	20ed      	movs	r0, #237	; 0xed
 80419a0:	f000 f945 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80419a4:	2064      	movs	r0, #100	; 0x64
 80419a6:	f000 f94f 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80419aa:	2003      	movs	r0, #3
 80419ac:	f000 f94c 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80419b0:	2012      	movs	r0, #18
 80419b2:	f000 f949 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80419b6:	2081      	movs	r0, #129	; 0x81
 80419b8:	f000 f946 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80419bc:	20e8      	movs	r0, #232	; 0xe8
 80419be:	f000 f936 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80419c2:	2085      	movs	r0, #133	; 0x85
 80419c4:	f000 f940 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80419c8:	2000      	movs	r0, #0
 80419ca:	f000 f93d 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80419ce:	2078      	movs	r0, #120	; 0x78
 80419d0:	f000 f93a 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80419d4:	20cb      	movs	r0, #203	; 0xcb
 80419d6:	f000 f92a 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80419da:	2039      	movs	r0, #57	; 0x39
 80419dc:	f000 f934 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80419e0:	202c      	movs	r0, #44	; 0x2c
 80419e2:	f000 f931 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80419e6:	2000      	movs	r0, #0
 80419e8:	f000 f92e 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80419ec:	2034      	movs	r0, #52	; 0x34
 80419ee:	f000 f92b 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80419f2:	2002      	movs	r0, #2
 80419f4:	f000 f928 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80419f8:	20f7      	movs	r0, #247	; 0xf7
 80419fa:	f000 f918 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80419fe:	2020      	movs	r0, #32
 8041a00:	f000 f922 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8041a04:	20ea      	movs	r0, #234	; 0xea
 8041a06:	f000 f912 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041a0a:	2000      	movs	r0, #0
 8041a0c:	f000 f91c 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041a10:	2000      	movs	r0, #0
 8041a12:	f000 f919 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8041a16:	20b1      	movs	r0, #177	; 0xb1
 8041a18:	f000 f909 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041a1c:	2000      	movs	r0, #0
 8041a1e:	f000 f913 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8041a22:	201b      	movs	r0, #27
 8041a24:	f000 f910 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8041a28:	20b6      	movs	r0, #182	; 0xb6
 8041a2a:	f000 f900 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8041a2e:	200a      	movs	r0, #10
 8041a30:	f000 f90a 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8041a34:	20a2      	movs	r0, #162	; 0xa2
 8041a36:	f000 f907 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8041a3a:	20c0      	movs	r0, #192	; 0xc0
 8041a3c:	f000 f8f7 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8041a40:	2010      	movs	r0, #16
 8041a42:	f000 f901 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8041a46:	20c1      	movs	r0, #193	; 0xc1
 8041a48:	f000 f8f1 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8041a4c:	2010      	movs	r0, #16
 8041a4e:	f000 f8fb 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8041a52:	20c5      	movs	r0, #197	; 0xc5
 8041a54:	f000 f8eb 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8041a58:	2045      	movs	r0, #69	; 0x45
 8041a5a:	f000 f8f5 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8041a5e:	2015      	movs	r0, #21
 8041a60:	f000 f8f2 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8041a64:	20c7      	movs	r0, #199	; 0xc7
 8041a66:	f000 f8e2 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8041a6a:	2090      	movs	r0, #144	; 0x90
 8041a6c:	f000 f8ec 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8041a70:	2036      	movs	r0, #54	; 0x36
 8041a72:	f000 f8dc 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8041a76:	20c8      	movs	r0, #200	; 0xc8
 8041a78:	f000 f8e6 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8041a7c:	20f2      	movs	r0, #242	; 0xf2
 8041a7e:	f000 f8d6 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041a82:	2000      	movs	r0, #0
 8041a84:	f000 f8e0 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8041a88:	20b0      	movs	r0, #176	; 0xb0
 8041a8a:	f000 f8d0 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8041a8e:	20c2      	movs	r0, #194	; 0xc2
 8041a90:	f000 f8da 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8041a94:	20b6      	movs	r0, #182	; 0xb6
 8041a96:	f000 f8ca 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8041a9a:	200a      	movs	r0, #10
 8041a9c:	f000 f8d4 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8041aa0:	20a7      	movs	r0, #167	; 0xa7
 8041aa2:	f000 f8d1 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8041aa6:	2027      	movs	r0, #39	; 0x27
 8041aa8:	f000 f8ce 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8041aac:	2004      	movs	r0, #4
 8041aae:	f000 f8cb 	bl	8041c48 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8041ab2:	202a      	movs	r0, #42	; 0x2a
 8041ab4:	f000 f8bb 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041ab8:	2000      	movs	r0, #0
 8041aba:	f000 f8c5 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041abe:	2000      	movs	r0, #0
 8041ac0:	f000 f8c2 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041ac4:	2000      	movs	r0, #0
 8041ac6:	f000 f8bf 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8041aca:	20ef      	movs	r0, #239	; 0xef
 8041acc:	f000 f8bc 	bl	8041c48 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8041ad0:	202b      	movs	r0, #43	; 0x2b
 8041ad2:	f000 f8ac 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041ad6:	2000      	movs	r0, #0
 8041ad8:	f000 f8b6 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041adc:	2000      	movs	r0, #0
 8041ade:	f000 f8b3 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8041ae2:	2001      	movs	r0, #1
 8041ae4:	f000 f8b0 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8041ae8:	203f      	movs	r0, #63	; 0x3f
 8041aea:	f000 f8ad 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8041aee:	20f6      	movs	r0, #246	; 0xf6
 8041af0:	f000 f89d 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8041af4:	2001      	movs	r0, #1
 8041af6:	f000 f8a7 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041afa:	2000      	movs	r0, #0
 8041afc:	f000 f8a4 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8041b00:	2006      	movs	r0, #6
 8041b02:	f000 f8a1 	bl	8041c48 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8041b06:	202c      	movs	r0, #44	; 0x2c
 8041b08:	f000 f891 	bl	8041c2e <ili9341_WriteReg>
  LCD_Delay(200);
 8041b0c:	20c8      	movs	r0, #200	; 0xc8
 8041b0e:	f000 fa79 	bl	8042004 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8041b12:	2026      	movs	r0, #38	; 0x26
 8041b14:	f000 f88b 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8041b18:	2001      	movs	r0, #1
 8041b1a:	f000 f895 	bl	8041c48 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8041b1e:	20e0      	movs	r0, #224	; 0xe0
 8041b20:	f000 f885 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8041b24:	200f      	movs	r0, #15
 8041b26:	f000 f88f 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8041b2a:	2029      	movs	r0, #41	; 0x29
 8041b2c:	f000 f88c 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8041b30:	2024      	movs	r0, #36	; 0x24
 8041b32:	f000 f889 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8041b36:	200c      	movs	r0, #12
 8041b38:	f000 f886 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8041b3c:	200e      	movs	r0, #14
 8041b3e:	f000 f883 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8041b42:	2009      	movs	r0, #9
 8041b44:	f000 f880 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8041b48:	204e      	movs	r0, #78	; 0x4e
 8041b4a:	f000 f87d 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8041b4e:	2078      	movs	r0, #120	; 0x78
 8041b50:	f000 f87a 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8041b54:	203c      	movs	r0, #60	; 0x3c
 8041b56:	f000 f877 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8041b5a:	2009      	movs	r0, #9
 8041b5c:	f000 f874 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8041b60:	2013      	movs	r0, #19
 8041b62:	f000 f871 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8041b66:	2005      	movs	r0, #5
 8041b68:	f000 f86e 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8041b6c:	2017      	movs	r0, #23
 8041b6e:	f000 f86b 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8041b72:	2011      	movs	r0, #17
 8041b74:	f000 f868 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041b78:	2000      	movs	r0, #0
 8041b7a:	f000 f865 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8041b7e:	20e1      	movs	r0, #225	; 0xe1
 8041b80:	f000 f855 	bl	8041c2e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041b84:	2000      	movs	r0, #0
 8041b86:	f000 f85f 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8041b8a:	2016      	movs	r0, #22
 8041b8c:	f000 f85c 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8041b90:	201b      	movs	r0, #27
 8041b92:	f000 f859 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8041b96:	2004      	movs	r0, #4
 8041b98:	f000 f856 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8041b9c:	2011      	movs	r0, #17
 8041b9e:	f000 f853 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8041ba2:	2007      	movs	r0, #7
 8041ba4:	f000 f850 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8041ba8:	2031      	movs	r0, #49	; 0x31
 8041baa:	f000 f84d 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8041bae:	2033      	movs	r0, #51	; 0x33
 8041bb0:	f000 f84a 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8041bb4:	2042      	movs	r0, #66	; 0x42
 8041bb6:	f000 f847 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8041bba:	2005      	movs	r0, #5
 8041bbc:	f000 f844 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8041bc0:	200c      	movs	r0, #12
 8041bc2:	f000 f841 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8041bc6:	200a      	movs	r0, #10
 8041bc8:	f000 f83e 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8041bcc:	2028      	movs	r0, #40	; 0x28
 8041bce:	f000 f83b 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8041bd2:	202f      	movs	r0, #47	; 0x2f
 8041bd4:	f000 f838 	bl	8041c48 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8041bd8:	200f      	movs	r0, #15
 8041bda:	f000 f835 	bl	8041c48 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8041bde:	2011      	movs	r0, #17
 8041be0:	f000 f825 	bl	8041c2e <ili9341_WriteReg>
  LCD_Delay(200);
 8041be4:	20c8      	movs	r0, #200	; 0xc8
 8041be6:	f000 fa0d 	bl	8042004 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8041bea:	2029      	movs	r0, #41	; 0x29
 8041bec:	f000 f81f 	bl	8041c2e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8041bf0:	202c      	movs	r0, #44	; 0x2c
 8041bf2:	f000 f81c 	bl	8041c2e <ili9341_WriteReg>
}
 8041bf6:	bf00      	nop
 8041bf8:	bd80      	pop	{r7, pc}

08041bfa <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8041bfa:	b580      	push	{r7, lr}
 8041bfc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8041bfe:	f000 f913 	bl	8041e28 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8041c02:	2103      	movs	r1, #3
 8041c04:	20d3      	movs	r0, #211	; 0xd3
 8041c06:	f000 f82c 	bl	8041c62 <ili9341_ReadData>
 8041c0a:	4603      	mov	r3, r0
 8041c0c:	b29b      	uxth	r3, r3
}
 8041c0e:	4618      	mov	r0, r3
 8041c10:	bd80      	pop	{r7, pc}

08041c12 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8041c12:	b580      	push	{r7, lr}
 8041c14:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8041c16:	2029      	movs	r0, #41	; 0x29
 8041c18:	f000 f809 	bl	8041c2e <ili9341_WriteReg>
}
 8041c1c:	bf00      	nop
 8041c1e:	bd80      	pop	{r7, pc}

08041c20 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8041c20:	b580      	push	{r7, lr}
 8041c22:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8041c24:	2028      	movs	r0, #40	; 0x28
 8041c26:	f000 f802 	bl	8041c2e <ili9341_WriteReg>
}
 8041c2a:	bf00      	nop
 8041c2c:	bd80      	pop	{r7, pc}

08041c2e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8041c2e:	b580      	push	{r7, lr}
 8041c30:	b082      	sub	sp, #8
 8041c32:	af00      	add	r7, sp, #0
 8041c34:	4603      	mov	r3, r0
 8041c36:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8041c38:	79fb      	ldrb	r3, [r7, #7]
 8041c3a:	4618      	mov	r0, r3
 8041c3c:	f000 f98e 	bl	8041f5c <LCD_IO_WriteReg>
}
 8041c40:	bf00      	nop
 8041c42:	3708      	adds	r7, #8
 8041c44:	46bd      	mov	sp, r7
 8041c46:	bd80      	pop	{r7, pc}

08041c48 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8041c48:	b580      	push	{r7, lr}
 8041c4a:	b082      	sub	sp, #8
 8041c4c:	af00      	add	r7, sp, #0
 8041c4e:	4603      	mov	r3, r0
 8041c50:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8041c52:	88fb      	ldrh	r3, [r7, #6]
 8041c54:	4618      	mov	r0, r3
 8041c56:	f000 f95f 	bl	8041f18 <LCD_IO_WriteData>
}
 8041c5a:	bf00      	nop
 8041c5c:	3708      	adds	r7, #8
 8041c5e:	46bd      	mov	sp, r7
 8041c60:	bd80      	pop	{r7, pc}

08041c62 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8041c62:	b580      	push	{r7, lr}
 8041c64:	b082      	sub	sp, #8
 8041c66:	af00      	add	r7, sp, #0
 8041c68:	4603      	mov	r3, r0
 8041c6a:	460a      	mov	r2, r1
 8041c6c:	80fb      	strh	r3, [r7, #6]
 8041c6e:	4613      	mov	r3, r2
 8041c70:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8041c72:	797a      	ldrb	r2, [r7, #5]
 8041c74:	88fb      	ldrh	r3, [r7, #6]
 8041c76:	4611      	mov	r1, r2
 8041c78:	4618      	mov	r0, r3
 8041c7a:	f000 f991 	bl	8041fa0 <LCD_IO_ReadData>
 8041c7e:	4603      	mov	r3, r0
}
 8041c80:	4618      	mov	r0, r3
 8041c82:	3708      	adds	r7, #8
 8041c84:	46bd      	mov	sp, r7
 8041c86:	bd80      	pop	{r7, pc}

08041c88 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8041c88:	b480      	push	{r7}
 8041c8a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8041c8c:	23f0      	movs	r3, #240	; 0xf0
}
 8041c8e:	4618      	mov	r0, r3
 8041c90:	46bd      	mov	sp, r7
 8041c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c96:	4770      	bx	lr

08041c98 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8041c98:	b480      	push	{r7}
 8041c9a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8041c9c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8041ca0:	4618      	mov	r0, r3
 8041ca2:	46bd      	mov	sp, r7
 8041ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ca8:	4770      	bx	lr
	...

08041cac <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8041cac:	b580      	push	{r7, lr}
 8041cae:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8041cb0:	4819      	ldr	r0, [pc, #100]	; (8041d18 <SPIx_Init+0x6c>)
 8041cb2:	f005 ff76 	bl	8047ba2 <HAL_SPI_GetState>
 8041cb6:	4603      	mov	r3, r0
 8041cb8:	2b00      	cmp	r3, #0
 8041cba:	d12b      	bne.n	8041d14 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8041cbc:	4b16      	ldr	r3, [pc, #88]	; (8041d18 <SPIx_Init+0x6c>)
 8041cbe:	4a17      	ldr	r2, [pc, #92]	; (8041d1c <SPIx_Init+0x70>)
 8041cc0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8041cc2:	4b15      	ldr	r3, [pc, #84]	; (8041d18 <SPIx_Init+0x6c>)
 8041cc4:	2218      	movs	r2, #24
 8041cc6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8041cc8:	4b13      	ldr	r3, [pc, #76]	; (8041d18 <SPIx_Init+0x6c>)
 8041cca:	2200      	movs	r2, #0
 8041ccc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8041cce:	4b12      	ldr	r3, [pc, #72]	; (8041d18 <SPIx_Init+0x6c>)
 8041cd0:	2200      	movs	r2, #0
 8041cd2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8041cd4:	4b10      	ldr	r3, [pc, #64]	; (8041d18 <SPIx_Init+0x6c>)
 8041cd6:	2200      	movs	r2, #0
 8041cd8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8041cda:	4b0f      	ldr	r3, [pc, #60]	; (8041d18 <SPIx_Init+0x6c>)
 8041cdc:	2200      	movs	r2, #0
 8041cde:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8041ce0:	4b0d      	ldr	r3, [pc, #52]	; (8041d18 <SPIx_Init+0x6c>)
 8041ce2:	2207      	movs	r2, #7
 8041ce4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8041ce6:	4b0c      	ldr	r3, [pc, #48]	; (8041d18 <SPIx_Init+0x6c>)
 8041ce8:	2200      	movs	r2, #0
 8041cea:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8041cec:	4b0a      	ldr	r3, [pc, #40]	; (8041d18 <SPIx_Init+0x6c>)
 8041cee:	2200      	movs	r2, #0
 8041cf0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8041cf2:	4b09      	ldr	r3, [pc, #36]	; (8041d18 <SPIx_Init+0x6c>)
 8041cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8041cf8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8041cfa:	4b07      	ldr	r3, [pc, #28]	; (8041d18 <SPIx_Init+0x6c>)
 8041cfc:	2200      	movs	r2, #0
 8041cfe:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8041d00:	4b05      	ldr	r3, [pc, #20]	; (8041d18 <SPIx_Init+0x6c>)
 8041d02:	f44f 7282 	mov.w	r2, #260	; 0x104
 8041d06:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8041d08:	4803      	ldr	r0, [pc, #12]	; (8041d18 <SPIx_Init+0x6c>)
 8041d0a:	f000 f853 	bl	8041db4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8041d0e:	4802      	ldr	r0, [pc, #8]	; (8041d18 <SPIx_Init+0x6c>)
 8041d10:	f005 faa7 	bl	8047262 <HAL_SPI_Init>
  } 
}
 8041d14:	bf00      	nop
 8041d16:	bd80      	pop	{r7, pc}
 8041d18:	20000410 	.word	0x20000410
 8041d1c:	40015000 	.word	0x40015000

08041d20 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8041d20:	b580      	push	{r7, lr}
 8041d22:	b084      	sub	sp, #16
 8041d24:	af00      	add	r7, sp, #0
 8041d26:	4603      	mov	r3, r0
 8041d28:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8041d2a:	2300      	movs	r3, #0
 8041d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8041d2e:	79fb      	ldrb	r3, [r7, #7]
 8041d30:	b29a      	uxth	r2, r3
 8041d32:	4b09      	ldr	r3, [pc, #36]	; (8041d58 <SPIx_Read+0x38>)
 8041d34:	681b      	ldr	r3, [r3, #0]
 8041d36:	f107 0108 	add.w	r1, r7, #8
 8041d3a:	4808      	ldr	r0, [pc, #32]	; (8041d5c <SPIx_Read+0x3c>)
 8041d3c:	f005 fc7e 	bl	804763c <HAL_SPI_Receive>
 8041d40:	4603      	mov	r3, r0
 8041d42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8041d44:	7bfb      	ldrb	r3, [r7, #15]
 8041d46:	2b00      	cmp	r3, #0
 8041d48:	d001      	beq.n	8041d4e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8041d4a:	f000 f827 	bl	8041d9c <SPIx_Error>
  }
  
  return readvalue;
 8041d4e:	68bb      	ldr	r3, [r7, #8]
}
 8041d50:	4618      	mov	r0, r3
 8041d52:	3710      	adds	r7, #16
 8041d54:	46bd      	mov	sp, r7
 8041d56:	bd80      	pop	{r7, pc}
 8041d58:	2000003c 	.word	0x2000003c
 8041d5c:	20000410 	.word	0x20000410

08041d60 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8041d60:	b580      	push	{r7, lr}
 8041d62:	b084      	sub	sp, #16
 8041d64:	af00      	add	r7, sp, #0
 8041d66:	4603      	mov	r3, r0
 8041d68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8041d6a:	2300      	movs	r3, #0
 8041d6c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8041d6e:	4b09      	ldr	r3, [pc, #36]	; (8041d94 <SPIx_Write+0x34>)
 8041d70:	681b      	ldr	r3, [r3, #0]
 8041d72:	1db9      	adds	r1, r7, #6
 8041d74:	2201      	movs	r2, #1
 8041d76:	4808      	ldr	r0, [pc, #32]	; (8041d98 <SPIx_Write+0x38>)
 8041d78:	f005 fb24 	bl	80473c4 <HAL_SPI_Transmit>
 8041d7c:	4603      	mov	r3, r0
 8041d7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8041d80:	7bfb      	ldrb	r3, [r7, #15]
 8041d82:	2b00      	cmp	r3, #0
 8041d84:	d001      	beq.n	8041d8a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8041d86:	f000 f809 	bl	8041d9c <SPIx_Error>
  }
}
 8041d8a:	bf00      	nop
 8041d8c:	3710      	adds	r7, #16
 8041d8e:	46bd      	mov	sp, r7
 8041d90:	bd80      	pop	{r7, pc}
 8041d92:	bf00      	nop
 8041d94:	2000003c 	.word	0x2000003c
 8041d98:	20000410 	.word	0x20000410

08041d9c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8041d9c:	b580      	push	{r7, lr}
 8041d9e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8041da0:	4803      	ldr	r0, [pc, #12]	; (8041db0 <SPIx_Error+0x14>)
 8041da2:	f005 fae7 	bl	8047374 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8041da6:	f7ff ff81 	bl	8041cac <SPIx_Init>
}
 8041daa:	bf00      	nop
 8041dac:	bd80      	pop	{r7, pc}
 8041dae:	bf00      	nop
 8041db0:	20000410 	.word	0x20000410

08041db4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8041db4:	b580      	push	{r7, lr}
 8041db6:	b08a      	sub	sp, #40	; 0x28
 8041db8:	af00      	add	r7, sp, #0
 8041dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8041dbc:	2300      	movs	r3, #0
 8041dbe:	613b      	str	r3, [r7, #16]
 8041dc0:	4b17      	ldr	r3, [pc, #92]	; (8041e20 <SPIx_MspInit+0x6c>)
 8041dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041dc4:	4a16      	ldr	r2, [pc, #88]	; (8041e20 <SPIx_MspInit+0x6c>)
 8041dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041dca:	6453      	str	r3, [r2, #68]	; 0x44
 8041dcc:	4b14      	ldr	r3, [pc, #80]	; (8041e20 <SPIx_MspInit+0x6c>)
 8041dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041dd4:	613b      	str	r3, [r7, #16]
 8041dd6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8041dd8:	2300      	movs	r3, #0
 8041dda:	60fb      	str	r3, [r7, #12]
 8041ddc:	4b10      	ldr	r3, [pc, #64]	; (8041e20 <SPIx_MspInit+0x6c>)
 8041dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041de0:	4a0f      	ldr	r2, [pc, #60]	; (8041e20 <SPIx_MspInit+0x6c>)
 8041de2:	f043 0320 	orr.w	r3, r3, #32
 8041de6:	6313      	str	r3, [r2, #48]	; 0x30
 8041de8:	4b0d      	ldr	r3, [pc, #52]	; (8041e20 <SPIx_MspInit+0x6c>)
 8041dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041dec:	f003 0320 	and.w	r3, r3, #32
 8041df0:	60fb      	str	r3, [r7, #12]
 8041df2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8041df4:	f44f 7360 	mov.w	r3, #896	; 0x380
 8041df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8041dfa:	2302      	movs	r3, #2
 8041dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8041dfe:	2302      	movs	r3, #2
 8041e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8041e02:	2301      	movs	r3, #1
 8041e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8041e06:	2305      	movs	r3, #5
 8041e08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8041e0a:	f107 0314 	add.w	r3, r7, #20
 8041e0e:	4619      	mov	r1, r3
 8041e10:	4804      	ldr	r0, [pc, #16]	; (8041e24 <SPIx_MspInit+0x70>)
 8041e12:	f001 fe47 	bl	8043aa4 <HAL_GPIO_Init>
}
 8041e16:	bf00      	nop
 8041e18:	3728      	adds	r7, #40	; 0x28
 8041e1a:	46bd      	mov	sp, r7
 8041e1c:	bd80      	pop	{r7, pc}
 8041e1e:	bf00      	nop
 8041e20:	40023800 	.word	0x40023800
 8041e24:	40021400 	.word	0x40021400

08041e28 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8041e28:	b580      	push	{r7, lr}
 8041e2a:	b088      	sub	sp, #32
 8041e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8041e2e:	4b36      	ldr	r3, [pc, #216]	; (8041f08 <LCD_IO_Init+0xe0>)
 8041e30:	781b      	ldrb	r3, [r3, #0]
 8041e32:	2b00      	cmp	r3, #0
 8041e34:	d164      	bne.n	8041f00 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8041e36:	4b34      	ldr	r3, [pc, #208]	; (8041f08 <LCD_IO_Init+0xe0>)
 8041e38:	2201      	movs	r2, #1
 8041e3a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8041e3c:	2300      	movs	r3, #0
 8041e3e:	60bb      	str	r3, [r7, #8]
 8041e40:	4b32      	ldr	r3, [pc, #200]	; (8041f0c <LCD_IO_Init+0xe4>)
 8041e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041e44:	4a31      	ldr	r2, [pc, #196]	; (8041f0c <LCD_IO_Init+0xe4>)
 8041e46:	f043 0308 	orr.w	r3, r3, #8
 8041e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8041e4c:	4b2f      	ldr	r3, [pc, #188]	; (8041f0c <LCD_IO_Init+0xe4>)
 8041e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041e50:	f003 0308 	and.w	r3, r3, #8
 8041e54:	60bb      	str	r3, [r7, #8]
 8041e56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8041e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8041e5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8041e5e:	2301      	movs	r3, #1
 8041e60:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8041e62:	2300      	movs	r3, #0
 8041e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8041e66:	2302      	movs	r3, #2
 8041e68:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8041e6a:	f107 030c 	add.w	r3, r7, #12
 8041e6e:	4619      	mov	r1, r3
 8041e70:	4827      	ldr	r0, [pc, #156]	; (8041f10 <LCD_IO_Init+0xe8>)
 8041e72:	f001 fe17 	bl	8043aa4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8041e76:	2300      	movs	r3, #0
 8041e78:	607b      	str	r3, [r7, #4]
 8041e7a:	4b24      	ldr	r3, [pc, #144]	; (8041f0c <LCD_IO_Init+0xe4>)
 8041e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041e7e:	4a23      	ldr	r2, [pc, #140]	; (8041f0c <LCD_IO_Init+0xe4>)
 8041e80:	f043 0308 	orr.w	r3, r3, #8
 8041e84:	6313      	str	r3, [r2, #48]	; 0x30
 8041e86:	4b21      	ldr	r3, [pc, #132]	; (8041f0c <LCD_IO_Init+0xe4>)
 8041e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041e8a:	f003 0308 	and.w	r3, r3, #8
 8041e8e:	607b      	str	r3, [r7, #4]
 8041e90:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8041e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8041e96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8041e98:	2301      	movs	r3, #1
 8041e9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8041e9c:	2300      	movs	r3, #0
 8041e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8041ea0:	2302      	movs	r3, #2
 8041ea2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8041ea4:	f107 030c 	add.w	r3, r7, #12
 8041ea8:	4619      	mov	r1, r3
 8041eaa:	4819      	ldr	r0, [pc, #100]	; (8041f10 <LCD_IO_Init+0xe8>)
 8041eac:	f001 fdfa 	bl	8043aa4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8041eb0:	2300      	movs	r3, #0
 8041eb2:	603b      	str	r3, [r7, #0]
 8041eb4:	4b15      	ldr	r3, [pc, #84]	; (8041f0c <LCD_IO_Init+0xe4>)
 8041eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041eb8:	4a14      	ldr	r2, [pc, #80]	; (8041f0c <LCD_IO_Init+0xe4>)
 8041eba:	f043 0304 	orr.w	r3, r3, #4
 8041ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8041ec0:	4b12      	ldr	r3, [pc, #72]	; (8041f0c <LCD_IO_Init+0xe4>)
 8041ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041ec4:	f003 0304 	and.w	r3, r3, #4
 8041ec8:	603b      	str	r3, [r7, #0]
 8041eca:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8041ecc:	2304      	movs	r3, #4
 8041ece:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8041ed0:	2301      	movs	r3, #1
 8041ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8041ed4:	2300      	movs	r3, #0
 8041ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8041ed8:	2302      	movs	r3, #2
 8041eda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8041edc:	f107 030c 	add.w	r3, r7, #12
 8041ee0:	4619      	mov	r1, r3
 8041ee2:	480c      	ldr	r0, [pc, #48]	; (8041f14 <LCD_IO_Init+0xec>)
 8041ee4:	f001 fdde 	bl	8043aa4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8041ee8:	2200      	movs	r2, #0
 8041eea:	2104      	movs	r1, #4
 8041eec:	4809      	ldr	r0, [pc, #36]	; (8041f14 <LCD_IO_Init+0xec>)
 8041eee:	f002 f891 	bl	8044014 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8041ef2:	2201      	movs	r2, #1
 8041ef4:	2104      	movs	r1, #4
 8041ef6:	4807      	ldr	r0, [pc, #28]	; (8041f14 <LCD_IO_Init+0xec>)
 8041ef8:	f002 f88c 	bl	8044014 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8041efc:	f7ff fed6 	bl	8041cac <SPIx_Init>
  }
}
 8041f00:	bf00      	nop
 8041f02:	3720      	adds	r7, #32
 8041f04:	46bd      	mov	sp, r7
 8041f06:	bd80      	pop	{r7, pc}
 8041f08:	20000468 	.word	0x20000468
 8041f0c:	40023800 	.word	0x40023800
 8041f10:	40020c00 	.word	0x40020c00
 8041f14:	40020800 	.word	0x40020800

08041f18 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8041f18:	b580      	push	{r7, lr}
 8041f1a:	b082      	sub	sp, #8
 8041f1c:	af00      	add	r7, sp, #0
 8041f1e:	4603      	mov	r3, r0
 8041f20:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8041f22:	2201      	movs	r2, #1
 8041f24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8041f28:	480a      	ldr	r0, [pc, #40]	; (8041f54 <LCD_IO_WriteData+0x3c>)
 8041f2a:	f002 f873 	bl	8044014 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8041f2e:	2200      	movs	r2, #0
 8041f30:	2104      	movs	r1, #4
 8041f32:	4809      	ldr	r0, [pc, #36]	; (8041f58 <LCD_IO_WriteData+0x40>)
 8041f34:	f002 f86e 	bl	8044014 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8041f38:	88fb      	ldrh	r3, [r7, #6]
 8041f3a:	4618      	mov	r0, r3
 8041f3c:	f7ff ff10 	bl	8041d60 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8041f40:	2201      	movs	r2, #1
 8041f42:	2104      	movs	r1, #4
 8041f44:	4804      	ldr	r0, [pc, #16]	; (8041f58 <LCD_IO_WriteData+0x40>)
 8041f46:	f002 f865 	bl	8044014 <HAL_GPIO_WritePin>
}
 8041f4a:	bf00      	nop
 8041f4c:	3708      	adds	r7, #8
 8041f4e:	46bd      	mov	sp, r7
 8041f50:	bd80      	pop	{r7, pc}
 8041f52:	bf00      	nop
 8041f54:	40020c00 	.word	0x40020c00
 8041f58:	40020800 	.word	0x40020800

08041f5c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8041f5c:	b580      	push	{r7, lr}
 8041f5e:	b082      	sub	sp, #8
 8041f60:	af00      	add	r7, sp, #0
 8041f62:	4603      	mov	r3, r0
 8041f64:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8041f66:	2200      	movs	r2, #0
 8041f68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8041f6c:	480a      	ldr	r0, [pc, #40]	; (8041f98 <LCD_IO_WriteReg+0x3c>)
 8041f6e:	f002 f851 	bl	8044014 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8041f72:	2200      	movs	r2, #0
 8041f74:	2104      	movs	r1, #4
 8041f76:	4809      	ldr	r0, [pc, #36]	; (8041f9c <LCD_IO_WriteReg+0x40>)
 8041f78:	f002 f84c 	bl	8044014 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8041f7c:	79fb      	ldrb	r3, [r7, #7]
 8041f7e:	b29b      	uxth	r3, r3
 8041f80:	4618      	mov	r0, r3
 8041f82:	f7ff feed 	bl	8041d60 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8041f86:	2201      	movs	r2, #1
 8041f88:	2104      	movs	r1, #4
 8041f8a:	4804      	ldr	r0, [pc, #16]	; (8041f9c <LCD_IO_WriteReg+0x40>)
 8041f8c:	f002 f842 	bl	8044014 <HAL_GPIO_WritePin>
}
 8041f90:	bf00      	nop
 8041f92:	3708      	adds	r7, #8
 8041f94:	46bd      	mov	sp, r7
 8041f96:	bd80      	pop	{r7, pc}
 8041f98:	40020c00 	.word	0x40020c00
 8041f9c:	40020800 	.word	0x40020800

08041fa0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8041fa0:	b580      	push	{r7, lr}
 8041fa2:	b084      	sub	sp, #16
 8041fa4:	af00      	add	r7, sp, #0
 8041fa6:	4603      	mov	r3, r0
 8041fa8:	460a      	mov	r2, r1
 8041faa:	80fb      	strh	r3, [r7, #6]
 8041fac:	4613      	mov	r3, r2
 8041fae:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8041fb0:	2300      	movs	r3, #0
 8041fb2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8041fb4:	2200      	movs	r2, #0
 8041fb6:	2104      	movs	r1, #4
 8041fb8:	4810      	ldr	r0, [pc, #64]	; (8041ffc <LCD_IO_ReadData+0x5c>)
 8041fba:	f002 f82b 	bl	8044014 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8041fbe:	2200      	movs	r2, #0
 8041fc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8041fc4:	480e      	ldr	r0, [pc, #56]	; (8042000 <LCD_IO_ReadData+0x60>)
 8041fc6:	f002 f825 	bl	8044014 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8041fca:	88fb      	ldrh	r3, [r7, #6]
 8041fcc:	4618      	mov	r0, r3
 8041fce:	f7ff fec7 	bl	8041d60 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8041fd2:	797b      	ldrb	r3, [r7, #5]
 8041fd4:	4618      	mov	r0, r3
 8041fd6:	f7ff fea3 	bl	8041d20 <SPIx_Read>
 8041fda:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8041fdc:	2201      	movs	r2, #1
 8041fde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8041fe2:	4807      	ldr	r0, [pc, #28]	; (8042000 <LCD_IO_ReadData+0x60>)
 8041fe4:	f002 f816 	bl	8044014 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8041fe8:	2201      	movs	r2, #1
 8041fea:	2104      	movs	r1, #4
 8041fec:	4803      	ldr	r0, [pc, #12]	; (8041ffc <LCD_IO_ReadData+0x5c>)
 8041fee:	f002 f811 	bl	8044014 <HAL_GPIO_WritePin>
  
  return readvalue;
 8041ff2:	68fb      	ldr	r3, [r7, #12]
}
 8041ff4:	4618      	mov	r0, r3
 8041ff6:	3710      	adds	r7, #16
 8041ff8:	46bd      	mov	sp, r7
 8041ffa:	bd80      	pop	{r7, pc}
 8041ffc:	40020800 	.word	0x40020800
 8042000:	40020c00 	.word	0x40020c00

08042004 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8042004:	b580      	push	{r7, lr}
 8042006:	b082      	sub	sp, #8
 8042008:	af00      	add	r7, sp, #0
 804200a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 804200c:	6878      	ldr	r0, [r7, #4]
 804200e:	f000 fecd 	bl	8042dac <HAL_Delay>
}
 8042012:	bf00      	nop
 8042014:	3708      	adds	r7, #8
 8042016:	46bd      	mov	sp, r7
 8042018:	bd80      	pop	{r7, pc}
	...

0804201c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 804201c:	b580      	push	{r7, lr}
 804201e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8042020:	4b2d      	ldr	r3, [pc, #180]	; (80420d8 <BSP_LCD_Init+0xbc>)
 8042022:	4a2e      	ldr	r2, [pc, #184]	; (80420dc <BSP_LCD_Init+0xc0>)
 8042024:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8042026:	4b2c      	ldr	r3, [pc, #176]	; (80420d8 <BSP_LCD_Init+0xbc>)
 8042028:	2209      	movs	r2, #9
 804202a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 804202c:	4b2a      	ldr	r3, [pc, #168]	; (80420d8 <BSP_LCD_Init+0xbc>)
 804202e:	2201      	movs	r2, #1
 8042030:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8042032:	4b29      	ldr	r3, [pc, #164]	; (80420d8 <BSP_LCD_Init+0xbc>)
 8042034:	221d      	movs	r2, #29
 8042036:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8042038:	4b27      	ldr	r3, [pc, #156]	; (80420d8 <BSP_LCD_Init+0xbc>)
 804203a:	2203      	movs	r2, #3
 804203c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 804203e:	4b26      	ldr	r3, [pc, #152]	; (80420d8 <BSP_LCD_Init+0xbc>)
 8042040:	f240 120d 	movw	r2, #269	; 0x10d
 8042044:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8042046:	4b24      	ldr	r3, [pc, #144]	; (80420d8 <BSP_LCD_Init+0xbc>)
 8042048:	f240 1243 	movw	r2, #323	; 0x143
 804204c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 804204e:	4b22      	ldr	r3, [pc, #136]	; (80420d8 <BSP_LCD_Init+0xbc>)
 8042050:	f240 1217 	movw	r2, #279	; 0x117
 8042054:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8042056:	4b20      	ldr	r3, [pc, #128]	; (80420d8 <BSP_LCD_Init+0xbc>)
 8042058:	f240 1247 	movw	r2, #327	; 0x147
 804205c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 804205e:	4b1e      	ldr	r3, [pc, #120]	; (80420d8 <BSP_LCD_Init+0xbc>)
 8042060:	2200      	movs	r2, #0
 8042062:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8042066:	4b1c      	ldr	r3, [pc, #112]	; (80420d8 <BSP_LCD_Init+0xbc>)
 8042068:	2200      	movs	r2, #0
 804206a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 804206e:	4b1a      	ldr	r3, [pc, #104]	; (80420d8 <BSP_LCD_Init+0xbc>)
 8042070:	2200      	movs	r2, #0
 8042072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8042076:	4b1a      	ldr	r3, [pc, #104]	; (80420e0 <BSP_LCD_Init+0xc4>)
 8042078:	2208      	movs	r2, #8
 804207a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 804207c:	4b18      	ldr	r3, [pc, #96]	; (80420e0 <BSP_LCD_Init+0xc4>)
 804207e:	22c0      	movs	r2, #192	; 0xc0
 8042080:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8042082:	4b17      	ldr	r3, [pc, #92]	; (80420e0 <BSP_LCD_Init+0xc4>)
 8042084:	2204      	movs	r2, #4
 8042086:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8042088:	4b15      	ldr	r3, [pc, #84]	; (80420e0 <BSP_LCD_Init+0xc4>)
 804208a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 804208e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8042090:	4813      	ldr	r0, [pc, #76]	; (80420e0 <BSP_LCD_Init+0xc4>)
 8042092:	f004 fe95 	bl	8046dc0 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8042096:	4b10      	ldr	r3, [pc, #64]	; (80420d8 <BSP_LCD_Init+0xbc>)
 8042098:	2200      	movs	r2, #0
 804209a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 804209c:	4b0e      	ldr	r3, [pc, #56]	; (80420d8 <BSP_LCD_Init+0xbc>)
 804209e:	2200      	movs	r2, #0
 80420a0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80420a2:	4b0d      	ldr	r3, [pc, #52]	; (80420d8 <BSP_LCD_Init+0xbc>)
 80420a4:	2200      	movs	r2, #0
 80420a6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80420a8:	4b0b      	ldr	r3, [pc, #44]	; (80420d8 <BSP_LCD_Init+0xbc>)
 80420aa:	2200      	movs	r2, #0
 80420ac:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80420ae:	f000 fa83 	bl	80425b8 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80420b2:	4809      	ldr	r0, [pc, #36]	; (80420d8 <BSP_LCD_Init+0xbc>)
 80420b4:	f003 fdaa 	bl	8045c0c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80420b8:	4b0a      	ldr	r3, [pc, #40]	; (80420e4 <BSP_LCD_Init+0xc8>)
 80420ba:	4a0b      	ldr	r2, [pc, #44]	; (80420e8 <BSP_LCD_Init+0xcc>)
 80420bc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80420be:	4b09      	ldr	r3, [pc, #36]	; (80420e4 <BSP_LCD_Init+0xc8>)
 80420c0:	681b      	ldr	r3, [r3, #0]
 80420c2:	681b      	ldr	r3, [r3, #0]
 80420c4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80420c6:	f000 fc65 	bl	8042994 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80420ca:	4808      	ldr	r0, [pc, #32]	; (80420ec <BSP_LCD_Init+0xd0>)
 80420cc:	f000 f920 	bl	8042310 <BSP_LCD_SetFont>

  return LCD_OK;
 80420d0:	2300      	movs	r3, #0
}  
 80420d2:	4618      	mov	r0, r3
 80420d4:	bd80      	pop	{r7, pc}
 80420d6:	bf00      	nop
 80420d8:	2000046c 	.word	0x2000046c
 80420dc:	40016800 	.word	0x40016800
 80420e0:	20000554 	.word	0x20000554
 80420e4:	200005a0 	.word	0x200005a0
 80420e8:	20000004 	.word	0x20000004
 80420ec:	20000040 	.word	0x20000040

080420f0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80420f0:	b580      	push	{r7, lr}
 80420f2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80420f4:	4b03      	ldr	r3, [pc, #12]	; (8042104 <BSP_LCD_GetXSize+0x14>)
 80420f6:	681b      	ldr	r3, [r3, #0]
 80420f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80420fa:	4798      	blx	r3
 80420fc:	4603      	mov	r3, r0
}
 80420fe:	4618      	mov	r0, r3
 8042100:	bd80      	pop	{r7, pc}
 8042102:	bf00      	nop
 8042104:	200005a0 	.word	0x200005a0

08042108 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8042108:	b580      	push	{r7, lr}
 804210a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 804210c:	4b03      	ldr	r3, [pc, #12]	; (804211c <BSP_LCD_GetYSize+0x14>)
 804210e:	681b      	ldr	r3, [r3, #0]
 8042110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042112:	4798      	blx	r3
 8042114:	4603      	mov	r3, r0
}
 8042116:	4618      	mov	r0, r3
 8042118:	bd80      	pop	{r7, pc}
 804211a:	bf00      	nop
 804211c:	200005a0 	.word	0x200005a0

08042120 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8042120:	b580      	push	{r7, lr}
 8042122:	b090      	sub	sp, #64	; 0x40
 8042124:	af00      	add	r7, sp, #0
 8042126:	4603      	mov	r3, r0
 8042128:	6039      	str	r1, [r7, #0]
 804212a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 804212c:	2300      	movs	r3, #0
 804212e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8042130:	f7ff ffde 	bl	80420f0 <BSP_LCD_GetXSize>
 8042134:	4603      	mov	r3, r0
 8042136:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8042138:	2300      	movs	r3, #0
 804213a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 804213c:	f7ff ffe4 	bl	8042108 <BSP_LCD_GetYSize>
 8042140:	4603      	mov	r3, r0
 8042142:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8042144:	2300      	movs	r3, #0
 8042146:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8042148:	683b      	ldr	r3, [r7, #0]
 804214a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 804214c:	23ff      	movs	r3, #255	; 0xff
 804214e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8042150:	2300      	movs	r3, #0
 8042152:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8042154:	2300      	movs	r3, #0
 8042156:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 804215a:	2300      	movs	r3, #0
 804215c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8042160:	2300      	movs	r3, #0
 8042162:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8042166:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 804216a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 804216c:	2307      	movs	r3, #7
 804216e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8042170:	f7ff ffbe 	bl	80420f0 <BSP_LCD_GetXSize>
 8042174:	4603      	mov	r3, r0
 8042176:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8042178:	f7ff ffc6 	bl	8042108 <BSP_LCD_GetYSize>
 804217c:	4603      	mov	r3, r0
 804217e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8042180:	88fa      	ldrh	r2, [r7, #6]
 8042182:	f107 030c 	add.w	r3, r7, #12
 8042186:	4619      	mov	r1, r3
 8042188:	4814      	ldr	r0, [pc, #80]	; (80421dc <BSP_LCD_LayerDefaultInit+0xbc>)
 804218a:	f003 fed1 	bl	8045f30 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 804218e:	88fa      	ldrh	r2, [r7, #6]
 8042190:	4913      	ldr	r1, [pc, #76]	; (80421e0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8042192:	4613      	mov	r3, r2
 8042194:	005b      	lsls	r3, r3, #1
 8042196:	4413      	add	r3, r2
 8042198:	009b      	lsls	r3, r3, #2
 804219a:	440b      	add	r3, r1
 804219c:	3304      	adds	r3, #4
 804219e:	f04f 32ff 	mov.w	r2, #4294967295
 80421a2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80421a4:	88fa      	ldrh	r2, [r7, #6]
 80421a6:	490e      	ldr	r1, [pc, #56]	; (80421e0 <BSP_LCD_LayerDefaultInit+0xc0>)
 80421a8:	4613      	mov	r3, r2
 80421aa:	005b      	lsls	r3, r3, #1
 80421ac:	4413      	add	r3, r2
 80421ae:	009b      	lsls	r3, r3, #2
 80421b0:	440b      	add	r3, r1
 80421b2:	3308      	adds	r3, #8
 80421b4:	4a0b      	ldr	r2, [pc, #44]	; (80421e4 <BSP_LCD_LayerDefaultInit+0xc4>)
 80421b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80421b8:	88fa      	ldrh	r2, [r7, #6]
 80421ba:	4909      	ldr	r1, [pc, #36]	; (80421e0 <BSP_LCD_LayerDefaultInit+0xc0>)
 80421bc:	4613      	mov	r3, r2
 80421be:	005b      	lsls	r3, r3, #1
 80421c0:	4413      	add	r3, r2
 80421c2:	009b      	lsls	r3, r3, #2
 80421c4:	440b      	add	r3, r1
 80421c6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80421ca:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80421cc:	4803      	ldr	r0, [pc, #12]	; (80421dc <BSP_LCD_LayerDefaultInit+0xbc>)
 80421ce:	f003 ff6b 	bl	80460a8 <HAL_LTDC_EnableDither>
}
 80421d2:	bf00      	nop
 80421d4:	3740      	adds	r7, #64	; 0x40
 80421d6:	46bd      	mov	sp, r7
 80421d8:	bd80      	pop	{r7, pc}
 80421da:	bf00      	nop
 80421dc:	2000046c 	.word	0x2000046c
 80421e0:	20000588 	.word	0x20000588
 80421e4:	20000040 	.word	0x20000040

080421e8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80421e8:	b480      	push	{r7}
 80421ea:	b083      	sub	sp, #12
 80421ec:	af00      	add	r7, sp, #0
 80421ee:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80421f0:	4a04      	ldr	r2, [pc, #16]	; (8042204 <BSP_LCD_SelectLayer+0x1c>)
 80421f2:	687b      	ldr	r3, [r7, #4]
 80421f4:	6013      	str	r3, [r2, #0]
}
 80421f6:	bf00      	nop
 80421f8:	370c      	adds	r7, #12
 80421fa:	46bd      	mov	sp, r7
 80421fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042200:	4770      	bx	lr
 8042202:	bf00      	nop
 8042204:	20000584 	.word	0x20000584

08042208 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8042208:	b480      	push	{r7}
 804220a:	b083      	sub	sp, #12
 804220c:	af00      	add	r7, sp, #0
 804220e:	6078      	str	r0, [r7, #4]
 8042210:	460b      	mov	r3, r1
 8042212:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8042214:	78fb      	ldrb	r3, [r7, #3]
 8042216:	2b01      	cmp	r3, #1
 8042218:	d112      	bne.n	8042240 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 804221a:	4b19      	ldr	r3, [pc, #100]	; (8042280 <BSP_LCD_SetLayerVisible+0x78>)
 804221c:	681b      	ldr	r3, [r3, #0]
 804221e:	461a      	mov	r2, r3
 8042220:	687b      	ldr	r3, [r7, #4]
 8042222:	01db      	lsls	r3, r3, #7
 8042224:	4413      	add	r3, r2
 8042226:	3384      	adds	r3, #132	; 0x84
 8042228:	681b      	ldr	r3, [r3, #0]
 804222a:	4a15      	ldr	r2, [pc, #84]	; (8042280 <BSP_LCD_SetLayerVisible+0x78>)
 804222c:	6812      	ldr	r2, [r2, #0]
 804222e:	4611      	mov	r1, r2
 8042230:	687a      	ldr	r2, [r7, #4]
 8042232:	01d2      	lsls	r2, r2, #7
 8042234:	440a      	add	r2, r1
 8042236:	3284      	adds	r2, #132	; 0x84
 8042238:	f043 0301 	orr.w	r3, r3, #1
 804223c:	6013      	str	r3, [r2, #0]
 804223e:	e011      	b.n	8042264 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8042240:	4b0f      	ldr	r3, [pc, #60]	; (8042280 <BSP_LCD_SetLayerVisible+0x78>)
 8042242:	681b      	ldr	r3, [r3, #0]
 8042244:	461a      	mov	r2, r3
 8042246:	687b      	ldr	r3, [r7, #4]
 8042248:	01db      	lsls	r3, r3, #7
 804224a:	4413      	add	r3, r2
 804224c:	3384      	adds	r3, #132	; 0x84
 804224e:	681b      	ldr	r3, [r3, #0]
 8042250:	4a0b      	ldr	r2, [pc, #44]	; (8042280 <BSP_LCD_SetLayerVisible+0x78>)
 8042252:	6812      	ldr	r2, [r2, #0]
 8042254:	4611      	mov	r1, r2
 8042256:	687a      	ldr	r2, [r7, #4]
 8042258:	01d2      	lsls	r2, r2, #7
 804225a:	440a      	add	r2, r1
 804225c:	3284      	adds	r2, #132	; 0x84
 804225e:	f023 0301 	bic.w	r3, r3, #1
 8042262:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8042264:	4b06      	ldr	r3, [pc, #24]	; (8042280 <BSP_LCD_SetLayerVisible+0x78>)
 8042266:	681b      	ldr	r3, [r3, #0]
 8042268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804226a:	4b05      	ldr	r3, [pc, #20]	; (8042280 <BSP_LCD_SetLayerVisible+0x78>)
 804226c:	681b      	ldr	r3, [r3, #0]
 804226e:	f042 0201 	orr.w	r2, r2, #1
 8042272:	625a      	str	r2, [r3, #36]	; 0x24
}
 8042274:	bf00      	nop
 8042276:	370c      	adds	r7, #12
 8042278:	46bd      	mov	sp, r7
 804227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804227e:	4770      	bx	lr
 8042280:	2000046c 	.word	0x2000046c

08042284 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8042284:	b580      	push	{r7, lr}
 8042286:	b082      	sub	sp, #8
 8042288:	af00      	add	r7, sp, #0
 804228a:	6078      	str	r0, [r7, #4]
 804228c:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 804228e:	687a      	ldr	r2, [r7, #4]
 8042290:	6839      	ldr	r1, [r7, #0]
 8042292:	4805      	ldr	r0, [pc, #20]	; (80422a8 <BSP_LCD_SetColorKeying+0x24>)
 8042294:	f003 fe8a 	bl	8045fac <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8042298:	6879      	ldr	r1, [r7, #4]
 804229a:	4803      	ldr	r0, [pc, #12]	; (80422a8 <BSP_LCD_SetColorKeying+0x24>)
 804229c:	f003 feca 	bl	8046034 <HAL_LTDC_EnableColorKeying>
}
 80422a0:	bf00      	nop
 80422a2:	3708      	adds	r7, #8
 80422a4:	46bd      	mov	sp, r7
 80422a6:	bd80      	pop	{r7, pc}
 80422a8:	2000046c 	.word	0x2000046c

080422ac <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80422ac:	b480      	push	{r7}
 80422ae:	b083      	sub	sp, #12
 80422b0:	af00      	add	r7, sp, #0
 80422b2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80422b4:	4b07      	ldr	r3, [pc, #28]	; (80422d4 <BSP_LCD_SetTextColor+0x28>)
 80422b6:	681a      	ldr	r2, [r3, #0]
 80422b8:	4907      	ldr	r1, [pc, #28]	; (80422d8 <BSP_LCD_SetTextColor+0x2c>)
 80422ba:	4613      	mov	r3, r2
 80422bc:	005b      	lsls	r3, r3, #1
 80422be:	4413      	add	r3, r2
 80422c0:	009b      	lsls	r3, r3, #2
 80422c2:	440b      	add	r3, r1
 80422c4:	687a      	ldr	r2, [r7, #4]
 80422c6:	601a      	str	r2, [r3, #0]
}
 80422c8:	bf00      	nop
 80422ca:	370c      	adds	r7, #12
 80422cc:	46bd      	mov	sp, r7
 80422ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422d2:	4770      	bx	lr
 80422d4:	20000584 	.word	0x20000584
 80422d8:	20000588 	.word	0x20000588

080422dc <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80422dc:	b480      	push	{r7}
 80422de:	b083      	sub	sp, #12
 80422e0:	af00      	add	r7, sp, #0
 80422e2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80422e4:	4b08      	ldr	r3, [pc, #32]	; (8042308 <BSP_LCD_SetBackColor+0x2c>)
 80422e6:	681a      	ldr	r2, [r3, #0]
 80422e8:	4908      	ldr	r1, [pc, #32]	; (804230c <BSP_LCD_SetBackColor+0x30>)
 80422ea:	4613      	mov	r3, r2
 80422ec:	005b      	lsls	r3, r3, #1
 80422ee:	4413      	add	r3, r2
 80422f0:	009b      	lsls	r3, r3, #2
 80422f2:	440b      	add	r3, r1
 80422f4:	3304      	adds	r3, #4
 80422f6:	687a      	ldr	r2, [r7, #4]
 80422f8:	601a      	str	r2, [r3, #0]
}
 80422fa:	bf00      	nop
 80422fc:	370c      	adds	r7, #12
 80422fe:	46bd      	mov	sp, r7
 8042300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042304:	4770      	bx	lr
 8042306:	bf00      	nop
 8042308:	20000584 	.word	0x20000584
 804230c:	20000588 	.word	0x20000588

08042310 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8042310:	b480      	push	{r7}
 8042312:	b083      	sub	sp, #12
 8042314:	af00      	add	r7, sp, #0
 8042316:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8042318:	4b08      	ldr	r3, [pc, #32]	; (804233c <BSP_LCD_SetFont+0x2c>)
 804231a:	681a      	ldr	r2, [r3, #0]
 804231c:	4908      	ldr	r1, [pc, #32]	; (8042340 <BSP_LCD_SetFont+0x30>)
 804231e:	4613      	mov	r3, r2
 8042320:	005b      	lsls	r3, r3, #1
 8042322:	4413      	add	r3, r2
 8042324:	009b      	lsls	r3, r3, #2
 8042326:	440b      	add	r3, r1
 8042328:	3308      	adds	r3, #8
 804232a:	687a      	ldr	r2, [r7, #4]
 804232c:	601a      	str	r2, [r3, #0]
}
 804232e:	bf00      	nop
 8042330:	370c      	adds	r7, #12
 8042332:	46bd      	mov	sp, r7
 8042334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042338:	4770      	bx	lr
 804233a:	bf00      	nop
 804233c:	20000584 	.word	0x20000584
 8042340:	20000588 	.word	0x20000588

08042344 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8042344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8042346:	b085      	sub	sp, #20
 8042348:	af02      	add	r7, sp, #8
 804234a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 804234c:	4b0f      	ldr	r3, [pc, #60]	; (804238c <BSP_LCD_Clear+0x48>)
 804234e:	681c      	ldr	r4, [r3, #0]
 8042350:	4b0e      	ldr	r3, [pc, #56]	; (804238c <BSP_LCD_Clear+0x48>)
 8042352:	681b      	ldr	r3, [r3, #0]
 8042354:	4a0e      	ldr	r2, [pc, #56]	; (8042390 <BSP_LCD_Clear+0x4c>)
 8042356:	2134      	movs	r1, #52	; 0x34
 8042358:	fb01 f303 	mul.w	r3, r1, r3
 804235c:	4413      	add	r3, r2
 804235e:	335c      	adds	r3, #92	; 0x5c
 8042360:	681b      	ldr	r3, [r3, #0]
 8042362:	461e      	mov	r6, r3
 8042364:	f7ff fec4 	bl	80420f0 <BSP_LCD_GetXSize>
 8042368:	4605      	mov	r5, r0
 804236a:	f7ff fecd 	bl	8042108 <BSP_LCD_GetYSize>
 804236e:	4602      	mov	r2, r0
 8042370:	687b      	ldr	r3, [r7, #4]
 8042372:	9301      	str	r3, [sp, #4]
 8042374:	2300      	movs	r3, #0
 8042376:	9300      	str	r3, [sp, #0]
 8042378:	4613      	mov	r3, r2
 804237a:	462a      	mov	r2, r5
 804237c:	4631      	mov	r1, r6
 804237e:	4620      	mov	r0, r4
 8042380:	f000 fad0 	bl	8042924 <FillBuffer>
}
 8042384:	bf00      	nop
 8042386:	370c      	adds	r7, #12
 8042388:	46bd      	mov	sp, r7
 804238a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804238c:	20000584 	.word	0x20000584
 8042390:	2000046c 	.word	0x2000046c

08042394 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8042394:	b590      	push	{r4, r7, lr}
 8042396:	b083      	sub	sp, #12
 8042398:	af00      	add	r7, sp, #0
 804239a:	4603      	mov	r3, r0
 804239c:	80fb      	strh	r3, [r7, #6]
 804239e:	460b      	mov	r3, r1
 80423a0:	80bb      	strh	r3, [r7, #4]
 80423a2:	4613      	mov	r3, r2
 80423a4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80423a6:	4b1b      	ldr	r3, [pc, #108]	; (8042414 <BSP_LCD_DisplayChar+0x80>)
 80423a8:	681a      	ldr	r2, [r3, #0]
 80423aa:	491b      	ldr	r1, [pc, #108]	; (8042418 <BSP_LCD_DisplayChar+0x84>)
 80423ac:	4613      	mov	r3, r2
 80423ae:	005b      	lsls	r3, r3, #1
 80423b0:	4413      	add	r3, r2
 80423b2:	009b      	lsls	r3, r3, #2
 80423b4:	440b      	add	r3, r1
 80423b6:	3308      	adds	r3, #8
 80423b8:	681b      	ldr	r3, [r3, #0]
 80423ba:	6819      	ldr	r1, [r3, #0]
 80423bc:	78fb      	ldrb	r3, [r7, #3]
 80423be:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80423c2:	4b14      	ldr	r3, [pc, #80]	; (8042414 <BSP_LCD_DisplayChar+0x80>)
 80423c4:	681a      	ldr	r2, [r3, #0]
 80423c6:	4c14      	ldr	r4, [pc, #80]	; (8042418 <BSP_LCD_DisplayChar+0x84>)
 80423c8:	4613      	mov	r3, r2
 80423ca:	005b      	lsls	r3, r3, #1
 80423cc:	4413      	add	r3, r2
 80423ce:	009b      	lsls	r3, r3, #2
 80423d0:	4423      	add	r3, r4
 80423d2:	3308      	adds	r3, #8
 80423d4:	681b      	ldr	r3, [r3, #0]
 80423d6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80423d8:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80423dc:	4b0d      	ldr	r3, [pc, #52]	; (8042414 <BSP_LCD_DisplayChar+0x80>)
 80423de:	681a      	ldr	r2, [r3, #0]
 80423e0:	4c0d      	ldr	r4, [pc, #52]	; (8042418 <BSP_LCD_DisplayChar+0x84>)
 80423e2:	4613      	mov	r3, r2
 80423e4:	005b      	lsls	r3, r3, #1
 80423e6:	4413      	add	r3, r2
 80423e8:	009b      	lsls	r3, r3, #2
 80423ea:	4423      	add	r3, r4
 80423ec:	3308      	adds	r3, #8
 80423ee:	681b      	ldr	r3, [r3, #0]
 80423f0:	889b      	ldrh	r3, [r3, #4]
 80423f2:	3307      	adds	r3, #7
 80423f4:	2b00      	cmp	r3, #0
 80423f6:	da00      	bge.n	80423fa <BSP_LCD_DisplayChar+0x66>
 80423f8:	3307      	adds	r3, #7
 80423fa:	10db      	asrs	r3, r3, #3
 80423fc:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8042400:	18ca      	adds	r2, r1, r3
 8042402:	88b9      	ldrh	r1, [r7, #4]
 8042404:	88fb      	ldrh	r3, [r7, #6]
 8042406:	4618      	mov	r0, r3
 8042408:	f000 f9d2 	bl	80427b0 <DrawChar>
}
 804240c:	bf00      	nop
 804240e:	370c      	adds	r7, #12
 8042410:	46bd      	mov	sp, r7
 8042412:	bd90      	pop	{r4, r7, pc}
 8042414:	20000584 	.word	0x20000584
 8042418:	20000588 	.word	0x20000588

0804241c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 804241c:	b5b0      	push	{r4, r5, r7, lr}
 804241e:	b088      	sub	sp, #32
 8042420:	af00      	add	r7, sp, #0
 8042422:	60ba      	str	r2, [r7, #8]
 8042424:	461a      	mov	r2, r3
 8042426:	4603      	mov	r3, r0
 8042428:	81fb      	strh	r3, [r7, #14]
 804242a:	460b      	mov	r3, r1
 804242c:	81bb      	strh	r3, [r7, #12]
 804242e:	4613      	mov	r3, r2
 8042430:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8042432:	2301      	movs	r3, #1
 8042434:	83fb      	strh	r3, [r7, #30]
 8042436:	2300      	movs	r3, #0
 8042438:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 804243a:	2300      	movs	r3, #0
 804243c:	61bb      	str	r3, [r7, #24]
 804243e:	2300      	movs	r3, #0
 8042440:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8042442:	68bb      	ldr	r3, [r7, #8]
 8042444:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8042446:	e002      	b.n	804244e <BSP_LCD_DisplayStringAt+0x32>
 8042448:	69bb      	ldr	r3, [r7, #24]
 804244a:	3301      	adds	r3, #1
 804244c:	61bb      	str	r3, [r7, #24]
 804244e:	697b      	ldr	r3, [r7, #20]
 8042450:	1c5a      	adds	r2, r3, #1
 8042452:	617a      	str	r2, [r7, #20]
 8042454:	781b      	ldrb	r3, [r3, #0]
 8042456:	2b00      	cmp	r3, #0
 8042458:	d1f6      	bne.n	8042448 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 804245a:	f7ff fe49 	bl	80420f0 <BSP_LCD_GetXSize>
 804245e:	4601      	mov	r1, r0
 8042460:	4b4b      	ldr	r3, [pc, #300]	; (8042590 <BSP_LCD_DisplayStringAt+0x174>)
 8042462:	681a      	ldr	r2, [r3, #0]
 8042464:	484b      	ldr	r0, [pc, #300]	; (8042594 <BSP_LCD_DisplayStringAt+0x178>)
 8042466:	4613      	mov	r3, r2
 8042468:	005b      	lsls	r3, r3, #1
 804246a:	4413      	add	r3, r2
 804246c:	009b      	lsls	r3, r3, #2
 804246e:	4403      	add	r3, r0
 8042470:	3308      	adds	r3, #8
 8042472:	681b      	ldr	r3, [r3, #0]
 8042474:	889b      	ldrh	r3, [r3, #4]
 8042476:	fbb1 f3f3 	udiv	r3, r1, r3
 804247a:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 804247c:	79fb      	ldrb	r3, [r7, #7]
 804247e:	2b03      	cmp	r3, #3
 8042480:	d01c      	beq.n	80424bc <BSP_LCD_DisplayStringAt+0xa0>
 8042482:	2b03      	cmp	r3, #3
 8042484:	dc33      	bgt.n	80424ee <BSP_LCD_DisplayStringAt+0xd2>
 8042486:	2b01      	cmp	r3, #1
 8042488:	d002      	beq.n	8042490 <BSP_LCD_DisplayStringAt+0x74>
 804248a:	2b02      	cmp	r3, #2
 804248c:	d019      	beq.n	80424c2 <BSP_LCD_DisplayStringAt+0xa6>
 804248e:	e02e      	b.n	80424ee <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8042490:	693a      	ldr	r2, [r7, #16]
 8042492:	69bb      	ldr	r3, [r7, #24]
 8042494:	1ad1      	subs	r1, r2, r3
 8042496:	4b3e      	ldr	r3, [pc, #248]	; (8042590 <BSP_LCD_DisplayStringAt+0x174>)
 8042498:	681a      	ldr	r2, [r3, #0]
 804249a:	483e      	ldr	r0, [pc, #248]	; (8042594 <BSP_LCD_DisplayStringAt+0x178>)
 804249c:	4613      	mov	r3, r2
 804249e:	005b      	lsls	r3, r3, #1
 80424a0:	4413      	add	r3, r2
 80424a2:	009b      	lsls	r3, r3, #2
 80424a4:	4403      	add	r3, r0
 80424a6:	3308      	adds	r3, #8
 80424a8:	681b      	ldr	r3, [r3, #0]
 80424aa:	889b      	ldrh	r3, [r3, #4]
 80424ac:	fb01 f303 	mul.w	r3, r1, r3
 80424b0:	085b      	lsrs	r3, r3, #1
 80424b2:	b29a      	uxth	r2, r3
 80424b4:	89fb      	ldrh	r3, [r7, #14]
 80424b6:	4413      	add	r3, r2
 80424b8:	83fb      	strh	r3, [r7, #30]
      break;
 80424ba:	e01b      	b.n	80424f4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80424bc:	89fb      	ldrh	r3, [r7, #14]
 80424be:	83fb      	strh	r3, [r7, #30]
      break;
 80424c0:	e018      	b.n	80424f4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80424c2:	693a      	ldr	r2, [r7, #16]
 80424c4:	69bb      	ldr	r3, [r7, #24]
 80424c6:	1ad3      	subs	r3, r2, r3
 80424c8:	b299      	uxth	r1, r3
 80424ca:	4b31      	ldr	r3, [pc, #196]	; (8042590 <BSP_LCD_DisplayStringAt+0x174>)
 80424cc:	681a      	ldr	r2, [r3, #0]
 80424ce:	4831      	ldr	r0, [pc, #196]	; (8042594 <BSP_LCD_DisplayStringAt+0x178>)
 80424d0:	4613      	mov	r3, r2
 80424d2:	005b      	lsls	r3, r3, #1
 80424d4:	4413      	add	r3, r2
 80424d6:	009b      	lsls	r3, r3, #2
 80424d8:	4403      	add	r3, r0
 80424da:	3308      	adds	r3, #8
 80424dc:	681b      	ldr	r3, [r3, #0]
 80424de:	889b      	ldrh	r3, [r3, #4]
 80424e0:	fb11 f303 	smulbb	r3, r1, r3
 80424e4:	b29a      	uxth	r2, r3
 80424e6:	89fb      	ldrh	r3, [r7, #14]
 80424e8:	4413      	add	r3, r2
 80424ea:	83fb      	strh	r3, [r7, #30]
      break;
 80424ec:	e002      	b.n	80424f4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80424ee:	89fb      	ldrh	r3, [r7, #14]
 80424f0:	83fb      	strh	r3, [r7, #30]
      break;
 80424f2:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80424f4:	e01a      	b.n	804252c <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80424f6:	68bb      	ldr	r3, [r7, #8]
 80424f8:	781a      	ldrb	r2, [r3, #0]
 80424fa:	89b9      	ldrh	r1, [r7, #12]
 80424fc:	8bfb      	ldrh	r3, [r7, #30]
 80424fe:	4618      	mov	r0, r3
 8042500:	f7ff ff48 	bl	8042394 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8042504:	4b22      	ldr	r3, [pc, #136]	; (8042590 <BSP_LCD_DisplayStringAt+0x174>)
 8042506:	681a      	ldr	r2, [r3, #0]
 8042508:	4922      	ldr	r1, [pc, #136]	; (8042594 <BSP_LCD_DisplayStringAt+0x178>)
 804250a:	4613      	mov	r3, r2
 804250c:	005b      	lsls	r3, r3, #1
 804250e:	4413      	add	r3, r2
 8042510:	009b      	lsls	r3, r3, #2
 8042512:	440b      	add	r3, r1
 8042514:	3308      	adds	r3, #8
 8042516:	681b      	ldr	r3, [r3, #0]
 8042518:	889a      	ldrh	r2, [r3, #4]
 804251a:	8bfb      	ldrh	r3, [r7, #30]
 804251c:	4413      	add	r3, r2
 804251e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8042520:	68bb      	ldr	r3, [r7, #8]
 8042522:	3301      	adds	r3, #1
 8042524:	60bb      	str	r3, [r7, #8]
    i++;
 8042526:	8bbb      	ldrh	r3, [r7, #28]
 8042528:	3301      	adds	r3, #1
 804252a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 804252c:	68bb      	ldr	r3, [r7, #8]
 804252e:	781b      	ldrb	r3, [r3, #0]
 8042530:	2b00      	cmp	r3, #0
 8042532:	bf14      	ite	ne
 8042534:	2301      	movne	r3, #1
 8042536:	2300      	moveq	r3, #0
 8042538:	b2dc      	uxtb	r4, r3
 804253a:	f7ff fdd9 	bl	80420f0 <BSP_LCD_GetXSize>
 804253e:	8bb9      	ldrh	r1, [r7, #28]
 8042540:	4b13      	ldr	r3, [pc, #76]	; (8042590 <BSP_LCD_DisplayStringAt+0x174>)
 8042542:	681a      	ldr	r2, [r3, #0]
 8042544:	4d13      	ldr	r5, [pc, #76]	; (8042594 <BSP_LCD_DisplayStringAt+0x178>)
 8042546:	4613      	mov	r3, r2
 8042548:	005b      	lsls	r3, r3, #1
 804254a:	4413      	add	r3, r2
 804254c:	009b      	lsls	r3, r3, #2
 804254e:	442b      	add	r3, r5
 8042550:	3308      	adds	r3, #8
 8042552:	681b      	ldr	r3, [r3, #0]
 8042554:	889b      	ldrh	r3, [r3, #4]
 8042556:	fb01 f303 	mul.w	r3, r1, r3
 804255a:	1ac3      	subs	r3, r0, r3
 804255c:	b299      	uxth	r1, r3
 804255e:	4b0c      	ldr	r3, [pc, #48]	; (8042590 <BSP_LCD_DisplayStringAt+0x174>)
 8042560:	681a      	ldr	r2, [r3, #0]
 8042562:	480c      	ldr	r0, [pc, #48]	; (8042594 <BSP_LCD_DisplayStringAt+0x178>)
 8042564:	4613      	mov	r3, r2
 8042566:	005b      	lsls	r3, r3, #1
 8042568:	4413      	add	r3, r2
 804256a:	009b      	lsls	r3, r3, #2
 804256c:	4403      	add	r3, r0
 804256e:	3308      	adds	r3, #8
 8042570:	681b      	ldr	r3, [r3, #0]
 8042572:	889b      	ldrh	r3, [r3, #4]
 8042574:	4299      	cmp	r1, r3
 8042576:	bf2c      	ite	cs
 8042578:	2301      	movcs	r3, #1
 804257a:	2300      	movcc	r3, #0
 804257c:	b2db      	uxtb	r3, r3
 804257e:	4023      	ands	r3, r4
 8042580:	b2db      	uxtb	r3, r3
 8042582:	2b00      	cmp	r3, #0
 8042584:	d1b7      	bne.n	80424f6 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8042586:	bf00      	nop
 8042588:	bf00      	nop
 804258a:	3720      	adds	r7, #32
 804258c:	46bd      	mov	sp, r7
 804258e:	bdb0      	pop	{r4, r5, r7, pc}
 8042590:	20000584 	.word	0x20000584
 8042594:	20000588 	.word	0x20000588

08042598 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8042598:	b580      	push	{r7, lr}
 804259a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 804259c:	4b05      	ldr	r3, [pc, #20]	; (80425b4 <BSP_LCD_DisplayOn+0x1c>)
 804259e:	681b      	ldr	r3, [r3, #0]
 80425a0:	689b      	ldr	r3, [r3, #8]
 80425a2:	2b00      	cmp	r3, #0
 80425a4:	d003      	beq.n	80425ae <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80425a6:	4b03      	ldr	r3, [pc, #12]	; (80425b4 <BSP_LCD_DisplayOn+0x1c>)
 80425a8:	681b      	ldr	r3, [r3, #0]
 80425aa:	689b      	ldr	r3, [r3, #8]
 80425ac:	4798      	blx	r3
  }
}
 80425ae:	bf00      	nop
 80425b0:	bd80      	pop	{r7, pc}
 80425b2:	bf00      	nop
 80425b4:	200005a0 	.word	0x200005a0

080425b8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80425b8:	b580      	push	{r7, lr}
 80425ba:	b08e      	sub	sp, #56	; 0x38
 80425bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80425be:	2300      	movs	r3, #0
 80425c0:	623b      	str	r3, [r7, #32]
 80425c2:	4b61      	ldr	r3, [pc, #388]	; (8042748 <BSP_LCD_MspInit+0x190>)
 80425c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80425c6:	4a60      	ldr	r2, [pc, #384]	; (8042748 <BSP_LCD_MspInit+0x190>)
 80425c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80425cc:	6453      	str	r3, [r2, #68]	; 0x44
 80425ce:	4b5e      	ldr	r3, [pc, #376]	; (8042748 <BSP_LCD_MspInit+0x190>)
 80425d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80425d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80425d6:	623b      	str	r3, [r7, #32]
 80425d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80425da:	2300      	movs	r3, #0
 80425dc:	61fb      	str	r3, [r7, #28]
 80425de:	4b5a      	ldr	r3, [pc, #360]	; (8042748 <BSP_LCD_MspInit+0x190>)
 80425e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80425e2:	4a59      	ldr	r2, [pc, #356]	; (8042748 <BSP_LCD_MspInit+0x190>)
 80425e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80425e8:	6313      	str	r3, [r2, #48]	; 0x30
 80425ea:	4b57      	ldr	r3, [pc, #348]	; (8042748 <BSP_LCD_MspInit+0x190>)
 80425ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80425ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80425f2:	61fb      	str	r3, [r7, #28]
 80425f4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80425f6:	2300      	movs	r3, #0
 80425f8:	61bb      	str	r3, [r7, #24]
 80425fa:	4b53      	ldr	r3, [pc, #332]	; (8042748 <BSP_LCD_MspInit+0x190>)
 80425fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80425fe:	4a52      	ldr	r2, [pc, #328]	; (8042748 <BSP_LCD_MspInit+0x190>)
 8042600:	f043 0301 	orr.w	r3, r3, #1
 8042604:	6313      	str	r3, [r2, #48]	; 0x30
 8042606:	4b50      	ldr	r3, [pc, #320]	; (8042748 <BSP_LCD_MspInit+0x190>)
 8042608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804260a:	f003 0301 	and.w	r3, r3, #1
 804260e:	61bb      	str	r3, [r7, #24]
 8042610:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8042612:	2300      	movs	r3, #0
 8042614:	617b      	str	r3, [r7, #20]
 8042616:	4b4c      	ldr	r3, [pc, #304]	; (8042748 <BSP_LCD_MspInit+0x190>)
 8042618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804261a:	4a4b      	ldr	r2, [pc, #300]	; (8042748 <BSP_LCD_MspInit+0x190>)
 804261c:	f043 0302 	orr.w	r3, r3, #2
 8042620:	6313      	str	r3, [r2, #48]	; 0x30
 8042622:	4b49      	ldr	r3, [pc, #292]	; (8042748 <BSP_LCD_MspInit+0x190>)
 8042624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042626:	f003 0302 	and.w	r3, r3, #2
 804262a:	617b      	str	r3, [r7, #20]
 804262c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 804262e:	2300      	movs	r3, #0
 8042630:	613b      	str	r3, [r7, #16]
 8042632:	4b45      	ldr	r3, [pc, #276]	; (8042748 <BSP_LCD_MspInit+0x190>)
 8042634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042636:	4a44      	ldr	r2, [pc, #272]	; (8042748 <BSP_LCD_MspInit+0x190>)
 8042638:	f043 0304 	orr.w	r3, r3, #4
 804263c:	6313      	str	r3, [r2, #48]	; 0x30
 804263e:	4b42      	ldr	r3, [pc, #264]	; (8042748 <BSP_LCD_MspInit+0x190>)
 8042640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042642:	f003 0304 	and.w	r3, r3, #4
 8042646:	613b      	str	r3, [r7, #16]
 8042648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 804264a:	2300      	movs	r3, #0
 804264c:	60fb      	str	r3, [r7, #12]
 804264e:	4b3e      	ldr	r3, [pc, #248]	; (8042748 <BSP_LCD_MspInit+0x190>)
 8042650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042652:	4a3d      	ldr	r2, [pc, #244]	; (8042748 <BSP_LCD_MspInit+0x190>)
 8042654:	f043 0308 	orr.w	r3, r3, #8
 8042658:	6313      	str	r3, [r2, #48]	; 0x30
 804265a:	4b3b      	ldr	r3, [pc, #236]	; (8042748 <BSP_LCD_MspInit+0x190>)
 804265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804265e:	f003 0308 	and.w	r3, r3, #8
 8042662:	60fb      	str	r3, [r7, #12]
 8042664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8042666:	2300      	movs	r3, #0
 8042668:	60bb      	str	r3, [r7, #8]
 804266a:	4b37      	ldr	r3, [pc, #220]	; (8042748 <BSP_LCD_MspInit+0x190>)
 804266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804266e:	4a36      	ldr	r2, [pc, #216]	; (8042748 <BSP_LCD_MspInit+0x190>)
 8042670:	f043 0320 	orr.w	r3, r3, #32
 8042674:	6313      	str	r3, [r2, #48]	; 0x30
 8042676:	4b34      	ldr	r3, [pc, #208]	; (8042748 <BSP_LCD_MspInit+0x190>)
 8042678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804267a:	f003 0320 	and.w	r3, r3, #32
 804267e:	60bb      	str	r3, [r7, #8]
 8042680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8042682:	2300      	movs	r3, #0
 8042684:	607b      	str	r3, [r7, #4]
 8042686:	4b30      	ldr	r3, [pc, #192]	; (8042748 <BSP_LCD_MspInit+0x190>)
 8042688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804268a:	4a2f      	ldr	r2, [pc, #188]	; (8042748 <BSP_LCD_MspInit+0x190>)
 804268c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8042690:	6313      	str	r3, [r2, #48]	; 0x30
 8042692:	4b2d      	ldr	r3, [pc, #180]	; (8042748 <BSP_LCD_MspInit+0x190>)
 8042694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804269a:	607b      	str	r3, [r7, #4]
 804269c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 804269e:	f641 0358 	movw	r3, #6232	; 0x1858
 80426a2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80426a4:	2302      	movs	r3, #2
 80426a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80426a8:	2300      	movs	r3, #0
 80426aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80426ac:	2302      	movs	r3, #2
 80426ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80426b0:	230e      	movs	r3, #14
 80426b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80426b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80426b8:	4619      	mov	r1, r3
 80426ba:	4824      	ldr	r0, [pc, #144]	; (804274c <BSP_LCD_MspInit+0x194>)
 80426bc:	f001 f9f2 	bl	8043aa4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80426c0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80426c4:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80426c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80426ca:	4619      	mov	r1, r3
 80426cc:	4820      	ldr	r0, [pc, #128]	; (8042750 <BSP_LCD_MspInit+0x198>)
 80426ce:	f001 f9e9 	bl	8043aa4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80426d2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80426d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80426d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80426dc:	4619      	mov	r1, r3
 80426de:	481d      	ldr	r0, [pc, #116]	; (8042754 <BSP_LCD_MspInit+0x19c>)
 80426e0:	f001 f9e0 	bl	8043aa4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80426e4:	2348      	movs	r3, #72	; 0x48
 80426e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80426e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80426ec:	4619      	mov	r1, r3
 80426ee:	481a      	ldr	r0, [pc, #104]	; (8042758 <BSP_LCD_MspInit+0x1a0>)
 80426f0:	f001 f9d8 	bl	8043aa4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80426f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80426f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80426fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80426fe:	4619      	mov	r1, r3
 8042700:	4816      	ldr	r0, [pc, #88]	; (804275c <BSP_LCD_MspInit+0x1a4>)
 8042702:	f001 f9cf 	bl	8043aa4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8042706:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 804270a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 804270c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042710:	4619      	mov	r1, r3
 8042712:	4813      	ldr	r0, [pc, #76]	; (8042760 <BSP_LCD_MspInit+0x1a8>)
 8042714:	f001 f9c6 	bl	8043aa4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8042718:	2303      	movs	r3, #3
 804271a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 804271c:	2309      	movs	r3, #9
 804271e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8042720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042724:	4619      	mov	r1, r3
 8042726:	480a      	ldr	r0, [pc, #40]	; (8042750 <BSP_LCD_MspInit+0x198>)
 8042728:	f001 f9bc 	bl	8043aa4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 804272c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8042730:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8042732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042736:	4619      	mov	r1, r3
 8042738:	4809      	ldr	r0, [pc, #36]	; (8042760 <BSP_LCD_MspInit+0x1a8>)
 804273a:	f001 f9b3 	bl	8043aa4 <HAL_GPIO_Init>
}
 804273e:	bf00      	nop
 8042740:	3738      	adds	r7, #56	; 0x38
 8042742:	46bd      	mov	sp, r7
 8042744:	bd80      	pop	{r7, pc}
 8042746:	bf00      	nop
 8042748:	40023800 	.word	0x40023800
 804274c:	40020000 	.word	0x40020000
 8042750:	40020400 	.word	0x40020400
 8042754:	40020800 	.word	0x40020800
 8042758:	40020c00 	.word	0x40020c00
 804275c:	40021400 	.word	0x40021400
 8042760:	40021800 	.word	0x40021800

08042764 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8042764:	b5b0      	push	{r4, r5, r7, lr}
 8042766:	b082      	sub	sp, #8
 8042768:	af00      	add	r7, sp, #0
 804276a:	4603      	mov	r3, r0
 804276c:	603a      	str	r2, [r7, #0]
 804276e:	80fb      	strh	r3, [r7, #6]
 8042770:	460b      	mov	r3, r1
 8042772:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8042774:	4b0c      	ldr	r3, [pc, #48]	; (80427a8 <BSP_LCD_DrawPixel+0x44>)
 8042776:	681b      	ldr	r3, [r3, #0]
 8042778:	4a0c      	ldr	r2, [pc, #48]	; (80427ac <BSP_LCD_DrawPixel+0x48>)
 804277a:	2134      	movs	r1, #52	; 0x34
 804277c:	fb01 f303 	mul.w	r3, r1, r3
 8042780:	4413      	add	r3, r2
 8042782:	335c      	adds	r3, #92	; 0x5c
 8042784:	681c      	ldr	r4, [r3, #0]
 8042786:	88bd      	ldrh	r5, [r7, #4]
 8042788:	f7ff fcb2 	bl	80420f0 <BSP_LCD_GetXSize>
 804278c:	4603      	mov	r3, r0
 804278e:	fb03 f205 	mul.w	r2, r3, r5
 8042792:	88fb      	ldrh	r3, [r7, #6]
 8042794:	4413      	add	r3, r2
 8042796:	009b      	lsls	r3, r3, #2
 8042798:	4423      	add	r3, r4
 804279a:	461a      	mov	r2, r3
 804279c:	683b      	ldr	r3, [r7, #0]
 804279e:	6013      	str	r3, [r2, #0]
}
 80427a0:	bf00      	nop
 80427a2:	3708      	adds	r7, #8
 80427a4:	46bd      	mov	sp, r7
 80427a6:	bdb0      	pop	{r4, r5, r7, pc}
 80427a8:	20000584 	.word	0x20000584
 80427ac:	2000046c 	.word	0x2000046c

080427b0 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80427b0:	b580      	push	{r7, lr}
 80427b2:	b088      	sub	sp, #32
 80427b4:	af00      	add	r7, sp, #0
 80427b6:	4603      	mov	r3, r0
 80427b8:	603a      	str	r2, [r7, #0]
 80427ba:	80fb      	strh	r3, [r7, #6]
 80427bc:	460b      	mov	r3, r1
 80427be:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80427c0:	2300      	movs	r3, #0
 80427c2:	61fb      	str	r3, [r7, #28]
 80427c4:	2300      	movs	r3, #0
 80427c6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80427c8:	2300      	movs	r3, #0
 80427ca:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80427cc:	4b53      	ldr	r3, [pc, #332]	; (804291c <DrawChar+0x16c>)
 80427ce:	681a      	ldr	r2, [r3, #0]
 80427d0:	4953      	ldr	r1, [pc, #332]	; (8042920 <DrawChar+0x170>)
 80427d2:	4613      	mov	r3, r2
 80427d4:	005b      	lsls	r3, r3, #1
 80427d6:	4413      	add	r3, r2
 80427d8:	009b      	lsls	r3, r3, #2
 80427da:	440b      	add	r3, r1
 80427dc:	3308      	adds	r3, #8
 80427de:	681b      	ldr	r3, [r3, #0]
 80427e0:	88db      	ldrh	r3, [r3, #6]
 80427e2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80427e4:	4b4d      	ldr	r3, [pc, #308]	; (804291c <DrawChar+0x16c>)
 80427e6:	681a      	ldr	r2, [r3, #0]
 80427e8:	494d      	ldr	r1, [pc, #308]	; (8042920 <DrawChar+0x170>)
 80427ea:	4613      	mov	r3, r2
 80427ec:	005b      	lsls	r3, r3, #1
 80427ee:	4413      	add	r3, r2
 80427f0:	009b      	lsls	r3, r3, #2
 80427f2:	440b      	add	r3, r1
 80427f4:	3308      	adds	r3, #8
 80427f6:	681b      	ldr	r3, [r3, #0]
 80427f8:	889b      	ldrh	r3, [r3, #4]
 80427fa:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80427fc:	8a3b      	ldrh	r3, [r7, #16]
 80427fe:	3307      	adds	r3, #7
 8042800:	2b00      	cmp	r3, #0
 8042802:	da00      	bge.n	8042806 <DrawChar+0x56>
 8042804:	3307      	adds	r3, #7
 8042806:	10db      	asrs	r3, r3, #3
 8042808:	b2db      	uxtb	r3, r3
 804280a:	00db      	lsls	r3, r3, #3
 804280c:	b2da      	uxtb	r2, r3
 804280e:	8a3b      	ldrh	r3, [r7, #16]
 8042810:	b2db      	uxtb	r3, r3
 8042812:	1ad3      	subs	r3, r2, r3
 8042814:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8042816:	2300      	movs	r3, #0
 8042818:	61fb      	str	r3, [r7, #28]
 804281a:	e076      	b.n	804290a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 804281c:	8a3b      	ldrh	r3, [r7, #16]
 804281e:	3307      	adds	r3, #7
 8042820:	2b00      	cmp	r3, #0
 8042822:	da00      	bge.n	8042826 <DrawChar+0x76>
 8042824:	3307      	adds	r3, #7
 8042826:	10db      	asrs	r3, r3, #3
 8042828:	461a      	mov	r2, r3
 804282a:	69fb      	ldr	r3, [r7, #28]
 804282c:	fb02 f303 	mul.w	r3, r2, r3
 8042830:	683a      	ldr	r2, [r7, #0]
 8042832:	4413      	add	r3, r2
 8042834:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8042836:	8a3b      	ldrh	r3, [r7, #16]
 8042838:	3307      	adds	r3, #7
 804283a:	2b00      	cmp	r3, #0
 804283c:	da00      	bge.n	8042840 <DrawChar+0x90>
 804283e:	3307      	adds	r3, #7
 8042840:	10db      	asrs	r3, r3, #3
 8042842:	2b01      	cmp	r3, #1
 8042844:	d002      	beq.n	804284c <DrawChar+0x9c>
 8042846:	2b02      	cmp	r3, #2
 8042848:	d004      	beq.n	8042854 <DrawChar+0xa4>
 804284a:	e00c      	b.n	8042866 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 804284c:	68bb      	ldr	r3, [r7, #8]
 804284e:	781b      	ldrb	r3, [r3, #0]
 8042850:	617b      	str	r3, [r7, #20]
      break;
 8042852:	e016      	b.n	8042882 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8042854:	68bb      	ldr	r3, [r7, #8]
 8042856:	781b      	ldrb	r3, [r3, #0]
 8042858:	021b      	lsls	r3, r3, #8
 804285a:	68ba      	ldr	r2, [r7, #8]
 804285c:	3201      	adds	r2, #1
 804285e:	7812      	ldrb	r2, [r2, #0]
 8042860:	4313      	orrs	r3, r2
 8042862:	617b      	str	r3, [r7, #20]
      break;
 8042864:	e00d      	b.n	8042882 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8042866:	68bb      	ldr	r3, [r7, #8]
 8042868:	781b      	ldrb	r3, [r3, #0]
 804286a:	041a      	lsls	r2, r3, #16
 804286c:	68bb      	ldr	r3, [r7, #8]
 804286e:	3301      	adds	r3, #1
 8042870:	781b      	ldrb	r3, [r3, #0]
 8042872:	021b      	lsls	r3, r3, #8
 8042874:	4313      	orrs	r3, r2
 8042876:	68ba      	ldr	r2, [r7, #8]
 8042878:	3202      	adds	r2, #2
 804287a:	7812      	ldrb	r2, [r2, #0]
 804287c:	4313      	orrs	r3, r2
 804287e:	617b      	str	r3, [r7, #20]
      break;
 8042880:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8042882:	2300      	movs	r3, #0
 8042884:	61bb      	str	r3, [r7, #24]
 8042886:	e036      	b.n	80428f6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8042888:	8a3a      	ldrh	r2, [r7, #16]
 804288a:	69bb      	ldr	r3, [r7, #24]
 804288c:	1ad2      	subs	r2, r2, r3
 804288e:	7bfb      	ldrb	r3, [r7, #15]
 8042890:	4413      	add	r3, r2
 8042892:	3b01      	subs	r3, #1
 8042894:	2201      	movs	r2, #1
 8042896:	fa02 f303 	lsl.w	r3, r2, r3
 804289a:	461a      	mov	r2, r3
 804289c:	697b      	ldr	r3, [r7, #20]
 804289e:	4013      	ands	r3, r2
 80428a0:	2b00      	cmp	r3, #0
 80428a2:	d012      	beq.n	80428ca <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80428a4:	69bb      	ldr	r3, [r7, #24]
 80428a6:	b29a      	uxth	r2, r3
 80428a8:	88fb      	ldrh	r3, [r7, #6]
 80428aa:	4413      	add	r3, r2
 80428ac:	b298      	uxth	r0, r3
 80428ae:	4b1b      	ldr	r3, [pc, #108]	; (804291c <DrawChar+0x16c>)
 80428b0:	681a      	ldr	r2, [r3, #0]
 80428b2:	491b      	ldr	r1, [pc, #108]	; (8042920 <DrawChar+0x170>)
 80428b4:	4613      	mov	r3, r2
 80428b6:	005b      	lsls	r3, r3, #1
 80428b8:	4413      	add	r3, r2
 80428ba:	009b      	lsls	r3, r3, #2
 80428bc:	440b      	add	r3, r1
 80428be:	681a      	ldr	r2, [r3, #0]
 80428c0:	88bb      	ldrh	r3, [r7, #4]
 80428c2:	4619      	mov	r1, r3
 80428c4:	f7ff ff4e 	bl	8042764 <BSP_LCD_DrawPixel>
 80428c8:	e012      	b.n	80428f0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80428ca:	69bb      	ldr	r3, [r7, #24]
 80428cc:	b29a      	uxth	r2, r3
 80428ce:	88fb      	ldrh	r3, [r7, #6]
 80428d0:	4413      	add	r3, r2
 80428d2:	b298      	uxth	r0, r3
 80428d4:	4b11      	ldr	r3, [pc, #68]	; (804291c <DrawChar+0x16c>)
 80428d6:	681a      	ldr	r2, [r3, #0]
 80428d8:	4911      	ldr	r1, [pc, #68]	; (8042920 <DrawChar+0x170>)
 80428da:	4613      	mov	r3, r2
 80428dc:	005b      	lsls	r3, r3, #1
 80428de:	4413      	add	r3, r2
 80428e0:	009b      	lsls	r3, r3, #2
 80428e2:	440b      	add	r3, r1
 80428e4:	3304      	adds	r3, #4
 80428e6:	681a      	ldr	r2, [r3, #0]
 80428e8:	88bb      	ldrh	r3, [r7, #4]
 80428ea:	4619      	mov	r1, r3
 80428ec:	f7ff ff3a 	bl	8042764 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80428f0:	69bb      	ldr	r3, [r7, #24]
 80428f2:	3301      	adds	r3, #1
 80428f4:	61bb      	str	r3, [r7, #24]
 80428f6:	8a3b      	ldrh	r3, [r7, #16]
 80428f8:	69ba      	ldr	r2, [r7, #24]
 80428fa:	429a      	cmp	r2, r3
 80428fc:	d3c4      	bcc.n	8042888 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80428fe:	88bb      	ldrh	r3, [r7, #4]
 8042900:	3301      	adds	r3, #1
 8042902:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8042904:	69fb      	ldr	r3, [r7, #28]
 8042906:	3301      	adds	r3, #1
 8042908:	61fb      	str	r3, [r7, #28]
 804290a:	8a7b      	ldrh	r3, [r7, #18]
 804290c:	69fa      	ldr	r2, [r7, #28]
 804290e:	429a      	cmp	r2, r3
 8042910:	d384      	bcc.n	804281c <DrawChar+0x6c>
  }
}
 8042912:	bf00      	nop
 8042914:	bf00      	nop
 8042916:	3720      	adds	r7, #32
 8042918:	46bd      	mov	sp, r7
 804291a:	bd80      	pop	{r7, pc}
 804291c:	20000584 	.word	0x20000584
 8042920:	20000588 	.word	0x20000588

08042924 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8042924:	b580      	push	{r7, lr}
 8042926:	b086      	sub	sp, #24
 8042928:	af02      	add	r7, sp, #8
 804292a:	60f8      	str	r0, [r7, #12]
 804292c:	60b9      	str	r1, [r7, #8]
 804292e:	607a      	str	r2, [r7, #4]
 8042930:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8042932:	4b16      	ldr	r3, [pc, #88]	; (804298c <FillBuffer+0x68>)
 8042934:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8042938:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 804293a:	4b14      	ldr	r3, [pc, #80]	; (804298c <FillBuffer+0x68>)
 804293c:	2200      	movs	r2, #0
 804293e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8042940:	4a12      	ldr	r2, [pc, #72]	; (804298c <FillBuffer+0x68>)
 8042942:	69bb      	ldr	r3, [r7, #24]
 8042944:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8042946:	4b11      	ldr	r3, [pc, #68]	; (804298c <FillBuffer+0x68>)
 8042948:	4a11      	ldr	r2, [pc, #68]	; (8042990 <FillBuffer+0x6c>)
 804294a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 804294c:	480f      	ldr	r0, [pc, #60]	; (804298c <FillBuffer+0x68>)
 804294e:	f000 fd0d 	bl	804336c <HAL_DMA2D_Init>
 8042952:	4603      	mov	r3, r0
 8042954:	2b00      	cmp	r3, #0
 8042956:	d115      	bne.n	8042984 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8042958:	68f9      	ldr	r1, [r7, #12]
 804295a:	480c      	ldr	r0, [pc, #48]	; (804298c <FillBuffer+0x68>)
 804295c:	f000 ff74 	bl	8043848 <HAL_DMA2D_ConfigLayer>
 8042960:	4603      	mov	r3, r0
 8042962:	2b00      	cmp	r3, #0
 8042964:	d10e      	bne.n	8042984 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8042966:	68ba      	ldr	r2, [r7, #8]
 8042968:	683b      	ldr	r3, [r7, #0]
 804296a:	9300      	str	r3, [sp, #0]
 804296c:	687b      	ldr	r3, [r7, #4]
 804296e:	69f9      	ldr	r1, [r7, #28]
 8042970:	4806      	ldr	r0, [pc, #24]	; (804298c <FillBuffer+0x68>)
 8042972:	f000 fd44 	bl	80433fe <HAL_DMA2D_Start>
 8042976:	4603      	mov	r3, r0
 8042978:	2b00      	cmp	r3, #0
 804297a:	d103      	bne.n	8042984 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 804297c:	210a      	movs	r1, #10
 804297e:	4803      	ldr	r0, [pc, #12]	; (804298c <FillBuffer+0x68>)
 8042980:	f000 fd68 	bl	8043454 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8042984:	bf00      	nop
 8042986:	3710      	adds	r7, #16
 8042988:	46bd      	mov	sp, r7
 804298a:	bd80      	pop	{r7, pc}
 804298c:	20000514 	.word	0x20000514
 8042990:	4002b000 	.word	0x4002b000

08042994 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8042994:	b580      	push	{r7, lr}
 8042996:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8042998:	4b29      	ldr	r3, [pc, #164]	; (8042a40 <BSP_SDRAM_Init+0xac>)
 804299a:	4a2a      	ldr	r2, [pc, #168]	; (8042a44 <BSP_SDRAM_Init+0xb0>)
 804299c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 804299e:	4b2a      	ldr	r3, [pc, #168]	; (8042a48 <BSP_SDRAM_Init+0xb4>)
 80429a0:	2202      	movs	r2, #2
 80429a2:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80429a4:	4b28      	ldr	r3, [pc, #160]	; (8042a48 <BSP_SDRAM_Init+0xb4>)
 80429a6:	2207      	movs	r2, #7
 80429a8:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80429aa:	4b27      	ldr	r3, [pc, #156]	; (8042a48 <BSP_SDRAM_Init+0xb4>)
 80429ac:	2204      	movs	r2, #4
 80429ae:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80429b0:	4b25      	ldr	r3, [pc, #148]	; (8042a48 <BSP_SDRAM_Init+0xb4>)
 80429b2:	2207      	movs	r2, #7
 80429b4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80429b6:	4b24      	ldr	r3, [pc, #144]	; (8042a48 <BSP_SDRAM_Init+0xb4>)
 80429b8:	2202      	movs	r2, #2
 80429ba:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80429bc:	4b22      	ldr	r3, [pc, #136]	; (8042a48 <BSP_SDRAM_Init+0xb4>)
 80429be:	2202      	movs	r2, #2
 80429c0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80429c2:	4b21      	ldr	r3, [pc, #132]	; (8042a48 <BSP_SDRAM_Init+0xb4>)
 80429c4:	2202      	movs	r2, #2
 80429c6:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80429c8:	4b1d      	ldr	r3, [pc, #116]	; (8042a40 <BSP_SDRAM_Init+0xac>)
 80429ca:	2201      	movs	r2, #1
 80429cc:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80429ce:	4b1c      	ldr	r3, [pc, #112]	; (8042a40 <BSP_SDRAM_Init+0xac>)
 80429d0:	2200      	movs	r2, #0
 80429d2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80429d4:	4b1a      	ldr	r3, [pc, #104]	; (8042a40 <BSP_SDRAM_Init+0xac>)
 80429d6:	2204      	movs	r2, #4
 80429d8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80429da:	4b19      	ldr	r3, [pc, #100]	; (8042a40 <BSP_SDRAM_Init+0xac>)
 80429dc:	2210      	movs	r2, #16
 80429de:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80429e0:	4b17      	ldr	r3, [pc, #92]	; (8042a40 <BSP_SDRAM_Init+0xac>)
 80429e2:	2240      	movs	r2, #64	; 0x40
 80429e4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80429e6:	4b16      	ldr	r3, [pc, #88]	; (8042a40 <BSP_SDRAM_Init+0xac>)
 80429e8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80429ec:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80429ee:	4b14      	ldr	r3, [pc, #80]	; (8042a40 <BSP_SDRAM_Init+0xac>)
 80429f0:	2200      	movs	r2, #0
 80429f2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80429f4:	4b12      	ldr	r3, [pc, #72]	; (8042a40 <BSP_SDRAM_Init+0xac>)
 80429f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80429fa:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80429fc:	4b10      	ldr	r3, [pc, #64]	; (8042a40 <BSP_SDRAM_Init+0xac>)
 80429fe:	2200      	movs	r2, #0
 8042a00:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8042a02:	4b0f      	ldr	r3, [pc, #60]	; (8042a40 <BSP_SDRAM_Init+0xac>)
 8042a04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8042a08:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8042a0a:	2100      	movs	r1, #0
 8042a0c:	480c      	ldr	r0, [pc, #48]	; (8042a40 <BSP_SDRAM_Init+0xac>)
 8042a0e:	f000 f87f 	bl	8042b10 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8042a12:	490d      	ldr	r1, [pc, #52]	; (8042a48 <BSP_SDRAM_Init+0xb4>)
 8042a14:	480a      	ldr	r0, [pc, #40]	; (8042a40 <BSP_SDRAM_Init+0xac>)
 8042a16:	f004 fb93 	bl	8047140 <HAL_SDRAM_Init>
 8042a1a:	4603      	mov	r3, r0
 8042a1c:	2b00      	cmp	r3, #0
 8042a1e:	d003      	beq.n	8042a28 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8042a20:	4b0a      	ldr	r3, [pc, #40]	; (8042a4c <BSP_SDRAM_Init+0xb8>)
 8042a22:	2201      	movs	r2, #1
 8042a24:	701a      	strb	r2, [r3, #0]
 8042a26:	e002      	b.n	8042a2e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8042a28:	4b08      	ldr	r3, [pc, #32]	; (8042a4c <BSP_SDRAM_Init+0xb8>)
 8042a2a:	2200      	movs	r2, #0
 8042a2c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8042a2e:	f240 506a 	movw	r0, #1386	; 0x56a
 8042a32:	f000 f80d 	bl	8042a50 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8042a36:	4b05      	ldr	r3, [pc, #20]	; (8042a4c <BSP_SDRAM_Init+0xb8>)
 8042a38:	781b      	ldrb	r3, [r3, #0]
}
 8042a3a:	4618      	mov	r0, r3
 8042a3c:	bd80      	pop	{r7, pc}
 8042a3e:	bf00      	nop
 8042a40:	200005a4 	.word	0x200005a4
 8042a44:	a0000140 	.word	0xa0000140
 8042a48:	200005d8 	.word	0x200005d8
 8042a4c:	20000050 	.word	0x20000050

08042a50 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8042a50:	b580      	push	{r7, lr}
 8042a52:	b084      	sub	sp, #16
 8042a54:	af00      	add	r7, sp, #0
 8042a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8042a58:	2300      	movs	r3, #0
 8042a5a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8042a5c:	4b2a      	ldr	r3, [pc, #168]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042a5e:	2201      	movs	r2, #1
 8042a60:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8042a62:	4b29      	ldr	r3, [pc, #164]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042a64:	2208      	movs	r2, #8
 8042a66:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8042a68:	4b27      	ldr	r3, [pc, #156]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042a6a:	2201      	movs	r2, #1
 8042a6c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8042a6e:	4b26      	ldr	r3, [pc, #152]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042a70:	2200      	movs	r2, #0
 8042a72:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8042a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042a78:	4923      	ldr	r1, [pc, #140]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042a7a:	4824      	ldr	r0, [pc, #144]	; (8042b0c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8042a7c:	f004 fb94 	bl	80471a8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8042a80:	2001      	movs	r0, #1
 8042a82:	f000 f993 	bl	8042dac <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8042a86:	4b20      	ldr	r3, [pc, #128]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042a88:	2202      	movs	r2, #2
 8042a8a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8042a8c:	4b1e      	ldr	r3, [pc, #120]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042a8e:	2208      	movs	r2, #8
 8042a90:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8042a92:	4b1d      	ldr	r3, [pc, #116]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042a94:	2201      	movs	r2, #1
 8042a96:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8042a98:	4b1b      	ldr	r3, [pc, #108]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042a9a:	2200      	movs	r2, #0
 8042a9c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8042a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042aa2:	4919      	ldr	r1, [pc, #100]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042aa4:	4819      	ldr	r0, [pc, #100]	; (8042b0c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8042aa6:	f004 fb7f 	bl	80471a8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8042aaa:	4b17      	ldr	r3, [pc, #92]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042aac:	2203      	movs	r2, #3
 8042aae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8042ab0:	4b15      	ldr	r3, [pc, #84]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042ab2:	2208      	movs	r2, #8
 8042ab4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8042ab6:	4b14      	ldr	r3, [pc, #80]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042ab8:	2204      	movs	r2, #4
 8042aba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8042abc:	4b12      	ldr	r3, [pc, #72]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042abe:	2200      	movs	r2, #0
 8042ac0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8042ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042ac6:	4910      	ldr	r1, [pc, #64]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042ac8:	4810      	ldr	r0, [pc, #64]	; (8042b0c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8042aca:	f004 fb6d 	bl	80471a8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8042ace:	f44f 730c 	mov.w	r3, #560	; 0x230
 8042ad2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8042ad4:	4b0c      	ldr	r3, [pc, #48]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042ad6:	2204      	movs	r2, #4
 8042ad8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8042ada:	4b0b      	ldr	r3, [pc, #44]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042adc:	2208      	movs	r2, #8
 8042ade:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8042ae0:	4b09      	ldr	r3, [pc, #36]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042ae2:	2201      	movs	r2, #1
 8042ae4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8042ae6:	68fb      	ldr	r3, [r7, #12]
 8042ae8:	4a07      	ldr	r2, [pc, #28]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042aea:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8042aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042af0:	4905      	ldr	r1, [pc, #20]	; (8042b08 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042af2:	4806      	ldr	r0, [pc, #24]	; (8042b0c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8042af4:	f004 fb58 	bl	80471a8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8042af8:	6879      	ldr	r1, [r7, #4]
 8042afa:	4804      	ldr	r0, [pc, #16]	; (8042b0c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8042afc:	f004 fb89 	bl	8047212 <HAL_SDRAM_ProgramRefreshRate>
}
 8042b00:	bf00      	nop
 8042b02:	3710      	adds	r7, #16
 8042b04:	46bd      	mov	sp, r7
 8042b06:	bd80      	pop	{r7, pc}
 8042b08:	200005f4 	.word	0x200005f4
 8042b0c:	200005a4 	.word	0x200005a4

08042b10 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8042b10:	b580      	push	{r7, lr}
 8042b12:	b090      	sub	sp, #64	; 0x40
 8042b14:	af00      	add	r7, sp, #0
 8042b16:	6078      	str	r0, [r7, #4]
 8042b18:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8042b1a:	687b      	ldr	r3, [r7, #4]
 8042b1c:	2b00      	cmp	r3, #0
 8042b1e:	f000 80ec 	beq.w	8042cfa <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8042b22:	2300      	movs	r3, #0
 8042b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8042b26:	4b77      	ldr	r3, [pc, #476]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042b2a:	4a76      	ldr	r2, [pc, #472]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042b2c:	f043 0301 	orr.w	r3, r3, #1
 8042b30:	6393      	str	r3, [r2, #56]	; 0x38
 8042b32:	4b74      	ldr	r3, [pc, #464]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042b36:	f003 0301 	and.w	r3, r3, #1
 8042b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8042b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8042b3e:	2300      	movs	r3, #0
 8042b40:	627b      	str	r3, [r7, #36]	; 0x24
 8042b42:	4b70      	ldr	r3, [pc, #448]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042b46:	4a6f      	ldr	r2, [pc, #444]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042b48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8042b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8042b4e:	4b6d      	ldr	r3, [pc, #436]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042b56:	627b      	str	r3, [r7, #36]	; 0x24
 8042b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8042b5a:	2300      	movs	r3, #0
 8042b5c:	623b      	str	r3, [r7, #32]
 8042b5e:	4b69      	ldr	r3, [pc, #420]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042b62:	4a68      	ldr	r2, [pc, #416]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042b64:	f043 0302 	orr.w	r3, r3, #2
 8042b68:	6313      	str	r3, [r2, #48]	; 0x30
 8042b6a:	4b66      	ldr	r3, [pc, #408]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042b6e:	f003 0302 	and.w	r3, r3, #2
 8042b72:	623b      	str	r3, [r7, #32]
 8042b74:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8042b76:	2300      	movs	r3, #0
 8042b78:	61fb      	str	r3, [r7, #28]
 8042b7a:	4b62      	ldr	r3, [pc, #392]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042b7e:	4a61      	ldr	r2, [pc, #388]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042b80:	f043 0304 	orr.w	r3, r3, #4
 8042b84:	6313      	str	r3, [r2, #48]	; 0x30
 8042b86:	4b5f      	ldr	r3, [pc, #380]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042b8a:	f003 0304 	and.w	r3, r3, #4
 8042b8e:	61fb      	str	r3, [r7, #28]
 8042b90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8042b92:	2300      	movs	r3, #0
 8042b94:	61bb      	str	r3, [r7, #24]
 8042b96:	4b5b      	ldr	r3, [pc, #364]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042b9a:	4a5a      	ldr	r2, [pc, #360]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042b9c:	f043 0308 	orr.w	r3, r3, #8
 8042ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8042ba2:	4b58      	ldr	r3, [pc, #352]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042ba6:	f003 0308 	and.w	r3, r3, #8
 8042baa:	61bb      	str	r3, [r7, #24]
 8042bac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8042bae:	2300      	movs	r3, #0
 8042bb0:	617b      	str	r3, [r7, #20]
 8042bb2:	4b54      	ldr	r3, [pc, #336]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042bb6:	4a53      	ldr	r2, [pc, #332]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042bb8:	f043 0310 	orr.w	r3, r3, #16
 8042bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8042bbe:	4b51      	ldr	r3, [pc, #324]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042bc2:	f003 0310 	and.w	r3, r3, #16
 8042bc6:	617b      	str	r3, [r7, #20]
 8042bc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8042bca:	2300      	movs	r3, #0
 8042bcc:	613b      	str	r3, [r7, #16]
 8042bce:	4b4d      	ldr	r3, [pc, #308]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042bd2:	4a4c      	ldr	r2, [pc, #304]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042bd4:	f043 0320 	orr.w	r3, r3, #32
 8042bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8042bda:	4b4a      	ldr	r3, [pc, #296]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042bde:	f003 0320 	and.w	r3, r3, #32
 8042be2:	613b      	str	r3, [r7, #16]
 8042be4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8042be6:	2300      	movs	r3, #0
 8042be8:	60fb      	str	r3, [r7, #12]
 8042bea:	4b46      	ldr	r3, [pc, #280]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042bee:	4a45      	ldr	r2, [pc, #276]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8042bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8042bf6:	4b43      	ldr	r3, [pc, #268]	; (8042d04 <BSP_SDRAM_MspInit+0x1f4>)
 8042bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042bfe:	60fb      	str	r3, [r7, #12]
 8042c00:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8042c02:	2302      	movs	r3, #2
 8042c04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8042c06:	2302      	movs	r3, #2
 8042c08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8042c0a:	2300      	movs	r3, #0
 8042c0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8042c0e:	230c      	movs	r3, #12
 8042c10:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8042c12:	2360      	movs	r3, #96	; 0x60
 8042c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8042c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042c1a:	4619      	mov	r1, r3
 8042c1c:	483a      	ldr	r0, [pc, #232]	; (8042d08 <BSP_SDRAM_MspInit+0x1f8>)
 8042c1e:	f000 ff41 	bl	8043aa4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8042c22:	2301      	movs	r3, #1
 8042c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8042c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042c2a:	4619      	mov	r1, r3
 8042c2c:	4837      	ldr	r0, [pc, #220]	; (8042d0c <BSP_SDRAM_MspInit+0x1fc>)
 8042c2e:	f000 ff39 	bl	8043aa4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8042c32:	f24c 7303 	movw	r3, #50947	; 0xc703
 8042c36:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8042c38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042c3c:	4619      	mov	r1, r3
 8042c3e:	4834      	ldr	r0, [pc, #208]	; (8042d10 <BSP_SDRAM_MspInit+0x200>)
 8042c40:	f000 ff30 	bl	8043aa4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8042c44:	f64f 7383 	movw	r3, #65411	; 0xff83
 8042c48:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8042c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042c4e:	4619      	mov	r1, r3
 8042c50:	4830      	ldr	r0, [pc, #192]	; (8042d14 <BSP_SDRAM_MspInit+0x204>)
 8042c52:	f000 ff27 	bl	8043aa4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8042c56:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8042c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8042c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042c60:	4619      	mov	r1, r3
 8042c62:	482d      	ldr	r0, [pc, #180]	; (8042d18 <BSP_SDRAM_MspInit+0x208>)
 8042c64:	f000 ff1e 	bl	8043aa4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8042c68:	f248 1333 	movw	r3, #33075	; 0x8133
 8042c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8042c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042c72:	4619      	mov	r1, r3
 8042c74:	4829      	ldr	r0, [pc, #164]	; (8042d1c <BSP_SDRAM_MspInit+0x20c>)
 8042c76:	f000 ff15 	bl	8043aa4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8042c7a:	4b29      	ldr	r3, [pc, #164]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042c7c:	2200      	movs	r2, #0
 8042c7e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8042c80:	4b27      	ldr	r3, [pc, #156]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042c82:	2280      	movs	r2, #128	; 0x80
 8042c84:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8042c86:	4b26      	ldr	r3, [pc, #152]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8042c8c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8042c8e:	4b24      	ldr	r3, [pc, #144]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042c90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8042c94:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8042c96:	4b22      	ldr	r3, [pc, #136]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042c98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8042c9c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8042c9e:	4b20      	ldr	r3, [pc, #128]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042ca0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8042ca4:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8042ca6:	4b1e      	ldr	r3, [pc, #120]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042ca8:	2200      	movs	r2, #0
 8042caa:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8042cac:	4b1c      	ldr	r3, [pc, #112]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042cae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8042cb2:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8042cb4:	4b1a      	ldr	r3, [pc, #104]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042cb6:	2200      	movs	r2, #0
 8042cb8:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8042cba:	4b19      	ldr	r3, [pc, #100]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042cbc:	2203      	movs	r2, #3
 8042cbe:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8042cc0:	4b17      	ldr	r3, [pc, #92]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042cc2:	2200      	movs	r2, #0
 8042cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8042cc6:	4b16      	ldr	r3, [pc, #88]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042cc8:	2200      	movs	r2, #0
 8042cca:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8042ccc:	4b14      	ldr	r3, [pc, #80]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042cce:	4a15      	ldr	r2, [pc, #84]	; (8042d24 <BSP_SDRAM_MspInit+0x214>)
 8042cd0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8042cd2:	687b      	ldr	r3, [r7, #4]
 8042cd4:	4a12      	ldr	r2, [pc, #72]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8042cd8:	4a11      	ldr	r2, [pc, #68]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042cda:	687b      	ldr	r3, [r7, #4]
 8042cdc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8042cde:	4810      	ldr	r0, [pc, #64]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042ce0:	f000 fa34 	bl	804314c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8042ce4:	480e      	ldr	r0, [pc, #56]	; (8042d20 <BSP_SDRAM_MspInit+0x210>)
 8042ce6:	f000 f983 	bl	8042ff0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8042cea:	2200      	movs	r2, #0
 8042cec:	210f      	movs	r1, #15
 8042cee:	2038      	movs	r0, #56	; 0x38
 8042cf0:	f000 f938 	bl	8042f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8042cf4:	2038      	movs	r0, #56	; 0x38
 8042cf6:	f000 f951 	bl	8042f9c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8042cfa:	bf00      	nop
 8042cfc:	3740      	adds	r7, #64	; 0x40
 8042cfe:	46bd      	mov	sp, r7
 8042d00:	bd80      	pop	{r7, pc}
 8042d02:	bf00      	nop
 8042d04:	40023800 	.word	0x40023800
 8042d08:	40020400 	.word	0x40020400
 8042d0c:	40020800 	.word	0x40020800
 8042d10:	40020c00 	.word	0x40020c00
 8042d14:	40021000 	.word	0x40021000
 8042d18:	40021400 	.word	0x40021400
 8042d1c:	40021800 	.word	0x40021800
 8042d20:	20000604 	.word	0x20000604
 8042d24:	40026410 	.word	0x40026410

08042d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8042d28:	b580      	push	{r7, lr}
 8042d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8042d2c:	4b0e      	ldr	r3, [pc, #56]	; (8042d68 <HAL_Init+0x40>)
 8042d2e:	681b      	ldr	r3, [r3, #0]
 8042d30:	4a0d      	ldr	r2, [pc, #52]	; (8042d68 <HAL_Init+0x40>)
 8042d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8042d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8042d38:	4b0b      	ldr	r3, [pc, #44]	; (8042d68 <HAL_Init+0x40>)
 8042d3a:	681b      	ldr	r3, [r3, #0]
 8042d3c:	4a0a      	ldr	r2, [pc, #40]	; (8042d68 <HAL_Init+0x40>)
 8042d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8042d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8042d44:	4b08      	ldr	r3, [pc, #32]	; (8042d68 <HAL_Init+0x40>)
 8042d46:	681b      	ldr	r3, [r3, #0]
 8042d48:	4a07      	ldr	r2, [pc, #28]	; (8042d68 <HAL_Init+0x40>)
 8042d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8042d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8042d50:	2003      	movs	r0, #3
 8042d52:	f000 f8fc 	bl	8042f4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8042d56:	200f      	movs	r0, #15
 8042d58:	f7fe fc38 	bl	80415cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8042d5c:	f7fe f8be 	bl	8040edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8042d60:	2300      	movs	r3, #0
}
 8042d62:	4618      	mov	r0, r3
 8042d64:	bd80      	pop	{r7, pc}
 8042d66:	bf00      	nop
 8042d68:	40023c00 	.word	0x40023c00

08042d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8042d6c:	b480      	push	{r7}
 8042d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8042d70:	4b06      	ldr	r3, [pc, #24]	; (8042d8c <HAL_IncTick+0x20>)
 8042d72:	781b      	ldrb	r3, [r3, #0]
 8042d74:	461a      	mov	r2, r3
 8042d76:	4b06      	ldr	r3, [pc, #24]	; (8042d90 <HAL_IncTick+0x24>)
 8042d78:	681b      	ldr	r3, [r3, #0]
 8042d7a:	4413      	add	r3, r2
 8042d7c:	4a04      	ldr	r2, [pc, #16]	; (8042d90 <HAL_IncTick+0x24>)
 8042d7e:	6013      	str	r3, [r2, #0]
}
 8042d80:	bf00      	nop
 8042d82:	46bd      	mov	sp, r7
 8042d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042d88:	4770      	bx	lr
 8042d8a:	bf00      	nop
 8042d8c:	20000058 	.word	0x20000058
 8042d90:	20000664 	.word	0x20000664

08042d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8042d94:	b480      	push	{r7}
 8042d96:	af00      	add	r7, sp, #0
  return uwTick;
 8042d98:	4b03      	ldr	r3, [pc, #12]	; (8042da8 <HAL_GetTick+0x14>)
 8042d9a:	681b      	ldr	r3, [r3, #0]
}
 8042d9c:	4618      	mov	r0, r3
 8042d9e:	46bd      	mov	sp, r7
 8042da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042da4:	4770      	bx	lr
 8042da6:	bf00      	nop
 8042da8:	20000664 	.word	0x20000664

08042dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8042dac:	b580      	push	{r7, lr}
 8042dae:	b084      	sub	sp, #16
 8042db0:	af00      	add	r7, sp, #0
 8042db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8042db4:	f7ff ffee 	bl	8042d94 <HAL_GetTick>
 8042db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8042dba:	687b      	ldr	r3, [r7, #4]
 8042dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8042dbe:	68fb      	ldr	r3, [r7, #12]
 8042dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042dc4:	d005      	beq.n	8042dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8042dc6:	4b0a      	ldr	r3, [pc, #40]	; (8042df0 <HAL_Delay+0x44>)
 8042dc8:	781b      	ldrb	r3, [r3, #0]
 8042dca:	461a      	mov	r2, r3
 8042dcc:	68fb      	ldr	r3, [r7, #12]
 8042dce:	4413      	add	r3, r2
 8042dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8042dd2:	bf00      	nop
 8042dd4:	f7ff ffde 	bl	8042d94 <HAL_GetTick>
 8042dd8:	4602      	mov	r2, r0
 8042dda:	68bb      	ldr	r3, [r7, #8]
 8042ddc:	1ad3      	subs	r3, r2, r3
 8042dde:	68fa      	ldr	r2, [r7, #12]
 8042de0:	429a      	cmp	r2, r3
 8042de2:	d8f7      	bhi.n	8042dd4 <HAL_Delay+0x28>
  {
  }
}
 8042de4:	bf00      	nop
 8042de6:	bf00      	nop
 8042de8:	3710      	adds	r7, #16
 8042dea:	46bd      	mov	sp, r7
 8042dec:	bd80      	pop	{r7, pc}
 8042dee:	bf00      	nop
 8042df0:	20000058 	.word	0x20000058

08042df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8042df4:	b480      	push	{r7}
 8042df6:	b085      	sub	sp, #20
 8042df8:	af00      	add	r7, sp, #0
 8042dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8042dfc:	687b      	ldr	r3, [r7, #4]
 8042dfe:	f003 0307 	and.w	r3, r3, #7
 8042e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8042e04:	4b0c      	ldr	r3, [pc, #48]	; (8042e38 <__NVIC_SetPriorityGrouping+0x44>)
 8042e06:	68db      	ldr	r3, [r3, #12]
 8042e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8042e0a:	68ba      	ldr	r2, [r7, #8]
 8042e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8042e10:	4013      	ands	r3, r2
 8042e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8042e14:	68fb      	ldr	r3, [r7, #12]
 8042e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8042e18:	68bb      	ldr	r3, [r7, #8]
 8042e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8042e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8042e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8042e26:	4a04      	ldr	r2, [pc, #16]	; (8042e38 <__NVIC_SetPriorityGrouping+0x44>)
 8042e28:	68bb      	ldr	r3, [r7, #8]
 8042e2a:	60d3      	str	r3, [r2, #12]
}
 8042e2c:	bf00      	nop
 8042e2e:	3714      	adds	r7, #20
 8042e30:	46bd      	mov	sp, r7
 8042e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e36:	4770      	bx	lr
 8042e38:	e000ed00 	.word	0xe000ed00

08042e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8042e3c:	b480      	push	{r7}
 8042e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8042e40:	4b04      	ldr	r3, [pc, #16]	; (8042e54 <__NVIC_GetPriorityGrouping+0x18>)
 8042e42:	68db      	ldr	r3, [r3, #12]
 8042e44:	0a1b      	lsrs	r3, r3, #8
 8042e46:	f003 0307 	and.w	r3, r3, #7
}
 8042e4a:	4618      	mov	r0, r3
 8042e4c:	46bd      	mov	sp, r7
 8042e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e52:	4770      	bx	lr
 8042e54:	e000ed00 	.word	0xe000ed00

08042e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8042e58:	b480      	push	{r7}
 8042e5a:	b083      	sub	sp, #12
 8042e5c:	af00      	add	r7, sp, #0
 8042e5e:	4603      	mov	r3, r0
 8042e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8042e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042e66:	2b00      	cmp	r3, #0
 8042e68:	db0b      	blt.n	8042e82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8042e6a:	79fb      	ldrb	r3, [r7, #7]
 8042e6c:	f003 021f 	and.w	r2, r3, #31
 8042e70:	4907      	ldr	r1, [pc, #28]	; (8042e90 <__NVIC_EnableIRQ+0x38>)
 8042e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042e76:	095b      	lsrs	r3, r3, #5
 8042e78:	2001      	movs	r0, #1
 8042e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8042e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8042e82:	bf00      	nop
 8042e84:	370c      	adds	r7, #12
 8042e86:	46bd      	mov	sp, r7
 8042e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e8c:	4770      	bx	lr
 8042e8e:	bf00      	nop
 8042e90:	e000e100 	.word	0xe000e100

08042e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8042e94:	b480      	push	{r7}
 8042e96:	b083      	sub	sp, #12
 8042e98:	af00      	add	r7, sp, #0
 8042e9a:	4603      	mov	r3, r0
 8042e9c:	6039      	str	r1, [r7, #0]
 8042e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8042ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042ea4:	2b00      	cmp	r3, #0
 8042ea6:	db0a      	blt.n	8042ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8042ea8:	683b      	ldr	r3, [r7, #0]
 8042eaa:	b2da      	uxtb	r2, r3
 8042eac:	490c      	ldr	r1, [pc, #48]	; (8042ee0 <__NVIC_SetPriority+0x4c>)
 8042eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042eb2:	0112      	lsls	r2, r2, #4
 8042eb4:	b2d2      	uxtb	r2, r2
 8042eb6:	440b      	add	r3, r1
 8042eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8042ebc:	e00a      	b.n	8042ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8042ebe:	683b      	ldr	r3, [r7, #0]
 8042ec0:	b2da      	uxtb	r2, r3
 8042ec2:	4908      	ldr	r1, [pc, #32]	; (8042ee4 <__NVIC_SetPriority+0x50>)
 8042ec4:	79fb      	ldrb	r3, [r7, #7]
 8042ec6:	f003 030f 	and.w	r3, r3, #15
 8042eca:	3b04      	subs	r3, #4
 8042ecc:	0112      	lsls	r2, r2, #4
 8042ece:	b2d2      	uxtb	r2, r2
 8042ed0:	440b      	add	r3, r1
 8042ed2:	761a      	strb	r2, [r3, #24]
}
 8042ed4:	bf00      	nop
 8042ed6:	370c      	adds	r7, #12
 8042ed8:	46bd      	mov	sp, r7
 8042eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ede:	4770      	bx	lr
 8042ee0:	e000e100 	.word	0xe000e100
 8042ee4:	e000ed00 	.word	0xe000ed00

08042ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8042ee8:	b480      	push	{r7}
 8042eea:	b089      	sub	sp, #36	; 0x24
 8042eec:	af00      	add	r7, sp, #0
 8042eee:	60f8      	str	r0, [r7, #12]
 8042ef0:	60b9      	str	r1, [r7, #8]
 8042ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8042ef4:	68fb      	ldr	r3, [r7, #12]
 8042ef6:	f003 0307 	and.w	r3, r3, #7
 8042efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8042efc:	69fb      	ldr	r3, [r7, #28]
 8042efe:	f1c3 0307 	rsb	r3, r3, #7
 8042f02:	2b04      	cmp	r3, #4
 8042f04:	bf28      	it	cs
 8042f06:	2304      	movcs	r3, #4
 8042f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8042f0a:	69fb      	ldr	r3, [r7, #28]
 8042f0c:	3304      	adds	r3, #4
 8042f0e:	2b06      	cmp	r3, #6
 8042f10:	d902      	bls.n	8042f18 <NVIC_EncodePriority+0x30>
 8042f12:	69fb      	ldr	r3, [r7, #28]
 8042f14:	3b03      	subs	r3, #3
 8042f16:	e000      	b.n	8042f1a <NVIC_EncodePriority+0x32>
 8042f18:	2300      	movs	r3, #0
 8042f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8042f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8042f20:	69bb      	ldr	r3, [r7, #24]
 8042f22:	fa02 f303 	lsl.w	r3, r2, r3
 8042f26:	43da      	mvns	r2, r3
 8042f28:	68bb      	ldr	r3, [r7, #8]
 8042f2a:	401a      	ands	r2, r3
 8042f2c:	697b      	ldr	r3, [r7, #20]
 8042f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8042f30:	f04f 31ff 	mov.w	r1, #4294967295
 8042f34:	697b      	ldr	r3, [r7, #20]
 8042f36:	fa01 f303 	lsl.w	r3, r1, r3
 8042f3a:	43d9      	mvns	r1, r3
 8042f3c:	687b      	ldr	r3, [r7, #4]
 8042f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8042f40:	4313      	orrs	r3, r2
         );
}
 8042f42:	4618      	mov	r0, r3
 8042f44:	3724      	adds	r7, #36	; 0x24
 8042f46:	46bd      	mov	sp, r7
 8042f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f4c:	4770      	bx	lr

08042f4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8042f4e:	b580      	push	{r7, lr}
 8042f50:	b082      	sub	sp, #8
 8042f52:	af00      	add	r7, sp, #0
 8042f54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8042f56:	6878      	ldr	r0, [r7, #4]
 8042f58:	f7ff ff4c 	bl	8042df4 <__NVIC_SetPriorityGrouping>
}
 8042f5c:	bf00      	nop
 8042f5e:	3708      	adds	r7, #8
 8042f60:	46bd      	mov	sp, r7
 8042f62:	bd80      	pop	{r7, pc}

08042f64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8042f64:	b580      	push	{r7, lr}
 8042f66:	b086      	sub	sp, #24
 8042f68:	af00      	add	r7, sp, #0
 8042f6a:	4603      	mov	r3, r0
 8042f6c:	60b9      	str	r1, [r7, #8]
 8042f6e:	607a      	str	r2, [r7, #4]
 8042f70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8042f72:	2300      	movs	r3, #0
 8042f74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8042f76:	f7ff ff61 	bl	8042e3c <__NVIC_GetPriorityGrouping>
 8042f7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8042f7c:	687a      	ldr	r2, [r7, #4]
 8042f7e:	68b9      	ldr	r1, [r7, #8]
 8042f80:	6978      	ldr	r0, [r7, #20]
 8042f82:	f7ff ffb1 	bl	8042ee8 <NVIC_EncodePriority>
 8042f86:	4602      	mov	r2, r0
 8042f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8042f8c:	4611      	mov	r1, r2
 8042f8e:	4618      	mov	r0, r3
 8042f90:	f7ff ff80 	bl	8042e94 <__NVIC_SetPriority>
}
 8042f94:	bf00      	nop
 8042f96:	3718      	adds	r7, #24
 8042f98:	46bd      	mov	sp, r7
 8042f9a:	bd80      	pop	{r7, pc}

08042f9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8042f9c:	b580      	push	{r7, lr}
 8042f9e:	b082      	sub	sp, #8
 8042fa0:	af00      	add	r7, sp, #0
 8042fa2:	4603      	mov	r3, r0
 8042fa4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8042fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042faa:	4618      	mov	r0, r3
 8042fac:	f7ff ff54 	bl	8042e58 <__NVIC_EnableIRQ>
}
 8042fb0:	bf00      	nop
 8042fb2:	3708      	adds	r7, #8
 8042fb4:	46bd      	mov	sp, r7
 8042fb6:	bd80      	pop	{r7, pc}

08042fb8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8042fb8:	b580      	push	{r7, lr}
 8042fba:	b082      	sub	sp, #8
 8042fbc:	af00      	add	r7, sp, #0
 8042fbe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8042fc0:	687b      	ldr	r3, [r7, #4]
 8042fc2:	2b00      	cmp	r3, #0
 8042fc4:	d101      	bne.n	8042fca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8042fc6:	2301      	movs	r3, #1
 8042fc8:	e00e      	b.n	8042fe8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8042fca:	687b      	ldr	r3, [r7, #4]
 8042fcc:	795b      	ldrb	r3, [r3, #5]
 8042fce:	b2db      	uxtb	r3, r3
 8042fd0:	2b00      	cmp	r3, #0
 8042fd2:	d105      	bne.n	8042fe0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8042fd4:	687b      	ldr	r3, [r7, #4]
 8042fd6:	2200      	movs	r2, #0
 8042fd8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8042fda:	6878      	ldr	r0, [r7, #4]
 8042fdc:	f7fd ffa6 	bl	8040f2c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8042fe0:	687b      	ldr	r3, [r7, #4]
 8042fe2:	2201      	movs	r2, #1
 8042fe4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8042fe6:	2300      	movs	r3, #0
}
 8042fe8:	4618      	mov	r0, r3
 8042fea:	3708      	adds	r7, #8
 8042fec:	46bd      	mov	sp, r7
 8042fee:	bd80      	pop	{r7, pc}

08042ff0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8042ff0:	b580      	push	{r7, lr}
 8042ff2:	b086      	sub	sp, #24
 8042ff4:	af00      	add	r7, sp, #0
 8042ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8042ff8:	2300      	movs	r3, #0
 8042ffa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8042ffc:	f7ff feca 	bl	8042d94 <HAL_GetTick>
 8043000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8043002:	687b      	ldr	r3, [r7, #4]
 8043004:	2b00      	cmp	r3, #0
 8043006:	d101      	bne.n	804300c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8043008:	2301      	movs	r3, #1
 804300a:	e099      	b.n	8043140 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 804300c:	687b      	ldr	r3, [r7, #4]
 804300e:	2202      	movs	r2, #2
 8043010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8043014:	687b      	ldr	r3, [r7, #4]
 8043016:	2200      	movs	r2, #0
 8043018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 804301c:	687b      	ldr	r3, [r7, #4]
 804301e:	681b      	ldr	r3, [r3, #0]
 8043020:	681a      	ldr	r2, [r3, #0]
 8043022:	687b      	ldr	r3, [r7, #4]
 8043024:	681b      	ldr	r3, [r3, #0]
 8043026:	f022 0201 	bic.w	r2, r2, #1
 804302a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 804302c:	e00f      	b.n	804304e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 804302e:	f7ff feb1 	bl	8042d94 <HAL_GetTick>
 8043032:	4602      	mov	r2, r0
 8043034:	693b      	ldr	r3, [r7, #16]
 8043036:	1ad3      	subs	r3, r2, r3
 8043038:	2b05      	cmp	r3, #5
 804303a:	d908      	bls.n	804304e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 804303c:	687b      	ldr	r3, [r7, #4]
 804303e:	2220      	movs	r2, #32
 8043040:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8043042:	687b      	ldr	r3, [r7, #4]
 8043044:	2203      	movs	r2, #3
 8043046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 804304a:	2303      	movs	r3, #3
 804304c:	e078      	b.n	8043140 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 804304e:	687b      	ldr	r3, [r7, #4]
 8043050:	681b      	ldr	r3, [r3, #0]
 8043052:	681b      	ldr	r3, [r3, #0]
 8043054:	f003 0301 	and.w	r3, r3, #1
 8043058:	2b00      	cmp	r3, #0
 804305a:	d1e8      	bne.n	804302e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 804305c:	687b      	ldr	r3, [r7, #4]
 804305e:	681b      	ldr	r3, [r3, #0]
 8043060:	681b      	ldr	r3, [r3, #0]
 8043062:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8043064:	697a      	ldr	r2, [r7, #20]
 8043066:	4b38      	ldr	r3, [pc, #224]	; (8043148 <HAL_DMA_Init+0x158>)
 8043068:	4013      	ands	r3, r2
 804306a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 804306c:	687b      	ldr	r3, [r7, #4]
 804306e:	685a      	ldr	r2, [r3, #4]
 8043070:	687b      	ldr	r3, [r7, #4]
 8043072:	689b      	ldr	r3, [r3, #8]
 8043074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8043076:	687b      	ldr	r3, [r7, #4]
 8043078:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 804307a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 804307c:	687b      	ldr	r3, [r7, #4]
 804307e:	691b      	ldr	r3, [r3, #16]
 8043080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8043082:	687b      	ldr	r3, [r7, #4]
 8043084:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8043086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8043088:	687b      	ldr	r3, [r7, #4]
 804308a:	699b      	ldr	r3, [r3, #24]
 804308c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 804308e:	687b      	ldr	r3, [r7, #4]
 8043090:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8043092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8043094:	687b      	ldr	r3, [r7, #4]
 8043096:	6a1b      	ldr	r3, [r3, #32]
 8043098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 804309a:	697a      	ldr	r2, [r7, #20]
 804309c:	4313      	orrs	r3, r2
 804309e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80430a0:	687b      	ldr	r3, [r7, #4]
 80430a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80430a4:	2b04      	cmp	r3, #4
 80430a6:	d107      	bne.n	80430b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80430a8:	687b      	ldr	r3, [r7, #4]
 80430aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80430ac:	687b      	ldr	r3, [r7, #4]
 80430ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80430b0:	4313      	orrs	r3, r2
 80430b2:	697a      	ldr	r2, [r7, #20]
 80430b4:	4313      	orrs	r3, r2
 80430b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80430b8:	687b      	ldr	r3, [r7, #4]
 80430ba:	681b      	ldr	r3, [r3, #0]
 80430bc:	697a      	ldr	r2, [r7, #20]
 80430be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80430c0:	687b      	ldr	r3, [r7, #4]
 80430c2:	681b      	ldr	r3, [r3, #0]
 80430c4:	695b      	ldr	r3, [r3, #20]
 80430c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80430c8:	697b      	ldr	r3, [r7, #20]
 80430ca:	f023 0307 	bic.w	r3, r3, #7
 80430ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80430d0:	687b      	ldr	r3, [r7, #4]
 80430d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80430d4:	697a      	ldr	r2, [r7, #20]
 80430d6:	4313      	orrs	r3, r2
 80430d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80430da:	687b      	ldr	r3, [r7, #4]
 80430dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80430de:	2b04      	cmp	r3, #4
 80430e0:	d117      	bne.n	8043112 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80430e2:	687b      	ldr	r3, [r7, #4]
 80430e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80430e6:	697a      	ldr	r2, [r7, #20]
 80430e8:	4313      	orrs	r3, r2
 80430ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80430ec:	687b      	ldr	r3, [r7, #4]
 80430ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80430f0:	2b00      	cmp	r3, #0
 80430f2:	d00e      	beq.n	8043112 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80430f4:	6878      	ldr	r0, [r7, #4]
 80430f6:	f000 f8bd 	bl	8043274 <DMA_CheckFifoParam>
 80430fa:	4603      	mov	r3, r0
 80430fc:	2b00      	cmp	r3, #0
 80430fe:	d008      	beq.n	8043112 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8043100:	687b      	ldr	r3, [r7, #4]
 8043102:	2240      	movs	r2, #64	; 0x40
 8043104:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8043106:	687b      	ldr	r3, [r7, #4]
 8043108:	2201      	movs	r2, #1
 804310a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 804310e:	2301      	movs	r3, #1
 8043110:	e016      	b.n	8043140 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8043112:	687b      	ldr	r3, [r7, #4]
 8043114:	681b      	ldr	r3, [r3, #0]
 8043116:	697a      	ldr	r2, [r7, #20]
 8043118:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 804311a:	6878      	ldr	r0, [r7, #4]
 804311c:	f000 f874 	bl	8043208 <DMA_CalcBaseAndBitshift>
 8043120:	4603      	mov	r3, r0
 8043122:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043124:	687b      	ldr	r3, [r7, #4]
 8043126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043128:	223f      	movs	r2, #63	; 0x3f
 804312a:	409a      	lsls	r2, r3
 804312c:	68fb      	ldr	r3, [r7, #12]
 804312e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8043130:	687b      	ldr	r3, [r7, #4]
 8043132:	2200      	movs	r2, #0
 8043134:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8043136:	687b      	ldr	r3, [r7, #4]
 8043138:	2201      	movs	r2, #1
 804313a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 804313e:	2300      	movs	r3, #0
}
 8043140:	4618      	mov	r0, r3
 8043142:	3718      	adds	r7, #24
 8043144:	46bd      	mov	sp, r7
 8043146:	bd80      	pop	{r7, pc}
 8043148:	f010803f 	.word	0xf010803f

0804314c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 804314c:	b580      	push	{r7, lr}
 804314e:	b084      	sub	sp, #16
 8043150:	af00      	add	r7, sp, #0
 8043152:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8043154:	687b      	ldr	r3, [r7, #4]
 8043156:	2b00      	cmp	r3, #0
 8043158:	d101      	bne.n	804315e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 804315a:	2301      	movs	r3, #1
 804315c:	e050      	b.n	8043200 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 804315e:	687b      	ldr	r3, [r7, #4]
 8043160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8043164:	b2db      	uxtb	r3, r3
 8043166:	2b02      	cmp	r3, #2
 8043168:	d101      	bne.n	804316e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 804316a:	2302      	movs	r3, #2
 804316c:	e048      	b.n	8043200 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 804316e:	687b      	ldr	r3, [r7, #4]
 8043170:	681b      	ldr	r3, [r3, #0]
 8043172:	681a      	ldr	r2, [r3, #0]
 8043174:	687b      	ldr	r3, [r7, #4]
 8043176:	681b      	ldr	r3, [r3, #0]
 8043178:	f022 0201 	bic.w	r2, r2, #1
 804317c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 804317e:	687b      	ldr	r3, [r7, #4]
 8043180:	681b      	ldr	r3, [r3, #0]
 8043182:	2200      	movs	r2, #0
 8043184:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8043186:	687b      	ldr	r3, [r7, #4]
 8043188:	681b      	ldr	r3, [r3, #0]
 804318a:	2200      	movs	r2, #0
 804318c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 804318e:	687b      	ldr	r3, [r7, #4]
 8043190:	681b      	ldr	r3, [r3, #0]
 8043192:	2200      	movs	r2, #0
 8043194:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8043196:	687b      	ldr	r3, [r7, #4]
 8043198:	681b      	ldr	r3, [r3, #0]
 804319a:	2200      	movs	r2, #0
 804319c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 804319e:	687b      	ldr	r3, [r7, #4]
 80431a0:	681b      	ldr	r3, [r3, #0]
 80431a2:	2200      	movs	r2, #0
 80431a4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80431a6:	687b      	ldr	r3, [r7, #4]
 80431a8:	681b      	ldr	r3, [r3, #0]
 80431aa:	2221      	movs	r2, #33	; 0x21
 80431ac:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80431ae:	6878      	ldr	r0, [r7, #4]
 80431b0:	f000 f82a 	bl	8043208 <DMA_CalcBaseAndBitshift>
 80431b4:	4603      	mov	r3, r0
 80431b6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80431b8:	687b      	ldr	r3, [r7, #4]
 80431ba:	2200      	movs	r2, #0
 80431bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80431be:	687b      	ldr	r3, [r7, #4]
 80431c0:	2200      	movs	r2, #0
 80431c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80431c4:	687b      	ldr	r3, [r7, #4]
 80431c6:	2200      	movs	r2, #0
 80431c8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80431ca:	687b      	ldr	r3, [r7, #4]
 80431cc:	2200      	movs	r2, #0
 80431ce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80431d0:	687b      	ldr	r3, [r7, #4]
 80431d2:	2200      	movs	r2, #0
 80431d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80431d6:	687b      	ldr	r3, [r7, #4]
 80431d8:	2200      	movs	r2, #0
 80431da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80431dc:	687b      	ldr	r3, [r7, #4]
 80431de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80431e0:	223f      	movs	r2, #63	; 0x3f
 80431e2:	409a      	lsls	r2, r3
 80431e4:	68fb      	ldr	r3, [r7, #12]
 80431e6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80431e8:	687b      	ldr	r3, [r7, #4]
 80431ea:	2200      	movs	r2, #0
 80431ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80431ee:	687b      	ldr	r3, [r7, #4]
 80431f0:	2200      	movs	r2, #0
 80431f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80431f6:	687b      	ldr	r3, [r7, #4]
 80431f8:	2200      	movs	r2, #0
 80431fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80431fe:	2300      	movs	r3, #0
}
 8043200:	4618      	mov	r0, r3
 8043202:	3710      	adds	r7, #16
 8043204:	46bd      	mov	sp, r7
 8043206:	bd80      	pop	{r7, pc}

08043208 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8043208:	b480      	push	{r7}
 804320a:	b085      	sub	sp, #20
 804320c:	af00      	add	r7, sp, #0
 804320e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8043210:	687b      	ldr	r3, [r7, #4]
 8043212:	681b      	ldr	r3, [r3, #0]
 8043214:	b2db      	uxtb	r3, r3
 8043216:	3b10      	subs	r3, #16
 8043218:	4a14      	ldr	r2, [pc, #80]	; (804326c <DMA_CalcBaseAndBitshift+0x64>)
 804321a:	fba2 2303 	umull	r2, r3, r2, r3
 804321e:	091b      	lsrs	r3, r3, #4
 8043220:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8043222:	4a13      	ldr	r2, [pc, #76]	; (8043270 <DMA_CalcBaseAndBitshift+0x68>)
 8043224:	68fb      	ldr	r3, [r7, #12]
 8043226:	4413      	add	r3, r2
 8043228:	781b      	ldrb	r3, [r3, #0]
 804322a:	461a      	mov	r2, r3
 804322c:	687b      	ldr	r3, [r7, #4]
 804322e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8043230:	68fb      	ldr	r3, [r7, #12]
 8043232:	2b03      	cmp	r3, #3
 8043234:	d909      	bls.n	804324a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8043236:	687b      	ldr	r3, [r7, #4]
 8043238:	681b      	ldr	r3, [r3, #0]
 804323a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 804323e:	f023 0303 	bic.w	r3, r3, #3
 8043242:	1d1a      	adds	r2, r3, #4
 8043244:	687b      	ldr	r3, [r7, #4]
 8043246:	659a      	str	r2, [r3, #88]	; 0x58
 8043248:	e007      	b.n	804325a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 804324a:	687b      	ldr	r3, [r7, #4]
 804324c:	681b      	ldr	r3, [r3, #0]
 804324e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8043252:	f023 0303 	bic.w	r3, r3, #3
 8043256:	687a      	ldr	r2, [r7, #4]
 8043258:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 804325a:	687b      	ldr	r3, [r7, #4]
 804325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 804325e:	4618      	mov	r0, r3
 8043260:	3714      	adds	r7, #20
 8043262:	46bd      	mov	sp, r7
 8043264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043268:	4770      	bx	lr
 804326a:	bf00      	nop
 804326c:	aaaaaaab 	.word	0xaaaaaaab
 8043270:	0804fadc 	.word	0x0804fadc

08043274 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8043274:	b480      	push	{r7}
 8043276:	b085      	sub	sp, #20
 8043278:	af00      	add	r7, sp, #0
 804327a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 804327c:	2300      	movs	r3, #0
 804327e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8043280:	687b      	ldr	r3, [r7, #4]
 8043282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043284:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8043286:	687b      	ldr	r3, [r7, #4]
 8043288:	699b      	ldr	r3, [r3, #24]
 804328a:	2b00      	cmp	r3, #0
 804328c:	d11f      	bne.n	80432ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 804328e:	68bb      	ldr	r3, [r7, #8]
 8043290:	2b03      	cmp	r3, #3
 8043292:	d856      	bhi.n	8043342 <DMA_CheckFifoParam+0xce>
 8043294:	a201      	add	r2, pc, #4	; (adr r2, 804329c <DMA_CheckFifoParam+0x28>)
 8043296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804329a:	bf00      	nop
 804329c:	080432ad 	.word	0x080432ad
 80432a0:	080432bf 	.word	0x080432bf
 80432a4:	080432ad 	.word	0x080432ad
 80432a8:	08043343 	.word	0x08043343
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80432ac:	687b      	ldr	r3, [r7, #4]
 80432ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80432b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80432b4:	2b00      	cmp	r3, #0
 80432b6:	d046      	beq.n	8043346 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80432b8:	2301      	movs	r3, #1
 80432ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80432bc:	e043      	b.n	8043346 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80432be:	687b      	ldr	r3, [r7, #4]
 80432c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80432c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80432c6:	d140      	bne.n	804334a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80432c8:	2301      	movs	r3, #1
 80432ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80432cc:	e03d      	b.n	804334a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80432ce:	687b      	ldr	r3, [r7, #4]
 80432d0:	699b      	ldr	r3, [r3, #24]
 80432d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80432d6:	d121      	bne.n	804331c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80432d8:	68bb      	ldr	r3, [r7, #8]
 80432da:	2b03      	cmp	r3, #3
 80432dc:	d837      	bhi.n	804334e <DMA_CheckFifoParam+0xda>
 80432de:	a201      	add	r2, pc, #4	; (adr r2, 80432e4 <DMA_CheckFifoParam+0x70>)
 80432e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80432e4:	080432f5 	.word	0x080432f5
 80432e8:	080432fb 	.word	0x080432fb
 80432ec:	080432f5 	.word	0x080432f5
 80432f0:	0804330d 	.word	0x0804330d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80432f4:	2301      	movs	r3, #1
 80432f6:	73fb      	strb	r3, [r7, #15]
      break;
 80432f8:	e030      	b.n	804335c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80432fa:	687b      	ldr	r3, [r7, #4]
 80432fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80432fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8043302:	2b00      	cmp	r3, #0
 8043304:	d025      	beq.n	8043352 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8043306:	2301      	movs	r3, #1
 8043308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804330a:	e022      	b.n	8043352 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 804330c:	687b      	ldr	r3, [r7, #4]
 804330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043310:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8043314:	d11f      	bne.n	8043356 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8043316:	2301      	movs	r3, #1
 8043318:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 804331a:	e01c      	b.n	8043356 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 804331c:	68bb      	ldr	r3, [r7, #8]
 804331e:	2b02      	cmp	r3, #2
 8043320:	d903      	bls.n	804332a <DMA_CheckFifoParam+0xb6>
 8043322:	68bb      	ldr	r3, [r7, #8]
 8043324:	2b03      	cmp	r3, #3
 8043326:	d003      	beq.n	8043330 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8043328:	e018      	b.n	804335c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 804332a:	2301      	movs	r3, #1
 804332c:	73fb      	strb	r3, [r7, #15]
      break;
 804332e:	e015      	b.n	804335c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8043330:	687b      	ldr	r3, [r7, #4]
 8043332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8043338:	2b00      	cmp	r3, #0
 804333a:	d00e      	beq.n	804335a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 804333c:	2301      	movs	r3, #1
 804333e:	73fb      	strb	r3, [r7, #15]
      break;
 8043340:	e00b      	b.n	804335a <DMA_CheckFifoParam+0xe6>
      break;
 8043342:	bf00      	nop
 8043344:	e00a      	b.n	804335c <DMA_CheckFifoParam+0xe8>
      break;
 8043346:	bf00      	nop
 8043348:	e008      	b.n	804335c <DMA_CheckFifoParam+0xe8>
      break;
 804334a:	bf00      	nop
 804334c:	e006      	b.n	804335c <DMA_CheckFifoParam+0xe8>
      break;
 804334e:	bf00      	nop
 8043350:	e004      	b.n	804335c <DMA_CheckFifoParam+0xe8>
      break;
 8043352:	bf00      	nop
 8043354:	e002      	b.n	804335c <DMA_CheckFifoParam+0xe8>
      break;   
 8043356:	bf00      	nop
 8043358:	e000      	b.n	804335c <DMA_CheckFifoParam+0xe8>
      break;
 804335a:	bf00      	nop
    }
  } 
  
  return status; 
 804335c:	7bfb      	ldrb	r3, [r7, #15]
}
 804335e:	4618      	mov	r0, r3
 8043360:	3714      	adds	r7, #20
 8043362:	46bd      	mov	sp, r7
 8043364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043368:	4770      	bx	lr
 804336a:	bf00      	nop

0804336c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 804336c:	b580      	push	{r7, lr}
 804336e:	b082      	sub	sp, #8
 8043370:	af00      	add	r7, sp, #0
 8043372:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8043374:	687b      	ldr	r3, [r7, #4]
 8043376:	2b00      	cmp	r3, #0
 8043378:	d101      	bne.n	804337e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 804337a:	2301      	movs	r3, #1
 804337c:	e03b      	b.n	80433f6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 804337e:	687b      	ldr	r3, [r7, #4]
 8043380:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8043384:	b2db      	uxtb	r3, r3
 8043386:	2b00      	cmp	r3, #0
 8043388:	d106      	bne.n	8043398 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 804338a:	687b      	ldr	r3, [r7, #4]
 804338c:	2200      	movs	r2, #0
 804338e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8043392:	6878      	ldr	r0, [r7, #4]
 8043394:	f7fd fdec 	bl	8040f70 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8043398:	687b      	ldr	r3, [r7, #4]
 804339a:	2202      	movs	r2, #2
 804339c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80433a0:	687b      	ldr	r3, [r7, #4]
 80433a2:	681b      	ldr	r3, [r3, #0]
 80433a4:	681b      	ldr	r3, [r3, #0]
 80433a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80433aa:	687b      	ldr	r3, [r7, #4]
 80433ac:	685a      	ldr	r2, [r3, #4]
 80433ae:	687b      	ldr	r3, [r7, #4]
 80433b0:	681b      	ldr	r3, [r3, #0]
 80433b2:	430a      	orrs	r2, r1
 80433b4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80433b6:	687b      	ldr	r3, [r7, #4]
 80433b8:	681b      	ldr	r3, [r3, #0]
 80433ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80433bc:	f023 0107 	bic.w	r1, r3, #7
 80433c0:	687b      	ldr	r3, [r7, #4]
 80433c2:	689a      	ldr	r2, [r3, #8]
 80433c4:	687b      	ldr	r3, [r7, #4]
 80433c6:	681b      	ldr	r3, [r3, #0]
 80433c8:	430a      	orrs	r2, r1
 80433ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80433cc:	687b      	ldr	r3, [r7, #4]
 80433ce:	681b      	ldr	r3, [r3, #0]
 80433d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80433d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80433d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80433da:	687a      	ldr	r2, [r7, #4]
 80433dc:	68d1      	ldr	r1, [r2, #12]
 80433de:	687a      	ldr	r2, [r7, #4]
 80433e0:	6812      	ldr	r2, [r2, #0]
 80433e2:	430b      	orrs	r3, r1
 80433e4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80433e6:	687b      	ldr	r3, [r7, #4]
 80433e8:	2200      	movs	r2, #0
 80433ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80433ec:	687b      	ldr	r3, [r7, #4]
 80433ee:	2201      	movs	r2, #1
 80433f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80433f4:	2300      	movs	r3, #0
}
 80433f6:	4618      	mov	r0, r3
 80433f8:	3708      	adds	r7, #8
 80433fa:	46bd      	mov	sp, r7
 80433fc:	bd80      	pop	{r7, pc}

080433fe <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80433fe:	b580      	push	{r7, lr}
 8043400:	b086      	sub	sp, #24
 8043402:	af02      	add	r7, sp, #8
 8043404:	60f8      	str	r0, [r7, #12]
 8043406:	60b9      	str	r1, [r7, #8]
 8043408:	607a      	str	r2, [r7, #4]
 804340a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 804340c:	68fb      	ldr	r3, [r7, #12]
 804340e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8043412:	2b01      	cmp	r3, #1
 8043414:	d101      	bne.n	804341a <HAL_DMA2D_Start+0x1c>
 8043416:	2302      	movs	r3, #2
 8043418:	e018      	b.n	804344c <HAL_DMA2D_Start+0x4e>
 804341a:	68fb      	ldr	r3, [r7, #12]
 804341c:	2201      	movs	r2, #1
 804341e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8043422:	68fb      	ldr	r3, [r7, #12]
 8043424:	2202      	movs	r2, #2
 8043426:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 804342a:	69bb      	ldr	r3, [r7, #24]
 804342c:	9300      	str	r3, [sp, #0]
 804342e:	683b      	ldr	r3, [r7, #0]
 8043430:	687a      	ldr	r2, [r7, #4]
 8043432:	68b9      	ldr	r1, [r7, #8]
 8043434:	68f8      	ldr	r0, [r7, #12]
 8043436:	f000 fa99 	bl	804396c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 804343a:	68fb      	ldr	r3, [r7, #12]
 804343c:	681b      	ldr	r3, [r3, #0]
 804343e:	681a      	ldr	r2, [r3, #0]
 8043440:	68fb      	ldr	r3, [r7, #12]
 8043442:	681b      	ldr	r3, [r3, #0]
 8043444:	f042 0201 	orr.w	r2, r2, #1
 8043448:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 804344a:	2300      	movs	r3, #0
}
 804344c:	4618      	mov	r0, r3
 804344e:	3710      	adds	r7, #16
 8043450:	46bd      	mov	sp, r7
 8043452:	bd80      	pop	{r7, pc}

08043454 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8043454:	b580      	push	{r7, lr}
 8043456:	b086      	sub	sp, #24
 8043458:	af00      	add	r7, sp, #0
 804345a:	6078      	str	r0, [r7, #4]
 804345c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 804345e:	2300      	movs	r3, #0
 8043460:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8043462:	687b      	ldr	r3, [r7, #4]
 8043464:	681b      	ldr	r3, [r3, #0]
 8043466:	681b      	ldr	r3, [r3, #0]
 8043468:	f003 0301 	and.w	r3, r3, #1
 804346c:	2b00      	cmp	r3, #0
 804346e:	d056      	beq.n	804351e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8043470:	f7ff fc90 	bl	8042d94 <HAL_GetTick>
 8043474:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8043476:	e04b      	b.n	8043510 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8043478:	687b      	ldr	r3, [r7, #4]
 804347a:	681b      	ldr	r3, [r3, #0]
 804347c:	685b      	ldr	r3, [r3, #4]
 804347e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8043480:	68fb      	ldr	r3, [r7, #12]
 8043482:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8043486:	2b00      	cmp	r3, #0
 8043488:	d023      	beq.n	80434d2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 804348a:	68fb      	ldr	r3, [r7, #12]
 804348c:	f003 0320 	and.w	r3, r3, #32
 8043490:	2b00      	cmp	r3, #0
 8043492:	d005      	beq.n	80434a0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8043494:	687b      	ldr	r3, [r7, #4]
 8043496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043498:	f043 0202 	orr.w	r2, r3, #2
 804349c:	687b      	ldr	r3, [r7, #4]
 804349e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80434a0:	68fb      	ldr	r3, [r7, #12]
 80434a2:	f003 0301 	and.w	r3, r3, #1
 80434a6:	2b00      	cmp	r3, #0
 80434a8:	d005      	beq.n	80434b6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80434aa:	687b      	ldr	r3, [r7, #4]
 80434ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80434ae:	f043 0201 	orr.w	r2, r3, #1
 80434b2:	687b      	ldr	r3, [r7, #4]
 80434b4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80434b6:	687b      	ldr	r3, [r7, #4]
 80434b8:	681b      	ldr	r3, [r3, #0]
 80434ba:	2221      	movs	r2, #33	; 0x21
 80434bc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80434be:	687b      	ldr	r3, [r7, #4]
 80434c0:	2204      	movs	r2, #4
 80434c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80434c6:	687b      	ldr	r3, [r7, #4]
 80434c8:	2200      	movs	r2, #0
 80434ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80434ce:	2301      	movs	r3, #1
 80434d0:	e0a5      	b.n	804361e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80434d2:	683b      	ldr	r3, [r7, #0]
 80434d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80434d8:	d01a      	beq.n	8043510 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80434da:	f7ff fc5b 	bl	8042d94 <HAL_GetTick>
 80434de:	4602      	mov	r2, r0
 80434e0:	697b      	ldr	r3, [r7, #20]
 80434e2:	1ad3      	subs	r3, r2, r3
 80434e4:	683a      	ldr	r2, [r7, #0]
 80434e6:	429a      	cmp	r2, r3
 80434e8:	d302      	bcc.n	80434f0 <HAL_DMA2D_PollForTransfer+0x9c>
 80434ea:	683b      	ldr	r3, [r7, #0]
 80434ec:	2b00      	cmp	r3, #0
 80434ee:	d10f      	bne.n	8043510 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80434f0:	687b      	ldr	r3, [r7, #4]
 80434f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80434f4:	f043 0220 	orr.w	r2, r3, #32
 80434f8:	687b      	ldr	r3, [r7, #4]
 80434fa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80434fc:	687b      	ldr	r3, [r7, #4]
 80434fe:	2203      	movs	r2, #3
 8043500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8043504:	687b      	ldr	r3, [r7, #4]
 8043506:	2200      	movs	r2, #0
 8043508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 804350c:	2303      	movs	r3, #3
 804350e:	e086      	b.n	804361e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8043510:	687b      	ldr	r3, [r7, #4]
 8043512:	681b      	ldr	r3, [r3, #0]
 8043514:	685b      	ldr	r3, [r3, #4]
 8043516:	f003 0302 	and.w	r3, r3, #2
 804351a:	2b00      	cmp	r3, #0
 804351c:	d0ac      	beq.n	8043478 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 804351e:	687b      	ldr	r3, [r7, #4]
 8043520:	681b      	ldr	r3, [r3, #0]
 8043522:	69db      	ldr	r3, [r3, #28]
 8043524:	f003 0320 	and.w	r3, r3, #32
 8043528:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 804352a:	687b      	ldr	r3, [r7, #4]
 804352c:	681b      	ldr	r3, [r3, #0]
 804352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043530:	f003 0320 	and.w	r3, r3, #32
 8043534:	693a      	ldr	r2, [r7, #16]
 8043536:	4313      	orrs	r3, r2
 8043538:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 804353a:	693b      	ldr	r3, [r7, #16]
 804353c:	2b00      	cmp	r3, #0
 804353e:	d061      	beq.n	8043604 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8043540:	f7ff fc28 	bl	8042d94 <HAL_GetTick>
 8043544:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8043546:	e056      	b.n	80435f6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8043548:	687b      	ldr	r3, [r7, #4]
 804354a:	681b      	ldr	r3, [r3, #0]
 804354c:	685b      	ldr	r3, [r3, #4]
 804354e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8043550:	68fb      	ldr	r3, [r7, #12]
 8043552:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8043556:	2b00      	cmp	r3, #0
 8043558:	d02e      	beq.n	80435b8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 804355a:	68fb      	ldr	r3, [r7, #12]
 804355c:	f003 0308 	and.w	r3, r3, #8
 8043560:	2b00      	cmp	r3, #0
 8043562:	d005      	beq.n	8043570 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8043564:	687b      	ldr	r3, [r7, #4]
 8043566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043568:	f043 0204 	orr.w	r2, r3, #4
 804356c:	687b      	ldr	r3, [r7, #4]
 804356e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8043570:	68fb      	ldr	r3, [r7, #12]
 8043572:	f003 0320 	and.w	r3, r3, #32
 8043576:	2b00      	cmp	r3, #0
 8043578:	d005      	beq.n	8043586 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 804357a:	687b      	ldr	r3, [r7, #4]
 804357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804357e:	f043 0202 	orr.w	r2, r3, #2
 8043582:	687b      	ldr	r3, [r7, #4]
 8043584:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8043586:	68fb      	ldr	r3, [r7, #12]
 8043588:	f003 0301 	and.w	r3, r3, #1
 804358c:	2b00      	cmp	r3, #0
 804358e:	d005      	beq.n	804359c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8043590:	687b      	ldr	r3, [r7, #4]
 8043592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043594:	f043 0201 	orr.w	r2, r3, #1
 8043598:	687b      	ldr	r3, [r7, #4]
 804359a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 804359c:	687b      	ldr	r3, [r7, #4]
 804359e:	681b      	ldr	r3, [r3, #0]
 80435a0:	2229      	movs	r2, #41	; 0x29
 80435a2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80435a4:	687b      	ldr	r3, [r7, #4]
 80435a6:	2204      	movs	r2, #4
 80435a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80435ac:	687b      	ldr	r3, [r7, #4]
 80435ae:	2200      	movs	r2, #0
 80435b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80435b4:	2301      	movs	r3, #1
 80435b6:	e032      	b.n	804361e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80435b8:	683b      	ldr	r3, [r7, #0]
 80435ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80435be:	d01a      	beq.n	80435f6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80435c0:	f7ff fbe8 	bl	8042d94 <HAL_GetTick>
 80435c4:	4602      	mov	r2, r0
 80435c6:	697b      	ldr	r3, [r7, #20]
 80435c8:	1ad3      	subs	r3, r2, r3
 80435ca:	683a      	ldr	r2, [r7, #0]
 80435cc:	429a      	cmp	r2, r3
 80435ce:	d302      	bcc.n	80435d6 <HAL_DMA2D_PollForTransfer+0x182>
 80435d0:	683b      	ldr	r3, [r7, #0]
 80435d2:	2b00      	cmp	r3, #0
 80435d4:	d10f      	bne.n	80435f6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80435d6:	687b      	ldr	r3, [r7, #4]
 80435d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80435da:	f043 0220 	orr.w	r2, r3, #32
 80435de:	687b      	ldr	r3, [r7, #4]
 80435e0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80435e2:	687b      	ldr	r3, [r7, #4]
 80435e4:	2203      	movs	r2, #3
 80435e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80435ea:	687b      	ldr	r3, [r7, #4]
 80435ec:	2200      	movs	r2, #0
 80435ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80435f2:	2303      	movs	r3, #3
 80435f4:	e013      	b.n	804361e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80435f6:	687b      	ldr	r3, [r7, #4]
 80435f8:	681b      	ldr	r3, [r3, #0]
 80435fa:	685b      	ldr	r3, [r3, #4]
 80435fc:	f003 0310 	and.w	r3, r3, #16
 8043600:	2b00      	cmp	r3, #0
 8043602:	d0a1      	beq.n	8043548 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8043604:	687b      	ldr	r3, [r7, #4]
 8043606:	681b      	ldr	r3, [r3, #0]
 8043608:	2212      	movs	r2, #18
 804360a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 804360c:	687b      	ldr	r3, [r7, #4]
 804360e:	2201      	movs	r2, #1
 8043610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8043614:	687b      	ldr	r3, [r7, #4]
 8043616:	2200      	movs	r2, #0
 8043618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 804361c:	2300      	movs	r3, #0
}
 804361e:	4618      	mov	r0, r3
 8043620:	3718      	adds	r7, #24
 8043622:	46bd      	mov	sp, r7
 8043624:	bd80      	pop	{r7, pc}

08043626 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8043626:	b580      	push	{r7, lr}
 8043628:	b084      	sub	sp, #16
 804362a:	af00      	add	r7, sp, #0
 804362c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 804362e:	687b      	ldr	r3, [r7, #4]
 8043630:	681b      	ldr	r3, [r3, #0]
 8043632:	685b      	ldr	r3, [r3, #4]
 8043634:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8043636:	687b      	ldr	r3, [r7, #4]
 8043638:	681b      	ldr	r3, [r3, #0]
 804363a:	681b      	ldr	r3, [r3, #0]
 804363c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 804363e:	68fb      	ldr	r3, [r7, #12]
 8043640:	f003 0301 	and.w	r3, r3, #1
 8043644:	2b00      	cmp	r3, #0
 8043646:	d026      	beq.n	8043696 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8043648:	68bb      	ldr	r3, [r7, #8]
 804364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804364e:	2b00      	cmp	r3, #0
 8043650:	d021      	beq.n	8043696 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8043652:	687b      	ldr	r3, [r7, #4]
 8043654:	681b      	ldr	r3, [r3, #0]
 8043656:	681a      	ldr	r2, [r3, #0]
 8043658:	687b      	ldr	r3, [r7, #4]
 804365a:	681b      	ldr	r3, [r3, #0]
 804365c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8043660:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8043662:	687b      	ldr	r3, [r7, #4]
 8043664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043666:	f043 0201 	orr.w	r2, r3, #1
 804366a:	687b      	ldr	r3, [r7, #4]
 804366c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 804366e:	687b      	ldr	r3, [r7, #4]
 8043670:	681b      	ldr	r3, [r3, #0]
 8043672:	2201      	movs	r2, #1
 8043674:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043676:	687b      	ldr	r3, [r7, #4]
 8043678:	2204      	movs	r2, #4
 804367a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 804367e:	687b      	ldr	r3, [r7, #4]
 8043680:	2200      	movs	r2, #0
 8043682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8043686:	687b      	ldr	r3, [r7, #4]
 8043688:	695b      	ldr	r3, [r3, #20]
 804368a:	2b00      	cmp	r3, #0
 804368c:	d003      	beq.n	8043696 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 804368e:	687b      	ldr	r3, [r7, #4]
 8043690:	695b      	ldr	r3, [r3, #20]
 8043692:	6878      	ldr	r0, [r7, #4]
 8043694:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8043696:	68fb      	ldr	r3, [r7, #12]
 8043698:	f003 0320 	and.w	r3, r3, #32
 804369c:	2b00      	cmp	r3, #0
 804369e:	d026      	beq.n	80436ee <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80436a0:	68bb      	ldr	r3, [r7, #8]
 80436a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80436a6:	2b00      	cmp	r3, #0
 80436a8:	d021      	beq.n	80436ee <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80436aa:	687b      	ldr	r3, [r7, #4]
 80436ac:	681b      	ldr	r3, [r3, #0]
 80436ae:	681a      	ldr	r2, [r3, #0]
 80436b0:	687b      	ldr	r3, [r7, #4]
 80436b2:	681b      	ldr	r3, [r3, #0]
 80436b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80436b8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80436ba:	687b      	ldr	r3, [r7, #4]
 80436bc:	681b      	ldr	r3, [r3, #0]
 80436be:	2220      	movs	r2, #32
 80436c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80436c2:	687b      	ldr	r3, [r7, #4]
 80436c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80436c6:	f043 0202 	orr.w	r2, r3, #2
 80436ca:	687b      	ldr	r3, [r7, #4]
 80436cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80436ce:	687b      	ldr	r3, [r7, #4]
 80436d0:	2204      	movs	r2, #4
 80436d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80436d6:	687b      	ldr	r3, [r7, #4]
 80436d8:	2200      	movs	r2, #0
 80436da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80436de:	687b      	ldr	r3, [r7, #4]
 80436e0:	695b      	ldr	r3, [r3, #20]
 80436e2:	2b00      	cmp	r3, #0
 80436e4:	d003      	beq.n	80436ee <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80436e6:	687b      	ldr	r3, [r7, #4]
 80436e8:	695b      	ldr	r3, [r3, #20]
 80436ea:	6878      	ldr	r0, [r7, #4]
 80436ec:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80436ee:	68fb      	ldr	r3, [r7, #12]
 80436f0:	f003 0308 	and.w	r3, r3, #8
 80436f4:	2b00      	cmp	r3, #0
 80436f6:	d026      	beq.n	8043746 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80436f8:	68bb      	ldr	r3, [r7, #8]
 80436fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80436fe:	2b00      	cmp	r3, #0
 8043700:	d021      	beq.n	8043746 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8043702:	687b      	ldr	r3, [r7, #4]
 8043704:	681b      	ldr	r3, [r3, #0]
 8043706:	681a      	ldr	r2, [r3, #0]
 8043708:	687b      	ldr	r3, [r7, #4]
 804370a:	681b      	ldr	r3, [r3, #0]
 804370c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8043710:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8043712:	687b      	ldr	r3, [r7, #4]
 8043714:	681b      	ldr	r3, [r3, #0]
 8043716:	2208      	movs	r2, #8
 8043718:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 804371a:	687b      	ldr	r3, [r7, #4]
 804371c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804371e:	f043 0204 	orr.w	r2, r3, #4
 8043722:	687b      	ldr	r3, [r7, #4]
 8043724:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043726:	687b      	ldr	r3, [r7, #4]
 8043728:	2204      	movs	r2, #4
 804372a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 804372e:	687b      	ldr	r3, [r7, #4]
 8043730:	2200      	movs	r2, #0
 8043732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8043736:	687b      	ldr	r3, [r7, #4]
 8043738:	695b      	ldr	r3, [r3, #20]
 804373a:	2b00      	cmp	r3, #0
 804373c:	d003      	beq.n	8043746 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 804373e:	687b      	ldr	r3, [r7, #4]
 8043740:	695b      	ldr	r3, [r3, #20]
 8043742:	6878      	ldr	r0, [r7, #4]
 8043744:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8043746:	68fb      	ldr	r3, [r7, #12]
 8043748:	f003 0304 	and.w	r3, r3, #4
 804374c:	2b00      	cmp	r3, #0
 804374e:	d013      	beq.n	8043778 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8043750:	68bb      	ldr	r3, [r7, #8]
 8043752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8043756:	2b00      	cmp	r3, #0
 8043758:	d00e      	beq.n	8043778 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 804375a:	687b      	ldr	r3, [r7, #4]
 804375c:	681b      	ldr	r3, [r3, #0]
 804375e:	681a      	ldr	r2, [r3, #0]
 8043760:	687b      	ldr	r3, [r7, #4]
 8043762:	681b      	ldr	r3, [r3, #0]
 8043764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8043768:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 804376a:	687b      	ldr	r3, [r7, #4]
 804376c:	681b      	ldr	r3, [r3, #0]
 804376e:	2204      	movs	r2, #4
 8043770:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8043772:	6878      	ldr	r0, [r7, #4]
 8043774:	f000 f853 	bl	804381e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8043778:	68fb      	ldr	r3, [r7, #12]
 804377a:	f003 0302 	and.w	r3, r3, #2
 804377e:	2b00      	cmp	r3, #0
 8043780:	d024      	beq.n	80437cc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8043782:	68bb      	ldr	r3, [r7, #8]
 8043784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8043788:	2b00      	cmp	r3, #0
 804378a:	d01f      	beq.n	80437cc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 804378c:	687b      	ldr	r3, [r7, #4]
 804378e:	681b      	ldr	r3, [r3, #0]
 8043790:	681a      	ldr	r2, [r3, #0]
 8043792:	687b      	ldr	r3, [r7, #4]
 8043794:	681b      	ldr	r3, [r3, #0]
 8043796:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 804379a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 804379c:	687b      	ldr	r3, [r7, #4]
 804379e:	681b      	ldr	r3, [r3, #0]
 80437a0:	2202      	movs	r2, #2
 80437a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80437a4:	687b      	ldr	r3, [r7, #4]
 80437a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80437a8:	687b      	ldr	r3, [r7, #4]
 80437aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80437ac:	687b      	ldr	r3, [r7, #4]
 80437ae:	2201      	movs	r2, #1
 80437b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80437b4:	687b      	ldr	r3, [r7, #4]
 80437b6:	2200      	movs	r2, #0
 80437b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80437bc:	687b      	ldr	r3, [r7, #4]
 80437be:	691b      	ldr	r3, [r3, #16]
 80437c0:	2b00      	cmp	r3, #0
 80437c2:	d003      	beq.n	80437cc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80437c4:	687b      	ldr	r3, [r7, #4]
 80437c6:	691b      	ldr	r3, [r3, #16]
 80437c8:	6878      	ldr	r0, [r7, #4]
 80437ca:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80437cc:	68fb      	ldr	r3, [r7, #12]
 80437ce:	f003 0310 	and.w	r3, r3, #16
 80437d2:	2b00      	cmp	r3, #0
 80437d4:	d01f      	beq.n	8043816 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80437d6:	68bb      	ldr	r3, [r7, #8]
 80437d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80437dc:	2b00      	cmp	r3, #0
 80437de:	d01a      	beq.n	8043816 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80437e0:	687b      	ldr	r3, [r7, #4]
 80437e2:	681b      	ldr	r3, [r3, #0]
 80437e4:	681a      	ldr	r2, [r3, #0]
 80437e6:	687b      	ldr	r3, [r7, #4]
 80437e8:	681b      	ldr	r3, [r3, #0]
 80437ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80437ee:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80437f0:	687b      	ldr	r3, [r7, #4]
 80437f2:	681b      	ldr	r3, [r3, #0]
 80437f4:	2210      	movs	r2, #16
 80437f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80437f8:	687b      	ldr	r3, [r7, #4]
 80437fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80437fc:	687b      	ldr	r3, [r7, #4]
 80437fe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8043800:	687b      	ldr	r3, [r7, #4]
 8043802:	2201      	movs	r2, #1
 8043804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043808:	687b      	ldr	r3, [r7, #4]
 804380a:	2200      	movs	r2, #0
 804380c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8043810:	6878      	ldr	r0, [r7, #4]
 8043812:	f000 f80e 	bl	8043832 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8043816:	bf00      	nop
 8043818:	3710      	adds	r7, #16
 804381a:	46bd      	mov	sp, r7
 804381c:	bd80      	pop	{r7, pc}

0804381e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 804381e:	b480      	push	{r7}
 8043820:	b083      	sub	sp, #12
 8043822:	af00      	add	r7, sp, #0
 8043824:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8043826:	bf00      	nop
 8043828:	370c      	adds	r7, #12
 804382a:	46bd      	mov	sp, r7
 804382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043830:	4770      	bx	lr

08043832 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8043832:	b480      	push	{r7}
 8043834:	b083      	sub	sp, #12
 8043836:	af00      	add	r7, sp, #0
 8043838:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 804383a:	bf00      	nop
 804383c:	370c      	adds	r7, #12
 804383e:	46bd      	mov	sp, r7
 8043840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043844:	4770      	bx	lr
	...

08043848 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8043848:	b480      	push	{r7}
 804384a:	b087      	sub	sp, #28
 804384c:	af00      	add	r7, sp, #0
 804384e:	6078      	str	r0, [r7, #4]
 8043850:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8043852:	687b      	ldr	r3, [r7, #4]
 8043854:	685b      	ldr	r3, [r3, #4]
 8043856:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 804385a:	687b      	ldr	r3, [r7, #4]
 804385c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8043860:	2b01      	cmp	r3, #1
 8043862:	d101      	bne.n	8043868 <HAL_DMA2D_ConfigLayer+0x20>
 8043864:	2302      	movs	r3, #2
 8043866:	e079      	b.n	804395c <HAL_DMA2D_ConfigLayer+0x114>
 8043868:	687b      	ldr	r3, [r7, #4]
 804386a:	2201      	movs	r2, #1
 804386c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8043870:	687b      	ldr	r3, [r7, #4]
 8043872:	2202      	movs	r2, #2
 8043874:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8043878:	683b      	ldr	r3, [r7, #0]
 804387a:	011b      	lsls	r3, r3, #4
 804387c:	3318      	adds	r3, #24
 804387e:	687a      	ldr	r2, [r7, #4]
 8043880:	4413      	add	r3, r2
 8043882:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8043884:	693b      	ldr	r3, [r7, #16]
 8043886:	685a      	ldr	r2, [r3, #4]
 8043888:	693b      	ldr	r3, [r7, #16]
 804388a:	689b      	ldr	r3, [r3, #8]
 804388c:	041b      	lsls	r3, r3, #16
 804388e:	4313      	orrs	r3, r2
 8043890:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8043892:	4b35      	ldr	r3, [pc, #212]	; (8043968 <HAL_DMA2D_ConfigLayer+0x120>)
 8043894:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8043896:	693b      	ldr	r3, [r7, #16]
 8043898:	685b      	ldr	r3, [r3, #4]
 804389a:	2b0a      	cmp	r3, #10
 804389c:	d003      	beq.n	80438a6 <HAL_DMA2D_ConfigLayer+0x5e>
 804389e:	693b      	ldr	r3, [r7, #16]
 80438a0:	685b      	ldr	r3, [r3, #4]
 80438a2:	2b09      	cmp	r3, #9
 80438a4:	d107      	bne.n	80438b6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80438a6:	693b      	ldr	r3, [r7, #16]
 80438a8:	68db      	ldr	r3, [r3, #12]
 80438aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80438ae:	697a      	ldr	r2, [r7, #20]
 80438b0:	4313      	orrs	r3, r2
 80438b2:	617b      	str	r3, [r7, #20]
 80438b4:	e005      	b.n	80438c2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80438b6:	693b      	ldr	r3, [r7, #16]
 80438b8:	68db      	ldr	r3, [r3, #12]
 80438ba:	061b      	lsls	r3, r3, #24
 80438bc:	697a      	ldr	r2, [r7, #20]
 80438be:	4313      	orrs	r3, r2
 80438c0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80438c2:	683b      	ldr	r3, [r7, #0]
 80438c4:	2b00      	cmp	r3, #0
 80438c6:	d120      	bne.n	804390a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80438c8:	687b      	ldr	r3, [r7, #4]
 80438ca:	681b      	ldr	r3, [r3, #0]
 80438cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80438ce:	68fb      	ldr	r3, [r7, #12]
 80438d0:	43db      	mvns	r3, r3
 80438d2:	ea02 0103 	and.w	r1, r2, r3
 80438d6:	687b      	ldr	r3, [r7, #4]
 80438d8:	681b      	ldr	r3, [r3, #0]
 80438da:	697a      	ldr	r2, [r7, #20]
 80438dc:	430a      	orrs	r2, r1
 80438de:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80438e0:	687b      	ldr	r3, [r7, #4]
 80438e2:	681b      	ldr	r3, [r3, #0]
 80438e4:	693a      	ldr	r2, [r7, #16]
 80438e6:	6812      	ldr	r2, [r2, #0]
 80438e8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80438ea:	693b      	ldr	r3, [r7, #16]
 80438ec:	685b      	ldr	r3, [r3, #4]
 80438ee:	2b0a      	cmp	r3, #10
 80438f0:	d003      	beq.n	80438fa <HAL_DMA2D_ConfigLayer+0xb2>
 80438f2:	693b      	ldr	r3, [r7, #16]
 80438f4:	685b      	ldr	r3, [r3, #4]
 80438f6:	2b09      	cmp	r3, #9
 80438f8:	d127      	bne.n	804394a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80438fa:	693b      	ldr	r3, [r7, #16]
 80438fc:	68da      	ldr	r2, [r3, #12]
 80438fe:	687b      	ldr	r3, [r7, #4]
 8043900:	681b      	ldr	r3, [r3, #0]
 8043902:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8043906:	629a      	str	r2, [r3, #40]	; 0x28
 8043908:	e01f      	b.n	804394a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 804390a:	687b      	ldr	r3, [r7, #4]
 804390c:	681b      	ldr	r3, [r3, #0]
 804390e:	69da      	ldr	r2, [r3, #28]
 8043910:	68fb      	ldr	r3, [r7, #12]
 8043912:	43db      	mvns	r3, r3
 8043914:	ea02 0103 	and.w	r1, r2, r3
 8043918:	687b      	ldr	r3, [r7, #4]
 804391a:	681b      	ldr	r3, [r3, #0]
 804391c:	697a      	ldr	r2, [r7, #20]
 804391e:	430a      	orrs	r2, r1
 8043920:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8043922:	687b      	ldr	r3, [r7, #4]
 8043924:	681b      	ldr	r3, [r3, #0]
 8043926:	693a      	ldr	r2, [r7, #16]
 8043928:	6812      	ldr	r2, [r2, #0]
 804392a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 804392c:	693b      	ldr	r3, [r7, #16]
 804392e:	685b      	ldr	r3, [r3, #4]
 8043930:	2b0a      	cmp	r3, #10
 8043932:	d003      	beq.n	804393c <HAL_DMA2D_ConfigLayer+0xf4>
 8043934:	693b      	ldr	r3, [r7, #16]
 8043936:	685b      	ldr	r3, [r3, #4]
 8043938:	2b09      	cmp	r3, #9
 804393a:	d106      	bne.n	804394a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 804393c:	693b      	ldr	r3, [r7, #16]
 804393e:	68da      	ldr	r2, [r3, #12]
 8043940:	687b      	ldr	r3, [r7, #4]
 8043942:	681b      	ldr	r3, [r3, #0]
 8043944:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8043948:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 804394a:	687b      	ldr	r3, [r7, #4]
 804394c:	2201      	movs	r2, #1
 804394e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8043952:	687b      	ldr	r3, [r7, #4]
 8043954:	2200      	movs	r2, #0
 8043956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 804395a:	2300      	movs	r3, #0
}
 804395c:	4618      	mov	r0, r3
 804395e:	371c      	adds	r7, #28
 8043960:	46bd      	mov	sp, r7
 8043962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043966:	4770      	bx	lr
 8043968:	ff03000f 	.word	0xff03000f

0804396c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 804396c:	b480      	push	{r7}
 804396e:	b08b      	sub	sp, #44	; 0x2c
 8043970:	af00      	add	r7, sp, #0
 8043972:	60f8      	str	r0, [r7, #12]
 8043974:	60b9      	str	r1, [r7, #8]
 8043976:	607a      	str	r2, [r7, #4]
 8043978:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 804397a:	68fb      	ldr	r3, [r7, #12]
 804397c:	681b      	ldr	r3, [r3, #0]
 804397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043980:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8043984:	683b      	ldr	r3, [r7, #0]
 8043986:	041a      	lsls	r2, r3, #16
 8043988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804398a:	431a      	orrs	r2, r3
 804398c:	68fb      	ldr	r3, [r7, #12]
 804398e:	681b      	ldr	r3, [r3, #0]
 8043990:	430a      	orrs	r2, r1
 8043992:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8043994:	68fb      	ldr	r3, [r7, #12]
 8043996:	681b      	ldr	r3, [r3, #0]
 8043998:	687a      	ldr	r2, [r7, #4]
 804399a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 804399c:	68fb      	ldr	r3, [r7, #12]
 804399e:	685b      	ldr	r3, [r3, #4]
 80439a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80439a4:	d174      	bne.n	8043a90 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80439a6:	68bb      	ldr	r3, [r7, #8]
 80439a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80439ac:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80439ae:	68bb      	ldr	r3, [r7, #8]
 80439b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80439b4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80439b6:	68bb      	ldr	r3, [r7, #8]
 80439b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80439bc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80439be:	68bb      	ldr	r3, [r7, #8]
 80439c0:	b2db      	uxtb	r3, r3
 80439c2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80439c4:	68fb      	ldr	r3, [r7, #12]
 80439c6:	689b      	ldr	r3, [r3, #8]
 80439c8:	2b00      	cmp	r3, #0
 80439ca:	d108      	bne.n	80439de <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80439cc:	69ba      	ldr	r2, [r7, #24]
 80439ce:	69fb      	ldr	r3, [r7, #28]
 80439d0:	431a      	orrs	r2, r3
 80439d2:	6a3b      	ldr	r3, [r7, #32]
 80439d4:	4313      	orrs	r3, r2
 80439d6:	697a      	ldr	r2, [r7, #20]
 80439d8:	4313      	orrs	r3, r2
 80439da:	627b      	str	r3, [r7, #36]	; 0x24
 80439dc:	e053      	b.n	8043a86 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80439de:	68fb      	ldr	r3, [r7, #12]
 80439e0:	689b      	ldr	r3, [r3, #8]
 80439e2:	2b01      	cmp	r3, #1
 80439e4:	d106      	bne.n	80439f4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80439e6:	69ba      	ldr	r2, [r7, #24]
 80439e8:	69fb      	ldr	r3, [r7, #28]
 80439ea:	4313      	orrs	r3, r2
 80439ec:	697a      	ldr	r2, [r7, #20]
 80439ee:	4313      	orrs	r3, r2
 80439f0:	627b      	str	r3, [r7, #36]	; 0x24
 80439f2:	e048      	b.n	8043a86 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80439f4:	68fb      	ldr	r3, [r7, #12]
 80439f6:	689b      	ldr	r3, [r3, #8]
 80439f8:	2b02      	cmp	r3, #2
 80439fa:	d111      	bne.n	8043a20 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80439fc:	69fb      	ldr	r3, [r7, #28]
 80439fe:	0cdb      	lsrs	r3, r3, #19
 8043a00:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8043a02:	69bb      	ldr	r3, [r7, #24]
 8043a04:	0a9b      	lsrs	r3, r3, #10
 8043a06:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8043a08:	697b      	ldr	r3, [r7, #20]
 8043a0a:	08db      	lsrs	r3, r3, #3
 8043a0c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8043a0e:	69bb      	ldr	r3, [r7, #24]
 8043a10:	015a      	lsls	r2, r3, #5
 8043a12:	69fb      	ldr	r3, [r7, #28]
 8043a14:	02db      	lsls	r3, r3, #11
 8043a16:	4313      	orrs	r3, r2
 8043a18:	697a      	ldr	r2, [r7, #20]
 8043a1a:	4313      	orrs	r3, r2
 8043a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8043a1e:	e032      	b.n	8043a86 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8043a20:	68fb      	ldr	r3, [r7, #12]
 8043a22:	689b      	ldr	r3, [r3, #8]
 8043a24:	2b03      	cmp	r3, #3
 8043a26:	d117      	bne.n	8043a58 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8043a28:	6a3b      	ldr	r3, [r7, #32]
 8043a2a:	0fdb      	lsrs	r3, r3, #31
 8043a2c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8043a2e:	69fb      	ldr	r3, [r7, #28]
 8043a30:	0cdb      	lsrs	r3, r3, #19
 8043a32:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8043a34:	69bb      	ldr	r3, [r7, #24]
 8043a36:	0adb      	lsrs	r3, r3, #11
 8043a38:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8043a3a:	697b      	ldr	r3, [r7, #20]
 8043a3c:	08db      	lsrs	r3, r3, #3
 8043a3e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8043a40:	69bb      	ldr	r3, [r7, #24]
 8043a42:	015a      	lsls	r2, r3, #5
 8043a44:	69fb      	ldr	r3, [r7, #28]
 8043a46:	029b      	lsls	r3, r3, #10
 8043a48:	431a      	orrs	r2, r3
 8043a4a:	6a3b      	ldr	r3, [r7, #32]
 8043a4c:	03db      	lsls	r3, r3, #15
 8043a4e:	4313      	orrs	r3, r2
 8043a50:	697a      	ldr	r2, [r7, #20]
 8043a52:	4313      	orrs	r3, r2
 8043a54:	627b      	str	r3, [r7, #36]	; 0x24
 8043a56:	e016      	b.n	8043a86 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8043a58:	6a3b      	ldr	r3, [r7, #32]
 8043a5a:	0f1b      	lsrs	r3, r3, #28
 8043a5c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8043a5e:	69fb      	ldr	r3, [r7, #28]
 8043a60:	0d1b      	lsrs	r3, r3, #20
 8043a62:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8043a64:	69bb      	ldr	r3, [r7, #24]
 8043a66:	0b1b      	lsrs	r3, r3, #12
 8043a68:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8043a6a:	697b      	ldr	r3, [r7, #20]
 8043a6c:	091b      	lsrs	r3, r3, #4
 8043a6e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8043a70:	69bb      	ldr	r3, [r7, #24]
 8043a72:	011a      	lsls	r2, r3, #4
 8043a74:	69fb      	ldr	r3, [r7, #28]
 8043a76:	021b      	lsls	r3, r3, #8
 8043a78:	431a      	orrs	r2, r3
 8043a7a:	6a3b      	ldr	r3, [r7, #32]
 8043a7c:	031b      	lsls	r3, r3, #12
 8043a7e:	4313      	orrs	r3, r2
 8043a80:	697a      	ldr	r2, [r7, #20]
 8043a82:	4313      	orrs	r3, r2
 8043a84:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8043a86:	68fb      	ldr	r3, [r7, #12]
 8043a88:	681b      	ldr	r3, [r3, #0]
 8043a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8043a8c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8043a8e:	e003      	b.n	8043a98 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8043a90:	68fb      	ldr	r3, [r7, #12]
 8043a92:	681b      	ldr	r3, [r3, #0]
 8043a94:	68ba      	ldr	r2, [r7, #8]
 8043a96:	60da      	str	r2, [r3, #12]
}
 8043a98:	bf00      	nop
 8043a9a:	372c      	adds	r7, #44	; 0x2c
 8043a9c:	46bd      	mov	sp, r7
 8043a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043aa2:	4770      	bx	lr

08043aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8043aa4:	b480      	push	{r7}
 8043aa6:	b089      	sub	sp, #36	; 0x24
 8043aa8:	af00      	add	r7, sp, #0
 8043aaa:	6078      	str	r0, [r7, #4]
 8043aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8043aae:	2300      	movs	r3, #0
 8043ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8043ab2:	2300      	movs	r3, #0
 8043ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8043ab6:	2300      	movs	r3, #0
 8043ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043aba:	2300      	movs	r3, #0
 8043abc:	61fb      	str	r3, [r7, #28]
 8043abe:	e177      	b.n	8043db0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8043ac0:	2201      	movs	r2, #1
 8043ac2:	69fb      	ldr	r3, [r7, #28]
 8043ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8043ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8043aca:	683b      	ldr	r3, [r7, #0]
 8043acc:	681b      	ldr	r3, [r3, #0]
 8043ace:	697a      	ldr	r2, [r7, #20]
 8043ad0:	4013      	ands	r3, r2
 8043ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8043ad4:	693a      	ldr	r2, [r7, #16]
 8043ad6:	697b      	ldr	r3, [r7, #20]
 8043ad8:	429a      	cmp	r2, r3
 8043ada:	f040 8166 	bne.w	8043daa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8043ade:	683b      	ldr	r3, [r7, #0]
 8043ae0:	685b      	ldr	r3, [r3, #4]
 8043ae2:	f003 0303 	and.w	r3, r3, #3
 8043ae6:	2b01      	cmp	r3, #1
 8043ae8:	d005      	beq.n	8043af6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8043aea:	683b      	ldr	r3, [r7, #0]
 8043aec:	685b      	ldr	r3, [r3, #4]
 8043aee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8043af2:	2b02      	cmp	r3, #2
 8043af4:	d130      	bne.n	8043b58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8043af6:	687b      	ldr	r3, [r7, #4]
 8043af8:	689b      	ldr	r3, [r3, #8]
 8043afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8043afc:	69fb      	ldr	r3, [r7, #28]
 8043afe:	005b      	lsls	r3, r3, #1
 8043b00:	2203      	movs	r2, #3
 8043b02:	fa02 f303 	lsl.w	r3, r2, r3
 8043b06:	43db      	mvns	r3, r3
 8043b08:	69ba      	ldr	r2, [r7, #24]
 8043b0a:	4013      	ands	r3, r2
 8043b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8043b0e:	683b      	ldr	r3, [r7, #0]
 8043b10:	68da      	ldr	r2, [r3, #12]
 8043b12:	69fb      	ldr	r3, [r7, #28]
 8043b14:	005b      	lsls	r3, r3, #1
 8043b16:	fa02 f303 	lsl.w	r3, r2, r3
 8043b1a:	69ba      	ldr	r2, [r7, #24]
 8043b1c:	4313      	orrs	r3, r2
 8043b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8043b20:	687b      	ldr	r3, [r7, #4]
 8043b22:	69ba      	ldr	r2, [r7, #24]
 8043b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8043b26:	687b      	ldr	r3, [r7, #4]
 8043b28:	685b      	ldr	r3, [r3, #4]
 8043b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8043b2c:	2201      	movs	r2, #1
 8043b2e:	69fb      	ldr	r3, [r7, #28]
 8043b30:	fa02 f303 	lsl.w	r3, r2, r3
 8043b34:	43db      	mvns	r3, r3
 8043b36:	69ba      	ldr	r2, [r7, #24]
 8043b38:	4013      	ands	r3, r2
 8043b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8043b3c:	683b      	ldr	r3, [r7, #0]
 8043b3e:	685b      	ldr	r3, [r3, #4]
 8043b40:	091b      	lsrs	r3, r3, #4
 8043b42:	f003 0201 	and.w	r2, r3, #1
 8043b46:	69fb      	ldr	r3, [r7, #28]
 8043b48:	fa02 f303 	lsl.w	r3, r2, r3
 8043b4c:	69ba      	ldr	r2, [r7, #24]
 8043b4e:	4313      	orrs	r3, r2
 8043b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8043b52:	687b      	ldr	r3, [r7, #4]
 8043b54:	69ba      	ldr	r2, [r7, #24]
 8043b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8043b58:	683b      	ldr	r3, [r7, #0]
 8043b5a:	685b      	ldr	r3, [r3, #4]
 8043b5c:	f003 0303 	and.w	r3, r3, #3
 8043b60:	2b03      	cmp	r3, #3
 8043b62:	d017      	beq.n	8043b94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8043b64:	687b      	ldr	r3, [r7, #4]
 8043b66:	68db      	ldr	r3, [r3, #12]
 8043b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8043b6a:	69fb      	ldr	r3, [r7, #28]
 8043b6c:	005b      	lsls	r3, r3, #1
 8043b6e:	2203      	movs	r2, #3
 8043b70:	fa02 f303 	lsl.w	r3, r2, r3
 8043b74:	43db      	mvns	r3, r3
 8043b76:	69ba      	ldr	r2, [r7, #24]
 8043b78:	4013      	ands	r3, r2
 8043b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8043b7c:	683b      	ldr	r3, [r7, #0]
 8043b7e:	689a      	ldr	r2, [r3, #8]
 8043b80:	69fb      	ldr	r3, [r7, #28]
 8043b82:	005b      	lsls	r3, r3, #1
 8043b84:	fa02 f303 	lsl.w	r3, r2, r3
 8043b88:	69ba      	ldr	r2, [r7, #24]
 8043b8a:	4313      	orrs	r3, r2
 8043b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8043b8e:	687b      	ldr	r3, [r7, #4]
 8043b90:	69ba      	ldr	r2, [r7, #24]
 8043b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8043b94:	683b      	ldr	r3, [r7, #0]
 8043b96:	685b      	ldr	r3, [r3, #4]
 8043b98:	f003 0303 	and.w	r3, r3, #3
 8043b9c:	2b02      	cmp	r3, #2
 8043b9e:	d123      	bne.n	8043be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8043ba0:	69fb      	ldr	r3, [r7, #28]
 8043ba2:	08da      	lsrs	r2, r3, #3
 8043ba4:	687b      	ldr	r3, [r7, #4]
 8043ba6:	3208      	adds	r2, #8
 8043ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8043bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8043bae:	69fb      	ldr	r3, [r7, #28]
 8043bb0:	f003 0307 	and.w	r3, r3, #7
 8043bb4:	009b      	lsls	r3, r3, #2
 8043bb6:	220f      	movs	r2, #15
 8043bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8043bbc:	43db      	mvns	r3, r3
 8043bbe:	69ba      	ldr	r2, [r7, #24]
 8043bc0:	4013      	ands	r3, r2
 8043bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8043bc4:	683b      	ldr	r3, [r7, #0]
 8043bc6:	691a      	ldr	r2, [r3, #16]
 8043bc8:	69fb      	ldr	r3, [r7, #28]
 8043bca:	f003 0307 	and.w	r3, r3, #7
 8043bce:	009b      	lsls	r3, r3, #2
 8043bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8043bd4:	69ba      	ldr	r2, [r7, #24]
 8043bd6:	4313      	orrs	r3, r2
 8043bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8043bda:	69fb      	ldr	r3, [r7, #28]
 8043bdc:	08da      	lsrs	r2, r3, #3
 8043bde:	687b      	ldr	r3, [r7, #4]
 8043be0:	3208      	adds	r2, #8
 8043be2:	69b9      	ldr	r1, [r7, #24]
 8043be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8043be8:	687b      	ldr	r3, [r7, #4]
 8043bea:	681b      	ldr	r3, [r3, #0]
 8043bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8043bee:	69fb      	ldr	r3, [r7, #28]
 8043bf0:	005b      	lsls	r3, r3, #1
 8043bf2:	2203      	movs	r2, #3
 8043bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8043bf8:	43db      	mvns	r3, r3
 8043bfa:	69ba      	ldr	r2, [r7, #24]
 8043bfc:	4013      	ands	r3, r2
 8043bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8043c00:	683b      	ldr	r3, [r7, #0]
 8043c02:	685b      	ldr	r3, [r3, #4]
 8043c04:	f003 0203 	and.w	r2, r3, #3
 8043c08:	69fb      	ldr	r3, [r7, #28]
 8043c0a:	005b      	lsls	r3, r3, #1
 8043c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8043c10:	69ba      	ldr	r2, [r7, #24]
 8043c12:	4313      	orrs	r3, r2
 8043c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8043c16:	687b      	ldr	r3, [r7, #4]
 8043c18:	69ba      	ldr	r2, [r7, #24]
 8043c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8043c1c:	683b      	ldr	r3, [r7, #0]
 8043c1e:	685b      	ldr	r3, [r3, #4]
 8043c20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8043c24:	2b00      	cmp	r3, #0
 8043c26:	f000 80c0 	beq.w	8043daa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8043c2a:	2300      	movs	r3, #0
 8043c2c:	60fb      	str	r3, [r7, #12]
 8043c2e:	4b66      	ldr	r3, [pc, #408]	; (8043dc8 <HAL_GPIO_Init+0x324>)
 8043c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043c32:	4a65      	ldr	r2, [pc, #404]	; (8043dc8 <HAL_GPIO_Init+0x324>)
 8043c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8043c38:	6453      	str	r3, [r2, #68]	; 0x44
 8043c3a:	4b63      	ldr	r3, [pc, #396]	; (8043dc8 <HAL_GPIO_Init+0x324>)
 8043c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8043c42:	60fb      	str	r3, [r7, #12]
 8043c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8043c46:	4a61      	ldr	r2, [pc, #388]	; (8043dcc <HAL_GPIO_Init+0x328>)
 8043c48:	69fb      	ldr	r3, [r7, #28]
 8043c4a:	089b      	lsrs	r3, r3, #2
 8043c4c:	3302      	adds	r3, #2
 8043c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8043c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8043c54:	69fb      	ldr	r3, [r7, #28]
 8043c56:	f003 0303 	and.w	r3, r3, #3
 8043c5a:	009b      	lsls	r3, r3, #2
 8043c5c:	220f      	movs	r2, #15
 8043c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8043c62:	43db      	mvns	r3, r3
 8043c64:	69ba      	ldr	r2, [r7, #24]
 8043c66:	4013      	ands	r3, r2
 8043c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8043c6a:	687b      	ldr	r3, [r7, #4]
 8043c6c:	4a58      	ldr	r2, [pc, #352]	; (8043dd0 <HAL_GPIO_Init+0x32c>)
 8043c6e:	4293      	cmp	r3, r2
 8043c70:	d037      	beq.n	8043ce2 <HAL_GPIO_Init+0x23e>
 8043c72:	687b      	ldr	r3, [r7, #4]
 8043c74:	4a57      	ldr	r2, [pc, #348]	; (8043dd4 <HAL_GPIO_Init+0x330>)
 8043c76:	4293      	cmp	r3, r2
 8043c78:	d031      	beq.n	8043cde <HAL_GPIO_Init+0x23a>
 8043c7a:	687b      	ldr	r3, [r7, #4]
 8043c7c:	4a56      	ldr	r2, [pc, #344]	; (8043dd8 <HAL_GPIO_Init+0x334>)
 8043c7e:	4293      	cmp	r3, r2
 8043c80:	d02b      	beq.n	8043cda <HAL_GPIO_Init+0x236>
 8043c82:	687b      	ldr	r3, [r7, #4]
 8043c84:	4a55      	ldr	r2, [pc, #340]	; (8043ddc <HAL_GPIO_Init+0x338>)
 8043c86:	4293      	cmp	r3, r2
 8043c88:	d025      	beq.n	8043cd6 <HAL_GPIO_Init+0x232>
 8043c8a:	687b      	ldr	r3, [r7, #4]
 8043c8c:	4a54      	ldr	r2, [pc, #336]	; (8043de0 <HAL_GPIO_Init+0x33c>)
 8043c8e:	4293      	cmp	r3, r2
 8043c90:	d01f      	beq.n	8043cd2 <HAL_GPIO_Init+0x22e>
 8043c92:	687b      	ldr	r3, [r7, #4]
 8043c94:	4a53      	ldr	r2, [pc, #332]	; (8043de4 <HAL_GPIO_Init+0x340>)
 8043c96:	4293      	cmp	r3, r2
 8043c98:	d019      	beq.n	8043cce <HAL_GPIO_Init+0x22a>
 8043c9a:	687b      	ldr	r3, [r7, #4]
 8043c9c:	4a52      	ldr	r2, [pc, #328]	; (8043de8 <HAL_GPIO_Init+0x344>)
 8043c9e:	4293      	cmp	r3, r2
 8043ca0:	d013      	beq.n	8043cca <HAL_GPIO_Init+0x226>
 8043ca2:	687b      	ldr	r3, [r7, #4]
 8043ca4:	4a51      	ldr	r2, [pc, #324]	; (8043dec <HAL_GPIO_Init+0x348>)
 8043ca6:	4293      	cmp	r3, r2
 8043ca8:	d00d      	beq.n	8043cc6 <HAL_GPIO_Init+0x222>
 8043caa:	687b      	ldr	r3, [r7, #4]
 8043cac:	4a50      	ldr	r2, [pc, #320]	; (8043df0 <HAL_GPIO_Init+0x34c>)
 8043cae:	4293      	cmp	r3, r2
 8043cb0:	d007      	beq.n	8043cc2 <HAL_GPIO_Init+0x21e>
 8043cb2:	687b      	ldr	r3, [r7, #4]
 8043cb4:	4a4f      	ldr	r2, [pc, #316]	; (8043df4 <HAL_GPIO_Init+0x350>)
 8043cb6:	4293      	cmp	r3, r2
 8043cb8:	d101      	bne.n	8043cbe <HAL_GPIO_Init+0x21a>
 8043cba:	2309      	movs	r3, #9
 8043cbc:	e012      	b.n	8043ce4 <HAL_GPIO_Init+0x240>
 8043cbe:	230a      	movs	r3, #10
 8043cc0:	e010      	b.n	8043ce4 <HAL_GPIO_Init+0x240>
 8043cc2:	2308      	movs	r3, #8
 8043cc4:	e00e      	b.n	8043ce4 <HAL_GPIO_Init+0x240>
 8043cc6:	2307      	movs	r3, #7
 8043cc8:	e00c      	b.n	8043ce4 <HAL_GPIO_Init+0x240>
 8043cca:	2306      	movs	r3, #6
 8043ccc:	e00a      	b.n	8043ce4 <HAL_GPIO_Init+0x240>
 8043cce:	2305      	movs	r3, #5
 8043cd0:	e008      	b.n	8043ce4 <HAL_GPIO_Init+0x240>
 8043cd2:	2304      	movs	r3, #4
 8043cd4:	e006      	b.n	8043ce4 <HAL_GPIO_Init+0x240>
 8043cd6:	2303      	movs	r3, #3
 8043cd8:	e004      	b.n	8043ce4 <HAL_GPIO_Init+0x240>
 8043cda:	2302      	movs	r3, #2
 8043cdc:	e002      	b.n	8043ce4 <HAL_GPIO_Init+0x240>
 8043cde:	2301      	movs	r3, #1
 8043ce0:	e000      	b.n	8043ce4 <HAL_GPIO_Init+0x240>
 8043ce2:	2300      	movs	r3, #0
 8043ce4:	69fa      	ldr	r2, [r7, #28]
 8043ce6:	f002 0203 	and.w	r2, r2, #3
 8043cea:	0092      	lsls	r2, r2, #2
 8043cec:	4093      	lsls	r3, r2
 8043cee:	69ba      	ldr	r2, [r7, #24]
 8043cf0:	4313      	orrs	r3, r2
 8043cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8043cf4:	4935      	ldr	r1, [pc, #212]	; (8043dcc <HAL_GPIO_Init+0x328>)
 8043cf6:	69fb      	ldr	r3, [r7, #28]
 8043cf8:	089b      	lsrs	r3, r3, #2
 8043cfa:	3302      	adds	r3, #2
 8043cfc:	69ba      	ldr	r2, [r7, #24]
 8043cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8043d02:	4b3d      	ldr	r3, [pc, #244]	; (8043df8 <HAL_GPIO_Init+0x354>)
 8043d04:	689b      	ldr	r3, [r3, #8]
 8043d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043d08:	693b      	ldr	r3, [r7, #16]
 8043d0a:	43db      	mvns	r3, r3
 8043d0c:	69ba      	ldr	r2, [r7, #24]
 8043d0e:	4013      	ands	r3, r2
 8043d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8043d12:	683b      	ldr	r3, [r7, #0]
 8043d14:	685b      	ldr	r3, [r3, #4]
 8043d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8043d1a:	2b00      	cmp	r3, #0
 8043d1c:	d003      	beq.n	8043d26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8043d1e:	69ba      	ldr	r2, [r7, #24]
 8043d20:	693b      	ldr	r3, [r7, #16]
 8043d22:	4313      	orrs	r3, r2
 8043d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8043d26:	4a34      	ldr	r2, [pc, #208]	; (8043df8 <HAL_GPIO_Init+0x354>)
 8043d28:	69bb      	ldr	r3, [r7, #24]
 8043d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8043d2c:	4b32      	ldr	r3, [pc, #200]	; (8043df8 <HAL_GPIO_Init+0x354>)
 8043d2e:	68db      	ldr	r3, [r3, #12]
 8043d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043d32:	693b      	ldr	r3, [r7, #16]
 8043d34:	43db      	mvns	r3, r3
 8043d36:	69ba      	ldr	r2, [r7, #24]
 8043d38:	4013      	ands	r3, r2
 8043d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8043d3c:	683b      	ldr	r3, [r7, #0]
 8043d3e:	685b      	ldr	r3, [r3, #4]
 8043d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8043d44:	2b00      	cmp	r3, #0
 8043d46:	d003      	beq.n	8043d50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8043d48:	69ba      	ldr	r2, [r7, #24]
 8043d4a:	693b      	ldr	r3, [r7, #16]
 8043d4c:	4313      	orrs	r3, r2
 8043d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8043d50:	4a29      	ldr	r2, [pc, #164]	; (8043df8 <HAL_GPIO_Init+0x354>)
 8043d52:	69bb      	ldr	r3, [r7, #24]
 8043d54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8043d56:	4b28      	ldr	r3, [pc, #160]	; (8043df8 <HAL_GPIO_Init+0x354>)
 8043d58:	685b      	ldr	r3, [r3, #4]
 8043d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043d5c:	693b      	ldr	r3, [r7, #16]
 8043d5e:	43db      	mvns	r3, r3
 8043d60:	69ba      	ldr	r2, [r7, #24]
 8043d62:	4013      	ands	r3, r2
 8043d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8043d66:	683b      	ldr	r3, [r7, #0]
 8043d68:	685b      	ldr	r3, [r3, #4]
 8043d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043d6e:	2b00      	cmp	r3, #0
 8043d70:	d003      	beq.n	8043d7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8043d72:	69ba      	ldr	r2, [r7, #24]
 8043d74:	693b      	ldr	r3, [r7, #16]
 8043d76:	4313      	orrs	r3, r2
 8043d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8043d7a:	4a1f      	ldr	r2, [pc, #124]	; (8043df8 <HAL_GPIO_Init+0x354>)
 8043d7c:	69bb      	ldr	r3, [r7, #24]
 8043d7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8043d80:	4b1d      	ldr	r3, [pc, #116]	; (8043df8 <HAL_GPIO_Init+0x354>)
 8043d82:	681b      	ldr	r3, [r3, #0]
 8043d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043d86:	693b      	ldr	r3, [r7, #16]
 8043d88:	43db      	mvns	r3, r3
 8043d8a:	69ba      	ldr	r2, [r7, #24]
 8043d8c:	4013      	ands	r3, r2
 8043d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8043d90:	683b      	ldr	r3, [r7, #0]
 8043d92:	685b      	ldr	r3, [r3, #4]
 8043d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8043d98:	2b00      	cmp	r3, #0
 8043d9a:	d003      	beq.n	8043da4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8043d9c:	69ba      	ldr	r2, [r7, #24]
 8043d9e:	693b      	ldr	r3, [r7, #16]
 8043da0:	4313      	orrs	r3, r2
 8043da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8043da4:	4a14      	ldr	r2, [pc, #80]	; (8043df8 <HAL_GPIO_Init+0x354>)
 8043da6:	69bb      	ldr	r3, [r7, #24]
 8043da8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043daa:	69fb      	ldr	r3, [r7, #28]
 8043dac:	3301      	adds	r3, #1
 8043dae:	61fb      	str	r3, [r7, #28]
 8043db0:	69fb      	ldr	r3, [r7, #28]
 8043db2:	2b0f      	cmp	r3, #15
 8043db4:	f67f ae84 	bls.w	8043ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8043db8:	bf00      	nop
 8043dba:	bf00      	nop
 8043dbc:	3724      	adds	r7, #36	; 0x24
 8043dbe:	46bd      	mov	sp, r7
 8043dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043dc4:	4770      	bx	lr
 8043dc6:	bf00      	nop
 8043dc8:	40023800 	.word	0x40023800
 8043dcc:	40013800 	.word	0x40013800
 8043dd0:	40020000 	.word	0x40020000
 8043dd4:	40020400 	.word	0x40020400
 8043dd8:	40020800 	.word	0x40020800
 8043ddc:	40020c00 	.word	0x40020c00
 8043de0:	40021000 	.word	0x40021000
 8043de4:	40021400 	.word	0x40021400
 8043de8:	40021800 	.word	0x40021800
 8043dec:	40021c00 	.word	0x40021c00
 8043df0:	40022000 	.word	0x40022000
 8043df4:	40022400 	.word	0x40022400
 8043df8:	40013c00 	.word	0x40013c00

08043dfc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8043dfc:	b480      	push	{r7}
 8043dfe:	b087      	sub	sp, #28
 8043e00:	af00      	add	r7, sp, #0
 8043e02:	6078      	str	r0, [r7, #4]
 8043e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8043e06:	2300      	movs	r3, #0
 8043e08:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8043e0a:	2300      	movs	r3, #0
 8043e0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8043e0e:	2300      	movs	r3, #0
 8043e10:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043e12:	2300      	movs	r3, #0
 8043e14:	617b      	str	r3, [r7, #20]
 8043e16:	e0d9      	b.n	8043fcc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8043e18:	2201      	movs	r2, #1
 8043e1a:	697b      	ldr	r3, [r7, #20]
 8043e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8043e20:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8043e22:	683a      	ldr	r2, [r7, #0]
 8043e24:	693b      	ldr	r3, [r7, #16]
 8043e26:	4013      	ands	r3, r2
 8043e28:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8043e2a:	68fa      	ldr	r2, [r7, #12]
 8043e2c:	693b      	ldr	r3, [r7, #16]
 8043e2e:	429a      	cmp	r2, r3
 8043e30:	f040 80c9 	bne.w	8043fc6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8043e34:	4a6b      	ldr	r2, [pc, #428]	; (8043fe4 <HAL_GPIO_DeInit+0x1e8>)
 8043e36:	697b      	ldr	r3, [r7, #20]
 8043e38:	089b      	lsrs	r3, r3, #2
 8043e3a:	3302      	adds	r3, #2
 8043e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8043e40:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8043e42:	697b      	ldr	r3, [r7, #20]
 8043e44:	f003 0303 	and.w	r3, r3, #3
 8043e48:	009b      	lsls	r3, r3, #2
 8043e4a:	220f      	movs	r2, #15
 8043e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8043e50:	68ba      	ldr	r2, [r7, #8]
 8043e52:	4013      	ands	r3, r2
 8043e54:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8043e56:	687b      	ldr	r3, [r7, #4]
 8043e58:	4a63      	ldr	r2, [pc, #396]	; (8043fe8 <HAL_GPIO_DeInit+0x1ec>)
 8043e5a:	4293      	cmp	r3, r2
 8043e5c:	d037      	beq.n	8043ece <HAL_GPIO_DeInit+0xd2>
 8043e5e:	687b      	ldr	r3, [r7, #4]
 8043e60:	4a62      	ldr	r2, [pc, #392]	; (8043fec <HAL_GPIO_DeInit+0x1f0>)
 8043e62:	4293      	cmp	r3, r2
 8043e64:	d031      	beq.n	8043eca <HAL_GPIO_DeInit+0xce>
 8043e66:	687b      	ldr	r3, [r7, #4]
 8043e68:	4a61      	ldr	r2, [pc, #388]	; (8043ff0 <HAL_GPIO_DeInit+0x1f4>)
 8043e6a:	4293      	cmp	r3, r2
 8043e6c:	d02b      	beq.n	8043ec6 <HAL_GPIO_DeInit+0xca>
 8043e6e:	687b      	ldr	r3, [r7, #4]
 8043e70:	4a60      	ldr	r2, [pc, #384]	; (8043ff4 <HAL_GPIO_DeInit+0x1f8>)
 8043e72:	4293      	cmp	r3, r2
 8043e74:	d025      	beq.n	8043ec2 <HAL_GPIO_DeInit+0xc6>
 8043e76:	687b      	ldr	r3, [r7, #4]
 8043e78:	4a5f      	ldr	r2, [pc, #380]	; (8043ff8 <HAL_GPIO_DeInit+0x1fc>)
 8043e7a:	4293      	cmp	r3, r2
 8043e7c:	d01f      	beq.n	8043ebe <HAL_GPIO_DeInit+0xc2>
 8043e7e:	687b      	ldr	r3, [r7, #4]
 8043e80:	4a5e      	ldr	r2, [pc, #376]	; (8043ffc <HAL_GPIO_DeInit+0x200>)
 8043e82:	4293      	cmp	r3, r2
 8043e84:	d019      	beq.n	8043eba <HAL_GPIO_DeInit+0xbe>
 8043e86:	687b      	ldr	r3, [r7, #4]
 8043e88:	4a5d      	ldr	r2, [pc, #372]	; (8044000 <HAL_GPIO_DeInit+0x204>)
 8043e8a:	4293      	cmp	r3, r2
 8043e8c:	d013      	beq.n	8043eb6 <HAL_GPIO_DeInit+0xba>
 8043e8e:	687b      	ldr	r3, [r7, #4]
 8043e90:	4a5c      	ldr	r2, [pc, #368]	; (8044004 <HAL_GPIO_DeInit+0x208>)
 8043e92:	4293      	cmp	r3, r2
 8043e94:	d00d      	beq.n	8043eb2 <HAL_GPIO_DeInit+0xb6>
 8043e96:	687b      	ldr	r3, [r7, #4]
 8043e98:	4a5b      	ldr	r2, [pc, #364]	; (8044008 <HAL_GPIO_DeInit+0x20c>)
 8043e9a:	4293      	cmp	r3, r2
 8043e9c:	d007      	beq.n	8043eae <HAL_GPIO_DeInit+0xb2>
 8043e9e:	687b      	ldr	r3, [r7, #4]
 8043ea0:	4a5a      	ldr	r2, [pc, #360]	; (804400c <HAL_GPIO_DeInit+0x210>)
 8043ea2:	4293      	cmp	r3, r2
 8043ea4:	d101      	bne.n	8043eaa <HAL_GPIO_DeInit+0xae>
 8043ea6:	2309      	movs	r3, #9
 8043ea8:	e012      	b.n	8043ed0 <HAL_GPIO_DeInit+0xd4>
 8043eaa:	230a      	movs	r3, #10
 8043eac:	e010      	b.n	8043ed0 <HAL_GPIO_DeInit+0xd4>
 8043eae:	2308      	movs	r3, #8
 8043eb0:	e00e      	b.n	8043ed0 <HAL_GPIO_DeInit+0xd4>
 8043eb2:	2307      	movs	r3, #7
 8043eb4:	e00c      	b.n	8043ed0 <HAL_GPIO_DeInit+0xd4>
 8043eb6:	2306      	movs	r3, #6
 8043eb8:	e00a      	b.n	8043ed0 <HAL_GPIO_DeInit+0xd4>
 8043eba:	2305      	movs	r3, #5
 8043ebc:	e008      	b.n	8043ed0 <HAL_GPIO_DeInit+0xd4>
 8043ebe:	2304      	movs	r3, #4
 8043ec0:	e006      	b.n	8043ed0 <HAL_GPIO_DeInit+0xd4>
 8043ec2:	2303      	movs	r3, #3
 8043ec4:	e004      	b.n	8043ed0 <HAL_GPIO_DeInit+0xd4>
 8043ec6:	2302      	movs	r3, #2
 8043ec8:	e002      	b.n	8043ed0 <HAL_GPIO_DeInit+0xd4>
 8043eca:	2301      	movs	r3, #1
 8043ecc:	e000      	b.n	8043ed0 <HAL_GPIO_DeInit+0xd4>
 8043ece:	2300      	movs	r3, #0
 8043ed0:	697a      	ldr	r2, [r7, #20]
 8043ed2:	f002 0203 	and.w	r2, r2, #3
 8043ed6:	0092      	lsls	r2, r2, #2
 8043ed8:	4093      	lsls	r3, r2
 8043eda:	68ba      	ldr	r2, [r7, #8]
 8043edc:	429a      	cmp	r2, r3
 8043ede:	d132      	bne.n	8043f46 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8043ee0:	4b4b      	ldr	r3, [pc, #300]	; (8044010 <HAL_GPIO_DeInit+0x214>)
 8043ee2:	681a      	ldr	r2, [r3, #0]
 8043ee4:	68fb      	ldr	r3, [r7, #12]
 8043ee6:	43db      	mvns	r3, r3
 8043ee8:	4949      	ldr	r1, [pc, #292]	; (8044010 <HAL_GPIO_DeInit+0x214>)
 8043eea:	4013      	ands	r3, r2
 8043eec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8043eee:	4b48      	ldr	r3, [pc, #288]	; (8044010 <HAL_GPIO_DeInit+0x214>)
 8043ef0:	685a      	ldr	r2, [r3, #4]
 8043ef2:	68fb      	ldr	r3, [r7, #12]
 8043ef4:	43db      	mvns	r3, r3
 8043ef6:	4946      	ldr	r1, [pc, #280]	; (8044010 <HAL_GPIO_DeInit+0x214>)
 8043ef8:	4013      	ands	r3, r2
 8043efa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8043efc:	4b44      	ldr	r3, [pc, #272]	; (8044010 <HAL_GPIO_DeInit+0x214>)
 8043efe:	68da      	ldr	r2, [r3, #12]
 8043f00:	68fb      	ldr	r3, [r7, #12]
 8043f02:	43db      	mvns	r3, r3
 8043f04:	4942      	ldr	r1, [pc, #264]	; (8044010 <HAL_GPIO_DeInit+0x214>)
 8043f06:	4013      	ands	r3, r2
 8043f08:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8043f0a:	4b41      	ldr	r3, [pc, #260]	; (8044010 <HAL_GPIO_DeInit+0x214>)
 8043f0c:	689a      	ldr	r2, [r3, #8]
 8043f0e:	68fb      	ldr	r3, [r7, #12]
 8043f10:	43db      	mvns	r3, r3
 8043f12:	493f      	ldr	r1, [pc, #252]	; (8044010 <HAL_GPIO_DeInit+0x214>)
 8043f14:	4013      	ands	r3, r2
 8043f16:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8043f18:	697b      	ldr	r3, [r7, #20]
 8043f1a:	f003 0303 	and.w	r3, r3, #3
 8043f1e:	009b      	lsls	r3, r3, #2
 8043f20:	220f      	movs	r2, #15
 8043f22:	fa02 f303 	lsl.w	r3, r2, r3
 8043f26:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8043f28:	4a2e      	ldr	r2, [pc, #184]	; (8043fe4 <HAL_GPIO_DeInit+0x1e8>)
 8043f2a:	697b      	ldr	r3, [r7, #20]
 8043f2c:	089b      	lsrs	r3, r3, #2
 8043f2e:	3302      	adds	r3, #2
 8043f30:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8043f34:	68bb      	ldr	r3, [r7, #8]
 8043f36:	43da      	mvns	r2, r3
 8043f38:	482a      	ldr	r0, [pc, #168]	; (8043fe4 <HAL_GPIO_DeInit+0x1e8>)
 8043f3a:	697b      	ldr	r3, [r7, #20]
 8043f3c:	089b      	lsrs	r3, r3, #2
 8043f3e:	400a      	ands	r2, r1
 8043f40:	3302      	adds	r3, #2
 8043f42:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8043f46:	687b      	ldr	r3, [r7, #4]
 8043f48:	681a      	ldr	r2, [r3, #0]
 8043f4a:	697b      	ldr	r3, [r7, #20]
 8043f4c:	005b      	lsls	r3, r3, #1
 8043f4e:	2103      	movs	r1, #3
 8043f50:	fa01 f303 	lsl.w	r3, r1, r3
 8043f54:	43db      	mvns	r3, r3
 8043f56:	401a      	ands	r2, r3
 8043f58:	687b      	ldr	r3, [r7, #4]
 8043f5a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8043f5c:	697b      	ldr	r3, [r7, #20]
 8043f5e:	08da      	lsrs	r2, r3, #3
 8043f60:	687b      	ldr	r3, [r7, #4]
 8043f62:	3208      	adds	r2, #8
 8043f64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8043f68:	697b      	ldr	r3, [r7, #20]
 8043f6a:	f003 0307 	and.w	r3, r3, #7
 8043f6e:	009b      	lsls	r3, r3, #2
 8043f70:	220f      	movs	r2, #15
 8043f72:	fa02 f303 	lsl.w	r3, r2, r3
 8043f76:	43db      	mvns	r3, r3
 8043f78:	697a      	ldr	r2, [r7, #20]
 8043f7a:	08d2      	lsrs	r2, r2, #3
 8043f7c:	4019      	ands	r1, r3
 8043f7e:	687b      	ldr	r3, [r7, #4]
 8043f80:	3208      	adds	r2, #8
 8043f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8043f86:	687b      	ldr	r3, [r7, #4]
 8043f88:	68da      	ldr	r2, [r3, #12]
 8043f8a:	697b      	ldr	r3, [r7, #20]
 8043f8c:	005b      	lsls	r3, r3, #1
 8043f8e:	2103      	movs	r1, #3
 8043f90:	fa01 f303 	lsl.w	r3, r1, r3
 8043f94:	43db      	mvns	r3, r3
 8043f96:	401a      	ands	r2, r3
 8043f98:	687b      	ldr	r3, [r7, #4]
 8043f9a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8043f9c:	687b      	ldr	r3, [r7, #4]
 8043f9e:	685a      	ldr	r2, [r3, #4]
 8043fa0:	2101      	movs	r1, #1
 8043fa2:	697b      	ldr	r3, [r7, #20]
 8043fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8043fa8:	43db      	mvns	r3, r3
 8043faa:	401a      	ands	r2, r3
 8043fac:	687b      	ldr	r3, [r7, #4]
 8043fae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8043fb0:	687b      	ldr	r3, [r7, #4]
 8043fb2:	689a      	ldr	r2, [r3, #8]
 8043fb4:	697b      	ldr	r3, [r7, #20]
 8043fb6:	005b      	lsls	r3, r3, #1
 8043fb8:	2103      	movs	r1, #3
 8043fba:	fa01 f303 	lsl.w	r3, r1, r3
 8043fbe:	43db      	mvns	r3, r3
 8043fc0:	401a      	ands	r2, r3
 8043fc2:	687b      	ldr	r3, [r7, #4]
 8043fc4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043fc6:	697b      	ldr	r3, [r7, #20]
 8043fc8:	3301      	adds	r3, #1
 8043fca:	617b      	str	r3, [r7, #20]
 8043fcc:	697b      	ldr	r3, [r7, #20]
 8043fce:	2b0f      	cmp	r3, #15
 8043fd0:	f67f af22 	bls.w	8043e18 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8043fd4:	bf00      	nop
 8043fd6:	bf00      	nop
 8043fd8:	371c      	adds	r7, #28
 8043fda:	46bd      	mov	sp, r7
 8043fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043fe0:	4770      	bx	lr
 8043fe2:	bf00      	nop
 8043fe4:	40013800 	.word	0x40013800
 8043fe8:	40020000 	.word	0x40020000
 8043fec:	40020400 	.word	0x40020400
 8043ff0:	40020800 	.word	0x40020800
 8043ff4:	40020c00 	.word	0x40020c00
 8043ff8:	40021000 	.word	0x40021000
 8043ffc:	40021400 	.word	0x40021400
 8044000:	40021800 	.word	0x40021800
 8044004:	40021c00 	.word	0x40021c00
 8044008:	40022000 	.word	0x40022000
 804400c:	40022400 	.word	0x40022400
 8044010:	40013c00 	.word	0x40013c00

08044014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8044014:	b480      	push	{r7}
 8044016:	b083      	sub	sp, #12
 8044018:	af00      	add	r7, sp, #0
 804401a:	6078      	str	r0, [r7, #4]
 804401c:	460b      	mov	r3, r1
 804401e:	807b      	strh	r3, [r7, #2]
 8044020:	4613      	mov	r3, r2
 8044022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8044024:	787b      	ldrb	r3, [r7, #1]
 8044026:	2b00      	cmp	r3, #0
 8044028:	d003      	beq.n	8044032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 804402a:	887a      	ldrh	r2, [r7, #2]
 804402c:	687b      	ldr	r3, [r7, #4]
 804402e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8044030:	e003      	b.n	804403a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8044032:	887b      	ldrh	r3, [r7, #2]
 8044034:	041a      	lsls	r2, r3, #16
 8044036:	687b      	ldr	r3, [r7, #4]
 8044038:	619a      	str	r2, [r3, #24]
}
 804403a:	bf00      	nop
 804403c:	370c      	adds	r7, #12
 804403e:	46bd      	mov	sp, r7
 8044040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044044:	4770      	bx	lr
	...

08044048 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8044048:	b580      	push	{r7, lr}
 804404a:	b082      	sub	sp, #8
 804404c:	af00      	add	r7, sp, #0
 804404e:	4603      	mov	r3, r0
 8044050:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8044052:	4b08      	ldr	r3, [pc, #32]	; (8044074 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8044054:	695a      	ldr	r2, [r3, #20]
 8044056:	88fb      	ldrh	r3, [r7, #6]
 8044058:	4013      	ands	r3, r2
 804405a:	2b00      	cmp	r3, #0
 804405c:	d006      	beq.n	804406c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 804405e:	4a05      	ldr	r2, [pc, #20]	; (8044074 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8044060:	88fb      	ldrh	r3, [r7, #6]
 8044062:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8044064:	88fb      	ldrh	r3, [r7, #6]
 8044066:	4618      	mov	r0, r3
 8044068:	f7fd fb86 	bl	8041778 <HAL_GPIO_EXTI_Callback>
  }
}
 804406c:	bf00      	nop
 804406e:	3708      	adds	r7, #8
 8044070:	46bd      	mov	sp, r7
 8044072:	bd80      	pop	{r7, pc}
 8044074:	40013c00 	.word	0x40013c00

08044078 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8044078:	b5f0      	push	{r4, r5, r6, r7, lr}
 804407a:	b08f      	sub	sp, #60	; 0x3c
 804407c:	af0a      	add	r7, sp, #40	; 0x28
 804407e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8044080:	687b      	ldr	r3, [r7, #4]
 8044082:	2b00      	cmp	r3, #0
 8044084:	d101      	bne.n	804408a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8044086:	2301      	movs	r3, #1
 8044088:	e054      	b.n	8044134 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 804408a:	687b      	ldr	r3, [r7, #4]
 804408c:	681b      	ldr	r3, [r3, #0]
 804408e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8044090:	687b      	ldr	r3, [r7, #4]
 8044092:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8044096:	b2db      	uxtb	r3, r3
 8044098:	2b00      	cmp	r3, #0
 804409a:	d106      	bne.n	80440aa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 804409c:	687b      	ldr	r3, [r7, #4]
 804409e:	2200      	movs	r2, #0
 80440a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80440a4:	6878      	ldr	r0, [r7, #4]
 80440a6:	f008 f84b 	bl	804c140 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80440aa:	687b      	ldr	r3, [r7, #4]
 80440ac:	2203      	movs	r2, #3
 80440ae:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80440b2:	68fb      	ldr	r3, [r7, #12]
 80440b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80440b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80440ba:	2b00      	cmp	r3, #0
 80440bc:	d102      	bne.n	80440c4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80440be:	687b      	ldr	r3, [r7, #4]
 80440c0:	2200      	movs	r2, #0
 80440c2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80440c4:	687b      	ldr	r3, [r7, #4]
 80440c6:	681b      	ldr	r3, [r3, #0]
 80440c8:	4618      	mov	r0, r3
 80440ca:	f005 f879 	bl	80491c0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80440ce:	687b      	ldr	r3, [r7, #4]
 80440d0:	681b      	ldr	r3, [r3, #0]
 80440d2:	603b      	str	r3, [r7, #0]
 80440d4:	687e      	ldr	r6, [r7, #4]
 80440d6:	466d      	mov	r5, sp
 80440d8:	f106 0410 	add.w	r4, r6, #16
 80440dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80440de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80440e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80440e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80440e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80440e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80440ec:	1d33      	adds	r3, r6, #4
 80440ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80440f0:	6838      	ldr	r0, [r7, #0]
 80440f2:	f004 fff3 	bl	80490dc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80440f6:	687b      	ldr	r3, [r7, #4]
 80440f8:	681b      	ldr	r3, [r3, #0]
 80440fa:	2101      	movs	r1, #1
 80440fc:	4618      	mov	r0, r3
 80440fe:	f005 f870 	bl	80491e2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8044102:	687b      	ldr	r3, [r7, #4]
 8044104:	681b      	ldr	r3, [r3, #0]
 8044106:	603b      	str	r3, [r7, #0]
 8044108:	687e      	ldr	r6, [r7, #4]
 804410a:	466d      	mov	r5, sp
 804410c:	f106 0410 	add.w	r4, r6, #16
 8044110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8044112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8044114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8044116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8044118:	e894 0003 	ldmia.w	r4, {r0, r1}
 804411c:	e885 0003 	stmia.w	r5, {r0, r1}
 8044120:	1d33      	adds	r3, r6, #4
 8044122:	cb0e      	ldmia	r3, {r1, r2, r3}
 8044124:	6838      	ldr	r0, [r7, #0]
 8044126:	f005 f9f9 	bl	804951c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 804412a:	687b      	ldr	r3, [r7, #4]
 804412c:	2201      	movs	r2, #1
 804412e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8044132:	2300      	movs	r3, #0
}
 8044134:	4618      	mov	r0, r3
 8044136:	3714      	adds	r7, #20
 8044138:	46bd      	mov	sp, r7
 804413a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0804413c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 804413c:	b590      	push	{r4, r7, lr}
 804413e:	b089      	sub	sp, #36	; 0x24
 8044140:	af04      	add	r7, sp, #16
 8044142:	6078      	str	r0, [r7, #4]
 8044144:	4608      	mov	r0, r1
 8044146:	4611      	mov	r1, r2
 8044148:	461a      	mov	r2, r3
 804414a:	4603      	mov	r3, r0
 804414c:	70fb      	strb	r3, [r7, #3]
 804414e:	460b      	mov	r3, r1
 8044150:	70bb      	strb	r3, [r7, #2]
 8044152:	4613      	mov	r3, r2
 8044154:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8044156:	687b      	ldr	r3, [r7, #4]
 8044158:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 804415c:	2b01      	cmp	r3, #1
 804415e:	d101      	bne.n	8044164 <HAL_HCD_HC_Init+0x28>
 8044160:	2302      	movs	r3, #2
 8044162:	e076      	b.n	8044252 <HAL_HCD_HC_Init+0x116>
 8044164:	687b      	ldr	r3, [r7, #4]
 8044166:	2201      	movs	r2, #1
 8044168:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 804416c:	78fb      	ldrb	r3, [r7, #3]
 804416e:	687a      	ldr	r2, [r7, #4]
 8044170:	212c      	movs	r1, #44	; 0x2c
 8044172:	fb01 f303 	mul.w	r3, r1, r3
 8044176:	4413      	add	r3, r2
 8044178:	333d      	adds	r3, #61	; 0x3d
 804417a:	2200      	movs	r2, #0
 804417c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 804417e:	78fb      	ldrb	r3, [r7, #3]
 8044180:	687a      	ldr	r2, [r7, #4]
 8044182:	212c      	movs	r1, #44	; 0x2c
 8044184:	fb01 f303 	mul.w	r3, r1, r3
 8044188:	4413      	add	r3, r2
 804418a:	3338      	adds	r3, #56	; 0x38
 804418c:	787a      	ldrb	r2, [r7, #1]
 804418e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8044190:	78fb      	ldrb	r3, [r7, #3]
 8044192:	687a      	ldr	r2, [r7, #4]
 8044194:	212c      	movs	r1, #44	; 0x2c
 8044196:	fb01 f303 	mul.w	r3, r1, r3
 804419a:	4413      	add	r3, r2
 804419c:	3340      	adds	r3, #64	; 0x40
 804419e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80441a0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80441a2:	78fb      	ldrb	r3, [r7, #3]
 80441a4:	687a      	ldr	r2, [r7, #4]
 80441a6:	212c      	movs	r1, #44	; 0x2c
 80441a8:	fb01 f303 	mul.w	r3, r1, r3
 80441ac:	4413      	add	r3, r2
 80441ae:	3339      	adds	r3, #57	; 0x39
 80441b0:	78fa      	ldrb	r2, [r7, #3]
 80441b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80441b4:	78fb      	ldrb	r3, [r7, #3]
 80441b6:	687a      	ldr	r2, [r7, #4]
 80441b8:	212c      	movs	r1, #44	; 0x2c
 80441ba:	fb01 f303 	mul.w	r3, r1, r3
 80441be:	4413      	add	r3, r2
 80441c0:	333f      	adds	r3, #63	; 0x3f
 80441c2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80441c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80441c8:	78fb      	ldrb	r3, [r7, #3]
 80441ca:	78ba      	ldrb	r2, [r7, #2]
 80441cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80441d0:	b2d0      	uxtb	r0, r2
 80441d2:	687a      	ldr	r2, [r7, #4]
 80441d4:	212c      	movs	r1, #44	; 0x2c
 80441d6:	fb01 f303 	mul.w	r3, r1, r3
 80441da:	4413      	add	r3, r2
 80441dc:	333a      	adds	r3, #58	; 0x3a
 80441de:	4602      	mov	r2, r0
 80441e0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80441e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80441e6:	2b00      	cmp	r3, #0
 80441e8:	da09      	bge.n	80441fe <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80441ea:	78fb      	ldrb	r3, [r7, #3]
 80441ec:	687a      	ldr	r2, [r7, #4]
 80441ee:	212c      	movs	r1, #44	; 0x2c
 80441f0:	fb01 f303 	mul.w	r3, r1, r3
 80441f4:	4413      	add	r3, r2
 80441f6:	333b      	adds	r3, #59	; 0x3b
 80441f8:	2201      	movs	r2, #1
 80441fa:	701a      	strb	r2, [r3, #0]
 80441fc:	e008      	b.n	8044210 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80441fe:	78fb      	ldrb	r3, [r7, #3]
 8044200:	687a      	ldr	r2, [r7, #4]
 8044202:	212c      	movs	r1, #44	; 0x2c
 8044204:	fb01 f303 	mul.w	r3, r1, r3
 8044208:	4413      	add	r3, r2
 804420a:	333b      	adds	r3, #59	; 0x3b
 804420c:	2200      	movs	r2, #0
 804420e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8044210:	78fb      	ldrb	r3, [r7, #3]
 8044212:	687a      	ldr	r2, [r7, #4]
 8044214:	212c      	movs	r1, #44	; 0x2c
 8044216:	fb01 f303 	mul.w	r3, r1, r3
 804421a:	4413      	add	r3, r2
 804421c:	333c      	adds	r3, #60	; 0x3c
 804421e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8044222:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8044224:	687b      	ldr	r3, [r7, #4]
 8044226:	6818      	ldr	r0, [r3, #0]
 8044228:	787c      	ldrb	r4, [r7, #1]
 804422a:	78ba      	ldrb	r2, [r7, #2]
 804422c:	78f9      	ldrb	r1, [r7, #3]
 804422e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8044230:	9302      	str	r3, [sp, #8]
 8044232:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8044236:	9301      	str	r3, [sp, #4]
 8044238:	f897 3020 	ldrb.w	r3, [r7, #32]
 804423c:	9300      	str	r3, [sp, #0]
 804423e:	4623      	mov	r3, r4
 8044240:	f005 faf2 	bl	8049828 <USB_HC_Init>
 8044244:	4603      	mov	r3, r0
 8044246:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8044248:	687b      	ldr	r3, [r7, #4]
 804424a:	2200      	movs	r2, #0
 804424c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8044250:	7bfb      	ldrb	r3, [r7, #15]
}
 8044252:	4618      	mov	r0, r3
 8044254:	3714      	adds	r7, #20
 8044256:	46bd      	mov	sp, r7
 8044258:	bd90      	pop	{r4, r7, pc}

0804425a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 804425a:	b580      	push	{r7, lr}
 804425c:	b084      	sub	sp, #16
 804425e:	af00      	add	r7, sp, #0
 8044260:	6078      	str	r0, [r7, #4]
 8044262:	460b      	mov	r3, r1
 8044264:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8044266:	2300      	movs	r3, #0
 8044268:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 804426a:	687b      	ldr	r3, [r7, #4]
 804426c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8044270:	2b01      	cmp	r3, #1
 8044272:	d101      	bne.n	8044278 <HAL_HCD_HC_Halt+0x1e>
 8044274:	2302      	movs	r3, #2
 8044276:	e00f      	b.n	8044298 <HAL_HCD_HC_Halt+0x3e>
 8044278:	687b      	ldr	r3, [r7, #4]
 804427a:	2201      	movs	r2, #1
 804427c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044280:	687b      	ldr	r3, [r7, #4]
 8044282:	681b      	ldr	r3, [r3, #0]
 8044284:	78fa      	ldrb	r2, [r7, #3]
 8044286:	4611      	mov	r1, r2
 8044288:	4618      	mov	r0, r3
 804428a:	f005 fd42 	bl	8049d12 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 804428e:	687b      	ldr	r3, [r7, #4]
 8044290:	2200      	movs	r2, #0
 8044292:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8044296:	7bfb      	ldrb	r3, [r7, #15]
}
 8044298:	4618      	mov	r0, r3
 804429a:	3710      	adds	r7, #16
 804429c:	46bd      	mov	sp, r7
 804429e:	bd80      	pop	{r7, pc}

080442a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80442a0:	b580      	push	{r7, lr}
 80442a2:	b082      	sub	sp, #8
 80442a4:	af00      	add	r7, sp, #0
 80442a6:	6078      	str	r0, [r7, #4]
 80442a8:	4608      	mov	r0, r1
 80442aa:	4611      	mov	r1, r2
 80442ac:	461a      	mov	r2, r3
 80442ae:	4603      	mov	r3, r0
 80442b0:	70fb      	strb	r3, [r7, #3]
 80442b2:	460b      	mov	r3, r1
 80442b4:	70bb      	strb	r3, [r7, #2]
 80442b6:	4613      	mov	r3, r2
 80442b8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80442ba:	78fb      	ldrb	r3, [r7, #3]
 80442bc:	687a      	ldr	r2, [r7, #4]
 80442be:	212c      	movs	r1, #44	; 0x2c
 80442c0:	fb01 f303 	mul.w	r3, r1, r3
 80442c4:	4413      	add	r3, r2
 80442c6:	333b      	adds	r3, #59	; 0x3b
 80442c8:	78ba      	ldrb	r2, [r7, #2]
 80442ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80442cc:	78fb      	ldrb	r3, [r7, #3]
 80442ce:	687a      	ldr	r2, [r7, #4]
 80442d0:	212c      	movs	r1, #44	; 0x2c
 80442d2:	fb01 f303 	mul.w	r3, r1, r3
 80442d6:	4413      	add	r3, r2
 80442d8:	333f      	adds	r3, #63	; 0x3f
 80442da:	787a      	ldrb	r2, [r7, #1]
 80442dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80442de:	7c3b      	ldrb	r3, [r7, #16]
 80442e0:	2b00      	cmp	r3, #0
 80442e2:	d112      	bne.n	804430a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80442e4:	78fb      	ldrb	r3, [r7, #3]
 80442e6:	687a      	ldr	r2, [r7, #4]
 80442e8:	212c      	movs	r1, #44	; 0x2c
 80442ea:	fb01 f303 	mul.w	r3, r1, r3
 80442ee:	4413      	add	r3, r2
 80442f0:	3342      	adds	r3, #66	; 0x42
 80442f2:	2203      	movs	r2, #3
 80442f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80442f6:	78fb      	ldrb	r3, [r7, #3]
 80442f8:	687a      	ldr	r2, [r7, #4]
 80442fa:	212c      	movs	r1, #44	; 0x2c
 80442fc:	fb01 f303 	mul.w	r3, r1, r3
 8044300:	4413      	add	r3, r2
 8044302:	333d      	adds	r3, #61	; 0x3d
 8044304:	7f3a      	ldrb	r2, [r7, #28]
 8044306:	701a      	strb	r2, [r3, #0]
 8044308:	e008      	b.n	804431c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804430a:	78fb      	ldrb	r3, [r7, #3]
 804430c:	687a      	ldr	r2, [r7, #4]
 804430e:	212c      	movs	r1, #44	; 0x2c
 8044310:	fb01 f303 	mul.w	r3, r1, r3
 8044314:	4413      	add	r3, r2
 8044316:	3342      	adds	r3, #66	; 0x42
 8044318:	2202      	movs	r2, #2
 804431a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 804431c:	787b      	ldrb	r3, [r7, #1]
 804431e:	2b03      	cmp	r3, #3
 8044320:	f200 80c6 	bhi.w	80444b0 <HAL_HCD_HC_SubmitRequest+0x210>
 8044324:	a201      	add	r2, pc, #4	; (adr r2, 804432c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8044326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804432a:	bf00      	nop
 804432c:	0804433d 	.word	0x0804433d
 8044330:	0804449d 	.word	0x0804449d
 8044334:	080443a1 	.word	0x080443a1
 8044338:	0804441f 	.word	0x0804441f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 804433c:	7c3b      	ldrb	r3, [r7, #16]
 804433e:	2b01      	cmp	r3, #1
 8044340:	f040 80b8 	bne.w	80444b4 <HAL_HCD_HC_SubmitRequest+0x214>
 8044344:	78bb      	ldrb	r3, [r7, #2]
 8044346:	2b00      	cmp	r3, #0
 8044348:	f040 80b4 	bne.w	80444b4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 804434c:	8b3b      	ldrh	r3, [r7, #24]
 804434e:	2b00      	cmp	r3, #0
 8044350:	d108      	bne.n	8044364 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8044352:	78fb      	ldrb	r3, [r7, #3]
 8044354:	687a      	ldr	r2, [r7, #4]
 8044356:	212c      	movs	r1, #44	; 0x2c
 8044358:	fb01 f303 	mul.w	r3, r1, r3
 804435c:	4413      	add	r3, r2
 804435e:	3355      	adds	r3, #85	; 0x55
 8044360:	2201      	movs	r2, #1
 8044362:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8044364:	78fb      	ldrb	r3, [r7, #3]
 8044366:	687a      	ldr	r2, [r7, #4]
 8044368:	212c      	movs	r1, #44	; 0x2c
 804436a:	fb01 f303 	mul.w	r3, r1, r3
 804436e:	4413      	add	r3, r2
 8044370:	3355      	adds	r3, #85	; 0x55
 8044372:	781b      	ldrb	r3, [r3, #0]
 8044374:	2b00      	cmp	r3, #0
 8044376:	d109      	bne.n	804438c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8044378:	78fb      	ldrb	r3, [r7, #3]
 804437a:	687a      	ldr	r2, [r7, #4]
 804437c:	212c      	movs	r1, #44	; 0x2c
 804437e:	fb01 f303 	mul.w	r3, r1, r3
 8044382:	4413      	add	r3, r2
 8044384:	3342      	adds	r3, #66	; 0x42
 8044386:	2200      	movs	r2, #0
 8044388:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 804438a:	e093      	b.n	80444b4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804438c:	78fb      	ldrb	r3, [r7, #3]
 804438e:	687a      	ldr	r2, [r7, #4]
 8044390:	212c      	movs	r1, #44	; 0x2c
 8044392:	fb01 f303 	mul.w	r3, r1, r3
 8044396:	4413      	add	r3, r2
 8044398:	3342      	adds	r3, #66	; 0x42
 804439a:	2202      	movs	r2, #2
 804439c:	701a      	strb	r2, [r3, #0]
      break;
 804439e:	e089      	b.n	80444b4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80443a0:	78bb      	ldrb	r3, [r7, #2]
 80443a2:	2b00      	cmp	r3, #0
 80443a4:	d11d      	bne.n	80443e2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80443a6:	78fb      	ldrb	r3, [r7, #3]
 80443a8:	687a      	ldr	r2, [r7, #4]
 80443aa:	212c      	movs	r1, #44	; 0x2c
 80443ac:	fb01 f303 	mul.w	r3, r1, r3
 80443b0:	4413      	add	r3, r2
 80443b2:	3355      	adds	r3, #85	; 0x55
 80443b4:	781b      	ldrb	r3, [r3, #0]
 80443b6:	2b00      	cmp	r3, #0
 80443b8:	d109      	bne.n	80443ce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80443ba:	78fb      	ldrb	r3, [r7, #3]
 80443bc:	687a      	ldr	r2, [r7, #4]
 80443be:	212c      	movs	r1, #44	; 0x2c
 80443c0:	fb01 f303 	mul.w	r3, r1, r3
 80443c4:	4413      	add	r3, r2
 80443c6:	3342      	adds	r3, #66	; 0x42
 80443c8:	2200      	movs	r2, #0
 80443ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80443cc:	e073      	b.n	80444b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80443ce:	78fb      	ldrb	r3, [r7, #3]
 80443d0:	687a      	ldr	r2, [r7, #4]
 80443d2:	212c      	movs	r1, #44	; 0x2c
 80443d4:	fb01 f303 	mul.w	r3, r1, r3
 80443d8:	4413      	add	r3, r2
 80443da:	3342      	adds	r3, #66	; 0x42
 80443dc:	2202      	movs	r2, #2
 80443de:	701a      	strb	r2, [r3, #0]
      break;
 80443e0:	e069      	b.n	80444b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80443e2:	78fb      	ldrb	r3, [r7, #3]
 80443e4:	687a      	ldr	r2, [r7, #4]
 80443e6:	212c      	movs	r1, #44	; 0x2c
 80443e8:	fb01 f303 	mul.w	r3, r1, r3
 80443ec:	4413      	add	r3, r2
 80443ee:	3354      	adds	r3, #84	; 0x54
 80443f0:	781b      	ldrb	r3, [r3, #0]
 80443f2:	2b00      	cmp	r3, #0
 80443f4:	d109      	bne.n	804440a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80443f6:	78fb      	ldrb	r3, [r7, #3]
 80443f8:	687a      	ldr	r2, [r7, #4]
 80443fa:	212c      	movs	r1, #44	; 0x2c
 80443fc:	fb01 f303 	mul.w	r3, r1, r3
 8044400:	4413      	add	r3, r2
 8044402:	3342      	adds	r3, #66	; 0x42
 8044404:	2200      	movs	r2, #0
 8044406:	701a      	strb	r2, [r3, #0]
      break;
 8044408:	e055      	b.n	80444b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804440a:	78fb      	ldrb	r3, [r7, #3]
 804440c:	687a      	ldr	r2, [r7, #4]
 804440e:	212c      	movs	r1, #44	; 0x2c
 8044410:	fb01 f303 	mul.w	r3, r1, r3
 8044414:	4413      	add	r3, r2
 8044416:	3342      	adds	r3, #66	; 0x42
 8044418:	2202      	movs	r2, #2
 804441a:	701a      	strb	r2, [r3, #0]
      break;
 804441c:	e04b      	b.n	80444b6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 804441e:	78bb      	ldrb	r3, [r7, #2]
 8044420:	2b00      	cmp	r3, #0
 8044422:	d11d      	bne.n	8044460 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8044424:	78fb      	ldrb	r3, [r7, #3]
 8044426:	687a      	ldr	r2, [r7, #4]
 8044428:	212c      	movs	r1, #44	; 0x2c
 804442a:	fb01 f303 	mul.w	r3, r1, r3
 804442e:	4413      	add	r3, r2
 8044430:	3355      	adds	r3, #85	; 0x55
 8044432:	781b      	ldrb	r3, [r3, #0]
 8044434:	2b00      	cmp	r3, #0
 8044436:	d109      	bne.n	804444c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8044438:	78fb      	ldrb	r3, [r7, #3]
 804443a:	687a      	ldr	r2, [r7, #4]
 804443c:	212c      	movs	r1, #44	; 0x2c
 804443e:	fb01 f303 	mul.w	r3, r1, r3
 8044442:	4413      	add	r3, r2
 8044444:	3342      	adds	r3, #66	; 0x42
 8044446:	2200      	movs	r2, #0
 8044448:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 804444a:	e034      	b.n	80444b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804444c:	78fb      	ldrb	r3, [r7, #3]
 804444e:	687a      	ldr	r2, [r7, #4]
 8044450:	212c      	movs	r1, #44	; 0x2c
 8044452:	fb01 f303 	mul.w	r3, r1, r3
 8044456:	4413      	add	r3, r2
 8044458:	3342      	adds	r3, #66	; 0x42
 804445a:	2202      	movs	r2, #2
 804445c:	701a      	strb	r2, [r3, #0]
      break;
 804445e:	e02a      	b.n	80444b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8044460:	78fb      	ldrb	r3, [r7, #3]
 8044462:	687a      	ldr	r2, [r7, #4]
 8044464:	212c      	movs	r1, #44	; 0x2c
 8044466:	fb01 f303 	mul.w	r3, r1, r3
 804446a:	4413      	add	r3, r2
 804446c:	3354      	adds	r3, #84	; 0x54
 804446e:	781b      	ldrb	r3, [r3, #0]
 8044470:	2b00      	cmp	r3, #0
 8044472:	d109      	bne.n	8044488 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8044474:	78fb      	ldrb	r3, [r7, #3]
 8044476:	687a      	ldr	r2, [r7, #4]
 8044478:	212c      	movs	r1, #44	; 0x2c
 804447a:	fb01 f303 	mul.w	r3, r1, r3
 804447e:	4413      	add	r3, r2
 8044480:	3342      	adds	r3, #66	; 0x42
 8044482:	2200      	movs	r2, #0
 8044484:	701a      	strb	r2, [r3, #0]
      break;
 8044486:	e016      	b.n	80444b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8044488:	78fb      	ldrb	r3, [r7, #3]
 804448a:	687a      	ldr	r2, [r7, #4]
 804448c:	212c      	movs	r1, #44	; 0x2c
 804448e:	fb01 f303 	mul.w	r3, r1, r3
 8044492:	4413      	add	r3, r2
 8044494:	3342      	adds	r3, #66	; 0x42
 8044496:	2202      	movs	r2, #2
 8044498:	701a      	strb	r2, [r3, #0]
      break;
 804449a:	e00c      	b.n	80444b6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 804449c:	78fb      	ldrb	r3, [r7, #3]
 804449e:	687a      	ldr	r2, [r7, #4]
 80444a0:	212c      	movs	r1, #44	; 0x2c
 80444a2:	fb01 f303 	mul.w	r3, r1, r3
 80444a6:	4413      	add	r3, r2
 80444a8:	3342      	adds	r3, #66	; 0x42
 80444aa:	2200      	movs	r2, #0
 80444ac:	701a      	strb	r2, [r3, #0]
      break;
 80444ae:	e002      	b.n	80444b6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80444b0:	bf00      	nop
 80444b2:	e000      	b.n	80444b6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80444b4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80444b6:	78fb      	ldrb	r3, [r7, #3]
 80444b8:	687a      	ldr	r2, [r7, #4]
 80444ba:	212c      	movs	r1, #44	; 0x2c
 80444bc:	fb01 f303 	mul.w	r3, r1, r3
 80444c0:	4413      	add	r3, r2
 80444c2:	3344      	adds	r3, #68	; 0x44
 80444c4:	697a      	ldr	r2, [r7, #20]
 80444c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80444c8:	78fb      	ldrb	r3, [r7, #3]
 80444ca:	8b3a      	ldrh	r2, [r7, #24]
 80444cc:	6879      	ldr	r1, [r7, #4]
 80444ce:	202c      	movs	r0, #44	; 0x2c
 80444d0:	fb00 f303 	mul.w	r3, r0, r3
 80444d4:	440b      	add	r3, r1
 80444d6:	334c      	adds	r3, #76	; 0x4c
 80444d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80444da:	78fb      	ldrb	r3, [r7, #3]
 80444dc:	687a      	ldr	r2, [r7, #4]
 80444de:	212c      	movs	r1, #44	; 0x2c
 80444e0:	fb01 f303 	mul.w	r3, r1, r3
 80444e4:	4413      	add	r3, r2
 80444e6:	3360      	adds	r3, #96	; 0x60
 80444e8:	2200      	movs	r2, #0
 80444ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80444ec:	78fb      	ldrb	r3, [r7, #3]
 80444ee:	687a      	ldr	r2, [r7, #4]
 80444f0:	212c      	movs	r1, #44	; 0x2c
 80444f2:	fb01 f303 	mul.w	r3, r1, r3
 80444f6:	4413      	add	r3, r2
 80444f8:	3350      	adds	r3, #80	; 0x50
 80444fa:	2200      	movs	r2, #0
 80444fc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80444fe:	78fb      	ldrb	r3, [r7, #3]
 8044500:	687a      	ldr	r2, [r7, #4]
 8044502:	212c      	movs	r1, #44	; 0x2c
 8044504:	fb01 f303 	mul.w	r3, r1, r3
 8044508:	4413      	add	r3, r2
 804450a:	3339      	adds	r3, #57	; 0x39
 804450c:	78fa      	ldrb	r2, [r7, #3]
 804450e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8044510:	78fb      	ldrb	r3, [r7, #3]
 8044512:	687a      	ldr	r2, [r7, #4]
 8044514:	212c      	movs	r1, #44	; 0x2c
 8044516:	fb01 f303 	mul.w	r3, r1, r3
 804451a:	4413      	add	r3, r2
 804451c:	3361      	adds	r3, #97	; 0x61
 804451e:	2200      	movs	r2, #0
 8044520:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8044522:	687b      	ldr	r3, [r7, #4]
 8044524:	6818      	ldr	r0, [r3, #0]
 8044526:	78fb      	ldrb	r3, [r7, #3]
 8044528:	222c      	movs	r2, #44	; 0x2c
 804452a:	fb02 f303 	mul.w	r3, r2, r3
 804452e:	3338      	adds	r3, #56	; 0x38
 8044530:	687a      	ldr	r2, [r7, #4]
 8044532:	18d1      	adds	r1, r2, r3
 8044534:	687b      	ldr	r3, [r7, #4]
 8044536:	691b      	ldr	r3, [r3, #16]
 8044538:	b2db      	uxtb	r3, r3
 804453a:	461a      	mov	r2, r3
 804453c:	f005 fa96 	bl	8049a6c <USB_HC_StartXfer>
 8044540:	4603      	mov	r3, r0
}
 8044542:	4618      	mov	r0, r3
 8044544:	3708      	adds	r7, #8
 8044546:	46bd      	mov	sp, r7
 8044548:	bd80      	pop	{r7, pc}
 804454a:	bf00      	nop

0804454c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 804454c:	b580      	push	{r7, lr}
 804454e:	b086      	sub	sp, #24
 8044550:	af00      	add	r7, sp, #0
 8044552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8044554:	687b      	ldr	r3, [r7, #4]
 8044556:	681b      	ldr	r3, [r3, #0]
 8044558:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804455a:	693b      	ldr	r3, [r7, #16]
 804455c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 804455e:	687b      	ldr	r3, [r7, #4]
 8044560:	681b      	ldr	r3, [r3, #0]
 8044562:	4618      	mov	r0, r3
 8044564:	f004 ff97 	bl	8049496 <USB_GetMode>
 8044568:	4603      	mov	r3, r0
 804456a:	2b01      	cmp	r3, #1
 804456c:	f040 80f6 	bne.w	804475c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8044570:	687b      	ldr	r3, [r7, #4]
 8044572:	681b      	ldr	r3, [r3, #0]
 8044574:	4618      	mov	r0, r3
 8044576:	f004 ff7b 	bl	8049470 <USB_ReadInterrupts>
 804457a:	4603      	mov	r3, r0
 804457c:	2b00      	cmp	r3, #0
 804457e:	f000 80ec 	beq.w	804475a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8044582:	687b      	ldr	r3, [r7, #4]
 8044584:	681b      	ldr	r3, [r3, #0]
 8044586:	4618      	mov	r0, r3
 8044588:	f004 ff72 	bl	8049470 <USB_ReadInterrupts>
 804458c:	4603      	mov	r3, r0
 804458e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8044592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8044596:	d104      	bne.n	80445a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8044598:	687b      	ldr	r3, [r7, #4]
 804459a:	681b      	ldr	r3, [r3, #0]
 804459c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80445a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80445a2:	687b      	ldr	r3, [r7, #4]
 80445a4:	681b      	ldr	r3, [r3, #0]
 80445a6:	4618      	mov	r0, r3
 80445a8:	f004 ff62 	bl	8049470 <USB_ReadInterrupts>
 80445ac:	4603      	mov	r3, r0
 80445ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80445b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80445b6:	d104      	bne.n	80445c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80445b8:	687b      	ldr	r3, [r7, #4]
 80445ba:	681b      	ldr	r3, [r3, #0]
 80445bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80445c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80445c2:	687b      	ldr	r3, [r7, #4]
 80445c4:	681b      	ldr	r3, [r3, #0]
 80445c6:	4618      	mov	r0, r3
 80445c8:	f004 ff52 	bl	8049470 <USB_ReadInterrupts>
 80445cc:	4603      	mov	r3, r0
 80445ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80445d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80445d6:	d104      	bne.n	80445e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80445d8:	687b      	ldr	r3, [r7, #4]
 80445da:	681b      	ldr	r3, [r3, #0]
 80445dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80445e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80445e2:	687b      	ldr	r3, [r7, #4]
 80445e4:	681b      	ldr	r3, [r3, #0]
 80445e6:	4618      	mov	r0, r3
 80445e8:	f004 ff42 	bl	8049470 <USB_ReadInterrupts>
 80445ec:	4603      	mov	r3, r0
 80445ee:	f003 0302 	and.w	r3, r3, #2
 80445f2:	2b02      	cmp	r3, #2
 80445f4:	d103      	bne.n	80445fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80445f6:	687b      	ldr	r3, [r7, #4]
 80445f8:	681b      	ldr	r3, [r3, #0]
 80445fa:	2202      	movs	r2, #2
 80445fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80445fe:	687b      	ldr	r3, [r7, #4]
 8044600:	681b      	ldr	r3, [r3, #0]
 8044602:	4618      	mov	r0, r3
 8044604:	f004 ff34 	bl	8049470 <USB_ReadInterrupts>
 8044608:	4603      	mov	r3, r0
 804460a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804460e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8044612:	d11c      	bne.n	804464e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8044614:	687b      	ldr	r3, [r7, #4]
 8044616:	681b      	ldr	r3, [r3, #0]
 8044618:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 804461c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 804461e:	68fb      	ldr	r3, [r7, #12]
 8044620:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8044624:	681b      	ldr	r3, [r3, #0]
 8044626:	f003 0301 	and.w	r3, r3, #1
 804462a:	2b00      	cmp	r3, #0
 804462c:	d10f      	bne.n	804464e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 804462e:	2110      	movs	r1, #16
 8044630:	6938      	ldr	r0, [r7, #16]
 8044632:	f004 fe23 	bl	804927c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8044636:	6938      	ldr	r0, [r7, #16]
 8044638:	f004 fe54 	bl	80492e4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 804463c:	687b      	ldr	r3, [r7, #4]
 804463e:	681b      	ldr	r3, [r3, #0]
 8044640:	2101      	movs	r1, #1
 8044642:	4618      	mov	r0, r3
 8044644:	f005 f82a 	bl	804969c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8044648:	6878      	ldr	r0, [r7, #4]
 804464a:	f007 fdf3 	bl	804c234 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 804464e:	687b      	ldr	r3, [r7, #4]
 8044650:	681b      	ldr	r3, [r3, #0]
 8044652:	4618      	mov	r0, r3
 8044654:	f004 ff0c 	bl	8049470 <USB_ReadInterrupts>
 8044658:	4603      	mov	r3, r0
 804465a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804465e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8044662:	d102      	bne.n	804466a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8044664:	6878      	ldr	r0, [r7, #4]
 8044666:	f001 f89e 	bl	80457a6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 804466a:	687b      	ldr	r3, [r7, #4]
 804466c:	681b      	ldr	r3, [r3, #0]
 804466e:	4618      	mov	r0, r3
 8044670:	f004 fefe 	bl	8049470 <USB_ReadInterrupts>
 8044674:	4603      	mov	r3, r0
 8044676:	f003 0308 	and.w	r3, r3, #8
 804467a:	2b08      	cmp	r3, #8
 804467c:	d106      	bne.n	804468c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 804467e:	6878      	ldr	r0, [r7, #4]
 8044680:	f007 fdbc 	bl	804c1fc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8044684:	687b      	ldr	r3, [r7, #4]
 8044686:	681b      	ldr	r3, [r3, #0]
 8044688:	2208      	movs	r2, #8
 804468a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 804468c:	687b      	ldr	r3, [r7, #4]
 804468e:	681b      	ldr	r3, [r3, #0]
 8044690:	4618      	mov	r0, r3
 8044692:	f004 feed 	bl	8049470 <USB_ReadInterrupts>
 8044696:	4603      	mov	r3, r0
 8044698:	f003 0310 	and.w	r3, r3, #16
 804469c:	2b10      	cmp	r3, #16
 804469e:	d101      	bne.n	80446a4 <HAL_HCD_IRQHandler+0x158>
 80446a0:	2301      	movs	r3, #1
 80446a2:	e000      	b.n	80446a6 <HAL_HCD_IRQHandler+0x15a>
 80446a4:	2300      	movs	r3, #0
 80446a6:	2b00      	cmp	r3, #0
 80446a8:	d012      	beq.n	80446d0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80446aa:	687b      	ldr	r3, [r7, #4]
 80446ac:	681b      	ldr	r3, [r3, #0]
 80446ae:	699a      	ldr	r2, [r3, #24]
 80446b0:	687b      	ldr	r3, [r7, #4]
 80446b2:	681b      	ldr	r3, [r3, #0]
 80446b4:	f022 0210 	bic.w	r2, r2, #16
 80446b8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80446ba:	6878      	ldr	r0, [r7, #4]
 80446bc:	f000 ffa1 	bl	8045602 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80446c0:	687b      	ldr	r3, [r7, #4]
 80446c2:	681b      	ldr	r3, [r3, #0]
 80446c4:	699a      	ldr	r2, [r3, #24]
 80446c6:	687b      	ldr	r3, [r7, #4]
 80446c8:	681b      	ldr	r3, [r3, #0]
 80446ca:	f042 0210 	orr.w	r2, r2, #16
 80446ce:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80446d0:	687b      	ldr	r3, [r7, #4]
 80446d2:	681b      	ldr	r3, [r3, #0]
 80446d4:	4618      	mov	r0, r3
 80446d6:	f004 fecb 	bl	8049470 <USB_ReadInterrupts>
 80446da:	4603      	mov	r3, r0
 80446dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80446e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80446e4:	d13a      	bne.n	804475c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80446e6:	687b      	ldr	r3, [r7, #4]
 80446e8:	681b      	ldr	r3, [r3, #0]
 80446ea:	4618      	mov	r0, r3
 80446ec:	f005 fb00 	bl	8049cf0 <USB_HC_ReadInterrupt>
 80446f0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80446f2:	2300      	movs	r3, #0
 80446f4:	617b      	str	r3, [r7, #20]
 80446f6:	e025      	b.n	8044744 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80446f8:	697b      	ldr	r3, [r7, #20]
 80446fa:	f003 030f 	and.w	r3, r3, #15
 80446fe:	68ba      	ldr	r2, [r7, #8]
 8044700:	fa22 f303 	lsr.w	r3, r2, r3
 8044704:	f003 0301 	and.w	r3, r3, #1
 8044708:	2b00      	cmp	r3, #0
 804470a:	d018      	beq.n	804473e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 804470c:	697b      	ldr	r3, [r7, #20]
 804470e:	015a      	lsls	r2, r3, #5
 8044710:	68fb      	ldr	r3, [r7, #12]
 8044712:	4413      	add	r3, r2
 8044714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044718:	681b      	ldr	r3, [r3, #0]
 804471a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804471e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8044722:	d106      	bne.n	8044732 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8044724:	697b      	ldr	r3, [r7, #20]
 8044726:	b2db      	uxtb	r3, r3
 8044728:	4619      	mov	r1, r3
 804472a:	6878      	ldr	r0, [r7, #4]
 804472c:	f000 f8ab 	bl	8044886 <HCD_HC_IN_IRQHandler>
 8044730:	e005      	b.n	804473e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8044732:	697b      	ldr	r3, [r7, #20]
 8044734:	b2db      	uxtb	r3, r3
 8044736:	4619      	mov	r1, r3
 8044738:	6878      	ldr	r0, [r7, #4]
 804473a:	f000 fbf9 	bl	8044f30 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 804473e:	697b      	ldr	r3, [r7, #20]
 8044740:	3301      	adds	r3, #1
 8044742:	617b      	str	r3, [r7, #20]
 8044744:	687b      	ldr	r3, [r7, #4]
 8044746:	689b      	ldr	r3, [r3, #8]
 8044748:	697a      	ldr	r2, [r7, #20]
 804474a:	429a      	cmp	r2, r3
 804474c:	d3d4      	bcc.n	80446f8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 804474e:	687b      	ldr	r3, [r7, #4]
 8044750:	681b      	ldr	r3, [r3, #0]
 8044752:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8044756:	615a      	str	r2, [r3, #20]
 8044758:	e000      	b.n	804475c <HAL_HCD_IRQHandler+0x210>
      return;
 804475a:	bf00      	nop
    }
  }
}
 804475c:	3718      	adds	r7, #24
 804475e:	46bd      	mov	sp, r7
 8044760:	bd80      	pop	{r7, pc}

08044762 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8044762:	b580      	push	{r7, lr}
 8044764:	b082      	sub	sp, #8
 8044766:	af00      	add	r7, sp, #0
 8044768:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 804476a:	687b      	ldr	r3, [r7, #4]
 804476c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8044770:	2b01      	cmp	r3, #1
 8044772:	d101      	bne.n	8044778 <HAL_HCD_Start+0x16>
 8044774:	2302      	movs	r3, #2
 8044776:	e013      	b.n	80447a0 <HAL_HCD_Start+0x3e>
 8044778:	687b      	ldr	r3, [r7, #4]
 804477a:	2201      	movs	r2, #1
 804477c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8044780:	687b      	ldr	r3, [r7, #4]
 8044782:	681b      	ldr	r3, [r3, #0]
 8044784:	2101      	movs	r1, #1
 8044786:	4618      	mov	r0, r3
 8044788:	f004 ffec 	bl	8049764 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 804478c:	687b      	ldr	r3, [r7, #4]
 804478e:	681b      	ldr	r3, [r3, #0]
 8044790:	4618      	mov	r0, r3
 8044792:	f004 fd04 	bl	804919e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8044796:	687b      	ldr	r3, [r7, #4]
 8044798:	2200      	movs	r2, #0
 804479a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 804479e:	2300      	movs	r3, #0
}
 80447a0:	4618      	mov	r0, r3
 80447a2:	3708      	adds	r7, #8
 80447a4:	46bd      	mov	sp, r7
 80447a6:	bd80      	pop	{r7, pc}

080447a8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80447a8:	b580      	push	{r7, lr}
 80447aa:	b082      	sub	sp, #8
 80447ac:	af00      	add	r7, sp, #0
 80447ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80447b0:	687b      	ldr	r3, [r7, #4]
 80447b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80447b6:	2b01      	cmp	r3, #1
 80447b8:	d101      	bne.n	80447be <HAL_HCD_Stop+0x16>
 80447ba:	2302      	movs	r3, #2
 80447bc:	e00d      	b.n	80447da <HAL_HCD_Stop+0x32>
 80447be:	687b      	ldr	r3, [r7, #4]
 80447c0:	2201      	movs	r2, #1
 80447c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80447c6:	687b      	ldr	r3, [r7, #4]
 80447c8:	681b      	ldr	r3, [r3, #0]
 80447ca:	4618      	mov	r0, r3
 80447cc:	f005 fbda 	bl	8049f84 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80447d0:	687b      	ldr	r3, [r7, #4]
 80447d2:	2200      	movs	r2, #0
 80447d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80447d8:	2300      	movs	r3, #0
}
 80447da:	4618      	mov	r0, r3
 80447dc:	3708      	adds	r7, #8
 80447de:	46bd      	mov	sp, r7
 80447e0:	bd80      	pop	{r7, pc}

080447e2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80447e2:	b580      	push	{r7, lr}
 80447e4:	b082      	sub	sp, #8
 80447e6:	af00      	add	r7, sp, #0
 80447e8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80447ea:	687b      	ldr	r3, [r7, #4]
 80447ec:	681b      	ldr	r3, [r3, #0]
 80447ee:	4618      	mov	r0, r3
 80447f0:	f004 ff8e 	bl	8049710 <USB_ResetPort>
 80447f4:	4603      	mov	r3, r0
}
 80447f6:	4618      	mov	r0, r3
 80447f8:	3708      	adds	r7, #8
 80447fa:	46bd      	mov	sp, r7
 80447fc:	bd80      	pop	{r7, pc}

080447fe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80447fe:	b480      	push	{r7}
 8044800:	b083      	sub	sp, #12
 8044802:	af00      	add	r7, sp, #0
 8044804:	6078      	str	r0, [r7, #4]
 8044806:	460b      	mov	r3, r1
 8044808:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 804480a:	78fb      	ldrb	r3, [r7, #3]
 804480c:	687a      	ldr	r2, [r7, #4]
 804480e:	212c      	movs	r1, #44	; 0x2c
 8044810:	fb01 f303 	mul.w	r3, r1, r3
 8044814:	4413      	add	r3, r2
 8044816:	3360      	adds	r3, #96	; 0x60
 8044818:	781b      	ldrb	r3, [r3, #0]
}
 804481a:	4618      	mov	r0, r3
 804481c:	370c      	adds	r7, #12
 804481e:	46bd      	mov	sp, r7
 8044820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044824:	4770      	bx	lr

08044826 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8044826:	b480      	push	{r7}
 8044828:	b083      	sub	sp, #12
 804482a:	af00      	add	r7, sp, #0
 804482c:	6078      	str	r0, [r7, #4]
 804482e:	460b      	mov	r3, r1
 8044830:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8044832:	78fb      	ldrb	r3, [r7, #3]
 8044834:	687a      	ldr	r2, [r7, #4]
 8044836:	212c      	movs	r1, #44	; 0x2c
 8044838:	fb01 f303 	mul.w	r3, r1, r3
 804483c:	4413      	add	r3, r2
 804483e:	3350      	adds	r3, #80	; 0x50
 8044840:	681b      	ldr	r3, [r3, #0]
}
 8044842:	4618      	mov	r0, r3
 8044844:	370c      	adds	r7, #12
 8044846:	46bd      	mov	sp, r7
 8044848:	f85d 7b04 	ldr.w	r7, [sp], #4
 804484c:	4770      	bx	lr

0804484e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 804484e:	b580      	push	{r7, lr}
 8044850:	b082      	sub	sp, #8
 8044852:	af00      	add	r7, sp, #0
 8044854:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8044856:	687b      	ldr	r3, [r7, #4]
 8044858:	681b      	ldr	r3, [r3, #0]
 804485a:	4618      	mov	r0, r3
 804485c:	f004 ffd2 	bl	8049804 <USB_GetCurrentFrame>
 8044860:	4603      	mov	r3, r0
}
 8044862:	4618      	mov	r0, r3
 8044864:	3708      	adds	r7, #8
 8044866:	46bd      	mov	sp, r7
 8044868:	bd80      	pop	{r7, pc}

0804486a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 804486a:	b580      	push	{r7, lr}
 804486c:	b082      	sub	sp, #8
 804486e:	af00      	add	r7, sp, #0
 8044870:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8044872:	687b      	ldr	r3, [r7, #4]
 8044874:	681b      	ldr	r3, [r3, #0]
 8044876:	4618      	mov	r0, r3
 8044878:	f004 ffad 	bl	80497d6 <USB_GetHostSpeed>
 804487c:	4603      	mov	r3, r0
}
 804487e:	4618      	mov	r0, r3
 8044880:	3708      	adds	r7, #8
 8044882:	46bd      	mov	sp, r7
 8044884:	bd80      	pop	{r7, pc}

08044886 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8044886:	b580      	push	{r7, lr}
 8044888:	b086      	sub	sp, #24
 804488a:	af00      	add	r7, sp, #0
 804488c:	6078      	str	r0, [r7, #4]
 804488e:	460b      	mov	r3, r1
 8044890:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8044892:	687b      	ldr	r3, [r7, #4]
 8044894:	681b      	ldr	r3, [r3, #0]
 8044896:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8044898:	697b      	ldr	r3, [r7, #20]
 804489a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 804489c:	78fb      	ldrb	r3, [r7, #3]
 804489e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80448a0:	68fb      	ldr	r3, [r7, #12]
 80448a2:	015a      	lsls	r2, r3, #5
 80448a4:	693b      	ldr	r3, [r7, #16]
 80448a6:	4413      	add	r3, r2
 80448a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80448ac:	689b      	ldr	r3, [r3, #8]
 80448ae:	f003 0304 	and.w	r3, r3, #4
 80448b2:	2b04      	cmp	r3, #4
 80448b4:	d11a      	bne.n	80448ec <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80448b6:	68fb      	ldr	r3, [r7, #12]
 80448b8:	015a      	lsls	r2, r3, #5
 80448ba:	693b      	ldr	r3, [r7, #16]
 80448bc:	4413      	add	r3, r2
 80448be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80448c2:	461a      	mov	r2, r3
 80448c4:	2304      	movs	r3, #4
 80448c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80448c8:	687a      	ldr	r2, [r7, #4]
 80448ca:	68fb      	ldr	r3, [r7, #12]
 80448cc:	212c      	movs	r1, #44	; 0x2c
 80448ce:	fb01 f303 	mul.w	r3, r1, r3
 80448d2:	4413      	add	r3, r2
 80448d4:	3361      	adds	r3, #97	; 0x61
 80448d6:	2206      	movs	r2, #6
 80448d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80448da:	687b      	ldr	r3, [r7, #4]
 80448dc:	681b      	ldr	r3, [r3, #0]
 80448de:	68fa      	ldr	r2, [r7, #12]
 80448e0:	b2d2      	uxtb	r2, r2
 80448e2:	4611      	mov	r1, r2
 80448e4:	4618      	mov	r0, r3
 80448e6:	f005 fa14 	bl	8049d12 <USB_HC_Halt>
 80448ea:	e0af      	b.n	8044a4c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80448ec:	68fb      	ldr	r3, [r7, #12]
 80448ee:	015a      	lsls	r2, r3, #5
 80448f0:	693b      	ldr	r3, [r7, #16]
 80448f2:	4413      	add	r3, r2
 80448f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80448f8:	689b      	ldr	r3, [r3, #8]
 80448fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80448fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8044902:	d11b      	bne.n	804493c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8044904:	68fb      	ldr	r3, [r7, #12]
 8044906:	015a      	lsls	r2, r3, #5
 8044908:	693b      	ldr	r3, [r7, #16]
 804490a:	4413      	add	r3, r2
 804490c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044910:	461a      	mov	r2, r3
 8044912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8044916:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8044918:	687a      	ldr	r2, [r7, #4]
 804491a:	68fb      	ldr	r3, [r7, #12]
 804491c:	212c      	movs	r1, #44	; 0x2c
 804491e:	fb01 f303 	mul.w	r3, r1, r3
 8044922:	4413      	add	r3, r2
 8044924:	3361      	adds	r3, #97	; 0x61
 8044926:	2207      	movs	r2, #7
 8044928:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804492a:	687b      	ldr	r3, [r7, #4]
 804492c:	681b      	ldr	r3, [r3, #0]
 804492e:	68fa      	ldr	r2, [r7, #12]
 8044930:	b2d2      	uxtb	r2, r2
 8044932:	4611      	mov	r1, r2
 8044934:	4618      	mov	r0, r3
 8044936:	f005 f9ec 	bl	8049d12 <USB_HC_Halt>
 804493a:	e087      	b.n	8044a4c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 804493c:	68fb      	ldr	r3, [r7, #12]
 804493e:	015a      	lsls	r2, r3, #5
 8044940:	693b      	ldr	r3, [r7, #16]
 8044942:	4413      	add	r3, r2
 8044944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044948:	689b      	ldr	r3, [r3, #8]
 804494a:	f003 0320 	and.w	r3, r3, #32
 804494e:	2b20      	cmp	r3, #32
 8044950:	d109      	bne.n	8044966 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8044952:	68fb      	ldr	r3, [r7, #12]
 8044954:	015a      	lsls	r2, r3, #5
 8044956:	693b      	ldr	r3, [r7, #16]
 8044958:	4413      	add	r3, r2
 804495a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804495e:	461a      	mov	r2, r3
 8044960:	2320      	movs	r3, #32
 8044962:	6093      	str	r3, [r2, #8]
 8044964:	e072      	b.n	8044a4c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8044966:	68fb      	ldr	r3, [r7, #12]
 8044968:	015a      	lsls	r2, r3, #5
 804496a:	693b      	ldr	r3, [r7, #16]
 804496c:	4413      	add	r3, r2
 804496e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044972:	689b      	ldr	r3, [r3, #8]
 8044974:	f003 0308 	and.w	r3, r3, #8
 8044978:	2b08      	cmp	r3, #8
 804497a:	d11a      	bne.n	80449b2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 804497c:	68fb      	ldr	r3, [r7, #12]
 804497e:	015a      	lsls	r2, r3, #5
 8044980:	693b      	ldr	r3, [r7, #16]
 8044982:	4413      	add	r3, r2
 8044984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044988:	461a      	mov	r2, r3
 804498a:	2308      	movs	r3, #8
 804498c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 804498e:	687a      	ldr	r2, [r7, #4]
 8044990:	68fb      	ldr	r3, [r7, #12]
 8044992:	212c      	movs	r1, #44	; 0x2c
 8044994:	fb01 f303 	mul.w	r3, r1, r3
 8044998:	4413      	add	r3, r2
 804499a:	3361      	adds	r3, #97	; 0x61
 804499c:	2205      	movs	r2, #5
 804499e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80449a0:	687b      	ldr	r3, [r7, #4]
 80449a2:	681b      	ldr	r3, [r3, #0]
 80449a4:	68fa      	ldr	r2, [r7, #12]
 80449a6:	b2d2      	uxtb	r2, r2
 80449a8:	4611      	mov	r1, r2
 80449aa:	4618      	mov	r0, r3
 80449ac:	f005 f9b1 	bl	8049d12 <USB_HC_Halt>
 80449b0:	e04c      	b.n	8044a4c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80449b2:	68fb      	ldr	r3, [r7, #12]
 80449b4:	015a      	lsls	r2, r3, #5
 80449b6:	693b      	ldr	r3, [r7, #16]
 80449b8:	4413      	add	r3, r2
 80449ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80449be:	689b      	ldr	r3, [r3, #8]
 80449c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80449c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80449c8:	d11b      	bne.n	8044a02 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80449ca:	68fb      	ldr	r3, [r7, #12]
 80449cc:	015a      	lsls	r2, r3, #5
 80449ce:	693b      	ldr	r3, [r7, #16]
 80449d0:	4413      	add	r3, r2
 80449d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80449d6:	461a      	mov	r2, r3
 80449d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80449dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80449de:	687a      	ldr	r2, [r7, #4]
 80449e0:	68fb      	ldr	r3, [r7, #12]
 80449e2:	212c      	movs	r1, #44	; 0x2c
 80449e4:	fb01 f303 	mul.w	r3, r1, r3
 80449e8:	4413      	add	r3, r2
 80449ea:	3361      	adds	r3, #97	; 0x61
 80449ec:	2208      	movs	r2, #8
 80449ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80449f0:	687b      	ldr	r3, [r7, #4]
 80449f2:	681b      	ldr	r3, [r3, #0]
 80449f4:	68fa      	ldr	r2, [r7, #12]
 80449f6:	b2d2      	uxtb	r2, r2
 80449f8:	4611      	mov	r1, r2
 80449fa:	4618      	mov	r0, r3
 80449fc:	f005 f989 	bl	8049d12 <USB_HC_Halt>
 8044a00:	e024      	b.n	8044a4c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8044a02:	68fb      	ldr	r3, [r7, #12]
 8044a04:	015a      	lsls	r2, r3, #5
 8044a06:	693b      	ldr	r3, [r7, #16]
 8044a08:	4413      	add	r3, r2
 8044a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044a0e:	689b      	ldr	r3, [r3, #8]
 8044a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8044a14:	2b80      	cmp	r3, #128	; 0x80
 8044a16:	d119      	bne.n	8044a4c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8044a18:	68fb      	ldr	r3, [r7, #12]
 8044a1a:	015a      	lsls	r2, r3, #5
 8044a1c:	693b      	ldr	r3, [r7, #16]
 8044a1e:	4413      	add	r3, r2
 8044a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044a24:	461a      	mov	r2, r3
 8044a26:	2380      	movs	r3, #128	; 0x80
 8044a28:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8044a2a:	687a      	ldr	r2, [r7, #4]
 8044a2c:	68fb      	ldr	r3, [r7, #12]
 8044a2e:	212c      	movs	r1, #44	; 0x2c
 8044a30:	fb01 f303 	mul.w	r3, r1, r3
 8044a34:	4413      	add	r3, r2
 8044a36:	3361      	adds	r3, #97	; 0x61
 8044a38:	2206      	movs	r2, #6
 8044a3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044a3c:	687b      	ldr	r3, [r7, #4]
 8044a3e:	681b      	ldr	r3, [r3, #0]
 8044a40:	68fa      	ldr	r2, [r7, #12]
 8044a42:	b2d2      	uxtb	r2, r2
 8044a44:	4611      	mov	r1, r2
 8044a46:	4618      	mov	r0, r3
 8044a48:	f005 f963 	bl	8049d12 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8044a4c:	68fb      	ldr	r3, [r7, #12]
 8044a4e:	015a      	lsls	r2, r3, #5
 8044a50:	693b      	ldr	r3, [r7, #16]
 8044a52:	4413      	add	r3, r2
 8044a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044a58:	689b      	ldr	r3, [r3, #8]
 8044a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8044a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8044a62:	d112      	bne.n	8044a8a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044a64:	687b      	ldr	r3, [r7, #4]
 8044a66:	681b      	ldr	r3, [r3, #0]
 8044a68:	68fa      	ldr	r2, [r7, #12]
 8044a6a:	b2d2      	uxtb	r2, r2
 8044a6c:	4611      	mov	r1, r2
 8044a6e:	4618      	mov	r0, r3
 8044a70:	f005 f94f 	bl	8049d12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8044a74:	68fb      	ldr	r3, [r7, #12]
 8044a76:	015a      	lsls	r2, r3, #5
 8044a78:	693b      	ldr	r3, [r7, #16]
 8044a7a:	4413      	add	r3, r2
 8044a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044a80:	461a      	mov	r2, r3
 8044a82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8044a86:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8044a88:	e24e      	b.n	8044f28 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8044a8a:	68fb      	ldr	r3, [r7, #12]
 8044a8c:	015a      	lsls	r2, r3, #5
 8044a8e:	693b      	ldr	r3, [r7, #16]
 8044a90:	4413      	add	r3, r2
 8044a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044a96:	689b      	ldr	r3, [r3, #8]
 8044a98:	f003 0301 	and.w	r3, r3, #1
 8044a9c:	2b01      	cmp	r3, #1
 8044a9e:	f040 80df 	bne.w	8044c60 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8044aa2:	687b      	ldr	r3, [r7, #4]
 8044aa4:	691b      	ldr	r3, [r3, #16]
 8044aa6:	2b00      	cmp	r3, #0
 8044aa8:	d019      	beq.n	8044ade <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8044aaa:	687a      	ldr	r2, [r7, #4]
 8044aac:	68fb      	ldr	r3, [r7, #12]
 8044aae:	212c      	movs	r1, #44	; 0x2c
 8044ab0:	fb01 f303 	mul.w	r3, r1, r3
 8044ab4:	4413      	add	r3, r2
 8044ab6:	3348      	adds	r3, #72	; 0x48
 8044ab8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8044aba:	68fb      	ldr	r3, [r7, #12]
 8044abc:	0159      	lsls	r1, r3, #5
 8044abe:	693b      	ldr	r3, [r7, #16]
 8044ac0:	440b      	add	r3, r1
 8044ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044ac6:	691b      	ldr	r3, [r3, #16]
 8044ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8044acc:	1ad2      	subs	r2, r2, r3
 8044ace:	6879      	ldr	r1, [r7, #4]
 8044ad0:	68fb      	ldr	r3, [r7, #12]
 8044ad2:	202c      	movs	r0, #44	; 0x2c
 8044ad4:	fb00 f303 	mul.w	r3, r0, r3
 8044ad8:	440b      	add	r3, r1
 8044ada:	3350      	adds	r3, #80	; 0x50
 8044adc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8044ade:	687a      	ldr	r2, [r7, #4]
 8044ae0:	68fb      	ldr	r3, [r7, #12]
 8044ae2:	212c      	movs	r1, #44	; 0x2c
 8044ae4:	fb01 f303 	mul.w	r3, r1, r3
 8044ae8:	4413      	add	r3, r2
 8044aea:	3361      	adds	r3, #97	; 0x61
 8044aec:	2201      	movs	r2, #1
 8044aee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8044af0:	687a      	ldr	r2, [r7, #4]
 8044af2:	68fb      	ldr	r3, [r7, #12]
 8044af4:	212c      	movs	r1, #44	; 0x2c
 8044af6:	fb01 f303 	mul.w	r3, r1, r3
 8044afa:	4413      	add	r3, r2
 8044afc:	335c      	adds	r3, #92	; 0x5c
 8044afe:	2200      	movs	r2, #0
 8044b00:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8044b02:	68fb      	ldr	r3, [r7, #12]
 8044b04:	015a      	lsls	r2, r3, #5
 8044b06:	693b      	ldr	r3, [r7, #16]
 8044b08:	4413      	add	r3, r2
 8044b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044b0e:	461a      	mov	r2, r3
 8044b10:	2301      	movs	r3, #1
 8044b12:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8044b14:	687a      	ldr	r2, [r7, #4]
 8044b16:	68fb      	ldr	r3, [r7, #12]
 8044b18:	212c      	movs	r1, #44	; 0x2c
 8044b1a:	fb01 f303 	mul.w	r3, r1, r3
 8044b1e:	4413      	add	r3, r2
 8044b20:	333f      	adds	r3, #63	; 0x3f
 8044b22:	781b      	ldrb	r3, [r3, #0]
 8044b24:	2b00      	cmp	r3, #0
 8044b26:	d009      	beq.n	8044b3c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8044b28:	687a      	ldr	r2, [r7, #4]
 8044b2a:	68fb      	ldr	r3, [r7, #12]
 8044b2c:	212c      	movs	r1, #44	; 0x2c
 8044b2e:	fb01 f303 	mul.w	r3, r1, r3
 8044b32:	4413      	add	r3, r2
 8044b34:	333f      	adds	r3, #63	; 0x3f
 8044b36:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8044b38:	2b02      	cmp	r3, #2
 8044b3a:	d111      	bne.n	8044b60 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044b3c:	687b      	ldr	r3, [r7, #4]
 8044b3e:	681b      	ldr	r3, [r3, #0]
 8044b40:	68fa      	ldr	r2, [r7, #12]
 8044b42:	b2d2      	uxtb	r2, r2
 8044b44:	4611      	mov	r1, r2
 8044b46:	4618      	mov	r0, r3
 8044b48:	f005 f8e3 	bl	8049d12 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8044b4c:	68fb      	ldr	r3, [r7, #12]
 8044b4e:	015a      	lsls	r2, r3, #5
 8044b50:	693b      	ldr	r3, [r7, #16]
 8044b52:	4413      	add	r3, r2
 8044b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044b58:	461a      	mov	r2, r3
 8044b5a:	2310      	movs	r3, #16
 8044b5c:	6093      	str	r3, [r2, #8]
 8044b5e:	e03a      	b.n	8044bd6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8044b60:	687a      	ldr	r2, [r7, #4]
 8044b62:	68fb      	ldr	r3, [r7, #12]
 8044b64:	212c      	movs	r1, #44	; 0x2c
 8044b66:	fb01 f303 	mul.w	r3, r1, r3
 8044b6a:	4413      	add	r3, r2
 8044b6c:	333f      	adds	r3, #63	; 0x3f
 8044b6e:	781b      	ldrb	r3, [r3, #0]
 8044b70:	2b03      	cmp	r3, #3
 8044b72:	d009      	beq.n	8044b88 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8044b74:	687a      	ldr	r2, [r7, #4]
 8044b76:	68fb      	ldr	r3, [r7, #12]
 8044b78:	212c      	movs	r1, #44	; 0x2c
 8044b7a:	fb01 f303 	mul.w	r3, r1, r3
 8044b7e:	4413      	add	r3, r2
 8044b80:	333f      	adds	r3, #63	; 0x3f
 8044b82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8044b84:	2b01      	cmp	r3, #1
 8044b86:	d126      	bne.n	8044bd6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8044b88:	68fb      	ldr	r3, [r7, #12]
 8044b8a:	015a      	lsls	r2, r3, #5
 8044b8c:	693b      	ldr	r3, [r7, #16]
 8044b8e:	4413      	add	r3, r2
 8044b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044b94:	681b      	ldr	r3, [r3, #0]
 8044b96:	68fa      	ldr	r2, [r7, #12]
 8044b98:	0151      	lsls	r1, r2, #5
 8044b9a:	693a      	ldr	r2, [r7, #16]
 8044b9c:	440a      	add	r2, r1
 8044b9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8044ba2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8044ba6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8044ba8:	687a      	ldr	r2, [r7, #4]
 8044baa:	68fb      	ldr	r3, [r7, #12]
 8044bac:	212c      	movs	r1, #44	; 0x2c
 8044bae:	fb01 f303 	mul.w	r3, r1, r3
 8044bb2:	4413      	add	r3, r2
 8044bb4:	3360      	adds	r3, #96	; 0x60
 8044bb6:	2201      	movs	r2, #1
 8044bb8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8044bba:	68fb      	ldr	r3, [r7, #12]
 8044bbc:	b2d9      	uxtb	r1, r3
 8044bbe:	687a      	ldr	r2, [r7, #4]
 8044bc0:	68fb      	ldr	r3, [r7, #12]
 8044bc2:	202c      	movs	r0, #44	; 0x2c
 8044bc4:	fb00 f303 	mul.w	r3, r0, r3
 8044bc8:	4413      	add	r3, r2
 8044bca:	3360      	adds	r3, #96	; 0x60
 8044bcc:	781b      	ldrb	r3, [r3, #0]
 8044bce:	461a      	mov	r2, r3
 8044bd0:	6878      	ldr	r0, [r7, #4]
 8044bd2:	f007 fb3d 	bl	804c250 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8044bd6:	687b      	ldr	r3, [r7, #4]
 8044bd8:	691b      	ldr	r3, [r3, #16]
 8044bda:	2b01      	cmp	r3, #1
 8044bdc:	d12b      	bne.n	8044c36 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8044bde:	687a      	ldr	r2, [r7, #4]
 8044be0:	68fb      	ldr	r3, [r7, #12]
 8044be2:	212c      	movs	r1, #44	; 0x2c
 8044be4:	fb01 f303 	mul.w	r3, r1, r3
 8044be8:	4413      	add	r3, r2
 8044bea:	3348      	adds	r3, #72	; 0x48
 8044bec:	681b      	ldr	r3, [r3, #0]
 8044bee:	6879      	ldr	r1, [r7, #4]
 8044bf0:	68fa      	ldr	r2, [r7, #12]
 8044bf2:	202c      	movs	r0, #44	; 0x2c
 8044bf4:	fb00 f202 	mul.w	r2, r0, r2
 8044bf8:	440a      	add	r2, r1
 8044bfa:	3240      	adds	r2, #64	; 0x40
 8044bfc:	8812      	ldrh	r2, [r2, #0]
 8044bfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8044c02:	f003 0301 	and.w	r3, r3, #1
 8044c06:	2b00      	cmp	r3, #0
 8044c08:	f000 818e 	beq.w	8044f28 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8044c0c:	687a      	ldr	r2, [r7, #4]
 8044c0e:	68fb      	ldr	r3, [r7, #12]
 8044c10:	212c      	movs	r1, #44	; 0x2c
 8044c12:	fb01 f303 	mul.w	r3, r1, r3
 8044c16:	4413      	add	r3, r2
 8044c18:	3354      	adds	r3, #84	; 0x54
 8044c1a:	781b      	ldrb	r3, [r3, #0]
 8044c1c:	f083 0301 	eor.w	r3, r3, #1
 8044c20:	b2d8      	uxtb	r0, r3
 8044c22:	687a      	ldr	r2, [r7, #4]
 8044c24:	68fb      	ldr	r3, [r7, #12]
 8044c26:	212c      	movs	r1, #44	; 0x2c
 8044c28:	fb01 f303 	mul.w	r3, r1, r3
 8044c2c:	4413      	add	r3, r2
 8044c2e:	3354      	adds	r3, #84	; 0x54
 8044c30:	4602      	mov	r2, r0
 8044c32:	701a      	strb	r2, [r3, #0]
}
 8044c34:	e178      	b.n	8044f28 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8044c36:	687a      	ldr	r2, [r7, #4]
 8044c38:	68fb      	ldr	r3, [r7, #12]
 8044c3a:	212c      	movs	r1, #44	; 0x2c
 8044c3c:	fb01 f303 	mul.w	r3, r1, r3
 8044c40:	4413      	add	r3, r2
 8044c42:	3354      	adds	r3, #84	; 0x54
 8044c44:	781b      	ldrb	r3, [r3, #0]
 8044c46:	f083 0301 	eor.w	r3, r3, #1
 8044c4a:	b2d8      	uxtb	r0, r3
 8044c4c:	687a      	ldr	r2, [r7, #4]
 8044c4e:	68fb      	ldr	r3, [r7, #12]
 8044c50:	212c      	movs	r1, #44	; 0x2c
 8044c52:	fb01 f303 	mul.w	r3, r1, r3
 8044c56:	4413      	add	r3, r2
 8044c58:	3354      	adds	r3, #84	; 0x54
 8044c5a:	4602      	mov	r2, r0
 8044c5c:	701a      	strb	r2, [r3, #0]
}
 8044c5e:	e163      	b.n	8044f28 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8044c60:	68fb      	ldr	r3, [r7, #12]
 8044c62:	015a      	lsls	r2, r3, #5
 8044c64:	693b      	ldr	r3, [r7, #16]
 8044c66:	4413      	add	r3, r2
 8044c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044c6c:	689b      	ldr	r3, [r3, #8]
 8044c6e:	f003 0302 	and.w	r3, r3, #2
 8044c72:	2b02      	cmp	r3, #2
 8044c74:	f040 80f6 	bne.w	8044e64 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8044c78:	687a      	ldr	r2, [r7, #4]
 8044c7a:	68fb      	ldr	r3, [r7, #12]
 8044c7c:	212c      	movs	r1, #44	; 0x2c
 8044c7e:	fb01 f303 	mul.w	r3, r1, r3
 8044c82:	4413      	add	r3, r2
 8044c84:	3361      	adds	r3, #97	; 0x61
 8044c86:	781b      	ldrb	r3, [r3, #0]
 8044c88:	2b01      	cmp	r3, #1
 8044c8a:	d109      	bne.n	8044ca0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8044c8c:	687a      	ldr	r2, [r7, #4]
 8044c8e:	68fb      	ldr	r3, [r7, #12]
 8044c90:	212c      	movs	r1, #44	; 0x2c
 8044c92:	fb01 f303 	mul.w	r3, r1, r3
 8044c96:	4413      	add	r3, r2
 8044c98:	3360      	adds	r3, #96	; 0x60
 8044c9a:	2201      	movs	r2, #1
 8044c9c:	701a      	strb	r2, [r3, #0]
 8044c9e:	e0c9      	b.n	8044e34 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8044ca0:	687a      	ldr	r2, [r7, #4]
 8044ca2:	68fb      	ldr	r3, [r7, #12]
 8044ca4:	212c      	movs	r1, #44	; 0x2c
 8044ca6:	fb01 f303 	mul.w	r3, r1, r3
 8044caa:	4413      	add	r3, r2
 8044cac:	3361      	adds	r3, #97	; 0x61
 8044cae:	781b      	ldrb	r3, [r3, #0]
 8044cb0:	2b05      	cmp	r3, #5
 8044cb2:	d109      	bne.n	8044cc8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8044cb4:	687a      	ldr	r2, [r7, #4]
 8044cb6:	68fb      	ldr	r3, [r7, #12]
 8044cb8:	212c      	movs	r1, #44	; 0x2c
 8044cba:	fb01 f303 	mul.w	r3, r1, r3
 8044cbe:	4413      	add	r3, r2
 8044cc0:	3360      	adds	r3, #96	; 0x60
 8044cc2:	2205      	movs	r2, #5
 8044cc4:	701a      	strb	r2, [r3, #0]
 8044cc6:	e0b5      	b.n	8044e34 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8044cc8:	687a      	ldr	r2, [r7, #4]
 8044cca:	68fb      	ldr	r3, [r7, #12]
 8044ccc:	212c      	movs	r1, #44	; 0x2c
 8044cce:	fb01 f303 	mul.w	r3, r1, r3
 8044cd2:	4413      	add	r3, r2
 8044cd4:	3361      	adds	r3, #97	; 0x61
 8044cd6:	781b      	ldrb	r3, [r3, #0]
 8044cd8:	2b06      	cmp	r3, #6
 8044cda:	d009      	beq.n	8044cf0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8044cdc:	687a      	ldr	r2, [r7, #4]
 8044cde:	68fb      	ldr	r3, [r7, #12]
 8044ce0:	212c      	movs	r1, #44	; 0x2c
 8044ce2:	fb01 f303 	mul.w	r3, r1, r3
 8044ce6:	4413      	add	r3, r2
 8044ce8:	3361      	adds	r3, #97	; 0x61
 8044cea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8044cec:	2b08      	cmp	r3, #8
 8044cee:	d150      	bne.n	8044d92 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8044cf0:	687a      	ldr	r2, [r7, #4]
 8044cf2:	68fb      	ldr	r3, [r7, #12]
 8044cf4:	212c      	movs	r1, #44	; 0x2c
 8044cf6:	fb01 f303 	mul.w	r3, r1, r3
 8044cfa:	4413      	add	r3, r2
 8044cfc:	335c      	adds	r3, #92	; 0x5c
 8044cfe:	681b      	ldr	r3, [r3, #0]
 8044d00:	1c5a      	adds	r2, r3, #1
 8044d02:	6879      	ldr	r1, [r7, #4]
 8044d04:	68fb      	ldr	r3, [r7, #12]
 8044d06:	202c      	movs	r0, #44	; 0x2c
 8044d08:	fb00 f303 	mul.w	r3, r0, r3
 8044d0c:	440b      	add	r3, r1
 8044d0e:	335c      	adds	r3, #92	; 0x5c
 8044d10:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8044d12:	687a      	ldr	r2, [r7, #4]
 8044d14:	68fb      	ldr	r3, [r7, #12]
 8044d16:	212c      	movs	r1, #44	; 0x2c
 8044d18:	fb01 f303 	mul.w	r3, r1, r3
 8044d1c:	4413      	add	r3, r2
 8044d1e:	335c      	adds	r3, #92	; 0x5c
 8044d20:	681b      	ldr	r3, [r3, #0]
 8044d22:	2b02      	cmp	r3, #2
 8044d24:	d912      	bls.n	8044d4c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8044d26:	687a      	ldr	r2, [r7, #4]
 8044d28:	68fb      	ldr	r3, [r7, #12]
 8044d2a:	212c      	movs	r1, #44	; 0x2c
 8044d2c:	fb01 f303 	mul.w	r3, r1, r3
 8044d30:	4413      	add	r3, r2
 8044d32:	335c      	adds	r3, #92	; 0x5c
 8044d34:	2200      	movs	r2, #0
 8044d36:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8044d38:	687a      	ldr	r2, [r7, #4]
 8044d3a:	68fb      	ldr	r3, [r7, #12]
 8044d3c:	212c      	movs	r1, #44	; 0x2c
 8044d3e:	fb01 f303 	mul.w	r3, r1, r3
 8044d42:	4413      	add	r3, r2
 8044d44:	3360      	adds	r3, #96	; 0x60
 8044d46:	2204      	movs	r2, #4
 8044d48:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8044d4a:	e073      	b.n	8044e34 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8044d4c:	687a      	ldr	r2, [r7, #4]
 8044d4e:	68fb      	ldr	r3, [r7, #12]
 8044d50:	212c      	movs	r1, #44	; 0x2c
 8044d52:	fb01 f303 	mul.w	r3, r1, r3
 8044d56:	4413      	add	r3, r2
 8044d58:	3360      	adds	r3, #96	; 0x60
 8044d5a:	2202      	movs	r2, #2
 8044d5c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8044d5e:	68fb      	ldr	r3, [r7, #12]
 8044d60:	015a      	lsls	r2, r3, #5
 8044d62:	693b      	ldr	r3, [r7, #16]
 8044d64:	4413      	add	r3, r2
 8044d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044d6a:	681b      	ldr	r3, [r3, #0]
 8044d6c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8044d6e:	68bb      	ldr	r3, [r7, #8]
 8044d70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8044d74:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8044d76:	68bb      	ldr	r3, [r7, #8]
 8044d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8044d7c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8044d7e:	68fb      	ldr	r3, [r7, #12]
 8044d80:	015a      	lsls	r2, r3, #5
 8044d82:	693b      	ldr	r3, [r7, #16]
 8044d84:	4413      	add	r3, r2
 8044d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044d8a:	461a      	mov	r2, r3
 8044d8c:	68bb      	ldr	r3, [r7, #8]
 8044d8e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8044d90:	e050      	b.n	8044e34 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8044d92:	687a      	ldr	r2, [r7, #4]
 8044d94:	68fb      	ldr	r3, [r7, #12]
 8044d96:	212c      	movs	r1, #44	; 0x2c
 8044d98:	fb01 f303 	mul.w	r3, r1, r3
 8044d9c:	4413      	add	r3, r2
 8044d9e:	3361      	adds	r3, #97	; 0x61
 8044da0:	781b      	ldrb	r3, [r3, #0]
 8044da2:	2b03      	cmp	r3, #3
 8044da4:	d122      	bne.n	8044dec <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8044da6:	687a      	ldr	r2, [r7, #4]
 8044da8:	68fb      	ldr	r3, [r7, #12]
 8044daa:	212c      	movs	r1, #44	; 0x2c
 8044dac:	fb01 f303 	mul.w	r3, r1, r3
 8044db0:	4413      	add	r3, r2
 8044db2:	3360      	adds	r3, #96	; 0x60
 8044db4:	2202      	movs	r2, #2
 8044db6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8044db8:	68fb      	ldr	r3, [r7, #12]
 8044dba:	015a      	lsls	r2, r3, #5
 8044dbc:	693b      	ldr	r3, [r7, #16]
 8044dbe:	4413      	add	r3, r2
 8044dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044dc4:	681b      	ldr	r3, [r3, #0]
 8044dc6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8044dc8:	68bb      	ldr	r3, [r7, #8]
 8044dca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8044dce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8044dd0:	68bb      	ldr	r3, [r7, #8]
 8044dd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8044dd6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8044dd8:	68fb      	ldr	r3, [r7, #12]
 8044dda:	015a      	lsls	r2, r3, #5
 8044ddc:	693b      	ldr	r3, [r7, #16]
 8044dde:	4413      	add	r3, r2
 8044de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044de4:	461a      	mov	r2, r3
 8044de6:	68bb      	ldr	r3, [r7, #8]
 8044de8:	6013      	str	r3, [r2, #0]
 8044dea:	e023      	b.n	8044e34 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8044dec:	687a      	ldr	r2, [r7, #4]
 8044dee:	68fb      	ldr	r3, [r7, #12]
 8044df0:	212c      	movs	r1, #44	; 0x2c
 8044df2:	fb01 f303 	mul.w	r3, r1, r3
 8044df6:	4413      	add	r3, r2
 8044df8:	3361      	adds	r3, #97	; 0x61
 8044dfa:	781b      	ldrb	r3, [r3, #0]
 8044dfc:	2b07      	cmp	r3, #7
 8044dfe:	d119      	bne.n	8044e34 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8044e00:	687a      	ldr	r2, [r7, #4]
 8044e02:	68fb      	ldr	r3, [r7, #12]
 8044e04:	212c      	movs	r1, #44	; 0x2c
 8044e06:	fb01 f303 	mul.w	r3, r1, r3
 8044e0a:	4413      	add	r3, r2
 8044e0c:	335c      	adds	r3, #92	; 0x5c
 8044e0e:	681b      	ldr	r3, [r3, #0]
 8044e10:	1c5a      	adds	r2, r3, #1
 8044e12:	6879      	ldr	r1, [r7, #4]
 8044e14:	68fb      	ldr	r3, [r7, #12]
 8044e16:	202c      	movs	r0, #44	; 0x2c
 8044e18:	fb00 f303 	mul.w	r3, r0, r3
 8044e1c:	440b      	add	r3, r1
 8044e1e:	335c      	adds	r3, #92	; 0x5c
 8044e20:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8044e22:	687a      	ldr	r2, [r7, #4]
 8044e24:	68fb      	ldr	r3, [r7, #12]
 8044e26:	212c      	movs	r1, #44	; 0x2c
 8044e28:	fb01 f303 	mul.w	r3, r1, r3
 8044e2c:	4413      	add	r3, r2
 8044e2e:	3360      	adds	r3, #96	; 0x60
 8044e30:	2204      	movs	r2, #4
 8044e32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8044e34:	68fb      	ldr	r3, [r7, #12]
 8044e36:	015a      	lsls	r2, r3, #5
 8044e38:	693b      	ldr	r3, [r7, #16]
 8044e3a:	4413      	add	r3, r2
 8044e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044e40:	461a      	mov	r2, r3
 8044e42:	2302      	movs	r3, #2
 8044e44:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8044e46:	68fb      	ldr	r3, [r7, #12]
 8044e48:	b2d9      	uxtb	r1, r3
 8044e4a:	687a      	ldr	r2, [r7, #4]
 8044e4c:	68fb      	ldr	r3, [r7, #12]
 8044e4e:	202c      	movs	r0, #44	; 0x2c
 8044e50:	fb00 f303 	mul.w	r3, r0, r3
 8044e54:	4413      	add	r3, r2
 8044e56:	3360      	adds	r3, #96	; 0x60
 8044e58:	781b      	ldrb	r3, [r3, #0]
 8044e5a:	461a      	mov	r2, r3
 8044e5c:	6878      	ldr	r0, [r7, #4]
 8044e5e:	f007 f9f7 	bl	804c250 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8044e62:	e061      	b.n	8044f28 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8044e64:	68fb      	ldr	r3, [r7, #12]
 8044e66:	015a      	lsls	r2, r3, #5
 8044e68:	693b      	ldr	r3, [r7, #16]
 8044e6a:	4413      	add	r3, r2
 8044e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044e70:	689b      	ldr	r3, [r3, #8]
 8044e72:	f003 0310 	and.w	r3, r3, #16
 8044e76:	2b10      	cmp	r3, #16
 8044e78:	d156      	bne.n	8044f28 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8044e7a:	687a      	ldr	r2, [r7, #4]
 8044e7c:	68fb      	ldr	r3, [r7, #12]
 8044e7e:	212c      	movs	r1, #44	; 0x2c
 8044e80:	fb01 f303 	mul.w	r3, r1, r3
 8044e84:	4413      	add	r3, r2
 8044e86:	333f      	adds	r3, #63	; 0x3f
 8044e88:	781b      	ldrb	r3, [r3, #0]
 8044e8a:	2b03      	cmp	r3, #3
 8044e8c:	d111      	bne.n	8044eb2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8044e8e:	687a      	ldr	r2, [r7, #4]
 8044e90:	68fb      	ldr	r3, [r7, #12]
 8044e92:	212c      	movs	r1, #44	; 0x2c
 8044e94:	fb01 f303 	mul.w	r3, r1, r3
 8044e98:	4413      	add	r3, r2
 8044e9a:	335c      	adds	r3, #92	; 0x5c
 8044e9c:	2200      	movs	r2, #0
 8044e9e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044ea0:	687b      	ldr	r3, [r7, #4]
 8044ea2:	681b      	ldr	r3, [r3, #0]
 8044ea4:	68fa      	ldr	r2, [r7, #12]
 8044ea6:	b2d2      	uxtb	r2, r2
 8044ea8:	4611      	mov	r1, r2
 8044eaa:	4618      	mov	r0, r3
 8044eac:	f004 ff31 	bl	8049d12 <USB_HC_Halt>
 8044eb0:	e031      	b.n	8044f16 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8044eb2:	687a      	ldr	r2, [r7, #4]
 8044eb4:	68fb      	ldr	r3, [r7, #12]
 8044eb6:	212c      	movs	r1, #44	; 0x2c
 8044eb8:	fb01 f303 	mul.w	r3, r1, r3
 8044ebc:	4413      	add	r3, r2
 8044ebe:	333f      	adds	r3, #63	; 0x3f
 8044ec0:	781b      	ldrb	r3, [r3, #0]
 8044ec2:	2b00      	cmp	r3, #0
 8044ec4:	d009      	beq.n	8044eda <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8044ec6:	687a      	ldr	r2, [r7, #4]
 8044ec8:	68fb      	ldr	r3, [r7, #12]
 8044eca:	212c      	movs	r1, #44	; 0x2c
 8044ecc:	fb01 f303 	mul.w	r3, r1, r3
 8044ed0:	4413      	add	r3, r2
 8044ed2:	333f      	adds	r3, #63	; 0x3f
 8044ed4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8044ed6:	2b02      	cmp	r3, #2
 8044ed8:	d11d      	bne.n	8044f16 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8044eda:	687a      	ldr	r2, [r7, #4]
 8044edc:	68fb      	ldr	r3, [r7, #12]
 8044ede:	212c      	movs	r1, #44	; 0x2c
 8044ee0:	fb01 f303 	mul.w	r3, r1, r3
 8044ee4:	4413      	add	r3, r2
 8044ee6:	335c      	adds	r3, #92	; 0x5c
 8044ee8:	2200      	movs	r2, #0
 8044eea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8044eec:	687b      	ldr	r3, [r7, #4]
 8044eee:	691b      	ldr	r3, [r3, #16]
 8044ef0:	2b00      	cmp	r3, #0
 8044ef2:	d110      	bne.n	8044f16 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8044ef4:	687a      	ldr	r2, [r7, #4]
 8044ef6:	68fb      	ldr	r3, [r7, #12]
 8044ef8:	212c      	movs	r1, #44	; 0x2c
 8044efa:	fb01 f303 	mul.w	r3, r1, r3
 8044efe:	4413      	add	r3, r2
 8044f00:	3361      	adds	r3, #97	; 0x61
 8044f02:	2203      	movs	r2, #3
 8044f04:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044f06:	687b      	ldr	r3, [r7, #4]
 8044f08:	681b      	ldr	r3, [r3, #0]
 8044f0a:	68fa      	ldr	r2, [r7, #12]
 8044f0c:	b2d2      	uxtb	r2, r2
 8044f0e:	4611      	mov	r1, r2
 8044f10:	4618      	mov	r0, r3
 8044f12:	f004 fefe 	bl	8049d12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8044f16:	68fb      	ldr	r3, [r7, #12]
 8044f18:	015a      	lsls	r2, r3, #5
 8044f1a:	693b      	ldr	r3, [r7, #16]
 8044f1c:	4413      	add	r3, r2
 8044f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044f22:	461a      	mov	r2, r3
 8044f24:	2310      	movs	r3, #16
 8044f26:	6093      	str	r3, [r2, #8]
}
 8044f28:	bf00      	nop
 8044f2a:	3718      	adds	r7, #24
 8044f2c:	46bd      	mov	sp, r7
 8044f2e:	bd80      	pop	{r7, pc}

08044f30 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8044f30:	b580      	push	{r7, lr}
 8044f32:	b088      	sub	sp, #32
 8044f34:	af00      	add	r7, sp, #0
 8044f36:	6078      	str	r0, [r7, #4]
 8044f38:	460b      	mov	r3, r1
 8044f3a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8044f3c:	687b      	ldr	r3, [r7, #4]
 8044f3e:	681b      	ldr	r3, [r3, #0]
 8044f40:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8044f42:	69fb      	ldr	r3, [r7, #28]
 8044f44:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8044f46:	78fb      	ldrb	r3, [r7, #3]
 8044f48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8044f4a:	697b      	ldr	r3, [r7, #20]
 8044f4c:	015a      	lsls	r2, r3, #5
 8044f4e:	69bb      	ldr	r3, [r7, #24]
 8044f50:	4413      	add	r3, r2
 8044f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044f56:	689b      	ldr	r3, [r3, #8]
 8044f58:	f003 0304 	and.w	r3, r3, #4
 8044f5c:	2b04      	cmp	r3, #4
 8044f5e:	d11a      	bne.n	8044f96 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8044f60:	697b      	ldr	r3, [r7, #20]
 8044f62:	015a      	lsls	r2, r3, #5
 8044f64:	69bb      	ldr	r3, [r7, #24]
 8044f66:	4413      	add	r3, r2
 8044f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044f6c:	461a      	mov	r2, r3
 8044f6e:	2304      	movs	r3, #4
 8044f70:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8044f72:	687a      	ldr	r2, [r7, #4]
 8044f74:	697b      	ldr	r3, [r7, #20]
 8044f76:	212c      	movs	r1, #44	; 0x2c
 8044f78:	fb01 f303 	mul.w	r3, r1, r3
 8044f7c:	4413      	add	r3, r2
 8044f7e:	3361      	adds	r3, #97	; 0x61
 8044f80:	2206      	movs	r2, #6
 8044f82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044f84:	687b      	ldr	r3, [r7, #4]
 8044f86:	681b      	ldr	r3, [r3, #0]
 8044f88:	697a      	ldr	r2, [r7, #20]
 8044f8a:	b2d2      	uxtb	r2, r2
 8044f8c:	4611      	mov	r1, r2
 8044f8e:	4618      	mov	r0, r3
 8044f90:	f004 febf 	bl	8049d12 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8044f94:	e331      	b.n	80455fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8044f96:	697b      	ldr	r3, [r7, #20]
 8044f98:	015a      	lsls	r2, r3, #5
 8044f9a:	69bb      	ldr	r3, [r7, #24]
 8044f9c:	4413      	add	r3, r2
 8044f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044fa2:	689b      	ldr	r3, [r3, #8]
 8044fa4:	f003 0320 	and.w	r3, r3, #32
 8044fa8:	2b20      	cmp	r3, #32
 8044faa:	d12e      	bne.n	804500a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8044fac:	697b      	ldr	r3, [r7, #20]
 8044fae:	015a      	lsls	r2, r3, #5
 8044fb0:	69bb      	ldr	r3, [r7, #24]
 8044fb2:	4413      	add	r3, r2
 8044fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044fb8:	461a      	mov	r2, r3
 8044fba:	2320      	movs	r3, #32
 8044fbc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8044fbe:	687a      	ldr	r2, [r7, #4]
 8044fc0:	697b      	ldr	r3, [r7, #20]
 8044fc2:	212c      	movs	r1, #44	; 0x2c
 8044fc4:	fb01 f303 	mul.w	r3, r1, r3
 8044fc8:	4413      	add	r3, r2
 8044fca:	333d      	adds	r3, #61	; 0x3d
 8044fcc:	781b      	ldrb	r3, [r3, #0]
 8044fce:	2b01      	cmp	r3, #1
 8044fd0:	f040 8313 	bne.w	80455fa <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8044fd4:	687a      	ldr	r2, [r7, #4]
 8044fd6:	697b      	ldr	r3, [r7, #20]
 8044fd8:	212c      	movs	r1, #44	; 0x2c
 8044fda:	fb01 f303 	mul.w	r3, r1, r3
 8044fde:	4413      	add	r3, r2
 8044fe0:	333d      	adds	r3, #61	; 0x3d
 8044fe2:	2200      	movs	r2, #0
 8044fe4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8044fe6:	687a      	ldr	r2, [r7, #4]
 8044fe8:	697b      	ldr	r3, [r7, #20]
 8044fea:	212c      	movs	r1, #44	; 0x2c
 8044fec:	fb01 f303 	mul.w	r3, r1, r3
 8044ff0:	4413      	add	r3, r2
 8044ff2:	3360      	adds	r3, #96	; 0x60
 8044ff4:	2202      	movs	r2, #2
 8044ff6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044ff8:	687b      	ldr	r3, [r7, #4]
 8044ffa:	681b      	ldr	r3, [r3, #0]
 8044ffc:	697a      	ldr	r2, [r7, #20]
 8044ffe:	b2d2      	uxtb	r2, r2
 8045000:	4611      	mov	r1, r2
 8045002:	4618      	mov	r0, r3
 8045004:	f004 fe85 	bl	8049d12 <USB_HC_Halt>
}
 8045008:	e2f7      	b.n	80455fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 804500a:	697b      	ldr	r3, [r7, #20]
 804500c:	015a      	lsls	r2, r3, #5
 804500e:	69bb      	ldr	r3, [r7, #24]
 8045010:	4413      	add	r3, r2
 8045012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045016:	689b      	ldr	r3, [r3, #8]
 8045018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804501c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8045020:	d112      	bne.n	8045048 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8045022:	697b      	ldr	r3, [r7, #20]
 8045024:	015a      	lsls	r2, r3, #5
 8045026:	69bb      	ldr	r3, [r7, #24]
 8045028:	4413      	add	r3, r2
 804502a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804502e:	461a      	mov	r2, r3
 8045030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8045034:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045036:	687b      	ldr	r3, [r7, #4]
 8045038:	681b      	ldr	r3, [r3, #0]
 804503a:	697a      	ldr	r2, [r7, #20]
 804503c:	b2d2      	uxtb	r2, r2
 804503e:	4611      	mov	r1, r2
 8045040:	4618      	mov	r0, r3
 8045042:	f004 fe66 	bl	8049d12 <USB_HC_Halt>
}
 8045046:	e2d8      	b.n	80455fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8045048:	697b      	ldr	r3, [r7, #20]
 804504a:	015a      	lsls	r2, r3, #5
 804504c:	69bb      	ldr	r3, [r7, #24]
 804504e:	4413      	add	r3, r2
 8045050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045054:	689b      	ldr	r3, [r3, #8]
 8045056:	f003 0301 	and.w	r3, r3, #1
 804505a:	2b01      	cmp	r3, #1
 804505c:	d140      	bne.n	80450e0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 804505e:	687a      	ldr	r2, [r7, #4]
 8045060:	697b      	ldr	r3, [r7, #20]
 8045062:	212c      	movs	r1, #44	; 0x2c
 8045064:	fb01 f303 	mul.w	r3, r1, r3
 8045068:	4413      	add	r3, r2
 804506a:	335c      	adds	r3, #92	; 0x5c
 804506c:	2200      	movs	r2, #0
 804506e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8045070:	697b      	ldr	r3, [r7, #20]
 8045072:	015a      	lsls	r2, r3, #5
 8045074:	69bb      	ldr	r3, [r7, #24]
 8045076:	4413      	add	r3, r2
 8045078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804507c:	689b      	ldr	r3, [r3, #8]
 804507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045082:	2b40      	cmp	r3, #64	; 0x40
 8045084:	d111      	bne.n	80450aa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8045086:	687a      	ldr	r2, [r7, #4]
 8045088:	697b      	ldr	r3, [r7, #20]
 804508a:	212c      	movs	r1, #44	; 0x2c
 804508c:	fb01 f303 	mul.w	r3, r1, r3
 8045090:	4413      	add	r3, r2
 8045092:	333d      	adds	r3, #61	; 0x3d
 8045094:	2201      	movs	r2, #1
 8045096:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8045098:	697b      	ldr	r3, [r7, #20]
 804509a:	015a      	lsls	r2, r3, #5
 804509c:	69bb      	ldr	r3, [r7, #24]
 804509e:	4413      	add	r3, r2
 80450a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80450a4:	461a      	mov	r2, r3
 80450a6:	2340      	movs	r3, #64	; 0x40
 80450a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80450aa:	697b      	ldr	r3, [r7, #20]
 80450ac:	015a      	lsls	r2, r3, #5
 80450ae:	69bb      	ldr	r3, [r7, #24]
 80450b0:	4413      	add	r3, r2
 80450b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80450b6:	461a      	mov	r2, r3
 80450b8:	2301      	movs	r3, #1
 80450ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80450bc:	687a      	ldr	r2, [r7, #4]
 80450be:	697b      	ldr	r3, [r7, #20]
 80450c0:	212c      	movs	r1, #44	; 0x2c
 80450c2:	fb01 f303 	mul.w	r3, r1, r3
 80450c6:	4413      	add	r3, r2
 80450c8:	3361      	adds	r3, #97	; 0x61
 80450ca:	2201      	movs	r2, #1
 80450cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80450ce:	687b      	ldr	r3, [r7, #4]
 80450d0:	681b      	ldr	r3, [r3, #0]
 80450d2:	697a      	ldr	r2, [r7, #20]
 80450d4:	b2d2      	uxtb	r2, r2
 80450d6:	4611      	mov	r1, r2
 80450d8:	4618      	mov	r0, r3
 80450da:	f004 fe1a 	bl	8049d12 <USB_HC_Halt>
}
 80450de:	e28c      	b.n	80455fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80450e0:	697b      	ldr	r3, [r7, #20]
 80450e2:	015a      	lsls	r2, r3, #5
 80450e4:	69bb      	ldr	r3, [r7, #24]
 80450e6:	4413      	add	r3, r2
 80450e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80450ec:	689b      	ldr	r3, [r3, #8]
 80450ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80450f2:	2b40      	cmp	r3, #64	; 0x40
 80450f4:	d12c      	bne.n	8045150 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80450f6:	687a      	ldr	r2, [r7, #4]
 80450f8:	697b      	ldr	r3, [r7, #20]
 80450fa:	212c      	movs	r1, #44	; 0x2c
 80450fc:	fb01 f303 	mul.w	r3, r1, r3
 8045100:	4413      	add	r3, r2
 8045102:	3361      	adds	r3, #97	; 0x61
 8045104:	2204      	movs	r2, #4
 8045106:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8045108:	687a      	ldr	r2, [r7, #4]
 804510a:	697b      	ldr	r3, [r7, #20]
 804510c:	212c      	movs	r1, #44	; 0x2c
 804510e:	fb01 f303 	mul.w	r3, r1, r3
 8045112:	4413      	add	r3, r2
 8045114:	333d      	adds	r3, #61	; 0x3d
 8045116:	2201      	movs	r2, #1
 8045118:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 804511a:	687a      	ldr	r2, [r7, #4]
 804511c:	697b      	ldr	r3, [r7, #20]
 804511e:	212c      	movs	r1, #44	; 0x2c
 8045120:	fb01 f303 	mul.w	r3, r1, r3
 8045124:	4413      	add	r3, r2
 8045126:	335c      	adds	r3, #92	; 0x5c
 8045128:	2200      	movs	r2, #0
 804512a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804512c:	687b      	ldr	r3, [r7, #4]
 804512e:	681b      	ldr	r3, [r3, #0]
 8045130:	697a      	ldr	r2, [r7, #20]
 8045132:	b2d2      	uxtb	r2, r2
 8045134:	4611      	mov	r1, r2
 8045136:	4618      	mov	r0, r3
 8045138:	f004 fdeb 	bl	8049d12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 804513c:	697b      	ldr	r3, [r7, #20]
 804513e:	015a      	lsls	r2, r3, #5
 8045140:	69bb      	ldr	r3, [r7, #24]
 8045142:	4413      	add	r3, r2
 8045144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045148:	461a      	mov	r2, r3
 804514a:	2340      	movs	r3, #64	; 0x40
 804514c:	6093      	str	r3, [r2, #8]
}
 804514e:	e254      	b.n	80455fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8045150:	697b      	ldr	r3, [r7, #20]
 8045152:	015a      	lsls	r2, r3, #5
 8045154:	69bb      	ldr	r3, [r7, #24]
 8045156:	4413      	add	r3, r2
 8045158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804515c:	689b      	ldr	r3, [r3, #8]
 804515e:	f003 0308 	and.w	r3, r3, #8
 8045162:	2b08      	cmp	r3, #8
 8045164:	d11a      	bne.n	804519c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8045166:	697b      	ldr	r3, [r7, #20]
 8045168:	015a      	lsls	r2, r3, #5
 804516a:	69bb      	ldr	r3, [r7, #24]
 804516c:	4413      	add	r3, r2
 804516e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045172:	461a      	mov	r2, r3
 8045174:	2308      	movs	r3, #8
 8045176:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8045178:	687a      	ldr	r2, [r7, #4]
 804517a:	697b      	ldr	r3, [r7, #20]
 804517c:	212c      	movs	r1, #44	; 0x2c
 804517e:	fb01 f303 	mul.w	r3, r1, r3
 8045182:	4413      	add	r3, r2
 8045184:	3361      	adds	r3, #97	; 0x61
 8045186:	2205      	movs	r2, #5
 8045188:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804518a:	687b      	ldr	r3, [r7, #4]
 804518c:	681b      	ldr	r3, [r3, #0]
 804518e:	697a      	ldr	r2, [r7, #20]
 8045190:	b2d2      	uxtb	r2, r2
 8045192:	4611      	mov	r1, r2
 8045194:	4618      	mov	r0, r3
 8045196:	f004 fdbc 	bl	8049d12 <USB_HC_Halt>
}
 804519a:	e22e      	b.n	80455fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 804519c:	697b      	ldr	r3, [r7, #20]
 804519e:	015a      	lsls	r2, r3, #5
 80451a0:	69bb      	ldr	r3, [r7, #24]
 80451a2:	4413      	add	r3, r2
 80451a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80451a8:	689b      	ldr	r3, [r3, #8]
 80451aa:	f003 0310 	and.w	r3, r3, #16
 80451ae:	2b10      	cmp	r3, #16
 80451b0:	d140      	bne.n	8045234 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80451b2:	687a      	ldr	r2, [r7, #4]
 80451b4:	697b      	ldr	r3, [r7, #20]
 80451b6:	212c      	movs	r1, #44	; 0x2c
 80451b8:	fb01 f303 	mul.w	r3, r1, r3
 80451bc:	4413      	add	r3, r2
 80451be:	335c      	adds	r3, #92	; 0x5c
 80451c0:	2200      	movs	r2, #0
 80451c2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80451c4:	687a      	ldr	r2, [r7, #4]
 80451c6:	697b      	ldr	r3, [r7, #20]
 80451c8:	212c      	movs	r1, #44	; 0x2c
 80451ca:	fb01 f303 	mul.w	r3, r1, r3
 80451ce:	4413      	add	r3, r2
 80451d0:	3361      	adds	r3, #97	; 0x61
 80451d2:	2203      	movs	r2, #3
 80451d4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80451d6:	687a      	ldr	r2, [r7, #4]
 80451d8:	697b      	ldr	r3, [r7, #20]
 80451da:	212c      	movs	r1, #44	; 0x2c
 80451dc:	fb01 f303 	mul.w	r3, r1, r3
 80451e0:	4413      	add	r3, r2
 80451e2:	333d      	adds	r3, #61	; 0x3d
 80451e4:	781b      	ldrb	r3, [r3, #0]
 80451e6:	2b00      	cmp	r3, #0
 80451e8:	d112      	bne.n	8045210 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80451ea:	687a      	ldr	r2, [r7, #4]
 80451ec:	697b      	ldr	r3, [r7, #20]
 80451ee:	212c      	movs	r1, #44	; 0x2c
 80451f0:	fb01 f303 	mul.w	r3, r1, r3
 80451f4:	4413      	add	r3, r2
 80451f6:	333c      	adds	r3, #60	; 0x3c
 80451f8:	781b      	ldrb	r3, [r3, #0]
 80451fa:	2b00      	cmp	r3, #0
 80451fc:	d108      	bne.n	8045210 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80451fe:	687a      	ldr	r2, [r7, #4]
 8045200:	697b      	ldr	r3, [r7, #20]
 8045202:	212c      	movs	r1, #44	; 0x2c
 8045204:	fb01 f303 	mul.w	r3, r1, r3
 8045208:	4413      	add	r3, r2
 804520a:	333d      	adds	r3, #61	; 0x3d
 804520c:	2201      	movs	r2, #1
 804520e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045210:	687b      	ldr	r3, [r7, #4]
 8045212:	681b      	ldr	r3, [r3, #0]
 8045214:	697a      	ldr	r2, [r7, #20]
 8045216:	b2d2      	uxtb	r2, r2
 8045218:	4611      	mov	r1, r2
 804521a:	4618      	mov	r0, r3
 804521c:	f004 fd79 	bl	8049d12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8045220:	697b      	ldr	r3, [r7, #20]
 8045222:	015a      	lsls	r2, r3, #5
 8045224:	69bb      	ldr	r3, [r7, #24]
 8045226:	4413      	add	r3, r2
 8045228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804522c:	461a      	mov	r2, r3
 804522e:	2310      	movs	r3, #16
 8045230:	6093      	str	r3, [r2, #8]
}
 8045232:	e1e2      	b.n	80455fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8045234:	697b      	ldr	r3, [r7, #20]
 8045236:	015a      	lsls	r2, r3, #5
 8045238:	69bb      	ldr	r3, [r7, #24]
 804523a:	4413      	add	r3, r2
 804523c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045240:	689b      	ldr	r3, [r3, #8]
 8045242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045246:	2b80      	cmp	r3, #128	; 0x80
 8045248:	d164      	bne.n	8045314 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 804524a:	687b      	ldr	r3, [r7, #4]
 804524c:	691b      	ldr	r3, [r3, #16]
 804524e:	2b00      	cmp	r3, #0
 8045250:	d111      	bne.n	8045276 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8045252:	687a      	ldr	r2, [r7, #4]
 8045254:	697b      	ldr	r3, [r7, #20]
 8045256:	212c      	movs	r1, #44	; 0x2c
 8045258:	fb01 f303 	mul.w	r3, r1, r3
 804525c:	4413      	add	r3, r2
 804525e:	3361      	adds	r3, #97	; 0x61
 8045260:	2206      	movs	r2, #6
 8045262:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045264:	687b      	ldr	r3, [r7, #4]
 8045266:	681b      	ldr	r3, [r3, #0]
 8045268:	697a      	ldr	r2, [r7, #20]
 804526a:	b2d2      	uxtb	r2, r2
 804526c:	4611      	mov	r1, r2
 804526e:	4618      	mov	r0, r3
 8045270:	f004 fd4f 	bl	8049d12 <USB_HC_Halt>
 8045274:	e044      	b.n	8045300 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8045276:	687a      	ldr	r2, [r7, #4]
 8045278:	697b      	ldr	r3, [r7, #20]
 804527a:	212c      	movs	r1, #44	; 0x2c
 804527c:	fb01 f303 	mul.w	r3, r1, r3
 8045280:	4413      	add	r3, r2
 8045282:	335c      	adds	r3, #92	; 0x5c
 8045284:	681b      	ldr	r3, [r3, #0]
 8045286:	1c5a      	adds	r2, r3, #1
 8045288:	6879      	ldr	r1, [r7, #4]
 804528a:	697b      	ldr	r3, [r7, #20]
 804528c:	202c      	movs	r0, #44	; 0x2c
 804528e:	fb00 f303 	mul.w	r3, r0, r3
 8045292:	440b      	add	r3, r1
 8045294:	335c      	adds	r3, #92	; 0x5c
 8045296:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8045298:	687a      	ldr	r2, [r7, #4]
 804529a:	697b      	ldr	r3, [r7, #20]
 804529c:	212c      	movs	r1, #44	; 0x2c
 804529e:	fb01 f303 	mul.w	r3, r1, r3
 80452a2:	4413      	add	r3, r2
 80452a4:	335c      	adds	r3, #92	; 0x5c
 80452a6:	681b      	ldr	r3, [r3, #0]
 80452a8:	2b02      	cmp	r3, #2
 80452aa:	d920      	bls.n	80452ee <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80452ac:	687a      	ldr	r2, [r7, #4]
 80452ae:	697b      	ldr	r3, [r7, #20]
 80452b0:	212c      	movs	r1, #44	; 0x2c
 80452b2:	fb01 f303 	mul.w	r3, r1, r3
 80452b6:	4413      	add	r3, r2
 80452b8:	335c      	adds	r3, #92	; 0x5c
 80452ba:	2200      	movs	r2, #0
 80452bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80452be:	687a      	ldr	r2, [r7, #4]
 80452c0:	697b      	ldr	r3, [r7, #20]
 80452c2:	212c      	movs	r1, #44	; 0x2c
 80452c4:	fb01 f303 	mul.w	r3, r1, r3
 80452c8:	4413      	add	r3, r2
 80452ca:	3360      	adds	r3, #96	; 0x60
 80452cc:	2204      	movs	r2, #4
 80452ce:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80452d0:	697b      	ldr	r3, [r7, #20]
 80452d2:	b2d9      	uxtb	r1, r3
 80452d4:	687a      	ldr	r2, [r7, #4]
 80452d6:	697b      	ldr	r3, [r7, #20]
 80452d8:	202c      	movs	r0, #44	; 0x2c
 80452da:	fb00 f303 	mul.w	r3, r0, r3
 80452de:	4413      	add	r3, r2
 80452e0:	3360      	adds	r3, #96	; 0x60
 80452e2:	781b      	ldrb	r3, [r3, #0]
 80452e4:	461a      	mov	r2, r3
 80452e6:	6878      	ldr	r0, [r7, #4]
 80452e8:	f006 ffb2 	bl	804c250 <HAL_HCD_HC_NotifyURBChange_Callback>
 80452ec:	e008      	b.n	8045300 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80452ee:	687a      	ldr	r2, [r7, #4]
 80452f0:	697b      	ldr	r3, [r7, #20]
 80452f2:	212c      	movs	r1, #44	; 0x2c
 80452f4:	fb01 f303 	mul.w	r3, r1, r3
 80452f8:	4413      	add	r3, r2
 80452fa:	3360      	adds	r3, #96	; 0x60
 80452fc:	2202      	movs	r2, #2
 80452fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8045300:	697b      	ldr	r3, [r7, #20]
 8045302:	015a      	lsls	r2, r3, #5
 8045304:	69bb      	ldr	r3, [r7, #24]
 8045306:	4413      	add	r3, r2
 8045308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804530c:	461a      	mov	r2, r3
 804530e:	2380      	movs	r3, #128	; 0x80
 8045310:	6093      	str	r3, [r2, #8]
}
 8045312:	e172      	b.n	80455fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8045314:	697b      	ldr	r3, [r7, #20]
 8045316:	015a      	lsls	r2, r3, #5
 8045318:	69bb      	ldr	r3, [r7, #24]
 804531a:	4413      	add	r3, r2
 804531c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045320:	689b      	ldr	r3, [r3, #8]
 8045322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804532a:	d11b      	bne.n	8045364 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 804532c:	687a      	ldr	r2, [r7, #4]
 804532e:	697b      	ldr	r3, [r7, #20]
 8045330:	212c      	movs	r1, #44	; 0x2c
 8045332:	fb01 f303 	mul.w	r3, r1, r3
 8045336:	4413      	add	r3, r2
 8045338:	3361      	adds	r3, #97	; 0x61
 804533a:	2208      	movs	r2, #8
 804533c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804533e:	687b      	ldr	r3, [r7, #4]
 8045340:	681b      	ldr	r3, [r3, #0]
 8045342:	697a      	ldr	r2, [r7, #20]
 8045344:	b2d2      	uxtb	r2, r2
 8045346:	4611      	mov	r1, r2
 8045348:	4618      	mov	r0, r3
 804534a:	f004 fce2 	bl	8049d12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 804534e:	697b      	ldr	r3, [r7, #20]
 8045350:	015a      	lsls	r2, r3, #5
 8045352:	69bb      	ldr	r3, [r7, #24]
 8045354:	4413      	add	r3, r2
 8045356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804535a:	461a      	mov	r2, r3
 804535c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8045360:	6093      	str	r3, [r2, #8]
}
 8045362:	e14a      	b.n	80455fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8045364:	697b      	ldr	r3, [r7, #20]
 8045366:	015a      	lsls	r2, r3, #5
 8045368:	69bb      	ldr	r3, [r7, #24]
 804536a:	4413      	add	r3, r2
 804536c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045370:	689b      	ldr	r3, [r3, #8]
 8045372:	f003 0302 	and.w	r3, r3, #2
 8045376:	2b02      	cmp	r3, #2
 8045378:	f040 813f 	bne.w	80455fa <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 804537c:	687a      	ldr	r2, [r7, #4]
 804537e:	697b      	ldr	r3, [r7, #20]
 8045380:	212c      	movs	r1, #44	; 0x2c
 8045382:	fb01 f303 	mul.w	r3, r1, r3
 8045386:	4413      	add	r3, r2
 8045388:	3361      	adds	r3, #97	; 0x61
 804538a:	781b      	ldrb	r3, [r3, #0]
 804538c:	2b01      	cmp	r3, #1
 804538e:	d17d      	bne.n	804548c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8045390:	687a      	ldr	r2, [r7, #4]
 8045392:	697b      	ldr	r3, [r7, #20]
 8045394:	212c      	movs	r1, #44	; 0x2c
 8045396:	fb01 f303 	mul.w	r3, r1, r3
 804539a:	4413      	add	r3, r2
 804539c:	3360      	adds	r3, #96	; 0x60
 804539e:	2201      	movs	r2, #1
 80453a0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80453a2:	687a      	ldr	r2, [r7, #4]
 80453a4:	697b      	ldr	r3, [r7, #20]
 80453a6:	212c      	movs	r1, #44	; 0x2c
 80453a8:	fb01 f303 	mul.w	r3, r1, r3
 80453ac:	4413      	add	r3, r2
 80453ae:	333f      	adds	r3, #63	; 0x3f
 80453b0:	781b      	ldrb	r3, [r3, #0]
 80453b2:	2b02      	cmp	r3, #2
 80453b4:	d00a      	beq.n	80453cc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80453b6:	687a      	ldr	r2, [r7, #4]
 80453b8:	697b      	ldr	r3, [r7, #20]
 80453ba:	212c      	movs	r1, #44	; 0x2c
 80453bc:	fb01 f303 	mul.w	r3, r1, r3
 80453c0:	4413      	add	r3, r2
 80453c2:	333f      	adds	r3, #63	; 0x3f
 80453c4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80453c6:	2b03      	cmp	r3, #3
 80453c8:	f040 8100 	bne.w	80455cc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80453cc:	687b      	ldr	r3, [r7, #4]
 80453ce:	691b      	ldr	r3, [r3, #16]
 80453d0:	2b00      	cmp	r3, #0
 80453d2:	d113      	bne.n	80453fc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80453d4:	687a      	ldr	r2, [r7, #4]
 80453d6:	697b      	ldr	r3, [r7, #20]
 80453d8:	212c      	movs	r1, #44	; 0x2c
 80453da:	fb01 f303 	mul.w	r3, r1, r3
 80453de:	4413      	add	r3, r2
 80453e0:	3355      	adds	r3, #85	; 0x55
 80453e2:	781b      	ldrb	r3, [r3, #0]
 80453e4:	f083 0301 	eor.w	r3, r3, #1
 80453e8:	b2d8      	uxtb	r0, r3
 80453ea:	687a      	ldr	r2, [r7, #4]
 80453ec:	697b      	ldr	r3, [r7, #20]
 80453ee:	212c      	movs	r1, #44	; 0x2c
 80453f0:	fb01 f303 	mul.w	r3, r1, r3
 80453f4:	4413      	add	r3, r2
 80453f6:	3355      	adds	r3, #85	; 0x55
 80453f8:	4602      	mov	r2, r0
 80453fa:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80453fc:	687b      	ldr	r3, [r7, #4]
 80453fe:	691b      	ldr	r3, [r3, #16]
 8045400:	2b01      	cmp	r3, #1
 8045402:	f040 80e3 	bne.w	80455cc <HCD_HC_OUT_IRQHandler+0x69c>
 8045406:	687a      	ldr	r2, [r7, #4]
 8045408:	697b      	ldr	r3, [r7, #20]
 804540a:	212c      	movs	r1, #44	; 0x2c
 804540c:	fb01 f303 	mul.w	r3, r1, r3
 8045410:	4413      	add	r3, r2
 8045412:	334c      	adds	r3, #76	; 0x4c
 8045414:	681b      	ldr	r3, [r3, #0]
 8045416:	2b00      	cmp	r3, #0
 8045418:	f000 80d8 	beq.w	80455cc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 804541c:	687a      	ldr	r2, [r7, #4]
 804541e:	697b      	ldr	r3, [r7, #20]
 8045420:	212c      	movs	r1, #44	; 0x2c
 8045422:	fb01 f303 	mul.w	r3, r1, r3
 8045426:	4413      	add	r3, r2
 8045428:	334c      	adds	r3, #76	; 0x4c
 804542a:	681b      	ldr	r3, [r3, #0]
 804542c:	6879      	ldr	r1, [r7, #4]
 804542e:	697a      	ldr	r2, [r7, #20]
 8045430:	202c      	movs	r0, #44	; 0x2c
 8045432:	fb00 f202 	mul.w	r2, r0, r2
 8045436:	440a      	add	r2, r1
 8045438:	3240      	adds	r2, #64	; 0x40
 804543a:	8812      	ldrh	r2, [r2, #0]
 804543c:	4413      	add	r3, r2
 804543e:	3b01      	subs	r3, #1
 8045440:	6879      	ldr	r1, [r7, #4]
 8045442:	697a      	ldr	r2, [r7, #20]
 8045444:	202c      	movs	r0, #44	; 0x2c
 8045446:	fb00 f202 	mul.w	r2, r0, r2
 804544a:	440a      	add	r2, r1
 804544c:	3240      	adds	r2, #64	; 0x40
 804544e:	8812      	ldrh	r2, [r2, #0]
 8045450:	fbb3 f3f2 	udiv	r3, r3, r2
 8045454:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8045456:	68fb      	ldr	r3, [r7, #12]
 8045458:	f003 0301 	and.w	r3, r3, #1
 804545c:	2b00      	cmp	r3, #0
 804545e:	f000 80b5 	beq.w	80455cc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8045462:	687a      	ldr	r2, [r7, #4]
 8045464:	697b      	ldr	r3, [r7, #20]
 8045466:	212c      	movs	r1, #44	; 0x2c
 8045468:	fb01 f303 	mul.w	r3, r1, r3
 804546c:	4413      	add	r3, r2
 804546e:	3355      	adds	r3, #85	; 0x55
 8045470:	781b      	ldrb	r3, [r3, #0]
 8045472:	f083 0301 	eor.w	r3, r3, #1
 8045476:	b2d8      	uxtb	r0, r3
 8045478:	687a      	ldr	r2, [r7, #4]
 804547a:	697b      	ldr	r3, [r7, #20]
 804547c:	212c      	movs	r1, #44	; 0x2c
 804547e:	fb01 f303 	mul.w	r3, r1, r3
 8045482:	4413      	add	r3, r2
 8045484:	3355      	adds	r3, #85	; 0x55
 8045486:	4602      	mov	r2, r0
 8045488:	701a      	strb	r2, [r3, #0]
 804548a:	e09f      	b.n	80455cc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 804548c:	687a      	ldr	r2, [r7, #4]
 804548e:	697b      	ldr	r3, [r7, #20]
 8045490:	212c      	movs	r1, #44	; 0x2c
 8045492:	fb01 f303 	mul.w	r3, r1, r3
 8045496:	4413      	add	r3, r2
 8045498:	3361      	adds	r3, #97	; 0x61
 804549a:	781b      	ldrb	r3, [r3, #0]
 804549c:	2b03      	cmp	r3, #3
 804549e:	d109      	bne.n	80454b4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80454a0:	687a      	ldr	r2, [r7, #4]
 80454a2:	697b      	ldr	r3, [r7, #20]
 80454a4:	212c      	movs	r1, #44	; 0x2c
 80454a6:	fb01 f303 	mul.w	r3, r1, r3
 80454aa:	4413      	add	r3, r2
 80454ac:	3360      	adds	r3, #96	; 0x60
 80454ae:	2202      	movs	r2, #2
 80454b0:	701a      	strb	r2, [r3, #0]
 80454b2:	e08b      	b.n	80455cc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80454b4:	687a      	ldr	r2, [r7, #4]
 80454b6:	697b      	ldr	r3, [r7, #20]
 80454b8:	212c      	movs	r1, #44	; 0x2c
 80454ba:	fb01 f303 	mul.w	r3, r1, r3
 80454be:	4413      	add	r3, r2
 80454c0:	3361      	adds	r3, #97	; 0x61
 80454c2:	781b      	ldrb	r3, [r3, #0]
 80454c4:	2b04      	cmp	r3, #4
 80454c6:	d109      	bne.n	80454dc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80454c8:	687a      	ldr	r2, [r7, #4]
 80454ca:	697b      	ldr	r3, [r7, #20]
 80454cc:	212c      	movs	r1, #44	; 0x2c
 80454ce:	fb01 f303 	mul.w	r3, r1, r3
 80454d2:	4413      	add	r3, r2
 80454d4:	3360      	adds	r3, #96	; 0x60
 80454d6:	2202      	movs	r2, #2
 80454d8:	701a      	strb	r2, [r3, #0]
 80454da:	e077      	b.n	80455cc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80454dc:	687a      	ldr	r2, [r7, #4]
 80454de:	697b      	ldr	r3, [r7, #20]
 80454e0:	212c      	movs	r1, #44	; 0x2c
 80454e2:	fb01 f303 	mul.w	r3, r1, r3
 80454e6:	4413      	add	r3, r2
 80454e8:	3361      	adds	r3, #97	; 0x61
 80454ea:	781b      	ldrb	r3, [r3, #0]
 80454ec:	2b05      	cmp	r3, #5
 80454ee:	d109      	bne.n	8045504 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80454f0:	687a      	ldr	r2, [r7, #4]
 80454f2:	697b      	ldr	r3, [r7, #20]
 80454f4:	212c      	movs	r1, #44	; 0x2c
 80454f6:	fb01 f303 	mul.w	r3, r1, r3
 80454fa:	4413      	add	r3, r2
 80454fc:	3360      	adds	r3, #96	; 0x60
 80454fe:	2205      	movs	r2, #5
 8045500:	701a      	strb	r2, [r3, #0]
 8045502:	e063      	b.n	80455cc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8045504:	687a      	ldr	r2, [r7, #4]
 8045506:	697b      	ldr	r3, [r7, #20]
 8045508:	212c      	movs	r1, #44	; 0x2c
 804550a:	fb01 f303 	mul.w	r3, r1, r3
 804550e:	4413      	add	r3, r2
 8045510:	3361      	adds	r3, #97	; 0x61
 8045512:	781b      	ldrb	r3, [r3, #0]
 8045514:	2b06      	cmp	r3, #6
 8045516:	d009      	beq.n	804552c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8045518:	687a      	ldr	r2, [r7, #4]
 804551a:	697b      	ldr	r3, [r7, #20]
 804551c:	212c      	movs	r1, #44	; 0x2c
 804551e:	fb01 f303 	mul.w	r3, r1, r3
 8045522:	4413      	add	r3, r2
 8045524:	3361      	adds	r3, #97	; 0x61
 8045526:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8045528:	2b08      	cmp	r3, #8
 804552a:	d14f      	bne.n	80455cc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 804552c:	687a      	ldr	r2, [r7, #4]
 804552e:	697b      	ldr	r3, [r7, #20]
 8045530:	212c      	movs	r1, #44	; 0x2c
 8045532:	fb01 f303 	mul.w	r3, r1, r3
 8045536:	4413      	add	r3, r2
 8045538:	335c      	adds	r3, #92	; 0x5c
 804553a:	681b      	ldr	r3, [r3, #0]
 804553c:	1c5a      	adds	r2, r3, #1
 804553e:	6879      	ldr	r1, [r7, #4]
 8045540:	697b      	ldr	r3, [r7, #20]
 8045542:	202c      	movs	r0, #44	; 0x2c
 8045544:	fb00 f303 	mul.w	r3, r0, r3
 8045548:	440b      	add	r3, r1
 804554a:	335c      	adds	r3, #92	; 0x5c
 804554c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 804554e:	687a      	ldr	r2, [r7, #4]
 8045550:	697b      	ldr	r3, [r7, #20]
 8045552:	212c      	movs	r1, #44	; 0x2c
 8045554:	fb01 f303 	mul.w	r3, r1, r3
 8045558:	4413      	add	r3, r2
 804555a:	335c      	adds	r3, #92	; 0x5c
 804555c:	681b      	ldr	r3, [r3, #0]
 804555e:	2b02      	cmp	r3, #2
 8045560:	d912      	bls.n	8045588 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8045562:	687a      	ldr	r2, [r7, #4]
 8045564:	697b      	ldr	r3, [r7, #20]
 8045566:	212c      	movs	r1, #44	; 0x2c
 8045568:	fb01 f303 	mul.w	r3, r1, r3
 804556c:	4413      	add	r3, r2
 804556e:	335c      	adds	r3, #92	; 0x5c
 8045570:	2200      	movs	r2, #0
 8045572:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8045574:	687a      	ldr	r2, [r7, #4]
 8045576:	697b      	ldr	r3, [r7, #20]
 8045578:	212c      	movs	r1, #44	; 0x2c
 804557a:	fb01 f303 	mul.w	r3, r1, r3
 804557e:	4413      	add	r3, r2
 8045580:	3360      	adds	r3, #96	; 0x60
 8045582:	2204      	movs	r2, #4
 8045584:	701a      	strb	r2, [r3, #0]
 8045586:	e021      	b.n	80455cc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8045588:	687a      	ldr	r2, [r7, #4]
 804558a:	697b      	ldr	r3, [r7, #20]
 804558c:	212c      	movs	r1, #44	; 0x2c
 804558e:	fb01 f303 	mul.w	r3, r1, r3
 8045592:	4413      	add	r3, r2
 8045594:	3360      	adds	r3, #96	; 0x60
 8045596:	2202      	movs	r2, #2
 8045598:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 804559a:	697b      	ldr	r3, [r7, #20]
 804559c:	015a      	lsls	r2, r3, #5
 804559e:	69bb      	ldr	r3, [r7, #24]
 80455a0:	4413      	add	r3, r2
 80455a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80455a6:	681b      	ldr	r3, [r3, #0]
 80455a8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80455aa:	693b      	ldr	r3, [r7, #16]
 80455ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80455b0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80455b2:	693b      	ldr	r3, [r7, #16]
 80455b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80455b8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80455ba:	697b      	ldr	r3, [r7, #20]
 80455bc:	015a      	lsls	r2, r3, #5
 80455be:	69bb      	ldr	r3, [r7, #24]
 80455c0:	4413      	add	r3, r2
 80455c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80455c6:	461a      	mov	r2, r3
 80455c8:	693b      	ldr	r3, [r7, #16]
 80455ca:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80455cc:	697b      	ldr	r3, [r7, #20]
 80455ce:	015a      	lsls	r2, r3, #5
 80455d0:	69bb      	ldr	r3, [r7, #24]
 80455d2:	4413      	add	r3, r2
 80455d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80455d8:	461a      	mov	r2, r3
 80455da:	2302      	movs	r3, #2
 80455dc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80455de:	697b      	ldr	r3, [r7, #20]
 80455e0:	b2d9      	uxtb	r1, r3
 80455e2:	687a      	ldr	r2, [r7, #4]
 80455e4:	697b      	ldr	r3, [r7, #20]
 80455e6:	202c      	movs	r0, #44	; 0x2c
 80455e8:	fb00 f303 	mul.w	r3, r0, r3
 80455ec:	4413      	add	r3, r2
 80455ee:	3360      	adds	r3, #96	; 0x60
 80455f0:	781b      	ldrb	r3, [r3, #0]
 80455f2:	461a      	mov	r2, r3
 80455f4:	6878      	ldr	r0, [r7, #4]
 80455f6:	f006 fe2b 	bl	804c250 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80455fa:	bf00      	nop
 80455fc:	3720      	adds	r7, #32
 80455fe:	46bd      	mov	sp, r7
 8045600:	bd80      	pop	{r7, pc}

08045602 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8045602:	b580      	push	{r7, lr}
 8045604:	b08a      	sub	sp, #40	; 0x28
 8045606:	af00      	add	r7, sp, #0
 8045608:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 804560a:	687b      	ldr	r3, [r7, #4]
 804560c:	681b      	ldr	r3, [r3, #0]
 804560e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8045610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045612:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8045614:	687b      	ldr	r3, [r7, #4]
 8045616:	681b      	ldr	r3, [r3, #0]
 8045618:	6a1b      	ldr	r3, [r3, #32]
 804561a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 804561c:	69fb      	ldr	r3, [r7, #28]
 804561e:	f003 030f 	and.w	r3, r3, #15
 8045622:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8045624:	69fb      	ldr	r3, [r7, #28]
 8045626:	0c5b      	lsrs	r3, r3, #17
 8045628:	f003 030f 	and.w	r3, r3, #15
 804562c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 804562e:	69fb      	ldr	r3, [r7, #28]
 8045630:	091b      	lsrs	r3, r3, #4
 8045632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8045636:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8045638:	697b      	ldr	r3, [r7, #20]
 804563a:	2b02      	cmp	r3, #2
 804563c:	d004      	beq.n	8045648 <HCD_RXQLVL_IRQHandler+0x46>
 804563e:	697b      	ldr	r3, [r7, #20]
 8045640:	2b05      	cmp	r3, #5
 8045642:	f000 80a9 	beq.w	8045798 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8045646:	e0aa      	b.n	804579e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8045648:	693b      	ldr	r3, [r7, #16]
 804564a:	2b00      	cmp	r3, #0
 804564c:	f000 80a6 	beq.w	804579c <HCD_RXQLVL_IRQHandler+0x19a>
 8045650:	687a      	ldr	r2, [r7, #4]
 8045652:	69bb      	ldr	r3, [r7, #24]
 8045654:	212c      	movs	r1, #44	; 0x2c
 8045656:	fb01 f303 	mul.w	r3, r1, r3
 804565a:	4413      	add	r3, r2
 804565c:	3344      	adds	r3, #68	; 0x44
 804565e:	681b      	ldr	r3, [r3, #0]
 8045660:	2b00      	cmp	r3, #0
 8045662:	f000 809b 	beq.w	804579c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8045666:	687a      	ldr	r2, [r7, #4]
 8045668:	69bb      	ldr	r3, [r7, #24]
 804566a:	212c      	movs	r1, #44	; 0x2c
 804566c:	fb01 f303 	mul.w	r3, r1, r3
 8045670:	4413      	add	r3, r2
 8045672:	3350      	adds	r3, #80	; 0x50
 8045674:	681a      	ldr	r2, [r3, #0]
 8045676:	693b      	ldr	r3, [r7, #16]
 8045678:	441a      	add	r2, r3
 804567a:	6879      	ldr	r1, [r7, #4]
 804567c:	69bb      	ldr	r3, [r7, #24]
 804567e:	202c      	movs	r0, #44	; 0x2c
 8045680:	fb00 f303 	mul.w	r3, r0, r3
 8045684:	440b      	add	r3, r1
 8045686:	334c      	adds	r3, #76	; 0x4c
 8045688:	681b      	ldr	r3, [r3, #0]
 804568a:	429a      	cmp	r2, r3
 804568c:	d87a      	bhi.n	8045784 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 804568e:	687b      	ldr	r3, [r7, #4]
 8045690:	6818      	ldr	r0, [r3, #0]
 8045692:	687a      	ldr	r2, [r7, #4]
 8045694:	69bb      	ldr	r3, [r7, #24]
 8045696:	212c      	movs	r1, #44	; 0x2c
 8045698:	fb01 f303 	mul.w	r3, r1, r3
 804569c:	4413      	add	r3, r2
 804569e:	3344      	adds	r3, #68	; 0x44
 80456a0:	681b      	ldr	r3, [r3, #0]
 80456a2:	693a      	ldr	r2, [r7, #16]
 80456a4:	b292      	uxth	r2, r2
 80456a6:	4619      	mov	r1, r3
 80456a8:	f003 fe8a 	bl	80493c0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80456ac:	687a      	ldr	r2, [r7, #4]
 80456ae:	69bb      	ldr	r3, [r7, #24]
 80456b0:	212c      	movs	r1, #44	; 0x2c
 80456b2:	fb01 f303 	mul.w	r3, r1, r3
 80456b6:	4413      	add	r3, r2
 80456b8:	3344      	adds	r3, #68	; 0x44
 80456ba:	681a      	ldr	r2, [r3, #0]
 80456bc:	693b      	ldr	r3, [r7, #16]
 80456be:	441a      	add	r2, r3
 80456c0:	6879      	ldr	r1, [r7, #4]
 80456c2:	69bb      	ldr	r3, [r7, #24]
 80456c4:	202c      	movs	r0, #44	; 0x2c
 80456c6:	fb00 f303 	mul.w	r3, r0, r3
 80456ca:	440b      	add	r3, r1
 80456cc:	3344      	adds	r3, #68	; 0x44
 80456ce:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80456d0:	687a      	ldr	r2, [r7, #4]
 80456d2:	69bb      	ldr	r3, [r7, #24]
 80456d4:	212c      	movs	r1, #44	; 0x2c
 80456d6:	fb01 f303 	mul.w	r3, r1, r3
 80456da:	4413      	add	r3, r2
 80456dc:	3350      	adds	r3, #80	; 0x50
 80456de:	681a      	ldr	r2, [r3, #0]
 80456e0:	693b      	ldr	r3, [r7, #16]
 80456e2:	441a      	add	r2, r3
 80456e4:	6879      	ldr	r1, [r7, #4]
 80456e6:	69bb      	ldr	r3, [r7, #24]
 80456e8:	202c      	movs	r0, #44	; 0x2c
 80456ea:	fb00 f303 	mul.w	r3, r0, r3
 80456ee:	440b      	add	r3, r1
 80456f0:	3350      	adds	r3, #80	; 0x50
 80456f2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80456f4:	69bb      	ldr	r3, [r7, #24]
 80456f6:	015a      	lsls	r2, r3, #5
 80456f8:	6a3b      	ldr	r3, [r7, #32]
 80456fa:	4413      	add	r3, r2
 80456fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045700:	691b      	ldr	r3, [r3, #16]
 8045702:	0cdb      	lsrs	r3, r3, #19
 8045704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8045708:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 804570a:	687a      	ldr	r2, [r7, #4]
 804570c:	69bb      	ldr	r3, [r7, #24]
 804570e:	212c      	movs	r1, #44	; 0x2c
 8045710:	fb01 f303 	mul.w	r3, r1, r3
 8045714:	4413      	add	r3, r2
 8045716:	3340      	adds	r3, #64	; 0x40
 8045718:	881b      	ldrh	r3, [r3, #0]
 804571a:	461a      	mov	r2, r3
 804571c:	693b      	ldr	r3, [r7, #16]
 804571e:	4293      	cmp	r3, r2
 8045720:	d13c      	bne.n	804579c <HCD_RXQLVL_IRQHandler+0x19a>
 8045722:	68fb      	ldr	r3, [r7, #12]
 8045724:	2b00      	cmp	r3, #0
 8045726:	d039      	beq.n	804579c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8045728:	69bb      	ldr	r3, [r7, #24]
 804572a:	015a      	lsls	r2, r3, #5
 804572c:	6a3b      	ldr	r3, [r7, #32]
 804572e:	4413      	add	r3, r2
 8045730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045734:	681b      	ldr	r3, [r3, #0]
 8045736:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8045738:	68bb      	ldr	r3, [r7, #8]
 804573a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 804573e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8045740:	68bb      	ldr	r3, [r7, #8]
 8045742:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8045746:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8045748:	69bb      	ldr	r3, [r7, #24]
 804574a:	015a      	lsls	r2, r3, #5
 804574c:	6a3b      	ldr	r3, [r7, #32]
 804574e:	4413      	add	r3, r2
 8045750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045754:	461a      	mov	r2, r3
 8045756:	68bb      	ldr	r3, [r7, #8]
 8045758:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 804575a:	687a      	ldr	r2, [r7, #4]
 804575c:	69bb      	ldr	r3, [r7, #24]
 804575e:	212c      	movs	r1, #44	; 0x2c
 8045760:	fb01 f303 	mul.w	r3, r1, r3
 8045764:	4413      	add	r3, r2
 8045766:	3354      	adds	r3, #84	; 0x54
 8045768:	781b      	ldrb	r3, [r3, #0]
 804576a:	f083 0301 	eor.w	r3, r3, #1
 804576e:	b2d8      	uxtb	r0, r3
 8045770:	687a      	ldr	r2, [r7, #4]
 8045772:	69bb      	ldr	r3, [r7, #24]
 8045774:	212c      	movs	r1, #44	; 0x2c
 8045776:	fb01 f303 	mul.w	r3, r1, r3
 804577a:	4413      	add	r3, r2
 804577c:	3354      	adds	r3, #84	; 0x54
 804577e:	4602      	mov	r2, r0
 8045780:	701a      	strb	r2, [r3, #0]
      break;
 8045782:	e00b      	b.n	804579c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8045784:	687a      	ldr	r2, [r7, #4]
 8045786:	69bb      	ldr	r3, [r7, #24]
 8045788:	212c      	movs	r1, #44	; 0x2c
 804578a:	fb01 f303 	mul.w	r3, r1, r3
 804578e:	4413      	add	r3, r2
 8045790:	3360      	adds	r3, #96	; 0x60
 8045792:	2204      	movs	r2, #4
 8045794:	701a      	strb	r2, [r3, #0]
      break;
 8045796:	e001      	b.n	804579c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8045798:	bf00      	nop
 804579a:	e000      	b.n	804579e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 804579c:	bf00      	nop
  }
}
 804579e:	bf00      	nop
 80457a0:	3728      	adds	r7, #40	; 0x28
 80457a2:	46bd      	mov	sp, r7
 80457a4:	bd80      	pop	{r7, pc}

080457a6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80457a6:	b580      	push	{r7, lr}
 80457a8:	b086      	sub	sp, #24
 80457aa:	af00      	add	r7, sp, #0
 80457ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80457ae:	687b      	ldr	r3, [r7, #4]
 80457b0:	681b      	ldr	r3, [r3, #0]
 80457b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80457b4:	697b      	ldr	r3, [r7, #20]
 80457b6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80457b8:	693b      	ldr	r3, [r7, #16]
 80457ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80457be:	681b      	ldr	r3, [r3, #0]
 80457c0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80457c2:	693b      	ldr	r3, [r7, #16]
 80457c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80457c8:	681b      	ldr	r3, [r3, #0]
 80457ca:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80457cc:	68bb      	ldr	r3, [r7, #8]
 80457ce:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80457d2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80457d4:	68fb      	ldr	r3, [r7, #12]
 80457d6:	f003 0302 	and.w	r3, r3, #2
 80457da:	2b02      	cmp	r3, #2
 80457dc:	d10b      	bne.n	80457f6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80457de:	68fb      	ldr	r3, [r7, #12]
 80457e0:	f003 0301 	and.w	r3, r3, #1
 80457e4:	2b01      	cmp	r3, #1
 80457e6:	d102      	bne.n	80457ee <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80457e8:	6878      	ldr	r0, [r7, #4]
 80457ea:	f006 fd15 	bl	804c218 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80457ee:	68bb      	ldr	r3, [r7, #8]
 80457f0:	f043 0302 	orr.w	r3, r3, #2
 80457f4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80457f6:	68fb      	ldr	r3, [r7, #12]
 80457f8:	f003 0308 	and.w	r3, r3, #8
 80457fc:	2b08      	cmp	r3, #8
 80457fe:	d132      	bne.n	8045866 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8045800:	68bb      	ldr	r3, [r7, #8]
 8045802:	f043 0308 	orr.w	r3, r3, #8
 8045806:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8045808:	68fb      	ldr	r3, [r7, #12]
 804580a:	f003 0304 	and.w	r3, r3, #4
 804580e:	2b04      	cmp	r3, #4
 8045810:	d126      	bne.n	8045860 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8045812:	687b      	ldr	r3, [r7, #4]
 8045814:	699b      	ldr	r3, [r3, #24]
 8045816:	2b02      	cmp	r3, #2
 8045818:	d113      	bne.n	8045842 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 804581a:	68fb      	ldr	r3, [r7, #12]
 804581c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8045820:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8045824:	d106      	bne.n	8045834 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8045826:	687b      	ldr	r3, [r7, #4]
 8045828:	681b      	ldr	r3, [r3, #0]
 804582a:	2102      	movs	r1, #2
 804582c:	4618      	mov	r0, r3
 804582e:	f003 ff35 	bl	804969c <USB_InitFSLSPClkSel>
 8045832:	e011      	b.n	8045858 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8045834:	687b      	ldr	r3, [r7, #4]
 8045836:	681b      	ldr	r3, [r3, #0]
 8045838:	2101      	movs	r1, #1
 804583a:	4618      	mov	r0, r3
 804583c:	f003 ff2e 	bl	804969c <USB_InitFSLSPClkSel>
 8045840:	e00a      	b.n	8045858 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8045842:	687b      	ldr	r3, [r7, #4]
 8045844:	68db      	ldr	r3, [r3, #12]
 8045846:	2b01      	cmp	r3, #1
 8045848:	d106      	bne.n	8045858 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 804584a:	693b      	ldr	r3, [r7, #16]
 804584c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8045850:	461a      	mov	r2, r3
 8045852:	f64e 2360 	movw	r3, #60000	; 0xea60
 8045856:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8045858:	6878      	ldr	r0, [r7, #4]
 804585a:	f006 fd07 	bl	804c26c <HAL_HCD_PortEnabled_Callback>
 804585e:	e002      	b.n	8045866 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8045860:	6878      	ldr	r0, [r7, #4]
 8045862:	f006 fd11 	bl	804c288 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8045866:	68fb      	ldr	r3, [r7, #12]
 8045868:	f003 0320 	and.w	r3, r3, #32
 804586c:	2b20      	cmp	r3, #32
 804586e:	d103      	bne.n	8045878 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8045870:	68bb      	ldr	r3, [r7, #8]
 8045872:	f043 0320 	orr.w	r3, r3, #32
 8045876:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8045878:	693b      	ldr	r3, [r7, #16]
 804587a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 804587e:	461a      	mov	r2, r3
 8045880:	68bb      	ldr	r3, [r7, #8]
 8045882:	6013      	str	r3, [r2, #0]
}
 8045884:	bf00      	nop
 8045886:	3718      	adds	r7, #24
 8045888:	46bd      	mov	sp, r7
 804588a:	bd80      	pop	{r7, pc}

0804588c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 804588c:	b580      	push	{r7, lr}
 804588e:	b084      	sub	sp, #16
 8045890:	af00      	add	r7, sp, #0
 8045892:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8045894:	687b      	ldr	r3, [r7, #4]
 8045896:	2b00      	cmp	r3, #0
 8045898:	d101      	bne.n	804589e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 804589a:	2301      	movs	r3, #1
 804589c:	e12b      	b.n	8045af6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 804589e:	687b      	ldr	r3, [r7, #4]
 80458a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80458a4:	b2db      	uxtb	r3, r3
 80458a6:	2b00      	cmp	r3, #0
 80458a8:	d106      	bne.n	80458b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80458aa:	687b      	ldr	r3, [r7, #4]
 80458ac:	2200      	movs	r2, #0
 80458ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80458b2:	6878      	ldr	r0, [r7, #4]
 80458b4:	f7fb fb84 	bl	8040fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80458b8:	687b      	ldr	r3, [r7, #4]
 80458ba:	2224      	movs	r2, #36	; 0x24
 80458bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80458c0:	687b      	ldr	r3, [r7, #4]
 80458c2:	681b      	ldr	r3, [r3, #0]
 80458c4:	681a      	ldr	r2, [r3, #0]
 80458c6:	687b      	ldr	r3, [r7, #4]
 80458c8:	681b      	ldr	r3, [r3, #0]
 80458ca:	f022 0201 	bic.w	r2, r2, #1
 80458ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80458d0:	687b      	ldr	r3, [r7, #4]
 80458d2:	681b      	ldr	r3, [r3, #0]
 80458d4:	681a      	ldr	r2, [r3, #0]
 80458d6:	687b      	ldr	r3, [r7, #4]
 80458d8:	681b      	ldr	r3, [r3, #0]
 80458da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80458de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80458e0:	687b      	ldr	r3, [r7, #4]
 80458e2:	681b      	ldr	r3, [r3, #0]
 80458e4:	681a      	ldr	r2, [r3, #0]
 80458e6:	687b      	ldr	r3, [r7, #4]
 80458e8:	681b      	ldr	r3, [r3, #0]
 80458ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80458ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80458f0:	f001 fa0c 	bl	8046d0c <HAL_RCC_GetPCLK1Freq>
 80458f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80458f6:	687b      	ldr	r3, [r7, #4]
 80458f8:	685b      	ldr	r3, [r3, #4]
 80458fa:	4a81      	ldr	r2, [pc, #516]	; (8045b00 <HAL_I2C_Init+0x274>)
 80458fc:	4293      	cmp	r3, r2
 80458fe:	d807      	bhi.n	8045910 <HAL_I2C_Init+0x84>
 8045900:	68fb      	ldr	r3, [r7, #12]
 8045902:	4a80      	ldr	r2, [pc, #512]	; (8045b04 <HAL_I2C_Init+0x278>)
 8045904:	4293      	cmp	r3, r2
 8045906:	bf94      	ite	ls
 8045908:	2301      	movls	r3, #1
 804590a:	2300      	movhi	r3, #0
 804590c:	b2db      	uxtb	r3, r3
 804590e:	e006      	b.n	804591e <HAL_I2C_Init+0x92>
 8045910:	68fb      	ldr	r3, [r7, #12]
 8045912:	4a7d      	ldr	r2, [pc, #500]	; (8045b08 <HAL_I2C_Init+0x27c>)
 8045914:	4293      	cmp	r3, r2
 8045916:	bf94      	ite	ls
 8045918:	2301      	movls	r3, #1
 804591a:	2300      	movhi	r3, #0
 804591c:	b2db      	uxtb	r3, r3
 804591e:	2b00      	cmp	r3, #0
 8045920:	d001      	beq.n	8045926 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8045922:	2301      	movs	r3, #1
 8045924:	e0e7      	b.n	8045af6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8045926:	68fb      	ldr	r3, [r7, #12]
 8045928:	4a78      	ldr	r2, [pc, #480]	; (8045b0c <HAL_I2C_Init+0x280>)
 804592a:	fba2 2303 	umull	r2, r3, r2, r3
 804592e:	0c9b      	lsrs	r3, r3, #18
 8045930:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8045932:	687b      	ldr	r3, [r7, #4]
 8045934:	681b      	ldr	r3, [r3, #0]
 8045936:	685b      	ldr	r3, [r3, #4]
 8045938:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 804593c:	687b      	ldr	r3, [r7, #4]
 804593e:	681b      	ldr	r3, [r3, #0]
 8045940:	68ba      	ldr	r2, [r7, #8]
 8045942:	430a      	orrs	r2, r1
 8045944:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8045946:	687b      	ldr	r3, [r7, #4]
 8045948:	681b      	ldr	r3, [r3, #0]
 804594a:	6a1b      	ldr	r3, [r3, #32]
 804594c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8045950:	687b      	ldr	r3, [r7, #4]
 8045952:	685b      	ldr	r3, [r3, #4]
 8045954:	4a6a      	ldr	r2, [pc, #424]	; (8045b00 <HAL_I2C_Init+0x274>)
 8045956:	4293      	cmp	r3, r2
 8045958:	d802      	bhi.n	8045960 <HAL_I2C_Init+0xd4>
 804595a:	68bb      	ldr	r3, [r7, #8]
 804595c:	3301      	adds	r3, #1
 804595e:	e009      	b.n	8045974 <HAL_I2C_Init+0xe8>
 8045960:	68bb      	ldr	r3, [r7, #8]
 8045962:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8045966:	fb02 f303 	mul.w	r3, r2, r3
 804596a:	4a69      	ldr	r2, [pc, #420]	; (8045b10 <HAL_I2C_Init+0x284>)
 804596c:	fba2 2303 	umull	r2, r3, r2, r3
 8045970:	099b      	lsrs	r3, r3, #6
 8045972:	3301      	adds	r3, #1
 8045974:	687a      	ldr	r2, [r7, #4]
 8045976:	6812      	ldr	r2, [r2, #0]
 8045978:	430b      	orrs	r3, r1
 804597a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 804597c:	687b      	ldr	r3, [r7, #4]
 804597e:	681b      	ldr	r3, [r3, #0]
 8045980:	69db      	ldr	r3, [r3, #28]
 8045982:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8045986:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 804598a:	687b      	ldr	r3, [r7, #4]
 804598c:	685b      	ldr	r3, [r3, #4]
 804598e:	495c      	ldr	r1, [pc, #368]	; (8045b00 <HAL_I2C_Init+0x274>)
 8045990:	428b      	cmp	r3, r1
 8045992:	d819      	bhi.n	80459c8 <HAL_I2C_Init+0x13c>
 8045994:	68fb      	ldr	r3, [r7, #12]
 8045996:	1e59      	subs	r1, r3, #1
 8045998:	687b      	ldr	r3, [r7, #4]
 804599a:	685b      	ldr	r3, [r3, #4]
 804599c:	005b      	lsls	r3, r3, #1
 804599e:	fbb1 f3f3 	udiv	r3, r1, r3
 80459a2:	1c59      	adds	r1, r3, #1
 80459a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80459a8:	400b      	ands	r3, r1
 80459aa:	2b00      	cmp	r3, #0
 80459ac:	d00a      	beq.n	80459c4 <HAL_I2C_Init+0x138>
 80459ae:	68fb      	ldr	r3, [r7, #12]
 80459b0:	1e59      	subs	r1, r3, #1
 80459b2:	687b      	ldr	r3, [r7, #4]
 80459b4:	685b      	ldr	r3, [r3, #4]
 80459b6:	005b      	lsls	r3, r3, #1
 80459b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80459bc:	3301      	adds	r3, #1
 80459be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80459c2:	e051      	b.n	8045a68 <HAL_I2C_Init+0x1dc>
 80459c4:	2304      	movs	r3, #4
 80459c6:	e04f      	b.n	8045a68 <HAL_I2C_Init+0x1dc>
 80459c8:	687b      	ldr	r3, [r7, #4]
 80459ca:	689b      	ldr	r3, [r3, #8]
 80459cc:	2b00      	cmp	r3, #0
 80459ce:	d111      	bne.n	80459f4 <HAL_I2C_Init+0x168>
 80459d0:	68fb      	ldr	r3, [r7, #12]
 80459d2:	1e58      	subs	r0, r3, #1
 80459d4:	687b      	ldr	r3, [r7, #4]
 80459d6:	6859      	ldr	r1, [r3, #4]
 80459d8:	460b      	mov	r3, r1
 80459da:	005b      	lsls	r3, r3, #1
 80459dc:	440b      	add	r3, r1
 80459de:	fbb0 f3f3 	udiv	r3, r0, r3
 80459e2:	3301      	adds	r3, #1
 80459e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80459e8:	2b00      	cmp	r3, #0
 80459ea:	bf0c      	ite	eq
 80459ec:	2301      	moveq	r3, #1
 80459ee:	2300      	movne	r3, #0
 80459f0:	b2db      	uxtb	r3, r3
 80459f2:	e012      	b.n	8045a1a <HAL_I2C_Init+0x18e>
 80459f4:	68fb      	ldr	r3, [r7, #12]
 80459f6:	1e58      	subs	r0, r3, #1
 80459f8:	687b      	ldr	r3, [r7, #4]
 80459fa:	6859      	ldr	r1, [r3, #4]
 80459fc:	460b      	mov	r3, r1
 80459fe:	009b      	lsls	r3, r3, #2
 8045a00:	440b      	add	r3, r1
 8045a02:	0099      	lsls	r1, r3, #2
 8045a04:	440b      	add	r3, r1
 8045a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8045a0a:	3301      	adds	r3, #1
 8045a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045a10:	2b00      	cmp	r3, #0
 8045a12:	bf0c      	ite	eq
 8045a14:	2301      	moveq	r3, #1
 8045a16:	2300      	movne	r3, #0
 8045a18:	b2db      	uxtb	r3, r3
 8045a1a:	2b00      	cmp	r3, #0
 8045a1c:	d001      	beq.n	8045a22 <HAL_I2C_Init+0x196>
 8045a1e:	2301      	movs	r3, #1
 8045a20:	e022      	b.n	8045a68 <HAL_I2C_Init+0x1dc>
 8045a22:	687b      	ldr	r3, [r7, #4]
 8045a24:	689b      	ldr	r3, [r3, #8]
 8045a26:	2b00      	cmp	r3, #0
 8045a28:	d10e      	bne.n	8045a48 <HAL_I2C_Init+0x1bc>
 8045a2a:	68fb      	ldr	r3, [r7, #12]
 8045a2c:	1e58      	subs	r0, r3, #1
 8045a2e:	687b      	ldr	r3, [r7, #4]
 8045a30:	6859      	ldr	r1, [r3, #4]
 8045a32:	460b      	mov	r3, r1
 8045a34:	005b      	lsls	r3, r3, #1
 8045a36:	440b      	add	r3, r1
 8045a38:	fbb0 f3f3 	udiv	r3, r0, r3
 8045a3c:	3301      	adds	r3, #1
 8045a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8045a46:	e00f      	b.n	8045a68 <HAL_I2C_Init+0x1dc>
 8045a48:	68fb      	ldr	r3, [r7, #12]
 8045a4a:	1e58      	subs	r0, r3, #1
 8045a4c:	687b      	ldr	r3, [r7, #4]
 8045a4e:	6859      	ldr	r1, [r3, #4]
 8045a50:	460b      	mov	r3, r1
 8045a52:	009b      	lsls	r3, r3, #2
 8045a54:	440b      	add	r3, r1
 8045a56:	0099      	lsls	r1, r3, #2
 8045a58:	440b      	add	r3, r1
 8045a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8045a5e:	3301      	adds	r3, #1
 8045a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8045a68:	6879      	ldr	r1, [r7, #4]
 8045a6a:	6809      	ldr	r1, [r1, #0]
 8045a6c:	4313      	orrs	r3, r2
 8045a6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8045a70:	687b      	ldr	r3, [r7, #4]
 8045a72:	681b      	ldr	r3, [r3, #0]
 8045a74:	681b      	ldr	r3, [r3, #0]
 8045a76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8045a7a:	687b      	ldr	r3, [r7, #4]
 8045a7c:	69da      	ldr	r2, [r3, #28]
 8045a7e:	687b      	ldr	r3, [r7, #4]
 8045a80:	6a1b      	ldr	r3, [r3, #32]
 8045a82:	431a      	orrs	r2, r3
 8045a84:	687b      	ldr	r3, [r7, #4]
 8045a86:	681b      	ldr	r3, [r3, #0]
 8045a88:	430a      	orrs	r2, r1
 8045a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8045a8c:	687b      	ldr	r3, [r7, #4]
 8045a8e:	681b      	ldr	r3, [r3, #0]
 8045a90:	689b      	ldr	r3, [r3, #8]
 8045a92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8045a96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8045a9a:	687a      	ldr	r2, [r7, #4]
 8045a9c:	6911      	ldr	r1, [r2, #16]
 8045a9e:	687a      	ldr	r2, [r7, #4]
 8045aa0:	68d2      	ldr	r2, [r2, #12]
 8045aa2:	4311      	orrs	r1, r2
 8045aa4:	687a      	ldr	r2, [r7, #4]
 8045aa6:	6812      	ldr	r2, [r2, #0]
 8045aa8:	430b      	orrs	r3, r1
 8045aaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8045aac:	687b      	ldr	r3, [r7, #4]
 8045aae:	681b      	ldr	r3, [r3, #0]
 8045ab0:	68db      	ldr	r3, [r3, #12]
 8045ab2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8045ab6:	687b      	ldr	r3, [r7, #4]
 8045ab8:	695a      	ldr	r2, [r3, #20]
 8045aba:	687b      	ldr	r3, [r7, #4]
 8045abc:	699b      	ldr	r3, [r3, #24]
 8045abe:	431a      	orrs	r2, r3
 8045ac0:	687b      	ldr	r3, [r7, #4]
 8045ac2:	681b      	ldr	r3, [r3, #0]
 8045ac4:	430a      	orrs	r2, r1
 8045ac6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8045ac8:	687b      	ldr	r3, [r7, #4]
 8045aca:	681b      	ldr	r3, [r3, #0]
 8045acc:	681a      	ldr	r2, [r3, #0]
 8045ace:	687b      	ldr	r3, [r7, #4]
 8045ad0:	681b      	ldr	r3, [r3, #0]
 8045ad2:	f042 0201 	orr.w	r2, r2, #1
 8045ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8045ad8:	687b      	ldr	r3, [r7, #4]
 8045ada:	2200      	movs	r2, #0
 8045adc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8045ade:	687b      	ldr	r3, [r7, #4]
 8045ae0:	2220      	movs	r2, #32
 8045ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8045ae6:	687b      	ldr	r3, [r7, #4]
 8045ae8:	2200      	movs	r2, #0
 8045aea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8045aec:	687b      	ldr	r3, [r7, #4]
 8045aee:	2200      	movs	r2, #0
 8045af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8045af4:	2300      	movs	r3, #0
}
 8045af6:	4618      	mov	r0, r3
 8045af8:	3710      	adds	r7, #16
 8045afa:	46bd      	mov	sp, r7
 8045afc:	bd80      	pop	{r7, pc}
 8045afe:	bf00      	nop
 8045b00:	000186a0 	.word	0x000186a0
 8045b04:	001e847f 	.word	0x001e847f
 8045b08:	003d08ff 	.word	0x003d08ff
 8045b0c:	431bde83 	.word	0x431bde83
 8045b10:	10624dd3 	.word	0x10624dd3

08045b14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8045b14:	b480      	push	{r7}
 8045b16:	b083      	sub	sp, #12
 8045b18:	af00      	add	r7, sp, #0
 8045b1a:	6078      	str	r0, [r7, #4]
 8045b1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8045b1e:	687b      	ldr	r3, [r7, #4]
 8045b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045b24:	b2db      	uxtb	r3, r3
 8045b26:	2b20      	cmp	r3, #32
 8045b28:	d129      	bne.n	8045b7e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8045b2a:	687b      	ldr	r3, [r7, #4]
 8045b2c:	2224      	movs	r2, #36	; 0x24
 8045b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8045b32:	687b      	ldr	r3, [r7, #4]
 8045b34:	681b      	ldr	r3, [r3, #0]
 8045b36:	681a      	ldr	r2, [r3, #0]
 8045b38:	687b      	ldr	r3, [r7, #4]
 8045b3a:	681b      	ldr	r3, [r3, #0]
 8045b3c:	f022 0201 	bic.w	r2, r2, #1
 8045b40:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8045b42:	687b      	ldr	r3, [r7, #4]
 8045b44:	681b      	ldr	r3, [r3, #0]
 8045b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8045b48:	687b      	ldr	r3, [r7, #4]
 8045b4a:	681b      	ldr	r3, [r3, #0]
 8045b4c:	f022 0210 	bic.w	r2, r2, #16
 8045b50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8045b52:	687b      	ldr	r3, [r7, #4]
 8045b54:	681b      	ldr	r3, [r3, #0]
 8045b56:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8045b58:	687b      	ldr	r3, [r7, #4]
 8045b5a:	681b      	ldr	r3, [r3, #0]
 8045b5c:	683a      	ldr	r2, [r7, #0]
 8045b5e:	430a      	orrs	r2, r1
 8045b60:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8045b62:	687b      	ldr	r3, [r7, #4]
 8045b64:	681b      	ldr	r3, [r3, #0]
 8045b66:	681a      	ldr	r2, [r3, #0]
 8045b68:	687b      	ldr	r3, [r7, #4]
 8045b6a:	681b      	ldr	r3, [r3, #0]
 8045b6c:	f042 0201 	orr.w	r2, r2, #1
 8045b70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8045b72:	687b      	ldr	r3, [r7, #4]
 8045b74:	2220      	movs	r2, #32
 8045b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8045b7a:	2300      	movs	r3, #0
 8045b7c:	e000      	b.n	8045b80 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8045b7e:	2302      	movs	r3, #2
  }
}
 8045b80:	4618      	mov	r0, r3
 8045b82:	370c      	adds	r7, #12
 8045b84:	46bd      	mov	sp, r7
 8045b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045b8a:	4770      	bx	lr

08045b8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8045b8c:	b480      	push	{r7}
 8045b8e:	b085      	sub	sp, #20
 8045b90:	af00      	add	r7, sp, #0
 8045b92:	6078      	str	r0, [r7, #4]
 8045b94:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8045b96:	2300      	movs	r3, #0
 8045b98:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8045b9a:	687b      	ldr	r3, [r7, #4]
 8045b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045ba0:	b2db      	uxtb	r3, r3
 8045ba2:	2b20      	cmp	r3, #32
 8045ba4:	d12a      	bne.n	8045bfc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8045ba6:	687b      	ldr	r3, [r7, #4]
 8045ba8:	2224      	movs	r2, #36	; 0x24
 8045baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8045bae:	687b      	ldr	r3, [r7, #4]
 8045bb0:	681b      	ldr	r3, [r3, #0]
 8045bb2:	681a      	ldr	r2, [r3, #0]
 8045bb4:	687b      	ldr	r3, [r7, #4]
 8045bb6:	681b      	ldr	r3, [r3, #0]
 8045bb8:	f022 0201 	bic.w	r2, r2, #1
 8045bbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8045bbe:	687b      	ldr	r3, [r7, #4]
 8045bc0:	681b      	ldr	r3, [r3, #0]
 8045bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045bc4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8045bc6:	89fb      	ldrh	r3, [r7, #14]
 8045bc8:	f023 030f 	bic.w	r3, r3, #15
 8045bcc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8045bce:	683b      	ldr	r3, [r7, #0]
 8045bd0:	b29a      	uxth	r2, r3
 8045bd2:	89fb      	ldrh	r3, [r7, #14]
 8045bd4:	4313      	orrs	r3, r2
 8045bd6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8045bd8:	687b      	ldr	r3, [r7, #4]
 8045bda:	681b      	ldr	r3, [r3, #0]
 8045bdc:	89fa      	ldrh	r2, [r7, #14]
 8045bde:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8045be0:	687b      	ldr	r3, [r7, #4]
 8045be2:	681b      	ldr	r3, [r3, #0]
 8045be4:	681a      	ldr	r2, [r3, #0]
 8045be6:	687b      	ldr	r3, [r7, #4]
 8045be8:	681b      	ldr	r3, [r3, #0]
 8045bea:	f042 0201 	orr.w	r2, r2, #1
 8045bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8045bf0:	687b      	ldr	r3, [r7, #4]
 8045bf2:	2220      	movs	r2, #32
 8045bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8045bf8:	2300      	movs	r3, #0
 8045bfa:	e000      	b.n	8045bfe <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8045bfc:	2302      	movs	r3, #2
  }
}
 8045bfe:	4618      	mov	r0, r3
 8045c00:	3714      	adds	r7, #20
 8045c02:	46bd      	mov	sp, r7
 8045c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045c08:	4770      	bx	lr
	...

08045c0c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8045c0c:	b580      	push	{r7, lr}
 8045c0e:	b084      	sub	sp, #16
 8045c10:	af00      	add	r7, sp, #0
 8045c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8045c14:	687b      	ldr	r3, [r7, #4]
 8045c16:	2b00      	cmp	r3, #0
 8045c18:	d101      	bne.n	8045c1e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8045c1a:	2301      	movs	r3, #1
 8045c1c:	e0bf      	b.n	8045d9e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8045c1e:	687b      	ldr	r3, [r7, #4]
 8045c20:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8045c24:	b2db      	uxtb	r3, r3
 8045c26:	2b00      	cmp	r3, #0
 8045c28:	d106      	bne.n	8045c38 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8045c2a:	687b      	ldr	r3, [r7, #4]
 8045c2c:	2200      	movs	r2, #0
 8045c2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8045c32:	6878      	ldr	r0, [r7, #4]
 8045c34:	f7fb fa2e 	bl	8041094 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8045c38:	687b      	ldr	r3, [r7, #4]
 8045c3a:	2202      	movs	r2, #2
 8045c3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8045c40:	687b      	ldr	r3, [r7, #4]
 8045c42:	681b      	ldr	r3, [r3, #0]
 8045c44:	699a      	ldr	r2, [r3, #24]
 8045c46:	687b      	ldr	r3, [r7, #4]
 8045c48:	681b      	ldr	r3, [r3, #0]
 8045c4a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8045c4e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8045c50:	687b      	ldr	r3, [r7, #4]
 8045c52:	681b      	ldr	r3, [r3, #0]
 8045c54:	6999      	ldr	r1, [r3, #24]
 8045c56:	687b      	ldr	r3, [r7, #4]
 8045c58:	685a      	ldr	r2, [r3, #4]
 8045c5a:	687b      	ldr	r3, [r7, #4]
 8045c5c:	689b      	ldr	r3, [r3, #8]
 8045c5e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8045c60:	687b      	ldr	r3, [r7, #4]
 8045c62:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8045c64:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8045c66:	687b      	ldr	r3, [r7, #4]
 8045c68:	691b      	ldr	r3, [r3, #16]
 8045c6a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8045c6c:	687b      	ldr	r3, [r7, #4]
 8045c6e:	681b      	ldr	r3, [r3, #0]
 8045c70:	430a      	orrs	r2, r1
 8045c72:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8045c74:	687b      	ldr	r3, [r7, #4]
 8045c76:	681b      	ldr	r3, [r3, #0]
 8045c78:	6899      	ldr	r1, [r3, #8]
 8045c7a:	687b      	ldr	r3, [r7, #4]
 8045c7c:	681a      	ldr	r2, [r3, #0]
 8045c7e:	4b4a      	ldr	r3, [pc, #296]	; (8045da8 <HAL_LTDC_Init+0x19c>)
 8045c80:	400b      	ands	r3, r1
 8045c82:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8045c84:	687b      	ldr	r3, [r7, #4]
 8045c86:	695b      	ldr	r3, [r3, #20]
 8045c88:	041b      	lsls	r3, r3, #16
 8045c8a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8045c8c:	687b      	ldr	r3, [r7, #4]
 8045c8e:	681b      	ldr	r3, [r3, #0]
 8045c90:	6899      	ldr	r1, [r3, #8]
 8045c92:	687b      	ldr	r3, [r7, #4]
 8045c94:	699a      	ldr	r2, [r3, #24]
 8045c96:	68fb      	ldr	r3, [r7, #12]
 8045c98:	431a      	orrs	r2, r3
 8045c9a:	687b      	ldr	r3, [r7, #4]
 8045c9c:	681b      	ldr	r3, [r3, #0]
 8045c9e:	430a      	orrs	r2, r1
 8045ca0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8045ca2:	687b      	ldr	r3, [r7, #4]
 8045ca4:	681b      	ldr	r3, [r3, #0]
 8045ca6:	68d9      	ldr	r1, [r3, #12]
 8045ca8:	687b      	ldr	r3, [r7, #4]
 8045caa:	681a      	ldr	r2, [r3, #0]
 8045cac:	4b3e      	ldr	r3, [pc, #248]	; (8045da8 <HAL_LTDC_Init+0x19c>)
 8045cae:	400b      	ands	r3, r1
 8045cb0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8045cb2:	687b      	ldr	r3, [r7, #4]
 8045cb4:	69db      	ldr	r3, [r3, #28]
 8045cb6:	041b      	lsls	r3, r3, #16
 8045cb8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8045cba:	687b      	ldr	r3, [r7, #4]
 8045cbc:	681b      	ldr	r3, [r3, #0]
 8045cbe:	68d9      	ldr	r1, [r3, #12]
 8045cc0:	687b      	ldr	r3, [r7, #4]
 8045cc2:	6a1a      	ldr	r2, [r3, #32]
 8045cc4:	68fb      	ldr	r3, [r7, #12]
 8045cc6:	431a      	orrs	r2, r3
 8045cc8:	687b      	ldr	r3, [r7, #4]
 8045cca:	681b      	ldr	r3, [r3, #0]
 8045ccc:	430a      	orrs	r2, r1
 8045cce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8045cd0:	687b      	ldr	r3, [r7, #4]
 8045cd2:	681b      	ldr	r3, [r3, #0]
 8045cd4:	6919      	ldr	r1, [r3, #16]
 8045cd6:	687b      	ldr	r3, [r7, #4]
 8045cd8:	681a      	ldr	r2, [r3, #0]
 8045cda:	4b33      	ldr	r3, [pc, #204]	; (8045da8 <HAL_LTDC_Init+0x19c>)
 8045cdc:	400b      	ands	r3, r1
 8045cde:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8045ce0:	687b      	ldr	r3, [r7, #4]
 8045ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045ce4:	041b      	lsls	r3, r3, #16
 8045ce6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8045ce8:	687b      	ldr	r3, [r7, #4]
 8045cea:	681b      	ldr	r3, [r3, #0]
 8045cec:	6919      	ldr	r1, [r3, #16]
 8045cee:	687b      	ldr	r3, [r7, #4]
 8045cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8045cf2:	68fb      	ldr	r3, [r7, #12]
 8045cf4:	431a      	orrs	r2, r3
 8045cf6:	687b      	ldr	r3, [r7, #4]
 8045cf8:	681b      	ldr	r3, [r3, #0]
 8045cfa:	430a      	orrs	r2, r1
 8045cfc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8045cfe:	687b      	ldr	r3, [r7, #4]
 8045d00:	681b      	ldr	r3, [r3, #0]
 8045d02:	6959      	ldr	r1, [r3, #20]
 8045d04:	687b      	ldr	r3, [r7, #4]
 8045d06:	681a      	ldr	r2, [r3, #0]
 8045d08:	4b27      	ldr	r3, [pc, #156]	; (8045da8 <HAL_LTDC_Init+0x19c>)
 8045d0a:	400b      	ands	r3, r1
 8045d0c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8045d0e:	687b      	ldr	r3, [r7, #4]
 8045d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045d12:	041b      	lsls	r3, r3, #16
 8045d14:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8045d16:	687b      	ldr	r3, [r7, #4]
 8045d18:	681b      	ldr	r3, [r3, #0]
 8045d1a:	6959      	ldr	r1, [r3, #20]
 8045d1c:	687b      	ldr	r3, [r7, #4]
 8045d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8045d20:	68fb      	ldr	r3, [r7, #12]
 8045d22:	431a      	orrs	r2, r3
 8045d24:	687b      	ldr	r3, [r7, #4]
 8045d26:	681b      	ldr	r3, [r3, #0]
 8045d28:	430a      	orrs	r2, r1
 8045d2a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8045d2c:	687b      	ldr	r3, [r7, #4]
 8045d2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8045d32:	021b      	lsls	r3, r3, #8
 8045d34:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8045d36:	687b      	ldr	r3, [r7, #4]
 8045d38:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8045d3c:	041b      	lsls	r3, r3, #16
 8045d3e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8045d40:	687b      	ldr	r3, [r7, #4]
 8045d42:	681b      	ldr	r3, [r3, #0]
 8045d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8045d46:	687b      	ldr	r3, [r7, #4]
 8045d48:	681b      	ldr	r3, [r3, #0]
 8045d4a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8045d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8045d50:	687b      	ldr	r3, [r7, #4]
 8045d52:	681b      	ldr	r3, [r3, #0]
 8045d54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8045d56:	68ba      	ldr	r2, [r7, #8]
 8045d58:	68fb      	ldr	r3, [r7, #12]
 8045d5a:	4313      	orrs	r3, r2
 8045d5c:	687a      	ldr	r2, [r7, #4]
 8045d5e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8045d62:	431a      	orrs	r2, r3
 8045d64:	687b      	ldr	r3, [r7, #4]
 8045d66:	681b      	ldr	r3, [r3, #0]
 8045d68:	430a      	orrs	r2, r1
 8045d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8045d6c:	687b      	ldr	r3, [r7, #4]
 8045d6e:	681b      	ldr	r3, [r3, #0]
 8045d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8045d72:	687b      	ldr	r3, [r7, #4]
 8045d74:	681b      	ldr	r3, [r3, #0]
 8045d76:	f042 0206 	orr.w	r2, r2, #6
 8045d7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8045d7c:	687b      	ldr	r3, [r7, #4]
 8045d7e:	681b      	ldr	r3, [r3, #0]
 8045d80:	699a      	ldr	r2, [r3, #24]
 8045d82:	687b      	ldr	r3, [r7, #4]
 8045d84:	681b      	ldr	r3, [r3, #0]
 8045d86:	f042 0201 	orr.w	r2, r2, #1
 8045d8a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8045d8c:	687b      	ldr	r3, [r7, #4]
 8045d8e:	2200      	movs	r2, #0
 8045d90:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8045d94:	687b      	ldr	r3, [r7, #4]
 8045d96:	2201      	movs	r2, #1
 8045d98:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8045d9c:	2300      	movs	r3, #0
}
 8045d9e:	4618      	mov	r0, r3
 8045da0:	3710      	adds	r7, #16
 8045da2:	46bd      	mov	sp, r7
 8045da4:	bd80      	pop	{r7, pc}
 8045da6:	bf00      	nop
 8045da8:	f000f800 	.word	0xf000f800

08045dac <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8045dac:	b580      	push	{r7, lr}
 8045dae:	b084      	sub	sp, #16
 8045db0:	af00      	add	r7, sp, #0
 8045db2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8045db4:	687b      	ldr	r3, [r7, #4]
 8045db6:	681b      	ldr	r3, [r3, #0]
 8045db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8045dba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8045dbc:	687b      	ldr	r3, [r7, #4]
 8045dbe:	681b      	ldr	r3, [r3, #0]
 8045dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8045dc2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8045dc4:	68fb      	ldr	r3, [r7, #12]
 8045dc6:	f003 0304 	and.w	r3, r3, #4
 8045dca:	2b00      	cmp	r3, #0
 8045dcc:	d023      	beq.n	8045e16 <HAL_LTDC_IRQHandler+0x6a>
 8045dce:	68bb      	ldr	r3, [r7, #8]
 8045dd0:	f003 0304 	and.w	r3, r3, #4
 8045dd4:	2b00      	cmp	r3, #0
 8045dd6:	d01e      	beq.n	8045e16 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8045dd8:	687b      	ldr	r3, [r7, #4]
 8045dda:	681b      	ldr	r3, [r3, #0]
 8045ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8045dde:	687b      	ldr	r3, [r7, #4]
 8045de0:	681b      	ldr	r3, [r3, #0]
 8045de2:	f022 0204 	bic.w	r2, r2, #4
 8045de6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8045de8:	687b      	ldr	r3, [r7, #4]
 8045dea:	681b      	ldr	r3, [r3, #0]
 8045dec:	2204      	movs	r2, #4
 8045dee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8045df0:	687b      	ldr	r3, [r7, #4]
 8045df2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8045df6:	f043 0201 	orr.w	r2, r3, #1
 8045dfa:	687b      	ldr	r3, [r7, #4]
 8045dfc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8045e00:	687b      	ldr	r3, [r7, #4]
 8045e02:	2204      	movs	r2, #4
 8045e04:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8045e08:	687b      	ldr	r3, [r7, #4]
 8045e0a:	2200      	movs	r2, #0
 8045e0c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8045e10:	6878      	ldr	r0, [r7, #4]
 8045e12:	f000 f86f 	bl	8045ef4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8045e16:	68fb      	ldr	r3, [r7, #12]
 8045e18:	f003 0302 	and.w	r3, r3, #2
 8045e1c:	2b00      	cmp	r3, #0
 8045e1e:	d023      	beq.n	8045e68 <HAL_LTDC_IRQHandler+0xbc>
 8045e20:	68bb      	ldr	r3, [r7, #8]
 8045e22:	f003 0302 	and.w	r3, r3, #2
 8045e26:	2b00      	cmp	r3, #0
 8045e28:	d01e      	beq.n	8045e68 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8045e2a:	687b      	ldr	r3, [r7, #4]
 8045e2c:	681b      	ldr	r3, [r3, #0]
 8045e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8045e30:	687b      	ldr	r3, [r7, #4]
 8045e32:	681b      	ldr	r3, [r3, #0]
 8045e34:	f022 0202 	bic.w	r2, r2, #2
 8045e38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8045e3a:	687b      	ldr	r3, [r7, #4]
 8045e3c:	681b      	ldr	r3, [r3, #0]
 8045e3e:	2202      	movs	r2, #2
 8045e40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8045e42:	687b      	ldr	r3, [r7, #4]
 8045e44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8045e48:	f043 0202 	orr.w	r2, r3, #2
 8045e4c:	687b      	ldr	r3, [r7, #4]
 8045e4e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8045e52:	687b      	ldr	r3, [r7, #4]
 8045e54:	2204      	movs	r2, #4
 8045e56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8045e5a:	687b      	ldr	r3, [r7, #4]
 8045e5c:	2200      	movs	r2, #0
 8045e5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8045e62:	6878      	ldr	r0, [r7, #4]
 8045e64:	f000 f846 	bl	8045ef4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8045e68:	68fb      	ldr	r3, [r7, #12]
 8045e6a:	f003 0301 	and.w	r3, r3, #1
 8045e6e:	2b00      	cmp	r3, #0
 8045e70:	d01b      	beq.n	8045eaa <HAL_LTDC_IRQHandler+0xfe>
 8045e72:	68bb      	ldr	r3, [r7, #8]
 8045e74:	f003 0301 	and.w	r3, r3, #1
 8045e78:	2b00      	cmp	r3, #0
 8045e7a:	d016      	beq.n	8045eaa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8045e7c:	687b      	ldr	r3, [r7, #4]
 8045e7e:	681b      	ldr	r3, [r3, #0]
 8045e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8045e82:	687b      	ldr	r3, [r7, #4]
 8045e84:	681b      	ldr	r3, [r3, #0]
 8045e86:	f022 0201 	bic.w	r2, r2, #1
 8045e8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8045e8c:	687b      	ldr	r3, [r7, #4]
 8045e8e:	681b      	ldr	r3, [r3, #0]
 8045e90:	2201      	movs	r2, #1
 8045e92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8045e94:	687b      	ldr	r3, [r7, #4]
 8045e96:	2201      	movs	r2, #1
 8045e98:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8045e9c:	687b      	ldr	r3, [r7, #4]
 8045e9e:	2200      	movs	r2, #0
 8045ea0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8045ea4:	6878      	ldr	r0, [r7, #4]
 8045ea6:	f000 f82f 	bl	8045f08 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8045eaa:	68fb      	ldr	r3, [r7, #12]
 8045eac:	f003 0308 	and.w	r3, r3, #8
 8045eb0:	2b00      	cmp	r3, #0
 8045eb2:	d01b      	beq.n	8045eec <HAL_LTDC_IRQHandler+0x140>
 8045eb4:	68bb      	ldr	r3, [r7, #8]
 8045eb6:	f003 0308 	and.w	r3, r3, #8
 8045eba:	2b00      	cmp	r3, #0
 8045ebc:	d016      	beq.n	8045eec <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8045ebe:	687b      	ldr	r3, [r7, #4]
 8045ec0:	681b      	ldr	r3, [r3, #0]
 8045ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8045ec4:	687b      	ldr	r3, [r7, #4]
 8045ec6:	681b      	ldr	r3, [r3, #0]
 8045ec8:	f022 0208 	bic.w	r2, r2, #8
 8045ecc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8045ece:	687b      	ldr	r3, [r7, #4]
 8045ed0:	681b      	ldr	r3, [r3, #0]
 8045ed2:	2208      	movs	r2, #8
 8045ed4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8045ed6:	687b      	ldr	r3, [r7, #4]
 8045ed8:	2201      	movs	r2, #1
 8045eda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8045ede:	687b      	ldr	r3, [r7, #4]
 8045ee0:	2200      	movs	r2, #0
 8045ee2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8045ee6:	6878      	ldr	r0, [r7, #4]
 8045ee8:	f000 f818 	bl	8045f1c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8045eec:	bf00      	nop
 8045eee:	3710      	adds	r7, #16
 8045ef0:	46bd      	mov	sp, r7
 8045ef2:	bd80      	pop	{r7, pc}

08045ef4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8045ef4:	b480      	push	{r7}
 8045ef6:	b083      	sub	sp, #12
 8045ef8:	af00      	add	r7, sp, #0
 8045efa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8045efc:	bf00      	nop
 8045efe:	370c      	adds	r7, #12
 8045f00:	46bd      	mov	sp, r7
 8045f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045f06:	4770      	bx	lr

08045f08 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8045f08:	b480      	push	{r7}
 8045f0a:	b083      	sub	sp, #12
 8045f0c:	af00      	add	r7, sp, #0
 8045f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8045f10:	bf00      	nop
 8045f12:	370c      	adds	r7, #12
 8045f14:	46bd      	mov	sp, r7
 8045f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045f1a:	4770      	bx	lr

08045f1c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8045f1c:	b480      	push	{r7}
 8045f1e:	b083      	sub	sp, #12
 8045f20:	af00      	add	r7, sp, #0
 8045f22:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8045f24:	bf00      	nop
 8045f26:	370c      	adds	r7, #12
 8045f28:	46bd      	mov	sp, r7
 8045f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045f2e:	4770      	bx	lr

08045f30 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8045f30:	b5b0      	push	{r4, r5, r7, lr}
 8045f32:	b084      	sub	sp, #16
 8045f34:	af00      	add	r7, sp, #0
 8045f36:	60f8      	str	r0, [r7, #12]
 8045f38:	60b9      	str	r1, [r7, #8]
 8045f3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8045f3c:	68fb      	ldr	r3, [r7, #12]
 8045f3e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8045f42:	2b01      	cmp	r3, #1
 8045f44:	d101      	bne.n	8045f4a <HAL_LTDC_ConfigLayer+0x1a>
 8045f46:	2302      	movs	r3, #2
 8045f48:	e02c      	b.n	8045fa4 <HAL_LTDC_ConfigLayer+0x74>
 8045f4a:	68fb      	ldr	r3, [r7, #12]
 8045f4c:	2201      	movs	r2, #1
 8045f4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8045f52:	68fb      	ldr	r3, [r7, #12]
 8045f54:	2202      	movs	r2, #2
 8045f56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8045f5a:	68fa      	ldr	r2, [r7, #12]
 8045f5c:	687b      	ldr	r3, [r7, #4]
 8045f5e:	2134      	movs	r1, #52	; 0x34
 8045f60:	fb01 f303 	mul.w	r3, r1, r3
 8045f64:	4413      	add	r3, r2
 8045f66:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8045f6a:	68bb      	ldr	r3, [r7, #8]
 8045f6c:	4614      	mov	r4, r2
 8045f6e:	461d      	mov	r5, r3
 8045f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8045f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8045f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8045f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8045f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8045f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8045f7c:	682b      	ldr	r3, [r5, #0]
 8045f7e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8045f80:	687a      	ldr	r2, [r7, #4]
 8045f82:	68b9      	ldr	r1, [r7, #8]
 8045f84:	68f8      	ldr	r0, [r7, #12]
 8045f86:	f000 f8b9 	bl	80460fc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8045f8a:	68fb      	ldr	r3, [r7, #12]
 8045f8c:	681b      	ldr	r3, [r3, #0]
 8045f8e:	2201      	movs	r2, #1
 8045f90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8045f92:	68fb      	ldr	r3, [r7, #12]
 8045f94:	2201      	movs	r2, #1
 8045f96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8045f9a:	68fb      	ldr	r3, [r7, #12]
 8045f9c:	2200      	movs	r2, #0
 8045f9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8045fa2:	2300      	movs	r3, #0
}
 8045fa4:	4618      	mov	r0, r3
 8045fa6:	3710      	adds	r7, #16
 8045fa8:	46bd      	mov	sp, r7
 8045faa:	bdb0      	pop	{r4, r5, r7, pc}

08045fac <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8045fac:	b480      	push	{r7}
 8045fae:	b085      	sub	sp, #20
 8045fb0:	af00      	add	r7, sp, #0
 8045fb2:	60f8      	str	r0, [r7, #12]
 8045fb4:	60b9      	str	r1, [r7, #8]
 8045fb6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8045fb8:	68fb      	ldr	r3, [r7, #12]
 8045fba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8045fbe:	2b01      	cmp	r3, #1
 8045fc0:	d101      	bne.n	8045fc6 <HAL_LTDC_ConfigColorKeying+0x1a>
 8045fc2:	2302      	movs	r3, #2
 8045fc4:	e030      	b.n	8046028 <HAL_LTDC_ConfigColorKeying+0x7c>
 8045fc6:	68fb      	ldr	r3, [r7, #12]
 8045fc8:	2201      	movs	r2, #1
 8045fca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8045fce:	68fb      	ldr	r3, [r7, #12]
 8045fd0:	2202      	movs	r2, #2
 8045fd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8045fd6:	68fb      	ldr	r3, [r7, #12]
 8045fd8:	681b      	ldr	r3, [r3, #0]
 8045fda:	461a      	mov	r2, r3
 8045fdc:	687b      	ldr	r3, [r7, #4]
 8045fde:	01db      	lsls	r3, r3, #7
 8045fe0:	4413      	add	r3, r2
 8045fe2:	3384      	adds	r3, #132	; 0x84
 8045fe4:	68db      	ldr	r3, [r3, #12]
 8045fe6:	68fa      	ldr	r2, [r7, #12]
 8045fe8:	6812      	ldr	r2, [r2, #0]
 8045fea:	4611      	mov	r1, r2
 8045fec:	687a      	ldr	r2, [r7, #4]
 8045fee:	01d2      	lsls	r2, r2, #7
 8045ff0:	440a      	add	r2, r1
 8045ff2:	3284      	adds	r2, #132	; 0x84
 8045ff4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8045ff8:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8045ffa:	68fb      	ldr	r3, [r7, #12]
 8045ffc:	681b      	ldr	r3, [r3, #0]
 8045ffe:	461a      	mov	r2, r3
 8046000:	687b      	ldr	r3, [r7, #4]
 8046002:	01db      	lsls	r3, r3, #7
 8046004:	4413      	add	r3, r2
 8046006:	3384      	adds	r3, #132	; 0x84
 8046008:	461a      	mov	r2, r3
 804600a:	68bb      	ldr	r3, [r7, #8]
 804600c:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 804600e:	68fb      	ldr	r3, [r7, #12]
 8046010:	681b      	ldr	r3, [r3, #0]
 8046012:	2201      	movs	r2, #1
 8046014:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8046016:	68fb      	ldr	r3, [r7, #12]
 8046018:	2201      	movs	r2, #1
 804601a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 804601e:	68fb      	ldr	r3, [r7, #12]
 8046020:	2200      	movs	r2, #0
 8046022:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8046026:	2300      	movs	r3, #0
}
 8046028:	4618      	mov	r0, r3
 804602a:	3714      	adds	r7, #20
 804602c:	46bd      	mov	sp, r7
 804602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046032:	4770      	bx	lr

08046034 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8046034:	b480      	push	{r7}
 8046036:	b083      	sub	sp, #12
 8046038:	af00      	add	r7, sp, #0
 804603a:	6078      	str	r0, [r7, #4]
 804603c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 804603e:	687b      	ldr	r3, [r7, #4]
 8046040:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8046044:	2b01      	cmp	r3, #1
 8046046:	d101      	bne.n	804604c <HAL_LTDC_EnableColorKeying+0x18>
 8046048:	2302      	movs	r3, #2
 804604a:	e026      	b.n	804609a <HAL_LTDC_EnableColorKeying+0x66>
 804604c:	687b      	ldr	r3, [r7, #4]
 804604e:	2201      	movs	r2, #1
 8046050:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8046054:	687b      	ldr	r3, [r7, #4]
 8046056:	2202      	movs	r2, #2
 8046058:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 804605c:	687b      	ldr	r3, [r7, #4]
 804605e:	681b      	ldr	r3, [r3, #0]
 8046060:	461a      	mov	r2, r3
 8046062:	683b      	ldr	r3, [r7, #0]
 8046064:	01db      	lsls	r3, r3, #7
 8046066:	4413      	add	r3, r2
 8046068:	3384      	adds	r3, #132	; 0x84
 804606a:	681b      	ldr	r3, [r3, #0]
 804606c:	687a      	ldr	r2, [r7, #4]
 804606e:	6812      	ldr	r2, [r2, #0]
 8046070:	4611      	mov	r1, r2
 8046072:	683a      	ldr	r2, [r7, #0]
 8046074:	01d2      	lsls	r2, r2, #7
 8046076:	440a      	add	r2, r1
 8046078:	3284      	adds	r2, #132	; 0x84
 804607a:	f043 0302 	orr.w	r3, r3, #2
 804607e:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8046080:	687b      	ldr	r3, [r7, #4]
 8046082:	681b      	ldr	r3, [r3, #0]
 8046084:	2201      	movs	r2, #1
 8046086:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8046088:	687b      	ldr	r3, [r7, #4]
 804608a:	2201      	movs	r2, #1
 804608c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8046090:	687b      	ldr	r3, [r7, #4]
 8046092:	2200      	movs	r2, #0
 8046094:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8046098:	2300      	movs	r3, #0
}
 804609a:	4618      	mov	r0, r3
 804609c:	370c      	adds	r7, #12
 804609e:	46bd      	mov	sp, r7
 80460a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80460a4:	4770      	bx	lr
	...

080460a8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80460a8:	b480      	push	{r7}
 80460aa:	b083      	sub	sp, #12
 80460ac:	af00      	add	r7, sp, #0
 80460ae:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80460b0:	687b      	ldr	r3, [r7, #4]
 80460b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80460b6:	2b01      	cmp	r3, #1
 80460b8:	d101      	bne.n	80460be <HAL_LTDC_EnableDither+0x16>
 80460ba:	2302      	movs	r3, #2
 80460bc:	e016      	b.n	80460ec <HAL_LTDC_EnableDither+0x44>
 80460be:	687b      	ldr	r3, [r7, #4]
 80460c0:	2201      	movs	r2, #1
 80460c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80460c6:	687b      	ldr	r3, [r7, #4]
 80460c8:	2202      	movs	r2, #2
 80460ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80460ce:	4b0a      	ldr	r3, [pc, #40]	; (80460f8 <HAL_LTDC_EnableDither+0x50>)
 80460d0:	699b      	ldr	r3, [r3, #24]
 80460d2:	4a09      	ldr	r2, [pc, #36]	; (80460f8 <HAL_LTDC_EnableDither+0x50>)
 80460d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80460d8:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80460da:	687b      	ldr	r3, [r7, #4]
 80460dc:	2201      	movs	r2, #1
 80460de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80460e2:	687b      	ldr	r3, [r7, #4]
 80460e4:	2200      	movs	r2, #0
 80460e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80460ea:	2300      	movs	r3, #0
}
 80460ec:	4618      	mov	r0, r3
 80460ee:	370c      	adds	r7, #12
 80460f0:	46bd      	mov	sp, r7
 80460f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80460f6:	4770      	bx	lr
 80460f8:	40016800 	.word	0x40016800

080460fc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80460fc:	b480      	push	{r7}
 80460fe:	b089      	sub	sp, #36	; 0x24
 8046100:	af00      	add	r7, sp, #0
 8046102:	60f8      	str	r0, [r7, #12]
 8046104:	60b9      	str	r1, [r7, #8]
 8046106:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8046108:	68bb      	ldr	r3, [r7, #8]
 804610a:	685a      	ldr	r2, [r3, #4]
 804610c:	68fb      	ldr	r3, [r7, #12]
 804610e:	681b      	ldr	r3, [r3, #0]
 8046110:	68db      	ldr	r3, [r3, #12]
 8046112:	0c1b      	lsrs	r3, r3, #16
 8046114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8046118:	4413      	add	r3, r2
 804611a:	041b      	lsls	r3, r3, #16
 804611c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 804611e:	68fb      	ldr	r3, [r7, #12]
 8046120:	681b      	ldr	r3, [r3, #0]
 8046122:	461a      	mov	r2, r3
 8046124:	687b      	ldr	r3, [r7, #4]
 8046126:	01db      	lsls	r3, r3, #7
 8046128:	4413      	add	r3, r2
 804612a:	3384      	adds	r3, #132	; 0x84
 804612c:	685b      	ldr	r3, [r3, #4]
 804612e:	68fa      	ldr	r2, [r7, #12]
 8046130:	6812      	ldr	r2, [r2, #0]
 8046132:	4611      	mov	r1, r2
 8046134:	687a      	ldr	r2, [r7, #4]
 8046136:	01d2      	lsls	r2, r2, #7
 8046138:	440a      	add	r2, r1
 804613a:	3284      	adds	r2, #132	; 0x84
 804613c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8046140:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8046142:	68bb      	ldr	r3, [r7, #8]
 8046144:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8046146:	68fb      	ldr	r3, [r7, #12]
 8046148:	681b      	ldr	r3, [r3, #0]
 804614a:	68db      	ldr	r3, [r3, #12]
 804614c:	0c1b      	lsrs	r3, r3, #16
 804614e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8046152:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8046154:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8046156:	68fb      	ldr	r3, [r7, #12]
 8046158:	681b      	ldr	r3, [r3, #0]
 804615a:	4619      	mov	r1, r3
 804615c:	687b      	ldr	r3, [r7, #4]
 804615e:	01db      	lsls	r3, r3, #7
 8046160:	440b      	add	r3, r1
 8046162:	3384      	adds	r3, #132	; 0x84
 8046164:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8046166:	69fb      	ldr	r3, [r7, #28]
 8046168:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 804616a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 804616c:	68bb      	ldr	r3, [r7, #8]
 804616e:	68da      	ldr	r2, [r3, #12]
 8046170:	68fb      	ldr	r3, [r7, #12]
 8046172:	681b      	ldr	r3, [r3, #0]
 8046174:	68db      	ldr	r3, [r3, #12]
 8046176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 804617a:	4413      	add	r3, r2
 804617c:	041b      	lsls	r3, r3, #16
 804617e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8046180:	68fb      	ldr	r3, [r7, #12]
 8046182:	681b      	ldr	r3, [r3, #0]
 8046184:	461a      	mov	r2, r3
 8046186:	687b      	ldr	r3, [r7, #4]
 8046188:	01db      	lsls	r3, r3, #7
 804618a:	4413      	add	r3, r2
 804618c:	3384      	adds	r3, #132	; 0x84
 804618e:	689b      	ldr	r3, [r3, #8]
 8046190:	68fa      	ldr	r2, [r7, #12]
 8046192:	6812      	ldr	r2, [r2, #0]
 8046194:	4611      	mov	r1, r2
 8046196:	687a      	ldr	r2, [r7, #4]
 8046198:	01d2      	lsls	r2, r2, #7
 804619a:	440a      	add	r2, r1
 804619c:	3284      	adds	r2, #132	; 0x84
 804619e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80461a2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80461a4:	68bb      	ldr	r3, [r7, #8]
 80461a6:	689a      	ldr	r2, [r3, #8]
 80461a8:	68fb      	ldr	r3, [r7, #12]
 80461aa:	681b      	ldr	r3, [r3, #0]
 80461ac:	68db      	ldr	r3, [r3, #12]
 80461ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80461b2:	4413      	add	r3, r2
 80461b4:	1c5a      	adds	r2, r3, #1
 80461b6:	68fb      	ldr	r3, [r7, #12]
 80461b8:	681b      	ldr	r3, [r3, #0]
 80461ba:	4619      	mov	r1, r3
 80461bc:	687b      	ldr	r3, [r7, #4]
 80461be:	01db      	lsls	r3, r3, #7
 80461c0:	440b      	add	r3, r1
 80461c2:	3384      	adds	r3, #132	; 0x84
 80461c4:	4619      	mov	r1, r3
 80461c6:	69fb      	ldr	r3, [r7, #28]
 80461c8:	4313      	orrs	r3, r2
 80461ca:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80461cc:	68fb      	ldr	r3, [r7, #12]
 80461ce:	681b      	ldr	r3, [r3, #0]
 80461d0:	461a      	mov	r2, r3
 80461d2:	687b      	ldr	r3, [r7, #4]
 80461d4:	01db      	lsls	r3, r3, #7
 80461d6:	4413      	add	r3, r2
 80461d8:	3384      	adds	r3, #132	; 0x84
 80461da:	691b      	ldr	r3, [r3, #16]
 80461dc:	68fa      	ldr	r2, [r7, #12]
 80461de:	6812      	ldr	r2, [r2, #0]
 80461e0:	4611      	mov	r1, r2
 80461e2:	687a      	ldr	r2, [r7, #4]
 80461e4:	01d2      	lsls	r2, r2, #7
 80461e6:	440a      	add	r2, r1
 80461e8:	3284      	adds	r2, #132	; 0x84
 80461ea:	f023 0307 	bic.w	r3, r3, #7
 80461ee:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80461f0:	68fb      	ldr	r3, [r7, #12]
 80461f2:	681b      	ldr	r3, [r3, #0]
 80461f4:	461a      	mov	r2, r3
 80461f6:	687b      	ldr	r3, [r7, #4]
 80461f8:	01db      	lsls	r3, r3, #7
 80461fa:	4413      	add	r3, r2
 80461fc:	3384      	adds	r3, #132	; 0x84
 80461fe:	461a      	mov	r2, r3
 8046200:	68bb      	ldr	r3, [r7, #8]
 8046202:	691b      	ldr	r3, [r3, #16]
 8046204:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8046206:	68bb      	ldr	r3, [r7, #8]
 8046208:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 804620c:	021b      	lsls	r3, r3, #8
 804620e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8046210:	68bb      	ldr	r3, [r7, #8]
 8046212:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8046216:	041b      	lsls	r3, r3, #16
 8046218:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 804621a:	68bb      	ldr	r3, [r7, #8]
 804621c:	699b      	ldr	r3, [r3, #24]
 804621e:	061b      	lsls	r3, r3, #24
 8046220:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8046222:	68fb      	ldr	r3, [r7, #12]
 8046224:	681b      	ldr	r3, [r3, #0]
 8046226:	461a      	mov	r2, r3
 8046228:	687b      	ldr	r3, [r7, #4]
 804622a:	01db      	lsls	r3, r3, #7
 804622c:	4413      	add	r3, r2
 804622e:	3384      	adds	r3, #132	; 0x84
 8046230:	699b      	ldr	r3, [r3, #24]
 8046232:	68fb      	ldr	r3, [r7, #12]
 8046234:	681b      	ldr	r3, [r3, #0]
 8046236:	461a      	mov	r2, r3
 8046238:	687b      	ldr	r3, [r7, #4]
 804623a:	01db      	lsls	r3, r3, #7
 804623c:	4413      	add	r3, r2
 804623e:	3384      	adds	r3, #132	; 0x84
 8046240:	461a      	mov	r2, r3
 8046242:	2300      	movs	r3, #0
 8046244:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8046246:	68bb      	ldr	r3, [r7, #8]
 8046248:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804624c:	461a      	mov	r2, r3
 804624e:	69fb      	ldr	r3, [r7, #28]
 8046250:	431a      	orrs	r2, r3
 8046252:	69bb      	ldr	r3, [r7, #24]
 8046254:	431a      	orrs	r2, r3
 8046256:	68fb      	ldr	r3, [r7, #12]
 8046258:	681b      	ldr	r3, [r3, #0]
 804625a:	4619      	mov	r1, r3
 804625c:	687b      	ldr	r3, [r7, #4]
 804625e:	01db      	lsls	r3, r3, #7
 8046260:	440b      	add	r3, r1
 8046262:	3384      	adds	r3, #132	; 0x84
 8046264:	4619      	mov	r1, r3
 8046266:	697b      	ldr	r3, [r7, #20]
 8046268:	4313      	orrs	r3, r2
 804626a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 804626c:	68fb      	ldr	r3, [r7, #12]
 804626e:	681b      	ldr	r3, [r3, #0]
 8046270:	461a      	mov	r2, r3
 8046272:	687b      	ldr	r3, [r7, #4]
 8046274:	01db      	lsls	r3, r3, #7
 8046276:	4413      	add	r3, r2
 8046278:	3384      	adds	r3, #132	; 0x84
 804627a:	695b      	ldr	r3, [r3, #20]
 804627c:	68fa      	ldr	r2, [r7, #12]
 804627e:	6812      	ldr	r2, [r2, #0]
 8046280:	4611      	mov	r1, r2
 8046282:	687a      	ldr	r2, [r7, #4]
 8046284:	01d2      	lsls	r2, r2, #7
 8046286:	440a      	add	r2, r1
 8046288:	3284      	adds	r2, #132	; 0x84
 804628a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 804628e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8046290:	68fb      	ldr	r3, [r7, #12]
 8046292:	681b      	ldr	r3, [r3, #0]
 8046294:	461a      	mov	r2, r3
 8046296:	687b      	ldr	r3, [r7, #4]
 8046298:	01db      	lsls	r3, r3, #7
 804629a:	4413      	add	r3, r2
 804629c:	3384      	adds	r3, #132	; 0x84
 804629e:	461a      	mov	r2, r3
 80462a0:	68bb      	ldr	r3, [r7, #8]
 80462a2:	695b      	ldr	r3, [r3, #20]
 80462a4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80462a6:	68fb      	ldr	r3, [r7, #12]
 80462a8:	681b      	ldr	r3, [r3, #0]
 80462aa:	461a      	mov	r2, r3
 80462ac:	687b      	ldr	r3, [r7, #4]
 80462ae:	01db      	lsls	r3, r3, #7
 80462b0:	4413      	add	r3, r2
 80462b2:	3384      	adds	r3, #132	; 0x84
 80462b4:	69db      	ldr	r3, [r3, #28]
 80462b6:	68fa      	ldr	r2, [r7, #12]
 80462b8:	6812      	ldr	r2, [r2, #0]
 80462ba:	4611      	mov	r1, r2
 80462bc:	687a      	ldr	r2, [r7, #4]
 80462be:	01d2      	lsls	r2, r2, #7
 80462c0:	440a      	add	r2, r1
 80462c2:	3284      	adds	r2, #132	; 0x84
 80462c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80462c8:	f023 0307 	bic.w	r3, r3, #7
 80462cc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80462ce:	68bb      	ldr	r3, [r7, #8]
 80462d0:	69da      	ldr	r2, [r3, #28]
 80462d2:	68bb      	ldr	r3, [r7, #8]
 80462d4:	6a1b      	ldr	r3, [r3, #32]
 80462d6:	68f9      	ldr	r1, [r7, #12]
 80462d8:	6809      	ldr	r1, [r1, #0]
 80462da:	4608      	mov	r0, r1
 80462dc:	6879      	ldr	r1, [r7, #4]
 80462de:	01c9      	lsls	r1, r1, #7
 80462e0:	4401      	add	r1, r0
 80462e2:	3184      	adds	r1, #132	; 0x84
 80462e4:	4313      	orrs	r3, r2
 80462e6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80462e8:	68fb      	ldr	r3, [r7, #12]
 80462ea:	681b      	ldr	r3, [r3, #0]
 80462ec:	461a      	mov	r2, r3
 80462ee:	687b      	ldr	r3, [r7, #4]
 80462f0:	01db      	lsls	r3, r3, #7
 80462f2:	4413      	add	r3, r2
 80462f4:	3384      	adds	r3, #132	; 0x84
 80462f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80462f8:	68fb      	ldr	r3, [r7, #12]
 80462fa:	681b      	ldr	r3, [r3, #0]
 80462fc:	461a      	mov	r2, r3
 80462fe:	687b      	ldr	r3, [r7, #4]
 8046300:	01db      	lsls	r3, r3, #7
 8046302:	4413      	add	r3, r2
 8046304:	3384      	adds	r3, #132	; 0x84
 8046306:	461a      	mov	r2, r3
 8046308:	2300      	movs	r3, #0
 804630a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 804630c:	68fb      	ldr	r3, [r7, #12]
 804630e:	681b      	ldr	r3, [r3, #0]
 8046310:	461a      	mov	r2, r3
 8046312:	687b      	ldr	r3, [r7, #4]
 8046314:	01db      	lsls	r3, r3, #7
 8046316:	4413      	add	r3, r2
 8046318:	3384      	adds	r3, #132	; 0x84
 804631a:	461a      	mov	r2, r3
 804631c:	68bb      	ldr	r3, [r7, #8]
 804631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046320:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8046322:	68bb      	ldr	r3, [r7, #8]
 8046324:	691b      	ldr	r3, [r3, #16]
 8046326:	2b00      	cmp	r3, #0
 8046328:	d102      	bne.n	8046330 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 804632a:	2304      	movs	r3, #4
 804632c:	61fb      	str	r3, [r7, #28]
 804632e:	e01b      	b.n	8046368 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8046330:	68bb      	ldr	r3, [r7, #8]
 8046332:	691b      	ldr	r3, [r3, #16]
 8046334:	2b01      	cmp	r3, #1
 8046336:	d102      	bne.n	804633e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8046338:	2303      	movs	r3, #3
 804633a:	61fb      	str	r3, [r7, #28]
 804633c:	e014      	b.n	8046368 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 804633e:	68bb      	ldr	r3, [r7, #8]
 8046340:	691b      	ldr	r3, [r3, #16]
 8046342:	2b04      	cmp	r3, #4
 8046344:	d00b      	beq.n	804635e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8046346:	68bb      	ldr	r3, [r7, #8]
 8046348:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 804634a:	2b02      	cmp	r3, #2
 804634c:	d007      	beq.n	804635e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 804634e:	68bb      	ldr	r3, [r7, #8]
 8046350:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8046352:	2b03      	cmp	r3, #3
 8046354:	d003      	beq.n	804635e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8046356:	68bb      	ldr	r3, [r7, #8]
 8046358:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 804635a:	2b07      	cmp	r3, #7
 804635c:	d102      	bne.n	8046364 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 804635e:	2302      	movs	r3, #2
 8046360:	61fb      	str	r3, [r7, #28]
 8046362:	e001      	b.n	8046368 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8046364:	2301      	movs	r3, #1
 8046366:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8046368:	68fb      	ldr	r3, [r7, #12]
 804636a:	681b      	ldr	r3, [r3, #0]
 804636c:	461a      	mov	r2, r3
 804636e:	687b      	ldr	r3, [r7, #4]
 8046370:	01db      	lsls	r3, r3, #7
 8046372:	4413      	add	r3, r2
 8046374:	3384      	adds	r3, #132	; 0x84
 8046376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046378:	68fa      	ldr	r2, [r7, #12]
 804637a:	6812      	ldr	r2, [r2, #0]
 804637c:	4611      	mov	r1, r2
 804637e:	687a      	ldr	r2, [r7, #4]
 8046380:	01d2      	lsls	r2, r2, #7
 8046382:	440a      	add	r2, r1
 8046384:	3284      	adds	r2, #132	; 0x84
 8046386:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 804638a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 804638c:	68bb      	ldr	r3, [r7, #8]
 804638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046390:	69fa      	ldr	r2, [r7, #28]
 8046392:	fb02 f303 	mul.w	r3, r2, r3
 8046396:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8046398:	68bb      	ldr	r3, [r7, #8]
 804639a:	6859      	ldr	r1, [r3, #4]
 804639c:	68bb      	ldr	r3, [r7, #8]
 804639e:	681b      	ldr	r3, [r3, #0]
 80463a0:	1acb      	subs	r3, r1, r3
 80463a2:	69f9      	ldr	r1, [r7, #28]
 80463a4:	fb01 f303 	mul.w	r3, r1, r3
 80463a8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80463aa:	68f9      	ldr	r1, [r7, #12]
 80463ac:	6809      	ldr	r1, [r1, #0]
 80463ae:	4608      	mov	r0, r1
 80463b0:	6879      	ldr	r1, [r7, #4]
 80463b2:	01c9      	lsls	r1, r1, #7
 80463b4:	4401      	add	r1, r0
 80463b6:	3184      	adds	r1, #132	; 0x84
 80463b8:	4313      	orrs	r3, r2
 80463ba:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80463bc:	68fb      	ldr	r3, [r7, #12]
 80463be:	681b      	ldr	r3, [r3, #0]
 80463c0:	461a      	mov	r2, r3
 80463c2:	687b      	ldr	r3, [r7, #4]
 80463c4:	01db      	lsls	r3, r3, #7
 80463c6:	4413      	add	r3, r2
 80463c8:	3384      	adds	r3, #132	; 0x84
 80463ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80463cc:	68fa      	ldr	r2, [r7, #12]
 80463ce:	6812      	ldr	r2, [r2, #0]
 80463d0:	4611      	mov	r1, r2
 80463d2:	687a      	ldr	r2, [r7, #4]
 80463d4:	01d2      	lsls	r2, r2, #7
 80463d6:	440a      	add	r2, r1
 80463d8:	3284      	adds	r2, #132	; 0x84
 80463da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80463de:	f023 0307 	bic.w	r3, r3, #7
 80463e2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80463e4:	68fb      	ldr	r3, [r7, #12]
 80463e6:	681b      	ldr	r3, [r3, #0]
 80463e8:	461a      	mov	r2, r3
 80463ea:	687b      	ldr	r3, [r7, #4]
 80463ec:	01db      	lsls	r3, r3, #7
 80463ee:	4413      	add	r3, r2
 80463f0:	3384      	adds	r3, #132	; 0x84
 80463f2:	461a      	mov	r2, r3
 80463f4:	68bb      	ldr	r3, [r7, #8]
 80463f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80463f8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80463fa:	68fb      	ldr	r3, [r7, #12]
 80463fc:	681b      	ldr	r3, [r3, #0]
 80463fe:	461a      	mov	r2, r3
 8046400:	687b      	ldr	r3, [r7, #4]
 8046402:	01db      	lsls	r3, r3, #7
 8046404:	4413      	add	r3, r2
 8046406:	3384      	adds	r3, #132	; 0x84
 8046408:	681b      	ldr	r3, [r3, #0]
 804640a:	68fa      	ldr	r2, [r7, #12]
 804640c:	6812      	ldr	r2, [r2, #0]
 804640e:	4611      	mov	r1, r2
 8046410:	687a      	ldr	r2, [r7, #4]
 8046412:	01d2      	lsls	r2, r2, #7
 8046414:	440a      	add	r2, r1
 8046416:	3284      	adds	r2, #132	; 0x84
 8046418:	f043 0301 	orr.w	r3, r3, #1
 804641c:	6013      	str	r3, [r2, #0]
}
 804641e:	bf00      	nop
 8046420:	3724      	adds	r7, #36	; 0x24
 8046422:	46bd      	mov	sp, r7
 8046424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046428:	4770      	bx	lr
	...

0804642c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 804642c:	b580      	push	{r7, lr}
 804642e:	b086      	sub	sp, #24
 8046430:	af00      	add	r7, sp, #0
 8046432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8046434:	687b      	ldr	r3, [r7, #4]
 8046436:	2b00      	cmp	r3, #0
 8046438:	d101      	bne.n	804643e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 804643a:	2301      	movs	r3, #1
 804643c:	e267      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 804643e:	687b      	ldr	r3, [r7, #4]
 8046440:	681b      	ldr	r3, [r3, #0]
 8046442:	f003 0301 	and.w	r3, r3, #1
 8046446:	2b00      	cmp	r3, #0
 8046448:	d075      	beq.n	8046536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 804644a:	4b88      	ldr	r3, [pc, #544]	; (804666c <HAL_RCC_OscConfig+0x240>)
 804644c:	689b      	ldr	r3, [r3, #8]
 804644e:	f003 030c 	and.w	r3, r3, #12
 8046452:	2b04      	cmp	r3, #4
 8046454:	d00c      	beq.n	8046470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8046456:	4b85      	ldr	r3, [pc, #532]	; (804666c <HAL_RCC_OscConfig+0x240>)
 8046458:	689b      	ldr	r3, [r3, #8]
 804645a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 804645e:	2b08      	cmp	r3, #8
 8046460:	d112      	bne.n	8046488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8046462:	4b82      	ldr	r3, [pc, #520]	; (804666c <HAL_RCC_OscConfig+0x240>)
 8046464:	685b      	ldr	r3, [r3, #4]
 8046466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804646a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 804646e:	d10b      	bne.n	8046488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8046470:	4b7e      	ldr	r3, [pc, #504]	; (804666c <HAL_RCC_OscConfig+0x240>)
 8046472:	681b      	ldr	r3, [r3, #0]
 8046474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046478:	2b00      	cmp	r3, #0
 804647a:	d05b      	beq.n	8046534 <HAL_RCC_OscConfig+0x108>
 804647c:	687b      	ldr	r3, [r7, #4]
 804647e:	685b      	ldr	r3, [r3, #4]
 8046480:	2b00      	cmp	r3, #0
 8046482:	d157      	bne.n	8046534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8046484:	2301      	movs	r3, #1
 8046486:	e242      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8046488:	687b      	ldr	r3, [r7, #4]
 804648a:	685b      	ldr	r3, [r3, #4]
 804648c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8046490:	d106      	bne.n	80464a0 <HAL_RCC_OscConfig+0x74>
 8046492:	4b76      	ldr	r3, [pc, #472]	; (804666c <HAL_RCC_OscConfig+0x240>)
 8046494:	681b      	ldr	r3, [r3, #0]
 8046496:	4a75      	ldr	r2, [pc, #468]	; (804666c <HAL_RCC_OscConfig+0x240>)
 8046498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804649c:	6013      	str	r3, [r2, #0]
 804649e:	e01d      	b.n	80464dc <HAL_RCC_OscConfig+0xb0>
 80464a0:	687b      	ldr	r3, [r7, #4]
 80464a2:	685b      	ldr	r3, [r3, #4]
 80464a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80464a8:	d10c      	bne.n	80464c4 <HAL_RCC_OscConfig+0x98>
 80464aa:	4b70      	ldr	r3, [pc, #448]	; (804666c <HAL_RCC_OscConfig+0x240>)
 80464ac:	681b      	ldr	r3, [r3, #0]
 80464ae:	4a6f      	ldr	r2, [pc, #444]	; (804666c <HAL_RCC_OscConfig+0x240>)
 80464b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80464b4:	6013      	str	r3, [r2, #0]
 80464b6:	4b6d      	ldr	r3, [pc, #436]	; (804666c <HAL_RCC_OscConfig+0x240>)
 80464b8:	681b      	ldr	r3, [r3, #0]
 80464ba:	4a6c      	ldr	r2, [pc, #432]	; (804666c <HAL_RCC_OscConfig+0x240>)
 80464bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80464c0:	6013      	str	r3, [r2, #0]
 80464c2:	e00b      	b.n	80464dc <HAL_RCC_OscConfig+0xb0>
 80464c4:	4b69      	ldr	r3, [pc, #420]	; (804666c <HAL_RCC_OscConfig+0x240>)
 80464c6:	681b      	ldr	r3, [r3, #0]
 80464c8:	4a68      	ldr	r2, [pc, #416]	; (804666c <HAL_RCC_OscConfig+0x240>)
 80464ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80464ce:	6013      	str	r3, [r2, #0]
 80464d0:	4b66      	ldr	r3, [pc, #408]	; (804666c <HAL_RCC_OscConfig+0x240>)
 80464d2:	681b      	ldr	r3, [r3, #0]
 80464d4:	4a65      	ldr	r2, [pc, #404]	; (804666c <HAL_RCC_OscConfig+0x240>)
 80464d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80464da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80464dc:	687b      	ldr	r3, [r7, #4]
 80464de:	685b      	ldr	r3, [r3, #4]
 80464e0:	2b00      	cmp	r3, #0
 80464e2:	d013      	beq.n	804650c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80464e4:	f7fc fc56 	bl	8042d94 <HAL_GetTick>
 80464e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80464ea:	e008      	b.n	80464fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80464ec:	f7fc fc52 	bl	8042d94 <HAL_GetTick>
 80464f0:	4602      	mov	r2, r0
 80464f2:	693b      	ldr	r3, [r7, #16]
 80464f4:	1ad3      	subs	r3, r2, r3
 80464f6:	2b64      	cmp	r3, #100	; 0x64
 80464f8:	d901      	bls.n	80464fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80464fa:	2303      	movs	r3, #3
 80464fc:	e207      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80464fe:	4b5b      	ldr	r3, [pc, #364]	; (804666c <HAL_RCC_OscConfig+0x240>)
 8046500:	681b      	ldr	r3, [r3, #0]
 8046502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046506:	2b00      	cmp	r3, #0
 8046508:	d0f0      	beq.n	80464ec <HAL_RCC_OscConfig+0xc0>
 804650a:	e014      	b.n	8046536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 804650c:	f7fc fc42 	bl	8042d94 <HAL_GetTick>
 8046510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8046512:	e008      	b.n	8046526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8046514:	f7fc fc3e 	bl	8042d94 <HAL_GetTick>
 8046518:	4602      	mov	r2, r0
 804651a:	693b      	ldr	r3, [r7, #16]
 804651c:	1ad3      	subs	r3, r2, r3
 804651e:	2b64      	cmp	r3, #100	; 0x64
 8046520:	d901      	bls.n	8046526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8046522:	2303      	movs	r3, #3
 8046524:	e1f3      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8046526:	4b51      	ldr	r3, [pc, #324]	; (804666c <HAL_RCC_OscConfig+0x240>)
 8046528:	681b      	ldr	r3, [r3, #0]
 804652a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804652e:	2b00      	cmp	r3, #0
 8046530:	d1f0      	bne.n	8046514 <HAL_RCC_OscConfig+0xe8>
 8046532:	e000      	b.n	8046536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8046534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8046536:	687b      	ldr	r3, [r7, #4]
 8046538:	681b      	ldr	r3, [r3, #0]
 804653a:	f003 0302 	and.w	r3, r3, #2
 804653e:	2b00      	cmp	r3, #0
 8046540:	d063      	beq.n	804660a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8046542:	4b4a      	ldr	r3, [pc, #296]	; (804666c <HAL_RCC_OscConfig+0x240>)
 8046544:	689b      	ldr	r3, [r3, #8]
 8046546:	f003 030c 	and.w	r3, r3, #12
 804654a:	2b00      	cmp	r3, #0
 804654c:	d00b      	beq.n	8046566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 804654e:	4b47      	ldr	r3, [pc, #284]	; (804666c <HAL_RCC_OscConfig+0x240>)
 8046550:	689b      	ldr	r3, [r3, #8]
 8046552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8046556:	2b08      	cmp	r3, #8
 8046558:	d11c      	bne.n	8046594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 804655a:	4b44      	ldr	r3, [pc, #272]	; (804666c <HAL_RCC_OscConfig+0x240>)
 804655c:	685b      	ldr	r3, [r3, #4]
 804655e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8046562:	2b00      	cmp	r3, #0
 8046564:	d116      	bne.n	8046594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8046566:	4b41      	ldr	r3, [pc, #260]	; (804666c <HAL_RCC_OscConfig+0x240>)
 8046568:	681b      	ldr	r3, [r3, #0]
 804656a:	f003 0302 	and.w	r3, r3, #2
 804656e:	2b00      	cmp	r3, #0
 8046570:	d005      	beq.n	804657e <HAL_RCC_OscConfig+0x152>
 8046572:	687b      	ldr	r3, [r7, #4]
 8046574:	68db      	ldr	r3, [r3, #12]
 8046576:	2b01      	cmp	r3, #1
 8046578:	d001      	beq.n	804657e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 804657a:	2301      	movs	r3, #1
 804657c:	e1c7      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804657e:	4b3b      	ldr	r3, [pc, #236]	; (804666c <HAL_RCC_OscConfig+0x240>)
 8046580:	681b      	ldr	r3, [r3, #0]
 8046582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8046586:	687b      	ldr	r3, [r7, #4]
 8046588:	691b      	ldr	r3, [r3, #16]
 804658a:	00db      	lsls	r3, r3, #3
 804658c:	4937      	ldr	r1, [pc, #220]	; (804666c <HAL_RCC_OscConfig+0x240>)
 804658e:	4313      	orrs	r3, r2
 8046590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8046592:	e03a      	b.n	804660a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8046594:	687b      	ldr	r3, [r7, #4]
 8046596:	68db      	ldr	r3, [r3, #12]
 8046598:	2b00      	cmp	r3, #0
 804659a:	d020      	beq.n	80465de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 804659c:	4b34      	ldr	r3, [pc, #208]	; (8046670 <HAL_RCC_OscConfig+0x244>)
 804659e:	2201      	movs	r2, #1
 80465a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80465a2:	f7fc fbf7 	bl	8042d94 <HAL_GetTick>
 80465a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80465a8:	e008      	b.n	80465bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80465aa:	f7fc fbf3 	bl	8042d94 <HAL_GetTick>
 80465ae:	4602      	mov	r2, r0
 80465b0:	693b      	ldr	r3, [r7, #16]
 80465b2:	1ad3      	subs	r3, r2, r3
 80465b4:	2b02      	cmp	r3, #2
 80465b6:	d901      	bls.n	80465bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80465b8:	2303      	movs	r3, #3
 80465ba:	e1a8      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80465bc:	4b2b      	ldr	r3, [pc, #172]	; (804666c <HAL_RCC_OscConfig+0x240>)
 80465be:	681b      	ldr	r3, [r3, #0]
 80465c0:	f003 0302 	and.w	r3, r3, #2
 80465c4:	2b00      	cmp	r3, #0
 80465c6:	d0f0      	beq.n	80465aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80465c8:	4b28      	ldr	r3, [pc, #160]	; (804666c <HAL_RCC_OscConfig+0x240>)
 80465ca:	681b      	ldr	r3, [r3, #0]
 80465cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80465d0:	687b      	ldr	r3, [r7, #4]
 80465d2:	691b      	ldr	r3, [r3, #16]
 80465d4:	00db      	lsls	r3, r3, #3
 80465d6:	4925      	ldr	r1, [pc, #148]	; (804666c <HAL_RCC_OscConfig+0x240>)
 80465d8:	4313      	orrs	r3, r2
 80465da:	600b      	str	r3, [r1, #0]
 80465dc:	e015      	b.n	804660a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80465de:	4b24      	ldr	r3, [pc, #144]	; (8046670 <HAL_RCC_OscConfig+0x244>)
 80465e0:	2200      	movs	r2, #0
 80465e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80465e4:	f7fc fbd6 	bl	8042d94 <HAL_GetTick>
 80465e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80465ea:	e008      	b.n	80465fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80465ec:	f7fc fbd2 	bl	8042d94 <HAL_GetTick>
 80465f0:	4602      	mov	r2, r0
 80465f2:	693b      	ldr	r3, [r7, #16]
 80465f4:	1ad3      	subs	r3, r2, r3
 80465f6:	2b02      	cmp	r3, #2
 80465f8:	d901      	bls.n	80465fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80465fa:	2303      	movs	r3, #3
 80465fc:	e187      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80465fe:	4b1b      	ldr	r3, [pc, #108]	; (804666c <HAL_RCC_OscConfig+0x240>)
 8046600:	681b      	ldr	r3, [r3, #0]
 8046602:	f003 0302 	and.w	r3, r3, #2
 8046606:	2b00      	cmp	r3, #0
 8046608:	d1f0      	bne.n	80465ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804660a:	687b      	ldr	r3, [r7, #4]
 804660c:	681b      	ldr	r3, [r3, #0]
 804660e:	f003 0308 	and.w	r3, r3, #8
 8046612:	2b00      	cmp	r3, #0
 8046614:	d036      	beq.n	8046684 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8046616:	687b      	ldr	r3, [r7, #4]
 8046618:	695b      	ldr	r3, [r3, #20]
 804661a:	2b00      	cmp	r3, #0
 804661c:	d016      	beq.n	804664c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 804661e:	4b15      	ldr	r3, [pc, #84]	; (8046674 <HAL_RCC_OscConfig+0x248>)
 8046620:	2201      	movs	r2, #1
 8046622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8046624:	f7fc fbb6 	bl	8042d94 <HAL_GetTick>
 8046628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 804662a:	e008      	b.n	804663e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 804662c:	f7fc fbb2 	bl	8042d94 <HAL_GetTick>
 8046630:	4602      	mov	r2, r0
 8046632:	693b      	ldr	r3, [r7, #16]
 8046634:	1ad3      	subs	r3, r2, r3
 8046636:	2b02      	cmp	r3, #2
 8046638:	d901      	bls.n	804663e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 804663a:	2303      	movs	r3, #3
 804663c:	e167      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 804663e:	4b0b      	ldr	r3, [pc, #44]	; (804666c <HAL_RCC_OscConfig+0x240>)
 8046640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046642:	f003 0302 	and.w	r3, r3, #2
 8046646:	2b00      	cmp	r3, #0
 8046648:	d0f0      	beq.n	804662c <HAL_RCC_OscConfig+0x200>
 804664a:	e01b      	b.n	8046684 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 804664c:	4b09      	ldr	r3, [pc, #36]	; (8046674 <HAL_RCC_OscConfig+0x248>)
 804664e:	2200      	movs	r2, #0
 8046650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8046652:	f7fc fb9f 	bl	8042d94 <HAL_GetTick>
 8046656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8046658:	e00e      	b.n	8046678 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 804665a:	f7fc fb9b 	bl	8042d94 <HAL_GetTick>
 804665e:	4602      	mov	r2, r0
 8046660:	693b      	ldr	r3, [r7, #16]
 8046662:	1ad3      	subs	r3, r2, r3
 8046664:	2b02      	cmp	r3, #2
 8046666:	d907      	bls.n	8046678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8046668:	2303      	movs	r3, #3
 804666a:	e150      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
 804666c:	40023800 	.word	0x40023800
 8046670:	42470000 	.word	0x42470000
 8046674:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8046678:	4b88      	ldr	r3, [pc, #544]	; (804689c <HAL_RCC_OscConfig+0x470>)
 804667a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804667c:	f003 0302 	and.w	r3, r3, #2
 8046680:	2b00      	cmp	r3, #0
 8046682:	d1ea      	bne.n	804665a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8046684:	687b      	ldr	r3, [r7, #4]
 8046686:	681b      	ldr	r3, [r3, #0]
 8046688:	f003 0304 	and.w	r3, r3, #4
 804668c:	2b00      	cmp	r3, #0
 804668e:	f000 8097 	beq.w	80467c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8046692:	2300      	movs	r3, #0
 8046694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8046696:	4b81      	ldr	r3, [pc, #516]	; (804689c <HAL_RCC_OscConfig+0x470>)
 8046698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804669a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804669e:	2b00      	cmp	r3, #0
 80466a0:	d10f      	bne.n	80466c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80466a2:	2300      	movs	r3, #0
 80466a4:	60bb      	str	r3, [r7, #8]
 80466a6:	4b7d      	ldr	r3, [pc, #500]	; (804689c <HAL_RCC_OscConfig+0x470>)
 80466a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80466aa:	4a7c      	ldr	r2, [pc, #496]	; (804689c <HAL_RCC_OscConfig+0x470>)
 80466ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80466b0:	6413      	str	r3, [r2, #64]	; 0x40
 80466b2:	4b7a      	ldr	r3, [pc, #488]	; (804689c <HAL_RCC_OscConfig+0x470>)
 80466b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80466b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80466ba:	60bb      	str	r3, [r7, #8]
 80466bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80466be:	2301      	movs	r3, #1
 80466c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80466c2:	4b77      	ldr	r3, [pc, #476]	; (80468a0 <HAL_RCC_OscConfig+0x474>)
 80466c4:	681b      	ldr	r3, [r3, #0]
 80466c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80466ca:	2b00      	cmp	r3, #0
 80466cc:	d118      	bne.n	8046700 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80466ce:	4b74      	ldr	r3, [pc, #464]	; (80468a0 <HAL_RCC_OscConfig+0x474>)
 80466d0:	681b      	ldr	r3, [r3, #0]
 80466d2:	4a73      	ldr	r2, [pc, #460]	; (80468a0 <HAL_RCC_OscConfig+0x474>)
 80466d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80466d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80466da:	f7fc fb5b 	bl	8042d94 <HAL_GetTick>
 80466de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80466e0:	e008      	b.n	80466f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80466e2:	f7fc fb57 	bl	8042d94 <HAL_GetTick>
 80466e6:	4602      	mov	r2, r0
 80466e8:	693b      	ldr	r3, [r7, #16]
 80466ea:	1ad3      	subs	r3, r2, r3
 80466ec:	2b02      	cmp	r3, #2
 80466ee:	d901      	bls.n	80466f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80466f0:	2303      	movs	r3, #3
 80466f2:	e10c      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80466f4:	4b6a      	ldr	r3, [pc, #424]	; (80468a0 <HAL_RCC_OscConfig+0x474>)
 80466f6:	681b      	ldr	r3, [r3, #0]
 80466f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80466fc:	2b00      	cmp	r3, #0
 80466fe:	d0f0      	beq.n	80466e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8046700:	687b      	ldr	r3, [r7, #4]
 8046702:	689b      	ldr	r3, [r3, #8]
 8046704:	2b01      	cmp	r3, #1
 8046706:	d106      	bne.n	8046716 <HAL_RCC_OscConfig+0x2ea>
 8046708:	4b64      	ldr	r3, [pc, #400]	; (804689c <HAL_RCC_OscConfig+0x470>)
 804670a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804670c:	4a63      	ldr	r2, [pc, #396]	; (804689c <HAL_RCC_OscConfig+0x470>)
 804670e:	f043 0301 	orr.w	r3, r3, #1
 8046712:	6713      	str	r3, [r2, #112]	; 0x70
 8046714:	e01c      	b.n	8046750 <HAL_RCC_OscConfig+0x324>
 8046716:	687b      	ldr	r3, [r7, #4]
 8046718:	689b      	ldr	r3, [r3, #8]
 804671a:	2b05      	cmp	r3, #5
 804671c:	d10c      	bne.n	8046738 <HAL_RCC_OscConfig+0x30c>
 804671e:	4b5f      	ldr	r3, [pc, #380]	; (804689c <HAL_RCC_OscConfig+0x470>)
 8046720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046722:	4a5e      	ldr	r2, [pc, #376]	; (804689c <HAL_RCC_OscConfig+0x470>)
 8046724:	f043 0304 	orr.w	r3, r3, #4
 8046728:	6713      	str	r3, [r2, #112]	; 0x70
 804672a:	4b5c      	ldr	r3, [pc, #368]	; (804689c <HAL_RCC_OscConfig+0x470>)
 804672c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804672e:	4a5b      	ldr	r2, [pc, #364]	; (804689c <HAL_RCC_OscConfig+0x470>)
 8046730:	f043 0301 	orr.w	r3, r3, #1
 8046734:	6713      	str	r3, [r2, #112]	; 0x70
 8046736:	e00b      	b.n	8046750 <HAL_RCC_OscConfig+0x324>
 8046738:	4b58      	ldr	r3, [pc, #352]	; (804689c <HAL_RCC_OscConfig+0x470>)
 804673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804673c:	4a57      	ldr	r2, [pc, #348]	; (804689c <HAL_RCC_OscConfig+0x470>)
 804673e:	f023 0301 	bic.w	r3, r3, #1
 8046742:	6713      	str	r3, [r2, #112]	; 0x70
 8046744:	4b55      	ldr	r3, [pc, #340]	; (804689c <HAL_RCC_OscConfig+0x470>)
 8046746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046748:	4a54      	ldr	r2, [pc, #336]	; (804689c <HAL_RCC_OscConfig+0x470>)
 804674a:	f023 0304 	bic.w	r3, r3, #4
 804674e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8046750:	687b      	ldr	r3, [r7, #4]
 8046752:	689b      	ldr	r3, [r3, #8]
 8046754:	2b00      	cmp	r3, #0
 8046756:	d015      	beq.n	8046784 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8046758:	f7fc fb1c 	bl	8042d94 <HAL_GetTick>
 804675c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804675e:	e00a      	b.n	8046776 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8046760:	f7fc fb18 	bl	8042d94 <HAL_GetTick>
 8046764:	4602      	mov	r2, r0
 8046766:	693b      	ldr	r3, [r7, #16]
 8046768:	1ad3      	subs	r3, r2, r3
 804676a:	f241 3288 	movw	r2, #5000	; 0x1388
 804676e:	4293      	cmp	r3, r2
 8046770:	d901      	bls.n	8046776 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8046772:	2303      	movs	r3, #3
 8046774:	e0cb      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8046776:	4b49      	ldr	r3, [pc, #292]	; (804689c <HAL_RCC_OscConfig+0x470>)
 8046778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804677a:	f003 0302 	and.w	r3, r3, #2
 804677e:	2b00      	cmp	r3, #0
 8046780:	d0ee      	beq.n	8046760 <HAL_RCC_OscConfig+0x334>
 8046782:	e014      	b.n	80467ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8046784:	f7fc fb06 	bl	8042d94 <HAL_GetTick>
 8046788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 804678a:	e00a      	b.n	80467a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 804678c:	f7fc fb02 	bl	8042d94 <HAL_GetTick>
 8046790:	4602      	mov	r2, r0
 8046792:	693b      	ldr	r3, [r7, #16]
 8046794:	1ad3      	subs	r3, r2, r3
 8046796:	f241 3288 	movw	r2, #5000	; 0x1388
 804679a:	4293      	cmp	r3, r2
 804679c:	d901      	bls.n	80467a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 804679e:	2303      	movs	r3, #3
 80467a0:	e0b5      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80467a2:	4b3e      	ldr	r3, [pc, #248]	; (804689c <HAL_RCC_OscConfig+0x470>)
 80467a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80467a6:	f003 0302 	and.w	r3, r3, #2
 80467aa:	2b00      	cmp	r3, #0
 80467ac:	d1ee      	bne.n	804678c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80467ae:	7dfb      	ldrb	r3, [r7, #23]
 80467b0:	2b01      	cmp	r3, #1
 80467b2:	d105      	bne.n	80467c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80467b4:	4b39      	ldr	r3, [pc, #228]	; (804689c <HAL_RCC_OscConfig+0x470>)
 80467b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80467b8:	4a38      	ldr	r2, [pc, #224]	; (804689c <HAL_RCC_OscConfig+0x470>)
 80467ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80467be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80467c0:	687b      	ldr	r3, [r7, #4]
 80467c2:	699b      	ldr	r3, [r3, #24]
 80467c4:	2b00      	cmp	r3, #0
 80467c6:	f000 80a1 	beq.w	804690c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80467ca:	4b34      	ldr	r3, [pc, #208]	; (804689c <HAL_RCC_OscConfig+0x470>)
 80467cc:	689b      	ldr	r3, [r3, #8]
 80467ce:	f003 030c 	and.w	r3, r3, #12
 80467d2:	2b08      	cmp	r3, #8
 80467d4:	d05c      	beq.n	8046890 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80467d6:	687b      	ldr	r3, [r7, #4]
 80467d8:	699b      	ldr	r3, [r3, #24]
 80467da:	2b02      	cmp	r3, #2
 80467dc:	d141      	bne.n	8046862 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80467de:	4b31      	ldr	r3, [pc, #196]	; (80468a4 <HAL_RCC_OscConfig+0x478>)
 80467e0:	2200      	movs	r2, #0
 80467e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80467e4:	f7fc fad6 	bl	8042d94 <HAL_GetTick>
 80467e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80467ea:	e008      	b.n	80467fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80467ec:	f7fc fad2 	bl	8042d94 <HAL_GetTick>
 80467f0:	4602      	mov	r2, r0
 80467f2:	693b      	ldr	r3, [r7, #16]
 80467f4:	1ad3      	subs	r3, r2, r3
 80467f6:	2b02      	cmp	r3, #2
 80467f8:	d901      	bls.n	80467fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80467fa:	2303      	movs	r3, #3
 80467fc:	e087      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80467fe:	4b27      	ldr	r3, [pc, #156]	; (804689c <HAL_RCC_OscConfig+0x470>)
 8046800:	681b      	ldr	r3, [r3, #0]
 8046802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8046806:	2b00      	cmp	r3, #0
 8046808:	d1f0      	bne.n	80467ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 804680a:	687b      	ldr	r3, [r7, #4]
 804680c:	69da      	ldr	r2, [r3, #28]
 804680e:	687b      	ldr	r3, [r7, #4]
 8046810:	6a1b      	ldr	r3, [r3, #32]
 8046812:	431a      	orrs	r2, r3
 8046814:	687b      	ldr	r3, [r7, #4]
 8046816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046818:	019b      	lsls	r3, r3, #6
 804681a:	431a      	orrs	r2, r3
 804681c:	687b      	ldr	r3, [r7, #4]
 804681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046820:	085b      	lsrs	r3, r3, #1
 8046822:	3b01      	subs	r3, #1
 8046824:	041b      	lsls	r3, r3, #16
 8046826:	431a      	orrs	r2, r3
 8046828:	687b      	ldr	r3, [r7, #4]
 804682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804682c:	061b      	lsls	r3, r3, #24
 804682e:	491b      	ldr	r1, [pc, #108]	; (804689c <HAL_RCC_OscConfig+0x470>)
 8046830:	4313      	orrs	r3, r2
 8046832:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8046834:	4b1b      	ldr	r3, [pc, #108]	; (80468a4 <HAL_RCC_OscConfig+0x478>)
 8046836:	2201      	movs	r2, #1
 8046838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 804683a:	f7fc faab 	bl	8042d94 <HAL_GetTick>
 804683e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8046840:	e008      	b.n	8046854 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8046842:	f7fc faa7 	bl	8042d94 <HAL_GetTick>
 8046846:	4602      	mov	r2, r0
 8046848:	693b      	ldr	r3, [r7, #16]
 804684a:	1ad3      	subs	r3, r2, r3
 804684c:	2b02      	cmp	r3, #2
 804684e:	d901      	bls.n	8046854 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8046850:	2303      	movs	r3, #3
 8046852:	e05c      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8046854:	4b11      	ldr	r3, [pc, #68]	; (804689c <HAL_RCC_OscConfig+0x470>)
 8046856:	681b      	ldr	r3, [r3, #0]
 8046858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804685c:	2b00      	cmp	r3, #0
 804685e:	d0f0      	beq.n	8046842 <HAL_RCC_OscConfig+0x416>
 8046860:	e054      	b.n	804690c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8046862:	4b10      	ldr	r3, [pc, #64]	; (80468a4 <HAL_RCC_OscConfig+0x478>)
 8046864:	2200      	movs	r2, #0
 8046866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046868:	f7fc fa94 	bl	8042d94 <HAL_GetTick>
 804686c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804686e:	e008      	b.n	8046882 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8046870:	f7fc fa90 	bl	8042d94 <HAL_GetTick>
 8046874:	4602      	mov	r2, r0
 8046876:	693b      	ldr	r3, [r7, #16]
 8046878:	1ad3      	subs	r3, r2, r3
 804687a:	2b02      	cmp	r3, #2
 804687c:	d901      	bls.n	8046882 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 804687e:	2303      	movs	r3, #3
 8046880:	e045      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8046882:	4b06      	ldr	r3, [pc, #24]	; (804689c <HAL_RCC_OscConfig+0x470>)
 8046884:	681b      	ldr	r3, [r3, #0]
 8046886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804688a:	2b00      	cmp	r3, #0
 804688c:	d1f0      	bne.n	8046870 <HAL_RCC_OscConfig+0x444>
 804688e:	e03d      	b.n	804690c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8046890:	687b      	ldr	r3, [r7, #4]
 8046892:	699b      	ldr	r3, [r3, #24]
 8046894:	2b01      	cmp	r3, #1
 8046896:	d107      	bne.n	80468a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8046898:	2301      	movs	r3, #1
 804689a:	e038      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
 804689c:	40023800 	.word	0x40023800
 80468a0:	40007000 	.word	0x40007000
 80468a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80468a8:	4b1b      	ldr	r3, [pc, #108]	; (8046918 <HAL_RCC_OscConfig+0x4ec>)
 80468aa:	685b      	ldr	r3, [r3, #4]
 80468ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80468ae:	687b      	ldr	r3, [r7, #4]
 80468b0:	699b      	ldr	r3, [r3, #24]
 80468b2:	2b01      	cmp	r3, #1
 80468b4:	d028      	beq.n	8046908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80468b6:	68fb      	ldr	r3, [r7, #12]
 80468b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80468bc:	687b      	ldr	r3, [r7, #4]
 80468be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80468c0:	429a      	cmp	r2, r3
 80468c2:	d121      	bne.n	8046908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80468c4:	68fb      	ldr	r3, [r7, #12]
 80468c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80468ca:	687b      	ldr	r3, [r7, #4]
 80468cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80468ce:	429a      	cmp	r2, r3
 80468d0:	d11a      	bne.n	8046908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80468d2:	68fa      	ldr	r2, [r7, #12]
 80468d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80468d8:	4013      	ands	r3, r2
 80468da:	687a      	ldr	r2, [r7, #4]
 80468dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80468de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80468e0:	4293      	cmp	r3, r2
 80468e2:	d111      	bne.n	8046908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80468e4:	68fb      	ldr	r3, [r7, #12]
 80468e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80468ea:	687b      	ldr	r3, [r7, #4]
 80468ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80468ee:	085b      	lsrs	r3, r3, #1
 80468f0:	3b01      	subs	r3, #1
 80468f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80468f4:	429a      	cmp	r2, r3
 80468f6:	d107      	bne.n	8046908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80468f8:	68fb      	ldr	r3, [r7, #12]
 80468fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80468fe:	687b      	ldr	r3, [r7, #4]
 8046900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046902:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8046904:	429a      	cmp	r2, r3
 8046906:	d001      	beq.n	804690c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8046908:	2301      	movs	r3, #1
 804690a:	e000      	b.n	804690e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 804690c:	2300      	movs	r3, #0
}
 804690e:	4618      	mov	r0, r3
 8046910:	3718      	adds	r7, #24
 8046912:	46bd      	mov	sp, r7
 8046914:	bd80      	pop	{r7, pc}
 8046916:	bf00      	nop
 8046918:	40023800 	.word	0x40023800

0804691c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 804691c:	b580      	push	{r7, lr}
 804691e:	b084      	sub	sp, #16
 8046920:	af00      	add	r7, sp, #0
 8046922:	6078      	str	r0, [r7, #4]
 8046924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8046926:	687b      	ldr	r3, [r7, #4]
 8046928:	2b00      	cmp	r3, #0
 804692a:	d101      	bne.n	8046930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 804692c:	2301      	movs	r3, #1
 804692e:	e0cc      	b.n	8046aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8046930:	4b68      	ldr	r3, [pc, #416]	; (8046ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8046932:	681b      	ldr	r3, [r3, #0]
 8046934:	f003 030f 	and.w	r3, r3, #15
 8046938:	683a      	ldr	r2, [r7, #0]
 804693a:	429a      	cmp	r2, r3
 804693c:	d90c      	bls.n	8046958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804693e:	4b65      	ldr	r3, [pc, #404]	; (8046ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8046940:	683a      	ldr	r2, [r7, #0]
 8046942:	b2d2      	uxtb	r2, r2
 8046944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8046946:	4b63      	ldr	r3, [pc, #396]	; (8046ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8046948:	681b      	ldr	r3, [r3, #0]
 804694a:	f003 030f 	and.w	r3, r3, #15
 804694e:	683a      	ldr	r2, [r7, #0]
 8046950:	429a      	cmp	r2, r3
 8046952:	d001      	beq.n	8046958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8046954:	2301      	movs	r3, #1
 8046956:	e0b8      	b.n	8046aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8046958:	687b      	ldr	r3, [r7, #4]
 804695a:	681b      	ldr	r3, [r3, #0]
 804695c:	f003 0302 	and.w	r3, r3, #2
 8046960:	2b00      	cmp	r3, #0
 8046962:	d020      	beq.n	80469a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8046964:	687b      	ldr	r3, [r7, #4]
 8046966:	681b      	ldr	r3, [r3, #0]
 8046968:	f003 0304 	and.w	r3, r3, #4
 804696c:	2b00      	cmp	r3, #0
 804696e:	d005      	beq.n	804697c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8046970:	4b59      	ldr	r3, [pc, #356]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8046972:	689b      	ldr	r3, [r3, #8]
 8046974:	4a58      	ldr	r2, [pc, #352]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8046976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 804697a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 804697c:	687b      	ldr	r3, [r7, #4]
 804697e:	681b      	ldr	r3, [r3, #0]
 8046980:	f003 0308 	and.w	r3, r3, #8
 8046984:	2b00      	cmp	r3, #0
 8046986:	d005      	beq.n	8046994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8046988:	4b53      	ldr	r3, [pc, #332]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 804698a:	689b      	ldr	r3, [r3, #8]
 804698c:	4a52      	ldr	r2, [pc, #328]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 804698e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8046992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8046994:	4b50      	ldr	r3, [pc, #320]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8046996:	689b      	ldr	r3, [r3, #8]
 8046998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 804699c:	687b      	ldr	r3, [r7, #4]
 804699e:	689b      	ldr	r3, [r3, #8]
 80469a0:	494d      	ldr	r1, [pc, #308]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80469a2:	4313      	orrs	r3, r2
 80469a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80469a6:	687b      	ldr	r3, [r7, #4]
 80469a8:	681b      	ldr	r3, [r3, #0]
 80469aa:	f003 0301 	and.w	r3, r3, #1
 80469ae:	2b00      	cmp	r3, #0
 80469b0:	d044      	beq.n	8046a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80469b2:	687b      	ldr	r3, [r7, #4]
 80469b4:	685b      	ldr	r3, [r3, #4]
 80469b6:	2b01      	cmp	r3, #1
 80469b8:	d107      	bne.n	80469ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80469ba:	4b47      	ldr	r3, [pc, #284]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80469bc:	681b      	ldr	r3, [r3, #0]
 80469be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80469c2:	2b00      	cmp	r3, #0
 80469c4:	d119      	bne.n	80469fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80469c6:	2301      	movs	r3, #1
 80469c8:	e07f      	b.n	8046aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80469ca:	687b      	ldr	r3, [r7, #4]
 80469cc:	685b      	ldr	r3, [r3, #4]
 80469ce:	2b02      	cmp	r3, #2
 80469d0:	d003      	beq.n	80469da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80469d2:	687b      	ldr	r3, [r7, #4]
 80469d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80469d6:	2b03      	cmp	r3, #3
 80469d8:	d107      	bne.n	80469ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80469da:	4b3f      	ldr	r3, [pc, #252]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80469dc:	681b      	ldr	r3, [r3, #0]
 80469de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80469e2:	2b00      	cmp	r3, #0
 80469e4:	d109      	bne.n	80469fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80469e6:	2301      	movs	r3, #1
 80469e8:	e06f      	b.n	8046aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80469ea:	4b3b      	ldr	r3, [pc, #236]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80469ec:	681b      	ldr	r3, [r3, #0]
 80469ee:	f003 0302 	and.w	r3, r3, #2
 80469f2:	2b00      	cmp	r3, #0
 80469f4:	d101      	bne.n	80469fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80469f6:	2301      	movs	r3, #1
 80469f8:	e067      	b.n	8046aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80469fa:	4b37      	ldr	r3, [pc, #220]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80469fc:	689b      	ldr	r3, [r3, #8]
 80469fe:	f023 0203 	bic.w	r2, r3, #3
 8046a02:	687b      	ldr	r3, [r7, #4]
 8046a04:	685b      	ldr	r3, [r3, #4]
 8046a06:	4934      	ldr	r1, [pc, #208]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8046a08:	4313      	orrs	r3, r2
 8046a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8046a0c:	f7fc f9c2 	bl	8042d94 <HAL_GetTick>
 8046a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8046a12:	e00a      	b.n	8046a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8046a14:	f7fc f9be 	bl	8042d94 <HAL_GetTick>
 8046a18:	4602      	mov	r2, r0
 8046a1a:	68fb      	ldr	r3, [r7, #12]
 8046a1c:	1ad3      	subs	r3, r2, r3
 8046a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8046a22:	4293      	cmp	r3, r2
 8046a24:	d901      	bls.n	8046a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8046a26:	2303      	movs	r3, #3
 8046a28:	e04f      	b.n	8046aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8046a2a:	4b2b      	ldr	r3, [pc, #172]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8046a2c:	689b      	ldr	r3, [r3, #8]
 8046a2e:	f003 020c 	and.w	r2, r3, #12
 8046a32:	687b      	ldr	r3, [r7, #4]
 8046a34:	685b      	ldr	r3, [r3, #4]
 8046a36:	009b      	lsls	r3, r3, #2
 8046a38:	429a      	cmp	r2, r3
 8046a3a:	d1eb      	bne.n	8046a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8046a3c:	4b25      	ldr	r3, [pc, #148]	; (8046ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8046a3e:	681b      	ldr	r3, [r3, #0]
 8046a40:	f003 030f 	and.w	r3, r3, #15
 8046a44:	683a      	ldr	r2, [r7, #0]
 8046a46:	429a      	cmp	r2, r3
 8046a48:	d20c      	bcs.n	8046a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8046a4a:	4b22      	ldr	r3, [pc, #136]	; (8046ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8046a4c:	683a      	ldr	r2, [r7, #0]
 8046a4e:	b2d2      	uxtb	r2, r2
 8046a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8046a52:	4b20      	ldr	r3, [pc, #128]	; (8046ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8046a54:	681b      	ldr	r3, [r3, #0]
 8046a56:	f003 030f 	and.w	r3, r3, #15
 8046a5a:	683a      	ldr	r2, [r7, #0]
 8046a5c:	429a      	cmp	r2, r3
 8046a5e:	d001      	beq.n	8046a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8046a60:	2301      	movs	r3, #1
 8046a62:	e032      	b.n	8046aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8046a64:	687b      	ldr	r3, [r7, #4]
 8046a66:	681b      	ldr	r3, [r3, #0]
 8046a68:	f003 0304 	and.w	r3, r3, #4
 8046a6c:	2b00      	cmp	r3, #0
 8046a6e:	d008      	beq.n	8046a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8046a70:	4b19      	ldr	r3, [pc, #100]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8046a72:	689b      	ldr	r3, [r3, #8]
 8046a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8046a78:	687b      	ldr	r3, [r7, #4]
 8046a7a:	68db      	ldr	r3, [r3, #12]
 8046a7c:	4916      	ldr	r1, [pc, #88]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8046a7e:	4313      	orrs	r3, r2
 8046a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8046a82:	687b      	ldr	r3, [r7, #4]
 8046a84:	681b      	ldr	r3, [r3, #0]
 8046a86:	f003 0308 	and.w	r3, r3, #8
 8046a8a:	2b00      	cmp	r3, #0
 8046a8c:	d009      	beq.n	8046aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8046a8e:	4b12      	ldr	r3, [pc, #72]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8046a90:	689b      	ldr	r3, [r3, #8]
 8046a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8046a96:	687b      	ldr	r3, [r7, #4]
 8046a98:	691b      	ldr	r3, [r3, #16]
 8046a9a:	00db      	lsls	r3, r3, #3
 8046a9c:	490e      	ldr	r1, [pc, #56]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8046a9e:	4313      	orrs	r3, r2
 8046aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8046aa2:	f000 f821 	bl	8046ae8 <HAL_RCC_GetSysClockFreq>
 8046aa6:	4602      	mov	r2, r0
 8046aa8:	4b0b      	ldr	r3, [pc, #44]	; (8046ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8046aaa:	689b      	ldr	r3, [r3, #8]
 8046aac:	091b      	lsrs	r3, r3, #4
 8046aae:	f003 030f 	and.w	r3, r3, #15
 8046ab2:	490a      	ldr	r1, [pc, #40]	; (8046adc <HAL_RCC_ClockConfig+0x1c0>)
 8046ab4:	5ccb      	ldrb	r3, [r1, r3]
 8046ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8046aba:	4a09      	ldr	r2, [pc, #36]	; (8046ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8046abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8046abe:	4b09      	ldr	r3, [pc, #36]	; (8046ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8046ac0:	681b      	ldr	r3, [r3, #0]
 8046ac2:	4618      	mov	r0, r3
 8046ac4:	f7fa fd82 	bl	80415cc <HAL_InitTick>

  return HAL_OK;
 8046ac8:	2300      	movs	r3, #0
}
 8046aca:	4618      	mov	r0, r3
 8046acc:	3710      	adds	r7, #16
 8046ace:	46bd      	mov	sp, r7
 8046ad0:	bd80      	pop	{r7, pc}
 8046ad2:	bf00      	nop
 8046ad4:	40023c00 	.word	0x40023c00
 8046ad8:	40023800 	.word	0x40023800
 8046adc:	0804db98 	.word	0x0804db98
 8046ae0:	20000000 	.word	0x20000000
 8046ae4:	20000054 	.word	0x20000054

08046ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8046ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8046aec:	b094      	sub	sp, #80	; 0x50
 8046aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8046af0:	2300      	movs	r3, #0
 8046af2:	647b      	str	r3, [r7, #68]	; 0x44
 8046af4:	2300      	movs	r3, #0
 8046af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8046af8:	2300      	movs	r3, #0
 8046afa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8046afc:	2300      	movs	r3, #0
 8046afe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8046b00:	4b79      	ldr	r3, [pc, #484]	; (8046ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8046b02:	689b      	ldr	r3, [r3, #8]
 8046b04:	f003 030c 	and.w	r3, r3, #12
 8046b08:	2b08      	cmp	r3, #8
 8046b0a:	d00d      	beq.n	8046b28 <HAL_RCC_GetSysClockFreq+0x40>
 8046b0c:	2b08      	cmp	r3, #8
 8046b0e:	f200 80e1 	bhi.w	8046cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8046b12:	2b00      	cmp	r3, #0
 8046b14:	d002      	beq.n	8046b1c <HAL_RCC_GetSysClockFreq+0x34>
 8046b16:	2b04      	cmp	r3, #4
 8046b18:	d003      	beq.n	8046b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8046b1a:	e0db      	b.n	8046cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8046b1c:	4b73      	ldr	r3, [pc, #460]	; (8046cec <HAL_RCC_GetSysClockFreq+0x204>)
 8046b1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8046b20:	e0db      	b.n	8046cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8046b22:	4b73      	ldr	r3, [pc, #460]	; (8046cf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8046b24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8046b26:	e0d8      	b.n	8046cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8046b28:	4b6f      	ldr	r3, [pc, #444]	; (8046ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8046b2a:	685b      	ldr	r3, [r3, #4]
 8046b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8046b30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8046b32:	4b6d      	ldr	r3, [pc, #436]	; (8046ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8046b34:	685b      	ldr	r3, [r3, #4]
 8046b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8046b3a:	2b00      	cmp	r3, #0
 8046b3c:	d063      	beq.n	8046c06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8046b3e:	4b6a      	ldr	r3, [pc, #424]	; (8046ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8046b40:	685b      	ldr	r3, [r3, #4]
 8046b42:	099b      	lsrs	r3, r3, #6
 8046b44:	2200      	movs	r2, #0
 8046b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8046b48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8046b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8046b50:	633b      	str	r3, [r7, #48]	; 0x30
 8046b52:	2300      	movs	r3, #0
 8046b54:	637b      	str	r3, [r7, #52]	; 0x34
 8046b56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8046b5a:	4622      	mov	r2, r4
 8046b5c:	462b      	mov	r3, r5
 8046b5e:	f04f 0000 	mov.w	r0, #0
 8046b62:	f04f 0100 	mov.w	r1, #0
 8046b66:	0159      	lsls	r1, r3, #5
 8046b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8046b6c:	0150      	lsls	r0, r2, #5
 8046b6e:	4602      	mov	r2, r0
 8046b70:	460b      	mov	r3, r1
 8046b72:	4621      	mov	r1, r4
 8046b74:	1a51      	subs	r1, r2, r1
 8046b76:	6139      	str	r1, [r7, #16]
 8046b78:	4629      	mov	r1, r5
 8046b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8046b7e:	617b      	str	r3, [r7, #20]
 8046b80:	f04f 0200 	mov.w	r2, #0
 8046b84:	f04f 0300 	mov.w	r3, #0
 8046b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8046b8c:	4659      	mov	r1, fp
 8046b8e:	018b      	lsls	r3, r1, #6
 8046b90:	4651      	mov	r1, sl
 8046b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8046b96:	4651      	mov	r1, sl
 8046b98:	018a      	lsls	r2, r1, #6
 8046b9a:	4651      	mov	r1, sl
 8046b9c:	ebb2 0801 	subs.w	r8, r2, r1
 8046ba0:	4659      	mov	r1, fp
 8046ba2:	eb63 0901 	sbc.w	r9, r3, r1
 8046ba6:	f04f 0200 	mov.w	r2, #0
 8046baa:	f04f 0300 	mov.w	r3, #0
 8046bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8046bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8046bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8046bba:	4690      	mov	r8, r2
 8046bbc:	4699      	mov	r9, r3
 8046bbe:	4623      	mov	r3, r4
 8046bc0:	eb18 0303 	adds.w	r3, r8, r3
 8046bc4:	60bb      	str	r3, [r7, #8]
 8046bc6:	462b      	mov	r3, r5
 8046bc8:	eb49 0303 	adc.w	r3, r9, r3
 8046bcc:	60fb      	str	r3, [r7, #12]
 8046bce:	f04f 0200 	mov.w	r2, #0
 8046bd2:	f04f 0300 	mov.w	r3, #0
 8046bd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8046bda:	4629      	mov	r1, r5
 8046bdc:	024b      	lsls	r3, r1, #9
 8046bde:	4621      	mov	r1, r4
 8046be0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8046be4:	4621      	mov	r1, r4
 8046be6:	024a      	lsls	r2, r1, #9
 8046be8:	4610      	mov	r0, r2
 8046bea:	4619      	mov	r1, r3
 8046bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8046bee:	2200      	movs	r2, #0
 8046bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8046bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8046bf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8046bf8:	f7f9 fb4a 	bl	8040290 <__aeabi_uldivmod>
 8046bfc:	4602      	mov	r2, r0
 8046bfe:	460b      	mov	r3, r1
 8046c00:	4613      	mov	r3, r2
 8046c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8046c04:	e058      	b.n	8046cb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8046c06:	4b38      	ldr	r3, [pc, #224]	; (8046ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8046c08:	685b      	ldr	r3, [r3, #4]
 8046c0a:	099b      	lsrs	r3, r3, #6
 8046c0c:	2200      	movs	r2, #0
 8046c0e:	4618      	mov	r0, r3
 8046c10:	4611      	mov	r1, r2
 8046c12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8046c16:	623b      	str	r3, [r7, #32]
 8046c18:	2300      	movs	r3, #0
 8046c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8046c1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8046c20:	4642      	mov	r2, r8
 8046c22:	464b      	mov	r3, r9
 8046c24:	f04f 0000 	mov.w	r0, #0
 8046c28:	f04f 0100 	mov.w	r1, #0
 8046c2c:	0159      	lsls	r1, r3, #5
 8046c2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8046c32:	0150      	lsls	r0, r2, #5
 8046c34:	4602      	mov	r2, r0
 8046c36:	460b      	mov	r3, r1
 8046c38:	4641      	mov	r1, r8
 8046c3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8046c3e:	4649      	mov	r1, r9
 8046c40:	eb63 0b01 	sbc.w	fp, r3, r1
 8046c44:	f04f 0200 	mov.w	r2, #0
 8046c48:	f04f 0300 	mov.w	r3, #0
 8046c4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8046c50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8046c54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8046c58:	ebb2 040a 	subs.w	r4, r2, sl
 8046c5c:	eb63 050b 	sbc.w	r5, r3, fp
 8046c60:	f04f 0200 	mov.w	r2, #0
 8046c64:	f04f 0300 	mov.w	r3, #0
 8046c68:	00eb      	lsls	r3, r5, #3
 8046c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8046c6e:	00e2      	lsls	r2, r4, #3
 8046c70:	4614      	mov	r4, r2
 8046c72:	461d      	mov	r5, r3
 8046c74:	4643      	mov	r3, r8
 8046c76:	18e3      	adds	r3, r4, r3
 8046c78:	603b      	str	r3, [r7, #0]
 8046c7a:	464b      	mov	r3, r9
 8046c7c:	eb45 0303 	adc.w	r3, r5, r3
 8046c80:	607b      	str	r3, [r7, #4]
 8046c82:	f04f 0200 	mov.w	r2, #0
 8046c86:	f04f 0300 	mov.w	r3, #0
 8046c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8046c8e:	4629      	mov	r1, r5
 8046c90:	028b      	lsls	r3, r1, #10
 8046c92:	4621      	mov	r1, r4
 8046c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8046c98:	4621      	mov	r1, r4
 8046c9a:	028a      	lsls	r2, r1, #10
 8046c9c:	4610      	mov	r0, r2
 8046c9e:	4619      	mov	r1, r3
 8046ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8046ca2:	2200      	movs	r2, #0
 8046ca4:	61bb      	str	r3, [r7, #24]
 8046ca6:	61fa      	str	r2, [r7, #28]
 8046ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8046cac:	f7f9 faf0 	bl	8040290 <__aeabi_uldivmod>
 8046cb0:	4602      	mov	r2, r0
 8046cb2:	460b      	mov	r3, r1
 8046cb4:	4613      	mov	r3, r2
 8046cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8046cb8:	4b0b      	ldr	r3, [pc, #44]	; (8046ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8046cba:	685b      	ldr	r3, [r3, #4]
 8046cbc:	0c1b      	lsrs	r3, r3, #16
 8046cbe:	f003 0303 	and.w	r3, r3, #3
 8046cc2:	3301      	adds	r3, #1
 8046cc4:	005b      	lsls	r3, r3, #1
 8046cc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8046cc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8046cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8046ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8046cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8046cd2:	e002      	b.n	8046cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8046cd4:	4b05      	ldr	r3, [pc, #20]	; (8046cec <HAL_RCC_GetSysClockFreq+0x204>)
 8046cd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8046cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8046cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8046cdc:	4618      	mov	r0, r3
 8046cde:	3750      	adds	r7, #80	; 0x50
 8046ce0:	46bd      	mov	sp, r7
 8046ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8046ce6:	bf00      	nop
 8046ce8:	40023800 	.word	0x40023800
 8046cec:	00f42400 	.word	0x00f42400
 8046cf0:	007a1200 	.word	0x007a1200

08046cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8046cf4:	b480      	push	{r7}
 8046cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8046cf8:	4b03      	ldr	r3, [pc, #12]	; (8046d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8046cfa:	681b      	ldr	r3, [r3, #0]
}
 8046cfc:	4618      	mov	r0, r3
 8046cfe:	46bd      	mov	sp, r7
 8046d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046d04:	4770      	bx	lr
 8046d06:	bf00      	nop
 8046d08:	20000000 	.word	0x20000000

08046d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8046d0c:	b580      	push	{r7, lr}
 8046d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8046d10:	f7ff fff0 	bl	8046cf4 <HAL_RCC_GetHCLKFreq>
 8046d14:	4602      	mov	r2, r0
 8046d16:	4b05      	ldr	r3, [pc, #20]	; (8046d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8046d18:	689b      	ldr	r3, [r3, #8]
 8046d1a:	0a9b      	lsrs	r3, r3, #10
 8046d1c:	f003 0307 	and.w	r3, r3, #7
 8046d20:	4903      	ldr	r1, [pc, #12]	; (8046d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8046d22:	5ccb      	ldrb	r3, [r1, r3]
 8046d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8046d28:	4618      	mov	r0, r3
 8046d2a:	bd80      	pop	{r7, pc}
 8046d2c:	40023800 	.word	0x40023800
 8046d30:	0804dba8 	.word	0x0804dba8

08046d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8046d34:	b580      	push	{r7, lr}
 8046d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8046d38:	f7ff ffdc 	bl	8046cf4 <HAL_RCC_GetHCLKFreq>
 8046d3c:	4602      	mov	r2, r0
 8046d3e:	4b05      	ldr	r3, [pc, #20]	; (8046d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8046d40:	689b      	ldr	r3, [r3, #8]
 8046d42:	0b5b      	lsrs	r3, r3, #13
 8046d44:	f003 0307 	and.w	r3, r3, #7
 8046d48:	4903      	ldr	r1, [pc, #12]	; (8046d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8046d4a:	5ccb      	ldrb	r3, [r1, r3]
 8046d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8046d50:	4618      	mov	r0, r3
 8046d52:	bd80      	pop	{r7, pc}
 8046d54:	40023800 	.word	0x40023800
 8046d58:	0804dba8 	.word	0x0804dba8

08046d5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8046d5c:	b480      	push	{r7}
 8046d5e:	b083      	sub	sp, #12
 8046d60:	af00      	add	r7, sp, #0
 8046d62:	6078      	str	r0, [r7, #4]
 8046d64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8046d66:	687b      	ldr	r3, [r7, #4]
 8046d68:	220f      	movs	r2, #15
 8046d6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8046d6c:	4b12      	ldr	r3, [pc, #72]	; (8046db8 <HAL_RCC_GetClockConfig+0x5c>)
 8046d6e:	689b      	ldr	r3, [r3, #8]
 8046d70:	f003 0203 	and.w	r2, r3, #3
 8046d74:	687b      	ldr	r3, [r7, #4]
 8046d76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8046d78:	4b0f      	ldr	r3, [pc, #60]	; (8046db8 <HAL_RCC_GetClockConfig+0x5c>)
 8046d7a:	689b      	ldr	r3, [r3, #8]
 8046d7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8046d80:	687b      	ldr	r3, [r7, #4]
 8046d82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8046d84:	4b0c      	ldr	r3, [pc, #48]	; (8046db8 <HAL_RCC_GetClockConfig+0x5c>)
 8046d86:	689b      	ldr	r3, [r3, #8]
 8046d88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8046d8c:	687b      	ldr	r3, [r7, #4]
 8046d8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8046d90:	4b09      	ldr	r3, [pc, #36]	; (8046db8 <HAL_RCC_GetClockConfig+0x5c>)
 8046d92:	689b      	ldr	r3, [r3, #8]
 8046d94:	08db      	lsrs	r3, r3, #3
 8046d96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8046d9a:	687b      	ldr	r3, [r7, #4]
 8046d9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8046d9e:	4b07      	ldr	r3, [pc, #28]	; (8046dbc <HAL_RCC_GetClockConfig+0x60>)
 8046da0:	681b      	ldr	r3, [r3, #0]
 8046da2:	f003 020f 	and.w	r2, r3, #15
 8046da6:	683b      	ldr	r3, [r7, #0]
 8046da8:	601a      	str	r2, [r3, #0]
}
 8046daa:	bf00      	nop
 8046dac:	370c      	adds	r7, #12
 8046dae:	46bd      	mov	sp, r7
 8046db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046db4:	4770      	bx	lr
 8046db6:	bf00      	nop
 8046db8:	40023800 	.word	0x40023800
 8046dbc:	40023c00 	.word	0x40023c00

08046dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8046dc0:	b580      	push	{r7, lr}
 8046dc2:	b086      	sub	sp, #24
 8046dc4:	af00      	add	r7, sp, #0
 8046dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8046dc8:	2300      	movs	r3, #0
 8046dca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8046dcc:	2300      	movs	r3, #0
 8046dce:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8046dd0:	687b      	ldr	r3, [r7, #4]
 8046dd2:	681b      	ldr	r3, [r3, #0]
 8046dd4:	f003 0301 	and.w	r3, r3, #1
 8046dd8:	2b00      	cmp	r3, #0
 8046dda:	d10b      	bne.n	8046df4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8046ddc:	687b      	ldr	r3, [r7, #4]
 8046dde:	681b      	ldr	r3, [r3, #0]
 8046de0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8046de4:	2b00      	cmp	r3, #0
 8046de6:	d105      	bne.n	8046df4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8046de8:	687b      	ldr	r3, [r7, #4]
 8046dea:	681b      	ldr	r3, [r3, #0]
 8046dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8046df0:	2b00      	cmp	r3, #0
 8046df2:	d075      	beq.n	8046ee0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8046df4:	4b91      	ldr	r3, [pc, #580]	; (804703c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8046df6:	2200      	movs	r2, #0
 8046df8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8046dfa:	f7fb ffcb 	bl	8042d94 <HAL_GetTick>
 8046dfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8046e00:	e008      	b.n	8046e14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8046e02:	f7fb ffc7 	bl	8042d94 <HAL_GetTick>
 8046e06:	4602      	mov	r2, r0
 8046e08:	697b      	ldr	r3, [r7, #20]
 8046e0a:	1ad3      	subs	r3, r2, r3
 8046e0c:	2b02      	cmp	r3, #2
 8046e0e:	d901      	bls.n	8046e14 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8046e10:	2303      	movs	r3, #3
 8046e12:	e189      	b.n	8047128 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8046e14:	4b8a      	ldr	r3, [pc, #552]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046e16:	681b      	ldr	r3, [r3, #0]
 8046e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8046e1c:	2b00      	cmp	r3, #0
 8046e1e:	d1f0      	bne.n	8046e02 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8046e20:	687b      	ldr	r3, [r7, #4]
 8046e22:	681b      	ldr	r3, [r3, #0]
 8046e24:	f003 0301 	and.w	r3, r3, #1
 8046e28:	2b00      	cmp	r3, #0
 8046e2a:	d009      	beq.n	8046e40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8046e2c:	687b      	ldr	r3, [r7, #4]
 8046e2e:	685b      	ldr	r3, [r3, #4]
 8046e30:	019a      	lsls	r2, r3, #6
 8046e32:	687b      	ldr	r3, [r7, #4]
 8046e34:	689b      	ldr	r3, [r3, #8]
 8046e36:	071b      	lsls	r3, r3, #28
 8046e38:	4981      	ldr	r1, [pc, #516]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046e3a:	4313      	orrs	r3, r2
 8046e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8046e40:	687b      	ldr	r3, [r7, #4]
 8046e42:	681b      	ldr	r3, [r3, #0]
 8046e44:	f003 0302 	and.w	r3, r3, #2
 8046e48:	2b00      	cmp	r3, #0
 8046e4a:	d01f      	beq.n	8046e8c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8046e4c:	4b7c      	ldr	r3, [pc, #496]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8046e52:	0f1b      	lsrs	r3, r3, #28
 8046e54:	f003 0307 	and.w	r3, r3, #7
 8046e58:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8046e5a:	687b      	ldr	r3, [r7, #4]
 8046e5c:	685b      	ldr	r3, [r3, #4]
 8046e5e:	019a      	lsls	r2, r3, #6
 8046e60:	687b      	ldr	r3, [r7, #4]
 8046e62:	68db      	ldr	r3, [r3, #12]
 8046e64:	061b      	lsls	r3, r3, #24
 8046e66:	431a      	orrs	r2, r3
 8046e68:	693b      	ldr	r3, [r7, #16]
 8046e6a:	071b      	lsls	r3, r3, #28
 8046e6c:	4974      	ldr	r1, [pc, #464]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046e6e:	4313      	orrs	r3, r2
 8046e70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8046e74:	4b72      	ldr	r3, [pc, #456]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8046e7a:	f023 021f 	bic.w	r2, r3, #31
 8046e7e:	687b      	ldr	r3, [r7, #4]
 8046e80:	69db      	ldr	r3, [r3, #28]
 8046e82:	3b01      	subs	r3, #1
 8046e84:	496e      	ldr	r1, [pc, #440]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046e86:	4313      	orrs	r3, r2
 8046e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8046e8c:	687b      	ldr	r3, [r7, #4]
 8046e8e:	681b      	ldr	r3, [r3, #0]
 8046e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8046e94:	2b00      	cmp	r3, #0
 8046e96:	d00d      	beq.n	8046eb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8046e98:	687b      	ldr	r3, [r7, #4]
 8046e9a:	685b      	ldr	r3, [r3, #4]
 8046e9c:	019a      	lsls	r2, r3, #6
 8046e9e:	687b      	ldr	r3, [r7, #4]
 8046ea0:	68db      	ldr	r3, [r3, #12]
 8046ea2:	061b      	lsls	r3, r3, #24
 8046ea4:	431a      	orrs	r2, r3
 8046ea6:	687b      	ldr	r3, [r7, #4]
 8046ea8:	689b      	ldr	r3, [r3, #8]
 8046eaa:	071b      	lsls	r3, r3, #28
 8046eac:	4964      	ldr	r1, [pc, #400]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046eae:	4313      	orrs	r3, r2
 8046eb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8046eb4:	4b61      	ldr	r3, [pc, #388]	; (804703c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8046eb6:	2201      	movs	r2, #1
 8046eb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8046eba:	f7fb ff6b 	bl	8042d94 <HAL_GetTick>
 8046ebe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8046ec0:	e008      	b.n	8046ed4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8046ec2:	f7fb ff67 	bl	8042d94 <HAL_GetTick>
 8046ec6:	4602      	mov	r2, r0
 8046ec8:	697b      	ldr	r3, [r7, #20]
 8046eca:	1ad3      	subs	r3, r2, r3
 8046ecc:	2b02      	cmp	r3, #2
 8046ece:	d901      	bls.n	8046ed4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8046ed0:	2303      	movs	r3, #3
 8046ed2:	e129      	b.n	8047128 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8046ed4:	4b5a      	ldr	r3, [pc, #360]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046ed6:	681b      	ldr	r3, [r3, #0]
 8046ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8046edc:	2b00      	cmp	r3, #0
 8046ede:	d0f0      	beq.n	8046ec2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8046ee0:	687b      	ldr	r3, [r7, #4]
 8046ee2:	681b      	ldr	r3, [r3, #0]
 8046ee4:	f003 0304 	and.w	r3, r3, #4
 8046ee8:	2b00      	cmp	r3, #0
 8046eea:	d105      	bne.n	8046ef8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8046eec:	687b      	ldr	r3, [r7, #4]
 8046eee:	681b      	ldr	r3, [r3, #0]
 8046ef0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8046ef4:	2b00      	cmp	r3, #0
 8046ef6:	d079      	beq.n	8046fec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8046ef8:	4b52      	ldr	r3, [pc, #328]	; (8047044 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8046efa:	2200      	movs	r2, #0
 8046efc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8046efe:	f7fb ff49 	bl	8042d94 <HAL_GetTick>
 8046f02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8046f04:	e008      	b.n	8046f18 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8046f06:	f7fb ff45 	bl	8042d94 <HAL_GetTick>
 8046f0a:	4602      	mov	r2, r0
 8046f0c:	697b      	ldr	r3, [r7, #20]
 8046f0e:	1ad3      	subs	r3, r2, r3
 8046f10:	2b02      	cmp	r3, #2
 8046f12:	d901      	bls.n	8046f18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8046f14:	2303      	movs	r3, #3
 8046f16:	e107      	b.n	8047128 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8046f18:	4b49      	ldr	r3, [pc, #292]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046f1a:	681b      	ldr	r3, [r3, #0]
 8046f1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8046f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8046f24:	d0ef      	beq.n	8046f06 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8046f26:	687b      	ldr	r3, [r7, #4]
 8046f28:	681b      	ldr	r3, [r3, #0]
 8046f2a:	f003 0304 	and.w	r3, r3, #4
 8046f2e:	2b00      	cmp	r3, #0
 8046f30:	d020      	beq.n	8046f74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8046f32:	4b43      	ldr	r3, [pc, #268]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046f38:	0f1b      	lsrs	r3, r3, #28
 8046f3a:	f003 0307 	and.w	r3, r3, #7
 8046f3e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8046f40:	687b      	ldr	r3, [r7, #4]
 8046f42:	691b      	ldr	r3, [r3, #16]
 8046f44:	019a      	lsls	r2, r3, #6
 8046f46:	687b      	ldr	r3, [r7, #4]
 8046f48:	695b      	ldr	r3, [r3, #20]
 8046f4a:	061b      	lsls	r3, r3, #24
 8046f4c:	431a      	orrs	r2, r3
 8046f4e:	693b      	ldr	r3, [r7, #16]
 8046f50:	071b      	lsls	r3, r3, #28
 8046f52:	493b      	ldr	r1, [pc, #236]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046f54:	4313      	orrs	r3, r2
 8046f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8046f5a:	4b39      	ldr	r3, [pc, #228]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8046f60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8046f64:	687b      	ldr	r3, [r7, #4]
 8046f66:	6a1b      	ldr	r3, [r3, #32]
 8046f68:	3b01      	subs	r3, #1
 8046f6a:	021b      	lsls	r3, r3, #8
 8046f6c:	4934      	ldr	r1, [pc, #208]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046f6e:	4313      	orrs	r3, r2
 8046f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8046f74:	687b      	ldr	r3, [r7, #4]
 8046f76:	681b      	ldr	r3, [r3, #0]
 8046f78:	f003 0308 	and.w	r3, r3, #8
 8046f7c:	2b00      	cmp	r3, #0
 8046f7e:	d01e      	beq.n	8046fbe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8046f80:	4b2f      	ldr	r3, [pc, #188]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046f86:	0e1b      	lsrs	r3, r3, #24
 8046f88:	f003 030f 	and.w	r3, r3, #15
 8046f8c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8046f8e:	687b      	ldr	r3, [r7, #4]
 8046f90:	691b      	ldr	r3, [r3, #16]
 8046f92:	019a      	lsls	r2, r3, #6
 8046f94:	693b      	ldr	r3, [r7, #16]
 8046f96:	061b      	lsls	r3, r3, #24
 8046f98:	431a      	orrs	r2, r3
 8046f9a:	687b      	ldr	r3, [r7, #4]
 8046f9c:	699b      	ldr	r3, [r3, #24]
 8046f9e:	071b      	lsls	r3, r3, #28
 8046fa0:	4927      	ldr	r1, [pc, #156]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046fa2:	4313      	orrs	r3, r2
 8046fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8046fa8:	4b25      	ldr	r3, [pc, #148]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8046fae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8046fb2:	687b      	ldr	r3, [r7, #4]
 8046fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046fb6:	4922      	ldr	r1, [pc, #136]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046fb8:	4313      	orrs	r3, r2
 8046fba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8046fbe:	4b21      	ldr	r3, [pc, #132]	; (8047044 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8046fc0:	2201      	movs	r2, #1
 8046fc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8046fc4:	f7fb fee6 	bl	8042d94 <HAL_GetTick>
 8046fc8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8046fca:	e008      	b.n	8046fde <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8046fcc:	f7fb fee2 	bl	8042d94 <HAL_GetTick>
 8046fd0:	4602      	mov	r2, r0
 8046fd2:	697b      	ldr	r3, [r7, #20]
 8046fd4:	1ad3      	subs	r3, r2, r3
 8046fd6:	2b02      	cmp	r3, #2
 8046fd8:	d901      	bls.n	8046fde <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8046fda:	2303      	movs	r3, #3
 8046fdc:	e0a4      	b.n	8047128 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8046fde:	4b18      	ldr	r3, [pc, #96]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046fe0:	681b      	ldr	r3, [r3, #0]
 8046fe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8046fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8046fea:	d1ef      	bne.n	8046fcc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8046fec:	687b      	ldr	r3, [r7, #4]
 8046fee:	681b      	ldr	r3, [r3, #0]
 8046ff0:	f003 0320 	and.w	r3, r3, #32
 8046ff4:	2b00      	cmp	r3, #0
 8046ff6:	f000 808b 	beq.w	8047110 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8046ffa:	2300      	movs	r3, #0
 8046ffc:	60fb      	str	r3, [r7, #12]
 8046ffe:	4b10      	ldr	r3, [pc, #64]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8047002:	4a0f      	ldr	r2, [pc, #60]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8047008:	6413      	str	r3, [r2, #64]	; 0x40
 804700a:	4b0d      	ldr	r3, [pc, #52]	; (8047040 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804700e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8047012:	60fb      	str	r3, [r7, #12]
 8047014:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8047016:	4b0c      	ldr	r3, [pc, #48]	; (8047048 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8047018:	681b      	ldr	r3, [r3, #0]
 804701a:	4a0b      	ldr	r2, [pc, #44]	; (8047048 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 804701c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8047020:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8047022:	f7fb feb7 	bl	8042d94 <HAL_GetTick>
 8047026:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8047028:	e010      	b.n	804704c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 804702a:	f7fb feb3 	bl	8042d94 <HAL_GetTick>
 804702e:	4602      	mov	r2, r0
 8047030:	697b      	ldr	r3, [r7, #20]
 8047032:	1ad3      	subs	r3, r2, r3
 8047034:	2b02      	cmp	r3, #2
 8047036:	d909      	bls.n	804704c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8047038:	2303      	movs	r3, #3
 804703a:	e075      	b.n	8047128 <HAL_RCCEx_PeriphCLKConfig+0x368>
 804703c:	42470068 	.word	0x42470068
 8047040:	40023800 	.word	0x40023800
 8047044:	42470070 	.word	0x42470070
 8047048:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 804704c:	4b38      	ldr	r3, [pc, #224]	; (8047130 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 804704e:	681b      	ldr	r3, [r3, #0]
 8047050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8047054:	2b00      	cmp	r3, #0
 8047056:	d0e8      	beq.n	804702a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8047058:	4b36      	ldr	r3, [pc, #216]	; (8047134 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 804705a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804705c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8047060:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8047062:	693b      	ldr	r3, [r7, #16]
 8047064:	2b00      	cmp	r3, #0
 8047066:	d02f      	beq.n	80470c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8047068:	687b      	ldr	r3, [r7, #4]
 804706a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804706c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8047070:	693a      	ldr	r2, [r7, #16]
 8047072:	429a      	cmp	r2, r3
 8047074:	d028      	beq.n	80470c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8047076:	4b2f      	ldr	r3, [pc, #188]	; (8047134 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804707a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804707e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8047080:	4b2d      	ldr	r3, [pc, #180]	; (8047138 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8047082:	2201      	movs	r2, #1
 8047084:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8047086:	4b2c      	ldr	r3, [pc, #176]	; (8047138 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8047088:	2200      	movs	r2, #0
 804708a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 804708c:	4a29      	ldr	r2, [pc, #164]	; (8047134 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 804708e:	693b      	ldr	r3, [r7, #16]
 8047090:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8047092:	4b28      	ldr	r3, [pc, #160]	; (8047134 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8047096:	f003 0301 	and.w	r3, r3, #1
 804709a:	2b01      	cmp	r3, #1
 804709c:	d114      	bne.n	80470c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 804709e:	f7fb fe79 	bl	8042d94 <HAL_GetTick>
 80470a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80470a4:	e00a      	b.n	80470bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80470a6:	f7fb fe75 	bl	8042d94 <HAL_GetTick>
 80470aa:	4602      	mov	r2, r0
 80470ac:	697b      	ldr	r3, [r7, #20]
 80470ae:	1ad3      	subs	r3, r2, r3
 80470b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80470b4:	4293      	cmp	r3, r2
 80470b6:	d901      	bls.n	80470bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80470b8:	2303      	movs	r3, #3
 80470ba:	e035      	b.n	8047128 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80470bc:	4b1d      	ldr	r3, [pc, #116]	; (8047134 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80470be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80470c0:	f003 0302 	and.w	r3, r3, #2
 80470c4:	2b00      	cmp	r3, #0
 80470c6:	d0ee      	beq.n	80470a6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80470c8:	687b      	ldr	r3, [r7, #4]
 80470ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80470cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80470d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80470d4:	d10d      	bne.n	80470f2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80470d6:	4b17      	ldr	r3, [pc, #92]	; (8047134 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80470d8:	689b      	ldr	r3, [r3, #8]
 80470da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80470de:	687b      	ldr	r3, [r7, #4]
 80470e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80470e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80470e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80470ea:	4912      	ldr	r1, [pc, #72]	; (8047134 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80470ec:	4313      	orrs	r3, r2
 80470ee:	608b      	str	r3, [r1, #8]
 80470f0:	e005      	b.n	80470fe <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80470f2:	4b10      	ldr	r3, [pc, #64]	; (8047134 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80470f4:	689b      	ldr	r3, [r3, #8]
 80470f6:	4a0f      	ldr	r2, [pc, #60]	; (8047134 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80470f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80470fc:	6093      	str	r3, [r2, #8]
 80470fe:	4b0d      	ldr	r3, [pc, #52]	; (8047134 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047100:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8047102:	687b      	ldr	r3, [r7, #4]
 8047104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804710a:	490a      	ldr	r1, [pc, #40]	; (8047134 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 804710c:	4313      	orrs	r3, r2
 804710e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8047110:	687b      	ldr	r3, [r7, #4]
 8047112:	681b      	ldr	r3, [r3, #0]
 8047114:	f003 0310 	and.w	r3, r3, #16
 8047118:	2b00      	cmp	r3, #0
 804711a:	d004      	beq.n	8047126 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 804711c:	687b      	ldr	r3, [r7, #4]
 804711e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8047122:	4b06      	ldr	r3, [pc, #24]	; (804713c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8047124:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8047126:	2300      	movs	r3, #0
}
 8047128:	4618      	mov	r0, r3
 804712a:	3718      	adds	r7, #24
 804712c:	46bd      	mov	sp, r7
 804712e:	bd80      	pop	{r7, pc}
 8047130:	40007000 	.word	0x40007000
 8047134:	40023800 	.word	0x40023800
 8047138:	42470e40 	.word	0x42470e40
 804713c:	424711e0 	.word	0x424711e0

08047140 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8047140:	b580      	push	{r7, lr}
 8047142:	b082      	sub	sp, #8
 8047144:	af00      	add	r7, sp, #0
 8047146:	6078      	str	r0, [r7, #4]
 8047148:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 804714a:	687b      	ldr	r3, [r7, #4]
 804714c:	2b00      	cmp	r3, #0
 804714e:	d101      	bne.n	8047154 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8047150:	2301      	movs	r3, #1
 8047152:	e025      	b.n	80471a0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8047154:	687b      	ldr	r3, [r7, #4]
 8047156:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 804715a:	b2db      	uxtb	r3, r3
 804715c:	2b00      	cmp	r3, #0
 804715e:	d106      	bne.n	804716e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8047160:	687b      	ldr	r3, [r7, #4]
 8047162:	2200      	movs	r2, #0
 8047164:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8047168:	6878      	ldr	r0, [r7, #4]
 804716a:	f7fa fa25 	bl	80415b8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 804716e:	687b      	ldr	r3, [r7, #4]
 8047170:	2202      	movs	r2, #2
 8047172:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8047176:	687b      	ldr	r3, [r7, #4]
 8047178:	681a      	ldr	r2, [r3, #0]
 804717a:	687b      	ldr	r3, [r7, #4]
 804717c:	3304      	adds	r3, #4
 804717e:	4619      	mov	r1, r3
 8047180:	4610      	mov	r0, r2
 8047182:	f001 fe91 	bl	8048ea8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8047186:	687b      	ldr	r3, [r7, #4]
 8047188:	6818      	ldr	r0, [r3, #0]
 804718a:	687b      	ldr	r3, [r7, #4]
 804718c:	685b      	ldr	r3, [r3, #4]
 804718e:	461a      	mov	r2, r3
 8047190:	6839      	ldr	r1, [r7, #0]
 8047192:	f001 fee6 	bl	8048f62 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8047196:	687b      	ldr	r3, [r7, #4]
 8047198:	2201      	movs	r2, #1
 804719a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 804719e:	2300      	movs	r3, #0
}
 80471a0:	4618      	mov	r0, r3
 80471a2:	3708      	adds	r7, #8
 80471a4:	46bd      	mov	sp, r7
 80471a6:	bd80      	pop	{r7, pc}

080471a8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80471a8:	b580      	push	{r7, lr}
 80471aa:	b086      	sub	sp, #24
 80471ac:	af00      	add	r7, sp, #0
 80471ae:	60f8      	str	r0, [r7, #12]
 80471b0:	60b9      	str	r1, [r7, #8]
 80471b2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80471b4:	68fb      	ldr	r3, [r7, #12]
 80471b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80471ba:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80471bc:	7dfb      	ldrb	r3, [r7, #23]
 80471be:	2b02      	cmp	r3, #2
 80471c0:	d101      	bne.n	80471c6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80471c2:	2302      	movs	r3, #2
 80471c4:	e021      	b.n	804720a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80471c6:	7dfb      	ldrb	r3, [r7, #23]
 80471c8:	2b01      	cmp	r3, #1
 80471ca:	d002      	beq.n	80471d2 <HAL_SDRAM_SendCommand+0x2a>
 80471cc:	7dfb      	ldrb	r3, [r7, #23]
 80471ce:	2b05      	cmp	r3, #5
 80471d0:	d118      	bne.n	8047204 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80471d2:	68fb      	ldr	r3, [r7, #12]
 80471d4:	2202      	movs	r2, #2
 80471d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80471da:	68fb      	ldr	r3, [r7, #12]
 80471dc:	681b      	ldr	r3, [r3, #0]
 80471de:	687a      	ldr	r2, [r7, #4]
 80471e0:	68b9      	ldr	r1, [r7, #8]
 80471e2:	4618      	mov	r0, r3
 80471e4:	f001 ff26 	bl	8049034 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80471e8:	68bb      	ldr	r3, [r7, #8]
 80471ea:	681b      	ldr	r3, [r3, #0]
 80471ec:	2b02      	cmp	r3, #2
 80471ee:	d104      	bne.n	80471fa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80471f0:	68fb      	ldr	r3, [r7, #12]
 80471f2:	2205      	movs	r2, #5
 80471f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80471f8:	e006      	b.n	8047208 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80471fa:	68fb      	ldr	r3, [r7, #12]
 80471fc:	2201      	movs	r2, #1
 80471fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8047202:	e001      	b.n	8047208 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8047204:	2301      	movs	r3, #1
 8047206:	e000      	b.n	804720a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8047208:	2300      	movs	r3, #0
}
 804720a:	4618      	mov	r0, r3
 804720c:	3718      	adds	r7, #24
 804720e:	46bd      	mov	sp, r7
 8047210:	bd80      	pop	{r7, pc}

08047212 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8047212:	b580      	push	{r7, lr}
 8047214:	b082      	sub	sp, #8
 8047216:	af00      	add	r7, sp, #0
 8047218:	6078      	str	r0, [r7, #4]
 804721a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 804721c:	687b      	ldr	r3, [r7, #4]
 804721e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8047222:	b2db      	uxtb	r3, r3
 8047224:	2b02      	cmp	r3, #2
 8047226:	d101      	bne.n	804722c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8047228:	2302      	movs	r3, #2
 804722a:	e016      	b.n	804725a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 804722c:	687b      	ldr	r3, [r7, #4]
 804722e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8047232:	b2db      	uxtb	r3, r3
 8047234:	2b01      	cmp	r3, #1
 8047236:	d10f      	bne.n	8047258 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8047238:	687b      	ldr	r3, [r7, #4]
 804723a:	2202      	movs	r2, #2
 804723c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8047240:	687b      	ldr	r3, [r7, #4]
 8047242:	681b      	ldr	r3, [r3, #0]
 8047244:	6839      	ldr	r1, [r7, #0]
 8047246:	4618      	mov	r0, r3
 8047248:	f001 ff31 	bl	80490ae <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 804724c:	687b      	ldr	r3, [r7, #4]
 804724e:	2201      	movs	r2, #1
 8047250:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8047254:	2300      	movs	r3, #0
 8047256:	e000      	b.n	804725a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8047258:	2301      	movs	r3, #1
}
 804725a:	4618      	mov	r0, r3
 804725c:	3708      	adds	r7, #8
 804725e:	46bd      	mov	sp, r7
 8047260:	bd80      	pop	{r7, pc}

08047262 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8047262:	b580      	push	{r7, lr}
 8047264:	b082      	sub	sp, #8
 8047266:	af00      	add	r7, sp, #0
 8047268:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 804726a:	687b      	ldr	r3, [r7, #4]
 804726c:	2b00      	cmp	r3, #0
 804726e:	d101      	bne.n	8047274 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8047270:	2301      	movs	r3, #1
 8047272:	e07b      	b.n	804736c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8047274:	687b      	ldr	r3, [r7, #4]
 8047276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8047278:	2b00      	cmp	r3, #0
 804727a:	d108      	bne.n	804728e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 804727c:	687b      	ldr	r3, [r7, #4]
 804727e:	685b      	ldr	r3, [r3, #4]
 8047280:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047284:	d009      	beq.n	804729a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8047286:	687b      	ldr	r3, [r7, #4]
 8047288:	2200      	movs	r2, #0
 804728a:	61da      	str	r2, [r3, #28]
 804728c:	e005      	b.n	804729a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 804728e:	687b      	ldr	r3, [r7, #4]
 8047290:	2200      	movs	r2, #0
 8047292:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8047294:	687b      	ldr	r3, [r7, #4]
 8047296:	2200      	movs	r2, #0
 8047298:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804729a:	687b      	ldr	r3, [r7, #4]
 804729c:	2200      	movs	r2, #0
 804729e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80472a0:	687b      	ldr	r3, [r7, #4]
 80472a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80472a6:	b2db      	uxtb	r3, r3
 80472a8:	2b00      	cmp	r3, #0
 80472aa:	d106      	bne.n	80472ba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80472ac:	687b      	ldr	r3, [r7, #4]
 80472ae:	2200      	movs	r2, #0
 80472b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80472b4:	6878      	ldr	r0, [r7, #4]
 80472b6:	f7fa f81d 	bl	80412f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80472ba:	687b      	ldr	r3, [r7, #4]
 80472bc:	2202      	movs	r2, #2
 80472be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80472c2:	687b      	ldr	r3, [r7, #4]
 80472c4:	681b      	ldr	r3, [r3, #0]
 80472c6:	681a      	ldr	r2, [r3, #0]
 80472c8:	687b      	ldr	r3, [r7, #4]
 80472ca:	681b      	ldr	r3, [r3, #0]
 80472cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80472d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80472d2:	687b      	ldr	r3, [r7, #4]
 80472d4:	685b      	ldr	r3, [r3, #4]
 80472d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80472da:	687b      	ldr	r3, [r7, #4]
 80472dc:	689b      	ldr	r3, [r3, #8]
 80472de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80472e2:	431a      	orrs	r2, r3
 80472e4:	687b      	ldr	r3, [r7, #4]
 80472e6:	68db      	ldr	r3, [r3, #12]
 80472e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80472ec:	431a      	orrs	r2, r3
 80472ee:	687b      	ldr	r3, [r7, #4]
 80472f0:	691b      	ldr	r3, [r3, #16]
 80472f2:	f003 0302 	and.w	r3, r3, #2
 80472f6:	431a      	orrs	r2, r3
 80472f8:	687b      	ldr	r3, [r7, #4]
 80472fa:	695b      	ldr	r3, [r3, #20]
 80472fc:	f003 0301 	and.w	r3, r3, #1
 8047300:	431a      	orrs	r2, r3
 8047302:	687b      	ldr	r3, [r7, #4]
 8047304:	699b      	ldr	r3, [r3, #24]
 8047306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804730a:	431a      	orrs	r2, r3
 804730c:	687b      	ldr	r3, [r7, #4]
 804730e:	69db      	ldr	r3, [r3, #28]
 8047310:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8047314:	431a      	orrs	r2, r3
 8047316:	687b      	ldr	r3, [r7, #4]
 8047318:	6a1b      	ldr	r3, [r3, #32]
 804731a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804731e:	ea42 0103 	orr.w	r1, r2, r3
 8047322:	687b      	ldr	r3, [r7, #4]
 8047324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047326:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 804732a:	687b      	ldr	r3, [r7, #4]
 804732c:	681b      	ldr	r3, [r3, #0]
 804732e:	430a      	orrs	r2, r1
 8047330:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8047332:	687b      	ldr	r3, [r7, #4]
 8047334:	699b      	ldr	r3, [r3, #24]
 8047336:	0c1b      	lsrs	r3, r3, #16
 8047338:	f003 0104 	and.w	r1, r3, #4
 804733c:	687b      	ldr	r3, [r7, #4]
 804733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8047340:	f003 0210 	and.w	r2, r3, #16
 8047344:	687b      	ldr	r3, [r7, #4]
 8047346:	681b      	ldr	r3, [r3, #0]
 8047348:	430a      	orrs	r2, r1
 804734a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 804734c:	687b      	ldr	r3, [r7, #4]
 804734e:	681b      	ldr	r3, [r3, #0]
 8047350:	69da      	ldr	r2, [r3, #28]
 8047352:	687b      	ldr	r3, [r7, #4]
 8047354:	681b      	ldr	r3, [r3, #0]
 8047356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 804735a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 804735c:	687b      	ldr	r3, [r7, #4]
 804735e:	2200      	movs	r2, #0
 8047360:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8047362:	687b      	ldr	r3, [r7, #4]
 8047364:	2201      	movs	r2, #1
 8047366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 804736a:	2300      	movs	r3, #0
}
 804736c:	4618      	mov	r0, r3
 804736e:	3708      	adds	r7, #8
 8047370:	46bd      	mov	sp, r7
 8047372:	bd80      	pop	{r7, pc}

08047374 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8047374:	b580      	push	{r7, lr}
 8047376:	b082      	sub	sp, #8
 8047378:	af00      	add	r7, sp, #0
 804737a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 804737c:	687b      	ldr	r3, [r7, #4]
 804737e:	2b00      	cmp	r3, #0
 8047380:	d101      	bne.n	8047386 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8047382:	2301      	movs	r3, #1
 8047384:	e01a      	b.n	80473bc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8047386:	687b      	ldr	r3, [r7, #4]
 8047388:	2202      	movs	r2, #2
 804738a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 804738e:	687b      	ldr	r3, [r7, #4]
 8047390:	681b      	ldr	r3, [r3, #0]
 8047392:	681a      	ldr	r2, [r3, #0]
 8047394:	687b      	ldr	r3, [r7, #4]
 8047396:	681b      	ldr	r3, [r3, #0]
 8047398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804739c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 804739e:	6878      	ldr	r0, [r7, #4]
 80473a0:	f7f9 fff0 	bl	8041384 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80473a4:	687b      	ldr	r3, [r7, #4]
 80473a6:	2200      	movs	r2, #0
 80473a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80473aa:	687b      	ldr	r3, [r7, #4]
 80473ac:	2200      	movs	r2, #0
 80473ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80473b2:	687b      	ldr	r3, [r7, #4]
 80473b4:	2200      	movs	r2, #0
 80473b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80473ba:	2300      	movs	r3, #0
}
 80473bc:	4618      	mov	r0, r3
 80473be:	3708      	adds	r7, #8
 80473c0:	46bd      	mov	sp, r7
 80473c2:	bd80      	pop	{r7, pc}

080473c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80473c4:	b580      	push	{r7, lr}
 80473c6:	b088      	sub	sp, #32
 80473c8:	af00      	add	r7, sp, #0
 80473ca:	60f8      	str	r0, [r7, #12]
 80473cc:	60b9      	str	r1, [r7, #8]
 80473ce:	603b      	str	r3, [r7, #0]
 80473d0:	4613      	mov	r3, r2
 80473d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80473d4:	2300      	movs	r3, #0
 80473d6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80473d8:	68fb      	ldr	r3, [r7, #12]
 80473da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80473de:	2b01      	cmp	r3, #1
 80473e0:	d101      	bne.n	80473e6 <HAL_SPI_Transmit+0x22>
 80473e2:	2302      	movs	r3, #2
 80473e4:	e126      	b.n	8047634 <HAL_SPI_Transmit+0x270>
 80473e6:	68fb      	ldr	r3, [r7, #12]
 80473e8:	2201      	movs	r2, #1
 80473ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80473ee:	f7fb fcd1 	bl	8042d94 <HAL_GetTick>
 80473f2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80473f4:	88fb      	ldrh	r3, [r7, #6]
 80473f6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80473f8:	68fb      	ldr	r3, [r7, #12]
 80473fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80473fe:	b2db      	uxtb	r3, r3
 8047400:	2b01      	cmp	r3, #1
 8047402:	d002      	beq.n	804740a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8047404:	2302      	movs	r3, #2
 8047406:	77fb      	strb	r3, [r7, #31]
    goto error;
 8047408:	e10b      	b.n	8047622 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 804740a:	68bb      	ldr	r3, [r7, #8]
 804740c:	2b00      	cmp	r3, #0
 804740e:	d002      	beq.n	8047416 <HAL_SPI_Transmit+0x52>
 8047410:	88fb      	ldrh	r3, [r7, #6]
 8047412:	2b00      	cmp	r3, #0
 8047414:	d102      	bne.n	804741c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8047416:	2301      	movs	r3, #1
 8047418:	77fb      	strb	r3, [r7, #31]
    goto error;
 804741a:	e102      	b.n	8047622 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 804741c:	68fb      	ldr	r3, [r7, #12]
 804741e:	2203      	movs	r2, #3
 8047420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8047424:	68fb      	ldr	r3, [r7, #12]
 8047426:	2200      	movs	r2, #0
 8047428:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 804742a:	68fb      	ldr	r3, [r7, #12]
 804742c:	68ba      	ldr	r2, [r7, #8]
 804742e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8047430:	68fb      	ldr	r3, [r7, #12]
 8047432:	88fa      	ldrh	r2, [r7, #6]
 8047434:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8047436:	68fb      	ldr	r3, [r7, #12]
 8047438:	88fa      	ldrh	r2, [r7, #6]
 804743a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 804743c:	68fb      	ldr	r3, [r7, #12]
 804743e:	2200      	movs	r2, #0
 8047440:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8047442:	68fb      	ldr	r3, [r7, #12]
 8047444:	2200      	movs	r2, #0
 8047446:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8047448:	68fb      	ldr	r3, [r7, #12]
 804744a:	2200      	movs	r2, #0
 804744c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 804744e:	68fb      	ldr	r3, [r7, #12]
 8047450:	2200      	movs	r2, #0
 8047452:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8047454:	68fb      	ldr	r3, [r7, #12]
 8047456:	2200      	movs	r2, #0
 8047458:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804745a:	68fb      	ldr	r3, [r7, #12]
 804745c:	689b      	ldr	r3, [r3, #8]
 804745e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8047462:	d10f      	bne.n	8047484 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8047464:	68fb      	ldr	r3, [r7, #12]
 8047466:	681b      	ldr	r3, [r3, #0]
 8047468:	681a      	ldr	r2, [r3, #0]
 804746a:	68fb      	ldr	r3, [r7, #12]
 804746c:	681b      	ldr	r3, [r3, #0]
 804746e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047472:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8047474:	68fb      	ldr	r3, [r7, #12]
 8047476:	681b      	ldr	r3, [r3, #0]
 8047478:	681a      	ldr	r2, [r3, #0]
 804747a:	68fb      	ldr	r3, [r7, #12]
 804747c:	681b      	ldr	r3, [r3, #0]
 804747e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8047482:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8047484:	68fb      	ldr	r3, [r7, #12]
 8047486:	681b      	ldr	r3, [r3, #0]
 8047488:	681b      	ldr	r3, [r3, #0]
 804748a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804748e:	2b40      	cmp	r3, #64	; 0x40
 8047490:	d007      	beq.n	80474a2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8047492:	68fb      	ldr	r3, [r7, #12]
 8047494:	681b      	ldr	r3, [r3, #0]
 8047496:	681a      	ldr	r2, [r3, #0]
 8047498:	68fb      	ldr	r3, [r7, #12]
 804749a:	681b      	ldr	r3, [r3, #0]
 804749c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80474a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80474a2:	68fb      	ldr	r3, [r7, #12]
 80474a4:	68db      	ldr	r3, [r3, #12]
 80474a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80474aa:	d14b      	bne.n	8047544 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80474ac:	68fb      	ldr	r3, [r7, #12]
 80474ae:	685b      	ldr	r3, [r3, #4]
 80474b0:	2b00      	cmp	r3, #0
 80474b2:	d002      	beq.n	80474ba <HAL_SPI_Transmit+0xf6>
 80474b4:	8afb      	ldrh	r3, [r7, #22]
 80474b6:	2b01      	cmp	r3, #1
 80474b8:	d13e      	bne.n	8047538 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80474ba:	68fb      	ldr	r3, [r7, #12]
 80474bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80474be:	881a      	ldrh	r2, [r3, #0]
 80474c0:	68fb      	ldr	r3, [r7, #12]
 80474c2:	681b      	ldr	r3, [r3, #0]
 80474c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80474c6:	68fb      	ldr	r3, [r7, #12]
 80474c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80474ca:	1c9a      	adds	r2, r3, #2
 80474cc:	68fb      	ldr	r3, [r7, #12]
 80474ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80474d0:	68fb      	ldr	r3, [r7, #12]
 80474d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80474d4:	b29b      	uxth	r3, r3
 80474d6:	3b01      	subs	r3, #1
 80474d8:	b29a      	uxth	r2, r3
 80474da:	68fb      	ldr	r3, [r7, #12]
 80474dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80474de:	e02b      	b.n	8047538 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80474e0:	68fb      	ldr	r3, [r7, #12]
 80474e2:	681b      	ldr	r3, [r3, #0]
 80474e4:	689b      	ldr	r3, [r3, #8]
 80474e6:	f003 0302 	and.w	r3, r3, #2
 80474ea:	2b02      	cmp	r3, #2
 80474ec:	d112      	bne.n	8047514 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80474ee:	68fb      	ldr	r3, [r7, #12]
 80474f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80474f2:	881a      	ldrh	r2, [r3, #0]
 80474f4:	68fb      	ldr	r3, [r7, #12]
 80474f6:	681b      	ldr	r3, [r3, #0]
 80474f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80474fa:	68fb      	ldr	r3, [r7, #12]
 80474fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80474fe:	1c9a      	adds	r2, r3, #2
 8047500:	68fb      	ldr	r3, [r7, #12]
 8047502:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8047504:	68fb      	ldr	r3, [r7, #12]
 8047506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047508:	b29b      	uxth	r3, r3
 804750a:	3b01      	subs	r3, #1
 804750c:	b29a      	uxth	r2, r3
 804750e:	68fb      	ldr	r3, [r7, #12]
 8047510:	86da      	strh	r2, [r3, #54]	; 0x36
 8047512:	e011      	b.n	8047538 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8047514:	f7fb fc3e 	bl	8042d94 <HAL_GetTick>
 8047518:	4602      	mov	r2, r0
 804751a:	69bb      	ldr	r3, [r7, #24]
 804751c:	1ad3      	subs	r3, r2, r3
 804751e:	683a      	ldr	r2, [r7, #0]
 8047520:	429a      	cmp	r2, r3
 8047522:	d803      	bhi.n	804752c <HAL_SPI_Transmit+0x168>
 8047524:	683b      	ldr	r3, [r7, #0]
 8047526:	f1b3 3fff 	cmp.w	r3, #4294967295
 804752a:	d102      	bne.n	8047532 <HAL_SPI_Transmit+0x16e>
 804752c:	683b      	ldr	r3, [r7, #0]
 804752e:	2b00      	cmp	r3, #0
 8047530:	d102      	bne.n	8047538 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8047532:	2303      	movs	r3, #3
 8047534:	77fb      	strb	r3, [r7, #31]
          goto error;
 8047536:	e074      	b.n	8047622 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8047538:	68fb      	ldr	r3, [r7, #12]
 804753a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804753c:	b29b      	uxth	r3, r3
 804753e:	2b00      	cmp	r3, #0
 8047540:	d1ce      	bne.n	80474e0 <HAL_SPI_Transmit+0x11c>
 8047542:	e04c      	b.n	80475de <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8047544:	68fb      	ldr	r3, [r7, #12]
 8047546:	685b      	ldr	r3, [r3, #4]
 8047548:	2b00      	cmp	r3, #0
 804754a:	d002      	beq.n	8047552 <HAL_SPI_Transmit+0x18e>
 804754c:	8afb      	ldrh	r3, [r7, #22]
 804754e:	2b01      	cmp	r3, #1
 8047550:	d140      	bne.n	80475d4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8047552:	68fb      	ldr	r3, [r7, #12]
 8047554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8047556:	68fb      	ldr	r3, [r7, #12]
 8047558:	681b      	ldr	r3, [r3, #0]
 804755a:	330c      	adds	r3, #12
 804755c:	7812      	ldrb	r2, [r2, #0]
 804755e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8047560:	68fb      	ldr	r3, [r7, #12]
 8047562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047564:	1c5a      	adds	r2, r3, #1
 8047566:	68fb      	ldr	r3, [r7, #12]
 8047568:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 804756a:	68fb      	ldr	r3, [r7, #12]
 804756c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804756e:	b29b      	uxth	r3, r3
 8047570:	3b01      	subs	r3, #1
 8047572:	b29a      	uxth	r2, r3
 8047574:	68fb      	ldr	r3, [r7, #12]
 8047576:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8047578:	e02c      	b.n	80475d4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 804757a:	68fb      	ldr	r3, [r7, #12]
 804757c:	681b      	ldr	r3, [r3, #0]
 804757e:	689b      	ldr	r3, [r3, #8]
 8047580:	f003 0302 	and.w	r3, r3, #2
 8047584:	2b02      	cmp	r3, #2
 8047586:	d113      	bne.n	80475b0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8047588:	68fb      	ldr	r3, [r7, #12]
 804758a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804758c:	68fb      	ldr	r3, [r7, #12]
 804758e:	681b      	ldr	r3, [r3, #0]
 8047590:	330c      	adds	r3, #12
 8047592:	7812      	ldrb	r2, [r2, #0]
 8047594:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8047596:	68fb      	ldr	r3, [r7, #12]
 8047598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804759a:	1c5a      	adds	r2, r3, #1
 804759c:	68fb      	ldr	r3, [r7, #12]
 804759e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80475a0:	68fb      	ldr	r3, [r7, #12]
 80475a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80475a4:	b29b      	uxth	r3, r3
 80475a6:	3b01      	subs	r3, #1
 80475a8:	b29a      	uxth	r2, r3
 80475aa:	68fb      	ldr	r3, [r7, #12]
 80475ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80475ae:	e011      	b.n	80475d4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80475b0:	f7fb fbf0 	bl	8042d94 <HAL_GetTick>
 80475b4:	4602      	mov	r2, r0
 80475b6:	69bb      	ldr	r3, [r7, #24]
 80475b8:	1ad3      	subs	r3, r2, r3
 80475ba:	683a      	ldr	r2, [r7, #0]
 80475bc:	429a      	cmp	r2, r3
 80475be:	d803      	bhi.n	80475c8 <HAL_SPI_Transmit+0x204>
 80475c0:	683b      	ldr	r3, [r7, #0]
 80475c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80475c6:	d102      	bne.n	80475ce <HAL_SPI_Transmit+0x20a>
 80475c8:	683b      	ldr	r3, [r7, #0]
 80475ca:	2b00      	cmp	r3, #0
 80475cc:	d102      	bne.n	80475d4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80475ce:	2303      	movs	r3, #3
 80475d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80475d2:	e026      	b.n	8047622 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80475d4:	68fb      	ldr	r3, [r7, #12]
 80475d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80475d8:	b29b      	uxth	r3, r3
 80475da:	2b00      	cmp	r3, #0
 80475dc:	d1cd      	bne.n	804757a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80475de:	69ba      	ldr	r2, [r7, #24]
 80475e0:	6839      	ldr	r1, [r7, #0]
 80475e2:	68f8      	ldr	r0, [r7, #12]
 80475e4:	f000 fbda 	bl	8047d9c <SPI_EndRxTxTransaction>
 80475e8:	4603      	mov	r3, r0
 80475ea:	2b00      	cmp	r3, #0
 80475ec:	d002      	beq.n	80475f4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80475ee:	68fb      	ldr	r3, [r7, #12]
 80475f0:	2220      	movs	r2, #32
 80475f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80475f4:	68fb      	ldr	r3, [r7, #12]
 80475f6:	689b      	ldr	r3, [r3, #8]
 80475f8:	2b00      	cmp	r3, #0
 80475fa:	d10a      	bne.n	8047612 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80475fc:	2300      	movs	r3, #0
 80475fe:	613b      	str	r3, [r7, #16]
 8047600:	68fb      	ldr	r3, [r7, #12]
 8047602:	681b      	ldr	r3, [r3, #0]
 8047604:	68db      	ldr	r3, [r3, #12]
 8047606:	613b      	str	r3, [r7, #16]
 8047608:	68fb      	ldr	r3, [r7, #12]
 804760a:	681b      	ldr	r3, [r3, #0]
 804760c:	689b      	ldr	r3, [r3, #8]
 804760e:	613b      	str	r3, [r7, #16]
 8047610:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8047612:	68fb      	ldr	r3, [r7, #12]
 8047614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047616:	2b00      	cmp	r3, #0
 8047618:	d002      	beq.n	8047620 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 804761a:	2301      	movs	r3, #1
 804761c:	77fb      	strb	r3, [r7, #31]
 804761e:	e000      	b.n	8047622 <HAL_SPI_Transmit+0x25e>
  }

error:
 8047620:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8047622:	68fb      	ldr	r3, [r7, #12]
 8047624:	2201      	movs	r2, #1
 8047626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 804762a:	68fb      	ldr	r3, [r7, #12]
 804762c:	2200      	movs	r2, #0
 804762e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8047632:	7ffb      	ldrb	r3, [r7, #31]
}
 8047634:	4618      	mov	r0, r3
 8047636:	3720      	adds	r7, #32
 8047638:	46bd      	mov	sp, r7
 804763a:	bd80      	pop	{r7, pc}

0804763c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 804763c:	b580      	push	{r7, lr}
 804763e:	b088      	sub	sp, #32
 8047640:	af02      	add	r7, sp, #8
 8047642:	60f8      	str	r0, [r7, #12]
 8047644:	60b9      	str	r1, [r7, #8]
 8047646:	603b      	str	r3, [r7, #0]
 8047648:	4613      	mov	r3, r2
 804764a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 804764c:	2300      	movs	r3, #0
 804764e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8047650:	68fb      	ldr	r3, [r7, #12]
 8047652:	685b      	ldr	r3, [r3, #4]
 8047654:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047658:	d112      	bne.n	8047680 <HAL_SPI_Receive+0x44>
 804765a:	68fb      	ldr	r3, [r7, #12]
 804765c:	689b      	ldr	r3, [r3, #8]
 804765e:	2b00      	cmp	r3, #0
 8047660:	d10e      	bne.n	8047680 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8047662:	68fb      	ldr	r3, [r7, #12]
 8047664:	2204      	movs	r2, #4
 8047666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 804766a:	88fa      	ldrh	r2, [r7, #6]
 804766c:	683b      	ldr	r3, [r7, #0]
 804766e:	9300      	str	r3, [sp, #0]
 8047670:	4613      	mov	r3, r2
 8047672:	68ba      	ldr	r2, [r7, #8]
 8047674:	68b9      	ldr	r1, [r7, #8]
 8047676:	68f8      	ldr	r0, [r7, #12]
 8047678:	f000 f8f1 	bl	804785e <HAL_SPI_TransmitReceive>
 804767c:	4603      	mov	r3, r0
 804767e:	e0ea      	b.n	8047856 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8047680:	68fb      	ldr	r3, [r7, #12]
 8047682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8047686:	2b01      	cmp	r3, #1
 8047688:	d101      	bne.n	804768e <HAL_SPI_Receive+0x52>
 804768a:	2302      	movs	r3, #2
 804768c:	e0e3      	b.n	8047856 <HAL_SPI_Receive+0x21a>
 804768e:	68fb      	ldr	r3, [r7, #12]
 8047690:	2201      	movs	r2, #1
 8047692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8047696:	f7fb fb7d 	bl	8042d94 <HAL_GetTick>
 804769a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 804769c:	68fb      	ldr	r3, [r7, #12]
 804769e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80476a2:	b2db      	uxtb	r3, r3
 80476a4:	2b01      	cmp	r3, #1
 80476a6:	d002      	beq.n	80476ae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80476a8:	2302      	movs	r3, #2
 80476aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80476ac:	e0ca      	b.n	8047844 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80476ae:	68bb      	ldr	r3, [r7, #8]
 80476b0:	2b00      	cmp	r3, #0
 80476b2:	d002      	beq.n	80476ba <HAL_SPI_Receive+0x7e>
 80476b4:	88fb      	ldrh	r3, [r7, #6]
 80476b6:	2b00      	cmp	r3, #0
 80476b8:	d102      	bne.n	80476c0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80476ba:	2301      	movs	r3, #1
 80476bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80476be:	e0c1      	b.n	8047844 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80476c0:	68fb      	ldr	r3, [r7, #12]
 80476c2:	2204      	movs	r2, #4
 80476c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80476c8:	68fb      	ldr	r3, [r7, #12]
 80476ca:	2200      	movs	r2, #0
 80476cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80476ce:	68fb      	ldr	r3, [r7, #12]
 80476d0:	68ba      	ldr	r2, [r7, #8]
 80476d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80476d4:	68fb      	ldr	r3, [r7, #12]
 80476d6:	88fa      	ldrh	r2, [r7, #6]
 80476d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80476da:	68fb      	ldr	r3, [r7, #12]
 80476dc:	88fa      	ldrh	r2, [r7, #6]
 80476de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80476e0:	68fb      	ldr	r3, [r7, #12]
 80476e2:	2200      	movs	r2, #0
 80476e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80476e6:	68fb      	ldr	r3, [r7, #12]
 80476e8:	2200      	movs	r2, #0
 80476ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80476ec:	68fb      	ldr	r3, [r7, #12]
 80476ee:	2200      	movs	r2, #0
 80476f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80476f2:	68fb      	ldr	r3, [r7, #12]
 80476f4:	2200      	movs	r2, #0
 80476f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80476f8:	68fb      	ldr	r3, [r7, #12]
 80476fa:	2200      	movs	r2, #0
 80476fc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80476fe:	68fb      	ldr	r3, [r7, #12]
 8047700:	689b      	ldr	r3, [r3, #8]
 8047702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8047706:	d10f      	bne.n	8047728 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8047708:	68fb      	ldr	r3, [r7, #12]
 804770a:	681b      	ldr	r3, [r3, #0]
 804770c:	681a      	ldr	r2, [r3, #0]
 804770e:	68fb      	ldr	r3, [r7, #12]
 8047710:	681b      	ldr	r3, [r3, #0]
 8047712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047716:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8047718:	68fb      	ldr	r3, [r7, #12]
 804771a:	681b      	ldr	r3, [r3, #0]
 804771c:	681a      	ldr	r2, [r3, #0]
 804771e:	68fb      	ldr	r3, [r7, #12]
 8047720:	681b      	ldr	r3, [r3, #0]
 8047722:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8047726:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8047728:	68fb      	ldr	r3, [r7, #12]
 804772a:	681b      	ldr	r3, [r3, #0]
 804772c:	681b      	ldr	r3, [r3, #0]
 804772e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047732:	2b40      	cmp	r3, #64	; 0x40
 8047734:	d007      	beq.n	8047746 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8047736:	68fb      	ldr	r3, [r7, #12]
 8047738:	681b      	ldr	r3, [r3, #0]
 804773a:	681a      	ldr	r2, [r3, #0]
 804773c:	68fb      	ldr	r3, [r7, #12]
 804773e:	681b      	ldr	r3, [r3, #0]
 8047740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8047744:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8047746:	68fb      	ldr	r3, [r7, #12]
 8047748:	68db      	ldr	r3, [r3, #12]
 804774a:	2b00      	cmp	r3, #0
 804774c:	d162      	bne.n	8047814 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 804774e:	e02e      	b.n	80477ae <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8047750:	68fb      	ldr	r3, [r7, #12]
 8047752:	681b      	ldr	r3, [r3, #0]
 8047754:	689b      	ldr	r3, [r3, #8]
 8047756:	f003 0301 	and.w	r3, r3, #1
 804775a:	2b01      	cmp	r3, #1
 804775c:	d115      	bne.n	804778a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 804775e:	68fb      	ldr	r3, [r7, #12]
 8047760:	681b      	ldr	r3, [r3, #0]
 8047762:	f103 020c 	add.w	r2, r3, #12
 8047766:	68fb      	ldr	r3, [r7, #12]
 8047768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804776a:	7812      	ldrb	r2, [r2, #0]
 804776c:	b2d2      	uxtb	r2, r2
 804776e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8047770:	68fb      	ldr	r3, [r7, #12]
 8047772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047774:	1c5a      	adds	r2, r3, #1
 8047776:	68fb      	ldr	r3, [r7, #12]
 8047778:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 804777a:	68fb      	ldr	r3, [r7, #12]
 804777c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804777e:	b29b      	uxth	r3, r3
 8047780:	3b01      	subs	r3, #1
 8047782:	b29a      	uxth	r2, r3
 8047784:	68fb      	ldr	r3, [r7, #12]
 8047786:	87da      	strh	r2, [r3, #62]	; 0x3e
 8047788:	e011      	b.n	80477ae <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 804778a:	f7fb fb03 	bl	8042d94 <HAL_GetTick>
 804778e:	4602      	mov	r2, r0
 8047790:	693b      	ldr	r3, [r7, #16]
 8047792:	1ad3      	subs	r3, r2, r3
 8047794:	683a      	ldr	r2, [r7, #0]
 8047796:	429a      	cmp	r2, r3
 8047798:	d803      	bhi.n	80477a2 <HAL_SPI_Receive+0x166>
 804779a:	683b      	ldr	r3, [r7, #0]
 804779c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80477a0:	d102      	bne.n	80477a8 <HAL_SPI_Receive+0x16c>
 80477a2:	683b      	ldr	r3, [r7, #0]
 80477a4:	2b00      	cmp	r3, #0
 80477a6:	d102      	bne.n	80477ae <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80477a8:	2303      	movs	r3, #3
 80477aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80477ac:	e04a      	b.n	8047844 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80477ae:	68fb      	ldr	r3, [r7, #12]
 80477b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80477b2:	b29b      	uxth	r3, r3
 80477b4:	2b00      	cmp	r3, #0
 80477b6:	d1cb      	bne.n	8047750 <HAL_SPI_Receive+0x114>
 80477b8:	e031      	b.n	804781e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80477ba:	68fb      	ldr	r3, [r7, #12]
 80477bc:	681b      	ldr	r3, [r3, #0]
 80477be:	689b      	ldr	r3, [r3, #8]
 80477c0:	f003 0301 	and.w	r3, r3, #1
 80477c4:	2b01      	cmp	r3, #1
 80477c6:	d113      	bne.n	80477f0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80477c8:	68fb      	ldr	r3, [r7, #12]
 80477ca:	681b      	ldr	r3, [r3, #0]
 80477cc:	68da      	ldr	r2, [r3, #12]
 80477ce:	68fb      	ldr	r3, [r7, #12]
 80477d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80477d2:	b292      	uxth	r2, r2
 80477d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80477d6:	68fb      	ldr	r3, [r7, #12]
 80477d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80477da:	1c9a      	adds	r2, r3, #2
 80477dc:	68fb      	ldr	r3, [r7, #12]
 80477de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80477e0:	68fb      	ldr	r3, [r7, #12]
 80477e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80477e4:	b29b      	uxth	r3, r3
 80477e6:	3b01      	subs	r3, #1
 80477e8:	b29a      	uxth	r2, r3
 80477ea:	68fb      	ldr	r3, [r7, #12]
 80477ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80477ee:	e011      	b.n	8047814 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80477f0:	f7fb fad0 	bl	8042d94 <HAL_GetTick>
 80477f4:	4602      	mov	r2, r0
 80477f6:	693b      	ldr	r3, [r7, #16]
 80477f8:	1ad3      	subs	r3, r2, r3
 80477fa:	683a      	ldr	r2, [r7, #0]
 80477fc:	429a      	cmp	r2, r3
 80477fe:	d803      	bhi.n	8047808 <HAL_SPI_Receive+0x1cc>
 8047800:	683b      	ldr	r3, [r7, #0]
 8047802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047806:	d102      	bne.n	804780e <HAL_SPI_Receive+0x1d2>
 8047808:	683b      	ldr	r3, [r7, #0]
 804780a:	2b00      	cmp	r3, #0
 804780c:	d102      	bne.n	8047814 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 804780e:	2303      	movs	r3, #3
 8047810:	75fb      	strb	r3, [r7, #23]
          goto error;
 8047812:	e017      	b.n	8047844 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8047814:	68fb      	ldr	r3, [r7, #12]
 8047816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047818:	b29b      	uxth	r3, r3
 804781a:	2b00      	cmp	r3, #0
 804781c:	d1cd      	bne.n	80477ba <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 804781e:	693a      	ldr	r2, [r7, #16]
 8047820:	6839      	ldr	r1, [r7, #0]
 8047822:	68f8      	ldr	r0, [r7, #12]
 8047824:	f000 fa54 	bl	8047cd0 <SPI_EndRxTransaction>
 8047828:	4603      	mov	r3, r0
 804782a:	2b00      	cmp	r3, #0
 804782c:	d002      	beq.n	8047834 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 804782e:	68fb      	ldr	r3, [r7, #12]
 8047830:	2220      	movs	r2, #32
 8047832:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8047834:	68fb      	ldr	r3, [r7, #12]
 8047836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047838:	2b00      	cmp	r3, #0
 804783a:	d002      	beq.n	8047842 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 804783c:	2301      	movs	r3, #1
 804783e:	75fb      	strb	r3, [r7, #23]
 8047840:	e000      	b.n	8047844 <HAL_SPI_Receive+0x208>
  }

error :
 8047842:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8047844:	68fb      	ldr	r3, [r7, #12]
 8047846:	2201      	movs	r2, #1
 8047848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 804784c:	68fb      	ldr	r3, [r7, #12]
 804784e:	2200      	movs	r2, #0
 8047850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8047854:	7dfb      	ldrb	r3, [r7, #23]
}
 8047856:	4618      	mov	r0, r3
 8047858:	3718      	adds	r7, #24
 804785a:	46bd      	mov	sp, r7
 804785c:	bd80      	pop	{r7, pc}

0804785e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 804785e:	b580      	push	{r7, lr}
 8047860:	b08c      	sub	sp, #48	; 0x30
 8047862:	af00      	add	r7, sp, #0
 8047864:	60f8      	str	r0, [r7, #12]
 8047866:	60b9      	str	r1, [r7, #8]
 8047868:	607a      	str	r2, [r7, #4]
 804786a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 804786c:	2301      	movs	r3, #1
 804786e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8047870:	2300      	movs	r3, #0
 8047872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8047876:	68fb      	ldr	r3, [r7, #12]
 8047878:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 804787c:	2b01      	cmp	r3, #1
 804787e:	d101      	bne.n	8047884 <HAL_SPI_TransmitReceive+0x26>
 8047880:	2302      	movs	r3, #2
 8047882:	e18a      	b.n	8047b9a <HAL_SPI_TransmitReceive+0x33c>
 8047884:	68fb      	ldr	r3, [r7, #12]
 8047886:	2201      	movs	r2, #1
 8047888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 804788c:	f7fb fa82 	bl	8042d94 <HAL_GetTick>
 8047890:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8047892:	68fb      	ldr	r3, [r7, #12]
 8047894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8047898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 804789c:	68fb      	ldr	r3, [r7, #12]
 804789e:	685b      	ldr	r3, [r3, #4]
 80478a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80478a2:	887b      	ldrh	r3, [r7, #2]
 80478a4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80478a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80478aa:	2b01      	cmp	r3, #1
 80478ac:	d00f      	beq.n	80478ce <HAL_SPI_TransmitReceive+0x70>
 80478ae:	69fb      	ldr	r3, [r7, #28]
 80478b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80478b4:	d107      	bne.n	80478c6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80478b6:	68fb      	ldr	r3, [r7, #12]
 80478b8:	689b      	ldr	r3, [r3, #8]
 80478ba:	2b00      	cmp	r3, #0
 80478bc:	d103      	bne.n	80478c6 <HAL_SPI_TransmitReceive+0x68>
 80478be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80478c2:	2b04      	cmp	r3, #4
 80478c4:	d003      	beq.n	80478ce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80478c6:	2302      	movs	r3, #2
 80478c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80478cc:	e15b      	b.n	8047b86 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80478ce:	68bb      	ldr	r3, [r7, #8]
 80478d0:	2b00      	cmp	r3, #0
 80478d2:	d005      	beq.n	80478e0 <HAL_SPI_TransmitReceive+0x82>
 80478d4:	687b      	ldr	r3, [r7, #4]
 80478d6:	2b00      	cmp	r3, #0
 80478d8:	d002      	beq.n	80478e0 <HAL_SPI_TransmitReceive+0x82>
 80478da:	887b      	ldrh	r3, [r7, #2]
 80478dc:	2b00      	cmp	r3, #0
 80478de:	d103      	bne.n	80478e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80478e0:	2301      	movs	r3, #1
 80478e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80478e6:	e14e      	b.n	8047b86 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80478e8:	68fb      	ldr	r3, [r7, #12]
 80478ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80478ee:	b2db      	uxtb	r3, r3
 80478f0:	2b04      	cmp	r3, #4
 80478f2:	d003      	beq.n	80478fc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80478f4:	68fb      	ldr	r3, [r7, #12]
 80478f6:	2205      	movs	r2, #5
 80478f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80478fc:	68fb      	ldr	r3, [r7, #12]
 80478fe:	2200      	movs	r2, #0
 8047900:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8047902:	68fb      	ldr	r3, [r7, #12]
 8047904:	687a      	ldr	r2, [r7, #4]
 8047906:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8047908:	68fb      	ldr	r3, [r7, #12]
 804790a:	887a      	ldrh	r2, [r7, #2]
 804790c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 804790e:	68fb      	ldr	r3, [r7, #12]
 8047910:	887a      	ldrh	r2, [r7, #2]
 8047912:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8047914:	68fb      	ldr	r3, [r7, #12]
 8047916:	68ba      	ldr	r2, [r7, #8]
 8047918:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 804791a:	68fb      	ldr	r3, [r7, #12]
 804791c:	887a      	ldrh	r2, [r7, #2]
 804791e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8047920:	68fb      	ldr	r3, [r7, #12]
 8047922:	887a      	ldrh	r2, [r7, #2]
 8047924:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8047926:	68fb      	ldr	r3, [r7, #12]
 8047928:	2200      	movs	r2, #0
 804792a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 804792c:	68fb      	ldr	r3, [r7, #12]
 804792e:	2200      	movs	r2, #0
 8047930:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8047932:	68fb      	ldr	r3, [r7, #12]
 8047934:	681b      	ldr	r3, [r3, #0]
 8047936:	681b      	ldr	r3, [r3, #0]
 8047938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804793c:	2b40      	cmp	r3, #64	; 0x40
 804793e:	d007      	beq.n	8047950 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8047940:	68fb      	ldr	r3, [r7, #12]
 8047942:	681b      	ldr	r3, [r3, #0]
 8047944:	681a      	ldr	r2, [r3, #0]
 8047946:	68fb      	ldr	r3, [r7, #12]
 8047948:	681b      	ldr	r3, [r3, #0]
 804794a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 804794e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8047950:	68fb      	ldr	r3, [r7, #12]
 8047952:	68db      	ldr	r3, [r3, #12]
 8047954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8047958:	d178      	bne.n	8047a4c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 804795a:	68fb      	ldr	r3, [r7, #12]
 804795c:	685b      	ldr	r3, [r3, #4]
 804795e:	2b00      	cmp	r3, #0
 8047960:	d002      	beq.n	8047968 <HAL_SPI_TransmitReceive+0x10a>
 8047962:	8b7b      	ldrh	r3, [r7, #26]
 8047964:	2b01      	cmp	r3, #1
 8047966:	d166      	bne.n	8047a36 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8047968:	68fb      	ldr	r3, [r7, #12]
 804796a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804796c:	881a      	ldrh	r2, [r3, #0]
 804796e:	68fb      	ldr	r3, [r7, #12]
 8047970:	681b      	ldr	r3, [r3, #0]
 8047972:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8047974:	68fb      	ldr	r3, [r7, #12]
 8047976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047978:	1c9a      	adds	r2, r3, #2
 804797a:	68fb      	ldr	r3, [r7, #12]
 804797c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 804797e:	68fb      	ldr	r3, [r7, #12]
 8047980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047982:	b29b      	uxth	r3, r3
 8047984:	3b01      	subs	r3, #1
 8047986:	b29a      	uxth	r2, r3
 8047988:	68fb      	ldr	r3, [r7, #12]
 804798a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804798c:	e053      	b.n	8047a36 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 804798e:	68fb      	ldr	r3, [r7, #12]
 8047990:	681b      	ldr	r3, [r3, #0]
 8047992:	689b      	ldr	r3, [r3, #8]
 8047994:	f003 0302 	and.w	r3, r3, #2
 8047998:	2b02      	cmp	r3, #2
 804799a:	d11b      	bne.n	80479d4 <HAL_SPI_TransmitReceive+0x176>
 804799c:	68fb      	ldr	r3, [r7, #12]
 804799e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80479a0:	b29b      	uxth	r3, r3
 80479a2:	2b00      	cmp	r3, #0
 80479a4:	d016      	beq.n	80479d4 <HAL_SPI_TransmitReceive+0x176>
 80479a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80479a8:	2b01      	cmp	r3, #1
 80479aa:	d113      	bne.n	80479d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80479ac:	68fb      	ldr	r3, [r7, #12]
 80479ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80479b0:	881a      	ldrh	r2, [r3, #0]
 80479b2:	68fb      	ldr	r3, [r7, #12]
 80479b4:	681b      	ldr	r3, [r3, #0]
 80479b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80479b8:	68fb      	ldr	r3, [r7, #12]
 80479ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80479bc:	1c9a      	adds	r2, r3, #2
 80479be:	68fb      	ldr	r3, [r7, #12]
 80479c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80479c2:	68fb      	ldr	r3, [r7, #12]
 80479c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80479c6:	b29b      	uxth	r3, r3
 80479c8:	3b01      	subs	r3, #1
 80479ca:	b29a      	uxth	r2, r3
 80479cc:	68fb      	ldr	r3, [r7, #12]
 80479ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80479d0:	2300      	movs	r3, #0
 80479d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80479d4:	68fb      	ldr	r3, [r7, #12]
 80479d6:	681b      	ldr	r3, [r3, #0]
 80479d8:	689b      	ldr	r3, [r3, #8]
 80479da:	f003 0301 	and.w	r3, r3, #1
 80479de:	2b01      	cmp	r3, #1
 80479e0:	d119      	bne.n	8047a16 <HAL_SPI_TransmitReceive+0x1b8>
 80479e2:	68fb      	ldr	r3, [r7, #12]
 80479e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80479e6:	b29b      	uxth	r3, r3
 80479e8:	2b00      	cmp	r3, #0
 80479ea:	d014      	beq.n	8047a16 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80479ec:	68fb      	ldr	r3, [r7, #12]
 80479ee:	681b      	ldr	r3, [r3, #0]
 80479f0:	68da      	ldr	r2, [r3, #12]
 80479f2:	68fb      	ldr	r3, [r7, #12]
 80479f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80479f6:	b292      	uxth	r2, r2
 80479f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80479fa:	68fb      	ldr	r3, [r7, #12]
 80479fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80479fe:	1c9a      	adds	r2, r3, #2
 8047a00:	68fb      	ldr	r3, [r7, #12]
 8047a02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8047a04:	68fb      	ldr	r3, [r7, #12]
 8047a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047a08:	b29b      	uxth	r3, r3
 8047a0a:	3b01      	subs	r3, #1
 8047a0c:	b29a      	uxth	r2, r3
 8047a0e:	68fb      	ldr	r3, [r7, #12]
 8047a10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8047a12:	2301      	movs	r3, #1
 8047a14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8047a16:	f7fb f9bd 	bl	8042d94 <HAL_GetTick>
 8047a1a:	4602      	mov	r2, r0
 8047a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047a1e:	1ad3      	subs	r3, r2, r3
 8047a20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8047a22:	429a      	cmp	r2, r3
 8047a24:	d807      	bhi.n	8047a36 <HAL_SPI_TransmitReceive+0x1d8>
 8047a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047a2c:	d003      	beq.n	8047a36 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8047a2e:	2303      	movs	r3, #3
 8047a30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8047a34:	e0a7      	b.n	8047b86 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047a36:	68fb      	ldr	r3, [r7, #12]
 8047a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047a3a:	b29b      	uxth	r3, r3
 8047a3c:	2b00      	cmp	r3, #0
 8047a3e:	d1a6      	bne.n	804798e <HAL_SPI_TransmitReceive+0x130>
 8047a40:	68fb      	ldr	r3, [r7, #12]
 8047a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047a44:	b29b      	uxth	r3, r3
 8047a46:	2b00      	cmp	r3, #0
 8047a48:	d1a1      	bne.n	804798e <HAL_SPI_TransmitReceive+0x130>
 8047a4a:	e07c      	b.n	8047b46 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8047a4c:	68fb      	ldr	r3, [r7, #12]
 8047a4e:	685b      	ldr	r3, [r3, #4]
 8047a50:	2b00      	cmp	r3, #0
 8047a52:	d002      	beq.n	8047a5a <HAL_SPI_TransmitReceive+0x1fc>
 8047a54:	8b7b      	ldrh	r3, [r7, #26]
 8047a56:	2b01      	cmp	r3, #1
 8047a58:	d16b      	bne.n	8047b32 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8047a5a:	68fb      	ldr	r3, [r7, #12]
 8047a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8047a5e:	68fb      	ldr	r3, [r7, #12]
 8047a60:	681b      	ldr	r3, [r3, #0]
 8047a62:	330c      	adds	r3, #12
 8047a64:	7812      	ldrb	r2, [r2, #0]
 8047a66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8047a68:	68fb      	ldr	r3, [r7, #12]
 8047a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047a6c:	1c5a      	adds	r2, r3, #1
 8047a6e:	68fb      	ldr	r3, [r7, #12]
 8047a70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8047a72:	68fb      	ldr	r3, [r7, #12]
 8047a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047a76:	b29b      	uxth	r3, r3
 8047a78:	3b01      	subs	r3, #1
 8047a7a:	b29a      	uxth	r2, r3
 8047a7c:	68fb      	ldr	r3, [r7, #12]
 8047a7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047a80:	e057      	b.n	8047b32 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8047a82:	68fb      	ldr	r3, [r7, #12]
 8047a84:	681b      	ldr	r3, [r3, #0]
 8047a86:	689b      	ldr	r3, [r3, #8]
 8047a88:	f003 0302 	and.w	r3, r3, #2
 8047a8c:	2b02      	cmp	r3, #2
 8047a8e:	d11c      	bne.n	8047aca <HAL_SPI_TransmitReceive+0x26c>
 8047a90:	68fb      	ldr	r3, [r7, #12]
 8047a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047a94:	b29b      	uxth	r3, r3
 8047a96:	2b00      	cmp	r3, #0
 8047a98:	d017      	beq.n	8047aca <HAL_SPI_TransmitReceive+0x26c>
 8047a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8047a9c:	2b01      	cmp	r3, #1
 8047a9e:	d114      	bne.n	8047aca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8047aa0:	68fb      	ldr	r3, [r7, #12]
 8047aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8047aa4:	68fb      	ldr	r3, [r7, #12]
 8047aa6:	681b      	ldr	r3, [r3, #0]
 8047aa8:	330c      	adds	r3, #12
 8047aaa:	7812      	ldrb	r2, [r2, #0]
 8047aac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8047aae:	68fb      	ldr	r3, [r7, #12]
 8047ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047ab2:	1c5a      	adds	r2, r3, #1
 8047ab4:	68fb      	ldr	r3, [r7, #12]
 8047ab6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8047ab8:	68fb      	ldr	r3, [r7, #12]
 8047aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047abc:	b29b      	uxth	r3, r3
 8047abe:	3b01      	subs	r3, #1
 8047ac0:	b29a      	uxth	r2, r3
 8047ac2:	68fb      	ldr	r3, [r7, #12]
 8047ac4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8047ac6:	2300      	movs	r3, #0
 8047ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8047aca:	68fb      	ldr	r3, [r7, #12]
 8047acc:	681b      	ldr	r3, [r3, #0]
 8047ace:	689b      	ldr	r3, [r3, #8]
 8047ad0:	f003 0301 	and.w	r3, r3, #1
 8047ad4:	2b01      	cmp	r3, #1
 8047ad6:	d119      	bne.n	8047b0c <HAL_SPI_TransmitReceive+0x2ae>
 8047ad8:	68fb      	ldr	r3, [r7, #12]
 8047ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047adc:	b29b      	uxth	r3, r3
 8047ade:	2b00      	cmp	r3, #0
 8047ae0:	d014      	beq.n	8047b0c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8047ae2:	68fb      	ldr	r3, [r7, #12]
 8047ae4:	681b      	ldr	r3, [r3, #0]
 8047ae6:	68da      	ldr	r2, [r3, #12]
 8047ae8:	68fb      	ldr	r3, [r7, #12]
 8047aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047aec:	b2d2      	uxtb	r2, r2
 8047aee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8047af0:	68fb      	ldr	r3, [r7, #12]
 8047af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047af4:	1c5a      	adds	r2, r3, #1
 8047af6:	68fb      	ldr	r3, [r7, #12]
 8047af8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8047afa:	68fb      	ldr	r3, [r7, #12]
 8047afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047afe:	b29b      	uxth	r3, r3
 8047b00:	3b01      	subs	r3, #1
 8047b02:	b29a      	uxth	r2, r3
 8047b04:	68fb      	ldr	r3, [r7, #12]
 8047b06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8047b08:	2301      	movs	r3, #1
 8047b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8047b0c:	f7fb f942 	bl	8042d94 <HAL_GetTick>
 8047b10:	4602      	mov	r2, r0
 8047b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047b14:	1ad3      	subs	r3, r2, r3
 8047b16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8047b18:	429a      	cmp	r2, r3
 8047b1a:	d803      	bhi.n	8047b24 <HAL_SPI_TransmitReceive+0x2c6>
 8047b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047b22:	d102      	bne.n	8047b2a <HAL_SPI_TransmitReceive+0x2cc>
 8047b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047b26:	2b00      	cmp	r3, #0
 8047b28:	d103      	bne.n	8047b32 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8047b2a:	2303      	movs	r3, #3
 8047b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8047b30:	e029      	b.n	8047b86 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047b32:	68fb      	ldr	r3, [r7, #12]
 8047b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047b36:	b29b      	uxth	r3, r3
 8047b38:	2b00      	cmp	r3, #0
 8047b3a:	d1a2      	bne.n	8047a82 <HAL_SPI_TransmitReceive+0x224>
 8047b3c:	68fb      	ldr	r3, [r7, #12]
 8047b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047b40:	b29b      	uxth	r3, r3
 8047b42:	2b00      	cmp	r3, #0
 8047b44:	d19d      	bne.n	8047a82 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8047b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8047b48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8047b4a:	68f8      	ldr	r0, [r7, #12]
 8047b4c:	f000 f926 	bl	8047d9c <SPI_EndRxTxTransaction>
 8047b50:	4603      	mov	r3, r0
 8047b52:	2b00      	cmp	r3, #0
 8047b54:	d006      	beq.n	8047b64 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8047b56:	2301      	movs	r3, #1
 8047b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8047b5c:	68fb      	ldr	r3, [r7, #12]
 8047b5e:	2220      	movs	r2, #32
 8047b60:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8047b62:	e010      	b.n	8047b86 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8047b64:	68fb      	ldr	r3, [r7, #12]
 8047b66:	689b      	ldr	r3, [r3, #8]
 8047b68:	2b00      	cmp	r3, #0
 8047b6a:	d10b      	bne.n	8047b84 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8047b6c:	2300      	movs	r3, #0
 8047b6e:	617b      	str	r3, [r7, #20]
 8047b70:	68fb      	ldr	r3, [r7, #12]
 8047b72:	681b      	ldr	r3, [r3, #0]
 8047b74:	68db      	ldr	r3, [r3, #12]
 8047b76:	617b      	str	r3, [r7, #20]
 8047b78:	68fb      	ldr	r3, [r7, #12]
 8047b7a:	681b      	ldr	r3, [r3, #0]
 8047b7c:	689b      	ldr	r3, [r3, #8]
 8047b7e:	617b      	str	r3, [r7, #20]
 8047b80:	697b      	ldr	r3, [r7, #20]
 8047b82:	e000      	b.n	8047b86 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8047b84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8047b86:	68fb      	ldr	r3, [r7, #12]
 8047b88:	2201      	movs	r2, #1
 8047b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8047b8e:	68fb      	ldr	r3, [r7, #12]
 8047b90:	2200      	movs	r2, #0
 8047b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8047b96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8047b9a:	4618      	mov	r0, r3
 8047b9c:	3730      	adds	r7, #48	; 0x30
 8047b9e:	46bd      	mov	sp, r7
 8047ba0:	bd80      	pop	{r7, pc}

08047ba2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8047ba2:	b480      	push	{r7}
 8047ba4:	b083      	sub	sp, #12
 8047ba6:	af00      	add	r7, sp, #0
 8047ba8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8047baa:	687b      	ldr	r3, [r7, #4]
 8047bac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8047bb0:	b2db      	uxtb	r3, r3
}
 8047bb2:	4618      	mov	r0, r3
 8047bb4:	370c      	adds	r7, #12
 8047bb6:	46bd      	mov	sp, r7
 8047bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047bbc:	4770      	bx	lr
	...

08047bc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8047bc0:	b580      	push	{r7, lr}
 8047bc2:	b088      	sub	sp, #32
 8047bc4:	af00      	add	r7, sp, #0
 8047bc6:	60f8      	str	r0, [r7, #12]
 8047bc8:	60b9      	str	r1, [r7, #8]
 8047bca:	603b      	str	r3, [r7, #0]
 8047bcc:	4613      	mov	r3, r2
 8047bce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8047bd0:	f7fb f8e0 	bl	8042d94 <HAL_GetTick>
 8047bd4:	4602      	mov	r2, r0
 8047bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8047bd8:	1a9b      	subs	r3, r3, r2
 8047bda:	683a      	ldr	r2, [r7, #0]
 8047bdc:	4413      	add	r3, r2
 8047bde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8047be0:	f7fb f8d8 	bl	8042d94 <HAL_GetTick>
 8047be4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8047be6:	4b39      	ldr	r3, [pc, #228]	; (8047ccc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8047be8:	681b      	ldr	r3, [r3, #0]
 8047bea:	015b      	lsls	r3, r3, #5
 8047bec:	0d1b      	lsrs	r3, r3, #20
 8047bee:	69fa      	ldr	r2, [r7, #28]
 8047bf0:	fb02 f303 	mul.w	r3, r2, r3
 8047bf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8047bf6:	e054      	b.n	8047ca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8047bf8:	683b      	ldr	r3, [r7, #0]
 8047bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047bfe:	d050      	beq.n	8047ca2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8047c00:	f7fb f8c8 	bl	8042d94 <HAL_GetTick>
 8047c04:	4602      	mov	r2, r0
 8047c06:	69bb      	ldr	r3, [r7, #24]
 8047c08:	1ad3      	subs	r3, r2, r3
 8047c0a:	69fa      	ldr	r2, [r7, #28]
 8047c0c:	429a      	cmp	r2, r3
 8047c0e:	d902      	bls.n	8047c16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8047c10:	69fb      	ldr	r3, [r7, #28]
 8047c12:	2b00      	cmp	r3, #0
 8047c14:	d13d      	bne.n	8047c92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8047c16:	68fb      	ldr	r3, [r7, #12]
 8047c18:	681b      	ldr	r3, [r3, #0]
 8047c1a:	685a      	ldr	r2, [r3, #4]
 8047c1c:	68fb      	ldr	r3, [r7, #12]
 8047c1e:	681b      	ldr	r3, [r3, #0]
 8047c20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8047c24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8047c26:	68fb      	ldr	r3, [r7, #12]
 8047c28:	685b      	ldr	r3, [r3, #4]
 8047c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047c2e:	d111      	bne.n	8047c54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8047c30:	68fb      	ldr	r3, [r7, #12]
 8047c32:	689b      	ldr	r3, [r3, #8]
 8047c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8047c38:	d004      	beq.n	8047c44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8047c3a:	68fb      	ldr	r3, [r7, #12]
 8047c3c:	689b      	ldr	r3, [r3, #8]
 8047c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8047c42:	d107      	bne.n	8047c54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8047c44:	68fb      	ldr	r3, [r7, #12]
 8047c46:	681b      	ldr	r3, [r3, #0]
 8047c48:	681a      	ldr	r2, [r3, #0]
 8047c4a:	68fb      	ldr	r3, [r7, #12]
 8047c4c:	681b      	ldr	r3, [r3, #0]
 8047c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047c52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8047c54:	68fb      	ldr	r3, [r7, #12]
 8047c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8047c5c:	d10f      	bne.n	8047c7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8047c5e:	68fb      	ldr	r3, [r7, #12]
 8047c60:	681b      	ldr	r3, [r3, #0]
 8047c62:	681a      	ldr	r2, [r3, #0]
 8047c64:	68fb      	ldr	r3, [r7, #12]
 8047c66:	681b      	ldr	r3, [r3, #0]
 8047c68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8047c6c:	601a      	str	r2, [r3, #0]
 8047c6e:	68fb      	ldr	r3, [r7, #12]
 8047c70:	681b      	ldr	r3, [r3, #0]
 8047c72:	681a      	ldr	r2, [r3, #0]
 8047c74:	68fb      	ldr	r3, [r7, #12]
 8047c76:	681b      	ldr	r3, [r3, #0]
 8047c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8047c7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8047c7e:	68fb      	ldr	r3, [r7, #12]
 8047c80:	2201      	movs	r2, #1
 8047c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8047c86:	68fb      	ldr	r3, [r7, #12]
 8047c88:	2200      	movs	r2, #0
 8047c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8047c8e:	2303      	movs	r3, #3
 8047c90:	e017      	b.n	8047cc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8047c92:	697b      	ldr	r3, [r7, #20]
 8047c94:	2b00      	cmp	r3, #0
 8047c96:	d101      	bne.n	8047c9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8047c98:	2300      	movs	r3, #0
 8047c9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8047c9c:	697b      	ldr	r3, [r7, #20]
 8047c9e:	3b01      	subs	r3, #1
 8047ca0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8047ca2:	68fb      	ldr	r3, [r7, #12]
 8047ca4:	681b      	ldr	r3, [r3, #0]
 8047ca6:	689a      	ldr	r2, [r3, #8]
 8047ca8:	68bb      	ldr	r3, [r7, #8]
 8047caa:	4013      	ands	r3, r2
 8047cac:	68ba      	ldr	r2, [r7, #8]
 8047cae:	429a      	cmp	r2, r3
 8047cb0:	bf0c      	ite	eq
 8047cb2:	2301      	moveq	r3, #1
 8047cb4:	2300      	movne	r3, #0
 8047cb6:	b2db      	uxtb	r3, r3
 8047cb8:	461a      	mov	r2, r3
 8047cba:	79fb      	ldrb	r3, [r7, #7]
 8047cbc:	429a      	cmp	r2, r3
 8047cbe:	d19b      	bne.n	8047bf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8047cc0:	2300      	movs	r3, #0
}
 8047cc2:	4618      	mov	r0, r3
 8047cc4:	3720      	adds	r7, #32
 8047cc6:	46bd      	mov	sp, r7
 8047cc8:	bd80      	pop	{r7, pc}
 8047cca:	bf00      	nop
 8047ccc:	20000000 	.word	0x20000000

08047cd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8047cd0:	b580      	push	{r7, lr}
 8047cd2:	b086      	sub	sp, #24
 8047cd4:	af02      	add	r7, sp, #8
 8047cd6:	60f8      	str	r0, [r7, #12]
 8047cd8:	60b9      	str	r1, [r7, #8]
 8047cda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8047cdc:	68fb      	ldr	r3, [r7, #12]
 8047cde:	685b      	ldr	r3, [r3, #4]
 8047ce0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047ce4:	d111      	bne.n	8047d0a <SPI_EndRxTransaction+0x3a>
 8047ce6:	68fb      	ldr	r3, [r7, #12]
 8047ce8:	689b      	ldr	r3, [r3, #8]
 8047cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8047cee:	d004      	beq.n	8047cfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8047cf0:	68fb      	ldr	r3, [r7, #12]
 8047cf2:	689b      	ldr	r3, [r3, #8]
 8047cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8047cf8:	d107      	bne.n	8047d0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8047cfa:	68fb      	ldr	r3, [r7, #12]
 8047cfc:	681b      	ldr	r3, [r3, #0]
 8047cfe:	681a      	ldr	r2, [r3, #0]
 8047d00:	68fb      	ldr	r3, [r7, #12]
 8047d02:	681b      	ldr	r3, [r3, #0]
 8047d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047d08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8047d0a:	68fb      	ldr	r3, [r7, #12]
 8047d0c:	685b      	ldr	r3, [r3, #4]
 8047d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047d12:	d12a      	bne.n	8047d6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8047d14:	68fb      	ldr	r3, [r7, #12]
 8047d16:	689b      	ldr	r3, [r3, #8]
 8047d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8047d1c:	d012      	beq.n	8047d44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8047d1e:	687b      	ldr	r3, [r7, #4]
 8047d20:	9300      	str	r3, [sp, #0]
 8047d22:	68bb      	ldr	r3, [r7, #8]
 8047d24:	2200      	movs	r2, #0
 8047d26:	2180      	movs	r1, #128	; 0x80
 8047d28:	68f8      	ldr	r0, [r7, #12]
 8047d2a:	f7ff ff49 	bl	8047bc0 <SPI_WaitFlagStateUntilTimeout>
 8047d2e:	4603      	mov	r3, r0
 8047d30:	2b00      	cmp	r3, #0
 8047d32:	d02d      	beq.n	8047d90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047d34:	68fb      	ldr	r3, [r7, #12]
 8047d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047d38:	f043 0220 	orr.w	r2, r3, #32
 8047d3c:	68fb      	ldr	r3, [r7, #12]
 8047d3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8047d40:	2303      	movs	r3, #3
 8047d42:	e026      	b.n	8047d92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8047d44:	687b      	ldr	r3, [r7, #4]
 8047d46:	9300      	str	r3, [sp, #0]
 8047d48:	68bb      	ldr	r3, [r7, #8]
 8047d4a:	2200      	movs	r2, #0
 8047d4c:	2101      	movs	r1, #1
 8047d4e:	68f8      	ldr	r0, [r7, #12]
 8047d50:	f7ff ff36 	bl	8047bc0 <SPI_WaitFlagStateUntilTimeout>
 8047d54:	4603      	mov	r3, r0
 8047d56:	2b00      	cmp	r3, #0
 8047d58:	d01a      	beq.n	8047d90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047d5a:	68fb      	ldr	r3, [r7, #12]
 8047d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047d5e:	f043 0220 	orr.w	r2, r3, #32
 8047d62:	68fb      	ldr	r3, [r7, #12]
 8047d64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8047d66:	2303      	movs	r3, #3
 8047d68:	e013      	b.n	8047d92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8047d6a:	687b      	ldr	r3, [r7, #4]
 8047d6c:	9300      	str	r3, [sp, #0]
 8047d6e:	68bb      	ldr	r3, [r7, #8]
 8047d70:	2200      	movs	r2, #0
 8047d72:	2101      	movs	r1, #1
 8047d74:	68f8      	ldr	r0, [r7, #12]
 8047d76:	f7ff ff23 	bl	8047bc0 <SPI_WaitFlagStateUntilTimeout>
 8047d7a:	4603      	mov	r3, r0
 8047d7c:	2b00      	cmp	r3, #0
 8047d7e:	d007      	beq.n	8047d90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047d80:	68fb      	ldr	r3, [r7, #12]
 8047d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047d84:	f043 0220 	orr.w	r2, r3, #32
 8047d88:	68fb      	ldr	r3, [r7, #12]
 8047d8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8047d8c:	2303      	movs	r3, #3
 8047d8e:	e000      	b.n	8047d92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8047d90:	2300      	movs	r3, #0
}
 8047d92:	4618      	mov	r0, r3
 8047d94:	3710      	adds	r7, #16
 8047d96:	46bd      	mov	sp, r7
 8047d98:	bd80      	pop	{r7, pc}
	...

08047d9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8047d9c:	b580      	push	{r7, lr}
 8047d9e:	b088      	sub	sp, #32
 8047da0:	af02      	add	r7, sp, #8
 8047da2:	60f8      	str	r0, [r7, #12]
 8047da4:	60b9      	str	r1, [r7, #8]
 8047da6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8047da8:	4b1b      	ldr	r3, [pc, #108]	; (8047e18 <SPI_EndRxTxTransaction+0x7c>)
 8047daa:	681b      	ldr	r3, [r3, #0]
 8047dac:	4a1b      	ldr	r2, [pc, #108]	; (8047e1c <SPI_EndRxTxTransaction+0x80>)
 8047dae:	fba2 2303 	umull	r2, r3, r2, r3
 8047db2:	0d5b      	lsrs	r3, r3, #21
 8047db4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8047db8:	fb02 f303 	mul.w	r3, r2, r3
 8047dbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8047dbe:	68fb      	ldr	r3, [r7, #12]
 8047dc0:	685b      	ldr	r3, [r3, #4]
 8047dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047dc6:	d112      	bne.n	8047dee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8047dc8:	687b      	ldr	r3, [r7, #4]
 8047dca:	9300      	str	r3, [sp, #0]
 8047dcc:	68bb      	ldr	r3, [r7, #8]
 8047dce:	2200      	movs	r2, #0
 8047dd0:	2180      	movs	r1, #128	; 0x80
 8047dd2:	68f8      	ldr	r0, [r7, #12]
 8047dd4:	f7ff fef4 	bl	8047bc0 <SPI_WaitFlagStateUntilTimeout>
 8047dd8:	4603      	mov	r3, r0
 8047dda:	2b00      	cmp	r3, #0
 8047ddc:	d016      	beq.n	8047e0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047dde:	68fb      	ldr	r3, [r7, #12]
 8047de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047de2:	f043 0220 	orr.w	r2, r3, #32
 8047de6:	68fb      	ldr	r3, [r7, #12]
 8047de8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8047dea:	2303      	movs	r3, #3
 8047dec:	e00f      	b.n	8047e0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8047dee:	697b      	ldr	r3, [r7, #20]
 8047df0:	2b00      	cmp	r3, #0
 8047df2:	d00a      	beq.n	8047e0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8047df4:	697b      	ldr	r3, [r7, #20]
 8047df6:	3b01      	subs	r3, #1
 8047df8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8047dfa:	68fb      	ldr	r3, [r7, #12]
 8047dfc:	681b      	ldr	r3, [r3, #0]
 8047dfe:	689b      	ldr	r3, [r3, #8]
 8047e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8047e04:	2b80      	cmp	r3, #128	; 0x80
 8047e06:	d0f2      	beq.n	8047dee <SPI_EndRxTxTransaction+0x52>
 8047e08:	e000      	b.n	8047e0c <SPI_EndRxTxTransaction+0x70>
        break;
 8047e0a:	bf00      	nop
  }

  return HAL_OK;
 8047e0c:	2300      	movs	r3, #0
}
 8047e0e:	4618      	mov	r0, r3
 8047e10:	3718      	adds	r7, #24
 8047e12:	46bd      	mov	sp, r7
 8047e14:	bd80      	pop	{r7, pc}
 8047e16:	bf00      	nop
 8047e18:	20000000 	.word	0x20000000
 8047e1c:	165e9f81 	.word	0x165e9f81

08047e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8047e20:	b580      	push	{r7, lr}
 8047e22:	b082      	sub	sp, #8
 8047e24:	af00      	add	r7, sp, #0
 8047e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8047e28:	687b      	ldr	r3, [r7, #4]
 8047e2a:	2b00      	cmp	r3, #0
 8047e2c:	d101      	bne.n	8047e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8047e2e:	2301      	movs	r3, #1
 8047e30:	e041      	b.n	8047eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8047e32:	687b      	ldr	r3, [r7, #4]
 8047e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8047e38:	b2db      	uxtb	r3, r3
 8047e3a:	2b00      	cmp	r3, #0
 8047e3c:	d106      	bne.n	8047e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8047e3e:	687b      	ldr	r3, [r7, #4]
 8047e40:	2200      	movs	r2, #0
 8047e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8047e46:	6878      	ldr	r0, [r7, #4]
 8047e48:	f7f9 faba 	bl	80413c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8047e4c:	687b      	ldr	r3, [r7, #4]
 8047e4e:	2202      	movs	r2, #2
 8047e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8047e54:	687b      	ldr	r3, [r7, #4]
 8047e56:	681a      	ldr	r2, [r3, #0]
 8047e58:	687b      	ldr	r3, [r7, #4]
 8047e5a:	3304      	adds	r3, #4
 8047e5c:	4619      	mov	r1, r3
 8047e5e:	4610      	mov	r0, r2
 8047e60:	f000 fa96 	bl	8048390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8047e64:	687b      	ldr	r3, [r7, #4]
 8047e66:	2201      	movs	r2, #1
 8047e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8047e6c:	687b      	ldr	r3, [r7, #4]
 8047e6e:	2201      	movs	r2, #1
 8047e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8047e74:	687b      	ldr	r3, [r7, #4]
 8047e76:	2201      	movs	r2, #1
 8047e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8047e7c:	687b      	ldr	r3, [r7, #4]
 8047e7e:	2201      	movs	r2, #1
 8047e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8047e84:	687b      	ldr	r3, [r7, #4]
 8047e86:	2201      	movs	r2, #1
 8047e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8047e8c:	687b      	ldr	r3, [r7, #4]
 8047e8e:	2201      	movs	r2, #1
 8047e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8047e94:	687b      	ldr	r3, [r7, #4]
 8047e96:	2201      	movs	r2, #1
 8047e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8047e9c:	687b      	ldr	r3, [r7, #4]
 8047e9e:	2201      	movs	r2, #1
 8047ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8047ea4:	687b      	ldr	r3, [r7, #4]
 8047ea6:	2201      	movs	r2, #1
 8047ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8047eac:	687b      	ldr	r3, [r7, #4]
 8047eae:	2201      	movs	r2, #1
 8047eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8047eb4:	2300      	movs	r3, #0
}
 8047eb6:	4618      	mov	r0, r3
 8047eb8:	3708      	adds	r7, #8
 8047eba:	46bd      	mov	sp, r7
 8047ebc:	bd80      	pop	{r7, pc}
	...

08047ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8047ec0:	b480      	push	{r7}
 8047ec2:	b085      	sub	sp, #20
 8047ec4:	af00      	add	r7, sp, #0
 8047ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8047ec8:	687b      	ldr	r3, [r7, #4]
 8047eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8047ece:	b2db      	uxtb	r3, r3
 8047ed0:	2b01      	cmp	r3, #1
 8047ed2:	d001      	beq.n	8047ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8047ed4:	2301      	movs	r3, #1
 8047ed6:	e04e      	b.n	8047f76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8047ed8:	687b      	ldr	r3, [r7, #4]
 8047eda:	2202      	movs	r2, #2
 8047edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8047ee0:	687b      	ldr	r3, [r7, #4]
 8047ee2:	681b      	ldr	r3, [r3, #0]
 8047ee4:	68da      	ldr	r2, [r3, #12]
 8047ee6:	687b      	ldr	r3, [r7, #4]
 8047ee8:	681b      	ldr	r3, [r3, #0]
 8047eea:	f042 0201 	orr.w	r2, r2, #1
 8047eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8047ef0:	687b      	ldr	r3, [r7, #4]
 8047ef2:	681b      	ldr	r3, [r3, #0]
 8047ef4:	4a23      	ldr	r2, [pc, #140]	; (8047f84 <HAL_TIM_Base_Start_IT+0xc4>)
 8047ef6:	4293      	cmp	r3, r2
 8047ef8:	d022      	beq.n	8047f40 <HAL_TIM_Base_Start_IT+0x80>
 8047efa:	687b      	ldr	r3, [r7, #4]
 8047efc:	681b      	ldr	r3, [r3, #0]
 8047efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8047f02:	d01d      	beq.n	8047f40 <HAL_TIM_Base_Start_IT+0x80>
 8047f04:	687b      	ldr	r3, [r7, #4]
 8047f06:	681b      	ldr	r3, [r3, #0]
 8047f08:	4a1f      	ldr	r2, [pc, #124]	; (8047f88 <HAL_TIM_Base_Start_IT+0xc8>)
 8047f0a:	4293      	cmp	r3, r2
 8047f0c:	d018      	beq.n	8047f40 <HAL_TIM_Base_Start_IT+0x80>
 8047f0e:	687b      	ldr	r3, [r7, #4]
 8047f10:	681b      	ldr	r3, [r3, #0]
 8047f12:	4a1e      	ldr	r2, [pc, #120]	; (8047f8c <HAL_TIM_Base_Start_IT+0xcc>)
 8047f14:	4293      	cmp	r3, r2
 8047f16:	d013      	beq.n	8047f40 <HAL_TIM_Base_Start_IT+0x80>
 8047f18:	687b      	ldr	r3, [r7, #4]
 8047f1a:	681b      	ldr	r3, [r3, #0]
 8047f1c:	4a1c      	ldr	r2, [pc, #112]	; (8047f90 <HAL_TIM_Base_Start_IT+0xd0>)
 8047f1e:	4293      	cmp	r3, r2
 8047f20:	d00e      	beq.n	8047f40 <HAL_TIM_Base_Start_IT+0x80>
 8047f22:	687b      	ldr	r3, [r7, #4]
 8047f24:	681b      	ldr	r3, [r3, #0]
 8047f26:	4a1b      	ldr	r2, [pc, #108]	; (8047f94 <HAL_TIM_Base_Start_IT+0xd4>)
 8047f28:	4293      	cmp	r3, r2
 8047f2a:	d009      	beq.n	8047f40 <HAL_TIM_Base_Start_IT+0x80>
 8047f2c:	687b      	ldr	r3, [r7, #4]
 8047f2e:	681b      	ldr	r3, [r3, #0]
 8047f30:	4a19      	ldr	r2, [pc, #100]	; (8047f98 <HAL_TIM_Base_Start_IT+0xd8>)
 8047f32:	4293      	cmp	r3, r2
 8047f34:	d004      	beq.n	8047f40 <HAL_TIM_Base_Start_IT+0x80>
 8047f36:	687b      	ldr	r3, [r7, #4]
 8047f38:	681b      	ldr	r3, [r3, #0]
 8047f3a:	4a18      	ldr	r2, [pc, #96]	; (8047f9c <HAL_TIM_Base_Start_IT+0xdc>)
 8047f3c:	4293      	cmp	r3, r2
 8047f3e:	d111      	bne.n	8047f64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8047f40:	687b      	ldr	r3, [r7, #4]
 8047f42:	681b      	ldr	r3, [r3, #0]
 8047f44:	689b      	ldr	r3, [r3, #8]
 8047f46:	f003 0307 	and.w	r3, r3, #7
 8047f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8047f4c:	68fb      	ldr	r3, [r7, #12]
 8047f4e:	2b06      	cmp	r3, #6
 8047f50:	d010      	beq.n	8047f74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8047f52:	687b      	ldr	r3, [r7, #4]
 8047f54:	681b      	ldr	r3, [r3, #0]
 8047f56:	681a      	ldr	r2, [r3, #0]
 8047f58:	687b      	ldr	r3, [r7, #4]
 8047f5a:	681b      	ldr	r3, [r3, #0]
 8047f5c:	f042 0201 	orr.w	r2, r2, #1
 8047f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8047f62:	e007      	b.n	8047f74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8047f64:	687b      	ldr	r3, [r7, #4]
 8047f66:	681b      	ldr	r3, [r3, #0]
 8047f68:	681a      	ldr	r2, [r3, #0]
 8047f6a:	687b      	ldr	r3, [r7, #4]
 8047f6c:	681b      	ldr	r3, [r3, #0]
 8047f6e:	f042 0201 	orr.w	r2, r2, #1
 8047f72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8047f74:	2300      	movs	r3, #0
}
 8047f76:	4618      	mov	r0, r3
 8047f78:	3714      	adds	r7, #20
 8047f7a:	46bd      	mov	sp, r7
 8047f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047f80:	4770      	bx	lr
 8047f82:	bf00      	nop
 8047f84:	40010000 	.word	0x40010000
 8047f88:	40000400 	.word	0x40000400
 8047f8c:	40000800 	.word	0x40000800
 8047f90:	40000c00 	.word	0x40000c00
 8047f94:	40010400 	.word	0x40010400
 8047f98:	40014000 	.word	0x40014000
 8047f9c:	40001800 	.word	0x40001800

08047fa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8047fa0:	b580      	push	{r7, lr}
 8047fa2:	b082      	sub	sp, #8
 8047fa4:	af00      	add	r7, sp, #0
 8047fa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8047fa8:	687b      	ldr	r3, [r7, #4]
 8047faa:	681b      	ldr	r3, [r3, #0]
 8047fac:	691b      	ldr	r3, [r3, #16]
 8047fae:	f003 0302 	and.w	r3, r3, #2
 8047fb2:	2b02      	cmp	r3, #2
 8047fb4:	d122      	bne.n	8047ffc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8047fb6:	687b      	ldr	r3, [r7, #4]
 8047fb8:	681b      	ldr	r3, [r3, #0]
 8047fba:	68db      	ldr	r3, [r3, #12]
 8047fbc:	f003 0302 	and.w	r3, r3, #2
 8047fc0:	2b02      	cmp	r3, #2
 8047fc2:	d11b      	bne.n	8047ffc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8047fc4:	687b      	ldr	r3, [r7, #4]
 8047fc6:	681b      	ldr	r3, [r3, #0]
 8047fc8:	f06f 0202 	mvn.w	r2, #2
 8047fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8047fce:	687b      	ldr	r3, [r7, #4]
 8047fd0:	2201      	movs	r2, #1
 8047fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8047fd4:	687b      	ldr	r3, [r7, #4]
 8047fd6:	681b      	ldr	r3, [r3, #0]
 8047fd8:	699b      	ldr	r3, [r3, #24]
 8047fda:	f003 0303 	and.w	r3, r3, #3
 8047fde:	2b00      	cmp	r3, #0
 8047fe0:	d003      	beq.n	8047fea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8047fe2:	6878      	ldr	r0, [r7, #4]
 8047fe4:	f000 f9b5 	bl	8048352 <HAL_TIM_IC_CaptureCallback>
 8047fe8:	e005      	b.n	8047ff6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8047fea:	6878      	ldr	r0, [r7, #4]
 8047fec:	f000 f9a7 	bl	804833e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8047ff0:	6878      	ldr	r0, [r7, #4]
 8047ff2:	f000 f9b8 	bl	8048366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8047ff6:	687b      	ldr	r3, [r7, #4]
 8047ff8:	2200      	movs	r2, #0
 8047ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8047ffc:	687b      	ldr	r3, [r7, #4]
 8047ffe:	681b      	ldr	r3, [r3, #0]
 8048000:	691b      	ldr	r3, [r3, #16]
 8048002:	f003 0304 	and.w	r3, r3, #4
 8048006:	2b04      	cmp	r3, #4
 8048008:	d122      	bne.n	8048050 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 804800a:	687b      	ldr	r3, [r7, #4]
 804800c:	681b      	ldr	r3, [r3, #0]
 804800e:	68db      	ldr	r3, [r3, #12]
 8048010:	f003 0304 	and.w	r3, r3, #4
 8048014:	2b04      	cmp	r3, #4
 8048016:	d11b      	bne.n	8048050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8048018:	687b      	ldr	r3, [r7, #4]
 804801a:	681b      	ldr	r3, [r3, #0]
 804801c:	f06f 0204 	mvn.w	r2, #4
 8048020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8048022:	687b      	ldr	r3, [r7, #4]
 8048024:	2202      	movs	r2, #2
 8048026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8048028:	687b      	ldr	r3, [r7, #4]
 804802a:	681b      	ldr	r3, [r3, #0]
 804802c:	699b      	ldr	r3, [r3, #24]
 804802e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8048032:	2b00      	cmp	r3, #0
 8048034:	d003      	beq.n	804803e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8048036:	6878      	ldr	r0, [r7, #4]
 8048038:	f000 f98b 	bl	8048352 <HAL_TIM_IC_CaptureCallback>
 804803c:	e005      	b.n	804804a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 804803e:	6878      	ldr	r0, [r7, #4]
 8048040:	f000 f97d 	bl	804833e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8048044:	6878      	ldr	r0, [r7, #4]
 8048046:	f000 f98e 	bl	8048366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804804a:	687b      	ldr	r3, [r7, #4]
 804804c:	2200      	movs	r2, #0
 804804e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8048050:	687b      	ldr	r3, [r7, #4]
 8048052:	681b      	ldr	r3, [r3, #0]
 8048054:	691b      	ldr	r3, [r3, #16]
 8048056:	f003 0308 	and.w	r3, r3, #8
 804805a:	2b08      	cmp	r3, #8
 804805c:	d122      	bne.n	80480a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 804805e:	687b      	ldr	r3, [r7, #4]
 8048060:	681b      	ldr	r3, [r3, #0]
 8048062:	68db      	ldr	r3, [r3, #12]
 8048064:	f003 0308 	and.w	r3, r3, #8
 8048068:	2b08      	cmp	r3, #8
 804806a:	d11b      	bne.n	80480a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 804806c:	687b      	ldr	r3, [r7, #4]
 804806e:	681b      	ldr	r3, [r3, #0]
 8048070:	f06f 0208 	mvn.w	r2, #8
 8048074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8048076:	687b      	ldr	r3, [r7, #4]
 8048078:	2204      	movs	r2, #4
 804807a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 804807c:	687b      	ldr	r3, [r7, #4]
 804807e:	681b      	ldr	r3, [r3, #0]
 8048080:	69db      	ldr	r3, [r3, #28]
 8048082:	f003 0303 	and.w	r3, r3, #3
 8048086:	2b00      	cmp	r3, #0
 8048088:	d003      	beq.n	8048092 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 804808a:	6878      	ldr	r0, [r7, #4]
 804808c:	f000 f961 	bl	8048352 <HAL_TIM_IC_CaptureCallback>
 8048090:	e005      	b.n	804809e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8048092:	6878      	ldr	r0, [r7, #4]
 8048094:	f000 f953 	bl	804833e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8048098:	6878      	ldr	r0, [r7, #4]
 804809a:	f000 f964 	bl	8048366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804809e:	687b      	ldr	r3, [r7, #4]
 80480a0:	2200      	movs	r2, #0
 80480a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80480a4:	687b      	ldr	r3, [r7, #4]
 80480a6:	681b      	ldr	r3, [r3, #0]
 80480a8:	691b      	ldr	r3, [r3, #16]
 80480aa:	f003 0310 	and.w	r3, r3, #16
 80480ae:	2b10      	cmp	r3, #16
 80480b0:	d122      	bne.n	80480f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80480b2:	687b      	ldr	r3, [r7, #4]
 80480b4:	681b      	ldr	r3, [r3, #0]
 80480b6:	68db      	ldr	r3, [r3, #12]
 80480b8:	f003 0310 	and.w	r3, r3, #16
 80480bc:	2b10      	cmp	r3, #16
 80480be:	d11b      	bne.n	80480f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80480c0:	687b      	ldr	r3, [r7, #4]
 80480c2:	681b      	ldr	r3, [r3, #0]
 80480c4:	f06f 0210 	mvn.w	r2, #16
 80480c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80480ca:	687b      	ldr	r3, [r7, #4]
 80480cc:	2208      	movs	r2, #8
 80480ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80480d0:	687b      	ldr	r3, [r7, #4]
 80480d2:	681b      	ldr	r3, [r3, #0]
 80480d4:	69db      	ldr	r3, [r3, #28]
 80480d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80480da:	2b00      	cmp	r3, #0
 80480dc:	d003      	beq.n	80480e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80480de:	6878      	ldr	r0, [r7, #4]
 80480e0:	f000 f937 	bl	8048352 <HAL_TIM_IC_CaptureCallback>
 80480e4:	e005      	b.n	80480f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80480e6:	6878      	ldr	r0, [r7, #4]
 80480e8:	f000 f929 	bl	804833e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80480ec:	6878      	ldr	r0, [r7, #4]
 80480ee:	f000 f93a 	bl	8048366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80480f2:	687b      	ldr	r3, [r7, #4]
 80480f4:	2200      	movs	r2, #0
 80480f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80480f8:	687b      	ldr	r3, [r7, #4]
 80480fa:	681b      	ldr	r3, [r3, #0]
 80480fc:	691b      	ldr	r3, [r3, #16]
 80480fe:	f003 0301 	and.w	r3, r3, #1
 8048102:	2b01      	cmp	r3, #1
 8048104:	d10e      	bne.n	8048124 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8048106:	687b      	ldr	r3, [r7, #4]
 8048108:	681b      	ldr	r3, [r3, #0]
 804810a:	68db      	ldr	r3, [r3, #12]
 804810c:	f003 0301 	and.w	r3, r3, #1
 8048110:	2b01      	cmp	r3, #1
 8048112:	d107      	bne.n	8048124 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8048114:	687b      	ldr	r3, [r7, #4]
 8048116:	681b      	ldr	r3, [r3, #0]
 8048118:	f06f 0201 	mvn.w	r2, #1
 804811c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 804811e:	6878      	ldr	r0, [r7, #4]
 8048120:	f7f8 feb6 	bl	8040e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8048124:	687b      	ldr	r3, [r7, #4]
 8048126:	681b      	ldr	r3, [r3, #0]
 8048128:	691b      	ldr	r3, [r3, #16]
 804812a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804812e:	2b80      	cmp	r3, #128	; 0x80
 8048130:	d10e      	bne.n	8048150 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8048132:	687b      	ldr	r3, [r7, #4]
 8048134:	681b      	ldr	r3, [r3, #0]
 8048136:	68db      	ldr	r3, [r3, #12]
 8048138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804813c:	2b80      	cmp	r3, #128	; 0x80
 804813e:	d107      	bne.n	8048150 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8048140:	687b      	ldr	r3, [r7, #4]
 8048142:	681b      	ldr	r3, [r3, #0]
 8048144:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8048148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 804814a:	6878      	ldr	r0, [r7, #4]
 804814c:	f000 fae0 	bl	8048710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8048150:	687b      	ldr	r3, [r7, #4]
 8048152:	681b      	ldr	r3, [r3, #0]
 8048154:	691b      	ldr	r3, [r3, #16]
 8048156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804815a:	2b40      	cmp	r3, #64	; 0x40
 804815c:	d10e      	bne.n	804817c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 804815e:	687b      	ldr	r3, [r7, #4]
 8048160:	681b      	ldr	r3, [r3, #0]
 8048162:	68db      	ldr	r3, [r3, #12]
 8048164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8048168:	2b40      	cmp	r3, #64	; 0x40
 804816a:	d107      	bne.n	804817c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 804816c:	687b      	ldr	r3, [r7, #4]
 804816e:	681b      	ldr	r3, [r3, #0]
 8048170:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8048174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8048176:	6878      	ldr	r0, [r7, #4]
 8048178:	f000 f8ff 	bl	804837a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 804817c:	687b      	ldr	r3, [r7, #4]
 804817e:	681b      	ldr	r3, [r3, #0]
 8048180:	691b      	ldr	r3, [r3, #16]
 8048182:	f003 0320 	and.w	r3, r3, #32
 8048186:	2b20      	cmp	r3, #32
 8048188:	d10e      	bne.n	80481a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 804818a:	687b      	ldr	r3, [r7, #4]
 804818c:	681b      	ldr	r3, [r3, #0]
 804818e:	68db      	ldr	r3, [r3, #12]
 8048190:	f003 0320 	and.w	r3, r3, #32
 8048194:	2b20      	cmp	r3, #32
 8048196:	d107      	bne.n	80481a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8048198:	687b      	ldr	r3, [r7, #4]
 804819a:	681b      	ldr	r3, [r3, #0]
 804819c:	f06f 0220 	mvn.w	r2, #32
 80481a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80481a2:	6878      	ldr	r0, [r7, #4]
 80481a4:	f000 faaa 	bl	80486fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80481a8:	bf00      	nop
 80481aa:	3708      	adds	r7, #8
 80481ac:	46bd      	mov	sp, r7
 80481ae:	bd80      	pop	{r7, pc}

080481b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80481b0:	b580      	push	{r7, lr}
 80481b2:	b084      	sub	sp, #16
 80481b4:	af00      	add	r7, sp, #0
 80481b6:	6078      	str	r0, [r7, #4]
 80481b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80481ba:	2300      	movs	r3, #0
 80481bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80481be:	687b      	ldr	r3, [r7, #4]
 80481c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80481c4:	2b01      	cmp	r3, #1
 80481c6:	d101      	bne.n	80481cc <HAL_TIM_ConfigClockSource+0x1c>
 80481c8:	2302      	movs	r3, #2
 80481ca:	e0b4      	b.n	8048336 <HAL_TIM_ConfigClockSource+0x186>
 80481cc:	687b      	ldr	r3, [r7, #4]
 80481ce:	2201      	movs	r2, #1
 80481d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80481d4:	687b      	ldr	r3, [r7, #4]
 80481d6:	2202      	movs	r2, #2
 80481d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80481dc:	687b      	ldr	r3, [r7, #4]
 80481de:	681b      	ldr	r3, [r3, #0]
 80481e0:	689b      	ldr	r3, [r3, #8]
 80481e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80481e4:	68bb      	ldr	r3, [r7, #8]
 80481e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80481ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80481ec:	68bb      	ldr	r3, [r7, #8]
 80481ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80481f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80481f4:	687b      	ldr	r3, [r7, #4]
 80481f6:	681b      	ldr	r3, [r3, #0]
 80481f8:	68ba      	ldr	r2, [r7, #8]
 80481fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80481fc:	683b      	ldr	r3, [r7, #0]
 80481fe:	681b      	ldr	r3, [r3, #0]
 8048200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8048204:	d03e      	beq.n	8048284 <HAL_TIM_ConfigClockSource+0xd4>
 8048206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804820a:	f200 8087 	bhi.w	804831c <HAL_TIM_ConfigClockSource+0x16c>
 804820e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8048212:	f000 8086 	beq.w	8048322 <HAL_TIM_ConfigClockSource+0x172>
 8048216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804821a:	d87f      	bhi.n	804831c <HAL_TIM_ConfigClockSource+0x16c>
 804821c:	2b70      	cmp	r3, #112	; 0x70
 804821e:	d01a      	beq.n	8048256 <HAL_TIM_ConfigClockSource+0xa6>
 8048220:	2b70      	cmp	r3, #112	; 0x70
 8048222:	d87b      	bhi.n	804831c <HAL_TIM_ConfigClockSource+0x16c>
 8048224:	2b60      	cmp	r3, #96	; 0x60
 8048226:	d050      	beq.n	80482ca <HAL_TIM_ConfigClockSource+0x11a>
 8048228:	2b60      	cmp	r3, #96	; 0x60
 804822a:	d877      	bhi.n	804831c <HAL_TIM_ConfigClockSource+0x16c>
 804822c:	2b50      	cmp	r3, #80	; 0x50
 804822e:	d03c      	beq.n	80482aa <HAL_TIM_ConfigClockSource+0xfa>
 8048230:	2b50      	cmp	r3, #80	; 0x50
 8048232:	d873      	bhi.n	804831c <HAL_TIM_ConfigClockSource+0x16c>
 8048234:	2b40      	cmp	r3, #64	; 0x40
 8048236:	d058      	beq.n	80482ea <HAL_TIM_ConfigClockSource+0x13a>
 8048238:	2b40      	cmp	r3, #64	; 0x40
 804823a:	d86f      	bhi.n	804831c <HAL_TIM_ConfigClockSource+0x16c>
 804823c:	2b30      	cmp	r3, #48	; 0x30
 804823e:	d064      	beq.n	804830a <HAL_TIM_ConfigClockSource+0x15a>
 8048240:	2b30      	cmp	r3, #48	; 0x30
 8048242:	d86b      	bhi.n	804831c <HAL_TIM_ConfigClockSource+0x16c>
 8048244:	2b20      	cmp	r3, #32
 8048246:	d060      	beq.n	804830a <HAL_TIM_ConfigClockSource+0x15a>
 8048248:	2b20      	cmp	r3, #32
 804824a:	d867      	bhi.n	804831c <HAL_TIM_ConfigClockSource+0x16c>
 804824c:	2b00      	cmp	r3, #0
 804824e:	d05c      	beq.n	804830a <HAL_TIM_ConfigClockSource+0x15a>
 8048250:	2b10      	cmp	r3, #16
 8048252:	d05a      	beq.n	804830a <HAL_TIM_ConfigClockSource+0x15a>
 8048254:	e062      	b.n	804831c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8048256:	687b      	ldr	r3, [r7, #4]
 8048258:	6818      	ldr	r0, [r3, #0]
 804825a:	683b      	ldr	r3, [r7, #0]
 804825c:	6899      	ldr	r1, [r3, #8]
 804825e:	683b      	ldr	r3, [r7, #0]
 8048260:	685a      	ldr	r2, [r3, #4]
 8048262:	683b      	ldr	r3, [r7, #0]
 8048264:	68db      	ldr	r3, [r3, #12]
 8048266:	f000 f9ad 	bl	80485c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 804826a:	687b      	ldr	r3, [r7, #4]
 804826c:	681b      	ldr	r3, [r3, #0]
 804826e:	689b      	ldr	r3, [r3, #8]
 8048270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8048272:	68bb      	ldr	r3, [r7, #8]
 8048274:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8048278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 804827a:	687b      	ldr	r3, [r7, #4]
 804827c:	681b      	ldr	r3, [r3, #0]
 804827e:	68ba      	ldr	r2, [r7, #8]
 8048280:	609a      	str	r2, [r3, #8]
      break;
 8048282:	e04f      	b.n	8048324 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8048284:	687b      	ldr	r3, [r7, #4]
 8048286:	6818      	ldr	r0, [r3, #0]
 8048288:	683b      	ldr	r3, [r7, #0]
 804828a:	6899      	ldr	r1, [r3, #8]
 804828c:	683b      	ldr	r3, [r7, #0]
 804828e:	685a      	ldr	r2, [r3, #4]
 8048290:	683b      	ldr	r3, [r7, #0]
 8048292:	68db      	ldr	r3, [r3, #12]
 8048294:	f000 f996 	bl	80485c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8048298:	687b      	ldr	r3, [r7, #4]
 804829a:	681b      	ldr	r3, [r3, #0]
 804829c:	689a      	ldr	r2, [r3, #8]
 804829e:	687b      	ldr	r3, [r7, #4]
 80482a0:	681b      	ldr	r3, [r3, #0]
 80482a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80482a6:	609a      	str	r2, [r3, #8]
      break;
 80482a8:	e03c      	b.n	8048324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80482aa:	687b      	ldr	r3, [r7, #4]
 80482ac:	6818      	ldr	r0, [r3, #0]
 80482ae:	683b      	ldr	r3, [r7, #0]
 80482b0:	6859      	ldr	r1, [r3, #4]
 80482b2:	683b      	ldr	r3, [r7, #0]
 80482b4:	68db      	ldr	r3, [r3, #12]
 80482b6:	461a      	mov	r2, r3
 80482b8:	f000 f90a 	bl	80484d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80482bc:	687b      	ldr	r3, [r7, #4]
 80482be:	681b      	ldr	r3, [r3, #0]
 80482c0:	2150      	movs	r1, #80	; 0x50
 80482c2:	4618      	mov	r0, r3
 80482c4:	f000 f963 	bl	804858e <TIM_ITRx_SetConfig>
      break;
 80482c8:	e02c      	b.n	8048324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80482ca:	687b      	ldr	r3, [r7, #4]
 80482cc:	6818      	ldr	r0, [r3, #0]
 80482ce:	683b      	ldr	r3, [r7, #0]
 80482d0:	6859      	ldr	r1, [r3, #4]
 80482d2:	683b      	ldr	r3, [r7, #0]
 80482d4:	68db      	ldr	r3, [r3, #12]
 80482d6:	461a      	mov	r2, r3
 80482d8:	f000 f929 	bl	804852e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80482dc:	687b      	ldr	r3, [r7, #4]
 80482de:	681b      	ldr	r3, [r3, #0]
 80482e0:	2160      	movs	r1, #96	; 0x60
 80482e2:	4618      	mov	r0, r3
 80482e4:	f000 f953 	bl	804858e <TIM_ITRx_SetConfig>
      break;
 80482e8:	e01c      	b.n	8048324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80482ea:	687b      	ldr	r3, [r7, #4]
 80482ec:	6818      	ldr	r0, [r3, #0]
 80482ee:	683b      	ldr	r3, [r7, #0]
 80482f0:	6859      	ldr	r1, [r3, #4]
 80482f2:	683b      	ldr	r3, [r7, #0]
 80482f4:	68db      	ldr	r3, [r3, #12]
 80482f6:	461a      	mov	r2, r3
 80482f8:	f000 f8ea 	bl	80484d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80482fc:	687b      	ldr	r3, [r7, #4]
 80482fe:	681b      	ldr	r3, [r3, #0]
 8048300:	2140      	movs	r1, #64	; 0x40
 8048302:	4618      	mov	r0, r3
 8048304:	f000 f943 	bl	804858e <TIM_ITRx_SetConfig>
      break;
 8048308:	e00c      	b.n	8048324 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 804830a:	687b      	ldr	r3, [r7, #4]
 804830c:	681a      	ldr	r2, [r3, #0]
 804830e:	683b      	ldr	r3, [r7, #0]
 8048310:	681b      	ldr	r3, [r3, #0]
 8048312:	4619      	mov	r1, r3
 8048314:	4610      	mov	r0, r2
 8048316:	f000 f93a 	bl	804858e <TIM_ITRx_SetConfig>
      break;
 804831a:	e003      	b.n	8048324 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 804831c:	2301      	movs	r3, #1
 804831e:	73fb      	strb	r3, [r7, #15]
      break;
 8048320:	e000      	b.n	8048324 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8048322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8048324:	687b      	ldr	r3, [r7, #4]
 8048326:	2201      	movs	r2, #1
 8048328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 804832c:	687b      	ldr	r3, [r7, #4]
 804832e:	2200      	movs	r2, #0
 8048330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8048334:	7bfb      	ldrb	r3, [r7, #15]
}
 8048336:	4618      	mov	r0, r3
 8048338:	3710      	adds	r7, #16
 804833a:	46bd      	mov	sp, r7
 804833c:	bd80      	pop	{r7, pc}

0804833e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 804833e:	b480      	push	{r7}
 8048340:	b083      	sub	sp, #12
 8048342:	af00      	add	r7, sp, #0
 8048344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8048346:	bf00      	nop
 8048348:	370c      	adds	r7, #12
 804834a:	46bd      	mov	sp, r7
 804834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048350:	4770      	bx	lr

08048352 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8048352:	b480      	push	{r7}
 8048354:	b083      	sub	sp, #12
 8048356:	af00      	add	r7, sp, #0
 8048358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 804835a:	bf00      	nop
 804835c:	370c      	adds	r7, #12
 804835e:	46bd      	mov	sp, r7
 8048360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048364:	4770      	bx	lr

08048366 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8048366:	b480      	push	{r7}
 8048368:	b083      	sub	sp, #12
 804836a:	af00      	add	r7, sp, #0
 804836c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 804836e:	bf00      	nop
 8048370:	370c      	adds	r7, #12
 8048372:	46bd      	mov	sp, r7
 8048374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048378:	4770      	bx	lr

0804837a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 804837a:	b480      	push	{r7}
 804837c:	b083      	sub	sp, #12
 804837e:	af00      	add	r7, sp, #0
 8048380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8048382:	bf00      	nop
 8048384:	370c      	adds	r7, #12
 8048386:	46bd      	mov	sp, r7
 8048388:	f85d 7b04 	ldr.w	r7, [sp], #4
 804838c:	4770      	bx	lr
	...

08048390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8048390:	b480      	push	{r7}
 8048392:	b085      	sub	sp, #20
 8048394:	af00      	add	r7, sp, #0
 8048396:	6078      	str	r0, [r7, #4]
 8048398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 804839a:	687b      	ldr	r3, [r7, #4]
 804839c:	681b      	ldr	r3, [r3, #0]
 804839e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80483a0:	687b      	ldr	r3, [r7, #4]
 80483a2:	4a40      	ldr	r2, [pc, #256]	; (80484a4 <TIM_Base_SetConfig+0x114>)
 80483a4:	4293      	cmp	r3, r2
 80483a6:	d013      	beq.n	80483d0 <TIM_Base_SetConfig+0x40>
 80483a8:	687b      	ldr	r3, [r7, #4]
 80483aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80483ae:	d00f      	beq.n	80483d0 <TIM_Base_SetConfig+0x40>
 80483b0:	687b      	ldr	r3, [r7, #4]
 80483b2:	4a3d      	ldr	r2, [pc, #244]	; (80484a8 <TIM_Base_SetConfig+0x118>)
 80483b4:	4293      	cmp	r3, r2
 80483b6:	d00b      	beq.n	80483d0 <TIM_Base_SetConfig+0x40>
 80483b8:	687b      	ldr	r3, [r7, #4]
 80483ba:	4a3c      	ldr	r2, [pc, #240]	; (80484ac <TIM_Base_SetConfig+0x11c>)
 80483bc:	4293      	cmp	r3, r2
 80483be:	d007      	beq.n	80483d0 <TIM_Base_SetConfig+0x40>
 80483c0:	687b      	ldr	r3, [r7, #4]
 80483c2:	4a3b      	ldr	r2, [pc, #236]	; (80484b0 <TIM_Base_SetConfig+0x120>)
 80483c4:	4293      	cmp	r3, r2
 80483c6:	d003      	beq.n	80483d0 <TIM_Base_SetConfig+0x40>
 80483c8:	687b      	ldr	r3, [r7, #4]
 80483ca:	4a3a      	ldr	r2, [pc, #232]	; (80484b4 <TIM_Base_SetConfig+0x124>)
 80483cc:	4293      	cmp	r3, r2
 80483ce:	d108      	bne.n	80483e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80483d0:	68fb      	ldr	r3, [r7, #12]
 80483d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80483d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80483d8:	683b      	ldr	r3, [r7, #0]
 80483da:	685b      	ldr	r3, [r3, #4]
 80483dc:	68fa      	ldr	r2, [r7, #12]
 80483de:	4313      	orrs	r3, r2
 80483e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80483e2:	687b      	ldr	r3, [r7, #4]
 80483e4:	4a2f      	ldr	r2, [pc, #188]	; (80484a4 <TIM_Base_SetConfig+0x114>)
 80483e6:	4293      	cmp	r3, r2
 80483e8:	d02b      	beq.n	8048442 <TIM_Base_SetConfig+0xb2>
 80483ea:	687b      	ldr	r3, [r7, #4]
 80483ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80483f0:	d027      	beq.n	8048442 <TIM_Base_SetConfig+0xb2>
 80483f2:	687b      	ldr	r3, [r7, #4]
 80483f4:	4a2c      	ldr	r2, [pc, #176]	; (80484a8 <TIM_Base_SetConfig+0x118>)
 80483f6:	4293      	cmp	r3, r2
 80483f8:	d023      	beq.n	8048442 <TIM_Base_SetConfig+0xb2>
 80483fa:	687b      	ldr	r3, [r7, #4]
 80483fc:	4a2b      	ldr	r2, [pc, #172]	; (80484ac <TIM_Base_SetConfig+0x11c>)
 80483fe:	4293      	cmp	r3, r2
 8048400:	d01f      	beq.n	8048442 <TIM_Base_SetConfig+0xb2>
 8048402:	687b      	ldr	r3, [r7, #4]
 8048404:	4a2a      	ldr	r2, [pc, #168]	; (80484b0 <TIM_Base_SetConfig+0x120>)
 8048406:	4293      	cmp	r3, r2
 8048408:	d01b      	beq.n	8048442 <TIM_Base_SetConfig+0xb2>
 804840a:	687b      	ldr	r3, [r7, #4]
 804840c:	4a29      	ldr	r2, [pc, #164]	; (80484b4 <TIM_Base_SetConfig+0x124>)
 804840e:	4293      	cmp	r3, r2
 8048410:	d017      	beq.n	8048442 <TIM_Base_SetConfig+0xb2>
 8048412:	687b      	ldr	r3, [r7, #4]
 8048414:	4a28      	ldr	r2, [pc, #160]	; (80484b8 <TIM_Base_SetConfig+0x128>)
 8048416:	4293      	cmp	r3, r2
 8048418:	d013      	beq.n	8048442 <TIM_Base_SetConfig+0xb2>
 804841a:	687b      	ldr	r3, [r7, #4]
 804841c:	4a27      	ldr	r2, [pc, #156]	; (80484bc <TIM_Base_SetConfig+0x12c>)
 804841e:	4293      	cmp	r3, r2
 8048420:	d00f      	beq.n	8048442 <TIM_Base_SetConfig+0xb2>
 8048422:	687b      	ldr	r3, [r7, #4]
 8048424:	4a26      	ldr	r2, [pc, #152]	; (80484c0 <TIM_Base_SetConfig+0x130>)
 8048426:	4293      	cmp	r3, r2
 8048428:	d00b      	beq.n	8048442 <TIM_Base_SetConfig+0xb2>
 804842a:	687b      	ldr	r3, [r7, #4]
 804842c:	4a25      	ldr	r2, [pc, #148]	; (80484c4 <TIM_Base_SetConfig+0x134>)
 804842e:	4293      	cmp	r3, r2
 8048430:	d007      	beq.n	8048442 <TIM_Base_SetConfig+0xb2>
 8048432:	687b      	ldr	r3, [r7, #4]
 8048434:	4a24      	ldr	r2, [pc, #144]	; (80484c8 <TIM_Base_SetConfig+0x138>)
 8048436:	4293      	cmp	r3, r2
 8048438:	d003      	beq.n	8048442 <TIM_Base_SetConfig+0xb2>
 804843a:	687b      	ldr	r3, [r7, #4]
 804843c:	4a23      	ldr	r2, [pc, #140]	; (80484cc <TIM_Base_SetConfig+0x13c>)
 804843e:	4293      	cmp	r3, r2
 8048440:	d108      	bne.n	8048454 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8048442:	68fb      	ldr	r3, [r7, #12]
 8048444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8048448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 804844a:	683b      	ldr	r3, [r7, #0]
 804844c:	68db      	ldr	r3, [r3, #12]
 804844e:	68fa      	ldr	r2, [r7, #12]
 8048450:	4313      	orrs	r3, r2
 8048452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8048454:	68fb      	ldr	r3, [r7, #12]
 8048456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 804845a:	683b      	ldr	r3, [r7, #0]
 804845c:	695b      	ldr	r3, [r3, #20]
 804845e:	4313      	orrs	r3, r2
 8048460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8048462:	687b      	ldr	r3, [r7, #4]
 8048464:	68fa      	ldr	r2, [r7, #12]
 8048466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8048468:	683b      	ldr	r3, [r7, #0]
 804846a:	689a      	ldr	r2, [r3, #8]
 804846c:	687b      	ldr	r3, [r7, #4]
 804846e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8048470:	683b      	ldr	r3, [r7, #0]
 8048472:	681a      	ldr	r2, [r3, #0]
 8048474:	687b      	ldr	r3, [r7, #4]
 8048476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8048478:	687b      	ldr	r3, [r7, #4]
 804847a:	4a0a      	ldr	r2, [pc, #40]	; (80484a4 <TIM_Base_SetConfig+0x114>)
 804847c:	4293      	cmp	r3, r2
 804847e:	d003      	beq.n	8048488 <TIM_Base_SetConfig+0xf8>
 8048480:	687b      	ldr	r3, [r7, #4]
 8048482:	4a0c      	ldr	r2, [pc, #48]	; (80484b4 <TIM_Base_SetConfig+0x124>)
 8048484:	4293      	cmp	r3, r2
 8048486:	d103      	bne.n	8048490 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8048488:	683b      	ldr	r3, [r7, #0]
 804848a:	691a      	ldr	r2, [r3, #16]
 804848c:	687b      	ldr	r3, [r7, #4]
 804848e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8048490:	687b      	ldr	r3, [r7, #4]
 8048492:	2201      	movs	r2, #1
 8048494:	615a      	str	r2, [r3, #20]
}
 8048496:	bf00      	nop
 8048498:	3714      	adds	r7, #20
 804849a:	46bd      	mov	sp, r7
 804849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80484a0:	4770      	bx	lr
 80484a2:	bf00      	nop
 80484a4:	40010000 	.word	0x40010000
 80484a8:	40000400 	.word	0x40000400
 80484ac:	40000800 	.word	0x40000800
 80484b0:	40000c00 	.word	0x40000c00
 80484b4:	40010400 	.word	0x40010400
 80484b8:	40014000 	.word	0x40014000
 80484bc:	40014400 	.word	0x40014400
 80484c0:	40014800 	.word	0x40014800
 80484c4:	40001800 	.word	0x40001800
 80484c8:	40001c00 	.word	0x40001c00
 80484cc:	40002000 	.word	0x40002000

080484d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80484d0:	b480      	push	{r7}
 80484d2:	b087      	sub	sp, #28
 80484d4:	af00      	add	r7, sp, #0
 80484d6:	60f8      	str	r0, [r7, #12]
 80484d8:	60b9      	str	r1, [r7, #8]
 80484da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80484dc:	68fb      	ldr	r3, [r7, #12]
 80484de:	6a1b      	ldr	r3, [r3, #32]
 80484e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80484e2:	68fb      	ldr	r3, [r7, #12]
 80484e4:	6a1b      	ldr	r3, [r3, #32]
 80484e6:	f023 0201 	bic.w	r2, r3, #1
 80484ea:	68fb      	ldr	r3, [r7, #12]
 80484ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80484ee:	68fb      	ldr	r3, [r7, #12]
 80484f0:	699b      	ldr	r3, [r3, #24]
 80484f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80484f4:	693b      	ldr	r3, [r7, #16]
 80484f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80484fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80484fc:	687b      	ldr	r3, [r7, #4]
 80484fe:	011b      	lsls	r3, r3, #4
 8048500:	693a      	ldr	r2, [r7, #16]
 8048502:	4313      	orrs	r3, r2
 8048504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8048506:	697b      	ldr	r3, [r7, #20]
 8048508:	f023 030a 	bic.w	r3, r3, #10
 804850c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 804850e:	697a      	ldr	r2, [r7, #20]
 8048510:	68bb      	ldr	r3, [r7, #8]
 8048512:	4313      	orrs	r3, r2
 8048514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8048516:	68fb      	ldr	r3, [r7, #12]
 8048518:	693a      	ldr	r2, [r7, #16]
 804851a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 804851c:	68fb      	ldr	r3, [r7, #12]
 804851e:	697a      	ldr	r2, [r7, #20]
 8048520:	621a      	str	r2, [r3, #32]
}
 8048522:	bf00      	nop
 8048524:	371c      	adds	r7, #28
 8048526:	46bd      	mov	sp, r7
 8048528:	f85d 7b04 	ldr.w	r7, [sp], #4
 804852c:	4770      	bx	lr

0804852e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 804852e:	b480      	push	{r7}
 8048530:	b087      	sub	sp, #28
 8048532:	af00      	add	r7, sp, #0
 8048534:	60f8      	str	r0, [r7, #12]
 8048536:	60b9      	str	r1, [r7, #8]
 8048538:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 804853a:	68fb      	ldr	r3, [r7, #12]
 804853c:	6a1b      	ldr	r3, [r3, #32]
 804853e:	f023 0210 	bic.w	r2, r3, #16
 8048542:	68fb      	ldr	r3, [r7, #12]
 8048544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8048546:	68fb      	ldr	r3, [r7, #12]
 8048548:	699b      	ldr	r3, [r3, #24]
 804854a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 804854c:	68fb      	ldr	r3, [r7, #12]
 804854e:	6a1b      	ldr	r3, [r3, #32]
 8048550:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8048552:	697b      	ldr	r3, [r7, #20]
 8048554:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8048558:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 804855a:	687b      	ldr	r3, [r7, #4]
 804855c:	031b      	lsls	r3, r3, #12
 804855e:	697a      	ldr	r2, [r7, #20]
 8048560:	4313      	orrs	r3, r2
 8048562:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8048564:	693b      	ldr	r3, [r7, #16]
 8048566:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 804856a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 804856c:	68bb      	ldr	r3, [r7, #8]
 804856e:	011b      	lsls	r3, r3, #4
 8048570:	693a      	ldr	r2, [r7, #16]
 8048572:	4313      	orrs	r3, r2
 8048574:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8048576:	68fb      	ldr	r3, [r7, #12]
 8048578:	697a      	ldr	r2, [r7, #20]
 804857a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 804857c:	68fb      	ldr	r3, [r7, #12]
 804857e:	693a      	ldr	r2, [r7, #16]
 8048580:	621a      	str	r2, [r3, #32]
}
 8048582:	bf00      	nop
 8048584:	371c      	adds	r7, #28
 8048586:	46bd      	mov	sp, r7
 8048588:	f85d 7b04 	ldr.w	r7, [sp], #4
 804858c:	4770      	bx	lr

0804858e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 804858e:	b480      	push	{r7}
 8048590:	b085      	sub	sp, #20
 8048592:	af00      	add	r7, sp, #0
 8048594:	6078      	str	r0, [r7, #4]
 8048596:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8048598:	687b      	ldr	r3, [r7, #4]
 804859a:	689b      	ldr	r3, [r3, #8]
 804859c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 804859e:	68fb      	ldr	r3, [r7, #12]
 80485a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80485a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80485a6:	683a      	ldr	r2, [r7, #0]
 80485a8:	68fb      	ldr	r3, [r7, #12]
 80485aa:	4313      	orrs	r3, r2
 80485ac:	f043 0307 	orr.w	r3, r3, #7
 80485b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80485b2:	687b      	ldr	r3, [r7, #4]
 80485b4:	68fa      	ldr	r2, [r7, #12]
 80485b6:	609a      	str	r2, [r3, #8]
}
 80485b8:	bf00      	nop
 80485ba:	3714      	adds	r7, #20
 80485bc:	46bd      	mov	sp, r7
 80485be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80485c2:	4770      	bx	lr

080485c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80485c4:	b480      	push	{r7}
 80485c6:	b087      	sub	sp, #28
 80485c8:	af00      	add	r7, sp, #0
 80485ca:	60f8      	str	r0, [r7, #12]
 80485cc:	60b9      	str	r1, [r7, #8]
 80485ce:	607a      	str	r2, [r7, #4]
 80485d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80485d2:	68fb      	ldr	r3, [r7, #12]
 80485d4:	689b      	ldr	r3, [r3, #8]
 80485d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80485d8:	697b      	ldr	r3, [r7, #20]
 80485da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80485de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80485e0:	683b      	ldr	r3, [r7, #0]
 80485e2:	021a      	lsls	r2, r3, #8
 80485e4:	687b      	ldr	r3, [r7, #4]
 80485e6:	431a      	orrs	r2, r3
 80485e8:	68bb      	ldr	r3, [r7, #8]
 80485ea:	4313      	orrs	r3, r2
 80485ec:	697a      	ldr	r2, [r7, #20]
 80485ee:	4313      	orrs	r3, r2
 80485f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80485f2:	68fb      	ldr	r3, [r7, #12]
 80485f4:	697a      	ldr	r2, [r7, #20]
 80485f6:	609a      	str	r2, [r3, #8]
}
 80485f8:	bf00      	nop
 80485fa:	371c      	adds	r7, #28
 80485fc:	46bd      	mov	sp, r7
 80485fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048602:	4770      	bx	lr

08048604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8048604:	b480      	push	{r7}
 8048606:	b085      	sub	sp, #20
 8048608:	af00      	add	r7, sp, #0
 804860a:	6078      	str	r0, [r7, #4]
 804860c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 804860e:	687b      	ldr	r3, [r7, #4]
 8048610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8048614:	2b01      	cmp	r3, #1
 8048616:	d101      	bne.n	804861c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8048618:	2302      	movs	r3, #2
 804861a:	e05a      	b.n	80486d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 804861c:	687b      	ldr	r3, [r7, #4]
 804861e:	2201      	movs	r2, #1
 8048620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8048624:	687b      	ldr	r3, [r7, #4]
 8048626:	2202      	movs	r2, #2
 8048628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 804862c:	687b      	ldr	r3, [r7, #4]
 804862e:	681b      	ldr	r3, [r3, #0]
 8048630:	685b      	ldr	r3, [r3, #4]
 8048632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8048634:	687b      	ldr	r3, [r7, #4]
 8048636:	681b      	ldr	r3, [r3, #0]
 8048638:	689b      	ldr	r3, [r3, #8]
 804863a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 804863c:	68fb      	ldr	r3, [r7, #12]
 804863e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8048642:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8048644:	683b      	ldr	r3, [r7, #0]
 8048646:	681b      	ldr	r3, [r3, #0]
 8048648:	68fa      	ldr	r2, [r7, #12]
 804864a:	4313      	orrs	r3, r2
 804864c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 804864e:	687b      	ldr	r3, [r7, #4]
 8048650:	681b      	ldr	r3, [r3, #0]
 8048652:	68fa      	ldr	r2, [r7, #12]
 8048654:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8048656:	687b      	ldr	r3, [r7, #4]
 8048658:	681b      	ldr	r3, [r3, #0]
 804865a:	4a21      	ldr	r2, [pc, #132]	; (80486e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 804865c:	4293      	cmp	r3, r2
 804865e:	d022      	beq.n	80486a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048660:	687b      	ldr	r3, [r7, #4]
 8048662:	681b      	ldr	r3, [r3, #0]
 8048664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048668:	d01d      	beq.n	80486a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 804866a:	687b      	ldr	r3, [r7, #4]
 804866c:	681b      	ldr	r3, [r3, #0]
 804866e:	4a1d      	ldr	r2, [pc, #116]	; (80486e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8048670:	4293      	cmp	r3, r2
 8048672:	d018      	beq.n	80486a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048674:	687b      	ldr	r3, [r7, #4]
 8048676:	681b      	ldr	r3, [r3, #0]
 8048678:	4a1b      	ldr	r2, [pc, #108]	; (80486e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 804867a:	4293      	cmp	r3, r2
 804867c:	d013      	beq.n	80486a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 804867e:	687b      	ldr	r3, [r7, #4]
 8048680:	681b      	ldr	r3, [r3, #0]
 8048682:	4a1a      	ldr	r2, [pc, #104]	; (80486ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8048684:	4293      	cmp	r3, r2
 8048686:	d00e      	beq.n	80486a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048688:	687b      	ldr	r3, [r7, #4]
 804868a:	681b      	ldr	r3, [r3, #0]
 804868c:	4a18      	ldr	r2, [pc, #96]	; (80486f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 804868e:	4293      	cmp	r3, r2
 8048690:	d009      	beq.n	80486a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048692:	687b      	ldr	r3, [r7, #4]
 8048694:	681b      	ldr	r3, [r3, #0]
 8048696:	4a17      	ldr	r2, [pc, #92]	; (80486f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8048698:	4293      	cmp	r3, r2
 804869a:	d004      	beq.n	80486a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 804869c:	687b      	ldr	r3, [r7, #4]
 804869e:	681b      	ldr	r3, [r3, #0]
 80486a0:	4a15      	ldr	r2, [pc, #84]	; (80486f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80486a2:	4293      	cmp	r3, r2
 80486a4:	d10c      	bne.n	80486c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80486a6:	68bb      	ldr	r3, [r7, #8]
 80486a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80486ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80486ae:	683b      	ldr	r3, [r7, #0]
 80486b0:	685b      	ldr	r3, [r3, #4]
 80486b2:	68ba      	ldr	r2, [r7, #8]
 80486b4:	4313      	orrs	r3, r2
 80486b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80486b8:	687b      	ldr	r3, [r7, #4]
 80486ba:	681b      	ldr	r3, [r3, #0]
 80486bc:	68ba      	ldr	r2, [r7, #8]
 80486be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80486c0:	687b      	ldr	r3, [r7, #4]
 80486c2:	2201      	movs	r2, #1
 80486c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80486c8:	687b      	ldr	r3, [r7, #4]
 80486ca:	2200      	movs	r2, #0
 80486cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80486d0:	2300      	movs	r3, #0
}
 80486d2:	4618      	mov	r0, r3
 80486d4:	3714      	adds	r7, #20
 80486d6:	46bd      	mov	sp, r7
 80486d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80486dc:	4770      	bx	lr
 80486de:	bf00      	nop
 80486e0:	40010000 	.word	0x40010000
 80486e4:	40000400 	.word	0x40000400
 80486e8:	40000800 	.word	0x40000800
 80486ec:	40000c00 	.word	0x40000c00
 80486f0:	40010400 	.word	0x40010400
 80486f4:	40014000 	.word	0x40014000
 80486f8:	40001800 	.word	0x40001800

080486fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80486fc:	b480      	push	{r7}
 80486fe:	b083      	sub	sp, #12
 8048700:	af00      	add	r7, sp, #0
 8048702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8048704:	bf00      	nop
 8048706:	370c      	adds	r7, #12
 8048708:	46bd      	mov	sp, r7
 804870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804870e:	4770      	bx	lr

08048710 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8048710:	b480      	push	{r7}
 8048712:	b083      	sub	sp, #12
 8048714:	af00      	add	r7, sp, #0
 8048716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8048718:	bf00      	nop
 804871a:	370c      	adds	r7, #12
 804871c:	46bd      	mov	sp, r7
 804871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048722:	4770      	bx	lr

08048724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8048724:	b580      	push	{r7, lr}
 8048726:	b082      	sub	sp, #8
 8048728:	af00      	add	r7, sp, #0
 804872a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 804872c:	687b      	ldr	r3, [r7, #4]
 804872e:	2b00      	cmp	r3, #0
 8048730:	d101      	bne.n	8048736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8048732:	2301      	movs	r3, #1
 8048734:	e03f      	b.n	80487b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8048736:	687b      	ldr	r3, [r7, #4]
 8048738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804873c:	b2db      	uxtb	r3, r3
 804873e:	2b00      	cmp	r3, #0
 8048740:	d106      	bne.n	8048750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8048742:	687b      	ldr	r3, [r7, #4]
 8048744:	2200      	movs	r2, #0
 8048746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 804874a:	6878      	ldr	r0, [r7, #4]
 804874c:	f7f8 fe5a 	bl	8041404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8048750:	687b      	ldr	r3, [r7, #4]
 8048752:	2224      	movs	r2, #36	; 0x24
 8048754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8048758:	687b      	ldr	r3, [r7, #4]
 804875a:	681b      	ldr	r3, [r3, #0]
 804875c:	68da      	ldr	r2, [r3, #12]
 804875e:	687b      	ldr	r3, [r7, #4]
 8048760:	681b      	ldr	r3, [r3, #0]
 8048762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8048766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8048768:	6878      	ldr	r0, [r7, #4]
 804876a:	f000 f929 	bl	80489c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 804876e:	687b      	ldr	r3, [r7, #4]
 8048770:	681b      	ldr	r3, [r3, #0]
 8048772:	691a      	ldr	r2, [r3, #16]
 8048774:	687b      	ldr	r3, [r7, #4]
 8048776:	681b      	ldr	r3, [r3, #0]
 8048778:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 804877c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 804877e:	687b      	ldr	r3, [r7, #4]
 8048780:	681b      	ldr	r3, [r3, #0]
 8048782:	695a      	ldr	r2, [r3, #20]
 8048784:	687b      	ldr	r3, [r7, #4]
 8048786:	681b      	ldr	r3, [r3, #0]
 8048788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 804878c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 804878e:	687b      	ldr	r3, [r7, #4]
 8048790:	681b      	ldr	r3, [r3, #0]
 8048792:	68da      	ldr	r2, [r3, #12]
 8048794:	687b      	ldr	r3, [r7, #4]
 8048796:	681b      	ldr	r3, [r3, #0]
 8048798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 804879c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 804879e:	687b      	ldr	r3, [r7, #4]
 80487a0:	2200      	movs	r2, #0
 80487a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80487a4:	687b      	ldr	r3, [r7, #4]
 80487a6:	2220      	movs	r2, #32
 80487a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80487ac:	687b      	ldr	r3, [r7, #4]
 80487ae:	2220      	movs	r2, #32
 80487b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80487b4:	2300      	movs	r3, #0
}
 80487b6:	4618      	mov	r0, r3
 80487b8:	3708      	adds	r7, #8
 80487ba:	46bd      	mov	sp, r7
 80487bc:	bd80      	pop	{r7, pc}

080487be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80487be:	b580      	push	{r7, lr}
 80487c0:	b08a      	sub	sp, #40	; 0x28
 80487c2:	af02      	add	r7, sp, #8
 80487c4:	60f8      	str	r0, [r7, #12]
 80487c6:	60b9      	str	r1, [r7, #8]
 80487c8:	603b      	str	r3, [r7, #0]
 80487ca:	4613      	mov	r3, r2
 80487cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80487ce:	2300      	movs	r3, #0
 80487d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80487d2:	68fb      	ldr	r3, [r7, #12]
 80487d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80487d8:	b2db      	uxtb	r3, r3
 80487da:	2b20      	cmp	r3, #32
 80487dc:	d17c      	bne.n	80488d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80487de:	68bb      	ldr	r3, [r7, #8]
 80487e0:	2b00      	cmp	r3, #0
 80487e2:	d002      	beq.n	80487ea <HAL_UART_Transmit+0x2c>
 80487e4:	88fb      	ldrh	r3, [r7, #6]
 80487e6:	2b00      	cmp	r3, #0
 80487e8:	d101      	bne.n	80487ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80487ea:	2301      	movs	r3, #1
 80487ec:	e075      	b.n	80488da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80487ee:	68fb      	ldr	r3, [r7, #12]
 80487f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80487f4:	2b01      	cmp	r3, #1
 80487f6:	d101      	bne.n	80487fc <HAL_UART_Transmit+0x3e>
 80487f8:	2302      	movs	r3, #2
 80487fa:	e06e      	b.n	80488da <HAL_UART_Transmit+0x11c>
 80487fc:	68fb      	ldr	r3, [r7, #12]
 80487fe:	2201      	movs	r2, #1
 8048800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8048804:	68fb      	ldr	r3, [r7, #12]
 8048806:	2200      	movs	r2, #0
 8048808:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 804880a:	68fb      	ldr	r3, [r7, #12]
 804880c:	2221      	movs	r2, #33	; 0x21
 804880e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8048812:	f7fa fabf 	bl	8042d94 <HAL_GetTick>
 8048816:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8048818:	68fb      	ldr	r3, [r7, #12]
 804881a:	88fa      	ldrh	r2, [r7, #6]
 804881c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 804881e:	68fb      	ldr	r3, [r7, #12]
 8048820:	88fa      	ldrh	r2, [r7, #6]
 8048822:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8048824:	68fb      	ldr	r3, [r7, #12]
 8048826:	689b      	ldr	r3, [r3, #8]
 8048828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804882c:	d108      	bne.n	8048840 <HAL_UART_Transmit+0x82>
 804882e:	68fb      	ldr	r3, [r7, #12]
 8048830:	691b      	ldr	r3, [r3, #16]
 8048832:	2b00      	cmp	r3, #0
 8048834:	d104      	bne.n	8048840 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8048836:	2300      	movs	r3, #0
 8048838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 804883a:	68bb      	ldr	r3, [r7, #8]
 804883c:	61bb      	str	r3, [r7, #24]
 804883e:	e003      	b.n	8048848 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8048840:	68bb      	ldr	r3, [r7, #8]
 8048842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8048844:	2300      	movs	r3, #0
 8048846:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8048848:	68fb      	ldr	r3, [r7, #12]
 804884a:	2200      	movs	r2, #0
 804884c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8048850:	e02a      	b.n	80488a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8048852:	683b      	ldr	r3, [r7, #0]
 8048854:	9300      	str	r3, [sp, #0]
 8048856:	697b      	ldr	r3, [r7, #20]
 8048858:	2200      	movs	r2, #0
 804885a:	2180      	movs	r1, #128	; 0x80
 804885c:	68f8      	ldr	r0, [r7, #12]
 804885e:	f000 f840 	bl	80488e2 <UART_WaitOnFlagUntilTimeout>
 8048862:	4603      	mov	r3, r0
 8048864:	2b00      	cmp	r3, #0
 8048866:	d001      	beq.n	804886c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8048868:	2303      	movs	r3, #3
 804886a:	e036      	b.n	80488da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 804886c:	69fb      	ldr	r3, [r7, #28]
 804886e:	2b00      	cmp	r3, #0
 8048870:	d10b      	bne.n	804888a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8048872:	69bb      	ldr	r3, [r7, #24]
 8048874:	881b      	ldrh	r3, [r3, #0]
 8048876:	461a      	mov	r2, r3
 8048878:	68fb      	ldr	r3, [r7, #12]
 804887a:	681b      	ldr	r3, [r3, #0]
 804887c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8048880:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8048882:	69bb      	ldr	r3, [r7, #24]
 8048884:	3302      	adds	r3, #2
 8048886:	61bb      	str	r3, [r7, #24]
 8048888:	e007      	b.n	804889a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 804888a:	69fb      	ldr	r3, [r7, #28]
 804888c:	781a      	ldrb	r2, [r3, #0]
 804888e:	68fb      	ldr	r3, [r7, #12]
 8048890:	681b      	ldr	r3, [r3, #0]
 8048892:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8048894:	69fb      	ldr	r3, [r7, #28]
 8048896:	3301      	adds	r3, #1
 8048898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 804889a:	68fb      	ldr	r3, [r7, #12]
 804889c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 804889e:	b29b      	uxth	r3, r3
 80488a0:	3b01      	subs	r3, #1
 80488a2:	b29a      	uxth	r2, r3
 80488a4:	68fb      	ldr	r3, [r7, #12]
 80488a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80488a8:	68fb      	ldr	r3, [r7, #12]
 80488aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80488ac:	b29b      	uxth	r3, r3
 80488ae:	2b00      	cmp	r3, #0
 80488b0:	d1cf      	bne.n	8048852 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80488b2:	683b      	ldr	r3, [r7, #0]
 80488b4:	9300      	str	r3, [sp, #0]
 80488b6:	697b      	ldr	r3, [r7, #20]
 80488b8:	2200      	movs	r2, #0
 80488ba:	2140      	movs	r1, #64	; 0x40
 80488bc:	68f8      	ldr	r0, [r7, #12]
 80488be:	f000 f810 	bl	80488e2 <UART_WaitOnFlagUntilTimeout>
 80488c2:	4603      	mov	r3, r0
 80488c4:	2b00      	cmp	r3, #0
 80488c6:	d001      	beq.n	80488cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80488c8:	2303      	movs	r3, #3
 80488ca:	e006      	b.n	80488da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80488cc:	68fb      	ldr	r3, [r7, #12]
 80488ce:	2220      	movs	r2, #32
 80488d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80488d4:	2300      	movs	r3, #0
 80488d6:	e000      	b.n	80488da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80488d8:	2302      	movs	r3, #2
  }
}
 80488da:	4618      	mov	r0, r3
 80488dc:	3720      	adds	r7, #32
 80488de:	46bd      	mov	sp, r7
 80488e0:	bd80      	pop	{r7, pc}

080488e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80488e2:	b580      	push	{r7, lr}
 80488e4:	b090      	sub	sp, #64	; 0x40
 80488e6:	af00      	add	r7, sp, #0
 80488e8:	60f8      	str	r0, [r7, #12]
 80488ea:	60b9      	str	r1, [r7, #8]
 80488ec:	603b      	str	r3, [r7, #0]
 80488ee:	4613      	mov	r3, r2
 80488f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80488f2:	e050      	b.n	8048996 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80488f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80488f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80488fa:	d04c      	beq.n	8048996 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80488fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80488fe:	2b00      	cmp	r3, #0
 8048900:	d007      	beq.n	8048912 <UART_WaitOnFlagUntilTimeout+0x30>
 8048902:	f7fa fa47 	bl	8042d94 <HAL_GetTick>
 8048906:	4602      	mov	r2, r0
 8048908:	683b      	ldr	r3, [r7, #0]
 804890a:	1ad3      	subs	r3, r2, r3
 804890c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 804890e:	429a      	cmp	r2, r3
 8048910:	d241      	bcs.n	8048996 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8048912:	68fb      	ldr	r3, [r7, #12]
 8048914:	681b      	ldr	r3, [r3, #0]
 8048916:	330c      	adds	r3, #12
 8048918:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804891c:	e853 3f00 	ldrex	r3, [r3]
 8048920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8048922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048924:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8048928:	63fb      	str	r3, [r7, #60]	; 0x3c
 804892a:	68fb      	ldr	r3, [r7, #12]
 804892c:	681b      	ldr	r3, [r3, #0]
 804892e:	330c      	adds	r3, #12
 8048930:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8048932:	637a      	str	r2, [r7, #52]	; 0x34
 8048934:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8048936:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8048938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 804893a:	e841 2300 	strex	r3, r2, [r1]
 804893e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8048940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048942:	2b00      	cmp	r3, #0
 8048944:	d1e5      	bne.n	8048912 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8048946:	68fb      	ldr	r3, [r7, #12]
 8048948:	681b      	ldr	r3, [r3, #0]
 804894a:	3314      	adds	r3, #20
 804894c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804894e:	697b      	ldr	r3, [r7, #20]
 8048950:	e853 3f00 	ldrex	r3, [r3]
 8048954:	613b      	str	r3, [r7, #16]
   return(result);
 8048956:	693b      	ldr	r3, [r7, #16]
 8048958:	f023 0301 	bic.w	r3, r3, #1
 804895c:	63bb      	str	r3, [r7, #56]	; 0x38
 804895e:	68fb      	ldr	r3, [r7, #12]
 8048960:	681b      	ldr	r3, [r3, #0]
 8048962:	3314      	adds	r3, #20
 8048964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8048966:	623a      	str	r2, [r7, #32]
 8048968:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804896a:	69f9      	ldr	r1, [r7, #28]
 804896c:	6a3a      	ldr	r2, [r7, #32]
 804896e:	e841 2300 	strex	r3, r2, [r1]
 8048972:	61bb      	str	r3, [r7, #24]
   return(result);
 8048974:	69bb      	ldr	r3, [r7, #24]
 8048976:	2b00      	cmp	r3, #0
 8048978:	d1e5      	bne.n	8048946 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 804897a:	68fb      	ldr	r3, [r7, #12]
 804897c:	2220      	movs	r2, #32
 804897e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8048982:	68fb      	ldr	r3, [r7, #12]
 8048984:	2220      	movs	r2, #32
 8048986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 804898a:	68fb      	ldr	r3, [r7, #12]
 804898c:	2200      	movs	r2, #0
 804898e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8048992:	2303      	movs	r3, #3
 8048994:	e00f      	b.n	80489b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8048996:	68fb      	ldr	r3, [r7, #12]
 8048998:	681b      	ldr	r3, [r3, #0]
 804899a:	681a      	ldr	r2, [r3, #0]
 804899c:	68bb      	ldr	r3, [r7, #8]
 804899e:	4013      	ands	r3, r2
 80489a0:	68ba      	ldr	r2, [r7, #8]
 80489a2:	429a      	cmp	r2, r3
 80489a4:	bf0c      	ite	eq
 80489a6:	2301      	moveq	r3, #1
 80489a8:	2300      	movne	r3, #0
 80489aa:	b2db      	uxtb	r3, r3
 80489ac:	461a      	mov	r2, r3
 80489ae:	79fb      	ldrb	r3, [r7, #7]
 80489b0:	429a      	cmp	r2, r3
 80489b2:	d09f      	beq.n	80488f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80489b4:	2300      	movs	r3, #0
}
 80489b6:	4618      	mov	r0, r3
 80489b8:	3740      	adds	r7, #64	; 0x40
 80489ba:	46bd      	mov	sp, r7
 80489bc:	bd80      	pop	{r7, pc}
	...

080489c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80489c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80489c4:	b0c0      	sub	sp, #256	; 0x100
 80489c6:	af00      	add	r7, sp, #0
 80489c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80489cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80489d0:	681b      	ldr	r3, [r3, #0]
 80489d2:	691b      	ldr	r3, [r3, #16]
 80489d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80489d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80489dc:	68d9      	ldr	r1, [r3, #12]
 80489de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80489e2:	681a      	ldr	r2, [r3, #0]
 80489e4:	ea40 0301 	orr.w	r3, r0, r1
 80489e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80489ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80489ee:	689a      	ldr	r2, [r3, #8]
 80489f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80489f4:	691b      	ldr	r3, [r3, #16]
 80489f6:	431a      	orrs	r2, r3
 80489f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80489fc:	695b      	ldr	r3, [r3, #20]
 80489fe:	431a      	orrs	r2, r3
 8048a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a04:	69db      	ldr	r3, [r3, #28]
 8048a06:	4313      	orrs	r3, r2
 8048a08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8048a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a10:	681b      	ldr	r3, [r3, #0]
 8048a12:	68db      	ldr	r3, [r3, #12]
 8048a14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8048a18:	f021 010c 	bic.w	r1, r1, #12
 8048a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a20:	681a      	ldr	r2, [r3, #0]
 8048a22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8048a26:	430b      	orrs	r3, r1
 8048a28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8048a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a2e:	681b      	ldr	r3, [r3, #0]
 8048a30:	695b      	ldr	r3, [r3, #20]
 8048a32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8048a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a3a:	6999      	ldr	r1, [r3, #24]
 8048a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a40:	681a      	ldr	r2, [r3, #0]
 8048a42:	ea40 0301 	orr.w	r3, r0, r1
 8048a46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8048a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a4c:	681a      	ldr	r2, [r3, #0]
 8048a4e:	4b8f      	ldr	r3, [pc, #572]	; (8048c8c <UART_SetConfig+0x2cc>)
 8048a50:	429a      	cmp	r2, r3
 8048a52:	d005      	beq.n	8048a60 <UART_SetConfig+0xa0>
 8048a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a58:	681a      	ldr	r2, [r3, #0]
 8048a5a:	4b8d      	ldr	r3, [pc, #564]	; (8048c90 <UART_SetConfig+0x2d0>)
 8048a5c:	429a      	cmp	r2, r3
 8048a5e:	d104      	bne.n	8048a6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8048a60:	f7fe f968 	bl	8046d34 <HAL_RCC_GetPCLK2Freq>
 8048a64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8048a68:	e003      	b.n	8048a72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8048a6a:	f7fe f94f 	bl	8046d0c <HAL_RCC_GetPCLK1Freq>
 8048a6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8048a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a76:	69db      	ldr	r3, [r3, #28]
 8048a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8048a7c:	f040 810c 	bne.w	8048c98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8048a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8048a84:	2200      	movs	r2, #0
 8048a86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8048a8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8048a8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8048a92:	4622      	mov	r2, r4
 8048a94:	462b      	mov	r3, r5
 8048a96:	1891      	adds	r1, r2, r2
 8048a98:	65b9      	str	r1, [r7, #88]	; 0x58
 8048a9a:	415b      	adcs	r3, r3
 8048a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8048a9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8048aa2:	4621      	mov	r1, r4
 8048aa4:	eb12 0801 	adds.w	r8, r2, r1
 8048aa8:	4629      	mov	r1, r5
 8048aaa:	eb43 0901 	adc.w	r9, r3, r1
 8048aae:	f04f 0200 	mov.w	r2, #0
 8048ab2:	f04f 0300 	mov.w	r3, #0
 8048ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8048aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8048abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8048ac2:	4690      	mov	r8, r2
 8048ac4:	4699      	mov	r9, r3
 8048ac6:	4623      	mov	r3, r4
 8048ac8:	eb18 0303 	adds.w	r3, r8, r3
 8048acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8048ad0:	462b      	mov	r3, r5
 8048ad2:	eb49 0303 	adc.w	r3, r9, r3
 8048ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8048ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048ade:	685b      	ldr	r3, [r3, #4]
 8048ae0:	2200      	movs	r2, #0
 8048ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8048ae6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8048aea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8048aee:	460b      	mov	r3, r1
 8048af0:	18db      	adds	r3, r3, r3
 8048af2:	653b      	str	r3, [r7, #80]	; 0x50
 8048af4:	4613      	mov	r3, r2
 8048af6:	eb42 0303 	adc.w	r3, r2, r3
 8048afa:	657b      	str	r3, [r7, #84]	; 0x54
 8048afc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8048b00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8048b04:	f7f7 fbc4 	bl	8040290 <__aeabi_uldivmod>
 8048b08:	4602      	mov	r2, r0
 8048b0a:	460b      	mov	r3, r1
 8048b0c:	4b61      	ldr	r3, [pc, #388]	; (8048c94 <UART_SetConfig+0x2d4>)
 8048b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8048b12:	095b      	lsrs	r3, r3, #5
 8048b14:	011c      	lsls	r4, r3, #4
 8048b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8048b1a:	2200      	movs	r2, #0
 8048b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8048b20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8048b24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8048b28:	4642      	mov	r2, r8
 8048b2a:	464b      	mov	r3, r9
 8048b2c:	1891      	adds	r1, r2, r2
 8048b2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8048b30:	415b      	adcs	r3, r3
 8048b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8048b34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8048b38:	4641      	mov	r1, r8
 8048b3a:	eb12 0a01 	adds.w	sl, r2, r1
 8048b3e:	4649      	mov	r1, r9
 8048b40:	eb43 0b01 	adc.w	fp, r3, r1
 8048b44:	f04f 0200 	mov.w	r2, #0
 8048b48:	f04f 0300 	mov.w	r3, #0
 8048b4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8048b50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8048b54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8048b58:	4692      	mov	sl, r2
 8048b5a:	469b      	mov	fp, r3
 8048b5c:	4643      	mov	r3, r8
 8048b5e:	eb1a 0303 	adds.w	r3, sl, r3
 8048b62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8048b66:	464b      	mov	r3, r9
 8048b68:	eb4b 0303 	adc.w	r3, fp, r3
 8048b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8048b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048b74:	685b      	ldr	r3, [r3, #4]
 8048b76:	2200      	movs	r2, #0
 8048b78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8048b7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8048b80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8048b84:	460b      	mov	r3, r1
 8048b86:	18db      	adds	r3, r3, r3
 8048b88:	643b      	str	r3, [r7, #64]	; 0x40
 8048b8a:	4613      	mov	r3, r2
 8048b8c:	eb42 0303 	adc.w	r3, r2, r3
 8048b90:	647b      	str	r3, [r7, #68]	; 0x44
 8048b92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8048b96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8048b9a:	f7f7 fb79 	bl	8040290 <__aeabi_uldivmod>
 8048b9e:	4602      	mov	r2, r0
 8048ba0:	460b      	mov	r3, r1
 8048ba2:	4611      	mov	r1, r2
 8048ba4:	4b3b      	ldr	r3, [pc, #236]	; (8048c94 <UART_SetConfig+0x2d4>)
 8048ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8048baa:	095b      	lsrs	r3, r3, #5
 8048bac:	2264      	movs	r2, #100	; 0x64
 8048bae:	fb02 f303 	mul.w	r3, r2, r3
 8048bb2:	1acb      	subs	r3, r1, r3
 8048bb4:	00db      	lsls	r3, r3, #3
 8048bb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8048bba:	4b36      	ldr	r3, [pc, #216]	; (8048c94 <UART_SetConfig+0x2d4>)
 8048bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8048bc0:	095b      	lsrs	r3, r3, #5
 8048bc2:	005b      	lsls	r3, r3, #1
 8048bc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8048bc8:	441c      	add	r4, r3
 8048bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8048bce:	2200      	movs	r2, #0
 8048bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8048bd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8048bd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8048bdc:	4642      	mov	r2, r8
 8048bde:	464b      	mov	r3, r9
 8048be0:	1891      	adds	r1, r2, r2
 8048be2:	63b9      	str	r1, [r7, #56]	; 0x38
 8048be4:	415b      	adcs	r3, r3
 8048be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8048be8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8048bec:	4641      	mov	r1, r8
 8048bee:	1851      	adds	r1, r2, r1
 8048bf0:	6339      	str	r1, [r7, #48]	; 0x30
 8048bf2:	4649      	mov	r1, r9
 8048bf4:	414b      	adcs	r3, r1
 8048bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8048bf8:	f04f 0200 	mov.w	r2, #0
 8048bfc:	f04f 0300 	mov.w	r3, #0
 8048c00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8048c04:	4659      	mov	r1, fp
 8048c06:	00cb      	lsls	r3, r1, #3
 8048c08:	4651      	mov	r1, sl
 8048c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8048c0e:	4651      	mov	r1, sl
 8048c10:	00ca      	lsls	r2, r1, #3
 8048c12:	4610      	mov	r0, r2
 8048c14:	4619      	mov	r1, r3
 8048c16:	4603      	mov	r3, r0
 8048c18:	4642      	mov	r2, r8
 8048c1a:	189b      	adds	r3, r3, r2
 8048c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8048c20:	464b      	mov	r3, r9
 8048c22:	460a      	mov	r2, r1
 8048c24:	eb42 0303 	adc.w	r3, r2, r3
 8048c28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8048c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048c30:	685b      	ldr	r3, [r3, #4]
 8048c32:	2200      	movs	r2, #0
 8048c34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8048c38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8048c3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8048c40:	460b      	mov	r3, r1
 8048c42:	18db      	adds	r3, r3, r3
 8048c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8048c46:	4613      	mov	r3, r2
 8048c48:	eb42 0303 	adc.w	r3, r2, r3
 8048c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8048c4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8048c52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8048c56:	f7f7 fb1b 	bl	8040290 <__aeabi_uldivmod>
 8048c5a:	4602      	mov	r2, r0
 8048c5c:	460b      	mov	r3, r1
 8048c5e:	4b0d      	ldr	r3, [pc, #52]	; (8048c94 <UART_SetConfig+0x2d4>)
 8048c60:	fba3 1302 	umull	r1, r3, r3, r2
 8048c64:	095b      	lsrs	r3, r3, #5
 8048c66:	2164      	movs	r1, #100	; 0x64
 8048c68:	fb01 f303 	mul.w	r3, r1, r3
 8048c6c:	1ad3      	subs	r3, r2, r3
 8048c6e:	00db      	lsls	r3, r3, #3
 8048c70:	3332      	adds	r3, #50	; 0x32
 8048c72:	4a08      	ldr	r2, [pc, #32]	; (8048c94 <UART_SetConfig+0x2d4>)
 8048c74:	fba2 2303 	umull	r2, r3, r2, r3
 8048c78:	095b      	lsrs	r3, r3, #5
 8048c7a:	f003 0207 	and.w	r2, r3, #7
 8048c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048c82:	681b      	ldr	r3, [r3, #0]
 8048c84:	4422      	add	r2, r4
 8048c86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8048c88:	e105      	b.n	8048e96 <UART_SetConfig+0x4d6>
 8048c8a:	bf00      	nop
 8048c8c:	40011000 	.word	0x40011000
 8048c90:	40011400 	.word	0x40011400
 8048c94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8048c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8048c9c:	2200      	movs	r2, #0
 8048c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8048ca2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8048ca6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8048caa:	4642      	mov	r2, r8
 8048cac:	464b      	mov	r3, r9
 8048cae:	1891      	adds	r1, r2, r2
 8048cb0:	6239      	str	r1, [r7, #32]
 8048cb2:	415b      	adcs	r3, r3
 8048cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8048cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8048cba:	4641      	mov	r1, r8
 8048cbc:	1854      	adds	r4, r2, r1
 8048cbe:	4649      	mov	r1, r9
 8048cc0:	eb43 0501 	adc.w	r5, r3, r1
 8048cc4:	f04f 0200 	mov.w	r2, #0
 8048cc8:	f04f 0300 	mov.w	r3, #0
 8048ccc:	00eb      	lsls	r3, r5, #3
 8048cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8048cd2:	00e2      	lsls	r2, r4, #3
 8048cd4:	4614      	mov	r4, r2
 8048cd6:	461d      	mov	r5, r3
 8048cd8:	4643      	mov	r3, r8
 8048cda:	18e3      	adds	r3, r4, r3
 8048cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8048ce0:	464b      	mov	r3, r9
 8048ce2:	eb45 0303 	adc.w	r3, r5, r3
 8048ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8048cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048cee:	685b      	ldr	r3, [r3, #4]
 8048cf0:	2200      	movs	r2, #0
 8048cf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8048cf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8048cfa:	f04f 0200 	mov.w	r2, #0
 8048cfe:	f04f 0300 	mov.w	r3, #0
 8048d02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8048d06:	4629      	mov	r1, r5
 8048d08:	008b      	lsls	r3, r1, #2
 8048d0a:	4621      	mov	r1, r4
 8048d0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8048d10:	4621      	mov	r1, r4
 8048d12:	008a      	lsls	r2, r1, #2
 8048d14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8048d18:	f7f7 faba 	bl	8040290 <__aeabi_uldivmod>
 8048d1c:	4602      	mov	r2, r0
 8048d1e:	460b      	mov	r3, r1
 8048d20:	4b60      	ldr	r3, [pc, #384]	; (8048ea4 <UART_SetConfig+0x4e4>)
 8048d22:	fba3 2302 	umull	r2, r3, r3, r2
 8048d26:	095b      	lsrs	r3, r3, #5
 8048d28:	011c      	lsls	r4, r3, #4
 8048d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8048d2e:	2200      	movs	r2, #0
 8048d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8048d34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8048d38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8048d3c:	4642      	mov	r2, r8
 8048d3e:	464b      	mov	r3, r9
 8048d40:	1891      	adds	r1, r2, r2
 8048d42:	61b9      	str	r1, [r7, #24]
 8048d44:	415b      	adcs	r3, r3
 8048d46:	61fb      	str	r3, [r7, #28]
 8048d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8048d4c:	4641      	mov	r1, r8
 8048d4e:	1851      	adds	r1, r2, r1
 8048d50:	6139      	str	r1, [r7, #16]
 8048d52:	4649      	mov	r1, r9
 8048d54:	414b      	adcs	r3, r1
 8048d56:	617b      	str	r3, [r7, #20]
 8048d58:	f04f 0200 	mov.w	r2, #0
 8048d5c:	f04f 0300 	mov.w	r3, #0
 8048d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8048d64:	4659      	mov	r1, fp
 8048d66:	00cb      	lsls	r3, r1, #3
 8048d68:	4651      	mov	r1, sl
 8048d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8048d6e:	4651      	mov	r1, sl
 8048d70:	00ca      	lsls	r2, r1, #3
 8048d72:	4610      	mov	r0, r2
 8048d74:	4619      	mov	r1, r3
 8048d76:	4603      	mov	r3, r0
 8048d78:	4642      	mov	r2, r8
 8048d7a:	189b      	adds	r3, r3, r2
 8048d7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8048d80:	464b      	mov	r3, r9
 8048d82:	460a      	mov	r2, r1
 8048d84:	eb42 0303 	adc.w	r3, r2, r3
 8048d88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8048d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048d90:	685b      	ldr	r3, [r3, #4]
 8048d92:	2200      	movs	r2, #0
 8048d94:	67bb      	str	r3, [r7, #120]	; 0x78
 8048d96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8048d98:	f04f 0200 	mov.w	r2, #0
 8048d9c:	f04f 0300 	mov.w	r3, #0
 8048da0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8048da4:	4649      	mov	r1, r9
 8048da6:	008b      	lsls	r3, r1, #2
 8048da8:	4641      	mov	r1, r8
 8048daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8048dae:	4641      	mov	r1, r8
 8048db0:	008a      	lsls	r2, r1, #2
 8048db2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8048db6:	f7f7 fa6b 	bl	8040290 <__aeabi_uldivmod>
 8048dba:	4602      	mov	r2, r0
 8048dbc:	460b      	mov	r3, r1
 8048dbe:	4b39      	ldr	r3, [pc, #228]	; (8048ea4 <UART_SetConfig+0x4e4>)
 8048dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8048dc4:	095b      	lsrs	r3, r3, #5
 8048dc6:	2164      	movs	r1, #100	; 0x64
 8048dc8:	fb01 f303 	mul.w	r3, r1, r3
 8048dcc:	1ad3      	subs	r3, r2, r3
 8048dce:	011b      	lsls	r3, r3, #4
 8048dd0:	3332      	adds	r3, #50	; 0x32
 8048dd2:	4a34      	ldr	r2, [pc, #208]	; (8048ea4 <UART_SetConfig+0x4e4>)
 8048dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8048dd8:	095b      	lsrs	r3, r3, #5
 8048dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8048dde:	441c      	add	r4, r3
 8048de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8048de4:	2200      	movs	r2, #0
 8048de6:	673b      	str	r3, [r7, #112]	; 0x70
 8048de8:	677a      	str	r2, [r7, #116]	; 0x74
 8048dea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8048dee:	4642      	mov	r2, r8
 8048df0:	464b      	mov	r3, r9
 8048df2:	1891      	adds	r1, r2, r2
 8048df4:	60b9      	str	r1, [r7, #8]
 8048df6:	415b      	adcs	r3, r3
 8048df8:	60fb      	str	r3, [r7, #12]
 8048dfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8048dfe:	4641      	mov	r1, r8
 8048e00:	1851      	adds	r1, r2, r1
 8048e02:	6039      	str	r1, [r7, #0]
 8048e04:	4649      	mov	r1, r9
 8048e06:	414b      	adcs	r3, r1
 8048e08:	607b      	str	r3, [r7, #4]
 8048e0a:	f04f 0200 	mov.w	r2, #0
 8048e0e:	f04f 0300 	mov.w	r3, #0
 8048e12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8048e16:	4659      	mov	r1, fp
 8048e18:	00cb      	lsls	r3, r1, #3
 8048e1a:	4651      	mov	r1, sl
 8048e1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8048e20:	4651      	mov	r1, sl
 8048e22:	00ca      	lsls	r2, r1, #3
 8048e24:	4610      	mov	r0, r2
 8048e26:	4619      	mov	r1, r3
 8048e28:	4603      	mov	r3, r0
 8048e2a:	4642      	mov	r2, r8
 8048e2c:	189b      	adds	r3, r3, r2
 8048e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8048e30:	464b      	mov	r3, r9
 8048e32:	460a      	mov	r2, r1
 8048e34:	eb42 0303 	adc.w	r3, r2, r3
 8048e38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8048e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048e3e:	685b      	ldr	r3, [r3, #4]
 8048e40:	2200      	movs	r2, #0
 8048e42:	663b      	str	r3, [r7, #96]	; 0x60
 8048e44:	667a      	str	r2, [r7, #100]	; 0x64
 8048e46:	f04f 0200 	mov.w	r2, #0
 8048e4a:	f04f 0300 	mov.w	r3, #0
 8048e4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8048e52:	4649      	mov	r1, r9
 8048e54:	008b      	lsls	r3, r1, #2
 8048e56:	4641      	mov	r1, r8
 8048e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8048e5c:	4641      	mov	r1, r8
 8048e5e:	008a      	lsls	r2, r1, #2
 8048e60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8048e64:	f7f7 fa14 	bl	8040290 <__aeabi_uldivmod>
 8048e68:	4602      	mov	r2, r0
 8048e6a:	460b      	mov	r3, r1
 8048e6c:	4b0d      	ldr	r3, [pc, #52]	; (8048ea4 <UART_SetConfig+0x4e4>)
 8048e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8048e72:	095b      	lsrs	r3, r3, #5
 8048e74:	2164      	movs	r1, #100	; 0x64
 8048e76:	fb01 f303 	mul.w	r3, r1, r3
 8048e7a:	1ad3      	subs	r3, r2, r3
 8048e7c:	011b      	lsls	r3, r3, #4
 8048e7e:	3332      	adds	r3, #50	; 0x32
 8048e80:	4a08      	ldr	r2, [pc, #32]	; (8048ea4 <UART_SetConfig+0x4e4>)
 8048e82:	fba2 2303 	umull	r2, r3, r2, r3
 8048e86:	095b      	lsrs	r3, r3, #5
 8048e88:	f003 020f 	and.w	r2, r3, #15
 8048e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048e90:	681b      	ldr	r3, [r3, #0]
 8048e92:	4422      	add	r2, r4
 8048e94:	609a      	str	r2, [r3, #8]
}
 8048e96:	bf00      	nop
 8048e98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8048e9c:	46bd      	mov	sp, r7
 8048e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8048ea2:	bf00      	nop
 8048ea4:	51eb851f 	.word	0x51eb851f

08048ea8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8048ea8:	b480      	push	{r7}
 8048eaa:	b083      	sub	sp, #12
 8048eac:	af00      	add	r7, sp, #0
 8048eae:	6078      	str	r0, [r7, #4]
 8048eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8048eb2:	683b      	ldr	r3, [r7, #0]
 8048eb4:	681b      	ldr	r3, [r3, #0]
 8048eb6:	2b00      	cmp	r3, #0
 8048eb8:	d123      	bne.n	8048f02 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8048eba:	687b      	ldr	r3, [r7, #4]
 8048ebc:	681b      	ldr	r3, [r3, #0]
 8048ebe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8048ec2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8048ec6:	683a      	ldr	r2, [r7, #0]
 8048ec8:	6851      	ldr	r1, [r2, #4]
 8048eca:	683a      	ldr	r2, [r7, #0]
 8048ecc:	6892      	ldr	r2, [r2, #8]
 8048ece:	4311      	orrs	r1, r2
 8048ed0:	683a      	ldr	r2, [r7, #0]
 8048ed2:	68d2      	ldr	r2, [r2, #12]
 8048ed4:	4311      	orrs	r1, r2
 8048ed6:	683a      	ldr	r2, [r7, #0]
 8048ed8:	6912      	ldr	r2, [r2, #16]
 8048eda:	4311      	orrs	r1, r2
 8048edc:	683a      	ldr	r2, [r7, #0]
 8048ede:	6952      	ldr	r2, [r2, #20]
 8048ee0:	4311      	orrs	r1, r2
 8048ee2:	683a      	ldr	r2, [r7, #0]
 8048ee4:	6992      	ldr	r2, [r2, #24]
 8048ee6:	4311      	orrs	r1, r2
 8048ee8:	683a      	ldr	r2, [r7, #0]
 8048eea:	69d2      	ldr	r2, [r2, #28]
 8048eec:	4311      	orrs	r1, r2
 8048eee:	683a      	ldr	r2, [r7, #0]
 8048ef0:	6a12      	ldr	r2, [r2, #32]
 8048ef2:	4311      	orrs	r1, r2
 8048ef4:	683a      	ldr	r2, [r7, #0]
 8048ef6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8048ef8:	430a      	orrs	r2, r1
 8048efa:	431a      	orrs	r2, r3
 8048efc:	687b      	ldr	r3, [r7, #4]
 8048efe:	601a      	str	r2, [r3, #0]
 8048f00:	e028      	b.n	8048f54 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8048f02:	687b      	ldr	r3, [r7, #4]
 8048f04:	681b      	ldr	r3, [r3, #0]
 8048f06:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8048f0a:	683b      	ldr	r3, [r7, #0]
 8048f0c:	69d9      	ldr	r1, [r3, #28]
 8048f0e:	683b      	ldr	r3, [r7, #0]
 8048f10:	6a1b      	ldr	r3, [r3, #32]
 8048f12:	4319      	orrs	r1, r3
 8048f14:	683b      	ldr	r3, [r7, #0]
 8048f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8048f18:	430b      	orrs	r3, r1
 8048f1a:	431a      	orrs	r2, r3
 8048f1c:	687b      	ldr	r3, [r7, #4]
 8048f1e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8048f20:	687b      	ldr	r3, [r7, #4]
 8048f22:	685b      	ldr	r3, [r3, #4]
 8048f24:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8048f28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8048f2c:	683a      	ldr	r2, [r7, #0]
 8048f2e:	6851      	ldr	r1, [r2, #4]
 8048f30:	683a      	ldr	r2, [r7, #0]
 8048f32:	6892      	ldr	r2, [r2, #8]
 8048f34:	4311      	orrs	r1, r2
 8048f36:	683a      	ldr	r2, [r7, #0]
 8048f38:	68d2      	ldr	r2, [r2, #12]
 8048f3a:	4311      	orrs	r1, r2
 8048f3c:	683a      	ldr	r2, [r7, #0]
 8048f3e:	6912      	ldr	r2, [r2, #16]
 8048f40:	4311      	orrs	r1, r2
 8048f42:	683a      	ldr	r2, [r7, #0]
 8048f44:	6952      	ldr	r2, [r2, #20]
 8048f46:	4311      	orrs	r1, r2
 8048f48:	683a      	ldr	r2, [r7, #0]
 8048f4a:	6992      	ldr	r2, [r2, #24]
 8048f4c:	430a      	orrs	r2, r1
 8048f4e:	431a      	orrs	r2, r3
 8048f50:	687b      	ldr	r3, [r7, #4]
 8048f52:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8048f54:	2300      	movs	r3, #0
}
 8048f56:	4618      	mov	r0, r3
 8048f58:	370c      	adds	r7, #12
 8048f5a:	46bd      	mov	sp, r7
 8048f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048f60:	4770      	bx	lr

08048f62 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8048f62:	b480      	push	{r7}
 8048f64:	b085      	sub	sp, #20
 8048f66:	af00      	add	r7, sp, #0
 8048f68:	60f8      	str	r0, [r7, #12]
 8048f6a:	60b9      	str	r1, [r7, #8]
 8048f6c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8048f6e:	687b      	ldr	r3, [r7, #4]
 8048f70:	2b00      	cmp	r3, #0
 8048f72:	d128      	bne.n	8048fc6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8048f74:	68fb      	ldr	r3, [r7, #12]
 8048f76:	689b      	ldr	r3, [r3, #8]
 8048f78:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8048f7c:	68bb      	ldr	r3, [r7, #8]
 8048f7e:	681b      	ldr	r3, [r3, #0]
 8048f80:	1e59      	subs	r1, r3, #1
 8048f82:	68bb      	ldr	r3, [r7, #8]
 8048f84:	685b      	ldr	r3, [r3, #4]
 8048f86:	3b01      	subs	r3, #1
 8048f88:	011b      	lsls	r3, r3, #4
 8048f8a:	4319      	orrs	r1, r3
 8048f8c:	68bb      	ldr	r3, [r7, #8]
 8048f8e:	689b      	ldr	r3, [r3, #8]
 8048f90:	3b01      	subs	r3, #1
 8048f92:	021b      	lsls	r3, r3, #8
 8048f94:	4319      	orrs	r1, r3
 8048f96:	68bb      	ldr	r3, [r7, #8]
 8048f98:	68db      	ldr	r3, [r3, #12]
 8048f9a:	3b01      	subs	r3, #1
 8048f9c:	031b      	lsls	r3, r3, #12
 8048f9e:	4319      	orrs	r1, r3
 8048fa0:	68bb      	ldr	r3, [r7, #8]
 8048fa2:	691b      	ldr	r3, [r3, #16]
 8048fa4:	3b01      	subs	r3, #1
 8048fa6:	041b      	lsls	r3, r3, #16
 8048fa8:	4319      	orrs	r1, r3
 8048faa:	68bb      	ldr	r3, [r7, #8]
 8048fac:	695b      	ldr	r3, [r3, #20]
 8048fae:	3b01      	subs	r3, #1
 8048fb0:	051b      	lsls	r3, r3, #20
 8048fb2:	4319      	orrs	r1, r3
 8048fb4:	68bb      	ldr	r3, [r7, #8]
 8048fb6:	699b      	ldr	r3, [r3, #24]
 8048fb8:	3b01      	subs	r3, #1
 8048fba:	061b      	lsls	r3, r3, #24
 8048fbc:	430b      	orrs	r3, r1
 8048fbe:	431a      	orrs	r2, r3
 8048fc0:	68fb      	ldr	r3, [r7, #12]
 8048fc2:	609a      	str	r2, [r3, #8]
 8048fc4:	e02f      	b.n	8049026 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8048fc6:	68fb      	ldr	r3, [r7, #12]
 8048fc8:	689b      	ldr	r3, [r3, #8]
 8048fca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8048fce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8048fd2:	68ba      	ldr	r2, [r7, #8]
 8048fd4:	68d2      	ldr	r2, [r2, #12]
 8048fd6:	3a01      	subs	r2, #1
 8048fd8:	0311      	lsls	r1, r2, #12
 8048fda:	68ba      	ldr	r2, [r7, #8]
 8048fdc:	6952      	ldr	r2, [r2, #20]
 8048fde:	3a01      	subs	r2, #1
 8048fe0:	0512      	lsls	r2, r2, #20
 8048fe2:	430a      	orrs	r2, r1
 8048fe4:	431a      	orrs	r2, r3
 8048fe6:	68fb      	ldr	r3, [r7, #12]
 8048fe8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8048fea:	68fb      	ldr	r3, [r7, #12]
 8048fec:	68db      	ldr	r3, [r3, #12]
 8048fee:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8048ff2:	68bb      	ldr	r3, [r7, #8]
 8048ff4:	681b      	ldr	r3, [r3, #0]
 8048ff6:	1e59      	subs	r1, r3, #1
 8048ff8:	68bb      	ldr	r3, [r7, #8]
 8048ffa:	685b      	ldr	r3, [r3, #4]
 8048ffc:	3b01      	subs	r3, #1
 8048ffe:	011b      	lsls	r3, r3, #4
 8049000:	4319      	orrs	r1, r3
 8049002:	68bb      	ldr	r3, [r7, #8]
 8049004:	689b      	ldr	r3, [r3, #8]
 8049006:	3b01      	subs	r3, #1
 8049008:	021b      	lsls	r3, r3, #8
 804900a:	4319      	orrs	r1, r3
 804900c:	68bb      	ldr	r3, [r7, #8]
 804900e:	691b      	ldr	r3, [r3, #16]
 8049010:	3b01      	subs	r3, #1
 8049012:	041b      	lsls	r3, r3, #16
 8049014:	4319      	orrs	r1, r3
 8049016:	68bb      	ldr	r3, [r7, #8]
 8049018:	699b      	ldr	r3, [r3, #24]
 804901a:	3b01      	subs	r3, #1
 804901c:	061b      	lsls	r3, r3, #24
 804901e:	430b      	orrs	r3, r1
 8049020:	431a      	orrs	r2, r3
 8049022:	68fb      	ldr	r3, [r7, #12]
 8049024:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8049026:	2300      	movs	r3, #0
}
 8049028:	4618      	mov	r0, r3
 804902a:	3714      	adds	r7, #20
 804902c:	46bd      	mov	sp, r7
 804902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049032:	4770      	bx	lr

08049034 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8049034:	b580      	push	{r7, lr}
 8049036:	b086      	sub	sp, #24
 8049038:	af00      	add	r7, sp, #0
 804903a:	60f8      	str	r0, [r7, #12]
 804903c:	60b9      	str	r1, [r7, #8]
 804903e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8049040:	2300      	movs	r3, #0
 8049042:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8049044:	68fb      	ldr	r3, [r7, #12]
 8049046:	691b      	ldr	r3, [r3, #16]
 8049048:	0d9b      	lsrs	r3, r3, #22
 804904a:	059b      	lsls	r3, r3, #22
 804904c:	68ba      	ldr	r2, [r7, #8]
 804904e:	6811      	ldr	r1, [r2, #0]
 8049050:	68ba      	ldr	r2, [r7, #8]
 8049052:	6852      	ldr	r2, [r2, #4]
 8049054:	4311      	orrs	r1, r2
 8049056:	68ba      	ldr	r2, [r7, #8]
 8049058:	6892      	ldr	r2, [r2, #8]
 804905a:	3a01      	subs	r2, #1
 804905c:	0152      	lsls	r2, r2, #5
 804905e:	4311      	orrs	r1, r2
 8049060:	68ba      	ldr	r2, [r7, #8]
 8049062:	68d2      	ldr	r2, [r2, #12]
 8049064:	0252      	lsls	r2, r2, #9
 8049066:	430a      	orrs	r2, r1
 8049068:	431a      	orrs	r2, r3
 804906a:	68fb      	ldr	r3, [r7, #12]
 804906c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 804906e:	f7f9 fe91 	bl	8042d94 <HAL_GetTick>
 8049072:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8049074:	e010      	b.n	8049098 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8049076:	687b      	ldr	r3, [r7, #4]
 8049078:	f1b3 3fff 	cmp.w	r3, #4294967295
 804907c:	d00c      	beq.n	8049098 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 804907e:	687b      	ldr	r3, [r7, #4]
 8049080:	2b00      	cmp	r3, #0
 8049082:	d007      	beq.n	8049094 <FMC_SDRAM_SendCommand+0x60>
 8049084:	f7f9 fe86 	bl	8042d94 <HAL_GetTick>
 8049088:	4602      	mov	r2, r0
 804908a:	697b      	ldr	r3, [r7, #20]
 804908c:	1ad3      	subs	r3, r2, r3
 804908e:	687a      	ldr	r2, [r7, #4]
 8049090:	429a      	cmp	r2, r3
 8049092:	d201      	bcs.n	8049098 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8049094:	2303      	movs	r3, #3
 8049096:	e006      	b.n	80490a6 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8049098:	68fb      	ldr	r3, [r7, #12]
 804909a:	699b      	ldr	r3, [r3, #24]
 804909c:	f003 0320 	and.w	r3, r3, #32
 80490a0:	2b20      	cmp	r3, #32
 80490a2:	d0e8      	beq.n	8049076 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80490a4:	2300      	movs	r3, #0
}
 80490a6:	4618      	mov	r0, r3
 80490a8:	3718      	adds	r7, #24
 80490aa:	46bd      	mov	sp, r7
 80490ac:	bd80      	pop	{r7, pc}

080490ae <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80490ae:	b480      	push	{r7}
 80490b0:	b083      	sub	sp, #12
 80490b2:	af00      	add	r7, sp, #0
 80490b4:	6078      	str	r0, [r7, #4]
 80490b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80490b8:	687b      	ldr	r3, [r7, #4]
 80490ba:	695b      	ldr	r3, [r3, #20]
 80490bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80490c0:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80490c4:	683a      	ldr	r2, [r7, #0]
 80490c6:	0052      	lsls	r2, r2, #1
 80490c8:	431a      	orrs	r2, r3
 80490ca:	687b      	ldr	r3, [r7, #4]
 80490cc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80490ce:	2300      	movs	r3, #0
}
 80490d0:	4618      	mov	r0, r3
 80490d2:	370c      	adds	r7, #12
 80490d4:	46bd      	mov	sp, r7
 80490d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80490da:	4770      	bx	lr

080490dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80490dc:	b084      	sub	sp, #16
 80490de:	b580      	push	{r7, lr}
 80490e0:	b084      	sub	sp, #16
 80490e2:	af00      	add	r7, sp, #0
 80490e4:	6078      	str	r0, [r7, #4]
 80490e6:	f107 001c 	add.w	r0, r7, #28
 80490ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80490ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80490f0:	2b01      	cmp	r3, #1
 80490f2:	d122      	bne.n	804913a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80490f4:	687b      	ldr	r3, [r7, #4]
 80490f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80490f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80490fc:	687b      	ldr	r3, [r7, #4]
 80490fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8049100:	687b      	ldr	r3, [r7, #4]
 8049102:	68db      	ldr	r3, [r3, #12]
 8049104:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8049108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804910c:	687a      	ldr	r2, [r7, #4]
 804910e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8049110:	687b      	ldr	r3, [r7, #4]
 8049112:	68db      	ldr	r3, [r3, #12]
 8049114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8049118:	687b      	ldr	r3, [r7, #4]
 804911a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 804911c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 804911e:	2b01      	cmp	r3, #1
 8049120:	d105      	bne.n	804912e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8049122:	687b      	ldr	r3, [r7, #4]
 8049124:	68db      	ldr	r3, [r3, #12]
 8049126:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 804912a:	687b      	ldr	r3, [r7, #4]
 804912c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 804912e:	6878      	ldr	r0, [r7, #4]
 8049130:	f000 f9c0 	bl	80494b4 <USB_CoreReset>
 8049134:	4603      	mov	r3, r0
 8049136:	73fb      	strb	r3, [r7, #15]
 8049138:	e01a      	b.n	8049170 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 804913a:	687b      	ldr	r3, [r7, #4]
 804913c:	68db      	ldr	r3, [r3, #12]
 804913e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8049142:	687b      	ldr	r3, [r7, #4]
 8049144:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8049146:	6878      	ldr	r0, [r7, #4]
 8049148:	f000 f9b4 	bl	80494b4 <USB_CoreReset>
 804914c:	4603      	mov	r3, r0
 804914e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8049150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8049152:	2b00      	cmp	r3, #0
 8049154:	d106      	bne.n	8049164 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8049156:	687b      	ldr	r3, [r7, #4]
 8049158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804915a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 804915e:	687b      	ldr	r3, [r7, #4]
 8049160:	639a      	str	r2, [r3, #56]	; 0x38
 8049162:	e005      	b.n	8049170 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8049164:	687b      	ldr	r3, [r7, #4]
 8049166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049168:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 804916c:	687b      	ldr	r3, [r7, #4]
 804916e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8049170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049172:	2b01      	cmp	r3, #1
 8049174:	d10b      	bne.n	804918e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8049176:	687b      	ldr	r3, [r7, #4]
 8049178:	689b      	ldr	r3, [r3, #8]
 804917a:	f043 0206 	orr.w	r2, r3, #6
 804917e:	687b      	ldr	r3, [r7, #4]
 8049180:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8049182:	687b      	ldr	r3, [r7, #4]
 8049184:	689b      	ldr	r3, [r3, #8]
 8049186:	f043 0220 	orr.w	r2, r3, #32
 804918a:	687b      	ldr	r3, [r7, #4]
 804918c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 804918e:	7bfb      	ldrb	r3, [r7, #15]
}
 8049190:	4618      	mov	r0, r3
 8049192:	3710      	adds	r7, #16
 8049194:	46bd      	mov	sp, r7
 8049196:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 804919a:	b004      	add	sp, #16
 804919c:	4770      	bx	lr

0804919e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 804919e:	b480      	push	{r7}
 80491a0:	b083      	sub	sp, #12
 80491a2:	af00      	add	r7, sp, #0
 80491a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80491a6:	687b      	ldr	r3, [r7, #4]
 80491a8:	689b      	ldr	r3, [r3, #8]
 80491aa:	f043 0201 	orr.w	r2, r3, #1
 80491ae:	687b      	ldr	r3, [r7, #4]
 80491b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80491b2:	2300      	movs	r3, #0
}
 80491b4:	4618      	mov	r0, r3
 80491b6:	370c      	adds	r7, #12
 80491b8:	46bd      	mov	sp, r7
 80491ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80491be:	4770      	bx	lr

080491c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80491c0:	b480      	push	{r7}
 80491c2:	b083      	sub	sp, #12
 80491c4:	af00      	add	r7, sp, #0
 80491c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80491c8:	687b      	ldr	r3, [r7, #4]
 80491ca:	689b      	ldr	r3, [r3, #8]
 80491cc:	f023 0201 	bic.w	r2, r3, #1
 80491d0:	687b      	ldr	r3, [r7, #4]
 80491d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80491d4:	2300      	movs	r3, #0
}
 80491d6:	4618      	mov	r0, r3
 80491d8:	370c      	adds	r7, #12
 80491da:	46bd      	mov	sp, r7
 80491dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80491e0:	4770      	bx	lr

080491e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80491e2:	b580      	push	{r7, lr}
 80491e4:	b084      	sub	sp, #16
 80491e6:	af00      	add	r7, sp, #0
 80491e8:	6078      	str	r0, [r7, #4]
 80491ea:	460b      	mov	r3, r1
 80491ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80491ee:	2300      	movs	r3, #0
 80491f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80491f2:	687b      	ldr	r3, [r7, #4]
 80491f4:	68db      	ldr	r3, [r3, #12]
 80491f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80491fa:	687b      	ldr	r3, [r7, #4]
 80491fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80491fe:	78fb      	ldrb	r3, [r7, #3]
 8049200:	2b01      	cmp	r3, #1
 8049202:	d115      	bne.n	8049230 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8049204:	687b      	ldr	r3, [r7, #4]
 8049206:	68db      	ldr	r3, [r3, #12]
 8049208:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 804920c:	687b      	ldr	r3, [r7, #4]
 804920e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8049210:	2001      	movs	r0, #1
 8049212:	f7f9 fdcb 	bl	8042dac <HAL_Delay>
      ms++;
 8049216:	68fb      	ldr	r3, [r7, #12]
 8049218:	3301      	adds	r3, #1
 804921a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 804921c:	6878      	ldr	r0, [r7, #4]
 804921e:	f000 f93a 	bl	8049496 <USB_GetMode>
 8049222:	4603      	mov	r3, r0
 8049224:	2b01      	cmp	r3, #1
 8049226:	d01e      	beq.n	8049266 <USB_SetCurrentMode+0x84>
 8049228:	68fb      	ldr	r3, [r7, #12]
 804922a:	2b31      	cmp	r3, #49	; 0x31
 804922c:	d9f0      	bls.n	8049210 <USB_SetCurrentMode+0x2e>
 804922e:	e01a      	b.n	8049266 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8049230:	78fb      	ldrb	r3, [r7, #3]
 8049232:	2b00      	cmp	r3, #0
 8049234:	d115      	bne.n	8049262 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8049236:	687b      	ldr	r3, [r7, #4]
 8049238:	68db      	ldr	r3, [r3, #12]
 804923a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 804923e:	687b      	ldr	r3, [r7, #4]
 8049240:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8049242:	2001      	movs	r0, #1
 8049244:	f7f9 fdb2 	bl	8042dac <HAL_Delay>
      ms++;
 8049248:	68fb      	ldr	r3, [r7, #12]
 804924a:	3301      	adds	r3, #1
 804924c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 804924e:	6878      	ldr	r0, [r7, #4]
 8049250:	f000 f921 	bl	8049496 <USB_GetMode>
 8049254:	4603      	mov	r3, r0
 8049256:	2b00      	cmp	r3, #0
 8049258:	d005      	beq.n	8049266 <USB_SetCurrentMode+0x84>
 804925a:	68fb      	ldr	r3, [r7, #12]
 804925c:	2b31      	cmp	r3, #49	; 0x31
 804925e:	d9f0      	bls.n	8049242 <USB_SetCurrentMode+0x60>
 8049260:	e001      	b.n	8049266 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8049262:	2301      	movs	r3, #1
 8049264:	e005      	b.n	8049272 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8049266:	68fb      	ldr	r3, [r7, #12]
 8049268:	2b32      	cmp	r3, #50	; 0x32
 804926a:	d101      	bne.n	8049270 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 804926c:	2301      	movs	r3, #1
 804926e:	e000      	b.n	8049272 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8049270:	2300      	movs	r3, #0
}
 8049272:	4618      	mov	r0, r3
 8049274:	3710      	adds	r7, #16
 8049276:	46bd      	mov	sp, r7
 8049278:	bd80      	pop	{r7, pc}
	...

0804927c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 804927c:	b480      	push	{r7}
 804927e:	b085      	sub	sp, #20
 8049280:	af00      	add	r7, sp, #0
 8049282:	6078      	str	r0, [r7, #4]
 8049284:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8049286:	2300      	movs	r3, #0
 8049288:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 804928a:	68fb      	ldr	r3, [r7, #12]
 804928c:	3301      	adds	r3, #1
 804928e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8049290:	68fb      	ldr	r3, [r7, #12]
 8049292:	4a13      	ldr	r2, [pc, #76]	; (80492e0 <USB_FlushTxFifo+0x64>)
 8049294:	4293      	cmp	r3, r2
 8049296:	d901      	bls.n	804929c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8049298:	2303      	movs	r3, #3
 804929a:	e01b      	b.n	80492d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 804929c:	687b      	ldr	r3, [r7, #4]
 804929e:	691b      	ldr	r3, [r3, #16]
 80492a0:	2b00      	cmp	r3, #0
 80492a2:	daf2      	bge.n	804928a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80492a4:	2300      	movs	r3, #0
 80492a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80492a8:	683b      	ldr	r3, [r7, #0]
 80492aa:	019b      	lsls	r3, r3, #6
 80492ac:	f043 0220 	orr.w	r2, r3, #32
 80492b0:	687b      	ldr	r3, [r7, #4]
 80492b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80492b4:	68fb      	ldr	r3, [r7, #12]
 80492b6:	3301      	adds	r3, #1
 80492b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80492ba:	68fb      	ldr	r3, [r7, #12]
 80492bc:	4a08      	ldr	r2, [pc, #32]	; (80492e0 <USB_FlushTxFifo+0x64>)
 80492be:	4293      	cmp	r3, r2
 80492c0:	d901      	bls.n	80492c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80492c2:	2303      	movs	r3, #3
 80492c4:	e006      	b.n	80492d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80492c6:	687b      	ldr	r3, [r7, #4]
 80492c8:	691b      	ldr	r3, [r3, #16]
 80492ca:	f003 0320 	and.w	r3, r3, #32
 80492ce:	2b20      	cmp	r3, #32
 80492d0:	d0f0      	beq.n	80492b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80492d2:	2300      	movs	r3, #0
}
 80492d4:	4618      	mov	r0, r3
 80492d6:	3714      	adds	r7, #20
 80492d8:	46bd      	mov	sp, r7
 80492da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80492de:	4770      	bx	lr
 80492e0:	00030d40 	.word	0x00030d40

080492e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80492e4:	b480      	push	{r7}
 80492e6:	b085      	sub	sp, #20
 80492e8:	af00      	add	r7, sp, #0
 80492ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80492ec:	2300      	movs	r3, #0
 80492ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80492f0:	68fb      	ldr	r3, [r7, #12]
 80492f2:	3301      	adds	r3, #1
 80492f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80492f6:	68fb      	ldr	r3, [r7, #12]
 80492f8:	4a11      	ldr	r2, [pc, #68]	; (8049340 <USB_FlushRxFifo+0x5c>)
 80492fa:	4293      	cmp	r3, r2
 80492fc:	d901      	bls.n	8049302 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80492fe:	2303      	movs	r3, #3
 8049300:	e018      	b.n	8049334 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8049302:	687b      	ldr	r3, [r7, #4]
 8049304:	691b      	ldr	r3, [r3, #16]
 8049306:	2b00      	cmp	r3, #0
 8049308:	daf2      	bge.n	80492f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 804930a:	2300      	movs	r3, #0
 804930c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 804930e:	687b      	ldr	r3, [r7, #4]
 8049310:	2210      	movs	r2, #16
 8049312:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8049314:	68fb      	ldr	r3, [r7, #12]
 8049316:	3301      	adds	r3, #1
 8049318:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804931a:	68fb      	ldr	r3, [r7, #12]
 804931c:	4a08      	ldr	r2, [pc, #32]	; (8049340 <USB_FlushRxFifo+0x5c>)
 804931e:	4293      	cmp	r3, r2
 8049320:	d901      	bls.n	8049326 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8049322:	2303      	movs	r3, #3
 8049324:	e006      	b.n	8049334 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8049326:	687b      	ldr	r3, [r7, #4]
 8049328:	691b      	ldr	r3, [r3, #16]
 804932a:	f003 0310 	and.w	r3, r3, #16
 804932e:	2b10      	cmp	r3, #16
 8049330:	d0f0      	beq.n	8049314 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8049332:	2300      	movs	r3, #0
}
 8049334:	4618      	mov	r0, r3
 8049336:	3714      	adds	r7, #20
 8049338:	46bd      	mov	sp, r7
 804933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804933e:	4770      	bx	lr
 8049340:	00030d40 	.word	0x00030d40

08049344 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8049344:	b480      	push	{r7}
 8049346:	b089      	sub	sp, #36	; 0x24
 8049348:	af00      	add	r7, sp, #0
 804934a:	60f8      	str	r0, [r7, #12]
 804934c:	60b9      	str	r1, [r7, #8]
 804934e:	4611      	mov	r1, r2
 8049350:	461a      	mov	r2, r3
 8049352:	460b      	mov	r3, r1
 8049354:	71fb      	strb	r3, [r7, #7]
 8049356:	4613      	mov	r3, r2
 8049358:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804935a:	68fb      	ldr	r3, [r7, #12]
 804935c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 804935e:	68bb      	ldr	r3, [r7, #8]
 8049360:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8049362:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8049366:	2b00      	cmp	r3, #0
 8049368:	d123      	bne.n	80493b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 804936a:	88bb      	ldrh	r3, [r7, #4]
 804936c:	3303      	adds	r3, #3
 804936e:	089b      	lsrs	r3, r3, #2
 8049370:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8049372:	2300      	movs	r3, #0
 8049374:	61bb      	str	r3, [r7, #24]
 8049376:	e018      	b.n	80493aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8049378:	79fb      	ldrb	r3, [r7, #7]
 804937a:	031a      	lsls	r2, r3, #12
 804937c:	697b      	ldr	r3, [r7, #20]
 804937e:	4413      	add	r3, r2
 8049380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8049384:	461a      	mov	r2, r3
 8049386:	69fb      	ldr	r3, [r7, #28]
 8049388:	681b      	ldr	r3, [r3, #0]
 804938a:	6013      	str	r3, [r2, #0]
      pSrc++;
 804938c:	69fb      	ldr	r3, [r7, #28]
 804938e:	3301      	adds	r3, #1
 8049390:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8049392:	69fb      	ldr	r3, [r7, #28]
 8049394:	3301      	adds	r3, #1
 8049396:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8049398:	69fb      	ldr	r3, [r7, #28]
 804939a:	3301      	adds	r3, #1
 804939c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 804939e:	69fb      	ldr	r3, [r7, #28]
 80493a0:	3301      	adds	r3, #1
 80493a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80493a4:	69bb      	ldr	r3, [r7, #24]
 80493a6:	3301      	adds	r3, #1
 80493a8:	61bb      	str	r3, [r7, #24]
 80493aa:	69ba      	ldr	r2, [r7, #24]
 80493ac:	693b      	ldr	r3, [r7, #16]
 80493ae:	429a      	cmp	r2, r3
 80493b0:	d3e2      	bcc.n	8049378 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80493b2:	2300      	movs	r3, #0
}
 80493b4:	4618      	mov	r0, r3
 80493b6:	3724      	adds	r7, #36	; 0x24
 80493b8:	46bd      	mov	sp, r7
 80493ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80493be:	4770      	bx	lr

080493c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80493c0:	b480      	push	{r7}
 80493c2:	b08b      	sub	sp, #44	; 0x2c
 80493c4:	af00      	add	r7, sp, #0
 80493c6:	60f8      	str	r0, [r7, #12]
 80493c8:	60b9      	str	r1, [r7, #8]
 80493ca:	4613      	mov	r3, r2
 80493cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80493ce:	68fb      	ldr	r3, [r7, #12]
 80493d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80493d2:	68bb      	ldr	r3, [r7, #8]
 80493d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80493d6:	88fb      	ldrh	r3, [r7, #6]
 80493d8:	089b      	lsrs	r3, r3, #2
 80493da:	b29b      	uxth	r3, r3
 80493dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80493de:	88fb      	ldrh	r3, [r7, #6]
 80493e0:	f003 0303 	and.w	r3, r3, #3
 80493e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80493e6:	2300      	movs	r3, #0
 80493e8:	623b      	str	r3, [r7, #32]
 80493ea:	e014      	b.n	8049416 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80493ec:	69bb      	ldr	r3, [r7, #24]
 80493ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80493f2:	681a      	ldr	r2, [r3, #0]
 80493f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80493f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80493f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80493fa:	3301      	adds	r3, #1
 80493fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80493fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049400:	3301      	adds	r3, #1
 8049402:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8049404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049406:	3301      	adds	r3, #1
 8049408:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 804940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804940c:	3301      	adds	r3, #1
 804940e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8049410:	6a3b      	ldr	r3, [r7, #32]
 8049412:	3301      	adds	r3, #1
 8049414:	623b      	str	r3, [r7, #32]
 8049416:	6a3a      	ldr	r2, [r7, #32]
 8049418:	697b      	ldr	r3, [r7, #20]
 804941a:	429a      	cmp	r2, r3
 804941c:	d3e6      	bcc.n	80493ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 804941e:	8bfb      	ldrh	r3, [r7, #30]
 8049420:	2b00      	cmp	r3, #0
 8049422:	d01e      	beq.n	8049462 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8049424:	2300      	movs	r3, #0
 8049426:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8049428:	69bb      	ldr	r3, [r7, #24]
 804942a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804942e:	461a      	mov	r2, r3
 8049430:	f107 0310 	add.w	r3, r7, #16
 8049434:	6812      	ldr	r2, [r2, #0]
 8049436:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8049438:	693a      	ldr	r2, [r7, #16]
 804943a:	6a3b      	ldr	r3, [r7, #32]
 804943c:	b2db      	uxtb	r3, r3
 804943e:	00db      	lsls	r3, r3, #3
 8049440:	fa22 f303 	lsr.w	r3, r2, r3
 8049444:	b2da      	uxtb	r2, r3
 8049446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049448:	701a      	strb	r2, [r3, #0]
      i++;
 804944a:	6a3b      	ldr	r3, [r7, #32]
 804944c:	3301      	adds	r3, #1
 804944e:	623b      	str	r3, [r7, #32]
      pDest++;
 8049450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049452:	3301      	adds	r3, #1
 8049454:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8049456:	8bfb      	ldrh	r3, [r7, #30]
 8049458:	3b01      	subs	r3, #1
 804945a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 804945c:	8bfb      	ldrh	r3, [r7, #30]
 804945e:	2b00      	cmp	r3, #0
 8049460:	d1ea      	bne.n	8049438 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8049462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8049464:	4618      	mov	r0, r3
 8049466:	372c      	adds	r7, #44	; 0x2c
 8049468:	46bd      	mov	sp, r7
 804946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804946e:	4770      	bx	lr

08049470 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8049470:	b480      	push	{r7}
 8049472:	b085      	sub	sp, #20
 8049474:	af00      	add	r7, sp, #0
 8049476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8049478:	687b      	ldr	r3, [r7, #4]
 804947a:	695b      	ldr	r3, [r3, #20]
 804947c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 804947e:	687b      	ldr	r3, [r7, #4]
 8049480:	699b      	ldr	r3, [r3, #24]
 8049482:	68fa      	ldr	r2, [r7, #12]
 8049484:	4013      	ands	r3, r2
 8049486:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8049488:	68fb      	ldr	r3, [r7, #12]
}
 804948a:	4618      	mov	r0, r3
 804948c:	3714      	adds	r7, #20
 804948e:	46bd      	mov	sp, r7
 8049490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049494:	4770      	bx	lr

08049496 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8049496:	b480      	push	{r7}
 8049498:	b083      	sub	sp, #12
 804949a:	af00      	add	r7, sp, #0
 804949c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 804949e:	687b      	ldr	r3, [r7, #4]
 80494a0:	695b      	ldr	r3, [r3, #20]
 80494a2:	f003 0301 	and.w	r3, r3, #1
}
 80494a6:	4618      	mov	r0, r3
 80494a8:	370c      	adds	r7, #12
 80494aa:	46bd      	mov	sp, r7
 80494ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80494b0:	4770      	bx	lr
	...

080494b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80494b4:	b480      	push	{r7}
 80494b6:	b085      	sub	sp, #20
 80494b8:	af00      	add	r7, sp, #0
 80494ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80494bc:	2300      	movs	r3, #0
 80494be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80494c0:	68fb      	ldr	r3, [r7, #12]
 80494c2:	3301      	adds	r3, #1
 80494c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80494c6:	68fb      	ldr	r3, [r7, #12]
 80494c8:	4a13      	ldr	r2, [pc, #76]	; (8049518 <USB_CoreReset+0x64>)
 80494ca:	4293      	cmp	r3, r2
 80494cc:	d901      	bls.n	80494d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80494ce:	2303      	movs	r3, #3
 80494d0:	e01b      	b.n	804950a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80494d2:	687b      	ldr	r3, [r7, #4]
 80494d4:	691b      	ldr	r3, [r3, #16]
 80494d6:	2b00      	cmp	r3, #0
 80494d8:	daf2      	bge.n	80494c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80494da:	2300      	movs	r3, #0
 80494dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80494de:	687b      	ldr	r3, [r7, #4]
 80494e0:	691b      	ldr	r3, [r3, #16]
 80494e2:	f043 0201 	orr.w	r2, r3, #1
 80494e6:	687b      	ldr	r3, [r7, #4]
 80494e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80494ea:	68fb      	ldr	r3, [r7, #12]
 80494ec:	3301      	adds	r3, #1
 80494ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80494f0:	68fb      	ldr	r3, [r7, #12]
 80494f2:	4a09      	ldr	r2, [pc, #36]	; (8049518 <USB_CoreReset+0x64>)
 80494f4:	4293      	cmp	r3, r2
 80494f6:	d901      	bls.n	80494fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80494f8:	2303      	movs	r3, #3
 80494fa:	e006      	b.n	804950a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80494fc:	687b      	ldr	r3, [r7, #4]
 80494fe:	691b      	ldr	r3, [r3, #16]
 8049500:	f003 0301 	and.w	r3, r3, #1
 8049504:	2b01      	cmp	r3, #1
 8049506:	d0f0      	beq.n	80494ea <USB_CoreReset+0x36>

  return HAL_OK;
 8049508:	2300      	movs	r3, #0
}
 804950a:	4618      	mov	r0, r3
 804950c:	3714      	adds	r7, #20
 804950e:	46bd      	mov	sp, r7
 8049510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049514:	4770      	bx	lr
 8049516:	bf00      	nop
 8049518:	00030d40 	.word	0x00030d40

0804951c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 804951c:	b084      	sub	sp, #16
 804951e:	b580      	push	{r7, lr}
 8049520:	b086      	sub	sp, #24
 8049522:	af00      	add	r7, sp, #0
 8049524:	6078      	str	r0, [r7, #4]
 8049526:	f107 0024 	add.w	r0, r7, #36	; 0x24
 804952a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 804952e:	2300      	movs	r3, #0
 8049530:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049532:	687b      	ldr	r3, [r7, #4]
 8049534:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8049536:	68fb      	ldr	r3, [r7, #12]
 8049538:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 804953c:	461a      	mov	r2, r3
 804953e:	2300      	movs	r3, #0
 8049540:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8049542:	687b      	ldr	r3, [r7, #4]
 8049544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049546:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 804954a:	687b      	ldr	r3, [r7, #4]
 804954c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 804954e:	687b      	ldr	r3, [r7, #4]
 8049550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049552:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8049556:	687b      	ldr	r3, [r7, #4]
 8049558:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 804955a:	687b      	ldr	r3, [r7, #4]
 804955c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804955e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8049562:	687b      	ldr	r3, [r7, #4]
 8049564:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8049566:	687b      	ldr	r3, [r7, #4]
 8049568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804956a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804956e:	2b00      	cmp	r3, #0
 8049570:	d018      	beq.n	80495a4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8049572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049574:	2b01      	cmp	r3, #1
 8049576:	d10a      	bne.n	804958e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8049578:	68fb      	ldr	r3, [r7, #12]
 804957a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804957e:	681b      	ldr	r3, [r3, #0]
 8049580:	68fa      	ldr	r2, [r7, #12]
 8049582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8049586:	f043 0304 	orr.w	r3, r3, #4
 804958a:	6013      	str	r3, [r2, #0]
 804958c:	e014      	b.n	80495b8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 804958e:	68fb      	ldr	r3, [r7, #12]
 8049590:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049594:	681b      	ldr	r3, [r3, #0]
 8049596:	68fa      	ldr	r2, [r7, #12]
 8049598:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804959c:	f023 0304 	bic.w	r3, r3, #4
 80495a0:	6013      	str	r3, [r2, #0]
 80495a2:	e009      	b.n	80495b8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80495a4:	68fb      	ldr	r3, [r7, #12]
 80495a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80495aa:	681b      	ldr	r3, [r3, #0]
 80495ac:	68fa      	ldr	r2, [r7, #12]
 80495ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80495b2:	f023 0304 	bic.w	r3, r3, #4
 80495b6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80495b8:	2110      	movs	r1, #16
 80495ba:	6878      	ldr	r0, [r7, #4]
 80495bc:	f7ff fe5e 	bl	804927c <USB_FlushTxFifo>
 80495c0:	4603      	mov	r3, r0
 80495c2:	2b00      	cmp	r3, #0
 80495c4:	d001      	beq.n	80495ca <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80495c6:	2301      	movs	r3, #1
 80495c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80495ca:	6878      	ldr	r0, [r7, #4]
 80495cc:	f7ff fe8a 	bl	80492e4 <USB_FlushRxFifo>
 80495d0:	4603      	mov	r3, r0
 80495d2:	2b00      	cmp	r3, #0
 80495d4:	d001      	beq.n	80495da <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80495d6:	2301      	movs	r3, #1
 80495d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80495da:	2300      	movs	r3, #0
 80495dc:	613b      	str	r3, [r7, #16]
 80495de:	e015      	b.n	804960c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80495e0:	693b      	ldr	r3, [r7, #16]
 80495e2:	015a      	lsls	r2, r3, #5
 80495e4:	68fb      	ldr	r3, [r7, #12]
 80495e6:	4413      	add	r3, r2
 80495e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80495ec:	461a      	mov	r2, r3
 80495ee:	f04f 33ff 	mov.w	r3, #4294967295
 80495f2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80495f4:	693b      	ldr	r3, [r7, #16]
 80495f6:	015a      	lsls	r2, r3, #5
 80495f8:	68fb      	ldr	r3, [r7, #12]
 80495fa:	4413      	add	r3, r2
 80495fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049600:	461a      	mov	r2, r3
 8049602:	2300      	movs	r3, #0
 8049604:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8049606:	693b      	ldr	r3, [r7, #16]
 8049608:	3301      	adds	r3, #1
 804960a:	613b      	str	r3, [r7, #16]
 804960c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804960e:	693a      	ldr	r2, [r7, #16]
 8049610:	429a      	cmp	r2, r3
 8049612:	d3e5      	bcc.n	80495e0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8049614:	687b      	ldr	r3, [r7, #4]
 8049616:	2200      	movs	r2, #0
 8049618:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 804961a:	687b      	ldr	r3, [r7, #4]
 804961c:	f04f 32ff 	mov.w	r2, #4294967295
 8049620:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8049622:	687b      	ldr	r3, [r7, #4]
 8049624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8049626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804962a:	2b00      	cmp	r3, #0
 804962c:	d00b      	beq.n	8049646 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 804962e:	687b      	ldr	r3, [r7, #4]
 8049630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8049634:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8049636:	687b      	ldr	r3, [r7, #4]
 8049638:	4a13      	ldr	r2, [pc, #76]	; (8049688 <USB_HostInit+0x16c>)
 804963a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 804963c:	687b      	ldr	r3, [r7, #4]
 804963e:	4a13      	ldr	r2, [pc, #76]	; (804968c <USB_HostInit+0x170>)
 8049640:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8049644:	e009      	b.n	804965a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8049646:	687b      	ldr	r3, [r7, #4]
 8049648:	2280      	movs	r2, #128	; 0x80
 804964a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 804964c:	687b      	ldr	r3, [r7, #4]
 804964e:	4a10      	ldr	r2, [pc, #64]	; (8049690 <USB_HostInit+0x174>)
 8049650:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8049652:	687b      	ldr	r3, [r7, #4]
 8049654:	4a0f      	ldr	r2, [pc, #60]	; (8049694 <USB_HostInit+0x178>)
 8049656:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 804965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804965c:	2b00      	cmp	r3, #0
 804965e:	d105      	bne.n	804966c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8049660:	687b      	ldr	r3, [r7, #4]
 8049662:	699b      	ldr	r3, [r3, #24]
 8049664:	f043 0210 	orr.w	r2, r3, #16
 8049668:	687b      	ldr	r3, [r7, #4]
 804966a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 804966c:	687b      	ldr	r3, [r7, #4]
 804966e:	699a      	ldr	r2, [r3, #24]
 8049670:	4b09      	ldr	r3, [pc, #36]	; (8049698 <USB_HostInit+0x17c>)
 8049672:	4313      	orrs	r3, r2
 8049674:	687a      	ldr	r2, [r7, #4]
 8049676:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8049678:	7dfb      	ldrb	r3, [r7, #23]
}
 804967a:	4618      	mov	r0, r3
 804967c:	3718      	adds	r7, #24
 804967e:	46bd      	mov	sp, r7
 8049680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8049684:	b004      	add	sp, #16
 8049686:	4770      	bx	lr
 8049688:	01000200 	.word	0x01000200
 804968c:	00e00300 	.word	0x00e00300
 8049690:	00600080 	.word	0x00600080
 8049694:	004000e0 	.word	0x004000e0
 8049698:	a3200008 	.word	0xa3200008

0804969c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 804969c:	b480      	push	{r7}
 804969e:	b085      	sub	sp, #20
 80496a0:	af00      	add	r7, sp, #0
 80496a2:	6078      	str	r0, [r7, #4]
 80496a4:	460b      	mov	r3, r1
 80496a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80496a8:	687b      	ldr	r3, [r7, #4]
 80496aa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80496ac:	68fb      	ldr	r3, [r7, #12]
 80496ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80496b2:	681b      	ldr	r3, [r3, #0]
 80496b4:	68fa      	ldr	r2, [r7, #12]
 80496b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80496ba:	f023 0303 	bic.w	r3, r3, #3
 80496be:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80496c0:	68fb      	ldr	r3, [r7, #12]
 80496c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80496c6:	681a      	ldr	r2, [r3, #0]
 80496c8:	78fb      	ldrb	r3, [r7, #3]
 80496ca:	f003 0303 	and.w	r3, r3, #3
 80496ce:	68f9      	ldr	r1, [r7, #12]
 80496d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80496d4:	4313      	orrs	r3, r2
 80496d6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80496d8:	78fb      	ldrb	r3, [r7, #3]
 80496da:	2b01      	cmp	r3, #1
 80496dc:	d107      	bne.n	80496ee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80496de:	68fb      	ldr	r3, [r7, #12]
 80496e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80496e4:	461a      	mov	r2, r3
 80496e6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80496ea:	6053      	str	r3, [r2, #4]
 80496ec:	e009      	b.n	8049702 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80496ee:	78fb      	ldrb	r3, [r7, #3]
 80496f0:	2b02      	cmp	r3, #2
 80496f2:	d106      	bne.n	8049702 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80496f4:	68fb      	ldr	r3, [r7, #12]
 80496f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80496fa:	461a      	mov	r2, r3
 80496fc:	f241 7370 	movw	r3, #6000	; 0x1770
 8049700:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8049702:	2300      	movs	r3, #0
}
 8049704:	4618      	mov	r0, r3
 8049706:	3714      	adds	r7, #20
 8049708:	46bd      	mov	sp, r7
 804970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804970e:	4770      	bx	lr

08049710 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8049710:	b580      	push	{r7, lr}
 8049712:	b084      	sub	sp, #16
 8049714:	af00      	add	r7, sp, #0
 8049716:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049718:	687b      	ldr	r3, [r7, #4]
 804971a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 804971c:	2300      	movs	r3, #0
 804971e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8049720:	68fb      	ldr	r3, [r7, #12]
 8049722:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8049726:	681b      	ldr	r3, [r3, #0]
 8049728:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 804972a:	68bb      	ldr	r3, [r7, #8]
 804972c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8049730:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8049732:	68bb      	ldr	r3, [r7, #8]
 8049734:	68fa      	ldr	r2, [r7, #12]
 8049736:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 804973a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804973e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8049740:	2064      	movs	r0, #100	; 0x64
 8049742:	f7f9 fb33 	bl	8042dac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8049746:	68bb      	ldr	r3, [r7, #8]
 8049748:	68fa      	ldr	r2, [r7, #12]
 804974a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 804974e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8049752:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8049754:	200a      	movs	r0, #10
 8049756:	f7f9 fb29 	bl	8042dac <HAL_Delay>

  return HAL_OK;
 804975a:	2300      	movs	r3, #0
}
 804975c:	4618      	mov	r0, r3
 804975e:	3710      	adds	r7, #16
 8049760:	46bd      	mov	sp, r7
 8049762:	bd80      	pop	{r7, pc}

08049764 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8049764:	b480      	push	{r7}
 8049766:	b085      	sub	sp, #20
 8049768:	af00      	add	r7, sp, #0
 804976a:	6078      	str	r0, [r7, #4]
 804976c:	460b      	mov	r3, r1
 804976e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049770:	687b      	ldr	r3, [r7, #4]
 8049772:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8049774:	2300      	movs	r3, #0
 8049776:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8049778:	68fb      	ldr	r3, [r7, #12]
 804977a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 804977e:	681b      	ldr	r3, [r3, #0]
 8049780:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8049782:	68bb      	ldr	r3, [r7, #8]
 8049784:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8049788:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 804978a:	68bb      	ldr	r3, [r7, #8]
 804978c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8049790:	2b00      	cmp	r3, #0
 8049792:	d109      	bne.n	80497a8 <USB_DriveVbus+0x44>
 8049794:	78fb      	ldrb	r3, [r7, #3]
 8049796:	2b01      	cmp	r3, #1
 8049798:	d106      	bne.n	80497a8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 804979a:	68bb      	ldr	r3, [r7, #8]
 804979c:	68fa      	ldr	r2, [r7, #12]
 804979e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80497a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80497a6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80497a8:	68bb      	ldr	r3, [r7, #8]
 80497aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80497ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80497b2:	d109      	bne.n	80497c8 <USB_DriveVbus+0x64>
 80497b4:	78fb      	ldrb	r3, [r7, #3]
 80497b6:	2b00      	cmp	r3, #0
 80497b8:	d106      	bne.n	80497c8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80497ba:	68bb      	ldr	r3, [r7, #8]
 80497bc:	68fa      	ldr	r2, [r7, #12]
 80497be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80497c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80497c6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80497c8:	2300      	movs	r3, #0
}
 80497ca:	4618      	mov	r0, r3
 80497cc:	3714      	adds	r7, #20
 80497ce:	46bd      	mov	sp, r7
 80497d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80497d4:	4770      	bx	lr

080497d6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80497d6:	b480      	push	{r7}
 80497d8:	b085      	sub	sp, #20
 80497da:	af00      	add	r7, sp, #0
 80497dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80497de:	687b      	ldr	r3, [r7, #4]
 80497e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80497e2:	2300      	movs	r3, #0
 80497e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80497e6:	68fb      	ldr	r3, [r7, #12]
 80497e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80497ec:	681b      	ldr	r3, [r3, #0]
 80497ee:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80497f0:	68bb      	ldr	r3, [r7, #8]
 80497f2:	0c5b      	lsrs	r3, r3, #17
 80497f4:	f003 0303 	and.w	r3, r3, #3
}
 80497f8:	4618      	mov	r0, r3
 80497fa:	3714      	adds	r7, #20
 80497fc:	46bd      	mov	sp, r7
 80497fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049802:	4770      	bx	lr

08049804 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8049804:	b480      	push	{r7}
 8049806:	b085      	sub	sp, #20
 8049808:	af00      	add	r7, sp, #0
 804980a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804980c:	687b      	ldr	r3, [r7, #4]
 804980e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8049810:	68fb      	ldr	r3, [r7, #12]
 8049812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049816:	689b      	ldr	r3, [r3, #8]
 8049818:	b29b      	uxth	r3, r3
}
 804981a:	4618      	mov	r0, r3
 804981c:	3714      	adds	r7, #20
 804981e:	46bd      	mov	sp, r7
 8049820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049824:	4770      	bx	lr
	...

08049828 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8049828:	b580      	push	{r7, lr}
 804982a:	b088      	sub	sp, #32
 804982c:	af00      	add	r7, sp, #0
 804982e:	6078      	str	r0, [r7, #4]
 8049830:	4608      	mov	r0, r1
 8049832:	4611      	mov	r1, r2
 8049834:	461a      	mov	r2, r3
 8049836:	4603      	mov	r3, r0
 8049838:	70fb      	strb	r3, [r7, #3]
 804983a:	460b      	mov	r3, r1
 804983c:	70bb      	strb	r3, [r7, #2]
 804983e:	4613      	mov	r3, r2
 8049840:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8049842:	2300      	movs	r3, #0
 8049844:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049846:	687b      	ldr	r3, [r7, #4]
 8049848:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 804984a:	78fb      	ldrb	r3, [r7, #3]
 804984c:	015a      	lsls	r2, r3, #5
 804984e:	693b      	ldr	r3, [r7, #16]
 8049850:	4413      	add	r3, r2
 8049852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049856:	461a      	mov	r2, r3
 8049858:	f04f 33ff 	mov.w	r3, #4294967295
 804985c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 804985e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8049862:	2b03      	cmp	r3, #3
 8049864:	d87e      	bhi.n	8049964 <USB_HC_Init+0x13c>
 8049866:	a201      	add	r2, pc, #4	; (adr r2, 804986c <USB_HC_Init+0x44>)
 8049868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804986c:	0804987d 	.word	0x0804987d
 8049870:	08049927 	.word	0x08049927
 8049874:	0804987d 	.word	0x0804987d
 8049878:	080498e9 	.word	0x080498e9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 804987c:	78fb      	ldrb	r3, [r7, #3]
 804987e:	015a      	lsls	r2, r3, #5
 8049880:	693b      	ldr	r3, [r7, #16]
 8049882:	4413      	add	r3, r2
 8049884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049888:	461a      	mov	r2, r3
 804988a:	f240 439d 	movw	r3, #1181	; 0x49d
 804988e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8049890:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8049894:	2b00      	cmp	r3, #0
 8049896:	da10      	bge.n	80498ba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8049898:	78fb      	ldrb	r3, [r7, #3]
 804989a:	015a      	lsls	r2, r3, #5
 804989c:	693b      	ldr	r3, [r7, #16]
 804989e:	4413      	add	r3, r2
 80498a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80498a4:	68db      	ldr	r3, [r3, #12]
 80498a6:	78fa      	ldrb	r2, [r7, #3]
 80498a8:	0151      	lsls	r1, r2, #5
 80498aa:	693a      	ldr	r2, [r7, #16]
 80498ac:	440a      	add	r2, r1
 80498ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80498b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80498b6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80498b8:	e057      	b.n	804996a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80498ba:	687b      	ldr	r3, [r7, #4]
 80498bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80498be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80498c2:	2b00      	cmp	r3, #0
 80498c4:	d051      	beq.n	804996a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80498c6:	78fb      	ldrb	r3, [r7, #3]
 80498c8:	015a      	lsls	r2, r3, #5
 80498ca:	693b      	ldr	r3, [r7, #16]
 80498cc:	4413      	add	r3, r2
 80498ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80498d2:	68db      	ldr	r3, [r3, #12]
 80498d4:	78fa      	ldrb	r2, [r7, #3]
 80498d6:	0151      	lsls	r1, r2, #5
 80498d8:	693a      	ldr	r2, [r7, #16]
 80498da:	440a      	add	r2, r1
 80498dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80498e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80498e4:	60d3      	str	r3, [r2, #12]
      break;
 80498e6:	e040      	b.n	804996a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80498e8:	78fb      	ldrb	r3, [r7, #3]
 80498ea:	015a      	lsls	r2, r3, #5
 80498ec:	693b      	ldr	r3, [r7, #16]
 80498ee:	4413      	add	r3, r2
 80498f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80498f4:	461a      	mov	r2, r3
 80498f6:	f240 639d 	movw	r3, #1693	; 0x69d
 80498fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80498fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8049900:	2b00      	cmp	r3, #0
 8049902:	da34      	bge.n	804996e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8049904:	78fb      	ldrb	r3, [r7, #3]
 8049906:	015a      	lsls	r2, r3, #5
 8049908:	693b      	ldr	r3, [r7, #16]
 804990a:	4413      	add	r3, r2
 804990c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049910:	68db      	ldr	r3, [r3, #12]
 8049912:	78fa      	ldrb	r2, [r7, #3]
 8049914:	0151      	lsls	r1, r2, #5
 8049916:	693a      	ldr	r2, [r7, #16]
 8049918:	440a      	add	r2, r1
 804991a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804991e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8049922:	60d3      	str	r3, [r2, #12]
      }

      break;
 8049924:	e023      	b.n	804996e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8049926:	78fb      	ldrb	r3, [r7, #3]
 8049928:	015a      	lsls	r2, r3, #5
 804992a:	693b      	ldr	r3, [r7, #16]
 804992c:	4413      	add	r3, r2
 804992e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049932:	461a      	mov	r2, r3
 8049934:	f240 2325 	movw	r3, #549	; 0x225
 8049938:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 804993a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804993e:	2b00      	cmp	r3, #0
 8049940:	da17      	bge.n	8049972 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8049942:	78fb      	ldrb	r3, [r7, #3]
 8049944:	015a      	lsls	r2, r3, #5
 8049946:	693b      	ldr	r3, [r7, #16]
 8049948:	4413      	add	r3, r2
 804994a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804994e:	68db      	ldr	r3, [r3, #12]
 8049950:	78fa      	ldrb	r2, [r7, #3]
 8049952:	0151      	lsls	r1, r2, #5
 8049954:	693a      	ldr	r2, [r7, #16]
 8049956:	440a      	add	r2, r1
 8049958:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804995c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8049960:	60d3      	str	r3, [r2, #12]
      }
      break;
 8049962:	e006      	b.n	8049972 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8049964:	2301      	movs	r3, #1
 8049966:	77fb      	strb	r3, [r7, #31]
      break;
 8049968:	e004      	b.n	8049974 <USB_HC_Init+0x14c>
      break;
 804996a:	bf00      	nop
 804996c:	e002      	b.n	8049974 <USB_HC_Init+0x14c>
      break;
 804996e:	bf00      	nop
 8049970:	e000      	b.n	8049974 <USB_HC_Init+0x14c>
      break;
 8049972:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8049974:	78fb      	ldrb	r3, [r7, #3]
 8049976:	015a      	lsls	r2, r3, #5
 8049978:	693b      	ldr	r3, [r7, #16]
 804997a:	4413      	add	r3, r2
 804997c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049980:	68db      	ldr	r3, [r3, #12]
 8049982:	78fa      	ldrb	r2, [r7, #3]
 8049984:	0151      	lsls	r1, r2, #5
 8049986:	693a      	ldr	r2, [r7, #16]
 8049988:	440a      	add	r2, r1
 804998a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804998e:	f043 0302 	orr.w	r3, r3, #2
 8049992:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8049994:	693b      	ldr	r3, [r7, #16]
 8049996:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804999a:	699a      	ldr	r2, [r3, #24]
 804999c:	78fb      	ldrb	r3, [r7, #3]
 804999e:	f003 030f 	and.w	r3, r3, #15
 80499a2:	2101      	movs	r1, #1
 80499a4:	fa01 f303 	lsl.w	r3, r1, r3
 80499a8:	6939      	ldr	r1, [r7, #16]
 80499aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80499ae:	4313      	orrs	r3, r2
 80499b0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80499b2:	687b      	ldr	r3, [r7, #4]
 80499b4:	699b      	ldr	r3, [r3, #24]
 80499b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80499ba:	687b      	ldr	r3, [r7, #4]
 80499bc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80499be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80499c2:	2b00      	cmp	r3, #0
 80499c4:	da03      	bge.n	80499ce <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80499c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80499ca:	61bb      	str	r3, [r7, #24]
 80499cc:	e001      	b.n	80499d2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80499ce:	2300      	movs	r3, #0
 80499d0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80499d2:	6878      	ldr	r0, [r7, #4]
 80499d4:	f7ff feff 	bl	80497d6 <USB_GetHostSpeed>
 80499d8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80499da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80499de:	2b02      	cmp	r3, #2
 80499e0:	d106      	bne.n	80499f0 <USB_HC_Init+0x1c8>
 80499e2:	68fb      	ldr	r3, [r7, #12]
 80499e4:	2b02      	cmp	r3, #2
 80499e6:	d003      	beq.n	80499f0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80499e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80499ec:	617b      	str	r3, [r7, #20]
 80499ee:	e001      	b.n	80499f4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80499f0:	2300      	movs	r3, #0
 80499f2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80499f4:	787b      	ldrb	r3, [r7, #1]
 80499f6:	059b      	lsls	r3, r3, #22
 80499f8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80499fc:	78bb      	ldrb	r3, [r7, #2]
 80499fe:	02db      	lsls	r3, r3, #11
 8049a00:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8049a04:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8049a06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8049a0a:	049b      	lsls	r3, r3, #18
 8049a0c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8049a10:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8049a12:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8049a14:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8049a18:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8049a1a:	69bb      	ldr	r3, [r7, #24]
 8049a1c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8049a1e:	78fb      	ldrb	r3, [r7, #3]
 8049a20:	0159      	lsls	r1, r3, #5
 8049a22:	693b      	ldr	r3, [r7, #16]
 8049a24:	440b      	add	r3, r1
 8049a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049a2a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8049a2c:	697b      	ldr	r3, [r7, #20]
 8049a2e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8049a30:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8049a32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8049a36:	2b03      	cmp	r3, #3
 8049a38:	d003      	beq.n	8049a42 <USB_HC_Init+0x21a>
 8049a3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8049a3e:	2b01      	cmp	r3, #1
 8049a40:	d10f      	bne.n	8049a62 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8049a42:	78fb      	ldrb	r3, [r7, #3]
 8049a44:	015a      	lsls	r2, r3, #5
 8049a46:	693b      	ldr	r3, [r7, #16]
 8049a48:	4413      	add	r3, r2
 8049a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049a4e:	681b      	ldr	r3, [r3, #0]
 8049a50:	78fa      	ldrb	r2, [r7, #3]
 8049a52:	0151      	lsls	r1, r2, #5
 8049a54:	693a      	ldr	r2, [r7, #16]
 8049a56:	440a      	add	r2, r1
 8049a58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049a5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8049a60:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8049a62:	7ffb      	ldrb	r3, [r7, #31]
}
 8049a64:	4618      	mov	r0, r3
 8049a66:	3720      	adds	r7, #32
 8049a68:	46bd      	mov	sp, r7
 8049a6a:	bd80      	pop	{r7, pc}

08049a6c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8049a6c:	b580      	push	{r7, lr}
 8049a6e:	b08c      	sub	sp, #48	; 0x30
 8049a70:	af02      	add	r7, sp, #8
 8049a72:	60f8      	str	r0, [r7, #12]
 8049a74:	60b9      	str	r1, [r7, #8]
 8049a76:	4613      	mov	r3, r2
 8049a78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049a7a:	68fb      	ldr	r3, [r7, #12]
 8049a7c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8049a7e:	68bb      	ldr	r3, [r7, #8]
 8049a80:	785b      	ldrb	r3, [r3, #1]
 8049a82:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8049a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8049a88:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8049a8a:	68fb      	ldr	r3, [r7, #12]
 8049a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8049a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8049a92:	2b00      	cmp	r3, #0
 8049a94:	d02d      	beq.n	8049af2 <USB_HC_StartXfer+0x86>
 8049a96:	68bb      	ldr	r3, [r7, #8]
 8049a98:	791b      	ldrb	r3, [r3, #4]
 8049a9a:	2b00      	cmp	r3, #0
 8049a9c:	d129      	bne.n	8049af2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8049a9e:	79fb      	ldrb	r3, [r7, #7]
 8049aa0:	2b01      	cmp	r3, #1
 8049aa2:	d117      	bne.n	8049ad4 <USB_HC_StartXfer+0x68>
 8049aa4:	68bb      	ldr	r3, [r7, #8]
 8049aa6:	79db      	ldrb	r3, [r3, #7]
 8049aa8:	2b00      	cmp	r3, #0
 8049aaa:	d003      	beq.n	8049ab4 <USB_HC_StartXfer+0x48>
 8049aac:	68bb      	ldr	r3, [r7, #8]
 8049aae:	79db      	ldrb	r3, [r3, #7]
 8049ab0:	2b02      	cmp	r3, #2
 8049ab2:	d10f      	bne.n	8049ad4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8049ab4:	69fb      	ldr	r3, [r7, #28]
 8049ab6:	015a      	lsls	r2, r3, #5
 8049ab8:	6a3b      	ldr	r3, [r7, #32]
 8049aba:	4413      	add	r3, r2
 8049abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049ac0:	68db      	ldr	r3, [r3, #12]
 8049ac2:	69fa      	ldr	r2, [r7, #28]
 8049ac4:	0151      	lsls	r1, r2, #5
 8049ac6:	6a3a      	ldr	r2, [r7, #32]
 8049ac8:	440a      	add	r2, r1
 8049aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8049ad2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8049ad4:	79fb      	ldrb	r3, [r7, #7]
 8049ad6:	2b00      	cmp	r3, #0
 8049ad8:	d10b      	bne.n	8049af2 <USB_HC_StartXfer+0x86>
 8049ada:	68bb      	ldr	r3, [r7, #8]
 8049adc:	795b      	ldrb	r3, [r3, #5]
 8049ade:	2b01      	cmp	r3, #1
 8049ae0:	d107      	bne.n	8049af2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8049ae2:	68bb      	ldr	r3, [r7, #8]
 8049ae4:	785b      	ldrb	r3, [r3, #1]
 8049ae6:	4619      	mov	r1, r3
 8049ae8:	68f8      	ldr	r0, [r7, #12]
 8049aea:	f000 fa0f 	bl	8049f0c <USB_DoPing>
      return HAL_OK;
 8049aee:	2300      	movs	r3, #0
 8049af0:	e0f8      	b.n	8049ce4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8049af2:	68bb      	ldr	r3, [r7, #8]
 8049af4:	695b      	ldr	r3, [r3, #20]
 8049af6:	2b00      	cmp	r3, #0
 8049af8:	d018      	beq.n	8049b2c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8049afa:	68bb      	ldr	r3, [r7, #8]
 8049afc:	695b      	ldr	r3, [r3, #20]
 8049afe:	68ba      	ldr	r2, [r7, #8]
 8049b00:	8912      	ldrh	r2, [r2, #8]
 8049b02:	4413      	add	r3, r2
 8049b04:	3b01      	subs	r3, #1
 8049b06:	68ba      	ldr	r2, [r7, #8]
 8049b08:	8912      	ldrh	r2, [r2, #8]
 8049b0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8049b0e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8049b10:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8049b12:	8b7b      	ldrh	r3, [r7, #26]
 8049b14:	429a      	cmp	r2, r3
 8049b16:	d90b      	bls.n	8049b30 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8049b18:	8b7b      	ldrh	r3, [r7, #26]
 8049b1a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8049b1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8049b1e:	68ba      	ldr	r2, [r7, #8]
 8049b20:	8912      	ldrh	r2, [r2, #8]
 8049b22:	fb03 f202 	mul.w	r2, r3, r2
 8049b26:	68bb      	ldr	r3, [r7, #8]
 8049b28:	611a      	str	r2, [r3, #16]
 8049b2a:	e001      	b.n	8049b30 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8049b2c:	2301      	movs	r3, #1
 8049b2e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8049b30:	68bb      	ldr	r3, [r7, #8]
 8049b32:	78db      	ldrb	r3, [r3, #3]
 8049b34:	2b00      	cmp	r3, #0
 8049b36:	d007      	beq.n	8049b48 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8049b38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8049b3a:	68ba      	ldr	r2, [r7, #8]
 8049b3c:	8912      	ldrh	r2, [r2, #8]
 8049b3e:	fb03 f202 	mul.w	r2, r3, r2
 8049b42:	68bb      	ldr	r3, [r7, #8]
 8049b44:	611a      	str	r2, [r3, #16]
 8049b46:	e003      	b.n	8049b50 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8049b48:	68bb      	ldr	r3, [r7, #8]
 8049b4a:	695a      	ldr	r2, [r3, #20]
 8049b4c:	68bb      	ldr	r3, [r7, #8]
 8049b4e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8049b50:	68bb      	ldr	r3, [r7, #8]
 8049b52:	691b      	ldr	r3, [r3, #16]
 8049b54:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8049b58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8049b5a:	04d9      	lsls	r1, r3, #19
 8049b5c:	4b63      	ldr	r3, [pc, #396]	; (8049cec <USB_HC_StartXfer+0x280>)
 8049b5e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8049b60:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8049b62:	68bb      	ldr	r3, [r7, #8]
 8049b64:	7a9b      	ldrb	r3, [r3, #10]
 8049b66:	075b      	lsls	r3, r3, #29
 8049b68:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8049b6c:	69f9      	ldr	r1, [r7, #28]
 8049b6e:	0148      	lsls	r0, r1, #5
 8049b70:	6a39      	ldr	r1, [r7, #32]
 8049b72:	4401      	add	r1, r0
 8049b74:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8049b78:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8049b7a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8049b7c:	79fb      	ldrb	r3, [r7, #7]
 8049b7e:	2b00      	cmp	r3, #0
 8049b80:	d009      	beq.n	8049b96 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8049b82:	68bb      	ldr	r3, [r7, #8]
 8049b84:	68d9      	ldr	r1, [r3, #12]
 8049b86:	69fb      	ldr	r3, [r7, #28]
 8049b88:	015a      	lsls	r2, r3, #5
 8049b8a:	6a3b      	ldr	r3, [r7, #32]
 8049b8c:	4413      	add	r3, r2
 8049b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049b92:	460a      	mov	r2, r1
 8049b94:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8049b96:	6a3b      	ldr	r3, [r7, #32]
 8049b98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049b9c:	689b      	ldr	r3, [r3, #8]
 8049b9e:	f003 0301 	and.w	r3, r3, #1
 8049ba2:	2b00      	cmp	r3, #0
 8049ba4:	bf0c      	ite	eq
 8049ba6:	2301      	moveq	r3, #1
 8049ba8:	2300      	movne	r3, #0
 8049baa:	b2db      	uxtb	r3, r3
 8049bac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8049bae:	69fb      	ldr	r3, [r7, #28]
 8049bb0:	015a      	lsls	r2, r3, #5
 8049bb2:	6a3b      	ldr	r3, [r7, #32]
 8049bb4:	4413      	add	r3, r2
 8049bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049bba:	681b      	ldr	r3, [r3, #0]
 8049bbc:	69fa      	ldr	r2, [r7, #28]
 8049bbe:	0151      	lsls	r1, r2, #5
 8049bc0:	6a3a      	ldr	r2, [r7, #32]
 8049bc2:	440a      	add	r2, r1
 8049bc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049bc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8049bcc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8049bce:	69fb      	ldr	r3, [r7, #28]
 8049bd0:	015a      	lsls	r2, r3, #5
 8049bd2:	6a3b      	ldr	r3, [r7, #32]
 8049bd4:	4413      	add	r3, r2
 8049bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049bda:	681a      	ldr	r2, [r3, #0]
 8049bdc:	7e7b      	ldrb	r3, [r7, #25]
 8049bde:	075b      	lsls	r3, r3, #29
 8049be0:	69f9      	ldr	r1, [r7, #28]
 8049be2:	0148      	lsls	r0, r1, #5
 8049be4:	6a39      	ldr	r1, [r7, #32]
 8049be6:	4401      	add	r1, r0
 8049be8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8049bec:	4313      	orrs	r3, r2
 8049bee:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8049bf0:	69fb      	ldr	r3, [r7, #28]
 8049bf2:	015a      	lsls	r2, r3, #5
 8049bf4:	6a3b      	ldr	r3, [r7, #32]
 8049bf6:	4413      	add	r3, r2
 8049bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049bfc:	681b      	ldr	r3, [r3, #0]
 8049bfe:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8049c00:	693b      	ldr	r3, [r7, #16]
 8049c02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8049c06:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8049c08:	68bb      	ldr	r3, [r7, #8]
 8049c0a:	78db      	ldrb	r3, [r3, #3]
 8049c0c:	2b00      	cmp	r3, #0
 8049c0e:	d004      	beq.n	8049c1a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8049c10:	693b      	ldr	r3, [r7, #16]
 8049c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8049c16:	613b      	str	r3, [r7, #16]
 8049c18:	e003      	b.n	8049c22 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8049c1a:	693b      	ldr	r3, [r7, #16]
 8049c1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8049c20:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8049c22:	693b      	ldr	r3, [r7, #16]
 8049c24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049c28:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8049c2a:	69fb      	ldr	r3, [r7, #28]
 8049c2c:	015a      	lsls	r2, r3, #5
 8049c2e:	6a3b      	ldr	r3, [r7, #32]
 8049c30:	4413      	add	r3, r2
 8049c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049c36:	461a      	mov	r2, r3
 8049c38:	693b      	ldr	r3, [r7, #16]
 8049c3a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8049c3c:	79fb      	ldrb	r3, [r7, #7]
 8049c3e:	2b00      	cmp	r3, #0
 8049c40:	d001      	beq.n	8049c46 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8049c42:	2300      	movs	r3, #0
 8049c44:	e04e      	b.n	8049ce4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8049c46:	68bb      	ldr	r3, [r7, #8]
 8049c48:	78db      	ldrb	r3, [r3, #3]
 8049c4a:	2b00      	cmp	r3, #0
 8049c4c:	d149      	bne.n	8049ce2 <USB_HC_StartXfer+0x276>
 8049c4e:	68bb      	ldr	r3, [r7, #8]
 8049c50:	695b      	ldr	r3, [r3, #20]
 8049c52:	2b00      	cmp	r3, #0
 8049c54:	d045      	beq.n	8049ce2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8049c56:	68bb      	ldr	r3, [r7, #8]
 8049c58:	79db      	ldrb	r3, [r3, #7]
 8049c5a:	2b03      	cmp	r3, #3
 8049c5c:	d830      	bhi.n	8049cc0 <USB_HC_StartXfer+0x254>
 8049c5e:	a201      	add	r2, pc, #4	; (adr r2, 8049c64 <USB_HC_StartXfer+0x1f8>)
 8049c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049c64:	08049c75 	.word	0x08049c75
 8049c68:	08049c99 	.word	0x08049c99
 8049c6c:	08049c75 	.word	0x08049c75
 8049c70:	08049c99 	.word	0x08049c99
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8049c74:	68bb      	ldr	r3, [r7, #8]
 8049c76:	695b      	ldr	r3, [r3, #20]
 8049c78:	3303      	adds	r3, #3
 8049c7a:	089b      	lsrs	r3, r3, #2
 8049c7c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8049c7e:	8afa      	ldrh	r2, [r7, #22]
 8049c80:	68fb      	ldr	r3, [r7, #12]
 8049c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049c84:	b29b      	uxth	r3, r3
 8049c86:	429a      	cmp	r2, r3
 8049c88:	d91c      	bls.n	8049cc4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8049c8a:	68fb      	ldr	r3, [r7, #12]
 8049c8c:	699b      	ldr	r3, [r3, #24]
 8049c8e:	f043 0220 	orr.w	r2, r3, #32
 8049c92:	68fb      	ldr	r3, [r7, #12]
 8049c94:	619a      	str	r2, [r3, #24]
        }
        break;
 8049c96:	e015      	b.n	8049cc4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8049c98:	68bb      	ldr	r3, [r7, #8]
 8049c9a:	695b      	ldr	r3, [r3, #20]
 8049c9c:	3303      	adds	r3, #3
 8049c9e:	089b      	lsrs	r3, r3, #2
 8049ca0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8049ca2:	8afa      	ldrh	r2, [r7, #22]
 8049ca4:	6a3b      	ldr	r3, [r7, #32]
 8049ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049caa:	691b      	ldr	r3, [r3, #16]
 8049cac:	b29b      	uxth	r3, r3
 8049cae:	429a      	cmp	r2, r3
 8049cb0:	d90a      	bls.n	8049cc8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8049cb2:	68fb      	ldr	r3, [r7, #12]
 8049cb4:	699b      	ldr	r3, [r3, #24]
 8049cb6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8049cba:	68fb      	ldr	r3, [r7, #12]
 8049cbc:	619a      	str	r2, [r3, #24]
        }
        break;
 8049cbe:	e003      	b.n	8049cc8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8049cc0:	bf00      	nop
 8049cc2:	e002      	b.n	8049cca <USB_HC_StartXfer+0x25e>
        break;
 8049cc4:	bf00      	nop
 8049cc6:	e000      	b.n	8049cca <USB_HC_StartXfer+0x25e>
        break;
 8049cc8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8049cca:	68bb      	ldr	r3, [r7, #8]
 8049ccc:	68d9      	ldr	r1, [r3, #12]
 8049cce:	68bb      	ldr	r3, [r7, #8]
 8049cd0:	785a      	ldrb	r2, [r3, #1]
 8049cd2:	68bb      	ldr	r3, [r7, #8]
 8049cd4:	695b      	ldr	r3, [r3, #20]
 8049cd6:	b29b      	uxth	r3, r3
 8049cd8:	2000      	movs	r0, #0
 8049cda:	9000      	str	r0, [sp, #0]
 8049cdc:	68f8      	ldr	r0, [r7, #12]
 8049cde:	f7ff fb31 	bl	8049344 <USB_WritePacket>
  }

  return HAL_OK;
 8049ce2:	2300      	movs	r3, #0
}
 8049ce4:	4618      	mov	r0, r3
 8049ce6:	3728      	adds	r7, #40	; 0x28
 8049ce8:	46bd      	mov	sp, r7
 8049cea:	bd80      	pop	{r7, pc}
 8049cec:	1ff80000 	.word	0x1ff80000

08049cf0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8049cf0:	b480      	push	{r7}
 8049cf2:	b085      	sub	sp, #20
 8049cf4:	af00      	add	r7, sp, #0
 8049cf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049cf8:	687b      	ldr	r3, [r7, #4]
 8049cfa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8049cfc:	68fb      	ldr	r3, [r7, #12]
 8049cfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049d02:	695b      	ldr	r3, [r3, #20]
 8049d04:	b29b      	uxth	r3, r3
}
 8049d06:	4618      	mov	r0, r3
 8049d08:	3714      	adds	r7, #20
 8049d0a:	46bd      	mov	sp, r7
 8049d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049d10:	4770      	bx	lr

08049d12 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8049d12:	b480      	push	{r7}
 8049d14:	b089      	sub	sp, #36	; 0x24
 8049d16:	af00      	add	r7, sp, #0
 8049d18:	6078      	str	r0, [r7, #4]
 8049d1a:	460b      	mov	r3, r1
 8049d1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049d1e:	687b      	ldr	r3, [r7, #4]
 8049d20:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8049d22:	78fb      	ldrb	r3, [r7, #3]
 8049d24:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8049d26:	2300      	movs	r3, #0
 8049d28:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8049d2a:	69bb      	ldr	r3, [r7, #24]
 8049d2c:	015a      	lsls	r2, r3, #5
 8049d2e:	69fb      	ldr	r3, [r7, #28]
 8049d30:	4413      	add	r3, r2
 8049d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049d36:	681b      	ldr	r3, [r3, #0]
 8049d38:	0c9b      	lsrs	r3, r3, #18
 8049d3a:	f003 0303 	and.w	r3, r3, #3
 8049d3e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8049d40:	69bb      	ldr	r3, [r7, #24]
 8049d42:	015a      	lsls	r2, r3, #5
 8049d44:	69fb      	ldr	r3, [r7, #28]
 8049d46:	4413      	add	r3, r2
 8049d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049d4c:	681b      	ldr	r3, [r3, #0]
 8049d4e:	0fdb      	lsrs	r3, r3, #31
 8049d50:	f003 0301 	and.w	r3, r3, #1
 8049d54:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8049d56:	687b      	ldr	r3, [r7, #4]
 8049d58:	689b      	ldr	r3, [r3, #8]
 8049d5a:	f003 0320 	and.w	r3, r3, #32
 8049d5e:	2b20      	cmp	r3, #32
 8049d60:	d104      	bne.n	8049d6c <USB_HC_Halt+0x5a>
 8049d62:	693b      	ldr	r3, [r7, #16]
 8049d64:	2b00      	cmp	r3, #0
 8049d66:	d101      	bne.n	8049d6c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8049d68:	2300      	movs	r3, #0
 8049d6a:	e0c8      	b.n	8049efe <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8049d6c:	697b      	ldr	r3, [r7, #20]
 8049d6e:	2b00      	cmp	r3, #0
 8049d70:	d002      	beq.n	8049d78 <USB_HC_Halt+0x66>
 8049d72:	697b      	ldr	r3, [r7, #20]
 8049d74:	2b02      	cmp	r3, #2
 8049d76:	d163      	bne.n	8049e40 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8049d78:	69bb      	ldr	r3, [r7, #24]
 8049d7a:	015a      	lsls	r2, r3, #5
 8049d7c:	69fb      	ldr	r3, [r7, #28]
 8049d7e:	4413      	add	r3, r2
 8049d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049d84:	681b      	ldr	r3, [r3, #0]
 8049d86:	69ba      	ldr	r2, [r7, #24]
 8049d88:	0151      	lsls	r1, r2, #5
 8049d8a:	69fa      	ldr	r2, [r7, #28]
 8049d8c:	440a      	add	r2, r1
 8049d8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049d92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8049d96:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8049d98:	687b      	ldr	r3, [r7, #4]
 8049d9a:	689b      	ldr	r3, [r3, #8]
 8049d9c:	f003 0320 	and.w	r3, r3, #32
 8049da0:	2b00      	cmp	r3, #0
 8049da2:	f040 80ab 	bne.w	8049efc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8049da6:	687b      	ldr	r3, [r7, #4]
 8049da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049daa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8049dae:	2b00      	cmp	r3, #0
 8049db0:	d133      	bne.n	8049e1a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8049db2:	69bb      	ldr	r3, [r7, #24]
 8049db4:	015a      	lsls	r2, r3, #5
 8049db6:	69fb      	ldr	r3, [r7, #28]
 8049db8:	4413      	add	r3, r2
 8049dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049dbe:	681b      	ldr	r3, [r3, #0]
 8049dc0:	69ba      	ldr	r2, [r7, #24]
 8049dc2:	0151      	lsls	r1, r2, #5
 8049dc4:	69fa      	ldr	r2, [r7, #28]
 8049dc6:	440a      	add	r2, r1
 8049dc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8049dd0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8049dd2:	69bb      	ldr	r3, [r7, #24]
 8049dd4:	015a      	lsls	r2, r3, #5
 8049dd6:	69fb      	ldr	r3, [r7, #28]
 8049dd8:	4413      	add	r3, r2
 8049dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049dde:	681b      	ldr	r3, [r3, #0]
 8049de0:	69ba      	ldr	r2, [r7, #24]
 8049de2:	0151      	lsls	r1, r2, #5
 8049de4:	69fa      	ldr	r2, [r7, #28]
 8049de6:	440a      	add	r2, r1
 8049de8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049dec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049df0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8049df2:	68fb      	ldr	r3, [r7, #12]
 8049df4:	3301      	adds	r3, #1
 8049df6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8049df8:	68fb      	ldr	r3, [r7, #12]
 8049dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8049dfe:	d81d      	bhi.n	8049e3c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8049e00:	69bb      	ldr	r3, [r7, #24]
 8049e02:	015a      	lsls	r2, r3, #5
 8049e04:	69fb      	ldr	r3, [r7, #28]
 8049e06:	4413      	add	r3, r2
 8049e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049e0c:	681b      	ldr	r3, [r3, #0]
 8049e0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8049e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8049e16:	d0ec      	beq.n	8049df2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8049e18:	e070      	b.n	8049efc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8049e1a:	69bb      	ldr	r3, [r7, #24]
 8049e1c:	015a      	lsls	r2, r3, #5
 8049e1e:	69fb      	ldr	r3, [r7, #28]
 8049e20:	4413      	add	r3, r2
 8049e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049e26:	681b      	ldr	r3, [r3, #0]
 8049e28:	69ba      	ldr	r2, [r7, #24]
 8049e2a:	0151      	lsls	r1, r2, #5
 8049e2c:	69fa      	ldr	r2, [r7, #28]
 8049e2e:	440a      	add	r2, r1
 8049e30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049e34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049e38:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8049e3a:	e05f      	b.n	8049efc <USB_HC_Halt+0x1ea>
            break;
 8049e3c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8049e3e:	e05d      	b.n	8049efc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8049e40:	69bb      	ldr	r3, [r7, #24]
 8049e42:	015a      	lsls	r2, r3, #5
 8049e44:	69fb      	ldr	r3, [r7, #28]
 8049e46:	4413      	add	r3, r2
 8049e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049e4c:	681b      	ldr	r3, [r3, #0]
 8049e4e:	69ba      	ldr	r2, [r7, #24]
 8049e50:	0151      	lsls	r1, r2, #5
 8049e52:	69fa      	ldr	r2, [r7, #28]
 8049e54:	440a      	add	r2, r1
 8049e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049e5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8049e5e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8049e60:	69fb      	ldr	r3, [r7, #28]
 8049e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049e66:	691b      	ldr	r3, [r3, #16]
 8049e68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8049e6c:	2b00      	cmp	r3, #0
 8049e6e:	d133      	bne.n	8049ed8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8049e70:	69bb      	ldr	r3, [r7, #24]
 8049e72:	015a      	lsls	r2, r3, #5
 8049e74:	69fb      	ldr	r3, [r7, #28]
 8049e76:	4413      	add	r3, r2
 8049e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049e7c:	681b      	ldr	r3, [r3, #0]
 8049e7e:	69ba      	ldr	r2, [r7, #24]
 8049e80:	0151      	lsls	r1, r2, #5
 8049e82:	69fa      	ldr	r2, [r7, #28]
 8049e84:	440a      	add	r2, r1
 8049e86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049e8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8049e8e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8049e90:	69bb      	ldr	r3, [r7, #24]
 8049e92:	015a      	lsls	r2, r3, #5
 8049e94:	69fb      	ldr	r3, [r7, #28]
 8049e96:	4413      	add	r3, r2
 8049e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049e9c:	681b      	ldr	r3, [r3, #0]
 8049e9e:	69ba      	ldr	r2, [r7, #24]
 8049ea0:	0151      	lsls	r1, r2, #5
 8049ea2:	69fa      	ldr	r2, [r7, #28]
 8049ea4:	440a      	add	r2, r1
 8049ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049eaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049eae:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8049eb0:	68fb      	ldr	r3, [r7, #12]
 8049eb2:	3301      	adds	r3, #1
 8049eb4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8049eb6:	68fb      	ldr	r3, [r7, #12]
 8049eb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8049ebc:	d81d      	bhi.n	8049efa <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8049ebe:	69bb      	ldr	r3, [r7, #24]
 8049ec0:	015a      	lsls	r2, r3, #5
 8049ec2:	69fb      	ldr	r3, [r7, #28]
 8049ec4:	4413      	add	r3, r2
 8049ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049eca:	681b      	ldr	r3, [r3, #0]
 8049ecc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8049ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8049ed4:	d0ec      	beq.n	8049eb0 <USB_HC_Halt+0x19e>
 8049ed6:	e011      	b.n	8049efc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8049ed8:	69bb      	ldr	r3, [r7, #24]
 8049eda:	015a      	lsls	r2, r3, #5
 8049edc:	69fb      	ldr	r3, [r7, #28]
 8049ede:	4413      	add	r3, r2
 8049ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049ee4:	681b      	ldr	r3, [r3, #0]
 8049ee6:	69ba      	ldr	r2, [r7, #24]
 8049ee8:	0151      	lsls	r1, r2, #5
 8049eea:	69fa      	ldr	r2, [r7, #28]
 8049eec:	440a      	add	r2, r1
 8049eee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049ef2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049ef6:	6013      	str	r3, [r2, #0]
 8049ef8:	e000      	b.n	8049efc <USB_HC_Halt+0x1ea>
          break;
 8049efa:	bf00      	nop
    }
  }

  return HAL_OK;
 8049efc:	2300      	movs	r3, #0
}
 8049efe:	4618      	mov	r0, r3
 8049f00:	3724      	adds	r7, #36	; 0x24
 8049f02:	46bd      	mov	sp, r7
 8049f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049f08:	4770      	bx	lr
	...

08049f0c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8049f0c:	b480      	push	{r7}
 8049f0e:	b087      	sub	sp, #28
 8049f10:	af00      	add	r7, sp, #0
 8049f12:	6078      	str	r0, [r7, #4]
 8049f14:	460b      	mov	r3, r1
 8049f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049f18:	687b      	ldr	r3, [r7, #4]
 8049f1a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8049f1c:	78fb      	ldrb	r3, [r7, #3]
 8049f1e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8049f20:	2301      	movs	r3, #1
 8049f22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8049f24:	68fb      	ldr	r3, [r7, #12]
 8049f26:	04da      	lsls	r2, r3, #19
 8049f28:	4b15      	ldr	r3, [pc, #84]	; (8049f80 <USB_DoPing+0x74>)
 8049f2a:	4013      	ands	r3, r2
 8049f2c:	693a      	ldr	r2, [r7, #16]
 8049f2e:	0151      	lsls	r1, r2, #5
 8049f30:	697a      	ldr	r2, [r7, #20]
 8049f32:	440a      	add	r2, r1
 8049f34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049f38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049f3c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8049f3e:	693b      	ldr	r3, [r7, #16]
 8049f40:	015a      	lsls	r2, r3, #5
 8049f42:	697b      	ldr	r3, [r7, #20]
 8049f44:	4413      	add	r3, r2
 8049f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049f4a:	681b      	ldr	r3, [r3, #0]
 8049f4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8049f4e:	68bb      	ldr	r3, [r7, #8]
 8049f50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8049f54:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8049f56:	68bb      	ldr	r3, [r7, #8]
 8049f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049f5c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8049f5e:	693b      	ldr	r3, [r7, #16]
 8049f60:	015a      	lsls	r2, r3, #5
 8049f62:	697b      	ldr	r3, [r7, #20]
 8049f64:	4413      	add	r3, r2
 8049f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049f6a:	461a      	mov	r2, r3
 8049f6c:	68bb      	ldr	r3, [r7, #8]
 8049f6e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8049f70:	2300      	movs	r3, #0
}
 8049f72:	4618      	mov	r0, r3
 8049f74:	371c      	adds	r7, #28
 8049f76:	46bd      	mov	sp, r7
 8049f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049f7c:	4770      	bx	lr
 8049f7e:	bf00      	nop
 8049f80:	1ff80000 	.word	0x1ff80000

08049f84 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8049f84:	b580      	push	{r7, lr}
 8049f86:	b088      	sub	sp, #32
 8049f88:	af00      	add	r7, sp, #0
 8049f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8049f8c:	2300      	movs	r3, #0
 8049f8e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049f90:	687b      	ldr	r3, [r7, #4]
 8049f92:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8049f94:	2300      	movs	r3, #0
 8049f96:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8049f98:	6878      	ldr	r0, [r7, #4]
 8049f9a:	f7ff f911 	bl	80491c0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8049f9e:	2110      	movs	r1, #16
 8049fa0:	6878      	ldr	r0, [r7, #4]
 8049fa2:	f7ff f96b 	bl	804927c <USB_FlushTxFifo>
 8049fa6:	4603      	mov	r3, r0
 8049fa8:	2b00      	cmp	r3, #0
 8049faa:	d001      	beq.n	8049fb0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8049fac:	2301      	movs	r3, #1
 8049fae:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8049fb0:	6878      	ldr	r0, [r7, #4]
 8049fb2:	f7ff f997 	bl	80492e4 <USB_FlushRxFifo>
 8049fb6:	4603      	mov	r3, r0
 8049fb8:	2b00      	cmp	r3, #0
 8049fba:	d001      	beq.n	8049fc0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8049fbc:	2301      	movs	r3, #1
 8049fbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8049fc0:	2300      	movs	r3, #0
 8049fc2:	61bb      	str	r3, [r7, #24]
 8049fc4:	e01f      	b.n	804a006 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8049fc6:	69bb      	ldr	r3, [r7, #24]
 8049fc8:	015a      	lsls	r2, r3, #5
 8049fca:	697b      	ldr	r3, [r7, #20]
 8049fcc:	4413      	add	r3, r2
 8049fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049fd2:	681b      	ldr	r3, [r3, #0]
 8049fd4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8049fd6:	693b      	ldr	r3, [r7, #16]
 8049fd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8049fdc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8049fde:	693b      	ldr	r3, [r7, #16]
 8049fe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8049fe4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8049fe6:	693b      	ldr	r3, [r7, #16]
 8049fe8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8049fec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8049fee:	69bb      	ldr	r3, [r7, #24]
 8049ff0:	015a      	lsls	r2, r3, #5
 8049ff2:	697b      	ldr	r3, [r7, #20]
 8049ff4:	4413      	add	r3, r2
 8049ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049ffa:	461a      	mov	r2, r3
 8049ffc:	693b      	ldr	r3, [r7, #16]
 8049ffe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 804a000:	69bb      	ldr	r3, [r7, #24]
 804a002:	3301      	adds	r3, #1
 804a004:	61bb      	str	r3, [r7, #24]
 804a006:	69bb      	ldr	r3, [r7, #24]
 804a008:	2b0f      	cmp	r3, #15
 804a00a:	d9dc      	bls.n	8049fc6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 804a00c:	2300      	movs	r3, #0
 804a00e:	61bb      	str	r3, [r7, #24]
 804a010:	e034      	b.n	804a07c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 804a012:	69bb      	ldr	r3, [r7, #24]
 804a014:	015a      	lsls	r2, r3, #5
 804a016:	697b      	ldr	r3, [r7, #20]
 804a018:	4413      	add	r3, r2
 804a01a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a01e:	681b      	ldr	r3, [r3, #0]
 804a020:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 804a022:	693b      	ldr	r3, [r7, #16]
 804a024:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804a028:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 804a02a:	693b      	ldr	r3, [r7, #16]
 804a02c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a030:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 804a032:	693b      	ldr	r3, [r7, #16]
 804a034:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804a038:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 804a03a:	69bb      	ldr	r3, [r7, #24]
 804a03c:	015a      	lsls	r2, r3, #5
 804a03e:	697b      	ldr	r3, [r7, #20]
 804a040:	4413      	add	r3, r2
 804a042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a046:	461a      	mov	r2, r3
 804a048:	693b      	ldr	r3, [r7, #16]
 804a04a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 804a04c:	68fb      	ldr	r3, [r7, #12]
 804a04e:	3301      	adds	r3, #1
 804a050:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 804a052:	68fb      	ldr	r3, [r7, #12]
 804a054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804a058:	d80c      	bhi.n	804a074 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 804a05a:	69bb      	ldr	r3, [r7, #24]
 804a05c:	015a      	lsls	r2, r3, #5
 804a05e:	697b      	ldr	r3, [r7, #20]
 804a060:	4413      	add	r3, r2
 804a062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a066:	681b      	ldr	r3, [r3, #0]
 804a068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804a06c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804a070:	d0ec      	beq.n	804a04c <USB_StopHost+0xc8>
 804a072:	e000      	b.n	804a076 <USB_StopHost+0xf2>
        break;
 804a074:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 804a076:	69bb      	ldr	r3, [r7, #24]
 804a078:	3301      	adds	r3, #1
 804a07a:	61bb      	str	r3, [r7, #24]
 804a07c:	69bb      	ldr	r3, [r7, #24]
 804a07e:	2b0f      	cmp	r3, #15
 804a080:	d9c7      	bls.n	804a012 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 804a082:	697b      	ldr	r3, [r7, #20]
 804a084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a088:	461a      	mov	r2, r3
 804a08a:	f04f 33ff 	mov.w	r3, #4294967295
 804a08e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 804a090:	687b      	ldr	r3, [r7, #4]
 804a092:	f04f 32ff 	mov.w	r2, #4294967295
 804a096:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 804a098:	6878      	ldr	r0, [r7, #4]
 804a09a:	f7ff f880 	bl	804919e <USB_EnableGlobalInt>

  return ret;
 804a09e:	7ffb      	ldrb	r3, [r7, #31]
}
 804a0a0:	4618      	mov	r0, r3
 804a0a2:	3720      	adds	r7, #32
 804a0a4:	46bd      	mov	sp, r7
 804a0a6:	bd80      	pop	{r7, pc}

0804a0a8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 804a0a8:	b590      	push	{r4, r7, lr}
 804a0aa:	b089      	sub	sp, #36	; 0x24
 804a0ac:	af04      	add	r7, sp, #16
 804a0ae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 804a0b0:	2301      	movs	r3, #1
 804a0b2:	2202      	movs	r2, #2
 804a0b4:	2102      	movs	r1, #2
 804a0b6:	6878      	ldr	r0, [r7, #4]
 804a0b8:	f000 fc66 	bl	804a988 <USBH_FindInterface>
 804a0bc:	4603      	mov	r3, r0
 804a0be:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 804a0c0:	7bfb      	ldrb	r3, [r7, #15]
 804a0c2:	2bff      	cmp	r3, #255	; 0xff
 804a0c4:	d002      	beq.n	804a0cc <USBH_CDC_InterfaceInit+0x24>
 804a0c6:	7bfb      	ldrb	r3, [r7, #15]
 804a0c8:	2b01      	cmp	r3, #1
 804a0ca:	d901      	bls.n	804a0d0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 804a0cc:	2302      	movs	r3, #2
 804a0ce:	e13d      	b.n	804a34c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 804a0d0:	7bfb      	ldrb	r3, [r7, #15]
 804a0d2:	4619      	mov	r1, r3
 804a0d4:	6878      	ldr	r0, [r7, #4]
 804a0d6:	f000 fc3b 	bl	804a950 <USBH_SelectInterface>
 804a0da:	4603      	mov	r3, r0
 804a0dc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 804a0de:	7bbb      	ldrb	r3, [r7, #14]
 804a0e0:	2b00      	cmp	r3, #0
 804a0e2:	d001      	beq.n	804a0e8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 804a0e4:	2302      	movs	r3, #2
 804a0e6:	e131      	b.n	804a34c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 804a0e8:	687b      	ldr	r3, [r7, #4]
 804a0ea:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 804a0ee:	2050      	movs	r0, #80	; 0x50
 804a0f0:	f002 fb00 	bl	804c6f4 <malloc>
 804a0f4:	4603      	mov	r3, r0
 804a0f6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a0f8:	687b      	ldr	r3, [r7, #4]
 804a0fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a0fe:	69db      	ldr	r3, [r3, #28]
 804a100:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 804a102:	68bb      	ldr	r3, [r7, #8]
 804a104:	2b00      	cmp	r3, #0
 804a106:	d101      	bne.n	804a10c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 804a108:	2302      	movs	r3, #2
 804a10a:	e11f      	b.n	804a34c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 804a10c:	2250      	movs	r2, #80	; 0x50
 804a10e:	2100      	movs	r1, #0
 804a110:	68b8      	ldr	r0, [r7, #8]
 804a112:	f002 faff 	bl	804c714 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 804a116:	7bfb      	ldrb	r3, [r7, #15]
 804a118:	687a      	ldr	r2, [r7, #4]
 804a11a:	211a      	movs	r1, #26
 804a11c:	fb01 f303 	mul.w	r3, r1, r3
 804a120:	4413      	add	r3, r2
 804a122:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a126:	781b      	ldrb	r3, [r3, #0]
 804a128:	b25b      	sxtb	r3, r3
 804a12a:	2b00      	cmp	r3, #0
 804a12c:	da15      	bge.n	804a15a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804a12e:	7bfb      	ldrb	r3, [r7, #15]
 804a130:	687a      	ldr	r2, [r7, #4]
 804a132:	211a      	movs	r1, #26
 804a134:	fb01 f303 	mul.w	r3, r1, r3
 804a138:	4413      	add	r3, r2
 804a13a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a13e:	781a      	ldrb	r2, [r3, #0]
 804a140:	68bb      	ldr	r3, [r7, #8]
 804a142:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804a144:	7bfb      	ldrb	r3, [r7, #15]
 804a146:	687a      	ldr	r2, [r7, #4]
 804a148:	211a      	movs	r1, #26
 804a14a:	fb01 f303 	mul.w	r3, r1, r3
 804a14e:	4413      	add	r3, r2
 804a150:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804a154:	881a      	ldrh	r2, [r3, #0]
 804a156:	68bb      	ldr	r3, [r7, #8]
 804a158:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 804a15a:	68bb      	ldr	r3, [r7, #8]
 804a15c:	785b      	ldrb	r3, [r3, #1]
 804a15e:	4619      	mov	r1, r3
 804a160:	6878      	ldr	r0, [r7, #4]
 804a162:	f001 ff2c 	bl	804bfbe <USBH_AllocPipe>
 804a166:	4603      	mov	r3, r0
 804a168:	461a      	mov	r2, r3
 804a16a:	68bb      	ldr	r3, [r7, #8]
 804a16c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 804a16e:	68bb      	ldr	r3, [r7, #8]
 804a170:	7819      	ldrb	r1, [r3, #0]
 804a172:	68bb      	ldr	r3, [r7, #8]
 804a174:	7858      	ldrb	r0, [r3, #1]
 804a176:	687b      	ldr	r3, [r7, #4]
 804a178:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804a17c:	687b      	ldr	r3, [r7, #4]
 804a17e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804a182:	68ba      	ldr	r2, [r7, #8]
 804a184:	8952      	ldrh	r2, [r2, #10]
 804a186:	9202      	str	r2, [sp, #8]
 804a188:	2203      	movs	r2, #3
 804a18a:	9201      	str	r2, [sp, #4]
 804a18c:	9300      	str	r3, [sp, #0]
 804a18e:	4623      	mov	r3, r4
 804a190:	4602      	mov	r2, r0
 804a192:	6878      	ldr	r0, [r7, #4]
 804a194:	f001 fee4 	bl	804bf60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 804a198:	68bb      	ldr	r3, [r7, #8]
 804a19a:	781b      	ldrb	r3, [r3, #0]
 804a19c:	2200      	movs	r2, #0
 804a19e:	4619      	mov	r1, r3
 804a1a0:	6878      	ldr	r0, [r7, #4]
 804a1a2:	f002 f9f9 	bl	804c598 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 804a1a6:	2300      	movs	r3, #0
 804a1a8:	2200      	movs	r2, #0
 804a1aa:	210a      	movs	r1, #10
 804a1ac:	6878      	ldr	r0, [r7, #4]
 804a1ae:	f000 fbeb 	bl	804a988 <USBH_FindInterface>
 804a1b2:	4603      	mov	r3, r0
 804a1b4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 804a1b6:	7bfb      	ldrb	r3, [r7, #15]
 804a1b8:	2bff      	cmp	r3, #255	; 0xff
 804a1ba:	d002      	beq.n	804a1c2 <USBH_CDC_InterfaceInit+0x11a>
 804a1bc:	7bfb      	ldrb	r3, [r7, #15]
 804a1be:	2b01      	cmp	r3, #1
 804a1c0:	d901      	bls.n	804a1c6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 804a1c2:	2302      	movs	r3, #2
 804a1c4:	e0c2      	b.n	804a34c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 804a1c6:	7bfb      	ldrb	r3, [r7, #15]
 804a1c8:	687a      	ldr	r2, [r7, #4]
 804a1ca:	211a      	movs	r1, #26
 804a1cc:	fb01 f303 	mul.w	r3, r1, r3
 804a1d0:	4413      	add	r3, r2
 804a1d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a1d6:	781b      	ldrb	r3, [r3, #0]
 804a1d8:	b25b      	sxtb	r3, r3
 804a1da:	2b00      	cmp	r3, #0
 804a1dc:	da16      	bge.n	804a20c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804a1de:	7bfb      	ldrb	r3, [r7, #15]
 804a1e0:	687a      	ldr	r2, [r7, #4]
 804a1e2:	211a      	movs	r1, #26
 804a1e4:	fb01 f303 	mul.w	r3, r1, r3
 804a1e8:	4413      	add	r3, r2
 804a1ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a1ee:	781a      	ldrb	r2, [r3, #0]
 804a1f0:	68bb      	ldr	r3, [r7, #8]
 804a1f2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804a1f4:	7bfb      	ldrb	r3, [r7, #15]
 804a1f6:	687a      	ldr	r2, [r7, #4]
 804a1f8:	211a      	movs	r1, #26
 804a1fa:	fb01 f303 	mul.w	r3, r1, r3
 804a1fe:	4413      	add	r3, r2
 804a200:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804a204:	881a      	ldrh	r2, [r3, #0]
 804a206:	68bb      	ldr	r3, [r7, #8]
 804a208:	835a      	strh	r2, [r3, #26]
 804a20a:	e015      	b.n	804a238 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804a20c:	7bfb      	ldrb	r3, [r7, #15]
 804a20e:	687a      	ldr	r2, [r7, #4]
 804a210:	211a      	movs	r1, #26
 804a212:	fb01 f303 	mul.w	r3, r1, r3
 804a216:	4413      	add	r3, r2
 804a218:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a21c:	781a      	ldrb	r2, [r3, #0]
 804a21e:	68bb      	ldr	r3, [r7, #8]
 804a220:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804a222:	7bfb      	ldrb	r3, [r7, #15]
 804a224:	687a      	ldr	r2, [r7, #4]
 804a226:	211a      	movs	r1, #26
 804a228:	fb01 f303 	mul.w	r3, r1, r3
 804a22c:	4413      	add	r3, r2
 804a22e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804a232:	881a      	ldrh	r2, [r3, #0]
 804a234:	68bb      	ldr	r3, [r7, #8]
 804a236:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 804a238:	7bfb      	ldrb	r3, [r7, #15]
 804a23a:	687a      	ldr	r2, [r7, #4]
 804a23c:	211a      	movs	r1, #26
 804a23e:	fb01 f303 	mul.w	r3, r1, r3
 804a242:	4413      	add	r3, r2
 804a244:	f203 3356 	addw	r3, r3, #854	; 0x356
 804a248:	781b      	ldrb	r3, [r3, #0]
 804a24a:	b25b      	sxtb	r3, r3
 804a24c:	2b00      	cmp	r3, #0
 804a24e:	da16      	bge.n	804a27e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 804a250:	7bfb      	ldrb	r3, [r7, #15]
 804a252:	687a      	ldr	r2, [r7, #4]
 804a254:	211a      	movs	r1, #26
 804a256:	fb01 f303 	mul.w	r3, r1, r3
 804a25a:	4413      	add	r3, r2
 804a25c:	f203 3356 	addw	r3, r3, #854	; 0x356
 804a260:	781a      	ldrb	r2, [r3, #0]
 804a262:	68bb      	ldr	r3, [r7, #8]
 804a264:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 804a266:	7bfb      	ldrb	r3, [r7, #15]
 804a268:	687a      	ldr	r2, [r7, #4]
 804a26a:	211a      	movs	r1, #26
 804a26c:	fb01 f303 	mul.w	r3, r1, r3
 804a270:	4413      	add	r3, r2
 804a272:	f503 7356 	add.w	r3, r3, #856	; 0x358
 804a276:	881a      	ldrh	r2, [r3, #0]
 804a278:	68bb      	ldr	r3, [r7, #8]
 804a27a:	835a      	strh	r2, [r3, #26]
 804a27c:	e015      	b.n	804a2aa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 804a27e:	7bfb      	ldrb	r3, [r7, #15]
 804a280:	687a      	ldr	r2, [r7, #4]
 804a282:	211a      	movs	r1, #26
 804a284:	fb01 f303 	mul.w	r3, r1, r3
 804a288:	4413      	add	r3, r2
 804a28a:	f203 3356 	addw	r3, r3, #854	; 0x356
 804a28e:	781a      	ldrb	r2, [r3, #0]
 804a290:	68bb      	ldr	r3, [r7, #8]
 804a292:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 804a294:	7bfb      	ldrb	r3, [r7, #15]
 804a296:	687a      	ldr	r2, [r7, #4]
 804a298:	211a      	movs	r1, #26
 804a29a:	fb01 f303 	mul.w	r3, r1, r3
 804a29e:	4413      	add	r3, r2
 804a2a0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 804a2a4:	881a      	ldrh	r2, [r3, #0]
 804a2a6:	68bb      	ldr	r3, [r7, #8]
 804a2a8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 804a2aa:	68bb      	ldr	r3, [r7, #8]
 804a2ac:	7b9b      	ldrb	r3, [r3, #14]
 804a2ae:	4619      	mov	r1, r3
 804a2b0:	6878      	ldr	r0, [r7, #4]
 804a2b2:	f001 fe84 	bl	804bfbe <USBH_AllocPipe>
 804a2b6:	4603      	mov	r3, r0
 804a2b8:	461a      	mov	r2, r3
 804a2ba:	68bb      	ldr	r3, [r7, #8]
 804a2bc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 804a2be:	68bb      	ldr	r3, [r7, #8]
 804a2c0:	7bdb      	ldrb	r3, [r3, #15]
 804a2c2:	4619      	mov	r1, r3
 804a2c4:	6878      	ldr	r0, [r7, #4]
 804a2c6:	f001 fe7a 	bl	804bfbe <USBH_AllocPipe>
 804a2ca:	4603      	mov	r3, r0
 804a2cc:	461a      	mov	r2, r3
 804a2ce:	68bb      	ldr	r3, [r7, #8]
 804a2d0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 804a2d2:	68bb      	ldr	r3, [r7, #8]
 804a2d4:	7b59      	ldrb	r1, [r3, #13]
 804a2d6:	68bb      	ldr	r3, [r7, #8]
 804a2d8:	7b98      	ldrb	r0, [r3, #14]
 804a2da:	687b      	ldr	r3, [r7, #4]
 804a2dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804a2e0:	687b      	ldr	r3, [r7, #4]
 804a2e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804a2e6:	68ba      	ldr	r2, [r7, #8]
 804a2e8:	8b12      	ldrh	r2, [r2, #24]
 804a2ea:	9202      	str	r2, [sp, #8]
 804a2ec:	2202      	movs	r2, #2
 804a2ee:	9201      	str	r2, [sp, #4]
 804a2f0:	9300      	str	r3, [sp, #0]
 804a2f2:	4623      	mov	r3, r4
 804a2f4:	4602      	mov	r2, r0
 804a2f6:	6878      	ldr	r0, [r7, #4]
 804a2f8:	f001 fe32 	bl	804bf60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 804a2fc:	68bb      	ldr	r3, [r7, #8]
 804a2fe:	7b19      	ldrb	r1, [r3, #12]
 804a300:	68bb      	ldr	r3, [r7, #8]
 804a302:	7bd8      	ldrb	r0, [r3, #15]
 804a304:	687b      	ldr	r3, [r7, #4]
 804a306:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804a30a:	687b      	ldr	r3, [r7, #4]
 804a30c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804a310:	68ba      	ldr	r2, [r7, #8]
 804a312:	8b52      	ldrh	r2, [r2, #26]
 804a314:	9202      	str	r2, [sp, #8]
 804a316:	2202      	movs	r2, #2
 804a318:	9201      	str	r2, [sp, #4]
 804a31a:	9300      	str	r3, [sp, #0]
 804a31c:	4623      	mov	r3, r4
 804a31e:	4602      	mov	r2, r0
 804a320:	6878      	ldr	r0, [r7, #4]
 804a322:	f001 fe1d 	bl	804bf60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 804a326:	68bb      	ldr	r3, [r7, #8]
 804a328:	2200      	movs	r2, #0
 804a32a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 804a32e:	68bb      	ldr	r3, [r7, #8]
 804a330:	7b5b      	ldrb	r3, [r3, #13]
 804a332:	2200      	movs	r2, #0
 804a334:	4619      	mov	r1, r3
 804a336:	6878      	ldr	r0, [r7, #4]
 804a338:	f002 f92e 	bl	804c598 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 804a33c:	68bb      	ldr	r3, [r7, #8]
 804a33e:	7b1b      	ldrb	r3, [r3, #12]
 804a340:	2200      	movs	r2, #0
 804a342:	4619      	mov	r1, r3
 804a344:	6878      	ldr	r0, [r7, #4]
 804a346:	f002 f927 	bl	804c598 <USBH_LL_SetToggle>

  return USBH_OK;
 804a34a:	2300      	movs	r3, #0
}
 804a34c:	4618      	mov	r0, r3
 804a34e:	3714      	adds	r7, #20
 804a350:	46bd      	mov	sp, r7
 804a352:	bd90      	pop	{r4, r7, pc}

0804a354 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 804a354:	b580      	push	{r7, lr}
 804a356:	b084      	sub	sp, #16
 804a358:	af00      	add	r7, sp, #0
 804a35a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a35c:	687b      	ldr	r3, [r7, #4]
 804a35e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a362:	69db      	ldr	r3, [r3, #28]
 804a364:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 804a366:	68fb      	ldr	r3, [r7, #12]
 804a368:	781b      	ldrb	r3, [r3, #0]
 804a36a:	2b00      	cmp	r3, #0
 804a36c:	d00e      	beq.n	804a38c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 804a36e:	68fb      	ldr	r3, [r7, #12]
 804a370:	781b      	ldrb	r3, [r3, #0]
 804a372:	4619      	mov	r1, r3
 804a374:	6878      	ldr	r0, [r7, #4]
 804a376:	f001 fe12 	bl	804bf9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 804a37a:	68fb      	ldr	r3, [r7, #12]
 804a37c:	781b      	ldrb	r3, [r3, #0]
 804a37e:	4619      	mov	r1, r3
 804a380:	6878      	ldr	r0, [r7, #4]
 804a382:	f001 fe3d 	bl	804c000 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 804a386:	68fb      	ldr	r3, [r7, #12]
 804a388:	2200      	movs	r2, #0
 804a38a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 804a38c:	68fb      	ldr	r3, [r7, #12]
 804a38e:	7b1b      	ldrb	r3, [r3, #12]
 804a390:	2b00      	cmp	r3, #0
 804a392:	d00e      	beq.n	804a3b2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 804a394:	68fb      	ldr	r3, [r7, #12]
 804a396:	7b1b      	ldrb	r3, [r3, #12]
 804a398:	4619      	mov	r1, r3
 804a39a:	6878      	ldr	r0, [r7, #4]
 804a39c:	f001 fdff 	bl	804bf9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 804a3a0:	68fb      	ldr	r3, [r7, #12]
 804a3a2:	7b1b      	ldrb	r3, [r3, #12]
 804a3a4:	4619      	mov	r1, r3
 804a3a6:	6878      	ldr	r0, [r7, #4]
 804a3a8:	f001 fe2a 	bl	804c000 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 804a3ac:	68fb      	ldr	r3, [r7, #12]
 804a3ae:	2200      	movs	r2, #0
 804a3b0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 804a3b2:	68fb      	ldr	r3, [r7, #12]
 804a3b4:	7b5b      	ldrb	r3, [r3, #13]
 804a3b6:	2b00      	cmp	r3, #0
 804a3b8:	d00e      	beq.n	804a3d8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 804a3ba:	68fb      	ldr	r3, [r7, #12]
 804a3bc:	7b5b      	ldrb	r3, [r3, #13]
 804a3be:	4619      	mov	r1, r3
 804a3c0:	6878      	ldr	r0, [r7, #4]
 804a3c2:	f001 fdec 	bl	804bf9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 804a3c6:	68fb      	ldr	r3, [r7, #12]
 804a3c8:	7b5b      	ldrb	r3, [r3, #13]
 804a3ca:	4619      	mov	r1, r3
 804a3cc:	6878      	ldr	r0, [r7, #4]
 804a3ce:	f001 fe17 	bl	804c000 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 804a3d2:	68fb      	ldr	r3, [r7, #12]
 804a3d4:	2200      	movs	r2, #0
 804a3d6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 804a3d8:	687b      	ldr	r3, [r7, #4]
 804a3da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a3de:	69db      	ldr	r3, [r3, #28]
 804a3e0:	2b00      	cmp	r3, #0
 804a3e2:	d00b      	beq.n	804a3fc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 804a3e4:	687b      	ldr	r3, [r7, #4]
 804a3e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a3ea:	69db      	ldr	r3, [r3, #28]
 804a3ec:	4618      	mov	r0, r3
 804a3ee:	f002 f989 	bl	804c704 <free>
    phost->pActiveClass->pData = 0U;
 804a3f2:	687b      	ldr	r3, [r7, #4]
 804a3f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a3f8:	2200      	movs	r2, #0
 804a3fa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 804a3fc:	2300      	movs	r3, #0
}
 804a3fe:	4618      	mov	r0, r3
 804a400:	3710      	adds	r7, #16
 804a402:	46bd      	mov	sp, r7
 804a404:	bd80      	pop	{r7, pc}

0804a406 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 804a406:	b580      	push	{r7, lr}
 804a408:	b084      	sub	sp, #16
 804a40a:	af00      	add	r7, sp, #0
 804a40c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a40e:	687b      	ldr	r3, [r7, #4]
 804a410:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a414:	69db      	ldr	r3, [r3, #28]
 804a416:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 804a418:	68fb      	ldr	r3, [r7, #12]
 804a41a:	3340      	adds	r3, #64	; 0x40
 804a41c:	4619      	mov	r1, r3
 804a41e:	6878      	ldr	r0, [r7, #4]
 804a420:	f000 f8b1 	bl	804a586 <GetLineCoding>
 804a424:	4603      	mov	r3, r0
 804a426:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 804a428:	7afb      	ldrb	r3, [r7, #11]
 804a42a:	2b00      	cmp	r3, #0
 804a42c:	d105      	bne.n	804a43a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 804a42e:	687b      	ldr	r3, [r7, #4]
 804a430:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804a434:	2102      	movs	r1, #2
 804a436:	6878      	ldr	r0, [r7, #4]
 804a438:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 804a43a:	7afb      	ldrb	r3, [r7, #11]
}
 804a43c:	4618      	mov	r0, r3
 804a43e:	3710      	adds	r7, #16
 804a440:	46bd      	mov	sp, r7
 804a442:	bd80      	pop	{r7, pc}

0804a444 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 804a444:	b580      	push	{r7, lr}
 804a446:	b084      	sub	sp, #16
 804a448:	af00      	add	r7, sp, #0
 804a44a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 804a44c:	2301      	movs	r3, #1
 804a44e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 804a450:	2300      	movs	r3, #0
 804a452:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a454:	687b      	ldr	r3, [r7, #4]
 804a456:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a45a:	69db      	ldr	r3, [r3, #28]
 804a45c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 804a45e:	68bb      	ldr	r3, [r7, #8]
 804a460:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 804a464:	2b04      	cmp	r3, #4
 804a466:	d877      	bhi.n	804a558 <USBH_CDC_Process+0x114>
 804a468:	a201      	add	r2, pc, #4	; (adr r2, 804a470 <USBH_CDC_Process+0x2c>)
 804a46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a46e:	bf00      	nop
 804a470:	0804a485 	.word	0x0804a485
 804a474:	0804a48b 	.word	0x0804a48b
 804a478:	0804a4bb 	.word	0x0804a4bb
 804a47c:	0804a52f 	.word	0x0804a52f
 804a480:	0804a53d 	.word	0x0804a53d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 804a484:	2300      	movs	r3, #0
 804a486:	73fb      	strb	r3, [r7, #15]
      break;
 804a488:	e06d      	b.n	804a566 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 804a48a:	68bb      	ldr	r3, [r7, #8]
 804a48c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804a48e:	4619      	mov	r1, r3
 804a490:	6878      	ldr	r0, [r7, #4]
 804a492:	f000 f897 	bl	804a5c4 <SetLineCoding>
 804a496:	4603      	mov	r3, r0
 804a498:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804a49a:	7bbb      	ldrb	r3, [r7, #14]
 804a49c:	2b00      	cmp	r3, #0
 804a49e:	d104      	bne.n	804a4aa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 804a4a0:	68bb      	ldr	r3, [r7, #8]
 804a4a2:	2202      	movs	r2, #2
 804a4a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 804a4a8:	e058      	b.n	804a55c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 804a4aa:	7bbb      	ldrb	r3, [r7, #14]
 804a4ac:	2b01      	cmp	r3, #1
 804a4ae:	d055      	beq.n	804a55c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 804a4b0:	68bb      	ldr	r3, [r7, #8]
 804a4b2:	2204      	movs	r2, #4
 804a4b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 804a4b8:	e050      	b.n	804a55c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 804a4ba:	68bb      	ldr	r3, [r7, #8]
 804a4bc:	3340      	adds	r3, #64	; 0x40
 804a4be:	4619      	mov	r1, r3
 804a4c0:	6878      	ldr	r0, [r7, #4]
 804a4c2:	f000 f860 	bl	804a586 <GetLineCoding>
 804a4c6:	4603      	mov	r3, r0
 804a4c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804a4ca:	7bbb      	ldrb	r3, [r7, #14]
 804a4cc:	2b00      	cmp	r3, #0
 804a4ce:	d126      	bne.n	804a51e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 804a4d0:	68bb      	ldr	r3, [r7, #8]
 804a4d2:	2200      	movs	r2, #0
 804a4d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 804a4d8:	68bb      	ldr	r3, [r7, #8]
 804a4da:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 804a4de:	68bb      	ldr	r3, [r7, #8]
 804a4e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804a4e2:	791b      	ldrb	r3, [r3, #4]
 804a4e4:	429a      	cmp	r2, r3
 804a4e6:	d13b      	bne.n	804a560 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 804a4e8:	68bb      	ldr	r3, [r7, #8]
 804a4ea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 804a4ee:	68bb      	ldr	r3, [r7, #8]
 804a4f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804a4f2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 804a4f4:	429a      	cmp	r2, r3
 804a4f6:	d133      	bne.n	804a560 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 804a4f8:	68bb      	ldr	r3, [r7, #8]
 804a4fa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 804a4fe:	68bb      	ldr	r3, [r7, #8]
 804a500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804a502:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 804a504:	429a      	cmp	r2, r3
 804a506:	d12b      	bne.n	804a560 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 804a508:	68bb      	ldr	r3, [r7, #8]
 804a50a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804a50c:	68bb      	ldr	r3, [r7, #8]
 804a50e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804a510:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 804a512:	429a      	cmp	r2, r3
 804a514:	d124      	bne.n	804a560 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 804a516:	6878      	ldr	r0, [r7, #4]
 804a518:	f000 f958 	bl	804a7cc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 804a51c:	e020      	b.n	804a560 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 804a51e:	7bbb      	ldrb	r3, [r7, #14]
 804a520:	2b01      	cmp	r3, #1
 804a522:	d01d      	beq.n	804a560 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 804a524:	68bb      	ldr	r3, [r7, #8]
 804a526:	2204      	movs	r2, #4
 804a528:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 804a52c:	e018      	b.n	804a560 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 804a52e:	6878      	ldr	r0, [r7, #4]
 804a530:	f000 f867 	bl	804a602 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 804a534:	6878      	ldr	r0, [r7, #4]
 804a536:	f000 f8da 	bl	804a6ee <CDC_ProcessReception>
      break;
 804a53a:	e014      	b.n	804a566 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 804a53c:	2100      	movs	r1, #0
 804a53e:	6878      	ldr	r0, [r7, #4]
 804a540:	f000 ffef 	bl	804b522 <USBH_ClrFeature>
 804a544:	4603      	mov	r3, r0
 804a546:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804a548:	7bbb      	ldrb	r3, [r7, #14]
 804a54a:	2b00      	cmp	r3, #0
 804a54c:	d10a      	bne.n	804a564 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 804a54e:	68bb      	ldr	r3, [r7, #8]
 804a550:	2200      	movs	r2, #0
 804a552:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 804a556:	e005      	b.n	804a564 <USBH_CDC_Process+0x120>

    default:
      break;
 804a558:	bf00      	nop
 804a55a:	e004      	b.n	804a566 <USBH_CDC_Process+0x122>
      break;
 804a55c:	bf00      	nop
 804a55e:	e002      	b.n	804a566 <USBH_CDC_Process+0x122>
      break;
 804a560:	bf00      	nop
 804a562:	e000      	b.n	804a566 <USBH_CDC_Process+0x122>
      break;
 804a564:	bf00      	nop

  }

  return status;
 804a566:	7bfb      	ldrb	r3, [r7, #15]
}
 804a568:	4618      	mov	r0, r3
 804a56a:	3710      	adds	r7, #16
 804a56c:	46bd      	mov	sp, r7
 804a56e:	bd80      	pop	{r7, pc}

0804a570 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 804a570:	b480      	push	{r7}
 804a572:	b083      	sub	sp, #12
 804a574:	af00      	add	r7, sp, #0
 804a576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 804a578:	2300      	movs	r3, #0
}
 804a57a:	4618      	mov	r0, r3
 804a57c:	370c      	adds	r7, #12
 804a57e:	46bd      	mov	sp, r7
 804a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a584:	4770      	bx	lr

0804a586 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 804a586:	b580      	push	{r7, lr}
 804a588:	b082      	sub	sp, #8
 804a58a:	af00      	add	r7, sp, #0
 804a58c:	6078      	str	r0, [r7, #4]
 804a58e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 804a590:	687b      	ldr	r3, [r7, #4]
 804a592:	22a1      	movs	r2, #161	; 0xa1
 804a594:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 804a596:	687b      	ldr	r3, [r7, #4]
 804a598:	2221      	movs	r2, #33	; 0x21
 804a59a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 804a59c:	687b      	ldr	r3, [r7, #4]
 804a59e:	2200      	movs	r2, #0
 804a5a0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 804a5a2:	687b      	ldr	r3, [r7, #4]
 804a5a4:	2200      	movs	r2, #0
 804a5a6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 804a5a8:	687b      	ldr	r3, [r7, #4]
 804a5aa:	2207      	movs	r2, #7
 804a5ac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 804a5ae:	683b      	ldr	r3, [r7, #0]
 804a5b0:	2207      	movs	r2, #7
 804a5b2:	4619      	mov	r1, r3
 804a5b4:	6878      	ldr	r0, [r7, #4]
 804a5b6:	f001 fa81 	bl	804babc <USBH_CtlReq>
 804a5ba:	4603      	mov	r3, r0
}
 804a5bc:	4618      	mov	r0, r3
 804a5be:	3708      	adds	r7, #8
 804a5c0:	46bd      	mov	sp, r7
 804a5c2:	bd80      	pop	{r7, pc}

0804a5c4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 804a5c4:	b580      	push	{r7, lr}
 804a5c6:	b082      	sub	sp, #8
 804a5c8:	af00      	add	r7, sp, #0
 804a5ca:	6078      	str	r0, [r7, #4]
 804a5cc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 804a5ce:	687b      	ldr	r3, [r7, #4]
 804a5d0:	2221      	movs	r2, #33	; 0x21
 804a5d2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 804a5d4:	687b      	ldr	r3, [r7, #4]
 804a5d6:	2220      	movs	r2, #32
 804a5d8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 804a5da:	687b      	ldr	r3, [r7, #4]
 804a5dc:	2200      	movs	r2, #0
 804a5de:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 804a5e0:	687b      	ldr	r3, [r7, #4]
 804a5e2:	2200      	movs	r2, #0
 804a5e4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 804a5e6:	687b      	ldr	r3, [r7, #4]
 804a5e8:	2207      	movs	r2, #7
 804a5ea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 804a5ec:	683b      	ldr	r3, [r7, #0]
 804a5ee:	2207      	movs	r2, #7
 804a5f0:	4619      	mov	r1, r3
 804a5f2:	6878      	ldr	r0, [r7, #4]
 804a5f4:	f001 fa62 	bl	804babc <USBH_CtlReq>
 804a5f8:	4603      	mov	r3, r0
}
 804a5fa:	4618      	mov	r0, r3
 804a5fc:	3708      	adds	r7, #8
 804a5fe:	46bd      	mov	sp, r7
 804a600:	bd80      	pop	{r7, pc}

0804a602 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 804a602:	b580      	push	{r7, lr}
 804a604:	b086      	sub	sp, #24
 804a606:	af02      	add	r7, sp, #8
 804a608:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a60a:	687b      	ldr	r3, [r7, #4]
 804a60c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a610:	69db      	ldr	r3, [r3, #28]
 804a612:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804a614:	2300      	movs	r3, #0
 804a616:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 804a618:	68fb      	ldr	r3, [r7, #12]
 804a61a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 804a61e:	2b01      	cmp	r3, #1
 804a620:	d002      	beq.n	804a628 <CDC_ProcessTransmission+0x26>
 804a622:	2b02      	cmp	r3, #2
 804a624:	d023      	beq.n	804a66e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 804a626:	e05e      	b.n	804a6e6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 804a628:	68fb      	ldr	r3, [r7, #12]
 804a62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a62c:	68fa      	ldr	r2, [r7, #12]
 804a62e:	8b12      	ldrh	r2, [r2, #24]
 804a630:	4293      	cmp	r3, r2
 804a632:	d90b      	bls.n	804a64c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 804a634:	68fb      	ldr	r3, [r7, #12]
 804a636:	69d9      	ldr	r1, [r3, #28]
 804a638:	68fb      	ldr	r3, [r7, #12]
 804a63a:	8b1a      	ldrh	r2, [r3, #24]
 804a63c:	68fb      	ldr	r3, [r7, #12]
 804a63e:	7b5b      	ldrb	r3, [r3, #13]
 804a640:	2001      	movs	r0, #1
 804a642:	9000      	str	r0, [sp, #0]
 804a644:	6878      	ldr	r0, [r7, #4]
 804a646:	f001 fc48 	bl	804beda <USBH_BulkSendData>
 804a64a:	e00b      	b.n	804a664 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 804a64c:	68fb      	ldr	r3, [r7, #12]
 804a64e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 804a650:	68fb      	ldr	r3, [r7, #12]
 804a652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 804a654:	b29a      	uxth	r2, r3
 804a656:	68fb      	ldr	r3, [r7, #12]
 804a658:	7b5b      	ldrb	r3, [r3, #13]
 804a65a:	2001      	movs	r0, #1
 804a65c:	9000      	str	r0, [sp, #0]
 804a65e:	6878      	ldr	r0, [r7, #4]
 804a660:	f001 fc3b 	bl	804beda <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 804a664:	68fb      	ldr	r3, [r7, #12]
 804a666:	2202      	movs	r2, #2
 804a668:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804a66c:	e03b      	b.n	804a6e6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 804a66e:	68fb      	ldr	r3, [r7, #12]
 804a670:	7b5b      	ldrb	r3, [r3, #13]
 804a672:	4619      	mov	r1, r3
 804a674:	6878      	ldr	r0, [r7, #4]
 804a676:	f001 ff65 	bl	804c544 <USBH_LL_GetURBState>
 804a67a:	4603      	mov	r3, r0
 804a67c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 804a67e:	7afb      	ldrb	r3, [r7, #11]
 804a680:	2b01      	cmp	r3, #1
 804a682:	d128      	bne.n	804a6d6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 804a684:	68fb      	ldr	r3, [r7, #12]
 804a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a688:	68fa      	ldr	r2, [r7, #12]
 804a68a:	8b12      	ldrh	r2, [r2, #24]
 804a68c:	4293      	cmp	r3, r2
 804a68e:	d90e      	bls.n	804a6ae <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 804a690:	68fb      	ldr	r3, [r7, #12]
 804a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a694:	68fa      	ldr	r2, [r7, #12]
 804a696:	8b12      	ldrh	r2, [r2, #24]
 804a698:	1a9a      	subs	r2, r3, r2
 804a69a:	68fb      	ldr	r3, [r7, #12]
 804a69c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 804a69e:	68fb      	ldr	r3, [r7, #12]
 804a6a0:	69db      	ldr	r3, [r3, #28]
 804a6a2:	68fa      	ldr	r2, [r7, #12]
 804a6a4:	8b12      	ldrh	r2, [r2, #24]
 804a6a6:	441a      	add	r2, r3
 804a6a8:	68fb      	ldr	r3, [r7, #12]
 804a6aa:	61da      	str	r2, [r3, #28]
 804a6ac:	e002      	b.n	804a6b4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 804a6ae:	68fb      	ldr	r3, [r7, #12]
 804a6b0:	2200      	movs	r2, #0
 804a6b2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 804a6b4:	68fb      	ldr	r3, [r7, #12]
 804a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a6b8:	2b00      	cmp	r3, #0
 804a6ba:	d004      	beq.n	804a6c6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 804a6bc:	68fb      	ldr	r3, [r7, #12]
 804a6be:	2201      	movs	r2, #1
 804a6c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804a6c4:	e00e      	b.n	804a6e4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 804a6c6:	68fb      	ldr	r3, [r7, #12]
 804a6c8:	2200      	movs	r2, #0
 804a6ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 804a6ce:	6878      	ldr	r0, [r7, #4]
 804a6d0:	f000 f868 	bl	804a7a4 <USBH_CDC_TransmitCallback>
      break;
 804a6d4:	e006      	b.n	804a6e4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 804a6d6:	7afb      	ldrb	r3, [r7, #11]
 804a6d8:	2b02      	cmp	r3, #2
 804a6da:	d103      	bne.n	804a6e4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 804a6dc:	68fb      	ldr	r3, [r7, #12]
 804a6de:	2201      	movs	r2, #1
 804a6e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804a6e4:	bf00      	nop
  }
}
 804a6e6:	bf00      	nop
 804a6e8:	3710      	adds	r7, #16
 804a6ea:	46bd      	mov	sp, r7
 804a6ec:	bd80      	pop	{r7, pc}

0804a6ee <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 804a6ee:	b580      	push	{r7, lr}
 804a6f0:	b086      	sub	sp, #24
 804a6f2:	af00      	add	r7, sp, #0
 804a6f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a6f6:	687b      	ldr	r3, [r7, #4]
 804a6f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a6fc:	69db      	ldr	r3, [r3, #28]
 804a6fe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804a700:	2300      	movs	r3, #0
 804a702:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 804a704:	697b      	ldr	r3, [r7, #20]
 804a706:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 804a70a:	2b03      	cmp	r3, #3
 804a70c:	d002      	beq.n	804a714 <CDC_ProcessReception+0x26>
 804a70e:	2b04      	cmp	r3, #4
 804a710:	d00e      	beq.n	804a730 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 804a712:	e043      	b.n	804a79c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 804a714:	697b      	ldr	r3, [r7, #20]
 804a716:	6a19      	ldr	r1, [r3, #32]
 804a718:	697b      	ldr	r3, [r7, #20]
 804a71a:	8b5a      	ldrh	r2, [r3, #26]
 804a71c:	697b      	ldr	r3, [r7, #20]
 804a71e:	7b1b      	ldrb	r3, [r3, #12]
 804a720:	6878      	ldr	r0, [r7, #4]
 804a722:	f001 fbff 	bl	804bf24 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 804a726:	697b      	ldr	r3, [r7, #20]
 804a728:	2204      	movs	r2, #4
 804a72a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 804a72e:	e035      	b.n	804a79c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 804a730:	697b      	ldr	r3, [r7, #20]
 804a732:	7b1b      	ldrb	r3, [r3, #12]
 804a734:	4619      	mov	r1, r3
 804a736:	6878      	ldr	r0, [r7, #4]
 804a738:	f001 ff04 	bl	804c544 <USBH_LL_GetURBState>
 804a73c:	4603      	mov	r3, r0
 804a73e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 804a740:	7cfb      	ldrb	r3, [r7, #19]
 804a742:	2b01      	cmp	r3, #1
 804a744:	d129      	bne.n	804a79a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 804a746:	697b      	ldr	r3, [r7, #20]
 804a748:	7b1b      	ldrb	r3, [r3, #12]
 804a74a:	4619      	mov	r1, r3
 804a74c:	6878      	ldr	r0, [r7, #4]
 804a74e:	f001 fe67 	bl	804c420 <USBH_LL_GetLastXferSize>
 804a752:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 804a754:	697b      	ldr	r3, [r7, #20]
 804a756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804a758:	68fa      	ldr	r2, [r7, #12]
 804a75a:	429a      	cmp	r2, r3
 804a75c:	d016      	beq.n	804a78c <CDC_ProcessReception+0x9e>
 804a75e:	697b      	ldr	r3, [r7, #20]
 804a760:	8b5b      	ldrh	r3, [r3, #26]
 804a762:	461a      	mov	r2, r3
 804a764:	68fb      	ldr	r3, [r7, #12]
 804a766:	4293      	cmp	r3, r2
 804a768:	d910      	bls.n	804a78c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 804a76a:	697b      	ldr	r3, [r7, #20]
 804a76c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804a76e:	68fb      	ldr	r3, [r7, #12]
 804a770:	1ad2      	subs	r2, r2, r3
 804a772:	697b      	ldr	r3, [r7, #20]
 804a774:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 804a776:	697b      	ldr	r3, [r7, #20]
 804a778:	6a1a      	ldr	r2, [r3, #32]
 804a77a:	68fb      	ldr	r3, [r7, #12]
 804a77c:	441a      	add	r2, r3
 804a77e:	697b      	ldr	r3, [r7, #20]
 804a780:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 804a782:	697b      	ldr	r3, [r7, #20]
 804a784:	2203      	movs	r2, #3
 804a786:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 804a78a:	e006      	b.n	804a79a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 804a78c:	697b      	ldr	r3, [r7, #20]
 804a78e:	2200      	movs	r2, #0
 804a790:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 804a794:	6878      	ldr	r0, [r7, #4]
 804a796:	f000 f80f 	bl	804a7b8 <USBH_CDC_ReceiveCallback>
      break;
 804a79a:	bf00      	nop
  }
}
 804a79c:	bf00      	nop
 804a79e:	3718      	adds	r7, #24
 804a7a0:	46bd      	mov	sp, r7
 804a7a2:	bd80      	pop	{r7, pc}

0804a7a4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 804a7a4:	b480      	push	{r7}
 804a7a6:	b083      	sub	sp, #12
 804a7a8:	af00      	add	r7, sp, #0
 804a7aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804a7ac:	bf00      	nop
 804a7ae:	370c      	adds	r7, #12
 804a7b0:	46bd      	mov	sp, r7
 804a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a7b6:	4770      	bx	lr

0804a7b8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 804a7b8:	b480      	push	{r7}
 804a7ba:	b083      	sub	sp, #12
 804a7bc:	af00      	add	r7, sp, #0
 804a7be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804a7c0:	bf00      	nop
 804a7c2:	370c      	adds	r7, #12
 804a7c4:	46bd      	mov	sp, r7
 804a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a7ca:	4770      	bx	lr

0804a7cc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 804a7cc:	b480      	push	{r7}
 804a7ce:	b083      	sub	sp, #12
 804a7d0:	af00      	add	r7, sp, #0
 804a7d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804a7d4:	bf00      	nop
 804a7d6:	370c      	adds	r7, #12
 804a7d8:	46bd      	mov	sp, r7
 804a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a7de:	4770      	bx	lr

0804a7e0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 804a7e0:	b580      	push	{r7, lr}
 804a7e2:	b084      	sub	sp, #16
 804a7e4:	af00      	add	r7, sp, #0
 804a7e6:	60f8      	str	r0, [r7, #12]
 804a7e8:	60b9      	str	r1, [r7, #8]
 804a7ea:	4613      	mov	r3, r2
 804a7ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 804a7ee:	68fb      	ldr	r3, [r7, #12]
 804a7f0:	2b00      	cmp	r3, #0
 804a7f2:	d101      	bne.n	804a7f8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 804a7f4:	2302      	movs	r3, #2
 804a7f6:	e029      	b.n	804a84c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 804a7f8:	68fb      	ldr	r3, [r7, #12]
 804a7fa:	79fa      	ldrb	r2, [r7, #7]
 804a7fc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 804a800:	68fb      	ldr	r3, [r7, #12]
 804a802:	2200      	movs	r2, #0
 804a804:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 804a808:	68fb      	ldr	r3, [r7, #12]
 804a80a:	2200      	movs	r2, #0
 804a80c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 804a810:	68f8      	ldr	r0, [r7, #12]
 804a812:	f000 f81f 	bl	804a854 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 804a816:	68fb      	ldr	r3, [r7, #12]
 804a818:	2200      	movs	r2, #0
 804a81a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 804a81e:	68fb      	ldr	r3, [r7, #12]
 804a820:	2200      	movs	r2, #0
 804a822:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 804a826:	68fb      	ldr	r3, [r7, #12]
 804a828:	2200      	movs	r2, #0
 804a82a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 804a82e:	68fb      	ldr	r3, [r7, #12]
 804a830:	2200      	movs	r2, #0
 804a832:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 804a836:	68bb      	ldr	r3, [r7, #8]
 804a838:	2b00      	cmp	r3, #0
 804a83a:	d003      	beq.n	804a844 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 804a83c:	68fb      	ldr	r3, [r7, #12]
 804a83e:	68ba      	ldr	r2, [r7, #8]
 804a840:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 804a844:	68f8      	ldr	r0, [r7, #12]
 804a846:	f001 fd2d 	bl	804c2a4 <USBH_LL_Init>

  return USBH_OK;
 804a84a:	2300      	movs	r3, #0
}
 804a84c:	4618      	mov	r0, r3
 804a84e:	3710      	adds	r7, #16
 804a850:	46bd      	mov	sp, r7
 804a852:	bd80      	pop	{r7, pc}

0804a854 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 804a854:	b480      	push	{r7}
 804a856:	b085      	sub	sp, #20
 804a858:	af00      	add	r7, sp, #0
 804a85a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 804a85c:	2300      	movs	r3, #0
 804a85e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 804a860:	2300      	movs	r3, #0
 804a862:	60fb      	str	r3, [r7, #12]
 804a864:	e009      	b.n	804a87a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 804a866:	687a      	ldr	r2, [r7, #4]
 804a868:	68fb      	ldr	r3, [r7, #12]
 804a86a:	33e0      	adds	r3, #224	; 0xe0
 804a86c:	009b      	lsls	r3, r3, #2
 804a86e:	4413      	add	r3, r2
 804a870:	2200      	movs	r2, #0
 804a872:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 804a874:	68fb      	ldr	r3, [r7, #12]
 804a876:	3301      	adds	r3, #1
 804a878:	60fb      	str	r3, [r7, #12]
 804a87a:	68fb      	ldr	r3, [r7, #12]
 804a87c:	2b0f      	cmp	r3, #15
 804a87e:	d9f2      	bls.n	804a866 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 804a880:	2300      	movs	r3, #0
 804a882:	60fb      	str	r3, [r7, #12]
 804a884:	e009      	b.n	804a89a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 804a886:	687a      	ldr	r2, [r7, #4]
 804a888:	68fb      	ldr	r3, [r7, #12]
 804a88a:	4413      	add	r3, r2
 804a88c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804a890:	2200      	movs	r2, #0
 804a892:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 804a894:	68fb      	ldr	r3, [r7, #12]
 804a896:	3301      	adds	r3, #1
 804a898:	60fb      	str	r3, [r7, #12]
 804a89a:	68fb      	ldr	r3, [r7, #12]
 804a89c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804a8a0:	d3f1      	bcc.n	804a886 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 804a8a2:	687b      	ldr	r3, [r7, #4]
 804a8a4:	2200      	movs	r2, #0
 804a8a6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 804a8a8:	687b      	ldr	r3, [r7, #4]
 804a8aa:	2200      	movs	r2, #0
 804a8ac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 804a8ae:	687b      	ldr	r3, [r7, #4]
 804a8b0:	2201      	movs	r2, #1
 804a8b2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 804a8b4:	687b      	ldr	r3, [r7, #4]
 804a8b6:	2200      	movs	r2, #0
 804a8b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 804a8bc:	687b      	ldr	r3, [r7, #4]
 804a8be:	2201      	movs	r2, #1
 804a8c0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 804a8c2:	687b      	ldr	r3, [r7, #4]
 804a8c4:	2240      	movs	r2, #64	; 0x40
 804a8c6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 804a8c8:	687b      	ldr	r3, [r7, #4]
 804a8ca:	2200      	movs	r2, #0
 804a8cc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 804a8ce:	687b      	ldr	r3, [r7, #4]
 804a8d0:	2200      	movs	r2, #0
 804a8d2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 804a8d6:	687b      	ldr	r3, [r7, #4]
 804a8d8:	2201      	movs	r2, #1
 804a8da:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 804a8de:	687b      	ldr	r3, [r7, #4]
 804a8e0:	2200      	movs	r2, #0
 804a8e2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 804a8e6:	687b      	ldr	r3, [r7, #4]
 804a8e8:	2200      	movs	r2, #0
 804a8ea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 804a8ee:	2300      	movs	r3, #0
}
 804a8f0:	4618      	mov	r0, r3
 804a8f2:	3714      	adds	r7, #20
 804a8f4:	46bd      	mov	sp, r7
 804a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a8fa:	4770      	bx	lr

0804a8fc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 804a8fc:	b480      	push	{r7}
 804a8fe:	b085      	sub	sp, #20
 804a900:	af00      	add	r7, sp, #0
 804a902:	6078      	str	r0, [r7, #4]
 804a904:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 804a906:	2300      	movs	r3, #0
 804a908:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 804a90a:	683b      	ldr	r3, [r7, #0]
 804a90c:	2b00      	cmp	r3, #0
 804a90e:	d016      	beq.n	804a93e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 804a910:	687b      	ldr	r3, [r7, #4]
 804a912:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804a916:	2b00      	cmp	r3, #0
 804a918:	d10e      	bne.n	804a938 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 804a91a:	687b      	ldr	r3, [r7, #4]
 804a91c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804a920:	1c59      	adds	r1, r3, #1
 804a922:	687a      	ldr	r2, [r7, #4]
 804a924:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 804a928:	687a      	ldr	r2, [r7, #4]
 804a92a:	33de      	adds	r3, #222	; 0xde
 804a92c:	6839      	ldr	r1, [r7, #0]
 804a92e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 804a932:	2300      	movs	r3, #0
 804a934:	73fb      	strb	r3, [r7, #15]
 804a936:	e004      	b.n	804a942 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 804a938:	2302      	movs	r3, #2
 804a93a:	73fb      	strb	r3, [r7, #15]
 804a93c:	e001      	b.n	804a942 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 804a93e:	2302      	movs	r3, #2
 804a940:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804a942:	7bfb      	ldrb	r3, [r7, #15]
}
 804a944:	4618      	mov	r0, r3
 804a946:	3714      	adds	r7, #20
 804a948:	46bd      	mov	sp, r7
 804a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a94e:	4770      	bx	lr

0804a950 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 804a950:	b480      	push	{r7}
 804a952:	b085      	sub	sp, #20
 804a954:	af00      	add	r7, sp, #0
 804a956:	6078      	str	r0, [r7, #4]
 804a958:	460b      	mov	r3, r1
 804a95a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 804a95c:	2300      	movs	r3, #0
 804a95e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 804a960:	687b      	ldr	r3, [r7, #4]
 804a962:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 804a966:	78fa      	ldrb	r2, [r7, #3]
 804a968:	429a      	cmp	r2, r3
 804a96a:	d204      	bcs.n	804a976 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 804a96c:	687b      	ldr	r3, [r7, #4]
 804a96e:	78fa      	ldrb	r2, [r7, #3]
 804a970:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 804a974:	e001      	b.n	804a97a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 804a976:	2302      	movs	r3, #2
 804a978:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804a97a:	7bfb      	ldrb	r3, [r7, #15]
}
 804a97c:	4618      	mov	r0, r3
 804a97e:	3714      	adds	r7, #20
 804a980:	46bd      	mov	sp, r7
 804a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a986:	4770      	bx	lr

0804a988 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 804a988:	b480      	push	{r7}
 804a98a:	b087      	sub	sp, #28
 804a98c:	af00      	add	r7, sp, #0
 804a98e:	6078      	str	r0, [r7, #4]
 804a990:	4608      	mov	r0, r1
 804a992:	4611      	mov	r1, r2
 804a994:	461a      	mov	r2, r3
 804a996:	4603      	mov	r3, r0
 804a998:	70fb      	strb	r3, [r7, #3]
 804a99a:	460b      	mov	r3, r1
 804a99c:	70bb      	strb	r3, [r7, #2]
 804a99e:	4613      	mov	r3, r2
 804a9a0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 804a9a2:	2300      	movs	r3, #0
 804a9a4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 804a9a6:	2300      	movs	r3, #0
 804a9a8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 804a9aa:	687b      	ldr	r3, [r7, #4]
 804a9ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 804a9b0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 804a9b2:	e025      	b.n	804aa00 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 804a9b4:	7dfb      	ldrb	r3, [r7, #23]
 804a9b6:	221a      	movs	r2, #26
 804a9b8:	fb02 f303 	mul.w	r3, r2, r3
 804a9bc:	3308      	adds	r3, #8
 804a9be:	68fa      	ldr	r2, [r7, #12]
 804a9c0:	4413      	add	r3, r2
 804a9c2:	3302      	adds	r3, #2
 804a9c4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 804a9c6:	693b      	ldr	r3, [r7, #16]
 804a9c8:	795b      	ldrb	r3, [r3, #5]
 804a9ca:	78fa      	ldrb	r2, [r7, #3]
 804a9cc:	429a      	cmp	r2, r3
 804a9ce:	d002      	beq.n	804a9d6 <USBH_FindInterface+0x4e>
 804a9d0:	78fb      	ldrb	r3, [r7, #3]
 804a9d2:	2bff      	cmp	r3, #255	; 0xff
 804a9d4:	d111      	bne.n	804a9fa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804a9d6:	693b      	ldr	r3, [r7, #16]
 804a9d8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 804a9da:	78ba      	ldrb	r2, [r7, #2]
 804a9dc:	429a      	cmp	r2, r3
 804a9de:	d002      	beq.n	804a9e6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804a9e0:	78bb      	ldrb	r3, [r7, #2]
 804a9e2:	2bff      	cmp	r3, #255	; 0xff
 804a9e4:	d109      	bne.n	804a9fa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 804a9e6:	693b      	ldr	r3, [r7, #16]
 804a9e8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804a9ea:	787a      	ldrb	r2, [r7, #1]
 804a9ec:	429a      	cmp	r2, r3
 804a9ee:	d002      	beq.n	804a9f6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 804a9f0:	787b      	ldrb	r3, [r7, #1]
 804a9f2:	2bff      	cmp	r3, #255	; 0xff
 804a9f4:	d101      	bne.n	804a9fa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 804a9f6:	7dfb      	ldrb	r3, [r7, #23]
 804a9f8:	e006      	b.n	804aa08 <USBH_FindInterface+0x80>
    }
    if_ix++;
 804a9fa:	7dfb      	ldrb	r3, [r7, #23]
 804a9fc:	3301      	adds	r3, #1
 804a9fe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 804aa00:	7dfb      	ldrb	r3, [r7, #23]
 804aa02:	2b01      	cmp	r3, #1
 804aa04:	d9d6      	bls.n	804a9b4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 804aa06:	23ff      	movs	r3, #255	; 0xff
}
 804aa08:	4618      	mov	r0, r3
 804aa0a:	371c      	adds	r7, #28
 804aa0c:	46bd      	mov	sp, r7
 804aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804aa12:	4770      	bx	lr

0804aa14 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 804aa14:	b580      	push	{r7, lr}
 804aa16:	b082      	sub	sp, #8
 804aa18:	af00      	add	r7, sp, #0
 804aa1a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 804aa1c:	6878      	ldr	r0, [r7, #4]
 804aa1e:	f001 fc87 	bl	804c330 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 804aa22:	2101      	movs	r1, #1
 804aa24:	6878      	ldr	r0, [r7, #4]
 804aa26:	f001 fda0 	bl	804c56a <USBH_LL_DriverVBUS>

  return USBH_OK;
 804aa2a:	2300      	movs	r3, #0
}
 804aa2c:	4618      	mov	r0, r3
 804aa2e:	3708      	adds	r7, #8
 804aa30:	46bd      	mov	sp, r7
 804aa32:	bd80      	pop	{r7, pc}

0804aa34 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 804aa34:	b580      	push	{r7, lr}
 804aa36:	b088      	sub	sp, #32
 804aa38:	af04      	add	r7, sp, #16
 804aa3a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 804aa3c:	2302      	movs	r3, #2
 804aa3e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 804aa40:	2300      	movs	r3, #0
 804aa42:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 804aa44:	687b      	ldr	r3, [r7, #4]
 804aa46:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 804aa4a:	b2db      	uxtb	r3, r3
 804aa4c:	2b01      	cmp	r3, #1
 804aa4e:	d102      	bne.n	804aa56 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 804aa50:	687b      	ldr	r3, [r7, #4]
 804aa52:	2203      	movs	r2, #3
 804aa54:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 804aa56:	687b      	ldr	r3, [r7, #4]
 804aa58:	781b      	ldrb	r3, [r3, #0]
 804aa5a:	b2db      	uxtb	r3, r3
 804aa5c:	2b0b      	cmp	r3, #11
 804aa5e:	f200 81be 	bhi.w	804adde <USBH_Process+0x3aa>
 804aa62:	a201      	add	r2, pc, #4	; (adr r2, 804aa68 <USBH_Process+0x34>)
 804aa64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804aa68:	0804aa99 	.word	0x0804aa99
 804aa6c:	0804aacb 	.word	0x0804aacb
 804aa70:	0804ab33 	.word	0x0804ab33
 804aa74:	0804ad79 	.word	0x0804ad79
 804aa78:	0804addf 	.word	0x0804addf
 804aa7c:	0804abd7 	.word	0x0804abd7
 804aa80:	0804ad1f 	.word	0x0804ad1f
 804aa84:	0804ac0d 	.word	0x0804ac0d
 804aa88:	0804ac2d 	.word	0x0804ac2d
 804aa8c:	0804ac4d 	.word	0x0804ac4d
 804aa90:	0804ac91 	.word	0x0804ac91
 804aa94:	0804ad61 	.word	0x0804ad61
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 804aa98:	687b      	ldr	r3, [r7, #4]
 804aa9a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 804aa9e:	b2db      	uxtb	r3, r3
 804aaa0:	2b00      	cmp	r3, #0
 804aaa2:	f000 819e 	beq.w	804ade2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 804aaa6:	687b      	ldr	r3, [r7, #4]
 804aaa8:	2201      	movs	r2, #1
 804aaaa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 804aaac:	20c8      	movs	r0, #200	; 0xc8
 804aaae:	f001 fda3 	bl	804c5f8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 804aab2:	6878      	ldr	r0, [r7, #4]
 804aab4:	f001 fc99 	bl	804c3ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 804aab8:	687b      	ldr	r3, [r7, #4]
 804aaba:	2200      	movs	r2, #0
 804aabc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 804aac0:	687b      	ldr	r3, [r7, #4]
 804aac2:	2200      	movs	r2, #0
 804aac4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804aac8:	e18b      	b.n	804ade2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 804aaca:	687b      	ldr	r3, [r7, #4]
 804aacc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 804aad0:	2b01      	cmp	r3, #1
 804aad2:	d107      	bne.n	804aae4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 804aad4:	687b      	ldr	r3, [r7, #4]
 804aad6:	2200      	movs	r2, #0
 804aad8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 804aadc:	687b      	ldr	r3, [r7, #4]
 804aade:	2202      	movs	r2, #2
 804aae0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804aae2:	e18d      	b.n	804ae00 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 804aae4:	687b      	ldr	r3, [r7, #4]
 804aae6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 804aaea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804aaee:	d914      	bls.n	804ab1a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 804aaf0:	687b      	ldr	r3, [r7, #4]
 804aaf2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 804aaf6:	3301      	adds	r3, #1
 804aaf8:	b2da      	uxtb	r2, r3
 804aafa:	687b      	ldr	r3, [r7, #4]
 804aafc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 804ab00:	687b      	ldr	r3, [r7, #4]
 804ab02:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 804ab06:	2b03      	cmp	r3, #3
 804ab08:	d903      	bls.n	804ab12 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 804ab0a:	687b      	ldr	r3, [r7, #4]
 804ab0c:	220d      	movs	r2, #13
 804ab0e:	701a      	strb	r2, [r3, #0]
      break;
 804ab10:	e176      	b.n	804ae00 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 804ab12:	687b      	ldr	r3, [r7, #4]
 804ab14:	2200      	movs	r2, #0
 804ab16:	701a      	strb	r2, [r3, #0]
      break;
 804ab18:	e172      	b.n	804ae00 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 804ab1a:	687b      	ldr	r3, [r7, #4]
 804ab1c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 804ab20:	f103 020a 	add.w	r2, r3, #10
 804ab24:	687b      	ldr	r3, [r7, #4]
 804ab26:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 804ab2a:	200a      	movs	r0, #10
 804ab2c:	f001 fd64 	bl	804c5f8 <USBH_Delay>
      break;
 804ab30:	e166      	b.n	804ae00 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 804ab32:	687b      	ldr	r3, [r7, #4]
 804ab34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804ab38:	2b00      	cmp	r3, #0
 804ab3a:	d005      	beq.n	804ab48 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 804ab3c:	687b      	ldr	r3, [r7, #4]
 804ab3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804ab42:	2104      	movs	r1, #4
 804ab44:	6878      	ldr	r0, [r7, #4]
 804ab46:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 804ab48:	2064      	movs	r0, #100	; 0x64
 804ab4a:	f001 fd55 	bl	804c5f8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 804ab4e:	6878      	ldr	r0, [r7, #4]
 804ab50:	f001 fc24 	bl	804c39c <USBH_LL_GetSpeed>
 804ab54:	4603      	mov	r3, r0
 804ab56:	461a      	mov	r2, r3
 804ab58:	687b      	ldr	r3, [r7, #4]
 804ab5a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 804ab5e:	687b      	ldr	r3, [r7, #4]
 804ab60:	2205      	movs	r2, #5
 804ab62:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 804ab64:	2100      	movs	r1, #0
 804ab66:	6878      	ldr	r0, [r7, #4]
 804ab68:	f001 fa29 	bl	804bfbe <USBH_AllocPipe>
 804ab6c:	4603      	mov	r3, r0
 804ab6e:	461a      	mov	r2, r3
 804ab70:	687b      	ldr	r3, [r7, #4]
 804ab72:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 804ab74:	2180      	movs	r1, #128	; 0x80
 804ab76:	6878      	ldr	r0, [r7, #4]
 804ab78:	f001 fa21 	bl	804bfbe <USBH_AllocPipe>
 804ab7c:	4603      	mov	r3, r0
 804ab7e:	461a      	mov	r2, r3
 804ab80:	687b      	ldr	r3, [r7, #4]
 804ab82:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 804ab84:	687b      	ldr	r3, [r7, #4]
 804ab86:	7919      	ldrb	r1, [r3, #4]
 804ab88:	687b      	ldr	r3, [r7, #4]
 804ab8a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804ab8e:	687b      	ldr	r3, [r7, #4]
 804ab90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 804ab94:	687a      	ldr	r2, [r7, #4]
 804ab96:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 804ab98:	b292      	uxth	r2, r2
 804ab9a:	9202      	str	r2, [sp, #8]
 804ab9c:	2200      	movs	r2, #0
 804ab9e:	9201      	str	r2, [sp, #4]
 804aba0:	9300      	str	r3, [sp, #0]
 804aba2:	4603      	mov	r3, r0
 804aba4:	2280      	movs	r2, #128	; 0x80
 804aba6:	6878      	ldr	r0, [r7, #4]
 804aba8:	f001 f9da 	bl	804bf60 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 804abac:	687b      	ldr	r3, [r7, #4]
 804abae:	7959      	ldrb	r1, [r3, #5]
 804abb0:	687b      	ldr	r3, [r7, #4]
 804abb2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804abb6:	687b      	ldr	r3, [r7, #4]
 804abb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 804abbc:	687a      	ldr	r2, [r7, #4]
 804abbe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 804abc0:	b292      	uxth	r2, r2
 804abc2:	9202      	str	r2, [sp, #8]
 804abc4:	2200      	movs	r2, #0
 804abc6:	9201      	str	r2, [sp, #4]
 804abc8:	9300      	str	r3, [sp, #0]
 804abca:	4603      	mov	r3, r0
 804abcc:	2200      	movs	r2, #0
 804abce:	6878      	ldr	r0, [r7, #4]
 804abd0:	f001 f9c6 	bl	804bf60 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804abd4:	e114      	b.n	804ae00 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 804abd6:	6878      	ldr	r0, [r7, #4]
 804abd8:	f000 f918 	bl	804ae0c <USBH_HandleEnum>
 804abdc:	4603      	mov	r3, r0
 804abde:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 804abe0:	7bbb      	ldrb	r3, [r7, #14]
 804abe2:	b2db      	uxtb	r3, r3
 804abe4:	2b00      	cmp	r3, #0
 804abe6:	f040 80fe 	bne.w	804ade6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 804abea:	687b      	ldr	r3, [r7, #4]
 804abec:	2200      	movs	r2, #0
 804abee:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 804abf2:	687b      	ldr	r3, [r7, #4]
 804abf4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 804abf8:	2b01      	cmp	r3, #1
 804abfa:	d103      	bne.n	804ac04 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 804abfc:	687b      	ldr	r3, [r7, #4]
 804abfe:	2208      	movs	r2, #8
 804ac00:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804ac02:	e0f0      	b.n	804ade6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 804ac04:	687b      	ldr	r3, [r7, #4]
 804ac06:	2207      	movs	r2, #7
 804ac08:	701a      	strb	r2, [r3, #0]
      break;
 804ac0a:	e0ec      	b.n	804ade6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 804ac0c:	687b      	ldr	r3, [r7, #4]
 804ac0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804ac12:	2b00      	cmp	r3, #0
 804ac14:	f000 80e9 	beq.w	804adea <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 804ac18:	687b      	ldr	r3, [r7, #4]
 804ac1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804ac1e:	2101      	movs	r1, #1
 804ac20:	6878      	ldr	r0, [r7, #4]
 804ac22:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 804ac24:	687b      	ldr	r3, [r7, #4]
 804ac26:	2208      	movs	r2, #8
 804ac28:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 804ac2a:	e0de      	b.n	804adea <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 804ac2c:	687b      	ldr	r3, [r7, #4]
 804ac2e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 804ac32:	b29b      	uxth	r3, r3
 804ac34:	4619      	mov	r1, r3
 804ac36:	6878      	ldr	r0, [r7, #4]
 804ac38:	f000 fc2c 	bl	804b494 <USBH_SetCfg>
 804ac3c:	4603      	mov	r3, r0
 804ac3e:	2b00      	cmp	r3, #0
 804ac40:	f040 80d5 	bne.w	804adee <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 804ac44:	687b      	ldr	r3, [r7, #4]
 804ac46:	2209      	movs	r2, #9
 804ac48:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804ac4a:	e0d0      	b.n	804adee <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 804ac4c:	687b      	ldr	r3, [r7, #4]
 804ac4e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 804ac52:	f003 0320 	and.w	r3, r3, #32
 804ac56:	2b00      	cmp	r3, #0
 804ac58:	d016      	beq.n	804ac88 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 804ac5a:	2101      	movs	r1, #1
 804ac5c:	6878      	ldr	r0, [r7, #4]
 804ac5e:	f000 fc3c 	bl	804b4da <USBH_SetFeature>
 804ac62:	4603      	mov	r3, r0
 804ac64:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 804ac66:	7bbb      	ldrb	r3, [r7, #14]
 804ac68:	b2db      	uxtb	r3, r3
 804ac6a:	2b00      	cmp	r3, #0
 804ac6c:	d103      	bne.n	804ac76 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 804ac6e:	687b      	ldr	r3, [r7, #4]
 804ac70:	220a      	movs	r2, #10
 804ac72:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804ac74:	e0bd      	b.n	804adf2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 804ac76:	7bbb      	ldrb	r3, [r7, #14]
 804ac78:	b2db      	uxtb	r3, r3
 804ac7a:	2b03      	cmp	r3, #3
 804ac7c:	f040 80b9 	bne.w	804adf2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 804ac80:	687b      	ldr	r3, [r7, #4]
 804ac82:	220a      	movs	r2, #10
 804ac84:	701a      	strb	r2, [r3, #0]
      break;
 804ac86:	e0b4      	b.n	804adf2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 804ac88:	687b      	ldr	r3, [r7, #4]
 804ac8a:	220a      	movs	r2, #10
 804ac8c:	701a      	strb	r2, [r3, #0]
      break;
 804ac8e:	e0b0      	b.n	804adf2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 804ac90:	687b      	ldr	r3, [r7, #4]
 804ac92:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804ac96:	2b00      	cmp	r3, #0
 804ac98:	f000 80ad 	beq.w	804adf6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 804ac9c:	687b      	ldr	r3, [r7, #4]
 804ac9e:	2200      	movs	r2, #0
 804aca0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 804aca4:	2300      	movs	r3, #0
 804aca6:	73fb      	strb	r3, [r7, #15]
 804aca8:	e016      	b.n	804acd8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 804acaa:	7bfa      	ldrb	r2, [r7, #15]
 804acac:	687b      	ldr	r3, [r7, #4]
 804acae:	32de      	adds	r2, #222	; 0xde
 804acb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804acb4:	791a      	ldrb	r2, [r3, #4]
 804acb6:	687b      	ldr	r3, [r7, #4]
 804acb8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 804acbc:	429a      	cmp	r2, r3
 804acbe:	d108      	bne.n	804acd2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 804acc0:	7bfa      	ldrb	r2, [r7, #15]
 804acc2:	687b      	ldr	r3, [r7, #4]
 804acc4:	32de      	adds	r2, #222	; 0xde
 804acc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 804acca:	687b      	ldr	r3, [r7, #4]
 804accc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 804acd0:	e005      	b.n	804acde <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 804acd2:	7bfb      	ldrb	r3, [r7, #15]
 804acd4:	3301      	adds	r3, #1
 804acd6:	73fb      	strb	r3, [r7, #15]
 804acd8:	7bfb      	ldrb	r3, [r7, #15]
 804acda:	2b00      	cmp	r3, #0
 804acdc:	d0e5      	beq.n	804acaa <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 804acde:	687b      	ldr	r3, [r7, #4]
 804ace0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ace4:	2b00      	cmp	r3, #0
 804ace6:	d016      	beq.n	804ad16 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 804ace8:	687b      	ldr	r3, [r7, #4]
 804acea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804acee:	689b      	ldr	r3, [r3, #8]
 804acf0:	6878      	ldr	r0, [r7, #4]
 804acf2:	4798      	blx	r3
 804acf4:	4603      	mov	r3, r0
 804acf6:	2b00      	cmp	r3, #0
 804acf8:	d109      	bne.n	804ad0e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 804acfa:	687b      	ldr	r3, [r7, #4]
 804acfc:	2206      	movs	r2, #6
 804acfe:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 804ad00:	687b      	ldr	r3, [r7, #4]
 804ad02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804ad06:	2103      	movs	r1, #3
 804ad08:	6878      	ldr	r0, [r7, #4]
 804ad0a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804ad0c:	e073      	b.n	804adf6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 804ad0e:	687b      	ldr	r3, [r7, #4]
 804ad10:	220d      	movs	r2, #13
 804ad12:	701a      	strb	r2, [r3, #0]
      break;
 804ad14:	e06f      	b.n	804adf6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 804ad16:	687b      	ldr	r3, [r7, #4]
 804ad18:	220d      	movs	r2, #13
 804ad1a:	701a      	strb	r2, [r3, #0]
      break;
 804ad1c:	e06b      	b.n	804adf6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 804ad1e:	687b      	ldr	r3, [r7, #4]
 804ad20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ad24:	2b00      	cmp	r3, #0
 804ad26:	d017      	beq.n	804ad58 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 804ad28:	687b      	ldr	r3, [r7, #4]
 804ad2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ad2e:	691b      	ldr	r3, [r3, #16]
 804ad30:	6878      	ldr	r0, [r7, #4]
 804ad32:	4798      	blx	r3
 804ad34:	4603      	mov	r3, r0
 804ad36:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 804ad38:	7bbb      	ldrb	r3, [r7, #14]
 804ad3a:	b2db      	uxtb	r3, r3
 804ad3c:	2b00      	cmp	r3, #0
 804ad3e:	d103      	bne.n	804ad48 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 804ad40:	687b      	ldr	r3, [r7, #4]
 804ad42:	220b      	movs	r2, #11
 804ad44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804ad46:	e058      	b.n	804adfa <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 804ad48:	7bbb      	ldrb	r3, [r7, #14]
 804ad4a:	b2db      	uxtb	r3, r3
 804ad4c:	2b02      	cmp	r3, #2
 804ad4e:	d154      	bne.n	804adfa <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 804ad50:	687b      	ldr	r3, [r7, #4]
 804ad52:	220d      	movs	r2, #13
 804ad54:	701a      	strb	r2, [r3, #0]
      break;
 804ad56:	e050      	b.n	804adfa <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 804ad58:	687b      	ldr	r3, [r7, #4]
 804ad5a:	220d      	movs	r2, #13
 804ad5c:	701a      	strb	r2, [r3, #0]
      break;
 804ad5e:	e04c      	b.n	804adfa <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 804ad60:	687b      	ldr	r3, [r7, #4]
 804ad62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ad66:	2b00      	cmp	r3, #0
 804ad68:	d049      	beq.n	804adfe <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 804ad6a:	687b      	ldr	r3, [r7, #4]
 804ad6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ad70:	695b      	ldr	r3, [r3, #20]
 804ad72:	6878      	ldr	r0, [r7, #4]
 804ad74:	4798      	blx	r3
      }
      break;
 804ad76:	e042      	b.n	804adfe <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 804ad78:	687b      	ldr	r3, [r7, #4]
 804ad7a:	2200      	movs	r2, #0
 804ad7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 804ad80:	6878      	ldr	r0, [r7, #4]
 804ad82:	f7ff fd67 	bl	804a854 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 804ad86:	687b      	ldr	r3, [r7, #4]
 804ad88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ad8c:	2b00      	cmp	r3, #0
 804ad8e:	d009      	beq.n	804ada4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 804ad90:	687b      	ldr	r3, [r7, #4]
 804ad92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ad96:	68db      	ldr	r3, [r3, #12]
 804ad98:	6878      	ldr	r0, [r7, #4]
 804ad9a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 804ad9c:	687b      	ldr	r3, [r7, #4]
 804ad9e:	2200      	movs	r2, #0
 804ada0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 804ada4:	687b      	ldr	r3, [r7, #4]
 804ada6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804adaa:	2b00      	cmp	r3, #0
 804adac:	d005      	beq.n	804adba <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 804adae:	687b      	ldr	r3, [r7, #4]
 804adb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804adb4:	2105      	movs	r1, #5
 804adb6:	6878      	ldr	r0, [r7, #4]
 804adb8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 804adba:	687b      	ldr	r3, [r7, #4]
 804adbc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 804adc0:	b2db      	uxtb	r3, r3
 804adc2:	2b01      	cmp	r3, #1
 804adc4:	d107      	bne.n	804add6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 804adc6:	687b      	ldr	r3, [r7, #4]
 804adc8:	2200      	movs	r2, #0
 804adca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 804adce:	6878      	ldr	r0, [r7, #4]
 804add0:	f7ff fe20 	bl	804aa14 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804add4:	e014      	b.n	804ae00 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 804add6:	6878      	ldr	r0, [r7, #4]
 804add8:	f001 faaa 	bl	804c330 <USBH_LL_Start>
      break;
 804addc:	e010      	b.n	804ae00 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 804adde:	bf00      	nop
 804ade0:	e00e      	b.n	804ae00 <USBH_Process+0x3cc>
      break;
 804ade2:	bf00      	nop
 804ade4:	e00c      	b.n	804ae00 <USBH_Process+0x3cc>
      break;
 804ade6:	bf00      	nop
 804ade8:	e00a      	b.n	804ae00 <USBH_Process+0x3cc>
    break;
 804adea:	bf00      	nop
 804adec:	e008      	b.n	804ae00 <USBH_Process+0x3cc>
      break;
 804adee:	bf00      	nop
 804adf0:	e006      	b.n	804ae00 <USBH_Process+0x3cc>
      break;
 804adf2:	bf00      	nop
 804adf4:	e004      	b.n	804ae00 <USBH_Process+0x3cc>
      break;
 804adf6:	bf00      	nop
 804adf8:	e002      	b.n	804ae00 <USBH_Process+0x3cc>
      break;
 804adfa:	bf00      	nop
 804adfc:	e000      	b.n	804ae00 <USBH_Process+0x3cc>
      break;
 804adfe:	bf00      	nop
  }
  return USBH_OK;
 804ae00:	2300      	movs	r3, #0
}
 804ae02:	4618      	mov	r0, r3
 804ae04:	3710      	adds	r7, #16
 804ae06:	46bd      	mov	sp, r7
 804ae08:	bd80      	pop	{r7, pc}
 804ae0a:	bf00      	nop

0804ae0c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 804ae0c:	b580      	push	{r7, lr}
 804ae0e:	b088      	sub	sp, #32
 804ae10:	af04      	add	r7, sp, #16
 804ae12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 804ae14:	2301      	movs	r3, #1
 804ae16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 804ae18:	2301      	movs	r3, #1
 804ae1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 804ae1c:	687b      	ldr	r3, [r7, #4]
 804ae1e:	785b      	ldrb	r3, [r3, #1]
 804ae20:	2b07      	cmp	r3, #7
 804ae22:	f200 81c1 	bhi.w	804b1a8 <USBH_HandleEnum+0x39c>
 804ae26:	a201      	add	r2, pc, #4	; (adr r2, 804ae2c <USBH_HandleEnum+0x20>)
 804ae28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804ae2c:	0804ae4d 	.word	0x0804ae4d
 804ae30:	0804af0b 	.word	0x0804af0b
 804ae34:	0804af75 	.word	0x0804af75
 804ae38:	0804b003 	.word	0x0804b003
 804ae3c:	0804b06d 	.word	0x0804b06d
 804ae40:	0804b0dd 	.word	0x0804b0dd
 804ae44:	0804b123 	.word	0x0804b123
 804ae48:	0804b169 	.word	0x0804b169
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 804ae4c:	2108      	movs	r1, #8
 804ae4e:	6878      	ldr	r0, [r7, #4]
 804ae50:	f000 fa50 	bl	804b2f4 <USBH_Get_DevDesc>
 804ae54:	4603      	mov	r3, r0
 804ae56:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804ae58:	7bbb      	ldrb	r3, [r7, #14]
 804ae5a:	2b00      	cmp	r3, #0
 804ae5c:	d130      	bne.n	804aec0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 804ae5e:	687b      	ldr	r3, [r7, #4]
 804ae60:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 804ae64:	687b      	ldr	r3, [r7, #4]
 804ae66:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 804ae68:	687b      	ldr	r3, [r7, #4]
 804ae6a:	2201      	movs	r2, #1
 804ae6c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 804ae6e:	687b      	ldr	r3, [r7, #4]
 804ae70:	7919      	ldrb	r1, [r3, #4]
 804ae72:	687b      	ldr	r3, [r7, #4]
 804ae74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804ae78:	687b      	ldr	r3, [r7, #4]
 804ae7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804ae7e:	687a      	ldr	r2, [r7, #4]
 804ae80:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 804ae82:	b292      	uxth	r2, r2
 804ae84:	9202      	str	r2, [sp, #8]
 804ae86:	2200      	movs	r2, #0
 804ae88:	9201      	str	r2, [sp, #4]
 804ae8a:	9300      	str	r3, [sp, #0]
 804ae8c:	4603      	mov	r3, r0
 804ae8e:	2280      	movs	r2, #128	; 0x80
 804ae90:	6878      	ldr	r0, [r7, #4]
 804ae92:	f001 f865 	bl	804bf60 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804ae96:	687b      	ldr	r3, [r7, #4]
 804ae98:	7959      	ldrb	r1, [r3, #5]
 804ae9a:	687b      	ldr	r3, [r7, #4]
 804ae9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804aea0:	687b      	ldr	r3, [r7, #4]
 804aea2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804aea6:	687a      	ldr	r2, [r7, #4]
 804aea8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804aeaa:	b292      	uxth	r2, r2
 804aeac:	9202      	str	r2, [sp, #8]
 804aeae:	2200      	movs	r2, #0
 804aeb0:	9201      	str	r2, [sp, #4]
 804aeb2:	9300      	str	r3, [sp, #0]
 804aeb4:	4603      	mov	r3, r0
 804aeb6:	2200      	movs	r2, #0
 804aeb8:	6878      	ldr	r0, [r7, #4]
 804aeba:	f001 f851 	bl	804bf60 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 804aebe:	e175      	b.n	804b1ac <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804aec0:	7bbb      	ldrb	r3, [r7, #14]
 804aec2:	2b03      	cmp	r3, #3
 804aec4:	f040 8172 	bne.w	804b1ac <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 804aec8:	687b      	ldr	r3, [r7, #4]
 804aeca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804aece:	3301      	adds	r3, #1
 804aed0:	b2da      	uxtb	r2, r3
 804aed2:	687b      	ldr	r3, [r7, #4]
 804aed4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804aed8:	687b      	ldr	r3, [r7, #4]
 804aeda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804aede:	2b03      	cmp	r3, #3
 804aee0:	d903      	bls.n	804aeea <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 804aee2:	687b      	ldr	r3, [r7, #4]
 804aee4:	220d      	movs	r2, #13
 804aee6:	701a      	strb	r2, [r3, #0]
      break;
 804aee8:	e160      	b.n	804b1ac <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804aeea:	687b      	ldr	r3, [r7, #4]
 804aeec:	795b      	ldrb	r3, [r3, #5]
 804aeee:	4619      	mov	r1, r3
 804aef0:	6878      	ldr	r0, [r7, #4]
 804aef2:	f001 f885 	bl	804c000 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804aef6:	687b      	ldr	r3, [r7, #4]
 804aef8:	791b      	ldrb	r3, [r3, #4]
 804aefa:	4619      	mov	r1, r3
 804aefc:	6878      	ldr	r0, [r7, #4]
 804aefe:	f001 f87f 	bl	804c000 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 804af02:	687b      	ldr	r3, [r7, #4]
 804af04:	2200      	movs	r2, #0
 804af06:	701a      	strb	r2, [r3, #0]
      break;
 804af08:	e150      	b.n	804b1ac <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 804af0a:	2112      	movs	r1, #18
 804af0c:	6878      	ldr	r0, [r7, #4]
 804af0e:	f000 f9f1 	bl	804b2f4 <USBH_Get_DevDesc>
 804af12:	4603      	mov	r3, r0
 804af14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804af16:	7bbb      	ldrb	r3, [r7, #14]
 804af18:	2b00      	cmp	r3, #0
 804af1a:	d103      	bne.n	804af24 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 804af1c:	687b      	ldr	r3, [r7, #4]
 804af1e:	2202      	movs	r2, #2
 804af20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804af22:	e145      	b.n	804b1b0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804af24:	7bbb      	ldrb	r3, [r7, #14]
 804af26:	2b03      	cmp	r3, #3
 804af28:	f040 8142 	bne.w	804b1b0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 804af2c:	687b      	ldr	r3, [r7, #4]
 804af2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804af32:	3301      	adds	r3, #1
 804af34:	b2da      	uxtb	r2, r3
 804af36:	687b      	ldr	r3, [r7, #4]
 804af38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804af3c:	687b      	ldr	r3, [r7, #4]
 804af3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804af42:	2b03      	cmp	r3, #3
 804af44:	d903      	bls.n	804af4e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 804af46:	687b      	ldr	r3, [r7, #4]
 804af48:	220d      	movs	r2, #13
 804af4a:	701a      	strb	r2, [r3, #0]
      break;
 804af4c:	e130      	b.n	804b1b0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804af4e:	687b      	ldr	r3, [r7, #4]
 804af50:	795b      	ldrb	r3, [r3, #5]
 804af52:	4619      	mov	r1, r3
 804af54:	6878      	ldr	r0, [r7, #4]
 804af56:	f001 f853 	bl	804c000 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804af5a:	687b      	ldr	r3, [r7, #4]
 804af5c:	791b      	ldrb	r3, [r3, #4]
 804af5e:	4619      	mov	r1, r3
 804af60:	6878      	ldr	r0, [r7, #4]
 804af62:	f001 f84d 	bl	804c000 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804af66:	687b      	ldr	r3, [r7, #4]
 804af68:	2200      	movs	r2, #0
 804af6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804af6c:	687b      	ldr	r3, [r7, #4]
 804af6e:	2200      	movs	r2, #0
 804af70:	701a      	strb	r2, [r3, #0]
      break;
 804af72:	e11d      	b.n	804b1b0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 804af74:	2101      	movs	r1, #1
 804af76:	6878      	ldr	r0, [r7, #4]
 804af78:	f000 fa68 	bl	804b44c <USBH_SetAddress>
 804af7c:	4603      	mov	r3, r0
 804af7e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804af80:	7bbb      	ldrb	r3, [r7, #14]
 804af82:	2b00      	cmp	r3, #0
 804af84:	d132      	bne.n	804afec <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 804af86:	2002      	movs	r0, #2
 804af88:	f001 fb36 	bl	804c5f8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 804af8c:	687b      	ldr	r3, [r7, #4]
 804af8e:	2201      	movs	r2, #1
 804af90:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 804af94:	687b      	ldr	r3, [r7, #4]
 804af96:	2203      	movs	r2, #3
 804af98:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 804af9a:	687b      	ldr	r3, [r7, #4]
 804af9c:	7919      	ldrb	r1, [r3, #4]
 804af9e:	687b      	ldr	r3, [r7, #4]
 804afa0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804afa4:	687b      	ldr	r3, [r7, #4]
 804afa6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804afaa:	687a      	ldr	r2, [r7, #4]
 804afac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 804afae:	b292      	uxth	r2, r2
 804afb0:	9202      	str	r2, [sp, #8]
 804afb2:	2200      	movs	r2, #0
 804afb4:	9201      	str	r2, [sp, #4]
 804afb6:	9300      	str	r3, [sp, #0]
 804afb8:	4603      	mov	r3, r0
 804afba:	2280      	movs	r2, #128	; 0x80
 804afbc:	6878      	ldr	r0, [r7, #4]
 804afbe:	f000 ffcf 	bl	804bf60 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804afc2:	687b      	ldr	r3, [r7, #4]
 804afc4:	7959      	ldrb	r1, [r3, #5]
 804afc6:	687b      	ldr	r3, [r7, #4]
 804afc8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804afcc:	687b      	ldr	r3, [r7, #4]
 804afce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804afd2:	687a      	ldr	r2, [r7, #4]
 804afd4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804afd6:	b292      	uxth	r2, r2
 804afd8:	9202      	str	r2, [sp, #8]
 804afda:	2200      	movs	r2, #0
 804afdc:	9201      	str	r2, [sp, #4]
 804afde:	9300      	str	r3, [sp, #0]
 804afe0:	4603      	mov	r3, r0
 804afe2:	2200      	movs	r2, #0
 804afe4:	6878      	ldr	r0, [r7, #4]
 804afe6:	f000 ffbb 	bl	804bf60 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 804afea:	e0e3      	b.n	804b1b4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804afec:	7bbb      	ldrb	r3, [r7, #14]
 804afee:	2b03      	cmp	r3, #3
 804aff0:	f040 80e0 	bne.w	804b1b4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 804aff4:	687b      	ldr	r3, [r7, #4]
 804aff6:	220d      	movs	r2, #13
 804aff8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 804affa:	687b      	ldr	r3, [r7, #4]
 804affc:	2200      	movs	r2, #0
 804affe:	705a      	strb	r2, [r3, #1]
      break;
 804b000:	e0d8      	b.n	804b1b4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 804b002:	2109      	movs	r1, #9
 804b004:	6878      	ldr	r0, [r7, #4]
 804b006:	f000 f99d 	bl	804b344 <USBH_Get_CfgDesc>
 804b00a:	4603      	mov	r3, r0
 804b00c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804b00e:	7bbb      	ldrb	r3, [r7, #14]
 804b010:	2b00      	cmp	r3, #0
 804b012:	d103      	bne.n	804b01c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 804b014:	687b      	ldr	r3, [r7, #4]
 804b016:	2204      	movs	r2, #4
 804b018:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804b01a:	e0cd      	b.n	804b1b8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b01c:	7bbb      	ldrb	r3, [r7, #14]
 804b01e:	2b03      	cmp	r3, #3
 804b020:	f040 80ca 	bne.w	804b1b8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 804b024:	687b      	ldr	r3, [r7, #4]
 804b026:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b02a:	3301      	adds	r3, #1
 804b02c:	b2da      	uxtb	r2, r3
 804b02e:	687b      	ldr	r3, [r7, #4]
 804b030:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804b034:	687b      	ldr	r3, [r7, #4]
 804b036:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b03a:	2b03      	cmp	r3, #3
 804b03c:	d903      	bls.n	804b046 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 804b03e:	687b      	ldr	r3, [r7, #4]
 804b040:	220d      	movs	r2, #13
 804b042:	701a      	strb	r2, [r3, #0]
      break;
 804b044:	e0b8      	b.n	804b1b8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804b046:	687b      	ldr	r3, [r7, #4]
 804b048:	795b      	ldrb	r3, [r3, #5]
 804b04a:	4619      	mov	r1, r3
 804b04c:	6878      	ldr	r0, [r7, #4]
 804b04e:	f000 ffd7 	bl	804c000 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804b052:	687b      	ldr	r3, [r7, #4]
 804b054:	791b      	ldrb	r3, [r3, #4]
 804b056:	4619      	mov	r1, r3
 804b058:	6878      	ldr	r0, [r7, #4]
 804b05a:	f000 ffd1 	bl	804c000 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804b05e:	687b      	ldr	r3, [r7, #4]
 804b060:	2200      	movs	r2, #0
 804b062:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804b064:	687b      	ldr	r3, [r7, #4]
 804b066:	2200      	movs	r2, #0
 804b068:	701a      	strb	r2, [r3, #0]
      break;
 804b06a:	e0a5      	b.n	804b1b8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 804b06c:	687b      	ldr	r3, [r7, #4]
 804b06e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 804b072:	4619      	mov	r1, r3
 804b074:	6878      	ldr	r0, [r7, #4]
 804b076:	f000 f965 	bl	804b344 <USBH_Get_CfgDesc>
 804b07a:	4603      	mov	r3, r0
 804b07c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804b07e:	7bbb      	ldrb	r3, [r7, #14]
 804b080:	2b00      	cmp	r3, #0
 804b082:	d103      	bne.n	804b08c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 804b084:	687b      	ldr	r3, [r7, #4]
 804b086:	2205      	movs	r2, #5
 804b088:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804b08a:	e097      	b.n	804b1bc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b08c:	7bbb      	ldrb	r3, [r7, #14]
 804b08e:	2b03      	cmp	r3, #3
 804b090:	f040 8094 	bne.w	804b1bc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 804b094:	687b      	ldr	r3, [r7, #4]
 804b096:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b09a:	3301      	adds	r3, #1
 804b09c:	b2da      	uxtb	r2, r3
 804b09e:	687b      	ldr	r3, [r7, #4]
 804b0a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804b0a4:	687b      	ldr	r3, [r7, #4]
 804b0a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b0aa:	2b03      	cmp	r3, #3
 804b0ac:	d903      	bls.n	804b0b6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 804b0ae:	687b      	ldr	r3, [r7, #4]
 804b0b0:	220d      	movs	r2, #13
 804b0b2:	701a      	strb	r2, [r3, #0]
      break;
 804b0b4:	e082      	b.n	804b1bc <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804b0b6:	687b      	ldr	r3, [r7, #4]
 804b0b8:	795b      	ldrb	r3, [r3, #5]
 804b0ba:	4619      	mov	r1, r3
 804b0bc:	6878      	ldr	r0, [r7, #4]
 804b0be:	f000 ff9f 	bl	804c000 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804b0c2:	687b      	ldr	r3, [r7, #4]
 804b0c4:	791b      	ldrb	r3, [r3, #4]
 804b0c6:	4619      	mov	r1, r3
 804b0c8:	6878      	ldr	r0, [r7, #4]
 804b0ca:	f000 ff99 	bl	804c000 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804b0ce:	687b      	ldr	r3, [r7, #4]
 804b0d0:	2200      	movs	r2, #0
 804b0d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804b0d4:	687b      	ldr	r3, [r7, #4]
 804b0d6:	2200      	movs	r2, #0
 804b0d8:	701a      	strb	r2, [r3, #0]
      break;
 804b0da:	e06f      	b.n	804b1bc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 804b0dc:	687b      	ldr	r3, [r7, #4]
 804b0de:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 804b0e2:	2b00      	cmp	r3, #0
 804b0e4:	d019      	beq.n	804b11a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 804b0e6:	687b      	ldr	r3, [r7, #4]
 804b0e8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 804b0ec:	687b      	ldr	r3, [r7, #4]
 804b0ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 804b0f2:	23ff      	movs	r3, #255	; 0xff
 804b0f4:	6878      	ldr	r0, [r7, #4]
 804b0f6:	f000 f949 	bl	804b38c <USBH_Get_StringDesc>
 804b0fa:	4603      	mov	r3, r0
 804b0fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804b0fe:	7bbb      	ldrb	r3, [r7, #14]
 804b100:	2b00      	cmp	r3, #0
 804b102:	d103      	bne.n	804b10c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804b104:	687b      	ldr	r3, [r7, #4]
 804b106:	2206      	movs	r2, #6
 804b108:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804b10a:	e059      	b.n	804b1c0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b10c:	7bbb      	ldrb	r3, [r7, #14]
 804b10e:	2b03      	cmp	r3, #3
 804b110:	d156      	bne.n	804b1c0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804b112:	687b      	ldr	r3, [r7, #4]
 804b114:	2206      	movs	r2, #6
 804b116:	705a      	strb	r2, [r3, #1]
      break;
 804b118:	e052      	b.n	804b1c0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804b11a:	687b      	ldr	r3, [r7, #4]
 804b11c:	2206      	movs	r2, #6
 804b11e:	705a      	strb	r2, [r3, #1]
      break;
 804b120:	e04e      	b.n	804b1c0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 804b122:	687b      	ldr	r3, [r7, #4]
 804b124:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 804b128:	2b00      	cmp	r3, #0
 804b12a:	d019      	beq.n	804b160 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 804b12c:	687b      	ldr	r3, [r7, #4]
 804b12e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 804b132:	687b      	ldr	r3, [r7, #4]
 804b134:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 804b138:	23ff      	movs	r3, #255	; 0xff
 804b13a:	6878      	ldr	r0, [r7, #4]
 804b13c:	f000 f926 	bl	804b38c <USBH_Get_StringDesc>
 804b140:	4603      	mov	r3, r0
 804b142:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804b144:	7bbb      	ldrb	r3, [r7, #14]
 804b146:	2b00      	cmp	r3, #0
 804b148:	d103      	bne.n	804b152 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804b14a:	687b      	ldr	r3, [r7, #4]
 804b14c:	2207      	movs	r2, #7
 804b14e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804b150:	e038      	b.n	804b1c4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b152:	7bbb      	ldrb	r3, [r7, #14]
 804b154:	2b03      	cmp	r3, #3
 804b156:	d135      	bne.n	804b1c4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804b158:	687b      	ldr	r3, [r7, #4]
 804b15a:	2207      	movs	r2, #7
 804b15c:	705a      	strb	r2, [r3, #1]
      break;
 804b15e:	e031      	b.n	804b1c4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804b160:	687b      	ldr	r3, [r7, #4]
 804b162:	2207      	movs	r2, #7
 804b164:	705a      	strb	r2, [r3, #1]
      break;
 804b166:	e02d      	b.n	804b1c4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 804b168:	687b      	ldr	r3, [r7, #4]
 804b16a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 804b16e:	2b00      	cmp	r3, #0
 804b170:	d017      	beq.n	804b1a2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 804b172:	687b      	ldr	r3, [r7, #4]
 804b174:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 804b178:	687b      	ldr	r3, [r7, #4]
 804b17a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 804b17e:	23ff      	movs	r3, #255	; 0xff
 804b180:	6878      	ldr	r0, [r7, #4]
 804b182:	f000 f903 	bl	804b38c <USBH_Get_StringDesc>
 804b186:	4603      	mov	r3, r0
 804b188:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804b18a:	7bbb      	ldrb	r3, [r7, #14]
 804b18c:	2b00      	cmp	r3, #0
 804b18e:	d102      	bne.n	804b196 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 804b190:	2300      	movs	r3, #0
 804b192:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 804b194:	e018      	b.n	804b1c8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b196:	7bbb      	ldrb	r3, [r7, #14]
 804b198:	2b03      	cmp	r3, #3
 804b19a:	d115      	bne.n	804b1c8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 804b19c:	2300      	movs	r3, #0
 804b19e:	73fb      	strb	r3, [r7, #15]
      break;
 804b1a0:	e012      	b.n	804b1c8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 804b1a2:	2300      	movs	r3, #0
 804b1a4:	73fb      	strb	r3, [r7, #15]
      break;
 804b1a6:	e00f      	b.n	804b1c8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 804b1a8:	bf00      	nop
 804b1aa:	e00e      	b.n	804b1ca <USBH_HandleEnum+0x3be>
      break;
 804b1ac:	bf00      	nop
 804b1ae:	e00c      	b.n	804b1ca <USBH_HandleEnum+0x3be>
      break;
 804b1b0:	bf00      	nop
 804b1b2:	e00a      	b.n	804b1ca <USBH_HandleEnum+0x3be>
      break;
 804b1b4:	bf00      	nop
 804b1b6:	e008      	b.n	804b1ca <USBH_HandleEnum+0x3be>
      break;
 804b1b8:	bf00      	nop
 804b1ba:	e006      	b.n	804b1ca <USBH_HandleEnum+0x3be>
      break;
 804b1bc:	bf00      	nop
 804b1be:	e004      	b.n	804b1ca <USBH_HandleEnum+0x3be>
      break;
 804b1c0:	bf00      	nop
 804b1c2:	e002      	b.n	804b1ca <USBH_HandleEnum+0x3be>
      break;
 804b1c4:	bf00      	nop
 804b1c6:	e000      	b.n	804b1ca <USBH_HandleEnum+0x3be>
      break;
 804b1c8:	bf00      	nop
  }
  return Status;
 804b1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 804b1cc:	4618      	mov	r0, r3
 804b1ce:	3710      	adds	r7, #16
 804b1d0:	46bd      	mov	sp, r7
 804b1d2:	bd80      	pop	{r7, pc}

0804b1d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 804b1d4:	b480      	push	{r7}
 804b1d6:	b083      	sub	sp, #12
 804b1d8:	af00      	add	r7, sp, #0
 804b1da:	6078      	str	r0, [r7, #4]
 804b1dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 804b1de:	687b      	ldr	r3, [r7, #4]
 804b1e0:	683a      	ldr	r2, [r7, #0]
 804b1e2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 804b1e6:	bf00      	nop
 804b1e8:	370c      	adds	r7, #12
 804b1ea:	46bd      	mov	sp, r7
 804b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b1f0:	4770      	bx	lr

0804b1f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 804b1f2:	b580      	push	{r7, lr}
 804b1f4:	b082      	sub	sp, #8
 804b1f6:	af00      	add	r7, sp, #0
 804b1f8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 804b1fa:	687b      	ldr	r3, [r7, #4]
 804b1fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804b200:	1c5a      	adds	r2, r3, #1
 804b202:	687b      	ldr	r3, [r7, #4]
 804b204:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 804b208:	6878      	ldr	r0, [r7, #4]
 804b20a:	f000 f804 	bl	804b216 <USBH_HandleSof>
}
 804b20e:	bf00      	nop
 804b210:	3708      	adds	r7, #8
 804b212:	46bd      	mov	sp, r7
 804b214:	bd80      	pop	{r7, pc}

0804b216 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 804b216:	b580      	push	{r7, lr}
 804b218:	b082      	sub	sp, #8
 804b21a:	af00      	add	r7, sp, #0
 804b21c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 804b21e:	687b      	ldr	r3, [r7, #4]
 804b220:	781b      	ldrb	r3, [r3, #0]
 804b222:	b2db      	uxtb	r3, r3
 804b224:	2b0b      	cmp	r3, #11
 804b226:	d10a      	bne.n	804b23e <USBH_HandleSof+0x28>
 804b228:	687b      	ldr	r3, [r7, #4]
 804b22a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b22e:	2b00      	cmp	r3, #0
 804b230:	d005      	beq.n	804b23e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 804b232:	687b      	ldr	r3, [r7, #4]
 804b234:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b238:	699b      	ldr	r3, [r3, #24]
 804b23a:	6878      	ldr	r0, [r7, #4]
 804b23c:	4798      	blx	r3
  }
}
 804b23e:	bf00      	nop
 804b240:	3708      	adds	r7, #8
 804b242:	46bd      	mov	sp, r7
 804b244:	bd80      	pop	{r7, pc}

0804b246 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 804b246:	b480      	push	{r7}
 804b248:	b083      	sub	sp, #12
 804b24a:	af00      	add	r7, sp, #0
 804b24c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 804b24e:	687b      	ldr	r3, [r7, #4]
 804b250:	2201      	movs	r2, #1
 804b252:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 804b256:	bf00      	nop
}
 804b258:	370c      	adds	r7, #12
 804b25a:	46bd      	mov	sp, r7
 804b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b260:	4770      	bx	lr

0804b262 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 804b262:	b480      	push	{r7}
 804b264:	b083      	sub	sp, #12
 804b266:	af00      	add	r7, sp, #0
 804b268:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 804b26a:	687b      	ldr	r3, [r7, #4]
 804b26c:	2200      	movs	r2, #0
 804b26e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 804b272:	bf00      	nop
}
 804b274:	370c      	adds	r7, #12
 804b276:	46bd      	mov	sp, r7
 804b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b27c:	4770      	bx	lr

0804b27e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 804b27e:	b480      	push	{r7}
 804b280:	b083      	sub	sp, #12
 804b282:	af00      	add	r7, sp, #0
 804b284:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 804b286:	687b      	ldr	r3, [r7, #4]
 804b288:	2201      	movs	r2, #1
 804b28a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 804b28e:	687b      	ldr	r3, [r7, #4]
 804b290:	2200      	movs	r2, #0
 804b292:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 804b296:	687b      	ldr	r3, [r7, #4]
 804b298:	2200      	movs	r2, #0
 804b29a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 804b29e:	2300      	movs	r3, #0
}
 804b2a0:	4618      	mov	r0, r3
 804b2a2:	370c      	adds	r7, #12
 804b2a4:	46bd      	mov	sp, r7
 804b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b2aa:	4770      	bx	lr

0804b2ac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 804b2ac:	b580      	push	{r7, lr}
 804b2ae:	b082      	sub	sp, #8
 804b2b0:	af00      	add	r7, sp, #0
 804b2b2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 804b2b4:	687b      	ldr	r3, [r7, #4]
 804b2b6:	2201      	movs	r2, #1
 804b2b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 804b2bc:	687b      	ldr	r3, [r7, #4]
 804b2be:	2200      	movs	r2, #0
 804b2c0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 804b2c4:	687b      	ldr	r3, [r7, #4]
 804b2c6:	2200      	movs	r2, #0
 804b2c8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 804b2cc:	6878      	ldr	r0, [r7, #4]
 804b2ce:	f001 f84a 	bl	804c366 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804b2d2:	687b      	ldr	r3, [r7, #4]
 804b2d4:	791b      	ldrb	r3, [r3, #4]
 804b2d6:	4619      	mov	r1, r3
 804b2d8:	6878      	ldr	r0, [r7, #4]
 804b2da:	f000 fe91 	bl	804c000 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804b2de:	687b      	ldr	r3, [r7, #4]
 804b2e0:	795b      	ldrb	r3, [r3, #5]
 804b2e2:	4619      	mov	r1, r3
 804b2e4:	6878      	ldr	r0, [r7, #4]
 804b2e6:	f000 fe8b 	bl	804c000 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 804b2ea:	2300      	movs	r3, #0
}
 804b2ec:	4618      	mov	r0, r3
 804b2ee:	3708      	adds	r7, #8
 804b2f0:	46bd      	mov	sp, r7
 804b2f2:	bd80      	pop	{r7, pc}

0804b2f4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 804b2f4:	b580      	push	{r7, lr}
 804b2f6:	b086      	sub	sp, #24
 804b2f8:	af02      	add	r7, sp, #8
 804b2fa:	6078      	str	r0, [r7, #4]
 804b2fc:	460b      	mov	r3, r1
 804b2fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 804b300:	687b      	ldr	r3, [r7, #4]
 804b302:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 804b306:	78fb      	ldrb	r3, [r7, #3]
 804b308:	b29b      	uxth	r3, r3
 804b30a:	9300      	str	r3, [sp, #0]
 804b30c:	4613      	mov	r3, r2
 804b30e:	f44f 7280 	mov.w	r2, #256	; 0x100
 804b312:	2100      	movs	r1, #0
 804b314:	6878      	ldr	r0, [r7, #4]
 804b316:	f000 f864 	bl	804b3e2 <USBH_GetDescriptor>
 804b31a:	4603      	mov	r3, r0
 804b31c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 804b31e:	7bfb      	ldrb	r3, [r7, #15]
 804b320:	2b00      	cmp	r3, #0
 804b322:	d10a      	bne.n	804b33a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 804b324:	687b      	ldr	r3, [r7, #4]
 804b326:	f203 3026 	addw	r0, r3, #806	; 0x326
 804b32a:	687b      	ldr	r3, [r7, #4]
 804b32c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804b330:	78fa      	ldrb	r2, [r7, #3]
 804b332:	b292      	uxth	r2, r2
 804b334:	4619      	mov	r1, r3
 804b336:	f000 f918 	bl	804b56a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 804b33a:	7bfb      	ldrb	r3, [r7, #15]
}
 804b33c:	4618      	mov	r0, r3
 804b33e:	3710      	adds	r7, #16
 804b340:	46bd      	mov	sp, r7
 804b342:	bd80      	pop	{r7, pc}

0804b344 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 804b344:	b580      	push	{r7, lr}
 804b346:	b086      	sub	sp, #24
 804b348:	af02      	add	r7, sp, #8
 804b34a:	6078      	str	r0, [r7, #4]
 804b34c:	460b      	mov	r3, r1
 804b34e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 804b350:	687b      	ldr	r3, [r7, #4]
 804b352:	331c      	adds	r3, #28
 804b354:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 804b356:	887b      	ldrh	r3, [r7, #2]
 804b358:	9300      	str	r3, [sp, #0]
 804b35a:	68bb      	ldr	r3, [r7, #8]
 804b35c:	f44f 7200 	mov.w	r2, #512	; 0x200
 804b360:	2100      	movs	r1, #0
 804b362:	6878      	ldr	r0, [r7, #4]
 804b364:	f000 f83d 	bl	804b3e2 <USBH_GetDescriptor>
 804b368:	4603      	mov	r3, r0
 804b36a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 804b36c:	7bfb      	ldrb	r3, [r7, #15]
 804b36e:	2b00      	cmp	r3, #0
 804b370:	d107      	bne.n	804b382 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 804b372:	887b      	ldrh	r3, [r7, #2]
 804b374:	461a      	mov	r2, r3
 804b376:	68b9      	ldr	r1, [r7, #8]
 804b378:	6878      	ldr	r0, [r7, #4]
 804b37a:	f000 f987 	bl	804b68c <USBH_ParseCfgDesc>
 804b37e:	4603      	mov	r3, r0
 804b380:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804b382:	7bfb      	ldrb	r3, [r7, #15]
}
 804b384:	4618      	mov	r0, r3
 804b386:	3710      	adds	r7, #16
 804b388:	46bd      	mov	sp, r7
 804b38a:	bd80      	pop	{r7, pc}

0804b38c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 804b38c:	b580      	push	{r7, lr}
 804b38e:	b088      	sub	sp, #32
 804b390:	af02      	add	r7, sp, #8
 804b392:	60f8      	str	r0, [r7, #12]
 804b394:	607a      	str	r2, [r7, #4]
 804b396:	461a      	mov	r2, r3
 804b398:	460b      	mov	r3, r1
 804b39a:	72fb      	strb	r3, [r7, #11]
 804b39c:	4613      	mov	r3, r2
 804b39e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 804b3a0:	7afb      	ldrb	r3, [r7, #11]
 804b3a2:	b29b      	uxth	r3, r3
 804b3a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 804b3a8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 804b3aa:	68fb      	ldr	r3, [r7, #12]
 804b3ac:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 804b3b0:	893b      	ldrh	r3, [r7, #8]
 804b3b2:	9300      	str	r3, [sp, #0]
 804b3b4:	460b      	mov	r3, r1
 804b3b6:	2100      	movs	r1, #0
 804b3b8:	68f8      	ldr	r0, [r7, #12]
 804b3ba:	f000 f812 	bl	804b3e2 <USBH_GetDescriptor>
 804b3be:	4603      	mov	r3, r0
 804b3c0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 804b3c2:	7dfb      	ldrb	r3, [r7, #23]
 804b3c4:	2b00      	cmp	r3, #0
 804b3c6:	d107      	bne.n	804b3d8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 804b3c8:	68fb      	ldr	r3, [r7, #12]
 804b3ca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804b3ce:	893a      	ldrh	r2, [r7, #8]
 804b3d0:	6879      	ldr	r1, [r7, #4]
 804b3d2:	4618      	mov	r0, r3
 804b3d4:	f000 fb24 	bl	804ba20 <USBH_ParseStringDesc>
  }

  return status;
 804b3d8:	7dfb      	ldrb	r3, [r7, #23]
}
 804b3da:	4618      	mov	r0, r3
 804b3dc:	3718      	adds	r7, #24
 804b3de:	46bd      	mov	sp, r7
 804b3e0:	bd80      	pop	{r7, pc}

0804b3e2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 804b3e2:	b580      	push	{r7, lr}
 804b3e4:	b084      	sub	sp, #16
 804b3e6:	af00      	add	r7, sp, #0
 804b3e8:	60f8      	str	r0, [r7, #12]
 804b3ea:	607b      	str	r3, [r7, #4]
 804b3ec:	460b      	mov	r3, r1
 804b3ee:	72fb      	strb	r3, [r7, #11]
 804b3f0:	4613      	mov	r3, r2
 804b3f2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 804b3f4:	68fb      	ldr	r3, [r7, #12]
 804b3f6:	789b      	ldrb	r3, [r3, #2]
 804b3f8:	2b01      	cmp	r3, #1
 804b3fa:	d11c      	bne.n	804b436 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 804b3fc:	7afb      	ldrb	r3, [r7, #11]
 804b3fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 804b402:	b2da      	uxtb	r2, r3
 804b404:	68fb      	ldr	r3, [r7, #12]
 804b406:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 804b408:	68fb      	ldr	r3, [r7, #12]
 804b40a:	2206      	movs	r2, #6
 804b40c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 804b40e:	68fb      	ldr	r3, [r7, #12]
 804b410:	893a      	ldrh	r2, [r7, #8]
 804b412:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 804b414:	893b      	ldrh	r3, [r7, #8]
 804b416:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 804b41a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804b41e:	d104      	bne.n	804b42a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 804b420:	68fb      	ldr	r3, [r7, #12]
 804b422:	f240 4209 	movw	r2, #1033	; 0x409
 804b426:	829a      	strh	r2, [r3, #20]
 804b428:	e002      	b.n	804b430 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 804b42a:	68fb      	ldr	r3, [r7, #12]
 804b42c:	2200      	movs	r2, #0
 804b42e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 804b430:	68fb      	ldr	r3, [r7, #12]
 804b432:	8b3a      	ldrh	r2, [r7, #24]
 804b434:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 804b436:	8b3b      	ldrh	r3, [r7, #24]
 804b438:	461a      	mov	r2, r3
 804b43a:	6879      	ldr	r1, [r7, #4]
 804b43c:	68f8      	ldr	r0, [r7, #12]
 804b43e:	f000 fb3d 	bl	804babc <USBH_CtlReq>
 804b442:	4603      	mov	r3, r0
}
 804b444:	4618      	mov	r0, r3
 804b446:	3710      	adds	r7, #16
 804b448:	46bd      	mov	sp, r7
 804b44a:	bd80      	pop	{r7, pc}

0804b44c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 804b44c:	b580      	push	{r7, lr}
 804b44e:	b082      	sub	sp, #8
 804b450:	af00      	add	r7, sp, #0
 804b452:	6078      	str	r0, [r7, #4]
 804b454:	460b      	mov	r3, r1
 804b456:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804b458:	687b      	ldr	r3, [r7, #4]
 804b45a:	789b      	ldrb	r3, [r3, #2]
 804b45c:	2b01      	cmp	r3, #1
 804b45e:	d10f      	bne.n	804b480 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 804b460:	687b      	ldr	r3, [r7, #4]
 804b462:	2200      	movs	r2, #0
 804b464:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 804b466:	687b      	ldr	r3, [r7, #4]
 804b468:	2205      	movs	r2, #5
 804b46a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 804b46c:	78fb      	ldrb	r3, [r7, #3]
 804b46e:	b29a      	uxth	r2, r3
 804b470:	687b      	ldr	r3, [r7, #4]
 804b472:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804b474:	687b      	ldr	r3, [r7, #4]
 804b476:	2200      	movs	r2, #0
 804b478:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804b47a:	687b      	ldr	r3, [r7, #4]
 804b47c:	2200      	movs	r2, #0
 804b47e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804b480:	2200      	movs	r2, #0
 804b482:	2100      	movs	r1, #0
 804b484:	6878      	ldr	r0, [r7, #4]
 804b486:	f000 fb19 	bl	804babc <USBH_CtlReq>
 804b48a:	4603      	mov	r3, r0
}
 804b48c:	4618      	mov	r0, r3
 804b48e:	3708      	adds	r7, #8
 804b490:	46bd      	mov	sp, r7
 804b492:	bd80      	pop	{r7, pc}

0804b494 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 804b494:	b580      	push	{r7, lr}
 804b496:	b082      	sub	sp, #8
 804b498:	af00      	add	r7, sp, #0
 804b49a:	6078      	str	r0, [r7, #4]
 804b49c:	460b      	mov	r3, r1
 804b49e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 804b4a0:	687b      	ldr	r3, [r7, #4]
 804b4a2:	789b      	ldrb	r3, [r3, #2]
 804b4a4:	2b01      	cmp	r3, #1
 804b4a6:	d10e      	bne.n	804b4c6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 804b4a8:	687b      	ldr	r3, [r7, #4]
 804b4aa:	2200      	movs	r2, #0
 804b4ac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 804b4ae:	687b      	ldr	r3, [r7, #4]
 804b4b0:	2209      	movs	r2, #9
 804b4b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 804b4b4:	687b      	ldr	r3, [r7, #4]
 804b4b6:	887a      	ldrh	r2, [r7, #2]
 804b4b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804b4ba:	687b      	ldr	r3, [r7, #4]
 804b4bc:	2200      	movs	r2, #0
 804b4be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804b4c0:	687b      	ldr	r3, [r7, #4]
 804b4c2:	2200      	movs	r2, #0
 804b4c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804b4c6:	2200      	movs	r2, #0
 804b4c8:	2100      	movs	r1, #0
 804b4ca:	6878      	ldr	r0, [r7, #4]
 804b4cc:	f000 faf6 	bl	804babc <USBH_CtlReq>
 804b4d0:	4603      	mov	r3, r0
}
 804b4d2:	4618      	mov	r0, r3
 804b4d4:	3708      	adds	r7, #8
 804b4d6:	46bd      	mov	sp, r7
 804b4d8:	bd80      	pop	{r7, pc}

0804b4da <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 804b4da:	b580      	push	{r7, lr}
 804b4dc:	b082      	sub	sp, #8
 804b4de:	af00      	add	r7, sp, #0
 804b4e0:	6078      	str	r0, [r7, #4]
 804b4e2:	460b      	mov	r3, r1
 804b4e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804b4e6:	687b      	ldr	r3, [r7, #4]
 804b4e8:	789b      	ldrb	r3, [r3, #2]
 804b4ea:	2b01      	cmp	r3, #1
 804b4ec:	d10f      	bne.n	804b50e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 804b4ee:	687b      	ldr	r3, [r7, #4]
 804b4f0:	2200      	movs	r2, #0
 804b4f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 804b4f4:	687b      	ldr	r3, [r7, #4]
 804b4f6:	2203      	movs	r2, #3
 804b4f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 804b4fa:	78fb      	ldrb	r3, [r7, #3]
 804b4fc:	b29a      	uxth	r2, r3
 804b4fe:	687b      	ldr	r3, [r7, #4]
 804b500:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804b502:	687b      	ldr	r3, [r7, #4]
 804b504:	2200      	movs	r2, #0
 804b506:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804b508:	687b      	ldr	r3, [r7, #4]
 804b50a:	2200      	movs	r2, #0
 804b50c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804b50e:	2200      	movs	r2, #0
 804b510:	2100      	movs	r1, #0
 804b512:	6878      	ldr	r0, [r7, #4]
 804b514:	f000 fad2 	bl	804babc <USBH_CtlReq>
 804b518:	4603      	mov	r3, r0
}
 804b51a:	4618      	mov	r0, r3
 804b51c:	3708      	adds	r7, #8
 804b51e:	46bd      	mov	sp, r7
 804b520:	bd80      	pop	{r7, pc}

0804b522 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 804b522:	b580      	push	{r7, lr}
 804b524:	b082      	sub	sp, #8
 804b526:	af00      	add	r7, sp, #0
 804b528:	6078      	str	r0, [r7, #4]
 804b52a:	460b      	mov	r3, r1
 804b52c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804b52e:	687b      	ldr	r3, [r7, #4]
 804b530:	789b      	ldrb	r3, [r3, #2]
 804b532:	2b01      	cmp	r3, #1
 804b534:	d10f      	bne.n	804b556 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 804b536:	687b      	ldr	r3, [r7, #4]
 804b538:	2202      	movs	r2, #2
 804b53a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 804b53c:	687b      	ldr	r3, [r7, #4]
 804b53e:	2201      	movs	r2, #1
 804b540:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 804b542:	687b      	ldr	r3, [r7, #4]
 804b544:	2200      	movs	r2, #0
 804b546:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 804b548:	78fb      	ldrb	r3, [r7, #3]
 804b54a:	b29a      	uxth	r2, r3
 804b54c:	687b      	ldr	r3, [r7, #4]
 804b54e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804b550:	687b      	ldr	r3, [r7, #4]
 804b552:	2200      	movs	r2, #0
 804b554:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 804b556:	2200      	movs	r2, #0
 804b558:	2100      	movs	r1, #0
 804b55a:	6878      	ldr	r0, [r7, #4]
 804b55c:	f000 faae 	bl	804babc <USBH_CtlReq>
 804b560:	4603      	mov	r3, r0
}
 804b562:	4618      	mov	r0, r3
 804b564:	3708      	adds	r7, #8
 804b566:	46bd      	mov	sp, r7
 804b568:	bd80      	pop	{r7, pc}

0804b56a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 804b56a:	b480      	push	{r7}
 804b56c:	b085      	sub	sp, #20
 804b56e:	af00      	add	r7, sp, #0
 804b570:	60f8      	str	r0, [r7, #12]
 804b572:	60b9      	str	r1, [r7, #8]
 804b574:	4613      	mov	r3, r2
 804b576:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 804b578:	68bb      	ldr	r3, [r7, #8]
 804b57a:	781a      	ldrb	r2, [r3, #0]
 804b57c:	68fb      	ldr	r3, [r7, #12]
 804b57e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 804b580:	68bb      	ldr	r3, [r7, #8]
 804b582:	785a      	ldrb	r2, [r3, #1]
 804b584:	68fb      	ldr	r3, [r7, #12]
 804b586:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 804b588:	68bb      	ldr	r3, [r7, #8]
 804b58a:	3302      	adds	r3, #2
 804b58c:	781b      	ldrb	r3, [r3, #0]
 804b58e:	b29a      	uxth	r2, r3
 804b590:	68bb      	ldr	r3, [r7, #8]
 804b592:	3303      	adds	r3, #3
 804b594:	781b      	ldrb	r3, [r3, #0]
 804b596:	b29b      	uxth	r3, r3
 804b598:	021b      	lsls	r3, r3, #8
 804b59a:	b29b      	uxth	r3, r3
 804b59c:	4313      	orrs	r3, r2
 804b59e:	b29a      	uxth	r2, r3
 804b5a0:	68fb      	ldr	r3, [r7, #12]
 804b5a2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 804b5a4:	68bb      	ldr	r3, [r7, #8]
 804b5a6:	791a      	ldrb	r2, [r3, #4]
 804b5a8:	68fb      	ldr	r3, [r7, #12]
 804b5aa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 804b5ac:	68bb      	ldr	r3, [r7, #8]
 804b5ae:	795a      	ldrb	r2, [r3, #5]
 804b5b0:	68fb      	ldr	r3, [r7, #12]
 804b5b2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 804b5b4:	68bb      	ldr	r3, [r7, #8]
 804b5b6:	799a      	ldrb	r2, [r3, #6]
 804b5b8:	68fb      	ldr	r3, [r7, #12]
 804b5ba:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 804b5bc:	68bb      	ldr	r3, [r7, #8]
 804b5be:	79da      	ldrb	r2, [r3, #7]
 804b5c0:	68fb      	ldr	r3, [r7, #12]
 804b5c2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 804b5c4:	68fb      	ldr	r3, [r7, #12]
 804b5c6:	79db      	ldrb	r3, [r3, #7]
 804b5c8:	2b20      	cmp	r3, #32
 804b5ca:	dc11      	bgt.n	804b5f0 <USBH_ParseDevDesc+0x86>
 804b5cc:	2b08      	cmp	r3, #8
 804b5ce:	db16      	blt.n	804b5fe <USBH_ParseDevDesc+0x94>
 804b5d0:	3b08      	subs	r3, #8
 804b5d2:	2201      	movs	r2, #1
 804b5d4:	fa02 f303 	lsl.w	r3, r2, r3
 804b5d8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 804b5dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804b5e0:	2b00      	cmp	r3, #0
 804b5e2:	bf14      	ite	ne
 804b5e4:	2301      	movne	r3, #1
 804b5e6:	2300      	moveq	r3, #0
 804b5e8:	b2db      	uxtb	r3, r3
 804b5ea:	2b00      	cmp	r3, #0
 804b5ec:	d102      	bne.n	804b5f4 <USBH_ParseDevDesc+0x8a>
 804b5ee:	e006      	b.n	804b5fe <USBH_ParseDevDesc+0x94>
 804b5f0:	2b40      	cmp	r3, #64	; 0x40
 804b5f2:	d104      	bne.n	804b5fe <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 804b5f4:	68fb      	ldr	r3, [r7, #12]
 804b5f6:	79da      	ldrb	r2, [r3, #7]
 804b5f8:	68fb      	ldr	r3, [r7, #12]
 804b5fa:	71da      	strb	r2, [r3, #7]
      break;
 804b5fc:	e003      	b.n	804b606 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 804b5fe:	68fb      	ldr	r3, [r7, #12]
 804b600:	2240      	movs	r2, #64	; 0x40
 804b602:	71da      	strb	r2, [r3, #7]
      break;
 804b604:	bf00      	nop
  }

  if (length > 8U)
 804b606:	88fb      	ldrh	r3, [r7, #6]
 804b608:	2b08      	cmp	r3, #8
 804b60a:	d939      	bls.n	804b680 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 804b60c:	68bb      	ldr	r3, [r7, #8]
 804b60e:	3308      	adds	r3, #8
 804b610:	781b      	ldrb	r3, [r3, #0]
 804b612:	b29a      	uxth	r2, r3
 804b614:	68bb      	ldr	r3, [r7, #8]
 804b616:	3309      	adds	r3, #9
 804b618:	781b      	ldrb	r3, [r3, #0]
 804b61a:	b29b      	uxth	r3, r3
 804b61c:	021b      	lsls	r3, r3, #8
 804b61e:	b29b      	uxth	r3, r3
 804b620:	4313      	orrs	r3, r2
 804b622:	b29a      	uxth	r2, r3
 804b624:	68fb      	ldr	r3, [r7, #12]
 804b626:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 804b628:	68bb      	ldr	r3, [r7, #8]
 804b62a:	330a      	adds	r3, #10
 804b62c:	781b      	ldrb	r3, [r3, #0]
 804b62e:	b29a      	uxth	r2, r3
 804b630:	68bb      	ldr	r3, [r7, #8]
 804b632:	330b      	adds	r3, #11
 804b634:	781b      	ldrb	r3, [r3, #0]
 804b636:	b29b      	uxth	r3, r3
 804b638:	021b      	lsls	r3, r3, #8
 804b63a:	b29b      	uxth	r3, r3
 804b63c:	4313      	orrs	r3, r2
 804b63e:	b29a      	uxth	r2, r3
 804b640:	68fb      	ldr	r3, [r7, #12]
 804b642:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 804b644:	68bb      	ldr	r3, [r7, #8]
 804b646:	330c      	adds	r3, #12
 804b648:	781b      	ldrb	r3, [r3, #0]
 804b64a:	b29a      	uxth	r2, r3
 804b64c:	68bb      	ldr	r3, [r7, #8]
 804b64e:	330d      	adds	r3, #13
 804b650:	781b      	ldrb	r3, [r3, #0]
 804b652:	b29b      	uxth	r3, r3
 804b654:	021b      	lsls	r3, r3, #8
 804b656:	b29b      	uxth	r3, r3
 804b658:	4313      	orrs	r3, r2
 804b65a:	b29a      	uxth	r2, r3
 804b65c:	68fb      	ldr	r3, [r7, #12]
 804b65e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 804b660:	68bb      	ldr	r3, [r7, #8]
 804b662:	7b9a      	ldrb	r2, [r3, #14]
 804b664:	68fb      	ldr	r3, [r7, #12]
 804b666:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 804b668:	68bb      	ldr	r3, [r7, #8]
 804b66a:	7bda      	ldrb	r2, [r3, #15]
 804b66c:	68fb      	ldr	r3, [r7, #12]
 804b66e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 804b670:	68bb      	ldr	r3, [r7, #8]
 804b672:	7c1a      	ldrb	r2, [r3, #16]
 804b674:	68fb      	ldr	r3, [r7, #12]
 804b676:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 804b678:	68bb      	ldr	r3, [r7, #8]
 804b67a:	7c5a      	ldrb	r2, [r3, #17]
 804b67c:	68fb      	ldr	r3, [r7, #12]
 804b67e:	745a      	strb	r2, [r3, #17]
  }
}
 804b680:	bf00      	nop
 804b682:	3714      	adds	r7, #20
 804b684:	46bd      	mov	sp, r7
 804b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b68a:	4770      	bx	lr

0804b68c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 804b68c:	b580      	push	{r7, lr}
 804b68e:	b08c      	sub	sp, #48	; 0x30
 804b690:	af00      	add	r7, sp, #0
 804b692:	60f8      	str	r0, [r7, #12]
 804b694:	60b9      	str	r1, [r7, #8]
 804b696:	4613      	mov	r3, r2
 804b698:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 804b69a:	68fb      	ldr	r3, [r7, #12]
 804b69c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 804b6a0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 804b6a2:	2300      	movs	r3, #0
 804b6a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 804b6a8:	68bb      	ldr	r3, [r7, #8]
 804b6aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 804b6ac:	2300      	movs	r3, #0
 804b6ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 804b6b2:	2300      	movs	r3, #0
 804b6b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 804b6b8:	68bb      	ldr	r3, [r7, #8]
 804b6ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 804b6bc:	68bb      	ldr	r3, [r7, #8]
 804b6be:	781a      	ldrb	r2, [r3, #0]
 804b6c0:	6a3b      	ldr	r3, [r7, #32]
 804b6c2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 804b6c4:	68bb      	ldr	r3, [r7, #8]
 804b6c6:	785a      	ldrb	r2, [r3, #1]
 804b6c8:	6a3b      	ldr	r3, [r7, #32]
 804b6ca:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 804b6cc:	68bb      	ldr	r3, [r7, #8]
 804b6ce:	3302      	adds	r3, #2
 804b6d0:	781b      	ldrb	r3, [r3, #0]
 804b6d2:	b29a      	uxth	r2, r3
 804b6d4:	68bb      	ldr	r3, [r7, #8]
 804b6d6:	3303      	adds	r3, #3
 804b6d8:	781b      	ldrb	r3, [r3, #0]
 804b6da:	b29b      	uxth	r3, r3
 804b6dc:	021b      	lsls	r3, r3, #8
 804b6de:	b29b      	uxth	r3, r3
 804b6e0:	4313      	orrs	r3, r2
 804b6e2:	b29b      	uxth	r3, r3
 804b6e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804b6e8:	bf28      	it	cs
 804b6ea:	f44f 7380 	movcs.w	r3, #256	; 0x100
 804b6ee:	b29a      	uxth	r2, r3
 804b6f0:	6a3b      	ldr	r3, [r7, #32]
 804b6f2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 804b6f4:	68bb      	ldr	r3, [r7, #8]
 804b6f6:	791a      	ldrb	r2, [r3, #4]
 804b6f8:	6a3b      	ldr	r3, [r7, #32]
 804b6fa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 804b6fc:	68bb      	ldr	r3, [r7, #8]
 804b6fe:	795a      	ldrb	r2, [r3, #5]
 804b700:	6a3b      	ldr	r3, [r7, #32]
 804b702:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 804b704:	68bb      	ldr	r3, [r7, #8]
 804b706:	799a      	ldrb	r2, [r3, #6]
 804b708:	6a3b      	ldr	r3, [r7, #32]
 804b70a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 804b70c:	68bb      	ldr	r3, [r7, #8]
 804b70e:	79da      	ldrb	r2, [r3, #7]
 804b710:	6a3b      	ldr	r3, [r7, #32]
 804b712:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 804b714:	68bb      	ldr	r3, [r7, #8]
 804b716:	7a1a      	ldrb	r2, [r3, #8]
 804b718:	6a3b      	ldr	r3, [r7, #32]
 804b71a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 804b71c:	6a3b      	ldr	r3, [r7, #32]
 804b71e:	781b      	ldrb	r3, [r3, #0]
 804b720:	2b09      	cmp	r3, #9
 804b722:	d002      	beq.n	804b72a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 804b724:	6a3b      	ldr	r3, [r7, #32]
 804b726:	2209      	movs	r2, #9
 804b728:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 804b72a:	88fb      	ldrh	r3, [r7, #6]
 804b72c:	2b09      	cmp	r3, #9
 804b72e:	f240 809d 	bls.w	804b86c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 804b732:	2309      	movs	r3, #9
 804b734:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 804b736:	2300      	movs	r3, #0
 804b738:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 804b73a:	e081      	b.n	804b840 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 804b73c:	f107 0316 	add.w	r3, r7, #22
 804b740:	4619      	mov	r1, r3
 804b742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804b744:	f000 f99f 	bl	804ba86 <USBH_GetNextDesc>
 804b748:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 804b74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b74c:	785b      	ldrb	r3, [r3, #1]
 804b74e:	2b04      	cmp	r3, #4
 804b750:	d176      	bne.n	804b840 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 804b752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b754:	781b      	ldrb	r3, [r3, #0]
 804b756:	2b09      	cmp	r3, #9
 804b758:	d002      	beq.n	804b760 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 804b75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b75c:	2209      	movs	r2, #9
 804b75e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 804b760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804b764:	221a      	movs	r2, #26
 804b766:	fb02 f303 	mul.w	r3, r2, r3
 804b76a:	3308      	adds	r3, #8
 804b76c:	6a3a      	ldr	r2, [r7, #32]
 804b76e:	4413      	add	r3, r2
 804b770:	3302      	adds	r3, #2
 804b772:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 804b774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804b776:	69f8      	ldr	r0, [r7, #28]
 804b778:	f000 f87e 	bl	804b878 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 804b77c:	2300      	movs	r3, #0
 804b77e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 804b782:	2300      	movs	r3, #0
 804b784:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 804b786:	e043      	b.n	804b810 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 804b788:	f107 0316 	add.w	r3, r7, #22
 804b78c:	4619      	mov	r1, r3
 804b78e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804b790:	f000 f979 	bl	804ba86 <USBH_GetNextDesc>
 804b794:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 804b796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b798:	785b      	ldrb	r3, [r3, #1]
 804b79a:	2b05      	cmp	r3, #5
 804b79c:	d138      	bne.n	804b810 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 804b79e:	69fb      	ldr	r3, [r7, #28]
 804b7a0:	795b      	ldrb	r3, [r3, #5]
 804b7a2:	2b01      	cmp	r3, #1
 804b7a4:	d10f      	bne.n	804b7c6 <USBH_ParseCfgDesc+0x13a>
 804b7a6:	69fb      	ldr	r3, [r7, #28]
 804b7a8:	799b      	ldrb	r3, [r3, #6]
 804b7aa:	2b02      	cmp	r3, #2
 804b7ac:	d10b      	bne.n	804b7c6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804b7ae:	69fb      	ldr	r3, [r7, #28]
 804b7b0:	79db      	ldrb	r3, [r3, #7]
 804b7b2:	2b00      	cmp	r3, #0
 804b7b4:	d10f      	bne.n	804b7d6 <USBH_ParseCfgDesc+0x14a>
 804b7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b7b8:	781b      	ldrb	r3, [r3, #0]
 804b7ba:	2b09      	cmp	r3, #9
 804b7bc:	d00b      	beq.n	804b7d6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 804b7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b7c0:	2209      	movs	r2, #9
 804b7c2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804b7c4:	e007      	b.n	804b7d6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 804b7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b7c8:	781b      	ldrb	r3, [r3, #0]
 804b7ca:	2b07      	cmp	r3, #7
 804b7cc:	d004      	beq.n	804b7d8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 804b7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b7d0:	2207      	movs	r2, #7
 804b7d2:	701a      	strb	r2, [r3, #0]
 804b7d4:	e000      	b.n	804b7d8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804b7d6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 804b7d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804b7dc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804b7e0:	3201      	adds	r2, #1
 804b7e2:	00d2      	lsls	r2, r2, #3
 804b7e4:	211a      	movs	r1, #26
 804b7e6:	fb01 f303 	mul.w	r3, r1, r3
 804b7ea:	4413      	add	r3, r2
 804b7ec:	3308      	adds	r3, #8
 804b7ee:	6a3a      	ldr	r2, [r7, #32]
 804b7f0:	4413      	add	r3, r2
 804b7f2:	3304      	adds	r3, #4
 804b7f4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 804b7f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804b7f8:	69b9      	ldr	r1, [r7, #24]
 804b7fa:	68f8      	ldr	r0, [r7, #12]
 804b7fc:	f000 f86b 	bl	804b8d6 <USBH_ParseEPDesc>
 804b800:	4603      	mov	r3, r0
 804b802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 804b806:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 804b80a:	3301      	adds	r3, #1
 804b80c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 804b810:	69fb      	ldr	r3, [r7, #28]
 804b812:	791b      	ldrb	r3, [r3, #4]
 804b814:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804b818:	429a      	cmp	r2, r3
 804b81a:	d204      	bcs.n	804b826 <USBH_ParseCfgDesc+0x19a>
 804b81c:	6a3b      	ldr	r3, [r7, #32]
 804b81e:	885a      	ldrh	r2, [r3, #2]
 804b820:	8afb      	ldrh	r3, [r7, #22]
 804b822:	429a      	cmp	r2, r3
 804b824:	d8b0      	bhi.n	804b788 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 804b826:	69fb      	ldr	r3, [r7, #28]
 804b828:	791b      	ldrb	r3, [r3, #4]
 804b82a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804b82e:	429a      	cmp	r2, r3
 804b830:	d201      	bcs.n	804b836 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 804b832:	2303      	movs	r3, #3
 804b834:	e01c      	b.n	804b870 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 804b836:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804b83a:	3301      	adds	r3, #1
 804b83c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 804b840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804b844:	2b01      	cmp	r3, #1
 804b846:	d805      	bhi.n	804b854 <USBH_ParseCfgDesc+0x1c8>
 804b848:	6a3b      	ldr	r3, [r7, #32]
 804b84a:	885a      	ldrh	r2, [r3, #2]
 804b84c:	8afb      	ldrh	r3, [r7, #22]
 804b84e:	429a      	cmp	r2, r3
 804b850:	f63f af74 	bhi.w	804b73c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 804b854:	6a3b      	ldr	r3, [r7, #32]
 804b856:	791b      	ldrb	r3, [r3, #4]
 804b858:	2b02      	cmp	r3, #2
 804b85a:	bf28      	it	cs
 804b85c:	2302      	movcs	r3, #2
 804b85e:	b2db      	uxtb	r3, r3
 804b860:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 804b864:	429a      	cmp	r2, r3
 804b866:	d201      	bcs.n	804b86c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 804b868:	2303      	movs	r3, #3
 804b86a:	e001      	b.n	804b870 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 804b86c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 804b870:	4618      	mov	r0, r3
 804b872:	3730      	adds	r7, #48	; 0x30
 804b874:	46bd      	mov	sp, r7
 804b876:	bd80      	pop	{r7, pc}

0804b878 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 804b878:	b480      	push	{r7}
 804b87a:	b083      	sub	sp, #12
 804b87c:	af00      	add	r7, sp, #0
 804b87e:	6078      	str	r0, [r7, #4]
 804b880:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 804b882:	683b      	ldr	r3, [r7, #0]
 804b884:	781a      	ldrb	r2, [r3, #0]
 804b886:	687b      	ldr	r3, [r7, #4]
 804b888:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 804b88a:	683b      	ldr	r3, [r7, #0]
 804b88c:	785a      	ldrb	r2, [r3, #1]
 804b88e:	687b      	ldr	r3, [r7, #4]
 804b890:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 804b892:	683b      	ldr	r3, [r7, #0]
 804b894:	789a      	ldrb	r2, [r3, #2]
 804b896:	687b      	ldr	r3, [r7, #4]
 804b898:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 804b89a:	683b      	ldr	r3, [r7, #0]
 804b89c:	78da      	ldrb	r2, [r3, #3]
 804b89e:	687b      	ldr	r3, [r7, #4]
 804b8a0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 804b8a2:	683b      	ldr	r3, [r7, #0]
 804b8a4:	791a      	ldrb	r2, [r3, #4]
 804b8a6:	687b      	ldr	r3, [r7, #4]
 804b8a8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 804b8aa:	683b      	ldr	r3, [r7, #0]
 804b8ac:	795a      	ldrb	r2, [r3, #5]
 804b8ae:	687b      	ldr	r3, [r7, #4]
 804b8b0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 804b8b2:	683b      	ldr	r3, [r7, #0]
 804b8b4:	799a      	ldrb	r2, [r3, #6]
 804b8b6:	687b      	ldr	r3, [r7, #4]
 804b8b8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 804b8ba:	683b      	ldr	r3, [r7, #0]
 804b8bc:	79da      	ldrb	r2, [r3, #7]
 804b8be:	687b      	ldr	r3, [r7, #4]
 804b8c0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 804b8c2:	683b      	ldr	r3, [r7, #0]
 804b8c4:	7a1a      	ldrb	r2, [r3, #8]
 804b8c6:	687b      	ldr	r3, [r7, #4]
 804b8c8:	721a      	strb	r2, [r3, #8]
}
 804b8ca:	bf00      	nop
 804b8cc:	370c      	adds	r7, #12
 804b8ce:	46bd      	mov	sp, r7
 804b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b8d4:	4770      	bx	lr

0804b8d6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 804b8d6:	b480      	push	{r7}
 804b8d8:	b087      	sub	sp, #28
 804b8da:	af00      	add	r7, sp, #0
 804b8dc:	60f8      	str	r0, [r7, #12]
 804b8de:	60b9      	str	r1, [r7, #8]
 804b8e0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 804b8e2:	2300      	movs	r3, #0
 804b8e4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 804b8e6:	687b      	ldr	r3, [r7, #4]
 804b8e8:	781a      	ldrb	r2, [r3, #0]
 804b8ea:	68bb      	ldr	r3, [r7, #8]
 804b8ec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 804b8ee:	687b      	ldr	r3, [r7, #4]
 804b8f0:	785a      	ldrb	r2, [r3, #1]
 804b8f2:	68bb      	ldr	r3, [r7, #8]
 804b8f4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 804b8f6:	687b      	ldr	r3, [r7, #4]
 804b8f8:	789a      	ldrb	r2, [r3, #2]
 804b8fa:	68bb      	ldr	r3, [r7, #8]
 804b8fc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 804b8fe:	687b      	ldr	r3, [r7, #4]
 804b900:	78da      	ldrb	r2, [r3, #3]
 804b902:	68bb      	ldr	r3, [r7, #8]
 804b904:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 804b906:	687b      	ldr	r3, [r7, #4]
 804b908:	3304      	adds	r3, #4
 804b90a:	781b      	ldrb	r3, [r3, #0]
 804b90c:	b29a      	uxth	r2, r3
 804b90e:	687b      	ldr	r3, [r7, #4]
 804b910:	3305      	adds	r3, #5
 804b912:	781b      	ldrb	r3, [r3, #0]
 804b914:	b29b      	uxth	r3, r3
 804b916:	021b      	lsls	r3, r3, #8
 804b918:	b29b      	uxth	r3, r3
 804b91a:	4313      	orrs	r3, r2
 804b91c:	b29a      	uxth	r2, r3
 804b91e:	68bb      	ldr	r3, [r7, #8]
 804b920:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 804b922:	687b      	ldr	r3, [r7, #4]
 804b924:	799a      	ldrb	r2, [r3, #6]
 804b926:	68bb      	ldr	r3, [r7, #8]
 804b928:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 804b92a:	68bb      	ldr	r3, [r7, #8]
 804b92c:	889b      	ldrh	r3, [r3, #4]
 804b92e:	2b00      	cmp	r3, #0
 804b930:	d102      	bne.n	804b938 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 804b932:	2303      	movs	r3, #3
 804b934:	75fb      	strb	r3, [r7, #23]
 804b936:	e033      	b.n	804b9a0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 804b938:	68bb      	ldr	r3, [r7, #8]
 804b93a:	889b      	ldrh	r3, [r3, #4]
 804b93c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 804b940:	f023 0307 	bic.w	r3, r3, #7
 804b944:	b29a      	uxth	r2, r3
 804b946:	68bb      	ldr	r3, [r7, #8]
 804b948:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 804b94a:	68bb      	ldr	r3, [r7, #8]
 804b94c:	889b      	ldrh	r3, [r3, #4]
 804b94e:	b21a      	sxth	r2, r3
 804b950:	687b      	ldr	r3, [r7, #4]
 804b952:	3304      	adds	r3, #4
 804b954:	781b      	ldrb	r3, [r3, #0]
 804b956:	b299      	uxth	r1, r3
 804b958:	687b      	ldr	r3, [r7, #4]
 804b95a:	3305      	adds	r3, #5
 804b95c:	781b      	ldrb	r3, [r3, #0]
 804b95e:	b29b      	uxth	r3, r3
 804b960:	021b      	lsls	r3, r3, #8
 804b962:	b29b      	uxth	r3, r3
 804b964:	430b      	orrs	r3, r1
 804b966:	b29b      	uxth	r3, r3
 804b968:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 804b96c:	2b00      	cmp	r3, #0
 804b96e:	d110      	bne.n	804b992 <USBH_ParseEPDesc+0xbc>
 804b970:	687b      	ldr	r3, [r7, #4]
 804b972:	3304      	adds	r3, #4
 804b974:	781b      	ldrb	r3, [r3, #0]
 804b976:	b299      	uxth	r1, r3
 804b978:	687b      	ldr	r3, [r7, #4]
 804b97a:	3305      	adds	r3, #5
 804b97c:	781b      	ldrb	r3, [r3, #0]
 804b97e:	b29b      	uxth	r3, r3
 804b980:	021b      	lsls	r3, r3, #8
 804b982:	b29b      	uxth	r3, r3
 804b984:	430b      	orrs	r3, r1
 804b986:	b29b      	uxth	r3, r3
 804b988:	b21b      	sxth	r3, r3
 804b98a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 804b98e:	b21b      	sxth	r3, r3
 804b990:	e001      	b.n	804b996 <USBH_ParseEPDesc+0xc0>
 804b992:	f44f 7300 	mov.w	r3, #512	; 0x200
 804b996:	4313      	orrs	r3, r2
 804b998:	b21b      	sxth	r3, r3
 804b99a:	b29a      	uxth	r2, r3
 804b99c:	68bb      	ldr	r3, [r7, #8]
 804b99e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 804b9a0:	68fb      	ldr	r3, [r7, #12]
 804b9a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804b9a6:	2b00      	cmp	r3, #0
 804b9a8:	d116      	bne.n	804b9d8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 804b9aa:	68bb      	ldr	r3, [r7, #8]
 804b9ac:	78db      	ldrb	r3, [r3, #3]
 804b9ae:	f003 0303 	and.w	r3, r3, #3
 804b9b2:	2b01      	cmp	r3, #1
 804b9b4:	d005      	beq.n	804b9c2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 804b9b6:	68bb      	ldr	r3, [r7, #8]
 804b9b8:	78db      	ldrb	r3, [r3, #3]
 804b9ba:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 804b9be:	2b03      	cmp	r3, #3
 804b9c0:	d127      	bne.n	804ba12 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 804b9c2:	68bb      	ldr	r3, [r7, #8]
 804b9c4:	799b      	ldrb	r3, [r3, #6]
 804b9c6:	2b00      	cmp	r3, #0
 804b9c8:	d003      	beq.n	804b9d2 <USBH_ParseEPDesc+0xfc>
 804b9ca:	68bb      	ldr	r3, [r7, #8]
 804b9cc:	799b      	ldrb	r3, [r3, #6]
 804b9ce:	2b10      	cmp	r3, #16
 804b9d0:	d91f      	bls.n	804ba12 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804b9d2:	2303      	movs	r3, #3
 804b9d4:	75fb      	strb	r3, [r7, #23]
 804b9d6:	e01c      	b.n	804ba12 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 804b9d8:	68bb      	ldr	r3, [r7, #8]
 804b9da:	78db      	ldrb	r3, [r3, #3]
 804b9dc:	f003 0303 	and.w	r3, r3, #3
 804b9e0:	2b01      	cmp	r3, #1
 804b9e2:	d10a      	bne.n	804b9fa <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 804b9e4:	68bb      	ldr	r3, [r7, #8]
 804b9e6:	799b      	ldrb	r3, [r3, #6]
 804b9e8:	2b00      	cmp	r3, #0
 804b9ea:	d003      	beq.n	804b9f4 <USBH_ParseEPDesc+0x11e>
 804b9ec:	68bb      	ldr	r3, [r7, #8]
 804b9ee:	799b      	ldrb	r3, [r3, #6]
 804b9f0:	2b10      	cmp	r3, #16
 804b9f2:	d90e      	bls.n	804ba12 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804b9f4:	2303      	movs	r3, #3
 804b9f6:	75fb      	strb	r3, [r7, #23]
 804b9f8:	e00b      	b.n	804ba12 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 804b9fa:	68bb      	ldr	r3, [r7, #8]
 804b9fc:	78db      	ldrb	r3, [r3, #3]
 804b9fe:	f003 0303 	and.w	r3, r3, #3
 804ba02:	2b03      	cmp	r3, #3
 804ba04:	d105      	bne.n	804ba12 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 804ba06:	68bb      	ldr	r3, [r7, #8]
 804ba08:	799b      	ldrb	r3, [r3, #6]
 804ba0a:	2b00      	cmp	r3, #0
 804ba0c:	d101      	bne.n	804ba12 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804ba0e:	2303      	movs	r3, #3
 804ba10:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 804ba12:	7dfb      	ldrb	r3, [r7, #23]
}
 804ba14:	4618      	mov	r0, r3
 804ba16:	371c      	adds	r7, #28
 804ba18:	46bd      	mov	sp, r7
 804ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ba1e:	4770      	bx	lr

0804ba20 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 804ba20:	b480      	push	{r7}
 804ba22:	b087      	sub	sp, #28
 804ba24:	af00      	add	r7, sp, #0
 804ba26:	60f8      	str	r0, [r7, #12]
 804ba28:	60b9      	str	r1, [r7, #8]
 804ba2a:	4613      	mov	r3, r2
 804ba2c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 804ba2e:	68fb      	ldr	r3, [r7, #12]
 804ba30:	3301      	adds	r3, #1
 804ba32:	781b      	ldrb	r3, [r3, #0]
 804ba34:	2b03      	cmp	r3, #3
 804ba36:	d120      	bne.n	804ba7a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 804ba38:	68fb      	ldr	r3, [r7, #12]
 804ba3a:	781b      	ldrb	r3, [r3, #0]
 804ba3c:	1e9a      	subs	r2, r3, #2
 804ba3e:	88fb      	ldrh	r3, [r7, #6]
 804ba40:	4293      	cmp	r3, r2
 804ba42:	bf28      	it	cs
 804ba44:	4613      	movcs	r3, r2
 804ba46:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 804ba48:	68fb      	ldr	r3, [r7, #12]
 804ba4a:	3302      	adds	r3, #2
 804ba4c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 804ba4e:	2300      	movs	r3, #0
 804ba50:	82fb      	strh	r3, [r7, #22]
 804ba52:	e00b      	b.n	804ba6c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 804ba54:	8afb      	ldrh	r3, [r7, #22]
 804ba56:	68fa      	ldr	r2, [r7, #12]
 804ba58:	4413      	add	r3, r2
 804ba5a:	781a      	ldrb	r2, [r3, #0]
 804ba5c:	68bb      	ldr	r3, [r7, #8]
 804ba5e:	701a      	strb	r2, [r3, #0]
      pdest++;
 804ba60:	68bb      	ldr	r3, [r7, #8]
 804ba62:	3301      	adds	r3, #1
 804ba64:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 804ba66:	8afb      	ldrh	r3, [r7, #22]
 804ba68:	3302      	adds	r3, #2
 804ba6a:	82fb      	strh	r3, [r7, #22]
 804ba6c:	8afa      	ldrh	r2, [r7, #22]
 804ba6e:	8abb      	ldrh	r3, [r7, #20]
 804ba70:	429a      	cmp	r2, r3
 804ba72:	d3ef      	bcc.n	804ba54 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 804ba74:	68bb      	ldr	r3, [r7, #8]
 804ba76:	2200      	movs	r2, #0
 804ba78:	701a      	strb	r2, [r3, #0]
  }
}
 804ba7a:	bf00      	nop
 804ba7c:	371c      	adds	r7, #28
 804ba7e:	46bd      	mov	sp, r7
 804ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ba84:	4770      	bx	lr

0804ba86 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 804ba86:	b480      	push	{r7}
 804ba88:	b085      	sub	sp, #20
 804ba8a:	af00      	add	r7, sp, #0
 804ba8c:	6078      	str	r0, [r7, #4]
 804ba8e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 804ba90:	683b      	ldr	r3, [r7, #0]
 804ba92:	881a      	ldrh	r2, [r3, #0]
 804ba94:	687b      	ldr	r3, [r7, #4]
 804ba96:	781b      	ldrb	r3, [r3, #0]
 804ba98:	b29b      	uxth	r3, r3
 804ba9a:	4413      	add	r3, r2
 804ba9c:	b29a      	uxth	r2, r3
 804ba9e:	683b      	ldr	r3, [r7, #0]
 804baa0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 804baa2:	687b      	ldr	r3, [r7, #4]
 804baa4:	781b      	ldrb	r3, [r3, #0]
 804baa6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 804baa8:	687b      	ldr	r3, [r7, #4]
 804baaa:	4413      	add	r3, r2
 804baac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 804baae:	68fb      	ldr	r3, [r7, #12]
}
 804bab0:	4618      	mov	r0, r3
 804bab2:	3714      	adds	r7, #20
 804bab4:	46bd      	mov	sp, r7
 804bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804baba:	4770      	bx	lr

0804babc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 804babc:	b580      	push	{r7, lr}
 804babe:	b086      	sub	sp, #24
 804bac0:	af00      	add	r7, sp, #0
 804bac2:	60f8      	str	r0, [r7, #12]
 804bac4:	60b9      	str	r1, [r7, #8]
 804bac6:	4613      	mov	r3, r2
 804bac8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 804baca:	2301      	movs	r3, #1
 804bacc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 804bace:	68fb      	ldr	r3, [r7, #12]
 804bad0:	789b      	ldrb	r3, [r3, #2]
 804bad2:	2b01      	cmp	r3, #1
 804bad4:	d002      	beq.n	804badc <USBH_CtlReq+0x20>
 804bad6:	2b02      	cmp	r3, #2
 804bad8:	d00f      	beq.n	804bafa <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 804bada:	e027      	b.n	804bb2c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 804badc:	68fb      	ldr	r3, [r7, #12]
 804bade:	68ba      	ldr	r2, [r7, #8]
 804bae0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 804bae2:	68fb      	ldr	r3, [r7, #12]
 804bae4:	88fa      	ldrh	r2, [r7, #6]
 804bae6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 804bae8:	68fb      	ldr	r3, [r7, #12]
 804baea:	2201      	movs	r2, #1
 804baec:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 804baee:	68fb      	ldr	r3, [r7, #12]
 804baf0:	2202      	movs	r2, #2
 804baf2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 804baf4:	2301      	movs	r3, #1
 804baf6:	75fb      	strb	r3, [r7, #23]
      break;
 804baf8:	e018      	b.n	804bb2c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 804bafa:	68f8      	ldr	r0, [r7, #12]
 804bafc:	f000 f81c 	bl	804bb38 <USBH_HandleControl>
 804bb00:	4603      	mov	r3, r0
 804bb02:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 804bb04:	7dfb      	ldrb	r3, [r7, #23]
 804bb06:	2b00      	cmp	r3, #0
 804bb08:	d002      	beq.n	804bb10 <USBH_CtlReq+0x54>
 804bb0a:	7dfb      	ldrb	r3, [r7, #23]
 804bb0c:	2b03      	cmp	r3, #3
 804bb0e:	d106      	bne.n	804bb1e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 804bb10:	68fb      	ldr	r3, [r7, #12]
 804bb12:	2201      	movs	r2, #1
 804bb14:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 804bb16:	68fb      	ldr	r3, [r7, #12]
 804bb18:	2200      	movs	r2, #0
 804bb1a:	761a      	strb	r2, [r3, #24]
      break;
 804bb1c:	e005      	b.n	804bb2a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 804bb1e:	7dfb      	ldrb	r3, [r7, #23]
 804bb20:	2b02      	cmp	r3, #2
 804bb22:	d102      	bne.n	804bb2a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 804bb24:	68fb      	ldr	r3, [r7, #12]
 804bb26:	2201      	movs	r2, #1
 804bb28:	709a      	strb	r2, [r3, #2]
      break;
 804bb2a:	bf00      	nop
  }
  return status;
 804bb2c:	7dfb      	ldrb	r3, [r7, #23]
}
 804bb2e:	4618      	mov	r0, r3
 804bb30:	3718      	adds	r7, #24
 804bb32:	46bd      	mov	sp, r7
 804bb34:	bd80      	pop	{r7, pc}
	...

0804bb38 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 804bb38:	b580      	push	{r7, lr}
 804bb3a:	b086      	sub	sp, #24
 804bb3c:	af02      	add	r7, sp, #8
 804bb3e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 804bb40:	2301      	movs	r3, #1
 804bb42:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804bb44:	2300      	movs	r3, #0
 804bb46:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 804bb48:	687b      	ldr	r3, [r7, #4]
 804bb4a:	7e1b      	ldrb	r3, [r3, #24]
 804bb4c:	3b01      	subs	r3, #1
 804bb4e:	2b0a      	cmp	r3, #10
 804bb50:	f200 8156 	bhi.w	804be00 <USBH_HandleControl+0x2c8>
 804bb54:	a201      	add	r2, pc, #4	; (adr r2, 804bb5c <USBH_HandleControl+0x24>)
 804bb56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804bb5a:	bf00      	nop
 804bb5c:	0804bb89 	.word	0x0804bb89
 804bb60:	0804bba3 	.word	0x0804bba3
 804bb64:	0804bc0d 	.word	0x0804bc0d
 804bb68:	0804bc33 	.word	0x0804bc33
 804bb6c:	0804bc6b 	.word	0x0804bc6b
 804bb70:	0804bc95 	.word	0x0804bc95
 804bb74:	0804bce7 	.word	0x0804bce7
 804bb78:	0804bd09 	.word	0x0804bd09
 804bb7c:	0804bd45 	.word	0x0804bd45
 804bb80:	0804bd6b 	.word	0x0804bd6b
 804bb84:	0804bda9 	.word	0x0804bda9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 804bb88:	687b      	ldr	r3, [r7, #4]
 804bb8a:	f103 0110 	add.w	r1, r3, #16
 804bb8e:	687b      	ldr	r3, [r7, #4]
 804bb90:	795b      	ldrb	r3, [r3, #5]
 804bb92:	461a      	mov	r2, r3
 804bb94:	6878      	ldr	r0, [r7, #4]
 804bb96:	f000 f943 	bl	804be20 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 804bb9a:	687b      	ldr	r3, [r7, #4]
 804bb9c:	2202      	movs	r2, #2
 804bb9e:	761a      	strb	r2, [r3, #24]
      break;
 804bba0:	e139      	b.n	804be16 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804bba2:	687b      	ldr	r3, [r7, #4]
 804bba4:	795b      	ldrb	r3, [r3, #5]
 804bba6:	4619      	mov	r1, r3
 804bba8:	6878      	ldr	r0, [r7, #4]
 804bbaa:	f000 fccb 	bl	804c544 <USBH_LL_GetURBState>
 804bbae:	4603      	mov	r3, r0
 804bbb0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 804bbb2:	7bbb      	ldrb	r3, [r7, #14]
 804bbb4:	2b01      	cmp	r3, #1
 804bbb6:	d11e      	bne.n	804bbf6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 804bbb8:	687b      	ldr	r3, [r7, #4]
 804bbba:	7c1b      	ldrb	r3, [r3, #16]
 804bbbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 804bbc0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 804bbc2:	687b      	ldr	r3, [r7, #4]
 804bbc4:	8adb      	ldrh	r3, [r3, #22]
 804bbc6:	2b00      	cmp	r3, #0
 804bbc8:	d00a      	beq.n	804bbe0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 804bbca:	7b7b      	ldrb	r3, [r7, #13]
 804bbcc:	2b80      	cmp	r3, #128	; 0x80
 804bbce:	d103      	bne.n	804bbd8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 804bbd0:	687b      	ldr	r3, [r7, #4]
 804bbd2:	2203      	movs	r2, #3
 804bbd4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804bbd6:	e115      	b.n	804be04 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 804bbd8:	687b      	ldr	r3, [r7, #4]
 804bbda:	2205      	movs	r2, #5
 804bbdc:	761a      	strb	r2, [r3, #24]
      break;
 804bbde:	e111      	b.n	804be04 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 804bbe0:	7b7b      	ldrb	r3, [r7, #13]
 804bbe2:	2b80      	cmp	r3, #128	; 0x80
 804bbe4:	d103      	bne.n	804bbee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 804bbe6:	687b      	ldr	r3, [r7, #4]
 804bbe8:	2209      	movs	r2, #9
 804bbea:	761a      	strb	r2, [r3, #24]
      break;
 804bbec:	e10a      	b.n	804be04 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 804bbee:	687b      	ldr	r3, [r7, #4]
 804bbf0:	2207      	movs	r2, #7
 804bbf2:	761a      	strb	r2, [r3, #24]
      break;
 804bbf4:	e106      	b.n	804be04 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 804bbf6:	7bbb      	ldrb	r3, [r7, #14]
 804bbf8:	2b04      	cmp	r3, #4
 804bbfa:	d003      	beq.n	804bc04 <USBH_HandleControl+0xcc>
 804bbfc:	7bbb      	ldrb	r3, [r7, #14]
 804bbfe:	2b02      	cmp	r3, #2
 804bc00:	f040 8100 	bne.w	804be04 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 804bc04:	687b      	ldr	r3, [r7, #4]
 804bc06:	220b      	movs	r2, #11
 804bc08:	761a      	strb	r2, [r3, #24]
      break;
 804bc0a:	e0fb      	b.n	804be04 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 804bc0c:	687b      	ldr	r3, [r7, #4]
 804bc0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804bc12:	b29a      	uxth	r2, r3
 804bc14:	687b      	ldr	r3, [r7, #4]
 804bc16:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 804bc18:	687b      	ldr	r3, [r7, #4]
 804bc1a:	6899      	ldr	r1, [r3, #8]
 804bc1c:	687b      	ldr	r3, [r7, #4]
 804bc1e:	899a      	ldrh	r2, [r3, #12]
 804bc20:	687b      	ldr	r3, [r7, #4]
 804bc22:	791b      	ldrb	r3, [r3, #4]
 804bc24:	6878      	ldr	r0, [r7, #4]
 804bc26:	f000 f93a 	bl	804be9e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 804bc2a:	687b      	ldr	r3, [r7, #4]
 804bc2c:	2204      	movs	r2, #4
 804bc2e:	761a      	strb	r2, [r3, #24]
      break;
 804bc30:	e0f1      	b.n	804be16 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 804bc32:	687b      	ldr	r3, [r7, #4]
 804bc34:	791b      	ldrb	r3, [r3, #4]
 804bc36:	4619      	mov	r1, r3
 804bc38:	6878      	ldr	r0, [r7, #4]
 804bc3a:	f000 fc83 	bl	804c544 <USBH_LL_GetURBState>
 804bc3e:	4603      	mov	r3, r0
 804bc40:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 804bc42:	7bbb      	ldrb	r3, [r7, #14]
 804bc44:	2b01      	cmp	r3, #1
 804bc46:	d102      	bne.n	804bc4e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 804bc48:	687b      	ldr	r3, [r7, #4]
 804bc4a:	2209      	movs	r2, #9
 804bc4c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 804bc4e:	7bbb      	ldrb	r3, [r7, #14]
 804bc50:	2b05      	cmp	r3, #5
 804bc52:	d102      	bne.n	804bc5a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 804bc54:	2303      	movs	r3, #3
 804bc56:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804bc58:	e0d6      	b.n	804be08 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 804bc5a:	7bbb      	ldrb	r3, [r7, #14]
 804bc5c:	2b04      	cmp	r3, #4
 804bc5e:	f040 80d3 	bne.w	804be08 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 804bc62:	687b      	ldr	r3, [r7, #4]
 804bc64:	220b      	movs	r2, #11
 804bc66:	761a      	strb	r2, [r3, #24]
      break;
 804bc68:	e0ce      	b.n	804be08 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 804bc6a:	687b      	ldr	r3, [r7, #4]
 804bc6c:	6899      	ldr	r1, [r3, #8]
 804bc6e:	687b      	ldr	r3, [r7, #4]
 804bc70:	899a      	ldrh	r2, [r3, #12]
 804bc72:	687b      	ldr	r3, [r7, #4]
 804bc74:	795b      	ldrb	r3, [r3, #5]
 804bc76:	2001      	movs	r0, #1
 804bc78:	9000      	str	r0, [sp, #0]
 804bc7a:	6878      	ldr	r0, [r7, #4]
 804bc7c:	f000 f8ea 	bl	804be54 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 804bc80:	687b      	ldr	r3, [r7, #4]
 804bc82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804bc86:	b29a      	uxth	r2, r3
 804bc88:	687b      	ldr	r3, [r7, #4]
 804bc8a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 804bc8c:	687b      	ldr	r3, [r7, #4]
 804bc8e:	2206      	movs	r2, #6
 804bc90:	761a      	strb	r2, [r3, #24]
      break;
 804bc92:	e0c0      	b.n	804be16 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804bc94:	687b      	ldr	r3, [r7, #4]
 804bc96:	795b      	ldrb	r3, [r3, #5]
 804bc98:	4619      	mov	r1, r3
 804bc9a:	6878      	ldr	r0, [r7, #4]
 804bc9c:	f000 fc52 	bl	804c544 <USBH_LL_GetURBState>
 804bca0:	4603      	mov	r3, r0
 804bca2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 804bca4:	7bbb      	ldrb	r3, [r7, #14]
 804bca6:	2b01      	cmp	r3, #1
 804bca8:	d103      	bne.n	804bcb2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 804bcaa:	687b      	ldr	r3, [r7, #4]
 804bcac:	2207      	movs	r2, #7
 804bcae:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804bcb0:	e0ac      	b.n	804be0c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 804bcb2:	7bbb      	ldrb	r3, [r7, #14]
 804bcb4:	2b05      	cmp	r3, #5
 804bcb6:	d105      	bne.n	804bcc4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 804bcb8:	687b      	ldr	r3, [r7, #4]
 804bcba:	220c      	movs	r2, #12
 804bcbc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 804bcbe:	2303      	movs	r3, #3
 804bcc0:	73fb      	strb	r3, [r7, #15]
      break;
 804bcc2:	e0a3      	b.n	804be0c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 804bcc4:	7bbb      	ldrb	r3, [r7, #14]
 804bcc6:	2b02      	cmp	r3, #2
 804bcc8:	d103      	bne.n	804bcd2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 804bcca:	687b      	ldr	r3, [r7, #4]
 804bccc:	2205      	movs	r2, #5
 804bcce:	761a      	strb	r2, [r3, #24]
      break;
 804bcd0:	e09c      	b.n	804be0c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 804bcd2:	7bbb      	ldrb	r3, [r7, #14]
 804bcd4:	2b04      	cmp	r3, #4
 804bcd6:	f040 8099 	bne.w	804be0c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 804bcda:	687b      	ldr	r3, [r7, #4]
 804bcdc:	220b      	movs	r2, #11
 804bcde:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 804bce0:	2302      	movs	r3, #2
 804bce2:	73fb      	strb	r3, [r7, #15]
      break;
 804bce4:	e092      	b.n	804be0c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 804bce6:	687b      	ldr	r3, [r7, #4]
 804bce8:	791b      	ldrb	r3, [r3, #4]
 804bcea:	2200      	movs	r2, #0
 804bcec:	2100      	movs	r1, #0
 804bcee:	6878      	ldr	r0, [r7, #4]
 804bcf0:	f000 f8d5 	bl	804be9e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 804bcf4:	687b      	ldr	r3, [r7, #4]
 804bcf6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804bcfa:	b29a      	uxth	r2, r3
 804bcfc:	687b      	ldr	r3, [r7, #4]
 804bcfe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 804bd00:	687b      	ldr	r3, [r7, #4]
 804bd02:	2208      	movs	r2, #8
 804bd04:	761a      	strb	r2, [r3, #24]

      break;
 804bd06:	e086      	b.n	804be16 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 804bd08:	687b      	ldr	r3, [r7, #4]
 804bd0a:	791b      	ldrb	r3, [r3, #4]
 804bd0c:	4619      	mov	r1, r3
 804bd0e:	6878      	ldr	r0, [r7, #4]
 804bd10:	f000 fc18 	bl	804c544 <USBH_LL_GetURBState>
 804bd14:	4603      	mov	r3, r0
 804bd16:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 804bd18:	7bbb      	ldrb	r3, [r7, #14]
 804bd1a:	2b01      	cmp	r3, #1
 804bd1c:	d105      	bne.n	804bd2a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 804bd1e:	687b      	ldr	r3, [r7, #4]
 804bd20:	220d      	movs	r2, #13
 804bd22:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 804bd24:	2300      	movs	r3, #0
 804bd26:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804bd28:	e072      	b.n	804be10 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 804bd2a:	7bbb      	ldrb	r3, [r7, #14]
 804bd2c:	2b04      	cmp	r3, #4
 804bd2e:	d103      	bne.n	804bd38 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 804bd30:	687b      	ldr	r3, [r7, #4]
 804bd32:	220b      	movs	r2, #11
 804bd34:	761a      	strb	r2, [r3, #24]
      break;
 804bd36:	e06b      	b.n	804be10 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 804bd38:	7bbb      	ldrb	r3, [r7, #14]
 804bd3a:	2b05      	cmp	r3, #5
 804bd3c:	d168      	bne.n	804be10 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 804bd3e:	2303      	movs	r3, #3
 804bd40:	73fb      	strb	r3, [r7, #15]
      break;
 804bd42:	e065      	b.n	804be10 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 804bd44:	687b      	ldr	r3, [r7, #4]
 804bd46:	795b      	ldrb	r3, [r3, #5]
 804bd48:	2201      	movs	r2, #1
 804bd4a:	9200      	str	r2, [sp, #0]
 804bd4c:	2200      	movs	r2, #0
 804bd4e:	2100      	movs	r1, #0
 804bd50:	6878      	ldr	r0, [r7, #4]
 804bd52:	f000 f87f 	bl	804be54 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 804bd56:	687b      	ldr	r3, [r7, #4]
 804bd58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804bd5c:	b29a      	uxth	r2, r3
 804bd5e:	687b      	ldr	r3, [r7, #4]
 804bd60:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 804bd62:	687b      	ldr	r3, [r7, #4]
 804bd64:	220a      	movs	r2, #10
 804bd66:	761a      	strb	r2, [r3, #24]
      break;
 804bd68:	e055      	b.n	804be16 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804bd6a:	687b      	ldr	r3, [r7, #4]
 804bd6c:	795b      	ldrb	r3, [r3, #5]
 804bd6e:	4619      	mov	r1, r3
 804bd70:	6878      	ldr	r0, [r7, #4]
 804bd72:	f000 fbe7 	bl	804c544 <USBH_LL_GetURBState>
 804bd76:	4603      	mov	r3, r0
 804bd78:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 804bd7a:	7bbb      	ldrb	r3, [r7, #14]
 804bd7c:	2b01      	cmp	r3, #1
 804bd7e:	d105      	bne.n	804bd8c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 804bd80:	2300      	movs	r3, #0
 804bd82:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 804bd84:	687b      	ldr	r3, [r7, #4]
 804bd86:	220d      	movs	r2, #13
 804bd88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804bd8a:	e043      	b.n	804be14 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 804bd8c:	7bbb      	ldrb	r3, [r7, #14]
 804bd8e:	2b02      	cmp	r3, #2
 804bd90:	d103      	bne.n	804bd9a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 804bd92:	687b      	ldr	r3, [r7, #4]
 804bd94:	2209      	movs	r2, #9
 804bd96:	761a      	strb	r2, [r3, #24]
      break;
 804bd98:	e03c      	b.n	804be14 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 804bd9a:	7bbb      	ldrb	r3, [r7, #14]
 804bd9c:	2b04      	cmp	r3, #4
 804bd9e:	d139      	bne.n	804be14 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 804bda0:	687b      	ldr	r3, [r7, #4]
 804bda2:	220b      	movs	r2, #11
 804bda4:	761a      	strb	r2, [r3, #24]
      break;
 804bda6:	e035      	b.n	804be14 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 804bda8:	687b      	ldr	r3, [r7, #4]
 804bdaa:	7e5b      	ldrb	r3, [r3, #25]
 804bdac:	3301      	adds	r3, #1
 804bdae:	b2da      	uxtb	r2, r3
 804bdb0:	687b      	ldr	r3, [r7, #4]
 804bdb2:	765a      	strb	r2, [r3, #25]
 804bdb4:	687b      	ldr	r3, [r7, #4]
 804bdb6:	7e5b      	ldrb	r3, [r3, #25]
 804bdb8:	2b02      	cmp	r3, #2
 804bdba:	d806      	bhi.n	804bdca <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 804bdbc:	687b      	ldr	r3, [r7, #4]
 804bdbe:	2201      	movs	r2, #1
 804bdc0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 804bdc2:	687b      	ldr	r3, [r7, #4]
 804bdc4:	2201      	movs	r2, #1
 804bdc6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 804bdc8:	e025      	b.n	804be16 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 804bdca:	687b      	ldr	r3, [r7, #4]
 804bdcc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804bdd0:	2106      	movs	r1, #6
 804bdd2:	6878      	ldr	r0, [r7, #4]
 804bdd4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 804bdd6:	687b      	ldr	r3, [r7, #4]
 804bdd8:	2200      	movs	r2, #0
 804bdda:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804bddc:	687b      	ldr	r3, [r7, #4]
 804bdde:	795b      	ldrb	r3, [r3, #5]
 804bde0:	4619      	mov	r1, r3
 804bde2:	6878      	ldr	r0, [r7, #4]
 804bde4:	f000 f90c 	bl	804c000 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804bde8:	687b      	ldr	r3, [r7, #4]
 804bdea:	791b      	ldrb	r3, [r3, #4]
 804bdec:	4619      	mov	r1, r3
 804bdee:	6878      	ldr	r0, [r7, #4]
 804bdf0:	f000 f906 	bl	804c000 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 804bdf4:	687b      	ldr	r3, [r7, #4]
 804bdf6:	2200      	movs	r2, #0
 804bdf8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 804bdfa:	2302      	movs	r3, #2
 804bdfc:	73fb      	strb	r3, [r7, #15]
      break;
 804bdfe:	e00a      	b.n	804be16 <USBH_HandleControl+0x2de>

    default:
      break;
 804be00:	bf00      	nop
 804be02:	e008      	b.n	804be16 <USBH_HandleControl+0x2de>
      break;
 804be04:	bf00      	nop
 804be06:	e006      	b.n	804be16 <USBH_HandleControl+0x2de>
      break;
 804be08:	bf00      	nop
 804be0a:	e004      	b.n	804be16 <USBH_HandleControl+0x2de>
      break;
 804be0c:	bf00      	nop
 804be0e:	e002      	b.n	804be16 <USBH_HandleControl+0x2de>
      break;
 804be10:	bf00      	nop
 804be12:	e000      	b.n	804be16 <USBH_HandleControl+0x2de>
      break;
 804be14:	bf00      	nop
  }

  return status;
 804be16:	7bfb      	ldrb	r3, [r7, #15]
}
 804be18:	4618      	mov	r0, r3
 804be1a:	3710      	adds	r7, #16
 804be1c:	46bd      	mov	sp, r7
 804be1e:	bd80      	pop	{r7, pc}

0804be20 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 804be20:	b580      	push	{r7, lr}
 804be22:	b088      	sub	sp, #32
 804be24:	af04      	add	r7, sp, #16
 804be26:	60f8      	str	r0, [r7, #12]
 804be28:	60b9      	str	r1, [r7, #8]
 804be2a:	4613      	mov	r3, r2
 804be2c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804be2e:	79f9      	ldrb	r1, [r7, #7]
 804be30:	2300      	movs	r3, #0
 804be32:	9303      	str	r3, [sp, #12]
 804be34:	2308      	movs	r3, #8
 804be36:	9302      	str	r3, [sp, #8]
 804be38:	68bb      	ldr	r3, [r7, #8]
 804be3a:	9301      	str	r3, [sp, #4]
 804be3c:	2300      	movs	r3, #0
 804be3e:	9300      	str	r3, [sp, #0]
 804be40:	2300      	movs	r3, #0
 804be42:	2200      	movs	r2, #0
 804be44:	68f8      	ldr	r0, [r7, #12]
 804be46:	f000 fb4c 	bl	804c4e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 804be4a:	2300      	movs	r3, #0
}
 804be4c:	4618      	mov	r0, r3
 804be4e:	3710      	adds	r7, #16
 804be50:	46bd      	mov	sp, r7
 804be52:	bd80      	pop	{r7, pc}

0804be54 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 804be54:	b580      	push	{r7, lr}
 804be56:	b088      	sub	sp, #32
 804be58:	af04      	add	r7, sp, #16
 804be5a:	60f8      	str	r0, [r7, #12]
 804be5c:	60b9      	str	r1, [r7, #8]
 804be5e:	4611      	mov	r1, r2
 804be60:	461a      	mov	r2, r3
 804be62:	460b      	mov	r3, r1
 804be64:	80fb      	strh	r3, [r7, #6]
 804be66:	4613      	mov	r3, r2
 804be68:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 804be6a:	68fb      	ldr	r3, [r7, #12]
 804be6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804be70:	2b00      	cmp	r3, #0
 804be72:	d001      	beq.n	804be78 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 804be74:	2300      	movs	r3, #0
 804be76:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804be78:	7979      	ldrb	r1, [r7, #5]
 804be7a:	7e3b      	ldrb	r3, [r7, #24]
 804be7c:	9303      	str	r3, [sp, #12]
 804be7e:	88fb      	ldrh	r3, [r7, #6]
 804be80:	9302      	str	r3, [sp, #8]
 804be82:	68bb      	ldr	r3, [r7, #8]
 804be84:	9301      	str	r3, [sp, #4]
 804be86:	2301      	movs	r3, #1
 804be88:	9300      	str	r3, [sp, #0]
 804be8a:	2300      	movs	r3, #0
 804be8c:	2200      	movs	r2, #0
 804be8e:	68f8      	ldr	r0, [r7, #12]
 804be90:	f000 fb27 	bl	804c4e2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 804be94:	2300      	movs	r3, #0
}
 804be96:	4618      	mov	r0, r3
 804be98:	3710      	adds	r7, #16
 804be9a:	46bd      	mov	sp, r7
 804be9c:	bd80      	pop	{r7, pc}

0804be9e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 804be9e:	b580      	push	{r7, lr}
 804bea0:	b088      	sub	sp, #32
 804bea2:	af04      	add	r7, sp, #16
 804bea4:	60f8      	str	r0, [r7, #12]
 804bea6:	60b9      	str	r1, [r7, #8]
 804bea8:	4611      	mov	r1, r2
 804beaa:	461a      	mov	r2, r3
 804beac:	460b      	mov	r3, r1
 804beae:	80fb      	strh	r3, [r7, #6]
 804beb0:	4613      	mov	r3, r2
 804beb2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804beb4:	7979      	ldrb	r1, [r7, #5]
 804beb6:	2300      	movs	r3, #0
 804beb8:	9303      	str	r3, [sp, #12]
 804beba:	88fb      	ldrh	r3, [r7, #6]
 804bebc:	9302      	str	r3, [sp, #8]
 804bebe:	68bb      	ldr	r3, [r7, #8]
 804bec0:	9301      	str	r3, [sp, #4]
 804bec2:	2301      	movs	r3, #1
 804bec4:	9300      	str	r3, [sp, #0]
 804bec6:	2300      	movs	r3, #0
 804bec8:	2201      	movs	r2, #1
 804beca:	68f8      	ldr	r0, [r7, #12]
 804becc:	f000 fb09 	bl	804c4e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 804bed0:	2300      	movs	r3, #0

}
 804bed2:	4618      	mov	r0, r3
 804bed4:	3710      	adds	r7, #16
 804bed6:	46bd      	mov	sp, r7
 804bed8:	bd80      	pop	{r7, pc}

0804beda <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 804beda:	b580      	push	{r7, lr}
 804bedc:	b088      	sub	sp, #32
 804bede:	af04      	add	r7, sp, #16
 804bee0:	60f8      	str	r0, [r7, #12]
 804bee2:	60b9      	str	r1, [r7, #8]
 804bee4:	4611      	mov	r1, r2
 804bee6:	461a      	mov	r2, r3
 804bee8:	460b      	mov	r3, r1
 804beea:	80fb      	strh	r3, [r7, #6]
 804beec:	4613      	mov	r3, r2
 804beee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 804bef0:	68fb      	ldr	r3, [r7, #12]
 804bef2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804bef6:	2b00      	cmp	r3, #0
 804bef8:	d001      	beq.n	804befe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 804befa:	2300      	movs	r3, #0
 804befc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804befe:	7979      	ldrb	r1, [r7, #5]
 804bf00:	7e3b      	ldrb	r3, [r7, #24]
 804bf02:	9303      	str	r3, [sp, #12]
 804bf04:	88fb      	ldrh	r3, [r7, #6]
 804bf06:	9302      	str	r3, [sp, #8]
 804bf08:	68bb      	ldr	r3, [r7, #8]
 804bf0a:	9301      	str	r3, [sp, #4]
 804bf0c:	2301      	movs	r3, #1
 804bf0e:	9300      	str	r3, [sp, #0]
 804bf10:	2302      	movs	r3, #2
 804bf12:	2200      	movs	r2, #0
 804bf14:	68f8      	ldr	r0, [r7, #12]
 804bf16:	f000 fae4 	bl	804c4e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 804bf1a:	2300      	movs	r3, #0
}
 804bf1c:	4618      	mov	r0, r3
 804bf1e:	3710      	adds	r7, #16
 804bf20:	46bd      	mov	sp, r7
 804bf22:	bd80      	pop	{r7, pc}

0804bf24 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 804bf24:	b580      	push	{r7, lr}
 804bf26:	b088      	sub	sp, #32
 804bf28:	af04      	add	r7, sp, #16
 804bf2a:	60f8      	str	r0, [r7, #12]
 804bf2c:	60b9      	str	r1, [r7, #8]
 804bf2e:	4611      	mov	r1, r2
 804bf30:	461a      	mov	r2, r3
 804bf32:	460b      	mov	r3, r1
 804bf34:	80fb      	strh	r3, [r7, #6]
 804bf36:	4613      	mov	r3, r2
 804bf38:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804bf3a:	7979      	ldrb	r1, [r7, #5]
 804bf3c:	2300      	movs	r3, #0
 804bf3e:	9303      	str	r3, [sp, #12]
 804bf40:	88fb      	ldrh	r3, [r7, #6]
 804bf42:	9302      	str	r3, [sp, #8]
 804bf44:	68bb      	ldr	r3, [r7, #8]
 804bf46:	9301      	str	r3, [sp, #4]
 804bf48:	2301      	movs	r3, #1
 804bf4a:	9300      	str	r3, [sp, #0]
 804bf4c:	2302      	movs	r3, #2
 804bf4e:	2201      	movs	r2, #1
 804bf50:	68f8      	ldr	r0, [r7, #12]
 804bf52:	f000 fac6 	bl	804c4e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 804bf56:	2300      	movs	r3, #0
}
 804bf58:	4618      	mov	r0, r3
 804bf5a:	3710      	adds	r7, #16
 804bf5c:	46bd      	mov	sp, r7
 804bf5e:	bd80      	pop	{r7, pc}

0804bf60 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 804bf60:	b580      	push	{r7, lr}
 804bf62:	b086      	sub	sp, #24
 804bf64:	af04      	add	r7, sp, #16
 804bf66:	6078      	str	r0, [r7, #4]
 804bf68:	4608      	mov	r0, r1
 804bf6a:	4611      	mov	r1, r2
 804bf6c:	461a      	mov	r2, r3
 804bf6e:	4603      	mov	r3, r0
 804bf70:	70fb      	strb	r3, [r7, #3]
 804bf72:	460b      	mov	r3, r1
 804bf74:	70bb      	strb	r3, [r7, #2]
 804bf76:	4613      	mov	r3, r2
 804bf78:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 804bf7a:	7878      	ldrb	r0, [r7, #1]
 804bf7c:	78ba      	ldrb	r2, [r7, #2]
 804bf7e:	78f9      	ldrb	r1, [r7, #3]
 804bf80:	8b3b      	ldrh	r3, [r7, #24]
 804bf82:	9302      	str	r3, [sp, #8]
 804bf84:	7d3b      	ldrb	r3, [r7, #20]
 804bf86:	9301      	str	r3, [sp, #4]
 804bf88:	7c3b      	ldrb	r3, [r7, #16]
 804bf8a:	9300      	str	r3, [sp, #0]
 804bf8c:	4603      	mov	r3, r0
 804bf8e:	6878      	ldr	r0, [r7, #4]
 804bf90:	f000 fa59 	bl	804c446 <USBH_LL_OpenPipe>

  return USBH_OK;
 804bf94:	2300      	movs	r3, #0
}
 804bf96:	4618      	mov	r0, r3
 804bf98:	3708      	adds	r7, #8
 804bf9a:	46bd      	mov	sp, r7
 804bf9c:	bd80      	pop	{r7, pc}

0804bf9e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 804bf9e:	b580      	push	{r7, lr}
 804bfa0:	b082      	sub	sp, #8
 804bfa2:	af00      	add	r7, sp, #0
 804bfa4:	6078      	str	r0, [r7, #4]
 804bfa6:	460b      	mov	r3, r1
 804bfa8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 804bfaa:	78fb      	ldrb	r3, [r7, #3]
 804bfac:	4619      	mov	r1, r3
 804bfae:	6878      	ldr	r0, [r7, #4]
 804bfb0:	f000 fa78 	bl	804c4a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 804bfb4:	2300      	movs	r3, #0
}
 804bfb6:	4618      	mov	r0, r3
 804bfb8:	3708      	adds	r7, #8
 804bfba:	46bd      	mov	sp, r7
 804bfbc:	bd80      	pop	{r7, pc}

0804bfbe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 804bfbe:	b580      	push	{r7, lr}
 804bfc0:	b084      	sub	sp, #16
 804bfc2:	af00      	add	r7, sp, #0
 804bfc4:	6078      	str	r0, [r7, #4]
 804bfc6:	460b      	mov	r3, r1
 804bfc8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 804bfca:	6878      	ldr	r0, [r7, #4]
 804bfcc:	f000 f836 	bl	804c03c <USBH_GetFreePipe>
 804bfd0:	4603      	mov	r3, r0
 804bfd2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 804bfd4:	89fb      	ldrh	r3, [r7, #14]
 804bfd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804bfda:	4293      	cmp	r3, r2
 804bfdc:	d00a      	beq.n	804bff4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 804bfde:	78fa      	ldrb	r2, [r7, #3]
 804bfe0:	89fb      	ldrh	r3, [r7, #14]
 804bfe2:	f003 030f 	and.w	r3, r3, #15
 804bfe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 804bfea:	6879      	ldr	r1, [r7, #4]
 804bfec:	33e0      	adds	r3, #224	; 0xe0
 804bfee:	009b      	lsls	r3, r3, #2
 804bff0:	440b      	add	r3, r1
 804bff2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 804bff4:	89fb      	ldrh	r3, [r7, #14]
 804bff6:	b2db      	uxtb	r3, r3
}
 804bff8:	4618      	mov	r0, r3
 804bffa:	3710      	adds	r7, #16
 804bffc:	46bd      	mov	sp, r7
 804bffe:	bd80      	pop	{r7, pc}

0804c000 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 804c000:	b480      	push	{r7}
 804c002:	b083      	sub	sp, #12
 804c004:	af00      	add	r7, sp, #0
 804c006:	6078      	str	r0, [r7, #4]
 804c008:	460b      	mov	r3, r1
 804c00a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 804c00c:	78fb      	ldrb	r3, [r7, #3]
 804c00e:	2b0f      	cmp	r3, #15
 804c010:	d80d      	bhi.n	804c02e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 804c012:	78fb      	ldrb	r3, [r7, #3]
 804c014:	687a      	ldr	r2, [r7, #4]
 804c016:	33e0      	adds	r3, #224	; 0xe0
 804c018:	009b      	lsls	r3, r3, #2
 804c01a:	4413      	add	r3, r2
 804c01c:	685a      	ldr	r2, [r3, #4]
 804c01e:	78fb      	ldrb	r3, [r7, #3]
 804c020:	f3c2 020e 	ubfx	r2, r2, #0, #15
 804c024:	6879      	ldr	r1, [r7, #4]
 804c026:	33e0      	adds	r3, #224	; 0xe0
 804c028:	009b      	lsls	r3, r3, #2
 804c02a:	440b      	add	r3, r1
 804c02c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 804c02e:	2300      	movs	r3, #0
}
 804c030:	4618      	mov	r0, r3
 804c032:	370c      	adds	r7, #12
 804c034:	46bd      	mov	sp, r7
 804c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c03a:	4770      	bx	lr

0804c03c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 804c03c:	b480      	push	{r7}
 804c03e:	b085      	sub	sp, #20
 804c040:	af00      	add	r7, sp, #0
 804c042:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 804c044:	2300      	movs	r3, #0
 804c046:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 804c048:	2300      	movs	r3, #0
 804c04a:	73fb      	strb	r3, [r7, #15]
 804c04c:	e00f      	b.n	804c06e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 804c04e:	7bfb      	ldrb	r3, [r7, #15]
 804c050:	687a      	ldr	r2, [r7, #4]
 804c052:	33e0      	adds	r3, #224	; 0xe0
 804c054:	009b      	lsls	r3, r3, #2
 804c056:	4413      	add	r3, r2
 804c058:	685b      	ldr	r3, [r3, #4]
 804c05a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804c05e:	2b00      	cmp	r3, #0
 804c060:	d102      	bne.n	804c068 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 804c062:	7bfb      	ldrb	r3, [r7, #15]
 804c064:	b29b      	uxth	r3, r3
 804c066:	e007      	b.n	804c078 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 804c068:	7bfb      	ldrb	r3, [r7, #15]
 804c06a:	3301      	adds	r3, #1
 804c06c:	73fb      	strb	r3, [r7, #15]
 804c06e:	7bfb      	ldrb	r3, [r7, #15]
 804c070:	2b0f      	cmp	r3, #15
 804c072:	d9ec      	bls.n	804c04e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 804c074:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 804c078:	4618      	mov	r0, r3
 804c07a:	3714      	adds	r7, #20
 804c07c:	46bd      	mov	sp, r7
 804c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c082:	4770      	bx	lr

0804c084 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 804c084:	b580      	push	{r7, lr}
 804c086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 804c088:	2200      	movs	r2, #0
 804c08a:	490e      	ldr	r1, [pc, #56]	; (804c0c4 <MX_USB_HOST_Init+0x40>)
 804c08c:	480e      	ldr	r0, [pc, #56]	; (804c0c8 <MX_USB_HOST_Init+0x44>)
 804c08e:	f7fe fba7 	bl	804a7e0 <USBH_Init>
 804c092:	4603      	mov	r3, r0
 804c094:	2b00      	cmp	r3, #0
 804c096:	d001      	beq.n	804c09c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 804c098:	f7f4 ff0c 	bl	8040eb4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 804c09c:	490b      	ldr	r1, [pc, #44]	; (804c0cc <MX_USB_HOST_Init+0x48>)
 804c09e:	480a      	ldr	r0, [pc, #40]	; (804c0c8 <MX_USB_HOST_Init+0x44>)
 804c0a0:	f7fe fc2c 	bl	804a8fc <USBH_RegisterClass>
 804c0a4:	4603      	mov	r3, r0
 804c0a6:	2b00      	cmp	r3, #0
 804c0a8:	d001      	beq.n	804c0ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 804c0aa:	f7f4 ff03 	bl	8040eb4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 804c0ae:	4806      	ldr	r0, [pc, #24]	; (804c0c8 <MX_USB_HOST_Init+0x44>)
 804c0b0:	f7fe fcb0 	bl	804aa14 <USBH_Start>
 804c0b4:	4603      	mov	r3, r0
 804c0b6:	2b00      	cmp	r3, #0
 804c0b8:	d001      	beq.n	804c0be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 804c0ba:	f7f4 fefb 	bl	8040eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 804c0be:	bf00      	nop
 804c0c0:	bd80      	pop	{r7, pc}
 804c0c2:	bf00      	nop
 804c0c4:	0804c0e5 	.word	0x0804c0e5
 804c0c8:	20000668 	.word	0x20000668
 804c0cc:	2000005c 	.word	0x2000005c

0804c0d0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 804c0d0:	b580      	push	{r7, lr}
 804c0d2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 804c0d4:	4802      	ldr	r0, [pc, #8]	; (804c0e0 <MX_USB_HOST_Process+0x10>)
 804c0d6:	f7fe fcad 	bl	804aa34 <USBH_Process>
}
 804c0da:	bf00      	nop
 804c0dc:	bd80      	pop	{r7, pc}
 804c0de:	bf00      	nop
 804c0e0:	20000668 	.word	0x20000668

0804c0e4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 804c0e4:	b480      	push	{r7}
 804c0e6:	b083      	sub	sp, #12
 804c0e8:	af00      	add	r7, sp, #0
 804c0ea:	6078      	str	r0, [r7, #4]
 804c0ec:	460b      	mov	r3, r1
 804c0ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 804c0f0:	78fb      	ldrb	r3, [r7, #3]
 804c0f2:	3b01      	subs	r3, #1
 804c0f4:	2b04      	cmp	r3, #4
 804c0f6:	d819      	bhi.n	804c12c <USBH_UserProcess+0x48>
 804c0f8:	a201      	add	r2, pc, #4	; (adr r2, 804c100 <USBH_UserProcess+0x1c>)
 804c0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804c0fe:	bf00      	nop
 804c100:	0804c12d 	.word	0x0804c12d
 804c104:	0804c11d 	.word	0x0804c11d
 804c108:	0804c12d 	.word	0x0804c12d
 804c10c:	0804c125 	.word	0x0804c125
 804c110:	0804c115 	.word	0x0804c115
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 804c114:	4b09      	ldr	r3, [pc, #36]	; (804c13c <USBH_UserProcess+0x58>)
 804c116:	2203      	movs	r2, #3
 804c118:	701a      	strb	r2, [r3, #0]
  break;
 804c11a:	e008      	b.n	804c12e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 804c11c:	4b07      	ldr	r3, [pc, #28]	; (804c13c <USBH_UserProcess+0x58>)
 804c11e:	2202      	movs	r2, #2
 804c120:	701a      	strb	r2, [r3, #0]
  break;
 804c122:	e004      	b.n	804c12e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 804c124:	4b05      	ldr	r3, [pc, #20]	; (804c13c <USBH_UserProcess+0x58>)
 804c126:	2201      	movs	r2, #1
 804c128:	701a      	strb	r2, [r3, #0]
  break;
 804c12a:	e000      	b.n	804c12e <USBH_UserProcess+0x4a>

  default:
  break;
 804c12c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 804c12e:	bf00      	nop
 804c130:	370c      	adds	r7, #12
 804c132:	46bd      	mov	sp, r7
 804c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c138:	4770      	bx	lr
 804c13a:	bf00      	nop
 804c13c:	20000a40 	.word	0x20000a40

0804c140 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 804c140:	b580      	push	{r7, lr}
 804c142:	b08a      	sub	sp, #40	; 0x28
 804c144:	af00      	add	r7, sp, #0
 804c146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804c148:	f107 0314 	add.w	r3, r7, #20
 804c14c:	2200      	movs	r2, #0
 804c14e:	601a      	str	r2, [r3, #0]
 804c150:	605a      	str	r2, [r3, #4]
 804c152:	609a      	str	r2, [r3, #8]
 804c154:	60da      	str	r2, [r3, #12]
 804c156:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 804c158:	687b      	ldr	r3, [r7, #4]
 804c15a:	681b      	ldr	r3, [r3, #0]
 804c15c:	4a24      	ldr	r2, [pc, #144]	; (804c1f0 <HAL_HCD_MspInit+0xb0>)
 804c15e:	4293      	cmp	r3, r2
 804c160:	d141      	bne.n	804c1e6 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 804c162:	2300      	movs	r3, #0
 804c164:	613b      	str	r3, [r7, #16]
 804c166:	4b23      	ldr	r3, [pc, #140]	; (804c1f4 <HAL_HCD_MspInit+0xb4>)
 804c168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c16a:	4a22      	ldr	r2, [pc, #136]	; (804c1f4 <HAL_HCD_MspInit+0xb4>)
 804c16c:	f043 0302 	orr.w	r3, r3, #2
 804c170:	6313      	str	r3, [r2, #48]	; 0x30
 804c172:	4b20      	ldr	r3, [pc, #128]	; (804c1f4 <HAL_HCD_MspInit+0xb4>)
 804c174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c176:	f003 0302 	and.w	r3, r3, #2
 804c17a:	613b      	str	r3, [r7, #16]
 804c17c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 804c17e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 804c182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804c184:	2302      	movs	r3, #2
 804c186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804c188:	2300      	movs	r3, #0
 804c18a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804c18c:	2300      	movs	r3, #0
 804c18e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 804c190:	230c      	movs	r3, #12
 804c192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804c194:	f107 0314 	add.w	r3, r7, #20
 804c198:	4619      	mov	r1, r3
 804c19a:	4817      	ldr	r0, [pc, #92]	; (804c1f8 <HAL_HCD_MspInit+0xb8>)
 804c19c:	f7f7 fc82 	bl	8043aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 804c1a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 804c1a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 804c1a6:	2300      	movs	r3, #0
 804c1a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804c1aa:	2300      	movs	r3, #0
 804c1ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 804c1ae:	f107 0314 	add.w	r3, r7, #20
 804c1b2:	4619      	mov	r1, r3
 804c1b4:	4810      	ldr	r0, [pc, #64]	; (804c1f8 <HAL_HCD_MspInit+0xb8>)
 804c1b6:	f7f7 fc75 	bl	8043aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 804c1ba:	2300      	movs	r3, #0
 804c1bc:	60fb      	str	r3, [r7, #12]
 804c1be:	4b0d      	ldr	r3, [pc, #52]	; (804c1f4 <HAL_HCD_MspInit+0xb4>)
 804c1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c1c2:	4a0c      	ldr	r2, [pc, #48]	; (804c1f4 <HAL_HCD_MspInit+0xb4>)
 804c1c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 804c1c8:	6313      	str	r3, [r2, #48]	; 0x30
 804c1ca:	4b0a      	ldr	r3, [pc, #40]	; (804c1f4 <HAL_HCD_MspInit+0xb4>)
 804c1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c1ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804c1d2:	60fb      	str	r3, [r7, #12]
 804c1d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 804c1d6:	2200      	movs	r2, #0
 804c1d8:	2100      	movs	r1, #0
 804c1da:	204d      	movs	r0, #77	; 0x4d
 804c1dc:	f7f6 fec2 	bl	8042f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 804c1e0:	204d      	movs	r0, #77	; 0x4d
 804c1e2:	f7f6 fedb 	bl	8042f9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 804c1e6:	bf00      	nop
 804c1e8:	3728      	adds	r7, #40	; 0x28
 804c1ea:	46bd      	mov	sp, r7
 804c1ec:	bd80      	pop	{r7, pc}
 804c1ee:	bf00      	nop
 804c1f0:	40040000 	.word	0x40040000
 804c1f4:	40023800 	.word	0x40023800
 804c1f8:	40020400 	.word	0x40020400

0804c1fc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 804c1fc:	b580      	push	{r7, lr}
 804c1fe:	b082      	sub	sp, #8
 804c200:	af00      	add	r7, sp, #0
 804c202:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 804c204:	687b      	ldr	r3, [r7, #4]
 804c206:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c20a:	4618      	mov	r0, r3
 804c20c:	f7fe fff1 	bl	804b1f2 <USBH_LL_IncTimer>
}
 804c210:	bf00      	nop
 804c212:	3708      	adds	r7, #8
 804c214:	46bd      	mov	sp, r7
 804c216:	bd80      	pop	{r7, pc}

0804c218 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 804c218:	b580      	push	{r7, lr}
 804c21a:	b082      	sub	sp, #8
 804c21c:	af00      	add	r7, sp, #0
 804c21e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 804c220:	687b      	ldr	r3, [r7, #4]
 804c222:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c226:	4618      	mov	r0, r3
 804c228:	f7ff f829 	bl	804b27e <USBH_LL_Connect>
}
 804c22c:	bf00      	nop
 804c22e:	3708      	adds	r7, #8
 804c230:	46bd      	mov	sp, r7
 804c232:	bd80      	pop	{r7, pc}

0804c234 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 804c234:	b580      	push	{r7, lr}
 804c236:	b082      	sub	sp, #8
 804c238:	af00      	add	r7, sp, #0
 804c23a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 804c23c:	687b      	ldr	r3, [r7, #4]
 804c23e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c242:	4618      	mov	r0, r3
 804c244:	f7ff f832 	bl	804b2ac <USBH_LL_Disconnect>
}
 804c248:	bf00      	nop
 804c24a:	3708      	adds	r7, #8
 804c24c:	46bd      	mov	sp, r7
 804c24e:	bd80      	pop	{r7, pc}

0804c250 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 804c250:	b480      	push	{r7}
 804c252:	b083      	sub	sp, #12
 804c254:	af00      	add	r7, sp, #0
 804c256:	6078      	str	r0, [r7, #4]
 804c258:	460b      	mov	r3, r1
 804c25a:	70fb      	strb	r3, [r7, #3]
 804c25c:	4613      	mov	r3, r2
 804c25e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 804c260:	bf00      	nop
 804c262:	370c      	adds	r7, #12
 804c264:	46bd      	mov	sp, r7
 804c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c26a:	4770      	bx	lr

0804c26c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 804c26c:	b580      	push	{r7, lr}
 804c26e:	b082      	sub	sp, #8
 804c270:	af00      	add	r7, sp, #0
 804c272:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 804c274:	687b      	ldr	r3, [r7, #4]
 804c276:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c27a:	4618      	mov	r0, r3
 804c27c:	f7fe ffe3 	bl	804b246 <USBH_LL_PortEnabled>
}
 804c280:	bf00      	nop
 804c282:	3708      	adds	r7, #8
 804c284:	46bd      	mov	sp, r7
 804c286:	bd80      	pop	{r7, pc}

0804c288 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 804c288:	b580      	push	{r7, lr}
 804c28a:	b082      	sub	sp, #8
 804c28c:	af00      	add	r7, sp, #0
 804c28e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 804c290:	687b      	ldr	r3, [r7, #4]
 804c292:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c296:	4618      	mov	r0, r3
 804c298:	f7fe ffe3 	bl	804b262 <USBH_LL_PortDisabled>
}
 804c29c:	bf00      	nop
 804c29e:	3708      	adds	r7, #8
 804c2a0:	46bd      	mov	sp, r7
 804c2a2:	bd80      	pop	{r7, pc}

0804c2a4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 804c2a4:	b580      	push	{r7, lr}
 804c2a6:	b082      	sub	sp, #8
 804c2a8:	af00      	add	r7, sp, #0
 804c2aa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 804c2ac:	687b      	ldr	r3, [r7, #4]
 804c2ae:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 804c2b2:	2b00      	cmp	r3, #0
 804c2b4:	d132      	bne.n	804c31c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 804c2b6:	4a1c      	ldr	r2, [pc, #112]	; (804c328 <USBH_LL_Init+0x84>)
 804c2b8:	687b      	ldr	r3, [r7, #4]
 804c2ba:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 804c2be:	687b      	ldr	r3, [r7, #4]
 804c2c0:	4a19      	ldr	r2, [pc, #100]	; (804c328 <USBH_LL_Init+0x84>)
 804c2c2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 804c2c6:	4b18      	ldr	r3, [pc, #96]	; (804c328 <USBH_LL_Init+0x84>)
 804c2c8:	4a18      	ldr	r2, [pc, #96]	; (804c32c <USBH_LL_Init+0x88>)
 804c2ca:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 804c2cc:	4b16      	ldr	r3, [pc, #88]	; (804c328 <USBH_LL_Init+0x84>)
 804c2ce:	220c      	movs	r2, #12
 804c2d0:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 804c2d2:	4b15      	ldr	r3, [pc, #84]	; (804c328 <USBH_LL_Init+0x84>)
 804c2d4:	2201      	movs	r2, #1
 804c2d6:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 804c2d8:	4b13      	ldr	r3, [pc, #76]	; (804c328 <USBH_LL_Init+0x84>)
 804c2da:	2200      	movs	r2, #0
 804c2dc:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 804c2de:	4b12      	ldr	r3, [pc, #72]	; (804c328 <USBH_LL_Init+0x84>)
 804c2e0:	2202      	movs	r2, #2
 804c2e2:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 804c2e4:	4b10      	ldr	r3, [pc, #64]	; (804c328 <USBH_LL_Init+0x84>)
 804c2e6:	2200      	movs	r2, #0
 804c2e8:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 804c2ea:	4b0f      	ldr	r3, [pc, #60]	; (804c328 <USBH_LL_Init+0x84>)
 804c2ec:	2200      	movs	r2, #0
 804c2ee:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 804c2f0:	4b0d      	ldr	r3, [pc, #52]	; (804c328 <USBH_LL_Init+0x84>)
 804c2f2:	2200      	movs	r2, #0
 804c2f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 804c2f6:	4b0c      	ldr	r3, [pc, #48]	; (804c328 <USBH_LL_Init+0x84>)
 804c2f8:	2200      	movs	r2, #0
 804c2fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 804c2fc:	480a      	ldr	r0, [pc, #40]	; (804c328 <USBH_LL_Init+0x84>)
 804c2fe:	f7f7 febb 	bl	8044078 <HAL_HCD_Init>
 804c302:	4603      	mov	r3, r0
 804c304:	2b00      	cmp	r3, #0
 804c306:	d001      	beq.n	804c30c <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 804c308:	f7f4 fdd4 	bl	8040eb4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 804c30c:	4806      	ldr	r0, [pc, #24]	; (804c328 <USBH_LL_Init+0x84>)
 804c30e:	f7f8 fa9e 	bl	804484e <HAL_HCD_GetCurrentFrame>
 804c312:	4603      	mov	r3, r0
 804c314:	4619      	mov	r1, r3
 804c316:	6878      	ldr	r0, [r7, #4]
 804c318:	f7fe ff5c 	bl	804b1d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 804c31c:	2300      	movs	r3, #0
}
 804c31e:	4618      	mov	r0, r3
 804c320:	3708      	adds	r7, #8
 804c322:	46bd      	mov	sp, r7
 804c324:	bd80      	pop	{r7, pc}
 804c326:	bf00      	nop
 804c328:	20000a44 	.word	0x20000a44
 804c32c:	40040000 	.word	0x40040000

0804c330 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 804c330:	b580      	push	{r7, lr}
 804c332:	b084      	sub	sp, #16
 804c334:	af00      	add	r7, sp, #0
 804c336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c338:	2300      	movs	r3, #0
 804c33a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c33c:	2300      	movs	r3, #0
 804c33e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 804c340:	687b      	ldr	r3, [r7, #4]
 804c342:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c346:	4618      	mov	r0, r3
 804c348:	f7f8 fa0b 	bl	8044762 <HAL_HCD_Start>
 804c34c:	4603      	mov	r3, r0
 804c34e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804c350:	7bfb      	ldrb	r3, [r7, #15]
 804c352:	4618      	mov	r0, r3
 804c354:	f000 f95c 	bl	804c610 <USBH_Get_USB_Status>
 804c358:	4603      	mov	r3, r0
 804c35a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c35c:	7bbb      	ldrb	r3, [r7, #14]
}
 804c35e:	4618      	mov	r0, r3
 804c360:	3710      	adds	r7, #16
 804c362:	46bd      	mov	sp, r7
 804c364:	bd80      	pop	{r7, pc}

0804c366 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 804c366:	b580      	push	{r7, lr}
 804c368:	b084      	sub	sp, #16
 804c36a:	af00      	add	r7, sp, #0
 804c36c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c36e:	2300      	movs	r3, #0
 804c370:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c372:	2300      	movs	r3, #0
 804c374:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 804c376:	687b      	ldr	r3, [r7, #4]
 804c378:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c37c:	4618      	mov	r0, r3
 804c37e:	f7f8 fa13 	bl	80447a8 <HAL_HCD_Stop>
 804c382:	4603      	mov	r3, r0
 804c384:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804c386:	7bfb      	ldrb	r3, [r7, #15]
 804c388:	4618      	mov	r0, r3
 804c38a:	f000 f941 	bl	804c610 <USBH_Get_USB_Status>
 804c38e:	4603      	mov	r3, r0
 804c390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c392:	7bbb      	ldrb	r3, [r7, #14]
}
 804c394:	4618      	mov	r0, r3
 804c396:	3710      	adds	r7, #16
 804c398:	46bd      	mov	sp, r7
 804c39a:	bd80      	pop	{r7, pc}

0804c39c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 804c39c:	b580      	push	{r7, lr}
 804c39e:	b084      	sub	sp, #16
 804c3a0:	af00      	add	r7, sp, #0
 804c3a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 804c3a4:	2301      	movs	r3, #1
 804c3a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 804c3a8:	687b      	ldr	r3, [r7, #4]
 804c3aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c3ae:	4618      	mov	r0, r3
 804c3b0:	f7f8 fa5b 	bl	804486a <HAL_HCD_GetCurrentSpeed>
 804c3b4:	4603      	mov	r3, r0
 804c3b6:	2b02      	cmp	r3, #2
 804c3b8:	d00c      	beq.n	804c3d4 <USBH_LL_GetSpeed+0x38>
 804c3ba:	2b02      	cmp	r3, #2
 804c3bc:	d80d      	bhi.n	804c3da <USBH_LL_GetSpeed+0x3e>
 804c3be:	2b00      	cmp	r3, #0
 804c3c0:	d002      	beq.n	804c3c8 <USBH_LL_GetSpeed+0x2c>
 804c3c2:	2b01      	cmp	r3, #1
 804c3c4:	d003      	beq.n	804c3ce <USBH_LL_GetSpeed+0x32>
 804c3c6:	e008      	b.n	804c3da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 804c3c8:	2300      	movs	r3, #0
 804c3ca:	73fb      	strb	r3, [r7, #15]
    break;
 804c3cc:	e008      	b.n	804c3e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 804c3ce:	2301      	movs	r3, #1
 804c3d0:	73fb      	strb	r3, [r7, #15]
    break;
 804c3d2:	e005      	b.n	804c3e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 804c3d4:	2302      	movs	r3, #2
 804c3d6:	73fb      	strb	r3, [r7, #15]
    break;
 804c3d8:	e002      	b.n	804c3e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 804c3da:	2301      	movs	r3, #1
 804c3dc:	73fb      	strb	r3, [r7, #15]
    break;
 804c3de:	bf00      	nop
  }
  return  speed;
 804c3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 804c3e2:	4618      	mov	r0, r3
 804c3e4:	3710      	adds	r7, #16
 804c3e6:	46bd      	mov	sp, r7
 804c3e8:	bd80      	pop	{r7, pc}

0804c3ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 804c3ea:	b580      	push	{r7, lr}
 804c3ec:	b084      	sub	sp, #16
 804c3ee:	af00      	add	r7, sp, #0
 804c3f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c3f2:	2300      	movs	r3, #0
 804c3f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c3f6:	2300      	movs	r3, #0
 804c3f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 804c3fa:	687b      	ldr	r3, [r7, #4]
 804c3fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c400:	4618      	mov	r0, r3
 804c402:	f7f8 f9ee 	bl	80447e2 <HAL_HCD_ResetPort>
 804c406:	4603      	mov	r3, r0
 804c408:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804c40a:	7bfb      	ldrb	r3, [r7, #15]
 804c40c:	4618      	mov	r0, r3
 804c40e:	f000 f8ff 	bl	804c610 <USBH_Get_USB_Status>
 804c412:	4603      	mov	r3, r0
 804c414:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c416:	7bbb      	ldrb	r3, [r7, #14]
}
 804c418:	4618      	mov	r0, r3
 804c41a:	3710      	adds	r7, #16
 804c41c:	46bd      	mov	sp, r7
 804c41e:	bd80      	pop	{r7, pc}

0804c420 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804c420:	b580      	push	{r7, lr}
 804c422:	b082      	sub	sp, #8
 804c424:	af00      	add	r7, sp, #0
 804c426:	6078      	str	r0, [r7, #4]
 804c428:	460b      	mov	r3, r1
 804c42a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 804c42c:	687b      	ldr	r3, [r7, #4]
 804c42e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c432:	78fa      	ldrb	r2, [r7, #3]
 804c434:	4611      	mov	r1, r2
 804c436:	4618      	mov	r0, r3
 804c438:	f7f8 f9f5 	bl	8044826 <HAL_HCD_HC_GetXferCount>
 804c43c:	4603      	mov	r3, r0
}
 804c43e:	4618      	mov	r0, r3
 804c440:	3708      	adds	r7, #8
 804c442:	46bd      	mov	sp, r7
 804c444:	bd80      	pop	{r7, pc}

0804c446 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 804c446:	b590      	push	{r4, r7, lr}
 804c448:	b089      	sub	sp, #36	; 0x24
 804c44a:	af04      	add	r7, sp, #16
 804c44c:	6078      	str	r0, [r7, #4]
 804c44e:	4608      	mov	r0, r1
 804c450:	4611      	mov	r1, r2
 804c452:	461a      	mov	r2, r3
 804c454:	4603      	mov	r3, r0
 804c456:	70fb      	strb	r3, [r7, #3]
 804c458:	460b      	mov	r3, r1
 804c45a:	70bb      	strb	r3, [r7, #2]
 804c45c:	4613      	mov	r3, r2
 804c45e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c460:	2300      	movs	r3, #0
 804c462:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c464:	2300      	movs	r3, #0
 804c466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 804c468:	687b      	ldr	r3, [r7, #4]
 804c46a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 804c46e:	787c      	ldrb	r4, [r7, #1]
 804c470:	78ba      	ldrb	r2, [r7, #2]
 804c472:	78f9      	ldrb	r1, [r7, #3]
 804c474:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804c476:	9302      	str	r3, [sp, #8]
 804c478:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 804c47c:	9301      	str	r3, [sp, #4]
 804c47e:	f897 3020 	ldrb.w	r3, [r7, #32]
 804c482:	9300      	str	r3, [sp, #0]
 804c484:	4623      	mov	r3, r4
 804c486:	f7f7 fe59 	bl	804413c <HAL_HCD_HC_Init>
 804c48a:	4603      	mov	r3, r0
 804c48c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 804c48e:	7bfb      	ldrb	r3, [r7, #15]
 804c490:	4618      	mov	r0, r3
 804c492:	f000 f8bd 	bl	804c610 <USBH_Get_USB_Status>
 804c496:	4603      	mov	r3, r0
 804c498:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c49a:	7bbb      	ldrb	r3, [r7, #14]
}
 804c49c:	4618      	mov	r0, r3
 804c49e:	3714      	adds	r7, #20
 804c4a0:	46bd      	mov	sp, r7
 804c4a2:	bd90      	pop	{r4, r7, pc}

0804c4a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804c4a4:	b580      	push	{r7, lr}
 804c4a6:	b084      	sub	sp, #16
 804c4a8:	af00      	add	r7, sp, #0
 804c4aa:	6078      	str	r0, [r7, #4]
 804c4ac:	460b      	mov	r3, r1
 804c4ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c4b0:	2300      	movs	r3, #0
 804c4b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c4b4:	2300      	movs	r3, #0
 804c4b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 804c4b8:	687b      	ldr	r3, [r7, #4]
 804c4ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c4be:	78fa      	ldrb	r2, [r7, #3]
 804c4c0:	4611      	mov	r1, r2
 804c4c2:	4618      	mov	r0, r3
 804c4c4:	f7f7 fec9 	bl	804425a <HAL_HCD_HC_Halt>
 804c4c8:	4603      	mov	r3, r0
 804c4ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804c4cc:	7bfb      	ldrb	r3, [r7, #15]
 804c4ce:	4618      	mov	r0, r3
 804c4d0:	f000 f89e 	bl	804c610 <USBH_Get_USB_Status>
 804c4d4:	4603      	mov	r3, r0
 804c4d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c4d8:	7bbb      	ldrb	r3, [r7, #14]
}
 804c4da:	4618      	mov	r0, r3
 804c4dc:	3710      	adds	r7, #16
 804c4de:	46bd      	mov	sp, r7
 804c4e0:	bd80      	pop	{r7, pc}

0804c4e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 804c4e2:	b590      	push	{r4, r7, lr}
 804c4e4:	b089      	sub	sp, #36	; 0x24
 804c4e6:	af04      	add	r7, sp, #16
 804c4e8:	6078      	str	r0, [r7, #4]
 804c4ea:	4608      	mov	r0, r1
 804c4ec:	4611      	mov	r1, r2
 804c4ee:	461a      	mov	r2, r3
 804c4f0:	4603      	mov	r3, r0
 804c4f2:	70fb      	strb	r3, [r7, #3]
 804c4f4:	460b      	mov	r3, r1
 804c4f6:	70bb      	strb	r3, [r7, #2]
 804c4f8:	4613      	mov	r3, r2
 804c4fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c4fc:	2300      	movs	r3, #0
 804c4fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c500:	2300      	movs	r3, #0
 804c502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 804c504:	687b      	ldr	r3, [r7, #4]
 804c506:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 804c50a:	787c      	ldrb	r4, [r7, #1]
 804c50c:	78ba      	ldrb	r2, [r7, #2]
 804c50e:	78f9      	ldrb	r1, [r7, #3]
 804c510:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804c514:	9303      	str	r3, [sp, #12]
 804c516:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804c518:	9302      	str	r3, [sp, #8]
 804c51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804c51c:	9301      	str	r3, [sp, #4]
 804c51e:	f897 3020 	ldrb.w	r3, [r7, #32]
 804c522:	9300      	str	r3, [sp, #0]
 804c524:	4623      	mov	r3, r4
 804c526:	f7f7 febb 	bl	80442a0 <HAL_HCD_HC_SubmitRequest>
 804c52a:	4603      	mov	r3, r0
 804c52c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 804c52e:	7bfb      	ldrb	r3, [r7, #15]
 804c530:	4618      	mov	r0, r3
 804c532:	f000 f86d 	bl	804c610 <USBH_Get_USB_Status>
 804c536:	4603      	mov	r3, r0
 804c538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c53a:	7bbb      	ldrb	r3, [r7, #14]
}
 804c53c:	4618      	mov	r0, r3
 804c53e:	3714      	adds	r7, #20
 804c540:	46bd      	mov	sp, r7
 804c542:	bd90      	pop	{r4, r7, pc}

0804c544 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804c544:	b580      	push	{r7, lr}
 804c546:	b082      	sub	sp, #8
 804c548:	af00      	add	r7, sp, #0
 804c54a:	6078      	str	r0, [r7, #4]
 804c54c:	460b      	mov	r3, r1
 804c54e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 804c550:	687b      	ldr	r3, [r7, #4]
 804c552:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c556:	78fa      	ldrb	r2, [r7, #3]
 804c558:	4611      	mov	r1, r2
 804c55a:	4618      	mov	r0, r3
 804c55c:	f7f8 f94f 	bl	80447fe <HAL_HCD_HC_GetURBState>
 804c560:	4603      	mov	r3, r0
}
 804c562:	4618      	mov	r0, r3
 804c564:	3708      	adds	r7, #8
 804c566:	46bd      	mov	sp, r7
 804c568:	bd80      	pop	{r7, pc}

0804c56a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 804c56a:	b580      	push	{r7, lr}
 804c56c:	b082      	sub	sp, #8
 804c56e:	af00      	add	r7, sp, #0
 804c570:	6078      	str	r0, [r7, #4]
 804c572:	460b      	mov	r3, r1
 804c574:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 804c576:	687b      	ldr	r3, [r7, #4]
 804c578:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 804c57c:	2b00      	cmp	r3, #0
 804c57e:	d103      	bne.n	804c588 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 804c580:	78fb      	ldrb	r3, [r7, #3]
 804c582:	4618      	mov	r0, r3
 804c584:	f000 f870 	bl	804c668 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 804c588:	20c8      	movs	r0, #200	; 0xc8
 804c58a:	f7f6 fc0f 	bl	8042dac <HAL_Delay>
  return USBH_OK;
 804c58e:	2300      	movs	r3, #0
}
 804c590:	4618      	mov	r0, r3
 804c592:	3708      	adds	r7, #8
 804c594:	46bd      	mov	sp, r7
 804c596:	bd80      	pop	{r7, pc}

0804c598 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 804c598:	b480      	push	{r7}
 804c59a:	b085      	sub	sp, #20
 804c59c:	af00      	add	r7, sp, #0
 804c59e:	6078      	str	r0, [r7, #4]
 804c5a0:	460b      	mov	r3, r1
 804c5a2:	70fb      	strb	r3, [r7, #3]
 804c5a4:	4613      	mov	r3, r2
 804c5a6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 804c5a8:	687b      	ldr	r3, [r7, #4]
 804c5aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c5ae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 804c5b0:	78fb      	ldrb	r3, [r7, #3]
 804c5b2:	68fa      	ldr	r2, [r7, #12]
 804c5b4:	212c      	movs	r1, #44	; 0x2c
 804c5b6:	fb01 f303 	mul.w	r3, r1, r3
 804c5ba:	4413      	add	r3, r2
 804c5bc:	333b      	adds	r3, #59	; 0x3b
 804c5be:	781b      	ldrb	r3, [r3, #0]
 804c5c0:	2b00      	cmp	r3, #0
 804c5c2:	d009      	beq.n	804c5d8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 804c5c4:	78fb      	ldrb	r3, [r7, #3]
 804c5c6:	68fa      	ldr	r2, [r7, #12]
 804c5c8:	212c      	movs	r1, #44	; 0x2c
 804c5ca:	fb01 f303 	mul.w	r3, r1, r3
 804c5ce:	4413      	add	r3, r2
 804c5d0:	3354      	adds	r3, #84	; 0x54
 804c5d2:	78ba      	ldrb	r2, [r7, #2]
 804c5d4:	701a      	strb	r2, [r3, #0]
 804c5d6:	e008      	b.n	804c5ea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 804c5d8:	78fb      	ldrb	r3, [r7, #3]
 804c5da:	68fa      	ldr	r2, [r7, #12]
 804c5dc:	212c      	movs	r1, #44	; 0x2c
 804c5de:	fb01 f303 	mul.w	r3, r1, r3
 804c5e2:	4413      	add	r3, r2
 804c5e4:	3355      	adds	r3, #85	; 0x55
 804c5e6:	78ba      	ldrb	r2, [r7, #2]
 804c5e8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 804c5ea:	2300      	movs	r3, #0
}
 804c5ec:	4618      	mov	r0, r3
 804c5ee:	3714      	adds	r7, #20
 804c5f0:	46bd      	mov	sp, r7
 804c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c5f6:	4770      	bx	lr

0804c5f8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 804c5f8:	b580      	push	{r7, lr}
 804c5fa:	b082      	sub	sp, #8
 804c5fc:	af00      	add	r7, sp, #0
 804c5fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 804c600:	6878      	ldr	r0, [r7, #4]
 804c602:	f7f6 fbd3 	bl	8042dac <HAL_Delay>
}
 804c606:	bf00      	nop
 804c608:	3708      	adds	r7, #8
 804c60a:	46bd      	mov	sp, r7
 804c60c:	bd80      	pop	{r7, pc}
	...

0804c610 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 804c610:	b480      	push	{r7}
 804c612:	b085      	sub	sp, #20
 804c614:	af00      	add	r7, sp, #0
 804c616:	4603      	mov	r3, r0
 804c618:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c61a:	2300      	movs	r3, #0
 804c61c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 804c61e:	79fb      	ldrb	r3, [r7, #7]
 804c620:	2b03      	cmp	r3, #3
 804c622:	d817      	bhi.n	804c654 <USBH_Get_USB_Status+0x44>
 804c624:	a201      	add	r2, pc, #4	; (adr r2, 804c62c <USBH_Get_USB_Status+0x1c>)
 804c626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804c62a:	bf00      	nop
 804c62c:	0804c63d 	.word	0x0804c63d
 804c630:	0804c643 	.word	0x0804c643
 804c634:	0804c649 	.word	0x0804c649
 804c638:	0804c64f 	.word	0x0804c64f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 804c63c:	2300      	movs	r3, #0
 804c63e:	73fb      	strb	r3, [r7, #15]
    break;
 804c640:	e00b      	b.n	804c65a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 804c642:	2302      	movs	r3, #2
 804c644:	73fb      	strb	r3, [r7, #15]
    break;
 804c646:	e008      	b.n	804c65a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 804c648:	2301      	movs	r3, #1
 804c64a:	73fb      	strb	r3, [r7, #15]
    break;
 804c64c:	e005      	b.n	804c65a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 804c64e:	2302      	movs	r3, #2
 804c650:	73fb      	strb	r3, [r7, #15]
    break;
 804c652:	e002      	b.n	804c65a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 804c654:	2302      	movs	r3, #2
 804c656:	73fb      	strb	r3, [r7, #15]
    break;
 804c658:	bf00      	nop
  }
  return usb_status;
 804c65a:	7bfb      	ldrb	r3, [r7, #15]
}
 804c65c:	4618      	mov	r0, r3
 804c65e:	3714      	adds	r7, #20
 804c660:	46bd      	mov	sp, r7
 804c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c666:	4770      	bx	lr

0804c668 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 804c668:	b580      	push	{r7, lr}
 804c66a:	b084      	sub	sp, #16
 804c66c:	af00      	add	r7, sp, #0
 804c66e:	4603      	mov	r3, r0
 804c670:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 804c672:	79fb      	ldrb	r3, [r7, #7]
 804c674:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 804c676:	79fb      	ldrb	r3, [r7, #7]
 804c678:	2b00      	cmp	r3, #0
 804c67a:	d102      	bne.n	804c682 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 804c67c:	2301      	movs	r3, #1
 804c67e:	73fb      	strb	r3, [r7, #15]
 804c680:	e001      	b.n	804c686 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 804c682:	2300      	movs	r3, #0
 804c684:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 804c686:	7bfb      	ldrb	r3, [r7, #15]
 804c688:	461a      	mov	r2, r3
 804c68a:	2110      	movs	r1, #16
 804c68c:	4803      	ldr	r0, [pc, #12]	; (804c69c <MX_DriverVbusHS+0x34>)
 804c68e:	f7f7 fcc1 	bl	8044014 <HAL_GPIO_WritePin>
}
 804c692:	bf00      	nop
 804c694:	3710      	adds	r7, #16
 804c696:	46bd      	mov	sp, r7
 804c698:	bd80      	pop	{r7, pc}
 804c69a:	bf00      	nop
 804c69c:	40020800 	.word	0x40020800

0804c6a0 <__errno>:
 804c6a0:	4b01      	ldr	r3, [pc, #4]	; (804c6a8 <__errno+0x8>)
 804c6a2:	6818      	ldr	r0, [r3, #0]
 804c6a4:	4770      	bx	lr
 804c6a6:	bf00      	nop
 804c6a8:	2000007c 	.word	0x2000007c

0804c6ac <__libc_init_array>:
 804c6ac:	b570      	push	{r4, r5, r6, lr}
 804c6ae:	4d0d      	ldr	r5, [pc, #52]	; (804c6e4 <__libc_init_array+0x38>)
 804c6b0:	4c0d      	ldr	r4, [pc, #52]	; (804c6e8 <__libc_init_array+0x3c>)
 804c6b2:	1b64      	subs	r4, r4, r5
 804c6b4:	10a4      	asrs	r4, r4, #2
 804c6b6:	2600      	movs	r6, #0
 804c6b8:	42a6      	cmp	r6, r4
 804c6ba:	d109      	bne.n	804c6d0 <__libc_init_array+0x24>
 804c6bc:	4d0b      	ldr	r5, [pc, #44]	; (804c6ec <__libc_init_array+0x40>)
 804c6be:	4c0c      	ldr	r4, [pc, #48]	; (804c6f0 <__libc_init_array+0x44>)
 804c6c0:	f001 fa10 	bl	804dae4 <_init>
 804c6c4:	1b64      	subs	r4, r4, r5
 804c6c6:	10a4      	asrs	r4, r4, #2
 804c6c8:	2600      	movs	r6, #0
 804c6ca:	42a6      	cmp	r6, r4
 804c6cc:	d105      	bne.n	804c6da <__libc_init_array+0x2e>
 804c6ce:	bd70      	pop	{r4, r5, r6, pc}
 804c6d0:	f855 3b04 	ldr.w	r3, [r5], #4
 804c6d4:	4798      	blx	r3
 804c6d6:	3601      	adds	r6, #1
 804c6d8:	e7ee      	b.n	804c6b8 <__libc_init_array+0xc>
 804c6da:	f855 3b04 	ldr.w	r3, [r5], #4
 804c6de:	4798      	blx	r3
 804c6e0:	3601      	adds	r6, #1
 804c6e2:	e7f2      	b.n	804c6ca <__libc_init_array+0x1e>
 804c6e4:	0804fb84 	.word	0x0804fb84
 804c6e8:	0804fb84 	.word	0x0804fb84
 804c6ec:	0804fb84 	.word	0x0804fb84
 804c6f0:	0804fb88 	.word	0x0804fb88

0804c6f4 <malloc>:
 804c6f4:	4b02      	ldr	r3, [pc, #8]	; (804c700 <malloc+0xc>)
 804c6f6:	4601      	mov	r1, r0
 804c6f8:	6818      	ldr	r0, [r3, #0]
 804c6fa:	f000 b87f 	b.w	804c7fc <_malloc_r>
 804c6fe:	bf00      	nop
 804c700:	2000007c 	.word	0x2000007c

0804c704 <free>:
 804c704:	4b02      	ldr	r3, [pc, #8]	; (804c710 <free+0xc>)
 804c706:	4601      	mov	r1, r0
 804c708:	6818      	ldr	r0, [r3, #0]
 804c70a:	f000 b80b 	b.w	804c724 <_free_r>
 804c70e:	bf00      	nop
 804c710:	2000007c 	.word	0x2000007c

0804c714 <memset>:
 804c714:	4402      	add	r2, r0
 804c716:	4603      	mov	r3, r0
 804c718:	4293      	cmp	r3, r2
 804c71a:	d100      	bne.n	804c71e <memset+0xa>
 804c71c:	4770      	bx	lr
 804c71e:	f803 1b01 	strb.w	r1, [r3], #1
 804c722:	e7f9      	b.n	804c718 <memset+0x4>

0804c724 <_free_r>:
 804c724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804c726:	2900      	cmp	r1, #0
 804c728:	d044      	beq.n	804c7b4 <_free_r+0x90>
 804c72a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804c72e:	9001      	str	r0, [sp, #4]
 804c730:	2b00      	cmp	r3, #0
 804c732:	f1a1 0404 	sub.w	r4, r1, #4
 804c736:	bfb8      	it	lt
 804c738:	18e4      	addlt	r4, r4, r3
 804c73a:	f000 fc71 	bl	804d020 <__malloc_lock>
 804c73e:	4a1e      	ldr	r2, [pc, #120]	; (804c7b8 <_free_r+0x94>)
 804c740:	9801      	ldr	r0, [sp, #4]
 804c742:	6813      	ldr	r3, [r2, #0]
 804c744:	b933      	cbnz	r3, 804c754 <_free_r+0x30>
 804c746:	6063      	str	r3, [r4, #4]
 804c748:	6014      	str	r4, [r2, #0]
 804c74a:	b003      	add	sp, #12
 804c74c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 804c750:	f000 bc6c 	b.w	804d02c <__malloc_unlock>
 804c754:	42a3      	cmp	r3, r4
 804c756:	d908      	bls.n	804c76a <_free_r+0x46>
 804c758:	6825      	ldr	r5, [r4, #0]
 804c75a:	1961      	adds	r1, r4, r5
 804c75c:	428b      	cmp	r3, r1
 804c75e:	bf01      	itttt	eq
 804c760:	6819      	ldreq	r1, [r3, #0]
 804c762:	685b      	ldreq	r3, [r3, #4]
 804c764:	1949      	addeq	r1, r1, r5
 804c766:	6021      	streq	r1, [r4, #0]
 804c768:	e7ed      	b.n	804c746 <_free_r+0x22>
 804c76a:	461a      	mov	r2, r3
 804c76c:	685b      	ldr	r3, [r3, #4]
 804c76e:	b10b      	cbz	r3, 804c774 <_free_r+0x50>
 804c770:	42a3      	cmp	r3, r4
 804c772:	d9fa      	bls.n	804c76a <_free_r+0x46>
 804c774:	6811      	ldr	r1, [r2, #0]
 804c776:	1855      	adds	r5, r2, r1
 804c778:	42a5      	cmp	r5, r4
 804c77a:	d10b      	bne.n	804c794 <_free_r+0x70>
 804c77c:	6824      	ldr	r4, [r4, #0]
 804c77e:	4421      	add	r1, r4
 804c780:	1854      	adds	r4, r2, r1
 804c782:	42a3      	cmp	r3, r4
 804c784:	6011      	str	r1, [r2, #0]
 804c786:	d1e0      	bne.n	804c74a <_free_r+0x26>
 804c788:	681c      	ldr	r4, [r3, #0]
 804c78a:	685b      	ldr	r3, [r3, #4]
 804c78c:	6053      	str	r3, [r2, #4]
 804c78e:	4421      	add	r1, r4
 804c790:	6011      	str	r1, [r2, #0]
 804c792:	e7da      	b.n	804c74a <_free_r+0x26>
 804c794:	d902      	bls.n	804c79c <_free_r+0x78>
 804c796:	230c      	movs	r3, #12
 804c798:	6003      	str	r3, [r0, #0]
 804c79a:	e7d6      	b.n	804c74a <_free_r+0x26>
 804c79c:	6825      	ldr	r5, [r4, #0]
 804c79e:	1961      	adds	r1, r4, r5
 804c7a0:	428b      	cmp	r3, r1
 804c7a2:	bf04      	itt	eq
 804c7a4:	6819      	ldreq	r1, [r3, #0]
 804c7a6:	685b      	ldreq	r3, [r3, #4]
 804c7a8:	6063      	str	r3, [r4, #4]
 804c7aa:	bf04      	itt	eq
 804c7ac:	1949      	addeq	r1, r1, r5
 804c7ae:	6021      	streq	r1, [r4, #0]
 804c7b0:	6054      	str	r4, [r2, #4]
 804c7b2:	e7ca      	b.n	804c74a <_free_r+0x26>
 804c7b4:	b003      	add	sp, #12
 804c7b6:	bd30      	pop	{r4, r5, pc}
 804c7b8:	20000d48 	.word	0x20000d48

0804c7bc <sbrk_aligned>:
 804c7bc:	b570      	push	{r4, r5, r6, lr}
 804c7be:	4e0e      	ldr	r6, [pc, #56]	; (804c7f8 <sbrk_aligned+0x3c>)
 804c7c0:	460c      	mov	r4, r1
 804c7c2:	6831      	ldr	r1, [r6, #0]
 804c7c4:	4605      	mov	r5, r0
 804c7c6:	b911      	cbnz	r1, 804c7ce <sbrk_aligned+0x12>
 804c7c8:	f000 f91a 	bl	804ca00 <_sbrk_r>
 804c7cc:	6030      	str	r0, [r6, #0]
 804c7ce:	4621      	mov	r1, r4
 804c7d0:	4628      	mov	r0, r5
 804c7d2:	f000 f915 	bl	804ca00 <_sbrk_r>
 804c7d6:	1c43      	adds	r3, r0, #1
 804c7d8:	d00a      	beq.n	804c7f0 <sbrk_aligned+0x34>
 804c7da:	1cc4      	adds	r4, r0, #3
 804c7dc:	f024 0403 	bic.w	r4, r4, #3
 804c7e0:	42a0      	cmp	r0, r4
 804c7e2:	d007      	beq.n	804c7f4 <sbrk_aligned+0x38>
 804c7e4:	1a21      	subs	r1, r4, r0
 804c7e6:	4628      	mov	r0, r5
 804c7e8:	f000 f90a 	bl	804ca00 <_sbrk_r>
 804c7ec:	3001      	adds	r0, #1
 804c7ee:	d101      	bne.n	804c7f4 <sbrk_aligned+0x38>
 804c7f0:	f04f 34ff 	mov.w	r4, #4294967295
 804c7f4:	4620      	mov	r0, r4
 804c7f6:	bd70      	pop	{r4, r5, r6, pc}
 804c7f8:	20000d4c 	.word	0x20000d4c

0804c7fc <_malloc_r>:
 804c7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804c800:	1ccd      	adds	r5, r1, #3
 804c802:	f025 0503 	bic.w	r5, r5, #3
 804c806:	3508      	adds	r5, #8
 804c808:	2d0c      	cmp	r5, #12
 804c80a:	bf38      	it	cc
 804c80c:	250c      	movcc	r5, #12
 804c80e:	2d00      	cmp	r5, #0
 804c810:	4607      	mov	r7, r0
 804c812:	db01      	blt.n	804c818 <_malloc_r+0x1c>
 804c814:	42a9      	cmp	r1, r5
 804c816:	d905      	bls.n	804c824 <_malloc_r+0x28>
 804c818:	230c      	movs	r3, #12
 804c81a:	603b      	str	r3, [r7, #0]
 804c81c:	2600      	movs	r6, #0
 804c81e:	4630      	mov	r0, r6
 804c820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804c824:	4e2e      	ldr	r6, [pc, #184]	; (804c8e0 <_malloc_r+0xe4>)
 804c826:	f000 fbfb 	bl	804d020 <__malloc_lock>
 804c82a:	6833      	ldr	r3, [r6, #0]
 804c82c:	461c      	mov	r4, r3
 804c82e:	bb34      	cbnz	r4, 804c87e <_malloc_r+0x82>
 804c830:	4629      	mov	r1, r5
 804c832:	4638      	mov	r0, r7
 804c834:	f7ff ffc2 	bl	804c7bc <sbrk_aligned>
 804c838:	1c43      	adds	r3, r0, #1
 804c83a:	4604      	mov	r4, r0
 804c83c:	d14d      	bne.n	804c8da <_malloc_r+0xde>
 804c83e:	6834      	ldr	r4, [r6, #0]
 804c840:	4626      	mov	r6, r4
 804c842:	2e00      	cmp	r6, #0
 804c844:	d140      	bne.n	804c8c8 <_malloc_r+0xcc>
 804c846:	6823      	ldr	r3, [r4, #0]
 804c848:	4631      	mov	r1, r6
 804c84a:	4638      	mov	r0, r7
 804c84c:	eb04 0803 	add.w	r8, r4, r3
 804c850:	f000 f8d6 	bl	804ca00 <_sbrk_r>
 804c854:	4580      	cmp	r8, r0
 804c856:	d13a      	bne.n	804c8ce <_malloc_r+0xd2>
 804c858:	6821      	ldr	r1, [r4, #0]
 804c85a:	3503      	adds	r5, #3
 804c85c:	1a6d      	subs	r5, r5, r1
 804c85e:	f025 0503 	bic.w	r5, r5, #3
 804c862:	3508      	adds	r5, #8
 804c864:	2d0c      	cmp	r5, #12
 804c866:	bf38      	it	cc
 804c868:	250c      	movcc	r5, #12
 804c86a:	4629      	mov	r1, r5
 804c86c:	4638      	mov	r0, r7
 804c86e:	f7ff ffa5 	bl	804c7bc <sbrk_aligned>
 804c872:	3001      	adds	r0, #1
 804c874:	d02b      	beq.n	804c8ce <_malloc_r+0xd2>
 804c876:	6823      	ldr	r3, [r4, #0]
 804c878:	442b      	add	r3, r5
 804c87a:	6023      	str	r3, [r4, #0]
 804c87c:	e00e      	b.n	804c89c <_malloc_r+0xa0>
 804c87e:	6822      	ldr	r2, [r4, #0]
 804c880:	1b52      	subs	r2, r2, r5
 804c882:	d41e      	bmi.n	804c8c2 <_malloc_r+0xc6>
 804c884:	2a0b      	cmp	r2, #11
 804c886:	d916      	bls.n	804c8b6 <_malloc_r+0xba>
 804c888:	1961      	adds	r1, r4, r5
 804c88a:	42a3      	cmp	r3, r4
 804c88c:	6025      	str	r5, [r4, #0]
 804c88e:	bf18      	it	ne
 804c890:	6059      	strne	r1, [r3, #4]
 804c892:	6863      	ldr	r3, [r4, #4]
 804c894:	bf08      	it	eq
 804c896:	6031      	streq	r1, [r6, #0]
 804c898:	5162      	str	r2, [r4, r5]
 804c89a:	604b      	str	r3, [r1, #4]
 804c89c:	4638      	mov	r0, r7
 804c89e:	f104 060b 	add.w	r6, r4, #11
 804c8a2:	f000 fbc3 	bl	804d02c <__malloc_unlock>
 804c8a6:	f026 0607 	bic.w	r6, r6, #7
 804c8aa:	1d23      	adds	r3, r4, #4
 804c8ac:	1af2      	subs	r2, r6, r3
 804c8ae:	d0b6      	beq.n	804c81e <_malloc_r+0x22>
 804c8b0:	1b9b      	subs	r3, r3, r6
 804c8b2:	50a3      	str	r3, [r4, r2]
 804c8b4:	e7b3      	b.n	804c81e <_malloc_r+0x22>
 804c8b6:	6862      	ldr	r2, [r4, #4]
 804c8b8:	42a3      	cmp	r3, r4
 804c8ba:	bf0c      	ite	eq
 804c8bc:	6032      	streq	r2, [r6, #0]
 804c8be:	605a      	strne	r2, [r3, #4]
 804c8c0:	e7ec      	b.n	804c89c <_malloc_r+0xa0>
 804c8c2:	4623      	mov	r3, r4
 804c8c4:	6864      	ldr	r4, [r4, #4]
 804c8c6:	e7b2      	b.n	804c82e <_malloc_r+0x32>
 804c8c8:	4634      	mov	r4, r6
 804c8ca:	6876      	ldr	r6, [r6, #4]
 804c8cc:	e7b9      	b.n	804c842 <_malloc_r+0x46>
 804c8ce:	230c      	movs	r3, #12
 804c8d0:	603b      	str	r3, [r7, #0]
 804c8d2:	4638      	mov	r0, r7
 804c8d4:	f000 fbaa 	bl	804d02c <__malloc_unlock>
 804c8d8:	e7a1      	b.n	804c81e <_malloc_r+0x22>
 804c8da:	6025      	str	r5, [r4, #0]
 804c8dc:	e7de      	b.n	804c89c <_malloc_r+0xa0>
 804c8de:	bf00      	nop
 804c8e0:	20000d48 	.word	0x20000d48

0804c8e4 <iprintf>:
 804c8e4:	b40f      	push	{r0, r1, r2, r3}
 804c8e6:	4b0a      	ldr	r3, [pc, #40]	; (804c910 <iprintf+0x2c>)
 804c8e8:	b513      	push	{r0, r1, r4, lr}
 804c8ea:	681c      	ldr	r4, [r3, #0]
 804c8ec:	b124      	cbz	r4, 804c8f8 <iprintf+0x14>
 804c8ee:	69a3      	ldr	r3, [r4, #24]
 804c8f0:	b913      	cbnz	r3, 804c8f8 <iprintf+0x14>
 804c8f2:	4620      	mov	r0, r4
 804c8f4:	f000 fa8e 	bl	804ce14 <__sinit>
 804c8f8:	ab05      	add	r3, sp, #20
 804c8fa:	9a04      	ldr	r2, [sp, #16]
 804c8fc:	68a1      	ldr	r1, [r4, #8]
 804c8fe:	9301      	str	r3, [sp, #4]
 804c900:	4620      	mov	r0, r4
 804c902:	f000 fd1f 	bl	804d344 <_vfiprintf_r>
 804c906:	b002      	add	sp, #8
 804c908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804c90c:	b004      	add	sp, #16
 804c90e:	4770      	bx	lr
 804c910:	2000007c 	.word	0x2000007c

0804c914 <_puts_r>:
 804c914:	b570      	push	{r4, r5, r6, lr}
 804c916:	460e      	mov	r6, r1
 804c918:	4605      	mov	r5, r0
 804c91a:	b118      	cbz	r0, 804c924 <_puts_r+0x10>
 804c91c:	6983      	ldr	r3, [r0, #24]
 804c91e:	b90b      	cbnz	r3, 804c924 <_puts_r+0x10>
 804c920:	f000 fa78 	bl	804ce14 <__sinit>
 804c924:	69ab      	ldr	r3, [r5, #24]
 804c926:	68ac      	ldr	r4, [r5, #8]
 804c928:	b913      	cbnz	r3, 804c930 <_puts_r+0x1c>
 804c92a:	4628      	mov	r0, r5
 804c92c:	f000 fa72 	bl	804ce14 <__sinit>
 804c930:	4b2c      	ldr	r3, [pc, #176]	; (804c9e4 <_puts_r+0xd0>)
 804c932:	429c      	cmp	r4, r3
 804c934:	d120      	bne.n	804c978 <_puts_r+0x64>
 804c936:	686c      	ldr	r4, [r5, #4]
 804c938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804c93a:	07db      	lsls	r3, r3, #31
 804c93c:	d405      	bmi.n	804c94a <_puts_r+0x36>
 804c93e:	89a3      	ldrh	r3, [r4, #12]
 804c940:	0598      	lsls	r0, r3, #22
 804c942:	d402      	bmi.n	804c94a <_puts_r+0x36>
 804c944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804c946:	f000 fb03 	bl	804cf50 <__retarget_lock_acquire_recursive>
 804c94a:	89a3      	ldrh	r3, [r4, #12]
 804c94c:	0719      	lsls	r1, r3, #28
 804c94e:	d51d      	bpl.n	804c98c <_puts_r+0x78>
 804c950:	6923      	ldr	r3, [r4, #16]
 804c952:	b1db      	cbz	r3, 804c98c <_puts_r+0x78>
 804c954:	3e01      	subs	r6, #1
 804c956:	68a3      	ldr	r3, [r4, #8]
 804c958:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 804c95c:	3b01      	subs	r3, #1
 804c95e:	60a3      	str	r3, [r4, #8]
 804c960:	bb39      	cbnz	r1, 804c9b2 <_puts_r+0x9e>
 804c962:	2b00      	cmp	r3, #0
 804c964:	da38      	bge.n	804c9d8 <_puts_r+0xc4>
 804c966:	4622      	mov	r2, r4
 804c968:	210a      	movs	r1, #10
 804c96a:	4628      	mov	r0, r5
 804c96c:	f000 f878 	bl	804ca60 <__swbuf_r>
 804c970:	3001      	adds	r0, #1
 804c972:	d011      	beq.n	804c998 <_puts_r+0x84>
 804c974:	250a      	movs	r5, #10
 804c976:	e011      	b.n	804c99c <_puts_r+0x88>
 804c978:	4b1b      	ldr	r3, [pc, #108]	; (804c9e8 <_puts_r+0xd4>)
 804c97a:	429c      	cmp	r4, r3
 804c97c:	d101      	bne.n	804c982 <_puts_r+0x6e>
 804c97e:	68ac      	ldr	r4, [r5, #8]
 804c980:	e7da      	b.n	804c938 <_puts_r+0x24>
 804c982:	4b1a      	ldr	r3, [pc, #104]	; (804c9ec <_puts_r+0xd8>)
 804c984:	429c      	cmp	r4, r3
 804c986:	bf08      	it	eq
 804c988:	68ec      	ldreq	r4, [r5, #12]
 804c98a:	e7d5      	b.n	804c938 <_puts_r+0x24>
 804c98c:	4621      	mov	r1, r4
 804c98e:	4628      	mov	r0, r5
 804c990:	f000 f8b8 	bl	804cb04 <__swsetup_r>
 804c994:	2800      	cmp	r0, #0
 804c996:	d0dd      	beq.n	804c954 <_puts_r+0x40>
 804c998:	f04f 35ff 	mov.w	r5, #4294967295
 804c99c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804c99e:	07da      	lsls	r2, r3, #31
 804c9a0:	d405      	bmi.n	804c9ae <_puts_r+0x9a>
 804c9a2:	89a3      	ldrh	r3, [r4, #12]
 804c9a4:	059b      	lsls	r3, r3, #22
 804c9a6:	d402      	bmi.n	804c9ae <_puts_r+0x9a>
 804c9a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804c9aa:	f000 fad2 	bl	804cf52 <__retarget_lock_release_recursive>
 804c9ae:	4628      	mov	r0, r5
 804c9b0:	bd70      	pop	{r4, r5, r6, pc}
 804c9b2:	2b00      	cmp	r3, #0
 804c9b4:	da04      	bge.n	804c9c0 <_puts_r+0xac>
 804c9b6:	69a2      	ldr	r2, [r4, #24]
 804c9b8:	429a      	cmp	r2, r3
 804c9ba:	dc06      	bgt.n	804c9ca <_puts_r+0xb6>
 804c9bc:	290a      	cmp	r1, #10
 804c9be:	d004      	beq.n	804c9ca <_puts_r+0xb6>
 804c9c0:	6823      	ldr	r3, [r4, #0]
 804c9c2:	1c5a      	adds	r2, r3, #1
 804c9c4:	6022      	str	r2, [r4, #0]
 804c9c6:	7019      	strb	r1, [r3, #0]
 804c9c8:	e7c5      	b.n	804c956 <_puts_r+0x42>
 804c9ca:	4622      	mov	r2, r4
 804c9cc:	4628      	mov	r0, r5
 804c9ce:	f000 f847 	bl	804ca60 <__swbuf_r>
 804c9d2:	3001      	adds	r0, #1
 804c9d4:	d1bf      	bne.n	804c956 <_puts_r+0x42>
 804c9d6:	e7df      	b.n	804c998 <_puts_r+0x84>
 804c9d8:	6823      	ldr	r3, [r4, #0]
 804c9da:	250a      	movs	r5, #10
 804c9dc:	1c5a      	adds	r2, r3, #1
 804c9de:	6022      	str	r2, [r4, #0]
 804c9e0:	701d      	strb	r5, [r3, #0]
 804c9e2:	e7db      	b.n	804c99c <_puts_r+0x88>
 804c9e4:	0804fb08 	.word	0x0804fb08
 804c9e8:	0804fb28 	.word	0x0804fb28
 804c9ec:	0804fae8 	.word	0x0804fae8

0804c9f0 <puts>:
 804c9f0:	4b02      	ldr	r3, [pc, #8]	; (804c9fc <puts+0xc>)
 804c9f2:	4601      	mov	r1, r0
 804c9f4:	6818      	ldr	r0, [r3, #0]
 804c9f6:	f7ff bf8d 	b.w	804c914 <_puts_r>
 804c9fa:	bf00      	nop
 804c9fc:	2000007c 	.word	0x2000007c

0804ca00 <_sbrk_r>:
 804ca00:	b538      	push	{r3, r4, r5, lr}
 804ca02:	4d06      	ldr	r5, [pc, #24]	; (804ca1c <_sbrk_r+0x1c>)
 804ca04:	2300      	movs	r3, #0
 804ca06:	4604      	mov	r4, r0
 804ca08:	4608      	mov	r0, r1
 804ca0a:	602b      	str	r3, [r5, #0]
 804ca0c:	f7f4 ff36 	bl	804187c <_sbrk>
 804ca10:	1c43      	adds	r3, r0, #1
 804ca12:	d102      	bne.n	804ca1a <_sbrk_r+0x1a>
 804ca14:	682b      	ldr	r3, [r5, #0]
 804ca16:	b103      	cbz	r3, 804ca1a <_sbrk_r+0x1a>
 804ca18:	6023      	str	r3, [r4, #0]
 804ca1a:	bd38      	pop	{r3, r4, r5, pc}
 804ca1c:	20000d54 	.word	0x20000d54

0804ca20 <siprintf>:
 804ca20:	b40e      	push	{r1, r2, r3}
 804ca22:	b500      	push	{lr}
 804ca24:	b09c      	sub	sp, #112	; 0x70
 804ca26:	ab1d      	add	r3, sp, #116	; 0x74
 804ca28:	9002      	str	r0, [sp, #8]
 804ca2a:	9006      	str	r0, [sp, #24]
 804ca2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 804ca30:	4809      	ldr	r0, [pc, #36]	; (804ca58 <siprintf+0x38>)
 804ca32:	9107      	str	r1, [sp, #28]
 804ca34:	9104      	str	r1, [sp, #16]
 804ca36:	4909      	ldr	r1, [pc, #36]	; (804ca5c <siprintf+0x3c>)
 804ca38:	f853 2b04 	ldr.w	r2, [r3], #4
 804ca3c:	9105      	str	r1, [sp, #20]
 804ca3e:	6800      	ldr	r0, [r0, #0]
 804ca40:	9301      	str	r3, [sp, #4]
 804ca42:	a902      	add	r1, sp, #8
 804ca44:	f000 fb54 	bl	804d0f0 <_svfiprintf_r>
 804ca48:	9b02      	ldr	r3, [sp, #8]
 804ca4a:	2200      	movs	r2, #0
 804ca4c:	701a      	strb	r2, [r3, #0]
 804ca4e:	b01c      	add	sp, #112	; 0x70
 804ca50:	f85d eb04 	ldr.w	lr, [sp], #4
 804ca54:	b003      	add	sp, #12
 804ca56:	4770      	bx	lr
 804ca58:	2000007c 	.word	0x2000007c
 804ca5c:	ffff0208 	.word	0xffff0208

0804ca60 <__swbuf_r>:
 804ca60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804ca62:	460e      	mov	r6, r1
 804ca64:	4614      	mov	r4, r2
 804ca66:	4605      	mov	r5, r0
 804ca68:	b118      	cbz	r0, 804ca72 <__swbuf_r+0x12>
 804ca6a:	6983      	ldr	r3, [r0, #24]
 804ca6c:	b90b      	cbnz	r3, 804ca72 <__swbuf_r+0x12>
 804ca6e:	f000 f9d1 	bl	804ce14 <__sinit>
 804ca72:	4b21      	ldr	r3, [pc, #132]	; (804caf8 <__swbuf_r+0x98>)
 804ca74:	429c      	cmp	r4, r3
 804ca76:	d12b      	bne.n	804cad0 <__swbuf_r+0x70>
 804ca78:	686c      	ldr	r4, [r5, #4]
 804ca7a:	69a3      	ldr	r3, [r4, #24]
 804ca7c:	60a3      	str	r3, [r4, #8]
 804ca7e:	89a3      	ldrh	r3, [r4, #12]
 804ca80:	071a      	lsls	r2, r3, #28
 804ca82:	d52f      	bpl.n	804cae4 <__swbuf_r+0x84>
 804ca84:	6923      	ldr	r3, [r4, #16]
 804ca86:	b36b      	cbz	r3, 804cae4 <__swbuf_r+0x84>
 804ca88:	6923      	ldr	r3, [r4, #16]
 804ca8a:	6820      	ldr	r0, [r4, #0]
 804ca8c:	1ac0      	subs	r0, r0, r3
 804ca8e:	6963      	ldr	r3, [r4, #20]
 804ca90:	b2f6      	uxtb	r6, r6
 804ca92:	4283      	cmp	r3, r0
 804ca94:	4637      	mov	r7, r6
 804ca96:	dc04      	bgt.n	804caa2 <__swbuf_r+0x42>
 804ca98:	4621      	mov	r1, r4
 804ca9a:	4628      	mov	r0, r5
 804ca9c:	f000 f926 	bl	804ccec <_fflush_r>
 804caa0:	bb30      	cbnz	r0, 804caf0 <__swbuf_r+0x90>
 804caa2:	68a3      	ldr	r3, [r4, #8]
 804caa4:	3b01      	subs	r3, #1
 804caa6:	60a3      	str	r3, [r4, #8]
 804caa8:	6823      	ldr	r3, [r4, #0]
 804caaa:	1c5a      	adds	r2, r3, #1
 804caac:	6022      	str	r2, [r4, #0]
 804caae:	701e      	strb	r6, [r3, #0]
 804cab0:	6963      	ldr	r3, [r4, #20]
 804cab2:	3001      	adds	r0, #1
 804cab4:	4283      	cmp	r3, r0
 804cab6:	d004      	beq.n	804cac2 <__swbuf_r+0x62>
 804cab8:	89a3      	ldrh	r3, [r4, #12]
 804caba:	07db      	lsls	r3, r3, #31
 804cabc:	d506      	bpl.n	804cacc <__swbuf_r+0x6c>
 804cabe:	2e0a      	cmp	r6, #10
 804cac0:	d104      	bne.n	804cacc <__swbuf_r+0x6c>
 804cac2:	4621      	mov	r1, r4
 804cac4:	4628      	mov	r0, r5
 804cac6:	f000 f911 	bl	804ccec <_fflush_r>
 804caca:	b988      	cbnz	r0, 804caf0 <__swbuf_r+0x90>
 804cacc:	4638      	mov	r0, r7
 804cace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804cad0:	4b0a      	ldr	r3, [pc, #40]	; (804cafc <__swbuf_r+0x9c>)
 804cad2:	429c      	cmp	r4, r3
 804cad4:	d101      	bne.n	804cada <__swbuf_r+0x7a>
 804cad6:	68ac      	ldr	r4, [r5, #8]
 804cad8:	e7cf      	b.n	804ca7a <__swbuf_r+0x1a>
 804cada:	4b09      	ldr	r3, [pc, #36]	; (804cb00 <__swbuf_r+0xa0>)
 804cadc:	429c      	cmp	r4, r3
 804cade:	bf08      	it	eq
 804cae0:	68ec      	ldreq	r4, [r5, #12]
 804cae2:	e7ca      	b.n	804ca7a <__swbuf_r+0x1a>
 804cae4:	4621      	mov	r1, r4
 804cae6:	4628      	mov	r0, r5
 804cae8:	f000 f80c 	bl	804cb04 <__swsetup_r>
 804caec:	2800      	cmp	r0, #0
 804caee:	d0cb      	beq.n	804ca88 <__swbuf_r+0x28>
 804caf0:	f04f 37ff 	mov.w	r7, #4294967295
 804caf4:	e7ea      	b.n	804cacc <__swbuf_r+0x6c>
 804caf6:	bf00      	nop
 804caf8:	0804fb08 	.word	0x0804fb08
 804cafc:	0804fb28 	.word	0x0804fb28
 804cb00:	0804fae8 	.word	0x0804fae8

0804cb04 <__swsetup_r>:
 804cb04:	4b32      	ldr	r3, [pc, #200]	; (804cbd0 <__swsetup_r+0xcc>)
 804cb06:	b570      	push	{r4, r5, r6, lr}
 804cb08:	681d      	ldr	r5, [r3, #0]
 804cb0a:	4606      	mov	r6, r0
 804cb0c:	460c      	mov	r4, r1
 804cb0e:	b125      	cbz	r5, 804cb1a <__swsetup_r+0x16>
 804cb10:	69ab      	ldr	r3, [r5, #24]
 804cb12:	b913      	cbnz	r3, 804cb1a <__swsetup_r+0x16>
 804cb14:	4628      	mov	r0, r5
 804cb16:	f000 f97d 	bl	804ce14 <__sinit>
 804cb1a:	4b2e      	ldr	r3, [pc, #184]	; (804cbd4 <__swsetup_r+0xd0>)
 804cb1c:	429c      	cmp	r4, r3
 804cb1e:	d10f      	bne.n	804cb40 <__swsetup_r+0x3c>
 804cb20:	686c      	ldr	r4, [r5, #4]
 804cb22:	89a3      	ldrh	r3, [r4, #12]
 804cb24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804cb28:	0719      	lsls	r1, r3, #28
 804cb2a:	d42c      	bmi.n	804cb86 <__swsetup_r+0x82>
 804cb2c:	06dd      	lsls	r5, r3, #27
 804cb2e:	d411      	bmi.n	804cb54 <__swsetup_r+0x50>
 804cb30:	2309      	movs	r3, #9
 804cb32:	6033      	str	r3, [r6, #0]
 804cb34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 804cb38:	81a3      	strh	r3, [r4, #12]
 804cb3a:	f04f 30ff 	mov.w	r0, #4294967295
 804cb3e:	e03e      	b.n	804cbbe <__swsetup_r+0xba>
 804cb40:	4b25      	ldr	r3, [pc, #148]	; (804cbd8 <__swsetup_r+0xd4>)
 804cb42:	429c      	cmp	r4, r3
 804cb44:	d101      	bne.n	804cb4a <__swsetup_r+0x46>
 804cb46:	68ac      	ldr	r4, [r5, #8]
 804cb48:	e7eb      	b.n	804cb22 <__swsetup_r+0x1e>
 804cb4a:	4b24      	ldr	r3, [pc, #144]	; (804cbdc <__swsetup_r+0xd8>)
 804cb4c:	429c      	cmp	r4, r3
 804cb4e:	bf08      	it	eq
 804cb50:	68ec      	ldreq	r4, [r5, #12]
 804cb52:	e7e6      	b.n	804cb22 <__swsetup_r+0x1e>
 804cb54:	0758      	lsls	r0, r3, #29
 804cb56:	d512      	bpl.n	804cb7e <__swsetup_r+0x7a>
 804cb58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804cb5a:	b141      	cbz	r1, 804cb6e <__swsetup_r+0x6a>
 804cb5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804cb60:	4299      	cmp	r1, r3
 804cb62:	d002      	beq.n	804cb6a <__swsetup_r+0x66>
 804cb64:	4630      	mov	r0, r6
 804cb66:	f7ff fddd 	bl	804c724 <_free_r>
 804cb6a:	2300      	movs	r3, #0
 804cb6c:	6363      	str	r3, [r4, #52]	; 0x34
 804cb6e:	89a3      	ldrh	r3, [r4, #12]
 804cb70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 804cb74:	81a3      	strh	r3, [r4, #12]
 804cb76:	2300      	movs	r3, #0
 804cb78:	6063      	str	r3, [r4, #4]
 804cb7a:	6923      	ldr	r3, [r4, #16]
 804cb7c:	6023      	str	r3, [r4, #0]
 804cb7e:	89a3      	ldrh	r3, [r4, #12]
 804cb80:	f043 0308 	orr.w	r3, r3, #8
 804cb84:	81a3      	strh	r3, [r4, #12]
 804cb86:	6923      	ldr	r3, [r4, #16]
 804cb88:	b94b      	cbnz	r3, 804cb9e <__swsetup_r+0x9a>
 804cb8a:	89a3      	ldrh	r3, [r4, #12]
 804cb8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 804cb90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804cb94:	d003      	beq.n	804cb9e <__swsetup_r+0x9a>
 804cb96:	4621      	mov	r1, r4
 804cb98:	4630      	mov	r0, r6
 804cb9a:	f000 fa01 	bl	804cfa0 <__smakebuf_r>
 804cb9e:	89a0      	ldrh	r0, [r4, #12]
 804cba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804cba4:	f010 0301 	ands.w	r3, r0, #1
 804cba8:	d00a      	beq.n	804cbc0 <__swsetup_r+0xbc>
 804cbaa:	2300      	movs	r3, #0
 804cbac:	60a3      	str	r3, [r4, #8]
 804cbae:	6963      	ldr	r3, [r4, #20]
 804cbb0:	425b      	negs	r3, r3
 804cbb2:	61a3      	str	r3, [r4, #24]
 804cbb4:	6923      	ldr	r3, [r4, #16]
 804cbb6:	b943      	cbnz	r3, 804cbca <__swsetup_r+0xc6>
 804cbb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 804cbbc:	d1ba      	bne.n	804cb34 <__swsetup_r+0x30>
 804cbbe:	bd70      	pop	{r4, r5, r6, pc}
 804cbc0:	0781      	lsls	r1, r0, #30
 804cbc2:	bf58      	it	pl
 804cbc4:	6963      	ldrpl	r3, [r4, #20]
 804cbc6:	60a3      	str	r3, [r4, #8]
 804cbc8:	e7f4      	b.n	804cbb4 <__swsetup_r+0xb0>
 804cbca:	2000      	movs	r0, #0
 804cbcc:	e7f7      	b.n	804cbbe <__swsetup_r+0xba>
 804cbce:	bf00      	nop
 804cbd0:	2000007c 	.word	0x2000007c
 804cbd4:	0804fb08 	.word	0x0804fb08
 804cbd8:	0804fb28 	.word	0x0804fb28
 804cbdc:	0804fae8 	.word	0x0804fae8

0804cbe0 <__sflush_r>:
 804cbe0:	898a      	ldrh	r2, [r1, #12]
 804cbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804cbe6:	4605      	mov	r5, r0
 804cbe8:	0710      	lsls	r0, r2, #28
 804cbea:	460c      	mov	r4, r1
 804cbec:	d458      	bmi.n	804cca0 <__sflush_r+0xc0>
 804cbee:	684b      	ldr	r3, [r1, #4]
 804cbf0:	2b00      	cmp	r3, #0
 804cbf2:	dc05      	bgt.n	804cc00 <__sflush_r+0x20>
 804cbf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 804cbf6:	2b00      	cmp	r3, #0
 804cbf8:	dc02      	bgt.n	804cc00 <__sflush_r+0x20>
 804cbfa:	2000      	movs	r0, #0
 804cbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804cc00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804cc02:	2e00      	cmp	r6, #0
 804cc04:	d0f9      	beq.n	804cbfa <__sflush_r+0x1a>
 804cc06:	2300      	movs	r3, #0
 804cc08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 804cc0c:	682f      	ldr	r7, [r5, #0]
 804cc0e:	602b      	str	r3, [r5, #0]
 804cc10:	d032      	beq.n	804cc78 <__sflush_r+0x98>
 804cc12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804cc14:	89a3      	ldrh	r3, [r4, #12]
 804cc16:	075a      	lsls	r2, r3, #29
 804cc18:	d505      	bpl.n	804cc26 <__sflush_r+0x46>
 804cc1a:	6863      	ldr	r3, [r4, #4]
 804cc1c:	1ac0      	subs	r0, r0, r3
 804cc1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804cc20:	b10b      	cbz	r3, 804cc26 <__sflush_r+0x46>
 804cc22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804cc24:	1ac0      	subs	r0, r0, r3
 804cc26:	2300      	movs	r3, #0
 804cc28:	4602      	mov	r2, r0
 804cc2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804cc2c:	6a21      	ldr	r1, [r4, #32]
 804cc2e:	4628      	mov	r0, r5
 804cc30:	47b0      	blx	r6
 804cc32:	1c43      	adds	r3, r0, #1
 804cc34:	89a3      	ldrh	r3, [r4, #12]
 804cc36:	d106      	bne.n	804cc46 <__sflush_r+0x66>
 804cc38:	6829      	ldr	r1, [r5, #0]
 804cc3a:	291d      	cmp	r1, #29
 804cc3c:	d82c      	bhi.n	804cc98 <__sflush_r+0xb8>
 804cc3e:	4a2a      	ldr	r2, [pc, #168]	; (804cce8 <__sflush_r+0x108>)
 804cc40:	40ca      	lsrs	r2, r1
 804cc42:	07d6      	lsls	r6, r2, #31
 804cc44:	d528      	bpl.n	804cc98 <__sflush_r+0xb8>
 804cc46:	2200      	movs	r2, #0
 804cc48:	6062      	str	r2, [r4, #4]
 804cc4a:	04d9      	lsls	r1, r3, #19
 804cc4c:	6922      	ldr	r2, [r4, #16]
 804cc4e:	6022      	str	r2, [r4, #0]
 804cc50:	d504      	bpl.n	804cc5c <__sflush_r+0x7c>
 804cc52:	1c42      	adds	r2, r0, #1
 804cc54:	d101      	bne.n	804cc5a <__sflush_r+0x7a>
 804cc56:	682b      	ldr	r3, [r5, #0]
 804cc58:	b903      	cbnz	r3, 804cc5c <__sflush_r+0x7c>
 804cc5a:	6560      	str	r0, [r4, #84]	; 0x54
 804cc5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804cc5e:	602f      	str	r7, [r5, #0]
 804cc60:	2900      	cmp	r1, #0
 804cc62:	d0ca      	beq.n	804cbfa <__sflush_r+0x1a>
 804cc64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804cc68:	4299      	cmp	r1, r3
 804cc6a:	d002      	beq.n	804cc72 <__sflush_r+0x92>
 804cc6c:	4628      	mov	r0, r5
 804cc6e:	f7ff fd59 	bl	804c724 <_free_r>
 804cc72:	2000      	movs	r0, #0
 804cc74:	6360      	str	r0, [r4, #52]	; 0x34
 804cc76:	e7c1      	b.n	804cbfc <__sflush_r+0x1c>
 804cc78:	6a21      	ldr	r1, [r4, #32]
 804cc7a:	2301      	movs	r3, #1
 804cc7c:	4628      	mov	r0, r5
 804cc7e:	47b0      	blx	r6
 804cc80:	1c41      	adds	r1, r0, #1
 804cc82:	d1c7      	bne.n	804cc14 <__sflush_r+0x34>
 804cc84:	682b      	ldr	r3, [r5, #0]
 804cc86:	2b00      	cmp	r3, #0
 804cc88:	d0c4      	beq.n	804cc14 <__sflush_r+0x34>
 804cc8a:	2b1d      	cmp	r3, #29
 804cc8c:	d001      	beq.n	804cc92 <__sflush_r+0xb2>
 804cc8e:	2b16      	cmp	r3, #22
 804cc90:	d101      	bne.n	804cc96 <__sflush_r+0xb6>
 804cc92:	602f      	str	r7, [r5, #0]
 804cc94:	e7b1      	b.n	804cbfa <__sflush_r+0x1a>
 804cc96:	89a3      	ldrh	r3, [r4, #12]
 804cc98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804cc9c:	81a3      	strh	r3, [r4, #12]
 804cc9e:	e7ad      	b.n	804cbfc <__sflush_r+0x1c>
 804cca0:	690f      	ldr	r7, [r1, #16]
 804cca2:	2f00      	cmp	r7, #0
 804cca4:	d0a9      	beq.n	804cbfa <__sflush_r+0x1a>
 804cca6:	0793      	lsls	r3, r2, #30
 804cca8:	680e      	ldr	r6, [r1, #0]
 804ccaa:	bf08      	it	eq
 804ccac:	694b      	ldreq	r3, [r1, #20]
 804ccae:	600f      	str	r7, [r1, #0]
 804ccb0:	bf18      	it	ne
 804ccb2:	2300      	movne	r3, #0
 804ccb4:	eba6 0807 	sub.w	r8, r6, r7
 804ccb8:	608b      	str	r3, [r1, #8]
 804ccba:	f1b8 0f00 	cmp.w	r8, #0
 804ccbe:	dd9c      	ble.n	804cbfa <__sflush_r+0x1a>
 804ccc0:	6a21      	ldr	r1, [r4, #32]
 804ccc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 804ccc4:	4643      	mov	r3, r8
 804ccc6:	463a      	mov	r2, r7
 804ccc8:	4628      	mov	r0, r5
 804ccca:	47b0      	blx	r6
 804cccc:	2800      	cmp	r0, #0
 804ccce:	dc06      	bgt.n	804ccde <__sflush_r+0xfe>
 804ccd0:	89a3      	ldrh	r3, [r4, #12]
 804ccd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804ccd6:	81a3      	strh	r3, [r4, #12]
 804ccd8:	f04f 30ff 	mov.w	r0, #4294967295
 804ccdc:	e78e      	b.n	804cbfc <__sflush_r+0x1c>
 804ccde:	4407      	add	r7, r0
 804cce0:	eba8 0800 	sub.w	r8, r8, r0
 804cce4:	e7e9      	b.n	804ccba <__sflush_r+0xda>
 804cce6:	bf00      	nop
 804cce8:	20400001 	.word	0x20400001

0804ccec <_fflush_r>:
 804ccec:	b538      	push	{r3, r4, r5, lr}
 804ccee:	690b      	ldr	r3, [r1, #16]
 804ccf0:	4605      	mov	r5, r0
 804ccf2:	460c      	mov	r4, r1
 804ccf4:	b913      	cbnz	r3, 804ccfc <_fflush_r+0x10>
 804ccf6:	2500      	movs	r5, #0
 804ccf8:	4628      	mov	r0, r5
 804ccfa:	bd38      	pop	{r3, r4, r5, pc}
 804ccfc:	b118      	cbz	r0, 804cd06 <_fflush_r+0x1a>
 804ccfe:	6983      	ldr	r3, [r0, #24]
 804cd00:	b90b      	cbnz	r3, 804cd06 <_fflush_r+0x1a>
 804cd02:	f000 f887 	bl	804ce14 <__sinit>
 804cd06:	4b14      	ldr	r3, [pc, #80]	; (804cd58 <_fflush_r+0x6c>)
 804cd08:	429c      	cmp	r4, r3
 804cd0a:	d11b      	bne.n	804cd44 <_fflush_r+0x58>
 804cd0c:	686c      	ldr	r4, [r5, #4]
 804cd0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804cd12:	2b00      	cmp	r3, #0
 804cd14:	d0ef      	beq.n	804ccf6 <_fflush_r+0xa>
 804cd16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 804cd18:	07d0      	lsls	r0, r2, #31
 804cd1a:	d404      	bmi.n	804cd26 <_fflush_r+0x3a>
 804cd1c:	0599      	lsls	r1, r3, #22
 804cd1e:	d402      	bmi.n	804cd26 <_fflush_r+0x3a>
 804cd20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804cd22:	f000 f915 	bl	804cf50 <__retarget_lock_acquire_recursive>
 804cd26:	4628      	mov	r0, r5
 804cd28:	4621      	mov	r1, r4
 804cd2a:	f7ff ff59 	bl	804cbe0 <__sflush_r>
 804cd2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804cd30:	07da      	lsls	r2, r3, #31
 804cd32:	4605      	mov	r5, r0
 804cd34:	d4e0      	bmi.n	804ccf8 <_fflush_r+0xc>
 804cd36:	89a3      	ldrh	r3, [r4, #12]
 804cd38:	059b      	lsls	r3, r3, #22
 804cd3a:	d4dd      	bmi.n	804ccf8 <_fflush_r+0xc>
 804cd3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804cd3e:	f000 f908 	bl	804cf52 <__retarget_lock_release_recursive>
 804cd42:	e7d9      	b.n	804ccf8 <_fflush_r+0xc>
 804cd44:	4b05      	ldr	r3, [pc, #20]	; (804cd5c <_fflush_r+0x70>)
 804cd46:	429c      	cmp	r4, r3
 804cd48:	d101      	bne.n	804cd4e <_fflush_r+0x62>
 804cd4a:	68ac      	ldr	r4, [r5, #8]
 804cd4c:	e7df      	b.n	804cd0e <_fflush_r+0x22>
 804cd4e:	4b04      	ldr	r3, [pc, #16]	; (804cd60 <_fflush_r+0x74>)
 804cd50:	429c      	cmp	r4, r3
 804cd52:	bf08      	it	eq
 804cd54:	68ec      	ldreq	r4, [r5, #12]
 804cd56:	e7da      	b.n	804cd0e <_fflush_r+0x22>
 804cd58:	0804fb08 	.word	0x0804fb08
 804cd5c:	0804fb28 	.word	0x0804fb28
 804cd60:	0804fae8 	.word	0x0804fae8

0804cd64 <std>:
 804cd64:	2300      	movs	r3, #0
 804cd66:	b510      	push	{r4, lr}
 804cd68:	4604      	mov	r4, r0
 804cd6a:	e9c0 3300 	strd	r3, r3, [r0]
 804cd6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804cd72:	6083      	str	r3, [r0, #8]
 804cd74:	8181      	strh	r1, [r0, #12]
 804cd76:	6643      	str	r3, [r0, #100]	; 0x64
 804cd78:	81c2      	strh	r2, [r0, #14]
 804cd7a:	6183      	str	r3, [r0, #24]
 804cd7c:	4619      	mov	r1, r3
 804cd7e:	2208      	movs	r2, #8
 804cd80:	305c      	adds	r0, #92	; 0x5c
 804cd82:	f7ff fcc7 	bl	804c714 <memset>
 804cd86:	4b05      	ldr	r3, [pc, #20]	; (804cd9c <std+0x38>)
 804cd88:	6263      	str	r3, [r4, #36]	; 0x24
 804cd8a:	4b05      	ldr	r3, [pc, #20]	; (804cda0 <std+0x3c>)
 804cd8c:	62a3      	str	r3, [r4, #40]	; 0x28
 804cd8e:	4b05      	ldr	r3, [pc, #20]	; (804cda4 <std+0x40>)
 804cd90:	62e3      	str	r3, [r4, #44]	; 0x2c
 804cd92:	4b05      	ldr	r3, [pc, #20]	; (804cda8 <std+0x44>)
 804cd94:	6224      	str	r4, [r4, #32]
 804cd96:	6323      	str	r3, [r4, #48]	; 0x30
 804cd98:	bd10      	pop	{r4, pc}
 804cd9a:	bf00      	nop
 804cd9c:	0804d8cd 	.word	0x0804d8cd
 804cda0:	0804d8ef 	.word	0x0804d8ef
 804cda4:	0804d927 	.word	0x0804d927
 804cda8:	0804d94b 	.word	0x0804d94b

0804cdac <_cleanup_r>:
 804cdac:	4901      	ldr	r1, [pc, #4]	; (804cdb4 <_cleanup_r+0x8>)
 804cdae:	f000 b8af 	b.w	804cf10 <_fwalk_reent>
 804cdb2:	bf00      	nop
 804cdb4:	0804cced 	.word	0x0804cced

0804cdb8 <__sfmoreglue>:
 804cdb8:	b570      	push	{r4, r5, r6, lr}
 804cdba:	2268      	movs	r2, #104	; 0x68
 804cdbc:	1e4d      	subs	r5, r1, #1
 804cdbe:	4355      	muls	r5, r2
 804cdc0:	460e      	mov	r6, r1
 804cdc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 804cdc6:	f7ff fd19 	bl	804c7fc <_malloc_r>
 804cdca:	4604      	mov	r4, r0
 804cdcc:	b140      	cbz	r0, 804cde0 <__sfmoreglue+0x28>
 804cdce:	2100      	movs	r1, #0
 804cdd0:	e9c0 1600 	strd	r1, r6, [r0]
 804cdd4:	300c      	adds	r0, #12
 804cdd6:	60a0      	str	r0, [r4, #8]
 804cdd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 804cddc:	f7ff fc9a 	bl	804c714 <memset>
 804cde0:	4620      	mov	r0, r4
 804cde2:	bd70      	pop	{r4, r5, r6, pc}

0804cde4 <__sfp_lock_acquire>:
 804cde4:	4801      	ldr	r0, [pc, #4]	; (804cdec <__sfp_lock_acquire+0x8>)
 804cde6:	f000 b8b3 	b.w	804cf50 <__retarget_lock_acquire_recursive>
 804cdea:	bf00      	nop
 804cdec:	20000d51 	.word	0x20000d51

0804cdf0 <__sfp_lock_release>:
 804cdf0:	4801      	ldr	r0, [pc, #4]	; (804cdf8 <__sfp_lock_release+0x8>)
 804cdf2:	f000 b8ae 	b.w	804cf52 <__retarget_lock_release_recursive>
 804cdf6:	bf00      	nop
 804cdf8:	20000d51 	.word	0x20000d51

0804cdfc <__sinit_lock_acquire>:
 804cdfc:	4801      	ldr	r0, [pc, #4]	; (804ce04 <__sinit_lock_acquire+0x8>)
 804cdfe:	f000 b8a7 	b.w	804cf50 <__retarget_lock_acquire_recursive>
 804ce02:	bf00      	nop
 804ce04:	20000d52 	.word	0x20000d52

0804ce08 <__sinit_lock_release>:
 804ce08:	4801      	ldr	r0, [pc, #4]	; (804ce10 <__sinit_lock_release+0x8>)
 804ce0a:	f000 b8a2 	b.w	804cf52 <__retarget_lock_release_recursive>
 804ce0e:	bf00      	nop
 804ce10:	20000d52 	.word	0x20000d52

0804ce14 <__sinit>:
 804ce14:	b510      	push	{r4, lr}
 804ce16:	4604      	mov	r4, r0
 804ce18:	f7ff fff0 	bl	804cdfc <__sinit_lock_acquire>
 804ce1c:	69a3      	ldr	r3, [r4, #24]
 804ce1e:	b11b      	cbz	r3, 804ce28 <__sinit+0x14>
 804ce20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804ce24:	f7ff bff0 	b.w	804ce08 <__sinit_lock_release>
 804ce28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 804ce2c:	6523      	str	r3, [r4, #80]	; 0x50
 804ce2e:	4b13      	ldr	r3, [pc, #76]	; (804ce7c <__sinit+0x68>)
 804ce30:	4a13      	ldr	r2, [pc, #76]	; (804ce80 <__sinit+0x6c>)
 804ce32:	681b      	ldr	r3, [r3, #0]
 804ce34:	62a2      	str	r2, [r4, #40]	; 0x28
 804ce36:	42a3      	cmp	r3, r4
 804ce38:	bf04      	itt	eq
 804ce3a:	2301      	moveq	r3, #1
 804ce3c:	61a3      	streq	r3, [r4, #24]
 804ce3e:	4620      	mov	r0, r4
 804ce40:	f000 f820 	bl	804ce84 <__sfp>
 804ce44:	6060      	str	r0, [r4, #4]
 804ce46:	4620      	mov	r0, r4
 804ce48:	f000 f81c 	bl	804ce84 <__sfp>
 804ce4c:	60a0      	str	r0, [r4, #8]
 804ce4e:	4620      	mov	r0, r4
 804ce50:	f000 f818 	bl	804ce84 <__sfp>
 804ce54:	2200      	movs	r2, #0
 804ce56:	60e0      	str	r0, [r4, #12]
 804ce58:	2104      	movs	r1, #4
 804ce5a:	6860      	ldr	r0, [r4, #4]
 804ce5c:	f7ff ff82 	bl	804cd64 <std>
 804ce60:	68a0      	ldr	r0, [r4, #8]
 804ce62:	2201      	movs	r2, #1
 804ce64:	2109      	movs	r1, #9
 804ce66:	f7ff ff7d 	bl	804cd64 <std>
 804ce6a:	68e0      	ldr	r0, [r4, #12]
 804ce6c:	2202      	movs	r2, #2
 804ce6e:	2112      	movs	r1, #18
 804ce70:	f7ff ff78 	bl	804cd64 <std>
 804ce74:	2301      	movs	r3, #1
 804ce76:	61a3      	str	r3, [r4, #24]
 804ce78:	e7d2      	b.n	804ce20 <__sinit+0xc>
 804ce7a:	bf00      	nop
 804ce7c:	0804fae4 	.word	0x0804fae4
 804ce80:	0804cdad 	.word	0x0804cdad

0804ce84 <__sfp>:
 804ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804ce86:	4607      	mov	r7, r0
 804ce88:	f7ff ffac 	bl	804cde4 <__sfp_lock_acquire>
 804ce8c:	4b1e      	ldr	r3, [pc, #120]	; (804cf08 <__sfp+0x84>)
 804ce8e:	681e      	ldr	r6, [r3, #0]
 804ce90:	69b3      	ldr	r3, [r6, #24]
 804ce92:	b913      	cbnz	r3, 804ce9a <__sfp+0x16>
 804ce94:	4630      	mov	r0, r6
 804ce96:	f7ff ffbd 	bl	804ce14 <__sinit>
 804ce9a:	3648      	adds	r6, #72	; 0x48
 804ce9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 804cea0:	3b01      	subs	r3, #1
 804cea2:	d503      	bpl.n	804ceac <__sfp+0x28>
 804cea4:	6833      	ldr	r3, [r6, #0]
 804cea6:	b30b      	cbz	r3, 804ceec <__sfp+0x68>
 804cea8:	6836      	ldr	r6, [r6, #0]
 804ceaa:	e7f7      	b.n	804ce9c <__sfp+0x18>
 804ceac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 804ceb0:	b9d5      	cbnz	r5, 804cee8 <__sfp+0x64>
 804ceb2:	4b16      	ldr	r3, [pc, #88]	; (804cf0c <__sfp+0x88>)
 804ceb4:	60e3      	str	r3, [r4, #12]
 804ceb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 804ceba:	6665      	str	r5, [r4, #100]	; 0x64
 804cebc:	f000 f847 	bl	804cf4e <__retarget_lock_init_recursive>
 804cec0:	f7ff ff96 	bl	804cdf0 <__sfp_lock_release>
 804cec4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 804cec8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 804cecc:	6025      	str	r5, [r4, #0]
 804cece:	61a5      	str	r5, [r4, #24]
 804ced0:	2208      	movs	r2, #8
 804ced2:	4629      	mov	r1, r5
 804ced4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 804ced8:	f7ff fc1c 	bl	804c714 <memset>
 804cedc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 804cee0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 804cee4:	4620      	mov	r0, r4
 804cee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804cee8:	3468      	adds	r4, #104	; 0x68
 804ceea:	e7d9      	b.n	804cea0 <__sfp+0x1c>
 804ceec:	2104      	movs	r1, #4
 804ceee:	4638      	mov	r0, r7
 804cef0:	f7ff ff62 	bl	804cdb8 <__sfmoreglue>
 804cef4:	4604      	mov	r4, r0
 804cef6:	6030      	str	r0, [r6, #0]
 804cef8:	2800      	cmp	r0, #0
 804cefa:	d1d5      	bne.n	804cea8 <__sfp+0x24>
 804cefc:	f7ff ff78 	bl	804cdf0 <__sfp_lock_release>
 804cf00:	230c      	movs	r3, #12
 804cf02:	603b      	str	r3, [r7, #0]
 804cf04:	e7ee      	b.n	804cee4 <__sfp+0x60>
 804cf06:	bf00      	nop
 804cf08:	0804fae4 	.word	0x0804fae4
 804cf0c:	ffff0001 	.word	0xffff0001

0804cf10 <_fwalk_reent>:
 804cf10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804cf14:	4606      	mov	r6, r0
 804cf16:	4688      	mov	r8, r1
 804cf18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 804cf1c:	2700      	movs	r7, #0
 804cf1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 804cf22:	f1b9 0901 	subs.w	r9, r9, #1
 804cf26:	d505      	bpl.n	804cf34 <_fwalk_reent+0x24>
 804cf28:	6824      	ldr	r4, [r4, #0]
 804cf2a:	2c00      	cmp	r4, #0
 804cf2c:	d1f7      	bne.n	804cf1e <_fwalk_reent+0xe>
 804cf2e:	4638      	mov	r0, r7
 804cf30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804cf34:	89ab      	ldrh	r3, [r5, #12]
 804cf36:	2b01      	cmp	r3, #1
 804cf38:	d907      	bls.n	804cf4a <_fwalk_reent+0x3a>
 804cf3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804cf3e:	3301      	adds	r3, #1
 804cf40:	d003      	beq.n	804cf4a <_fwalk_reent+0x3a>
 804cf42:	4629      	mov	r1, r5
 804cf44:	4630      	mov	r0, r6
 804cf46:	47c0      	blx	r8
 804cf48:	4307      	orrs	r7, r0
 804cf4a:	3568      	adds	r5, #104	; 0x68
 804cf4c:	e7e9      	b.n	804cf22 <_fwalk_reent+0x12>

0804cf4e <__retarget_lock_init_recursive>:
 804cf4e:	4770      	bx	lr

0804cf50 <__retarget_lock_acquire_recursive>:
 804cf50:	4770      	bx	lr

0804cf52 <__retarget_lock_release_recursive>:
 804cf52:	4770      	bx	lr

0804cf54 <__swhatbuf_r>:
 804cf54:	b570      	push	{r4, r5, r6, lr}
 804cf56:	460e      	mov	r6, r1
 804cf58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804cf5c:	2900      	cmp	r1, #0
 804cf5e:	b096      	sub	sp, #88	; 0x58
 804cf60:	4614      	mov	r4, r2
 804cf62:	461d      	mov	r5, r3
 804cf64:	da08      	bge.n	804cf78 <__swhatbuf_r+0x24>
 804cf66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 804cf6a:	2200      	movs	r2, #0
 804cf6c:	602a      	str	r2, [r5, #0]
 804cf6e:	061a      	lsls	r2, r3, #24
 804cf70:	d410      	bmi.n	804cf94 <__swhatbuf_r+0x40>
 804cf72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804cf76:	e00e      	b.n	804cf96 <__swhatbuf_r+0x42>
 804cf78:	466a      	mov	r2, sp
 804cf7a:	f000 fd0d 	bl	804d998 <_fstat_r>
 804cf7e:	2800      	cmp	r0, #0
 804cf80:	dbf1      	blt.n	804cf66 <__swhatbuf_r+0x12>
 804cf82:	9a01      	ldr	r2, [sp, #4]
 804cf84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 804cf88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 804cf8c:	425a      	negs	r2, r3
 804cf8e:	415a      	adcs	r2, r3
 804cf90:	602a      	str	r2, [r5, #0]
 804cf92:	e7ee      	b.n	804cf72 <__swhatbuf_r+0x1e>
 804cf94:	2340      	movs	r3, #64	; 0x40
 804cf96:	2000      	movs	r0, #0
 804cf98:	6023      	str	r3, [r4, #0]
 804cf9a:	b016      	add	sp, #88	; 0x58
 804cf9c:	bd70      	pop	{r4, r5, r6, pc}
	...

0804cfa0 <__smakebuf_r>:
 804cfa0:	898b      	ldrh	r3, [r1, #12]
 804cfa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804cfa4:	079d      	lsls	r5, r3, #30
 804cfa6:	4606      	mov	r6, r0
 804cfa8:	460c      	mov	r4, r1
 804cfaa:	d507      	bpl.n	804cfbc <__smakebuf_r+0x1c>
 804cfac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804cfb0:	6023      	str	r3, [r4, #0]
 804cfb2:	6123      	str	r3, [r4, #16]
 804cfb4:	2301      	movs	r3, #1
 804cfb6:	6163      	str	r3, [r4, #20]
 804cfb8:	b002      	add	sp, #8
 804cfba:	bd70      	pop	{r4, r5, r6, pc}
 804cfbc:	ab01      	add	r3, sp, #4
 804cfbe:	466a      	mov	r2, sp
 804cfc0:	f7ff ffc8 	bl	804cf54 <__swhatbuf_r>
 804cfc4:	9900      	ldr	r1, [sp, #0]
 804cfc6:	4605      	mov	r5, r0
 804cfc8:	4630      	mov	r0, r6
 804cfca:	f7ff fc17 	bl	804c7fc <_malloc_r>
 804cfce:	b948      	cbnz	r0, 804cfe4 <__smakebuf_r+0x44>
 804cfd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804cfd4:	059a      	lsls	r2, r3, #22
 804cfd6:	d4ef      	bmi.n	804cfb8 <__smakebuf_r+0x18>
 804cfd8:	f023 0303 	bic.w	r3, r3, #3
 804cfdc:	f043 0302 	orr.w	r3, r3, #2
 804cfe0:	81a3      	strh	r3, [r4, #12]
 804cfe2:	e7e3      	b.n	804cfac <__smakebuf_r+0xc>
 804cfe4:	4b0d      	ldr	r3, [pc, #52]	; (804d01c <__smakebuf_r+0x7c>)
 804cfe6:	62b3      	str	r3, [r6, #40]	; 0x28
 804cfe8:	89a3      	ldrh	r3, [r4, #12]
 804cfea:	6020      	str	r0, [r4, #0]
 804cfec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804cff0:	81a3      	strh	r3, [r4, #12]
 804cff2:	9b00      	ldr	r3, [sp, #0]
 804cff4:	6163      	str	r3, [r4, #20]
 804cff6:	9b01      	ldr	r3, [sp, #4]
 804cff8:	6120      	str	r0, [r4, #16]
 804cffa:	b15b      	cbz	r3, 804d014 <__smakebuf_r+0x74>
 804cffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804d000:	4630      	mov	r0, r6
 804d002:	f000 fcdb 	bl	804d9bc <_isatty_r>
 804d006:	b128      	cbz	r0, 804d014 <__smakebuf_r+0x74>
 804d008:	89a3      	ldrh	r3, [r4, #12]
 804d00a:	f023 0303 	bic.w	r3, r3, #3
 804d00e:	f043 0301 	orr.w	r3, r3, #1
 804d012:	81a3      	strh	r3, [r4, #12]
 804d014:	89a0      	ldrh	r0, [r4, #12]
 804d016:	4305      	orrs	r5, r0
 804d018:	81a5      	strh	r5, [r4, #12]
 804d01a:	e7cd      	b.n	804cfb8 <__smakebuf_r+0x18>
 804d01c:	0804cdad 	.word	0x0804cdad

0804d020 <__malloc_lock>:
 804d020:	4801      	ldr	r0, [pc, #4]	; (804d028 <__malloc_lock+0x8>)
 804d022:	f7ff bf95 	b.w	804cf50 <__retarget_lock_acquire_recursive>
 804d026:	bf00      	nop
 804d028:	20000d50 	.word	0x20000d50

0804d02c <__malloc_unlock>:
 804d02c:	4801      	ldr	r0, [pc, #4]	; (804d034 <__malloc_unlock+0x8>)
 804d02e:	f7ff bf90 	b.w	804cf52 <__retarget_lock_release_recursive>
 804d032:	bf00      	nop
 804d034:	20000d50 	.word	0x20000d50

0804d038 <__ssputs_r>:
 804d038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804d03c:	688e      	ldr	r6, [r1, #8]
 804d03e:	429e      	cmp	r6, r3
 804d040:	4682      	mov	sl, r0
 804d042:	460c      	mov	r4, r1
 804d044:	4690      	mov	r8, r2
 804d046:	461f      	mov	r7, r3
 804d048:	d838      	bhi.n	804d0bc <__ssputs_r+0x84>
 804d04a:	898a      	ldrh	r2, [r1, #12]
 804d04c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 804d050:	d032      	beq.n	804d0b8 <__ssputs_r+0x80>
 804d052:	6825      	ldr	r5, [r4, #0]
 804d054:	6909      	ldr	r1, [r1, #16]
 804d056:	eba5 0901 	sub.w	r9, r5, r1
 804d05a:	6965      	ldr	r5, [r4, #20]
 804d05c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 804d060:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 804d064:	3301      	adds	r3, #1
 804d066:	444b      	add	r3, r9
 804d068:	106d      	asrs	r5, r5, #1
 804d06a:	429d      	cmp	r5, r3
 804d06c:	bf38      	it	cc
 804d06e:	461d      	movcc	r5, r3
 804d070:	0553      	lsls	r3, r2, #21
 804d072:	d531      	bpl.n	804d0d8 <__ssputs_r+0xa0>
 804d074:	4629      	mov	r1, r5
 804d076:	f7ff fbc1 	bl	804c7fc <_malloc_r>
 804d07a:	4606      	mov	r6, r0
 804d07c:	b950      	cbnz	r0, 804d094 <__ssputs_r+0x5c>
 804d07e:	230c      	movs	r3, #12
 804d080:	f8ca 3000 	str.w	r3, [sl]
 804d084:	89a3      	ldrh	r3, [r4, #12]
 804d086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804d08a:	81a3      	strh	r3, [r4, #12]
 804d08c:	f04f 30ff 	mov.w	r0, #4294967295
 804d090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804d094:	6921      	ldr	r1, [r4, #16]
 804d096:	464a      	mov	r2, r9
 804d098:	f000 fcb2 	bl	804da00 <memcpy>
 804d09c:	89a3      	ldrh	r3, [r4, #12]
 804d09e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 804d0a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804d0a6:	81a3      	strh	r3, [r4, #12]
 804d0a8:	6126      	str	r6, [r4, #16]
 804d0aa:	6165      	str	r5, [r4, #20]
 804d0ac:	444e      	add	r6, r9
 804d0ae:	eba5 0509 	sub.w	r5, r5, r9
 804d0b2:	6026      	str	r6, [r4, #0]
 804d0b4:	60a5      	str	r5, [r4, #8]
 804d0b6:	463e      	mov	r6, r7
 804d0b8:	42be      	cmp	r6, r7
 804d0ba:	d900      	bls.n	804d0be <__ssputs_r+0x86>
 804d0bc:	463e      	mov	r6, r7
 804d0be:	6820      	ldr	r0, [r4, #0]
 804d0c0:	4632      	mov	r2, r6
 804d0c2:	4641      	mov	r1, r8
 804d0c4:	f000 fcaa 	bl	804da1c <memmove>
 804d0c8:	68a3      	ldr	r3, [r4, #8]
 804d0ca:	1b9b      	subs	r3, r3, r6
 804d0cc:	60a3      	str	r3, [r4, #8]
 804d0ce:	6823      	ldr	r3, [r4, #0]
 804d0d0:	4433      	add	r3, r6
 804d0d2:	6023      	str	r3, [r4, #0]
 804d0d4:	2000      	movs	r0, #0
 804d0d6:	e7db      	b.n	804d090 <__ssputs_r+0x58>
 804d0d8:	462a      	mov	r2, r5
 804d0da:	f000 fcb9 	bl	804da50 <_realloc_r>
 804d0de:	4606      	mov	r6, r0
 804d0e0:	2800      	cmp	r0, #0
 804d0e2:	d1e1      	bne.n	804d0a8 <__ssputs_r+0x70>
 804d0e4:	6921      	ldr	r1, [r4, #16]
 804d0e6:	4650      	mov	r0, sl
 804d0e8:	f7ff fb1c 	bl	804c724 <_free_r>
 804d0ec:	e7c7      	b.n	804d07e <__ssputs_r+0x46>
	...

0804d0f0 <_svfiprintf_r>:
 804d0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d0f4:	4698      	mov	r8, r3
 804d0f6:	898b      	ldrh	r3, [r1, #12]
 804d0f8:	061b      	lsls	r3, r3, #24
 804d0fa:	b09d      	sub	sp, #116	; 0x74
 804d0fc:	4607      	mov	r7, r0
 804d0fe:	460d      	mov	r5, r1
 804d100:	4614      	mov	r4, r2
 804d102:	d50e      	bpl.n	804d122 <_svfiprintf_r+0x32>
 804d104:	690b      	ldr	r3, [r1, #16]
 804d106:	b963      	cbnz	r3, 804d122 <_svfiprintf_r+0x32>
 804d108:	2140      	movs	r1, #64	; 0x40
 804d10a:	f7ff fb77 	bl	804c7fc <_malloc_r>
 804d10e:	6028      	str	r0, [r5, #0]
 804d110:	6128      	str	r0, [r5, #16]
 804d112:	b920      	cbnz	r0, 804d11e <_svfiprintf_r+0x2e>
 804d114:	230c      	movs	r3, #12
 804d116:	603b      	str	r3, [r7, #0]
 804d118:	f04f 30ff 	mov.w	r0, #4294967295
 804d11c:	e0d1      	b.n	804d2c2 <_svfiprintf_r+0x1d2>
 804d11e:	2340      	movs	r3, #64	; 0x40
 804d120:	616b      	str	r3, [r5, #20]
 804d122:	2300      	movs	r3, #0
 804d124:	9309      	str	r3, [sp, #36]	; 0x24
 804d126:	2320      	movs	r3, #32
 804d128:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804d12c:	f8cd 800c 	str.w	r8, [sp, #12]
 804d130:	2330      	movs	r3, #48	; 0x30
 804d132:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 804d2dc <_svfiprintf_r+0x1ec>
 804d136:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804d13a:	f04f 0901 	mov.w	r9, #1
 804d13e:	4623      	mov	r3, r4
 804d140:	469a      	mov	sl, r3
 804d142:	f813 2b01 	ldrb.w	r2, [r3], #1
 804d146:	b10a      	cbz	r2, 804d14c <_svfiprintf_r+0x5c>
 804d148:	2a25      	cmp	r2, #37	; 0x25
 804d14a:	d1f9      	bne.n	804d140 <_svfiprintf_r+0x50>
 804d14c:	ebba 0b04 	subs.w	fp, sl, r4
 804d150:	d00b      	beq.n	804d16a <_svfiprintf_r+0x7a>
 804d152:	465b      	mov	r3, fp
 804d154:	4622      	mov	r2, r4
 804d156:	4629      	mov	r1, r5
 804d158:	4638      	mov	r0, r7
 804d15a:	f7ff ff6d 	bl	804d038 <__ssputs_r>
 804d15e:	3001      	adds	r0, #1
 804d160:	f000 80aa 	beq.w	804d2b8 <_svfiprintf_r+0x1c8>
 804d164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804d166:	445a      	add	r2, fp
 804d168:	9209      	str	r2, [sp, #36]	; 0x24
 804d16a:	f89a 3000 	ldrb.w	r3, [sl]
 804d16e:	2b00      	cmp	r3, #0
 804d170:	f000 80a2 	beq.w	804d2b8 <_svfiprintf_r+0x1c8>
 804d174:	2300      	movs	r3, #0
 804d176:	f04f 32ff 	mov.w	r2, #4294967295
 804d17a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804d17e:	f10a 0a01 	add.w	sl, sl, #1
 804d182:	9304      	str	r3, [sp, #16]
 804d184:	9307      	str	r3, [sp, #28]
 804d186:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804d18a:	931a      	str	r3, [sp, #104]	; 0x68
 804d18c:	4654      	mov	r4, sl
 804d18e:	2205      	movs	r2, #5
 804d190:	f814 1b01 	ldrb.w	r1, [r4], #1
 804d194:	4851      	ldr	r0, [pc, #324]	; (804d2dc <_svfiprintf_r+0x1ec>)
 804d196:	f7f3 f82b 	bl	80401f0 <memchr>
 804d19a:	9a04      	ldr	r2, [sp, #16]
 804d19c:	b9d8      	cbnz	r0, 804d1d6 <_svfiprintf_r+0xe6>
 804d19e:	06d0      	lsls	r0, r2, #27
 804d1a0:	bf44      	itt	mi
 804d1a2:	2320      	movmi	r3, #32
 804d1a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804d1a8:	0711      	lsls	r1, r2, #28
 804d1aa:	bf44      	itt	mi
 804d1ac:	232b      	movmi	r3, #43	; 0x2b
 804d1ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804d1b2:	f89a 3000 	ldrb.w	r3, [sl]
 804d1b6:	2b2a      	cmp	r3, #42	; 0x2a
 804d1b8:	d015      	beq.n	804d1e6 <_svfiprintf_r+0xf6>
 804d1ba:	9a07      	ldr	r2, [sp, #28]
 804d1bc:	4654      	mov	r4, sl
 804d1be:	2000      	movs	r0, #0
 804d1c0:	f04f 0c0a 	mov.w	ip, #10
 804d1c4:	4621      	mov	r1, r4
 804d1c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 804d1ca:	3b30      	subs	r3, #48	; 0x30
 804d1cc:	2b09      	cmp	r3, #9
 804d1ce:	d94e      	bls.n	804d26e <_svfiprintf_r+0x17e>
 804d1d0:	b1b0      	cbz	r0, 804d200 <_svfiprintf_r+0x110>
 804d1d2:	9207      	str	r2, [sp, #28]
 804d1d4:	e014      	b.n	804d200 <_svfiprintf_r+0x110>
 804d1d6:	eba0 0308 	sub.w	r3, r0, r8
 804d1da:	fa09 f303 	lsl.w	r3, r9, r3
 804d1de:	4313      	orrs	r3, r2
 804d1e0:	9304      	str	r3, [sp, #16]
 804d1e2:	46a2      	mov	sl, r4
 804d1e4:	e7d2      	b.n	804d18c <_svfiprintf_r+0x9c>
 804d1e6:	9b03      	ldr	r3, [sp, #12]
 804d1e8:	1d19      	adds	r1, r3, #4
 804d1ea:	681b      	ldr	r3, [r3, #0]
 804d1ec:	9103      	str	r1, [sp, #12]
 804d1ee:	2b00      	cmp	r3, #0
 804d1f0:	bfbb      	ittet	lt
 804d1f2:	425b      	neglt	r3, r3
 804d1f4:	f042 0202 	orrlt.w	r2, r2, #2
 804d1f8:	9307      	strge	r3, [sp, #28]
 804d1fa:	9307      	strlt	r3, [sp, #28]
 804d1fc:	bfb8      	it	lt
 804d1fe:	9204      	strlt	r2, [sp, #16]
 804d200:	7823      	ldrb	r3, [r4, #0]
 804d202:	2b2e      	cmp	r3, #46	; 0x2e
 804d204:	d10c      	bne.n	804d220 <_svfiprintf_r+0x130>
 804d206:	7863      	ldrb	r3, [r4, #1]
 804d208:	2b2a      	cmp	r3, #42	; 0x2a
 804d20a:	d135      	bne.n	804d278 <_svfiprintf_r+0x188>
 804d20c:	9b03      	ldr	r3, [sp, #12]
 804d20e:	1d1a      	adds	r2, r3, #4
 804d210:	681b      	ldr	r3, [r3, #0]
 804d212:	9203      	str	r2, [sp, #12]
 804d214:	2b00      	cmp	r3, #0
 804d216:	bfb8      	it	lt
 804d218:	f04f 33ff 	movlt.w	r3, #4294967295
 804d21c:	3402      	adds	r4, #2
 804d21e:	9305      	str	r3, [sp, #20]
 804d220:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 804d2ec <_svfiprintf_r+0x1fc>
 804d224:	7821      	ldrb	r1, [r4, #0]
 804d226:	2203      	movs	r2, #3
 804d228:	4650      	mov	r0, sl
 804d22a:	f7f2 ffe1 	bl	80401f0 <memchr>
 804d22e:	b140      	cbz	r0, 804d242 <_svfiprintf_r+0x152>
 804d230:	2340      	movs	r3, #64	; 0x40
 804d232:	eba0 000a 	sub.w	r0, r0, sl
 804d236:	fa03 f000 	lsl.w	r0, r3, r0
 804d23a:	9b04      	ldr	r3, [sp, #16]
 804d23c:	4303      	orrs	r3, r0
 804d23e:	3401      	adds	r4, #1
 804d240:	9304      	str	r3, [sp, #16]
 804d242:	f814 1b01 	ldrb.w	r1, [r4], #1
 804d246:	4826      	ldr	r0, [pc, #152]	; (804d2e0 <_svfiprintf_r+0x1f0>)
 804d248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804d24c:	2206      	movs	r2, #6
 804d24e:	f7f2 ffcf 	bl	80401f0 <memchr>
 804d252:	2800      	cmp	r0, #0
 804d254:	d038      	beq.n	804d2c8 <_svfiprintf_r+0x1d8>
 804d256:	4b23      	ldr	r3, [pc, #140]	; (804d2e4 <_svfiprintf_r+0x1f4>)
 804d258:	bb1b      	cbnz	r3, 804d2a2 <_svfiprintf_r+0x1b2>
 804d25a:	9b03      	ldr	r3, [sp, #12]
 804d25c:	3307      	adds	r3, #7
 804d25e:	f023 0307 	bic.w	r3, r3, #7
 804d262:	3308      	adds	r3, #8
 804d264:	9303      	str	r3, [sp, #12]
 804d266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804d268:	4433      	add	r3, r6
 804d26a:	9309      	str	r3, [sp, #36]	; 0x24
 804d26c:	e767      	b.n	804d13e <_svfiprintf_r+0x4e>
 804d26e:	fb0c 3202 	mla	r2, ip, r2, r3
 804d272:	460c      	mov	r4, r1
 804d274:	2001      	movs	r0, #1
 804d276:	e7a5      	b.n	804d1c4 <_svfiprintf_r+0xd4>
 804d278:	2300      	movs	r3, #0
 804d27a:	3401      	adds	r4, #1
 804d27c:	9305      	str	r3, [sp, #20]
 804d27e:	4619      	mov	r1, r3
 804d280:	f04f 0c0a 	mov.w	ip, #10
 804d284:	4620      	mov	r0, r4
 804d286:	f810 2b01 	ldrb.w	r2, [r0], #1
 804d28a:	3a30      	subs	r2, #48	; 0x30
 804d28c:	2a09      	cmp	r2, #9
 804d28e:	d903      	bls.n	804d298 <_svfiprintf_r+0x1a8>
 804d290:	2b00      	cmp	r3, #0
 804d292:	d0c5      	beq.n	804d220 <_svfiprintf_r+0x130>
 804d294:	9105      	str	r1, [sp, #20]
 804d296:	e7c3      	b.n	804d220 <_svfiprintf_r+0x130>
 804d298:	fb0c 2101 	mla	r1, ip, r1, r2
 804d29c:	4604      	mov	r4, r0
 804d29e:	2301      	movs	r3, #1
 804d2a0:	e7f0      	b.n	804d284 <_svfiprintf_r+0x194>
 804d2a2:	ab03      	add	r3, sp, #12
 804d2a4:	9300      	str	r3, [sp, #0]
 804d2a6:	462a      	mov	r2, r5
 804d2a8:	4b0f      	ldr	r3, [pc, #60]	; (804d2e8 <_svfiprintf_r+0x1f8>)
 804d2aa:	a904      	add	r1, sp, #16
 804d2ac:	4638      	mov	r0, r7
 804d2ae:	f3af 8000 	nop.w
 804d2b2:	1c42      	adds	r2, r0, #1
 804d2b4:	4606      	mov	r6, r0
 804d2b6:	d1d6      	bne.n	804d266 <_svfiprintf_r+0x176>
 804d2b8:	89ab      	ldrh	r3, [r5, #12]
 804d2ba:	065b      	lsls	r3, r3, #25
 804d2bc:	f53f af2c 	bmi.w	804d118 <_svfiprintf_r+0x28>
 804d2c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 804d2c2:	b01d      	add	sp, #116	; 0x74
 804d2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804d2c8:	ab03      	add	r3, sp, #12
 804d2ca:	9300      	str	r3, [sp, #0]
 804d2cc:	462a      	mov	r2, r5
 804d2ce:	4b06      	ldr	r3, [pc, #24]	; (804d2e8 <_svfiprintf_r+0x1f8>)
 804d2d0:	a904      	add	r1, sp, #16
 804d2d2:	4638      	mov	r0, r7
 804d2d4:	f000 f9d4 	bl	804d680 <_printf_i>
 804d2d8:	e7eb      	b.n	804d2b2 <_svfiprintf_r+0x1c2>
 804d2da:	bf00      	nop
 804d2dc:	0804fb48 	.word	0x0804fb48
 804d2e0:	0804fb52 	.word	0x0804fb52
 804d2e4:	00000000 	.word	0x00000000
 804d2e8:	0804d039 	.word	0x0804d039
 804d2ec:	0804fb4e 	.word	0x0804fb4e

0804d2f0 <__sfputc_r>:
 804d2f0:	6893      	ldr	r3, [r2, #8]
 804d2f2:	3b01      	subs	r3, #1
 804d2f4:	2b00      	cmp	r3, #0
 804d2f6:	b410      	push	{r4}
 804d2f8:	6093      	str	r3, [r2, #8]
 804d2fa:	da08      	bge.n	804d30e <__sfputc_r+0x1e>
 804d2fc:	6994      	ldr	r4, [r2, #24]
 804d2fe:	42a3      	cmp	r3, r4
 804d300:	db01      	blt.n	804d306 <__sfputc_r+0x16>
 804d302:	290a      	cmp	r1, #10
 804d304:	d103      	bne.n	804d30e <__sfputc_r+0x1e>
 804d306:	f85d 4b04 	ldr.w	r4, [sp], #4
 804d30a:	f7ff bba9 	b.w	804ca60 <__swbuf_r>
 804d30e:	6813      	ldr	r3, [r2, #0]
 804d310:	1c58      	adds	r0, r3, #1
 804d312:	6010      	str	r0, [r2, #0]
 804d314:	7019      	strb	r1, [r3, #0]
 804d316:	4608      	mov	r0, r1
 804d318:	f85d 4b04 	ldr.w	r4, [sp], #4
 804d31c:	4770      	bx	lr

0804d31e <__sfputs_r>:
 804d31e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804d320:	4606      	mov	r6, r0
 804d322:	460f      	mov	r7, r1
 804d324:	4614      	mov	r4, r2
 804d326:	18d5      	adds	r5, r2, r3
 804d328:	42ac      	cmp	r4, r5
 804d32a:	d101      	bne.n	804d330 <__sfputs_r+0x12>
 804d32c:	2000      	movs	r0, #0
 804d32e:	e007      	b.n	804d340 <__sfputs_r+0x22>
 804d330:	f814 1b01 	ldrb.w	r1, [r4], #1
 804d334:	463a      	mov	r2, r7
 804d336:	4630      	mov	r0, r6
 804d338:	f7ff ffda 	bl	804d2f0 <__sfputc_r>
 804d33c:	1c43      	adds	r3, r0, #1
 804d33e:	d1f3      	bne.n	804d328 <__sfputs_r+0xa>
 804d340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804d344 <_vfiprintf_r>:
 804d344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d348:	460d      	mov	r5, r1
 804d34a:	b09d      	sub	sp, #116	; 0x74
 804d34c:	4614      	mov	r4, r2
 804d34e:	4698      	mov	r8, r3
 804d350:	4606      	mov	r6, r0
 804d352:	b118      	cbz	r0, 804d35c <_vfiprintf_r+0x18>
 804d354:	6983      	ldr	r3, [r0, #24]
 804d356:	b90b      	cbnz	r3, 804d35c <_vfiprintf_r+0x18>
 804d358:	f7ff fd5c 	bl	804ce14 <__sinit>
 804d35c:	4b89      	ldr	r3, [pc, #548]	; (804d584 <_vfiprintf_r+0x240>)
 804d35e:	429d      	cmp	r5, r3
 804d360:	d11b      	bne.n	804d39a <_vfiprintf_r+0x56>
 804d362:	6875      	ldr	r5, [r6, #4]
 804d364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804d366:	07d9      	lsls	r1, r3, #31
 804d368:	d405      	bmi.n	804d376 <_vfiprintf_r+0x32>
 804d36a:	89ab      	ldrh	r3, [r5, #12]
 804d36c:	059a      	lsls	r2, r3, #22
 804d36e:	d402      	bmi.n	804d376 <_vfiprintf_r+0x32>
 804d370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804d372:	f7ff fded 	bl	804cf50 <__retarget_lock_acquire_recursive>
 804d376:	89ab      	ldrh	r3, [r5, #12]
 804d378:	071b      	lsls	r3, r3, #28
 804d37a:	d501      	bpl.n	804d380 <_vfiprintf_r+0x3c>
 804d37c:	692b      	ldr	r3, [r5, #16]
 804d37e:	b9eb      	cbnz	r3, 804d3bc <_vfiprintf_r+0x78>
 804d380:	4629      	mov	r1, r5
 804d382:	4630      	mov	r0, r6
 804d384:	f7ff fbbe 	bl	804cb04 <__swsetup_r>
 804d388:	b1c0      	cbz	r0, 804d3bc <_vfiprintf_r+0x78>
 804d38a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804d38c:	07dc      	lsls	r4, r3, #31
 804d38e:	d50e      	bpl.n	804d3ae <_vfiprintf_r+0x6a>
 804d390:	f04f 30ff 	mov.w	r0, #4294967295
 804d394:	b01d      	add	sp, #116	; 0x74
 804d396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804d39a:	4b7b      	ldr	r3, [pc, #492]	; (804d588 <_vfiprintf_r+0x244>)
 804d39c:	429d      	cmp	r5, r3
 804d39e:	d101      	bne.n	804d3a4 <_vfiprintf_r+0x60>
 804d3a0:	68b5      	ldr	r5, [r6, #8]
 804d3a2:	e7df      	b.n	804d364 <_vfiprintf_r+0x20>
 804d3a4:	4b79      	ldr	r3, [pc, #484]	; (804d58c <_vfiprintf_r+0x248>)
 804d3a6:	429d      	cmp	r5, r3
 804d3a8:	bf08      	it	eq
 804d3aa:	68f5      	ldreq	r5, [r6, #12]
 804d3ac:	e7da      	b.n	804d364 <_vfiprintf_r+0x20>
 804d3ae:	89ab      	ldrh	r3, [r5, #12]
 804d3b0:	0598      	lsls	r0, r3, #22
 804d3b2:	d4ed      	bmi.n	804d390 <_vfiprintf_r+0x4c>
 804d3b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804d3b6:	f7ff fdcc 	bl	804cf52 <__retarget_lock_release_recursive>
 804d3ba:	e7e9      	b.n	804d390 <_vfiprintf_r+0x4c>
 804d3bc:	2300      	movs	r3, #0
 804d3be:	9309      	str	r3, [sp, #36]	; 0x24
 804d3c0:	2320      	movs	r3, #32
 804d3c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804d3c6:	f8cd 800c 	str.w	r8, [sp, #12]
 804d3ca:	2330      	movs	r3, #48	; 0x30
 804d3cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 804d590 <_vfiprintf_r+0x24c>
 804d3d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804d3d4:	f04f 0901 	mov.w	r9, #1
 804d3d8:	4623      	mov	r3, r4
 804d3da:	469a      	mov	sl, r3
 804d3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 804d3e0:	b10a      	cbz	r2, 804d3e6 <_vfiprintf_r+0xa2>
 804d3e2:	2a25      	cmp	r2, #37	; 0x25
 804d3e4:	d1f9      	bne.n	804d3da <_vfiprintf_r+0x96>
 804d3e6:	ebba 0b04 	subs.w	fp, sl, r4
 804d3ea:	d00b      	beq.n	804d404 <_vfiprintf_r+0xc0>
 804d3ec:	465b      	mov	r3, fp
 804d3ee:	4622      	mov	r2, r4
 804d3f0:	4629      	mov	r1, r5
 804d3f2:	4630      	mov	r0, r6
 804d3f4:	f7ff ff93 	bl	804d31e <__sfputs_r>
 804d3f8:	3001      	adds	r0, #1
 804d3fa:	f000 80aa 	beq.w	804d552 <_vfiprintf_r+0x20e>
 804d3fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804d400:	445a      	add	r2, fp
 804d402:	9209      	str	r2, [sp, #36]	; 0x24
 804d404:	f89a 3000 	ldrb.w	r3, [sl]
 804d408:	2b00      	cmp	r3, #0
 804d40a:	f000 80a2 	beq.w	804d552 <_vfiprintf_r+0x20e>
 804d40e:	2300      	movs	r3, #0
 804d410:	f04f 32ff 	mov.w	r2, #4294967295
 804d414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804d418:	f10a 0a01 	add.w	sl, sl, #1
 804d41c:	9304      	str	r3, [sp, #16]
 804d41e:	9307      	str	r3, [sp, #28]
 804d420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804d424:	931a      	str	r3, [sp, #104]	; 0x68
 804d426:	4654      	mov	r4, sl
 804d428:	2205      	movs	r2, #5
 804d42a:	f814 1b01 	ldrb.w	r1, [r4], #1
 804d42e:	4858      	ldr	r0, [pc, #352]	; (804d590 <_vfiprintf_r+0x24c>)
 804d430:	f7f2 fede 	bl	80401f0 <memchr>
 804d434:	9a04      	ldr	r2, [sp, #16]
 804d436:	b9d8      	cbnz	r0, 804d470 <_vfiprintf_r+0x12c>
 804d438:	06d1      	lsls	r1, r2, #27
 804d43a:	bf44      	itt	mi
 804d43c:	2320      	movmi	r3, #32
 804d43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804d442:	0713      	lsls	r3, r2, #28
 804d444:	bf44      	itt	mi
 804d446:	232b      	movmi	r3, #43	; 0x2b
 804d448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804d44c:	f89a 3000 	ldrb.w	r3, [sl]
 804d450:	2b2a      	cmp	r3, #42	; 0x2a
 804d452:	d015      	beq.n	804d480 <_vfiprintf_r+0x13c>
 804d454:	9a07      	ldr	r2, [sp, #28]
 804d456:	4654      	mov	r4, sl
 804d458:	2000      	movs	r0, #0
 804d45a:	f04f 0c0a 	mov.w	ip, #10
 804d45e:	4621      	mov	r1, r4
 804d460:	f811 3b01 	ldrb.w	r3, [r1], #1
 804d464:	3b30      	subs	r3, #48	; 0x30
 804d466:	2b09      	cmp	r3, #9
 804d468:	d94e      	bls.n	804d508 <_vfiprintf_r+0x1c4>
 804d46a:	b1b0      	cbz	r0, 804d49a <_vfiprintf_r+0x156>
 804d46c:	9207      	str	r2, [sp, #28]
 804d46e:	e014      	b.n	804d49a <_vfiprintf_r+0x156>
 804d470:	eba0 0308 	sub.w	r3, r0, r8
 804d474:	fa09 f303 	lsl.w	r3, r9, r3
 804d478:	4313      	orrs	r3, r2
 804d47a:	9304      	str	r3, [sp, #16]
 804d47c:	46a2      	mov	sl, r4
 804d47e:	e7d2      	b.n	804d426 <_vfiprintf_r+0xe2>
 804d480:	9b03      	ldr	r3, [sp, #12]
 804d482:	1d19      	adds	r1, r3, #4
 804d484:	681b      	ldr	r3, [r3, #0]
 804d486:	9103      	str	r1, [sp, #12]
 804d488:	2b00      	cmp	r3, #0
 804d48a:	bfbb      	ittet	lt
 804d48c:	425b      	neglt	r3, r3
 804d48e:	f042 0202 	orrlt.w	r2, r2, #2
 804d492:	9307      	strge	r3, [sp, #28]
 804d494:	9307      	strlt	r3, [sp, #28]
 804d496:	bfb8      	it	lt
 804d498:	9204      	strlt	r2, [sp, #16]
 804d49a:	7823      	ldrb	r3, [r4, #0]
 804d49c:	2b2e      	cmp	r3, #46	; 0x2e
 804d49e:	d10c      	bne.n	804d4ba <_vfiprintf_r+0x176>
 804d4a0:	7863      	ldrb	r3, [r4, #1]
 804d4a2:	2b2a      	cmp	r3, #42	; 0x2a
 804d4a4:	d135      	bne.n	804d512 <_vfiprintf_r+0x1ce>
 804d4a6:	9b03      	ldr	r3, [sp, #12]
 804d4a8:	1d1a      	adds	r2, r3, #4
 804d4aa:	681b      	ldr	r3, [r3, #0]
 804d4ac:	9203      	str	r2, [sp, #12]
 804d4ae:	2b00      	cmp	r3, #0
 804d4b0:	bfb8      	it	lt
 804d4b2:	f04f 33ff 	movlt.w	r3, #4294967295
 804d4b6:	3402      	adds	r4, #2
 804d4b8:	9305      	str	r3, [sp, #20]
 804d4ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 804d5a0 <_vfiprintf_r+0x25c>
 804d4be:	7821      	ldrb	r1, [r4, #0]
 804d4c0:	2203      	movs	r2, #3
 804d4c2:	4650      	mov	r0, sl
 804d4c4:	f7f2 fe94 	bl	80401f0 <memchr>
 804d4c8:	b140      	cbz	r0, 804d4dc <_vfiprintf_r+0x198>
 804d4ca:	2340      	movs	r3, #64	; 0x40
 804d4cc:	eba0 000a 	sub.w	r0, r0, sl
 804d4d0:	fa03 f000 	lsl.w	r0, r3, r0
 804d4d4:	9b04      	ldr	r3, [sp, #16]
 804d4d6:	4303      	orrs	r3, r0
 804d4d8:	3401      	adds	r4, #1
 804d4da:	9304      	str	r3, [sp, #16]
 804d4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 804d4e0:	482c      	ldr	r0, [pc, #176]	; (804d594 <_vfiprintf_r+0x250>)
 804d4e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804d4e6:	2206      	movs	r2, #6
 804d4e8:	f7f2 fe82 	bl	80401f0 <memchr>
 804d4ec:	2800      	cmp	r0, #0
 804d4ee:	d03f      	beq.n	804d570 <_vfiprintf_r+0x22c>
 804d4f0:	4b29      	ldr	r3, [pc, #164]	; (804d598 <_vfiprintf_r+0x254>)
 804d4f2:	bb1b      	cbnz	r3, 804d53c <_vfiprintf_r+0x1f8>
 804d4f4:	9b03      	ldr	r3, [sp, #12]
 804d4f6:	3307      	adds	r3, #7
 804d4f8:	f023 0307 	bic.w	r3, r3, #7
 804d4fc:	3308      	adds	r3, #8
 804d4fe:	9303      	str	r3, [sp, #12]
 804d500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804d502:	443b      	add	r3, r7
 804d504:	9309      	str	r3, [sp, #36]	; 0x24
 804d506:	e767      	b.n	804d3d8 <_vfiprintf_r+0x94>
 804d508:	fb0c 3202 	mla	r2, ip, r2, r3
 804d50c:	460c      	mov	r4, r1
 804d50e:	2001      	movs	r0, #1
 804d510:	e7a5      	b.n	804d45e <_vfiprintf_r+0x11a>
 804d512:	2300      	movs	r3, #0
 804d514:	3401      	adds	r4, #1
 804d516:	9305      	str	r3, [sp, #20]
 804d518:	4619      	mov	r1, r3
 804d51a:	f04f 0c0a 	mov.w	ip, #10
 804d51e:	4620      	mov	r0, r4
 804d520:	f810 2b01 	ldrb.w	r2, [r0], #1
 804d524:	3a30      	subs	r2, #48	; 0x30
 804d526:	2a09      	cmp	r2, #9
 804d528:	d903      	bls.n	804d532 <_vfiprintf_r+0x1ee>
 804d52a:	2b00      	cmp	r3, #0
 804d52c:	d0c5      	beq.n	804d4ba <_vfiprintf_r+0x176>
 804d52e:	9105      	str	r1, [sp, #20]
 804d530:	e7c3      	b.n	804d4ba <_vfiprintf_r+0x176>
 804d532:	fb0c 2101 	mla	r1, ip, r1, r2
 804d536:	4604      	mov	r4, r0
 804d538:	2301      	movs	r3, #1
 804d53a:	e7f0      	b.n	804d51e <_vfiprintf_r+0x1da>
 804d53c:	ab03      	add	r3, sp, #12
 804d53e:	9300      	str	r3, [sp, #0]
 804d540:	462a      	mov	r2, r5
 804d542:	4b16      	ldr	r3, [pc, #88]	; (804d59c <_vfiprintf_r+0x258>)
 804d544:	a904      	add	r1, sp, #16
 804d546:	4630      	mov	r0, r6
 804d548:	f3af 8000 	nop.w
 804d54c:	4607      	mov	r7, r0
 804d54e:	1c78      	adds	r0, r7, #1
 804d550:	d1d6      	bne.n	804d500 <_vfiprintf_r+0x1bc>
 804d552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804d554:	07d9      	lsls	r1, r3, #31
 804d556:	d405      	bmi.n	804d564 <_vfiprintf_r+0x220>
 804d558:	89ab      	ldrh	r3, [r5, #12]
 804d55a:	059a      	lsls	r2, r3, #22
 804d55c:	d402      	bmi.n	804d564 <_vfiprintf_r+0x220>
 804d55e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804d560:	f7ff fcf7 	bl	804cf52 <__retarget_lock_release_recursive>
 804d564:	89ab      	ldrh	r3, [r5, #12]
 804d566:	065b      	lsls	r3, r3, #25
 804d568:	f53f af12 	bmi.w	804d390 <_vfiprintf_r+0x4c>
 804d56c:	9809      	ldr	r0, [sp, #36]	; 0x24
 804d56e:	e711      	b.n	804d394 <_vfiprintf_r+0x50>
 804d570:	ab03      	add	r3, sp, #12
 804d572:	9300      	str	r3, [sp, #0]
 804d574:	462a      	mov	r2, r5
 804d576:	4b09      	ldr	r3, [pc, #36]	; (804d59c <_vfiprintf_r+0x258>)
 804d578:	a904      	add	r1, sp, #16
 804d57a:	4630      	mov	r0, r6
 804d57c:	f000 f880 	bl	804d680 <_printf_i>
 804d580:	e7e4      	b.n	804d54c <_vfiprintf_r+0x208>
 804d582:	bf00      	nop
 804d584:	0804fb08 	.word	0x0804fb08
 804d588:	0804fb28 	.word	0x0804fb28
 804d58c:	0804fae8 	.word	0x0804fae8
 804d590:	0804fb48 	.word	0x0804fb48
 804d594:	0804fb52 	.word	0x0804fb52
 804d598:	00000000 	.word	0x00000000
 804d59c:	0804d31f 	.word	0x0804d31f
 804d5a0:	0804fb4e 	.word	0x0804fb4e

0804d5a4 <_printf_common>:
 804d5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804d5a8:	4616      	mov	r6, r2
 804d5aa:	4699      	mov	r9, r3
 804d5ac:	688a      	ldr	r2, [r1, #8]
 804d5ae:	690b      	ldr	r3, [r1, #16]
 804d5b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 804d5b4:	4293      	cmp	r3, r2
 804d5b6:	bfb8      	it	lt
 804d5b8:	4613      	movlt	r3, r2
 804d5ba:	6033      	str	r3, [r6, #0]
 804d5bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 804d5c0:	4607      	mov	r7, r0
 804d5c2:	460c      	mov	r4, r1
 804d5c4:	b10a      	cbz	r2, 804d5ca <_printf_common+0x26>
 804d5c6:	3301      	adds	r3, #1
 804d5c8:	6033      	str	r3, [r6, #0]
 804d5ca:	6823      	ldr	r3, [r4, #0]
 804d5cc:	0699      	lsls	r1, r3, #26
 804d5ce:	bf42      	ittt	mi
 804d5d0:	6833      	ldrmi	r3, [r6, #0]
 804d5d2:	3302      	addmi	r3, #2
 804d5d4:	6033      	strmi	r3, [r6, #0]
 804d5d6:	6825      	ldr	r5, [r4, #0]
 804d5d8:	f015 0506 	ands.w	r5, r5, #6
 804d5dc:	d106      	bne.n	804d5ec <_printf_common+0x48>
 804d5de:	f104 0a19 	add.w	sl, r4, #25
 804d5e2:	68e3      	ldr	r3, [r4, #12]
 804d5e4:	6832      	ldr	r2, [r6, #0]
 804d5e6:	1a9b      	subs	r3, r3, r2
 804d5e8:	42ab      	cmp	r3, r5
 804d5ea:	dc26      	bgt.n	804d63a <_printf_common+0x96>
 804d5ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 804d5f0:	1e13      	subs	r3, r2, #0
 804d5f2:	6822      	ldr	r2, [r4, #0]
 804d5f4:	bf18      	it	ne
 804d5f6:	2301      	movne	r3, #1
 804d5f8:	0692      	lsls	r2, r2, #26
 804d5fa:	d42b      	bmi.n	804d654 <_printf_common+0xb0>
 804d5fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 804d600:	4649      	mov	r1, r9
 804d602:	4638      	mov	r0, r7
 804d604:	47c0      	blx	r8
 804d606:	3001      	adds	r0, #1
 804d608:	d01e      	beq.n	804d648 <_printf_common+0xa4>
 804d60a:	6823      	ldr	r3, [r4, #0]
 804d60c:	68e5      	ldr	r5, [r4, #12]
 804d60e:	6832      	ldr	r2, [r6, #0]
 804d610:	f003 0306 	and.w	r3, r3, #6
 804d614:	2b04      	cmp	r3, #4
 804d616:	bf08      	it	eq
 804d618:	1aad      	subeq	r5, r5, r2
 804d61a:	68a3      	ldr	r3, [r4, #8]
 804d61c:	6922      	ldr	r2, [r4, #16]
 804d61e:	bf0c      	ite	eq
 804d620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804d624:	2500      	movne	r5, #0
 804d626:	4293      	cmp	r3, r2
 804d628:	bfc4      	itt	gt
 804d62a:	1a9b      	subgt	r3, r3, r2
 804d62c:	18ed      	addgt	r5, r5, r3
 804d62e:	2600      	movs	r6, #0
 804d630:	341a      	adds	r4, #26
 804d632:	42b5      	cmp	r5, r6
 804d634:	d11a      	bne.n	804d66c <_printf_common+0xc8>
 804d636:	2000      	movs	r0, #0
 804d638:	e008      	b.n	804d64c <_printf_common+0xa8>
 804d63a:	2301      	movs	r3, #1
 804d63c:	4652      	mov	r2, sl
 804d63e:	4649      	mov	r1, r9
 804d640:	4638      	mov	r0, r7
 804d642:	47c0      	blx	r8
 804d644:	3001      	adds	r0, #1
 804d646:	d103      	bne.n	804d650 <_printf_common+0xac>
 804d648:	f04f 30ff 	mov.w	r0, #4294967295
 804d64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804d650:	3501      	adds	r5, #1
 804d652:	e7c6      	b.n	804d5e2 <_printf_common+0x3e>
 804d654:	18e1      	adds	r1, r4, r3
 804d656:	1c5a      	adds	r2, r3, #1
 804d658:	2030      	movs	r0, #48	; 0x30
 804d65a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 804d65e:	4422      	add	r2, r4
 804d660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 804d664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 804d668:	3302      	adds	r3, #2
 804d66a:	e7c7      	b.n	804d5fc <_printf_common+0x58>
 804d66c:	2301      	movs	r3, #1
 804d66e:	4622      	mov	r2, r4
 804d670:	4649      	mov	r1, r9
 804d672:	4638      	mov	r0, r7
 804d674:	47c0      	blx	r8
 804d676:	3001      	adds	r0, #1
 804d678:	d0e6      	beq.n	804d648 <_printf_common+0xa4>
 804d67a:	3601      	adds	r6, #1
 804d67c:	e7d9      	b.n	804d632 <_printf_common+0x8e>
	...

0804d680 <_printf_i>:
 804d680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 804d684:	7e0f      	ldrb	r7, [r1, #24]
 804d686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 804d688:	2f78      	cmp	r7, #120	; 0x78
 804d68a:	4691      	mov	r9, r2
 804d68c:	4680      	mov	r8, r0
 804d68e:	460c      	mov	r4, r1
 804d690:	469a      	mov	sl, r3
 804d692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 804d696:	d807      	bhi.n	804d6a8 <_printf_i+0x28>
 804d698:	2f62      	cmp	r7, #98	; 0x62
 804d69a:	d80a      	bhi.n	804d6b2 <_printf_i+0x32>
 804d69c:	2f00      	cmp	r7, #0
 804d69e:	f000 80d8 	beq.w	804d852 <_printf_i+0x1d2>
 804d6a2:	2f58      	cmp	r7, #88	; 0x58
 804d6a4:	f000 80a3 	beq.w	804d7ee <_printf_i+0x16e>
 804d6a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804d6ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 804d6b0:	e03a      	b.n	804d728 <_printf_i+0xa8>
 804d6b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 804d6b6:	2b15      	cmp	r3, #21
 804d6b8:	d8f6      	bhi.n	804d6a8 <_printf_i+0x28>
 804d6ba:	a101      	add	r1, pc, #4	; (adr r1, 804d6c0 <_printf_i+0x40>)
 804d6bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 804d6c0:	0804d719 	.word	0x0804d719
 804d6c4:	0804d72d 	.word	0x0804d72d
 804d6c8:	0804d6a9 	.word	0x0804d6a9
 804d6cc:	0804d6a9 	.word	0x0804d6a9
 804d6d0:	0804d6a9 	.word	0x0804d6a9
 804d6d4:	0804d6a9 	.word	0x0804d6a9
 804d6d8:	0804d72d 	.word	0x0804d72d
 804d6dc:	0804d6a9 	.word	0x0804d6a9
 804d6e0:	0804d6a9 	.word	0x0804d6a9
 804d6e4:	0804d6a9 	.word	0x0804d6a9
 804d6e8:	0804d6a9 	.word	0x0804d6a9
 804d6ec:	0804d839 	.word	0x0804d839
 804d6f0:	0804d75d 	.word	0x0804d75d
 804d6f4:	0804d81b 	.word	0x0804d81b
 804d6f8:	0804d6a9 	.word	0x0804d6a9
 804d6fc:	0804d6a9 	.word	0x0804d6a9
 804d700:	0804d85b 	.word	0x0804d85b
 804d704:	0804d6a9 	.word	0x0804d6a9
 804d708:	0804d75d 	.word	0x0804d75d
 804d70c:	0804d6a9 	.word	0x0804d6a9
 804d710:	0804d6a9 	.word	0x0804d6a9
 804d714:	0804d823 	.word	0x0804d823
 804d718:	682b      	ldr	r3, [r5, #0]
 804d71a:	1d1a      	adds	r2, r3, #4
 804d71c:	681b      	ldr	r3, [r3, #0]
 804d71e:	602a      	str	r2, [r5, #0]
 804d720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804d724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 804d728:	2301      	movs	r3, #1
 804d72a:	e0a3      	b.n	804d874 <_printf_i+0x1f4>
 804d72c:	6820      	ldr	r0, [r4, #0]
 804d72e:	6829      	ldr	r1, [r5, #0]
 804d730:	0606      	lsls	r6, r0, #24
 804d732:	f101 0304 	add.w	r3, r1, #4
 804d736:	d50a      	bpl.n	804d74e <_printf_i+0xce>
 804d738:	680e      	ldr	r6, [r1, #0]
 804d73a:	602b      	str	r3, [r5, #0]
 804d73c:	2e00      	cmp	r6, #0
 804d73e:	da03      	bge.n	804d748 <_printf_i+0xc8>
 804d740:	232d      	movs	r3, #45	; 0x2d
 804d742:	4276      	negs	r6, r6
 804d744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804d748:	485e      	ldr	r0, [pc, #376]	; (804d8c4 <_printf_i+0x244>)
 804d74a:	230a      	movs	r3, #10
 804d74c:	e019      	b.n	804d782 <_printf_i+0x102>
 804d74e:	680e      	ldr	r6, [r1, #0]
 804d750:	602b      	str	r3, [r5, #0]
 804d752:	f010 0f40 	tst.w	r0, #64	; 0x40
 804d756:	bf18      	it	ne
 804d758:	b236      	sxthne	r6, r6
 804d75a:	e7ef      	b.n	804d73c <_printf_i+0xbc>
 804d75c:	682b      	ldr	r3, [r5, #0]
 804d75e:	6820      	ldr	r0, [r4, #0]
 804d760:	1d19      	adds	r1, r3, #4
 804d762:	6029      	str	r1, [r5, #0]
 804d764:	0601      	lsls	r1, r0, #24
 804d766:	d501      	bpl.n	804d76c <_printf_i+0xec>
 804d768:	681e      	ldr	r6, [r3, #0]
 804d76a:	e002      	b.n	804d772 <_printf_i+0xf2>
 804d76c:	0646      	lsls	r6, r0, #25
 804d76e:	d5fb      	bpl.n	804d768 <_printf_i+0xe8>
 804d770:	881e      	ldrh	r6, [r3, #0]
 804d772:	4854      	ldr	r0, [pc, #336]	; (804d8c4 <_printf_i+0x244>)
 804d774:	2f6f      	cmp	r7, #111	; 0x6f
 804d776:	bf0c      	ite	eq
 804d778:	2308      	moveq	r3, #8
 804d77a:	230a      	movne	r3, #10
 804d77c:	2100      	movs	r1, #0
 804d77e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 804d782:	6865      	ldr	r5, [r4, #4]
 804d784:	60a5      	str	r5, [r4, #8]
 804d786:	2d00      	cmp	r5, #0
 804d788:	bfa2      	ittt	ge
 804d78a:	6821      	ldrge	r1, [r4, #0]
 804d78c:	f021 0104 	bicge.w	r1, r1, #4
 804d790:	6021      	strge	r1, [r4, #0]
 804d792:	b90e      	cbnz	r6, 804d798 <_printf_i+0x118>
 804d794:	2d00      	cmp	r5, #0
 804d796:	d04d      	beq.n	804d834 <_printf_i+0x1b4>
 804d798:	4615      	mov	r5, r2
 804d79a:	fbb6 f1f3 	udiv	r1, r6, r3
 804d79e:	fb03 6711 	mls	r7, r3, r1, r6
 804d7a2:	5dc7      	ldrb	r7, [r0, r7]
 804d7a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 804d7a8:	4637      	mov	r7, r6
 804d7aa:	42bb      	cmp	r3, r7
 804d7ac:	460e      	mov	r6, r1
 804d7ae:	d9f4      	bls.n	804d79a <_printf_i+0x11a>
 804d7b0:	2b08      	cmp	r3, #8
 804d7b2:	d10b      	bne.n	804d7cc <_printf_i+0x14c>
 804d7b4:	6823      	ldr	r3, [r4, #0]
 804d7b6:	07de      	lsls	r6, r3, #31
 804d7b8:	d508      	bpl.n	804d7cc <_printf_i+0x14c>
 804d7ba:	6923      	ldr	r3, [r4, #16]
 804d7bc:	6861      	ldr	r1, [r4, #4]
 804d7be:	4299      	cmp	r1, r3
 804d7c0:	bfde      	ittt	le
 804d7c2:	2330      	movle	r3, #48	; 0x30
 804d7c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 804d7c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 804d7cc:	1b52      	subs	r2, r2, r5
 804d7ce:	6122      	str	r2, [r4, #16]
 804d7d0:	f8cd a000 	str.w	sl, [sp]
 804d7d4:	464b      	mov	r3, r9
 804d7d6:	aa03      	add	r2, sp, #12
 804d7d8:	4621      	mov	r1, r4
 804d7da:	4640      	mov	r0, r8
 804d7dc:	f7ff fee2 	bl	804d5a4 <_printf_common>
 804d7e0:	3001      	adds	r0, #1
 804d7e2:	d14c      	bne.n	804d87e <_printf_i+0x1fe>
 804d7e4:	f04f 30ff 	mov.w	r0, #4294967295
 804d7e8:	b004      	add	sp, #16
 804d7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804d7ee:	4835      	ldr	r0, [pc, #212]	; (804d8c4 <_printf_i+0x244>)
 804d7f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 804d7f4:	6829      	ldr	r1, [r5, #0]
 804d7f6:	6823      	ldr	r3, [r4, #0]
 804d7f8:	f851 6b04 	ldr.w	r6, [r1], #4
 804d7fc:	6029      	str	r1, [r5, #0]
 804d7fe:	061d      	lsls	r5, r3, #24
 804d800:	d514      	bpl.n	804d82c <_printf_i+0x1ac>
 804d802:	07df      	lsls	r7, r3, #31
 804d804:	bf44      	itt	mi
 804d806:	f043 0320 	orrmi.w	r3, r3, #32
 804d80a:	6023      	strmi	r3, [r4, #0]
 804d80c:	b91e      	cbnz	r6, 804d816 <_printf_i+0x196>
 804d80e:	6823      	ldr	r3, [r4, #0]
 804d810:	f023 0320 	bic.w	r3, r3, #32
 804d814:	6023      	str	r3, [r4, #0]
 804d816:	2310      	movs	r3, #16
 804d818:	e7b0      	b.n	804d77c <_printf_i+0xfc>
 804d81a:	6823      	ldr	r3, [r4, #0]
 804d81c:	f043 0320 	orr.w	r3, r3, #32
 804d820:	6023      	str	r3, [r4, #0]
 804d822:	2378      	movs	r3, #120	; 0x78
 804d824:	4828      	ldr	r0, [pc, #160]	; (804d8c8 <_printf_i+0x248>)
 804d826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 804d82a:	e7e3      	b.n	804d7f4 <_printf_i+0x174>
 804d82c:	0659      	lsls	r1, r3, #25
 804d82e:	bf48      	it	mi
 804d830:	b2b6      	uxthmi	r6, r6
 804d832:	e7e6      	b.n	804d802 <_printf_i+0x182>
 804d834:	4615      	mov	r5, r2
 804d836:	e7bb      	b.n	804d7b0 <_printf_i+0x130>
 804d838:	682b      	ldr	r3, [r5, #0]
 804d83a:	6826      	ldr	r6, [r4, #0]
 804d83c:	6961      	ldr	r1, [r4, #20]
 804d83e:	1d18      	adds	r0, r3, #4
 804d840:	6028      	str	r0, [r5, #0]
 804d842:	0635      	lsls	r5, r6, #24
 804d844:	681b      	ldr	r3, [r3, #0]
 804d846:	d501      	bpl.n	804d84c <_printf_i+0x1cc>
 804d848:	6019      	str	r1, [r3, #0]
 804d84a:	e002      	b.n	804d852 <_printf_i+0x1d2>
 804d84c:	0670      	lsls	r0, r6, #25
 804d84e:	d5fb      	bpl.n	804d848 <_printf_i+0x1c8>
 804d850:	8019      	strh	r1, [r3, #0]
 804d852:	2300      	movs	r3, #0
 804d854:	6123      	str	r3, [r4, #16]
 804d856:	4615      	mov	r5, r2
 804d858:	e7ba      	b.n	804d7d0 <_printf_i+0x150>
 804d85a:	682b      	ldr	r3, [r5, #0]
 804d85c:	1d1a      	adds	r2, r3, #4
 804d85e:	602a      	str	r2, [r5, #0]
 804d860:	681d      	ldr	r5, [r3, #0]
 804d862:	6862      	ldr	r2, [r4, #4]
 804d864:	2100      	movs	r1, #0
 804d866:	4628      	mov	r0, r5
 804d868:	f7f2 fcc2 	bl	80401f0 <memchr>
 804d86c:	b108      	cbz	r0, 804d872 <_printf_i+0x1f2>
 804d86e:	1b40      	subs	r0, r0, r5
 804d870:	6060      	str	r0, [r4, #4]
 804d872:	6863      	ldr	r3, [r4, #4]
 804d874:	6123      	str	r3, [r4, #16]
 804d876:	2300      	movs	r3, #0
 804d878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804d87c:	e7a8      	b.n	804d7d0 <_printf_i+0x150>
 804d87e:	6923      	ldr	r3, [r4, #16]
 804d880:	462a      	mov	r2, r5
 804d882:	4649      	mov	r1, r9
 804d884:	4640      	mov	r0, r8
 804d886:	47d0      	blx	sl
 804d888:	3001      	adds	r0, #1
 804d88a:	d0ab      	beq.n	804d7e4 <_printf_i+0x164>
 804d88c:	6823      	ldr	r3, [r4, #0]
 804d88e:	079b      	lsls	r3, r3, #30
 804d890:	d413      	bmi.n	804d8ba <_printf_i+0x23a>
 804d892:	68e0      	ldr	r0, [r4, #12]
 804d894:	9b03      	ldr	r3, [sp, #12]
 804d896:	4298      	cmp	r0, r3
 804d898:	bfb8      	it	lt
 804d89a:	4618      	movlt	r0, r3
 804d89c:	e7a4      	b.n	804d7e8 <_printf_i+0x168>
 804d89e:	2301      	movs	r3, #1
 804d8a0:	4632      	mov	r2, r6
 804d8a2:	4649      	mov	r1, r9
 804d8a4:	4640      	mov	r0, r8
 804d8a6:	47d0      	blx	sl
 804d8a8:	3001      	adds	r0, #1
 804d8aa:	d09b      	beq.n	804d7e4 <_printf_i+0x164>
 804d8ac:	3501      	adds	r5, #1
 804d8ae:	68e3      	ldr	r3, [r4, #12]
 804d8b0:	9903      	ldr	r1, [sp, #12]
 804d8b2:	1a5b      	subs	r3, r3, r1
 804d8b4:	42ab      	cmp	r3, r5
 804d8b6:	dcf2      	bgt.n	804d89e <_printf_i+0x21e>
 804d8b8:	e7eb      	b.n	804d892 <_printf_i+0x212>
 804d8ba:	2500      	movs	r5, #0
 804d8bc:	f104 0619 	add.w	r6, r4, #25
 804d8c0:	e7f5      	b.n	804d8ae <_printf_i+0x22e>
 804d8c2:	bf00      	nop
 804d8c4:	0804fb59 	.word	0x0804fb59
 804d8c8:	0804fb6a 	.word	0x0804fb6a

0804d8cc <__sread>:
 804d8cc:	b510      	push	{r4, lr}
 804d8ce:	460c      	mov	r4, r1
 804d8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d8d4:	f000 f8ec 	bl	804dab0 <_read_r>
 804d8d8:	2800      	cmp	r0, #0
 804d8da:	bfab      	itete	ge
 804d8dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804d8de:	89a3      	ldrhlt	r3, [r4, #12]
 804d8e0:	181b      	addge	r3, r3, r0
 804d8e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 804d8e6:	bfac      	ite	ge
 804d8e8:	6563      	strge	r3, [r4, #84]	; 0x54
 804d8ea:	81a3      	strhlt	r3, [r4, #12]
 804d8ec:	bd10      	pop	{r4, pc}

0804d8ee <__swrite>:
 804d8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804d8f2:	461f      	mov	r7, r3
 804d8f4:	898b      	ldrh	r3, [r1, #12]
 804d8f6:	05db      	lsls	r3, r3, #23
 804d8f8:	4605      	mov	r5, r0
 804d8fa:	460c      	mov	r4, r1
 804d8fc:	4616      	mov	r6, r2
 804d8fe:	d505      	bpl.n	804d90c <__swrite+0x1e>
 804d900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d904:	2302      	movs	r3, #2
 804d906:	2200      	movs	r2, #0
 804d908:	f000 f868 	bl	804d9dc <_lseek_r>
 804d90c:	89a3      	ldrh	r3, [r4, #12]
 804d90e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804d912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804d916:	81a3      	strh	r3, [r4, #12]
 804d918:	4632      	mov	r2, r6
 804d91a:	463b      	mov	r3, r7
 804d91c:	4628      	mov	r0, r5
 804d91e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804d922:	f000 b817 	b.w	804d954 <_write_r>

0804d926 <__sseek>:
 804d926:	b510      	push	{r4, lr}
 804d928:	460c      	mov	r4, r1
 804d92a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d92e:	f000 f855 	bl	804d9dc <_lseek_r>
 804d932:	1c43      	adds	r3, r0, #1
 804d934:	89a3      	ldrh	r3, [r4, #12]
 804d936:	bf15      	itete	ne
 804d938:	6560      	strne	r0, [r4, #84]	; 0x54
 804d93a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804d93e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 804d942:	81a3      	strheq	r3, [r4, #12]
 804d944:	bf18      	it	ne
 804d946:	81a3      	strhne	r3, [r4, #12]
 804d948:	bd10      	pop	{r4, pc}

0804d94a <__sclose>:
 804d94a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d94e:	f000 b813 	b.w	804d978 <_close_r>
	...

0804d954 <_write_r>:
 804d954:	b538      	push	{r3, r4, r5, lr}
 804d956:	4d07      	ldr	r5, [pc, #28]	; (804d974 <_write_r+0x20>)
 804d958:	4604      	mov	r4, r0
 804d95a:	4608      	mov	r0, r1
 804d95c:	4611      	mov	r1, r2
 804d95e:	2200      	movs	r2, #0
 804d960:	602a      	str	r2, [r5, #0]
 804d962:	461a      	mov	r2, r3
 804d964:	f7f3 ff39 	bl	80417da <_write>
 804d968:	1c43      	adds	r3, r0, #1
 804d96a:	d102      	bne.n	804d972 <_write_r+0x1e>
 804d96c:	682b      	ldr	r3, [r5, #0]
 804d96e:	b103      	cbz	r3, 804d972 <_write_r+0x1e>
 804d970:	6023      	str	r3, [r4, #0]
 804d972:	bd38      	pop	{r3, r4, r5, pc}
 804d974:	20000d54 	.word	0x20000d54

0804d978 <_close_r>:
 804d978:	b538      	push	{r3, r4, r5, lr}
 804d97a:	4d06      	ldr	r5, [pc, #24]	; (804d994 <_close_r+0x1c>)
 804d97c:	2300      	movs	r3, #0
 804d97e:	4604      	mov	r4, r0
 804d980:	4608      	mov	r0, r1
 804d982:	602b      	str	r3, [r5, #0]
 804d984:	f7f3 ff45 	bl	8041812 <_close>
 804d988:	1c43      	adds	r3, r0, #1
 804d98a:	d102      	bne.n	804d992 <_close_r+0x1a>
 804d98c:	682b      	ldr	r3, [r5, #0]
 804d98e:	b103      	cbz	r3, 804d992 <_close_r+0x1a>
 804d990:	6023      	str	r3, [r4, #0]
 804d992:	bd38      	pop	{r3, r4, r5, pc}
 804d994:	20000d54 	.word	0x20000d54

0804d998 <_fstat_r>:
 804d998:	b538      	push	{r3, r4, r5, lr}
 804d99a:	4d07      	ldr	r5, [pc, #28]	; (804d9b8 <_fstat_r+0x20>)
 804d99c:	2300      	movs	r3, #0
 804d99e:	4604      	mov	r4, r0
 804d9a0:	4608      	mov	r0, r1
 804d9a2:	4611      	mov	r1, r2
 804d9a4:	602b      	str	r3, [r5, #0]
 804d9a6:	f7f3 ff40 	bl	804182a <_fstat>
 804d9aa:	1c43      	adds	r3, r0, #1
 804d9ac:	d102      	bne.n	804d9b4 <_fstat_r+0x1c>
 804d9ae:	682b      	ldr	r3, [r5, #0]
 804d9b0:	b103      	cbz	r3, 804d9b4 <_fstat_r+0x1c>
 804d9b2:	6023      	str	r3, [r4, #0]
 804d9b4:	bd38      	pop	{r3, r4, r5, pc}
 804d9b6:	bf00      	nop
 804d9b8:	20000d54 	.word	0x20000d54

0804d9bc <_isatty_r>:
 804d9bc:	b538      	push	{r3, r4, r5, lr}
 804d9be:	4d06      	ldr	r5, [pc, #24]	; (804d9d8 <_isatty_r+0x1c>)
 804d9c0:	2300      	movs	r3, #0
 804d9c2:	4604      	mov	r4, r0
 804d9c4:	4608      	mov	r0, r1
 804d9c6:	602b      	str	r3, [r5, #0]
 804d9c8:	f7f3 ff3f 	bl	804184a <_isatty>
 804d9cc:	1c43      	adds	r3, r0, #1
 804d9ce:	d102      	bne.n	804d9d6 <_isatty_r+0x1a>
 804d9d0:	682b      	ldr	r3, [r5, #0]
 804d9d2:	b103      	cbz	r3, 804d9d6 <_isatty_r+0x1a>
 804d9d4:	6023      	str	r3, [r4, #0]
 804d9d6:	bd38      	pop	{r3, r4, r5, pc}
 804d9d8:	20000d54 	.word	0x20000d54

0804d9dc <_lseek_r>:
 804d9dc:	b538      	push	{r3, r4, r5, lr}
 804d9de:	4d07      	ldr	r5, [pc, #28]	; (804d9fc <_lseek_r+0x20>)
 804d9e0:	4604      	mov	r4, r0
 804d9e2:	4608      	mov	r0, r1
 804d9e4:	4611      	mov	r1, r2
 804d9e6:	2200      	movs	r2, #0
 804d9e8:	602a      	str	r2, [r5, #0]
 804d9ea:	461a      	mov	r2, r3
 804d9ec:	f7f3 ff38 	bl	8041860 <_lseek>
 804d9f0:	1c43      	adds	r3, r0, #1
 804d9f2:	d102      	bne.n	804d9fa <_lseek_r+0x1e>
 804d9f4:	682b      	ldr	r3, [r5, #0]
 804d9f6:	b103      	cbz	r3, 804d9fa <_lseek_r+0x1e>
 804d9f8:	6023      	str	r3, [r4, #0]
 804d9fa:	bd38      	pop	{r3, r4, r5, pc}
 804d9fc:	20000d54 	.word	0x20000d54

0804da00 <memcpy>:
 804da00:	440a      	add	r2, r1
 804da02:	4291      	cmp	r1, r2
 804da04:	f100 33ff 	add.w	r3, r0, #4294967295
 804da08:	d100      	bne.n	804da0c <memcpy+0xc>
 804da0a:	4770      	bx	lr
 804da0c:	b510      	push	{r4, lr}
 804da0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 804da12:	f803 4f01 	strb.w	r4, [r3, #1]!
 804da16:	4291      	cmp	r1, r2
 804da18:	d1f9      	bne.n	804da0e <memcpy+0xe>
 804da1a:	bd10      	pop	{r4, pc}

0804da1c <memmove>:
 804da1c:	4288      	cmp	r0, r1
 804da1e:	b510      	push	{r4, lr}
 804da20:	eb01 0402 	add.w	r4, r1, r2
 804da24:	d902      	bls.n	804da2c <memmove+0x10>
 804da26:	4284      	cmp	r4, r0
 804da28:	4623      	mov	r3, r4
 804da2a:	d807      	bhi.n	804da3c <memmove+0x20>
 804da2c:	1e43      	subs	r3, r0, #1
 804da2e:	42a1      	cmp	r1, r4
 804da30:	d008      	beq.n	804da44 <memmove+0x28>
 804da32:	f811 2b01 	ldrb.w	r2, [r1], #1
 804da36:	f803 2f01 	strb.w	r2, [r3, #1]!
 804da3a:	e7f8      	b.n	804da2e <memmove+0x12>
 804da3c:	4402      	add	r2, r0
 804da3e:	4601      	mov	r1, r0
 804da40:	428a      	cmp	r2, r1
 804da42:	d100      	bne.n	804da46 <memmove+0x2a>
 804da44:	bd10      	pop	{r4, pc}
 804da46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 804da4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 804da4e:	e7f7      	b.n	804da40 <memmove+0x24>

0804da50 <_realloc_r>:
 804da50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804da54:	4680      	mov	r8, r0
 804da56:	4614      	mov	r4, r2
 804da58:	460e      	mov	r6, r1
 804da5a:	b921      	cbnz	r1, 804da66 <_realloc_r+0x16>
 804da5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804da60:	4611      	mov	r1, r2
 804da62:	f7fe becb 	b.w	804c7fc <_malloc_r>
 804da66:	b92a      	cbnz	r2, 804da74 <_realloc_r+0x24>
 804da68:	f7fe fe5c 	bl	804c724 <_free_r>
 804da6c:	4625      	mov	r5, r4
 804da6e:	4628      	mov	r0, r5
 804da70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804da74:	f000 f82e 	bl	804dad4 <_malloc_usable_size_r>
 804da78:	4284      	cmp	r4, r0
 804da7a:	4607      	mov	r7, r0
 804da7c:	d802      	bhi.n	804da84 <_realloc_r+0x34>
 804da7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 804da82:	d812      	bhi.n	804daaa <_realloc_r+0x5a>
 804da84:	4621      	mov	r1, r4
 804da86:	4640      	mov	r0, r8
 804da88:	f7fe feb8 	bl	804c7fc <_malloc_r>
 804da8c:	4605      	mov	r5, r0
 804da8e:	2800      	cmp	r0, #0
 804da90:	d0ed      	beq.n	804da6e <_realloc_r+0x1e>
 804da92:	42bc      	cmp	r4, r7
 804da94:	4622      	mov	r2, r4
 804da96:	4631      	mov	r1, r6
 804da98:	bf28      	it	cs
 804da9a:	463a      	movcs	r2, r7
 804da9c:	f7ff ffb0 	bl	804da00 <memcpy>
 804daa0:	4631      	mov	r1, r6
 804daa2:	4640      	mov	r0, r8
 804daa4:	f7fe fe3e 	bl	804c724 <_free_r>
 804daa8:	e7e1      	b.n	804da6e <_realloc_r+0x1e>
 804daaa:	4635      	mov	r5, r6
 804daac:	e7df      	b.n	804da6e <_realloc_r+0x1e>
	...

0804dab0 <_read_r>:
 804dab0:	b538      	push	{r3, r4, r5, lr}
 804dab2:	4d07      	ldr	r5, [pc, #28]	; (804dad0 <_read_r+0x20>)
 804dab4:	4604      	mov	r4, r0
 804dab6:	4608      	mov	r0, r1
 804dab8:	4611      	mov	r1, r2
 804daba:	2200      	movs	r2, #0
 804dabc:	602a      	str	r2, [r5, #0]
 804dabe:	461a      	mov	r2, r3
 804dac0:	f7f3 fe6e 	bl	80417a0 <_read>
 804dac4:	1c43      	adds	r3, r0, #1
 804dac6:	d102      	bne.n	804dace <_read_r+0x1e>
 804dac8:	682b      	ldr	r3, [r5, #0]
 804daca:	b103      	cbz	r3, 804dace <_read_r+0x1e>
 804dacc:	6023      	str	r3, [r4, #0]
 804dace:	bd38      	pop	{r3, r4, r5, pc}
 804dad0:	20000d54 	.word	0x20000d54

0804dad4 <_malloc_usable_size_r>:
 804dad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804dad8:	1f18      	subs	r0, r3, #4
 804dada:	2b00      	cmp	r3, #0
 804dadc:	bfbc      	itt	lt
 804dade:	580b      	ldrlt	r3, [r1, r0]
 804dae0:	18c0      	addlt	r0, r0, r3
 804dae2:	4770      	bx	lr

0804dae4 <_init>:
 804dae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804dae6:	bf00      	nop
 804dae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804daea:	bc08      	pop	{r3}
 804daec:	469e      	mov	lr, r3
 804daee:	4770      	bx	lr

0804daf0 <_fini>:
 804daf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804daf2:	bf00      	nop
 804daf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804daf6:	bc08      	pop	{r3}
 804daf8:	469e      	mov	lr, r3
 804dafa:	4770      	bx	lr
