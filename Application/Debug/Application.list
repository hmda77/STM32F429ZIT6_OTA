
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8c4  080201b0  080201b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002034  0802da74  0802da74  0001da74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802faa8  0802faa8  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  0802faa8  0802faa8  0001faa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802fab0  0802fab0  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802fab0  0802fab0  0001fab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802fab4  0802fab4  0001fab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0802fab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e0  2**0
                  CONTENTS
 10 .bss          00000cbc  200000e0  200000e0  000200e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d9c  20000d9c  000200e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a5d8  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005718  00000000  00000000  0004a6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002170  00000000  00000000  0004fe00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f50  00000000  00000000  00051f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002be0f  00000000  00000000  00053ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b299  00000000  00000000  0007fccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f014f  00000000  00000000  000aaf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019b0b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000097a0  00000000  00000000  0019b108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201b0 <__do_global_dtors_aux>:
 80201b0:	b510      	push	{r4, lr}
 80201b2:	4c05      	ldr	r4, [pc, #20]	; (80201c8 <__do_global_dtors_aux+0x18>)
 80201b4:	7823      	ldrb	r3, [r4, #0]
 80201b6:	b933      	cbnz	r3, 80201c6 <__do_global_dtors_aux+0x16>
 80201b8:	4b04      	ldr	r3, [pc, #16]	; (80201cc <__do_global_dtors_aux+0x1c>)
 80201ba:	b113      	cbz	r3, 80201c2 <__do_global_dtors_aux+0x12>
 80201bc:	4804      	ldr	r0, [pc, #16]	; (80201d0 <__do_global_dtors_aux+0x20>)
 80201be:	f3af 8000 	nop.w
 80201c2:	2301      	movs	r3, #1
 80201c4:	7023      	strb	r3, [r4, #0]
 80201c6:	bd10      	pop	{r4, pc}
 80201c8:	200000e0 	.word	0x200000e0
 80201cc:	00000000 	.word	0x00000000
 80201d0:	0802da5c 	.word	0x0802da5c

080201d4 <frame_dummy>:
 80201d4:	b508      	push	{r3, lr}
 80201d6:	4b03      	ldr	r3, [pc, #12]	; (80201e4 <frame_dummy+0x10>)
 80201d8:	b11b      	cbz	r3, 80201e2 <frame_dummy+0xe>
 80201da:	4903      	ldr	r1, [pc, #12]	; (80201e8 <frame_dummy+0x14>)
 80201dc:	4803      	ldr	r0, [pc, #12]	; (80201ec <frame_dummy+0x18>)
 80201de:	f3af 8000 	nop.w
 80201e2:	bd08      	pop	{r3, pc}
 80201e4:	00000000 	.word	0x00000000
 80201e8:	200000e4 	.word	0x200000e4
 80201ec:	0802da5c 	.word	0x0802da5c

080201f0 <memchr>:
 80201f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201f4:	2a10      	cmp	r2, #16
 80201f6:	db2b      	blt.n	8020250 <memchr+0x60>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	d008      	beq.n	8020210 <memchr+0x20>
 80201fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020202:	3a01      	subs	r2, #1
 8020204:	428b      	cmp	r3, r1
 8020206:	d02d      	beq.n	8020264 <memchr+0x74>
 8020208:	f010 0f07 	tst.w	r0, #7
 802020c:	b342      	cbz	r2, 8020260 <memchr+0x70>
 802020e:	d1f6      	bne.n	80201fe <memchr+0xe>
 8020210:	b4f0      	push	{r4, r5, r6, r7}
 8020212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802021a:	f022 0407 	bic.w	r4, r2, #7
 802021e:	f07f 0700 	mvns.w	r7, #0
 8020222:	2300      	movs	r3, #0
 8020224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020228:	3c08      	subs	r4, #8
 802022a:	ea85 0501 	eor.w	r5, r5, r1
 802022e:	ea86 0601 	eor.w	r6, r6, r1
 8020232:	fa85 f547 	uadd8	r5, r5, r7
 8020236:	faa3 f587 	sel	r5, r3, r7
 802023a:	fa86 f647 	uadd8	r6, r6, r7
 802023e:	faa5 f687 	sel	r6, r5, r7
 8020242:	b98e      	cbnz	r6, 8020268 <memchr+0x78>
 8020244:	d1ee      	bne.n	8020224 <memchr+0x34>
 8020246:	bcf0      	pop	{r4, r5, r6, r7}
 8020248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802024c:	f002 0207 	and.w	r2, r2, #7
 8020250:	b132      	cbz	r2, 8020260 <memchr+0x70>
 8020252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020256:	3a01      	subs	r2, #1
 8020258:	ea83 0301 	eor.w	r3, r3, r1
 802025c:	b113      	cbz	r3, 8020264 <memchr+0x74>
 802025e:	d1f8      	bne.n	8020252 <memchr+0x62>
 8020260:	2000      	movs	r0, #0
 8020262:	4770      	bx	lr
 8020264:	3801      	subs	r0, #1
 8020266:	4770      	bx	lr
 8020268:	2d00      	cmp	r5, #0
 802026a:	bf06      	itte	eq
 802026c:	4635      	moveq	r5, r6
 802026e:	3803      	subeq	r0, #3
 8020270:	3807      	subne	r0, #7
 8020272:	f015 0f01 	tst.w	r5, #1
 8020276:	d107      	bne.n	8020288 <memchr+0x98>
 8020278:	3001      	adds	r0, #1
 802027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802027e:	bf02      	ittt	eq
 8020280:	3001      	addeq	r0, #1
 8020282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020286:	3001      	addeq	r0, #1
 8020288:	bcf0      	pop	{r4, r5, r6, r7}
 802028a:	3801      	subs	r0, #1
 802028c:	4770      	bx	lr
 802028e:	bf00      	nop

08020290 <__aeabi_uldivmod>:
 8020290:	b953      	cbnz	r3, 80202a8 <__aeabi_uldivmod+0x18>
 8020292:	b94a      	cbnz	r2, 80202a8 <__aeabi_uldivmod+0x18>
 8020294:	2900      	cmp	r1, #0
 8020296:	bf08      	it	eq
 8020298:	2800      	cmpeq	r0, #0
 802029a:	bf1c      	itt	ne
 802029c:	f04f 31ff 	movne.w	r1, #4294967295
 80202a0:	f04f 30ff 	movne.w	r0, #4294967295
 80202a4:	f000 b974 	b.w	8020590 <__aeabi_idiv0>
 80202a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80202ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202b0:	f000 f806 	bl	80202c0 <__udivmoddi4>
 80202b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202bc:	b004      	add	sp, #16
 80202be:	4770      	bx	lr

080202c0 <__udivmoddi4>:
 80202c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202c4:	9d08      	ldr	r5, [sp, #32]
 80202c6:	4604      	mov	r4, r0
 80202c8:	468e      	mov	lr, r1
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d14d      	bne.n	802036a <__udivmoddi4+0xaa>
 80202ce:	428a      	cmp	r2, r1
 80202d0:	4694      	mov	ip, r2
 80202d2:	d969      	bls.n	80203a8 <__udivmoddi4+0xe8>
 80202d4:	fab2 f282 	clz	r2, r2
 80202d8:	b152      	cbz	r2, 80202f0 <__udivmoddi4+0x30>
 80202da:	fa01 f302 	lsl.w	r3, r1, r2
 80202de:	f1c2 0120 	rsb	r1, r2, #32
 80202e2:	fa20 f101 	lsr.w	r1, r0, r1
 80202e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80202ea:	ea41 0e03 	orr.w	lr, r1, r3
 80202ee:	4094      	lsls	r4, r2
 80202f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80202f4:	0c21      	lsrs	r1, r4, #16
 80202f6:	fbbe f6f8 	udiv	r6, lr, r8
 80202fa:	fa1f f78c 	uxth.w	r7, ip
 80202fe:	fb08 e316 	mls	r3, r8, r6, lr
 8020302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020306:	fb06 f107 	mul.w	r1, r6, r7
 802030a:	4299      	cmp	r1, r3
 802030c:	d90a      	bls.n	8020324 <__udivmoddi4+0x64>
 802030e:	eb1c 0303 	adds.w	r3, ip, r3
 8020312:	f106 30ff 	add.w	r0, r6, #4294967295
 8020316:	f080 811f 	bcs.w	8020558 <__udivmoddi4+0x298>
 802031a:	4299      	cmp	r1, r3
 802031c:	f240 811c 	bls.w	8020558 <__udivmoddi4+0x298>
 8020320:	3e02      	subs	r6, #2
 8020322:	4463      	add	r3, ip
 8020324:	1a5b      	subs	r3, r3, r1
 8020326:	b2a4      	uxth	r4, r4
 8020328:	fbb3 f0f8 	udiv	r0, r3, r8
 802032c:	fb08 3310 	mls	r3, r8, r0, r3
 8020330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020334:	fb00 f707 	mul.w	r7, r0, r7
 8020338:	42a7      	cmp	r7, r4
 802033a:	d90a      	bls.n	8020352 <__udivmoddi4+0x92>
 802033c:	eb1c 0404 	adds.w	r4, ip, r4
 8020340:	f100 33ff 	add.w	r3, r0, #4294967295
 8020344:	f080 810a 	bcs.w	802055c <__udivmoddi4+0x29c>
 8020348:	42a7      	cmp	r7, r4
 802034a:	f240 8107 	bls.w	802055c <__udivmoddi4+0x29c>
 802034e:	4464      	add	r4, ip
 8020350:	3802      	subs	r0, #2
 8020352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020356:	1be4      	subs	r4, r4, r7
 8020358:	2600      	movs	r6, #0
 802035a:	b11d      	cbz	r5, 8020364 <__udivmoddi4+0xa4>
 802035c:	40d4      	lsrs	r4, r2
 802035e:	2300      	movs	r3, #0
 8020360:	e9c5 4300 	strd	r4, r3, [r5]
 8020364:	4631      	mov	r1, r6
 8020366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802036a:	428b      	cmp	r3, r1
 802036c:	d909      	bls.n	8020382 <__udivmoddi4+0xc2>
 802036e:	2d00      	cmp	r5, #0
 8020370:	f000 80ef 	beq.w	8020552 <__udivmoddi4+0x292>
 8020374:	2600      	movs	r6, #0
 8020376:	e9c5 0100 	strd	r0, r1, [r5]
 802037a:	4630      	mov	r0, r6
 802037c:	4631      	mov	r1, r6
 802037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020382:	fab3 f683 	clz	r6, r3
 8020386:	2e00      	cmp	r6, #0
 8020388:	d14a      	bne.n	8020420 <__udivmoddi4+0x160>
 802038a:	428b      	cmp	r3, r1
 802038c:	d302      	bcc.n	8020394 <__udivmoddi4+0xd4>
 802038e:	4282      	cmp	r2, r0
 8020390:	f200 80f9 	bhi.w	8020586 <__udivmoddi4+0x2c6>
 8020394:	1a84      	subs	r4, r0, r2
 8020396:	eb61 0303 	sbc.w	r3, r1, r3
 802039a:	2001      	movs	r0, #1
 802039c:	469e      	mov	lr, r3
 802039e:	2d00      	cmp	r5, #0
 80203a0:	d0e0      	beq.n	8020364 <__udivmoddi4+0xa4>
 80203a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80203a6:	e7dd      	b.n	8020364 <__udivmoddi4+0xa4>
 80203a8:	b902      	cbnz	r2, 80203ac <__udivmoddi4+0xec>
 80203aa:	deff      	udf	#255	; 0xff
 80203ac:	fab2 f282 	clz	r2, r2
 80203b0:	2a00      	cmp	r2, #0
 80203b2:	f040 8092 	bne.w	80204da <__udivmoddi4+0x21a>
 80203b6:	eba1 010c 	sub.w	r1, r1, ip
 80203ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80203be:	fa1f fe8c 	uxth.w	lr, ip
 80203c2:	2601      	movs	r6, #1
 80203c4:	0c20      	lsrs	r0, r4, #16
 80203c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80203ca:	fb07 1113 	mls	r1, r7, r3, r1
 80203ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203d2:	fb0e f003 	mul.w	r0, lr, r3
 80203d6:	4288      	cmp	r0, r1
 80203d8:	d908      	bls.n	80203ec <__udivmoddi4+0x12c>
 80203da:	eb1c 0101 	adds.w	r1, ip, r1
 80203de:	f103 38ff 	add.w	r8, r3, #4294967295
 80203e2:	d202      	bcs.n	80203ea <__udivmoddi4+0x12a>
 80203e4:	4288      	cmp	r0, r1
 80203e6:	f200 80cb 	bhi.w	8020580 <__udivmoddi4+0x2c0>
 80203ea:	4643      	mov	r3, r8
 80203ec:	1a09      	subs	r1, r1, r0
 80203ee:	b2a4      	uxth	r4, r4
 80203f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80203f4:	fb07 1110 	mls	r1, r7, r0, r1
 80203f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80203fc:	fb0e fe00 	mul.w	lr, lr, r0
 8020400:	45a6      	cmp	lr, r4
 8020402:	d908      	bls.n	8020416 <__udivmoddi4+0x156>
 8020404:	eb1c 0404 	adds.w	r4, ip, r4
 8020408:	f100 31ff 	add.w	r1, r0, #4294967295
 802040c:	d202      	bcs.n	8020414 <__udivmoddi4+0x154>
 802040e:	45a6      	cmp	lr, r4
 8020410:	f200 80bb 	bhi.w	802058a <__udivmoddi4+0x2ca>
 8020414:	4608      	mov	r0, r1
 8020416:	eba4 040e 	sub.w	r4, r4, lr
 802041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802041e:	e79c      	b.n	802035a <__udivmoddi4+0x9a>
 8020420:	f1c6 0720 	rsb	r7, r6, #32
 8020424:	40b3      	lsls	r3, r6
 8020426:	fa22 fc07 	lsr.w	ip, r2, r7
 802042a:	ea4c 0c03 	orr.w	ip, ip, r3
 802042e:	fa20 f407 	lsr.w	r4, r0, r7
 8020432:	fa01 f306 	lsl.w	r3, r1, r6
 8020436:	431c      	orrs	r4, r3
 8020438:	40f9      	lsrs	r1, r7
 802043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802043e:	fa00 f306 	lsl.w	r3, r0, r6
 8020442:	fbb1 f8f9 	udiv	r8, r1, r9
 8020446:	0c20      	lsrs	r0, r4, #16
 8020448:	fa1f fe8c 	uxth.w	lr, ip
 802044c:	fb09 1118 	mls	r1, r9, r8, r1
 8020450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020454:	fb08 f00e 	mul.w	r0, r8, lr
 8020458:	4288      	cmp	r0, r1
 802045a:	fa02 f206 	lsl.w	r2, r2, r6
 802045e:	d90b      	bls.n	8020478 <__udivmoddi4+0x1b8>
 8020460:	eb1c 0101 	adds.w	r1, ip, r1
 8020464:	f108 3aff 	add.w	sl, r8, #4294967295
 8020468:	f080 8088 	bcs.w	802057c <__udivmoddi4+0x2bc>
 802046c:	4288      	cmp	r0, r1
 802046e:	f240 8085 	bls.w	802057c <__udivmoddi4+0x2bc>
 8020472:	f1a8 0802 	sub.w	r8, r8, #2
 8020476:	4461      	add	r1, ip
 8020478:	1a09      	subs	r1, r1, r0
 802047a:	b2a4      	uxth	r4, r4
 802047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020480:	fb09 1110 	mls	r1, r9, r0, r1
 8020484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020488:	fb00 fe0e 	mul.w	lr, r0, lr
 802048c:	458e      	cmp	lr, r1
 802048e:	d908      	bls.n	80204a2 <__udivmoddi4+0x1e2>
 8020490:	eb1c 0101 	adds.w	r1, ip, r1
 8020494:	f100 34ff 	add.w	r4, r0, #4294967295
 8020498:	d26c      	bcs.n	8020574 <__udivmoddi4+0x2b4>
 802049a:	458e      	cmp	lr, r1
 802049c:	d96a      	bls.n	8020574 <__udivmoddi4+0x2b4>
 802049e:	3802      	subs	r0, #2
 80204a0:	4461      	add	r1, ip
 80204a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80204a6:	fba0 9402 	umull	r9, r4, r0, r2
 80204aa:	eba1 010e 	sub.w	r1, r1, lr
 80204ae:	42a1      	cmp	r1, r4
 80204b0:	46c8      	mov	r8, r9
 80204b2:	46a6      	mov	lr, r4
 80204b4:	d356      	bcc.n	8020564 <__udivmoddi4+0x2a4>
 80204b6:	d053      	beq.n	8020560 <__udivmoddi4+0x2a0>
 80204b8:	b15d      	cbz	r5, 80204d2 <__udivmoddi4+0x212>
 80204ba:	ebb3 0208 	subs.w	r2, r3, r8
 80204be:	eb61 010e 	sbc.w	r1, r1, lr
 80204c2:	fa01 f707 	lsl.w	r7, r1, r7
 80204c6:	fa22 f306 	lsr.w	r3, r2, r6
 80204ca:	40f1      	lsrs	r1, r6
 80204cc:	431f      	orrs	r7, r3
 80204ce:	e9c5 7100 	strd	r7, r1, [r5]
 80204d2:	2600      	movs	r6, #0
 80204d4:	4631      	mov	r1, r6
 80204d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204da:	f1c2 0320 	rsb	r3, r2, #32
 80204de:	40d8      	lsrs	r0, r3
 80204e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80204e4:	fa21 f303 	lsr.w	r3, r1, r3
 80204e8:	4091      	lsls	r1, r2
 80204ea:	4301      	orrs	r1, r0
 80204ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204f0:	fa1f fe8c 	uxth.w	lr, ip
 80204f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80204f8:	fb07 3610 	mls	r6, r7, r0, r3
 80204fc:	0c0b      	lsrs	r3, r1, #16
 80204fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020502:	fb00 f60e 	mul.w	r6, r0, lr
 8020506:	429e      	cmp	r6, r3
 8020508:	fa04 f402 	lsl.w	r4, r4, r2
 802050c:	d908      	bls.n	8020520 <__udivmoddi4+0x260>
 802050e:	eb1c 0303 	adds.w	r3, ip, r3
 8020512:	f100 38ff 	add.w	r8, r0, #4294967295
 8020516:	d22f      	bcs.n	8020578 <__udivmoddi4+0x2b8>
 8020518:	429e      	cmp	r6, r3
 802051a:	d92d      	bls.n	8020578 <__udivmoddi4+0x2b8>
 802051c:	3802      	subs	r0, #2
 802051e:	4463      	add	r3, ip
 8020520:	1b9b      	subs	r3, r3, r6
 8020522:	b289      	uxth	r1, r1
 8020524:	fbb3 f6f7 	udiv	r6, r3, r7
 8020528:	fb07 3316 	mls	r3, r7, r6, r3
 802052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020530:	fb06 f30e 	mul.w	r3, r6, lr
 8020534:	428b      	cmp	r3, r1
 8020536:	d908      	bls.n	802054a <__udivmoddi4+0x28a>
 8020538:	eb1c 0101 	adds.w	r1, ip, r1
 802053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8020540:	d216      	bcs.n	8020570 <__udivmoddi4+0x2b0>
 8020542:	428b      	cmp	r3, r1
 8020544:	d914      	bls.n	8020570 <__udivmoddi4+0x2b0>
 8020546:	3e02      	subs	r6, #2
 8020548:	4461      	add	r1, ip
 802054a:	1ac9      	subs	r1, r1, r3
 802054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020550:	e738      	b.n	80203c4 <__udivmoddi4+0x104>
 8020552:	462e      	mov	r6, r5
 8020554:	4628      	mov	r0, r5
 8020556:	e705      	b.n	8020364 <__udivmoddi4+0xa4>
 8020558:	4606      	mov	r6, r0
 802055a:	e6e3      	b.n	8020324 <__udivmoddi4+0x64>
 802055c:	4618      	mov	r0, r3
 802055e:	e6f8      	b.n	8020352 <__udivmoddi4+0x92>
 8020560:	454b      	cmp	r3, r9
 8020562:	d2a9      	bcs.n	80204b8 <__udivmoddi4+0x1f8>
 8020564:	ebb9 0802 	subs.w	r8, r9, r2
 8020568:	eb64 0e0c 	sbc.w	lr, r4, ip
 802056c:	3801      	subs	r0, #1
 802056e:	e7a3      	b.n	80204b8 <__udivmoddi4+0x1f8>
 8020570:	4646      	mov	r6, r8
 8020572:	e7ea      	b.n	802054a <__udivmoddi4+0x28a>
 8020574:	4620      	mov	r0, r4
 8020576:	e794      	b.n	80204a2 <__udivmoddi4+0x1e2>
 8020578:	4640      	mov	r0, r8
 802057a:	e7d1      	b.n	8020520 <__udivmoddi4+0x260>
 802057c:	46d0      	mov	r8, sl
 802057e:	e77b      	b.n	8020478 <__udivmoddi4+0x1b8>
 8020580:	3b02      	subs	r3, #2
 8020582:	4461      	add	r1, ip
 8020584:	e732      	b.n	80203ec <__udivmoddi4+0x12c>
 8020586:	4630      	mov	r0, r6
 8020588:	e709      	b.n	802039e <__udivmoddi4+0xde>
 802058a:	4464      	add	r4, ip
 802058c:	3802      	subs	r0, #2
 802058e:	e742      	b.n	8020416 <__udivmoddi4+0x156>

08020590 <__aeabi_idiv0>:
 8020590:	4770      	bx	lr
 8020592:	bf00      	nop

08020594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020594:	b580      	push	{r7, lr}
 8020596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020598:	f002 fbf8 	bl	8022d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802059c:	f000 f88e 	bl	80206bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80205a0:	f000 fb28 	bl	8020bf4 <MX_GPIO_Init>
  MX_CRC_Init();
 80205a4:	f000 f8f6 	bl	8020794 <MX_CRC_Init>
  MX_DMA2D_Init();
 80205a8:	f000 f908 	bl	80207bc <MX_DMA2D_Init>
  MX_FMC_Init();
 80205ac:	f000 fad2 	bl	8020b54 <MX_FMC_Init>
  MX_I2C3_Init();
 80205b0:	f000 f936 	bl	8020820 <MX_I2C3_Init>
  MX_LTDC_Init();
 80205b4:	f000 f974 	bl	80208a0 <MX_LTDC_Init>
  MX_SPI5_Init();
 80205b8:	f000 f9f2 	bl	80209a0 <MX_SPI5_Init>
  MX_TIM1_Init();
 80205bc:	f000 fa26 	bl	8020a0c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80205c0:	f000 fa9e 	bl	8020b00 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80205c4:	f00b fd90 	bl	802c0e8 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80205c8:	f000 fa70 	bl	8020aac <MX_UART5_Init>
  /* USER CODE BEGIN 2 */


  sprintf(buffch,"Starting Application (%d.%d)", BL_Version[0], BL_Version[1]);
 80205cc:	2300      	movs	r3, #0
 80205ce:	461a      	mov	r2, r3
 80205d0:	2302      	movs	r3, #2
 80205d2:	4932      	ldr	r1, [pc, #200]	; (802069c <main+0x108>)
 80205d4:	4832      	ldr	r0, [pc, #200]	; (80206a0 <main+0x10c>)
 80205d6:	f00c f9df 	bl	802c998 <siprintf>
  printf("Starting Application (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80205da:	2300      	movs	r3, #0
 80205dc:	2202      	movs	r2, #2
 80205de:	4619      	mov	r1, r3
 80205e0:	4830      	ldr	r0, [pc, #192]	; (80206a4 <main+0x110>)
 80205e2:	f00c f9b1 	bl	802c948 <iprintf>


  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 80205e6:	f001 fd4b 	bl	8022080 <BSP_LCD_Init>

  /* Layer2 Init */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80205ea:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80205ee:	2001      	movs	r0, #1
 80205f0:	f001 fdc8 	bl	8022184 <BSP_LCD_LayerDefaultInit>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80205f4:	2001      	movs	r0, #1
 80205f6:	f001 fe29 	bl	802224c <BSP_LCD_SelectLayer>
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80205fa:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80205fe:	f001 fed3 	bl	80223a8 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_BLACK);
 8020602:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8020606:	2001      	movs	r0, #1
 8020608:	f001 fe6e 	bl	80222e8 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 802060c:	2100      	movs	r1, #0
 802060e:	2001      	movs	r0, #1
 8020610:	f001 fe2c 	bl	802226c <BSP_LCD_SetLayerVisible>

  /* Layer1 Init */
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8020614:	4924      	ldr	r1, [pc, #144]	; (80206a8 <main+0x114>)
 8020616:	2000      	movs	r0, #0
 8020618:	f001 fdb4 	bl	8022184 <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 802061c:	2000      	movs	r0, #0
 802061e:	f001 fe15 	bl	802224c <BSP_LCD_SelectLayer>

  /* Enable The LCD */
  BSP_LCD_DisplayOn();
 8020622:	f001 ffeb 	bl	80225fc <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020626:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 802062a:	f001 febd 	bl	80223a8 <BSP_LCD_Clear>


  /* Set Touchscreen Demo description */

  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 802062e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020632:	f001 fe85 	bl	8022340 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8020636:	481d      	ldr	r0, [pc, #116]	; (80206ac <main+0x118>)
 8020638:	f001 fe6a 	bl	8022310 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 802063c:	481c      	ldr	r0, [pc, #112]	; (80206b0 <main+0x11c>)
 802063e:	f001 fe99 	bl	8022374 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)buffch, CENTER_MODE);
 8020642:	2301      	movs	r3, #1
 8020644:	4a16      	ldr	r2, [pc, #88]	; (80206a0 <main+0x10c>)
 8020646:	2100      	movs	r1, #0
 8020648:	2000      	movs	r0, #0
 802064a:	f001 ff19 	bl	8022480 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 802064e:	f04f 30ff 	mov.w	r0, #4294967295
 8020652:	f001 fe5d 	bl	8022310 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"APPLICATION", CENTER_MODE);
 8020656:	f001 fd89 	bl	802216c <BSP_LCD_GetYSize>
 802065a:	4603      	mov	r3, r0
 802065c:	085b      	lsrs	r3, r3, #1
 802065e:	b29b      	uxth	r3, r3
 8020660:	3b0c      	subs	r3, #12
 8020662:	b299      	uxth	r1, r3
 8020664:	2301      	movs	r3, #1
 8020666:	4a13      	ldr	r2, [pc, #76]	; (80206b4 <main+0x120>)
 8020668:	2000      	movs	r0, #0
 802066a:	f001 ff09 	bl	8022480 <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 802066e:	f00b fd61 	bl	802c134 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8020672:	2201      	movs	r2, #1
 8020674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020678:	480f      	ldr	r0, [pc, #60]	; (80206b8 <main+0x124>)
 802067a:	f003 fcfd 	bl	8024078 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 802067e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8020682:	f002 fbc5 	bl	8022e10 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8020686:	2200      	movs	r2, #0
 8020688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802068c:	480a      	ldr	r0, [pc, #40]	; (80206b8 <main+0x124>)
 802068e:	f003 fcf3 	bl	8024078 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8020692:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8020696:	f002 fbbb 	bl	8022e10 <HAL_Delay>
    MX_USB_HOST_Process();
 802069a:	e7e8      	b.n	802066e <main+0xda>
 802069c:	0802da74 	.word	0x0802da74
 80206a0:	2000039c 	.word	0x2000039c
 80206a4:	0802da94 	.word	0x0802da94
 80206a8:	d0130000 	.word	0xd0130000
 80206ac:	ffff0000 	.word	0xffff0000
 80206b0:	20000048 	.word	0x20000048
 80206b4:	0802dab4 	.word	0x0802dab4
 80206b8:	40021800 	.word	0x40021800

080206bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80206bc:	b580      	push	{r7, lr}
 80206be:	b094      	sub	sp, #80	; 0x50
 80206c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80206c2:	f107 0320 	add.w	r3, r7, #32
 80206c6:	2230      	movs	r2, #48	; 0x30
 80206c8:	2100      	movs	r1, #0
 80206ca:	4618      	mov	r0, r3
 80206cc:	f00c f854 	bl	802c778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80206d0:	f107 030c 	add.w	r3, r7, #12
 80206d4:	2200      	movs	r2, #0
 80206d6:	601a      	str	r2, [r3, #0]
 80206d8:	605a      	str	r2, [r3, #4]
 80206da:	609a      	str	r2, [r3, #8]
 80206dc:	60da      	str	r2, [r3, #12]
 80206de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80206e0:	2300      	movs	r3, #0
 80206e2:	60bb      	str	r3, [r7, #8]
 80206e4:	4b29      	ldr	r3, [pc, #164]	; (802078c <SystemClock_Config+0xd0>)
 80206e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80206e8:	4a28      	ldr	r2, [pc, #160]	; (802078c <SystemClock_Config+0xd0>)
 80206ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80206ee:	6413      	str	r3, [r2, #64]	; 0x40
 80206f0:	4b26      	ldr	r3, [pc, #152]	; (802078c <SystemClock_Config+0xd0>)
 80206f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80206f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80206f8:	60bb      	str	r3, [r7, #8]
 80206fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80206fc:	2300      	movs	r3, #0
 80206fe:	607b      	str	r3, [r7, #4]
 8020700:	4b23      	ldr	r3, [pc, #140]	; (8020790 <SystemClock_Config+0xd4>)
 8020702:	681b      	ldr	r3, [r3, #0]
 8020704:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8020708:	4a21      	ldr	r2, [pc, #132]	; (8020790 <SystemClock_Config+0xd4>)
 802070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802070e:	6013      	str	r3, [r2, #0]
 8020710:	4b1f      	ldr	r3, [pc, #124]	; (8020790 <SystemClock_Config+0xd4>)
 8020712:	681b      	ldr	r3, [r3, #0]
 8020714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8020718:	607b      	str	r3, [r7, #4]
 802071a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 802071c:	2301      	movs	r3, #1
 802071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8020720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020724:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020726:	2302      	movs	r3, #2
 8020728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 802072a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8020730:	2310      	movs	r3, #16
 8020732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8020734:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8020738:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802073a:	2302      	movs	r3, #2
 802073c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 802073e:	2307      	movs	r3, #7
 8020740:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020742:	f107 0320 	add.w	r3, r7, #32
 8020746:	4618      	mov	r0, r3
 8020748:	f005 fea2 	bl	8026490 <HAL_RCC_OscConfig>
 802074c:	4603      	mov	r3, r0
 802074e:	2b00      	cmp	r3, #0
 8020750:	d001      	beq.n	8020756 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8020752:	f000 fb97 	bl	8020e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020756:	230f      	movs	r3, #15
 8020758:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802075a:	2302      	movs	r3, #2
 802075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802075e:	2300      	movs	r3, #0
 8020760:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8020762:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020766:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8020768:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 802076c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 802076e:	f107 030c 	add.w	r3, r7, #12
 8020772:	2102      	movs	r1, #2
 8020774:	4618      	mov	r0, r3
 8020776:	f006 f903 	bl	8026980 <HAL_RCC_ClockConfig>
 802077a:	4603      	mov	r3, r0
 802077c:	2b00      	cmp	r3, #0
 802077e:	d001      	beq.n	8020784 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8020780:	f000 fb80 	bl	8020e84 <Error_Handler>
  }
}
 8020784:	bf00      	nop
 8020786:	3750      	adds	r7, #80	; 0x50
 8020788:	46bd      	mov	sp, r7
 802078a:	bd80      	pop	{r7, pc}
 802078c:	40023800 	.word	0x40023800
 8020790:	40007000 	.word	0x40007000

08020794 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8020794:	b580      	push	{r7, lr}
 8020796:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8020798:	4b06      	ldr	r3, [pc, #24]	; (80207b4 <MX_CRC_Init+0x20>)
 802079a:	4a07      	ldr	r2, [pc, #28]	; (80207b8 <MX_CRC_Init+0x24>)
 802079c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 802079e:	4805      	ldr	r0, [pc, #20]	; (80207b4 <MX_CRC_Init+0x20>)
 80207a0:	f002 fc3c 	bl	802301c <HAL_CRC_Init>
 80207a4:	4603      	mov	r3, r0
 80207a6:	2b00      	cmp	r3, #0
 80207a8:	d001      	beq.n	80207ae <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80207aa:	f000 fb6b 	bl	8020e84 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80207ae:	bf00      	nop
 80207b0:	bd80      	pop	{r7, pc}
 80207b2:	bf00      	nop
 80207b4:	200000fc 	.word	0x200000fc
 80207b8:	40023000 	.word	0x40023000

080207bc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80207bc:	b580      	push	{r7, lr}
 80207be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80207c0:	4b15      	ldr	r3, [pc, #84]	; (8020818 <MX_DMA2D_Init+0x5c>)
 80207c2:	4a16      	ldr	r2, [pc, #88]	; (802081c <MX_DMA2D_Init+0x60>)
 80207c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80207c6:	4b14      	ldr	r3, [pc, #80]	; (8020818 <MX_DMA2D_Init+0x5c>)
 80207c8:	2200      	movs	r2, #0
 80207ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80207cc:	4b12      	ldr	r3, [pc, #72]	; (8020818 <MX_DMA2D_Init+0x5c>)
 80207ce:	2200      	movs	r2, #0
 80207d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80207d2:	4b11      	ldr	r3, [pc, #68]	; (8020818 <MX_DMA2D_Init+0x5c>)
 80207d4:	2200      	movs	r2, #0
 80207d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80207d8:	4b0f      	ldr	r3, [pc, #60]	; (8020818 <MX_DMA2D_Init+0x5c>)
 80207da:	2200      	movs	r2, #0
 80207dc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80207de:	4b0e      	ldr	r3, [pc, #56]	; (8020818 <MX_DMA2D_Init+0x5c>)
 80207e0:	2200      	movs	r2, #0
 80207e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80207e4:	4b0c      	ldr	r3, [pc, #48]	; (8020818 <MX_DMA2D_Init+0x5c>)
 80207e6:	2200      	movs	r2, #0
 80207e8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80207ea:	4b0b      	ldr	r3, [pc, #44]	; (8020818 <MX_DMA2D_Init+0x5c>)
 80207ec:	2200      	movs	r2, #0
 80207ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80207f0:	4809      	ldr	r0, [pc, #36]	; (8020818 <MX_DMA2D_Init+0x5c>)
 80207f2:	f002 fded 	bl	80233d0 <HAL_DMA2D_Init>
 80207f6:	4603      	mov	r3, r0
 80207f8:	2b00      	cmp	r3, #0
 80207fa:	d001      	beq.n	8020800 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80207fc:	f000 fb42 	bl	8020e84 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8020800:	2101      	movs	r1, #1
 8020802:	4805      	ldr	r0, [pc, #20]	; (8020818 <MX_DMA2D_Init+0x5c>)
 8020804:	f003 f852 	bl	80238ac <HAL_DMA2D_ConfigLayer>
 8020808:	4603      	mov	r3, r0
 802080a:	2b00      	cmp	r3, #0
 802080c:	d001      	beq.n	8020812 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 802080e:	f000 fb39 	bl	8020e84 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8020812:	bf00      	nop
 8020814:	bd80      	pop	{r7, pc}
 8020816:	bf00      	nop
 8020818:	20000104 	.word	0x20000104
 802081c:	4002b000 	.word	0x4002b000

08020820 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8020820:	b580      	push	{r7, lr}
 8020822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8020824:	4b1b      	ldr	r3, [pc, #108]	; (8020894 <MX_I2C3_Init+0x74>)
 8020826:	4a1c      	ldr	r2, [pc, #112]	; (8020898 <MX_I2C3_Init+0x78>)
 8020828:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 802082a:	4b1a      	ldr	r3, [pc, #104]	; (8020894 <MX_I2C3_Init+0x74>)
 802082c:	4a1b      	ldr	r2, [pc, #108]	; (802089c <MX_I2C3_Init+0x7c>)
 802082e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8020830:	4b18      	ldr	r3, [pc, #96]	; (8020894 <MX_I2C3_Init+0x74>)
 8020832:	2200      	movs	r2, #0
 8020834:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8020836:	4b17      	ldr	r3, [pc, #92]	; (8020894 <MX_I2C3_Init+0x74>)
 8020838:	2200      	movs	r2, #0
 802083a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 802083c:	4b15      	ldr	r3, [pc, #84]	; (8020894 <MX_I2C3_Init+0x74>)
 802083e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8020842:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020844:	4b13      	ldr	r3, [pc, #76]	; (8020894 <MX_I2C3_Init+0x74>)
 8020846:	2200      	movs	r2, #0
 8020848:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 802084a:	4b12      	ldr	r3, [pc, #72]	; (8020894 <MX_I2C3_Init+0x74>)
 802084c:	2200      	movs	r2, #0
 802084e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8020850:	4b10      	ldr	r3, [pc, #64]	; (8020894 <MX_I2C3_Init+0x74>)
 8020852:	2200      	movs	r2, #0
 8020854:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8020856:	4b0f      	ldr	r3, [pc, #60]	; (8020894 <MX_I2C3_Init+0x74>)
 8020858:	2200      	movs	r2, #0
 802085a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 802085c:	480d      	ldr	r0, [pc, #52]	; (8020894 <MX_I2C3_Init+0x74>)
 802085e:	f005 f847 	bl	80258f0 <HAL_I2C_Init>
 8020862:	4603      	mov	r3, r0
 8020864:	2b00      	cmp	r3, #0
 8020866:	d001      	beq.n	802086c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8020868:	f000 fb0c 	bl	8020e84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 802086c:	2100      	movs	r1, #0
 802086e:	4809      	ldr	r0, [pc, #36]	; (8020894 <MX_I2C3_Init+0x74>)
 8020870:	f005 f982 	bl	8025b78 <HAL_I2CEx_ConfigAnalogFilter>
 8020874:	4603      	mov	r3, r0
 8020876:	2b00      	cmp	r3, #0
 8020878:	d001      	beq.n	802087e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 802087a:	f000 fb03 	bl	8020e84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 802087e:	2100      	movs	r1, #0
 8020880:	4804      	ldr	r0, [pc, #16]	; (8020894 <MX_I2C3_Init+0x74>)
 8020882:	f005 f9b5 	bl	8025bf0 <HAL_I2CEx_ConfigDigitalFilter>
 8020886:	4603      	mov	r3, r0
 8020888:	2b00      	cmp	r3, #0
 802088a:	d001      	beq.n	8020890 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 802088c:	f000 fafa 	bl	8020e84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8020890:	bf00      	nop
 8020892:	bd80      	pop	{r7, pc}
 8020894:	20000144 	.word	0x20000144
 8020898:	40005c00 	.word	0x40005c00
 802089c:	000186a0 	.word	0x000186a0

080208a0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80208a0:	b580      	push	{r7, lr}
 80208a2:	b08e      	sub	sp, #56	; 0x38
 80208a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80208a6:	1d3b      	adds	r3, r7, #4
 80208a8:	2234      	movs	r2, #52	; 0x34
 80208aa:	2100      	movs	r1, #0
 80208ac:	4618      	mov	r0, r3
 80208ae:	f00b ff63 	bl	802c778 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80208b2:	4b39      	ldr	r3, [pc, #228]	; (8020998 <MX_LTDC_Init+0xf8>)
 80208b4:	4a39      	ldr	r2, [pc, #228]	; (802099c <MX_LTDC_Init+0xfc>)
 80208b6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80208b8:	4b37      	ldr	r3, [pc, #220]	; (8020998 <MX_LTDC_Init+0xf8>)
 80208ba:	2200      	movs	r2, #0
 80208bc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80208be:	4b36      	ldr	r3, [pc, #216]	; (8020998 <MX_LTDC_Init+0xf8>)
 80208c0:	2200      	movs	r2, #0
 80208c2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80208c4:	4b34      	ldr	r3, [pc, #208]	; (8020998 <MX_LTDC_Init+0xf8>)
 80208c6:	2200      	movs	r2, #0
 80208c8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80208ca:	4b33      	ldr	r3, [pc, #204]	; (8020998 <MX_LTDC_Init+0xf8>)
 80208cc:	2200      	movs	r2, #0
 80208ce:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80208d0:	4b31      	ldr	r3, [pc, #196]	; (8020998 <MX_LTDC_Init+0xf8>)
 80208d2:	2209      	movs	r2, #9
 80208d4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80208d6:	4b30      	ldr	r3, [pc, #192]	; (8020998 <MX_LTDC_Init+0xf8>)
 80208d8:	2201      	movs	r2, #1
 80208da:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80208dc:	4b2e      	ldr	r3, [pc, #184]	; (8020998 <MX_LTDC_Init+0xf8>)
 80208de:	221d      	movs	r2, #29
 80208e0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80208e2:	4b2d      	ldr	r3, [pc, #180]	; (8020998 <MX_LTDC_Init+0xf8>)
 80208e4:	2203      	movs	r2, #3
 80208e6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80208e8:	4b2b      	ldr	r3, [pc, #172]	; (8020998 <MX_LTDC_Init+0xf8>)
 80208ea:	f240 120d 	movw	r2, #269	; 0x10d
 80208ee:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80208f0:	4b29      	ldr	r3, [pc, #164]	; (8020998 <MX_LTDC_Init+0xf8>)
 80208f2:	f240 1243 	movw	r2, #323	; 0x143
 80208f6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80208f8:	4b27      	ldr	r3, [pc, #156]	; (8020998 <MX_LTDC_Init+0xf8>)
 80208fa:	f240 1217 	movw	r2, #279	; 0x117
 80208fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8020900:	4b25      	ldr	r3, [pc, #148]	; (8020998 <MX_LTDC_Init+0xf8>)
 8020902:	f240 1247 	movw	r2, #327	; 0x147
 8020906:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8020908:	4b23      	ldr	r3, [pc, #140]	; (8020998 <MX_LTDC_Init+0xf8>)
 802090a:	2200      	movs	r2, #0
 802090c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8020910:	4b21      	ldr	r3, [pc, #132]	; (8020998 <MX_LTDC_Init+0xf8>)
 8020912:	2200      	movs	r2, #0
 8020914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8020918:	4b1f      	ldr	r3, [pc, #124]	; (8020998 <MX_LTDC_Init+0xf8>)
 802091a:	2200      	movs	r2, #0
 802091c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8020920:	481d      	ldr	r0, [pc, #116]	; (8020998 <MX_LTDC_Init+0xf8>)
 8020922:	f005 f9a5 	bl	8025c70 <HAL_LTDC_Init>
 8020926:	4603      	mov	r3, r0
 8020928:	2b00      	cmp	r3, #0
 802092a:	d001      	beq.n	8020930 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 802092c:	f000 faaa 	bl	8020e84 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8020930:	2300      	movs	r3, #0
 8020932:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8020934:	23f0      	movs	r3, #240	; 0xf0
 8020936:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8020938:	2300      	movs	r3, #0
 802093a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 802093c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8020940:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8020942:	2302      	movs	r3, #2
 8020944:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8020946:	23ff      	movs	r3, #255	; 0xff
 8020948:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 802094a:	2300      	movs	r3, #0
 802094c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 802094e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8020952:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8020954:	2307      	movs	r3, #7
 8020956:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8020958:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 802095c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 802095e:	23f0      	movs	r3, #240	; 0xf0
 8020960:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8020962:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8020966:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8020968:	2300      	movs	r3, #0
 802096a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 802096e:	2300      	movs	r3, #0
 8020970:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8020974:	2300      	movs	r3, #0
 8020976:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 802097a:	1d3b      	adds	r3, r7, #4
 802097c:	2200      	movs	r2, #0
 802097e:	4619      	mov	r1, r3
 8020980:	4805      	ldr	r0, [pc, #20]	; (8020998 <MX_LTDC_Init+0xf8>)
 8020982:	f005 fb07 	bl	8025f94 <HAL_LTDC_ConfigLayer>
 8020986:	4603      	mov	r3, r0
 8020988:	2b00      	cmp	r3, #0
 802098a:	d001      	beq.n	8020990 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 802098c:	f000 fa7a 	bl	8020e84 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8020990:	bf00      	nop
 8020992:	3738      	adds	r7, #56	; 0x38
 8020994:	46bd      	mov	sp, r7
 8020996:	bd80      	pop	{r7, pc}
 8020998:	20000198 	.word	0x20000198
 802099c:	40016800 	.word	0x40016800

080209a0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80209a0:	b580      	push	{r7, lr}
 80209a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80209a4:	4b17      	ldr	r3, [pc, #92]	; (8020a04 <MX_SPI5_Init+0x64>)
 80209a6:	4a18      	ldr	r2, [pc, #96]	; (8020a08 <MX_SPI5_Init+0x68>)
 80209a8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80209aa:	4b16      	ldr	r3, [pc, #88]	; (8020a04 <MX_SPI5_Init+0x64>)
 80209ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80209b0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80209b2:	4b14      	ldr	r3, [pc, #80]	; (8020a04 <MX_SPI5_Init+0x64>)
 80209b4:	2200      	movs	r2, #0
 80209b6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80209b8:	4b12      	ldr	r3, [pc, #72]	; (8020a04 <MX_SPI5_Init+0x64>)
 80209ba:	2200      	movs	r2, #0
 80209bc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80209be:	4b11      	ldr	r3, [pc, #68]	; (8020a04 <MX_SPI5_Init+0x64>)
 80209c0:	2200      	movs	r2, #0
 80209c2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80209c4:	4b0f      	ldr	r3, [pc, #60]	; (8020a04 <MX_SPI5_Init+0x64>)
 80209c6:	2200      	movs	r2, #0
 80209c8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80209ca:	4b0e      	ldr	r3, [pc, #56]	; (8020a04 <MX_SPI5_Init+0x64>)
 80209cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80209d0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80209d2:	4b0c      	ldr	r3, [pc, #48]	; (8020a04 <MX_SPI5_Init+0x64>)
 80209d4:	2218      	movs	r2, #24
 80209d6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80209d8:	4b0a      	ldr	r3, [pc, #40]	; (8020a04 <MX_SPI5_Init+0x64>)
 80209da:	2200      	movs	r2, #0
 80209dc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80209de:	4b09      	ldr	r3, [pc, #36]	; (8020a04 <MX_SPI5_Init+0x64>)
 80209e0:	2200      	movs	r2, #0
 80209e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80209e4:	4b07      	ldr	r3, [pc, #28]	; (8020a04 <MX_SPI5_Init+0x64>)
 80209e6:	2200      	movs	r2, #0
 80209e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80209ea:	4b06      	ldr	r3, [pc, #24]	; (8020a04 <MX_SPI5_Init+0x64>)
 80209ec:	220a      	movs	r2, #10
 80209ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80209f0:	4804      	ldr	r0, [pc, #16]	; (8020a04 <MX_SPI5_Init+0x64>)
 80209f2:	f006 fc68 	bl	80272c6 <HAL_SPI_Init>
 80209f6:	4603      	mov	r3, r0
 80209f8:	2b00      	cmp	r3, #0
 80209fa:	d001      	beq.n	8020a00 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80209fc:	f000 fa42 	bl	8020e84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8020a00:	bf00      	nop
 8020a02:	bd80      	pop	{r7, pc}
 8020a04:	20000240 	.word	0x20000240
 8020a08:	40015000 	.word	0x40015000

08020a0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8020a0c:	b580      	push	{r7, lr}
 8020a0e:	b086      	sub	sp, #24
 8020a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8020a12:	f107 0308 	add.w	r3, r7, #8
 8020a16:	2200      	movs	r2, #0
 8020a18:	601a      	str	r2, [r3, #0]
 8020a1a:	605a      	str	r2, [r3, #4]
 8020a1c:	609a      	str	r2, [r3, #8]
 8020a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020a20:	463b      	mov	r3, r7
 8020a22:	2200      	movs	r2, #0
 8020a24:	601a      	str	r2, [r3, #0]
 8020a26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8020a28:	4b1e      	ldr	r3, [pc, #120]	; (8020aa4 <MX_TIM1_Init+0x98>)
 8020a2a:	4a1f      	ldr	r2, [pc, #124]	; (8020aa8 <MX_TIM1_Init+0x9c>)
 8020a2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8020a2e:	4b1d      	ldr	r3, [pc, #116]	; (8020aa4 <MX_TIM1_Init+0x98>)
 8020a30:	2200      	movs	r2, #0
 8020a32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020a34:	4b1b      	ldr	r3, [pc, #108]	; (8020aa4 <MX_TIM1_Init+0x98>)
 8020a36:	2200      	movs	r2, #0
 8020a38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8020a3a:	4b1a      	ldr	r3, [pc, #104]	; (8020aa4 <MX_TIM1_Init+0x98>)
 8020a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020a40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020a42:	4b18      	ldr	r3, [pc, #96]	; (8020aa4 <MX_TIM1_Init+0x98>)
 8020a44:	2200      	movs	r2, #0
 8020a46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8020a48:	4b16      	ldr	r3, [pc, #88]	; (8020aa4 <MX_TIM1_Init+0x98>)
 8020a4a:	2200      	movs	r2, #0
 8020a4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020a4e:	4b15      	ldr	r3, [pc, #84]	; (8020aa4 <MX_TIM1_Init+0x98>)
 8020a50:	2200      	movs	r2, #0
 8020a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8020a54:	4813      	ldr	r0, [pc, #76]	; (8020aa4 <MX_TIM1_Init+0x98>)
 8020a56:	f007 fa15 	bl	8027e84 <HAL_TIM_Base_Init>
 8020a5a:	4603      	mov	r3, r0
 8020a5c:	2b00      	cmp	r3, #0
 8020a5e:	d001      	beq.n	8020a64 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8020a60:	f000 fa10 	bl	8020e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8020a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020a68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8020a6a:	f107 0308 	add.w	r3, r7, #8
 8020a6e:	4619      	mov	r1, r3
 8020a70:	480c      	ldr	r0, [pc, #48]	; (8020aa4 <MX_TIM1_Init+0x98>)
 8020a72:	f007 fbcf 	bl	8028214 <HAL_TIM_ConfigClockSource>
 8020a76:	4603      	mov	r3, r0
 8020a78:	2b00      	cmp	r3, #0
 8020a7a:	d001      	beq.n	8020a80 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8020a7c:	f000 fa02 	bl	8020e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020a80:	2300      	movs	r3, #0
 8020a82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020a84:	2300      	movs	r3, #0
 8020a86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8020a88:	463b      	mov	r3, r7
 8020a8a:	4619      	mov	r1, r3
 8020a8c:	4805      	ldr	r0, [pc, #20]	; (8020aa4 <MX_TIM1_Init+0x98>)
 8020a8e:	f007 fdeb 	bl	8028668 <HAL_TIMEx_MasterConfigSynchronization>
 8020a92:	4603      	mov	r3, r0
 8020a94:	2b00      	cmp	r3, #0
 8020a96:	d001      	beq.n	8020a9c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8020a98:	f000 f9f4 	bl	8020e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8020a9c:	bf00      	nop
 8020a9e:	3718      	adds	r7, #24
 8020aa0:	46bd      	mov	sp, r7
 8020aa2:	bd80      	pop	{r7, pc}
 8020aa4:	20000298 	.word	0x20000298
 8020aa8:	40010000 	.word	0x40010000

08020aac <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8020aac:	b580      	push	{r7, lr}
 8020aae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8020ab0:	4b11      	ldr	r3, [pc, #68]	; (8020af8 <MX_UART5_Init+0x4c>)
 8020ab2:	4a12      	ldr	r2, [pc, #72]	; (8020afc <MX_UART5_Init+0x50>)
 8020ab4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8020ab6:	4b10      	ldr	r3, [pc, #64]	; (8020af8 <MX_UART5_Init+0x4c>)
 8020ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020abc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8020abe:	4b0e      	ldr	r3, [pc, #56]	; (8020af8 <MX_UART5_Init+0x4c>)
 8020ac0:	2200      	movs	r2, #0
 8020ac2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8020ac4:	4b0c      	ldr	r3, [pc, #48]	; (8020af8 <MX_UART5_Init+0x4c>)
 8020ac6:	2200      	movs	r2, #0
 8020ac8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8020aca:	4b0b      	ldr	r3, [pc, #44]	; (8020af8 <MX_UART5_Init+0x4c>)
 8020acc:	2200      	movs	r2, #0
 8020ace:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8020ad0:	4b09      	ldr	r3, [pc, #36]	; (8020af8 <MX_UART5_Init+0x4c>)
 8020ad2:	220c      	movs	r2, #12
 8020ad4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020ad6:	4b08      	ldr	r3, [pc, #32]	; (8020af8 <MX_UART5_Init+0x4c>)
 8020ad8:	2200      	movs	r2, #0
 8020ada:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8020adc:	4b06      	ldr	r3, [pc, #24]	; (8020af8 <MX_UART5_Init+0x4c>)
 8020ade:	2200      	movs	r2, #0
 8020ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8020ae2:	4805      	ldr	r0, [pc, #20]	; (8020af8 <MX_UART5_Init+0x4c>)
 8020ae4:	f007 fe50 	bl	8028788 <HAL_UART_Init>
 8020ae8:	4603      	mov	r3, r0
 8020aea:	2b00      	cmp	r3, #0
 8020aec:	d001      	beq.n	8020af2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8020aee:	f000 f9c9 	bl	8020e84 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8020af2:	bf00      	nop
 8020af4:	bd80      	pop	{r7, pc}
 8020af6:	bf00      	nop
 8020af8:	200002e0 	.word	0x200002e0
 8020afc:	40005000 	.word	0x40005000

08020b00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8020b00:	b580      	push	{r7, lr}
 8020b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8020b04:	4b11      	ldr	r3, [pc, #68]	; (8020b4c <MX_USART1_UART_Init+0x4c>)
 8020b06:	4a12      	ldr	r2, [pc, #72]	; (8020b50 <MX_USART1_UART_Init+0x50>)
 8020b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8020b0a:	4b10      	ldr	r3, [pc, #64]	; (8020b4c <MX_USART1_UART_Init+0x4c>)
 8020b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020b12:	4b0e      	ldr	r3, [pc, #56]	; (8020b4c <MX_USART1_UART_Init+0x4c>)
 8020b14:	2200      	movs	r2, #0
 8020b16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8020b18:	4b0c      	ldr	r3, [pc, #48]	; (8020b4c <MX_USART1_UART_Init+0x4c>)
 8020b1a:	2200      	movs	r2, #0
 8020b1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8020b1e:	4b0b      	ldr	r3, [pc, #44]	; (8020b4c <MX_USART1_UART_Init+0x4c>)
 8020b20:	2200      	movs	r2, #0
 8020b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8020b24:	4b09      	ldr	r3, [pc, #36]	; (8020b4c <MX_USART1_UART_Init+0x4c>)
 8020b26:	220c      	movs	r2, #12
 8020b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020b2a:	4b08      	ldr	r3, [pc, #32]	; (8020b4c <MX_USART1_UART_Init+0x4c>)
 8020b2c:	2200      	movs	r2, #0
 8020b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8020b30:	4b06      	ldr	r3, [pc, #24]	; (8020b4c <MX_USART1_UART_Init+0x4c>)
 8020b32:	2200      	movs	r2, #0
 8020b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8020b36:	4805      	ldr	r0, [pc, #20]	; (8020b4c <MX_USART1_UART_Init+0x4c>)
 8020b38:	f007 fe26 	bl	8028788 <HAL_UART_Init>
 8020b3c:	4603      	mov	r3, r0
 8020b3e:	2b00      	cmp	r3, #0
 8020b40:	d001      	beq.n	8020b46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8020b42:	f000 f99f 	bl	8020e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8020b46:	bf00      	nop
 8020b48:	bd80      	pop	{r7, pc}
 8020b4a:	bf00      	nop
 8020b4c:	20000324 	.word	0x20000324
 8020b50:	40011000 	.word	0x40011000

08020b54 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8020b54:	b580      	push	{r7, lr}
 8020b56:	b088      	sub	sp, #32
 8020b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8020b5a:	1d3b      	adds	r3, r7, #4
 8020b5c:	2200      	movs	r2, #0
 8020b5e:	601a      	str	r2, [r3, #0]
 8020b60:	605a      	str	r2, [r3, #4]
 8020b62:	609a      	str	r2, [r3, #8]
 8020b64:	60da      	str	r2, [r3, #12]
 8020b66:	611a      	str	r2, [r3, #16]
 8020b68:	615a      	str	r2, [r3, #20]
 8020b6a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8020b6c:	4b1f      	ldr	r3, [pc, #124]	; (8020bec <MX_FMC_Init+0x98>)
 8020b6e:	4a20      	ldr	r2, [pc, #128]	; (8020bf0 <MX_FMC_Init+0x9c>)
 8020b70:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8020b72:	4b1e      	ldr	r3, [pc, #120]	; (8020bec <MX_FMC_Init+0x98>)
 8020b74:	2201      	movs	r2, #1
 8020b76:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8020b78:	4b1c      	ldr	r3, [pc, #112]	; (8020bec <MX_FMC_Init+0x98>)
 8020b7a:	2200      	movs	r2, #0
 8020b7c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8020b7e:	4b1b      	ldr	r3, [pc, #108]	; (8020bec <MX_FMC_Init+0x98>)
 8020b80:	2204      	movs	r2, #4
 8020b82:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8020b84:	4b19      	ldr	r3, [pc, #100]	; (8020bec <MX_FMC_Init+0x98>)
 8020b86:	2210      	movs	r2, #16
 8020b88:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8020b8a:	4b18      	ldr	r3, [pc, #96]	; (8020bec <MX_FMC_Init+0x98>)
 8020b8c:	2240      	movs	r2, #64	; 0x40
 8020b8e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8020b90:	4b16      	ldr	r3, [pc, #88]	; (8020bec <MX_FMC_Init+0x98>)
 8020b92:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8020b96:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8020b98:	4b14      	ldr	r3, [pc, #80]	; (8020bec <MX_FMC_Init+0x98>)
 8020b9a:	2200      	movs	r2, #0
 8020b9c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8020b9e:	4b13      	ldr	r3, [pc, #76]	; (8020bec <MX_FMC_Init+0x98>)
 8020ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020ba4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8020ba6:	4b11      	ldr	r3, [pc, #68]	; (8020bec <MX_FMC_Init+0x98>)
 8020ba8:	2200      	movs	r2, #0
 8020baa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8020bac:	4b0f      	ldr	r3, [pc, #60]	; (8020bec <MX_FMC_Init+0x98>)
 8020bae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8020bb2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8020bb4:	2302      	movs	r3, #2
 8020bb6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8020bb8:	2307      	movs	r3, #7
 8020bba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8020bbc:	2304      	movs	r3, #4
 8020bbe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8020bc0:	2307      	movs	r3, #7
 8020bc2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8020bc4:	2303      	movs	r3, #3
 8020bc6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8020bc8:	2302      	movs	r3, #2
 8020bca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8020bcc:	2302      	movs	r3, #2
 8020bce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8020bd0:	1d3b      	adds	r3, r7, #4
 8020bd2:	4619      	mov	r1, r3
 8020bd4:	4805      	ldr	r0, [pc, #20]	; (8020bec <MX_FMC_Init+0x98>)
 8020bd6:	f006 fae5 	bl	80271a4 <HAL_SDRAM_Init>
 8020bda:	4603      	mov	r3, r0
 8020bdc:	2b00      	cmp	r3, #0
 8020bde:	d001      	beq.n	8020be4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8020be0:	f000 f950 	bl	8020e84 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8020be4:	bf00      	nop
 8020be6:	3720      	adds	r7, #32
 8020be8:	46bd      	mov	sp, r7
 8020bea:	bd80      	pop	{r7, pc}
 8020bec:	20000368 	.word	0x20000368
 8020bf0:	a0000140 	.word	0xa0000140

08020bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020bf4:	b580      	push	{r7, lr}
 8020bf6:	b08e      	sub	sp, #56	; 0x38
 8020bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020bfe:	2200      	movs	r2, #0
 8020c00:	601a      	str	r2, [r3, #0]
 8020c02:	605a      	str	r2, [r3, #4]
 8020c04:	609a      	str	r2, [r3, #8]
 8020c06:	60da      	str	r2, [r3, #12]
 8020c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020c0a:	2300      	movs	r3, #0
 8020c0c:	623b      	str	r3, [r7, #32]
 8020c0e:	4b85      	ldr	r3, [pc, #532]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c12:	4a84      	ldr	r2, [pc, #528]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020c14:	f043 0304 	orr.w	r3, r3, #4
 8020c18:	6313      	str	r3, [r2, #48]	; 0x30
 8020c1a:	4b82      	ldr	r3, [pc, #520]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c1e:	f003 0304 	and.w	r3, r3, #4
 8020c22:	623b      	str	r3, [r7, #32]
 8020c24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8020c26:	2300      	movs	r3, #0
 8020c28:	61fb      	str	r3, [r7, #28]
 8020c2a:	4b7e      	ldr	r3, [pc, #504]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c2e:	4a7d      	ldr	r2, [pc, #500]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020c30:	f043 0320 	orr.w	r3, r3, #32
 8020c34:	6313      	str	r3, [r2, #48]	; 0x30
 8020c36:	4b7b      	ldr	r3, [pc, #492]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c3a:	f003 0320 	and.w	r3, r3, #32
 8020c3e:	61fb      	str	r3, [r7, #28]
 8020c40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020c42:	2300      	movs	r3, #0
 8020c44:	61bb      	str	r3, [r7, #24]
 8020c46:	4b77      	ldr	r3, [pc, #476]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c4a:	4a76      	ldr	r2, [pc, #472]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c50:	6313      	str	r3, [r2, #48]	; 0x30
 8020c52:	4b74      	ldr	r3, [pc, #464]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020c5a:	61bb      	str	r3, [r7, #24]
 8020c5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020c5e:	2300      	movs	r3, #0
 8020c60:	617b      	str	r3, [r7, #20]
 8020c62:	4b70      	ldr	r3, [pc, #448]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c66:	4a6f      	ldr	r2, [pc, #444]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020c68:	f043 0301 	orr.w	r3, r3, #1
 8020c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8020c6e:	4b6d      	ldr	r3, [pc, #436]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c72:	f003 0301 	and.w	r3, r3, #1
 8020c76:	617b      	str	r3, [r7, #20]
 8020c78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020c7a:	2300      	movs	r3, #0
 8020c7c:	613b      	str	r3, [r7, #16]
 8020c7e:	4b69      	ldr	r3, [pc, #420]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c82:	4a68      	ldr	r2, [pc, #416]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020c84:	f043 0302 	orr.w	r3, r3, #2
 8020c88:	6313      	str	r3, [r2, #48]	; 0x30
 8020c8a:	4b66      	ldr	r3, [pc, #408]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c8e:	f003 0302 	and.w	r3, r3, #2
 8020c92:	613b      	str	r3, [r7, #16]
 8020c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8020c96:	2300      	movs	r3, #0
 8020c98:	60fb      	str	r3, [r7, #12]
 8020c9a:	4b62      	ldr	r3, [pc, #392]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c9e:	4a61      	ldr	r2, [pc, #388]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8020ca6:	4b5f      	ldr	r3, [pc, #380]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020cae:	60fb      	str	r3, [r7, #12]
 8020cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8020cb2:	2300      	movs	r3, #0
 8020cb4:	60bb      	str	r3, [r7, #8]
 8020cb6:	4b5b      	ldr	r3, [pc, #364]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cba:	4a5a      	ldr	r2, [pc, #360]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020cbc:	f043 0310 	orr.w	r3, r3, #16
 8020cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8020cc2:	4b58      	ldr	r3, [pc, #352]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cc6:	f003 0310 	and.w	r3, r3, #16
 8020cca:	60bb      	str	r3, [r7, #8]
 8020ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020cce:	2300      	movs	r3, #0
 8020cd0:	607b      	str	r3, [r7, #4]
 8020cd2:	4b54      	ldr	r3, [pc, #336]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cd6:	4a53      	ldr	r2, [pc, #332]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020cd8:	f043 0308 	orr.w	r3, r3, #8
 8020cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8020cde:	4b51      	ldr	r3, [pc, #324]	; (8020e24 <MX_GPIO_Init+0x230>)
 8020ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ce2:	f003 0308 	and.w	r3, r3, #8
 8020ce6:	607b      	str	r3, [r7, #4]
 8020ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8020cea:	2200      	movs	r2, #0
 8020cec:	2116      	movs	r1, #22
 8020cee:	484e      	ldr	r0, [pc, #312]	; (8020e28 <MX_GPIO_Init+0x234>)
 8020cf0:	f003 f9c2 	bl	8024078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8020cf4:	2200      	movs	r2, #0
 8020cf6:	2180      	movs	r1, #128	; 0x80
 8020cf8:	484c      	ldr	r0, [pc, #304]	; (8020e2c <MX_GPIO_Init+0x238>)
 8020cfa:	f003 f9bd 	bl	8024078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8020cfe:	2200      	movs	r2, #0
 8020d00:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8020d04:	484a      	ldr	r0, [pc, #296]	; (8020e30 <MX_GPIO_Init+0x23c>)
 8020d06:	f003 f9b7 	bl	8024078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8020d0a:	2200      	movs	r2, #0
 8020d0c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8020d10:	4848      	ldr	r0, [pc, #288]	; (8020e34 <MX_GPIO_Init+0x240>)
 8020d12:	f003 f9b1 	bl	8024078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8020d16:	2316      	movs	r3, #22
 8020d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d1a:	2301      	movs	r3, #1
 8020d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d1e:	2300      	movs	r3, #0
 8020d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d22:	2300      	movs	r3, #0
 8020d24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d2a:	4619      	mov	r1, r3
 8020d2c:	483e      	ldr	r0, [pc, #248]	; (8020e28 <MX_GPIO_Init+0x234>)
 8020d2e:	f002 feeb 	bl	8023b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8020d32:	2301      	movs	r3, #1
 8020d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8020d36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8020d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d3c:	2300      	movs	r3, #0
 8020d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8020d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d44:	4619      	mov	r1, r3
 8020d46:	4839      	ldr	r0, [pc, #228]	; (8020e2c <MX_GPIO_Init+0x238>)
 8020d48:	f002 fede 	bl	8023b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8020d4c:	f248 0306 	movw	r3, #32774	; 0x8006
 8020d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020d52:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d58:	2300      	movs	r3, #0
 8020d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d60:	4619      	mov	r1, r3
 8020d62:	4832      	ldr	r0, [pc, #200]	; (8020e2c <MX_GPIO_Init+0x238>)
 8020d64:	f002 fed0 	bl	8023b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8020d68:	2380      	movs	r3, #128	; 0x80
 8020d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d6c:	2301      	movs	r3, #1
 8020d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d70:	2300      	movs	r3, #0
 8020d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d74:	2300      	movs	r3, #0
 8020d76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8020d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d7c:	4619      	mov	r1, r3
 8020d7e:	482b      	ldr	r0, [pc, #172]	; (8020e2c <MX_GPIO_Init+0x238>)
 8020d80:	f002 fec2 	bl	8023b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8020d84:	2320      	movs	r3, #32
 8020d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020d88:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d8e:	2300      	movs	r3, #0
 8020d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8020d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d96:	4619      	mov	r1, r3
 8020d98:	4823      	ldr	r0, [pc, #140]	; (8020e28 <MX_GPIO_Init+0x234>)
 8020d9a:	f002 feb5 	bl	8023b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8020d9e:	2304      	movs	r3, #4
 8020da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020da2:	2300      	movs	r3, #0
 8020da4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020da6:	2300      	movs	r3, #0
 8020da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8020daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dae:	4619      	mov	r1, r3
 8020db0:	4821      	ldr	r0, [pc, #132]	; (8020e38 <MX_GPIO_Init+0x244>)
 8020db2:	f002 fea9 	bl	8023b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8020db6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020dbc:	2300      	movs	r3, #0
 8020dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dc0:	2300      	movs	r3, #0
 8020dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8020dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dc8:	4619      	mov	r1, r3
 8020dca:	4819      	ldr	r0, [pc, #100]	; (8020e30 <MX_GPIO_Init+0x23c>)
 8020dcc:	f002 fe9c 	bl	8023b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8020dd0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8020dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020dd6:	2301      	movs	r3, #1
 8020dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dda:	2300      	movs	r3, #0
 8020ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020dde:	2300      	movs	r3, #0
 8020de0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020de6:	4619      	mov	r1, r3
 8020de8:	4811      	ldr	r0, [pc, #68]	; (8020e30 <MX_GPIO_Init+0x23c>)
 8020dea:	f002 fe8d 	bl	8023b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8020dee:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8020df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020df4:	2301      	movs	r3, #1
 8020df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020df8:	2300      	movs	r3, #0
 8020dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020dfc:	2300      	movs	r3, #0
 8020dfe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e04:	4619      	mov	r1, r3
 8020e06:	480b      	ldr	r0, [pc, #44]	; (8020e34 <MX_GPIO_Init+0x240>)
 8020e08:	f002 fe7e 	bl	8023b08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8020e0c:	2200      	movs	r2, #0
 8020e0e:	2100      	movs	r1, #0
 8020e10:	2006      	movs	r0, #6
 8020e12:	f002 f8d9 	bl	8022fc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8020e16:	2006      	movs	r0, #6
 8020e18:	f002 f8f2 	bl	8023000 <HAL_NVIC_EnableIRQ>

}
 8020e1c:	bf00      	nop
 8020e1e:	3738      	adds	r7, #56	; 0x38
 8020e20:	46bd      	mov	sp, r7
 8020e22:	bd80      	pop	{r7, pc}
 8020e24:	40023800 	.word	0x40023800
 8020e28:	40020800 	.word	0x40020800
 8020e2c:	40020000 	.word	0x40020000
 8020e30:	40020c00 	.word	0x40020c00
 8020e34:	40021800 	.word	0x40021800
 8020e38:	40020400 	.word	0x40020400

08020e3c <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8020e3c:	b580      	push	{r7, lr}
 8020e3e:	b082      	sub	sp, #8
 8020e40:	af00      	add	r7, sp, #0
 8020e42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8020e44:	1d39      	adds	r1, r7, #4
 8020e46:	f04f 33ff 	mov.w	r3, #4294967295
 8020e4a:	2201      	movs	r2, #1
 8020e4c:	4803      	ldr	r0, [pc, #12]	; (8020e5c <__io_putchar+0x20>)
 8020e4e:	f007 fce8 	bl	8028822 <HAL_UART_Transmit>
	return ch;
 8020e52:	687b      	ldr	r3, [r7, #4]
}
 8020e54:	4618      	mov	r0, r3
 8020e56:	3708      	adds	r7, #8
 8020e58:	46bd      	mov	sp, r7
 8020e5a:	bd80      	pop	{r7, pc}
 8020e5c:	20000324 	.word	0x20000324

08020e60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020e60:	b580      	push	{r7, lr}
 8020e62:	b082      	sub	sp, #8
 8020e64:	af00      	add	r7, sp, #0
 8020e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8020e68:	687b      	ldr	r3, [r7, #4]
 8020e6a:	681b      	ldr	r3, [r3, #0]
 8020e6c:	4a04      	ldr	r2, [pc, #16]	; (8020e80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8020e6e:	4293      	cmp	r3, r2
 8020e70:	d101      	bne.n	8020e76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8020e72:	f001 ffad 	bl	8022dd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8020e76:	bf00      	nop
 8020e78:	3708      	adds	r7, #8
 8020e7a:	46bd      	mov	sp, r7
 8020e7c:	bd80      	pop	{r7, pc}
 8020e7e:	bf00      	nop
 8020e80:	40001000 	.word	0x40001000

08020e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020e84:	b480      	push	{r7}
 8020e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020e88:	b672      	cpsid	i
}
 8020e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020e8c:	e7fe      	b.n	8020e8c <Error_Handler+0x8>
	...

08020e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020e90:	b480      	push	{r7}
 8020e92:	b083      	sub	sp, #12
 8020e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020e96:	2300      	movs	r3, #0
 8020e98:	607b      	str	r3, [r7, #4]
 8020e9a:	4b10      	ldr	r3, [pc, #64]	; (8020edc <HAL_MspInit+0x4c>)
 8020e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020e9e:	4a0f      	ldr	r2, [pc, #60]	; (8020edc <HAL_MspInit+0x4c>)
 8020ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8020ea6:	4b0d      	ldr	r3, [pc, #52]	; (8020edc <HAL_MspInit+0x4c>)
 8020ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020eae:	607b      	str	r3, [r7, #4]
 8020eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020eb2:	2300      	movs	r3, #0
 8020eb4:	603b      	str	r3, [r7, #0]
 8020eb6:	4b09      	ldr	r3, [pc, #36]	; (8020edc <HAL_MspInit+0x4c>)
 8020eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020eba:	4a08      	ldr	r2, [pc, #32]	; (8020edc <HAL_MspInit+0x4c>)
 8020ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8020ec2:	4b06      	ldr	r3, [pc, #24]	; (8020edc <HAL_MspInit+0x4c>)
 8020ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020eca:	603b      	str	r3, [r7, #0]
 8020ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020ece:	bf00      	nop
 8020ed0:	370c      	adds	r7, #12
 8020ed2:	46bd      	mov	sp, r7
 8020ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ed8:	4770      	bx	lr
 8020eda:	bf00      	nop
 8020edc:	40023800 	.word	0x40023800

08020ee0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8020ee0:	b480      	push	{r7}
 8020ee2:	b085      	sub	sp, #20
 8020ee4:	af00      	add	r7, sp, #0
 8020ee6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8020ee8:	687b      	ldr	r3, [r7, #4]
 8020eea:	681b      	ldr	r3, [r3, #0]
 8020eec:	4a0b      	ldr	r2, [pc, #44]	; (8020f1c <HAL_CRC_MspInit+0x3c>)
 8020eee:	4293      	cmp	r3, r2
 8020ef0:	d10d      	bne.n	8020f0e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8020ef2:	2300      	movs	r3, #0
 8020ef4:	60fb      	str	r3, [r7, #12]
 8020ef6:	4b0a      	ldr	r3, [pc, #40]	; (8020f20 <HAL_CRC_MspInit+0x40>)
 8020ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020efa:	4a09      	ldr	r2, [pc, #36]	; (8020f20 <HAL_CRC_MspInit+0x40>)
 8020efc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8020f00:	6313      	str	r3, [r2, #48]	; 0x30
 8020f02:	4b07      	ldr	r3, [pc, #28]	; (8020f20 <HAL_CRC_MspInit+0x40>)
 8020f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8020f0a:	60fb      	str	r3, [r7, #12]
 8020f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8020f0e:	bf00      	nop
 8020f10:	3714      	adds	r7, #20
 8020f12:	46bd      	mov	sp, r7
 8020f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f18:	4770      	bx	lr
 8020f1a:	bf00      	nop
 8020f1c:	40023000 	.word	0x40023000
 8020f20:	40023800 	.word	0x40023800

08020f24 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8020f24:	b580      	push	{r7, lr}
 8020f26:	b084      	sub	sp, #16
 8020f28:	af00      	add	r7, sp, #0
 8020f2a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8020f2c:	687b      	ldr	r3, [r7, #4]
 8020f2e:	681b      	ldr	r3, [r3, #0]
 8020f30:	4a0e      	ldr	r2, [pc, #56]	; (8020f6c <HAL_DMA2D_MspInit+0x48>)
 8020f32:	4293      	cmp	r3, r2
 8020f34:	d115      	bne.n	8020f62 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8020f36:	2300      	movs	r3, #0
 8020f38:	60fb      	str	r3, [r7, #12]
 8020f3a:	4b0d      	ldr	r3, [pc, #52]	; (8020f70 <HAL_DMA2D_MspInit+0x4c>)
 8020f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f3e:	4a0c      	ldr	r2, [pc, #48]	; (8020f70 <HAL_DMA2D_MspInit+0x4c>)
 8020f40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8020f44:	6313      	str	r3, [r2, #48]	; 0x30
 8020f46:	4b0a      	ldr	r3, [pc, #40]	; (8020f70 <HAL_DMA2D_MspInit+0x4c>)
 8020f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8020f4e:	60fb      	str	r3, [r7, #12]
 8020f50:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8020f52:	2200      	movs	r2, #0
 8020f54:	2105      	movs	r1, #5
 8020f56:	205a      	movs	r0, #90	; 0x5a
 8020f58:	f002 f836 	bl	8022fc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8020f5c:	205a      	movs	r0, #90	; 0x5a
 8020f5e:	f002 f84f 	bl	8023000 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8020f62:	bf00      	nop
 8020f64:	3710      	adds	r7, #16
 8020f66:	46bd      	mov	sp, r7
 8020f68:	bd80      	pop	{r7, pc}
 8020f6a:	bf00      	nop
 8020f6c:	4002b000 	.word	0x4002b000
 8020f70:	40023800 	.word	0x40023800

08020f74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8020f74:	b580      	push	{r7, lr}
 8020f76:	b08a      	sub	sp, #40	; 0x28
 8020f78:	af00      	add	r7, sp, #0
 8020f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020f7c:	f107 0314 	add.w	r3, r7, #20
 8020f80:	2200      	movs	r2, #0
 8020f82:	601a      	str	r2, [r3, #0]
 8020f84:	605a      	str	r2, [r3, #4]
 8020f86:	609a      	str	r2, [r3, #8]
 8020f88:	60da      	str	r2, [r3, #12]
 8020f8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8020f8c:	687b      	ldr	r3, [r7, #4]
 8020f8e:	681b      	ldr	r3, [r3, #0]
 8020f90:	4a29      	ldr	r2, [pc, #164]	; (8021038 <HAL_I2C_MspInit+0xc4>)
 8020f92:	4293      	cmp	r3, r2
 8020f94:	d14b      	bne.n	802102e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8020f96:	2300      	movs	r3, #0
 8020f98:	613b      	str	r3, [r7, #16]
 8020f9a:	4b28      	ldr	r3, [pc, #160]	; (802103c <HAL_I2C_MspInit+0xc8>)
 8020f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f9e:	4a27      	ldr	r2, [pc, #156]	; (802103c <HAL_I2C_MspInit+0xc8>)
 8020fa0:	f043 0304 	orr.w	r3, r3, #4
 8020fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8020fa6:	4b25      	ldr	r3, [pc, #148]	; (802103c <HAL_I2C_MspInit+0xc8>)
 8020fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020faa:	f003 0304 	and.w	r3, r3, #4
 8020fae:	613b      	str	r3, [r7, #16]
 8020fb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020fb2:	2300      	movs	r3, #0
 8020fb4:	60fb      	str	r3, [r7, #12]
 8020fb6:	4b21      	ldr	r3, [pc, #132]	; (802103c <HAL_I2C_MspInit+0xc8>)
 8020fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020fba:	4a20      	ldr	r2, [pc, #128]	; (802103c <HAL_I2C_MspInit+0xc8>)
 8020fbc:	f043 0301 	orr.w	r3, r3, #1
 8020fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8020fc2:	4b1e      	ldr	r3, [pc, #120]	; (802103c <HAL_I2C_MspInit+0xc8>)
 8020fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020fc6:	f003 0301 	and.w	r3, r3, #1
 8020fca:	60fb      	str	r3, [r7, #12]
 8020fcc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8020fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8020fd4:	2312      	movs	r3, #18
 8020fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8020fd8:	2301      	movs	r3, #1
 8020fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020fdc:	2300      	movs	r3, #0
 8020fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8020fe0:	2304      	movs	r3, #4
 8020fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8020fe4:	f107 0314 	add.w	r3, r7, #20
 8020fe8:	4619      	mov	r1, r3
 8020fea:	4815      	ldr	r0, [pc, #84]	; (8021040 <HAL_I2C_MspInit+0xcc>)
 8020fec:	f002 fd8c 	bl	8023b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8020ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8020ff6:	2312      	movs	r3, #18
 8020ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8020ffa:	2301      	movs	r3, #1
 8020ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020ffe:	2300      	movs	r3, #0
 8021000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8021002:	2304      	movs	r3, #4
 8021004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8021006:	f107 0314 	add.w	r3, r7, #20
 802100a:	4619      	mov	r1, r3
 802100c:	480d      	ldr	r0, [pc, #52]	; (8021044 <HAL_I2C_MspInit+0xd0>)
 802100e:	f002 fd7b 	bl	8023b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8021012:	2300      	movs	r3, #0
 8021014:	60bb      	str	r3, [r7, #8]
 8021016:	4b09      	ldr	r3, [pc, #36]	; (802103c <HAL_I2C_MspInit+0xc8>)
 8021018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802101a:	4a08      	ldr	r2, [pc, #32]	; (802103c <HAL_I2C_MspInit+0xc8>)
 802101c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8021020:	6413      	str	r3, [r2, #64]	; 0x40
 8021022:	4b06      	ldr	r3, [pc, #24]	; (802103c <HAL_I2C_MspInit+0xc8>)
 8021024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021026:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802102a:	60bb      	str	r3, [r7, #8]
 802102c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 802102e:	bf00      	nop
 8021030:	3728      	adds	r7, #40	; 0x28
 8021032:	46bd      	mov	sp, r7
 8021034:	bd80      	pop	{r7, pc}
 8021036:	bf00      	nop
 8021038:	40005c00 	.word	0x40005c00
 802103c:	40023800 	.word	0x40023800
 8021040:	40020800 	.word	0x40020800
 8021044:	40020000 	.word	0x40020000

08021048 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8021048:	b580      	push	{r7, lr}
 802104a:	b09a      	sub	sp, #104	; 0x68
 802104c:	af00      	add	r7, sp, #0
 802104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021050:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021054:	2200      	movs	r2, #0
 8021056:	601a      	str	r2, [r3, #0]
 8021058:	605a      	str	r2, [r3, #4]
 802105a:	609a      	str	r2, [r3, #8]
 802105c:	60da      	str	r2, [r3, #12]
 802105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8021060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021064:	2230      	movs	r2, #48	; 0x30
 8021066:	2100      	movs	r1, #0
 8021068:	4618      	mov	r0, r3
 802106a:	f00b fb85 	bl	802c778 <memset>
  if(hltdc->Instance==LTDC)
 802106e:	687b      	ldr	r3, [r7, #4]
 8021070:	681b      	ldr	r3, [r3, #0]
 8021072:	4a85      	ldr	r2, [pc, #532]	; (8021288 <HAL_LTDC_MspInit+0x240>)
 8021074:	4293      	cmp	r3, r2
 8021076:	f040 8102 	bne.w	802127e <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 802107a:	2308      	movs	r3, #8
 802107c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 802107e:	2331      	movs	r3, #49	; 0x31
 8021080:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8021082:	2302      	movs	r3, #2
 8021084:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8021086:	2300      	movs	r3, #0
 8021088:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802108e:	4618      	mov	r0, r3
 8021090:	f005 fec8 	bl	8026e24 <HAL_RCCEx_PeriphCLKConfig>
 8021094:	4603      	mov	r3, r0
 8021096:	2b00      	cmp	r3, #0
 8021098:	d001      	beq.n	802109e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 802109a:	f7ff fef3 	bl	8020e84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 802109e:	2300      	movs	r3, #0
 80210a0:	623b      	str	r3, [r7, #32]
 80210a2:	4b7a      	ldr	r3, [pc, #488]	; (802128c <HAL_LTDC_MspInit+0x244>)
 80210a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80210a6:	4a79      	ldr	r2, [pc, #484]	; (802128c <HAL_LTDC_MspInit+0x244>)
 80210a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80210ac:	6453      	str	r3, [r2, #68]	; 0x44
 80210ae:	4b77      	ldr	r3, [pc, #476]	; (802128c <HAL_LTDC_MspInit+0x244>)
 80210b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80210b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80210b6:	623b      	str	r3, [r7, #32]
 80210b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80210ba:	2300      	movs	r3, #0
 80210bc:	61fb      	str	r3, [r7, #28]
 80210be:	4b73      	ldr	r3, [pc, #460]	; (802128c <HAL_LTDC_MspInit+0x244>)
 80210c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210c2:	4a72      	ldr	r2, [pc, #456]	; (802128c <HAL_LTDC_MspInit+0x244>)
 80210c4:	f043 0320 	orr.w	r3, r3, #32
 80210c8:	6313      	str	r3, [r2, #48]	; 0x30
 80210ca:	4b70      	ldr	r3, [pc, #448]	; (802128c <HAL_LTDC_MspInit+0x244>)
 80210cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210ce:	f003 0320 	and.w	r3, r3, #32
 80210d2:	61fb      	str	r3, [r7, #28]
 80210d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80210d6:	2300      	movs	r3, #0
 80210d8:	61bb      	str	r3, [r7, #24]
 80210da:	4b6c      	ldr	r3, [pc, #432]	; (802128c <HAL_LTDC_MspInit+0x244>)
 80210dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210de:	4a6b      	ldr	r2, [pc, #428]	; (802128c <HAL_LTDC_MspInit+0x244>)
 80210e0:	f043 0301 	orr.w	r3, r3, #1
 80210e4:	6313      	str	r3, [r2, #48]	; 0x30
 80210e6:	4b69      	ldr	r3, [pc, #420]	; (802128c <HAL_LTDC_MspInit+0x244>)
 80210e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210ea:	f003 0301 	and.w	r3, r3, #1
 80210ee:	61bb      	str	r3, [r7, #24]
 80210f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80210f2:	2300      	movs	r3, #0
 80210f4:	617b      	str	r3, [r7, #20]
 80210f6:	4b65      	ldr	r3, [pc, #404]	; (802128c <HAL_LTDC_MspInit+0x244>)
 80210f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210fa:	4a64      	ldr	r2, [pc, #400]	; (802128c <HAL_LTDC_MspInit+0x244>)
 80210fc:	f043 0302 	orr.w	r3, r3, #2
 8021100:	6313      	str	r3, [r2, #48]	; 0x30
 8021102:	4b62      	ldr	r3, [pc, #392]	; (802128c <HAL_LTDC_MspInit+0x244>)
 8021104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021106:	f003 0302 	and.w	r3, r3, #2
 802110a:	617b      	str	r3, [r7, #20]
 802110c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 802110e:	2300      	movs	r3, #0
 8021110:	613b      	str	r3, [r7, #16]
 8021112:	4b5e      	ldr	r3, [pc, #376]	; (802128c <HAL_LTDC_MspInit+0x244>)
 8021114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021116:	4a5d      	ldr	r2, [pc, #372]	; (802128c <HAL_LTDC_MspInit+0x244>)
 8021118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802111c:	6313      	str	r3, [r2, #48]	; 0x30
 802111e:	4b5b      	ldr	r3, [pc, #364]	; (802128c <HAL_LTDC_MspInit+0x244>)
 8021120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021126:	613b      	str	r3, [r7, #16]
 8021128:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802112a:	2300      	movs	r3, #0
 802112c:	60fb      	str	r3, [r7, #12]
 802112e:	4b57      	ldr	r3, [pc, #348]	; (802128c <HAL_LTDC_MspInit+0x244>)
 8021130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021132:	4a56      	ldr	r2, [pc, #344]	; (802128c <HAL_LTDC_MspInit+0x244>)
 8021134:	f043 0304 	orr.w	r3, r3, #4
 8021138:	6313      	str	r3, [r2, #48]	; 0x30
 802113a:	4b54      	ldr	r3, [pc, #336]	; (802128c <HAL_LTDC_MspInit+0x244>)
 802113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802113e:	f003 0304 	and.w	r3, r3, #4
 8021142:	60fb      	str	r3, [r7, #12]
 8021144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021146:	2300      	movs	r3, #0
 8021148:	60bb      	str	r3, [r7, #8]
 802114a:	4b50      	ldr	r3, [pc, #320]	; (802128c <HAL_LTDC_MspInit+0x244>)
 802114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802114e:	4a4f      	ldr	r2, [pc, #316]	; (802128c <HAL_LTDC_MspInit+0x244>)
 8021150:	f043 0308 	orr.w	r3, r3, #8
 8021154:	6313      	str	r3, [r2, #48]	; 0x30
 8021156:	4b4d      	ldr	r3, [pc, #308]	; (802128c <HAL_LTDC_MspInit+0x244>)
 8021158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802115a:	f003 0308 	and.w	r3, r3, #8
 802115e:	60bb      	str	r3, [r7, #8]
 8021160:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8021162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021166:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021168:	2302      	movs	r3, #2
 802116a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802116c:	2300      	movs	r3, #0
 802116e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021170:	2300      	movs	r3, #0
 8021172:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021174:	230e      	movs	r3, #14
 8021176:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8021178:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802117c:	4619      	mov	r1, r3
 802117e:	4844      	ldr	r0, [pc, #272]	; (8021290 <HAL_LTDC_MspInit+0x248>)
 8021180:	f002 fcc2 	bl	8023b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8021184:	f641 0358 	movw	r3, #6232	; 0x1858
 8021188:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802118a:	2302      	movs	r3, #2
 802118c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802118e:	2300      	movs	r3, #0
 8021190:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021192:	2300      	movs	r3, #0
 8021194:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021196:	230e      	movs	r3, #14
 8021198:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802119a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802119e:	4619      	mov	r1, r3
 80211a0:	483c      	ldr	r0, [pc, #240]	; (8021294 <HAL_LTDC_MspInit+0x24c>)
 80211a2:	f002 fcb1 	bl	8023b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80211a6:	2303      	movs	r3, #3
 80211a8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80211aa:	2302      	movs	r3, #2
 80211ac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80211ae:	2300      	movs	r3, #0
 80211b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80211b2:	2300      	movs	r3, #0
 80211b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80211b6:	2309      	movs	r3, #9
 80211b8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80211ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80211be:	4619      	mov	r1, r3
 80211c0:	4835      	ldr	r0, [pc, #212]	; (8021298 <HAL_LTDC_MspInit+0x250>)
 80211c2:	f002 fca1 	bl	8023b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80211c6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80211ca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80211cc:	2302      	movs	r3, #2
 80211ce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80211d0:	2300      	movs	r3, #0
 80211d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80211d4:	2300      	movs	r3, #0
 80211d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80211d8:	230e      	movs	r3, #14
 80211da:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80211dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80211e0:	4619      	mov	r1, r3
 80211e2:	482d      	ldr	r0, [pc, #180]	; (8021298 <HAL_LTDC_MspInit+0x250>)
 80211e4:	f002 fc90 	bl	8023b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80211e8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80211ec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80211ee:	2302      	movs	r3, #2
 80211f0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80211f2:	2300      	movs	r3, #0
 80211f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80211f6:	2300      	movs	r3, #0
 80211f8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80211fa:	230e      	movs	r3, #14
 80211fc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80211fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021202:	4619      	mov	r1, r3
 8021204:	4825      	ldr	r0, [pc, #148]	; (802129c <HAL_LTDC_MspInit+0x254>)
 8021206:	f002 fc7f 	bl	8023b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 802120a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 802120e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021210:	2302      	movs	r3, #2
 8021212:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021214:	2300      	movs	r3, #0
 8021216:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021218:	2300      	movs	r3, #0
 802121a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 802121c:	230e      	movs	r3, #14
 802121e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021220:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021224:	4619      	mov	r1, r3
 8021226:	481e      	ldr	r0, [pc, #120]	; (80212a0 <HAL_LTDC_MspInit+0x258>)
 8021228:	f002 fc6e 	bl	8023b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 802122c:	2348      	movs	r3, #72	; 0x48
 802122e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021230:	2302      	movs	r3, #2
 8021232:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021234:	2300      	movs	r3, #0
 8021236:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021238:	2300      	movs	r3, #0
 802123a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 802123c:	230e      	movs	r3, #14
 802123e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021240:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021244:	4619      	mov	r1, r3
 8021246:	4817      	ldr	r0, [pc, #92]	; (80212a4 <HAL_LTDC_MspInit+0x25c>)
 8021248:	f002 fc5e 	bl	8023b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 802124c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8021250:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021252:	2302      	movs	r3, #2
 8021254:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021256:	2300      	movs	r3, #0
 8021258:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802125a:	2300      	movs	r3, #0
 802125c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 802125e:	2309      	movs	r3, #9
 8021260:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021262:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021266:	4619      	mov	r1, r3
 8021268:	480c      	ldr	r0, [pc, #48]	; (802129c <HAL_LTDC_MspInit+0x254>)
 802126a:	f002 fc4d 	bl	8023b08 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 802126e:	2200      	movs	r2, #0
 8021270:	2105      	movs	r1, #5
 8021272:	2058      	movs	r0, #88	; 0x58
 8021274:	f001 fea8 	bl	8022fc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8021278:	2058      	movs	r0, #88	; 0x58
 802127a:	f001 fec1 	bl	8023000 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 802127e:	bf00      	nop
 8021280:	3768      	adds	r7, #104	; 0x68
 8021282:	46bd      	mov	sp, r7
 8021284:	bd80      	pop	{r7, pc}
 8021286:	bf00      	nop
 8021288:	40016800 	.word	0x40016800
 802128c:	40023800 	.word	0x40023800
 8021290:	40021400 	.word	0x40021400
 8021294:	40020000 	.word	0x40020000
 8021298:	40020400 	.word	0x40020400
 802129c:	40021800 	.word	0x40021800
 80212a0:	40020800 	.word	0x40020800
 80212a4:	40020c00 	.word	0x40020c00

080212a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80212a8:	b580      	push	{r7, lr}
 80212aa:	b08a      	sub	sp, #40	; 0x28
 80212ac:	af00      	add	r7, sp, #0
 80212ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80212b0:	f107 0314 	add.w	r3, r7, #20
 80212b4:	2200      	movs	r2, #0
 80212b6:	601a      	str	r2, [r3, #0]
 80212b8:	605a      	str	r2, [r3, #4]
 80212ba:	609a      	str	r2, [r3, #8]
 80212bc:	60da      	str	r2, [r3, #12]
 80212be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	681b      	ldr	r3, [r3, #0]
 80212c4:	4a19      	ldr	r2, [pc, #100]	; (802132c <HAL_SPI_MspInit+0x84>)
 80212c6:	4293      	cmp	r3, r2
 80212c8:	d12c      	bne.n	8021324 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80212ca:	2300      	movs	r3, #0
 80212cc:	613b      	str	r3, [r7, #16]
 80212ce:	4b18      	ldr	r3, [pc, #96]	; (8021330 <HAL_SPI_MspInit+0x88>)
 80212d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80212d2:	4a17      	ldr	r2, [pc, #92]	; (8021330 <HAL_SPI_MspInit+0x88>)
 80212d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80212d8:	6453      	str	r3, [r2, #68]	; 0x44
 80212da:	4b15      	ldr	r3, [pc, #84]	; (8021330 <HAL_SPI_MspInit+0x88>)
 80212dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80212de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80212e2:	613b      	str	r3, [r7, #16]
 80212e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80212e6:	2300      	movs	r3, #0
 80212e8:	60fb      	str	r3, [r7, #12]
 80212ea:	4b11      	ldr	r3, [pc, #68]	; (8021330 <HAL_SPI_MspInit+0x88>)
 80212ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80212ee:	4a10      	ldr	r2, [pc, #64]	; (8021330 <HAL_SPI_MspInit+0x88>)
 80212f0:	f043 0320 	orr.w	r3, r3, #32
 80212f4:	6313      	str	r3, [r2, #48]	; 0x30
 80212f6:	4b0e      	ldr	r3, [pc, #56]	; (8021330 <HAL_SPI_MspInit+0x88>)
 80212f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80212fa:	f003 0320 	and.w	r3, r3, #32
 80212fe:	60fb      	str	r3, [r7, #12]
 8021300:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8021302:	f44f 7360 	mov.w	r3, #896	; 0x380
 8021306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021308:	2302      	movs	r3, #2
 802130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802130c:	2300      	movs	r3, #0
 802130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021310:	2300      	movs	r3, #0
 8021312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8021314:	2305      	movs	r3, #5
 8021316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021318:	f107 0314 	add.w	r3, r7, #20
 802131c:	4619      	mov	r1, r3
 802131e:	4805      	ldr	r0, [pc, #20]	; (8021334 <HAL_SPI_MspInit+0x8c>)
 8021320:	f002 fbf2 	bl	8023b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8021324:	bf00      	nop
 8021326:	3728      	adds	r7, #40	; 0x28
 8021328:	46bd      	mov	sp, r7
 802132a:	bd80      	pop	{r7, pc}
 802132c:	40015000 	.word	0x40015000
 8021330:	40023800 	.word	0x40023800
 8021334:	40021400 	.word	0x40021400

08021338 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8021338:	b580      	push	{r7, lr}
 802133a:	b082      	sub	sp, #8
 802133c:	af00      	add	r7, sp, #0
 802133e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8021340:	687b      	ldr	r3, [r7, #4]
 8021342:	681b      	ldr	r3, [r3, #0]
 8021344:	4a08      	ldr	r2, [pc, #32]	; (8021368 <HAL_SPI_MspDeInit+0x30>)
 8021346:	4293      	cmp	r3, r2
 8021348:	d10a      	bne.n	8021360 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 802134a:	4b08      	ldr	r3, [pc, #32]	; (802136c <HAL_SPI_MspDeInit+0x34>)
 802134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802134e:	4a07      	ldr	r2, [pc, #28]	; (802136c <HAL_SPI_MspDeInit+0x34>)
 8021350:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8021354:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8021356:	f44f 7160 	mov.w	r1, #896	; 0x380
 802135a:	4805      	ldr	r0, [pc, #20]	; (8021370 <HAL_SPI_MspDeInit+0x38>)
 802135c:	f002 fd80 	bl	8023e60 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8021360:	bf00      	nop
 8021362:	3708      	adds	r7, #8
 8021364:	46bd      	mov	sp, r7
 8021366:	bd80      	pop	{r7, pc}
 8021368:	40015000 	.word	0x40015000
 802136c:	40023800 	.word	0x40023800
 8021370:	40021400 	.word	0x40021400

08021374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8021374:	b480      	push	{r7}
 8021376:	b085      	sub	sp, #20
 8021378:	af00      	add	r7, sp, #0
 802137a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 802137c:	687b      	ldr	r3, [r7, #4]
 802137e:	681b      	ldr	r3, [r3, #0]
 8021380:	4a0b      	ldr	r2, [pc, #44]	; (80213b0 <HAL_TIM_Base_MspInit+0x3c>)
 8021382:	4293      	cmp	r3, r2
 8021384:	d10d      	bne.n	80213a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8021386:	2300      	movs	r3, #0
 8021388:	60fb      	str	r3, [r7, #12]
 802138a:	4b0a      	ldr	r3, [pc, #40]	; (80213b4 <HAL_TIM_Base_MspInit+0x40>)
 802138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802138e:	4a09      	ldr	r2, [pc, #36]	; (80213b4 <HAL_TIM_Base_MspInit+0x40>)
 8021390:	f043 0301 	orr.w	r3, r3, #1
 8021394:	6453      	str	r3, [r2, #68]	; 0x44
 8021396:	4b07      	ldr	r3, [pc, #28]	; (80213b4 <HAL_TIM_Base_MspInit+0x40>)
 8021398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802139a:	f003 0301 	and.w	r3, r3, #1
 802139e:	60fb      	str	r3, [r7, #12]
 80213a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80213a2:	bf00      	nop
 80213a4:	3714      	adds	r7, #20
 80213a6:	46bd      	mov	sp, r7
 80213a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213ac:	4770      	bx	lr
 80213ae:	bf00      	nop
 80213b0:	40010000 	.word	0x40010000
 80213b4:	40023800 	.word	0x40023800

080213b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80213b8:	b580      	push	{r7, lr}
 80213ba:	b08c      	sub	sp, #48	; 0x30
 80213bc:	af00      	add	r7, sp, #0
 80213be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80213c0:	f107 031c 	add.w	r3, r7, #28
 80213c4:	2200      	movs	r2, #0
 80213c6:	601a      	str	r2, [r3, #0]
 80213c8:	605a      	str	r2, [r3, #4]
 80213ca:	609a      	str	r2, [r3, #8]
 80213cc:	60da      	str	r2, [r3, #12]
 80213ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80213d0:	687b      	ldr	r3, [r7, #4]
 80213d2:	681b      	ldr	r3, [r3, #0]
 80213d4:	4a42      	ldr	r2, [pc, #264]	; (80214e0 <HAL_UART_MspInit+0x128>)
 80213d6:	4293      	cmp	r3, r2
 80213d8:	d14b      	bne.n	8021472 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80213da:	2300      	movs	r3, #0
 80213dc:	61bb      	str	r3, [r7, #24]
 80213de:	4b41      	ldr	r3, [pc, #260]	; (80214e4 <HAL_UART_MspInit+0x12c>)
 80213e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80213e2:	4a40      	ldr	r2, [pc, #256]	; (80214e4 <HAL_UART_MspInit+0x12c>)
 80213e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80213e8:	6413      	str	r3, [r2, #64]	; 0x40
 80213ea:	4b3e      	ldr	r3, [pc, #248]	; (80214e4 <HAL_UART_MspInit+0x12c>)
 80213ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80213ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80213f2:	61bb      	str	r3, [r7, #24]
 80213f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80213f6:	2300      	movs	r3, #0
 80213f8:	617b      	str	r3, [r7, #20]
 80213fa:	4b3a      	ldr	r3, [pc, #232]	; (80214e4 <HAL_UART_MspInit+0x12c>)
 80213fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80213fe:	4a39      	ldr	r2, [pc, #228]	; (80214e4 <HAL_UART_MspInit+0x12c>)
 8021400:	f043 0304 	orr.w	r3, r3, #4
 8021404:	6313      	str	r3, [r2, #48]	; 0x30
 8021406:	4b37      	ldr	r3, [pc, #220]	; (80214e4 <HAL_UART_MspInit+0x12c>)
 8021408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802140a:	f003 0304 	and.w	r3, r3, #4
 802140e:	617b      	str	r3, [r7, #20]
 8021410:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021412:	2300      	movs	r3, #0
 8021414:	613b      	str	r3, [r7, #16]
 8021416:	4b33      	ldr	r3, [pc, #204]	; (80214e4 <HAL_UART_MspInit+0x12c>)
 8021418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802141a:	4a32      	ldr	r2, [pc, #200]	; (80214e4 <HAL_UART_MspInit+0x12c>)
 802141c:	f043 0308 	orr.w	r3, r3, #8
 8021420:	6313      	str	r3, [r2, #48]	; 0x30
 8021422:	4b30      	ldr	r3, [pc, #192]	; (80214e4 <HAL_UART_MspInit+0x12c>)
 8021424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021426:	f003 0308 	and.w	r3, r3, #8
 802142a:	613b      	str	r3, [r7, #16]
 802142c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 802142e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021434:	2302      	movs	r3, #2
 8021436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021438:	2300      	movs	r3, #0
 802143a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802143c:	2303      	movs	r3, #3
 802143e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021440:	2308      	movs	r3, #8
 8021442:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021444:	f107 031c 	add.w	r3, r7, #28
 8021448:	4619      	mov	r1, r3
 802144a:	4827      	ldr	r0, [pc, #156]	; (80214e8 <HAL_UART_MspInit+0x130>)
 802144c:	f002 fb5c 	bl	8023b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021450:	2304      	movs	r3, #4
 8021452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021454:	2302      	movs	r3, #2
 8021456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021458:	2300      	movs	r3, #0
 802145a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802145c:	2303      	movs	r3, #3
 802145e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021460:	2308      	movs	r3, #8
 8021462:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021464:	f107 031c 	add.w	r3, r7, #28
 8021468:	4619      	mov	r1, r3
 802146a:	4820      	ldr	r0, [pc, #128]	; (80214ec <HAL_UART_MspInit+0x134>)
 802146c:	f002 fb4c 	bl	8023b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8021470:	e031      	b.n	80214d6 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	681b      	ldr	r3, [r3, #0]
 8021476:	4a1e      	ldr	r2, [pc, #120]	; (80214f0 <HAL_UART_MspInit+0x138>)
 8021478:	4293      	cmp	r3, r2
 802147a:	d12c      	bne.n	80214d6 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 802147c:	2300      	movs	r3, #0
 802147e:	60fb      	str	r3, [r7, #12]
 8021480:	4b18      	ldr	r3, [pc, #96]	; (80214e4 <HAL_UART_MspInit+0x12c>)
 8021482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021484:	4a17      	ldr	r2, [pc, #92]	; (80214e4 <HAL_UART_MspInit+0x12c>)
 8021486:	f043 0310 	orr.w	r3, r3, #16
 802148a:	6453      	str	r3, [r2, #68]	; 0x44
 802148c:	4b15      	ldr	r3, [pc, #84]	; (80214e4 <HAL_UART_MspInit+0x12c>)
 802148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021490:	f003 0310 	and.w	r3, r3, #16
 8021494:	60fb      	str	r3, [r7, #12]
 8021496:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021498:	2300      	movs	r3, #0
 802149a:	60bb      	str	r3, [r7, #8]
 802149c:	4b11      	ldr	r3, [pc, #68]	; (80214e4 <HAL_UART_MspInit+0x12c>)
 802149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214a0:	4a10      	ldr	r2, [pc, #64]	; (80214e4 <HAL_UART_MspInit+0x12c>)
 80214a2:	f043 0301 	orr.w	r3, r3, #1
 80214a6:	6313      	str	r3, [r2, #48]	; 0x30
 80214a8:	4b0e      	ldr	r3, [pc, #56]	; (80214e4 <HAL_UART_MspInit+0x12c>)
 80214aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214ac:	f003 0301 	and.w	r3, r3, #1
 80214b0:	60bb      	str	r3, [r7, #8]
 80214b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80214b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80214b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80214ba:	2302      	movs	r3, #2
 80214bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80214be:	2300      	movs	r3, #0
 80214c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80214c2:	2303      	movs	r3, #3
 80214c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80214c6:	2307      	movs	r3, #7
 80214c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80214ca:	f107 031c 	add.w	r3, r7, #28
 80214ce:	4619      	mov	r1, r3
 80214d0:	4808      	ldr	r0, [pc, #32]	; (80214f4 <HAL_UART_MspInit+0x13c>)
 80214d2:	f002 fb19 	bl	8023b08 <HAL_GPIO_Init>
}
 80214d6:	bf00      	nop
 80214d8:	3730      	adds	r7, #48	; 0x30
 80214da:	46bd      	mov	sp, r7
 80214dc:	bd80      	pop	{r7, pc}
 80214de:	bf00      	nop
 80214e0:	40005000 	.word	0x40005000
 80214e4:	40023800 	.word	0x40023800
 80214e8:	40020800 	.word	0x40020800
 80214ec:	40020c00 	.word	0x40020c00
 80214f0:	40011000 	.word	0x40011000
 80214f4:	40020000 	.word	0x40020000

080214f8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80214f8:	b580      	push	{r7, lr}
 80214fa:	b086      	sub	sp, #24
 80214fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80214fe:	1d3b      	adds	r3, r7, #4
 8021500:	2200      	movs	r2, #0
 8021502:	601a      	str	r2, [r3, #0]
 8021504:	605a      	str	r2, [r3, #4]
 8021506:	609a      	str	r2, [r3, #8]
 8021508:	60da      	str	r2, [r3, #12]
 802150a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 802150c:	4b3b      	ldr	r3, [pc, #236]	; (80215fc <HAL_FMC_MspInit+0x104>)
 802150e:	681b      	ldr	r3, [r3, #0]
 8021510:	2b00      	cmp	r3, #0
 8021512:	d16f      	bne.n	80215f4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8021514:	4b39      	ldr	r3, [pc, #228]	; (80215fc <HAL_FMC_MspInit+0x104>)
 8021516:	2201      	movs	r2, #1
 8021518:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 802151a:	2300      	movs	r3, #0
 802151c:	603b      	str	r3, [r7, #0]
 802151e:	4b38      	ldr	r3, [pc, #224]	; (8021600 <HAL_FMC_MspInit+0x108>)
 8021520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021522:	4a37      	ldr	r2, [pc, #220]	; (8021600 <HAL_FMC_MspInit+0x108>)
 8021524:	f043 0301 	orr.w	r3, r3, #1
 8021528:	6393      	str	r3, [r2, #56]	; 0x38
 802152a:	4b35      	ldr	r3, [pc, #212]	; (8021600 <HAL_FMC_MspInit+0x108>)
 802152c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802152e:	f003 0301 	and.w	r3, r3, #1
 8021532:	603b      	str	r3, [r7, #0]
 8021534:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8021536:	f64f 033f 	movw	r3, #63551	; 0xf83f
 802153a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802153c:	2302      	movs	r3, #2
 802153e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021540:	2300      	movs	r3, #0
 8021542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021544:	2303      	movs	r3, #3
 8021546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021548:	230c      	movs	r3, #12
 802154a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 802154c:	1d3b      	adds	r3, r7, #4
 802154e:	4619      	mov	r1, r3
 8021550:	482c      	ldr	r0, [pc, #176]	; (8021604 <HAL_FMC_MspInit+0x10c>)
 8021552:	f002 fad9 	bl	8023b08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8021556:	2301      	movs	r3, #1
 8021558:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802155a:	2302      	movs	r3, #2
 802155c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802155e:	2300      	movs	r3, #0
 8021560:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021562:	2303      	movs	r3, #3
 8021564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021566:	230c      	movs	r3, #12
 8021568:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 802156a:	1d3b      	adds	r3, r7, #4
 802156c:	4619      	mov	r1, r3
 802156e:	4826      	ldr	r0, [pc, #152]	; (8021608 <HAL_FMC_MspInit+0x110>)
 8021570:	f002 faca 	bl	8023b08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8021574:	f248 1333 	movw	r3, #33075	; 0x8133
 8021578:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802157a:	2302      	movs	r3, #2
 802157c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802157e:	2300      	movs	r3, #0
 8021580:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021582:	2303      	movs	r3, #3
 8021584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021586:	230c      	movs	r3, #12
 8021588:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 802158a:	1d3b      	adds	r3, r7, #4
 802158c:	4619      	mov	r1, r3
 802158e:	481f      	ldr	r0, [pc, #124]	; (802160c <HAL_FMC_MspInit+0x114>)
 8021590:	f002 faba 	bl	8023b08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8021594:	f64f 7383 	movw	r3, #65411	; 0xff83
 8021598:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802159a:	2302      	movs	r3, #2
 802159c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802159e:	2300      	movs	r3, #0
 80215a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80215a2:	2303      	movs	r3, #3
 80215a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80215a6:	230c      	movs	r3, #12
 80215a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80215aa:	1d3b      	adds	r3, r7, #4
 80215ac:	4619      	mov	r1, r3
 80215ae:	4818      	ldr	r0, [pc, #96]	; (8021610 <HAL_FMC_MspInit+0x118>)
 80215b0:	f002 faaa 	bl	8023b08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80215b4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80215b8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80215ba:	2302      	movs	r3, #2
 80215bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80215be:	2300      	movs	r3, #0
 80215c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80215c2:	2303      	movs	r3, #3
 80215c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80215c6:	230c      	movs	r3, #12
 80215c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80215ca:	1d3b      	adds	r3, r7, #4
 80215cc:	4619      	mov	r1, r3
 80215ce:	4811      	ldr	r0, [pc, #68]	; (8021614 <HAL_FMC_MspInit+0x11c>)
 80215d0:	f002 fa9a 	bl	8023b08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80215d4:	2360      	movs	r3, #96	; 0x60
 80215d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80215d8:	2302      	movs	r3, #2
 80215da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80215dc:	2300      	movs	r3, #0
 80215de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80215e0:	2303      	movs	r3, #3
 80215e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80215e4:	230c      	movs	r3, #12
 80215e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80215e8:	1d3b      	adds	r3, r7, #4
 80215ea:	4619      	mov	r1, r3
 80215ec:	480a      	ldr	r0, [pc, #40]	; (8021618 <HAL_FMC_MspInit+0x120>)
 80215ee:	f002 fa8b 	bl	8023b08 <HAL_GPIO_Init>
 80215f2:	e000      	b.n	80215f6 <HAL_FMC_MspInit+0xfe>
    return;
 80215f4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80215f6:	3718      	adds	r7, #24
 80215f8:	46bd      	mov	sp, r7
 80215fa:	bd80      	pop	{r7, pc}
 80215fc:	20000404 	.word	0x20000404
 8021600:	40023800 	.word	0x40023800
 8021604:	40021400 	.word	0x40021400
 8021608:	40020800 	.word	0x40020800
 802160c:	40021800 	.word	0x40021800
 8021610:	40021000 	.word	0x40021000
 8021614:	40020c00 	.word	0x40020c00
 8021618:	40020400 	.word	0x40020400

0802161c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 802161c:	b580      	push	{r7, lr}
 802161e:	b082      	sub	sp, #8
 8021620:	af00      	add	r7, sp, #0
 8021622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8021624:	f7ff ff68 	bl	80214f8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8021628:	bf00      	nop
 802162a:	3708      	adds	r7, #8
 802162c:	46bd      	mov	sp, r7
 802162e:	bd80      	pop	{r7, pc}

08021630 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021630:	b580      	push	{r7, lr}
 8021632:	b08e      	sub	sp, #56	; 0x38
 8021634:	af00      	add	r7, sp, #0
 8021636:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8021638:	2300      	movs	r3, #0
 802163a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 802163c:	2300      	movs	r3, #0
 802163e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8021640:	2300      	movs	r3, #0
 8021642:	60fb      	str	r3, [r7, #12]
 8021644:	4b33      	ldr	r3, [pc, #204]	; (8021714 <HAL_InitTick+0xe4>)
 8021646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021648:	4a32      	ldr	r2, [pc, #200]	; (8021714 <HAL_InitTick+0xe4>)
 802164a:	f043 0310 	orr.w	r3, r3, #16
 802164e:	6413      	str	r3, [r2, #64]	; 0x40
 8021650:	4b30      	ldr	r3, [pc, #192]	; (8021714 <HAL_InitTick+0xe4>)
 8021652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021654:	f003 0310 	and.w	r3, r3, #16
 8021658:	60fb      	str	r3, [r7, #12]
 802165a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 802165c:	f107 0210 	add.w	r2, r7, #16
 8021660:	f107 0314 	add.w	r3, r7, #20
 8021664:	4611      	mov	r1, r2
 8021666:	4618      	mov	r0, r3
 8021668:	f005 fbaa 	bl	8026dc0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 802166c:	6a3b      	ldr	r3, [r7, #32]
 802166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8021670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021672:	2b00      	cmp	r3, #0
 8021674:	d103      	bne.n	802167e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8021676:	f005 fb7b 	bl	8026d70 <HAL_RCC_GetPCLK1Freq>
 802167a:	6378      	str	r0, [r7, #52]	; 0x34
 802167c:	e004      	b.n	8021688 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 802167e:	f005 fb77 	bl	8026d70 <HAL_RCC_GetPCLK1Freq>
 8021682:	4603      	mov	r3, r0
 8021684:	005b      	lsls	r3, r3, #1
 8021686:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8021688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802168a:	4a23      	ldr	r2, [pc, #140]	; (8021718 <HAL_InitTick+0xe8>)
 802168c:	fba2 2303 	umull	r2, r3, r2, r3
 8021690:	0c9b      	lsrs	r3, r3, #18
 8021692:	3b01      	subs	r3, #1
 8021694:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8021696:	4b21      	ldr	r3, [pc, #132]	; (802171c <HAL_InitTick+0xec>)
 8021698:	4a21      	ldr	r2, [pc, #132]	; (8021720 <HAL_InitTick+0xf0>)
 802169a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 802169c:	4b1f      	ldr	r3, [pc, #124]	; (802171c <HAL_InitTick+0xec>)
 802169e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80216a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80216a4:	4a1d      	ldr	r2, [pc, #116]	; (802171c <HAL_InitTick+0xec>)
 80216a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80216aa:	4b1c      	ldr	r3, [pc, #112]	; (802171c <HAL_InitTick+0xec>)
 80216ac:	2200      	movs	r2, #0
 80216ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80216b0:	4b1a      	ldr	r3, [pc, #104]	; (802171c <HAL_InitTick+0xec>)
 80216b2:	2200      	movs	r2, #0
 80216b4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80216b6:	4b19      	ldr	r3, [pc, #100]	; (802171c <HAL_InitTick+0xec>)
 80216b8:	2200      	movs	r2, #0
 80216ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80216bc:	4817      	ldr	r0, [pc, #92]	; (802171c <HAL_InitTick+0xec>)
 80216be:	f006 fbe1 	bl	8027e84 <HAL_TIM_Base_Init>
 80216c2:	4603      	mov	r3, r0
 80216c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80216c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80216cc:	2b00      	cmp	r3, #0
 80216ce:	d11b      	bne.n	8021708 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80216d0:	4812      	ldr	r0, [pc, #72]	; (802171c <HAL_InitTick+0xec>)
 80216d2:	f006 fc27 	bl	8027f24 <HAL_TIM_Base_Start_IT>
 80216d6:	4603      	mov	r3, r0
 80216d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80216dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80216e0:	2b00      	cmp	r3, #0
 80216e2:	d111      	bne.n	8021708 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80216e4:	2036      	movs	r0, #54	; 0x36
 80216e6:	f001 fc8b 	bl	8023000 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80216ea:	687b      	ldr	r3, [r7, #4]
 80216ec:	2b0f      	cmp	r3, #15
 80216ee:	d808      	bhi.n	8021702 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80216f0:	2200      	movs	r2, #0
 80216f2:	6879      	ldr	r1, [r7, #4]
 80216f4:	2036      	movs	r0, #54	; 0x36
 80216f6:	f001 fc67 	bl	8022fc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80216fa:	4a0a      	ldr	r2, [pc, #40]	; (8021724 <HAL_InitTick+0xf4>)
 80216fc:	687b      	ldr	r3, [r7, #4]
 80216fe:	6013      	str	r3, [r2, #0]
 8021700:	e002      	b.n	8021708 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8021702:	2301      	movs	r3, #1
 8021704:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8021708:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 802170c:	4618      	mov	r0, r3
 802170e:	3738      	adds	r7, #56	; 0x38
 8021710:	46bd      	mov	sp, r7
 8021712:	bd80      	pop	{r7, pc}
 8021714:	40023800 	.word	0x40023800
 8021718:	431bde83 	.word	0x431bde83
 802171c:	20000408 	.word	0x20000408
 8021720:	40001000 	.word	0x40001000
 8021724:	20000054 	.word	0x20000054

08021728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021728:	b480      	push	{r7}
 802172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 802172c:	e7fe      	b.n	802172c <NMI_Handler+0x4>

0802172e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802172e:	b480      	push	{r7}
 8021730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021732:	e7fe      	b.n	8021732 <HardFault_Handler+0x4>

08021734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021734:	b480      	push	{r7}
 8021736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021738:	e7fe      	b.n	8021738 <MemManage_Handler+0x4>

0802173a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802173a:	b480      	push	{r7}
 802173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802173e:	e7fe      	b.n	802173e <BusFault_Handler+0x4>

08021740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021740:	b480      	push	{r7}
 8021742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021744:	e7fe      	b.n	8021744 <UsageFault_Handler+0x4>

08021746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021746:	b480      	push	{r7}
 8021748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802174a:	bf00      	nop
 802174c:	46bd      	mov	sp, r7
 802174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021752:	4770      	bx	lr

08021754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021754:	b480      	push	{r7}
 8021756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021758:	bf00      	nop
 802175a:	46bd      	mov	sp, r7
 802175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021760:	4770      	bx	lr

08021762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021762:	b480      	push	{r7}
 8021764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8021766:	bf00      	nop
 8021768:	46bd      	mov	sp, r7
 802176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802176e:	4770      	bx	lr

08021770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8021770:	b480      	push	{r7}
 8021772:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021774:	bf00      	nop
 8021776:	46bd      	mov	sp, r7
 8021778:	f85d 7b04 	ldr.w	r7, [sp], #4
 802177c:	4770      	bx	lr

0802177e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 802177e:	b580      	push	{r7, lr}
 8021780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8021782:	2001      	movs	r0, #1
 8021784:	f002 fc92 	bl	80240ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8021788:	bf00      	nop
 802178a:	bd80      	pop	{r7, pc}

0802178c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 802178c:	b580      	push	{r7, lr}
 802178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8021790:	4802      	ldr	r0, [pc, #8]	; (802179c <TIM6_DAC_IRQHandler+0x10>)
 8021792:	f006 fc37 	bl	8028004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8021796:	bf00      	nop
 8021798:	bd80      	pop	{r7, pc}
 802179a:	bf00      	nop
 802179c:	20000408 	.word	0x20000408

080217a0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80217a0:	b580      	push	{r7, lr}
 80217a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80217a4:	4802      	ldr	r0, [pc, #8]	; (80217b0 <OTG_HS_IRQHandler+0x10>)
 80217a6:	f002 ff03 	bl	80245b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80217aa:	bf00      	nop
 80217ac:	bd80      	pop	{r7, pc}
 80217ae:	bf00      	nop
 80217b0:	20000a88 	.word	0x20000a88

080217b4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80217b4:	b580      	push	{r7, lr}
 80217b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80217b8:	4802      	ldr	r0, [pc, #8]	; (80217c4 <LTDC_IRQHandler+0x10>)
 80217ba:	f004 fb29 	bl	8025e10 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80217be:	bf00      	nop
 80217c0:	bd80      	pop	{r7, pc}
 80217c2:	bf00      	nop
 80217c4:	20000198 	.word	0x20000198

080217c8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80217c8:	b580      	push	{r7, lr}
 80217ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80217cc:	4802      	ldr	r0, [pc, #8]	; (80217d8 <DMA2D_IRQHandler+0x10>)
 80217ce:	f001 ff5c 	bl	802368a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80217d2:	bf00      	nop
 80217d4:	bd80      	pop	{r7, pc}
 80217d6:	bf00      	nop
 80217d8:	20000104 	.word	0x20000104

080217dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80217dc:	b480      	push	{r7}
 80217de:	b083      	sub	sp, #12
 80217e0:	af00      	add	r7, sp, #0
 80217e2:	4603      	mov	r3, r0
 80217e4:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 80217e6:	88fb      	ldrh	r3, [r7, #6]
 80217e8:	2b01      	cmp	r3, #1
 80217ea:	d102      	bne.n	80217f2 <HAL_GPIO_EXTI_Callback+0x16>

	case B1_Pin: //Blue Button Interrupt
		ota_update_request = true;
 80217ec:	4b04      	ldr	r3, [pc, #16]	; (8021800 <HAL_GPIO_EXTI_Callback+0x24>)
 80217ee:	2201      	movs	r2, #1
 80217f0:	701a      	strb	r2, [r3, #0]

	}
}
 80217f2:	bf00      	nop
 80217f4:	370c      	adds	r7, #12
 80217f6:	46bd      	mov	sp, r7
 80217f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217fc:	4770      	bx	lr
 80217fe:	bf00      	nop
 8021800:	20000400 	.word	0x20000400

08021804 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8021804:	b580      	push	{r7, lr}
 8021806:	b086      	sub	sp, #24
 8021808:	af00      	add	r7, sp, #0
 802180a:	60f8      	str	r0, [r7, #12]
 802180c:	60b9      	str	r1, [r7, #8]
 802180e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021810:	2300      	movs	r3, #0
 8021812:	617b      	str	r3, [r7, #20]
 8021814:	e00a      	b.n	802182c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8021816:	f3af 8000 	nop.w
 802181a:	4601      	mov	r1, r0
 802181c:	68bb      	ldr	r3, [r7, #8]
 802181e:	1c5a      	adds	r2, r3, #1
 8021820:	60ba      	str	r2, [r7, #8]
 8021822:	b2ca      	uxtb	r2, r1
 8021824:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021826:	697b      	ldr	r3, [r7, #20]
 8021828:	3301      	adds	r3, #1
 802182a:	617b      	str	r3, [r7, #20]
 802182c:	697a      	ldr	r2, [r7, #20]
 802182e:	687b      	ldr	r3, [r7, #4]
 8021830:	429a      	cmp	r2, r3
 8021832:	dbf0      	blt.n	8021816 <_read+0x12>
  }

  return len;
 8021834:	687b      	ldr	r3, [r7, #4]
}
 8021836:	4618      	mov	r0, r3
 8021838:	3718      	adds	r7, #24
 802183a:	46bd      	mov	sp, r7
 802183c:	bd80      	pop	{r7, pc}

0802183e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 802183e:	b580      	push	{r7, lr}
 8021840:	b086      	sub	sp, #24
 8021842:	af00      	add	r7, sp, #0
 8021844:	60f8      	str	r0, [r7, #12]
 8021846:	60b9      	str	r1, [r7, #8]
 8021848:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802184a:	2300      	movs	r3, #0
 802184c:	617b      	str	r3, [r7, #20]
 802184e:	e009      	b.n	8021864 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8021850:	68bb      	ldr	r3, [r7, #8]
 8021852:	1c5a      	adds	r2, r3, #1
 8021854:	60ba      	str	r2, [r7, #8]
 8021856:	781b      	ldrb	r3, [r3, #0]
 8021858:	4618      	mov	r0, r3
 802185a:	f7ff faef 	bl	8020e3c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802185e:	697b      	ldr	r3, [r7, #20]
 8021860:	3301      	adds	r3, #1
 8021862:	617b      	str	r3, [r7, #20]
 8021864:	697a      	ldr	r2, [r7, #20]
 8021866:	687b      	ldr	r3, [r7, #4]
 8021868:	429a      	cmp	r2, r3
 802186a:	dbf1      	blt.n	8021850 <_write+0x12>
  }
  return len;
 802186c:	687b      	ldr	r3, [r7, #4]
}
 802186e:	4618      	mov	r0, r3
 8021870:	3718      	adds	r7, #24
 8021872:	46bd      	mov	sp, r7
 8021874:	bd80      	pop	{r7, pc}

08021876 <_close>:

int _close(int file)
{
 8021876:	b480      	push	{r7}
 8021878:	b083      	sub	sp, #12
 802187a:	af00      	add	r7, sp, #0
 802187c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 802187e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021882:	4618      	mov	r0, r3
 8021884:	370c      	adds	r7, #12
 8021886:	46bd      	mov	sp, r7
 8021888:	f85d 7b04 	ldr.w	r7, [sp], #4
 802188c:	4770      	bx	lr

0802188e <_fstat>:


int _fstat(int file, struct stat *st)
{
 802188e:	b480      	push	{r7}
 8021890:	b083      	sub	sp, #12
 8021892:	af00      	add	r7, sp, #0
 8021894:	6078      	str	r0, [r7, #4]
 8021896:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8021898:	683b      	ldr	r3, [r7, #0]
 802189a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802189e:	605a      	str	r2, [r3, #4]
  return 0;
 80218a0:	2300      	movs	r3, #0
}
 80218a2:	4618      	mov	r0, r3
 80218a4:	370c      	adds	r7, #12
 80218a6:	46bd      	mov	sp, r7
 80218a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218ac:	4770      	bx	lr

080218ae <_isatty>:

int _isatty(int file)
{
 80218ae:	b480      	push	{r7}
 80218b0:	b083      	sub	sp, #12
 80218b2:	af00      	add	r7, sp, #0
 80218b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80218b6:	2301      	movs	r3, #1
}
 80218b8:	4618      	mov	r0, r3
 80218ba:	370c      	adds	r7, #12
 80218bc:	46bd      	mov	sp, r7
 80218be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218c2:	4770      	bx	lr

080218c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80218c4:	b480      	push	{r7}
 80218c6:	b085      	sub	sp, #20
 80218c8:	af00      	add	r7, sp, #0
 80218ca:	60f8      	str	r0, [r7, #12]
 80218cc:	60b9      	str	r1, [r7, #8]
 80218ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80218d0:	2300      	movs	r3, #0
}
 80218d2:	4618      	mov	r0, r3
 80218d4:	3714      	adds	r7, #20
 80218d6:	46bd      	mov	sp, r7
 80218d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218dc:	4770      	bx	lr
	...

080218e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80218e0:	b580      	push	{r7, lr}
 80218e2:	b086      	sub	sp, #24
 80218e4:	af00      	add	r7, sp, #0
 80218e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80218e8:	4a14      	ldr	r2, [pc, #80]	; (802193c <_sbrk+0x5c>)
 80218ea:	4b15      	ldr	r3, [pc, #84]	; (8021940 <_sbrk+0x60>)
 80218ec:	1ad3      	subs	r3, r2, r3
 80218ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80218f0:	697b      	ldr	r3, [r7, #20]
 80218f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80218f4:	4b13      	ldr	r3, [pc, #76]	; (8021944 <_sbrk+0x64>)
 80218f6:	681b      	ldr	r3, [r3, #0]
 80218f8:	2b00      	cmp	r3, #0
 80218fa:	d102      	bne.n	8021902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80218fc:	4b11      	ldr	r3, [pc, #68]	; (8021944 <_sbrk+0x64>)
 80218fe:	4a12      	ldr	r2, [pc, #72]	; (8021948 <_sbrk+0x68>)
 8021900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8021902:	4b10      	ldr	r3, [pc, #64]	; (8021944 <_sbrk+0x64>)
 8021904:	681a      	ldr	r2, [r3, #0]
 8021906:	687b      	ldr	r3, [r7, #4]
 8021908:	4413      	add	r3, r2
 802190a:	693a      	ldr	r2, [r7, #16]
 802190c:	429a      	cmp	r2, r3
 802190e:	d207      	bcs.n	8021920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8021910:	f00a fef8 	bl	802c704 <__errno>
 8021914:	4603      	mov	r3, r0
 8021916:	220c      	movs	r2, #12
 8021918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802191a:	f04f 33ff 	mov.w	r3, #4294967295
 802191e:	e009      	b.n	8021934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8021920:	4b08      	ldr	r3, [pc, #32]	; (8021944 <_sbrk+0x64>)
 8021922:	681b      	ldr	r3, [r3, #0]
 8021924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8021926:	4b07      	ldr	r3, [pc, #28]	; (8021944 <_sbrk+0x64>)
 8021928:	681a      	ldr	r2, [r3, #0]
 802192a:	687b      	ldr	r3, [r7, #4]
 802192c:	4413      	add	r3, r2
 802192e:	4a05      	ldr	r2, [pc, #20]	; (8021944 <_sbrk+0x64>)
 8021930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8021932:	68fb      	ldr	r3, [r7, #12]
}
 8021934:	4618      	mov	r0, r3
 8021936:	3718      	adds	r7, #24
 8021938:	46bd      	mov	sp, r7
 802193a:	bd80      	pop	{r7, pc}
 802193c:	20030000 	.word	0x20030000
 8021940:	00000400 	.word	0x00000400
 8021944:	20000450 	.word	0x20000450
 8021948:	20000da0 	.word	0x20000da0

0802194c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 802194c:	b480      	push	{r7}
 802194e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8021950:	4b07      	ldr	r3, [pc, #28]	; (8021970 <SystemInit+0x24>)
 8021952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021956:	4a06      	ldr	r2, [pc, #24]	; (8021970 <SystemInit+0x24>)
 8021958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802195c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8021960:	4b03      	ldr	r3, [pc, #12]	; (8021970 <SystemInit+0x24>)
 8021962:	4a04      	ldr	r2, [pc, #16]	; (8021974 <SystemInit+0x28>)
 8021964:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8021966:	bf00      	nop
 8021968:	46bd      	mov	sp, r7
 802196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802196e:	4770      	bx	lr
 8021970:	e000ed00 	.word	0xe000ed00
 8021974:	08020000 	.word	0x08020000

08021978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8021978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80219b0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 802197c:	480d      	ldr	r0, [pc, #52]	; (80219b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 802197e:	490e      	ldr	r1, [pc, #56]	; (80219b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8021980:	4a0e      	ldr	r2, [pc, #56]	; (80219bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8021982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8021984:	e002      	b.n	802198c <LoopCopyDataInit>

08021986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8021986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8021988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802198a:	3304      	adds	r3, #4

0802198c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802198c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802198e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8021990:	d3f9      	bcc.n	8021986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8021992:	4a0b      	ldr	r2, [pc, #44]	; (80219c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8021994:	4c0b      	ldr	r4, [pc, #44]	; (80219c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8021996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8021998:	e001      	b.n	802199e <LoopFillZerobss>

0802199a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802199a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802199c:	3204      	adds	r2, #4

0802199e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802199e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80219a0:	d3fb      	bcc.n	802199a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80219a2:	f7ff ffd3 	bl	802194c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80219a6:	f00a feb3 	bl	802c710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80219aa:	f7fe fdf3 	bl	8020594 <main>
  bx  lr    
 80219ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80219b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80219b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80219b8:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80219bc:	0802fab8 	.word	0x0802fab8
  ldr r2, =_sbss
 80219c0:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80219c4:	20000d9c 	.word	0x20000d9c

080219c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80219c8:	e7fe      	b.n	80219c8 <ADC_IRQHandler>

080219ca <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80219ca:	b580      	push	{r7, lr}
 80219cc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80219ce:	f000 fa5d 	bl	8021e8c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80219d2:	20ca      	movs	r0, #202	; 0xca
 80219d4:	f000 f95d 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80219d8:	20c3      	movs	r0, #195	; 0xc3
 80219da:	f000 f967 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80219de:	2008      	movs	r0, #8
 80219e0:	f000 f964 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80219e4:	2050      	movs	r0, #80	; 0x50
 80219e6:	f000 f961 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80219ea:	20cf      	movs	r0, #207	; 0xcf
 80219ec:	f000 f951 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80219f0:	2000      	movs	r0, #0
 80219f2:	f000 f95b 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80219f6:	20c1      	movs	r0, #193	; 0xc1
 80219f8:	f000 f958 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80219fc:	2030      	movs	r0, #48	; 0x30
 80219fe:	f000 f955 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8021a02:	20ed      	movs	r0, #237	; 0xed
 8021a04:	f000 f945 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8021a08:	2064      	movs	r0, #100	; 0x64
 8021a0a:	f000 f94f 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8021a0e:	2003      	movs	r0, #3
 8021a10:	f000 f94c 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8021a14:	2012      	movs	r0, #18
 8021a16:	f000 f949 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8021a1a:	2081      	movs	r0, #129	; 0x81
 8021a1c:	f000 f946 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8021a20:	20e8      	movs	r0, #232	; 0xe8
 8021a22:	f000 f936 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8021a26:	2085      	movs	r0, #133	; 0x85
 8021a28:	f000 f940 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021a2c:	2000      	movs	r0, #0
 8021a2e:	f000 f93d 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8021a32:	2078      	movs	r0, #120	; 0x78
 8021a34:	f000 f93a 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8021a38:	20cb      	movs	r0, #203	; 0xcb
 8021a3a:	f000 f92a 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8021a3e:	2039      	movs	r0, #57	; 0x39
 8021a40:	f000 f934 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8021a44:	202c      	movs	r0, #44	; 0x2c
 8021a46:	f000 f931 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021a4a:	2000      	movs	r0, #0
 8021a4c:	f000 f92e 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8021a50:	2034      	movs	r0, #52	; 0x34
 8021a52:	f000 f92b 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8021a56:	2002      	movs	r0, #2
 8021a58:	f000 f928 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8021a5c:	20f7      	movs	r0, #247	; 0xf7
 8021a5e:	f000 f918 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8021a62:	2020      	movs	r0, #32
 8021a64:	f000 f922 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8021a68:	20ea      	movs	r0, #234	; 0xea
 8021a6a:	f000 f912 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021a6e:	2000      	movs	r0, #0
 8021a70:	f000 f91c 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021a74:	2000      	movs	r0, #0
 8021a76:	f000 f919 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8021a7a:	20b1      	movs	r0, #177	; 0xb1
 8021a7c:	f000 f909 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021a80:	2000      	movs	r0, #0
 8021a82:	f000 f913 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8021a86:	201b      	movs	r0, #27
 8021a88:	f000 f910 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8021a8c:	20b6      	movs	r0, #182	; 0xb6
 8021a8e:	f000 f900 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8021a92:	200a      	movs	r0, #10
 8021a94:	f000 f90a 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8021a98:	20a2      	movs	r0, #162	; 0xa2
 8021a9a:	f000 f907 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8021a9e:	20c0      	movs	r0, #192	; 0xc0
 8021aa0:	f000 f8f7 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8021aa4:	2010      	movs	r0, #16
 8021aa6:	f000 f901 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8021aaa:	20c1      	movs	r0, #193	; 0xc1
 8021aac:	f000 f8f1 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8021ab0:	2010      	movs	r0, #16
 8021ab2:	f000 f8fb 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8021ab6:	20c5      	movs	r0, #197	; 0xc5
 8021ab8:	f000 f8eb 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8021abc:	2045      	movs	r0, #69	; 0x45
 8021abe:	f000 f8f5 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8021ac2:	2015      	movs	r0, #21
 8021ac4:	f000 f8f2 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8021ac8:	20c7      	movs	r0, #199	; 0xc7
 8021aca:	f000 f8e2 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8021ace:	2090      	movs	r0, #144	; 0x90
 8021ad0:	f000 f8ec 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8021ad4:	2036      	movs	r0, #54	; 0x36
 8021ad6:	f000 f8dc 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8021ada:	20c8      	movs	r0, #200	; 0xc8
 8021adc:	f000 f8e6 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8021ae0:	20f2      	movs	r0, #242	; 0xf2
 8021ae2:	f000 f8d6 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021ae6:	2000      	movs	r0, #0
 8021ae8:	f000 f8e0 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8021aec:	20b0      	movs	r0, #176	; 0xb0
 8021aee:	f000 f8d0 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8021af2:	20c2      	movs	r0, #194	; 0xc2
 8021af4:	f000 f8da 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8021af8:	20b6      	movs	r0, #182	; 0xb6
 8021afa:	f000 f8ca 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8021afe:	200a      	movs	r0, #10
 8021b00:	f000 f8d4 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8021b04:	20a7      	movs	r0, #167	; 0xa7
 8021b06:	f000 f8d1 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8021b0a:	2027      	movs	r0, #39	; 0x27
 8021b0c:	f000 f8ce 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8021b10:	2004      	movs	r0, #4
 8021b12:	f000 f8cb 	bl	8021cac <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8021b16:	202a      	movs	r0, #42	; 0x2a
 8021b18:	f000 f8bb 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021b1c:	2000      	movs	r0, #0
 8021b1e:	f000 f8c5 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021b22:	2000      	movs	r0, #0
 8021b24:	f000 f8c2 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021b28:	2000      	movs	r0, #0
 8021b2a:	f000 f8bf 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8021b2e:	20ef      	movs	r0, #239	; 0xef
 8021b30:	f000 f8bc 	bl	8021cac <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8021b34:	202b      	movs	r0, #43	; 0x2b
 8021b36:	f000 f8ac 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021b3a:	2000      	movs	r0, #0
 8021b3c:	f000 f8b6 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021b40:	2000      	movs	r0, #0
 8021b42:	f000 f8b3 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8021b46:	2001      	movs	r0, #1
 8021b48:	f000 f8b0 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8021b4c:	203f      	movs	r0, #63	; 0x3f
 8021b4e:	f000 f8ad 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8021b52:	20f6      	movs	r0, #246	; 0xf6
 8021b54:	f000 f89d 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8021b58:	2001      	movs	r0, #1
 8021b5a:	f000 f8a7 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021b5e:	2000      	movs	r0, #0
 8021b60:	f000 f8a4 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8021b64:	2006      	movs	r0, #6
 8021b66:	f000 f8a1 	bl	8021cac <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8021b6a:	202c      	movs	r0, #44	; 0x2c
 8021b6c:	f000 f891 	bl	8021c92 <ili9341_WriteReg>
  LCD_Delay(200);
 8021b70:	20c8      	movs	r0, #200	; 0xc8
 8021b72:	f000 fa79 	bl	8022068 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8021b76:	2026      	movs	r0, #38	; 0x26
 8021b78:	f000 f88b 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8021b7c:	2001      	movs	r0, #1
 8021b7e:	f000 f895 	bl	8021cac <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8021b82:	20e0      	movs	r0, #224	; 0xe0
 8021b84:	f000 f885 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8021b88:	200f      	movs	r0, #15
 8021b8a:	f000 f88f 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8021b8e:	2029      	movs	r0, #41	; 0x29
 8021b90:	f000 f88c 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8021b94:	2024      	movs	r0, #36	; 0x24
 8021b96:	f000 f889 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8021b9a:	200c      	movs	r0, #12
 8021b9c:	f000 f886 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8021ba0:	200e      	movs	r0, #14
 8021ba2:	f000 f883 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8021ba6:	2009      	movs	r0, #9
 8021ba8:	f000 f880 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8021bac:	204e      	movs	r0, #78	; 0x4e
 8021bae:	f000 f87d 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8021bb2:	2078      	movs	r0, #120	; 0x78
 8021bb4:	f000 f87a 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8021bb8:	203c      	movs	r0, #60	; 0x3c
 8021bba:	f000 f877 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8021bbe:	2009      	movs	r0, #9
 8021bc0:	f000 f874 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8021bc4:	2013      	movs	r0, #19
 8021bc6:	f000 f871 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8021bca:	2005      	movs	r0, #5
 8021bcc:	f000 f86e 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8021bd0:	2017      	movs	r0, #23
 8021bd2:	f000 f86b 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8021bd6:	2011      	movs	r0, #17
 8021bd8:	f000 f868 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021bdc:	2000      	movs	r0, #0
 8021bde:	f000 f865 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8021be2:	20e1      	movs	r0, #225	; 0xe1
 8021be4:	f000 f855 	bl	8021c92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021be8:	2000      	movs	r0, #0
 8021bea:	f000 f85f 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8021bee:	2016      	movs	r0, #22
 8021bf0:	f000 f85c 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8021bf4:	201b      	movs	r0, #27
 8021bf6:	f000 f859 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8021bfa:	2004      	movs	r0, #4
 8021bfc:	f000 f856 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8021c00:	2011      	movs	r0, #17
 8021c02:	f000 f853 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8021c06:	2007      	movs	r0, #7
 8021c08:	f000 f850 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8021c0c:	2031      	movs	r0, #49	; 0x31
 8021c0e:	f000 f84d 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8021c12:	2033      	movs	r0, #51	; 0x33
 8021c14:	f000 f84a 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8021c18:	2042      	movs	r0, #66	; 0x42
 8021c1a:	f000 f847 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8021c1e:	2005      	movs	r0, #5
 8021c20:	f000 f844 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8021c24:	200c      	movs	r0, #12
 8021c26:	f000 f841 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8021c2a:	200a      	movs	r0, #10
 8021c2c:	f000 f83e 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8021c30:	2028      	movs	r0, #40	; 0x28
 8021c32:	f000 f83b 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8021c36:	202f      	movs	r0, #47	; 0x2f
 8021c38:	f000 f838 	bl	8021cac <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8021c3c:	200f      	movs	r0, #15
 8021c3e:	f000 f835 	bl	8021cac <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8021c42:	2011      	movs	r0, #17
 8021c44:	f000 f825 	bl	8021c92 <ili9341_WriteReg>
  LCD_Delay(200);
 8021c48:	20c8      	movs	r0, #200	; 0xc8
 8021c4a:	f000 fa0d 	bl	8022068 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8021c4e:	2029      	movs	r0, #41	; 0x29
 8021c50:	f000 f81f 	bl	8021c92 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8021c54:	202c      	movs	r0, #44	; 0x2c
 8021c56:	f000 f81c 	bl	8021c92 <ili9341_WriteReg>
}
 8021c5a:	bf00      	nop
 8021c5c:	bd80      	pop	{r7, pc}

08021c5e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8021c5e:	b580      	push	{r7, lr}
 8021c60:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8021c62:	f000 f913 	bl	8021e8c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8021c66:	2103      	movs	r1, #3
 8021c68:	20d3      	movs	r0, #211	; 0xd3
 8021c6a:	f000 f82c 	bl	8021cc6 <ili9341_ReadData>
 8021c6e:	4603      	mov	r3, r0
 8021c70:	b29b      	uxth	r3, r3
}
 8021c72:	4618      	mov	r0, r3
 8021c74:	bd80      	pop	{r7, pc}

08021c76 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8021c76:	b580      	push	{r7, lr}
 8021c78:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8021c7a:	2029      	movs	r0, #41	; 0x29
 8021c7c:	f000 f809 	bl	8021c92 <ili9341_WriteReg>
}
 8021c80:	bf00      	nop
 8021c82:	bd80      	pop	{r7, pc}

08021c84 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8021c84:	b580      	push	{r7, lr}
 8021c86:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8021c88:	2028      	movs	r0, #40	; 0x28
 8021c8a:	f000 f802 	bl	8021c92 <ili9341_WriteReg>
}
 8021c8e:	bf00      	nop
 8021c90:	bd80      	pop	{r7, pc}

08021c92 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8021c92:	b580      	push	{r7, lr}
 8021c94:	b082      	sub	sp, #8
 8021c96:	af00      	add	r7, sp, #0
 8021c98:	4603      	mov	r3, r0
 8021c9a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8021c9c:	79fb      	ldrb	r3, [r7, #7]
 8021c9e:	4618      	mov	r0, r3
 8021ca0:	f000 f98e 	bl	8021fc0 <LCD_IO_WriteReg>
}
 8021ca4:	bf00      	nop
 8021ca6:	3708      	adds	r7, #8
 8021ca8:	46bd      	mov	sp, r7
 8021caa:	bd80      	pop	{r7, pc}

08021cac <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8021cac:	b580      	push	{r7, lr}
 8021cae:	b082      	sub	sp, #8
 8021cb0:	af00      	add	r7, sp, #0
 8021cb2:	4603      	mov	r3, r0
 8021cb4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8021cb6:	88fb      	ldrh	r3, [r7, #6]
 8021cb8:	4618      	mov	r0, r3
 8021cba:	f000 f95f 	bl	8021f7c <LCD_IO_WriteData>
}
 8021cbe:	bf00      	nop
 8021cc0:	3708      	adds	r7, #8
 8021cc2:	46bd      	mov	sp, r7
 8021cc4:	bd80      	pop	{r7, pc}

08021cc6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8021cc6:	b580      	push	{r7, lr}
 8021cc8:	b082      	sub	sp, #8
 8021cca:	af00      	add	r7, sp, #0
 8021ccc:	4603      	mov	r3, r0
 8021cce:	460a      	mov	r2, r1
 8021cd0:	80fb      	strh	r3, [r7, #6]
 8021cd2:	4613      	mov	r3, r2
 8021cd4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8021cd6:	797a      	ldrb	r2, [r7, #5]
 8021cd8:	88fb      	ldrh	r3, [r7, #6]
 8021cda:	4611      	mov	r1, r2
 8021cdc:	4618      	mov	r0, r3
 8021cde:	f000 f991 	bl	8022004 <LCD_IO_ReadData>
 8021ce2:	4603      	mov	r3, r0
}
 8021ce4:	4618      	mov	r0, r3
 8021ce6:	3708      	adds	r7, #8
 8021ce8:	46bd      	mov	sp, r7
 8021cea:	bd80      	pop	{r7, pc}

08021cec <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8021cec:	b480      	push	{r7}
 8021cee:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8021cf0:	23f0      	movs	r3, #240	; 0xf0
}
 8021cf2:	4618      	mov	r0, r3
 8021cf4:	46bd      	mov	sp, r7
 8021cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cfa:	4770      	bx	lr

08021cfc <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8021cfc:	b480      	push	{r7}
 8021cfe:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8021d00:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8021d04:	4618      	mov	r0, r3
 8021d06:	46bd      	mov	sp, r7
 8021d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d0c:	4770      	bx	lr
	...

08021d10 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8021d10:	b580      	push	{r7, lr}
 8021d12:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8021d14:	4819      	ldr	r0, [pc, #100]	; (8021d7c <SPIx_Init+0x6c>)
 8021d16:	f005 ff76 	bl	8027c06 <HAL_SPI_GetState>
 8021d1a:	4603      	mov	r3, r0
 8021d1c:	2b00      	cmp	r3, #0
 8021d1e:	d12b      	bne.n	8021d78 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8021d20:	4b16      	ldr	r3, [pc, #88]	; (8021d7c <SPIx_Init+0x6c>)
 8021d22:	4a17      	ldr	r2, [pc, #92]	; (8021d80 <SPIx_Init+0x70>)
 8021d24:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8021d26:	4b15      	ldr	r3, [pc, #84]	; (8021d7c <SPIx_Init+0x6c>)
 8021d28:	2218      	movs	r2, #24
 8021d2a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8021d2c:	4b13      	ldr	r3, [pc, #76]	; (8021d7c <SPIx_Init+0x6c>)
 8021d2e:	2200      	movs	r2, #0
 8021d30:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8021d32:	4b12      	ldr	r3, [pc, #72]	; (8021d7c <SPIx_Init+0x6c>)
 8021d34:	2200      	movs	r2, #0
 8021d36:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8021d38:	4b10      	ldr	r3, [pc, #64]	; (8021d7c <SPIx_Init+0x6c>)
 8021d3a:	2200      	movs	r2, #0
 8021d3c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8021d3e:	4b0f      	ldr	r3, [pc, #60]	; (8021d7c <SPIx_Init+0x6c>)
 8021d40:	2200      	movs	r2, #0
 8021d42:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8021d44:	4b0d      	ldr	r3, [pc, #52]	; (8021d7c <SPIx_Init+0x6c>)
 8021d46:	2207      	movs	r2, #7
 8021d48:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8021d4a:	4b0c      	ldr	r3, [pc, #48]	; (8021d7c <SPIx_Init+0x6c>)
 8021d4c:	2200      	movs	r2, #0
 8021d4e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8021d50:	4b0a      	ldr	r3, [pc, #40]	; (8021d7c <SPIx_Init+0x6c>)
 8021d52:	2200      	movs	r2, #0
 8021d54:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8021d56:	4b09      	ldr	r3, [pc, #36]	; (8021d7c <SPIx_Init+0x6c>)
 8021d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8021d5c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8021d5e:	4b07      	ldr	r3, [pc, #28]	; (8021d7c <SPIx_Init+0x6c>)
 8021d60:	2200      	movs	r2, #0
 8021d62:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8021d64:	4b05      	ldr	r3, [pc, #20]	; (8021d7c <SPIx_Init+0x6c>)
 8021d66:	f44f 7282 	mov.w	r2, #260	; 0x104
 8021d6a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8021d6c:	4803      	ldr	r0, [pc, #12]	; (8021d7c <SPIx_Init+0x6c>)
 8021d6e:	f000 f853 	bl	8021e18 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8021d72:	4802      	ldr	r0, [pc, #8]	; (8021d7c <SPIx_Init+0x6c>)
 8021d74:	f005 faa7 	bl	80272c6 <HAL_SPI_Init>
  } 
}
 8021d78:	bf00      	nop
 8021d7a:	bd80      	pop	{r7, pc}
 8021d7c:	20000454 	.word	0x20000454
 8021d80:	40015000 	.word	0x40015000

08021d84 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8021d84:	b580      	push	{r7, lr}
 8021d86:	b084      	sub	sp, #16
 8021d88:	af00      	add	r7, sp, #0
 8021d8a:	4603      	mov	r3, r0
 8021d8c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8021d8e:	2300      	movs	r3, #0
 8021d90:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8021d92:	79fb      	ldrb	r3, [r7, #7]
 8021d94:	b29a      	uxth	r2, r3
 8021d96:	4b09      	ldr	r3, [pc, #36]	; (8021dbc <SPIx_Read+0x38>)
 8021d98:	681b      	ldr	r3, [r3, #0]
 8021d9a:	f107 0108 	add.w	r1, r7, #8
 8021d9e:	4808      	ldr	r0, [pc, #32]	; (8021dc0 <SPIx_Read+0x3c>)
 8021da0:	f005 fc7e 	bl	80276a0 <HAL_SPI_Receive>
 8021da4:	4603      	mov	r3, r0
 8021da6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8021da8:	7bfb      	ldrb	r3, [r7, #15]
 8021daa:	2b00      	cmp	r3, #0
 8021dac:	d001      	beq.n	8021db2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8021dae:	f000 f827 	bl	8021e00 <SPIx_Error>
  }
  
  return readvalue;
 8021db2:	68bb      	ldr	r3, [r7, #8]
}
 8021db4:	4618      	mov	r0, r3
 8021db6:	3710      	adds	r7, #16
 8021db8:	46bd      	mov	sp, r7
 8021dba:	bd80      	pop	{r7, pc}
 8021dbc:	2000003c 	.word	0x2000003c
 8021dc0:	20000454 	.word	0x20000454

08021dc4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8021dc4:	b580      	push	{r7, lr}
 8021dc6:	b084      	sub	sp, #16
 8021dc8:	af00      	add	r7, sp, #0
 8021dca:	4603      	mov	r3, r0
 8021dcc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8021dce:	2300      	movs	r3, #0
 8021dd0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8021dd2:	4b09      	ldr	r3, [pc, #36]	; (8021df8 <SPIx_Write+0x34>)
 8021dd4:	681b      	ldr	r3, [r3, #0]
 8021dd6:	1db9      	adds	r1, r7, #6
 8021dd8:	2201      	movs	r2, #1
 8021dda:	4808      	ldr	r0, [pc, #32]	; (8021dfc <SPIx_Write+0x38>)
 8021ddc:	f005 fb24 	bl	8027428 <HAL_SPI_Transmit>
 8021de0:	4603      	mov	r3, r0
 8021de2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8021de4:	7bfb      	ldrb	r3, [r7, #15]
 8021de6:	2b00      	cmp	r3, #0
 8021de8:	d001      	beq.n	8021dee <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8021dea:	f000 f809 	bl	8021e00 <SPIx_Error>
  }
}
 8021dee:	bf00      	nop
 8021df0:	3710      	adds	r7, #16
 8021df2:	46bd      	mov	sp, r7
 8021df4:	bd80      	pop	{r7, pc}
 8021df6:	bf00      	nop
 8021df8:	2000003c 	.word	0x2000003c
 8021dfc:	20000454 	.word	0x20000454

08021e00 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8021e00:	b580      	push	{r7, lr}
 8021e02:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8021e04:	4803      	ldr	r0, [pc, #12]	; (8021e14 <SPIx_Error+0x14>)
 8021e06:	f005 fae7 	bl	80273d8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8021e0a:	f7ff ff81 	bl	8021d10 <SPIx_Init>
}
 8021e0e:	bf00      	nop
 8021e10:	bd80      	pop	{r7, pc}
 8021e12:	bf00      	nop
 8021e14:	20000454 	.word	0x20000454

08021e18 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8021e18:	b580      	push	{r7, lr}
 8021e1a:	b08a      	sub	sp, #40	; 0x28
 8021e1c:	af00      	add	r7, sp, #0
 8021e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8021e20:	2300      	movs	r3, #0
 8021e22:	613b      	str	r3, [r7, #16]
 8021e24:	4b17      	ldr	r3, [pc, #92]	; (8021e84 <SPIx_MspInit+0x6c>)
 8021e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021e28:	4a16      	ldr	r2, [pc, #88]	; (8021e84 <SPIx_MspInit+0x6c>)
 8021e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021e2e:	6453      	str	r3, [r2, #68]	; 0x44
 8021e30:	4b14      	ldr	r3, [pc, #80]	; (8021e84 <SPIx_MspInit+0x6c>)
 8021e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021e38:	613b      	str	r3, [r7, #16]
 8021e3a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8021e3c:	2300      	movs	r3, #0
 8021e3e:	60fb      	str	r3, [r7, #12]
 8021e40:	4b10      	ldr	r3, [pc, #64]	; (8021e84 <SPIx_MspInit+0x6c>)
 8021e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e44:	4a0f      	ldr	r2, [pc, #60]	; (8021e84 <SPIx_MspInit+0x6c>)
 8021e46:	f043 0320 	orr.w	r3, r3, #32
 8021e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8021e4c:	4b0d      	ldr	r3, [pc, #52]	; (8021e84 <SPIx_MspInit+0x6c>)
 8021e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e50:	f003 0320 	and.w	r3, r3, #32
 8021e54:	60fb      	str	r3, [r7, #12]
 8021e56:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8021e58:	f44f 7360 	mov.w	r3, #896	; 0x380
 8021e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8021e5e:	2302      	movs	r3, #2
 8021e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8021e62:	2302      	movs	r3, #2
 8021e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8021e66:	2301      	movs	r3, #1
 8021e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8021e6a:	2305      	movs	r3, #5
 8021e6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8021e6e:	f107 0314 	add.w	r3, r7, #20
 8021e72:	4619      	mov	r1, r3
 8021e74:	4804      	ldr	r0, [pc, #16]	; (8021e88 <SPIx_MspInit+0x70>)
 8021e76:	f001 fe47 	bl	8023b08 <HAL_GPIO_Init>
}
 8021e7a:	bf00      	nop
 8021e7c:	3728      	adds	r7, #40	; 0x28
 8021e7e:	46bd      	mov	sp, r7
 8021e80:	bd80      	pop	{r7, pc}
 8021e82:	bf00      	nop
 8021e84:	40023800 	.word	0x40023800
 8021e88:	40021400 	.word	0x40021400

08021e8c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8021e8c:	b580      	push	{r7, lr}
 8021e8e:	b088      	sub	sp, #32
 8021e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8021e92:	4b36      	ldr	r3, [pc, #216]	; (8021f6c <LCD_IO_Init+0xe0>)
 8021e94:	781b      	ldrb	r3, [r3, #0]
 8021e96:	2b00      	cmp	r3, #0
 8021e98:	d164      	bne.n	8021f64 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8021e9a:	4b34      	ldr	r3, [pc, #208]	; (8021f6c <LCD_IO_Init+0xe0>)
 8021e9c:	2201      	movs	r2, #1
 8021e9e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8021ea0:	2300      	movs	r3, #0
 8021ea2:	60bb      	str	r3, [r7, #8]
 8021ea4:	4b32      	ldr	r3, [pc, #200]	; (8021f70 <LCD_IO_Init+0xe4>)
 8021ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ea8:	4a31      	ldr	r2, [pc, #196]	; (8021f70 <LCD_IO_Init+0xe4>)
 8021eaa:	f043 0308 	orr.w	r3, r3, #8
 8021eae:	6313      	str	r3, [r2, #48]	; 0x30
 8021eb0:	4b2f      	ldr	r3, [pc, #188]	; (8021f70 <LCD_IO_Init+0xe4>)
 8021eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021eb4:	f003 0308 	and.w	r3, r3, #8
 8021eb8:	60bb      	str	r3, [r7, #8]
 8021eba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8021ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021ec0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8021ec2:	2301      	movs	r3, #1
 8021ec4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8021ec6:	2300      	movs	r3, #0
 8021ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8021eca:	2302      	movs	r3, #2
 8021ecc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8021ece:	f107 030c 	add.w	r3, r7, #12
 8021ed2:	4619      	mov	r1, r3
 8021ed4:	4827      	ldr	r0, [pc, #156]	; (8021f74 <LCD_IO_Init+0xe8>)
 8021ed6:	f001 fe17 	bl	8023b08 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8021eda:	2300      	movs	r3, #0
 8021edc:	607b      	str	r3, [r7, #4]
 8021ede:	4b24      	ldr	r3, [pc, #144]	; (8021f70 <LCD_IO_Init+0xe4>)
 8021ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ee2:	4a23      	ldr	r2, [pc, #140]	; (8021f70 <LCD_IO_Init+0xe4>)
 8021ee4:	f043 0308 	orr.w	r3, r3, #8
 8021ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8021eea:	4b21      	ldr	r3, [pc, #132]	; (8021f70 <LCD_IO_Init+0xe4>)
 8021eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021eee:	f003 0308 	and.w	r3, r3, #8
 8021ef2:	607b      	str	r3, [r7, #4]
 8021ef4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8021ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021efa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8021efc:	2301      	movs	r3, #1
 8021efe:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8021f00:	2300      	movs	r3, #0
 8021f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8021f04:	2302      	movs	r3, #2
 8021f06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8021f08:	f107 030c 	add.w	r3, r7, #12
 8021f0c:	4619      	mov	r1, r3
 8021f0e:	4819      	ldr	r0, [pc, #100]	; (8021f74 <LCD_IO_Init+0xe8>)
 8021f10:	f001 fdfa 	bl	8023b08 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8021f14:	2300      	movs	r3, #0
 8021f16:	603b      	str	r3, [r7, #0]
 8021f18:	4b15      	ldr	r3, [pc, #84]	; (8021f70 <LCD_IO_Init+0xe4>)
 8021f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f1c:	4a14      	ldr	r2, [pc, #80]	; (8021f70 <LCD_IO_Init+0xe4>)
 8021f1e:	f043 0304 	orr.w	r3, r3, #4
 8021f22:	6313      	str	r3, [r2, #48]	; 0x30
 8021f24:	4b12      	ldr	r3, [pc, #72]	; (8021f70 <LCD_IO_Init+0xe4>)
 8021f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f28:	f003 0304 	and.w	r3, r3, #4
 8021f2c:	603b      	str	r3, [r7, #0]
 8021f2e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8021f30:	2304      	movs	r3, #4
 8021f32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8021f34:	2301      	movs	r3, #1
 8021f36:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8021f38:	2300      	movs	r3, #0
 8021f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8021f3c:	2302      	movs	r3, #2
 8021f3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8021f40:	f107 030c 	add.w	r3, r7, #12
 8021f44:	4619      	mov	r1, r3
 8021f46:	480c      	ldr	r0, [pc, #48]	; (8021f78 <LCD_IO_Init+0xec>)
 8021f48:	f001 fdde 	bl	8023b08 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8021f4c:	2200      	movs	r2, #0
 8021f4e:	2104      	movs	r1, #4
 8021f50:	4809      	ldr	r0, [pc, #36]	; (8021f78 <LCD_IO_Init+0xec>)
 8021f52:	f002 f891 	bl	8024078 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8021f56:	2201      	movs	r2, #1
 8021f58:	2104      	movs	r1, #4
 8021f5a:	4807      	ldr	r0, [pc, #28]	; (8021f78 <LCD_IO_Init+0xec>)
 8021f5c:	f002 f88c 	bl	8024078 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8021f60:	f7ff fed6 	bl	8021d10 <SPIx_Init>
  }
}
 8021f64:	bf00      	nop
 8021f66:	3720      	adds	r7, #32
 8021f68:	46bd      	mov	sp, r7
 8021f6a:	bd80      	pop	{r7, pc}
 8021f6c:	200004ac 	.word	0x200004ac
 8021f70:	40023800 	.word	0x40023800
 8021f74:	40020c00 	.word	0x40020c00
 8021f78:	40020800 	.word	0x40020800

08021f7c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8021f7c:	b580      	push	{r7, lr}
 8021f7e:	b082      	sub	sp, #8
 8021f80:	af00      	add	r7, sp, #0
 8021f82:	4603      	mov	r3, r0
 8021f84:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8021f86:	2201      	movs	r2, #1
 8021f88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021f8c:	480a      	ldr	r0, [pc, #40]	; (8021fb8 <LCD_IO_WriteData+0x3c>)
 8021f8e:	f002 f873 	bl	8024078 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8021f92:	2200      	movs	r2, #0
 8021f94:	2104      	movs	r1, #4
 8021f96:	4809      	ldr	r0, [pc, #36]	; (8021fbc <LCD_IO_WriteData+0x40>)
 8021f98:	f002 f86e 	bl	8024078 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8021f9c:	88fb      	ldrh	r3, [r7, #6]
 8021f9e:	4618      	mov	r0, r3
 8021fa0:	f7ff ff10 	bl	8021dc4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8021fa4:	2201      	movs	r2, #1
 8021fa6:	2104      	movs	r1, #4
 8021fa8:	4804      	ldr	r0, [pc, #16]	; (8021fbc <LCD_IO_WriteData+0x40>)
 8021faa:	f002 f865 	bl	8024078 <HAL_GPIO_WritePin>
}
 8021fae:	bf00      	nop
 8021fb0:	3708      	adds	r7, #8
 8021fb2:	46bd      	mov	sp, r7
 8021fb4:	bd80      	pop	{r7, pc}
 8021fb6:	bf00      	nop
 8021fb8:	40020c00 	.word	0x40020c00
 8021fbc:	40020800 	.word	0x40020800

08021fc0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8021fc0:	b580      	push	{r7, lr}
 8021fc2:	b082      	sub	sp, #8
 8021fc4:	af00      	add	r7, sp, #0
 8021fc6:	4603      	mov	r3, r0
 8021fc8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8021fca:	2200      	movs	r2, #0
 8021fcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021fd0:	480a      	ldr	r0, [pc, #40]	; (8021ffc <LCD_IO_WriteReg+0x3c>)
 8021fd2:	f002 f851 	bl	8024078 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8021fd6:	2200      	movs	r2, #0
 8021fd8:	2104      	movs	r1, #4
 8021fda:	4809      	ldr	r0, [pc, #36]	; (8022000 <LCD_IO_WriteReg+0x40>)
 8021fdc:	f002 f84c 	bl	8024078 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8021fe0:	79fb      	ldrb	r3, [r7, #7]
 8021fe2:	b29b      	uxth	r3, r3
 8021fe4:	4618      	mov	r0, r3
 8021fe6:	f7ff feed 	bl	8021dc4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8021fea:	2201      	movs	r2, #1
 8021fec:	2104      	movs	r1, #4
 8021fee:	4804      	ldr	r0, [pc, #16]	; (8022000 <LCD_IO_WriteReg+0x40>)
 8021ff0:	f002 f842 	bl	8024078 <HAL_GPIO_WritePin>
}
 8021ff4:	bf00      	nop
 8021ff6:	3708      	adds	r7, #8
 8021ff8:	46bd      	mov	sp, r7
 8021ffa:	bd80      	pop	{r7, pc}
 8021ffc:	40020c00 	.word	0x40020c00
 8022000:	40020800 	.word	0x40020800

08022004 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8022004:	b580      	push	{r7, lr}
 8022006:	b084      	sub	sp, #16
 8022008:	af00      	add	r7, sp, #0
 802200a:	4603      	mov	r3, r0
 802200c:	460a      	mov	r2, r1
 802200e:	80fb      	strh	r3, [r7, #6]
 8022010:	4613      	mov	r3, r2
 8022012:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8022014:	2300      	movs	r3, #0
 8022016:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8022018:	2200      	movs	r2, #0
 802201a:	2104      	movs	r1, #4
 802201c:	4810      	ldr	r0, [pc, #64]	; (8022060 <LCD_IO_ReadData+0x5c>)
 802201e:	f002 f82b 	bl	8024078 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8022022:	2200      	movs	r2, #0
 8022024:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022028:	480e      	ldr	r0, [pc, #56]	; (8022064 <LCD_IO_ReadData+0x60>)
 802202a:	f002 f825 	bl	8024078 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 802202e:	88fb      	ldrh	r3, [r7, #6]
 8022030:	4618      	mov	r0, r3
 8022032:	f7ff fec7 	bl	8021dc4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8022036:	797b      	ldrb	r3, [r7, #5]
 8022038:	4618      	mov	r0, r3
 802203a:	f7ff fea3 	bl	8021d84 <SPIx_Read>
 802203e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8022040:	2201      	movs	r2, #1
 8022042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022046:	4807      	ldr	r0, [pc, #28]	; (8022064 <LCD_IO_ReadData+0x60>)
 8022048:	f002 f816 	bl	8024078 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 802204c:	2201      	movs	r2, #1
 802204e:	2104      	movs	r1, #4
 8022050:	4803      	ldr	r0, [pc, #12]	; (8022060 <LCD_IO_ReadData+0x5c>)
 8022052:	f002 f811 	bl	8024078 <HAL_GPIO_WritePin>
  
  return readvalue;
 8022056:	68fb      	ldr	r3, [r7, #12]
}
 8022058:	4618      	mov	r0, r3
 802205a:	3710      	adds	r7, #16
 802205c:	46bd      	mov	sp, r7
 802205e:	bd80      	pop	{r7, pc}
 8022060:	40020800 	.word	0x40020800
 8022064:	40020c00 	.word	0x40020c00

08022068 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8022068:	b580      	push	{r7, lr}
 802206a:	b082      	sub	sp, #8
 802206c:	af00      	add	r7, sp, #0
 802206e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8022070:	6878      	ldr	r0, [r7, #4]
 8022072:	f000 fecd 	bl	8022e10 <HAL_Delay>
}
 8022076:	bf00      	nop
 8022078:	3708      	adds	r7, #8
 802207a:	46bd      	mov	sp, r7
 802207c:	bd80      	pop	{r7, pc}
	...

08022080 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8022080:	b580      	push	{r7, lr}
 8022082:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8022084:	4b2d      	ldr	r3, [pc, #180]	; (802213c <BSP_LCD_Init+0xbc>)
 8022086:	4a2e      	ldr	r2, [pc, #184]	; (8022140 <BSP_LCD_Init+0xc0>)
 8022088:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 802208a:	4b2c      	ldr	r3, [pc, #176]	; (802213c <BSP_LCD_Init+0xbc>)
 802208c:	2209      	movs	r2, #9
 802208e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8022090:	4b2a      	ldr	r3, [pc, #168]	; (802213c <BSP_LCD_Init+0xbc>)
 8022092:	2201      	movs	r2, #1
 8022094:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8022096:	4b29      	ldr	r3, [pc, #164]	; (802213c <BSP_LCD_Init+0xbc>)
 8022098:	221d      	movs	r2, #29
 802209a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 802209c:	4b27      	ldr	r3, [pc, #156]	; (802213c <BSP_LCD_Init+0xbc>)
 802209e:	2203      	movs	r2, #3
 80220a0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80220a2:	4b26      	ldr	r3, [pc, #152]	; (802213c <BSP_LCD_Init+0xbc>)
 80220a4:	f240 120d 	movw	r2, #269	; 0x10d
 80220a8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80220aa:	4b24      	ldr	r3, [pc, #144]	; (802213c <BSP_LCD_Init+0xbc>)
 80220ac:	f240 1243 	movw	r2, #323	; 0x143
 80220b0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80220b2:	4b22      	ldr	r3, [pc, #136]	; (802213c <BSP_LCD_Init+0xbc>)
 80220b4:	f240 1217 	movw	r2, #279	; 0x117
 80220b8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80220ba:	4b20      	ldr	r3, [pc, #128]	; (802213c <BSP_LCD_Init+0xbc>)
 80220bc:	f240 1247 	movw	r2, #327	; 0x147
 80220c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80220c2:	4b1e      	ldr	r3, [pc, #120]	; (802213c <BSP_LCD_Init+0xbc>)
 80220c4:	2200      	movs	r2, #0
 80220c6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80220ca:	4b1c      	ldr	r3, [pc, #112]	; (802213c <BSP_LCD_Init+0xbc>)
 80220cc:	2200      	movs	r2, #0
 80220ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80220d2:	4b1a      	ldr	r3, [pc, #104]	; (802213c <BSP_LCD_Init+0xbc>)
 80220d4:	2200      	movs	r2, #0
 80220d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80220da:	4b1a      	ldr	r3, [pc, #104]	; (8022144 <BSP_LCD_Init+0xc4>)
 80220dc:	2208      	movs	r2, #8
 80220de:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80220e0:	4b18      	ldr	r3, [pc, #96]	; (8022144 <BSP_LCD_Init+0xc4>)
 80220e2:	22c0      	movs	r2, #192	; 0xc0
 80220e4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80220e6:	4b17      	ldr	r3, [pc, #92]	; (8022144 <BSP_LCD_Init+0xc4>)
 80220e8:	2204      	movs	r2, #4
 80220ea:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80220ec:	4b15      	ldr	r3, [pc, #84]	; (8022144 <BSP_LCD_Init+0xc4>)
 80220ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80220f2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80220f4:	4813      	ldr	r0, [pc, #76]	; (8022144 <BSP_LCD_Init+0xc4>)
 80220f6:	f004 fe95 	bl	8026e24 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80220fa:	4b10      	ldr	r3, [pc, #64]	; (802213c <BSP_LCD_Init+0xbc>)
 80220fc:	2200      	movs	r2, #0
 80220fe:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8022100:	4b0e      	ldr	r3, [pc, #56]	; (802213c <BSP_LCD_Init+0xbc>)
 8022102:	2200      	movs	r2, #0
 8022104:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8022106:	4b0d      	ldr	r3, [pc, #52]	; (802213c <BSP_LCD_Init+0xbc>)
 8022108:	2200      	movs	r2, #0
 802210a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 802210c:	4b0b      	ldr	r3, [pc, #44]	; (802213c <BSP_LCD_Init+0xbc>)
 802210e:	2200      	movs	r2, #0
 8022110:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8022112:	f000 fa83 	bl	802261c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8022116:	4809      	ldr	r0, [pc, #36]	; (802213c <BSP_LCD_Init+0xbc>)
 8022118:	f003 fdaa 	bl	8025c70 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 802211c:	4b0a      	ldr	r3, [pc, #40]	; (8022148 <BSP_LCD_Init+0xc8>)
 802211e:	4a0b      	ldr	r2, [pc, #44]	; (802214c <BSP_LCD_Init+0xcc>)
 8022120:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8022122:	4b09      	ldr	r3, [pc, #36]	; (8022148 <BSP_LCD_Init+0xc8>)
 8022124:	681b      	ldr	r3, [r3, #0]
 8022126:	681b      	ldr	r3, [r3, #0]
 8022128:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 802212a:	f000 fc65 	bl	80229f8 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 802212e:	4808      	ldr	r0, [pc, #32]	; (8022150 <BSP_LCD_Init+0xd0>)
 8022130:	f000 f920 	bl	8022374 <BSP_LCD_SetFont>

  return LCD_OK;
 8022134:	2300      	movs	r3, #0
}  
 8022136:	4618      	mov	r0, r3
 8022138:	bd80      	pop	{r7, pc}
 802213a:	bf00      	nop
 802213c:	200004b0 	.word	0x200004b0
 8022140:	40016800 	.word	0x40016800
 8022144:	20000598 	.word	0x20000598
 8022148:	200005e4 	.word	0x200005e4
 802214c:	20000004 	.word	0x20000004
 8022150:	20000040 	.word	0x20000040

08022154 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8022154:	b580      	push	{r7, lr}
 8022156:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8022158:	4b03      	ldr	r3, [pc, #12]	; (8022168 <BSP_LCD_GetXSize+0x14>)
 802215a:	681b      	ldr	r3, [r3, #0]
 802215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802215e:	4798      	blx	r3
 8022160:	4603      	mov	r3, r0
}
 8022162:	4618      	mov	r0, r3
 8022164:	bd80      	pop	{r7, pc}
 8022166:	bf00      	nop
 8022168:	200005e4 	.word	0x200005e4

0802216c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 802216c:	b580      	push	{r7, lr}
 802216e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8022170:	4b03      	ldr	r3, [pc, #12]	; (8022180 <BSP_LCD_GetYSize+0x14>)
 8022172:	681b      	ldr	r3, [r3, #0]
 8022174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022176:	4798      	blx	r3
 8022178:	4603      	mov	r3, r0
}
 802217a:	4618      	mov	r0, r3
 802217c:	bd80      	pop	{r7, pc}
 802217e:	bf00      	nop
 8022180:	200005e4 	.word	0x200005e4

08022184 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8022184:	b580      	push	{r7, lr}
 8022186:	b090      	sub	sp, #64	; 0x40
 8022188:	af00      	add	r7, sp, #0
 802218a:	4603      	mov	r3, r0
 802218c:	6039      	str	r1, [r7, #0]
 802218e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8022190:	2300      	movs	r3, #0
 8022192:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8022194:	f7ff ffde 	bl	8022154 <BSP_LCD_GetXSize>
 8022198:	4603      	mov	r3, r0
 802219a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 802219c:	2300      	movs	r3, #0
 802219e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80221a0:	f7ff ffe4 	bl	802216c <BSP_LCD_GetYSize>
 80221a4:	4603      	mov	r3, r0
 80221a6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80221a8:	2300      	movs	r3, #0
 80221aa:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80221ac:	683b      	ldr	r3, [r7, #0]
 80221ae:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80221b0:	23ff      	movs	r3, #255	; 0xff
 80221b2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80221b4:	2300      	movs	r3, #0
 80221b6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80221b8:	2300      	movs	r3, #0
 80221ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80221be:	2300      	movs	r3, #0
 80221c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80221c4:	2300      	movs	r3, #0
 80221c6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80221ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80221ce:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80221d0:	2307      	movs	r3, #7
 80221d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80221d4:	f7ff ffbe 	bl	8022154 <BSP_LCD_GetXSize>
 80221d8:	4603      	mov	r3, r0
 80221da:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80221dc:	f7ff ffc6 	bl	802216c <BSP_LCD_GetYSize>
 80221e0:	4603      	mov	r3, r0
 80221e2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80221e4:	88fa      	ldrh	r2, [r7, #6]
 80221e6:	f107 030c 	add.w	r3, r7, #12
 80221ea:	4619      	mov	r1, r3
 80221ec:	4814      	ldr	r0, [pc, #80]	; (8022240 <BSP_LCD_LayerDefaultInit+0xbc>)
 80221ee:	f003 fed1 	bl	8025f94 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80221f2:	88fa      	ldrh	r2, [r7, #6]
 80221f4:	4913      	ldr	r1, [pc, #76]	; (8022244 <BSP_LCD_LayerDefaultInit+0xc0>)
 80221f6:	4613      	mov	r3, r2
 80221f8:	005b      	lsls	r3, r3, #1
 80221fa:	4413      	add	r3, r2
 80221fc:	009b      	lsls	r3, r3, #2
 80221fe:	440b      	add	r3, r1
 8022200:	3304      	adds	r3, #4
 8022202:	f04f 32ff 	mov.w	r2, #4294967295
 8022206:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8022208:	88fa      	ldrh	r2, [r7, #6]
 802220a:	490e      	ldr	r1, [pc, #56]	; (8022244 <BSP_LCD_LayerDefaultInit+0xc0>)
 802220c:	4613      	mov	r3, r2
 802220e:	005b      	lsls	r3, r3, #1
 8022210:	4413      	add	r3, r2
 8022212:	009b      	lsls	r3, r3, #2
 8022214:	440b      	add	r3, r1
 8022216:	3308      	adds	r3, #8
 8022218:	4a0b      	ldr	r2, [pc, #44]	; (8022248 <BSP_LCD_LayerDefaultInit+0xc4>)
 802221a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 802221c:	88fa      	ldrh	r2, [r7, #6]
 802221e:	4909      	ldr	r1, [pc, #36]	; (8022244 <BSP_LCD_LayerDefaultInit+0xc0>)
 8022220:	4613      	mov	r3, r2
 8022222:	005b      	lsls	r3, r3, #1
 8022224:	4413      	add	r3, r2
 8022226:	009b      	lsls	r3, r3, #2
 8022228:	440b      	add	r3, r1
 802222a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 802222e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8022230:	4803      	ldr	r0, [pc, #12]	; (8022240 <BSP_LCD_LayerDefaultInit+0xbc>)
 8022232:	f003 ff6b 	bl	802610c <HAL_LTDC_EnableDither>
}
 8022236:	bf00      	nop
 8022238:	3740      	adds	r7, #64	; 0x40
 802223a:	46bd      	mov	sp, r7
 802223c:	bd80      	pop	{r7, pc}
 802223e:	bf00      	nop
 8022240:	200004b0 	.word	0x200004b0
 8022244:	200005cc 	.word	0x200005cc
 8022248:	20000040 	.word	0x20000040

0802224c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 802224c:	b480      	push	{r7}
 802224e:	b083      	sub	sp, #12
 8022250:	af00      	add	r7, sp, #0
 8022252:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8022254:	4a04      	ldr	r2, [pc, #16]	; (8022268 <BSP_LCD_SelectLayer+0x1c>)
 8022256:	687b      	ldr	r3, [r7, #4]
 8022258:	6013      	str	r3, [r2, #0]
}
 802225a:	bf00      	nop
 802225c:	370c      	adds	r7, #12
 802225e:	46bd      	mov	sp, r7
 8022260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022264:	4770      	bx	lr
 8022266:	bf00      	nop
 8022268:	200005c8 	.word	0x200005c8

0802226c <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 802226c:	b480      	push	{r7}
 802226e:	b083      	sub	sp, #12
 8022270:	af00      	add	r7, sp, #0
 8022272:	6078      	str	r0, [r7, #4]
 8022274:	460b      	mov	r3, r1
 8022276:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8022278:	78fb      	ldrb	r3, [r7, #3]
 802227a:	2b01      	cmp	r3, #1
 802227c:	d112      	bne.n	80222a4 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 802227e:	4b19      	ldr	r3, [pc, #100]	; (80222e4 <BSP_LCD_SetLayerVisible+0x78>)
 8022280:	681b      	ldr	r3, [r3, #0]
 8022282:	461a      	mov	r2, r3
 8022284:	687b      	ldr	r3, [r7, #4]
 8022286:	01db      	lsls	r3, r3, #7
 8022288:	4413      	add	r3, r2
 802228a:	3384      	adds	r3, #132	; 0x84
 802228c:	681b      	ldr	r3, [r3, #0]
 802228e:	4a15      	ldr	r2, [pc, #84]	; (80222e4 <BSP_LCD_SetLayerVisible+0x78>)
 8022290:	6812      	ldr	r2, [r2, #0]
 8022292:	4611      	mov	r1, r2
 8022294:	687a      	ldr	r2, [r7, #4]
 8022296:	01d2      	lsls	r2, r2, #7
 8022298:	440a      	add	r2, r1
 802229a:	3284      	adds	r2, #132	; 0x84
 802229c:	f043 0301 	orr.w	r3, r3, #1
 80222a0:	6013      	str	r3, [r2, #0]
 80222a2:	e011      	b.n	80222c8 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 80222a4:	4b0f      	ldr	r3, [pc, #60]	; (80222e4 <BSP_LCD_SetLayerVisible+0x78>)
 80222a6:	681b      	ldr	r3, [r3, #0]
 80222a8:	461a      	mov	r2, r3
 80222aa:	687b      	ldr	r3, [r7, #4]
 80222ac:	01db      	lsls	r3, r3, #7
 80222ae:	4413      	add	r3, r2
 80222b0:	3384      	adds	r3, #132	; 0x84
 80222b2:	681b      	ldr	r3, [r3, #0]
 80222b4:	4a0b      	ldr	r2, [pc, #44]	; (80222e4 <BSP_LCD_SetLayerVisible+0x78>)
 80222b6:	6812      	ldr	r2, [r2, #0]
 80222b8:	4611      	mov	r1, r2
 80222ba:	687a      	ldr	r2, [r7, #4]
 80222bc:	01d2      	lsls	r2, r2, #7
 80222be:	440a      	add	r2, r1
 80222c0:	3284      	adds	r2, #132	; 0x84
 80222c2:	f023 0301 	bic.w	r3, r3, #1
 80222c6:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 80222c8:	4b06      	ldr	r3, [pc, #24]	; (80222e4 <BSP_LCD_SetLayerVisible+0x78>)
 80222ca:	681b      	ldr	r3, [r3, #0]
 80222cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80222ce:	4b05      	ldr	r3, [pc, #20]	; (80222e4 <BSP_LCD_SetLayerVisible+0x78>)
 80222d0:	681b      	ldr	r3, [r3, #0]
 80222d2:	f042 0201 	orr.w	r2, r2, #1
 80222d6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80222d8:	bf00      	nop
 80222da:	370c      	adds	r7, #12
 80222dc:	46bd      	mov	sp, r7
 80222de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222e2:	4770      	bx	lr
 80222e4:	200004b0 	.word	0x200004b0

080222e8 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 80222e8:	b580      	push	{r7, lr}
 80222ea:	b082      	sub	sp, #8
 80222ec:	af00      	add	r7, sp, #0
 80222ee:	6078      	str	r0, [r7, #4]
 80222f0:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 80222f2:	687a      	ldr	r2, [r7, #4]
 80222f4:	6839      	ldr	r1, [r7, #0]
 80222f6:	4805      	ldr	r0, [pc, #20]	; (802230c <BSP_LCD_SetColorKeying+0x24>)
 80222f8:	f003 fe8a 	bl	8026010 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 80222fc:	6879      	ldr	r1, [r7, #4]
 80222fe:	4803      	ldr	r0, [pc, #12]	; (802230c <BSP_LCD_SetColorKeying+0x24>)
 8022300:	f003 feca 	bl	8026098 <HAL_LTDC_EnableColorKeying>
}
 8022304:	bf00      	nop
 8022306:	3708      	adds	r7, #8
 8022308:	46bd      	mov	sp, r7
 802230a:	bd80      	pop	{r7, pc}
 802230c:	200004b0 	.word	0x200004b0

08022310 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8022310:	b480      	push	{r7}
 8022312:	b083      	sub	sp, #12
 8022314:	af00      	add	r7, sp, #0
 8022316:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8022318:	4b07      	ldr	r3, [pc, #28]	; (8022338 <BSP_LCD_SetTextColor+0x28>)
 802231a:	681a      	ldr	r2, [r3, #0]
 802231c:	4907      	ldr	r1, [pc, #28]	; (802233c <BSP_LCD_SetTextColor+0x2c>)
 802231e:	4613      	mov	r3, r2
 8022320:	005b      	lsls	r3, r3, #1
 8022322:	4413      	add	r3, r2
 8022324:	009b      	lsls	r3, r3, #2
 8022326:	440b      	add	r3, r1
 8022328:	687a      	ldr	r2, [r7, #4]
 802232a:	601a      	str	r2, [r3, #0]
}
 802232c:	bf00      	nop
 802232e:	370c      	adds	r7, #12
 8022330:	46bd      	mov	sp, r7
 8022332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022336:	4770      	bx	lr
 8022338:	200005c8 	.word	0x200005c8
 802233c:	200005cc 	.word	0x200005cc

08022340 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8022340:	b480      	push	{r7}
 8022342:	b083      	sub	sp, #12
 8022344:	af00      	add	r7, sp, #0
 8022346:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8022348:	4b08      	ldr	r3, [pc, #32]	; (802236c <BSP_LCD_SetBackColor+0x2c>)
 802234a:	681a      	ldr	r2, [r3, #0]
 802234c:	4908      	ldr	r1, [pc, #32]	; (8022370 <BSP_LCD_SetBackColor+0x30>)
 802234e:	4613      	mov	r3, r2
 8022350:	005b      	lsls	r3, r3, #1
 8022352:	4413      	add	r3, r2
 8022354:	009b      	lsls	r3, r3, #2
 8022356:	440b      	add	r3, r1
 8022358:	3304      	adds	r3, #4
 802235a:	687a      	ldr	r2, [r7, #4]
 802235c:	601a      	str	r2, [r3, #0]
}
 802235e:	bf00      	nop
 8022360:	370c      	adds	r7, #12
 8022362:	46bd      	mov	sp, r7
 8022364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022368:	4770      	bx	lr
 802236a:	bf00      	nop
 802236c:	200005c8 	.word	0x200005c8
 8022370:	200005cc 	.word	0x200005cc

08022374 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8022374:	b480      	push	{r7}
 8022376:	b083      	sub	sp, #12
 8022378:	af00      	add	r7, sp, #0
 802237a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 802237c:	4b08      	ldr	r3, [pc, #32]	; (80223a0 <BSP_LCD_SetFont+0x2c>)
 802237e:	681a      	ldr	r2, [r3, #0]
 8022380:	4908      	ldr	r1, [pc, #32]	; (80223a4 <BSP_LCD_SetFont+0x30>)
 8022382:	4613      	mov	r3, r2
 8022384:	005b      	lsls	r3, r3, #1
 8022386:	4413      	add	r3, r2
 8022388:	009b      	lsls	r3, r3, #2
 802238a:	440b      	add	r3, r1
 802238c:	3308      	adds	r3, #8
 802238e:	687a      	ldr	r2, [r7, #4]
 8022390:	601a      	str	r2, [r3, #0]
}
 8022392:	bf00      	nop
 8022394:	370c      	adds	r7, #12
 8022396:	46bd      	mov	sp, r7
 8022398:	f85d 7b04 	ldr.w	r7, [sp], #4
 802239c:	4770      	bx	lr
 802239e:	bf00      	nop
 80223a0:	200005c8 	.word	0x200005c8
 80223a4:	200005cc 	.word	0x200005cc

080223a8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80223a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80223aa:	b085      	sub	sp, #20
 80223ac:	af02      	add	r7, sp, #8
 80223ae:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80223b0:	4b0f      	ldr	r3, [pc, #60]	; (80223f0 <BSP_LCD_Clear+0x48>)
 80223b2:	681c      	ldr	r4, [r3, #0]
 80223b4:	4b0e      	ldr	r3, [pc, #56]	; (80223f0 <BSP_LCD_Clear+0x48>)
 80223b6:	681b      	ldr	r3, [r3, #0]
 80223b8:	4a0e      	ldr	r2, [pc, #56]	; (80223f4 <BSP_LCD_Clear+0x4c>)
 80223ba:	2134      	movs	r1, #52	; 0x34
 80223bc:	fb01 f303 	mul.w	r3, r1, r3
 80223c0:	4413      	add	r3, r2
 80223c2:	335c      	adds	r3, #92	; 0x5c
 80223c4:	681b      	ldr	r3, [r3, #0]
 80223c6:	461e      	mov	r6, r3
 80223c8:	f7ff fec4 	bl	8022154 <BSP_LCD_GetXSize>
 80223cc:	4605      	mov	r5, r0
 80223ce:	f7ff fecd 	bl	802216c <BSP_LCD_GetYSize>
 80223d2:	4602      	mov	r2, r0
 80223d4:	687b      	ldr	r3, [r7, #4]
 80223d6:	9301      	str	r3, [sp, #4]
 80223d8:	2300      	movs	r3, #0
 80223da:	9300      	str	r3, [sp, #0]
 80223dc:	4613      	mov	r3, r2
 80223de:	462a      	mov	r2, r5
 80223e0:	4631      	mov	r1, r6
 80223e2:	4620      	mov	r0, r4
 80223e4:	f000 fad0 	bl	8022988 <FillBuffer>
}
 80223e8:	bf00      	nop
 80223ea:	370c      	adds	r7, #12
 80223ec:	46bd      	mov	sp, r7
 80223ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80223f0:	200005c8 	.word	0x200005c8
 80223f4:	200004b0 	.word	0x200004b0

080223f8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80223f8:	b590      	push	{r4, r7, lr}
 80223fa:	b083      	sub	sp, #12
 80223fc:	af00      	add	r7, sp, #0
 80223fe:	4603      	mov	r3, r0
 8022400:	80fb      	strh	r3, [r7, #6]
 8022402:	460b      	mov	r3, r1
 8022404:	80bb      	strh	r3, [r7, #4]
 8022406:	4613      	mov	r3, r2
 8022408:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 802240a:	4b1b      	ldr	r3, [pc, #108]	; (8022478 <BSP_LCD_DisplayChar+0x80>)
 802240c:	681a      	ldr	r2, [r3, #0]
 802240e:	491b      	ldr	r1, [pc, #108]	; (802247c <BSP_LCD_DisplayChar+0x84>)
 8022410:	4613      	mov	r3, r2
 8022412:	005b      	lsls	r3, r3, #1
 8022414:	4413      	add	r3, r2
 8022416:	009b      	lsls	r3, r3, #2
 8022418:	440b      	add	r3, r1
 802241a:	3308      	adds	r3, #8
 802241c:	681b      	ldr	r3, [r3, #0]
 802241e:	6819      	ldr	r1, [r3, #0]
 8022420:	78fb      	ldrb	r3, [r7, #3]
 8022422:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022426:	4b14      	ldr	r3, [pc, #80]	; (8022478 <BSP_LCD_DisplayChar+0x80>)
 8022428:	681a      	ldr	r2, [r3, #0]
 802242a:	4c14      	ldr	r4, [pc, #80]	; (802247c <BSP_LCD_DisplayChar+0x84>)
 802242c:	4613      	mov	r3, r2
 802242e:	005b      	lsls	r3, r3, #1
 8022430:	4413      	add	r3, r2
 8022432:	009b      	lsls	r3, r3, #2
 8022434:	4423      	add	r3, r4
 8022436:	3308      	adds	r3, #8
 8022438:	681b      	ldr	r3, [r3, #0]
 802243a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 802243c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022440:	4b0d      	ldr	r3, [pc, #52]	; (8022478 <BSP_LCD_DisplayChar+0x80>)
 8022442:	681a      	ldr	r2, [r3, #0]
 8022444:	4c0d      	ldr	r4, [pc, #52]	; (802247c <BSP_LCD_DisplayChar+0x84>)
 8022446:	4613      	mov	r3, r2
 8022448:	005b      	lsls	r3, r3, #1
 802244a:	4413      	add	r3, r2
 802244c:	009b      	lsls	r3, r3, #2
 802244e:	4423      	add	r3, r4
 8022450:	3308      	adds	r3, #8
 8022452:	681b      	ldr	r3, [r3, #0]
 8022454:	889b      	ldrh	r3, [r3, #4]
 8022456:	3307      	adds	r3, #7
 8022458:	2b00      	cmp	r3, #0
 802245a:	da00      	bge.n	802245e <BSP_LCD_DisplayChar+0x66>
 802245c:	3307      	adds	r3, #7
 802245e:	10db      	asrs	r3, r3, #3
 8022460:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022464:	18ca      	adds	r2, r1, r3
 8022466:	88b9      	ldrh	r1, [r7, #4]
 8022468:	88fb      	ldrh	r3, [r7, #6]
 802246a:	4618      	mov	r0, r3
 802246c:	f000 f9d2 	bl	8022814 <DrawChar>
}
 8022470:	bf00      	nop
 8022472:	370c      	adds	r7, #12
 8022474:	46bd      	mov	sp, r7
 8022476:	bd90      	pop	{r4, r7, pc}
 8022478:	200005c8 	.word	0x200005c8
 802247c:	200005cc 	.word	0x200005cc

08022480 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8022480:	b5b0      	push	{r4, r5, r7, lr}
 8022482:	b088      	sub	sp, #32
 8022484:	af00      	add	r7, sp, #0
 8022486:	60ba      	str	r2, [r7, #8]
 8022488:	461a      	mov	r2, r3
 802248a:	4603      	mov	r3, r0
 802248c:	81fb      	strh	r3, [r7, #14]
 802248e:	460b      	mov	r3, r1
 8022490:	81bb      	strh	r3, [r7, #12]
 8022492:	4613      	mov	r3, r2
 8022494:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8022496:	2301      	movs	r3, #1
 8022498:	83fb      	strh	r3, [r7, #30]
 802249a:	2300      	movs	r3, #0
 802249c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 802249e:	2300      	movs	r3, #0
 80224a0:	61bb      	str	r3, [r7, #24]
 80224a2:	2300      	movs	r3, #0
 80224a4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80224a6:	68bb      	ldr	r3, [r7, #8]
 80224a8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80224aa:	e002      	b.n	80224b2 <BSP_LCD_DisplayStringAt+0x32>
 80224ac:	69bb      	ldr	r3, [r7, #24]
 80224ae:	3301      	adds	r3, #1
 80224b0:	61bb      	str	r3, [r7, #24]
 80224b2:	697b      	ldr	r3, [r7, #20]
 80224b4:	1c5a      	adds	r2, r3, #1
 80224b6:	617a      	str	r2, [r7, #20]
 80224b8:	781b      	ldrb	r3, [r3, #0]
 80224ba:	2b00      	cmp	r3, #0
 80224bc:	d1f6      	bne.n	80224ac <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80224be:	f7ff fe49 	bl	8022154 <BSP_LCD_GetXSize>
 80224c2:	4601      	mov	r1, r0
 80224c4:	4b4b      	ldr	r3, [pc, #300]	; (80225f4 <BSP_LCD_DisplayStringAt+0x174>)
 80224c6:	681a      	ldr	r2, [r3, #0]
 80224c8:	484b      	ldr	r0, [pc, #300]	; (80225f8 <BSP_LCD_DisplayStringAt+0x178>)
 80224ca:	4613      	mov	r3, r2
 80224cc:	005b      	lsls	r3, r3, #1
 80224ce:	4413      	add	r3, r2
 80224d0:	009b      	lsls	r3, r3, #2
 80224d2:	4403      	add	r3, r0
 80224d4:	3308      	adds	r3, #8
 80224d6:	681b      	ldr	r3, [r3, #0]
 80224d8:	889b      	ldrh	r3, [r3, #4]
 80224da:	fbb1 f3f3 	udiv	r3, r1, r3
 80224de:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80224e0:	79fb      	ldrb	r3, [r7, #7]
 80224e2:	2b03      	cmp	r3, #3
 80224e4:	d01c      	beq.n	8022520 <BSP_LCD_DisplayStringAt+0xa0>
 80224e6:	2b03      	cmp	r3, #3
 80224e8:	dc33      	bgt.n	8022552 <BSP_LCD_DisplayStringAt+0xd2>
 80224ea:	2b01      	cmp	r3, #1
 80224ec:	d002      	beq.n	80224f4 <BSP_LCD_DisplayStringAt+0x74>
 80224ee:	2b02      	cmp	r3, #2
 80224f0:	d019      	beq.n	8022526 <BSP_LCD_DisplayStringAt+0xa6>
 80224f2:	e02e      	b.n	8022552 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80224f4:	693a      	ldr	r2, [r7, #16]
 80224f6:	69bb      	ldr	r3, [r7, #24]
 80224f8:	1ad1      	subs	r1, r2, r3
 80224fa:	4b3e      	ldr	r3, [pc, #248]	; (80225f4 <BSP_LCD_DisplayStringAt+0x174>)
 80224fc:	681a      	ldr	r2, [r3, #0]
 80224fe:	483e      	ldr	r0, [pc, #248]	; (80225f8 <BSP_LCD_DisplayStringAt+0x178>)
 8022500:	4613      	mov	r3, r2
 8022502:	005b      	lsls	r3, r3, #1
 8022504:	4413      	add	r3, r2
 8022506:	009b      	lsls	r3, r3, #2
 8022508:	4403      	add	r3, r0
 802250a:	3308      	adds	r3, #8
 802250c:	681b      	ldr	r3, [r3, #0]
 802250e:	889b      	ldrh	r3, [r3, #4]
 8022510:	fb01 f303 	mul.w	r3, r1, r3
 8022514:	085b      	lsrs	r3, r3, #1
 8022516:	b29a      	uxth	r2, r3
 8022518:	89fb      	ldrh	r3, [r7, #14]
 802251a:	4413      	add	r3, r2
 802251c:	83fb      	strh	r3, [r7, #30]
      break;
 802251e:	e01b      	b.n	8022558 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8022520:	89fb      	ldrh	r3, [r7, #14]
 8022522:	83fb      	strh	r3, [r7, #30]
      break;
 8022524:	e018      	b.n	8022558 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8022526:	693a      	ldr	r2, [r7, #16]
 8022528:	69bb      	ldr	r3, [r7, #24]
 802252a:	1ad3      	subs	r3, r2, r3
 802252c:	b299      	uxth	r1, r3
 802252e:	4b31      	ldr	r3, [pc, #196]	; (80225f4 <BSP_LCD_DisplayStringAt+0x174>)
 8022530:	681a      	ldr	r2, [r3, #0]
 8022532:	4831      	ldr	r0, [pc, #196]	; (80225f8 <BSP_LCD_DisplayStringAt+0x178>)
 8022534:	4613      	mov	r3, r2
 8022536:	005b      	lsls	r3, r3, #1
 8022538:	4413      	add	r3, r2
 802253a:	009b      	lsls	r3, r3, #2
 802253c:	4403      	add	r3, r0
 802253e:	3308      	adds	r3, #8
 8022540:	681b      	ldr	r3, [r3, #0]
 8022542:	889b      	ldrh	r3, [r3, #4]
 8022544:	fb11 f303 	smulbb	r3, r1, r3
 8022548:	b29a      	uxth	r2, r3
 802254a:	89fb      	ldrh	r3, [r7, #14]
 802254c:	4413      	add	r3, r2
 802254e:	83fb      	strh	r3, [r7, #30]
      break;
 8022550:	e002      	b.n	8022558 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8022552:	89fb      	ldrh	r3, [r7, #14]
 8022554:	83fb      	strh	r3, [r7, #30]
      break;
 8022556:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022558:	e01a      	b.n	8022590 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 802255a:	68bb      	ldr	r3, [r7, #8]
 802255c:	781a      	ldrb	r2, [r3, #0]
 802255e:	89b9      	ldrh	r1, [r7, #12]
 8022560:	8bfb      	ldrh	r3, [r7, #30]
 8022562:	4618      	mov	r0, r3
 8022564:	f7ff ff48 	bl	80223f8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8022568:	4b22      	ldr	r3, [pc, #136]	; (80225f4 <BSP_LCD_DisplayStringAt+0x174>)
 802256a:	681a      	ldr	r2, [r3, #0]
 802256c:	4922      	ldr	r1, [pc, #136]	; (80225f8 <BSP_LCD_DisplayStringAt+0x178>)
 802256e:	4613      	mov	r3, r2
 8022570:	005b      	lsls	r3, r3, #1
 8022572:	4413      	add	r3, r2
 8022574:	009b      	lsls	r3, r3, #2
 8022576:	440b      	add	r3, r1
 8022578:	3308      	adds	r3, #8
 802257a:	681b      	ldr	r3, [r3, #0]
 802257c:	889a      	ldrh	r2, [r3, #4]
 802257e:	8bfb      	ldrh	r3, [r7, #30]
 8022580:	4413      	add	r3, r2
 8022582:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8022584:	68bb      	ldr	r3, [r7, #8]
 8022586:	3301      	adds	r3, #1
 8022588:	60bb      	str	r3, [r7, #8]
    i++;
 802258a:	8bbb      	ldrh	r3, [r7, #28]
 802258c:	3301      	adds	r3, #1
 802258e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022590:	68bb      	ldr	r3, [r7, #8]
 8022592:	781b      	ldrb	r3, [r3, #0]
 8022594:	2b00      	cmp	r3, #0
 8022596:	bf14      	ite	ne
 8022598:	2301      	movne	r3, #1
 802259a:	2300      	moveq	r3, #0
 802259c:	b2dc      	uxtb	r4, r3
 802259e:	f7ff fdd9 	bl	8022154 <BSP_LCD_GetXSize>
 80225a2:	8bb9      	ldrh	r1, [r7, #28]
 80225a4:	4b13      	ldr	r3, [pc, #76]	; (80225f4 <BSP_LCD_DisplayStringAt+0x174>)
 80225a6:	681a      	ldr	r2, [r3, #0]
 80225a8:	4d13      	ldr	r5, [pc, #76]	; (80225f8 <BSP_LCD_DisplayStringAt+0x178>)
 80225aa:	4613      	mov	r3, r2
 80225ac:	005b      	lsls	r3, r3, #1
 80225ae:	4413      	add	r3, r2
 80225b0:	009b      	lsls	r3, r3, #2
 80225b2:	442b      	add	r3, r5
 80225b4:	3308      	adds	r3, #8
 80225b6:	681b      	ldr	r3, [r3, #0]
 80225b8:	889b      	ldrh	r3, [r3, #4]
 80225ba:	fb01 f303 	mul.w	r3, r1, r3
 80225be:	1ac3      	subs	r3, r0, r3
 80225c0:	b299      	uxth	r1, r3
 80225c2:	4b0c      	ldr	r3, [pc, #48]	; (80225f4 <BSP_LCD_DisplayStringAt+0x174>)
 80225c4:	681a      	ldr	r2, [r3, #0]
 80225c6:	480c      	ldr	r0, [pc, #48]	; (80225f8 <BSP_LCD_DisplayStringAt+0x178>)
 80225c8:	4613      	mov	r3, r2
 80225ca:	005b      	lsls	r3, r3, #1
 80225cc:	4413      	add	r3, r2
 80225ce:	009b      	lsls	r3, r3, #2
 80225d0:	4403      	add	r3, r0
 80225d2:	3308      	adds	r3, #8
 80225d4:	681b      	ldr	r3, [r3, #0]
 80225d6:	889b      	ldrh	r3, [r3, #4]
 80225d8:	4299      	cmp	r1, r3
 80225da:	bf2c      	ite	cs
 80225dc:	2301      	movcs	r3, #1
 80225de:	2300      	movcc	r3, #0
 80225e0:	b2db      	uxtb	r3, r3
 80225e2:	4023      	ands	r3, r4
 80225e4:	b2db      	uxtb	r3, r3
 80225e6:	2b00      	cmp	r3, #0
 80225e8:	d1b7      	bne.n	802255a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80225ea:	bf00      	nop
 80225ec:	bf00      	nop
 80225ee:	3720      	adds	r7, #32
 80225f0:	46bd      	mov	sp, r7
 80225f2:	bdb0      	pop	{r4, r5, r7, pc}
 80225f4:	200005c8 	.word	0x200005c8
 80225f8:	200005cc 	.word	0x200005cc

080225fc <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80225fc:	b580      	push	{r7, lr}
 80225fe:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8022600:	4b05      	ldr	r3, [pc, #20]	; (8022618 <BSP_LCD_DisplayOn+0x1c>)
 8022602:	681b      	ldr	r3, [r3, #0]
 8022604:	689b      	ldr	r3, [r3, #8]
 8022606:	2b00      	cmp	r3, #0
 8022608:	d003      	beq.n	8022612 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 802260a:	4b03      	ldr	r3, [pc, #12]	; (8022618 <BSP_LCD_DisplayOn+0x1c>)
 802260c:	681b      	ldr	r3, [r3, #0]
 802260e:	689b      	ldr	r3, [r3, #8]
 8022610:	4798      	blx	r3
  }
}
 8022612:	bf00      	nop
 8022614:	bd80      	pop	{r7, pc}
 8022616:	bf00      	nop
 8022618:	200005e4 	.word	0x200005e4

0802261c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 802261c:	b580      	push	{r7, lr}
 802261e:	b08e      	sub	sp, #56	; 0x38
 8022620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8022622:	2300      	movs	r3, #0
 8022624:	623b      	str	r3, [r7, #32]
 8022626:	4b61      	ldr	r3, [pc, #388]	; (80227ac <BSP_LCD_MspInit+0x190>)
 8022628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802262a:	4a60      	ldr	r2, [pc, #384]	; (80227ac <BSP_LCD_MspInit+0x190>)
 802262c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8022630:	6453      	str	r3, [r2, #68]	; 0x44
 8022632:	4b5e      	ldr	r3, [pc, #376]	; (80227ac <BSP_LCD_MspInit+0x190>)
 8022634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022636:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802263a:	623b      	str	r3, [r7, #32]
 802263c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 802263e:	2300      	movs	r3, #0
 8022640:	61fb      	str	r3, [r7, #28]
 8022642:	4b5a      	ldr	r3, [pc, #360]	; (80227ac <BSP_LCD_MspInit+0x190>)
 8022644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022646:	4a59      	ldr	r2, [pc, #356]	; (80227ac <BSP_LCD_MspInit+0x190>)
 8022648:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802264c:	6313      	str	r3, [r2, #48]	; 0x30
 802264e:	4b57      	ldr	r3, [pc, #348]	; (80227ac <BSP_LCD_MspInit+0x190>)
 8022650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8022656:	61fb      	str	r3, [r7, #28]
 8022658:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802265a:	2300      	movs	r3, #0
 802265c:	61bb      	str	r3, [r7, #24]
 802265e:	4b53      	ldr	r3, [pc, #332]	; (80227ac <BSP_LCD_MspInit+0x190>)
 8022660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022662:	4a52      	ldr	r2, [pc, #328]	; (80227ac <BSP_LCD_MspInit+0x190>)
 8022664:	f043 0301 	orr.w	r3, r3, #1
 8022668:	6313      	str	r3, [r2, #48]	; 0x30
 802266a:	4b50      	ldr	r3, [pc, #320]	; (80227ac <BSP_LCD_MspInit+0x190>)
 802266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802266e:	f003 0301 	and.w	r3, r3, #1
 8022672:	61bb      	str	r3, [r7, #24]
 8022674:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8022676:	2300      	movs	r3, #0
 8022678:	617b      	str	r3, [r7, #20]
 802267a:	4b4c      	ldr	r3, [pc, #304]	; (80227ac <BSP_LCD_MspInit+0x190>)
 802267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802267e:	4a4b      	ldr	r2, [pc, #300]	; (80227ac <BSP_LCD_MspInit+0x190>)
 8022680:	f043 0302 	orr.w	r3, r3, #2
 8022684:	6313      	str	r3, [r2, #48]	; 0x30
 8022686:	4b49      	ldr	r3, [pc, #292]	; (80227ac <BSP_LCD_MspInit+0x190>)
 8022688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802268a:	f003 0302 	and.w	r3, r3, #2
 802268e:	617b      	str	r3, [r7, #20]
 8022690:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8022692:	2300      	movs	r3, #0
 8022694:	613b      	str	r3, [r7, #16]
 8022696:	4b45      	ldr	r3, [pc, #276]	; (80227ac <BSP_LCD_MspInit+0x190>)
 8022698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802269a:	4a44      	ldr	r2, [pc, #272]	; (80227ac <BSP_LCD_MspInit+0x190>)
 802269c:	f043 0304 	orr.w	r3, r3, #4
 80226a0:	6313      	str	r3, [r2, #48]	; 0x30
 80226a2:	4b42      	ldr	r3, [pc, #264]	; (80227ac <BSP_LCD_MspInit+0x190>)
 80226a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226a6:	f003 0304 	and.w	r3, r3, #4
 80226aa:	613b      	str	r3, [r7, #16]
 80226ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80226ae:	2300      	movs	r3, #0
 80226b0:	60fb      	str	r3, [r7, #12]
 80226b2:	4b3e      	ldr	r3, [pc, #248]	; (80227ac <BSP_LCD_MspInit+0x190>)
 80226b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226b6:	4a3d      	ldr	r2, [pc, #244]	; (80227ac <BSP_LCD_MspInit+0x190>)
 80226b8:	f043 0308 	orr.w	r3, r3, #8
 80226bc:	6313      	str	r3, [r2, #48]	; 0x30
 80226be:	4b3b      	ldr	r3, [pc, #236]	; (80227ac <BSP_LCD_MspInit+0x190>)
 80226c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226c2:	f003 0308 	and.w	r3, r3, #8
 80226c6:	60fb      	str	r3, [r7, #12]
 80226c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80226ca:	2300      	movs	r3, #0
 80226cc:	60bb      	str	r3, [r7, #8]
 80226ce:	4b37      	ldr	r3, [pc, #220]	; (80227ac <BSP_LCD_MspInit+0x190>)
 80226d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226d2:	4a36      	ldr	r2, [pc, #216]	; (80227ac <BSP_LCD_MspInit+0x190>)
 80226d4:	f043 0320 	orr.w	r3, r3, #32
 80226d8:	6313      	str	r3, [r2, #48]	; 0x30
 80226da:	4b34      	ldr	r3, [pc, #208]	; (80227ac <BSP_LCD_MspInit+0x190>)
 80226dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226de:	f003 0320 	and.w	r3, r3, #32
 80226e2:	60bb      	str	r3, [r7, #8]
 80226e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80226e6:	2300      	movs	r3, #0
 80226e8:	607b      	str	r3, [r7, #4]
 80226ea:	4b30      	ldr	r3, [pc, #192]	; (80227ac <BSP_LCD_MspInit+0x190>)
 80226ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226ee:	4a2f      	ldr	r2, [pc, #188]	; (80227ac <BSP_LCD_MspInit+0x190>)
 80226f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80226f4:	6313      	str	r3, [r2, #48]	; 0x30
 80226f6:	4b2d      	ldr	r3, [pc, #180]	; (80227ac <BSP_LCD_MspInit+0x190>)
 80226f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80226fe:	607b      	str	r3, [r7, #4]
 8022700:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8022702:	f641 0358 	movw	r3, #6232	; 0x1858
 8022706:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8022708:	2302      	movs	r3, #2
 802270a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 802270c:	2300      	movs	r3, #0
 802270e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8022710:	2302      	movs	r3, #2
 8022712:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8022714:	230e      	movs	r3, #14
 8022716:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8022718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802271c:	4619      	mov	r1, r3
 802271e:	4824      	ldr	r0, [pc, #144]	; (80227b0 <BSP_LCD_MspInit+0x194>)
 8022720:	f001 f9f2 	bl	8023b08 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8022724:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8022728:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 802272a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802272e:	4619      	mov	r1, r3
 8022730:	4820      	ldr	r0, [pc, #128]	; (80227b4 <BSP_LCD_MspInit+0x198>)
 8022732:	f001 f9e9 	bl	8023b08 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8022736:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 802273a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 802273c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022740:	4619      	mov	r1, r3
 8022742:	481d      	ldr	r0, [pc, #116]	; (80227b8 <BSP_LCD_MspInit+0x19c>)
 8022744:	f001 f9e0 	bl	8023b08 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8022748:	2348      	movs	r3, #72	; 0x48
 802274a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 802274c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022750:	4619      	mov	r1, r3
 8022752:	481a      	ldr	r0, [pc, #104]	; (80227bc <BSP_LCD_MspInit+0x1a0>)
 8022754:	f001 f9d8 	bl	8023b08 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8022758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802275c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 802275e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022762:	4619      	mov	r1, r3
 8022764:	4816      	ldr	r0, [pc, #88]	; (80227c0 <BSP_LCD_MspInit+0x1a4>)
 8022766:	f001 f9cf 	bl	8023b08 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 802276a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 802276e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022774:	4619      	mov	r1, r3
 8022776:	4813      	ldr	r0, [pc, #76]	; (80227c4 <BSP_LCD_MspInit+0x1a8>)
 8022778:	f001 f9c6 	bl	8023b08 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 802277c:	2303      	movs	r3, #3
 802277e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8022780:	2309      	movs	r3, #9
 8022782:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8022784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022788:	4619      	mov	r1, r3
 802278a:	480a      	ldr	r0, [pc, #40]	; (80227b4 <BSP_LCD_MspInit+0x198>)
 802278c:	f001 f9bc 	bl	8023b08 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8022790:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8022794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802279a:	4619      	mov	r1, r3
 802279c:	4809      	ldr	r0, [pc, #36]	; (80227c4 <BSP_LCD_MspInit+0x1a8>)
 802279e:	f001 f9b3 	bl	8023b08 <HAL_GPIO_Init>
}
 80227a2:	bf00      	nop
 80227a4:	3738      	adds	r7, #56	; 0x38
 80227a6:	46bd      	mov	sp, r7
 80227a8:	bd80      	pop	{r7, pc}
 80227aa:	bf00      	nop
 80227ac:	40023800 	.word	0x40023800
 80227b0:	40020000 	.word	0x40020000
 80227b4:	40020400 	.word	0x40020400
 80227b8:	40020800 	.word	0x40020800
 80227bc:	40020c00 	.word	0x40020c00
 80227c0:	40021400 	.word	0x40021400
 80227c4:	40021800 	.word	0x40021800

080227c8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80227c8:	b5b0      	push	{r4, r5, r7, lr}
 80227ca:	b082      	sub	sp, #8
 80227cc:	af00      	add	r7, sp, #0
 80227ce:	4603      	mov	r3, r0
 80227d0:	603a      	str	r2, [r7, #0]
 80227d2:	80fb      	strh	r3, [r7, #6]
 80227d4:	460b      	mov	r3, r1
 80227d6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80227d8:	4b0c      	ldr	r3, [pc, #48]	; (802280c <BSP_LCD_DrawPixel+0x44>)
 80227da:	681b      	ldr	r3, [r3, #0]
 80227dc:	4a0c      	ldr	r2, [pc, #48]	; (8022810 <BSP_LCD_DrawPixel+0x48>)
 80227de:	2134      	movs	r1, #52	; 0x34
 80227e0:	fb01 f303 	mul.w	r3, r1, r3
 80227e4:	4413      	add	r3, r2
 80227e6:	335c      	adds	r3, #92	; 0x5c
 80227e8:	681c      	ldr	r4, [r3, #0]
 80227ea:	88bd      	ldrh	r5, [r7, #4]
 80227ec:	f7ff fcb2 	bl	8022154 <BSP_LCD_GetXSize>
 80227f0:	4603      	mov	r3, r0
 80227f2:	fb03 f205 	mul.w	r2, r3, r5
 80227f6:	88fb      	ldrh	r3, [r7, #6]
 80227f8:	4413      	add	r3, r2
 80227fa:	009b      	lsls	r3, r3, #2
 80227fc:	4423      	add	r3, r4
 80227fe:	461a      	mov	r2, r3
 8022800:	683b      	ldr	r3, [r7, #0]
 8022802:	6013      	str	r3, [r2, #0]
}
 8022804:	bf00      	nop
 8022806:	3708      	adds	r7, #8
 8022808:	46bd      	mov	sp, r7
 802280a:	bdb0      	pop	{r4, r5, r7, pc}
 802280c:	200005c8 	.word	0x200005c8
 8022810:	200004b0 	.word	0x200004b0

08022814 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8022814:	b580      	push	{r7, lr}
 8022816:	b088      	sub	sp, #32
 8022818:	af00      	add	r7, sp, #0
 802281a:	4603      	mov	r3, r0
 802281c:	603a      	str	r2, [r7, #0]
 802281e:	80fb      	strh	r3, [r7, #6]
 8022820:	460b      	mov	r3, r1
 8022822:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8022824:	2300      	movs	r3, #0
 8022826:	61fb      	str	r3, [r7, #28]
 8022828:	2300      	movs	r3, #0
 802282a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 802282c:	2300      	movs	r3, #0
 802282e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8022830:	4b53      	ldr	r3, [pc, #332]	; (8022980 <DrawChar+0x16c>)
 8022832:	681a      	ldr	r2, [r3, #0]
 8022834:	4953      	ldr	r1, [pc, #332]	; (8022984 <DrawChar+0x170>)
 8022836:	4613      	mov	r3, r2
 8022838:	005b      	lsls	r3, r3, #1
 802283a:	4413      	add	r3, r2
 802283c:	009b      	lsls	r3, r3, #2
 802283e:	440b      	add	r3, r1
 8022840:	3308      	adds	r3, #8
 8022842:	681b      	ldr	r3, [r3, #0]
 8022844:	88db      	ldrh	r3, [r3, #6]
 8022846:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8022848:	4b4d      	ldr	r3, [pc, #308]	; (8022980 <DrawChar+0x16c>)
 802284a:	681a      	ldr	r2, [r3, #0]
 802284c:	494d      	ldr	r1, [pc, #308]	; (8022984 <DrawChar+0x170>)
 802284e:	4613      	mov	r3, r2
 8022850:	005b      	lsls	r3, r3, #1
 8022852:	4413      	add	r3, r2
 8022854:	009b      	lsls	r3, r3, #2
 8022856:	440b      	add	r3, r1
 8022858:	3308      	adds	r3, #8
 802285a:	681b      	ldr	r3, [r3, #0]
 802285c:	889b      	ldrh	r3, [r3, #4]
 802285e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8022860:	8a3b      	ldrh	r3, [r7, #16]
 8022862:	3307      	adds	r3, #7
 8022864:	2b00      	cmp	r3, #0
 8022866:	da00      	bge.n	802286a <DrawChar+0x56>
 8022868:	3307      	adds	r3, #7
 802286a:	10db      	asrs	r3, r3, #3
 802286c:	b2db      	uxtb	r3, r3
 802286e:	00db      	lsls	r3, r3, #3
 8022870:	b2da      	uxtb	r2, r3
 8022872:	8a3b      	ldrh	r3, [r7, #16]
 8022874:	b2db      	uxtb	r3, r3
 8022876:	1ad3      	subs	r3, r2, r3
 8022878:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 802287a:	2300      	movs	r3, #0
 802287c:	61fb      	str	r3, [r7, #28]
 802287e:	e076      	b.n	802296e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8022880:	8a3b      	ldrh	r3, [r7, #16]
 8022882:	3307      	adds	r3, #7
 8022884:	2b00      	cmp	r3, #0
 8022886:	da00      	bge.n	802288a <DrawChar+0x76>
 8022888:	3307      	adds	r3, #7
 802288a:	10db      	asrs	r3, r3, #3
 802288c:	461a      	mov	r2, r3
 802288e:	69fb      	ldr	r3, [r7, #28]
 8022890:	fb02 f303 	mul.w	r3, r2, r3
 8022894:	683a      	ldr	r2, [r7, #0]
 8022896:	4413      	add	r3, r2
 8022898:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 802289a:	8a3b      	ldrh	r3, [r7, #16]
 802289c:	3307      	adds	r3, #7
 802289e:	2b00      	cmp	r3, #0
 80228a0:	da00      	bge.n	80228a4 <DrawChar+0x90>
 80228a2:	3307      	adds	r3, #7
 80228a4:	10db      	asrs	r3, r3, #3
 80228a6:	2b01      	cmp	r3, #1
 80228a8:	d002      	beq.n	80228b0 <DrawChar+0x9c>
 80228aa:	2b02      	cmp	r3, #2
 80228ac:	d004      	beq.n	80228b8 <DrawChar+0xa4>
 80228ae:	e00c      	b.n	80228ca <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80228b0:	68bb      	ldr	r3, [r7, #8]
 80228b2:	781b      	ldrb	r3, [r3, #0]
 80228b4:	617b      	str	r3, [r7, #20]
      break;
 80228b6:	e016      	b.n	80228e6 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80228b8:	68bb      	ldr	r3, [r7, #8]
 80228ba:	781b      	ldrb	r3, [r3, #0]
 80228bc:	021b      	lsls	r3, r3, #8
 80228be:	68ba      	ldr	r2, [r7, #8]
 80228c0:	3201      	adds	r2, #1
 80228c2:	7812      	ldrb	r2, [r2, #0]
 80228c4:	4313      	orrs	r3, r2
 80228c6:	617b      	str	r3, [r7, #20]
      break;
 80228c8:	e00d      	b.n	80228e6 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80228ca:	68bb      	ldr	r3, [r7, #8]
 80228cc:	781b      	ldrb	r3, [r3, #0]
 80228ce:	041a      	lsls	r2, r3, #16
 80228d0:	68bb      	ldr	r3, [r7, #8]
 80228d2:	3301      	adds	r3, #1
 80228d4:	781b      	ldrb	r3, [r3, #0]
 80228d6:	021b      	lsls	r3, r3, #8
 80228d8:	4313      	orrs	r3, r2
 80228da:	68ba      	ldr	r2, [r7, #8]
 80228dc:	3202      	adds	r2, #2
 80228de:	7812      	ldrb	r2, [r2, #0]
 80228e0:	4313      	orrs	r3, r2
 80228e2:	617b      	str	r3, [r7, #20]
      break;
 80228e4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80228e6:	2300      	movs	r3, #0
 80228e8:	61bb      	str	r3, [r7, #24]
 80228ea:	e036      	b.n	802295a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80228ec:	8a3a      	ldrh	r2, [r7, #16]
 80228ee:	69bb      	ldr	r3, [r7, #24]
 80228f0:	1ad2      	subs	r2, r2, r3
 80228f2:	7bfb      	ldrb	r3, [r7, #15]
 80228f4:	4413      	add	r3, r2
 80228f6:	3b01      	subs	r3, #1
 80228f8:	2201      	movs	r2, #1
 80228fa:	fa02 f303 	lsl.w	r3, r2, r3
 80228fe:	461a      	mov	r2, r3
 8022900:	697b      	ldr	r3, [r7, #20]
 8022902:	4013      	ands	r3, r2
 8022904:	2b00      	cmp	r3, #0
 8022906:	d012      	beq.n	802292e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8022908:	69bb      	ldr	r3, [r7, #24]
 802290a:	b29a      	uxth	r2, r3
 802290c:	88fb      	ldrh	r3, [r7, #6]
 802290e:	4413      	add	r3, r2
 8022910:	b298      	uxth	r0, r3
 8022912:	4b1b      	ldr	r3, [pc, #108]	; (8022980 <DrawChar+0x16c>)
 8022914:	681a      	ldr	r2, [r3, #0]
 8022916:	491b      	ldr	r1, [pc, #108]	; (8022984 <DrawChar+0x170>)
 8022918:	4613      	mov	r3, r2
 802291a:	005b      	lsls	r3, r3, #1
 802291c:	4413      	add	r3, r2
 802291e:	009b      	lsls	r3, r3, #2
 8022920:	440b      	add	r3, r1
 8022922:	681a      	ldr	r2, [r3, #0]
 8022924:	88bb      	ldrh	r3, [r7, #4]
 8022926:	4619      	mov	r1, r3
 8022928:	f7ff ff4e 	bl	80227c8 <BSP_LCD_DrawPixel>
 802292c:	e012      	b.n	8022954 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 802292e:	69bb      	ldr	r3, [r7, #24]
 8022930:	b29a      	uxth	r2, r3
 8022932:	88fb      	ldrh	r3, [r7, #6]
 8022934:	4413      	add	r3, r2
 8022936:	b298      	uxth	r0, r3
 8022938:	4b11      	ldr	r3, [pc, #68]	; (8022980 <DrawChar+0x16c>)
 802293a:	681a      	ldr	r2, [r3, #0]
 802293c:	4911      	ldr	r1, [pc, #68]	; (8022984 <DrawChar+0x170>)
 802293e:	4613      	mov	r3, r2
 8022940:	005b      	lsls	r3, r3, #1
 8022942:	4413      	add	r3, r2
 8022944:	009b      	lsls	r3, r3, #2
 8022946:	440b      	add	r3, r1
 8022948:	3304      	adds	r3, #4
 802294a:	681a      	ldr	r2, [r3, #0]
 802294c:	88bb      	ldrh	r3, [r7, #4]
 802294e:	4619      	mov	r1, r3
 8022950:	f7ff ff3a 	bl	80227c8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8022954:	69bb      	ldr	r3, [r7, #24]
 8022956:	3301      	adds	r3, #1
 8022958:	61bb      	str	r3, [r7, #24]
 802295a:	8a3b      	ldrh	r3, [r7, #16]
 802295c:	69ba      	ldr	r2, [r7, #24]
 802295e:	429a      	cmp	r2, r3
 8022960:	d3c4      	bcc.n	80228ec <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8022962:	88bb      	ldrh	r3, [r7, #4]
 8022964:	3301      	adds	r3, #1
 8022966:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8022968:	69fb      	ldr	r3, [r7, #28]
 802296a:	3301      	adds	r3, #1
 802296c:	61fb      	str	r3, [r7, #28]
 802296e:	8a7b      	ldrh	r3, [r7, #18]
 8022970:	69fa      	ldr	r2, [r7, #28]
 8022972:	429a      	cmp	r2, r3
 8022974:	d384      	bcc.n	8022880 <DrawChar+0x6c>
  }
}
 8022976:	bf00      	nop
 8022978:	bf00      	nop
 802297a:	3720      	adds	r7, #32
 802297c:	46bd      	mov	sp, r7
 802297e:	bd80      	pop	{r7, pc}
 8022980:	200005c8 	.word	0x200005c8
 8022984:	200005cc 	.word	0x200005cc

08022988 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8022988:	b580      	push	{r7, lr}
 802298a:	b086      	sub	sp, #24
 802298c:	af02      	add	r7, sp, #8
 802298e:	60f8      	str	r0, [r7, #12]
 8022990:	60b9      	str	r1, [r7, #8]
 8022992:	607a      	str	r2, [r7, #4]
 8022994:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8022996:	4b16      	ldr	r3, [pc, #88]	; (80229f0 <FillBuffer+0x68>)
 8022998:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 802299c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 802299e:	4b14      	ldr	r3, [pc, #80]	; (80229f0 <FillBuffer+0x68>)
 80229a0:	2200      	movs	r2, #0
 80229a2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80229a4:	4a12      	ldr	r2, [pc, #72]	; (80229f0 <FillBuffer+0x68>)
 80229a6:	69bb      	ldr	r3, [r7, #24]
 80229a8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80229aa:	4b11      	ldr	r3, [pc, #68]	; (80229f0 <FillBuffer+0x68>)
 80229ac:	4a11      	ldr	r2, [pc, #68]	; (80229f4 <FillBuffer+0x6c>)
 80229ae:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80229b0:	480f      	ldr	r0, [pc, #60]	; (80229f0 <FillBuffer+0x68>)
 80229b2:	f000 fd0d 	bl	80233d0 <HAL_DMA2D_Init>
 80229b6:	4603      	mov	r3, r0
 80229b8:	2b00      	cmp	r3, #0
 80229ba:	d115      	bne.n	80229e8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80229bc:	68f9      	ldr	r1, [r7, #12]
 80229be:	480c      	ldr	r0, [pc, #48]	; (80229f0 <FillBuffer+0x68>)
 80229c0:	f000 ff74 	bl	80238ac <HAL_DMA2D_ConfigLayer>
 80229c4:	4603      	mov	r3, r0
 80229c6:	2b00      	cmp	r3, #0
 80229c8:	d10e      	bne.n	80229e8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80229ca:	68ba      	ldr	r2, [r7, #8]
 80229cc:	683b      	ldr	r3, [r7, #0]
 80229ce:	9300      	str	r3, [sp, #0]
 80229d0:	687b      	ldr	r3, [r7, #4]
 80229d2:	69f9      	ldr	r1, [r7, #28]
 80229d4:	4806      	ldr	r0, [pc, #24]	; (80229f0 <FillBuffer+0x68>)
 80229d6:	f000 fd44 	bl	8023462 <HAL_DMA2D_Start>
 80229da:	4603      	mov	r3, r0
 80229dc:	2b00      	cmp	r3, #0
 80229de:	d103      	bne.n	80229e8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80229e0:	210a      	movs	r1, #10
 80229e2:	4803      	ldr	r0, [pc, #12]	; (80229f0 <FillBuffer+0x68>)
 80229e4:	f000 fd68 	bl	80234b8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80229e8:	bf00      	nop
 80229ea:	3710      	adds	r7, #16
 80229ec:	46bd      	mov	sp, r7
 80229ee:	bd80      	pop	{r7, pc}
 80229f0:	20000558 	.word	0x20000558
 80229f4:	4002b000 	.word	0x4002b000

080229f8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80229f8:	b580      	push	{r7, lr}
 80229fa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80229fc:	4b29      	ldr	r3, [pc, #164]	; (8022aa4 <BSP_SDRAM_Init+0xac>)
 80229fe:	4a2a      	ldr	r2, [pc, #168]	; (8022aa8 <BSP_SDRAM_Init+0xb0>)
 8022a00:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8022a02:	4b2a      	ldr	r3, [pc, #168]	; (8022aac <BSP_SDRAM_Init+0xb4>)
 8022a04:	2202      	movs	r2, #2
 8022a06:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8022a08:	4b28      	ldr	r3, [pc, #160]	; (8022aac <BSP_SDRAM_Init+0xb4>)
 8022a0a:	2207      	movs	r2, #7
 8022a0c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8022a0e:	4b27      	ldr	r3, [pc, #156]	; (8022aac <BSP_SDRAM_Init+0xb4>)
 8022a10:	2204      	movs	r2, #4
 8022a12:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8022a14:	4b25      	ldr	r3, [pc, #148]	; (8022aac <BSP_SDRAM_Init+0xb4>)
 8022a16:	2207      	movs	r2, #7
 8022a18:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8022a1a:	4b24      	ldr	r3, [pc, #144]	; (8022aac <BSP_SDRAM_Init+0xb4>)
 8022a1c:	2202      	movs	r2, #2
 8022a1e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8022a20:	4b22      	ldr	r3, [pc, #136]	; (8022aac <BSP_SDRAM_Init+0xb4>)
 8022a22:	2202      	movs	r2, #2
 8022a24:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8022a26:	4b21      	ldr	r3, [pc, #132]	; (8022aac <BSP_SDRAM_Init+0xb4>)
 8022a28:	2202      	movs	r2, #2
 8022a2a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8022a2c:	4b1d      	ldr	r3, [pc, #116]	; (8022aa4 <BSP_SDRAM_Init+0xac>)
 8022a2e:	2201      	movs	r2, #1
 8022a30:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8022a32:	4b1c      	ldr	r3, [pc, #112]	; (8022aa4 <BSP_SDRAM_Init+0xac>)
 8022a34:	2200      	movs	r2, #0
 8022a36:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8022a38:	4b1a      	ldr	r3, [pc, #104]	; (8022aa4 <BSP_SDRAM_Init+0xac>)
 8022a3a:	2204      	movs	r2, #4
 8022a3c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8022a3e:	4b19      	ldr	r3, [pc, #100]	; (8022aa4 <BSP_SDRAM_Init+0xac>)
 8022a40:	2210      	movs	r2, #16
 8022a42:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8022a44:	4b17      	ldr	r3, [pc, #92]	; (8022aa4 <BSP_SDRAM_Init+0xac>)
 8022a46:	2240      	movs	r2, #64	; 0x40
 8022a48:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8022a4a:	4b16      	ldr	r3, [pc, #88]	; (8022aa4 <BSP_SDRAM_Init+0xac>)
 8022a4c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8022a50:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8022a52:	4b14      	ldr	r3, [pc, #80]	; (8022aa4 <BSP_SDRAM_Init+0xac>)
 8022a54:	2200      	movs	r2, #0
 8022a56:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8022a58:	4b12      	ldr	r3, [pc, #72]	; (8022aa4 <BSP_SDRAM_Init+0xac>)
 8022a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8022a5e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8022a60:	4b10      	ldr	r3, [pc, #64]	; (8022aa4 <BSP_SDRAM_Init+0xac>)
 8022a62:	2200      	movs	r2, #0
 8022a64:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8022a66:	4b0f      	ldr	r3, [pc, #60]	; (8022aa4 <BSP_SDRAM_Init+0xac>)
 8022a68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8022a6c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8022a6e:	2100      	movs	r1, #0
 8022a70:	480c      	ldr	r0, [pc, #48]	; (8022aa4 <BSP_SDRAM_Init+0xac>)
 8022a72:	f000 f87f 	bl	8022b74 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8022a76:	490d      	ldr	r1, [pc, #52]	; (8022aac <BSP_SDRAM_Init+0xb4>)
 8022a78:	480a      	ldr	r0, [pc, #40]	; (8022aa4 <BSP_SDRAM_Init+0xac>)
 8022a7a:	f004 fb93 	bl	80271a4 <HAL_SDRAM_Init>
 8022a7e:	4603      	mov	r3, r0
 8022a80:	2b00      	cmp	r3, #0
 8022a82:	d003      	beq.n	8022a8c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8022a84:	4b0a      	ldr	r3, [pc, #40]	; (8022ab0 <BSP_SDRAM_Init+0xb8>)
 8022a86:	2201      	movs	r2, #1
 8022a88:	701a      	strb	r2, [r3, #0]
 8022a8a:	e002      	b.n	8022a92 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8022a8c:	4b08      	ldr	r3, [pc, #32]	; (8022ab0 <BSP_SDRAM_Init+0xb8>)
 8022a8e:	2200      	movs	r2, #0
 8022a90:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8022a92:	f240 506a 	movw	r0, #1386	; 0x56a
 8022a96:	f000 f80d 	bl	8022ab4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8022a9a:	4b05      	ldr	r3, [pc, #20]	; (8022ab0 <BSP_SDRAM_Init+0xb8>)
 8022a9c:	781b      	ldrb	r3, [r3, #0]
}
 8022a9e:	4618      	mov	r0, r3
 8022aa0:	bd80      	pop	{r7, pc}
 8022aa2:	bf00      	nop
 8022aa4:	200005e8 	.word	0x200005e8
 8022aa8:	a0000140 	.word	0xa0000140
 8022aac:	2000061c 	.word	0x2000061c
 8022ab0:	20000050 	.word	0x20000050

08022ab4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8022ab4:	b580      	push	{r7, lr}
 8022ab6:	b084      	sub	sp, #16
 8022ab8:	af00      	add	r7, sp, #0
 8022aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8022abc:	2300      	movs	r3, #0
 8022abe:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8022ac0:	4b2a      	ldr	r3, [pc, #168]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022ac2:	2201      	movs	r2, #1
 8022ac4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8022ac6:	4b29      	ldr	r3, [pc, #164]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022ac8:	2208      	movs	r2, #8
 8022aca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8022acc:	4b27      	ldr	r3, [pc, #156]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022ace:	2201      	movs	r2, #1
 8022ad0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8022ad2:	4b26      	ldr	r3, [pc, #152]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022ad4:	2200      	movs	r2, #0
 8022ad6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8022ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022adc:	4923      	ldr	r1, [pc, #140]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022ade:	4824      	ldr	r0, [pc, #144]	; (8022b70 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022ae0:	f004 fb94 	bl	802720c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8022ae4:	2001      	movs	r0, #1
 8022ae6:	f000 f993 	bl	8022e10 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8022aea:	4b20      	ldr	r3, [pc, #128]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022aec:	2202      	movs	r2, #2
 8022aee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8022af0:	4b1e      	ldr	r3, [pc, #120]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022af2:	2208      	movs	r2, #8
 8022af4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8022af6:	4b1d      	ldr	r3, [pc, #116]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022af8:	2201      	movs	r2, #1
 8022afa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8022afc:	4b1b      	ldr	r3, [pc, #108]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022afe:	2200      	movs	r2, #0
 8022b00:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8022b02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022b06:	4919      	ldr	r1, [pc, #100]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022b08:	4819      	ldr	r0, [pc, #100]	; (8022b70 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022b0a:	f004 fb7f 	bl	802720c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8022b0e:	4b17      	ldr	r3, [pc, #92]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022b10:	2203      	movs	r2, #3
 8022b12:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8022b14:	4b15      	ldr	r3, [pc, #84]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022b16:	2208      	movs	r2, #8
 8022b18:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8022b1a:	4b14      	ldr	r3, [pc, #80]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022b1c:	2204      	movs	r2, #4
 8022b1e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8022b20:	4b12      	ldr	r3, [pc, #72]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022b22:	2200      	movs	r2, #0
 8022b24:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8022b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022b2a:	4910      	ldr	r1, [pc, #64]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022b2c:	4810      	ldr	r0, [pc, #64]	; (8022b70 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022b2e:	f004 fb6d 	bl	802720c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8022b32:	f44f 730c 	mov.w	r3, #560	; 0x230
 8022b36:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8022b38:	4b0c      	ldr	r3, [pc, #48]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022b3a:	2204      	movs	r2, #4
 8022b3c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8022b3e:	4b0b      	ldr	r3, [pc, #44]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022b40:	2208      	movs	r2, #8
 8022b42:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8022b44:	4b09      	ldr	r3, [pc, #36]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022b46:	2201      	movs	r2, #1
 8022b48:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8022b4a:	68fb      	ldr	r3, [r7, #12]
 8022b4c:	4a07      	ldr	r2, [pc, #28]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022b4e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8022b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022b54:	4905      	ldr	r1, [pc, #20]	; (8022b6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022b56:	4806      	ldr	r0, [pc, #24]	; (8022b70 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022b58:	f004 fb58 	bl	802720c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8022b5c:	6879      	ldr	r1, [r7, #4]
 8022b5e:	4804      	ldr	r0, [pc, #16]	; (8022b70 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022b60:	f004 fb89 	bl	8027276 <HAL_SDRAM_ProgramRefreshRate>
}
 8022b64:	bf00      	nop
 8022b66:	3710      	adds	r7, #16
 8022b68:	46bd      	mov	sp, r7
 8022b6a:	bd80      	pop	{r7, pc}
 8022b6c:	20000638 	.word	0x20000638
 8022b70:	200005e8 	.word	0x200005e8

08022b74 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8022b74:	b580      	push	{r7, lr}
 8022b76:	b090      	sub	sp, #64	; 0x40
 8022b78:	af00      	add	r7, sp, #0
 8022b7a:	6078      	str	r0, [r7, #4]
 8022b7c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8022b7e:	687b      	ldr	r3, [r7, #4]
 8022b80:	2b00      	cmp	r3, #0
 8022b82:	f000 80ec 	beq.w	8022d5e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8022b86:	2300      	movs	r3, #0
 8022b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8022b8a:	4b77      	ldr	r3, [pc, #476]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b8e:	4a76      	ldr	r2, [pc, #472]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022b90:	f043 0301 	orr.w	r3, r3, #1
 8022b94:	6393      	str	r3, [r2, #56]	; 0x38
 8022b96:	4b74      	ldr	r3, [pc, #464]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b9a:	f003 0301 	and.w	r3, r3, #1
 8022b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8022ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8022ba2:	2300      	movs	r3, #0
 8022ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8022ba6:	4b70      	ldr	r3, [pc, #448]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022baa:	4a6f      	ldr	r2, [pc, #444]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022bac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8022bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8022bb2:	4b6d      	ldr	r3, [pc, #436]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022bba:	627b      	str	r3, [r7, #36]	; 0x24
 8022bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8022bbe:	2300      	movs	r3, #0
 8022bc0:	623b      	str	r3, [r7, #32]
 8022bc2:	4b69      	ldr	r3, [pc, #420]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022bc6:	4a68      	ldr	r2, [pc, #416]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022bc8:	f043 0302 	orr.w	r3, r3, #2
 8022bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8022bce:	4b66      	ldr	r3, [pc, #408]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022bd2:	f003 0302 	and.w	r3, r3, #2
 8022bd6:	623b      	str	r3, [r7, #32]
 8022bd8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8022bda:	2300      	movs	r3, #0
 8022bdc:	61fb      	str	r3, [r7, #28]
 8022bde:	4b62      	ldr	r3, [pc, #392]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022be2:	4a61      	ldr	r2, [pc, #388]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022be4:	f043 0304 	orr.w	r3, r3, #4
 8022be8:	6313      	str	r3, [r2, #48]	; 0x30
 8022bea:	4b5f      	ldr	r3, [pc, #380]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022bee:	f003 0304 	and.w	r3, r3, #4
 8022bf2:	61fb      	str	r3, [r7, #28]
 8022bf4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8022bf6:	2300      	movs	r3, #0
 8022bf8:	61bb      	str	r3, [r7, #24]
 8022bfa:	4b5b      	ldr	r3, [pc, #364]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022bfe:	4a5a      	ldr	r2, [pc, #360]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022c00:	f043 0308 	orr.w	r3, r3, #8
 8022c04:	6313      	str	r3, [r2, #48]	; 0x30
 8022c06:	4b58      	ldr	r3, [pc, #352]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c0a:	f003 0308 	and.w	r3, r3, #8
 8022c0e:	61bb      	str	r3, [r7, #24]
 8022c10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8022c12:	2300      	movs	r3, #0
 8022c14:	617b      	str	r3, [r7, #20]
 8022c16:	4b54      	ldr	r3, [pc, #336]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c1a:	4a53      	ldr	r2, [pc, #332]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022c1c:	f043 0310 	orr.w	r3, r3, #16
 8022c20:	6313      	str	r3, [r2, #48]	; 0x30
 8022c22:	4b51      	ldr	r3, [pc, #324]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c26:	f003 0310 	and.w	r3, r3, #16
 8022c2a:	617b      	str	r3, [r7, #20]
 8022c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8022c2e:	2300      	movs	r3, #0
 8022c30:	613b      	str	r3, [r7, #16]
 8022c32:	4b4d      	ldr	r3, [pc, #308]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c36:	4a4c      	ldr	r2, [pc, #304]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022c38:	f043 0320 	orr.w	r3, r3, #32
 8022c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8022c3e:	4b4a      	ldr	r3, [pc, #296]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c42:	f003 0320 	and.w	r3, r3, #32
 8022c46:	613b      	str	r3, [r7, #16]
 8022c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8022c4a:	2300      	movs	r3, #0
 8022c4c:	60fb      	str	r3, [r7, #12]
 8022c4e:	4b46      	ldr	r3, [pc, #280]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c52:	4a45      	ldr	r2, [pc, #276]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022c58:	6313      	str	r3, [r2, #48]	; 0x30
 8022c5a:	4b43      	ldr	r3, [pc, #268]	; (8022d68 <BSP_SDRAM_MspInit+0x1f4>)
 8022c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022c62:	60fb      	str	r3, [r7, #12]
 8022c64:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8022c66:	2302      	movs	r3, #2
 8022c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8022c6a:	2302      	movs	r3, #2
 8022c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8022c6e:	2300      	movs	r3, #0
 8022c70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8022c72:	230c      	movs	r3, #12
 8022c74:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8022c76:	2360      	movs	r3, #96	; 0x60
 8022c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8022c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022c7e:	4619      	mov	r1, r3
 8022c80:	483a      	ldr	r0, [pc, #232]	; (8022d6c <BSP_SDRAM_MspInit+0x1f8>)
 8022c82:	f000 ff41 	bl	8023b08 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8022c86:	2301      	movs	r3, #1
 8022c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8022c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022c8e:	4619      	mov	r1, r3
 8022c90:	4837      	ldr	r0, [pc, #220]	; (8022d70 <BSP_SDRAM_MspInit+0x1fc>)
 8022c92:	f000 ff39 	bl	8023b08 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8022c96:	f24c 7303 	movw	r3, #50947	; 0xc703
 8022c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8022c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022ca0:	4619      	mov	r1, r3
 8022ca2:	4834      	ldr	r0, [pc, #208]	; (8022d74 <BSP_SDRAM_MspInit+0x200>)
 8022ca4:	f000 ff30 	bl	8023b08 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8022ca8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8022cac:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8022cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022cb2:	4619      	mov	r1, r3
 8022cb4:	4830      	ldr	r0, [pc, #192]	; (8022d78 <BSP_SDRAM_MspInit+0x204>)
 8022cb6:	f000 ff27 	bl	8023b08 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8022cba:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8022cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8022cc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022cc4:	4619      	mov	r1, r3
 8022cc6:	482d      	ldr	r0, [pc, #180]	; (8022d7c <BSP_SDRAM_MspInit+0x208>)
 8022cc8:	f000 ff1e 	bl	8023b08 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8022ccc:	f248 1333 	movw	r3, #33075	; 0x8133
 8022cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022cd6:	4619      	mov	r1, r3
 8022cd8:	4829      	ldr	r0, [pc, #164]	; (8022d80 <BSP_SDRAM_MspInit+0x20c>)
 8022cda:	f000 ff15 	bl	8023b08 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8022cde:	4b29      	ldr	r3, [pc, #164]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022ce0:	2200      	movs	r2, #0
 8022ce2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8022ce4:	4b27      	ldr	r3, [pc, #156]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022ce6:	2280      	movs	r2, #128	; 0x80
 8022ce8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8022cea:	4b26      	ldr	r3, [pc, #152]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8022cf0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8022cf2:	4b24      	ldr	r3, [pc, #144]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8022cf8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8022cfa:	4b22      	ldr	r3, [pc, #136]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022cfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8022d00:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8022d02:	4b20      	ldr	r3, [pc, #128]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022d04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8022d08:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8022d0a:	4b1e      	ldr	r3, [pc, #120]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022d0c:	2200      	movs	r2, #0
 8022d0e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8022d10:	4b1c      	ldr	r3, [pc, #112]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022d12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8022d16:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8022d18:	4b1a      	ldr	r3, [pc, #104]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022d1a:	2200      	movs	r2, #0
 8022d1c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8022d1e:	4b19      	ldr	r3, [pc, #100]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022d20:	2203      	movs	r2, #3
 8022d22:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8022d24:	4b17      	ldr	r3, [pc, #92]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022d26:	2200      	movs	r2, #0
 8022d28:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8022d2a:	4b16      	ldr	r3, [pc, #88]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022d2c:	2200      	movs	r2, #0
 8022d2e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8022d30:	4b14      	ldr	r3, [pc, #80]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022d32:	4a15      	ldr	r2, [pc, #84]	; (8022d88 <BSP_SDRAM_MspInit+0x214>)
 8022d34:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8022d36:	687b      	ldr	r3, [r7, #4]
 8022d38:	4a12      	ldr	r2, [pc, #72]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8022d3c:	4a11      	ldr	r2, [pc, #68]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022d3e:	687b      	ldr	r3, [r7, #4]
 8022d40:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8022d42:	4810      	ldr	r0, [pc, #64]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022d44:	f000 fa34 	bl	80231b0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8022d48:	480e      	ldr	r0, [pc, #56]	; (8022d84 <BSP_SDRAM_MspInit+0x210>)
 8022d4a:	f000 f983 	bl	8023054 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8022d4e:	2200      	movs	r2, #0
 8022d50:	210f      	movs	r1, #15
 8022d52:	2038      	movs	r0, #56	; 0x38
 8022d54:	f000 f938 	bl	8022fc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8022d58:	2038      	movs	r0, #56	; 0x38
 8022d5a:	f000 f951 	bl	8023000 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8022d5e:	bf00      	nop
 8022d60:	3740      	adds	r7, #64	; 0x40
 8022d62:	46bd      	mov	sp, r7
 8022d64:	bd80      	pop	{r7, pc}
 8022d66:	bf00      	nop
 8022d68:	40023800 	.word	0x40023800
 8022d6c:	40020400 	.word	0x40020400
 8022d70:	40020800 	.word	0x40020800
 8022d74:	40020c00 	.word	0x40020c00
 8022d78:	40021000 	.word	0x40021000
 8022d7c:	40021400 	.word	0x40021400
 8022d80:	40021800 	.word	0x40021800
 8022d84:	20000648 	.word	0x20000648
 8022d88:	40026410 	.word	0x40026410

08022d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8022d8c:	b580      	push	{r7, lr}
 8022d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8022d90:	4b0e      	ldr	r3, [pc, #56]	; (8022dcc <HAL_Init+0x40>)
 8022d92:	681b      	ldr	r3, [r3, #0]
 8022d94:	4a0d      	ldr	r2, [pc, #52]	; (8022dcc <HAL_Init+0x40>)
 8022d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8022d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8022d9c:	4b0b      	ldr	r3, [pc, #44]	; (8022dcc <HAL_Init+0x40>)
 8022d9e:	681b      	ldr	r3, [r3, #0]
 8022da0:	4a0a      	ldr	r2, [pc, #40]	; (8022dcc <HAL_Init+0x40>)
 8022da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8022da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8022da8:	4b08      	ldr	r3, [pc, #32]	; (8022dcc <HAL_Init+0x40>)
 8022daa:	681b      	ldr	r3, [r3, #0]
 8022dac:	4a07      	ldr	r2, [pc, #28]	; (8022dcc <HAL_Init+0x40>)
 8022dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8022db4:	2003      	movs	r0, #3
 8022db6:	f000 f8fc 	bl	8022fb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8022dba:	200f      	movs	r0, #15
 8022dbc:	f7fe fc38 	bl	8021630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8022dc0:	f7fe f866 	bl	8020e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8022dc4:	2300      	movs	r3, #0
}
 8022dc6:	4618      	mov	r0, r3
 8022dc8:	bd80      	pop	{r7, pc}
 8022dca:	bf00      	nop
 8022dcc:	40023c00 	.word	0x40023c00

08022dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8022dd0:	b480      	push	{r7}
 8022dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8022dd4:	4b06      	ldr	r3, [pc, #24]	; (8022df0 <HAL_IncTick+0x20>)
 8022dd6:	781b      	ldrb	r3, [r3, #0]
 8022dd8:	461a      	mov	r2, r3
 8022dda:	4b06      	ldr	r3, [pc, #24]	; (8022df4 <HAL_IncTick+0x24>)
 8022ddc:	681b      	ldr	r3, [r3, #0]
 8022dde:	4413      	add	r3, r2
 8022de0:	4a04      	ldr	r2, [pc, #16]	; (8022df4 <HAL_IncTick+0x24>)
 8022de2:	6013      	str	r3, [r2, #0]
}
 8022de4:	bf00      	nop
 8022de6:	46bd      	mov	sp, r7
 8022de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dec:	4770      	bx	lr
 8022dee:	bf00      	nop
 8022df0:	20000058 	.word	0x20000058
 8022df4:	200006a8 	.word	0x200006a8

08022df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8022df8:	b480      	push	{r7}
 8022dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8022dfc:	4b03      	ldr	r3, [pc, #12]	; (8022e0c <HAL_GetTick+0x14>)
 8022dfe:	681b      	ldr	r3, [r3, #0]
}
 8022e00:	4618      	mov	r0, r3
 8022e02:	46bd      	mov	sp, r7
 8022e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e08:	4770      	bx	lr
 8022e0a:	bf00      	nop
 8022e0c:	200006a8 	.word	0x200006a8

08022e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8022e10:	b580      	push	{r7, lr}
 8022e12:	b084      	sub	sp, #16
 8022e14:	af00      	add	r7, sp, #0
 8022e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8022e18:	f7ff ffee 	bl	8022df8 <HAL_GetTick>
 8022e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8022e1e:	687b      	ldr	r3, [r7, #4]
 8022e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8022e22:	68fb      	ldr	r3, [r7, #12]
 8022e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022e28:	d005      	beq.n	8022e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8022e2a:	4b0a      	ldr	r3, [pc, #40]	; (8022e54 <HAL_Delay+0x44>)
 8022e2c:	781b      	ldrb	r3, [r3, #0]
 8022e2e:	461a      	mov	r2, r3
 8022e30:	68fb      	ldr	r3, [r7, #12]
 8022e32:	4413      	add	r3, r2
 8022e34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8022e36:	bf00      	nop
 8022e38:	f7ff ffde 	bl	8022df8 <HAL_GetTick>
 8022e3c:	4602      	mov	r2, r0
 8022e3e:	68bb      	ldr	r3, [r7, #8]
 8022e40:	1ad3      	subs	r3, r2, r3
 8022e42:	68fa      	ldr	r2, [r7, #12]
 8022e44:	429a      	cmp	r2, r3
 8022e46:	d8f7      	bhi.n	8022e38 <HAL_Delay+0x28>
  {
  }
}
 8022e48:	bf00      	nop
 8022e4a:	bf00      	nop
 8022e4c:	3710      	adds	r7, #16
 8022e4e:	46bd      	mov	sp, r7
 8022e50:	bd80      	pop	{r7, pc}
 8022e52:	bf00      	nop
 8022e54:	20000058 	.word	0x20000058

08022e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022e58:	b480      	push	{r7}
 8022e5a:	b085      	sub	sp, #20
 8022e5c:	af00      	add	r7, sp, #0
 8022e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8022e60:	687b      	ldr	r3, [r7, #4]
 8022e62:	f003 0307 	and.w	r3, r3, #7
 8022e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8022e68:	4b0c      	ldr	r3, [pc, #48]	; (8022e9c <__NVIC_SetPriorityGrouping+0x44>)
 8022e6a:	68db      	ldr	r3, [r3, #12]
 8022e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8022e6e:	68ba      	ldr	r2, [r7, #8]
 8022e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8022e74:	4013      	ands	r3, r2
 8022e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8022e78:	68fb      	ldr	r3, [r7, #12]
 8022e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8022e7c:	68bb      	ldr	r3, [r7, #8]
 8022e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8022e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8022e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8022e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8022e8a:	4a04      	ldr	r2, [pc, #16]	; (8022e9c <__NVIC_SetPriorityGrouping+0x44>)
 8022e8c:	68bb      	ldr	r3, [r7, #8]
 8022e8e:	60d3      	str	r3, [r2, #12]
}
 8022e90:	bf00      	nop
 8022e92:	3714      	adds	r7, #20
 8022e94:	46bd      	mov	sp, r7
 8022e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e9a:	4770      	bx	lr
 8022e9c:	e000ed00 	.word	0xe000ed00

08022ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8022ea0:	b480      	push	{r7}
 8022ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8022ea4:	4b04      	ldr	r3, [pc, #16]	; (8022eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8022ea6:	68db      	ldr	r3, [r3, #12]
 8022ea8:	0a1b      	lsrs	r3, r3, #8
 8022eaa:	f003 0307 	and.w	r3, r3, #7
}
 8022eae:	4618      	mov	r0, r3
 8022eb0:	46bd      	mov	sp, r7
 8022eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022eb6:	4770      	bx	lr
 8022eb8:	e000ed00 	.word	0xe000ed00

08022ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8022ebc:	b480      	push	{r7}
 8022ebe:	b083      	sub	sp, #12
 8022ec0:	af00      	add	r7, sp, #0
 8022ec2:	4603      	mov	r3, r0
 8022ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022eca:	2b00      	cmp	r3, #0
 8022ecc:	db0b      	blt.n	8022ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8022ece:	79fb      	ldrb	r3, [r7, #7]
 8022ed0:	f003 021f 	and.w	r2, r3, #31
 8022ed4:	4907      	ldr	r1, [pc, #28]	; (8022ef4 <__NVIC_EnableIRQ+0x38>)
 8022ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022eda:	095b      	lsrs	r3, r3, #5
 8022edc:	2001      	movs	r0, #1
 8022ede:	fa00 f202 	lsl.w	r2, r0, r2
 8022ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8022ee6:	bf00      	nop
 8022ee8:	370c      	adds	r7, #12
 8022eea:	46bd      	mov	sp, r7
 8022eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ef0:	4770      	bx	lr
 8022ef2:	bf00      	nop
 8022ef4:	e000e100 	.word	0xe000e100

08022ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8022ef8:	b480      	push	{r7}
 8022efa:	b083      	sub	sp, #12
 8022efc:	af00      	add	r7, sp, #0
 8022efe:	4603      	mov	r3, r0
 8022f00:	6039      	str	r1, [r7, #0]
 8022f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022f08:	2b00      	cmp	r3, #0
 8022f0a:	db0a      	blt.n	8022f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022f0c:	683b      	ldr	r3, [r7, #0]
 8022f0e:	b2da      	uxtb	r2, r3
 8022f10:	490c      	ldr	r1, [pc, #48]	; (8022f44 <__NVIC_SetPriority+0x4c>)
 8022f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022f16:	0112      	lsls	r2, r2, #4
 8022f18:	b2d2      	uxtb	r2, r2
 8022f1a:	440b      	add	r3, r1
 8022f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8022f20:	e00a      	b.n	8022f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022f22:	683b      	ldr	r3, [r7, #0]
 8022f24:	b2da      	uxtb	r2, r3
 8022f26:	4908      	ldr	r1, [pc, #32]	; (8022f48 <__NVIC_SetPriority+0x50>)
 8022f28:	79fb      	ldrb	r3, [r7, #7]
 8022f2a:	f003 030f 	and.w	r3, r3, #15
 8022f2e:	3b04      	subs	r3, #4
 8022f30:	0112      	lsls	r2, r2, #4
 8022f32:	b2d2      	uxtb	r2, r2
 8022f34:	440b      	add	r3, r1
 8022f36:	761a      	strb	r2, [r3, #24]
}
 8022f38:	bf00      	nop
 8022f3a:	370c      	adds	r7, #12
 8022f3c:	46bd      	mov	sp, r7
 8022f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f42:	4770      	bx	lr
 8022f44:	e000e100 	.word	0xe000e100
 8022f48:	e000ed00 	.word	0xe000ed00

08022f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8022f4c:	b480      	push	{r7}
 8022f4e:	b089      	sub	sp, #36	; 0x24
 8022f50:	af00      	add	r7, sp, #0
 8022f52:	60f8      	str	r0, [r7, #12]
 8022f54:	60b9      	str	r1, [r7, #8]
 8022f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8022f58:	68fb      	ldr	r3, [r7, #12]
 8022f5a:	f003 0307 	and.w	r3, r3, #7
 8022f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8022f60:	69fb      	ldr	r3, [r7, #28]
 8022f62:	f1c3 0307 	rsb	r3, r3, #7
 8022f66:	2b04      	cmp	r3, #4
 8022f68:	bf28      	it	cs
 8022f6a:	2304      	movcs	r3, #4
 8022f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8022f6e:	69fb      	ldr	r3, [r7, #28]
 8022f70:	3304      	adds	r3, #4
 8022f72:	2b06      	cmp	r3, #6
 8022f74:	d902      	bls.n	8022f7c <NVIC_EncodePriority+0x30>
 8022f76:	69fb      	ldr	r3, [r7, #28]
 8022f78:	3b03      	subs	r3, #3
 8022f7a:	e000      	b.n	8022f7e <NVIC_EncodePriority+0x32>
 8022f7c:	2300      	movs	r3, #0
 8022f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022f80:	f04f 32ff 	mov.w	r2, #4294967295
 8022f84:	69bb      	ldr	r3, [r7, #24]
 8022f86:	fa02 f303 	lsl.w	r3, r2, r3
 8022f8a:	43da      	mvns	r2, r3
 8022f8c:	68bb      	ldr	r3, [r7, #8]
 8022f8e:	401a      	ands	r2, r3
 8022f90:	697b      	ldr	r3, [r7, #20]
 8022f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8022f94:	f04f 31ff 	mov.w	r1, #4294967295
 8022f98:	697b      	ldr	r3, [r7, #20]
 8022f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8022f9e:	43d9      	mvns	r1, r3
 8022fa0:	687b      	ldr	r3, [r7, #4]
 8022fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022fa4:	4313      	orrs	r3, r2
         );
}
 8022fa6:	4618      	mov	r0, r3
 8022fa8:	3724      	adds	r7, #36	; 0x24
 8022faa:	46bd      	mov	sp, r7
 8022fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fb0:	4770      	bx	lr

08022fb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022fb2:	b580      	push	{r7, lr}
 8022fb4:	b082      	sub	sp, #8
 8022fb6:	af00      	add	r7, sp, #0
 8022fb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8022fba:	6878      	ldr	r0, [r7, #4]
 8022fbc:	f7ff ff4c 	bl	8022e58 <__NVIC_SetPriorityGrouping>
}
 8022fc0:	bf00      	nop
 8022fc2:	3708      	adds	r7, #8
 8022fc4:	46bd      	mov	sp, r7
 8022fc6:	bd80      	pop	{r7, pc}

08022fc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8022fc8:	b580      	push	{r7, lr}
 8022fca:	b086      	sub	sp, #24
 8022fcc:	af00      	add	r7, sp, #0
 8022fce:	4603      	mov	r3, r0
 8022fd0:	60b9      	str	r1, [r7, #8]
 8022fd2:	607a      	str	r2, [r7, #4]
 8022fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8022fd6:	2300      	movs	r3, #0
 8022fd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8022fda:	f7ff ff61 	bl	8022ea0 <__NVIC_GetPriorityGrouping>
 8022fde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8022fe0:	687a      	ldr	r2, [r7, #4]
 8022fe2:	68b9      	ldr	r1, [r7, #8]
 8022fe4:	6978      	ldr	r0, [r7, #20]
 8022fe6:	f7ff ffb1 	bl	8022f4c <NVIC_EncodePriority>
 8022fea:	4602      	mov	r2, r0
 8022fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022ff0:	4611      	mov	r1, r2
 8022ff2:	4618      	mov	r0, r3
 8022ff4:	f7ff ff80 	bl	8022ef8 <__NVIC_SetPriority>
}
 8022ff8:	bf00      	nop
 8022ffa:	3718      	adds	r7, #24
 8022ffc:	46bd      	mov	sp, r7
 8022ffe:	bd80      	pop	{r7, pc}

08023000 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023000:	b580      	push	{r7, lr}
 8023002:	b082      	sub	sp, #8
 8023004:	af00      	add	r7, sp, #0
 8023006:	4603      	mov	r3, r0
 8023008:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802300e:	4618      	mov	r0, r3
 8023010:	f7ff ff54 	bl	8022ebc <__NVIC_EnableIRQ>
}
 8023014:	bf00      	nop
 8023016:	3708      	adds	r7, #8
 8023018:	46bd      	mov	sp, r7
 802301a:	bd80      	pop	{r7, pc}

0802301c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 802301c:	b580      	push	{r7, lr}
 802301e:	b082      	sub	sp, #8
 8023020:	af00      	add	r7, sp, #0
 8023022:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8023024:	687b      	ldr	r3, [r7, #4]
 8023026:	2b00      	cmp	r3, #0
 8023028:	d101      	bne.n	802302e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 802302a:	2301      	movs	r3, #1
 802302c:	e00e      	b.n	802304c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 802302e:	687b      	ldr	r3, [r7, #4]
 8023030:	795b      	ldrb	r3, [r3, #5]
 8023032:	b2db      	uxtb	r3, r3
 8023034:	2b00      	cmp	r3, #0
 8023036:	d105      	bne.n	8023044 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8023038:	687b      	ldr	r3, [r7, #4]
 802303a:	2200      	movs	r2, #0
 802303c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 802303e:	6878      	ldr	r0, [r7, #4]
 8023040:	f7fd ff4e 	bl	8020ee0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8023044:	687b      	ldr	r3, [r7, #4]
 8023046:	2201      	movs	r2, #1
 8023048:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802304a:	2300      	movs	r3, #0
}
 802304c:	4618      	mov	r0, r3
 802304e:	3708      	adds	r7, #8
 8023050:	46bd      	mov	sp, r7
 8023052:	bd80      	pop	{r7, pc}

08023054 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8023054:	b580      	push	{r7, lr}
 8023056:	b086      	sub	sp, #24
 8023058:	af00      	add	r7, sp, #0
 802305a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 802305c:	2300      	movs	r3, #0
 802305e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8023060:	f7ff feca 	bl	8022df8 <HAL_GetTick>
 8023064:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8023066:	687b      	ldr	r3, [r7, #4]
 8023068:	2b00      	cmp	r3, #0
 802306a:	d101      	bne.n	8023070 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 802306c:	2301      	movs	r3, #1
 802306e:	e099      	b.n	80231a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8023070:	687b      	ldr	r3, [r7, #4]
 8023072:	2202      	movs	r2, #2
 8023074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8023078:	687b      	ldr	r3, [r7, #4]
 802307a:	2200      	movs	r2, #0
 802307c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8023080:	687b      	ldr	r3, [r7, #4]
 8023082:	681b      	ldr	r3, [r3, #0]
 8023084:	681a      	ldr	r2, [r3, #0]
 8023086:	687b      	ldr	r3, [r7, #4]
 8023088:	681b      	ldr	r3, [r3, #0]
 802308a:	f022 0201 	bic.w	r2, r2, #1
 802308e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023090:	e00f      	b.n	80230b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8023092:	f7ff feb1 	bl	8022df8 <HAL_GetTick>
 8023096:	4602      	mov	r2, r0
 8023098:	693b      	ldr	r3, [r7, #16]
 802309a:	1ad3      	subs	r3, r2, r3
 802309c:	2b05      	cmp	r3, #5
 802309e:	d908      	bls.n	80230b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80230a0:	687b      	ldr	r3, [r7, #4]
 80230a2:	2220      	movs	r2, #32
 80230a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80230a6:	687b      	ldr	r3, [r7, #4]
 80230a8:	2203      	movs	r2, #3
 80230aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80230ae:	2303      	movs	r3, #3
 80230b0:	e078      	b.n	80231a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80230b2:	687b      	ldr	r3, [r7, #4]
 80230b4:	681b      	ldr	r3, [r3, #0]
 80230b6:	681b      	ldr	r3, [r3, #0]
 80230b8:	f003 0301 	and.w	r3, r3, #1
 80230bc:	2b00      	cmp	r3, #0
 80230be:	d1e8      	bne.n	8023092 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80230c0:	687b      	ldr	r3, [r7, #4]
 80230c2:	681b      	ldr	r3, [r3, #0]
 80230c4:	681b      	ldr	r3, [r3, #0]
 80230c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80230c8:	697a      	ldr	r2, [r7, #20]
 80230ca:	4b38      	ldr	r3, [pc, #224]	; (80231ac <HAL_DMA_Init+0x158>)
 80230cc:	4013      	ands	r3, r2
 80230ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80230d0:	687b      	ldr	r3, [r7, #4]
 80230d2:	685a      	ldr	r2, [r3, #4]
 80230d4:	687b      	ldr	r3, [r7, #4]
 80230d6:	689b      	ldr	r3, [r3, #8]
 80230d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80230da:	687b      	ldr	r3, [r7, #4]
 80230dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80230de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80230e0:	687b      	ldr	r3, [r7, #4]
 80230e2:	691b      	ldr	r3, [r3, #16]
 80230e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80230e6:	687b      	ldr	r3, [r7, #4]
 80230e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80230ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80230ec:	687b      	ldr	r3, [r7, #4]
 80230ee:	699b      	ldr	r3, [r3, #24]
 80230f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80230f2:	687b      	ldr	r3, [r7, #4]
 80230f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80230f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80230f8:	687b      	ldr	r3, [r7, #4]
 80230fa:	6a1b      	ldr	r3, [r3, #32]
 80230fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80230fe:	697a      	ldr	r2, [r7, #20]
 8023100:	4313      	orrs	r3, r2
 8023102:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8023104:	687b      	ldr	r3, [r7, #4]
 8023106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023108:	2b04      	cmp	r3, #4
 802310a:	d107      	bne.n	802311c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802310c:	687b      	ldr	r3, [r7, #4]
 802310e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023110:	687b      	ldr	r3, [r7, #4]
 8023112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023114:	4313      	orrs	r3, r2
 8023116:	697a      	ldr	r2, [r7, #20]
 8023118:	4313      	orrs	r3, r2
 802311a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 802311c:	687b      	ldr	r3, [r7, #4]
 802311e:	681b      	ldr	r3, [r3, #0]
 8023120:	697a      	ldr	r2, [r7, #20]
 8023122:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8023124:	687b      	ldr	r3, [r7, #4]
 8023126:	681b      	ldr	r3, [r3, #0]
 8023128:	695b      	ldr	r3, [r3, #20]
 802312a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802312c:	697b      	ldr	r3, [r7, #20]
 802312e:	f023 0307 	bic.w	r3, r3, #7
 8023132:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8023134:	687b      	ldr	r3, [r7, #4]
 8023136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023138:	697a      	ldr	r2, [r7, #20]
 802313a:	4313      	orrs	r3, r2
 802313c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802313e:	687b      	ldr	r3, [r7, #4]
 8023140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023142:	2b04      	cmp	r3, #4
 8023144:	d117      	bne.n	8023176 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8023146:	687b      	ldr	r3, [r7, #4]
 8023148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802314a:	697a      	ldr	r2, [r7, #20]
 802314c:	4313      	orrs	r3, r2
 802314e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8023150:	687b      	ldr	r3, [r7, #4]
 8023152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023154:	2b00      	cmp	r3, #0
 8023156:	d00e      	beq.n	8023176 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8023158:	6878      	ldr	r0, [r7, #4]
 802315a:	f000 f8bd 	bl	80232d8 <DMA_CheckFifoParam>
 802315e:	4603      	mov	r3, r0
 8023160:	2b00      	cmp	r3, #0
 8023162:	d008      	beq.n	8023176 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8023164:	687b      	ldr	r3, [r7, #4]
 8023166:	2240      	movs	r2, #64	; 0x40
 8023168:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802316a:	687b      	ldr	r3, [r7, #4]
 802316c:	2201      	movs	r2, #1
 802316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8023172:	2301      	movs	r3, #1
 8023174:	e016      	b.n	80231a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8023176:	687b      	ldr	r3, [r7, #4]
 8023178:	681b      	ldr	r3, [r3, #0]
 802317a:	697a      	ldr	r2, [r7, #20]
 802317c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802317e:	6878      	ldr	r0, [r7, #4]
 8023180:	f000 f874 	bl	802326c <DMA_CalcBaseAndBitshift>
 8023184:	4603      	mov	r3, r0
 8023186:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023188:	687b      	ldr	r3, [r7, #4]
 802318a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802318c:	223f      	movs	r2, #63	; 0x3f
 802318e:	409a      	lsls	r2, r3
 8023190:	68fb      	ldr	r3, [r7, #12]
 8023192:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023194:	687b      	ldr	r3, [r7, #4]
 8023196:	2200      	movs	r2, #0
 8023198:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802319a:	687b      	ldr	r3, [r7, #4]
 802319c:	2201      	movs	r2, #1
 802319e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80231a2:	2300      	movs	r3, #0
}
 80231a4:	4618      	mov	r0, r3
 80231a6:	3718      	adds	r7, #24
 80231a8:	46bd      	mov	sp, r7
 80231aa:	bd80      	pop	{r7, pc}
 80231ac:	f010803f 	.word	0xf010803f

080231b0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80231b0:	b580      	push	{r7, lr}
 80231b2:	b084      	sub	sp, #16
 80231b4:	af00      	add	r7, sp, #0
 80231b6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80231b8:	687b      	ldr	r3, [r7, #4]
 80231ba:	2b00      	cmp	r3, #0
 80231bc:	d101      	bne.n	80231c2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80231be:	2301      	movs	r3, #1
 80231c0:	e050      	b.n	8023264 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80231c2:	687b      	ldr	r3, [r7, #4]
 80231c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80231c8:	b2db      	uxtb	r3, r3
 80231ca:	2b02      	cmp	r3, #2
 80231cc:	d101      	bne.n	80231d2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80231ce:	2302      	movs	r3, #2
 80231d0:	e048      	b.n	8023264 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80231d2:	687b      	ldr	r3, [r7, #4]
 80231d4:	681b      	ldr	r3, [r3, #0]
 80231d6:	681a      	ldr	r2, [r3, #0]
 80231d8:	687b      	ldr	r3, [r7, #4]
 80231da:	681b      	ldr	r3, [r3, #0]
 80231dc:	f022 0201 	bic.w	r2, r2, #1
 80231e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80231e2:	687b      	ldr	r3, [r7, #4]
 80231e4:	681b      	ldr	r3, [r3, #0]
 80231e6:	2200      	movs	r2, #0
 80231e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80231ea:	687b      	ldr	r3, [r7, #4]
 80231ec:	681b      	ldr	r3, [r3, #0]
 80231ee:	2200      	movs	r2, #0
 80231f0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80231f2:	687b      	ldr	r3, [r7, #4]
 80231f4:	681b      	ldr	r3, [r3, #0]
 80231f6:	2200      	movs	r2, #0
 80231f8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80231fa:	687b      	ldr	r3, [r7, #4]
 80231fc:	681b      	ldr	r3, [r3, #0]
 80231fe:	2200      	movs	r2, #0
 8023200:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8023202:	687b      	ldr	r3, [r7, #4]
 8023204:	681b      	ldr	r3, [r3, #0]
 8023206:	2200      	movs	r2, #0
 8023208:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 802320a:	687b      	ldr	r3, [r7, #4]
 802320c:	681b      	ldr	r3, [r3, #0]
 802320e:	2221      	movs	r2, #33	; 0x21
 8023210:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8023212:	6878      	ldr	r0, [r7, #4]
 8023214:	f000 f82a 	bl	802326c <DMA_CalcBaseAndBitshift>
 8023218:	4603      	mov	r3, r0
 802321a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 802321c:	687b      	ldr	r3, [r7, #4]
 802321e:	2200      	movs	r2, #0
 8023220:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8023222:	687b      	ldr	r3, [r7, #4]
 8023224:	2200      	movs	r2, #0
 8023226:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8023228:	687b      	ldr	r3, [r7, #4]
 802322a:	2200      	movs	r2, #0
 802322c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 802322e:	687b      	ldr	r3, [r7, #4]
 8023230:	2200      	movs	r2, #0
 8023232:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8023234:	687b      	ldr	r3, [r7, #4]
 8023236:	2200      	movs	r2, #0
 8023238:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 802323a:	687b      	ldr	r3, [r7, #4]
 802323c:	2200      	movs	r2, #0
 802323e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023240:	687b      	ldr	r3, [r7, #4]
 8023242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023244:	223f      	movs	r2, #63	; 0x3f
 8023246:	409a      	lsls	r2, r3
 8023248:	68fb      	ldr	r3, [r7, #12]
 802324a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802324c:	687b      	ldr	r3, [r7, #4]
 802324e:	2200      	movs	r2, #0
 8023250:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8023252:	687b      	ldr	r3, [r7, #4]
 8023254:	2200      	movs	r2, #0
 8023256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 802325a:	687b      	ldr	r3, [r7, #4]
 802325c:	2200      	movs	r2, #0
 802325e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8023262:	2300      	movs	r3, #0
}
 8023264:	4618      	mov	r0, r3
 8023266:	3710      	adds	r7, #16
 8023268:	46bd      	mov	sp, r7
 802326a:	bd80      	pop	{r7, pc}

0802326c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802326c:	b480      	push	{r7}
 802326e:	b085      	sub	sp, #20
 8023270:	af00      	add	r7, sp, #0
 8023272:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8023274:	687b      	ldr	r3, [r7, #4]
 8023276:	681b      	ldr	r3, [r3, #0]
 8023278:	b2db      	uxtb	r3, r3
 802327a:	3b10      	subs	r3, #16
 802327c:	4a14      	ldr	r2, [pc, #80]	; (80232d0 <DMA_CalcBaseAndBitshift+0x64>)
 802327e:	fba2 2303 	umull	r2, r3, r2, r3
 8023282:	091b      	lsrs	r3, r3, #4
 8023284:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8023286:	4a13      	ldr	r2, [pc, #76]	; (80232d4 <DMA_CalcBaseAndBitshift+0x68>)
 8023288:	68fb      	ldr	r3, [r7, #12]
 802328a:	4413      	add	r3, r2
 802328c:	781b      	ldrb	r3, [r3, #0]
 802328e:	461a      	mov	r2, r3
 8023290:	687b      	ldr	r3, [r7, #4]
 8023292:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8023294:	68fb      	ldr	r3, [r7, #12]
 8023296:	2b03      	cmp	r3, #3
 8023298:	d909      	bls.n	80232ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802329a:	687b      	ldr	r3, [r7, #4]
 802329c:	681b      	ldr	r3, [r3, #0]
 802329e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80232a2:	f023 0303 	bic.w	r3, r3, #3
 80232a6:	1d1a      	adds	r2, r3, #4
 80232a8:	687b      	ldr	r3, [r7, #4]
 80232aa:	659a      	str	r2, [r3, #88]	; 0x58
 80232ac:	e007      	b.n	80232be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80232ae:	687b      	ldr	r3, [r7, #4]
 80232b0:	681b      	ldr	r3, [r3, #0]
 80232b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80232b6:	f023 0303 	bic.w	r3, r3, #3
 80232ba:	687a      	ldr	r2, [r7, #4]
 80232bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80232be:	687b      	ldr	r3, [r7, #4]
 80232c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80232c2:	4618      	mov	r0, r3
 80232c4:	3714      	adds	r7, #20
 80232c6:	46bd      	mov	sp, r7
 80232c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232cc:	4770      	bx	lr
 80232ce:	bf00      	nop
 80232d0:	aaaaaaab 	.word	0xaaaaaaab
 80232d4:	0802fa08 	.word	0x0802fa08

080232d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80232d8:	b480      	push	{r7}
 80232da:	b085      	sub	sp, #20
 80232dc:	af00      	add	r7, sp, #0
 80232de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80232e0:	2300      	movs	r3, #0
 80232e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80232e4:	687b      	ldr	r3, [r7, #4]
 80232e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80232e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80232ea:	687b      	ldr	r3, [r7, #4]
 80232ec:	699b      	ldr	r3, [r3, #24]
 80232ee:	2b00      	cmp	r3, #0
 80232f0:	d11f      	bne.n	8023332 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80232f2:	68bb      	ldr	r3, [r7, #8]
 80232f4:	2b03      	cmp	r3, #3
 80232f6:	d856      	bhi.n	80233a6 <DMA_CheckFifoParam+0xce>
 80232f8:	a201      	add	r2, pc, #4	; (adr r2, 8023300 <DMA_CheckFifoParam+0x28>)
 80232fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80232fe:	bf00      	nop
 8023300:	08023311 	.word	0x08023311
 8023304:	08023323 	.word	0x08023323
 8023308:	08023311 	.word	0x08023311
 802330c:	080233a7 	.word	0x080233a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023310:	687b      	ldr	r3, [r7, #4]
 8023312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023318:	2b00      	cmp	r3, #0
 802331a:	d046      	beq.n	80233aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 802331c:	2301      	movs	r3, #1
 802331e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023320:	e043      	b.n	80233aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023322:	687b      	ldr	r3, [r7, #4]
 8023324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023326:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802332a:	d140      	bne.n	80233ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 802332c:	2301      	movs	r3, #1
 802332e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023330:	e03d      	b.n	80233ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8023332:	687b      	ldr	r3, [r7, #4]
 8023334:	699b      	ldr	r3, [r3, #24]
 8023336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802333a:	d121      	bne.n	8023380 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 802333c:	68bb      	ldr	r3, [r7, #8]
 802333e:	2b03      	cmp	r3, #3
 8023340:	d837      	bhi.n	80233b2 <DMA_CheckFifoParam+0xda>
 8023342:	a201      	add	r2, pc, #4	; (adr r2, 8023348 <DMA_CheckFifoParam+0x70>)
 8023344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023348:	08023359 	.word	0x08023359
 802334c:	0802335f 	.word	0x0802335f
 8023350:	08023359 	.word	0x08023359
 8023354:	08023371 	.word	0x08023371
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8023358:	2301      	movs	r3, #1
 802335a:	73fb      	strb	r3, [r7, #15]
      break;
 802335c:	e030      	b.n	80233c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802335e:	687b      	ldr	r3, [r7, #4]
 8023360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023366:	2b00      	cmp	r3, #0
 8023368:	d025      	beq.n	80233b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 802336a:	2301      	movs	r3, #1
 802336c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802336e:	e022      	b.n	80233b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023370:	687b      	ldr	r3, [r7, #4]
 8023372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023374:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023378:	d11f      	bne.n	80233ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 802337a:	2301      	movs	r3, #1
 802337c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 802337e:	e01c      	b.n	80233ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8023380:	68bb      	ldr	r3, [r7, #8]
 8023382:	2b02      	cmp	r3, #2
 8023384:	d903      	bls.n	802338e <DMA_CheckFifoParam+0xb6>
 8023386:	68bb      	ldr	r3, [r7, #8]
 8023388:	2b03      	cmp	r3, #3
 802338a:	d003      	beq.n	8023394 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 802338c:	e018      	b.n	80233c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 802338e:	2301      	movs	r3, #1
 8023390:	73fb      	strb	r3, [r7, #15]
      break;
 8023392:	e015      	b.n	80233c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023394:	687b      	ldr	r3, [r7, #4]
 8023396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802339c:	2b00      	cmp	r3, #0
 802339e:	d00e      	beq.n	80233be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80233a0:	2301      	movs	r3, #1
 80233a2:	73fb      	strb	r3, [r7, #15]
      break;
 80233a4:	e00b      	b.n	80233be <DMA_CheckFifoParam+0xe6>
      break;
 80233a6:	bf00      	nop
 80233a8:	e00a      	b.n	80233c0 <DMA_CheckFifoParam+0xe8>
      break;
 80233aa:	bf00      	nop
 80233ac:	e008      	b.n	80233c0 <DMA_CheckFifoParam+0xe8>
      break;
 80233ae:	bf00      	nop
 80233b0:	e006      	b.n	80233c0 <DMA_CheckFifoParam+0xe8>
      break;
 80233b2:	bf00      	nop
 80233b4:	e004      	b.n	80233c0 <DMA_CheckFifoParam+0xe8>
      break;
 80233b6:	bf00      	nop
 80233b8:	e002      	b.n	80233c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80233ba:	bf00      	nop
 80233bc:	e000      	b.n	80233c0 <DMA_CheckFifoParam+0xe8>
      break;
 80233be:	bf00      	nop
    }
  } 
  
  return status; 
 80233c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80233c2:	4618      	mov	r0, r3
 80233c4:	3714      	adds	r7, #20
 80233c6:	46bd      	mov	sp, r7
 80233c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233cc:	4770      	bx	lr
 80233ce:	bf00      	nop

080233d0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80233d0:	b580      	push	{r7, lr}
 80233d2:	b082      	sub	sp, #8
 80233d4:	af00      	add	r7, sp, #0
 80233d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80233d8:	687b      	ldr	r3, [r7, #4]
 80233da:	2b00      	cmp	r3, #0
 80233dc:	d101      	bne.n	80233e2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80233de:	2301      	movs	r3, #1
 80233e0:	e03b      	b.n	802345a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80233e2:	687b      	ldr	r3, [r7, #4]
 80233e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80233e8:	b2db      	uxtb	r3, r3
 80233ea:	2b00      	cmp	r3, #0
 80233ec:	d106      	bne.n	80233fc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80233ee:	687b      	ldr	r3, [r7, #4]
 80233f0:	2200      	movs	r2, #0
 80233f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80233f6:	6878      	ldr	r0, [r7, #4]
 80233f8:	f7fd fd94 	bl	8020f24 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80233fc:	687b      	ldr	r3, [r7, #4]
 80233fe:	2202      	movs	r2, #2
 8023400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8023404:	687b      	ldr	r3, [r7, #4]
 8023406:	681b      	ldr	r3, [r3, #0]
 8023408:	681b      	ldr	r3, [r3, #0]
 802340a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 802340e:	687b      	ldr	r3, [r7, #4]
 8023410:	685a      	ldr	r2, [r3, #4]
 8023412:	687b      	ldr	r3, [r7, #4]
 8023414:	681b      	ldr	r3, [r3, #0]
 8023416:	430a      	orrs	r2, r1
 8023418:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 802341a:	687b      	ldr	r3, [r7, #4]
 802341c:	681b      	ldr	r3, [r3, #0]
 802341e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023420:	f023 0107 	bic.w	r1, r3, #7
 8023424:	687b      	ldr	r3, [r7, #4]
 8023426:	689a      	ldr	r2, [r3, #8]
 8023428:	687b      	ldr	r3, [r7, #4]
 802342a:	681b      	ldr	r3, [r3, #0]
 802342c:	430a      	orrs	r2, r1
 802342e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8023430:	687b      	ldr	r3, [r7, #4]
 8023432:	681b      	ldr	r3, [r3, #0]
 8023434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023436:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 802343a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 802343e:	687a      	ldr	r2, [r7, #4]
 8023440:	68d1      	ldr	r1, [r2, #12]
 8023442:	687a      	ldr	r2, [r7, #4]
 8023444:	6812      	ldr	r2, [r2, #0]
 8023446:	430b      	orrs	r3, r1
 8023448:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 802344a:	687b      	ldr	r3, [r7, #4]
 802344c:	2200      	movs	r2, #0
 802344e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8023450:	687b      	ldr	r3, [r7, #4]
 8023452:	2201      	movs	r2, #1
 8023454:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8023458:	2300      	movs	r3, #0
}
 802345a:	4618      	mov	r0, r3
 802345c:	3708      	adds	r7, #8
 802345e:	46bd      	mov	sp, r7
 8023460:	bd80      	pop	{r7, pc}

08023462 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8023462:	b580      	push	{r7, lr}
 8023464:	b086      	sub	sp, #24
 8023466:	af02      	add	r7, sp, #8
 8023468:	60f8      	str	r0, [r7, #12]
 802346a:	60b9      	str	r1, [r7, #8]
 802346c:	607a      	str	r2, [r7, #4]
 802346e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8023470:	68fb      	ldr	r3, [r7, #12]
 8023472:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8023476:	2b01      	cmp	r3, #1
 8023478:	d101      	bne.n	802347e <HAL_DMA2D_Start+0x1c>
 802347a:	2302      	movs	r3, #2
 802347c:	e018      	b.n	80234b0 <HAL_DMA2D_Start+0x4e>
 802347e:	68fb      	ldr	r3, [r7, #12]
 8023480:	2201      	movs	r2, #1
 8023482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023486:	68fb      	ldr	r3, [r7, #12]
 8023488:	2202      	movs	r2, #2
 802348a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 802348e:	69bb      	ldr	r3, [r7, #24]
 8023490:	9300      	str	r3, [sp, #0]
 8023492:	683b      	ldr	r3, [r7, #0]
 8023494:	687a      	ldr	r2, [r7, #4]
 8023496:	68b9      	ldr	r1, [r7, #8]
 8023498:	68f8      	ldr	r0, [r7, #12]
 802349a:	f000 fa99 	bl	80239d0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 802349e:	68fb      	ldr	r3, [r7, #12]
 80234a0:	681b      	ldr	r3, [r3, #0]
 80234a2:	681a      	ldr	r2, [r3, #0]
 80234a4:	68fb      	ldr	r3, [r7, #12]
 80234a6:	681b      	ldr	r3, [r3, #0]
 80234a8:	f042 0201 	orr.w	r2, r2, #1
 80234ac:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80234ae:	2300      	movs	r3, #0
}
 80234b0:	4618      	mov	r0, r3
 80234b2:	3710      	adds	r7, #16
 80234b4:	46bd      	mov	sp, r7
 80234b6:	bd80      	pop	{r7, pc}

080234b8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80234b8:	b580      	push	{r7, lr}
 80234ba:	b086      	sub	sp, #24
 80234bc:	af00      	add	r7, sp, #0
 80234be:	6078      	str	r0, [r7, #4]
 80234c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80234c2:	2300      	movs	r3, #0
 80234c4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80234c6:	687b      	ldr	r3, [r7, #4]
 80234c8:	681b      	ldr	r3, [r3, #0]
 80234ca:	681b      	ldr	r3, [r3, #0]
 80234cc:	f003 0301 	and.w	r3, r3, #1
 80234d0:	2b00      	cmp	r3, #0
 80234d2:	d056      	beq.n	8023582 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80234d4:	f7ff fc90 	bl	8022df8 <HAL_GetTick>
 80234d8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80234da:	e04b      	b.n	8023574 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80234dc:	687b      	ldr	r3, [r7, #4]
 80234de:	681b      	ldr	r3, [r3, #0]
 80234e0:	685b      	ldr	r3, [r3, #4]
 80234e2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80234e4:	68fb      	ldr	r3, [r7, #12]
 80234e6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80234ea:	2b00      	cmp	r3, #0
 80234ec:	d023      	beq.n	8023536 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80234ee:	68fb      	ldr	r3, [r7, #12]
 80234f0:	f003 0320 	and.w	r3, r3, #32
 80234f4:	2b00      	cmp	r3, #0
 80234f6:	d005      	beq.n	8023504 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80234f8:	687b      	ldr	r3, [r7, #4]
 80234fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80234fc:	f043 0202 	orr.w	r2, r3, #2
 8023500:	687b      	ldr	r3, [r7, #4]
 8023502:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023504:	68fb      	ldr	r3, [r7, #12]
 8023506:	f003 0301 	and.w	r3, r3, #1
 802350a:	2b00      	cmp	r3, #0
 802350c:	d005      	beq.n	802351a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 802350e:	687b      	ldr	r3, [r7, #4]
 8023510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023512:	f043 0201 	orr.w	r2, r3, #1
 8023516:	687b      	ldr	r3, [r7, #4]
 8023518:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	681b      	ldr	r3, [r3, #0]
 802351e:	2221      	movs	r2, #33	; 0x21
 8023520:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023522:	687b      	ldr	r3, [r7, #4]
 8023524:	2204      	movs	r2, #4
 8023526:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 802352a:	687b      	ldr	r3, [r7, #4]
 802352c:	2200      	movs	r2, #0
 802352e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023532:	2301      	movs	r3, #1
 8023534:	e0a5      	b.n	8023682 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8023536:	683b      	ldr	r3, [r7, #0]
 8023538:	f1b3 3fff 	cmp.w	r3, #4294967295
 802353c:	d01a      	beq.n	8023574 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 802353e:	f7ff fc5b 	bl	8022df8 <HAL_GetTick>
 8023542:	4602      	mov	r2, r0
 8023544:	697b      	ldr	r3, [r7, #20]
 8023546:	1ad3      	subs	r3, r2, r3
 8023548:	683a      	ldr	r2, [r7, #0]
 802354a:	429a      	cmp	r2, r3
 802354c:	d302      	bcc.n	8023554 <HAL_DMA2D_PollForTransfer+0x9c>
 802354e:	683b      	ldr	r3, [r7, #0]
 8023550:	2b00      	cmp	r3, #0
 8023552:	d10f      	bne.n	8023574 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8023554:	687b      	ldr	r3, [r7, #4]
 8023556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023558:	f043 0220 	orr.w	r2, r3, #32
 802355c:	687b      	ldr	r3, [r7, #4]
 802355e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8023560:	687b      	ldr	r3, [r7, #4]
 8023562:	2203      	movs	r2, #3
 8023564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8023568:	687b      	ldr	r3, [r7, #4]
 802356a:	2200      	movs	r2, #0
 802356c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8023570:	2303      	movs	r3, #3
 8023572:	e086      	b.n	8023682 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8023574:	687b      	ldr	r3, [r7, #4]
 8023576:	681b      	ldr	r3, [r3, #0]
 8023578:	685b      	ldr	r3, [r3, #4]
 802357a:	f003 0302 	and.w	r3, r3, #2
 802357e:	2b00      	cmp	r3, #0
 8023580:	d0ac      	beq.n	80234dc <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8023582:	687b      	ldr	r3, [r7, #4]
 8023584:	681b      	ldr	r3, [r3, #0]
 8023586:	69db      	ldr	r3, [r3, #28]
 8023588:	f003 0320 	and.w	r3, r3, #32
 802358c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 802358e:	687b      	ldr	r3, [r7, #4]
 8023590:	681b      	ldr	r3, [r3, #0]
 8023592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023594:	f003 0320 	and.w	r3, r3, #32
 8023598:	693a      	ldr	r2, [r7, #16]
 802359a:	4313      	orrs	r3, r2
 802359c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 802359e:	693b      	ldr	r3, [r7, #16]
 80235a0:	2b00      	cmp	r3, #0
 80235a2:	d061      	beq.n	8023668 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80235a4:	f7ff fc28 	bl	8022df8 <HAL_GetTick>
 80235a8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80235aa:	e056      	b.n	802365a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80235ac:	687b      	ldr	r3, [r7, #4]
 80235ae:	681b      	ldr	r3, [r3, #0]
 80235b0:	685b      	ldr	r3, [r3, #4]
 80235b2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80235b4:	68fb      	ldr	r3, [r7, #12]
 80235b6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80235ba:	2b00      	cmp	r3, #0
 80235bc:	d02e      	beq.n	802361c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80235be:	68fb      	ldr	r3, [r7, #12]
 80235c0:	f003 0308 	and.w	r3, r3, #8
 80235c4:	2b00      	cmp	r3, #0
 80235c6:	d005      	beq.n	80235d4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80235c8:	687b      	ldr	r3, [r7, #4]
 80235ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80235cc:	f043 0204 	orr.w	r2, r3, #4
 80235d0:	687b      	ldr	r3, [r7, #4]
 80235d2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80235d4:	68fb      	ldr	r3, [r7, #12]
 80235d6:	f003 0320 	and.w	r3, r3, #32
 80235da:	2b00      	cmp	r3, #0
 80235dc:	d005      	beq.n	80235ea <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80235de:	687b      	ldr	r3, [r7, #4]
 80235e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80235e2:	f043 0202 	orr.w	r2, r3, #2
 80235e6:	687b      	ldr	r3, [r7, #4]
 80235e8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80235ea:	68fb      	ldr	r3, [r7, #12]
 80235ec:	f003 0301 	and.w	r3, r3, #1
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	d005      	beq.n	8023600 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80235f4:	687b      	ldr	r3, [r7, #4]
 80235f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80235f8:	f043 0201 	orr.w	r2, r3, #1
 80235fc:	687b      	ldr	r3, [r7, #4]
 80235fe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8023600:	687b      	ldr	r3, [r7, #4]
 8023602:	681b      	ldr	r3, [r3, #0]
 8023604:	2229      	movs	r2, #41	; 0x29
 8023606:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023608:	687b      	ldr	r3, [r7, #4]
 802360a:	2204      	movs	r2, #4
 802360c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8023610:	687b      	ldr	r3, [r7, #4]
 8023612:	2200      	movs	r2, #0
 8023614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023618:	2301      	movs	r3, #1
 802361a:	e032      	b.n	8023682 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 802361c:	683b      	ldr	r3, [r7, #0]
 802361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023622:	d01a      	beq.n	802365a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023624:	f7ff fbe8 	bl	8022df8 <HAL_GetTick>
 8023628:	4602      	mov	r2, r0
 802362a:	697b      	ldr	r3, [r7, #20]
 802362c:	1ad3      	subs	r3, r2, r3
 802362e:	683a      	ldr	r2, [r7, #0]
 8023630:	429a      	cmp	r2, r3
 8023632:	d302      	bcc.n	802363a <HAL_DMA2D_PollForTransfer+0x182>
 8023634:	683b      	ldr	r3, [r7, #0]
 8023636:	2b00      	cmp	r3, #0
 8023638:	d10f      	bne.n	802365a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 802363a:	687b      	ldr	r3, [r7, #4]
 802363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802363e:	f043 0220 	orr.w	r2, r3, #32
 8023642:	687b      	ldr	r3, [r7, #4]
 8023644:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8023646:	687b      	ldr	r3, [r7, #4]
 8023648:	2203      	movs	r2, #3
 802364a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 802364e:	687b      	ldr	r3, [r7, #4]
 8023650:	2200      	movs	r2, #0
 8023652:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8023656:	2303      	movs	r3, #3
 8023658:	e013      	b.n	8023682 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 802365a:	687b      	ldr	r3, [r7, #4]
 802365c:	681b      	ldr	r3, [r3, #0]
 802365e:	685b      	ldr	r3, [r3, #4]
 8023660:	f003 0310 	and.w	r3, r3, #16
 8023664:	2b00      	cmp	r3, #0
 8023666:	d0a1      	beq.n	80235ac <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8023668:	687b      	ldr	r3, [r7, #4]
 802366a:	681b      	ldr	r3, [r3, #0]
 802366c:	2212      	movs	r2, #18
 802366e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8023670:	687b      	ldr	r3, [r7, #4]
 8023672:	2201      	movs	r2, #1
 8023674:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8023678:	687b      	ldr	r3, [r7, #4]
 802367a:	2200      	movs	r2, #0
 802367c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8023680:	2300      	movs	r3, #0
}
 8023682:	4618      	mov	r0, r3
 8023684:	3718      	adds	r7, #24
 8023686:	46bd      	mov	sp, r7
 8023688:	bd80      	pop	{r7, pc}

0802368a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 802368a:	b580      	push	{r7, lr}
 802368c:	b084      	sub	sp, #16
 802368e:	af00      	add	r7, sp, #0
 8023690:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8023692:	687b      	ldr	r3, [r7, #4]
 8023694:	681b      	ldr	r3, [r3, #0]
 8023696:	685b      	ldr	r3, [r3, #4]
 8023698:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 802369a:	687b      	ldr	r3, [r7, #4]
 802369c:	681b      	ldr	r3, [r3, #0]
 802369e:	681b      	ldr	r3, [r3, #0]
 80236a0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80236a2:	68fb      	ldr	r3, [r7, #12]
 80236a4:	f003 0301 	and.w	r3, r3, #1
 80236a8:	2b00      	cmp	r3, #0
 80236aa:	d026      	beq.n	80236fa <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80236ac:	68bb      	ldr	r3, [r7, #8]
 80236ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80236b2:	2b00      	cmp	r3, #0
 80236b4:	d021      	beq.n	80236fa <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80236b6:	687b      	ldr	r3, [r7, #4]
 80236b8:	681b      	ldr	r3, [r3, #0]
 80236ba:	681a      	ldr	r2, [r3, #0]
 80236bc:	687b      	ldr	r3, [r7, #4]
 80236be:	681b      	ldr	r3, [r3, #0]
 80236c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80236c4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80236c6:	687b      	ldr	r3, [r7, #4]
 80236c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80236ca:	f043 0201 	orr.w	r2, r3, #1
 80236ce:	687b      	ldr	r3, [r7, #4]
 80236d0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80236d2:	687b      	ldr	r3, [r7, #4]
 80236d4:	681b      	ldr	r3, [r3, #0]
 80236d6:	2201      	movs	r2, #1
 80236d8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80236da:	687b      	ldr	r3, [r7, #4]
 80236dc:	2204      	movs	r2, #4
 80236de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80236e2:	687b      	ldr	r3, [r7, #4]
 80236e4:	2200      	movs	r2, #0
 80236e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80236ea:	687b      	ldr	r3, [r7, #4]
 80236ec:	695b      	ldr	r3, [r3, #20]
 80236ee:	2b00      	cmp	r3, #0
 80236f0:	d003      	beq.n	80236fa <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80236f2:	687b      	ldr	r3, [r7, #4]
 80236f4:	695b      	ldr	r3, [r3, #20]
 80236f6:	6878      	ldr	r0, [r7, #4]
 80236f8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80236fa:	68fb      	ldr	r3, [r7, #12]
 80236fc:	f003 0320 	and.w	r3, r3, #32
 8023700:	2b00      	cmp	r3, #0
 8023702:	d026      	beq.n	8023752 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8023704:	68bb      	ldr	r3, [r7, #8]
 8023706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802370a:	2b00      	cmp	r3, #0
 802370c:	d021      	beq.n	8023752 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 802370e:	687b      	ldr	r3, [r7, #4]
 8023710:	681b      	ldr	r3, [r3, #0]
 8023712:	681a      	ldr	r2, [r3, #0]
 8023714:	687b      	ldr	r3, [r7, #4]
 8023716:	681b      	ldr	r3, [r3, #0]
 8023718:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802371c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 802371e:	687b      	ldr	r3, [r7, #4]
 8023720:	681b      	ldr	r3, [r3, #0]
 8023722:	2220      	movs	r2, #32
 8023724:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023726:	687b      	ldr	r3, [r7, #4]
 8023728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802372a:	f043 0202 	orr.w	r2, r3, #2
 802372e:	687b      	ldr	r3, [r7, #4]
 8023730:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023732:	687b      	ldr	r3, [r7, #4]
 8023734:	2204      	movs	r2, #4
 8023736:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 802373a:	687b      	ldr	r3, [r7, #4]
 802373c:	2200      	movs	r2, #0
 802373e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8023742:	687b      	ldr	r3, [r7, #4]
 8023744:	695b      	ldr	r3, [r3, #20]
 8023746:	2b00      	cmp	r3, #0
 8023748:	d003      	beq.n	8023752 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 802374a:	687b      	ldr	r3, [r7, #4]
 802374c:	695b      	ldr	r3, [r3, #20]
 802374e:	6878      	ldr	r0, [r7, #4]
 8023750:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8023752:	68fb      	ldr	r3, [r7, #12]
 8023754:	f003 0308 	and.w	r3, r3, #8
 8023758:	2b00      	cmp	r3, #0
 802375a:	d026      	beq.n	80237aa <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 802375c:	68bb      	ldr	r3, [r7, #8]
 802375e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8023762:	2b00      	cmp	r3, #0
 8023764:	d021      	beq.n	80237aa <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8023766:	687b      	ldr	r3, [r7, #4]
 8023768:	681b      	ldr	r3, [r3, #0]
 802376a:	681a      	ldr	r2, [r3, #0]
 802376c:	687b      	ldr	r3, [r7, #4]
 802376e:	681b      	ldr	r3, [r3, #0]
 8023770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8023774:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8023776:	687b      	ldr	r3, [r7, #4]
 8023778:	681b      	ldr	r3, [r3, #0]
 802377a:	2208      	movs	r2, #8
 802377c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 802377e:	687b      	ldr	r3, [r7, #4]
 8023780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023782:	f043 0204 	orr.w	r2, r3, #4
 8023786:	687b      	ldr	r3, [r7, #4]
 8023788:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 802378a:	687b      	ldr	r3, [r7, #4]
 802378c:	2204      	movs	r2, #4
 802378e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023792:	687b      	ldr	r3, [r7, #4]
 8023794:	2200      	movs	r2, #0
 8023796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 802379a:	687b      	ldr	r3, [r7, #4]
 802379c:	695b      	ldr	r3, [r3, #20]
 802379e:	2b00      	cmp	r3, #0
 80237a0:	d003      	beq.n	80237aa <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80237a2:	687b      	ldr	r3, [r7, #4]
 80237a4:	695b      	ldr	r3, [r3, #20]
 80237a6:	6878      	ldr	r0, [r7, #4]
 80237a8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80237aa:	68fb      	ldr	r3, [r7, #12]
 80237ac:	f003 0304 	and.w	r3, r3, #4
 80237b0:	2b00      	cmp	r3, #0
 80237b2:	d013      	beq.n	80237dc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80237b4:	68bb      	ldr	r3, [r7, #8]
 80237b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80237ba:	2b00      	cmp	r3, #0
 80237bc:	d00e      	beq.n	80237dc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80237be:	687b      	ldr	r3, [r7, #4]
 80237c0:	681b      	ldr	r3, [r3, #0]
 80237c2:	681a      	ldr	r2, [r3, #0]
 80237c4:	687b      	ldr	r3, [r7, #4]
 80237c6:	681b      	ldr	r3, [r3, #0]
 80237c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80237cc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80237ce:	687b      	ldr	r3, [r7, #4]
 80237d0:	681b      	ldr	r3, [r3, #0]
 80237d2:	2204      	movs	r2, #4
 80237d4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80237d6:	6878      	ldr	r0, [r7, #4]
 80237d8:	f000 f853 	bl	8023882 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80237dc:	68fb      	ldr	r3, [r7, #12]
 80237de:	f003 0302 	and.w	r3, r3, #2
 80237e2:	2b00      	cmp	r3, #0
 80237e4:	d024      	beq.n	8023830 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80237e6:	68bb      	ldr	r3, [r7, #8]
 80237e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80237ec:	2b00      	cmp	r3, #0
 80237ee:	d01f      	beq.n	8023830 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80237f0:	687b      	ldr	r3, [r7, #4]
 80237f2:	681b      	ldr	r3, [r3, #0]
 80237f4:	681a      	ldr	r2, [r3, #0]
 80237f6:	687b      	ldr	r3, [r7, #4]
 80237f8:	681b      	ldr	r3, [r3, #0]
 80237fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80237fe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8023800:	687b      	ldr	r3, [r7, #4]
 8023802:	681b      	ldr	r3, [r3, #0]
 8023804:	2202      	movs	r2, #2
 8023806:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8023808:	687b      	ldr	r3, [r7, #4]
 802380a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802380c:	687b      	ldr	r3, [r7, #4]
 802380e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8023810:	687b      	ldr	r3, [r7, #4]
 8023812:	2201      	movs	r2, #1
 8023814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023818:	687b      	ldr	r3, [r7, #4]
 802381a:	2200      	movs	r2, #0
 802381c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8023820:	687b      	ldr	r3, [r7, #4]
 8023822:	691b      	ldr	r3, [r3, #16]
 8023824:	2b00      	cmp	r3, #0
 8023826:	d003      	beq.n	8023830 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8023828:	687b      	ldr	r3, [r7, #4]
 802382a:	691b      	ldr	r3, [r3, #16]
 802382c:	6878      	ldr	r0, [r7, #4]
 802382e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8023830:	68fb      	ldr	r3, [r7, #12]
 8023832:	f003 0310 	and.w	r3, r3, #16
 8023836:	2b00      	cmp	r3, #0
 8023838:	d01f      	beq.n	802387a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 802383a:	68bb      	ldr	r3, [r7, #8]
 802383c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8023840:	2b00      	cmp	r3, #0
 8023842:	d01a      	beq.n	802387a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8023844:	687b      	ldr	r3, [r7, #4]
 8023846:	681b      	ldr	r3, [r3, #0]
 8023848:	681a      	ldr	r2, [r3, #0]
 802384a:	687b      	ldr	r3, [r7, #4]
 802384c:	681b      	ldr	r3, [r3, #0]
 802384e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8023852:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8023854:	687b      	ldr	r3, [r7, #4]
 8023856:	681b      	ldr	r3, [r3, #0]
 8023858:	2210      	movs	r2, #16
 802385a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 802385c:	687b      	ldr	r3, [r7, #4]
 802385e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8023860:	687b      	ldr	r3, [r7, #4]
 8023862:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8023864:	687b      	ldr	r3, [r7, #4]
 8023866:	2201      	movs	r2, #1
 8023868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 802386c:	687b      	ldr	r3, [r7, #4]
 802386e:	2200      	movs	r2, #0
 8023870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8023874:	6878      	ldr	r0, [r7, #4]
 8023876:	f000 f80e 	bl	8023896 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 802387a:	bf00      	nop
 802387c:	3710      	adds	r7, #16
 802387e:	46bd      	mov	sp, r7
 8023880:	bd80      	pop	{r7, pc}

08023882 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8023882:	b480      	push	{r7}
 8023884:	b083      	sub	sp, #12
 8023886:	af00      	add	r7, sp, #0
 8023888:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 802388a:	bf00      	nop
 802388c:	370c      	adds	r7, #12
 802388e:	46bd      	mov	sp, r7
 8023890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023894:	4770      	bx	lr

08023896 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8023896:	b480      	push	{r7}
 8023898:	b083      	sub	sp, #12
 802389a:	af00      	add	r7, sp, #0
 802389c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 802389e:	bf00      	nop
 80238a0:	370c      	adds	r7, #12
 80238a2:	46bd      	mov	sp, r7
 80238a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238a8:	4770      	bx	lr
	...

080238ac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80238ac:	b480      	push	{r7}
 80238ae:	b087      	sub	sp, #28
 80238b0:	af00      	add	r7, sp, #0
 80238b2:	6078      	str	r0, [r7, #4]
 80238b4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80238b6:	687b      	ldr	r3, [r7, #4]
 80238b8:	685b      	ldr	r3, [r3, #4]
 80238ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80238be:	687b      	ldr	r3, [r7, #4]
 80238c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80238c4:	2b01      	cmp	r3, #1
 80238c6:	d101      	bne.n	80238cc <HAL_DMA2D_ConfigLayer+0x20>
 80238c8:	2302      	movs	r3, #2
 80238ca:	e079      	b.n	80239c0 <HAL_DMA2D_ConfigLayer+0x114>
 80238cc:	687b      	ldr	r3, [r7, #4]
 80238ce:	2201      	movs	r2, #1
 80238d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80238d4:	687b      	ldr	r3, [r7, #4]
 80238d6:	2202      	movs	r2, #2
 80238d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80238dc:	683b      	ldr	r3, [r7, #0]
 80238de:	011b      	lsls	r3, r3, #4
 80238e0:	3318      	adds	r3, #24
 80238e2:	687a      	ldr	r2, [r7, #4]
 80238e4:	4413      	add	r3, r2
 80238e6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80238e8:	693b      	ldr	r3, [r7, #16]
 80238ea:	685a      	ldr	r2, [r3, #4]
 80238ec:	693b      	ldr	r3, [r7, #16]
 80238ee:	689b      	ldr	r3, [r3, #8]
 80238f0:	041b      	lsls	r3, r3, #16
 80238f2:	4313      	orrs	r3, r2
 80238f4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80238f6:	4b35      	ldr	r3, [pc, #212]	; (80239cc <HAL_DMA2D_ConfigLayer+0x120>)
 80238f8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80238fa:	693b      	ldr	r3, [r7, #16]
 80238fc:	685b      	ldr	r3, [r3, #4]
 80238fe:	2b0a      	cmp	r3, #10
 8023900:	d003      	beq.n	802390a <HAL_DMA2D_ConfigLayer+0x5e>
 8023902:	693b      	ldr	r3, [r7, #16]
 8023904:	685b      	ldr	r3, [r3, #4]
 8023906:	2b09      	cmp	r3, #9
 8023908:	d107      	bne.n	802391a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 802390a:	693b      	ldr	r3, [r7, #16]
 802390c:	68db      	ldr	r3, [r3, #12]
 802390e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8023912:	697a      	ldr	r2, [r7, #20]
 8023914:	4313      	orrs	r3, r2
 8023916:	617b      	str	r3, [r7, #20]
 8023918:	e005      	b.n	8023926 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 802391a:	693b      	ldr	r3, [r7, #16]
 802391c:	68db      	ldr	r3, [r3, #12]
 802391e:	061b      	lsls	r3, r3, #24
 8023920:	697a      	ldr	r2, [r7, #20]
 8023922:	4313      	orrs	r3, r2
 8023924:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8023926:	683b      	ldr	r3, [r7, #0]
 8023928:	2b00      	cmp	r3, #0
 802392a:	d120      	bne.n	802396e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 802392c:	687b      	ldr	r3, [r7, #4]
 802392e:	681b      	ldr	r3, [r3, #0]
 8023930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8023932:	68fb      	ldr	r3, [r7, #12]
 8023934:	43db      	mvns	r3, r3
 8023936:	ea02 0103 	and.w	r1, r2, r3
 802393a:	687b      	ldr	r3, [r7, #4]
 802393c:	681b      	ldr	r3, [r3, #0]
 802393e:	697a      	ldr	r2, [r7, #20]
 8023940:	430a      	orrs	r2, r1
 8023942:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8023944:	687b      	ldr	r3, [r7, #4]
 8023946:	681b      	ldr	r3, [r3, #0]
 8023948:	693a      	ldr	r2, [r7, #16]
 802394a:	6812      	ldr	r2, [r2, #0]
 802394c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 802394e:	693b      	ldr	r3, [r7, #16]
 8023950:	685b      	ldr	r3, [r3, #4]
 8023952:	2b0a      	cmp	r3, #10
 8023954:	d003      	beq.n	802395e <HAL_DMA2D_ConfigLayer+0xb2>
 8023956:	693b      	ldr	r3, [r7, #16]
 8023958:	685b      	ldr	r3, [r3, #4]
 802395a:	2b09      	cmp	r3, #9
 802395c:	d127      	bne.n	80239ae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 802395e:	693b      	ldr	r3, [r7, #16]
 8023960:	68da      	ldr	r2, [r3, #12]
 8023962:	687b      	ldr	r3, [r7, #4]
 8023964:	681b      	ldr	r3, [r3, #0]
 8023966:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 802396a:	629a      	str	r2, [r3, #40]	; 0x28
 802396c:	e01f      	b.n	80239ae <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 802396e:	687b      	ldr	r3, [r7, #4]
 8023970:	681b      	ldr	r3, [r3, #0]
 8023972:	69da      	ldr	r2, [r3, #28]
 8023974:	68fb      	ldr	r3, [r7, #12]
 8023976:	43db      	mvns	r3, r3
 8023978:	ea02 0103 	and.w	r1, r2, r3
 802397c:	687b      	ldr	r3, [r7, #4]
 802397e:	681b      	ldr	r3, [r3, #0]
 8023980:	697a      	ldr	r2, [r7, #20]
 8023982:	430a      	orrs	r2, r1
 8023984:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8023986:	687b      	ldr	r3, [r7, #4]
 8023988:	681b      	ldr	r3, [r3, #0]
 802398a:	693a      	ldr	r2, [r7, #16]
 802398c:	6812      	ldr	r2, [r2, #0]
 802398e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8023990:	693b      	ldr	r3, [r7, #16]
 8023992:	685b      	ldr	r3, [r3, #4]
 8023994:	2b0a      	cmp	r3, #10
 8023996:	d003      	beq.n	80239a0 <HAL_DMA2D_ConfigLayer+0xf4>
 8023998:	693b      	ldr	r3, [r7, #16]
 802399a:	685b      	ldr	r3, [r3, #4]
 802399c:	2b09      	cmp	r3, #9
 802399e:	d106      	bne.n	80239ae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80239a0:	693b      	ldr	r3, [r7, #16]
 80239a2:	68da      	ldr	r2, [r3, #12]
 80239a4:	687b      	ldr	r3, [r7, #4]
 80239a6:	681b      	ldr	r3, [r3, #0]
 80239a8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80239ac:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80239ae:	687b      	ldr	r3, [r7, #4]
 80239b0:	2201      	movs	r2, #1
 80239b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80239b6:	687b      	ldr	r3, [r7, #4]
 80239b8:	2200      	movs	r2, #0
 80239ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80239be:	2300      	movs	r3, #0
}
 80239c0:	4618      	mov	r0, r3
 80239c2:	371c      	adds	r7, #28
 80239c4:	46bd      	mov	sp, r7
 80239c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239ca:	4770      	bx	lr
 80239cc:	ff03000f 	.word	0xff03000f

080239d0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80239d0:	b480      	push	{r7}
 80239d2:	b08b      	sub	sp, #44	; 0x2c
 80239d4:	af00      	add	r7, sp, #0
 80239d6:	60f8      	str	r0, [r7, #12]
 80239d8:	60b9      	str	r1, [r7, #8]
 80239da:	607a      	str	r2, [r7, #4]
 80239dc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80239de:	68fb      	ldr	r3, [r7, #12]
 80239e0:	681b      	ldr	r3, [r3, #0]
 80239e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80239e4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80239e8:	683b      	ldr	r3, [r7, #0]
 80239ea:	041a      	lsls	r2, r3, #16
 80239ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80239ee:	431a      	orrs	r2, r3
 80239f0:	68fb      	ldr	r3, [r7, #12]
 80239f2:	681b      	ldr	r3, [r3, #0]
 80239f4:	430a      	orrs	r2, r1
 80239f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80239f8:	68fb      	ldr	r3, [r7, #12]
 80239fa:	681b      	ldr	r3, [r3, #0]
 80239fc:	687a      	ldr	r2, [r7, #4]
 80239fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8023a00:	68fb      	ldr	r3, [r7, #12]
 8023a02:	685b      	ldr	r3, [r3, #4]
 8023a04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8023a08:	d174      	bne.n	8023af4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8023a0a:	68bb      	ldr	r3, [r7, #8]
 8023a0c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8023a10:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8023a12:	68bb      	ldr	r3, [r7, #8]
 8023a14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8023a18:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8023a1a:	68bb      	ldr	r3, [r7, #8]
 8023a1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023a20:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8023a22:	68bb      	ldr	r3, [r7, #8]
 8023a24:	b2db      	uxtb	r3, r3
 8023a26:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8023a28:	68fb      	ldr	r3, [r7, #12]
 8023a2a:	689b      	ldr	r3, [r3, #8]
 8023a2c:	2b00      	cmp	r3, #0
 8023a2e:	d108      	bne.n	8023a42 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8023a30:	69ba      	ldr	r2, [r7, #24]
 8023a32:	69fb      	ldr	r3, [r7, #28]
 8023a34:	431a      	orrs	r2, r3
 8023a36:	6a3b      	ldr	r3, [r7, #32]
 8023a38:	4313      	orrs	r3, r2
 8023a3a:	697a      	ldr	r2, [r7, #20]
 8023a3c:	4313      	orrs	r3, r2
 8023a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8023a40:	e053      	b.n	8023aea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8023a42:	68fb      	ldr	r3, [r7, #12]
 8023a44:	689b      	ldr	r3, [r3, #8]
 8023a46:	2b01      	cmp	r3, #1
 8023a48:	d106      	bne.n	8023a58 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8023a4a:	69ba      	ldr	r2, [r7, #24]
 8023a4c:	69fb      	ldr	r3, [r7, #28]
 8023a4e:	4313      	orrs	r3, r2
 8023a50:	697a      	ldr	r2, [r7, #20]
 8023a52:	4313      	orrs	r3, r2
 8023a54:	627b      	str	r3, [r7, #36]	; 0x24
 8023a56:	e048      	b.n	8023aea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8023a58:	68fb      	ldr	r3, [r7, #12]
 8023a5a:	689b      	ldr	r3, [r3, #8]
 8023a5c:	2b02      	cmp	r3, #2
 8023a5e:	d111      	bne.n	8023a84 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8023a60:	69fb      	ldr	r3, [r7, #28]
 8023a62:	0cdb      	lsrs	r3, r3, #19
 8023a64:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8023a66:	69bb      	ldr	r3, [r7, #24]
 8023a68:	0a9b      	lsrs	r3, r3, #10
 8023a6a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8023a6c:	697b      	ldr	r3, [r7, #20]
 8023a6e:	08db      	lsrs	r3, r3, #3
 8023a70:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8023a72:	69bb      	ldr	r3, [r7, #24]
 8023a74:	015a      	lsls	r2, r3, #5
 8023a76:	69fb      	ldr	r3, [r7, #28]
 8023a78:	02db      	lsls	r3, r3, #11
 8023a7a:	4313      	orrs	r3, r2
 8023a7c:	697a      	ldr	r2, [r7, #20]
 8023a7e:	4313      	orrs	r3, r2
 8023a80:	627b      	str	r3, [r7, #36]	; 0x24
 8023a82:	e032      	b.n	8023aea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8023a84:	68fb      	ldr	r3, [r7, #12]
 8023a86:	689b      	ldr	r3, [r3, #8]
 8023a88:	2b03      	cmp	r3, #3
 8023a8a:	d117      	bne.n	8023abc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8023a8c:	6a3b      	ldr	r3, [r7, #32]
 8023a8e:	0fdb      	lsrs	r3, r3, #31
 8023a90:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8023a92:	69fb      	ldr	r3, [r7, #28]
 8023a94:	0cdb      	lsrs	r3, r3, #19
 8023a96:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8023a98:	69bb      	ldr	r3, [r7, #24]
 8023a9a:	0adb      	lsrs	r3, r3, #11
 8023a9c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8023a9e:	697b      	ldr	r3, [r7, #20]
 8023aa0:	08db      	lsrs	r3, r3, #3
 8023aa2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8023aa4:	69bb      	ldr	r3, [r7, #24]
 8023aa6:	015a      	lsls	r2, r3, #5
 8023aa8:	69fb      	ldr	r3, [r7, #28]
 8023aaa:	029b      	lsls	r3, r3, #10
 8023aac:	431a      	orrs	r2, r3
 8023aae:	6a3b      	ldr	r3, [r7, #32]
 8023ab0:	03db      	lsls	r3, r3, #15
 8023ab2:	4313      	orrs	r3, r2
 8023ab4:	697a      	ldr	r2, [r7, #20]
 8023ab6:	4313      	orrs	r3, r2
 8023ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8023aba:	e016      	b.n	8023aea <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8023abc:	6a3b      	ldr	r3, [r7, #32]
 8023abe:	0f1b      	lsrs	r3, r3, #28
 8023ac0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8023ac2:	69fb      	ldr	r3, [r7, #28]
 8023ac4:	0d1b      	lsrs	r3, r3, #20
 8023ac6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8023ac8:	69bb      	ldr	r3, [r7, #24]
 8023aca:	0b1b      	lsrs	r3, r3, #12
 8023acc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8023ace:	697b      	ldr	r3, [r7, #20]
 8023ad0:	091b      	lsrs	r3, r3, #4
 8023ad2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8023ad4:	69bb      	ldr	r3, [r7, #24]
 8023ad6:	011a      	lsls	r2, r3, #4
 8023ad8:	69fb      	ldr	r3, [r7, #28]
 8023ada:	021b      	lsls	r3, r3, #8
 8023adc:	431a      	orrs	r2, r3
 8023ade:	6a3b      	ldr	r3, [r7, #32]
 8023ae0:	031b      	lsls	r3, r3, #12
 8023ae2:	4313      	orrs	r3, r2
 8023ae4:	697a      	ldr	r2, [r7, #20]
 8023ae6:	4313      	orrs	r3, r2
 8023ae8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8023aea:	68fb      	ldr	r3, [r7, #12]
 8023aec:	681b      	ldr	r3, [r3, #0]
 8023aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023af0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8023af2:	e003      	b.n	8023afc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8023af4:	68fb      	ldr	r3, [r7, #12]
 8023af6:	681b      	ldr	r3, [r3, #0]
 8023af8:	68ba      	ldr	r2, [r7, #8]
 8023afa:	60da      	str	r2, [r3, #12]
}
 8023afc:	bf00      	nop
 8023afe:	372c      	adds	r7, #44	; 0x2c
 8023b00:	46bd      	mov	sp, r7
 8023b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b06:	4770      	bx	lr

08023b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8023b08:	b480      	push	{r7}
 8023b0a:	b089      	sub	sp, #36	; 0x24
 8023b0c:	af00      	add	r7, sp, #0
 8023b0e:	6078      	str	r0, [r7, #4]
 8023b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8023b12:	2300      	movs	r3, #0
 8023b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8023b16:	2300      	movs	r3, #0
 8023b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8023b1a:	2300      	movs	r3, #0
 8023b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8023b1e:	2300      	movs	r3, #0
 8023b20:	61fb      	str	r3, [r7, #28]
 8023b22:	e177      	b.n	8023e14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8023b24:	2201      	movs	r2, #1
 8023b26:	69fb      	ldr	r3, [r7, #28]
 8023b28:	fa02 f303 	lsl.w	r3, r2, r3
 8023b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8023b2e:	683b      	ldr	r3, [r7, #0]
 8023b30:	681b      	ldr	r3, [r3, #0]
 8023b32:	697a      	ldr	r2, [r7, #20]
 8023b34:	4013      	ands	r3, r2
 8023b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8023b38:	693a      	ldr	r2, [r7, #16]
 8023b3a:	697b      	ldr	r3, [r7, #20]
 8023b3c:	429a      	cmp	r2, r3
 8023b3e:	f040 8166 	bne.w	8023e0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8023b42:	683b      	ldr	r3, [r7, #0]
 8023b44:	685b      	ldr	r3, [r3, #4]
 8023b46:	f003 0303 	and.w	r3, r3, #3
 8023b4a:	2b01      	cmp	r3, #1
 8023b4c:	d005      	beq.n	8023b5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8023b4e:	683b      	ldr	r3, [r7, #0]
 8023b50:	685b      	ldr	r3, [r3, #4]
 8023b52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8023b56:	2b02      	cmp	r3, #2
 8023b58:	d130      	bne.n	8023bbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8023b5a:	687b      	ldr	r3, [r7, #4]
 8023b5c:	689b      	ldr	r3, [r3, #8]
 8023b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8023b60:	69fb      	ldr	r3, [r7, #28]
 8023b62:	005b      	lsls	r3, r3, #1
 8023b64:	2203      	movs	r2, #3
 8023b66:	fa02 f303 	lsl.w	r3, r2, r3
 8023b6a:	43db      	mvns	r3, r3
 8023b6c:	69ba      	ldr	r2, [r7, #24]
 8023b6e:	4013      	ands	r3, r2
 8023b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8023b72:	683b      	ldr	r3, [r7, #0]
 8023b74:	68da      	ldr	r2, [r3, #12]
 8023b76:	69fb      	ldr	r3, [r7, #28]
 8023b78:	005b      	lsls	r3, r3, #1
 8023b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8023b7e:	69ba      	ldr	r2, [r7, #24]
 8023b80:	4313      	orrs	r3, r2
 8023b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8023b84:	687b      	ldr	r3, [r7, #4]
 8023b86:	69ba      	ldr	r2, [r7, #24]
 8023b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8023b8a:	687b      	ldr	r3, [r7, #4]
 8023b8c:	685b      	ldr	r3, [r3, #4]
 8023b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8023b90:	2201      	movs	r2, #1
 8023b92:	69fb      	ldr	r3, [r7, #28]
 8023b94:	fa02 f303 	lsl.w	r3, r2, r3
 8023b98:	43db      	mvns	r3, r3
 8023b9a:	69ba      	ldr	r2, [r7, #24]
 8023b9c:	4013      	ands	r3, r2
 8023b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8023ba0:	683b      	ldr	r3, [r7, #0]
 8023ba2:	685b      	ldr	r3, [r3, #4]
 8023ba4:	091b      	lsrs	r3, r3, #4
 8023ba6:	f003 0201 	and.w	r2, r3, #1
 8023baa:	69fb      	ldr	r3, [r7, #28]
 8023bac:	fa02 f303 	lsl.w	r3, r2, r3
 8023bb0:	69ba      	ldr	r2, [r7, #24]
 8023bb2:	4313      	orrs	r3, r2
 8023bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8023bb6:	687b      	ldr	r3, [r7, #4]
 8023bb8:	69ba      	ldr	r2, [r7, #24]
 8023bba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8023bbc:	683b      	ldr	r3, [r7, #0]
 8023bbe:	685b      	ldr	r3, [r3, #4]
 8023bc0:	f003 0303 	and.w	r3, r3, #3
 8023bc4:	2b03      	cmp	r3, #3
 8023bc6:	d017      	beq.n	8023bf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8023bc8:	687b      	ldr	r3, [r7, #4]
 8023bca:	68db      	ldr	r3, [r3, #12]
 8023bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8023bce:	69fb      	ldr	r3, [r7, #28]
 8023bd0:	005b      	lsls	r3, r3, #1
 8023bd2:	2203      	movs	r2, #3
 8023bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8023bd8:	43db      	mvns	r3, r3
 8023bda:	69ba      	ldr	r2, [r7, #24]
 8023bdc:	4013      	ands	r3, r2
 8023bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8023be0:	683b      	ldr	r3, [r7, #0]
 8023be2:	689a      	ldr	r2, [r3, #8]
 8023be4:	69fb      	ldr	r3, [r7, #28]
 8023be6:	005b      	lsls	r3, r3, #1
 8023be8:	fa02 f303 	lsl.w	r3, r2, r3
 8023bec:	69ba      	ldr	r2, [r7, #24]
 8023bee:	4313      	orrs	r3, r2
 8023bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8023bf2:	687b      	ldr	r3, [r7, #4]
 8023bf4:	69ba      	ldr	r2, [r7, #24]
 8023bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8023bf8:	683b      	ldr	r3, [r7, #0]
 8023bfa:	685b      	ldr	r3, [r3, #4]
 8023bfc:	f003 0303 	and.w	r3, r3, #3
 8023c00:	2b02      	cmp	r3, #2
 8023c02:	d123      	bne.n	8023c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8023c04:	69fb      	ldr	r3, [r7, #28]
 8023c06:	08da      	lsrs	r2, r3, #3
 8023c08:	687b      	ldr	r3, [r7, #4]
 8023c0a:	3208      	adds	r2, #8
 8023c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8023c12:	69fb      	ldr	r3, [r7, #28]
 8023c14:	f003 0307 	and.w	r3, r3, #7
 8023c18:	009b      	lsls	r3, r3, #2
 8023c1a:	220f      	movs	r2, #15
 8023c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8023c20:	43db      	mvns	r3, r3
 8023c22:	69ba      	ldr	r2, [r7, #24]
 8023c24:	4013      	ands	r3, r2
 8023c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8023c28:	683b      	ldr	r3, [r7, #0]
 8023c2a:	691a      	ldr	r2, [r3, #16]
 8023c2c:	69fb      	ldr	r3, [r7, #28]
 8023c2e:	f003 0307 	and.w	r3, r3, #7
 8023c32:	009b      	lsls	r3, r3, #2
 8023c34:	fa02 f303 	lsl.w	r3, r2, r3
 8023c38:	69ba      	ldr	r2, [r7, #24]
 8023c3a:	4313      	orrs	r3, r2
 8023c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8023c3e:	69fb      	ldr	r3, [r7, #28]
 8023c40:	08da      	lsrs	r2, r3, #3
 8023c42:	687b      	ldr	r3, [r7, #4]
 8023c44:	3208      	adds	r2, #8
 8023c46:	69b9      	ldr	r1, [r7, #24]
 8023c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8023c4c:	687b      	ldr	r3, [r7, #4]
 8023c4e:	681b      	ldr	r3, [r3, #0]
 8023c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8023c52:	69fb      	ldr	r3, [r7, #28]
 8023c54:	005b      	lsls	r3, r3, #1
 8023c56:	2203      	movs	r2, #3
 8023c58:	fa02 f303 	lsl.w	r3, r2, r3
 8023c5c:	43db      	mvns	r3, r3
 8023c5e:	69ba      	ldr	r2, [r7, #24]
 8023c60:	4013      	ands	r3, r2
 8023c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8023c64:	683b      	ldr	r3, [r7, #0]
 8023c66:	685b      	ldr	r3, [r3, #4]
 8023c68:	f003 0203 	and.w	r2, r3, #3
 8023c6c:	69fb      	ldr	r3, [r7, #28]
 8023c6e:	005b      	lsls	r3, r3, #1
 8023c70:	fa02 f303 	lsl.w	r3, r2, r3
 8023c74:	69ba      	ldr	r2, [r7, #24]
 8023c76:	4313      	orrs	r3, r2
 8023c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8023c7a:	687b      	ldr	r3, [r7, #4]
 8023c7c:	69ba      	ldr	r2, [r7, #24]
 8023c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8023c80:	683b      	ldr	r3, [r7, #0]
 8023c82:	685b      	ldr	r3, [r3, #4]
 8023c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8023c88:	2b00      	cmp	r3, #0
 8023c8a:	f000 80c0 	beq.w	8023e0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8023c8e:	2300      	movs	r3, #0
 8023c90:	60fb      	str	r3, [r7, #12]
 8023c92:	4b66      	ldr	r3, [pc, #408]	; (8023e2c <HAL_GPIO_Init+0x324>)
 8023c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023c96:	4a65      	ldr	r2, [pc, #404]	; (8023e2c <HAL_GPIO_Init+0x324>)
 8023c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8023c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8023c9e:	4b63      	ldr	r3, [pc, #396]	; (8023e2c <HAL_GPIO_Init+0x324>)
 8023ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023ca6:	60fb      	str	r3, [r7, #12]
 8023ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8023caa:	4a61      	ldr	r2, [pc, #388]	; (8023e30 <HAL_GPIO_Init+0x328>)
 8023cac:	69fb      	ldr	r3, [r7, #28]
 8023cae:	089b      	lsrs	r3, r3, #2
 8023cb0:	3302      	adds	r3, #2
 8023cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8023cb8:	69fb      	ldr	r3, [r7, #28]
 8023cba:	f003 0303 	and.w	r3, r3, #3
 8023cbe:	009b      	lsls	r3, r3, #2
 8023cc0:	220f      	movs	r2, #15
 8023cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8023cc6:	43db      	mvns	r3, r3
 8023cc8:	69ba      	ldr	r2, [r7, #24]
 8023cca:	4013      	ands	r3, r2
 8023ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8023cce:	687b      	ldr	r3, [r7, #4]
 8023cd0:	4a58      	ldr	r2, [pc, #352]	; (8023e34 <HAL_GPIO_Init+0x32c>)
 8023cd2:	4293      	cmp	r3, r2
 8023cd4:	d037      	beq.n	8023d46 <HAL_GPIO_Init+0x23e>
 8023cd6:	687b      	ldr	r3, [r7, #4]
 8023cd8:	4a57      	ldr	r2, [pc, #348]	; (8023e38 <HAL_GPIO_Init+0x330>)
 8023cda:	4293      	cmp	r3, r2
 8023cdc:	d031      	beq.n	8023d42 <HAL_GPIO_Init+0x23a>
 8023cde:	687b      	ldr	r3, [r7, #4]
 8023ce0:	4a56      	ldr	r2, [pc, #344]	; (8023e3c <HAL_GPIO_Init+0x334>)
 8023ce2:	4293      	cmp	r3, r2
 8023ce4:	d02b      	beq.n	8023d3e <HAL_GPIO_Init+0x236>
 8023ce6:	687b      	ldr	r3, [r7, #4]
 8023ce8:	4a55      	ldr	r2, [pc, #340]	; (8023e40 <HAL_GPIO_Init+0x338>)
 8023cea:	4293      	cmp	r3, r2
 8023cec:	d025      	beq.n	8023d3a <HAL_GPIO_Init+0x232>
 8023cee:	687b      	ldr	r3, [r7, #4]
 8023cf0:	4a54      	ldr	r2, [pc, #336]	; (8023e44 <HAL_GPIO_Init+0x33c>)
 8023cf2:	4293      	cmp	r3, r2
 8023cf4:	d01f      	beq.n	8023d36 <HAL_GPIO_Init+0x22e>
 8023cf6:	687b      	ldr	r3, [r7, #4]
 8023cf8:	4a53      	ldr	r2, [pc, #332]	; (8023e48 <HAL_GPIO_Init+0x340>)
 8023cfa:	4293      	cmp	r3, r2
 8023cfc:	d019      	beq.n	8023d32 <HAL_GPIO_Init+0x22a>
 8023cfe:	687b      	ldr	r3, [r7, #4]
 8023d00:	4a52      	ldr	r2, [pc, #328]	; (8023e4c <HAL_GPIO_Init+0x344>)
 8023d02:	4293      	cmp	r3, r2
 8023d04:	d013      	beq.n	8023d2e <HAL_GPIO_Init+0x226>
 8023d06:	687b      	ldr	r3, [r7, #4]
 8023d08:	4a51      	ldr	r2, [pc, #324]	; (8023e50 <HAL_GPIO_Init+0x348>)
 8023d0a:	4293      	cmp	r3, r2
 8023d0c:	d00d      	beq.n	8023d2a <HAL_GPIO_Init+0x222>
 8023d0e:	687b      	ldr	r3, [r7, #4]
 8023d10:	4a50      	ldr	r2, [pc, #320]	; (8023e54 <HAL_GPIO_Init+0x34c>)
 8023d12:	4293      	cmp	r3, r2
 8023d14:	d007      	beq.n	8023d26 <HAL_GPIO_Init+0x21e>
 8023d16:	687b      	ldr	r3, [r7, #4]
 8023d18:	4a4f      	ldr	r2, [pc, #316]	; (8023e58 <HAL_GPIO_Init+0x350>)
 8023d1a:	4293      	cmp	r3, r2
 8023d1c:	d101      	bne.n	8023d22 <HAL_GPIO_Init+0x21a>
 8023d1e:	2309      	movs	r3, #9
 8023d20:	e012      	b.n	8023d48 <HAL_GPIO_Init+0x240>
 8023d22:	230a      	movs	r3, #10
 8023d24:	e010      	b.n	8023d48 <HAL_GPIO_Init+0x240>
 8023d26:	2308      	movs	r3, #8
 8023d28:	e00e      	b.n	8023d48 <HAL_GPIO_Init+0x240>
 8023d2a:	2307      	movs	r3, #7
 8023d2c:	e00c      	b.n	8023d48 <HAL_GPIO_Init+0x240>
 8023d2e:	2306      	movs	r3, #6
 8023d30:	e00a      	b.n	8023d48 <HAL_GPIO_Init+0x240>
 8023d32:	2305      	movs	r3, #5
 8023d34:	e008      	b.n	8023d48 <HAL_GPIO_Init+0x240>
 8023d36:	2304      	movs	r3, #4
 8023d38:	e006      	b.n	8023d48 <HAL_GPIO_Init+0x240>
 8023d3a:	2303      	movs	r3, #3
 8023d3c:	e004      	b.n	8023d48 <HAL_GPIO_Init+0x240>
 8023d3e:	2302      	movs	r3, #2
 8023d40:	e002      	b.n	8023d48 <HAL_GPIO_Init+0x240>
 8023d42:	2301      	movs	r3, #1
 8023d44:	e000      	b.n	8023d48 <HAL_GPIO_Init+0x240>
 8023d46:	2300      	movs	r3, #0
 8023d48:	69fa      	ldr	r2, [r7, #28]
 8023d4a:	f002 0203 	and.w	r2, r2, #3
 8023d4e:	0092      	lsls	r2, r2, #2
 8023d50:	4093      	lsls	r3, r2
 8023d52:	69ba      	ldr	r2, [r7, #24]
 8023d54:	4313      	orrs	r3, r2
 8023d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8023d58:	4935      	ldr	r1, [pc, #212]	; (8023e30 <HAL_GPIO_Init+0x328>)
 8023d5a:	69fb      	ldr	r3, [r7, #28]
 8023d5c:	089b      	lsrs	r3, r3, #2
 8023d5e:	3302      	adds	r3, #2
 8023d60:	69ba      	ldr	r2, [r7, #24]
 8023d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8023d66:	4b3d      	ldr	r3, [pc, #244]	; (8023e5c <HAL_GPIO_Init+0x354>)
 8023d68:	689b      	ldr	r3, [r3, #8]
 8023d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023d6c:	693b      	ldr	r3, [r7, #16]
 8023d6e:	43db      	mvns	r3, r3
 8023d70:	69ba      	ldr	r2, [r7, #24]
 8023d72:	4013      	ands	r3, r2
 8023d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8023d76:	683b      	ldr	r3, [r7, #0]
 8023d78:	685b      	ldr	r3, [r3, #4]
 8023d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8023d7e:	2b00      	cmp	r3, #0
 8023d80:	d003      	beq.n	8023d8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8023d82:	69ba      	ldr	r2, [r7, #24]
 8023d84:	693b      	ldr	r3, [r7, #16]
 8023d86:	4313      	orrs	r3, r2
 8023d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8023d8a:	4a34      	ldr	r2, [pc, #208]	; (8023e5c <HAL_GPIO_Init+0x354>)
 8023d8c:	69bb      	ldr	r3, [r7, #24]
 8023d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8023d90:	4b32      	ldr	r3, [pc, #200]	; (8023e5c <HAL_GPIO_Init+0x354>)
 8023d92:	68db      	ldr	r3, [r3, #12]
 8023d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023d96:	693b      	ldr	r3, [r7, #16]
 8023d98:	43db      	mvns	r3, r3
 8023d9a:	69ba      	ldr	r2, [r7, #24]
 8023d9c:	4013      	ands	r3, r2
 8023d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8023da0:	683b      	ldr	r3, [r7, #0]
 8023da2:	685b      	ldr	r3, [r3, #4]
 8023da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8023da8:	2b00      	cmp	r3, #0
 8023daa:	d003      	beq.n	8023db4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8023dac:	69ba      	ldr	r2, [r7, #24]
 8023dae:	693b      	ldr	r3, [r7, #16]
 8023db0:	4313      	orrs	r3, r2
 8023db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8023db4:	4a29      	ldr	r2, [pc, #164]	; (8023e5c <HAL_GPIO_Init+0x354>)
 8023db6:	69bb      	ldr	r3, [r7, #24]
 8023db8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8023dba:	4b28      	ldr	r3, [pc, #160]	; (8023e5c <HAL_GPIO_Init+0x354>)
 8023dbc:	685b      	ldr	r3, [r3, #4]
 8023dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023dc0:	693b      	ldr	r3, [r7, #16]
 8023dc2:	43db      	mvns	r3, r3
 8023dc4:	69ba      	ldr	r2, [r7, #24]
 8023dc6:	4013      	ands	r3, r2
 8023dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8023dca:	683b      	ldr	r3, [r7, #0]
 8023dcc:	685b      	ldr	r3, [r3, #4]
 8023dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023dd2:	2b00      	cmp	r3, #0
 8023dd4:	d003      	beq.n	8023dde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8023dd6:	69ba      	ldr	r2, [r7, #24]
 8023dd8:	693b      	ldr	r3, [r7, #16]
 8023dda:	4313      	orrs	r3, r2
 8023ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8023dde:	4a1f      	ldr	r2, [pc, #124]	; (8023e5c <HAL_GPIO_Init+0x354>)
 8023de0:	69bb      	ldr	r3, [r7, #24]
 8023de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8023de4:	4b1d      	ldr	r3, [pc, #116]	; (8023e5c <HAL_GPIO_Init+0x354>)
 8023de6:	681b      	ldr	r3, [r3, #0]
 8023de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023dea:	693b      	ldr	r3, [r7, #16]
 8023dec:	43db      	mvns	r3, r3
 8023dee:	69ba      	ldr	r2, [r7, #24]
 8023df0:	4013      	ands	r3, r2
 8023df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8023df4:	683b      	ldr	r3, [r7, #0]
 8023df6:	685b      	ldr	r3, [r3, #4]
 8023df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8023dfc:	2b00      	cmp	r3, #0
 8023dfe:	d003      	beq.n	8023e08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8023e00:	69ba      	ldr	r2, [r7, #24]
 8023e02:	693b      	ldr	r3, [r7, #16]
 8023e04:	4313      	orrs	r3, r2
 8023e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8023e08:	4a14      	ldr	r2, [pc, #80]	; (8023e5c <HAL_GPIO_Init+0x354>)
 8023e0a:	69bb      	ldr	r3, [r7, #24]
 8023e0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8023e0e:	69fb      	ldr	r3, [r7, #28]
 8023e10:	3301      	adds	r3, #1
 8023e12:	61fb      	str	r3, [r7, #28]
 8023e14:	69fb      	ldr	r3, [r7, #28]
 8023e16:	2b0f      	cmp	r3, #15
 8023e18:	f67f ae84 	bls.w	8023b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8023e1c:	bf00      	nop
 8023e1e:	bf00      	nop
 8023e20:	3724      	adds	r7, #36	; 0x24
 8023e22:	46bd      	mov	sp, r7
 8023e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e28:	4770      	bx	lr
 8023e2a:	bf00      	nop
 8023e2c:	40023800 	.word	0x40023800
 8023e30:	40013800 	.word	0x40013800
 8023e34:	40020000 	.word	0x40020000
 8023e38:	40020400 	.word	0x40020400
 8023e3c:	40020800 	.word	0x40020800
 8023e40:	40020c00 	.word	0x40020c00
 8023e44:	40021000 	.word	0x40021000
 8023e48:	40021400 	.word	0x40021400
 8023e4c:	40021800 	.word	0x40021800
 8023e50:	40021c00 	.word	0x40021c00
 8023e54:	40022000 	.word	0x40022000
 8023e58:	40022400 	.word	0x40022400
 8023e5c:	40013c00 	.word	0x40013c00

08023e60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8023e60:	b480      	push	{r7}
 8023e62:	b087      	sub	sp, #28
 8023e64:	af00      	add	r7, sp, #0
 8023e66:	6078      	str	r0, [r7, #4]
 8023e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8023e6a:	2300      	movs	r3, #0
 8023e6c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8023e6e:	2300      	movs	r3, #0
 8023e70:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8023e72:	2300      	movs	r3, #0
 8023e74:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8023e76:	2300      	movs	r3, #0
 8023e78:	617b      	str	r3, [r7, #20]
 8023e7a:	e0d9      	b.n	8024030 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8023e7c:	2201      	movs	r2, #1
 8023e7e:	697b      	ldr	r3, [r7, #20]
 8023e80:	fa02 f303 	lsl.w	r3, r2, r3
 8023e84:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8023e86:	683a      	ldr	r2, [r7, #0]
 8023e88:	693b      	ldr	r3, [r7, #16]
 8023e8a:	4013      	ands	r3, r2
 8023e8c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8023e8e:	68fa      	ldr	r2, [r7, #12]
 8023e90:	693b      	ldr	r3, [r7, #16]
 8023e92:	429a      	cmp	r2, r3
 8023e94:	f040 80c9 	bne.w	802402a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8023e98:	4a6b      	ldr	r2, [pc, #428]	; (8024048 <HAL_GPIO_DeInit+0x1e8>)
 8023e9a:	697b      	ldr	r3, [r7, #20]
 8023e9c:	089b      	lsrs	r3, r3, #2
 8023e9e:	3302      	adds	r3, #2
 8023ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023ea4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8023ea6:	697b      	ldr	r3, [r7, #20]
 8023ea8:	f003 0303 	and.w	r3, r3, #3
 8023eac:	009b      	lsls	r3, r3, #2
 8023eae:	220f      	movs	r2, #15
 8023eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8023eb4:	68ba      	ldr	r2, [r7, #8]
 8023eb6:	4013      	ands	r3, r2
 8023eb8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8023eba:	687b      	ldr	r3, [r7, #4]
 8023ebc:	4a63      	ldr	r2, [pc, #396]	; (802404c <HAL_GPIO_DeInit+0x1ec>)
 8023ebe:	4293      	cmp	r3, r2
 8023ec0:	d037      	beq.n	8023f32 <HAL_GPIO_DeInit+0xd2>
 8023ec2:	687b      	ldr	r3, [r7, #4]
 8023ec4:	4a62      	ldr	r2, [pc, #392]	; (8024050 <HAL_GPIO_DeInit+0x1f0>)
 8023ec6:	4293      	cmp	r3, r2
 8023ec8:	d031      	beq.n	8023f2e <HAL_GPIO_DeInit+0xce>
 8023eca:	687b      	ldr	r3, [r7, #4]
 8023ecc:	4a61      	ldr	r2, [pc, #388]	; (8024054 <HAL_GPIO_DeInit+0x1f4>)
 8023ece:	4293      	cmp	r3, r2
 8023ed0:	d02b      	beq.n	8023f2a <HAL_GPIO_DeInit+0xca>
 8023ed2:	687b      	ldr	r3, [r7, #4]
 8023ed4:	4a60      	ldr	r2, [pc, #384]	; (8024058 <HAL_GPIO_DeInit+0x1f8>)
 8023ed6:	4293      	cmp	r3, r2
 8023ed8:	d025      	beq.n	8023f26 <HAL_GPIO_DeInit+0xc6>
 8023eda:	687b      	ldr	r3, [r7, #4]
 8023edc:	4a5f      	ldr	r2, [pc, #380]	; (802405c <HAL_GPIO_DeInit+0x1fc>)
 8023ede:	4293      	cmp	r3, r2
 8023ee0:	d01f      	beq.n	8023f22 <HAL_GPIO_DeInit+0xc2>
 8023ee2:	687b      	ldr	r3, [r7, #4]
 8023ee4:	4a5e      	ldr	r2, [pc, #376]	; (8024060 <HAL_GPIO_DeInit+0x200>)
 8023ee6:	4293      	cmp	r3, r2
 8023ee8:	d019      	beq.n	8023f1e <HAL_GPIO_DeInit+0xbe>
 8023eea:	687b      	ldr	r3, [r7, #4]
 8023eec:	4a5d      	ldr	r2, [pc, #372]	; (8024064 <HAL_GPIO_DeInit+0x204>)
 8023eee:	4293      	cmp	r3, r2
 8023ef0:	d013      	beq.n	8023f1a <HAL_GPIO_DeInit+0xba>
 8023ef2:	687b      	ldr	r3, [r7, #4]
 8023ef4:	4a5c      	ldr	r2, [pc, #368]	; (8024068 <HAL_GPIO_DeInit+0x208>)
 8023ef6:	4293      	cmp	r3, r2
 8023ef8:	d00d      	beq.n	8023f16 <HAL_GPIO_DeInit+0xb6>
 8023efa:	687b      	ldr	r3, [r7, #4]
 8023efc:	4a5b      	ldr	r2, [pc, #364]	; (802406c <HAL_GPIO_DeInit+0x20c>)
 8023efe:	4293      	cmp	r3, r2
 8023f00:	d007      	beq.n	8023f12 <HAL_GPIO_DeInit+0xb2>
 8023f02:	687b      	ldr	r3, [r7, #4]
 8023f04:	4a5a      	ldr	r2, [pc, #360]	; (8024070 <HAL_GPIO_DeInit+0x210>)
 8023f06:	4293      	cmp	r3, r2
 8023f08:	d101      	bne.n	8023f0e <HAL_GPIO_DeInit+0xae>
 8023f0a:	2309      	movs	r3, #9
 8023f0c:	e012      	b.n	8023f34 <HAL_GPIO_DeInit+0xd4>
 8023f0e:	230a      	movs	r3, #10
 8023f10:	e010      	b.n	8023f34 <HAL_GPIO_DeInit+0xd4>
 8023f12:	2308      	movs	r3, #8
 8023f14:	e00e      	b.n	8023f34 <HAL_GPIO_DeInit+0xd4>
 8023f16:	2307      	movs	r3, #7
 8023f18:	e00c      	b.n	8023f34 <HAL_GPIO_DeInit+0xd4>
 8023f1a:	2306      	movs	r3, #6
 8023f1c:	e00a      	b.n	8023f34 <HAL_GPIO_DeInit+0xd4>
 8023f1e:	2305      	movs	r3, #5
 8023f20:	e008      	b.n	8023f34 <HAL_GPIO_DeInit+0xd4>
 8023f22:	2304      	movs	r3, #4
 8023f24:	e006      	b.n	8023f34 <HAL_GPIO_DeInit+0xd4>
 8023f26:	2303      	movs	r3, #3
 8023f28:	e004      	b.n	8023f34 <HAL_GPIO_DeInit+0xd4>
 8023f2a:	2302      	movs	r3, #2
 8023f2c:	e002      	b.n	8023f34 <HAL_GPIO_DeInit+0xd4>
 8023f2e:	2301      	movs	r3, #1
 8023f30:	e000      	b.n	8023f34 <HAL_GPIO_DeInit+0xd4>
 8023f32:	2300      	movs	r3, #0
 8023f34:	697a      	ldr	r2, [r7, #20]
 8023f36:	f002 0203 	and.w	r2, r2, #3
 8023f3a:	0092      	lsls	r2, r2, #2
 8023f3c:	4093      	lsls	r3, r2
 8023f3e:	68ba      	ldr	r2, [r7, #8]
 8023f40:	429a      	cmp	r2, r3
 8023f42:	d132      	bne.n	8023faa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8023f44:	4b4b      	ldr	r3, [pc, #300]	; (8024074 <HAL_GPIO_DeInit+0x214>)
 8023f46:	681a      	ldr	r2, [r3, #0]
 8023f48:	68fb      	ldr	r3, [r7, #12]
 8023f4a:	43db      	mvns	r3, r3
 8023f4c:	4949      	ldr	r1, [pc, #292]	; (8024074 <HAL_GPIO_DeInit+0x214>)
 8023f4e:	4013      	ands	r3, r2
 8023f50:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8023f52:	4b48      	ldr	r3, [pc, #288]	; (8024074 <HAL_GPIO_DeInit+0x214>)
 8023f54:	685a      	ldr	r2, [r3, #4]
 8023f56:	68fb      	ldr	r3, [r7, #12]
 8023f58:	43db      	mvns	r3, r3
 8023f5a:	4946      	ldr	r1, [pc, #280]	; (8024074 <HAL_GPIO_DeInit+0x214>)
 8023f5c:	4013      	ands	r3, r2
 8023f5e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8023f60:	4b44      	ldr	r3, [pc, #272]	; (8024074 <HAL_GPIO_DeInit+0x214>)
 8023f62:	68da      	ldr	r2, [r3, #12]
 8023f64:	68fb      	ldr	r3, [r7, #12]
 8023f66:	43db      	mvns	r3, r3
 8023f68:	4942      	ldr	r1, [pc, #264]	; (8024074 <HAL_GPIO_DeInit+0x214>)
 8023f6a:	4013      	ands	r3, r2
 8023f6c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8023f6e:	4b41      	ldr	r3, [pc, #260]	; (8024074 <HAL_GPIO_DeInit+0x214>)
 8023f70:	689a      	ldr	r2, [r3, #8]
 8023f72:	68fb      	ldr	r3, [r7, #12]
 8023f74:	43db      	mvns	r3, r3
 8023f76:	493f      	ldr	r1, [pc, #252]	; (8024074 <HAL_GPIO_DeInit+0x214>)
 8023f78:	4013      	ands	r3, r2
 8023f7a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8023f7c:	697b      	ldr	r3, [r7, #20]
 8023f7e:	f003 0303 	and.w	r3, r3, #3
 8023f82:	009b      	lsls	r3, r3, #2
 8023f84:	220f      	movs	r2, #15
 8023f86:	fa02 f303 	lsl.w	r3, r2, r3
 8023f8a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8023f8c:	4a2e      	ldr	r2, [pc, #184]	; (8024048 <HAL_GPIO_DeInit+0x1e8>)
 8023f8e:	697b      	ldr	r3, [r7, #20]
 8023f90:	089b      	lsrs	r3, r3, #2
 8023f92:	3302      	adds	r3, #2
 8023f94:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8023f98:	68bb      	ldr	r3, [r7, #8]
 8023f9a:	43da      	mvns	r2, r3
 8023f9c:	482a      	ldr	r0, [pc, #168]	; (8024048 <HAL_GPIO_DeInit+0x1e8>)
 8023f9e:	697b      	ldr	r3, [r7, #20]
 8023fa0:	089b      	lsrs	r3, r3, #2
 8023fa2:	400a      	ands	r2, r1
 8023fa4:	3302      	adds	r3, #2
 8023fa6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8023faa:	687b      	ldr	r3, [r7, #4]
 8023fac:	681a      	ldr	r2, [r3, #0]
 8023fae:	697b      	ldr	r3, [r7, #20]
 8023fb0:	005b      	lsls	r3, r3, #1
 8023fb2:	2103      	movs	r1, #3
 8023fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8023fb8:	43db      	mvns	r3, r3
 8023fba:	401a      	ands	r2, r3
 8023fbc:	687b      	ldr	r3, [r7, #4]
 8023fbe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8023fc0:	697b      	ldr	r3, [r7, #20]
 8023fc2:	08da      	lsrs	r2, r3, #3
 8023fc4:	687b      	ldr	r3, [r7, #4]
 8023fc6:	3208      	adds	r2, #8
 8023fc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023fcc:	697b      	ldr	r3, [r7, #20]
 8023fce:	f003 0307 	and.w	r3, r3, #7
 8023fd2:	009b      	lsls	r3, r3, #2
 8023fd4:	220f      	movs	r2, #15
 8023fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8023fda:	43db      	mvns	r3, r3
 8023fdc:	697a      	ldr	r2, [r7, #20]
 8023fde:	08d2      	lsrs	r2, r2, #3
 8023fe0:	4019      	ands	r1, r3
 8023fe2:	687b      	ldr	r3, [r7, #4]
 8023fe4:	3208      	adds	r2, #8
 8023fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8023fea:	687b      	ldr	r3, [r7, #4]
 8023fec:	68da      	ldr	r2, [r3, #12]
 8023fee:	697b      	ldr	r3, [r7, #20]
 8023ff0:	005b      	lsls	r3, r3, #1
 8023ff2:	2103      	movs	r1, #3
 8023ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8023ff8:	43db      	mvns	r3, r3
 8023ffa:	401a      	ands	r2, r3
 8023ffc:	687b      	ldr	r3, [r7, #4]
 8023ffe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024000:	687b      	ldr	r3, [r7, #4]
 8024002:	685a      	ldr	r2, [r3, #4]
 8024004:	2101      	movs	r1, #1
 8024006:	697b      	ldr	r3, [r7, #20]
 8024008:	fa01 f303 	lsl.w	r3, r1, r3
 802400c:	43db      	mvns	r3, r3
 802400e:	401a      	ands	r2, r3
 8024010:	687b      	ldr	r3, [r7, #4]
 8024012:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024014:	687b      	ldr	r3, [r7, #4]
 8024016:	689a      	ldr	r2, [r3, #8]
 8024018:	697b      	ldr	r3, [r7, #20]
 802401a:	005b      	lsls	r3, r3, #1
 802401c:	2103      	movs	r1, #3
 802401e:	fa01 f303 	lsl.w	r3, r1, r3
 8024022:	43db      	mvns	r3, r3
 8024024:	401a      	ands	r2, r3
 8024026:	687b      	ldr	r3, [r7, #4]
 8024028:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802402a:	697b      	ldr	r3, [r7, #20]
 802402c:	3301      	adds	r3, #1
 802402e:	617b      	str	r3, [r7, #20]
 8024030:	697b      	ldr	r3, [r7, #20]
 8024032:	2b0f      	cmp	r3, #15
 8024034:	f67f af22 	bls.w	8023e7c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8024038:	bf00      	nop
 802403a:	bf00      	nop
 802403c:	371c      	adds	r7, #28
 802403e:	46bd      	mov	sp, r7
 8024040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024044:	4770      	bx	lr
 8024046:	bf00      	nop
 8024048:	40013800 	.word	0x40013800
 802404c:	40020000 	.word	0x40020000
 8024050:	40020400 	.word	0x40020400
 8024054:	40020800 	.word	0x40020800
 8024058:	40020c00 	.word	0x40020c00
 802405c:	40021000 	.word	0x40021000
 8024060:	40021400 	.word	0x40021400
 8024064:	40021800 	.word	0x40021800
 8024068:	40021c00 	.word	0x40021c00
 802406c:	40022000 	.word	0x40022000
 8024070:	40022400 	.word	0x40022400
 8024074:	40013c00 	.word	0x40013c00

08024078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8024078:	b480      	push	{r7}
 802407a:	b083      	sub	sp, #12
 802407c:	af00      	add	r7, sp, #0
 802407e:	6078      	str	r0, [r7, #4]
 8024080:	460b      	mov	r3, r1
 8024082:	807b      	strh	r3, [r7, #2]
 8024084:	4613      	mov	r3, r2
 8024086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8024088:	787b      	ldrb	r3, [r7, #1]
 802408a:	2b00      	cmp	r3, #0
 802408c:	d003      	beq.n	8024096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802408e:	887a      	ldrh	r2, [r7, #2]
 8024090:	687b      	ldr	r3, [r7, #4]
 8024092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8024094:	e003      	b.n	802409e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8024096:	887b      	ldrh	r3, [r7, #2]
 8024098:	041a      	lsls	r2, r3, #16
 802409a:	687b      	ldr	r3, [r7, #4]
 802409c:	619a      	str	r2, [r3, #24]
}
 802409e:	bf00      	nop
 80240a0:	370c      	adds	r7, #12
 80240a2:	46bd      	mov	sp, r7
 80240a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240a8:	4770      	bx	lr
	...

080240ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80240ac:	b580      	push	{r7, lr}
 80240ae:	b082      	sub	sp, #8
 80240b0:	af00      	add	r7, sp, #0
 80240b2:	4603      	mov	r3, r0
 80240b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80240b6:	4b08      	ldr	r3, [pc, #32]	; (80240d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80240b8:	695a      	ldr	r2, [r3, #20]
 80240ba:	88fb      	ldrh	r3, [r7, #6]
 80240bc:	4013      	ands	r3, r2
 80240be:	2b00      	cmp	r3, #0
 80240c0:	d006      	beq.n	80240d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80240c2:	4a05      	ldr	r2, [pc, #20]	; (80240d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80240c4:	88fb      	ldrh	r3, [r7, #6]
 80240c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80240c8:	88fb      	ldrh	r3, [r7, #6]
 80240ca:	4618      	mov	r0, r3
 80240cc:	f7fd fb86 	bl	80217dc <HAL_GPIO_EXTI_Callback>
  }
}
 80240d0:	bf00      	nop
 80240d2:	3708      	adds	r7, #8
 80240d4:	46bd      	mov	sp, r7
 80240d6:	bd80      	pop	{r7, pc}
 80240d8:	40013c00 	.word	0x40013c00

080240dc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80240dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80240de:	b08f      	sub	sp, #60	; 0x3c
 80240e0:	af0a      	add	r7, sp, #40	; 0x28
 80240e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80240e4:	687b      	ldr	r3, [r7, #4]
 80240e6:	2b00      	cmp	r3, #0
 80240e8:	d101      	bne.n	80240ee <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80240ea:	2301      	movs	r3, #1
 80240ec:	e054      	b.n	8024198 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80240ee:	687b      	ldr	r3, [r7, #4]
 80240f0:	681b      	ldr	r3, [r3, #0]
 80240f2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80240f4:	687b      	ldr	r3, [r7, #4]
 80240f6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80240fa:	b2db      	uxtb	r3, r3
 80240fc:	2b00      	cmp	r3, #0
 80240fe:	d106      	bne.n	802410e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8024100:	687b      	ldr	r3, [r7, #4]
 8024102:	2200      	movs	r2, #0
 8024104:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8024108:	6878      	ldr	r0, [r7, #4]
 802410a:	f008 f84b 	bl	802c1a4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 802410e:	687b      	ldr	r3, [r7, #4]
 8024110:	2203      	movs	r2, #3
 8024112:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8024116:	68fb      	ldr	r3, [r7, #12]
 8024118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802411a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802411e:	2b00      	cmp	r3, #0
 8024120:	d102      	bne.n	8024128 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8024122:	687b      	ldr	r3, [r7, #4]
 8024124:	2200      	movs	r2, #0
 8024126:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8024128:	687b      	ldr	r3, [r7, #4]
 802412a:	681b      	ldr	r3, [r3, #0]
 802412c:	4618      	mov	r0, r3
 802412e:	f005 f879 	bl	8029224 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8024132:	687b      	ldr	r3, [r7, #4]
 8024134:	681b      	ldr	r3, [r3, #0]
 8024136:	603b      	str	r3, [r7, #0]
 8024138:	687e      	ldr	r6, [r7, #4]
 802413a:	466d      	mov	r5, sp
 802413c:	f106 0410 	add.w	r4, r6, #16
 8024140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024148:	e894 0003 	ldmia.w	r4, {r0, r1}
 802414c:	e885 0003 	stmia.w	r5, {r0, r1}
 8024150:	1d33      	adds	r3, r6, #4
 8024152:	cb0e      	ldmia	r3, {r1, r2, r3}
 8024154:	6838      	ldr	r0, [r7, #0]
 8024156:	f004 fff3 	bl	8029140 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 802415a:	687b      	ldr	r3, [r7, #4]
 802415c:	681b      	ldr	r3, [r3, #0]
 802415e:	2101      	movs	r1, #1
 8024160:	4618      	mov	r0, r3
 8024162:	f005 f870 	bl	8029246 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8024166:	687b      	ldr	r3, [r7, #4]
 8024168:	681b      	ldr	r3, [r3, #0]
 802416a:	603b      	str	r3, [r7, #0]
 802416c:	687e      	ldr	r6, [r7, #4]
 802416e:	466d      	mov	r5, sp
 8024170:	f106 0410 	add.w	r4, r6, #16
 8024174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802417a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802417c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024180:	e885 0003 	stmia.w	r5, {r0, r1}
 8024184:	1d33      	adds	r3, r6, #4
 8024186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8024188:	6838      	ldr	r0, [r7, #0]
 802418a:	f005 f9f9 	bl	8029580 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 802418e:	687b      	ldr	r3, [r7, #4]
 8024190:	2201      	movs	r2, #1
 8024192:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8024196:	2300      	movs	r3, #0
}
 8024198:	4618      	mov	r0, r3
 802419a:	3714      	adds	r7, #20
 802419c:	46bd      	mov	sp, r7
 802419e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080241a0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80241a0:	b590      	push	{r4, r7, lr}
 80241a2:	b089      	sub	sp, #36	; 0x24
 80241a4:	af04      	add	r7, sp, #16
 80241a6:	6078      	str	r0, [r7, #4]
 80241a8:	4608      	mov	r0, r1
 80241aa:	4611      	mov	r1, r2
 80241ac:	461a      	mov	r2, r3
 80241ae:	4603      	mov	r3, r0
 80241b0:	70fb      	strb	r3, [r7, #3]
 80241b2:	460b      	mov	r3, r1
 80241b4:	70bb      	strb	r3, [r7, #2]
 80241b6:	4613      	mov	r3, r2
 80241b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80241ba:	687b      	ldr	r3, [r7, #4]
 80241bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80241c0:	2b01      	cmp	r3, #1
 80241c2:	d101      	bne.n	80241c8 <HAL_HCD_HC_Init+0x28>
 80241c4:	2302      	movs	r3, #2
 80241c6:	e076      	b.n	80242b6 <HAL_HCD_HC_Init+0x116>
 80241c8:	687b      	ldr	r3, [r7, #4]
 80241ca:	2201      	movs	r2, #1
 80241cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80241d0:	78fb      	ldrb	r3, [r7, #3]
 80241d2:	687a      	ldr	r2, [r7, #4]
 80241d4:	212c      	movs	r1, #44	; 0x2c
 80241d6:	fb01 f303 	mul.w	r3, r1, r3
 80241da:	4413      	add	r3, r2
 80241dc:	333d      	adds	r3, #61	; 0x3d
 80241de:	2200      	movs	r2, #0
 80241e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80241e2:	78fb      	ldrb	r3, [r7, #3]
 80241e4:	687a      	ldr	r2, [r7, #4]
 80241e6:	212c      	movs	r1, #44	; 0x2c
 80241e8:	fb01 f303 	mul.w	r3, r1, r3
 80241ec:	4413      	add	r3, r2
 80241ee:	3338      	adds	r3, #56	; 0x38
 80241f0:	787a      	ldrb	r2, [r7, #1]
 80241f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80241f4:	78fb      	ldrb	r3, [r7, #3]
 80241f6:	687a      	ldr	r2, [r7, #4]
 80241f8:	212c      	movs	r1, #44	; 0x2c
 80241fa:	fb01 f303 	mul.w	r3, r1, r3
 80241fe:	4413      	add	r3, r2
 8024200:	3340      	adds	r3, #64	; 0x40
 8024202:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8024204:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8024206:	78fb      	ldrb	r3, [r7, #3]
 8024208:	687a      	ldr	r2, [r7, #4]
 802420a:	212c      	movs	r1, #44	; 0x2c
 802420c:	fb01 f303 	mul.w	r3, r1, r3
 8024210:	4413      	add	r3, r2
 8024212:	3339      	adds	r3, #57	; 0x39
 8024214:	78fa      	ldrb	r2, [r7, #3]
 8024216:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8024218:	78fb      	ldrb	r3, [r7, #3]
 802421a:	687a      	ldr	r2, [r7, #4]
 802421c:	212c      	movs	r1, #44	; 0x2c
 802421e:	fb01 f303 	mul.w	r3, r1, r3
 8024222:	4413      	add	r3, r2
 8024224:	333f      	adds	r3, #63	; 0x3f
 8024226:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 802422a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 802422c:	78fb      	ldrb	r3, [r7, #3]
 802422e:	78ba      	ldrb	r2, [r7, #2]
 8024230:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8024234:	b2d0      	uxtb	r0, r2
 8024236:	687a      	ldr	r2, [r7, #4]
 8024238:	212c      	movs	r1, #44	; 0x2c
 802423a:	fb01 f303 	mul.w	r3, r1, r3
 802423e:	4413      	add	r3, r2
 8024240:	333a      	adds	r3, #58	; 0x3a
 8024242:	4602      	mov	r2, r0
 8024244:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8024246:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802424a:	2b00      	cmp	r3, #0
 802424c:	da09      	bge.n	8024262 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 802424e:	78fb      	ldrb	r3, [r7, #3]
 8024250:	687a      	ldr	r2, [r7, #4]
 8024252:	212c      	movs	r1, #44	; 0x2c
 8024254:	fb01 f303 	mul.w	r3, r1, r3
 8024258:	4413      	add	r3, r2
 802425a:	333b      	adds	r3, #59	; 0x3b
 802425c:	2201      	movs	r2, #1
 802425e:	701a      	strb	r2, [r3, #0]
 8024260:	e008      	b.n	8024274 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8024262:	78fb      	ldrb	r3, [r7, #3]
 8024264:	687a      	ldr	r2, [r7, #4]
 8024266:	212c      	movs	r1, #44	; 0x2c
 8024268:	fb01 f303 	mul.w	r3, r1, r3
 802426c:	4413      	add	r3, r2
 802426e:	333b      	adds	r3, #59	; 0x3b
 8024270:	2200      	movs	r2, #0
 8024272:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8024274:	78fb      	ldrb	r3, [r7, #3]
 8024276:	687a      	ldr	r2, [r7, #4]
 8024278:	212c      	movs	r1, #44	; 0x2c
 802427a:	fb01 f303 	mul.w	r3, r1, r3
 802427e:	4413      	add	r3, r2
 8024280:	333c      	adds	r3, #60	; 0x3c
 8024282:	f897 2020 	ldrb.w	r2, [r7, #32]
 8024286:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8024288:	687b      	ldr	r3, [r7, #4]
 802428a:	6818      	ldr	r0, [r3, #0]
 802428c:	787c      	ldrb	r4, [r7, #1]
 802428e:	78ba      	ldrb	r2, [r7, #2]
 8024290:	78f9      	ldrb	r1, [r7, #3]
 8024292:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8024294:	9302      	str	r3, [sp, #8]
 8024296:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802429a:	9301      	str	r3, [sp, #4]
 802429c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80242a0:	9300      	str	r3, [sp, #0]
 80242a2:	4623      	mov	r3, r4
 80242a4:	f005 faf2 	bl	802988c <USB_HC_Init>
 80242a8:	4603      	mov	r3, r0
 80242aa:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80242ac:	687b      	ldr	r3, [r7, #4]
 80242ae:	2200      	movs	r2, #0
 80242b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80242b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80242b6:	4618      	mov	r0, r3
 80242b8:	3714      	adds	r7, #20
 80242ba:	46bd      	mov	sp, r7
 80242bc:	bd90      	pop	{r4, r7, pc}

080242be <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80242be:	b580      	push	{r7, lr}
 80242c0:	b084      	sub	sp, #16
 80242c2:	af00      	add	r7, sp, #0
 80242c4:	6078      	str	r0, [r7, #4]
 80242c6:	460b      	mov	r3, r1
 80242c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80242ca:	2300      	movs	r3, #0
 80242cc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80242ce:	687b      	ldr	r3, [r7, #4]
 80242d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80242d4:	2b01      	cmp	r3, #1
 80242d6:	d101      	bne.n	80242dc <HAL_HCD_HC_Halt+0x1e>
 80242d8:	2302      	movs	r3, #2
 80242da:	e00f      	b.n	80242fc <HAL_HCD_HC_Halt+0x3e>
 80242dc:	687b      	ldr	r3, [r7, #4]
 80242de:	2201      	movs	r2, #1
 80242e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80242e4:	687b      	ldr	r3, [r7, #4]
 80242e6:	681b      	ldr	r3, [r3, #0]
 80242e8:	78fa      	ldrb	r2, [r7, #3]
 80242ea:	4611      	mov	r1, r2
 80242ec:	4618      	mov	r0, r3
 80242ee:	f005 fd42 	bl	8029d76 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80242f2:	687b      	ldr	r3, [r7, #4]
 80242f4:	2200      	movs	r2, #0
 80242f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80242fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80242fc:	4618      	mov	r0, r3
 80242fe:	3710      	adds	r7, #16
 8024300:	46bd      	mov	sp, r7
 8024302:	bd80      	pop	{r7, pc}

08024304 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8024304:	b580      	push	{r7, lr}
 8024306:	b082      	sub	sp, #8
 8024308:	af00      	add	r7, sp, #0
 802430a:	6078      	str	r0, [r7, #4]
 802430c:	4608      	mov	r0, r1
 802430e:	4611      	mov	r1, r2
 8024310:	461a      	mov	r2, r3
 8024312:	4603      	mov	r3, r0
 8024314:	70fb      	strb	r3, [r7, #3]
 8024316:	460b      	mov	r3, r1
 8024318:	70bb      	strb	r3, [r7, #2]
 802431a:	4613      	mov	r3, r2
 802431c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 802431e:	78fb      	ldrb	r3, [r7, #3]
 8024320:	687a      	ldr	r2, [r7, #4]
 8024322:	212c      	movs	r1, #44	; 0x2c
 8024324:	fb01 f303 	mul.w	r3, r1, r3
 8024328:	4413      	add	r3, r2
 802432a:	333b      	adds	r3, #59	; 0x3b
 802432c:	78ba      	ldrb	r2, [r7, #2]
 802432e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8024330:	78fb      	ldrb	r3, [r7, #3]
 8024332:	687a      	ldr	r2, [r7, #4]
 8024334:	212c      	movs	r1, #44	; 0x2c
 8024336:	fb01 f303 	mul.w	r3, r1, r3
 802433a:	4413      	add	r3, r2
 802433c:	333f      	adds	r3, #63	; 0x3f
 802433e:	787a      	ldrb	r2, [r7, #1]
 8024340:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8024342:	7c3b      	ldrb	r3, [r7, #16]
 8024344:	2b00      	cmp	r3, #0
 8024346:	d112      	bne.n	802436e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8024348:	78fb      	ldrb	r3, [r7, #3]
 802434a:	687a      	ldr	r2, [r7, #4]
 802434c:	212c      	movs	r1, #44	; 0x2c
 802434e:	fb01 f303 	mul.w	r3, r1, r3
 8024352:	4413      	add	r3, r2
 8024354:	3342      	adds	r3, #66	; 0x42
 8024356:	2203      	movs	r2, #3
 8024358:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 802435a:	78fb      	ldrb	r3, [r7, #3]
 802435c:	687a      	ldr	r2, [r7, #4]
 802435e:	212c      	movs	r1, #44	; 0x2c
 8024360:	fb01 f303 	mul.w	r3, r1, r3
 8024364:	4413      	add	r3, r2
 8024366:	333d      	adds	r3, #61	; 0x3d
 8024368:	7f3a      	ldrb	r2, [r7, #28]
 802436a:	701a      	strb	r2, [r3, #0]
 802436c:	e008      	b.n	8024380 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802436e:	78fb      	ldrb	r3, [r7, #3]
 8024370:	687a      	ldr	r2, [r7, #4]
 8024372:	212c      	movs	r1, #44	; 0x2c
 8024374:	fb01 f303 	mul.w	r3, r1, r3
 8024378:	4413      	add	r3, r2
 802437a:	3342      	adds	r3, #66	; 0x42
 802437c:	2202      	movs	r2, #2
 802437e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8024380:	787b      	ldrb	r3, [r7, #1]
 8024382:	2b03      	cmp	r3, #3
 8024384:	f200 80c6 	bhi.w	8024514 <HAL_HCD_HC_SubmitRequest+0x210>
 8024388:	a201      	add	r2, pc, #4	; (adr r2, 8024390 <HAL_HCD_HC_SubmitRequest+0x8c>)
 802438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802438e:	bf00      	nop
 8024390:	080243a1 	.word	0x080243a1
 8024394:	08024501 	.word	0x08024501
 8024398:	08024405 	.word	0x08024405
 802439c:	08024483 	.word	0x08024483
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80243a0:	7c3b      	ldrb	r3, [r7, #16]
 80243a2:	2b01      	cmp	r3, #1
 80243a4:	f040 80b8 	bne.w	8024518 <HAL_HCD_HC_SubmitRequest+0x214>
 80243a8:	78bb      	ldrb	r3, [r7, #2]
 80243aa:	2b00      	cmp	r3, #0
 80243ac:	f040 80b4 	bne.w	8024518 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80243b0:	8b3b      	ldrh	r3, [r7, #24]
 80243b2:	2b00      	cmp	r3, #0
 80243b4:	d108      	bne.n	80243c8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80243b6:	78fb      	ldrb	r3, [r7, #3]
 80243b8:	687a      	ldr	r2, [r7, #4]
 80243ba:	212c      	movs	r1, #44	; 0x2c
 80243bc:	fb01 f303 	mul.w	r3, r1, r3
 80243c0:	4413      	add	r3, r2
 80243c2:	3355      	adds	r3, #85	; 0x55
 80243c4:	2201      	movs	r2, #1
 80243c6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80243c8:	78fb      	ldrb	r3, [r7, #3]
 80243ca:	687a      	ldr	r2, [r7, #4]
 80243cc:	212c      	movs	r1, #44	; 0x2c
 80243ce:	fb01 f303 	mul.w	r3, r1, r3
 80243d2:	4413      	add	r3, r2
 80243d4:	3355      	adds	r3, #85	; 0x55
 80243d6:	781b      	ldrb	r3, [r3, #0]
 80243d8:	2b00      	cmp	r3, #0
 80243da:	d109      	bne.n	80243f0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80243dc:	78fb      	ldrb	r3, [r7, #3]
 80243de:	687a      	ldr	r2, [r7, #4]
 80243e0:	212c      	movs	r1, #44	; 0x2c
 80243e2:	fb01 f303 	mul.w	r3, r1, r3
 80243e6:	4413      	add	r3, r2
 80243e8:	3342      	adds	r3, #66	; 0x42
 80243ea:	2200      	movs	r2, #0
 80243ec:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80243ee:	e093      	b.n	8024518 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80243f0:	78fb      	ldrb	r3, [r7, #3]
 80243f2:	687a      	ldr	r2, [r7, #4]
 80243f4:	212c      	movs	r1, #44	; 0x2c
 80243f6:	fb01 f303 	mul.w	r3, r1, r3
 80243fa:	4413      	add	r3, r2
 80243fc:	3342      	adds	r3, #66	; 0x42
 80243fe:	2202      	movs	r2, #2
 8024400:	701a      	strb	r2, [r3, #0]
      break;
 8024402:	e089      	b.n	8024518 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8024404:	78bb      	ldrb	r3, [r7, #2]
 8024406:	2b00      	cmp	r3, #0
 8024408:	d11d      	bne.n	8024446 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 802440a:	78fb      	ldrb	r3, [r7, #3]
 802440c:	687a      	ldr	r2, [r7, #4]
 802440e:	212c      	movs	r1, #44	; 0x2c
 8024410:	fb01 f303 	mul.w	r3, r1, r3
 8024414:	4413      	add	r3, r2
 8024416:	3355      	adds	r3, #85	; 0x55
 8024418:	781b      	ldrb	r3, [r3, #0]
 802441a:	2b00      	cmp	r3, #0
 802441c:	d109      	bne.n	8024432 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802441e:	78fb      	ldrb	r3, [r7, #3]
 8024420:	687a      	ldr	r2, [r7, #4]
 8024422:	212c      	movs	r1, #44	; 0x2c
 8024424:	fb01 f303 	mul.w	r3, r1, r3
 8024428:	4413      	add	r3, r2
 802442a:	3342      	adds	r3, #66	; 0x42
 802442c:	2200      	movs	r2, #0
 802442e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8024430:	e073      	b.n	802451a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024432:	78fb      	ldrb	r3, [r7, #3]
 8024434:	687a      	ldr	r2, [r7, #4]
 8024436:	212c      	movs	r1, #44	; 0x2c
 8024438:	fb01 f303 	mul.w	r3, r1, r3
 802443c:	4413      	add	r3, r2
 802443e:	3342      	adds	r3, #66	; 0x42
 8024440:	2202      	movs	r2, #2
 8024442:	701a      	strb	r2, [r3, #0]
      break;
 8024444:	e069      	b.n	802451a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8024446:	78fb      	ldrb	r3, [r7, #3]
 8024448:	687a      	ldr	r2, [r7, #4]
 802444a:	212c      	movs	r1, #44	; 0x2c
 802444c:	fb01 f303 	mul.w	r3, r1, r3
 8024450:	4413      	add	r3, r2
 8024452:	3354      	adds	r3, #84	; 0x54
 8024454:	781b      	ldrb	r3, [r3, #0]
 8024456:	2b00      	cmp	r3, #0
 8024458:	d109      	bne.n	802446e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802445a:	78fb      	ldrb	r3, [r7, #3]
 802445c:	687a      	ldr	r2, [r7, #4]
 802445e:	212c      	movs	r1, #44	; 0x2c
 8024460:	fb01 f303 	mul.w	r3, r1, r3
 8024464:	4413      	add	r3, r2
 8024466:	3342      	adds	r3, #66	; 0x42
 8024468:	2200      	movs	r2, #0
 802446a:	701a      	strb	r2, [r3, #0]
      break;
 802446c:	e055      	b.n	802451a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802446e:	78fb      	ldrb	r3, [r7, #3]
 8024470:	687a      	ldr	r2, [r7, #4]
 8024472:	212c      	movs	r1, #44	; 0x2c
 8024474:	fb01 f303 	mul.w	r3, r1, r3
 8024478:	4413      	add	r3, r2
 802447a:	3342      	adds	r3, #66	; 0x42
 802447c:	2202      	movs	r2, #2
 802447e:	701a      	strb	r2, [r3, #0]
      break;
 8024480:	e04b      	b.n	802451a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8024482:	78bb      	ldrb	r3, [r7, #2]
 8024484:	2b00      	cmp	r3, #0
 8024486:	d11d      	bne.n	80244c4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8024488:	78fb      	ldrb	r3, [r7, #3]
 802448a:	687a      	ldr	r2, [r7, #4]
 802448c:	212c      	movs	r1, #44	; 0x2c
 802448e:	fb01 f303 	mul.w	r3, r1, r3
 8024492:	4413      	add	r3, r2
 8024494:	3355      	adds	r3, #85	; 0x55
 8024496:	781b      	ldrb	r3, [r3, #0]
 8024498:	2b00      	cmp	r3, #0
 802449a:	d109      	bne.n	80244b0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802449c:	78fb      	ldrb	r3, [r7, #3]
 802449e:	687a      	ldr	r2, [r7, #4]
 80244a0:	212c      	movs	r1, #44	; 0x2c
 80244a2:	fb01 f303 	mul.w	r3, r1, r3
 80244a6:	4413      	add	r3, r2
 80244a8:	3342      	adds	r3, #66	; 0x42
 80244aa:	2200      	movs	r2, #0
 80244ac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80244ae:	e034      	b.n	802451a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80244b0:	78fb      	ldrb	r3, [r7, #3]
 80244b2:	687a      	ldr	r2, [r7, #4]
 80244b4:	212c      	movs	r1, #44	; 0x2c
 80244b6:	fb01 f303 	mul.w	r3, r1, r3
 80244ba:	4413      	add	r3, r2
 80244bc:	3342      	adds	r3, #66	; 0x42
 80244be:	2202      	movs	r2, #2
 80244c0:	701a      	strb	r2, [r3, #0]
      break;
 80244c2:	e02a      	b.n	802451a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80244c4:	78fb      	ldrb	r3, [r7, #3]
 80244c6:	687a      	ldr	r2, [r7, #4]
 80244c8:	212c      	movs	r1, #44	; 0x2c
 80244ca:	fb01 f303 	mul.w	r3, r1, r3
 80244ce:	4413      	add	r3, r2
 80244d0:	3354      	adds	r3, #84	; 0x54
 80244d2:	781b      	ldrb	r3, [r3, #0]
 80244d4:	2b00      	cmp	r3, #0
 80244d6:	d109      	bne.n	80244ec <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80244d8:	78fb      	ldrb	r3, [r7, #3]
 80244da:	687a      	ldr	r2, [r7, #4]
 80244dc:	212c      	movs	r1, #44	; 0x2c
 80244de:	fb01 f303 	mul.w	r3, r1, r3
 80244e2:	4413      	add	r3, r2
 80244e4:	3342      	adds	r3, #66	; 0x42
 80244e6:	2200      	movs	r2, #0
 80244e8:	701a      	strb	r2, [r3, #0]
      break;
 80244ea:	e016      	b.n	802451a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80244ec:	78fb      	ldrb	r3, [r7, #3]
 80244ee:	687a      	ldr	r2, [r7, #4]
 80244f0:	212c      	movs	r1, #44	; 0x2c
 80244f2:	fb01 f303 	mul.w	r3, r1, r3
 80244f6:	4413      	add	r3, r2
 80244f8:	3342      	adds	r3, #66	; 0x42
 80244fa:	2202      	movs	r2, #2
 80244fc:	701a      	strb	r2, [r3, #0]
      break;
 80244fe:	e00c      	b.n	802451a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024500:	78fb      	ldrb	r3, [r7, #3]
 8024502:	687a      	ldr	r2, [r7, #4]
 8024504:	212c      	movs	r1, #44	; 0x2c
 8024506:	fb01 f303 	mul.w	r3, r1, r3
 802450a:	4413      	add	r3, r2
 802450c:	3342      	adds	r3, #66	; 0x42
 802450e:	2200      	movs	r2, #0
 8024510:	701a      	strb	r2, [r3, #0]
      break;
 8024512:	e002      	b.n	802451a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8024514:	bf00      	nop
 8024516:	e000      	b.n	802451a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8024518:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 802451a:	78fb      	ldrb	r3, [r7, #3]
 802451c:	687a      	ldr	r2, [r7, #4]
 802451e:	212c      	movs	r1, #44	; 0x2c
 8024520:	fb01 f303 	mul.w	r3, r1, r3
 8024524:	4413      	add	r3, r2
 8024526:	3344      	adds	r3, #68	; 0x44
 8024528:	697a      	ldr	r2, [r7, #20]
 802452a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 802452c:	78fb      	ldrb	r3, [r7, #3]
 802452e:	8b3a      	ldrh	r2, [r7, #24]
 8024530:	6879      	ldr	r1, [r7, #4]
 8024532:	202c      	movs	r0, #44	; 0x2c
 8024534:	fb00 f303 	mul.w	r3, r0, r3
 8024538:	440b      	add	r3, r1
 802453a:	334c      	adds	r3, #76	; 0x4c
 802453c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 802453e:	78fb      	ldrb	r3, [r7, #3]
 8024540:	687a      	ldr	r2, [r7, #4]
 8024542:	212c      	movs	r1, #44	; 0x2c
 8024544:	fb01 f303 	mul.w	r3, r1, r3
 8024548:	4413      	add	r3, r2
 802454a:	3360      	adds	r3, #96	; 0x60
 802454c:	2200      	movs	r2, #0
 802454e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8024550:	78fb      	ldrb	r3, [r7, #3]
 8024552:	687a      	ldr	r2, [r7, #4]
 8024554:	212c      	movs	r1, #44	; 0x2c
 8024556:	fb01 f303 	mul.w	r3, r1, r3
 802455a:	4413      	add	r3, r2
 802455c:	3350      	adds	r3, #80	; 0x50
 802455e:	2200      	movs	r2, #0
 8024560:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8024562:	78fb      	ldrb	r3, [r7, #3]
 8024564:	687a      	ldr	r2, [r7, #4]
 8024566:	212c      	movs	r1, #44	; 0x2c
 8024568:	fb01 f303 	mul.w	r3, r1, r3
 802456c:	4413      	add	r3, r2
 802456e:	3339      	adds	r3, #57	; 0x39
 8024570:	78fa      	ldrb	r2, [r7, #3]
 8024572:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8024574:	78fb      	ldrb	r3, [r7, #3]
 8024576:	687a      	ldr	r2, [r7, #4]
 8024578:	212c      	movs	r1, #44	; 0x2c
 802457a:	fb01 f303 	mul.w	r3, r1, r3
 802457e:	4413      	add	r3, r2
 8024580:	3361      	adds	r3, #97	; 0x61
 8024582:	2200      	movs	r2, #0
 8024584:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8024586:	687b      	ldr	r3, [r7, #4]
 8024588:	6818      	ldr	r0, [r3, #0]
 802458a:	78fb      	ldrb	r3, [r7, #3]
 802458c:	222c      	movs	r2, #44	; 0x2c
 802458e:	fb02 f303 	mul.w	r3, r2, r3
 8024592:	3338      	adds	r3, #56	; 0x38
 8024594:	687a      	ldr	r2, [r7, #4]
 8024596:	18d1      	adds	r1, r2, r3
 8024598:	687b      	ldr	r3, [r7, #4]
 802459a:	691b      	ldr	r3, [r3, #16]
 802459c:	b2db      	uxtb	r3, r3
 802459e:	461a      	mov	r2, r3
 80245a0:	f005 fa96 	bl	8029ad0 <USB_HC_StartXfer>
 80245a4:	4603      	mov	r3, r0
}
 80245a6:	4618      	mov	r0, r3
 80245a8:	3708      	adds	r7, #8
 80245aa:	46bd      	mov	sp, r7
 80245ac:	bd80      	pop	{r7, pc}
 80245ae:	bf00      	nop

080245b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80245b0:	b580      	push	{r7, lr}
 80245b2:	b086      	sub	sp, #24
 80245b4:	af00      	add	r7, sp, #0
 80245b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80245b8:	687b      	ldr	r3, [r7, #4]
 80245ba:	681b      	ldr	r3, [r3, #0]
 80245bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80245be:	693b      	ldr	r3, [r7, #16]
 80245c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80245c2:	687b      	ldr	r3, [r7, #4]
 80245c4:	681b      	ldr	r3, [r3, #0]
 80245c6:	4618      	mov	r0, r3
 80245c8:	f004 ff97 	bl	80294fa <USB_GetMode>
 80245cc:	4603      	mov	r3, r0
 80245ce:	2b01      	cmp	r3, #1
 80245d0:	f040 80f6 	bne.w	80247c0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80245d4:	687b      	ldr	r3, [r7, #4]
 80245d6:	681b      	ldr	r3, [r3, #0]
 80245d8:	4618      	mov	r0, r3
 80245da:	f004 ff7b 	bl	80294d4 <USB_ReadInterrupts>
 80245de:	4603      	mov	r3, r0
 80245e0:	2b00      	cmp	r3, #0
 80245e2:	f000 80ec 	beq.w	80247be <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80245e6:	687b      	ldr	r3, [r7, #4]
 80245e8:	681b      	ldr	r3, [r3, #0]
 80245ea:	4618      	mov	r0, r3
 80245ec:	f004 ff72 	bl	80294d4 <USB_ReadInterrupts>
 80245f0:	4603      	mov	r3, r0
 80245f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80245f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80245fa:	d104      	bne.n	8024606 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80245fc:	687b      	ldr	r3, [r7, #4]
 80245fe:	681b      	ldr	r3, [r3, #0]
 8024600:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8024604:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8024606:	687b      	ldr	r3, [r7, #4]
 8024608:	681b      	ldr	r3, [r3, #0]
 802460a:	4618      	mov	r0, r3
 802460c:	f004 ff62 	bl	80294d4 <USB_ReadInterrupts>
 8024610:	4603      	mov	r3, r0
 8024612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8024616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802461a:	d104      	bne.n	8024626 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 802461c:	687b      	ldr	r3, [r7, #4]
 802461e:	681b      	ldr	r3, [r3, #0]
 8024620:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8024624:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8024626:	687b      	ldr	r3, [r7, #4]
 8024628:	681b      	ldr	r3, [r3, #0]
 802462a:	4618      	mov	r0, r3
 802462c:	f004 ff52 	bl	80294d4 <USB_ReadInterrupts>
 8024630:	4603      	mov	r3, r0
 8024632:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8024636:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802463a:	d104      	bne.n	8024646 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 802463c:	687b      	ldr	r3, [r7, #4]
 802463e:	681b      	ldr	r3, [r3, #0]
 8024640:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8024644:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8024646:	687b      	ldr	r3, [r7, #4]
 8024648:	681b      	ldr	r3, [r3, #0]
 802464a:	4618      	mov	r0, r3
 802464c:	f004 ff42 	bl	80294d4 <USB_ReadInterrupts>
 8024650:	4603      	mov	r3, r0
 8024652:	f003 0302 	and.w	r3, r3, #2
 8024656:	2b02      	cmp	r3, #2
 8024658:	d103      	bne.n	8024662 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 802465a:	687b      	ldr	r3, [r7, #4]
 802465c:	681b      	ldr	r3, [r3, #0]
 802465e:	2202      	movs	r2, #2
 8024660:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8024662:	687b      	ldr	r3, [r7, #4]
 8024664:	681b      	ldr	r3, [r3, #0]
 8024666:	4618      	mov	r0, r3
 8024668:	f004 ff34 	bl	80294d4 <USB_ReadInterrupts>
 802466c:	4603      	mov	r3, r0
 802466e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8024672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8024676:	d11c      	bne.n	80246b2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8024678:	687b      	ldr	r3, [r7, #4]
 802467a:	681b      	ldr	r3, [r3, #0]
 802467c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8024680:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8024682:	68fb      	ldr	r3, [r7, #12]
 8024684:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8024688:	681b      	ldr	r3, [r3, #0]
 802468a:	f003 0301 	and.w	r3, r3, #1
 802468e:	2b00      	cmp	r3, #0
 8024690:	d10f      	bne.n	80246b2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8024692:	2110      	movs	r1, #16
 8024694:	6938      	ldr	r0, [r7, #16]
 8024696:	f004 fe23 	bl	80292e0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 802469a:	6938      	ldr	r0, [r7, #16]
 802469c:	f004 fe54 	bl	8029348 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80246a0:	687b      	ldr	r3, [r7, #4]
 80246a2:	681b      	ldr	r3, [r3, #0]
 80246a4:	2101      	movs	r1, #1
 80246a6:	4618      	mov	r0, r3
 80246a8:	f005 f82a 	bl	8029700 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80246ac:	6878      	ldr	r0, [r7, #4]
 80246ae:	f007 fdf3 	bl	802c298 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80246b2:	687b      	ldr	r3, [r7, #4]
 80246b4:	681b      	ldr	r3, [r3, #0]
 80246b6:	4618      	mov	r0, r3
 80246b8:	f004 ff0c 	bl	80294d4 <USB_ReadInterrupts>
 80246bc:	4603      	mov	r3, r0
 80246be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80246c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80246c6:	d102      	bne.n	80246ce <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80246c8:	6878      	ldr	r0, [r7, #4]
 80246ca:	f001 f89e 	bl	802580a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80246ce:	687b      	ldr	r3, [r7, #4]
 80246d0:	681b      	ldr	r3, [r3, #0]
 80246d2:	4618      	mov	r0, r3
 80246d4:	f004 fefe 	bl	80294d4 <USB_ReadInterrupts>
 80246d8:	4603      	mov	r3, r0
 80246da:	f003 0308 	and.w	r3, r3, #8
 80246de:	2b08      	cmp	r3, #8
 80246e0:	d106      	bne.n	80246f0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80246e2:	6878      	ldr	r0, [r7, #4]
 80246e4:	f007 fdbc 	bl	802c260 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80246e8:	687b      	ldr	r3, [r7, #4]
 80246ea:	681b      	ldr	r3, [r3, #0]
 80246ec:	2208      	movs	r2, #8
 80246ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80246f0:	687b      	ldr	r3, [r7, #4]
 80246f2:	681b      	ldr	r3, [r3, #0]
 80246f4:	4618      	mov	r0, r3
 80246f6:	f004 feed 	bl	80294d4 <USB_ReadInterrupts>
 80246fa:	4603      	mov	r3, r0
 80246fc:	f003 0310 	and.w	r3, r3, #16
 8024700:	2b10      	cmp	r3, #16
 8024702:	d101      	bne.n	8024708 <HAL_HCD_IRQHandler+0x158>
 8024704:	2301      	movs	r3, #1
 8024706:	e000      	b.n	802470a <HAL_HCD_IRQHandler+0x15a>
 8024708:	2300      	movs	r3, #0
 802470a:	2b00      	cmp	r3, #0
 802470c:	d012      	beq.n	8024734 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 802470e:	687b      	ldr	r3, [r7, #4]
 8024710:	681b      	ldr	r3, [r3, #0]
 8024712:	699a      	ldr	r2, [r3, #24]
 8024714:	687b      	ldr	r3, [r7, #4]
 8024716:	681b      	ldr	r3, [r3, #0]
 8024718:	f022 0210 	bic.w	r2, r2, #16
 802471c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 802471e:	6878      	ldr	r0, [r7, #4]
 8024720:	f000 ffa1 	bl	8025666 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8024724:	687b      	ldr	r3, [r7, #4]
 8024726:	681b      	ldr	r3, [r3, #0]
 8024728:	699a      	ldr	r2, [r3, #24]
 802472a:	687b      	ldr	r3, [r7, #4]
 802472c:	681b      	ldr	r3, [r3, #0]
 802472e:	f042 0210 	orr.w	r2, r2, #16
 8024732:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8024734:	687b      	ldr	r3, [r7, #4]
 8024736:	681b      	ldr	r3, [r3, #0]
 8024738:	4618      	mov	r0, r3
 802473a:	f004 fecb 	bl	80294d4 <USB_ReadInterrupts>
 802473e:	4603      	mov	r3, r0
 8024740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8024748:	d13a      	bne.n	80247c0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 802474a:	687b      	ldr	r3, [r7, #4]
 802474c:	681b      	ldr	r3, [r3, #0]
 802474e:	4618      	mov	r0, r3
 8024750:	f005 fb00 	bl	8029d54 <USB_HC_ReadInterrupt>
 8024754:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8024756:	2300      	movs	r3, #0
 8024758:	617b      	str	r3, [r7, #20]
 802475a:	e025      	b.n	80247a8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 802475c:	697b      	ldr	r3, [r7, #20]
 802475e:	f003 030f 	and.w	r3, r3, #15
 8024762:	68ba      	ldr	r2, [r7, #8]
 8024764:	fa22 f303 	lsr.w	r3, r2, r3
 8024768:	f003 0301 	and.w	r3, r3, #1
 802476c:	2b00      	cmp	r3, #0
 802476e:	d018      	beq.n	80247a2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8024770:	697b      	ldr	r3, [r7, #20]
 8024772:	015a      	lsls	r2, r3, #5
 8024774:	68fb      	ldr	r3, [r7, #12]
 8024776:	4413      	add	r3, r2
 8024778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802477c:	681b      	ldr	r3, [r3, #0]
 802477e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8024786:	d106      	bne.n	8024796 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8024788:	697b      	ldr	r3, [r7, #20]
 802478a:	b2db      	uxtb	r3, r3
 802478c:	4619      	mov	r1, r3
 802478e:	6878      	ldr	r0, [r7, #4]
 8024790:	f000 f8ab 	bl	80248ea <HCD_HC_IN_IRQHandler>
 8024794:	e005      	b.n	80247a2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8024796:	697b      	ldr	r3, [r7, #20]
 8024798:	b2db      	uxtb	r3, r3
 802479a:	4619      	mov	r1, r3
 802479c:	6878      	ldr	r0, [r7, #4]
 802479e:	f000 fbf9 	bl	8024f94 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80247a2:	697b      	ldr	r3, [r7, #20]
 80247a4:	3301      	adds	r3, #1
 80247a6:	617b      	str	r3, [r7, #20]
 80247a8:	687b      	ldr	r3, [r7, #4]
 80247aa:	689b      	ldr	r3, [r3, #8]
 80247ac:	697a      	ldr	r2, [r7, #20]
 80247ae:	429a      	cmp	r2, r3
 80247b0:	d3d4      	bcc.n	802475c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80247b2:	687b      	ldr	r3, [r7, #4]
 80247b4:	681b      	ldr	r3, [r3, #0]
 80247b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80247ba:	615a      	str	r2, [r3, #20]
 80247bc:	e000      	b.n	80247c0 <HAL_HCD_IRQHandler+0x210>
      return;
 80247be:	bf00      	nop
    }
  }
}
 80247c0:	3718      	adds	r7, #24
 80247c2:	46bd      	mov	sp, r7
 80247c4:	bd80      	pop	{r7, pc}

080247c6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80247c6:	b580      	push	{r7, lr}
 80247c8:	b082      	sub	sp, #8
 80247ca:	af00      	add	r7, sp, #0
 80247cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80247ce:	687b      	ldr	r3, [r7, #4]
 80247d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80247d4:	2b01      	cmp	r3, #1
 80247d6:	d101      	bne.n	80247dc <HAL_HCD_Start+0x16>
 80247d8:	2302      	movs	r3, #2
 80247da:	e013      	b.n	8024804 <HAL_HCD_Start+0x3e>
 80247dc:	687b      	ldr	r3, [r7, #4]
 80247de:	2201      	movs	r2, #1
 80247e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80247e4:	687b      	ldr	r3, [r7, #4]
 80247e6:	681b      	ldr	r3, [r3, #0]
 80247e8:	2101      	movs	r1, #1
 80247ea:	4618      	mov	r0, r3
 80247ec:	f004 ffec 	bl	80297c8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80247f0:	687b      	ldr	r3, [r7, #4]
 80247f2:	681b      	ldr	r3, [r3, #0]
 80247f4:	4618      	mov	r0, r3
 80247f6:	f004 fd04 	bl	8029202 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80247fa:	687b      	ldr	r3, [r7, #4]
 80247fc:	2200      	movs	r2, #0
 80247fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8024802:	2300      	movs	r3, #0
}
 8024804:	4618      	mov	r0, r3
 8024806:	3708      	adds	r7, #8
 8024808:	46bd      	mov	sp, r7
 802480a:	bd80      	pop	{r7, pc}

0802480c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 802480c:	b580      	push	{r7, lr}
 802480e:	b082      	sub	sp, #8
 8024810:	af00      	add	r7, sp, #0
 8024812:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8024814:	687b      	ldr	r3, [r7, #4]
 8024816:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 802481a:	2b01      	cmp	r3, #1
 802481c:	d101      	bne.n	8024822 <HAL_HCD_Stop+0x16>
 802481e:	2302      	movs	r3, #2
 8024820:	e00d      	b.n	802483e <HAL_HCD_Stop+0x32>
 8024822:	687b      	ldr	r3, [r7, #4]
 8024824:	2201      	movs	r2, #1
 8024826:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 802482a:	687b      	ldr	r3, [r7, #4]
 802482c:	681b      	ldr	r3, [r3, #0]
 802482e:	4618      	mov	r0, r3
 8024830:	f005 fbda 	bl	8029fe8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8024834:	687b      	ldr	r3, [r7, #4]
 8024836:	2200      	movs	r2, #0
 8024838:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 802483c:	2300      	movs	r3, #0
}
 802483e:	4618      	mov	r0, r3
 8024840:	3708      	adds	r7, #8
 8024842:	46bd      	mov	sp, r7
 8024844:	bd80      	pop	{r7, pc}

08024846 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8024846:	b580      	push	{r7, lr}
 8024848:	b082      	sub	sp, #8
 802484a:	af00      	add	r7, sp, #0
 802484c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 802484e:	687b      	ldr	r3, [r7, #4]
 8024850:	681b      	ldr	r3, [r3, #0]
 8024852:	4618      	mov	r0, r3
 8024854:	f004 ff8e 	bl	8029774 <USB_ResetPort>
 8024858:	4603      	mov	r3, r0
}
 802485a:	4618      	mov	r0, r3
 802485c:	3708      	adds	r7, #8
 802485e:	46bd      	mov	sp, r7
 8024860:	bd80      	pop	{r7, pc}

08024862 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8024862:	b480      	push	{r7}
 8024864:	b083      	sub	sp, #12
 8024866:	af00      	add	r7, sp, #0
 8024868:	6078      	str	r0, [r7, #4]
 802486a:	460b      	mov	r3, r1
 802486c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 802486e:	78fb      	ldrb	r3, [r7, #3]
 8024870:	687a      	ldr	r2, [r7, #4]
 8024872:	212c      	movs	r1, #44	; 0x2c
 8024874:	fb01 f303 	mul.w	r3, r1, r3
 8024878:	4413      	add	r3, r2
 802487a:	3360      	adds	r3, #96	; 0x60
 802487c:	781b      	ldrb	r3, [r3, #0]
}
 802487e:	4618      	mov	r0, r3
 8024880:	370c      	adds	r7, #12
 8024882:	46bd      	mov	sp, r7
 8024884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024888:	4770      	bx	lr

0802488a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 802488a:	b480      	push	{r7}
 802488c:	b083      	sub	sp, #12
 802488e:	af00      	add	r7, sp, #0
 8024890:	6078      	str	r0, [r7, #4]
 8024892:	460b      	mov	r3, r1
 8024894:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8024896:	78fb      	ldrb	r3, [r7, #3]
 8024898:	687a      	ldr	r2, [r7, #4]
 802489a:	212c      	movs	r1, #44	; 0x2c
 802489c:	fb01 f303 	mul.w	r3, r1, r3
 80248a0:	4413      	add	r3, r2
 80248a2:	3350      	adds	r3, #80	; 0x50
 80248a4:	681b      	ldr	r3, [r3, #0]
}
 80248a6:	4618      	mov	r0, r3
 80248a8:	370c      	adds	r7, #12
 80248aa:	46bd      	mov	sp, r7
 80248ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248b0:	4770      	bx	lr

080248b2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80248b2:	b580      	push	{r7, lr}
 80248b4:	b082      	sub	sp, #8
 80248b6:	af00      	add	r7, sp, #0
 80248b8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80248ba:	687b      	ldr	r3, [r7, #4]
 80248bc:	681b      	ldr	r3, [r3, #0]
 80248be:	4618      	mov	r0, r3
 80248c0:	f004 ffd2 	bl	8029868 <USB_GetCurrentFrame>
 80248c4:	4603      	mov	r3, r0
}
 80248c6:	4618      	mov	r0, r3
 80248c8:	3708      	adds	r7, #8
 80248ca:	46bd      	mov	sp, r7
 80248cc:	bd80      	pop	{r7, pc}

080248ce <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80248ce:	b580      	push	{r7, lr}
 80248d0:	b082      	sub	sp, #8
 80248d2:	af00      	add	r7, sp, #0
 80248d4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80248d6:	687b      	ldr	r3, [r7, #4]
 80248d8:	681b      	ldr	r3, [r3, #0]
 80248da:	4618      	mov	r0, r3
 80248dc:	f004 ffad 	bl	802983a <USB_GetHostSpeed>
 80248e0:	4603      	mov	r3, r0
}
 80248e2:	4618      	mov	r0, r3
 80248e4:	3708      	adds	r7, #8
 80248e6:	46bd      	mov	sp, r7
 80248e8:	bd80      	pop	{r7, pc}

080248ea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80248ea:	b580      	push	{r7, lr}
 80248ec:	b086      	sub	sp, #24
 80248ee:	af00      	add	r7, sp, #0
 80248f0:	6078      	str	r0, [r7, #4]
 80248f2:	460b      	mov	r3, r1
 80248f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80248f6:	687b      	ldr	r3, [r7, #4]
 80248f8:	681b      	ldr	r3, [r3, #0]
 80248fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80248fc:	697b      	ldr	r3, [r7, #20]
 80248fe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8024900:	78fb      	ldrb	r3, [r7, #3]
 8024902:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8024904:	68fb      	ldr	r3, [r7, #12]
 8024906:	015a      	lsls	r2, r3, #5
 8024908:	693b      	ldr	r3, [r7, #16]
 802490a:	4413      	add	r3, r2
 802490c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024910:	689b      	ldr	r3, [r3, #8]
 8024912:	f003 0304 	and.w	r3, r3, #4
 8024916:	2b04      	cmp	r3, #4
 8024918:	d11a      	bne.n	8024950 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 802491a:	68fb      	ldr	r3, [r7, #12]
 802491c:	015a      	lsls	r2, r3, #5
 802491e:	693b      	ldr	r3, [r7, #16]
 8024920:	4413      	add	r3, r2
 8024922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024926:	461a      	mov	r2, r3
 8024928:	2304      	movs	r3, #4
 802492a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 802492c:	687a      	ldr	r2, [r7, #4]
 802492e:	68fb      	ldr	r3, [r7, #12]
 8024930:	212c      	movs	r1, #44	; 0x2c
 8024932:	fb01 f303 	mul.w	r3, r1, r3
 8024936:	4413      	add	r3, r2
 8024938:	3361      	adds	r3, #97	; 0x61
 802493a:	2206      	movs	r2, #6
 802493c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802493e:	687b      	ldr	r3, [r7, #4]
 8024940:	681b      	ldr	r3, [r3, #0]
 8024942:	68fa      	ldr	r2, [r7, #12]
 8024944:	b2d2      	uxtb	r2, r2
 8024946:	4611      	mov	r1, r2
 8024948:	4618      	mov	r0, r3
 802494a:	f005 fa14 	bl	8029d76 <USB_HC_Halt>
 802494e:	e0af      	b.n	8024ab0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8024950:	68fb      	ldr	r3, [r7, #12]
 8024952:	015a      	lsls	r2, r3, #5
 8024954:	693b      	ldr	r3, [r7, #16]
 8024956:	4413      	add	r3, r2
 8024958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802495c:	689b      	ldr	r3, [r3, #8]
 802495e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024966:	d11b      	bne.n	80249a0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8024968:	68fb      	ldr	r3, [r7, #12]
 802496a:	015a      	lsls	r2, r3, #5
 802496c:	693b      	ldr	r3, [r7, #16]
 802496e:	4413      	add	r3, r2
 8024970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024974:	461a      	mov	r2, r3
 8024976:	f44f 7380 	mov.w	r3, #256	; 0x100
 802497a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 802497c:	687a      	ldr	r2, [r7, #4]
 802497e:	68fb      	ldr	r3, [r7, #12]
 8024980:	212c      	movs	r1, #44	; 0x2c
 8024982:	fb01 f303 	mul.w	r3, r1, r3
 8024986:	4413      	add	r3, r2
 8024988:	3361      	adds	r3, #97	; 0x61
 802498a:	2207      	movs	r2, #7
 802498c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802498e:	687b      	ldr	r3, [r7, #4]
 8024990:	681b      	ldr	r3, [r3, #0]
 8024992:	68fa      	ldr	r2, [r7, #12]
 8024994:	b2d2      	uxtb	r2, r2
 8024996:	4611      	mov	r1, r2
 8024998:	4618      	mov	r0, r3
 802499a:	f005 f9ec 	bl	8029d76 <USB_HC_Halt>
 802499e:	e087      	b.n	8024ab0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80249a0:	68fb      	ldr	r3, [r7, #12]
 80249a2:	015a      	lsls	r2, r3, #5
 80249a4:	693b      	ldr	r3, [r7, #16]
 80249a6:	4413      	add	r3, r2
 80249a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80249ac:	689b      	ldr	r3, [r3, #8]
 80249ae:	f003 0320 	and.w	r3, r3, #32
 80249b2:	2b20      	cmp	r3, #32
 80249b4:	d109      	bne.n	80249ca <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80249b6:	68fb      	ldr	r3, [r7, #12]
 80249b8:	015a      	lsls	r2, r3, #5
 80249ba:	693b      	ldr	r3, [r7, #16]
 80249bc:	4413      	add	r3, r2
 80249be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80249c2:	461a      	mov	r2, r3
 80249c4:	2320      	movs	r3, #32
 80249c6:	6093      	str	r3, [r2, #8]
 80249c8:	e072      	b.n	8024ab0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80249ca:	68fb      	ldr	r3, [r7, #12]
 80249cc:	015a      	lsls	r2, r3, #5
 80249ce:	693b      	ldr	r3, [r7, #16]
 80249d0:	4413      	add	r3, r2
 80249d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80249d6:	689b      	ldr	r3, [r3, #8]
 80249d8:	f003 0308 	and.w	r3, r3, #8
 80249dc:	2b08      	cmp	r3, #8
 80249de:	d11a      	bne.n	8024a16 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80249e0:	68fb      	ldr	r3, [r7, #12]
 80249e2:	015a      	lsls	r2, r3, #5
 80249e4:	693b      	ldr	r3, [r7, #16]
 80249e6:	4413      	add	r3, r2
 80249e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80249ec:	461a      	mov	r2, r3
 80249ee:	2308      	movs	r3, #8
 80249f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80249f2:	687a      	ldr	r2, [r7, #4]
 80249f4:	68fb      	ldr	r3, [r7, #12]
 80249f6:	212c      	movs	r1, #44	; 0x2c
 80249f8:	fb01 f303 	mul.w	r3, r1, r3
 80249fc:	4413      	add	r3, r2
 80249fe:	3361      	adds	r3, #97	; 0x61
 8024a00:	2205      	movs	r2, #5
 8024a02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024a04:	687b      	ldr	r3, [r7, #4]
 8024a06:	681b      	ldr	r3, [r3, #0]
 8024a08:	68fa      	ldr	r2, [r7, #12]
 8024a0a:	b2d2      	uxtb	r2, r2
 8024a0c:	4611      	mov	r1, r2
 8024a0e:	4618      	mov	r0, r3
 8024a10:	f005 f9b1 	bl	8029d76 <USB_HC_Halt>
 8024a14:	e04c      	b.n	8024ab0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8024a16:	68fb      	ldr	r3, [r7, #12]
 8024a18:	015a      	lsls	r2, r3, #5
 8024a1a:	693b      	ldr	r3, [r7, #16]
 8024a1c:	4413      	add	r3, r2
 8024a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024a22:	689b      	ldr	r3, [r3, #8]
 8024a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024a2c:	d11b      	bne.n	8024a66 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8024a2e:	68fb      	ldr	r3, [r7, #12]
 8024a30:	015a      	lsls	r2, r3, #5
 8024a32:	693b      	ldr	r3, [r7, #16]
 8024a34:	4413      	add	r3, r2
 8024a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024a3a:	461a      	mov	r2, r3
 8024a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024a40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8024a42:	687a      	ldr	r2, [r7, #4]
 8024a44:	68fb      	ldr	r3, [r7, #12]
 8024a46:	212c      	movs	r1, #44	; 0x2c
 8024a48:	fb01 f303 	mul.w	r3, r1, r3
 8024a4c:	4413      	add	r3, r2
 8024a4e:	3361      	adds	r3, #97	; 0x61
 8024a50:	2208      	movs	r2, #8
 8024a52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024a54:	687b      	ldr	r3, [r7, #4]
 8024a56:	681b      	ldr	r3, [r3, #0]
 8024a58:	68fa      	ldr	r2, [r7, #12]
 8024a5a:	b2d2      	uxtb	r2, r2
 8024a5c:	4611      	mov	r1, r2
 8024a5e:	4618      	mov	r0, r3
 8024a60:	f005 f989 	bl	8029d76 <USB_HC_Halt>
 8024a64:	e024      	b.n	8024ab0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8024a66:	68fb      	ldr	r3, [r7, #12]
 8024a68:	015a      	lsls	r2, r3, #5
 8024a6a:	693b      	ldr	r3, [r7, #16]
 8024a6c:	4413      	add	r3, r2
 8024a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024a72:	689b      	ldr	r3, [r3, #8]
 8024a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024a78:	2b80      	cmp	r3, #128	; 0x80
 8024a7a:	d119      	bne.n	8024ab0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8024a7c:	68fb      	ldr	r3, [r7, #12]
 8024a7e:	015a      	lsls	r2, r3, #5
 8024a80:	693b      	ldr	r3, [r7, #16]
 8024a82:	4413      	add	r3, r2
 8024a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024a88:	461a      	mov	r2, r3
 8024a8a:	2380      	movs	r3, #128	; 0x80
 8024a8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8024a8e:	687a      	ldr	r2, [r7, #4]
 8024a90:	68fb      	ldr	r3, [r7, #12]
 8024a92:	212c      	movs	r1, #44	; 0x2c
 8024a94:	fb01 f303 	mul.w	r3, r1, r3
 8024a98:	4413      	add	r3, r2
 8024a9a:	3361      	adds	r3, #97	; 0x61
 8024a9c:	2206      	movs	r2, #6
 8024a9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024aa0:	687b      	ldr	r3, [r7, #4]
 8024aa2:	681b      	ldr	r3, [r3, #0]
 8024aa4:	68fa      	ldr	r2, [r7, #12]
 8024aa6:	b2d2      	uxtb	r2, r2
 8024aa8:	4611      	mov	r1, r2
 8024aaa:	4618      	mov	r0, r3
 8024aac:	f005 f963 	bl	8029d76 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8024ab0:	68fb      	ldr	r3, [r7, #12]
 8024ab2:	015a      	lsls	r2, r3, #5
 8024ab4:	693b      	ldr	r3, [r7, #16]
 8024ab6:	4413      	add	r3, r2
 8024ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024abc:	689b      	ldr	r3, [r3, #8]
 8024abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8024ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024ac6:	d112      	bne.n	8024aee <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024ac8:	687b      	ldr	r3, [r7, #4]
 8024aca:	681b      	ldr	r3, [r3, #0]
 8024acc:	68fa      	ldr	r2, [r7, #12]
 8024ace:	b2d2      	uxtb	r2, r2
 8024ad0:	4611      	mov	r1, r2
 8024ad2:	4618      	mov	r0, r3
 8024ad4:	f005 f94f 	bl	8029d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8024ad8:	68fb      	ldr	r3, [r7, #12]
 8024ada:	015a      	lsls	r2, r3, #5
 8024adc:	693b      	ldr	r3, [r7, #16]
 8024ade:	4413      	add	r3, r2
 8024ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024ae4:	461a      	mov	r2, r3
 8024ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024aea:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8024aec:	e24e      	b.n	8024f8c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8024aee:	68fb      	ldr	r3, [r7, #12]
 8024af0:	015a      	lsls	r2, r3, #5
 8024af2:	693b      	ldr	r3, [r7, #16]
 8024af4:	4413      	add	r3, r2
 8024af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024afa:	689b      	ldr	r3, [r3, #8]
 8024afc:	f003 0301 	and.w	r3, r3, #1
 8024b00:	2b01      	cmp	r3, #1
 8024b02:	f040 80df 	bne.w	8024cc4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8024b06:	687b      	ldr	r3, [r7, #4]
 8024b08:	691b      	ldr	r3, [r3, #16]
 8024b0a:	2b00      	cmp	r3, #0
 8024b0c:	d019      	beq.n	8024b42 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8024b0e:	687a      	ldr	r2, [r7, #4]
 8024b10:	68fb      	ldr	r3, [r7, #12]
 8024b12:	212c      	movs	r1, #44	; 0x2c
 8024b14:	fb01 f303 	mul.w	r3, r1, r3
 8024b18:	4413      	add	r3, r2
 8024b1a:	3348      	adds	r3, #72	; 0x48
 8024b1c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8024b1e:	68fb      	ldr	r3, [r7, #12]
 8024b20:	0159      	lsls	r1, r3, #5
 8024b22:	693b      	ldr	r3, [r7, #16]
 8024b24:	440b      	add	r3, r1
 8024b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024b2a:	691b      	ldr	r3, [r3, #16]
 8024b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8024b30:	1ad2      	subs	r2, r2, r3
 8024b32:	6879      	ldr	r1, [r7, #4]
 8024b34:	68fb      	ldr	r3, [r7, #12]
 8024b36:	202c      	movs	r0, #44	; 0x2c
 8024b38:	fb00 f303 	mul.w	r3, r0, r3
 8024b3c:	440b      	add	r3, r1
 8024b3e:	3350      	adds	r3, #80	; 0x50
 8024b40:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8024b42:	687a      	ldr	r2, [r7, #4]
 8024b44:	68fb      	ldr	r3, [r7, #12]
 8024b46:	212c      	movs	r1, #44	; 0x2c
 8024b48:	fb01 f303 	mul.w	r3, r1, r3
 8024b4c:	4413      	add	r3, r2
 8024b4e:	3361      	adds	r3, #97	; 0x61
 8024b50:	2201      	movs	r2, #1
 8024b52:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8024b54:	687a      	ldr	r2, [r7, #4]
 8024b56:	68fb      	ldr	r3, [r7, #12]
 8024b58:	212c      	movs	r1, #44	; 0x2c
 8024b5a:	fb01 f303 	mul.w	r3, r1, r3
 8024b5e:	4413      	add	r3, r2
 8024b60:	335c      	adds	r3, #92	; 0x5c
 8024b62:	2200      	movs	r2, #0
 8024b64:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8024b66:	68fb      	ldr	r3, [r7, #12]
 8024b68:	015a      	lsls	r2, r3, #5
 8024b6a:	693b      	ldr	r3, [r7, #16]
 8024b6c:	4413      	add	r3, r2
 8024b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024b72:	461a      	mov	r2, r3
 8024b74:	2301      	movs	r3, #1
 8024b76:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8024b78:	687a      	ldr	r2, [r7, #4]
 8024b7a:	68fb      	ldr	r3, [r7, #12]
 8024b7c:	212c      	movs	r1, #44	; 0x2c
 8024b7e:	fb01 f303 	mul.w	r3, r1, r3
 8024b82:	4413      	add	r3, r2
 8024b84:	333f      	adds	r3, #63	; 0x3f
 8024b86:	781b      	ldrb	r3, [r3, #0]
 8024b88:	2b00      	cmp	r3, #0
 8024b8a:	d009      	beq.n	8024ba0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8024b8c:	687a      	ldr	r2, [r7, #4]
 8024b8e:	68fb      	ldr	r3, [r7, #12]
 8024b90:	212c      	movs	r1, #44	; 0x2c
 8024b92:	fb01 f303 	mul.w	r3, r1, r3
 8024b96:	4413      	add	r3, r2
 8024b98:	333f      	adds	r3, #63	; 0x3f
 8024b9a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8024b9c:	2b02      	cmp	r3, #2
 8024b9e:	d111      	bne.n	8024bc4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024ba0:	687b      	ldr	r3, [r7, #4]
 8024ba2:	681b      	ldr	r3, [r3, #0]
 8024ba4:	68fa      	ldr	r2, [r7, #12]
 8024ba6:	b2d2      	uxtb	r2, r2
 8024ba8:	4611      	mov	r1, r2
 8024baa:	4618      	mov	r0, r3
 8024bac:	f005 f8e3 	bl	8029d76 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8024bb0:	68fb      	ldr	r3, [r7, #12]
 8024bb2:	015a      	lsls	r2, r3, #5
 8024bb4:	693b      	ldr	r3, [r7, #16]
 8024bb6:	4413      	add	r3, r2
 8024bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024bbc:	461a      	mov	r2, r3
 8024bbe:	2310      	movs	r3, #16
 8024bc0:	6093      	str	r3, [r2, #8]
 8024bc2:	e03a      	b.n	8024c3a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8024bc4:	687a      	ldr	r2, [r7, #4]
 8024bc6:	68fb      	ldr	r3, [r7, #12]
 8024bc8:	212c      	movs	r1, #44	; 0x2c
 8024bca:	fb01 f303 	mul.w	r3, r1, r3
 8024bce:	4413      	add	r3, r2
 8024bd0:	333f      	adds	r3, #63	; 0x3f
 8024bd2:	781b      	ldrb	r3, [r3, #0]
 8024bd4:	2b03      	cmp	r3, #3
 8024bd6:	d009      	beq.n	8024bec <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8024bd8:	687a      	ldr	r2, [r7, #4]
 8024bda:	68fb      	ldr	r3, [r7, #12]
 8024bdc:	212c      	movs	r1, #44	; 0x2c
 8024bde:	fb01 f303 	mul.w	r3, r1, r3
 8024be2:	4413      	add	r3, r2
 8024be4:	333f      	adds	r3, #63	; 0x3f
 8024be6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8024be8:	2b01      	cmp	r3, #1
 8024bea:	d126      	bne.n	8024c3a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8024bec:	68fb      	ldr	r3, [r7, #12]
 8024bee:	015a      	lsls	r2, r3, #5
 8024bf0:	693b      	ldr	r3, [r7, #16]
 8024bf2:	4413      	add	r3, r2
 8024bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024bf8:	681b      	ldr	r3, [r3, #0]
 8024bfa:	68fa      	ldr	r2, [r7, #12]
 8024bfc:	0151      	lsls	r1, r2, #5
 8024bfe:	693a      	ldr	r2, [r7, #16]
 8024c00:	440a      	add	r2, r1
 8024c02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8024c06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8024c0a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8024c0c:	687a      	ldr	r2, [r7, #4]
 8024c0e:	68fb      	ldr	r3, [r7, #12]
 8024c10:	212c      	movs	r1, #44	; 0x2c
 8024c12:	fb01 f303 	mul.w	r3, r1, r3
 8024c16:	4413      	add	r3, r2
 8024c18:	3360      	adds	r3, #96	; 0x60
 8024c1a:	2201      	movs	r2, #1
 8024c1c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8024c1e:	68fb      	ldr	r3, [r7, #12]
 8024c20:	b2d9      	uxtb	r1, r3
 8024c22:	687a      	ldr	r2, [r7, #4]
 8024c24:	68fb      	ldr	r3, [r7, #12]
 8024c26:	202c      	movs	r0, #44	; 0x2c
 8024c28:	fb00 f303 	mul.w	r3, r0, r3
 8024c2c:	4413      	add	r3, r2
 8024c2e:	3360      	adds	r3, #96	; 0x60
 8024c30:	781b      	ldrb	r3, [r3, #0]
 8024c32:	461a      	mov	r2, r3
 8024c34:	6878      	ldr	r0, [r7, #4]
 8024c36:	f007 fb3d 	bl	802c2b4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8024c3a:	687b      	ldr	r3, [r7, #4]
 8024c3c:	691b      	ldr	r3, [r3, #16]
 8024c3e:	2b01      	cmp	r3, #1
 8024c40:	d12b      	bne.n	8024c9a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8024c42:	687a      	ldr	r2, [r7, #4]
 8024c44:	68fb      	ldr	r3, [r7, #12]
 8024c46:	212c      	movs	r1, #44	; 0x2c
 8024c48:	fb01 f303 	mul.w	r3, r1, r3
 8024c4c:	4413      	add	r3, r2
 8024c4e:	3348      	adds	r3, #72	; 0x48
 8024c50:	681b      	ldr	r3, [r3, #0]
 8024c52:	6879      	ldr	r1, [r7, #4]
 8024c54:	68fa      	ldr	r2, [r7, #12]
 8024c56:	202c      	movs	r0, #44	; 0x2c
 8024c58:	fb00 f202 	mul.w	r2, r0, r2
 8024c5c:	440a      	add	r2, r1
 8024c5e:	3240      	adds	r2, #64	; 0x40
 8024c60:	8812      	ldrh	r2, [r2, #0]
 8024c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8024c66:	f003 0301 	and.w	r3, r3, #1
 8024c6a:	2b00      	cmp	r3, #0
 8024c6c:	f000 818e 	beq.w	8024f8c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8024c70:	687a      	ldr	r2, [r7, #4]
 8024c72:	68fb      	ldr	r3, [r7, #12]
 8024c74:	212c      	movs	r1, #44	; 0x2c
 8024c76:	fb01 f303 	mul.w	r3, r1, r3
 8024c7a:	4413      	add	r3, r2
 8024c7c:	3354      	adds	r3, #84	; 0x54
 8024c7e:	781b      	ldrb	r3, [r3, #0]
 8024c80:	f083 0301 	eor.w	r3, r3, #1
 8024c84:	b2d8      	uxtb	r0, r3
 8024c86:	687a      	ldr	r2, [r7, #4]
 8024c88:	68fb      	ldr	r3, [r7, #12]
 8024c8a:	212c      	movs	r1, #44	; 0x2c
 8024c8c:	fb01 f303 	mul.w	r3, r1, r3
 8024c90:	4413      	add	r3, r2
 8024c92:	3354      	adds	r3, #84	; 0x54
 8024c94:	4602      	mov	r2, r0
 8024c96:	701a      	strb	r2, [r3, #0]
}
 8024c98:	e178      	b.n	8024f8c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8024c9a:	687a      	ldr	r2, [r7, #4]
 8024c9c:	68fb      	ldr	r3, [r7, #12]
 8024c9e:	212c      	movs	r1, #44	; 0x2c
 8024ca0:	fb01 f303 	mul.w	r3, r1, r3
 8024ca4:	4413      	add	r3, r2
 8024ca6:	3354      	adds	r3, #84	; 0x54
 8024ca8:	781b      	ldrb	r3, [r3, #0]
 8024caa:	f083 0301 	eor.w	r3, r3, #1
 8024cae:	b2d8      	uxtb	r0, r3
 8024cb0:	687a      	ldr	r2, [r7, #4]
 8024cb2:	68fb      	ldr	r3, [r7, #12]
 8024cb4:	212c      	movs	r1, #44	; 0x2c
 8024cb6:	fb01 f303 	mul.w	r3, r1, r3
 8024cba:	4413      	add	r3, r2
 8024cbc:	3354      	adds	r3, #84	; 0x54
 8024cbe:	4602      	mov	r2, r0
 8024cc0:	701a      	strb	r2, [r3, #0]
}
 8024cc2:	e163      	b.n	8024f8c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8024cc4:	68fb      	ldr	r3, [r7, #12]
 8024cc6:	015a      	lsls	r2, r3, #5
 8024cc8:	693b      	ldr	r3, [r7, #16]
 8024cca:	4413      	add	r3, r2
 8024ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024cd0:	689b      	ldr	r3, [r3, #8]
 8024cd2:	f003 0302 	and.w	r3, r3, #2
 8024cd6:	2b02      	cmp	r3, #2
 8024cd8:	f040 80f6 	bne.w	8024ec8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8024cdc:	687a      	ldr	r2, [r7, #4]
 8024cde:	68fb      	ldr	r3, [r7, #12]
 8024ce0:	212c      	movs	r1, #44	; 0x2c
 8024ce2:	fb01 f303 	mul.w	r3, r1, r3
 8024ce6:	4413      	add	r3, r2
 8024ce8:	3361      	adds	r3, #97	; 0x61
 8024cea:	781b      	ldrb	r3, [r3, #0]
 8024cec:	2b01      	cmp	r3, #1
 8024cee:	d109      	bne.n	8024d04 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8024cf0:	687a      	ldr	r2, [r7, #4]
 8024cf2:	68fb      	ldr	r3, [r7, #12]
 8024cf4:	212c      	movs	r1, #44	; 0x2c
 8024cf6:	fb01 f303 	mul.w	r3, r1, r3
 8024cfa:	4413      	add	r3, r2
 8024cfc:	3360      	adds	r3, #96	; 0x60
 8024cfe:	2201      	movs	r2, #1
 8024d00:	701a      	strb	r2, [r3, #0]
 8024d02:	e0c9      	b.n	8024e98 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8024d04:	687a      	ldr	r2, [r7, #4]
 8024d06:	68fb      	ldr	r3, [r7, #12]
 8024d08:	212c      	movs	r1, #44	; 0x2c
 8024d0a:	fb01 f303 	mul.w	r3, r1, r3
 8024d0e:	4413      	add	r3, r2
 8024d10:	3361      	adds	r3, #97	; 0x61
 8024d12:	781b      	ldrb	r3, [r3, #0]
 8024d14:	2b05      	cmp	r3, #5
 8024d16:	d109      	bne.n	8024d2c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8024d18:	687a      	ldr	r2, [r7, #4]
 8024d1a:	68fb      	ldr	r3, [r7, #12]
 8024d1c:	212c      	movs	r1, #44	; 0x2c
 8024d1e:	fb01 f303 	mul.w	r3, r1, r3
 8024d22:	4413      	add	r3, r2
 8024d24:	3360      	adds	r3, #96	; 0x60
 8024d26:	2205      	movs	r2, #5
 8024d28:	701a      	strb	r2, [r3, #0]
 8024d2a:	e0b5      	b.n	8024e98 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8024d2c:	687a      	ldr	r2, [r7, #4]
 8024d2e:	68fb      	ldr	r3, [r7, #12]
 8024d30:	212c      	movs	r1, #44	; 0x2c
 8024d32:	fb01 f303 	mul.w	r3, r1, r3
 8024d36:	4413      	add	r3, r2
 8024d38:	3361      	adds	r3, #97	; 0x61
 8024d3a:	781b      	ldrb	r3, [r3, #0]
 8024d3c:	2b06      	cmp	r3, #6
 8024d3e:	d009      	beq.n	8024d54 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8024d40:	687a      	ldr	r2, [r7, #4]
 8024d42:	68fb      	ldr	r3, [r7, #12]
 8024d44:	212c      	movs	r1, #44	; 0x2c
 8024d46:	fb01 f303 	mul.w	r3, r1, r3
 8024d4a:	4413      	add	r3, r2
 8024d4c:	3361      	adds	r3, #97	; 0x61
 8024d4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8024d50:	2b08      	cmp	r3, #8
 8024d52:	d150      	bne.n	8024df6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8024d54:	687a      	ldr	r2, [r7, #4]
 8024d56:	68fb      	ldr	r3, [r7, #12]
 8024d58:	212c      	movs	r1, #44	; 0x2c
 8024d5a:	fb01 f303 	mul.w	r3, r1, r3
 8024d5e:	4413      	add	r3, r2
 8024d60:	335c      	adds	r3, #92	; 0x5c
 8024d62:	681b      	ldr	r3, [r3, #0]
 8024d64:	1c5a      	adds	r2, r3, #1
 8024d66:	6879      	ldr	r1, [r7, #4]
 8024d68:	68fb      	ldr	r3, [r7, #12]
 8024d6a:	202c      	movs	r0, #44	; 0x2c
 8024d6c:	fb00 f303 	mul.w	r3, r0, r3
 8024d70:	440b      	add	r3, r1
 8024d72:	335c      	adds	r3, #92	; 0x5c
 8024d74:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8024d76:	687a      	ldr	r2, [r7, #4]
 8024d78:	68fb      	ldr	r3, [r7, #12]
 8024d7a:	212c      	movs	r1, #44	; 0x2c
 8024d7c:	fb01 f303 	mul.w	r3, r1, r3
 8024d80:	4413      	add	r3, r2
 8024d82:	335c      	adds	r3, #92	; 0x5c
 8024d84:	681b      	ldr	r3, [r3, #0]
 8024d86:	2b02      	cmp	r3, #2
 8024d88:	d912      	bls.n	8024db0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8024d8a:	687a      	ldr	r2, [r7, #4]
 8024d8c:	68fb      	ldr	r3, [r7, #12]
 8024d8e:	212c      	movs	r1, #44	; 0x2c
 8024d90:	fb01 f303 	mul.w	r3, r1, r3
 8024d94:	4413      	add	r3, r2
 8024d96:	335c      	adds	r3, #92	; 0x5c
 8024d98:	2200      	movs	r2, #0
 8024d9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8024d9c:	687a      	ldr	r2, [r7, #4]
 8024d9e:	68fb      	ldr	r3, [r7, #12]
 8024da0:	212c      	movs	r1, #44	; 0x2c
 8024da2:	fb01 f303 	mul.w	r3, r1, r3
 8024da6:	4413      	add	r3, r2
 8024da8:	3360      	adds	r3, #96	; 0x60
 8024daa:	2204      	movs	r2, #4
 8024dac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8024dae:	e073      	b.n	8024e98 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8024db0:	687a      	ldr	r2, [r7, #4]
 8024db2:	68fb      	ldr	r3, [r7, #12]
 8024db4:	212c      	movs	r1, #44	; 0x2c
 8024db6:	fb01 f303 	mul.w	r3, r1, r3
 8024dba:	4413      	add	r3, r2
 8024dbc:	3360      	adds	r3, #96	; 0x60
 8024dbe:	2202      	movs	r2, #2
 8024dc0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8024dc2:	68fb      	ldr	r3, [r7, #12]
 8024dc4:	015a      	lsls	r2, r3, #5
 8024dc6:	693b      	ldr	r3, [r7, #16]
 8024dc8:	4413      	add	r3, r2
 8024dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024dce:	681b      	ldr	r3, [r3, #0]
 8024dd0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8024dd2:	68bb      	ldr	r3, [r7, #8]
 8024dd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8024dd8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8024dda:	68bb      	ldr	r3, [r7, #8]
 8024ddc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8024de0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8024de2:	68fb      	ldr	r3, [r7, #12]
 8024de4:	015a      	lsls	r2, r3, #5
 8024de6:	693b      	ldr	r3, [r7, #16]
 8024de8:	4413      	add	r3, r2
 8024dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024dee:	461a      	mov	r2, r3
 8024df0:	68bb      	ldr	r3, [r7, #8]
 8024df2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8024df4:	e050      	b.n	8024e98 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8024df6:	687a      	ldr	r2, [r7, #4]
 8024df8:	68fb      	ldr	r3, [r7, #12]
 8024dfa:	212c      	movs	r1, #44	; 0x2c
 8024dfc:	fb01 f303 	mul.w	r3, r1, r3
 8024e00:	4413      	add	r3, r2
 8024e02:	3361      	adds	r3, #97	; 0x61
 8024e04:	781b      	ldrb	r3, [r3, #0]
 8024e06:	2b03      	cmp	r3, #3
 8024e08:	d122      	bne.n	8024e50 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8024e0a:	687a      	ldr	r2, [r7, #4]
 8024e0c:	68fb      	ldr	r3, [r7, #12]
 8024e0e:	212c      	movs	r1, #44	; 0x2c
 8024e10:	fb01 f303 	mul.w	r3, r1, r3
 8024e14:	4413      	add	r3, r2
 8024e16:	3360      	adds	r3, #96	; 0x60
 8024e18:	2202      	movs	r2, #2
 8024e1a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8024e1c:	68fb      	ldr	r3, [r7, #12]
 8024e1e:	015a      	lsls	r2, r3, #5
 8024e20:	693b      	ldr	r3, [r7, #16]
 8024e22:	4413      	add	r3, r2
 8024e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024e28:	681b      	ldr	r3, [r3, #0]
 8024e2a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8024e2c:	68bb      	ldr	r3, [r7, #8]
 8024e2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8024e32:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8024e34:	68bb      	ldr	r3, [r7, #8]
 8024e36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8024e3a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8024e3c:	68fb      	ldr	r3, [r7, #12]
 8024e3e:	015a      	lsls	r2, r3, #5
 8024e40:	693b      	ldr	r3, [r7, #16]
 8024e42:	4413      	add	r3, r2
 8024e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024e48:	461a      	mov	r2, r3
 8024e4a:	68bb      	ldr	r3, [r7, #8]
 8024e4c:	6013      	str	r3, [r2, #0]
 8024e4e:	e023      	b.n	8024e98 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8024e50:	687a      	ldr	r2, [r7, #4]
 8024e52:	68fb      	ldr	r3, [r7, #12]
 8024e54:	212c      	movs	r1, #44	; 0x2c
 8024e56:	fb01 f303 	mul.w	r3, r1, r3
 8024e5a:	4413      	add	r3, r2
 8024e5c:	3361      	adds	r3, #97	; 0x61
 8024e5e:	781b      	ldrb	r3, [r3, #0]
 8024e60:	2b07      	cmp	r3, #7
 8024e62:	d119      	bne.n	8024e98 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8024e64:	687a      	ldr	r2, [r7, #4]
 8024e66:	68fb      	ldr	r3, [r7, #12]
 8024e68:	212c      	movs	r1, #44	; 0x2c
 8024e6a:	fb01 f303 	mul.w	r3, r1, r3
 8024e6e:	4413      	add	r3, r2
 8024e70:	335c      	adds	r3, #92	; 0x5c
 8024e72:	681b      	ldr	r3, [r3, #0]
 8024e74:	1c5a      	adds	r2, r3, #1
 8024e76:	6879      	ldr	r1, [r7, #4]
 8024e78:	68fb      	ldr	r3, [r7, #12]
 8024e7a:	202c      	movs	r0, #44	; 0x2c
 8024e7c:	fb00 f303 	mul.w	r3, r0, r3
 8024e80:	440b      	add	r3, r1
 8024e82:	335c      	adds	r3, #92	; 0x5c
 8024e84:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8024e86:	687a      	ldr	r2, [r7, #4]
 8024e88:	68fb      	ldr	r3, [r7, #12]
 8024e8a:	212c      	movs	r1, #44	; 0x2c
 8024e8c:	fb01 f303 	mul.w	r3, r1, r3
 8024e90:	4413      	add	r3, r2
 8024e92:	3360      	adds	r3, #96	; 0x60
 8024e94:	2204      	movs	r2, #4
 8024e96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8024e98:	68fb      	ldr	r3, [r7, #12]
 8024e9a:	015a      	lsls	r2, r3, #5
 8024e9c:	693b      	ldr	r3, [r7, #16]
 8024e9e:	4413      	add	r3, r2
 8024ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024ea4:	461a      	mov	r2, r3
 8024ea6:	2302      	movs	r3, #2
 8024ea8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8024eaa:	68fb      	ldr	r3, [r7, #12]
 8024eac:	b2d9      	uxtb	r1, r3
 8024eae:	687a      	ldr	r2, [r7, #4]
 8024eb0:	68fb      	ldr	r3, [r7, #12]
 8024eb2:	202c      	movs	r0, #44	; 0x2c
 8024eb4:	fb00 f303 	mul.w	r3, r0, r3
 8024eb8:	4413      	add	r3, r2
 8024eba:	3360      	adds	r3, #96	; 0x60
 8024ebc:	781b      	ldrb	r3, [r3, #0]
 8024ebe:	461a      	mov	r2, r3
 8024ec0:	6878      	ldr	r0, [r7, #4]
 8024ec2:	f007 f9f7 	bl	802c2b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8024ec6:	e061      	b.n	8024f8c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8024ec8:	68fb      	ldr	r3, [r7, #12]
 8024eca:	015a      	lsls	r2, r3, #5
 8024ecc:	693b      	ldr	r3, [r7, #16]
 8024ece:	4413      	add	r3, r2
 8024ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024ed4:	689b      	ldr	r3, [r3, #8]
 8024ed6:	f003 0310 	and.w	r3, r3, #16
 8024eda:	2b10      	cmp	r3, #16
 8024edc:	d156      	bne.n	8024f8c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8024ede:	687a      	ldr	r2, [r7, #4]
 8024ee0:	68fb      	ldr	r3, [r7, #12]
 8024ee2:	212c      	movs	r1, #44	; 0x2c
 8024ee4:	fb01 f303 	mul.w	r3, r1, r3
 8024ee8:	4413      	add	r3, r2
 8024eea:	333f      	adds	r3, #63	; 0x3f
 8024eec:	781b      	ldrb	r3, [r3, #0]
 8024eee:	2b03      	cmp	r3, #3
 8024ef0:	d111      	bne.n	8024f16 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8024ef2:	687a      	ldr	r2, [r7, #4]
 8024ef4:	68fb      	ldr	r3, [r7, #12]
 8024ef6:	212c      	movs	r1, #44	; 0x2c
 8024ef8:	fb01 f303 	mul.w	r3, r1, r3
 8024efc:	4413      	add	r3, r2
 8024efe:	335c      	adds	r3, #92	; 0x5c
 8024f00:	2200      	movs	r2, #0
 8024f02:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024f04:	687b      	ldr	r3, [r7, #4]
 8024f06:	681b      	ldr	r3, [r3, #0]
 8024f08:	68fa      	ldr	r2, [r7, #12]
 8024f0a:	b2d2      	uxtb	r2, r2
 8024f0c:	4611      	mov	r1, r2
 8024f0e:	4618      	mov	r0, r3
 8024f10:	f004 ff31 	bl	8029d76 <USB_HC_Halt>
 8024f14:	e031      	b.n	8024f7a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8024f16:	687a      	ldr	r2, [r7, #4]
 8024f18:	68fb      	ldr	r3, [r7, #12]
 8024f1a:	212c      	movs	r1, #44	; 0x2c
 8024f1c:	fb01 f303 	mul.w	r3, r1, r3
 8024f20:	4413      	add	r3, r2
 8024f22:	333f      	adds	r3, #63	; 0x3f
 8024f24:	781b      	ldrb	r3, [r3, #0]
 8024f26:	2b00      	cmp	r3, #0
 8024f28:	d009      	beq.n	8024f3e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8024f2a:	687a      	ldr	r2, [r7, #4]
 8024f2c:	68fb      	ldr	r3, [r7, #12]
 8024f2e:	212c      	movs	r1, #44	; 0x2c
 8024f30:	fb01 f303 	mul.w	r3, r1, r3
 8024f34:	4413      	add	r3, r2
 8024f36:	333f      	adds	r3, #63	; 0x3f
 8024f38:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8024f3a:	2b02      	cmp	r3, #2
 8024f3c:	d11d      	bne.n	8024f7a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8024f3e:	687a      	ldr	r2, [r7, #4]
 8024f40:	68fb      	ldr	r3, [r7, #12]
 8024f42:	212c      	movs	r1, #44	; 0x2c
 8024f44:	fb01 f303 	mul.w	r3, r1, r3
 8024f48:	4413      	add	r3, r2
 8024f4a:	335c      	adds	r3, #92	; 0x5c
 8024f4c:	2200      	movs	r2, #0
 8024f4e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8024f50:	687b      	ldr	r3, [r7, #4]
 8024f52:	691b      	ldr	r3, [r3, #16]
 8024f54:	2b00      	cmp	r3, #0
 8024f56:	d110      	bne.n	8024f7a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8024f58:	687a      	ldr	r2, [r7, #4]
 8024f5a:	68fb      	ldr	r3, [r7, #12]
 8024f5c:	212c      	movs	r1, #44	; 0x2c
 8024f5e:	fb01 f303 	mul.w	r3, r1, r3
 8024f62:	4413      	add	r3, r2
 8024f64:	3361      	adds	r3, #97	; 0x61
 8024f66:	2203      	movs	r2, #3
 8024f68:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024f6a:	687b      	ldr	r3, [r7, #4]
 8024f6c:	681b      	ldr	r3, [r3, #0]
 8024f6e:	68fa      	ldr	r2, [r7, #12]
 8024f70:	b2d2      	uxtb	r2, r2
 8024f72:	4611      	mov	r1, r2
 8024f74:	4618      	mov	r0, r3
 8024f76:	f004 fefe 	bl	8029d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8024f7a:	68fb      	ldr	r3, [r7, #12]
 8024f7c:	015a      	lsls	r2, r3, #5
 8024f7e:	693b      	ldr	r3, [r7, #16]
 8024f80:	4413      	add	r3, r2
 8024f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024f86:	461a      	mov	r2, r3
 8024f88:	2310      	movs	r3, #16
 8024f8a:	6093      	str	r3, [r2, #8]
}
 8024f8c:	bf00      	nop
 8024f8e:	3718      	adds	r7, #24
 8024f90:	46bd      	mov	sp, r7
 8024f92:	bd80      	pop	{r7, pc}

08024f94 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8024f94:	b580      	push	{r7, lr}
 8024f96:	b088      	sub	sp, #32
 8024f98:	af00      	add	r7, sp, #0
 8024f9a:	6078      	str	r0, [r7, #4]
 8024f9c:	460b      	mov	r3, r1
 8024f9e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8024fa0:	687b      	ldr	r3, [r7, #4]
 8024fa2:	681b      	ldr	r3, [r3, #0]
 8024fa4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8024fa6:	69fb      	ldr	r3, [r7, #28]
 8024fa8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8024faa:	78fb      	ldrb	r3, [r7, #3]
 8024fac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8024fae:	697b      	ldr	r3, [r7, #20]
 8024fb0:	015a      	lsls	r2, r3, #5
 8024fb2:	69bb      	ldr	r3, [r7, #24]
 8024fb4:	4413      	add	r3, r2
 8024fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024fba:	689b      	ldr	r3, [r3, #8]
 8024fbc:	f003 0304 	and.w	r3, r3, #4
 8024fc0:	2b04      	cmp	r3, #4
 8024fc2:	d11a      	bne.n	8024ffa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8024fc4:	697b      	ldr	r3, [r7, #20]
 8024fc6:	015a      	lsls	r2, r3, #5
 8024fc8:	69bb      	ldr	r3, [r7, #24]
 8024fca:	4413      	add	r3, r2
 8024fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024fd0:	461a      	mov	r2, r3
 8024fd2:	2304      	movs	r3, #4
 8024fd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8024fd6:	687a      	ldr	r2, [r7, #4]
 8024fd8:	697b      	ldr	r3, [r7, #20]
 8024fda:	212c      	movs	r1, #44	; 0x2c
 8024fdc:	fb01 f303 	mul.w	r3, r1, r3
 8024fe0:	4413      	add	r3, r2
 8024fe2:	3361      	adds	r3, #97	; 0x61
 8024fe4:	2206      	movs	r2, #6
 8024fe6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024fe8:	687b      	ldr	r3, [r7, #4]
 8024fea:	681b      	ldr	r3, [r3, #0]
 8024fec:	697a      	ldr	r2, [r7, #20]
 8024fee:	b2d2      	uxtb	r2, r2
 8024ff0:	4611      	mov	r1, r2
 8024ff2:	4618      	mov	r0, r3
 8024ff4:	f004 febf 	bl	8029d76 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8024ff8:	e331      	b.n	802565e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8024ffa:	697b      	ldr	r3, [r7, #20]
 8024ffc:	015a      	lsls	r2, r3, #5
 8024ffe:	69bb      	ldr	r3, [r7, #24]
 8025000:	4413      	add	r3, r2
 8025002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025006:	689b      	ldr	r3, [r3, #8]
 8025008:	f003 0320 	and.w	r3, r3, #32
 802500c:	2b20      	cmp	r3, #32
 802500e:	d12e      	bne.n	802506e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8025010:	697b      	ldr	r3, [r7, #20]
 8025012:	015a      	lsls	r2, r3, #5
 8025014:	69bb      	ldr	r3, [r7, #24]
 8025016:	4413      	add	r3, r2
 8025018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802501c:	461a      	mov	r2, r3
 802501e:	2320      	movs	r3, #32
 8025020:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8025022:	687a      	ldr	r2, [r7, #4]
 8025024:	697b      	ldr	r3, [r7, #20]
 8025026:	212c      	movs	r1, #44	; 0x2c
 8025028:	fb01 f303 	mul.w	r3, r1, r3
 802502c:	4413      	add	r3, r2
 802502e:	333d      	adds	r3, #61	; 0x3d
 8025030:	781b      	ldrb	r3, [r3, #0]
 8025032:	2b01      	cmp	r3, #1
 8025034:	f040 8313 	bne.w	802565e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8025038:	687a      	ldr	r2, [r7, #4]
 802503a:	697b      	ldr	r3, [r7, #20]
 802503c:	212c      	movs	r1, #44	; 0x2c
 802503e:	fb01 f303 	mul.w	r3, r1, r3
 8025042:	4413      	add	r3, r2
 8025044:	333d      	adds	r3, #61	; 0x3d
 8025046:	2200      	movs	r2, #0
 8025048:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 802504a:	687a      	ldr	r2, [r7, #4]
 802504c:	697b      	ldr	r3, [r7, #20]
 802504e:	212c      	movs	r1, #44	; 0x2c
 8025050:	fb01 f303 	mul.w	r3, r1, r3
 8025054:	4413      	add	r3, r2
 8025056:	3360      	adds	r3, #96	; 0x60
 8025058:	2202      	movs	r2, #2
 802505a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802505c:	687b      	ldr	r3, [r7, #4]
 802505e:	681b      	ldr	r3, [r3, #0]
 8025060:	697a      	ldr	r2, [r7, #20]
 8025062:	b2d2      	uxtb	r2, r2
 8025064:	4611      	mov	r1, r2
 8025066:	4618      	mov	r0, r3
 8025068:	f004 fe85 	bl	8029d76 <USB_HC_Halt>
}
 802506c:	e2f7      	b.n	802565e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 802506e:	697b      	ldr	r3, [r7, #20]
 8025070:	015a      	lsls	r2, r3, #5
 8025072:	69bb      	ldr	r3, [r7, #24]
 8025074:	4413      	add	r3, r2
 8025076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802507a:	689b      	ldr	r3, [r3, #8]
 802507c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025084:	d112      	bne.n	80250ac <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8025086:	697b      	ldr	r3, [r7, #20]
 8025088:	015a      	lsls	r2, r3, #5
 802508a:	69bb      	ldr	r3, [r7, #24]
 802508c:	4413      	add	r3, r2
 802508e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025092:	461a      	mov	r2, r3
 8025094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025098:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802509a:	687b      	ldr	r3, [r7, #4]
 802509c:	681b      	ldr	r3, [r3, #0]
 802509e:	697a      	ldr	r2, [r7, #20]
 80250a0:	b2d2      	uxtb	r2, r2
 80250a2:	4611      	mov	r1, r2
 80250a4:	4618      	mov	r0, r3
 80250a6:	f004 fe66 	bl	8029d76 <USB_HC_Halt>
}
 80250aa:	e2d8      	b.n	802565e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80250ac:	697b      	ldr	r3, [r7, #20]
 80250ae:	015a      	lsls	r2, r3, #5
 80250b0:	69bb      	ldr	r3, [r7, #24]
 80250b2:	4413      	add	r3, r2
 80250b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80250b8:	689b      	ldr	r3, [r3, #8]
 80250ba:	f003 0301 	and.w	r3, r3, #1
 80250be:	2b01      	cmp	r3, #1
 80250c0:	d140      	bne.n	8025144 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80250c2:	687a      	ldr	r2, [r7, #4]
 80250c4:	697b      	ldr	r3, [r7, #20]
 80250c6:	212c      	movs	r1, #44	; 0x2c
 80250c8:	fb01 f303 	mul.w	r3, r1, r3
 80250cc:	4413      	add	r3, r2
 80250ce:	335c      	adds	r3, #92	; 0x5c
 80250d0:	2200      	movs	r2, #0
 80250d2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80250d4:	697b      	ldr	r3, [r7, #20]
 80250d6:	015a      	lsls	r2, r3, #5
 80250d8:	69bb      	ldr	r3, [r7, #24]
 80250da:	4413      	add	r3, r2
 80250dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80250e0:	689b      	ldr	r3, [r3, #8]
 80250e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80250e6:	2b40      	cmp	r3, #64	; 0x40
 80250e8:	d111      	bne.n	802510e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80250ea:	687a      	ldr	r2, [r7, #4]
 80250ec:	697b      	ldr	r3, [r7, #20]
 80250ee:	212c      	movs	r1, #44	; 0x2c
 80250f0:	fb01 f303 	mul.w	r3, r1, r3
 80250f4:	4413      	add	r3, r2
 80250f6:	333d      	adds	r3, #61	; 0x3d
 80250f8:	2201      	movs	r2, #1
 80250fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80250fc:	697b      	ldr	r3, [r7, #20]
 80250fe:	015a      	lsls	r2, r3, #5
 8025100:	69bb      	ldr	r3, [r7, #24]
 8025102:	4413      	add	r3, r2
 8025104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025108:	461a      	mov	r2, r3
 802510a:	2340      	movs	r3, #64	; 0x40
 802510c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 802510e:	697b      	ldr	r3, [r7, #20]
 8025110:	015a      	lsls	r2, r3, #5
 8025112:	69bb      	ldr	r3, [r7, #24]
 8025114:	4413      	add	r3, r2
 8025116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802511a:	461a      	mov	r2, r3
 802511c:	2301      	movs	r3, #1
 802511e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8025120:	687a      	ldr	r2, [r7, #4]
 8025122:	697b      	ldr	r3, [r7, #20]
 8025124:	212c      	movs	r1, #44	; 0x2c
 8025126:	fb01 f303 	mul.w	r3, r1, r3
 802512a:	4413      	add	r3, r2
 802512c:	3361      	adds	r3, #97	; 0x61
 802512e:	2201      	movs	r2, #1
 8025130:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025132:	687b      	ldr	r3, [r7, #4]
 8025134:	681b      	ldr	r3, [r3, #0]
 8025136:	697a      	ldr	r2, [r7, #20]
 8025138:	b2d2      	uxtb	r2, r2
 802513a:	4611      	mov	r1, r2
 802513c:	4618      	mov	r0, r3
 802513e:	f004 fe1a 	bl	8029d76 <USB_HC_Halt>
}
 8025142:	e28c      	b.n	802565e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8025144:	697b      	ldr	r3, [r7, #20]
 8025146:	015a      	lsls	r2, r3, #5
 8025148:	69bb      	ldr	r3, [r7, #24]
 802514a:	4413      	add	r3, r2
 802514c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025150:	689b      	ldr	r3, [r3, #8]
 8025152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025156:	2b40      	cmp	r3, #64	; 0x40
 8025158:	d12c      	bne.n	80251b4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 802515a:	687a      	ldr	r2, [r7, #4]
 802515c:	697b      	ldr	r3, [r7, #20]
 802515e:	212c      	movs	r1, #44	; 0x2c
 8025160:	fb01 f303 	mul.w	r3, r1, r3
 8025164:	4413      	add	r3, r2
 8025166:	3361      	adds	r3, #97	; 0x61
 8025168:	2204      	movs	r2, #4
 802516a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 802516c:	687a      	ldr	r2, [r7, #4]
 802516e:	697b      	ldr	r3, [r7, #20]
 8025170:	212c      	movs	r1, #44	; 0x2c
 8025172:	fb01 f303 	mul.w	r3, r1, r3
 8025176:	4413      	add	r3, r2
 8025178:	333d      	adds	r3, #61	; 0x3d
 802517a:	2201      	movs	r2, #1
 802517c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 802517e:	687a      	ldr	r2, [r7, #4]
 8025180:	697b      	ldr	r3, [r7, #20]
 8025182:	212c      	movs	r1, #44	; 0x2c
 8025184:	fb01 f303 	mul.w	r3, r1, r3
 8025188:	4413      	add	r3, r2
 802518a:	335c      	adds	r3, #92	; 0x5c
 802518c:	2200      	movs	r2, #0
 802518e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025190:	687b      	ldr	r3, [r7, #4]
 8025192:	681b      	ldr	r3, [r3, #0]
 8025194:	697a      	ldr	r2, [r7, #20]
 8025196:	b2d2      	uxtb	r2, r2
 8025198:	4611      	mov	r1, r2
 802519a:	4618      	mov	r0, r3
 802519c:	f004 fdeb 	bl	8029d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80251a0:	697b      	ldr	r3, [r7, #20]
 80251a2:	015a      	lsls	r2, r3, #5
 80251a4:	69bb      	ldr	r3, [r7, #24]
 80251a6:	4413      	add	r3, r2
 80251a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80251ac:	461a      	mov	r2, r3
 80251ae:	2340      	movs	r3, #64	; 0x40
 80251b0:	6093      	str	r3, [r2, #8]
}
 80251b2:	e254      	b.n	802565e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80251b4:	697b      	ldr	r3, [r7, #20]
 80251b6:	015a      	lsls	r2, r3, #5
 80251b8:	69bb      	ldr	r3, [r7, #24]
 80251ba:	4413      	add	r3, r2
 80251bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80251c0:	689b      	ldr	r3, [r3, #8]
 80251c2:	f003 0308 	and.w	r3, r3, #8
 80251c6:	2b08      	cmp	r3, #8
 80251c8:	d11a      	bne.n	8025200 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80251ca:	697b      	ldr	r3, [r7, #20]
 80251cc:	015a      	lsls	r2, r3, #5
 80251ce:	69bb      	ldr	r3, [r7, #24]
 80251d0:	4413      	add	r3, r2
 80251d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80251d6:	461a      	mov	r2, r3
 80251d8:	2308      	movs	r3, #8
 80251da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80251dc:	687a      	ldr	r2, [r7, #4]
 80251de:	697b      	ldr	r3, [r7, #20]
 80251e0:	212c      	movs	r1, #44	; 0x2c
 80251e2:	fb01 f303 	mul.w	r3, r1, r3
 80251e6:	4413      	add	r3, r2
 80251e8:	3361      	adds	r3, #97	; 0x61
 80251ea:	2205      	movs	r2, #5
 80251ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80251ee:	687b      	ldr	r3, [r7, #4]
 80251f0:	681b      	ldr	r3, [r3, #0]
 80251f2:	697a      	ldr	r2, [r7, #20]
 80251f4:	b2d2      	uxtb	r2, r2
 80251f6:	4611      	mov	r1, r2
 80251f8:	4618      	mov	r0, r3
 80251fa:	f004 fdbc 	bl	8029d76 <USB_HC_Halt>
}
 80251fe:	e22e      	b.n	802565e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8025200:	697b      	ldr	r3, [r7, #20]
 8025202:	015a      	lsls	r2, r3, #5
 8025204:	69bb      	ldr	r3, [r7, #24]
 8025206:	4413      	add	r3, r2
 8025208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802520c:	689b      	ldr	r3, [r3, #8]
 802520e:	f003 0310 	and.w	r3, r3, #16
 8025212:	2b10      	cmp	r3, #16
 8025214:	d140      	bne.n	8025298 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025216:	687a      	ldr	r2, [r7, #4]
 8025218:	697b      	ldr	r3, [r7, #20]
 802521a:	212c      	movs	r1, #44	; 0x2c
 802521c:	fb01 f303 	mul.w	r3, r1, r3
 8025220:	4413      	add	r3, r2
 8025222:	335c      	adds	r3, #92	; 0x5c
 8025224:	2200      	movs	r2, #0
 8025226:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8025228:	687a      	ldr	r2, [r7, #4]
 802522a:	697b      	ldr	r3, [r7, #20]
 802522c:	212c      	movs	r1, #44	; 0x2c
 802522e:	fb01 f303 	mul.w	r3, r1, r3
 8025232:	4413      	add	r3, r2
 8025234:	3361      	adds	r3, #97	; 0x61
 8025236:	2203      	movs	r2, #3
 8025238:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 802523a:	687a      	ldr	r2, [r7, #4]
 802523c:	697b      	ldr	r3, [r7, #20]
 802523e:	212c      	movs	r1, #44	; 0x2c
 8025240:	fb01 f303 	mul.w	r3, r1, r3
 8025244:	4413      	add	r3, r2
 8025246:	333d      	adds	r3, #61	; 0x3d
 8025248:	781b      	ldrb	r3, [r3, #0]
 802524a:	2b00      	cmp	r3, #0
 802524c:	d112      	bne.n	8025274 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 802524e:	687a      	ldr	r2, [r7, #4]
 8025250:	697b      	ldr	r3, [r7, #20]
 8025252:	212c      	movs	r1, #44	; 0x2c
 8025254:	fb01 f303 	mul.w	r3, r1, r3
 8025258:	4413      	add	r3, r2
 802525a:	333c      	adds	r3, #60	; 0x3c
 802525c:	781b      	ldrb	r3, [r3, #0]
 802525e:	2b00      	cmp	r3, #0
 8025260:	d108      	bne.n	8025274 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8025262:	687a      	ldr	r2, [r7, #4]
 8025264:	697b      	ldr	r3, [r7, #20]
 8025266:	212c      	movs	r1, #44	; 0x2c
 8025268:	fb01 f303 	mul.w	r3, r1, r3
 802526c:	4413      	add	r3, r2
 802526e:	333d      	adds	r3, #61	; 0x3d
 8025270:	2201      	movs	r2, #1
 8025272:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025274:	687b      	ldr	r3, [r7, #4]
 8025276:	681b      	ldr	r3, [r3, #0]
 8025278:	697a      	ldr	r2, [r7, #20]
 802527a:	b2d2      	uxtb	r2, r2
 802527c:	4611      	mov	r1, r2
 802527e:	4618      	mov	r0, r3
 8025280:	f004 fd79 	bl	8029d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025284:	697b      	ldr	r3, [r7, #20]
 8025286:	015a      	lsls	r2, r3, #5
 8025288:	69bb      	ldr	r3, [r7, #24]
 802528a:	4413      	add	r3, r2
 802528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025290:	461a      	mov	r2, r3
 8025292:	2310      	movs	r3, #16
 8025294:	6093      	str	r3, [r2, #8]
}
 8025296:	e1e2      	b.n	802565e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8025298:	697b      	ldr	r3, [r7, #20]
 802529a:	015a      	lsls	r2, r3, #5
 802529c:	69bb      	ldr	r3, [r7, #24]
 802529e:	4413      	add	r3, r2
 80252a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80252a4:	689b      	ldr	r3, [r3, #8]
 80252a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80252aa:	2b80      	cmp	r3, #128	; 0x80
 80252ac:	d164      	bne.n	8025378 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80252ae:	687b      	ldr	r3, [r7, #4]
 80252b0:	691b      	ldr	r3, [r3, #16]
 80252b2:	2b00      	cmp	r3, #0
 80252b4:	d111      	bne.n	80252da <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80252b6:	687a      	ldr	r2, [r7, #4]
 80252b8:	697b      	ldr	r3, [r7, #20]
 80252ba:	212c      	movs	r1, #44	; 0x2c
 80252bc:	fb01 f303 	mul.w	r3, r1, r3
 80252c0:	4413      	add	r3, r2
 80252c2:	3361      	adds	r3, #97	; 0x61
 80252c4:	2206      	movs	r2, #6
 80252c6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80252c8:	687b      	ldr	r3, [r7, #4]
 80252ca:	681b      	ldr	r3, [r3, #0]
 80252cc:	697a      	ldr	r2, [r7, #20]
 80252ce:	b2d2      	uxtb	r2, r2
 80252d0:	4611      	mov	r1, r2
 80252d2:	4618      	mov	r0, r3
 80252d4:	f004 fd4f 	bl	8029d76 <USB_HC_Halt>
 80252d8:	e044      	b.n	8025364 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80252da:	687a      	ldr	r2, [r7, #4]
 80252dc:	697b      	ldr	r3, [r7, #20]
 80252de:	212c      	movs	r1, #44	; 0x2c
 80252e0:	fb01 f303 	mul.w	r3, r1, r3
 80252e4:	4413      	add	r3, r2
 80252e6:	335c      	adds	r3, #92	; 0x5c
 80252e8:	681b      	ldr	r3, [r3, #0]
 80252ea:	1c5a      	adds	r2, r3, #1
 80252ec:	6879      	ldr	r1, [r7, #4]
 80252ee:	697b      	ldr	r3, [r7, #20]
 80252f0:	202c      	movs	r0, #44	; 0x2c
 80252f2:	fb00 f303 	mul.w	r3, r0, r3
 80252f6:	440b      	add	r3, r1
 80252f8:	335c      	adds	r3, #92	; 0x5c
 80252fa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80252fc:	687a      	ldr	r2, [r7, #4]
 80252fe:	697b      	ldr	r3, [r7, #20]
 8025300:	212c      	movs	r1, #44	; 0x2c
 8025302:	fb01 f303 	mul.w	r3, r1, r3
 8025306:	4413      	add	r3, r2
 8025308:	335c      	adds	r3, #92	; 0x5c
 802530a:	681b      	ldr	r3, [r3, #0]
 802530c:	2b02      	cmp	r3, #2
 802530e:	d920      	bls.n	8025352 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8025310:	687a      	ldr	r2, [r7, #4]
 8025312:	697b      	ldr	r3, [r7, #20]
 8025314:	212c      	movs	r1, #44	; 0x2c
 8025316:	fb01 f303 	mul.w	r3, r1, r3
 802531a:	4413      	add	r3, r2
 802531c:	335c      	adds	r3, #92	; 0x5c
 802531e:	2200      	movs	r2, #0
 8025320:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025322:	687a      	ldr	r2, [r7, #4]
 8025324:	697b      	ldr	r3, [r7, #20]
 8025326:	212c      	movs	r1, #44	; 0x2c
 8025328:	fb01 f303 	mul.w	r3, r1, r3
 802532c:	4413      	add	r3, r2
 802532e:	3360      	adds	r3, #96	; 0x60
 8025330:	2204      	movs	r2, #4
 8025332:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025334:	697b      	ldr	r3, [r7, #20]
 8025336:	b2d9      	uxtb	r1, r3
 8025338:	687a      	ldr	r2, [r7, #4]
 802533a:	697b      	ldr	r3, [r7, #20]
 802533c:	202c      	movs	r0, #44	; 0x2c
 802533e:	fb00 f303 	mul.w	r3, r0, r3
 8025342:	4413      	add	r3, r2
 8025344:	3360      	adds	r3, #96	; 0x60
 8025346:	781b      	ldrb	r3, [r3, #0]
 8025348:	461a      	mov	r2, r3
 802534a:	6878      	ldr	r0, [r7, #4]
 802534c:	f006 ffb2 	bl	802c2b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8025350:	e008      	b.n	8025364 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025352:	687a      	ldr	r2, [r7, #4]
 8025354:	697b      	ldr	r3, [r7, #20]
 8025356:	212c      	movs	r1, #44	; 0x2c
 8025358:	fb01 f303 	mul.w	r3, r1, r3
 802535c:	4413      	add	r3, r2
 802535e:	3360      	adds	r3, #96	; 0x60
 8025360:	2202      	movs	r2, #2
 8025362:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8025364:	697b      	ldr	r3, [r7, #20]
 8025366:	015a      	lsls	r2, r3, #5
 8025368:	69bb      	ldr	r3, [r7, #24]
 802536a:	4413      	add	r3, r2
 802536c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025370:	461a      	mov	r2, r3
 8025372:	2380      	movs	r3, #128	; 0x80
 8025374:	6093      	str	r3, [r2, #8]
}
 8025376:	e172      	b.n	802565e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8025378:	697b      	ldr	r3, [r7, #20]
 802537a:	015a      	lsls	r2, r3, #5
 802537c:	69bb      	ldr	r3, [r7, #24]
 802537e:	4413      	add	r3, r2
 8025380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025384:	689b      	ldr	r3, [r3, #8]
 8025386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802538a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802538e:	d11b      	bne.n	80253c8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8025390:	687a      	ldr	r2, [r7, #4]
 8025392:	697b      	ldr	r3, [r7, #20]
 8025394:	212c      	movs	r1, #44	; 0x2c
 8025396:	fb01 f303 	mul.w	r3, r1, r3
 802539a:	4413      	add	r3, r2
 802539c:	3361      	adds	r3, #97	; 0x61
 802539e:	2208      	movs	r2, #8
 80253a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80253a2:	687b      	ldr	r3, [r7, #4]
 80253a4:	681b      	ldr	r3, [r3, #0]
 80253a6:	697a      	ldr	r2, [r7, #20]
 80253a8:	b2d2      	uxtb	r2, r2
 80253aa:	4611      	mov	r1, r2
 80253ac:	4618      	mov	r0, r3
 80253ae:	f004 fce2 	bl	8029d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80253b2:	697b      	ldr	r3, [r7, #20]
 80253b4:	015a      	lsls	r2, r3, #5
 80253b6:	69bb      	ldr	r3, [r7, #24]
 80253b8:	4413      	add	r3, r2
 80253ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80253be:	461a      	mov	r2, r3
 80253c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80253c4:	6093      	str	r3, [r2, #8]
}
 80253c6:	e14a      	b.n	802565e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80253c8:	697b      	ldr	r3, [r7, #20]
 80253ca:	015a      	lsls	r2, r3, #5
 80253cc:	69bb      	ldr	r3, [r7, #24]
 80253ce:	4413      	add	r3, r2
 80253d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80253d4:	689b      	ldr	r3, [r3, #8]
 80253d6:	f003 0302 	and.w	r3, r3, #2
 80253da:	2b02      	cmp	r3, #2
 80253dc:	f040 813f 	bne.w	802565e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80253e0:	687a      	ldr	r2, [r7, #4]
 80253e2:	697b      	ldr	r3, [r7, #20]
 80253e4:	212c      	movs	r1, #44	; 0x2c
 80253e6:	fb01 f303 	mul.w	r3, r1, r3
 80253ea:	4413      	add	r3, r2
 80253ec:	3361      	adds	r3, #97	; 0x61
 80253ee:	781b      	ldrb	r3, [r3, #0]
 80253f0:	2b01      	cmp	r3, #1
 80253f2:	d17d      	bne.n	80254f0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80253f4:	687a      	ldr	r2, [r7, #4]
 80253f6:	697b      	ldr	r3, [r7, #20]
 80253f8:	212c      	movs	r1, #44	; 0x2c
 80253fa:	fb01 f303 	mul.w	r3, r1, r3
 80253fe:	4413      	add	r3, r2
 8025400:	3360      	adds	r3, #96	; 0x60
 8025402:	2201      	movs	r2, #1
 8025404:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8025406:	687a      	ldr	r2, [r7, #4]
 8025408:	697b      	ldr	r3, [r7, #20]
 802540a:	212c      	movs	r1, #44	; 0x2c
 802540c:	fb01 f303 	mul.w	r3, r1, r3
 8025410:	4413      	add	r3, r2
 8025412:	333f      	adds	r3, #63	; 0x3f
 8025414:	781b      	ldrb	r3, [r3, #0]
 8025416:	2b02      	cmp	r3, #2
 8025418:	d00a      	beq.n	8025430 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 802541a:	687a      	ldr	r2, [r7, #4]
 802541c:	697b      	ldr	r3, [r7, #20]
 802541e:	212c      	movs	r1, #44	; 0x2c
 8025420:	fb01 f303 	mul.w	r3, r1, r3
 8025424:	4413      	add	r3, r2
 8025426:	333f      	adds	r3, #63	; 0x3f
 8025428:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 802542a:	2b03      	cmp	r3, #3
 802542c:	f040 8100 	bne.w	8025630 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8025430:	687b      	ldr	r3, [r7, #4]
 8025432:	691b      	ldr	r3, [r3, #16]
 8025434:	2b00      	cmp	r3, #0
 8025436:	d113      	bne.n	8025460 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8025438:	687a      	ldr	r2, [r7, #4]
 802543a:	697b      	ldr	r3, [r7, #20]
 802543c:	212c      	movs	r1, #44	; 0x2c
 802543e:	fb01 f303 	mul.w	r3, r1, r3
 8025442:	4413      	add	r3, r2
 8025444:	3355      	adds	r3, #85	; 0x55
 8025446:	781b      	ldrb	r3, [r3, #0]
 8025448:	f083 0301 	eor.w	r3, r3, #1
 802544c:	b2d8      	uxtb	r0, r3
 802544e:	687a      	ldr	r2, [r7, #4]
 8025450:	697b      	ldr	r3, [r7, #20]
 8025452:	212c      	movs	r1, #44	; 0x2c
 8025454:	fb01 f303 	mul.w	r3, r1, r3
 8025458:	4413      	add	r3, r2
 802545a:	3355      	adds	r3, #85	; 0x55
 802545c:	4602      	mov	r2, r0
 802545e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8025460:	687b      	ldr	r3, [r7, #4]
 8025462:	691b      	ldr	r3, [r3, #16]
 8025464:	2b01      	cmp	r3, #1
 8025466:	f040 80e3 	bne.w	8025630 <HCD_HC_OUT_IRQHandler+0x69c>
 802546a:	687a      	ldr	r2, [r7, #4]
 802546c:	697b      	ldr	r3, [r7, #20]
 802546e:	212c      	movs	r1, #44	; 0x2c
 8025470:	fb01 f303 	mul.w	r3, r1, r3
 8025474:	4413      	add	r3, r2
 8025476:	334c      	adds	r3, #76	; 0x4c
 8025478:	681b      	ldr	r3, [r3, #0]
 802547a:	2b00      	cmp	r3, #0
 802547c:	f000 80d8 	beq.w	8025630 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8025480:	687a      	ldr	r2, [r7, #4]
 8025482:	697b      	ldr	r3, [r7, #20]
 8025484:	212c      	movs	r1, #44	; 0x2c
 8025486:	fb01 f303 	mul.w	r3, r1, r3
 802548a:	4413      	add	r3, r2
 802548c:	334c      	adds	r3, #76	; 0x4c
 802548e:	681b      	ldr	r3, [r3, #0]
 8025490:	6879      	ldr	r1, [r7, #4]
 8025492:	697a      	ldr	r2, [r7, #20]
 8025494:	202c      	movs	r0, #44	; 0x2c
 8025496:	fb00 f202 	mul.w	r2, r0, r2
 802549a:	440a      	add	r2, r1
 802549c:	3240      	adds	r2, #64	; 0x40
 802549e:	8812      	ldrh	r2, [r2, #0]
 80254a0:	4413      	add	r3, r2
 80254a2:	3b01      	subs	r3, #1
 80254a4:	6879      	ldr	r1, [r7, #4]
 80254a6:	697a      	ldr	r2, [r7, #20]
 80254a8:	202c      	movs	r0, #44	; 0x2c
 80254aa:	fb00 f202 	mul.w	r2, r0, r2
 80254ae:	440a      	add	r2, r1
 80254b0:	3240      	adds	r2, #64	; 0x40
 80254b2:	8812      	ldrh	r2, [r2, #0]
 80254b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80254b8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80254ba:	68fb      	ldr	r3, [r7, #12]
 80254bc:	f003 0301 	and.w	r3, r3, #1
 80254c0:	2b00      	cmp	r3, #0
 80254c2:	f000 80b5 	beq.w	8025630 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80254c6:	687a      	ldr	r2, [r7, #4]
 80254c8:	697b      	ldr	r3, [r7, #20]
 80254ca:	212c      	movs	r1, #44	; 0x2c
 80254cc:	fb01 f303 	mul.w	r3, r1, r3
 80254d0:	4413      	add	r3, r2
 80254d2:	3355      	adds	r3, #85	; 0x55
 80254d4:	781b      	ldrb	r3, [r3, #0]
 80254d6:	f083 0301 	eor.w	r3, r3, #1
 80254da:	b2d8      	uxtb	r0, r3
 80254dc:	687a      	ldr	r2, [r7, #4]
 80254de:	697b      	ldr	r3, [r7, #20]
 80254e0:	212c      	movs	r1, #44	; 0x2c
 80254e2:	fb01 f303 	mul.w	r3, r1, r3
 80254e6:	4413      	add	r3, r2
 80254e8:	3355      	adds	r3, #85	; 0x55
 80254ea:	4602      	mov	r2, r0
 80254ec:	701a      	strb	r2, [r3, #0]
 80254ee:	e09f      	b.n	8025630 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80254f0:	687a      	ldr	r2, [r7, #4]
 80254f2:	697b      	ldr	r3, [r7, #20]
 80254f4:	212c      	movs	r1, #44	; 0x2c
 80254f6:	fb01 f303 	mul.w	r3, r1, r3
 80254fa:	4413      	add	r3, r2
 80254fc:	3361      	adds	r3, #97	; 0x61
 80254fe:	781b      	ldrb	r3, [r3, #0]
 8025500:	2b03      	cmp	r3, #3
 8025502:	d109      	bne.n	8025518 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025504:	687a      	ldr	r2, [r7, #4]
 8025506:	697b      	ldr	r3, [r7, #20]
 8025508:	212c      	movs	r1, #44	; 0x2c
 802550a:	fb01 f303 	mul.w	r3, r1, r3
 802550e:	4413      	add	r3, r2
 8025510:	3360      	adds	r3, #96	; 0x60
 8025512:	2202      	movs	r2, #2
 8025514:	701a      	strb	r2, [r3, #0]
 8025516:	e08b      	b.n	8025630 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8025518:	687a      	ldr	r2, [r7, #4]
 802551a:	697b      	ldr	r3, [r7, #20]
 802551c:	212c      	movs	r1, #44	; 0x2c
 802551e:	fb01 f303 	mul.w	r3, r1, r3
 8025522:	4413      	add	r3, r2
 8025524:	3361      	adds	r3, #97	; 0x61
 8025526:	781b      	ldrb	r3, [r3, #0]
 8025528:	2b04      	cmp	r3, #4
 802552a:	d109      	bne.n	8025540 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 802552c:	687a      	ldr	r2, [r7, #4]
 802552e:	697b      	ldr	r3, [r7, #20]
 8025530:	212c      	movs	r1, #44	; 0x2c
 8025532:	fb01 f303 	mul.w	r3, r1, r3
 8025536:	4413      	add	r3, r2
 8025538:	3360      	adds	r3, #96	; 0x60
 802553a:	2202      	movs	r2, #2
 802553c:	701a      	strb	r2, [r3, #0]
 802553e:	e077      	b.n	8025630 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8025540:	687a      	ldr	r2, [r7, #4]
 8025542:	697b      	ldr	r3, [r7, #20]
 8025544:	212c      	movs	r1, #44	; 0x2c
 8025546:	fb01 f303 	mul.w	r3, r1, r3
 802554a:	4413      	add	r3, r2
 802554c:	3361      	adds	r3, #97	; 0x61
 802554e:	781b      	ldrb	r3, [r3, #0]
 8025550:	2b05      	cmp	r3, #5
 8025552:	d109      	bne.n	8025568 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8025554:	687a      	ldr	r2, [r7, #4]
 8025556:	697b      	ldr	r3, [r7, #20]
 8025558:	212c      	movs	r1, #44	; 0x2c
 802555a:	fb01 f303 	mul.w	r3, r1, r3
 802555e:	4413      	add	r3, r2
 8025560:	3360      	adds	r3, #96	; 0x60
 8025562:	2205      	movs	r2, #5
 8025564:	701a      	strb	r2, [r3, #0]
 8025566:	e063      	b.n	8025630 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025568:	687a      	ldr	r2, [r7, #4]
 802556a:	697b      	ldr	r3, [r7, #20]
 802556c:	212c      	movs	r1, #44	; 0x2c
 802556e:	fb01 f303 	mul.w	r3, r1, r3
 8025572:	4413      	add	r3, r2
 8025574:	3361      	adds	r3, #97	; 0x61
 8025576:	781b      	ldrb	r3, [r3, #0]
 8025578:	2b06      	cmp	r3, #6
 802557a:	d009      	beq.n	8025590 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 802557c:	687a      	ldr	r2, [r7, #4]
 802557e:	697b      	ldr	r3, [r7, #20]
 8025580:	212c      	movs	r1, #44	; 0x2c
 8025582:	fb01 f303 	mul.w	r3, r1, r3
 8025586:	4413      	add	r3, r2
 8025588:	3361      	adds	r3, #97	; 0x61
 802558a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 802558c:	2b08      	cmp	r3, #8
 802558e:	d14f      	bne.n	8025630 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8025590:	687a      	ldr	r2, [r7, #4]
 8025592:	697b      	ldr	r3, [r7, #20]
 8025594:	212c      	movs	r1, #44	; 0x2c
 8025596:	fb01 f303 	mul.w	r3, r1, r3
 802559a:	4413      	add	r3, r2
 802559c:	335c      	adds	r3, #92	; 0x5c
 802559e:	681b      	ldr	r3, [r3, #0]
 80255a0:	1c5a      	adds	r2, r3, #1
 80255a2:	6879      	ldr	r1, [r7, #4]
 80255a4:	697b      	ldr	r3, [r7, #20]
 80255a6:	202c      	movs	r0, #44	; 0x2c
 80255a8:	fb00 f303 	mul.w	r3, r0, r3
 80255ac:	440b      	add	r3, r1
 80255ae:	335c      	adds	r3, #92	; 0x5c
 80255b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80255b2:	687a      	ldr	r2, [r7, #4]
 80255b4:	697b      	ldr	r3, [r7, #20]
 80255b6:	212c      	movs	r1, #44	; 0x2c
 80255b8:	fb01 f303 	mul.w	r3, r1, r3
 80255bc:	4413      	add	r3, r2
 80255be:	335c      	adds	r3, #92	; 0x5c
 80255c0:	681b      	ldr	r3, [r3, #0]
 80255c2:	2b02      	cmp	r3, #2
 80255c4:	d912      	bls.n	80255ec <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80255c6:	687a      	ldr	r2, [r7, #4]
 80255c8:	697b      	ldr	r3, [r7, #20]
 80255ca:	212c      	movs	r1, #44	; 0x2c
 80255cc:	fb01 f303 	mul.w	r3, r1, r3
 80255d0:	4413      	add	r3, r2
 80255d2:	335c      	adds	r3, #92	; 0x5c
 80255d4:	2200      	movs	r2, #0
 80255d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80255d8:	687a      	ldr	r2, [r7, #4]
 80255da:	697b      	ldr	r3, [r7, #20]
 80255dc:	212c      	movs	r1, #44	; 0x2c
 80255de:	fb01 f303 	mul.w	r3, r1, r3
 80255e2:	4413      	add	r3, r2
 80255e4:	3360      	adds	r3, #96	; 0x60
 80255e6:	2204      	movs	r2, #4
 80255e8:	701a      	strb	r2, [r3, #0]
 80255ea:	e021      	b.n	8025630 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80255ec:	687a      	ldr	r2, [r7, #4]
 80255ee:	697b      	ldr	r3, [r7, #20]
 80255f0:	212c      	movs	r1, #44	; 0x2c
 80255f2:	fb01 f303 	mul.w	r3, r1, r3
 80255f6:	4413      	add	r3, r2
 80255f8:	3360      	adds	r3, #96	; 0x60
 80255fa:	2202      	movs	r2, #2
 80255fc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80255fe:	697b      	ldr	r3, [r7, #20]
 8025600:	015a      	lsls	r2, r3, #5
 8025602:	69bb      	ldr	r3, [r7, #24]
 8025604:	4413      	add	r3, r2
 8025606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802560a:	681b      	ldr	r3, [r3, #0]
 802560c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802560e:	693b      	ldr	r3, [r7, #16]
 8025610:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025614:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025616:	693b      	ldr	r3, [r7, #16]
 8025618:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802561c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 802561e:	697b      	ldr	r3, [r7, #20]
 8025620:	015a      	lsls	r2, r3, #5
 8025622:	69bb      	ldr	r3, [r7, #24]
 8025624:	4413      	add	r3, r2
 8025626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802562a:	461a      	mov	r2, r3
 802562c:	693b      	ldr	r3, [r7, #16]
 802562e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8025630:	697b      	ldr	r3, [r7, #20]
 8025632:	015a      	lsls	r2, r3, #5
 8025634:	69bb      	ldr	r3, [r7, #24]
 8025636:	4413      	add	r3, r2
 8025638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802563c:	461a      	mov	r2, r3
 802563e:	2302      	movs	r3, #2
 8025640:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025642:	697b      	ldr	r3, [r7, #20]
 8025644:	b2d9      	uxtb	r1, r3
 8025646:	687a      	ldr	r2, [r7, #4]
 8025648:	697b      	ldr	r3, [r7, #20]
 802564a:	202c      	movs	r0, #44	; 0x2c
 802564c:	fb00 f303 	mul.w	r3, r0, r3
 8025650:	4413      	add	r3, r2
 8025652:	3360      	adds	r3, #96	; 0x60
 8025654:	781b      	ldrb	r3, [r3, #0]
 8025656:	461a      	mov	r2, r3
 8025658:	6878      	ldr	r0, [r7, #4]
 802565a:	f006 fe2b 	bl	802c2b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 802565e:	bf00      	nop
 8025660:	3720      	adds	r7, #32
 8025662:	46bd      	mov	sp, r7
 8025664:	bd80      	pop	{r7, pc}

08025666 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8025666:	b580      	push	{r7, lr}
 8025668:	b08a      	sub	sp, #40	; 0x28
 802566a:	af00      	add	r7, sp, #0
 802566c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 802566e:	687b      	ldr	r3, [r7, #4]
 8025670:	681b      	ldr	r3, [r3, #0]
 8025672:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025676:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8025678:	687b      	ldr	r3, [r7, #4]
 802567a:	681b      	ldr	r3, [r3, #0]
 802567c:	6a1b      	ldr	r3, [r3, #32]
 802567e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8025680:	69fb      	ldr	r3, [r7, #28]
 8025682:	f003 030f 	and.w	r3, r3, #15
 8025686:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8025688:	69fb      	ldr	r3, [r7, #28]
 802568a:	0c5b      	lsrs	r3, r3, #17
 802568c:	f003 030f 	and.w	r3, r3, #15
 8025690:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8025692:	69fb      	ldr	r3, [r7, #28]
 8025694:	091b      	lsrs	r3, r3, #4
 8025696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802569a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 802569c:	697b      	ldr	r3, [r7, #20]
 802569e:	2b02      	cmp	r3, #2
 80256a0:	d004      	beq.n	80256ac <HCD_RXQLVL_IRQHandler+0x46>
 80256a2:	697b      	ldr	r3, [r7, #20]
 80256a4:	2b05      	cmp	r3, #5
 80256a6:	f000 80a9 	beq.w	80257fc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80256aa:	e0aa      	b.n	8025802 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80256ac:	693b      	ldr	r3, [r7, #16]
 80256ae:	2b00      	cmp	r3, #0
 80256b0:	f000 80a6 	beq.w	8025800 <HCD_RXQLVL_IRQHandler+0x19a>
 80256b4:	687a      	ldr	r2, [r7, #4]
 80256b6:	69bb      	ldr	r3, [r7, #24]
 80256b8:	212c      	movs	r1, #44	; 0x2c
 80256ba:	fb01 f303 	mul.w	r3, r1, r3
 80256be:	4413      	add	r3, r2
 80256c0:	3344      	adds	r3, #68	; 0x44
 80256c2:	681b      	ldr	r3, [r3, #0]
 80256c4:	2b00      	cmp	r3, #0
 80256c6:	f000 809b 	beq.w	8025800 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80256ca:	687a      	ldr	r2, [r7, #4]
 80256cc:	69bb      	ldr	r3, [r7, #24]
 80256ce:	212c      	movs	r1, #44	; 0x2c
 80256d0:	fb01 f303 	mul.w	r3, r1, r3
 80256d4:	4413      	add	r3, r2
 80256d6:	3350      	adds	r3, #80	; 0x50
 80256d8:	681a      	ldr	r2, [r3, #0]
 80256da:	693b      	ldr	r3, [r7, #16]
 80256dc:	441a      	add	r2, r3
 80256de:	6879      	ldr	r1, [r7, #4]
 80256e0:	69bb      	ldr	r3, [r7, #24]
 80256e2:	202c      	movs	r0, #44	; 0x2c
 80256e4:	fb00 f303 	mul.w	r3, r0, r3
 80256e8:	440b      	add	r3, r1
 80256ea:	334c      	adds	r3, #76	; 0x4c
 80256ec:	681b      	ldr	r3, [r3, #0]
 80256ee:	429a      	cmp	r2, r3
 80256f0:	d87a      	bhi.n	80257e8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80256f2:	687b      	ldr	r3, [r7, #4]
 80256f4:	6818      	ldr	r0, [r3, #0]
 80256f6:	687a      	ldr	r2, [r7, #4]
 80256f8:	69bb      	ldr	r3, [r7, #24]
 80256fa:	212c      	movs	r1, #44	; 0x2c
 80256fc:	fb01 f303 	mul.w	r3, r1, r3
 8025700:	4413      	add	r3, r2
 8025702:	3344      	adds	r3, #68	; 0x44
 8025704:	681b      	ldr	r3, [r3, #0]
 8025706:	693a      	ldr	r2, [r7, #16]
 8025708:	b292      	uxth	r2, r2
 802570a:	4619      	mov	r1, r3
 802570c:	f003 fe8a 	bl	8029424 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8025710:	687a      	ldr	r2, [r7, #4]
 8025712:	69bb      	ldr	r3, [r7, #24]
 8025714:	212c      	movs	r1, #44	; 0x2c
 8025716:	fb01 f303 	mul.w	r3, r1, r3
 802571a:	4413      	add	r3, r2
 802571c:	3344      	adds	r3, #68	; 0x44
 802571e:	681a      	ldr	r2, [r3, #0]
 8025720:	693b      	ldr	r3, [r7, #16]
 8025722:	441a      	add	r2, r3
 8025724:	6879      	ldr	r1, [r7, #4]
 8025726:	69bb      	ldr	r3, [r7, #24]
 8025728:	202c      	movs	r0, #44	; 0x2c
 802572a:	fb00 f303 	mul.w	r3, r0, r3
 802572e:	440b      	add	r3, r1
 8025730:	3344      	adds	r3, #68	; 0x44
 8025732:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8025734:	687a      	ldr	r2, [r7, #4]
 8025736:	69bb      	ldr	r3, [r7, #24]
 8025738:	212c      	movs	r1, #44	; 0x2c
 802573a:	fb01 f303 	mul.w	r3, r1, r3
 802573e:	4413      	add	r3, r2
 8025740:	3350      	adds	r3, #80	; 0x50
 8025742:	681a      	ldr	r2, [r3, #0]
 8025744:	693b      	ldr	r3, [r7, #16]
 8025746:	441a      	add	r2, r3
 8025748:	6879      	ldr	r1, [r7, #4]
 802574a:	69bb      	ldr	r3, [r7, #24]
 802574c:	202c      	movs	r0, #44	; 0x2c
 802574e:	fb00 f303 	mul.w	r3, r0, r3
 8025752:	440b      	add	r3, r1
 8025754:	3350      	adds	r3, #80	; 0x50
 8025756:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8025758:	69bb      	ldr	r3, [r7, #24]
 802575a:	015a      	lsls	r2, r3, #5
 802575c:	6a3b      	ldr	r3, [r7, #32]
 802575e:	4413      	add	r3, r2
 8025760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025764:	691b      	ldr	r3, [r3, #16]
 8025766:	0cdb      	lsrs	r3, r3, #19
 8025768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 802576c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 802576e:	687a      	ldr	r2, [r7, #4]
 8025770:	69bb      	ldr	r3, [r7, #24]
 8025772:	212c      	movs	r1, #44	; 0x2c
 8025774:	fb01 f303 	mul.w	r3, r1, r3
 8025778:	4413      	add	r3, r2
 802577a:	3340      	adds	r3, #64	; 0x40
 802577c:	881b      	ldrh	r3, [r3, #0]
 802577e:	461a      	mov	r2, r3
 8025780:	693b      	ldr	r3, [r7, #16]
 8025782:	4293      	cmp	r3, r2
 8025784:	d13c      	bne.n	8025800 <HCD_RXQLVL_IRQHandler+0x19a>
 8025786:	68fb      	ldr	r3, [r7, #12]
 8025788:	2b00      	cmp	r3, #0
 802578a:	d039      	beq.n	8025800 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 802578c:	69bb      	ldr	r3, [r7, #24]
 802578e:	015a      	lsls	r2, r3, #5
 8025790:	6a3b      	ldr	r3, [r7, #32]
 8025792:	4413      	add	r3, r2
 8025794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025798:	681b      	ldr	r3, [r3, #0]
 802579a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802579c:	68bb      	ldr	r3, [r7, #8]
 802579e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80257a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80257a4:	68bb      	ldr	r3, [r7, #8]
 80257a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80257aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80257ac:	69bb      	ldr	r3, [r7, #24]
 80257ae:	015a      	lsls	r2, r3, #5
 80257b0:	6a3b      	ldr	r3, [r7, #32]
 80257b2:	4413      	add	r3, r2
 80257b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80257b8:	461a      	mov	r2, r3
 80257ba:	68bb      	ldr	r3, [r7, #8]
 80257bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80257be:	687a      	ldr	r2, [r7, #4]
 80257c0:	69bb      	ldr	r3, [r7, #24]
 80257c2:	212c      	movs	r1, #44	; 0x2c
 80257c4:	fb01 f303 	mul.w	r3, r1, r3
 80257c8:	4413      	add	r3, r2
 80257ca:	3354      	adds	r3, #84	; 0x54
 80257cc:	781b      	ldrb	r3, [r3, #0]
 80257ce:	f083 0301 	eor.w	r3, r3, #1
 80257d2:	b2d8      	uxtb	r0, r3
 80257d4:	687a      	ldr	r2, [r7, #4]
 80257d6:	69bb      	ldr	r3, [r7, #24]
 80257d8:	212c      	movs	r1, #44	; 0x2c
 80257da:	fb01 f303 	mul.w	r3, r1, r3
 80257de:	4413      	add	r3, r2
 80257e0:	3354      	adds	r3, #84	; 0x54
 80257e2:	4602      	mov	r2, r0
 80257e4:	701a      	strb	r2, [r3, #0]
      break;
 80257e6:	e00b      	b.n	8025800 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80257e8:	687a      	ldr	r2, [r7, #4]
 80257ea:	69bb      	ldr	r3, [r7, #24]
 80257ec:	212c      	movs	r1, #44	; 0x2c
 80257ee:	fb01 f303 	mul.w	r3, r1, r3
 80257f2:	4413      	add	r3, r2
 80257f4:	3360      	adds	r3, #96	; 0x60
 80257f6:	2204      	movs	r2, #4
 80257f8:	701a      	strb	r2, [r3, #0]
      break;
 80257fa:	e001      	b.n	8025800 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80257fc:	bf00      	nop
 80257fe:	e000      	b.n	8025802 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8025800:	bf00      	nop
  }
}
 8025802:	bf00      	nop
 8025804:	3728      	adds	r7, #40	; 0x28
 8025806:	46bd      	mov	sp, r7
 8025808:	bd80      	pop	{r7, pc}

0802580a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 802580a:	b580      	push	{r7, lr}
 802580c:	b086      	sub	sp, #24
 802580e:	af00      	add	r7, sp, #0
 8025810:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025812:	687b      	ldr	r3, [r7, #4]
 8025814:	681b      	ldr	r3, [r3, #0]
 8025816:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025818:	697b      	ldr	r3, [r7, #20]
 802581a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 802581c:	693b      	ldr	r3, [r7, #16]
 802581e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025822:	681b      	ldr	r3, [r3, #0]
 8025824:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8025826:	693b      	ldr	r3, [r7, #16]
 8025828:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802582c:	681b      	ldr	r3, [r3, #0]
 802582e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8025830:	68bb      	ldr	r3, [r7, #8]
 8025832:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8025836:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8025838:	68fb      	ldr	r3, [r7, #12]
 802583a:	f003 0302 	and.w	r3, r3, #2
 802583e:	2b02      	cmp	r3, #2
 8025840:	d10b      	bne.n	802585a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8025842:	68fb      	ldr	r3, [r7, #12]
 8025844:	f003 0301 	and.w	r3, r3, #1
 8025848:	2b01      	cmp	r3, #1
 802584a:	d102      	bne.n	8025852 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 802584c:	6878      	ldr	r0, [r7, #4]
 802584e:	f006 fd15 	bl	802c27c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8025852:	68bb      	ldr	r3, [r7, #8]
 8025854:	f043 0302 	orr.w	r3, r3, #2
 8025858:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 802585a:	68fb      	ldr	r3, [r7, #12]
 802585c:	f003 0308 	and.w	r3, r3, #8
 8025860:	2b08      	cmp	r3, #8
 8025862:	d132      	bne.n	80258ca <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8025864:	68bb      	ldr	r3, [r7, #8]
 8025866:	f043 0308 	orr.w	r3, r3, #8
 802586a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 802586c:	68fb      	ldr	r3, [r7, #12]
 802586e:	f003 0304 	and.w	r3, r3, #4
 8025872:	2b04      	cmp	r3, #4
 8025874:	d126      	bne.n	80258c4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8025876:	687b      	ldr	r3, [r7, #4]
 8025878:	699b      	ldr	r3, [r3, #24]
 802587a:	2b02      	cmp	r3, #2
 802587c:	d113      	bne.n	80258a6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 802587e:	68fb      	ldr	r3, [r7, #12]
 8025880:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8025884:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8025888:	d106      	bne.n	8025898 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 802588a:	687b      	ldr	r3, [r7, #4]
 802588c:	681b      	ldr	r3, [r3, #0]
 802588e:	2102      	movs	r1, #2
 8025890:	4618      	mov	r0, r3
 8025892:	f003 ff35 	bl	8029700 <USB_InitFSLSPClkSel>
 8025896:	e011      	b.n	80258bc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8025898:	687b      	ldr	r3, [r7, #4]
 802589a:	681b      	ldr	r3, [r3, #0]
 802589c:	2101      	movs	r1, #1
 802589e:	4618      	mov	r0, r3
 80258a0:	f003 ff2e 	bl	8029700 <USB_InitFSLSPClkSel>
 80258a4:	e00a      	b.n	80258bc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80258a6:	687b      	ldr	r3, [r7, #4]
 80258a8:	68db      	ldr	r3, [r3, #12]
 80258aa:	2b01      	cmp	r3, #1
 80258ac:	d106      	bne.n	80258bc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80258ae:	693b      	ldr	r3, [r7, #16]
 80258b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80258b4:	461a      	mov	r2, r3
 80258b6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80258ba:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80258bc:	6878      	ldr	r0, [r7, #4]
 80258be:	f006 fd07 	bl	802c2d0 <HAL_HCD_PortEnabled_Callback>
 80258c2:	e002      	b.n	80258ca <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80258c4:	6878      	ldr	r0, [r7, #4]
 80258c6:	f006 fd11 	bl	802c2ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80258ca:	68fb      	ldr	r3, [r7, #12]
 80258cc:	f003 0320 	and.w	r3, r3, #32
 80258d0:	2b20      	cmp	r3, #32
 80258d2:	d103      	bne.n	80258dc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80258d4:	68bb      	ldr	r3, [r7, #8]
 80258d6:	f043 0320 	orr.w	r3, r3, #32
 80258da:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80258dc:	693b      	ldr	r3, [r7, #16]
 80258de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80258e2:	461a      	mov	r2, r3
 80258e4:	68bb      	ldr	r3, [r7, #8]
 80258e6:	6013      	str	r3, [r2, #0]
}
 80258e8:	bf00      	nop
 80258ea:	3718      	adds	r7, #24
 80258ec:	46bd      	mov	sp, r7
 80258ee:	bd80      	pop	{r7, pc}

080258f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80258f0:	b580      	push	{r7, lr}
 80258f2:	b084      	sub	sp, #16
 80258f4:	af00      	add	r7, sp, #0
 80258f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80258f8:	687b      	ldr	r3, [r7, #4]
 80258fa:	2b00      	cmp	r3, #0
 80258fc:	d101      	bne.n	8025902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80258fe:	2301      	movs	r3, #1
 8025900:	e12b      	b.n	8025b5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8025902:	687b      	ldr	r3, [r7, #4]
 8025904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025908:	b2db      	uxtb	r3, r3
 802590a:	2b00      	cmp	r3, #0
 802590c:	d106      	bne.n	802591c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802590e:	687b      	ldr	r3, [r7, #4]
 8025910:	2200      	movs	r2, #0
 8025912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8025916:	6878      	ldr	r0, [r7, #4]
 8025918:	f7fb fb2c 	bl	8020f74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 802591c:	687b      	ldr	r3, [r7, #4]
 802591e:	2224      	movs	r2, #36	; 0x24
 8025920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8025924:	687b      	ldr	r3, [r7, #4]
 8025926:	681b      	ldr	r3, [r3, #0]
 8025928:	681a      	ldr	r2, [r3, #0]
 802592a:	687b      	ldr	r3, [r7, #4]
 802592c:	681b      	ldr	r3, [r3, #0]
 802592e:	f022 0201 	bic.w	r2, r2, #1
 8025932:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8025934:	687b      	ldr	r3, [r7, #4]
 8025936:	681b      	ldr	r3, [r3, #0]
 8025938:	681a      	ldr	r2, [r3, #0]
 802593a:	687b      	ldr	r3, [r7, #4]
 802593c:	681b      	ldr	r3, [r3, #0]
 802593e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8025942:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8025944:	687b      	ldr	r3, [r7, #4]
 8025946:	681b      	ldr	r3, [r3, #0]
 8025948:	681a      	ldr	r2, [r3, #0]
 802594a:	687b      	ldr	r3, [r7, #4]
 802594c:	681b      	ldr	r3, [r3, #0]
 802594e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8025952:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8025954:	f001 fa0c 	bl	8026d70 <HAL_RCC_GetPCLK1Freq>
 8025958:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 802595a:	687b      	ldr	r3, [r7, #4]
 802595c:	685b      	ldr	r3, [r3, #4]
 802595e:	4a81      	ldr	r2, [pc, #516]	; (8025b64 <HAL_I2C_Init+0x274>)
 8025960:	4293      	cmp	r3, r2
 8025962:	d807      	bhi.n	8025974 <HAL_I2C_Init+0x84>
 8025964:	68fb      	ldr	r3, [r7, #12]
 8025966:	4a80      	ldr	r2, [pc, #512]	; (8025b68 <HAL_I2C_Init+0x278>)
 8025968:	4293      	cmp	r3, r2
 802596a:	bf94      	ite	ls
 802596c:	2301      	movls	r3, #1
 802596e:	2300      	movhi	r3, #0
 8025970:	b2db      	uxtb	r3, r3
 8025972:	e006      	b.n	8025982 <HAL_I2C_Init+0x92>
 8025974:	68fb      	ldr	r3, [r7, #12]
 8025976:	4a7d      	ldr	r2, [pc, #500]	; (8025b6c <HAL_I2C_Init+0x27c>)
 8025978:	4293      	cmp	r3, r2
 802597a:	bf94      	ite	ls
 802597c:	2301      	movls	r3, #1
 802597e:	2300      	movhi	r3, #0
 8025980:	b2db      	uxtb	r3, r3
 8025982:	2b00      	cmp	r3, #0
 8025984:	d001      	beq.n	802598a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8025986:	2301      	movs	r3, #1
 8025988:	e0e7      	b.n	8025b5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 802598a:	68fb      	ldr	r3, [r7, #12]
 802598c:	4a78      	ldr	r2, [pc, #480]	; (8025b70 <HAL_I2C_Init+0x280>)
 802598e:	fba2 2303 	umull	r2, r3, r2, r3
 8025992:	0c9b      	lsrs	r3, r3, #18
 8025994:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8025996:	687b      	ldr	r3, [r7, #4]
 8025998:	681b      	ldr	r3, [r3, #0]
 802599a:	685b      	ldr	r3, [r3, #4]
 802599c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80259a0:	687b      	ldr	r3, [r7, #4]
 80259a2:	681b      	ldr	r3, [r3, #0]
 80259a4:	68ba      	ldr	r2, [r7, #8]
 80259a6:	430a      	orrs	r2, r1
 80259a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80259aa:	687b      	ldr	r3, [r7, #4]
 80259ac:	681b      	ldr	r3, [r3, #0]
 80259ae:	6a1b      	ldr	r3, [r3, #32]
 80259b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80259b4:	687b      	ldr	r3, [r7, #4]
 80259b6:	685b      	ldr	r3, [r3, #4]
 80259b8:	4a6a      	ldr	r2, [pc, #424]	; (8025b64 <HAL_I2C_Init+0x274>)
 80259ba:	4293      	cmp	r3, r2
 80259bc:	d802      	bhi.n	80259c4 <HAL_I2C_Init+0xd4>
 80259be:	68bb      	ldr	r3, [r7, #8]
 80259c0:	3301      	adds	r3, #1
 80259c2:	e009      	b.n	80259d8 <HAL_I2C_Init+0xe8>
 80259c4:	68bb      	ldr	r3, [r7, #8]
 80259c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80259ca:	fb02 f303 	mul.w	r3, r2, r3
 80259ce:	4a69      	ldr	r2, [pc, #420]	; (8025b74 <HAL_I2C_Init+0x284>)
 80259d0:	fba2 2303 	umull	r2, r3, r2, r3
 80259d4:	099b      	lsrs	r3, r3, #6
 80259d6:	3301      	adds	r3, #1
 80259d8:	687a      	ldr	r2, [r7, #4]
 80259da:	6812      	ldr	r2, [r2, #0]
 80259dc:	430b      	orrs	r3, r1
 80259de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80259e0:	687b      	ldr	r3, [r7, #4]
 80259e2:	681b      	ldr	r3, [r3, #0]
 80259e4:	69db      	ldr	r3, [r3, #28]
 80259e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80259ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80259ee:	687b      	ldr	r3, [r7, #4]
 80259f0:	685b      	ldr	r3, [r3, #4]
 80259f2:	495c      	ldr	r1, [pc, #368]	; (8025b64 <HAL_I2C_Init+0x274>)
 80259f4:	428b      	cmp	r3, r1
 80259f6:	d819      	bhi.n	8025a2c <HAL_I2C_Init+0x13c>
 80259f8:	68fb      	ldr	r3, [r7, #12]
 80259fa:	1e59      	subs	r1, r3, #1
 80259fc:	687b      	ldr	r3, [r7, #4]
 80259fe:	685b      	ldr	r3, [r3, #4]
 8025a00:	005b      	lsls	r3, r3, #1
 8025a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8025a06:	1c59      	adds	r1, r3, #1
 8025a08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8025a0c:	400b      	ands	r3, r1
 8025a0e:	2b00      	cmp	r3, #0
 8025a10:	d00a      	beq.n	8025a28 <HAL_I2C_Init+0x138>
 8025a12:	68fb      	ldr	r3, [r7, #12]
 8025a14:	1e59      	subs	r1, r3, #1
 8025a16:	687b      	ldr	r3, [r7, #4]
 8025a18:	685b      	ldr	r3, [r3, #4]
 8025a1a:	005b      	lsls	r3, r3, #1
 8025a1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8025a20:	3301      	adds	r3, #1
 8025a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025a26:	e051      	b.n	8025acc <HAL_I2C_Init+0x1dc>
 8025a28:	2304      	movs	r3, #4
 8025a2a:	e04f      	b.n	8025acc <HAL_I2C_Init+0x1dc>
 8025a2c:	687b      	ldr	r3, [r7, #4]
 8025a2e:	689b      	ldr	r3, [r3, #8]
 8025a30:	2b00      	cmp	r3, #0
 8025a32:	d111      	bne.n	8025a58 <HAL_I2C_Init+0x168>
 8025a34:	68fb      	ldr	r3, [r7, #12]
 8025a36:	1e58      	subs	r0, r3, #1
 8025a38:	687b      	ldr	r3, [r7, #4]
 8025a3a:	6859      	ldr	r1, [r3, #4]
 8025a3c:	460b      	mov	r3, r1
 8025a3e:	005b      	lsls	r3, r3, #1
 8025a40:	440b      	add	r3, r1
 8025a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8025a46:	3301      	adds	r3, #1
 8025a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025a4c:	2b00      	cmp	r3, #0
 8025a4e:	bf0c      	ite	eq
 8025a50:	2301      	moveq	r3, #1
 8025a52:	2300      	movne	r3, #0
 8025a54:	b2db      	uxtb	r3, r3
 8025a56:	e012      	b.n	8025a7e <HAL_I2C_Init+0x18e>
 8025a58:	68fb      	ldr	r3, [r7, #12]
 8025a5a:	1e58      	subs	r0, r3, #1
 8025a5c:	687b      	ldr	r3, [r7, #4]
 8025a5e:	6859      	ldr	r1, [r3, #4]
 8025a60:	460b      	mov	r3, r1
 8025a62:	009b      	lsls	r3, r3, #2
 8025a64:	440b      	add	r3, r1
 8025a66:	0099      	lsls	r1, r3, #2
 8025a68:	440b      	add	r3, r1
 8025a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8025a6e:	3301      	adds	r3, #1
 8025a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025a74:	2b00      	cmp	r3, #0
 8025a76:	bf0c      	ite	eq
 8025a78:	2301      	moveq	r3, #1
 8025a7a:	2300      	movne	r3, #0
 8025a7c:	b2db      	uxtb	r3, r3
 8025a7e:	2b00      	cmp	r3, #0
 8025a80:	d001      	beq.n	8025a86 <HAL_I2C_Init+0x196>
 8025a82:	2301      	movs	r3, #1
 8025a84:	e022      	b.n	8025acc <HAL_I2C_Init+0x1dc>
 8025a86:	687b      	ldr	r3, [r7, #4]
 8025a88:	689b      	ldr	r3, [r3, #8]
 8025a8a:	2b00      	cmp	r3, #0
 8025a8c:	d10e      	bne.n	8025aac <HAL_I2C_Init+0x1bc>
 8025a8e:	68fb      	ldr	r3, [r7, #12]
 8025a90:	1e58      	subs	r0, r3, #1
 8025a92:	687b      	ldr	r3, [r7, #4]
 8025a94:	6859      	ldr	r1, [r3, #4]
 8025a96:	460b      	mov	r3, r1
 8025a98:	005b      	lsls	r3, r3, #1
 8025a9a:	440b      	add	r3, r1
 8025a9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8025aa0:	3301      	adds	r3, #1
 8025aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8025aaa:	e00f      	b.n	8025acc <HAL_I2C_Init+0x1dc>
 8025aac:	68fb      	ldr	r3, [r7, #12]
 8025aae:	1e58      	subs	r0, r3, #1
 8025ab0:	687b      	ldr	r3, [r7, #4]
 8025ab2:	6859      	ldr	r1, [r3, #4]
 8025ab4:	460b      	mov	r3, r1
 8025ab6:	009b      	lsls	r3, r3, #2
 8025ab8:	440b      	add	r3, r1
 8025aba:	0099      	lsls	r1, r3, #2
 8025abc:	440b      	add	r3, r1
 8025abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8025ac2:	3301      	adds	r3, #1
 8025ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8025acc:	6879      	ldr	r1, [r7, #4]
 8025ace:	6809      	ldr	r1, [r1, #0]
 8025ad0:	4313      	orrs	r3, r2
 8025ad2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8025ad4:	687b      	ldr	r3, [r7, #4]
 8025ad6:	681b      	ldr	r3, [r3, #0]
 8025ad8:	681b      	ldr	r3, [r3, #0]
 8025ada:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8025ade:	687b      	ldr	r3, [r7, #4]
 8025ae0:	69da      	ldr	r2, [r3, #28]
 8025ae2:	687b      	ldr	r3, [r7, #4]
 8025ae4:	6a1b      	ldr	r3, [r3, #32]
 8025ae6:	431a      	orrs	r2, r3
 8025ae8:	687b      	ldr	r3, [r7, #4]
 8025aea:	681b      	ldr	r3, [r3, #0]
 8025aec:	430a      	orrs	r2, r1
 8025aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8025af0:	687b      	ldr	r3, [r7, #4]
 8025af2:	681b      	ldr	r3, [r3, #0]
 8025af4:	689b      	ldr	r3, [r3, #8]
 8025af6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8025afa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8025afe:	687a      	ldr	r2, [r7, #4]
 8025b00:	6911      	ldr	r1, [r2, #16]
 8025b02:	687a      	ldr	r2, [r7, #4]
 8025b04:	68d2      	ldr	r2, [r2, #12]
 8025b06:	4311      	orrs	r1, r2
 8025b08:	687a      	ldr	r2, [r7, #4]
 8025b0a:	6812      	ldr	r2, [r2, #0]
 8025b0c:	430b      	orrs	r3, r1
 8025b0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8025b10:	687b      	ldr	r3, [r7, #4]
 8025b12:	681b      	ldr	r3, [r3, #0]
 8025b14:	68db      	ldr	r3, [r3, #12]
 8025b16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8025b1a:	687b      	ldr	r3, [r7, #4]
 8025b1c:	695a      	ldr	r2, [r3, #20]
 8025b1e:	687b      	ldr	r3, [r7, #4]
 8025b20:	699b      	ldr	r3, [r3, #24]
 8025b22:	431a      	orrs	r2, r3
 8025b24:	687b      	ldr	r3, [r7, #4]
 8025b26:	681b      	ldr	r3, [r3, #0]
 8025b28:	430a      	orrs	r2, r1
 8025b2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8025b2c:	687b      	ldr	r3, [r7, #4]
 8025b2e:	681b      	ldr	r3, [r3, #0]
 8025b30:	681a      	ldr	r2, [r3, #0]
 8025b32:	687b      	ldr	r3, [r7, #4]
 8025b34:	681b      	ldr	r3, [r3, #0]
 8025b36:	f042 0201 	orr.w	r2, r2, #1
 8025b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8025b3c:	687b      	ldr	r3, [r7, #4]
 8025b3e:	2200      	movs	r2, #0
 8025b40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8025b42:	687b      	ldr	r3, [r7, #4]
 8025b44:	2220      	movs	r2, #32
 8025b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8025b4a:	687b      	ldr	r3, [r7, #4]
 8025b4c:	2200      	movs	r2, #0
 8025b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8025b50:	687b      	ldr	r3, [r7, #4]
 8025b52:	2200      	movs	r2, #0
 8025b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8025b58:	2300      	movs	r3, #0
}
 8025b5a:	4618      	mov	r0, r3
 8025b5c:	3710      	adds	r7, #16
 8025b5e:	46bd      	mov	sp, r7
 8025b60:	bd80      	pop	{r7, pc}
 8025b62:	bf00      	nop
 8025b64:	000186a0 	.word	0x000186a0
 8025b68:	001e847f 	.word	0x001e847f
 8025b6c:	003d08ff 	.word	0x003d08ff
 8025b70:	431bde83 	.word	0x431bde83
 8025b74:	10624dd3 	.word	0x10624dd3

08025b78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8025b78:	b480      	push	{r7}
 8025b7a:	b083      	sub	sp, #12
 8025b7c:	af00      	add	r7, sp, #0
 8025b7e:	6078      	str	r0, [r7, #4]
 8025b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8025b82:	687b      	ldr	r3, [r7, #4]
 8025b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025b88:	b2db      	uxtb	r3, r3
 8025b8a:	2b20      	cmp	r3, #32
 8025b8c:	d129      	bne.n	8025be2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8025b8e:	687b      	ldr	r3, [r7, #4]
 8025b90:	2224      	movs	r2, #36	; 0x24
 8025b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8025b96:	687b      	ldr	r3, [r7, #4]
 8025b98:	681b      	ldr	r3, [r3, #0]
 8025b9a:	681a      	ldr	r2, [r3, #0]
 8025b9c:	687b      	ldr	r3, [r7, #4]
 8025b9e:	681b      	ldr	r3, [r3, #0]
 8025ba0:	f022 0201 	bic.w	r2, r2, #1
 8025ba4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8025ba6:	687b      	ldr	r3, [r7, #4]
 8025ba8:	681b      	ldr	r3, [r3, #0]
 8025baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025bac:	687b      	ldr	r3, [r7, #4]
 8025bae:	681b      	ldr	r3, [r3, #0]
 8025bb0:	f022 0210 	bic.w	r2, r2, #16
 8025bb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8025bb6:	687b      	ldr	r3, [r7, #4]
 8025bb8:	681b      	ldr	r3, [r3, #0]
 8025bba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8025bbc:	687b      	ldr	r3, [r7, #4]
 8025bbe:	681b      	ldr	r3, [r3, #0]
 8025bc0:	683a      	ldr	r2, [r7, #0]
 8025bc2:	430a      	orrs	r2, r1
 8025bc4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8025bc6:	687b      	ldr	r3, [r7, #4]
 8025bc8:	681b      	ldr	r3, [r3, #0]
 8025bca:	681a      	ldr	r2, [r3, #0]
 8025bcc:	687b      	ldr	r3, [r7, #4]
 8025bce:	681b      	ldr	r3, [r3, #0]
 8025bd0:	f042 0201 	orr.w	r2, r2, #1
 8025bd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8025bd6:	687b      	ldr	r3, [r7, #4]
 8025bd8:	2220      	movs	r2, #32
 8025bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8025bde:	2300      	movs	r3, #0
 8025be0:	e000      	b.n	8025be4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8025be2:	2302      	movs	r3, #2
  }
}
 8025be4:	4618      	mov	r0, r3
 8025be6:	370c      	adds	r7, #12
 8025be8:	46bd      	mov	sp, r7
 8025bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bee:	4770      	bx	lr

08025bf0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8025bf0:	b480      	push	{r7}
 8025bf2:	b085      	sub	sp, #20
 8025bf4:	af00      	add	r7, sp, #0
 8025bf6:	6078      	str	r0, [r7, #4]
 8025bf8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8025bfa:	2300      	movs	r3, #0
 8025bfc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8025bfe:	687b      	ldr	r3, [r7, #4]
 8025c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025c04:	b2db      	uxtb	r3, r3
 8025c06:	2b20      	cmp	r3, #32
 8025c08:	d12a      	bne.n	8025c60 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8025c0a:	687b      	ldr	r3, [r7, #4]
 8025c0c:	2224      	movs	r2, #36	; 0x24
 8025c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8025c12:	687b      	ldr	r3, [r7, #4]
 8025c14:	681b      	ldr	r3, [r3, #0]
 8025c16:	681a      	ldr	r2, [r3, #0]
 8025c18:	687b      	ldr	r3, [r7, #4]
 8025c1a:	681b      	ldr	r3, [r3, #0]
 8025c1c:	f022 0201 	bic.w	r2, r2, #1
 8025c20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8025c22:	687b      	ldr	r3, [r7, #4]
 8025c24:	681b      	ldr	r3, [r3, #0]
 8025c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025c28:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8025c2a:	89fb      	ldrh	r3, [r7, #14]
 8025c2c:	f023 030f 	bic.w	r3, r3, #15
 8025c30:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8025c32:	683b      	ldr	r3, [r7, #0]
 8025c34:	b29a      	uxth	r2, r3
 8025c36:	89fb      	ldrh	r3, [r7, #14]
 8025c38:	4313      	orrs	r3, r2
 8025c3a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8025c3c:	687b      	ldr	r3, [r7, #4]
 8025c3e:	681b      	ldr	r3, [r3, #0]
 8025c40:	89fa      	ldrh	r2, [r7, #14]
 8025c42:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8025c44:	687b      	ldr	r3, [r7, #4]
 8025c46:	681b      	ldr	r3, [r3, #0]
 8025c48:	681a      	ldr	r2, [r3, #0]
 8025c4a:	687b      	ldr	r3, [r7, #4]
 8025c4c:	681b      	ldr	r3, [r3, #0]
 8025c4e:	f042 0201 	orr.w	r2, r2, #1
 8025c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8025c54:	687b      	ldr	r3, [r7, #4]
 8025c56:	2220      	movs	r2, #32
 8025c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8025c5c:	2300      	movs	r3, #0
 8025c5e:	e000      	b.n	8025c62 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8025c60:	2302      	movs	r3, #2
  }
}
 8025c62:	4618      	mov	r0, r3
 8025c64:	3714      	adds	r7, #20
 8025c66:	46bd      	mov	sp, r7
 8025c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c6c:	4770      	bx	lr
	...

08025c70 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8025c70:	b580      	push	{r7, lr}
 8025c72:	b084      	sub	sp, #16
 8025c74:	af00      	add	r7, sp, #0
 8025c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8025c78:	687b      	ldr	r3, [r7, #4]
 8025c7a:	2b00      	cmp	r3, #0
 8025c7c:	d101      	bne.n	8025c82 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8025c7e:	2301      	movs	r3, #1
 8025c80:	e0bf      	b.n	8025e02 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8025c82:	687b      	ldr	r3, [r7, #4]
 8025c84:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8025c88:	b2db      	uxtb	r3, r3
 8025c8a:	2b00      	cmp	r3, #0
 8025c8c:	d106      	bne.n	8025c9c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8025c8e:	687b      	ldr	r3, [r7, #4]
 8025c90:	2200      	movs	r2, #0
 8025c92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8025c96:	6878      	ldr	r0, [r7, #4]
 8025c98:	f7fb f9d6 	bl	8021048 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8025c9c:	687b      	ldr	r3, [r7, #4]
 8025c9e:	2202      	movs	r2, #2
 8025ca0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8025ca4:	687b      	ldr	r3, [r7, #4]
 8025ca6:	681b      	ldr	r3, [r3, #0]
 8025ca8:	699a      	ldr	r2, [r3, #24]
 8025caa:	687b      	ldr	r3, [r7, #4]
 8025cac:	681b      	ldr	r3, [r3, #0]
 8025cae:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8025cb2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8025cb4:	687b      	ldr	r3, [r7, #4]
 8025cb6:	681b      	ldr	r3, [r3, #0]
 8025cb8:	6999      	ldr	r1, [r3, #24]
 8025cba:	687b      	ldr	r3, [r7, #4]
 8025cbc:	685a      	ldr	r2, [r3, #4]
 8025cbe:	687b      	ldr	r3, [r7, #4]
 8025cc0:	689b      	ldr	r3, [r3, #8]
 8025cc2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8025cc4:	687b      	ldr	r3, [r7, #4]
 8025cc6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8025cc8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8025cca:	687b      	ldr	r3, [r7, #4]
 8025ccc:	691b      	ldr	r3, [r3, #16]
 8025cce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8025cd0:	687b      	ldr	r3, [r7, #4]
 8025cd2:	681b      	ldr	r3, [r3, #0]
 8025cd4:	430a      	orrs	r2, r1
 8025cd6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8025cd8:	687b      	ldr	r3, [r7, #4]
 8025cda:	681b      	ldr	r3, [r3, #0]
 8025cdc:	6899      	ldr	r1, [r3, #8]
 8025cde:	687b      	ldr	r3, [r7, #4]
 8025ce0:	681a      	ldr	r2, [r3, #0]
 8025ce2:	4b4a      	ldr	r3, [pc, #296]	; (8025e0c <HAL_LTDC_Init+0x19c>)
 8025ce4:	400b      	ands	r3, r1
 8025ce6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8025ce8:	687b      	ldr	r3, [r7, #4]
 8025cea:	695b      	ldr	r3, [r3, #20]
 8025cec:	041b      	lsls	r3, r3, #16
 8025cee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8025cf0:	687b      	ldr	r3, [r7, #4]
 8025cf2:	681b      	ldr	r3, [r3, #0]
 8025cf4:	6899      	ldr	r1, [r3, #8]
 8025cf6:	687b      	ldr	r3, [r7, #4]
 8025cf8:	699a      	ldr	r2, [r3, #24]
 8025cfa:	68fb      	ldr	r3, [r7, #12]
 8025cfc:	431a      	orrs	r2, r3
 8025cfe:	687b      	ldr	r3, [r7, #4]
 8025d00:	681b      	ldr	r3, [r3, #0]
 8025d02:	430a      	orrs	r2, r1
 8025d04:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8025d06:	687b      	ldr	r3, [r7, #4]
 8025d08:	681b      	ldr	r3, [r3, #0]
 8025d0a:	68d9      	ldr	r1, [r3, #12]
 8025d0c:	687b      	ldr	r3, [r7, #4]
 8025d0e:	681a      	ldr	r2, [r3, #0]
 8025d10:	4b3e      	ldr	r3, [pc, #248]	; (8025e0c <HAL_LTDC_Init+0x19c>)
 8025d12:	400b      	ands	r3, r1
 8025d14:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8025d16:	687b      	ldr	r3, [r7, #4]
 8025d18:	69db      	ldr	r3, [r3, #28]
 8025d1a:	041b      	lsls	r3, r3, #16
 8025d1c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8025d1e:	687b      	ldr	r3, [r7, #4]
 8025d20:	681b      	ldr	r3, [r3, #0]
 8025d22:	68d9      	ldr	r1, [r3, #12]
 8025d24:	687b      	ldr	r3, [r7, #4]
 8025d26:	6a1a      	ldr	r2, [r3, #32]
 8025d28:	68fb      	ldr	r3, [r7, #12]
 8025d2a:	431a      	orrs	r2, r3
 8025d2c:	687b      	ldr	r3, [r7, #4]
 8025d2e:	681b      	ldr	r3, [r3, #0]
 8025d30:	430a      	orrs	r2, r1
 8025d32:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8025d34:	687b      	ldr	r3, [r7, #4]
 8025d36:	681b      	ldr	r3, [r3, #0]
 8025d38:	6919      	ldr	r1, [r3, #16]
 8025d3a:	687b      	ldr	r3, [r7, #4]
 8025d3c:	681a      	ldr	r2, [r3, #0]
 8025d3e:	4b33      	ldr	r3, [pc, #204]	; (8025e0c <HAL_LTDC_Init+0x19c>)
 8025d40:	400b      	ands	r3, r1
 8025d42:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8025d44:	687b      	ldr	r3, [r7, #4]
 8025d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025d48:	041b      	lsls	r3, r3, #16
 8025d4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8025d4c:	687b      	ldr	r3, [r7, #4]
 8025d4e:	681b      	ldr	r3, [r3, #0]
 8025d50:	6919      	ldr	r1, [r3, #16]
 8025d52:	687b      	ldr	r3, [r7, #4]
 8025d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8025d56:	68fb      	ldr	r3, [r7, #12]
 8025d58:	431a      	orrs	r2, r3
 8025d5a:	687b      	ldr	r3, [r7, #4]
 8025d5c:	681b      	ldr	r3, [r3, #0]
 8025d5e:	430a      	orrs	r2, r1
 8025d60:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8025d62:	687b      	ldr	r3, [r7, #4]
 8025d64:	681b      	ldr	r3, [r3, #0]
 8025d66:	6959      	ldr	r1, [r3, #20]
 8025d68:	687b      	ldr	r3, [r7, #4]
 8025d6a:	681a      	ldr	r2, [r3, #0]
 8025d6c:	4b27      	ldr	r3, [pc, #156]	; (8025e0c <HAL_LTDC_Init+0x19c>)
 8025d6e:	400b      	ands	r3, r1
 8025d70:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8025d72:	687b      	ldr	r3, [r7, #4]
 8025d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025d76:	041b      	lsls	r3, r3, #16
 8025d78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8025d7a:	687b      	ldr	r3, [r7, #4]
 8025d7c:	681b      	ldr	r3, [r3, #0]
 8025d7e:	6959      	ldr	r1, [r3, #20]
 8025d80:	687b      	ldr	r3, [r7, #4]
 8025d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8025d84:	68fb      	ldr	r3, [r7, #12]
 8025d86:	431a      	orrs	r2, r3
 8025d88:	687b      	ldr	r3, [r7, #4]
 8025d8a:	681b      	ldr	r3, [r3, #0]
 8025d8c:	430a      	orrs	r2, r1
 8025d8e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8025d90:	687b      	ldr	r3, [r7, #4]
 8025d92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8025d96:	021b      	lsls	r3, r3, #8
 8025d98:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8025d9a:	687b      	ldr	r3, [r7, #4]
 8025d9c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8025da0:	041b      	lsls	r3, r3, #16
 8025da2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8025da4:	687b      	ldr	r3, [r7, #4]
 8025da6:	681b      	ldr	r3, [r3, #0]
 8025da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8025daa:	687b      	ldr	r3, [r7, #4]
 8025dac:	681b      	ldr	r3, [r3, #0]
 8025dae:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8025db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8025db4:	687b      	ldr	r3, [r7, #4]
 8025db6:	681b      	ldr	r3, [r3, #0]
 8025db8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8025dba:	68ba      	ldr	r2, [r7, #8]
 8025dbc:	68fb      	ldr	r3, [r7, #12]
 8025dbe:	4313      	orrs	r3, r2
 8025dc0:	687a      	ldr	r2, [r7, #4]
 8025dc2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8025dc6:	431a      	orrs	r2, r3
 8025dc8:	687b      	ldr	r3, [r7, #4]
 8025dca:	681b      	ldr	r3, [r3, #0]
 8025dcc:	430a      	orrs	r2, r1
 8025dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8025dd0:	687b      	ldr	r3, [r7, #4]
 8025dd2:	681b      	ldr	r3, [r3, #0]
 8025dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8025dd6:	687b      	ldr	r3, [r7, #4]
 8025dd8:	681b      	ldr	r3, [r3, #0]
 8025dda:	f042 0206 	orr.w	r2, r2, #6
 8025dde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8025de0:	687b      	ldr	r3, [r7, #4]
 8025de2:	681b      	ldr	r3, [r3, #0]
 8025de4:	699a      	ldr	r2, [r3, #24]
 8025de6:	687b      	ldr	r3, [r7, #4]
 8025de8:	681b      	ldr	r3, [r3, #0]
 8025dea:	f042 0201 	orr.w	r2, r2, #1
 8025dee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8025df0:	687b      	ldr	r3, [r7, #4]
 8025df2:	2200      	movs	r2, #0
 8025df4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8025df8:	687b      	ldr	r3, [r7, #4]
 8025dfa:	2201      	movs	r2, #1
 8025dfc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8025e00:	2300      	movs	r3, #0
}
 8025e02:	4618      	mov	r0, r3
 8025e04:	3710      	adds	r7, #16
 8025e06:	46bd      	mov	sp, r7
 8025e08:	bd80      	pop	{r7, pc}
 8025e0a:	bf00      	nop
 8025e0c:	f000f800 	.word	0xf000f800

08025e10 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8025e10:	b580      	push	{r7, lr}
 8025e12:	b084      	sub	sp, #16
 8025e14:	af00      	add	r7, sp, #0
 8025e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8025e18:	687b      	ldr	r3, [r7, #4]
 8025e1a:	681b      	ldr	r3, [r3, #0]
 8025e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025e1e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8025e20:	687b      	ldr	r3, [r7, #4]
 8025e22:	681b      	ldr	r3, [r3, #0]
 8025e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025e26:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8025e28:	68fb      	ldr	r3, [r7, #12]
 8025e2a:	f003 0304 	and.w	r3, r3, #4
 8025e2e:	2b00      	cmp	r3, #0
 8025e30:	d023      	beq.n	8025e7a <HAL_LTDC_IRQHandler+0x6a>
 8025e32:	68bb      	ldr	r3, [r7, #8]
 8025e34:	f003 0304 	and.w	r3, r3, #4
 8025e38:	2b00      	cmp	r3, #0
 8025e3a:	d01e      	beq.n	8025e7a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8025e3c:	687b      	ldr	r3, [r7, #4]
 8025e3e:	681b      	ldr	r3, [r3, #0]
 8025e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8025e42:	687b      	ldr	r3, [r7, #4]
 8025e44:	681b      	ldr	r3, [r3, #0]
 8025e46:	f022 0204 	bic.w	r2, r2, #4
 8025e4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8025e4c:	687b      	ldr	r3, [r7, #4]
 8025e4e:	681b      	ldr	r3, [r3, #0]
 8025e50:	2204      	movs	r2, #4
 8025e52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8025e54:	687b      	ldr	r3, [r7, #4]
 8025e56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8025e5a:	f043 0201 	orr.w	r2, r3, #1
 8025e5e:	687b      	ldr	r3, [r7, #4]
 8025e60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8025e64:	687b      	ldr	r3, [r7, #4]
 8025e66:	2204      	movs	r2, #4
 8025e68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8025e6c:	687b      	ldr	r3, [r7, #4]
 8025e6e:	2200      	movs	r2, #0
 8025e70:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8025e74:	6878      	ldr	r0, [r7, #4]
 8025e76:	f000 f86f 	bl	8025f58 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8025e7a:	68fb      	ldr	r3, [r7, #12]
 8025e7c:	f003 0302 	and.w	r3, r3, #2
 8025e80:	2b00      	cmp	r3, #0
 8025e82:	d023      	beq.n	8025ecc <HAL_LTDC_IRQHandler+0xbc>
 8025e84:	68bb      	ldr	r3, [r7, #8]
 8025e86:	f003 0302 	and.w	r3, r3, #2
 8025e8a:	2b00      	cmp	r3, #0
 8025e8c:	d01e      	beq.n	8025ecc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8025e8e:	687b      	ldr	r3, [r7, #4]
 8025e90:	681b      	ldr	r3, [r3, #0]
 8025e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8025e94:	687b      	ldr	r3, [r7, #4]
 8025e96:	681b      	ldr	r3, [r3, #0]
 8025e98:	f022 0202 	bic.w	r2, r2, #2
 8025e9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8025e9e:	687b      	ldr	r3, [r7, #4]
 8025ea0:	681b      	ldr	r3, [r3, #0]
 8025ea2:	2202      	movs	r2, #2
 8025ea4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8025ea6:	687b      	ldr	r3, [r7, #4]
 8025ea8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8025eac:	f043 0202 	orr.w	r2, r3, #2
 8025eb0:	687b      	ldr	r3, [r7, #4]
 8025eb2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8025eb6:	687b      	ldr	r3, [r7, #4]
 8025eb8:	2204      	movs	r2, #4
 8025eba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8025ebe:	687b      	ldr	r3, [r7, #4]
 8025ec0:	2200      	movs	r2, #0
 8025ec2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8025ec6:	6878      	ldr	r0, [r7, #4]
 8025ec8:	f000 f846 	bl	8025f58 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8025ecc:	68fb      	ldr	r3, [r7, #12]
 8025ece:	f003 0301 	and.w	r3, r3, #1
 8025ed2:	2b00      	cmp	r3, #0
 8025ed4:	d01b      	beq.n	8025f0e <HAL_LTDC_IRQHandler+0xfe>
 8025ed6:	68bb      	ldr	r3, [r7, #8]
 8025ed8:	f003 0301 	and.w	r3, r3, #1
 8025edc:	2b00      	cmp	r3, #0
 8025ede:	d016      	beq.n	8025f0e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8025ee0:	687b      	ldr	r3, [r7, #4]
 8025ee2:	681b      	ldr	r3, [r3, #0]
 8025ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8025ee6:	687b      	ldr	r3, [r7, #4]
 8025ee8:	681b      	ldr	r3, [r3, #0]
 8025eea:	f022 0201 	bic.w	r2, r2, #1
 8025eee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8025ef0:	687b      	ldr	r3, [r7, #4]
 8025ef2:	681b      	ldr	r3, [r3, #0]
 8025ef4:	2201      	movs	r2, #1
 8025ef6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8025ef8:	687b      	ldr	r3, [r7, #4]
 8025efa:	2201      	movs	r2, #1
 8025efc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8025f00:	687b      	ldr	r3, [r7, #4]
 8025f02:	2200      	movs	r2, #0
 8025f04:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8025f08:	6878      	ldr	r0, [r7, #4]
 8025f0a:	f000 f82f 	bl	8025f6c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8025f0e:	68fb      	ldr	r3, [r7, #12]
 8025f10:	f003 0308 	and.w	r3, r3, #8
 8025f14:	2b00      	cmp	r3, #0
 8025f16:	d01b      	beq.n	8025f50 <HAL_LTDC_IRQHandler+0x140>
 8025f18:	68bb      	ldr	r3, [r7, #8]
 8025f1a:	f003 0308 	and.w	r3, r3, #8
 8025f1e:	2b00      	cmp	r3, #0
 8025f20:	d016      	beq.n	8025f50 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8025f22:	687b      	ldr	r3, [r7, #4]
 8025f24:	681b      	ldr	r3, [r3, #0]
 8025f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8025f28:	687b      	ldr	r3, [r7, #4]
 8025f2a:	681b      	ldr	r3, [r3, #0]
 8025f2c:	f022 0208 	bic.w	r2, r2, #8
 8025f30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8025f32:	687b      	ldr	r3, [r7, #4]
 8025f34:	681b      	ldr	r3, [r3, #0]
 8025f36:	2208      	movs	r2, #8
 8025f38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8025f3a:	687b      	ldr	r3, [r7, #4]
 8025f3c:	2201      	movs	r2, #1
 8025f3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8025f42:	687b      	ldr	r3, [r7, #4]
 8025f44:	2200      	movs	r2, #0
 8025f46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8025f4a:	6878      	ldr	r0, [r7, #4]
 8025f4c:	f000 f818 	bl	8025f80 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8025f50:	bf00      	nop
 8025f52:	3710      	adds	r7, #16
 8025f54:	46bd      	mov	sp, r7
 8025f56:	bd80      	pop	{r7, pc}

08025f58 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8025f58:	b480      	push	{r7}
 8025f5a:	b083      	sub	sp, #12
 8025f5c:	af00      	add	r7, sp, #0
 8025f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8025f60:	bf00      	nop
 8025f62:	370c      	adds	r7, #12
 8025f64:	46bd      	mov	sp, r7
 8025f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f6a:	4770      	bx	lr

08025f6c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8025f6c:	b480      	push	{r7}
 8025f6e:	b083      	sub	sp, #12
 8025f70:	af00      	add	r7, sp, #0
 8025f72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8025f74:	bf00      	nop
 8025f76:	370c      	adds	r7, #12
 8025f78:	46bd      	mov	sp, r7
 8025f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f7e:	4770      	bx	lr

08025f80 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8025f80:	b480      	push	{r7}
 8025f82:	b083      	sub	sp, #12
 8025f84:	af00      	add	r7, sp, #0
 8025f86:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8025f88:	bf00      	nop
 8025f8a:	370c      	adds	r7, #12
 8025f8c:	46bd      	mov	sp, r7
 8025f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f92:	4770      	bx	lr

08025f94 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8025f94:	b5b0      	push	{r4, r5, r7, lr}
 8025f96:	b084      	sub	sp, #16
 8025f98:	af00      	add	r7, sp, #0
 8025f9a:	60f8      	str	r0, [r7, #12]
 8025f9c:	60b9      	str	r1, [r7, #8]
 8025f9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8025fa0:	68fb      	ldr	r3, [r7, #12]
 8025fa2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8025fa6:	2b01      	cmp	r3, #1
 8025fa8:	d101      	bne.n	8025fae <HAL_LTDC_ConfigLayer+0x1a>
 8025faa:	2302      	movs	r3, #2
 8025fac:	e02c      	b.n	8026008 <HAL_LTDC_ConfigLayer+0x74>
 8025fae:	68fb      	ldr	r3, [r7, #12]
 8025fb0:	2201      	movs	r2, #1
 8025fb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8025fb6:	68fb      	ldr	r3, [r7, #12]
 8025fb8:	2202      	movs	r2, #2
 8025fba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8025fbe:	68fa      	ldr	r2, [r7, #12]
 8025fc0:	687b      	ldr	r3, [r7, #4]
 8025fc2:	2134      	movs	r1, #52	; 0x34
 8025fc4:	fb01 f303 	mul.w	r3, r1, r3
 8025fc8:	4413      	add	r3, r2
 8025fca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8025fce:	68bb      	ldr	r3, [r7, #8]
 8025fd0:	4614      	mov	r4, r2
 8025fd2:	461d      	mov	r5, r3
 8025fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025fe0:	682b      	ldr	r3, [r5, #0]
 8025fe2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8025fe4:	687a      	ldr	r2, [r7, #4]
 8025fe6:	68b9      	ldr	r1, [r7, #8]
 8025fe8:	68f8      	ldr	r0, [r7, #12]
 8025fea:	f000 f8b9 	bl	8026160 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8025fee:	68fb      	ldr	r3, [r7, #12]
 8025ff0:	681b      	ldr	r3, [r3, #0]
 8025ff2:	2201      	movs	r2, #1
 8025ff4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8025ff6:	68fb      	ldr	r3, [r7, #12]
 8025ff8:	2201      	movs	r2, #1
 8025ffa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8025ffe:	68fb      	ldr	r3, [r7, #12]
 8026000:	2200      	movs	r2, #0
 8026002:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026006:	2300      	movs	r3, #0
}
 8026008:	4618      	mov	r0, r3
 802600a:	3710      	adds	r7, #16
 802600c:	46bd      	mov	sp, r7
 802600e:	bdb0      	pop	{r4, r5, r7, pc}

08026010 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8026010:	b480      	push	{r7}
 8026012:	b085      	sub	sp, #20
 8026014:	af00      	add	r7, sp, #0
 8026016:	60f8      	str	r0, [r7, #12]
 8026018:	60b9      	str	r1, [r7, #8]
 802601a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 802601c:	68fb      	ldr	r3, [r7, #12]
 802601e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026022:	2b01      	cmp	r3, #1
 8026024:	d101      	bne.n	802602a <HAL_LTDC_ConfigColorKeying+0x1a>
 8026026:	2302      	movs	r3, #2
 8026028:	e030      	b.n	802608c <HAL_LTDC_ConfigColorKeying+0x7c>
 802602a:	68fb      	ldr	r3, [r7, #12]
 802602c:	2201      	movs	r2, #1
 802602e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026032:	68fb      	ldr	r3, [r7, #12]
 8026034:	2202      	movs	r2, #2
 8026036:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 802603a:	68fb      	ldr	r3, [r7, #12]
 802603c:	681b      	ldr	r3, [r3, #0]
 802603e:	461a      	mov	r2, r3
 8026040:	687b      	ldr	r3, [r7, #4]
 8026042:	01db      	lsls	r3, r3, #7
 8026044:	4413      	add	r3, r2
 8026046:	3384      	adds	r3, #132	; 0x84
 8026048:	68db      	ldr	r3, [r3, #12]
 802604a:	68fa      	ldr	r2, [r7, #12]
 802604c:	6812      	ldr	r2, [r2, #0]
 802604e:	4611      	mov	r1, r2
 8026050:	687a      	ldr	r2, [r7, #4]
 8026052:	01d2      	lsls	r2, r2, #7
 8026054:	440a      	add	r2, r1
 8026056:	3284      	adds	r2, #132	; 0x84
 8026058:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 802605c:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 802605e:	68fb      	ldr	r3, [r7, #12]
 8026060:	681b      	ldr	r3, [r3, #0]
 8026062:	461a      	mov	r2, r3
 8026064:	687b      	ldr	r3, [r7, #4]
 8026066:	01db      	lsls	r3, r3, #7
 8026068:	4413      	add	r3, r2
 802606a:	3384      	adds	r3, #132	; 0x84
 802606c:	461a      	mov	r2, r3
 802606e:	68bb      	ldr	r3, [r7, #8]
 8026070:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026072:	68fb      	ldr	r3, [r7, #12]
 8026074:	681b      	ldr	r3, [r3, #0]
 8026076:	2201      	movs	r2, #1
 8026078:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 802607a:	68fb      	ldr	r3, [r7, #12]
 802607c:	2201      	movs	r2, #1
 802607e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026082:	68fb      	ldr	r3, [r7, #12]
 8026084:	2200      	movs	r2, #0
 8026086:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 802608a:	2300      	movs	r3, #0
}
 802608c:	4618      	mov	r0, r3
 802608e:	3714      	adds	r7, #20
 8026090:	46bd      	mov	sp, r7
 8026092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026096:	4770      	bx	lr

08026098 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8026098:	b480      	push	{r7}
 802609a:	b083      	sub	sp, #12
 802609c:	af00      	add	r7, sp, #0
 802609e:	6078      	str	r0, [r7, #4]
 80260a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80260a2:	687b      	ldr	r3, [r7, #4]
 80260a4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80260a8:	2b01      	cmp	r3, #1
 80260aa:	d101      	bne.n	80260b0 <HAL_LTDC_EnableColorKeying+0x18>
 80260ac:	2302      	movs	r3, #2
 80260ae:	e026      	b.n	80260fe <HAL_LTDC_EnableColorKeying+0x66>
 80260b0:	687b      	ldr	r3, [r7, #4]
 80260b2:	2201      	movs	r2, #1
 80260b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80260b8:	687b      	ldr	r3, [r7, #4]
 80260ba:	2202      	movs	r2, #2
 80260bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80260c0:	687b      	ldr	r3, [r7, #4]
 80260c2:	681b      	ldr	r3, [r3, #0]
 80260c4:	461a      	mov	r2, r3
 80260c6:	683b      	ldr	r3, [r7, #0]
 80260c8:	01db      	lsls	r3, r3, #7
 80260ca:	4413      	add	r3, r2
 80260cc:	3384      	adds	r3, #132	; 0x84
 80260ce:	681b      	ldr	r3, [r3, #0]
 80260d0:	687a      	ldr	r2, [r7, #4]
 80260d2:	6812      	ldr	r2, [r2, #0]
 80260d4:	4611      	mov	r1, r2
 80260d6:	683a      	ldr	r2, [r7, #0]
 80260d8:	01d2      	lsls	r2, r2, #7
 80260da:	440a      	add	r2, r1
 80260dc:	3284      	adds	r2, #132	; 0x84
 80260de:	f043 0302 	orr.w	r3, r3, #2
 80260e2:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80260e4:	687b      	ldr	r3, [r7, #4]
 80260e6:	681b      	ldr	r3, [r3, #0]
 80260e8:	2201      	movs	r2, #1
 80260ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80260ec:	687b      	ldr	r3, [r7, #4]
 80260ee:	2201      	movs	r2, #1
 80260f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80260f4:	687b      	ldr	r3, [r7, #4]
 80260f6:	2200      	movs	r2, #0
 80260f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80260fc:	2300      	movs	r3, #0
}
 80260fe:	4618      	mov	r0, r3
 8026100:	370c      	adds	r7, #12
 8026102:	46bd      	mov	sp, r7
 8026104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026108:	4770      	bx	lr
	...

0802610c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 802610c:	b480      	push	{r7}
 802610e:	b083      	sub	sp, #12
 8026110:	af00      	add	r7, sp, #0
 8026112:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8026114:	687b      	ldr	r3, [r7, #4]
 8026116:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 802611a:	2b01      	cmp	r3, #1
 802611c:	d101      	bne.n	8026122 <HAL_LTDC_EnableDither+0x16>
 802611e:	2302      	movs	r3, #2
 8026120:	e016      	b.n	8026150 <HAL_LTDC_EnableDither+0x44>
 8026122:	687b      	ldr	r3, [r7, #4]
 8026124:	2201      	movs	r2, #1
 8026126:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 802612a:	687b      	ldr	r3, [r7, #4]
 802612c:	2202      	movs	r2, #2
 802612e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8026132:	4b0a      	ldr	r3, [pc, #40]	; (802615c <HAL_LTDC_EnableDither+0x50>)
 8026134:	699b      	ldr	r3, [r3, #24]
 8026136:	4a09      	ldr	r2, [pc, #36]	; (802615c <HAL_LTDC_EnableDither+0x50>)
 8026138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802613c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 802613e:	687b      	ldr	r3, [r7, #4]
 8026140:	2201      	movs	r2, #1
 8026142:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026146:	687b      	ldr	r3, [r7, #4]
 8026148:	2200      	movs	r2, #0
 802614a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 802614e:	2300      	movs	r3, #0
}
 8026150:	4618      	mov	r0, r3
 8026152:	370c      	adds	r7, #12
 8026154:	46bd      	mov	sp, r7
 8026156:	f85d 7b04 	ldr.w	r7, [sp], #4
 802615a:	4770      	bx	lr
 802615c:	40016800 	.word	0x40016800

08026160 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8026160:	b480      	push	{r7}
 8026162:	b089      	sub	sp, #36	; 0x24
 8026164:	af00      	add	r7, sp, #0
 8026166:	60f8      	str	r0, [r7, #12]
 8026168:	60b9      	str	r1, [r7, #8]
 802616a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 802616c:	68bb      	ldr	r3, [r7, #8]
 802616e:	685a      	ldr	r2, [r3, #4]
 8026170:	68fb      	ldr	r3, [r7, #12]
 8026172:	681b      	ldr	r3, [r3, #0]
 8026174:	68db      	ldr	r3, [r3, #12]
 8026176:	0c1b      	lsrs	r3, r3, #16
 8026178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802617c:	4413      	add	r3, r2
 802617e:	041b      	lsls	r3, r3, #16
 8026180:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8026182:	68fb      	ldr	r3, [r7, #12]
 8026184:	681b      	ldr	r3, [r3, #0]
 8026186:	461a      	mov	r2, r3
 8026188:	687b      	ldr	r3, [r7, #4]
 802618a:	01db      	lsls	r3, r3, #7
 802618c:	4413      	add	r3, r2
 802618e:	3384      	adds	r3, #132	; 0x84
 8026190:	685b      	ldr	r3, [r3, #4]
 8026192:	68fa      	ldr	r2, [r7, #12]
 8026194:	6812      	ldr	r2, [r2, #0]
 8026196:	4611      	mov	r1, r2
 8026198:	687a      	ldr	r2, [r7, #4]
 802619a:	01d2      	lsls	r2, r2, #7
 802619c:	440a      	add	r2, r1
 802619e:	3284      	adds	r2, #132	; 0x84
 80261a0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80261a4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80261a6:	68bb      	ldr	r3, [r7, #8]
 80261a8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80261aa:	68fb      	ldr	r3, [r7, #12]
 80261ac:	681b      	ldr	r3, [r3, #0]
 80261ae:	68db      	ldr	r3, [r3, #12]
 80261b0:	0c1b      	lsrs	r3, r3, #16
 80261b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80261b6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80261b8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80261ba:	68fb      	ldr	r3, [r7, #12]
 80261bc:	681b      	ldr	r3, [r3, #0]
 80261be:	4619      	mov	r1, r3
 80261c0:	687b      	ldr	r3, [r7, #4]
 80261c2:	01db      	lsls	r3, r3, #7
 80261c4:	440b      	add	r3, r1
 80261c6:	3384      	adds	r3, #132	; 0x84
 80261c8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80261ca:	69fb      	ldr	r3, [r7, #28]
 80261cc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80261ce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80261d0:	68bb      	ldr	r3, [r7, #8]
 80261d2:	68da      	ldr	r2, [r3, #12]
 80261d4:	68fb      	ldr	r3, [r7, #12]
 80261d6:	681b      	ldr	r3, [r3, #0]
 80261d8:	68db      	ldr	r3, [r3, #12]
 80261da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80261de:	4413      	add	r3, r2
 80261e0:	041b      	lsls	r3, r3, #16
 80261e2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80261e4:	68fb      	ldr	r3, [r7, #12]
 80261e6:	681b      	ldr	r3, [r3, #0]
 80261e8:	461a      	mov	r2, r3
 80261ea:	687b      	ldr	r3, [r7, #4]
 80261ec:	01db      	lsls	r3, r3, #7
 80261ee:	4413      	add	r3, r2
 80261f0:	3384      	adds	r3, #132	; 0x84
 80261f2:	689b      	ldr	r3, [r3, #8]
 80261f4:	68fa      	ldr	r2, [r7, #12]
 80261f6:	6812      	ldr	r2, [r2, #0]
 80261f8:	4611      	mov	r1, r2
 80261fa:	687a      	ldr	r2, [r7, #4]
 80261fc:	01d2      	lsls	r2, r2, #7
 80261fe:	440a      	add	r2, r1
 8026200:	3284      	adds	r2, #132	; 0x84
 8026202:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8026206:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8026208:	68bb      	ldr	r3, [r7, #8]
 802620a:	689a      	ldr	r2, [r3, #8]
 802620c:	68fb      	ldr	r3, [r7, #12]
 802620e:	681b      	ldr	r3, [r3, #0]
 8026210:	68db      	ldr	r3, [r3, #12]
 8026212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026216:	4413      	add	r3, r2
 8026218:	1c5a      	adds	r2, r3, #1
 802621a:	68fb      	ldr	r3, [r7, #12]
 802621c:	681b      	ldr	r3, [r3, #0]
 802621e:	4619      	mov	r1, r3
 8026220:	687b      	ldr	r3, [r7, #4]
 8026222:	01db      	lsls	r3, r3, #7
 8026224:	440b      	add	r3, r1
 8026226:	3384      	adds	r3, #132	; 0x84
 8026228:	4619      	mov	r1, r3
 802622a:	69fb      	ldr	r3, [r7, #28]
 802622c:	4313      	orrs	r3, r2
 802622e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8026230:	68fb      	ldr	r3, [r7, #12]
 8026232:	681b      	ldr	r3, [r3, #0]
 8026234:	461a      	mov	r2, r3
 8026236:	687b      	ldr	r3, [r7, #4]
 8026238:	01db      	lsls	r3, r3, #7
 802623a:	4413      	add	r3, r2
 802623c:	3384      	adds	r3, #132	; 0x84
 802623e:	691b      	ldr	r3, [r3, #16]
 8026240:	68fa      	ldr	r2, [r7, #12]
 8026242:	6812      	ldr	r2, [r2, #0]
 8026244:	4611      	mov	r1, r2
 8026246:	687a      	ldr	r2, [r7, #4]
 8026248:	01d2      	lsls	r2, r2, #7
 802624a:	440a      	add	r2, r1
 802624c:	3284      	adds	r2, #132	; 0x84
 802624e:	f023 0307 	bic.w	r3, r3, #7
 8026252:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8026254:	68fb      	ldr	r3, [r7, #12]
 8026256:	681b      	ldr	r3, [r3, #0]
 8026258:	461a      	mov	r2, r3
 802625a:	687b      	ldr	r3, [r7, #4]
 802625c:	01db      	lsls	r3, r3, #7
 802625e:	4413      	add	r3, r2
 8026260:	3384      	adds	r3, #132	; 0x84
 8026262:	461a      	mov	r2, r3
 8026264:	68bb      	ldr	r3, [r7, #8]
 8026266:	691b      	ldr	r3, [r3, #16]
 8026268:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 802626a:	68bb      	ldr	r3, [r7, #8]
 802626c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8026270:	021b      	lsls	r3, r3, #8
 8026272:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8026274:	68bb      	ldr	r3, [r7, #8]
 8026276:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 802627a:	041b      	lsls	r3, r3, #16
 802627c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 802627e:	68bb      	ldr	r3, [r7, #8]
 8026280:	699b      	ldr	r3, [r3, #24]
 8026282:	061b      	lsls	r3, r3, #24
 8026284:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8026286:	68fb      	ldr	r3, [r7, #12]
 8026288:	681b      	ldr	r3, [r3, #0]
 802628a:	461a      	mov	r2, r3
 802628c:	687b      	ldr	r3, [r7, #4]
 802628e:	01db      	lsls	r3, r3, #7
 8026290:	4413      	add	r3, r2
 8026292:	3384      	adds	r3, #132	; 0x84
 8026294:	699b      	ldr	r3, [r3, #24]
 8026296:	68fb      	ldr	r3, [r7, #12]
 8026298:	681b      	ldr	r3, [r3, #0]
 802629a:	461a      	mov	r2, r3
 802629c:	687b      	ldr	r3, [r7, #4]
 802629e:	01db      	lsls	r3, r3, #7
 80262a0:	4413      	add	r3, r2
 80262a2:	3384      	adds	r3, #132	; 0x84
 80262a4:	461a      	mov	r2, r3
 80262a6:	2300      	movs	r3, #0
 80262a8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80262aa:	68bb      	ldr	r3, [r7, #8]
 80262ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80262b0:	461a      	mov	r2, r3
 80262b2:	69fb      	ldr	r3, [r7, #28]
 80262b4:	431a      	orrs	r2, r3
 80262b6:	69bb      	ldr	r3, [r7, #24]
 80262b8:	431a      	orrs	r2, r3
 80262ba:	68fb      	ldr	r3, [r7, #12]
 80262bc:	681b      	ldr	r3, [r3, #0]
 80262be:	4619      	mov	r1, r3
 80262c0:	687b      	ldr	r3, [r7, #4]
 80262c2:	01db      	lsls	r3, r3, #7
 80262c4:	440b      	add	r3, r1
 80262c6:	3384      	adds	r3, #132	; 0x84
 80262c8:	4619      	mov	r1, r3
 80262ca:	697b      	ldr	r3, [r7, #20]
 80262cc:	4313      	orrs	r3, r2
 80262ce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80262d0:	68fb      	ldr	r3, [r7, #12]
 80262d2:	681b      	ldr	r3, [r3, #0]
 80262d4:	461a      	mov	r2, r3
 80262d6:	687b      	ldr	r3, [r7, #4]
 80262d8:	01db      	lsls	r3, r3, #7
 80262da:	4413      	add	r3, r2
 80262dc:	3384      	adds	r3, #132	; 0x84
 80262de:	695b      	ldr	r3, [r3, #20]
 80262e0:	68fa      	ldr	r2, [r7, #12]
 80262e2:	6812      	ldr	r2, [r2, #0]
 80262e4:	4611      	mov	r1, r2
 80262e6:	687a      	ldr	r2, [r7, #4]
 80262e8:	01d2      	lsls	r2, r2, #7
 80262ea:	440a      	add	r2, r1
 80262ec:	3284      	adds	r2, #132	; 0x84
 80262ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80262f2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80262f4:	68fb      	ldr	r3, [r7, #12]
 80262f6:	681b      	ldr	r3, [r3, #0]
 80262f8:	461a      	mov	r2, r3
 80262fa:	687b      	ldr	r3, [r7, #4]
 80262fc:	01db      	lsls	r3, r3, #7
 80262fe:	4413      	add	r3, r2
 8026300:	3384      	adds	r3, #132	; 0x84
 8026302:	461a      	mov	r2, r3
 8026304:	68bb      	ldr	r3, [r7, #8]
 8026306:	695b      	ldr	r3, [r3, #20]
 8026308:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 802630a:	68fb      	ldr	r3, [r7, #12]
 802630c:	681b      	ldr	r3, [r3, #0]
 802630e:	461a      	mov	r2, r3
 8026310:	687b      	ldr	r3, [r7, #4]
 8026312:	01db      	lsls	r3, r3, #7
 8026314:	4413      	add	r3, r2
 8026316:	3384      	adds	r3, #132	; 0x84
 8026318:	69db      	ldr	r3, [r3, #28]
 802631a:	68fa      	ldr	r2, [r7, #12]
 802631c:	6812      	ldr	r2, [r2, #0]
 802631e:	4611      	mov	r1, r2
 8026320:	687a      	ldr	r2, [r7, #4]
 8026322:	01d2      	lsls	r2, r2, #7
 8026324:	440a      	add	r2, r1
 8026326:	3284      	adds	r2, #132	; 0x84
 8026328:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 802632c:	f023 0307 	bic.w	r3, r3, #7
 8026330:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8026332:	68bb      	ldr	r3, [r7, #8]
 8026334:	69da      	ldr	r2, [r3, #28]
 8026336:	68bb      	ldr	r3, [r7, #8]
 8026338:	6a1b      	ldr	r3, [r3, #32]
 802633a:	68f9      	ldr	r1, [r7, #12]
 802633c:	6809      	ldr	r1, [r1, #0]
 802633e:	4608      	mov	r0, r1
 8026340:	6879      	ldr	r1, [r7, #4]
 8026342:	01c9      	lsls	r1, r1, #7
 8026344:	4401      	add	r1, r0
 8026346:	3184      	adds	r1, #132	; 0x84
 8026348:	4313      	orrs	r3, r2
 802634a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 802634c:	68fb      	ldr	r3, [r7, #12]
 802634e:	681b      	ldr	r3, [r3, #0]
 8026350:	461a      	mov	r2, r3
 8026352:	687b      	ldr	r3, [r7, #4]
 8026354:	01db      	lsls	r3, r3, #7
 8026356:	4413      	add	r3, r2
 8026358:	3384      	adds	r3, #132	; 0x84
 802635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802635c:	68fb      	ldr	r3, [r7, #12]
 802635e:	681b      	ldr	r3, [r3, #0]
 8026360:	461a      	mov	r2, r3
 8026362:	687b      	ldr	r3, [r7, #4]
 8026364:	01db      	lsls	r3, r3, #7
 8026366:	4413      	add	r3, r2
 8026368:	3384      	adds	r3, #132	; 0x84
 802636a:	461a      	mov	r2, r3
 802636c:	2300      	movs	r3, #0
 802636e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8026370:	68fb      	ldr	r3, [r7, #12]
 8026372:	681b      	ldr	r3, [r3, #0]
 8026374:	461a      	mov	r2, r3
 8026376:	687b      	ldr	r3, [r7, #4]
 8026378:	01db      	lsls	r3, r3, #7
 802637a:	4413      	add	r3, r2
 802637c:	3384      	adds	r3, #132	; 0x84
 802637e:	461a      	mov	r2, r3
 8026380:	68bb      	ldr	r3, [r7, #8]
 8026382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026384:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8026386:	68bb      	ldr	r3, [r7, #8]
 8026388:	691b      	ldr	r3, [r3, #16]
 802638a:	2b00      	cmp	r3, #0
 802638c:	d102      	bne.n	8026394 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 802638e:	2304      	movs	r3, #4
 8026390:	61fb      	str	r3, [r7, #28]
 8026392:	e01b      	b.n	80263cc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8026394:	68bb      	ldr	r3, [r7, #8]
 8026396:	691b      	ldr	r3, [r3, #16]
 8026398:	2b01      	cmp	r3, #1
 802639a:	d102      	bne.n	80263a2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 802639c:	2303      	movs	r3, #3
 802639e:	61fb      	str	r3, [r7, #28]
 80263a0:	e014      	b.n	80263cc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80263a2:	68bb      	ldr	r3, [r7, #8]
 80263a4:	691b      	ldr	r3, [r3, #16]
 80263a6:	2b04      	cmp	r3, #4
 80263a8:	d00b      	beq.n	80263c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80263aa:	68bb      	ldr	r3, [r7, #8]
 80263ac:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80263ae:	2b02      	cmp	r3, #2
 80263b0:	d007      	beq.n	80263c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80263b2:	68bb      	ldr	r3, [r7, #8]
 80263b4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80263b6:	2b03      	cmp	r3, #3
 80263b8:	d003      	beq.n	80263c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80263ba:	68bb      	ldr	r3, [r7, #8]
 80263bc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80263be:	2b07      	cmp	r3, #7
 80263c0:	d102      	bne.n	80263c8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80263c2:	2302      	movs	r3, #2
 80263c4:	61fb      	str	r3, [r7, #28]
 80263c6:	e001      	b.n	80263cc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80263c8:	2301      	movs	r3, #1
 80263ca:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80263cc:	68fb      	ldr	r3, [r7, #12]
 80263ce:	681b      	ldr	r3, [r3, #0]
 80263d0:	461a      	mov	r2, r3
 80263d2:	687b      	ldr	r3, [r7, #4]
 80263d4:	01db      	lsls	r3, r3, #7
 80263d6:	4413      	add	r3, r2
 80263d8:	3384      	adds	r3, #132	; 0x84
 80263da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80263dc:	68fa      	ldr	r2, [r7, #12]
 80263de:	6812      	ldr	r2, [r2, #0]
 80263e0:	4611      	mov	r1, r2
 80263e2:	687a      	ldr	r2, [r7, #4]
 80263e4:	01d2      	lsls	r2, r2, #7
 80263e6:	440a      	add	r2, r1
 80263e8:	3284      	adds	r2, #132	; 0x84
 80263ea:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80263ee:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80263f0:	68bb      	ldr	r3, [r7, #8]
 80263f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80263f4:	69fa      	ldr	r2, [r7, #28]
 80263f6:	fb02 f303 	mul.w	r3, r2, r3
 80263fa:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80263fc:	68bb      	ldr	r3, [r7, #8]
 80263fe:	6859      	ldr	r1, [r3, #4]
 8026400:	68bb      	ldr	r3, [r7, #8]
 8026402:	681b      	ldr	r3, [r3, #0]
 8026404:	1acb      	subs	r3, r1, r3
 8026406:	69f9      	ldr	r1, [r7, #28]
 8026408:	fb01 f303 	mul.w	r3, r1, r3
 802640c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 802640e:	68f9      	ldr	r1, [r7, #12]
 8026410:	6809      	ldr	r1, [r1, #0]
 8026412:	4608      	mov	r0, r1
 8026414:	6879      	ldr	r1, [r7, #4]
 8026416:	01c9      	lsls	r1, r1, #7
 8026418:	4401      	add	r1, r0
 802641a:	3184      	adds	r1, #132	; 0x84
 802641c:	4313      	orrs	r3, r2
 802641e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8026420:	68fb      	ldr	r3, [r7, #12]
 8026422:	681b      	ldr	r3, [r3, #0]
 8026424:	461a      	mov	r2, r3
 8026426:	687b      	ldr	r3, [r7, #4]
 8026428:	01db      	lsls	r3, r3, #7
 802642a:	4413      	add	r3, r2
 802642c:	3384      	adds	r3, #132	; 0x84
 802642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026430:	68fa      	ldr	r2, [r7, #12]
 8026432:	6812      	ldr	r2, [r2, #0]
 8026434:	4611      	mov	r1, r2
 8026436:	687a      	ldr	r2, [r7, #4]
 8026438:	01d2      	lsls	r2, r2, #7
 802643a:	440a      	add	r2, r1
 802643c:	3284      	adds	r2, #132	; 0x84
 802643e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8026442:	f023 0307 	bic.w	r3, r3, #7
 8026446:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8026448:	68fb      	ldr	r3, [r7, #12]
 802644a:	681b      	ldr	r3, [r3, #0]
 802644c:	461a      	mov	r2, r3
 802644e:	687b      	ldr	r3, [r7, #4]
 8026450:	01db      	lsls	r3, r3, #7
 8026452:	4413      	add	r3, r2
 8026454:	3384      	adds	r3, #132	; 0x84
 8026456:	461a      	mov	r2, r3
 8026458:	68bb      	ldr	r3, [r7, #8]
 802645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802645c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 802645e:	68fb      	ldr	r3, [r7, #12]
 8026460:	681b      	ldr	r3, [r3, #0]
 8026462:	461a      	mov	r2, r3
 8026464:	687b      	ldr	r3, [r7, #4]
 8026466:	01db      	lsls	r3, r3, #7
 8026468:	4413      	add	r3, r2
 802646a:	3384      	adds	r3, #132	; 0x84
 802646c:	681b      	ldr	r3, [r3, #0]
 802646e:	68fa      	ldr	r2, [r7, #12]
 8026470:	6812      	ldr	r2, [r2, #0]
 8026472:	4611      	mov	r1, r2
 8026474:	687a      	ldr	r2, [r7, #4]
 8026476:	01d2      	lsls	r2, r2, #7
 8026478:	440a      	add	r2, r1
 802647a:	3284      	adds	r2, #132	; 0x84
 802647c:	f043 0301 	orr.w	r3, r3, #1
 8026480:	6013      	str	r3, [r2, #0]
}
 8026482:	bf00      	nop
 8026484:	3724      	adds	r7, #36	; 0x24
 8026486:	46bd      	mov	sp, r7
 8026488:	f85d 7b04 	ldr.w	r7, [sp], #4
 802648c:	4770      	bx	lr
	...

08026490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8026490:	b580      	push	{r7, lr}
 8026492:	b086      	sub	sp, #24
 8026494:	af00      	add	r7, sp, #0
 8026496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8026498:	687b      	ldr	r3, [r7, #4]
 802649a:	2b00      	cmp	r3, #0
 802649c:	d101      	bne.n	80264a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802649e:	2301      	movs	r3, #1
 80264a0:	e267      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80264a2:	687b      	ldr	r3, [r7, #4]
 80264a4:	681b      	ldr	r3, [r3, #0]
 80264a6:	f003 0301 	and.w	r3, r3, #1
 80264aa:	2b00      	cmp	r3, #0
 80264ac:	d075      	beq.n	802659a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80264ae:	4b88      	ldr	r3, [pc, #544]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 80264b0:	689b      	ldr	r3, [r3, #8]
 80264b2:	f003 030c 	and.w	r3, r3, #12
 80264b6:	2b04      	cmp	r3, #4
 80264b8:	d00c      	beq.n	80264d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80264ba:	4b85      	ldr	r3, [pc, #532]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 80264bc:	689b      	ldr	r3, [r3, #8]
 80264be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80264c2:	2b08      	cmp	r3, #8
 80264c4:	d112      	bne.n	80264ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80264c6:	4b82      	ldr	r3, [pc, #520]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 80264c8:	685b      	ldr	r3, [r3, #4]
 80264ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80264ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80264d2:	d10b      	bne.n	80264ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80264d4:	4b7e      	ldr	r3, [pc, #504]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 80264d6:	681b      	ldr	r3, [r3, #0]
 80264d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80264dc:	2b00      	cmp	r3, #0
 80264de:	d05b      	beq.n	8026598 <HAL_RCC_OscConfig+0x108>
 80264e0:	687b      	ldr	r3, [r7, #4]
 80264e2:	685b      	ldr	r3, [r3, #4]
 80264e4:	2b00      	cmp	r3, #0
 80264e6:	d157      	bne.n	8026598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80264e8:	2301      	movs	r3, #1
 80264ea:	e242      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80264ec:	687b      	ldr	r3, [r7, #4]
 80264ee:	685b      	ldr	r3, [r3, #4]
 80264f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80264f4:	d106      	bne.n	8026504 <HAL_RCC_OscConfig+0x74>
 80264f6:	4b76      	ldr	r3, [pc, #472]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 80264f8:	681b      	ldr	r3, [r3, #0]
 80264fa:	4a75      	ldr	r2, [pc, #468]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 80264fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026500:	6013      	str	r3, [r2, #0]
 8026502:	e01d      	b.n	8026540 <HAL_RCC_OscConfig+0xb0>
 8026504:	687b      	ldr	r3, [r7, #4]
 8026506:	685b      	ldr	r3, [r3, #4]
 8026508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802650c:	d10c      	bne.n	8026528 <HAL_RCC_OscConfig+0x98>
 802650e:	4b70      	ldr	r3, [pc, #448]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 8026510:	681b      	ldr	r3, [r3, #0]
 8026512:	4a6f      	ldr	r2, [pc, #444]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 8026514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8026518:	6013      	str	r3, [r2, #0]
 802651a:	4b6d      	ldr	r3, [pc, #436]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 802651c:	681b      	ldr	r3, [r3, #0]
 802651e:	4a6c      	ldr	r2, [pc, #432]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 8026520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026524:	6013      	str	r3, [r2, #0]
 8026526:	e00b      	b.n	8026540 <HAL_RCC_OscConfig+0xb0>
 8026528:	4b69      	ldr	r3, [pc, #420]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 802652a:	681b      	ldr	r3, [r3, #0]
 802652c:	4a68      	ldr	r2, [pc, #416]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 802652e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026532:	6013      	str	r3, [r2, #0]
 8026534:	4b66      	ldr	r3, [pc, #408]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 8026536:	681b      	ldr	r3, [r3, #0]
 8026538:	4a65      	ldr	r2, [pc, #404]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 802653a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802653e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8026540:	687b      	ldr	r3, [r7, #4]
 8026542:	685b      	ldr	r3, [r3, #4]
 8026544:	2b00      	cmp	r3, #0
 8026546:	d013      	beq.n	8026570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026548:	f7fc fc56 	bl	8022df8 <HAL_GetTick>
 802654c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802654e:	e008      	b.n	8026562 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026550:	f7fc fc52 	bl	8022df8 <HAL_GetTick>
 8026554:	4602      	mov	r2, r0
 8026556:	693b      	ldr	r3, [r7, #16]
 8026558:	1ad3      	subs	r3, r2, r3
 802655a:	2b64      	cmp	r3, #100	; 0x64
 802655c:	d901      	bls.n	8026562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802655e:	2303      	movs	r3, #3
 8026560:	e207      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026562:	4b5b      	ldr	r3, [pc, #364]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 8026564:	681b      	ldr	r3, [r3, #0]
 8026566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802656a:	2b00      	cmp	r3, #0
 802656c:	d0f0      	beq.n	8026550 <HAL_RCC_OscConfig+0xc0>
 802656e:	e014      	b.n	802659a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026570:	f7fc fc42 	bl	8022df8 <HAL_GetTick>
 8026574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026576:	e008      	b.n	802658a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026578:	f7fc fc3e 	bl	8022df8 <HAL_GetTick>
 802657c:	4602      	mov	r2, r0
 802657e:	693b      	ldr	r3, [r7, #16]
 8026580:	1ad3      	subs	r3, r2, r3
 8026582:	2b64      	cmp	r3, #100	; 0x64
 8026584:	d901      	bls.n	802658a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8026586:	2303      	movs	r3, #3
 8026588:	e1f3      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802658a:	4b51      	ldr	r3, [pc, #324]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 802658c:	681b      	ldr	r3, [r3, #0]
 802658e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026592:	2b00      	cmp	r3, #0
 8026594:	d1f0      	bne.n	8026578 <HAL_RCC_OscConfig+0xe8>
 8026596:	e000      	b.n	802659a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802659a:	687b      	ldr	r3, [r7, #4]
 802659c:	681b      	ldr	r3, [r3, #0]
 802659e:	f003 0302 	and.w	r3, r3, #2
 80265a2:	2b00      	cmp	r3, #0
 80265a4:	d063      	beq.n	802666e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80265a6:	4b4a      	ldr	r3, [pc, #296]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 80265a8:	689b      	ldr	r3, [r3, #8]
 80265aa:	f003 030c 	and.w	r3, r3, #12
 80265ae:	2b00      	cmp	r3, #0
 80265b0:	d00b      	beq.n	80265ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80265b2:	4b47      	ldr	r3, [pc, #284]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 80265b4:	689b      	ldr	r3, [r3, #8]
 80265b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80265ba:	2b08      	cmp	r3, #8
 80265bc:	d11c      	bne.n	80265f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80265be:	4b44      	ldr	r3, [pc, #272]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 80265c0:	685b      	ldr	r3, [r3, #4]
 80265c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80265c6:	2b00      	cmp	r3, #0
 80265c8:	d116      	bne.n	80265f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80265ca:	4b41      	ldr	r3, [pc, #260]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 80265cc:	681b      	ldr	r3, [r3, #0]
 80265ce:	f003 0302 	and.w	r3, r3, #2
 80265d2:	2b00      	cmp	r3, #0
 80265d4:	d005      	beq.n	80265e2 <HAL_RCC_OscConfig+0x152>
 80265d6:	687b      	ldr	r3, [r7, #4]
 80265d8:	68db      	ldr	r3, [r3, #12]
 80265da:	2b01      	cmp	r3, #1
 80265dc:	d001      	beq.n	80265e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80265de:	2301      	movs	r3, #1
 80265e0:	e1c7      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80265e2:	4b3b      	ldr	r3, [pc, #236]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 80265e4:	681b      	ldr	r3, [r3, #0]
 80265e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80265ea:	687b      	ldr	r3, [r7, #4]
 80265ec:	691b      	ldr	r3, [r3, #16]
 80265ee:	00db      	lsls	r3, r3, #3
 80265f0:	4937      	ldr	r1, [pc, #220]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 80265f2:	4313      	orrs	r3, r2
 80265f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80265f6:	e03a      	b.n	802666e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80265f8:	687b      	ldr	r3, [r7, #4]
 80265fa:	68db      	ldr	r3, [r3, #12]
 80265fc:	2b00      	cmp	r3, #0
 80265fe:	d020      	beq.n	8026642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8026600:	4b34      	ldr	r3, [pc, #208]	; (80266d4 <HAL_RCC_OscConfig+0x244>)
 8026602:	2201      	movs	r2, #1
 8026604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026606:	f7fc fbf7 	bl	8022df8 <HAL_GetTick>
 802660a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802660c:	e008      	b.n	8026620 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802660e:	f7fc fbf3 	bl	8022df8 <HAL_GetTick>
 8026612:	4602      	mov	r2, r0
 8026614:	693b      	ldr	r3, [r7, #16]
 8026616:	1ad3      	subs	r3, r2, r3
 8026618:	2b02      	cmp	r3, #2
 802661a:	d901      	bls.n	8026620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 802661c:	2303      	movs	r3, #3
 802661e:	e1a8      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026620:	4b2b      	ldr	r3, [pc, #172]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 8026622:	681b      	ldr	r3, [r3, #0]
 8026624:	f003 0302 	and.w	r3, r3, #2
 8026628:	2b00      	cmp	r3, #0
 802662a:	d0f0      	beq.n	802660e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802662c:	4b28      	ldr	r3, [pc, #160]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 802662e:	681b      	ldr	r3, [r3, #0]
 8026630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026634:	687b      	ldr	r3, [r7, #4]
 8026636:	691b      	ldr	r3, [r3, #16]
 8026638:	00db      	lsls	r3, r3, #3
 802663a:	4925      	ldr	r1, [pc, #148]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 802663c:	4313      	orrs	r3, r2
 802663e:	600b      	str	r3, [r1, #0]
 8026640:	e015      	b.n	802666e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8026642:	4b24      	ldr	r3, [pc, #144]	; (80266d4 <HAL_RCC_OscConfig+0x244>)
 8026644:	2200      	movs	r2, #0
 8026646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026648:	f7fc fbd6 	bl	8022df8 <HAL_GetTick>
 802664c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802664e:	e008      	b.n	8026662 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026650:	f7fc fbd2 	bl	8022df8 <HAL_GetTick>
 8026654:	4602      	mov	r2, r0
 8026656:	693b      	ldr	r3, [r7, #16]
 8026658:	1ad3      	subs	r3, r2, r3
 802665a:	2b02      	cmp	r3, #2
 802665c:	d901      	bls.n	8026662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802665e:	2303      	movs	r3, #3
 8026660:	e187      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026662:	4b1b      	ldr	r3, [pc, #108]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 8026664:	681b      	ldr	r3, [r3, #0]
 8026666:	f003 0302 	and.w	r3, r3, #2
 802666a:	2b00      	cmp	r3, #0
 802666c:	d1f0      	bne.n	8026650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802666e:	687b      	ldr	r3, [r7, #4]
 8026670:	681b      	ldr	r3, [r3, #0]
 8026672:	f003 0308 	and.w	r3, r3, #8
 8026676:	2b00      	cmp	r3, #0
 8026678:	d036      	beq.n	80266e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802667a:	687b      	ldr	r3, [r7, #4]
 802667c:	695b      	ldr	r3, [r3, #20]
 802667e:	2b00      	cmp	r3, #0
 8026680:	d016      	beq.n	80266b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8026682:	4b15      	ldr	r3, [pc, #84]	; (80266d8 <HAL_RCC_OscConfig+0x248>)
 8026684:	2201      	movs	r2, #1
 8026686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026688:	f7fc fbb6 	bl	8022df8 <HAL_GetTick>
 802668c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802668e:	e008      	b.n	80266a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026690:	f7fc fbb2 	bl	8022df8 <HAL_GetTick>
 8026694:	4602      	mov	r2, r0
 8026696:	693b      	ldr	r3, [r7, #16]
 8026698:	1ad3      	subs	r3, r2, r3
 802669a:	2b02      	cmp	r3, #2
 802669c:	d901      	bls.n	80266a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802669e:	2303      	movs	r3, #3
 80266a0:	e167      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80266a2:	4b0b      	ldr	r3, [pc, #44]	; (80266d0 <HAL_RCC_OscConfig+0x240>)
 80266a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80266a6:	f003 0302 	and.w	r3, r3, #2
 80266aa:	2b00      	cmp	r3, #0
 80266ac:	d0f0      	beq.n	8026690 <HAL_RCC_OscConfig+0x200>
 80266ae:	e01b      	b.n	80266e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80266b0:	4b09      	ldr	r3, [pc, #36]	; (80266d8 <HAL_RCC_OscConfig+0x248>)
 80266b2:	2200      	movs	r2, #0
 80266b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80266b6:	f7fc fb9f 	bl	8022df8 <HAL_GetTick>
 80266ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80266bc:	e00e      	b.n	80266dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80266be:	f7fc fb9b 	bl	8022df8 <HAL_GetTick>
 80266c2:	4602      	mov	r2, r0
 80266c4:	693b      	ldr	r3, [r7, #16]
 80266c6:	1ad3      	subs	r3, r2, r3
 80266c8:	2b02      	cmp	r3, #2
 80266ca:	d907      	bls.n	80266dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80266cc:	2303      	movs	r3, #3
 80266ce:	e150      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
 80266d0:	40023800 	.word	0x40023800
 80266d4:	42470000 	.word	0x42470000
 80266d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80266dc:	4b88      	ldr	r3, [pc, #544]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 80266de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80266e0:	f003 0302 	and.w	r3, r3, #2
 80266e4:	2b00      	cmp	r3, #0
 80266e6:	d1ea      	bne.n	80266be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80266e8:	687b      	ldr	r3, [r7, #4]
 80266ea:	681b      	ldr	r3, [r3, #0]
 80266ec:	f003 0304 	and.w	r3, r3, #4
 80266f0:	2b00      	cmp	r3, #0
 80266f2:	f000 8097 	beq.w	8026824 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80266f6:	2300      	movs	r3, #0
 80266f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80266fa:	4b81      	ldr	r3, [pc, #516]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 80266fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80266fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026702:	2b00      	cmp	r3, #0
 8026704:	d10f      	bne.n	8026726 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8026706:	2300      	movs	r3, #0
 8026708:	60bb      	str	r3, [r7, #8]
 802670a:	4b7d      	ldr	r3, [pc, #500]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 802670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802670e:	4a7c      	ldr	r2, [pc, #496]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 8026710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8026714:	6413      	str	r3, [r2, #64]	; 0x40
 8026716:	4b7a      	ldr	r3, [pc, #488]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 8026718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802671a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802671e:	60bb      	str	r3, [r7, #8]
 8026720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8026722:	2301      	movs	r3, #1
 8026724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026726:	4b77      	ldr	r3, [pc, #476]	; (8026904 <HAL_RCC_OscConfig+0x474>)
 8026728:	681b      	ldr	r3, [r3, #0]
 802672a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802672e:	2b00      	cmp	r3, #0
 8026730:	d118      	bne.n	8026764 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8026732:	4b74      	ldr	r3, [pc, #464]	; (8026904 <HAL_RCC_OscConfig+0x474>)
 8026734:	681b      	ldr	r3, [r3, #0]
 8026736:	4a73      	ldr	r2, [pc, #460]	; (8026904 <HAL_RCC_OscConfig+0x474>)
 8026738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802673c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802673e:	f7fc fb5b 	bl	8022df8 <HAL_GetTick>
 8026742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026744:	e008      	b.n	8026758 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8026746:	f7fc fb57 	bl	8022df8 <HAL_GetTick>
 802674a:	4602      	mov	r2, r0
 802674c:	693b      	ldr	r3, [r7, #16]
 802674e:	1ad3      	subs	r3, r2, r3
 8026750:	2b02      	cmp	r3, #2
 8026752:	d901      	bls.n	8026758 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8026754:	2303      	movs	r3, #3
 8026756:	e10c      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026758:	4b6a      	ldr	r3, [pc, #424]	; (8026904 <HAL_RCC_OscConfig+0x474>)
 802675a:	681b      	ldr	r3, [r3, #0]
 802675c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026760:	2b00      	cmp	r3, #0
 8026762:	d0f0      	beq.n	8026746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8026764:	687b      	ldr	r3, [r7, #4]
 8026766:	689b      	ldr	r3, [r3, #8]
 8026768:	2b01      	cmp	r3, #1
 802676a:	d106      	bne.n	802677a <HAL_RCC_OscConfig+0x2ea>
 802676c:	4b64      	ldr	r3, [pc, #400]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 802676e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026770:	4a63      	ldr	r2, [pc, #396]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 8026772:	f043 0301 	orr.w	r3, r3, #1
 8026776:	6713      	str	r3, [r2, #112]	; 0x70
 8026778:	e01c      	b.n	80267b4 <HAL_RCC_OscConfig+0x324>
 802677a:	687b      	ldr	r3, [r7, #4]
 802677c:	689b      	ldr	r3, [r3, #8]
 802677e:	2b05      	cmp	r3, #5
 8026780:	d10c      	bne.n	802679c <HAL_RCC_OscConfig+0x30c>
 8026782:	4b5f      	ldr	r3, [pc, #380]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 8026784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026786:	4a5e      	ldr	r2, [pc, #376]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 8026788:	f043 0304 	orr.w	r3, r3, #4
 802678c:	6713      	str	r3, [r2, #112]	; 0x70
 802678e:	4b5c      	ldr	r3, [pc, #368]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 8026790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026792:	4a5b      	ldr	r2, [pc, #364]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 8026794:	f043 0301 	orr.w	r3, r3, #1
 8026798:	6713      	str	r3, [r2, #112]	; 0x70
 802679a:	e00b      	b.n	80267b4 <HAL_RCC_OscConfig+0x324>
 802679c:	4b58      	ldr	r3, [pc, #352]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 802679e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80267a0:	4a57      	ldr	r2, [pc, #348]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 80267a2:	f023 0301 	bic.w	r3, r3, #1
 80267a6:	6713      	str	r3, [r2, #112]	; 0x70
 80267a8:	4b55      	ldr	r3, [pc, #340]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 80267aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80267ac:	4a54      	ldr	r2, [pc, #336]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 80267ae:	f023 0304 	bic.w	r3, r3, #4
 80267b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80267b4:	687b      	ldr	r3, [r7, #4]
 80267b6:	689b      	ldr	r3, [r3, #8]
 80267b8:	2b00      	cmp	r3, #0
 80267ba:	d015      	beq.n	80267e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80267bc:	f7fc fb1c 	bl	8022df8 <HAL_GetTick>
 80267c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80267c2:	e00a      	b.n	80267da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80267c4:	f7fc fb18 	bl	8022df8 <HAL_GetTick>
 80267c8:	4602      	mov	r2, r0
 80267ca:	693b      	ldr	r3, [r7, #16]
 80267cc:	1ad3      	subs	r3, r2, r3
 80267ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80267d2:	4293      	cmp	r3, r2
 80267d4:	d901      	bls.n	80267da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80267d6:	2303      	movs	r3, #3
 80267d8:	e0cb      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80267da:	4b49      	ldr	r3, [pc, #292]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 80267dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80267de:	f003 0302 	and.w	r3, r3, #2
 80267e2:	2b00      	cmp	r3, #0
 80267e4:	d0ee      	beq.n	80267c4 <HAL_RCC_OscConfig+0x334>
 80267e6:	e014      	b.n	8026812 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80267e8:	f7fc fb06 	bl	8022df8 <HAL_GetTick>
 80267ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80267ee:	e00a      	b.n	8026806 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80267f0:	f7fc fb02 	bl	8022df8 <HAL_GetTick>
 80267f4:	4602      	mov	r2, r0
 80267f6:	693b      	ldr	r3, [r7, #16]
 80267f8:	1ad3      	subs	r3, r2, r3
 80267fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80267fe:	4293      	cmp	r3, r2
 8026800:	d901      	bls.n	8026806 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8026802:	2303      	movs	r3, #3
 8026804:	e0b5      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8026806:	4b3e      	ldr	r3, [pc, #248]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 8026808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802680a:	f003 0302 	and.w	r3, r3, #2
 802680e:	2b00      	cmp	r3, #0
 8026810:	d1ee      	bne.n	80267f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8026812:	7dfb      	ldrb	r3, [r7, #23]
 8026814:	2b01      	cmp	r3, #1
 8026816:	d105      	bne.n	8026824 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8026818:	4b39      	ldr	r3, [pc, #228]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 802681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802681c:	4a38      	ldr	r2, [pc, #224]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 802681e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8026822:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8026824:	687b      	ldr	r3, [r7, #4]
 8026826:	699b      	ldr	r3, [r3, #24]
 8026828:	2b00      	cmp	r3, #0
 802682a:	f000 80a1 	beq.w	8026970 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802682e:	4b34      	ldr	r3, [pc, #208]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 8026830:	689b      	ldr	r3, [r3, #8]
 8026832:	f003 030c 	and.w	r3, r3, #12
 8026836:	2b08      	cmp	r3, #8
 8026838:	d05c      	beq.n	80268f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802683a:	687b      	ldr	r3, [r7, #4]
 802683c:	699b      	ldr	r3, [r3, #24]
 802683e:	2b02      	cmp	r3, #2
 8026840:	d141      	bne.n	80268c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026842:	4b31      	ldr	r3, [pc, #196]	; (8026908 <HAL_RCC_OscConfig+0x478>)
 8026844:	2200      	movs	r2, #0
 8026846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026848:	f7fc fad6 	bl	8022df8 <HAL_GetTick>
 802684c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802684e:	e008      	b.n	8026862 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026850:	f7fc fad2 	bl	8022df8 <HAL_GetTick>
 8026854:	4602      	mov	r2, r0
 8026856:	693b      	ldr	r3, [r7, #16]
 8026858:	1ad3      	subs	r3, r2, r3
 802685a:	2b02      	cmp	r3, #2
 802685c:	d901      	bls.n	8026862 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 802685e:	2303      	movs	r3, #3
 8026860:	e087      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026862:	4b27      	ldr	r3, [pc, #156]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 8026864:	681b      	ldr	r3, [r3, #0]
 8026866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802686a:	2b00      	cmp	r3, #0
 802686c:	d1f0      	bne.n	8026850 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802686e:	687b      	ldr	r3, [r7, #4]
 8026870:	69da      	ldr	r2, [r3, #28]
 8026872:	687b      	ldr	r3, [r7, #4]
 8026874:	6a1b      	ldr	r3, [r3, #32]
 8026876:	431a      	orrs	r2, r3
 8026878:	687b      	ldr	r3, [r7, #4]
 802687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802687c:	019b      	lsls	r3, r3, #6
 802687e:	431a      	orrs	r2, r3
 8026880:	687b      	ldr	r3, [r7, #4]
 8026882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026884:	085b      	lsrs	r3, r3, #1
 8026886:	3b01      	subs	r3, #1
 8026888:	041b      	lsls	r3, r3, #16
 802688a:	431a      	orrs	r2, r3
 802688c:	687b      	ldr	r3, [r7, #4]
 802688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026890:	061b      	lsls	r3, r3, #24
 8026892:	491b      	ldr	r1, [pc, #108]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 8026894:	4313      	orrs	r3, r2
 8026896:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8026898:	4b1b      	ldr	r3, [pc, #108]	; (8026908 <HAL_RCC_OscConfig+0x478>)
 802689a:	2201      	movs	r2, #1
 802689c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802689e:	f7fc faab 	bl	8022df8 <HAL_GetTick>
 80268a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80268a4:	e008      	b.n	80268b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80268a6:	f7fc faa7 	bl	8022df8 <HAL_GetTick>
 80268aa:	4602      	mov	r2, r0
 80268ac:	693b      	ldr	r3, [r7, #16]
 80268ae:	1ad3      	subs	r3, r2, r3
 80268b0:	2b02      	cmp	r3, #2
 80268b2:	d901      	bls.n	80268b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80268b4:	2303      	movs	r3, #3
 80268b6:	e05c      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80268b8:	4b11      	ldr	r3, [pc, #68]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 80268ba:	681b      	ldr	r3, [r3, #0]
 80268bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80268c0:	2b00      	cmp	r3, #0
 80268c2:	d0f0      	beq.n	80268a6 <HAL_RCC_OscConfig+0x416>
 80268c4:	e054      	b.n	8026970 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80268c6:	4b10      	ldr	r3, [pc, #64]	; (8026908 <HAL_RCC_OscConfig+0x478>)
 80268c8:	2200      	movs	r2, #0
 80268ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80268cc:	f7fc fa94 	bl	8022df8 <HAL_GetTick>
 80268d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80268d2:	e008      	b.n	80268e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80268d4:	f7fc fa90 	bl	8022df8 <HAL_GetTick>
 80268d8:	4602      	mov	r2, r0
 80268da:	693b      	ldr	r3, [r7, #16]
 80268dc:	1ad3      	subs	r3, r2, r3
 80268de:	2b02      	cmp	r3, #2
 80268e0:	d901      	bls.n	80268e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80268e2:	2303      	movs	r3, #3
 80268e4:	e045      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80268e6:	4b06      	ldr	r3, [pc, #24]	; (8026900 <HAL_RCC_OscConfig+0x470>)
 80268e8:	681b      	ldr	r3, [r3, #0]
 80268ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80268ee:	2b00      	cmp	r3, #0
 80268f0:	d1f0      	bne.n	80268d4 <HAL_RCC_OscConfig+0x444>
 80268f2:	e03d      	b.n	8026970 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80268f4:	687b      	ldr	r3, [r7, #4]
 80268f6:	699b      	ldr	r3, [r3, #24]
 80268f8:	2b01      	cmp	r3, #1
 80268fa:	d107      	bne.n	802690c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80268fc:	2301      	movs	r3, #1
 80268fe:	e038      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
 8026900:	40023800 	.word	0x40023800
 8026904:	40007000 	.word	0x40007000
 8026908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 802690c:	4b1b      	ldr	r3, [pc, #108]	; (802697c <HAL_RCC_OscConfig+0x4ec>)
 802690e:	685b      	ldr	r3, [r3, #4]
 8026910:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8026912:	687b      	ldr	r3, [r7, #4]
 8026914:	699b      	ldr	r3, [r3, #24]
 8026916:	2b01      	cmp	r3, #1
 8026918:	d028      	beq.n	802696c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802691a:	68fb      	ldr	r3, [r7, #12]
 802691c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8026920:	687b      	ldr	r3, [r7, #4]
 8026922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8026924:	429a      	cmp	r2, r3
 8026926:	d121      	bne.n	802696c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8026928:	68fb      	ldr	r3, [r7, #12]
 802692a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 802692e:	687b      	ldr	r3, [r7, #4]
 8026930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8026932:	429a      	cmp	r2, r3
 8026934:	d11a      	bne.n	802696c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8026936:	68fa      	ldr	r2, [r7, #12]
 8026938:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 802693c:	4013      	ands	r3, r2
 802693e:	687a      	ldr	r2, [r7, #4]
 8026940:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8026942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8026944:	4293      	cmp	r3, r2
 8026946:	d111      	bne.n	802696c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8026948:	68fb      	ldr	r3, [r7, #12]
 802694a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 802694e:	687b      	ldr	r3, [r7, #4]
 8026950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026952:	085b      	lsrs	r3, r3, #1
 8026954:	3b01      	subs	r3, #1
 8026956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8026958:	429a      	cmp	r2, r3
 802695a:	d107      	bne.n	802696c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 802695c:	68fb      	ldr	r3, [r7, #12]
 802695e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8026962:	687b      	ldr	r3, [r7, #4]
 8026964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8026968:	429a      	cmp	r2, r3
 802696a:	d001      	beq.n	8026970 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 802696c:	2301      	movs	r3, #1
 802696e:	e000      	b.n	8026972 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8026970:	2300      	movs	r3, #0
}
 8026972:	4618      	mov	r0, r3
 8026974:	3718      	adds	r7, #24
 8026976:	46bd      	mov	sp, r7
 8026978:	bd80      	pop	{r7, pc}
 802697a:	bf00      	nop
 802697c:	40023800 	.word	0x40023800

08026980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8026980:	b580      	push	{r7, lr}
 8026982:	b084      	sub	sp, #16
 8026984:	af00      	add	r7, sp, #0
 8026986:	6078      	str	r0, [r7, #4]
 8026988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802698a:	687b      	ldr	r3, [r7, #4]
 802698c:	2b00      	cmp	r3, #0
 802698e:	d101      	bne.n	8026994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8026990:	2301      	movs	r3, #1
 8026992:	e0cc      	b.n	8026b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8026994:	4b68      	ldr	r3, [pc, #416]	; (8026b38 <HAL_RCC_ClockConfig+0x1b8>)
 8026996:	681b      	ldr	r3, [r3, #0]
 8026998:	f003 030f 	and.w	r3, r3, #15
 802699c:	683a      	ldr	r2, [r7, #0]
 802699e:	429a      	cmp	r2, r3
 80269a0:	d90c      	bls.n	80269bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80269a2:	4b65      	ldr	r3, [pc, #404]	; (8026b38 <HAL_RCC_ClockConfig+0x1b8>)
 80269a4:	683a      	ldr	r2, [r7, #0]
 80269a6:	b2d2      	uxtb	r2, r2
 80269a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80269aa:	4b63      	ldr	r3, [pc, #396]	; (8026b38 <HAL_RCC_ClockConfig+0x1b8>)
 80269ac:	681b      	ldr	r3, [r3, #0]
 80269ae:	f003 030f 	and.w	r3, r3, #15
 80269b2:	683a      	ldr	r2, [r7, #0]
 80269b4:	429a      	cmp	r2, r3
 80269b6:	d001      	beq.n	80269bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80269b8:	2301      	movs	r3, #1
 80269ba:	e0b8      	b.n	8026b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80269bc:	687b      	ldr	r3, [r7, #4]
 80269be:	681b      	ldr	r3, [r3, #0]
 80269c0:	f003 0302 	and.w	r3, r3, #2
 80269c4:	2b00      	cmp	r3, #0
 80269c6:	d020      	beq.n	8026a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80269c8:	687b      	ldr	r3, [r7, #4]
 80269ca:	681b      	ldr	r3, [r3, #0]
 80269cc:	f003 0304 	and.w	r3, r3, #4
 80269d0:	2b00      	cmp	r3, #0
 80269d2:	d005      	beq.n	80269e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80269d4:	4b59      	ldr	r3, [pc, #356]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 80269d6:	689b      	ldr	r3, [r3, #8]
 80269d8:	4a58      	ldr	r2, [pc, #352]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 80269da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80269de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80269e0:	687b      	ldr	r3, [r7, #4]
 80269e2:	681b      	ldr	r3, [r3, #0]
 80269e4:	f003 0308 	and.w	r3, r3, #8
 80269e8:	2b00      	cmp	r3, #0
 80269ea:	d005      	beq.n	80269f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80269ec:	4b53      	ldr	r3, [pc, #332]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 80269ee:	689b      	ldr	r3, [r3, #8]
 80269f0:	4a52      	ldr	r2, [pc, #328]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 80269f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80269f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80269f8:	4b50      	ldr	r3, [pc, #320]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 80269fa:	689b      	ldr	r3, [r3, #8]
 80269fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8026a00:	687b      	ldr	r3, [r7, #4]
 8026a02:	689b      	ldr	r3, [r3, #8]
 8026a04:	494d      	ldr	r1, [pc, #308]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 8026a06:	4313      	orrs	r3, r2
 8026a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8026a0a:	687b      	ldr	r3, [r7, #4]
 8026a0c:	681b      	ldr	r3, [r3, #0]
 8026a0e:	f003 0301 	and.w	r3, r3, #1
 8026a12:	2b00      	cmp	r3, #0
 8026a14:	d044      	beq.n	8026aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8026a16:	687b      	ldr	r3, [r7, #4]
 8026a18:	685b      	ldr	r3, [r3, #4]
 8026a1a:	2b01      	cmp	r3, #1
 8026a1c:	d107      	bne.n	8026a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026a1e:	4b47      	ldr	r3, [pc, #284]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 8026a20:	681b      	ldr	r3, [r3, #0]
 8026a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026a26:	2b00      	cmp	r3, #0
 8026a28:	d119      	bne.n	8026a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8026a2a:	2301      	movs	r3, #1
 8026a2c:	e07f      	b.n	8026b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8026a2e:	687b      	ldr	r3, [r7, #4]
 8026a30:	685b      	ldr	r3, [r3, #4]
 8026a32:	2b02      	cmp	r3, #2
 8026a34:	d003      	beq.n	8026a3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8026a36:	687b      	ldr	r3, [r7, #4]
 8026a38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8026a3a:	2b03      	cmp	r3, #3
 8026a3c:	d107      	bne.n	8026a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026a3e:	4b3f      	ldr	r3, [pc, #252]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 8026a40:	681b      	ldr	r3, [r3, #0]
 8026a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026a46:	2b00      	cmp	r3, #0
 8026a48:	d109      	bne.n	8026a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8026a4a:	2301      	movs	r3, #1
 8026a4c:	e06f      	b.n	8026b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026a4e:	4b3b      	ldr	r3, [pc, #236]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 8026a50:	681b      	ldr	r3, [r3, #0]
 8026a52:	f003 0302 	and.w	r3, r3, #2
 8026a56:	2b00      	cmp	r3, #0
 8026a58:	d101      	bne.n	8026a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8026a5a:	2301      	movs	r3, #1
 8026a5c:	e067      	b.n	8026b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8026a5e:	4b37      	ldr	r3, [pc, #220]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 8026a60:	689b      	ldr	r3, [r3, #8]
 8026a62:	f023 0203 	bic.w	r2, r3, #3
 8026a66:	687b      	ldr	r3, [r7, #4]
 8026a68:	685b      	ldr	r3, [r3, #4]
 8026a6a:	4934      	ldr	r1, [pc, #208]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 8026a6c:	4313      	orrs	r3, r2
 8026a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8026a70:	f7fc f9c2 	bl	8022df8 <HAL_GetTick>
 8026a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8026a76:	e00a      	b.n	8026a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8026a78:	f7fc f9be 	bl	8022df8 <HAL_GetTick>
 8026a7c:	4602      	mov	r2, r0
 8026a7e:	68fb      	ldr	r3, [r7, #12]
 8026a80:	1ad3      	subs	r3, r2, r3
 8026a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8026a86:	4293      	cmp	r3, r2
 8026a88:	d901      	bls.n	8026a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8026a8a:	2303      	movs	r3, #3
 8026a8c:	e04f      	b.n	8026b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8026a8e:	4b2b      	ldr	r3, [pc, #172]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 8026a90:	689b      	ldr	r3, [r3, #8]
 8026a92:	f003 020c 	and.w	r2, r3, #12
 8026a96:	687b      	ldr	r3, [r7, #4]
 8026a98:	685b      	ldr	r3, [r3, #4]
 8026a9a:	009b      	lsls	r3, r3, #2
 8026a9c:	429a      	cmp	r2, r3
 8026a9e:	d1eb      	bne.n	8026a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8026aa0:	4b25      	ldr	r3, [pc, #148]	; (8026b38 <HAL_RCC_ClockConfig+0x1b8>)
 8026aa2:	681b      	ldr	r3, [r3, #0]
 8026aa4:	f003 030f 	and.w	r3, r3, #15
 8026aa8:	683a      	ldr	r2, [r7, #0]
 8026aaa:	429a      	cmp	r2, r3
 8026aac:	d20c      	bcs.n	8026ac8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8026aae:	4b22      	ldr	r3, [pc, #136]	; (8026b38 <HAL_RCC_ClockConfig+0x1b8>)
 8026ab0:	683a      	ldr	r2, [r7, #0]
 8026ab2:	b2d2      	uxtb	r2, r2
 8026ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8026ab6:	4b20      	ldr	r3, [pc, #128]	; (8026b38 <HAL_RCC_ClockConfig+0x1b8>)
 8026ab8:	681b      	ldr	r3, [r3, #0]
 8026aba:	f003 030f 	and.w	r3, r3, #15
 8026abe:	683a      	ldr	r2, [r7, #0]
 8026ac0:	429a      	cmp	r2, r3
 8026ac2:	d001      	beq.n	8026ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8026ac4:	2301      	movs	r3, #1
 8026ac6:	e032      	b.n	8026b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8026ac8:	687b      	ldr	r3, [r7, #4]
 8026aca:	681b      	ldr	r3, [r3, #0]
 8026acc:	f003 0304 	and.w	r3, r3, #4
 8026ad0:	2b00      	cmp	r3, #0
 8026ad2:	d008      	beq.n	8026ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8026ad4:	4b19      	ldr	r3, [pc, #100]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 8026ad6:	689b      	ldr	r3, [r3, #8]
 8026ad8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8026adc:	687b      	ldr	r3, [r7, #4]
 8026ade:	68db      	ldr	r3, [r3, #12]
 8026ae0:	4916      	ldr	r1, [pc, #88]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 8026ae2:	4313      	orrs	r3, r2
 8026ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8026ae6:	687b      	ldr	r3, [r7, #4]
 8026ae8:	681b      	ldr	r3, [r3, #0]
 8026aea:	f003 0308 	and.w	r3, r3, #8
 8026aee:	2b00      	cmp	r3, #0
 8026af0:	d009      	beq.n	8026b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8026af2:	4b12      	ldr	r3, [pc, #72]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 8026af4:	689b      	ldr	r3, [r3, #8]
 8026af6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8026afa:	687b      	ldr	r3, [r7, #4]
 8026afc:	691b      	ldr	r3, [r3, #16]
 8026afe:	00db      	lsls	r3, r3, #3
 8026b00:	490e      	ldr	r1, [pc, #56]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 8026b02:	4313      	orrs	r3, r2
 8026b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8026b06:	f000 f821 	bl	8026b4c <HAL_RCC_GetSysClockFreq>
 8026b0a:	4602      	mov	r2, r0
 8026b0c:	4b0b      	ldr	r3, [pc, #44]	; (8026b3c <HAL_RCC_ClockConfig+0x1bc>)
 8026b0e:	689b      	ldr	r3, [r3, #8]
 8026b10:	091b      	lsrs	r3, r3, #4
 8026b12:	f003 030f 	and.w	r3, r3, #15
 8026b16:	490a      	ldr	r1, [pc, #40]	; (8026b40 <HAL_RCC_ClockConfig+0x1c0>)
 8026b18:	5ccb      	ldrb	r3, [r1, r3]
 8026b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8026b1e:	4a09      	ldr	r2, [pc, #36]	; (8026b44 <HAL_RCC_ClockConfig+0x1c4>)
 8026b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8026b22:	4b09      	ldr	r3, [pc, #36]	; (8026b48 <HAL_RCC_ClockConfig+0x1c8>)
 8026b24:	681b      	ldr	r3, [r3, #0]
 8026b26:	4618      	mov	r0, r3
 8026b28:	f7fa fd82 	bl	8021630 <HAL_InitTick>

  return HAL_OK;
 8026b2c:	2300      	movs	r3, #0
}
 8026b2e:	4618      	mov	r0, r3
 8026b30:	3710      	adds	r7, #16
 8026b32:	46bd      	mov	sp, r7
 8026b34:	bd80      	pop	{r7, pc}
 8026b36:	bf00      	nop
 8026b38:	40023c00 	.word	0x40023c00
 8026b3c:	40023800 	.word	0x40023800
 8026b40:	0802dac4 	.word	0x0802dac4
 8026b44:	20000000 	.word	0x20000000
 8026b48:	20000054 	.word	0x20000054

08026b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8026b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8026b50:	b094      	sub	sp, #80	; 0x50
 8026b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8026b54:	2300      	movs	r3, #0
 8026b56:	647b      	str	r3, [r7, #68]	; 0x44
 8026b58:	2300      	movs	r3, #0
 8026b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8026b5c:	2300      	movs	r3, #0
 8026b5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8026b60:	2300      	movs	r3, #0
 8026b62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8026b64:	4b79      	ldr	r3, [pc, #484]	; (8026d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8026b66:	689b      	ldr	r3, [r3, #8]
 8026b68:	f003 030c 	and.w	r3, r3, #12
 8026b6c:	2b08      	cmp	r3, #8
 8026b6e:	d00d      	beq.n	8026b8c <HAL_RCC_GetSysClockFreq+0x40>
 8026b70:	2b08      	cmp	r3, #8
 8026b72:	f200 80e1 	bhi.w	8026d38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8026b76:	2b00      	cmp	r3, #0
 8026b78:	d002      	beq.n	8026b80 <HAL_RCC_GetSysClockFreq+0x34>
 8026b7a:	2b04      	cmp	r3, #4
 8026b7c:	d003      	beq.n	8026b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8026b7e:	e0db      	b.n	8026d38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8026b80:	4b73      	ldr	r3, [pc, #460]	; (8026d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8026b82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8026b84:	e0db      	b.n	8026d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8026b86:	4b73      	ldr	r3, [pc, #460]	; (8026d54 <HAL_RCC_GetSysClockFreq+0x208>)
 8026b88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8026b8a:	e0d8      	b.n	8026d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8026b8c:	4b6f      	ldr	r3, [pc, #444]	; (8026d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8026b8e:	685b      	ldr	r3, [r3, #4]
 8026b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8026b94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8026b96:	4b6d      	ldr	r3, [pc, #436]	; (8026d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8026b98:	685b      	ldr	r3, [r3, #4]
 8026b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026b9e:	2b00      	cmp	r3, #0
 8026ba0:	d063      	beq.n	8026c6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8026ba2:	4b6a      	ldr	r3, [pc, #424]	; (8026d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8026ba4:	685b      	ldr	r3, [r3, #4]
 8026ba6:	099b      	lsrs	r3, r3, #6
 8026ba8:	2200      	movs	r2, #0
 8026baa:	63bb      	str	r3, [r7, #56]	; 0x38
 8026bac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8026bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8026bb6:	2300      	movs	r3, #0
 8026bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8026bba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8026bbe:	4622      	mov	r2, r4
 8026bc0:	462b      	mov	r3, r5
 8026bc2:	f04f 0000 	mov.w	r0, #0
 8026bc6:	f04f 0100 	mov.w	r1, #0
 8026bca:	0159      	lsls	r1, r3, #5
 8026bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8026bd0:	0150      	lsls	r0, r2, #5
 8026bd2:	4602      	mov	r2, r0
 8026bd4:	460b      	mov	r3, r1
 8026bd6:	4621      	mov	r1, r4
 8026bd8:	1a51      	subs	r1, r2, r1
 8026bda:	6139      	str	r1, [r7, #16]
 8026bdc:	4629      	mov	r1, r5
 8026bde:	eb63 0301 	sbc.w	r3, r3, r1
 8026be2:	617b      	str	r3, [r7, #20]
 8026be4:	f04f 0200 	mov.w	r2, #0
 8026be8:	f04f 0300 	mov.w	r3, #0
 8026bec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8026bf0:	4659      	mov	r1, fp
 8026bf2:	018b      	lsls	r3, r1, #6
 8026bf4:	4651      	mov	r1, sl
 8026bf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8026bfa:	4651      	mov	r1, sl
 8026bfc:	018a      	lsls	r2, r1, #6
 8026bfe:	4651      	mov	r1, sl
 8026c00:	ebb2 0801 	subs.w	r8, r2, r1
 8026c04:	4659      	mov	r1, fp
 8026c06:	eb63 0901 	sbc.w	r9, r3, r1
 8026c0a:	f04f 0200 	mov.w	r2, #0
 8026c0e:	f04f 0300 	mov.w	r3, #0
 8026c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8026c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8026c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8026c1e:	4690      	mov	r8, r2
 8026c20:	4699      	mov	r9, r3
 8026c22:	4623      	mov	r3, r4
 8026c24:	eb18 0303 	adds.w	r3, r8, r3
 8026c28:	60bb      	str	r3, [r7, #8]
 8026c2a:	462b      	mov	r3, r5
 8026c2c:	eb49 0303 	adc.w	r3, r9, r3
 8026c30:	60fb      	str	r3, [r7, #12]
 8026c32:	f04f 0200 	mov.w	r2, #0
 8026c36:	f04f 0300 	mov.w	r3, #0
 8026c3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8026c3e:	4629      	mov	r1, r5
 8026c40:	024b      	lsls	r3, r1, #9
 8026c42:	4621      	mov	r1, r4
 8026c44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8026c48:	4621      	mov	r1, r4
 8026c4a:	024a      	lsls	r2, r1, #9
 8026c4c:	4610      	mov	r0, r2
 8026c4e:	4619      	mov	r1, r3
 8026c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026c52:	2200      	movs	r2, #0
 8026c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8026c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8026c58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8026c5c:	f7f9 fb18 	bl	8020290 <__aeabi_uldivmod>
 8026c60:	4602      	mov	r2, r0
 8026c62:	460b      	mov	r3, r1
 8026c64:	4613      	mov	r3, r2
 8026c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8026c68:	e058      	b.n	8026d1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8026c6a:	4b38      	ldr	r3, [pc, #224]	; (8026d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8026c6c:	685b      	ldr	r3, [r3, #4]
 8026c6e:	099b      	lsrs	r3, r3, #6
 8026c70:	2200      	movs	r2, #0
 8026c72:	4618      	mov	r0, r3
 8026c74:	4611      	mov	r1, r2
 8026c76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8026c7a:	623b      	str	r3, [r7, #32]
 8026c7c:	2300      	movs	r3, #0
 8026c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8026c80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8026c84:	4642      	mov	r2, r8
 8026c86:	464b      	mov	r3, r9
 8026c88:	f04f 0000 	mov.w	r0, #0
 8026c8c:	f04f 0100 	mov.w	r1, #0
 8026c90:	0159      	lsls	r1, r3, #5
 8026c92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8026c96:	0150      	lsls	r0, r2, #5
 8026c98:	4602      	mov	r2, r0
 8026c9a:	460b      	mov	r3, r1
 8026c9c:	4641      	mov	r1, r8
 8026c9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8026ca2:	4649      	mov	r1, r9
 8026ca4:	eb63 0b01 	sbc.w	fp, r3, r1
 8026ca8:	f04f 0200 	mov.w	r2, #0
 8026cac:	f04f 0300 	mov.w	r3, #0
 8026cb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8026cb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8026cb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8026cbc:	ebb2 040a 	subs.w	r4, r2, sl
 8026cc0:	eb63 050b 	sbc.w	r5, r3, fp
 8026cc4:	f04f 0200 	mov.w	r2, #0
 8026cc8:	f04f 0300 	mov.w	r3, #0
 8026ccc:	00eb      	lsls	r3, r5, #3
 8026cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8026cd2:	00e2      	lsls	r2, r4, #3
 8026cd4:	4614      	mov	r4, r2
 8026cd6:	461d      	mov	r5, r3
 8026cd8:	4643      	mov	r3, r8
 8026cda:	18e3      	adds	r3, r4, r3
 8026cdc:	603b      	str	r3, [r7, #0]
 8026cde:	464b      	mov	r3, r9
 8026ce0:	eb45 0303 	adc.w	r3, r5, r3
 8026ce4:	607b      	str	r3, [r7, #4]
 8026ce6:	f04f 0200 	mov.w	r2, #0
 8026cea:	f04f 0300 	mov.w	r3, #0
 8026cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8026cf2:	4629      	mov	r1, r5
 8026cf4:	028b      	lsls	r3, r1, #10
 8026cf6:	4621      	mov	r1, r4
 8026cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8026cfc:	4621      	mov	r1, r4
 8026cfe:	028a      	lsls	r2, r1, #10
 8026d00:	4610      	mov	r0, r2
 8026d02:	4619      	mov	r1, r3
 8026d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026d06:	2200      	movs	r2, #0
 8026d08:	61bb      	str	r3, [r7, #24]
 8026d0a:	61fa      	str	r2, [r7, #28]
 8026d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8026d10:	f7f9 fabe 	bl	8020290 <__aeabi_uldivmod>
 8026d14:	4602      	mov	r2, r0
 8026d16:	460b      	mov	r3, r1
 8026d18:	4613      	mov	r3, r2
 8026d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8026d1c:	4b0b      	ldr	r3, [pc, #44]	; (8026d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8026d1e:	685b      	ldr	r3, [r3, #4]
 8026d20:	0c1b      	lsrs	r3, r3, #16
 8026d22:	f003 0303 	and.w	r3, r3, #3
 8026d26:	3301      	adds	r3, #1
 8026d28:	005b      	lsls	r3, r3, #1
 8026d2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8026d2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8026d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8026d34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8026d36:	e002      	b.n	8026d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8026d38:	4b05      	ldr	r3, [pc, #20]	; (8026d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8026d3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8026d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8026d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8026d40:	4618      	mov	r0, r3
 8026d42:	3750      	adds	r7, #80	; 0x50
 8026d44:	46bd      	mov	sp, r7
 8026d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8026d4a:	bf00      	nop
 8026d4c:	40023800 	.word	0x40023800
 8026d50:	00f42400 	.word	0x00f42400
 8026d54:	007a1200 	.word	0x007a1200

08026d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8026d58:	b480      	push	{r7}
 8026d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8026d5c:	4b03      	ldr	r3, [pc, #12]	; (8026d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8026d5e:	681b      	ldr	r3, [r3, #0]
}
 8026d60:	4618      	mov	r0, r3
 8026d62:	46bd      	mov	sp, r7
 8026d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d68:	4770      	bx	lr
 8026d6a:	bf00      	nop
 8026d6c:	20000000 	.word	0x20000000

08026d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8026d70:	b580      	push	{r7, lr}
 8026d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8026d74:	f7ff fff0 	bl	8026d58 <HAL_RCC_GetHCLKFreq>
 8026d78:	4602      	mov	r2, r0
 8026d7a:	4b05      	ldr	r3, [pc, #20]	; (8026d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8026d7c:	689b      	ldr	r3, [r3, #8]
 8026d7e:	0a9b      	lsrs	r3, r3, #10
 8026d80:	f003 0307 	and.w	r3, r3, #7
 8026d84:	4903      	ldr	r1, [pc, #12]	; (8026d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8026d86:	5ccb      	ldrb	r3, [r1, r3]
 8026d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8026d8c:	4618      	mov	r0, r3
 8026d8e:	bd80      	pop	{r7, pc}
 8026d90:	40023800 	.word	0x40023800
 8026d94:	0802dad4 	.word	0x0802dad4

08026d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8026d98:	b580      	push	{r7, lr}
 8026d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8026d9c:	f7ff ffdc 	bl	8026d58 <HAL_RCC_GetHCLKFreq>
 8026da0:	4602      	mov	r2, r0
 8026da2:	4b05      	ldr	r3, [pc, #20]	; (8026db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8026da4:	689b      	ldr	r3, [r3, #8]
 8026da6:	0b5b      	lsrs	r3, r3, #13
 8026da8:	f003 0307 	and.w	r3, r3, #7
 8026dac:	4903      	ldr	r1, [pc, #12]	; (8026dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8026dae:	5ccb      	ldrb	r3, [r1, r3]
 8026db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8026db4:	4618      	mov	r0, r3
 8026db6:	bd80      	pop	{r7, pc}
 8026db8:	40023800 	.word	0x40023800
 8026dbc:	0802dad4 	.word	0x0802dad4

08026dc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8026dc0:	b480      	push	{r7}
 8026dc2:	b083      	sub	sp, #12
 8026dc4:	af00      	add	r7, sp, #0
 8026dc6:	6078      	str	r0, [r7, #4]
 8026dc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8026dca:	687b      	ldr	r3, [r7, #4]
 8026dcc:	220f      	movs	r2, #15
 8026dce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8026dd0:	4b12      	ldr	r3, [pc, #72]	; (8026e1c <HAL_RCC_GetClockConfig+0x5c>)
 8026dd2:	689b      	ldr	r3, [r3, #8]
 8026dd4:	f003 0203 	and.w	r2, r3, #3
 8026dd8:	687b      	ldr	r3, [r7, #4]
 8026dda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8026ddc:	4b0f      	ldr	r3, [pc, #60]	; (8026e1c <HAL_RCC_GetClockConfig+0x5c>)
 8026dde:	689b      	ldr	r3, [r3, #8]
 8026de0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8026de4:	687b      	ldr	r3, [r7, #4]
 8026de6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8026de8:	4b0c      	ldr	r3, [pc, #48]	; (8026e1c <HAL_RCC_GetClockConfig+0x5c>)
 8026dea:	689b      	ldr	r3, [r3, #8]
 8026dec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8026df0:	687b      	ldr	r3, [r7, #4]
 8026df2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8026df4:	4b09      	ldr	r3, [pc, #36]	; (8026e1c <HAL_RCC_GetClockConfig+0x5c>)
 8026df6:	689b      	ldr	r3, [r3, #8]
 8026df8:	08db      	lsrs	r3, r3, #3
 8026dfa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8026dfe:	687b      	ldr	r3, [r7, #4]
 8026e00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8026e02:	4b07      	ldr	r3, [pc, #28]	; (8026e20 <HAL_RCC_GetClockConfig+0x60>)
 8026e04:	681b      	ldr	r3, [r3, #0]
 8026e06:	f003 020f 	and.w	r2, r3, #15
 8026e0a:	683b      	ldr	r3, [r7, #0]
 8026e0c:	601a      	str	r2, [r3, #0]
}
 8026e0e:	bf00      	nop
 8026e10:	370c      	adds	r7, #12
 8026e12:	46bd      	mov	sp, r7
 8026e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e18:	4770      	bx	lr
 8026e1a:	bf00      	nop
 8026e1c:	40023800 	.word	0x40023800
 8026e20:	40023c00 	.word	0x40023c00

08026e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8026e24:	b580      	push	{r7, lr}
 8026e26:	b086      	sub	sp, #24
 8026e28:	af00      	add	r7, sp, #0
 8026e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8026e2c:	2300      	movs	r3, #0
 8026e2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8026e30:	2300      	movs	r3, #0
 8026e32:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8026e34:	687b      	ldr	r3, [r7, #4]
 8026e36:	681b      	ldr	r3, [r3, #0]
 8026e38:	f003 0301 	and.w	r3, r3, #1
 8026e3c:	2b00      	cmp	r3, #0
 8026e3e:	d10b      	bne.n	8026e58 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8026e40:	687b      	ldr	r3, [r7, #4]
 8026e42:	681b      	ldr	r3, [r3, #0]
 8026e44:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8026e48:	2b00      	cmp	r3, #0
 8026e4a:	d105      	bne.n	8026e58 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8026e4c:	687b      	ldr	r3, [r7, #4]
 8026e4e:	681b      	ldr	r3, [r3, #0]
 8026e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8026e54:	2b00      	cmp	r3, #0
 8026e56:	d075      	beq.n	8026f44 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8026e58:	4b91      	ldr	r3, [pc, #580]	; (80270a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8026e5a:	2200      	movs	r2, #0
 8026e5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8026e5e:	f7fb ffcb 	bl	8022df8 <HAL_GetTick>
 8026e62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8026e64:	e008      	b.n	8026e78 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8026e66:	f7fb ffc7 	bl	8022df8 <HAL_GetTick>
 8026e6a:	4602      	mov	r2, r0
 8026e6c:	697b      	ldr	r3, [r7, #20]
 8026e6e:	1ad3      	subs	r3, r2, r3
 8026e70:	2b02      	cmp	r3, #2
 8026e72:	d901      	bls.n	8026e78 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8026e74:	2303      	movs	r3, #3
 8026e76:	e189      	b.n	802718c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8026e78:	4b8a      	ldr	r3, [pc, #552]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8026e7a:	681b      	ldr	r3, [r3, #0]
 8026e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8026e80:	2b00      	cmp	r3, #0
 8026e82:	d1f0      	bne.n	8026e66 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8026e84:	687b      	ldr	r3, [r7, #4]
 8026e86:	681b      	ldr	r3, [r3, #0]
 8026e88:	f003 0301 	and.w	r3, r3, #1
 8026e8c:	2b00      	cmp	r3, #0
 8026e8e:	d009      	beq.n	8026ea4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8026e90:	687b      	ldr	r3, [r7, #4]
 8026e92:	685b      	ldr	r3, [r3, #4]
 8026e94:	019a      	lsls	r2, r3, #6
 8026e96:	687b      	ldr	r3, [r7, #4]
 8026e98:	689b      	ldr	r3, [r3, #8]
 8026e9a:	071b      	lsls	r3, r3, #28
 8026e9c:	4981      	ldr	r1, [pc, #516]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8026e9e:	4313      	orrs	r3, r2
 8026ea0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8026ea4:	687b      	ldr	r3, [r7, #4]
 8026ea6:	681b      	ldr	r3, [r3, #0]
 8026ea8:	f003 0302 	and.w	r3, r3, #2
 8026eac:	2b00      	cmp	r3, #0
 8026eae:	d01f      	beq.n	8026ef0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8026eb0:	4b7c      	ldr	r3, [pc, #496]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8026eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8026eb6:	0f1b      	lsrs	r3, r3, #28
 8026eb8:	f003 0307 	and.w	r3, r3, #7
 8026ebc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8026ebe:	687b      	ldr	r3, [r7, #4]
 8026ec0:	685b      	ldr	r3, [r3, #4]
 8026ec2:	019a      	lsls	r2, r3, #6
 8026ec4:	687b      	ldr	r3, [r7, #4]
 8026ec6:	68db      	ldr	r3, [r3, #12]
 8026ec8:	061b      	lsls	r3, r3, #24
 8026eca:	431a      	orrs	r2, r3
 8026ecc:	693b      	ldr	r3, [r7, #16]
 8026ece:	071b      	lsls	r3, r3, #28
 8026ed0:	4974      	ldr	r1, [pc, #464]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8026ed2:	4313      	orrs	r3, r2
 8026ed4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8026ed8:	4b72      	ldr	r3, [pc, #456]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8026eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8026ede:	f023 021f 	bic.w	r2, r3, #31
 8026ee2:	687b      	ldr	r3, [r7, #4]
 8026ee4:	69db      	ldr	r3, [r3, #28]
 8026ee6:	3b01      	subs	r3, #1
 8026ee8:	496e      	ldr	r1, [pc, #440]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8026eea:	4313      	orrs	r3, r2
 8026eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8026ef0:	687b      	ldr	r3, [r7, #4]
 8026ef2:	681b      	ldr	r3, [r3, #0]
 8026ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026ef8:	2b00      	cmp	r3, #0
 8026efa:	d00d      	beq.n	8026f18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8026efc:	687b      	ldr	r3, [r7, #4]
 8026efe:	685b      	ldr	r3, [r3, #4]
 8026f00:	019a      	lsls	r2, r3, #6
 8026f02:	687b      	ldr	r3, [r7, #4]
 8026f04:	68db      	ldr	r3, [r3, #12]
 8026f06:	061b      	lsls	r3, r3, #24
 8026f08:	431a      	orrs	r2, r3
 8026f0a:	687b      	ldr	r3, [r7, #4]
 8026f0c:	689b      	ldr	r3, [r3, #8]
 8026f0e:	071b      	lsls	r3, r3, #28
 8026f10:	4964      	ldr	r1, [pc, #400]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8026f12:	4313      	orrs	r3, r2
 8026f14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8026f18:	4b61      	ldr	r3, [pc, #388]	; (80270a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8026f1a:	2201      	movs	r2, #1
 8026f1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8026f1e:	f7fb ff6b 	bl	8022df8 <HAL_GetTick>
 8026f22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8026f24:	e008      	b.n	8026f38 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8026f26:	f7fb ff67 	bl	8022df8 <HAL_GetTick>
 8026f2a:	4602      	mov	r2, r0
 8026f2c:	697b      	ldr	r3, [r7, #20]
 8026f2e:	1ad3      	subs	r3, r2, r3
 8026f30:	2b02      	cmp	r3, #2
 8026f32:	d901      	bls.n	8026f38 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8026f34:	2303      	movs	r3, #3
 8026f36:	e129      	b.n	802718c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8026f38:	4b5a      	ldr	r3, [pc, #360]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8026f3a:	681b      	ldr	r3, [r3, #0]
 8026f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8026f40:	2b00      	cmp	r3, #0
 8026f42:	d0f0      	beq.n	8026f26 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8026f44:	687b      	ldr	r3, [r7, #4]
 8026f46:	681b      	ldr	r3, [r3, #0]
 8026f48:	f003 0304 	and.w	r3, r3, #4
 8026f4c:	2b00      	cmp	r3, #0
 8026f4e:	d105      	bne.n	8026f5c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8026f50:	687b      	ldr	r3, [r7, #4]
 8026f52:	681b      	ldr	r3, [r3, #0]
 8026f54:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8026f58:	2b00      	cmp	r3, #0
 8026f5a:	d079      	beq.n	8027050 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8026f5c:	4b52      	ldr	r3, [pc, #328]	; (80270a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8026f5e:	2200      	movs	r2, #0
 8026f60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8026f62:	f7fb ff49 	bl	8022df8 <HAL_GetTick>
 8026f66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8026f68:	e008      	b.n	8026f7c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8026f6a:	f7fb ff45 	bl	8022df8 <HAL_GetTick>
 8026f6e:	4602      	mov	r2, r0
 8026f70:	697b      	ldr	r3, [r7, #20]
 8026f72:	1ad3      	subs	r3, r2, r3
 8026f74:	2b02      	cmp	r3, #2
 8026f76:	d901      	bls.n	8026f7c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8026f78:	2303      	movs	r3, #3
 8026f7a:	e107      	b.n	802718c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8026f7c:	4b49      	ldr	r3, [pc, #292]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8026f7e:	681b      	ldr	r3, [r3, #0]
 8026f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8026f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8026f88:	d0ef      	beq.n	8026f6a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8026f8a:	687b      	ldr	r3, [r7, #4]
 8026f8c:	681b      	ldr	r3, [r3, #0]
 8026f8e:	f003 0304 	and.w	r3, r3, #4
 8026f92:	2b00      	cmp	r3, #0
 8026f94:	d020      	beq.n	8026fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8026f96:	4b43      	ldr	r3, [pc, #268]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8026f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8026f9c:	0f1b      	lsrs	r3, r3, #28
 8026f9e:	f003 0307 	and.w	r3, r3, #7
 8026fa2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8026fa4:	687b      	ldr	r3, [r7, #4]
 8026fa6:	691b      	ldr	r3, [r3, #16]
 8026fa8:	019a      	lsls	r2, r3, #6
 8026faa:	687b      	ldr	r3, [r7, #4]
 8026fac:	695b      	ldr	r3, [r3, #20]
 8026fae:	061b      	lsls	r3, r3, #24
 8026fb0:	431a      	orrs	r2, r3
 8026fb2:	693b      	ldr	r3, [r7, #16]
 8026fb4:	071b      	lsls	r3, r3, #28
 8026fb6:	493b      	ldr	r1, [pc, #236]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8026fb8:	4313      	orrs	r3, r2
 8026fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8026fbe:	4b39      	ldr	r3, [pc, #228]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8026fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8026fc4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8026fc8:	687b      	ldr	r3, [r7, #4]
 8026fca:	6a1b      	ldr	r3, [r3, #32]
 8026fcc:	3b01      	subs	r3, #1
 8026fce:	021b      	lsls	r3, r3, #8
 8026fd0:	4934      	ldr	r1, [pc, #208]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8026fd2:	4313      	orrs	r3, r2
 8026fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8026fd8:	687b      	ldr	r3, [r7, #4]
 8026fda:	681b      	ldr	r3, [r3, #0]
 8026fdc:	f003 0308 	and.w	r3, r3, #8
 8026fe0:	2b00      	cmp	r3, #0
 8026fe2:	d01e      	beq.n	8027022 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8026fe4:	4b2f      	ldr	r3, [pc, #188]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8026fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8026fea:	0e1b      	lsrs	r3, r3, #24
 8026fec:	f003 030f 	and.w	r3, r3, #15
 8026ff0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8026ff2:	687b      	ldr	r3, [r7, #4]
 8026ff4:	691b      	ldr	r3, [r3, #16]
 8026ff6:	019a      	lsls	r2, r3, #6
 8026ff8:	693b      	ldr	r3, [r7, #16]
 8026ffa:	061b      	lsls	r3, r3, #24
 8026ffc:	431a      	orrs	r2, r3
 8026ffe:	687b      	ldr	r3, [r7, #4]
 8027000:	699b      	ldr	r3, [r3, #24]
 8027002:	071b      	lsls	r3, r3, #28
 8027004:	4927      	ldr	r1, [pc, #156]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027006:	4313      	orrs	r3, r2
 8027008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 802700c:	4b25      	ldr	r3, [pc, #148]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802700e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027012:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8027016:	687b      	ldr	r3, [r7, #4]
 8027018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802701a:	4922      	ldr	r1, [pc, #136]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802701c:	4313      	orrs	r3, r2
 802701e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8027022:	4b21      	ldr	r3, [pc, #132]	; (80270a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8027024:	2201      	movs	r2, #1
 8027026:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027028:	f7fb fee6 	bl	8022df8 <HAL_GetTick>
 802702c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 802702e:	e008      	b.n	8027042 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8027030:	f7fb fee2 	bl	8022df8 <HAL_GetTick>
 8027034:	4602      	mov	r2, r0
 8027036:	697b      	ldr	r3, [r7, #20]
 8027038:	1ad3      	subs	r3, r2, r3
 802703a:	2b02      	cmp	r3, #2
 802703c:	d901      	bls.n	8027042 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802703e:	2303      	movs	r3, #3
 8027040:	e0a4      	b.n	802718c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8027042:	4b18      	ldr	r3, [pc, #96]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027044:	681b      	ldr	r3, [r3, #0]
 8027046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802704a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802704e:	d1ef      	bne.n	8027030 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8027050:	687b      	ldr	r3, [r7, #4]
 8027052:	681b      	ldr	r3, [r3, #0]
 8027054:	f003 0320 	and.w	r3, r3, #32
 8027058:	2b00      	cmp	r3, #0
 802705a:	f000 808b 	beq.w	8027174 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 802705e:	2300      	movs	r3, #0
 8027060:	60fb      	str	r3, [r7, #12]
 8027062:	4b10      	ldr	r3, [pc, #64]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027066:	4a0f      	ldr	r2, [pc, #60]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802706c:	6413      	str	r3, [r2, #64]	; 0x40
 802706e:	4b0d      	ldr	r3, [pc, #52]	; (80270a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027076:	60fb      	str	r3, [r7, #12]
 8027078:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 802707a:	4b0c      	ldr	r3, [pc, #48]	; (80270ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 802707c:	681b      	ldr	r3, [r3, #0]
 802707e:	4a0b      	ldr	r2, [pc, #44]	; (80270ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8027080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027084:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8027086:	f7fb feb7 	bl	8022df8 <HAL_GetTick>
 802708a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 802708c:	e010      	b.n	80270b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 802708e:	f7fb feb3 	bl	8022df8 <HAL_GetTick>
 8027092:	4602      	mov	r2, r0
 8027094:	697b      	ldr	r3, [r7, #20]
 8027096:	1ad3      	subs	r3, r2, r3
 8027098:	2b02      	cmp	r3, #2
 802709a:	d909      	bls.n	80270b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 802709c:	2303      	movs	r3, #3
 802709e:	e075      	b.n	802718c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80270a0:	42470068 	.word	0x42470068
 80270a4:	40023800 	.word	0x40023800
 80270a8:	42470070 	.word	0x42470070
 80270ac:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80270b0:	4b38      	ldr	r3, [pc, #224]	; (8027194 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80270b2:	681b      	ldr	r3, [r3, #0]
 80270b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80270b8:	2b00      	cmp	r3, #0
 80270ba:	d0e8      	beq.n	802708e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80270bc:	4b36      	ldr	r3, [pc, #216]	; (8027198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80270be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80270c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80270c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80270c6:	693b      	ldr	r3, [r7, #16]
 80270c8:	2b00      	cmp	r3, #0
 80270ca:	d02f      	beq.n	802712c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80270cc:	687b      	ldr	r3, [r7, #4]
 80270ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80270d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80270d4:	693a      	ldr	r2, [r7, #16]
 80270d6:	429a      	cmp	r2, r3
 80270d8:	d028      	beq.n	802712c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80270da:	4b2f      	ldr	r3, [pc, #188]	; (8027198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80270dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80270de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80270e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80270e4:	4b2d      	ldr	r3, [pc, #180]	; (802719c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80270e6:	2201      	movs	r2, #1
 80270e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80270ea:	4b2c      	ldr	r3, [pc, #176]	; (802719c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80270ec:	2200      	movs	r2, #0
 80270ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80270f0:	4a29      	ldr	r2, [pc, #164]	; (8027198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80270f2:	693b      	ldr	r3, [r7, #16]
 80270f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80270f6:	4b28      	ldr	r3, [pc, #160]	; (8027198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80270f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80270fa:	f003 0301 	and.w	r3, r3, #1
 80270fe:	2b01      	cmp	r3, #1
 8027100:	d114      	bne.n	802712c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8027102:	f7fb fe79 	bl	8022df8 <HAL_GetTick>
 8027106:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027108:	e00a      	b.n	8027120 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802710a:	f7fb fe75 	bl	8022df8 <HAL_GetTick>
 802710e:	4602      	mov	r2, r0
 8027110:	697b      	ldr	r3, [r7, #20]
 8027112:	1ad3      	subs	r3, r2, r3
 8027114:	f241 3288 	movw	r2, #5000	; 0x1388
 8027118:	4293      	cmp	r3, r2
 802711a:	d901      	bls.n	8027120 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 802711c:	2303      	movs	r3, #3
 802711e:	e035      	b.n	802718c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027120:	4b1d      	ldr	r3, [pc, #116]	; (8027198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027124:	f003 0302 	and.w	r3, r3, #2
 8027128:	2b00      	cmp	r3, #0
 802712a:	d0ee      	beq.n	802710a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802712c:	687b      	ldr	r3, [r7, #4]
 802712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8027138:	d10d      	bne.n	8027156 <HAL_RCCEx_PeriphCLKConfig+0x332>
 802713a:	4b17      	ldr	r3, [pc, #92]	; (8027198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802713c:	689b      	ldr	r3, [r3, #8]
 802713e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8027142:	687b      	ldr	r3, [r7, #4]
 8027144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027146:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802714a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802714e:	4912      	ldr	r1, [pc, #72]	; (8027198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027150:	4313      	orrs	r3, r2
 8027152:	608b      	str	r3, [r1, #8]
 8027154:	e005      	b.n	8027162 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8027156:	4b10      	ldr	r3, [pc, #64]	; (8027198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027158:	689b      	ldr	r3, [r3, #8]
 802715a:	4a0f      	ldr	r2, [pc, #60]	; (8027198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802715c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8027160:	6093      	str	r3, [r2, #8]
 8027162:	4b0d      	ldr	r3, [pc, #52]	; (8027198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027164:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8027166:	687b      	ldr	r3, [r7, #4]
 8027168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802716a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802716e:	490a      	ldr	r1, [pc, #40]	; (8027198 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027170:	4313      	orrs	r3, r2
 8027172:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8027174:	687b      	ldr	r3, [r7, #4]
 8027176:	681b      	ldr	r3, [r3, #0]
 8027178:	f003 0310 	and.w	r3, r3, #16
 802717c:	2b00      	cmp	r3, #0
 802717e:	d004      	beq.n	802718a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8027180:	687b      	ldr	r3, [r7, #4]
 8027182:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8027186:	4b06      	ldr	r3, [pc, #24]	; (80271a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8027188:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 802718a:	2300      	movs	r3, #0
}
 802718c:	4618      	mov	r0, r3
 802718e:	3718      	adds	r7, #24
 8027190:	46bd      	mov	sp, r7
 8027192:	bd80      	pop	{r7, pc}
 8027194:	40007000 	.word	0x40007000
 8027198:	40023800 	.word	0x40023800
 802719c:	42470e40 	.word	0x42470e40
 80271a0:	424711e0 	.word	0x424711e0

080271a4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80271a4:	b580      	push	{r7, lr}
 80271a6:	b082      	sub	sp, #8
 80271a8:	af00      	add	r7, sp, #0
 80271aa:	6078      	str	r0, [r7, #4]
 80271ac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80271ae:	687b      	ldr	r3, [r7, #4]
 80271b0:	2b00      	cmp	r3, #0
 80271b2:	d101      	bne.n	80271b8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80271b4:	2301      	movs	r3, #1
 80271b6:	e025      	b.n	8027204 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80271b8:	687b      	ldr	r3, [r7, #4]
 80271ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80271be:	b2db      	uxtb	r3, r3
 80271c0:	2b00      	cmp	r3, #0
 80271c2:	d106      	bne.n	80271d2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80271c4:	687b      	ldr	r3, [r7, #4]
 80271c6:	2200      	movs	r2, #0
 80271c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80271cc:	6878      	ldr	r0, [r7, #4]
 80271ce:	f7fa fa25 	bl	802161c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80271d2:	687b      	ldr	r3, [r7, #4]
 80271d4:	2202      	movs	r2, #2
 80271d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80271da:	687b      	ldr	r3, [r7, #4]
 80271dc:	681a      	ldr	r2, [r3, #0]
 80271de:	687b      	ldr	r3, [r7, #4]
 80271e0:	3304      	adds	r3, #4
 80271e2:	4619      	mov	r1, r3
 80271e4:	4610      	mov	r0, r2
 80271e6:	f001 fe91 	bl	8028f0c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80271ea:	687b      	ldr	r3, [r7, #4]
 80271ec:	6818      	ldr	r0, [r3, #0]
 80271ee:	687b      	ldr	r3, [r7, #4]
 80271f0:	685b      	ldr	r3, [r3, #4]
 80271f2:	461a      	mov	r2, r3
 80271f4:	6839      	ldr	r1, [r7, #0]
 80271f6:	f001 fee6 	bl	8028fc6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80271fa:	687b      	ldr	r3, [r7, #4]
 80271fc:	2201      	movs	r2, #1
 80271fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8027202:	2300      	movs	r3, #0
}
 8027204:	4618      	mov	r0, r3
 8027206:	3708      	adds	r7, #8
 8027208:	46bd      	mov	sp, r7
 802720a:	bd80      	pop	{r7, pc}

0802720c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 802720c:	b580      	push	{r7, lr}
 802720e:	b086      	sub	sp, #24
 8027210:	af00      	add	r7, sp, #0
 8027212:	60f8      	str	r0, [r7, #12]
 8027214:	60b9      	str	r1, [r7, #8]
 8027216:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8027218:	68fb      	ldr	r3, [r7, #12]
 802721a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802721e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8027220:	7dfb      	ldrb	r3, [r7, #23]
 8027222:	2b02      	cmp	r3, #2
 8027224:	d101      	bne.n	802722a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8027226:	2302      	movs	r3, #2
 8027228:	e021      	b.n	802726e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 802722a:	7dfb      	ldrb	r3, [r7, #23]
 802722c:	2b01      	cmp	r3, #1
 802722e:	d002      	beq.n	8027236 <HAL_SDRAM_SendCommand+0x2a>
 8027230:	7dfb      	ldrb	r3, [r7, #23]
 8027232:	2b05      	cmp	r3, #5
 8027234:	d118      	bne.n	8027268 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8027236:	68fb      	ldr	r3, [r7, #12]
 8027238:	2202      	movs	r2, #2
 802723a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 802723e:	68fb      	ldr	r3, [r7, #12]
 8027240:	681b      	ldr	r3, [r3, #0]
 8027242:	687a      	ldr	r2, [r7, #4]
 8027244:	68b9      	ldr	r1, [r7, #8]
 8027246:	4618      	mov	r0, r3
 8027248:	f001 ff26 	bl	8029098 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 802724c:	68bb      	ldr	r3, [r7, #8]
 802724e:	681b      	ldr	r3, [r3, #0]
 8027250:	2b02      	cmp	r3, #2
 8027252:	d104      	bne.n	802725e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8027254:	68fb      	ldr	r3, [r7, #12]
 8027256:	2205      	movs	r2, #5
 8027258:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 802725c:	e006      	b.n	802726c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 802725e:	68fb      	ldr	r3, [r7, #12]
 8027260:	2201      	movs	r2, #1
 8027262:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8027266:	e001      	b.n	802726c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8027268:	2301      	movs	r3, #1
 802726a:	e000      	b.n	802726e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 802726c:	2300      	movs	r3, #0
}
 802726e:	4618      	mov	r0, r3
 8027270:	3718      	adds	r7, #24
 8027272:	46bd      	mov	sp, r7
 8027274:	bd80      	pop	{r7, pc}

08027276 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8027276:	b580      	push	{r7, lr}
 8027278:	b082      	sub	sp, #8
 802727a:	af00      	add	r7, sp, #0
 802727c:	6078      	str	r0, [r7, #4]
 802727e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8027280:	687b      	ldr	r3, [r7, #4]
 8027282:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8027286:	b2db      	uxtb	r3, r3
 8027288:	2b02      	cmp	r3, #2
 802728a:	d101      	bne.n	8027290 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 802728c:	2302      	movs	r3, #2
 802728e:	e016      	b.n	80272be <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8027290:	687b      	ldr	r3, [r7, #4]
 8027292:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8027296:	b2db      	uxtb	r3, r3
 8027298:	2b01      	cmp	r3, #1
 802729a:	d10f      	bne.n	80272bc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 802729c:	687b      	ldr	r3, [r7, #4]
 802729e:	2202      	movs	r2, #2
 80272a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80272a4:	687b      	ldr	r3, [r7, #4]
 80272a6:	681b      	ldr	r3, [r3, #0]
 80272a8:	6839      	ldr	r1, [r7, #0]
 80272aa:	4618      	mov	r0, r3
 80272ac:	f001 ff31 	bl	8029112 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80272b0:	687b      	ldr	r3, [r7, #4]
 80272b2:	2201      	movs	r2, #1
 80272b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80272b8:	2300      	movs	r3, #0
 80272ba:	e000      	b.n	80272be <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80272bc:	2301      	movs	r3, #1
}
 80272be:	4618      	mov	r0, r3
 80272c0:	3708      	adds	r7, #8
 80272c2:	46bd      	mov	sp, r7
 80272c4:	bd80      	pop	{r7, pc}

080272c6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80272c6:	b580      	push	{r7, lr}
 80272c8:	b082      	sub	sp, #8
 80272ca:	af00      	add	r7, sp, #0
 80272cc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80272ce:	687b      	ldr	r3, [r7, #4]
 80272d0:	2b00      	cmp	r3, #0
 80272d2:	d101      	bne.n	80272d8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80272d4:	2301      	movs	r3, #1
 80272d6:	e07b      	b.n	80273d0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80272d8:	687b      	ldr	r3, [r7, #4]
 80272da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80272dc:	2b00      	cmp	r3, #0
 80272de:	d108      	bne.n	80272f2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80272e0:	687b      	ldr	r3, [r7, #4]
 80272e2:	685b      	ldr	r3, [r3, #4]
 80272e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80272e8:	d009      	beq.n	80272fe <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80272ea:	687b      	ldr	r3, [r7, #4]
 80272ec:	2200      	movs	r2, #0
 80272ee:	61da      	str	r2, [r3, #28]
 80272f0:	e005      	b.n	80272fe <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80272f2:	687b      	ldr	r3, [r7, #4]
 80272f4:	2200      	movs	r2, #0
 80272f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80272f8:	687b      	ldr	r3, [r7, #4]
 80272fa:	2200      	movs	r2, #0
 80272fc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80272fe:	687b      	ldr	r3, [r7, #4]
 8027300:	2200      	movs	r2, #0
 8027302:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8027304:	687b      	ldr	r3, [r7, #4]
 8027306:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802730a:	b2db      	uxtb	r3, r3
 802730c:	2b00      	cmp	r3, #0
 802730e:	d106      	bne.n	802731e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8027310:	687b      	ldr	r3, [r7, #4]
 8027312:	2200      	movs	r2, #0
 8027314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8027318:	6878      	ldr	r0, [r7, #4]
 802731a:	f7f9 ffc5 	bl	80212a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802731e:	687b      	ldr	r3, [r7, #4]
 8027320:	2202      	movs	r2, #2
 8027322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8027326:	687b      	ldr	r3, [r7, #4]
 8027328:	681b      	ldr	r3, [r3, #0]
 802732a:	681a      	ldr	r2, [r3, #0]
 802732c:	687b      	ldr	r3, [r7, #4]
 802732e:	681b      	ldr	r3, [r3, #0]
 8027330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027334:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8027336:	687b      	ldr	r3, [r7, #4]
 8027338:	685b      	ldr	r3, [r3, #4]
 802733a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 802733e:	687b      	ldr	r3, [r7, #4]
 8027340:	689b      	ldr	r3, [r3, #8]
 8027342:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8027346:	431a      	orrs	r2, r3
 8027348:	687b      	ldr	r3, [r7, #4]
 802734a:	68db      	ldr	r3, [r3, #12]
 802734c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8027350:	431a      	orrs	r2, r3
 8027352:	687b      	ldr	r3, [r7, #4]
 8027354:	691b      	ldr	r3, [r3, #16]
 8027356:	f003 0302 	and.w	r3, r3, #2
 802735a:	431a      	orrs	r2, r3
 802735c:	687b      	ldr	r3, [r7, #4]
 802735e:	695b      	ldr	r3, [r3, #20]
 8027360:	f003 0301 	and.w	r3, r3, #1
 8027364:	431a      	orrs	r2, r3
 8027366:	687b      	ldr	r3, [r7, #4]
 8027368:	699b      	ldr	r3, [r3, #24]
 802736a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802736e:	431a      	orrs	r2, r3
 8027370:	687b      	ldr	r3, [r7, #4]
 8027372:	69db      	ldr	r3, [r3, #28]
 8027374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8027378:	431a      	orrs	r2, r3
 802737a:	687b      	ldr	r3, [r7, #4]
 802737c:	6a1b      	ldr	r3, [r3, #32]
 802737e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027382:	ea42 0103 	orr.w	r1, r2, r3
 8027386:	687b      	ldr	r3, [r7, #4]
 8027388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802738a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 802738e:	687b      	ldr	r3, [r7, #4]
 8027390:	681b      	ldr	r3, [r3, #0]
 8027392:	430a      	orrs	r2, r1
 8027394:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8027396:	687b      	ldr	r3, [r7, #4]
 8027398:	699b      	ldr	r3, [r3, #24]
 802739a:	0c1b      	lsrs	r3, r3, #16
 802739c:	f003 0104 	and.w	r1, r3, #4
 80273a0:	687b      	ldr	r3, [r7, #4]
 80273a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80273a4:	f003 0210 	and.w	r2, r3, #16
 80273a8:	687b      	ldr	r3, [r7, #4]
 80273aa:	681b      	ldr	r3, [r3, #0]
 80273ac:	430a      	orrs	r2, r1
 80273ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80273b0:	687b      	ldr	r3, [r7, #4]
 80273b2:	681b      	ldr	r3, [r3, #0]
 80273b4:	69da      	ldr	r2, [r3, #28]
 80273b6:	687b      	ldr	r3, [r7, #4]
 80273b8:	681b      	ldr	r3, [r3, #0]
 80273ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80273be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80273c0:	687b      	ldr	r3, [r7, #4]
 80273c2:	2200      	movs	r2, #0
 80273c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80273c6:	687b      	ldr	r3, [r7, #4]
 80273c8:	2201      	movs	r2, #1
 80273ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80273ce:	2300      	movs	r3, #0
}
 80273d0:	4618      	mov	r0, r3
 80273d2:	3708      	adds	r7, #8
 80273d4:	46bd      	mov	sp, r7
 80273d6:	bd80      	pop	{r7, pc}

080273d8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80273d8:	b580      	push	{r7, lr}
 80273da:	b082      	sub	sp, #8
 80273dc:	af00      	add	r7, sp, #0
 80273de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80273e0:	687b      	ldr	r3, [r7, #4]
 80273e2:	2b00      	cmp	r3, #0
 80273e4:	d101      	bne.n	80273ea <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80273e6:	2301      	movs	r3, #1
 80273e8:	e01a      	b.n	8027420 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80273ea:	687b      	ldr	r3, [r7, #4]
 80273ec:	2202      	movs	r2, #2
 80273ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80273f2:	687b      	ldr	r3, [r7, #4]
 80273f4:	681b      	ldr	r3, [r3, #0]
 80273f6:	681a      	ldr	r2, [r3, #0]
 80273f8:	687b      	ldr	r3, [r7, #4]
 80273fa:	681b      	ldr	r3, [r3, #0]
 80273fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027400:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8027402:	6878      	ldr	r0, [r7, #4]
 8027404:	f7f9 ff98 	bl	8021338 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8027408:	687b      	ldr	r3, [r7, #4]
 802740a:	2200      	movs	r2, #0
 802740c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 802740e:	687b      	ldr	r3, [r7, #4]
 8027410:	2200      	movs	r2, #0
 8027412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8027416:	687b      	ldr	r3, [r7, #4]
 8027418:	2200      	movs	r2, #0
 802741a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 802741e:	2300      	movs	r3, #0
}
 8027420:	4618      	mov	r0, r3
 8027422:	3708      	adds	r7, #8
 8027424:	46bd      	mov	sp, r7
 8027426:	bd80      	pop	{r7, pc}

08027428 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8027428:	b580      	push	{r7, lr}
 802742a:	b088      	sub	sp, #32
 802742c:	af00      	add	r7, sp, #0
 802742e:	60f8      	str	r0, [r7, #12]
 8027430:	60b9      	str	r1, [r7, #8]
 8027432:	603b      	str	r3, [r7, #0]
 8027434:	4613      	mov	r3, r2
 8027436:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8027438:	2300      	movs	r3, #0
 802743a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802743c:	68fb      	ldr	r3, [r7, #12]
 802743e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027442:	2b01      	cmp	r3, #1
 8027444:	d101      	bne.n	802744a <HAL_SPI_Transmit+0x22>
 8027446:	2302      	movs	r3, #2
 8027448:	e126      	b.n	8027698 <HAL_SPI_Transmit+0x270>
 802744a:	68fb      	ldr	r3, [r7, #12]
 802744c:	2201      	movs	r2, #1
 802744e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027452:	f7fb fcd1 	bl	8022df8 <HAL_GetTick>
 8027456:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8027458:	88fb      	ldrh	r3, [r7, #6]
 802745a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 802745c:	68fb      	ldr	r3, [r7, #12]
 802745e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027462:	b2db      	uxtb	r3, r3
 8027464:	2b01      	cmp	r3, #1
 8027466:	d002      	beq.n	802746e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8027468:	2302      	movs	r3, #2
 802746a:	77fb      	strb	r3, [r7, #31]
    goto error;
 802746c:	e10b      	b.n	8027686 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 802746e:	68bb      	ldr	r3, [r7, #8]
 8027470:	2b00      	cmp	r3, #0
 8027472:	d002      	beq.n	802747a <HAL_SPI_Transmit+0x52>
 8027474:	88fb      	ldrh	r3, [r7, #6]
 8027476:	2b00      	cmp	r3, #0
 8027478:	d102      	bne.n	8027480 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 802747a:	2301      	movs	r3, #1
 802747c:	77fb      	strb	r3, [r7, #31]
    goto error;
 802747e:	e102      	b.n	8027686 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8027480:	68fb      	ldr	r3, [r7, #12]
 8027482:	2203      	movs	r2, #3
 8027484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027488:	68fb      	ldr	r3, [r7, #12]
 802748a:	2200      	movs	r2, #0
 802748c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 802748e:	68fb      	ldr	r3, [r7, #12]
 8027490:	68ba      	ldr	r2, [r7, #8]
 8027492:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8027494:	68fb      	ldr	r3, [r7, #12]
 8027496:	88fa      	ldrh	r2, [r7, #6]
 8027498:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802749a:	68fb      	ldr	r3, [r7, #12]
 802749c:	88fa      	ldrh	r2, [r7, #6]
 802749e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80274a0:	68fb      	ldr	r3, [r7, #12]
 80274a2:	2200      	movs	r2, #0
 80274a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80274a6:	68fb      	ldr	r3, [r7, #12]
 80274a8:	2200      	movs	r2, #0
 80274aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80274ac:	68fb      	ldr	r3, [r7, #12]
 80274ae:	2200      	movs	r2, #0
 80274b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80274b2:	68fb      	ldr	r3, [r7, #12]
 80274b4:	2200      	movs	r2, #0
 80274b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80274b8:	68fb      	ldr	r3, [r7, #12]
 80274ba:	2200      	movs	r2, #0
 80274bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80274be:	68fb      	ldr	r3, [r7, #12]
 80274c0:	689b      	ldr	r3, [r3, #8]
 80274c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80274c6:	d10f      	bne.n	80274e8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80274c8:	68fb      	ldr	r3, [r7, #12]
 80274ca:	681b      	ldr	r3, [r3, #0]
 80274cc:	681a      	ldr	r2, [r3, #0]
 80274ce:	68fb      	ldr	r3, [r7, #12]
 80274d0:	681b      	ldr	r3, [r3, #0]
 80274d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80274d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80274d8:	68fb      	ldr	r3, [r7, #12]
 80274da:	681b      	ldr	r3, [r3, #0]
 80274dc:	681a      	ldr	r2, [r3, #0]
 80274de:	68fb      	ldr	r3, [r7, #12]
 80274e0:	681b      	ldr	r3, [r3, #0]
 80274e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80274e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80274e8:	68fb      	ldr	r3, [r7, #12]
 80274ea:	681b      	ldr	r3, [r3, #0]
 80274ec:	681b      	ldr	r3, [r3, #0]
 80274ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80274f2:	2b40      	cmp	r3, #64	; 0x40
 80274f4:	d007      	beq.n	8027506 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80274f6:	68fb      	ldr	r3, [r7, #12]
 80274f8:	681b      	ldr	r3, [r3, #0]
 80274fa:	681a      	ldr	r2, [r3, #0]
 80274fc:	68fb      	ldr	r3, [r7, #12]
 80274fe:	681b      	ldr	r3, [r3, #0]
 8027500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027504:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8027506:	68fb      	ldr	r3, [r7, #12]
 8027508:	68db      	ldr	r3, [r3, #12]
 802750a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802750e:	d14b      	bne.n	80275a8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027510:	68fb      	ldr	r3, [r7, #12]
 8027512:	685b      	ldr	r3, [r3, #4]
 8027514:	2b00      	cmp	r3, #0
 8027516:	d002      	beq.n	802751e <HAL_SPI_Transmit+0xf6>
 8027518:	8afb      	ldrh	r3, [r7, #22]
 802751a:	2b01      	cmp	r3, #1
 802751c:	d13e      	bne.n	802759c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802751e:	68fb      	ldr	r3, [r7, #12]
 8027520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027522:	881a      	ldrh	r2, [r3, #0]
 8027524:	68fb      	ldr	r3, [r7, #12]
 8027526:	681b      	ldr	r3, [r3, #0]
 8027528:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802752a:	68fb      	ldr	r3, [r7, #12]
 802752c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802752e:	1c9a      	adds	r2, r3, #2
 8027530:	68fb      	ldr	r3, [r7, #12]
 8027532:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027534:	68fb      	ldr	r3, [r7, #12]
 8027536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027538:	b29b      	uxth	r3, r3
 802753a:	3b01      	subs	r3, #1
 802753c:	b29a      	uxth	r2, r3
 802753e:	68fb      	ldr	r3, [r7, #12]
 8027540:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8027542:	e02b      	b.n	802759c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8027544:	68fb      	ldr	r3, [r7, #12]
 8027546:	681b      	ldr	r3, [r3, #0]
 8027548:	689b      	ldr	r3, [r3, #8]
 802754a:	f003 0302 	and.w	r3, r3, #2
 802754e:	2b02      	cmp	r3, #2
 8027550:	d112      	bne.n	8027578 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027552:	68fb      	ldr	r3, [r7, #12]
 8027554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027556:	881a      	ldrh	r2, [r3, #0]
 8027558:	68fb      	ldr	r3, [r7, #12]
 802755a:	681b      	ldr	r3, [r3, #0]
 802755c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802755e:	68fb      	ldr	r3, [r7, #12]
 8027560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027562:	1c9a      	adds	r2, r3, #2
 8027564:	68fb      	ldr	r3, [r7, #12]
 8027566:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027568:	68fb      	ldr	r3, [r7, #12]
 802756a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802756c:	b29b      	uxth	r3, r3
 802756e:	3b01      	subs	r3, #1
 8027570:	b29a      	uxth	r2, r3
 8027572:	68fb      	ldr	r3, [r7, #12]
 8027574:	86da      	strh	r2, [r3, #54]	; 0x36
 8027576:	e011      	b.n	802759c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027578:	f7fb fc3e 	bl	8022df8 <HAL_GetTick>
 802757c:	4602      	mov	r2, r0
 802757e:	69bb      	ldr	r3, [r7, #24]
 8027580:	1ad3      	subs	r3, r2, r3
 8027582:	683a      	ldr	r2, [r7, #0]
 8027584:	429a      	cmp	r2, r3
 8027586:	d803      	bhi.n	8027590 <HAL_SPI_Transmit+0x168>
 8027588:	683b      	ldr	r3, [r7, #0]
 802758a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802758e:	d102      	bne.n	8027596 <HAL_SPI_Transmit+0x16e>
 8027590:	683b      	ldr	r3, [r7, #0]
 8027592:	2b00      	cmp	r3, #0
 8027594:	d102      	bne.n	802759c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8027596:	2303      	movs	r3, #3
 8027598:	77fb      	strb	r3, [r7, #31]
          goto error;
 802759a:	e074      	b.n	8027686 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 802759c:	68fb      	ldr	r3, [r7, #12]
 802759e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80275a0:	b29b      	uxth	r3, r3
 80275a2:	2b00      	cmp	r3, #0
 80275a4:	d1ce      	bne.n	8027544 <HAL_SPI_Transmit+0x11c>
 80275a6:	e04c      	b.n	8027642 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80275a8:	68fb      	ldr	r3, [r7, #12]
 80275aa:	685b      	ldr	r3, [r3, #4]
 80275ac:	2b00      	cmp	r3, #0
 80275ae:	d002      	beq.n	80275b6 <HAL_SPI_Transmit+0x18e>
 80275b0:	8afb      	ldrh	r3, [r7, #22]
 80275b2:	2b01      	cmp	r3, #1
 80275b4:	d140      	bne.n	8027638 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80275b6:	68fb      	ldr	r3, [r7, #12]
 80275b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80275ba:	68fb      	ldr	r3, [r7, #12]
 80275bc:	681b      	ldr	r3, [r3, #0]
 80275be:	330c      	adds	r3, #12
 80275c0:	7812      	ldrb	r2, [r2, #0]
 80275c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80275c4:	68fb      	ldr	r3, [r7, #12]
 80275c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80275c8:	1c5a      	adds	r2, r3, #1
 80275ca:	68fb      	ldr	r3, [r7, #12]
 80275cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80275ce:	68fb      	ldr	r3, [r7, #12]
 80275d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80275d2:	b29b      	uxth	r3, r3
 80275d4:	3b01      	subs	r3, #1
 80275d6:	b29a      	uxth	r2, r3
 80275d8:	68fb      	ldr	r3, [r7, #12]
 80275da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80275dc:	e02c      	b.n	8027638 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80275de:	68fb      	ldr	r3, [r7, #12]
 80275e0:	681b      	ldr	r3, [r3, #0]
 80275e2:	689b      	ldr	r3, [r3, #8]
 80275e4:	f003 0302 	and.w	r3, r3, #2
 80275e8:	2b02      	cmp	r3, #2
 80275ea:	d113      	bne.n	8027614 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80275ec:	68fb      	ldr	r3, [r7, #12]
 80275ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80275f0:	68fb      	ldr	r3, [r7, #12]
 80275f2:	681b      	ldr	r3, [r3, #0]
 80275f4:	330c      	adds	r3, #12
 80275f6:	7812      	ldrb	r2, [r2, #0]
 80275f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80275fa:	68fb      	ldr	r3, [r7, #12]
 80275fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80275fe:	1c5a      	adds	r2, r3, #1
 8027600:	68fb      	ldr	r3, [r7, #12]
 8027602:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027604:	68fb      	ldr	r3, [r7, #12]
 8027606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027608:	b29b      	uxth	r3, r3
 802760a:	3b01      	subs	r3, #1
 802760c:	b29a      	uxth	r2, r3
 802760e:	68fb      	ldr	r3, [r7, #12]
 8027610:	86da      	strh	r2, [r3, #54]	; 0x36
 8027612:	e011      	b.n	8027638 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027614:	f7fb fbf0 	bl	8022df8 <HAL_GetTick>
 8027618:	4602      	mov	r2, r0
 802761a:	69bb      	ldr	r3, [r7, #24]
 802761c:	1ad3      	subs	r3, r2, r3
 802761e:	683a      	ldr	r2, [r7, #0]
 8027620:	429a      	cmp	r2, r3
 8027622:	d803      	bhi.n	802762c <HAL_SPI_Transmit+0x204>
 8027624:	683b      	ldr	r3, [r7, #0]
 8027626:	f1b3 3fff 	cmp.w	r3, #4294967295
 802762a:	d102      	bne.n	8027632 <HAL_SPI_Transmit+0x20a>
 802762c:	683b      	ldr	r3, [r7, #0]
 802762e:	2b00      	cmp	r3, #0
 8027630:	d102      	bne.n	8027638 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8027632:	2303      	movs	r3, #3
 8027634:	77fb      	strb	r3, [r7, #31]
          goto error;
 8027636:	e026      	b.n	8027686 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8027638:	68fb      	ldr	r3, [r7, #12]
 802763a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802763c:	b29b      	uxth	r3, r3
 802763e:	2b00      	cmp	r3, #0
 8027640:	d1cd      	bne.n	80275de <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027642:	69ba      	ldr	r2, [r7, #24]
 8027644:	6839      	ldr	r1, [r7, #0]
 8027646:	68f8      	ldr	r0, [r7, #12]
 8027648:	f000 fbda 	bl	8027e00 <SPI_EndRxTxTransaction>
 802764c:	4603      	mov	r3, r0
 802764e:	2b00      	cmp	r3, #0
 8027650:	d002      	beq.n	8027658 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027652:	68fb      	ldr	r3, [r7, #12]
 8027654:	2220      	movs	r2, #32
 8027656:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8027658:	68fb      	ldr	r3, [r7, #12]
 802765a:	689b      	ldr	r3, [r3, #8]
 802765c:	2b00      	cmp	r3, #0
 802765e:	d10a      	bne.n	8027676 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8027660:	2300      	movs	r3, #0
 8027662:	613b      	str	r3, [r7, #16]
 8027664:	68fb      	ldr	r3, [r7, #12]
 8027666:	681b      	ldr	r3, [r3, #0]
 8027668:	68db      	ldr	r3, [r3, #12]
 802766a:	613b      	str	r3, [r7, #16]
 802766c:	68fb      	ldr	r3, [r7, #12]
 802766e:	681b      	ldr	r3, [r3, #0]
 8027670:	689b      	ldr	r3, [r3, #8]
 8027672:	613b      	str	r3, [r7, #16]
 8027674:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8027676:	68fb      	ldr	r3, [r7, #12]
 8027678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802767a:	2b00      	cmp	r3, #0
 802767c:	d002      	beq.n	8027684 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 802767e:	2301      	movs	r3, #1
 8027680:	77fb      	strb	r3, [r7, #31]
 8027682:	e000      	b.n	8027686 <HAL_SPI_Transmit+0x25e>
  }

error:
 8027684:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027686:	68fb      	ldr	r3, [r7, #12]
 8027688:	2201      	movs	r2, #1
 802768a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 802768e:	68fb      	ldr	r3, [r7, #12]
 8027690:	2200      	movs	r2, #0
 8027692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027696:	7ffb      	ldrb	r3, [r7, #31]
}
 8027698:	4618      	mov	r0, r3
 802769a:	3720      	adds	r7, #32
 802769c:	46bd      	mov	sp, r7
 802769e:	bd80      	pop	{r7, pc}

080276a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80276a0:	b580      	push	{r7, lr}
 80276a2:	b088      	sub	sp, #32
 80276a4:	af02      	add	r7, sp, #8
 80276a6:	60f8      	str	r0, [r7, #12]
 80276a8:	60b9      	str	r1, [r7, #8]
 80276aa:	603b      	str	r3, [r7, #0]
 80276ac:	4613      	mov	r3, r2
 80276ae:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80276b0:	2300      	movs	r3, #0
 80276b2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80276b4:	68fb      	ldr	r3, [r7, #12]
 80276b6:	685b      	ldr	r3, [r3, #4]
 80276b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80276bc:	d112      	bne.n	80276e4 <HAL_SPI_Receive+0x44>
 80276be:	68fb      	ldr	r3, [r7, #12]
 80276c0:	689b      	ldr	r3, [r3, #8]
 80276c2:	2b00      	cmp	r3, #0
 80276c4:	d10e      	bne.n	80276e4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80276c6:	68fb      	ldr	r3, [r7, #12]
 80276c8:	2204      	movs	r2, #4
 80276ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80276ce:	88fa      	ldrh	r2, [r7, #6]
 80276d0:	683b      	ldr	r3, [r7, #0]
 80276d2:	9300      	str	r3, [sp, #0]
 80276d4:	4613      	mov	r3, r2
 80276d6:	68ba      	ldr	r2, [r7, #8]
 80276d8:	68b9      	ldr	r1, [r7, #8]
 80276da:	68f8      	ldr	r0, [r7, #12]
 80276dc:	f000 f8f1 	bl	80278c2 <HAL_SPI_TransmitReceive>
 80276e0:	4603      	mov	r3, r0
 80276e2:	e0ea      	b.n	80278ba <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80276e4:	68fb      	ldr	r3, [r7, #12]
 80276e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80276ea:	2b01      	cmp	r3, #1
 80276ec:	d101      	bne.n	80276f2 <HAL_SPI_Receive+0x52>
 80276ee:	2302      	movs	r3, #2
 80276f0:	e0e3      	b.n	80278ba <HAL_SPI_Receive+0x21a>
 80276f2:	68fb      	ldr	r3, [r7, #12]
 80276f4:	2201      	movs	r2, #1
 80276f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80276fa:	f7fb fb7d 	bl	8022df8 <HAL_GetTick>
 80276fe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8027700:	68fb      	ldr	r3, [r7, #12]
 8027702:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027706:	b2db      	uxtb	r3, r3
 8027708:	2b01      	cmp	r3, #1
 802770a:	d002      	beq.n	8027712 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 802770c:	2302      	movs	r3, #2
 802770e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8027710:	e0ca      	b.n	80278a8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8027712:	68bb      	ldr	r3, [r7, #8]
 8027714:	2b00      	cmp	r3, #0
 8027716:	d002      	beq.n	802771e <HAL_SPI_Receive+0x7e>
 8027718:	88fb      	ldrh	r3, [r7, #6]
 802771a:	2b00      	cmp	r3, #0
 802771c:	d102      	bne.n	8027724 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 802771e:	2301      	movs	r3, #1
 8027720:	75fb      	strb	r3, [r7, #23]
    goto error;
 8027722:	e0c1      	b.n	80278a8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8027724:	68fb      	ldr	r3, [r7, #12]
 8027726:	2204      	movs	r2, #4
 8027728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802772c:	68fb      	ldr	r3, [r7, #12]
 802772e:	2200      	movs	r2, #0
 8027730:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8027732:	68fb      	ldr	r3, [r7, #12]
 8027734:	68ba      	ldr	r2, [r7, #8]
 8027736:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8027738:	68fb      	ldr	r3, [r7, #12]
 802773a:	88fa      	ldrh	r2, [r7, #6]
 802773c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 802773e:	68fb      	ldr	r3, [r7, #12]
 8027740:	88fa      	ldrh	r2, [r7, #6]
 8027742:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8027744:	68fb      	ldr	r3, [r7, #12]
 8027746:	2200      	movs	r2, #0
 8027748:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 802774a:	68fb      	ldr	r3, [r7, #12]
 802774c:	2200      	movs	r2, #0
 802774e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8027750:	68fb      	ldr	r3, [r7, #12]
 8027752:	2200      	movs	r2, #0
 8027754:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8027756:	68fb      	ldr	r3, [r7, #12]
 8027758:	2200      	movs	r2, #0
 802775a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 802775c:	68fb      	ldr	r3, [r7, #12]
 802775e:	2200      	movs	r2, #0
 8027760:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027762:	68fb      	ldr	r3, [r7, #12]
 8027764:	689b      	ldr	r3, [r3, #8]
 8027766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802776a:	d10f      	bne.n	802778c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 802776c:	68fb      	ldr	r3, [r7, #12]
 802776e:	681b      	ldr	r3, [r3, #0]
 8027770:	681a      	ldr	r2, [r3, #0]
 8027772:	68fb      	ldr	r3, [r7, #12]
 8027774:	681b      	ldr	r3, [r3, #0]
 8027776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802777a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 802777c:	68fb      	ldr	r3, [r7, #12]
 802777e:	681b      	ldr	r3, [r3, #0]
 8027780:	681a      	ldr	r2, [r3, #0]
 8027782:	68fb      	ldr	r3, [r7, #12]
 8027784:	681b      	ldr	r3, [r3, #0]
 8027786:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802778a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802778c:	68fb      	ldr	r3, [r7, #12]
 802778e:	681b      	ldr	r3, [r3, #0]
 8027790:	681b      	ldr	r3, [r3, #0]
 8027792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027796:	2b40      	cmp	r3, #64	; 0x40
 8027798:	d007      	beq.n	80277aa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802779a:	68fb      	ldr	r3, [r7, #12]
 802779c:	681b      	ldr	r3, [r3, #0]
 802779e:	681a      	ldr	r2, [r3, #0]
 80277a0:	68fb      	ldr	r3, [r7, #12]
 80277a2:	681b      	ldr	r3, [r3, #0]
 80277a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80277a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80277aa:	68fb      	ldr	r3, [r7, #12]
 80277ac:	68db      	ldr	r3, [r3, #12]
 80277ae:	2b00      	cmp	r3, #0
 80277b0:	d162      	bne.n	8027878 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80277b2:	e02e      	b.n	8027812 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80277b4:	68fb      	ldr	r3, [r7, #12]
 80277b6:	681b      	ldr	r3, [r3, #0]
 80277b8:	689b      	ldr	r3, [r3, #8]
 80277ba:	f003 0301 	and.w	r3, r3, #1
 80277be:	2b01      	cmp	r3, #1
 80277c0:	d115      	bne.n	80277ee <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80277c2:	68fb      	ldr	r3, [r7, #12]
 80277c4:	681b      	ldr	r3, [r3, #0]
 80277c6:	f103 020c 	add.w	r2, r3, #12
 80277ca:	68fb      	ldr	r3, [r7, #12]
 80277cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80277ce:	7812      	ldrb	r2, [r2, #0]
 80277d0:	b2d2      	uxtb	r2, r2
 80277d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80277d4:	68fb      	ldr	r3, [r7, #12]
 80277d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80277d8:	1c5a      	adds	r2, r3, #1
 80277da:	68fb      	ldr	r3, [r7, #12]
 80277dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80277de:	68fb      	ldr	r3, [r7, #12]
 80277e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80277e2:	b29b      	uxth	r3, r3
 80277e4:	3b01      	subs	r3, #1
 80277e6:	b29a      	uxth	r2, r3
 80277e8:	68fb      	ldr	r3, [r7, #12]
 80277ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80277ec:	e011      	b.n	8027812 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80277ee:	f7fb fb03 	bl	8022df8 <HAL_GetTick>
 80277f2:	4602      	mov	r2, r0
 80277f4:	693b      	ldr	r3, [r7, #16]
 80277f6:	1ad3      	subs	r3, r2, r3
 80277f8:	683a      	ldr	r2, [r7, #0]
 80277fa:	429a      	cmp	r2, r3
 80277fc:	d803      	bhi.n	8027806 <HAL_SPI_Receive+0x166>
 80277fe:	683b      	ldr	r3, [r7, #0]
 8027800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027804:	d102      	bne.n	802780c <HAL_SPI_Receive+0x16c>
 8027806:	683b      	ldr	r3, [r7, #0]
 8027808:	2b00      	cmp	r3, #0
 802780a:	d102      	bne.n	8027812 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 802780c:	2303      	movs	r3, #3
 802780e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8027810:	e04a      	b.n	80278a8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8027812:	68fb      	ldr	r3, [r7, #12]
 8027814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027816:	b29b      	uxth	r3, r3
 8027818:	2b00      	cmp	r3, #0
 802781a:	d1cb      	bne.n	80277b4 <HAL_SPI_Receive+0x114>
 802781c:	e031      	b.n	8027882 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 802781e:	68fb      	ldr	r3, [r7, #12]
 8027820:	681b      	ldr	r3, [r3, #0]
 8027822:	689b      	ldr	r3, [r3, #8]
 8027824:	f003 0301 	and.w	r3, r3, #1
 8027828:	2b01      	cmp	r3, #1
 802782a:	d113      	bne.n	8027854 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 802782c:	68fb      	ldr	r3, [r7, #12]
 802782e:	681b      	ldr	r3, [r3, #0]
 8027830:	68da      	ldr	r2, [r3, #12]
 8027832:	68fb      	ldr	r3, [r7, #12]
 8027834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027836:	b292      	uxth	r2, r2
 8027838:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802783a:	68fb      	ldr	r3, [r7, #12]
 802783c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802783e:	1c9a      	adds	r2, r3, #2
 8027840:	68fb      	ldr	r3, [r7, #12]
 8027842:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027844:	68fb      	ldr	r3, [r7, #12]
 8027846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027848:	b29b      	uxth	r3, r3
 802784a:	3b01      	subs	r3, #1
 802784c:	b29a      	uxth	r2, r3
 802784e:	68fb      	ldr	r3, [r7, #12]
 8027850:	87da      	strh	r2, [r3, #62]	; 0x3e
 8027852:	e011      	b.n	8027878 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027854:	f7fb fad0 	bl	8022df8 <HAL_GetTick>
 8027858:	4602      	mov	r2, r0
 802785a:	693b      	ldr	r3, [r7, #16]
 802785c:	1ad3      	subs	r3, r2, r3
 802785e:	683a      	ldr	r2, [r7, #0]
 8027860:	429a      	cmp	r2, r3
 8027862:	d803      	bhi.n	802786c <HAL_SPI_Receive+0x1cc>
 8027864:	683b      	ldr	r3, [r7, #0]
 8027866:	f1b3 3fff 	cmp.w	r3, #4294967295
 802786a:	d102      	bne.n	8027872 <HAL_SPI_Receive+0x1d2>
 802786c:	683b      	ldr	r3, [r7, #0]
 802786e:	2b00      	cmp	r3, #0
 8027870:	d102      	bne.n	8027878 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8027872:	2303      	movs	r3, #3
 8027874:	75fb      	strb	r3, [r7, #23]
          goto error;
 8027876:	e017      	b.n	80278a8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8027878:	68fb      	ldr	r3, [r7, #12]
 802787a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802787c:	b29b      	uxth	r3, r3
 802787e:	2b00      	cmp	r3, #0
 8027880:	d1cd      	bne.n	802781e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027882:	693a      	ldr	r2, [r7, #16]
 8027884:	6839      	ldr	r1, [r7, #0]
 8027886:	68f8      	ldr	r0, [r7, #12]
 8027888:	f000 fa54 	bl	8027d34 <SPI_EndRxTransaction>
 802788c:	4603      	mov	r3, r0
 802788e:	2b00      	cmp	r3, #0
 8027890:	d002      	beq.n	8027898 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027892:	68fb      	ldr	r3, [r7, #12]
 8027894:	2220      	movs	r2, #32
 8027896:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8027898:	68fb      	ldr	r3, [r7, #12]
 802789a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802789c:	2b00      	cmp	r3, #0
 802789e:	d002      	beq.n	80278a6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80278a0:	2301      	movs	r3, #1
 80278a2:	75fb      	strb	r3, [r7, #23]
 80278a4:	e000      	b.n	80278a8 <HAL_SPI_Receive+0x208>
  }

error :
 80278a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80278a8:	68fb      	ldr	r3, [r7, #12]
 80278aa:	2201      	movs	r2, #1
 80278ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80278b0:	68fb      	ldr	r3, [r7, #12]
 80278b2:	2200      	movs	r2, #0
 80278b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80278b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80278ba:	4618      	mov	r0, r3
 80278bc:	3718      	adds	r7, #24
 80278be:	46bd      	mov	sp, r7
 80278c0:	bd80      	pop	{r7, pc}

080278c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80278c2:	b580      	push	{r7, lr}
 80278c4:	b08c      	sub	sp, #48	; 0x30
 80278c6:	af00      	add	r7, sp, #0
 80278c8:	60f8      	str	r0, [r7, #12]
 80278ca:	60b9      	str	r1, [r7, #8]
 80278cc:	607a      	str	r2, [r7, #4]
 80278ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80278d0:	2301      	movs	r3, #1
 80278d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80278d4:	2300      	movs	r3, #0
 80278d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80278da:	68fb      	ldr	r3, [r7, #12]
 80278dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80278e0:	2b01      	cmp	r3, #1
 80278e2:	d101      	bne.n	80278e8 <HAL_SPI_TransmitReceive+0x26>
 80278e4:	2302      	movs	r3, #2
 80278e6:	e18a      	b.n	8027bfe <HAL_SPI_TransmitReceive+0x33c>
 80278e8:	68fb      	ldr	r3, [r7, #12]
 80278ea:	2201      	movs	r2, #1
 80278ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80278f0:	f7fb fa82 	bl	8022df8 <HAL_GetTick>
 80278f4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80278f6:	68fb      	ldr	r3, [r7, #12]
 80278f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80278fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8027900:	68fb      	ldr	r3, [r7, #12]
 8027902:	685b      	ldr	r3, [r3, #4]
 8027904:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8027906:	887b      	ldrh	r3, [r7, #2]
 8027908:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 802790a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802790e:	2b01      	cmp	r3, #1
 8027910:	d00f      	beq.n	8027932 <HAL_SPI_TransmitReceive+0x70>
 8027912:	69fb      	ldr	r3, [r7, #28]
 8027914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027918:	d107      	bne.n	802792a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 802791a:	68fb      	ldr	r3, [r7, #12]
 802791c:	689b      	ldr	r3, [r3, #8]
 802791e:	2b00      	cmp	r3, #0
 8027920:	d103      	bne.n	802792a <HAL_SPI_TransmitReceive+0x68>
 8027922:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027926:	2b04      	cmp	r3, #4
 8027928:	d003      	beq.n	8027932 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 802792a:	2302      	movs	r3, #2
 802792c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027930:	e15b      	b.n	8027bea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8027932:	68bb      	ldr	r3, [r7, #8]
 8027934:	2b00      	cmp	r3, #0
 8027936:	d005      	beq.n	8027944 <HAL_SPI_TransmitReceive+0x82>
 8027938:	687b      	ldr	r3, [r7, #4]
 802793a:	2b00      	cmp	r3, #0
 802793c:	d002      	beq.n	8027944 <HAL_SPI_TransmitReceive+0x82>
 802793e:	887b      	ldrh	r3, [r7, #2]
 8027940:	2b00      	cmp	r3, #0
 8027942:	d103      	bne.n	802794c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8027944:	2301      	movs	r3, #1
 8027946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 802794a:	e14e      	b.n	8027bea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802794c:	68fb      	ldr	r3, [r7, #12]
 802794e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027952:	b2db      	uxtb	r3, r3
 8027954:	2b04      	cmp	r3, #4
 8027956:	d003      	beq.n	8027960 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8027958:	68fb      	ldr	r3, [r7, #12]
 802795a:	2205      	movs	r2, #5
 802795c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027960:	68fb      	ldr	r3, [r7, #12]
 8027962:	2200      	movs	r2, #0
 8027964:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8027966:	68fb      	ldr	r3, [r7, #12]
 8027968:	687a      	ldr	r2, [r7, #4]
 802796a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 802796c:	68fb      	ldr	r3, [r7, #12]
 802796e:	887a      	ldrh	r2, [r7, #2]
 8027970:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8027972:	68fb      	ldr	r3, [r7, #12]
 8027974:	887a      	ldrh	r2, [r7, #2]
 8027976:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8027978:	68fb      	ldr	r3, [r7, #12]
 802797a:	68ba      	ldr	r2, [r7, #8]
 802797c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 802797e:	68fb      	ldr	r3, [r7, #12]
 8027980:	887a      	ldrh	r2, [r7, #2]
 8027982:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8027984:	68fb      	ldr	r3, [r7, #12]
 8027986:	887a      	ldrh	r2, [r7, #2]
 8027988:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 802798a:	68fb      	ldr	r3, [r7, #12]
 802798c:	2200      	movs	r2, #0
 802798e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8027990:	68fb      	ldr	r3, [r7, #12]
 8027992:	2200      	movs	r2, #0
 8027994:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8027996:	68fb      	ldr	r3, [r7, #12]
 8027998:	681b      	ldr	r3, [r3, #0]
 802799a:	681b      	ldr	r3, [r3, #0]
 802799c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80279a0:	2b40      	cmp	r3, #64	; 0x40
 80279a2:	d007      	beq.n	80279b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80279a4:	68fb      	ldr	r3, [r7, #12]
 80279a6:	681b      	ldr	r3, [r3, #0]
 80279a8:	681a      	ldr	r2, [r3, #0]
 80279aa:	68fb      	ldr	r3, [r7, #12]
 80279ac:	681b      	ldr	r3, [r3, #0]
 80279ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80279b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80279b4:	68fb      	ldr	r3, [r7, #12]
 80279b6:	68db      	ldr	r3, [r3, #12]
 80279b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80279bc:	d178      	bne.n	8027ab0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80279be:	68fb      	ldr	r3, [r7, #12]
 80279c0:	685b      	ldr	r3, [r3, #4]
 80279c2:	2b00      	cmp	r3, #0
 80279c4:	d002      	beq.n	80279cc <HAL_SPI_TransmitReceive+0x10a>
 80279c6:	8b7b      	ldrh	r3, [r7, #26]
 80279c8:	2b01      	cmp	r3, #1
 80279ca:	d166      	bne.n	8027a9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80279cc:	68fb      	ldr	r3, [r7, #12]
 80279ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80279d0:	881a      	ldrh	r2, [r3, #0]
 80279d2:	68fb      	ldr	r3, [r7, #12]
 80279d4:	681b      	ldr	r3, [r3, #0]
 80279d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80279d8:	68fb      	ldr	r3, [r7, #12]
 80279da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80279dc:	1c9a      	adds	r2, r3, #2
 80279de:	68fb      	ldr	r3, [r7, #12]
 80279e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80279e2:	68fb      	ldr	r3, [r7, #12]
 80279e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80279e6:	b29b      	uxth	r3, r3
 80279e8:	3b01      	subs	r3, #1
 80279ea:	b29a      	uxth	r2, r3
 80279ec:	68fb      	ldr	r3, [r7, #12]
 80279ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80279f0:	e053      	b.n	8027a9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80279f2:	68fb      	ldr	r3, [r7, #12]
 80279f4:	681b      	ldr	r3, [r3, #0]
 80279f6:	689b      	ldr	r3, [r3, #8]
 80279f8:	f003 0302 	and.w	r3, r3, #2
 80279fc:	2b02      	cmp	r3, #2
 80279fe:	d11b      	bne.n	8027a38 <HAL_SPI_TransmitReceive+0x176>
 8027a00:	68fb      	ldr	r3, [r7, #12]
 8027a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027a04:	b29b      	uxth	r3, r3
 8027a06:	2b00      	cmp	r3, #0
 8027a08:	d016      	beq.n	8027a38 <HAL_SPI_TransmitReceive+0x176>
 8027a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027a0c:	2b01      	cmp	r3, #1
 8027a0e:	d113      	bne.n	8027a38 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027a10:	68fb      	ldr	r3, [r7, #12]
 8027a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027a14:	881a      	ldrh	r2, [r3, #0]
 8027a16:	68fb      	ldr	r3, [r7, #12]
 8027a18:	681b      	ldr	r3, [r3, #0]
 8027a1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8027a1c:	68fb      	ldr	r3, [r7, #12]
 8027a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027a20:	1c9a      	adds	r2, r3, #2
 8027a22:	68fb      	ldr	r3, [r7, #12]
 8027a24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027a26:	68fb      	ldr	r3, [r7, #12]
 8027a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027a2a:	b29b      	uxth	r3, r3
 8027a2c:	3b01      	subs	r3, #1
 8027a2e:	b29a      	uxth	r2, r3
 8027a30:	68fb      	ldr	r3, [r7, #12]
 8027a32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027a34:	2300      	movs	r3, #0
 8027a36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027a38:	68fb      	ldr	r3, [r7, #12]
 8027a3a:	681b      	ldr	r3, [r3, #0]
 8027a3c:	689b      	ldr	r3, [r3, #8]
 8027a3e:	f003 0301 	and.w	r3, r3, #1
 8027a42:	2b01      	cmp	r3, #1
 8027a44:	d119      	bne.n	8027a7a <HAL_SPI_TransmitReceive+0x1b8>
 8027a46:	68fb      	ldr	r3, [r7, #12]
 8027a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027a4a:	b29b      	uxth	r3, r3
 8027a4c:	2b00      	cmp	r3, #0
 8027a4e:	d014      	beq.n	8027a7a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8027a50:	68fb      	ldr	r3, [r7, #12]
 8027a52:	681b      	ldr	r3, [r3, #0]
 8027a54:	68da      	ldr	r2, [r3, #12]
 8027a56:	68fb      	ldr	r3, [r7, #12]
 8027a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027a5a:	b292      	uxth	r2, r2
 8027a5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8027a5e:	68fb      	ldr	r3, [r7, #12]
 8027a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027a62:	1c9a      	adds	r2, r3, #2
 8027a64:	68fb      	ldr	r3, [r7, #12]
 8027a66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027a68:	68fb      	ldr	r3, [r7, #12]
 8027a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027a6c:	b29b      	uxth	r3, r3
 8027a6e:	3b01      	subs	r3, #1
 8027a70:	b29a      	uxth	r2, r3
 8027a72:	68fb      	ldr	r3, [r7, #12]
 8027a74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8027a76:	2301      	movs	r3, #1
 8027a78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8027a7a:	f7fb f9bd 	bl	8022df8 <HAL_GetTick>
 8027a7e:	4602      	mov	r2, r0
 8027a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027a82:	1ad3      	subs	r3, r2, r3
 8027a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027a86:	429a      	cmp	r2, r3
 8027a88:	d807      	bhi.n	8027a9a <HAL_SPI_TransmitReceive+0x1d8>
 8027a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027a90:	d003      	beq.n	8027a9a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8027a92:	2303      	movs	r3, #3
 8027a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8027a98:	e0a7      	b.n	8027bea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027a9a:	68fb      	ldr	r3, [r7, #12]
 8027a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027a9e:	b29b      	uxth	r3, r3
 8027aa0:	2b00      	cmp	r3, #0
 8027aa2:	d1a6      	bne.n	80279f2 <HAL_SPI_TransmitReceive+0x130>
 8027aa4:	68fb      	ldr	r3, [r7, #12]
 8027aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027aa8:	b29b      	uxth	r3, r3
 8027aaa:	2b00      	cmp	r3, #0
 8027aac:	d1a1      	bne.n	80279f2 <HAL_SPI_TransmitReceive+0x130>
 8027aae:	e07c      	b.n	8027baa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027ab0:	68fb      	ldr	r3, [r7, #12]
 8027ab2:	685b      	ldr	r3, [r3, #4]
 8027ab4:	2b00      	cmp	r3, #0
 8027ab6:	d002      	beq.n	8027abe <HAL_SPI_TransmitReceive+0x1fc>
 8027ab8:	8b7b      	ldrh	r3, [r7, #26]
 8027aba:	2b01      	cmp	r3, #1
 8027abc:	d16b      	bne.n	8027b96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027abe:	68fb      	ldr	r3, [r7, #12]
 8027ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027ac2:	68fb      	ldr	r3, [r7, #12]
 8027ac4:	681b      	ldr	r3, [r3, #0]
 8027ac6:	330c      	adds	r3, #12
 8027ac8:	7812      	ldrb	r2, [r2, #0]
 8027aca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8027acc:	68fb      	ldr	r3, [r7, #12]
 8027ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027ad0:	1c5a      	adds	r2, r3, #1
 8027ad2:	68fb      	ldr	r3, [r7, #12]
 8027ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027ad6:	68fb      	ldr	r3, [r7, #12]
 8027ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027ada:	b29b      	uxth	r3, r3
 8027adc:	3b01      	subs	r3, #1
 8027ade:	b29a      	uxth	r2, r3
 8027ae0:	68fb      	ldr	r3, [r7, #12]
 8027ae2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027ae4:	e057      	b.n	8027b96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027ae6:	68fb      	ldr	r3, [r7, #12]
 8027ae8:	681b      	ldr	r3, [r3, #0]
 8027aea:	689b      	ldr	r3, [r3, #8]
 8027aec:	f003 0302 	and.w	r3, r3, #2
 8027af0:	2b02      	cmp	r3, #2
 8027af2:	d11c      	bne.n	8027b2e <HAL_SPI_TransmitReceive+0x26c>
 8027af4:	68fb      	ldr	r3, [r7, #12]
 8027af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027af8:	b29b      	uxth	r3, r3
 8027afa:	2b00      	cmp	r3, #0
 8027afc:	d017      	beq.n	8027b2e <HAL_SPI_TransmitReceive+0x26c>
 8027afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b00:	2b01      	cmp	r3, #1
 8027b02:	d114      	bne.n	8027b2e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8027b04:	68fb      	ldr	r3, [r7, #12]
 8027b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027b08:	68fb      	ldr	r3, [r7, #12]
 8027b0a:	681b      	ldr	r3, [r3, #0]
 8027b0c:	330c      	adds	r3, #12
 8027b0e:	7812      	ldrb	r2, [r2, #0]
 8027b10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8027b12:	68fb      	ldr	r3, [r7, #12]
 8027b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027b16:	1c5a      	adds	r2, r3, #1
 8027b18:	68fb      	ldr	r3, [r7, #12]
 8027b1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027b1c:	68fb      	ldr	r3, [r7, #12]
 8027b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027b20:	b29b      	uxth	r3, r3
 8027b22:	3b01      	subs	r3, #1
 8027b24:	b29a      	uxth	r2, r3
 8027b26:	68fb      	ldr	r3, [r7, #12]
 8027b28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027b2a:	2300      	movs	r3, #0
 8027b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027b2e:	68fb      	ldr	r3, [r7, #12]
 8027b30:	681b      	ldr	r3, [r3, #0]
 8027b32:	689b      	ldr	r3, [r3, #8]
 8027b34:	f003 0301 	and.w	r3, r3, #1
 8027b38:	2b01      	cmp	r3, #1
 8027b3a:	d119      	bne.n	8027b70 <HAL_SPI_TransmitReceive+0x2ae>
 8027b3c:	68fb      	ldr	r3, [r7, #12]
 8027b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027b40:	b29b      	uxth	r3, r3
 8027b42:	2b00      	cmp	r3, #0
 8027b44:	d014      	beq.n	8027b70 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8027b46:	68fb      	ldr	r3, [r7, #12]
 8027b48:	681b      	ldr	r3, [r3, #0]
 8027b4a:	68da      	ldr	r2, [r3, #12]
 8027b4c:	68fb      	ldr	r3, [r7, #12]
 8027b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027b50:	b2d2      	uxtb	r2, r2
 8027b52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8027b54:	68fb      	ldr	r3, [r7, #12]
 8027b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027b58:	1c5a      	adds	r2, r3, #1
 8027b5a:	68fb      	ldr	r3, [r7, #12]
 8027b5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027b5e:	68fb      	ldr	r3, [r7, #12]
 8027b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027b62:	b29b      	uxth	r3, r3
 8027b64:	3b01      	subs	r3, #1
 8027b66:	b29a      	uxth	r2, r3
 8027b68:	68fb      	ldr	r3, [r7, #12]
 8027b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8027b6c:	2301      	movs	r3, #1
 8027b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8027b70:	f7fb f942 	bl	8022df8 <HAL_GetTick>
 8027b74:	4602      	mov	r2, r0
 8027b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027b78:	1ad3      	subs	r3, r2, r3
 8027b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027b7c:	429a      	cmp	r2, r3
 8027b7e:	d803      	bhi.n	8027b88 <HAL_SPI_TransmitReceive+0x2c6>
 8027b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027b86:	d102      	bne.n	8027b8e <HAL_SPI_TransmitReceive+0x2cc>
 8027b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027b8a:	2b00      	cmp	r3, #0
 8027b8c:	d103      	bne.n	8027b96 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8027b8e:	2303      	movs	r3, #3
 8027b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8027b94:	e029      	b.n	8027bea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027b96:	68fb      	ldr	r3, [r7, #12]
 8027b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027b9a:	b29b      	uxth	r3, r3
 8027b9c:	2b00      	cmp	r3, #0
 8027b9e:	d1a2      	bne.n	8027ae6 <HAL_SPI_TransmitReceive+0x224>
 8027ba0:	68fb      	ldr	r3, [r7, #12]
 8027ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027ba4:	b29b      	uxth	r3, r3
 8027ba6:	2b00      	cmp	r3, #0
 8027ba8:	d19d      	bne.n	8027ae6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027bac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8027bae:	68f8      	ldr	r0, [r7, #12]
 8027bb0:	f000 f926 	bl	8027e00 <SPI_EndRxTxTransaction>
 8027bb4:	4603      	mov	r3, r0
 8027bb6:	2b00      	cmp	r3, #0
 8027bb8:	d006      	beq.n	8027bc8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8027bba:	2301      	movs	r3, #1
 8027bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027bc0:	68fb      	ldr	r3, [r7, #12]
 8027bc2:	2220      	movs	r2, #32
 8027bc4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8027bc6:	e010      	b.n	8027bea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8027bc8:	68fb      	ldr	r3, [r7, #12]
 8027bca:	689b      	ldr	r3, [r3, #8]
 8027bcc:	2b00      	cmp	r3, #0
 8027bce:	d10b      	bne.n	8027be8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8027bd0:	2300      	movs	r3, #0
 8027bd2:	617b      	str	r3, [r7, #20]
 8027bd4:	68fb      	ldr	r3, [r7, #12]
 8027bd6:	681b      	ldr	r3, [r3, #0]
 8027bd8:	68db      	ldr	r3, [r3, #12]
 8027bda:	617b      	str	r3, [r7, #20]
 8027bdc:	68fb      	ldr	r3, [r7, #12]
 8027bde:	681b      	ldr	r3, [r3, #0]
 8027be0:	689b      	ldr	r3, [r3, #8]
 8027be2:	617b      	str	r3, [r7, #20]
 8027be4:	697b      	ldr	r3, [r7, #20]
 8027be6:	e000      	b.n	8027bea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8027be8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027bea:	68fb      	ldr	r3, [r7, #12]
 8027bec:	2201      	movs	r2, #1
 8027bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8027bf2:	68fb      	ldr	r3, [r7, #12]
 8027bf4:	2200      	movs	r2, #0
 8027bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027bfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8027bfe:	4618      	mov	r0, r3
 8027c00:	3730      	adds	r7, #48	; 0x30
 8027c02:	46bd      	mov	sp, r7
 8027c04:	bd80      	pop	{r7, pc}

08027c06 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8027c06:	b480      	push	{r7}
 8027c08:	b083      	sub	sp, #12
 8027c0a:	af00      	add	r7, sp, #0
 8027c0c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8027c0e:	687b      	ldr	r3, [r7, #4]
 8027c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027c14:	b2db      	uxtb	r3, r3
}
 8027c16:	4618      	mov	r0, r3
 8027c18:	370c      	adds	r7, #12
 8027c1a:	46bd      	mov	sp, r7
 8027c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c20:	4770      	bx	lr
	...

08027c24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8027c24:	b580      	push	{r7, lr}
 8027c26:	b088      	sub	sp, #32
 8027c28:	af00      	add	r7, sp, #0
 8027c2a:	60f8      	str	r0, [r7, #12]
 8027c2c:	60b9      	str	r1, [r7, #8]
 8027c2e:	603b      	str	r3, [r7, #0]
 8027c30:	4613      	mov	r3, r2
 8027c32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8027c34:	f7fb f8e0 	bl	8022df8 <HAL_GetTick>
 8027c38:	4602      	mov	r2, r0
 8027c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027c3c:	1a9b      	subs	r3, r3, r2
 8027c3e:	683a      	ldr	r2, [r7, #0]
 8027c40:	4413      	add	r3, r2
 8027c42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8027c44:	f7fb f8d8 	bl	8022df8 <HAL_GetTick>
 8027c48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8027c4a:	4b39      	ldr	r3, [pc, #228]	; (8027d30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8027c4c:	681b      	ldr	r3, [r3, #0]
 8027c4e:	015b      	lsls	r3, r3, #5
 8027c50:	0d1b      	lsrs	r3, r3, #20
 8027c52:	69fa      	ldr	r2, [r7, #28]
 8027c54:	fb02 f303 	mul.w	r3, r2, r3
 8027c58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8027c5a:	e054      	b.n	8027d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8027c5c:	683b      	ldr	r3, [r7, #0]
 8027c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027c62:	d050      	beq.n	8027d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8027c64:	f7fb f8c8 	bl	8022df8 <HAL_GetTick>
 8027c68:	4602      	mov	r2, r0
 8027c6a:	69bb      	ldr	r3, [r7, #24]
 8027c6c:	1ad3      	subs	r3, r2, r3
 8027c6e:	69fa      	ldr	r2, [r7, #28]
 8027c70:	429a      	cmp	r2, r3
 8027c72:	d902      	bls.n	8027c7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8027c74:	69fb      	ldr	r3, [r7, #28]
 8027c76:	2b00      	cmp	r3, #0
 8027c78:	d13d      	bne.n	8027cf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8027c7a:	68fb      	ldr	r3, [r7, #12]
 8027c7c:	681b      	ldr	r3, [r3, #0]
 8027c7e:	685a      	ldr	r2, [r3, #4]
 8027c80:	68fb      	ldr	r3, [r7, #12]
 8027c82:	681b      	ldr	r3, [r3, #0]
 8027c84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8027c88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027c8a:	68fb      	ldr	r3, [r7, #12]
 8027c8c:	685b      	ldr	r3, [r3, #4]
 8027c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027c92:	d111      	bne.n	8027cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8027c94:	68fb      	ldr	r3, [r7, #12]
 8027c96:	689b      	ldr	r3, [r3, #8]
 8027c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027c9c:	d004      	beq.n	8027ca8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8027c9e:	68fb      	ldr	r3, [r7, #12]
 8027ca0:	689b      	ldr	r3, [r3, #8]
 8027ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027ca6:	d107      	bne.n	8027cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8027ca8:	68fb      	ldr	r3, [r7, #12]
 8027caa:	681b      	ldr	r3, [r3, #0]
 8027cac:	681a      	ldr	r2, [r3, #0]
 8027cae:	68fb      	ldr	r3, [r7, #12]
 8027cb0:	681b      	ldr	r3, [r3, #0]
 8027cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027cb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8027cb8:	68fb      	ldr	r3, [r7, #12]
 8027cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027cc0:	d10f      	bne.n	8027ce2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8027cc2:	68fb      	ldr	r3, [r7, #12]
 8027cc4:	681b      	ldr	r3, [r3, #0]
 8027cc6:	681a      	ldr	r2, [r3, #0]
 8027cc8:	68fb      	ldr	r3, [r7, #12]
 8027cca:	681b      	ldr	r3, [r3, #0]
 8027ccc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8027cd0:	601a      	str	r2, [r3, #0]
 8027cd2:	68fb      	ldr	r3, [r7, #12]
 8027cd4:	681b      	ldr	r3, [r3, #0]
 8027cd6:	681a      	ldr	r2, [r3, #0]
 8027cd8:	68fb      	ldr	r3, [r7, #12]
 8027cda:	681b      	ldr	r3, [r3, #0]
 8027cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8027ce0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8027ce2:	68fb      	ldr	r3, [r7, #12]
 8027ce4:	2201      	movs	r2, #1
 8027ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8027cea:	68fb      	ldr	r3, [r7, #12]
 8027cec:	2200      	movs	r2, #0
 8027cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8027cf2:	2303      	movs	r3, #3
 8027cf4:	e017      	b.n	8027d26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8027cf6:	697b      	ldr	r3, [r7, #20]
 8027cf8:	2b00      	cmp	r3, #0
 8027cfa:	d101      	bne.n	8027d00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8027cfc:	2300      	movs	r3, #0
 8027cfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8027d00:	697b      	ldr	r3, [r7, #20]
 8027d02:	3b01      	subs	r3, #1
 8027d04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8027d06:	68fb      	ldr	r3, [r7, #12]
 8027d08:	681b      	ldr	r3, [r3, #0]
 8027d0a:	689a      	ldr	r2, [r3, #8]
 8027d0c:	68bb      	ldr	r3, [r7, #8]
 8027d0e:	4013      	ands	r3, r2
 8027d10:	68ba      	ldr	r2, [r7, #8]
 8027d12:	429a      	cmp	r2, r3
 8027d14:	bf0c      	ite	eq
 8027d16:	2301      	moveq	r3, #1
 8027d18:	2300      	movne	r3, #0
 8027d1a:	b2db      	uxtb	r3, r3
 8027d1c:	461a      	mov	r2, r3
 8027d1e:	79fb      	ldrb	r3, [r7, #7]
 8027d20:	429a      	cmp	r2, r3
 8027d22:	d19b      	bne.n	8027c5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8027d24:	2300      	movs	r3, #0
}
 8027d26:	4618      	mov	r0, r3
 8027d28:	3720      	adds	r7, #32
 8027d2a:	46bd      	mov	sp, r7
 8027d2c:	bd80      	pop	{r7, pc}
 8027d2e:	bf00      	nop
 8027d30:	20000000 	.word	0x20000000

08027d34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8027d34:	b580      	push	{r7, lr}
 8027d36:	b086      	sub	sp, #24
 8027d38:	af02      	add	r7, sp, #8
 8027d3a:	60f8      	str	r0, [r7, #12]
 8027d3c:	60b9      	str	r1, [r7, #8]
 8027d3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027d40:	68fb      	ldr	r3, [r7, #12]
 8027d42:	685b      	ldr	r3, [r3, #4]
 8027d44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027d48:	d111      	bne.n	8027d6e <SPI_EndRxTransaction+0x3a>
 8027d4a:	68fb      	ldr	r3, [r7, #12]
 8027d4c:	689b      	ldr	r3, [r3, #8]
 8027d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027d52:	d004      	beq.n	8027d5e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8027d54:	68fb      	ldr	r3, [r7, #12]
 8027d56:	689b      	ldr	r3, [r3, #8]
 8027d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027d5c:	d107      	bne.n	8027d6e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8027d5e:	68fb      	ldr	r3, [r7, #12]
 8027d60:	681b      	ldr	r3, [r3, #0]
 8027d62:	681a      	ldr	r2, [r3, #0]
 8027d64:	68fb      	ldr	r3, [r7, #12]
 8027d66:	681b      	ldr	r3, [r3, #0]
 8027d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027d6c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8027d6e:	68fb      	ldr	r3, [r7, #12]
 8027d70:	685b      	ldr	r3, [r3, #4]
 8027d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027d76:	d12a      	bne.n	8027dce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8027d78:	68fb      	ldr	r3, [r7, #12]
 8027d7a:	689b      	ldr	r3, [r3, #8]
 8027d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027d80:	d012      	beq.n	8027da8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8027d82:	687b      	ldr	r3, [r7, #4]
 8027d84:	9300      	str	r3, [sp, #0]
 8027d86:	68bb      	ldr	r3, [r7, #8]
 8027d88:	2200      	movs	r2, #0
 8027d8a:	2180      	movs	r1, #128	; 0x80
 8027d8c:	68f8      	ldr	r0, [r7, #12]
 8027d8e:	f7ff ff49 	bl	8027c24 <SPI_WaitFlagStateUntilTimeout>
 8027d92:	4603      	mov	r3, r0
 8027d94:	2b00      	cmp	r3, #0
 8027d96:	d02d      	beq.n	8027df4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8027d98:	68fb      	ldr	r3, [r7, #12]
 8027d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027d9c:	f043 0220 	orr.w	r2, r3, #32
 8027da0:	68fb      	ldr	r3, [r7, #12]
 8027da2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8027da4:	2303      	movs	r3, #3
 8027da6:	e026      	b.n	8027df6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8027da8:	687b      	ldr	r3, [r7, #4]
 8027daa:	9300      	str	r3, [sp, #0]
 8027dac:	68bb      	ldr	r3, [r7, #8]
 8027dae:	2200      	movs	r2, #0
 8027db0:	2101      	movs	r1, #1
 8027db2:	68f8      	ldr	r0, [r7, #12]
 8027db4:	f7ff ff36 	bl	8027c24 <SPI_WaitFlagStateUntilTimeout>
 8027db8:	4603      	mov	r3, r0
 8027dba:	2b00      	cmp	r3, #0
 8027dbc:	d01a      	beq.n	8027df4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8027dbe:	68fb      	ldr	r3, [r7, #12]
 8027dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027dc2:	f043 0220 	orr.w	r2, r3, #32
 8027dc6:	68fb      	ldr	r3, [r7, #12]
 8027dc8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8027dca:	2303      	movs	r3, #3
 8027dcc:	e013      	b.n	8027df6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8027dce:	687b      	ldr	r3, [r7, #4]
 8027dd0:	9300      	str	r3, [sp, #0]
 8027dd2:	68bb      	ldr	r3, [r7, #8]
 8027dd4:	2200      	movs	r2, #0
 8027dd6:	2101      	movs	r1, #1
 8027dd8:	68f8      	ldr	r0, [r7, #12]
 8027dda:	f7ff ff23 	bl	8027c24 <SPI_WaitFlagStateUntilTimeout>
 8027dde:	4603      	mov	r3, r0
 8027de0:	2b00      	cmp	r3, #0
 8027de2:	d007      	beq.n	8027df4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8027de4:	68fb      	ldr	r3, [r7, #12]
 8027de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027de8:	f043 0220 	orr.w	r2, r3, #32
 8027dec:	68fb      	ldr	r3, [r7, #12]
 8027dee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8027df0:	2303      	movs	r3, #3
 8027df2:	e000      	b.n	8027df6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8027df4:	2300      	movs	r3, #0
}
 8027df6:	4618      	mov	r0, r3
 8027df8:	3710      	adds	r7, #16
 8027dfa:	46bd      	mov	sp, r7
 8027dfc:	bd80      	pop	{r7, pc}
	...

08027e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8027e00:	b580      	push	{r7, lr}
 8027e02:	b088      	sub	sp, #32
 8027e04:	af02      	add	r7, sp, #8
 8027e06:	60f8      	str	r0, [r7, #12]
 8027e08:	60b9      	str	r1, [r7, #8]
 8027e0a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8027e0c:	4b1b      	ldr	r3, [pc, #108]	; (8027e7c <SPI_EndRxTxTransaction+0x7c>)
 8027e0e:	681b      	ldr	r3, [r3, #0]
 8027e10:	4a1b      	ldr	r2, [pc, #108]	; (8027e80 <SPI_EndRxTxTransaction+0x80>)
 8027e12:	fba2 2303 	umull	r2, r3, r2, r3
 8027e16:	0d5b      	lsrs	r3, r3, #21
 8027e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8027e1c:	fb02 f303 	mul.w	r3, r2, r3
 8027e20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8027e22:	68fb      	ldr	r3, [r7, #12]
 8027e24:	685b      	ldr	r3, [r3, #4]
 8027e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027e2a:	d112      	bne.n	8027e52 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8027e2c:	687b      	ldr	r3, [r7, #4]
 8027e2e:	9300      	str	r3, [sp, #0]
 8027e30:	68bb      	ldr	r3, [r7, #8]
 8027e32:	2200      	movs	r2, #0
 8027e34:	2180      	movs	r1, #128	; 0x80
 8027e36:	68f8      	ldr	r0, [r7, #12]
 8027e38:	f7ff fef4 	bl	8027c24 <SPI_WaitFlagStateUntilTimeout>
 8027e3c:	4603      	mov	r3, r0
 8027e3e:	2b00      	cmp	r3, #0
 8027e40:	d016      	beq.n	8027e70 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8027e42:	68fb      	ldr	r3, [r7, #12]
 8027e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027e46:	f043 0220 	orr.w	r2, r3, #32
 8027e4a:	68fb      	ldr	r3, [r7, #12]
 8027e4c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8027e4e:	2303      	movs	r3, #3
 8027e50:	e00f      	b.n	8027e72 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8027e52:	697b      	ldr	r3, [r7, #20]
 8027e54:	2b00      	cmp	r3, #0
 8027e56:	d00a      	beq.n	8027e6e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8027e58:	697b      	ldr	r3, [r7, #20]
 8027e5a:	3b01      	subs	r3, #1
 8027e5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8027e5e:	68fb      	ldr	r3, [r7, #12]
 8027e60:	681b      	ldr	r3, [r3, #0]
 8027e62:	689b      	ldr	r3, [r3, #8]
 8027e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027e68:	2b80      	cmp	r3, #128	; 0x80
 8027e6a:	d0f2      	beq.n	8027e52 <SPI_EndRxTxTransaction+0x52>
 8027e6c:	e000      	b.n	8027e70 <SPI_EndRxTxTransaction+0x70>
        break;
 8027e6e:	bf00      	nop
  }

  return HAL_OK;
 8027e70:	2300      	movs	r3, #0
}
 8027e72:	4618      	mov	r0, r3
 8027e74:	3718      	adds	r7, #24
 8027e76:	46bd      	mov	sp, r7
 8027e78:	bd80      	pop	{r7, pc}
 8027e7a:	bf00      	nop
 8027e7c:	20000000 	.word	0x20000000
 8027e80:	165e9f81 	.word	0x165e9f81

08027e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8027e84:	b580      	push	{r7, lr}
 8027e86:	b082      	sub	sp, #8
 8027e88:	af00      	add	r7, sp, #0
 8027e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8027e8c:	687b      	ldr	r3, [r7, #4]
 8027e8e:	2b00      	cmp	r3, #0
 8027e90:	d101      	bne.n	8027e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8027e92:	2301      	movs	r3, #1
 8027e94:	e041      	b.n	8027f1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8027e96:	687b      	ldr	r3, [r7, #4]
 8027e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8027e9c:	b2db      	uxtb	r3, r3
 8027e9e:	2b00      	cmp	r3, #0
 8027ea0:	d106      	bne.n	8027eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8027ea2:	687b      	ldr	r3, [r7, #4]
 8027ea4:	2200      	movs	r2, #0
 8027ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8027eaa:	6878      	ldr	r0, [r7, #4]
 8027eac:	f7f9 fa62 	bl	8021374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8027eb0:	687b      	ldr	r3, [r7, #4]
 8027eb2:	2202      	movs	r2, #2
 8027eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8027eb8:	687b      	ldr	r3, [r7, #4]
 8027eba:	681a      	ldr	r2, [r3, #0]
 8027ebc:	687b      	ldr	r3, [r7, #4]
 8027ebe:	3304      	adds	r3, #4
 8027ec0:	4619      	mov	r1, r3
 8027ec2:	4610      	mov	r0, r2
 8027ec4:	f000 fa96 	bl	80283f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8027ec8:	687b      	ldr	r3, [r7, #4]
 8027eca:	2201      	movs	r2, #1
 8027ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8027ed0:	687b      	ldr	r3, [r7, #4]
 8027ed2:	2201      	movs	r2, #1
 8027ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8027ed8:	687b      	ldr	r3, [r7, #4]
 8027eda:	2201      	movs	r2, #1
 8027edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8027ee0:	687b      	ldr	r3, [r7, #4]
 8027ee2:	2201      	movs	r2, #1
 8027ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8027ee8:	687b      	ldr	r3, [r7, #4]
 8027eea:	2201      	movs	r2, #1
 8027eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8027ef0:	687b      	ldr	r3, [r7, #4]
 8027ef2:	2201      	movs	r2, #1
 8027ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8027ef8:	687b      	ldr	r3, [r7, #4]
 8027efa:	2201      	movs	r2, #1
 8027efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8027f00:	687b      	ldr	r3, [r7, #4]
 8027f02:	2201      	movs	r2, #1
 8027f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8027f08:	687b      	ldr	r3, [r7, #4]
 8027f0a:	2201      	movs	r2, #1
 8027f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8027f10:	687b      	ldr	r3, [r7, #4]
 8027f12:	2201      	movs	r2, #1
 8027f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8027f18:	2300      	movs	r3, #0
}
 8027f1a:	4618      	mov	r0, r3
 8027f1c:	3708      	adds	r7, #8
 8027f1e:	46bd      	mov	sp, r7
 8027f20:	bd80      	pop	{r7, pc}
	...

08027f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8027f24:	b480      	push	{r7}
 8027f26:	b085      	sub	sp, #20
 8027f28:	af00      	add	r7, sp, #0
 8027f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8027f2c:	687b      	ldr	r3, [r7, #4]
 8027f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8027f32:	b2db      	uxtb	r3, r3
 8027f34:	2b01      	cmp	r3, #1
 8027f36:	d001      	beq.n	8027f3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8027f38:	2301      	movs	r3, #1
 8027f3a:	e04e      	b.n	8027fda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8027f3c:	687b      	ldr	r3, [r7, #4]
 8027f3e:	2202      	movs	r2, #2
 8027f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8027f44:	687b      	ldr	r3, [r7, #4]
 8027f46:	681b      	ldr	r3, [r3, #0]
 8027f48:	68da      	ldr	r2, [r3, #12]
 8027f4a:	687b      	ldr	r3, [r7, #4]
 8027f4c:	681b      	ldr	r3, [r3, #0]
 8027f4e:	f042 0201 	orr.w	r2, r2, #1
 8027f52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8027f54:	687b      	ldr	r3, [r7, #4]
 8027f56:	681b      	ldr	r3, [r3, #0]
 8027f58:	4a23      	ldr	r2, [pc, #140]	; (8027fe8 <HAL_TIM_Base_Start_IT+0xc4>)
 8027f5a:	4293      	cmp	r3, r2
 8027f5c:	d022      	beq.n	8027fa4 <HAL_TIM_Base_Start_IT+0x80>
 8027f5e:	687b      	ldr	r3, [r7, #4]
 8027f60:	681b      	ldr	r3, [r3, #0]
 8027f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8027f66:	d01d      	beq.n	8027fa4 <HAL_TIM_Base_Start_IT+0x80>
 8027f68:	687b      	ldr	r3, [r7, #4]
 8027f6a:	681b      	ldr	r3, [r3, #0]
 8027f6c:	4a1f      	ldr	r2, [pc, #124]	; (8027fec <HAL_TIM_Base_Start_IT+0xc8>)
 8027f6e:	4293      	cmp	r3, r2
 8027f70:	d018      	beq.n	8027fa4 <HAL_TIM_Base_Start_IT+0x80>
 8027f72:	687b      	ldr	r3, [r7, #4]
 8027f74:	681b      	ldr	r3, [r3, #0]
 8027f76:	4a1e      	ldr	r2, [pc, #120]	; (8027ff0 <HAL_TIM_Base_Start_IT+0xcc>)
 8027f78:	4293      	cmp	r3, r2
 8027f7a:	d013      	beq.n	8027fa4 <HAL_TIM_Base_Start_IT+0x80>
 8027f7c:	687b      	ldr	r3, [r7, #4]
 8027f7e:	681b      	ldr	r3, [r3, #0]
 8027f80:	4a1c      	ldr	r2, [pc, #112]	; (8027ff4 <HAL_TIM_Base_Start_IT+0xd0>)
 8027f82:	4293      	cmp	r3, r2
 8027f84:	d00e      	beq.n	8027fa4 <HAL_TIM_Base_Start_IT+0x80>
 8027f86:	687b      	ldr	r3, [r7, #4]
 8027f88:	681b      	ldr	r3, [r3, #0]
 8027f8a:	4a1b      	ldr	r2, [pc, #108]	; (8027ff8 <HAL_TIM_Base_Start_IT+0xd4>)
 8027f8c:	4293      	cmp	r3, r2
 8027f8e:	d009      	beq.n	8027fa4 <HAL_TIM_Base_Start_IT+0x80>
 8027f90:	687b      	ldr	r3, [r7, #4]
 8027f92:	681b      	ldr	r3, [r3, #0]
 8027f94:	4a19      	ldr	r2, [pc, #100]	; (8027ffc <HAL_TIM_Base_Start_IT+0xd8>)
 8027f96:	4293      	cmp	r3, r2
 8027f98:	d004      	beq.n	8027fa4 <HAL_TIM_Base_Start_IT+0x80>
 8027f9a:	687b      	ldr	r3, [r7, #4]
 8027f9c:	681b      	ldr	r3, [r3, #0]
 8027f9e:	4a18      	ldr	r2, [pc, #96]	; (8028000 <HAL_TIM_Base_Start_IT+0xdc>)
 8027fa0:	4293      	cmp	r3, r2
 8027fa2:	d111      	bne.n	8027fc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8027fa4:	687b      	ldr	r3, [r7, #4]
 8027fa6:	681b      	ldr	r3, [r3, #0]
 8027fa8:	689b      	ldr	r3, [r3, #8]
 8027faa:	f003 0307 	and.w	r3, r3, #7
 8027fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8027fb0:	68fb      	ldr	r3, [r7, #12]
 8027fb2:	2b06      	cmp	r3, #6
 8027fb4:	d010      	beq.n	8027fd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8027fb6:	687b      	ldr	r3, [r7, #4]
 8027fb8:	681b      	ldr	r3, [r3, #0]
 8027fba:	681a      	ldr	r2, [r3, #0]
 8027fbc:	687b      	ldr	r3, [r7, #4]
 8027fbe:	681b      	ldr	r3, [r3, #0]
 8027fc0:	f042 0201 	orr.w	r2, r2, #1
 8027fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8027fc6:	e007      	b.n	8027fd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8027fc8:	687b      	ldr	r3, [r7, #4]
 8027fca:	681b      	ldr	r3, [r3, #0]
 8027fcc:	681a      	ldr	r2, [r3, #0]
 8027fce:	687b      	ldr	r3, [r7, #4]
 8027fd0:	681b      	ldr	r3, [r3, #0]
 8027fd2:	f042 0201 	orr.w	r2, r2, #1
 8027fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8027fd8:	2300      	movs	r3, #0
}
 8027fda:	4618      	mov	r0, r3
 8027fdc:	3714      	adds	r7, #20
 8027fde:	46bd      	mov	sp, r7
 8027fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fe4:	4770      	bx	lr
 8027fe6:	bf00      	nop
 8027fe8:	40010000 	.word	0x40010000
 8027fec:	40000400 	.word	0x40000400
 8027ff0:	40000800 	.word	0x40000800
 8027ff4:	40000c00 	.word	0x40000c00
 8027ff8:	40010400 	.word	0x40010400
 8027ffc:	40014000 	.word	0x40014000
 8028000:	40001800 	.word	0x40001800

08028004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8028004:	b580      	push	{r7, lr}
 8028006:	b082      	sub	sp, #8
 8028008:	af00      	add	r7, sp, #0
 802800a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 802800c:	687b      	ldr	r3, [r7, #4]
 802800e:	681b      	ldr	r3, [r3, #0]
 8028010:	691b      	ldr	r3, [r3, #16]
 8028012:	f003 0302 	and.w	r3, r3, #2
 8028016:	2b02      	cmp	r3, #2
 8028018:	d122      	bne.n	8028060 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 802801a:	687b      	ldr	r3, [r7, #4]
 802801c:	681b      	ldr	r3, [r3, #0]
 802801e:	68db      	ldr	r3, [r3, #12]
 8028020:	f003 0302 	and.w	r3, r3, #2
 8028024:	2b02      	cmp	r3, #2
 8028026:	d11b      	bne.n	8028060 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8028028:	687b      	ldr	r3, [r7, #4]
 802802a:	681b      	ldr	r3, [r3, #0]
 802802c:	f06f 0202 	mvn.w	r2, #2
 8028030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8028032:	687b      	ldr	r3, [r7, #4]
 8028034:	2201      	movs	r2, #1
 8028036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8028038:	687b      	ldr	r3, [r7, #4]
 802803a:	681b      	ldr	r3, [r3, #0]
 802803c:	699b      	ldr	r3, [r3, #24]
 802803e:	f003 0303 	and.w	r3, r3, #3
 8028042:	2b00      	cmp	r3, #0
 8028044:	d003      	beq.n	802804e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8028046:	6878      	ldr	r0, [r7, #4]
 8028048:	f000 f9b5 	bl	80283b6 <HAL_TIM_IC_CaptureCallback>
 802804c:	e005      	b.n	802805a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802804e:	6878      	ldr	r0, [r7, #4]
 8028050:	f000 f9a7 	bl	80283a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028054:	6878      	ldr	r0, [r7, #4]
 8028056:	f000 f9b8 	bl	80283ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802805a:	687b      	ldr	r3, [r7, #4]
 802805c:	2200      	movs	r2, #0
 802805e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8028060:	687b      	ldr	r3, [r7, #4]
 8028062:	681b      	ldr	r3, [r3, #0]
 8028064:	691b      	ldr	r3, [r3, #16]
 8028066:	f003 0304 	and.w	r3, r3, #4
 802806a:	2b04      	cmp	r3, #4
 802806c:	d122      	bne.n	80280b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802806e:	687b      	ldr	r3, [r7, #4]
 8028070:	681b      	ldr	r3, [r3, #0]
 8028072:	68db      	ldr	r3, [r3, #12]
 8028074:	f003 0304 	and.w	r3, r3, #4
 8028078:	2b04      	cmp	r3, #4
 802807a:	d11b      	bne.n	80280b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802807c:	687b      	ldr	r3, [r7, #4]
 802807e:	681b      	ldr	r3, [r3, #0]
 8028080:	f06f 0204 	mvn.w	r2, #4
 8028084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8028086:	687b      	ldr	r3, [r7, #4]
 8028088:	2202      	movs	r2, #2
 802808a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802808c:	687b      	ldr	r3, [r7, #4]
 802808e:	681b      	ldr	r3, [r3, #0]
 8028090:	699b      	ldr	r3, [r3, #24]
 8028092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028096:	2b00      	cmp	r3, #0
 8028098:	d003      	beq.n	80280a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802809a:	6878      	ldr	r0, [r7, #4]
 802809c:	f000 f98b 	bl	80283b6 <HAL_TIM_IC_CaptureCallback>
 80280a0:	e005      	b.n	80280ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80280a2:	6878      	ldr	r0, [r7, #4]
 80280a4:	f000 f97d 	bl	80283a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80280a8:	6878      	ldr	r0, [r7, #4]
 80280aa:	f000 f98e 	bl	80283ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80280ae:	687b      	ldr	r3, [r7, #4]
 80280b0:	2200      	movs	r2, #0
 80280b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80280b4:	687b      	ldr	r3, [r7, #4]
 80280b6:	681b      	ldr	r3, [r3, #0]
 80280b8:	691b      	ldr	r3, [r3, #16]
 80280ba:	f003 0308 	and.w	r3, r3, #8
 80280be:	2b08      	cmp	r3, #8
 80280c0:	d122      	bne.n	8028108 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80280c2:	687b      	ldr	r3, [r7, #4]
 80280c4:	681b      	ldr	r3, [r3, #0]
 80280c6:	68db      	ldr	r3, [r3, #12]
 80280c8:	f003 0308 	and.w	r3, r3, #8
 80280cc:	2b08      	cmp	r3, #8
 80280ce:	d11b      	bne.n	8028108 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80280d0:	687b      	ldr	r3, [r7, #4]
 80280d2:	681b      	ldr	r3, [r3, #0]
 80280d4:	f06f 0208 	mvn.w	r2, #8
 80280d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80280da:	687b      	ldr	r3, [r7, #4]
 80280dc:	2204      	movs	r2, #4
 80280de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80280e0:	687b      	ldr	r3, [r7, #4]
 80280e2:	681b      	ldr	r3, [r3, #0]
 80280e4:	69db      	ldr	r3, [r3, #28]
 80280e6:	f003 0303 	and.w	r3, r3, #3
 80280ea:	2b00      	cmp	r3, #0
 80280ec:	d003      	beq.n	80280f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80280ee:	6878      	ldr	r0, [r7, #4]
 80280f0:	f000 f961 	bl	80283b6 <HAL_TIM_IC_CaptureCallback>
 80280f4:	e005      	b.n	8028102 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80280f6:	6878      	ldr	r0, [r7, #4]
 80280f8:	f000 f953 	bl	80283a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80280fc:	6878      	ldr	r0, [r7, #4]
 80280fe:	f000 f964 	bl	80283ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028102:	687b      	ldr	r3, [r7, #4]
 8028104:	2200      	movs	r2, #0
 8028106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8028108:	687b      	ldr	r3, [r7, #4]
 802810a:	681b      	ldr	r3, [r3, #0]
 802810c:	691b      	ldr	r3, [r3, #16]
 802810e:	f003 0310 	and.w	r3, r3, #16
 8028112:	2b10      	cmp	r3, #16
 8028114:	d122      	bne.n	802815c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8028116:	687b      	ldr	r3, [r7, #4]
 8028118:	681b      	ldr	r3, [r3, #0]
 802811a:	68db      	ldr	r3, [r3, #12]
 802811c:	f003 0310 	and.w	r3, r3, #16
 8028120:	2b10      	cmp	r3, #16
 8028122:	d11b      	bne.n	802815c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8028124:	687b      	ldr	r3, [r7, #4]
 8028126:	681b      	ldr	r3, [r3, #0]
 8028128:	f06f 0210 	mvn.w	r2, #16
 802812c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802812e:	687b      	ldr	r3, [r7, #4]
 8028130:	2208      	movs	r2, #8
 8028132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8028134:	687b      	ldr	r3, [r7, #4]
 8028136:	681b      	ldr	r3, [r3, #0]
 8028138:	69db      	ldr	r3, [r3, #28]
 802813a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802813e:	2b00      	cmp	r3, #0
 8028140:	d003      	beq.n	802814a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028142:	6878      	ldr	r0, [r7, #4]
 8028144:	f000 f937 	bl	80283b6 <HAL_TIM_IC_CaptureCallback>
 8028148:	e005      	b.n	8028156 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802814a:	6878      	ldr	r0, [r7, #4]
 802814c:	f000 f929 	bl	80283a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028150:	6878      	ldr	r0, [r7, #4]
 8028152:	f000 f93a 	bl	80283ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028156:	687b      	ldr	r3, [r7, #4]
 8028158:	2200      	movs	r2, #0
 802815a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 802815c:	687b      	ldr	r3, [r7, #4]
 802815e:	681b      	ldr	r3, [r3, #0]
 8028160:	691b      	ldr	r3, [r3, #16]
 8028162:	f003 0301 	and.w	r3, r3, #1
 8028166:	2b01      	cmp	r3, #1
 8028168:	d10e      	bne.n	8028188 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802816a:	687b      	ldr	r3, [r7, #4]
 802816c:	681b      	ldr	r3, [r3, #0]
 802816e:	68db      	ldr	r3, [r3, #12]
 8028170:	f003 0301 	and.w	r3, r3, #1
 8028174:	2b01      	cmp	r3, #1
 8028176:	d107      	bne.n	8028188 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8028178:	687b      	ldr	r3, [r7, #4]
 802817a:	681b      	ldr	r3, [r3, #0]
 802817c:	f06f 0201 	mvn.w	r2, #1
 8028180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8028182:	6878      	ldr	r0, [r7, #4]
 8028184:	f7f8 fe6c 	bl	8020e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8028188:	687b      	ldr	r3, [r7, #4]
 802818a:	681b      	ldr	r3, [r3, #0]
 802818c:	691b      	ldr	r3, [r3, #16]
 802818e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028192:	2b80      	cmp	r3, #128	; 0x80
 8028194:	d10e      	bne.n	80281b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8028196:	687b      	ldr	r3, [r7, #4]
 8028198:	681b      	ldr	r3, [r3, #0]
 802819a:	68db      	ldr	r3, [r3, #12]
 802819c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80281a0:	2b80      	cmp	r3, #128	; 0x80
 80281a2:	d107      	bne.n	80281b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80281a4:	687b      	ldr	r3, [r7, #4]
 80281a6:	681b      	ldr	r3, [r3, #0]
 80281a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80281ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80281ae:	6878      	ldr	r0, [r7, #4]
 80281b0:	f000 fae0 	bl	8028774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80281b4:	687b      	ldr	r3, [r7, #4]
 80281b6:	681b      	ldr	r3, [r3, #0]
 80281b8:	691b      	ldr	r3, [r3, #16]
 80281ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80281be:	2b40      	cmp	r3, #64	; 0x40
 80281c0:	d10e      	bne.n	80281e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80281c2:	687b      	ldr	r3, [r7, #4]
 80281c4:	681b      	ldr	r3, [r3, #0]
 80281c6:	68db      	ldr	r3, [r3, #12]
 80281c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80281cc:	2b40      	cmp	r3, #64	; 0x40
 80281ce:	d107      	bne.n	80281e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80281d0:	687b      	ldr	r3, [r7, #4]
 80281d2:	681b      	ldr	r3, [r3, #0]
 80281d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80281d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80281da:	6878      	ldr	r0, [r7, #4]
 80281dc:	f000 f8ff 	bl	80283de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80281e0:	687b      	ldr	r3, [r7, #4]
 80281e2:	681b      	ldr	r3, [r3, #0]
 80281e4:	691b      	ldr	r3, [r3, #16]
 80281e6:	f003 0320 	and.w	r3, r3, #32
 80281ea:	2b20      	cmp	r3, #32
 80281ec:	d10e      	bne.n	802820c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80281ee:	687b      	ldr	r3, [r7, #4]
 80281f0:	681b      	ldr	r3, [r3, #0]
 80281f2:	68db      	ldr	r3, [r3, #12]
 80281f4:	f003 0320 	and.w	r3, r3, #32
 80281f8:	2b20      	cmp	r3, #32
 80281fa:	d107      	bne.n	802820c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80281fc:	687b      	ldr	r3, [r7, #4]
 80281fe:	681b      	ldr	r3, [r3, #0]
 8028200:	f06f 0220 	mvn.w	r2, #32
 8028204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8028206:	6878      	ldr	r0, [r7, #4]
 8028208:	f000 faaa 	bl	8028760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 802820c:	bf00      	nop
 802820e:	3708      	adds	r7, #8
 8028210:	46bd      	mov	sp, r7
 8028212:	bd80      	pop	{r7, pc}

08028214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8028214:	b580      	push	{r7, lr}
 8028216:	b084      	sub	sp, #16
 8028218:	af00      	add	r7, sp, #0
 802821a:	6078      	str	r0, [r7, #4]
 802821c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802821e:	2300      	movs	r3, #0
 8028220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8028222:	687b      	ldr	r3, [r7, #4]
 8028224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028228:	2b01      	cmp	r3, #1
 802822a:	d101      	bne.n	8028230 <HAL_TIM_ConfigClockSource+0x1c>
 802822c:	2302      	movs	r3, #2
 802822e:	e0b4      	b.n	802839a <HAL_TIM_ConfigClockSource+0x186>
 8028230:	687b      	ldr	r3, [r7, #4]
 8028232:	2201      	movs	r2, #1
 8028234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8028238:	687b      	ldr	r3, [r7, #4]
 802823a:	2202      	movs	r2, #2
 802823c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8028240:	687b      	ldr	r3, [r7, #4]
 8028242:	681b      	ldr	r3, [r3, #0]
 8028244:	689b      	ldr	r3, [r3, #8]
 8028246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8028248:	68bb      	ldr	r3, [r7, #8]
 802824a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802824e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8028250:	68bb      	ldr	r3, [r7, #8]
 8028252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8028256:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8028258:	687b      	ldr	r3, [r7, #4]
 802825a:	681b      	ldr	r3, [r3, #0]
 802825c:	68ba      	ldr	r2, [r7, #8]
 802825e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8028260:	683b      	ldr	r3, [r7, #0]
 8028262:	681b      	ldr	r3, [r3, #0]
 8028264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028268:	d03e      	beq.n	80282e8 <HAL_TIM_ConfigClockSource+0xd4>
 802826a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802826e:	f200 8087 	bhi.w	8028380 <HAL_TIM_ConfigClockSource+0x16c>
 8028272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028276:	f000 8086 	beq.w	8028386 <HAL_TIM_ConfigClockSource+0x172>
 802827a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802827e:	d87f      	bhi.n	8028380 <HAL_TIM_ConfigClockSource+0x16c>
 8028280:	2b70      	cmp	r3, #112	; 0x70
 8028282:	d01a      	beq.n	80282ba <HAL_TIM_ConfigClockSource+0xa6>
 8028284:	2b70      	cmp	r3, #112	; 0x70
 8028286:	d87b      	bhi.n	8028380 <HAL_TIM_ConfigClockSource+0x16c>
 8028288:	2b60      	cmp	r3, #96	; 0x60
 802828a:	d050      	beq.n	802832e <HAL_TIM_ConfigClockSource+0x11a>
 802828c:	2b60      	cmp	r3, #96	; 0x60
 802828e:	d877      	bhi.n	8028380 <HAL_TIM_ConfigClockSource+0x16c>
 8028290:	2b50      	cmp	r3, #80	; 0x50
 8028292:	d03c      	beq.n	802830e <HAL_TIM_ConfigClockSource+0xfa>
 8028294:	2b50      	cmp	r3, #80	; 0x50
 8028296:	d873      	bhi.n	8028380 <HAL_TIM_ConfigClockSource+0x16c>
 8028298:	2b40      	cmp	r3, #64	; 0x40
 802829a:	d058      	beq.n	802834e <HAL_TIM_ConfigClockSource+0x13a>
 802829c:	2b40      	cmp	r3, #64	; 0x40
 802829e:	d86f      	bhi.n	8028380 <HAL_TIM_ConfigClockSource+0x16c>
 80282a0:	2b30      	cmp	r3, #48	; 0x30
 80282a2:	d064      	beq.n	802836e <HAL_TIM_ConfigClockSource+0x15a>
 80282a4:	2b30      	cmp	r3, #48	; 0x30
 80282a6:	d86b      	bhi.n	8028380 <HAL_TIM_ConfigClockSource+0x16c>
 80282a8:	2b20      	cmp	r3, #32
 80282aa:	d060      	beq.n	802836e <HAL_TIM_ConfigClockSource+0x15a>
 80282ac:	2b20      	cmp	r3, #32
 80282ae:	d867      	bhi.n	8028380 <HAL_TIM_ConfigClockSource+0x16c>
 80282b0:	2b00      	cmp	r3, #0
 80282b2:	d05c      	beq.n	802836e <HAL_TIM_ConfigClockSource+0x15a>
 80282b4:	2b10      	cmp	r3, #16
 80282b6:	d05a      	beq.n	802836e <HAL_TIM_ConfigClockSource+0x15a>
 80282b8:	e062      	b.n	8028380 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80282ba:	687b      	ldr	r3, [r7, #4]
 80282bc:	6818      	ldr	r0, [r3, #0]
 80282be:	683b      	ldr	r3, [r7, #0]
 80282c0:	6899      	ldr	r1, [r3, #8]
 80282c2:	683b      	ldr	r3, [r7, #0]
 80282c4:	685a      	ldr	r2, [r3, #4]
 80282c6:	683b      	ldr	r3, [r7, #0]
 80282c8:	68db      	ldr	r3, [r3, #12]
 80282ca:	f000 f9ad 	bl	8028628 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80282ce:	687b      	ldr	r3, [r7, #4]
 80282d0:	681b      	ldr	r3, [r3, #0]
 80282d2:	689b      	ldr	r3, [r3, #8]
 80282d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80282d6:	68bb      	ldr	r3, [r7, #8]
 80282d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80282dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80282de:	687b      	ldr	r3, [r7, #4]
 80282e0:	681b      	ldr	r3, [r3, #0]
 80282e2:	68ba      	ldr	r2, [r7, #8]
 80282e4:	609a      	str	r2, [r3, #8]
      break;
 80282e6:	e04f      	b.n	8028388 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80282e8:	687b      	ldr	r3, [r7, #4]
 80282ea:	6818      	ldr	r0, [r3, #0]
 80282ec:	683b      	ldr	r3, [r7, #0]
 80282ee:	6899      	ldr	r1, [r3, #8]
 80282f0:	683b      	ldr	r3, [r7, #0]
 80282f2:	685a      	ldr	r2, [r3, #4]
 80282f4:	683b      	ldr	r3, [r7, #0]
 80282f6:	68db      	ldr	r3, [r3, #12]
 80282f8:	f000 f996 	bl	8028628 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80282fc:	687b      	ldr	r3, [r7, #4]
 80282fe:	681b      	ldr	r3, [r3, #0]
 8028300:	689a      	ldr	r2, [r3, #8]
 8028302:	687b      	ldr	r3, [r7, #4]
 8028304:	681b      	ldr	r3, [r3, #0]
 8028306:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802830a:	609a      	str	r2, [r3, #8]
      break;
 802830c:	e03c      	b.n	8028388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802830e:	687b      	ldr	r3, [r7, #4]
 8028310:	6818      	ldr	r0, [r3, #0]
 8028312:	683b      	ldr	r3, [r7, #0]
 8028314:	6859      	ldr	r1, [r3, #4]
 8028316:	683b      	ldr	r3, [r7, #0]
 8028318:	68db      	ldr	r3, [r3, #12]
 802831a:	461a      	mov	r2, r3
 802831c:	f000 f90a 	bl	8028534 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8028320:	687b      	ldr	r3, [r7, #4]
 8028322:	681b      	ldr	r3, [r3, #0]
 8028324:	2150      	movs	r1, #80	; 0x50
 8028326:	4618      	mov	r0, r3
 8028328:	f000 f963 	bl	80285f2 <TIM_ITRx_SetConfig>
      break;
 802832c:	e02c      	b.n	8028388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 802832e:	687b      	ldr	r3, [r7, #4]
 8028330:	6818      	ldr	r0, [r3, #0]
 8028332:	683b      	ldr	r3, [r7, #0]
 8028334:	6859      	ldr	r1, [r3, #4]
 8028336:	683b      	ldr	r3, [r7, #0]
 8028338:	68db      	ldr	r3, [r3, #12]
 802833a:	461a      	mov	r2, r3
 802833c:	f000 f929 	bl	8028592 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8028340:	687b      	ldr	r3, [r7, #4]
 8028342:	681b      	ldr	r3, [r3, #0]
 8028344:	2160      	movs	r1, #96	; 0x60
 8028346:	4618      	mov	r0, r3
 8028348:	f000 f953 	bl	80285f2 <TIM_ITRx_SetConfig>
      break;
 802834c:	e01c      	b.n	8028388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802834e:	687b      	ldr	r3, [r7, #4]
 8028350:	6818      	ldr	r0, [r3, #0]
 8028352:	683b      	ldr	r3, [r7, #0]
 8028354:	6859      	ldr	r1, [r3, #4]
 8028356:	683b      	ldr	r3, [r7, #0]
 8028358:	68db      	ldr	r3, [r3, #12]
 802835a:	461a      	mov	r2, r3
 802835c:	f000 f8ea 	bl	8028534 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8028360:	687b      	ldr	r3, [r7, #4]
 8028362:	681b      	ldr	r3, [r3, #0]
 8028364:	2140      	movs	r1, #64	; 0x40
 8028366:	4618      	mov	r0, r3
 8028368:	f000 f943 	bl	80285f2 <TIM_ITRx_SetConfig>
      break;
 802836c:	e00c      	b.n	8028388 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802836e:	687b      	ldr	r3, [r7, #4]
 8028370:	681a      	ldr	r2, [r3, #0]
 8028372:	683b      	ldr	r3, [r7, #0]
 8028374:	681b      	ldr	r3, [r3, #0]
 8028376:	4619      	mov	r1, r3
 8028378:	4610      	mov	r0, r2
 802837a:	f000 f93a 	bl	80285f2 <TIM_ITRx_SetConfig>
      break;
 802837e:	e003      	b.n	8028388 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8028380:	2301      	movs	r3, #1
 8028382:	73fb      	strb	r3, [r7, #15]
      break;
 8028384:	e000      	b.n	8028388 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8028386:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8028388:	687b      	ldr	r3, [r7, #4]
 802838a:	2201      	movs	r2, #1
 802838c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8028390:	687b      	ldr	r3, [r7, #4]
 8028392:	2200      	movs	r2, #0
 8028394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8028398:	7bfb      	ldrb	r3, [r7, #15]
}
 802839a:	4618      	mov	r0, r3
 802839c:	3710      	adds	r7, #16
 802839e:	46bd      	mov	sp, r7
 80283a0:	bd80      	pop	{r7, pc}

080283a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80283a2:	b480      	push	{r7}
 80283a4:	b083      	sub	sp, #12
 80283a6:	af00      	add	r7, sp, #0
 80283a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80283aa:	bf00      	nop
 80283ac:	370c      	adds	r7, #12
 80283ae:	46bd      	mov	sp, r7
 80283b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80283b4:	4770      	bx	lr

080283b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80283b6:	b480      	push	{r7}
 80283b8:	b083      	sub	sp, #12
 80283ba:	af00      	add	r7, sp, #0
 80283bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80283be:	bf00      	nop
 80283c0:	370c      	adds	r7, #12
 80283c2:	46bd      	mov	sp, r7
 80283c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80283c8:	4770      	bx	lr

080283ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80283ca:	b480      	push	{r7}
 80283cc:	b083      	sub	sp, #12
 80283ce:	af00      	add	r7, sp, #0
 80283d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80283d2:	bf00      	nop
 80283d4:	370c      	adds	r7, #12
 80283d6:	46bd      	mov	sp, r7
 80283d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80283dc:	4770      	bx	lr

080283de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80283de:	b480      	push	{r7}
 80283e0:	b083      	sub	sp, #12
 80283e2:	af00      	add	r7, sp, #0
 80283e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80283e6:	bf00      	nop
 80283e8:	370c      	adds	r7, #12
 80283ea:	46bd      	mov	sp, r7
 80283ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80283f0:	4770      	bx	lr
	...

080283f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80283f4:	b480      	push	{r7}
 80283f6:	b085      	sub	sp, #20
 80283f8:	af00      	add	r7, sp, #0
 80283fa:	6078      	str	r0, [r7, #4]
 80283fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80283fe:	687b      	ldr	r3, [r7, #4]
 8028400:	681b      	ldr	r3, [r3, #0]
 8028402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8028404:	687b      	ldr	r3, [r7, #4]
 8028406:	4a40      	ldr	r2, [pc, #256]	; (8028508 <TIM_Base_SetConfig+0x114>)
 8028408:	4293      	cmp	r3, r2
 802840a:	d013      	beq.n	8028434 <TIM_Base_SetConfig+0x40>
 802840c:	687b      	ldr	r3, [r7, #4]
 802840e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028412:	d00f      	beq.n	8028434 <TIM_Base_SetConfig+0x40>
 8028414:	687b      	ldr	r3, [r7, #4]
 8028416:	4a3d      	ldr	r2, [pc, #244]	; (802850c <TIM_Base_SetConfig+0x118>)
 8028418:	4293      	cmp	r3, r2
 802841a:	d00b      	beq.n	8028434 <TIM_Base_SetConfig+0x40>
 802841c:	687b      	ldr	r3, [r7, #4]
 802841e:	4a3c      	ldr	r2, [pc, #240]	; (8028510 <TIM_Base_SetConfig+0x11c>)
 8028420:	4293      	cmp	r3, r2
 8028422:	d007      	beq.n	8028434 <TIM_Base_SetConfig+0x40>
 8028424:	687b      	ldr	r3, [r7, #4]
 8028426:	4a3b      	ldr	r2, [pc, #236]	; (8028514 <TIM_Base_SetConfig+0x120>)
 8028428:	4293      	cmp	r3, r2
 802842a:	d003      	beq.n	8028434 <TIM_Base_SetConfig+0x40>
 802842c:	687b      	ldr	r3, [r7, #4]
 802842e:	4a3a      	ldr	r2, [pc, #232]	; (8028518 <TIM_Base_SetConfig+0x124>)
 8028430:	4293      	cmp	r3, r2
 8028432:	d108      	bne.n	8028446 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8028434:	68fb      	ldr	r3, [r7, #12]
 8028436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802843a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802843c:	683b      	ldr	r3, [r7, #0]
 802843e:	685b      	ldr	r3, [r3, #4]
 8028440:	68fa      	ldr	r2, [r7, #12]
 8028442:	4313      	orrs	r3, r2
 8028444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8028446:	687b      	ldr	r3, [r7, #4]
 8028448:	4a2f      	ldr	r2, [pc, #188]	; (8028508 <TIM_Base_SetConfig+0x114>)
 802844a:	4293      	cmp	r3, r2
 802844c:	d02b      	beq.n	80284a6 <TIM_Base_SetConfig+0xb2>
 802844e:	687b      	ldr	r3, [r7, #4]
 8028450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028454:	d027      	beq.n	80284a6 <TIM_Base_SetConfig+0xb2>
 8028456:	687b      	ldr	r3, [r7, #4]
 8028458:	4a2c      	ldr	r2, [pc, #176]	; (802850c <TIM_Base_SetConfig+0x118>)
 802845a:	4293      	cmp	r3, r2
 802845c:	d023      	beq.n	80284a6 <TIM_Base_SetConfig+0xb2>
 802845e:	687b      	ldr	r3, [r7, #4]
 8028460:	4a2b      	ldr	r2, [pc, #172]	; (8028510 <TIM_Base_SetConfig+0x11c>)
 8028462:	4293      	cmp	r3, r2
 8028464:	d01f      	beq.n	80284a6 <TIM_Base_SetConfig+0xb2>
 8028466:	687b      	ldr	r3, [r7, #4]
 8028468:	4a2a      	ldr	r2, [pc, #168]	; (8028514 <TIM_Base_SetConfig+0x120>)
 802846a:	4293      	cmp	r3, r2
 802846c:	d01b      	beq.n	80284a6 <TIM_Base_SetConfig+0xb2>
 802846e:	687b      	ldr	r3, [r7, #4]
 8028470:	4a29      	ldr	r2, [pc, #164]	; (8028518 <TIM_Base_SetConfig+0x124>)
 8028472:	4293      	cmp	r3, r2
 8028474:	d017      	beq.n	80284a6 <TIM_Base_SetConfig+0xb2>
 8028476:	687b      	ldr	r3, [r7, #4]
 8028478:	4a28      	ldr	r2, [pc, #160]	; (802851c <TIM_Base_SetConfig+0x128>)
 802847a:	4293      	cmp	r3, r2
 802847c:	d013      	beq.n	80284a6 <TIM_Base_SetConfig+0xb2>
 802847e:	687b      	ldr	r3, [r7, #4]
 8028480:	4a27      	ldr	r2, [pc, #156]	; (8028520 <TIM_Base_SetConfig+0x12c>)
 8028482:	4293      	cmp	r3, r2
 8028484:	d00f      	beq.n	80284a6 <TIM_Base_SetConfig+0xb2>
 8028486:	687b      	ldr	r3, [r7, #4]
 8028488:	4a26      	ldr	r2, [pc, #152]	; (8028524 <TIM_Base_SetConfig+0x130>)
 802848a:	4293      	cmp	r3, r2
 802848c:	d00b      	beq.n	80284a6 <TIM_Base_SetConfig+0xb2>
 802848e:	687b      	ldr	r3, [r7, #4]
 8028490:	4a25      	ldr	r2, [pc, #148]	; (8028528 <TIM_Base_SetConfig+0x134>)
 8028492:	4293      	cmp	r3, r2
 8028494:	d007      	beq.n	80284a6 <TIM_Base_SetConfig+0xb2>
 8028496:	687b      	ldr	r3, [r7, #4]
 8028498:	4a24      	ldr	r2, [pc, #144]	; (802852c <TIM_Base_SetConfig+0x138>)
 802849a:	4293      	cmp	r3, r2
 802849c:	d003      	beq.n	80284a6 <TIM_Base_SetConfig+0xb2>
 802849e:	687b      	ldr	r3, [r7, #4]
 80284a0:	4a23      	ldr	r2, [pc, #140]	; (8028530 <TIM_Base_SetConfig+0x13c>)
 80284a2:	4293      	cmp	r3, r2
 80284a4:	d108      	bne.n	80284b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80284a6:	68fb      	ldr	r3, [r7, #12]
 80284a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80284ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80284ae:	683b      	ldr	r3, [r7, #0]
 80284b0:	68db      	ldr	r3, [r3, #12]
 80284b2:	68fa      	ldr	r2, [r7, #12]
 80284b4:	4313      	orrs	r3, r2
 80284b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80284b8:	68fb      	ldr	r3, [r7, #12]
 80284ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80284be:	683b      	ldr	r3, [r7, #0]
 80284c0:	695b      	ldr	r3, [r3, #20]
 80284c2:	4313      	orrs	r3, r2
 80284c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80284c6:	687b      	ldr	r3, [r7, #4]
 80284c8:	68fa      	ldr	r2, [r7, #12]
 80284ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80284cc:	683b      	ldr	r3, [r7, #0]
 80284ce:	689a      	ldr	r2, [r3, #8]
 80284d0:	687b      	ldr	r3, [r7, #4]
 80284d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80284d4:	683b      	ldr	r3, [r7, #0]
 80284d6:	681a      	ldr	r2, [r3, #0]
 80284d8:	687b      	ldr	r3, [r7, #4]
 80284da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80284dc:	687b      	ldr	r3, [r7, #4]
 80284de:	4a0a      	ldr	r2, [pc, #40]	; (8028508 <TIM_Base_SetConfig+0x114>)
 80284e0:	4293      	cmp	r3, r2
 80284e2:	d003      	beq.n	80284ec <TIM_Base_SetConfig+0xf8>
 80284e4:	687b      	ldr	r3, [r7, #4]
 80284e6:	4a0c      	ldr	r2, [pc, #48]	; (8028518 <TIM_Base_SetConfig+0x124>)
 80284e8:	4293      	cmp	r3, r2
 80284ea:	d103      	bne.n	80284f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80284ec:	683b      	ldr	r3, [r7, #0]
 80284ee:	691a      	ldr	r2, [r3, #16]
 80284f0:	687b      	ldr	r3, [r7, #4]
 80284f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80284f4:	687b      	ldr	r3, [r7, #4]
 80284f6:	2201      	movs	r2, #1
 80284f8:	615a      	str	r2, [r3, #20]
}
 80284fa:	bf00      	nop
 80284fc:	3714      	adds	r7, #20
 80284fe:	46bd      	mov	sp, r7
 8028500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028504:	4770      	bx	lr
 8028506:	bf00      	nop
 8028508:	40010000 	.word	0x40010000
 802850c:	40000400 	.word	0x40000400
 8028510:	40000800 	.word	0x40000800
 8028514:	40000c00 	.word	0x40000c00
 8028518:	40010400 	.word	0x40010400
 802851c:	40014000 	.word	0x40014000
 8028520:	40014400 	.word	0x40014400
 8028524:	40014800 	.word	0x40014800
 8028528:	40001800 	.word	0x40001800
 802852c:	40001c00 	.word	0x40001c00
 8028530:	40002000 	.word	0x40002000

08028534 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8028534:	b480      	push	{r7}
 8028536:	b087      	sub	sp, #28
 8028538:	af00      	add	r7, sp, #0
 802853a:	60f8      	str	r0, [r7, #12]
 802853c:	60b9      	str	r1, [r7, #8]
 802853e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8028540:	68fb      	ldr	r3, [r7, #12]
 8028542:	6a1b      	ldr	r3, [r3, #32]
 8028544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8028546:	68fb      	ldr	r3, [r7, #12]
 8028548:	6a1b      	ldr	r3, [r3, #32]
 802854a:	f023 0201 	bic.w	r2, r3, #1
 802854e:	68fb      	ldr	r3, [r7, #12]
 8028550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8028552:	68fb      	ldr	r3, [r7, #12]
 8028554:	699b      	ldr	r3, [r3, #24]
 8028556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8028558:	693b      	ldr	r3, [r7, #16]
 802855a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802855e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8028560:	687b      	ldr	r3, [r7, #4]
 8028562:	011b      	lsls	r3, r3, #4
 8028564:	693a      	ldr	r2, [r7, #16]
 8028566:	4313      	orrs	r3, r2
 8028568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802856a:	697b      	ldr	r3, [r7, #20]
 802856c:	f023 030a 	bic.w	r3, r3, #10
 8028570:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8028572:	697a      	ldr	r2, [r7, #20]
 8028574:	68bb      	ldr	r3, [r7, #8]
 8028576:	4313      	orrs	r3, r2
 8028578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802857a:	68fb      	ldr	r3, [r7, #12]
 802857c:	693a      	ldr	r2, [r7, #16]
 802857e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8028580:	68fb      	ldr	r3, [r7, #12]
 8028582:	697a      	ldr	r2, [r7, #20]
 8028584:	621a      	str	r2, [r3, #32]
}
 8028586:	bf00      	nop
 8028588:	371c      	adds	r7, #28
 802858a:	46bd      	mov	sp, r7
 802858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028590:	4770      	bx	lr

08028592 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8028592:	b480      	push	{r7}
 8028594:	b087      	sub	sp, #28
 8028596:	af00      	add	r7, sp, #0
 8028598:	60f8      	str	r0, [r7, #12]
 802859a:	60b9      	str	r1, [r7, #8]
 802859c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802859e:	68fb      	ldr	r3, [r7, #12]
 80285a0:	6a1b      	ldr	r3, [r3, #32]
 80285a2:	f023 0210 	bic.w	r2, r3, #16
 80285a6:	68fb      	ldr	r3, [r7, #12]
 80285a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80285aa:	68fb      	ldr	r3, [r7, #12]
 80285ac:	699b      	ldr	r3, [r3, #24]
 80285ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80285b0:	68fb      	ldr	r3, [r7, #12]
 80285b2:	6a1b      	ldr	r3, [r3, #32]
 80285b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80285b6:	697b      	ldr	r3, [r7, #20]
 80285b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80285bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80285be:	687b      	ldr	r3, [r7, #4]
 80285c0:	031b      	lsls	r3, r3, #12
 80285c2:	697a      	ldr	r2, [r7, #20]
 80285c4:	4313      	orrs	r3, r2
 80285c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80285c8:	693b      	ldr	r3, [r7, #16]
 80285ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80285ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80285d0:	68bb      	ldr	r3, [r7, #8]
 80285d2:	011b      	lsls	r3, r3, #4
 80285d4:	693a      	ldr	r2, [r7, #16]
 80285d6:	4313      	orrs	r3, r2
 80285d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80285da:	68fb      	ldr	r3, [r7, #12]
 80285dc:	697a      	ldr	r2, [r7, #20]
 80285de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80285e0:	68fb      	ldr	r3, [r7, #12]
 80285e2:	693a      	ldr	r2, [r7, #16]
 80285e4:	621a      	str	r2, [r3, #32]
}
 80285e6:	bf00      	nop
 80285e8:	371c      	adds	r7, #28
 80285ea:	46bd      	mov	sp, r7
 80285ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80285f0:	4770      	bx	lr

080285f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80285f2:	b480      	push	{r7}
 80285f4:	b085      	sub	sp, #20
 80285f6:	af00      	add	r7, sp, #0
 80285f8:	6078      	str	r0, [r7, #4]
 80285fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80285fc:	687b      	ldr	r3, [r7, #4]
 80285fe:	689b      	ldr	r3, [r3, #8]
 8028600:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8028602:	68fb      	ldr	r3, [r7, #12]
 8028604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802860a:	683a      	ldr	r2, [r7, #0]
 802860c:	68fb      	ldr	r3, [r7, #12]
 802860e:	4313      	orrs	r3, r2
 8028610:	f043 0307 	orr.w	r3, r3, #7
 8028614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8028616:	687b      	ldr	r3, [r7, #4]
 8028618:	68fa      	ldr	r2, [r7, #12]
 802861a:	609a      	str	r2, [r3, #8]
}
 802861c:	bf00      	nop
 802861e:	3714      	adds	r7, #20
 8028620:	46bd      	mov	sp, r7
 8028622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028626:	4770      	bx	lr

08028628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8028628:	b480      	push	{r7}
 802862a:	b087      	sub	sp, #28
 802862c:	af00      	add	r7, sp, #0
 802862e:	60f8      	str	r0, [r7, #12]
 8028630:	60b9      	str	r1, [r7, #8]
 8028632:	607a      	str	r2, [r7, #4]
 8028634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8028636:	68fb      	ldr	r3, [r7, #12]
 8028638:	689b      	ldr	r3, [r3, #8]
 802863a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802863c:	697b      	ldr	r3, [r7, #20]
 802863e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8028642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8028644:	683b      	ldr	r3, [r7, #0]
 8028646:	021a      	lsls	r2, r3, #8
 8028648:	687b      	ldr	r3, [r7, #4]
 802864a:	431a      	orrs	r2, r3
 802864c:	68bb      	ldr	r3, [r7, #8]
 802864e:	4313      	orrs	r3, r2
 8028650:	697a      	ldr	r2, [r7, #20]
 8028652:	4313      	orrs	r3, r2
 8028654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8028656:	68fb      	ldr	r3, [r7, #12]
 8028658:	697a      	ldr	r2, [r7, #20]
 802865a:	609a      	str	r2, [r3, #8]
}
 802865c:	bf00      	nop
 802865e:	371c      	adds	r7, #28
 8028660:	46bd      	mov	sp, r7
 8028662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028666:	4770      	bx	lr

08028668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8028668:	b480      	push	{r7}
 802866a:	b085      	sub	sp, #20
 802866c:	af00      	add	r7, sp, #0
 802866e:	6078      	str	r0, [r7, #4]
 8028670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8028672:	687b      	ldr	r3, [r7, #4]
 8028674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028678:	2b01      	cmp	r3, #1
 802867a:	d101      	bne.n	8028680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802867c:	2302      	movs	r3, #2
 802867e:	e05a      	b.n	8028736 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8028680:	687b      	ldr	r3, [r7, #4]
 8028682:	2201      	movs	r2, #1
 8028684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028688:	687b      	ldr	r3, [r7, #4]
 802868a:	2202      	movs	r2, #2
 802868c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8028690:	687b      	ldr	r3, [r7, #4]
 8028692:	681b      	ldr	r3, [r3, #0]
 8028694:	685b      	ldr	r3, [r3, #4]
 8028696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8028698:	687b      	ldr	r3, [r7, #4]
 802869a:	681b      	ldr	r3, [r3, #0]
 802869c:	689b      	ldr	r3, [r3, #8]
 802869e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80286a0:	68fb      	ldr	r3, [r7, #12]
 80286a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80286a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80286a8:	683b      	ldr	r3, [r7, #0]
 80286aa:	681b      	ldr	r3, [r3, #0]
 80286ac:	68fa      	ldr	r2, [r7, #12]
 80286ae:	4313      	orrs	r3, r2
 80286b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80286b2:	687b      	ldr	r3, [r7, #4]
 80286b4:	681b      	ldr	r3, [r3, #0]
 80286b6:	68fa      	ldr	r2, [r7, #12]
 80286b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80286ba:	687b      	ldr	r3, [r7, #4]
 80286bc:	681b      	ldr	r3, [r3, #0]
 80286be:	4a21      	ldr	r2, [pc, #132]	; (8028744 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80286c0:	4293      	cmp	r3, r2
 80286c2:	d022      	beq.n	802870a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80286c4:	687b      	ldr	r3, [r7, #4]
 80286c6:	681b      	ldr	r3, [r3, #0]
 80286c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80286cc:	d01d      	beq.n	802870a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80286ce:	687b      	ldr	r3, [r7, #4]
 80286d0:	681b      	ldr	r3, [r3, #0]
 80286d2:	4a1d      	ldr	r2, [pc, #116]	; (8028748 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80286d4:	4293      	cmp	r3, r2
 80286d6:	d018      	beq.n	802870a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80286d8:	687b      	ldr	r3, [r7, #4]
 80286da:	681b      	ldr	r3, [r3, #0]
 80286dc:	4a1b      	ldr	r2, [pc, #108]	; (802874c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80286de:	4293      	cmp	r3, r2
 80286e0:	d013      	beq.n	802870a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80286e2:	687b      	ldr	r3, [r7, #4]
 80286e4:	681b      	ldr	r3, [r3, #0]
 80286e6:	4a1a      	ldr	r2, [pc, #104]	; (8028750 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80286e8:	4293      	cmp	r3, r2
 80286ea:	d00e      	beq.n	802870a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80286ec:	687b      	ldr	r3, [r7, #4]
 80286ee:	681b      	ldr	r3, [r3, #0]
 80286f0:	4a18      	ldr	r2, [pc, #96]	; (8028754 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80286f2:	4293      	cmp	r3, r2
 80286f4:	d009      	beq.n	802870a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80286f6:	687b      	ldr	r3, [r7, #4]
 80286f8:	681b      	ldr	r3, [r3, #0]
 80286fa:	4a17      	ldr	r2, [pc, #92]	; (8028758 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80286fc:	4293      	cmp	r3, r2
 80286fe:	d004      	beq.n	802870a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028700:	687b      	ldr	r3, [r7, #4]
 8028702:	681b      	ldr	r3, [r3, #0]
 8028704:	4a15      	ldr	r2, [pc, #84]	; (802875c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8028706:	4293      	cmp	r3, r2
 8028708:	d10c      	bne.n	8028724 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802870a:	68bb      	ldr	r3, [r7, #8]
 802870c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8028710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8028712:	683b      	ldr	r3, [r7, #0]
 8028714:	685b      	ldr	r3, [r3, #4]
 8028716:	68ba      	ldr	r2, [r7, #8]
 8028718:	4313      	orrs	r3, r2
 802871a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802871c:	687b      	ldr	r3, [r7, #4]
 802871e:	681b      	ldr	r3, [r3, #0]
 8028720:	68ba      	ldr	r2, [r7, #8]
 8028722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8028724:	687b      	ldr	r3, [r7, #4]
 8028726:	2201      	movs	r2, #1
 8028728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802872c:	687b      	ldr	r3, [r7, #4]
 802872e:	2200      	movs	r2, #0
 8028730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8028734:	2300      	movs	r3, #0
}
 8028736:	4618      	mov	r0, r3
 8028738:	3714      	adds	r7, #20
 802873a:	46bd      	mov	sp, r7
 802873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028740:	4770      	bx	lr
 8028742:	bf00      	nop
 8028744:	40010000 	.word	0x40010000
 8028748:	40000400 	.word	0x40000400
 802874c:	40000800 	.word	0x40000800
 8028750:	40000c00 	.word	0x40000c00
 8028754:	40010400 	.word	0x40010400
 8028758:	40014000 	.word	0x40014000
 802875c:	40001800 	.word	0x40001800

08028760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8028760:	b480      	push	{r7}
 8028762:	b083      	sub	sp, #12
 8028764:	af00      	add	r7, sp, #0
 8028766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8028768:	bf00      	nop
 802876a:	370c      	adds	r7, #12
 802876c:	46bd      	mov	sp, r7
 802876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028772:	4770      	bx	lr

08028774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8028774:	b480      	push	{r7}
 8028776:	b083      	sub	sp, #12
 8028778:	af00      	add	r7, sp, #0
 802877a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802877c:	bf00      	nop
 802877e:	370c      	adds	r7, #12
 8028780:	46bd      	mov	sp, r7
 8028782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028786:	4770      	bx	lr

08028788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8028788:	b580      	push	{r7, lr}
 802878a:	b082      	sub	sp, #8
 802878c:	af00      	add	r7, sp, #0
 802878e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8028790:	687b      	ldr	r3, [r7, #4]
 8028792:	2b00      	cmp	r3, #0
 8028794:	d101      	bne.n	802879a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8028796:	2301      	movs	r3, #1
 8028798:	e03f      	b.n	802881a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802879a:	687b      	ldr	r3, [r7, #4]
 802879c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80287a0:	b2db      	uxtb	r3, r3
 80287a2:	2b00      	cmp	r3, #0
 80287a4:	d106      	bne.n	80287b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80287a6:	687b      	ldr	r3, [r7, #4]
 80287a8:	2200      	movs	r2, #0
 80287aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80287ae:	6878      	ldr	r0, [r7, #4]
 80287b0:	f7f8 fe02 	bl	80213b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80287b4:	687b      	ldr	r3, [r7, #4]
 80287b6:	2224      	movs	r2, #36	; 0x24
 80287b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80287bc:	687b      	ldr	r3, [r7, #4]
 80287be:	681b      	ldr	r3, [r3, #0]
 80287c0:	68da      	ldr	r2, [r3, #12]
 80287c2:	687b      	ldr	r3, [r7, #4]
 80287c4:	681b      	ldr	r3, [r3, #0]
 80287c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80287ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80287cc:	6878      	ldr	r0, [r7, #4]
 80287ce:	f000 f929 	bl	8028a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80287d2:	687b      	ldr	r3, [r7, #4]
 80287d4:	681b      	ldr	r3, [r3, #0]
 80287d6:	691a      	ldr	r2, [r3, #16]
 80287d8:	687b      	ldr	r3, [r7, #4]
 80287da:	681b      	ldr	r3, [r3, #0]
 80287dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80287e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80287e2:	687b      	ldr	r3, [r7, #4]
 80287e4:	681b      	ldr	r3, [r3, #0]
 80287e6:	695a      	ldr	r2, [r3, #20]
 80287e8:	687b      	ldr	r3, [r7, #4]
 80287ea:	681b      	ldr	r3, [r3, #0]
 80287ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80287f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80287f2:	687b      	ldr	r3, [r7, #4]
 80287f4:	681b      	ldr	r3, [r3, #0]
 80287f6:	68da      	ldr	r2, [r3, #12]
 80287f8:	687b      	ldr	r3, [r7, #4]
 80287fa:	681b      	ldr	r3, [r3, #0]
 80287fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8028800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028802:	687b      	ldr	r3, [r7, #4]
 8028804:	2200      	movs	r2, #0
 8028806:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8028808:	687b      	ldr	r3, [r7, #4]
 802880a:	2220      	movs	r2, #32
 802880c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8028810:	687b      	ldr	r3, [r7, #4]
 8028812:	2220      	movs	r2, #32
 8028814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8028818:	2300      	movs	r3, #0
}
 802881a:	4618      	mov	r0, r3
 802881c:	3708      	adds	r7, #8
 802881e:	46bd      	mov	sp, r7
 8028820:	bd80      	pop	{r7, pc}

08028822 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028822:	b580      	push	{r7, lr}
 8028824:	b08a      	sub	sp, #40	; 0x28
 8028826:	af02      	add	r7, sp, #8
 8028828:	60f8      	str	r0, [r7, #12]
 802882a:	60b9      	str	r1, [r7, #8]
 802882c:	603b      	str	r3, [r7, #0]
 802882e:	4613      	mov	r3, r2
 8028830:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8028832:	2300      	movs	r3, #0
 8028834:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8028836:	68fb      	ldr	r3, [r7, #12]
 8028838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802883c:	b2db      	uxtb	r3, r3
 802883e:	2b20      	cmp	r3, #32
 8028840:	d17c      	bne.n	802893c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8028842:	68bb      	ldr	r3, [r7, #8]
 8028844:	2b00      	cmp	r3, #0
 8028846:	d002      	beq.n	802884e <HAL_UART_Transmit+0x2c>
 8028848:	88fb      	ldrh	r3, [r7, #6]
 802884a:	2b00      	cmp	r3, #0
 802884c:	d101      	bne.n	8028852 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 802884e:	2301      	movs	r3, #1
 8028850:	e075      	b.n	802893e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8028852:	68fb      	ldr	r3, [r7, #12]
 8028854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028858:	2b01      	cmp	r3, #1
 802885a:	d101      	bne.n	8028860 <HAL_UART_Transmit+0x3e>
 802885c:	2302      	movs	r3, #2
 802885e:	e06e      	b.n	802893e <HAL_UART_Transmit+0x11c>
 8028860:	68fb      	ldr	r3, [r7, #12]
 8028862:	2201      	movs	r2, #1
 8028864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028868:	68fb      	ldr	r3, [r7, #12]
 802886a:	2200      	movs	r2, #0
 802886c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802886e:	68fb      	ldr	r3, [r7, #12]
 8028870:	2221      	movs	r2, #33	; 0x21
 8028872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8028876:	f7fa fabf 	bl	8022df8 <HAL_GetTick>
 802887a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 802887c:	68fb      	ldr	r3, [r7, #12]
 802887e:	88fa      	ldrh	r2, [r7, #6]
 8028880:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8028882:	68fb      	ldr	r3, [r7, #12]
 8028884:	88fa      	ldrh	r2, [r7, #6]
 8028886:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8028888:	68fb      	ldr	r3, [r7, #12]
 802888a:	689b      	ldr	r3, [r3, #8]
 802888c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028890:	d108      	bne.n	80288a4 <HAL_UART_Transmit+0x82>
 8028892:	68fb      	ldr	r3, [r7, #12]
 8028894:	691b      	ldr	r3, [r3, #16]
 8028896:	2b00      	cmp	r3, #0
 8028898:	d104      	bne.n	80288a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 802889a:	2300      	movs	r3, #0
 802889c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802889e:	68bb      	ldr	r3, [r7, #8]
 80288a0:	61bb      	str	r3, [r7, #24]
 80288a2:	e003      	b.n	80288ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80288a4:	68bb      	ldr	r3, [r7, #8]
 80288a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80288a8:	2300      	movs	r3, #0
 80288aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80288ac:	68fb      	ldr	r3, [r7, #12]
 80288ae:	2200      	movs	r2, #0
 80288b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80288b4:	e02a      	b.n	802890c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80288b6:	683b      	ldr	r3, [r7, #0]
 80288b8:	9300      	str	r3, [sp, #0]
 80288ba:	697b      	ldr	r3, [r7, #20]
 80288bc:	2200      	movs	r2, #0
 80288be:	2180      	movs	r1, #128	; 0x80
 80288c0:	68f8      	ldr	r0, [r7, #12]
 80288c2:	f000 f840 	bl	8028946 <UART_WaitOnFlagUntilTimeout>
 80288c6:	4603      	mov	r3, r0
 80288c8:	2b00      	cmp	r3, #0
 80288ca:	d001      	beq.n	80288d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80288cc:	2303      	movs	r3, #3
 80288ce:	e036      	b.n	802893e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80288d0:	69fb      	ldr	r3, [r7, #28]
 80288d2:	2b00      	cmp	r3, #0
 80288d4:	d10b      	bne.n	80288ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80288d6:	69bb      	ldr	r3, [r7, #24]
 80288d8:	881b      	ldrh	r3, [r3, #0]
 80288da:	461a      	mov	r2, r3
 80288dc:	68fb      	ldr	r3, [r7, #12]
 80288de:	681b      	ldr	r3, [r3, #0]
 80288e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80288e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80288e6:	69bb      	ldr	r3, [r7, #24]
 80288e8:	3302      	adds	r3, #2
 80288ea:	61bb      	str	r3, [r7, #24]
 80288ec:	e007      	b.n	80288fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80288ee:	69fb      	ldr	r3, [r7, #28]
 80288f0:	781a      	ldrb	r2, [r3, #0]
 80288f2:	68fb      	ldr	r3, [r7, #12]
 80288f4:	681b      	ldr	r3, [r3, #0]
 80288f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80288f8:	69fb      	ldr	r3, [r7, #28]
 80288fa:	3301      	adds	r3, #1
 80288fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80288fe:	68fb      	ldr	r3, [r7, #12]
 8028900:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8028902:	b29b      	uxth	r3, r3
 8028904:	3b01      	subs	r3, #1
 8028906:	b29a      	uxth	r2, r3
 8028908:	68fb      	ldr	r3, [r7, #12]
 802890a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 802890c:	68fb      	ldr	r3, [r7, #12]
 802890e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8028910:	b29b      	uxth	r3, r3
 8028912:	2b00      	cmp	r3, #0
 8028914:	d1cf      	bne.n	80288b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8028916:	683b      	ldr	r3, [r7, #0]
 8028918:	9300      	str	r3, [sp, #0]
 802891a:	697b      	ldr	r3, [r7, #20]
 802891c:	2200      	movs	r2, #0
 802891e:	2140      	movs	r1, #64	; 0x40
 8028920:	68f8      	ldr	r0, [r7, #12]
 8028922:	f000 f810 	bl	8028946 <UART_WaitOnFlagUntilTimeout>
 8028926:	4603      	mov	r3, r0
 8028928:	2b00      	cmp	r3, #0
 802892a:	d001      	beq.n	8028930 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 802892c:	2303      	movs	r3, #3
 802892e:	e006      	b.n	802893e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8028930:	68fb      	ldr	r3, [r7, #12]
 8028932:	2220      	movs	r2, #32
 8028934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8028938:	2300      	movs	r3, #0
 802893a:	e000      	b.n	802893e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 802893c:	2302      	movs	r3, #2
  }
}
 802893e:	4618      	mov	r0, r3
 8028940:	3720      	adds	r7, #32
 8028942:	46bd      	mov	sp, r7
 8028944:	bd80      	pop	{r7, pc}

08028946 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8028946:	b580      	push	{r7, lr}
 8028948:	b090      	sub	sp, #64	; 0x40
 802894a:	af00      	add	r7, sp, #0
 802894c:	60f8      	str	r0, [r7, #12]
 802894e:	60b9      	str	r1, [r7, #8]
 8028950:	603b      	str	r3, [r7, #0]
 8028952:	4613      	mov	r3, r2
 8028954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8028956:	e050      	b.n	80289fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8028958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802895a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802895e:	d04c      	beq.n	80289fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8028960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028962:	2b00      	cmp	r3, #0
 8028964:	d007      	beq.n	8028976 <UART_WaitOnFlagUntilTimeout+0x30>
 8028966:	f7fa fa47 	bl	8022df8 <HAL_GetTick>
 802896a:	4602      	mov	r2, r0
 802896c:	683b      	ldr	r3, [r7, #0]
 802896e:	1ad3      	subs	r3, r2, r3
 8028970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8028972:	429a      	cmp	r2, r3
 8028974:	d241      	bcs.n	80289fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8028976:	68fb      	ldr	r3, [r7, #12]
 8028978:	681b      	ldr	r3, [r3, #0]
 802897a:	330c      	adds	r3, #12
 802897c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802897e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028980:	e853 3f00 	ldrex	r3, [r3]
 8028984:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8028986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028988:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802898c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802898e:	68fb      	ldr	r3, [r7, #12]
 8028990:	681b      	ldr	r3, [r3, #0]
 8028992:	330c      	adds	r3, #12
 8028994:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8028996:	637a      	str	r2, [r7, #52]	; 0x34
 8028998:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802899a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802899c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802899e:	e841 2300 	strex	r3, r2, [r1]
 80289a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80289a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80289a6:	2b00      	cmp	r3, #0
 80289a8:	d1e5      	bne.n	8028976 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80289aa:	68fb      	ldr	r3, [r7, #12]
 80289ac:	681b      	ldr	r3, [r3, #0]
 80289ae:	3314      	adds	r3, #20
 80289b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80289b2:	697b      	ldr	r3, [r7, #20]
 80289b4:	e853 3f00 	ldrex	r3, [r3]
 80289b8:	613b      	str	r3, [r7, #16]
   return(result);
 80289ba:	693b      	ldr	r3, [r7, #16]
 80289bc:	f023 0301 	bic.w	r3, r3, #1
 80289c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80289c2:	68fb      	ldr	r3, [r7, #12]
 80289c4:	681b      	ldr	r3, [r3, #0]
 80289c6:	3314      	adds	r3, #20
 80289c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80289ca:	623a      	str	r2, [r7, #32]
 80289cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80289ce:	69f9      	ldr	r1, [r7, #28]
 80289d0:	6a3a      	ldr	r2, [r7, #32]
 80289d2:	e841 2300 	strex	r3, r2, [r1]
 80289d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80289d8:	69bb      	ldr	r3, [r7, #24]
 80289da:	2b00      	cmp	r3, #0
 80289dc:	d1e5      	bne.n	80289aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80289de:	68fb      	ldr	r3, [r7, #12]
 80289e0:	2220      	movs	r2, #32
 80289e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80289e6:	68fb      	ldr	r3, [r7, #12]
 80289e8:	2220      	movs	r2, #32
 80289ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80289ee:	68fb      	ldr	r3, [r7, #12]
 80289f0:	2200      	movs	r2, #0
 80289f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80289f6:	2303      	movs	r3, #3
 80289f8:	e00f      	b.n	8028a1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80289fa:	68fb      	ldr	r3, [r7, #12]
 80289fc:	681b      	ldr	r3, [r3, #0]
 80289fe:	681a      	ldr	r2, [r3, #0]
 8028a00:	68bb      	ldr	r3, [r7, #8]
 8028a02:	4013      	ands	r3, r2
 8028a04:	68ba      	ldr	r2, [r7, #8]
 8028a06:	429a      	cmp	r2, r3
 8028a08:	bf0c      	ite	eq
 8028a0a:	2301      	moveq	r3, #1
 8028a0c:	2300      	movne	r3, #0
 8028a0e:	b2db      	uxtb	r3, r3
 8028a10:	461a      	mov	r2, r3
 8028a12:	79fb      	ldrb	r3, [r7, #7]
 8028a14:	429a      	cmp	r2, r3
 8028a16:	d09f      	beq.n	8028958 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8028a18:	2300      	movs	r3, #0
}
 8028a1a:	4618      	mov	r0, r3
 8028a1c:	3740      	adds	r7, #64	; 0x40
 8028a1e:	46bd      	mov	sp, r7
 8028a20:	bd80      	pop	{r7, pc}
	...

08028a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8028a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8028a28:	b0c0      	sub	sp, #256	; 0x100
 8028a2a:	af00      	add	r7, sp, #0
 8028a2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8028a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028a34:	681b      	ldr	r3, [r3, #0]
 8028a36:	691b      	ldr	r3, [r3, #16]
 8028a38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8028a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028a40:	68d9      	ldr	r1, [r3, #12]
 8028a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028a46:	681a      	ldr	r2, [r3, #0]
 8028a48:	ea40 0301 	orr.w	r3, r0, r1
 8028a4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8028a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028a52:	689a      	ldr	r2, [r3, #8]
 8028a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028a58:	691b      	ldr	r3, [r3, #16]
 8028a5a:	431a      	orrs	r2, r3
 8028a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028a60:	695b      	ldr	r3, [r3, #20]
 8028a62:	431a      	orrs	r2, r3
 8028a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028a68:	69db      	ldr	r3, [r3, #28]
 8028a6a:	4313      	orrs	r3, r2
 8028a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8028a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028a74:	681b      	ldr	r3, [r3, #0]
 8028a76:	68db      	ldr	r3, [r3, #12]
 8028a78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8028a7c:	f021 010c 	bic.w	r1, r1, #12
 8028a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028a84:	681a      	ldr	r2, [r3, #0]
 8028a86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028a8a:	430b      	orrs	r3, r1
 8028a8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8028a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028a92:	681b      	ldr	r3, [r3, #0]
 8028a94:	695b      	ldr	r3, [r3, #20]
 8028a96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8028a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028a9e:	6999      	ldr	r1, [r3, #24]
 8028aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028aa4:	681a      	ldr	r2, [r3, #0]
 8028aa6:	ea40 0301 	orr.w	r3, r0, r1
 8028aaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8028aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028ab0:	681a      	ldr	r2, [r3, #0]
 8028ab2:	4b8f      	ldr	r3, [pc, #572]	; (8028cf0 <UART_SetConfig+0x2cc>)
 8028ab4:	429a      	cmp	r2, r3
 8028ab6:	d005      	beq.n	8028ac4 <UART_SetConfig+0xa0>
 8028ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028abc:	681a      	ldr	r2, [r3, #0]
 8028abe:	4b8d      	ldr	r3, [pc, #564]	; (8028cf4 <UART_SetConfig+0x2d0>)
 8028ac0:	429a      	cmp	r2, r3
 8028ac2:	d104      	bne.n	8028ace <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8028ac4:	f7fe f968 	bl	8026d98 <HAL_RCC_GetPCLK2Freq>
 8028ac8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8028acc:	e003      	b.n	8028ad6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8028ace:	f7fe f94f 	bl	8026d70 <HAL_RCC_GetPCLK1Freq>
 8028ad2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8028ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028ada:	69db      	ldr	r3, [r3, #28]
 8028adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028ae0:	f040 810c 	bne.w	8028cfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8028ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8028ae8:	2200      	movs	r2, #0
 8028aea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8028aee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8028af2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8028af6:	4622      	mov	r2, r4
 8028af8:	462b      	mov	r3, r5
 8028afa:	1891      	adds	r1, r2, r2
 8028afc:	65b9      	str	r1, [r7, #88]	; 0x58
 8028afe:	415b      	adcs	r3, r3
 8028b00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028b02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8028b06:	4621      	mov	r1, r4
 8028b08:	eb12 0801 	adds.w	r8, r2, r1
 8028b0c:	4629      	mov	r1, r5
 8028b0e:	eb43 0901 	adc.w	r9, r3, r1
 8028b12:	f04f 0200 	mov.w	r2, #0
 8028b16:	f04f 0300 	mov.w	r3, #0
 8028b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8028b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8028b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8028b26:	4690      	mov	r8, r2
 8028b28:	4699      	mov	r9, r3
 8028b2a:	4623      	mov	r3, r4
 8028b2c:	eb18 0303 	adds.w	r3, r8, r3
 8028b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8028b34:	462b      	mov	r3, r5
 8028b36:	eb49 0303 	adc.w	r3, r9, r3
 8028b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8028b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028b42:	685b      	ldr	r3, [r3, #4]
 8028b44:	2200      	movs	r2, #0
 8028b46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8028b4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8028b4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8028b52:	460b      	mov	r3, r1
 8028b54:	18db      	adds	r3, r3, r3
 8028b56:	653b      	str	r3, [r7, #80]	; 0x50
 8028b58:	4613      	mov	r3, r2
 8028b5a:	eb42 0303 	adc.w	r3, r2, r3
 8028b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8028b60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8028b64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8028b68:	f7f7 fb92 	bl	8020290 <__aeabi_uldivmod>
 8028b6c:	4602      	mov	r2, r0
 8028b6e:	460b      	mov	r3, r1
 8028b70:	4b61      	ldr	r3, [pc, #388]	; (8028cf8 <UART_SetConfig+0x2d4>)
 8028b72:	fba3 2302 	umull	r2, r3, r3, r2
 8028b76:	095b      	lsrs	r3, r3, #5
 8028b78:	011c      	lsls	r4, r3, #4
 8028b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8028b7e:	2200      	movs	r2, #0
 8028b80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8028b84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8028b88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8028b8c:	4642      	mov	r2, r8
 8028b8e:	464b      	mov	r3, r9
 8028b90:	1891      	adds	r1, r2, r2
 8028b92:	64b9      	str	r1, [r7, #72]	; 0x48
 8028b94:	415b      	adcs	r3, r3
 8028b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8028b98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8028b9c:	4641      	mov	r1, r8
 8028b9e:	eb12 0a01 	adds.w	sl, r2, r1
 8028ba2:	4649      	mov	r1, r9
 8028ba4:	eb43 0b01 	adc.w	fp, r3, r1
 8028ba8:	f04f 0200 	mov.w	r2, #0
 8028bac:	f04f 0300 	mov.w	r3, #0
 8028bb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8028bb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8028bb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8028bbc:	4692      	mov	sl, r2
 8028bbe:	469b      	mov	fp, r3
 8028bc0:	4643      	mov	r3, r8
 8028bc2:	eb1a 0303 	adds.w	r3, sl, r3
 8028bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8028bca:	464b      	mov	r3, r9
 8028bcc:	eb4b 0303 	adc.w	r3, fp, r3
 8028bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8028bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028bd8:	685b      	ldr	r3, [r3, #4]
 8028bda:	2200      	movs	r2, #0
 8028bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8028be0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8028be4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8028be8:	460b      	mov	r3, r1
 8028bea:	18db      	adds	r3, r3, r3
 8028bec:	643b      	str	r3, [r7, #64]	; 0x40
 8028bee:	4613      	mov	r3, r2
 8028bf0:	eb42 0303 	adc.w	r3, r2, r3
 8028bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8028bf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8028bfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8028bfe:	f7f7 fb47 	bl	8020290 <__aeabi_uldivmod>
 8028c02:	4602      	mov	r2, r0
 8028c04:	460b      	mov	r3, r1
 8028c06:	4611      	mov	r1, r2
 8028c08:	4b3b      	ldr	r3, [pc, #236]	; (8028cf8 <UART_SetConfig+0x2d4>)
 8028c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8028c0e:	095b      	lsrs	r3, r3, #5
 8028c10:	2264      	movs	r2, #100	; 0x64
 8028c12:	fb02 f303 	mul.w	r3, r2, r3
 8028c16:	1acb      	subs	r3, r1, r3
 8028c18:	00db      	lsls	r3, r3, #3
 8028c1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8028c1e:	4b36      	ldr	r3, [pc, #216]	; (8028cf8 <UART_SetConfig+0x2d4>)
 8028c20:	fba3 2302 	umull	r2, r3, r3, r2
 8028c24:	095b      	lsrs	r3, r3, #5
 8028c26:	005b      	lsls	r3, r3, #1
 8028c28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8028c2c:	441c      	add	r4, r3
 8028c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8028c32:	2200      	movs	r2, #0
 8028c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8028c38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8028c3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8028c40:	4642      	mov	r2, r8
 8028c42:	464b      	mov	r3, r9
 8028c44:	1891      	adds	r1, r2, r2
 8028c46:	63b9      	str	r1, [r7, #56]	; 0x38
 8028c48:	415b      	adcs	r3, r3
 8028c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8028c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8028c50:	4641      	mov	r1, r8
 8028c52:	1851      	adds	r1, r2, r1
 8028c54:	6339      	str	r1, [r7, #48]	; 0x30
 8028c56:	4649      	mov	r1, r9
 8028c58:	414b      	adcs	r3, r1
 8028c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8028c5c:	f04f 0200 	mov.w	r2, #0
 8028c60:	f04f 0300 	mov.w	r3, #0
 8028c64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8028c68:	4659      	mov	r1, fp
 8028c6a:	00cb      	lsls	r3, r1, #3
 8028c6c:	4651      	mov	r1, sl
 8028c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8028c72:	4651      	mov	r1, sl
 8028c74:	00ca      	lsls	r2, r1, #3
 8028c76:	4610      	mov	r0, r2
 8028c78:	4619      	mov	r1, r3
 8028c7a:	4603      	mov	r3, r0
 8028c7c:	4642      	mov	r2, r8
 8028c7e:	189b      	adds	r3, r3, r2
 8028c80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8028c84:	464b      	mov	r3, r9
 8028c86:	460a      	mov	r2, r1
 8028c88:	eb42 0303 	adc.w	r3, r2, r3
 8028c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8028c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028c94:	685b      	ldr	r3, [r3, #4]
 8028c96:	2200      	movs	r2, #0
 8028c98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8028c9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8028ca0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8028ca4:	460b      	mov	r3, r1
 8028ca6:	18db      	adds	r3, r3, r3
 8028ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8028caa:	4613      	mov	r3, r2
 8028cac:	eb42 0303 	adc.w	r3, r2, r3
 8028cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8028cb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8028cba:	f7f7 fae9 	bl	8020290 <__aeabi_uldivmod>
 8028cbe:	4602      	mov	r2, r0
 8028cc0:	460b      	mov	r3, r1
 8028cc2:	4b0d      	ldr	r3, [pc, #52]	; (8028cf8 <UART_SetConfig+0x2d4>)
 8028cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8028cc8:	095b      	lsrs	r3, r3, #5
 8028cca:	2164      	movs	r1, #100	; 0x64
 8028ccc:	fb01 f303 	mul.w	r3, r1, r3
 8028cd0:	1ad3      	subs	r3, r2, r3
 8028cd2:	00db      	lsls	r3, r3, #3
 8028cd4:	3332      	adds	r3, #50	; 0x32
 8028cd6:	4a08      	ldr	r2, [pc, #32]	; (8028cf8 <UART_SetConfig+0x2d4>)
 8028cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8028cdc:	095b      	lsrs	r3, r3, #5
 8028cde:	f003 0207 	and.w	r2, r3, #7
 8028ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028ce6:	681b      	ldr	r3, [r3, #0]
 8028ce8:	4422      	add	r2, r4
 8028cea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8028cec:	e105      	b.n	8028efa <UART_SetConfig+0x4d6>
 8028cee:	bf00      	nop
 8028cf0:	40011000 	.word	0x40011000
 8028cf4:	40011400 	.word	0x40011400
 8028cf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8028cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8028d00:	2200      	movs	r2, #0
 8028d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8028d06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8028d0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8028d0e:	4642      	mov	r2, r8
 8028d10:	464b      	mov	r3, r9
 8028d12:	1891      	adds	r1, r2, r2
 8028d14:	6239      	str	r1, [r7, #32]
 8028d16:	415b      	adcs	r3, r3
 8028d18:	627b      	str	r3, [r7, #36]	; 0x24
 8028d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8028d1e:	4641      	mov	r1, r8
 8028d20:	1854      	adds	r4, r2, r1
 8028d22:	4649      	mov	r1, r9
 8028d24:	eb43 0501 	adc.w	r5, r3, r1
 8028d28:	f04f 0200 	mov.w	r2, #0
 8028d2c:	f04f 0300 	mov.w	r3, #0
 8028d30:	00eb      	lsls	r3, r5, #3
 8028d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8028d36:	00e2      	lsls	r2, r4, #3
 8028d38:	4614      	mov	r4, r2
 8028d3a:	461d      	mov	r5, r3
 8028d3c:	4643      	mov	r3, r8
 8028d3e:	18e3      	adds	r3, r4, r3
 8028d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8028d44:	464b      	mov	r3, r9
 8028d46:	eb45 0303 	adc.w	r3, r5, r3
 8028d4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8028d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028d52:	685b      	ldr	r3, [r3, #4]
 8028d54:	2200      	movs	r2, #0
 8028d56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8028d5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8028d5e:	f04f 0200 	mov.w	r2, #0
 8028d62:	f04f 0300 	mov.w	r3, #0
 8028d66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8028d6a:	4629      	mov	r1, r5
 8028d6c:	008b      	lsls	r3, r1, #2
 8028d6e:	4621      	mov	r1, r4
 8028d70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8028d74:	4621      	mov	r1, r4
 8028d76:	008a      	lsls	r2, r1, #2
 8028d78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8028d7c:	f7f7 fa88 	bl	8020290 <__aeabi_uldivmod>
 8028d80:	4602      	mov	r2, r0
 8028d82:	460b      	mov	r3, r1
 8028d84:	4b60      	ldr	r3, [pc, #384]	; (8028f08 <UART_SetConfig+0x4e4>)
 8028d86:	fba3 2302 	umull	r2, r3, r3, r2
 8028d8a:	095b      	lsrs	r3, r3, #5
 8028d8c:	011c      	lsls	r4, r3, #4
 8028d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8028d92:	2200      	movs	r2, #0
 8028d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8028d98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8028d9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8028da0:	4642      	mov	r2, r8
 8028da2:	464b      	mov	r3, r9
 8028da4:	1891      	adds	r1, r2, r2
 8028da6:	61b9      	str	r1, [r7, #24]
 8028da8:	415b      	adcs	r3, r3
 8028daa:	61fb      	str	r3, [r7, #28]
 8028dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8028db0:	4641      	mov	r1, r8
 8028db2:	1851      	adds	r1, r2, r1
 8028db4:	6139      	str	r1, [r7, #16]
 8028db6:	4649      	mov	r1, r9
 8028db8:	414b      	adcs	r3, r1
 8028dba:	617b      	str	r3, [r7, #20]
 8028dbc:	f04f 0200 	mov.w	r2, #0
 8028dc0:	f04f 0300 	mov.w	r3, #0
 8028dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8028dc8:	4659      	mov	r1, fp
 8028dca:	00cb      	lsls	r3, r1, #3
 8028dcc:	4651      	mov	r1, sl
 8028dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8028dd2:	4651      	mov	r1, sl
 8028dd4:	00ca      	lsls	r2, r1, #3
 8028dd6:	4610      	mov	r0, r2
 8028dd8:	4619      	mov	r1, r3
 8028dda:	4603      	mov	r3, r0
 8028ddc:	4642      	mov	r2, r8
 8028dde:	189b      	adds	r3, r3, r2
 8028de0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8028de4:	464b      	mov	r3, r9
 8028de6:	460a      	mov	r2, r1
 8028de8:	eb42 0303 	adc.w	r3, r2, r3
 8028dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8028df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028df4:	685b      	ldr	r3, [r3, #4]
 8028df6:	2200      	movs	r2, #0
 8028df8:	67bb      	str	r3, [r7, #120]	; 0x78
 8028dfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8028dfc:	f04f 0200 	mov.w	r2, #0
 8028e00:	f04f 0300 	mov.w	r3, #0
 8028e04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8028e08:	4649      	mov	r1, r9
 8028e0a:	008b      	lsls	r3, r1, #2
 8028e0c:	4641      	mov	r1, r8
 8028e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8028e12:	4641      	mov	r1, r8
 8028e14:	008a      	lsls	r2, r1, #2
 8028e16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8028e1a:	f7f7 fa39 	bl	8020290 <__aeabi_uldivmod>
 8028e1e:	4602      	mov	r2, r0
 8028e20:	460b      	mov	r3, r1
 8028e22:	4b39      	ldr	r3, [pc, #228]	; (8028f08 <UART_SetConfig+0x4e4>)
 8028e24:	fba3 1302 	umull	r1, r3, r3, r2
 8028e28:	095b      	lsrs	r3, r3, #5
 8028e2a:	2164      	movs	r1, #100	; 0x64
 8028e2c:	fb01 f303 	mul.w	r3, r1, r3
 8028e30:	1ad3      	subs	r3, r2, r3
 8028e32:	011b      	lsls	r3, r3, #4
 8028e34:	3332      	adds	r3, #50	; 0x32
 8028e36:	4a34      	ldr	r2, [pc, #208]	; (8028f08 <UART_SetConfig+0x4e4>)
 8028e38:	fba2 2303 	umull	r2, r3, r2, r3
 8028e3c:	095b      	lsrs	r3, r3, #5
 8028e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8028e42:	441c      	add	r4, r3
 8028e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8028e48:	2200      	movs	r2, #0
 8028e4a:	673b      	str	r3, [r7, #112]	; 0x70
 8028e4c:	677a      	str	r2, [r7, #116]	; 0x74
 8028e4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8028e52:	4642      	mov	r2, r8
 8028e54:	464b      	mov	r3, r9
 8028e56:	1891      	adds	r1, r2, r2
 8028e58:	60b9      	str	r1, [r7, #8]
 8028e5a:	415b      	adcs	r3, r3
 8028e5c:	60fb      	str	r3, [r7, #12]
 8028e5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8028e62:	4641      	mov	r1, r8
 8028e64:	1851      	adds	r1, r2, r1
 8028e66:	6039      	str	r1, [r7, #0]
 8028e68:	4649      	mov	r1, r9
 8028e6a:	414b      	adcs	r3, r1
 8028e6c:	607b      	str	r3, [r7, #4]
 8028e6e:	f04f 0200 	mov.w	r2, #0
 8028e72:	f04f 0300 	mov.w	r3, #0
 8028e76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8028e7a:	4659      	mov	r1, fp
 8028e7c:	00cb      	lsls	r3, r1, #3
 8028e7e:	4651      	mov	r1, sl
 8028e80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8028e84:	4651      	mov	r1, sl
 8028e86:	00ca      	lsls	r2, r1, #3
 8028e88:	4610      	mov	r0, r2
 8028e8a:	4619      	mov	r1, r3
 8028e8c:	4603      	mov	r3, r0
 8028e8e:	4642      	mov	r2, r8
 8028e90:	189b      	adds	r3, r3, r2
 8028e92:	66bb      	str	r3, [r7, #104]	; 0x68
 8028e94:	464b      	mov	r3, r9
 8028e96:	460a      	mov	r2, r1
 8028e98:	eb42 0303 	adc.w	r3, r2, r3
 8028e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8028e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028ea2:	685b      	ldr	r3, [r3, #4]
 8028ea4:	2200      	movs	r2, #0
 8028ea6:	663b      	str	r3, [r7, #96]	; 0x60
 8028ea8:	667a      	str	r2, [r7, #100]	; 0x64
 8028eaa:	f04f 0200 	mov.w	r2, #0
 8028eae:	f04f 0300 	mov.w	r3, #0
 8028eb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8028eb6:	4649      	mov	r1, r9
 8028eb8:	008b      	lsls	r3, r1, #2
 8028eba:	4641      	mov	r1, r8
 8028ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8028ec0:	4641      	mov	r1, r8
 8028ec2:	008a      	lsls	r2, r1, #2
 8028ec4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8028ec8:	f7f7 f9e2 	bl	8020290 <__aeabi_uldivmod>
 8028ecc:	4602      	mov	r2, r0
 8028ece:	460b      	mov	r3, r1
 8028ed0:	4b0d      	ldr	r3, [pc, #52]	; (8028f08 <UART_SetConfig+0x4e4>)
 8028ed2:	fba3 1302 	umull	r1, r3, r3, r2
 8028ed6:	095b      	lsrs	r3, r3, #5
 8028ed8:	2164      	movs	r1, #100	; 0x64
 8028eda:	fb01 f303 	mul.w	r3, r1, r3
 8028ede:	1ad3      	subs	r3, r2, r3
 8028ee0:	011b      	lsls	r3, r3, #4
 8028ee2:	3332      	adds	r3, #50	; 0x32
 8028ee4:	4a08      	ldr	r2, [pc, #32]	; (8028f08 <UART_SetConfig+0x4e4>)
 8028ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8028eea:	095b      	lsrs	r3, r3, #5
 8028eec:	f003 020f 	and.w	r2, r3, #15
 8028ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028ef4:	681b      	ldr	r3, [r3, #0]
 8028ef6:	4422      	add	r2, r4
 8028ef8:	609a      	str	r2, [r3, #8]
}
 8028efa:	bf00      	nop
 8028efc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8028f00:	46bd      	mov	sp, r7
 8028f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8028f06:	bf00      	nop
 8028f08:	51eb851f 	.word	0x51eb851f

08028f0c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8028f0c:	b480      	push	{r7}
 8028f0e:	b083      	sub	sp, #12
 8028f10:	af00      	add	r7, sp, #0
 8028f12:	6078      	str	r0, [r7, #4]
 8028f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8028f16:	683b      	ldr	r3, [r7, #0]
 8028f18:	681b      	ldr	r3, [r3, #0]
 8028f1a:	2b00      	cmp	r3, #0
 8028f1c:	d123      	bne.n	8028f66 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8028f1e:	687b      	ldr	r3, [r7, #4]
 8028f20:	681b      	ldr	r3, [r3, #0]
 8028f22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8028f26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8028f2a:	683a      	ldr	r2, [r7, #0]
 8028f2c:	6851      	ldr	r1, [r2, #4]
 8028f2e:	683a      	ldr	r2, [r7, #0]
 8028f30:	6892      	ldr	r2, [r2, #8]
 8028f32:	4311      	orrs	r1, r2
 8028f34:	683a      	ldr	r2, [r7, #0]
 8028f36:	68d2      	ldr	r2, [r2, #12]
 8028f38:	4311      	orrs	r1, r2
 8028f3a:	683a      	ldr	r2, [r7, #0]
 8028f3c:	6912      	ldr	r2, [r2, #16]
 8028f3e:	4311      	orrs	r1, r2
 8028f40:	683a      	ldr	r2, [r7, #0]
 8028f42:	6952      	ldr	r2, [r2, #20]
 8028f44:	4311      	orrs	r1, r2
 8028f46:	683a      	ldr	r2, [r7, #0]
 8028f48:	6992      	ldr	r2, [r2, #24]
 8028f4a:	4311      	orrs	r1, r2
 8028f4c:	683a      	ldr	r2, [r7, #0]
 8028f4e:	69d2      	ldr	r2, [r2, #28]
 8028f50:	4311      	orrs	r1, r2
 8028f52:	683a      	ldr	r2, [r7, #0]
 8028f54:	6a12      	ldr	r2, [r2, #32]
 8028f56:	4311      	orrs	r1, r2
 8028f58:	683a      	ldr	r2, [r7, #0]
 8028f5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8028f5c:	430a      	orrs	r2, r1
 8028f5e:	431a      	orrs	r2, r3
 8028f60:	687b      	ldr	r3, [r7, #4]
 8028f62:	601a      	str	r2, [r3, #0]
 8028f64:	e028      	b.n	8028fb8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8028f66:	687b      	ldr	r3, [r7, #4]
 8028f68:	681b      	ldr	r3, [r3, #0]
 8028f6a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8028f6e:	683b      	ldr	r3, [r7, #0]
 8028f70:	69d9      	ldr	r1, [r3, #28]
 8028f72:	683b      	ldr	r3, [r7, #0]
 8028f74:	6a1b      	ldr	r3, [r3, #32]
 8028f76:	4319      	orrs	r1, r3
 8028f78:	683b      	ldr	r3, [r7, #0]
 8028f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028f7c:	430b      	orrs	r3, r1
 8028f7e:	431a      	orrs	r2, r3
 8028f80:	687b      	ldr	r3, [r7, #4]
 8028f82:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8028f84:	687b      	ldr	r3, [r7, #4]
 8028f86:	685b      	ldr	r3, [r3, #4]
 8028f88:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8028f8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8028f90:	683a      	ldr	r2, [r7, #0]
 8028f92:	6851      	ldr	r1, [r2, #4]
 8028f94:	683a      	ldr	r2, [r7, #0]
 8028f96:	6892      	ldr	r2, [r2, #8]
 8028f98:	4311      	orrs	r1, r2
 8028f9a:	683a      	ldr	r2, [r7, #0]
 8028f9c:	68d2      	ldr	r2, [r2, #12]
 8028f9e:	4311      	orrs	r1, r2
 8028fa0:	683a      	ldr	r2, [r7, #0]
 8028fa2:	6912      	ldr	r2, [r2, #16]
 8028fa4:	4311      	orrs	r1, r2
 8028fa6:	683a      	ldr	r2, [r7, #0]
 8028fa8:	6952      	ldr	r2, [r2, #20]
 8028faa:	4311      	orrs	r1, r2
 8028fac:	683a      	ldr	r2, [r7, #0]
 8028fae:	6992      	ldr	r2, [r2, #24]
 8028fb0:	430a      	orrs	r2, r1
 8028fb2:	431a      	orrs	r2, r3
 8028fb4:	687b      	ldr	r3, [r7, #4]
 8028fb6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8028fb8:	2300      	movs	r3, #0
}
 8028fba:	4618      	mov	r0, r3
 8028fbc:	370c      	adds	r7, #12
 8028fbe:	46bd      	mov	sp, r7
 8028fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028fc4:	4770      	bx	lr

08028fc6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8028fc6:	b480      	push	{r7}
 8028fc8:	b085      	sub	sp, #20
 8028fca:	af00      	add	r7, sp, #0
 8028fcc:	60f8      	str	r0, [r7, #12]
 8028fce:	60b9      	str	r1, [r7, #8]
 8028fd0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8028fd2:	687b      	ldr	r3, [r7, #4]
 8028fd4:	2b00      	cmp	r3, #0
 8028fd6:	d128      	bne.n	802902a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8028fd8:	68fb      	ldr	r3, [r7, #12]
 8028fda:	689b      	ldr	r3, [r3, #8]
 8028fdc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8028fe0:	68bb      	ldr	r3, [r7, #8]
 8028fe2:	681b      	ldr	r3, [r3, #0]
 8028fe4:	1e59      	subs	r1, r3, #1
 8028fe6:	68bb      	ldr	r3, [r7, #8]
 8028fe8:	685b      	ldr	r3, [r3, #4]
 8028fea:	3b01      	subs	r3, #1
 8028fec:	011b      	lsls	r3, r3, #4
 8028fee:	4319      	orrs	r1, r3
 8028ff0:	68bb      	ldr	r3, [r7, #8]
 8028ff2:	689b      	ldr	r3, [r3, #8]
 8028ff4:	3b01      	subs	r3, #1
 8028ff6:	021b      	lsls	r3, r3, #8
 8028ff8:	4319      	orrs	r1, r3
 8028ffa:	68bb      	ldr	r3, [r7, #8]
 8028ffc:	68db      	ldr	r3, [r3, #12]
 8028ffe:	3b01      	subs	r3, #1
 8029000:	031b      	lsls	r3, r3, #12
 8029002:	4319      	orrs	r1, r3
 8029004:	68bb      	ldr	r3, [r7, #8]
 8029006:	691b      	ldr	r3, [r3, #16]
 8029008:	3b01      	subs	r3, #1
 802900a:	041b      	lsls	r3, r3, #16
 802900c:	4319      	orrs	r1, r3
 802900e:	68bb      	ldr	r3, [r7, #8]
 8029010:	695b      	ldr	r3, [r3, #20]
 8029012:	3b01      	subs	r3, #1
 8029014:	051b      	lsls	r3, r3, #20
 8029016:	4319      	orrs	r1, r3
 8029018:	68bb      	ldr	r3, [r7, #8]
 802901a:	699b      	ldr	r3, [r3, #24]
 802901c:	3b01      	subs	r3, #1
 802901e:	061b      	lsls	r3, r3, #24
 8029020:	430b      	orrs	r3, r1
 8029022:	431a      	orrs	r2, r3
 8029024:	68fb      	ldr	r3, [r7, #12]
 8029026:	609a      	str	r2, [r3, #8]
 8029028:	e02f      	b.n	802908a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 802902a:	68fb      	ldr	r3, [r7, #12]
 802902c:	689b      	ldr	r3, [r3, #8]
 802902e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8029032:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029036:	68ba      	ldr	r2, [r7, #8]
 8029038:	68d2      	ldr	r2, [r2, #12]
 802903a:	3a01      	subs	r2, #1
 802903c:	0311      	lsls	r1, r2, #12
 802903e:	68ba      	ldr	r2, [r7, #8]
 8029040:	6952      	ldr	r2, [r2, #20]
 8029042:	3a01      	subs	r2, #1
 8029044:	0512      	lsls	r2, r2, #20
 8029046:	430a      	orrs	r2, r1
 8029048:	431a      	orrs	r2, r3
 802904a:	68fb      	ldr	r3, [r7, #12]
 802904c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 802904e:	68fb      	ldr	r3, [r7, #12]
 8029050:	68db      	ldr	r3, [r3, #12]
 8029052:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8029056:	68bb      	ldr	r3, [r7, #8]
 8029058:	681b      	ldr	r3, [r3, #0]
 802905a:	1e59      	subs	r1, r3, #1
 802905c:	68bb      	ldr	r3, [r7, #8]
 802905e:	685b      	ldr	r3, [r3, #4]
 8029060:	3b01      	subs	r3, #1
 8029062:	011b      	lsls	r3, r3, #4
 8029064:	4319      	orrs	r1, r3
 8029066:	68bb      	ldr	r3, [r7, #8]
 8029068:	689b      	ldr	r3, [r3, #8]
 802906a:	3b01      	subs	r3, #1
 802906c:	021b      	lsls	r3, r3, #8
 802906e:	4319      	orrs	r1, r3
 8029070:	68bb      	ldr	r3, [r7, #8]
 8029072:	691b      	ldr	r3, [r3, #16]
 8029074:	3b01      	subs	r3, #1
 8029076:	041b      	lsls	r3, r3, #16
 8029078:	4319      	orrs	r1, r3
 802907a:	68bb      	ldr	r3, [r7, #8]
 802907c:	699b      	ldr	r3, [r3, #24]
 802907e:	3b01      	subs	r3, #1
 8029080:	061b      	lsls	r3, r3, #24
 8029082:	430b      	orrs	r3, r1
 8029084:	431a      	orrs	r2, r3
 8029086:	68fb      	ldr	r3, [r7, #12]
 8029088:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 802908a:	2300      	movs	r3, #0
}
 802908c:	4618      	mov	r0, r3
 802908e:	3714      	adds	r7, #20
 8029090:	46bd      	mov	sp, r7
 8029092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029096:	4770      	bx	lr

08029098 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8029098:	b580      	push	{r7, lr}
 802909a:	b086      	sub	sp, #24
 802909c:	af00      	add	r7, sp, #0
 802909e:	60f8      	str	r0, [r7, #12]
 80290a0:	60b9      	str	r1, [r7, #8]
 80290a2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80290a4:	2300      	movs	r3, #0
 80290a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80290a8:	68fb      	ldr	r3, [r7, #12]
 80290aa:	691b      	ldr	r3, [r3, #16]
 80290ac:	0d9b      	lsrs	r3, r3, #22
 80290ae:	059b      	lsls	r3, r3, #22
 80290b0:	68ba      	ldr	r2, [r7, #8]
 80290b2:	6811      	ldr	r1, [r2, #0]
 80290b4:	68ba      	ldr	r2, [r7, #8]
 80290b6:	6852      	ldr	r2, [r2, #4]
 80290b8:	4311      	orrs	r1, r2
 80290ba:	68ba      	ldr	r2, [r7, #8]
 80290bc:	6892      	ldr	r2, [r2, #8]
 80290be:	3a01      	subs	r2, #1
 80290c0:	0152      	lsls	r2, r2, #5
 80290c2:	4311      	orrs	r1, r2
 80290c4:	68ba      	ldr	r2, [r7, #8]
 80290c6:	68d2      	ldr	r2, [r2, #12]
 80290c8:	0252      	lsls	r2, r2, #9
 80290ca:	430a      	orrs	r2, r1
 80290cc:	431a      	orrs	r2, r3
 80290ce:	68fb      	ldr	r3, [r7, #12]
 80290d0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80290d2:	f7f9 fe91 	bl	8022df8 <HAL_GetTick>
 80290d6:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80290d8:	e010      	b.n	80290fc <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80290da:	687b      	ldr	r3, [r7, #4]
 80290dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80290e0:	d00c      	beq.n	80290fc <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80290e2:	687b      	ldr	r3, [r7, #4]
 80290e4:	2b00      	cmp	r3, #0
 80290e6:	d007      	beq.n	80290f8 <FMC_SDRAM_SendCommand+0x60>
 80290e8:	f7f9 fe86 	bl	8022df8 <HAL_GetTick>
 80290ec:	4602      	mov	r2, r0
 80290ee:	697b      	ldr	r3, [r7, #20]
 80290f0:	1ad3      	subs	r3, r2, r3
 80290f2:	687a      	ldr	r2, [r7, #4]
 80290f4:	429a      	cmp	r2, r3
 80290f6:	d201      	bcs.n	80290fc <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80290f8:	2303      	movs	r3, #3
 80290fa:	e006      	b.n	802910a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80290fc:	68fb      	ldr	r3, [r7, #12]
 80290fe:	699b      	ldr	r3, [r3, #24]
 8029100:	f003 0320 	and.w	r3, r3, #32
 8029104:	2b20      	cmp	r3, #32
 8029106:	d0e8      	beq.n	80290da <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8029108:	2300      	movs	r3, #0
}
 802910a:	4618      	mov	r0, r3
 802910c:	3718      	adds	r7, #24
 802910e:	46bd      	mov	sp, r7
 8029110:	bd80      	pop	{r7, pc}

08029112 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8029112:	b480      	push	{r7}
 8029114:	b083      	sub	sp, #12
 8029116:	af00      	add	r7, sp, #0
 8029118:	6078      	str	r0, [r7, #4]
 802911a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 802911c:	687b      	ldr	r3, [r7, #4]
 802911e:	695b      	ldr	r3, [r3, #20]
 8029120:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8029124:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8029128:	683a      	ldr	r2, [r7, #0]
 802912a:	0052      	lsls	r2, r2, #1
 802912c:	431a      	orrs	r2, r3
 802912e:	687b      	ldr	r3, [r7, #4]
 8029130:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8029132:	2300      	movs	r3, #0
}
 8029134:	4618      	mov	r0, r3
 8029136:	370c      	adds	r7, #12
 8029138:	46bd      	mov	sp, r7
 802913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802913e:	4770      	bx	lr

08029140 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8029140:	b084      	sub	sp, #16
 8029142:	b580      	push	{r7, lr}
 8029144:	b084      	sub	sp, #16
 8029146:	af00      	add	r7, sp, #0
 8029148:	6078      	str	r0, [r7, #4]
 802914a:	f107 001c 	add.w	r0, r7, #28
 802914e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8029152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029154:	2b01      	cmp	r3, #1
 8029156:	d122      	bne.n	802919e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8029158:	687b      	ldr	r3, [r7, #4]
 802915a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802915c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8029160:	687b      	ldr	r3, [r7, #4]
 8029162:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8029164:	687b      	ldr	r3, [r7, #4]
 8029166:	68db      	ldr	r3, [r3, #12]
 8029168:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 802916c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029170:	687a      	ldr	r2, [r7, #4]
 8029172:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8029174:	687b      	ldr	r3, [r7, #4]
 8029176:	68db      	ldr	r3, [r3, #12]
 8029178:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802917c:	687b      	ldr	r3, [r7, #4]
 802917e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8029180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029182:	2b01      	cmp	r3, #1
 8029184:	d105      	bne.n	8029192 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8029186:	687b      	ldr	r3, [r7, #4]
 8029188:	68db      	ldr	r3, [r3, #12]
 802918a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802918e:	687b      	ldr	r3, [r7, #4]
 8029190:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8029192:	6878      	ldr	r0, [r7, #4]
 8029194:	f000 f9c0 	bl	8029518 <USB_CoreReset>
 8029198:	4603      	mov	r3, r0
 802919a:	73fb      	strb	r3, [r7, #15]
 802919c:	e01a      	b.n	80291d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802919e:	687b      	ldr	r3, [r7, #4]
 80291a0:	68db      	ldr	r3, [r3, #12]
 80291a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80291a6:	687b      	ldr	r3, [r7, #4]
 80291a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80291aa:	6878      	ldr	r0, [r7, #4]
 80291ac:	f000 f9b4 	bl	8029518 <USB_CoreReset>
 80291b0:	4603      	mov	r3, r0
 80291b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80291b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80291b6:	2b00      	cmp	r3, #0
 80291b8:	d106      	bne.n	80291c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80291ba:	687b      	ldr	r3, [r7, #4]
 80291bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80291be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80291c2:	687b      	ldr	r3, [r7, #4]
 80291c4:	639a      	str	r2, [r3, #56]	; 0x38
 80291c6:	e005      	b.n	80291d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80291c8:	687b      	ldr	r3, [r7, #4]
 80291ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80291cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80291d0:	687b      	ldr	r3, [r7, #4]
 80291d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80291d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80291d6:	2b01      	cmp	r3, #1
 80291d8:	d10b      	bne.n	80291f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80291da:	687b      	ldr	r3, [r7, #4]
 80291dc:	689b      	ldr	r3, [r3, #8]
 80291de:	f043 0206 	orr.w	r2, r3, #6
 80291e2:	687b      	ldr	r3, [r7, #4]
 80291e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80291e6:	687b      	ldr	r3, [r7, #4]
 80291e8:	689b      	ldr	r3, [r3, #8]
 80291ea:	f043 0220 	orr.w	r2, r3, #32
 80291ee:	687b      	ldr	r3, [r7, #4]
 80291f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80291f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80291f4:	4618      	mov	r0, r3
 80291f6:	3710      	adds	r7, #16
 80291f8:	46bd      	mov	sp, r7
 80291fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80291fe:	b004      	add	sp, #16
 8029200:	4770      	bx	lr

08029202 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8029202:	b480      	push	{r7}
 8029204:	b083      	sub	sp, #12
 8029206:	af00      	add	r7, sp, #0
 8029208:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802920a:	687b      	ldr	r3, [r7, #4]
 802920c:	689b      	ldr	r3, [r3, #8]
 802920e:	f043 0201 	orr.w	r2, r3, #1
 8029212:	687b      	ldr	r3, [r7, #4]
 8029214:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8029216:	2300      	movs	r3, #0
}
 8029218:	4618      	mov	r0, r3
 802921a:	370c      	adds	r7, #12
 802921c:	46bd      	mov	sp, r7
 802921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029222:	4770      	bx	lr

08029224 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8029224:	b480      	push	{r7}
 8029226:	b083      	sub	sp, #12
 8029228:	af00      	add	r7, sp, #0
 802922a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802922c:	687b      	ldr	r3, [r7, #4]
 802922e:	689b      	ldr	r3, [r3, #8]
 8029230:	f023 0201 	bic.w	r2, r3, #1
 8029234:	687b      	ldr	r3, [r7, #4]
 8029236:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8029238:	2300      	movs	r3, #0
}
 802923a:	4618      	mov	r0, r3
 802923c:	370c      	adds	r7, #12
 802923e:	46bd      	mov	sp, r7
 8029240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029244:	4770      	bx	lr

08029246 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8029246:	b580      	push	{r7, lr}
 8029248:	b084      	sub	sp, #16
 802924a:	af00      	add	r7, sp, #0
 802924c:	6078      	str	r0, [r7, #4]
 802924e:	460b      	mov	r3, r1
 8029250:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8029252:	2300      	movs	r3, #0
 8029254:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8029256:	687b      	ldr	r3, [r7, #4]
 8029258:	68db      	ldr	r3, [r3, #12]
 802925a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802925e:	687b      	ldr	r3, [r7, #4]
 8029260:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8029262:	78fb      	ldrb	r3, [r7, #3]
 8029264:	2b01      	cmp	r3, #1
 8029266:	d115      	bne.n	8029294 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8029268:	687b      	ldr	r3, [r7, #4]
 802926a:	68db      	ldr	r3, [r3, #12]
 802926c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8029270:	687b      	ldr	r3, [r7, #4]
 8029272:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8029274:	2001      	movs	r0, #1
 8029276:	f7f9 fdcb 	bl	8022e10 <HAL_Delay>
      ms++;
 802927a:	68fb      	ldr	r3, [r7, #12]
 802927c:	3301      	adds	r3, #1
 802927e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8029280:	6878      	ldr	r0, [r7, #4]
 8029282:	f000 f93a 	bl	80294fa <USB_GetMode>
 8029286:	4603      	mov	r3, r0
 8029288:	2b01      	cmp	r3, #1
 802928a:	d01e      	beq.n	80292ca <USB_SetCurrentMode+0x84>
 802928c:	68fb      	ldr	r3, [r7, #12]
 802928e:	2b31      	cmp	r3, #49	; 0x31
 8029290:	d9f0      	bls.n	8029274 <USB_SetCurrentMode+0x2e>
 8029292:	e01a      	b.n	80292ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8029294:	78fb      	ldrb	r3, [r7, #3]
 8029296:	2b00      	cmp	r3, #0
 8029298:	d115      	bne.n	80292c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802929a:	687b      	ldr	r3, [r7, #4]
 802929c:	68db      	ldr	r3, [r3, #12]
 802929e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80292a2:	687b      	ldr	r3, [r7, #4]
 80292a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80292a6:	2001      	movs	r0, #1
 80292a8:	f7f9 fdb2 	bl	8022e10 <HAL_Delay>
      ms++;
 80292ac:	68fb      	ldr	r3, [r7, #12]
 80292ae:	3301      	adds	r3, #1
 80292b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80292b2:	6878      	ldr	r0, [r7, #4]
 80292b4:	f000 f921 	bl	80294fa <USB_GetMode>
 80292b8:	4603      	mov	r3, r0
 80292ba:	2b00      	cmp	r3, #0
 80292bc:	d005      	beq.n	80292ca <USB_SetCurrentMode+0x84>
 80292be:	68fb      	ldr	r3, [r7, #12]
 80292c0:	2b31      	cmp	r3, #49	; 0x31
 80292c2:	d9f0      	bls.n	80292a6 <USB_SetCurrentMode+0x60>
 80292c4:	e001      	b.n	80292ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80292c6:	2301      	movs	r3, #1
 80292c8:	e005      	b.n	80292d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80292ca:	68fb      	ldr	r3, [r7, #12]
 80292cc:	2b32      	cmp	r3, #50	; 0x32
 80292ce:	d101      	bne.n	80292d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80292d0:	2301      	movs	r3, #1
 80292d2:	e000      	b.n	80292d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80292d4:	2300      	movs	r3, #0
}
 80292d6:	4618      	mov	r0, r3
 80292d8:	3710      	adds	r7, #16
 80292da:	46bd      	mov	sp, r7
 80292dc:	bd80      	pop	{r7, pc}
	...

080292e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80292e0:	b480      	push	{r7}
 80292e2:	b085      	sub	sp, #20
 80292e4:	af00      	add	r7, sp, #0
 80292e6:	6078      	str	r0, [r7, #4]
 80292e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80292ea:	2300      	movs	r3, #0
 80292ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80292ee:	68fb      	ldr	r3, [r7, #12]
 80292f0:	3301      	adds	r3, #1
 80292f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80292f4:	68fb      	ldr	r3, [r7, #12]
 80292f6:	4a13      	ldr	r2, [pc, #76]	; (8029344 <USB_FlushTxFifo+0x64>)
 80292f8:	4293      	cmp	r3, r2
 80292fa:	d901      	bls.n	8029300 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80292fc:	2303      	movs	r3, #3
 80292fe:	e01b      	b.n	8029338 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8029300:	687b      	ldr	r3, [r7, #4]
 8029302:	691b      	ldr	r3, [r3, #16]
 8029304:	2b00      	cmp	r3, #0
 8029306:	daf2      	bge.n	80292ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8029308:	2300      	movs	r3, #0
 802930a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802930c:	683b      	ldr	r3, [r7, #0]
 802930e:	019b      	lsls	r3, r3, #6
 8029310:	f043 0220 	orr.w	r2, r3, #32
 8029314:	687b      	ldr	r3, [r7, #4]
 8029316:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8029318:	68fb      	ldr	r3, [r7, #12]
 802931a:	3301      	adds	r3, #1
 802931c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802931e:	68fb      	ldr	r3, [r7, #12]
 8029320:	4a08      	ldr	r2, [pc, #32]	; (8029344 <USB_FlushTxFifo+0x64>)
 8029322:	4293      	cmp	r3, r2
 8029324:	d901      	bls.n	802932a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8029326:	2303      	movs	r3, #3
 8029328:	e006      	b.n	8029338 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802932a:	687b      	ldr	r3, [r7, #4]
 802932c:	691b      	ldr	r3, [r3, #16]
 802932e:	f003 0320 	and.w	r3, r3, #32
 8029332:	2b20      	cmp	r3, #32
 8029334:	d0f0      	beq.n	8029318 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8029336:	2300      	movs	r3, #0
}
 8029338:	4618      	mov	r0, r3
 802933a:	3714      	adds	r7, #20
 802933c:	46bd      	mov	sp, r7
 802933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029342:	4770      	bx	lr
 8029344:	00030d40 	.word	0x00030d40

08029348 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8029348:	b480      	push	{r7}
 802934a:	b085      	sub	sp, #20
 802934c:	af00      	add	r7, sp, #0
 802934e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8029350:	2300      	movs	r3, #0
 8029352:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8029354:	68fb      	ldr	r3, [r7, #12]
 8029356:	3301      	adds	r3, #1
 8029358:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802935a:	68fb      	ldr	r3, [r7, #12]
 802935c:	4a11      	ldr	r2, [pc, #68]	; (80293a4 <USB_FlushRxFifo+0x5c>)
 802935e:	4293      	cmp	r3, r2
 8029360:	d901      	bls.n	8029366 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8029362:	2303      	movs	r3, #3
 8029364:	e018      	b.n	8029398 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8029366:	687b      	ldr	r3, [r7, #4]
 8029368:	691b      	ldr	r3, [r3, #16]
 802936a:	2b00      	cmp	r3, #0
 802936c:	daf2      	bge.n	8029354 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802936e:	2300      	movs	r3, #0
 8029370:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8029372:	687b      	ldr	r3, [r7, #4]
 8029374:	2210      	movs	r2, #16
 8029376:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8029378:	68fb      	ldr	r3, [r7, #12]
 802937a:	3301      	adds	r3, #1
 802937c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802937e:	68fb      	ldr	r3, [r7, #12]
 8029380:	4a08      	ldr	r2, [pc, #32]	; (80293a4 <USB_FlushRxFifo+0x5c>)
 8029382:	4293      	cmp	r3, r2
 8029384:	d901      	bls.n	802938a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8029386:	2303      	movs	r3, #3
 8029388:	e006      	b.n	8029398 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802938a:	687b      	ldr	r3, [r7, #4]
 802938c:	691b      	ldr	r3, [r3, #16]
 802938e:	f003 0310 	and.w	r3, r3, #16
 8029392:	2b10      	cmp	r3, #16
 8029394:	d0f0      	beq.n	8029378 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8029396:	2300      	movs	r3, #0
}
 8029398:	4618      	mov	r0, r3
 802939a:	3714      	adds	r7, #20
 802939c:	46bd      	mov	sp, r7
 802939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293a2:	4770      	bx	lr
 80293a4:	00030d40 	.word	0x00030d40

080293a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80293a8:	b480      	push	{r7}
 80293aa:	b089      	sub	sp, #36	; 0x24
 80293ac:	af00      	add	r7, sp, #0
 80293ae:	60f8      	str	r0, [r7, #12]
 80293b0:	60b9      	str	r1, [r7, #8]
 80293b2:	4611      	mov	r1, r2
 80293b4:	461a      	mov	r2, r3
 80293b6:	460b      	mov	r3, r1
 80293b8:	71fb      	strb	r3, [r7, #7]
 80293ba:	4613      	mov	r3, r2
 80293bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80293be:	68fb      	ldr	r3, [r7, #12]
 80293c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80293c2:	68bb      	ldr	r3, [r7, #8]
 80293c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80293c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80293ca:	2b00      	cmp	r3, #0
 80293cc:	d123      	bne.n	8029416 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80293ce:	88bb      	ldrh	r3, [r7, #4]
 80293d0:	3303      	adds	r3, #3
 80293d2:	089b      	lsrs	r3, r3, #2
 80293d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80293d6:	2300      	movs	r3, #0
 80293d8:	61bb      	str	r3, [r7, #24]
 80293da:	e018      	b.n	802940e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80293dc:	79fb      	ldrb	r3, [r7, #7]
 80293de:	031a      	lsls	r2, r3, #12
 80293e0:	697b      	ldr	r3, [r7, #20]
 80293e2:	4413      	add	r3, r2
 80293e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80293e8:	461a      	mov	r2, r3
 80293ea:	69fb      	ldr	r3, [r7, #28]
 80293ec:	681b      	ldr	r3, [r3, #0]
 80293ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80293f0:	69fb      	ldr	r3, [r7, #28]
 80293f2:	3301      	adds	r3, #1
 80293f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80293f6:	69fb      	ldr	r3, [r7, #28]
 80293f8:	3301      	adds	r3, #1
 80293fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80293fc:	69fb      	ldr	r3, [r7, #28]
 80293fe:	3301      	adds	r3, #1
 8029400:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8029402:	69fb      	ldr	r3, [r7, #28]
 8029404:	3301      	adds	r3, #1
 8029406:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8029408:	69bb      	ldr	r3, [r7, #24]
 802940a:	3301      	adds	r3, #1
 802940c:	61bb      	str	r3, [r7, #24]
 802940e:	69ba      	ldr	r2, [r7, #24]
 8029410:	693b      	ldr	r3, [r7, #16]
 8029412:	429a      	cmp	r2, r3
 8029414:	d3e2      	bcc.n	80293dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8029416:	2300      	movs	r3, #0
}
 8029418:	4618      	mov	r0, r3
 802941a:	3724      	adds	r7, #36	; 0x24
 802941c:	46bd      	mov	sp, r7
 802941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029422:	4770      	bx	lr

08029424 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8029424:	b480      	push	{r7}
 8029426:	b08b      	sub	sp, #44	; 0x2c
 8029428:	af00      	add	r7, sp, #0
 802942a:	60f8      	str	r0, [r7, #12]
 802942c:	60b9      	str	r1, [r7, #8]
 802942e:	4613      	mov	r3, r2
 8029430:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029432:	68fb      	ldr	r3, [r7, #12]
 8029434:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8029436:	68bb      	ldr	r3, [r7, #8]
 8029438:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802943a:	88fb      	ldrh	r3, [r7, #6]
 802943c:	089b      	lsrs	r3, r3, #2
 802943e:	b29b      	uxth	r3, r3
 8029440:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8029442:	88fb      	ldrh	r3, [r7, #6]
 8029444:	f003 0303 	and.w	r3, r3, #3
 8029448:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802944a:	2300      	movs	r3, #0
 802944c:	623b      	str	r3, [r7, #32]
 802944e:	e014      	b.n	802947a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8029450:	69bb      	ldr	r3, [r7, #24]
 8029452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8029456:	681a      	ldr	r2, [r3, #0]
 8029458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802945a:	601a      	str	r2, [r3, #0]
    pDest++;
 802945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802945e:	3301      	adds	r3, #1
 8029460:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8029462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029464:	3301      	adds	r3, #1
 8029466:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8029468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802946a:	3301      	adds	r3, #1
 802946c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802946e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029470:	3301      	adds	r3, #1
 8029472:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8029474:	6a3b      	ldr	r3, [r7, #32]
 8029476:	3301      	adds	r3, #1
 8029478:	623b      	str	r3, [r7, #32]
 802947a:	6a3a      	ldr	r2, [r7, #32]
 802947c:	697b      	ldr	r3, [r7, #20]
 802947e:	429a      	cmp	r2, r3
 8029480:	d3e6      	bcc.n	8029450 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8029482:	8bfb      	ldrh	r3, [r7, #30]
 8029484:	2b00      	cmp	r3, #0
 8029486:	d01e      	beq.n	80294c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8029488:	2300      	movs	r3, #0
 802948a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 802948c:	69bb      	ldr	r3, [r7, #24]
 802948e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8029492:	461a      	mov	r2, r3
 8029494:	f107 0310 	add.w	r3, r7, #16
 8029498:	6812      	ldr	r2, [r2, #0]
 802949a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 802949c:	693a      	ldr	r2, [r7, #16]
 802949e:	6a3b      	ldr	r3, [r7, #32]
 80294a0:	b2db      	uxtb	r3, r3
 80294a2:	00db      	lsls	r3, r3, #3
 80294a4:	fa22 f303 	lsr.w	r3, r2, r3
 80294a8:	b2da      	uxtb	r2, r3
 80294aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80294ac:	701a      	strb	r2, [r3, #0]
      i++;
 80294ae:	6a3b      	ldr	r3, [r7, #32]
 80294b0:	3301      	adds	r3, #1
 80294b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80294b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80294b6:	3301      	adds	r3, #1
 80294b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80294ba:	8bfb      	ldrh	r3, [r7, #30]
 80294bc:	3b01      	subs	r3, #1
 80294be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80294c0:	8bfb      	ldrh	r3, [r7, #30]
 80294c2:	2b00      	cmp	r3, #0
 80294c4:	d1ea      	bne.n	802949c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80294c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80294c8:	4618      	mov	r0, r3
 80294ca:	372c      	adds	r7, #44	; 0x2c
 80294cc:	46bd      	mov	sp, r7
 80294ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294d2:	4770      	bx	lr

080294d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80294d4:	b480      	push	{r7}
 80294d6:	b085      	sub	sp, #20
 80294d8:	af00      	add	r7, sp, #0
 80294da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80294dc:	687b      	ldr	r3, [r7, #4]
 80294de:	695b      	ldr	r3, [r3, #20]
 80294e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80294e2:	687b      	ldr	r3, [r7, #4]
 80294e4:	699b      	ldr	r3, [r3, #24]
 80294e6:	68fa      	ldr	r2, [r7, #12]
 80294e8:	4013      	ands	r3, r2
 80294ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80294ec:	68fb      	ldr	r3, [r7, #12]
}
 80294ee:	4618      	mov	r0, r3
 80294f0:	3714      	adds	r7, #20
 80294f2:	46bd      	mov	sp, r7
 80294f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294f8:	4770      	bx	lr

080294fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80294fa:	b480      	push	{r7}
 80294fc:	b083      	sub	sp, #12
 80294fe:	af00      	add	r7, sp, #0
 8029500:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8029502:	687b      	ldr	r3, [r7, #4]
 8029504:	695b      	ldr	r3, [r3, #20]
 8029506:	f003 0301 	and.w	r3, r3, #1
}
 802950a:	4618      	mov	r0, r3
 802950c:	370c      	adds	r7, #12
 802950e:	46bd      	mov	sp, r7
 8029510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029514:	4770      	bx	lr
	...

08029518 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8029518:	b480      	push	{r7}
 802951a:	b085      	sub	sp, #20
 802951c:	af00      	add	r7, sp, #0
 802951e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8029520:	2300      	movs	r3, #0
 8029522:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8029524:	68fb      	ldr	r3, [r7, #12]
 8029526:	3301      	adds	r3, #1
 8029528:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802952a:	68fb      	ldr	r3, [r7, #12]
 802952c:	4a13      	ldr	r2, [pc, #76]	; (802957c <USB_CoreReset+0x64>)
 802952e:	4293      	cmp	r3, r2
 8029530:	d901      	bls.n	8029536 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8029532:	2303      	movs	r3, #3
 8029534:	e01b      	b.n	802956e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8029536:	687b      	ldr	r3, [r7, #4]
 8029538:	691b      	ldr	r3, [r3, #16]
 802953a:	2b00      	cmp	r3, #0
 802953c:	daf2      	bge.n	8029524 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802953e:	2300      	movs	r3, #0
 8029540:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8029542:	687b      	ldr	r3, [r7, #4]
 8029544:	691b      	ldr	r3, [r3, #16]
 8029546:	f043 0201 	orr.w	r2, r3, #1
 802954a:	687b      	ldr	r3, [r7, #4]
 802954c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802954e:	68fb      	ldr	r3, [r7, #12]
 8029550:	3301      	adds	r3, #1
 8029552:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8029554:	68fb      	ldr	r3, [r7, #12]
 8029556:	4a09      	ldr	r2, [pc, #36]	; (802957c <USB_CoreReset+0x64>)
 8029558:	4293      	cmp	r3, r2
 802955a:	d901      	bls.n	8029560 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802955c:	2303      	movs	r3, #3
 802955e:	e006      	b.n	802956e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8029560:	687b      	ldr	r3, [r7, #4]
 8029562:	691b      	ldr	r3, [r3, #16]
 8029564:	f003 0301 	and.w	r3, r3, #1
 8029568:	2b01      	cmp	r3, #1
 802956a:	d0f0      	beq.n	802954e <USB_CoreReset+0x36>

  return HAL_OK;
 802956c:	2300      	movs	r3, #0
}
 802956e:	4618      	mov	r0, r3
 8029570:	3714      	adds	r7, #20
 8029572:	46bd      	mov	sp, r7
 8029574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029578:	4770      	bx	lr
 802957a:	bf00      	nop
 802957c:	00030d40 	.word	0x00030d40

08029580 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8029580:	b084      	sub	sp, #16
 8029582:	b580      	push	{r7, lr}
 8029584:	b086      	sub	sp, #24
 8029586:	af00      	add	r7, sp, #0
 8029588:	6078      	str	r0, [r7, #4]
 802958a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802958e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8029592:	2300      	movs	r3, #0
 8029594:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029596:	687b      	ldr	r3, [r7, #4]
 8029598:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802959a:	68fb      	ldr	r3, [r7, #12]
 802959c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80295a0:	461a      	mov	r2, r3
 80295a2:	2300      	movs	r3, #0
 80295a4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80295a6:	687b      	ldr	r3, [r7, #4]
 80295a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80295aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80295ae:	687b      	ldr	r3, [r7, #4]
 80295b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80295b2:	687b      	ldr	r3, [r7, #4]
 80295b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80295b6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80295ba:	687b      	ldr	r3, [r7, #4]
 80295bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80295be:	687b      	ldr	r3, [r7, #4]
 80295c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80295c2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80295c6:	687b      	ldr	r3, [r7, #4]
 80295c8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80295ca:	687b      	ldr	r3, [r7, #4]
 80295cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80295ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80295d2:	2b00      	cmp	r3, #0
 80295d4:	d018      	beq.n	8029608 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80295d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80295d8:	2b01      	cmp	r3, #1
 80295da:	d10a      	bne.n	80295f2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80295dc:	68fb      	ldr	r3, [r7, #12]
 80295de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80295e2:	681b      	ldr	r3, [r3, #0]
 80295e4:	68fa      	ldr	r2, [r7, #12]
 80295e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80295ea:	f043 0304 	orr.w	r3, r3, #4
 80295ee:	6013      	str	r3, [r2, #0]
 80295f0:	e014      	b.n	802961c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80295f2:	68fb      	ldr	r3, [r7, #12]
 80295f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80295f8:	681b      	ldr	r3, [r3, #0]
 80295fa:	68fa      	ldr	r2, [r7, #12]
 80295fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8029600:	f023 0304 	bic.w	r3, r3, #4
 8029604:	6013      	str	r3, [r2, #0]
 8029606:	e009      	b.n	802961c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8029608:	68fb      	ldr	r3, [r7, #12]
 802960a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802960e:	681b      	ldr	r3, [r3, #0]
 8029610:	68fa      	ldr	r2, [r7, #12]
 8029612:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8029616:	f023 0304 	bic.w	r3, r3, #4
 802961a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802961c:	2110      	movs	r1, #16
 802961e:	6878      	ldr	r0, [r7, #4]
 8029620:	f7ff fe5e 	bl	80292e0 <USB_FlushTxFifo>
 8029624:	4603      	mov	r3, r0
 8029626:	2b00      	cmp	r3, #0
 8029628:	d001      	beq.n	802962e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 802962a:	2301      	movs	r3, #1
 802962c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802962e:	6878      	ldr	r0, [r7, #4]
 8029630:	f7ff fe8a 	bl	8029348 <USB_FlushRxFifo>
 8029634:	4603      	mov	r3, r0
 8029636:	2b00      	cmp	r3, #0
 8029638:	d001      	beq.n	802963e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 802963a:	2301      	movs	r3, #1
 802963c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 802963e:	2300      	movs	r3, #0
 8029640:	613b      	str	r3, [r7, #16]
 8029642:	e015      	b.n	8029670 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8029644:	693b      	ldr	r3, [r7, #16]
 8029646:	015a      	lsls	r2, r3, #5
 8029648:	68fb      	ldr	r3, [r7, #12]
 802964a:	4413      	add	r3, r2
 802964c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029650:	461a      	mov	r2, r3
 8029652:	f04f 33ff 	mov.w	r3, #4294967295
 8029656:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8029658:	693b      	ldr	r3, [r7, #16]
 802965a:	015a      	lsls	r2, r3, #5
 802965c:	68fb      	ldr	r3, [r7, #12]
 802965e:	4413      	add	r3, r2
 8029660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029664:	461a      	mov	r2, r3
 8029666:	2300      	movs	r3, #0
 8029668:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 802966a:	693b      	ldr	r3, [r7, #16]
 802966c:	3301      	adds	r3, #1
 802966e:	613b      	str	r3, [r7, #16]
 8029670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029672:	693a      	ldr	r2, [r7, #16]
 8029674:	429a      	cmp	r2, r3
 8029676:	d3e5      	bcc.n	8029644 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8029678:	687b      	ldr	r3, [r7, #4]
 802967a:	2200      	movs	r2, #0
 802967c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 802967e:	687b      	ldr	r3, [r7, #4]
 8029680:	f04f 32ff 	mov.w	r2, #4294967295
 8029684:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8029686:	687b      	ldr	r3, [r7, #4]
 8029688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802968a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802968e:	2b00      	cmp	r3, #0
 8029690:	d00b      	beq.n	80296aa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8029692:	687b      	ldr	r3, [r7, #4]
 8029694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8029698:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 802969a:	687b      	ldr	r3, [r7, #4]
 802969c:	4a13      	ldr	r2, [pc, #76]	; (80296ec <USB_HostInit+0x16c>)
 802969e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80296a0:	687b      	ldr	r3, [r7, #4]
 80296a2:	4a13      	ldr	r2, [pc, #76]	; (80296f0 <USB_HostInit+0x170>)
 80296a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80296a8:	e009      	b.n	80296be <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80296aa:	687b      	ldr	r3, [r7, #4]
 80296ac:	2280      	movs	r2, #128	; 0x80
 80296ae:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80296b0:	687b      	ldr	r3, [r7, #4]
 80296b2:	4a10      	ldr	r2, [pc, #64]	; (80296f4 <USB_HostInit+0x174>)
 80296b4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80296b6:	687b      	ldr	r3, [r7, #4]
 80296b8:	4a0f      	ldr	r2, [pc, #60]	; (80296f8 <USB_HostInit+0x178>)
 80296ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80296be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80296c0:	2b00      	cmp	r3, #0
 80296c2:	d105      	bne.n	80296d0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80296c4:	687b      	ldr	r3, [r7, #4]
 80296c6:	699b      	ldr	r3, [r3, #24]
 80296c8:	f043 0210 	orr.w	r2, r3, #16
 80296cc:	687b      	ldr	r3, [r7, #4]
 80296ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80296d0:	687b      	ldr	r3, [r7, #4]
 80296d2:	699a      	ldr	r2, [r3, #24]
 80296d4:	4b09      	ldr	r3, [pc, #36]	; (80296fc <USB_HostInit+0x17c>)
 80296d6:	4313      	orrs	r3, r2
 80296d8:	687a      	ldr	r2, [r7, #4]
 80296da:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80296dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80296de:	4618      	mov	r0, r3
 80296e0:	3718      	adds	r7, #24
 80296e2:	46bd      	mov	sp, r7
 80296e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80296e8:	b004      	add	sp, #16
 80296ea:	4770      	bx	lr
 80296ec:	01000200 	.word	0x01000200
 80296f0:	00e00300 	.word	0x00e00300
 80296f4:	00600080 	.word	0x00600080
 80296f8:	004000e0 	.word	0x004000e0
 80296fc:	a3200008 	.word	0xa3200008

08029700 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8029700:	b480      	push	{r7}
 8029702:	b085      	sub	sp, #20
 8029704:	af00      	add	r7, sp, #0
 8029706:	6078      	str	r0, [r7, #4]
 8029708:	460b      	mov	r3, r1
 802970a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802970c:	687b      	ldr	r3, [r7, #4]
 802970e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8029710:	68fb      	ldr	r3, [r7, #12]
 8029712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8029716:	681b      	ldr	r3, [r3, #0]
 8029718:	68fa      	ldr	r2, [r7, #12]
 802971a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802971e:	f023 0303 	bic.w	r3, r3, #3
 8029722:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8029724:	68fb      	ldr	r3, [r7, #12]
 8029726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802972a:	681a      	ldr	r2, [r3, #0]
 802972c:	78fb      	ldrb	r3, [r7, #3]
 802972e:	f003 0303 	and.w	r3, r3, #3
 8029732:	68f9      	ldr	r1, [r7, #12]
 8029734:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8029738:	4313      	orrs	r3, r2
 802973a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 802973c:	78fb      	ldrb	r3, [r7, #3]
 802973e:	2b01      	cmp	r3, #1
 8029740:	d107      	bne.n	8029752 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8029742:	68fb      	ldr	r3, [r7, #12]
 8029744:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8029748:	461a      	mov	r2, r3
 802974a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 802974e:	6053      	str	r3, [r2, #4]
 8029750:	e009      	b.n	8029766 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8029752:	78fb      	ldrb	r3, [r7, #3]
 8029754:	2b02      	cmp	r3, #2
 8029756:	d106      	bne.n	8029766 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8029758:	68fb      	ldr	r3, [r7, #12]
 802975a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802975e:	461a      	mov	r2, r3
 8029760:	f241 7370 	movw	r3, #6000	; 0x1770
 8029764:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8029766:	2300      	movs	r3, #0
}
 8029768:	4618      	mov	r0, r3
 802976a:	3714      	adds	r7, #20
 802976c:	46bd      	mov	sp, r7
 802976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029772:	4770      	bx	lr

08029774 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8029774:	b580      	push	{r7, lr}
 8029776:	b084      	sub	sp, #16
 8029778:	af00      	add	r7, sp, #0
 802977a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802977c:	687b      	ldr	r3, [r7, #4]
 802977e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8029780:	2300      	movs	r3, #0
 8029782:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8029784:	68fb      	ldr	r3, [r7, #12]
 8029786:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802978a:	681b      	ldr	r3, [r3, #0]
 802978c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802978e:	68bb      	ldr	r3, [r7, #8]
 8029790:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8029794:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8029796:	68bb      	ldr	r3, [r7, #8]
 8029798:	68fa      	ldr	r2, [r7, #12]
 802979a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802979e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80297a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80297a4:	2064      	movs	r0, #100	; 0x64
 80297a6:	f7f9 fb33 	bl	8022e10 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80297aa:	68bb      	ldr	r3, [r7, #8]
 80297ac:	68fa      	ldr	r2, [r7, #12]
 80297ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80297b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80297b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80297b8:	200a      	movs	r0, #10
 80297ba:	f7f9 fb29 	bl	8022e10 <HAL_Delay>

  return HAL_OK;
 80297be:	2300      	movs	r3, #0
}
 80297c0:	4618      	mov	r0, r3
 80297c2:	3710      	adds	r7, #16
 80297c4:	46bd      	mov	sp, r7
 80297c6:	bd80      	pop	{r7, pc}

080297c8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80297c8:	b480      	push	{r7}
 80297ca:	b085      	sub	sp, #20
 80297cc:	af00      	add	r7, sp, #0
 80297ce:	6078      	str	r0, [r7, #4]
 80297d0:	460b      	mov	r3, r1
 80297d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80297d4:	687b      	ldr	r3, [r7, #4]
 80297d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80297d8:	2300      	movs	r3, #0
 80297da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80297dc:	68fb      	ldr	r3, [r7, #12]
 80297de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80297e2:	681b      	ldr	r3, [r3, #0]
 80297e4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80297e6:	68bb      	ldr	r3, [r7, #8]
 80297e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80297ec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80297ee:	68bb      	ldr	r3, [r7, #8]
 80297f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80297f4:	2b00      	cmp	r3, #0
 80297f6:	d109      	bne.n	802980c <USB_DriveVbus+0x44>
 80297f8:	78fb      	ldrb	r3, [r7, #3]
 80297fa:	2b01      	cmp	r3, #1
 80297fc:	d106      	bne.n	802980c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80297fe:	68bb      	ldr	r3, [r7, #8]
 8029800:	68fa      	ldr	r2, [r7, #12]
 8029802:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8029806:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802980a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 802980c:	68bb      	ldr	r3, [r7, #8]
 802980e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8029812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029816:	d109      	bne.n	802982c <USB_DriveVbus+0x64>
 8029818:	78fb      	ldrb	r3, [r7, #3]
 802981a:	2b00      	cmp	r3, #0
 802981c:	d106      	bne.n	802982c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 802981e:	68bb      	ldr	r3, [r7, #8]
 8029820:	68fa      	ldr	r2, [r7, #12]
 8029822:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8029826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802982a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 802982c:	2300      	movs	r3, #0
}
 802982e:	4618      	mov	r0, r3
 8029830:	3714      	adds	r7, #20
 8029832:	46bd      	mov	sp, r7
 8029834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029838:	4770      	bx	lr

0802983a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802983a:	b480      	push	{r7}
 802983c:	b085      	sub	sp, #20
 802983e:	af00      	add	r7, sp, #0
 8029840:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029842:	687b      	ldr	r3, [r7, #4]
 8029844:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8029846:	2300      	movs	r3, #0
 8029848:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802984a:	68fb      	ldr	r3, [r7, #12]
 802984c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8029850:	681b      	ldr	r3, [r3, #0]
 8029852:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8029854:	68bb      	ldr	r3, [r7, #8]
 8029856:	0c5b      	lsrs	r3, r3, #17
 8029858:	f003 0303 	and.w	r3, r3, #3
}
 802985c:	4618      	mov	r0, r3
 802985e:	3714      	adds	r7, #20
 8029860:	46bd      	mov	sp, r7
 8029862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029866:	4770      	bx	lr

08029868 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8029868:	b480      	push	{r7}
 802986a:	b085      	sub	sp, #20
 802986c:	af00      	add	r7, sp, #0
 802986e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029870:	687b      	ldr	r3, [r7, #4]
 8029872:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8029874:	68fb      	ldr	r3, [r7, #12]
 8029876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802987a:	689b      	ldr	r3, [r3, #8]
 802987c:	b29b      	uxth	r3, r3
}
 802987e:	4618      	mov	r0, r3
 8029880:	3714      	adds	r7, #20
 8029882:	46bd      	mov	sp, r7
 8029884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029888:	4770      	bx	lr
	...

0802988c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 802988c:	b580      	push	{r7, lr}
 802988e:	b088      	sub	sp, #32
 8029890:	af00      	add	r7, sp, #0
 8029892:	6078      	str	r0, [r7, #4]
 8029894:	4608      	mov	r0, r1
 8029896:	4611      	mov	r1, r2
 8029898:	461a      	mov	r2, r3
 802989a:	4603      	mov	r3, r0
 802989c:	70fb      	strb	r3, [r7, #3]
 802989e:	460b      	mov	r3, r1
 80298a0:	70bb      	strb	r3, [r7, #2]
 80298a2:	4613      	mov	r3, r2
 80298a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80298a6:	2300      	movs	r3, #0
 80298a8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80298aa:	687b      	ldr	r3, [r7, #4]
 80298ac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80298ae:	78fb      	ldrb	r3, [r7, #3]
 80298b0:	015a      	lsls	r2, r3, #5
 80298b2:	693b      	ldr	r3, [r7, #16]
 80298b4:	4413      	add	r3, r2
 80298b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80298ba:	461a      	mov	r2, r3
 80298bc:	f04f 33ff 	mov.w	r3, #4294967295
 80298c0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80298c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80298c6:	2b03      	cmp	r3, #3
 80298c8:	d87e      	bhi.n	80299c8 <USB_HC_Init+0x13c>
 80298ca:	a201      	add	r2, pc, #4	; (adr r2, 80298d0 <USB_HC_Init+0x44>)
 80298cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80298d0:	080298e1 	.word	0x080298e1
 80298d4:	0802998b 	.word	0x0802998b
 80298d8:	080298e1 	.word	0x080298e1
 80298dc:	0802994d 	.word	0x0802994d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80298e0:	78fb      	ldrb	r3, [r7, #3]
 80298e2:	015a      	lsls	r2, r3, #5
 80298e4:	693b      	ldr	r3, [r7, #16]
 80298e6:	4413      	add	r3, r2
 80298e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80298ec:	461a      	mov	r2, r3
 80298ee:	f240 439d 	movw	r3, #1181	; 0x49d
 80298f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80298f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80298f8:	2b00      	cmp	r3, #0
 80298fa:	da10      	bge.n	802991e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80298fc:	78fb      	ldrb	r3, [r7, #3]
 80298fe:	015a      	lsls	r2, r3, #5
 8029900:	693b      	ldr	r3, [r7, #16]
 8029902:	4413      	add	r3, r2
 8029904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029908:	68db      	ldr	r3, [r3, #12]
 802990a:	78fa      	ldrb	r2, [r7, #3]
 802990c:	0151      	lsls	r1, r2, #5
 802990e:	693a      	ldr	r2, [r7, #16]
 8029910:	440a      	add	r2, r1
 8029912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8029916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802991a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 802991c:	e057      	b.n	80299ce <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 802991e:	687b      	ldr	r3, [r7, #4]
 8029920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8029926:	2b00      	cmp	r3, #0
 8029928:	d051      	beq.n	80299ce <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 802992a:	78fb      	ldrb	r3, [r7, #3]
 802992c:	015a      	lsls	r2, r3, #5
 802992e:	693b      	ldr	r3, [r7, #16]
 8029930:	4413      	add	r3, r2
 8029932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029936:	68db      	ldr	r3, [r3, #12]
 8029938:	78fa      	ldrb	r2, [r7, #3]
 802993a:	0151      	lsls	r1, r2, #5
 802993c:	693a      	ldr	r2, [r7, #16]
 802993e:	440a      	add	r2, r1
 8029940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8029944:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8029948:	60d3      	str	r3, [r2, #12]
      break;
 802994a:	e040      	b.n	80299ce <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802994c:	78fb      	ldrb	r3, [r7, #3]
 802994e:	015a      	lsls	r2, r3, #5
 8029950:	693b      	ldr	r3, [r7, #16]
 8029952:	4413      	add	r3, r2
 8029954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029958:	461a      	mov	r2, r3
 802995a:	f240 639d 	movw	r3, #1693	; 0x69d
 802995e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8029960:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8029964:	2b00      	cmp	r3, #0
 8029966:	da34      	bge.n	80299d2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8029968:	78fb      	ldrb	r3, [r7, #3]
 802996a:	015a      	lsls	r2, r3, #5
 802996c:	693b      	ldr	r3, [r7, #16]
 802996e:	4413      	add	r3, r2
 8029970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029974:	68db      	ldr	r3, [r3, #12]
 8029976:	78fa      	ldrb	r2, [r7, #3]
 8029978:	0151      	lsls	r1, r2, #5
 802997a:	693a      	ldr	r2, [r7, #16]
 802997c:	440a      	add	r2, r1
 802997e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8029982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8029986:	60d3      	str	r3, [r2, #12]
      }

      break;
 8029988:	e023      	b.n	80299d2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802998a:	78fb      	ldrb	r3, [r7, #3]
 802998c:	015a      	lsls	r2, r3, #5
 802998e:	693b      	ldr	r3, [r7, #16]
 8029990:	4413      	add	r3, r2
 8029992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029996:	461a      	mov	r2, r3
 8029998:	f240 2325 	movw	r3, #549	; 0x225
 802999c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802999e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80299a2:	2b00      	cmp	r3, #0
 80299a4:	da17      	bge.n	80299d6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80299a6:	78fb      	ldrb	r3, [r7, #3]
 80299a8:	015a      	lsls	r2, r3, #5
 80299aa:	693b      	ldr	r3, [r7, #16]
 80299ac:	4413      	add	r3, r2
 80299ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80299b2:	68db      	ldr	r3, [r3, #12]
 80299b4:	78fa      	ldrb	r2, [r7, #3]
 80299b6:	0151      	lsls	r1, r2, #5
 80299b8:	693a      	ldr	r2, [r7, #16]
 80299ba:	440a      	add	r2, r1
 80299bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80299c0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80299c4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80299c6:	e006      	b.n	80299d6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80299c8:	2301      	movs	r3, #1
 80299ca:	77fb      	strb	r3, [r7, #31]
      break;
 80299cc:	e004      	b.n	80299d8 <USB_HC_Init+0x14c>
      break;
 80299ce:	bf00      	nop
 80299d0:	e002      	b.n	80299d8 <USB_HC_Init+0x14c>
      break;
 80299d2:	bf00      	nop
 80299d4:	e000      	b.n	80299d8 <USB_HC_Init+0x14c>
      break;
 80299d6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80299d8:	78fb      	ldrb	r3, [r7, #3]
 80299da:	015a      	lsls	r2, r3, #5
 80299dc:	693b      	ldr	r3, [r7, #16]
 80299de:	4413      	add	r3, r2
 80299e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80299e4:	68db      	ldr	r3, [r3, #12]
 80299e6:	78fa      	ldrb	r2, [r7, #3]
 80299e8:	0151      	lsls	r1, r2, #5
 80299ea:	693a      	ldr	r2, [r7, #16]
 80299ec:	440a      	add	r2, r1
 80299ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80299f2:	f043 0302 	orr.w	r3, r3, #2
 80299f6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80299f8:	693b      	ldr	r3, [r7, #16]
 80299fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80299fe:	699a      	ldr	r2, [r3, #24]
 8029a00:	78fb      	ldrb	r3, [r7, #3]
 8029a02:	f003 030f 	and.w	r3, r3, #15
 8029a06:	2101      	movs	r1, #1
 8029a08:	fa01 f303 	lsl.w	r3, r1, r3
 8029a0c:	6939      	ldr	r1, [r7, #16]
 8029a0e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8029a12:	4313      	orrs	r3, r2
 8029a14:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8029a16:	687b      	ldr	r3, [r7, #4]
 8029a18:	699b      	ldr	r3, [r3, #24]
 8029a1a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8029a1e:	687b      	ldr	r3, [r7, #4]
 8029a20:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8029a22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8029a26:	2b00      	cmp	r3, #0
 8029a28:	da03      	bge.n	8029a32 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8029a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029a2e:	61bb      	str	r3, [r7, #24]
 8029a30:	e001      	b.n	8029a36 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8029a32:	2300      	movs	r3, #0
 8029a34:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8029a36:	6878      	ldr	r0, [r7, #4]
 8029a38:	f7ff feff 	bl	802983a <USB_GetHostSpeed>
 8029a3c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8029a3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8029a42:	2b02      	cmp	r3, #2
 8029a44:	d106      	bne.n	8029a54 <USB_HC_Init+0x1c8>
 8029a46:	68fb      	ldr	r3, [r7, #12]
 8029a48:	2b02      	cmp	r3, #2
 8029a4a:	d003      	beq.n	8029a54 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8029a4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8029a50:	617b      	str	r3, [r7, #20]
 8029a52:	e001      	b.n	8029a58 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8029a54:	2300      	movs	r3, #0
 8029a56:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8029a58:	787b      	ldrb	r3, [r7, #1]
 8029a5a:	059b      	lsls	r3, r3, #22
 8029a5c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8029a60:	78bb      	ldrb	r3, [r7, #2]
 8029a62:	02db      	lsls	r3, r3, #11
 8029a64:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8029a68:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8029a6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8029a6e:	049b      	lsls	r3, r3, #18
 8029a70:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8029a74:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8029a76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8029a78:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8029a7c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8029a7e:	69bb      	ldr	r3, [r7, #24]
 8029a80:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8029a82:	78fb      	ldrb	r3, [r7, #3]
 8029a84:	0159      	lsls	r1, r3, #5
 8029a86:	693b      	ldr	r3, [r7, #16]
 8029a88:	440b      	add	r3, r1
 8029a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029a8e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8029a90:	697b      	ldr	r3, [r7, #20]
 8029a92:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8029a94:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8029a96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8029a9a:	2b03      	cmp	r3, #3
 8029a9c:	d003      	beq.n	8029aa6 <USB_HC_Init+0x21a>
 8029a9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8029aa2:	2b01      	cmp	r3, #1
 8029aa4:	d10f      	bne.n	8029ac6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8029aa6:	78fb      	ldrb	r3, [r7, #3]
 8029aa8:	015a      	lsls	r2, r3, #5
 8029aaa:	693b      	ldr	r3, [r7, #16]
 8029aac:	4413      	add	r3, r2
 8029aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029ab2:	681b      	ldr	r3, [r3, #0]
 8029ab4:	78fa      	ldrb	r2, [r7, #3]
 8029ab6:	0151      	lsls	r1, r2, #5
 8029ab8:	693a      	ldr	r2, [r7, #16]
 8029aba:	440a      	add	r2, r1
 8029abc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8029ac0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8029ac4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8029ac6:	7ffb      	ldrb	r3, [r7, #31]
}
 8029ac8:	4618      	mov	r0, r3
 8029aca:	3720      	adds	r7, #32
 8029acc:	46bd      	mov	sp, r7
 8029ace:	bd80      	pop	{r7, pc}

08029ad0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8029ad0:	b580      	push	{r7, lr}
 8029ad2:	b08c      	sub	sp, #48	; 0x30
 8029ad4:	af02      	add	r7, sp, #8
 8029ad6:	60f8      	str	r0, [r7, #12]
 8029ad8:	60b9      	str	r1, [r7, #8]
 8029ada:	4613      	mov	r3, r2
 8029adc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029ade:	68fb      	ldr	r3, [r7, #12]
 8029ae0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8029ae2:	68bb      	ldr	r3, [r7, #8]
 8029ae4:	785b      	ldrb	r3, [r3, #1]
 8029ae6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8029ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8029aec:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8029aee:	68fb      	ldr	r3, [r7, #12]
 8029af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8029af6:	2b00      	cmp	r3, #0
 8029af8:	d02d      	beq.n	8029b56 <USB_HC_StartXfer+0x86>
 8029afa:	68bb      	ldr	r3, [r7, #8]
 8029afc:	791b      	ldrb	r3, [r3, #4]
 8029afe:	2b00      	cmp	r3, #0
 8029b00:	d129      	bne.n	8029b56 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8029b02:	79fb      	ldrb	r3, [r7, #7]
 8029b04:	2b01      	cmp	r3, #1
 8029b06:	d117      	bne.n	8029b38 <USB_HC_StartXfer+0x68>
 8029b08:	68bb      	ldr	r3, [r7, #8]
 8029b0a:	79db      	ldrb	r3, [r3, #7]
 8029b0c:	2b00      	cmp	r3, #0
 8029b0e:	d003      	beq.n	8029b18 <USB_HC_StartXfer+0x48>
 8029b10:	68bb      	ldr	r3, [r7, #8]
 8029b12:	79db      	ldrb	r3, [r3, #7]
 8029b14:	2b02      	cmp	r3, #2
 8029b16:	d10f      	bne.n	8029b38 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8029b18:	69fb      	ldr	r3, [r7, #28]
 8029b1a:	015a      	lsls	r2, r3, #5
 8029b1c:	6a3b      	ldr	r3, [r7, #32]
 8029b1e:	4413      	add	r3, r2
 8029b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029b24:	68db      	ldr	r3, [r3, #12]
 8029b26:	69fa      	ldr	r2, [r7, #28]
 8029b28:	0151      	lsls	r1, r2, #5
 8029b2a:	6a3a      	ldr	r2, [r7, #32]
 8029b2c:	440a      	add	r2, r1
 8029b2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8029b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029b36:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8029b38:	79fb      	ldrb	r3, [r7, #7]
 8029b3a:	2b00      	cmp	r3, #0
 8029b3c:	d10b      	bne.n	8029b56 <USB_HC_StartXfer+0x86>
 8029b3e:	68bb      	ldr	r3, [r7, #8]
 8029b40:	795b      	ldrb	r3, [r3, #5]
 8029b42:	2b01      	cmp	r3, #1
 8029b44:	d107      	bne.n	8029b56 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8029b46:	68bb      	ldr	r3, [r7, #8]
 8029b48:	785b      	ldrb	r3, [r3, #1]
 8029b4a:	4619      	mov	r1, r3
 8029b4c:	68f8      	ldr	r0, [r7, #12]
 8029b4e:	f000 fa0f 	bl	8029f70 <USB_DoPing>
      return HAL_OK;
 8029b52:	2300      	movs	r3, #0
 8029b54:	e0f8      	b.n	8029d48 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8029b56:	68bb      	ldr	r3, [r7, #8]
 8029b58:	695b      	ldr	r3, [r3, #20]
 8029b5a:	2b00      	cmp	r3, #0
 8029b5c:	d018      	beq.n	8029b90 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8029b5e:	68bb      	ldr	r3, [r7, #8]
 8029b60:	695b      	ldr	r3, [r3, #20]
 8029b62:	68ba      	ldr	r2, [r7, #8]
 8029b64:	8912      	ldrh	r2, [r2, #8]
 8029b66:	4413      	add	r3, r2
 8029b68:	3b01      	subs	r3, #1
 8029b6a:	68ba      	ldr	r2, [r7, #8]
 8029b6c:	8912      	ldrh	r2, [r2, #8]
 8029b6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8029b72:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8029b74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8029b76:	8b7b      	ldrh	r3, [r7, #26]
 8029b78:	429a      	cmp	r2, r3
 8029b7a:	d90b      	bls.n	8029b94 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8029b7c:	8b7b      	ldrh	r3, [r7, #26]
 8029b7e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8029b80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8029b82:	68ba      	ldr	r2, [r7, #8]
 8029b84:	8912      	ldrh	r2, [r2, #8]
 8029b86:	fb03 f202 	mul.w	r2, r3, r2
 8029b8a:	68bb      	ldr	r3, [r7, #8]
 8029b8c:	611a      	str	r2, [r3, #16]
 8029b8e:	e001      	b.n	8029b94 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8029b90:	2301      	movs	r3, #1
 8029b92:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8029b94:	68bb      	ldr	r3, [r7, #8]
 8029b96:	78db      	ldrb	r3, [r3, #3]
 8029b98:	2b00      	cmp	r3, #0
 8029b9a:	d007      	beq.n	8029bac <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8029b9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8029b9e:	68ba      	ldr	r2, [r7, #8]
 8029ba0:	8912      	ldrh	r2, [r2, #8]
 8029ba2:	fb03 f202 	mul.w	r2, r3, r2
 8029ba6:	68bb      	ldr	r3, [r7, #8]
 8029ba8:	611a      	str	r2, [r3, #16]
 8029baa:	e003      	b.n	8029bb4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8029bac:	68bb      	ldr	r3, [r7, #8]
 8029bae:	695a      	ldr	r2, [r3, #20]
 8029bb0:	68bb      	ldr	r3, [r7, #8]
 8029bb2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8029bb4:	68bb      	ldr	r3, [r7, #8]
 8029bb6:	691b      	ldr	r3, [r3, #16]
 8029bb8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8029bbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8029bbe:	04d9      	lsls	r1, r3, #19
 8029bc0:	4b63      	ldr	r3, [pc, #396]	; (8029d50 <USB_HC_StartXfer+0x280>)
 8029bc2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8029bc4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8029bc6:	68bb      	ldr	r3, [r7, #8]
 8029bc8:	7a9b      	ldrb	r3, [r3, #10]
 8029bca:	075b      	lsls	r3, r3, #29
 8029bcc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8029bd0:	69f9      	ldr	r1, [r7, #28]
 8029bd2:	0148      	lsls	r0, r1, #5
 8029bd4:	6a39      	ldr	r1, [r7, #32]
 8029bd6:	4401      	add	r1, r0
 8029bd8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8029bdc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8029bde:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8029be0:	79fb      	ldrb	r3, [r7, #7]
 8029be2:	2b00      	cmp	r3, #0
 8029be4:	d009      	beq.n	8029bfa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8029be6:	68bb      	ldr	r3, [r7, #8]
 8029be8:	68d9      	ldr	r1, [r3, #12]
 8029bea:	69fb      	ldr	r3, [r7, #28]
 8029bec:	015a      	lsls	r2, r3, #5
 8029bee:	6a3b      	ldr	r3, [r7, #32]
 8029bf0:	4413      	add	r3, r2
 8029bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029bf6:	460a      	mov	r2, r1
 8029bf8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8029bfa:	6a3b      	ldr	r3, [r7, #32]
 8029bfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8029c00:	689b      	ldr	r3, [r3, #8]
 8029c02:	f003 0301 	and.w	r3, r3, #1
 8029c06:	2b00      	cmp	r3, #0
 8029c08:	bf0c      	ite	eq
 8029c0a:	2301      	moveq	r3, #1
 8029c0c:	2300      	movne	r3, #0
 8029c0e:	b2db      	uxtb	r3, r3
 8029c10:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8029c12:	69fb      	ldr	r3, [r7, #28]
 8029c14:	015a      	lsls	r2, r3, #5
 8029c16:	6a3b      	ldr	r3, [r7, #32]
 8029c18:	4413      	add	r3, r2
 8029c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029c1e:	681b      	ldr	r3, [r3, #0]
 8029c20:	69fa      	ldr	r2, [r7, #28]
 8029c22:	0151      	lsls	r1, r2, #5
 8029c24:	6a3a      	ldr	r2, [r7, #32]
 8029c26:	440a      	add	r2, r1
 8029c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8029c2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8029c30:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8029c32:	69fb      	ldr	r3, [r7, #28]
 8029c34:	015a      	lsls	r2, r3, #5
 8029c36:	6a3b      	ldr	r3, [r7, #32]
 8029c38:	4413      	add	r3, r2
 8029c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029c3e:	681a      	ldr	r2, [r3, #0]
 8029c40:	7e7b      	ldrb	r3, [r7, #25]
 8029c42:	075b      	lsls	r3, r3, #29
 8029c44:	69f9      	ldr	r1, [r7, #28]
 8029c46:	0148      	lsls	r0, r1, #5
 8029c48:	6a39      	ldr	r1, [r7, #32]
 8029c4a:	4401      	add	r1, r0
 8029c4c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8029c50:	4313      	orrs	r3, r2
 8029c52:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8029c54:	69fb      	ldr	r3, [r7, #28]
 8029c56:	015a      	lsls	r2, r3, #5
 8029c58:	6a3b      	ldr	r3, [r7, #32]
 8029c5a:	4413      	add	r3, r2
 8029c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029c60:	681b      	ldr	r3, [r3, #0]
 8029c62:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8029c64:	693b      	ldr	r3, [r7, #16]
 8029c66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8029c6a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8029c6c:	68bb      	ldr	r3, [r7, #8]
 8029c6e:	78db      	ldrb	r3, [r3, #3]
 8029c70:	2b00      	cmp	r3, #0
 8029c72:	d004      	beq.n	8029c7e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8029c74:	693b      	ldr	r3, [r7, #16]
 8029c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8029c7a:	613b      	str	r3, [r7, #16]
 8029c7c:	e003      	b.n	8029c86 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8029c7e:	693b      	ldr	r3, [r7, #16]
 8029c80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8029c84:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8029c86:	693b      	ldr	r3, [r7, #16]
 8029c88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8029c8c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8029c8e:	69fb      	ldr	r3, [r7, #28]
 8029c90:	015a      	lsls	r2, r3, #5
 8029c92:	6a3b      	ldr	r3, [r7, #32]
 8029c94:	4413      	add	r3, r2
 8029c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029c9a:	461a      	mov	r2, r3
 8029c9c:	693b      	ldr	r3, [r7, #16]
 8029c9e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8029ca0:	79fb      	ldrb	r3, [r7, #7]
 8029ca2:	2b00      	cmp	r3, #0
 8029ca4:	d001      	beq.n	8029caa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8029ca6:	2300      	movs	r3, #0
 8029ca8:	e04e      	b.n	8029d48 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8029caa:	68bb      	ldr	r3, [r7, #8]
 8029cac:	78db      	ldrb	r3, [r3, #3]
 8029cae:	2b00      	cmp	r3, #0
 8029cb0:	d149      	bne.n	8029d46 <USB_HC_StartXfer+0x276>
 8029cb2:	68bb      	ldr	r3, [r7, #8]
 8029cb4:	695b      	ldr	r3, [r3, #20]
 8029cb6:	2b00      	cmp	r3, #0
 8029cb8:	d045      	beq.n	8029d46 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8029cba:	68bb      	ldr	r3, [r7, #8]
 8029cbc:	79db      	ldrb	r3, [r3, #7]
 8029cbe:	2b03      	cmp	r3, #3
 8029cc0:	d830      	bhi.n	8029d24 <USB_HC_StartXfer+0x254>
 8029cc2:	a201      	add	r2, pc, #4	; (adr r2, 8029cc8 <USB_HC_StartXfer+0x1f8>)
 8029cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029cc8:	08029cd9 	.word	0x08029cd9
 8029ccc:	08029cfd 	.word	0x08029cfd
 8029cd0:	08029cd9 	.word	0x08029cd9
 8029cd4:	08029cfd 	.word	0x08029cfd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8029cd8:	68bb      	ldr	r3, [r7, #8]
 8029cda:	695b      	ldr	r3, [r3, #20]
 8029cdc:	3303      	adds	r3, #3
 8029cde:	089b      	lsrs	r3, r3, #2
 8029ce0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8029ce2:	8afa      	ldrh	r2, [r7, #22]
 8029ce4:	68fb      	ldr	r3, [r7, #12]
 8029ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029ce8:	b29b      	uxth	r3, r3
 8029cea:	429a      	cmp	r2, r3
 8029cec:	d91c      	bls.n	8029d28 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8029cee:	68fb      	ldr	r3, [r7, #12]
 8029cf0:	699b      	ldr	r3, [r3, #24]
 8029cf2:	f043 0220 	orr.w	r2, r3, #32
 8029cf6:	68fb      	ldr	r3, [r7, #12]
 8029cf8:	619a      	str	r2, [r3, #24]
        }
        break;
 8029cfa:	e015      	b.n	8029d28 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8029cfc:	68bb      	ldr	r3, [r7, #8]
 8029cfe:	695b      	ldr	r3, [r3, #20]
 8029d00:	3303      	adds	r3, #3
 8029d02:	089b      	lsrs	r3, r3, #2
 8029d04:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8029d06:	8afa      	ldrh	r2, [r7, #22]
 8029d08:	6a3b      	ldr	r3, [r7, #32]
 8029d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8029d0e:	691b      	ldr	r3, [r3, #16]
 8029d10:	b29b      	uxth	r3, r3
 8029d12:	429a      	cmp	r2, r3
 8029d14:	d90a      	bls.n	8029d2c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8029d16:	68fb      	ldr	r3, [r7, #12]
 8029d18:	699b      	ldr	r3, [r3, #24]
 8029d1a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8029d1e:	68fb      	ldr	r3, [r7, #12]
 8029d20:	619a      	str	r2, [r3, #24]
        }
        break;
 8029d22:	e003      	b.n	8029d2c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8029d24:	bf00      	nop
 8029d26:	e002      	b.n	8029d2e <USB_HC_StartXfer+0x25e>
        break;
 8029d28:	bf00      	nop
 8029d2a:	e000      	b.n	8029d2e <USB_HC_StartXfer+0x25e>
        break;
 8029d2c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8029d2e:	68bb      	ldr	r3, [r7, #8]
 8029d30:	68d9      	ldr	r1, [r3, #12]
 8029d32:	68bb      	ldr	r3, [r7, #8]
 8029d34:	785a      	ldrb	r2, [r3, #1]
 8029d36:	68bb      	ldr	r3, [r7, #8]
 8029d38:	695b      	ldr	r3, [r3, #20]
 8029d3a:	b29b      	uxth	r3, r3
 8029d3c:	2000      	movs	r0, #0
 8029d3e:	9000      	str	r0, [sp, #0]
 8029d40:	68f8      	ldr	r0, [r7, #12]
 8029d42:	f7ff fb31 	bl	80293a8 <USB_WritePacket>
  }

  return HAL_OK;
 8029d46:	2300      	movs	r3, #0
}
 8029d48:	4618      	mov	r0, r3
 8029d4a:	3728      	adds	r7, #40	; 0x28
 8029d4c:	46bd      	mov	sp, r7
 8029d4e:	bd80      	pop	{r7, pc}
 8029d50:	1ff80000 	.word	0x1ff80000

08029d54 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8029d54:	b480      	push	{r7}
 8029d56:	b085      	sub	sp, #20
 8029d58:	af00      	add	r7, sp, #0
 8029d5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029d5c:	687b      	ldr	r3, [r7, #4]
 8029d5e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8029d60:	68fb      	ldr	r3, [r7, #12]
 8029d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8029d66:	695b      	ldr	r3, [r3, #20]
 8029d68:	b29b      	uxth	r3, r3
}
 8029d6a:	4618      	mov	r0, r3
 8029d6c:	3714      	adds	r7, #20
 8029d6e:	46bd      	mov	sp, r7
 8029d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d74:	4770      	bx	lr

08029d76 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8029d76:	b480      	push	{r7}
 8029d78:	b089      	sub	sp, #36	; 0x24
 8029d7a:	af00      	add	r7, sp, #0
 8029d7c:	6078      	str	r0, [r7, #4]
 8029d7e:	460b      	mov	r3, r1
 8029d80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029d82:	687b      	ldr	r3, [r7, #4]
 8029d84:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8029d86:	78fb      	ldrb	r3, [r7, #3]
 8029d88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8029d8a:	2300      	movs	r3, #0
 8029d8c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8029d8e:	69bb      	ldr	r3, [r7, #24]
 8029d90:	015a      	lsls	r2, r3, #5
 8029d92:	69fb      	ldr	r3, [r7, #28]
 8029d94:	4413      	add	r3, r2
 8029d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029d9a:	681b      	ldr	r3, [r3, #0]
 8029d9c:	0c9b      	lsrs	r3, r3, #18
 8029d9e:	f003 0303 	and.w	r3, r3, #3
 8029da2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8029da4:	69bb      	ldr	r3, [r7, #24]
 8029da6:	015a      	lsls	r2, r3, #5
 8029da8:	69fb      	ldr	r3, [r7, #28]
 8029daa:	4413      	add	r3, r2
 8029dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029db0:	681b      	ldr	r3, [r3, #0]
 8029db2:	0fdb      	lsrs	r3, r3, #31
 8029db4:	f003 0301 	and.w	r3, r3, #1
 8029db8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8029dba:	687b      	ldr	r3, [r7, #4]
 8029dbc:	689b      	ldr	r3, [r3, #8]
 8029dbe:	f003 0320 	and.w	r3, r3, #32
 8029dc2:	2b20      	cmp	r3, #32
 8029dc4:	d104      	bne.n	8029dd0 <USB_HC_Halt+0x5a>
 8029dc6:	693b      	ldr	r3, [r7, #16]
 8029dc8:	2b00      	cmp	r3, #0
 8029dca:	d101      	bne.n	8029dd0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8029dcc:	2300      	movs	r3, #0
 8029dce:	e0c8      	b.n	8029f62 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8029dd0:	697b      	ldr	r3, [r7, #20]
 8029dd2:	2b00      	cmp	r3, #0
 8029dd4:	d002      	beq.n	8029ddc <USB_HC_Halt+0x66>
 8029dd6:	697b      	ldr	r3, [r7, #20]
 8029dd8:	2b02      	cmp	r3, #2
 8029dda:	d163      	bne.n	8029ea4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8029ddc:	69bb      	ldr	r3, [r7, #24]
 8029dde:	015a      	lsls	r2, r3, #5
 8029de0:	69fb      	ldr	r3, [r7, #28]
 8029de2:	4413      	add	r3, r2
 8029de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029de8:	681b      	ldr	r3, [r3, #0]
 8029dea:	69ba      	ldr	r2, [r7, #24]
 8029dec:	0151      	lsls	r1, r2, #5
 8029dee:	69fa      	ldr	r2, [r7, #28]
 8029df0:	440a      	add	r2, r1
 8029df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8029df6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8029dfa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8029dfc:	687b      	ldr	r3, [r7, #4]
 8029dfe:	689b      	ldr	r3, [r3, #8]
 8029e00:	f003 0320 	and.w	r3, r3, #32
 8029e04:	2b00      	cmp	r3, #0
 8029e06:	f040 80ab 	bne.w	8029f60 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8029e0a:	687b      	ldr	r3, [r7, #4]
 8029e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029e0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8029e12:	2b00      	cmp	r3, #0
 8029e14:	d133      	bne.n	8029e7e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8029e16:	69bb      	ldr	r3, [r7, #24]
 8029e18:	015a      	lsls	r2, r3, #5
 8029e1a:	69fb      	ldr	r3, [r7, #28]
 8029e1c:	4413      	add	r3, r2
 8029e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029e22:	681b      	ldr	r3, [r3, #0]
 8029e24:	69ba      	ldr	r2, [r7, #24]
 8029e26:	0151      	lsls	r1, r2, #5
 8029e28:	69fa      	ldr	r2, [r7, #28]
 8029e2a:	440a      	add	r2, r1
 8029e2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8029e30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8029e34:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8029e36:	69bb      	ldr	r3, [r7, #24]
 8029e38:	015a      	lsls	r2, r3, #5
 8029e3a:	69fb      	ldr	r3, [r7, #28]
 8029e3c:	4413      	add	r3, r2
 8029e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029e42:	681b      	ldr	r3, [r3, #0]
 8029e44:	69ba      	ldr	r2, [r7, #24]
 8029e46:	0151      	lsls	r1, r2, #5
 8029e48:	69fa      	ldr	r2, [r7, #28]
 8029e4a:	440a      	add	r2, r1
 8029e4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8029e50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8029e54:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8029e56:	68fb      	ldr	r3, [r7, #12]
 8029e58:	3301      	adds	r3, #1
 8029e5a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8029e5c:	68fb      	ldr	r3, [r7, #12]
 8029e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8029e62:	d81d      	bhi.n	8029ea0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8029e64:	69bb      	ldr	r3, [r7, #24]
 8029e66:	015a      	lsls	r2, r3, #5
 8029e68:	69fb      	ldr	r3, [r7, #28]
 8029e6a:	4413      	add	r3, r2
 8029e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029e70:	681b      	ldr	r3, [r3, #0]
 8029e72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8029e76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8029e7a:	d0ec      	beq.n	8029e56 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8029e7c:	e070      	b.n	8029f60 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8029e7e:	69bb      	ldr	r3, [r7, #24]
 8029e80:	015a      	lsls	r2, r3, #5
 8029e82:	69fb      	ldr	r3, [r7, #28]
 8029e84:	4413      	add	r3, r2
 8029e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029e8a:	681b      	ldr	r3, [r3, #0]
 8029e8c:	69ba      	ldr	r2, [r7, #24]
 8029e8e:	0151      	lsls	r1, r2, #5
 8029e90:	69fa      	ldr	r2, [r7, #28]
 8029e92:	440a      	add	r2, r1
 8029e94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8029e98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8029e9c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8029e9e:	e05f      	b.n	8029f60 <USB_HC_Halt+0x1ea>
            break;
 8029ea0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8029ea2:	e05d      	b.n	8029f60 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8029ea4:	69bb      	ldr	r3, [r7, #24]
 8029ea6:	015a      	lsls	r2, r3, #5
 8029ea8:	69fb      	ldr	r3, [r7, #28]
 8029eaa:	4413      	add	r3, r2
 8029eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029eb0:	681b      	ldr	r3, [r3, #0]
 8029eb2:	69ba      	ldr	r2, [r7, #24]
 8029eb4:	0151      	lsls	r1, r2, #5
 8029eb6:	69fa      	ldr	r2, [r7, #28]
 8029eb8:	440a      	add	r2, r1
 8029eba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8029ebe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8029ec2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8029ec4:	69fb      	ldr	r3, [r7, #28]
 8029ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8029eca:	691b      	ldr	r3, [r3, #16]
 8029ecc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8029ed0:	2b00      	cmp	r3, #0
 8029ed2:	d133      	bne.n	8029f3c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8029ed4:	69bb      	ldr	r3, [r7, #24]
 8029ed6:	015a      	lsls	r2, r3, #5
 8029ed8:	69fb      	ldr	r3, [r7, #28]
 8029eda:	4413      	add	r3, r2
 8029edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029ee0:	681b      	ldr	r3, [r3, #0]
 8029ee2:	69ba      	ldr	r2, [r7, #24]
 8029ee4:	0151      	lsls	r1, r2, #5
 8029ee6:	69fa      	ldr	r2, [r7, #28]
 8029ee8:	440a      	add	r2, r1
 8029eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8029eee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8029ef2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8029ef4:	69bb      	ldr	r3, [r7, #24]
 8029ef6:	015a      	lsls	r2, r3, #5
 8029ef8:	69fb      	ldr	r3, [r7, #28]
 8029efa:	4413      	add	r3, r2
 8029efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029f00:	681b      	ldr	r3, [r3, #0]
 8029f02:	69ba      	ldr	r2, [r7, #24]
 8029f04:	0151      	lsls	r1, r2, #5
 8029f06:	69fa      	ldr	r2, [r7, #28]
 8029f08:	440a      	add	r2, r1
 8029f0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8029f0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8029f12:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8029f14:	68fb      	ldr	r3, [r7, #12]
 8029f16:	3301      	adds	r3, #1
 8029f18:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8029f1a:	68fb      	ldr	r3, [r7, #12]
 8029f1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8029f20:	d81d      	bhi.n	8029f5e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8029f22:	69bb      	ldr	r3, [r7, #24]
 8029f24:	015a      	lsls	r2, r3, #5
 8029f26:	69fb      	ldr	r3, [r7, #28]
 8029f28:	4413      	add	r3, r2
 8029f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029f2e:	681b      	ldr	r3, [r3, #0]
 8029f30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8029f34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8029f38:	d0ec      	beq.n	8029f14 <USB_HC_Halt+0x19e>
 8029f3a:	e011      	b.n	8029f60 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8029f3c:	69bb      	ldr	r3, [r7, #24]
 8029f3e:	015a      	lsls	r2, r3, #5
 8029f40:	69fb      	ldr	r3, [r7, #28]
 8029f42:	4413      	add	r3, r2
 8029f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029f48:	681b      	ldr	r3, [r3, #0]
 8029f4a:	69ba      	ldr	r2, [r7, #24]
 8029f4c:	0151      	lsls	r1, r2, #5
 8029f4e:	69fa      	ldr	r2, [r7, #28]
 8029f50:	440a      	add	r2, r1
 8029f52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8029f56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8029f5a:	6013      	str	r3, [r2, #0]
 8029f5c:	e000      	b.n	8029f60 <USB_HC_Halt+0x1ea>
          break;
 8029f5e:	bf00      	nop
    }
  }

  return HAL_OK;
 8029f60:	2300      	movs	r3, #0
}
 8029f62:	4618      	mov	r0, r3
 8029f64:	3724      	adds	r7, #36	; 0x24
 8029f66:	46bd      	mov	sp, r7
 8029f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f6c:	4770      	bx	lr
	...

08029f70 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8029f70:	b480      	push	{r7}
 8029f72:	b087      	sub	sp, #28
 8029f74:	af00      	add	r7, sp, #0
 8029f76:	6078      	str	r0, [r7, #4]
 8029f78:	460b      	mov	r3, r1
 8029f7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029f7c:	687b      	ldr	r3, [r7, #4]
 8029f7e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8029f80:	78fb      	ldrb	r3, [r7, #3]
 8029f82:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8029f84:	2301      	movs	r3, #1
 8029f86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8029f88:	68fb      	ldr	r3, [r7, #12]
 8029f8a:	04da      	lsls	r2, r3, #19
 8029f8c:	4b15      	ldr	r3, [pc, #84]	; (8029fe4 <USB_DoPing+0x74>)
 8029f8e:	4013      	ands	r3, r2
 8029f90:	693a      	ldr	r2, [r7, #16]
 8029f92:	0151      	lsls	r1, r2, #5
 8029f94:	697a      	ldr	r2, [r7, #20]
 8029f96:	440a      	add	r2, r1
 8029f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8029f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8029fa0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8029fa2:	693b      	ldr	r3, [r7, #16]
 8029fa4:	015a      	lsls	r2, r3, #5
 8029fa6:	697b      	ldr	r3, [r7, #20]
 8029fa8:	4413      	add	r3, r2
 8029faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029fae:	681b      	ldr	r3, [r3, #0]
 8029fb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8029fb2:	68bb      	ldr	r3, [r7, #8]
 8029fb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8029fb8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8029fba:	68bb      	ldr	r3, [r7, #8]
 8029fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8029fc0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8029fc2:	693b      	ldr	r3, [r7, #16]
 8029fc4:	015a      	lsls	r2, r3, #5
 8029fc6:	697b      	ldr	r3, [r7, #20]
 8029fc8:	4413      	add	r3, r2
 8029fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8029fce:	461a      	mov	r2, r3
 8029fd0:	68bb      	ldr	r3, [r7, #8]
 8029fd2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8029fd4:	2300      	movs	r3, #0
}
 8029fd6:	4618      	mov	r0, r3
 8029fd8:	371c      	adds	r7, #28
 8029fda:	46bd      	mov	sp, r7
 8029fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fe0:	4770      	bx	lr
 8029fe2:	bf00      	nop
 8029fe4:	1ff80000 	.word	0x1ff80000

08029fe8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8029fe8:	b580      	push	{r7, lr}
 8029fea:	b088      	sub	sp, #32
 8029fec:	af00      	add	r7, sp, #0
 8029fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8029ff0:	2300      	movs	r3, #0
 8029ff2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029ff4:	687b      	ldr	r3, [r7, #4]
 8029ff6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8029ff8:	2300      	movs	r3, #0
 8029ffa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8029ffc:	6878      	ldr	r0, [r7, #4]
 8029ffe:	f7ff f911 	bl	8029224 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802a002:	2110      	movs	r1, #16
 802a004:	6878      	ldr	r0, [r7, #4]
 802a006:	f7ff f96b 	bl	80292e0 <USB_FlushTxFifo>
 802a00a:	4603      	mov	r3, r0
 802a00c:	2b00      	cmp	r3, #0
 802a00e:	d001      	beq.n	802a014 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 802a010:	2301      	movs	r3, #1
 802a012:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802a014:	6878      	ldr	r0, [r7, #4]
 802a016:	f7ff f997 	bl	8029348 <USB_FlushRxFifo>
 802a01a:	4603      	mov	r3, r0
 802a01c:	2b00      	cmp	r3, #0
 802a01e:	d001      	beq.n	802a024 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 802a020:	2301      	movs	r3, #1
 802a022:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 802a024:	2300      	movs	r3, #0
 802a026:	61bb      	str	r3, [r7, #24]
 802a028:	e01f      	b.n	802a06a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 802a02a:	69bb      	ldr	r3, [r7, #24]
 802a02c:	015a      	lsls	r2, r3, #5
 802a02e:	697b      	ldr	r3, [r7, #20]
 802a030:	4413      	add	r3, r2
 802a032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a036:	681b      	ldr	r3, [r3, #0]
 802a038:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 802a03a:	693b      	ldr	r3, [r7, #16]
 802a03c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802a040:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 802a042:	693b      	ldr	r3, [r7, #16]
 802a044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802a048:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802a04a:	693b      	ldr	r3, [r7, #16]
 802a04c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802a050:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802a052:	69bb      	ldr	r3, [r7, #24]
 802a054:	015a      	lsls	r2, r3, #5
 802a056:	697b      	ldr	r3, [r7, #20]
 802a058:	4413      	add	r3, r2
 802a05a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a05e:	461a      	mov	r2, r3
 802a060:	693b      	ldr	r3, [r7, #16]
 802a062:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 802a064:	69bb      	ldr	r3, [r7, #24]
 802a066:	3301      	adds	r3, #1
 802a068:	61bb      	str	r3, [r7, #24]
 802a06a:	69bb      	ldr	r3, [r7, #24]
 802a06c:	2b0f      	cmp	r3, #15
 802a06e:	d9dc      	bls.n	802a02a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 802a070:	2300      	movs	r3, #0
 802a072:	61bb      	str	r3, [r7, #24]
 802a074:	e034      	b.n	802a0e0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 802a076:	69bb      	ldr	r3, [r7, #24]
 802a078:	015a      	lsls	r2, r3, #5
 802a07a:	697b      	ldr	r3, [r7, #20]
 802a07c:	4413      	add	r3, r2
 802a07e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a082:	681b      	ldr	r3, [r3, #0]
 802a084:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 802a086:	693b      	ldr	r3, [r7, #16]
 802a088:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802a08c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 802a08e:	693b      	ldr	r3, [r7, #16]
 802a090:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802a094:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802a096:	693b      	ldr	r3, [r7, #16]
 802a098:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802a09c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802a09e:	69bb      	ldr	r3, [r7, #24]
 802a0a0:	015a      	lsls	r2, r3, #5
 802a0a2:	697b      	ldr	r3, [r7, #20]
 802a0a4:	4413      	add	r3, r2
 802a0a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a0aa:	461a      	mov	r2, r3
 802a0ac:	693b      	ldr	r3, [r7, #16]
 802a0ae:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 802a0b0:	68fb      	ldr	r3, [r7, #12]
 802a0b2:	3301      	adds	r3, #1
 802a0b4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 802a0b6:	68fb      	ldr	r3, [r7, #12]
 802a0b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802a0bc:	d80c      	bhi.n	802a0d8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802a0be:	69bb      	ldr	r3, [r7, #24]
 802a0c0:	015a      	lsls	r2, r3, #5
 802a0c2:	697b      	ldr	r3, [r7, #20]
 802a0c4:	4413      	add	r3, r2
 802a0c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a0ca:	681b      	ldr	r3, [r3, #0]
 802a0cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802a0d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802a0d4:	d0ec      	beq.n	802a0b0 <USB_StopHost+0xc8>
 802a0d6:	e000      	b.n	802a0da <USB_StopHost+0xf2>
        break;
 802a0d8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 802a0da:	69bb      	ldr	r3, [r7, #24]
 802a0dc:	3301      	adds	r3, #1
 802a0de:	61bb      	str	r3, [r7, #24]
 802a0e0:	69bb      	ldr	r3, [r7, #24]
 802a0e2:	2b0f      	cmp	r3, #15
 802a0e4:	d9c7      	bls.n	802a076 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 802a0e6:	697b      	ldr	r3, [r7, #20]
 802a0e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a0ec:	461a      	mov	r2, r3
 802a0ee:	f04f 33ff 	mov.w	r3, #4294967295
 802a0f2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 802a0f4:	687b      	ldr	r3, [r7, #4]
 802a0f6:	f04f 32ff 	mov.w	r2, #4294967295
 802a0fa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 802a0fc:	6878      	ldr	r0, [r7, #4]
 802a0fe:	f7ff f880 	bl	8029202 <USB_EnableGlobalInt>

  return ret;
 802a102:	7ffb      	ldrb	r3, [r7, #31]
}
 802a104:	4618      	mov	r0, r3
 802a106:	3720      	adds	r7, #32
 802a108:	46bd      	mov	sp, r7
 802a10a:	bd80      	pop	{r7, pc}

0802a10c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 802a10c:	b590      	push	{r4, r7, lr}
 802a10e:	b089      	sub	sp, #36	; 0x24
 802a110:	af04      	add	r7, sp, #16
 802a112:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 802a114:	2301      	movs	r3, #1
 802a116:	2202      	movs	r2, #2
 802a118:	2102      	movs	r1, #2
 802a11a:	6878      	ldr	r0, [r7, #4]
 802a11c:	f000 fc66 	bl	802a9ec <USBH_FindInterface>
 802a120:	4603      	mov	r3, r0
 802a122:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802a124:	7bfb      	ldrb	r3, [r7, #15]
 802a126:	2bff      	cmp	r3, #255	; 0xff
 802a128:	d002      	beq.n	802a130 <USBH_CDC_InterfaceInit+0x24>
 802a12a:	7bfb      	ldrb	r3, [r7, #15]
 802a12c:	2b01      	cmp	r3, #1
 802a12e:	d901      	bls.n	802a134 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802a130:	2302      	movs	r3, #2
 802a132:	e13d      	b.n	802a3b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 802a134:	7bfb      	ldrb	r3, [r7, #15]
 802a136:	4619      	mov	r1, r3
 802a138:	6878      	ldr	r0, [r7, #4]
 802a13a:	f000 fc3b 	bl	802a9b4 <USBH_SelectInterface>
 802a13e:	4603      	mov	r3, r0
 802a140:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 802a142:	7bbb      	ldrb	r3, [r7, #14]
 802a144:	2b00      	cmp	r3, #0
 802a146:	d001      	beq.n	802a14c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 802a148:	2302      	movs	r3, #2
 802a14a:	e131      	b.n	802a3b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 802a14c:	687b      	ldr	r3, [r7, #4]
 802a14e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 802a152:	2050      	movs	r0, #80	; 0x50
 802a154:	f002 fb00 	bl	802c758 <malloc>
 802a158:	4603      	mov	r3, r0
 802a15a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802a15c:	687b      	ldr	r3, [r7, #4]
 802a15e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802a162:	69db      	ldr	r3, [r3, #28]
 802a164:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 802a166:	68bb      	ldr	r3, [r7, #8]
 802a168:	2b00      	cmp	r3, #0
 802a16a:	d101      	bne.n	802a170 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 802a16c:	2302      	movs	r3, #2
 802a16e:	e11f      	b.n	802a3b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 802a170:	2250      	movs	r2, #80	; 0x50
 802a172:	2100      	movs	r1, #0
 802a174:	68b8      	ldr	r0, [r7, #8]
 802a176:	f002 faff 	bl	802c778 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802a17a:	7bfb      	ldrb	r3, [r7, #15]
 802a17c:	687a      	ldr	r2, [r7, #4]
 802a17e:	211a      	movs	r1, #26
 802a180:	fb01 f303 	mul.w	r3, r1, r3
 802a184:	4413      	add	r3, r2
 802a186:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802a18a:	781b      	ldrb	r3, [r3, #0]
 802a18c:	b25b      	sxtb	r3, r3
 802a18e:	2b00      	cmp	r3, #0
 802a190:	da15      	bge.n	802a1be <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802a192:	7bfb      	ldrb	r3, [r7, #15]
 802a194:	687a      	ldr	r2, [r7, #4]
 802a196:	211a      	movs	r1, #26
 802a198:	fb01 f303 	mul.w	r3, r1, r3
 802a19c:	4413      	add	r3, r2
 802a19e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802a1a2:	781a      	ldrb	r2, [r3, #0]
 802a1a4:	68bb      	ldr	r3, [r7, #8]
 802a1a6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802a1a8:	7bfb      	ldrb	r3, [r7, #15]
 802a1aa:	687a      	ldr	r2, [r7, #4]
 802a1ac:	211a      	movs	r1, #26
 802a1ae:	fb01 f303 	mul.w	r3, r1, r3
 802a1b2:	4413      	add	r3, r2
 802a1b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802a1b8:	881a      	ldrh	r2, [r3, #0]
 802a1ba:	68bb      	ldr	r3, [r7, #8]
 802a1bc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 802a1be:	68bb      	ldr	r3, [r7, #8]
 802a1c0:	785b      	ldrb	r3, [r3, #1]
 802a1c2:	4619      	mov	r1, r3
 802a1c4:	6878      	ldr	r0, [r7, #4]
 802a1c6:	f001 ff2c 	bl	802c022 <USBH_AllocPipe>
 802a1ca:	4603      	mov	r3, r0
 802a1cc:	461a      	mov	r2, r3
 802a1ce:	68bb      	ldr	r3, [r7, #8]
 802a1d0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 802a1d2:	68bb      	ldr	r3, [r7, #8]
 802a1d4:	7819      	ldrb	r1, [r3, #0]
 802a1d6:	68bb      	ldr	r3, [r7, #8]
 802a1d8:	7858      	ldrb	r0, [r3, #1]
 802a1da:	687b      	ldr	r3, [r7, #4]
 802a1dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802a1e0:	687b      	ldr	r3, [r7, #4]
 802a1e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802a1e6:	68ba      	ldr	r2, [r7, #8]
 802a1e8:	8952      	ldrh	r2, [r2, #10]
 802a1ea:	9202      	str	r2, [sp, #8]
 802a1ec:	2203      	movs	r2, #3
 802a1ee:	9201      	str	r2, [sp, #4]
 802a1f0:	9300      	str	r3, [sp, #0]
 802a1f2:	4623      	mov	r3, r4
 802a1f4:	4602      	mov	r2, r0
 802a1f6:	6878      	ldr	r0, [r7, #4]
 802a1f8:	f001 fee4 	bl	802bfc4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 802a1fc:	68bb      	ldr	r3, [r7, #8]
 802a1fe:	781b      	ldrb	r3, [r3, #0]
 802a200:	2200      	movs	r2, #0
 802a202:	4619      	mov	r1, r3
 802a204:	6878      	ldr	r0, [r7, #4]
 802a206:	f002 f9f9 	bl	802c5fc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 802a20a:	2300      	movs	r3, #0
 802a20c:	2200      	movs	r2, #0
 802a20e:	210a      	movs	r1, #10
 802a210:	6878      	ldr	r0, [r7, #4]
 802a212:	f000 fbeb 	bl	802a9ec <USBH_FindInterface>
 802a216:	4603      	mov	r3, r0
 802a218:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802a21a:	7bfb      	ldrb	r3, [r7, #15]
 802a21c:	2bff      	cmp	r3, #255	; 0xff
 802a21e:	d002      	beq.n	802a226 <USBH_CDC_InterfaceInit+0x11a>
 802a220:	7bfb      	ldrb	r3, [r7, #15]
 802a222:	2b01      	cmp	r3, #1
 802a224:	d901      	bls.n	802a22a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802a226:	2302      	movs	r3, #2
 802a228:	e0c2      	b.n	802a3b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802a22a:	7bfb      	ldrb	r3, [r7, #15]
 802a22c:	687a      	ldr	r2, [r7, #4]
 802a22e:	211a      	movs	r1, #26
 802a230:	fb01 f303 	mul.w	r3, r1, r3
 802a234:	4413      	add	r3, r2
 802a236:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802a23a:	781b      	ldrb	r3, [r3, #0]
 802a23c:	b25b      	sxtb	r3, r3
 802a23e:	2b00      	cmp	r3, #0
 802a240:	da16      	bge.n	802a270 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802a242:	7bfb      	ldrb	r3, [r7, #15]
 802a244:	687a      	ldr	r2, [r7, #4]
 802a246:	211a      	movs	r1, #26
 802a248:	fb01 f303 	mul.w	r3, r1, r3
 802a24c:	4413      	add	r3, r2
 802a24e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802a252:	781a      	ldrb	r2, [r3, #0]
 802a254:	68bb      	ldr	r3, [r7, #8]
 802a256:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802a258:	7bfb      	ldrb	r3, [r7, #15]
 802a25a:	687a      	ldr	r2, [r7, #4]
 802a25c:	211a      	movs	r1, #26
 802a25e:	fb01 f303 	mul.w	r3, r1, r3
 802a262:	4413      	add	r3, r2
 802a264:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802a268:	881a      	ldrh	r2, [r3, #0]
 802a26a:	68bb      	ldr	r3, [r7, #8]
 802a26c:	835a      	strh	r2, [r3, #26]
 802a26e:	e015      	b.n	802a29c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802a270:	7bfb      	ldrb	r3, [r7, #15]
 802a272:	687a      	ldr	r2, [r7, #4]
 802a274:	211a      	movs	r1, #26
 802a276:	fb01 f303 	mul.w	r3, r1, r3
 802a27a:	4413      	add	r3, r2
 802a27c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802a280:	781a      	ldrb	r2, [r3, #0]
 802a282:	68bb      	ldr	r3, [r7, #8]
 802a284:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802a286:	7bfb      	ldrb	r3, [r7, #15]
 802a288:	687a      	ldr	r2, [r7, #4]
 802a28a:	211a      	movs	r1, #26
 802a28c:	fb01 f303 	mul.w	r3, r1, r3
 802a290:	4413      	add	r3, r2
 802a292:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802a296:	881a      	ldrh	r2, [r3, #0]
 802a298:	68bb      	ldr	r3, [r7, #8]
 802a29a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 802a29c:	7bfb      	ldrb	r3, [r7, #15]
 802a29e:	687a      	ldr	r2, [r7, #4]
 802a2a0:	211a      	movs	r1, #26
 802a2a2:	fb01 f303 	mul.w	r3, r1, r3
 802a2a6:	4413      	add	r3, r2
 802a2a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 802a2ac:	781b      	ldrb	r3, [r3, #0]
 802a2ae:	b25b      	sxtb	r3, r3
 802a2b0:	2b00      	cmp	r3, #0
 802a2b2:	da16      	bge.n	802a2e2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802a2b4:	7bfb      	ldrb	r3, [r7, #15]
 802a2b6:	687a      	ldr	r2, [r7, #4]
 802a2b8:	211a      	movs	r1, #26
 802a2ba:	fb01 f303 	mul.w	r3, r1, r3
 802a2be:	4413      	add	r3, r2
 802a2c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 802a2c4:	781a      	ldrb	r2, [r3, #0]
 802a2c6:	68bb      	ldr	r3, [r7, #8]
 802a2c8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802a2ca:	7bfb      	ldrb	r3, [r7, #15]
 802a2cc:	687a      	ldr	r2, [r7, #4]
 802a2ce:	211a      	movs	r1, #26
 802a2d0:	fb01 f303 	mul.w	r3, r1, r3
 802a2d4:	4413      	add	r3, r2
 802a2d6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802a2da:	881a      	ldrh	r2, [r3, #0]
 802a2dc:	68bb      	ldr	r3, [r7, #8]
 802a2de:	835a      	strh	r2, [r3, #26]
 802a2e0:	e015      	b.n	802a30e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802a2e2:	7bfb      	ldrb	r3, [r7, #15]
 802a2e4:	687a      	ldr	r2, [r7, #4]
 802a2e6:	211a      	movs	r1, #26
 802a2e8:	fb01 f303 	mul.w	r3, r1, r3
 802a2ec:	4413      	add	r3, r2
 802a2ee:	f203 3356 	addw	r3, r3, #854	; 0x356
 802a2f2:	781a      	ldrb	r2, [r3, #0]
 802a2f4:	68bb      	ldr	r3, [r7, #8]
 802a2f6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802a2f8:	7bfb      	ldrb	r3, [r7, #15]
 802a2fa:	687a      	ldr	r2, [r7, #4]
 802a2fc:	211a      	movs	r1, #26
 802a2fe:	fb01 f303 	mul.w	r3, r1, r3
 802a302:	4413      	add	r3, r2
 802a304:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802a308:	881a      	ldrh	r2, [r3, #0]
 802a30a:	68bb      	ldr	r3, [r7, #8]
 802a30c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 802a30e:	68bb      	ldr	r3, [r7, #8]
 802a310:	7b9b      	ldrb	r3, [r3, #14]
 802a312:	4619      	mov	r1, r3
 802a314:	6878      	ldr	r0, [r7, #4]
 802a316:	f001 fe84 	bl	802c022 <USBH_AllocPipe>
 802a31a:	4603      	mov	r3, r0
 802a31c:	461a      	mov	r2, r3
 802a31e:	68bb      	ldr	r3, [r7, #8]
 802a320:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 802a322:	68bb      	ldr	r3, [r7, #8]
 802a324:	7bdb      	ldrb	r3, [r3, #15]
 802a326:	4619      	mov	r1, r3
 802a328:	6878      	ldr	r0, [r7, #4]
 802a32a:	f001 fe7a 	bl	802c022 <USBH_AllocPipe>
 802a32e:	4603      	mov	r3, r0
 802a330:	461a      	mov	r2, r3
 802a332:	68bb      	ldr	r3, [r7, #8]
 802a334:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 802a336:	68bb      	ldr	r3, [r7, #8]
 802a338:	7b59      	ldrb	r1, [r3, #13]
 802a33a:	68bb      	ldr	r3, [r7, #8]
 802a33c:	7b98      	ldrb	r0, [r3, #14]
 802a33e:	687b      	ldr	r3, [r7, #4]
 802a340:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802a344:	687b      	ldr	r3, [r7, #4]
 802a346:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802a34a:	68ba      	ldr	r2, [r7, #8]
 802a34c:	8b12      	ldrh	r2, [r2, #24]
 802a34e:	9202      	str	r2, [sp, #8]
 802a350:	2202      	movs	r2, #2
 802a352:	9201      	str	r2, [sp, #4]
 802a354:	9300      	str	r3, [sp, #0]
 802a356:	4623      	mov	r3, r4
 802a358:	4602      	mov	r2, r0
 802a35a:	6878      	ldr	r0, [r7, #4]
 802a35c:	f001 fe32 	bl	802bfc4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 802a360:	68bb      	ldr	r3, [r7, #8]
 802a362:	7b19      	ldrb	r1, [r3, #12]
 802a364:	68bb      	ldr	r3, [r7, #8]
 802a366:	7bd8      	ldrb	r0, [r3, #15]
 802a368:	687b      	ldr	r3, [r7, #4]
 802a36a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802a36e:	687b      	ldr	r3, [r7, #4]
 802a370:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802a374:	68ba      	ldr	r2, [r7, #8]
 802a376:	8b52      	ldrh	r2, [r2, #26]
 802a378:	9202      	str	r2, [sp, #8]
 802a37a:	2202      	movs	r2, #2
 802a37c:	9201      	str	r2, [sp, #4]
 802a37e:	9300      	str	r3, [sp, #0]
 802a380:	4623      	mov	r3, r4
 802a382:	4602      	mov	r2, r0
 802a384:	6878      	ldr	r0, [r7, #4]
 802a386:	f001 fe1d 	bl	802bfc4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 802a38a:	68bb      	ldr	r3, [r7, #8]
 802a38c:	2200      	movs	r2, #0
 802a38e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 802a392:	68bb      	ldr	r3, [r7, #8]
 802a394:	7b5b      	ldrb	r3, [r3, #13]
 802a396:	2200      	movs	r2, #0
 802a398:	4619      	mov	r1, r3
 802a39a:	6878      	ldr	r0, [r7, #4]
 802a39c:	f002 f92e 	bl	802c5fc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 802a3a0:	68bb      	ldr	r3, [r7, #8]
 802a3a2:	7b1b      	ldrb	r3, [r3, #12]
 802a3a4:	2200      	movs	r2, #0
 802a3a6:	4619      	mov	r1, r3
 802a3a8:	6878      	ldr	r0, [r7, #4]
 802a3aa:	f002 f927 	bl	802c5fc <USBH_LL_SetToggle>

  return USBH_OK;
 802a3ae:	2300      	movs	r3, #0
}
 802a3b0:	4618      	mov	r0, r3
 802a3b2:	3714      	adds	r7, #20
 802a3b4:	46bd      	mov	sp, r7
 802a3b6:	bd90      	pop	{r4, r7, pc}

0802a3b8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 802a3b8:	b580      	push	{r7, lr}
 802a3ba:	b084      	sub	sp, #16
 802a3bc:	af00      	add	r7, sp, #0
 802a3be:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802a3c0:	687b      	ldr	r3, [r7, #4]
 802a3c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802a3c6:	69db      	ldr	r3, [r3, #28]
 802a3c8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 802a3ca:	68fb      	ldr	r3, [r7, #12]
 802a3cc:	781b      	ldrb	r3, [r3, #0]
 802a3ce:	2b00      	cmp	r3, #0
 802a3d0:	d00e      	beq.n	802a3f0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802a3d2:	68fb      	ldr	r3, [r7, #12]
 802a3d4:	781b      	ldrb	r3, [r3, #0]
 802a3d6:	4619      	mov	r1, r3
 802a3d8:	6878      	ldr	r0, [r7, #4]
 802a3da:	f001 fe12 	bl	802c002 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802a3de:	68fb      	ldr	r3, [r7, #12]
 802a3e0:	781b      	ldrb	r3, [r3, #0]
 802a3e2:	4619      	mov	r1, r3
 802a3e4:	6878      	ldr	r0, [r7, #4]
 802a3e6:	f001 fe3d 	bl	802c064 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 802a3ea:	68fb      	ldr	r3, [r7, #12]
 802a3ec:	2200      	movs	r2, #0
 802a3ee:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 802a3f0:	68fb      	ldr	r3, [r7, #12]
 802a3f2:	7b1b      	ldrb	r3, [r3, #12]
 802a3f4:	2b00      	cmp	r3, #0
 802a3f6:	d00e      	beq.n	802a416 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 802a3f8:	68fb      	ldr	r3, [r7, #12]
 802a3fa:	7b1b      	ldrb	r3, [r3, #12]
 802a3fc:	4619      	mov	r1, r3
 802a3fe:	6878      	ldr	r0, [r7, #4]
 802a400:	f001 fdff 	bl	802c002 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 802a404:	68fb      	ldr	r3, [r7, #12]
 802a406:	7b1b      	ldrb	r3, [r3, #12]
 802a408:	4619      	mov	r1, r3
 802a40a:	6878      	ldr	r0, [r7, #4]
 802a40c:	f001 fe2a 	bl	802c064 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 802a410:	68fb      	ldr	r3, [r7, #12]
 802a412:	2200      	movs	r2, #0
 802a414:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 802a416:	68fb      	ldr	r3, [r7, #12]
 802a418:	7b5b      	ldrb	r3, [r3, #13]
 802a41a:	2b00      	cmp	r3, #0
 802a41c:	d00e      	beq.n	802a43c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 802a41e:	68fb      	ldr	r3, [r7, #12]
 802a420:	7b5b      	ldrb	r3, [r3, #13]
 802a422:	4619      	mov	r1, r3
 802a424:	6878      	ldr	r0, [r7, #4]
 802a426:	f001 fdec 	bl	802c002 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 802a42a:	68fb      	ldr	r3, [r7, #12]
 802a42c:	7b5b      	ldrb	r3, [r3, #13]
 802a42e:	4619      	mov	r1, r3
 802a430:	6878      	ldr	r0, [r7, #4]
 802a432:	f001 fe17 	bl	802c064 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 802a436:	68fb      	ldr	r3, [r7, #12]
 802a438:	2200      	movs	r2, #0
 802a43a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 802a43c:	687b      	ldr	r3, [r7, #4]
 802a43e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802a442:	69db      	ldr	r3, [r3, #28]
 802a444:	2b00      	cmp	r3, #0
 802a446:	d00b      	beq.n	802a460 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 802a448:	687b      	ldr	r3, [r7, #4]
 802a44a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802a44e:	69db      	ldr	r3, [r3, #28]
 802a450:	4618      	mov	r0, r3
 802a452:	f002 f989 	bl	802c768 <free>
    phost->pActiveClass->pData = 0U;
 802a456:	687b      	ldr	r3, [r7, #4]
 802a458:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802a45c:	2200      	movs	r2, #0
 802a45e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 802a460:	2300      	movs	r3, #0
}
 802a462:	4618      	mov	r0, r3
 802a464:	3710      	adds	r7, #16
 802a466:	46bd      	mov	sp, r7
 802a468:	bd80      	pop	{r7, pc}

0802a46a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 802a46a:	b580      	push	{r7, lr}
 802a46c:	b084      	sub	sp, #16
 802a46e:	af00      	add	r7, sp, #0
 802a470:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802a472:	687b      	ldr	r3, [r7, #4]
 802a474:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802a478:	69db      	ldr	r3, [r3, #28]
 802a47a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 802a47c:	68fb      	ldr	r3, [r7, #12]
 802a47e:	3340      	adds	r3, #64	; 0x40
 802a480:	4619      	mov	r1, r3
 802a482:	6878      	ldr	r0, [r7, #4]
 802a484:	f000 f8b1 	bl	802a5ea <GetLineCoding>
 802a488:	4603      	mov	r3, r0
 802a48a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 802a48c:	7afb      	ldrb	r3, [r7, #11]
 802a48e:	2b00      	cmp	r3, #0
 802a490:	d105      	bne.n	802a49e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 802a492:	687b      	ldr	r3, [r7, #4]
 802a494:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802a498:	2102      	movs	r1, #2
 802a49a:	6878      	ldr	r0, [r7, #4]
 802a49c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 802a49e:	7afb      	ldrb	r3, [r7, #11]
}
 802a4a0:	4618      	mov	r0, r3
 802a4a2:	3710      	adds	r7, #16
 802a4a4:	46bd      	mov	sp, r7
 802a4a6:	bd80      	pop	{r7, pc}

0802a4a8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 802a4a8:	b580      	push	{r7, lr}
 802a4aa:	b084      	sub	sp, #16
 802a4ac:	af00      	add	r7, sp, #0
 802a4ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 802a4b0:	2301      	movs	r3, #1
 802a4b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 802a4b4:	2300      	movs	r3, #0
 802a4b6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802a4b8:	687b      	ldr	r3, [r7, #4]
 802a4ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802a4be:	69db      	ldr	r3, [r3, #28]
 802a4c0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 802a4c2:	68bb      	ldr	r3, [r7, #8]
 802a4c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802a4c8:	2b04      	cmp	r3, #4
 802a4ca:	d877      	bhi.n	802a5bc <USBH_CDC_Process+0x114>
 802a4cc:	a201      	add	r2, pc, #4	; (adr r2, 802a4d4 <USBH_CDC_Process+0x2c>)
 802a4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a4d2:	bf00      	nop
 802a4d4:	0802a4e9 	.word	0x0802a4e9
 802a4d8:	0802a4ef 	.word	0x0802a4ef
 802a4dc:	0802a51f 	.word	0x0802a51f
 802a4e0:	0802a593 	.word	0x0802a593
 802a4e4:	0802a5a1 	.word	0x0802a5a1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 802a4e8:	2300      	movs	r3, #0
 802a4ea:	73fb      	strb	r3, [r7, #15]
      break;
 802a4ec:	e06d      	b.n	802a5ca <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 802a4ee:	68bb      	ldr	r3, [r7, #8]
 802a4f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802a4f2:	4619      	mov	r1, r3
 802a4f4:	6878      	ldr	r0, [r7, #4]
 802a4f6:	f000 f897 	bl	802a628 <SetLineCoding>
 802a4fa:	4603      	mov	r3, r0
 802a4fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802a4fe:	7bbb      	ldrb	r3, [r7, #14]
 802a500:	2b00      	cmp	r3, #0
 802a502:	d104      	bne.n	802a50e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 802a504:	68bb      	ldr	r3, [r7, #8]
 802a506:	2202      	movs	r2, #2
 802a508:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802a50c:	e058      	b.n	802a5c0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 802a50e:	7bbb      	ldrb	r3, [r7, #14]
 802a510:	2b01      	cmp	r3, #1
 802a512:	d055      	beq.n	802a5c0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 802a514:	68bb      	ldr	r3, [r7, #8]
 802a516:	2204      	movs	r2, #4
 802a518:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802a51c:	e050      	b.n	802a5c0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 802a51e:	68bb      	ldr	r3, [r7, #8]
 802a520:	3340      	adds	r3, #64	; 0x40
 802a522:	4619      	mov	r1, r3
 802a524:	6878      	ldr	r0, [r7, #4]
 802a526:	f000 f860 	bl	802a5ea <GetLineCoding>
 802a52a:	4603      	mov	r3, r0
 802a52c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802a52e:	7bbb      	ldrb	r3, [r7, #14]
 802a530:	2b00      	cmp	r3, #0
 802a532:	d126      	bne.n	802a582 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 802a534:	68bb      	ldr	r3, [r7, #8]
 802a536:	2200      	movs	r2, #0
 802a538:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802a53c:	68bb      	ldr	r3, [r7, #8]
 802a53e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 802a542:	68bb      	ldr	r3, [r7, #8]
 802a544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802a546:	791b      	ldrb	r3, [r3, #4]
 802a548:	429a      	cmp	r2, r3
 802a54a:	d13b      	bne.n	802a5c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802a54c:	68bb      	ldr	r3, [r7, #8]
 802a54e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 802a552:	68bb      	ldr	r3, [r7, #8]
 802a554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802a556:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802a558:	429a      	cmp	r2, r3
 802a55a:	d133      	bne.n	802a5c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802a55c:	68bb      	ldr	r3, [r7, #8]
 802a55e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 802a562:	68bb      	ldr	r3, [r7, #8]
 802a564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802a566:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802a568:	429a      	cmp	r2, r3
 802a56a:	d12b      	bne.n	802a5c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 802a56c:	68bb      	ldr	r3, [r7, #8]
 802a56e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802a570:	68bb      	ldr	r3, [r7, #8]
 802a572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802a574:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802a576:	429a      	cmp	r2, r3
 802a578:	d124      	bne.n	802a5c4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 802a57a:	6878      	ldr	r0, [r7, #4]
 802a57c:	f000 f958 	bl	802a830 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802a580:	e020      	b.n	802a5c4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 802a582:	7bbb      	ldrb	r3, [r7, #14]
 802a584:	2b01      	cmp	r3, #1
 802a586:	d01d      	beq.n	802a5c4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 802a588:	68bb      	ldr	r3, [r7, #8]
 802a58a:	2204      	movs	r2, #4
 802a58c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802a590:	e018      	b.n	802a5c4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 802a592:	6878      	ldr	r0, [r7, #4]
 802a594:	f000 f867 	bl	802a666 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 802a598:	6878      	ldr	r0, [r7, #4]
 802a59a:	f000 f8da 	bl	802a752 <CDC_ProcessReception>
      break;
 802a59e:	e014      	b.n	802a5ca <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 802a5a0:	2100      	movs	r1, #0
 802a5a2:	6878      	ldr	r0, [r7, #4]
 802a5a4:	f000 ffef 	bl	802b586 <USBH_ClrFeature>
 802a5a8:	4603      	mov	r3, r0
 802a5aa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802a5ac:	7bbb      	ldrb	r3, [r7, #14]
 802a5ae:	2b00      	cmp	r3, #0
 802a5b0:	d10a      	bne.n	802a5c8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 802a5b2:	68bb      	ldr	r3, [r7, #8]
 802a5b4:	2200      	movs	r2, #0
 802a5b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 802a5ba:	e005      	b.n	802a5c8 <USBH_CDC_Process+0x120>

    default:
      break;
 802a5bc:	bf00      	nop
 802a5be:	e004      	b.n	802a5ca <USBH_CDC_Process+0x122>
      break;
 802a5c0:	bf00      	nop
 802a5c2:	e002      	b.n	802a5ca <USBH_CDC_Process+0x122>
      break;
 802a5c4:	bf00      	nop
 802a5c6:	e000      	b.n	802a5ca <USBH_CDC_Process+0x122>
      break;
 802a5c8:	bf00      	nop

  }

  return status;
 802a5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 802a5cc:	4618      	mov	r0, r3
 802a5ce:	3710      	adds	r7, #16
 802a5d0:	46bd      	mov	sp, r7
 802a5d2:	bd80      	pop	{r7, pc}

0802a5d4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 802a5d4:	b480      	push	{r7}
 802a5d6:	b083      	sub	sp, #12
 802a5d8:	af00      	add	r7, sp, #0
 802a5da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 802a5dc:	2300      	movs	r3, #0
}
 802a5de:	4618      	mov	r0, r3
 802a5e0:	370c      	adds	r7, #12
 802a5e2:	46bd      	mov	sp, r7
 802a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a5e8:	4770      	bx	lr

0802a5ea <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 802a5ea:	b580      	push	{r7, lr}
 802a5ec:	b082      	sub	sp, #8
 802a5ee:	af00      	add	r7, sp, #0
 802a5f0:	6078      	str	r0, [r7, #4]
 802a5f2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 802a5f4:	687b      	ldr	r3, [r7, #4]
 802a5f6:	22a1      	movs	r2, #161	; 0xa1
 802a5f8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 802a5fa:	687b      	ldr	r3, [r7, #4]
 802a5fc:	2221      	movs	r2, #33	; 0x21
 802a5fe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802a600:	687b      	ldr	r3, [r7, #4]
 802a602:	2200      	movs	r2, #0
 802a604:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 802a606:	687b      	ldr	r3, [r7, #4]
 802a608:	2200      	movs	r2, #0
 802a60a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802a60c:	687b      	ldr	r3, [r7, #4]
 802a60e:	2207      	movs	r2, #7
 802a610:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802a612:	683b      	ldr	r3, [r7, #0]
 802a614:	2207      	movs	r2, #7
 802a616:	4619      	mov	r1, r3
 802a618:	6878      	ldr	r0, [r7, #4]
 802a61a:	f001 fa81 	bl	802bb20 <USBH_CtlReq>
 802a61e:	4603      	mov	r3, r0
}
 802a620:	4618      	mov	r0, r3
 802a622:	3708      	adds	r7, #8
 802a624:	46bd      	mov	sp, r7
 802a626:	bd80      	pop	{r7, pc}

0802a628 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 802a628:	b580      	push	{r7, lr}
 802a62a:	b082      	sub	sp, #8
 802a62c:	af00      	add	r7, sp, #0
 802a62e:	6078      	str	r0, [r7, #4]
 802a630:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 802a632:	687b      	ldr	r3, [r7, #4]
 802a634:	2221      	movs	r2, #33	; 0x21
 802a636:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 802a638:	687b      	ldr	r3, [r7, #4]
 802a63a:	2220      	movs	r2, #32
 802a63c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802a63e:	687b      	ldr	r3, [r7, #4]
 802a640:	2200      	movs	r2, #0
 802a642:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 802a644:	687b      	ldr	r3, [r7, #4]
 802a646:	2200      	movs	r2, #0
 802a648:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802a64a:	687b      	ldr	r3, [r7, #4]
 802a64c:	2207      	movs	r2, #7
 802a64e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802a650:	683b      	ldr	r3, [r7, #0]
 802a652:	2207      	movs	r2, #7
 802a654:	4619      	mov	r1, r3
 802a656:	6878      	ldr	r0, [r7, #4]
 802a658:	f001 fa62 	bl	802bb20 <USBH_CtlReq>
 802a65c:	4603      	mov	r3, r0
}
 802a65e:	4618      	mov	r0, r3
 802a660:	3708      	adds	r7, #8
 802a662:	46bd      	mov	sp, r7
 802a664:	bd80      	pop	{r7, pc}

0802a666 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 802a666:	b580      	push	{r7, lr}
 802a668:	b086      	sub	sp, #24
 802a66a:	af02      	add	r7, sp, #8
 802a66c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802a66e:	687b      	ldr	r3, [r7, #4]
 802a670:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802a674:	69db      	ldr	r3, [r3, #28]
 802a676:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802a678:	2300      	movs	r3, #0
 802a67a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 802a67c:	68fb      	ldr	r3, [r7, #12]
 802a67e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802a682:	2b01      	cmp	r3, #1
 802a684:	d002      	beq.n	802a68c <CDC_ProcessTransmission+0x26>
 802a686:	2b02      	cmp	r3, #2
 802a688:	d023      	beq.n	802a6d2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 802a68a:	e05e      	b.n	802a74a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802a68c:	68fb      	ldr	r3, [r7, #12]
 802a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a690:	68fa      	ldr	r2, [r7, #12]
 802a692:	8b12      	ldrh	r2, [r2, #24]
 802a694:	4293      	cmp	r3, r2
 802a696:	d90b      	bls.n	802a6b0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 802a698:	68fb      	ldr	r3, [r7, #12]
 802a69a:	69d9      	ldr	r1, [r3, #28]
 802a69c:	68fb      	ldr	r3, [r7, #12]
 802a69e:	8b1a      	ldrh	r2, [r3, #24]
 802a6a0:	68fb      	ldr	r3, [r7, #12]
 802a6a2:	7b5b      	ldrb	r3, [r3, #13]
 802a6a4:	2001      	movs	r0, #1
 802a6a6:	9000      	str	r0, [sp, #0]
 802a6a8:	6878      	ldr	r0, [r7, #4]
 802a6aa:	f001 fc48 	bl	802bf3e <USBH_BulkSendData>
 802a6ae:	e00b      	b.n	802a6c8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 802a6b0:	68fb      	ldr	r3, [r7, #12]
 802a6b2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 802a6b4:	68fb      	ldr	r3, [r7, #12]
 802a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 802a6b8:	b29a      	uxth	r2, r3
 802a6ba:	68fb      	ldr	r3, [r7, #12]
 802a6bc:	7b5b      	ldrb	r3, [r3, #13]
 802a6be:	2001      	movs	r0, #1
 802a6c0:	9000      	str	r0, [sp, #0]
 802a6c2:	6878      	ldr	r0, [r7, #4]
 802a6c4:	f001 fc3b 	bl	802bf3e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 802a6c8:	68fb      	ldr	r3, [r7, #12]
 802a6ca:	2202      	movs	r2, #2
 802a6cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802a6d0:	e03b      	b.n	802a74a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 802a6d2:	68fb      	ldr	r3, [r7, #12]
 802a6d4:	7b5b      	ldrb	r3, [r3, #13]
 802a6d6:	4619      	mov	r1, r3
 802a6d8:	6878      	ldr	r0, [r7, #4]
 802a6da:	f001 ff65 	bl	802c5a8 <USBH_LL_GetURBState>
 802a6de:	4603      	mov	r3, r0
 802a6e0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 802a6e2:	7afb      	ldrb	r3, [r7, #11]
 802a6e4:	2b01      	cmp	r3, #1
 802a6e6:	d128      	bne.n	802a73a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802a6e8:	68fb      	ldr	r3, [r7, #12]
 802a6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a6ec:	68fa      	ldr	r2, [r7, #12]
 802a6ee:	8b12      	ldrh	r2, [r2, #24]
 802a6f0:	4293      	cmp	r3, r2
 802a6f2:	d90e      	bls.n	802a712 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 802a6f4:	68fb      	ldr	r3, [r7, #12]
 802a6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a6f8:	68fa      	ldr	r2, [r7, #12]
 802a6fa:	8b12      	ldrh	r2, [r2, #24]
 802a6fc:	1a9a      	subs	r2, r3, r2
 802a6fe:	68fb      	ldr	r3, [r7, #12]
 802a700:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 802a702:	68fb      	ldr	r3, [r7, #12]
 802a704:	69db      	ldr	r3, [r3, #28]
 802a706:	68fa      	ldr	r2, [r7, #12]
 802a708:	8b12      	ldrh	r2, [r2, #24]
 802a70a:	441a      	add	r2, r3
 802a70c:	68fb      	ldr	r3, [r7, #12]
 802a70e:	61da      	str	r2, [r3, #28]
 802a710:	e002      	b.n	802a718 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 802a712:	68fb      	ldr	r3, [r7, #12]
 802a714:	2200      	movs	r2, #0
 802a716:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 802a718:	68fb      	ldr	r3, [r7, #12]
 802a71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a71c:	2b00      	cmp	r3, #0
 802a71e:	d004      	beq.n	802a72a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802a720:	68fb      	ldr	r3, [r7, #12]
 802a722:	2201      	movs	r2, #1
 802a724:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802a728:	e00e      	b.n	802a748 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 802a72a:	68fb      	ldr	r3, [r7, #12]
 802a72c:	2200      	movs	r2, #0
 802a72e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 802a732:	6878      	ldr	r0, [r7, #4]
 802a734:	f000 f868 	bl	802a808 <USBH_CDC_TransmitCallback>
      break;
 802a738:	e006      	b.n	802a748 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 802a73a:	7afb      	ldrb	r3, [r7, #11]
 802a73c:	2b02      	cmp	r3, #2
 802a73e:	d103      	bne.n	802a748 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802a740:	68fb      	ldr	r3, [r7, #12]
 802a742:	2201      	movs	r2, #1
 802a744:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802a748:	bf00      	nop
  }
}
 802a74a:	bf00      	nop
 802a74c:	3710      	adds	r7, #16
 802a74e:	46bd      	mov	sp, r7
 802a750:	bd80      	pop	{r7, pc}

0802a752 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 802a752:	b580      	push	{r7, lr}
 802a754:	b086      	sub	sp, #24
 802a756:	af00      	add	r7, sp, #0
 802a758:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802a75a:	687b      	ldr	r3, [r7, #4]
 802a75c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802a760:	69db      	ldr	r3, [r3, #28]
 802a762:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802a764:	2300      	movs	r3, #0
 802a766:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 802a768:	697b      	ldr	r3, [r7, #20]
 802a76a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 802a76e:	2b03      	cmp	r3, #3
 802a770:	d002      	beq.n	802a778 <CDC_ProcessReception+0x26>
 802a772:	2b04      	cmp	r3, #4
 802a774:	d00e      	beq.n	802a794 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 802a776:	e043      	b.n	802a800 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 802a778:	697b      	ldr	r3, [r7, #20]
 802a77a:	6a19      	ldr	r1, [r3, #32]
 802a77c:	697b      	ldr	r3, [r7, #20]
 802a77e:	8b5a      	ldrh	r2, [r3, #26]
 802a780:	697b      	ldr	r3, [r7, #20]
 802a782:	7b1b      	ldrb	r3, [r3, #12]
 802a784:	6878      	ldr	r0, [r7, #4]
 802a786:	f001 fbff 	bl	802bf88 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 802a78a:	697b      	ldr	r3, [r7, #20]
 802a78c:	2204      	movs	r2, #4
 802a78e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802a792:	e035      	b.n	802a800 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 802a794:	697b      	ldr	r3, [r7, #20]
 802a796:	7b1b      	ldrb	r3, [r3, #12]
 802a798:	4619      	mov	r1, r3
 802a79a:	6878      	ldr	r0, [r7, #4]
 802a79c:	f001 ff04 	bl	802c5a8 <USBH_LL_GetURBState>
 802a7a0:	4603      	mov	r3, r0
 802a7a2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 802a7a4:	7cfb      	ldrb	r3, [r7, #19]
 802a7a6:	2b01      	cmp	r3, #1
 802a7a8:	d129      	bne.n	802a7fe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 802a7aa:	697b      	ldr	r3, [r7, #20]
 802a7ac:	7b1b      	ldrb	r3, [r3, #12]
 802a7ae:	4619      	mov	r1, r3
 802a7b0:	6878      	ldr	r0, [r7, #4]
 802a7b2:	f001 fe67 	bl	802c484 <USBH_LL_GetLastXferSize>
 802a7b6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 802a7b8:	697b      	ldr	r3, [r7, #20]
 802a7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a7bc:	68fa      	ldr	r2, [r7, #12]
 802a7be:	429a      	cmp	r2, r3
 802a7c0:	d016      	beq.n	802a7f0 <CDC_ProcessReception+0x9e>
 802a7c2:	697b      	ldr	r3, [r7, #20]
 802a7c4:	8b5b      	ldrh	r3, [r3, #26]
 802a7c6:	461a      	mov	r2, r3
 802a7c8:	68fb      	ldr	r3, [r7, #12]
 802a7ca:	4293      	cmp	r3, r2
 802a7cc:	d910      	bls.n	802a7f0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 802a7ce:	697b      	ldr	r3, [r7, #20]
 802a7d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802a7d2:	68fb      	ldr	r3, [r7, #12]
 802a7d4:	1ad2      	subs	r2, r2, r3
 802a7d6:	697b      	ldr	r3, [r7, #20]
 802a7d8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 802a7da:	697b      	ldr	r3, [r7, #20]
 802a7dc:	6a1a      	ldr	r2, [r3, #32]
 802a7de:	68fb      	ldr	r3, [r7, #12]
 802a7e0:	441a      	add	r2, r3
 802a7e2:	697b      	ldr	r3, [r7, #20]
 802a7e4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 802a7e6:	697b      	ldr	r3, [r7, #20]
 802a7e8:	2203      	movs	r2, #3
 802a7ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802a7ee:	e006      	b.n	802a7fe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 802a7f0:	697b      	ldr	r3, [r7, #20]
 802a7f2:	2200      	movs	r2, #0
 802a7f4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 802a7f8:	6878      	ldr	r0, [r7, #4]
 802a7fa:	f000 f80f 	bl	802a81c <USBH_CDC_ReceiveCallback>
      break;
 802a7fe:	bf00      	nop
  }
}
 802a800:	bf00      	nop
 802a802:	3718      	adds	r7, #24
 802a804:	46bd      	mov	sp, r7
 802a806:	bd80      	pop	{r7, pc}

0802a808 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 802a808:	b480      	push	{r7}
 802a80a:	b083      	sub	sp, #12
 802a80c:	af00      	add	r7, sp, #0
 802a80e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802a810:	bf00      	nop
 802a812:	370c      	adds	r7, #12
 802a814:	46bd      	mov	sp, r7
 802a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a81a:	4770      	bx	lr

0802a81c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 802a81c:	b480      	push	{r7}
 802a81e:	b083      	sub	sp, #12
 802a820:	af00      	add	r7, sp, #0
 802a822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802a824:	bf00      	nop
 802a826:	370c      	adds	r7, #12
 802a828:	46bd      	mov	sp, r7
 802a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a82e:	4770      	bx	lr

0802a830 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 802a830:	b480      	push	{r7}
 802a832:	b083      	sub	sp, #12
 802a834:	af00      	add	r7, sp, #0
 802a836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802a838:	bf00      	nop
 802a83a:	370c      	adds	r7, #12
 802a83c:	46bd      	mov	sp, r7
 802a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a842:	4770      	bx	lr

0802a844 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 802a844:	b580      	push	{r7, lr}
 802a846:	b084      	sub	sp, #16
 802a848:	af00      	add	r7, sp, #0
 802a84a:	60f8      	str	r0, [r7, #12]
 802a84c:	60b9      	str	r1, [r7, #8]
 802a84e:	4613      	mov	r3, r2
 802a850:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 802a852:	68fb      	ldr	r3, [r7, #12]
 802a854:	2b00      	cmp	r3, #0
 802a856:	d101      	bne.n	802a85c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 802a858:	2302      	movs	r3, #2
 802a85a:	e029      	b.n	802a8b0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 802a85c:	68fb      	ldr	r3, [r7, #12]
 802a85e:	79fa      	ldrb	r2, [r7, #7]
 802a860:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 802a864:	68fb      	ldr	r3, [r7, #12]
 802a866:	2200      	movs	r2, #0
 802a868:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 802a86c:	68fb      	ldr	r3, [r7, #12]
 802a86e:	2200      	movs	r2, #0
 802a870:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 802a874:	68f8      	ldr	r0, [r7, #12]
 802a876:	f000 f81f 	bl	802a8b8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 802a87a:	68fb      	ldr	r3, [r7, #12]
 802a87c:	2200      	movs	r2, #0
 802a87e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 802a882:	68fb      	ldr	r3, [r7, #12]
 802a884:	2200      	movs	r2, #0
 802a886:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802a88a:	68fb      	ldr	r3, [r7, #12]
 802a88c:	2200      	movs	r2, #0
 802a88e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802a892:	68fb      	ldr	r3, [r7, #12]
 802a894:	2200      	movs	r2, #0
 802a896:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 802a89a:	68bb      	ldr	r3, [r7, #8]
 802a89c:	2b00      	cmp	r3, #0
 802a89e:	d003      	beq.n	802a8a8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 802a8a0:	68fb      	ldr	r3, [r7, #12]
 802a8a2:	68ba      	ldr	r2, [r7, #8]
 802a8a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 802a8a8:	68f8      	ldr	r0, [r7, #12]
 802a8aa:	f001 fd2d 	bl	802c308 <USBH_LL_Init>

  return USBH_OK;
 802a8ae:	2300      	movs	r3, #0
}
 802a8b0:	4618      	mov	r0, r3
 802a8b2:	3710      	adds	r7, #16
 802a8b4:	46bd      	mov	sp, r7
 802a8b6:	bd80      	pop	{r7, pc}

0802a8b8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 802a8b8:	b480      	push	{r7}
 802a8ba:	b085      	sub	sp, #20
 802a8bc:	af00      	add	r7, sp, #0
 802a8be:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 802a8c0:	2300      	movs	r3, #0
 802a8c2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802a8c4:	2300      	movs	r3, #0
 802a8c6:	60fb      	str	r3, [r7, #12]
 802a8c8:	e009      	b.n	802a8de <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 802a8ca:	687a      	ldr	r2, [r7, #4]
 802a8cc:	68fb      	ldr	r3, [r7, #12]
 802a8ce:	33e0      	adds	r3, #224	; 0xe0
 802a8d0:	009b      	lsls	r3, r3, #2
 802a8d2:	4413      	add	r3, r2
 802a8d4:	2200      	movs	r2, #0
 802a8d6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802a8d8:	68fb      	ldr	r3, [r7, #12]
 802a8da:	3301      	adds	r3, #1
 802a8dc:	60fb      	str	r3, [r7, #12]
 802a8de:	68fb      	ldr	r3, [r7, #12]
 802a8e0:	2b0f      	cmp	r3, #15
 802a8e2:	d9f2      	bls.n	802a8ca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802a8e4:	2300      	movs	r3, #0
 802a8e6:	60fb      	str	r3, [r7, #12]
 802a8e8:	e009      	b.n	802a8fe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 802a8ea:	687a      	ldr	r2, [r7, #4]
 802a8ec:	68fb      	ldr	r3, [r7, #12]
 802a8ee:	4413      	add	r3, r2
 802a8f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802a8f4:	2200      	movs	r2, #0
 802a8f6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802a8f8:	68fb      	ldr	r3, [r7, #12]
 802a8fa:	3301      	adds	r3, #1
 802a8fc:	60fb      	str	r3, [r7, #12]
 802a8fe:	68fb      	ldr	r3, [r7, #12]
 802a900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a904:	d3f1      	bcc.n	802a8ea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 802a906:	687b      	ldr	r3, [r7, #4]
 802a908:	2200      	movs	r2, #0
 802a90a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 802a90c:	687b      	ldr	r3, [r7, #4]
 802a90e:	2200      	movs	r2, #0
 802a910:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 802a912:	687b      	ldr	r3, [r7, #4]
 802a914:	2201      	movs	r2, #1
 802a916:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 802a918:	687b      	ldr	r3, [r7, #4]
 802a91a:	2200      	movs	r2, #0
 802a91c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 802a920:	687b      	ldr	r3, [r7, #4]
 802a922:	2201      	movs	r2, #1
 802a924:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 802a926:	687b      	ldr	r3, [r7, #4]
 802a928:	2240      	movs	r2, #64	; 0x40
 802a92a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 802a92c:	687b      	ldr	r3, [r7, #4]
 802a92e:	2200      	movs	r2, #0
 802a930:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 802a932:	687b      	ldr	r3, [r7, #4]
 802a934:	2200      	movs	r2, #0
 802a936:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 802a93a:	687b      	ldr	r3, [r7, #4]
 802a93c:	2201      	movs	r2, #1
 802a93e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 802a942:	687b      	ldr	r3, [r7, #4]
 802a944:	2200      	movs	r2, #0
 802a946:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 802a94a:	687b      	ldr	r3, [r7, #4]
 802a94c:	2200      	movs	r2, #0
 802a94e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 802a952:	2300      	movs	r3, #0
}
 802a954:	4618      	mov	r0, r3
 802a956:	3714      	adds	r7, #20
 802a958:	46bd      	mov	sp, r7
 802a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a95e:	4770      	bx	lr

0802a960 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 802a960:	b480      	push	{r7}
 802a962:	b085      	sub	sp, #20
 802a964:	af00      	add	r7, sp, #0
 802a966:	6078      	str	r0, [r7, #4]
 802a968:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 802a96a:	2300      	movs	r3, #0
 802a96c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 802a96e:	683b      	ldr	r3, [r7, #0]
 802a970:	2b00      	cmp	r3, #0
 802a972:	d016      	beq.n	802a9a2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 802a974:	687b      	ldr	r3, [r7, #4]
 802a976:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802a97a:	2b00      	cmp	r3, #0
 802a97c:	d10e      	bne.n	802a99c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 802a97e:	687b      	ldr	r3, [r7, #4]
 802a980:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802a984:	1c59      	adds	r1, r3, #1
 802a986:	687a      	ldr	r2, [r7, #4]
 802a988:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 802a98c:	687a      	ldr	r2, [r7, #4]
 802a98e:	33de      	adds	r3, #222	; 0xde
 802a990:	6839      	ldr	r1, [r7, #0]
 802a992:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 802a996:	2300      	movs	r3, #0
 802a998:	73fb      	strb	r3, [r7, #15]
 802a99a:	e004      	b.n	802a9a6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 802a99c:	2302      	movs	r3, #2
 802a99e:	73fb      	strb	r3, [r7, #15]
 802a9a0:	e001      	b.n	802a9a6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 802a9a2:	2302      	movs	r3, #2
 802a9a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802a9a6:	7bfb      	ldrb	r3, [r7, #15]
}
 802a9a8:	4618      	mov	r0, r3
 802a9aa:	3714      	adds	r7, #20
 802a9ac:	46bd      	mov	sp, r7
 802a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a9b2:	4770      	bx	lr

0802a9b4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 802a9b4:	b480      	push	{r7}
 802a9b6:	b085      	sub	sp, #20
 802a9b8:	af00      	add	r7, sp, #0
 802a9ba:	6078      	str	r0, [r7, #4]
 802a9bc:	460b      	mov	r3, r1
 802a9be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 802a9c0:	2300      	movs	r3, #0
 802a9c2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 802a9c4:	687b      	ldr	r3, [r7, #4]
 802a9c6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 802a9ca:	78fa      	ldrb	r2, [r7, #3]
 802a9cc:	429a      	cmp	r2, r3
 802a9ce:	d204      	bcs.n	802a9da <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 802a9d0:	687b      	ldr	r3, [r7, #4]
 802a9d2:	78fa      	ldrb	r2, [r7, #3]
 802a9d4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 802a9d8:	e001      	b.n	802a9de <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 802a9da:	2302      	movs	r3, #2
 802a9dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802a9de:	7bfb      	ldrb	r3, [r7, #15]
}
 802a9e0:	4618      	mov	r0, r3
 802a9e2:	3714      	adds	r7, #20
 802a9e4:	46bd      	mov	sp, r7
 802a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a9ea:	4770      	bx	lr

0802a9ec <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 802a9ec:	b480      	push	{r7}
 802a9ee:	b087      	sub	sp, #28
 802a9f0:	af00      	add	r7, sp, #0
 802a9f2:	6078      	str	r0, [r7, #4]
 802a9f4:	4608      	mov	r0, r1
 802a9f6:	4611      	mov	r1, r2
 802a9f8:	461a      	mov	r2, r3
 802a9fa:	4603      	mov	r3, r0
 802a9fc:	70fb      	strb	r3, [r7, #3]
 802a9fe:	460b      	mov	r3, r1
 802aa00:	70bb      	strb	r3, [r7, #2]
 802aa02:	4613      	mov	r3, r2
 802aa04:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 802aa06:	2300      	movs	r3, #0
 802aa08:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 802aa0a:	2300      	movs	r3, #0
 802aa0c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 802aa0e:	687b      	ldr	r3, [r7, #4]
 802aa10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802aa14:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802aa16:	e025      	b.n	802aa64 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 802aa18:	7dfb      	ldrb	r3, [r7, #23]
 802aa1a:	221a      	movs	r2, #26
 802aa1c:	fb02 f303 	mul.w	r3, r2, r3
 802aa20:	3308      	adds	r3, #8
 802aa22:	68fa      	ldr	r2, [r7, #12]
 802aa24:	4413      	add	r3, r2
 802aa26:	3302      	adds	r3, #2
 802aa28:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802aa2a:	693b      	ldr	r3, [r7, #16]
 802aa2c:	795b      	ldrb	r3, [r3, #5]
 802aa2e:	78fa      	ldrb	r2, [r7, #3]
 802aa30:	429a      	cmp	r2, r3
 802aa32:	d002      	beq.n	802aa3a <USBH_FindInterface+0x4e>
 802aa34:	78fb      	ldrb	r3, [r7, #3]
 802aa36:	2bff      	cmp	r3, #255	; 0xff
 802aa38:	d111      	bne.n	802aa5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802aa3a:	693b      	ldr	r3, [r7, #16]
 802aa3c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802aa3e:	78ba      	ldrb	r2, [r7, #2]
 802aa40:	429a      	cmp	r2, r3
 802aa42:	d002      	beq.n	802aa4a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802aa44:	78bb      	ldrb	r3, [r7, #2]
 802aa46:	2bff      	cmp	r3, #255	; 0xff
 802aa48:	d109      	bne.n	802aa5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802aa4a:	693b      	ldr	r3, [r7, #16]
 802aa4c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802aa4e:	787a      	ldrb	r2, [r7, #1]
 802aa50:	429a      	cmp	r2, r3
 802aa52:	d002      	beq.n	802aa5a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802aa54:	787b      	ldrb	r3, [r7, #1]
 802aa56:	2bff      	cmp	r3, #255	; 0xff
 802aa58:	d101      	bne.n	802aa5e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 802aa5a:	7dfb      	ldrb	r3, [r7, #23]
 802aa5c:	e006      	b.n	802aa6c <USBH_FindInterface+0x80>
    }
    if_ix++;
 802aa5e:	7dfb      	ldrb	r3, [r7, #23]
 802aa60:	3301      	adds	r3, #1
 802aa62:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802aa64:	7dfb      	ldrb	r3, [r7, #23]
 802aa66:	2b01      	cmp	r3, #1
 802aa68:	d9d6      	bls.n	802aa18 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 802aa6a:	23ff      	movs	r3, #255	; 0xff
}
 802aa6c:	4618      	mov	r0, r3
 802aa6e:	371c      	adds	r7, #28
 802aa70:	46bd      	mov	sp, r7
 802aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aa76:	4770      	bx	lr

0802aa78 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 802aa78:	b580      	push	{r7, lr}
 802aa7a:	b082      	sub	sp, #8
 802aa7c:	af00      	add	r7, sp, #0
 802aa7e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 802aa80:	6878      	ldr	r0, [r7, #4]
 802aa82:	f001 fc87 	bl	802c394 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 802aa86:	2101      	movs	r1, #1
 802aa88:	6878      	ldr	r0, [r7, #4]
 802aa8a:	f001 fda0 	bl	802c5ce <USBH_LL_DriverVBUS>

  return USBH_OK;
 802aa8e:	2300      	movs	r3, #0
}
 802aa90:	4618      	mov	r0, r3
 802aa92:	3708      	adds	r7, #8
 802aa94:	46bd      	mov	sp, r7
 802aa96:	bd80      	pop	{r7, pc}

0802aa98 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 802aa98:	b580      	push	{r7, lr}
 802aa9a:	b088      	sub	sp, #32
 802aa9c:	af04      	add	r7, sp, #16
 802aa9e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 802aaa0:	2302      	movs	r3, #2
 802aaa2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 802aaa4:	2300      	movs	r3, #0
 802aaa6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 802aaa8:	687b      	ldr	r3, [r7, #4]
 802aaaa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 802aaae:	b2db      	uxtb	r3, r3
 802aab0:	2b01      	cmp	r3, #1
 802aab2:	d102      	bne.n	802aaba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 802aab4:	687b      	ldr	r3, [r7, #4]
 802aab6:	2203      	movs	r2, #3
 802aab8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 802aaba:	687b      	ldr	r3, [r7, #4]
 802aabc:	781b      	ldrb	r3, [r3, #0]
 802aabe:	b2db      	uxtb	r3, r3
 802aac0:	2b0b      	cmp	r3, #11
 802aac2:	f200 81be 	bhi.w	802ae42 <USBH_Process+0x3aa>
 802aac6:	a201      	add	r2, pc, #4	; (adr r2, 802aacc <USBH_Process+0x34>)
 802aac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802aacc:	0802aafd 	.word	0x0802aafd
 802aad0:	0802ab2f 	.word	0x0802ab2f
 802aad4:	0802ab97 	.word	0x0802ab97
 802aad8:	0802addd 	.word	0x0802addd
 802aadc:	0802ae43 	.word	0x0802ae43
 802aae0:	0802ac3b 	.word	0x0802ac3b
 802aae4:	0802ad83 	.word	0x0802ad83
 802aae8:	0802ac71 	.word	0x0802ac71
 802aaec:	0802ac91 	.word	0x0802ac91
 802aaf0:	0802acb1 	.word	0x0802acb1
 802aaf4:	0802acf5 	.word	0x0802acf5
 802aaf8:	0802adc5 	.word	0x0802adc5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 802aafc:	687b      	ldr	r3, [r7, #4]
 802aafe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802ab02:	b2db      	uxtb	r3, r3
 802ab04:	2b00      	cmp	r3, #0
 802ab06:	f000 819e 	beq.w	802ae46 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 802ab0a:	687b      	ldr	r3, [r7, #4]
 802ab0c:	2201      	movs	r2, #1
 802ab0e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 802ab10:	20c8      	movs	r0, #200	; 0xc8
 802ab12:	f001 fda3 	bl	802c65c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 802ab16:	6878      	ldr	r0, [r7, #4]
 802ab18:	f001 fc99 	bl	802c44e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 802ab1c:	687b      	ldr	r3, [r7, #4]
 802ab1e:	2200      	movs	r2, #0
 802ab20:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 802ab24:	687b      	ldr	r3, [r7, #4]
 802ab26:	2200      	movs	r2, #0
 802ab28:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802ab2c:	e18b      	b.n	802ae46 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 802ab2e:	687b      	ldr	r3, [r7, #4]
 802ab30:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 802ab34:	2b01      	cmp	r3, #1
 802ab36:	d107      	bne.n	802ab48 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 802ab38:	687b      	ldr	r3, [r7, #4]
 802ab3a:	2200      	movs	r2, #0
 802ab3c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 802ab40:	687b      	ldr	r3, [r7, #4]
 802ab42:	2202      	movs	r2, #2
 802ab44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802ab46:	e18d      	b.n	802ae64 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 802ab48:	687b      	ldr	r3, [r7, #4]
 802ab4a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802ab4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802ab52:	d914      	bls.n	802ab7e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 802ab54:	687b      	ldr	r3, [r7, #4]
 802ab56:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802ab5a:	3301      	adds	r3, #1
 802ab5c:	b2da      	uxtb	r2, r3
 802ab5e:	687b      	ldr	r3, [r7, #4]
 802ab60:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 802ab64:	687b      	ldr	r3, [r7, #4]
 802ab66:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802ab6a:	2b03      	cmp	r3, #3
 802ab6c:	d903      	bls.n	802ab76 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 802ab6e:	687b      	ldr	r3, [r7, #4]
 802ab70:	220d      	movs	r2, #13
 802ab72:	701a      	strb	r2, [r3, #0]
      break;
 802ab74:	e176      	b.n	802ae64 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 802ab76:	687b      	ldr	r3, [r7, #4]
 802ab78:	2200      	movs	r2, #0
 802ab7a:	701a      	strb	r2, [r3, #0]
      break;
 802ab7c:	e172      	b.n	802ae64 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 802ab7e:	687b      	ldr	r3, [r7, #4]
 802ab80:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802ab84:	f103 020a 	add.w	r2, r3, #10
 802ab88:	687b      	ldr	r3, [r7, #4]
 802ab8a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 802ab8e:	200a      	movs	r0, #10
 802ab90:	f001 fd64 	bl	802c65c <USBH_Delay>
      break;
 802ab94:	e166      	b.n	802ae64 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 802ab96:	687b      	ldr	r3, [r7, #4]
 802ab98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802ab9c:	2b00      	cmp	r3, #0
 802ab9e:	d005      	beq.n	802abac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 802aba0:	687b      	ldr	r3, [r7, #4]
 802aba2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802aba6:	2104      	movs	r1, #4
 802aba8:	6878      	ldr	r0, [r7, #4]
 802abaa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 802abac:	2064      	movs	r0, #100	; 0x64
 802abae:	f001 fd55 	bl	802c65c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 802abb2:	6878      	ldr	r0, [r7, #4]
 802abb4:	f001 fc24 	bl	802c400 <USBH_LL_GetSpeed>
 802abb8:	4603      	mov	r3, r0
 802abba:	461a      	mov	r2, r3
 802abbc:	687b      	ldr	r3, [r7, #4]
 802abbe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 802abc2:	687b      	ldr	r3, [r7, #4]
 802abc4:	2205      	movs	r2, #5
 802abc6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 802abc8:	2100      	movs	r1, #0
 802abca:	6878      	ldr	r0, [r7, #4]
 802abcc:	f001 fa29 	bl	802c022 <USBH_AllocPipe>
 802abd0:	4603      	mov	r3, r0
 802abd2:	461a      	mov	r2, r3
 802abd4:	687b      	ldr	r3, [r7, #4]
 802abd6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 802abd8:	2180      	movs	r1, #128	; 0x80
 802abda:	6878      	ldr	r0, [r7, #4]
 802abdc:	f001 fa21 	bl	802c022 <USBH_AllocPipe>
 802abe0:	4603      	mov	r3, r0
 802abe2:	461a      	mov	r2, r3
 802abe4:	687b      	ldr	r3, [r7, #4]
 802abe6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802abe8:	687b      	ldr	r3, [r7, #4]
 802abea:	7919      	ldrb	r1, [r3, #4]
 802abec:	687b      	ldr	r3, [r7, #4]
 802abee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802abf2:	687b      	ldr	r3, [r7, #4]
 802abf4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802abf8:	687a      	ldr	r2, [r7, #4]
 802abfa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802abfc:	b292      	uxth	r2, r2
 802abfe:	9202      	str	r2, [sp, #8]
 802ac00:	2200      	movs	r2, #0
 802ac02:	9201      	str	r2, [sp, #4]
 802ac04:	9300      	str	r3, [sp, #0]
 802ac06:	4603      	mov	r3, r0
 802ac08:	2280      	movs	r2, #128	; 0x80
 802ac0a:	6878      	ldr	r0, [r7, #4]
 802ac0c:	f001 f9da 	bl	802bfc4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802ac10:	687b      	ldr	r3, [r7, #4]
 802ac12:	7959      	ldrb	r1, [r3, #5]
 802ac14:	687b      	ldr	r3, [r7, #4]
 802ac16:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802ac1a:	687b      	ldr	r3, [r7, #4]
 802ac1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802ac20:	687a      	ldr	r2, [r7, #4]
 802ac22:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802ac24:	b292      	uxth	r2, r2
 802ac26:	9202      	str	r2, [sp, #8]
 802ac28:	2200      	movs	r2, #0
 802ac2a:	9201      	str	r2, [sp, #4]
 802ac2c:	9300      	str	r3, [sp, #0]
 802ac2e:	4603      	mov	r3, r0
 802ac30:	2200      	movs	r2, #0
 802ac32:	6878      	ldr	r0, [r7, #4]
 802ac34:	f001 f9c6 	bl	802bfc4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802ac38:	e114      	b.n	802ae64 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 802ac3a:	6878      	ldr	r0, [r7, #4]
 802ac3c:	f000 f918 	bl	802ae70 <USBH_HandleEnum>
 802ac40:	4603      	mov	r3, r0
 802ac42:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 802ac44:	7bbb      	ldrb	r3, [r7, #14]
 802ac46:	b2db      	uxtb	r3, r3
 802ac48:	2b00      	cmp	r3, #0
 802ac4a:	f040 80fe 	bne.w	802ae4a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 802ac4e:	687b      	ldr	r3, [r7, #4]
 802ac50:	2200      	movs	r2, #0
 802ac52:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 802ac56:	687b      	ldr	r3, [r7, #4]
 802ac58:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 802ac5c:	2b01      	cmp	r3, #1
 802ac5e:	d103      	bne.n	802ac68 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 802ac60:	687b      	ldr	r3, [r7, #4]
 802ac62:	2208      	movs	r2, #8
 802ac64:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802ac66:	e0f0      	b.n	802ae4a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 802ac68:	687b      	ldr	r3, [r7, #4]
 802ac6a:	2207      	movs	r2, #7
 802ac6c:	701a      	strb	r2, [r3, #0]
      break;
 802ac6e:	e0ec      	b.n	802ae4a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 802ac70:	687b      	ldr	r3, [r7, #4]
 802ac72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802ac76:	2b00      	cmp	r3, #0
 802ac78:	f000 80e9 	beq.w	802ae4e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 802ac7c:	687b      	ldr	r3, [r7, #4]
 802ac7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802ac82:	2101      	movs	r1, #1
 802ac84:	6878      	ldr	r0, [r7, #4]
 802ac86:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 802ac88:	687b      	ldr	r3, [r7, #4]
 802ac8a:	2208      	movs	r2, #8
 802ac8c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 802ac8e:	e0de      	b.n	802ae4e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 802ac90:	687b      	ldr	r3, [r7, #4]
 802ac92:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 802ac96:	b29b      	uxth	r3, r3
 802ac98:	4619      	mov	r1, r3
 802ac9a:	6878      	ldr	r0, [r7, #4]
 802ac9c:	f000 fc2c 	bl	802b4f8 <USBH_SetCfg>
 802aca0:	4603      	mov	r3, r0
 802aca2:	2b00      	cmp	r3, #0
 802aca4:	f040 80d5 	bne.w	802ae52 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 802aca8:	687b      	ldr	r3, [r7, #4]
 802acaa:	2209      	movs	r2, #9
 802acac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802acae:	e0d0      	b.n	802ae52 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 802acb0:	687b      	ldr	r3, [r7, #4]
 802acb2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 802acb6:	f003 0320 	and.w	r3, r3, #32
 802acba:	2b00      	cmp	r3, #0
 802acbc:	d016      	beq.n	802acec <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 802acbe:	2101      	movs	r1, #1
 802acc0:	6878      	ldr	r0, [r7, #4]
 802acc2:	f000 fc3c 	bl	802b53e <USBH_SetFeature>
 802acc6:	4603      	mov	r3, r0
 802acc8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802acca:	7bbb      	ldrb	r3, [r7, #14]
 802accc:	b2db      	uxtb	r3, r3
 802acce:	2b00      	cmp	r3, #0
 802acd0:	d103      	bne.n	802acda <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 802acd2:	687b      	ldr	r3, [r7, #4]
 802acd4:	220a      	movs	r2, #10
 802acd6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802acd8:	e0bd      	b.n	802ae56 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 802acda:	7bbb      	ldrb	r3, [r7, #14]
 802acdc:	b2db      	uxtb	r3, r3
 802acde:	2b03      	cmp	r3, #3
 802ace0:	f040 80b9 	bne.w	802ae56 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 802ace4:	687b      	ldr	r3, [r7, #4]
 802ace6:	220a      	movs	r2, #10
 802ace8:	701a      	strb	r2, [r3, #0]
      break;
 802acea:	e0b4      	b.n	802ae56 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 802acec:	687b      	ldr	r3, [r7, #4]
 802acee:	220a      	movs	r2, #10
 802acf0:	701a      	strb	r2, [r3, #0]
      break;
 802acf2:	e0b0      	b.n	802ae56 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 802acf4:	687b      	ldr	r3, [r7, #4]
 802acf6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802acfa:	2b00      	cmp	r3, #0
 802acfc:	f000 80ad 	beq.w	802ae5a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 802ad00:	687b      	ldr	r3, [r7, #4]
 802ad02:	2200      	movs	r2, #0
 802ad04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802ad08:	2300      	movs	r3, #0
 802ad0a:	73fb      	strb	r3, [r7, #15]
 802ad0c:	e016      	b.n	802ad3c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 802ad0e:	7bfa      	ldrb	r2, [r7, #15]
 802ad10:	687b      	ldr	r3, [r7, #4]
 802ad12:	32de      	adds	r2, #222	; 0xde
 802ad14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ad18:	791a      	ldrb	r2, [r3, #4]
 802ad1a:	687b      	ldr	r3, [r7, #4]
 802ad1c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 802ad20:	429a      	cmp	r2, r3
 802ad22:	d108      	bne.n	802ad36 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 802ad24:	7bfa      	ldrb	r2, [r7, #15]
 802ad26:	687b      	ldr	r3, [r7, #4]
 802ad28:	32de      	adds	r2, #222	; 0xde
 802ad2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802ad2e:	687b      	ldr	r3, [r7, #4]
 802ad30:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 802ad34:	e005      	b.n	802ad42 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802ad36:	7bfb      	ldrb	r3, [r7, #15]
 802ad38:	3301      	adds	r3, #1
 802ad3a:	73fb      	strb	r3, [r7, #15]
 802ad3c:	7bfb      	ldrb	r3, [r7, #15]
 802ad3e:	2b00      	cmp	r3, #0
 802ad40:	d0e5      	beq.n	802ad0e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 802ad42:	687b      	ldr	r3, [r7, #4]
 802ad44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802ad48:	2b00      	cmp	r3, #0
 802ad4a:	d016      	beq.n	802ad7a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 802ad4c:	687b      	ldr	r3, [r7, #4]
 802ad4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802ad52:	689b      	ldr	r3, [r3, #8]
 802ad54:	6878      	ldr	r0, [r7, #4]
 802ad56:	4798      	blx	r3
 802ad58:	4603      	mov	r3, r0
 802ad5a:	2b00      	cmp	r3, #0
 802ad5c:	d109      	bne.n	802ad72 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 802ad5e:	687b      	ldr	r3, [r7, #4]
 802ad60:	2206      	movs	r2, #6
 802ad62:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 802ad64:	687b      	ldr	r3, [r7, #4]
 802ad66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802ad6a:	2103      	movs	r1, #3
 802ad6c:	6878      	ldr	r0, [r7, #4]
 802ad6e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802ad70:	e073      	b.n	802ae5a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 802ad72:	687b      	ldr	r3, [r7, #4]
 802ad74:	220d      	movs	r2, #13
 802ad76:	701a      	strb	r2, [r3, #0]
      break;
 802ad78:	e06f      	b.n	802ae5a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 802ad7a:	687b      	ldr	r3, [r7, #4]
 802ad7c:	220d      	movs	r2, #13
 802ad7e:	701a      	strb	r2, [r3, #0]
      break;
 802ad80:	e06b      	b.n	802ae5a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 802ad82:	687b      	ldr	r3, [r7, #4]
 802ad84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802ad88:	2b00      	cmp	r3, #0
 802ad8a:	d017      	beq.n	802adbc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 802ad8c:	687b      	ldr	r3, [r7, #4]
 802ad8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802ad92:	691b      	ldr	r3, [r3, #16]
 802ad94:	6878      	ldr	r0, [r7, #4]
 802ad96:	4798      	blx	r3
 802ad98:	4603      	mov	r3, r0
 802ad9a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802ad9c:	7bbb      	ldrb	r3, [r7, #14]
 802ad9e:	b2db      	uxtb	r3, r3
 802ada0:	2b00      	cmp	r3, #0
 802ada2:	d103      	bne.n	802adac <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 802ada4:	687b      	ldr	r3, [r7, #4]
 802ada6:	220b      	movs	r2, #11
 802ada8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802adaa:	e058      	b.n	802ae5e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 802adac:	7bbb      	ldrb	r3, [r7, #14]
 802adae:	b2db      	uxtb	r3, r3
 802adb0:	2b02      	cmp	r3, #2
 802adb2:	d154      	bne.n	802ae5e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 802adb4:	687b      	ldr	r3, [r7, #4]
 802adb6:	220d      	movs	r2, #13
 802adb8:	701a      	strb	r2, [r3, #0]
      break;
 802adba:	e050      	b.n	802ae5e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 802adbc:	687b      	ldr	r3, [r7, #4]
 802adbe:	220d      	movs	r2, #13
 802adc0:	701a      	strb	r2, [r3, #0]
      break;
 802adc2:	e04c      	b.n	802ae5e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 802adc4:	687b      	ldr	r3, [r7, #4]
 802adc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802adca:	2b00      	cmp	r3, #0
 802adcc:	d049      	beq.n	802ae62 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 802adce:	687b      	ldr	r3, [r7, #4]
 802add0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802add4:	695b      	ldr	r3, [r3, #20]
 802add6:	6878      	ldr	r0, [r7, #4]
 802add8:	4798      	blx	r3
      }
      break;
 802adda:	e042      	b.n	802ae62 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 802addc:	687b      	ldr	r3, [r7, #4]
 802adde:	2200      	movs	r2, #0
 802ade0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 802ade4:	6878      	ldr	r0, [r7, #4]
 802ade6:	f7ff fd67 	bl	802a8b8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 802adea:	687b      	ldr	r3, [r7, #4]
 802adec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802adf0:	2b00      	cmp	r3, #0
 802adf2:	d009      	beq.n	802ae08 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 802adf4:	687b      	ldr	r3, [r7, #4]
 802adf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802adfa:	68db      	ldr	r3, [r3, #12]
 802adfc:	6878      	ldr	r0, [r7, #4]
 802adfe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 802ae00:	687b      	ldr	r3, [r7, #4]
 802ae02:	2200      	movs	r2, #0
 802ae04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 802ae08:	687b      	ldr	r3, [r7, #4]
 802ae0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802ae0e:	2b00      	cmp	r3, #0
 802ae10:	d005      	beq.n	802ae1e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 802ae12:	687b      	ldr	r3, [r7, #4]
 802ae14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802ae18:	2105      	movs	r1, #5
 802ae1a:	6878      	ldr	r0, [r7, #4]
 802ae1c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 802ae1e:	687b      	ldr	r3, [r7, #4]
 802ae20:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 802ae24:	b2db      	uxtb	r3, r3
 802ae26:	2b01      	cmp	r3, #1
 802ae28:	d107      	bne.n	802ae3a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 802ae2a:	687b      	ldr	r3, [r7, #4]
 802ae2c:	2200      	movs	r2, #0
 802ae2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 802ae32:	6878      	ldr	r0, [r7, #4]
 802ae34:	f7ff fe20 	bl	802aa78 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802ae38:	e014      	b.n	802ae64 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 802ae3a:	6878      	ldr	r0, [r7, #4]
 802ae3c:	f001 faaa 	bl	802c394 <USBH_LL_Start>
      break;
 802ae40:	e010      	b.n	802ae64 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 802ae42:	bf00      	nop
 802ae44:	e00e      	b.n	802ae64 <USBH_Process+0x3cc>
      break;
 802ae46:	bf00      	nop
 802ae48:	e00c      	b.n	802ae64 <USBH_Process+0x3cc>
      break;
 802ae4a:	bf00      	nop
 802ae4c:	e00a      	b.n	802ae64 <USBH_Process+0x3cc>
    break;
 802ae4e:	bf00      	nop
 802ae50:	e008      	b.n	802ae64 <USBH_Process+0x3cc>
      break;
 802ae52:	bf00      	nop
 802ae54:	e006      	b.n	802ae64 <USBH_Process+0x3cc>
      break;
 802ae56:	bf00      	nop
 802ae58:	e004      	b.n	802ae64 <USBH_Process+0x3cc>
      break;
 802ae5a:	bf00      	nop
 802ae5c:	e002      	b.n	802ae64 <USBH_Process+0x3cc>
      break;
 802ae5e:	bf00      	nop
 802ae60:	e000      	b.n	802ae64 <USBH_Process+0x3cc>
      break;
 802ae62:	bf00      	nop
  }
  return USBH_OK;
 802ae64:	2300      	movs	r3, #0
}
 802ae66:	4618      	mov	r0, r3
 802ae68:	3710      	adds	r7, #16
 802ae6a:	46bd      	mov	sp, r7
 802ae6c:	bd80      	pop	{r7, pc}
 802ae6e:	bf00      	nop

0802ae70 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 802ae70:	b580      	push	{r7, lr}
 802ae72:	b088      	sub	sp, #32
 802ae74:	af04      	add	r7, sp, #16
 802ae76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 802ae78:	2301      	movs	r3, #1
 802ae7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 802ae7c:	2301      	movs	r3, #1
 802ae7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 802ae80:	687b      	ldr	r3, [r7, #4]
 802ae82:	785b      	ldrb	r3, [r3, #1]
 802ae84:	2b07      	cmp	r3, #7
 802ae86:	f200 81c1 	bhi.w	802b20c <USBH_HandleEnum+0x39c>
 802ae8a:	a201      	add	r2, pc, #4	; (adr r2, 802ae90 <USBH_HandleEnum+0x20>)
 802ae8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ae90:	0802aeb1 	.word	0x0802aeb1
 802ae94:	0802af6f 	.word	0x0802af6f
 802ae98:	0802afd9 	.word	0x0802afd9
 802ae9c:	0802b067 	.word	0x0802b067
 802aea0:	0802b0d1 	.word	0x0802b0d1
 802aea4:	0802b141 	.word	0x0802b141
 802aea8:	0802b187 	.word	0x0802b187
 802aeac:	0802b1cd 	.word	0x0802b1cd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 802aeb0:	2108      	movs	r1, #8
 802aeb2:	6878      	ldr	r0, [r7, #4]
 802aeb4:	f000 fa50 	bl	802b358 <USBH_Get_DevDesc>
 802aeb8:	4603      	mov	r3, r0
 802aeba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802aebc:	7bbb      	ldrb	r3, [r7, #14]
 802aebe:	2b00      	cmp	r3, #0
 802aec0:	d130      	bne.n	802af24 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 802aec2:	687b      	ldr	r3, [r7, #4]
 802aec4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 802aec8:	687b      	ldr	r3, [r7, #4]
 802aeca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 802aecc:	687b      	ldr	r3, [r7, #4]
 802aece:	2201      	movs	r2, #1
 802aed0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802aed2:	687b      	ldr	r3, [r7, #4]
 802aed4:	7919      	ldrb	r1, [r3, #4]
 802aed6:	687b      	ldr	r3, [r7, #4]
 802aed8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802aedc:	687b      	ldr	r3, [r7, #4]
 802aede:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802aee2:	687a      	ldr	r2, [r7, #4]
 802aee4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802aee6:	b292      	uxth	r2, r2
 802aee8:	9202      	str	r2, [sp, #8]
 802aeea:	2200      	movs	r2, #0
 802aeec:	9201      	str	r2, [sp, #4]
 802aeee:	9300      	str	r3, [sp, #0]
 802aef0:	4603      	mov	r3, r0
 802aef2:	2280      	movs	r2, #128	; 0x80
 802aef4:	6878      	ldr	r0, [r7, #4]
 802aef6:	f001 f865 	bl	802bfc4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802aefa:	687b      	ldr	r3, [r7, #4]
 802aefc:	7959      	ldrb	r1, [r3, #5]
 802aefe:	687b      	ldr	r3, [r7, #4]
 802af00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802af04:	687b      	ldr	r3, [r7, #4]
 802af06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802af0a:	687a      	ldr	r2, [r7, #4]
 802af0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802af0e:	b292      	uxth	r2, r2
 802af10:	9202      	str	r2, [sp, #8]
 802af12:	2200      	movs	r2, #0
 802af14:	9201      	str	r2, [sp, #4]
 802af16:	9300      	str	r3, [sp, #0]
 802af18:	4603      	mov	r3, r0
 802af1a:	2200      	movs	r2, #0
 802af1c:	6878      	ldr	r0, [r7, #4]
 802af1e:	f001 f851 	bl	802bfc4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802af22:	e175      	b.n	802b210 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802af24:	7bbb      	ldrb	r3, [r7, #14]
 802af26:	2b03      	cmp	r3, #3
 802af28:	f040 8172 	bne.w	802b210 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 802af2c:	687b      	ldr	r3, [r7, #4]
 802af2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802af32:	3301      	adds	r3, #1
 802af34:	b2da      	uxtb	r2, r3
 802af36:	687b      	ldr	r3, [r7, #4]
 802af38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802af3c:	687b      	ldr	r3, [r7, #4]
 802af3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802af42:	2b03      	cmp	r3, #3
 802af44:	d903      	bls.n	802af4e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 802af46:	687b      	ldr	r3, [r7, #4]
 802af48:	220d      	movs	r2, #13
 802af4a:	701a      	strb	r2, [r3, #0]
      break;
 802af4c:	e160      	b.n	802b210 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802af4e:	687b      	ldr	r3, [r7, #4]
 802af50:	795b      	ldrb	r3, [r3, #5]
 802af52:	4619      	mov	r1, r3
 802af54:	6878      	ldr	r0, [r7, #4]
 802af56:	f001 f885 	bl	802c064 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802af5a:	687b      	ldr	r3, [r7, #4]
 802af5c:	791b      	ldrb	r3, [r3, #4]
 802af5e:	4619      	mov	r1, r3
 802af60:	6878      	ldr	r0, [r7, #4]
 802af62:	f001 f87f 	bl	802c064 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 802af66:	687b      	ldr	r3, [r7, #4]
 802af68:	2200      	movs	r2, #0
 802af6a:	701a      	strb	r2, [r3, #0]
      break;
 802af6c:	e150      	b.n	802b210 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 802af6e:	2112      	movs	r1, #18
 802af70:	6878      	ldr	r0, [r7, #4]
 802af72:	f000 f9f1 	bl	802b358 <USBH_Get_DevDesc>
 802af76:	4603      	mov	r3, r0
 802af78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802af7a:	7bbb      	ldrb	r3, [r7, #14]
 802af7c:	2b00      	cmp	r3, #0
 802af7e:	d103      	bne.n	802af88 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 802af80:	687b      	ldr	r3, [r7, #4]
 802af82:	2202      	movs	r2, #2
 802af84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802af86:	e145      	b.n	802b214 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802af88:	7bbb      	ldrb	r3, [r7, #14]
 802af8a:	2b03      	cmp	r3, #3
 802af8c:	f040 8142 	bne.w	802b214 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 802af90:	687b      	ldr	r3, [r7, #4]
 802af92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802af96:	3301      	adds	r3, #1
 802af98:	b2da      	uxtb	r2, r3
 802af9a:	687b      	ldr	r3, [r7, #4]
 802af9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802afa0:	687b      	ldr	r3, [r7, #4]
 802afa2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802afa6:	2b03      	cmp	r3, #3
 802afa8:	d903      	bls.n	802afb2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 802afaa:	687b      	ldr	r3, [r7, #4]
 802afac:	220d      	movs	r2, #13
 802afae:	701a      	strb	r2, [r3, #0]
      break;
 802afb0:	e130      	b.n	802b214 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802afb2:	687b      	ldr	r3, [r7, #4]
 802afb4:	795b      	ldrb	r3, [r3, #5]
 802afb6:	4619      	mov	r1, r3
 802afb8:	6878      	ldr	r0, [r7, #4]
 802afba:	f001 f853 	bl	802c064 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802afbe:	687b      	ldr	r3, [r7, #4]
 802afc0:	791b      	ldrb	r3, [r3, #4]
 802afc2:	4619      	mov	r1, r3
 802afc4:	6878      	ldr	r0, [r7, #4]
 802afc6:	f001 f84d 	bl	802c064 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802afca:	687b      	ldr	r3, [r7, #4]
 802afcc:	2200      	movs	r2, #0
 802afce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802afd0:	687b      	ldr	r3, [r7, #4]
 802afd2:	2200      	movs	r2, #0
 802afd4:	701a      	strb	r2, [r3, #0]
      break;
 802afd6:	e11d      	b.n	802b214 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 802afd8:	2101      	movs	r1, #1
 802afda:	6878      	ldr	r0, [r7, #4]
 802afdc:	f000 fa68 	bl	802b4b0 <USBH_SetAddress>
 802afe0:	4603      	mov	r3, r0
 802afe2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802afe4:	7bbb      	ldrb	r3, [r7, #14]
 802afe6:	2b00      	cmp	r3, #0
 802afe8:	d132      	bne.n	802b050 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 802afea:	2002      	movs	r0, #2
 802afec:	f001 fb36 	bl	802c65c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 802aff0:	687b      	ldr	r3, [r7, #4]
 802aff2:	2201      	movs	r2, #1
 802aff4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 802aff8:	687b      	ldr	r3, [r7, #4]
 802affa:	2203      	movs	r2, #3
 802affc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802affe:	687b      	ldr	r3, [r7, #4]
 802b000:	7919      	ldrb	r1, [r3, #4]
 802b002:	687b      	ldr	r3, [r7, #4]
 802b004:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802b008:	687b      	ldr	r3, [r7, #4]
 802b00a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802b00e:	687a      	ldr	r2, [r7, #4]
 802b010:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802b012:	b292      	uxth	r2, r2
 802b014:	9202      	str	r2, [sp, #8]
 802b016:	2200      	movs	r2, #0
 802b018:	9201      	str	r2, [sp, #4]
 802b01a:	9300      	str	r3, [sp, #0]
 802b01c:	4603      	mov	r3, r0
 802b01e:	2280      	movs	r2, #128	; 0x80
 802b020:	6878      	ldr	r0, [r7, #4]
 802b022:	f000 ffcf 	bl	802bfc4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802b026:	687b      	ldr	r3, [r7, #4]
 802b028:	7959      	ldrb	r1, [r3, #5]
 802b02a:	687b      	ldr	r3, [r7, #4]
 802b02c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802b030:	687b      	ldr	r3, [r7, #4]
 802b032:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802b036:	687a      	ldr	r2, [r7, #4]
 802b038:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802b03a:	b292      	uxth	r2, r2
 802b03c:	9202      	str	r2, [sp, #8]
 802b03e:	2200      	movs	r2, #0
 802b040:	9201      	str	r2, [sp, #4]
 802b042:	9300      	str	r3, [sp, #0]
 802b044:	4603      	mov	r3, r0
 802b046:	2200      	movs	r2, #0
 802b048:	6878      	ldr	r0, [r7, #4]
 802b04a:	f000 ffbb 	bl	802bfc4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802b04e:	e0e3      	b.n	802b218 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802b050:	7bbb      	ldrb	r3, [r7, #14]
 802b052:	2b03      	cmp	r3, #3
 802b054:	f040 80e0 	bne.w	802b218 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 802b058:	687b      	ldr	r3, [r7, #4]
 802b05a:	220d      	movs	r2, #13
 802b05c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 802b05e:	687b      	ldr	r3, [r7, #4]
 802b060:	2200      	movs	r2, #0
 802b062:	705a      	strb	r2, [r3, #1]
      break;
 802b064:	e0d8      	b.n	802b218 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 802b066:	2109      	movs	r1, #9
 802b068:	6878      	ldr	r0, [r7, #4]
 802b06a:	f000 f99d 	bl	802b3a8 <USBH_Get_CfgDesc>
 802b06e:	4603      	mov	r3, r0
 802b070:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802b072:	7bbb      	ldrb	r3, [r7, #14]
 802b074:	2b00      	cmp	r3, #0
 802b076:	d103      	bne.n	802b080 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 802b078:	687b      	ldr	r3, [r7, #4]
 802b07a:	2204      	movs	r2, #4
 802b07c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802b07e:	e0cd      	b.n	802b21c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802b080:	7bbb      	ldrb	r3, [r7, #14]
 802b082:	2b03      	cmp	r3, #3
 802b084:	f040 80ca 	bne.w	802b21c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 802b088:	687b      	ldr	r3, [r7, #4]
 802b08a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802b08e:	3301      	adds	r3, #1
 802b090:	b2da      	uxtb	r2, r3
 802b092:	687b      	ldr	r3, [r7, #4]
 802b094:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802b098:	687b      	ldr	r3, [r7, #4]
 802b09a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802b09e:	2b03      	cmp	r3, #3
 802b0a0:	d903      	bls.n	802b0aa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 802b0a2:	687b      	ldr	r3, [r7, #4]
 802b0a4:	220d      	movs	r2, #13
 802b0a6:	701a      	strb	r2, [r3, #0]
      break;
 802b0a8:	e0b8      	b.n	802b21c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802b0aa:	687b      	ldr	r3, [r7, #4]
 802b0ac:	795b      	ldrb	r3, [r3, #5]
 802b0ae:	4619      	mov	r1, r3
 802b0b0:	6878      	ldr	r0, [r7, #4]
 802b0b2:	f000 ffd7 	bl	802c064 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802b0b6:	687b      	ldr	r3, [r7, #4]
 802b0b8:	791b      	ldrb	r3, [r3, #4]
 802b0ba:	4619      	mov	r1, r3
 802b0bc:	6878      	ldr	r0, [r7, #4]
 802b0be:	f000 ffd1 	bl	802c064 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802b0c2:	687b      	ldr	r3, [r7, #4]
 802b0c4:	2200      	movs	r2, #0
 802b0c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802b0c8:	687b      	ldr	r3, [r7, #4]
 802b0ca:	2200      	movs	r2, #0
 802b0cc:	701a      	strb	r2, [r3, #0]
      break;
 802b0ce:	e0a5      	b.n	802b21c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 802b0d0:	687b      	ldr	r3, [r7, #4]
 802b0d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 802b0d6:	4619      	mov	r1, r3
 802b0d8:	6878      	ldr	r0, [r7, #4]
 802b0da:	f000 f965 	bl	802b3a8 <USBH_Get_CfgDesc>
 802b0de:	4603      	mov	r3, r0
 802b0e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802b0e2:	7bbb      	ldrb	r3, [r7, #14]
 802b0e4:	2b00      	cmp	r3, #0
 802b0e6:	d103      	bne.n	802b0f0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 802b0e8:	687b      	ldr	r3, [r7, #4]
 802b0ea:	2205      	movs	r2, #5
 802b0ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802b0ee:	e097      	b.n	802b220 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802b0f0:	7bbb      	ldrb	r3, [r7, #14]
 802b0f2:	2b03      	cmp	r3, #3
 802b0f4:	f040 8094 	bne.w	802b220 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 802b0f8:	687b      	ldr	r3, [r7, #4]
 802b0fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802b0fe:	3301      	adds	r3, #1
 802b100:	b2da      	uxtb	r2, r3
 802b102:	687b      	ldr	r3, [r7, #4]
 802b104:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802b108:	687b      	ldr	r3, [r7, #4]
 802b10a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802b10e:	2b03      	cmp	r3, #3
 802b110:	d903      	bls.n	802b11a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 802b112:	687b      	ldr	r3, [r7, #4]
 802b114:	220d      	movs	r2, #13
 802b116:	701a      	strb	r2, [r3, #0]
      break;
 802b118:	e082      	b.n	802b220 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802b11a:	687b      	ldr	r3, [r7, #4]
 802b11c:	795b      	ldrb	r3, [r3, #5]
 802b11e:	4619      	mov	r1, r3
 802b120:	6878      	ldr	r0, [r7, #4]
 802b122:	f000 ff9f 	bl	802c064 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802b126:	687b      	ldr	r3, [r7, #4]
 802b128:	791b      	ldrb	r3, [r3, #4]
 802b12a:	4619      	mov	r1, r3
 802b12c:	6878      	ldr	r0, [r7, #4]
 802b12e:	f000 ff99 	bl	802c064 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802b132:	687b      	ldr	r3, [r7, #4]
 802b134:	2200      	movs	r2, #0
 802b136:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802b138:	687b      	ldr	r3, [r7, #4]
 802b13a:	2200      	movs	r2, #0
 802b13c:	701a      	strb	r2, [r3, #0]
      break;
 802b13e:	e06f      	b.n	802b220 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 802b140:	687b      	ldr	r3, [r7, #4]
 802b142:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 802b146:	2b00      	cmp	r3, #0
 802b148:	d019      	beq.n	802b17e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802b14a:	687b      	ldr	r3, [r7, #4]
 802b14c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 802b150:	687b      	ldr	r3, [r7, #4]
 802b152:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802b156:	23ff      	movs	r3, #255	; 0xff
 802b158:	6878      	ldr	r0, [r7, #4]
 802b15a:	f000 f949 	bl	802b3f0 <USBH_Get_StringDesc>
 802b15e:	4603      	mov	r3, r0
 802b160:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802b162:	7bbb      	ldrb	r3, [r7, #14]
 802b164:	2b00      	cmp	r3, #0
 802b166:	d103      	bne.n	802b170 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802b168:	687b      	ldr	r3, [r7, #4]
 802b16a:	2206      	movs	r2, #6
 802b16c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802b16e:	e059      	b.n	802b224 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802b170:	7bbb      	ldrb	r3, [r7, #14]
 802b172:	2b03      	cmp	r3, #3
 802b174:	d156      	bne.n	802b224 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802b176:	687b      	ldr	r3, [r7, #4]
 802b178:	2206      	movs	r2, #6
 802b17a:	705a      	strb	r2, [r3, #1]
      break;
 802b17c:	e052      	b.n	802b224 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802b17e:	687b      	ldr	r3, [r7, #4]
 802b180:	2206      	movs	r2, #6
 802b182:	705a      	strb	r2, [r3, #1]
      break;
 802b184:	e04e      	b.n	802b224 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 802b186:	687b      	ldr	r3, [r7, #4]
 802b188:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 802b18c:	2b00      	cmp	r3, #0
 802b18e:	d019      	beq.n	802b1c4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802b190:	687b      	ldr	r3, [r7, #4]
 802b192:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 802b196:	687b      	ldr	r3, [r7, #4]
 802b198:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802b19c:	23ff      	movs	r3, #255	; 0xff
 802b19e:	6878      	ldr	r0, [r7, #4]
 802b1a0:	f000 f926 	bl	802b3f0 <USBH_Get_StringDesc>
 802b1a4:	4603      	mov	r3, r0
 802b1a6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802b1a8:	7bbb      	ldrb	r3, [r7, #14]
 802b1aa:	2b00      	cmp	r3, #0
 802b1ac:	d103      	bne.n	802b1b6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802b1ae:	687b      	ldr	r3, [r7, #4]
 802b1b0:	2207      	movs	r2, #7
 802b1b2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802b1b4:	e038      	b.n	802b228 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802b1b6:	7bbb      	ldrb	r3, [r7, #14]
 802b1b8:	2b03      	cmp	r3, #3
 802b1ba:	d135      	bne.n	802b228 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802b1bc:	687b      	ldr	r3, [r7, #4]
 802b1be:	2207      	movs	r2, #7
 802b1c0:	705a      	strb	r2, [r3, #1]
      break;
 802b1c2:	e031      	b.n	802b228 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802b1c4:	687b      	ldr	r3, [r7, #4]
 802b1c6:	2207      	movs	r2, #7
 802b1c8:	705a      	strb	r2, [r3, #1]
      break;
 802b1ca:	e02d      	b.n	802b228 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 802b1cc:	687b      	ldr	r3, [r7, #4]
 802b1ce:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 802b1d2:	2b00      	cmp	r3, #0
 802b1d4:	d017      	beq.n	802b206 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802b1d6:	687b      	ldr	r3, [r7, #4]
 802b1d8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 802b1dc:	687b      	ldr	r3, [r7, #4]
 802b1de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802b1e2:	23ff      	movs	r3, #255	; 0xff
 802b1e4:	6878      	ldr	r0, [r7, #4]
 802b1e6:	f000 f903 	bl	802b3f0 <USBH_Get_StringDesc>
 802b1ea:	4603      	mov	r3, r0
 802b1ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802b1ee:	7bbb      	ldrb	r3, [r7, #14]
 802b1f0:	2b00      	cmp	r3, #0
 802b1f2:	d102      	bne.n	802b1fa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 802b1f4:	2300      	movs	r3, #0
 802b1f6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 802b1f8:	e018      	b.n	802b22c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802b1fa:	7bbb      	ldrb	r3, [r7, #14]
 802b1fc:	2b03      	cmp	r3, #3
 802b1fe:	d115      	bne.n	802b22c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 802b200:	2300      	movs	r3, #0
 802b202:	73fb      	strb	r3, [r7, #15]
      break;
 802b204:	e012      	b.n	802b22c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 802b206:	2300      	movs	r3, #0
 802b208:	73fb      	strb	r3, [r7, #15]
      break;
 802b20a:	e00f      	b.n	802b22c <USBH_HandleEnum+0x3bc>

    default:
      break;
 802b20c:	bf00      	nop
 802b20e:	e00e      	b.n	802b22e <USBH_HandleEnum+0x3be>
      break;
 802b210:	bf00      	nop
 802b212:	e00c      	b.n	802b22e <USBH_HandleEnum+0x3be>
      break;
 802b214:	bf00      	nop
 802b216:	e00a      	b.n	802b22e <USBH_HandleEnum+0x3be>
      break;
 802b218:	bf00      	nop
 802b21a:	e008      	b.n	802b22e <USBH_HandleEnum+0x3be>
      break;
 802b21c:	bf00      	nop
 802b21e:	e006      	b.n	802b22e <USBH_HandleEnum+0x3be>
      break;
 802b220:	bf00      	nop
 802b222:	e004      	b.n	802b22e <USBH_HandleEnum+0x3be>
      break;
 802b224:	bf00      	nop
 802b226:	e002      	b.n	802b22e <USBH_HandleEnum+0x3be>
      break;
 802b228:	bf00      	nop
 802b22a:	e000      	b.n	802b22e <USBH_HandleEnum+0x3be>
      break;
 802b22c:	bf00      	nop
  }
  return Status;
 802b22e:	7bfb      	ldrb	r3, [r7, #15]
}
 802b230:	4618      	mov	r0, r3
 802b232:	3710      	adds	r7, #16
 802b234:	46bd      	mov	sp, r7
 802b236:	bd80      	pop	{r7, pc}

0802b238 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 802b238:	b480      	push	{r7}
 802b23a:	b083      	sub	sp, #12
 802b23c:	af00      	add	r7, sp, #0
 802b23e:	6078      	str	r0, [r7, #4]
 802b240:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 802b242:	687b      	ldr	r3, [r7, #4]
 802b244:	683a      	ldr	r2, [r7, #0]
 802b246:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 802b24a:	bf00      	nop
 802b24c:	370c      	adds	r7, #12
 802b24e:	46bd      	mov	sp, r7
 802b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b254:	4770      	bx	lr

0802b256 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 802b256:	b580      	push	{r7, lr}
 802b258:	b082      	sub	sp, #8
 802b25a:	af00      	add	r7, sp, #0
 802b25c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 802b25e:	687b      	ldr	r3, [r7, #4]
 802b260:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802b264:	1c5a      	adds	r2, r3, #1
 802b266:	687b      	ldr	r3, [r7, #4]
 802b268:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 802b26c:	6878      	ldr	r0, [r7, #4]
 802b26e:	f000 f804 	bl	802b27a <USBH_HandleSof>
}
 802b272:	bf00      	nop
 802b274:	3708      	adds	r7, #8
 802b276:	46bd      	mov	sp, r7
 802b278:	bd80      	pop	{r7, pc}

0802b27a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 802b27a:	b580      	push	{r7, lr}
 802b27c:	b082      	sub	sp, #8
 802b27e:	af00      	add	r7, sp, #0
 802b280:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 802b282:	687b      	ldr	r3, [r7, #4]
 802b284:	781b      	ldrb	r3, [r3, #0]
 802b286:	b2db      	uxtb	r3, r3
 802b288:	2b0b      	cmp	r3, #11
 802b28a:	d10a      	bne.n	802b2a2 <USBH_HandleSof+0x28>
 802b28c:	687b      	ldr	r3, [r7, #4]
 802b28e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b292:	2b00      	cmp	r3, #0
 802b294:	d005      	beq.n	802b2a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 802b296:	687b      	ldr	r3, [r7, #4]
 802b298:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b29c:	699b      	ldr	r3, [r3, #24]
 802b29e:	6878      	ldr	r0, [r7, #4]
 802b2a0:	4798      	blx	r3
  }
}
 802b2a2:	bf00      	nop
 802b2a4:	3708      	adds	r7, #8
 802b2a6:	46bd      	mov	sp, r7
 802b2a8:	bd80      	pop	{r7, pc}

0802b2aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 802b2aa:	b480      	push	{r7}
 802b2ac:	b083      	sub	sp, #12
 802b2ae:	af00      	add	r7, sp, #0
 802b2b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 802b2b2:	687b      	ldr	r3, [r7, #4]
 802b2b4:	2201      	movs	r2, #1
 802b2b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 802b2ba:	bf00      	nop
}
 802b2bc:	370c      	adds	r7, #12
 802b2be:	46bd      	mov	sp, r7
 802b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b2c4:	4770      	bx	lr

0802b2c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 802b2c6:	b480      	push	{r7}
 802b2c8:	b083      	sub	sp, #12
 802b2ca:	af00      	add	r7, sp, #0
 802b2cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 802b2ce:	687b      	ldr	r3, [r7, #4]
 802b2d0:	2200      	movs	r2, #0
 802b2d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 802b2d6:	bf00      	nop
}
 802b2d8:	370c      	adds	r7, #12
 802b2da:	46bd      	mov	sp, r7
 802b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b2e0:	4770      	bx	lr

0802b2e2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 802b2e2:	b480      	push	{r7}
 802b2e4:	b083      	sub	sp, #12
 802b2e6:	af00      	add	r7, sp, #0
 802b2e8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 802b2ea:	687b      	ldr	r3, [r7, #4]
 802b2ec:	2201      	movs	r2, #1
 802b2ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802b2f2:	687b      	ldr	r3, [r7, #4]
 802b2f4:	2200      	movs	r2, #0
 802b2f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802b2fa:	687b      	ldr	r3, [r7, #4]
 802b2fc:	2200      	movs	r2, #0
 802b2fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802b302:	2300      	movs	r3, #0
}
 802b304:	4618      	mov	r0, r3
 802b306:	370c      	adds	r7, #12
 802b308:	46bd      	mov	sp, r7
 802b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b30e:	4770      	bx	lr

0802b310 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 802b310:	b580      	push	{r7, lr}
 802b312:	b082      	sub	sp, #8
 802b314:	af00      	add	r7, sp, #0
 802b316:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 802b318:	687b      	ldr	r3, [r7, #4]
 802b31a:	2201      	movs	r2, #1
 802b31c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 802b320:	687b      	ldr	r3, [r7, #4]
 802b322:	2200      	movs	r2, #0
 802b324:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 802b328:	687b      	ldr	r3, [r7, #4]
 802b32a:	2200      	movs	r2, #0
 802b32c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 802b330:	6878      	ldr	r0, [r7, #4]
 802b332:	f001 f84a 	bl	802c3ca <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802b336:	687b      	ldr	r3, [r7, #4]
 802b338:	791b      	ldrb	r3, [r3, #4]
 802b33a:	4619      	mov	r1, r3
 802b33c:	6878      	ldr	r0, [r7, #4]
 802b33e:	f000 fe91 	bl	802c064 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802b342:	687b      	ldr	r3, [r7, #4]
 802b344:	795b      	ldrb	r3, [r3, #5]
 802b346:	4619      	mov	r1, r3
 802b348:	6878      	ldr	r0, [r7, #4]
 802b34a:	f000 fe8b 	bl	802c064 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802b34e:	2300      	movs	r3, #0
}
 802b350:	4618      	mov	r0, r3
 802b352:	3708      	adds	r7, #8
 802b354:	46bd      	mov	sp, r7
 802b356:	bd80      	pop	{r7, pc}

0802b358 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 802b358:	b580      	push	{r7, lr}
 802b35a:	b086      	sub	sp, #24
 802b35c:	af02      	add	r7, sp, #8
 802b35e:	6078      	str	r0, [r7, #4]
 802b360:	460b      	mov	r3, r1
 802b362:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 802b364:	687b      	ldr	r3, [r7, #4]
 802b366:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802b36a:	78fb      	ldrb	r3, [r7, #3]
 802b36c:	b29b      	uxth	r3, r3
 802b36e:	9300      	str	r3, [sp, #0]
 802b370:	4613      	mov	r3, r2
 802b372:	f44f 7280 	mov.w	r2, #256	; 0x100
 802b376:	2100      	movs	r1, #0
 802b378:	6878      	ldr	r0, [r7, #4]
 802b37a:	f000 f864 	bl	802b446 <USBH_GetDescriptor>
 802b37e:	4603      	mov	r3, r0
 802b380:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 802b382:	7bfb      	ldrb	r3, [r7, #15]
 802b384:	2b00      	cmp	r3, #0
 802b386:	d10a      	bne.n	802b39e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 802b388:	687b      	ldr	r3, [r7, #4]
 802b38a:	f203 3026 	addw	r0, r3, #806	; 0x326
 802b38e:	687b      	ldr	r3, [r7, #4]
 802b390:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802b394:	78fa      	ldrb	r2, [r7, #3]
 802b396:	b292      	uxth	r2, r2
 802b398:	4619      	mov	r1, r3
 802b39a:	f000 f918 	bl	802b5ce <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 802b39e:	7bfb      	ldrb	r3, [r7, #15]
}
 802b3a0:	4618      	mov	r0, r3
 802b3a2:	3710      	adds	r7, #16
 802b3a4:	46bd      	mov	sp, r7
 802b3a6:	bd80      	pop	{r7, pc}

0802b3a8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 802b3a8:	b580      	push	{r7, lr}
 802b3aa:	b086      	sub	sp, #24
 802b3ac:	af02      	add	r7, sp, #8
 802b3ae:	6078      	str	r0, [r7, #4]
 802b3b0:	460b      	mov	r3, r1
 802b3b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 802b3b4:	687b      	ldr	r3, [r7, #4]
 802b3b6:	331c      	adds	r3, #28
 802b3b8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 802b3ba:	887b      	ldrh	r3, [r7, #2]
 802b3bc:	9300      	str	r3, [sp, #0]
 802b3be:	68bb      	ldr	r3, [r7, #8]
 802b3c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 802b3c4:	2100      	movs	r1, #0
 802b3c6:	6878      	ldr	r0, [r7, #4]
 802b3c8:	f000 f83d 	bl	802b446 <USBH_GetDescriptor>
 802b3cc:	4603      	mov	r3, r0
 802b3ce:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 802b3d0:	7bfb      	ldrb	r3, [r7, #15]
 802b3d2:	2b00      	cmp	r3, #0
 802b3d4:	d107      	bne.n	802b3e6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 802b3d6:	887b      	ldrh	r3, [r7, #2]
 802b3d8:	461a      	mov	r2, r3
 802b3da:	68b9      	ldr	r1, [r7, #8]
 802b3dc:	6878      	ldr	r0, [r7, #4]
 802b3de:	f000 f987 	bl	802b6f0 <USBH_ParseCfgDesc>
 802b3e2:	4603      	mov	r3, r0
 802b3e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802b3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 802b3e8:	4618      	mov	r0, r3
 802b3ea:	3710      	adds	r7, #16
 802b3ec:	46bd      	mov	sp, r7
 802b3ee:	bd80      	pop	{r7, pc}

0802b3f0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 802b3f0:	b580      	push	{r7, lr}
 802b3f2:	b088      	sub	sp, #32
 802b3f4:	af02      	add	r7, sp, #8
 802b3f6:	60f8      	str	r0, [r7, #12]
 802b3f8:	607a      	str	r2, [r7, #4]
 802b3fa:	461a      	mov	r2, r3
 802b3fc:	460b      	mov	r3, r1
 802b3fe:	72fb      	strb	r3, [r7, #11]
 802b400:	4613      	mov	r3, r2
 802b402:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 802b404:	7afb      	ldrb	r3, [r7, #11]
 802b406:	b29b      	uxth	r3, r3
 802b408:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802b40c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 802b40e:	68fb      	ldr	r3, [r7, #12]
 802b410:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802b414:	893b      	ldrh	r3, [r7, #8]
 802b416:	9300      	str	r3, [sp, #0]
 802b418:	460b      	mov	r3, r1
 802b41a:	2100      	movs	r1, #0
 802b41c:	68f8      	ldr	r0, [r7, #12]
 802b41e:	f000 f812 	bl	802b446 <USBH_GetDescriptor>
 802b422:	4603      	mov	r3, r0
 802b424:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 802b426:	7dfb      	ldrb	r3, [r7, #23]
 802b428:	2b00      	cmp	r3, #0
 802b42a:	d107      	bne.n	802b43c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 802b42c:	68fb      	ldr	r3, [r7, #12]
 802b42e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802b432:	893a      	ldrh	r2, [r7, #8]
 802b434:	6879      	ldr	r1, [r7, #4]
 802b436:	4618      	mov	r0, r3
 802b438:	f000 fb24 	bl	802ba84 <USBH_ParseStringDesc>
  }

  return status;
 802b43c:	7dfb      	ldrb	r3, [r7, #23]
}
 802b43e:	4618      	mov	r0, r3
 802b440:	3718      	adds	r7, #24
 802b442:	46bd      	mov	sp, r7
 802b444:	bd80      	pop	{r7, pc}

0802b446 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 802b446:	b580      	push	{r7, lr}
 802b448:	b084      	sub	sp, #16
 802b44a:	af00      	add	r7, sp, #0
 802b44c:	60f8      	str	r0, [r7, #12]
 802b44e:	607b      	str	r3, [r7, #4]
 802b450:	460b      	mov	r3, r1
 802b452:	72fb      	strb	r3, [r7, #11]
 802b454:	4613      	mov	r3, r2
 802b456:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 802b458:	68fb      	ldr	r3, [r7, #12]
 802b45a:	789b      	ldrb	r3, [r3, #2]
 802b45c:	2b01      	cmp	r3, #1
 802b45e:	d11c      	bne.n	802b49a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 802b460:	7afb      	ldrb	r3, [r7, #11]
 802b462:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802b466:	b2da      	uxtb	r2, r3
 802b468:	68fb      	ldr	r3, [r7, #12]
 802b46a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 802b46c:	68fb      	ldr	r3, [r7, #12]
 802b46e:	2206      	movs	r2, #6
 802b470:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 802b472:	68fb      	ldr	r3, [r7, #12]
 802b474:	893a      	ldrh	r2, [r7, #8]
 802b476:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 802b478:	893b      	ldrh	r3, [r7, #8]
 802b47a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b47e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802b482:	d104      	bne.n	802b48e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 802b484:	68fb      	ldr	r3, [r7, #12]
 802b486:	f240 4209 	movw	r2, #1033	; 0x409
 802b48a:	829a      	strh	r2, [r3, #20]
 802b48c:	e002      	b.n	802b494 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 802b48e:	68fb      	ldr	r3, [r7, #12]
 802b490:	2200      	movs	r2, #0
 802b492:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 802b494:	68fb      	ldr	r3, [r7, #12]
 802b496:	8b3a      	ldrh	r2, [r7, #24]
 802b498:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 802b49a:	8b3b      	ldrh	r3, [r7, #24]
 802b49c:	461a      	mov	r2, r3
 802b49e:	6879      	ldr	r1, [r7, #4]
 802b4a0:	68f8      	ldr	r0, [r7, #12]
 802b4a2:	f000 fb3d 	bl	802bb20 <USBH_CtlReq>
 802b4a6:	4603      	mov	r3, r0
}
 802b4a8:	4618      	mov	r0, r3
 802b4aa:	3710      	adds	r7, #16
 802b4ac:	46bd      	mov	sp, r7
 802b4ae:	bd80      	pop	{r7, pc}

0802b4b0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 802b4b0:	b580      	push	{r7, lr}
 802b4b2:	b082      	sub	sp, #8
 802b4b4:	af00      	add	r7, sp, #0
 802b4b6:	6078      	str	r0, [r7, #4]
 802b4b8:	460b      	mov	r3, r1
 802b4ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802b4bc:	687b      	ldr	r3, [r7, #4]
 802b4be:	789b      	ldrb	r3, [r3, #2]
 802b4c0:	2b01      	cmp	r3, #1
 802b4c2:	d10f      	bne.n	802b4e4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 802b4c4:	687b      	ldr	r3, [r7, #4]
 802b4c6:	2200      	movs	r2, #0
 802b4c8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 802b4ca:	687b      	ldr	r3, [r7, #4]
 802b4cc:	2205      	movs	r2, #5
 802b4ce:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 802b4d0:	78fb      	ldrb	r3, [r7, #3]
 802b4d2:	b29a      	uxth	r2, r3
 802b4d4:	687b      	ldr	r3, [r7, #4]
 802b4d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802b4d8:	687b      	ldr	r3, [r7, #4]
 802b4da:	2200      	movs	r2, #0
 802b4dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802b4de:	687b      	ldr	r3, [r7, #4]
 802b4e0:	2200      	movs	r2, #0
 802b4e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802b4e4:	2200      	movs	r2, #0
 802b4e6:	2100      	movs	r1, #0
 802b4e8:	6878      	ldr	r0, [r7, #4]
 802b4ea:	f000 fb19 	bl	802bb20 <USBH_CtlReq>
 802b4ee:	4603      	mov	r3, r0
}
 802b4f0:	4618      	mov	r0, r3
 802b4f2:	3708      	adds	r7, #8
 802b4f4:	46bd      	mov	sp, r7
 802b4f6:	bd80      	pop	{r7, pc}

0802b4f8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 802b4f8:	b580      	push	{r7, lr}
 802b4fa:	b082      	sub	sp, #8
 802b4fc:	af00      	add	r7, sp, #0
 802b4fe:	6078      	str	r0, [r7, #4]
 802b500:	460b      	mov	r3, r1
 802b502:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 802b504:	687b      	ldr	r3, [r7, #4]
 802b506:	789b      	ldrb	r3, [r3, #2]
 802b508:	2b01      	cmp	r3, #1
 802b50a:	d10e      	bne.n	802b52a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802b50c:	687b      	ldr	r3, [r7, #4]
 802b50e:	2200      	movs	r2, #0
 802b510:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 802b512:	687b      	ldr	r3, [r7, #4]
 802b514:	2209      	movs	r2, #9
 802b516:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 802b518:	687b      	ldr	r3, [r7, #4]
 802b51a:	887a      	ldrh	r2, [r7, #2]
 802b51c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802b51e:	687b      	ldr	r3, [r7, #4]
 802b520:	2200      	movs	r2, #0
 802b522:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802b524:	687b      	ldr	r3, [r7, #4]
 802b526:	2200      	movs	r2, #0
 802b528:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802b52a:	2200      	movs	r2, #0
 802b52c:	2100      	movs	r1, #0
 802b52e:	6878      	ldr	r0, [r7, #4]
 802b530:	f000 faf6 	bl	802bb20 <USBH_CtlReq>
 802b534:	4603      	mov	r3, r0
}
 802b536:	4618      	mov	r0, r3
 802b538:	3708      	adds	r7, #8
 802b53a:	46bd      	mov	sp, r7
 802b53c:	bd80      	pop	{r7, pc}

0802b53e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 802b53e:	b580      	push	{r7, lr}
 802b540:	b082      	sub	sp, #8
 802b542:	af00      	add	r7, sp, #0
 802b544:	6078      	str	r0, [r7, #4]
 802b546:	460b      	mov	r3, r1
 802b548:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802b54a:	687b      	ldr	r3, [r7, #4]
 802b54c:	789b      	ldrb	r3, [r3, #2]
 802b54e:	2b01      	cmp	r3, #1
 802b550:	d10f      	bne.n	802b572 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802b552:	687b      	ldr	r3, [r7, #4]
 802b554:	2200      	movs	r2, #0
 802b556:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 802b558:	687b      	ldr	r3, [r7, #4]
 802b55a:	2203      	movs	r2, #3
 802b55c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 802b55e:	78fb      	ldrb	r3, [r7, #3]
 802b560:	b29a      	uxth	r2, r3
 802b562:	687b      	ldr	r3, [r7, #4]
 802b564:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802b566:	687b      	ldr	r3, [r7, #4]
 802b568:	2200      	movs	r2, #0
 802b56a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802b56c:	687b      	ldr	r3, [r7, #4]
 802b56e:	2200      	movs	r2, #0
 802b570:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802b572:	2200      	movs	r2, #0
 802b574:	2100      	movs	r1, #0
 802b576:	6878      	ldr	r0, [r7, #4]
 802b578:	f000 fad2 	bl	802bb20 <USBH_CtlReq>
 802b57c:	4603      	mov	r3, r0
}
 802b57e:	4618      	mov	r0, r3
 802b580:	3708      	adds	r7, #8
 802b582:	46bd      	mov	sp, r7
 802b584:	bd80      	pop	{r7, pc}

0802b586 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 802b586:	b580      	push	{r7, lr}
 802b588:	b082      	sub	sp, #8
 802b58a:	af00      	add	r7, sp, #0
 802b58c:	6078      	str	r0, [r7, #4]
 802b58e:	460b      	mov	r3, r1
 802b590:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802b592:	687b      	ldr	r3, [r7, #4]
 802b594:	789b      	ldrb	r3, [r3, #2]
 802b596:	2b01      	cmp	r3, #1
 802b598:	d10f      	bne.n	802b5ba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 802b59a:	687b      	ldr	r3, [r7, #4]
 802b59c:	2202      	movs	r2, #2
 802b59e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 802b5a0:	687b      	ldr	r3, [r7, #4]
 802b5a2:	2201      	movs	r2, #1
 802b5a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 802b5a6:	687b      	ldr	r3, [r7, #4]
 802b5a8:	2200      	movs	r2, #0
 802b5aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 802b5ac:	78fb      	ldrb	r3, [r7, #3]
 802b5ae:	b29a      	uxth	r2, r3
 802b5b0:	687b      	ldr	r3, [r7, #4]
 802b5b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802b5b4:	687b      	ldr	r3, [r7, #4]
 802b5b6:	2200      	movs	r2, #0
 802b5b8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 802b5ba:	2200      	movs	r2, #0
 802b5bc:	2100      	movs	r1, #0
 802b5be:	6878      	ldr	r0, [r7, #4]
 802b5c0:	f000 faae 	bl	802bb20 <USBH_CtlReq>
 802b5c4:	4603      	mov	r3, r0
}
 802b5c6:	4618      	mov	r0, r3
 802b5c8:	3708      	adds	r7, #8
 802b5ca:	46bd      	mov	sp, r7
 802b5cc:	bd80      	pop	{r7, pc}

0802b5ce <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 802b5ce:	b480      	push	{r7}
 802b5d0:	b085      	sub	sp, #20
 802b5d2:	af00      	add	r7, sp, #0
 802b5d4:	60f8      	str	r0, [r7, #12]
 802b5d6:	60b9      	str	r1, [r7, #8]
 802b5d8:	4613      	mov	r3, r2
 802b5da:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 802b5dc:	68bb      	ldr	r3, [r7, #8]
 802b5de:	781a      	ldrb	r2, [r3, #0]
 802b5e0:	68fb      	ldr	r3, [r7, #12]
 802b5e2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 802b5e4:	68bb      	ldr	r3, [r7, #8]
 802b5e6:	785a      	ldrb	r2, [r3, #1]
 802b5e8:	68fb      	ldr	r3, [r7, #12]
 802b5ea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 802b5ec:	68bb      	ldr	r3, [r7, #8]
 802b5ee:	3302      	adds	r3, #2
 802b5f0:	781b      	ldrb	r3, [r3, #0]
 802b5f2:	b29a      	uxth	r2, r3
 802b5f4:	68bb      	ldr	r3, [r7, #8]
 802b5f6:	3303      	adds	r3, #3
 802b5f8:	781b      	ldrb	r3, [r3, #0]
 802b5fa:	b29b      	uxth	r3, r3
 802b5fc:	021b      	lsls	r3, r3, #8
 802b5fe:	b29b      	uxth	r3, r3
 802b600:	4313      	orrs	r3, r2
 802b602:	b29a      	uxth	r2, r3
 802b604:	68fb      	ldr	r3, [r7, #12]
 802b606:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 802b608:	68bb      	ldr	r3, [r7, #8]
 802b60a:	791a      	ldrb	r2, [r3, #4]
 802b60c:	68fb      	ldr	r3, [r7, #12]
 802b60e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 802b610:	68bb      	ldr	r3, [r7, #8]
 802b612:	795a      	ldrb	r2, [r3, #5]
 802b614:	68fb      	ldr	r3, [r7, #12]
 802b616:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 802b618:	68bb      	ldr	r3, [r7, #8]
 802b61a:	799a      	ldrb	r2, [r3, #6]
 802b61c:	68fb      	ldr	r3, [r7, #12]
 802b61e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 802b620:	68bb      	ldr	r3, [r7, #8]
 802b622:	79da      	ldrb	r2, [r3, #7]
 802b624:	68fb      	ldr	r3, [r7, #12]
 802b626:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 802b628:	68fb      	ldr	r3, [r7, #12]
 802b62a:	79db      	ldrb	r3, [r3, #7]
 802b62c:	2b20      	cmp	r3, #32
 802b62e:	dc11      	bgt.n	802b654 <USBH_ParseDevDesc+0x86>
 802b630:	2b08      	cmp	r3, #8
 802b632:	db16      	blt.n	802b662 <USBH_ParseDevDesc+0x94>
 802b634:	3b08      	subs	r3, #8
 802b636:	2201      	movs	r2, #1
 802b638:	fa02 f303 	lsl.w	r3, r2, r3
 802b63c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 802b640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802b644:	2b00      	cmp	r3, #0
 802b646:	bf14      	ite	ne
 802b648:	2301      	movne	r3, #1
 802b64a:	2300      	moveq	r3, #0
 802b64c:	b2db      	uxtb	r3, r3
 802b64e:	2b00      	cmp	r3, #0
 802b650:	d102      	bne.n	802b658 <USBH_ParseDevDesc+0x8a>
 802b652:	e006      	b.n	802b662 <USBH_ParseDevDesc+0x94>
 802b654:	2b40      	cmp	r3, #64	; 0x40
 802b656:	d104      	bne.n	802b662 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 802b658:	68fb      	ldr	r3, [r7, #12]
 802b65a:	79da      	ldrb	r2, [r3, #7]
 802b65c:	68fb      	ldr	r3, [r7, #12]
 802b65e:	71da      	strb	r2, [r3, #7]
      break;
 802b660:	e003      	b.n	802b66a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 802b662:	68fb      	ldr	r3, [r7, #12]
 802b664:	2240      	movs	r2, #64	; 0x40
 802b666:	71da      	strb	r2, [r3, #7]
      break;
 802b668:	bf00      	nop
  }

  if (length > 8U)
 802b66a:	88fb      	ldrh	r3, [r7, #6]
 802b66c:	2b08      	cmp	r3, #8
 802b66e:	d939      	bls.n	802b6e4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 802b670:	68bb      	ldr	r3, [r7, #8]
 802b672:	3308      	adds	r3, #8
 802b674:	781b      	ldrb	r3, [r3, #0]
 802b676:	b29a      	uxth	r2, r3
 802b678:	68bb      	ldr	r3, [r7, #8]
 802b67a:	3309      	adds	r3, #9
 802b67c:	781b      	ldrb	r3, [r3, #0]
 802b67e:	b29b      	uxth	r3, r3
 802b680:	021b      	lsls	r3, r3, #8
 802b682:	b29b      	uxth	r3, r3
 802b684:	4313      	orrs	r3, r2
 802b686:	b29a      	uxth	r2, r3
 802b688:	68fb      	ldr	r3, [r7, #12]
 802b68a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 802b68c:	68bb      	ldr	r3, [r7, #8]
 802b68e:	330a      	adds	r3, #10
 802b690:	781b      	ldrb	r3, [r3, #0]
 802b692:	b29a      	uxth	r2, r3
 802b694:	68bb      	ldr	r3, [r7, #8]
 802b696:	330b      	adds	r3, #11
 802b698:	781b      	ldrb	r3, [r3, #0]
 802b69a:	b29b      	uxth	r3, r3
 802b69c:	021b      	lsls	r3, r3, #8
 802b69e:	b29b      	uxth	r3, r3
 802b6a0:	4313      	orrs	r3, r2
 802b6a2:	b29a      	uxth	r2, r3
 802b6a4:	68fb      	ldr	r3, [r7, #12]
 802b6a6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 802b6a8:	68bb      	ldr	r3, [r7, #8]
 802b6aa:	330c      	adds	r3, #12
 802b6ac:	781b      	ldrb	r3, [r3, #0]
 802b6ae:	b29a      	uxth	r2, r3
 802b6b0:	68bb      	ldr	r3, [r7, #8]
 802b6b2:	330d      	adds	r3, #13
 802b6b4:	781b      	ldrb	r3, [r3, #0]
 802b6b6:	b29b      	uxth	r3, r3
 802b6b8:	021b      	lsls	r3, r3, #8
 802b6ba:	b29b      	uxth	r3, r3
 802b6bc:	4313      	orrs	r3, r2
 802b6be:	b29a      	uxth	r2, r3
 802b6c0:	68fb      	ldr	r3, [r7, #12]
 802b6c2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 802b6c4:	68bb      	ldr	r3, [r7, #8]
 802b6c6:	7b9a      	ldrb	r2, [r3, #14]
 802b6c8:	68fb      	ldr	r3, [r7, #12]
 802b6ca:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 802b6cc:	68bb      	ldr	r3, [r7, #8]
 802b6ce:	7bda      	ldrb	r2, [r3, #15]
 802b6d0:	68fb      	ldr	r3, [r7, #12]
 802b6d2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 802b6d4:	68bb      	ldr	r3, [r7, #8]
 802b6d6:	7c1a      	ldrb	r2, [r3, #16]
 802b6d8:	68fb      	ldr	r3, [r7, #12]
 802b6da:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 802b6dc:	68bb      	ldr	r3, [r7, #8]
 802b6de:	7c5a      	ldrb	r2, [r3, #17]
 802b6e0:	68fb      	ldr	r3, [r7, #12]
 802b6e2:	745a      	strb	r2, [r3, #17]
  }
}
 802b6e4:	bf00      	nop
 802b6e6:	3714      	adds	r7, #20
 802b6e8:	46bd      	mov	sp, r7
 802b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b6ee:	4770      	bx	lr

0802b6f0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 802b6f0:	b580      	push	{r7, lr}
 802b6f2:	b08c      	sub	sp, #48	; 0x30
 802b6f4:	af00      	add	r7, sp, #0
 802b6f6:	60f8      	str	r0, [r7, #12]
 802b6f8:	60b9      	str	r1, [r7, #8]
 802b6fa:	4613      	mov	r3, r2
 802b6fc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 802b6fe:	68fb      	ldr	r3, [r7, #12]
 802b700:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802b704:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 802b706:	2300      	movs	r3, #0
 802b708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 802b70c:	68bb      	ldr	r3, [r7, #8]
 802b70e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 802b710:	2300      	movs	r3, #0
 802b712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 802b716:	2300      	movs	r3, #0
 802b718:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 802b71c:	68bb      	ldr	r3, [r7, #8]
 802b71e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 802b720:	68bb      	ldr	r3, [r7, #8]
 802b722:	781a      	ldrb	r2, [r3, #0]
 802b724:	6a3b      	ldr	r3, [r7, #32]
 802b726:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 802b728:	68bb      	ldr	r3, [r7, #8]
 802b72a:	785a      	ldrb	r2, [r3, #1]
 802b72c:	6a3b      	ldr	r3, [r7, #32]
 802b72e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 802b730:	68bb      	ldr	r3, [r7, #8]
 802b732:	3302      	adds	r3, #2
 802b734:	781b      	ldrb	r3, [r3, #0]
 802b736:	b29a      	uxth	r2, r3
 802b738:	68bb      	ldr	r3, [r7, #8]
 802b73a:	3303      	adds	r3, #3
 802b73c:	781b      	ldrb	r3, [r3, #0]
 802b73e:	b29b      	uxth	r3, r3
 802b740:	021b      	lsls	r3, r3, #8
 802b742:	b29b      	uxth	r3, r3
 802b744:	4313      	orrs	r3, r2
 802b746:	b29b      	uxth	r3, r3
 802b748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802b74c:	bf28      	it	cs
 802b74e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 802b752:	b29a      	uxth	r2, r3
 802b754:	6a3b      	ldr	r3, [r7, #32]
 802b756:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 802b758:	68bb      	ldr	r3, [r7, #8]
 802b75a:	791a      	ldrb	r2, [r3, #4]
 802b75c:	6a3b      	ldr	r3, [r7, #32]
 802b75e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 802b760:	68bb      	ldr	r3, [r7, #8]
 802b762:	795a      	ldrb	r2, [r3, #5]
 802b764:	6a3b      	ldr	r3, [r7, #32]
 802b766:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 802b768:	68bb      	ldr	r3, [r7, #8]
 802b76a:	799a      	ldrb	r2, [r3, #6]
 802b76c:	6a3b      	ldr	r3, [r7, #32]
 802b76e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 802b770:	68bb      	ldr	r3, [r7, #8]
 802b772:	79da      	ldrb	r2, [r3, #7]
 802b774:	6a3b      	ldr	r3, [r7, #32]
 802b776:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 802b778:	68bb      	ldr	r3, [r7, #8]
 802b77a:	7a1a      	ldrb	r2, [r3, #8]
 802b77c:	6a3b      	ldr	r3, [r7, #32]
 802b77e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 802b780:	6a3b      	ldr	r3, [r7, #32]
 802b782:	781b      	ldrb	r3, [r3, #0]
 802b784:	2b09      	cmp	r3, #9
 802b786:	d002      	beq.n	802b78e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 802b788:	6a3b      	ldr	r3, [r7, #32]
 802b78a:	2209      	movs	r2, #9
 802b78c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 802b78e:	88fb      	ldrh	r3, [r7, #6]
 802b790:	2b09      	cmp	r3, #9
 802b792:	f240 809d 	bls.w	802b8d0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 802b796:	2309      	movs	r3, #9
 802b798:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 802b79a:	2300      	movs	r3, #0
 802b79c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802b79e:	e081      	b.n	802b8a4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802b7a0:	f107 0316 	add.w	r3, r7, #22
 802b7a4:	4619      	mov	r1, r3
 802b7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802b7a8:	f000 f99f 	bl	802baea <USBH_GetNextDesc>
 802b7ac:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 802b7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b7b0:	785b      	ldrb	r3, [r3, #1]
 802b7b2:	2b04      	cmp	r3, #4
 802b7b4:	d176      	bne.n	802b8a4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 802b7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b7b8:	781b      	ldrb	r3, [r3, #0]
 802b7ba:	2b09      	cmp	r3, #9
 802b7bc:	d002      	beq.n	802b7c4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 802b7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b7c0:	2209      	movs	r2, #9
 802b7c2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 802b7c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802b7c8:	221a      	movs	r2, #26
 802b7ca:	fb02 f303 	mul.w	r3, r2, r3
 802b7ce:	3308      	adds	r3, #8
 802b7d0:	6a3a      	ldr	r2, [r7, #32]
 802b7d2:	4413      	add	r3, r2
 802b7d4:	3302      	adds	r3, #2
 802b7d6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 802b7d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802b7da:	69f8      	ldr	r0, [r7, #28]
 802b7dc:	f000 f87e 	bl	802b8dc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 802b7e0:	2300      	movs	r3, #0
 802b7e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 802b7e6:	2300      	movs	r3, #0
 802b7e8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802b7ea:	e043      	b.n	802b874 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802b7ec:	f107 0316 	add.w	r3, r7, #22
 802b7f0:	4619      	mov	r1, r3
 802b7f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802b7f4:	f000 f979 	bl	802baea <USBH_GetNextDesc>
 802b7f8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802b7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b7fc:	785b      	ldrb	r3, [r3, #1]
 802b7fe:	2b05      	cmp	r3, #5
 802b800:	d138      	bne.n	802b874 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 802b802:	69fb      	ldr	r3, [r7, #28]
 802b804:	795b      	ldrb	r3, [r3, #5]
 802b806:	2b01      	cmp	r3, #1
 802b808:	d10f      	bne.n	802b82a <USBH_ParseCfgDesc+0x13a>
 802b80a:	69fb      	ldr	r3, [r7, #28]
 802b80c:	799b      	ldrb	r3, [r3, #6]
 802b80e:	2b02      	cmp	r3, #2
 802b810:	d10b      	bne.n	802b82a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802b812:	69fb      	ldr	r3, [r7, #28]
 802b814:	79db      	ldrb	r3, [r3, #7]
 802b816:	2b00      	cmp	r3, #0
 802b818:	d10f      	bne.n	802b83a <USBH_ParseCfgDesc+0x14a>
 802b81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b81c:	781b      	ldrb	r3, [r3, #0]
 802b81e:	2b09      	cmp	r3, #9
 802b820:	d00b      	beq.n	802b83a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 802b822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b824:	2209      	movs	r2, #9
 802b826:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802b828:	e007      	b.n	802b83a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 802b82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b82c:	781b      	ldrb	r3, [r3, #0]
 802b82e:	2b07      	cmp	r3, #7
 802b830:	d004      	beq.n	802b83c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 802b832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b834:	2207      	movs	r2, #7
 802b836:	701a      	strb	r2, [r3, #0]
 802b838:	e000      	b.n	802b83c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802b83a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 802b83c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802b840:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802b844:	3201      	adds	r2, #1
 802b846:	00d2      	lsls	r2, r2, #3
 802b848:	211a      	movs	r1, #26
 802b84a:	fb01 f303 	mul.w	r3, r1, r3
 802b84e:	4413      	add	r3, r2
 802b850:	3308      	adds	r3, #8
 802b852:	6a3a      	ldr	r2, [r7, #32]
 802b854:	4413      	add	r3, r2
 802b856:	3304      	adds	r3, #4
 802b858:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 802b85a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802b85c:	69b9      	ldr	r1, [r7, #24]
 802b85e:	68f8      	ldr	r0, [r7, #12]
 802b860:	f000 f86b 	bl	802b93a <USBH_ParseEPDesc>
 802b864:	4603      	mov	r3, r0
 802b866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 802b86a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802b86e:	3301      	adds	r3, #1
 802b870:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802b874:	69fb      	ldr	r3, [r7, #28]
 802b876:	791b      	ldrb	r3, [r3, #4]
 802b878:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802b87c:	429a      	cmp	r2, r3
 802b87e:	d204      	bcs.n	802b88a <USBH_ParseCfgDesc+0x19a>
 802b880:	6a3b      	ldr	r3, [r7, #32]
 802b882:	885a      	ldrh	r2, [r3, #2]
 802b884:	8afb      	ldrh	r3, [r7, #22]
 802b886:	429a      	cmp	r2, r3
 802b888:	d8b0      	bhi.n	802b7ec <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 802b88a:	69fb      	ldr	r3, [r7, #28]
 802b88c:	791b      	ldrb	r3, [r3, #4]
 802b88e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802b892:	429a      	cmp	r2, r3
 802b894:	d201      	bcs.n	802b89a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 802b896:	2303      	movs	r3, #3
 802b898:	e01c      	b.n	802b8d4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 802b89a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802b89e:	3301      	adds	r3, #1
 802b8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802b8a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802b8a8:	2b01      	cmp	r3, #1
 802b8aa:	d805      	bhi.n	802b8b8 <USBH_ParseCfgDesc+0x1c8>
 802b8ac:	6a3b      	ldr	r3, [r7, #32]
 802b8ae:	885a      	ldrh	r2, [r3, #2]
 802b8b0:	8afb      	ldrh	r3, [r7, #22]
 802b8b2:	429a      	cmp	r2, r3
 802b8b4:	f63f af74 	bhi.w	802b7a0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 802b8b8:	6a3b      	ldr	r3, [r7, #32]
 802b8ba:	791b      	ldrb	r3, [r3, #4]
 802b8bc:	2b02      	cmp	r3, #2
 802b8be:	bf28      	it	cs
 802b8c0:	2302      	movcs	r3, #2
 802b8c2:	b2db      	uxtb	r3, r3
 802b8c4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802b8c8:	429a      	cmp	r2, r3
 802b8ca:	d201      	bcs.n	802b8d0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 802b8cc:	2303      	movs	r3, #3
 802b8ce:	e001      	b.n	802b8d4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 802b8d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802b8d4:	4618      	mov	r0, r3
 802b8d6:	3730      	adds	r7, #48	; 0x30
 802b8d8:	46bd      	mov	sp, r7
 802b8da:	bd80      	pop	{r7, pc}

0802b8dc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 802b8dc:	b480      	push	{r7}
 802b8de:	b083      	sub	sp, #12
 802b8e0:	af00      	add	r7, sp, #0
 802b8e2:	6078      	str	r0, [r7, #4]
 802b8e4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 802b8e6:	683b      	ldr	r3, [r7, #0]
 802b8e8:	781a      	ldrb	r2, [r3, #0]
 802b8ea:	687b      	ldr	r3, [r7, #4]
 802b8ec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 802b8ee:	683b      	ldr	r3, [r7, #0]
 802b8f0:	785a      	ldrb	r2, [r3, #1]
 802b8f2:	687b      	ldr	r3, [r7, #4]
 802b8f4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 802b8f6:	683b      	ldr	r3, [r7, #0]
 802b8f8:	789a      	ldrb	r2, [r3, #2]
 802b8fa:	687b      	ldr	r3, [r7, #4]
 802b8fc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 802b8fe:	683b      	ldr	r3, [r7, #0]
 802b900:	78da      	ldrb	r2, [r3, #3]
 802b902:	687b      	ldr	r3, [r7, #4]
 802b904:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 802b906:	683b      	ldr	r3, [r7, #0]
 802b908:	791a      	ldrb	r2, [r3, #4]
 802b90a:	687b      	ldr	r3, [r7, #4]
 802b90c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 802b90e:	683b      	ldr	r3, [r7, #0]
 802b910:	795a      	ldrb	r2, [r3, #5]
 802b912:	687b      	ldr	r3, [r7, #4]
 802b914:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 802b916:	683b      	ldr	r3, [r7, #0]
 802b918:	799a      	ldrb	r2, [r3, #6]
 802b91a:	687b      	ldr	r3, [r7, #4]
 802b91c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 802b91e:	683b      	ldr	r3, [r7, #0]
 802b920:	79da      	ldrb	r2, [r3, #7]
 802b922:	687b      	ldr	r3, [r7, #4]
 802b924:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 802b926:	683b      	ldr	r3, [r7, #0]
 802b928:	7a1a      	ldrb	r2, [r3, #8]
 802b92a:	687b      	ldr	r3, [r7, #4]
 802b92c:	721a      	strb	r2, [r3, #8]
}
 802b92e:	bf00      	nop
 802b930:	370c      	adds	r7, #12
 802b932:	46bd      	mov	sp, r7
 802b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b938:	4770      	bx	lr

0802b93a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 802b93a:	b480      	push	{r7}
 802b93c:	b087      	sub	sp, #28
 802b93e:	af00      	add	r7, sp, #0
 802b940:	60f8      	str	r0, [r7, #12]
 802b942:	60b9      	str	r1, [r7, #8]
 802b944:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 802b946:	2300      	movs	r3, #0
 802b948:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 802b94a:	687b      	ldr	r3, [r7, #4]
 802b94c:	781a      	ldrb	r2, [r3, #0]
 802b94e:	68bb      	ldr	r3, [r7, #8]
 802b950:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 802b952:	687b      	ldr	r3, [r7, #4]
 802b954:	785a      	ldrb	r2, [r3, #1]
 802b956:	68bb      	ldr	r3, [r7, #8]
 802b958:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 802b95a:	687b      	ldr	r3, [r7, #4]
 802b95c:	789a      	ldrb	r2, [r3, #2]
 802b95e:	68bb      	ldr	r3, [r7, #8]
 802b960:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 802b962:	687b      	ldr	r3, [r7, #4]
 802b964:	78da      	ldrb	r2, [r3, #3]
 802b966:	68bb      	ldr	r3, [r7, #8]
 802b968:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 802b96a:	687b      	ldr	r3, [r7, #4]
 802b96c:	3304      	adds	r3, #4
 802b96e:	781b      	ldrb	r3, [r3, #0]
 802b970:	b29a      	uxth	r2, r3
 802b972:	687b      	ldr	r3, [r7, #4]
 802b974:	3305      	adds	r3, #5
 802b976:	781b      	ldrb	r3, [r3, #0]
 802b978:	b29b      	uxth	r3, r3
 802b97a:	021b      	lsls	r3, r3, #8
 802b97c:	b29b      	uxth	r3, r3
 802b97e:	4313      	orrs	r3, r2
 802b980:	b29a      	uxth	r2, r3
 802b982:	68bb      	ldr	r3, [r7, #8]
 802b984:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 802b986:	687b      	ldr	r3, [r7, #4]
 802b988:	799a      	ldrb	r2, [r3, #6]
 802b98a:	68bb      	ldr	r3, [r7, #8]
 802b98c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 802b98e:	68bb      	ldr	r3, [r7, #8]
 802b990:	889b      	ldrh	r3, [r3, #4]
 802b992:	2b00      	cmp	r3, #0
 802b994:	d102      	bne.n	802b99c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 802b996:	2303      	movs	r3, #3
 802b998:	75fb      	strb	r3, [r7, #23]
 802b99a:	e033      	b.n	802ba04 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 802b99c:	68bb      	ldr	r3, [r7, #8]
 802b99e:	889b      	ldrh	r3, [r3, #4]
 802b9a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802b9a4:	f023 0307 	bic.w	r3, r3, #7
 802b9a8:	b29a      	uxth	r2, r3
 802b9aa:	68bb      	ldr	r3, [r7, #8]
 802b9ac:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 802b9ae:	68bb      	ldr	r3, [r7, #8]
 802b9b0:	889b      	ldrh	r3, [r3, #4]
 802b9b2:	b21a      	sxth	r2, r3
 802b9b4:	687b      	ldr	r3, [r7, #4]
 802b9b6:	3304      	adds	r3, #4
 802b9b8:	781b      	ldrb	r3, [r3, #0]
 802b9ba:	b299      	uxth	r1, r3
 802b9bc:	687b      	ldr	r3, [r7, #4]
 802b9be:	3305      	adds	r3, #5
 802b9c0:	781b      	ldrb	r3, [r3, #0]
 802b9c2:	b29b      	uxth	r3, r3
 802b9c4:	021b      	lsls	r3, r3, #8
 802b9c6:	b29b      	uxth	r3, r3
 802b9c8:	430b      	orrs	r3, r1
 802b9ca:	b29b      	uxth	r3, r3
 802b9cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802b9d0:	2b00      	cmp	r3, #0
 802b9d2:	d110      	bne.n	802b9f6 <USBH_ParseEPDesc+0xbc>
 802b9d4:	687b      	ldr	r3, [r7, #4]
 802b9d6:	3304      	adds	r3, #4
 802b9d8:	781b      	ldrb	r3, [r3, #0]
 802b9da:	b299      	uxth	r1, r3
 802b9dc:	687b      	ldr	r3, [r7, #4]
 802b9de:	3305      	adds	r3, #5
 802b9e0:	781b      	ldrb	r3, [r3, #0]
 802b9e2:	b29b      	uxth	r3, r3
 802b9e4:	021b      	lsls	r3, r3, #8
 802b9e6:	b29b      	uxth	r3, r3
 802b9e8:	430b      	orrs	r3, r1
 802b9ea:	b29b      	uxth	r3, r3
 802b9ec:	b21b      	sxth	r3, r3
 802b9ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802b9f2:	b21b      	sxth	r3, r3
 802b9f4:	e001      	b.n	802b9fa <USBH_ParseEPDesc+0xc0>
 802b9f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 802b9fa:	4313      	orrs	r3, r2
 802b9fc:	b21b      	sxth	r3, r3
 802b9fe:	b29a      	uxth	r2, r3
 802ba00:	68bb      	ldr	r3, [r7, #8]
 802ba02:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 802ba04:	68fb      	ldr	r3, [r7, #12]
 802ba06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802ba0a:	2b00      	cmp	r3, #0
 802ba0c:	d116      	bne.n	802ba3c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802ba0e:	68bb      	ldr	r3, [r7, #8]
 802ba10:	78db      	ldrb	r3, [r3, #3]
 802ba12:	f003 0303 	and.w	r3, r3, #3
 802ba16:	2b01      	cmp	r3, #1
 802ba18:	d005      	beq.n	802ba26 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 802ba1a:	68bb      	ldr	r3, [r7, #8]
 802ba1c:	78db      	ldrb	r3, [r3, #3]
 802ba1e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802ba22:	2b03      	cmp	r3, #3
 802ba24:	d127      	bne.n	802ba76 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802ba26:	68bb      	ldr	r3, [r7, #8]
 802ba28:	799b      	ldrb	r3, [r3, #6]
 802ba2a:	2b00      	cmp	r3, #0
 802ba2c:	d003      	beq.n	802ba36 <USBH_ParseEPDesc+0xfc>
 802ba2e:	68bb      	ldr	r3, [r7, #8]
 802ba30:	799b      	ldrb	r3, [r3, #6]
 802ba32:	2b10      	cmp	r3, #16
 802ba34:	d91f      	bls.n	802ba76 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802ba36:	2303      	movs	r3, #3
 802ba38:	75fb      	strb	r3, [r7, #23]
 802ba3a:	e01c      	b.n	802ba76 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 802ba3c:	68bb      	ldr	r3, [r7, #8]
 802ba3e:	78db      	ldrb	r3, [r3, #3]
 802ba40:	f003 0303 	and.w	r3, r3, #3
 802ba44:	2b01      	cmp	r3, #1
 802ba46:	d10a      	bne.n	802ba5e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802ba48:	68bb      	ldr	r3, [r7, #8]
 802ba4a:	799b      	ldrb	r3, [r3, #6]
 802ba4c:	2b00      	cmp	r3, #0
 802ba4e:	d003      	beq.n	802ba58 <USBH_ParseEPDesc+0x11e>
 802ba50:	68bb      	ldr	r3, [r7, #8]
 802ba52:	799b      	ldrb	r3, [r3, #6]
 802ba54:	2b10      	cmp	r3, #16
 802ba56:	d90e      	bls.n	802ba76 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802ba58:	2303      	movs	r3, #3
 802ba5a:	75fb      	strb	r3, [r7, #23]
 802ba5c:	e00b      	b.n	802ba76 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 802ba5e:	68bb      	ldr	r3, [r7, #8]
 802ba60:	78db      	ldrb	r3, [r3, #3]
 802ba62:	f003 0303 	and.w	r3, r3, #3
 802ba66:	2b03      	cmp	r3, #3
 802ba68:	d105      	bne.n	802ba76 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 802ba6a:	68bb      	ldr	r3, [r7, #8]
 802ba6c:	799b      	ldrb	r3, [r3, #6]
 802ba6e:	2b00      	cmp	r3, #0
 802ba70:	d101      	bne.n	802ba76 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802ba72:	2303      	movs	r3, #3
 802ba74:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 802ba76:	7dfb      	ldrb	r3, [r7, #23]
}
 802ba78:	4618      	mov	r0, r3
 802ba7a:	371c      	adds	r7, #28
 802ba7c:	46bd      	mov	sp, r7
 802ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ba82:	4770      	bx	lr

0802ba84 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 802ba84:	b480      	push	{r7}
 802ba86:	b087      	sub	sp, #28
 802ba88:	af00      	add	r7, sp, #0
 802ba8a:	60f8      	str	r0, [r7, #12]
 802ba8c:	60b9      	str	r1, [r7, #8]
 802ba8e:	4613      	mov	r3, r2
 802ba90:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 802ba92:	68fb      	ldr	r3, [r7, #12]
 802ba94:	3301      	adds	r3, #1
 802ba96:	781b      	ldrb	r3, [r3, #0]
 802ba98:	2b03      	cmp	r3, #3
 802ba9a:	d120      	bne.n	802bade <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 802ba9c:	68fb      	ldr	r3, [r7, #12]
 802ba9e:	781b      	ldrb	r3, [r3, #0]
 802baa0:	1e9a      	subs	r2, r3, #2
 802baa2:	88fb      	ldrh	r3, [r7, #6]
 802baa4:	4293      	cmp	r3, r2
 802baa6:	bf28      	it	cs
 802baa8:	4613      	movcs	r3, r2
 802baaa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 802baac:	68fb      	ldr	r3, [r7, #12]
 802baae:	3302      	adds	r3, #2
 802bab0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 802bab2:	2300      	movs	r3, #0
 802bab4:	82fb      	strh	r3, [r7, #22]
 802bab6:	e00b      	b.n	802bad0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 802bab8:	8afb      	ldrh	r3, [r7, #22]
 802baba:	68fa      	ldr	r2, [r7, #12]
 802babc:	4413      	add	r3, r2
 802babe:	781a      	ldrb	r2, [r3, #0]
 802bac0:	68bb      	ldr	r3, [r7, #8]
 802bac2:	701a      	strb	r2, [r3, #0]
      pdest++;
 802bac4:	68bb      	ldr	r3, [r7, #8]
 802bac6:	3301      	adds	r3, #1
 802bac8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 802baca:	8afb      	ldrh	r3, [r7, #22]
 802bacc:	3302      	adds	r3, #2
 802bace:	82fb      	strh	r3, [r7, #22]
 802bad0:	8afa      	ldrh	r2, [r7, #22]
 802bad2:	8abb      	ldrh	r3, [r7, #20]
 802bad4:	429a      	cmp	r2, r3
 802bad6:	d3ef      	bcc.n	802bab8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 802bad8:	68bb      	ldr	r3, [r7, #8]
 802bada:	2200      	movs	r2, #0
 802badc:	701a      	strb	r2, [r3, #0]
  }
}
 802bade:	bf00      	nop
 802bae0:	371c      	adds	r7, #28
 802bae2:	46bd      	mov	sp, r7
 802bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bae8:	4770      	bx	lr

0802baea <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 802baea:	b480      	push	{r7}
 802baec:	b085      	sub	sp, #20
 802baee:	af00      	add	r7, sp, #0
 802baf0:	6078      	str	r0, [r7, #4]
 802baf2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 802baf4:	683b      	ldr	r3, [r7, #0]
 802baf6:	881a      	ldrh	r2, [r3, #0]
 802baf8:	687b      	ldr	r3, [r7, #4]
 802bafa:	781b      	ldrb	r3, [r3, #0]
 802bafc:	b29b      	uxth	r3, r3
 802bafe:	4413      	add	r3, r2
 802bb00:	b29a      	uxth	r2, r3
 802bb02:	683b      	ldr	r3, [r7, #0]
 802bb04:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 802bb06:	687b      	ldr	r3, [r7, #4]
 802bb08:	781b      	ldrb	r3, [r3, #0]
 802bb0a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 802bb0c:	687b      	ldr	r3, [r7, #4]
 802bb0e:	4413      	add	r3, r2
 802bb10:	60fb      	str	r3, [r7, #12]

  return (pnext);
 802bb12:	68fb      	ldr	r3, [r7, #12]
}
 802bb14:	4618      	mov	r0, r3
 802bb16:	3714      	adds	r7, #20
 802bb18:	46bd      	mov	sp, r7
 802bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bb1e:	4770      	bx	lr

0802bb20 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 802bb20:	b580      	push	{r7, lr}
 802bb22:	b086      	sub	sp, #24
 802bb24:	af00      	add	r7, sp, #0
 802bb26:	60f8      	str	r0, [r7, #12]
 802bb28:	60b9      	str	r1, [r7, #8]
 802bb2a:	4613      	mov	r3, r2
 802bb2c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 802bb2e:	2301      	movs	r3, #1
 802bb30:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 802bb32:	68fb      	ldr	r3, [r7, #12]
 802bb34:	789b      	ldrb	r3, [r3, #2]
 802bb36:	2b01      	cmp	r3, #1
 802bb38:	d002      	beq.n	802bb40 <USBH_CtlReq+0x20>
 802bb3a:	2b02      	cmp	r3, #2
 802bb3c:	d00f      	beq.n	802bb5e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 802bb3e:	e027      	b.n	802bb90 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 802bb40:	68fb      	ldr	r3, [r7, #12]
 802bb42:	68ba      	ldr	r2, [r7, #8]
 802bb44:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 802bb46:	68fb      	ldr	r3, [r7, #12]
 802bb48:	88fa      	ldrh	r2, [r7, #6]
 802bb4a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 802bb4c:	68fb      	ldr	r3, [r7, #12]
 802bb4e:	2201      	movs	r2, #1
 802bb50:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 802bb52:	68fb      	ldr	r3, [r7, #12]
 802bb54:	2202      	movs	r2, #2
 802bb56:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 802bb58:	2301      	movs	r3, #1
 802bb5a:	75fb      	strb	r3, [r7, #23]
      break;
 802bb5c:	e018      	b.n	802bb90 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 802bb5e:	68f8      	ldr	r0, [r7, #12]
 802bb60:	f000 f81c 	bl	802bb9c <USBH_HandleControl>
 802bb64:	4603      	mov	r3, r0
 802bb66:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 802bb68:	7dfb      	ldrb	r3, [r7, #23]
 802bb6a:	2b00      	cmp	r3, #0
 802bb6c:	d002      	beq.n	802bb74 <USBH_CtlReq+0x54>
 802bb6e:	7dfb      	ldrb	r3, [r7, #23]
 802bb70:	2b03      	cmp	r3, #3
 802bb72:	d106      	bne.n	802bb82 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 802bb74:	68fb      	ldr	r3, [r7, #12]
 802bb76:	2201      	movs	r2, #1
 802bb78:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 802bb7a:	68fb      	ldr	r3, [r7, #12]
 802bb7c:	2200      	movs	r2, #0
 802bb7e:	761a      	strb	r2, [r3, #24]
      break;
 802bb80:	e005      	b.n	802bb8e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 802bb82:	7dfb      	ldrb	r3, [r7, #23]
 802bb84:	2b02      	cmp	r3, #2
 802bb86:	d102      	bne.n	802bb8e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 802bb88:	68fb      	ldr	r3, [r7, #12]
 802bb8a:	2201      	movs	r2, #1
 802bb8c:	709a      	strb	r2, [r3, #2]
      break;
 802bb8e:	bf00      	nop
  }
  return status;
 802bb90:	7dfb      	ldrb	r3, [r7, #23]
}
 802bb92:	4618      	mov	r0, r3
 802bb94:	3718      	adds	r7, #24
 802bb96:	46bd      	mov	sp, r7
 802bb98:	bd80      	pop	{r7, pc}
	...

0802bb9c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 802bb9c:	b580      	push	{r7, lr}
 802bb9e:	b086      	sub	sp, #24
 802bba0:	af02      	add	r7, sp, #8
 802bba2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 802bba4:	2301      	movs	r3, #1
 802bba6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802bba8:	2300      	movs	r3, #0
 802bbaa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 802bbac:	687b      	ldr	r3, [r7, #4]
 802bbae:	7e1b      	ldrb	r3, [r3, #24]
 802bbb0:	3b01      	subs	r3, #1
 802bbb2:	2b0a      	cmp	r3, #10
 802bbb4:	f200 8156 	bhi.w	802be64 <USBH_HandleControl+0x2c8>
 802bbb8:	a201      	add	r2, pc, #4	; (adr r2, 802bbc0 <USBH_HandleControl+0x24>)
 802bbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802bbbe:	bf00      	nop
 802bbc0:	0802bbed 	.word	0x0802bbed
 802bbc4:	0802bc07 	.word	0x0802bc07
 802bbc8:	0802bc71 	.word	0x0802bc71
 802bbcc:	0802bc97 	.word	0x0802bc97
 802bbd0:	0802bccf 	.word	0x0802bccf
 802bbd4:	0802bcf9 	.word	0x0802bcf9
 802bbd8:	0802bd4b 	.word	0x0802bd4b
 802bbdc:	0802bd6d 	.word	0x0802bd6d
 802bbe0:	0802bda9 	.word	0x0802bda9
 802bbe4:	0802bdcf 	.word	0x0802bdcf
 802bbe8:	0802be0d 	.word	0x0802be0d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 802bbec:	687b      	ldr	r3, [r7, #4]
 802bbee:	f103 0110 	add.w	r1, r3, #16
 802bbf2:	687b      	ldr	r3, [r7, #4]
 802bbf4:	795b      	ldrb	r3, [r3, #5]
 802bbf6:	461a      	mov	r2, r3
 802bbf8:	6878      	ldr	r0, [r7, #4]
 802bbfa:	f000 f943 	bl	802be84 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 802bbfe:	687b      	ldr	r3, [r7, #4]
 802bc00:	2202      	movs	r2, #2
 802bc02:	761a      	strb	r2, [r3, #24]
      break;
 802bc04:	e139      	b.n	802be7a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802bc06:	687b      	ldr	r3, [r7, #4]
 802bc08:	795b      	ldrb	r3, [r3, #5]
 802bc0a:	4619      	mov	r1, r3
 802bc0c:	6878      	ldr	r0, [r7, #4]
 802bc0e:	f000 fccb 	bl	802c5a8 <USBH_LL_GetURBState>
 802bc12:	4603      	mov	r3, r0
 802bc14:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 802bc16:	7bbb      	ldrb	r3, [r7, #14]
 802bc18:	2b01      	cmp	r3, #1
 802bc1a:	d11e      	bne.n	802bc5a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 802bc1c:	687b      	ldr	r3, [r7, #4]
 802bc1e:	7c1b      	ldrb	r3, [r3, #16]
 802bc20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802bc24:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 802bc26:	687b      	ldr	r3, [r7, #4]
 802bc28:	8adb      	ldrh	r3, [r3, #22]
 802bc2a:	2b00      	cmp	r3, #0
 802bc2c:	d00a      	beq.n	802bc44 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 802bc2e:	7b7b      	ldrb	r3, [r7, #13]
 802bc30:	2b80      	cmp	r3, #128	; 0x80
 802bc32:	d103      	bne.n	802bc3c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 802bc34:	687b      	ldr	r3, [r7, #4]
 802bc36:	2203      	movs	r2, #3
 802bc38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802bc3a:	e115      	b.n	802be68 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 802bc3c:	687b      	ldr	r3, [r7, #4]
 802bc3e:	2205      	movs	r2, #5
 802bc40:	761a      	strb	r2, [r3, #24]
      break;
 802bc42:	e111      	b.n	802be68 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 802bc44:	7b7b      	ldrb	r3, [r7, #13]
 802bc46:	2b80      	cmp	r3, #128	; 0x80
 802bc48:	d103      	bne.n	802bc52 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 802bc4a:	687b      	ldr	r3, [r7, #4]
 802bc4c:	2209      	movs	r2, #9
 802bc4e:	761a      	strb	r2, [r3, #24]
      break;
 802bc50:	e10a      	b.n	802be68 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 802bc52:	687b      	ldr	r3, [r7, #4]
 802bc54:	2207      	movs	r2, #7
 802bc56:	761a      	strb	r2, [r3, #24]
      break;
 802bc58:	e106      	b.n	802be68 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 802bc5a:	7bbb      	ldrb	r3, [r7, #14]
 802bc5c:	2b04      	cmp	r3, #4
 802bc5e:	d003      	beq.n	802bc68 <USBH_HandleControl+0xcc>
 802bc60:	7bbb      	ldrb	r3, [r7, #14]
 802bc62:	2b02      	cmp	r3, #2
 802bc64:	f040 8100 	bne.w	802be68 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 802bc68:	687b      	ldr	r3, [r7, #4]
 802bc6a:	220b      	movs	r2, #11
 802bc6c:	761a      	strb	r2, [r3, #24]
      break;
 802bc6e:	e0fb      	b.n	802be68 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 802bc70:	687b      	ldr	r3, [r7, #4]
 802bc72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802bc76:	b29a      	uxth	r2, r3
 802bc78:	687b      	ldr	r3, [r7, #4]
 802bc7a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 802bc7c:	687b      	ldr	r3, [r7, #4]
 802bc7e:	6899      	ldr	r1, [r3, #8]
 802bc80:	687b      	ldr	r3, [r7, #4]
 802bc82:	899a      	ldrh	r2, [r3, #12]
 802bc84:	687b      	ldr	r3, [r7, #4]
 802bc86:	791b      	ldrb	r3, [r3, #4]
 802bc88:	6878      	ldr	r0, [r7, #4]
 802bc8a:	f000 f93a 	bl	802bf02 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 802bc8e:	687b      	ldr	r3, [r7, #4]
 802bc90:	2204      	movs	r2, #4
 802bc92:	761a      	strb	r2, [r3, #24]
      break;
 802bc94:	e0f1      	b.n	802be7a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802bc96:	687b      	ldr	r3, [r7, #4]
 802bc98:	791b      	ldrb	r3, [r3, #4]
 802bc9a:	4619      	mov	r1, r3
 802bc9c:	6878      	ldr	r0, [r7, #4]
 802bc9e:	f000 fc83 	bl	802c5a8 <USBH_LL_GetURBState>
 802bca2:	4603      	mov	r3, r0
 802bca4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 802bca6:	7bbb      	ldrb	r3, [r7, #14]
 802bca8:	2b01      	cmp	r3, #1
 802bcaa:	d102      	bne.n	802bcb2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 802bcac:	687b      	ldr	r3, [r7, #4]
 802bcae:	2209      	movs	r2, #9
 802bcb0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 802bcb2:	7bbb      	ldrb	r3, [r7, #14]
 802bcb4:	2b05      	cmp	r3, #5
 802bcb6:	d102      	bne.n	802bcbe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 802bcb8:	2303      	movs	r3, #3
 802bcba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802bcbc:	e0d6      	b.n	802be6c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 802bcbe:	7bbb      	ldrb	r3, [r7, #14]
 802bcc0:	2b04      	cmp	r3, #4
 802bcc2:	f040 80d3 	bne.w	802be6c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 802bcc6:	687b      	ldr	r3, [r7, #4]
 802bcc8:	220b      	movs	r2, #11
 802bcca:	761a      	strb	r2, [r3, #24]
      break;
 802bccc:	e0ce      	b.n	802be6c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 802bcce:	687b      	ldr	r3, [r7, #4]
 802bcd0:	6899      	ldr	r1, [r3, #8]
 802bcd2:	687b      	ldr	r3, [r7, #4]
 802bcd4:	899a      	ldrh	r2, [r3, #12]
 802bcd6:	687b      	ldr	r3, [r7, #4]
 802bcd8:	795b      	ldrb	r3, [r3, #5]
 802bcda:	2001      	movs	r0, #1
 802bcdc:	9000      	str	r0, [sp, #0]
 802bcde:	6878      	ldr	r0, [r7, #4]
 802bce0:	f000 f8ea 	bl	802beb8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 802bce4:	687b      	ldr	r3, [r7, #4]
 802bce6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802bcea:	b29a      	uxth	r2, r3
 802bcec:	687b      	ldr	r3, [r7, #4]
 802bcee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 802bcf0:	687b      	ldr	r3, [r7, #4]
 802bcf2:	2206      	movs	r2, #6
 802bcf4:	761a      	strb	r2, [r3, #24]
      break;
 802bcf6:	e0c0      	b.n	802be7a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802bcf8:	687b      	ldr	r3, [r7, #4]
 802bcfa:	795b      	ldrb	r3, [r3, #5]
 802bcfc:	4619      	mov	r1, r3
 802bcfe:	6878      	ldr	r0, [r7, #4]
 802bd00:	f000 fc52 	bl	802c5a8 <USBH_LL_GetURBState>
 802bd04:	4603      	mov	r3, r0
 802bd06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802bd08:	7bbb      	ldrb	r3, [r7, #14]
 802bd0a:	2b01      	cmp	r3, #1
 802bd0c:	d103      	bne.n	802bd16 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 802bd0e:	687b      	ldr	r3, [r7, #4]
 802bd10:	2207      	movs	r2, #7
 802bd12:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802bd14:	e0ac      	b.n	802be70 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 802bd16:	7bbb      	ldrb	r3, [r7, #14]
 802bd18:	2b05      	cmp	r3, #5
 802bd1a:	d105      	bne.n	802bd28 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 802bd1c:	687b      	ldr	r3, [r7, #4]
 802bd1e:	220c      	movs	r2, #12
 802bd20:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 802bd22:	2303      	movs	r3, #3
 802bd24:	73fb      	strb	r3, [r7, #15]
      break;
 802bd26:	e0a3      	b.n	802be70 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 802bd28:	7bbb      	ldrb	r3, [r7, #14]
 802bd2a:	2b02      	cmp	r3, #2
 802bd2c:	d103      	bne.n	802bd36 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 802bd2e:	687b      	ldr	r3, [r7, #4]
 802bd30:	2205      	movs	r2, #5
 802bd32:	761a      	strb	r2, [r3, #24]
      break;
 802bd34:	e09c      	b.n	802be70 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 802bd36:	7bbb      	ldrb	r3, [r7, #14]
 802bd38:	2b04      	cmp	r3, #4
 802bd3a:	f040 8099 	bne.w	802be70 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 802bd3e:	687b      	ldr	r3, [r7, #4]
 802bd40:	220b      	movs	r2, #11
 802bd42:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 802bd44:	2302      	movs	r3, #2
 802bd46:	73fb      	strb	r3, [r7, #15]
      break;
 802bd48:	e092      	b.n	802be70 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 802bd4a:	687b      	ldr	r3, [r7, #4]
 802bd4c:	791b      	ldrb	r3, [r3, #4]
 802bd4e:	2200      	movs	r2, #0
 802bd50:	2100      	movs	r1, #0
 802bd52:	6878      	ldr	r0, [r7, #4]
 802bd54:	f000 f8d5 	bl	802bf02 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802bd58:	687b      	ldr	r3, [r7, #4]
 802bd5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802bd5e:	b29a      	uxth	r2, r3
 802bd60:	687b      	ldr	r3, [r7, #4]
 802bd62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 802bd64:	687b      	ldr	r3, [r7, #4]
 802bd66:	2208      	movs	r2, #8
 802bd68:	761a      	strb	r2, [r3, #24]

      break;
 802bd6a:	e086      	b.n	802be7a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802bd6c:	687b      	ldr	r3, [r7, #4]
 802bd6e:	791b      	ldrb	r3, [r3, #4]
 802bd70:	4619      	mov	r1, r3
 802bd72:	6878      	ldr	r0, [r7, #4]
 802bd74:	f000 fc18 	bl	802c5a8 <USBH_LL_GetURBState>
 802bd78:	4603      	mov	r3, r0
 802bd7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802bd7c:	7bbb      	ldrb	r3, [r7, #14]
 802bd7e:	2b01      	cmp	r3, #1
 802bd80:	d105      	bne.n	802bd8e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 802bd82:	687b      	ldr	r3, [r7, #4]
 802bd84:	220d      	movs	r2, #13
 802bd86:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 802bd88:	2300      	movs	r3, #0
 802bd8a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802bd8c:	e072      	b.n	802be74 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 802bd8e:	7bbb      	ldrb	r3, [r7, #14]
 802bd90:	2b04      	cmp	r3, #4
 802bd92:	d103      	bne.n	802bd9c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 802bd94:	687b      	ldr	r3, [r7, #4]
 802bd96:	220b      	movs	r2, #11
 802bd98:	761a      	strb	r2, [r3, #24]
      break;
 802bd9a:	e06b      	b.n	802be74 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 802bd9c:	7bbb      	ldrb	r3, [r7, #14]
 802bd9e:	2b05      	cmp	r3, #5
 802bda0:	d168      	bne.n	802be74 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 802bda2:	2303      	movs	r3, #3
 802bda4:	73fb      	strb	r3, [r7, #15]
      break;
 802bda6:	e065      	b.n	802be74 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 802bda8:	687b      	ldr	r3, [r7, #4]
 802bdaa:	795b      	ldrb	r3, [r3, #5]
 802bdac:	2201      	movs	r2, #1
 802bdae:	9200      	str	r2, [sp, #0]
 802bdb0:	2200      	movs	r2, #0
 802bdb2:	2100      	movs	r1, #0
 802bdb4:	6878      	ldr	r0, [r7, #4]
 802bdb6:	f000 f87f 	bl	802beb8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802bdba:	687b      	ldr	r3, [r7, #4]
 802bdbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802bdc0:	b29a      	uxth	r2, r3
 802bdc2:	687b      	ldr	r3, [r7, #4]
 802bdc4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 802bdc6:	687b      	ldr	r3, [r7, #4]
 802bdc8:	220a      	movs	r2, #10
 802bdca:	761a      	strb	r2, [r3, #24]
      break;
 802bdcc:	e055      	b.n	802be7a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802bdce:	687b      	ldr	r3, [r7, #4]
 802bdd0:	795b      	ldrb	r3, [r3, #5]
 802bdd2:	4619      	mov	r1, r3
 802bdd4:	6878      	ldr	r0, [r7, #4]
 802bdd6:	f000 fbe7 	bl	802c5a8 <USBH_LL_GetURBState>
 802bdda:	4603      	mov	r3, r0
 802bddc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 802bdde:	7bbb      	ldrb	r3, [r7, #14]
 802bde0:	2b01      	cmp	r3, #1
 802bde2:	d105      	bne.n	802bdf0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 802bde4:	2300      	movs	r3, #0
 802bde6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 802bde8:	687b      	ldr	r3, [r7, #4]
 802bdea:	220d      	movs	r2, #13
 802bdec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802bdee:	e043      	b.n	802be78 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 802bdf0:	7bbb      	ldrb	r3, [r7, #14]
 802bdf2:	2b02      	cmp	r3, #2
 802bdf4:	d103      	bne.n	802bdfe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 802bdf6:	687b      	ldr	r3, [r7, #4]
 802bdf8:	2209      	movs	r2, #9
 802bdfa:	761a      	strb	r2, [r3, #24]
      break;
 802bdfc:	e03c      	b.n	802be78 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 802bdfe:	7bbb      	ldrb	r3, [r7, #14]
 802be00:	2b04      	cmp	r3, #4
 802be02:	d139      	bne.n	802be78 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 802be04:	687b      	ldr	r3, [r7, #4]
 802be06:	220b      	movs	r2, #11
 802be08:	761a      	strb	r2, [r3, #24]
      break;
 802be0a:	e035      	b.n	802be78 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 802be0c:	687b      	ldr	r3, [r7, #4]
 802be0e:	7e5b      	ldrb	r3, [r3, #25]
 802be10:	3301      	adds	r3, #1
 802be12:	b2da      	uxtb	r2, r3
 802be14:	687b      	ldr	r3, [r7, #4]
 802be16:	765a      	strb	r2, [r3, #25]
 802be18:	687b      	ldr	r3, [r7, #4]
 802be1a:	7e5b      	ldrb	r3, [r3, #25]
 802be1c:	2b02      	cmp	r3, #2
 802be1e:	d806      	bhi.n	802be2e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 802be20:	687b      	ldr	r3, [r7, #4]
 802be22:	2201      	movs	r2, #1
 802be24:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 802be26:	687b      	ldr	r3, [r7, #4]
 802be28:	2201      	movs	r2, #1
 802be2a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 802be2c:	e025      	b.n	802be7a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 802be2e:	687b      	ldr	r3, [r7, #4]
 802be30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802be34:	2106      	movs	r1, #6
 802be36:	6878      	ldr	r0, [r7, #4]
 802be38:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 802be3a:	687b      	ldr	r3, [r7, #4]
 802be3c:	2200      	movs	r2, #0
 802be3e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802be40:	687b      	ldr	r3, [r7, #4]
 802be42:	795b      	ldrb	r3, [r3, #5]
 802be44:	4619      	mov	r1, r3
 802be46:	6878      	ldr	r0, [r7, #4]
 802be48:	f000 f90c 	bl	802c064 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802be4c:	687b      	ldr	r3, [r7, #4]
 802be4e:	791b      	ldrb	r3, [r3, #4]
 802be50:	4619      	mov	r1, r3
 802be52:	6878      	ldr	r0, [r7, #4]
 802be54:	f000 f906 	bl	802c064 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 802be58:	687b      	ldr	r3, [r7, #4]
 802be5a:	2200      	movs	r2, #0
 802be5c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 802be5e:	2302      	movs	r3, #2
 802be60:	73fb      	strb	r3, [r7, #15]
      break;
 802be62:	e00a      	b.n	802be7a <USBH_HandleControl+0x2de>

    default:
      break;
 802be64:	bf00      	nop
 802be66:	e008      	b.n	802be7a <USBH_HandleControl+0x2de>
      break;
 802be68:	bf00      	nop
 802be6a:	e006      	b.n	802be7a <USBH_HandleControl+0x2de>
      break;
 802be6c:	bf00      	nop
 802be6e:	e004      	b.n	802be7a <USBH_HandleControl+0x2de>
      break;
 802be70:	bf00      	nop
 802be72:	e002      	b.n	802be7a <USBH_HandleControl+0x2de>
      break;
 802be74:	bf00      	nop
 802be76:	e000      	b.n	802be7a <USBH_HandleControl+0x2de>
      break;
 802be78:	bf00      	nop
  }

  return status;
 802be7a:	7bfb      	ldrb	r3, [r7, #15]
}
 802be7c:	4618      	mov	r0, r3
 802be7e:	3710      	adds	r7, #16
 802be80:	46bd      	mov	sp, r7
 802be82:	bd80      	pop	{r7, pc}

0802be84 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 802be84:	b580      	push	{r7, lr}
 802be86:	b088      	sub	sp, #32
 802be88:	af04      	add	r7, sp, #16
 802be8a:	60f8      	str	r0, [r7, #12]
 802be8c:	60b9      	str	r1, [r7, #8]
 802be8e:	4613      	mov	r3, r2
 802be90:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802be92:	79f9      	ldrb	r1, [r7, #7]
 802be94:	2300      	movs	r3, #0
 802be96:	9303      	str	r3, [sp, #12]
 802be98:	2308      	movs	r3, #8
 802be9a:	9302      	str	r3, [sp, #8]
 802be9c:	68bb      	ldr	r3, [r7, #8]
 802be9e:	9301      	str	r3, [sp, #4]
 802bea0:	2300      	movs	r3, #0
 802bea2:	9300      	str	r3, [sp, #0]
 802bea4:	2300      	movs	r3, #0
 802bea6:	2200      	movs	r2, #0
 802bea8:	68f8      	ldr	r0, [r7, #12]
 802beaa:	f000 fb4c 	bl	802c546 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 802beae:	2300      	movs	r3, #0
}
 802beb0:	4618      	mov	r0, r3
 802beb2:	3710      	adds	r7, #16
 802beb4:	46bd      	mov	sp, r7
 802beb6:	bd80      	pop	{r7, pc}

0802beb8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 802beb8:	b580      	push	{r7, lr}
 802beba:	b088      	sub	sp, #32
 802bebc:	af04      	add	r7, sp, #16
 802bebe:	60f8      	str	r0, [r7, #12]
 802bec0:	60b9      	str	r1, [r7, #8]
 802bec2:	4611      	mov	r1, r2
 802bec4:	461a      	mov	r2, r3
 802bec6:	460b      	mov	r3, r1
 802bec8:	80fb      	strh	r3, [r7, #6]
 802beca:	4613      	mov	r3, r2
 802becc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802bece:	68fb      	ldr	r3, [r7, #12]
 802bed0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802bed4:	2b00      	cmp	r3, #0
 802bed6:	d001      	beq.n	802bedc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 802bed8:	2300      	movs	r3, #0
 802beda:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802bedc:	7979      	ldrb	r1, [r7, #5]
 802bede:	7e3b      	ldrb	r3, [r7, #24]
 802bee0:	9303      	str	r3, [sp, #12]
 802bee2:	88fb      	ldrh	r3, [r7, #6]
 802bee4:	9302      	str	r3, [sp, #8]
 802bee6:	68bb      	ldr	r3, [r7, #8]
 802bee8:	9301      	str	r3, [sp, #4]
 802beea:	2301      	movs	r3, #1
 802beec:	9300      	str	r3, [sp, #0]
 802beee:	2300      	movs	r3, #0
 802bef0:	2200      	movs	r2, #0
 802bef2:	68f8      	ldr	r0, [r7, #12]
 802bef4:	f000 fb27 	bl	802c546 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 802bef8:	2300      	movs	r3, #0
}
 802befa:	4618      	mov	r0, r3
 802befc:	3710      	adds	r7, #16
 802befe:	46bd      	mov	sp, r7
 802bf00:	bd80      	pop	{r7, pc}

0802bf02 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 802bf02:	b580      	push	{r7, lr}
 802bf04:	b088      	sub	sp, #32
 802bf06:	af04      	add	r7, sp, #16
 802bf08:	60f8      	str	r0, [r7, #12]
 802bf0a:	60b9      	str	r1, [r7, #8]
 802bf0c:	4611      	mov	r1, r2
 802bf0e:	461a      	mov	r2, r3
 802bf10:	460b      	mov	r3, r1
 802bf12:	80fb      	strh	r3, [r7, #6]
 802bf14:	4613      	mov	r3, r2
 802bf16:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802bf18:	7979      	ldrb	r1, [r7, #5]
 802bf1a:	2300      	movs	r3, #0
 802bf1c:	9303      	str	r3, [sp, #12]
 802bf1e:	88fb      	ldrh	r3, [r7, #6]
 802bf20:	9302      	str	r3, [sp, #8]
 802bf22:	68bb      	ldr	r3, [r7, #8]
 802bf24:	9301      	str	r3, [sp, #4]
 802bf26:	2301      	movs	r3, #1
 802bf28:	9300      	str	r3, [sp, #0]
 802bf2a:	2300      	movs	r3, #0
 802bf2c:	2201      	movs	r2, #1
 802bf2e:	68f8      	ldr	r0, [r7, #12]
 802bf30:	f000 fb09 	bl	802c546 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802bf34:	2300      	movs	r3, #0

}
 802bf36:	4618      	mov	r0, r3
 802bf38:	3710      	adds	r7, #16
 802bf3a:	46bd      	mov	sp, r7
 802bf3c:	bd80      	pop	{r7, pc}

0802bf3e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 802bf3e:	b580      	push	{r7, lr}
 802bf40:	b088      	sub	sp, #32
 802bf42:	af04      	add	r7, sp, #16
 802bf44:	60f8      	str	r0, [r7, #12]
 802bf46:	60b9      	str	r1, [r7, #8]
 802bf48:	4611      	mov	r1, r2
 802bf4a:	461a      	mov	r2, r3
 802bf4c:	460b      	mov	r3, r1
 802bf4e:	80fb      	strh	r3, [r7, #6]
 802bf50:	4613      	mov	r3, r2
 802bf52:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802bf54:	68fb      	ldr	r3, [r7, #12]
 802bf56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802bf5a:	2b00      	cmp	r3, #0
 802bf5c:	d001      	beq.n	802bf62 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 802bf5e:	2300      	movs	r3, #0
 802bf60:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802bf62:	7979      	ldrb	r1, [r7, #5]
 802bf64:	7e3b      	ldrb	r3, [r7, #24]
 802bf66:	9303      	str	r3, [sp, #12]
 802bf68:	88fb      	ldrh	r3, [r7, #6]
 802bf6a:	9302      	str	r3, [sp, #8]
 802bf6c:	68bb      	ldr	r3, [r7, #8]
 802bf6e:	9301      	str	r3, [sp, #4]
 802bf70:	2301      	movs	r3, #1
 802bf72:	9300      	str	r3, [sp, #0]
 802bf74:	2302      	movs	r3, #2
 802bf76:	2200      	movs	r2, #0
 802bf78:	68f8      	ldr	r0, [r7, #12]
 802bf7a:	f000 fae4 	bl	802c546 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 802bf7e:	2300      	movs	r3, #0
}
 802bf80:	4618      	mov	r0, r3
 802bf82:	3710      	adds	r7, #16
 802bf84:	46bd      	mov	sp, r7
 802bf86:	bd80      	pop	{r7, pc}

0802bf88 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 802bf88:	b580      	push	{r7, lr}
 802bf8a:	b088      	sub	sp, #32
 802bf8c:	af04      	add	r7, sp, #16
 802bf8e:	60f8      	str	r0, [r7, #12]
 802bf90:	60b9      	str	r1, [r7, #8]
 802bf92:	4611      	mov	r1, r2
 802bf94:	461a      	mov	r2, r3
 802bf96:	460b      	mov	r3, r1
 802bf98:	80fb      	strh	r3, [r7, #6]
 802bf9a:	4613      	mov	r3, r2
 802bf9c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802bf9e:	7979      	ldrb	r1, [r7, #5]
 802bfa0:	2300      	movs	r3, #0
 802bfa2:	9303      	str	r3, [sp, #12]
 802bfa4:	88fb      	ldrh	r3, [r7, #6]
 802bfa6:	9302      	str	r3, [sp, #8]
 802bfa8:	68bb      	ldr	r3, [r7, #8]
 802bfaa:	9301      	str	r3, [sp, #4]
 802bfac:	2301      	movs	r3, #1
 802bfae:	9300      	str	r3, [sp, #0]
 802bfb0:	2302      	movs	r3, #2
 802bfb2:	2201      	movs	r2, #1
 802bfb4:	68f8      	ldr	r0, [r7, #12]
 802bfb6:	f000 fac6 	bl	802c546 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802bfba:	2300      	movs	r3, #0
}
 802bfbc:	4618      	mov	r0, r3
 802bfbe:	3710      	adds	r7, #16
 802bfc0:	46bd      	mov	sp, r7
 802bfc2:	bd80      	pop	{r7, pc}

0802bfc4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802bfc4:	b580      	push	{r7, lr}
 802bfc6:	b086      	sub	sp, #24
 802bfc8:	af04      	add	r7, sp, #16
 802bfca:	6078      	str	r0, [r7, #4]
 802bfcc:	4608      	mov	r0, r1
 802bfce:	4611      	mov	r1, r2
 802bfd0:	461a      	mov	r2, r3
 802bfd2:	4603      	mov	r3, r0
 802bfd4:	70fb      	strb	r3, [r7, #3]
 802bfd6:	460b      	mov	r3, r1
 802bfd8:	70bb      	strb	r3, [r7, #2]
 802bfda:	4613      	mov	r3, r2
 802bfdc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 802bfde:	7878      	ldrb	r0, [r7, #1]
 802bfe0:	78ba      	ldrb	r2, [r7, #2]
 802bfe2:	78f9      	ldrb	r1, [r7, #3]
 802bfe4:	8b3b      	ldrh	r3, [r7, #24]
 802bfe6:	9302      	str	r3, [sp, #8]
 802bfe8:	7d3b      	ldrb	r3, [r7, #20]
 802bfea:	9301      	str	r3, [sp, #4]
 802bfec:	7c3b      	ldrb	r3, [r7, #16]
 802bfee:	9300      	str	r3, [sp, #0]
 802bff0:	4603      	mov	r3, r0
 802bff2:	6878      	ldr	r0, [r7, #4]
 802bff4:	f000 fa59 	bl	802c4aa <USBH_LL_OpenPipe>

  return USBH_OK;
 802bff8:	2300      	movs	r3, #0
}
 802bffa:	4618      	mov	r0, r3
 802bffc:	3708      	adds	r7, #8
 802bffe:	46bd      	mov	sp, r7
 802c000:	bd80      	pop	{r7, pc}

0802c002 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 802c002:	b580      	push	{r7, lr}
 802c004:	b082      	sub	sp, #8
 802c006:	af00      	add	r7, sp, #0
 802c008:	6078      	str	r0, [r7, #4]
 802c00a:	460b      	mov	r3, r1
 802c00c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 802c00e:	78fb      	ldrb	r3, [r7, #3]
 802c010:	4619      	mov	r1, r3
 802c012:	6878      	ldr	r0, [r7, #4]
 802c014:	f000 fa78 	bl	802c508 <USBH_LL_ClosePipe>

  return USBH_OK;
 802c018:	2300      	movs	r3, #0
}
 802c01a:	4618      	mov	r0, r3
 802c01c:	3708      	adds	r7, #8
 802c01e:	46bd      	mov	sp, r7
 802c020:	bd80      	pop	{r7, pc}

0802c022 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 802c022:	b580      	push	{r7, lr}
 802c024:	b084      	sub	sp, #16
 802c026:	af00      	add	r7, sp, #0
 802c028:	6078      	str	r0, [r7, #4]
 802c02a:	460b      	mov	r3, r1
 802c02c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 802c02e:	6878      	ldr	r0, [r7, #4]
 802c030:	f000 f836 	bl	802c0a0 <USBH_GetFreePipe>
 802c034:	4603      	mov	r3, r0
 802c036:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 802c038:	89fb      	ldrh	r3, [r7, #14]
 802c03a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802c03e:	4293      	cmp	r3, r2
 802c040:	d00a      	beq.n	802c058 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 802c042:	78fa      	ldrb	r2, [r7, #3]
 802c044:	89fb      	ldrh	r3, [r7, #14]
 802c046:	f003 030f 	and.w	r3, r3, #15
 802c04a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802c04e:	6879      	ldr	r1, [r7, #4]
 802c050:	33e0      	adds	r3, #224	; 0xe0
 802c052:	009b      	lsls	r3, r3, #2
 802c054:	440b      	add	r3, r1
 802c056:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 802c058:	89fb      	ldrh	r3, [r7, #14]
 802c05a:	b2db      	uxtb	r3, r3
}
 802c05c:	4618      	mov	r0, r3
 802c05e:	3710      	adds	r7, #16
 802c060:	46bd      	mov	sp, r7
 802c062:	bd80      	pop	{r7, pc}

0802c064 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 802c064:	b480      	push	{r7}
 802c066:	b083      	sub	sp, #12
 802c068:	af00      	add	r7, sp, #0
 802c06a:	6078      	str	r0, [r7, #4]
 802c06c:	460b      	mov	r3, r1
 802c06e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 802c070:	78fb      	ldrb	r3, [r7, #3]
 802c072:	2b0f      	cmp	r3, #15
 802c074:	d80d      	bhi.n	802c092 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 802c076:	78fb      	ldrb	r3, [r7, #3]
 802c078:	687a      	ldr	r2, [r7, #4]
 802c07a:	33e0      	adds	r3, #224	; 0xe0
 802c07c:	009b      	lsls	r3, r3, #2
 802c07e:	4413      	add	r3, r2
 802c080:	685a      	ldr	r2, [r3, #4]
 802c082:	78fb      	ldrb	r3, [r7, #3]
 802c084:	f3c2 020e 	ubfx	r2, r2, #0, #15
 802c088:	6879      	ldr	r1, [r7, #4]
 802c08a:	33e0      	adds	r3, #224	; 0xe0
 802c08c:	009b      	lsls	r3, r3, #2
 802c08e:	440b      	add	r3, r1
 802c090:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 802c092:	2300      	movs	r3, #0
}
 802c094:	4618      	mov	r0, r3
 802c096:	370c      	adds	r7, #12
 802c098:	46bd      	mov	sp, r7
 802c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c09e:	4770      	bx	lr

0802c0a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 802c0a0:	b480      	push	{r7}
 802c0a2:	b085      	sub	sp, #20
 802c0a4:	af00      	add	r7, sp, #0
 802c0a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 802c0a8:	2300      	movs	r3, #0
 802c0aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802c0ac:	2300      	movs	r3, #0
 802c0ae:	73fb      	strb	r3, [r7, #15]
 802c0b0:	e00f      	b.n	802c0d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 802c0b2:	7bfb      	ldrb	r3, [r7, #15]
 802c0b4:	687a      	ldr	r2, [r7, #4]
 802c0b6:	33e0      	adds	r3, #224	; 0xe0
 802c0b8:	009b      	lsls	r3, r3, #2
 802c0ba:	4413      	add	r3, r2
 802c0bc:	685b      	ldr	r3, [r3, #4]
 802c0be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802c0c2:	2b00      	cmp	r3, #0
 802c0c4:	d102      	bne.n	802c0cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 802c0c6:	7bfb      	ldrb	r3, [r7, #15]
 802c0c8:	b29b      	uxth	r3, r3
 802c0ca:	e007      	b.n	802c0dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802c0cc:	7bfb      	ldrb	r3, [r7, #15]
 802c0ce:	3301      	adds	r3, #1
 802c0d0:	73fb      	strb	r3, [r7, #15]
 802c0d2:	7bfb      	ldrb	r3, [r7, #15]
 802c0d4:	2b0f      	cmp	r3, #15
 802c0d6:	d9ec      	bls.n	802c0b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 802c0d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 802c0dc:	4618      	mov	r0, r3
 802c0de:	3714      	adds	r7, #20
 802c0e0:	46bd      	mov	sp, r7
 802c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c0e6:	4770      	bx	lr

0802c0e8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 802c0e8:	b580      	push	{r7, lr}
 802c0ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 802c0ec:	2200      	movs	r2, #0
 802c0ee:	490e      	ldr	r1, [pc, #56]	; (802c128 <MX_USB_HOST_Init+0x40>)
 802c0f0:	480e      	ldr	r0, [pc, #56]	; (802c12c <MX_USB_HOST_Init+0x44>)
 802c0f2:	f7fe fba7 	bl	802a844 <USBH_Init>
 802c0f6:	4603      	mov	r3, r0
 802c0f8:	2b00      	cmp	r3, #0
 802c0fa:	d001      	beq.n	802c100 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 802c0fc:	f7f4 fec2 	bl	8020e84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 802c100:	490b      	ldr	r1, [pc, #44]	; (802c130 <MX_USB_HOST_Init+0x48>)
 802c102:	480a      	ldr	r0, [pc, #40]	; (802c12c <MX_USB_HOST_Init+0x44>)
 802c104:	f7fe fc2c 	bl	802a960 <USBH_RegisterClass>
 802c108:	4603      	mov	r3, r0
 802c10a:	2b00      	cmp	r3, #0
 802c10c:	d001      	beq.n	802c112 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 802c10e:	f7f4 feb9 	bl	8020e84 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 802c112:	4806      	ldr	r0, [pc, #24]	; (802c12c <MX_USB_HOST_Init+0x44>)
 802c114:	f7fe fcb0 	bl	802aa78 <USBH_Start>
 802c118:	4603      	mov	r3, r0
 802c11a:	2b00      	cmp	r3, #0
 802c11c:	d001      	beq.n	802c122 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 802c11e:	f7f4 feb1 	bl	8020e84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 802c122:	bf00      	nop
 802c124:	bd80      	pop	{r7, pc}
 802c126:	bf00      	nop
 802c128:	0802c149 	.word	0x0802c149
 802c12c:	200006ac 	.word	0x200006ac
 802c130:	2000005c 	.word	0x2000005c

0802c134 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 802c134:	b580      	push	{r7, lr}
 802c136:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 802c138:	4802      	ldr	r0, [pc, #8]	; (802c144 <MX_USB_HOST_Process+0x10>)
 802c13a:	f7fe fcad 	bl	802aa98 <USBH_Process>
}
 802c13e:	bf00      	nop
 802c140:	bd80      	pop	{r7, pc}
 802c142:	bf00      	nop
 802c144:	200006ac 	.word	0x200006ac

0802c148 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 802c148:	b480      	push	{r7}
 802c14a:	b083      	sub	sp, #12
 802c14c:	af00      	add	r7, sp, #0
 802c14e:	6078      	str	r0, [r7, #4]
 802c150:	460b      	mov	r3, r1
 802c152:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 802c154:	78fb      	ldrb	r3, [r7, #3]
 802c156:	3b01      	subs	r3, #1
 802c158:	2b04      	cmp	r3, #4
 802c15a:	d819      	bhi.n	802c190 <USBH_UserProcess+0x48>
 802c15c:	a201      	add	r2, pc, #4	; (adr r2, 802c164 <USBH_UserProcess+0x1c>)
 802c15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c162:	bf00      	nop
 802c164:	0802c191 	.word	0x0802c191
 802c168:	0802c181 	.word	0x0802c181
 802c16c:	0802c191 	.word	0x0802c191
 802c170:	0802c189 	.word	0x0802c189
 802c174:	0802c179 	.word	0x0802c179
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 802c178:	4b09      	ldr	r3, [pc, #36]	; (802c1a0 <USBH_UserProcess+0x58>)
 802c17a:	2203      	movs	r2, #3
 802c17c:	701a      	strb	r2, [r3, #0]
  break;
 802c17e:	e008      	b.n	802c192 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 802c180:	4b07      	ldr	r3, [pc, #28]	; (802c1a0 <USBH_UserProcess+0x58>)
 802c182:	2202      	movs	r2, #2
 802c184:	701a      	strb	r2, [r3, #0]
  break;
 802c186:	e004      	b.n	802c192 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 802c188:	4b05      	ldr	r3, [pc, #20]	; (802c1a0 <USBH_UserProcess+0x58>)
 802c18a:	2201      	movs	r2, #1
 802c18c:	701a      	strb	r2, [r3, #0]
  break;
 802c18e:	e000      	b.n	802c192 <USBH_UserProcess+0x4a>

  default:
  break;
 802c190:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 802c192:	bf00      	nop
 802c194:	370c      	adds	r7, #12
 802c196:	46bd      	mov	sp, r7
 802c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c19c:	4770      	bx	lr
 802c19e:	bf00      	nop
 802c1a0:	20000a84 	.word	0x20000a84

0802c1a4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 802c1a4:	b580      	push	{r7, lr}
 802c1a6:	b08a      	sub	sp, #40	; 0x28
 802c1a8:	af00      	add	r7, sp, #0
 802c1aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802c1ac:	f107 0314 	add.w	r3, r7, #20
 802c1b0:	2200      	movs	r2, #0
 802c1b2:	601a      	str	r2, [r3, #0]
 802c1b4:	605a      	str	r2, [r3, #4]
 802c1b6:	609a      	str	r2, [r3, #8]
 802c1b8:	60da      	str	r2, [r3, #12]
 802c1ba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 802c1bc:	687b      	ldr	r3, [r7, #4]
 802c1be:	681b      	ldr	r3, [r3, #0]
 802c1c0:	4a24      	ldr	r2, [pc, #144]	; (802c254 <HAL_HCD_MspInit+0xb0>)
 802c1c2:	4293      	cmp	r3, r2
 802c1c4:	d141      	bne.n	802c24a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802c1c6:	2300      	movs	r3, #0
 802c1c8:	613b      	str	r3, [r7, #16]
 802c1ca:	4b23      	ldr	r3, [pc, #140]	; (802c258 <HAL_HCD_MspInit+0xb4>)
 802c1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c1ce:	4a22      	ldr	r2, [pc, #136]	; (802c258 <HAL_HCD_MspInit+0xb4>)
 802c1d0:	f043 0302 	orr.w	r3, r3, #2
 802c1d4:	6313      	str	r3, [r2, #48]	; 0x30
 802c1d6:	4b20      	ldr	r3, [pc, #128]	; (802c258 <HAL_HCD_MspInit+0xb4>)
 802c1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c1da:	f003 0302 	and.w	r3, r3, #2
 802c1de:	613b      	str	r3, [r7, #16]
 802c1e0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 802c1e2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 802c1e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802c1e8:	2302      	movs	r3, #2
 802c1ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802c1ec:	2300      	movs	r3, #0
 802c1ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802c1f0:	2300      	movs	r3, #0
 802c1f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 802c1f4:	230c      	movs	r3, #12
 802c1f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802c1f8:	f107 0314 	add.w	r3, r7, #20
 802c1fc:	4619      	mov	r1, r3
 802c1fe:	4817      	ldr	r0, [pc, #92]	; (802c25c <HAL_HCD_MspInit+0xb8>)
 802c200:	f7f7 fc82 	bl	8023b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 802c204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802c208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802c20a:	2300      	movs	r3, #0
 802c20c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802c20e:	2300      	movs	r3, #0
 802c210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 802c212:	f107 0314 	add.w	r3, r7, #20
 802c216:	4619      	mov	r1, r3
 802c218:	4810      	ldr	r0, [pc, #64]	; (802c25c <HAL_HCD_MspInit+0xb8>)
 802c21a:	f7f7 fc75 	bl	8023b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 802c21e:	2300      	movs	r3, #0
 802c220:	60fb      	str	r3, [r7, #12]
 802c222:	4b0d      	ldr	r3, [pc, #52]	; (802c258 <HAL_HCD_MspInit+0xb4>)
 802c224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c226:	4a0c      	ldr	r2, [pc, #48]	; (802c258 <HAL_HCD_MspInit+0xb4>)
 802c228:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802c22c:	6313      	str	r3, [r2, #48]	; 0x30
 802c22e:	4b0a      	ldr	r3, [pc, #40]	; (802c258 <HAL_HCD_MspInit+0xb4>)
 802c230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802c236:	60fb      	str	r3, [r7, #12]
 802c238:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 802c23a:	2200      	movs	r2, #0
 802c23c:	2100      	movs	r1, #0
 802c23e:	204d      	movs	r0, #77	; 0x4d
 802c240:	f7f6 fec2 	bl	8022fc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 802c244:	204d      	movs	r0, #77	; 0x4d
 802c246:	f7f6 fedb 	bl	8023000 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 802c24a:	bf00      	nop
 802c24c:	3728      	adds	r7, #40	; 0x28
 802c24e:	46bd      	mov	sp, r7
 802c250:	bd80      	pop	{r7, pc}
 802c252:	bf00      	nop
 802c254:	40040000 	.word	0x40040000
 802c258:	40023800 	.word	0x40023800
 802c25c:	40020400 	.word	0x40020400

0802c260 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 802c260:	b580      	push	{r7, lr}
 802c262:	b082      	sub	sp, #8
 802c264:	af00      	add	r7, sp, #0
 802c266:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 802c268:	687b      	ldr	r3, [r7, #4]
 802c26a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802c26e:	4618      	mov	r0, r3
 802c270:	f7fe fff1 	bl	802b256 <USBH_LL_IncTimer>
}
 802c274:	bf00      	nop
 802c276:	3708      	adds	r7, #8
 802c278:	46bd      	mov	sp, r7
 802c27a:	bd80      	pop	{r7, pc}

0802c27c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 802c27c:	b580      	push	{r7, lr}
 802c27e:	b082      	sub	sp, #8
 802c280:	af00      	add	r7, sp, #0
 802c282:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 802c284:	687b      	ldr	r3, [r7, #4]
 802c286:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802c28a:	4618      	mov	r0, r3
 802c28c:	f7ff f829 	bl	802b2e2 <USBH_LL_Connect>
}
 802c290:	bf00      	nop
 802c292:	3708      	adds	r7, #8
 802c294:	46bd      	mov	sp, r7
 802c296:	bd80      	pop	{r7, pc}

0802c298 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 802c298:	b580      	push	{r7, lr}
 802c29a:	b082      	sub	sp, #8
 802c29c:	af00      	add	r7, sp, #0
 802c29e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 802c2a0:	687b      	ldr	r3, [r7, #4]
 802c2a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802c2a6:	4618      	mov	r0, r3
 802c2a8:	f7ff f832 	bl	802b310 <USBH_LL_Disconnect>
}
 802c2ac:	bf00      	nop
 802c2ae:	3708      	adds	r7, #8
 802c2b0:	46bd      	mov	sp, r7
 802c2b2:	bd80      	pop	{r7, pc}

0802c2b4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 802c2b4:	b480      	push	{r7}
 802c2b6:	b083      	sub	sp, #12
 802c2b8:	af00      	add	r7, sp, #0
 802c2ba:	6078      	str	r0, [r7, #4]
 802c2bc:	460b      	mov	r3, r1
 802c2be:	70fb      	strb	r3, [r7, #3]
 802c2c0:	4613      	mov	r3, r2
 802c2c2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 802c2c4:	bf00      	nop
 802c2c6:	370c      	adds	r7, #12
 802c2c8:	46bd      	mov	sp, r7
 802c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c2ce:	4770      	bx	lr

0802c2d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802c2d0:	b580      	push	{r7, lr}
 802c2d2:	b082      	sub	sp, #8
 802c2d4:	af00      	add	r7, sp, #0
 802c2d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 802c2d8:	687b      	ldr	r3, [r7, #4]
 802c2da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802c2de:	4618      	mov	r0, r3
 802c2e0:	f7fe ffe3 	bl	802b2aa <USBH_LL_PortEnabled>
}
 802c2e4:	bf00      	nop
 802c2e6:	3708      	adds	r7, #8
 802c2e8:	46bd      	mov	sp, r7
 802c2ea:	bd80      	pop	{r7, pc}

0802c2ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802c2ec:	b580      	push	{r7, lr}
 802c2ee:	b082      	sub	sp, #8
 802c2f0:	af00      	add	r7, sp, #0
 802c2f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 802c2f4:	687b      	ldr	r3, [r7, #4]
 802c2f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802c2fa:	4618      	mov	r0, r3
 802c2fc:	f7fe ffe3 	bl	802b2c6 <USBH_LL_PortDisabled>
}
 802c300:	bf00      	nop
 802c302:	3708      	adds	r7, #8
 802c304:	46bd      	mov	sp, r7
 802c306:	bd80      	pop	{r7, pc}

0802c308 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 802c308:	b580      	push	{r7, lr}
 802c30a:	b082      	sub	sp, #8
 802c30c:	af00      	add	r7, sp, #0
 802c30e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 802c310:	687b      	ldr	r3, [r7, #4]
 802c312:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802c316:	2b00      	cmp	r3, #0
 802c318:	d132      	bne.n	802c380 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 802c31a:	4a1c      	ldr	r2, [pc, #112]	; (802c38c <USBH_LL_Init+0x84>)
 802c31c:	687b      	ldr	r3, [r7, #4]
 802c31e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 802c322:	687b      	ldr	r3, [r7, #4]
 802c324:	4a19      	ldr	r2, [pc, #100]	; (802c38c <USBH_LL_Init+0x84>)
 802c326:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 802c32a:	4b18      	ldr	r3, [pc, #96]	; (802c38c <USBH_LL_Init+0x84>)
 802c32c:	4a18      	ldr	r2, [pc, #96]	; (802c390 <USBH_LL_Init+0x88>)
 802c32e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 802c330:	4b16      	ldr	r3, [pc, #88]	; (802c38c <USBH_LL_Init+0x84>)
 802c332:	220c      	movs	r2, #12
 802c334:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 802c336:	4b15      	ldr	r3, [pc, #84]	; (802c38c <USBH_LL_Init+0x84>)
 802c338:	2201      	movs	r2, #1
 802c33a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 802c33c:	4b13      	ldr	r3, [pc, #76]	; (802c38c <USBH_LL_Init+0x84>)
 802c33e:	2200      	movs	r2, #0
 802c340:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 802c342:	4b12      	ldr	r3, [pc, #72]	; (802c38c <USBH_LL_Init+0x84>)
 802c344:	2202      	movs	r2, #2
 802c346:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 802c348:	4b10      	ldr	r3, [pc, #64]	; (802c38c <USBH_LL_Init+0x84>)
 802c34a:	2200      	movs	r2, #0
 802c34c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 802c34e:	4b0f      	ldr	r3, [pc, #60]	; (802c38c <USBH_LL_Init+0x84>)
 802c350:	2200      	movs	r2, #0
 802c352:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 802c354:	4b0d      	ldr	r3, [pc, #52]	; (802c38c <USBH_LL_Init+0x84>)
 802c356:	2200      	movs	r2, #0
 802c358:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 802c35a:	4b0c      	ldr	r3, [pc, #48]	; (802c38c <USBH_LL_Init+0x84>)
 802c35c:	2200      	movs	r2, #0
 802c35e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 802c360:	480a      	ldr	r0, [pc, #40]	; (802c38c <USBH_LL_Init+0x84>)
 802c362:	f7f7 febb 	bl	80240dc <HAL_HCD_Init>
 802c366:	4603      	mov	r3, r0
 802c368:	2b00      	cmp	r3, #0
 802c36a:	d001      	beq.n	802c370 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 802c36c:	f7f4 fd8a 	bl	8020e84 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 802c370:	4806      	ldr	r0, [pc, #24]	; (802c38c <USBH_LL_Init+0x84>)
 802c372:	f7f8 fa9e 	bl	80248b2 <HAL_HCD_GetCurrentFrame>
 802c376:	4603      	mov	r3, r0
 802c378:	4619      	mov	r1, r3
 802c37a:	6878      	ldr	r0, [r7, #4]
 802c37c:	f7fe ff5c 	bl	802b238 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 802c380:	2300      	movs	r3, #0
}
 802c382:	4618      	mov	r0, r3
 802c384:	3708      	adds	r7, #8
 802c386:	46bd      	mov	sp, r7
 802c388:	bd80      	pop	{r7, pc}
 802c38a:	bf00      	nop
 802c38c:	20000a88 	.word	0x20000a88
 802c390:	40040000 	.word	0x40040000

0802c394 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 802c394:	b580      	push	{r7, lr}
 802c396:	b084      	sub	sp, #16
 802c398:	af00      	add	r7, sp, #0
 802c39a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802c39c:	2300      	movs	r3, #0
 802c39e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802c3a0:	2300      	movs	r3, #0
 802c3a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 802c3a4:	687b      	ldr	r3, [r7, #4]
 802c3a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802c3aa:	4618      	mov	r0, r3
 802c3ac:	f7f8 fa0b 	bl	80247c6 <HAL_HCD_Start>
 802c3b0:	4603      	mov	r3, r0
 802c3b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802c3b4:	7bfb      	ldrb	r3, [r7, #15]
 802c3b6:	4618      	mov	r0, r3
 802c3b8:	f000 f95c 	bl	802c674 <USBH_Get_USB_Status>
 802c3bc:	4603      	mov	r3, r0
 802c3be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802c3c0:	7bbb      	ldrb	r3, [r7, #14]
}
 802c3c2:	4618      	mov	r0, r3
 802c3c4:	3710      	adds	r7, #16
 802c3c6:	46bd      	mov	sp, r7
 802c3c8:	bd80      	pop	{r7, pc}

0802c3ca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 802c3ca:	b580      	push	{r7, lr}
 802c3cc:	b084      	sub	sp, #16
 802c3ce:	af00      	add	r7, sp, #0
 802c3d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802c3d2:	2300      	movs	r3, #0
 802c3d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802c3d6:	2300      	movs	r3, #0
 802c3d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 802c3da:	687b      	ldr	r3, [r7, #4]
 802c3dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802c3e0:	4618      	mov	r0, r3
 802c3e2:	f7f8 fa13 	bl	802480c <HAL_HCD_Stop>
 802c3e6:	4603      	mov	r3, r0
 802c3e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802c3ea:	7bfb      	ldrb	r3, [r7, #15]
 802c3ec:	4618      	mov	r0, r3
 802c3ee:	f000 f941 	bl	802c674 <USBH_Get_USB_Status>
 802c3f2:	4603      	mov	r3, r0
 802c3f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802c3f6:	7bbb      	ldrb	r3, [r7, #14]
}
 802c3f8:	4618      	mov	r0, r3
 802c3fa:	3710      	adds	r7, #16
 802c3fc:	46bd      	mov	sp, r7
 802c3fe:	bd80      	pop	{r7, pc}

0802c400 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 802c400:	b580      	push	{r7, lr}
 802c402:	b084      	sub	sp, #16
 802c404:	af00      	add	r7, sp, #0
 802c406:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 802c408:	2301      	movs	r3, #1
 802c40a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 802c40c:	687b      	ldr	r3, [r7, #4]
 802c40e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802c412:	4618      	mov	r0, r3
 802c414:	f7f8 fa5b 	bl	80248ce <HAL_HCD_GetCurrentSpeed>
 802c418:	4603      	mov	r3, r0
 802c41a:	2b02      	cmp	r3, #2
 802c41c:	d00c      	beq.n	802c438 <USBH_LL_GetSpeed+0x38>
 802c41e:	2b02      	cmp	r3, #2
 802c420:	d80d      	bhi.n	802c43e <USBH_LL_GetSpeed+0x3e>
 802c422:	2b00      	cmp	r3, #0
 802c424:	d002      	beq.n	802c42c <USBH_LL_GetSpeed+0x2c>
 802c426:	2b01      	cmp	r3, #1
 802c428:	d003      	beq.n	802c432 <USBH_LL_GetSpeed+0x32>
 802c42a:	e008      	b.n	802c43e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 802c42c:	2300      	movs	r3, #0
 802c42e:	73fb      	strb	r3, [r7, #15]
    break;
 802c430:	e008      	b.n	802c444 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 802c432:	2301      	movs	r3, #1
 802c434:	73fb      	strb	r3, [r7, #15]
    break;
 802c436:	e005      	b.n	802c444 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 802c438:	2302      	movs	r3, #2
 802c43a:	73fb      	strb	r3, [r7, #15]
    break;
 802c43c:	e002      	b.n	802c444 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 802c43e:	2301      	movs	r3, #1
 802c440:	73fb      	strb	r3, [r7, #15]
    break;
 802c442:	bf00      	nop
  }
  return  speed;
 802c444:	7bfb      	ldrb	r3, [r7, #15]
}
 802c446:	4618      	mov	r0, r3
 802c448:	3710      	adds	r7, #16
 802c44a:	46bd      	mov	sp, r7
 802c44c:	bd80      	pop	{r7, pc}

0802c44e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 802c44e:	b580      	push	{r7, lr}
 802c450:	b084      	sub	sp, #16
 802c452:	af00      	add	r7, sp, #0
 802c454:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802c456:	2300      	movs	r3, #0
 802c458:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802c45a:	2300      	movs	r3, #0
 802c45c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 802c45e:	687b      	ldr	r3, [r7, #4]
 802c460:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802c464:	4618      	mov	r0, r3
 802c466:	f7f8 f9ee 	bl	8024846 <HAL_HCD_ResetPort>
 802c46a:	4603      	mov	r3, r0
 802c46c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802c46e:	7bfb      	ldrb	r3, [r7, #15]
 802c470:	4618      	mov	r0, r3
 802c472:	f000 f8ff 	bl	802c674 <USBH_Get_USB_Status>
 802c476:	4603      	mov	r3, r0
 802c478:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802c47a:	7bbb      	ldrb	r3, [r7, #14]
}
 802c47c:	4618      	mov	r0, r3
 802c47e:	3710      	adds	r7, #16
 802c480:	46bd      	mov	sp, r7
 802c482:	bd80      	pop	{r7, pc}

0802c484 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802c484:	b580      	push	{r7, lr}
 802c486:	b082      	sub	sp, #8
 802c488:	af00      	add	r7, sp, #0
 802c48a:	6078      	str	r0, [r7, #4]
 802c48c:	460b      	mov	r3, r1
 802c48e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 802c490:	687b      	ldr	r3, [r7, #4]
 802c492:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802c496:	78fa      	ldrb	r2, [r7, #3]
 802c498:	4611      	mov	r1, r2
 802c49a:	4618      	mov	r0, r3
 802c49c:	f7f8 f9f5 	bl	802488a <HAL_HCD_HC_GetXferCount>
 802c4a0:	4603      	mov	r3, r0
}
 802c4a2:	4618      	mov	r0, r3
 802c4a4:	3708      	adds	r7, #8
 802c4a6:	46bd      	mov	sp, r7
 802c4a8:	bd80      	pop	{r7, pc}

0802c4aa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802c4aa:	b590      	push	{r4, r7, lr}
 802c4ac:	b089      	sub	sp, #36	; 0x24
 802c4ae:	af04      	add	r7, sp, #16
 802c4b0:	6078      	str	r0, [r7, #4]
 802c4b2:	4608      	mov	r0, r1
 802c4b4:	4611      	mov	r1, r2
 802c4b6:	461a      	mov	r2, r3
 802c4b8:	4603      	mov	r3, r0
 802c4ba:	70fb      	strb	r3, [r7, #3]
 802c4bc:	460b      	mov	r3, r1
 802c4be:	70bb      	strb	r3, [r7, #2]
 802c4c0:	4613      	mov	r3, r2
 802c4c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802c4c4:	2300      	movs	r3, #0
 802c4c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802c4c8:	2300      	movs	r3, #0
 802c4ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 802c4cc:	687b      	ldr	r3, [r7, #4]
 802c4ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802c4d2:	787c      	ldrb	r4, [r7, #1]
 802c4d4:	78ba      	ldrb	r2, [r7, #2]
 802c4d6:	78f9      	ldrb	r1, [r7, #3]
 802c4d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802c4da:	9302      	str	r3, [sp, #8]
 802c4dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802c4e0:	9301      	str	r3, [sp, #4]
 802c4e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 802c4e6:	9300      	str	r3, [sp, #0]
 802c4e8:	4623      	mov	r3, r4
 802c4ea:	f7f7 fe59 	bl	80241a0 <HAL_HCD_HC_Init>
 802c4ee:	4603      	mov	r3, r0
 802c4f0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 802c4f2:	7bfb      	ldrb	r3, [r7, #15]
 802c4f4:	4618      	mov	r0, r3
 802c4f6:	f000 f8bd 	bl	802c674 <USBH_Get_USB_Status>
 802c4fa:	4603      	mov	r3, r0
 802c4fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802c4fe:	7bbb      	ldrb	r3, [r7, #14]
}
 802c500:	4618      	mov	r0, r3
 802c502:	3714      	adds	r7, #20
 802c504:	46bd      	mov	sp, r7
 802c506:	bd90      	pop	{r4, r7, pc}

0802c508 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802c508:	b580      	push	{r7, lr}
 802c50a:	b084      	sub	sp, #16
 802c50c:	af00      	add	r7, sp, #0
 802c50e:	6078      	str	r0, [r7, #4]
 802c510:	460b      	mov	r3, r1
 802c512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802c514:	2300      	movs	r3, #0
 802c516:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802c518:	2300      	movs	r3, #0
 802c51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 802c51c:	687b      	ldr	r3, [r7, #4]
 802c51e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802c522:	78fa      	ldrb	r2, [r7, #3]
 802c524:	4611      	mov	r1, r2
 802c526:	4618      	mov	r0, r3
 802c528:	f7f7 fec9 	bl	80242be <HAL_HCD_HC_Halt>
 802c52c:	4603      	mov	r3, r0
 802c52e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802c530:	7bfb      	ldrb	r3, [r7, #15]
 802c532:	4618      	mov	r0, r3
 802c534:	f000 f89e 	bl	802c674 <USBH_Get_USB_Status>
 802c538:	4603      	mov	r3, r0
 802c53a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802c53c:	7bbb      	ldrb	r3, [r7, #14]
}
 802c53e:	4618      	mov	r0, r3
 802c540:	3710      	adds	r7, #16
 802c542:	46bd      	mov	sp, r7
 802c544:	bd80      	pop	{r7, pc}

0802c546 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 802c546:	b590      	push	{r4, r7, lr}
 802c548:	b089      	sub	sp, #36	; 0x24
 802c54a:	af04      	add	r7, sp, #16
 802c54c:	6078      	str	r0, [r7, #4]
 802c54e:	4608      	mov	r0, r1
 802c550:	4611      	mov	r1, r2
 802c552:	461a      	mov	r2, r3
 802c554:	4603      	mov	r3, r0
 802c556:	70fb      	strb	r3, [r7, #3]
 802c558:	460b      	mov	r3, r1
 802c55a:	70bb      	strb	r3, [r7, #2]
 802c55c:	4613      	mov	r3, r2
 802c55e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802c560:	2300      	movs	r3, #0
 802c562:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802c564:	2300      	movs	r3, #0
 802c566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 802c568:	687b      	ldr	r3, [r7, #4]
 802c56a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802c56e:	787c      	ldrb	r4, [r7, #1]
 802c570:	78ba      	ldrb	r2, [r7, #2]
 802c572:	78f9      	ldrb	r1, [r7, #3]
 802c574:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802c578:	9303      	str	r3, [sp, #12]
 802c57a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802c57c:	9302      	str	r3, [sp, #8]
 802c57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c580:	9301      	str	r3, [sp, #4]
 802c582:	f897 3020 	ldrb.w	r3, [r7, #32]
 802c586:	9300      	str	r3, [sp, #0]
 802c588:	4623      	mov	r3, r4
 802c58a:	f7f7 febb 	bl	8024304 <HAL_HCD_HC_SubmitRequest>
 802c58e:	4603      	mov	r3, r0
 802c590:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 802c592:	7bfb      	ldrb	r3, [r7, #15]
 802c594:	4618      	mov	r0, r3
 802c596:	f000 f86d 	bl	802c674 <USBH_Get_USB_Status>
 802c59a:	4603      	mov	r3, r0
 802c59c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802c59e:	7bbb      	ldrb	r3, [r7, #14]
}
 802c5a0:	4618      	mov	r0, r3
 802c5a2:	3714      	adds	r7, #20
 802c5a4:	46bd      	mov	sp, r7
 802c5a6:	bd90      	pop	{r4, r7, pc}

0802c5a8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802c5a8:	b580      	push	{r7, lr}
 802c5aa:	b082      	sub	sp, #8
 802c5ac:	af00      	add	r7, sp, #0
 802c5ae:	6078      	str	r0, [r7, #4]
 802c5b0:	460b      	mov	r3, r1
 802c5b2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 802c5b4:	687b      	ldr	r3, [r7, #4]
 802c5b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802c5ba:	78fa      	ldrb	r2, [r7, #3]
 802c5bc:	4611      	mov	r1, r2
 802c5be:	4618      	mov	r0, r3
 802c5c0:	f7f8 f94f 	bl	8024862 <HAL_HCD_HC_GetURBState>
 802c5c4:	4603      	mov	r3, r0
}
 802c5c6:	4618      	mov	r0, r3
 802c5c8:	3708      	adds	r7, #8
 802c5ca:	46bd      	mov	sp, r7
 802c5cc:	bd80      	pop	{r7, pc}

0802c5ce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 802c5ce:	b580      	push	{r7, lr}
 802c5d0:	b082      	sub	sp, #8
 802c5d2:	af00      	add	r7, sp, #0
 802c5d4:	6078      	str	r0, [r7, #4]
 802c5d6:	460b      	mov	r3, r1
 802c5d8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 802c5da:	687b      	ldr	r3, [r7, #4]
 802c5dc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802c5e0:	2b00      	cmp	r3, #0
 802c5e2:	d103      	bne.n	802c5ec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 802c5e4:	78fb      	ldrb	r3, [r7, #3]
 802c5e6:	4618      	mov	r0, r3
 802c5e8:	f000 f870 	bl	802c6cc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 802c5ec:	20c8      	movs	r0, #200	; 0xc8
 802c5ee:	f7f6 fc0f 	bl	8022e10 <HAL_Delay>
  return USBH_OK;
 802c5f2:	2300      	movs	r3, #0
}
 802c5f4:	4618      	mov	r0, r3
 802c5f6:	3708      	adds	r7, #8
 802c5f8:	46bd      	mov	sp, r7
 802c5fa:	bd80      	pop	{r7, pc}

0802c5fc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 802c5fc:	b480      	push	{r7}
 802c5fe:	b085      	sub	sp, #20
 802c600:	af00      	add	r7, sp, #0
 802c602:	6078      	str	r0, [r7, #4]
 802c604:	460b      	mov	r3, r1
 802c606:	70fb      	strb	r3, [r7, #3]
 802c608:	4613      	mov	r3, r2
 802c60a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 802c60c:	687b      	ldr	r3, [r7, #4]
 802c60e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802c612:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 802c614:	78fb      	ldrb	r3, [r7, #3]
 802c616:	68fa      	ldr	r2, [r7, #12]
 802c618:	212c      	movs	r1, #44	; 0x2c
 802c61a:	fb01 f303 	mul.w	r3, r1, r3
 802c61e:	4413      	add	r3, r2
 802c620:	333b      	adds	r3, #59	; 0x3b
 802c622:	781b      	ldrb	r3, [r3, #0]
 802c624:	2b00      	cmp	r3, #0
 802c626:	d009      	beq.n	802c63c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 802c628:	78fb      	ldrb	r3, [r7, #3]
 802c62a:	68fa      	ldr	r2, [r7, #12]
 802c62c:	212c      	movs	r1, #44	; 0x2c
 802c62e:	fb01 f303 	mul.w	r3, r1, r3
 802c632:	4413      	add	r3, r2
 802c634:	3354      	adds	r3, #84	; 0x54
 802c636:	78ba      	ldrb	r2, [r7, #2]
 802c638:	701a      	strb	r2, [r3, #0]
 802c63a:	e008      	b.n	802c64e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 802c63c:	78fb      	ldrb	r3, [r7, #3]
 802c63e:	68fa      	ldr	r2, [r7, #12]
 802c640:	212c      	movs	r1, #44	; 0x2c
 802c642:	fb01 f303 	mul.w	r3, r1, r3
 802c646:	4413      	add	r3, r2
 802c648:	3355      	adds	r3, #85	; 0x55
 802c64a:	78ba      	ldrb	r2, [r7, #2]
 802c64c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 802c64e:	2300      	movs	r3, #0
}
 802c650:	4618      	mov	r0, r3
 802c652:	3714      	adds	r7, #20
 802c654:	46bd      	mov	sp, r7
 802c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c65a:	4770      	bx	lr

0802c65c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 802c65c:	b580      	push	{r7, lr}
 802c65e:	b082      	sub	sp, #8
 802c660:	af00      	add	r7, sp, #0
 802c662:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 802c664:	6878      	ldr	r0, [r7, #4]
 802c666:	f7f6 fbd3 	bl	8022e10 <HAL_Delay>
}
 802c66a:	bf00      	nop
 802c66c:	3708      	adds	r7, #8
 802c66e:	46bd      	mov	sp, r7
 802c670:	bd80      	pop	{r7, pc}
	...

0802c674 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802c674:	b480      	push	{r7}
 802c676:	b085      	sub	sp, #20
 802c678:	af00      	add	r7, sp, #0
 802c67a:	4603      	mov	r3, r0
 802c67c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802c67e:	2300      	movs	r3, #0
 802c680:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802c682:	79fb      	ldrb	r3, [r7, #7]
 802c684:	2b03      	cmp	r3, #3
 802c686:	d817      	bhi.n	802c6b8 <USBH_Get_USB_Status+0x44>
 802c688:	a201      	add	r2, pc, #4	; (adr r2, 802c690 <USBH_Get_USB_Status+0x1c>)
 802c68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c68e:	bf00      	nop
 802c690:	0802c6a1 	.word	0x0802c6a1
 802c694:	0802c6a7 	.word	0x0802c6a7
 802c698:	0802c6ad 	.word	0x0802c6ad
 802c69c:	0802c6b3 	.word	0x0802c6b3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 802c6a0:	2300      	movs	r3, #0
 802c6a2:	73fb      	strb	r3, [r7, #15]
    break;
 802c6a4:	e00b      	b.n	802c6be <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 802c6a6:	2302      	movs	r3, #2
 802c6a8:	73fb      	strb	r3, [r7, #15]
    break;
 802c6aa:	e008      	b.n	802c6be <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 802c6ac:	2301      	movs	r3, #1
 802c6ae:	73fb      	strb	r3, [r7, #15]
    break;
 802c6b0:	e005      	b.n	802c6be <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 802c6b2:	2302      	movs	r3, #2
 802c6b4:	73fb      	strb	r3, [r7, #15]
    break;
 802c6b6:	e002      	b.n	802c6be <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 802c6b8:	2302      	movs	r3, #2
 802c6ba:	73fb      	strb	r3, [r7, #15]
    break;
 802c6bc:	bf00      	nop
  }
  return usb_status;
 802c6be:	7bfb      	ldrb	r3, [r7, #15]
}
 802c6c0:	4618      	mov	r0, r3
 802c6c2:	3714      	adds	r7, #20
 802c6c4:	46bd      	mov	sp, r7
 802c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c6ca:	4770      	bx	lr

0802c6cc <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 802c6cc:	b580      	push	{r7, lr}
 802c6ce:	b084      	sub	sp, #16
 802c6d0:	af00      	add	r7, sp, #0
 802c6d2:	4603      	mov	r3, r0
 802c6d4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 802c6d6:	79fb      	ldrb	r3, [r7, #7]
 802c6d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 802c6da:	79fb      	ldrb	r3, [r7, #7]
 802c6dc:	2b00      	cmp	r3, #0
 802c6de:	d102      	bne.n	802c6e6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 802c6e0:	2301      	movs	r3, #1
 802c6e2:	73fb      	strb	r3, [r7, #15]
 802c6e4:	e001      	b.n	802c6ea <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 802c6e6:	2300      	movs	r3, #0
 802c6e8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 802c6ea:	7bfb      	ldrb	r3, [r7, #15]
 802c6ec:	461a      	mov	r2, r3
 802c6ee:	2110      	movs	r1, #16
 802c6f0:	4803      	ldr	r0, [pc, #12]	; (802c700 <MX_DriverVbusHS+0x34>)
 802c6f2:	f7f7 fcc1 	bl	8024078 <HAL_GPIO_WritePin>
}
 802c6f6:	bf00      	nop
 802c6f8:	3710      	adds	r7, #16
 802c6fa:	46bd      	mov	sp, r7
 802c6fc:	bd80      	pop	{r7, pc}
 802c6fe:	bf00      	nop
 802c700:	40020800 	.word	0x40020800

0802c704 <__errno>:
 802c704:	4b01      	ldr	r3, [pc, #4]	; (802c70c <__errno+0x8>)
 802c706:	6818      	ldr	r0, [r3, #0]
 802c708:	4770      	bx	lr
 802c70a:	bf00      	nop
 802c70c:	2000007c 	.word	0x2000007c

0802c710 <__libc_init_array>:
 802c710:	b570      	push	{r4, r5, r6, lr}
 802c712:	4d0d      	ldr	r5, [pc, #52]	; (802c748 <__libc_init_array+0x38>)
 802c714:	4c0d      	ldr	r4, [pc, #52]	; (802c74c <__libc_init_array+0x3c>)
 802c716:	1b64      	subs	r4, r4, r5
 802c718:	10a4      	asrs	r4, r4, #2
 802c71a:	2600      	movs	r6, #0
 802c71c:	42a6      	cmp	r6, r4
 802c71e:	d109      	bne.n	802c734 <__libc_init_array+0x24>
 802c720:	4d0b      	ldr	r5, [pc, #44]	; (802c750 <__libc_init_array+0x40>)
 802c722:	4c0c      	ldr	r4, [pc, #48]	; (802c754 <__libc_init_array+0x44>)
 802c724:	f001 f99a 	bl	802da5c <_init>
 802c728:	1b64      	subs	r4, r4, r5
 802c72a:	10a4      	asrs	r4, r4, #2
 802c72c:	2600      	movs	r6, #0
 802c72e:	42a6      	cmp	r6, r4
 802c730:	d105      	bne.n	802c73e <__libc_init_array+0x2e>
 802c732:	bd70      	pop	{r4, r5, r6, pc}
 802c734:	f855 3b04 	ldr.w	r3, [r5], #4
 802c738:	4798      	blx	r3
 802c73a:	3601      	adds	r6, #1
 802c73c:	e7ee      	b.n	802c71c <__libc_init_array+0xc>
 802c73e:	f855 3b04 	ldr.w	r3, [r5], #4
 802c742:	4798      	blx	r3
 802c744:	3601      	adds	r6, #1
 802c746:	e7f2      	b.n	802c72e <__libc_init_array+0x1e>
 802c748:	0802fab0 	.word	0x0802fab0
 802c74c:	0802fab0 	.word	0x0802fab0
 802c750:	0802fab0 	.word	0x0802fab0
 802c754:	0802fab4 	.word	0x0802fab4

0802c758 <malloc>:
 802c758:	4b02      	ldr	r3, [pc, #8]	; (802c764 <malloc+0xc>)
 802c75a:	4601      	mov	r1, r0
 802c75c:	6818      	ldr	r0, [r3, #0]
 802c75e:	f000 b87f 	b.w	802c860 <_malloc_r>
 802c762:	bf00      	nop
 802c764:	2000007c 	.word	0x2000007c

0802c768 <free>:
 802c768:	4b02      	ldr	r3, [pc, #8]	; (802c774 <free+0xc>)
 802c76a:	4601      	mov	r1, r0
 802c76c:	6818      	ldr	r0, [r3, #0]
 802c76e:	f000 b80b 	b.w	802c788 <_free_r>
 802c772:	bf00      	nop
 802c774:	2000007c 	.word	0x2000007c

0802c778 <memset>:
 802c778:	4402      	add	r2, r0
 802c77a:	4603      	mov	r3, r0
 802c77c:	4293      	cmp	r3, r2
 802c77e:	d100      	bne.n	802c782 <memset+0xa>
 802c780:	4770      	bx	lr
 802c782:	f803 1b01 	strb.w	r1, [r3], #1
 802c786:	e7f9      	b.n	802c77c <memset+0x4>

0802c788 <_free_r>:
 802c788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c78a:	2900      	cmp	r1, #0
 802c78c:	d044      	beq.n	802c818 <_free_r+0x90>
 802c78e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c792:	9001      	str	r0, [sp, #4]
 802c794:	2b00      	cmp	r3, #0
 802c796:	f1a1 0404 	sub.w	r4, r1, #4
 802c79a:	bfb8      	it	lt
 802c79c:	18e4      	addlt	r4, r4, r3
 802c79e:	f000 fa13 	bl	802cbc8 <__malloc_lock>
 802c7a2:	4a1e      	ldr	r2, [pc, #120]	; (802c81c <_free_r+0x94>)
 802c7a4:	9801      	ldr	r0, [sp, #4]
 802c7a6:	6813      	ldr	r3, [r2, #0]
 802c7a8:	b933      	cbnz	r3, 802c7b8 <_free_r+0x30>
 802c7aa:	6063      	str	r3, [r4, #4]
 802c7ac:	6014      	str	r4, [r2, #0]
 802c7ae:	b003      	add	sp, #12
 802c7b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802c7b4:	f000 ba0e 	b.w	802cbd4 <__malloc_unlock>
 802c7b8:	42a3      	cmp	r3, r4
 802c7ba:	d908      	bls.n	802c7ce <_free_r+0x46>
 802c7bc:	6825      	ldr	r5, [r4, #0]
 802c7be:	1961      	adds	r1, r4, r5
 802c7c0:	428b      	cmp	r3, r1
 802c7c2:	bf01      	itttt	eq
 802c7c4:	6819      	ldreq	r1, [r3, #0]
 802c7c6:	685b      	ldreq	r3, [r3, #4]
 802c7c8:	1949      	addeq	r1, r1, r5
 802c7ca:	6021      	streq	r1, [r4, #0]
 802c7cc:	e7ed      	b.n	802c7aa <_free_r+0x22>
 802c7ce:	461a      	mov	r2, r3
 802c7d0:	685b      	ldr	r3, [r3, #4]
 802c7d2:	b10b      	cbz	r3, 802c7d8 <_free_r+0x50>
 802c7d4:	42a3      	cmp	r3, r4
 802c7d6:	d9fa      	bls.n	802c7ce <_free_r+0x46>
 802c7d8:	6811      	ldr	r1, [r2, #0]
 802c7da:	1855      	adds	r5, r2, r1
 802c7dc:	42a5      	cmp	r5, r4
 802c7de:	d10b      	bne.n	802c7f8 <_free_r+0x70>
 802c7e0:	6824      	ldr	r4, [r4, #0]
 802c7e2:	4421      	add	r1, r4
 802c7e4:	1854      	adds	r4, r2, r1
 802c7e6:	42a3      	cmp	r3, r4
 802c7e8:	6011      	str	r1, [r2, #0]
 802c7ea:	d1e0      	bne.n	802c7ae <_free_r+0x26>
 802c7ec:	681c      	ldr	r4, [r3, #0]
 802c7ee:	685b      	ldr	r3, [r3, #4]
 802c7f0:	6053      	str	r3, [r2, #4]
 802c7f2:	4421      	add	r1, r4
 802c7f4:	6011      	str	r1, [r2, #0]
 802c7f6:	e7da      	b.n	802c7ae <_free_r+0x26>
 802c7f8:	d902      	bls.n	802c800 <_free_r+0x78>
 802c7fa:	230c      	movs	r3, #12
 802c7fc:	6003      	str	r3, [r0, #0]
 802c7fe:	e7d6      	b.n	802c7ae <_free_r+0x26>
 802c800:	6825      	ldr	r5, [r4, #0]
 802c802:	1961      	adds	r1, r4, r5
 802c804:	428b      	cmp	r3, r1
 802c806:	bf04      	itt	eq
 802c808:	6819      	ldreq	r1, [r3, #0]
 802c80a:	685b      	ldreq	r3, [r3, #4]
 802c80c:	6063      	str	r3, [r4, #4]
 802c80e:	bf04      	itt	eq
 802c810:	1949      	addeq	r1, r1, r5
 802c812:	6021      	streq	r1, [r4, #0]
 802c814:	6054      	str	r4, [r2, #4]
 802c816:	e7ca      	b.n	802c7ae <_free_r+0x26>
 802c818:	b003      	add	sp, #12
 802c81a:	bd30      	pop	{r4, r5, pc}
 802c81c:	20000d8c 	.word	0x20000d8c

0802c820 <sbrk_aligned>:
 802c820:	b570      	push	{r4, r5, r6, lr}
 802c822:	4e0e      	ldr	r6, [pc, #56]	; (802c85c <sbrk_aligned+0x3c>)
 802c824:	460c      	mov	r4, r1
 802c826:	6831      	ldr	r1, [r6, #0]
 802c828:	4605      	mov	r5, r0
 802c82a:	b911      	cbnz	r1, 802c832 <sbrk_aligned+0x12>
 802c82c:	f000 f8a4 	bl	802c978 <_sbrk_r>
 802c830:	6030      	str	r0, [r6, #0]
 802c832:	4621      	mov	r1, r4
 802c834:	4628      	mov	r0, r5
 802c836:	f000 f89f 	bl	802c978 <_sbrk_r>
 802c83a:	1c43      	adds	r3, r0, #1
 802c83c:	d00a      	beq.n	802c854 <sbrk_aligned+0x34>
 802c83e:	1cc4      	adds	r4, r0, #3
 802c840:	f024 0403 	bic.w	r4, r4, #3
 802c844:	42a0      	cmp	r0, r4
 802c846:	d007      	beq.n	802c858 <sbrk_aligned+0x38>
 802c848:	1a21      	subs	r1, r4, r0
 802c84a:	4628      	mov	r0, r5
 802c84c:	f000 f894 	bl	802c978 <_sbrk_r>
 802c850:	3001      	adds	r0, #1
 802c852:	d101      	bne.n	802c858 <sbrk_aligned+0x38>
 802c854:	f04f 34ff 	mov.w	r4, #4294967295
 802c858:	4620      	mov	r0, r4
 802c85a:	bd70      	pop	{r4, r5, r6, pc}
 802c85c:	20000d90 	.word	0x20000d90

0802c860 <_malloc_r>:
 802c860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c864:	1ccd      	adds	r5, r1, #3
 802c866:	f025 0503 	bic.w	r5, r5, #3
 802c86a:	3508      	adds	r5, #8
 802c86c:	2d0c      	cmp	r5, #12
 802c86e:	bf38      	it	cc
 802c870:	250c      	movcc	r5, #12
 802c872:	2d00      	cmp	r5, #0
 802c874:	4607      	mov	r7, r0
 802c876:	db01      	blt.n	802c87c <_malloc_r+0x1c>
 802c878:	42a9      	cmp	r1, r5
 802c87a:	d905      	bls.n	802c888 <_malloc_r+0x28>
 802c87c:	230c      	movs	r3, #12
 802c87e:	603b      	str	r3, [r7, #0]
 802c880:	2600      	movs	r6, #0
 802c882:	4630      	mov	r0, r6
 802c884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c888:	4e2e      	ldr	r6, [pc, #184]	; (802c944 <_malloc_r+0xe4>)
 802c88a:	f000 f99d 	bl	802cbc8 <__malloc_lock>
 802c88e:	6833      	ldr	r3, [r6, #0]
 802c890:	461c      	mov	r4, r3
 802c892:	bb34      	cbnz	r4, 802c8e2 <_malloc_r+0x82>
 802c894:	4629      	mov	r1, r5
 802c896:	4638      	mov	r0, r7
 802c898:	f7ff ffc2 	bl	802c820 <sbrk_aligned>
 802c89c:	1c43      	adds	r3, r0, #1
 802c89e:	4604      	mov	r4, r0
 802c8a0:	d14d      	bne.n	802c93e <_malloc_r+0xde>
 802c8a2:	6834      	ldr	r4, [r6, #0]
 802c8a4:	4626      	mov	r6, r4
 802c8a6:	2e00      	cmp	r6, #0
 802c8a8:	d140      	bne.n	802c92c <_malloc_r+0xcc>
 802c8aa:	6823      	ldr	r3, [r4, #0]
 802c8ac:	4631      	mov	r1, r6
 802c8ae:	4638      	mov	r0, r7
 802c8b0:	eb04 0803 	add.w	r8, r4, r3
 802c8b4:	f000 f860 	bl	802c978 <_sbrk_r>
 802c8b8:	4580      	cmp	r8, r0
 802c8ba:	d13a      	bne.n	802c932 <_malloc_r+0xd2>
 802c8bc:	6821      	ldr	r1, [r4, #0]
 802c8be:	3503      	adds	r5, #3
 802c8c0:	1a6d      	subs	r5, r5, r1
 802c8c2:	f025 0503 	bic.w	r5, r5, #3
 802c8c6:	3508      	adds	r5, #8
 802c8c8:	2d0c      	cmp	r5, #12
 802c8ca:	bf38      	it	cc
 802c8cc:	250c      	movcc	r5, #12
 802c8ce:	4629      	mov	r1, r5
 802c8d0:	4638      	mov	r0, r7
 802c8d2:	f7ff ffa5 	bl	802c820 <sbrk_aligned>
 802c8d6:	3001      	adds	r0, #1
 802c8d8:	d02b      	beq.n	802c932 <_malloc_r+0xd2>
 802c8da:	6823      	ldr	r3, [r4, #0]
 802c8dc:	442b      	add	r3, r5
 802c8de:	6023      	str	r3, [r4, #0]
 802c8e0:	e00e      	b.n	802c900 <_malloc_r+0xa0>
 802c8e2:	6822      	ldr	r2, [r4, #0]
 802c8e4:	1b52      	subs	r2, r2, r5
 802c8e6:	d41e      	bmi.n	802c926 <_malloc_r+0xc6>
 802c8e8:	2a0b      	cmp	r2, #11
 802c8ea:	d916      	bls.n	802c91a <_malloc_r+0xba>
 802c8ec:	1961      	adds	r1, r4, r5
 802c8ee:	42a3      	cmp	r3, r4
 802c8f0:	6025      	str	r5, [r4, #0]
 802c8f2:	bf18      	it	ne
 802c8f4:	6059      	strne	r1, [r3, #4]
 802c8f6:	6863      	ldr	r3, [r4, #4]
 802c8f8:	bf08      	it	eq
 802c8fa:	6031      	streq	r1, [r6, #0]
 802c8fc:	5162      	str	r2, [r4, r5]
 802c8fe:	604b      	str	r3, [r1, #4]
 802c900:	4638      	mov	r0, r7
 802c902:	f104 060b 	add.w	r6, r4, #11
 802c906:	f000 f965 	bl	802cbd4 <__malloc_unlock>
 802c90a:	f026 0607 	bic.w	r6, r6, #7
 802c90e:	1d23      	adds	r3, r4, #4
 802c910:	1af2      	subs	r2, r6, r3
 802c912:	d0b6      	beq.n	802c882 <_malloc_r+0x22>
 802c914:	1b9b      	subs	r3, r3, r6
 802c916:	50a3      	str	r3, [r4, r2]
 802c918:	e7b3      	b.n	802c882 <_malloc_r+0x22>
 802c91a:	6862      	ldr	r2, [r4, #4]
 802c91c:	42a3      	cmp	r3, r4
 802c91e:	bf0c      	ite	eq
 802c920:	6032      	streq	r2, [r6, #0]
 802c922:	605a      	strne	r2, [r3, #4]
 802c924:	e7ec      	b.n	802c900 <_malloc_r+0xa0>
 802c926:	4623      	mov	r3, r4
 802c928:	6864      	ldr	r4, [r4, #4]
 802c92a:	e7b2      	b.n	802c892 <_malloc_r+0x32>
 802c92c:	4634      	mov	r4, r6
 802c92e:	6876      	ldr	r6, [r6, #4]
 802c930:	e7b9      	b.n	802c8a6 <_malloc_r+0x46>
 802c932:	230c      	movs	r3, #12
 802c934:	603b      	str	r3, [r7, #0]
 802c936:	4638      	mov	r0, r7
 802c938:	f000 f94c 	bl	802cbd4 <__malloc_unlock>
 802c93c:	e7a1      	b.n	802c882 <_malloc_r+0x22>
 802c93e:	6025      	str	r5, [r4, #0]
 802c940:	e7de      	b.n	802c900 <_malloc_r+0xa0>
 802c942:	bf00      	nop
 802c944:	20000d8c 	.word	0x20000d8c

0802c948 <iprintf>:
 802c948:	b40f      	push	{r0, r1, r2, r3}
 802c94a:	4b0a      	ldr	r3, [pc, #40]	; (802c974 <iprintf+0x2c>)
 802c94c:	b513      	push	{r0, r1, r4, lr}
 802c94e:	681c      	ldr	r4, [r3, #0]
 802c950:	b124      	cbz	r4, 802c95c <iprintf+0x14>
 802c952:	69a3      	ldr	r3, [r4, #24]
 802c954:	b913      	cbnz	r3, 802c95c <iprintf+0x14>
 802c956:	4620      	mov	r0, r4
 802c958:	f000 f896 	bl	802ca88 <__sinit>
 802c95c:	ab05      	add	r3, sp, #20
 802c95e:	9a04      	ldr	r2, [sp, #16]
 802c960:	68a1      	ldr	r1, [r4, #8]
 802c962:	9301      	str	r3, [sp, #4]
 802c964:	4620      	mov	r0, r4
 802c966:	f000 fac1 	bl	802ceec <_vfiprintf_r>
 802c96a:	b002      	add	sp, #8
 802c96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c970:	b004      	add	sp, #16
 802c972:	4770      	bx	lr
 802c974:	2000007c 	.word	0x2000007c

0802c978 <_sbrk_r>:
 802c978:	b538      	push	{r3, r4, r5, lr}
 802c97a:	4d06      	ldr	r5, [pc, #24]	; (802c994 <_sbrk_r+0x1c>)
 802c97c:	2300      	movs	r3, #0
 802c97e:	4604      	mov	r4, r0
 802c980:	4608      	mov	r0, r1
 802c982:	602b      	str	r3, [r5, #0]
 802c984:	f7f4 ffac 	bl	80218e0 <_sbrk>
 802c988:	1c43      	adds	r3, r0, #1
 802c98a:	d102      	bne.n	802c992 <_sbrk_r+0x1a>
 802c98c:	682b      	ldr	r3, [r5, #0]
 802c98e:	b103      	cbz	r3, 802c992 <_sbrk_r+0x1a>
 802c990:	6023      	str	r3, [r4, #0]
 802c992:	bd38      	pop	{r3, r4, r5, pc}
 802c994:	20000d98 	.word	0x20000d98

0802c998 <siprintf>:
 802c998:	b40e      	push	{r1, r2, r3}
 802c99a:	b500      	push	{lr}
 802c99c:	b09c      	sub	sp, #112	; 0x70
 802c99e:	ab1d      	add	r3, sp, #116	; 0x74
 802c9a0:	9002      	str	r0, [sp, #8]
 802c9a2:	9006      	str	r0, [sp, #24]
 802c9a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802c9a8:	4809      	ldr	r0, [pc, #36]	; (802c9d0 <siprintf+0x38>)
 802c9aa:	9107      	str	r1, [sp, #28]
 802c9ac:	9104      	str	r1, [sp, #16]
 802c9ae:	4909      	ldr	r1, [pc, #36]	; (802c9d4 <siprintf+0x3c>)
 802c9b0:	f853 2b04 	ldr.w	r2, [r3], #4
 802c9b4:	9105      	str	r1, [sp, #20]
 802c9b6:	6800      	ldr	r0, [r0, #0]
 802c9b8:	9301      	str	r3, [sp, #4]
 802c9ba:	a902      	add	r1, sp, #8
 802c9bc:	f000 f96c 	bl	802cc98 <_svfiprintf_r>
 802c9c0:	9b02      	ldr	r3, [sp, #8]
 802c9c2:	2200      	movs	r2, #0
 802c9c4:	701a      	strb	r2, [r3, #0]
 802c9c6:	b01c      	add	sp, #112	; 0x70
 802c9c8:	f85d eb04 	ldr.w	lr, [sp], #4
 802c9cc:	b003      	add	sp, #12
 802c9ce:	4770      	bx	lr
 802c9d0:	2000007c 	.word	0x2000007c
 802c9d4:	ffff0208 	.word	0xffff0208

0802c9d8 <std>:
 802c9d8:	2300      	movs	r3, #0
 802c9da:	b510      	push	{r4, lr}
 802c9dc:	4604      	mov	r4, r0
 802c9de:	e9c0 3300 	strd	r3, r3, [r0]
 802c9e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802c9e6:	6083      	str	r3, [r0, #8]
 802c9e8:	8181      	strh	r1, [r0, #12]
 802c9ea:	6643      	str	r3, [r0, #100]	; 0x64
 802c9ec:	81c2      	strh	r2, [r0, #14]
 802c9ee:	6183      	str	r3, [r0, #24]
 802c9f0:	4619      	mov	r1, r3
 802c9f2:	2208      	movs	r2, #8
 802c9f4:	305c      	adds	r0, #92	; 0x5c
 802c9f6:	f7ff febf 	bl	802c778 <memset>
 802c9fa:	4b05      	ldr	r3, [pc, #20]	; (802ca10 <std+0x38>)
 802c9fc:	6263      	str	r3, [r4, #36]	; 0x24
 802c9fe:	4b05      	ldr	r3, [pc, #20]	; (802ca14 <std+0x3c>)
 802ca00:	62a3      	str	r3, [r4, #40]	; 0x28
 802ca02:	4b05      	ldr	r3, [pc, #20]	; (802ca18 <std+0x40>)
 802ca04:	62e3      	str	r3, [r4, #44]	; 0x2c
 802ca06:	4b05      	ldr	r3, [pc, #20]	; (802ca1c <std+0x44>)
 802ca08:	6224      	str	r4, [r4, #32]
 802ca0a:	6323      	str	r3, [r4, #48]	; 0x30
 802ca0c:	bd10      	pop	{r4, pc}
 802ca0e:	bf00      	nop
 802ca10:	0802d475 	.word	0x0802d475
 802ca14:	0802d497 	.word	0x0802d497
 802ca18:	0802d4cf 	.word	0x0802d4cf
 802ca1c:	0802d4f3 	.word	0x0802d4f3

0802ca20 <_cleanup_r>:
 802ca20:	4901      	ldr	r1, [pc, #4]	; (802ca28 <_cleanup_r+0x8>)
 802ca22:	f000 b8af 	b.w	802cb84 <_fwalk_reent>
 802ca26:	bf00      	nop
 802ca28:	0802d7cd 	.word	0x0802d7cd

0802ca2c <__sfmoreglue>:
 802ca2c:	b570      	push	{r4, r5, r6, lr}
 802ca2e:	2268      	movs	r2, #104	; 0x68
 802ca30:	1e4d      	subs	r5, r1, #1
 802ca32:	4355      	muls	r5, r2
 802ca34:	460e      	mov	r6, r1
 802ca36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802ca3a:	f7ff ff11 	bl	802c860 <_malloc_r>
 802ca3e:	4604      	mov	r4, r0
 802ca40:	b140      	cbz	r0, 802ca54 <__sfmoreglue+0x28>
 802ca42:	2100      	movs	r1, #0
 802ca44:	e9c0 1600 	strd	r1, r6, [r0]
 802ca48:	300c      	adds	r0, #12
 802ca4a:	60a0      	str	r0, [r4, #8]
 802ca4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802ca50:	f7ff fe92 	bl	802c778 <memset>
 802ca54:	4620      	mov	r0, r4
 802ca56:	bd70      	pop	{r4, r5, r6, pc}

0802ca58 <__sfp_lock_acquire>:
 802ca58:	4801      	ldr	r0, [pc, #4]	; (802ca60 <__sfp_lock_acquire+0x8>)
 802ca5a:	f000 b8b3 	b.w	802cbc4 <__retarget_lock_acquire_recursive>
 802ca5e:	bf00      	nop
 802ca60:	20000d95 	.word	0x20000d95

0802ca64 <__sfp_lock_release>:
 802ca64:	4801      	ldr	r0, [pc, #4]	; (802ca6c <__sfp_lock_release+0x8>)
 802ca66:	f000 b8ae 	b.w	802cbc6 <__retarget_lock_release_recursive>
 802ca6a:	bf00      	nop
 802ca6c:	20000d95 	.word	0x20000d95

0802ca70 <__sinit_lock_acquire>:
 802ca70:	4801      	ldr	r0, [pc, #4]	; (802ca78 <__sinit_lock_acquire+0x8>)
 802ca72:	f000 b8a7 	b.w	802cbc4 <__retarget_lock_acquire_recursive>
 802ca76:	bf00      	nop
 802ca78:	20000d96 	.word	0x20000d96

0802ca7c <__sinit_lock_release>:
 802ca7c:	4801      	ldr	r0, [pc, #4]	; (802ca84 <__sinit_lock_release+0x8>)
 802ca7e:	f000 b8a2 	b.w	802cbc6 <__retarget_lock_release_recursive>
 802ca82:	bf00      	nop
 802ca84:	20000d96 	.word	0x20000d96

0802ca88 <__sinit>:
 802ca88:	b510      	push	{r4, lr}
 802ca8a:	4604      	mov	r4, r0
 802ca8c:	f7ff fff0 	bl	802ca70 <__sinit_lock_acquire>
 802ca90:	69a3      	ldr	r3, [r4, #24]
 802ca92:	b11b      	cbz	r3, 802ca9c <__sinit+0x14>
 802ca94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ca98:	f7ff bff0 	b.w	802ca7c <__sinit_lock_release>
 802ca9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802caa0:	6523      	str	r3, [r4, #80]	; 0x50
 802caa2:	4b13      	ldr	r3, [pc, #76]	; (802caf0 <__sinit+0x68>)
 802caa4:	4a13      	ldr	r2, [pc, #76]	; (802caf4 <__sinit+0x6c>)
 802caa6:	681b      	ldr	r3, [r3, #0]
 802caa8:	62a2      	str	r2, [r4, #40]	; 0x28
 802caaa:	42a3      	cmp	r3, r4
 802caac:	bf04      	itt	eq
 802caae:	2301      	moveq	r3, #1
 802cab0:	61a3      	streq	r3, [r4, #24]
 802cab2:	4620      	mov	r0, r4
 802cab4:	f000 f820 	bl	802caf8 <__sfp>
 802cab8:	6060      	str	r0, [r4, #4]
 802caba:	4620      	mov	r0, r4
 802cabc:	f000 f81c 	bl	802caf8 <__sfp>
 802cac0:	60a0      	str	r0, [r4, #8]
 802cac2:	4620      	mov	r0, r4
 802cac4:	f000 f818 	bl	802caf8 <__sfp>
 802cac8:	2200      	movs	r2, #0
 802caca:	60e0      	str	r0, [r4, #12]
 802cacc:	2104      	movs	r1, #4
 802cace:	6860      	ldr	r0, [r4, #4]
 802cad0:	f7ff ff82 	bl	802c9d8 <std>
 802cad4:	68a0      	ldr	r0, [r4, #8]
 802cad6:	2201      	movs	r2, #1
 802cad8:	2109      	movs	r1, #9
 802cada:	f7ff ff7d 	bl	802c9d8 <std>
 802cade:	68e0      	ldr	r0, [r4, #12]
 802cae0:	2202      	movs	r2, #2
 802cae2:	2112      	movs	r1, #18
 802cae4:	f7ff ff78 	bl	802c9d8 <std>
 802cae8:	2301      	movs	r3, #1
 802caea:	61a3      	str	r3, [r4, #24]
 802caec:	e7d2      	b.n	802ca94 <__sinit+0xc>
 802caee:	bf00      	nop
 802caf0:	0802fa10 	.word	0x0802fa10
 802caf4:	0802ca21 	.word	0x0802ca21

0802caf8 <__sfp>:
 802caf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cafa:	4607      	mov	r7, r0
 802cafc:	f7ff ffac 	bl	802ca58 <__sfp_lock_acquire>
 802cb00:	4b1e      	ldr	r3, [pc, #120]	; (802cb7c <__sfp+0x84>)
 802cb02:	681e      	ldr	r6, [r3, #0]
 802cb04:	69b3      	ldr	r3, [r6, #24]
 802cb06:	b913      	cbnz	r3, 802cb0e <__sfp+0x16>
 802cb08:	4630      	mov	r0, r6
 802cb0a:	f7ff ffbd 	bl	802ca88 <__sinit>
 802cb0e:	3648      	adds	r6, #72	; 0x48
 802cb10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802cb14:	3b01      	subs	r3, #1
 802cb16:	d503      	bpl.n	802cb20 <__sfp+0x28>
 802cb18:	6833      	ldr	r3, [r6, #0]
 802cb1a:	b30b      	cbz	r3, 802cb60 <__sfp+0x68>
 802cb1c:	6836      	ldr	r6, [r6, #0]
 802cb1e:	e7f7      	b.n	802cb10 <__sfp+0x18>
 802cb20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802cb24:	b9d5      	cbnz	r5, 802cb5c <__sfp+0x64>
 802cb26:	4b16      	ldr	r3, [pc, #88]	; (802cb80 <__sfp+0x88>)
 802cb28:	60e3      	str	r3, [r4, #12]
 802cb2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802cb2e:	6665      	str	r5, [r4, #100]	; 0x64
 802cb30:	f000 f847 	bl	802cbc2 <__retarget_lock_init_recursive>
 802cb34:	f7ff ff96 	bl	802ca64 <__sfp_lock_release>
 802cb38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802cb3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802cb40:	6025      	str	r5, [r4, #0]
 802cb42:	61a5      	str	r5, [r4, #24]
 802cb44:	2208      	movs	r2, #8
 802cb46:	4629      	mov	r1, r5
 802cb48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802cb4c:	f7ff fe14 	bl	802c778 <memset>
 802cb50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802cb54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802cb58:	4620      	mov	r0, r4
 802cb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802cb5c:	3468      	adds	r4, #104	; 0x68
 802cb5e:	e7d9      	b.n	802cb14 <__sfp+0x1c>
 802cb60:	2104      	movs	r1, #4
 802cb62:	4638      	mov	r0, r7
 802cb64:	f7ff ff62 	bl	802ca2c <__sfmoreglue>
 802cb68:	4604      	mov	r4, r0
 802cb6a:	6030      	str	r0, [r6, #0]
 802cb6c:	2800      	cmp	r0, #0
 802cb6e:	d1d5      	bne.n	802cb1c <__sfp+0x24>
 802cb70:	f7ff ff78 	bl	802ca64 <__sfp_lock_release>
 802cb74:	230c      	movs	r3, #12
 802cb76:	603b      	str	r3, [r7, #0]
 802cb78:	e7ee      	b.n	802cb58 <__sfp+0x60>
 802cb7a:	bf00      	nop
 802cb7c:	0802fa10 	.word	0x0802fa10
 802cb80:	ffff0001 	.word	0xffff0001

0802cb84 <_fwalk_reent>:
 802cb84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802cb88:	4606      	mov	r6, r0
 802cb8a:	4688      	mov	r8, r1
 802cb8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802cb90:	2700      	movs	r7, #0
 802cb92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802cb96:	f1b9 0901 	subs.w	r9, r9, #1
 802cb9a:	d505      	bpl.n	802cba8 <_fwalk_reent+0x24>
 802cb9c:	6824      	ldr	r4, [r4, #0]
 802cb9e:	2c00      	cmp	r4, #0
 802cba0:	d1f7      	bne.n	802cb92 <_fwalk_reent+0xe>
 802cba2:	4638      	mov	r0, r7
 802cba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802cba8:	89ab      	ldrh	r3, [r5, #12]
 802cbaa:	2b01      	cmp	r3, #1
 802cbac:	d907      	bls.n	802cbbe <_fwalk_reent+0x3a>
 802cbae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802cbb2:	3301      	adds	r3, #1
 802cbb4:	d003      	beq.n	802cbbe <_fwalk_reent+0x3a>
 802cbb6:	4629      	mov	r1, r5
 802cbb8:	4630      	mov	r0, r6
 802cbba:	47c0      	blx	r8
 802cbbc:	4307      	orrs	r7, r0
 802cbbe:	3568      	adds	r5, #104	; 0x68
 802cbc0:	e7e9      	b.n	802cb96 <_fwalk_reent+0x12>

0802cbc2 <__retarget_lock_init_recursive>:
 802cbc2:	4770      	bx	lr

0802cbc4 <__retarget_lock_acquire_recursive>:
 802cbc4:	4770      	bx	lr

0802cbc6 <__retarget_lock_release_recursive>:
 802cbc6:	4770      	bx	lr

0802cbc8 <__malloc_lock>:
 802cbc8:	4801      	ldr	r0, [pc, #4]	; (802cbd0 <__malloc_lock+0x8>)
 802cbca:	f7ff bffb 	b.w	802cbc4 <__retarget_lock_acquire_recursive>
 802cbce:	bf00      	nop
 802cbd0:	20000d94 	.word	0x20000d94

0802cbd4 <__malloc_unlock>:
 802cbd4:	4801      	ldr	r0, [pc, #4]	; (802cbdc <__malloc_unlock+0x8>)
 802cbd6:	f7ff bff6 	b.w	802cbc6 <__retarget_lock_release_recursive>
 802cbda:	bf00      	nop
 802cbdc:	20000d94 	.word	0x20000d94

0802cbe0 <__ssputs_r>:
 802cbe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cbe4:	688e      	ldr	r6, [r1, #8]
 802cbe6:	429e      	cmp	r6, r3
 802cbe8:	4682      	mov	sl, r0
 802cbea:	460c      	mov	r4, r1
 802cbec:	4690      	mov	r8, r2
 802cbee:	461f      	mov	r7, r3
 802cbf0:	d838      	bhi.n	802cc64 <__ssputs_r+0x84>
 802cbf2:	898a      	ldrh	r2, [r1, #12]
 802cbf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802cbf8:	d032      	beq.n	802cc60 <__ssputs_r+0x80>
 802cbfa:	6825      	ldr	r5, [r4, #0]
 802cbfc:	6909      	ldr	r1, [r1, #16]
 802cbfe:	eba5 0901 	sub.w	r9, r5, r1
 802cc02:	6965      	ldr	r5, [r4, #20]
 802cc04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802cc08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802cc0c:	3301      	adds	r3, #1
 802cc0e:	444b      	add	r3, r9
 802cc10:	106d      	asrs	r5, r5, #1
 802cc12:	429d      	cmp	r5, r3
 802cc14:	bf38      	it	cc
 802cc16:	461d      	movcc	r5, r3
 802cc18:	0553      	lsls	r3, r2, #21
 802cc1a:	d531      	bpl.n	802cc80 <__ssputs_r+0xa0>
 802cc1c:	4629      	mov	r1, r5
 802cc1e:	f7ff fe1f 	bl	802c860 <_malloc_r>
 802cc22:	4606      	mov	r6, r0
 802cc24:	b950      	cbnz	r0, 802cc3c <__ssputs_r+0x5c>
 802cc26:	230c      	movs	r3, #12
 802cc28:	f8ca 3000 	str.w	r3, [sl]
 802cc2c:	89a3      	ldrh	r3, [r4, #12]
 802cc2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802cc32:	81a3      	strh	r3, [r4, #12]
 802cc34:	f04f 30ff 	mov.w	r0, #4294967295
 802cc38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cc3c:	6921      	ldr	r1, [r4, #16]
 802cc3e:	464a      	mov	r2, r9
 802cc40:	f000 fe78 	bl	802d934 <memcpy>
 802cc44:	89a3      	ldrh	r3, [r4, #12]
 802cc46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802cc4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802cc4e:	81a3      	strh	r3, [r4, #12]
 802cc50:	6126      	str	r6, [r4, #16]
 802cc52:	6165      	str	r5, [r4, #20]
 802cc54:	444e      	add	r6, r9
 802cc56:	eba5 0509 	sub.w	r5, r5, r9
 802cc5a:	6026      	str	r6, [r4, #0]
 802cc5c:	60a5      	str	r5, [r4, #8]
 802cc5e:	463e      	mov	r6, r7
 802cc60:	42be      	cmp	r6, r7
 802cc62:	d900      	bls.n	802cc66 <__ssputs_r+0x86>
 802cc64:	463e      	mov	r6, r7
 802cc66:	6820      	ldr	r0, [r4, #0]
 802cc68:	4632      	mov	r2, r6
 802cc6a:	4641      	mov	r1, r8
 802cc6c:	f000 fe70 	bl	802d950 <memmove>
 802cc70:	68a3      	ldr	r3, [r4, #8]
 802cc72:	1b9b      	subs	r3, r3, r6
 802cc74:	60a3      	str	r3, [r4, #8]
 802cc76:	6823      	ldr	r3, [r4, #0]
 802cc78:	4433      	add	r3, r6
 802cc7a:	6023      	str	r3, [r4, #0]
 802cc7c:	2000      	movs	r0, #0
 802cc7e:	e7db      	b.n	802cc38 <__ssputs_r+0x58>
 802cc80:	462a      	mov	r2, r5
 802cc82:	f000 fe7f 	bl	802d984 <_realloc_r>
 802cc86:	4606      	mov	r6, r0
 802cc88:	2800      	cmp	r0, #0
 802cc8a:	d1e1      	bne.n	802cc50 <__ssputs_r+0x70>
 802cc8c:	6921      	ldr	r1, [r4, #16]
 802cc8e:	4650      	mov	r0, sl
 802cc90:	f7ff fd7a 	bl	802c788 <_free_r>
 802cc94:	e7c7      	b.n	802cc26 <__ssputs_r+0x46>
	...

0802cc98 <_svfiprintf_r>:
 802cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cc9c:	4698      	mov	r8, r3
 802cc9e:	898b      	ldrh	r3, [r1, #12]
 802cca0:	061b      	lsls	r3, r3, #24
 802cca2:	b09d      	sub	sp, #116	; 0x74
 802cca4:	4607      	mov	r7, r0
 802cca6:	460d      	mov	r5, r1
 802cca8:	4614      	mov	r4, r2
 802ccaa:	d50e      	bpl.n	802ccca <_svfiprintf_r+0x32>
 802ccac:	690b      	ldr	r3, [r1, #16]
 802ccae:	b963      	cbnz	r3, 802ccca <_svfiprintf_r+0x32>
 802ccb0:	2140      	movs	r1, #64	; 0x40
 802ccb2:	f7ff fdd5 	bl	802c860 <_malloc_r>
 802ccb6:	6028      	str	r0, [r5, #0]
 802ccb8:	6128      	str	r0, [r5, #16]
 802ccba:	b920      	cbnz	r0, 802ccc6 <_svfiprintf_r+0x2e>
 802ccbc:	230c      	movs	r3, #12
 802ccbe:	603b      	str	r3, [r7, #0]
 802ccc0:	f04f 30ff 	mov.w	r0, #4294967295
 802ccc4:	e0d1      	b.n	802ce6a <_svfiprintf_r+0x1d2>
 802ccc6:	2340      	movs	r3, #64	; 0x40
 802ccc8:	616b      	str	r3, [r5, #20]
 802ccca:	2300      	movs	r3, #0
 802cccc:	9309      	str	r3, [sp, #36]	; 0x24
 802ccce:	2320      	movs	r3, #32
 802ccd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ccd4:	f8cd 800c 	str.w	r8, [sp, #12]
 802ccd8:	2330      	movs	r3, #48	; 0x30
 802ccda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802ce84 <_svfiprintf_r+0x1ec>
 802ccde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802cce2:	f04f 0901 	mov.w	r9, #1
 802cce6:	4623      	mov	r3, r4
 802cce8:	469a      	mov	sl, r3
 802ccea:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ccee:	b10a      	cbz	r2, 802ccf4 <_svfiprintf_r+0x5c>
 802ccf0:	2a25      	cmp	r2, #37	; 0x25
 802ccf2:	d1f9      	bne.n	802cce8 <_svfiprintf_r+0x50>
 802ccf4:	ebba 0b04 	subs.w	fp, sl, r4
 802ccf8:	d00b      	beq.n	802cd12 <_svfiprintf_r+0x7a>
 802ccfa:	465b      	mov	r3, fp
 802ccfc:	4622      	mov	r2, r4
 802ccfe:	4629      	mov	r1, r5
 802cd00:	4638      	mov	r0, r7
 802cd02:	f7ff ff6d 	bl	802cbe0 <__ssputs_r>
 802cd06:	3001      	adds	r0, #1
 802cd08:	f000 80aa 	beq.w	802ce60 <_svfiprintf_r+0x1c8>
 802cd0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802cd0e:	445a      	add	r2, fp
 802cd10:	9209      	str	r2, [sp, #36]	; 0x24
 802cd12:	f89a 3000 	ldrb.w	r3, [sl]
 802cd16:	2b00      	cmp	r3, #0
 802cd18:	f000 80a2 	beq.w	802ce60 <_svfiprintf_r+0x1c8>
 802cd1c:	2300      	movs	r3, #0
 802cd1e:	f04f 32ff 	mov.w	r2, #4294967295
 802cd22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802cd26:	f10a 0a01 	add.w	sl, sl, #1
 802cd2a:	9304      	str	r3, [sp, #16]
 802cd2c:	9307      	str	r3, [sp, #28]
 802cd2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802cd32:	931a      	str	r3, [sp, #104]	; 0x68
 802cd34:	4654      	mov	r4, sl
 802cd36:	2205      	movs	r2, #5
 802cd38:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cd3c:	4851      	ldr	r0, [pc, #324]	; (802ce84 <_svfiprintf_r+0x1ec>)
 802cd3e:	f7f3 fa57 	bl	80201f0 <memchr>
 802cd42:	9a04      	ldr	r2, [sp, #16]
 802cd44:	b9d8      	cbnz	r0, 802cd7e <_svfiprintf_r+0xe6>
 802cd46:	06d0      	lsls	r0, r2, #27
 802cd48:	bf44      	itt	mi
 802cd4a:	2320      	movmi	r3, #32
 802cd4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cd50:	0711      	lsls	r1, r2, #28
 802cd52:	bf44      	itt	mi
 802cd54:	232b      	movmi	r3, #43	; 0x2b
 802cd56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cd5a:	f89a 3000 	ldrb.w	r3, [sl]
 802cd5e:	2b2a      	cmp	r3, #42	; 0x2a
 802cd60:	d015      	beq.n	802cd8e <_svfiprintf_r+0xf6>
 802cd62:	9a07      	ldr	r2, [sp, #28]
 802cd64:	4654      	mov	r4, sl
 802cd66:	2000      	movs	r0, #0
 802cd68:	f04f 0c0a 	mov.w	ip, #10
 802cd6c:	4621      	mov	r1, r4
 802cd6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 802cd72:	3b30      	subs	r3, #48	; 0x30
 802cd74:	2b09      	cmp	r3, #9
 802cd76:	d94e      	bls.n	802ce16 <_svfiprintf_r+0x17e>
 802cd78:	b1b0      	cbz	r0, 802cda8 <_svfiprintf_r+0x110>
 802cd7a:	9207      	str	r2, [sp, #28]
 802cd7c:	e014      	b.n	802cda8 <_svfiprintf_r+0x110>
 802cd7e:	eba0 0308 	sub.w	r3, r0, r8
 802cd82:	fa09 f303 	lsl.w	r3, r9, r3
 802cd86:	4313      	orrs	r3, r2
 802cd88:	9304      	str	r3, [sp, #16]
 802cd8a:	46a2      	mov	sl, r4
 802cd8c:	e7d2      	b.n	802cd34 <_svfiprintf_r+0x9c>
 802cd8e:	9b03      	ldr	r3, [sp, #12]
 802cd90:	1d19      	adds	r1, r3, #4
 802cd92:	681b      	ldr	r3, [r3, #0]
 802cd94:	9103      	str	r1, [sp, #12]
 802cd96:	2b00      	cmp	r3, #0
 802cd98:	bfbb      	ittet	lt
 802cd9a:	425b      	neglt	r3, r3
 802cd9c:	f042 0202 	orrlt.w	r2, r2, #2
 802cda0:	9307      	strge	r3, [sp, #28]
 802cda2:	9307      	strlt	r3, [sp, #28]
 802cda4:	bfb8      	it	lt
 802cda6:	9204      	strlt	r2, [sp, #16]
 802cda8:	7823      	ldrb	r3, [r4, #0]
 802cdaa:	2b2e      	cmp	r3, #46	; 0x2e
 802cdac:	d10c      	bne.n	802cdc8 <_svfiprintf_r+0x130>
 802cdae:	7863      	ldrb	r3, [r4, #1]
 802cdb0:	2b2a      	cmp	r3, #42	; 0x2a
 802cdb2:	d135      	bne.n	802ce20 <_svfiprintf_r+0x188>
 802cdb4:	9b03      	ldr	r3, [sp, #12]
 802cdb6:	1d1a      	adds	r2, r3, #4
 802cdb8:	681b      	ldr	r3, [r3, #0]
 802cdba:	9203      	str	r2, [sp, #12]
 802cdbc:	2b00      	cmp	r3, #0
 802cdbe:	bfb8      	it	lt
 802cdc0:	f04f 33ff 	movlt.w	r3, #4294967295
 802cdc4:	3402      	adds	r4, #2
 802cdc6:	9305      	str	r3, [sp, #20]
 802cdc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802ce94 <_svfiprintf_r+0x1fc>
 802cdcc:	7821      	ldrb	r1, [r4, #0]
 802cdce:	2203      	movs	r2, #3
 802cdd0:	4650      	mov	r0, sl
 802cdd2:	f7f3 fa0d 	bl	80201f0 <memchr>
 802cdd6:	b140      	cbz	r0, 802cdea <_svfiprintf_r+0x152>
 802cdd8:	2340      	movs	r3, #64	; 0x40
 802cdda:	eba0 000a 	sub.w	r0, r0, sl
 802cdde:	fa03 f000 	lsl.w	r0, r3, r0
 802cde2:	9b04      	ldr	r3, [sp, #16]
 802cde4:	4303      	orrs	r3, r0
 802cde6:	3401      	adds	r4, #1
 802cde8:	9304      	str	r3, [sp, #16]
 802cdea:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cdee:	4826      	ldr	r0, [pc, #152]	; (802ce88 <_svfiprintf_r+0x1f0>)
 802cdf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802cdf4:	2206      	movs	r2, #6
 802cdf6:	f7f3 f9fb 	bl	80201f0 <memchr>
 802cdfa:	2800      	cmp	r0, #0
 802cdfc:	d038      	beq.n	802ce70 <_svfiprintf_r+0x1d8>
 802cdfe:	4b23      	ldr	r3, [pc, #140]	; (802ce8c <_svfiprintf_r+0x1f4>)
 802ce00:	bb1b      	cbnz	r3, 802ce4a <_svfiprintf_r+0x1b2>
 802ce02:	9b03      	ldr	r3, [sp, #12]
 802ce04:	3307      	adds	r3, #7
 802ce06:	f023 0307 	bic.w	r3, r3, #7
 802ce0a:	3308      	adds	r3, #8
 802ce0c:	9303      	str	r3, [sp, #12]
 802ce0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ce10:	4433      	add	r3, r6
 802ce12:	9309      	str	r3, [sp, #36]	; 0x24
 802ce14:	e767      	b.n	802cce6 <_svfiprintf_r+0x4e>
 802ce16:	fb0c 3202 	mla	r2, ip, r2, r3
 802ce1a:	460c      	mov	r4, r1
 802ce1c:	2001      	movs	r0, #1
 802ce1e:	e7a5      	b.n	802cd6c <_svfiprintf_r+0xd4>
 802ce20:	2300      	movs	r3, #0
 802ce22:	3401      	adds	r4, #1
 802ce24:	9305      	str	r3, [sp, #20]
 802ce26:	4619      	mov	r1, r3
 802ce28:	f04f 0c0a 	mov.w	ip, #10
 802ce2c:	4620      	mov	r0, r4
 802ce2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ce32:	3a30      	subs	r2, #48	; 0x30
 802ce34:	2a09      	cmp	r2, #9
 802ce36:	d903      	bls.n	802ce40 <_svfiprintf_r+0x1a8>
 802ce38:	2b00      	cmp	r3, #0
 802ce3a:	d0c5      	beq.n	802cdc8 <_svfiprintf_r+0x130>
 802ce3c:	9105      	str	r1, [sp, #20]
 802ce3e:	e7c3      	b.n	802cdc8 <_svfiprintf_r+0x130>
 802ce40:	fb0c 2101 	mla	r1, ip, r1, r2
 802ce44:	4604      	mov	r4, r0
 802ce46:	2301      	movs	r3, #1
 802ce48:	e7f0      	b.n	802ce2c <_svfiprintf_r+0x194>
 802ce4a:	ab03      	add	r3, sp, #12
 802ce4c:	9300      	str	r3, [sp, #0]
 802ce4e:	462a      	mov	r2, r5
 802ce50:	4b0f      	ldr	r3, [pc, #60]	; (802ce90 <_svfiprintf_r+0x1f8>)
 802ce52:	a904      	add	r1, sp, #16
 802ce54:	4638      	mov	r0, r7
 802ce56:	f3af 8000 	nop.w
 802ce5a:	1c42      	adds	r2, r0, #1
 802ce5c:	4606      	mov	r6, r0
 802ce5e:	d1d6      	bne.n	802ce0e <_svfiprintf_r+0x176>
 802ce60:	89ab      	ldrh	r3, [r5, #12]
 802ce62:	065b      	lsls	r3, r3, #25
 802ce64:	f53f af2c 	bmi.w	802ccc0 <_svfiprintf_r+0x28>
 802ce68:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ce6a:	b01d      	add	sp, #116	; 0x74
 802ce6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ce70:	ab03      	add	r3, sp, #12
 802ce72:	9300      	str	r3, [sp, #0]
 802ce74:	462a      	mov	r2, r5
 802ce76:	4b06      	ldr	r3, [pc, #24]	; (802ce90 <_svfiprintf_r+0x1f8>)
 802ce78:	a904      	add	r1, sp, #16
 802ce7a:	4638      	mov	r0, r7
 802ce7c:	f000 f9d4 	bl	802d228 <_printf_i>
 802ce80:	e7eb      	b.n	802ce5a <_svfiprintf_r+0x1c2>
 802ce82:	bf00      	nop
 802ce84:	0802fa74 	.word	0x0802fa74
 802ce88:	0802fa7e 	.word	0x0802fa7e
 802ce8c:	00000000 	.word	0x00000000
 802ce90:	0802cbe1 	.word	0x0802cbe1
 802ce94:	0802fa7a 	.word	0x0802fa7a

0802ce98 <__sfputc_r>:
 802ce98:	6893      	ldr	r3, [r2, #8]
 802ce9a:	3b01      	subs	r3, #1
 802ce9c:	2b00      	cmp	r3, #0
 802ce9e:	b410      	push	{r4}
 802cea0:	6093      	str	r3, [r2, #8]
 802cea2:	da08      	bge.n	802ceb6 <__sfputc_r+0x1e>
 802cea4:	6994      	ldr	r4, [r2, #24]
 802cea6:	42a3      	cmp	r3, r4
 802cea8:	db01      	blt.n	802ceae <__sfputc_r+0x16>
 802ceaa:	290a      	cmp	r1, #10
 802ceac:	d103      	bne.n	802ceb6 <__sfputc_r+0x1e>
 802ceae:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ceb2:	f000 bb23 	b.w	802d4fc <__swbuf_r>
 802ceb6:	6813      	ldr	r3, [r2, #0]
 802ceb8:	1c58      	adds	r0, r3, #1
 802ceba:	6010      	str	r0, [r2, #0]
 802cebc:	7019      	strb	r1, [r3, #0]
 802cebe:	4608      	mov	r0, r1
 802cec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 802cec4:	4770      	bx	lr

0802cec6 <__sfputs_r>:
 802cec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cec8:	4606      	mov	r6, r0
 802ceca:	460f      	mov	r7, r1
 802cecc:	4614      	mov	r4, r2
 802cece:	18d5      	adds	r5, r2, r3
 802ced0:	42ac      	cmp	r4, r5
 802ced2:	d101      	bne.n	802ced8 <__sfputs_r+0x12>
 802ced4:	2000      	movs	r0, #0
 802ced6:	e007      	b.n	802cee8 <__sfputs_r+0x22>
 802ced8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cedc:	463a      	mov	r2, r7
 802cede:	4630      	mov	r0, r6
 802cee0:	f7ff ffda 	bl	802ce98 <__sfputc_r>
 802cee4:	1c43      	adds	r3, r0, #1
 802cee6:	d1f3      	bne.n	802ced0 <__sfputs_r+0xa>
 802cee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802ceec <_vfiprintf_r>:
 802ceec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cef0:	460d      	mov	r5, r1
 802cef2:	b09d      	sub	sp, #116	; 0x74
 802cef4:	4614      	mov	r4, r2
 802cef6:	4698      	mov	r8, r3
 802cef8:	4606      	mov	r6, r0
 802cefa:	b118      	cbz	r0, 802cf04 <_vfiprintf_r+0x18>
 802cefc:	6983      	ldr	r3, [r0, #24]
 802cefe:	b90b      	cbnz	r3, 802cf04 <_vfiprintf_r+0x18>
 802cf00:	f7ff fdc2 	bl	802ca88 <__sinit>
 802cf04:	4b89      	ldr	r3, [pc, #548]	; (802d12c <_vfiprintf_r+0x240>)
 802cf06:	429d      	cmp	r5, r3
 802cf08:	d11b      	bne.n	802cf42 <_vfiprintf_r+0x56>
 802cf0a:	6875      	ldr	r5, [r6, #4]
 802cf0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802cf0e:	07d9      	lsls	r1, r3, #31
 802cf10:	d405      	bmi.n	802cf1e <_vfiprintf_r+0x32>
 802cf12:	89ab      	ldrh	r3, [r5, #12]
 802cf14:	059a      	lsls	r2, r3, #22
 802cf16:	d402      	bmi.n	802cf1e <_vfiprintf_r+0x32>
 802cf18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802cf1a:	f7ff fe53 	bl	802cbc4 <__retarget_lock_acquire_recursive>
 802cf1e:	89ab      	ldrh	r3, [r5, #12]
 802cf20:	071b      	lsls	r3, r3, #28
 802cf22:	d501      	bpl.n	802cf28 <_vfiprintf_r+0x3c>
 802cf24:	692b      	ldr	r3, [r5, #16]
 802cf26:	b9eb      	cbnz	r3, 802cf64 <_vfiprintf_r+0x78>
 802cf28:	4629      	mov	r1, r5
 802cf2a:	4630      	mov	r0, r6
 802cf2c:	f000 fb4a 	bl	802d5c4 <__swsetup_r>
 802cf30:	b1c0      	cbz	r0, 802cf64 <_vfiprintf_r+0x78>
 802cf32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802cf34:	07dc      	lsls	r4, r3, #31
 802cf36:	d50e      	bpl.n	802cf56 <_vfiprintf_r+0x6a>
 802cf38:	f04f 30ff 	mov.w	r0, #4294967295
 802cf3c:	b01d      	add	sp, #116	; 0x74
 802cf3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cf42:	4b7b      	ldr	r3, [pc, #492]	; (802d130 <_vfiprintf_r+0x244>)
 802cf44:	429d      	cmp	r5, r3
 802cf46:	d101      	bne.n	802cf4c <_vfiprintf_r+0x60>
 802cf48:	68b5      	ldr	r5, [r6, #8]
 802cf4a:	e7df      	b.n	802cf0c <_vfiprintf_r+0x20>
 802cf4c:	4b79      	ldr	r3, [pc, #484]	; (802d134 <_vfiprintf_r+0x248>)
 802cf4e:	429d      	cmp	r5, r3
 802cf50:	bf08      	it	eq
 802cf52:	68f5      	ldreq	r5, [r6, #12]
 802cf54:	e7da      	b.n	802cf0c <_vfiprintf_r+0x20>
 802cf56:	89ab      	ldrh	r3, [r5, #12]
 802cf58:	0598      	lsls	r0, r3, #22
 802cf5a:	d4ed      	bmi.n	802cf38 <_vfiprintf_r+0x4c>
 802cf5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802cf5e:	f7ff fe32 	bl	802cbc6 <__retarget_lock_release_recursive>
 802cf62:	e7e9      	b.n	802cf38 <_vfiprintf_r+0x4c>
 802cf64:	2300      	movs	r3, #0
 802cf66:	9309      	str	r3, [sp, #36]	; 0x24
 802cf68:	2320      	movs	r3, #32
 802cf6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802cf6e:	f8cd 800c 	str.w	r8, [sp, #12]
 802cf72:	2330      	movs	r3, #48	; 0x30
 802cf74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802d138 <_vfiprintf_r+0x24c>
 802cf78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802cf7c:	f04f 0901 	mov.w	r9, #1
 802cf80:	4623      	mov	r3, r4
 802cf82:	469a      	mov	sl, r3
 802cf84:	f813 2b01 	ldrb.w	r2, [r3], #1
 802cf88:	b10a      	cbz	r2, 802cf8e <_vfiprintf_r+0xa2>
 802cf8a:	2a25      	cmp	r2, #37	; 0x25
 802cf8c:	d1f9      	bne.n	802cf82 <_vfiprintf_r+0x96>
 802cf8e:	ebba 0b04 	subs.w	fp, sl, r4
 802cf92:	d00b      	beq.n	802cfac <_vfiprintf_r+0xc0>
 802cf94:	465b      	mov	r3, fp
 802cf96:	4622      	mov	r2, r4
 802cf98:	4629      	mov	r1, r5
 802cf9a:	4630      	mov	r0, r6
 802cf9c:	f7ff ff93 	bl	802cec6 <__sfputs_r>
 802cfa0:	3001      	adds	r0, #1
 802cfa2:	f000 80aa 	beq.w	802d0fa <_vfiprintf_r+0x20e>
 802cfa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802cfa8:	445a      	add	r2, fp
 802cfaa:	9209      	str	r2, [sp, #36]	; 0x24
 802cfac:	f89a 3000 	ldrb.w	r3, [sl]
 802cfb0:	2b00      	cmp	r3, #0
 802cfb2:	f000 80a2 	beq.w	802d0fa <_vfiprintf_r+0x20e>
 802cfb6:	2300      	movs	r3, #0
 802cfb8:	f04f 32ff 	mov.w	r2, #4294967295
 802cfbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802cfc0:	f10a 0a01 	add.w	sl, sl, #1
 802cfc4:	9304      	str	r3, [sp, #16]
 802cfc6:	9307      	str	r3, [sp, #28]
 802cfc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802cfcc:	931a      	str	r3, [sp, #104]	; 0x68
 802cfce:	4654      	mov	r4, sl
 802cfd0:	2205      	movs	r2, #5
 802cfd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cfd6:	4858      	ldr	r0, [pc, #352]	; (802d138 <_vfiprintf_r+0x24c>)
 802cfd8:	f7f3 f90a 	bl	80201f0 <memchr>
 802cfdc:	9a04      	ldr	r2, [sp, #16]
 802cfde:	b9d8      	cbnz	r0, 802d018 <_vfiprintf_r+0x12c>
 802cfe0:	06d1      	lsls	r1, r2, #27
 802cfe2:	bf44      	itt	mi
 802cfe4:	2320      	movmi	r3, #32
 802cfe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cfea:	0713      	lsls	r3, r2, #28
 802cfec:	bf44      	itt	mi
 802cfee:	232b      	movmi	r3, #43	; 0x2b
 802cff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cff4:	f89a 3000 	ldrb.w	r3, [sl]
 802cff8:	2b2a      	cmp	r3, #42	; 0x2a
 802cffa:	d015      	beq.n	802d028 <_vfiprintf_r+0x13c>
 802cffc:	9a07      	ldr	r2, [sp, #28]
 802cffe:	4654      	mov	r4, sl
 802d000:	2000      	movs	r0, #0
 802d002:	f04f 0c0a 	mov.w	ip, #10
 802d006:	4621      	mov	r1, r4
 802d008:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d00c:	3b30      	subs	r3, #48	; 0x30
 802d00e:	2b09      	cmp	r3, #9
 802d010:	d94e      	bls.n	802d0b0 <_vfiprintf_r+0x1c4>
 802d012:	b1b0      	cbz	r0, 802d042 <_vfiprintf_r+0x156>
 802d014:	9207      	str	r2, [sp, #28]
 802d016:	e014      	b.n	802d042 <_vfiprintf_r+0x156>
 802d018:	eba0 0308 	sub.w	r3, r0, r8
 802d01c:	fa09 f303 	lsl.w	r3, r9, r3
 802d020:	4313      	orrs	r3, r2
 802d022:	9304      	str	r3, [sp, #16]
 802d024:	46a2      	mov	sl, r4
 802d026:	e7d2      	b.n	802cfce <_vfiprintf_r+0xe2>
 802d028:	9b03      	ldr	r3, [sp, #12]
 802d02a:	1d19      	adds	r1, r3, #4
 802d02c:	681b      	ldr	r3, [r3, #0]
 802d02e:	9103      	str	r1, [sp, #12]
 802d030:	2b00      	cmp	r3, #0
 802d032:	bfbb      	ittet	lt
 802d034:	425b      	neglt	r3, r3
 802d036:	f042 0202 	orrlt.w	r2, r2, #2
 802d03a:	9307      	strge	r3, [sp, #28]
 802d03c:	9307      	strlt	r3, [sp, #28]
 802d03e:	bfb8      	it	lt
 802d040:	9204      	strlt	r2, [sp, #16]
 802d042:	7823      	ldrb	r3, [r4, #0]
 802d044:	2b2e      	cmp	r3, #46	; 0x2e
 802d046:	d10c      	bne.n	802d062 <_vfiprintf_r+0x176>
 802d048:	7863      	ldrb	r3, [r4, #1]
 802d04a:	2b2a      	cmp	r3, #42	; 0x2a
 802d04c:	d135      	bne.n	802d0ba <_vfiprintf_r+0x1ce>
 802d04e:	9b03      	ldr	r3, [sp, #12]
 802d050:	1d1a      	adds	r2, r3, #4
 802d052:	681b      	ldr	r3, [r3, #0]
 802d054:	9203      	str	r2, [sp, #12]
 802d056:	2b00      	cmp	r3, #0
 802d058:	bfb8      	it	lt
 802d05a:	f04f 33ff 	movlt.w	r3, #4294967295
 802d05e:	3402      	adds	r4, #2
 802d060:	9305      	str	r3, [sp, #20]
 802d062:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802d148 <_vfiprintf_r+0x25c>
 802d066:	7821      	ldrb	r1, [r4, #0]
 802d068:	2203      	movs	r2, #3
 802d06a:	4650      	mov	r0, sl
 802d06c:	f7f3 f8c0 	bl	80201f0 <memchr>
 802d070:	b140      	cbz	r0, 802d084 <_vfiprintf_r+0x198>
 802d072:	2340      	movs	r3, #64	; 0x40
 802d074:	eba0 000a 	sub.w	r0, r0, sl
 802d078:	fa03 f000 	lsl.w	r0, r3, r0
 802d07c:	9b04      	ldr	r3, [sp, #16]
 802d07e:	4303      	orrs	r3, r0
 802d080:	3401      	adds	r4, #1
 802d082:	9304      	str	r3, [sp, #16]
 802d084:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d088:	482c      	ldr	r0, [pc, #176]	; (802d13c <_vfiprintf_r+0x250>)
 802d08a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802d08e:	2206      	movs	r2, #6
 802d090:	f7f3 f8ae 	bl	80201f0 <memchr>
 802d094:	2800      	cmp	r0, #0
 802d096:	d03f      	beq.n	802d118 <_vfiprintf_r+0x22c>
 802d098:	4b29      	ldr	r3, [pc, #164]	; (802d140 <_vfiprintf_r+0x254>)
 802d09a:	bb1b      	cbnz	r3, 802d0e4 <_vfiprintf_r+0x1f8>
 802d09c:	9b03      	ldr	r3, [sp, #12]
 802d09e:	3307      	adds	r3, #7
 802d0a0:	f023 0307 	bic.w	r3, r3, #7
 802d0a4:	3308      	adds	r3, #8
 802d0a6:	9303      	str	r3, [sp, #12]
 802d0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d0aa:	443b      	add	r3, r7
 802d0ac:	9309      	str	r3, [sp, #36]	; 0x24
 802d0ae:	e767      	b.n	802cf80 <_vfiprintf_r+0x94>
 802d0b0:	fb0c 3202 	mla	r2, ip, r2, r3
 802d0b4:	460c      	mov	r4, r1
 802d0b6:	2001      	movs	r0, #1
 802d0b8:	e7a5      	b.n	802d006 <_vfiprintf_r+0x11a>
 802d0ba:	2300      	movs	r3, #0
 802d0bc:	3401      	adds	r4, #1
 802d0be:	9305      	str	r3, [sp, #20]
 802d0c0:	4619      	mov	r1, r3
 802d0c2:	f04f 0c0a 	mov.w	ip, #10
 802d0c6:	4620      	mov	r0, r4
 802d0c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d0cc:	3a30      	subs	r2, #48	; 0x30
 802d0ce:	2a09      	cmp	r2, #9
 802d0d0:	d903      	bls.n	802d0da <_vfiprintf_r+0x1ee>
 802d0d2:	2b00      	cmp	r3, #0
 802d0d4:	d0c5      	beq.n	802d062 <_vfiprintf_r+0x176>
 802d0d6:	9105      	str	r1, [sp, #20]
 802d0d8:	e7c3      	b.n	802d062 <_vfiprintf_r+0x176>
 802d0da:	fb0c 2101 	mla	r1, ip, r1, r2
 802d0de:	4604      	mov	r4, r0
 802d0e0:	2301      	movs	r3, #1
 802d0e2:	e7f0      	b.n	802d0c6 <_vfiprintf_r+0x1da>
 802d0e4:	ab03      	add	r3, sp, #12
 802d0e6:	9300      	str	r3, [sp, #0]
 802d0e8:	462a      	mov	r2, r5
 802d0ea:	4b16      	ldr	r3, [pc, #88]	; (802d144 <_vfiprintf_r+0x258>)
 802d0ec:	a904      	add	r1, sp, #16
 802d0ee:	4630      	mov	r0, r6
 802d0f0:	f3af 8000 	nop.w
 802d0f4:	4607      	mov	r7, r0
 802d0f6:	1c78      	adds	r0, r7, #1
 802d0f8:	d1d6      	bne.n	802d0a8 <_vfiprintf_r+0x1bc>
 802d0fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802d0fc:	07d9      	lsls	r1, r3, #31
 802d0fe:	d405      	bmi.n	802d10c <_vfiprintf_r+0x220>
 802d100:	89ab      	ldrh	r3, [r5, #12]
 802d102:	059a      	lsls	r2, r3, #22
 802d104:	d402      	bmi.n	802d10c <_vfiprintf_r+0x220>
 802d106:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802d108:	f7ff fd5d 	bl	802cbc6 <__retarget_lock_release_recursive>
 802d10c:	89ab      	ldrh	r3, [r5, #12]
 802d10e:	065b      	lsls	r3, r3, #25
 802d110:	f53f af12 	bmi.w	802cf38 <_vfiprintf_r+0x4c>
 802d114:	9809      	ldr	r0, [sp, #36]	; 0x24
 802d116:	e711      	b.n	802cf3c <_vfiprintf_r+0x50>
 802d118:	ab03      	add	r3, sp, #12
 802d11a:	9300      	str	r3, [sp, #0]
 802d11c:	462a      	mov	r2, r5
 802d11e:	4b09      	ldr	r3, [pc, #36]	; (802d144 <_vfiprintf_r+0x258>)
 802d120:	a904      	add	r1, sp, #16
 802d122:	4630      	mov	r0, r6
 802d124:	f000 f880 	bl	802d228 <_printf_i>
 802d128:	e7e4      	b.n	802d0f4 <_vfiprintf_r+0x208>
 802d12a:	bf00      	nop
 802d12c:	0802fa34 	.word	0x0802fa34
 802d130:	0802fa54 	.word	0x0802fa54
 802d134:	0802fa14 	.word	0x0802fa14
 802d138:	0802fa74 	.word	0x0802fa74
 802d13c:	0802fa7e 	.word	0x0802fa7e
 802d140:	00000000 	.word	0x00000000
 802d144:	0802cec7 	.word	0x0802cec7
 802d148:	0802fa7a 	.word	0x0802fa7a

0802d14c <_printf_common>:
 802d14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d150:	4616      	mov	r6, r2
 802d152:	4699      	mov	r9, r3
 802d154:	688a      	ldr	r2, [r1, #8]
 802d156:	690b      	ldr	r3, [r1, #16]
 802d158:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802d15c:	4293      	cmp	r3, r2
 802d15e:	bfb8      	it	lt
 802d160:	4613      	movlt	r3, r2
 802d162:	6033      	str	r3, [r6, #0]
 802d164:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802d168:	4607      	mov	r7, r0
 802d16a:	460c      	mov	r4, r1
 802d16c:	b10a      	cbz	r2, 802d172 <_printf_common+0x26>
 802d16e:	3301      	adds	r3, #1
 802d170:	6033      	str	r3, [r6, #0]
 802d172:	6823      	ldr	r3, [r4, #0]
 802d174:	0699      	lsls	r1, r3, #26
 802d176:	bf42      	ittt	mi
 802d178:	6833      	ldrmi	r3, [r6, #0]
 802d17a:	3302      	addmi	r3, #2
 802d17c:	6033      	strmi	r3, [r6, #0]
 802d17e:	6825      	ldr	r5, [r4, #0]
 802d180:	f015 0506 	ands.w	r5, r5, #6
 802d184:	d106      	bne.n	802d194 <_printf_common+0x48>
 802d186:	f104 0a19 	add.w	sl, r4, #25
 802d18a:	68e3      	ldr	r3, [r4, #12]
 802d18c:	6832      	ldr	r2, [r6, #0]
 802d18e:	1a9b      	subs	r3, r3, r2
 802d190:	42ab      	cmp	r3, r5
 802d192:	dc26      	bgt.n	802d1e2 <_printf_common+0x96>
 802d194:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802d198:	1e13      	subs	r3, r2, #0
 802d19a:	6822      	ldr	r2, [r4, #0]
 802d19c:	bf18      	it	ne
 802d19e:	2301      	movne	r3, #1
 802d1a0:	0692      	lsls	r2, r2, #26
 802d1a2:	d42b      	bmi.n	802d1fc <_printf_common+0xb0>
 802d1a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802d1a8:	4649      	mov	r1, r9
 802d1aa:	4638      	mov	r0, r7
 802d1ac:	47c0      	blx	r8
 802d1ae:	3001      	adds	r0, #1
 802d1b0:	d01e      	beq.n	802d1f0 <_printf_common+0xa4>
 802d1b2:	6823      	ldr	r3, [r4, #0]
 802d1b4:	68e5      	ldr	r5, [r4, #12]
 802d1b6:	6832      	ldr	r2, [r6, #0]
 802d1b8:	f003 0306 	and.w	r3, r3, #6
 802d1bc:	2b04      	cmp	r3, #4
 802d1be:	bf08      	it	eq
 802d1c0:	1aad      	subeq	r5, r5, r2
 802d1c2:	68a3      	ldr	r3, [r4, #8]
 802d1c4:	6922      	ldr	r2, [r4, #16]
 802d1c6:	bf0c      	ite	eq
 802d1c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802d1cc:	2500      	movne	r5, #0
 802d1ce:	4293      	cmp	r3, r2
 802d1d0:	bfc4      	itt	gt
 802d1d2:	1a9b      	subgt	r3, r3, r2
 802d1d4:	18ed      	addgt	r5, r5, r3
 802d1d6:	2600      	movs	r6, #0
 802d1d8:	341a      	adds	r4, #26
 802d1da:	42b5      	cmp	r5, r6
 802d1dc:	d11a      	bne.n	802d214 <_printf_common+0xc8>
 802d1de:	2000      	movs	r0, #0
 802d1e0:	e008      	b.n	802d1f4 <_printf_common+0xa8>
 802d1e2:	2301      	movs	r3, #1
 802d1e4:	4652      	mov	r2, sl
 802d1e6:	4649      	mov	r1, r9
 802d1e8:	4638      	mov	r0, r7
 802d1ea:	47c0      	blx	r8
 802d1ec:	3001      	adds	r0, #1
 802d1ee:	d103      	bne.n	802d1f8 <_printf_common+0xac>
 802d1f0:	f04f 30ff 	mov.w	r0, #4294967295
 802d1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d1f8:	3501      	adds	r5, #1
 802d1fa:	e7c6      	b.n	802d18a <_printf_common+0x3e>
 802d1fc:	18e1      	adds	r1, r4, r3
 802d1fe:	1c5a      	adds	r2, r3, #1
 802d200:	2030      	movs	r0, #48	; 0x30
 802d202:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802d206:	4422      	add	r2, r4
 802d208:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802d20c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802d210:	3302      	adds	r3, #2
 802d212:	e7c7      	b.n	802d1a4 <_printf_common+0x58>
 802d214:	2301      	movs	r3, #1
 802d216:	4622      	mov	r2, r4
 802d218:	4649      	mov	r1, r9
 802d21a:	4638      	mov	r0, r7
 802d21c:	47c0      	blx	r8
 802d21e:	3001      	adds	r0, #1
 802d220:	d0e6      	beq.n	802d1f0 <_printf_common+0xa4>
 802d222:	3601      	adds	r6, #1
 802d224:	e7d9      	b.n	802d1da <_printf_common+0x8e>
	...

0802d228 <_printf_i>:
 802d228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802d22c:	7e0f      	ldrb	r7, [r1, #24]
 802d22e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802d230:	2f78      	cmp	r7, #120	; 0x78
 802d232:	4691      	mov	r9, r2
 802d234:	4680      	mov	r8, r0
 802d236:	460c      	mov	r4, r1
 802d238:	469a      	mov	sl, r3
 802d23a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802d23e:	d807      	bhi.n	802d250 <_printf_i+0x28>
 802d240:	2f62      	cmp	r7, #98	; 0x62
 802d242:	d80a      	bhi.n	802d25a <_printf_i+0x32>
 802d244:	2f00      	cmp	r7, #0
 802d246:	f000 80d8 	beq.w	802d3fa <_printf_i+0x1d2>
 802d24a:	2f58      	cmp	r7, #88	; 0x58
 802d24c:	f000 80a3 	beq.w	802d396 <_printf_i+0x16e>
 802d250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802d254:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802d258:	e03a      	b.n	802d2d0 <_printf_i+0xa8>
 802d25a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802d25e:	2b15      	cmp	r3, #21
 802d260:	d8f6      	bhi.n	802d250 <_printf_i+0x28>
 802d262:	a101      	add	r1, pc, #4	; (adr r1, 802d268 <_printf_i+0x40>)
 802d264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802d268:	0802d2c1 	.word	0x0802d2c1
 802d26c:	0802d2d5 	.word	0x0802d2d5
 802d270:	0802d251 	.word	0x0802d251
 802d274:	0802d251 	.word	0x0802d251
 802d278:	0802d251 	.word	0x0802d251
 802d27c:	0802d251 	.word	0x0802d251
 802d280:	0802d2d5 	.word	0x0802d2d5
 802d284:	0802d251 	.word	0x0802d251
 802d288:	0802d251 	.word	0x0802d251
 802d28c:	0802d251 	.word	0x0802d251
 802d290:	0802d251 	.word	0x0802d251
 802d294:	0802d3e1 	.word	0x0802d3e1
 802d298:	0802d305 	.word	0x0802d305
 802d29c:	0802d3c3 	.word	0x0802d3c3
 802d2a0:	0802d251 	.word	0x0802d251
 802d2a4:	0802d251 	.word	0x0802d251
 802d2a8:	0802d403 	.word	0x0802d403
 802d2ac:	0802d251 	.word	0x0802d251
 802d2b0:	0802d305 	.word	0x0802d305
 802d2b4:	0802d251 	.word	0x0802d251
 802d2b8:	0802d251 	.word	0x0802d251
 802d2bc:	0802d3cb 	.word	0x0802d3cb
 802d2c0:	682b      	ldr	r3, [r5, #0]
 802d2c2:	1d1a      	adds	r2, r3, #4
 802d2c4:	681b      	ldr	r3, [r3, #0]
 802d2c6:	602a      	str	r2, [r5, #0]
 802d2c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802d2cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802d2d0:	2301      	movs	r3, #1
 802d2d2:	e0a3      	b.n	802d41c <_printf_i+0x1f4>
 802d2d4:	6820      	ldr	r0, [r4, #0]
 802d2d6:	6829      	ldr	r1, [r5, #0]
 802d2d8:	0606      	lsls	r6, r0, #24
 802d2da:	f101 0304 	add.w	r3, r1, #4
 802d2de:	d50a      	bpl.n	802d2f6 <_printf_i+0xce>
 802d2e0:	680e      	ldr	r6, [r1, #0]
 802d2e2:	602b      	str	r3, [r5, #0]
 802d2e4:	2e00      	cmp	r6, #0
 802d2e6:	da03      	bge.n	802d2f0 <_printf_i+0xc8>
 802d2e8:	232d      	movs	r3, #45	; 0x2d
 802d2ea:	4276      	negs	r6, r6
 802d2ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802d2f0:	485e      	ldr	r0, [pc, #376]	; (802d46c <_printf_i+0x244>)
 802d2f2:	230a      	movs	r3, #10
 802d2f4:	e019      	b.n	802d32a <_printf_i+0x102>
 802d2f6:	680e      	ldr	r6, [r1, #0]
 802d2f8:	602b      	str	r3, [r5, #0]
 802d2fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 802d2fe:	bf18      	it	ne
 802d300:	b236      	sxthne	r6, r6
 802d302:	e7ef      	b.n	802d2e4 <_printf_i+0xbc>
 802d304:	682b      	ldr	r3, [r5, #0]
 802d306:	6820      	ldr	r0, [r4, #0]
 802d308:	1d19      	adds	r1, r3, #4
 802d30a:	6029      	str	r1, [r5, #0]
 802d30c:	0601      	lsls	r1, r0, #24
 802d30e:	d501      	bpl.n	802d314 <_printf_i+0xec>
 802d310:	681e      	ldr	r6, [r3, #0]
 802d312:	e002      	b.n	802d31a <_printf_i+0xf2>
 802d314:	0646      	lsls	r6, r0, #25
 802d316:	d5fb      	bpl.n	802d310 <_printf_i+0xe8>
 802d318:	881e      	ldrh	r6, [r3, #0]
 802d31a:	4854      	ldr	r0, [pc, #336]	; (802d46c <_printf_i+0x244>)
 802d31c:	2f6f      	cmp	r7, #111	; 0x6f
 802d31e:	bf0c      	ite	eq
 802d320:	2308      	moveq	r3, #8
 802d322:	230a      	movne	r3, #10
 802d324:	2100      	movs	r1, #0
 802d326:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802d32a:	6865      	ldr	r5, [r4, #4]
 802d32c:	60a5      	str	r5, [r4, #8]
 802d32e:	2d00      	cmp	r5, #0
 802d330:	bfa2      	ittt	ge
 802d332:	6821      	ldrge	r1, [r4, #0]
 802d334:	f021 0104 	bicge.w	r1, r1, #4
 802d338:	6021      	strge	r1, [r4, #0]
 802d33a:	b90e      	cbnz	r6, 802d340 <_printf_i+0x118>
 802d33c:	2d00      	cmp	r5, #0
 802d33e:	d04d      	beq.n	802d3dc <_printf_i+0x1b4>
 802d340:	4615      	mov	r5, r2
 802d342:	fbb6 f1f3 	udiv	r1, r6, r3
 802d346:	fb03 6711 	mls	r7, r3, r1, r6
 802d34a:	5dc7      	ldrb	r7, [r0, r7]
 802d34c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802d350:	4637      	mov	r7, r6
 802d352:	42bb      	cmp	r3, r7
 802d354:	460e      	mov	r6, r1
 802d356:	d9f4      	bls.n	802d342 <_printf_i+0x11a>
 802d358:	2b08      	cmp	r3, #8
 802d35a:	d10b      	bne.n	802d374 <_printf_i+0x14c>
 802d35c:	6823      	ldr	r3, [r4, #0]
 802d35e:	07de      	lsls	r6, r3, #31
 802d360:	d508      	bpl.n	802d374 <_printf_i+0x14c>
 802d362:	6923      	ldr	r3, [r4, #16]
 802d364:	6861      	ldr	r1, [r4, #4]
 802d366:	4299      	cmp	r1, r3
 802d368:	bfde      	ittt	le
 802d36a:	2330      	movle	r3, #48	; 0x30
 802d36c:	f805 3c01 	strble.w	r3, [r5, #-1]
 802d370:	f105 35ff 	addle.w	r5, r5, #4294967295
 802d374:	1b52      	subs	r2, r2, r5
 802d376:	6122      	str	r2, [r4, #16]
 802d378:	f8cd a000 	str.w	sl, [sp]
 802d37c:	464b      	mov	r3, r9
 802d37e:	aa03      	add	r2, sp, #12
 802d380:	4621      	mov	r1, r4
 802d382:	4640      	mov	r0, r8
 802d384:	f7ff fee2 	bl	802d14c <_printf_common>
 802d388:	3001      	adds	r0, #1
 802d38a:	d14c      	bne.n	802d426 <_printf_i+0x1fe>
 802d38c:	f04f 30ff 	mov.w	r0, #4294967295
 802d390:	b004      	add	sp, #16
 802d392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d396:	4835      	ldr	r0, [pc, #212]	; (802d46c <_printf_i+0x244>)
 802d398:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802d39c:	6829      	ldr	r1, [r5, #0]
 802d39e:	6823      	ldr	r3, [r4, #0]
 802d3a0:	f851 6b04 	ldr.w	r6, [r1], #4
 802d3a4:	6029      	str	r1, [r5, #0]
 802d3a6:	061d      	lsls	r5, r3, #24
 802d3a8:	d514      	bpl.n	802d3d4 <_printf_i+0x1ac>
 802d3aa:	07df      	lsls	r7, r3, #31
 802d3ac:	bf44      	itt	mi
 802d3ae:	f043 0320 	orrmi.w	r3, r3, #32
 802d3b2:	6023      	strmi	r3, [r4, #0]
 802d3b4:	b91e      	cbnz	r6, 802d3be <_printf_i+0x196>
 802d3b6:	6823      	ldr	r3, [r4, #0]
 802d3b8:	f023 0320 	bic.w	r3, r3, #32
 802d3bc:	6023      	str	r3, [r4, #0]
 802d3be:	2310      	movs	r3, #16
 802d3c0:	e7b0      	b.n	802d324 <_printf_i+0xfc>
 802d3c2:	6823      	ldr	r3, [r4, #0]
 802d3c4:	f043 0320 	orr.w	r3, r3, #32
 802d3c8:	6023      	str	r3, [r4, #0]
 802d3ca:	2378      	movs	r3, #120	; 0x78
 802d3cc:	4828      	ldr	r0, [pc, #160]	; (802d470 <_printf_i+0x248>)
 802d3ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802d3d2:	e7e3      	b.n	802d39c <_printf_i+0x174>
 802d3d4:	0659      	lsls	r1, r3, #25
 802d3d6:	bf48      	it	mi
 802d3d8:	b2b6      	uxthmi	r6, r6
 802d3da:	e7e6      	b.n	802d3aa <_printf_i+0x182>
 802d3dc:	4615      	mov	r5, r2
 802d3de:	e7bb      	b.n	802d358 <_printf_i+0x130>
 802d3e0:	682b      	ldr	r3, [r5, #0]
 802d3e2:	6826      	ldr	r6, [r4, #0]
 802d3e4:	6961      	ldr	r1, [r4, #20]
 802d3e6:	1d18      	adds	r0, r3, #4
 802d3e8:	6028      	str	r0, [r5, #0]
 802d3ea:	0635      	lsls	r5, r6, #24
 802d3ec:	681b      	ldr	r3, [r3, #0]
 802d3ee:	d501      	bpl.n	802d3f4 <_printf_i+0x1cc>
 802d3f0:	6019      	str	r1, [r3, #0]
 802d3f2:	e002      	b.n	802d3fa <_printf_i+0x1d2>
 802d3f4:	0670      	lsls	r0, r6, #25
 802d3f6:	d5fb      	bpl.n	802d3f0 <_printf_i+0x1c8>
 802d3f8:	8019      	strh	r1, [r3, #0]
 802d3fa:	2300      	movs	r3, #0
 802d3fc:	6123      	str	r3, [r4, #16]
 802d3fe:	4615      	mov	r5, r2
 802d400:	e7ba      	b.n	802d378 <_printf_i+0x150>
 802d402:	682b      	ldr	r3, [r5, #0]
 802d404:	1d1a      	adds	r2, r3, #4
 802d406:	602a      	str	r2, [r5, #0]
 802d408:	681d      	ldr	r5, [r3, #0]
 802d40a:	6862      	ldr	r2, [r4, #4]
 802d40c:	2100      	movs	r1, #0
 802d40e:	4628      	mov	r0, r5
 802d410:	f7f2 feee 	bl	80201f0 <memchr>
 802d414:	b108      	cbz	r0, 802d41a <_printf_i+0x1f2>
 802d416:	1b40      	subs	r0, r0, r5
 802d418:	6060      	str	r0, [r4, #4]
 802d41a:	6863      	ldr	r3, [r4, #4]
 802d41c:	6123      	str	r3, [r4, #16]
 802d41e:	2300      	movs	r3, #0
 802d420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802d424:	e7a8      	b.n	802d378 <_printf_i+0x150>
 802d426:	6923      	ldr	r3, [r4, #16]
 802d428:	462a      	mov	r2, r5
 802d42a:	4649      	mov	r1, r9
 802d42c:	4640      	mov	r0, r8
 802d42e:	47d0      	blx	sl
 802d430:	3001      	adds	r0, #1
 802d432:	d0ab      	beq.n	802d38c <_printf_i+0x164>
 802d434:	6823      	ldr	r3, [r4, #0]
 802d436:	079b      	lsls	r3, r3, #30
 802d438:	d413      	bmi.n	802d462 <_printf_i+0x23a>
 802d43a:	68e0      	ldr	r0, [r4, #12]
 802d43c:	9b03      	ldr	r3, [sp, #12]
 802d43e:	4298      	cmp	r0, r3
 802d440:	bfb8      	it	lt
 802d442:	4618      	movlt	r0, r3
 802d444:	e7a4      	b.n	802d390 <_printf_i+0x168>
 802d446:	2301      	movs	r3, #1
 802d448:	4632      	mov	r2, r6
 802d44a:	4649      	mov	r1, r9
 802d44c:	4640      	mov	r0, r8
 802d44e:	47d0      	blx	sl
 802d450:	3001      	adds	r0, #1
 802d452:	d09b      	beq.n	802d38c <_printf_i+0x164>
 802d454:	3501      	adds	r5, #1
 802d456:	68e3      	ldr	r3, [r4, #12]
 802d458:	9903      	ldr	r1, [sp, #12]
 802d45a:	1a5b      	subs	r3, r3, r1
 802d45c:	42ab      	cmp	r3, r5
 802d45e:	dcf2      	bgt.n	802d446 <_printf_i+0x21e>
 802d460:	e7eb      	b.n	802d43a <_printf_i+0x212>
 802d462:	2500      	movs	r5, #0
 802d464:	f104 0619 	add.w	r6, r4, #25
 802d468:	e7f5      	b.n	802d456 <_printf_i+0x22e>
 802d46a:	bf00      	nop
 802d46c:	0802fa85 	.word	0x0802fa85
 802d470:	0802fa96 	.word	0x0802fa96

0802d474 <__sread>:
 802d474:	b510      	push	{r4, lr}
 802d476:	460c      	mov	r4, r1
 802d478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d47c:	f000 fab2 	bl	802d9e4 <_read_r>
 802d480:	2800      	cmp	r0, #0
 802d482:	bfab      	itete	ge
 802d484:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802d486:	89a3      	ldrhlt	r3, [r4, #12]
 802d488:	181b      	addge	r3, r3, r0
 802d48a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802d48e:	bfac      	ite	ge
 802d490:	6563      	strge	r3, [r4, #84]	; 0x54
 802d492:	81a3      	strhlt	r3, [r4, #12]
 802d494:	bd10      	pop	{r4, pc}

0802d496 <__swrite>:
 802d496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d49a:	461f      	mov	r7, r3
 802d49c:	898b      	ldrh	r3, [r1, #12]
 802d49e:	05db      	lsls	r3, r3, #23
 802d4a0:	4605      	mov	r5, r0
 802d4a2:	460c      	mov	r4, r1
 802d4a4:	4616      	mov	r6, r2
 802d4a6:	d505      	bpl.n	802d4b4 <__swrite+0x1e>
 802d4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d4ac:	2302      	movs	r3, #2
 802d4ae:	2200      	movs	r2, #0
 802d4b0:	f000 f9c8 	bl	802d844 <_lseek_r>
 802d4b4:	89a3      	ldrh	r3, [r4, #12]
 802d4b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d4ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802d4be:	81a3      	strh	r3, [r4, #12]
 802d4c0:	4632      	mov	r2, r6
 802d4c2:	463b      	mov	r3, r7
 802d4c4:	4628      	mov	r0, r5
 802d4c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d4ca:	f000 b869 	b.w	802d5a0 <_write_r>

0802d4ce <__sseek>:
 802d4ce:	b510      	push	{r4, lr}
 802d4d0:	460c      	mov	r4, r1
 802d4d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d4d6:	f000 f9b5 	bl	802d844 <_lseek_r>
 802d4da:	1c43      	adds	r3, r0, #1
 802d4dc:	89a3      	ldrh	r3, [r4, #12]
 802d4de:	bf15      	itete	ne
 802d4e0:	6560      	strne	r0, [r4, #84]	; 0x54
 802d4e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802d4e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802d4ea:	81a3      	strheq	r3, [r4, #12]
 802d4ec:	bf18      	it	ne
 802d4ee:	81a3      	strhne	r3, [r4, #12]
 802d4f0:	bd10      	pop	{r4, pc}

0802d4f2 <__sclose>:
 802d4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d4f6:	f000 b8d3 	b.w	802d6a0 <_close_r>
	...

0802d4fc <__swbuf_r>:
 802d4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d4fe:	460e      	mov	r6, r1
 802d500:	4614      	mov	r4, r2
 802d502:	4605      	mov	r5, r0
 802d504:	b118      	cbz	r0, 802d50e <__swbuf_r+0x12>
 802d506:	6983      	ldr	r3, [r0, #24]
 802d508:	b90b      	cbnz	r3, 802d50e <__swbuf_r+0x12>
 802d50a:	f7ff fabd 	bl	802ca88 <__sinit>
 802d50e:	4b21      	ldr	r3, [pc, #132]	; (802d594 <__swbuf_r+0x98>)
 802d510:	429c      	cmp	r4, r3
 802d512:	d12b      	bne.n	802d56c <__swbuf_r+0x70>
 802d514:	686c      	ldr	r4, [r5, #4]
 802d516:	69a3      	ldr	r3, [r4, #24]
 802d518:	60a3      	str	r3, [r4, #8]
 802d51a:	89a3      	ldrh	r3, [r4, #12]
 802d51c:	071a      	lsls	r2, r3, #28
 802d51e:	d52f      	bpl.n	802d580 <__swbuf_r+0x84>
 802d520:	6923      	ldr	r3, [r4, #16]
 802d522:	b36b      	cbz	r3, 802d580 <__swbuf_r+0x84>
 802d524:	6923      	ldr	r3, [r4, #16]
 802d526:	6820      	ldr	r0, [r4, #0]
 802d528:	1ac0      	subs	r0, r0, r3
 802d52a:	6963      	ldr	r3, [r4, #20]
 802d52c:	b2f6      	uxtb	r6, r6
 802d52e:	4283      	cmp	r3, r0
 802d530:	4637      	mov	r7, r6
 802d532:	dc04      	bgt.n	802d53e <__swbuf_r+0x42>
 802d534:	4621      	mov	r1, r4
 802d536:	4628      	mov	r0, r5
 802d538:	f000 f948 	bl	802d7cc <_fflush_r>
 802d53c:	bb30      	cbnz	r0, 802d58c <__swbuf_r+0x90>
 802d53e:	68a3      	ldr	r3, [r4, #8]
 802d540:	3b01      	subs	r3, #1
 802d542:	60a3      	str	r3, [r4, #8]
 802d544:	6823      	ldr	r3, [r4, #0]
 802d546:	1c5a      	adds	r2, r3, #1
 802d548:	6022      	str	r2, [r4, #0]
 802d54a:	701e      	strb	r6, [r3, #0]
 802d54c:	6963      	ldr	r3, [r4, #20]
 802d54e:	3001      	adds	r0, #1
 802d550:	4283      	cmp	r3, r0
 802d552:	d004      	beq.n	802d55e <__swbuf_r+0x62>
 802d554:	89a3      	ldrh	r3, [r4, #12]
 802d556:	07db      	lsls	r3, r3, #31
 802d558:	d506      	bpl.n	802d568 <__swbuf_r+0x6c>
 802d55a:	2e0a      	cmp	r6, #10
 802d55c:	d104      	bne.n	802d568 <__swbuf_r+0x6c>
 802d55e:	4621      	mov	r1, r4
 802d560:	4628      	mov	r0, r5
 802d562:	f000 f933 	bl	802d7cc <_fflush_r>
 802d566:	b988      	cbnz	r0, 802d58c <__swbuf_r+0x90>
 802d568:	4638      	mov	r0, r7
 802d56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d56c:	4b0a      	ldr	r3, [pc, #40]	; (802d598 <__swbuf_r+0x9c>)
 802d56e:	429c      	cmp	r4, r3
 802d570:	d101      	bne.n	802d576 <__swbuf_r+0x7a>
 802d572:	68ac      	ldr	r4, [r5, #8]
 802d574:	e7cf      	b.n	802d516 <__swbuf_r+0x1a>
 802d576:	4b09      	ldr	r3, [pc, #36]	; (802d59c <__swbuf_r+0xa0>)
 802d578:	429c      	cmp	r4, r3
 802d57a:	bf08      	it	eq
 802d57c:	68ec      	ldreq	r4, [r5, #12]
 802d57e:	e7ca      	b.n	802d516 <__swbuf_r+0x1a>
 802d580:	4621      	mov	r1, r4
 802d582:	4628      	mov	r0, r5
 802d584:	f000 f81e 	bl	802d5c4 <__swsetup_r>
 802d588:	2800      	cmp	r0, #0
 802d58a:	d0cb      	beq.n	802d524 <__swbuf_r+0x28>
 802d58c:	f04f 37ff 	mov.w	r7, #4294967295
 802d590:	e7ea      	b.n	802d568 <__swbuf_r+0x6c>
 802d592:	bf00      	nop
 802d594:	0802fa34 	.word	0x0802fa34
 802d598:	0802fa54 	.word	0x0802fa54
 802d59c:	0802fa14 	.word	0x0802fa14

0802d5a0 <_write_r>:
 802d5a0:	b538      	push	{r3, r4, r5, lr}
 802d5a2:	4d07      	ldr	r5, [pc, #28]	; (802d5c0 <_write_r+0x20>)
 802d5a4:	4604      	mov	r4, r0
 802d5a6:	4608      	mov	r0, r1
 802d5a8:	4611      	mov	r1, r2
 802d5aa:	2200      	movs	r2, #0
 802d5ac:	602a      	str	r2, [r5, #0]
 802d5ae:	461a      	mov	r2, r3
 802d5b0:	f7f4 f945 	bl	802183e <_write>
 802d5b4:	1c43      	adds	r3, r0, #1
 802d5b6:	d102      	bne.n	802d5be <_write_r+0x1e>
 802d5b8:	682b      	ldr	r3, [r5, #0]
 802d5ba:	b103      	cbz	r3, 802d5be <_write_r+0x1e>
 802d5bc:	6023      	str	r3, [r4, #0]
 802d5be:	bd38      	pop	{r3, r4, r5, pc}
 802d5c0:	20000d98 	.word	0x20000d98

0802d5c4 <__swsetup_r>:
 802d5c4:	4b32      	ldr	r3, [pc, #200]	; (802d690 <__swsetup_r+0xcc>)
 802d5c6:	b570      	push	{r4, r5, r6, lr}
 802d5c8:	681d      	ldr	r5, [r3, #0]
 802d5ca:	4606      	mov	r6, r0
 802d5cc:	460c      	mov	r4, r1
 802d5ce:	b125      	cbz	r5, 802d5da <__swsetup_r+0x16>
 802d5d0:	69ab      	ldr	r3, [r5, #24]
 802d5d2:	b913      	cbnz	r3, 802d5da <__swsetup_r+0x16>
 802d5d4:	4628      	mov	r0, r5
 802d5d6:	f7ff fa57 	bl	802ca88 <__sinit>
 802d5da:	4b2e      	ldr	r3, [pc, #184]	; (802d694 <__swsetup_r+0xd0>)
 802d5dc:	429c      	cmp	r4, r3
 802d5de:	d10f      	bne.n	802d600 <__swsetup_r+0x3c>
 802d5e0:	686c      	ldr	r4, [r5, #4]
 802d5e2:	89a3      	ldrh	r3, [r4, #12]
 802d5e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d5e8:	0719      	lsls	r1, r3, #28
 802d5ea:	d42c      	bmi.n	802d646 <__swsetup_r+0x82>
 802d5ec:	06dd      	lsls	r5, r3, #27
 802d5ee:	d411      	bmi.n	802d614 <__swsetup_r+0x50>
 802d5f0:	2309      	movs	r3, #9
 802d5f2:	6033      	str	r3, [r6, #0]
 802d5f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802d5f8:	81a3      	strh	r3, [r4, #12]
 802d5fa:	f04f 30ff 	mov.w	r0, #4294967295
 802d5fe:	e03e      	b.n	802d67e <__swsetup_r+0xba>
 802d600:	4b25      	ldr	r3, [pc, #148]	; (802d698 <__swsetup_r+0xd4>)
 802d602:	429c      	cmp	r4, r3
 802d604:	d101      	bne.n	802d60a <__swsetup_r+0x46>
 802d606:	68ac      	ldr	r4, [r5, #8]
 802d608:	e7eb      	b.n	802d5e2 <__swsetup_r+0x1e>
 802d60a:	4b24      	ldr	r3, [pc, #144]	; (802d69c <__swsetup_r+0xd8>)
 802d60c:	429c      	cmp	r4, r3
 802d60e:	bf08      	it	eq
 802d610:	68ec      	ldreq	r4, [r5, #12]
 802d612:	e7e6      	b.n	802d5e2 <__swsetup_r+0x1e>
 802d614:	0758      	lsls	r0, r3, #29
 802d616:	d512      	bpl.n	802d63e <__swsetup_r+0x7a>
 802d618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d61a:	b141      	cbz	r1, 802d62e <__swsetup_r+0x6a>
 802d61c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d620:	4299      	cmp	r1, r3
 802d622:	d002      	beq.n	802d62a <__swsetup_r+0x66>
 802d624:	4630      	mov	r0, r6
 802d626:	f7ff f8af 	bl	802c788 <_free_r>
 802d62a:	2300      	movs	r3, #0
 802d62c:	6363      	str	r3, [r4, #52]	; 0x34
 802d62e:	89a3      	ldrh	r3, [r4, #12]
 802d630:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802d634:	81a3      	strh	r3, [r4, #12]
 802d636:	2300      	movs	r3, #0
 802d638:	6063      	str	r3, [r4, #4]
 802d63a:	6923      	ldr	r3, [r4, #16]
 802d63c:	6023      	str	r3, [r4, #0]
 802d63e:	89a3      	ldrh	r3, [r4, #12]
 802d640:	f043 0308 	orr.w	r3, r3, #8
 802d644:	81a3      	strh	r3, [r4, #12]
 802d646:	6923      	ldr	r3, [r4, #16]
 802d648:	b94b      	cbnz	r3, 802d65e <__swsetup_r+0x9a>
 802d64a:	89a3      	ldrh	r3, [r4, #12]
 802d64c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802d650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d654:	d003      	beq.n	802d65e <__swsetup_r+0x9a>
 802d656:	4621      	mov	r1, r4
 802d658:	4630      	mov	r0, r6
 802d65a:	f000 f92b 	bl	802d8b4 <__smakebuf_r>
 802d65e:	89a0      	ldrh	r0, [r4, #12]
 802d660:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d664:	f010 0301 	ands.w	r3, r0, #1
 802d668:	d00a      	beq.n	802d680 <__swsetup_r+0xbc>
 802d66a:	2300      	movs	r3, #0
 802d66c:	60a3      	str	r3, [r4, #8]
 802d66e:	6963      	ldr	r3, [r4, #20]
 802d670:	425b      	negs	r3, r3
 802d672:	61a3      	str	r3, [r4, #24]
 802d674:	6923      	ldr	r3, [r4, #16]
 802d676:	b943      	cbnz	r3, 802d68a <__swsetup_r+0xc6>
 802d678:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802d67c:	d1ba      	bne.n	802d5f4 <__swsetup_r+0x30>
 802d67e:	bd70      	pop	{r4, r5, r6, pc}
 802d680:	0781      	lsls	r1, r0, #30
 802d682:	bf58      	it	pl
 802d684:	6963      	ldrpl	r3, [r4, #20]
 802d686:	60a3      	str	r3, [r4, #8]
 802d688:	e7f4      	b.n	802d674 <__swsetup_r+0xb0>
 802d68a:	2000      	movs	r0, #0
 802d68c:	e7f7      	b.n	802d67e <__swsetup_r+0xba>
 802d68e:	bf00      	nop
 802d690:	2000007c 	.word	0x2000007c
 802d694:	0802fa34 	.word	0x0802fa34
 802d698:	0802fa54 	.word	0x0802fa54
 802d69c:	0802fa14 	.word	0x0802fa14

0802d6a0 <_close_r>:
 802d6a0:	b538      	push	{r3, r4, r5, lr}
 802d6a2:	4d06      	ldr	r5, [pc, #24]	; (802d6bc <_close_r+0x1c>)
 802d6a4:	2300      	movs	r3, #0
 802d6a6:	4604      	mov	r4, r0
 802d6a8:	4608      	mov	r0, r1
 802d6aa:	602b      	str	r3, [r5, #0]
 802d6ac:	f7f4 f8e3 	bl	8021876 <_close>
 802d6b0:	1c43      	adds	r3, r0, #1
 802d6b2:	d102      	bne.n	802d6ba <_close_r+0x1a>
 802d6b4:	682b      	ldr	r3, [r5, #0]
 802d6b6:	b103      	cbz	r3, 802d6ba <_close_r+0x1a>
 802d6b8:	6023      	str	r3, [r4, #0]
 802d6ba:	bd38      	pop	{r3, r4, r5, pc}
 802d6bc:	20000d98 	.word	0x20000d98

0802d6c0 <__sflush_r>:
 802d6c0:	898a      	ldrh	r2, [r1, #12]
 802d6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d6c6:	4605      	mov	r5, r0
 802d6c8:	0710      	lsls	r0, r2, #28
 802d6ca:	460c      	mov	r4, r1
 802d6cc:	d458      	bmi.n	802d780 <__sflush_r+0xc0>
 802d6ce:	684b      	ldr	r3, [r1, #4]
 802d6d0:	2b00      	cmp	r3, #0
 802d6d2:	dc05      	bgt.n	802d6e0 <__sflush_r+0x20>
 802d6d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802d6d6:	2b00      	cmp	r3, #0
 802d6d8:	dc02      	bgt.n	802d6e0 <__sflush_r+0x20>
 802d6da:	2000      	movs	r0, #0
 802d6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d6e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802d6e2:	2e00      	cmp	r6, #0
 802d6e4:	d0f9      	beq.n	802d6da <__sflush_r+0x1a>
 802d6e6:	2300      	movs	r3, #0
 802d6e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802d6ec:	682f      	ldr	r7, [r5, #0]
 802d6ee:	602b      	str	r3, [r5, #0]
 802d6f0:	d032      	beq.n	802d758 <__sflush_r+0x98>
 802d6f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802d6f4:	89a3      	ldrh	r3, [r4, #12]
 802d6f6:	075a      	lsls	r2, r3, #29
 802d6f8:	d505      	bpl.n	802d706 <__sflush_r+0x46>
 802d6fa:	6863      	ldr	r3, [r4, #4]
 802d6fc:	1ac0      	subs	r0, r0, r3
 802d6fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802d700:	b10b      	cbz	r3, 802d706 <__sflush_r+0x46>
 802d702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802d704:	1ac0      	subs	r0, r0, r3
 802d706:	2300      	movs	r3, #0
 802d708:	4602      	mov	r2, r0
 802d70a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802d70c:	6a21      	ldr	r1, [r4, #32]
 802d70e:	4628      	mov	r0, r5
 802d710:	47b0      	blx	r6
 802d712:	1c43      	adds	r3, r0, #1
 802d714:	89a3      	ldrh	r3, [r4, #12]
 802d716:	d106      	bne.n	802d726 <__sflush_r+0x66>
 802d718:	6829      	ldr	r1, [r5, #0]
 802d71a:	291d      	cmp	r1, #29
 802d71c:	d82c      	bhi.n	802d778 <__sflush_r+0xb8>
 802d71e:	4a2a      	ldr	r2, [pc, #168]	; (802d7c8 <__sflush_r+0x108>)
 802d720:	40ca      	lsrs	r2, r1
 802d722:	07d6      	lsls	r6, r2, #31
 802d724:	d528      	bpl.n	802d778 <__sflush_r+0xb8>
 802d726:	2200      	movs	r2, #0
 802d728:	6062      	str	r2, [r4, #4]
 802d72a:	04d9      	lsls	r1, r3, #19
 802d72c:	6922      	ldr	r2, [r4, #16]
 802d72e:	6022      	str	r2, [r4, #0]
 802d730:	d504      	bpl.n	802d73c <__sflush_r+0x7c>
 802d732:	1c42      	adds	r2, r0, #1
 802d734:	d101      	bne.n	802d73a <__sflush_r+0x7a>
 802d736:	682b      	ldr	r3, [r5, #0]
 802d738:	b903      	cbnz	r3, 802d73c <__sflush_r+0x7c>
 802d73a:	6560      	str	r0, [r4, #84]	; 0x54
 802d73c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d73e:	602f      	str	r7, [r5, #0]
 802d740:	2900      	cmp	r1, #0
 802d742:	d0ca      	beq.n	802d6da <__sflush_r+0x1a>
 802d744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d748:	4299      	cmp	r1, r3
 802d74a:	d002      	beq.n	802d752 <__sflush_r+0x92>
 802d74c:	4628      	mov	r0, r5
 802d74e:	f7ff f81b 	bl	802c788 <_free_r>
 802d752:	2000      	movs	r0, #0
 802d754:	6360      	str	r0, [r4, #52]	; 0x34
 802d756:	e7c1      	b.n	802d6dc <__sflush_r+0x1c>
 802d758:	6a21      	ldr	r1, [r4, #32]
 802d75a:	2301      	movs	r3, #1
 802d75c:	4628      	mov	r0, r5
 802d75e:	47b0      	blx	r6
 802d760:	1c41      	adds	r1, r0, #1
 802d762:	d1c7      	bne.n	802d6f4 <__sflush_r+0x34>
 802d764:	682b      	ldr	r3, [r5, #0]
 802d766:	2b00      	cmp	r3, #0
 802d768:	d0c4      	beq.n	802d6f4 <__sflush_r+0x34>
 802d76a:	2b1d      	cmp	r3, #29
 802d76c:	d001      	beq.n	802d772 <__sflush_r+0xb2>
 802d76e:	2b16      	cmp	r3, #22
 802d770:	d101      	bne.n	802d776 <__sflush_r+0xb6>
 802d772:	602f      	str	r7, [r5, #0]
 802d774:	e7b1      	b.n	802d6da <__sflush_r+0x1a>
 802d776:	89a3      	ldrh	r3, [r4, #12]
 802d778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d77c:	81a3      	strh	r3, [r4, #12]
 802d77e:	e7ad      	b.n	802d6dc <__sflush_r+0x1c>
 802d780:	690f      	ldr	r7, [r1, #16]
 802d782:	2f00      	cmp	r7, #0
 802d784:	d0a9      	beq.n	802d6da <__sflush_r+0x1a>
 802d786:	0793      	lsls	r3, r2, #30
 802d788:	680e      	ldr	r6, [r1, #0]
 802d78a:	bf08      	it	eq
 802d78c:	694b      	ldreq	r3, [r1, #20]
 802d78e:	600f      	str	r7, [r1, #0]
 802d790:	bf18      	it	ne
 802d792:	2300      	movne	r3, #0
 802d794:	eba6 0807 	sub.w	r8, r6, r7
 802d798:	608b      	str	r3, [r1, #8]
 802d79a:	f1b8 0f00 	cmp.w	r8, #0
 802d79e:	dd9c      	ble.n	802d6da <__sflush_r+0x1a>
 802d7a0:	6a21      	ldr	r1, [r4, #32]
 802d7a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802d7a4:	4643      	mov	r3, r8
 802d7a6:	463a      	mov	r2, r7
 802d7a8:	4628      	mov	r0, r5
 802d7aa:	47b0      	blx	r6
 802d7ac:	2800      	cmp	r0, #0
 802d7ae:	dc06      	bgt.n	802d7be <__sflush_r+0xfe>
 802d7b0:	89a3      	ldrh	r3, [r4, #12]
 802d7b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d7b6:	81a3      	strh	r3, [r4, #12]
 802d7b8:	f04f 30ff 	mov.w	r0, #4294967295
 802d7bc:	e78e      	b.n	802d6dc <__sflush_r+0x1c>
 802d7be:	4407      	add	r7, r0
 802d7c0:	eba8 0800 	sub.w	r8, r8, r0
 802d7c4:	e7e9      	b.n	802d79a <__sflush_r+0xda>
 802d7c6:	bf00      	nop
 802d7c8:	20400001 	.word	0x20400001

0802d7cc <_fflush_r>:
 802d7cc:	b538      	push	{r3, r4, r5, lr}
 802d7ce:	690b      	ldr	r3, [r1, #16]
 802d7d0:	4605      	mov	r5, r0
 802d7d2:	460c      	mov	r4, r1
 802d7d4:	b913      	cbnz	r3, 802d7dc <_fflush_r+0x10>
 802d7d6:	2500      	movs	r5, #0
 802d7d8:	4628      	mov	r0, r5
 802d7da:	bd38      	pop	{r3, r4, r5, pc}
 802d7dc:	b118      	cbz	r0, 802d7e6 <_fflush_r+0x1a>
 802d7de:	6983      	ldr	r3, [r0, #24]
 802d7e0:	b90b      	cbnz	r3, 802d7e6 <_fflush_r+0x1a>
 802d7e2:	f7ff f951 	bl	802ca88 <__sinit>
 802d7e6:	4b14      	ldr	r3, [pc, #80]	; (802d838 <_fflush_r+0x6c>)
 802d7e8:	429c      	cmp	r4, r3
 802d7ea:	d11b      	bne.n	802d824 <_fflush_r+0x58>
 802d7ec:	686c      	ldr	r4, [r5, #4]
 802d7ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d7f2:	2b00      	cmp	r3, #0
 802d7f4:	d0ef      	beq.n	802d7d6 <_fflush_r+0xa>
 802d7f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802d7f8:	07d0      	lsls	r0, r2, #31
 802d7fa:	d404      	bmi.n	802d806 <_fflush_r+0x3a>
 802d7fc:	0599      	lsls	r1, r3, #22
 802d7fe:	d402      	bmi.n	802d806 <_fflush_r+0x3a>
 802d800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d802:	f7ff f9df 	bl	802cbc4 <__retarget_lock_acquire_recursive>
 802d806:	4628      	mov	r0, r5
 802d808:	4621      	mov	r1, r4
 802d80a:	f7ff ff59 	bl	802d6c0 <__sflush_r>
 802d80e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802d810:	07da      	lsls	r2, r3, #31
 802d812:	4605      	mov	r5, r0
 802d814:	d4e0      	bmi.n	802d7d8 <_fflush_r+0xc>
 802d816:	89a3      	ldrh	r3, [r4, #12]
 802d818:	059b      	lsls	r3, r3, #22
 802d81a:	d4dd      	bmi.n	802d7d8 <_fflush_r+0xc>
 802d81c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d81e:	f7ff f9d2 	bl	802cbc6 <__retarget_lock_release_recursive>
 802d822:	e7d9      	b.n	802d7d8 <_fflush_r+0xc>
 802d824:	4b05      	ldr	r3, [pc, #20]	; (802d83c <_fflush_r+0x70>)
 802d826:	429c      	cmp	r4, r3
 802d828:	d101      	bne.n	802d82e <_fflush_r+0x62>
 802d82a:	68ac      	ldr	r4, [r5, #8]
 802d82c:	e7df      	b.n	802d7ee <_fflush_r+0x22>
 802d82e:	4b04      	ldr	r3, [pc, #16]	; (802d840 <_fflush_r+0x74>)
 802d830:	429c      	cmp	r4, r3
 802d832:	bf08      	it	eq
 802d834:	68ec      	ldreq	r4, [r5, #12]
 802d836:	e7da      	b.n	802d7ee <_fflush_r+0x22>
 802d838:	0802fa34 	.word	0x0802fa34
 802d83c:	0802fa54 	.word	0x0802fa54
 802d840:	0802fa14 	.word	0x0802fa14

0802d844 <_lseek_r>:
 802d844:	b538      	push	{r3, r4, r5, lr}
 802d846:	4d07      	ldr	r5, [pc, #28]	; (802d864 <_lseek_r+0x20>)
 802d848:	4604      	mov	r4, r0
 802d84a:	4608      	mov	r0, r1
 802d84c:	4611      	mov	r1, r2
 802d84e:	2200      	movs	r2, #0
 802d850:	602a      	str	r2, [r5, #0]
 802d852:	461a      	mov	r2, r3
 802d854:	f7f4 f836 	bl	80218c4 <_lseek>
 802d858:	1c43      	adds	r3, r0, #1
 802d85a:	d102      	bne.n	802d862 <_lseek_r+0x1e>
 802d85c:	682b      	ldr	r3, [r5, #0]
 802d85e:	b103      	cbz	r3, 802d862 <_lseek_r+0x1e>
 802d860:	6023      	str	r3, [r4, #0]
 802d862:	bd38      	pop	{r3, r4, r5, pc}
 802d864:	20000d98 	.word	0x20000d98

0802d868 <__swhatbuf_r>:
 802d868:	b570      	push	{r4, r5, r6, lr}
 802d86a:	460e      	mov	r6, r1
 802d86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d870:	2900      	cmp	r1, #0
 802d872:	b096      	sub	sp, #88	; 0x58
 802d874:	4614      	mov	r4, r2
 802d876:	461d      	mov	r5, r3
 802d878:	da08      	bge.n	802d88c <__swhatbuf_r+0x24>
 802d87a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802d87e:	2200      	movs	r2, #0
 802d880:	602a      	str	r2, [r5, #0]
 802d882:	061a      	lsls	r2, r3, #24
 802d884:	d410      	bmi.n	802d8a8 <__swhatbuf_r+0x40>
 802d886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802d88a:	e00e      	b.n	802d8aa <__swhatbuf_r+0x42>
 802d88c:	466a      	mov	r2, sp
 802d88e:	f000 f8bb 	bl	802da08 <_fstat_r>
 802d892:	2800      	cmp	r0, #0
 802d894:	dbf1      	blt.n	802d87a <__swhatbuf_r+0x12>
 802d896:	9a01      	ldr	r2, [sp, #4]
 802d898:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802d89c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802d8a0:	425a      	negs	r2, r3
 802d8a2:	415a      	adcs	r2, r3
 802d8a4:	602a      	str	r2, [r5, #0]
 802d8a6:	e7ee      	b.n	802d886 <__swhatbuf_r+0x1e>
 802d8a8:	2340      	movs	r3, #64	; 0x40
 802d8aa:	2000      	movs	r0, #0
 802d8ac:	6023      	str	r3, [r4, #0]
 802d8ae:	b016      	add	sp, #88	; 0x58
 802d8b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0802d8b4 <__smakebuf_r>:
 802d8b4:	898b      	ldrh	r3, [r1, #12]
 802d8b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802d8b8:	079d      	lsls	r5, r3, #30
 802d8ba:	4606      	mov	r6, r0
 802d8bc:	460c      	mov	r4, r1
 802d8be:	d507      	bpl.n	802d8d0 <__smakebuf_r+0x1c>
 802d8c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802d8c4:	6023      	str	r3, [r4, #0]
 802d8c6:	6123      	str	r3, [r4, #16]
 802d8c8:	2301      	movs	r3, #1
 802d8ca:	6163      	str	r3, [r4, #20]
 802d8cc:	b002      	add	sp, #8
 802d8ce:	bd70      	pop	{r4, r5, r6, pc}
 802d8d0:	ab01      	add	r3, sp, #4
 802d8d2:	466a      	mov	r2, sp
 802d8d4:	f7ff ffc8 	bl	802d868 <__swhatbuf_r>
 802d8d8:	9900      	ldr	r1, [sp, #0]
 802d8da:	4605      	mov	r5, r0
 802d8dc:	4630      	mov	r0, r6
 802d8de:	f7fe ffbf 	bl	802c860 <_malloc_r>
 802d8e2:	b948      	cbnz	r0, 802d8f8 <__smakebuf_r+0x44>
 802d8e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d8e8:	059a      	lsls	r2, r3, #22
 802d8ea:	d4ef      	bmi.n	802d8cc <__smakebuf_r+0x18>
 802d8ec:	f023 0303 	bic.w	r3, r3, #3
 802d8f0:	f043 0302 	orr.w	r3, r3, #2
 802d8f4:	81a3      	strh	r3, [r4, #12]
 802d8f6:	e7e3      	b.n	802d8c0 <__smakebuf_r+0xc>
 802d8f8:	4b0d      	ldr	r3, [pc, #52]	; (802d930 <__smakebuf_r+0x7c>)
 802d8fa:	62b3      	str	r3, [r6, #40]	; 0x28
 802d8fc:	89a3      	ldrh	r3, [r4, #12]
 802d8fe:	6020      	str	r0, [r4, #0]
 802d900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802d904:	81a3      	strh	r3, [r4, #12]
 802d906:	9b00      	ldr	r3, [sp, #0]
 802d908:	6163      	str	r3, [r4, #20]
 802d90a:	9b01      	ldr	r3, [sp, #4]
 802d90c:	6120      	str	r0, [r4, #16]
 802d90e:	b15b      	cbz	r3, 802d928 <__smakebuf_r+0x74>
 802d910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d914:	4630      	mov	r0, r6
 802d916:	f000 f889 	bl	802da2c <_isatty_r>
 802d91a:	b128      	cbz	r0, 802d928 <__smakebuf_r+0x74>
 802d91c:	89a3      	ldrh	r3, [r4, #12]
 802d91e:	f023 0303 	bic.w	r3, r3, #3
 802d922:	f043 0301 	orr.w	r3, r3, #1
 802d926:	81a3      	strh	r3, [r4, #12]
 802d928:	89a0      	ldrh	r0, [r4, #12]
 802d92a:	4305      	orrs	r5, r0
 802d92c:	81a5      	strh	r5, [r4, #12]
 802d92e:	e7cd      	b.n	802d8cc <__smakebuf_r+0x18>
 802d930:	0802ca21 	.word	0x0802ca21

0802d934 <memcpy>:
 802d934:	440a      	add	r2, r1
 802d936:	4291      	cmp	r1, r2
 802d938:	f100 33ff 	add.w	r3, r0, #4294967295
 802d93c:	d100      	bne.n	802d940 <memcpy+0xc>
 802d93e:	4770      	bx	lr
 802d940:	b510      	push	{r4, lr}
 802d942:	f811 4b01 	ldrb.w	r4, [r1], #1
 802d946:	f803 4f01 	strb.w	r4, [r3, #1]!
 802d94a:	4291      	cmp	r1, r2
 802d94c:	d1f9      	bne.n	802d942 <memcpy+0xe>
 802d94e:	bd10      	pop	{r4, pc}

0802d950 <memmove>:
 802d950:	4288      	cmp	r0, r1
 802d952:	b510      	push	{r4, lr}
 802d954:	eb01 0402 	add.w	r4, r1, r2
 802d958:	d902      	bls.n	802d960 <memmove+0x10>
 802d95a:	4284      	cmp	r4, r0
 802d95c:	4623      	mov	r3, r4
 802d95e:	d807      	bhi.n	802d970 <memmove+0x20>
 802d960:	1e43      	subs	r3, r0, #1
 802d962:	42a1      	cmp	r1, r4
 802d964:	d008      	beq.n	802d978 <memmove+0x28>
 802d966:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d96a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d96e:	e7f8      	b.n	802d962 <memmove+0x12>
 802d970:	4402      	add	r2, r0
 802d972:	4601      	mov	r1, r0
 802d974:	428a      	cmp	r2, r1
 802d976:	d100      	bne.n	802d97a <memmove+0x2a>
 802d978:	bd10      	pop	{r4, pc}
 802d97a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802d97e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802d982:	e7f7      	b.n	802d974 <memmove+0x24>

0802d984 <_realloc_r>:
 802d984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d988:	4680      	mov	r8, r0
 802d98a:	4614      	mov	r4, r2
 802d98c:	460e      	mov	r6, r1
 802d98e:	b921      	cbnz	r1, 802d99a <_realloc_r+0x16>
 802d990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d994:	4611      	mov	r1, r2
 802d996:	f7fe bf63 	b.w	802c860 <_malloc_r>
 802d99a:	b92a      	cbnz	r2, 802d9a8 <_realloc_r+0x24>
 802d99c:	f7fe fef4 	bl	802c788 <_free_r>
 802d9a0:	4625      	mov	r5, r4
 802d9a2:	4628      	mov	r0, r5
 802d9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d9a8:	f000 f850 	bl	802da4c <_malloc_usable_size_r>
 802d9ac:	4284      	cmp	r4, r0
 802d9ae:	4607      	mov	r7, r0
 802d9b0:	d802      	bhi.n	802d9b8 <_realloc_r+0x34>
 802d9b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802d9b6:	d812      	bhi.n	802d9de <_realloc_r+0x5a>
 802d9b8:	4621      	mov	r1, r4
 802d9ba:	4640      	mov	r0, r8
 802d9bc:	f7fe ff50 	bl	802c860 <_malloc_r>
 802d9c0:	4605      	mov	r5, r0
 802d9c2:	2800      	cmp	r0, #0
 802d9c4:	d0ed      	beq.n	802d9a2 <_realloc_r+0x1e>
 802d9c6:	42bc      	cmp	r4, r7
 802d9c8:	4622      	mov	r2, r4
 802d9ca:	4631      	mov	r1, r6
 802d9cc:	bf28      	it	cs
 802d9ce:	463a      	movcs	r2, r7
 802d9d0:	f7ff ffb0 	bl	802d934 <memcpy>
 802d9d4:	4631      	mov	r1, r6
 802d9d6:	4640      	mov	r0, r8
 802d9d8:	f7fe fed6 	bl	802c788 <_free_r>
 802d9dc:	e7e1      	b.n	802d9a2 <_realloc_r+0x1e>
 802d9de:	4635      	mov	r5, r6
 802d9e0:	e7df      	b.n	802d9a2 <_realloc_r+0x1e>
	...

0802d9e4 <_read_r>:
 802d9e4:	b538      	push	{r3, r4, r5, lr}
 802d9e6:	4d07      	ldr	r5, [pc, #28]	; (802da04 <_read_r+0x20>)
 802d9e8:	4604      	mov	r4, r0
 802d9ea:	4608      	mov	r0, r1
 802d9ec:	4611      	mov	r1, r2
 802d9ee:	2200      	movs	r2, #0
 802d9f0:	602a      	str	r2, [r5, #0]
 802d9f2:	461a      	mov	r2, r3
 802d9f4:	f7f3 ff06 	bl	8021804 <_read>
 802d9f8:	1c43      	adds	r3, r0, #1
 802d9fa:	d102      	bne.n	802da02 <_read_r+0x1e>
 802d9fc:	682b      	ldr	r3, [r5, #0]
 802d9fe:	b103      	cbz	r3, 802da02 <_read_r+0x1e>
 802da00:	6023      	str	r3, [r4, #0]
 802da02:	bd38      	pop	{r3, r4, r5, pc}
 802da04:	20000d98 	.word	0x20000d98

0802da08 <_fstat_r>:
 802da08:	b538      	push	{r3, r4, r5, lr}
 802da0a:	4d07      	ldr	r5, [pc, #28]	; (802da28 <_fstat_r+0x20>)
 802da0c:	2300      	movs	r3, #0
 802da0e:	4604      	mov	r4, r0
 802da10:	4608      	mov	r0, r1
 802da12:	4611      	mov	r1, r2
 802da14:	602b      	str	r3, [r5, #0]
 802da16:	f7f3 ff3a 	bl	802188e <_fstat>
 802da1a:	1c43      	adds	r3, r0, #1
 802da1c:	d102      	bne.n	802da24 <_fstat_r+0x1c>
 802da1e:	682b      	ldr	r3, [r5, #0]
 802da20:	b103      	cbz	r3, 802da24 <_fstat_r+0x1c>
 802da22:	6023      	str	r3, [r4, #0]
 802da24:	bd38      	pop	{r3, r4, r5, pc}
 802da26:	bf00      	nop
 802da28:	20000d98 	.word	0x20000d98

0802da2c <_isatty_r>:
 802da2c:	b538      	push	{r3, r4, r5, lr}
 802da2e:	4d06      	ldr	r5, [pc, #24]	; (802da48 <_isatty_r+0x1c>)
 802da30:	2300      	movs	r3, #0
 802da32:	4604      	mov	r4, r0
 802da34:	4608      	mov	r0, r1
 802da36:	602b      	str	r3, [r5, #0]
 802da38:	f7f3 ff39 	bl	80218ae <_isatty>
 802da3c:	1c43      	adds	r3, r0, #1
 802da3e:	d102      	bne.n	802da46 <_isatty_r+0x1a>
 802da40:	682b      	ldr	r3, [r5, #0]
 802da42:	b103      	cbz	r3, 802da46 <_isatty_r+0x1a>
 802da44:	6023      	str	r3, [r4, #0]
 802da46:	bd38      	pop	{r3, r4, r5, pc}
 802da48:	20000d98 	.word	0x20000d98

0802da4c <_malloc_usable_size_r>:
 802da4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802da50:	1f18      	subs	r0, r3, #4
 802da52:	2b00      	cmp	r3, #0
 802da54:	bfbc      	itt	lt
 802da56:	580b      	ldrlt	r3, [r1, r0]
 802da58:	18c0      	addlt	r0, r0, r3
 802da5a:	4770      	bx	lr

0802da5c <_init>:
 802da5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802da5e:	bf00      	nop
 802da60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802da62:	bc08      	pop	{r3}
 802da64:	469e      	mov	lr, r3
 802da66:	4770      	bx	lr

0802da68 <_fini>:
 802da68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802da6a:	bf00      	nop
 802da6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802da6e:	bc08      	pop	{r3}
 802da70:	469e      	mov	lr, r3
 802da72:	4770      	bx	lr
