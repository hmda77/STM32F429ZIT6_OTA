
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea60  080201b0  080201b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025cc  0802ec10  0802ec10  0001ec10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080311dc  080311dc  000300e0  2**0
                  CONTENTS
  4 .ARM          00000008  080311dc  080311dc  000211dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080311e4  080311e4  000300e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080311e4  080311e4  000211e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080311e8  080311e8  000211e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  080311ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e0  2**0
                  CONTENTS
 10 .bss          00001100  200000e0  200000e0  000300e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200011e0  200011e0  000300e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b80c  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a05  00000000  00000000  0005b91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021c0  00000000  00000000  00061328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f90  00000000  00000000  000634e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c352  00000000  00000000  00065478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c373  00000000  00000000  000917ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f057e  00000000  00000000  000bdb3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ae0bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000098ec  00000000  00000000  001ae10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201b0 <__do_global_dtors_aux>:
 80201b0:	b510      	push	{r4, lr}
 80201b2:	4c05      	ldr	r4, [pc, #20]	; (80201c8 <__do_global_dtors_aux+0x18>)
 80201b4:	7823      	ldrb	r3, [r4, #0]
 80201b6:	b933      	cbnz	r3, 80201c6 <__do_global_dtors_aux+0x16>
 80201b8:	4b04      	ldr	r3, [pc, #16]	; (80201cc <__do_global_dtors_aux+0x1c>)
 80201ba:	b113      	cbz	r3, 80201c2 <__do_global_dtors_aux+0x12>
 80201bc:	4804      	ldr	r0, [pc, #16]	; (80201d0 <__do_global_dtors_aux+0x20>)
 80201be:	f3af 8000 	nop.w
 80201c2:	2301      	movs	r3, #1
 80201c4:	7023      	strb	r3, [r4, #0]
 80201c6:	bd10      	pop	{r4, pc}
 80201c8:	200000e0 	.word	0x200000e0
 80201cc:	00000000 	.word	0x00000000
 80201d0:	0802ebf8 	.word	0x0802ebf8

080201d4 <frame_dummy>:
 80201d4:	b508      	push	{r3, lr}
 80201d6:	4b03      	ldr	r3, [pc, #12]	; (80201e4 <frame_dummy+0x10>)
 80201d8:	b11b      	cbz	r3, 80201e2 <frame_dummy+0xe>
 80201da:	4903      	ldr	r1, [pc, #12]	; (80201e8 <frame_dummy+0x14>)
 80201dc:	4803      	ldr	r0, [pc, #12]	; (80201ec <frame_dummy+0x18>)
 80201de:	f3af 8000 	nop.w
 80201e2:	bd08      	pop	{r3, pc}
 80201e4:	00000000 	.word	0x00000000
 80201e8:	200000e4 	.word	0x200000e4
 80201ec:	0802ebf8 	.word	0x0802ebf8

080201f0 <memchr>:
 80201f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201f4:	2a10      	cmp	r2, #16
 80201f6:	db2b      	blt.n	8020250 <memchr+0x60>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	d008      	beq.n	8020210 <memchr+0x20>
 80201fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020202:	3a01      	subs	r2, #1
 8020204:	428b      	cmp	r3, r1
 8020206:	d02d      	beq.n	8020264 <memchr+0x74>
 8020208:	f010 0f07 	tst.w	r0, #7
 802020c:	b342      	cbz	r2, 8020260 <memchr+0x70>
 802020e:	d1f6      	bne.n	80201fe <memchr+0xe>
 8020210:	b4f0      	push	{r4, r5, r6, r7}
 8020212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802021a:	f022 0407 	bic.w	r4, r2, #7
 802021e:	f07f 0700 	mvns.w	r7, #0
 8020222:	2300      	movs	r3, #0
 8020224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020228:	3c08      	subs	r4, #8
 802022a:	ea85 0501 	eor.w	r5, r5, r1
 802022e:	ea86 0601 	eor.w	r6, r6, r1
 8020232:	fa85 f547 	uadd8	r5, r5, r7
 8020236:	faa3 f587 	sel	r5, r3, r7
 802023a:	fa86 f647 	uadd8	r6, r6, r7
 802023e:	faa5 f687 	sel	r6, r5, r7
 8020242:	b98e      	cbnz	r6, 8020268 <memchr+0x78>
 8020244:	d1ee      	bne.n	8020224 <memchr+0x34>
 8020246:	bcf0      	pop	{r4, r5, r6, r7}
 8020248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802024c:	f002 0207 	and.w	r2, r2, #7
 8020250:	b132      	cbz	r2, 8020260 <memchr+0x70>
 8020252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020256:	3a01      	subs	r2, #1
 8020258:	ea83 0301 	eor.w	r3, r3, r1
 802025c:	b113      	cbz	r3, 8020264 <memchr+0x74>
 802025e:	d1f8      	bne.n	8020252 <memchr+0x62>
 8020260:	2000      	movs	r0, #0
 8020262:	4770      	bx	lr
 8020264:	3801      	subs	r0, #1
 8020266:	4770      	bx	lr
 8020268:	2d00      	cmp	r5, #0
 802026a:	bf06      	itte	eq
 802026c:	4635      	moveq	r5, r6
 802026e:	3803      	subeq	r0, #3
 8020270:	3807      	subne	r0, #7
 8020272:	f015 0f01 	tst.w	r5, #1
 8020276:	d107      	bne.n	8020288 <memchr+0x98>
 8020278:	3001      	adds	r0, #1
 802027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802027e:	bf02      	ittt	eq
 8020280:	3001      	addeq	r0, #1
 8020282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020286:	3001      	addeq	r0, #1
 8020288:	bcf0      	pop	{r4, r5, r6, r7}
 802028a:	3801      	subs	r0, #1
 802028c:	4770      	bx	lr
 802028e:	bf00      	nop

08020290 <__aeabi_uldivmod>:
 8020290:	b953      	cbnz	r3, 80202a8 <__aeabi_uldivmod+0x18>
 8020292:	b94a      	cbnz	r2, 80202a8 <__aeabi_uldivmod+0x18>
 8020294:	2900      	cmp	r1, #0
 8020296:	bf08      	it	eq
 8020298:	2800      	cmpeq	r0, #0
 802029a:	bf1c      	itt	ne
 802029c:	f04f 31ff 	movne.w	r1, #4294967295
 80202a0:	f04f 30ff 	movne.w	r0, #4294967295
 80202a4:	f000 b974 	b.w	8020590 <__aeabi_idiv0>
 80202a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80202ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202b0:	f000 f806 	bl	80202c0 <__udivmoddi4>
 80202b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202bc:	b004      	add	sp, #16
 80202be:	4770      	bx	lr

080202c0 <__udivmoddi4>:
 80202c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202c4:	9d08      	ldr	r5, [sp, #32]
 80202c6:	4604      	mov	r4, r0
 80202c8:	468e      	mov	lr, r1
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d14d      	bne.n	802036a <__udivmoddi4+0xaa>
 80202ce:	428a      	cmp	r2, r1
 80202d0:	4694      	mov	ip, r2
 80202d2:	d969      	bls.n	80203a8 <__udivmoddi4+0xe8>
 80202d4:	fab2 f282 	clz	r2, r2
 80202d8:	b152      	cbz	r2, 80202f0 <__udivmoddi4+0x30>
 80202da:	fa01 f302 	lsl.w	r3, r1, r2
 80202de:	f1c2 0120 	rsb	r1, r2, #32
 80202e2:	fa20 f101 	lsr.w	r1, r0, r1
 80202e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80202ea:	ea41 0e03 	orr.w	lr, r1, r3
 80202ee:	4094      	lsls	r4, r2
 80202f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80202f4:	0c21      	lsrs	r1, r4, #16
 80202f6:	fbbe f6f8 	udiv	r6, lr, r8
 80202fa:	fa1f f78c 	uxth.w	r7, ip
 80202fe:	fb08 e316 	mls	r3, r8, r6, lr
 8020302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020306:	fb06 f107 	mul.w	r1, r6, r7
 802030a:	4299      	cmp	r1, r3
 802030c:	d90a      	bls.n	8020324 <__udivmoddi4+0x64>
 802030e:	eb1c 0303 	adds.w	r3, ip, r3
 8020312:	f106 30ff 	add.w	r0, r6, #4294967295
 8020316:	f080 811f 	bcs.w	8020558 <__udivmoddi4+0x298>
 802031a:	4299      	cmp	r1, r3
 802031c:	f240 811c 	bls.w	8020558 <__udivmoddi4+0x298>
 8020320:	3e02      	subs	r6, #2
 8020322:	4463      	add	r3, ip
 8020324:	1a5b      	subs	r3, r3, r1
 8020326:	b2a4      	uxth	r4, r4
 8020328:	fbb3 f0f8 	udiv	r0, r3, r8
 802032c:	fb08 3310 	mls	r3, r8, r0, r3
 8020330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020334:	fb00 f707 	mul.w	r7, r0, r7
 8020338:	42a7      	cmp	r7, r4
 802033a:	d90a      	bls.n	8020352 <__udivmoddi4+0x92>
 802033c:	eb1c 0404 	adds.w	r4, ip, r4
 8020340:	f100 33ff 	add.w	r3, r0, #4294967295
 8020344:	f080 810a 	bcs.w	802055c <__udivmoddi4+0x29c>
 8020348:	42a7      	cmp	r7, r4
 802034a:	f240 8107 	bls.w	802055c <__udivmoddi4+0x29c>
 802034e:	4464      	add	r4, ip
 8020350:	3802      	subs	r0, #2
 8020352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020356:	1be4      	subs	r4, r4, r7
 8020358:	2600      	movs	r6, #0
 802035a:	b11d      	cbz	r5, 8020364 <__udivmoddi4+0xa4>
 802035c:	40d4      	lsrs	r4, r2
 802035e:	2300      	movs	r3, #0
 8020360:	e9c5 4300 	strd	r4, r3, [r5]
 8020364:	4631      	mov	r1, r6
 8020366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802036a:	428b      	cmp	r3, r1
 802036c:	d909      	bls.n	8020382 <__udivmoddi4+0xc2>
 802036e:	2d00      	cmp	r5, #0
 8020370:	f000 80ef 	beq.w	8020552 <__udivmoddi4+0x292>
 8020374:	2600      	movs	r6, #0
 8020376:	e9c5 0100 	strd	r0, r1, [r5]
 802037a:	4630      	mov	r0, r6
 802037c:	4631      	mov	r1, r6
 802037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020382:	fab3 f683 	clz	r6, r3
 8020386:	2e00      	cmp	r6, #0
 8020388:	d14a      	bne.n	8020420 <__udivmoddi4+0x160>
 802038a:	428b      	cmp	r3, r1
 802038c:	d302      	bcc.n	8020394 <__udivmoddi4+0xd4>
 802038e:	4282      	cmp	r2, r0
 8020390:	f200 80f9 	bhi.w	8020586 <__udivmoddi4+0x2c6>
 8020394:	1a84      	subs	r4, r0, r2
 8020396:	eb61 0303 	sbc.w	r3, r1, r3
 802039a:	2001      	movs	r0, #1
 802039c:	469e      	mov	lr, r3
 802039e:	2d00      	cmp	r5, #0
 80203a0:	d0e0      	beq.n	8020364 <__udivmoddi4+0xa4>
 80203a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80203a6:	e7dd      	b.n	8020364 <__udivmoddi4+0xa4>
 80203a8:	b902      	cbnz	r2, 80203ac <__udivmoddi4+0xec>
 80203aa:	deff      	udf	#255	; 0xff
 80203ac:	fab2 f282 	clz	r2, r2
 80203b0:	2a00      	cmp	r2, #0
 80203b2:	f040 8092 	bne.w	80204da <__udivmoddi4+0x21a>
 80203b6:	eba1 010c 	sub.w	r1, r1, ip
 80203ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80203be:	fa1f fe8c 	uxth.w	lr, ip
 80203c2:	2601      	movs	r6, #1
 80203c4:	0c20      	lsrs	r0, r4, #16
 80203c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80203ca:	fb07 1113 	mls	r1, r7, r3, r1
 80203ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203d2:	fb0e f003 	mul.w	r0, lr, r3
 80203d6:	4288      	cmp	r0, r1
 80203d8:	d908      	bls.n	80203ec <__udivmoddi4+0x12c>
 80203da:	eb1c 0101 	adds.w	r1, ip, r1
 80203de:	f103 38ff 	add.w	r8, r3, #4294967295
 80203e2:	d202      	bcs.n	80203ea <__udivmoddi4+0x12a>
 80203e4:	4288      	cmp	r0, r1
 80203e6:	f200 80cb 	bhi.w	8020580 <__udivmoddi4+0x2c0>
 80203ea:	4643      	mov	r3, r8
 80203ec:	1a09      	subs	r1, r1, r0
 80203ee:	b2a4      	uxth	r4, r4
 80203f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80203f4:	fb07 1110 	mls	r1, r7, r0, r1
 80203f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80203fc:	fb0e fe00 	mul.w	lr, lr, r0
 8020400:	45a6      	cmp	lr, r4
 8020402:	d908      	bls.n	8020416 <__udivmoddi4+0x156>
 8020404:	eb1c 0404 	adds.w	r4, ip, r4
 8020408:	f100 31ff 	add.w	r1, r0, #4294967295
 802040c:	d202      	bcs.n	8020414 <__udivmoddi4+0x154>
 802040e:	45a6      	cmp	lr, r4
 8020410:	f200 80bb 	bhi.w	802058a <__udivmoddi4+0x2ca>
 8020414:	4608      	mov	r0, r1
 8020416:	eba4 040e 	sub.w	r4, r4, lr
 802041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802041e:	e79c      	b.n	802035a <__udivmoddi4+0x9a>
 8020420:	f1c6 0720 	rsb	r7, r6, #32
 8020424:	40b3      	lsls	r3, r6
 8020426:	fa22 fc07 	lsr.w	ip, r2, r7
 802042a:	ea4c 0c03 	orr.w	ip, ip, r3
 802042e:	fa20 f407 	lsr.w	r4, r0, r7
 8020432:	fa01 f306 	lsl.w	r3, r1, r6
 8020436:	431c      	orrs	r4, r3
 8020438:	40f9      	lsrs	r1, r7
 802043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802043e:	fa00 f306 	lsl.w	r3, r0, r6
 8020442:	fbb1 f8f9 	udiv	r8, r1, r9
 8020446:	0c20      	lsrs	r0, r4, #16
 8020448:	fa1f fe8c 	uxth.w	lr, ip
 802044c:	fb09 1118 	mls	r1, r9, r8, r1
 8020450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020454:	fb08 f00e 	mul.w	r0, r8, lr
 8020458:	4288      	cmp	r0, r1
 802045a:	fa02 f206 	lsl.w	r2, r2, r6
 802045e:	d90b      	bls.n	8020478 <__udivmoddi4+0x1b8>
 8020460:	eb1c 0101 	adds.w	r1, ip, r1
 8020464:	f108 3aff 	add.w	sl, r8, #4294967295
 8020468:	f080 8088 	bcs.w	802057c <__udivmoddi4+0x2bc>
 802046c:	4288      	cmp	r0, r1
 802046e:	f240 8085 	bls.w	802057c <__udivmoddi4+0x2bc>
 8020472:	f1a8 0802 	sub.w	r8, r8, #2
 8020476:	4461      	add	r1, ip
 8020478:	1a09      	subs	r1, r1, r0
 802047a:	b2a4      	uxth	r4, r4
 802047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020480:	fb09 1110 	mls	r1, r9, r0, r1
 8020484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020488:	fb00 fe0e 	mul.w	lr, r0, lr
 802048c:	458e      	cmp	lr, r1
 802048e:	d908      	bls.n	80204a2 <__udivmoddi4+0x1e2>
 8020490:	eb1c 0101 	adds.w	r1, ip, r1
 8020494:	f100 34ff 	add.w	r4, r0, #4294967295
 8020498:	d26c      	bcs.n	8020574 <__udivmoddi4+0x2b4>
 802049a:	458e      	cmp	lr, r1
 802049c:	d96a      	bls.n	8020574 <__udivmoddi4+0x2b4>
 802049e:	3802      	subs	r0, #2
 80204a0:	4461      	add	r1, ip
 80204a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80204a6:	fba0 9402 	umull	r9, r4, r0, r2
 80204aa:	eba1 010e 	sub.w	r1, r1, lr
 80204ae:	42a1      	cmp	r1, r4
 80204b0:	46c8      	mov	r8, r9
 80204b2:	46a6      	mov	lr, r4
 80204b4:	d356      	bcc.n	8020564 <__udivmoddi4+0x2a4>
 80204b6:	d053      	beq.n	8020560 <__udivmoddi4+0x2a0>
 80204b8:	b15d      	cbz	r5, 80204d2 <__udivmoddi4+0x212>
 80204ba:	ebb3 0208 	subs.w	r2, r3, r8
 80204be:	eb61 010e 	sbc.w	r1, r1, lr
 80204c2:	fa01 f707 	lsl.w	r7, r1, r7
 80204c6:	fa22 f306 	lsr.w	r3, r2, r6
 80204ca:	40f1      	lsrs	r1, r6
 80204cc:	431f      	orrs	r7, r3
 80204ce:	e9c5 7100 	strd	r7, r1, [r5]
 80204d2:	2600      	movs	r6, #0
 80204d4:	4631      	mov	r1, r6
 80204d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204da:	f1c2 0320 	rsb	r3, r2, #32
 80204de:	40d8      	lsrs	r0, r3
 80204e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80204e4:	fa21 f303 	lsr.w	r3, r1, r3
 80204e8:	4091      	lsls	r1, r2
 80204ea:	4301      	orrs	r1, r0
 80204ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204f0:	fa1f fe8c 	uxth.w	lr, ip
 80204f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80204f8:	fb07 3610 	mls	r6, r7, r0, r3
 80204fc:	0c0b      	lsrs	r3, r1, #16
 80204fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020502:	fb00 f60e 	mul.w	r6, r0, lr
 8020506:	429e      	cmp	r6, r3
 8020508:	fa04 f402 	lsl.w	r4, r4, r2
 802050c:	d908      	bls.n	8020520 <__udivmoddi4+0x260>
 802050e:	eb1c 0303 	adds.w	r3, ip, r3
 8020512:	f100 38ff 	add.w	r8, r0, #4294967295
 8020516:	d22f      	bcs.n	8020578 <__udivmoddi4+0x2b8>
 8020518:	429e      	cmp	r6, r3
 802051a:	d92d      	bls.n	8020578 <__udivmoddi4+0x2b8>
 802051c:	3802      	subs	r0, #2
 802051e:	4463      	add	r3, ip
 8020520:	1b9b      	subs	r3, r3, r6
 8020522:	b289      	uxth	r1, r1
 8020524:	fbb3 f6f7 	udiv	r6, r3, r7
 8020528:	fb07 3316 	mls	r3, r7, r6, r3
 802052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020530:	fb06 f30e 	mul.w	r3, r6, lr
 8020534:	428b      	cmp	r3, r1
 8020536:	d908      	bls.n	802054a <__udivmoddi4+0x28a>
 8020538:	eb1c 0101 	adds.w	r1, ip, r1
 802053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8020540:	d216      	bcs.n	8020570 <__udivmoddi4+0x2b0>
 8020542:	428b      	cmp	r3, r1
 8020544:	d914      	bls.n	8020570 <__udivmoddi4+0x2b0>
 8020546:	3e02      	subs	r6, #2
 8020548:	4461      	add	r1, ip
 802054a:	1ac9      	subs	r1, r1, r3
 802054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020550:	e738      	b.n	80203c4 <__udivmoddi4+0x104>
 8020552:	462e      	mov	r6, r5
 8020554:	4628      	mov	r0, r5
 8020556:	e705      	b.n	8020364 <__udivmoddi4+0xa4>
 8020558:	4606      	mov	r6, r0
 802055a:	e6e3      	b.n	8020324 <__udivmoddi4+0x64>
 802055c:	4618      	mov	r0, r3
 802055e:	e6f8      	b.n	8020352 <__udivmoddi4+0x92>
 8020560:	454b      	cmp	r3, r9
 8020562:	d2a9      	bcs.n	80204b8 <__udivmoddi4+0x1f8>
 8020564:	ebb9 0802 	subs.w	r8, r9, r2
 8020568:	eb64 0e0c 	sbc.w	lr, r4, ip
 802056c:	3801      	subs	r0, #1
 802056e:	e7a3      	b.n	80204b8 <__udivmoddi4+0x1f8>
 8020570:	4646      	mov	r6, r8
 8020572:	e7ea      	b.n	802054a <__udivmoddi4+0x28a>
 8020574:	4620      	mov	r0, r4
 8020576:	e794      	b.n	80204a2 <__udivmoddi4+0x1e2>
 8020578:	4640      	mov	r0, r8
 802057a:	e7d1      	b.n	8020520 <__udivmoddi4+0x260>
 802057c:	46d0      	mov	r8, sl
 802057e:	e77b      	b.n	8020478 <__udivmoddi4+0x1b8>
 8020580:	3b02      	subs	r3, #2
 8020582:	4461      	add	r1, ip
 8020584:	e732      	b.n	80203ec <__udivmoddi4+0x12c>
 8020586:	4630      	mov	r0, r6
 8020588:	e709      	b.n	802039e <__udivmoddi4+0xde>
 802058a:	4464      	add	r4, ip
 802058c:	3802      	subs	r0, #2
 802058e:	e742      	b.n	8020416 <__udivmoddi4+0x156>

08020590 <__aeabi_idiv0>:
 8020590:	4770      	bx	lr
 8020592:	bf00      	nop

08020594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020594:	b580      	push	{r7, lr}
 8020596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020598:	f002 ff08 	bl	80233ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802059c:	f000 f88c 	bl	80206b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80205a0:	f000 fb26 	bl	8020bf0 <MX_GPIO_Init>
  MX_CRC_Init();
 80205a4:	f000 f8f4 	bl	8020790 <MX_CRC_Init>
  MX_DMA2D_Init();
 80205a8:	f000 f906 	bl	80207b8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80205ac:	f000 fad0 	bl	8020b50 <MX_FMC_Init>
  MX_I2C3_Init();
 80205b0:	f000 f934 	bl	802081c <MX_I2C3_Init>
  MX_LTDC_Init();
 80205b4:	f000 f972 	bl	802089c <MX_LTDC_Init>
  MX_SPI5_Init();
 80205b8:	f000 f9f0 	bl	802099c <MX_SPI5_Init>
  MX_TIM1_Init();
 80205bc:	f000 fa24 	bl	8020a08 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80205c0:	f000 fa9c 	bl	8020afc <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80205c4:	f00c fde8 	bl	802d198 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80205c8:	f000 fa6e 	bl	8020aa8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  // Start Receiving data from modem
  HAL_UART_Receive_IT(&huart5, Rx_Byte, 1);
 80205cc:	2201      	movs	r2, #1
 80205ce:	4930      	ldr	r1, [pc, #192]	; (8020690 <main+0xfc>)
 80205d0:	4830      	ldr	r0, [pc, #192]	; (8020694 <main+0x100>)
 80205d2:	f008 fd5a 	bl	802908a <HAL_UART_Receive_IT>


  sprintf(buffch,"Starting Application (%d.%d)", BL_Version[0], BL_Version[1]);
 80205d6:	2300      	movs	r3, #0
 80205d8:	461a      	mov	r2, r3
 80205da:	2302      	movs	r3, #2
 80205dc:	492e      	ldr	r1, [pc, #184]	; (8020698 <main+0x104>)
 80205de:	482f      	ldr	r0, [pc, #188]	; (802069c <main+0x108>)
 80205e0:	f00d faa8 	bl	802db34 <siprintf>
  printf("Starting Application (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80205e4:	2300      	movs	r3, #0
 80205e6:	2202      	movs	r2, #2
 80205e8:	4619      	mov	r1, r3
 80205ea:	482d      	ldr	r0, [pc, #180]	; (80206a0 <main+0x10c>)
 80205ec:	f00d fa04 	bl	802d9f8 <iprintf>


  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 80205f0:	f002 f856 	bl	80226a0 <BSP_LCD_Init>

  /* Layer2 Init */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80205f4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80205f8:	2001      	movs	r0, #1
 80205fa:	f002 f8d3 	bl	80227a4 <BSP_LCD_LayerDefaultInit>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80205fe:	2001      	movs	r0, #1
 8020600:	f002 f934 	bl	802286c <BSP_LCD_SelectLayer>
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020604:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020608:	f002 f9de 	bl	80229c8 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_BLACK);
 802060c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8020610:	2001      	movs	r0, #1
 8020612:	f002 f979 	bl	8022908 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8020616:	2100      	movs	r1, #0
 8020618:	2001      	movs	r0, #1
 802061a:	f002 f937 	bl	802288c <BSP_LCD_SetLayerVisible>

  /* Layer1 Init */
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 802061e:	4921      	ldr	r1, [pc, #132]	; (80206a4 <main+0x110>)
 8020620:	2000      	movs	r0, #0
 8020622:	f002 f8bf 	bl	80227a4 <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 8020626:	2000      	movs	r0, #0
 8020628:	f002 f920 	bl	802286c <BSP_LCD_SelectLayer>

  /* Enable The LCD */
  BSP_LCD_DisplayOn();
 802062c:	f002 faf6 	bl	8022c1c <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020630:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020634:	f002 f9c8 	bl	80229c8 <BSP_LCD_Clear>


  /* Set Touchscreen Demo description */

  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8020638:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 802063c:	f002 f990 	bl	8022960 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8020640:	4819      	ldr	r0, [pc, #100]	; (80206a8 <main+0x114>)
 8020642:	f002 f975 	bl	8022930 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 8020646:	4819      	ldr	r0, [pc, #100]	; (80206ac <main+0x118>)
 8020648:	f002 f9a4 	bl	8022994 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)buffch, CENTER_MODE);
 802064c:	2301      	movs	r3, #1
 802064e:	4a13      	ldr	r2, [pc, #76]	; (802069c <main+0x108>)
 8020650:	2100      	movs	r1, #0
 8020652:	2000      	movs	r0, #0
 8020654:	f002 fa24 	bl	8022aa0 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8020658:	f04f 30ff 	mov.w	r0, #4294967295
 802065c:	f002 f968 	bl	8022930 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"APPLICATION", CENTER_MODE);
 8020660:	f002 f894 	bl	802278c <BSP_LCD_GetYSize>
 8020664:	4603      	mov	r3, r0
 8020666:	085b      	lsrs	r3, r3, #1
 8020668:	b29b      	uxth	r3, r3
 802066a:	3b0c      	subs	r3, #12
 802066c:	b299      	uxth	r1, r3
 802066e:	2301      	movs	r3, #1
 8020670:	4a0f      	ldr	r2, [pc, #60]	; (80206b0 <main+0x11c>)
 8020672:	2000      	movs	r0, #0
 8020674:	f002 fa14 	bl	8022aa0 <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8020678:	f00c fdb4 	bl	802d1e4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 802067c:	2201      	movs	r2, #1
 802067e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020682:	480c      	ldr	r0, [pc, #48]	; (80206b4 <main+0x120>)
 8020684:	f004 f89a 	bl	80247bc <HAL_GPIO_WritePin>
    if (ota_update_request){

    	//TODO : ota update request handler
    }
	serial_app();
 8020688:	f000 fc00 	bl	8020e8c <serial_app>
    MX_USB_HOST_Process();
 802068c:	e7f4      	b.n	8020678 <main+0xe4>
 802068e:	bf00      	nop
 8020690:	20000400 	.word	0x20000400
 8020694:	200002e0 	.word	0x200002e0
 8020698:	0802ec10 	.word	0x0802ec10
 802069c:	2000039c 	.word	0x2000039c
 80206a0:	0802ec30 	.word	0x0802ec30
 80206a4:	d0130000 	.word	0xd0130000
 80206a8:	ffff0000 	.word	0xffff0000
 80206ac:	20000048 	.word	0x20000048
 80206b0:	0802ec50 	.word	0x0802ec50
 80206b4:	40021800 	.word	0x40021800

080206b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80206b8:	b580      	push	{r7, lr}
 80206ba:	b094      	sub	sp, #80	; 0x50
 80206bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80206be:	f107 0320 	add.w	r3, r7, #32
 80206c2:	2230      	movs	r2, #48	; 0x30
 80206c4:	2100      	movs	r1, #0
 80206c6:	4618      	mov	r0, r3
 80206c8:	f00d f8ae 	bl	802d828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80206cc:	f107 030c 	add.w	r3, r7, #12
 80206d0:	2200      	movs	r2, #0
 80206d2:	601a      	str	r2, [r3, #0]
 80206d4:	605a      	str	r2, [r3, #4]
 80206d6:	609a      	str	r2, [r3, #8]
 80206d8:	60da      	str	r2, [r3, #12]
 80206da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80206dc:	2300      	movs	r3, #0
 80206de:	60bb      	str	r3, [r7, #8]
 80206e0:	4b29      	ldr	r3, [pc, #164]	; (8020788 <SystemClock_Config+0xd0>)
 80206e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80206e4:	4a28      	ldr	r2, [pc, #160]	; (8020788 <SystemClock_Config+0xd0>)
 80206e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80206ea:	6413      	str	r3, [r2, #64]	; 0x40
 80206ec:	4b26      	ldr	r3, [pc, #152]	; (8020788 <SystemClock_Config+0xd0>)
 80206ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80206f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80206f4:	60bb      	str	r3, [r7, #8]
 80206f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80206f8:	2300      	movs	r3, #0
 80206fa:	607b      	str	r3, [r7, #4]
 80206fc:	4b23      	ldr	r3, [pc, #140]	; (802078c <SystemClock_Config+0xd4>)
 80206fe:	681b      	ldr	r3, [r3, #0]
 8020700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8020704:	4a21      	ldr	r2, [pc, #132]	; (802078c <SystemClock_Config+0xd4>)
 8020706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802070a:	6013      	str	r3, [r2, #0]
 802070c:	4b1f      	ldr	r3, [pc, #124]	; (802078c <SystemClock_Config+0xd4>)
 802070e:	681b      	ldr	r3, [r3, #0]
 8020710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8020714:	607b      	str	r3, [r7, #4]
 8020716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8020718:	2301      	movs	r3, #1
 802071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 802071c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020722:	2302      	movs	r3, #2
 8020724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 802072c:	2310      	movs	r3, #16
 802072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8020730:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8020734:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8020736:	2302      	movs	r3, #2
 8020738:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 802073a:	2303      	movs	r3, #3
 802073c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802073e:	f107 0320 	add.w	r3, r7, #32
 8020742:	4618      	mov	r0, r3
 8020744:	f006 fa46 	bl	8026bd4 <HAL_RCC_OscConfig>
 8020748:	4603      	mov	r3, r0
 802074a:	2b00      	cmp	r3, #0
 802074c:	d001      	beq.n	8020752 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 802074e:	f000 fb97 	bl	8020e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020752:	230f      	movs	r3, #15
 8020754:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020756:	2302      	movs	r3, #2
 8020758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802075a:	2300      	movs	r3, #0
 802075c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802075e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8020764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 802076a:	f107 030c 	add.w	r3, r7, #12
 802076e:	2102      	movs	r1, #2
 8020770:	4618      	mov	r0, r3
 8020772:	f006 fca7 	bl	80270c4 <HAL_RCC_ClockConfig>
 8020776:	4603      	mov	r3, r0
 8020778:	2b00      	cmp	r3, #0
 802077a:	d001      	beq.n	8020780 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 802077c:	f000 fb80 	bl	8020e80 <Error_Handler>
  }
}
 8020780:	bf00      	nop
 8020782:	3750      	adds	r7, #80	; 0x50
 8020784:	46bd      	mov	sp, r7
 8020786:	bd80      	pop	{r7, pc}
 8020788:	40023800 	.word	0x40023800
 802078c:	40007000 	.word	0x40007000

08020790 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8020790:	b580      	push	{r7, lr}
 8020792:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8020794:	4b06      	ldr	r3, [pc, #24]	; (80207b0 <MX_CRC_Init+0x20>)
 8020796:	4a07      	ldr	r2, [pc, #28]	; (80207b4 <MX_CRC_Init+0x24>)
 8020798:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 802079a:	4805      	ldr	r0, [pc, #20]	; (80207b0 <MX_CRC_Init+0x20>)
 802079c:	f002 ff4e 	bl	802363c <HAL_CRC_Init>
 80207a0:	4603      	mov	r3, r0
 80207a2:	2b00      	cmp	r3, #0
 80207a4:	d001      	beq.n	80207aa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80207a6:	f000 fb6b 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80207aa:	bf00      	nop
 80207ac:	bd80      	pop	{r7, pc}
 80207ae:	bf00      	nop
 80207b0:	200000fc 	.word	0x200000fc
 80207b4:	40023000 	.word	0x40023000

080207b8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80207b8:	b580      	push	{r7, lr}
 80207ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80207bc:	4b15      	ldr	r3, [pc, #84]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207be:	4a16      	ldr	r2, [pc, #88]	; (8020818 <MX_DMA2D_Init+0x60>)
 80207c0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80207c2:	4b14      	ldr	r3, [pc, #80]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207c4:	2200      	movs	r2, #0
 80207c6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80207c8:	4b12      	ldr	r3, [pc, #72]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207ca:	2200      	movs	r2, #0
 80207cc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80207ce:	4b11      	ldr	r3, [pc, #68]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207d0:	2200      	movs	r2, #0
 80207d2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80207d4:	4b0f      	ldr	r3, [pc, #60]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207d6:	2200      	movs	r2, #0
 80207d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80207da:	4b0e      	ldr	r3, [pc, #56]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207dc:	2200      	movs	r2, #0
 80207de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80207e0:	4b0c      	ldr	r3, [pc, #48]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207e2:	2200      	movs	r2, #0
 80207e4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80207e6:	4b0b      	ldr	r3, [pc, #44]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207e8:	2200      	movs	r2, #0
 80207ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80207ec:	4809      	ldr	r0, [pc, #36]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207ee:	f003 f991 	bl	8023b14 <HAL_DMA2D_Init>
 80207f2:	4603      	mov	r3, r0
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	d001      	beq.n	80207fc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80207f8:	f000 fb42 	bl	8020e80 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80207fc:	2101      	movs	r1, #1
 80207fe:	4805      	ldr	r0, [pc, #20]	; (8020814 <MX_DMA2D_Init+0x5c>)
 8020800:	f003 fbf6 	bl	8023ff0 <HAL_DMA2D_ConfigLayer>
 8020804:	4603      	mov	r3, r0
 8020806:	2b00      	cmp	r3, #0
 8020808:	d001      	beq.n	802080e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 802080a:	f000 fb39 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 802080e:	bf00      	nop
 8020810:	bd80      	pop	{r7, pc}
 8020812:	bf00      	nop
 8020814:	20000104 	.word	0x20000104
 8020818:	4002b000 	.word	0x4002b000

0802081c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 802081c:	b580      	push	{r7, lr}
 802081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8020820:	4b1b      	ldr	r3, [pc, #108]	; (8020890 <MX_I2C3_Init+0x74>)
 8020822:	4a1c      	ldr	r2, [pc, #112]	; (8020894 <MX_I2C3_Init+0x78>)
 8020824:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8020826:	4b1a      	ldr	r3, [pc, #104]	; (8020890 <MX_I2C3_Init+0x74>)
 8020828:	4a1b      	ldr	r2, [pc, #108]	; (8020898 <MX_I2C3_Init+0x7c>)
 802082a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 802082c:	4b18      	ldr	r3, [pc, #96]	; (8020890 <MX_I2C3_Init+0x74>)
 802082e:	2200      	movs	r2, #0
 8020830:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8020832:	4b17      	ldr	r3, [pc, #92]	; (8020890 <MX_I2C3_Init+0x74>)
 8020834:	2200      	movs	r2, #0
 8020836:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020838:	4b15      	ldr	r3, [pc, #84]	; (8020890 <MX_I2C3_Init+0x74>)
 802083a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802083e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020840:	4b13      	ldr	r3, [pc, #76]	; (8020890 <MX_I2C3_Init+0x74>)
 8020842:	2200      	movs	r2, #0
 8020844:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8020846:	4b12      	ldr	r3, [pc, #72]	; (8020890 <MX_I2C3_Init+0x74>)
 8020848:	2200      	movs	r2, #0
 802084a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802084c:	4b10      	ldr	r3, [pc, #64]	; (8020890 <MX_I2C3_Init+0x74>)
 802084e:	2200      	movs	r2, #0
 8020850:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8020852:	4b0f      	ldr	r3, [pc, #60]	; (8020890 <MX_I2C3_Init+0x74>)
 8020854:	2200      	movs	r2, #0
 8020856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8020858:	480d      	ldr	r0, [pc, #52]	; (8020890 <MX_I2C3_Init+0x74>)
 802085a:	f005 fbeb 	bl	8026034 <HAL_I2C_Init>
 802085e:	4603      	mov	r3, r0
 8020860:	2b00      	cmp	r3, #0
 8020862:	d001      	beq.n	8020868 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8020864:	f000 fb0c 	bl	8020e80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8020868:	2100      	movs	r1, #0
 802086a:	4809      	ldr	r0, [pc, #36]	; (8020890 <MX_I2C3_Init+0x74>)
 802086c:	f005 fd26 	bl	80262bc <HAL_I2CEx_ConfigAnalogFilter>
 8020870:	4603      	mov	r3, r0
 8020872:	2b00      	cmp	r3, #0
 8020874:	d001      	beq.n	802087a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8020876:	f000 fb03 	bl	8020e80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 802087a:	2100      	movs	r1, #0
 802087c:	4804      	ldr	r0, [pc, #16]	; (8020890 <MX_I2C3_Init+0x74>)
 802087e:	f005 fd59 	bl	8026334 <HAL_I2CEx_ConfigDigitalFilter>
 8020882:	4603      	mov	r3, r0
 8020884:	2b00      	cmp	r3, #0
 8020886:	d001      	beq.n	802088c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8020888:	f000 fafa 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 802088c:	bf00      	nop
 802088e:	bd80      	pop	{r7, pc}
 8020890:	20000144 	.word	0x20000144
 8020894:	40005c00 	.word	0x40005c00
 8020898:	000186a0 	.word	0x000186a0

0802089c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 802089c:	b580      	push	{r7, lr}
 802089e:	b08e      	sub	sp, #56	; 0x38
 80208a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80208a2:	1d3b      	adds	r3, r7, #4
 80208a4:	2234      	movs	r2, #52	; 0x34
 80208a6:	2100      	movs	r1, #0
 80208a8:	4618      	mov	r0, r3
 80208aa:	f00c ffbd 	bl	802d828 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80208ae:	4b39      	ldr	r3, [pc, #228]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208b0:	4a39      	ldr	r2, [pc, #228]	; (8020998 <MX_LTDC_Init+0xfc>)
 80208b2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80208b4:	4b37      	ldr	r3, [pc, #220]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208b6:	2200      	movs	r2, #0
 80208b8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80208ba:	4b36      	ldr	r3, [pc, #216]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208bc:	2200      	movs	r2, #0
 80208be:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80208c0:	4b34      	ldr	r3, [pc, #208]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208c2:	2200      	movs	r2, #0
 80208c4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80208c6:	4b33      	ldr	r3, [pc, #204]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208c8:	2200      	movs	r2, #0
 80208ca:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80208cc:	4b31      	ldr	r3, [pc, #196]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208ce:	2209      	movs	r2, #9
 80208d0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80208d2:	4b30      	ldr	r3, [pc, #192]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208d4:	2201      	movs	r2, #1
 80208d6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80208d8:	4b2e      	ldr	r3, [pc, #184]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208da:	221d      	movs	r2, #29
 80208dc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80208de:	4b2d      	ldr	r3, [pc, #180]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208e0:	2203      	movs	r2, #3
 80208e2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80208e4:	4b2b      	ldr	r3, [pc, #172]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208e6:	f240 120d 	movw	r2, #269	; 0x10d
 80208ea:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80208ec:	4b29      	ldr	r3, [pc, #164]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208ee:	f240 1243 	movw	r2, #323	; 0x143
 80208f2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80208f4:	4b27      	ldr	r3, [pc, #156]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208f6:	f240 1217 	movw	r2, #279	; 0x117
 80208fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80208fc:	4b25      	ldr	r3, [pc, #148]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208fe:	f240 1247 	movw	r2, #327	; 0x147
 8020902:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8020904:	4b23      	ldr	r3, [pc, #140]	; (8020994 <MX_LTDC_Init+0xf8>)
 8020906:	2200      	movs	r2, #0
 8020908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 802090c:	4b21      	ldr	r3, [pc, #132]	; (8020994 <MX_LTDC_Init+0xf8>)
 802090e:	2200      	movs	r2, #0
 8020910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8020914:	4b1f      	ldr	r3, [pc, #124]	; (8020994 <MX_LTDC_Init+0xf8>)
 8020916:	2200      	movs	r2, #0
 8020918:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 802091c:	481d      	ldr	r0, [pc, #116]	; (8020994 <MX_LTDC_Init+0xf8>)
 802091e:	f005 fd49 	bl	80263b4 <HAL_LTDC_Init>
 8020922:	4603      	mov	r3, r0
 8020924:	2b00      	cmp	r3, #0
 8020926:	d001      	beq.n	802092c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8020928:	f000 faaa 	bl	8020e80 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 802092c:	2300      	movs	r3, #0
 802092e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8020930:	23f0      	movs	r3, #240	; 0xf0
 8020932:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8020934:	2300      	movs	r3, #0
 8020936:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8020938:	f44f 73a0 	mov.w	r3, #320	; 0x140
 802093c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 802093e:	2302      	movs	r3, #2
 8020940:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8020942:	23ff      	movs	r3, #255	; 0xff
 8020944:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8020946:	2300      	movs	r3, #0
 8020948:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 802094a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 802094e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8020950:	2307      	movs	r3, #7
 8020952:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8020954:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8020958:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 802095a:	23f0      	movs	r3, #240	; 0xf0
 802095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 802095e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8020962:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8020964:	2300      	movs	r3, #0
 8020966:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 802096a:	2300      	movs	r3, #0
 802096c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8020970:	2300      	movs	r3, #0
 8020972:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8020976:	1d3b      	adds	r3, r7, #4
 8020978:	2200      	movs	r2, #0
 802097a:	4619      	mov	r1, r3
 802097c:	4805      	ldr	r0, [pc, #20]	; (8020994 <MX_LTDC_Init+0xf8>)
 802097e:	f005 feab 	bl	80266d8 <HAL_LTDC_ConfigLayer>
 8020982:	4603      	mov	r3, r0
 8020984:	2b00      	cmp	r3, #0
 8020986:	d001      	beq.n	802098c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8020988:	f000 fa7a 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 802098c:	bf00      	nop
 802098e:	3738      	adds	r7, #56	; 0x38
 8020990:	46bd      	mov	sp, r7
 8020992:	bd80      	pop	{r7, pc}
 8020994:	20000198 	.word	0x20000198
 8020998:	40016800 	.word	0x40016800

0802099c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 802099c:	b580      	push	{r7, lr}
 802099e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80209a0:	4b17      	ldr	r3, [pc, #92]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209a2:	4a18      	ldr	r2, [pc, #96]	; (8020a04 <MX_SPI5_Init+0x68>)
 80209a4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80209a6:	4b16      	ldr	r3, [pc, #88]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80209ac:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80209ae:	4b14      	ldr	r3, [pc, #80]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209b0:	2200      	movs	r2, #0
 80209b2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80209b4:	4b12      	ldr	r3, [pc, #72]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209b6:	2200      	movs	r2, #0
 80209b8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80209ba:	4b11      	ldr	r3, [pc, #68]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209bc:	2200      	movs	r2, #0
 80209be:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80209c0:	4b0f      	ldr	r3, [pc, #60]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209c2:	2200      	movs	r2, #0
 80209c4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80209c6:	4b0e      	ldr	r3, [pc, #56]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80209cc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80209ce:	4b0c      	ldr	r3, [pc, #48]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209d0:	2218      	movs	r2, #24
 80209d2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80209d4:	4b0a      	ldr	r3, [pc, #40]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209d6:	2200      	movs	r2, #0
 80209d8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80209da:	4b09      	ldr	r3, [pc, #36]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209dc:	2200      	movs	r2, #0
 80209de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80209e0:	4b07      	ldr	r3, [pc, #28]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209e2:	2200      	movs	r2, #0
 80209e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80209e6:	4b06      	ldr	r3, [pc, #24]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209e8:	220a      	movs	r2, #10
 80209ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80209ec:	4804      	ldr	r0, [pc, #16]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209ee:	f007 f80c 	bl	8027a0a <HAL_SPI_Init>
 80209f2:	4603      	mov	r3, r0
 80209f4:	2b00      	cmp	r3, #0
 80209f6:	d001      	beq.n	80209fc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80209f8:	f000 fa42 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80209fc:	bf00      	nop
 80209fe:	bd80      	pop	{r7, pc}
 8020a00:	20000240 	.word	0x20000240
 8020a04:	40015000 	.word	0x40015000

08020a08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8020a08:	b580      	push	{r7, lr}
 8020a0a:	b086      	sub	sp, #24
 8020a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8020a0e:	f107 0308 	add.w	r3, r7, #8
 8020a12:	2200      	movs	r2, #0
 8020a14:	601a      	str	r2, [r3, #0]
 8020a16:	605a      	str	r2, [r3, #4]
 8020a18:	609a      	str	r2, [r3, #8]
 8020a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020a1c:	463b      	mov	r3, r7
 8020a1e:	2200      	movs	r2, #0
 8020a20:	601a      	str	r2, [r3, #0]
 8020a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8020a24:	4b1e      	ldr	r3, [pc, #120]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a26:	4a1f      	ldr	r2, [pc, #124]	; (8020aa4 <MX_TIM1_Init+0x9c>)
 8020a28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8020a2a:	4b1d      	ldr	r3, [pc, #116]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a2c:	2200      	movs	r2, #0
 8020a2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020a30:	4b1b      	ldr	r3, [pc, #108]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a32:	2200      	movs	r2, #0
 8020a34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8020a36:	4b1a      	ldr	r3, [pc, #104]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020a3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020a3e:	4b18      	ldr	r3, [pc, #96]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a40:	2200      	movs	r2, #0
 8020a42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8020a44:	4b16      	ldr	r3, [pc, #88]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a46:	2200      	movs	r2, #0
 8020a48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020a4a:	4b15      	ldr	r3, [pc, #84]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a4c:	2200      	movs	r2, #0
 8020a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8020a50:	4813      	ldr	r0, [pc, #76]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a52:	f007 fdb9 	bl	80285c8 <HAL_TIM_Base_Init>
 8020a56:	4603      	mov	r3, r0
 8020a58:	2b00      	cmp	r3, #0
 8020a5a:	d001      	beq.n	8020a60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8020a5c:	f000 fa10 	bl	8020e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8020a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020a64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8020a66:	f107 0308 	add.w	r3, r7, #8
 8020a6a:	4619      	mov	r1, r3
 8020a6c:	480c      	ldr	r0, [pc, #48]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a6e:	f007 ff73 	bl	8028958 <HAL_TIM_ConfigClockSource>
 8020a72:	4603      	mov	r3, r0
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	d001      	beq.n	8020a7c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8020a78:	f000 fa02 	bl	8020e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020a7c:	2300      	movs	r3, #0
 8020a7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020a80:	2300      	movs	r3, #0
 8020a82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8020a84:	463b      	mov	r3, r7
 8020a86:	4619      	mov	r1, r3
 8020a88:	4805      	ldr	r0, [pc, #20]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a8a:	f008 f98f 	bl	8028dac <HAL_TIMEx_MasterConfigSynchronization>
 8020a8e:	4603      	mov	r3, r0
 8020a90:	2b00      	cmp	r3, #0
 8020a92:	d001      	beq.n	8020a98 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8020a94:	f000 f9f4 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8020a98:	bf00      	nop
 8020a9a:	3718      	adds	r7, #24
 8020a9c:	46bd      	mov	sp, r7
 8020a9e:	bd80      	pop	{r7, pc}
 8020aa0:	20000298 	.word	0x20000298
 8020aa4:	40010000 	.word	0x40010000

08020aa8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8020aa8:	b580      	push	{r7, lr}
 8020aaa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8020aac:	4b11      	ldr	r3, [pc, #68]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020aae:	4a12      	ldr	r2, [pc, #72]	; (8020af8 <MX_UART5_Init+0x50>)
 8020ab0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8020ab2:	4b10      	ldr	r3, [pc, #64]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020ab8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8020aba:	4b0e      	ldr	r3, [pc, #56]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020abc:	2200      	movs	r2, #0
 8020abe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8020ac0:	4b0c      	ldr	r3, [pc, #48]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ac2:	2200      	movs	r2, #0
 8020ac4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8020ac6:	4b0b      	ldr	r3, [pc, #44]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ac8:	2200      	movs	r2, #0
 8020aca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8020acc:	4b09      	ldr	r3, [pc, #36]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ace:	220c      	movs	r2, #12
 8020ad0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020ad2:	4b08      	ldr	r3, [pc, #32]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ad4:	2200      	movs	r2, #0
 8020ad6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8020ad8:	4b06      	ldr	r3, [pc, #24]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ada:	2200      	movs	r2, #0
 8020adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8020ade:	4805      	ldr	r0, [pc, #20]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ae0:	f008 f9f4 	bl	8028ecc <HAL_UART_Init>
 8020ae4:	4603      	mov	r3, r0
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d001      	beq.n	8020aee <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8020aea:	f000 f9c9 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8020aee:	bf00      	nop
 8020af0:	bd80      	pop	{r7, pc}
 8020af2:	bf00      	nop
 8020af4:	200002e0 	.word	0x200002e0
 8020af8:	40005000 	.word	0x40005000

08020afc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8020afc:	b580      	push	{r7, lr}
 8020afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8020b00:	4b11      	ldr	r3, [pc, #68]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b02:	4a12      	ldr	r2, [pc, #72]	; (8020b4c <MX_USART1_UART_Init+0x50>)
 8020b04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8020b06:	4b10      	ldr	r3, [pc, #64]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020b0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020b0e:	4b0e      	ldr	r3, [pc, #56]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b10:	2200      	movs	r2, #0
 8020b12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8020b14:	4b0c      	ldr	r3, [pc, #48]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b16:	2200      	movs	r2, #0
 8020b18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8020b1a:	4b0b      	ldr	r3, [pc, #44]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8020b20:	4b09      	ldr	r3, [pc, #36]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b22:	220c      	movs	r2, #12
 8020b24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020b26:	4b08      	ldr	r3, [pc, #32]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b28:	2200      	movs	r2, #0
 8020b2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8020b2c:	4b06      	ldr	r3, [pc, #24]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b2e:	2200      	movs	r2, #0
 8020b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8020b32:	4805      	ldr	r0, [pc, #20]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b34:	f008 f9ca 	bl	8028ecc <HAL_UART_Init>
 8020b38:	4603      	mov	r3, r0
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	d001      	beq.n	8020b42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8020b3e:	f000 f99f 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8020b42:	bf00      	nop
 8020b44:	bd80      	pop	{r7, pc}
 8020b46:	bf00      	nop
 8020b48:	20000324 	.word	0x20000324
 8020b4c:	40011000 	.word	0x40011000

08020b50 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8020b50:	b580      	push	{r7, lr}
 8020b52:	b088      	sub	sp, #32
 8020b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8020b56:	1d3b      	adds	r3, r7, #4
 8020b58:	2200      	movs	r2, #0
 8020b5a:	601a      	str	r2, [r3, #0]
 8020b5c:	605a      	str	r2, [r3, #4]
 8020b5e:	609a      	str	r2, [r3, #8]
 8020b60:	60da      	str	r2, [r3, #12]
 8020b62:	611a      	str	r2, [r3, #16]
 8020b64:	615a      	str	r2, [r3, #20]
 8020b66:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8020b68:	4b1f      	ldr	r3, [pc, #124]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b6a:	4a20      	ldr	r2, [pc, #128]	; (8020bec <MX_FMC_Init+0x9c>)
 8020b6c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8020b6e:	4b1e      	ldr	r3, [pc, #120]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b70:	2201      	movs	r2, #1
 8020b72:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8020b74:	4b1c      	ldr	r3, [pc, #112]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b76:	2200      	movs	r2, #0
 8020b78:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8020b7a:	4b1b      	ldr	r3, [pc, #108]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b7c:	2204      	movs	r2, #4
 8020b7e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8020b80:	4b19      	ldr	r3, [pc, #100]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b82:	2210      	movs	r2, #16
 8020b84:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8020b86:	4b18      	ldr	r3, [pc, #96]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b88:	2240      	movs	r2, #64	; 0x40
 8020b8a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8020b8c:	4b16      	ldr	r3, [pc, #88]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b8e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8020b92:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8020b94:	4b14      	ldr	r3, [pc, #80]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b96:	2200      	movs	r2, #0
 8020b98:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8020b9a:	4b13      	ldr	r3, [pc, #76]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020ba0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8020ba2:	4b11      	ldr	r3, [pc, #68]	; (8020be8 <MX_FMC_Init+0x98>)
 8020ba4:	2200      	movs	r2, #0
 8020ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8020ba8:	4b0f      	ldr	r3, [pc, #60]	; (8020be8 <MX_FMC_Init+0x98>)
 8020baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8020bae:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8020bb0:	2302      	movs	r3, #2
 8020bb2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8020bb4:	2307      	movs	r3, #7
 8020bb6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8020bb8:	2304      	movs	r3, #4
 8020bba:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8020bbc:	2307      	movs	r3, #7
 8020bbe:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8020bc0:	2303      	movs	r3, #3
 8020bc2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8020bc4:	2302      	movs	r3, #2
 8020bc6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8020bc8:	2302      	movs	r3, #2
 8020bca:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8020bcc:	1d3b      	adds	r3, r7, #4
 8020bce:	4619      	mov	r1, r3
 8020bd0:	4805      	ldr	r0, [pc, #20]	; (8020be8 <MX_FMC_Init+0x98>)
 8020bd2:	f006 fe89 	bl	80278e8 <HAL_SDRAM_Init>
 8020bd6:	4603      	mov	r3, r0
 8020bd8:	2b00      	cmp	r3, #0
 8020bda:	d001      	beq.n	8020be0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8020bdc:	f000 f950 	bl	8020e80 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8020be0:	bf00      	nop
 8020be2:	3720      	adds	r7, #32
 8020be4:	46bd      	mov	sp, r7
 8020be6:	bd80      	pop	{r7, pc}
 8020be8:	20000368 	.word	0x20000368
 8020bec:	a0000140 	.word	0xa0000140

08020bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020bf0:	b580      	push	{r7, lr}
 8020bf2:	b08e      	sub	sp, #56	; 0x38
 8020bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020bfa:	2200      	movs	r2, #0
 8020bfc:	601a      	str	r2, [r3, #0]
 8020bfe:	605a      	str	r2, [r3, #4]
 8020c00:	609a      	str	r2, [r3, #8]
 8020c02:	60da      	str	r2, [r3, #12]
 8020c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020c06:	2300      	movs	r3, #0
 8020c08:	623b      	str	r3, [r7, #32]
 8020c0a:	4b85      	ldr	r3, [pc, #532]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c0e:	4a84      	ldr	r2, [pc, #528]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c10:	f043 0304 	orr.w	r3, r3, #4
 8020c14:	6313      	str	r3, [r2, #48]	; 0x30
 8020c16:	4b82      	ldr	r3, [pc, #520]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c1a:	f003 0304 	and.w	r3, r3, #4
 8020c1e:	623b      	str	r3, [r7, #32]
 8020c20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8020c22:	2300      	movs	r3, #0
 8020c24:	61fb      	str	r3, [r7, #28]
 8020c26:	4b7e      	ldr	r3, [pc, #504]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c2a:	4a7d      	ldr	r2, [pc, #500]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c2c:	f043 0320 	orr.w	r3, r3, #32
 8020c30:	6313      	str	r3, [r2, #48]	; 0x30
 8020c32:	4b7b      	ldr	r3, [pc, #492]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c36:	f003 0320 	and.w	r3, r3, #32
 8020c3a:	61fb      	str	r3, [r7, #28]
 8020c3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020c3e:	2300      	movs	r3, #0
 8020c40:	61bb      	str	r3, [r7, #24]
 8020c42:	4b77      	ldr	r3, [pc, #476]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c46:	4a76      	ldr	r2, [pc, #472]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8020c4e:	4b74      	ldr	r3, [pc, #464]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020c56:	61bb      	str	r3, [r7, #24]
 8020c58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020c5a:	2300      	movs	r3, #0
 8020c5c:	617b      	str	r3, [r7, #20]
 8020c5e:	4b70      	ldr	r3, [pc, #448]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c62:	4a6f      	ldr	r2, [pc, #444]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c64:	f043 0301 	orr.w	r3, r3, #1
 8020c68:	6313      	str	r3, [r2, #48]	; 0x30
 8020c6a:	4b6d      	ldr	r3, [pc, #436]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c6e:	f003 0301 	and.w	r3, r3, #1
 8020c72:	617b      	str	r3, [r7, #20]
 8020c74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020c76:	2300      	movs	r3, #0
 8020c78:	613b      	str	r3, [r7, #16]
 8020c7a:	4b69      	ldr	r3, [pc, #420]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c7e:	4a68      	ldr	r2, [pc, #416]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c80:	f043 0302 	orr.w	r3, r3, #2
 8020c84:	6313      	str	r3, [r2, #48]	; 0x30
 8020c86:	4b66      	ldr	r3, [pc, #408]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c8a:	f003 0302 	and.w	r3, r3, #2
 8020c8e:	613b      	str	r3, [r7, #16]
 8020c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8020c92:	2300      	movs	r3, #0
 8020c94:	60fb      	str	r3, [r7, #12]
 8020c96:	4b62      	ldr	r3, [pc, #392]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c9a:	4a61      	ldr	r2, [pc, #388]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8020ca2:	4b5f      	ldr	r3, [pc, #380]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020caa:	60fb      	str	r3, [r7, #12]
 8020cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8020cae:	2300      	movs	r3, #0
 8020cb0:	60bb      	str	r3, [r7, #8]
 8020cb2:	4b5b      	ldr	r3, [pc, #364]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cb6:	4a5a      	ldr	r2, [pc, #360]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cb8:	f043 0310 	orr.w	r3, r3, #16
 8020cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8020cbe:	4b58      	ldr	r3, [pc, #352]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cc2:	f003 0310 	and.w	r3, r3, #16
 8020cc6:	60bb      	str	r3, [r7, #8]
 8020cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020cca:	2300      	movs	r3, #0
 8020ccc:	607b      	str	r3, [r7, #4]
 8020cce:	4b54      	ldr	r3, [pc, #336]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cd2:	4a53      	ldr	r2, [pc, #332]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cd4:	f043 0308 	orr.w	r3, r3, #8
 8020cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8020cda:	4b51      	ldr	r3, [pc, #324]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cde:	f003 0308 	and.w	r3, r3, #8
 8020ce2:	607b      	str	r3, [r7, #4]
 8020ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8020ce6:	2200      	movs	r2, #0
 8020ce8:	2116      	movs	r1, #22
 8020cea:	484e      	ldr	r0, [pc, #312]	; (8020e24 <MX_GPIO_Init+0x234>)
 8020cec:	f003 fd66 	bl	80247bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8020cf0:	2200      	movs	r2, #0
 8020cf2:	2180      	movs	r1, #128	; 0x80
 8020cf4:	484c      	ldr	r0, [pc, #304]	; (8020e28 <MX_GPIO_Init+0x238>)
 8020cf6:	f003 fd61 	bl	80247bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8020cfa:	2200      	movs	r2, #0
 8020cfc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8020d00:	484a      	ldr	r0, [pc, #296]	; (8020e2c <MX_GPIO_Init+0x23c>)
 8020d02:	f003 fd5b 	bl	80247bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8020d06:	2200      	movs	r2, #0
 8020d08:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8020d0c:	4848      	ldr	r0, [pc, #288]	; (8020e30 <MX_GPIO_Init+0x240>)
 8020d0e:	f003 fd55 	bl	80247bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8020d12:	2316      	movs	r3, #22
 8020d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d16:	2301      	movs	r3, #1
 8020d18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d1a:	2300      	movs	r3, #0
 8020d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d1e:	2300      	movs	r3, #0
 8020d20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d26:	4619      	mov	r1, r3
 8020d28:	483e      	ldr	r0, [pc, #248]	; (8020e24 <MX_GPIO_Init+0x234>)
 8020d2a:	f003 fa8f 	bl	802424c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8020d2e:	2301      	movs	r3, #1
 8020d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8020d32:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8020d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d38:	2300      	movs	r3, #0
 8020d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8020d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d40:	4619      	mov	r1, r3
 8020d42:	4839      	ldr	r0, [pc, #228]	; (8020e28 <MX_GPIO_Init+0x238>)
 8020d44:	f003 fa82 	bl	802424c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8020d48:	f248 0306 	movw	r3, #32774	; 0x8006
 8020d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020d4e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d54:	2300      	movs	r3, #0
 8020d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d5c:	4619      	mov	r1, r3
 8020d5e:	4832      	ldr	r0, [pc, #200]	; (8020e28 <MX_GPIO_Init+0x238>)
 8020d60:	f003 fa74 	bl	802424c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8020d64:	2380      	movs	r3, #128	; 0x80
 8020d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d68:	2301      	movs	r3, #1
 8020d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d6c:	2300      	movs	r3, #0
 8020d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d70:	2300      	movs	r3, #0
 8020d72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8020d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d78:	4619      	mov	r1, r3
 8020d7a:	482b      	ldr	r0, [pc, #172]	; (8020e28 <MX_GPIO_Init+0x238>)
 8020d7c:	f003 fa66 	bl	802424c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8020d80:	2320      	movs	r3, #32
 8020d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020d84:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d8a:	2300      	movs	r3, #0
 8020d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8020d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d92:	4619      	mov	r1, r3
 8020d94:	4823      	ldr	r0, [pc, #140]	; (8020e24 <MX_GPIO_Init+0x234>)
 8020d96:	f003 fa59 	bl	802424c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8020d9a:	2304      	movs	r3, #4
 8020d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020d9e:	2300      	movs	r3, #0
 8020da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020da2:	2300      	movs	r3, #0
 8020da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8020da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020daa:	4619      	mov	r1, r3
 8020dac:	4821      	ldr	r0, [pc, #132]	; (8020e34 <MX_GPIO_Init+0x244>)
 8020dae:	f003 fa4d 	bl	802424c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8020db2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020db8:	2300      	movs	r3, #0
 8020dba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dbc:	2300      	movs	r3, #0
 8020dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8020dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dc4:	4619      	mov	r1, r3
 8020dc6:	4819      	ldr	r0, [pc, #100]	; (8020e2c <MX_GPIO_Init+0x23c>)
 8020dc8:	f003 fa40 	bl	802424c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8020dcc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8020dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020dd2:	2301      	movs	r3, #1
 8020dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dd6:	2300      	movs	r3, #0
 8020dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020dda:	2300      	movs	r3, #0
 8020ddc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020de2:	4619      	mov	r1, r3
 8020de4:	4811      	ldr	r0, [pc, #68]	; (8020e2c <MX_GPIO_Init+0x23c>)
 8020de6:	f003 fa31 	bl	802424c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8020dea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8020dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020df0:	2301      	movs	r3, #1
 8020df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020df4:	2300      	movs	r3, #0
 8020df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020df8:	2300      	movs	r3, #0
 8020dfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e00:	4619      	mov	r1, r3
 8020e02:	480b      	ldr	r0, [pc, #44]	; (8020e30 <MX_GPIO_Init+0x240>)
 8020e04:	f003 fa22 	bl	802424c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8020e08:	2200      	movs	r2, #0
 8020e0a:	2100      	movs	r1, #0
 8020e0c:	2006      	movs	r0, #6
 8020e0e:	f002 fbeb 	bl	80235e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8020e12:	2006      	movs	r0, #6
 8020e14:	f002 fc04 	bl	8023620 <HAL_NVIC_EnableIRQ>

}
 8020e18:	bf00      	nop
 8020e1a:	3738      	adds	r7, #56	; 0x38
 8020e1c:	46bd      	mov	sp, r7
 8020e1e:	bd80      	pop	{r7, pc}
 8020e20:	40023800 	.word	0x40023800
 8020e24:	40020800 	.word	0x40020800
 8020e28:	40020000 	.word	0x40020000
 8020e2c:	40020c00 	.word	0x40020c00
 8020e30:	40021800 	.word	0x40021800
 8020e34:	40020400 	.word	0x40020400

08020e38 <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8020e38:	b580      	push	{r7, lr}
 8020e3a:	b082      	sub	sp, #8
 8020e3c:	af00      	add	r7, sp, #0
 8020e3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8020e40:	1d39      	adds	r1, r7, #4
 8020e42:	f04f 33ff 	mov.w	r3, #4294967295
 8020e46:	2201      	movs	r2, #1
 8020e48:	4803      	ldr	r0, [pc, #12]	; (8020e58 <__io_putchar+0x20>)
 8020e4a:	f008 f88c 	bl	8028f66 <HAL_UART_Transmit>
	return ch;
 8020e4e:	687b      	ldr	r3, [r7, #4]
}
 8020e50:	4618      	mov	r0, r3
 8020e52:	3708      	adds	r7, #8
 8020e54:	46bd      	mov	sp, r7
 8020e56:	bd80      	pop	{r7, pc}
 8020e58:	20000324 	.word	0x20000324

08020e5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020e5c:	b580      	push	{r7, lr}
 8020e5e:	b082      	sub	sp, #8
 8020e60:	af00      	add	r7, sp, #0
 8020e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8020e64:	687b      	ldr	r3, [r7, #4]
 8020e66:	681b      	ldr	r3, [r3, #0]
 8020e68:	4a04      	ldr	r2, [pc, #16]	; (8020e7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8020e6a:	4293      	cmp	r3, r2
 8020e6c:	d101      	bne.n	8020e72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8020e6e:	f002 fabf 	bl	80233f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8020e72:	bf00      	nop
 8020e74:	3708      	adds	r7, #8
 8020e76:	46bd      	mov	sp, r7
 8020e78:	bd80      	pop	{r7, pc}
 8020e7a:	bf00      	nop
 8020e7c:	40001000 	.word	0x40001000

08020e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020e80:	b480      	push	{r7}
 8020e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020e84:	b672      	cpsid	i
}
 8020e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020e88:	e7fe      	b.n	8020e88 <Error_Handler+0x8>
	...

08020e8c <serial_app>:
static SER_EX_ ser_proccess_data( uint8_t *buf, uint16_t len);
static void ser_send_resp(UART_HandleTypeDef *huart, uint8_t rsp);
uint32_t ser_calcCRC(uint8_t * pData, uint32_t DataLength);


void serial_app(){
 8020e8c:	b580      	push	{r7, lr}
 8020e8e:	b082      	sub	sp, #8
 8020e90:	af00      	add	r7, sp, #0
	do{
		// no Byte received or chunk reception in progress
		if( (hchunk.chunk_ready == CUN_EMPTY) ||
 8020e92:	4b1c      	ldr	r3, [pc, #112]	; (8020f04 <serial_app+0x78>)
 8020e94:	785b      	ldrb	r3, [r3, #1]
 8020e96:	2b00      	cmp	r3, #0
 8020e98:	d02f      	beq.n	8020efa <serial_app+0x6e>
			(hchunk.chunk_ready == CUN_BUSY)){
 8020e9a:	4b1a      	ldr	r3, [pc, #104]	; (8020f04 <serial_app+0x78>)
 8020e9c:	785b      	ldrb	r3, [r3, #1]
		if( (hchunk.chunk_ready == CUN_EMPTY) ||
 8020e9e:	2b02      	cmp	r3, #2
 8020ea0:	d02b      	beq.n	8020efa <serial_app+0x6e>
			break;
		}

		SER_EX_ ret = SER_EX_OK;
 8020ea2:	2300      	movs	r3, #0
 8020ea4:	71fb      	strb	r3, [r7, #7]

		// An Error occur in during receive chunk
		if(hchunk.chunk_ready == CUN_ERROR)
 8020ea6:	4b17      	ldr	r3, [pc, #92]	; (8020f04 <serial_app+0x78>)
 8020ea8:	785b      	ldrb	r3, [r3, #1]
 8020eaa:	2b03      	cmp	r3, #3
 8020eac:	d105      	bne.n	8020eba <serial_app+0x2e>
		{
			printf("Receive Chunk Error\r\n");
 8020eae:	4816      	ldr	r0, [pc, #88]	; (8020f08 <serial_app+0x7c>)
 8020eb0:	f00c fe28 	bl	802db04 <puts>
			ret = SER_EX_ERROR;
 8020eb4:	2301      	movs	r3, #1
 8020eb6:	71fb      	strb	r3, [r7, #7]
 8020eb8:	e00a      	b.n	8020ed0 <serial_app+0x44>
		}
		else
		{
			printf("Chunk Received!!!\r\n");
 8020eba:	4814      	ldr	r0, [pc, #80]	; (8020f0c <serial_app+0x80>)
 8020ebc:	f00c fe22 	bl	802db04 <puts>
			ret = ser_proccess_data(Rx_Buffer, hchunk.data_len);
 8020ec0:	4b10      	ldr	r3, [pc, #64]	; (8020f04 <serial_app+0x78>)
 8020ec2:	889b      	ldrh	r3, [r3, #4]
 8020ec4:	4619      	mov	r1, r3
 8020ec6:	4812      	ldr	r0, [pc, #72]	; (8020f10 <serial_app+0x84>)
 8020ec8:	f000 f950 	bl	802116c <ser_proccess_data>
 8020ecc:	4603      	mov	r3, r0
 8020ece:	71fb      	strb	r3, [r7, #7]
		}

		// Send ACK or NACK
		if( ret != SER_EX_OK){
 8020ed0:	79fb      	ldrb	r3, [r7, #7]
 8020ed2:	2b00      	cmp	r3, #0
 8020ed4:	d00a      	beq.n	8020eec <serial_app+0x60>
			ser_state = SER_STATE_START;
 8020ed6:	4b0f      	ldr	r3, [pc, #60]	; (8020f14 <serial_app+0x88>)
 8020ed8:	2200      	movs	r2, #0
 8020eda:	701a      	strb	r2, [r3, #0]
			printf("Sending NACK\r\n");
 8020edc:	480e      	ldr	r0, [pc, #56]	; (8020f18 <serial_app+0x8c>)
 8020ede:	f00c fe11 	bl	802db04 <puts>
			ser_send_resp(&huart5, SER_NACK);
 8020ee2:	2101      	movs	r1, #1
 8020ee4:	480d      	ldr	r0, [pc, #52]	; (8020f1c <serial_app+0x90>)
 8020ee6:	f000 fa81 	bl	80213ec <ser_send_resp>
 8020eea:	e003      	b.n	8020ef4 <serial_app+0x68>
		}
		else
		{
			ser_send_resp(&huart5, SER_ACK);
 8020eec:	2100      	movs	r1, #0
 8020eee:	480b      	ldr	r0, [pc, #44]	; (8020f1c <serial_app+0x90>)
 8020ef0:	f000 fa7c 	bl	80213ec <ser_send_resp>
		}

		hchunk.chunk_ready = CUN_EMPTY;
 8020ef4:	4b03      	ldr	r3, [pc, #12]	; (8020f04 <serial_app+0x78>)
 8020ef6:	2200      	movs	r2, #0
 8020ef8:	705a      	strb	r2, [r3, #1]
	}while(false);
}
 8020efa:	bf00      	nop
 8020efc:	3708      	adds	r7, #8
 8020efe:	46bd      	mov	sp, r7
 8020f00:	bd80      	pop	{r7, pc}
 8020f02:	bf00      	nop
 8020f04:	20000824 	.word	0x20000824
 8020f08:	0802ec5c 	.word	0x0802ec5c
 8020f0c:	0802ec74 	.word	0x0802ec74
 8020f10:	20000418 	.word	0x20000418
 8020f14:	20000415 	.word	0x20000415
 8020f18:	0802ec88 	.word	0x0802ec88
 8020f1c:	200002e0 	.word	0x200002e0

08020f20 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8020f20:	b580      	push	{r7, lr}
 8020f22:	b082      	sub	sp, #8
 8020f24:	af00      	add	r7, sp, #0
 8020f26:	6078      	str	r0, [r7, #4]
	// check serial interruption
	if(huart==&huart5){
 8020f28:	687b      	ldr	r3, [r7, #4]
 8020f2a:	4a0f      	ldr	r2, [pc, #60]	; (8020f68 <HAL_UART_RxCpltCallback+0x48>)
 8020f2c:	4293      	cmp	r3, r2
 8020f2e:	d116      	bne.n	8020f5e <HAL_UART_RxCpltCallback+0x3e>
		if((hchunk.chunk_ready == CUN_EMPTY) || (hchunk.chunk_ready == CUN_BUSY))
 8020f30:	4b0e      	ldr	r3, [pc, #56]	; (8020f6c <HAL_UART_RxCpltCallback+0x4c>)
 8020f32:	785b      	ldrb	r3, [r3, #1]
 8020f34:	2b00      	cmp	r3, #0
 8020f36:	d003      	beq.n	8020f40 <HAL_UART_RxCpltCallback+0x20>
 8020f38:	4b0c      	ldr	r3, [pc, #48]	; (8020f6c <HAL_UART_RxCpltCallback+0x4c>)
 8020f3a:	785b      	ldrb	r3, [r3, #1]
 8020f3c:	2b02      	cmp	r3, #2
 8020f3e:	d104      	bne.n	8020f4a <HAL_UART_RxCpltCallback+0x2a>
		{
			ser_receive_chunk(Rx_Byte[0]);
 8020f40:	4b0b      	ldr	r3, [pc, #44]	; (8020f70 <HAL_UART_RxCpltCallback+0x50>)
 8020f42:	781b      	ldrb	r3, [r3, #0]
 8020f44:	4618      	mov	r0, r3
 8020f46:	f000 f815 	bl	8020f74 <ser_receive_chunk>
		}
		memset(Rx_Byte, 0, sizeof(Rx_Byte));
 8020f4a:	2202      	movs	r2, #2
 8020f4c:	2100      	movs	r1, #0
 8020f4e:	4808      	ldr	r0, [pc, #32]	; (8020f70 <HAL_UART_RxCpltCallback+0x50>)
 8020f50:	f00c fc6a 	bl	802d828 <memset>
		HAL_UART_Receive_IT(&huart5, Rx_Byte, 1);
 8020f54:	2201      	movs	r2, #1
 8020f56:	4906      	ldr	r1, [pc, #24]	; (8020f70 <HAL_UART_RxCpltCallback+0x50>)
 8020f58:	4803      	ldr	r0, [pc, #12]	; (8020f68 <HAL_UART_RxCpltCallback+0x48>)
 8020f5a:	f008 f896 	bl	802908a <HAL_UART_Receive_IT>
	}
}
 8020f5e:	bf00      	nop
 8020f60:	3708      	adds	r7, #8
 8020f62:	46bd      	mov	sp, r7
 8020f64:	bd80      	pop	{r7, pc}
 8020f66:	bf00      	nop
 8020f68:	200002e0 	.word	0x200002e0
 8020f6c:	20000824 	.word	0x20000824
 8020f70:	20000400 	.word	0x20000400

08020f74 <ser_receive_chunk>:

static void ser_receive_chunk(uint8_t rx_byte)
{
 8020f74:	b580      	push	{r7, lr}
 8020f76:	b084      	sub	sp, #16
 8020f78:	af00      	add	r7, sp, #0
 8020f7a:	4603      	mov	r3, r0
 8020f7c:	71fb      	strb	r3, [r7, #7]
	uint32_t	cal_data_crc = 0u;
 8020f7e:	2300      	movs	r3, #0
 8020f80:	60fb      	str	r3, [r7, #12]

	switch(hchunk.chunk_state){
 8020f82:	4b75      	ldr	r3, [pc, #468]	; (8021158 <ser_receive_chunk+0x1e4>)
 8020f84:	781b      	ldrb	r3, [r3, #0]
 8020f86:	2b05      	cmp	r3, #5
 8020f88:	f200 80e1 	bhi.w	802114e <ser_receive_chunk+0x1da>
 8020f8c:	a201      	add	r2, pc, #4	; (adr r2, 8020f94 <ser_receive_chunk+0x20>)
 8020f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020f92:	bf00      	nop
 8020f94:	08020fad 	.word	0x08020fad
 8020f98:	08020ff9 	.word	0x08020ff9
 8020f9c:	0802103f 	.word	0x0802103f
 8020fa0:	0802107d 	.word	0x0802107d
 8020fa4:	080210a7 	.word	0x080210a7
 8020fa8:	080210e3 	.word	0x080210e3

		// receive SOF byte (1byte)
		case CUN_STATE_SOF:
		{
			/* initial variable again */
			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8020fac:	f240 4209 	movw	r2, #1033	; 0x409
 8020fb0:	2100      	movs	r1, #0
 8020fb2:	486a      	ldr	r0, [pc, #424]	; (802115c <ser_receive_chunk+0x1e8>)
 8020fb4:	f00c fc38 	bl	802d828 <memset>
			hchunk.index 		 = 0u;
 8020fb8:	4b67      	ldr	r3, [pc, #412]	; (8021158 <ser_receive_chunk+0x1e4>)
 8020fba:	2200      	movs	r2, #0
 8020fbc:	805a      	strh	r2, [r3, #2]
			hchunk.data_len 	 = 0u;
 8020fbe:	4b66      	ldr	r3, [pc, #408]	; (8021158 <ser_receive_chunk+0x1e4>)
 8020fc0:	2200      	movs	r2, #0
 8020fc2:	809a      	strh	r2, [r3, #4]
			hchunk.rec_data_crc  = 0u;
 8020fc4:	4b64      	ldr	r3, [pc, #400]	; (8021158 <ser_receive_chunk+0x1e4>)
 8020fc6:	2200      	movs	r2, #0
 8020fc8:	80da      	strh	r2, [r3, #6]
 8020fca:	2200      	movs	r2, #0
 8020fcc:	811a      	strh	r2, [r3, #8]


			if(rx_byte == SER_SOF)
 8020fce:	79fb      	ldrb	r3, [r7, #7]
 8020fd0:	2baa      	cmp	r3, #170	; 0xaa
 8020fd2:	f040 80b5 	bne.w	8021140 <ser_receive_chunk+0x1cc>
			{
				Rx_Buffer[hchunk.index++] = rx_byte;
 8020fd6:	4b60      	ldr	r3, [pc, #384]	; (8021158 <ser_receive_chunk+0x1e4>)
 8020fd8:	885b      	ldrh	r3, [r3, #2]
 8020fda:	1c5a      	adds	r2, r3, #1
 8020fdc:	b291      	uxth	r1, r2
 8020fde:	4a5e      	ldr	r2, [pc, #376]	; (8021158 <ser_receive_chunk+0x1e4>)
 8020fe0:	8051      	strh	r1, [r2, #2]
 8020fe2:	4619      	mov	r1, r3
 8020fe4:	4a5d      	ldr	r2, [pc, #372]	; (802115c <ser_receive_chunk+0x1e8>)
 8020fe6:	79fb      	ldrb	r3, [r7, #7]
 8020fe8:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_state = CUN_STATE_PKT_TYPE;
 8020fea:	4b5b      	ldr	r3, [pc, #364]	; (8021158 <ser_receive_chunk+0x1e4>)
 8020fec:	2201      	movs	r2, #1
 8020fee:	701a      	strb	r2, [r3, #0]
				hchunk.chunk_ready = CUN_BUSY;
 8020ff0:	4b59      	ldr	r3, [pc, #356]	; (8021158 <ser_receive_chunk+0x1e4>)
 8020ff2:	2202      	movs	r2, #2
 8020ff4:	705a      	strb	r2, [r3, #1]
			}
		}
		break;
 8020ff6:	e0a3      	b.n	8021140 <ser_receive_chunk+0x1cc>

		// receive the packet type (1byte)
		case CUN_STATE_PKT_TYPE:
		{
			if( rx_byte == SER_SOF ){
 8020ff8:	79fb      	ldrb	r3, [r7, #7]
 8020ffa:	2baa      	cmp	r3, #170	; 0xaa
 8020ffc:	d111      	bne.n	8021022 <ser_receive_chunk+0xae>
				/* initial variable again */
				memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8020ffe:	f240 4209 	movw	r2, #1033	; 0x409
 8021002:	2100      	movs	r1, #0
 8021004:	4855      	ldr	r0, [pc, #340]	; (802115c <ser_receive_chunk+0x1e8>)
 8021006:	f00c fc0f 	bl	802d828 <memset>
				hchunk.index 		 = 0u;
 802100a:	4b53      	ldr	r3, [pc, #332]	; (8021158 <ser_receive_chunk+0x1e4>)
 802100c:	2200      	movs	r2, #0
 802100e:	805a      	strh	r2, [r3, #2]
				hchunk.data_len 	 = 0u;
 8021010:	4b51      	ldr	r3, [pc, #324]	; (8021158 <ser_receive_chunk+0x1e4>)
 8021012:	2200      	movs	r2, #0
 8021014:	809a      	strh	r2, [r3, #4]
				hchunk.rec_data_crc  = 0u;
 8021016:	4b50      	ldr	r3, [pc, #320]	; (8021158 <ser_receive_chunk+0x1e4>)
 8021018:	2200      	movs	r2, #0
 802101a:	80da      	strh	r2, [r3, #6]
 802101c:	2200      	movs	r2, #0
 802101e:	811a      	strh	r2, [r3, #8]
			{
				Rx_Buffer[hchunk.index++] = rx_byte;
				hchunk.chunk_state = CUN_STATE_LENGTH;
			}
		}
		break;
 8021020:	e095      	b.n	802114e <ser_receive_chunk+0x1da>
				Rx_Buffer[hchunk.index++] = rx_byte;
 8021022:	4b4d      	ldr	r3, [pc, #308]	; (8021158 <ser_receive_chunk+0x1e4>)
 8021024:	885b      	ldrh	r3, [r3, #2]
 8021026:	1c5a      	adds	r2, r3, #1
 8021028:	b291      	uxth	r1, r2
 802102a:	4a4b      	ldr	r2, [pc, #300]	; (8021158 <ser_receive_chunk+0x1e4>)
 802102c:	8051      	strh	r1, [r2, #2]
 802102e:	4619      	mov	r1, r3
 8021030:	4a4a      	ldr	r2, [pc, #296]	; (802115c <ser_receive_chunk+0x1e8>)
 8021032:	79fb      	ldrb	r3, [r7, #7]
 8021034:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_state = CUN_STATE_LENGTH;
 8021036:	4b48      	ldr	r3, [pc, #288]	; (8021158 <ser_receive_chunk+0x1e4>)
 8021038:	2202      	movs	r2, #2
 802103a:	701a      	strb	r2, [r3, #0]
		break;
 802103c:	e087      	b.n	802114e <ser_receive_chunk+0x1da>

		// Get the data length
		case CUN_STATE_LENGTH:
		{
			Rx_Buffer[hchunk.index++] = rx_byte;
 802103e:	4b46      	ldr	r3, [pc, #280]	; (8021158 <ser_receive_chunk+0x1e4>)
 8021040:	885b      	ldrh	r3, [r3, #2]
 8021042:	1c5a      	adds	r2, r3, #1
 8021044:	b291      	uxth	r1, r2
 8021046:	4a44      	ldr	r2, [pc, #272]	; (8021158 <ser_receive_chunk+0x1e4>)
 8021048:	8051      	strh	r1, [r2, #2]
 802104a:	4619      	mov	r1, r3
 802104c:	4a43      	ldr	r2, [pc, #268]	; (802115c <ser_receive_chunk+0x1e8>)
 802104e:	79fb      	ldrb	r3, [r7, #7]
 8021050:	5453      	strb	r3, [r2, r1]

			if( hchunk.index >=4 ){
 8021052:	4b41      	ldr	r3, [pc, #260]	; (8021158 <ser_receive_chunk+0x1e4>)
 8021054:	885b      	ldrh	r3, [r3, #2]
 8021056:	2b03      	cmp	r3, #3
 8021058:	d974      	bls.n	8021144 <ser_receive_chunk+0x1d0>
				hchunk.data_len = *(uint16_t *) &Rx_Buffer[2];
 802105a:	4b41      	ldr	r3, [pc, #260]	; (8021160 <ser_receive_chunk+0x1ec>)
 802105c:	881a      	ldrh	r2, [r3, #0]
 802105e:	4b3e      	ldr	r3, [pc, #248]	; (8021158 <ser_receive_chunk+0x1e4>)
 8021060:	809a      	strh	r2, [r3, #4]
				if(hchunk.data_len <= MAX_SERIAL_DATA_LENGTH){
 8021062:	4b3d      	ldr	r3, [pc, #244]	; (8021158 <ser_receive_chunk+0x1e4>)
 8021064:	889b      	ldrh	r3, [r3, #4]
 8021066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802106a:	d803      	bhi.n	8021074 <ser_receive_chunk+0x100>
					hchunk.chunk_state = CUN_STATE_DATA;
 802106c:	4b3a      	ldr	r3, [pc, #232]	; (8021158 <ser_receive_chunk+0x1e4>)
 802106e:	2203      	movs	r2, #3
 8021070:	701a      	strb	r2, [r3, #0]
				else {
					hchunk.chunk_state = CUN_STATE_SOF;
				}
			}
		}
		break;
 8021072:	e067      	b.n	8021144 <ser_receive_chunk+0x1d0>
					hchunk.chunk_state = CUN_STATE_SOF;
 8021074:	4b38      	ldr	r3, [pc, #224]	; (8021158 <ser_receive_chunk+0x1e4>)
 8021076:	2200      	movs	r2, #0
 8021078:	701a      	strb	r2, [r3, #0]
		break;
 802107a:	e063      	b.n	8021144 <ser_receive_chunk+0x1d0>

		// Receive data
		case CUN_STATE_DATA:
		{
			Rx_Buffer[hchunk.index++] = rx_byte;
 802107c:	4b36      	ldr	r3, [pc, #216]	; (8021158 <ser_receive_chunk+0x1e4>)
 802107e:	885b      	ldrh	r3, [r3, #2]
 8021080:	1c5a      	adds	r2, r3, #1
 8021082:	b291      	uxth	r1, r2
 8021084:	4a34      	ldr	r2, [pc, #208]	; (8021158 <ser_receive_chunk+0x1e4>)
 8021086:	8051      	strh	r1, [r2, #2]
 8021088:	4619      	mov	r1, r3
 802108a:	4a34      	ldr	r2, [pc, #208]	; (802115c <ser_receive_chunk+0x1e8>)
 802108c:	79fb      	ldrb	r3, [r7, #7]
 802108e:	5453      	strb	r3, [r2, r1]
			if( hchunk.index >= 4+hchunk.data_len )
 8021090:	4b31      	ldr	r3, [pc, #196]	; (8021158 <ser_receive_chunk+0x1e4>)
 8021092:	889b      	ldrh	r3, [r3, #4]
 8021094:	3303      	adds	r3, #3
 8021096:	4a30      	ldr	r2, [pc, #192]	; (8021158 <ser_receive_chunk+0x1e4>)
 8021098:	8852      	ldrh	r2, [r2, #2]
 802109a:	4293      	cmp	r3, r2
 802109c:	da54      	bge.n	8021148 <ser_receive_chunk+0x1d4>
			{
				hchunk.chunk_state = CUN_STATE_CRC;
 802109e:	4b2e      	ldr	r3, [pc, #184]	; (8021158 <ser_receive_chunk+0x1e4>)
 80210a0:	2204      	movs	r2, #4
 80210a2:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80210a4:	e050      	b.n	8021148 <ser_receive_chunk+0x1d4>

		// Get the CRC
		case CUN_STATE_CRC:
			Rx_Buffer[hchunk.index++] = rx_byte;
 80210a6:	4b2c      	ldr	r3, [pc, #176]	; (8021158 <ser_receive_chunk+0x1e4>)
 80210a8:	885b      	ldrh	r3, [r3, #2]
 80210aa:	1c5a      	adds	r2, r3, #1
 80210ac:	b291      	uxth	r1, r2
 80210ae:	4a2a      	ldr	r2, [pc, #168]	; (8021158 <ser_receive_chunk+0x1e4>)
 80210b0:	8051      	strh	r1, [r2, #2]
 80210b2:	4619      	mov	r1, r3
 80210b4:	4a29      	ldr	r2, [pc, #164]	; (802115c <ser_receive_chunk+0x1e8>)
 80210b6:	79fb      	ldrb	r3, [r7, #7]
 80210b8:	5453      	strb	r3, [r2, r1]
			if( hchunk.index >= 8+hchunk.data_len)
 80210ba:	4b27      	ldr	r3, [pc, #156]	; (8021158 <ser_receive_chunk+0x1e4>)
 80210bc:	889b      	ldrh	r3, [r3, #4]
 80210be:	3307      	adds	r3, #7
 80210c0:	4a25      	ldr	r2, [pc, #148]	; (8021158 <ser_receive_chunk+0x1e4>)
 80210c2:	8852      	ldrh	r2, [r2, #2]
 80210c4:	4293      	cmp	r3, r2
 80210c6:	da41      	bge.n	802114c <ser_receive_chunk+0x1d8>
			{
				hchunk.rec_data_crc = *(uint32_t *) &Rx_Buffer[4+hchunk.data_len];
 80210c8:	4b23      	ldr	r3, [pc, #140]	; (8021158 <ser_receive_chunk+0x1e4>)
 80210ca:	889b      	ldrh	r3, [r3, #4]
 80210cc:	3304      	adds	r3, #4
 80210ce:	4a23      	ldr	r2, [pc, #140]	; (802115c <ser_receive_chunk+0x1e8>)
 80210d0:	4413      	add	r3, r2
 80210d2:	681b      	ldr	r3, [r3, #0]
 80210d4:	4a20      	ldr	r2, [pc, #128]	; (8021158 <ser_receive_chunk+0x1e4>)
 80210d6:	f8c2 3006 	str.w	r3, [r2, #6]
				hchunk.chunk_state = CUN_STATE_EOF;
 80210da:	4b1f      	ldr	r3, [pc, #124]	; (8021158 <ser_receive_chunk+0x1e4>)
 80210dc:	2205      	movs	r2, #5
 80210de:	701a      	strb	r2, [r3, #0]
			}
		break;
 80210e0:	e034      	b.n	802114c <ser_receive_chunk+0x1d8>

		case CUN_STATE_EOF:
		{
			do
			{
				Rx_Buffer[hchunk.index] = rx_byte;
 80210e2:	4b1d      	ldr	r3, [pc, #116]	; (8021158 <ser_receive_chunk+0x1e4>)
 80210e4:	885b      	ldrh	r3, [r3, #2]
 80210e6:	4619      	mov	r1, r3
 80210e8:	4a1c      	ldr	r2, [pc, #112]	; (802115c <ser_receive_chunk+0x1e8>)
 80210ea:	79fb      	ldrb	r3, [r7, #7]
 80210ec:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_ready = CUN_ERROR;
 80210ee:	4b1a      	ldr	r3, [pc, #104]	; (8021158 <ser_receive_chunk+0x1e4>)
 80210f0:	2203      	movs	r2, #3
 80210f2:	705a      	strb	r2, [r3, #1]
				hchunk.chunk_state = CUN_STATE_SOF;
 80210f4:	4b18      	ldr	r3, [pc, #96]	; (8021158 <ser_receive_chunk+0x1e4>)
 80210f6:	2200      	movs	r2, #0
 80210f8:	701a      	strb	r2, [r3, #0]

				if(Rx_Buffer[hchunk.index] != SER_EOF)
 80210fa:	4b17      	ldr	r3, [pc, #92]	; (8021158 <ser_receive_chunk+0x1e4>)
 80210fc:	885b      	ldrh	r3, [r3, #2]
 80210fe:	461a      	mov	r2, r3
 8021100:	4b16      	ldr	r3, [pc, #88]	; (802115c <ser_receive_chunk+0x1e8>)
 8021102:	5c9b      	ldrb	r3, [r3, r2]
 8021104:	2bbb      	cmp	r3, #187	; 0xbb
 8021106:	d119      	bne.n	802113c <ser_receive_chunk+0x1c8>
				{
					break;
				}

				cal_data_crc = ser_calcCRC(&Rx_Buffer[4], hchunk.data_len);
 8021108:	4b13      	ldr	r3, [pc, #76]	; (8021158 <ser_receive_chunk+0x1e4>)
 802110a:	889b      	ldrh	r3, [r3, #4]
 802110c:	4619      	mov	r1, r3
 802110e:	4815      	ldr	r0, [pc, #84]	; (8021164 <ser_receive_chunk+0x1f0>)
 8021110:	f000 f998 	bl	8021444 <ser_calcCRC>
 8021114:	60f8      	str	r0, [r7, #12]
				if(cal_data_crc != hchunk.rec_data_crc)
 8021116:	4b10      	ldr	r3, [pc, #64]	; (8021158 <ser_receive_chunk+0x1e4>)
 8021118:	f8d3 3006 	ldr.w	r3, [r3, #6]
 802111c:	68fa      	ldr	r2, [r7, #12]
 802111e:	429a      	cmp	r2, r3
 8021120:	d008      	beq.n	8021134 <ser_receive_chunk+0x1c0>
				{
					printf("CHUNK CRC MISMATCH!!! [Calc CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 8021122:	4b0d      	ldr	r3, [pc, #52]	; (8021158 <ser_receive_chunk+0x1e4>)
 8021124:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8021128:	461a      	mov	r2, r3
 802112a:	68f9      	ldr	r1, [r7, #12]
 802112c:	480e      	ldr	r0, [pc, #56]	; (8021168 <ser_receive_chunk+0x1f4>)
 802112e:	f00c fc63 	bl	802d9f8 <iprintf>
												                   cal_data_crc,
																   hchunk.rec_data_crc );
					break;
 8021132:	e004      	b.n	802113e <ser_receive_chunk+0x1ca>
				}

				hchunk.chunk_ready = CUN_READY;
 8021134:	4b08      	ldr	r3, [pc, #32]	; (8021158 <ser_receive_chunk+0x1e4>)
 8021136:	2201      	movs	r2, #1
 8021138:	705a      	strb	r2, [r3, #1]

			}while(false);
		}
		break;
 802113a:	e008      	b.n	802114e <ser_receive_chunk+0x1da>
					break;
 802113c:	bf00      	nop
		break;
 802113e:	e006      	b.n	802114e <ser_receive_chunk+0x1da>
		break;
 8021140:	bf00      	nop
 8021142:	e004      	b.n	802114e <ser_receive_chunk+0x1da>
		break;
 8021144:	bf00      	nop
 8021146:	e002      	b.n	802114e <ser_receive_chunk+0x1da>
		break;
 8021148:	bf00      	nop
 802114a:	e000      	b.n	802114e <ser_receive_chunk+0x1da>
		break;
 802114c:	bf00      	nop
	}
}
 802114e:	bf00      	nop
 8021150:	3710      	adds	r7, #16
 8021152:	46bd      	mov	sp, r7
 8021154:	bd80      	pop	{r7, pc}
 8021156:	bf00      	nop
 8021158:	20000824 	.word	0x20000824
 802115c:	20000418 	.word	0x20000418
 8021160:	2000041a 	.word	0x2000041a
 8021164:	2000041c 	.word	0x2000041c
 8021168:	0802ec98 	.word	0x0802ec98

0802116c <ser_proccess_data>:


static SER_EX_ ser_proccess_data( uint8_t *buf, uint16_t len)
{
 802116c:	b5b0      	push	{r4, r5, r7, lr}
 802116e:	b08a      	sub	sp, #40	; 0x28
 8021170:	af00      	add	r7, sp, #0
 8021172:	6078      	str	r0, [r7, #4]
 8021174:	460b      	mov	r3, r1
 8021176:	807b      	strh	r3, [r7, #2]
	SER_EX_ ret = SER_EX_ERROR;
 8021178:	2301      	movs	r3, #1
 802117a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	do
	{
		if( (buf==NULL) || (len == 0u) )
 802117e:	687b      	ldr	r3, [r7, #4]
 8021180:	2b00      	cmp	r3, #0
 8021182:	f000 810e 	beq.w	80213a2 <ser_proccess_data+0x236>
 8021186:	887b      	ldrh	r3, [r7, #2]
 8021188:	2b00      	cmp	r3, #0
 802118a:	f000 810a 	beq.w	80213a2 <ser_proccess_data+0x236>
		{
			break;
		}

		// Check Serial Abort Command
		SER_COMMAND_ *cmd = (SER_COMMAND_ *)buf;
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	623b      	str	r3, [r7, #32]
		if(cmd->packet_type == SER_PACKET_TYPE_CMD)
 8021192:	6a3b      	ldr	r3, [r7, #32]
 8021194:	785b      	ldrb	r3, [r3, #1]
 8021196:	2b00      	cmp	r3, #0
 8021198:	d107      	bne.n	80211aa <ser_proccess_data+0x3e>
		{
			if(cmd->cmd == SER_CMD_ABORT)
 802119a:	6a3b      	ldr	r3, [r7, #32]
 802119c:	791b      	ldrb	r3, [r3, #4]
 802119e:	2b02      	cmp	r3, #2
 80211a0:	d103      	bne.n	80211aa <ser_proccess_data+0x3e>
			{
				// Receive Serial Abort Command. stop process;
				ser_state = SER_STATE_START;
 80211a2:	4b87      	ldr	r3, [pc, #540]	; (80213c0 <ser_proccess_data+0x254>)
 80211a4:	2200      	movs	r2, #0
 80211a6:	701a      	strb	r2, [r3, #0]
				break;
 80211a8:	e104      	b.n	80213b4 <ser_proccess_data+0x248>
			}
		}

		switch(ser_state)
 80211aa:	4b85      	ldr	r3, [pc, #532]	; (80213c0 <ser_proccess_data+0x254>)
 80211ac:	781b      	ldrb	r3, [r3, #0]
 80211ae:	2b03      	cmp	r3, #3
 80211b0:	f200 80f3 	bhi.w	802139a <ser_proccess_data+0x22e>
 80211b4:	a201      	add	r2, pc, #4	; (adr r2, 80211bc <ser_proccess_data+0x50>)
 80211b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80211ba:	bf00      	nop
 80211bc:	080211cd 	.word	0x080211cd
 80211c0:	08021227 	.word	0x08021227
 80211c4:	08021281 	.word	0x08021281
 80211c8:	08021319 	.word	0x08021319
		{

			case SER_STATE_START:
			{

				data_info.data_crc 	= 0u;
 80211cc:	4b7d      	ldr	r3, [pc, #500]	; (80213c4 <ser_proccess_data+0x258>)
 80211ce:	2200      	movs	r2, #0
 80211d0:	70da      	strb	r2, [r3, #3]
 80211d2:	2200      	movs	r2, #0
 80211d4:	711a      	strb	r2, [r3, #4]
 80211d6:	2200      	movs	r2, #0
 80211d8:	715a      	strb	r2, [r3, #5]
 80211da:	2200      	movs	r2, #0
 80211dc:	719a      	strb	r2, [r3, #6]
				data_info.data_size	= 0u;
 80211de:	4b79      	ldr	r3, [pc, #484]	; (80213c4 <ser_proccess_data+0x258>)
 80211e0:	2200      	movs	r2, #0
 80211e2:	705a      	strb	r2, [r3, #1]
 80211e4:	2200      	movs	r2, #0
 80211e6:	709a      	strb	r2, [r3, #2]
				data_info.data_type	= 0u;
 80211e8:	4b76      	ldr	r3, [pc, #472]	; (80213c4 <ser_proccess_data+0x258>)
 80211ea:	2200      	movs	r2, #0
 80211ec:	701a      	strb	r2, [r3, #0]
				data_received_size	= 0u;
 80211ee:	4b76      	ldr	r3, [pc, #472]	; (80213c8 <ser_proccess_data+0x25c>)
 80211f0:	2200      	movs	r2, #0
 80211f2:	801a      	strh	r2, [r3, #0]
				data_calc_crc				= 0u;
 80211f4:	4b75      	ldr	r3, [pc, #468]	; (80213cc <ser_proccess_data+0x260>)
 80211f6:	2200      	movs	r2, #0
 80211f8:	601a      	str	r2, [r3, #0]

				SER_COMMAND_ *cmd = (SER_COMMAND_ *)buf;
 80211fa:	687b      	ldr	r3, [r7, #4]
 80211fc:	60fb      	str	r3, [r7, #12]
				if( cmd->packet_type == SER_PACKET_TYPE_CMD )
 80211fe:	68fb      	ldr	r3, [r7, #12]
 8021200:	785b      	ldrb	r3, [r3, #1]
 8021202:	2b00      	cmp	r3, #0
 8021204:	f040 80cf 	bne.w	80213a6 <ser_proccess_data+0x23a>
				{
					if( cmd->cmd == SER_CMD_START )
 8021208:	68fb      	ldr	r3, [r7, #12]
 802120a:	791b      	ldrb	r3, [r3, #4]
 802120c:	2b00      	cmp	r3, #0
 802120e:	f040 80ca 	bne.w	80213a6 <ser_proccess_data+0x23a>
					{
						printf("Received Serial Start Command \r\n");
 8021212:	486f      	ldr	r0, [pc, #444]	; (80213d0 <ser_proccess_data+0x264>)
 8021214:	f00c fc76 	bl	802db04 <puts>
						ser_state = SER_STATE_HEADER;
 8021218:	4b69      	ldr	r3, [pc, #420]	; (80213c0 <ser_proccess_data+0x254>)
 802121a:	2201      	movs	r2, #1
 802121c:	701a      	strb	r2, [r3, #0]
						ret = SER_EX_OK;
 802121e:	2300      	movs	r3, #0
 8021220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}
			}
			break;
 8021224:	e0bf      	b.n	80213a6 <ser_proccess_data+0x23a>


			case SER_STATE_HEADER:
			{
				SER_HEADER_ *header = (SER_HEADER_ *)buf;
 8021226:	687b      	ldr	r3, [r7, #4]
 8021228:	613b      	str	r3, [r7, #16]

				if( header->packet_type == SER_PACKET_TYPE_HEADER )
 802122a:	693b      	ldr	r3, [r7, #16]
 802122c:	785b      	ldrb	r3, [r3, #1]
 802122e:	2b02      	cmp	r3, #2
 8021230:	f040 80bb 	bne.w	80213aa <ser_proccess_data+0x23e>
				{
					data_info.data_type = header->meta_data.data_type;
 8021234:	693b      	ldr	r3, [r7, #16]
 8021236:	791a      	ldrb	r2, [r3, #4]
 8021238:	4b62      	ldr	r3, [pc, #392]	; (80213c4 <ser_proccess_data+0x258>)
 802123a:	701a      	strb	r2, [r3, #0]
					data_info.data_size = header->meta_data.data_size;
 802123c:	693b      	ldr	r3, [r7, #16]
 802123e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8021242:	b29a      	uxth	r2, r3
 8021244:	4b5f      	ldr	r3, [pc, #380]	; (80213c4 <ser_proccess_data+0x258>)
 8021246:	f8a3 2001 	strh.w	r2, [r3, #1]
					data_info.data_crc	 = header->meta_data.data_crc;
 802124a:	693b      	ldr	r3, [r7, #16]
 802124c:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8021250:	4a5c      	ldr	r2, [pc, #368]	; (80213c4 <ser_proccess_data+0x258>)
 8021252:	f8c2 3003 	str.w	r3, [r2, #3]

					printf("Received Data Header. type=[%d], size=[%d], crc=[0x%08lX]\r\n",
																									data_info.data_type,
 8021256:	4b5b      	ldr	r3, [pc, #364]	; (80213c4 <ser_proccess_data+0x258>)
 8021258:	781b      	ldrb	r3, [r3, #0]
					printf("Received Data Header. type=[%d], size=[%d], crc=[0x%08lX]\r\n",
 802125a:	4619      	mov	r1, r3
																									data_info.data_size,
 802125c:	4b59      	ldr	r3, [pc, #356]	; (80213c4 <ser_proccess_data+0x258>)
 802125e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8021262:	b29b      	uxth	r3, r3
					printf("Received Data Header. type=[%d], size=[%d], crc=[0x%08lX]\r\n",
 8021264:	461a      	mov	r2, r3
 8021266:	4b57      	ldr	r3, [pc, #348]	; (80213c4 <ser_proccess_data+0x258>)
 8021268:	f8d3 3003 	ldr.w	r3, [r3, #3]
 802126c:	4859      	ldr	r0, [pc, #356]	; (80213d4 <ser_proccess_data+0x268>)
 802126e:	f00c fbc3 	bl	802d9f8 <iprintf>
																									data_info.data_crc);
					ser_state = SER_STATE_DATA;
 8021272:	4b53      	ldr	r3, [pc, #332]	; (80213c0 <ser_proccess_data+0x254>)
 8021274:	2202      	movs	r2, #2
 8021276:	701a      	strb	r2, [r3, #0]
					ret = SER_EX_OK;
 8021278:	2300      	movs	r3, #0
 802127a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
			}
			break;
 802127e:	e094      	b.n	80213aa <ser_proccess_data+0x23e>


			case SER_STATE_DATA:
			{
				SER_DATA_				*data			= (SER_DATA_ *)buf;
 8021280:	687b      	ldr	r3, [r7, #4]
 8021282:	61bb      	str	r3, [r7, #24]
				uint16_t				data_len	=	data->data_len;
 8021284:	69bb      	ldr	r3, [r7, #24]
 8021286:	789a      	ldrb	r2, [r3, #2]
 8021288:	78db      	ldrb	r3, [r3, #3]
 802128a:	021b      	lsls	r3, r3, #8
 802128c:	4313      	orrs	r3, r2
 802128e:	82fb      	strh	r3, [r7, #22]

				if( data->packet_type == SER_PACKET_TYPE_DATA )
 8021290:	69bb      	ldr	r3, [r7, #24]
 8021292:	785b      	ldrb	r3, [r3, #1]
 8021294:	2b01      	cmp	r3, #1
 8021296:	f040 808a 	bne.w	80213ae <ser_proccess_data+0x242>
				{
					switch(data_info.data_type)
 802129a:	4b4a      	ldr	r3, [pc, #296]	; (80213c4 <ser_proccess_data+0x258>)
 802129c:	781b      	ldrb	r3, [r3, #0]
 802129e:	2b02      	cmp	r3, #2
 80212a0:	d006      	beq.n	80212b0 <ser_proccess_data+0x144>
 80212a2:	2b02      	cmp	r3, #2
 80212a4:	dc25      	bgt.n	80212f2 <ser_proccess_data+0x186>
 80212a6:	2b00      	cmp	r3, #0
 80212a8:	d027      	beq.n	80212fa <ser_proccess_data+0x18e>
 80212aa:	2b01      	cmp	r3, #1
 80212ac:	d027      	beq.n	80212fe <ser_proccess_data+0x192>
 80212ae:	e020      	b.n	80212f2 <ser_proccess_data+0x186>
						}
						break;

						case OTA_INFO_DATA:
						{
								ota_data = *(ota_info *)&buf[4];
 80212b0:	4a49      	ldr	r2, [pc, #292]	; (80213d8 <ser_proccess_data+0x26c>)
 80212b2:	687b      	ldr	r3, [r7, #4]
 80212b4:	3304      	adds	r3, #4
 80212b6:	681d      	ldr	r5, [r3, #0]
 80212b8:	685c      	ldr	r4, [r3, #4]
 80212ba:	6898      	ldr	r0, [r3, #8]
 80212bc:	68d9      	ldr	r1, [r3, #12]
 80212be:	6015      	str	r5, [r2, #0]
 80212c0:	6054      	str	r4, [r2, #4]
 80212c2:	6090      	str	r0, [r2, #8]
 80212c4:	60d1      	str	r1, [r2, #12]
 80212c6:	7c1b      	ldrb	r3, [r3, #16]
 80212c8:	7413      	strb	r3, [r2, #16]
								ota_data.ota_valid = 0;
 80212ca:	4b43      	ldr	r3, [pc, #268]	; (80213d8 <ser_proccess_data+0x26c>)
 80212cc:	2200      	movs	r2, #0
 80212ce:	721a      	strb	r2, [r3, #8]
								data_received_size 			= data_len;
 80212d0:	4a3d      	ldr	r2, [pc, #244]	; (80213c8 <ser_proccess_data+0x25c>)
 80212d2:	8afb      	ldrh	r3, [r7, #22]
 80212d4:	8013      	strh	r3, [r2, #0]
								data_calc_crc			 			= ser_calcCRC(data->data, data_len);
 80212d6:	69bb      	ldr	r3, [r7, #24]
 80212d8:	685b      	ldr	r3, [r3, #4]
 80212da:	8afa      	ldrh	r2, [r7, #22]
 80212dc:	4611      	mov	r1, r2
 80212de:	4618      	mov	r0, r3
 80212e0:	f000 f8b0 	bl	8021444 <ser_calcCRC>
 80212e4:	4603      	mov	r3, r0
 80212e6:	4a39      	ldr	r2, [pc, #228]	; (80213cc <ser_proccess_data+0x260>)
 80212e8:	6013      	str	r3, [r2, #0]
								ret = SER_EX_OK;
 80212ea:	2300      	movs	r3, #0
 80212ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

						}
						break;
 80212f0:	e006      	b.n	8021300 <ser_proccess_data+0x194>

						default:
						{
							// shouldn't be here
							ret = SER_EX_ERROR;
 80212f2:	2301      	movs	r3, #1
 80212f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						}
						break;
 80212f8:	e002      	b.n	8021300 <ser_proccess_data+0x194>
						break;
 80212fa:	bf00      	nop
 80212fc:	e000      	b.n	8021300 <ser_proccess_data+0x194>
						break;
 80212fe:	bf00      	nop
					}

					if( data_received_size >= data_info.data_size )
 8021300:	4b30      	ldr	r3, [pc, #192]	; (80213c4 <ser_proccess_data+0x258>)
 8021302:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8021306:	b29a      	uxth	r2, r3
 8021308:	4b2f      	ldr	r3, [pc, #188]	; (80213c8 <ser_proccess_data+0x25c>)
 802130a:	881b      	ldrh	r3, [r3, #0]
 802130c:	429a      	cmp	r2, r3
 802130e:	d84e      	bhi.n	80213ae <ser_proccess_data+0x242>
					{
						//Received All data, move to end
						ser_state = SER_STATE_END;
 8021310:	4b2b      	ldr	r3, [pc, #172]	; (80213c0 <ser_proccess_data+0x254>)
 8021312:	2203      	movs	r2, #3
 8021314:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			break;
 8021316:	e04a      	b.n	80213ae <ser_proccess_data+0x242>


			case SER_STATE_END:
			{
				SER_COMMAND_ *cmd = (SER_COMMAND_ *)buf;
 8021318:	687b      	ldr	r3, [r7, #4]
 802131a:	61fb      	str	r3, [r7, #28]

				if( cmd->packet_type == SER_PACKET_TYPE_CMD)
 802131c:	69fb      	ldr	r3, [r7, #28]
 802131e:	785b      	ldrb	r3, [r3, #1]
 8021320:	2b00      	cmp	r3, #0
 8021322:	d146      	bne.n	80213b2 <ser_proccess_data+0x246>
				{
					if(cmd->cmd == SER_CMD_END)
 8021324:	69fb      	ldr	r3, [r7, #28]
 8021326:	791b      	ldrb	r3, [r3, #4]
 8021328:	2b01      	cmp	r3, #1
 802132a:	d142      	bne.n	80213b2 <ser_proccess_data+0x246>
					{
						printf("Receive SERIAL END COMMAND\r\nValidation...\r\n");
 802132c:	482b      	ldr	r0, [pc, #172]	; (80213dc <ser_proccess_data+0x270>)
 802132e:	f00c fbe9 	bl	802db04 <puts>

						//Validation the received packets
						//TODO: validation normal data

						// one packet data so:
						if( data_info.data_type == OTA_INFO_DATA ||  data_info.data_type == STATUS_DATA )
 8021332:	4b24      	ldr	r3, [pc, #144]	; (80213c4 <ser_proccess_data+0x258>)
 8021334:	781b      	ldrb	r3, [r3, #0]
 8021336:	2b02      	cmp	r3, #2
 8021338:	d003      	beq.n	8021342 <ser_proccess_data+0x1d6>
 802133a:	4b22      	ldr	r3, [pc, #136]	; (80213c4 <ser_proccess_data+0x258>)
 802133c:	781b      	ldrb	r3, [r3, #0]
 802133e:	2b01      	cmp	r3, #1
 8021340:	d121      	bne.n	8021386 <ser_proccess_data+0x21a>
						{
							if(data_calc_crc != data_info.data_crc)
 8021342:	4b20      	ldr	r3, [pc, #128]	; (80213c4 <ser_proccess_data+0x258>)
 8021344:	f8d3 2003 	ldr.w	r2, [r3, #3]
 8021348:	4b20      	ldr	r3, [pc, #128]	; (80213cc <ser_proccess_data+0x260>)
 802134a:	681b      	ldr	r3, [r3, #0]
 802134c:	429a      	cmp	r2, r3
 802134e:	d009      	beq.n	8021364 <ser_proccess_data+0x1f8>
							{
								printf("ERROR: FW CRC Mismatch: calculated: [0x%08lx] received: [0x%08lx]\r\n",
 8021350:	4b1e      	ldr	r3, [pc, #120]	; (80213cc <ser_proccess_data+0x260>)
 8021352:	681b      	ldr	r3, [r3, #0]
 8021354:	4a1b      	ldr	r2, [pc, #108]	; (80213c4 <ser_proccess_data+0x258>)
 8021356:	f8d2 2003 	ldr.w	r2, [r2, #3]
 802135a:	4619      	mov	r1, r3
 802135c:	4820      	ldr	r0, [pc, #128]	; (80213e0 <ser_proccess_data+0x274>)
 802135e:	f00c fb4b 	bl	802d9f8 <iprintf>
												data_calc_crc, data_info.data_crc);
								break;
 8021362:	e027      	b.n	80213b4 <ser_proccess_data+0x248>
							}

							if(data_info.data_type == OTA_INFO_DATA)
 8021364:	4b17      	ldr	r3, [pc, #92]	; (80213c4 <ser_proccess_data+0x258>)
 8021366:	781b      	ldrb	r3, [r3, #0]
 8021368:	2b02      	cmp	r3, #2
 802136a:	d10c      	bne.n	8021386 <ser_proccess_data+0x21a>
							{
								ota_data.ota_valid = 1u;
 802136c:	4b1a      	ldr	r3, [pc, #104]	; (80213d8 <ser_proccess_data+0x26c>)
 802136e:	2201      	movs	r2, #1
 8021370:	721a      	strb	r2, [r3, #8]
								printf("A NEW FIRMWARE FOUND!!! VERSION = [%d,%ld]\r\n", ota_data.ota_major,
 8021372:	4b19      	ldr	r3, [pc, #100]	; (80213d8 <ser_proccess_data+0x26c>)
 8021374:	885b      	ldrh	r3, [r3, #2]
 8021376:	b29b      	uxth	r3, r3
 8021378:	4619      	mov	r1, r3
 802137a:	4b17      	ldr	r3, [pc, #92]	; (80213d8 <ser_proccess_data+0x26c>)
 802137c:	685b      	ldr	r3, [r3, #4]
 802137e:	461a      	mov	r2, r3
 8021380:	4818      	ldr	r0, [pc, #96]	; (80213e4 <ser_proccess_data+0x278>)
 8021382:	f00c fb39 	bl	802d9f8 <iprintf>
																																				 ota_data.ota_minor);
							}
						}
						printf("Validated Successfully!\r\n");
 8021386:	4818      	ldr	r0, [pc, #96]	; (80213e8 <ser_proccess_data+0x27c>)
 8021388:	f00c fbbc 	bl	802db04 <puts>

						ser_state = SER_STATE_START;
 802138c:	4b0c      	ldr	r3, [pc, #48]	; (80213c0 <ser_proccess_data+0x254>)
 802138e:	2200      	movs	r2, #0
 8021390:	701a      	strb	r2, [r3, #0]
						ret = SER_EX_OK;
 8021392:	2300      	movs	r3, #0
 8021394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

					}
				}
			}
			break;
 8021398:	e00b      	b.n	80213b2 <ser_proccess_data+0x246>

			default:
			{
				ret = SER_EX_ERROR;
 802139a:	2301      	movs	r3, #1
 802139c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80213a0:	e008      	b.n	80213b4 <ser_proccess_data+0x248>
			// state cases end
		};
 80213a2:	bf00      	nop
 80213a4:	e006      	b.n	80213b4 <ser_proccess_data+0x248>
			break;
 80213a6:	bf00      	nop
 80213a8:	e004      	b.n	80213b4 <ser_proccess_data+0x248>
			break;
 80213aa:	bf00      	nop
 80213ac:	e002      	b.n	80213b4 <ser_proccess_data+0x248>
			break;
 80213ae:	bf00      	nop
 80213b0:	e000      	b.n	80213b4 <ser_proccess_data+0x248>
			break;
 80213b2:	bf00      	nop

	}while(false);

	return ret;
 80213b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80213b8:	4618      	mov	r0, r3
 80213ba:	3728      	adds	r7, #40	; 0x28
 80213bc:	46bd      	mov	sp, r7
 80213be:	bdb0      	pop	{r4, r5, r7, pc}
 80213c0:	20000415 	.word	0x20000415
 80213c4:	20000830 	.word	0x20000830
 80213c8:	20000840 	.word	0x20000840
 80213cc:	20000844 	.word	0x20000844
 80213d0:	0802ecdc 	.word	0x0802ecdc
 80213d4:	0802ecfc 	.word	0x0802ecfc
 80213d8:	20000404 	.word	0x20000404
 80213dc:	0802ed38 	.word	0x0802ed38
 80213e0:	0802ed64 	.word	0x0802ed64
 80213e4:	0802eda8 	.word	0x0802eda8
 80213e8:	0802edd8 	.word	0x0802edd8

080213ec <ser_send_resp>:
 * @brief send response to host
 * @param huart uart handler
 * @param rsp ACK or NACK response
 * @retval none
 */
static void ser_send_resp(UART_HandleTypeDef *huart, uint8_t rsp){
 80213ec:	b580      	push	{r7, lr}
 80213ee:	b086      	sub	sp, #24
 80213f0:	af00      	add	r7, sp, #0
 80213f2:	6078      	str	r0, [r7, #4]
 80213f4:	460b      	mov	r3, r1
 80213f6:	70fb      	strb	r3, [r7, #3]
	SER_RESP_ pack =
 80213f8:	f107 030c 	add.w	r3, r7, #12
 80213fc:	2200      	movs	r2, #0
 80213fe:	601a      	str	r2, [r3, #0]
 8021400:	605a      	str	r2, [r3, #4]
 8021402:	811a      	strh	r2, [r3, #8]
 8021404:	23aa      	movs	r3, #170	; 0xaa
 8021406:	733b      	strb	r3, [r7, #12]
 8021408:	2303      	movs	r3, #3
 802140a:	737b      	strb	r3, [r7, #13]
 802140c:	2301      	movs	r3, #1
 802140e:	81fb      	strh	r3, [r7, #14]
 8021410:	78fb      	ldrb	r3, [r7, #3]
 8021412:	743b      	strb	r3, [r7, #16]
 8021414:	23bb      	movs	r3, #187	; 0xbb
 8021416:	757b      	strb	r3, [r7, #21]
		.data_len		= 1u,
		.status			= rsp,
		.eof			= SER_EOF
	};

	pack.crc = ser_calcCRC(&pack.status, 1);
 8021418:	f107 030c 	add.w	r3, r7, #12
 802141c:	3304      	adds	r3, #4
 802141e:	2101      	movs	r1, #1
 8021420:	4618      	mov	r0, r3
 8021422:	f000 f80f 	bl	8021444 <ser_calcCRC>
 8021426:	4603      	mov	r3, r0
 8021428:	f8c7 3011 	str.w	r3, [r7, #17]

	//send respond
	HAL_UART_Transmit(huart, (uint8_t *)&pack, sizeof(SER_RESP_),HAL_MAX_DELAY);
 802142c:	f107 010c 	add.w	r1, r7, #12
 8021430:	f04f 33ff 	mov.w	r3, #4294967295
 8021434:	220a      	movs	r2, #10
 8021436:	6878      	ldr	r0, [r7, #4]
 8021438:	f007 fd95 	bl	8028f66 <HAL_UART_Transmit>

}
 802143c:	bf00      	nop
 802143e:	3718      	adds	r7, #24
 8021440:	46bd      	mov	sp, r7
 8021442:	bd80      	pop	{r7, pc}

08021444 <ser_calcCRC>:
 * @param DataLength length of data
 * @retval CRC32
 */

uint32_t ser_calcCRC(uint8_t * pData, uint32_t DataLength)
{
 8021444:	b480      	push	{r7}
 8021446:	b087      	sub	sp, #28
 8021448:	af00      	add	r7, sp, #0
 802144a:	6078      	str	r0, [r7, #4]
 802144c:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 802144e:	f04f 33ff 	mov.w	r3, #4294967295
 8021452:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 8021454:	2300      	movs	r3, #0
 8021456:	613b      	str	r3, [r7, #16]
 8021458:	e014      	b.n	8021484 <ser_calcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 802145a:	697b      	ldr	r3, [r7, #20]
 802145c:	0e1b      	lsrs	r3, r3, #24
 802145e:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 8021460:	687a      	ldr	r2, [r7, #4]
 8021462:	693b      	ldr	r3, [r7, #16]
 8021464:	4413      	add	r3, r2
 8021466:	781a      	ldrb	r2, [r3, #0]
 8021468:	7bfb      	ldrb	r3, [r7, #15]
 802146a:	4053      	eors	r3, r2
 802146c:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 802146e:	697b      	ldr	r3, [r7, #20]
 8021470:	021a      	lsls	r2, r3, #8
 8021472:	7bfb      	ldrb	r3, [r7, #15]
 8021474:	4909      	ldr	r1, [pc, #36]	; (802149c <ser_calcCRC+0x58>)
 8021476:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802147a:	4053      	eors	r3, r2
 802147c:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 802147e:	693b      	ldr	r3, [r7, #16]
 8021480:	3301      	adds	r3, #1
 8021482:	613b      	str	r3, [r7, #16]
 8021484:	693a      	ldr	r2, [r7, #16]
 8021486:	683b      	ldr	r3, [r7, #0]
 8021488:	429a      	cmp	r2, r3
 802148a:	d3e6      	bcc.n	802145a <ser_calcCRC+0x16>
    }
    return Checksum;
 802148c:	697b      	ldr	r3, [r7, #20]
}
 802148e:	4618      	mov	r0, r3
 8021490:	371c      	adds	r7, #28
 8021492:	46bd      	mov	sp, r7
 8021494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021498:	4770      	bx	lr
 802149a:	bf00      	nop
 802149c:	0802edf8 	.word	0x0802edf8

080214a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80214a0:	b480      	push	{r7}
 80214a2:	b083      	sub	sp, #12
 80214a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80214a6:	2300      	movs	r3, #0
 80214a8:	607b      	str	r3, [r7, #4]
 80214aa:	4b10      	ldr	r3, [pc, #64]	; (80214ec <HAL_MspInit+0x4c>)
 80214ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80214ae:	4a0f      	ldr	r2, [pc, #60]	; (80214ec <HAL_MspInit+0x4c>)
 80214b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80214b4:	6453      	str	r3, [r2, #68]	; 0x44
 80214b6:	4b0d      	ldr	r3, [pc, #52]	; (80214ec <HAL_MspInit+0x4c>)
 80214b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80214ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80214be:	607b      	str	r3, [r7, #4]
 80214c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80214c2:	2300      	movs	r3, #0
 80214c4:	603b      	str	r3, [r7, #0]
 80214c6:	4b09      	ldr	r3, [pc, #36]	; (80214ec <HAL_MspInit+0x4c>)
 80214c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214ca:	4a08      	ldr	r2, [pc, #32]	; (80214ec <HAL_MspInit+0x4c>)
 80214cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80214d0:	6413      	str	r3, [r2, #64]	; 0x40
 80214d2:	4b06      	ldr	r3, [pc, #24]	; (80214ec <HAL_MspInit+0x4c>)
 80214d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80214da:	603b      	str	r3, [r7, #0]
 80214dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80214de:	bf00      	nop
 80214e0:	370c      	adds	r7, #12
 80214e2:	46bd      	mov	sp, r7
 80214e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214e8:	4770      	bx	lr
 80214ea:	bf00      	nop
 80214ec:	40023800 	.word	0x40023800

080214f0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80214f0:	b480      	push	{r7}
 80214f2:	b085      	sub	sp, #20
 80214f4:	af00      	add	r7, sp, #0
 80214f6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80214f8:	687b      	ldr	r3, [r7, #4]
 80214fa:	681b      	ldr	r3, [r3, #0]
 80214fc:	4a0b      	ldr	r2, [pc, #44]	; (802152c <HAL_CRC_MspInit+0x3c>)
 80214fe:	4293      	cmp	r3, r2
 8021500:	d10d      	bne.n	802151e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8021502:	2300      	movs	r3, #0
 8021504:	60fb      	str	r3, [r7, #12]
 8021506:	4b0a      	ldr	r3, [pc, #40]	; (8021530 <HAL_CRC_MspInit+0x40>)
 8021508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802150a:	4a09      	ldr	r2, [pc, #36]	; (8021530 <HAL_CRC_MspInit+0x40>)
 802150c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8021510:	6313      	str	r3, [r2, #48]	; 0x30
 8021512:	4b07      	ldr	r3, [pc, #28]	; (8021530 <HAL_CRC_MspInit+0x40>)
 8021514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802151a:	60fb      	str	r3, [r7, #12]
 802151c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 802151e:	bf00      	nop
 8021520:	3714      	adds	r7, #20
 8021522:	46bd      	mov	sp, r7
 8021524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021528:	4770      	bx	lr
 802152a:	bf00      	nop
 802152c:	40023000 	.word	0x40023000
 8021530:	40023800 	.word	0x40023800

08021534 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8021534:	b580      	push	{r7, lr}
 8021536:	b084      	sub	sp, #16
 8021538:	af00      	add	r7, sp, #0
 802153a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 802153c:	687b      	ldr	r3, [r7, #4]
 802153e:	681b      	ldr	r3, [r3, #0]
 8021540:	4a0e      	ldr	r2, [pc, #56]	; (802157c <HAL_DMA2D_MspInit+0x48>)
 8021542:	4293      	cmp	r3, r2
 8021544:	d115      	bne.n	8021572 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8021546:	2300      	movs	r3, #0
 8021548:	60fb      	str	r3, [r7, #12]
 802154a:	4b0d      	ldr	r3, [pc, #52]	; (8021580 <HAL_DMA2D_MspInit+0x4c>)
 802154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802154e:	4a0c      	ldr	r2, [pc, #48]	; (8021580 <HAL_DMA2D_MspInit+0x4c>)
 8021550:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8021554:	6313      	str	r3, [r2, #48]	; 0x30
 8021556:	4b0a      	ldr	r3, [pc, #40]	; (8021580 <HAL_DMA2D_MspInit+0x4c>)
 8021558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802155a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802155e:	60fb      	str	r3, [r7, #12]
 8021560:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8021562:	2200      	movs	r2, #0
 8021564:	2105      	movs	r1, #5
 8021566:	205a      	movs	r0, #90	; 0x5a
 8021568:	f002 f83e 	bl	80235e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 802156c:	205a      	movs	r0, #90	; 0x5a
 802156e:	f002 f857 	bl	8023620 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8021572:	bf00      	nop
 8021574:	3710      	adds	r7, #16
 8021576:	46bd      	mov	sp, r7
 8021578:	bd80      	pop	{r7, pc}
 802157a:	bf00      	nop
 802157c:	4002b000 	.word	0x4002b000
 8021580:	40023800 	.word	0x40023800

08021584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8021584:	b580      	push	{r7, lr}
 8021586:	b08a      	sub	sp, #40	; 0x28
 8021588:	af00      	add	r7, sp, #0
 802158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802158c:	f107 0314 	add.w	r3, r7, #20
 8021590:	2200      	movs	r2, #0
 8021592:	601a      	str	r2, [r3, #0]
 8021594:	605a      	str	r2, [r3, #4]
 8021596:	609a      	str	r2, [r3, #8]
 8021598:	60da      	str	r2, [r3, #12]
 802159a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 802159c:	687b      	ldr	r3, [r7, #4]
 802159e:	681b      	ldr	r3, [r3, #0]
 80215a0:	4a29      	ldr	r2, [pc, #164]	; (8021648 <HAL_I2C_MspInit+0xc4>)
 80215a2:	4293      	cmp	r3, r2
 80215a4:	d14b      	bne.n	802163e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80215a6:	2300      	movs	r3, #0
 80215a8:	613b      	str	r3, [r7, #16]
 80215aa:	4b28      	ldr	r3, [pc, #160]	; (802164c <HAL_I2C_MspInit+0xc8>)
 80215ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215ae:	4a27      	ldr	r2, [pc, #156]	; (802164c <HAL_I2C_MspInit+0xc8>)
 80215b0:	f043 0304 	orr.w	r3, r3, #4
 80215b4:	6313      	str	r3, [r2, #48]	; 0x30
 80215b6:	4b25      	ldr	r3, [pc, #148]	; (802164c <HAL_I2C_MspInit+0xc8>)
 80215b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215ba:	f003 0304 	and.w	r3, r3, #4
 80215be:	613b      	str	r3, [r7, #16]
 80215c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80215c2:	2300      	movs	r3, #0
 80215c4:	60fb      	str	r3, [r7, #12]
 80215c6:	4b21      	ldr	r3, [pc, #132]	; (802164c <HAL_I2C_MspInit+0xc8>)
 80215c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215ca:	4a20      	ldr	r2, [pc, #128]	; (802164c <HAL_I2C_MspInit+0xc8>)
 80215cc:	f043 0301 	orr.w	r3, r3, #1
 80215d0:	6313      	str	r3, [r2, #48]	; 0x30
 80215d2:	4b1e      	ldr	r3, [pc, #120]	; (802164c <HAL_I2C_MspInit+0xc8>)
 80215d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215d6:	f003 0301 	and.w	r3, r3, #1
 80215da:	60fb      	str	r3, [r7, #12]
 80215dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80215de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80215e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80215e4:	2312      	movs	r3, #18
 80215e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80215e8:	2301      	movs	r3, #1
 80215ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80215ec:	2300      	movs	r3, #0
 80215ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80215f0:	2304      	movs	r3, #4
 80215f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80215f4:	f107 0314 	add.w	r3, r7, #20
 80215f8:	4619      	mov	r1, r3
 80215fa:	4815      	ldr	r0, [pc, #84]	; (8021650 <HAL_I2C_MspInit+0xcc>)
 80215fc:	f002 fe26 	bl	802424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8021600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021606:	2312      	movs	r3, #18
 8021608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802160a:	2301      	movs	r3, #1
 802160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802160e:	2300      	movs	r3, #0
 8021610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8021612:	2304      	movs	r3, #4
 8021614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8021616:	f107 0314 	add.w	r3, r7, #20
 802161a:	4619      	mov	r1, r3
 802161c:	480d      	ldr	r0, [pc, #52]	; (8021654 <HAL_I2C_MspInit+0xd0>)
 802161e:	f002 fe15 	bl	802424c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8021622:	2300      	movs	r3, #0
 8021624:	60bb      	str	r3, [r7, #8]
 8021626:	4b09      	ldr	r3, [pc, #36]	; (802164c <HAL_I2C_MspInit+0xc8>)
 8021628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802162a:	4a08      	ldr	r2, [pc, #32]	; (802164c <HAL_I2C_MspInit+0xc8>)
 802162c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8021630:	6413      	str	r3, [r2, #64]	; 0x40
 8021632:	4b06      	ldr	r3, [pc, #24]	; (802164c <HAL_I2C_MspInit+0xc8>)
 8021634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802163a:	60bb      	str	r3, [r7, #8]
 802163c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 802163e:	bf00      	nop
 8021640:	3728      	adds	r7, #40	; 0x28
 8021642:	46bd      	mov	sp, r7
 8021644:	bd80      	pop	{r7, pc}
 8021646:	bf00      	nop
 8021648:	40005c00 	.word	0x40005c00
 802164c:	40023800 	.word	0x40023800
 8021650:	40020800 	.word	0x40020800
 8021654:	40020000 	.word	0x40020000

08021658 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8021658:	b580      	push	{r7, lr}
 802165a:	b09a      	sub	sp, #104	; 0x68
 802165c:	af00      	add	r7, sp, #0
 802165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021660:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021664:	2200      	movs	r2, #0
 8021666:	601a      	str	r2, [r3, #0]
 8021668:	605a      	str	r2, [r3, #4]
 802166a:	609a      	str	r2, [r3, #8]
 802166c:	60da      	str	r2, [r3, #12]
 802166e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8021670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021674:	2230      	movs	r2, #48	; 0x30
 8021676:	2100      	movs	r1, #0
 8021678:	4618      	mov	r0, r3
 802167a:	f00c f8d5 	bl	802d828 <memset>
  if(hltdc->Instance==LTDC)
 802167e:	687b      	ldr	r3, [r7, #4]
 8021680:	681b      	ldr	r3, [r3, #0]
 8021682:	4a85      	ldr	r2, [pc, #532]	; (8021898 <HAL_LTDC_MspInit+0x240>)
 8021684:	4293      	cmp	r3, r2
 8021686:	f040 8102 	bne.w	802188e <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 802168a:	2308      	movs	r3, #8
 802168c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 802168e:	2331      	movs	r3, #49	; 0x31
 8021690:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 8021692:	2302      	movs	r3, #2
 8021694:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8021696:	2300      	movs	r3, #0
 8021698:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802169a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802169e:	4618      	mov	r0, r3
 80216a0:	f005 ff62 	bl	8027568 <HAL_RCCEx_PeriphCLKConfig>
 80216a4:	4603      	mov	r3, r0
 80216a6:	2b00      	cmp	r3, #0
 80216a8:	d001      	beq.n	80216ae <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80216aa:	f7ff fbe9 	bl	8020e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80216ae:	2300      	movs	r3, #0
 80216b0:	623b      	str	r3, [r7, #32]
 80216b2:	4b7a      	ldr	r3, [pc, #488]	; (802189c <HAL_LTDC_MspInit+0x244>)
 80216b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80216b6:	4a79      	ldr	r2, [pc, #484]	; (802189c <HAL_LTDC_MspInit+0x244>)
 80216b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80216bc:	6453      	str	r3, [r2, #68]	; 0x44
 80216be:	4b77      	ldr	r3, [pc, #476]	; (802189c <HAL_LTDC_MspInit+0x244>)
 80216c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80216c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80216c6:	623b      	str	r3, [r7, #32]
 80216c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80216ca:	2300      	movs	r3, #0
 80216cc:	61fb      	str	r3, [r7, #28]
 80216ce:	4b73      	ldr	r3, [pc, #460]	; (802189c <HAL_LTDC_MspInit+0x244>)
 80216d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216d2:	4a72      	ldr	r2, [pc, #456]	; (802189c <HAL_LTDC_MspInit+0x244>)
 80216d4:	f043 0320 	orr.w	r3, r3, #32
 80216d8:	6313      	str	r3, [r2, #48]	; 0x30
 80216da:	4b70      	ldr	r3, [pc, #448]	; (802189c <HAL_LTDC_MspInit+0x244>)
 80216dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216de:	f003 0320 	and.w	r3, r3, #32
 80216e2:	61fb      	str	r3, [r7, #28]
 80216e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80216e6:	2300      	movs	r3, #0
 80216e8:	61bb      	str	r3, [r7, #24]
 80216ea:	4b6c      	ldr	r3, [pc, #432]	; (802189c <HAL_LTDC_MspInit+0x244>)
 80216ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216ee:	4a6b      	ldr	r2, [pc, #428]	; (802189c <HAL_LTDC_MspInit+0x244>)
 80216f0:	f043 0301 	orr.w	r3, r3, #1
 80216f4:	6313      	str	r3, [r2, #48]	; 0x30
 80216f6:	4b69      	ldr	r3, [pc, #420]	; (802189c <HAL_LTDC_MspInit+0x244>)
 80216f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216fa:	f003 0301 	and.w	r3, r3, #1
 80216fe:	61bb      	str	r3, [r7, #24]
 8021700:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021702:	2300      	movs	r3, #0
 8021704:	617b      	str	r3, [r7, #20]
 8021706:	4b65      	ldr	r3, [pc, #404]	; (802189c <HAL_LTDC_MspInit+0x244>)
 8021708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802170a:	4a64      	ldr	r2, [pc, #400]	; (802189c <HAL_LTDC_MspInit+0x244>)
 802170c:	f043 0302 	orr.w	r3, r3, #2
 8021710:	6313      	str	r3, [r2, #48]	; 0x30
 8021712:	4b62      	ldr	r3, [pc, #392]	; (802189c <HAL_LTDC_MspInit+0x244>)
 8021714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021716:	f003 0302 	and.w	r3, r3, #2
 802171a:	617b      	str	r3, [r7, #20]
 802171c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 802171e:	2300      	movs	r3, #0
 8021720:	613b      	str	r3, [r7, #16]
 8021722:	4b5e      	ldr	r3, [pc, #376]	; (802189c <HAL_LTDC_MspInit+0x244>)
 8021724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021726:	4a5d      	ldr	r2, [pc, #372]	; (802189c <HAL_LTDC_MspInit+0x244>)
 8021728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802172c:	6313      	str	r3, [r2, #48]	; 0x30
 802172e:	4b5b      	ldr	r3, [pc, #364]	; (802189c <HAL_LTDC_MspInit+0x244>)
 8021730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021736:	613b      	str	r3, [r7, #16]
 8021738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802173a:	2300      	movs	r3, #0
 802173c:	60fb      	str	r3, [r7, #12]
 802173e:	4b57      	ldr	r3, [pc, #348]	; (802189c <HAL_LTDC_MspInit+0x244>)
 8021740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021742:	4a56      	ldr	r2, [pc, #344]	; (802189c <HAL_LTDC_MspInit+0x244>)
 8021744:	f043 0304 	orr.w	r3, r3, #4
 8021748:	6313      	str	r3, [r2, #48]	; 0x30
 802174a:	4b54      	ldr	r3, [pc, #336]	; (802189c <HAL_LTDC_MspInit+0x244>)
 802174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802174e:	f003 0304 	and.w	r3, r3, #4
 8021752:	60fb      	str	r3, [r7, #12]
 8021754:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021756:	2300      	movs	r3, #0
 8021758:	60bb      	str	r3, [r7, #8]
 802175a:	4b50      	ldr	r3, [pc, #320]	; (802189c <HAL_LTDC_MspInit+0x244>)
 802175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802175e:	4a4f      	ldr	r2, [pc, #316]	; (802189c <HAL_LTDC_MspInit+0x244>)
 8021760:	f043 0308 	orr.w	r3, r3, #8
 8021764:	6313      	str	r3, [r2, #48]	; 0x30
 8021766:	4b4d      	ldr	r3, [pc, #308]	; (802189c <HAL_LTDC_MspInit+0x244>)
 8021768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802176a:	f003 0308 	and.w	r3, r3, #8
 802176e:	60bb      	str	r3, [r7, #8]
 8021770:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8021772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021776:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021778:	2302      	movs	r3, #2
 802177a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802177c:	2300      	movs	r3, #0
 802177e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021780:	2300      	movs	r3, #0
 8021782:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021784:	230e      	movs	r3, #14
 8021786:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8021788:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802178c:	4619      	mov	r1, r3
 802178e:	4844      	ldr	r0, [pc, #272]	; (80218a0 <HAL_LTDC_MspInit+0x248>)
 8021790:	f002 fd5c 	bl	802424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8021794:	f641 0358 	movw	r3, #6232	; 0x1858
 8021798:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802179a:	2302      	movs	r3, #2
 802179c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802179e:	2300      	movs	r3, #0
 80217a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80217a2:	2300      	movs	r3, #0
 80217a4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80217a6:	230e      	movs	r3, #14
 80217a8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80217aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80217ae:	4619      	mov	r1, r3
 80217b0:	483c      	ldr	r0, [pc, #240]	; (80218a4 <HAL_LTDC_MspInit+0x24c>)
 80217b2:	f002 fd4b 	bl	802424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80217b6:	2303      	movs	r3, #3
 80217b8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80217ba:	2302      	movs	r3, #2
 80217bc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80217be:	2300      	movs	r3, #0
 80217c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80217c2:	2300      	movs	r3, #0
 80217c4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80217c6:	2309      	movs	r3, #9
 80217c8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80217ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80217ce:	4619      	mov	r1, r3
 80217d0:	4835      	ldr	r0, [pc, #212]	; (80218a8 <HAL_LTDC_MspInit+0x250>)
 80217d2:	f002 fd3b 	bl	802424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80217d6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80217da:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80217dc:	2302      	movs	r3, #2
 80217de:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80217e0:	2300      	movs	r3, #0
 80217e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80217e4:	2300      	movs	r3, #0
 80217e6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80217e8:	230e      	movs	r3, #14
 80217ea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80217ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80217f0:	4619      	mov	r1, r3
 80217f2:	482d      	ldr	r0, [pc, #180]	; (80218a8 <HAL_LTDC_MspInit+0x250>)
 80217f4:	f002 fd2a 	bl	802424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80217f8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80217fc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80217fe:	2302      	movs	r3, #2
 8021800:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021802:	2300      	movs	r3, #0
 8021804:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021806:	2300      	movs	r3, #0
 8021808:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 802180a:	230e      	movs	r3, #14
 802180c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 802180e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021812:	4619      	mov	r1, r3
 8021814:	4825      	ldr	r0, [pc, #148]	; (80218ac <HAL_LTDC_MspInit+0x254>)
 8021816:	f002 fd19 	bl	802424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 802181a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 802181e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021820:	2302      	movs	r3, #2
 8021822:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021824:	2300      	movs	r3, #0
 8021826:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021828:	2300      	movs	r3, #0
 802182a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 802182c:	230e      	movs	r3, #14
 802182e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021830:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021834:	4619      	mov	r1, r3
 8021836:	481e      	ldr	r0, [pc, #120]	; (80218b0 <HAL_LTDC_MspInit+0x258>)
 8021838:	f002 fd08 	bl	802424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 802183c:	2348      	movs	r3, #72	; 0x48
 802183e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021840:	2302      	movs	r3, #2
 8021842:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021844:	2300      	movs	r3, #0
 8021846:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021848:	2300      	movs	r3, #0
 802184a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 802184c:	230e      	movs	r3, #14
 802184e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021850:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021854:	4619      	mov	r1, r3
 8021856:	4817      	ldr	r0, [pc, #92]	; (80218b4 <HAL_LTDC_MspInit+0x25c>)
 8021858:	f002 fcf8 	bl	802424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 802185c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8021860:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021862:	2302      	movs	r3, #2
 8021864:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021866:	2300      	movs	r3, #0
 8021868:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802186a:	2300      	movs	r3, #0
 802186c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 802186e:	2309      	movs	r3, #9
 8021870:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021872:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021876:	4619      	mov	r1, r3
 8021878:	480c      	ldr	r0, [pc, #48]	; (80218ac <HAL_LTDC_MspInit+0x254>)
 802187a:	f002 fce7 	bl	802424c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 802187e:	2200      	movs	r2, #0
 8021880:	2105      	movs	r1, #5
 8021882:	2058      	movs	r0, #88	; 0x58
 8021884:	f001 feb0 	bl	80235e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8021888:	2058      	movs	r0, #88	; 0x58
 802188a:	f001 fec9 	bl	8023620 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 802188e:	bf00      	nop
 8021890:	3768      	adds	r7, #104	; 0x68
 8021892:	46bd      	mov	sp, r7
 8021894:	bd80      	pop	{r7, pc}
 8021896:	bf00      	nop
 8021898:	40016800 	.word	0x40016800
 802189c:	40023800 	.word	0x40023800
 80218a0:	40021400 	.word	0x40021400
 80218a4:	40020000 	.word	0x40020000
 80218a8:	40020400 	.word	0x40020400
 80218ac:	40021800 	.word	0x40021800
 80218b0:	40020800 	.word	0x40020800
 80218b4:	40020c00 	.word	0x40020c00

080218b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80218b8:	b580      	push	{r7, lr}
 80218ba:	b08a      	sub	sp, #40	; 0x28
 80218bc:	af00      	add	r7, sp, #0
 80218be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80218c0:	f107 0314 	add.w	r3, r7, #20
 80218c4:	2200      	movs	r2, #0
 80218c6:	601a      	str	r2, [r3, #0]
 80218c8:	605a      	str	r2, [r3, #4]
 80218ca:	609a      	str	r2, [r3, #8]
 80218cc:	60da      	str	r2, [r3, #12]
 80218ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80218d0:	687b      	ldr	r3, [r7, #4]
 80218d2:	681b      	ldr	r3, [r3, #0]
 80218d4:	4a19      	ldr	r2, [pc, #100]	; (802193c <HAL_SPI_MspInit+0x84>)
 80218d6:	4293      	cmp	r3, r2
 80218d8:	d12c      	bne.n	8021934 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80218da:	2300      	movs	r3, #0
 80218dc:	613b      	str	r3, [r7, #16]
 80218de:	4b18      	ldr	r3, [pc, #96]	; (8021940 <HAL_SPI_MspInit+0x88>)
 80218e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80218e2:	4a17      	ldr	r2, [pc, #92]	; (8021940 <HAL_SPI_MspInit+0x88>)
 80218e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80218e8:	6453      	str	r3, [r2, #68]	; 0x44
 80218ea:	4b15      	ldr	r3, [pc, #84]	; (8021940 <HAL_SPI_MspInit+0x88>)
 80218ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80218ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80218f2:	613b      	str	r3, [r7, #16]
 80218f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80218f6:	2300      	movs	r3, #0
 80218f8:	60fb      	str	r3, [r7, #12]
 80218fa:	4b11      	ldr	r3, [pc, #68]	; (8021940 <HAL_SPI_MspInit+0x88>)
 80218fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218fe:	4a10      	ldr	r2, [pc, #64]	; (8021940 <HAL_SPI_MspInit+0x88>)
 8021900:	f043 0320 	orr.w	r3, r3, #32
 8021904:	6313      	str	r3, [r2, #48]	; 0x30
 8021906:	4b0e      	ldr	r3, [pc, #56]	; (8021940 <HAL_SPI_MspInit+0x88>)
 8021908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802190a:	f003 0320 	and.w	r3, r3, #32
 802190e:	60fb      	str	r3, [r7, #12]
 8021910:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8021912:	f44f 7360 	mov.w	r3, #896	; 0x380
 8021916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021918:	2302      	movs	r3, #2
 802191a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802191c:	2300      	movs	r3, #0
 802191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021920:	2300      	movs	r3, #0
 8021922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8021924:	2305      	movs	r3, #5
 8021926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021928:	f107 0314 	add.w	r3, r7, #20
 802192c:	4619      	mov	r1, r3
 802192e:	4805      	ldr	r0, [pc, #20]	; (8021944 <HAL_SPI_MspInit+0x8c>)
 8021930:	f002 fc8c 	bl	802424c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8021934:	bf00      	nop
 8021936:	3728      	adds	r7, #40	; 0x28
 8021938:	46bd      	mov	sp, r7
 802193a:	bd80      	pop	{r7, pc}
 802193c:	40015000 	.word	0x40015000
 8021940:	40023800 	.word	0x40023800
 8021944:	40021400 	.word	0x40021400

08021948 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8021948:	b580      	push	{r7, lr}
 802194a:	b082      	sub	sp, #8
 802194c:	af00      	add	r7, sp, #0
 802194e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8021950:	687b      	ldr	r3, [r7, #4]
 8021952:	681b      	ldr	r3, [r3, #0]
 8021954:	4a08      	ldr	r2, [pc, #32]	; (8021978 <HAL_SPI_MspDeInit+0x30>)
 8021956:	4293      	cmp	r3, r2
 8021958:	d10a      	bne.n	8021970 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 802195a:	4b08      	ldr	r3, [pc, #32]	; (802197c <HAL_SPI_MspDeInit+0x34>)
 802195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802195e:	4a07      	ldr	r2, [pc, #28]	; (802197c <HAL_SPI_MspDeInit+0x34>)
 8021960:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8021964:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8021966:	f44f 7160 	mov.w	r1, #896	; 0x380
 802196a:	4805      	ldr	r0, [pc, #20]	; (8021980 <HAL_SPI_MspDeInit+0x38>)
 802196c:	f002 fe1a 	bl	80245a4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8021970:	bf00      	nop
 8021972:	3708      	adds	r7, #8
 8021974:	46bd      	mov	sp, r7
 8021976:	bd80      	pop	{r7, pc}
 8021978:	40015000 	.word	0x40015000
 802197c:	40023800 	.word	0x40023800
 8021980:	40021400 	.word	0x40021400

08021984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8021984:	b480      	push	{r7}
 8021986:	b085      	sub	sp, #20
 8021988:	af00      	add	r7, sp, #0
 802198a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 802198c:	687b      	ldr	r3, [r7, #4]
 802198e:	681b      	ldr	r3, [r3, #0]
 8021990:	4a0b      	ldr	r2, [pc, #44]	; (80219c0 <HAL_TIM_Base_MspInit+0x3c>)
 8021992:	4293      	cmp	r3, r2
 8021994:	d10d      	bne.n	80219b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8021996:	2300      	movs	r3, #0
 8021998:	60fb      	str	r3, [r7, #12]
 802199a:	4b0a      	ldr	r3, [pc, #40]	; (80219c4 <HAL_TIM_Base_MspInit+0x40>)
 802199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802199e:	4a09      	ldr	r2, [pc, #36]	; (80219c4 <HAL_TIM_Base_MspInit+0x40>)
 80219a0:	f043 0301 	orr.w	r3, r3, #1
 80219a4:	6453      	str	r3, [r2, #68]	; 0x44
 80219a6:	4b07      	ldr	r3, [pc, #28]	; (80219c4 <HAL_TIM_Base_MspInit+0x40>)
 80219a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80219aa:	f003 0301 	and.w	r3, r3, #1
 80219ae:	60fb      	str	r3, [r7, #12]
 80219b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80219b2:	bf00      	nop
 80219b4:	3714      	adds	r7, #20
 80219b6:	46bd      	mov	sp, r7
 80219b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219bc:	4770      	bx	lr
 80219be:	bf00      	nop
 80219c0:	40010000 	.word	0x40010000
 80219c4:	40023800 	.word	0x40023800

080219c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80219c8:	b580      	push	{r7, lr}
 80219ca:	b08c      	sub	sp, #48	; 0x30
 80219cc:	af00      	add	r7, sp, #0
 80219ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80219d0:	f107 031c 	add.w	r3, r7, #28
 80219d4:	2200      	movs	r2, #0
 80219d6:	601a      	str	r2, [r3, #0]
 80219d8:	605a      	str	r2, [r3, #4]
 80219da:	609a      	str	r2, [r3, #8]
 80219dc:	60da      	str	r2, [r3, #12]
 80219de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80219e0:	687b      	ldr	r3, [r7, #4]
 80219e2:	681b      	ldr	r3, [r3, #0]
 80219e4:	4a46      	ldr	r2, [pc, #280]	; (8021b00 <HAL_UART_MspInit+0x138>)
 80219e6:	4293      	cmp	r3, r2
 80219e8:	d153      	bne.n	8021a92 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80219ea:	2300      	movs	r3, #0
 80219ec:	61bb      	str	r3, [r7, #24]
 80219ee:	4b45      	ldr	r3, [pc, #276]	; (8021b04 <HAL_UART_MspInit+0x13c>)
 80219f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80219f2:	4a44      	ldr	r2, [pc, #272]	; (8021b04 <HAL_UART_MspInit+0x13c>)
 80219f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80219f8:	6413      	str	r3, [r2, #64]	; 0x40
 80219fa:	4b42      	ldr	r3, [pc, #264]	; (8021b04 <HAL_UART_MspInit+0x13c>)
 80219fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80219fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021a02:	61bb      	str	r3, [r7, #24]
 8021a04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021a06:	2300      	movs	r3, #0
 8021a08:	617b      	str	r3, [r7, #20]
 8021a0a:	4b3e      	ldr	r3, [pc, #248]	; (8021b04 <HAL_UART_MspInit+0x13c>)
 8021a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021a0e:	4a3d      	ldr	r2, [pc, #244]	; (8021b04 <HAL_UART_MspInit+0x13c>)
 8021a10:	f043 0304 	orr.w	r3, r3, #4
 8021a14:	6313      	str	r3, [r2, #48]	; 0x30
 8021a16:	4b3b      	ldr	r3, [pc, #236]	; (8021b04 <HAL_UART_MspInit+0x13c>)
 8021a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021a1a:	f003 0304 	and.w	r3, r3, #4
 8021a1e:	617b      	str	r3, [r7, #20]
 8021a20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021a22:	2300      	movs	r3, #0
 8021a24:	613b      	str	r3, [r7, #16]
 8021a26:	4b37      	ldr	r3, [pc, #220]	; (8021b04 <HAL_UART_MspInit+0x13c>)
 8021a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021a2a:	4a36      	ldr	r2, [pc, #216]	; (8021b04 <HAL_UART_MspInit+0x13c>)
 8021a2c:	f043 0308 	orr.w	r3, r3, #8
 8021a30:	6313      	str	r3, [r2, #48]	; 0x30
 8021a32:	4b34      	ldr	r3, [pc, #208]	; (8021b04 <HAL_UART_MspInit+0x13c>)
 8021a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021a36:	f003 0308 	and.w	r3, r3, #8
 8021a3a:	613b      	str	r3, [r7, #16]
 8021a3c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8021a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a44:	2302      	movs	r3, #2
 8021a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a48:	2300      	movs	r3, #0
 8021a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021a4c:	2303      	movs	r3, #3
 8021a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021a50:	2308      	movs	r3, #8
 8021a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021a54:	f107 031c 	add.w	r3, r7, #28
 8021a58:	4619      	mov	r1, r3
 8021a5a:	482b      	ldr	r0, [pc, #172]	; (8021b08 <HAL_UART_MspInit+0x140>)
 8021a5c:	f002 fbf6 	bl	802424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021a60:	2304      	movs	r3, #4
 8021a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a64:	2302      	movs	r3, #2
 8021a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a68:	2300      	movs	r3, #0
 8021a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021a6c:	2303      	movs	r3, #3
 8021a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021a70:	2308      	movs	r3, #8
 8021a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021a74:	f107 031c 	add.w	r3, r7, #28
 8021a78:	4619      	mov	r1, r3
 8021a7a:	4824      	ldr	r0, [pc, #144]	; (8021b0c <HAL_UART_MspInit+0x144>)
 8021a7c:	f002 fbe6 	bl	802424c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8021a80:	2200      	movs	r2, #0
 8021a82:	2100      	movs	r1, #0
 8021a84:	2035      	movs	r0, #53	; 0x35
 8021a86:	f001 fdaf 	bl	80235e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8021a8a:	2035      	movs	r0, #53	; 0x35
 8021a8c:	f001 fdc8 	bl	8023620 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8021a90:	e031      	b.n	8021af6 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 8021a92:	687b      	ldr	r3, [r7, #4]
 8021a94:	681b      	ldr	r3, [r3, #0]
 8021a96:	4a1e      	ldr	r2, [pc, #120]	; (8021b10 <HAL_UART_MspInit+0x148>)
 8021a98:	4293      	cmp	r3, r2
 8021a9a:	d12c      	bne.n	8021af6 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8021a9c:	2300      	movs	r3, #0
 8021a9e:	60fb      	str	r3, [r7, #12]
 8021aa0:	4b18      	ldr	r3, [pc, #96]	; (8021b04 <HAL_UART_MspInit+0x13c>)
 8021aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021aa4:	4a17      	ldr	r2, [pc, #92]	; (8021b04 <HAL_UART_MspInit+0x13c>)
 8021aa6:	f043 0310 	orr.w	r3, r3, #16
 8021aaa:	6453      	str	r3, [r2, #68]	; 0x44
 8021aac:	4b15      	ldr	r3, [pc, #84]	; (8021b04 <HAL_UART_MspInit+0x13c>)
 8021aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021ab0:	f003 0310 	and.w	r3, r3, #16
 8021ab4:	60fb      	str	r3, [r7, #12]
 8021ab6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021ab8:	2300      	movs	r3, #0
 8021aba:	60bb      	str	r3, [r7, #8]
 8021abc:	4b11      	ldr	r3, [pc, #68]	; (8021b04 <HAL_UART_MspInit+0x13c>)
 8021abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ac0:	4a10      	ldr	r2, [pc, #64]	; (8021b04 <HAL_UART_MspInit+0x13c>)
 8021ac2:	f043 0301 	orr.w	r3, r3, #1
 8021ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8021ac8:	4b0e      	ldr	r3, [pc, #56]	; (8021b04 <HAL_UART_MspInit+0x13c>)
 8021aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021acc:	f003 0301 	and.w	r3, r3, #1
 8021ad0:	60bb      	str	r3, [r7, #8]
 8021ad2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8021ad4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8021ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021ada:	2302      	movs	r3, #2
 8021adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021ade:	2300      	movs	r3, #0
 8021ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021ae2:	2303      	movs	r3, #3
 8021ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8021ae6:	2307      	movs	r3, #7
 8021ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021aea:	f107 031c 	add.w	r3, r7, #28
 8021aee:	4619      	mov	r1, r3
 8021af0:	4808      	ldr	r0, [pc, #32]	; (8021b14 <HAL_UART_MspInit+0x14c>)
 8021af2:	f002 fbab 	bl	802424c <HAL_GPIO_Init>
}
 8021af6:	bf00      	nop
 8021af8:	3730      	adds	r7, #48	; 0x30
 8021afa:	46bd      	mov	sp, r7
 8021afc:	bd80      	pop	{r7, pc}
 8021afe:	bf00      	nop
 8021b00:	40005000 	.word	0x40005000
 8021b04:	40023800 	.word	0x40023800
 8021b08:	40020800 	.word	0x40020800
 8021b0c:	40020c00 	.word	0x40020c00
 8021b10:	40011000 	.word	0x40011000
 8021b14:	40020000 	.word	0x40020000

08021b18 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8021b18:	b580      	push	{r7, lr}
 8021b1a:	b086      	sub	sp, #24
 8021b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8021b1e:	1d3b      	adds	r3, r7, #4
 8021b20:	2200      	movs	r2, #0
 8021b22:	601a      	str	r2, [r3, #0]
 8021b24:	605a      	str	r2, [r3, #4]
 8021b26:	609a      	str	r2, [r3, #8]
 8021b28:	60da      	str	r2, [r3, #12]
 8021b2a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8021b2c:	4b3b      	ldr	r3, [pc, #236]	; (8021c1c <HAL_FMC_MspInit+0x104>)
 8021b2e:	681b      	ldr	r3, [r3, #0]
 8021b30:	2b00      	cmp	r3, #0
 8021b32:	d16f      	bne.n	8021c14 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8021b34:	4b39      	ldr	r3, [pc, #228]	; (8021c1c <HAL_FMC_MspInit+0x104>)
 8021b36:	2201      	movs	r2, #1
 8021b38:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8021b3a:	2300      	movs	r3, #0
 8021b3c:	603b      	str	r3, [r7, #0]
 8021b3e:	4b38      	ldr	r3, [pc, #224]	; (8021c20 <HAL_FMC_MspInit+0x108>)
 8021b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021b42:	4a37      	ldr	r2, [pc, #220]	; (8021c20 <HAL_FMC_MspInit+0x108>)
 8021b44:	f043 0301 	orr.w	r3, r3, #1
 8021b48:	6393      	str	r3, [r2, #56]	; 0x38
 8021b4a:	4b35      	ldr	r3, [pc, #212]	; (8021c20 <HAL_FMC_MspInit+0x108>)
 8021b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021b4e:	f003 0301 	and.w	r3, r3, #1
 8021b52:	603b      	str	r3, [r7, #0]
 8021b54:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8021b56:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8021b5a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021b5c:	2302      	movs	r3, #2
 8021b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b60:	2300      	movs	r3, #0
 8021b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021b64:	2303      	movs	r3, #3
 8021b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021b68:	230c      	movs	r3, #12
 8021b6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021b6c:	1d3b      	adds	r3, r7, #4
 8021b6e:	4619      	mov	r1, r3
 8021b70:	482c      	ldr	r0, [pc, #176]	; (8021c24 <HAL_FMC_MspInit+0x10c>)
 8021b72:	f002 fb6b 	bl	802424c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8021b76:	2301      	movs	r3, #1
 8021b78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021b7a:	2302      	movs	r3, #2
 8021b7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b7e:	2300      	movs	r3, #0
 8021b80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021b82:	2303      	movs	r3, #3
 8021b84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021b86:	230c      	movs	r3, #12
 8021b88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8021b8a:	1d3b      	adds	r3, r7, #4
 8021b8c:	4619      	mov	r1, r3
 8021b8e:	4826      	ldr	r0, [pc, #152]	; (8021c28 <HAL_FMC_MspInit+0x110>)
 8021b90:	f002 fb5c 	bl	802424c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8021b94:	f248 1333 	movw	r3, #33075	; 0x8133
 8021b98:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021b9a:	2302      	movs	r3, #2
 8021b9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b9e:	2300      	movs	r3, #0
 8021ba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021ba2:	2303      	movs	r3, #3
 8021ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021ba6:	230c      	movs	r3, #12
 8021ba8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021baa:	1d3b      	adds	r3, r7, #4
 8021bac:	4619      	mov	r1, r3
 8021bae:	481f      	ldr	r0, [pc, #124]	; (8021c2c <HAL_FMC_MspInit+0x114>)
 8021bb0:	f002 fb4c 	bl	802424c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8021bb4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8021bb8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021bba:	2302      	movs	r3, #2
 8021bbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021bbe:	2300      	movs	r3, #0
 8021bc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021bc2:	2303      	movs	r3, #3
 8021bc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021bc6:	230c      	movs	r3, #12
 8021bc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021bca:	1d3b      	adds	r3, r7, #4
 8021bcc:	4619      	mov	r1, r3
 8021bce:	4818      	ldr	r0, [pc, #96]	; (8021c30 <HAL_FMC_MspInit+0x118>)
 8021bd0:	f002 fb3c 	bl	802424c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8021bd4:	f24c 7303 	movw	r3, #50947	; 0xc703
 8021bd8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021bda:	2302      	movs	r3, #2
 8021bdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021bde:	2300      	movs	r3, #0
 8021be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021be2:	2303      	movs	r3, #3
 8021be4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021be6:	230c      	movs	r3, #12
 8021be8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021bea:	1d3b      	adds	r3, r7, #4
 8021bec:	4619      	mov	r1, r3
 8021bee:	4811      	ldr	r0, [pc, #68]	; (8021c34 <HAL_FMC_MspInit+0x11c>)
 8021bf0:	f002 fb2c 	bl	802424c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8021bf4:	2360      	movs	r3, #96	; 0x60
 8021bf6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021bf8:	2302      	movs	r3, #2
 8021bfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021bfc:	2300      	movs	r3, #0
 8021bfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021c00:	2303      	movs	r3, #3
 8021c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021c04:	230c      	movs	r3, #12
 8021c06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021c08:	1d3b      	adds	r3, r7, #4
 8021c0a:	4619      	mov	r1, r3
 8021c0c:	480a      	ldr	r0, [pc, #40]	; (8021c38 <HAL_FMC_MspInit+0x120>)
 8021c0e:	f002 fb1d 	bl	802424c <HAL_GPIO_Init>
 8021c12:	e000      	b.n	8021c16 <HAL_FMC_MspInit+0xfe>
    return;
 8021c14:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8021c16:	3718      	adds	r7, #24
 8021c18:	46bd      	mov	sp, r7
 8021c1a:	bd80      	pop	{r7, pc}
 8021c1c:	20000848 	.word	0x20000848
 8021c20:	40023800 	.word	0x40023800
 8021c24:	40021400 	.word	0x40021400
 8021c28:	40020800 	.word	0x40020800
 8021c2c:	40021800 	.word	0x40021800
 8021c30:	40021000 	.word	0x40021000
 8021c34:	40020c00 	.word	0x40020c00
 8021c38:	40020400 	.word	0x40020400

08021c3c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8021c3c:	b580      	push	{r7, lr}
 8021c3e:	b082      	sub	sp, #8
 8021c40:	af00      	add	r7, sp, #0
 8021c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8021c44:	f7ff ff68 	bl	8021b18 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8021c48:	bf00      	nop
 8021c4a:	3708      	adds	r7, #8
 8021c4c:	46bd      	mov	sp, r7
 8021c4e:	bd80      	pop	{r7, pc}

08021c50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021c50:	b580      	push	{r7, lr}
 8021c52:	b08e      	sub	sp, #56	; 0x38
 8021c54:	af00      	add	r7, sp, #0
 8021c56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8021c58:	2300      	movs	r3, #0
 8021c5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8021c5c:	2300      	movs	r3, #0
 8021c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8021c60:	2300      	movs	r3, #0
 8021c62:	60fb      	str	r3, [r7, #12]
 8021c64:	4b33      	ldr	r3, [pc, #204]	; (8021d34 <HAL_InitTick+0xe4>)
 8021c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c68:	4a32      	ldr	r2, [pc, #200]	; (8021d34 <HAL_InitTick+0xe4>)
 8021c6a:	f043 0310 	orr.w	r3, r3, #16
 8021c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8021c70:	4b30      	ldr	r3, [pc, #192]	; (8021d34 <HAL_InitTick+0xe4>)
 8021c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c74:	f003 0310 	and.w	r3, r3, #16
 8021c78:	60fb      	str	r3, [r7, #12]
 8021c7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8021c7c:	f107 0210 	add.w	r2, r7, #16
 8021c80:	f107 0314 	add.w	r3, r7, #20
 8021c84:	4611      	mov	r1, r2
 8021c86:	4618      	mov	r0, r3
 8021c88:	f005 fc3c 	bl	8027504 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8021c8c:	6a3b      	ldr	r3, [r7, #32]
 8021c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8021c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c92:	2b00      	cmp	r3, #0
 8021c94:	d103      	bne.n	8021c9e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8021c96:	f005 fc0d 	bl	80274b4 <HAL_RCC_GetPCLK1Freq>
 8021c9a:	6378      	str	r0, [r7, #52]	; 0x34
 8021c9c:	e004      	b.n	8021ca8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8021c9e:	f005 fc09 	bl	80274b4 <HAL_RCC_GetPCLK1Freq>
 8021ca2:	4603      	mov	r3, r0
 8021ca4:	005b      	lsls	r3, r3, #1
 8021ca6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8021ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021caa:	4a23      	ldr	r2, [pc, #140]	; (8021d38 <HAL_InitTick+0xe8>)
 8021cac:	fba2 2303 	umull	r2, r3, r2, r3
 8021cb0:	0c9b      	lsrs	r3, r3, #18
 8021cb2:	3b01      	subs	r3, #1
 8021cb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8021cb6:	4b21      	ldr	r3, [pc, #132]	; (8021d3c <HAL_InitTick+0xec>)
 8021cb8:	4a21      	ldr	r2, [pc, #132]	; (8021d40 <HAL_InitTick+0xf0>)
 8021cba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8021cbc:	4b1f      	ldr	r3, [pc, #124]	; (8021d3c <HAL_InitTick+0xec>)
 8021cbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8021cc2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8021cc4:	4a1d      	ldr	r2, [pc, #116]	; (8021d3c <HAL_InitTick+0xec>)
 8021cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cc8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8021cca:	4b1c      	ldr	r3, [pc, #112]	; (8021d3c <HAL_InitTick+0xec>)
 8021ccc:	2200      	movs	r2, #0
 8021cce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021cd0:	4b1a      	ldr	r3, [pc, #104]	; (8021d3c <HAL_InitTick+0xec>)
 8021cd2:	2200      	movs	r2, #0
 8021cd4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021cd6:	4b19      	ldr	r3, [pc, #100]	; (8021d3c <HAL_InitTick+0xec>)
 8021cd8:	2200      	movs	r2, #0
 8021cda:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8021cdc:	4817      	ldr	r0, [pc, #92]	; (8021d3c <HAL_InitTick+0xec>)
 8021cde:	f006 fc73 	bl	80285c8 <HAL_TIM_Base_Init>
 8021ce2:	4603      	mov	r3, r0
 8021ce4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8021ce8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021cec:	2b00      	cmp	r3, #0
 8021cee:	d11b      	bne.n	8021d28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8021cf0:	4812      	ldr	r0, [pc, #72]	; (8021d3c <HAL_InitTick+0xec>)
 8021cf2:	f006 fcb9 	bl	8028668 <HAL_TIM_Base_Start_IT>
 8021cf6:	4603      	mov	r3, r0
 8021cf8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8021cfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021d00:	2b00      	cmp	r3, #0
 8021d02:	d111      	bne.n	8021d28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8021d04:	2036      	movs	r0, #54	; 0x36
 8021d06:	f001 fc8b 	bl	8023620 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021d0a:	687b      	ldr	r3, [r7, #4]
 8021d0c:	2b0f      	cmp	r3, #15
 8021d0e:	d808      	bhi.n	8021d22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8021d10:	2200      	movs	r2, #0
 8021d12:	6879      	ldr	r1, [r7, #4]
 8021d14:	2036      	movs	r0, #54	; 0x36
 8021d16:	f001 fc67 	bl	80235e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8021d1a:	4a0a      	ldr	r2, [pc, #40]	; (8021d44 <HAL_InitTick+0xf4>)
 8021d1c:	687b      	ldr	r3, [r7, #4]
 8021d1e:	6013      	str	r3, [r2, #0]
 8021d20:	e002      	b.n	8021d28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8021d22:	2301      	movs	r3, #1
 8021d24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8021d28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8021d2c:	4618      	mov	r0, r3
 8021d2e:	3738      	adds	r7, #56	; 0x38
 8021d30:	46bd      	mov	sp, r7
 8021d32:	bd80      	pop	{r7, pc}
 8021d34:	40023800 	.word	0x40023800
 8021d38:	431bde83 	.word	0x431bde83
 8021d3c:	2000084c 	.word	0x2000084c
 8021d40:	40001000 	.word	0x40001000
 8021d44:	20000054 	.word	0x20000054

08021d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021d48:	b480      	push	{r7}
 8021d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021d4c:	e7fe      	b.n	8021d4c <NMI_Handler+0x4>

08021d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021d4e:	b480      	push	{r7}
 8021d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021d52:	e7fe      	b.n	8021d52 <HardFault_Handler+0x4>

08021d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021d54:	b480      	push	{r7}
 8021d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021d58:	e7fe      	b.n	8021d58 <MemManage_Handler+0x4>

08021d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021d5a:	b480      	push	{r7}
 8021d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021d5e:	e7fe      	b.n	8021d5e <BusFault_Handler+0x4>

08021d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021d60:	b480      	push	{r7}
 8021d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021d64:	e7fe      	b.n	8021d64 <UsageFault_Handler+0x4>

08021d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021d66:	b480      	push	{r7}
 8021d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8021d6a:	bf00      	nop
 8021d6c:	46bd      	mov	sp, r7
 8021d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d72:	4770      	bx	lr

08021d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021d74:	b480      	push	{r7}
 8021d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021d78:	bf00      	nop
 8021d7a:	46bd      	mov	sp, r7
 8021d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d80:	4770      	bx	lr

08021d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021d82:	b480      	push	{r7}
 8021d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8021d86:	bf00      	nop
 8021d88:	46bd      	mov	sp, r7
 8021d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d8e:	4770      	bx	lr

08021d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8021d90:	b480      	push	{r7}
 8021d92:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021d94:	bf00      	nop
 8021d96:	46bd      	mov	sp, r7
 8021d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d9c:	4770      	bx	lr

08021d9e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8021d9e:	b580      	push	{r7, lr}
 8021da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8021da2:	2001      	movs	r0, #1
 8021da4:	f002 fd24 	bl	80247f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8021da8:	bf00      	nop
 8021daa:	bd80      	pop	{r7, pc}

08021dac <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8021dac:	b580      	push	{r7, lr}
 8021dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8021db0:	4802      	ldr	r0, [pc, #8]	; (8021dbc <UART5_IRQHandler+0x10>)
 8021db2:	f007 f99b 	bl	80290ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8021db6:	bf00      	nop
 8021db8:	bd80      	pop	{r7, pc}
 8021dba:	bf00      	nop
 8021dbc:	200002e0 	.word	0x200002e0

08021dc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8021dc0:	b580      	push	{r7, lr}
 8021dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8021dc4:	4802      	ldr	r0, [pc, #8]	; (8021dd0 <TIM6_DAC_IRQHandler+0x10>)
 8021dc6:	f006 fcbf 	bl	8028748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8021dca:	bf00      	nop
 8021dcc:	bd80      	pop	{r7, pc}
 8021dce:	bf00      	nop
 8021dd0:	2000084c 	.word	0x2000084c

08021dd4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8021dd4:	b580      	push	{r7, lr}
 8021dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8021dd8:	4802      	ldr	r0, [pc, #8]	; (8021de4 <OTG_HS_IRQHandler+0x10>)
 8021dda:	f002 ff8b 	bl	8024cf4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8021dde:	bf00      	nop
 8021de0:	bd80      	pop	{r7, pc}
 8021de2:	bf00      	nop
 8021de4:	20000ecc 	.word	0x20000ecc

08021de8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8021de8:	b580      	push	{r7, lr}
 8021dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8021dec:	4802      	ldr	r0, [pc, #8]	; (8021df8 <LTDC_IRQHandler+0x10>)
 8021dee:	f004 fbb1 	bl	8026554 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8021df2:	bf00      	nop
 8021df4:	bd80      	pop	{r7, pc}
 8021df6:	bf00      	nop
 8021df8:	20000198 	.word	0x20000198

08021dfc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8021dfc:	b580      	push	{r7, lr}
 8021dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8021e00:	4802      	ldr	r0, [pc, #8]	; (8021e0c <DMA2D_IRQHandler+0x10>)
 8021e02:	f001 ffe4 	bl	8023dce <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8021e06:	bf00      	nop
 8021e08:	bd80      	pop	{r7, pc}
 8021e0a:	bf00      	nop
 8021e0c:	20000104 	.word	0x20000104

08021e10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8021e10:	b480      	push	{r7}
 8021e12:	b083      	sub	sp, #12
 8021e14:	af00      	add	r7, sp, #0
 8021e16:	4603      	mov	r3, r0
 8021e18:	80fb      	strh	r3, [r7, #6]
//
//	case B1_Pin: //Blue Button Interrupt
//		ota_update_request = true;
//
//	}
}
 8021e1a:	bf00      	nop
 8021e1c:	370c      	adds	r7, #12
 8021e1e:	46bd      	mov	sp, r7
 8021e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e24:	4770      	bx	lr

08021e26 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8021e26:	b580      	push	{r7, lr}
 8021e28:	b086      	sub	sp, #24
 8021e2a:	af00      	add	r7, sp, #0
 8021e2c:	60f8      	str	r0, [r7, #12]
 8021e2e:	60b9      	str	r1, [r7, #8]
 8021e30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021e32:	2300      	movs	r3, #0
 8021e34:	617b      	str	r3, [r7, #20]
 8021e36:	e00a      	b.n	8021e4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8021e38:	f3af 8000 	nop.w
 8021e3c:	4601      	mov	r1, r0
 8021e3e:	68bb      	ldr	r3, [r7, #8]
 8021e40:	1c5a      	adds	r2, r3, #1
 8021e42:	60ba      	str	r2, [r7, #8]
 8021e44:	b2ca      	uxtb	r2, r1
 8021e46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021e48:	697b      	ldr	r3, [r7, #20]
 8021e4a:	3301      	adds	r3, #1
 8021e4c:	617b      	str	r3, [r7, #20]
 8021e4e:	697a      	ldr	r2, [r7, #20]
 8021e50:	687b      	ldr	r3, [r7, #4]
 8021e52:	429a      	cmp	r2, r3
 8021e54:	dbf0      	blt.n	8021e38 <_read+0x12>
  }

  return len;
 8021e56:	687b      	ldr	r3, [r7, #4]
}
 8021e58:	4618      	mov	r0, r3
 8021e5a:	3718      	adds	r7, #24
 8021e5c:	46bd      	mov	sp, r7
 8021e5e:	bd80      	pop	{r7, pc}

08021e60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8021e60:	b580      	push	{r7, lr}
 8021e62:	b086      	sub	sp, #24
 8021e64:	af00      	add	r7, sp, #0
 8021e66:	60f8      	str	r0, [r7, #12]
 8021e68:	60b9      	str	r1, [r7, #8]
 8021e6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021e6c:	2300      	movs	r3, #0
 8021e6e:	617b      	str	r3, [r7, #20]
 8021e70:	e009      	b.n	8021e86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8021e72:	68bb      	ldr	r3, [r7, #8]
 8021e74:	1c5a      	adds	r2, r3, #1
 8021e76:	60ba      	str	r2, [r7, #8]
 8021e78:	781b      	ldrb	r3, [r3, #0]
 8021e7a:	4618      	mov	r0, r3
 8021e7c:	f7fe ffdc 	bl	8020e38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021e80:	697b      	ldr	r3, [r7, #20]
 8021e82:	3301      	adds	r3, #1
 8021e84:	617b      	str	r3, [r7, #20]
 8021e86:	697a      	ldr	r2, [r7, #20]
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	429a      	cmp	r2, r3
 8021e8c:	dbf1      	blt.n	8021e72 <_write+0x12>
  }
  return len;
 8021e8e:	687b      	ldr	r3, [r7, #4]
}
 8021e90:	4618      	mov	r0, r3
 8021e92:	3718      	adds	r7, #24
 8021e94:	46bd      	mov	sp, r7
 8021e96:	bd80      	pop	{r7, pc}

08021e98 <_close>:

int _close(int file)
{
 8021e98:	b480      	push	{r7}
 8021e9a:	b083      	sub	sp, #12
 8021e9c:	af00      	add	r7, sp, #0
 8021e9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8021ea0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021ea4:	4618      	mov	r0, r3
 8021ea6:	370c      	adds	r7, #12
 8021ea8:	46bd      	mov	sp, r7
 8021eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021eae:	4770      	bx	lr

08021eb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8021eb0:	b480      	push	{r7}
 8021eb2:	b083      	sub	sp, #12
 8021eb4:	af00      	add	r7, sp, #0
 8021eb6:	6078      	str	r0, [r7, #4]
 8021eb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8021eba:	683b      	ldr	r3, [r7, #0]
 8021ebc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8021ec0:	605a      	str	r2, [r3, #4]
  return 0;
 8021ec2:	2300      	movs	r3, #0
}
 8021ec4:	4618      	mov	r0, r3
 8021ec6:	370c      	adds	r7, #12
 8021ec8:	46bd      	mov	sp, r7
 8021eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ece:	4770      	bx	lr

08021ed0 <_isatty>:

int _isatty(int file)
{
 8021ed0:	b480      	push	{r7}
 8021ed2:	b083      	sub	sp, #12
 8021ed4:	af00      	add	r7, sp, #0
 8021ed6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8021ed8:	2301      	movs	r3, #1
}
 8021eda:	4618      	mov	r0, r3
 8021edc:	370c      	adds	r7, #12
 8021ede:	46bd      	mov	sp, r7
 8021ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ee4:	4770      	bx	lr

08021ee6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8021ee6:	b480      	push	{r7}
 8021ee8:	b085      	sub	sp, #20
 8021eea:	af00      	add	r7, sp, #0
 8021eec:	60f8      	str	r0, [r7, #12]
 8021eee:	60b9      	str	r1, [r7, #8]
 8021ef0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8021ef2:	2300      	movs	r3, #0
}
 8021ef4:	4618      	mov	r0, r3
 8021ef6:	3714      	adds	r7, #20
 8021ef8:	46bd      	mov	sp, r7
 8021efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021efe:	4770      	bx	lr

08021f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8021f00:	b580      	push	{r7, lr}
 8021f02:	b086      	sub	sp, #24
 8021f04:	af00      	add	r7, sp, #0
 8021f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8021f08:	4a14      	ldr	r2, [pc, #80]	; (8021f5c <_sbrk+0x5c>)
 8021f0a:	4b15      	ldr	r3, [pc, #84]	; (8021f60 <_sbrk+0x60>)
 8021f0c:	1ad3      	subs	r3, r2, r3
 8021f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8021f10:	697b      	ldr	r3, [r7, #20]
 8021f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8021f14:	4b13      	ldr	r3, [pc, #76]	; (8021f64 <_sbrk+0x64>)
 8021f16:	681b      	ldr	r3, [r3, #0]
 8021f18:	2b00      	cmp	r3, #0
 8021f1a:	d102      	bne.n	8021f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8021f1c:	4b11      	ldr	r3, [pc, #68]	; (8021f64 <_sbrk+0x64>)
 8021f1e:	4a12      	ldr	r2, [pc, #72]	; (8021f68 <_sbrk+0x68>)
 8021f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8021f22:	4b10      	ldr	r3, [pc, #64]	; (8021f64 <_sbrk+0x64>)
 8021f24:	681a      	ldr	r2, [r3, #0]
 8021f26:	687b      	ldr	r3, [r7, #4]
 8021f28:	4413      	add	r3, r2
 8021f2a:	693a      	ldr	r2, [r7, #16]
 8021f2c:	429a      	cmp	r2, r3
 8021f2e:	d207      	bcs.n	8021f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8021f30:	f00b fc40 	bl	802d7b4 <__errno>
 8021f34:	4603      	mov	r3, r0
 8021f36:	220c      	movs	r2, #12
 8021f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8021f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8021f3e:	e009      	b.n	8021f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8021f40:	4b08      	ldr	r3, [pc, #32]	; (8021f64 <_sbrk+0x64>)
 8021f42:	681b      	ldr	r3, [r3, #0]
 8021f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8021f46:	4b07      	ldr	r3, [pc, #28]	; (8021f64 <_sbrk+0x64>)
 8021f48:	681a      	ldr	r2, [r3, #0]
 8021f4a:	687b      	ldr	r3, [r7, #4]
 8021f4c:	4413      	add	r3, r2
 8021f4e:	4a05      	ldr	r2, [pc, #20]	; (8021f64 <_sbrk+0x64>)
 8021f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8021f52:	68fb      	ldr	r3, [r7, #12]
}
 8021f54:	4618      	mov	r0, r3
 8021f56:	3718      	adds	r7, #24
 8021f58:	46bd      	mov	sp, r7
 8021f5a:	bd80      	pop	{r7, pc}
 8021f5c:	20030000 	.word	0x20030000
 8021f60:	00000400 	.word	0x00000400
 8021f64:	20000894 	.word	0x20000894
 8021f68:	200011e0 	.word	0x200011e0

08021f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8021f6c:	b480      	push	{r7}
 8021f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8021f70:	4b07      	ldr	r3, [pc, #28]	; (8021f90 <SystemInit+0x24>)
 8021f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021f76:	4a06      	ldr	r2, [pc, #24]	; (8021f90 <SystemInit+0x24>)
 8021f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8021f80:	4b03      	ldr	r3, [pc, #12]	; (8021f90 <SystemInit+0x24>)
 8021f82:	4a04      	ldr	r2, [pc, #16]	; (8021f94 <SystemInit+0x28>)
 8021f84:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8021f86:	bf00      	nop
 8021f88:	46bd      	mov	sp, r7
 8021f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f8e:	4770      	bx	lr
 8021f90:	e000ed00 	.word	0xe000ed00
 8021f94:	08020000 	.word	0x08020000

08021f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8021f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021fd0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8021f9c:	480d      	ldr	r0, [pc, #52]	; (8021fd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8021f9e:	490e      	ldr	r1, [pc, #56]	; (8021fd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8021fa0:	4a0e      	ldr	r2, [pc, #56]	; (8021fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8021fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8021fa4:	e002      	b.n	8021fac <LoopCopyDataInit>

08021fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8021fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8021fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8021faa:	3304      	adds	r3, #4

08021fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8021fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8021fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8021fb0:	d3f9      	bcc.n	8021fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8021fb2:	4a0b      	ldr	r2, [pc, #44]	; (8021fe0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8021fb4:	4c0b      	ldr	r4, [pc, #44]	; (8021fe4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8021fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8021fb8:	e001      	b.n	8021fbe <LoopFillZerobss>

08021fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8021fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8021fbc:	3204      	adds	r2, #4

08021fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8021fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8021fc0:	d3fb      	bcc.n	8021fba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8021fc2:	f7ff ffd3 	bl	8021f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8021fc6:	f00b fbfb 	bl	802d7c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8021fca:	f7fe fae3 	bl	8020594 <main>
  bx  lr    
 8021fce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8021fd0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8021fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8021fd8:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8021fdc:	080311ec 	.word	0x080311ec
  ldr r2, =_sbss
 8021fe0:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8021fe4:	200011e0 	.word	0x200011e0

08021fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8021fe8:	e7fe      	b.n	8021fe8 <ADC_IRQHandler>

08021fea <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8021fea:	b580      	push	{r7, lr}
 8021fec:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8021fee:	f000 fa5d 	bl	80224ac <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8021ff2:	20ca      	movs	r0, #202	; 0xca
 8021ff4:	f000 f95d 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8021ff8:	20c3      	movs	r0, #195	; 0xc3
 8021ffa:	f000 f967 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8021ffe:	2008      	movs	r0, #8
 8022000:	f000 f964 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8022004:	2050      	movs	r0, #80	; 0x50
 8022006:	f000 f961 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 802200a:	20cf      	movs	r0, #207	; 0xcf
 802200c:	f000 f951 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8022010:	2000      	movs	r0, #0
 8022012:	f000 f95b 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8022016:	20c1      	movs	r0, #193	; 0xc1
 8022018:	f000 f958 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 802201c:	2030      	movs	r0, #48	; 0x30
 802201e:	f000 f955 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8022022:	20ed      	movs	r0, #237	; 0xed
 8022024:	f000 f945 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8022028:	2064      	movs	r0, #100	; 0x64
 802202a:	f000 f94f 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 802202e:	2003      	movs	r0, #3
 8022030:	f000 f94c 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8022034:	2012      	movs	r0, #18
 8022036:	f000 f949 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 802203a:	2081      	movs	r0, #129	; 0x81
 802203c:	f000 f946 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8022040:	20e8      	movs	r0, #232	; 0xe8
 8022042:	f000 f936 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8022046:	2085      	movs	r0, #133	; 0x85
 8022048:	f000 f940 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 802204c:	2000      	movs	r0, #0
 802204e:	f000 f93d 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8022052:	2078      	movs	r0, #120	; 0x78
 8022054:	f000 f93a 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8022058:	20cb      	movs	r0, #203	; 0xcb
 802205a:	f000 f92a 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 802205e:	2039      	movs	r0, #57	; 0x39
 8022060:	f000 f934 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8022064:	202c      	movs	r0, #44	; 0x2c
 8022066:	f000 f931 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 802206a:	2000      	movs	r0, #0
 802206c:	f000 f92e 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8022070:	2034      	movs	r0, #52	; 0x34
 8022072:	f000 f92b 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8022076:	2002      	movs	r0, #2
 8022078:	f000 f928 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 802207c:	20f7      	movs	r0, #247	; 0xf7
 802207e:	f000 f918 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8022082:	2020      	movs	r0, #32
 8022084:	f000 f922 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8022088:	20ea      	movs	r0, #234	; 0xea
 802208a:	f000 f912 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 802208e:	2000      	movs	r0, #0
 8022090:	f000 f91c 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8022094:	2000      	movs	r0, #0
 8022096:	f000 f919 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 802209a:	20b1      	movs	r0, #177	; 0xb1
 802209c:	f000 f909 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80220a0:	2000      	movs	r0, #0
 80220a2:	f000 f913 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80220a6:	201b      	movs	r0, #27
 80220a8:	f000 f910 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80220ac:	20b6      	movs	r0, #182	; 0xb6
 80220ae:	f000 f900 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80220b2:	200a      	movs	r0, #10
 80220b4:	f000 f90a 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80220b8:	20a2      	movs	r0, #162	; 0xa2
 80220ba:	f000 f907 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80220be:	20c0      	movs	r0, #192	; 0xc0
 80220c0:	f000 f8f7 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80220c4:	2010      	movs	r0, #16
 80220c6:	f000 f901 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80220ca:	20c1      	movs	r0, #193	; 0xc1
 80220cc:	f000 f8f1 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80220d0:	2010      	movs	r0, #16
 80220d2:	f000 f8fb 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80220d6:	20c5      	movs	r0, #197	; 0xc5
 80220d8:	f000 f8eb 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80220dc:	2045      	movs	r0, #69	; 0x45
 80220de:	f000 f8f5 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80220e2:	2015      	movs	r0, #21
 80220e4:	f000 f8f2 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80220e8:	20c7      	movs	r0, #199	; 0xc7
 80220ea:	f000 f8e2 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80220ee:	2090      	movs	r0, #144	; 0x90
 80220f0:	f000 f8ec 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80220f4:	2036      	movs	r0, #54	; 0x36
 80220f6:	f000 f8dc 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80220fa:	20c8      	movs	r0, #200	; 0xc8
 80220fc:	f000 f8e6 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8022100:	20f2      	movs	r0, #242	; 0xf2
 8022102:	f000 f8d6 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8022106:	2000      	movs	r0, #0
 8022108:	f000 f8e0 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 802210c:	20b0      	movs	r0, #176	; 0xb0
 802210e:	f000 f8d0 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8022112:	20c2      	movs	r0, #194	; 0xc2
 8022114:	f000 f8da 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8022118:	20b6      	movs	r0, #182	; 0xb6
 802211a:	f000 f8ca 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 802211e:	200a      	movs	r0, #10
 8022120:	f000 f8d4 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8022124:	20a7      	movs	r0, #167	; 0xa7
 8022126:	f000 f8d1 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 802212a:	2027      	movs	r0, #39	; 0x27
 802212c:	f000 f8ce 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8022130:	2004      	movs	r0, #4
 8022132:	f000 f8cb 	bl	80222cc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8022136:	202a      	movs	r0, #42	; 0x2a
 8022138:	f000 f8bb 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 802213c:	2000      	movs	r0, #0
 802213e:	f000 f8c5 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8022142:	2000      	movs	r0, #0
 8022144:	f000 f8c2 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8022148:	2000      	movs	r0, #0
 802214a:	f000 f8bf 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 802214e:	20ef      	movs	r0, #239	; 0xef
 8022150:	f000 f8bc 	bl	80222cc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8022154:	202b      	movs	r0, #43	; 0x2b
 8022156:	f000 f8ac 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 802215a:	2000      	movs	r0, #0
 802215c:	f000 f8b6 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8022160:	2000      	movs	r0, #0
 8022162:	f000 f8b3 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8022166:	2001      	movs	r0, #1
 8022168:	f000 f8b0 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 802216c:	203f      	movs	r0, #63	; 0x3f
 802216e:	f000 f8ad 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8022172:	20f6      	movs	r0, #246	; 0xf6
 8022174:	f000 f89d 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8022178:	2001      	movs	r0, #1
 802217a:	f000 f8a7 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 802217e:	2000      	movs	r0, #0
 8022180:	f000 f8a4 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8022184:	2006      	movs	r0, #6
 8022186:	f000 f8a1 	bl	80222cc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 802218a:	202c      	movs	r0, #44	; 0x2c
 802218c:	f000 f891 	bl	80222b2 <ili9341_WriteReg>
  LCD_Delay(200);
 8022190:	20c8      	movs	r0, #200	; 0xc8
 8022192:	f000 fa79 	bl	8022688 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8022196:	2026      	movs	r0, #38	; 0x26
 8022198:	f000 f88b 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 802219c:	2001      	movs	r0, #1
 802219e:	f000 f895 	bl	80222cc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80221a2:	20e0      	movs	r0, #224	; 0xe0
 80221a4:	f000 f885 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80221a8:	200f      	movs	r0, #15
 80221aa:	f000 f88f 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80221ae:	2029      	movs	r0, #41	; 0x29
 80221b0:	f000 f88c 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80221b4:	2024      	movs	r0, #36	; 0x24
 80221b6:	f000 f889 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80221ba:	200c      	movs	r0, #12
 80221bc:	f000 f886 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80221c0:	200e      	movs	r0, #14
 80221c2:	f000 f883 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80221c6:	2009      	movs	r0, #9
 80221c8:	f000 f880 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80221cc:	204e      	movs	r0, #78	; 0x4e
 80221ce:	f000 f87d 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80221d2:	2078      	movs	r0, #120	; 0x78
 80221d4:	f000 f87a 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80221d8:	203c      	movs	r0, #60	; 0x3c
 80221da:	f000 f877 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80221de:	2009      	movs	r0, #9
 80221e0:	f000 f874 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80221e4:	2013      	movs	r0, #19
 80221e6:	f000 f871 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80221ea:	2005      	movs	r0, #5
 80221ec:	f000 f86e 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80221f0:	2017      	movs	r0, #23
 80221f2:	f000 f86b 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80221f6:	2011      	movs	r0, #17
 80221f8:	f000 f868 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80221fc:	2000      	movs	r0, #0
 80221fe:	f000 f865 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8022202:	20e1      	movs	r0, #225	; 0xe1
 8022204:	f000 f855 	bl	80222b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8022208:	2000      	movs	r0, #0
 802220a:	f000 f85f 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 802220e:	2016      	movs	r0, #22
 8022210:	f000 f85c 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8022214:	201b      	movs	r0, #27
 8022216:	f000 f859 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 802221a:	2004      	movs	r0, #4
 802221c:	f000 f856 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8022220:	2011      	movs	r0, #17
 8022222:	f000 f853 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8022226:	2007      	movs	r0, #7
 8022228:	f000 f850 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 802222c:	2031      	movs	r0, #49	; 0x31
 802222e:	f000 f84d 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8022232:	2033      	movs	r0, #51	; 0x33
 8022234:	f000 f84a 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8022238:	2042      	movs	r0, #66	; 0x42
 802223a:	f000 f847 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 802223e:	2005      	movs	r0, #5
 8022240:	f000 f844 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8022244:	200c      	movs	r0, #12
 8022246:	f000 f841 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 802224a:	200a      	movs	r0, #10
 802224c:	f000 f83e 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8022250:	2028      	movs	r0, #40	; 0x28
 8022252:	f000 f83b 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8022256:	202f      	movs	r0, #47	; 0x2f
 8022258:	f000 f838 	bl	80222cc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 802225c:	200f      	movs	r0, #15
 802225e:	f000 f835 	bl	80222cc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8022262:	2011      	movs	r0, #17
 8022264:	f000 f825 	bl	80222b2 <ili9341_WriteReg>
  LCD_Delay(200);
 8022268:	20c8      	movs	r0, #200	; 0xc8
 802226a:	f000 fa0d 	bl	8022688 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 802226e:	2029      	movs	r0, #41	; 0x29
 8022270:	f000 f81f 	bl	80222b2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8022274:	202c      	movs	r0, #44	; 0x2c
 8022276:	f000 f81c 	bl	80222b2 <ili9341_WriteReg>
}
 802227a:	bf00      	nop
 802227c:	bd80      	pop	{r7, pc}

0802227e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 802227e:	b580      	push	{r7, lr}
 8022280:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8022282:	f000 f913 	bl	80224ac <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8022286:	2103      	movs	r1, #3
 8022288:	20d3      	movs	r0, #211	; 0xd3
 802228a:	f000 f82c 	bl	80222e6 <ili9341_ReadData>
 802228e:	4603      	mov	r3, r0
 8022290:	b29b      	uxth	r3, r3
}
 8022292:	4618      	mov	r0, r3
 8022294:	bd80      	pop	{r7, pc}

08022296 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8022296:	b580      	push	{r7, lr}
 8022298:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 802229a:	2029      	movs	r0, #41	; 0x29
 802229c:	f000 f809 	bl	80222b2 <ili9341_WriteReg>
}
 80222a0:	bf00      	nop
 80222a2:	bd80      	pop	{r7, pc}

080222a4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80222a4:	b580      	push	{r7, lr}
 80222a6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80222a8:	2028      	movs	r0, #40	; 0x28
 80222aa:	f000 f802 	bl	80222b2 <ili9341_WriteReg>
}
 80222ae:	bf00      	nop
 80222b0:	bd80      	pop	{r7, pc}

080222b2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80222b2:	b580      	push	{r7, lr}
 80222b4:	b082      	sub	sp, #8
 80222b6:	af00      	add	r7, sp, #0
 80222b8:	4603      	mov	r3, r0
 80222ba:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80222bc:	79fb      	ldrb	r3, [r7, #7]
 80222be:	4618      	mov	r0, r3
 80222c0:	f000 f98e 	bl	80225e0 <LCD_IO_WriteReg>
}
 80222c4:	bf00      	nop
 80222c6:	3708      	adds	r7, #8
 80222c8:	46bd      	mov	sp, r7
 80222ca:	bd80      	pop	{r7, pc}

080222cc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80222cc:	b580      	push	{r7, lr}
 80222ce:	b082      	sub	sp, #8
 80222d0:	af00      	add	r7, sp, #0
 80222d2:	4603      	mov	r3, r0
 80222d4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80222d6:	88fb      	ldrh	r3, [r7, #6]
 80222d8:	4618      	mov	r0, r3
 80222da:	f000 f95f 	bl	802259c <LCD_IO_WriteData>
}
 80222de:	bf00      	nop
 80222e0:	3708      	adds	r7, #8
 80222e2:	46bd      	mov	sp, r7
 80222e4:	bd80      	pop	{r7, pc}

080222e6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80222e6:	b580      	push	{r7, lr}
 80222e8:	b082      	sub	sp, #8
 80222ea:	af00      	add	r7, sp, #0
 80222ec:	4603      	mov	r3, r0
 80222ee:	460a      	mov	r2, r1
 80222f0:	80fb      	strh	r3, [r7, #6]
 80222f2:	4613      	mov	r3, r2
 80222f4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80222f6:	797a      	ldrb	r2, [r7, #5]
 80222f8:	88fb      	ldrh	r3, [r7, #6]
 80222fa:	4611      	mov	r1, r2
 80222fc:	4618      	mov	r0, r3
 80222fe:	f000 f991 	bl	8022624 <LCD_IO_ReadData>
 8022302:	4603      	mov	r3, r0
}
 8022304:	4618      	mov	r0, r3
 8022306:	3708      	adds	r7, #8
 8022308:	46bd      	mov	sp, r7
 802230a:	bd80      	pop	{r7, pc}

0802230c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 802230c:	b480      	push	{r7}
 802230e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8022310:	23f0      	movs	r3, #240	; 0xf0
}
 8022312:	4618      	mov	r0, r3
 8022314:	46bd      	mov	sp, r7
 8022316:	f85d 7b04 	ldr.w	r7, [sp], #4
 802231a:	4770      	bx	lr

0802231c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 802231c:	b480      	push	{r7}
 802231e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8022320:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8022324:	4618      	mov	r0, r3
 8022326:	46bd      	mov	sp, r7
 8022328:	f85d 7b04 	ldr.w	r7, [sp], #4
 802232c:	4770      	bx	lr
	...

08022330 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8022330:	b580      	push	{r7, lr}
 8022332:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8022334:	4819      	ldr	r0, [pc, #100]	; (802239c <SPIx_Init+0x6c>)
 8022336:	f006 f808 	bl	802834a <HAL_SPI_GetState>
 802233a:	4603      	mov	r3, r0
 802233c:	2b00      	cmp	r3, #0
 802233e:	d12b      	bne.n	8022398 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8022340:	4b16      	ldr	r3, [pc, #88]	; (802239c <SPIx_Init+0x6c>)
 8022342:	4a17      	ldr	r2, [pc, #92]	; (80223a0 <SPIx_Init+0x70>)
 8022344:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8022346:	4b15      	ldr	r3, [pc, #84]	; (802239c <SPIx_Init+0x6c>)
 8022348:	2218      	movs	r2, #24
 802234a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 802234c:	4b13      	ldr	r3, [pc, #76]	; (802239c <SPIx_Init+0x6c>)
 802234e:	2200      	movs	r2, #0
 8022350:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8022352:	4b12      	ldr	r3, [pc, #72]	; (802239c <SPIx_Init+0x6c>)
 8022354:	2200      	movs	r2, #0
 8022356:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8022358:	4b10      	ldr	r3, [pc, #64]	; (802239c <SPIx_Init+0x6c>)
 802235a:	2200      	movs	r2, #0
 802235c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 802235e:	4b0f      	ldr	r3, [pc, #60]	; (802239c <SPIx_Init+0x6c>)
 8022360:	2200      	movs	r2, #0
 8022362:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8022364:	4b0d      	ldr	r3, [pc, #52]	; (802239c <SPIx_Init+0x6c>)
 8022366:	2207      	movs	r2, #7
 8022368:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 802236a:	4b0c      	ldr	r3, [pc, #48]	; (802239c <SPIx_Init+0x6c>)
 802236c:	2200      	movs	r2, #0
 802236e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8022370:	4b0a      	ldr	r3, [pc, #40]	; (802239c <SPIx_Init+0x6c>)
 8022372:	2200      	movs	r2, #0
 8022374:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8022376:	4b09      	ldr	r3, [pc, #36]	; (802239c <SPIx_Init+0x6c>)
 8022378:	f44f 7200 	mov.w	r2, #512	; 0x200
 802237c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 802237e:	4b07      	ldr	r3, [pc, #28]	; (802239c <SPIx_Init+0x6c>)
 8022380:	2200      	movs	r2, #0
 8022382:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8022384:	4b05      	ldr	r3, [pc, #20]	; (802239c <SPIx_Init+0x6c>)
 8022386:	f44f 7282 	mov.w	r2, #260	; 0x104
 802238a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 802238c:	4803      	ldr	r0, [pc, #12]	; (802239c <SPIx_Init+0x6c>)
 802238e:	f000 f853 	bl	8022438 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8022392:	4802      	ldr	r0, [pc, #8]	; (802239c <SPIx_Init+0x6c>)
 8022394:	f005 fb39 	bl	8027a0a <HAL_SPI_Init>
  } 
}
 8022398:	bf00      	nop
 802239a:	bd80      	pop	{r7, pc}
 802239c:	20000898 	.word	0x20000898
 80223a0:	40015000 	.word	0x40015000

080223a4 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80223a4:	b580      	push	{r7, lr}
 80223a6:	b084      	sub	sp, #16
 80223a8:	af00      	add	r7, sp, #0
 80223aa:	4603      	mov	r3, r0
 80223ac:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80223ae:	2300      	movs	r3, #0
 80223b0:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80223b2:	79fb      	ldrb	r3, [r7, #7]
 80223b4:	b29a      	uxth	r2, r3
 80223b6:	4b09      	ldr	r3, [pc, #36]	; (80223dc <SPIx_Read+0x38>)
 80223b8:	681b      	ldr	r3, [r3, #0]
 80223ba:	f107 0108 	add.w	r1, r7, #8
 80223be:	4808      	ldr	r0, [pc, #32]	; (80223e0 <SPIx_Read+0x3c>)
 80223c0:	f005 fd10 	bl	8027de4 <HAL_SPI_Receive>
 80223c4:	4603      	mov	r3, r0
 80223c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80223c8:	7bfb      	ldrb	r3, [r7, #15]
 80223ca:	2b00      	cmp	r3, #0
 80223cc:	d001      	beq.n	80223d2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80223ce:	f000 f827 	bl	8022420 <SPIx_Error>
  }
  
  return readvalue;
 80223d2:	68bb      	ldr	r3, [r7, #8]
}
 80223d4:	4618      	mov	r0, r3
 80223d6:	3710      	adds	r7, #16
 80223d8:	46bd      	mov	sp, r7
 80223da:	bd80      	pop	{r7, pc}
 80223dc:	2000003c 	.word	0x2000003c
 80223e0:	20000898 	.word	0x20000898

080223e4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80223e4:	b580      	push	{r7, lr}
 80223e6:	b084      	sub	sp, #16
 80223e8:	af00      	add	r7, sp, #0
 80223ea:	4603      	mov	r3, r0
 80223ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80223ee:	2300      	movs	r3, #0
 80223f0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80223f2:	4b09      	ldr	r3, [pc, #36]	; (8022418 <SPIx_Write+0x34>)
 80223f4:	681b      	ldr	r3, [r3, #0]
 80223f6:	1db9      	adds	r1, r7, #6
 80223f8:	2201      	movs	r2, #1
 80223fa:	4808      	ldr	r0, [pc, #32]	; (802241c <SPIx_Write+0x38>)
 80223fc:	f005 fbb6 	bl	8027b6c <HAL_SPI_Transmit>
 8022400:	4603      	mov	r3, r0
 8022402:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8022404:	7bfb      	ldrb	r3, [r7, #15]
 8022406:	2b00      	cmp	r3, #0
 8022408:	d001      	beq.n	802240e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 802240a:	f000 f809 	bl	8022420 <SPIx_Error>
  }
}
 802240e:	bf00      	nop
 8022410:	3710      	adds	r7, #16
 8022412:	46bd      	mov	sp, r7
 8022414:	bd80      	pop	{r7, pc}
 8022416:	bf00      	nop
 8022418:	2000003c 	.word	0x2000003c
 802241c:	20000898 	.word	0x20000898

08022420 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8022420:	b580      	push	{r7, lr}
 8022422:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8022424:	4803      	ldr	r0, [pc, #12]	; (8022434 <SPIx_Error+0x14>)
 8022426:	f005 fb79 	bl	8027b1c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 802242a:	f7ff ff81 	bl	8022330 <SPIx_Init>
}
 802242e:	bf00      	nop
 8022430:	bd80      	pop	{r7, pc}
 8022432:	bf00      	nop
 8022434:	20000898 	.word	0x20000898

08022438 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8022438:	b580      	push	{r7, lr}
 802243a:	b08a      	sub	sp, #40	; 0x28
 802243c:	af00      	add	r7, sp, #0
 802243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8022440:	2300      	movs	r3, #0
 8022442:	613b      	str	r3, [r7, #16]
 8022444:	4b17      	ldr	r3, [pc, #92]	; (80224a4 <SPIx_MspInit+0x6c>)
 8022446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022448:	4a16      	ldr	r2, [pc, #88]	; (80224a4 <SPIx_MspInit+0x6c>)
 802244a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802244e:	6453      	str	r3, [r2, #68]	; 0x44
 8022450:	4b14      	ldr	r3, [pc, #80]	; (80224a4 <SPIx_MspInit+0x6c>)
 8022452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8022458:	613b      	str	r3, [r7, #16]
 802245a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 802245c:	2300      	movs	r3, #0
 802245e:	60fb      	str	r3, [r7, #12]
 8022460:	4b10      	ldr	r3, [pc, #64]	; (80224a4 <SPIx_MspInit+0x6c>)
 8022462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022464:	4a0f      	ldr	r2, [pc, #60]	; (80224a4 <SPIx_MspInit+0x6c>)
 8022466:	f043 0320 	orr.w	r3, r3, #32
 802246a:	6313      	str	r3, [r2, #48]	; 0x30
 802246c:	4b0d      	ldr	r3, [pc, #52]	; (80224a4 <SPIx_MspInit+0x6c>)
 802246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022470:	f003 0320 	and.w	r3, r3, #32
 8022474:	60fb      	str	r3, [r7, #12]
 8022476:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8022478:	f44f 7360 	mov.w	r3, #896	; 0x380
 802247c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 802247e:	2302      	movs	r3, #2
 8022480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8022482:	2302      	movs	r3, #2
 8022484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8022486:	2301      	movs	r3, #1
 8022488:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 802248a:	2305      	movs	r3, #5
 802248c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 802248e:	f107 0314 	add.w	r3, r7, #20
 8022492:	4619      	mov	r1, r3
 8022494:	4804      	ldr	r0, [pc, #16]	; (80224a8 <SPIx_MspInit+0x70>)
 8022496:	f001 fed9 	bl	802424c <HAL_GPIO_Init>
}
 802249a:	bf00      	nop
 802249c:	3728      	adds	r7, #40	; 0x28
 802249e:	46bd      	mov	sp, r7
 80224a0:	bd80      	pop	{r7, pc}
 80224a2:	bf00      	nop
 80224a4:	40023800 	.word	0x40023800
 80224a8:	40021400 	.word	0x40021400

080224ac <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80224ac:	b580      	push	{r7, lr}
 80224ae:	b088      	sub	sp, #32
 80224b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80224b2:	4b36      	ldr	r3, [pc, #216]	; (802258c <LCD_IO_Init+0xe0>)
 80224b4:	781b      	ldrb	r3, [r3, #0]
 80224b6:	2b00      	cmp	r3, #0
 80224b8:	d164      	bne.n	8022584 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80224ba:	4b34      	ldr	r3, [pc, #208]	; (802258c <LCD_IO_Init+0xe0>)
 80224bc:	2201      	movs	r2, #1
 80224be:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80224c0:	2300      	movs	r3, #0
 80224c2:	60bb      	str	r3, [r7, #8]
 80224c4:	4b32      	ldr	r3, [pc, #200]	; (8022590 <LCD_IO_Init+0xe4>)
 80224c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224c8:	4a31      	ldr	r2, [pc, #196]	; (8022590 <LCD_IO_Init+0xe4>)
 80224ca:	f043 0308 	orr.w	r3, r3, #8
 80224ce:	6313      	str	r3, [r2, #48]	; 0x30
 80224d0:	4b2f      	ldr	r3, [pc, #188]	; (8022590 <LCD_IO_Init+0xe4>)
 80224d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224d4:	f003 0308 	and.w	r3, r3, #8
 80224d8:	60bb      	str	r3, [r7, #8]
 80224da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80224dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80224e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80224e2:	2301      	movs	r3, #1
 80224e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80224e6:	2300      	movs	r3, #0
 80224e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80224ea:	2302      	movs	r3, #2
 80224ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80224ee:	f107 030c 	add.w	r3, r7, #12
 80224f2:	4619      	mov	r1, r3
 80224f4:	4827      	ldr	r0, [pc, #156]	; (8022594 <LCD_IO_Init+0xe8>)
 80224f6:	f001 fea9 	bl	802424c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80224fa:	2300      	movs	r3, #0
 80224fc:	607b      	str	r3, [r7, #4]
 80224fe:	4b24      	ldr	r3, [pc, #144]	; (8022590 <LCD_IO_Init+0xe4>)
 8022500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022502:	4a23      	ldr	r2, [pc, #140]	; (8022590 <LCD_IO_Init+0xe4>)
 8022504:	f043 0308 	orr.w	r3, r3, #8
 8022508:	6313      	str	r3, [r2, #48]	; 0x30
 802250a:	4b21      	ldr	r3, [pc, #132]	; (8022590 <LCD_IO_Init+0xe4>)
 802250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802250e:	f003 0308 	and.w	r3, r3, #8
 8022512:	607b      	str	r3, [r7, #4]
 8022514:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8022516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802251a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 802251c:	2301      	movs	r3, #1
 802251e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8022520:	2300      	movs	r3, #0
 8022522:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8022524:	2302      	movs	r3, #2
 8022526:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8022528:	f107 030c 	add.w	r3, r7, #12
 802252c:	4619      	mov	r1, r3
 802252e:	4819      	ldr	r0, [pc, #100]	; (8022594 <LCD_IO_Init+0xe8>)
 8022530:	f001 fe8c 	bl	802424c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8022534:	2300      	movs	r3, #0
 8022536:	603b      	str	r3, [r7, #0]
 8022538:	4b15      	ldr	r3, [pc, #84]	; (8022590 <LCD_IO_Init+0xe4>)
 802253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802253c:	4a14      	ldr	r2, [pc, #80]	; (8022590 <LCD_IO_Init+0xe4>)
 802253e:	f043 0304 	orr.w	r3, r3, #4
 8022542:	6313      	str	r3, [r2, #48]	; 0x30
 8022544:	4b12      	ldr	r3, [pc, #72]	; (8022590 <LCD_IO_Init+0xe4>)
 8022546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022548:	f003 0304 	and.w	r3, r3, #4
 802254c:	603b      	str	r3, [r7, #0]
 802254e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8022550:	2304      	movs	r3, #4
 8022552:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8022554:	2301      	movs	r3, #1
 8022556:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8022558:	2300      	movs	r3, #0
 802255a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 802255c:	2302      	movs	r3, #2
 802255e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8022560:	f107 030c 	add.w	r3, r7, #12
 8022564:	4619      	mov	r1, r3
 8022566:	480c      	ldr	r0, [pc, #48]	; (8022598 <LCD_IO_Init+0xec>)
 8022568:	f001 fe70 	bl	802424c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 802256c:	2200      	movs	r2, #0
 802256e:	2104      	movs	r1, #4
 8022570:	4809      	ldr	r0, [pc, #36]	; (8022598 <LCD_IO_Init+0xec>)
 8022572:	f002 f923 	bl	80247bc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8022576:	2201      	movs	r2, #1
 8022578:	2104      	movs	r1, #4
 802257a:	4807      	ldr	r0, [pc, #28]	; (8022598 <LCD_IO_Init+0xec>)
 802257c:	f002 f91e 	bl	80247bc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8022580:	f7ff fed6 	bl	8022330 <SPIx_Init>
  }
}
 8022584:	bf00      	nop
 8022586:	3720      	adds	r7, #32
 8022588:	46bd      	mov	sp, r7
 802258a:	bd80      	pop	{r7, pc}
 802258c:	200008f0 	.word	0x200008f0
 8022590:	40023800 	.word	0x40023800
 8022594:	40020c00 	.word	0x40020c00
 8022598:	40020800 	.word	0x40020800

0802259c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 802259c:	b580      	push	{r7, lr}
 802259e:	b082      	sub	sp, #8
 80225a0:	af00      	add	r7, sp, #0
 80225a2:	4603      	mov	r3, r0
 80225a4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80225a6:	2201      	movs	r2, #1
 80225a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80225ac:	480a      	ldr	r0, [pc, #40]	; (80225d8 <LCD_IO_WriteData+0x3c>)
 80225ae:	f002 f905 	bl	80247bc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80225b2:	2200      	movs	r2, #0
 80225b4:	2104      	movs	r1, #4
 80225b6:	4809      	ldr	r0, [pc, #36]	; (80225dc <LCD_IO_WriteData+0x40>)
 80225b8:	f002 f900 	bl	80247bc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80225bc:	88fb      	ldrh	r3, [r7, #6]
 80225be:	4618      	mov	r0, r3
 80225c0:	f7ff ff10 	bl	80223e4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80225c4:	2201      	movs	r2, #1
 80225c6:	2104      	movs	r1, #4
 80225c8:	4804      	ldr	r0, [pc, #16]	; (80225dc <LCD_IO_WriteData+0x40>)
 80225ca:	f002 f8f7 	bl	80247bc <HAL_GPIO_WritePin>
}
 80225ce:	bf00      	nop
 80225d0:	3708      	adds	r7, #8
 80225d2:	46bd      	mov	sp, r7
 80225d4:	bd80      	pop	{r7, pc}
 80225d6:	bf00      	nop
 80225d8:	40020c00 	.word	0x40020c00
 80225dc:	40020800 	.word	0x40020800

080225e0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80225e0:	b580      	push	{r7, lr}
 80225e2:	b082      	sub	sp, #8
 80225e4:	af00      	add	r7, sp, #0
 80225e6:	4603      	mov	r3, r0
 80225e8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80225ea:	2200      	movs	r2, #0
 80225ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80225f0:	480a      	ldr	r0, [pc, #40]	; (802261c <LCD_IO_WriteReg+0x3c>)
 80225f2:	f002 f8e3 	bl	80247bc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80225f6:	2200      	movs	r2, #0
 80225f8:	2104      	movs	r1, #4
 80225fa:	4809      	ldr	r0, [pc, #36]	; (8022620 <LCD_IO_WriteReg+0x40>)
 80225fc:	f002 f8de 	bl	80247bc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8022600:	79fb      	ldrb	r3, [r7, #7]
 8022602:	b29b      	uxth	r3, r3
 8022604:	4618      	mov	r0, r3
 8022606:	f7ff feed 	bl	80223e4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 802260a:	2201      	movs	r2, #1
 802260c:	2104      	movs	r1, #4
 802260e:	4804      	ldr	r0, [pc, #16]	; (8022620 <LCD_IO_WriteReg+0x40>)
 8022610:	f002 f8d4 	bl	80247bc <HAL_GPIO_WritePin>
}
 8022614:	bf00      	nop
 8022616:	3708      	adds	r7, #8
 8022618:	46bd      	mov	sp, r7
 802261a:	bd80      	pop	{r7, pc}
 802261c:	40020c00 	.word	0x40020c00
 8022620:	40020800 	.word	0x40020800

08022624 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8022624:	b580      	push	{r7, lr}
 8022626:	b084      	sub	sp, #16
 8022628:	af00      	add	r7, sp, #0
 802262a:	4603      	mov	r3, r0
 802262c:	460a      	mov	r2, r1
 802262e:	80fb      	strh	r3, [r7, #6]
 8022630:	4613      	mov	r3, r2
 8022632:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8022634:	2300      	movs	r3, #0
 8022636:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8022638:	2200      	movs	r2, #0
 802263a:	2104      	movs	r1, #4
 802263c:	4810      	ldr	r0, [pc, #64]	; (8022680 <LCD_IO_ReadData+0x5c>)
 802263e:	f002 f8bd 	bl	80247bc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8022642:	2200      	movs	r2, #0
 8022644:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022648:	480e      	ldr	r0, [pc, #56]	; (8022684 <LCD_IO_ReadData+0x60>)
 802264a:	f002 f8b7 	bl	80247bc <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 802264e:	88fb      	ldrh	r3, [r7, #6]
 8022650:	4618      	mov	r0, r3
 8022652:	f7ff fec7 	bl	80223e4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8022656:	797b      	ldrb	r3, [r7, #5]
 8022658:	4618      	mov	r0, r3
 802265a:	f7ff fea3 	bl	80223a4 <SPIx_Read>
 802265e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8022660:	2201      	movs	r2, #1
 8022662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022666:	4807      	ldr	r0, [pc, #28]	; (8022684 <LCD_IO_ReadData+0x60>)
 8022668:	f002 f8a8 	bl	80247bc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 802266c:	2201      	movs	r2, #1
 802266e:	2104      	movs	r1, #4
 8022670:	4803      	ldr	r0, [pc, #12]	; (8022680 <LCD_IO_ReadData+0x5c>)
 8022672:	f002 f8a3 	bl	80247bc <HAL_GPIO_WritePin>
  
  return readvalue;
 8022676:	68fb      	ldr	r3, [r7, #12]
}
 8022678:	4618      	mov	r0, r3
 802267a:	3710      	adds	r7, #16
 802267c:	46bd      	mov	sp, r7
 802267e:	bd80      	pop	{r7, pc}
 8022680:	40020800 	.word	0x40020800
 8022684:	40020c00 	.word	0x40020c00

08022688 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8022688:	b580      	push	{r7, lr}
 802268a:	b082      	sub	sp, #8
 802268c:	af00      	add	r7, sp, #0
 802268e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8022690:	6878      	ldr	r0, [r7, #4]
 8022692:	f000 fecd 	bl	8023430 <HAL_Delay>
}
 8022696:	bf00      	nop
 8022698:	3708      	adds	r7, #8
 802269a:	46bd      	mov	sp, r7
 802269c:	bd80      	pop	{r7, pc}
	...

080226a0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80226a0:	b580      	push	{r7, lr}
 80226a2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80226a4:	4b2d      	ldr	r3, [pc, #180]	; (802275c <BSP_LCD_Init+0xbc>)
 80226a6:	4a2e      	ldr	r2, [pc, #184]	; (8022760 <BSP_LCD_Init+0xc0>)
 80226a8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80226aa:	4b2c      	ldr	r3, [pc, #176]	; (802275c <BSP_LCD_Init+0xbc>)
 80226ac:	2209      	movs	r2, #9
 80226ae:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80226b0:	4b2a      	ldr	r3, [pc, #168]	; (802275c <BSP_LCD_Init+0xbc>)
 80226b2:	2201      	movs	r2, #1
 80226b4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80226b6:	4b29      	ldr	r3, [pc, #164]	; (802275c <BSP_LCD_Init+0xbc>)
 80226b8:	221d      	movs	r2, #29
 80226ba:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80226bc:	4b27      	ldr	r3, [pc, #156]	; (802275c <BSP_LCD_Init+0xbc>)
 80226be:	2203      	movs	r2, #3
 80226c0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80226c2:	4b26      	ldr	r3, [pc, #152]	; (802275c <BSP_LCD_Init+0xbc>)
 80226c4:	f240 120d 	movw	r2, #269	; 0x10d
 80226c8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80226ca:	4b24      	ldr	r3, [pc, #144]	; (802275c <BSP_LCD_Init+0xbc>)
 80226cc:	f240 1243 	movw	r2, #323	; 0x143
 80226d0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80226d2:	4b22      	ldr	r3, [pc, #136]	; (802275c <BSP_LCD_Init+0xbc>)
 80226d4:	f240 1217 	movw	r2, #279	; 0x117
 80226d8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80226da:	4b20      	ldr	r3, [pc, #128]	; (802275c <BSP_LCD_Init+0xbc>)
 80226dc:	f240 1247 	movw	r2, #327	; 0x147
 80226e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80226e2:	4b1e      	ldr	r3, [pc, #120]	; (802275c <BSP_LCD_Init+0xbc>)
 80226e4:	2200      	movs	r2, #0
 80226e6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80226ea:	4b1c      	ldr	r3, [pc, #112]	; (802275c <BSP_LCD_Init+0xbc>)
 80226ec:	2200      	movs	r2, #0
 80226ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80226f2:	4b1a      	ldr	r3, [pc, #104]	; (802275c <BSP_LCD_Init+0xbc>)
 80226f4:	2200      	movs	r2, #0
 80226f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80226fa:	4b1a      	ldr	r3, [pc, #104]	; (8022764 <BSP_LCD_Init+0xc4>)
 80226fc:	2208      	movs	r2, #8
 80226fe:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8022700:	4b18      	ldr	r3, [pc, #96]	; (8022764 <BSP_LCD_Init+0xc4>)
 8022702:	22c0      	movs	r2, #192	; 0xc0
 8022704:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8022706:	4b17      	ldr	r3, [pc, #92]	; (8022764 <BSP_LCD_Init+0xc4>)
 8022708:	2204      	movs	r2, #4
 802270a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 802270c:	4b15      	ldr	r3, [pc, #84]	; (8022764 <BSP_LCD_Init+0xc4>)
 802270e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8022712:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8022714:	4813      	ldr	r0, [pc, #76]	; (8022764 <BSP_LCD_Init+0xc4>)
 8022716:	f004 ff27 	bl	8027568 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 802271a:	4b10      	ldr	r3, [pc, #64]	; (802275c <BSP_LCD_Init+0xbc>)
 802271c:	2200      	movs	r2, #0
 802271e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8022720:	4b0e      	ldr	r3, [pc, #56]	; (802275c <BSP_LCD_Init+0xbc>)
 8022722:	2200      	movs	r2, #0
 8022724:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8022726:	4b0d      	ldr	r3, [pc, #52]	; (802275c <BSP_LCD_Init+0xbc>)
 8022728:	2200      	movs	r2, #0
 802272a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 802272c:	4b0b      	ldr	r3, [pc, #44]	; (802275c <BSP_LCD_Init+0xbc>)
 802272e:	2200      	movs	r2, #0
 8022730:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8022732:	f000 fa83 	bl	8022c3c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8022736:	4809      	ldr	r0, [pc, #36]	; (802275c <BSP_LCD_Init+0xbc>)
 8022738:	f003 fe3c 	bl	80263b4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 802273c:	4b0a      	ldr	r3, [pc, #40]	; (8022768 <BSP_LCD_Init+0xc8>)
 802273e:	4a0b      	ldr	r2, [pc, #44]	; (802276c <BSP_LCD_Init+0xcc>)
 8022740:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8022742:	4b09      	ldr	r3, [pc, #36]	; (8022768 <BSP_LCD_Init+0xc8>)
 8022744:	681b      	ldr	r3, [r3, #0]
 8022746:	681b      	ldr	r3, [r3, #0]
 8022748:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 802274a:	f000 fc65 	bl	8023018 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 802274e:	4808      	ldr	r0, [pc, #32]	; (8022770 <BSP_LCD_Init+0xd0>)
 8022750:	f000 f920 	bl	8022994 <BSP_LCD_SetFont>

  return LCD_OK;
 8022754:	2300      	movs	r3, #0
}  
 8022756:	4618      	mov	r0, r3
 8022758:	bd80      	pop	{r7, pc}
 802275a:	bf00      	nop
 802275c:	200008f4 	.word	0x200008f4
 8022760:	40016800 	.word	0x40016800
 8022764:	200009dc 	.word	0x200009dc
 8022768:	20000a28 	.word	0x20000a28
 802276c:	20000004 	.word	0x20000004
 8022770:	20000040 	.word	0x20000040

08022774 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8022774:	b580      	push	{r7, lr}
 8022776:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8022778:	4b03      	ldr	r3, [pc, #12]	; (8022788 <BSP_LCD_GetXSize+0x14>)
 802277a:	681b      	ldr	r3, [r3, #0]
 802277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802277e:	4798      	blx	r3
 8022780:	4603      	mov	r3, r0
}
 8022782:	4618      	mov	r0, r3
 8022784:	bd80      	pop	{r7, pc}
 8022786:	bf00      	nop
 8022788:	20000a28 	.word	0x20000a28

0802278c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 802278c:	b580      	push	{r7, lr}
 802278e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8022790:	4b03      	ldr	r3, [pc, #12]	; (80227a0 <BSP_LCD_GetYSize+0x14>)
 8022792:	681b      	ldr	r3, [r3, #0]
 8022794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022796:	4798      	blx	r3
 8022798:	4603      	mov	r3, r0
}
 802279a:	4618      	mov	r0, r3
 802279c:	bd80      	pop	{r7, pc}
 802279e:	bf00      	nop
 80227a0:	20000a28 	.word	0x20000a28

080227a4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80227a4:	b580      	push	{r7, lr}
 80227a6:	b090      	sub	sp, #64	; 0x40
 80227a8:	af00      	add	r7, sp, #0
 80227aa:	4603      	mov	r3, r0
 80227ac:	6039      	str	r1, [r7, #0]
 80227ae:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80227b0:	2300      	movs	r3, #0
 80227b2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80227b4:	f7ff ffde 	bl	8022774 <BSP_LCD_GetXSize>
 80227b8:	4603      	mov	r3, r0
 80227ba:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80227bc:	2300      	movs	r3, #0
 80227be:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80227c0:	f7ff ffe4 	bl	802278c <BSP_LCD_GetYSize>
 80227c4:	4603      	mov	r3, r0
 80227c6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80227c8:	2300      	movs	r3, #0
 80227ca:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80227cc:	683b      	ldr	r3, [r7, #0]
 80227ce:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80227d0:	23ff      	movs	r3, #255	; 0xff
 80227d2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80227d4:	2300      	movs	r3, #0
 80227d6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80227d8:	2300      	movs	r3, #0
 80227da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80227de:	2300      	movs	r3, #0
 80227e0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80227e4:	2300      	movs	r3, #0
 80227e6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80227ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80227ee:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80227f0:	2307      	movs	r3, #7
 80227f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80227f4:	f7ff ffbe 	bl	8022774 <BSP_LCD_GetXSize>
 80227f8:	4603      	mov	r3, r0
 80227fa:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80227fc:	f7ff ffc6 	bl	802278c <BSP_LCD_GetYSize>
 8022800:	4603      	mov	r3, r0
 8022802:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8022804:	88fa      	ldrh	r2, [r7, #6]
 8022806:	f107 030c 	add.w	r3, r7, #12
 802280a:	4619      	mov	r1, r3
 802280c:	4814      	ldr	r0, [pc, #80]	; (8022860 <BSP_LCD_LayerDefaultInit+0xbc>)
 802280e:	f003 ff63 	bl	80266d8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8022812:	88fa      	ldrh	r2, [r7, #6]
 8022814:	4913      	ldr	r1, [pc, #76]	; (8022864 <BSP_LCD_LayerDefaultInit+0xc0>)
 8022816:	4613      	mov	r3, r2
 8022818:	005b      	lsls	r3, r3, #1
 802281a:	4413      	add	r3, r2
 802281c:	009b      	lsls	r3, r3, #2
 802281e:	440b      	add	r3, r1
 8022820:	3304      	adds	r3, #4
 8022822:	f04f 32ff 	mov.w	r2, #4294967295
 8022826:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8022828:	88fa      	ldrh	r2, [r7, #6]
 802282a:	490e      	ldr	r1, [pc, #56]	; (8022864 <BSP_LCD_LayerDefaultInit+0xc0>)
 802282c:	4613      	mov	r3, r2
 802282e:	005b      	lsls	r3, r3, #1
 8022830:	4413      	add	r3, r2
 8022832:	009b      	lsls	r3, r3, #2
 8022834:	440b      	add	r3, r1
 8022836:	3308      	adds	r3, #8
 8022838:	4a0b      	ldr	r2, [pc, #44]	; (8022868 <BSP_LCD_LayerDefaultInit+0xc4>)
 802283a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 802283c:	88fa      	ldrh	r2, [r7, #6]
 802283e:	4909      	ldr	r1, [pc, #36]	; (8022864 <BSP_LCD_LayerDefaultInit+0xc0>)
 8022840:	4613      	mov	r3, r2
 8022842:	005b      	lsls	r3, r3, #1
 8022844:	4413      	add	r3, r2
 8022846:	009b      	lsls	r3, r3, #2
 8022848:	440b      	add	r3, r1
 802284a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 802284e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8022850:	4803      	ldr	r0, [pc, #12]	; (8022860 <BSP_LCD_LayerDefaultInit+0xbc>)
 8022852:	f003 fffd 	bl	8026850 <HAL_LTDC_EnableDither>
}
 8022856:	bf00      	nop
 8022858:	3740      	adds	r7, #64	; 0x40
 802285a:	46bd      	mov	sp, r7
 802285c:	bd80      	pop	{r7, pc}
 802285e:	bf00      	nop
 8022860:	200008f4 	.word	0x200008f4
 8022864:	20000a10 	.word	0x20000a10
 8022868:	20000040 	.word	0x20000040

0802286c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 802286c:	b480      	push	{r7}
 802286e:	b083      	sub	sp, #12
 8022870:	af00      	add	r7, sp, #0
 8022872:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8022874:	4a04      	ldr	r2, [pc, #16]	; (8022888 <BSP_LCD_SelectLayer+0x1c>)
 8022876:	687b      	ldr	r3, [r7, #4]
 8022878:	6013      	str	r3, [r2, #0]
}
 802287a:	bf00      	nop
 802287c:	370c      	adds	r7, #12
 802287e:	46bd      	mov	sp, r7
 8022880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022884:	4770      	bx	lr
 8022886:	bf00      	nop
 8022888:	20000a0c 	.word	0x20000a0c

0802288c <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 802288c:	b480      	push	{r7}
 802288e:	b083      	sub	sp, #12
 8022890:	af00      	add	r7, sp, #0
 8022892:	6078      	str	r0, [r7, #4]
 8022894:	460b      	mov	r3, r1
 8022896:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8022898:	78fb      	ldrb	r3, [r7, #3]
 802289a:	2b01      	cmp	r3, #1
 802289c:	d112      	bne.n	80228c4 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 802289e:	4b19      	ldr	r3, [pc, #100]	; (8022904 <BSP_LCD_SetLayerVisible+0x78>)
 80228a0:	681b      	ldr	r3, [r3, #0]
 80228a2:	461a      	mov	r2, r3
 80228a4:	687b      	ldr	r3, [r7, #4]
 80228a6:	01db      	lsls	r3, r3, #7
 80228a8:	4413      	add	r3, r2
 80228aa:	3384      	adds	r3, #132	; 0x84
 80228ac:	681b      	ldr	r3, [r3, #0]
 80228ae:	4a15      	ldr	r2, [pc, #84]	; (8022904 <BSP_LCD_SetLayerVisible+0x78>)
 80228b0:	6812      	ldr	r2, [r2, #0]
 80228b2:	4611      	mov	r1, r2
 80228b4:	687a      	ldr	r2, [r7, #4]
 80228b6:	01d2      	lsls	r2, r2, #7
 80228b8:	440a      	add	r2, r1
 80228ba:	3284      	adds	r2, #132	; 0x84
 80228bc:	f043 0301 	orr.w	r3, r3, #1
 80228c0:	6013      	str	r3, [r2, #0]
 80228c2:	e011      	b.n	80228e8 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 80228c4:	4b0f      	ldr	r3, [pc, #60]	; (8022904 <BSP_LCD_SetLayerVisible+0x78>)
 80228c6:	681b      	ldr	r3, [r3, #0]
 80228c8:	461a      	mov	r2, r3
 80228ca:	687b      	ldr	r3, [r7, #4]
 80228cc:	01db      	lsls	r3, r3, #7
 80228ce:	4413      	add	r3, r2
 80228d0:	3384      	adds	r3, #132	; 0x84
 80228d2:	681b      	ldr	r3, [r3, #0]
 80228d4:	4a0b      	ldr	r2, [pc, #44]	; (8022904 <BSP_LCD_SetLayerVisible+0x78>)
 80228d6:	6812      	ldr	r2, [r2, #0]
 80228d8:	4611      	mov	r1, r2
 80228da:	687a      	ldr	r2, [r7, #4]
 80228dc:	01d2      	lsls	r2, r2, #7
 80228de:	440a      	add	r2, r1
 80228e0:	3284      	adds	r2, #132	; 0x84
 80228e2:	f023 0301 	bic.w	r3, r3, #1
 80228e6:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 80228e8:	4b06      	ldr	r3, [pc, #24]	; (8022904 <BSP_LCD_SetLayerVisible+0x78>)
 80228ea:	681b      	ldr	r3, [r3, #0]
 80228ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80228ee:	4b05      	ldr	r3, [pc, #20]	; (8022904 <BSP_LCD_SetLayerVisible+0x78>)
 80228f0:	681b      	ldr	r3, [r3, #0]
 80228f2:	f042 0201 	orr.w	r2, r2, #1
 80228f6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80228f8:	bf00      	nop
 80228fa:	370c      	adds	r7, #12
 80228fc:	46bd      	mov	sp, r7
 80228fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022902:	4770      	bx	lr
 8022904:	200008f4 	.word	0x200008f4

08022908 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8022908:	b580      	push	{r7, lr}
 802290a:	b082      	sub	sp, #8
 802290c:	af00      	add	r7, sp, #0
 802290e:	6078      	str	r0, [r7, #4]
 8022910:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8022912:	687a      	ldr	r2, [r7, #4]
 8022914:	6839      	ldr	r1, [r7, #0]
 8022916:	4805      	ldr	r0, [pc, #20]	; (802292c <BSP_LCD_SetColorKeying+0x24>)
 8022918:	f003 ff1c 	bl	8026754 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 802291c:	6879      	ldr	r1, [r7, #4]
 802291e:	4803      	ldr	r0, [pc, #12]	; (802292c <BSP_LCD_SetColorKeying+0x24>)
 8022920:	f003 ff5c 	bl	80267dc <HAL_LTDC_EnableColorKeying>
}
 8022924:	bf00      	nop
 8022926:	3708      	adds	r7, #8
 8022928:	46bd      	mov	sp, r7
 802292a:	bd80      	pop	{r7, pc}
 802292c:	200008f4 	.word	0x200008f4

08022930 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8022930:	b480      	push	{r7}
 8022932:	b083      	sub	sp, #12
 8022934:	af00      	add	r7, sp, #0
 8022936:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8022938:	4b07      	ldr	r3, [pc, #28]	; (8022958 <BSP_LCD_SetTextColor+0x28>)
 802293a:	681a      	ldr	r2, [r3, #0]
 802293c:	4907      	ldr	r1, [pc, #28]	; (802295c <BSP_LCD_SetTextColor+0x2c>)
 802293e:	4613      	mov	r3, r2
 8022940:	005b      	lsls	r3, r3, #1
 8022942:	4413      	add	r3, r2
 8022944:	009b      	lsls	r3, r3, #2
 8022946:	440b      	add	r3, r1
 8022948:	687a      	ldr	r2, [r7, #4]
 802294a:	601a      	str	r2, [r3, #0]
}
 802294c:	bf00      	nop
 802294e:	370c      	adds	r7, #12
 8022950:	46bd      	mov	sp, r7
 8022952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022956:	4770      	bx	lr
 8022958:	20000a0c 	.word	0x20000a0c
 802295c:	20000a10 	.word	0x20000a10

08022960 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8022960:	b480      	push	{r7}
 8022962:	b083      	sub	sp, #12
 8022964:	af00      	add	r7, sp, #0
 8022966:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8022968:	4b08      	ldr	r3, [pc, #32]	; (802298c <BSP_LCD_SetBackColor+0x2c>)
 802296a:	681a      	ldr	r2, [r3, #0]
 802296c:	4908      	ldr	r1, [pc, #32]	; (8022990 <BSP_LCD_SetBackColor+0x30>)
 802296e:	4613      	mov	r3, r2
 8022970:	005b      	lsls	r3, r3, #1
 8022972:	4413      	add	r3, r2
 8022974:	009b      	lsls	r3, r3, #2
 8022976:	440b      	add	r3, r1
 8022978:	3304      	adds	r3, #4
 802297a:	687a      	ldr	r2, [r7, #4]
 802297c:	601a      	str	r2, [r3, #0]
}
 802297e:	bf00      	nop
 8022980:	370c      	adds	r7, #12
 8022982:	46bd      	mov	sp, r7
 8022984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022988:	4770      	bx	lr
 802298a:	bf00      	nop
 802298c:	20000a0c 	.word	0x20000a0c
 8022990:	20000a10 	.word	0x20000a10

08022994 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8022994:	b480      	push	{r7}
 8022996:	b083      	sub	sp, #12
 8022998:	af00      	add	r7, sp, #0
 802299a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 802299c:	4b08      	ldr	r3, [pc, #32]	; (80229c0 <BSP_LCD_SetFont+0x2c>)
 802299e:	681a      	ldr	r2, [r3, #0]
 80229a0:	4908      	ldr	r1, [pc, #32]	; (80229c4 <BSP_LCD_SetFont+0x30>)
 80229a2:	4613      	mov	r3, r2
 80229a4:	005b      	lsls	r3, r3, #1
 80229a6:	4413      	add	r3, r2
 80229a8:	009b      	lsls	r3, r3, #2
 80229aa:	440b      	add	r3, r1
 80229ac:	3308      	adds	r3, #8
 80229ae:	687a      	ldr	r2, [r7, #4]
 80229b0:	601a      	str	r2, [r3, #0]
}
 80229b2:	bf00      	nop
 80229b4:	370c      	adds	r7, #12
 80229b6:	46bd      	mov	sp, r7
 80229b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229bc:	4770      	bx	lr
 80229be:	bf00      	nop
 80229c0:	20000a0c 	.word	0x20000a0c
 80229c4:	20000a10 	.word	0x20000a10

080229c8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80229c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80229ca:	b085      	sub	sp, #20
 80229cc:	af02      	add	r7, sp, #8
 80229ce:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80229d0:	4b0f      	ldr	r3, [pc, #60]	; (8022a10 <BSP_LCD_Clear+0x48>)
 80229d2:	681c      	ldr	r4, [r3, #0]
 80229d4:	4b0e      	ldr	r3, [pc, #56]	; (8022a10 <BSP_LCD_Clear+0x48>)
 80229d6:	681b      	ldr	r3, [r3, #0]
 80229d8:	4a0e      	ldr	r2, [pc, #56]	; (8022a14 <BSP_LCD_Clear+0x4c>)
 80229da:	2134      	movs	r1, #52	; 0x34
 80229dc:	fb01 f303 	mul.w	r3, r1, r3
 80229e0:	4413      	add	r3, r2
 80229e2:	335c      	adds	r3, #92	; 0x5c
 80229e4:	681b      	ldr	r3, [r3, #0]
 80229e6:	461e      	mov	r6, r3
 80229e8:	f7ff fec4 	bl	8022774 <BSP_LCD_GetXSize>
 80229ec:	4605      	mov	r5, r0
 80229ee:	f7ff fecd 	bl	802278c <BSP_LCD_GetYSize>
 80229f2:	4602      	mov	r2, r0
 80229f4:	687b      	ldr	r3, [r7, #4]
 80229f6:	9301      	str	r3, [sp, #4]
 80229f8:	2300      	movs	r3, #0
 80229fa:	9300      	str	r3, [sp, #0]
 80229fc:	4613      	mov	r3, r2
 80229fe:	462a      	mov	r2, r5
 8022a00:	4631      	mov	r1, r6
 8022a02:	4620      	mov	r0, r4
 8022a04:	f000 fad0 	bl	8022fa8 <FillBuffer>
}
 8022a08:	bf00      	nop
 8022a0a:	370c      	adds	r7, #12
 8022a0c:	46bd      	mov	sp, r7
 8022a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022a10:	20000a0c 	.word	0x20000a0c
 8022a14:	200008f4 	.word	0x200008f4

08022a18 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8022a18:	b590      	push	{r4, r7, lr}
 8022a1a:	b083      	sub	sp, #12
 8022a1c:	af00      	add	r7, sp, #0
 8022a1e:	4603      	mov	r3, r0
 8022a20:	80fb      	strh	r3, [r7, #6]
 8022a22:	460b      	mov	r3, r1
 8022a24:	80bb      	strh	r3, [r7, #4]
 8022a26:	4613      	mov	r3, r2
 8022a28:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022a2a:	4b1b      	ldr	r3, [pc, #108]	; (8022a98 <BSP_LCD_DisplayChar+0x80>)
 8022a2c:	681a      	ldr	r2, [r3, #0]
 8022a2e:	491b      	ldr	r1, [pc, #108]	; (8022a9c <BSP_LCD_DisplayChar+0x84>)
 8022a30:	4613      	mov	r3, r2
 8022a32:	005b      	lsls	r3, r3, #1
 8022a34:	4413      	add	r3, r2
 8022a36:	009b      	lsls	r3, r3, #2
 8022a38:	440b      	add	r3, r1
 8022a3a:	3308      	adds	r3, #8
 8022a3c:	681b      	ldr	r3, [r3, #0]
 8022a3e:	6819      	ldr	r1, [r3, #0]
 8022a40:	78fb      	ldrb	r3, [r7, #3]
 8022a42:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022a46:	4b14      	ldr	r3, [pc, #80]	; (8022a98 <BSP_LCD_DisplayChar+0x80>)
 8022a48:	681a      	ldr	r2, [r3, #0]
 8022a4a:	4c14      	ldr	r4, [pc, #80]	; (8022a9c <BSP_LCD_DisplayChar+0x84>)
 8022a4c:	4613      	mov	r3, r2
 8022a4e:	005b      	lsls	r3, r3, #1
 8022a50:	4413      	add	r3, r2
 8022a52:	009b      	lsls	r3, r3, #2
 8022a54:	4423      	add	r3, r4
 8022a56:	3308      	adds	r3, #8
 8022a58:	681b      	ldr	r3, [r3, #0]
 8022a5a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022a5c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022a60:	4b0d      	ldr	r3, [pc, #52]	; (8022a98 <BSP_LCD_DisplayChar+0x80>)
 8022a62:	681a      	ldr	r2, [r3, #0]
 8022a64:	4c0d      	ldr	r4, [pc, #52]	; (8022a9c <BSP_LCD_DisplayChar+0x84>)
 8022a66:	4613      	mov	r3, r2
 8022a68:	005b      	lsls	r3, r3, #1
 8022a6a:	4413      	add	r3, r2
 8022a6c:	009b      	lsls	r3, r3, #2
 8022a6e:	4423      	add	r3, r4
 8022a70:	3308      	adds	r3, #8
 8022a72:	681b      	ldr	r3, [r3, #0]
 8022a74:	889b      	ldrh	r3, [r3, #4]
 8022a76:	3307      	adds	r3, #7
 8022a78:	2b00      	cmp	r3, #0
 8022a7a:	da00      	bge.n	8022a7e <BSP_LCD_DisplayChar+0x66>
 8022a7c:	3307      	adds	r3, #7
 8022a7e:	10db      	asrs	r3, r3, #3
 8022a80:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022a84:	18ca      	adds	r2, r1, r3
 8022a86:	88b9      	ldrh	r1, [r7, #4]
 8022a88:	88fb      	ldrh	r3, [r7, #6]
 8022a8a:	4618      	mov	r0, r3
 8022a8c:	f000 f9d2 	bl	8022e34 <DrawChar>
}
 8022a90:	bf00      	nop
 8022a92:	370c      	adds	r7, #12
 8022a94:	46bd      	mov	sp, r7
 8022a96:	bd90      	pop	{r4, r7, pc}
 8022a98:	20000a0c 	.word	0x20000a0c
 8022a9c:	20000a10 	.word	0x20000a10

08022aa0 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8022aa0:	b5b0      	push	{r4, r5, r7, lr}
 8022aa2:	b088      	sub	sp, #32
 8022aa4:	af00      	add	r7, sp, #0
 8022aa6:	60ba      	str	r2, [r7, #8]
 8022aa8:	461a      	mov	r2, r3
 8022aaa:	4603      	mov	r3, r0
 8022aac:	81fb      	strh	r3, [r7, #14]
 8022aae:	460b      	mov	r3, r1
 8022ab0:	81bb      	strh	r3, [r7, #12]
 8022ab2:	4613      	mov	r3, r2
 8022ab4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8022ab6:	2301      	movs	r3, #1
 8022ab8:	83fb      	strh	r3, [r7, #30]
 8022aba:	2300      	movs	r3, #0
 8022abc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8022abe:	2300      	movs	r3, #0
 8022ac0:	61bb      	str	r3, [r7, #24]
 8022ac2:	2300      	movs	r3, #0
 8022ac4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8022ac6:	68bb      	ldr	r3, [r7, #8]
 8022ac8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8022aca:	e002      	b.n	8022ad2 <BSP_LCD_DisplayStringAt+0x32>
 8022acc:	69bb      	ldr	r3, [r7, #24]
 8022ace:	3301      	adds	r3, #1
 8022ad0:	61bb      	str	r3, [r7, #24]
 8022ad2:	697b      	ldr	r3, [r7, #20]
 8022ad4:	1c5a      	adds	r2, r3, #1
 8022ad6:	617a      	str	r2, [r7, #20]
 8022ad8:	781b      	ldrb	r3, [r3, #0]
 8022ada:	2b00      	cmp	r3, #0
 8022adc:	d1f6      	bne.n	8022acc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8022ade:	f7ff fe49 	bl	8022774 <BSP_LCD_GetXSize>
 8022ae2:	4601      	mov	r1, r0
 8022ae4:	4b4b      	ldr	r3, [pc, #300]	; (8022c14 <BSP_LCD_DisplayStringAt+0x174>)
 8022ae6:	681a      	ldr	r2, [r3, #0]
 8022ae8:	484b      	ldr	r0, [pc, #300]	; (8022c18 <BSP_LCD_DisplayStringAt+0x178>)
 8022aea:	4613      	mov	r3, r2
 8022aec:	005b      	lsls	r3, r3, #1
 8022aee:	4413      	add	r3, r2
 8022af0:	009b      	lsls	r3, r3, #2
 8022af2:	4403      	add	r3, r0
 8022af4:	3308      	adds	r3, #8
 8022af6:	681b      	ldr	r3, [r3, #0]
 8022af8:	889b      	ldrh	r3, [r3, #4]
 8022afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8022afe:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8022b00:	79fb      	ldrb	r3, [r7, #7]
 8022b02:	2b03      	cmp	r3, #3
 8022b04:	d01c      	beq.n	8022b40 <BSP_LCD_DisplayStringAt+0xa0>
 8022b06:	2b03      	cmp	r3, #3
 8022b08:	dc33      	bgt.n	8022b72 <BSP_LCD_DisplayStringAt+0xd2>
 8022b0a:	2b01      	cmp	r3, #1
 8022b0c:	d002      	beq.n	8022b14 <BSP_LCD_DisplayStringAt+0x74>
 8022b0e:	2b02      	cmp	r3, #2
 8022b10:	d019      	beq.n	8022b46 <BSP_LCD_DisplayStringAt+0xa6>
 8022b12:	e02e      	b.n	8022b72 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8022b14:	693a      	ldr	r2, [r7, #16]
 8022b16:	69bb      	ldr	r3, [r7, #24]
 8022b18:	1ad1      	subs	r1, r2, r3
 8022b1a:	4b3e      	ldr	r3, [pc, #248]	; (8022c14 <BSP_LCD_DisplayStringAt+0x174>)
 8022b1c:	681a      	ldr	r2, [r3, #0]
 8022b1e:	483e      	ldr	r0, [pc, #248]	; (8022c18 <BSP_LCD_DisplayStringAt+0x178>)
 8022b20:	4613      	mov	r3, r2
 8022b22:	005b      	lsls	r3, r3, #1
 8022b24:	4413      	add	r3, r2
 8022b26:	009b      	lsls	r3, r3, #2
 8022b28:	4403      	add	r3, r0
 8022b2a:	3308      	adds	r3, #8
 8022b2c:	681b      	ldr	r3, [r3, #0]
 8022b2e:	889b      	ldrh	r3, [r3, #4]
 8022b30:	fb01 f303 	mul.w	r3, r1, r3
 8022b34:	085b      	lsrs	r3, r3, #1
 8022b36:	b29a      	uxth	r2, r3
 8022b38:	89fb      	ldrh	r3, [r7, #14]
 8022b3a:	4413      	add	r3, r2
 8022b3c:	83fb      	strh	r3, [r7, #30]
      break;
 8022b3e:	e01b      	b.n	8022b78 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8022b40:	89fb      	ldrh	r3, [r7, #14]
 8022b42:	83fb      	strh	r3, [r7, #30]
      break;
 8022b44:	e018      	b.n	8022b78 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8022b46:	693a      	ldr	r2, [r7, #16]
 8022b48:	69bb      	ldr	r3, [r7, #24]
 8022b4a:	1ad3      	subs	r3, r2, r3
 8022b4c:	b299      	uxth	r1, r3
 8022b4e:	4b31      	ldr	r3, [pc, #196]	; (8022c14 <BSP_LCD_DisplayStringAt+0x174>)
 8022b50:	681a      	ldr	r2, [r3, #0]
 8022b52:	4831      	ldr	r0, [pc, #196]	; (8022c18 <BSP_LCD_DisplayStringAt+0x178>)
 8022b54:	4613      	mov	r3, r2
 8022b56:	005b      	lsls	r3, r3, #1
 8022b58:	4413      	add	r3, r2
 8022b5a:	009b      	lsls	r3, r3, #2
 8022b5c:	4403      	add	r3, r0
 8022b5e:	3308      	adds	r3, #8
 8022b60:	681b      	ldr	r3, [r3, #0]
 8022b62:	889b      	ldrh	r3, [r3, #4]
 8022b64:	fb11 f303 	smulbb	r3, r1, r3
 8022b68:	b29a      	uxth	r2, r3
 8022b6a:	89fb      	ldrh	r3, [r7, #14]
 8022b6c:	4413      	add	r3, r2
 8022b6e:	83fb      	strh	r3, [r7, #30]
      break;
 8022b70:	e002      	b.n	8022b78 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8022b72:	89fb      	ldrh	r3, [r7, #14]
 8022b74:	83fb      	strh	r3, [r7, #30]
      break;
 8022b76:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022b78:	e01a      	b.n	8022bb0 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8022b7a:	68bb      	ldr	r3, [r7, #8]
 8022b7c:	781a      	ldrb	r2, [r3, #0]
 8022b7e:	89b9      	ldrh	r1, [r7, #12]
 8022b80:	8bfb      	ldrh	r3, [r7, #30]
 8022b82:	4618      	mov	r0, r3
 8022b84:	f7ff ff48 	bl	8022a18 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8022b88:	4b22      	ldr	r3, [pc, #136]	; (8022c14 <BSP_LCD_DisplayStringAt+0x174>)
 8022b8a:	681a      	ldr	r2, [r3, #0]
 8022b8c:	4922      	ldr	r1, [pc, #136]	; (8022c18 <BSP_LCD_DisplayStringAt+0x178>)
 8022b8e:	4613      	mov	r3, r2
 8022b90:	005b      	lsls	r3, r3, #1
 8022b92:	4413      	add	r3, r2
 8022b94:	009b      	lsls	r3, r3, #2
 8022b96:	440b      	add	r3, r1
 8022b98:	3308      	adds	r3, #8
 8022b9a:	681b      	ldr	r3, [r3, #0]
 8022b9c:	889a      	ldrh	r2, [r3, #4]
 8022b9e:	8bfb      	ldrh	r3, [r7, #30]
 8022ba0:	4413      	add	r3, r2
 8022ba2:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8022ba4:	68bb      	ldr	r3, [r7, #8]
 8022ba6:	3301      	adds	r3, #1
 8022ba8:	60bb      	str	r3, [r7, #8]
    i++;
 8022baa:	8bbb      	ldrh	r3, [r7, #28]
 8022bac:	3301      	adds	r3, #1
 8022bae:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022bb0:	68bb      	ldr	r3, [r7, #8]
 8022bb2:	781b      	ldrb	r3, [r3, #0]
 8022bb4:	2b00      	cmp	r3, #0
 8022bb6:	bf14      	ite	ne
 8022bb8:	2301      	movne	r3, #1
 8022bba:	2300      	moveq	r3, #0
 8022bbc:	b2dc      	uxtb	r4, r3
 8022bbe:	f7ff fdd9 	bl	8022774 <BSP_LCD_GetXSize>
 8022bc2:	8bb9      	ldrh	r1, [r7, #28]
 8022bc4:	4b13      	ldr	r3, [pc, #76]	; (8022c14 <BSP_LCD_DisplayStringAt+0x174>)
 8022bc6:	681a      	ldr	r2, [r3, #0]
 8022bc8:	4d13      	ldr	r5, [pc, #76]	; (8022c18 <BSP_LCD_DisplayStringAt+0x178>)
 8022bca:	4613      	mov	r3, r2
 8022bcc:	005b      	lsls	r3, r3, #1
 8022bce:	4413      	add	r3, r2
 8022bd0:	009b      	lsls	r3, r3, #2
 8022bd2:	442b      	add	r3, r5
 8022bd4:	3308      	adds	r3, #8
 8022bd6:	681b      	ldr	r3, [r3, #0]
 8022bd8:	889b      	ldrh	r3, [r3, #4]
 8022bda:	fb01 f303 	mul.w	r3, r1, r3
 8022bde:	1ac3      	subs	r3, r0, r3
 8022be0:	b299      	uxth	r1, r3
 8022be2:	4b0c      	ldr	r3, [pc, #48]	; (8022c14 <BSP_LCD_DisplayStringAt+0x174>)
 8022be4:	681a      	ldr	r2, [r3, #0]
 8022be6:	480c      	ldr	r0, [pc, #48]	; (8022c18 <BSP_LCD_DisplayStringAt+0x178>)
 8022be8:	4613      	mov	r3, r2
 8022bea:	005b      	lsls	r3, r3, #1
 8022bec:	4413      	add	r3, r2
 8022bee:	009b      	lsls	r3, r3, #2
 8022bf0:	4403      	add	r3, r0
 8022bf2:	3308      	adds	r3, #8
 8022bf4:	681b      	ldr	r3, [r3, #0]
 8022bf6:	889b      	ldrh	r3, [r3, #4]
 8022bf8:	4299      	cmp	r1, r3
 8022bfa:	bf2c      	ite	cs
 8022bfc:	2301      	movcs	r3, #1
 8022bfe:	2300      	movcc	r3, #0
 8022c00:	b2db      	uxtb	r3, r3
 8022c02:	4023      	ands	r3, r4
 8022c04:	b2db      	uxtb	r3, r3
 8022c06:	2b00      	cmp	r3, #0
 8022c08:	d1b7      	bne.n	8022b7a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8022c0a:	bf00      	nop
 8022c0c:	bf00      	nop
 8022c0e:	3720      	adds	r7, #32
 8022c10:	46bd      	mov	sp, r7
 8022c12:	bdb0      	pop	{r4, r5, r7, pc}
 8022c14:	20000a0c 	.word	0x20000a0c
 8022c18:	20000a10 	.word	0x20000a10

08022c1c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8022c1c:	b580      	push	{r7, lr}
 8022c1e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8022c20:	4b05      	ldr	r3, [pc, #20]	; (8022c38 <BSP_LCD_DisplayOn+0x1c>)
 8022c22:	681b      	ldr	r3, [r3, #0]
 8022c24:	689b      	ldr	r3, [r3, #8]
 8022c26:	2b00      	cmp	r3, #0
 8022c28:	d003      	beq.n	8022c32 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8022c2a:	4b03      	ldr	r3, [pc, #12]	; (8022c38 <BSP_LCD_DisplayOn+0x1c>)
 8022c2c:	681b      	ldr	r3, [r3, #0]
 8022c2e:	689b      	ldr	r3, [r3, #8]
 8022c30:	4798      	blx	r3
  }
}
 8022c32:	bf00      	nop
 8022c34:	bd80      	pop	{r7, pc}
 8022c36:	bf00      	nop
 8022c38:	20000a28 	.word	0x20000a28

08022c3c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8022c3c:	b580      	push	{r7, lr}
 8022c3e:	b08e      	sub	sp, #56	; 0x38
 8022c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8022c42:	2300      	movs	r3, #0
 8022c44:	623b      	str	r3, [r7, #32]
 8022c46:	4b61      	ldr	r3, [pc, #388]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022c4a:	4a60      	ldr	r2, [pc, #384]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022c4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8022c50:	6453      	str	r3, [r2, #68]	; 0x44
 8022c52:	4b5e      	ldr	r3, [pc, #376]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022c56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8022c5a:	623b      	str	r3, [r7, #32]
 8022c5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8022c5e:	2300      	movs	r3, #0
 8022c60:	61fb      	str	r3, [r7, #28]
 8022c62:	4b5a      	ldr	r3, [pc, #360]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c66:	4a59      	ldr	r2, [pc, #356]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022c68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8022c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8022c6e:	4b57      	ldr	r3, [pc, #348]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8022c76:	61fb      	str	r3, [r7, #28]
 8022c78:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8022c7a:	2300      	movs	r3, #0
 8022c7c:	61bb      	str	r3, [r7, #24]
 8022c7e:	4b53      	ldr	r3, [pc, #332]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c82:	4a52      	ldr	r2, [pc, #328]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022c84:	f043 0301 	orr.w	r3, r3, #1
 8022c88:	6313      	str	r3, [r2, #48]	; 0x30
 8022c8a:	4b50      	ldr	r3, [pc, #320]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c8e:	f003 0301 	and.w	r3, r3, #1
 8022c92:	61bb      	str	r3, [r7, #24]
 8022c94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8022c96:	2300      	movs	r3, #0
 8022c98:	617b      	str	r3, [r7, #20]
 8022c9a:	4b4c      	ldr	r3, [pc, #304]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c9e:	4a4b      	ldr	r2, [pc, #300]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022ca0:	f043 0302 	orr.w	r3, r3, #2
 8022ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8022ca6:	4b49      	ldr	r3, [pc, #292]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022caa:	f003 0302 	and.w	r3, r3, #2
 8022cae:	617b      	str	r3, [r7, #20]
 8022cb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8022cb2:	2300      	movs	r3, #0
 8022cb4:	613b      	str	r3, [r7, #16]
 8022cb6:	4b45      	ldr	r3, [pc, #276]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022cba:	4a44      	ldr	r2, [pc, #272]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022cbc:	f043 0304 	orr.w	r3, r3, #4
 8022cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8022cc2:	4b42      	ldr	r3, [pc, #264]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022cc6:	f003 0304 	and.w	r3, r3, #4
 8022cca:	613b      	str	r3, [r7, #16]
 8022ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8022cce:	2300      	movs	r3, #0
 8022cd0:	60fb      	str	r3, [r7, #12]
 8022cd2:	4b3e      	ldr	r3, [pc, #248]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022cd6:	4a3d      	ldr	r2, [pc, #244]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022cd8:	f043 0308 	orr.w	r3, r3, #8
 8022cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8022cde:	4b3b      	ldr	r3, [pc, #236]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ce2:	f003 0308 	and.w	r3, r3, #8
 8022ce6:	60fb      	str	r3, [r7, #12]
 8022ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8022cea:	2300      	movs	r3, #0
 8022cec:	60bb      	str	r3, [r7, #8]
 8022cee:	4b37      	ldr	r3, [pc, #220]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022cf2:	4a36      	ldr	r2, [pc, #216]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022cf4:	f043 0320 	orr.w	r3, r3, #32
 8022cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8022cfa:	4b34      	ldr	r3, [pc, #208]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022cfe:	f003 0320 	and.w	r3, r3, #32
 8022d02:	60bb      	str	r3, [r7, #8]
 8022d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8022d06:	2300      	movs	r3, #0
 8022d08:	607b      	str	r3, [r7, #4]
 8022d0a:	4b30      	ldr	r3, [pc, #192]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022d0e:	4a2f      	ldr	r2, [pc, #188]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022d14:	6313      	str	r3, [r2, #48]	; 0x30
 8022d16:	4b2d      	ldr	r3, [pc, #180]	; (8022dcc <BSP_LCD_MspInit+0x190>)
 8022d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022d1e:	607b      	str	r3, [r7, #4]
 8022d20:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8022d22:	f641 0358 	movw	r3, #6232	; 0x1858
 8022d26:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8022d28:	2302      	movs	r3, #2
 8022d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8022d2c:	2300      	movs	r3, #0
 8022d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8022d30:	2302      	movs	r3, #2
 8022d32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8022d34:	230e      	movs	r3, #14
 8022d36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8022d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022d3c:	4619      	mov	r1, r3
 8022d3e:	4824      	ldr	r0, [pc, #144]	; (8022dd0 <BSP_LCD_MspInit+0x194>)
 8022d40:	f001 fa84 	bl	802424c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8022d44:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8022d48:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8022d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022d4e:	4619      	mov	r1, r3
 8022d50:	4820      	ldr	r0, [pc, #128]	; (8022dd4 <BSP_LCD_MspInit+0x198>)
 8022d52:	f001 fa7b 	bl	802424c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8022d56:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8022d5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8022d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022d60:	4619      	mov	r1, r3
 8022d62:	481d      	ldr	r0, [pc, #116]	; (8022dd8 <BSP_LCD_MspInit+0x19c>)
 8022d64:	f001 fa72 	bl	802424c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8022d68:	2348      	movs	r3, #72	; 0x48
 8022d6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8022d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022d70:	4619      	mov	r1, r3
 8022d72:	481a      	ldr	r0, [pc, #104]	; (8022ddc <BSP_LCD_MspInit+0x1a0>)
 8022d74:	f001 fa6a 	bl	802424c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8022d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8022d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022d82:	4619      	mov	r1, r3
 8022d84:	4816      	ldr	r0, [pc, #88]	; (8022de0 <BSP_LCD_MspInit+0x1a4>)
 8022d86:	f001 fa61 	bl	802424c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8022d8a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8022d8e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022d94:	4619      	mov	r1, r3
 8022d96:	4813      	ldr	r0, [pc, #76]	; (8022de4 <BSP_LCD_MspInit+0x1a8>)
 8022d98:	f001 fa58 	bl	802424c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8022d9c:	2303      	movs	r3, #3
 8022d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8022da0:	2309      	movs	r3, #9
 8022da2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8022da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022da8:	4619      	mov	r1, r3
 8022daa:	480a      	ldr	r0, [pc, #40]	; (8022dd4 <BSP_LCD_MspInit+0x198>)
 8022dac:	f001 fa4e 	bl	802424c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8022db0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8022db4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022dba:	4619      	mov	r1, r3
 8022dbc:	4809      	ldr	r0, [pc, #36]	; (8022de4 <BSP_LCD_MspInit+0x1a8>)
 8022dbe:	f001 fa45 	bl	802424c <HAL_GPIO_Init>
}
 8022dc2:	bf00      	nop
 8022dc4:	3738      	adds	r7, #56	; 0x38
 8022dc6:	46bd      	mov	sp, r7
 8022dc8:	bd80      	pop	{r7, pc}
 8022dca:	bf00      	nop
 8022dcc:	40023800 	.word	0x40023800
 8022dd0:	40020000 	.word	0x40020000
 8022dd4:	40020400 	.word	0x40020400
 8022dd8:	40020800 	.word	0x40020800
 8022ddc:	40020c00 	.word	0x40020c00
 8022de0:	40021400 	.word	0x40021400
 8022de4:	40021800 	.word	0x40021800

08022de8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8022de8:	b5b0      	push	{r4, r5, r7, lr}
 8022dea:	b082      	sub	sp, #8
 8022dec:	af00      	add	r7, sp, #0
 8022dee:	4603      	mov	r3, r0
 8022df0:	603a      	str	r2, [r7, #0]
 8022df2:	80fb      	strh	r3, [r7, #6]
 8022df4:	460b      	mov	r3, r1
 8022df6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8022df8:	4b0c      	ldr	r3, [pc, #48]	; (8022e2c <BSP_LCD_DrawPixel+0x44>)
 8022dfa:	681b      	ldr	r3, [r3, #0]
 8022dfc:	4a0c      	ldr	r2, [pc, #48]	; (8022e30 <BSP_LCD_DrawPixel+0x48>)
 8022dfe:	2134      	movs	r1, #52	; 0x34
 8022e00:	fb01 f303 	mul.w	r3, r1, r3
 8022e04:	4413      	add	r3, r2
 8022e06:	335c      	adds	r3, #92	; 0x5c
 8022e08:	681c      	ldr	r4, [r3, #0]
 8022e0a:	88bd      	ldrh	r5, [r7, #4]
 8022e0c:	f7ff fcb2 	bl	8022774 <BSP_LCD_GetXSize>
 8022e10:	4603      	mov	r3, r0
 8022e12:	fb03 f205 	mul.w	r2, r3, r5
 8022e16:	88fb      	ldrh	r3, [r7, #6]
 8022e18:	4413      	add	r3, r2
 8022e1a:	009b      	lsls	r3, r3, #2
 8022e1c:	4423      	add	r3, r4
 8022e1e:	461a      	mov	r2, r3
 8022e20:	683b      	ldr	r3, [r7, #0]
 8022e22:	6013      	str	r3, [r2, #0]
}
 8022e24:	bf00      	nop
 8022e26:	3708      	adds	r7, #8
 8022e28:	46bd      	mov	sp, r7
 8022e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8022e2c:	20000a0c 	.word	0x20000a0c
 8022e30:	200008f4 	.word	0x200008f4

08022e34 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8022e34:	b580      	push	{r7, lr}
 8022e36:	b088      	sub	sp, #32
 8022e38:	af00      	add	r7, sp, #0
 8022e3a:	4603      	mov	r3, r0
 8022e3c:	603a      	str	r2, [r7, #0]
 8022e3e:	80fb      	strh	r3, [r7, #6]
 8022e40:	460b      	mov	r3, r1
 8022e42:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8022e44:	2300      	movs	r3, #0
 8022e46:	61fb      	str	r3, [r7, #28]
 8022e48:	2300      	movs	r3, #0
 8022e4a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8022e4c:	2300      	movs	r3, #0
 8022e4e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8022e50:	4b53      	ldr	r3, [pc, #332]	; (8022fa0 <DrawChar+0x16c>)
 8022e52:	681a      	ldr	r2, [r3, #0]
 8022e54:	4953      	ldr	r1, [pc, #332]	; (8022fa4 <DrawChar+0x170>)
 8022e56:	4613      	mov	r3, r2
 8022e58:	005b      	lsls	r3, r3, #1
 8022e5a:	4413      	add	r3, r2
 8022e5c:	009b      	lsls	r3, r3, #2
 8022e5e:	440b      	add	r3, r1
 8022e60:	3308      	adds	r3, #8
 8022e62:	681b      	ldr	r3, [r3, #0]
 8022e64:	88db      	ldrh	r3, [r3, #6]
 8022e66:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8022e68:	4b4d      	ldr	r3, [pc, #308]	; (8022fa0 <DrawChar+0x16c>)
 8022e6a:	681a      	ldr	r2, [r3, #0]
 8022e6c:	494d      	ldr	r1, [pc, #308]	; (8022fa4 <DrawChar+0x170>)
 8022e6e:	4613      	mov	r3, r2
 8022e70:	005b      	lsls	r3, r3, #1
 8022e72:	4413      	add	r3, r2
 8022e74:	009b      	lsls	r3, r3, #2
 8022e76:	440b      	add	r3, r1
 8022e78:	3308      	adds	r3, #8
 8022e7a:	681b      	ldr	r3, [r3, #0]
 8022e7c:	889b      	ldrh	r3, [r3, #4]
 8022e7e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8022e80:	8a3b      	ldrh	r3, [r7, #16]
 8022e82:	3307      	adds	r3, #7
 8022e84:	2b00      	cmp	r3, #0
 8022e86:	da00      	bge.n	8022e8a <DrawChar+0x56>
 8022e88:	3307      	adds	r3, #7
 8022e8a:	10db      	asrs	r3, r3, #3
 8022e8c:	b2db      	uxtb	r3, r3
 8022e8e:	00db      	lsls	r3, r3, #3
 8022e90:	b2da      	uxtb	r2, r3
 8022e92:	8a3b      	ldrh	r3, [r7, #16]
 8022e94:	b2db      	uxtb	r3, r3
 8022e96:	1ad3      	subs	r3, r2, r3
 8022e98:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8022e9a:	2300      	movs	r3, #0
 8022e9c:	61fb      	str	r3, [r7, #28]
 8022e9e:	e076      	b.n	8022f8e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8022ea0:	8a3b      	ldrh	r3, [r7, #16]
 8022ea2:	3307      	adds	r3, #7
 8022ea4:	2b00      	cmp	r3, #0
 8022ea6:	da00      	bge.n	8022eaa <DrawChar+0x76>
 8022ea8:	3307      	adds	r3, #7
 8022eaa:	10db      	asrs	r3, r3, #3
 8022eac:	461a      	mov	r2, r3
 8022eae:	69fb      	ldr	r3, [r7, #28]
 8022eb0:	fb02 f303 	mul.w	r3, r2, r3
 8022eb4:	683a      	ldr	r2, [r7, #0]
 8022eb6:	4413      	add	r3, r2
 8022eb8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8022eba:	8a3b      	ldrh	r3, [r7, #16]
 8022ebc:	3307      	adds	r3, #7
 8022ebe:	2b00      	cmp	r3, #0
 8022ec0:	da00      	bge.n	8022ec4 <DrawChar+0x90>
 8022ec2:	3307      	adds	r3, #7
 8022ec4:	10db      	asrs	r3, r3, #3
 8022ec6:	2b01      	cmp	r3, #1
 8022ec8:	d002      	beq.n	8022ed0 <DrawChar+0x9c>
 8022eca:	2b02      	cmp	r3, #2
 8022ecc:	d004      	beq.n	8022ed8 <DrawChar+0xa4>
 8022ece:	e00c      	b.n	8022eea <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8022ed0:	68bb      	ldr	r3, [r7, #8]
 8022ed2:	781b      	ldrb	r3, [r3, #0]
 8022ed4:	617b      	str	r3, [r7, #20]
      break;
 8022ed6:	e016      	b.n	8022f06 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8022ed8:	68bb      	ldr	r3, [r7, #8]
 8022eda:	781b      	ldrb	r3, [r3, #0]
 8022edc:	021b      	lsls	r3, r3, #8
 8022ede:	68ba      	ldr	r2, [r7, #8]
 8022ee0:	3201      	adds	r2, #1
 8022ee2:	7812      	ldrb	r2, [r2, #0]
 8022ee4:	4313      	orrs	r3, r2
 8022ee6:	617b      	str	r3, [r7, #20]
      break;
 8022ee8:	e00d      	b.n	8022f06 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8022eea:	68bb      	ldr	r3, [r7, #8]
 8022eec:	781b      	ldrb	r3, [r3, #0]
 8022eee:	041a      	lsls	r2, r3, #16
 8022ef0:	68bb      	ldr	r3, [r7, #8]
 8022ef2:	3301      	adds	r3, #1
 8022ef4:	781b      	ldrb	r3, [r3, #0]
 8022ef6:	021b      	lsls	r3, r3, #8
 8022ef8:	4313      	orrs	r3, r2
 8022efa:	68ba      	ldr	r2, [r7, #8]
 8022efc:	3202      	adds	r2, #2
 8022efe:	7812      	ldrb	r2, [r2, #0]
 8022f00:	4313      	orrs	r3, r2
 8022f02:	617b      	str	r3, [r7, #20]
      break;
 8022f04:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8022f06:	2300      	movs	r3, #0
 8022f08:	61bb      	str	r3, [r7, #24]
 8022f0a:	e036      	b.n	8022f7a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8022f0c:	8a3a      	ldrh	r2, [r7, #16]
 8022f0e:	69bb      	ldr	r3, [r7, #24]
 8022f10:	1ad2      	subs	r2, r2, r3
 8022f12:	7bfb      	ldrb	r3, [r7, #15]
 8022f14:	4413      	add	r3, r2
 8022f16:	3b01      	subs	r3, #1
 8022f18:	2201      	movs	r2, #1
 8022f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8022f1e:	461a      	mov	r2, r3
 8022f20:	697b      	ldr	r3, [r7, #20]
 8022f22:	4013      	ands	r3, r2
 8022f24:	2b00      	cmp	r3, #0
 8022f26:	d012      	beq.n	8022f4e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8022f28:	69bb      	ldr	r3, [r7, #24]
 8022f2a:	b29a      	uxth	r2, r3
 8022f2c:	88fb      	ldrh	r3, [r7, #6]
 8022f2e:	4413      	add	r3, r2
 8022f30:	b298      	uxth	r0, r3
 8022f32:	4b1b      	ldr	r3, [pc, #108]	; (8022fa0 <DrawChar+0x16c>)
 8022f34:	681a      	ldr	r2, [r3, #0]
 8022f36:	491b      	ldr	r1, [pc, #108]	; (8022fa4 <DrawChar+0x170>)
 8022f38:	4613      	mov	r3, r2
 8022f3a:	005b      	lsls	r3, r3, #1
 8022f3c:	4413      	add	r3, r2
 8022f3e:	009b      	lsls	r3, r3, #2
 8022f40:	440b      	add	r3, r1
 8022f42:	681a      	ldr	r2, [r3, #0]
 8022f44:	88bb      	ldrh	r3, [r7, #4]
 8022f46:	4619      	mov	r1, r3
 8022f48:	f7ff ff4e 	bl	8022de8 <BSP_LCD_DrawPixel>
 8022f4c:	e012      	b.n	8022f74 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8022f4e:	69bb      	ldr	r3, [r7, #24]
 8022f50:	b29a      	uxth	r2, r3
 8022f52:	88fb      	ldrh	r3, [r7, #6]
 8022f54:	4413      	add	r3, r2
 8022f56:	b298      	uxth	r0, r3
 8022f58:	4b11      	ldr	r3, [pc, #68]	; (8022fa0 <DrawChar+0x16c>)
 8022f5a:	681a      	ldr	r2, [r3, #0]
 8022f5c:	4911      	ldr	r1, [pc, #68]	; (8022fa4 <DrawChar+0x170>)
 8022f5e:	4613      	mov	r3, r2
 8022f60:	005b      	lsls	r3, r3, #1
 8022f62:	4413      	add	r3, r2
 8022f64:	009b      	lsls	r3, r3, #2
 8022f66:	440b      	add	r3, r1
 8022f68:	3304      	adds	r3, #4
 8022f6a:	681a      	ldr	r2, [r3, #0]
 8022f6c:	88bb      	ldrh	r3, [r7, #4]
 8022f6e:	4619      	mov	r1, r3
 8022f70:	f7ff ff3a 	bl	8022de8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8022f74:	69bb      	ldr	r3, [r7, #24]
 8022f76:	3301      	adds	r3, #1
 8022f78:	61bb      	str	r3, [r7, #24]
 8022f7a:	8a3b      	ldrh	r3, [r7, #16]
 8022f7c:	69ba      	ldr	r2, [r7, #24]
 8022f7e:	429a      	cmp	r2, r3
 8022f80:	d3c4      	bcc.n	8022f0c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8022f82:	88bb      	ldrh	r3, [r7, #4]
 8022f84:	3301      	adds	r3, #1
 8022f86:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8022f88:	69fb      	ldr	r3, [r7, #28]
 8022f8a:	3301      	adds	r3, #1
 8022f8c:	61fb      	str	r3, [r7, #28]
 8022f8e:	8a7b      	ldrh	r3, [r7, #18]
 8022f90:	69fa      	ldr	r2, [r7, #28]
 8022f92:	429a      	cmp	r2, r3
 8022f94:	d384      	bcc.n	8022ea0 <DrawChar+0x6c>
  }
}
 8022f96:	bf00      	nop
 8022f98:	bf00      	nop
 8022f9a:	3720      	adds	r7, #32
 8022f9c:	46bd      	mov	sp, r7
 8022f9e:	bd80      	pop	{r7, pc}
 8022fa0:	20000a0c 	.word	0x20000a0c
 8022fa4:	20000a10 	.word	0x20000a10

08022fa8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8022fa8:	b580      	push	{r7, lr}
 8022faa:	b086      	sub	sp, #24
 8022fac:	af02      	add	r7, sp, #8
 8022fae:	60f8      	str	r0, [r7, #12]
 8022fb0:	60b9      	str	r1, [r7, #8]
 8022fb2:	607a      	str	r2, [r7, #4]
 8022fb4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8022fb6:	4b16      	ldr	r3, [pc, #88]	; (8023010 <FillBuffer+0x68>)
 8022fb8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8022fbc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8022fbe:	4b14      	ldr	r3, [pc, #80]	; (8023010 <FillBuffer+0x68>)
 8022fc0:	2200      	movs	r2, #0
 8022fc2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8022fc4:	4a12      	ldr	r2, [pc, #72]	; (8023010 <FillBuffer+0x68>)
 8022fc6:	69bb      	ldr	r3, [r7, #24]
 8022fc8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8022fca:	4b11      	ldr	r3, [pc, #68]	; (8023010 <FillBuffer+0x68>)
 8022fcc:	4a11      	ldr	r2, [pc, #68]	; (8023014 <FillBuffer+0x6c>)
 8022fce:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8022fd0:	480f      	ldr	r0, [pc, #60]	; (8023010 <FillBuffer+0x68>)
 8022fd2:	f000 fd9f 	bl	8023b14 <HAL_DMA2D_Init>
 8022fd6:	4603      	mov	r3, r0
 8022fd8:	2b00      	cmp	r3, #0
 8022fda:	d115      	bne.n	8023008 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8022fdc:	68f9      	ldr	r1, [r7, #12]
 8022fde:	480c      	ldr	r0, [pc, #48]	; (8023010 <FillBuffer+0x68>)
 8022fe0:	f001 f806 	bl	8023ff0 <HAL_DMA2D_ConfigLayer>
 8022fe4:	4603      	mov	r3, r0
 8022fe6:	2b00      	cmp	r3, #0
 8022fe8:	d10e      	bne.n	8023008 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8022fea:	68ba      	ldr	r2, [r7, #8]
 8022fec:	683b      	ldr	r3, [r7, #0]
 8022fee:	9300      	str	r3, [sp, #0]
 8022ff0:	687b      	ldr	r3, [r7, #4]
 8022ff2:	69f9      	ldr	r1, [r7, #28]
 8022ff4:	4806      	ldr	r0, [pc, #24]	; (8023010 <FillBuffer+0x68>)
 8022ff6:	f000 fdd6 	bl	8023ba6 <HAL_DMA2D_Start>
 8022ffa:	4603      	mov	r3, r0
 8022ffc:	2b00      	cmp	r3, #0
 8022ffe:	d103      	bne.n	8023008 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8023000:	210a      	movs	r1, #10
 8023002:	4803      	ldr	r0, [pc, #12]	; (8023010 <FillBuffer+0x68>)
 8023004:	f000 fdfa 	bl	8023bfc <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8023008:	bf00      	nop
 802300a:	3710      	adds	r7, #16
 802300c:	46bd      	mov	sp, r7
 802300e:	bd80      	pop	{r7, pc}
 8023010:	2000099c 	.word	0x2000099c
 8023014:	4002b000 	.word	0x4002b000

08023018 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8023018:	b580      	push	{r7, lr}
 802301a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 802301c:	4b29      	ldr	r3, [pc, #164]	; (80230c4 <BSP_SDRAM_Init+0xac>)
 802301e:	4a2a      	ldr	r2, [pc, #168]	; (80230c8 <BSP_SDRAM_Init+0xb0>)
 8023020:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8023022:	4b2a      	ldr	r3, [pc, #168]	; (80230cc <BSP_SDRAM_Init+0xb4>)
 8023024:	2202      	movs	r2, #2
 8023026:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8023028:	4b28      	ldr	r3, [pc, #160]	; (80230cc <BSP_SDRAM_Init+0xb4>)
 802302a:	2207      	movs	r2, #7
 802302c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 802302e:	4b27      	ldr	r3, [pc, #156]	; (80230cc <BSP_SDRAM_Init+0xb4>)
 8023030:	2204      	movs	r2, #4
 8023032:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8023034:	4b25      	ldr	r3, [pc, #148]	; (80230cc <BSP_SDRAM_Init+0xb4>)
 8023036:	2207      	movs	r2, #7
 8023038:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 802303a:	4b24      	ldr	r3, [pc, #144]	; (80230cc <BSP_SDRAM_Init+0xb4>)
 802303c:	2202      	movs	r2, #2
 802303e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8023040:	4b22      	ldr	r3, [pc, #136]	; (80230cc <BSP_SDRAM_Init+0xb4>)
 8023042:	2202      	movs	r2, #2
 8023044:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8023046:	4b21      	ldr	r3, [pc, #132]	; (80230cc <BSP_SDRAM_Init+0xb4>)
 8023048:	2202      	movs	r2, #2
 802304a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 802304c:	4b1d      	ldr	r3, [pc, #116]	; (80230c4 <BSP_SDRAM_Init+0xac>)
 802304e:	2201      	movs	r2, #1
 8023050:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8023052:	4b1c      	ldr	r3, [pc, #112]	; (80230c4 <BSP_SDRAM_Init+0xac>)
 8023054:	2200      	movs	r2, #0
 8023056:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8023058:	4b1a      	ldr	r3, [pc, #104]	; (80230c4 <BSP_SDRAM_Init+0xac>)
 802305a:	2204      	movs	r2, #4
 802305c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 802305e:	4b19      	ldr	r3, [pc, #100]	; (80230c4 <BSP_SDRAM_Init+0xac>)
 8023060:	2210      	movs	r2, #16
 8023062:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8023064:	4b17      	ldr	r3, [pc, #92]	; (80230c4 <BSP_SDRAM_Init+0xac>)
 8023066:	2240      	movs	r2, #64	; 0x40
 8023068:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 802306a:	4b16      	ldr	r3, [pc, #88]	; (80230c4 <BSP_SDRAM_Init+0xac>)
 802306c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8023070:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8023072:	4b14      	ldr	r3, [pc, #80]	; (80230c4 <BSP_SDRAM_Init+0xac>)
 8023074:	2200      	movs	r2, #0
 8023076:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8023078:	4b12      	ldr	r3, [pc, #72]	; (80230c4 <BSP_SDRAM_Init+0xac>)
 802307a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802307e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8023080:	4b10      	ldr	r3, [pc, #64]	; (80230c4 <BSP_SDRAM_Init+0xac>)
 8023082:	2200      	movs	r2, #0
 8023084:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8023086:	4b0f      	ldr	r3, [pc, #60]	; (80230c4 <BSP_SDRAM_Init+0xac>)
 8023088:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802308c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 802308e:	2100      	movs	r1, #0
 8023090:	480c      	ldr	r0, [pc, #48]	; (80230c4 <BSP_SDRAM_Init+0xac>)
 8023092:	f000 f87f 	bl	8023194 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8023096:	490d      	ldr	r1, [pc, #52]	; (80230cc <BSP_SDRAM_Init+0xb4>)
 8023098:	480a      	ldr	r0, [pc, #40]	; (80230c4 <BSP_SDRAM_Init+0xac>)
 802309a:	f004 fc25 	bl	80278e8 <HAL_SDRAM_Init>
 802309e:	4603      	mov	r3, r0
 80230a0:	2b00      	cmp	r3, #0
 80230a2:	d003      	beq.n	80230ac <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80230a4:	4b0a      	ldr	r3, [pc, #40]	; (80230d0 <BSP_SDRAM_Init+0xb8>)
 80230a6:	2201      	movs	r2, #1
 80230a8:	701a      	strb	r2, [r3, #0]
 80230aa:	e002      	b.n	80230b2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80230ac:	4b08      	ldr	r3, [pc, #32]	; (80230d0 <BSP_SDRAM_Init+0xb8>)
 80230ae:	2200      	movs	r2, #0
 80230b0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80230b2:	f240 506a 	movw	r0, #1386	; 0x56a
 80230b6:	f000 f80d 	bl	80230d4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80230ba:	4b05      	ldr	r3, [pc, #20]	; (80230d0 <BSP_SDRAM_Init+0xb8>)
 80230bc:	781b      	ldrb	r3, [r3, #0]
}
 80230be:	4618      	mov	r0, r3
 80230c0:	bd80      	pop	{r7, pc}
 80230c2:	bf00      	nop
 80230c4:	20000a2c 	.word	0x20000a2c
 80230c8:	a0000140 	.word	0xa0000140
 80230cc:	20000a60 	.word	0x20000a60
 80230d0:	20000050 	.word	0x20000050

080230d4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80230d4:	b580      	push	{r7, lr}
 80230d6:	b084      	sub	sp, #16
 80230d8:	af00      	add	r7, sp, #0
 80230da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80230dc:	2300      	movs	r3, #0
 80230de:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80230e0:	4b2a      	ldr	r3, [pc, #168]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80230e2:	2201      	movs	r2, #1
 80230e4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80230e6:	4b29      	ldr	r3, [pc, #164]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80230e8:	2208      	movs	r2, #8
 80230ea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80230ec:	4b27      	ldr	r3, [pc, #156]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80230ee:	2201      	movs	r2, #1
 80230f0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80230f2:	4b26      	ldr	r3, [pc, #152]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80230f4:	2200      	movs	r2, #0
 80230f6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80230f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80230fc:	4923      	ldr	r1, [pc, #140]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80230fe:	4824      	ldr	r0, [pc, #144]	; (8023190 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8023100:	f004 fc26 	bl	8027950 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8023104:	2001      	movs	r0, #1
 8023106:	f000 f993 	bl	8023430 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 802310a:	4b20      	ldr	r3, [pc, #128]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 802310c:	2202      	movs	r2, #2
 802310e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8023110:	4b1e      	ldr	r3, [pc, #120]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023112:	2208      	movs	r2, #8
 8023114:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8023116:	4b1d      	ldr	r3, [pc, #116]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023118:	2201      	movs	r2, #1
 802311a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 802311c:	4b1b      	ldr	r3, [pc, #108]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 802311e:	2200      	movs	r2, #0
 8023120:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8023122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023126:	4919      	ldr	r1, [pc, #100]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023128:	4819      	ldr	r0, [pc, #100]	; (8023190 <BSP_SDRAM_Initialization_sequence+0xbc>)
 802312a:	f004 fc11 	bl	8027950 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 802312e:	4b17      	ldr	r3, [pc, #92]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023130:	2203      	movs	r2, #3
 8023132:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8023134:	4b15      	ldr	r3, [pc, #84]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023136:	2208      	movs	r2, #8
 8023138:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 802313a:	4b14      	ldr	r3, [pc, #80]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 802313c:	2204      	movs	r2, #4
 802313e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8023140:	4b12      	ldr	r3, [pc, #72]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023142:	2200      	movs	r2, #0
 8023144:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8023146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802314a:	4910      	ldr	r1, [pc, #64]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 802314c:	4810      	ldr	r0, [pc, #64]	; (8023190 <BSP_SDRAM_Initialization_sequence+0xbc>)
 802314e:	f004 fbff 	bl	8027950 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8023152:	f44f 730c 	mov.w	r3, #560	; 0x230
 8023156:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8023158:	4b0c      	ldr	r3, [pc, #48]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 802315a:	2204      	movs	r2, #4
 802315c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 802315e:	4b0b      	ldr	r3, [pc, #44]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023160:	2208      	movs	r2, #8
 8023162:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8023164:	4b09      	ldr	r3, [pc, #36]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023166:	2201      	movs	r2, #1
 8023168:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 802316a:	68fb      	ldr	r3, [r7, #12]
 802316c:	4a07      	ldr	r2, [pc, #28]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 802316e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8023170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023174:	4905      	ldr	r1, [pc, #20]	; (802318c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023176:	4806      	ldr	r0, [pc, #24]	; (8023190 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8023178:	f004 fbea 	bl	8027950 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 802317c:	6879      	ldr	r1, [r7, #4]
 802317e:	4804      	ldr	r0, [pc, #16]	; (8023190 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8023180:	f004 fc1b 	bl	80279ba <HAL_SDRAM_ProgramRefreshRate>
}
 8023184:	bf00      	nop
 8023186:	3710      	adds	r7, #16
 8023188:	46bd      	mov	sp, r7
 802318a:	bd80      	pop	{r7, pc}
 802318c:	20000a7c 	.word	0x20000a7c
 8023190:	20000a2c 	.word	0x20000a2c

08023194 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8023194:	b580      	push	{r7, lr}
 8023196:	b090      	sub	sp, #64	; 0x40
 8023198:	af00      	add	r7, sp, #0
 802319a:	6078      	str	r0, [r7, #4]
 802319c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 802319e:	687b      	ldr	r3, [r7, #4]
 80231a0:	2b00      	cmp	r3, #0
 80231a2:	f000 80ec 	beq.w	802337e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80231a6:	2300      	movs	r3, #0
 80231a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80231aa:	4b77      	ldr	r3, [pc, #476]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 80231ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80231ae:	4a76      	ldr	r2, [pc, #472]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 80231b0:	f043 0301 	orr.w	r3, r3, #1
 80231b4:	6393      	str	r3, [r2, #56]	; 0x38
 80231b6:	4b74      	ldr	r3, [pc, #464]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 80231b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80231ba:	f003 0301 	and.w	r3, r3, #1
 80231be:	62bb      	str	r3, [r7, #40]	; 0x28
 80231c0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80231c2:	2300      	movs	r3, #0
 80231c4:	627b      	str	r3, [r7, #36]	; 0x24
 80231c6:	4b70      	ldr	r3, [pc, #448]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 80231c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231ca:	4a6f      	ldr	r2, [pc, #444]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 80231cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80231d0:	6313      	str	r3, [r2, #48]	; 0x30
 80231d2:	4b6d      	ldr	r3, [pc, #436]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 80231d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80231da:	627b      	str	r3, [r7, #36]	; 0x24
 80231dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80231de:	2300      	movs	r3, #0
 80231e0:	623b      	str	r3, [r7, #32]
 80231e2:	4b69      	ldr	r3, [pc, #420]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 80231e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231e6:	4a68      	ldr	r2, [pc, #416]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 80231e8:	f043 0302 	orr.w	r3, r3, #2
 80231ec:	6313      	str	r3, [r2, #48]	; 0x30
 80231ee:	4b66      	ldr	r3, [pc, #408]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 80231f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231f2:	f003 0302 	and.w	r3, r3, #2
 80231f6:	623b      	str	r3, [r7, #32]
 80231f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80231fa:	2300      	movs	r3, #0
 80231fc:	61fb      	str	r3, [r7, #28]
 80231fe:	4b62      	ldr	r3, [pc, #392]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 8023200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023202:	4a61      	ldr	r2, [pc, #388]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 8023204:	f043 0304 	orr.w	r3, r3, #4
 8023208:	6313      	str	r3, [r2, #48]	; 0x30
 802320a:	4b5f      	ldr	r3, [pc, #380]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 802320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802320e:	f003 0304 	and.w	r3, r3, #4
 8023212:	61fb      	str	r3, [r7, #28]
 8023214:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8023216:	2300      	movs	r3, #0
 8023218:	61bb      	str	r3, [r7, #24]
 802321a:	4b5b      	ldr	r3, [pc, #364]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 802321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802321e:	4a5a      	ldr	r2, [pc, #360]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 8023220:	f043 0308 	orr.w	r3, r3, #8
 8023224:	6313      	str	r3, [r2, #48]	; 0x30
 8023226:	4b58      	ldr	r3, [pc, #352]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 8023228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802322a:	f003 0308 	and.w	r3, r3, #8
 802322e:	61bb      	str	r3, [r7, #24]
 8023230:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8023232:	2300      	movs	r3, #0
 8023234:	617b      	str	r3, [r7, #20]
 8023236:	4b54      	ldr	r3, [pc, #336]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 8023238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802323a:	4a53      	ldr	r2, [pc, #332]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 802323c:	f043 0310 	orr.w	r3, r3, #16
 8023240:	6313      	str	r3, [r2, #48]	; 0x30
 8023242:	4b51      	ldr	r3, [pc, #324]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 8023244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023246:	f003 0310 	and.w	r3, r3, #16
 802324a:	617b      	str	r3, [r7, #20]
 802324c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 802324e:	2300      	movs	r3, #0
 8023250:	613b      	str	r3, [r7, #16]
 8023252:	4b4d      	ldr	r3, [pc, #308]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 8023254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023256:	4a4c      	ldr	r2, [pc, #304]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 8023258:	f043 0320 	orr.w	r3, r3, #32
 802325c:	6313      	str	r3, [r2, #48]	; 0x30
 802325e:	4b4a      	ldr	r3, [pc, #296]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 8023260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023262:	f003 0320 	and.w	r3, r3, #32
 8023266:	613b      	str	r3, [r7, #16]
 8023268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 802326a:	2300      	movs	r3, #0
 802326c:	60fb      	str	r3, [r7, #12]
 802326e:	4b46      	ldr	r3, [pc, #280]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 8023270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023272:	4a45      	ldr	r2, [pc, #276]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 8023274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023278:	6313      	str	r3, [r2, #48]	; 0x30
 802327a:	4b43      	ldr	r3, [pc, #268]	; (8023388 <BSP_SDRAM_MspInit+0x1f4>)
 802327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023282:	60fb      	str	r3, [r7, #12]
 8023284:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8023286:	2302      	movs	r3, #2
 8023288:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 802328a:	2302      	movs	r3, #2
 802328c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 802328e:	2300      	movs	r3, #0
 8023290:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8023292:	230c      	movs	r3, #12
 8023294:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8023296:	2360      	movs	r3, #96	; 0x60
 8023298:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 802329a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802329e:	4619      	mov	r1, r3
 80232a0:	483a      	ldr	r0, [pc, #232]	; (802338c <BSP_SDRAM_MspInit+0x1f8>)
 80232a2:	f000 ffd3 	bl	802424c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80232a6:	2301      	movs	r3, #1
 80232a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80232aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80232ae:	4619      	mov	r1, r3
 80232b0:	4837      	ldr	r0, [pc, #220]	; (8023390 <BSP_SDRAM_MspInit+0x1fc>)
 80232b2:	f000 ffcb 	bl	802424c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80232b6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80232ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80232bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80232c0:	4619      	mov	r1, r3
 80232c2:	4834      	ldr	r0, [pc, #208]	; (8023394 <BSP_SDRAM_MspInit+0x200>)
 80232c4:	f000 ffc2 	bl	802424c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80232c8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80232cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80232ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80232d2:	4619      	mov	r1, r3
 80232d4:	4830      	ldr	r0, [pc, #192]	; (8023398 <BSP_SDRAM_MspInit+0x204>)
 80232d6:	f000 ffb9 	bl	802424c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80232da:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80232de:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80232e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80232e4:	4619      	mov	r1, r3
 80232e6:	482d      	ldr	r0, [pc, #180]	; (802339c <BSP_SDRAM_MspInit+0x208>)
 80232e8:	f000 ffb0 	bl	802424c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80232ec:	f248 1333 	movw	r3, #33075	; 0x8133
 80232f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80232f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80232f6:	4619      	mov	r1, r3
 80232f8:	4829      	ldr	r0, [pc, #164]	; (80233a0 <BSP_SDRAM_MspInit+0x20c>)
 80232fa:	f000 ffa7 	bl	802424c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80232fe:	4b29      	ldr	r3, [pc, #164]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 8023300:	2200      	movs	r2, #0
 8023302:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8023304:	4b27      	ldr	r3, [pc, #156]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 8023306:	2280      	movs	r2, #128	; 0x80
 8023308:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 802330a:	4b26      	ldr	r3, [pc, #152]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 802330c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023310:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8023312:	4b24      	ldr	r3, [pc, #144]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 8023314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8023318:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 802331a:	4b22      	ldr	r3, [pc, #136]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 802331c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8023320:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8023322:	4b20      	ldr	r3, [pc, #128]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 8023324:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8023328:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 802332a:	4b1e      	ldr	r3, [pc, #120]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 802332c:	2200      	movs	r2, #0
 802332e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8023330:	4b1c      	ldr	r3, [pc, #112]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 8023332:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8023336:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8023338:	4b1a      	ldr	r3, [pc, #104]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 802333a:	2200      	movs	r2, #0
 802333c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 802333e:	4b19      	ldr	r3, [pc, #100]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 8023340:	2203      	movs	r2, #3
 8023342:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8023344:	4b17      	ldr	r3, [pc, #92]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 8023346:	2200      	movs	r2, #0
 8023348:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 802334a:	4b16      	ldr	r3, [pc, #88]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 802334c:	2200      	movs	r2, #0
 802334e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8023350:	4b14      	ldr	r3, [pc, #80]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 8023352:	4a15      	ldr	r2, [pc, #84]	; (80233a8 <BSP_SDRAM_MspInit+0x214>)
 8023354:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8023356:	687b      	ldr	r3, [r7, #4]
 8023358:	4a12      	ldr	r2, [pc, #72]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 802335a:	631a      	str	r2, [r3, #48]	; 0x30
 802335c:	4a11      	ldr	r2, [pc, #68]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 802335e:	687b      	ldr	r3, [r7, #4]
 8023360:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8023362:	4810      	ldr	r0, [pc, #64]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 8023364:	f000 fa34 	bl	80237d0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8023368:	480e      	ldr	r0, [pc, #56]	; (80233a4 <BSP_SDRAM_MspInit+0x210>)
 802336a:	f000 f983 	bl	8023674 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 802336e:	2200      	movs	r2, #0
 8023370:	210f      	movs	r1, #15
 8023372:	2038      	movs	r0, #56	; 0x38
 8023374:	f000 f938 	bl	80235e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8023378:	2038      	movs	r0, #56	; 0x38
 802337a:	f000 f951 	bl	8023620 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 802337e:	bf00      	nop
 8023380:	3740      	adds	r7, #64	; 0x40
 8023382:	46bd      	mov	sp, r7
 8023384:	bd80      	pop	{r7, pc}
 8023386:	bf00      	nop
 8023388:	40023800 	.word	0x40023800
 802338c:	40020400 	.word	0x40020400
 8023390:	40020800 	.word	0x40020800
 8023394:	40020c00 	.word	0x40020c00
 8023398:	40021000 	.word	0x40021000
 802339c:	40021400 	.word	0x40021400
 80233a0:	40021800 	.word	0x40021800
 80233a4:	20000a8c 	.word	0x20000a8c
 80233a8:	40026410 	.word	0x40026410

080233ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80233ac:	b580      	push	{r7, lr}
 80233ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80233b0:	4b0e      	ldr	r3, [pc, #56]	; (80233ec <HAL_Init+0x40>)
 80233b2:	681b      	ldr	r3, [r3, #0]
 80233b4:	4a0d      	ldr	r2, [pc, #52]	; (80233ec <HAL_Init+0x40>)
 80233b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80233ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80233bc:	4b0b      	ldr	r3, [pc, #44]	; (80233ec <HAL_Init+0x40>)
 80233be:	681b      	ldr	r3, [r3, #0]
 80233c0:	4a0a      	ldr	r2, [pc, #40]	; (80233ec <HAL_Init+0x40>)
 80233c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80233c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80233c8:	4b08      	ldr	r3, [pc, #32]	; (80233ec <HAL_Init+0x40>)
 80233ca:	681b      	ldr	r3, [r3, #0]
 80233cc:	4a07      	ldr	r2, [pc, #28]	; (80233ec <HAL_Init+0x40>)
 80233ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80233d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80233d4:	2003      	movs	r0, #3
 80233d6:	f000 f8fc 	bl	80235d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80233da:	200f      	movs	r0, #15
 80233dc:	f7fe fc38 	bl	8021c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80233e0:	f7fe f85e 	bl	80214a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80233e4:	2300      	movs	r3, #0
}
 80233e6:	4618      	mov	r0, r3
 80233e8:	bd80      	pop	{r7, pc}
 80233ea:	bf00      	nop
 80233ec:	40023c00 	.word	0x40023c00

080233f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80233f0:	b480      	push	{r7}
 80233f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80233f4:	4b06      	ldr	r3, [pc, #24]	; (8023410 <HAL_IncTick+0x20>)
 80233f6:	781b      	ldrb	r3, [r3, #0]
 80233f8:	461a      	mov	r2, r3
 80233fa:	4b06      	ldr	r3, [pc, #24]	; (8023414 <HAL_IncTick+0x24>)
 80233fc:	681b      	ldr	r3, [r3, #0]
 80233fe:	4413      	add	r3, r2
 8023400:	4a04      	ldr	r2, [pc, #16]	; (8023414 <HAL_IncTick+0x24>)
 8023402:	6013      	str	r3, [r2, #0]
}
 8023404:	bf00      	nop
 8023406:	46bd      	mov	sp, r7
 8023408:	f85d 7b04 	ldr.w	r7, [sp], #4
 802340c:	4770      	bx	lr
 802340e:	bf00      	nop
 8023410:	20000058 	.word	0x20000058
 8023414:	20000aec 	.word	0x20000aec

08023418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8023418:	b480      	push	{r7}
 802341a:	af00      	add	r7, sp, #0
  return uwTick;
 802341c:	4b03      	ldr	r3, [pc, #12]	; (802342c <HAL_GetTick+0x14>)
 802341e:	681b      	ldr	r3, [r3, #0]
}
 8023420:	4618      	mov	r0, r3
 8023422:	46bd      	mov	sp, r7
 8023424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023428:	4770      	bx	lr
 802342a:	bf00      	nop
 802342c:	20000aec 	.word	0x20000aec

08023430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8023430:	b580      	push	{r7, lr}
 8023432:	b084      	sub	sp, #16
 8023434:	af00      	add	r7, sp, #0
 8023436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8023438:	f7ff ffee 	bl	8023418 <HAL_GetTick>
 802343c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802343e:	687b      	ldr	r3, [r7, #4]
 8023440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8023442:	68fb      	ldr	r3, [r7, #12]
 8023444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023448:	d005      	beq.n	8023456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802344a:	4b0a      	ldr	r3, [pc, #40]	; (8023474 <HAL_Delay+0x44>)
 802344c:	781b      	ldrb	r3, [r3, #0]
 802344e:	461a      	mov	r2, r3
 8023450:	68fb      	ldr	r3, [r7, #12]
 8023452:	4413      	add	r3, r2
 8023454:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8023456:	bf00      	nop
 8023458:	f7ff ffde 	bl	8023418 <HAL_GetTick>
 802345c:	4602      	mov	r2, r0
 802345e:	68bb      	ldr	r3, [r7, #8]
 8023460:	1ad3      	subs	r3, r2, r3
 8023462:	68fa      	ldr	r2, [r7, #12]
 8023464:	429a      	cmp	r2, r3
 8023466:	d8f7      	bhi.n	8023458 <HAL_Delay+0x28>
  {
  }
}
 8023468:	bf00      	nop
 802346a:	bf00      	nop
 802346c:	3710      	adds	r7, #16
 802346e:	46bd      	mov	sp, r7
 8023470:	bd80      	pop	{r7, pc}
 8023472:	bf00      	nop
 8023474:	20000058 	.word	0x20000058

08023478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8023478:	b480      	push	{r7}
 802347a:	b085      	sub	sp, #20
 802347c:	af00      	add	r7, sp, #0
 802347e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8023480:	687b      	ldr	r3, [r7, #4]
 8023482:	f003 0307 	and.w	r3, r3, #7
 8023486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8023488:	4b0c      	ldr	r3, [pc, #48]	; (80234bc <__NVIC_SetPriorityGrouping+0x44>)
 802348a:	68db      	ldr	r3, [r3, #12]
 802348c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802348e:	68ba      	ldr	r2, [r7, #8]
 8023490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8023494:	4013      	ands	r3, r2
 8023496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8023498:	68fb      	ldr	r3, [r7, #12]
 802349a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802349c:	68bb      	ldr	r3, [r7, #8]
 802349e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80234a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80234a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80234a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80234aa:	4a04      	ldr	r2, [pc, #16]	; (80234bc <__NVIC_SetPriorityGrouping+0x44>)
 80234ac:	68bb      	ldr	r3, [r7, #8]
 80234ae:	60d3      	str	r3, [r2, #12]
}
 80234b0:	bf00      	nop
 80234b2:	3714      	adds	r7, #20
 80234b4:	46bd      	mov	sp, r7
 80234b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234ba:	4770      	bx	lr
 80234bc:	e000ed00 	.word	0xe000ed00

080234c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80234c0:	b480      	push	{r7}
 80234c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80234c4:	4b04      	ldr	r3, [pc, #16]	; (80234d8 <__NVIC_GetPriorityGrouping+0x18>)
 80234c6:	68db      	ldr	r3, [r3, #12]
 80234c8:	0a1b      	lsrs	r3, r3, #8
 80234ca:	f003 0307 	and.w	r3, r3, #7
}
 80234ce:	4618      	mov	r0, r3
 80234d0:	46bd      	mov	sp, r7
 80234d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234d6:	4770      	bx	lr
 80234d8:	e000ed00 	.word	0xe000ed00

080234dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80234dc:	b480      	push	{r7}
 80234de:	b083      	sub	sp, #12
 80234e0:	af00      	add	r7, sp, #0
 80234e2:	4603      	mov	r3, r0
 80234e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80234e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80234ea:	2b00      	cmp	r3, #0
 80234ec:	db0b      	blt.n	8023506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80234ee:	79fb      	ldrb	r3, [r7, #7]
 80234f0:	f003 021f 	and.w	r2, r3, #31
 80234f4:	4907      	ldr	r1, [pc, #28]	; (8023514 <__NVIC_EnableIRQ+0x38>)
 80234f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80234fa:	095b      	lsrs	r3, r3, #5
 80234fc:	2001      	movs	r0, #1
 80234fe:	fa00 f202 	lsl.w	r2, r0, r2
 8023502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8023506:	bf00      	nop
 8023508:	370c      	adds	r7, #12
 802350a:	46bd      	mov	sp, r7
 802350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023510:	4770      	bx	lr
 8023512:	bf00      	nop
 8023514:	e000e100 	.word	0xe000e100

08023518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8023518:	b480      	push	{r7}
 802351a:	b083      	sub	sp, #12
 802351c:	af00      	add	r7, sp, #0
 802351e:	4603      	mov	r3, r0
 8023520:	6039      	str	r1, [r7, #0]
 8023522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8023524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023528:	2b00      	cmp	r3, #0
 802352a:	db0a      	blt.n	8023542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802352c:	683b      	ldr	r3, [r7, #0]
 802352e:	b2da      	uxtb	r2, r3
 8023530:	490c      	ldr	r1, [pc, #48]	; (8023564 <__NVIC_SetPriority+0x4c>)
 8023532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023536:	0112      	lsls	r2, r2, #4
 8023538:	b2d2      	uxtb	r2, r2
 802353a:	440b      	add	r3, r1
 802353c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8023540:	e00a      	b.n	8023558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023542:	683b      	ldr	r3, [r7, #0]
 8023544:	b2da      	uxtb	r2, r3
 8023546:	4908      	ldr	r1, [pc, #32]	; (8023568 <__NVIC_SetPriority+0x50>)
 8023548:	79fb      	ldrb	r3, [r7, #7]
 802354a:	f003 030f 	and.w	r3, r3, #15
 802354e:	3b04      	subs	r3, #4
 8023550:	0112      	lsls	r2, r2, #4
 8023552:	b2d2      	uxtb	r2, r2
 8023554:	440b      	add	r3, r1
 8023556:	761a      	strb	r2, [r3, #24]
}
 8023558:	bf00      	nop
 802355a:	370c      	adds	r7, #12
 802355c:	46bd      	mov	sp, r7
 802355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023562:	4770      	bx	lr
 8023564:	e000e100 	.word	0xe000e100
 8023568:	e000ed00 	.word	0xe000ed00

0802356c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802356c:	b480      	push	{r7}
 802356e:	b089      	sub	sp, #36	; 0x24
 8023570:	af00      	add	r7, sp, #0
 8023572:	60f8      	str	r0, [r7, #12]
 8023574:	60b9      	str	r1, [r7, #8]
 8023576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8023578:	68fb      	ldr	r3, [r7, #12]
 802357a:	f003 0307 	and.w	r3, r3, #7
 802357e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8023580:	69fb      	ldr	r3, [r7, #28]
 8023582:	f1c3 0307 	rsb	r3, r3, #7
 8023586:	2b04      	cmp	r3, #4
 8023588:	bf28      	it	cs
 802358a:	2304      	movcs	r3, #4
 802358c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802358e:	69fb      	ldr	r3, [r7, #28]
 8023590:	3304      	adds	r3, #4
 8023592:	2b06      	cmp	r3, #6
 8023594:	d902      	bls.n	802359c <NVIC_EncodePriority+0x30>
 8023596:	69fb      	ldr	r3, [r7, #28]
 8023598:	3b03      	subs	r3, #3
 802359a:	e000      	b.n	802359e <NVIC_EncodePriority+0x32>
 802359c:	2300      	movs	r3, #0
 802359e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80235a0:	f04f 32ff 	mov.w	r2, #4294967295
 80235a4:	69bb      	ldr	r3, [r7, #24]
 80235a6:	fa02 f303 	lsl.w	r3, r2, r3
 80235aa:	43da      	mvns	r2, r3
 80235ac:	68bb      	ldr	r3, [r7, #8]
 80235ae:	401a      	ands	r2, r3
 80235b0:	697b      	ldr	r3, [r7, #20]
 80235b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80235b4:	f04f 31ff 	mov.w	r1, #4294967295
 80235b8:	697b      	ldr	r3, [r7, #20]
 80235ba:	fa01 f303 	lsl.w	r3, r1, r3
 80235be:	43d9      	mvns	r1, r3
 80235c0:	687b      	ldr	r3, [r7, #4]
 80235c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80235c4:	4313      	orrs	r3, r2
         );
}
 80235c6:	4618      	mov	r0, r3
 80235c8:	3724      	adds	r7, #36	; 0x24
 80235ca:	46bd      	mov	sp, r7
 80235cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235d0:	4770      	bx	lr

080235d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80235d2:	b580      	push	{r7, lr}
 80235d4:	b082      	sub	sp, #8
 80235d6:	af00      	add	r7, sp, #0
 80235d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80235da:	6878      	ldr	r0, [r7, #4]
 80235dc:	f7ff ff4c 	bl	8023478 <__NVIC_SetPriorityGrouping>
}
 80235e0:	bf00      	nop
 80235e2:	3708      	adds	r7, #8
 80235e4:	46bd      	mov	sp, r7
 80235e6:	bd80      	pop	{r7, pc}

080235e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80235e8:	b580      	push	{r7, lr}
 80235ea:	b086      	sub	sp, #24
 80235ec:	af00      	add	r7, sp, #0
 80235ee:	4603      	mov	r3, r0
 80235f0:	60b9      	str	r1, [r7, #8]
 80235f2:	607a      	str	r2, [r7, #4]
 80235f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80235f6:	2300      	movs	r3, #0
 80235f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80235fa:	f7ff ff61 	bl	80234c0 <__NVIC_GetPriorityGrouping>
 80235fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8023600:	687a      	ldr	r2, [r7, #4]
 8023602:	68b9      	ldr	r1, [r7, #8]
 8023604:	6978      	ldr	r0, [r7, #20]
 8023606:	f7ff ffb1 	bl	802356c <NVIC_EncodePriority>
 802360a:	4602      	mov	r2, r0
 802360c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8023610:	4611      	mov	r1, r2
 8023612:	4618      	mov	r0, r3
 8023614:	f7ff ff80 	bl	8023518 <__NVIC_SetPriority>
}
 8023618:	bf00      	nop
 802361a:	3718      	adds	r7, #24
 802361c:	46bd      	mov	sp, r7
 802361e:	bd80      	pop	{r7, pc}

08023620 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023620:	b580      	push	{r7, lr}
 8023622:	b082      	sub	sp, #8
 8023624:	af00      	add	r7, sp, #0
 8023626:	4603      	mov	r3, r0
 8023628:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802362e:	4618      	mov	r0, r3
 8023630:	f7ff ff54 	bl	80234dc <__NVIC_EnableIRQ>
}
 8023634:	bf00      	nop
 8023636:	3708      	adds	r7, #8
 8023638:	46bd      	mov	sp, r7
 802363a:	bd80      	pop	{r7, pc}

0802363c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 802363c:	b580      	push	{r7, lr}
 802363e:	b082      	sub	sp, #8
 8023640:	af00      	add	r7, sp, #0
 8023642:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8023644:	687b      	ldr	r3, [r7, #4]
 8023646:	2b00      	cmp	r3, #0
 8023648:	d101      	bne.n	802364e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 802364a:	2301      	movs	r3, #1
 802364c:	e00e      	b.n	802366c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 802364e:	687b      	ldr	r3, [r7, #4]
 8023650:	795b      	ldrb	r3, [r3, #5]
 8023652:	b2db      	uxtb	r3, r3
 8023654:	2b00      	cmp	r3, #0
 8023656:	d105      	bne.n	8023664 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8023658:	687b      	ldr	r3, [r7, #4]
 802365a:	2200      	movs	r2, #0
 802365c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 802365e:	6878      	ldr	r0, [r7, #4]
 8023660:	f7fd ff46 	bl	80214f0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8023664:	687b      	ldr	r3, [r7, #4]
 8023666:	2201      	movs	r2, #1
 8023668:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802366a:	2300      	movs	r3, #0
}
 802366c:	4618      	mov	r0, r3
 802366e:	3708      	adds	r7, #8
 8023670:	46bd      	mov	sp, r7
 8023672:	bd80      	pop	{r7, pc}

08023674 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8023674:	b580      	push	{r7, lr}
 8023676:	b086      	sub	sp, #24
 8023678:	af00      	add	r7, sp, #0
 802367a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 802367c:	2300      	movs	r3, #0
 802367e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8023680:	f7ff feca 	bl	8023418 <HAL_GetTick>
 8023684:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8023686:	687b      	ldr	r3, [r7, #4]
 8023688:	2b00      	cmp	r3, #0
 802368a:	d101      	bne.n	8023690 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 802368c:	2301      	movs	r3, #1
 802368e:	e099      	b.n	80237c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8023690:	687b      	ldr	r3, [r7, #4]
 8023692:	2202      	movs	r2, #2
 8023694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8023698:	687b      	ldr	r3, [r7, #4]
 802369a:	2200      	movs	r2, #0
 802369c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80236a0:	687b      	ldr	r3, [r7, #4]
 80236a2:	681b      	ldr	r3, [r3, #0]
 80236a4:	681a      	ldr	r2, [r3, #0]
 80236a6:	687b      	ldr	r3, [r7, #4]
 80236a8:	681b      	ldr	r3, [r3, #0]
 80236aa:	f022 0201 	bic.w	r2, r2, #1
 80236ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80236b0:	e00f      	b.n	80236d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80236b2:	f7ff feb1 	bl	8023418 <HAL_GetTick>
 80236b6:	4602      	mov	r2, r0
 80236b8:	693b      	ldr	r3, [r7, #16]
 80236ba:	1ad3      	subs	r3, r2, r3
 80236bc:	2b05      	cmp	r3, #5
 80236be:	d908      	bls.n	80236d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80236c0:	687b      	ldr	r3, [r7, #4]
 80236c2:	2220      	movs	r2, #32
 80236c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80236c6:	687b      	ldr	r3, [r7, #4]
 80236c8:	2203      	movs	r2, #3
 80236ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80236ce:	2303      	movs	r3, #3
 80236d0:	e078      	b.n	80237c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80236d2:	687b      	ldr	r3, [r7, #4]
 80236d4:	681b      	ldr	r3, [r3, #0]
 80236d6:	681b      	ldr	r3, [r3, #0]
 80236d8:	f003 0301 	and.w	r3, r3, #1
 80236dc:	2b00      	cmp	r3, #0
 80236de:	d1e8      	bne.n	80236b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80236e0:	687b      	ldr	r3, [r7, #4]
 80236e2:	681b      	ldr	r3, [r3, #0]
 80236e4:	681b      	ldr	r3, [r3, #0]
 80236e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80236e8:	697a      	ldr	r2, [r7, #20]
 80236ea:	4b38      	ldr	r3, [pc, #224]	; (80237cc <HAL_DMA_Init+0x158>)
 80236ec:	4013      	ands	r3, r2
 80236ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80236f0:	687b      	ldr	r3, [r7, #4]
 80236f2:	685a      	ldr	r2, [r3, #4]
 80236f4:	687b      	ldr	r3, [r7, #4]
 80236f6:	689b      	ldr	r3, [r3, #8]
 80236f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80236fa:	687b      	ldr	r3, [r7, #4]
 80236fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80236fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8023700:	687b      	ldr	r3, [r7, #4]
 8023702:	691b      	ldr	r3, [r3, #16]
 8023704:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8023706:	687b      	ldr	r3, [r7, #4]
 8023708:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802370a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802370c:	687b      	ldr	r3, [r7, #4]
 802370e:	699b      	ldr	r3, [r3, #24]
 8023710:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8023712:	687b      	ldr	r3, [r7, #4]
 8023714:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8023716:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8023718:	687b      	ldr	r3, [r7, #4]
 802371a:	6a1b      	ldr	r3, [r3, #32]
 802371c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802371e:	697a      	ldr	r2, [r7, #20]
 8023720:	4313      	orrs	r3, r2
 8023722:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8023724:	687b      	ldr	r3, [r7, #4]
 8023726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023728:	2b04      	cmp	r3, #4
 802372a:	d107      	bne.n	802373c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802372c:	687b      	ldr	r3, [r7, #4]
 802372e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023730:	687b      	ldr	r3, [r7, #4]
 8023732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023734:	4313      	orrs	r3, r2
 8023736:	697a      	ldr	r2, [r7, #20]
 8023738:	4313      	orrs	r3, r2
 802373a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 802373c:	687b      	ldr	r3, [r7, #4]
 802373e:	681b      	ldr	r3, [r3, #0]
 8023740:	697a      	ldr	r2, [r7, #20]
 8023742:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8023744:	687b      	ldr	r3, [r7, #4]
 8023746:	681b      	ldr	r3, [r3, #0]
 8023748:	695b      	ldr	r3, [r3, #20]
 802374a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802374c:	697b      	ldr	r3, [r7, #20]
 802374e:	f023 0307 	bic.w	r3, r3, #7
 8023752:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8023754:	687b      	ldr	r3, [r7, #4]
 8023756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023758:	697a      	ldr	r2, [r7, #20]
 802375a:	4313      	orrs	r3, r2
 802375c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802375e:	687b      	ldr	r3, [r7, #4]
 8023760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023762:	2b04      	cmp	r3, #4
 8023764:	d117      	bne.n	8023796 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8023766:	687b      	ldr	r3, [r7, #4]
 8023768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802376a:	697a      	ldr	r2, [r7, #20]
 802376c:	4313      	orrs	r3, r2
 802376e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8023770:	687b      	ldr	r3, [r7, #4]
 8023772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023774:	2b00      	cmp	r3, #0
 8023776:	d00e      	beq.n	8023796 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8023778:	6878      	ldr	r0, [r7, #4]
 802377a:	f000 f94f 	bl	8023a1c <DMA_CheckFifoParam>
 802377e:	4603      	mov	r3, r0
 8023780:	2b00      	cmp	r3, #0
 8023782:	d008      	beq.n	8023796 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8023784:	687b      	ldr	r3, [r7, #4]
 8023786:	2240      	movs	r2, #64	; 0x40
 8023788:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802378a:	687b      	ldr	r3, [r7, #4]
 802378c:	2201      	movs	r2, #1
 802378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8023792:	2301      	movs	r3, #1
 8023794:	e016      	b.n	80237c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8023796:	687b      	ldr	r3, [r7, #4]
 8023798:	681b      	ldr	r3, [r3, #0]
 802379a:	697a      	ldr	r2, [r7, #20]
 802379c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802379e:	6878      	ldr	r0, [r7, #4]
 80237a0:	f000 f906 	bl	80239b0 <DMA_CalcBaseAndBitshift>
 80237a4:	4603      	mov	r3, r0
 80237a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80237a8:	687b      	ldr	r3, [r7, #4]
 80237aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80237ac:	223f      	movs	r2, #63	; 0x3f
 80237ae:	409a      	lsls	r2, r3
 80237b0:	68fb      	ldr	r3, [r7, #12]
 80237b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80237b4:	687b      	ldr	r3, [r7, #4]
 80237b6:	2200      	movs	r2, #0
 80237b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80237ba:	687b      	ldr	r3, [r7, #4]
 80237bc:	2201      	movs	r2, #1
 80237be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80237c2:	2300      	movs	r3, #0
}
 80237c4:	4618      	mov	r0, r3
 80237c6:	3718      	adds	r7, #24
 80237c8:	46bd      	mov	sp, r7
 80237ca:	bd80      	pop	{r7, pc}
 80237cc:	f010803f 	.word	0xf010803f

080237d0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80237d0:	b580      	push	{r7, lr}
 80237d2:	b084      	sub	sp, #16
 80237d4:	af00      	add	r7, sp, #0
 80237d6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80237d8:	687b      	ldr	r3, [r7, #4]
 80237da:	2b00      	cmp	r3, #0
 80237dc:	d101      	bne.n	80237e2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80237de:	2301      	movs	r3, #1
 80237e0:	e050      	b.n	8023884 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80237e2:	687b      	ldr	r3, [r7, #4]
 80237e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80237e8:	b2db      	uxtb	r3, r3
 80237ea:	2b02      	cmp	r3, #2
 80237ec:	d101      	bne.n	80237f2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80237ee:	2302      	movs	r3, #2
 80237f0:	e048      	b.n	8023884 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80237f2:	687b      	ldr	r3, [r7, #4]
 80237f4:	681b      	ldr	r3, [r3, #0]
 80237f6:	681a      	ldr	r2, [r3, #0]
 80237f8:	687b      	ldr	r3, [r7, #4]
 80237fa:	681b      	ldr	r3, [r3, #0]
 80237fc:	f022 0201 	bic.w	r2, r2, #1
 8023800:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8023802:	687b      	ldr	r3, [r7, #4]
 8023804:	681b      	ldr	r3, [r3, #0]
 8023806:	2200      	movs	r2, #0
 8023808:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 802380a:	687b      	ldr	r3, [r7, #4]
 802380c:	681b      	ldr	r3, [r3, #0]
 802380e:	2200      	movs	r2, #0
 8023810:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8023812:	687b      	ldr	r3, [r7, #4]
 8023814:	681b      	ldr	r3, [r3, #0]
 8023816:	2200      	movs	r2, #0
 8023818:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 802381a:	687b      	ldr	r3, [r7, #4]
 802381c:	681b      	ldr	r3, [r3, #0]
 802381e:	2200      	movs	r2, #0
 8023820:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8023822:	687b      	ldr	r3, [r7, #4]
 8023824:	681b      	ldr	r3, [r3, #0]
 8023826:	2200      	movs	r2, #0
 8023828:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 802382a:	687b      	ldr	r3, [r7, #4]
 802382c:	681b      	ldr	r3, [r3, #0]
 802382e:	2221      	movs	r2, #33	; 0x21
 8023830:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8023832:	6878      	ldr	r0, [r7, #4]
 8023834:	f000 f8bc 	bl	80239b0 <DMA_CalcBaseAndBitshift>
 8023838:	4603      	mov	r3, r0
 802383a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 802383c:	687b      	ldr	r3, [r7, #4]
 802383e:	2200      	movs	r2, #0
 8023840:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8023842:	687b      	ldr	r3, [r7, #4]
 8023844:	2200      	movs	r2, #0
 8023846:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8023848:	687b      	ldr	r3, [r7, #4]
 802384a:	2200      	movs	r2, #0
 802384c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 802384e:	687b      	ldr	r3, [r7, #4]
 8023850:	2200      	movs	r2, #0
 8023852:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8023854:	687b      	ldr	r3, [r7, #4]
 8023856:	2200      	movs	r2, #0
 8023858:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 802385a:	687b      	ldr	r3, [r7, #4]
 802385c:	2200      	movs	r2, #0
 802385e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023860:	687b      	ldr	r3, [r7, #4]
 8023862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023864:	223f      	movs	r2, #63	; 0x3f
 8023866:	409a      	lsls	r2, r3
 8023868:	68fb      	ldr	r3, [r7, #12]
 802386a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802386c:	687b      	ldr	r3, [r7, #4]
 802386e:	2200      	movs	r2, #0
 8023870:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8023872:	687b      	ldr	r3, [r7, #4]
 8023874:	2200      	movs	r2, #0
 8023876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 802387a:	687b      	ldr	r3, [r7, #4]
 802387c:	2200      	movs	r2, #0
 802387e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8023882:	2300      	movs	r3, #0
}
 8023884:	4618      	mov	r0, r3
 8023886:	3710      	adds	r7, #16
 8023888:	46bd      	mov	sp, r7
 802388a:	bd80      	pop	{r7, pc}

0802388c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 802388c:	b580      	push	{r7, lr}
 802388e:	b084      	sub	sp, #16
 8023890:	af00      	add	r7, sp, #0
 8023892:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8023894:	687b      	ldr	r3, [r7, #4]
 8023896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023898:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 802389a:	f7ff fdbd 	bl	8023418 <HAL_GetTick>
 802389e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80238a0:	687b      	ldr	r3, [r7, #4]
 80238a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80238a6:	b2db      	uxtb	r3, r3
 80238a8:	2b02      	cmp	r3, #2
 80238aa:	d008      	beq.n	80238be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80238ac:	687b      	ldr	r3, [r7, #4]
 80238ae:	2280      	movs	r2, #128	; 0x80
 80238b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80238b2:	687b      	ldr	r3, [r7, #4]
 80238b4:	2200      	movs	r2, #0
 80238b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80238ba:	2301      	movs	r3, #1
 80238bc:	e052      	b.n	8023964 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80238be:	687b      	ldr	r3, [r7, #4]
 80238c0:	681b      	ldr	r3, [r3, #0]
 80238c2:	681a      	ldr	r2, [r3, #0]
 80238c4:	687b      	ldr	r3, [r7, #4]
 80238c6:	681b      	ldr	r3, [r3, #0]
 80238c8:	f022 0216 	bic.w	r2, r2, #22
 80238cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80238ce:	687b      	ldr	r3, [r7, #4]
 80238d0:	681b      	ldr	r3, [r3, #0]
 80238d2:	695a      	ldr	r2, [r3, #20]
 80238d4:	687b      	ldr	r3, [r7, #4]
 80238d6:	681b      	ldr	r3, [r3, #0]
 80238d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80238dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80238de:	687b      	ldr	r3, [r7, #4]
 80238e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80238e2:	2b00      	cmp	r3, #0
 80238e4:	d103      	bne.n	80238ee <HAL_DMA_Abort+0x62>
 80238e6:	687b      	ldr	r3, [r7, #4]
 80238e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80238ea:	2b00      	cmp	r3, #0
 80238ec:	d007      	beq.n	80238fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80238ee:	687b      	ldr	r3, [r7, #4]
 80238f0:	681b      	ldr	r3, [r3, #0]
 80238f2:	681a      	ldr	r2, [r3, #0]
 80238f4:	687b      	ldr	r3, [r7, #4]
 80238f6:	681b      	ldr	r3, [r3, #0]
 80238f8:	f022 0208 	bic.w	r2, r2, #8
 80238fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80238fe:	687b      	ldr	r3, [r7, #4]
 8023900:	681b      	ldr	r3, [r3, #0]
 8023902:	681a      	ldr	r2, [r3, #0]
 8023904:	687b      	ldr	r3, [r7, #4]
 8023906:	681b      	ldr	r3, [r3, #0]
 8023908:	f022 0201 	bic.w	r2, r2, #1
 802390c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802390e:	e013      	b.n	8023938 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8023910:	f7ff fd82 	bl	8023418 <HAL_GetTick>
 8023914:	4602      	mov	r2, r0
 8023916:	68bb      	ldr	r3, [r7, #8]
 8023918:	1ad3      	subs	r3, r2, r3
 802391a:	2b05      	cmp	r3, #5
 802391c:	d90c      	bls.n	8023938 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802391e:	687b      	ldr	r3, [r7, #4]
 8023920:	2220      	movs	r2, #32
 8023922:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8023924:	687b      	ldr	r3, [r7, #4]
 8023926:	2203      	movs	r2, #3
 8023928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802392c:	687b      	ldr	r3, [r7, #4]
 802392e:	2200      	movs	r2, #0
 8023930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8023934:	2303      	movs	r3, #3
 8023936:	e015      	b.n	8023964 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023938:	687b      	ldr	r3, [r7, #4]
 802393a:	681b      	ldr	r3, [r3, #0]
 802393c:	681b      	ldr	r3, [r3, #0]
 802393e:	f003 0301 	and.w	r3, r3, #1
 8023942:	2b00      	cmp	r3, #0
 8023944:	d1e4      	bne.n	8023910 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023946:	687b      	ldr	r3, [r7, #4]
 8023948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802394a:	223f      	movs	r2, #63	; 0x3f
 802394c:	409a      	lsls	r2, r3
 802394e:	68fb      	ldr	r3, [r7, #12]
 8023950:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8023952:	687b      	ldr	r3, [r7, #4]
 8023954:	2201      	movs	r2, #1
 8023956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802395a:	687b      	ldr	r3, [r7, #4]
 802395c:	2200      	movs	r2, #0
 802395e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8023962:	2300      	movs	r3, #0
}
 8023964:	4618      	mov	r0, r3
 8023966:	3710      	adds	r7, #16
 8023968:	46bd      	mov	sp, r7
 802396a:	bd80      	pop	{r7, pc}

0802396c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802396c:	b480      	push	{r7}
 802396e:	b083      	sub	sp, #12
 8023970:	af00      	add	r7, sp, #0
 8023972:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023974:	687b      	ldr	r3, [r7, #4]
 8023976:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802397a:	b2db      	uxtb	r3, r3
 802397c:	2b02      	cmp	r3, #2
 802397e:	d004      	beq.n	802398a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8023980:	687b      	ldr	r3, [r7, #4]
 8023982:	2280      	movs	r2, #128	; 0x80
 8023984:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8023986:	2301      	movs	r3, #1
 8023988:	e00c      	b.n	80239a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 802398a:	687b      	ldr	r3, [r7, #4]
 802398c:	2205      	movs	r2, #5
 802398e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8023992:	687b      	ldr	r3, [r7, #4]
 8023994:	681b      	ldr	r3, [r3, #0]
 8023996:	681a      	ldr	r2, [r3, #0]
 8023998:	687b      	ldr	r3, [r7, #4]
 802399a:	681b      	ldr	r3, [r3, #0]
 802399c:	f022 0201 	bic.w	r2, r2, #1
 80239a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80239a2:	2300      	movs	r3, #0
}
 80239a4:	4618      	mov	r0, r3
 80239a6:	370c      	adds	r7, #12
 80239a8:	46bd      	mov	sp, r7
 80239aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239ae:	4770      	bx	lr

080239b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80239b0:	b480      	push	{r7}
 80239b2:	b085      	sub	sp, #20
 80239b4:	af00      	add	r7, sp, #0
 80239b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80239b8:	687b      	ldr	r3, [r7, #4]
 80239ba:	681b      	ldr	r3, [r3, #0]
 80239bc:	b2db      	uxtb	r3, r3
 80239be:	3b10      	subs	r3, #16
 80239c0:	4a14      	ldr	r2, [pc, #80]	; (8023a14 <DMA_CalcBaseAndBitshift+0x64>)
 80239c2:	fba2 2303 	umull	r2, r3, r2, r3
 80239c6:	091b      	lsrs	r3, r3, #4
 80239c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80239ca:	4a13      	ldr	r2, [pc, #76]	; (8023a18 <DMA_CalcBaseAndBitshift+0x68>)
 80239cc:	68fb      	ldr	r3, [r7, #12]
 80239ce:	4413      	add	r3, r2
 80239d0:	781b      	ldrb	r3, [r3, #0]
 80239d2:	461a      	mov	r2, r3
 80239d4:	687b      	ldr	r3, [r7, #4]
 80239d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80239d8:	68fb      	ldr	r3, [r7, #12]
 80239da:	2b03      	cmp	r3, #3
 80239dc:	d909      	bls.n	80239f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80239de:	687b      	ldr	r3, [r7, #4]
 80239e0:	681b      	ldr	r3, [r3, #0]
 80239e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80239e6:	f023 0303 	bic.w	r3, r3, #3
 80239ea:	1d1a      	adds	r2, r3, #4
 80239ec:	687b      	ldr	r3, [r7, #4]
 80239ee:	659a      	str	r2, [r3, #88]	; 0x58
 80239f0:	e007      	b.n	8023a02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80239f2:	687b      	ldr	r3, [r7, #4]
 80239f4:	681b      	ldr	r3, [r3, #0]
 80239f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80239fa:	f023 0303 	bic.w	r3, r3, #3
 80239fe:	687a      	ldr	r2, [r7, #4]
 8023a00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8023a02:	687b      	ldr	r3, [r7, #4]
 8023a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8023a06:	4618      	mov	r0, r3
 8023a08:	3714      	adds	r7, #20
 8023a0a:	46bd      	mov	sp, r7
 8023a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a10:	4770      	bx	lr
 8023a12:	bf00      	nop
 8023a14:	aaaaaaab 	.word	0xaaaaaaab
 8023a18:	0803113c 	.word	0x0803113c

08023a1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8023a1c:	b480      	push	{r7}
 8023a1e:	b085      	sub	sp, #20
 8023a20:	af00      	add	r7, sp, #0
 8023a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8023a24:	2300      	movs	r3, #0
 8023a26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8023a28:	687b      	ldr	r3, [r7, #4]
 8023a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023a2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8023a2e:	687b      	ldr	r3, [r7, #4]
 8023a30:	699b      	ldr	r3, [r3, #24]
 8023a32:	2b00      	cmp	r3, #0
 8023a34:	d11f      	bne.n	8023a76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8023a36:	68bb      	ldr	r3, [r7, #8]
 8023a38:	2b03      	cmp	r3, #3
 8023a3a:	d856      	bhi.n	8023aea <DMA_CheckFifoParam+0xce>
 8023a3c:	a201      	add	r2, pc, #4	; (adr r2, 8023a44 <DMA_CheckFifoParam+0x28>)
 8023a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023a42:	bf00      	nop
 8023a44:	08023a55 	.word	0x08023a55
 8023a48:	08023a67 	.word	0x08023a67
 8023a4c:	08023a55 	.word	0x08023a55
 8023a50:	08023aeb 	.word	0x08023aeb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023a54:	687b      	ldr	r3, [r7, #4]
 8023a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023a5c:	2b00      	cmp	r3, #0
 8023a5e:	d046      	beq.n	8023aee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8023a60:	2301      	movs	r3, #1
 8023a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023a64:	e043      	b.n	8023aee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023a66:	687b      	ldr	r3, [r7, #4]
 8023a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023a6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023a6e:	d140      	bne.n	8023af2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8023a70:	2301      	movs	r3, #1
 8023a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023a74:	e03d      	b.n	8023af2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8023a76:	687b      	ldr	r3, [r7, #4]
 8023a78:	699b      	ldr	r3, [r3, #24]
 8023a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023a7e:	d121      	bne.n	8023ac4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8023a80:	68bb      	ldr	r3, [r7, #8]
 8023a82:	2b03      	cmp	r3, #3
 8023a84:	d837      	bhi.n	8023af6 <DMA_CheckFifoParam+0xda>
 8023a86:	a201      	add	r2, pc, #4	; (adr r2, 8023a8c <DMA_CheckFifoParam+0x70>)
 8023a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023a8c:	08023a9d 	.word	0x08023a9d
 8023a90:	08023aa3 	.word	0x08023aa3
 8023a94:	08023a9d 	.word	0x08023a9d
 8023a98:	08023ab5 	.word	0x08023ab5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8023a9c:	2301      	movs	r3, #1
 8023a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8023aa0:	e030      	b.n	8023b04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023aa2:	687b      	ldr	r3, [r7, #4]
 8023aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023aaa:	2b00      	cmp	r3, #0
 8023aac:	d025      	beq.n	8023afa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8023aae:	2301      	movs	r3, #1
 8023ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023ab2:	e022      	b.n	8023afa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023ab4:	687b      	ldr	r3, [r7, #4]
 8023ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023ab8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023abc:	d11f      	bne.n	8023afe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8023abe:	2301      	movs	r3, #1
 8023ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8023ac2:	e01c      	b.n	8023afe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8023ac4:	68bb      	ldr	r3, [r7, #8]
 8023ac6:	2b02      	cmp	r3, #2
 8023ac8:	d903      	bls.n	8023ad2 <DMA_CheckFifoParam+0xb6>
 8023aca:	68bb      	ldr	r3, [r7, #8]
 8023acc:	2b03      	cmp	r3, #3
 8023ace:	d003      	beq.n	8023ad8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8023ad0:	e018      	b.n	8023b04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8023ad2:	2301      	movs	r3, #1
 8023ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8023ad6:	e015      	b.n	8023b04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023ad8:	687b      	ldr	r3, [r7, #4]
 8023ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023ae0:	2b00      	cmp	r3, #0
 8023ae2:	d00e      	beq.n	8023b02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8023ae4:	2301      	movs	r3, #1
 8023ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8023ae8:	e00b      	b.n	8023b02 <DMA_CheckFifoParam+0xe6>
      break;
 8023aea:	bf00      	nop
 8023aec:	e00a      	b.n	8023b04 <DMA_CheckFifoParam+0xe8>
      break;
 8023aee:	bf00      	nop
 8023af0:	e008      	b.n	8023b04 <DMA_CheckFifoParam+0xe8>
      break;
 8023af2:	bf00      	nop
 8023af4:	e006      	b.n	8023b04 <DMA_CheckFifoParam+0xe8>
      break;
 8023af6:	bf00      	nop
 8023af8:	e004      	b.n	8023b04 <DMA_CheckFifoParam+0xe8>
      break;
 8023afa:	bf00      	nop
 8023afc:	e002      	b.n	8023b04 <DMA_CheckFifoParam+0xe8>
      break;   
 8023afe:	bf00      	nop
 8023b00:	e000      	b.n	8023b04 <DMA_CheckFifoParam+0xe8>
      break;
 8023b02:	bf00      	nop
    }
  } 
  
  return status; 
 8023b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8023b06:	4618      	mov	r0, r3
 8023b08:	3714      	adds	r7, #20
 8023b0a:	46bd      	mov	sp, r7
 8023b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b10:	4770      	bx	lr
 8023b12:	bf00      	nop

08023b14 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8023b14:	b580      	push	{r7, lr}
 8023b16:	b082      	sub	sp, #8
 8023b18:	af00      	add	r7, sp, #0
 8023b1a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8023b1c:	687b      	ldr	r3, [r7, #4]
 8023b1e:	2b00      	cmp	r3, #0
 8023b20:	d101      	bne.n	8023b26 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8023b22:	2301      	movs	r3, #1
 8023b24:	e03b      	b.n	8023b9e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8023b26:	687b      	ldr	r3, [r7, #4]
 8023b28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8023b2c:	b2db      	uxtb	r3, r3
 8023b2e:	2b00      	cmp	r3, #0
 8023b30:	d106      	bne.n	8023b40 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8023b32:	687b      	ldr	r3, [r7, #4]
 8023b34:	2200      	movs	r2, #0
 8023b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8023b3a:	6878      	ldr	r0, [r7, #4]
 8023b3c:	f7fd fcfa 	bl	8021534 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023b40:	687b      	ldr	r3, [r7, #4]
 8023b42:	2202      	movs	r2, #2
 8023b44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8023b48:	687b      	ldr	r3, [r7, #4]
 8023b4a:	681b      	ldr	r3, [r3, #0]
 8023b4c:	681b      	ldr	r3, [r3, #0]
 8023b4e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8023b52:	687b      	ldr	r3, [r7, #4]
 8023b54:	685a      	ldr	r2, [r3, #4]
 8023b56:	687b      	ldr	r3, [r7, #4]
 8023b58:	681b      	ldr	r3, [r3, #0]
 8023b5a:	430a      	orrs	r2, r1
 8023b5c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	681b      	ldr	r3, [r3, #0]
 8023b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023b64:	f023 0107 	bic.w	r1, r3, #7
 8023b68:	687b      	ldr	r3, [r7, #4]
 8023b6a:	689a      	ldr	r2, [r3, #8]
 8023b6c:	687b      	ldr	r3, [r7, #4]
 8023b6e:	681b      	ldr	r3, [r3, #0]
 8023b70:	430a      	orrs	r2, r1
 8023b72:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8023b74:	687b      	ldr	r3, [r7, #4]
 8023b76:	681b      	ldr	r3, [r3, #0]
 8023b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8023b7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8023b82:	687a      	ldr	r2, [r7, #4]
 8023b84:	68d1      	ldr	r1, [r2, #12]
 8023b86:	687a      	ldr	r2, [r7, #4]
 8023b88:	6812      	ldr	r2, [r2, #0]
 8023b8a:	430b      	orrs	r3, r1
 8023b8c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8023b8e:	687b      	ldr	r3, [r7, #4]
 8023b90:	2200      	movs	r2, #0
 8023b92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8023b94:	687b      	ldr	r3, [r7, #4]
 8023b96:	2201      	movs	r2, #1
 8023b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8023b9c:	2300      	movs	r3, #0
}
 8023b9e:	4618      	mov	r0, r3
 8023ba0:	3708      	adds	r7, #8
 8023ba2:	46bd      	mov	sp, r7
 8023ba4:	bd80      	pop	{r7, pc}

08023ba6 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8023ba6:	b580      	push	{r7, lr}
 8023ba8:	b086      	sub	sp, #24
 8023baa:	af02      	add	r7, sp, #8
 8023bac:	60f8      	str	r0, [r7, #12]
 8023bae:	60b9      	str	r1, [r7, #8]
 8023bb0:	607a      	str	r2, [r7, #4]
 8023bb2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8023bb4:	68fb      	ldr	r3, [r7, #12]
 8023bb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8023bba:	2b01      	cmp	r3, #1
 8023bbc:	d101      	bne.n	8023bc2 <HAL_DMA2D_Start+0x1c>
 8023bbe:	2302      	movs	r3, #2
 8023bc0:	e018      	b.n	8023bf4 <HAL_DMA2D_Start+0x4e>
 8023bc2:	68fb      	ldr	r3, [r7, #12]
 8023bc4:	2201      	movs	r2, #1
 8023bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023bca:	68fb      	ldr	r3, [r7, #12]
 8023bcc:	2202      	movs	r2, #2
 8023bce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8023bd2:	69bb      	ldr	r3, [r7, #24]
 8023bd4:	9300      	str	r3, [sp, #0]
 8023bd6:	683b      	ldr	r3, [r7, #0]
 8023bd8:	687a      	ldr	r2, [r7, #4]
 8023bda:	68b9      	ldr	r1, [r7, #8]
 8023bdc:	68f8      	ldr	r0, [r7, #12]
 8023bde:	f000 fa99 	bl	8024114 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8023be2:	68fb      	ldr	r3, [r7, #12]
 8023be4:	681b      	ldr	r3, [r3, #0]
 8023be6:	681a      	ldr	r2, [r3, #0]
 8023be8:	68fb      	ldr	r3, [r7, #12]
 8023bea:	681b      	ldr	r3, [r3, #0]
 8023bec:	f042 0201 	orr.w	r2, r2, #1
 8023bf0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8023bf2:	2300      	movs	r3, #0
}
 8023bf4:	4618      	mov	r0, r3
 8023bf6:	3710      	adds	r7, #16
 8023bf8:	46bd      	mov	sp, r7
 8023bfa:	bd80      	pop	{r7, pc}

08023bfc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8023bfc:	b580      	push	{r7, lr}
 8023bfe:	b086      	sub	sp, #24
 8023c00:	af00      	add	r7, sp, #0
 8023c02:	6078      	str	r0, [r7, #4]
 8023c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8023c06:	2300      	movs	r3, #0
 8023c08:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8023c0a:	687b      	ldr	r3, [r7, #4]
 8023c0c:	681b      	ldr	r3, [r3, #0]
 8023c0e:	681b      	ldr	r3, [r3, #0]
 8023c10:	f003 0301 	and.w	r3, r3, #1
 8023c14:	2b00      	cmp	r3, #0
 8023c16:	d056      	beq.n	8023cc6 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8023c18:	f7ff fbfe 	bl	8023418 <HAL_GetTick>
 8023c1c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8023c1e:	e04b      	b.n	8023cb8 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8023c20:	687b      	ldr	r3, [r7, #4]
 8023c22:	681b      	ldr	r3, [r3, #0]
 8023c24:	685b      	ldr	r3, [r3, #4]
 8023c26:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8023c28:	68fb      	ldr	r3, [r7, #12]
 8023c2a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8023c2e:	2b00      	cmp	r3, #0
 8023c30:	d023      	beq.n	8023c7a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023c32:	68fb      	ldr	r3, [r7, #12]
 8023c34:	f003 0320 	and.w	r3, r3, #32
 8023c38:	2b00      	cmp	r3, #0
 8023c3a:	d005      	beq.n	8023c48 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023c3c:	687b      	ldr	r3, [r7, #4]
 8023c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023c40:	f043 0202 	orr.w	r2, r3, #2
 8023c44:	687b      	ldr	r3, [r7, #4]
 8023c46:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023c48:	68fb      	ldr	r3, [r7, #12]
 8023c4a:	f003 0301 	and.w	r3, r3, #1
 8023c4e:	2b00      	cmp	r3, #0
 8023c50:	d005      	beq.n	8023c5e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023c52:	687b      	ldr	r3, [r7, #4]
 8023c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023c56:	f043 0201 	orr.w	r2, r3, #1
 8023c5a:	687b      	ldr	r3, [r7, #4]
 8023c5c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8023c5e:	687b      	ldr	r3, [r7, #4]
 8023c60:	681b      	ldr	r3, [r3, #0]
 8023c62:	2221      	movs	r2, #33	; 0x21
 8023c64:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023c66:	687b      	ldr	r3, [r7, #4]
 8023c68:	2204      	movs	r2, #4
 8023c6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8023c6e:	687b      	ldr	r3, [r7, #4]
 8023c70:	2200      	movs	r2, #0
 8023c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023c76:	2301      	movs	r3, #1
 8023c78:	e0a5      	b.n	8023dc6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8023c7a:	683b      	ldr	r3, [r7, #0]
 8023c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023c80:	d01a      	beq.n	8023cb8 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023c82:	f7ff fbc9 	bl	8023418 <HAL_GetTick>
 8023c86:	4602      	mov	r2, r0
 8023c88:	697b      	ldr	r3, [r7, #20]
 8023c8a:	1ad3      	subs	r3, r2, r3
 8023c8c:	683a      	ldr	r2, [r7, #0]
 8023c8e:	429a      	cmp	r2, r3
 8023c90:	d302      	bcc.n	8023c98 <HAL_DMA2D_PollForTransfer+0x9c>
 8023c92:	683b      	ldr	r3, [r7, #0]
 8023c94:	2b00      	cmp	r3, #0
 8023c96:	d10f      	bne.n	8023cb8 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8023c98:	687b      	ldr	r3, [r7, #4]
 8023c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023c9c:	f043 0220 	orr.w	r2, r3, #32
 8023ca0:	687b      	ldr	r3, [r7, #4]
 8023ca2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8023ca4:	687b      	ldr	r3, [r7, #4]
 8023ca6:	2203      	movs	r2, #3
 8023ca8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	2200      	movs	r2, #0
 8023cb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8023cb4:	2303      	movs	r3, #3
 8023cb6:	e086      	b.n	8023dc6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8023cb8:	687b      	ldr	r3, [r7, #4]
 8023cba:	681b      	ldr	r3, [r3, #0]
 8023cbc:	685b      	ldr	r3, [r3, #4]
 8023cbe:	f003 0302 	and.w	r3, r3, #2
 8023cc2:	2b00      	cmp	r3, #0
 8023cc4:	d0ac      	beq.n	8023c20 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8023cc6:	687b      	ldr	r3, [r7, #4]
 8023cc8:	681b      	ldr	r3, [r3, #0]
 8023cca:	69db      	ldr	r3, [r3, #28]
 8023ccc:	f003 0320 	and.w	r3, r3, #32
 8023cd0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8023cd2:	687b      	ldr	r3, [r7, #4]
 8023cd4:	681b      	ldr	r3, [r3, #0]
 8023cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023cd8:	f003 0320 	and.w	r3, r3, #32
 8023cdc:	693a      	ldr	r2, [r7, #16]
 8023cde:	4313      	orrs	r3, r2
 8023ce0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8023ce2:	693b      	ldr	r3, [r7, #16]
 8023ce4:	2b00      	cmp	r3, #0
 8023ce6:	d061      	beq.n	8023dac <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8023ce8:	f7ff fb96 	bl	8023418 <HAL_GetTick>
 8023cec:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8023cee:	e056      	b.n	8023d9e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8023cf0:	687b      	ldr	r3, [r7, #4]
 8023cf2:	681b      	ldr	r3, [r3, #0]
 8023cf4:	685b      	ldr	r3, [r3, #4]
 8023cf6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8023cf8:	68fb      	ldr	r3, [r7, #12]
 8023cfa:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8023cfe:	2b00      	cmp	r3, #0
 8023d00:	d02e      	beq.n	8023d60 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8023d02:	68fb      	ldr	r3, [r7, #12]
 8023d04:	f003 0308 	and.w	r3, r3, #8
 8023d08:	2b00      	cmp	r3, #0
 8023d0a:	d005      	beq.n	8023d18 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8023d0c:	687b      	ldr	r3, [r7, #4]
 8023d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023d10:	f043 0204 	orr.w	r2, r3, #4
 8023d14:	687b      	ldr	r3, [r7, #4]
 8023d16:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023d18:	68fb      	ldr	r3, [r7, #12]
 8023d1a:	f003 0320 	and.w	r3, r3, #32
 8023d1e:	2b00      	cmp	r3, #0
 8023d20:	d005      	beq.n	8023d2e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023d22:	687b      	ldr	r3, [r7, #4]
 8023d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023d26:	f043 0202 	orr.w	r2, r3, #2
 8023d2a:	687b      	ldr	r3, [r7, #4]
 8023d2c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023d2e:	68fb      	ldr	r3, [r7, #12]
 8023d30:	f003 0301 	and.w	r3, r3, #1
 8023d34:	2b00      	cmp	r3, #0
 8023d36:	d005      	beq.n	8023d44 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023d38:	687b      	ldr	r3, [r7, #4]
 8023d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023d3c:	f043 0201 	orr.w	r2, r3, #1
 8023d40:	687b      	ldr	r3, [r7, #4]
 8023d42:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8023d44:	687b      	ldr	r3, [r7, #4]
 8023d46:	681b      	ldr	r3, [r3, #0]
 8023d48:	2229      	movs	r2, #41	; 0x29
 8023d4a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023d4c:	687b      	ldr	r3, [r7, #4]
 8023d4e:	2204      	movs	r2, #4
 8023d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8023d54:	687b      	ldr	r3, [r7, #4]
 8023d56:	2200      	movs	r2, #0
 8023d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023d5c:	2301      	movs	r3, #1
 8023d5e:	e032      	b.n	8023dc6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8023d60:	683b      	ldr	r3, [r7, #0]
 8023d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023d66:	d01a      	beq.n	8023d9e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023d68:	f7ff fb56 	bl	8023418 <HAL_GetTick>
 8023d6c:	4602      	mov	r2, r0
 8023d6e:	697b      	ldr	r3, [r7, #20]
 8023d70:	1ad3      	subs	r3, r2, r3
 8023d72:	683a      	ldr	r2, [r7, #0]
 8023d74:	429a      	cmp	r2, r3
 8023d76:	d302      	bcc.n	8023d7e <HAL_DMA2D_PollForTransfer+0x182>
 8023d78:	683b      	ldr	r3, [r7, #0]
 8023d7a:	2b00      	cmp	r3, #0
 8023d7c:	d10f      	bne.n	8023d9e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8023d7e:	687b      	ldr	r3, [r7, #4]
 8023d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023d82:	f043 0220 	orr.w	r2, r3, #32
 8023d86:	687b      	ldr	r3, [r7, #4]
 8023d88:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8023d8a:	687b      	ldr	r3, [r7, #4]
 8023d8c:	2203      	movs	r2, #3
 8023d8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8023d92:	687b      	ldr	r3, [r7, #4]
 8023d94:	2200      	movs	r2, #0
 8023d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8023d9a:	2303      	movs	r3, #3
 8023d9c:	e013      	b.n	8023dc6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8023d9e:	687b      	ldr	r3, [r7, #4]
 8023da0:	681b      	ldr	r3, [r3, #0]
 8023da2:	685b      	ldr	r3, [r3, #4]
 8023da4:	f003 0310 	and.w	r3, r3, #16
 8023da8:	2b00      	cmp	r3, #0
 8023daa:	d0a1      	beq.n	8023cf0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8023dac:	687b      	ldr	r3, [r7, #4]
 8023dae:	681b      	ldr	r3, [r3, #0]
 8023db0:	2212      	movs	r2, #18
 8023db2:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8023db4:	687b      	ldr	r3, [r7, #4]
 8023db6:	2201      	movs	r2, #1
 8023db8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8023dbc:	687b      	ldr	r3, [r7, #4]
 8023dbe:	2200      	movs	r2, #0
 8023dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8023dc4:	2300      	movs	r3, #0
}
 8023dc6:	4618      	mov	r0, r3
 8023dc8:	3718      	adds	r7, #24
 8023dca:	46bd      	mov	sp, r7
 8023dcc:	bd80      	pop	{r7, pc}

08023dce <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8023dce:	b580      	push	{r7, lr}
 8023dd0:	b084      	sub	sp, #16
 8023dd2:	af00      	add	r7, sp, #0
 8023dd4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8023dd6:	687b      	ldr	r3, [r7, #4]
 8023dd8:	681b      	ldr	r3, [r3, #0]
 8023dda:	685b      	ldr	r3, [r3, #4]
 8023ddc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8023dde:	687b      	ldr	r3, [r7, #4]
 8023de0:	681b      	ldr	r3, [r3, #0]
 8023de2:	681b      	ldr	r3, [r3, #0]
 8023de4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023de6:	68fb      	ldr	r3, [r7, #12]
 8023de8:	f003 0301 	and.w	r3, r3, #1
 8023dec:	2b00      	cmp	r3, #0
 8023dee:	d026      	beq.n	8023e3e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8023df0:	68bb      	ldr	r3, [r7, #8]
 8023df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023df6:	2b00      	cmp	r3, #0
 8023df8:	d021      	beq.n	8023e3e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8023dfa:	687b      	ldr	r3, [r7, #4]
 8023dfc:	681b      	ldr	r3, [r3, #0]
 8023dfe:	681a      	ldr	r2, [r3, #0]
 8023e00:	687b      	ldr	r3, [r7, #4]
 8023e02:	681b      	ldr	r3, [r3, #0]
 8023e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8023e08:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023e0a:	687b      	ldr	r3, [r7, #4]
 8023e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023e0e:	f043 0201 	orr.w	r2, r3, #1
 8023e12:	687b      	ldr	r3, [r7, #4]
 8023e14:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8023e16:	687b      	ldr	r3, [r7, #4]
 8023e18:	681b      	ldr	r3, [r3, #0]
 8023e1a:	2201      	movs	r2, #1
 8023e1c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023e1e:	687b      	ldr	r3, [r7, #4]
 8023e20:	2204      	movs	r2, #4
 8023e22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023e26:	687b      	ldr	r3, [r7, #4]
 8023e28:	2200      	movs	r2, #0
 8023e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8023e2e:	687b      	ldr	r3, [r7, #4]
 8023e30:	695b      	ldr	r3, [r3, #20]
 8023e32:	2b00      	cmp	r3, #0
 8023e34:	d003      	beq.n	8023e3e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8023e36:	687b      	ldr	r3, [r7, #4]
 8023e38:	695b      	ldr	r3, [r3, #20]
 8023e3a:	6878      	ldr	r0, [r7, #4]
 8023e3c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023e3e:	68fb      	ldr	r3, [r7, #12]
 8023e40:	f003 0320 	and.w	r3, r3, #32
 8023e44:	2b00      	cmp	r3, #0
 8023e46:	d026      	beq.n	8023e96 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8023e48:	68bb      	ldr	r3, [r7, #8]
 8023e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8023e4e:	2b00      	cmp	r3, #0
 8023e50:	d021      	beq.n	8023e96 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8023e52:	687b      	ldr	r3, [r7, #4]
 8023e54:	681b      	ldr	r3, [r3, #0]
 8023e56:	681a      	ldr	r2, [r3, #0]
 8023e58:	687b      	ldr	r3, [r7, #4]
 8023e5a:	681b      	ldr	r3, [r3, #0]
 8023e5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8023e60:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8023e62:	687b      	ldr	r3, [r7, #4]
 8023e64:	681b      	ldr	r3, [r3, #0]
 8023e66:	2220      	movs	r2, #32
 8023e68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023e6a:	687b      	ldr	r3, [r7, #4]
 8023e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023e6e:	f043 0202 	orr.w	r2, r3, #2
 8023e72:	687b      	ldr	r3, [r7, #4]
 8023e74:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023e76:	687b      	ldr	r3, [r7, #4]
 8023e78:	2204      	movs	r2, #4
 8023e7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023e7e:	687b      	ldr	r3, [r7, #4]
 8023e80:	2200      	movs	r2, #0
 8023e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8023e86:	687b      	ldr	r3, [r7, #4]
 8023e88:	695b      	ldr	r3, [r3, #20]
 8023e8a:	2b00      	cmp	r3, #0
 8023e8c:	d003      	beq.n	8023e96 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8023e8e:	687b      	ldr	r3, [r7, #4]
 8023e90:	695b      	ldr	r3, [r3, #20]
 8023e92:	6878      	ldr	r0, [r7, #4]
 8023e94:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8023e96:	68fb      	ldr	r3, [r7, #12]
 8023e98:	f003 0308 	and.w	r3, r3, #8
 8023e9c:	2b00      	cmp	r3, #0
 8023e9e:	d026      	beq.n	8023eee <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8023ea0:	68bb      	ldr	r3, [r7, #8]
 8023ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8023ea6:	2b00      	cmp	r3, #0
 8023ea8:	d021      	beq.n	8023eee <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8023eaa:	687b      	ldr	r3, [r7, #4]
 8023eac:	681b      	ldr	r3, [r3, #0]
 8023eae:	681a      	ldr	r2, [r3, #0]
 8023eb0:	687b      	ldr	r3, [r7, #4]
 8023eb2:	681b      	ldr	r3, [r3, #0]
 8023eb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8023eb8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8023eba:	687b      	ldr	r3, [r7, #4]
 8023ebc:	681b      	ldr	r3, [r3, #0]
 8023ebe:	2208      	movs	r2, #8
 8023ec0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8023ec2:	687b      	ldr	r3, [r7, #4]
 8023ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023ec6:	f043 0204 	orr.w	r2, r3, #4
 8023eca:	687b      	ldr	r3, [r7, #4]
 8023ecc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023ece:	687b      	ldr	r3, [r7, #4]
 8023ed0:	2204      	movs	r2, #4
 8023ed2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023ed6:	687b      	ldr	r3, [r7, #4]
 8023ed8:	2200      	movs	r2, #0
 8023eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8023ede:	687b      	ldr	r3, [r7, #4]
 8023ee0:	695b      	ldr	r3, [r3, #20]
 8023ee2:	2b00      	cmp	r3, #0
 8023ee4:	d003      	beq.n	8023eee <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8023ee6:	687b      	ldr	r3, [r7, #4]
 8023ee8:	695b      	ldr	r3, [r3, #20]
 8023eea:	6878      	ldr	r0, [r7, #4]
 8023eec:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8023eee:	68fb      	ldr	r3, [r7, #12]
 8023ef0:	f003 0304 	and.w	r3, r3, #4
 8023ef4:	2b00      	cmp	r3, #0
 8023ef6:	d013      	beq.n	8023f20 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8023ef8:	68bb      	ldr	r3, [r7, #8]
 8023efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8023efe:	2b00      	cmp	r3, #0
 8023f00:	d00e      	beq.n	8023f20 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8023f02:	687b      	ldr	r3, [r7, #4]
 8023f04:	681b      	ldr	r3, [r3, #0]
 8023f06:	681a      	ldr	r2, [r3, #0]
 8023f08:	687b      	ldr	r3, [r7, #4]
 8023f0a:	681b      	ldr	r3, [r3, #0]
 8023f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023f10:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8023f12:	687b      	ldr	r3, [r7, #4]
 8023f14:	681b      	ldr	r3, [r3, #0]
 8023f16:	2204      	movs	r2, #4
 8023f18:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8023f1a:	6878      	ldr	r0, [r7, #4]
 8023f1c:	f000 f853 	bl	8023fc6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8023f20:	68fb      	ldr	r3, [r7, #12]
 8023f22:	f003 0302 	and.w	r3, r3, #2
 8023f26:	2b00      	cmp	r3, #0
 8023f28:	d024      	beq.n	8023f74 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8023f2a:	68bb      	ldr	r3, [r7, #8]
 8023f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8023f30:	2b00      	cmp	r3, #0
 8023f32:	d01f      	beq.n	8023f74 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8023f34:	687b      	ldr	r3, [r7, #4]
 8023f36:	681b      	ldr	r3, [r3, #0]
 8023f38:	681a      	ldr	r2, [r3, #0]
 8023f3a:	687b      	ldr	r3, [r7, #4]
 8023f3c:	681b      	ldr	r3, [r3, #0]
 8023f3e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8023f42:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8023f44:	687b      	ldr	r3, [r7, #4]
 8023f46:	681b      	ldr	r3, [r3, #0]
 8023f48:	2202      	movs	r2, #2
 8023f4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8023f4c:	687b      	ldr	r3, [r7, #4]
 8023f4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8023f50:	687b      	ldr	r3, [r7, #4]
 8023f52:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8023f54:	687b      	ldr	r3, [r7, #4]
 8023f56:	2201      	movs	r2, #1
 8023f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023f5c:	687b      	ldr	r3, [r7, #4]
 8023f5e:	2200      	movs	r2, #0
 8023f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8023f64:	687b      	ldr	r3, [r7, #4]
 8023f66:	691b      	ldr	r3, [r3, #16]
 8023f68:	2b00      	cmp	r3, #0
 8023f6a:	d003      	beq.n	8023f74 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8023f6c:	687b      	ldr	r3, [r7, #4]
 8023f6e:	691b      	ldr	r3, [r3, #16]
 8023f70:	6878      	ldr	r0, [r7, #4]
 8023f72:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8023f74:	68fb      	ldr	r3, [r7, #12]
 8023f76:	f003 0310 	and.w	r3, r3, #16
 8023f7a:	2b00      	cmp	r3, #0
 8023f7c:	d01f      	beq.n	8023fbe <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8023f7e:	68bb      	ldr	r3, [r7, #8]
 8023f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8023f84:	2b00      	cmp	r3, #0
 8023f86:	d01a      	beq.n	8023fbe <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8023f88:	687b      	ldr	r3, [r7, #4]
 8023f8a:	681b      	ldr	r3, [r3, #0]
 8023f8c:	681a      	ldr	r2, [r3, #0]
 8023f8e:	687b      	ldr	r3, [r7, #4]
 8023f90:	681b      	ldr	r3, [r3, #0]
 8023f92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8023f96:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8023f98:	687b      	ldr	r3, [r7, #4]
 8023f9a:	681b      	ldr	r3, [r3, #0]
 8023f9c:	2210      	movs	r2, #16
 8023f9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8023fa0:	687b      	ldr	r3, [r7, #4]
 8023fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8023fa4:	687b      	ldr	r3, [r7, #4]
 8023fa6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8023fa8:	687b      	ldr	r3, [r7, #4]
 8023faa:	2201      	movs	r2, #1
 8023fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023fb0:	687b      	ldr	r3, [r7, #4]
 8023fb2:	2200      	movs	r2, #0
 8023fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8023fb8:	6878      	ldr	r0, [r7, #4]
 8023fba:	f000 f80e 	bl	8023fda <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8023fbe:	bf00      	nop
 8023fc0:	3710      	adds	r7, #16
 8023fc2:	46bd      	mov	sp, r7
 8023fc4:	bd80      	pop	{r7, pc}

08023fc6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8023fc6:	b480      	push	{r7}
 8023fc8:	b083      	sub	sp, #12
 8023fca:	af00      	add	r7, sp, #0
 8023fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8023fce:	bf00      	nop
 8023fd0:	370c      	adds	r7, #12
 8023fd2:	46bd      	mov	sp, r7
 8023fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fd8:	4770      	bx	lr

08023fda <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8023fda:	b480      	push	{r7}
 8023fdc:	b083      	sub	sp, #12
 8023fde:	af00      	add	r7, sp, #0
 8023fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8023fe2:	bf00      	nop
 8023fe4:	370c      	adds	r7, #12
 8023fe6:	46bd      	mov	sp, r7
 8023fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fec:	4770      	bx	lr
	...

08023ff0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8023ff0:	b480      	push	{r7}
 8023ff2:	b087      	sub	sp, #28
 8023ff4:	af00      	add	r7, sp, #0
 8023ff6:	6078      	str	r0, [r7, #4]
 8023ff8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8023ffa:	687b      	ldr	r3, [r7, #4]
 8023ffc:	685b      	ldr	r3, [r3, #4]
 8023ffe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8024002:	687b      	ldr	r3, [r7, #4]
 8024004:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8024008:	2b01      	cmp	r3, #1
 802400a:	d101      	bne.n	8024010 <HAL_DMA2D_ConfigLayer+0x20>
 802400c:	2302      	movs	r3, #2
 802400e:	e079      	b.n	8024104 <HAL_DMA2D_ConfigLayer+0x114>
 8024010:	687b      	ldr	r3, [r7, #4]
 8024012:	2201      	movs	r2, #1
 8024014:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8024018:	687b      	ldr	r3, [r7, #4]
 802401a:	2202      	movs	r2, #2
 802401c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8024020:	683b      	ldr	r3, [r7, #0]
 8024022:	011b      	lsls	r3, r3, #4
 8024024:	3318      	adds	r3, #24
 8024026:	687a      	ldr	r2, [r7, #4]
 8024028:	4413      	add	r3, r2
 802402a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 802402c:	693b      	ldr	r3, [r7, #16]
 802402e:	685a      	ldr	r2, [r3, #4]
 8024030:	693b      	ldr	r3, [r7, #16]
 8024032:	689b      	ldr	r3, [r3, #8]
 8024034:	041b      	lsls	r3, r3, #16
 8024036:	4313      	orrs	r3, r2
 8024038:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 802403a:	4b35      	ldr	r3, [pc, #212]	; (8024110 <HAL_DMA2D_ConfigLayer+0x120>)
 802403c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 802403e:	693b      	ldr	r3, [r7, #16]
 8024040:	685b      	ldr	r3, [r3, #4]
 8024042:	2b0a      	cmp	r3, #10
 8024044:	d003      	beq.n	802404e <HAL_DMA2D_ConfigLayer+0x5e>
 8024046:	693b      	ldr	r3, [r7, #16]
 8024048:	685b      	ldr	r3, [r3, #4]
 802404a:	2b09      	cmp	r3, #9
 802404c:	d107      	bne.n	802405e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 802404e:	693b      	ldr	r3, [r7, #16]
 8024050:	68db      	ldr	r3, [r3, #12]
 8024052:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8024056:	697a      	ldr	r2, [r7, #20]
 8024058:	4313      	orrs	r3, r2
 802405a:	617b      	str	r3, [r7, #20]
 802405c:	e005      	b.n	802406a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 802405e:	693b      	ldr	r3, [r7, #16]
 8024060:	68db      	ldr	r3, [r3, #12]
 8024062:	061b      	lsls	r3, r3, #24
 8024064:	697a      	ldr	r2, [r7, #20]
 8024066:	4313      	orrs	r3, r2
 8024068:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 802406a:	683b      	ldr	r3, [r7, #0]
 802406c:	2b00      	cmp	r3, #0
 802406e:	d120      	bne.n	80240b2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8024070:	687b      	ldr	r3, [r7, #4]
 8024072:	681b      	ldr	r3, [r3, #0]
 8024074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024076:	68fb      	ldr	r3, [r7, #12]
 8024078:	43db      	mvns	r3, r3
 802407a:	ea02 0103 	and.w	r1, r2, r3
 802407e:	687b      	ldr	r3, [r7, #4]
 8024080:	681b      	ldr	r3, [r3, #0]
 8024082:	697a      	ldr	r2, [r7, #20]
 8024084:	430a      	orrs	r2, r1
 8024086:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8024088:	687b      	ldr	r3, [r7, #4]
 802408a:	681b      	ldr	r3, [r3, #0]
 802408c:	693a      	ldr	r2, [r7, #16]
 802408e:	6812      	ldr	r2, [r2, #0]
 8024090:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8024092:	693b      	ldr	r3, [r7, #16]
 8024094:	685b      	ldr	r3, [r3, #4]
 8024096:	2b0a      	cmp	r3, #10
 8024098:	d003      	beq.n	80240a2 <HAL_DMA2D_ConfigLayer+0xb2>
 802409a:	693b      	ldr	r3, [r7, #16]
 802409c:	685b      	ldr	r3, [r3, #4]
 802409e:	2b09      	cmp	r3, #9
 80240a0:	d127      	bne.n	80240f2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80240a2:	693b      	ldr	r3, [r7, #16]
 80240a4:	68da      	ldr	r2, [r3, #12]
 80240a6:	687b      	ldr	r3, [r7, #4]
 80240a8:	681b      	ldr	r3, [r3, #0]
 80240aa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80240ae:	629a      	str	r2, [r3, #40]	; 0x28
 80240b0:	e01f      	b.n	80240f2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80240b2:	687b      	ldr	r3, [r7, #4]
 80240b4:	681b      	ldr	r3, [r3, #0]
 80240b6:	69da      	ldr	r2, [r3, #28]
 80240b8:	68fb      	ldr	r3, [r7, #12]
 80240ba:	43db      	mvns	r3, r3
 80240bc:	ea02 0103 	and.w	r1, r2, r3
 80240c0:	687b      	ldr	r3, [r7, #4]
 80240c2:	681b      	ldr	r3, [r3, #0]
 80240c4:	697a      	ldr	r2, [r7, #20]
 80240c6:	430a      	orrs	r2, r1
 80240c8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80240ca:	687b      	ldr	r3, [r7, #4]
 80240cc:	681b      	ldr	r3, [r3, #0]
 80240ce:	693a      	ldr	r2, [r7, #16]
 80240d0:	6812      	ldr	r2, [r2, #0]
 80240d2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80240d4:	693b      	ldr	r3, [r7, #16]
 80240d6:	685b      	ldr	r3, [r3, #4]
 80240d8:	2b0a      	cmp	r3, #10
 80240da:	d003      	beq.n	80240e4 <HAL_DMA2D_ConfigLayer+0xf4>
 80240dc:	693b      	ldr	r3, [r7, #16]
 80240de:	685b      	ldr	r3, [r3, #4]
 80240e0:	2b09      	cmp	r3, #9
 80240e2:	d106      	bne.n	80240f2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80240e4:	693b      	ldr	r3, [r7, #16]
 80240e6:	68da      	ldr	r2, [r3, #12]
 80240e8:	687b      	ldr	r3, [r7, #4]
 80240ea:	681b      	ldr	r3, [r3, #0]
 80240ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80240f0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80240f2:	687b      	ldr	r3, [r7, #4]
 80240f4:	2201      	movs	r2, #1
 80240f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80240fa:	687b      	ldr	r3, [r7, #4]
 80240fc:	2200      	movs	r2, #0
 80240fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8024102:	2300      	movs	r3, #0
}
 8024104:	4618      	mov	r0, r3
 8024106:	371c      	adds	r7, #28
 8024108:	46bd      	mov	sp, r7
 802410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802410e:	4770      	bx	lr
 8024110:	ff03000f 	.word	0xff03000f

08024114 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8024114:	b480      	push	{r7}
 8024116:	b08b      	sub	sp, #44	; 0x2c
 8024118:	af00      	add	r7, sp, #0
 802411a:	60f8      	str	r0, [r7, #12]
 802411c:	60b9      	str	r1, [r7, #8]
 802411e:	607a      	str	r2, [r7, #4]
 8024120:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8024122:	68fb      	ldr	r3, [r7, #12]
 8024124:	681b      	ldr	r3, [r3, #0]
 8024126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024128:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 802412c:	683b      	ldr	r3, [r7, #0]
 802412e:	041a      	lsls	r2, r3, #16
 8024130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024132:	431a      	orrs	r2, r3
 8024134:	68fb      	ldr	r3, [r7, #12]
 8024136:	681b      	ldr	r3, [r3, #0]
 8024138:	430a      	orrs	r2, r1
 802413a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 802413c:	68fb      	ldr	r3, [r7, #12]
 802413e:	681b      	ldr	r3, [r3, #0]
 8024140:	687a      	ldr	r2, [r7, #4]
 8024142:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8024144:	68fb      	ldr	r3, [r7, #12]
 8024146:	685b      	ldr	r3, [r3, #4]
 8024148:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 802414c:	d174      	bne.n	8024238 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 802414e:	68bb      	ldr	r3, [r7, #8]
 8024150:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8024154:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8024156:	68bb      	ldr	r3, [r7, #8]
 8024158:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802415c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 802415e:	68bb      	ldr	r3, [r7, #8]
 8024160:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024164:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8024166:	68bb      	ldr	r3, [r7, #8]
 8024168:	b2db      	uxtb	r3, r3
 802416a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 802416c:	68fb      	ldr	r3, [r7, #12]
 802416e:	689b      	ldr	r3, [r3, #8]
 8024170:	2b00      	cmp	r3, #0
 8024172:	d108      	bne.n	8024186 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8024174:	69ba      	ldr	r2, [r7, #24]
 8024176:	69fb      	ldr	r3, [r7, #28]
 8024178:	431a      	orrs	r2, r3
 802417a:	6a3b      	ldr	r3, [r7, #32]
 802417c:	4313      	orrs	r3, r2
 802417e:	697a      	ldr	r2, [r7, #20]
 8024180:	4313      	orrs	r3, r2
 8024182:	627b      	str	r3, [r7, #36]	; 0x24
 8024184:	e053      	b.n	802422e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8024186:	68fb      	ldr	r3, [r7, #12]
 8024188:	689b      	ldr	r3, [r3, #8]
 802418a:	2b01      	cmp	r3, #1
 802418c:	d106      	bne.n	802419c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 802418e:	69ba      	ldr	r2, [r7, #24]
 8024190:	69fb      	ldr	r3, [r7, #28]
 8024192:	4313      	orrs	r3, r2
 8024194:	697a      	ldr	r2, [r7, #20]
 8024196:	4313      	orrs	r3, r2
 8024198:	627b      	str	r3, [r7, #36]	; 0x24
 802419a:	e048      	b.n	802422e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 802419c:	68fb      	ldr	r3, [r7, #12]
 802419e:	689b      	ldr	r3, [r3, #8]
 80241a0:	2b02      	cmp	r3, #2
 80241a2:	d111      	bne.n	80241c8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80241a4:	69fb      	ldr	r3, [r7, #28]
 80241a6:	0cdb      	lsrs	r3, r3, #19
 80241a8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80241aa:	69bb      	ldr	r3, [r7, #24]
 80241ac:	0a9b      	lsrs	r3, r3, #10
 80241ae:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80241b0:	697b      	ldr	r3, [r7, #20]
 80241b2:	08db      	lsrs	r3, r3, #3
 80241b4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80241b6:	69bb      	ldr	r3, [r7, #24]
 80241b8:	015a      	lsls	r2, r3, #5
 80241ba:	69fb      	ldr	r3, [r7, #28]
 80241bc:	02db      	lsls	r3, r3, #11
 80241be:	4313      	orrs	r3, r2
 80241c0:	697a      	ldr	r2, [r7, #20]
 80241c2:	4313      	orrs	r3, r2
 80241c4:	627b      	str	r3, [r7, #36]	; 0x24
 80241c6:	e032      	b.n	802422e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80241c8:	68fb      	ldr	r3, [r7, #12]
 80241ca:	689b      	ldr	r3, [r3, #8]
 80241cc:	2b03      	cmp	r3, #3
 80241ce:	d117      	bne.n	8024200 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80241d0:	6a3b      	ldr	r3, [r7, #32]
 80241d2:	0fdb      	lsrs	r3, r3, #31
 80241d4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80241d6:	69fb      	ldr	r3, [r7, #28]
 80241d8:	0cdb      	lsrs	r3, r3, #19
 80241da:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80241dc:	69bb      	ldr	r3, [r7, #24]
 80241de:	0adb      	lsrs	r3, r3, #11
 80241e0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80241e2:	697b      	ldr	r3, [r7, #20]
 80241e4:	08db      	lsrs	r3, r3, #3
 80241e6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80241e8:	69bb      	ldr	r3, [r7, #24]
 80241ea:	015a      	lsls	r2, r3, #5
 80241ec:	69fb      	ldr	r3, [r7, #28]
 80241ee:	029b      	lsls	r3, r3, #10
 80241f0:	431a      	orrs	r2, r3
 80241f2:	6a3b      	ldr	r3, [r7, #32]
 80241f4:	03db      	lsls	r3, r3, #15
 80241f6:	4313      	orrs	r3, r2
 80241f8:	697a      	ldr	r2, [r7, #20]
 80241fa:	4313      	orrs	r3, r2
 80241fc:	627b      	str	r3, [r7, #36]	; 0x24
 80241fe:	e016      	b.n	802422e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8024200:	6a3b      	ldr	r3, [r7, #32]
 8024202:	0f1b      	lsrs	r3, r3, #28
 8024204:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8024206:	69fb      	ldr	r3, [r7, #28]
 8024208:	0d1b      	lsrs	r3, r3, #20
 802420a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 802420c:	69bb      	ldr	r3, [r7, #24]
 802420e:	0b1b      	lsrs	r3, r3, #12
 8024210:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8024212:	697b      	ldr	r3, [r7, #20]
 8024214:	091b      	lsrs	r3, r3, #4
 8024216:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8024218:	69bb      	ldr	r3, [r7, #24]
 802421a:	011a      	lsls	r2, r3, #4
 802421c:	69fb      	ldr	r3, [r7, #28]
 802421e:	021b      	lsls	r3, r3, #8
 8024220:	431a      	orrs	r2, r3
 8024222:	6a3b      	ldr	r3, [r7, #32]
 8024224:	031b      	lsls	r3, r3, #12
 8024226:	4313      	orrs	r3, r2
 8024228:	697a      	ldr	r2, [r7, #20]
 802422a:	4313      	orrs	r3, r2
 802422c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 802422e:	68fb      	ldr	r3, [r7, #12]
 8024230:	681b      	ldr	r3, [r3, #0]
 8024232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024234:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8024236:	e003      	b.n	8024240 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8024238:	68fb      	ldr	r3, [r7, #12]
 802423a:	681b      	ldr	r3, [r3, #0]
 802423c:	68ba      	ldr	r2, [r7, #8]
 802423e:	60da      	str	r2, [r3, #12]
}
 8024240:	bf00      	nop
 8024242:	372c      	adds	r7, #44	; 0x2c
 8024244:	46bd      	mov	sp, r7
 8024246:	f85d 7b04 	ldr.w	r7, [sp], #4
 802424a:	4770      	bx	lr

0802424c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802424c:	b480      	push	{r7}
 802424e:	b089      	sub	sp, #36	; 0x24
 8024250:	af00      	add	r7, sp, #0
 8024252:	6078      	str	r0, [r7, #4]
 8024254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024256:	2300      	movs	r3, #0
 8024258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 802425a:	2300      	movs	r3, #0
 802425c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802425e:	2300      	movs	r3, #0
 8024260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024262:	2300      	movs	r3, #0
 8024264:	61fb      	str	r3, [r7, #28]
 8024266:	e177      	b.n	8024558 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024268:	2201      	movs	r2, #1
 802426a:	69fb      	ldr	r3, [r7, #28]
 802426c:	fa02 f303 	lsl.w	r3, r2, r3
 8024270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8024272:	683b      	ldr	r3, [r7, #0]
 8024274:	681b      	ldr	r3, [r3, #0]
 8024276:	697a      	ldr	r2, [r7, #20]
 8024278:	4013      	ands	r3, r2
 802427a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 802427c:	693a      	ldr	r2, [r7, #16]
 802427e:	697b      	ldr	r3, [r7, #20]
 8024280:	429a      	cmp	r2, r3
 8024282:	f040 8166 	bne.w	8024552 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8024286:	683b      	ldr	r3, [r7, #0]
 8024288:	685b      	ldr	r3, [r3, #4]
 802428a:	f003 0303 	and.w	r3, r3, #3
 802428e:	2b01      	cmp	r3, #1
 8024290:	d005      	beq.n	802429e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8024292:	683b      	ldr	r3, [r7, #0]
 8024294:	685b      	ldr	r3, [r3, #4]
 8024296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 802429a:	2b02      	cmp	r3, #2
 802429c:	d130      	bne.n	8024300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802429e:	687b      	ldr	r3, [r7, #4]
 80242a0:	689b      	ldr	r3, [r3, #8]
 80242a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80242a4:	69fb      	ldr	r3, [r7, #28]
 80242a6:	005b      	lsls	r3, r3, #1
 80242a8:	2203      	movs	r2, #3
 80242aa:	fa02 f303 	lsl.w	r3, r2, r3
 80242ae:	43db      	mvns	r3, r3
 80242b0:	69ba      	ldr	r2, [r7, #24]
 80242b2:	4013      	ands	r3, r2
 80242b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80242b6:	683b      	ldr	r3, [r7, #0]
 80242b8:	68da      	ldr	r2, [r3, #12]
 80242ba:	69fb      	ldr	r3, [r7, #28]
 80242bc:	005b      	lsls	r3, r3, #1
 80242be:	fa02 f303 	lsl.w	r3, r2, r3
 80242c2:	69ba      	ldr	r2, [r7, #24]
 80242c4:	4313      	orrs	r3, r2
 80242c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80242c8:	687b      	ldr	r3, [r7, #4]
 80242ca:	69ba      	ldr	r2, [r7, #24]
 80242cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80242ce:	687b      	ldr	r3, [r7, #4]
 80242d0:	685b      	ldr	r3, [r3, #4]
 80242d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80242d4:	2201      	movs	r2, #1
 80242d6:	69fb      	ldr	r3, [r7, #28]
 80242d8:	fa02 f303 	lsl.w	r3, r2, r3
 80242dc:	43db      	mvns	r3, r3
 80242de:	69ba      	ldr	r2, [r7, #24]
 80242e0:	4013      	ands	r3, r2
 80242e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80242e4:	683b      	ldr	r3, [r7, #0]
 80242e6:	685b      	ldr	r3, [r3, #4]
 80242e8:	091b      	lsrs	r3, r3, #4
 80242ea:	f003 0201 	and.w	r2, r3, #1
 80242ee:	69fb      	ldr	r3, [r7, #28]
 80242f0:	fa02 f303 	lsl.w	r3, r2, r3
 80242f4:	69ba      	ldr	r2, [r7, #24]
 80242f6:	4313      	orrs	r3, r2
 80242f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80242fa:	687b      	ldr	r3, [r7, #4]
 80242fc:	69ba      	ldr	r2, [r7, #24]
 80242fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8024300:	683b      	ldr	r3, [r7, #0]
 8024302:	685b      	ldr	r3, [r3, #4]
 8024304:	f003 0303 	and.w	r3, r3, #3
 8024308:	2b03      	cmp	r3, #3
 802430a:	d017      	beq.n	802433c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 802430c:	687b      	ldr	r3, [r7, #4]
 802430e:	68db      	ldr	r3, [r3, #12]
 8024310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8024312:	69fb      	ldr	r3, [r7, #28]
 8024314:	005b      	lsls	r3, r3, #1
 8024316:	2203      	movs	r2, #3
 8024318:	fa02 f303 	lsl.w	r3, r2, r3
 802431c:	43db      	mvns	r3, r3
 802431e:	69ba      	ldr	r2, [r7, #24]
 8024320:	4013      	ands	r3, r2
 8024322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8024324:	683b      	ldr	r3, [r7, #0]
 8024326:	689a      	ldr	r2, [r3, #8]
 8024328:	69fb      	ldr	r3, [r7, #28]
 802432a:	005b      	lsls	r3, r3, #1
 802432c:	fa02 f303 	lsl.w	r3, r2, r3
 8024330:	69ba      	ldr	r2, [r7, #24]
 8024332:	4313      	orrs	r3, r2
 8024334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8024336:	687b      	ldr	r3, [r7, #4]
 8024338:	69ba      	ldr	r2, [r7, #24]
 802433a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802433c:	683b      	ldr	r3, [r7, #0]
 802433e:	685b      	ldr	r3, [r3, #4]
 8024340:	f003 0303 	and.w	r3, r3, #3
 8024344:	2b02      	cmp	r3, #2
 8024346:	d123      	bne.n	8024390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8024348:	69fb      	ldr	r3, [r7, #28]
 802434a:	08da      	lsrs	r2, r3, #3
 802434c:	687b      	ldr	r3, [r7, #4]
 802434e:	3208      	adds	r2, #8
 8024350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024356:	69fb      	ldr	r3, [r7, #28]
 8024358:	f003 0307 	and.w	r3, r3, #7
 802435c:	009b      	lsls	r3, r3, #2
 802435e:	220f      	movs	r2, #15
 8024360:	fa02 f303 	lsl.w	r3, r2, r3
 8024364:	43db      	mvns	r3, r3
 8024366:	69ba      	ldr	r2, [r7, #24]
 8024368:	4013      	ands	r3, r2
 802436a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 802436c:	683b      	ldr	r3, [r7, #0]
 802436e:	691a      	ldr	r2, [r3, #16]
 8024370:	69fb      	ldr	r3, [r7, #28]
 8024372:	f003 0307 	and.w	r3, r3, #7
 8024376:	009b      	lsls	r3, r3, #2
 8024378:	fa02 f303 	lsl.w	r3, r2, r3
 802437c:	69ba      	ldr	r2, [r7, #24]
 802437e:	4313      	orrs	r3, r2
 8024380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8024382:	69fb      	ldr	r3, [r7, #28]
 8024384:	08da      	lsrs	r2, r3, #3
 8024386:	687b      	ldr	r3, [r7, #4]
 8024388:	3208      	adds	r2, #8
 802438a:	69b9      	ldr	r1, [r7, #24]
 802438c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8024390:	687b      	ldr	r3, [r7, #4]
 8024392:	681b      	ldr	r3, [r3, #0]
 8024394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024396:	69fb      	ldr	r3, [r7, #28]
 8024398:	005b      	lsls	r3, r3, #1
 802439a:	2203      	movs	r2, #3
 802439c:	fa02 f303 	lsl.w	r3, r2, r3
 80243a0:	43db      	mvns	r3, r3
 80243a2:	69ba      	ldr	r2, [r7, #24]
 80243a4:	4013      	ands	r3, r2
 80243a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80243a8:	683b      	ldr	r3, [r7, #0]
 80243aa:	685b      	ldr	r3, [r3, #4]
 80243ac:	f003 0203 	and.w	r2, r3, #3
 80243b0:	69fb      	ldr	r3, [r7, #28]
 80243b2:	005b      	lsls	r3, r3, #1
 80243b4:	fa02 f303 	lsl.w	r3, r2, r3
 80243b8:	69ba      	ldr	r2, [r7, #24]
 80243ba:	4313      	orrs	r3, r2
 80243bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80243be:	687b      	ldr	r3, [r7, #4]
 80243c0:	69ba      	ldr	r2, [r7, #24]
 80243c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80243c4:	683b      	ldr	r3, [r7, #0]
 80243c6:	685b      	ldr	r3, [r3, #4]
 80243c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80243cc:	2b00      	cmp	r3, #0
 80243ce:	f000 80c0 	beq.w	8024552 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80243d2:	2300      	movs	r3, #0
 80243d4:	60fb      	str	r3, [r7, #12]
 80243d6:	4b66      	ldr	r3, [pc, #408]	; (8024570 <HAL_GPIO_Init+0x324>)
 80243d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80243da:	4a65      	ldr	r2, [pc, #404]	; (8024570 <HAL_GPIO_Init+0x324>)
 80243dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80243e0:	6453      	str	r3, [r2, #68]	; 0x44
 80243e2:	4b63      	ldr	r3, [pc, #396]	; (8024570 <HAL_GPIO_Init+0x324>)
 80243e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80243e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80243ea:	60fb      	str	r3, [r7, #12]
 80243ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80243ee:	4a61      	ldr	r2, [pc, #388]	; (8024574 <HAL_GPIO_Init+0x328>)
 80243f0:	69fb      	ldr	r3, [r7, #28]
 80243f2:	089b      	lsrs	r3, r3, #2
 80243f4:	3302      	adds	r3, #2
 80243f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80243fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80243fc:	69fb      	ldr	r3, [r7, #28]
 80243fe:	f003 0303 	and.w	r3, r3, #3
 8024402:	009b      	lsls	r3, r3, #2
 8024404:	220f      	movs	r2, #15
 8024406:	fa02 f303 	lsl.w	r3, r2, r3
 802440a:	43db      	mvns	r3, r3
 802440c:	69ba      	ldr	r2, [r7, #24]
 802440e:	4013      	ands	r3, r2
 8024410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8024412:	687b      	ldr	r3, [r7, #4]
 8024414:	4a58      	ldr	r2, [pc, #352]	; (8024578 <HAL_GPIO_Init+0x32c>)
 8024416:	4293      	cmp	r3, r2
 8024418:	d037      	beq.n	802448a <HAL_GPIO_Init+0x23e>
 802441a:	687b      	ldr	r3, [r7, #4]
 802441c:	4a57      	ldr	r2, [pc, #348]	; (802457c <HAL_GPIO_Init+0x330>)
 802441e:	4293      	cmp	r3, r2
 8024420:	d031      	beq.n	8024486 <HAL_GPIO_Init+0x23a>
 8024422:	687b      	ldr	r3, [r7, #4]
 8024424:	4a56      	ldr	r2, [pc, #344]	; (8024580 <HAL_GPIO_Init+0x334>)
 8024426:	4293      	cmp	r3, r2
 8024428:	d02b      	beq.n	8024482 <HAL_GPIO_Init+0x236>
 802442a:	687b      	ldr	r3, [r7, #4]
 802442c:	4a55      	ldr	r2, [pc, #340]	; (8024584 <HAL_GPIO_Init+0x338>)
 802442e:	4293      	cmp	r3, r2
 8024430:	d025      	beq.n	802447e <HAL_GPIO_Init+0x232>
 8024432:	687b      	ldr	r3, [r7, #4]
 8024434:	4a54      	ldr	r2, [pc, #336]	; (8024588 <HAL_GPIO_Init+0x33c>)
 8024436:	4293      	cmp	r3, r2
 8024438:	d01f      	beq.n	802447a <HAL_GPIO_Init+0x22e>
 802443a:	687b      	ldr	r3, [r7, #4]
 802443c:	4a53      	ldr	r2, [pc, #332]	; (802458c <HAL_GPIO_Init+0x340>)
 802443e:	4293      	cmp	r3, r2
 8024440:	d019      	beq.n	8024476 <HAL_GPIO_Init+0x22a>
 8024442:	687b      	ldr	r3, [r7, #4]
 8024444:	4a52      	ldr	r2, [pc, #328]	; (8024590 <HAL_GPIO_Init+0x344>)
 8024446:	4293      	cmp	r3, r2
 8024448:	d013      	beq.n	8024472 <HAL_GPIO_Init+0x226>
 802444a:	687b      	ldr	r3, [r7, #4]
 802444c:	4a51      	ldr	r2, [pc, #324]	; (8024594 <HAL_GPIO_Init+0x348>)
 802444e:	4293      	cmp	r3, r2
 8024450:	d00d      	beq.n	802446e <HAL_GPIO_Init+0x222>
 8024452:	687b      	ldr	r3, [r7, #4]
 8024454:	4a50      	ldr	r2, [pc, #320]	; (8024598 <HAL_GPIO_Init+0x34c>)
 8024456:	4293      	cmp	r3, r2
 8024458:	d007      	beq.n	802446a <HAL_GPIO_Init+0x21e>
 802445a:	687b      	ldr	r3, [r7, #4]
 802445c:	4a4f      	ldr	r2, [pc, #316]	; (802459c <HAL_GPIO_Init+0x350>)
 802445e:	4293      	cmp	r3, r2
 8024460:	d101      	bne.n	8024466 <HAL_GPIO_Init+0x21a>
 8024462:	2309      	movs	r3, #9
 8024464:	e012      	b.n	802448c <HAL_GPIO_Init+0x240>
 8024466:	230a      	movs	r3, #10
 8024468:	e010      	b.n	802448c <HAL_GPIO_Init+0x240>
 802446a:	2308      	movs	r3, #8
 802446c:	e00e      	b.n	802448c <HAL_GPIO_Init+0x240>
 802446e:	2307      	movs	r3, #7
 8024470:	e00c      	b.n	802448c <HAL_GPIO_Init+0x240>
 8024472:	2306      	movs	r3, #6
 8024474:	e00a      	b.n	802448c <HAL_GPIO_Init+0x240>
 8024476:	2305      	movs	r3, #5
 8024478:	e008      	b.n	802448c <HAL_GPIO_Init+0x240>
 802447a:	2304      	movs	r3, #4
 802447c:	e006      	b.n	802448c <HAL_GPIO_Init+0x240>
 802447e:	2303      	movs	r3, #3
 8024480:	e004      	b.n	802448c <HAL_GPIO_Init+0x240>
 8024482:	2302      	movs	r3, #2
 8024484:	e002      	b.n	802448c <HAL_GPIO_Init+0x240>
 8024486:	2301      	movs	r3, #1
 8024488:	e000      	b.n	802448c <HAL_GPIO_Init+0x240>
 802448a:	2300      	movs	r3, #0
 802448c:	69fa      	ldr	r2, [r7, #28]
 802448e:	f002 0203 	and.w	r2, r2, #3
 8024492:	0092      	lsls	r2, r2, #2
 8024494:	4093      	lsls	r3, r2
 8024496:	69ba      	ldr	r2, [r7, #24]
 8024498:	4313      	orrs	r3, r2
 802449a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802449c:	4935      	ldr	r1, [pc, #212]	; (8024574 <HAL_GPIO_Init+0x328>)
 802449e:	69fb      	ldr	r3, [r7, #28]
 80244a0:	089b      	lsrs	r3, r3, #2
 80244a2:	3302      	adds	r3, #2
 80244a4:	69ba      	ldr	r2, [r7, #24]
 80244a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80244aa:	4b3d      	ldr	r3, [pc, #244]	; (80245a0 <HAL_GPIO_Init+0x354>)
 80244ac:	689b      	ldr	r3, [r3, #8]
 80244ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80244b0:	693b      	ldr	r3, [r7, #16]
 80244b2:	43db      	mvns	r3, r3
 80244b4:	69ba      	ldr	r2, [r7, #24]
 80244b6:	4013      	ands	r3, r2
 80244b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80244ba:	683b      	ldr	r3, [r7, #0]
 80244bc:	685b      	ldr	r3, [r3, #4]
 80244be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80244c2:	2b00      	cmp	r3, #0
 80244c4:	d003      	beq.n	80244ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80244c6:	69ba      	ldr	r2, [r7, #24]
 80244c8:	693b      	ldr	r3, [r7, #16]
 80244ca:	4313      	orrs	r3, r2
 80244cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80244ce:	4a34      	ldr	r2, [pc, #208]	; (80245a0 <HAL_GPIO_Init+0x354>)
 80244d0:	69bb      	ldr	r3, [r7, #24]
 80244d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80244d4:	4b32      	ldr	r3, [pc, #200]	; (80245a0 <HAL_GPIO_Init+0x354>)
 80244d6:	68db      	ldr	r3, [r3, #12]
 80244d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80244da:	693b      	ldr	r3, [r7, #16]
 80244dc:	43db      	mvns	r3, r3
 80244de:	69ba      	ldr	r2, [r7, #24]
 80244e0:	4013      	ands	r3, r2
 80244e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80244e4:	683b      	ldr	r3, [r7, #0]
 80244e6:	685b      	ldr	r3, [r3, #4]
 80244e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80244ec:	2b00      	cmp	r3, #0
 80244ee:	d003      	beq.n	80244f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80244f0:	69ba      	ldr	r2, [r7, #24]
 80244f2:	693b      	ldr	r3, [r7, #16]
 80244f4:	4313      	orrs	r3, r2
 80244f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80244f8:	4a29      	ldr	r2, [pc, #164]	; (80245a0 <HAL_GPIO_Init+0x354>)
 80244fa:	69bb      	ldr	r3, [r7, #24]
 80244fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80244fe:	4b28      	ldr	r3, [pc, #160]	; (80245a0 <HAL_GPIO_Init+0x354>)
 8024500:	685b      	ldr	r3, [r3, #4]
 8024502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024504:	693b      	ldr	r3, [r7, #16]
 8024506:	43db      	mvns	r3, r3
 8024508:	69ba      	ldr	r2, [r7, #24]
 802450a:	4013      	ands	r3, r2
 802450c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 802450e:	683b      	ldr	r3, [r7, #0]
 8024510:	685b      	ldr	r3, [r3, #4]
 8024512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024516:	2b00      	cmp	r3, #0
 8024518:	d003      	beq.n	8024522 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 802451a:	69ba      	ldr	r2, [r7, #24]
 802451c:	693b      	ldr	r3, [r7, #16]
 802451e:	4313      	orrs	r3, r2
 8024520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8024522:	4a1f      	ldr	r2, [pc, #124]	; (80245a0 <HAL_GPIO_Init+0x354>)
 8024524:	69bb      	ldr	r3, [r7, #24]
 8024526:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8024528:	4b1d      	ldr	r3, [pc, #116]	; (80245a0 <HAL_GPIO_Init+0x354>)
 802452a:	681b      	ldr	r3, [r3, #0]
 802452c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802452e:	693b      	ldr	r3, [r7, #16]
 8024530:	43db      	mvns	r3, r3
 8024532:	69ba      	ldr	r2, [r7, #24]
 8024534:	4013      	ands	r3, r2
 8024536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8024538:	683b      	ldr	r3, [r7, #0]
 802453a:	685b      	ldr	r3, [r3, #4]
 802453c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024540:	2b00      	cmp	r3, #0
 8024542:	d003      	beq.n	802454c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8024544:	69ba      	ldr	r2, [r7, #24]
 8024546:	693b      	ldr	r3, [r7, #16]
 8024548:	4313      	orrs	r3, r2
 802454a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 802454c:	4a14      	ldr	r2, [pc, #80]	; (80245a0 <HAL_GPIO_Init+0x354>)
 802454e:	69bb      	ldr	r3, [r7, #24]
 8024550:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024552:	69fb      	ldr	r3, [r7, #28]
 8024554:	3301      	adds	r3, #1
 8024556:	61fb      	str	r3, [r7, #28]
 8024558:	69fb      	ldr	r3, [r7, #28]
 802455a:	2b0f      	cmp	r3, #15
 802455c:	f67f ae84 	bls.w	8024268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8024560:	bf00      	nop
 8024562:	bf00      	nop
 8024564:	3724      	adds	r7, #36	; 0x24
 8024566:	46bd      	mov	sp, r7
 8024568:	f85d 7b04 	ldr.w	r7, [sp], #4
 802456c:	4770      	bx	lr
 802456e:	bf00      	nop
 8024570:	40023800 	.word	0x40023800
 8024574:	40013800 	.word	0x40013800
 8024578:	40020000 	.word	0x40020000
 802457c:	40020400 	.word	0x40020400
 8024580:	40020800 	.word	0x40020800
 8024584:	40020c00 	.word	0x40020c00
 8024588:	40021000 	.word	0x40021000
 802458c:	40021400 	.word	0x40021400
 8024590:	40021800 	.word	0x40021800
 8024594:	40021c00 	.word	0x40021c00
 8024598:	40022000 	.word	0x40022000
 802459c:	40022400 	.word	0x40022400
 80245a0:	40013c00 	.word	0x40013c00

080245a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80245a4:	b480      	push	{r7}
 80245a6:	b087      	sub	sp, #28
 80245a8:	af00      	add	r7, sp, #0
 80245aa:	6078      	str	r0, [r7, #4]
 80245ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80245ae:	2300      	movs	r3, #0
 80245b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80245b2:	2300      	movs	r3, #0
 80245b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80245b6:	2300      	movs	r3, #0
 80245b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80245ba:	2300      	movs	r3, #0
 80245bc:	617b      	str	r3, [r7, #20]
 80245be:	e0d9      	b.n	8024774 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80245c0:	2201      	movs	r2, #1
 80245c2:	697b      	ldr	r3, [r7, #20]
 80245c4:	fa02 f303 	lsl.w	r3, r2, r3
 80245c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80245ca:	683a      	ldr	r2, [r7, #0]
 80245cc:	693b      	ldr	r3, [r7, #16]
 80245ce:	4013      	ands	r3, r2
 80245d0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80245d2:	68fa      	ldr	r2, [r7, #12]
 80245d4:	693b      	ldr	r3, [r7, #16]
 80245d6:	429a      	cmp	r2, r3
 80245d8:	f040 80c9 	bne.w	802476e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80245dc:	4a6b      	ldr	r2, [pc, #428]	; (802478c <HAL_GPIO_DeInit+0x1e8>)
 80245de:	697b      	ldr	r3, [r7, #20]
 80245e0:	089b      	lsrs	r3, r3, #2
 80245e2:	3302      	adds	r3, #2
 80245e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80245e8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80245ea:	697b      	ldr	r3, [r7, #20]
 80245ec:	f003 0303 	and.w	r3, r3, #3
 80245f0:	009b      	lsls	r3, r3, #2
 80245f2:	220f      	movs	r2, #15
 80245f4:	fa02 f303 	lsl.w	r3, r2, r3
 80245f8:	68ba      	ldr	r2, [r7, #8]
 80245fa:	4013      	ands	r3, r2
 80245fc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80245fe:	687b      	ldr	r3, [r7, #4]
 8024600:	4a63      	ldr	r2, [pc, #396]	; (8024790 <HAL_GPIO_DeInit+0x1ec>)
 8024602:	4293      	cmp	r3, r2
 8024604:	d037      	beq.n	8024676 <HAL_GPIO_DeInit+0xd2>
 8024606:	687b      	ldr	r3, [r7, #4]
 8024608:	4a62      	ldr	r2, [pc, #392]	; (8024794 <HAL_GPIO_DeInit+0x1f0>)
 802460a:	4293      	cmp	r3, r2
 802460c:	d031      	beq.n	8024672 <HAL_GPIO_DeInit+0xce>
 802460e:	687b      	ldr	r3, [r7, #4]
 8024610:	4a61      	ldr	r2, [pc, #388]	; (8024798 <HAL_GPIO_DeInit+0x1f4>)
 8024612:	4293      	cmp	r3, r2
 8024614:	d02b      	beq.n	802466e <HAL_GPIO_DeInit+0xca>
 8024616:	687b      	ldr	r3, [r7, #4]
 8024618:	4a60      	ldr	r2, [pc, #384]	; (802479c <HAL_GPIO_DeInit+0x1f8>)
 802461a:	4293      	cmp	r3, r2
 802461c:	d025      	beq.n	802466a <HAL_GPIO_DeInit+0xc6>
 802461e:	687b      	ldr	r3, [r7, #4]
 8024620:	4a5f      	ldr	r2, [pc, #380]	; (80247a0 <HAL_GPIO_DeInit+0x1fc>)
 8024622:	4293      	cmp	r3, r2
 8024624:	d01f      	beq.n	8024666 <HAL_GPIO_DeInit+0xc2>
 8024626:	687b      	ldr	r3, [r7, #4]
 8024628:	4a5e      	ldr	r2, [pc, #376]	; (80247a4 <HAL_GPIO_DeInit+0x200>)
 802462a:	4293      	cmp	r3, r2
 802462c:	d019      	beq.n	8024662 <HAL_GPIO_DeInit+0xbe>
 802462e:	687b      	ldr	r3, [r7, #4]
 8024630:	4a5d      	ldr	r2, [pc, #372]	; (80247a8 <HAL_GPIO_DeInit+0x204>)
 8024632:	4293      	cmp	r3, r2
 8024634:	d013      	beq.n	802465e <HAL_GPIO_DeInit+0xba>
 8024636:	687b      	ldr	r3, [r7, #4]
 8024638:	4a5c      	ldr	r2, [pc, #368]	; (80247ac <HAL_GPIO_DeInit+0x208>)
 802463a:	4293      	cmp	r3, r2
 802463c:	d00d      	beq.n	802465a <HAL_GPIO_DeInit+0xb6>
 802463e:	687b      	ldr	r3, [r7, #4]
 8024640:	4a5b      	ldr	r2, [pc, #364]	; (80247b0 <HAL_GPIO_DeInit+0x20c>)
 8024642:	4293      	cmp	r3, r2
 8024644:	d007      	beq.n	8024656 <HAL_GPIO_DeInit+0xb2>
 8024646:	687b      	ldr	r3, [r7, #4]
 8024648:	4a5a      	ldr	r2, [pc, #360]	; (80247b4 <HAL_GPIO_DeInit+0x210>)
 802464a:	4293      	cmp	r3, r2
 802464c:	d101      	bne.n	8024652 <HAL_GPIO_DeInit+0xae>
 802464e:	2309      	movs	r3, #9
 8024650:	e012      	b.n	8024678 <HAL_GPIO_DeInit+0xd4>
 8024652:	230a      	movs	r3, #10
 8024654:	e010      	b.n	8024678 <HAL_GPIO_DeInit+0xd4>
 8024656:	2308      	movs	r3, #8
 8024658:	e00e      	b.n	8024678 <HAL_GPIO_DeInit+0xd4>
 802465a:	2307      	movs	r3, #7
 802465c:	e00c      	b.n	8024678 <HAL_GPIO_DeInit+0xd4>
 802465e:	2306      	movs	r3, #6
 8024660:	e00a      	b.n	8024678 <HAL_GPIO_DeInit+0xd4>
 8024662:	2305      	movs	r3, #5
 8024664:	e008      	b.n	8024678 <HAL_GPIO_DeInit+0xd4>
 8024666:	2304      	movs	r3, #4
 8024668:	e006      	b.n	8024678 <HAL_GPIO_DeInit+0xd4>
 802466a:	2303      	movs	r3, #3
 802466c:	e004      	b.n	8024678 <HAL_GPIO_DeInit+0xd4>
 802466e:	2302      	movs	r3, #2
 8024670:	e002      	b.n	8024678 <HAL_GPIO_DeInit+0xd4>
 8024672:	2301      	movs	r3, #1
 8024674:	e000      	b.n	8024678 <HAL_GPIO_DeInit+0xd4>
 8024676:	2300      	movs	r3, #0
 8024678:	697a      	ldr	r2, [r7, #20]
 802467a:	f002 0203 	and.w	r2, r2, #3
 802467e:	0092      	lsls	r2, r2, #2
 8024680:	4093      	lsls	r3, r2
 8024682:	68ba      	ldr	r2, [r7, #8]
 8024684:	429a      	cmp	r2, r3
 8024686:	d132      	bne.n	80246ee <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8024688:	4b4b      	ldr	r3, [pc, #300]	; (80247b8 <HAL_GPIO_DeInit+0x214>)
 802468a:	681a      	ldr	r2, [r3, #0]
 802468c:	68fb      	ldr	r3, [r7, #12]
 802468e:	43db      	mvns	r3, r3
 8024690:	4949      	ldr	r1, [pc, #292]	; (80247b8 <HAL_GPIO_DeInit+0x214>)
 8024692:	4013      	ands	r3, r2
 8024694:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8024696:	4b48      	ldr	r3, [pc, #288]	; (80247b8 <HAL_GPIO_DeInit+0x214>)
 8024698:	685a      	ldr	r2, [r3, #4]
 802469a:	68fb      	ldr	r3, [r7, #12]
 802469c:	43db      	mvns	r3, r3
 802469e:	4946      	ldr	r1, [pc, #280]	; (80247b8 <HAL_GPIO_DeInit+0x214>)
 80246a0:	4013      	ands	r3, r2
 80246a2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80246a4:	4b44      	ldr	r3, [pc, #272]	; (80247b8 <HAL_GPIO_DeInit+0x214>)
 80246a6:	68da      	ldr	r2, [r3, #12]
 80246a8:	68fb      	ldr	r3, [r7, #12]
 80246aa:	43db      	mvns	r3, r3
 80246ac:	4942      	ldr	r1, [pc, #264]	; (80247b8 <HAL_GPIO_DeInit+0x214>)
 80246ae:	4013      	ands	r3, r2
 80246b0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80246b2:	4b41      	ldr	r3, [pc, #260]	; (80247b8 <HAL_GPIO_DeInit+0x214>)
 80246b4:	689a      	ldr	r2, [r3, #8]
 80246b6:	68fb      	ldr	r3, [r7, #12]
 80246b8:	43db      	mvns	r3, r3
 80246ba:	493f      	ldr	r1, [pc, #252]	; (80247b8 <HAL_GPIO_DeInit+0x214>)
 80246bc:	4013      	ands	r3, r2
 80246be:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80246c0:	697b      	ldr	r3, [r7, #20]
 80246c2:	f003 0303 	and.w	r3, r3, #3
 80246c6:	009b      	lsls	r3, r3, #2
 80246c8:	220f      	movs	r2, #15
 80246ca:	fa02 f303 	lsl.w	r3, r2, r3
 80246ce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80246d0:	4a2e      	ldr	r2, [pc, #184]	; (802478c <HAL_GPIO_DeInit+0x1e8>)
 80246d2:	697b      	ldr	r3, [r7, #20]
 80246d4:	089b      	lsrs	r3, r3, #2
 80246d6:	3302      	adds	r3, #2
 80246d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80246dc:	68bb      	ldr	r3, [r7, #8]
 80246de:	43da      	mvns	r2, r3
 80246e0:	482a      	ldr	r0, [pc, #168]	; (802478c <HAL_GPIO_DeInit+0x1e8>)
 80246e2:	697b      	ldr	r3, [r7, #20]
 80246e4:	089b      	lsrs	r3, r3, #2
 80246e6:	400a      	ands	r2, r1
 80246e8:	3302      	adds	r3, #2
 80246ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80246ee:	687b      	ldr	r3, [r7, #4]
 80246f0:	681a      	ldr	r2, [r3, #0]
 80246f2:	697b      	ldr	r3, [r7, #20]
 80246f4:	005b      	lsls	r3, r3, #1
 80246f6:	2103      	movs	r1, #3
 80246f8:	fa01 f303 	lsl.w	r3, r1, r3
 80246fc:	43db      	mvns	r3, r3
 80246fe:	401a      	ands	r2, r3
 8024700:	687b      	ldr	r3, [r7, #4]
 8024702:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024704:	697b      	ldr	r3, [r7, #20]
 8024706:	08da      	lsrs	r2, r3, #3
 8024708:	687b      	ldr	r3, [r7, #4]
 802470a:	3208      	adds	r2, #8
 802470c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024710:	697b      	ldr	r3, [r7, #20]
 8024712:	f003 0307 	and.w	r3, r3, #7
 8024716:	009b      	lsls	r3, r3, #2
 8024718:	220f      	movs	r2, #15
 802471a:	fa02 f303 	lsl.w	r3, r2, r3
 802471e:	43db      	mvns	r3, r3
 8024720:	697a      	ldr	r2, [r7, #20]
 8024722:	08d2      	lsrs	r2, r2, #3
 8024724:	4019      	ands	r1, r3
 8024726:	687b      	ldr	r3, [r7, #4]
 8024728:	3208      	adds	r2, #8
 802472a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802472e:	687b      	ldr	r3, [r7, #4]
 8024730:	68da      	ldr	r2, [r3, #12]
 8024732:	697b      	ldr	r3, [r7, #20]
 8024734:	005b      	lsls	r3, r3, #1
 8024736:	2103      	movs	r1, #3
 8024738:	fa01 f303 	lsl.w	r3, r1, r3
 802473c:	43db      	mvns	r3, r3
 802473e:	401a      	ands	r2, r3
 8024740:	687b      	ldr	r3, [r7, #4]
 8024742:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024744:	687b      	ldr	r3, [r7, #4]
 8024746:	685a      	ldr	r2, [r3, #4]
 8024748:	2101      	movs	r1, #1
 802474a:	697b      	ldr	r3, [r7, #20]
 802474c:	fa01 f303 	lsl.w	r3, r1, r3
 8024750:	43db      	mvns	r3, r3
 8024752:	401a      	ands	r2, r3
 8024754:	687b      	ldr	r3, [r7, #4]
 8024756:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024758:	687b      	ldr	r3, [r7, #4]
 802475a:	689a      	ldr	r2, [r3, #8]
 802475c:	697b      	ldr	r3, [r7, #20]
 802475e:	005b      	lsls	r3, r3, #1
 8024760:	2103      	movs	r1, #3
 8024762:	fa01 f303 	lsl.w	r3, r1, r3
 8024766:	43db      	mvns	r3, r3
 8024768:	401a      	ands	r2, r3
 802476a:	687b      	ldr	r3, [r7, #4]
 802476c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802476e:	697b      	ldr	r3, [r7, #20]
 8024770:	3301      	adds	r3, #1
 8024772:	617b      	str	r3, [r7, #20]
 8024774:	697b      	ldr	r3, [r7, #20]
 8024776:	2b0f      	cmp	r3, #15
 8024778:	f67f af22 	bls.w	80245c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 802477c:	bf00      	nop
 802477e:	bf00      	nop
 8024780:	371c      	adds	r7, #28
 8024782:	46bd      	mov	sp, r7
 8024784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024788:	4770      	bx	lr
 802478a:	bf00      	nop
 802478c:	40013800 	.word	0x40013800
 8024790:	40020000 	.word	0x40020000
 8024794:	40020400 	.word	0x40020400
 8024798:	40020800 	.word	0x40020800
 802479c:	40020c00 	.word	0x40020c00
 80247a0:	40021000 	.word	0x40021000
 80247a4:	40021400 	.word	0x40021400
 80247a8:	40021800 	.word	0x40021800
 80247ac:	40021c00 	.word	0x40021c00
 80247b0:	40022000 	.word	0x40022000
 80247b4:	40022400 	.word	0x40022400
 80247b8:	40013c00 	.word	0x40013c00

080247bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80247bc:	b480      	push	{r7}
 80247be:	b083      	sub	sp, #12
 80247c0:	af00      	add	r7, sp, #0
 80247c2:	6078      	str	r0, [r7, #4]
 80247c4:	460b      	mov	r3, r1
 80247c6:	807b      	strh	r3, [r7, #2]
 80247c8:	4613      	mov	r3, r2
 80247ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80247cc:	787b      	ldrb	r3, [r7, #1]
 80247ce:	2b00      	cmp	r3, #0
 80247d0:	d003      	beq.n	80247da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80247d2:	887a      	ldrh	r2, [r7, #2]
 80247d4:	687b      	ldr	r3, [r7, #4]
 80247d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80247d8:	e003      	b.n	80247e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80247da:	887b      	ldrh	r3, [r7, #2]
 80247dc:	041a      	lsls	r2, r3, #16
 80247de:	687b      	ldr	r3, [r7, #4]
 80247e0:	619a      	str	r2, [r3, #24]
}
 80247e2:	bf00      	nop
 80247e4:	370c      	adds	r7, #12
 80247e6:	46bd      	mov	sp, r7
 80247e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247ec:	4770      	bx	lr
	...

080247f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80247f0:	b580      	push	{r7, lr}
 80247f2:	b082      	sub	sp, #8
 80247f4:	af00      	add	r7, sp, #0
 80247f6:	4603      	mov	r3, r0
 80247f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80247fa:	4b08      	ldr	r3, [pc, #32]	; (802481c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80247fc:	695a      	ldr	r2, [r3, #20]
 80247fe:	88fb      	ldrh	r3, [r7, #6]
 8024800:	4013      	ands	r3, r2
 8024802:	2b00      	cmp	r3, #0
 8024804:	d006      	beq.n	8024814 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8024806:	4a05      	ldr	r2, [pc, #20]	; (802481c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8024808:	88fb      	ldrh	r3, [r7, #6]
 802480a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 802480c:	88fb      	ldrh	r3, [r7, #6]
 802480e:	4618      	mov	r0, r3
 8024810:	f7fd fafe 	bl	8021e10 <HAL_GPIO_EXTI_Callback>
  }
}
 8024814:	bf00      	nop
 8024816:	3708      	adds	r7, #8
 8024818:	46bd      	mov	sp, r7
 802481a:	bd80      	pop	{r7, pc}
 802481c:	40013c00 	.word	0x40013c00

08024820 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8024820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024822:	b08f      	sub	sp, #60	; 0x3c
 8024824:	af0a      	add	r7, sp, #40	; 0x28
 8024826:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8024828:	687b      	ldr	r3, [r7, #4]
 802482a:	2b00      	cmp	r3, #0
 802482c:	d101      	bne.n	8024832 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 802482e:	2301      	movs	r3, #1
 8024830:	e054      	b.n	80248dc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8024832:	687b      	ldr	r3, [r7, #4]
 8024834:	681b      	ldr	r3, [r3, #0]
 8024836:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8024838:	687b      	ldr	r3, [r7, #4]
 802483a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 802483e:	b2db      	uxtb	r3, r3
 8024840:	2b00      	cmp	r3, #0
 8024842:	d106      	bne.n	8024852 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8024844:	687b      	ldr	r3, [r7, #4]
 8024846:	2200      	movs	r2, #0
 8024848:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 802484c:	6878      	ldr	r0, [r7, #4]
 802484e:	f008 fd01 	bl	802d254 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8024852:	687b      	ldr	r3, [r7, #4]
 8024854:	2203      	movs	r2, #3
 8024856:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 802485a:	68fb      	ldr	r3, [r7, #12]
 802485c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802485e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024862:	2b00      	cmp	r3, #0
 8024864:	d102      	bne.n	802486c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8024866:	687b      	ldr	r3, [r7, #4]
 8024868:	2200      	movs	r2, #0
 802486a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 802486c:	687b      	ldr	r3, [r7, #4]
 802486e:	681b      	ldr	r3, [r3, #0]
 8024870:	4618      	mov	r0, r3
 8024872:	f005 fd2f 	bl	802a2d4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8024876:	687b      	ldr	r3, [r7, #4]
 8024878:	681b      	ldr	r3, [r3, #0]
 802487a:	603b      	str	r3, [r7, #0]
 802487c:	687e      	ldr	r6, [r7, #4]
 802487e:	466d      	mov	r5, sp
 8024880:	f106 0410 	add.w	r4, r6, #16
 8024884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802488a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802488c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024890:	e885 0003 	stmia.w	r5, {r0, r1}
 8024894:	1d33      	adds	r3, r6, #4
 8024896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8024898:	6838      	ldr	r0, [r7, #0]
 802489a:	f005 fca9 	bl	802a1f0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 802489e:	687b      	ldr	r3, [r7, #4]
 80248a0:	681b      	ldr	r3, [r3, #0]
 80248a2:	2101      	movs	r1, #1
 80248a4:	4618      	mov	r0, r3
 80248a6:	f005 fd26 	bl	802a2f6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80248aa:	687b      	ldr	r3, [r7, #4]
 80248ac:	681b      	ldr	r3, [r3, #0]
 80248ae:	603b      	str	r3, [r7, #0]
 80248b0:	687e      	ldr	r6, [r7, #4]
 80248b2:	466d      	mov	r5, sp
 80248b4:	f106 0410 	add.w	r4, r6, #16
 80248b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80248ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80248bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80248be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80248c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80248c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80248c8:	1d33      	adds	r3, r6, #4
 80248ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80248cc:	6838      	ldr	r0, [r7, #0]
 80248ce:	f005 feaf 	bl	802a630 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80248d2:	687b      	ldr	r3, [r7, #4]
 80248d4:	2201      	movs	r2, #1
 80248d6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80248da:	2300      	movs	r3, #0
}
 80248dc:	4618      	mov	r0, r3
 80248de:	3714      	adds	r7, #20
 80248e0:	46bd      	mov	sp, r7
 80248e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080248e4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80248e4:	b590      	push	{r4, r7, lr}
 80248e6:	b089      	sub	sp, #36	; 0x24
 80248e8:	af04      	add	r7, sp, #16
 80248ea:	6078      	str	r0, [r7, #4]
 80248ec:	4608      	mov	r0, r1
 80248ee:	4611      	mov	r1, r2
 80248f0:	461a      	mov	r2, r3
 80248f2:	4603      	mov	r3, r0
 80248f4:	70fb      	strb	r3, [r7, #3]
 80248f6:	460b      	mov	r3, r1
 80248f8:	70bb      	strb	r3, [r7, #2]
 80248fa:	4613      	mov	r3, r2
 80248fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80248fe:	687b      	ldr	r3, [r7, #4]
 8024900:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8024904:	2b01      	cmp	r3, #1
 8024906:	d101      	bne.n	802490c <HAL_HCD_HC_Init+0x28>
 8024908:	2302      	movs	r3, #2
 802490a:	e076      	b.n	80249fa <HAL_HCD_HC_Init+0x116>
 802490c:	687b      	ldr	r3, [r7, #4]
 802490e:	2201      	movs	r2, #1
 8024910:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8024914:	78fb      	ldrb	r3, [r7, #3]
 8024916:	687a      	ldr	r2, [r7, #4]
 8024918:	212c      	movs	r1, #44	; 0x2c
 802491a:	fb01 f303 	mul.w	r3, r1, r3
 802491e:	4413      	add	r3, r2
 8024920:	333d      	adds	r3, #61	; 0x3d
 8024922:	2200      	movs	r2, #0
 8024924:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8024926:	78fb      	ldrb	r3, [r7, #3]
 8024928:	687a      	ldr	r2, [r7, #4]
 802492a:	212c      	movs	r1, #44	; 0x2c
 802492c:	fb01 f303 	mul.w	r3, r1, r3
 8024930:	4413      	add	r3, r2
 8024932:	3338      	adds	r3, #56	; 0x38
 8024934:	787a      	ldrb	r2, [r7, #1]
 8024936:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8024938:	78fb      	ldrb	r3, [r7, #3]
 802493a:	687a      	ldr	r2, [r7, #4]
 802493c:	212c      	movs	r1, #44	; 0x2c
 802493e:	fb01 f303 	mul.w	r3, r1, r3
 8024942:	4413      	add	r3, r2
 8024944:	3340      	adds	r3, #64	; 0x40
 8024946:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8024948:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 802494a:	78fb      	ldrb	r3, [r7, #3]
 802494c:	687a      	ldr	r2, [r7, #4]
 802494e:	212c      	movs	r1, #44	; 0x2c
 8024950:	fb01 f303 	mul.w	r3, r1, r3
 8024954:	4413      	add	r3, r2
 8024956:	3339      	adds	r3, #57	; 0x39
 8024958:	78fa      	ldrb	r2, [r7, #3]
 802495a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 802495c:	78fb      	ldrb	r3, [r7, #3]
 802495e:	687a      	ldr	r2, [r7, #4]
 8024960:	212c      	movs	r1, #44	; 0x2c
 8024962:	fb01 f303 	mul.w	r3, r1, r3
 8024966:	4413      	add	r3, r2
 8024968:	333f      	adds	r3, #63	; 0x3f
 802496a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 802496e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8024970:	78fb      	ldrb	r3, [r7, #3]
 8024972:	78ba      	ldrb	r2, [r7, #2]
 8024974:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8024978:	b2d0      	uxtb	r0, r2
 802497a:	687a      	ldr	r2, [r7, #4]
 802497c:	212c      	movs	r1, #44	; 0x2c
 802497e:	fb01 f303 	mul.w	r3, r1, r3
 8024982:	4413      	add	r3, r2
 8024984:	333a      	adds	r3, #58	; 0x3a
 8024986:	4602      	mov	r2, r0
 8024988:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 802498a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802498e:	2b00      	cmp	r3, #0
 8024990:	da09      	bge.n	80249a6 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8024992:	78fb      	ldrb	r3, [r7, #3]
 8024994:	687a      	ldr	r2, [r7, #4]
 8024996:	212c      	movs	r1, #44	; 0x2c
 8024998:	fb01 f303 	mul.w	r3, r1, r3
 802499c:	4413      	add	r3, r2
 802499e:	333b      	adds	r3, #59	; 0x3b
 80249a0:	2201      	movs	r2, #1
 80249a2:	701a      	strb	r2, [r3, #0]
 80249a4:	e008      	b.n	80249b8 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80249a6:	78fb      	ldrb	r3, [r7, #3]
 80249a8:	687a      	ldr	r2, [r7, #4]
 80249aa:	212c      	movs	r1, #44	; 0x2c
 80249ac:	fb01 f303 	mul.w	r3, r1, r3
 80249b0:	4413      	add	r3, r2
 80249b2:	333b      	adds	r3, #59	; 0x3b
 80249b4:	2200      	movs	r2, #0
 80249b6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80249b8:	78fb      	ldrb	r3, [r7, #3]
 80249ba:	687a      	ldr	r2, [r7, #4]
 80249bc:	212c      	movs	r1, #44	; 0x2c
 80249be:	fb01 f303 	mul.w	r3, r1, r3
 80249c2:	4413      	add	r3, r2
 80249c4:	333c      	adds	r3, #60	; 0x3c
 80249c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80249ca:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80249cc:	687b      	ldr	r3, [r7, #4]
 80249ce:	6818      	ldr	r0, [r3, #0]
 80249d0:	787c      	ldrb	r4, [r7, #1]
 80249d2:	78ba      	ldrb	r2, [r7, #2]
 80249d4:	78f9      	ldrb	r1, [r7, #3]
 80249d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80249d8:	9302      	str	r3, [sp, #8]
 80249da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80249de:	9301      	str	r3, [sp, #4]
 80249e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80249e4:	9300      	str	r3, [sp, #0]
 80249e6:	4623      	mov	r3, r4
 80249e8:	f005 ffa8 	bl	802a93c <USB_HC_Init>
 80249ec:	4603      	mov	r3, r0
 80249ee:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80249f0:	687b      	ldr	r3, [r7, #4]
 80249f2:	2200      	movs	r2, #0
 80249f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80249f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80249fa:	4618      	mov	r0, r3
 80249fc:	3714      	adds	r7, #20
 80249fe:	46bd      	mov	sp, r7
 8024a00:	bd90      	pop	{r4, r7, pc}

08024a02 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8024a02:	b580      	push	{r7, lr}
 8024a04:	b084      	sub	sp, #16
 8024a06:	af00      	add	r7, sp, #0
 8024a08:	6078      	str	r0, [r7, #4]
 8024a0a:	460b      	mov	r3, r1
 8024a0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8024a0e:	2300      	movs	r3, #0
 8024a10:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8024a12:	687b      	ldr	r3, [r7, #4]
 8024a14:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8024a18:	2b01      	cmp	r3, #1
 8024a1a:	d101      	bne.n	8024a20 <HAL_HCD_HC_Halt+0x1e>
 8024a1c:	2302      	movs	r3, #2
 8024a1e:	e00f      	b.n	8024a40 <HAL_HCD_HC_Halt+0x3e>
 8024a20:	687b      	ldr	r3, [r7, #4]
 8024a22:	2201      	movs	r2, #1
 8024a24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024a28:	687b      	ldr	r3, [r7, #4]
 8024a2a:	681b      	ldr	r3, [r3, #0]
 8024a2c:	78fa      	ldrb	r2, [r7, #3]
 8024a2e:	4611      	mov	r1, r2
 8024a30:	4618      	mov	r0, r3
 8024a32:	f006 f9f8 	bl	802ae26 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8024a36:	687b      	ldr	r3, [r7, #4]
 8024a38:	2200      	movs	r2, #0
 8024a3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8024a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8024a40:	4618      	mov	r0, r3
 8024a42:	3710      	adds	r7, #16
 8024a44:	46bd      	mov	sp, r7
 8024a46:	bd80      	pop	{r7, pc}

08024a48 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8024a48:	b580      	push	{r7, lr}
 8024a4a:	b082      	sub	sp, #8
 8024a4c:	af00      	add	r7, sp, #0
 8024a4e:	6078      	str	r0, [r7, #4]
 8024a50:	4608      	mov	r0, r1
 8024a52:	4611      	mov	r1, r2
 8024a54:	461a      	mov	r2, r3
 8024a56:	4603      	mov	r3, r0
 8024a58:	70fb      	strb	r3, [r7, #3]
 8024a5a:	460b      	mov	r3, r1
 8024a5c:	70bb      	strb	r3, [r7, #2]
 8024a5e:	4613      	mov	r3, r2
 8024a60:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8024a62:	78fb      	ldrb	r3, [r7, #3]
 8024a64:	687a      	ldr	r2, [r7, #4]
 8024a66:	212c      	movs	r1, #44	; 0x2c
 8024a68:	fb01 f303 	mul.w	r3, r1, r3
 8024a6c:	4413      	add	r3, r2
 8024a6e:	333b      	adds	r3, #59	; 0x3b
 8024a70:	78ba      	ldrb	r2, [r7, #2]
 8024a72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8024a74:	78fb      	ldrb	r3, [r7, #3]
 8024a76:	687a      	ldr	r2, [r7, #4]
 8024a78:	212c      	movs	r1, #44	; 0x2c
 8024a7a:	fb01 f303 	mul.w	r3, r1, r3
 8024a7e:	4413      	add	r3, r2
 8024a80:	333f      	adds	r3, #63	; 0x3f
 8024a82:	787a      	ldrb	r2, [r7, #1]
 8024a84:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8024a86:	7c3b      	ldrb	r3, [r7, #16]
 8024a88:	2b00      	cmp	r3, #0
 8024a8a:	d112      	bne.n	8024ab2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8024a8c:	78fb      	ldrb	r3, [r7, #3]
 8024a8e:	687a      	ldr	r2, [r7, #4]
 8024a90:	212c      	movs	r1, #44	; 0x2c
 8024a92:	fb01 f303 	mul.w	r3, r1, r3
 8024a96:	4413      	add	r3, r2
 8024a98:	3342      	adds	r3, #66	; 0x42
 8024a9a:	2203      	movs	r2, #3
 8024a9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8024a9e:	78fb      	ldrb	r3, [r7, #3]
 8024aa0:	687a      	ldr	r2, [r7, #4]
 8024aa2:	212c      	movs	r1, #44	; 0x2c
 8024aa4:	fb01 f303 	mul.w	r3, r1, r3
 8024aa8:	4413      	add	r3, r2
 8024aaa:	333d      	adds	r3, #61	; 0x3d
 8024aac:	7f3a      	ldrb	r2, [r7, #28]
 8024aae:	701a      	strb	r2, [r3, #0]
 8024ab0:	e008      	b.n	8024ac4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024ab2:	78fb      	ldrb	r3, [r7, #3]
 8024ab4:	687a      	ldr	r2, [r7, #4]
 8024ab6:	212c      	movs	r1, #44	; 0x2c
 8024ab8:	fb01 f303 	mul.w	r3, r1, r3
 8024abc:	4413      	add	r3, r2
 8024abe:	3342      	adds	r3, #66	; 0x42
 8024ac0:	2202      	movs	r2, #2
 8024ac2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8024ac4:	787b      	ldrb	r3, [r7, #1]
 8024ac6:	2b03      	cmp	r3, #3
 8024ac8:	f200 80c6 	bhi.w	8024c58 <HAL_HCD_HC_SubmitRequest+0x210>
 8024acc:	a201      	add	r2, pc, #4	; (adr r2, 8024ad4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8024ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024ad2:	bf00      	nop
 8024ad4:	08024ae5 	.word	0x08024ae5
 8024ad8:	08024c45 	.word	0x08024c45
 8024adc:	08024b49 	.word	0x08024b49
 8024ae0:	08024bc7 	.word	0x08024bc7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8024ae4:	7c3b      	ldrb	r3, [r7, #16]
 8024ae6:	2b01      	cmp	r3, #1
 8024ae8:	f040 80b8 	bne.w	8024c5c <HAL_HCD_HC_SubmitRequest+0x214>
 8024aec:	78bb      	ldrb	r3, [r7, #2]
 8024aee:	2b00      	cmp	r3, #0
 8024af0:	f040 80b4 	bne.w	8024c5c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8024af4:	8b3b      	ldrh	r3, [r7, #24]
 8024af6:	2b00      	cmp	r3, #0
 8024af8:	d108      	bne.n	8024b0c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8024afa:	78fb      	ldrb	r3, [r7, #3]
 8024afc:	687a      	ldr	r2, [r7, #4]
 8024afe:	212c      	movs	r1, #44	; 0x2c
 8024b00:	fb01 f303 	mul.w	r3, r1, r3
 8024b04:	4413      	add	r3, r2
 8024b06:	3355      	adds	r3, #85	; 0x55
 8024b08:	2201      	movs	r2, #1
 8024b0a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8024b0c:	78fb      	ldrb	r3, [r7, #3]
 8024b0e:	687a      	ldr	r2, [r7, #4]
 8024b10:	212c      	movs	r1, #44	; 0x2c
 8024b12:	fb01 f303 	mul.w	r3, r1, r3
 8024b16:	4413      	add	r3, r2
 8024b18:	3355      	adds	r3, #85	; 0x55
 8024b1a:	781b      	ldrb	r3, [r3, #0]
 8024b1c:	2b00      	cmp	r3, #0
 8024b1e:	d109      	bne.n	8024b34 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024b20:	78fb      	ldrb	r3, [r7, #3]
 8024b22:	687a      	ldr	r2, [r7, #4]
 8024b24:	212c      	movs	r1, #44	; 0x2c
 8024b26:	fb01 f303 	mul.w	r3, r1, r3
 8024b2a:	4413      	add	r3, r2
 8024b2c:	3342      	adds	r3, #66	; 0x42
 8024b2e:	2200      	movs	r2, #0
 8024b30:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8024b32:	e093      	b.n	8024c5c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024b34:	78fb      	ldrb	r3, [r7, #3]
 8024b36:	687a      	ldr	r2, [r7, #4]
 8024b38:	212c      	movs	r1, #44	; 0x2c
 8024b3a:	fb01 f303 	mul.w	r3, r1, r3
 8024b3e:	4413      	add	r3, r2
 8024b40:	3342      	adds	r3, #66	; 0x42
 8024b42:	2202      	movs	r2, #2
 8024b44:	701a      	strb	r2, [r3, #0]
      break;
 8024b46:	e089      	b.n	8024c5c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8024b48:	78bb      	ldrb	r3, [r7, #2]
 8024b4a:	2b00      	cmp	r3, #0
 8024b4c:	d11d      	bne.n	8024b8a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8024b4e:	78fb      	ldrb	r3, [r7, #3]
 8024b50:	687a      	ldr	r2, [r7, #4]
 8024b52:	212c      	movs	r1, #44	; 0x2c
 8024b54:	fb01 f303 	mul.w	r3, r1, r3
 8024b58:	4413      	add	r3, r2
 8024b5a:	3355      	adds	r3, #85	; 0x55
 8024b5c:	781b      	ldrb	r3, [r3, #0]
 8024b5e:	2b00      	cmp	r3, #0
 8024b60:	d109      	bne.n	8024b76 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024b62:	78fb      	ldrb	r3, [r7, #3]
 8024b64:	687a      	ldr	r2, [r7, #4]
 8024b66:	212c      	movs	r1, #44	; 0x2c
 8024b68:	fb01 f303 	mul.w	r3, r1, r3
 8024b6c:	4413      	add	r3, r2
 8024b6e:	3342      	adds	r3, #66	; 0x42
 8024b70:	2200      	movs	r2, #0
 8024b72:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8024b74:	e073      	b.n	8024c5e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024b76:	78fb      	ldrb	r3, [r7, #3]
 8024b78:	687a      	ldr	r2, [r7, #4]
 8024b7a:	212c      	movs	r1, #44	; 0x2c
 8024b7c:	fb01 f303 	mul.w	r3, r1, r3
 8024b80:	4413      	add	r3, r2
 8024b82:	3342      	adds	r3, #66	; 0x42
 8024b84:	2202      	movs	r2, #2
 8024b86:	701a      	strb	r2, [r3, #0]
      break;
 8024b88:	e069      	b.n	8024c5e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8024b8a:	78fb      	ldrb	r3, [r7, #3]
 8024b8c:	687a      	ldr	r2, [r7, #4]
 8024b8e:	212c      	movs	r1, #44	; 0x2c
 8024b90:	fb01 f303 	mul.w	r3, r1, r3
 8024b94:	4413      	add	r3, r2
 8024b96:	3354      	adds	r3, #84	; 0x54
 8024b98:	781b      	ldrb	r3, [r3, #0]
 8024b9a:	2b00      	cmp	r3, #0
 8024b9c:	d109      	bne.n	8024bb2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024b9e:	78fb      	ldrb	r3, [r7, #3]
 8024ba0:	687a      	ldr	r2, [r7, #4]
 8024ba2:	212c      	movs	r1, #44	; 0x2c
 8024ba4:	fb01 f303 	mul.w	r3, r1, r3
 8024ba8:	4413      	add	r3, r2
 8024baa:	3342      	adds	r3, #66	; 0x42
 8024bac:	2200      	movs	r2, #0
 8024bae:	701a      	strb	r2, [r3, #0]
      break;
 8024bb0:	e055      	b.n	8024c5e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024bb2:	78fb      	ldrb	r3, [r7, #3]
 8024bb4:	687a      	ldr	r2, [r7, #4]
 8024bb6:	212c      	movs	r1, #44	; 0x2c
 8024bb8:	fb01 f303 	mul.w	r3, r1, r3
 8024bbc:	4413      	add	r3, r2
 8024bbe:	3342      	adds	r3, #66	; 0x42
 8024bc0:	2202      	movs	r2, #2
 8024bc2:	701a      	strb	r2, [r3, #0]
      break;
 8024bc4:	e04b      	b.n	8024c5e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8024bc6:	78bb      	ldrb	r3, [r7, #2]
 8024bc8:	2b00      	cmp	r3, #0
 8024bca:	d11d      	bne.n	8024c08 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8024bcc:	78fb      	ldrb	r3, [r7, #3]
 8024bce:	687a      	ldr	r2, [r7, #4]
 8024bd0:	212c      	movs	r1, #44	; 0x2c
 8024bd2:	fb01 f303 	mul.w	r3, r1, r3
 8024bd6:	4413      	add	r3, r2
 8024bd8:	3355      	adds	r3, #85	; 0x55
 8024bda:	781b      	ldrb	r3, [r3, #0]
 8024bdc:	2b00      	cmp	r3, #0
 8024bde:	d109      	bne.n	8024bf4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024be0:	78fb      	ldrb	r3, [r7, #3]
 8024be2:	687a      	ldr	r2, [r7, #4]
 8024be4:	212c      	movs	r1, #44	; 0x2c
 8024be6:	fb01 f303 	mul.w	r3, r1, r3
 8024bea:	4413      	add	r3, r2
 8024bec:	3342      	adds	r3, #66	; 0x42
 8024bee:	2200      	movs	r2, #0
 8024bf0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8024bf2:	e034      	b.n	8024c5e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024bf4:	78fb      	ldrb	r3, [r7, #3]
 8024bf6:	687a      	ldr	r2, [r7, #4]
 8024bf8:	212c      	movs	r1, #44	; 0x2c
 8024bfa:	fb01 f303 	mul.w	r3, r1, r3
 8024bfe:	4413      	add	r3, r2
 8024c00:	3342      	adds	r3, #66	; 0x42
 8024c02:	2202      	movs	r2, #2
 8024c04:	701a      	strb	r2, [r3, #0]
      break;
 8024c06:	e02a      	b.n	8024c5e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8024c08:	78fb      	ldrb	r3, [r7, #3]
 8024c0a:	687a      	ldr	r2, [r7, #4]
 8024c0c:	212c      	movs	r1, #44	; 0x2c
 8024c0e:	fb01 f303 	mul.w	r3, r1, r3
 8024c12:	4413      	add	r3, r2
 8024c14:	3354      	adds	r3, #84	; 0x54
 8024c16:	781b      	ldrb	r3, [r3, #0]
 8024c18:	2b00      	cmp	r3, #0
 8024c1a:	d109      	bne.n	8024c30 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024c1c:	78fb      	ldrb	r3, [r7, #3]
 8024c1e:	687a      	ldr	r2, [r7, #4]
 8024c20:	212c      	movs	r1, #44	; 0x2c
 8024c22:	fb01 f303 	mul.w	r3, r1, r3
 8024c26:	4413      	add	r3, r2
 8024c28:	3342      	adds	r3, #66	; 0x42
 8024c2a:	2200      	movs	r2, #0
 8024c2c:	701a      	strb	r2, [r3, #0]
      break;
 8024c2e:	e016      	b.n	8024c5e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024c30:	78fb      	ldrb	r3, [r7, #3]
 8024c32:	687a      	ldr	r2, [r7, #4]
 8024c34:	212c      	movs	r1, #44	; 0x2c
 8024c36:	fb01 f303 	mul.w	r3, r1, r3
 8024c3a:	4413      	add	r3, r2
 8024c3c:	3342      	adds	r3, #66	; 0x42
 8024c3e:	2202      	movs	r2, #2
 8024c40:	701a      	strb	r2, [r3, #0]
      break;
 8024c42:	e00c      	b.n	8024c5e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024c44:	78fb      	ldrb	r3, [r7, #3]
 8024c46:	687a      	ldr	r2, [r7, #4]
 8024c48:	212c      	movs	r1, #44	; 0x2c
 8024c4a:	fb01 f303 	mul.w	r3, r1, r3
 8024c4e:	4413      	add	r3, r2
 8024c50:	3342      	adds	r3, #66	; 0x42
 8024c52:	2200      	movs	r2, #0
 8024c54:	701a      	strb	r2, [r3, #0]
      break;
 8024c56:	e002      	b.n	8024c5e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8024c58:	bf00      	nop
 8024c5a:	e000      	b.n	8024c5e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8024c5c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8024c5e:	78fb      	ldrb	r3, [r7, #3]
 8024c60:	687a      	ldr	r2, [r7, #4]
 8024c62:	212c      	movs	r1, #44	; 0x2c
 8024c64:	fb01 f303 	mul.w	r3, r1, r3
 8024c68:	4413      	add	r3, r2
 8024c6a:	3344      	adds	r3, #68	; 0x44
 8024c6c:	697a      	ldr	r2, [r7, #20]
 8024c6e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8024c70:	78fb      	ldrb	r3, [r7, #3]
 8024c72:	8b3a      	ldrh	r2, [r7, #24]
 8024c74:	6879      	ldr	r1, [r7, #4]
 8024c76:	202c      	movs	r0, #44	; 0x2c
 8024c78:	fb00 f303 	mul.w	r3, r0, r3
 8024c7c:	440b      	add	r3, r1
 8024c7e:	334c      	adds	r3, #76	; 0x4c
 8024c80:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8024c82:	78fb      	ldrb	r3, [r7, #3]
 8024c84:	687a      	ldr	r2, [r7, #4]
 8024c86:	212c      	movs	r1, #44	; 0x2c
 8024c88:	fb01 f303 	mul.w	r3, r1, r3
 8024c8c:	4413      	add	r3, r2
 8024c8e:	3360      	adds	r3, #96	; 0x60
 8024c90:	2200      	movs	r2, #0
 8024c92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8024c94:	78fb      	ldrb	r3, [r7, #3]
 8024c96:	687a      	ldr	r2, [r7, #4]
 8024c98:	212c      	movs	r1, #44	; 0x2c
 8024c9a:	fb01 f303 	mul.w	r3, r1, r3
 8024c9e:	4413      	add	r3, r2
 8024ca0:	3350      	adds	r3, #80	; 0x50
 8024ca2:	2200      	movs	r2, #0
 8024ca4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8024ca6:	78fb      	ldrb	r3, [r7, #3]
 8024ca8:	687a      	ldr	r2, [r7, #4]
 8024caa:	212c      	movs	r1, #44	; 0x2c
 8024cac:	fb01 f303 	mul.w	r3, r1, r3
 8024cb0:	4413      	add	r3, r2
 8024cb2:	3339      	adds	r3, #57	; 0x39
 8024cb4:	78fa      	ldrb	r2, [r7, #3]
 8024cb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8024cb8:	78fb      	ldrb	r3, [r7, #3]
 8024cba:	687a      	ldr	r2, [r7, #4]
 8024cbc:	212c      	movs	r1, #44	; 0x2c
 8024cbe:	fb01 f303 	mul.w	r3, r1, r3
 8024cc2:	4413      	add	r3, r2
 8024cc4:	3361      	adds	r3, #97	; 0x61
 8024cc6:	2200      	movs	r2, #0
 8024cc8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8024cca:	687b      	ldr	r3, [r7, #4]
 8024ccc:	6818      	ldr	r0, [r3, #0]
 8024cce:	78fb      	ldrb	r3, [r7, #3]
 8024cd0:	222c      	movs	r2, #44	; 0x2c
 8024cd2:	fb02 f303 	mul.w	r3, r2, r3
 8024cd6:	3338      	adds	r3, #56	; 0x38
 8024cd8:	687a      	ldr	r2, [r7, #4]
 8024cda:	18d1      	adds	r1, r2, r3
 8024cdc:	687b      	ldr	r3, [r7, #4]
 8024cde:	691b      	ldr	r3, [r3, #16]
 8024ce0:	b2db      	uxtb	r3, r3
 8024ce2:	461a      	mov	r2, r3
 8024ce4:	f005 ff4c 	bl	802ab80 <USB_HC_StartXfer>
 8024ce8:	4603      	mov	r3, r0
}
 8024cea:	4618      	mov	r0, r3
 8024cec:	3708      	adds	r7, #8
 8024cee:	46bd      	mov	sp, r7
 8024cf0:	bd80      	pop	{r7, pc}
 8024cf2:	bf00      	nop

08024cf4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8024cf4:	b580      	push	{r7, lr}
 8024cf6:	b086      	sub	sp, #24
 8024cf8:	af00      	add	r7, sp, #0
 8024cfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8024cfc:	687b      	ldr	r3, [r7, #4]
 8024cfe:	681b      	ldr	r3, [r3, #0]
 8024d00:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8024d02:	693b      	ldr	r3, [r7, #16]
 8024d04:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8024d06:	687b      	ldr	r3, [r7, #4]
 8024d08:	681b      	ldr	r3, [r3, #0]
 8024d0a:	4618      	mov	r0, r3
 8024d0c:	f005 fc4d 	bl	802a5aa <USB_GetMode>
 8024d10:	4603      	mov	r3, r0
 8024d12:	2b01      	cmp	r3, #1
 8024d14:	f040 80f6 	bne.w	8024f04 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8024d18:	687b      	ldr	r3, [r7, #4]
 8024d1a:	681b      	ldr	r3, [r3, #0]
 8024d1c:	4618      	mov	r0, r3
 8024d1e:	f005 fc31 	bl	802a584 <USB_ReadInterrupts>
 8024d22:	4603      	mov	r3, r0
 8024d24:	2b00      	cmp	r3, #0
 8024d26:	f000 80ec 	beq.w	8024f02 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8024d2a:	687b      	ldr	r3, [r7, #4]
 8024d2c:	681b      	ldr	r3, [r3, #0]
 8024d2e:	4618      	mov	r0, r3
 8024d30:	f005 fc28 	bl	802a584 <USB_ReadInterrupts>
 8024d34:	4603      	mov	r3, r0
 8024d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8024d3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8024d3e:	d104      	bne.n	8024d4a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8024d40:	687b      	ldr	r3, [r7, #4]
 8024d42:	681b      	ldr	r3, [r3, #0]
 8024d44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8024d48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8024d4a:	687b      	ldr	r3, [r7, #4]
 8024d4c:	681b      	ldr	r3, [r3, #0]
 8024d4e:	4618      	mov	r0, r3
 8024d50:	f005 fc18 	bl	802a584 <USB_ReadInterrupts>
 8024d54:	4603      	mov	r3, r0
 8024d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8024d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8024d5e:	d104      	bne.n	8024d6a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8024d60:	687b      	ldr	r3, [r7, #4]
 8024d62:	681b      	ldr	r3, [r3, #0]
 8024d64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8024d68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8024d6a:	687b      	ldr	r3, [r7, #4]
 8024d6c:	681b      	ldr	r3, [r3, #0]
 8024d6e:	4618      	mov	r0, r3
 8024d70:	f005 fc08 	bl	802a584 <USB_ReadInterrupts>
 8024d74:	4603      	mov	r3, r0
 8024d76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8024d7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8024d7e:	d104      	bne.n	8024d8a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8024d80:	687b      	ldr	r3, [r7, #4]
 8024d82:	681b      	ldr	r3, [r3, #0]
 8024d84:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8024d88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8024d8a:	687b      	ldr	r3, [r7, #4]
 8024d8c:	681b      	ldr	r3, [r3, #0]
 8024d8e:	4618      	mov	r0, r3
 8024d90:	f005 fbf8 	bl	802a584 <USB_ReadInterrupts>
 8024d94:	4603      	mov	r3, r0
 8024d96:	f003 0302 	and.w	r3, r3, #2
 8024d9a:	2b02      	cmp	r3, #2
 8024d9c:	d103      	bne.n	8024da6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8024d9e:	687b      	ldr	r3, [r7, #4]
 8024da0:	681b      	ldr	r3, [r3, #0]
 8024da2:	2202      	movs	r2, #2
 8024da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8024da6:	687b      	ldr	r3, [r7, #4]
 8024da8:	681b      	ldr	r3, [r3, #0]
 8024daa:	4618      	mov	r0, r3
 8024dac:	f005 fbea 	bl	802a584 <USB_ReadInterrupts>
 8024db0:	4603      	mov	r3, r0
 8024db2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8024db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8024dba:	d11c      	bne.n	8024df6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8024dbc:	687b      	ldr	r3, [r7, #4]
 8024dbe:	681b      	ldr	r3, [r3, #0]
 8024dc0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8024dc4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8024dc6:	68fb      	ldr	r3, [r7, #12]
 8024dc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8024dcc:	681b      	ldr	r3, [r3, #0]
 8024dce:	f003 0301 	and.w	r3, r3, #1
 8024dd2:	2b00      	cmp	r3, #0
 8024dd4:	d10f      	bne.n	8024df6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8024dd6:	2110      	movs	r1, #16
 8024dd8:	6938      	ldr	r0, [r7, #16]
 8024dda:	f005 fad9 	bl	802a390 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8024dde:	6938      	ldr	r0, [r7, #16]
 8024de0:	f005 fb0a 	bl	802a3f8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8024de4:	687b      	ldr	r3, [r7, #4]
 8024de6:	681b      	ldr	r3, [r3, #0]
 8024de8:	2101      	movs	r1, #1
 8024dea:	4618      	mov	r0, r3
 8024dec:	f005 fce0 	bl	802a7b0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8024df0:	6878      	ldr	r0, [r7, #4]
 8024df2:	f008 faa9 	bl	802d348 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8024df6:	687b      	ldr	r3, [r7, #4]
 8024df8:	681b      	ldr	r3, [r3, #0]
 8024dfa:	4618      	mov	r0, r3
 8024dfc:	f005 fbc2 	bl	802a584 <USB_ReadInterrupts>
 8024e00:	4603      	mov	r3, r0
 8024e02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024e06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8024e0a:	d102      	bne.n	8024e12 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8024e0c:	6878      	ldr	r0, [r7, #4]
 8024e0e:	f001 f89e 	bl	8025f4e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8024e12:	687b      	ldr	r3, [r7, #4]
 8024e14:	681b      	ldr	r3, [r3, #0]
 8024e16:	4618      	mov	r0, r3
 8024e18:	f005 fbb4 	bl	802a584 <USB_ReadInterrupts>
 8024e1c:	4603      	mov	r3, r0
 8024e1e:	f003 0308 	and.w	r3, r3, #8
 8024e22:	2b08      	cmp	r3, #8
 8024e24:	d106      	bne.n	8024e34 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8024e26:	6878      	ldr	r0, [r7, #4]
 8024e28:	f008 fa72 	bl	802d310 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8024e2c:	687b      	ldr	r3, [r7, #4]
 8024e2e:	681b      	ldr	r3, [r3, #0]
 8024e30:	2208      	movs	r2, #8
 8024e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8024e34:	687b      	ldr	r3, [r7, #4]
 8024e36:	681b      	ldr	r3, [r3, #0]
 8024e38:	4618      	mov	r0, r3
 8024e3a:	f005 fba3 	bl	802a584 <USB_ReadInterrupts>
 8024e3e:	4603      	mov	r3, r0
 8024e40:	f003 0310 	and.w	r3, r3, #16
 8024e44:	2b10      	cmp	r3, #16
 8024e46:	d101      	bne.n	8024e4c <HAL_HCD_IRQHandler+0x158>
 8024e48:	2301      	movs	r3, #1
 8024e4a:	e000      	b.n	8024e4e <HAL_HCD_IRQHandler+0x15a>
 8024e4c:	2300      	movs	r3, #0
 8024e4e:	2b00      	cmp	r3, #0
 8024e50:	d012      	beq.n	8024e78 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8024e52:	687b      	ldr	r3, [r7, #4]
 8024e54:	681b      	ldr	r3, [r3, #0]
 8024e56:	699a      	ldr	r2, [r3, #24]
 8024e58:	687b      	ldr	r3, [r7, #4]
 8024e5a:	681b      	ldr	r3, [r3, #0]
 8024e5c:	f022 0210 	bic.w	r2, r2, #16
 8024e60:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8024e62:	6878      	ldr	r0, [r7, #4]
 8024e64:	f000 ffa1 	bl	8025daa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8024e68:	687b      	ldr	r3, [r7, #4]
 8024e6a:	681b      	ldr	r3, [r3, #0]
 8024e6c:	699a      	ldr	r2, [r3, #24]
 8024e6e:	687b      	ldr	r3, [r7, #4]
 8024e70:	681b      	ldr	r3, [r3, #0]
 8024e72:	f042 0210 	orr.w	r2, r2, #16
 8024e76:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8024e78:	687b      	ldr	r3, [r7, #4]
 8024e7a:	681b      	ldr	r3, [r3, #0]
 8024e7c:	4618      	mov	r0, r3
 8024e7e:	f005 fb81 	bl	802a584 <USB_ReadInterrupts>
 8024e82:	4603      	mov	r3, r0
 8024e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024e88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8024e8c:	d13a      	bne.n	8024f04 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8024e8e:	687b      	ldr	r3, [r7, #4]
 8024e90:	681b      	ldr	r3, [r3, #0]
 8024e92:	4618      	mov	r0, r3
 8024e94:	f005 ffb6 	bl	802ae04 <USB_HC_ReadInterrupt>
 8024e98:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8024e9a:	2300      	movs	r3, #0
 8024e9c:	617b      	str	r3, [r7, #20]
 8024e9e:	e025      	b.n	8024eec <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8024ea0:	697b      	ldr	r3, [r7, #20]
 8024ea2:	f003 030f 	and.w	r3, r3, #15
 8024ea6:	68ba      	ldr	r2, [r7, #8]
 8024ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8024eac:	f003 0301 	and.w	r3, r3, #1
 8024eb0:	2b00      	cmp	r3, #0
 8024eb2:	d018      	beq.n	8024ee6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8024eb4:	697b      	ldr	r3, [r7, #20]
 8024eb6:	015a      	lsls	r2, r3, #5
 8024eb8:	68fb      	ldr	r3, [r7, #12]
 8024eba:	4413      	add	r3, r2
 8024ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024ec0:	681b      	ldr	r3, [r3, #0]
 8024ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8024eca:	d106      	bne.n	8024eda <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8024ecc:	697b      	ldr	r3, [r7, #20]
 8024ece:	b2db      	uxtb	r3, r3
 8024ed0:	4619      	mov	r1, r3
 8024ed2:	6878      	ldr	r0, [r7, #4]
 8024ed4:	f000 f8ab 	bl	802502e <HCD_HC_IN_IRQHandler>
 8024ed8:	e005      	b.n	8024ee6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8024eda:	697b      	ldr	r3, [r7, #20]
 8024edc:	b2db      	uxtb	r3, r3
 8024ede:	4619      	mov	r1, r3
 8024ee0:	6878      	ldr	r0, [r7, #4]
 8024ee2:	f000 fbf9 	bl	80256d8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8024ee6:	697b      	ldr	r3, [r7, #20]
 8024ee8:	3301      	adds	r3, #1
 8024eea:	617b      	str	r3, [r7, #20]
 8024eec:	687b      	ldr	r3, [r7, #4]
 8024eee:	689b      	ldr	r3, [r3, #8]
 8024ef0:	697a      	ldr	r2, [r7, #20]
 8024ef2:	429a      	cmp	r2, r3
 8024ef4:	d3d4      	bcc.n	8024ea0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8024ef6:	687b      	ldr	r3, [r7, #4]
 8024ef8:	681b      	ldr	r3, [r3, #0]
 8024efa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8024efe:	615a      	str	r2, [r3, #20]
 8024f00:	e000      	b.n	8024f04 <HAL_HCD_IRQHandler+0x210>
      return;
 8024f02:	bf00      	nop
    }
  }
}
 8024f04:	3718      	adds	r7, #24
 8024f06:	46bd      	mov	sp, r7
 8024f08:	bd80      	pop	{r7, pc}

08024f0a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8024f0a:	b580      	push	{r7, lr}
 8024f0c:	b082      	sub	sp, #8
 8024f0e:	af00      	add	r7, sp, #0
 8024f10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8024f12:	687b      	ldr	r3, [r7, #4]
 8024f14:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8024f18:	2b01      	cmp	r3, #1
 8024f1a:	d101      	bne.n	8024f20 <HAL_HCD_Start+0x16>
 8024f1c:	2302      	movs	r3, #2
 8024f1e:	e013      	b.n	8024f48 <HAL_HCD_Start+0x3e>
 8024f20:	687b      	ldr	r3, [r7, #4]
 8024f22:	2201      	movs	r2, #1
 8024f24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8024f28:	687b      	ldr	r3, [r7, #4]
 8024f2a:	681b      	ldr	r3, [r3, #0]
 8024f2c:	2101      	movs	r1, #1
 8024f2e:	4618      	mov	r0, r3
 8024f30:	f005 fca2 	bl	802a878 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8024f34:	687b      	ldr	r3, [r7, #4]
 8024f36:	681b      	ldr	r3, [r3, #0]
 8024f38:	4618      	mov	r0, r3
 8024f3a:	f005 f9ba 	bl	802a2b2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8024f3e:	687b      	ldr	r3, [r7, #4]
 8024f40:	2200      	movs	r2, #0
 8024f42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8024f46:	2300      	movs	r3, #0
}
 8024f48:	4618      	mov	r0, r3
 8024f4a:	3708      	adds	r7, #8
 8024f4c:	46bd      	mov	sp, r7
 8024f4e:	bd80      	pop	{r7, pc}

08024f50 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8024f50:	b580      	push	{r7, lr}
 8024f52:	b082      	sub	sp, #8
 8024f54:	af00      	add	r7, sp, #0
 8024f56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8024f58:	687b      	ldr	r3, [r7, #4]
 8024f5a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8024f5e:	2b01      	cmp	r3, #1
 8024f60:	d101      	bne.n	8024f66 <HAL_HCD_Stop+0x16>
 8024f62:	2302      	movs	r3, #2
 8024f64:	e00d      	b.n	8024f82 <HAL_HCD_Stop+0x32>
 8024f66:	687b      	ldr	r3, [r7, #4]
 8024f68:	2201      	movs	r2, #1
 8024f6a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8024f6e:	687b      	ldr	r3, [r7, #4]
 8024f70:	681b      	ldr	r3, [r3, #0]
 8024f72:	4618      	mov	r0, r3
 8024f74:	f006 f890 	bl	802b098 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8024f78:	687b      	ldr	r3, [r7, #4]
 8024f7a:	2200      	movs	r2, #0
 8024f7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8024f80:	2300      	movs	r3, #0
}
 8024f82:	4618      	mov	r0, r3
 8024f84:	3708      	adds	r7, #8
 8024f86:	46bd      	mov	sp, r7
 8024f88:	bd80      	pop	{r7, pc}

08024f8a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8024f8a:	b580      	push	{r7, lr}
 8024f8c:	b082      	sub	sp, #8
 8024f8e:	af00      	add	r7, sp, #0
 8024f90:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8024f92:	687b      	ldr	r3, [r7, #4]
 8024f94:	681b      	ldr	r3, [r3, #0]
 8024f96:	4618      	mov	r0, r3
 8024f98:	f005 fc44 	bl	802a824 <USB_ResetPort>
 8024f9c:	4603      	mov	r3, r0
}
 8024f9e:	4618      	mov	r0, r3
 8024fa0:	3708      	adds	r7, #8
 8024fa2:	46bd      	mov	sp, r7
 8024fa4:	bd80      	pop	{r7, pc}

08024fa6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8024fa6:	b480      	push	{r7}
 8024fa8:	b083      	sub	sp, #12
 8024faa:	af00      	add	r7, sp, #0
 8024fac:	6078      	str	r0, [r7, #4]
 8024fae:	460b      	mov	r3, r1
 8024fb0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8024fb2:	78fb      	ldrb	r3, [r7, #3]
 8024fb4:	687a      	ldr	r2, [r7, #4]
 8024fb6:	212c      	movs	r1, #44	; 0x2c
 8024fb8:	fb01 f303 	mul.w	r3, r1, r3
 8024fbc:	4413      	add	r3, r2
 8024fbe:	3360      	adds	r3, #96	; 0x60
 8024fc0:	781b      	ldrb	r3, [r3, #0]
}
 8024fc2:	4618      	mov	r0, r3
 8024fc4:	370c      	adds	r7, #12
 8024fc6:	46bd      	mov	sp, r7
 8024fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fcc:	4770      	bx	lr

08024fce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8024fce:	b480      	push	{r7}
 8024fd0:	b083      	sub	sp, #12
 8024fd2:	af00      	add	r7, sp, #0
 8024fd4:	6078      	str	r0, [r7, #4]
 8024fd6:	460b      	mov	r3, r1
 8024fd8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8024fda:	78fb      	ldrb	r3, [r7, #3]
 8024fdc:	687a      	ldr	r2, [r7, #4]
 8024fde:	212c      	movs	r1, #44	; 0x2c
 8024fe0:	fb01 f303 	mul.w	r3, r1, r3
 8024fe4:	4413      	add	r3, r2
 8024fe6:	3350      	adds	r3, #80	; 0x50
 8024fe8:	681b      	ldr	r3, [r3, #0]
}
 8024fea:	4618      	mov	r0, r3
 8024fec:	370c      	adds	r7, #12
 8024fee:	46bd      	mov	sp, r7
 8024ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ff4:	4770      	bx	lr

08024ff6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8024ff6:	b580      	push	{r7, lr}
 8024ff8:	b082      	sub	sp, #8
 8024ffa:	af00      	add	r7, sp, #0
 8024ffc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8024ffe:	687b      	ldr	r3, [r7, #4]
 8025000:	681b      	ldr	r3, [r3, #0]
 8025002:	4618      	mov	r0, r3
 8025004:	f005 fc88 	bl	802a918 <USB_GetCurrentFrame>
 8025008:	4603      	mov	r3, r0
}
 802500a:	4618      	mov	r0, r3
 802500c:	3708      	adds	r7, #8
 802500e:	46bd      	mov	sp, r7
 8025010:	bd80      	pop	{r7, pc}

08025012 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8025012:	b580      	push	{r7, lr}
 8025014:	b082      	sub	sp, #8
 8025016:	af00      	add	r7, sp, #0
 8025018:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 802501a:	687b      	ldr	r3, [r7, #4]
 802501c:	681b      	ldr	r3, [r3, #0]
 802501e:	4618      	mov	r0, r3
 8025020:	f005 fc63 	bl	802a8ea <USB_GetHostSpeed>
 8025024:	4603      	mov	r3, r0
}
 8025026:	4618      	mov	r0, r3
 8025028:	3708      	adds	r7, #8
 802502a:	46bd      	mov	sp, r7
 802502c:	bd80      	pop	{r7, pc}

0802502e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 802502e:	b580      	push	{r7, lr}
 8025030:	b086      	sub	sp, #24
 8025032:	af00      	add	r7, sp, #0
 8025034:	6078      	str	r0, [r7, #4]
 8025036:	460b      	mov	r3, r1
 8025038:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 802503a:	687b      	ldr	r3, [r7, #4]
 802503c:	681b      	ldr	r3, [r3, #0]
 802503e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025040:	697b      	ldr	r3, [r7, #20]
 8025042:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8025044:	78fb      	ldrb	r3, [r7, #3]
 8025046:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8025048:	68fb      	ldr	r3, [r7, #12]
 802504a:	015a      	lsls	r2, r3, #5
 802504c:	693b      	ldr	r3, [r7, #16]
 802504e:	4413      	add	r3, r2
 8025050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025054:	689b      	ldr	r3, [r3, #8]
 8025056:	f003 0304 	and.w	r3, r3, #4
 802505a:	2b04      	cmp	r3, #4
 802505c:	d11a      	bne.n	8025094 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 802505e:	68fb      	ldr	r3, [r7, #12]
 8025060:	015a      	lsls	r2, r3, #5
 8025062:	693b      	ldr	r3, [r7, #16]
 8025064:	4413      	add	r3, r2
 8025066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802506a:	461a      	mov	r2, r3
 802506c:	2304      	movs	r3, #4
 802506e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025070:	687a      	ldr	r2, [r7, #4]
 8025072:	68fb      	ldr	r3, [r7, #12]
 8025074:	212c      	movs	r1, #44	; 0x2c
 8025076:	fb01 f303 	mul.w	r3, r1, r3
 802507a:	4413      	add	r3, r2
 802507c:	3361      	adds	r3, #97	; 0x61
 802507e:	2206      	movs	r2, #6
 8025080:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025082:	687b      	ldr	r3, [r7, #4]
 8025084:	681b      	ldr	r3, [r3, #0]
 8025086:	68fa      	ldr	r2, [r7, #12]
 8025088:	b2d2      	uxtb	r2, r2
 802508a:	4611      	mov	r1, r2
 802508c:	4618      	mov	r0, r3
 802508e:	f005 feca 	bl	802ae26 <USB_HC_Halt>
 8025092:	e0af      	b.n	80251f4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8025094:	68fb      	ldr	r3, [r7, #12]
 8025096:	015a      	lsls	r2, r3, #5
 8025098:	693b      	ldr	r3, [r7, #16]
 802509a:	4413      	add	r3, r2
 802509c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80250a0:	689b      	ldr	r3, [r3, #8]
 80250a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80250a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80250aa:	d11b      	bne.n	80250e4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80250ac:	68fb      	ldr	r3, [r7, #12]
 80250ae:	015a      	lsls	r2, r3, #5
 80250b0:	693b      	ldr	r3, [r7, #16]
 80250b2:	4413      	add	r3, r2
 80250b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80250b8:	461a      	mov	r2, r3
 80250ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80250be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80250c0:	687a      	ldr	r2, [r7, #4]
 80250c2:	68fb      	ldr	r3, [r7, #12]
 80250c4:	212c      	movs	r1, #44	; 0x2c
 80250c6:	fb01 f303 	mul.w	r3, r1, r3
 80250ca:	4413      	add	r3, r2
 80250cc:	3361      	adds	r3, #97	; 0x61
 80250ce:	2207      	movs	r2, #7
 80250d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80250d2:	687b      	ldr	r3, [r7, #4]
 80250d4:	681b      	ldr	r3, [r3, #0]
 80250d6:	68fa      	ldr	r2, [r7, #12]
 80250d8:	b2d2      	uxtb	r2, r2
 80250da:	4611      	mov	r1, r2
 80250dc:	4618      	mov	r0, r3
 80250de:	f005 fea2 	bl	802ae26 <USB_HC_Halt>
 80250e2:	e087      	b.n	80251f4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80250e4:	68fb      	ldr	r3, [r7, #12]
 80250e6:	015a      	lsls	r2, r3, #5
 80250e8:	693b      	ldr	r3, [r7, #16]
 80250ea:	4413      	add	r3, r2
 80250ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80250f0:	689b      	ldr	r3, [r3, #8]
 80250f2:	f003 0320 	and.w	r3, r3, #32
 80250f6:	2b20      	cmp	r3, #32
 80250f8:	d109      	bne.n	802510e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80250fa:	68fb      	ldr	r3, [r7, #12]
 80250fc:	015a      	lsls	r2, r3, #5
 80250fe:	693b      	ldr	r3, [r7, #16]
 8025100:	4413      	add	r3, r2
 8025102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025106:	461a      	mov	r2, r3
 8025108:	2320      	movs	r3, #32
 802510a:	6093      	str	r3, [r2, #8]
 802510c:	e072      	b.n	80251f4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 802510e:	68fb      	ldr	r3, [r7, #12]
 8025110:	015a      	lsls	r2, r3, #5
 8025112:	693b      	ldr	r3, [r7, #16]
 8025114:	4413      	add	r3, r2
 8025116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802511a:	689b      	ldr	r3, [r3, #8]
 802511c:	f003 0308 	and.w	r3, r3, #8
 8025120:	2b08      	cmp	r3, #8
 8025122:	d11a      	bne.n	802515a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8025124:	68fb      	ldr	r3, [r7, #12]
 8025126:	015a      	lsls	r2, r3, #5
 8025128:	693b      	ldr	r3, [r7, #16]
 802512a:	4413      	add	r3, r2
 802512c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025130:	461a      	mov	r2, r3
 8025132:	2308      	movs	r3, #8
 8025134:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8025136:	687a      	ldr	r2, [r7, #4]
 8025138:	68fb      	ldr	r3, [r7, #12]
 802513a:	212c      	movs	r1, #44	; 0x2c
 802513c:	fb01 f303 	mul.w	r3, r1, r3
 8025140:	4413      	add	r3, r2
 8025142:	3361      	adds	r3, #97	; 0x61
 8025144:	2205      	movs	r2, #5
 8025146:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025148:	687b      	ldr	r3, [r7, #4]
 802514a:	681b      	ldr	r3, [r3, #0]
 802514c:	68fa      	ldr	r2, [r7, #12]
 802514e:	b2d2      	uxtb	r2, r2
 8025150:	4611      	mov	r1, r2
 8025152:	4618      	mov	r0, r3
 8025154:	f005 fe67 	bl	802ae26 <USB_HC_Halt>
 8025158:	e04c      	b.n	80251f4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 802515a:	68fb      	ldr	r3, [r7, #12]
 802515c:	015a      	lsls	r2, r3, #5
 802515e:	693b      	ldr	r3, [r7, #16]
 8025160:	4413      	add	r3, r2
 8025162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025166:	689b      	ldr	r3, [r3, #8]
 8025168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802516c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025170:	d11b      	bne.n	80251aa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8025172:	68fb      	ldr	r3, [r7, #12]
 8025174:	015a      	lsls	r2, r3, #5
 8025176:	693b      	ldr	r3, [r7, #16]
 8025178:	4413      	add	r3, r2
 802517a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802517e:	461a      	mov	r2, r3
 8025180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025184:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8025186:	687a      	ldr	r2, [r7, #4]
 8025188:	68fb      	ldr	r3, [r7, #12]
 802518a:	212c      	movs	r1, #44	; 0x2c
 802518c:	fb01 f303 	mul.w	r3, r1, r3
 8025190:	4413      	add	r3, r2
 8025192:	3361      	adds	r3, #97	; 0x61
 8025194:	2208      	movs	r2, #8
 8025196:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025198:	687b      	ldr	r3, [r7, #4]
 802519a:	681b      	ldr	r3, [r3, #0]
 802519c:	68fa      	ldr	r2, [r7, #12]
 802519e:	b2d2      	uxtb	r2, r2
 80251a0:	4611      	mov	r1, r2
 80251a2:	4618      	mov	r0, r3
 80251a4:	f005 fe3f 	bl	802ae26 <USB_HC_Halt>
 80251a8:	e024      	b.n	80251f4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80251aa:	68fb      	ldr	r3, [r7, #12]
 80251ac:	015a      	lsls	r2, r3, #5
 80251ae:	693b      	ldr	r3, [r7, #16]
 80251b0:	4413      	add	r3, r2
 80251b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80251b6:	689b      	ldr	r3, [r3, #8]
 80251b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80251bc:	2b80      	cmp	r3, #128	; 0x80
 80251be:	d119      	bne.n	80251f4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80251c0:	68fb      	ldr	r3, [r7, #12]
 80251c2:	015a      	lsls	r2, r3, #5
 80251c4:	693b      	ldr	r3, [r7, #16]
 80251c6:	4413      	add	r3, r2
 80251c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80251cc:	461a      	mov	r2, r3
 80251ce:	2380      	movs	r3, #128	; 0x80
 80251d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80251d2:	687a      	ldr	r2, [r7, #4]
 80251d4:	68fb      	ldr	r3, [r7, #12]
 80251d6:	212c      	movs	r1, #44	; 0x2c
 80251d8:	fb01 f303 	mul.w	r3, r1, r3
 80251dc:	4413      	add	r3, r2
 80251de:	3361      	adds	r3, #97	; 0x61
 80251e0:	2206      	movs	r2, #6
 80251e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80251e4:	687b      	ldr	r3, [r7, #4]
 80251e6:	681b      	ldr	r3, [r3, #0]
 80251e8:	68fa      	ldr	r2, [r7, #12]
 80251ea:	b2d2      	uxtb	r2, r2
 80251ec:	4611      	mov	r1, r2
 80251ee:	4618      	mov	r0, r3
 80251f0:	f005 fe19 	bl	802ae26 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80251f4:	68fb      	ldr	r3, [r7, #12]
 80251f6:	015a      	lsls	r2, r3, #5
 80251f8:	693b      	ldr	r3, [r7, #16]
 80251fa:	4413      	add	r3, r2
 80251fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025200:	689b      	ldr	r3, [r3, #8]
 8025202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802520a:	d112      	bne.n	8025232 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802520c:	687b      	ldr	r3, [r7, #4]
 802520e:	681b      	ldr	r3, [r3, #0]
 8025210:	68fa      	ldr	r2, [r7, #12]
 8025212:	b2d2      	uxtb	r2, r2
 8025214:	4611      	mov	r1, r2
 8025216:	4618      	mov	r0, r3
 8025218:	f005 fe05 	bl	802ae26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 802521c:	68fb      	ldr	r3, [r7, #12]
 802521e:	015a      	lsls	r2, r3, #5
 8025220:	693b      	ldr	r3, [r7, #16]
 8025222:	4413      	add	r3, r2
 8025224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025228:	461a      	mov	r2, r3
 802522a:	f44f 7300 	mov.w	r3, #512	; 0x200
 802522e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8025230:	e24e      	b.n	80256d0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8025232:	68fb      	ldr	r3, [r7, #12]
 8025234:	015a      	lsls	r2, r3, #5
 8025236:	693b      	ldr	r3, [r7, #16]
 8025238:	4413      	add	r3, r2
 802523a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802523e:	689b      	ldr	r3, [r3, #8]
 8025240:	f003 0301 	and.w	r3, r3, #1
 8025244:	2b01      	cmp	r3, #1
 8025246:	f040 80df 	bne.w	8025408 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 802524a:	687b      	ldr	r3, [r7, #4]
 802524c:	691b      	ldr	r3, [r3, #16]
 802524e:	2b00      	cmp	r3, #0
 8025250:	d019      	beq.n	8025286 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8025252:	687a      	ldr	r2, [r7, #4]
 8025254:	68fb      	ldr	r3, [r7, #12]
 8025256:	212c      	movs	r1, #44	; 0x2c
 8025258:	fb01 f303 	mul.w	r3, r1, r3
 802525c:	4413      	add	r3, r2
 802525e:	3348      	adds	r3, #72	; 0x48
 8025260:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8025262:	68fb      	ldr	r3, [r7, #12]
 8025264:	0159      	lsls	r1, r3, #5
 8025266:	693b      	ldr	r3, [r7, #16]
 8025268:	440b      	add	r3, r1
 802526a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802526e:	691b      	ldr	r3, [r3, #16]
 8025270:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8025274:	1ad2      	subs	r2, r2, r3
 8025276:	6879      	ldr	r1, [r7, #4]
 8025278:	68fb      	ldr	r3, [r7, #12]
 802527a:	202c      	movs	r0, #44	; 0x2c
 802527c:	fb00 f303 	mul.w	r3, r0, r3
 8025280:	440b      	add	r3, r1
 8025282:	3350      	adds	r3, #80	; 0x50
 8025284:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8025286:	687a      	ldr	r2, [r7, #4]
 8025288:	68fb      	ldr	r3, [r7, #12]
 802528a:	212c      	movs	r1, #44	; 0x2c
 802528c:	fb01 f303 	mul.w	r3, r1, r3
 8025290:	4413      	add	r3, r2
 8025292:	3361      	adds	r3, #97	; 0x61
 8025294:	2201      	movs	r2, #1
 8025296:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025298:	687a      	ldr	r2, [r7, #4]
 802529a:	68fb      	ldr	r3, [r7, #12]
 802529c:	212c      	movs	r1, #44	; 0x2c
 802529e:	fb01 f303 	mul.w	r3, r1, r3
 80252a2:	4413      	add	r3, r2
 80252a4:	335c      	adds	r3, #92	; 0x5c
 80252a6:	2200      	movs	r2, #0
 80252a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80252aa:	68fb      	ldr	r3, [r7, #12]
 80252ac:	015a      	lsls	r2, r3, #5
 80252ae:	693b      	ldr	r3, [r7, #16]
 80252b0:	4413      	add	r3, r2
 80252b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80252b6:	461a      	mov	r2, r3
 80252b8:	2301      	movs	r3, #1
 80252ba:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80252bc:	687a      	ldr	r2, [r7, #4]
 80252be:	68fb      	ldr	r3, [r7, #12]
 80252c0:	212c      	movs	r1, #44	; 0x2c
 80252c2:	fb01 f303 	mul.w	r3, r1, r3
 80252c6:	4413      	add	r3, r2
 80252c8:	333f      	adds	r3, #63	; 0x3f
 80252ca:	781b      	ldrb	r3, [r3, #0]
 80252cc:	2b00      	cmp	r3, #0
 80252ce:	d009      	beq.n	80252e4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80252d0:	687a      	ldr	r2, [r7, #4]
 80252d2:	68fb      	ldr	r3, [r7, #12]
 80252d4:	212c      	movs	r1, #44	; 0x2c
 80252d6:	fb01 f303 	mul.w	r3, r1, r3
 80252da:	4413      	add	r3, r2
 80252dc:	333f      	adds	r3, #63	; 0x3f
 80252de:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80252e0:	2b02      	cmp	r3, #2
 80252e2:	d111      	bne.n	8025308 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80252e4:	687b      	ldr	r3, [r7, #4]
 80252e6:	681b      	ldr	r3, [r3, #0]
 80252e8:	68fa      	ldr	r2, [r7, #12]
 80252ea:	b2d2      	uxtb	r2, r2
 80252ec:	4611      	mov	r1, r2
 80252ee:	4618      	mov	r0, r3
 80252f0:	f005 fd99 	bl	802ae26 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80252f4:	68fb      	ldr	r3, [r7, #12]
 80252f6:	015a      	lsls	r2, r3, #5
 80252f8:	693b      	ldr	r3, [r7, #16]
 80252fa:	4413      	add	r3, r2
 80252fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025300:	461a      	mov	r2, r3
 8025302:	2310      	movs	r3, #16
 8025304:	6093      	str	r3, [r2, #8]
 8025306:	e03a      	b.n	802537e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8025308:	687a      	ldr	r2, [r7, #4]
 802530a:	68fb      	ldr	r3, [r7, #12]
 802530c:	212c      	movs	r1, #44	; 0x2c
 802530e:	fb01 f303 	mul.w	r3, r1, r3
 8025312:	4413      	add	r3, r2
 8025314:	333f      	adds	r3, #63	; 0x3f
 8025316:	781b      	ldrb	r3, [r3, #0]
 8025318:	2b03      	cmp	r3, #3
 802531a:	d009      	beq.n	8025330 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 802531c:	687a      	ldr	r2, [r7, #4]
 802531e:	68fb      	ldr	r3, [r7, #12]
 8025320:	212c      	movs	r1, #44	; 0x2c
 8025322:	fb01 f303 	mul.w	r3, r1, r3
 8025326:	4413      	add	r3, r2
 8025328:	333f      	adds	r3, #63	; 0x3f
 802532a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 802532c:	2b01      	cmp	r3, #1
 802532e:	d126      	bne.n	802537e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8025330:	68fb      	ldr	r3, [r7, #12]
 8025332:	015a      	lsls	r2, r3, #5
 8025334:	693b      	ldr	r3, [r7, #16]
 8025336:	4413      	add	r3, r2
 8025338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802533c:	681b      	ldr	r3, [r3, #0]
 802533e:	68fa      	ldr	r2, [r7, #12]
 8025340:	0151      	lsls	r1, r2, #5
 8025342:	693a      	ldr	r2, [r7, #16]
 8025344:	440a      	add	r2, r1
 8025346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802534a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802534e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025350:	687a      	ldr	r2, [r7, #4]
 8025352:	68fb      	ldr	r3, [r7, #12]
 8025354:	212c      	movs	r1, #44	; 0x2c
 8025356:	fb01 f303 	mul.w	r3, r1, r3
 802535a:	4413      	add	r3, r2
 802535c:	3360      	adds	r3, #96	; 0x60
 802535e:	2201      	movs	r2, #1
 8025360:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025362:	68fb      	ldr	r3, [r7, #12]
 8025364:	b2d9      	uxtb	r1, r3
 8025366:	687a      	ldr	r2, [r7, #4]
 8025368:	68fb      	ldr	r3, [r7, #12]
 802536a:	202c      	movs	r0, #44	; 0x2c
 802536c:	fb00 f303 	mul.w	r3, r0, r3
 8025370:	4413      	add	r3, r2
 8025372:	3360      	adds	r3, #96	; 0x60
 8025374:	781b      	ldrb	r3, [r3, #0]
 8025376:	461a      	mov	r2, r3
 8025378:	6878      	ldr	r0, [r7, #4]
 802537a:	f007 fff3 	bl	802d364 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 802537e:	687b      	ldr	r3, [r7, #4]
 8025380:	691b      	ldr	r3, [r3, #16]
 8025382:	2b01      	cmp	r3, #1
 8025384:	d12b      	bne.n	80253de <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8025386:	687a      	ldr	r2, [r7, #4]
 8025388:	68fb      	ldr	r3, [r7, #12]
 802538a:	212c      	movs	r1, #44	; 0x2c
 802538c:	fb01 f303 	mul.w	r3, r1, r3
 8025390:	4413      	add	r3, r2
 8025392:	3348      	adds	r3, #72	; 0x48
 8025394:	681b      	ldr	r3, [r3, #0]
 8025396:	6879      	ldr	r1, [r7, #4]
 8025398:	68fa      	ldr	r2, [r7, #12]
 802539a:	202c      	movs	r0, #44	; 0x2c
 802539c:	fb00 f202 	mul.w	r2, r0, r2
 80253a0:	440a      	add	r2, r1
 80253a2:	3240      	adds	r2, #64	; 0x40
 80253a4:	8812      	ldrh	r2, [r2, #0]
 80253a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80253aa:	f003 0301 	and.w	r3, r3, #1
 80253ae:	2b00      	cmp	r3, #0
 80253b0:	f000 818e 	beq.w	80256d0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80253b4:	687a      	ldr	r2, [r7, #4]
 80253b6:	68fb      	ldr	r3, [r7, #12]
 80253b8:	212c      	movs	r1, #44	; 0x2c
 80253ba:	fb01 f303 	mul.w	r3, r1, r3
 80253be:	4413      	add	r3, r2
 80253c0:	3354      	adds	r3, #84	; 0x54
 80253c2:	781b      	ldrb	r3, [r3, #0]
 80253c4:	f083 0301 	eor.w	r3, r3, #1
 80253c8:	b2d8      	uxtb	r0, r3
 80253ca:	687a      	ldr	r2, [r7, #4]
 80253cc:	68fb      	ldr	r3, [r7, #12]
 80253ce:	212c      	movs	r1, #44	; 0x2c
 80253d0:	fb01 f303 	mul.w	r3, r1, r3
 80253d4:	4413      	add	r3, r2
 80253d6:	3354      	adds	r3, #84	; 0x54
 80253d8:	4602      	mov	r2, r0
 80253da:	701a      	strb	r2, [r3, #0]
}
 80253dc:	e178      	b.n	80256d0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80253de:	687a      	ldr	r2, [r7, #4]
 80253e0:	68fb      	ldr	r3, [r7, #12]
 80253e2:	212c      	movs	r1, #44	; 0x2c
 80253e4:	fb01 f303 	mul.w	r3, r1, r3
 80253e8:	4413      	add	r3, r2
 80253ea:	3354      	adds	r3, #84	; 0x54
 80253ec:	781b      	ldrb	r3, [r3, #0]
 80253ee:	f083 0301 	eor.w	r3, r3, #1
 80253f2:	b2d8      	uxtb	r0, r3
 80253f4:	687a      	ldr	r2, [r7, #4]
 80253f6:	68fb      	ldr	r3, [r7, #12]
 80253f8:	212c      	movs	r1, #44	; 0x2c
 80253fa:	fb01 f303 	mul.w	r3, r1, r3
 80253fe:	4413      	add	r3, r2
 8025400:	3354      	adds	r3, #84	; 0x54
 8025402:	4602      	mov	r2, r0
 8025404:	701a      	strb	r2, [r3, #0]
}
 8025406:	e163      	b.n	80256d0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8025408:	68fb      	ldr	r3, [r7, #12]
 802540a:	015a      	lsls	r2, r3, #5
 802540c:	693b      	ldr	r3, [r7, #16]
 802540e:	4413      	add	r3, r2
 8025410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025414:	689b      	ldr	r3, [r3, #8]
 8025416:	f003 0302 	and.w	r3, r3, #2
 802541a:	2b02      	cmp	r3, #2
 802541c:	f040 80f6 	bne.w	802560c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8025420:	687a      	ldr	r2, [r7, #4]
 8025422:	68fb      	ldr	r3, [r7, #12]
 8025424:	212c      	movs	r1, #44	; 0x2c
 8025426:	fb01 f303 	mul.w	r3, r1, r3
 802542a:	4413      	add	r3, r2
 802542c:	3361      	adds	r3, #97	; 0x61
 802542e:	781b      	ldrb	r3, [r3, #0]
 8025430:	2b01      	cmp	r3, #1
 8025432:	d109      	bne.n	8025448 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025434:	687a      	ldr	r2, [r7, #4]
 8025436:	68fb      	ldr	r3, [r7, #12]
 8025438:	212c      	movs	r1, #44	; 0x2c
 802543a:	fb01 f303 	mul.w	r3, r1, r3
 802543e:	4413      	add	r3, r2
 8025440:	3360      	adds	r3, #96	; 0x60
 8025442:	2201      	movs	r2, #1
 8025444:	701a      	strb	r2, [r3, #0]
 8025446:	e0c9      	b.n	80255dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8025448:	687a      	ldr	r2, [r7, #4]
 802544a:	68fb      	ldr	r3, [r7, #12]
 802544c:	212c      	movs	r1, #44	; 0x2c
 802544e:	fb01 f303 	mul.w	r3, r1, r3
 8025452:	4413      	add	r3, r2
 8025454:	3361      	adds	r3, #97	; 0x61
 8025456:	781b      	ldrb	r3, [r3, #0]
 8025458:	2b05      	cmp	r3, #5
 802545a:	d109      	bne.n	8025470 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 802545c:	687a      	ldr	r2, [r7, #4]
 802545e:	68fb      	ldr	r3, [r7, #12]
 8025460:	212c      	movs	r1, #44	; 0x2c
 8025462:	fb01 f303 	mul.w	r3, r1, r3
 8025466:	4413      	add	r3, r2
 8025468:	3360      	adds	r3, #96	; 0x60
 802546a:	2205      	movs	r2, #5
 802546c:	701a      	strb	r2, [r3, #0]
 802546e:	e0b5      	b.n	80255dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025470:	687a      	ldr	r2, [r7, #4]
 8025472:	68fb      	ldr	r3, [r7, #12]
 8025474:	212c      	movs	r1, #44	; 0x2c
 8025476:	fb01 f303 	mul.w	r3, r1, r3
 802547a:	4413      	add	r3, r2
 802547c:	3361      	adds	r3, #97	; 0x61
 802547e:	781b      	ldrb	r3, [r3, #0]
 8025480:	2b06      	cmp	r3, #6
 8025482:	d009      	beq.n	8025498 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8025484:	687a      	ldr	r2, [r7, #4]
 8025486:	68fb      	ldr	r3, [r7, #12]
 8025488:	212c      	movs	r1, #44	; 0x2c
 802548a:	fb01 f303 	mul.w	r3, r1, r3
 802548e:	4413      	add	r3, r2
 8025490:	3361      	adds	r3, #97	; 0x61
 8025492:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025494:	2b08      	cmp	r3, #8
 8025496:	d150      	bne.n	802553a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8025498:	687a      	ldr	r2, [r7, #4]
 802549a:	68fb      	ldr	r3, [r7, #12]
 802549c:	212c      	movs	r1, #44	; 0x2c
 802549e:	fb01 f303 	mul.w	r3, r1, r3
 80254a2:	4413      	add	r3, r2
 80254a4:	335c      	adds	r3, #92	; 0x5c
 80254a6:	681b      	ldr	r3, [r3, #0]
 80254a8:	1c5a      	adds	r2, r3, #1
 80254aa:	6879      	ldr	r1, [r7, #4]
 80254ac:	68fb      	ldr	r3, [r7, #12]
 80254ae:	202c      	movs	r0, #44	; 0x2c
 80254b0:	fb00 f303 	mul.w	r3, r0, r3
 80254b4:	440b      	add	r3, r1
 80254b6:	335c      	adds	r3, #92	; 0x5c
 80254b8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80254ba:	687a      	ldr	r2, [r7, #4]
 80254bc:	68fb      	ldr	r3, [r7, #12]
 80254be:	212c      	movs	r1, #44	; 0x2c
 80254c0:	fb01 f303 	mul.w	r3, r1, r3
 80254c4:	4413      	add	r3, r2
 80254c6:	335c      	adds	r3, #92	; 0x5c
 80254c8:	681b      	ldr	r3, [r3, #0]
 80254ca:	2b02      	cmp	r3, #2
 80254cc:	d912      	bls.n	80254f4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80254ce:	687a      	ldr	r2, [r7, #4]
 80254d0:	68fb      	ldr	r3, [r7, #12]
 80254d2:	212c      	movs	r1, #44	; 0x2c
 80254d4:	fb01 f303 	mul.w	r3, r1, r3
 80254d8:	4413      	add	r3, r2
 80254da:	335c      	adds	r3, #92	; 0x5c
 80254dc:	2200      	movs	r2, #0
 80254de:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80254e0:	687a      	ldr	r2, [r7, #4]
 80254e2:	68fb      	ldr	r3, [r7, #12]
 80254e4:	212c      	movs	r1, #44	; 0x2c
 80254e6:	fb01 f303 	mul.w	r3, r1, r3
 80254ea:	4413      	add	r3, r2
 80254ec:	3360      	adds	r3, #96	; 0x60
 80254ee:	2204      	movs	r2, #4
 80254f0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80254f2:	e073      	b.n	80255dc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80254f4:	687a      	ldr	r2, [r7, #4]
 80254f6:	68fb      	ldr	r3, [r7, #12]
 80254f8:	212c      	movs	r1, #44	; 0x2c
 80254fa:	fb01 f303 	mul.w	r3, r1, r3
 80254fe:	4413      	add	r3, r2
 8025500:	3360      	adds	r3, #96	; 0x60
 8025502:	2202      	movs	r2, #2
 8025504:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025506:	68fb      	ldr	r3, [r7, #12]
 8025508:	015a      	lsls	r2, r3, #5
 802550a:	693b      	ldr	r3, [r7, #16]
 802550c:	4413      	add	r3, r2
 802550e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025512:	681b      	ldr	r3, [r3, #0]
 8025514:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025516:	68bb      	ldr	r3, [r7, #8]
 8025518:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802551c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 802551e:	68bb      	ldr	r3, [r7, #8]
 8025520:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025524:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025526:	68fb      	ldr	r3, [r7, #12]
 8025528:	015a      	lsls	r2, r3, #5
 802552a:	693b      	ldr	r3, [r7, #16]
 802552c:	4413      	add	r3, r2
 802552e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025532:	461a      	mov	r2, r3
 8025534:	68bb      	ldr	r3, [r7, #8]
 8025536:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025538:	e050      	b.n	80255dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 802553a:	687a      	ldr	r2, [r7, #4]
 802553c:	68fb      	ldr	r3, [r7, #12]
 802553e:	212c      	movs	r1, #44	; 0x2c
 8025540:	fb01 f303 	mul.w	r3, r1, r3
 8025544:	4413      	add	r3, r2
 8025546:	3361      	adds	r3, #97	; 0x61
 8025548:	781b      	ldrb	r3, [r3, #0]
 802554a:	2b03      	cmp	r3, #3
 802554c:	d122      	bne.n	8025594 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 802554e:	687a      	ldr	r2, [r7, #4]
 8025550:	68fb      	ldr	r3, [r7, #12]
 8025552:	212c      	movs	r1, #44	; 0x2c
 8025554:	fb01 f303 	mul.w	r3, r1, r3
 8025558:	4413      	add	r3, r2
 802555a:	3360      	adds	r3, #96	; 0x60
 802555c:	2202      	movs	r2, #2
 802555e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025560:	68fb      	ldr	r3, [r7, #12]
 8025562:	015a      	lsls	r2, r3, #5
 8025564:	693b      	ldr	r3, [r7, #16]
 8025566:	4413      	add	r3, r2
 8025568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802556c:	681b      	ldr	r3, [r3, #0]
 802556e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025570:	68bb      	ldr	r3, [r7, #8]
 8025572:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025576:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025578:	68bb      	ldr	r3, [r7, #8]
 802557a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802557e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025580:	68fb      	ldr	r3, [r7, #12]
 8025582:	015a      	lsls	r2, r3, #5
 8025584:	693b      	ldr	r3, [r7, #16]
 8025586:	4413      	add	r3, r2
 8025588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802558c:	461a      	mov	r2, r3
 802558e:	68bb      	ldr	r3, [r7, #8]
 8025590:	6013      	str	r3, [r2, #0]
 8025592:	e023      	b.n	80255dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8025594:	687a      	ldr	r2, [r7, #4]
 8025596:	68fb      	ldr	r3, [r7, #12]
 8025598:	212c      	movs	r1, #44	; 0x2c
 802559a:	fb01 f303 	mul.w	r3, r1, r3
 802559e:	4413      	add	r3, r2
 80255a0:	3361      	adds	r3, #97	; 0x61
 80255a2:	781b      	ldrb	r3, [r3, #0]
 80255a4:	2b07      	cmp	r3, #7
 80255a6:	d119      	bne.n	80255dc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80255a8:	687a      	ldr	r2, [r7, #4]
 80255aa:	68fb      	ldr	r3, [r7, #12]
 80255ac:	212c      	movs	r1, #44	; 0x2c
 80255ae:	fb01 f303 	mul.w	r3, r1, r3
 80255b2:	4413      	add	r3, r2
 80255b4:	335c      	adds	r3, #92	; 0x5c
 80255b6:	681b      	ldr	r3, [r3, #0]
 80255b8:	1c5a      	adds	r2, r3, #1
 80255ba:	6879      	ldr	r1, [r7, #4]
 80255bc:	68fb      	ldr	r3, [r7, #12]
 80255be:	202c      	movs	r0, #44	; 0x2c
 80255c0:	fb00 f303 	mul.w	r3, r0, r3
 80255c4:	440b      	add	r3, r1
 80255c6:	335c      	adds	r3, #92	; 0x5c
 80255c8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80255ca:	687a      	ldr	r2, [r7, #4]
 80255cc:	68fb      	ldr	r3, [r7, #12]
 80255ce:	212c      	movs	r1, #44	; 0x2c
 80255d0:	fb01 f303 	mul.w	r3, r1, r3
 80255d4:	4413      	add	r3, r2
 80255d6:	3360      	adds	r3, #96	; 0x60
 80255d8:	2204      	movs	r2, #4
 80255da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80255dc:	68fb      	ldr	r3, [r7, #12]
 80255de:	015a      	lsls	r2, r3, #5
 80255e0:	693b      	ldr	r3, [r7, #16]
 80255e2:	4413      	add	r3, r2
 80255e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80255e8:	461a      	mov	r2, r3
 80255ea:	2302      	movs	r3, #2
 80255ec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80255ee:	68fb      	ldr	r3, [r7, #12]
 80255f0:	b2d9      	uxtb	r1, r3
 80255f2:	687a      	ldr	r2, [r7, #4]
 80255f4:	68fb      	ldr	r3, [r7, #12]
 80255f6:	202c      	movs	r0, #44	; 0x2c
 80255f8:	fb00 f303 	mul.w	r3, r0, r3
 80255fc:	4413      	add	r3, r2
 80255fe:	3360      	adds	r3, #96	; 0x60
 8025600:	781b      	ldrb	r3, [r3, #0]
 8025602:	461a      	mov	r2, r3
 8025604:	6878      	ldr	r0, [r7, #4]
 8025606:	f007 fead 	bl	802d364 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 802560a:	e061      	b.n	80256d0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 802560c:	68fb      	ldr	r3, [r7, #12]
 802560e:	015a      	lsls	r2, r3, #5
 8025610:	693b      	ldr	r3, [r7, #16]
 8025612:	4413      	add	r3, r2
 8025614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025618:	689b      	ldr	r3, [r3, #8]
 802561a:	f003 0310 	and.w	r3, r3, #16
 802561e:	2b10      	cmp	r3, #16
 8025620:	d156      	bne.n	80256d0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8025622:	687a      	ldr	r2, [r7, #4]
 8025624:	68fb      	ldr	r3, [r7, #12]
 8025626:	212c      	movs	r1, #44	; 0x2c
 8025628:	fb01 f303 	mul.w	r3, r1, r3
 802562c:	4413      	add	r3, r2
 802562e:	333f      	adds	r3, #63	; 0x3f
 8025630:	781b      	ldrb	r3, [r3, #0]
 8025632:	2b03      	cmp	r3, #3
 8025634:	d111      	bne.n	802565a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8025636:	687a      	ldr	r2, [r7, #4]
 8025638:	68fb      	ldr	r3, [r7, #12]
 802563a:	212c      	movs	r1, #44	; 0x2c
 802563c:	fb01 f303 	mul.w	r3, r1, r3
 8025640:	4413      	add	r3, r2
 8025642:	335c      	adds	r3, #92	; 0x5c
 8025644:	2200      	movs	r2, #0
 8025646:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025648:	687b      	ldr	r3, [r7, #4]
 802564a:	681b      	ldr	r3, [r3, #0]
 802564c:	68fa      	ldr	r2, [r7, #12]
 802564e:	b2d2      	uxtb	r2, r2
 8025650:	4611      	mov	r1, r2
 8025652:	4618      	mov	r0, r3
 8025654:	f005 fbe7 	bl	802ae26 <USB_HC_Halt>
 8025658:	e031      	b.n	80256be <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 802565a:	687a      	ldr	r2, [r7, #4]
 802565c:	68fb      	ldr	r3, [r7, #12]
 802565e:	212c      	movs	r1, #44	; 0x2c
 8025660:	fb01 f303 	mul.w	r3, r1, r3
 8025664:	4413      	add	r3, r2
 8025666:	333f      	adds	r3, #63	; 0x3f
 8025668:	781b      	ldrb	r3, [r3, #0]
 802566a:	2b00      	cmp	r3, #0
 802566c:	d009      	beq.n	8025682 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 802566e:	687a      	ldr	r2, [r7, #4]
 8025670:	68fb      	ldr	r3, [r7, #12]
 8025672:	212c      	movs	r1, #44	; 0x2c
 8025674:	fb01 f303 	mul.w	r3, r1, r3
 8025678:	4413      	add	r3, r2
 802567a:	333f      	adds	r3, #63	; 0x3f
 802567c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 802567e:	2b02      	cmp	r3, #2
 8025680:	d11d      	bne.n	80256be <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8025682:	687a      	ldr	r2, [r7, #4]
 8025684:	68fb      	ldr	r3, [r7, #12]
 8025686:	212c      	movs	r1, #44	; 0x2c
 8025688:	fb01 f303 	mul.w	r3, r1, r3
 802568c:	4413      	add	r3, r2
 802568e:	335c      	adds	r3, #92	; 0x5c
 8025690:	2200      	movs	r2, #0
 8025692:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8025694:	687b      	ldr	r3, [r7, #4]
 8025696:	691b      	ldr	r3, [r3, #16]
 8025698:	2b00      	cmp	r3, #0
 802569a:	d110      	bne.n	80256be <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 802569c:	687a      	ldr	r2, [r7, #4]
 802569e:	68fb      	ldr	r3, [r7, #12]
 80256a0:	212c      	movs	r1, #44	; 0x2c
 80256a2:	fb01 f303 	mul.w	r3, r1, r3
 80256a6:	4413      	add	r3, r2
 80256a8:	3361      	adds	r3, #97	; 0x61
 80256aa:	2203      	movs	r2, #3
 80256ac:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80256ae:	687b      	ldr	r3, [r7, #4]
 80256b0:	681b      	ldr	r3, [r3, #0]
 80256b2:	68fa      	ldr	r2, [r7, #12]
 80256b4:	b2d2      	uxtb	r2, r2
 80256b6:	4611      	mov	r1, r2
 80256b8:	4618      	mov	r0, r3
 80256ba:	f005 fbb4 	bl	802ae26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80256be:	68fb      	ldr	r3, [r7, #12]
 80256c0:	015a      	lsls	r2, r3, #5
 80256c2:	693b      	ldr	r3, [r7, #16]
 80256c4:	4413      	add	r3, r2
 80256c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80256ca:	461a      	mov	r2, r3
 80256cc:	2310      	movs	r3, #16
 80256ce:	6093      	str	r3, [r2, #8]
}
 80256d0:	bf00      	nop
 80256d2:	3718      	adds	r7, #24
 80256d4:	46bd      	mov	sp, r7
 80256d6:	bd80      	pop	{r7, pc}

080256d8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80256d8:	b580      	push	{r7, lr}
 80256da:	b088      	sub	sp, #32
 80256dc:	af00      	add	r7, sp, #0
 80256de:	6078      	str	r0, [r7, #4]
 80256e0:	460b      	mov	r3, r1
 80256e2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80256e4:	687b      	ldr	r3, [r7, #4]
 80256e6:	681b      	ldr	r3, [r3, #0]
 80256e8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80256ea:	69fb      	ldr	r3, [r7, #28]
 80256ec:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80256ee:	78fb      	ldrb	r3, [r7, #3]
 80256f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80256f2:	697b      	ldr	r3, [r7, #20]
 80256f4:	015a      	lsls	r2, r3, #5
 80256f6:	69bb      	ldr	r3, [r7, #24]
 80256f8:	4413      	add	r3, r2
 80256fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80256fe:	689b      	ldr	r3, [r3, #8]
 8025700:	f003 0304 	and.w	r3, r3, #4
 8025704:	2b04      	cmp	r3, #4
 8025706:	d11a      	bne.n	802573e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8025708:	697b      	ldr	r3, [r7, #20]
 802570a:	015a      	lsls	r2, r3, #5
 802570c:	69bb      	ldr	r3, [r7, #24]
 802570e:	4413      	add	r3, r2
 8025710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025714:	461a      	mov	r2, r3
 8025716:	2304      	movs	r3, #4
 8025718:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 802571a:	687a      	ldr	r2, [r7, #4]
 802571c:	697b      	ldr	r3, [r7, #20]
 802571e:	212c      	movs	r1, #44	; 0x2c
 8025720:	fb01 f303 	mul.w	r3, r1, r3
 8025724:	4413      	add	r3, r2
 8025726:	3361      	adds	r3, #97	; 0x61
 8025728:	2206      	movs	r2, #6
 802572a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802572c:	687b      	ldr	r3, [r7, #4]
 802572e:	681b      	ldr	r3, [r3, #0]
 8025730:	697a      	ldr	r2, [r7, #20]
 8025732:	b2d2      	uxtb	r2, r2
 8025734:	4611      	mov	r1, r2
 8025736:	4618      	mov	r0, r3
 8025738:	f005 fb75 	bl	802ae26 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 802573c:	e331      	b.n	8025da2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 802573e:	697b      	ldr	r3, [r7, #20]
 8025740:	015a      	lsls	r2, r3, #5
 8025742:	69bb      	ldr	r3, [r7, #24]
 8025744:	4413      	add	r3, r2
 8025746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802574a:	689b      	ldr	r3, [r3, #8]
 802574c:	f003 0320 	and.w	r3, r3, #32
 8025750:	2b20      	cmp	r3, #32
 8025752:	d12e      	bne.n	80257b2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8025754:	697b      	ldr	r3, [r7, #20]
 8025756:	015a      	lsls	r2, r3, #5
 8025758:	69bb      	ldr	r3, [r7, #24]
 802575a:	4413      	add	r3, r2
 802575c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025760:	461a      	mov	r2, r3
 8025762:	2320      	movs	r3, #32
 8025764:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8025766:	687a      	ldr	r2, [r7, #4]
 8025768:	697b      	ldr	r3, [r7, #20]
 802576a:	212c      	movs	r1, #44	; 0x2c
 802576c:	fb01 f303 	mul.w	r3, r1, r3
 8025770:	4413      	add	r3, r2
 8025772:	333d      	adds	r3, #61	; 0x3d
 8025774:	781b      	ldrb	r3, [r3, #0]
 8025776:	2b01      	cmp	r3, #1
 8025778:	f040 8313 	bne.w	8025da2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 802577c:	687a      	ldr	r2, [r7, #4]
 802577e:	697b      	ldr	r3, [r7, #20]
 8025780:	212c      	movs	r1, #44	; 0x2c
 8025782:	fb01 f303 	mul.w	r3, r1, r3
 8025786:	4413      	add	r3, r2
 8025788:	333d      	adds	r3, #61	; 0x3d
 802578a:	2200      	movs	r2, #0
 802578c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 802578e:	687a      	ldr	r2, [r7, #4]
 8025790:	697b      	ldr	r3, [r7, #20]
 8025792:	212c      	movs	r1, #44	; 0x2c
 8025794:	fb01 f303 	mul.w	r3, r1, r3
 8025798:	4413      	add	r3, r2
 802579a:	3360      	adds	r3, #96	; 0x60
 802579c:	2202      	movs	r2, #2
 802579e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80257a0:	687b      	ldr	r3, [r7, #4]
 80257a2:	681b      	ldr	r3, [r3, #0]
 80257a4:	697a      	ldr	r2, [r7, #20]
 80257a6:	b2d2      	uxtb	r2, r2
 80257a8:	4611      	mov	r1, r2
 80257aa:	4618      	mov	r0, r3
 80257ac:	f005 fb3b 	bl	802ae26 <USB_HC_Halt>
}
 80257b0:	e2f7      	b.n	8025da2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80257b2:	697b      	ldr	r3, [r7, #20]
 80257b4:	015a      	lsls	r2, r3, #5
 80257b6:	69bb      	ldr	r3, [r7, #24]
 80257b8:	4413      	add	r3, r2
 80257ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80257be:	689b      	ldr	r3, [r3, #8]
 80257c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80257c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80257c8:	d112      	bne.n	80257f0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80257ca:	697b      	ldr	r3, [r7, #20]
 80257cc:	015a      	lsls	r2, r3, #5
 80257ce:	69bb      	ldr	r3, [r7, #24]
 80257d0:	4413      	add	r3, r2
 80257d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80257d6:	461a      	mov	r2, r3
 80257d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80257dc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80257de:	687b      	ldr	r3, [r7, #4]
 80257e0:	681b      	ldr	r3, [r3, #0]
 80257e2:	697a      	ldr	r2, [r7, #20]
 80257e4:	b2d2      	uxtb	r2, r2
 80257e6:	4611      	mov	r1, r2
 80257e8:	4618      	mov	r0, r3
 80257ea:	f005 fb1c 	bl	802ae26 <USB_HC_Halt>
}
 80257ee:	e2d8      	b.n	8025da2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80257f0:	697b      	ldr	r3, [r7, #20]
 80257f2:	015a      	lsls	r2, r3, #5
 80257f4:	69bb      	ldr	r3, [r7, #24]
 80257f6:	4413      	add	r3, r2
 80257f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80257fc:	689b      	ldr	r3, [r3, #8]
 80257fe:	f003 0301 	and.w	r3, r3, #1
 8025802:	2b01      	cmp	r3, #1
 8025804:	d140      	bne.n	8025888 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025806:	687a      	ldr	r2, [r7, #4]
 8025808:	697b      	ldr	r3, [r7, #20]
 802580a:	212c      	movs	r1, #44	; 0x2c
 802580c:	fb01 f303 	mul.w	r3, r1, r3
 8025810:	4413      	add	r3, r2
 8025812:	335c      	adds	r3, #92	; 0x5c
 8025814:	2200      	movs	r2, #0
 8025816:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8025818:	697b      	ldr	r3, [r7, #20]
 802581a:	015a      	lsls	r2, r3, #5
 802581c:	69bb      	ldr	r3, [r7, #24]
 802581e:	4413      	add	r3, r2
 8025820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025824:	689b      	ldr	r3, [r3, #8]
 8025826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802582a:	2b40      	cmp	r3, #64	; 0x40
 802582c:	d111      	bne.n	8025852 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 802582e:	687a      	ldr	r2, [r7, #4]
 8025830:	697b      	ldr	r3, [r7, #20]
 8025832:	212c      	movs	r1, #44	; 0x2c
 8025834:	fb01 f303 	mul.w	r3, r1, r3
 8025838:	4413      	add	r3, r2
 802583a:	333d      	adds	r3, #61	; 0x3d
 802583c:	2201      	movs	r2, #1
 802583e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8025840:	697b      	ldr	r3, [r7, #20]
 8025842:	015a      	lsls	r2, r3, #5
 8025844:	69bb      	ldr	r3, [r7, #24]
 8025846:	4413      	add	r3, r2
 8025848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802584c:	461a      	mov	r2, r3
 802584e:	2340      	movs	r3, #64	; 0x40
 8025850:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8025852:	697b      	ldr	r3, [r7, #20]
 8025854:	015a      	lsls	r2, r3, #5
 8025856:	69bb      	ldr	r3, [r7, #24]
 8025858:	4413      	add	r3, r2
 802585a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802585e:	461a      	mov	r2, r3
 8025860:	2301      	movs	r3, #1
 8025862:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8025864:	687a      	ldr	r2, [r7, #4]
 8025866:	697b      	ldr	r3, [r7, #20]
 8025868:	212c      	movs	r1, #44	; 0x2c
 802586a:	fb01 f303 	mul.w	r3, r1, r3
 802586e:	4413      	add	r3, r2
 8025870:	3361      	adds	r3, #97	; 0x61
 8025872:	2201      	movs	r2, #1
 8025874:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025876:	687b      	ldr	r3, [r7, #4]
 8025878:	681b      	ldr	r3, [r3, #0]
 802587a:	697a      	ldr	r2, [r7, #20]
 802587c:	b2d2      	uxtb	r2, r2
 802587e:	4611      	mov	r1, r2
 8025880:	4618      	mov	r0, r3
 8025882:	f005 fad0 	bl	802ae26 <USB_HC_Halt>
}
 8025886:	e28c      	b.n	8025da2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8025888:	697b      	ldr	r3, [r7, #20]
 802588a:	015a      	lsls	r2, r3, #5
 802588c:	69bb      	ldr	r3, [r7, #24]
 802588e:	4413      	add	r3, r2
 8025890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025894:	689b      	ldr	r3, [r3, #8]
 8025896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802589a:	2b40      	cmp	r3, #64	; 0x40
 802589c:	d12c      	bne.n	80258f8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 802589e:	687a      	ldr	r2, [r7, #4]
 80258a0:	697b      	ldr	r3, [r7, #20]
 80258a2:	212c      	movs	r1, #44	; 0x2c
 80258a4:	fb01 f303 	mul.w	r3, r1, r3
 80258a8:	4413      	add	r3, r2
 80258aa:	3361      	adds	r3, #97	; 0x61
 80258ac:	2204      	movs	r2, #4
 80258ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80258b0:	687a      	ldr	r2, [r7, #4]
 80258b2:	697b      	ldr	r3, [r7, #20]
 80258b4:	212c      	movs	r1, #44	; 0x2c
 80258b6:	fb01 f303 	mul.w	r3, r1, r3
 80258ba:	4413      	add	r3, r2
 80258bc:	333d      	adds	r3, #61	; 0x3d
 80258be:	2201      	movs	r2, #1
 80258c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80258c2:	687a      	ldr	r2, [r7, #4]
 80258c4:	697b      	ldr	r3, [r7, #20]
 80258c6:	212c      	movs	r1, #44	; 0x2c
 80258c8:	fb01 f303 	mul.w	r3, r1, r3
 80258cc:	4413      	add	r3, r2
 80258ce:	335c      	adds	r3, #92	; 0x5c
 80258d0:	2200      	movs	r2, #0
 80258d2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80258d4:	687b      	ldr	r3, [r7, #4]
 80258d6:	681b      	ldr	r3, [r3, #0]
 80258d8:	697a      	ldr	r2, [r7, #20]
 80258da:	b2d2      	uxtb	r2, r2
 80258dc:	4611      	mov	r1, r2
 80258de:	4618      	mov	r0, r3
 80258e0:	f005 faa1 	bl	802ae26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80258e4:	697b      	ldr	r3, [r7, #20]
 80258e6:	015a      	lsls	r2, r3, #5
 80258e8:	69bb      	ldr	r3, [r7, #24]
 80258ea:	4413      	add	r3, r2
 80258ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80258f0:	461a      	mov	r2, r3
 80258f2:	2340      	movs	r3, #64	; 0x40
 80258f4:	6093      	str	r3, [r2, #8]
}
 80258f6:	e254      	b.n	8025da2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80258f8:	697b      	ldr	r3, [r7, #20]
 80258fa:	015a      	lsls	r2, r3, #5
 80258fc:	69bb      	ldr	r3, [r7, #24]
 80258fe:	4413      	add	r3, r2
 8025900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025904:	689b      	ldr	r3, [r3, #8]
 8025906:	f003 0308 	and.w	r3, r3, #8
 802590a:	2b08      	cmp	r3, #8
 802590c:	d11a      	bne.n	8025944 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 802590e:	697b      	ldr	r3, [r7, #20]
 8025910:	015a      	lsls	r2, r3, #5
 8025912:	69bb      	ldr	r3, [r7, #24]
 8025914:	4413      	add	r3, r2
 8025916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802591a:	461a      	mov	r2, r3
 802591c:	2308      	movs	r3, #8
 802591e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8025920:	687a      	ldr	r2, [r7, #4]
 8025922:	697b      	ldr	r3, [r7, #20]
 8025924:	212c      	movs	r1, #44	; 0x2c
 8025926:	fb01 f303 	mul.w	r3, r1, r3
 802592a:	4413      	add	r3, r2
 802592c:	3361      	adds	r3, #97	; 0x61
 802592e:	2205      	movs	r2, #5
 8025930:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025932:	687b      	ldr	r3, [r7, #4]
 8025934:	681b      	ldr	r3, [r3, #0]
 8025936:	697a      	ldr	r2, [r7, #20]
 8025938:	b2d2      	uxtb	r2, r2
 802593a:	4611      	mov	r1, r2
 802593c:	4618      	mov	r0, r3
 802593e:	f005 fa72 	bl	802ae26 <USB_HC_Halt>
}
 8025942:	e22e      	b.n	8025da2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8025944:	697b      	ldr	r3, [r7, #20]
 8025946:	015a      	lsls	r2, r3, #5
 8025948:	69bb      	ldr	r3, [r7, #24]
 802594a:	4413      	add	r3, r2
 802594c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025950:	689b      	ldr	r3, [r3, #8]
 8025952:	f003 0310 	and.w	r3, r3, #16
 8025956:	2b10      	cmp	r3, #16
 8025958:	d140      	bne.n	80259dc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 802595a:	687a      	ldr	r2, [r7, #4]
 802595c:	697b      	ldr	r3, [r7, #20]
 802595e:	212c      	movs	r1, #44	; 0x2c
 8025960:	fb01 f303 	mul.w	r3, r1, r3
 8025964:	4413      	add	r3, r2
 8025966:	335c      	adds	r3, #92	; 0x5c
 8025968:	2200      	movs	r2, #0
 802596a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 802596c:	687a      	ldr	r2, [r7, #4]
 802596e:	697b      	ldr	r3, [r7, #20]
 8025970:	212c      	movs	r1, #44	; 0x2c
 8025972:	fb01 f303 	mul.w	r3, r1, r3
 8025976:	4413      	add	r3, r2
 8025978:	3361      	adds	r3, #97	; 0x61
 802597a:	2203      	movs	r2, #3
 802597c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 802597e:	687a      	ldr	r2, [r7, #4]
 8025980:	697b      	ldr	r3, [r7, #20]
 8025982:	212c      	movs	r1, #44	; 0x2c
 8025984:	fb01 f303 	mul.w	r3, r1, r3
 8025988:	4413      	add	r3, r2
 802598a:	333d      	adds	r3, #61	; 0x3d
 802598c:	781b      	ldrb	r3, [r3, #0]
 802598e:	2b00      	cmp	r3, #0
 8025990:	d112      	bne.n	80259b8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8025992:	687a      	ldr	r2, [r7, #4]
 8025994:	697b      	ldr	r3, [r7, #20]
 8025996:	212c      	movs	r1, #44	; 0x2c
 8025998:	fb01 f303 	mul.w	r3, r1, r3
 802599c:	4413      	add	r3, r2
 802599e:	333c      	adds	r3, #60	; 0x3c
 80259a0:	781b      	ldrb	r3, [r3, #0]
 80259a2:	2b00      	cmp	r3, #0
 80259a4:	d108      	bne.n	80259b8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80259a6:	687a      	ldr	r2, [r7, #4]
 80259a8:	697b      	ldr	r3, [r7, #20]
 80259aa:	212c      	movs	r1, #44	; 0x2c
 80259ac:	fb01 f303 	mul.w	r3, r1, r3
 80259b0:	4413      	add	r3, r2
 80259b2:	333d      	adds	r3, #61	; 0x3d
 80259b4:	2201      	movs	r2, #1
 80259b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80259b8:	687b      	ldr	r3, [r7, #4]
 80259ba:	681b      	ldr	r3, [r3, #0]
 80259bc:	697a      	ldr	r2, [r7, #20]
 80259be:	b2d2      	uxtb	r2, r2
 80259c0:	4611      	mov	r1, r2
 80259c2:	4618      	mov	r0, r3
 80259c4:	f005 fa2f 	bl	802ae26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80259c8:	697b      	ldr	r3, [r7, #20]
 80259ca:	015a      	lsls	r2, r3, #5
 80259cc:	69bb      	ldr	r3, [r7, #24]
 80259ce:	4413      	add	r3, r2
 80259d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259d4:	461a      	mov	r2, r3
 80259d6:	2310      	movs	r3, #16
 80259d8:	6093      	str	r3, [r2, #8]
}
 80259da:	e1e2      	b.n	8025da2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80259dc:	697b      	ldr	r3, [r7, #20]
 80259de:	015a      	lsls	r2, r3, #5
 80259e0:	69bb      	ldr	r3, [r7, #24]
 80259e2:	4413      	add	r3, r2
 80259e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259e8:	689b      	ldr	r3, [r3, #8]
 80259ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80259ee:	2b80      	cmp	r3, #128	; 0x80
 80259f0:	d164      	bne.n	8025abc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80259f2:	687b      	ldr	r3, [r7, #4]
 80259f4:	691b      	ldr	r3, [r3, #16]
 80259f6:	2b00      	cmp	r3, #0
 80259f8:	d111      	bne.n	8025a1e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80259fa:	687a      	ldr	r2, [r7, #4]
 80259fc:	697b      	ldr	r3, [r7, #20]
 80259fe:	212c      	movs	r1, #44	; 0x2c
 8025a00:	fb01 f303 	mul.w	r3, r1, r3
 8025a04:	4413      	add	r3, r2
 8025a06:	3361      	adds	r3, #97	; 0x61
 8025a08:	2206      	movs	r2, #6
 8025a0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025a0c:	687b      	ldr	r3, [r7, #4]
 8025a0e:	681b      	ldr	r3, [r3, #0]
 8025a10:	697a      	ldr	r2, [r7, #20]
 8025a12:	b2d2      	uxtb	r2, r2
 8025a14:	4611      	mov	r1, r2
 8025a16:	4618      	mov	r0, r3
 8025a18:	f005 fa05 	bl	802ae26 <USB_HC_Halt>
 8025a1c:	e044      	b.n	8025aa8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8025a1e:	687a      	ldr	r2, [r7, #4]
 8025a20:	697b      	ldr	r3, [r7, #20]
 8025a22:	212c      	movs	r1, #44	; 0x2c
 8025a24:	fb01 f303 	mul.w	r3, r1, r3
 8025a28:	4413      	add	r3, r2
 8025a2a:	335c      	adds	r3, #92	; 0x5c
 8025a2c:	681b      	ldr	r3, [r3, #0]
 8025a2e:	1c5a      	adds	r2, r3, #1
 8025a30:	6879      	ldr	r1, [r7, #4]
 8025a32:	697b      	ldr	r3, [r7, #20]
 8025a34:	202c      	movs	r0, #44	; 0x2c
 8025a36:	fb00 f303 	mul.w	r3, r0, r3
 8025a3a:	440b      	add	r3, r1
 8025a3c:	335c      	adds	r3, #92	; 0x5c
 8025a3e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025a40:	687a      	ldr	r2, [r7, #4]
 8025a42:	697b      	ldr	r3, [r7, #20]
 8025a44:	212c      	movs	r1, #44	; 0x2c
 8025a46:	fb01 f303 	mul.w	r3, r1, r3
 8025a4a:	4413      	add	r3, r2
 8025a4c:	335c      	adds	r3, #92	; 0x5c
 8025a4e:	681b      	ldr	r3, [r3, #0]
 8025a50:	2b02      	cmp	r3, #2
 8025a52:	d920      	bls.n	8025a96 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8025a54:	687a      	ldr	r2, [r7, #4]
 8025a56:	697b      	ldr	r3, [r7, #20]
 8025a58:	212c      	movs	r1, #44	; 0x2c
 8025a5a:	fb01 f303 	mul.w	r3, r1, r3
 8025a5e:	4413      	add	r3, r2
 8025a60:	335c      	adds	r3, #92	; 0x5c
 8025a62:	2200      	movs	r2, #0
 8025a64:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025a66:	687a      	ldr	r2, [r7, #4]
 8025a68:	697b      	ldr	r3, [r7, #20]
 8025a6a:	212c      	movs	r1, #44	; 0x2c
 8025a6c:	fb01 f303 	mul.w	r3, r1, r3
 8025a70:	4413      	add	r3, r2
 8025a72:	3360      	adds	r3, #96	; 0x60
 8025a74:	2204      	movs	r2, #4
 8025a76:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025a78:	697b      	ldr	r3, [r7, #20]
 8025a7a:	b2d9      	uxtb	r1, r3
 8025a7c:	687a      	ldr	r2, [r7, #4]
 8025a7e:	697b      	ldr	r3, [r7, #20]
 8025a80:	202c      	movs	r0, #44	; 0x2c
 8025a82:	fb00 f303 	mul.w	r3, r0, r3
 8025a86:	4413      	add	r3, r2
 8025a88:	3360      	adds	r3, #96	; 0x60
 8025a8a:	781b      	ldrb	r3, [r3, #0]
 8025a8c:	461a      	mov	r2, r3
 8025a8e:	6878      	ldr	r0, [r7, #4]
 8025a90:	f007 fc68 	bl	802d364 <HAL_HCD_HC_NotifyURBChange_Callback>
 8025a94:	e008      	b.n	8025aa8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025a96:	687a      	ldr	r2, [r7, #4]
 8025a98:	697b      	ldr	r3, [r7, #20]
 8025a9a:	212c      	movs	r1, #44	; 0x2c
 8025a9c:	fb01 f303 	mul.w	r3, r1, r3
 8025aa0:	4413      	add	r3, r2
 8025aa2:	3360      	adds	r3, #96	; 0x60
 8025aa4:	2202      	movs	r2, #2
 8025aa6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8025aa8:	697b      	ldr	r3, [r7, #20]
 8025aaa:	015a      	lsls	r2, r3, #5
 8025aac:	69bb      	ldr	r3, [r7, #24]
 8025aae:	4413      	add	r3, r2
 8025ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ab4:	461a      	mov	r2, r3
 8025ab6:	2380      	movs	r3, #128	; 0x80
 8025ab8:	6093      	str	r3, [r2, #8]
}
 8025aba:	e172      	b.n	8025da2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8025abc:	697b      	ldr	r3, [r7, #20]
 8025abe:	015a      	lsls	r2, r3, #5
 8025ac0:	69bb      	ldr	r3, [r7, #24]
 8025ac2:	4413      	add	r3, r2
 8025ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ac8:	689b      	ldr	r3, [r3, #8]
 8025aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8025ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025ad2:	d11b      	bne.n	8025b0c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8025ad4:	687a      	ldr	r2, [r7, #4]
 8025ad6:	697b      	ldr	r3, [r7, #20]
 8025ad8:	212c      	movs	r1, #44	; 0x2c
 8025ada:	fb01 f303 	mul.w	r3, r1, r3
 8025ade:	4413      	add	r3, r2
 8025ae0:	3361      	adds	r3, #97	; 0x61
 8025ae2:	2208      	movs	r2, #8
 8025ae4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025ae6:	687b      	ldr	r3, [r7, #4]
 8025ae8:	681b      	ldr	r3, [r3, #0]
 8025aea:	697a      	ldr	r2, [r7, #20]
 8025aec:	b2d2      	uxtb	r2, r2
 8025aee:	4611      	mov	r1, r2
 8025af0:	4618      	mov	r0, r3
 8025af2:	f005 f998 	bl	802ae26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8025af6:	697b      	ldr	r3, [r7, #20]
 8025af8:	015a      	lsls	r2, r3, #5
 8025afa:	69bb      	ldr	r3, [r7, #24]
 8025afc:	4413      	add	r3, r2
 8025afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b02:	461a      	mov	r2, r3
 8025b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025b08:	6093      	str	r3, [r2, #8]
}
 8025b0a:	e14a      	b.n	8025da2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8025b0c:	697b      	ldr	r3, [r7, #20]
 8025b0e:	015a      	lsls	r2, r3, #5
 8025b10:	69bb      	ldr	r3, [r7, #24]
 8025b12:	4413      	add	r3, r2
 8025b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b18:	689b      	ldr	r3, [r3, #8]
 8025b1a:	f003 0302 	and.w	r3, r3, #2
 8025b1e:	2b02      	cmp	r3, #2
 8025b20:	f040 813f 	bne.w	8025da2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8025b24:	687a      	ldr	r2, [r7, #4]
 8025b26:	697b      	ldr	r3, [r7, #20]
 8025b28:	212c      	movs	r1, #44	; 0x2c
 8025b2a:	fb01 f303 	mul.w	r3, r1, r3
 8025b2e:	4413      	add	r3, r2
 8025b30:	3361      	adds	r3, #97	; 0x61
 8025b32:	781b      	ldrb	r3, [r3, #0]
 8025b34:	2b01      	cmp	r3, #1
 8025b36:	d17d      	bne.n	8025c34 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8025b38:	687a      	ldr	r2, [r7, #4]
 8025b3a:	697b      	ldr	r3, [r7, #20]
 8025b3c:	212c      	movs	r1, #44	; 0x2c
 8025b3e:	fb01 f303 	mul.w	r3, r1, r3
 8025b42:	4413      	add	r3, r2
 8025b44:	3360      	adds	r3, #96	; 0x60
 8025b46:	2201      	movs	r2, #1
 8025b48:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8025b4a:	687a      	ldr	r2, [r7, #4]
 8025b4c:	697b      	ldr	r3, [r7, #20]
 8025b4e:	212c      	movs	r1, #44	; 0x2c
 8025b50:	fb01 f303 	mul.w	r3, r1, r3
 8025b54:	4413      	add	r3, r2
 8025b56:	333f      	adds	r3, #63	; 0x3f
 8025b58:	781b      	ldrb	r3, [r3, #0]
 8025b5a:	2b02      	cmp	r3, #2
 8025b5c:	d00a      	beq.n	8025b74 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8025b5e:	687a      	ldr	r2, [r7, #4]
 8025b60:	697b      	ldr	r3, [r7, #20]
 8025b62:	212c      	movs	r1, #44	; 0x2c
 8025b64:	fb01 f303 	mul.w	r3, r1, r3
 8025b68:	4413      	add	r3, r2
 8025b6a:	333f      	adds	r3, #63	; 0x3f
 8025b6c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8025b6e:	2b03      	cmp	r3, #3
 8025b70:	f040 8100 	bne.w	8025d74 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8025b74:	687b      	ldr	r3, [r7, #4]
 8025b76:	691b      	ldr	r3, [r3, #16]
 8025b78:	2b00      	cmp	r3, #0
 8025b7a:	d113      	bne.n	8025ba4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8025b7c:	687a      	ldr	r2, [r7, #4]
 8025b7e:	697b      	ldr	r3, [r7, #20]
 8025b80:	212c      	movs	r1, #44	; 0x2c
 8025b82:	fb01 f303 	mul.w	r3, r1, r3
 8025b86:	4413      	add	r3, r2
 8025b88:	3355      	adds	r3, #85	; 0x55
 8025b8a:	781b      	ldrb	r3, [r3, #0]
 8025b8c:	f083 0301 	eor.w	r3, r3, #1
 8025b90:	b2d8      	uxtb	r0, r3
 8025b92:	687a      	ldr	r2, [r7, #4]
 8025b94:	697b      	ldr	r3, [r7, #20]
 8025b96:	212c      	movs	r1, #44	; 0x2c
 8025b98:	fb01 f303 	mul.w	r3, r1, r3
 8025b9c:	4413      	add	r3, r2
 8025b9e:	3355      	adds	r3, #85	; 0x55
 8025ba0:	4602      	mov	r2, r0
 8025ba2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8025ba4:	687b      	ldr	r3, [r7, #4]
 8025ba6:	691b      	ldr	r3, [r3, #16]
 8025ba8:	2b01      	cmp	r3, #1
 8025baa:	f040 80e3 	bne.w	8025d74 <HCD_HC_OUT_IRQHandler+0x69c>
 8025bae:	687a      	ldr	r2, [r7, #4]
 8025bb0:	697b      	ldr	r3, [r7, #20]
 8025bb2:	212c      	movs	r1, #44	; 0x2c
 8025bb4:	fb01 f303 	mul.w	r3, r1, r3
 8025bb8:	4413      	add	r3, r2
 8025bba:	334c      	adds	r3, #76	; 0x4c
 8025bbc:	681b      	ldr	r3, [r3, #0]
 8025bbe:	2b00      	cmp	r3, #0
 8025bc0:	f000 80d8 	beq.w	8025d74 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8025bc4:	687a      	ldr	r2, [r7, #4]
 8025bc6:	697b      	ldr	r3, [r7, #20]
 8025bc8:	212c      	movs	r1, #44	; 0x2c
 8025bca:	fb01 f303 	mul.w	r3, r1, r3
 8025bce:	4413      	add	r3, r2
 8025bd0:	334c      	adds	r3, #76	; 0x4c
 8025bd2:	681b      	ldr	r3, [r3, #0]
 8025bd4:	6879      	ldr	r1, [r7, #4]
 8025bd6:	697a      	ldr	r2, [r7, #20]
 8025bd8:	202c      	movs	r0, #44	; 0x2c
 8025bda:	fb00 f202 	mul.w	r2, r0, r2
 8025bde:	440a      	add	r2, r1
 8025be0:	3240      	adds	r2, #64	; 0x40
 8025be2:	8812      	ldrh	r2, [r2, #0]
 8025be4:	4413      	add	r3, r2
 8025be6:	3b01      	subs	r3, #1
 8025be8:	6879      	ldr	r1, [r7, #4]
 8025bea:	697a      	ldr	r2, [r7, #20]
 8025bec:	202c      	movs	r0, #44	; 0x2c
 8025bee:	fb00 f202 	mul.w	r2, r0, r2
 8025bf2:	440a      	add	r2, r1
 8025bf4:	3240      	adds	r2, #64	; 0x40
 8025bf6:	8812      	ldrh	r2, [r2, #0]
 8025bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8025bfc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8025bfe:	68fb      	ldr	r3, [r7, #12]
 8025c00:	f003 0301 	and.w	r3, r3, #1
 8025c04:	2b00      	cmp	r3, #0
 8025c06:	f000 80b5 	beq.w	8025d74 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8025c0a:	687a      	ldr	r2, [r7, #4]
 8025c0c:	697b      	ldr	r3, [r7, #20]
 8025c0e:	212c      	movs	r1, #44	; 0x2c
 8025c10:	fb01 f303 	mul.w	r3, r1, r3
 8025c14:	4413      	add	r3, r2
 8025c16:	3355      	adds	r3, #85	; 0x55
 8025c18:	781b      	ldrb	r3, [r3, #0]
 8025c1a:	f083 0301 	eor.w	r3, r3, #1
 8025c1e:	b2d8      	uxtb	r0, r3
 8025c20:	687a      	ldr	r2, [r7, #4]
 8025c22:	697b      	ldr	r3, [r7, #20]
 8025c24:	212c      	movs	r1, #44	; 0x2c
 8025c26:	fb01 f303 	mul.w	r3, r1, r3
 8025c2a:	4413      	add	r3, r2
 8025c2c:	3355      	adds	r3, #85	; 0x55
 8025c2e:	4602      	mov	r2, r0
 8025c30:	701a      	strb	r2, [r3, #0]
 8025c32:	e09f      	b.n	8025d74 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8025c34:	687a      	ldr	r2, [r7, #4]
 8025c36:	697b      	ldr	r3, [r7, #20]
 8025c38:	212c      	movs	r1, #44	; 0x2c
 8025c3a:	fb01 f303 	mul.w	r3, r1, r3
 8025c3e:	4413      	add	r3, r2
 8025c40:	3361      	adds	r3, #97	; 0x61
 8025c42:	781b      	ldrb	r3, [r3, #0]
 8025c44:	2b03      	cmp	r3, #3
 8025c46:	d109      	bne.n	8025c5c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025c48:	687a      	ldr	r2, [r7, #4]
 8025c4a:	697b      	ldr	r3, [r7, #20]
 8025c4c:	212c      	movs	r1, #44	; 0x2c
 8025c4e:	fb01 f303 	mul.w	r3, r1, r3
 8025c52:	4413      	add	r3, r2
 8025c54:	3360      	adds	r3, #96	; 0x60
 8025c56:	2202      	movs	r2, #2
 8025c58:	701a      	strb	r2, [r3, #0]
 8025c5a:	e08b      	b.n	8025d74 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8025c5c:	687a      	ldr	r2, [r7, #4]
 8025c5e:	697b      	ldr	r3, [r7, #20]
 8025c60:	212c      	movs	r1, #44	; 0x2c
 8025c62:	fb01 f303 	mul.w	r3, r1, r3
 8025c66:	4413      	add	r3, r2
 8025c68:	3361      	adds	r3, #97	; 0x61
 8025c6a:	781b      	ldrb	r3, [r3, #0]
 8025c6c:	2b04      	cmp	r3, #4
 8025c6e:	d109      	bne.n	8025c84 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8025c70:	687a      	ldr	r2, [r7, #4]
 8025c72:	697b      	ldr	r3, [r7, #20]
 8025c74:	212c      	movs	r1, #44	; 0x2c
 8025c76:	fb01 f303 	mul.w	r3, r1, r3
 8025c7a:	4413      	add	r3, r2
 8025c7c:	3360      	adds	r3, #96	; 0x60
 8025c7e:	2202      	movs	r2, #2
 8025c80:	701a      	strb	r2, [r3, #0]
 8025c82:	e077      	b.n	8025d74 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8025c84:	687a      	ldr	r2, [r7, #4]
 8025c86:	697b      	ldr	r3, [r7, #20]
 8025c88:	212c      	movs	r1, #44	; 0x2c
 8025c8a:	fb01 f303 	mul.w	r3, r1, r3
 8025c8e:	4413      	add	r3, r2
 8025c90:	3361      	adds	r3, #97	; 0x61
 8025c92:	781b      	ldrb	r3, [r3, #0]
 8025c94:	2b05      	cmp	r3, #5
 8025c96:	d109      	bne.n	8025cac <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8025c98:	687a      	ldr	r2, [r7, #4]
 8025c9a:	697b      	ldr	r3, [r7, #20]
 8025c9c:	212c      	movs	r1, #44	; 0x2c
 8025c9e:	fb01 f303 	mul.w	r3, r1, r3
 8025ca2:	4413      	add	r3, r2
 8025ca4:	3360      	adds	r3, #96	; 0x60
 8025ca6:	2205      	movs	r2, #5
 8025ca8:	701a      	strb	r2, [r3, #0]
 8025caa:	e063      	b.n	8025d74 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025cac:	687a      	ldr	r2, [r7, #4]
 8025cae:	697b      	ldr	r3, [r7, #20]
 8025cb0:	212c      	movs	r1, #44	; 0x2c
 8025cb2:	fb01 f303 	mul.w	r3, r1, r3
 8025cb6:	4413      	add	r3, r2
 8025cb8:	3361      	adds	r3, #97	; 0x61
 8025cba:	781b      	ldrb	r3, [r3, #0]
 8025cbc:	2b06      	cmp	r3, #6
 8025cbe:	d009      	beq.n	8025cd4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8025cc0:	687a      	ldr	r2, [r7, #4]
 8025cc2:	697b      	ldr	r3, [r7, #20]
 8025cc4:	212c      	movs	r1, #44	; 0x2c
 8025cc6:	fb01 f303 	mul.w	r3, r1, r3
 8025cca:	4413      	add	r3, r2
 8025ccc:	3361      	adds	r3, #97	; 0x61
 8025cce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025cd0:	2b08      	cmp	r3, #8
 8025cd2:	d14f      	bne.n	8025d74 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8025cd4:	687a      	ldr	r2, [r7, #4]
 8025cd6:	697b      	ldr	r3, [r7, #20]
 8025cd8:	212c      	movs	r1, #44	; 0x2c
 8025cda:	fb01 f303 	mul.w	r3, r1, r3
 8025cde:	4413      	add	r3, r2
 8025ce0:	335c      	adds	r3, #92	; 0x5c
 8025ce2:	681b      	ldr	r3, [r3, #0]
 8025ce4:	1c5a      	adds	r2, r3, #1
 8025ce6:	6879      	ldr	r1, [r7, #4]
 8025ce8:	697b      	ldr	r3, [r7, #20]
 8025cea:	202c      	movs	r0, #44	; 0x2c
 8025cec:	fb00 f303 	mul.w	r3, r0, r3
 8025cf0:	440b      	add	r3, r1
 8025cf2:	335c      	adds	r3, #92	; 0x5c
 8025cf4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025cf6:	687a      	ldr	r2, [r7, #4]
 8025cf8:	697b      	ldr	r3, [r7, #20]
 8025cfa:	212c      	movs	r1, #44	; 0x2c
 8025cfc:	fb01 f303 	mul.w	r3, r1, r3
 8025d00:	4413      	add	r3, r2
 8025d02:	335c      	adds	r3, #92	; 0x5c
 8025d04:	681b      	ldr	r3, [r3, #0]
 8025d06:	2b02      	cmp	r3, #2
 8025d08:	d912      	bls.n	8025d30 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8025d0a:	687a      	ldr	r2, [r7, #4]
 8025d0c:	697b      	ldr	r3, [r7, #20]
 8025d0e:	212c      	movs	r1, #44	; 0x2c
 8025d10:	fb01 f303 	mul.w	r3, r1, r3
 8025d14:	4413      	add	r3, r2
 8025d16:	335c      	adds	r3, #92	; 0x5c
 8025d18:	2200      	movs	r2, #0
 8025d1a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025d1c:	687a      	ldr	r2, [r7, #4]
 8025d1e:	697b      	ldr	r3, [r7, #20]
 8025d20:	212c      	movs	r1, #44	; 0x2c
 8025d22:	fb01 f303 	mul.w	r3, r1, r3
 8025d26:	4413      	add	r3, r2
 8025d28:	3360      	adds	r3, #96	; 0x60
 8025d2a:	2204      	movs	r2, #4
 8025d2c:	701a      	strb	r2, [r3, #0]
 8025d2e:	e021      	b.n	8025d74 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025d30:	687a      	ldr	r2, [r7, #4]
 8025d32:	697b      	ldr	r3, [r7, #20]
 8025d34:	212c      	movs	r1, #44	; 0x2c
 8025d36:	fb01 f303 	mul.w	r3, r1, r3
 8025d3a:	4413      	add	r3, r2
 8025d3c:	3360      	adds	r3, #96	; 0x60
 8025d3e:	2202      	movs	r2, #2
 8025d40:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025d42:	697b      	ldr	r3, [r7, #20]
 8025d44:	015a      	lsls	r2, r3, #5
 8025d46:	69bb      	ldr	r3, [r7, #24]
 8025d48:	4413      	add	r3, r2
 8025d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d4e:	681b      	ldr	r3, [r3, #0]
 8025d50:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025d52:	693b      	ldr	r3, [r7, #16]
 8025d54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025d58:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025d5a:	693b      	ldr	r3, [r7, #16]
 8025d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025d60:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025d62:	697b      	ldr	r3, [r7, #20]
 8025d64:	015a      	lsls	r2, r3, #5
 8025d66:	69bb      	ldr	r3, [r7, #24]
 8025d68:	4413      	add	r3, r2
 8025d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d6e:	461a      	mov	r2, r3
 8025d70:	693b      	ldr	r3, [r7, #16]
 8025d72:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8025d74:	697b      	ldr	r3, [r7, #20]
 8025d76:	015a      	lsls	r2, r3, #5
 8025d78:	69bb      	ldr	r3, [r7, #24]
 8025d7a:	4413      	add	r3, r2
 8025d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d80:	461a      	mov	r2, r3
 8025d82:	2302      	movs	r3, #2
 8025d84:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025d86:	697b      	ldr	r3, [r7, #20]
 8025d88:	b2d9      	uxtb	r1, r3
 8025d8a:	687a      	ldr	r2, [r7, #4]
 8025d8c:	697b      	ldr	r3, [r7, #20]
 8025d8e:	202c      	movs	r0, #44	; 0x2c
 8025d90:	fb00 f303 	mul.w	r3, r0, r3
 8025d94:	4413      	add	r3, r2
 8025d96:	3360      	adds	r3, #96	; 0x60
 8025d98:	781b      	ldrb	r3, [r3, #0]
 8025d9a:	461a      	mov	r2, r3
 8025d9c:	6878      	ldr	r0, [r7, #4]
 8025d9e:	f007 fae1 	bl	802d364 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8025da2:	bf00      	nop
 8025da4:	3720      	adds	r7, #32
 8025da6:	46bd      	mov	sp, r7
 8025da8:	bd80      	pop	{r7, pc}

08025daa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8025daa:	b580      	push	{r7, lr}
 8025dac:	b08a      	sub	sp, #40	; 0x28
 8025dae:	af00      	add	r7, sp, #0
 8025db0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025db2:	687b      	ldr	r3, [r7, #4]
 8025db4:	681b      	ldr	r3, [r3, #0]
 8025db6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025dba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8025dbc:	687b      	ldr	r3, [r7, #4]
 8025dbe:	681b      	ldr	r3, [r3, #0]
 8025dc0:	6a1b      	ldr	r3, [r3, #32]
 8025dc2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8025dc4:	69fb      	ldr	r3, [r7, #28]
 8025dc6:	f003 030f 	and.w	r3, r3, #15
 8025dca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8025dcc:	69fb      	ldr	r3, [r7, #28]
 8025dce:	0c5b      	lsrs	r3, r3, #17
 8025dd0:	f003 030f 	and.w	r3, r3, #15
 8025dd4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8025dd6:	69fb      	ldr	r3, [r7, #28]
 8025dd8:	091b      	lsrs	r3, r3, #4
 8025dda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8025dde:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8025de0:	697b      	ldr	r3, [r7, #20]
 8025de2:	2b02      	cmp	r3, #2
 8025de4:	d004      	beq.n	8025df0 <HCD_RXQLVL_IRQHandler+0x46>
 8025de6:	697b      	ldr	r3, [r7, #20]
 8025de8:	2b05      	cmp	r3, #5
 8025dea:	f000 80a9 	beq.w	8025f40 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8025dee:	e0aa      	b.n	8025f46 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8025df0:	693b      	ldr	r3, [r7, #16]
 8025df2:	2b00      	cmp	r3, #0
 8025df4:	f000 80a6 	beq.w	8025f44 <HCD_RXQLVL_IRQHandler+0x19a>
 8025df8:	687a      	ldr	r2, [r7, #4]
 8025dfa:	69bb      	ldr	r3, [r7, #24]
 8025dfc:	212c      	movs	r1, #44	; 0x2c
 8025dfe:	fb01 f303 	mul.w	r3, r1, r3
 8025e02:	4413      	add	r3, r2
 8025e04:	3344      	adds	r3, #68	; 0x44
 8025e06:	681b      	ldr	r3, [r3, #0]
 8025e08:	2b00      	cmp	r3, #0
 8025e0a:	f000 809b 	beq.w	8025f44 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8025e0e:	687a      	ldr	r2, [r7, #4]
 8025e10:	69bb      	ldr	r3, [r7, #24]
 8025e12:	212c      	movs	r1, #44	; 0x2c
 8025e14:	fb01 f303 	mul.w	r3, r1, r3
 8025e18:	4413      	add	r3, r2
 8025e1a:	3350      	adds	r3, #80	; 0x50
 8025e1c:	681a      	ldr	r2, [r3, #0]
 8025e1e:	693b      	ldr	r3, [r7, #16]
 8025e20:	441a      	add	r2, r3
 8025e22:	6879      	ldr	r1, [r7, #4]
 8025e24:	69bb      	ldr	r3, [r7, #24]
 8025e26:	202c      	movs	r0, #44	; 0x2c
 8025e28:	fb00 f303 	mul.w	r3, r0, r3
 8025e2c:	440b      	add	r3, r1
 8025e2e:	334c      	adds	r3, #76	; 0x4c
 8025e30:	681b      	ldr	r3, [r3, #0]
 8025e32:	429a      	cmp	r2, r3
 8025e34:	d87a      	bhi.n	8025f2c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8025e36:	687b      	ldr	r3, [r7, #4]
 8025e38:	6818      	ldr	r0, [r3, #0]
 8025e3a:	687a      	ldr	r2, [r7, #4]
 8025e3c:	69bb      	ldr	r3, [r7, #24]
 8025e3e:	212c      	movs	r1, #44	; 0x2c
 8025e40:	fb01 f303 	mul.w	r3, r1, r3
 8025e44:	4413      	add	r3, r2
 8025e46:	3344      	adds	r3, #68	; 0x44
 8025e48:	681b      	ldr	r3, [r3, #0]
 8025e4a:	693a      	ldr	r2, [r7, #16]
 8025e4c:	b292      	uxth	r2, r2
 8025e4e:	4619      	mov	r1, r3
 8025e50:	f004 fb40 	bl	802a4d4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8025e54:	687a      	ldr	r2, [r7, #4]
 8025e56:	69bb      	ldr	r3, [r7, #24]
 8025e58:	212c      	movs	r1, #44	; 0x2c
 8025e5a:	fb01 f303 	mul.w	r3, r1, r3
 8025e5e:	4413      	add	r3, r2
 8025e60:	3344      	adds	r3, #68	; 0x44
 8025e62:	681a      	ldr	r2, [r3, #0]
 8025e64:	693b      	ldr	r3, [r7, #16]
 8025e66:	441a      	add	r2, r3
 8025e68:	6879      	ldr	r1, [r7, #4]
 8025e6a:	69bb      	ldr	r3, [r7, #24]
 8025e6c:	202c      	movs	r0, #44	; 0x2c
 8025e6e:	fb00 f303 	mul.w	r3, r0, r3
 8025e72:	440b      	add	r3, r1
 8025e74:	3344      	adds	r3, #68	; 0x44
 8025e76:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8025e78:	687a      	ldr	r2, [r7, #4]
 8025e7a:	69bb      	ldr	r3, [r7, #24]
 8025e7c:	212c      	movs	r1, #44	; 0x2c
 8025e7e:	fb01 f303 	mul.w	r3, r1, r3
 8025e82:	4413      	add	r3, r2
 8025e84:	3350      	adds	r3, #80	; 0x50
 8025e86:	681a      	ldr	r2, [r3, #0]
 8025e88:	693b      	ldr	r3, [r7, #16]
 8025e8a:	441a      	add	r2, r3
 8025e8c:	6879      	ldr	r1, [r7, #4]
 8025e8e:	69bb      	ldr	r3, [r7, #24]
 8025e90:	202c      	movs	r0, #44	; 0x2c
 8025e92:	fb00 f303 	mul.w	r3, r0, r3
 8025e96:	440b      	add	r3, r1
 8025e98:	3350      	adds	r3, #80	; 0x50
 8025e9a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8025e9c:	69bb      	ldr	r3, [r7, #24]
 8025e9e:	015a      	lsls	r2, r3, #5
 8025ea0:	6a3b      	ldr	r3, [r7, #32]
 8025ea2:	4413      	add	r3, r2
 8025ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ea8:	691b      	ldr	r3, [r3, #16]
 8025eaa:	0cdb      	lsrs	r3, r3, #19
 8025eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8025eb0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8025eb2:	687a      	ldr	r2, [r7, #4]
 8025eb4:	69bb      	ldr	r3, [r7, #24]
 8025eb6:	212c      	movs	r1, #44	; 0x2c
 8025eb8:	fb01 f303 	mul.w	r3, r1, r3
 8025ebc:	4413      	add	r3, r2
 8025ebe:	3340      	adds	r3, #64	; 0x40
 8025ec0:	881b      	ldrh	r3, [r3, #0]
 8025ec2:	461a      	mov	r2, r3
 8025ec4:	693b      	ldr	r3, [r7, #16]
 8025ec6:	4293      	cmp	r3, r2
 8025ec8:	d13c      	bne.n	8025f44 <HCD_RXQLVL_IRQHandler+0x19a>
 8025eca:	68fb      	ldr	r3, [r7, #12]
 8025ecc:	2b00      	cmp	r3, #0
 8025ece:	d039      	beq.n	8025f44 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025ed0:	69bb      	ldr	r3, [r7, #24]
 8025ed2:	015a      	lsls	r2, r3, #5
 8025ed4:	6a3b      	ldr	r3, [r7, #32]
 8025ed6:	4413      	add	r3, r2
 8025ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025edc:	681b      	ldr	r3, [r3, #0]
 8025ede:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025ee0:	68bb      	ldr	r3, [r7, #8]
 8025ee2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025ee6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025ee8:	68bb      	ldr	r3, [r7, #8]
 8025eea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025eee:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025ef0:	69bb      	ldr	r3, [r7, #24]
 8025ef2:	015a      	lsls	r2, r3, #5
 8025ef4:	6a3b      	ldr	r3, [r7, #32]
 8025ef6:	4413      	add	r3, r2
 8025ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025efc:	461a      	mov	r2, r3
 8025efe:	68bb      	ldr	r3, [r7, #8]
 8025f00:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8025f02:	687a      	ldr	r2, [r7, #4]
 8025f04:	69bb      	ldr	r3, [r7, #24]
 8025f06:	212c      	movs	r1, #44	; 0x2c
 8025f08:	fb01 f303 	mul.w	r3, r1, r3
 8025f0c:	4413      	add	r3, r2
 8025f0e:	3354      	adds	r3, #84	; 0x54
 8025f10:	781b      	ldrb	r3, [r3, #0]
 8025f12:	f083 0301 	eor.w	r3, r3, #1
 8025f16:	b2d8      	uxtb	r0, r3
 8025f18:	687a      	ldr	r2, [r7, #4]
 8025f1a:	69bb      	ldr	r3, [r7, #24]
 8025f1c:	212c      	movs	r1, #44	; 0x2c
 8025f1e:	fb01 f303 	mul.w	r3, r1, r3
 8025f22:	4413      	add	r3, r2
 8025f24:	3354      	adds	r3, #84	; 0x54
 8025f26:	4602      	mov	r2, r0
 8025f28:	701a      	strb	r2, [r3, #0]
      break;
 8025f2a:	e00b      	b.n	8025f44 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025f2c:	687a      	ldr	r2, [r7, #4]
 8025f2e:	69bb      	ldr	r3, [r7, #24]
 8025f30:	212c      	movs	r1, #44	; 0x2c
 8025f32:	fb01 f303 	mul.w	r3, r1, r3
 8025f36:	4413      	add	r3, r2
 8025f38:	3360      	adds	r3, #96	; 0x60
 8025f3a:	2204      	movs	r2, #4
 8025f3c:	701a      	strb	r2, [r3, #0]
      break;
 8025f3e:	e001      	b.n	8025f44 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8025f40:	bf00      	nop
 8025f42:	e000      	b.n	8025f46 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8025f44:	bf00      	nop
  }
}
 8025f46:	bf00      	nop
 8025f48:	3728      	adds	r7, #40	; 0x28
 8025f4a:	46bd      	mov	sp, r7
 8025f4c:	bd80      	pop	{r7, pc}

08025f4e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8025f4e:	b580      	push	{r7, lr}
 8025f50:	b086      	sub	sp, #24
 8025f52:	af00      	add	r7, sp, #0
 8025f54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025f56:	687b      	ldr	r3, [r7, #4]
 8025f58:	681b      	ldr	r3, [r3, #0]
 8025f5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025f5c:	697b      	ldr	r3, [r7, #20]
 8025f5e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8025f60:	693b      	ldr	r3, [r7, #16]
 8025f62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025f66:	681b      	ldr	r3, [r3, #0]
 8025f68:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8025f6a:	693b      	ldr	r3, [r7, #16]
 8025f6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025f70:	681b      	ldr	r3, [r3, #0]
 8025f72:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8025f74:	68bb      	ldr	r3, [r7, #8]
 8025f76:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8025f7a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8025f7c:	68fb      	ldr	r3, [r7, #12]
 8025f7e:	f003 0302 	and.w	r3, r3, #2
 8025f82:	2b02      	cmp	r3, #2
 8025f84:	d10b      	bne.n	8025f9e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8025f86:	68fb      	ldr	r3, [r7, #12]
 8025f88:	f003 0301 	and.w	r3, r3, #1
 8025f8c:	2b01      	cmp	r3, #1
 8025f8e:	d102      	bne.n	8025f96 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8025f90:	6878      	ldr	r0, [r7, #4]
 8025f92:	f007 f9cb 	bl	802d32c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8025f96:	68bb      	ldr	r3, [r7, #8]
 8025f98:	f043 0302 	orr.w	r3, r3, #2
 8025f9c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8025f9e:	68fb      	ldr	r3, [r7, #12]
 8025fa0:	f003 0308 	and.w	r3, r3, #8
 8025fa4:	2b08      	cmp	r3, #8
 8025fa6:	d132      	bne.n	802600e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8025fa8:	68bb      	ldr	r3, [r7, #8]
 8025faa:	f043 0308 	orr.w	r3, r3, #8
 8025fae:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8025fb0:	68fb      	ldr	r3, [r7, #12]
 8025fb2:	f003 0304 	and.w	r3, r3, #4
 8025fb6:	2b04      	cmp	r3, #4
 8025fb8:	d126      	bne.n	8026008 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8025fba:	687b      	ldr	r3, [r7, #4]
 8025fbc:	699b      	ldr	r3, [r3, #24]
 8025fbe:	2b02      	cmp	r3, #2
 8025fc0:	d113      	bne.n	8025fea <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8025fc2:	68fb      	ldr	r3, [r7, #12]
 8025fc4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8025fc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8025fcc:	d106      	bne.n	8025fdc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8025fce:	687b      	ldr	r3, [r7, #4]
 8025fd0:	681b      	ldr	r3, [r3, #0]
 8025fd2:	2102      	movs	r1, #2
 8025fd4:	4618      	mov	r0, r3
 8025fd6:	f004 fbeb 	bl	802a7b0 <USB_InitFSLSPClkSel>
 8025fda:	e011      	b.n	8026000 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8025fdc:	687b      	ldr	r3, [r7, #4]
 8025fde:	681b      	ldr	r3, [r3, #0]
 8025fe0:	2101      	movs	r1, #1
 8025fe2:	4618      	mov	r0, r3
 8025fe4:	f004 fbe4 	bl	802a7b0 <USB_InitFSLSPClkSel>
 8025fe8:	e00a      	b.n	8026000 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8025fea:	687b      	ldr	r3, [r7, #4]
 8025fec:	68db      	ldr	r3, [r3, #12]
 8025fee:	2b01      	cmp	r3, #1
 8025ff0:	d106      	bne.n	8026000 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8025ff2:	693b      	ldr	r3, [r7, #16]
 8025ff4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8025ff8:	461a      	mov	r2, r3
 8025ffa:	f64e 2360 	movw	r3, #60000	; 0xea60
 8025ffe:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8026000:	6878      	ldr	r0, [r7, #4]
 8026002:	f007 f9bd 	bl	802d380 <HAL_HCD_PortEnabled_Callback>
 8026006:	e002      	b.n	802600e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8026008:	6878      	ldr	r0, [r7, #4]
 802600a:	f007 f9c7 	bl	802d39c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 802600e:	68fb      	ldr	r3, [r7, #12]
 8026010:	f003 0320 	and.w	r3, r3, #32
 8026014:	2b20      	cmp	r3, #32
 8026016:	d103      	bne.n	8026020 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8026018:	68bb      	ldr	r3, [r7, #8]
 802601a:	f043 0320 	orr.w	r3, r3, #32
 802601e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8026020:	693b      	ldr	r3, [r7, #16]
 8026022:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8026026:	461a      	mov	r2, r3
 8026028:	68bb      	ldr	r3, [r7, #8]
 802602a:	6013      	str	r3, [r2, #0]
}
 802602c:	bf00      	nop
 802602e:	3718      	adds	r7, #24
 8026030:	46bd      	mov	sp, r7
 8026032:	bd80      	pop	{r7, pc}

08026034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8026034:	b580      	push	{r7, lr}
 8026036:	b084      	sub	sp, #16
 8026038:	af00      	add	r7, sp, #0
 802603a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802603c:	687b      	ldr	r3, [r7, #4]
 802603e:	2b00      	cmp	r3, #0
 8026040:	d101      	bne.n	8026046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8026042:	2301      	movs	r3, #1
 8026044:	e12b      	b.n	802629e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8026046:	687b      	ldr	r3, [r7, #4]
 8026048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802604c:	b2db      	uxtb	r3, r3
 802604e:	2b00      	cmp	r3, #0
 8026050:	d106      	bne.n	8026060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8026052:	687b      	ldr	r3, [r7, #4]
 8026054:	2200      	movs	r2, #0
 8026056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 802605a:	6878      	ldr	r0, [r7, #4]
 802605c:	f7fb fa92 	bl	8021584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8026060:	687b      	ldr	r3, [r7, #4]
 8026062:	2224      	movs	r2, #36	; 0x24
 8026064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8026068:	687b      	ldr	r3, [r7, #4]
 802606a:	681b      	ldr	r3, [r3, #0]
 802606c:	681a      	ldr	r2, [r3, #0]
 802606e:	687b      	ldr	r3, [r7, #4]
 8026070:	681b      	ldr	r3, [r3, #0]
 8026072:	f022 0201 	bic.w	r2, r2, #1
 8026076:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8026078:	687b      	ldr	r3, [r7, #4]
 802607a:	681b      	ldr	r3, [r3, #0]
 802607c:	681a      	ldr	r2, [r3, #0]
 802607e:	687b      	ldr	r3, [r7, #4]
 8026080:	681b      	ldr	r3, [r3, #0]
 8026082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8026086:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8026088:	687b      	ldr	r3, [r7, #4]
 802608a:	681b      	ldr	r3, [r3, #0]
 802608c:	681a      	ldr	r2, [r3, #0]
 802608e:	687b      	ldr	r3, [r7, #4]
 8026090:	681b      	ldr	r3, [r3, #0]
 8026092:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8026096:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8026098:	f001 fa0c 	bl	80274b4 <HAL_RCC_GetPCLK1Freq>
 802609c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 802609e:	687b      	ldr	r3, [r7, #4]
 80260a0:	685b      	ldr	r3, [r3, #4]
 80260a2:	4a81      	ldr	r2, [pc, #516]	; (80262a8 <HAL_I2C_Init+0x274>)
 80260a4:	4293      	cmp	r3, r2
 80260a6:	d807      	bhi.n	80260b8 <HAL_I2C_Init+0x84>
 80260a8:	68fb      	ldr	r3, [r7, #12]
 80260aa:	4a80      	ldr	r2, [pc, #512]	; (80262ac <HAL_I2C_Init+0x278>)
 80260ac:	4293      	cmp	r3, r2
 80260ae:	bf94      	ite	ls
 80260b0:	2301      	movls	r3, #1
 80260b2:	2300      	movhi	r3, #0
 80260b4:	b2db      	uxtb	r3, r3
 80260b6:	e006      	b.n	80260c6 <HAL_I2C_Init+0x92>
 80260b8:	68fb      	ldr	r3, [r7, #12]
 80260ba:	4a7d      	ldr	r2, [pc, #500]	; (80262b0 <HAL_I2C_Init+0x27c>)
 80260bc:	4293      	cmp	r3, r2
 80260be:	bf94      	ite	ls
 80260c0:	2301      	movls	r3, #1
 80260c2:	2300      	movhi	r3, #0
 80260c4:	b2db      	uxtb	r3, r3
 80260c6:	2b00      	cmp	r3, #0
 80260c8:	d001      	beq.n	80260ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80260ca:	2301      	movs	r3, #1
 80260cc:	e0e7      	b.n	802629e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80260ce:	68fb      	ldr	r3, [r7, #12]
 80260d0:	4a78      	ldr	r2, [pc, #480]	; (80262b4 <HAL_I2C_Init+0x280>)
 80260d2:	fba2 2303 	umull	r2, r3, r2, r3
 80260d6:	0c9b      	lsrs	r3, r3, #18
 80260d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80260da:	687b      	ldr	r3, [r7, #4]
 80260dc:	681b      	ldr	r3, [r3, #0]
 80260de:	685b      	ldr	r3, [r3, #4]
 80260e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80260e4:	687b      	ldr	r3, [r7, #4]
 80260e6:	681b      	ldr	r3, [r3, #0]
 80260e8:	68ba      	ldr	r2, [r7, #8]
 80260ea:	430a      	orrs	r2, r1
 80260ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80260ee:	687b      	ldr	r3, [r7, #4]
 80260f0:	681b      	ldr	r3, [r3, #0]
 80260f2:	6a1b      	ldr	r3, [r3, #32]
 80260f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80260f8:	687b      	ldr	r3, [r7, #4]
 80260fa:	685b      	ldr	r3, [r3, #4]
 80260fc:	4a6a      	ldr	r2, [pc, #424]	; (80262a8 <HAL_I2C_Init+0x274>)
 80260fe:	4293      	cmp	r3, r2
 8026100:	d802      	bhi.n	8026108 <HAL_I2C_Init+0xd4>
 8026102:	68bb      	ldr	r3, [r7, #8]
 8026104:	3301      	adds	r3, #1
 8026106:	e009      	b.n	802611c <HAL_I2C_Init+0xe8>
 8026108:	68bb      	ldr	r3, [r7, #8]
 802610a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 802610e:	fb02 f303 	mul.w	r3, r2, r3
 8026112:	4a69      	ldr	r2, [pc, #420]	; (80262b8 <HAL_I2C_Init+0x284>)
 8026114:	fba2 2303 	umull	r2, r3, r2, r3
 8026118:	099b      	lsrs	r3, r3, #6
 802611a:	3301      	adds	r3, #1
 802611c:	687a      	ldr	r2, [r7, #4]
 802611e:	6812      	ldr	r2, [r2, #0]
 8026120:	430b      	orrs	r3, r1
 8026122:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8026124:	687b      	ldr	r3, [r7, #4]
 8026126:	681b      	ldr	r3, [r3, #0]
 8026128:	69db      	ldr	r3, [r3, #28]
 802612a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 802612e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8026132:	687b      	ldr	r3, [r7, #4]
 8026134:	685b      	ldr	r3, [r3, #4]
 8026136:	495c      	ldr	r1, [pc, #368]	; (80262a8 <HAL_I2C_Init+0x274>)
 8026138:	428b      	cmp	r3, r1
 802613a:	d819      	bhi.n	8026170 <HAL_I2C_Init+0x13c>
 802613c:	68fb      	ldr	r3, [r7, #12]
 802613e:	1e59      	subs	r1, r3, #1
 8026140:	687b      	ldr	r3, [r7, #4]
 8026142:	685b      	ldr	r3, [r3, #4]
 8026144:	005b      	lsls	r3, r3, #1
 8026146:	fbb1 f3f3 	udiv	r3, r1, r3
 802614a:	1c59      	adds	r1, r3, #1
 802614c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8026150:	400b      	ands	r3, r1
 8026152:	2b00      	cmp	r3, #0
 8026154:	d00a      	beq.n	802616c <HAL_I2C_Init+0x138>
 8026156:	68fb      	ldr	r3, [r7, #12]
 8026158:	1e59      	subs	r1, r3, #1
 802615a:	687b      	ldr	r3, [r7, #4]
 802615c:	685b      	ldr	r3, [r3, #4]
 802615e:	005b      	lsls	r3, r3, #1
 8026160:	fbb1 f3f3 	udiv	r3, r1, r3
 8026164:	3301      	adds	r3, #1
 8026166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802616a:	e051      	b.n	8026210 <HAL_I2C_Init+0x1dc>
 802616c:	2304      	movs	r3, #4
 802616e:	e04f      	b.n	8026210 <HAL_I2C_Init+0x1dc>
 8026170:	687b      	ldr	r3, [r7, #4]
 8026172:	689b      	ldr	r3, [r3, #8]
 8026174:	2b00      	cmp	r3, #0
 8026176:	d111      	bne.n	802619c <HAL_I2C_Init+0x168>
 8026178:	68fb      	ldr	r3, [r7, #12]
 802617a:	1e58      	subs	r0, r3, #1
 802617c:	687b      	ldr	r3, [r7, #4]
 802617e:	6859      	ldr	r1, [r3, #4]
 8026180:	460b      	mov	r3, r1
 8026182:	005b      	lsls	r3, r3, #1
 8026184:	440b      	add	r3, r1
 8026186:	fbb0 f3f3 	udiv	r3, r0, r3
 802618a:	3301      	adds	r3, #1
 802618c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026190:	2b00      	cmp	r3, #0
 8026192:	bf0c      	ite	eq
 8026194:	2301      	moveq	r3, #1
 8026196:	2300      	movne	r3, #0
 8026198:	b2db      	uxtb	r3, r3
 802619a:	e012      	b.n	80261c2 <HAL_I2C_Init+0x18e>
 802619c:	68fb      	ldr	r3, [r7, #12]
 802619e:	1e58      	subs	r0, r3, #1
 80261a0:	687b      	ldr	r3, [r7, #4]
 80261a2:	6859      	ldr	r1, [r3, #4]
 80261a4:	460b      	mov	r3, r1
 80261a6:	009b      	lsls	r3, r3, #2
 80261a8:	440b      	add	r3, r1
 80261aa:	0099      	lsls	r1, r3, #2
 80261ac:	440b      	add	r3, r1
 80261ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80261b2:	3301      	adds	r3, #1
 80261b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80261b8:	2b00      	cmp	r3, #0
 80261ba:	bf0c      	ite	eq
 80261bc:	2301      	moveq	r3, #1
 80261be:	2300      	movne	r3, #0
 80261c0:	b2db      	uxtb	r3, r3
 80261c2:	2b00      	cmp	r3, #0
 80261c4:	d001      	beq.n	80261ca <HAL_I2C_Init+0x196>
 80261c6:	2301      	movs	r3, #1
 80261c8:	e022      	b.n	8026210 <HAL_I2C_Init+0x1dc>
 80261ca:	687b      	ldr	r3, [r7, #4]
 80261cc:	689b      	ldr	r3, [r3, #8]
 80261ce:	2b00      	cmp	r3, #0
 80261d0:	d10e      	bne.n	80261f0 <HAL_I2C_Init+0x1bc>
 80261d2:	68fb      	ldr	r3, [r7, #12]
 80261d4:	1e58      	subs	r0, r3, #1
 80261d6:	687b      	ldr	r3, [r7, #4]
 80261d8:	6859      	ldr	r1, [r3, #4]
 80261da:	460b      	mov	r3, r1
 80261dc:	005b      	lsls	r3, r3, #1
 80261de:	440b      	add	r3, r1
 80261e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80261e4:	3301      	adds	r3, #1
 80261e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80261ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80261ee:	e00f      	b.n	8026210 <HAL_I2C_Init+0x1dc>
 80261f0:	68fb      	ldr	r3, [r7, #12]
 80261f2:	1e58      	subs	r0, r3, #1
 80261f4:	687b      	ldr	r3, [r7, #4]
 80261f6:	6859      	ldr	r1, [r3, #4]
 80261f8:	460b      	mov	r3, r1
 80261fa:	009b      	lsls	r3, r3, #2
 80261fc:	440b      	add	r3, r1
 80261fe:	0099      	lsls	r1, r3, #2
 8026200:	440b      	add	r3, r1
 8026202:	fbb0 f3f3 	udiv	r3, r0, r3
 8026206:	3301      	adds	r3, #1
 8026208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802620c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8026210:	6879      	ldr	r1, [r7, #4]
 8026212:	6809      	ldr	r1, [r1, #0]
 8026214:	4313      	orrs	r3, r2
 8026216:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8026218:	687b      	ldr	r3, [r7, #4]
 802621a:	681b      	ldr	r3, [r3, #0]
 802621c:	681b      	ldr	r3, [r3, #0]
 802621e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8026222:	687b      	ldr	r3, [r7, #4]
 8026224:	69da      	ldr	r2, [r3, #28]
 8026226:	687b      	ldr	r3, [r7, #4]
 8026228:	6a1b      	ldr	r3, [r3, #32]
 802622a:	431a      	orrs	r2, r3
 802622c:	687b      	ldr	r3, [r7, #4]
 802622e:	681b      	ldr	r3, [r3, #0]
 8026230:	430a      	orrs	r2, r1
 8026232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8026234:	687b      	ldr	r3, [r7, #4]
 8026236:	681b      	ldr	r3, [r3, #0]
 8026238:	689b      	ldr	r3, [r3, #8]
 802623a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 802623e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8026242:	687a      	ldr	r2, [r7, #4]
 8026244:	6911      	ldr	r1, [r2, #16]
 8026246:	687a      	ldr	r2, [r7, #4]
 8026248:	68d2      	ldr	r2, [r2, #12]
 802624a:	4311      	orrs	r1, r2
 802624c:	687a      	ldr	r2, [r7, #4]
 802624e:	6812      	ldr	r2, [r2, #0]
 8026250:	430b      	orrs	r3, r1
 8026252:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8026254:	687b      	ldr	r3, [r7, #4]
 8026256:	681b      	ldr	r3, [r3, #0]
 8026258:	68db      	ldr	r3, [r3, #12]
 802625a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 802625e:	687b      	ldr	r3, [r7, #4]
 8026260:	695a      	ldr	r2, [r3, #20]
 8026262:	687b      	ldr	r3, [r7, #4]
 8026264:	699b      	ldr	r3, [r3, #24]
 8026266:	431a      	orrs	r2, r3
 8026268:	687b      	ldr	r3, [r7, #4]
 802626a:	681b      	ldr	r3, [r3, #0]
 802626c:	430a      	orrs	r2, r1
 802626e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8026270:	687b      	ldr	r3, [r7, #4]
 8026272:	681b      	ldr	r3, [r3, #0]
 8026274:	681a      	ldr	r2, [r3, #0]
 8026276:	687b      	ldr	r3, [r7, #4]
 8026278:	681b      	ldr	r3, [r3, #0]
 802627a:	f042 0201 	orr.w	r2, r2, #1
 802627e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8026280:	687b      	ldr	r3, [r7, #4]
 8026282:	2200      	movs	r2, #0
 8026284:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8026286:	687b      	ldr	r3, [r7, #4]
 8026288:	2220      	movs	r2, #32
 802628a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 802628e:	687b      	ldr	r3, [r7, #4]
 8026290:	2200      	movs	r2, #0
 8026292:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8026294:	687b      	ldr	r3, [r7, #4]
 8026296:	2200      	movs	r2, #0
 8026298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 802629c:	2300      	movs	r3, #0
}
 802629e:	4618      	mov	r0, r3
 80262a0:	3710      	adds	r7, #16
 80262a2:	46bd      	mov	sp, r7
 80262a4:	bd80      	pop	{r7, pc}
 80262a6:	bf00      	nop
 80262a8:	000186a0 	.word	0x000186a0
 80262ac:	001e847f 	.word	0x001e847f
 80262b0:	003d08ff 	.word	0x003d08ff
 80262b4:	431bde83 	.word	0x431bde83
 80262b8:	10624dd3 	.word	0x10624dd3

080262bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80262bc:	b480      	push	{r7}
 80262be:	b083      	sub	sp, #12
 80262c0:	af00      	add	r7, sp, #0
 80262c2:	6078      	str	r0, [r7, #4]
 80262c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80262c6:	687b      	ldr	r3, [r7, #4]
 80262c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80262cc:	b2db      	uxtb	r3, r3
 80262ce:	2b20      	cmp	r3, #32
 80262d0:	d129      	bne.n	8026326 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80262d2:	687b      	ldr	r3, [r7, #4]
 80262d4:	2224      	movs	r2, #36	; 0x24
 80262d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80262da:	687b      	ldr	r3, [r7, #4]
 80262dc:	681b      	ldr	r3, [r3, #0]
 80262de:	681a      	ldr	r2, [r3, #0]
 80262e0:	687b      	ldr	r3, [r7, #4]
 80262e2:	681b      	ldr	r3, [r3, #0]
 80262e4:	f022 0201 	bic.w	r2, r2, #1
 80262e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80262ea:	687b      	ldr	r3, [r7, #4]
 80262ec:	681b      	ldr	r3, [r3, #0]
 80262ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80262f0:	687b      	ldr	r3, [r7, #4]
 80262f2:	681b      	ldr	r3, [r3, #0]
 80262f4:	f022 0210 	bic.w	r2, r2, #16
 80262f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80262fa:	687b      	ldr	r3, [r7, #4]
 80262fc:	681b      	ldr	r3, [r3, #0]
 80262fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8026300:	687b      	ldr	r3, [r7, #4]
 8026302:	681b      	ldr	r3, [r3, #0]
 8026304:	683a      	ldr	r2, [r7, #0]
 8026306:	430a      	orrs	r2, r1
 8026308:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 802630a:	687b      	ldr	r3, [r7, #4]
 802630c:	681b      	ldr	r3, [r3, #0]
 802630e:	681a      	ldr	r2, [r3, #0]
 8026310:	687b      	ldr	r3, [r7, #4]
 8026312:	681b      	ldr	r3, [r3, #0]
 8026314:	f042 0201 	orr.w	r2, r2, #1
 8026318:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802631a:	687b      	ldr	r3, [r7, #4]
 802631c:	2220      	movs	r2, #32
 802631e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8026322:	2300      	movs	r3, #0
 8026324:	e000      	b.n	8026328 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8026326:	2302      	movs	r3, #2
  }
}
 8026328:	4618      	mov	r0, r3
 802632a:	370c      	adds	r7, #12
 802632c:	46bd      	mov	sp, r7
 802632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026332:	4770      	bx	lr

08026334 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8026334:	b480      	push	{r7}
 8026336:	b085      	sub	sp, #20
 8026338:	af00      	add	r7, sp, #0
 802633a:	6078      	str	r0, [r7, #4]
 802633c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 802633e:	2300      	movs	r3, #0
 8026340:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026342:	687b      	ldr	r3, [r7, #4]
 8026344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026348:	b2db      	uxtb	r3, r3
 802634a:	2b20      	cmp	r3, #32
 802634c:	d12a      	bne.n	80263a4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 802634e:	687b      	ldr	r3, [r7, #4]
 8026350:	2224      	movs	r2, #36	; 0x24
 8026352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026356:	687b      	ldr	r3, [r7, #4]
 8026358:	681b      	ldr	r3, [r3, #0]
 802635a:	681a      	ldr	r2, [r3, #0]
 802635c:	687b      	ldr	r3, [r7, #4]
 802635e:	681b      	ldr	r3, [r3, #0]
 8026360:	f022 0201 	bic.w	r2, r2, #1
 8026364:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8026366:	687b      	ldr	r3, [r7, #4]
 8026368:	681b      	ldr	r3, [r3, #0]
 802636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802636c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 802636e:	89fb      	ldrh	r3, [r7, #14]
 8026370:	f023 030f 	bic.w	r3, r3, #15
 8026374:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8026376:	683b      	ldr	r3, [r7, #0]
 8026378:	b29a      	uxth	r2, r3
 802637a:	89fb      	ldrh	r3, [r7, #14]
 802637c:	4313      	orrs	r3, r2
 802637e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8026380:	687b      	ldr	r3, [r7, #4]
 8026382:	681b      	ldr	r3, [r3, #0]
 8026384:	89fa      	ldrh	r2, [r7, #14]
 8026386:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8026388:	687b      	ldr	r3, [r7, #4]
 802638a:	681b      	ldr	r3, [r3, #0]
 802638c:	681a      	ldr	r2, [r3, #0]
 802638e:	687b      	ldr	r3, [r7, #4]
 8026390:	681b      	ldr	r3, [r3, #0]
 8026392:	f042 0201 	orr.w	r2, r2, #1
 8026396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026398:	687b      	ldr	r3, [r7, #4]
 802639a:	2220      	movs	r2, #32
 802639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80263a0:	2300      	movs	r3, #0
 80263a2:	e000      	b.n	80263a6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80263a4:	2302      	movs	r3, #2
  }
}
 80263a6:	4618      	mov	r0, r3
 80263a8:	3714      	adds	r7, #20
 80263aa:	46bd      	mov	sp, r7
 80263ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263b0:	4770      	bx	lr
	...

080263b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80263b4:	b580      	push	{r7, lr}
 80263b6:	b084      	sub	sp, #16
 80263b8:	af00      	add	r7, sp, #0
 80263ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80263bc:	687b      	ldr	r3, [r7, #4]
 80263be:	2b00      	cmp	r3, #0
 80263c0:	d101      	bne.n	80263c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80263c2:	2301      	movs	r3, #1
 80263c4:	e0bf      	b.n	8026546 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80263c6:	687b      	ldr	r3, [r7, #4]
 80263c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80263cc:	b2db      	uxtb	r3, r3
 80263ce:	2b00      	cmp	r3, #0
 80263d0:	d106      	bne.n	80263e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80263d2:	687b      	ldr	r3, [r7, #4]
 80263d4:	2200      	movs	r2, #0
 80263d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80263da:	6878      	ldr	r0, [r7, #4]
 80263dc:	f7fb f93c 	bl	8021658 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80263e0:	687b      	ldr	r3, [r7, #4]
 80263e2:	2202      	movs	r2, #2
 80263e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80263e8:	687b      	ldr	r3, [r7, #4]
 80263ea:	681b      	ldr	r3, [r3, #0]
 80263ec:	699a      	ldr	r2, [r3, #24]
 80263ee:	687b      	ldr	r3, [r7, #4]
 80263f0:	681b      	ldr	r3, [r3, #0]
 80263f2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80263f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80263f8:	687b      	ldr	r3, [r7, #4]
 80263fa:	681b      	ldr	r3, [r3, #0]
 80263fc:	6999      	ldr	r1, [r3, #24]
 80263fe:	687b      	ldr	r3, [r7, #4]
 8026400:	685a      	ldr	r2, [r3, #4]
 8026402:	687b      	ldr	r3, [r7, #4]
 8026404:	689b      	ldr	r3, [r3, #8]
 8026406:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8026408:	687b      	ldr	r3, [r7, #4]
 802640a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 802640c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 802640e:	687b      	ldr	r3, [r7, #4]
 8026410:	691b      	ldr	r3, [r3, #16]
 8026412:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026414:	687b      	ldr	r3, [r7, #4]
 8026416:	681b      	ldr	r3, [r3, #0]
 8026418:	430a      	orrs	r2, r1
 802641a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 802641c:	687b      	ldr	r3, [r7, #4]
 802641e:	681b      	ldr	r3, [r3, #0]
 8026420:	6899      	ldr	r1, [r3, #8]
 8026422:	687b      	ldr	r3, [r7, #4]
 8026424:	681a      	ldr	r2, [r3, #0]
 8026426:	4b4a      	ldr	r3, [pc, #296]	; (8026550 <HAL_LTDC_Init+0x19c>)
 8026428:	400b      	ands	r3, r1
 802642a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 802642c:	687b      	ldr	r3, [r7, #4]
 802642e:	695b      	ldr	r3, [r3, #20]
 8026430:	041b      	lsls	r3, r3, #16
 8026432:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8026434:	687b      	ldr	r3, [r7, #4]
 8026436:	681b      	ldr	r3, [r3, #0]
 8026438:	6899      	ldr	r1, [r3, #8]
 802643a:	687b      	ldr	r3, [r7, #4]
 802643c:	699a      	ldr	r2, [r3, #24]
 802643e:	68fb      	ldr	r3, [r7, #12]
 8026440:	431a      	orrs	r2, r3
 8026442:	687b      	ldr	r3, [r7, #4]
 8026444:	681b      	ldr	r3, [r3, #0]
 8026446:	430a      	orrs	r2, r1
 8026448:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 802644a:	687b      	ldr	r3, [r7, #4]
 802644c:	681b      	ldr	r3, [r3, #0]
 802644e:	68d9      	ldr	r1, [r3, #12]
 8026450:	687b      	ldr	r3, [r7, #4]
 8026452:	681a      	ldr	r2, [r3, #0]
 8026454:	4b3e      	ldr	r3, [pc, #248]	; (8026550 <HAL_LTDC_Init+0x19c>)
 8026456:	400b      	ands	r3, r1
 8026458:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 802645a:	687b      	ldr	r3, [r7, #4]
 802645c:	69db      	ldr	r3, [r3, #28]
 802645e:	041b      	lsls	r3, r3, #16
 8026460:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8026462:	687b      	ldr	r3, [r7, #4]
 8026464:	681b      	ldr	r3, [r3, #0]
 8026466:	68d9      	ldr	r1, [r3, #12]
 8026468:	687b      	ldr	r3, [r7, #4]
 802646a:	6a1a      	ldr	r2, [r3, #32]
 802646c:	68fb      	ldr	r3, [r7, #12]
 802646e:	431a      	orrs	r2, r3
 8026470:	687b      	ldr	r3, [r7, #4]
 8026472:	681b      	ldr	r3, [r3, #0]
 8026474:	430a      	orrs	r2, r1
 8026476:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8026478:	687b      	ldr	r3, [r7, #4]
 802647a:	681b      	ldr	r3, [r3, #0]
 802647c:	6919      	ldr	r1, [r3, #16]
 802647e:	687b      	ldr	r3, [r7, #4]
 8026480:	681a      	ldr	r2, [r3, #0]
 8026482:	4b33      	ldr	r3, [pc, #204]	; (8026550 <HAL_LTDC_Init+0x19c>)
 8026484:	400b      	ands	r3, r1
 8026486:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8026488:	687b      	ldr	r3, [r7, #4]
 802648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802648c:	041b      	lsls	r3, r3, #16
 802648e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8026490:	687b      	ldr	r3, [r7, #4]
 8026492:	681b      	ldr	r3, [r3, #0]
 8026494:	6919      	ldr	r1, [r3, #16]
 8026496:	687b      	ldr	r3, [r7, #4]
 8026498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802649a:	68fb      	ldr	r3, [r7, #12]
 802649c:	431a      	orrs	r2, r3
 802649e:	687b      	ldr	r3, [r7, #4]
 80264a0:	681b      	ldr	r3, [r3, #0]
 80264a2:	430a      	orrs	r2, r1
 80264a4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80264a6:	687b      	ldr	r3, [r7, #4]
 80264a8:	681b      	ldr	r3, [r3, #0]
 80264aa:	6959      	ldr	r1, [r3, #20]
 80264ac:	687b      	ldr	r3, [r7, #4]
 80264ae:	681a      	ldr	r2, [r3, #0]
 80264b0:	4b27      	ldr	r3, [pc, #156]	; (8026550 <HAL_LTDC_Init+0x19c>)
 80264b2:	400b      	ands	r3, r1
 80264b4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80264b6:	687b      	ldr	r3, [r7, #4]
 80264b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80264ba:	041b      	lsls	r3, r3, #16
 80264bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80264be:	687b      	ldr	r3, [r7, #4]
 80264c0:	681b      	ldr	r3, [r3, #0]
 80264c2:	6959      	ldr	r1, [r3, #20]
 80264c4:	687b      	ldr	r3, [r7, #4]
 80264c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80264c8:	68fb      	ldr	r3, [r7, #12]
 80264ca:	431a      	orrs	r2, r3
 80264cc:	687b      	ldr	r3, [r7, #4]
 80264ce:	681b      	ldr	r3, [r3, #0]
 80264d0:	430a      	orrs	r2, r1
 80264d2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80264d4:	687b      	ldr	r3, [r7, #4]
 80264d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80264da:	021b      	lsls	r3, r3, #8
 80264dc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80264de:	687b      	ldr	r3, [r7, #4]
 80264e0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80264e4:	041b      	lsls	r3, r3, #16
 80264e6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80264e8:	687b      	ldr	r3, [r7, #4]
 80264ea:	681b      	ldr	r3, [r3, #0]
 80264ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80264ee:	687b      	ldr	r3, [r7, #4]
 80264f0:	681b      	ldr	r3, [r3, #0]
 80264f2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80264f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80264f8:	687b      	ldr	r3, [r7, #4]
 80264fa:	681b      	ldr	r3, [r3, #0]
 80264fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80264fe:	68ba      	ldr	r2, [r7, #8]
 8026500:	68fb      	ldr	r3, [r7, #12]
 8026502:	4313      	orrs	r3, r2
 8026504:	687a      	ldr	r2, [r7, #4]
 8026506:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 802650a:	431a      	orrs	r2, r3
 802650c:	687b      	ldr	r3, [r7, #4]
 802650e:	681b      	ldr	r3, [r3, #0]
 8026510:	430a      	orrs	r2, r1
 8026512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8026514:	687b      	ldr	r3, [r7, #4]
 8026516:	681b      	ldr	r3, [r3, #0]
 8026518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802651a:	687b      	ldr	r3, [r7, #4]
 802651c:	681b      	ldr	r3, [r3, #0]
 802651e:	f042 0206 	orr.w	r2, r2, #6
 8026522:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8026524:	687b      	ldr	r3, [r7, #4]
 8026526:	681b      	ldr	r3, [r3, #0]
 8026528:	699a      	ldr	r2, [r3, #24]
 802652a:	687b      	ldr	r3, [r7, #4]
 802652c:	681b      	ldr	r3, [r3, #0]
 802652e:	f042 0201 	orr.w	r2, r2, #1
 8026532:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8026534:	687b      	ldr	r3, [r7, #4]
 8026536:	2200      	movs	r2, #0
 8026538:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 802653c:	687b      	ldr	r3, [r7, #4]
 802653e:	2201      	movs	r2, #1
 8026540:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8026544:	2300      	movs	r3, #0
}
 8026546:	4618      	mov	r0, r3
 8026548:	3710      	adds	r7, #16
 802654a:	46bd      	mov	sp, r7
 802654c:	bd80      	pop	{r7, pc}
 802654e:	bf00      	nop
 8026550:	f000f800 	.word	0xf000f800

08026554 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8026554:	b580      	push	{r7, lr}
 8026556:	b084      	sub	sp, #16
 8026558:	af00      	add	r7, sp, #0
 802655a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 802655c:	687b      	ldr	r3, [r7, #4]
 802655e:	681b      	ldr	r3, [r3, #0]
 8026560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026562:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8026564:	687b      	ldr	r3, [r7, #4]
 8026566:	681b      	ldr	r3, [r3, #0]
 8026568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802656a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 802656c:	68fb      	ldr	r3, [r7, #12]
 802656e:	f003 0304 	and.w	r3, r3, #4
 8026572:	2b00      	cmp	r3, #0
 8026574:	d023      	beq.n	80265be <HAL_LTDC_IRQHandler+0x6a>
 8026576:	68bb      	ldr	r3, [r7, #8]
 8026578:	f003 0304 	and.w	r3, r3, #4
 802657c:	2b00      	cmp	r3, #0
 802657e:	d01e      	beq.n	80265be <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8026580:	687b      	ldr	r3, [r7, #4]
 8026582:	681b      	ldr	r3, [r3, #0]
 8026584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026586:	687b      	ldr	r3, [r7, #4]
 8026588:	681b      	ldr	r3, [r3, #0]
 802658a:	f022 0204 	bic.w	r2, r2, #4
 802658e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8026590:	687b      	ldr	r3, [r7, #4]
 8026592:	681b      	ldr	r3, [r3, #0]
 8026594:	2204      	movs	r2, #4
 8026596:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8026598:	687b      	ldr	r3, [r7, #4]
 802659a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 802659e:	f043 0201 	orr.w	r2, r3, #1
 80265a2:	687b      	ldr	r3, [r7, #4]
 80265a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80265a8:	687b      	ldr	r3, [r7, #4]
 80265aa:	2204      	movs	r2, #4
 80265ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80265b0:	687b      	ldr	r3, [r7, #4]
 80265b2:	2200      	movs	r2, #0
 80265b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80265b8:	6878      	ldr	r0, [r7, #4]
 80265ba:	f000 f86f 	bl	802669c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80265be:	68fb      	ldr	r3, [r7, #12]
 80265c0:	f003 0302 	and.w	r3, r3, #2
 80265c4:	2b00      	cmp	r3, #0
 80265c6:	d023      	beq.n	8026610 <HAL_LTDC_IRQHandler+0xbc>
 80265c8:	68bb      	ldr	r3, [r7, #8]
 80265ca:	f003 0302 	and.w	r3, r3, #2
 80265ce:	2b00      	cmp	r3, #0
 80265d0:	d01e      	beq.n	8026610 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80265d2:	687b      	ldr	r3, [r7, #4]
 80265d4:	681b      	ldr	r3, [r3, #0]
 80265d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80265d8:	687b      	ldr	r3, [r7, #4]
 80265da:	681b      	ldr	r3, [r3, #0]
 80265dc:	f022 0202 	bic.w	r2, r2, #2
 80265e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80265e2:	687b      	ldr	r3, [r7, #4]
 80265e4:	681b      	ldr	r3, [r3, #0]
 80265e6:	2202      	movs	r2, #2
 80265e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80265ea:	687b      	ldr	r3, [r7, #4]
 80265ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80265f0:	f043 0202 	orr.w	r2, r3, #2
 80265f4:	687b      	ldr	r3, [r7, #4]
 80265f6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80265fa:	687b      	ldr	r3, [r7, #4]
 80265fc:	2204      	movs	r2, #4
 80265fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026602:	687b      	ldr	r3, [r7, #4]
 8026604:	2200      	movs	r2, #0
 8026606:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 802660a:	6878      	ldr	r0, [r7, #4]
 802660c:	f000 f846 	bl	802669c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8026610:	68fb      	ldr	r3, [r7, #12]
 8026612:	f003 0301 	and.w	r3, r3, #1
 8026616:	2b00      	cmp	r3, #0
 8026618:	d01b      	beq.n	8026652 <HAL_LTDC_IRQHandler+0xfe>
 802661a:	68bb      	ldr	r3, [r7, #8]
 802661c:	f003 0301 	and.w	r3, r3, #1
 8026620:	2b00      	cmp	r3, #0
 8026622:	d016      	beq.n	8026652 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8026624:	687b      	ldr	r3, [r7, #4]
 8026626:	681b      	ldr	r3, [r3, #0]
 8026628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802662a:	687b      	ldr	r3, [r7, #4]
 802662c:	681b      	ldr	r3, [r3, #0]
 802662e:	f022 0201 	bic.w	r2, r2, #1
 8026632:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8026634:	687b      	ldr	r3, [r7, #4]
 8026636:	681b      	ldr	r3, [r3, #0]
 8026638:	2201      	movs	r2, #1
 802663a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 802663c:	687b      	ldr	r3, [r7, #4]
 802663e:	2201      	movs	r2, #1
 8026640:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026644:	687b      	ldr	r3, [r7, #4]
 8026646:	2200      	movs	r2, #0
 8026648:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 802664c:	6878      	ldr	r0, [r7, #4]
 802664e:	f000 f82f 	bl	80266b0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8026652:	68fb      	ldr	r3, [r7, #12]
 8026654:	f003 0308 	and.w	r3, r3, #8
 8026658:	2b00      	cmp	r3, #0
 802665a:	d01b      	beq.n	8026694 <HAL_LTDC_IRQHandler+0x140>
 802665c:	68bb      	ldr	r3, [r7, #8]
 802665e:	f003 0308 	and.w	r3, r3, #8
 8026662:	2b00      	cmp	r3, #0
 8026664:	d016      	beq.n	8026694 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8026666:	687b      	ldr	r3, [r7, #4]
 8026668:	681b      	ldr	r3, [r3, #0]
 802666a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802666c:	687b      	ldr	r3, [r7, #4]
 802666e:	681b      	ldr	r3, [r3, #0]
 8026670:	f022 0208 	bic.w	r2, r2, #8
 8026674:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8026676:	687b      	ldr	r3, [r7, #4]
 8026678:	681b      	ldr	r3, [r3, #0]
 802667a:	2208      	movs	r2, #8
 802667c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 802667e:	687b      	ldr	r3, [r7, #4]
 8026680:	2201      	movs	r2, #1
 8026682:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026686:	687b      	ldr	r3, [r7, #4]
 8026688:	2200      	movs	r2, #0
 802668a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 802668e:	6878      	ldr	r0, [r7, #4]
 8026690:	f000 f818 	bl	80266c4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8026694:	bf00      	nop
 8026696:	3710      	adds	r7, #16
 8026698:	46bd      	mov	sp, r7
 802669a:	bd80      	pop	{r7, pc}

0802669c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 802669c:	b480      	push	{r7}
 802669e:	b083      	sub	sp, #12
 80266a0:	af00      	add	r7, sp, #0
 80266a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80266a4:	bf00      	nop
 80266a6:	370c      	adds	r7, #12
 80266a8:	46bd      	mov	sp, r7
 80266aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266ae:	4770      	bx	lr

080266b0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80266b0:	b480      	push	{r7}
 80266b2:	b083      	sub	sp, #12
 80266b4:	af00      	add	r7, sp, #0
 80266b6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80266b8:	bf00      	nop
 80266ba:	370c      	adds	r7, #12
 80266bc:	46bd      	mov	sp, r7
 80266be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266c2:	4770      	bx	lr

080266c4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80266c4:	b480      	push	{r7}
 80266c6:	b083      	sub	sp, #12
 80266c8:	af00      	add	r7, sp, #0
 80266ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80266cc:	bf00      	nop
 80266ce:	370c      	adds	r7, #12
 80266d0:	46bd      	mov	sp, r7
 80266d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266d6:	4770      	bx	lr

080266d8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80266d8:	b5b0      	push	{r4, r5, r7, lr}
 80266da:	b084      	sub	sp, #16
 80266dc:	af00      	add	r7, sp, #0
 80266de:	60f8      	str	r0, [r7, #12]
 80266e0:	60b9      	str	r1, [r7, #8]
 80266e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80266e4:	68fb      	ldr	r3, [r7, #12]
 80266e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80266ea:	2b01      	cmp	r3, #1
 80266ec:	d101      	bne.n	80266f2 <HAL_LTDC_ConfigLayer+0x1a>
 80266ee:	2302      	movs	r3, #2
 80266f0:	e02c      	b.n	802674c <HAL_LTDC_ConfigLayer+0x74>
 80266f2:	68fb      	ldr	r3, [r7, #12]
 80266f4:	2201      	movs	r2, #1
 80266f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80266fa:	68fb      	ldr	r3, [r7, #12]
 80266fc:	2202      	movs	r2, #2
 80266fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8026702:	68fa      	ldr	r2, [r7, #12]
 8026704:	687b      	ldr	r3, [r7, #4]
 8026706:	2134      	movs	r1, #52	; 0x34
 8026708:	fb01 f303 	mul.w	r3, r1, r3
 802670c:	4413      	add	r3, r2
 802670e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8026712:	68bb      	ldr	r3, [r7, #8]
 8026714:	4614      	mov	r4, r2
 8026716:	461d      	mov	r5, r3
 8026718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802671a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802671c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802671e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026724:	682b      	ldr	r3, [r5, #0]
 8026726:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8026728:	687a      	ldr	r2, [r7, #4]
 802672a:	68b9      	ldr	r1, [r7, #8]
 802672c:	68f8      	ldr	r0, [r7, #12]
 802672e:	f000 f8b9 	bl	80268a4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026732:	68fb      	ldr	r3, [r7, #12]
 8026734:	681b      	ldr	r3, [r3, #0]
 8026736:	2201      	movs	r2, #1
 8026738:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 802673a:	68fb      	ldr	r3, [r7, #12]
 802673c:	2201      	movs	r2, #1
 802673e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026742:	68fb      	ldr	r3, [r7, #12]
 8026744:	2200      	movs	r2, #0
 8026746:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 802674a:	2300      	movs	r3, #0
}
 802674c:	4618      	mov	r0, r3
 802674e:	3710      	adds	r7, #16
 8026750:	46bd      	mov	sp, r7
 8026752:	bdb0      	pop	{r4, r5, r7, pc}

08026754 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8026754:	b480      	push	{r7}
 8026756:	b085      	sub	sp, #20
 8026758:	af00      	add	r7, sp, #0
 802675a:	60f8      	str	r0, [r7, #12]
 802675c:	60b9      	str	r1, [r7, #8]
 802675e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026760:	68fb      	ldr	r3, [r7, #12]
 8026762:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026766:	2b01      	cmp	r3, #1
 8026768:	d101      	bne.n	802676e <HAL_LTDC_ConfigColorKeying+0x1a>
 802676a:	2302      	movs	r3, #2
 802676c:	e030      	b.n	80267d0 <HAL_LTDC_ConfigColorKeying+0x7c>
 802676e:	68fb      	ldr	r3, [r7, #12]
 8026770:	2201      	movs	r2, #1
 8026772:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026776:	68fb      	ldr	r3, [r7, #12]
 8026778:	2202      	movs	r2, #2
 802677a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 802677e:	68fb      	ldr	r3, [r7, #12]
 8026780:	681b      	ldr	r3, [r3, #0]
 8026782:	461a      	mov	r2, r3
 8026784:	687b      	ldr	r3, [r7, #4]
 8026786:	01db      	lsls	r3, r3, #7
 8026788:	4413      	add	r3, r2
 802678a:	3384      	adds	r3, #132	; 0x84
 802678c:	68db      	ldr	r3, [r3, #12]
 802678e:	68fa      	ldr	r2, [r7, #12]
 8026790:	6812      	ldr	r2, [r2, #0]
 8026792:	4611      	mov	r1, r2
 8026794:	687a      	ldr	r2, [r7, #4]
 8026796:	01d2      	lsls	r2, r2, #7
 8026798:	440a      	add	r2, r1
 802679a:	3284      	adds	r2, #132	; 0x84
 802679c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80267a0:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 80267a2:	68fb      	ldr	r3, [r7, #12]
 80267a4:	681b      	ldr	r3, [r3, #0]
 80267a6:	461a      	mov	r2, r3
 80267a8:	687b      	ldr	r3, [r7, #4]
 80267aa:	01db      	lsls	r3, r3, #7
 80267ac:	4413      	add	r3, r2
 80267ae:	3384      	adds	r3, #132	; 0x84
 80267b0:	461a      	mov	r2, r3
 80267b2:	68bb      	ldr	r3, [r7, #8]
 80267b4:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80267b6:	68fb      	ldr	r3, [r7, #12]
 80267b8:	681b      	ldr	r3, [r3, #0]
 80267ba:	2201      	movs	r2, #1
 80267bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80267be:	68fb      	ldr	r3, [r7, #12]
 80267c0:	2201      	movs	r2, #1
 80267c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80267c6:	68fb      	ldr	r3, [r7, #12]
 80267c8:	2200      	movs	r2, #0
 80267ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80267ce:	2300      	movs	r3, #0
}
 80267d0:	4618      	mov	r0, r3
 80267d2:	3714      	adds	r7, #20
 80267d4:	46bd      	mov	sp, r7
 80267d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267da:	4770      	bx	lr

080267dc <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 80267dc:	b480      	push	{r7}
 80267de:	b083      	sub	sp, #12
 80267e0:	af00      	add	r7, sp, #0
 80267e2:	6078      	str	r0, [r7, #4]
 80267e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80267e6:	687b      	ldr	r3, [r7, #4]
 80267e8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80267ec:	2b01      	cmp	r3, #1
 80267ee:	d101      	bne.n	80267f4 <HAL_LTDC_EnableColorKeying+0x18>
 80267f0:	2302      	movs	r3, #2
 80267f2:	e026      	b.n	8026842 <HAL_LTDC_EnableColorKeying+0x66>
 80267f4:	687b      	ldr	r3, [r7, #4]
 80267f6:	2201      	movs	r2, #1
 80267f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80267fc:	687b      	ldr	r3, [r7, #4]
 80267fe:	2202      	movs	r2, #2
 8026800:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8026804:	687b      	ldr	r3, [r7, #4]
 8026806:	681b      	ldr	r3, [r3, #0]
 8026808:	461a      	mov	r2, r3
 802680a:	683b      	ldr	r3, [r7, #0]
 802680c:	01db      	lsls	r3, r3, #7
 802680e:	4413      	add	r3, r2
 8026810:	3384      	adds	r3, #132	; 0x84
 8026812:	681b      	ldr	r3, [r3, #0]
 8026814:	687a      	ldr	r2, [r7, #4]
 8026816:	6812      	ldr	r2, [r2, #0]
 8026818:	4611      	mov	r1, r2
 802681a:	683a      	ldr	r2, [r7, #0]
 802681c:	01d2      	lsls	r2, r2, #7
 802681e:	440a      	add	r2, r1
 8026820:	3284      	adds	r2, #132	; 0x84
 8026822:	f043 0302 	orr.w	r3, r3, #2
 8026826:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026828:	687b      	ldr	r3, [r7, #4]
 802682a:	681b      	ldr	r3, [r3, #0]
 802682c:	2201      	movs	r2, #1
 802682e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026830:	687b      	ldr	r3, [r7, #4]
 8026832:	2201      	movs	r2, #1
 8026834:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026838:	687b      	ldr	r3, [r7, #4]
 802683a:	2200      	movs	r2, #0
 802683c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026840:	2300      	movs	r3, #0
}
 8026842:	4618      	mov	r0, r3
 8026844:	370c      	adds	r7, #12
 8026846:	46bd      	mov	sp, r7
 8026848:	f85d 7b04 	ldr.w	r7, [sp], #4
 802684c:	4770      	bx	lr
	...

08026850 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8026850:	b480      	push	{r7}
 8026852:	b083      	sub	sp, #12
 8026854:	af00      	add	r7, sp, #0
 8026856:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8026858:	687b      	ldr	r3, [r7, #4]
 802685a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 802685e:	2b01      	cmp	r3, #1
 8026860:	d101      	bne.n	8026866 <HAL_LTDC_EnableDither+0x16>
 8026862:	2302      	movs	r3, #2
 8026864:	e016      	b.n	8026894 <HAL_LTDC_EnableDither+0x44>
 8026866:	687b      	ldr	r3, [r7, #4]
 8026868:	2201      	movs	r2, #1
 802686a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 802686e:	687b      	ldr	r3, [r7, #4]
 8026870:	2202      	movs	r2, #2
 8026872:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8026876:	4b0a      	ldr	r3, [pc, #40]	; (80268a0 <HAL_LTDC_EnableDither+0x50>)
 8026878:	699b      	ldr	r3, [r3, #24]
 802687a:	4a09      	ldr	r2, [pc, #36]	; (80268a0 <HAL_LTDC_EnableDither+0x50>)
 802687c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026880:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026882:	687b      	ldr	r3, [r7, #4]
 8026884:	2201      	movs	r2, #1
 8026886:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 802688a:	687b      	ldr	r3, [r7, #4]
 802688c:	2200      	movs	r2, #0
 802688e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026892:	2300      	movs	r3, #0
}
 8026894:	4618      	mov	r0, r3
 8026896:	370c      	adds	r7, #12
 8026898:	46bd      	mov	sp, r7
 802689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802689e:	4770      	bx	lr
 80268a0:	40016800 	.word	0x40016800

080268a4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80268a4:	b480      	push	{r7}
 80268a6:	b089      	sub	sp, #36	; 0x24
 80268a8:	af00      	add	r7, sp, #0
 80268aa:	60f8      	str	r0, [r7, #12]
 80268ac:	60b9      	str	r1, [r7, #8]
 80268ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80268b0:	68bb      	ldr	r3, [r7, #8]
 80268b2:	685a      	ldr	r2, [r3, #4]
 80268b4:	68fb      	ldr	r3, [r7, #12]
 80268b6:	681b      	ldr	r3, [r3, #0]
 80268b8:	68db      	ldr	r3, [r3, #12]
 80268ba:	0c1b      	lsrs	r3, r3, #16
 80268bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80268c0:	4413      	add	r3, r2
 80268c2:	041b      	lsls	r3, r3, #16
 80268c4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80268c6:	68fb      	ldr	r3, [r7, #12]
 80268c8:	681b      	ldr	r3, [r3, #0]
 80268ca:	461a      	mov	r2, r3
 80268cc:	687b      	ldr	r3, [r7, #4]
 80268ce:	01db      	lsls	r3, r3, #7
 80268d0:	4413      	add	r3, r2
 80268d2:	3384      	adds	r3, #132	; 0x84
 80268d4:	685b      	ldr	r3, [r3, #4]
 80268d6:	68fa      	ldr	r2, [r7, #12]
 80268d8:	6812      	ldr	r2, [r2, #0]
 80268da:	4611      	mov	r1, r2
 80268dc:	687a      	ldr	r2, [r7, #4]
 80268de:	01d2      	lsls	r2, r2, #7
 80268e0:	440a      	add	r2, r1
 80268e2:	3284      	adds	r2, #132	; 0x84
 80268e4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80268e8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80268ea:	68bb      	ldr	r3, [r7, #8]
 80268ec:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80268ee:	68fb      	ldr	r3, [r7, #12]
 80268f0:	681b      	ldr	r3, [r3, #0]
 80268f2:	68db      	ldr	r3, [r3, #12]
 80268f4:	0c1b      	lsrs	r3, r3, #16
 80268f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80268fa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80268fc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80268fe:	68fb      	ldr	r3, [r7, #12]
 8026900:	681b      	ldr	r3, [r3, #0]
 8026902:	4619      	mov	r1, r3
 8026904:	687b      	ldr	r3, [r7, #4]
 8026906:	01db      	lsls	r3, r3, #7
 8026908:	440b      	add	r3, r1
 802690a:	3384      	adds	r3, #132	; 0x84
 802690c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 802690e:	69fb      	ldr	r3, [r7, #28]
 8026910:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8026912:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8026914:	68bb      	ldr	r3, [r7, #8]
 8026916:	68da      	ldr	r2, [r3, #12]
 8026918:	68fb      	ldr	r3, [r7, #12]
 802691a:	681b      	ldr	r3, [r3, #0]
 802691c:	68db      	ldr	r3, [r3, #12]
 802691e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026922:	4413      	add	r3, r2
 8026924:	041b      	lsls	r3, r3, #16
 8026926:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8026928:	68fb      	ldr	r3, [r7, #12]
 802692a:	681b      	ldr	r3, [r3, #0]
 802692c:	461a      	mov	r2, r3
 802692e:	687b      	ldr	r3, [r7, #4]
 8026930:	01db      	lsls	r3, r3, #7
 8026932:	4413      	add	r3, r2
 8026934:	3384      	adds	r3, #132	; 0x84
 8026936:	689b      	ldr	r3, [r3, #8]
 8026938:	68fa      	ldr	r2, [r7, #12]
 802693a:	6812      	ldr	r2, [r2, #0]
 802693c:	4611      	mov	r1, r2
 802693e:	687a      	ldr	r2, [r7, #4]
 8026940:	01d2      	lsls	r2, r2, #7
 8026942:	440a      	add	r2, r1
 8026944:	3284      	adds	r2, #132	; 0x84
 8026946:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 802694a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 802694c:	68bb      	ldr	r3, [r7, #8]
 802694e:	689a      	ldr	r2, [r3, #8]
 8026950:	68fb      	ldr	r3, [r7, #12]
 8026952:	681b      	ldr	r3, [r3, #0]
 8026954:	68db      	ldr	r3, [r3, #12]
 8026956:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802695a:	4413      	add	r3, r2
 802695c:	1c5a      	adds	r2, r3, #1
 802695e:	68fb      	ldr	r3, [r7, #12]
 8026960:	681b      	ldr	r3, [r3, #0]
 8026962:	4619      	mov	r1, r3
 8026964:	687b      	ldr	r3, [r7, #4]
 8026966:	01db      	lsls	r3, r3, #7
 8026968:	440b      	add	r3, r1
 802696a:	3384      	adds	r3, #132	; 0x84
 802696c:	4619      	mov	r1, r3
 802696e:	69fb      	ldr	r3, [r7, #28]
 8026970:	4313      	orrs	r3, r2
 8026972:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8026974:	68fb      	ldr	r3, [r7, #12]
 8026976:	681b      	ldr	r3, [r3, #0]
 8026978:	461a      	mov	r2, r3
 802697a:	687b      	ldr	r3, [r7, #4]
 802697c:	01db      	lsls	r3, r3, #7
 802697e:	4413      	add	r3, r2
 8026980:	3384      	adds	r3, #132	; 0x84
 8026982:	691b      	ldr	r3, [r3, #16]
 8026984:	68fa      	ldr	r2, [r7, #12]
 8026986:	6812      	ldr	r2, [r2, #0]
 8026988:	4611      	mov	r1, r2
 802698a:	687a      	ldr	r2, [r7, #4]
 802698c:	01d2      	lsls	r2, r2, #7
 802698e:	440a      	add	r2, r1
 8026990:	3284      	adds	r2, #132	; 0x84
 8026992:	f023 0307 	bic.w	r3, r3, #7
 8026996:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8026998:	68fb      	ldr	r3, [r7, #12]
 802699a:	681b      	ldr	r3, [r3, #0]
 802699c:	461a      	mov	r2, r3
 802699e:	687b      	ldr	r3, [r7, #4]
 80269a0:	01db      	lsls	r3, r3, #7
 80269a2:	4413      	add	r3, r2
 80269a4:	3384      	adds	r3, #132	; 0x84
 80269a6:	461a      	mov	r2, r3
 80269a8:	68bb      	ldr	r3, [r7, #8]
 80269aa:	691b      	ldr	r3, [r3, #16]
 80269ac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80269ae:	68bb      	ldr	r3, [r7, #8]
 80269b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80269b4:	021b      	lsls	r3, r3, #8
 80269b6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80269b8:	68bb      	ldr	r3, [r7, #8]
 80269ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80269be:	041b      	lsls	r3, r3, #16
 80269c0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80269c2:	68bb      	ldr	r3, [r7, #8]
 80269c4:	699b      	ldr	r3, [r3, #24]
 80269c6:	061b      	lsls	r3, r3, #24
 80269c8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80269ca:	68fb      	ldr	r3, [r7, #12]
 80269cc:	681b      	ldr	r3, [r3, #0]
 80269ce:	461a      	mov	r2, r3
 80269d0:	687b      	ldr	r3, [r7, #4]
 80269d2:	01db      	lsls	r3, r3, #7
 80269d4:	4413      	add	r3, r2
 80269d6:	3384      	adds	r3, #132	; 0x84
 80269d8:	699b      	ldr	r3, [r3, #24]
 80269da:	68fb      	ldr	r3, [r7, #12]
 80269dc:	681b      	ldr	r3, [r3, #0]
 80269de:	461a      	mov	r2, r3
 80269e0:	687b      	ldr	r3, [r7, #4]
 80269e2:	01db      	lsls	r3, r3, #7
 80269e4:	4413      	add	r3, r2
 80269e6:	3384      	adds	r3, #132	; 0x84
 80269e8:	461a      	mov	r2, r3
 80269ea:	2300      	movs	r3, #0
 80269ec:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80269ee:	68bb      	ldr	r3, [r7, #8]
 80269f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80269f4:	461a      	mov	r2, r3
 80269f6:	69fb      	ldr	r3, [r7, #28]
 80269f8:	431a      	orrs	r2, r3
 80269fa:	69bb      	ldr	r3, [r7, #24]
 80269fc:	431a      	orrs	r2, r3
 80269fe:	68fb      	ldr	r3, [r7, #12]
 8026a00:	681b      	ldr	r3, [r3, #0]
 8026a02:	4619      	mov	r1, r3
 8026a04:	687b      	ldr	r3, [r7, #4]
 8026a06:	01db      	lsls	r3, r3, #7
 8026a08:	440b      	add	r3, r1
 8026a0a:	3384      	adds	r3, #132	; 0x84
 8026a0c:	4619      	mov	r1, r3
 8026a0e:	697b      	ldr	r3, [r7, #20]
 8026a10:	4313      	orrs	r3, r2
 8026a12:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8026a14:	68fb      	ldr	r3, [r7, #12]
 8026a16:	681b      	ldr	r3, [r3, #0]
 8026a18:	461a      	mov	r2, r3
 8026a1a:	687b      	ldr	r3, [r7, #4]
 8026a1c:	01db      	lsls	r3, r3, #7
 8026a1e:	4413      	add	r3, r2
 8026a20:	3384      	adds	r3, #132	; 0x84
 8026a22:	695b      	ldr	r3, [r3, #20]
 8026a24:	68fa      	ldr	r2, [r7, #12]
 8026a26:	6812      	ldr	r2, [r2, #0]
 8026a28:	4611      	mov	r1, r2
 8026a2a:	687a      	ldr	r2, [r7, #4]
 8026a2c:	01d2      	lsls	r2, r2, #7
 8026a2e:	440a      	add	r2, r1
 8026a30:	3284      	adds	r2, #132	; 0x84
 8026a32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8026a36:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8026a38:	68fb      	ldr	r3, [r7, #12]
 8026a3a:	681b      	ldr	r3, [r3, #0]
 8026a3c:	461a      	mov	r2, r3
 8026a3e:	687b      	ldr	r3, [r7, #4]
 8026a40:	01db      	lsls	r3, r3, #7
 8026a42:	4413      	add	r3, r2
 8026a44:	3384      	adds	r3, #132	; 0x84
 8026a46:	461a      	mov	r2, r3
 8026a48:	68bb      	ldr	r3, [r7, #8]
 8026a4a:	695b      	ldr	r3, [r3, #20]
 8026a4c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8026a4e:	68fb      	ldr	r3, [r7, #12]
 8026a50:	681b      	ldr	r3, [r3, #0]
 8026a52:	461a      	mov	r2, r3
 8026a54:	687b      	ldr	r3, [r7, #4]
 8026a56:	01db      	lsls	r3, r3, #7
 8026a58:	4413      	add	r3, r2
 8026a5a:	3384      	adds	r3, #132	; 0x84
 8026a5c:	69db      	ldr	r3, [r3, #28]
 8026a5e:	68fa      	ldr	r2, [r7, #12]
 8026a60:	6812      	ldr	r2, [r2, #0]
 8026a62:	4611      	mov	r1, r2
 8026a64:	687a      	ldr	r2, [r7, #4]
 8026a66:	01d2      	lsls	r2, r2, #7
 8026a68:	440a      	add	r2, r1
 8026a6a:	3284      	adds	r2, #132	; 0x84
 8026a6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8026a70:	f023 0307 	bic.w	r3, r3, #7
 8026a74:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8026a76:	68bb      	ldr	r3, [r7, #8]
 8026a78:	69da      	ldr	r2, [r3, #28]
 8026a7a:	68bb      	ldr	r3, [r7, #8]
 8026a7c:	6a1b      	ldr	r3, [r3, #32]
 8026a7e:	68f9      	ldr	r1, [r7, #12]
 8026a80:	6809      	ldr	r1, [r1, #0]
 8026a82:	4608      	mov	r0, r1
 8026a84:	6879      	ldr	r1, [r7, #4]
 8026a86:	01c9      	lsls	r1, r1, #7
 8026a88:	4401      	add	r1, r0
 8026a8a:	3184      	adds	r1, #132	; 0x84
 8026a8c:	4313      	orrs	r3, r2
 8026a8e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8026a90:	68fb      	ldr	r3, [r7, #12]
 8026a92:	681b      	ldr	r3, [r3, #0]
 8026a94:	461a      	mov	r2, r3
 8026a96:	687b      	ldr	r3, [r7, #4]
 8026a98:	01db      	lsls	r3, r3, #7
 8026a9a:	4413      	add	r3, r2
 8026a9c:	3384      	adds	r3, #132	; 0x84
 8026a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026aa0:	68fb      	ldr	r3, [r7, #12]
 8026aa2:	681b      	ldr	r3, [r3, #0]
 8026aa4:	461a      	mov	r2, r3
 8026aa6:	687b      	ldr	r3, [r7, #4]
 8026aa8:	01db      	lsls	r3, r3, #7
 8026aaa:	4413      	add	r3, r2
 8026aac:	3384      	adds	r3, #132	; 0x84
 8026aae:	461a      	mov	r2, r3
 8026ab0:	2300      	movs	r3, #0
 8026ab2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8026ab4:	68fb      	ldr	r3, [r7, #12]
 8026ab6:	681b      	ldr	r3, [r3, #0]
 8026ab8:	461a      	mov	r2, r3
 8026aba:	687b      	ldr	r3, [r7, #4]
 8026abc:	01db      	lsls	r3, r3, #7
 8026abe:	4413      	add	r3, r2
 8026ac0:	3384      	adds	r3, #132	; 0x84
 8026ac2:	461a      	mov	r2, r3
 8026ac4:	68bb      	ldr	r3, [r7, #8]
 8026ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026ac8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8026aca:	68bb      	ldr	r3, [r7, #8]
 8026acc:	691b      	ldr	r3, [r3, #16]
 8026ace:	2b00      	cmp	r3, #0
 8026ad0:	d102      	bne.n	8026ad8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8026ad2:	2304      	movs	r3, #4
 8026ad4:	61fb      	str	r3, [r7, #28]
 8026ad6:	e01b      	b.n	8026b10 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8026ad8:	68bb      	ldr	r3, [r7, #8]
 8026ada:	691b      	ldr	r3, [r3, #16]
 8026adc:	2b01      	cmp	r3, #1
 8026ade:	d102      	bne.n	8026ae6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8026ae0:	2303      	movs	r3, #3
 8026ae2:	61fb      	str	r3, [r7, #28]
 8026ae4:	e014      	b.n	8026b10 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8026ae6:	68bb      	ldr	r3, [r7, #8]
 8026ae8:	691b      	ldr	r3, [r3, #16]
 8026aea:	2b04      	cmp	r3, #4
 8026aec:	d00b      	beq.n	8026b06 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8026aee:	68bb      	ldr	r3, [r7, #8]
 8026af0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8026af2:	2b02      	cmp	r3, #2
 8026af4:	d007      	beq.n	8026b06 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8026af6:	68bb      	ldr	r3, [r7, #8]
 8026af8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8026afa:	2b03      	cmp	r3, #3
 8026afc:	d003      	beq.n	8026b06 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8026afe:	68bb      	ldr	r3, [r7, #8]
 8026b00:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8026b02:	2b07      	cmp	r3, #7
 8026b04:	d102      	bne.n	8026b0c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8026b06:	2302      	movs	r3, #2
 8026b08:	61fb      	str	r3, [r7, #28]
 8026b0a:	e001      	b.n	8026b10 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8026b0c:	2301      	movs	r3, #1
 8026b0e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8026b10:	68fb      	ldr	r3, [r7, #12]
 8026b12:	681b      	ldr	r3, [r3, #0]
 8026b14:	461a      	mov	r2, r3
 8026b16:	687b      	ldr	r3, [r7, #4]
 8026b18:	01db      	lsls	r3, r3, #7
 8026b1a:	4413      	add	r3, r2
 8026b1c:	3384      	adds	r3, #132	; 0x84
 8026b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026b20:	68fa      	ldr	r2, [r7, #12]
 8026b22:	6812      	ldr	r2, [r2, #0]
 8026b24:	4611      	mov	r1, r2
 8026b26:	687a      	ldr	r2, [r7, #4]
 8026b28:	01d2      	lsls	r2, r2, #7
 8026b2a:	440a      	add	r2, r1
 8026b2c:	3284      	adds	r2, #132	; 0x84
 8026b2e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8026b32:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8026b34:	68bb      	ldr	r3, [r7, #8]
 8026b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026b38:	69fa      	ldr	r2, [r7, #28]
 8026b3a:	fb02 f303 	mul.w	r3, r2, r3
 8026b3e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8026b40:	68bb      	ldr	r3, [r7, #8]
 8026b42:	6859      	ldr	r1, [r3, #4]
 8026b44:	68bb      	ldr	r3, [r7, #8]
 8026b46:	681b      	ldr	r3, [r3, #0]
 8026b48:	1acb      	subs	r3, r1, r3
 8026b4a:	69f9      	ldr	r1, [r7, #28]
 8026b4c:	fb01 f303 	mul.w	r3, r1, r3
 8026b50:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8026b52:	68f9      	ldr	r1, [r7, #12]
 8026b54:	6809      	ldr	r1, [r1, #0]
 8026b56:	4608      	mov	r0, r1
 8026b58:	6879      	ldr	r1, [r7, #4]
 8026b5a:	01c9      	lsls	r1, r1, #7
 8026b5c:	4401      	add	r1, r0
 8026b5e:	3184      	adds	r1, #132	; 0x84
 8026b60:	4313      	orrs	r3, r2
 8026b62:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8026b64:	68fb      	ldr	r3, [r7, #12]
 8026b66:	681b      	ldr	r3, [r3, #0]
 8026b68:	461a      	mov	r2, r3
 8026b6a:	687b      	ldr	r3, [r7, #4]
 8026b6c:	01db      	lsls	r3, r3, #7
 8026b6e:	4413      	add	r3, r2
 8026b70:	3384      	adds	r3, #132	; 0x84
 8026b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026b74:	68fa      	ldr	r2, [r7, #12]
 8026b76:	6812      	ldr	r2, [r2, #0]
 8026b78:	4611      	mov	r1, r2
 8026b7a:	687a      	ldr	r2, [r7, #4]
 8026b7c:	01d2      	lsls	r2, r2, #7
 8026b7e:	440a      	add	r2, r1
 8026b80:	3284      	adds	r2, #132	; 0x84
 8026b82:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8026b86:	f023 0307 	bic.w	r3, r3, #7
 8026b8a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8026b8c:	68fb      	ldr	r3, [r7, #12]
 8026b8e:	681b      	ldr	r3, [r3, #0]
 8026b90:	461a      	mov	r2, r3
 8026b92:	687b      	ldr	r3, [r7, #4]
 8026b94:	01db      	lsls	r3, r3, #7
 8026b96:	4413      	add	r3, r2
 8026b98:	3384      	adds	r3, #132	; 0x84
 8026b9a:	461a      	mov	r2, r3
 8026b9c:	68bb      	ldr	r3, [r7, #8]
 8026b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026ba0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8026ba2:	68fb      	ldr	r3, [r7, #12]
 8026ba4:	681b      	ldr	r3, [r3, #0]
 8026ba6:	461a      	mov	r2, r3
 8026ba8:	687b      	ldr	r3, [r7, #4]
 8026baa:	01db      	lsls	r3, r3, #7
 8026bac:	4413      	add	r3, r2
 8026bae:	3384      	adds	r3, #132	; 0x84
 8026bb0:	681b      	ldr	r3, [r3, #0]
 8026bb2:	68fa      	ldr	r2, [r7, #12]
 8026bb4:	6812      	ldr	r2, [r2, #0]
 8026bb6:	4611      	mov	r1, r2
 8026bb8:	687a      	ldr	r2, [r7, #4]
 8026bba:	01d2      	lsls	r2, r2, #7
 8026bbc:	440a      	add	r2, r1
 8026bbe:	3284      	adds	r2, #132	; 0x84
 8026bc0:	f043 0301 	orr.w	r3, r3, #1
 8026bc4:	6013      	str	r3, [r2, #0]
}
 8026bc6:	bf00      	nop
 8026bc8:	3724      	adds	r7, #36	; 0x24
 8026bca:	46bd      	mov	sp, r7
 8026bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bd0:	4770      	bx	lr
	...

08026bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8026bd4:	b580      	push	{r7, lr}
 8026bd6:	b086      	sub	sp, #24
 8026bd8:	af00      	add	r7, sp, #0
 8026bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8026bdc:	687b      	ldr	r3, [r7, #4]
 8026bde:	2b00      	cmp	r3, #0
 8026be0:	d101      	bne.n	8026be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8026be2:	2301      	movs	r3, #1
 8026be4:	e267      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8026be6:	687b      	ldr	r3, [r7, #4]
 8026be8:	681b      	ldr	r3, [r3, #0]
 8026bea:	f003 0301 	and.w	r3, r3, #1
 8026bee:	2b00      	cmp	r3, #0
 8026bf0:	d075      	beq.n	8026cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8026bf2:	4b88      	ldr	r3, [pc, #544]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026bf4:	689b      	ldr	r3, [r3, #8]
 8026bf6:	f003 030c 	and.w	r3, r3, #12
 8026bfa:	2b04      	cmp	r3, #4
 8026bfc:	d00c      	beq.n	8026c18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8026bfe:	4b85      	ldr	r3, [pc, #532]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026c00:	689b      	ldr	r3, [r3, #8]
 8026c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8026c06:	2b08      	cmp	r3, #8
 8026c08:	d112      	bne.n	8026c30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8026c0a:	4b82      	ldr	r3, [pc, #520]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026c0c:	685b      	ldr	r3, [r3, #4]
 8026c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8026c16:	d10b      	bne.n	8026c30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026c18:	4b7e      	ldr	r3, [pc, #504]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026c1a:	681b      	ldr	r3, [r3, #0]
 8026c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026c20:	2b00      	cmp	r3, #0
 8026c22:	d05b      	beq.n	8026cdc <HAL_RCC_OscConfig+0x108>
 8026c24:	687b      	ldr	r3, [r7, #4]
 8026c26:	685b      	ldr	r3, [r3, #4]
 8026c28:	2b00      	cmp	r3, #0
 8026c2a:	d157      	bne.n	8026cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8026c2c:	2301      	movs	r3, #1
 8026c2e:	e242      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8026c30:	687b      	ldr	r3, [r7, #4]
 8026c32:	685b      	ldr	r3, [r3, #4]
 8026c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8026c38:	d106      	bne.n	8026c48 <HAL_RCC_OscConfig+0x74>
 8026c3a:	4b76      	ldr	r3, [pc, #472]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026c3c:	681b      	ldr	r3, [r3, #0]
 8026c3e:	4a75      	ldr	r2, [pc, #468]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026c44:	6013      	str	r3, [r2, #0]
 8026c46:	e01d      	b.n	8026c84 <HAL_RCC_OscConfig+0xb0>
 8026c48:	687b      	ldr	r3, [r7, #4]
 8026c4a:	685b      	ldr	r3, [r3, #4]
 8026c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8026c50:	d10c      	bne.n	8026c6c <HAL_RCC_OscConfig+0x98>
 8026c52:	4b70      	ldr	r3, [pc, #448]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026c54:	681b      	ldr	r3, [r3, #0]
 8026c56:	4a6f      	ldr	r2, [pc, #444]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8026c5c:	6013      	str	r3, [r2, #0]
 8026c5e:	4b6d      	ldr	r3, [pc, #436]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026c60:	681b      	ldr	r3, [r3, #0]
 8026c62:	4a6c      	ldr	r2, [pc, #432]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026c68:	6013      	str	r3, [r2, #0]
 8026c6a:	e00b      	b.n	8026c84 <HAL_RCC_OscConfig+0xb0>
 8026c6c:	4b69      	ldr	r3, [pc, #420]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026c6e:	681b      	ldr	r3, [r3, #0]
 8026c70:	4a68      	ldr	r2, [pc, #416]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026c76:	6013      	str	r3, [r2, #0]
 8026c78:	4b66      	ldr	r3, [pc, #408]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026c7a:	681b      	ldr	r3, [r3, #0]
 8026c7c:	4a65      	ldr	r2, [pc, #404]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8026c84:	687b      	ldr	r3, [r7, #4]
 8026c86:	685b      	ldr	r3, [r3, #4]
 8026c88:	2b00      	cmp	r3, #0
 8026c8a:	d013      	beq.n	8026cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026c8c:	f7fc fbc4 	bl	8023418 <HAL_GetTick>
 8026c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026c92:	e008      	b.n	8026ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026c94:	f7fc fbc0 	bl	8023418 <HAL_GetTick>
 8026c98:	4602      	mov	r2, r0
 8026c9a:	693b      	ldr	r3, [r7, #16]
 8026c9c:	1ad3      	subs	r3, r2, r3
 8026c9e:	2b64      	cmp	r3, #100	; 0x64
 8026ca0:	d901      	bls.n	8026ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8026ca2:	2303      	movs	r3, #3
 8026ca4:	e207      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026ca6:	4b5b      	ldr	r3, [pc, #364]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026ca8:	681b      	ldr	r3, [r3, #0]
 8026caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026cae:	2b00      	cmp	r3, #0
 8026cb0:	d0f0      	beq.n	8026c94 <HAL_RCC_OscConfig+0xc0>
 8026cb2:	e014      	b.n	8026cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026cb4:	f7fc fbb0 	bl	8023418 <HAL_GetTick>
 8026cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026cba:	e008      	b.n	8026cce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026cbc:	f7fc fbac 	bl	8023418 <HAL_GetTick>
 8026cc0:	4602      	mov	r2, r0
 8026cc2:	693b      	ldr	r3, [r7, #16]
 8026cc4:	1ad3      	subs	r3, r2, r3
 8026cc6:	2b64      	cmp	r3, #100	; 0x64
 8026cc8:	d901      	bls.n	8026cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8026cca:	2303      	movs	r3, #3
 8026ccc:	e1f3      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026cce:	4b51      	ldr	r3, [pc, #324]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026cd0:	681b      	ldr	r3, [r3, #0]
 8026cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026cd6:	2b00      	cmp	r3, #0
 8026cd8:	d1f0      	bne.n	8026cbc <HAL_RCC_OscConfig+0xe8>
 8026cda:	e000      	b.n	8026cde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8026cde:	687b      	ldr	r3, [r7, #4]
 8026ce0:	681b      	ldr	r3, [r3, #0]
 8026ce2:	f003 0302 	and.w	r3, r3, #2
 8026ce6:	2b00      	cmp	r3, #0
 8026ce8:	d063      	beq.n	8026db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8026cea:	4b4a      	ldr	r3, [pc, #296]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026cec:	689b      	ldr	r3, [r3, #8]
 8026cee:	f003 030c 	and.w	r3, r3, #12
 8026cf2:	2b00      	cmp	r3, #0
 8026cf4:	d00b      	beq.n	8026d0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8026cf6:	4b47      	ldr	r3, [pc, #284]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026cf8:	689b      	ldr	r3, [r3, #8]
 8026cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8026cfe:	2b08      	cmp	r3, #8
 8026d00:	d11c      	bne.n	8026d3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8026d02:	4b44      	ldr	r3, [pc, #272]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026d04:	685b      	ldr	r3, [r3, #4]
 8026d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026d0a:	2b00      	cmp	r3, #0
 8026d0c:	d116      	bne.n	8026d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8026d0e:	4b41      	ldr	r3, [pc, #260]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026d10:	681b      	ldr	r3, [r3, #0]
 8026d12:	f003 0302 	and.w	r3, r3, #2
 8026d16:	2b00      	cmp	r3, #0
 8026d18:	d005      	beq.n	8026d26 <HAL_RCC_OscConfig+0x152>
 8026d1a:	687b      	ldr	r3, [r7, #4]
 8026d1c:	68db      	ldr	r3, [r3, #12]
 8026d1e:	2b01      	cmp	r3, #1
 8026d20:	d001      	beq.n	8026d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8026d22:	2301      	movs	r3, #1
 8026d24:	e1c7      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026d26:	4b3b      	ldr	r3, [pc, #236]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026d28:	681b      	ldr	r3, [r3, #0]
 8026d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026d2e:	687b      	ldr	r3, [r7, #4]
 8026d30:	691b      	ldr	r3, [r3, #16]
 8026d32:	00db      	lsls	r3, r3, #3
 8026d34:	4937      	ldr	r1, [pc, #220]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026d36:	4313      	orrs	r3, r2
 8026d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8026d3a:	e03a      	b.n	8026db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8026d3c:	687b      	ldr	r3, [r7, #4]
 8026d3e:	68db      	ldr	r3, [r3, #12]
 8026d40:	2b00      	cmp	r3, #0
 8026d42:	d020      	beq.n	8026d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8026d44:	4b34      	ldr	r3, [pc, #208]	; (8026e18 <HAL_RCC_OscConfig+0x244>)
 8026d46:	2201      	movs	r2, #1
 8026d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026d4a:	f7fc fb65 	bl	8023418 <HAL_GetTick>
 8026d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026d50:	e008      	b.n	8026d64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026d52:	f7fc fb61 	bl	8023418 <HAL_GetTick>
 8026d56:	4602      	mov	r2, r0
 8026d58:	693b      	ldr	r3, [r7, #16]
 8026d5a:	1ad3      	subs	r3, r2, r3
 8026d5c:	2b02      	cmp	r3, #2
 8026d5e:	d901      	bls.n	8026d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8026d60:	2303      	movs	r3, #3
 8026d62:	e1a8      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026d64:	4b2b      	ldr	r3, [pc, #172]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026d66:	681b      	ldr	r3, [r3, #0]
 8026d68:	f003 0302 	and.w	r3, r3, #2
 8026d6c:	2b00      	cmp	r3, #0
 8026d6e:	d0f0      	beq.n	8026d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026d70:	4b28      	ldr	r3, [pc, #160]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026d72:	681b      	ldr	r3, [r3, #0]
 8026d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026d78:	687b      	ldr	r3, [r7, #4]
 8026d7a:	691b      	ldr	r3, [r3, #16]
 8026d7c:	00db      	lsls	r3, r3, #3
 8026d7e:	4925      	ldr	r1, [pc, #148]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026d80:	4313      	orrs	r3, r2
 8026d82:	600b      	str	r3, [r1, #0]
 8026d84:	e015      	b.n	8026db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8026d86:	4b24      	ldr	r3, [pc, #144]	; (8026e18 <HAL_RCC_OscConfig+0x244>)
 8026d88:	2200      	movs	r2, #0
 8026d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026d8c:	f7fc fb44 	bl	8023418 <HAL_GetTick>
 8026d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026d92:	e008      	b.n	8026da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026d94:	f7fc fb40 	bl	8023418 <HAL_GetTick>
 8026d98:	4602      	mov	r2, r0
 8026d9a:	693b      	ldr	r3, [r7, #16]
 8026d9c:	1ad3      	subs	r3, r2, r3
 8026d9e:	2b02      	cmp	r3, #2
 8026da0:	d901      	bls.n	8026da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8026da2:	2303      	movs	r3, #3
 8026da4:	e187      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026da6:	4b1b      	ldr	r3, [pc, #108]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026da8:	681b      	ldr	r3, [r3, #0]
 8026daa:	f003 0302 	and.w	r3, r3, #2
 8026dae:	2b00      	cmp	r3, #0
 8026db0:	d1f0      	bne.n	8026d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8026db2:	687b      	ldr	r3, [r7, #4]
 8026db4:	681b      	ldr	r3, [r3, #0]
 8026db6:	f003 0308 	and.w	r3, r3, #8
 8026dba:	2b00      	cmp	r3, #0
 8026dbc:	d036      	beq.n	8026e2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8026dbe:	687b      	ldr	r3, [r7, #4]
 8026dc0:	695b      	ldr	r3, [r3, #20]
 8026dc2:	2b00      	cmp	r3, #0
 8026dc4:	d016      	beq.n	8026df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8026dc6:	4b15      	ldr	r3, [pc, #84]	; (8026e1c <HAL_RCC_OscConfig+0x248>)
 8026dc8:	2201      	movs	r2, #1
 8026dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026dcc:	f7fc fb24 	bl	8023418 <HAL_GetTick>
 8026dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026dd2:	e008      	b.n	8026de6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026dd4:	f7fc fb20 	bl	8023418 <HAL_GetTick>
 8026dd8:	4602      	mov	r2, r0
 8026dda:	693b      	ldr	r3, [r7, #16]
 8026ddc:	1ad3      	subs	r3, r2, r3
 8026dde:	2b02      	cmp	r3, #2
 8026de0:	d901      	bls.n	8026de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8026de2:	2303      	movs	r3, #3
 8026de4:	e167      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026de6:	4b0b      	ldr	r3, [pc, #44]	; (8026e14 <HAL_RCC_OscConfig+0x240>)
 8026de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026dea:	f003 0302 	and.w	r3, r3, #2
 8026dee:	2b00      	cmp	r3, #0
 8026df0:	d0f0      	beq.n	8026dd4 <HAL_RCC_OscConfig+0x200>
 8026df2:	e01b      	b.n	8026e2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8026df4:	4b09      	ldr	r3, [pc, #36]	; (8026e1c <HAL_RCC_OscConfig+0x248>)
 8026df6:	2200      	movs	r2, #0
 8026df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8026dfa:	f7fc fb0d 	bl	8023418 <HAL_GetTick>
 8026dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026e00:	e00e      	b.n	8026e20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026e02:	f7fc fb09 	bl	8023418 <HAL_GetTick>
 8026e06:	4602      	mov	r2, r0
 8026e08:	693b      	ldr	r3, [r7, #16]
 8026e0a:	1ad3      	subs	r3, r2, r3
 8026e0c:	2b02      	cmp	r3, #2
 8026e0e:	d907      	bls.n	8026e20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8026e10:	2303      	movs	r3, #3
 8026e12:	e150      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
 8026e14:	40023800 	.word	0x40023800
 8026e18:	42470000 	.word	0x42470000
 8026e1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026e20:	4b88      	ldr	r3, [pc, #544]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026e24:	f003 0302 	and.w	r3, r3, #2
 8026e28:	2b00      	cmp	r3, #0
 8026e2a:	d1ea      	bne.n	8026e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8026e2c:	687b      	ldr	r3, [r7, #4]
 8026e2e:	681b      	ldr	r3, [r3, #0]
 8026e30:	f003 0304 	and.w	r3, r3, #4
 8026e34:	2b00      	cmp	r3, #0
 8026e36:	f000 8097 	beq.w	8026f68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8026e3a:	2300      	movs	r3, #0
 8026e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8026e3e:	4b81      	ldr	r3, [pc, #516]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026e46:	2b00      	cmp	r3, #0
 8026e48:	d10f      	bne.n	8026e6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8026e4a:	2300      	movs	r3, #0
 8026e4c:	60bb      	str	r3, [r7, #8]
 8026e4e:	4b7d      	ldr	r3, [pc, #500]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e52:	4a7c      	ldr	r2, [pc, #496]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8026e58:	6413      	str	r3, [r2, #64]	; 0x40
 8026e5a:	4b7a      	ldr	r3, [pc, #488]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026e62:	60bb      	str	r3, [r7, #8]
 8026e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8026e66:	2301      	movs	r3, #1
 8026e68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026e6a:	4b77      	ldr	r3, [pc, #476]	; (8027048 <HAL_RCC_OscConfig+0x474>)
 8026e6c:	681b      	ldr	r3, [r3, #0]
 8026e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026e72:	2b00      	cmp	r3, #0
 8026e74:	d118      	bne.n	8026ea8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8026e76:	4b74      	ldr	r3, [pc, #464]	; (8027048 <HAL_RCC_OscConfig+0x474>)
 8026e78:	681b      	ldr	r3, [r3, #0]
 8026e7a:	4a73      	ldr	r2, [pc, #460]	; (8027048 <HAL_RCC_OscConfig+0x474>)
 8026e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8026e82:	f7fc fac9 	bl	8023418 <HAL_GetTick>
 8026e86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026e88:	e008      	b.n	8026e9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8026e8a:	f7fc fac5 	bl	8023418 <HAL_GetTick>
 8026e8e:	4602      	mov	r2, r0
 8026e90:	693b      	ldr	r3, [r7, #16]
 8026e92:	1ad3      	subs	r3, r2, r3
 8026e94:	2b02      	cmp	r3, #2
 8026e96:	d901      	bls.n	8026e9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8026e98:	2303      	movs	r3, #3
 8026e9a:	e10c      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026e9c:	4b6a      	ldr	r3, [pc, #424]	; (8027048 <HAL_RCC_OscConfig+0x474>)
 8026e9e:	681b      	ldr	r3, [r3, #0]
 8026ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026ea4:	2b00      	cmp	r3, #0
 8026ea6:	d0f0      	beq.n	8026e8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8026ea8:	687b      	ldr	r3, [r7, #4]
 8026eaa:	689b      	ldr	r3, [r3, #8]
 8026eac:	2b01      	cmp	r3, #1
 8026eae:	d106      	bne.n	8026ebe <HAL_RCC_OscConfig+0x2ea>
 8026eb0:	4b64      	ldr	r3, [pc, #400]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026eb4:	4a63      	ldr	r2, [pc, #396]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026eb6:	f043 0301 	orr.w	r3, r3, #1
 8026eba:	6713      	str	r3, [r2, #112]	; 0x70
 8026ebc:	e01c      	b.n	8026ef8 <HAL_RCC_OscConfig+0x324>
 8026ebe:	687b      	ldr	r3, [r7, #4]
 8026ec0:	689b      	ldr	r3, [r3, #8]
 8026ec2:	2b05      	cmp	r3, #5
 8026ec4:	d10c      	bne.n	8026ee0 <HAL_RCC_OscConfig+0x30c>
 8026ec6:	4b5f      	ldr	r3, [pc, #380]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026eca:	4a5e      	ldr	r2, [pc, #376]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026ecc:	f043 0304 	orr.w	r3, r3, #4
 8026ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8026ed2:	4b5c      	ldr	r3, [pc, #368]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026ed6:	4a5b      	ldr	r2, [pc, #364]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026ed8:	f043 0301 	orr.w	r3, r3, #1
 8026edc:	6713      	str	r3, [r2, #112]	; 0x70
 8026ede:	e00b      	b.n	8026ef8 <HAL_RCC_OscConfig+0x324>
 8026ee0:	4b58      	ldr	r3, [pc, #352]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026ee4:	4a57      	ldr	r2, [pc, #348]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026ee6:	f023 0301 	bic.w	r3, r3, #1
 8026eea:	6713      	str	r3, [r2, #112]	; 0x70
 8026eec:	4b55      	ldr	r3, [pc, #340]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026ef0:	4a54      	ldr	r2, [pc, #336]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026ef2:	f023 0304 	bic.w	r3, r3, #4
 8026ef6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8026ef8:	687b      	ldr	r3, [r7, #4]
 8026efa:	689b      	ldr	r3, [r3, #8]
 8026efc:	2b00      	cmp	r3, #0
 8026efe:	d015      	beq.n	8026f2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026f00:	f7fc fa8a 	bl	8023418 <HAL_GetTick>
 8026f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026f06:	e00a      	b.n	8026f1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8026f08:	f7fc fa86 	bl	8023418 <HAL_GetTick>
 8026f0c:	4602      	mov	r2, r0
 8026f0e:	693b      	ldr	r3, [r7, #16]
 8026f10:	1ad3      	subs	r3, r2, r3
 8026f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8026f16:	4293      	cmp	r3, r2
 8026f18:	d901      	bls.n	8026f1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8026f1a:	2303      	movs	r3, #3
 8026f1c:	e0cb      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026f1e:	4b49      	ldr	r3, [pc, #292]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f22:	f003 0302 	and.w	r3, r3, #2
 8026f26:	2b00      	cmp	r3, #0
 8026f28:	d0ee      	beq.n	8026f08 <HAL_RCC_OscConfig+0x334>
 8026f2a:	e014      	b.n	8026f56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8026f2c:	f7fc fa74 	bl	8023418 <HAL_GetTick>
 8026f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8026f32:	e00a      	b.n	8026f4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8026f34:	f7fc fa70 	bl	8023418 <HAL_GetTick>
 8026f38:	4602      	mov	r2, r0
 8026f3a:	693b      	ldr	r3, [r7, #16]
 8026f3c:	1ad3      	subs	r3, r2, r3
 8026f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8026f42:	4293      	cmp	r3, r2
 8026f44:	d901      	bls.n	8026f4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8026f46:	2303      	movs	r3, #3
 8026f48:	e0b5      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8026f4a:	4b3e      	ldr	r3, [pc, #248]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f4e:	f003 0302 	and.w	r3, r3, #2
 8026f52:	2b00      	cmp	r3, #0
 8026f54:	d1ee      	bne.n	8026f34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8026f56:	7dfb      	ldrb	r3, [r7, #23]
 8026f58:	2b01      	cmp	r3, #1
 8026f5a:	d105      	bne.n	8026f68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8026f5c:	4b39      	ldr	r3, [pc, #228]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026f60:	4a38      	ldr	r2, [pc, #224]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8026f66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8026f68:	687b      	ldr	r3, [r7, #4]
 8026f6a:	699b      	ldr	r3, [r3, #24]
 8026f6c:	2b00      	cmp	r3, #0
 8026f6e:	f000 80a1 	beq.w	80270b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8026f72:	4b34      	ldr	r3, [pc, #208]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026f74:	689b      	ldr	r3, [r3, #8]
 8026f76:	f003 030c 	and.w	r3, r3, #12
 8026f7a:	2b08      	cmp	r3, #8
 8026f7c:	d05c      	beq.n	8027038 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8026f7e:	687b      	ldr	r3, [r7, #4]
 8026f80:	699b      	ldr	r3, [r3, #24]
 8026f82:	2b02      	cmp	r3, #2
 8026f84:	d141      	bne.n	802700a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026f86:	4b31      	ldr	r3, [pc, #196]	; (802704c <HAL_RCC_OscConfig+0x478>)
 8026f88:	2200      	movs	r2, #0
 8026f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026f8c:	f7fc fa44 	bl	8023418 <HAL_GetTick>
 8026f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026f92:	e008      	b.n	8026fa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026f94:	f7fc fa40 	bl	8023418 <HAL_GetTick>
 8026f98:	4602      	mov	r2, r0
 8026f9a:	693b      	ldr	r3, [r7, #16]
 8026f9c:	1ad3      	subs	r3, r2, r3
 8026f9e:	2b02      	cmp	r3, #2
 8026fa0:	d901      	bls.n	8026fa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8026fa2:	2303      	movs	r3, #3
 8026fa4:	e087      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026fa6:	4b27      	ldr	r3, [pc, #156]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026fa8:	681b      	ldr	r3, [r3, #0]
 8026faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026fae:	2b00      	cmp	r3, #0
 8026fb0:	d1f0      	bne.n	8026f94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8026fb2:	687b      	ldr	r3, [r7, #4]
 8026fb4:	69da      	ldr	r2, [r3, #28]
 8026fb6:	687b      	ldr	r3, [r7, #4]
 8026fb8:	6a1b      	ldr	r3, [r3, #32]
 8026fba:	431a      	orrs	r2, r3
 8026fbc:	687b      	ldr	r3, [r7, #4]
 8026fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026fc0:	019b      	lsls	r3, r3, #6
 8026fc2:	431a      	orrs	r2, r3
 8026fc4:	687b      	ldr	r3, [r7, #4]
 8026fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026fc8:	085b      	lsrs	r3, r3, #1
 8026fca:	3b01      	subs	r3, #1
 8026fcc:	041b      	lsls	r3, r3, #16
 8026fce:	431a      	orrs	r2, r3
 8026fd0:	687b      	ldr	r3, [r7, #4]
 8026fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026fd4:	061b      	lsls	r3, r3, #24
 8026fd6:	491b      	ldr	r1, [pc, #108]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026fd8:	4313      	orrs	r3, r2
 8026fda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8026fdc:	4b1b      	ldr	r3, [pc, #108]	; (802704c <HAL_RCC_OscConfig+0x478>)
 8026fde:	2201      	movs	r2, #1
 8026fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026fe2:	f7fc fa19 	bl	8023418 <HAL_GetTick>
 8026fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026fe8:	e008      	b.n	8026ffc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026fea:	f7fc fa15 	bl	8023418 <HAL_GetTick>
 8026fee:	4602      	mov	r2, r0
 8026ff0:	693b      	ldr	r3, [r7, #16]
 8026ff2:	1ad3      	subs	r3, r2, r3
 8026ff4:	2b02      	cmp	r3, #2
 8026ff6:	d901      	bls.n	8026ffc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8026ff8:	2303      	movs	r3, #3
 8026ffa:	e05c      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026ffc:	4b11      	ldr	r3, [pc, #68]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 8026ffe:	681b      	ldr	r3, [r3, #0]
 8027000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027004:	2b00      	cmp	r3, #0
 8027006:	d0f0      	beq.n	8026fea <HAL_RCC_OscConfig+0x416>
 8027008:	e054      	b.n	80270b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802700a:	4b10      	ldr	r3, [pc, #64]	; (802704c <HAL_RCC_OscConfig+0x478>)
 802700c:	2200      	movs	r2, #0
 802700e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027010:	f7fc fa02 	bl	8023418 <HAL_GetTick>
 8027014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027016:	e008      	b.n	802702a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027018:	f7fc f9fe 	bl	8023418 <HAL_GetTick>
 802701c:	4602      	mov	r2, r0
 802701e:	693b      	ldr	r3, [r7, #16]
 8027020:	1ad3      	subs	r3, r2, r3
 8027022:	2b02      	cmp	r3, #2
 8027024:	d901      	bls.n	802702a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8027026:	2303      	movs	r3, #3
 8027028:	e045      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802702a:	4b06      	ldr	r3, [pc, #24]	; (8027044 <HAL_RCC_OscConfig+0x470>)
 802702c:	681b      	ldr	r3, [r3, #0]
 802702e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027032:	2b00      	cmp	r3, #0
 8027034:	d1f0      	bne.n	8027018 <HAL_RCC_OscConfig+0x444>
 8027036:	e03d      	b.n	80270b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8027038:	687b      	ldr	r3, [r7, #4]
 802703a:	699b      	ldr	r3, [r3, #24]
 802703c:	2b01      	cmp	r3, #1
 802703e:	d107      	bne.n	8027050 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8027040:	2301      	movs	r3, #1
 8027042:	e038      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
 8027044:	40023800 	.word	0x40023800
 8027048:	40007000 	.word	0x40007000
 802704c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8027050:	4b1b      	ldr	r3, [pc, #108]	; (80270c0 <HAL_RCC_OscConfig+0x4ec>)
 8027052:	685b      	ldr	r3, [r3, #4]
 8027054:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8027056:	687b      	ldr	r3, [r7, #4]
 8027058:	699b      	ldr	r3, [r3, #24]
 802705a:	2b01      	cmp	r3, #1
 802705c:	d028      	beq.n	80270b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802705e:	68fb      	ldr	r3, [r7, #12]
 8027060:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8027064:	687b      	ldr	r3, [r7, #4]
 8027066:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8027068:	429a      	cmp	r2, r3
 802706a:	d121      	bne.n	80270b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802706c:	68fb      	ldr	r3, [r7, #12]
 802706e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8027072:	687b      	ldr	r3, [r7, #4]
 8027074:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8027076:	429a      	cmp	r2, r3
 8027078:	d11a      	bne.n	80270b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802707a:	68fa      	ldr	r2, [r7, #12]
 802707c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8027080:	4013      	ands	r3, r2
 8027082:	687a      	ldr	r2, [r7, #4]
 8027084:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8027086:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8027088:	4293      	cmp	r3, r2
 802708a:	d111      	bne.n	80270b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802708c:	68fb      	ldr	r3, [r7, #12]
 802708e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8027092:	687b      	ldr	r3, [r7, #4]
 8027094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027096:	085b      	lsrs	r3, r3, #1
 8027098:	3b01      	subs	r3, #1
 802709a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802709c:	429a      	cmp	r2, r3
 802709e:	d107      	bne.n	80270b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80270a0:	68fb      	ldr	r3, [r7, #12]
 80270a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80270a6:	687b      	ldr	r3, [r7, #4]
 80270a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80270aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80270ac:	429a      	cmp	r2, r3
 80270ae:	d001      	beq.n	80270b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80270b0:	2301      	movs	r3, #1
 80270b2:	e000      	b.n	80270b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80270b4:	2300      	movs	r3, #0
}
 80270b6:	4618      	mov	r0, r3
 80270b8:	3718      	adds	r7, #24
 80270ba:	46bd      	mov	sp, r7
 80270bc:	bd80      	pop	{r7, pc}
 80270be:	bf00      	nop
 80270c0:	40023800 	.word	0x40023800

080270c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80270c4:	b580      	push	{r7, lr}
 80270c6:	b084      	sub	sp, #16
 80270c8:	af00      	add	r7, sp, #0
 80270ca:	6078      	str	r0, [r7, #4]
 80270cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80270ce:	687b      	ldr	r3, [r7, #4]
 80270d0:	2b00      	cmp	r3, #0
 80270d2:	d101      	bne.n	80270d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80270d4:	2301      	movs	r3, #1
 80270d6:	e0cc      	b.n	8027272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80270d8:	4b68      	ldr	r3, [pc, #416]	; (802727c <HAL_RCC_ClockConfig+0x1b8>)
 80270da:	681b      	ldr	r3, [r3, #0]
 80270dc:	f003 030f 	and.w	r3, r3, #15
 80270e0:	683a      	ldr	r2, [r7, #0]
 80270e2:	429a      	cmp	r2, r3
 80270e4:	d90c      	bls.n	8027100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80270e6:	4b65      	ldr	r3, [pc, #404]	; (802727c <HAL_RCC_ClockConfig+0x1b8>)
 80270e8:	683a      	ldr	r2, [r7, #0]
 80270ea:	b2d2      	uxtb	r2, r2
 80270ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80270ee:	4b63      	ldr	r3, [pc, #396]	; (802727c <HAL_RCC_ClockConfig+0x1b8>)
 80270f0:	681b      	ldr	r3, [r3, #0]
 80270f2:	f003 030f 	and.w	r3, r3, #15
 80270f6:	683a      	ldr	r2, [r7, #0]
 80270f8:	429a      	cmp	r2, r3
 80270fa:	d001      	beq.n	8027100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80270fc:	2301      	movs	r3, #1
 80270fe:	e0b8      	b.n	8027272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8027100:	687b      	ldr	r3, [r7, #4]
 8027102:	681b      	ldr	r3, [r3, #0]
 8027104:	f003 0302 	and.w	r3, r3, #2
 8027108:	2b00      	cmp	r3, #0
 802710a:	d020      	beq.n	802714e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802710c:	687b      	ldr	r3, [r7, #4]
 802710e:	681b      	ldr	r3, [r3, #0]
 8027110:	f003 0304 	and.w	r3, r3, #4
 8027114:	2b00      	cmp	r3, #0
 8027116:	d005      	beq.n	8027124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8027118:	4b59      	ldr	r3, [pc, #356]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 802711a:	689b      	ldr	r3, [r3, #8]
 802711c:	4a58      	ldr	r2, [pc, #352]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 802711e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8027122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8027124:	687b      	ldr	r3, [r7, #4]
 8027126:	681b      	ldr	r3, [r3, #0]
 8027128:	f003 0308 	and.w	r3, r3, #8
 802712c:	2b00      	cmp	r3, #0
 802712e:	d005      	beq.n	802713c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8027130:	4b53      	ldr	r3, [pc, #332]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 8027132:	689b      	ldr	r3, [r3, #8]
 8027134:	4a52      	ldr	r2, [pc, #328]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 8027136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802713a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802713c:	4b50      	ldr	r3, [pc, #320]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 802713e:	689b      	ldr	r3, [r3, #8]
 8027140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8027144:	687b      	ldr	r3, [r7, #4]
 8027146:	689b      	ldr	r3, [r3, #8]
 8027148:	494d      	ldr	r1, [pc, #308]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 802714a:	4313      	orrs	r3, r2
 802714c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802714e:	687b      	ldr	r3, [r7, #4]
 8027150:	681b      	ldr	r3, [r3, #0]
 8027152:	f003 0301 	and.w	r3, r3, #1
 8027156:	2b00      	cmp	r3, #0
 8027158:	d044      	beq.n	80271e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802715a:	687b      	ldr	r3, [r7, #4]
 802715c:	685b      	ldr	r3, [r3, #4]
 802715e:	2b01      	cmp	r3, #1
 8027160:	d107      	bne.n	8027172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027162:	4b47      	ldr	r3, [pc, #284]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 8027164:	681b      	ldr	r3, [r3, #0]
 8027166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802716a:	2b00      	cmp	r3, #0
 802716c:	d119      	bne.n	80271a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802716e:	2301      	movs	r3, #1
 8027170:	e07f      	b.n	8027272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8027172:	687b      	ldr	r3, [r7, #4]
 8027174:	685b      	ldr	r3, [r3, #4]
 8027176:	2b02      	cmp	r3, #2
 8027178:	d003      	beq.n	8027182 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802717a:	687b      	ldr	r3, [r7, #4]
 802717c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802717e:	2b03      	cmp	r3, #3
 8027180:	d107      	bne.n	8027192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027182:	4b3f      	ldr	r3, [pc, #252]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 8027184:	681b      	ldr	r3, [r3, #0]
 8027186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802718a:	2b00      	cmp	r3, #0
 802718c:	d109      	bne.n	80271a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802718e:	2301      	movs	r3, #1
 8027190:	e06f      	b.n	8027272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027192:	4b3b      	ldr	r3, [pc, #236]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 8027194:	681b      	ldr	r3, [r3, #0]
 8027196:	f003 0302 	and.w	r3, r3, #2
 802719a:	2b00      	cmp	r3, #0
 802719c:	d101      	bne.n	80271a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802719e:	2301      	movs	r3, #1
 80271a0:	e067      	b.n	8027272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80271a2:	4b37      	ldr	r3, [pc, #220]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 80271a4:	689b      	ldr	r3, [r3, #8]
 80271a6:	f023 0203 	bic.w	r2, r3, #3
 80271aa:	687b      	ldr	r3, [r7, #4]
 80271ac:	685b      	ldr	r3, [r3, #4]
 80271ae:	4934      	ldr	r1, [pc, #208]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 80271b0:	4313      	orrs	r3, r2
 80271b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80271b4:	f7fc f930 	bl	8023418 <HAL_GetTick>
 80271b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80271ba:	e00a      	b.n	80271d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80271bc:	f7fc f92c 	bl	8023418 <HAL_GetTick>
 80271c0:	4602      	mov	r2, r0
 80271c2:	68fb      	ldr	r3, [r7, #12]
 80271c4:	1ad3      	subs	r3, r2, r3
 80271c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80271ca:	4293      	cmp	r3, r2
 80271cc:	d901      	bls.n	80271d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80271ce:	2303      	movs	r3, #3
 80271d0:	e04f      	b.n	8027272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80271d2:	4b2b      	ldr	r3, [pc, #172]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 80271d4:	689b      	ldr	r3, [r3, #8]
 80271d6:	f003 020c 	and.w	r2, r3, #12
 80271da:	687b      	ldr	r3, [r7, #4]
 80271dc:	685b      	ldr	r3, [r3, #4]
 80271de:	009b      	lsls	r3, r3, #2
 80271e0:	429a      	cmp	r2, r3
 80271e2:	d1eb      	bne.n	80271bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80271e4:	4b25      	ldr	r3, [pc, #148]	; (802727c <HAL_RCC_ClockConfig+0x1b8>)
 80271e6:	681b      	ldr	r3, [r3, #0]
 80271e8:	f003 030f 	and.w	r3, r3, #15
 80271ec:	683a      	ldr	r2, [r7, #0]
 80271ee:	429a      	cmp	r2, r3
 80271f0:	d20c      	bcs.n	802720c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80271f2:	4b22      	ldr	r3, [pc, #136]	; (802727c <HAL_RCC_ClockConfig+0x1b8>)
 80271f4:	683a      	ldr	r2, [r7, #0]
 80271f6:	b2d2      	uxtb	r2, r2
 80271f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80271fa:	4b20      	ldr	r3, [pc, #128]	; (802727c <HAL_RCC_ClockConfig+0x1b8>)
 80271fc:	681b      	ldr	r3, [r3, #0]
 80271fe:	f003 030f 	and.w	r3, r3, #15
 8027202:	683a      	ldr	r2, [r7, #0]
 8027204:	429a      	cmp	r2, r3
 8027206:	d001      	beq.n	802720c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8027208:	2301      	movs	r3, #1
 802720a:	e032      	b.n	8027272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802720c:	687b      	ldr	r3, [r7, #4]
 802720e:	681b      	ldr	r3, [r3, #0]
 8027210:	f003 0304 	and.w	r3, r3, #4
 8027214:	2b00      	cmp	r3, #0
 8027216:	d008      	beq.n	802722a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8027218:	4b19      	ldr	r3, [pc, #100]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 802721a:	689b      	ldr	r3, [r3, #8]
 802721c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8027220:	687b      	ldr	r3, [r7, #4]
 8027222:	68db      	ldr	r3, [r3, #12]
 8027224:	4916      	ldr	r1, [pc, #88]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 8027226:	4313      	orrs	r3, r2
 8027228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802722a:	687b      	ldr	r3, [r7, #4]
 802722c:	681b      	ldr	r3, [r3, #0]
 802722e:	f003 0308 	and.w	r3, r3, #8
 8027232:	2b00      	cmp	r3, #0
 8027234:	d009      	beq.n	802724a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8027236:	4b12      	ldr	r3, [pc, #72]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 8027238:	689b      	ldr	r3, [r3, #8]
 802723a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802723e:	687b      	ldr	r3, [r7, #4]
 8027240:	691b      	ldr	r3, [r3, #16]
 8027242:	00db      	lsls	r3, r3, #3
 8027244:	490e      	ldr	r1, [pc, #56]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 8027246:	4313      	orrs	r3, r2
 8027248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802724a:	f000 f821 	bl	8027290 <HAL_RCC_GetSysClockFreq>
 802724e:	4602      	mov	r2, r0
 8027250:	4b0b      	ldr	r3, [pc, #44]	; (8027280 <HAL_RCC_ClockConfig+0x1bc>)
 8027252:	689b      	ldr	r3, [r3, #8]
 8027254:	091b      	lsrs	r3, r3, #4
 8027256:	f003 030f 	and.w	r3, r3, #15
 802725a:	490a      	ldr	r1, [pc, #40]	; (8027284 <HAL_RCC_ClockConfig+0x1c0>)
 802725c:	5ccb      	ldrb	r3, [r1, r3]
 802725e:	fa22 f303 	lsr.w	r3, r2, r3
 8027262:	4a09      	ldr	r2, [pc, #36]	; (8027288 <HAL_RCC_ClockConfig+0x1c4>)
 8027264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8027266:	4b09      	ldr	r3, [pc, #36]	; (802728c <HAL_RCC_ClockConfig+0x1c8>)
 8027268:	681b      	ldr	r3, [r3, #0]
 802726a:	4618      	mov	r0, r3
 802726c:	f7fa fcf0 	bl	8021c50 <HAL_InitTick>

  return HAL_OK;
 8027270:	2300      	movs	r3, #0
}
 8027272:	4618      	mov	r0, r3
 8027274:	3710      	adds	r7, #16
 8027276:	46bd      	mov	sp, r7
 8027278:	bd80      	pop	{r7, pc}
 802727a:	bf00      	nop
 802727c:	40023c00 	.word	0x40023c00
 8027280:	40023800 	.word	0x40023800
 8027284:	0802f1f8 	.word	0x0802f1f8
 8027288:	20000000 	.word	0x20000000
 802728c:	20000054 	.word	0x20000054

08027290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8027290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8027294:	b094      	sub	sp, #80	; 0x50
 8027296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8027298:	2300      	movs	r3, #0
 802729a:	647b      	str	r3, [r7, #68]	; 0x44
 802729c:	2300      	movs	r3, #0
 802729e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80272a0:	2300      	movs	r3, #0
 80272a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80272a4:	2300      	movs	r3, #0
 80272a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80272a8:	4b79      	ldr	r3, [pc, #484]	; (8027490 <HAL_RCC_GetSysClockFreq+0x200>)
 80272aa:	689b      	ldr	r3, [r3, #8]
 80272ac:	f003 030c 	and.w	r3, r3, #12
 80272b0:	2b08      	cmp	r3, #8
 80272b2:	d00d      	beq.n	80272d0 <HAL_RCC_GetSysClockFreq+0x40>
 80272b4:	2b08      	cmp	r3, #8
 80272b6:	f200 80e1 	bhi.w	802747c <HAL_RCC_GetSysClockFreq+0x1ec>
 80272ba:	2b00      	cmp	r3, #0
 80272bc:	d002      	beq.n	80272c4 <HAL_RCC_GetSysClockFreq+0x34>
 80272be:	2b04      	cmp	r3, #4
 80272c0:	d003      	beq.n	80272ca <HAL_RCC_GetSysClockFreq+0x3a>
 80272c2:	e0db      	b.n	802747c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80272c4:	4b73      	ldr	r3, [pc, #460]	; (8027494 <HAL_RCC_GetSysClockFreq+0x204>)
 80272c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80272c8:	e0db      	b.n	8027482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80272ca:	4b73      	ldr	r3, [pc, #460]	; (8027498 <HAL_RCC_GetSysClockFreq+0x208>)
 80272cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80272ce:	e0d8      	b.n	8027482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80272d0:	4b6f      	ldr	r3, [pc, #444]	; (8027490 <HAL_RCC_GetSysClockFreq+0x200>)
 80272d2:	685b      	ldr	r3, [r3, #4]
 80272d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80272d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80272da:	4b6d      	ldr	r3, [pc, #436]	; (8027490 <HAL_RCC_GetSysClockFreq+0x200>)
 80272dc:	685b      	ldr	r3, [r3, #4]
 80272de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80272e2:	2b00      	cmp	r3, #0
 80272e4:	d063      	beq.n	80273ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80272e6:	4b6a      	ldr	r3, [pc, #424]	; (8027490 <HAL_RCC_GetSysClockFreq+0x200>)
 80272e8:	685b      	ldr	r3, [r3, #4]
 80272ea:	099b      	lsrs	r3, r3, #6
 80272ec:	2200      	movs	r2, #0
 80272ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80272f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80272f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80272f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80272f8:	633b      	str	r3, [r7, #48]	; 0x30
 80272fa:	2300      	movs	r3, #0
 80272fc:	637b      	str	r3, [r7, #52]	; 0x34
 80272fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8027302:	4622      	mov	r2, r4
 8027304:	462b      	mov	r3, r5
 8027306:	f04f 0000 	mov.w	r0, #0
 802730a:	f04f 0100 	mov.w	r1, #0
 802730e:	0159      	lsls	r1, r3, #5
 8027310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8027314:	0150      	lsls	r0, r2, #5
 8027316:	4602      	mov	r2, r0
 8027318:	460b      	mov	r3, r1
 802731a:	4621      	mov	r1, r4
 802731c:	1a51      	subs	r1, r2, r1
 802731e:	6139      	str	r1, [r7, #16]
 8027320:	4629      	mov	r1, r5
 8027322:	eb63 0301 	sbc.w	r3, r3, r1
 8027326:	617b      	str	r3, [r7, #20]
 8027328:	f04f 0200 	mov.w	r2, #0
 802732c:	f04f 0300 	mov.w	r3, #0
 8027330:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8027334:	4659      	mov	r1, fp
 8027336:	018b      	lsls	r3, r1, #6
 8027338:	4651      	mov	r1, sl
 802733a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 802733e:	4651      	mov	r1, sl
 8027340:	018a      	lsls	r2, r1, #6
 8027342:	4651      	mov	r1, sl
 8027344:	ebb2 0801 	subs.w	r8, r2, r1
 8027348:	4659      	mov	r1, fp
 802734a:	eb63 0901 	sbc.w	r9, r3, r1
 802734e:	f04f 0200 	mov.w	r2, #0
 8027352:	f04f 0300 	mov.w	r3, #0
 8027356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802735a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802735e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8027362:	4690      	mov	r8, r2
 8027364:	4699      	mov	r9, r3
 8027366:	4623      	mov	r3, r4
 8027368:	eb18 0303 	adds.w	r3, r8, r3
 802736c:	60bb      	str	r3, [r7, #8]
 802736e:	462b      	mov	r3, r5
 8027370:	eb49 0303 	adc.w	r3, r9, r3
 8027374:	60fb      	str	r3, [r7, #12]
 8027376:	f04f 0200 	mov.w	r2, #0
 802737a:	f04f 0300 	mov.w	r3, #0
 802737e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8027382:	4629      	mov	r1, r5
 8027384:	024b      	lsls	r3, r1, #9
 8027386:	4621      	mov	r1, r4
 8027388:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 802738c:	4621      	mov	r1, r4
 802738e:	024a      	lsls	r2, r1, #9
 8027390:	4610      	mov	r0, r2
 8027392:	4619      	mov	r1, r3
 8027394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027396:	2200      	movs	r2, #0
 8027398:	62bb      	str	r3, [r7, #40]	; 0x28
 802739a:	62fa      	str	r2, [r7, #44]	; 0x2c
 802739c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80273a0:	f7f8 ff76 	bl	8020290 <__aeabi_uldivmod>
 80273a4:	4602      	mov	r2, r0
 80273a6:	460b      	mov	r3, r1
 80273a8:	4613      	mov	r3, r2
 80273aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80273ac:	e058      	b.n	8027460 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80273ae:	4b38      	ldr	r3, [pc, #224]	; (8027490 <HAL_RCC_GetSysClockFreq+0x200>)
 80273b0:	685b      	ldr	r3, [r3, #4]
 80273b2:	099b      	lsrs	r3, r3, #6
 80273b4:	2200      	movs	r2, #0
 80273b6:	4618      	mov	r0, r3
 80273b8:	4611      	mov	r1, r2
 80273ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80273be:	623b      	str	r3, [r7, #32]
 80273c0:	2300      	movs	r3, #0
 80273c2:	627b      	str	r3, [r7, #36]	; 0x24
 80273c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80273c8:	4642      	mov	r2, r8
 80273ca:	464b      	mov	r3, r9
 80273cc:	f04f 0000 	mov.w	r0, #0
 80273d0:	f04f 0100 	mov.w	r1, #0
 80273d4:	0159      	lsls	r1, r3, #5
 80273d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80273da:	0150      	lsls	r0, r2, #5
 80273dc:	4602      	mov	r2, r0
 80273de:	460b      	mov	r3, r1
 80273e0:	4641      	mov	r1, r8
 80273e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80273e6:	4649      	mov	r1, r9
 80273e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80273ec:	f04f 0200 	mov.w	r2, #0
 80273f0:	f04f 0300 	mov.w	r3, #0
 80273f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80273f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80273fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8027400:	ebb2 040a 	subs.w	r4, r2, sl
 8027404:	eb63 050b 	sbc.w	r5, r3, fp
 8027408:	f04f 0200 	mov.w	r2, #0
 802740c:	f04f 0300 	mov.w	r3, #0
 8027410:	00eb      	lsls	r3, r5, #3
 8027412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8027416:	00e2      	lsls	r2, r4, #3
 8027418:	4614      	mov	r4, r2
 802741a:	461d      	mov	r5, r3
 802741c:	4643      	mov	r3, r8
 802741e:	18e3      	adds	r3, r4, r3
 8027420:	603b      	str	r3, [r7, #0]
 8027422:	464b      	mov	r3, r9
 8027424:	eb45 0303 	adc.w	r3, r5, r3
 8027428:	607b      	str	r3, [r7, #4]
 802742a:	f04f 0200 	mov.w	r2, #0
 802742e:	f04f 0300 	mov.w	r3, #0
 8027432:	e9d7 4500 	ldrd	r4, r5, [r7]
 8027436:	4629      	mov	r1, r5
 8027438:	028b      	lsls	r3, r1, #10
 802743a:	4621      	mov	r1, r4
 802743c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8027440:	4621      	mov	r1, r4
 8027442:	028a      	lsls	r2, r1, #10
 8027444:	4610      	mov	r0, r2
 8027446:	4619      	mov	r1, r3
 8027448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802744a:	2200      	movs	r2, #0
 802744c:	61bb      	str	r3, [r7, #24]
 802744e:	61fa      	str	r2, [r7, #28]
 8027450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8027454:	f7f8 ff1c 	bl	8020290 <__aeabi_uldivmod>
 8027458:	4602      	mov	r2, r0
 802745a:	460b      	mov	r3, r1
 802745c:	4613      	mov	r3, r2
 802745e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8027460:	4b0b      	ldr	r3, [pc, #44]	; (8027490 <HAL_RCC_GetSysClockFreq+0x200>)
 8027462:	685b      	ldr	r3, [r3, #4]
 8027464:	0c1b      	lsrs	r3, r3, #16
 8027466:	f003 0303 	and.w	r3, r3, #3
 802746a:	3301      	adds	r3, #1
 802746c:	005b      	lsls	r3, r3, #1
 802746e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8027470:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8027472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027474:	fbb2 f3f3 	udiv	r3, r2, r3
 8027478:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 802747a:	e002      	b.n	8027482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802747c:	4b05      	ldr	r3, [pc, #20]	; (8027494 <HAL_RCC_GetSysClockFreq+0x204>)
 802747e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8027482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8027484:	4618      	mov	r0, r3
 8027486:	3750      	adds	r7, #80	; 0x50
 8027488:	46bd      	mov	sp, r7
 802748a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802748e:	bf00      	nop
 8027490:	40023800 	.word	0x40023800
 8027494:	00f42400 	.word	0x00f42400
 8027498:	007a1200 	.word	0x007a1200

0802749c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802749c:	b480      	push	{r7}
 802749e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80274a0:	4b03      	ldr	r3, [pc, #12]	; (80274b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80274a2:	681b      	ldr	r3, [r3, #0]
}
 80274a4:	4618      	mov	r0, r3
 80274a6:	46bd      	mov	sp, r7
 80274a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274ac:	4770      	bx	lr
 80274ae:	bf00      	nop
 80274b0:	20000000 	.word	0x20000000

080274b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80274b4:	b580      	push	{r7, lr}
 80274b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80274b8:	f7ff fff0 	bl	802749c <HAL_RCC_GetHCLKFreq>
 80274bc:	4602      	mov	r2, r0
 80274be:	4b05      	ldr	r3, [pc, #20]	; (80274d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80274c0:	689b      	ldr	r3, [r3, #8]
 80274c2:	0a9b      	lsrs	r3, r3, #10
 80274c4:	f003 0307 	and.w	r3, r3, #7
 80274c8:	4903      	ldr	r1, [pc, #12]	; (80274d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80274ca:	5ccb      	ldrb	r3, [r1, r3]
 80274cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80274d0:	4618      	mov	r0, r3
 80274d2:	bd80      	pop	{r7, pc}
 80274d4:	40023800 	.word	0x40023800
 80274d8:	0802f208 	.word	0x0802f208

080274dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80274dc:	b580      	push	{r7, lr}
 80274de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80274e0:	f7ff ffdc 	bl	802749c <HAL_RCC_GetHCLKFreq>
 80274e4:	4602      	mov	r2, r0
 80274e6:	4b05      	ldr	r3, [pc, #20]	; (80274fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80274e8:	689b      	ldr	r3, [r3, #8]
 80274ea:	0b5b      	lsrs	r3, r3, #13
 80274ec:	f003 0307 	and.w	r3, r3, #7
 80274f0:	4903      	ldr	r1, [pc, #12]	; (8027500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80274f2:	5ccb      	ldrb	r3, [r1, r3]
 80274f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80274f8:	4618      	mov	r0, r3
 80274fa:	bd80      	pop	{r7, pc}
 80274fc:	40023800 	.word	0x40023800
 8027500:	0802f208 	.word	0x0802f208

08027504 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8027504:	b480      	push	{r7}
 8027506:	b083      	sub	sp, #12
 8027508:	af00      	add	r7, sp, #0
 802750a:	6078      	str	r0, [r7, #4]
 802750c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 802750e:	687b      	ldr	r3, [r7, #4]
 8027510:	220f      	movs	r2, #15
 8027512:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8027514:	4b12      	ldr	r3, [pc, #72]	; (8027560 <HAL_RCC_GetClockConfig+0x5c>)
 8027516:	689b      	ldr	r3, [r3, #8]
 8027518:	f003 0203 	and.w	r2, r3, #3
 802751c:	687b      	ldr	r3, [r7, #4]
 802751e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8027520:	4b0f      	ldr	r3, [pc, #60]	; (8027560 <HAL_RCC_GetClockConfig+0x5c>)
 8027522:	689b      	ldr	r3, [r3, #8]
 8027524:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8027528:	687b      	ldr	r3, [r7, #4]
 802752a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 802752c:	4b0c      	ldr	r3, [pc, #48]	; (8027560 <HAL_RCC_GetClockConfig+0x5c>)
 802752e:	689b      	ldr	r3, [r3, #8]
 8027530:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027534:	687b      	ldr	r3, [r7, #4]
 8027536:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8027538:	4b09      	ldr	r3, [pc, #36]	; (8027560 <HAL_RCC_GetClockConfig+0x5c>)
 802753a:	689b      	ldr	r3, [r3, #8]
 802753c:	08db      	lsrs	r3, r3, #3
 802753e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027542:	687b      	ldr	r3, [r7, #4]
 8027544:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8027546:	4b07      	ldr	r3, [pc, #28]	; (8027564 <HAL_RCC_GetClockConfig+0x60>)
 8027548:	681b      	ldr	r3, [r3, #0]
 802754a:	f003 020f 	and.w	r2, r3, #15
 802754e:	683b      	ldr	r3, [r7, #0]
 8027550:	601a      	str	r2, [r3, #0]
}
 8027552:	bf00      	nop
 8027554:	370c      	adds	r7, #12
 8027556:	46bd      	mov	sp, r7
 8027558:	f85d 7b04 	ldr.w	r7, [sp], #4
 802755c:	4770      	bx	lr
 802755e:	bf00      	nop
 8027560:	40023800 	.word	0x40023800
 8027564:	40023c00 	.word	0x40023c00

08027568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8027568:	b580      	push	{r7, lr}
 802756a:	b086      	sub	sp, #24
 802756c:	af00      	add	r7, sp, #0
 802756e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027570:	2300      	movs	r3, #0
 8027572:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8027574:	2300      	movs	r3, #0
 8027576:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8027578:	687b      	ldr	r3, [r7, #4]
 802757a:	681b      	ldr	r3, [r3, #0]
 802757c:	f003 0301 	and.w	r3, r3, #1
 8027580:	2b00      	cmp	r3, #0
 8027582:	d10b      	bne.n	802759c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8027584:	687b      	ldr	r3, [r7, #4]
 8027586:	681b      	ldr	r3, [r3, #0]
 8027588:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 802758c:	2b00      	cmp	r3, #0
 802758e:	d105      	bne.n	802759c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8027590:	687b      	ldr	r3, [r7, #4]
 8027592:	681b      	ldr	r3, [r3, #0]
 8027594:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8027598:	2b00      	cmp	r3, #0
 802759a:	d075      	beq.n	8027688 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 802759c:	4b91      	ldr	r3, [pc, #580]	; (80277e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 802759e:	2200      	movs	r2, #0
 80275a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80275a2:	f7fb ff39 	bl	8023418 <HAL_GetTick>
 80275a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80275a8:	e008      	b.n	80275bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80275aa:	f7fb ff35 	bl	8023418 <HAL_GetTick>
 80275ae:	4602      	mov	r2, r0
 80275b0:	697b      	ldr	r3, [r7, #20]
 80275b2:	1ad3      	subs	r3, r2, r3
 80275b4:	2b02      	cmp	r3, #2
 80275b6:	d901      	bls.n	80275bc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80275b8:	2303      	movs	r3, #3
 80275ba:	e189      	b.n	80278d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80275bc:	4b8a      	ldr	r3, [pc, #552]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80275be:	681b      	ldr	r3, [r3, #0]
 80275c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80275c4:	2b00      	cmp	r3, #0
 80275c6:	d1f0      	bne.n	80275aa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80275c8:	687b      	ldr	r3, [r7, #4]
 80275ca:	681b      	ldr	r3, [r3, #0]
 80275cc:	f003 0301 	and.w	r3, r3, #1
 80275d0:	2b00      	cmp	r3, #0
 80275d2:	d009      	beq.n	80275e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80275d4:	687b      	ldr	r3, [r7, #4]
 80275d6:	685b      	ldr	r3, [r3, #4]
 80275d8:	019a      	lsls	r2, r3, #6
 80275da:	687b      	ldr	r3, [r7, #4]
 80275dc:	689b      	ldr	r3, [r3, #8]
 80275de:	071b      	lsls	r3, r3, #28
 80275e0:	4981      	ldr	r1, [pc, #516]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80275e2:	4313      	orrs	r3, r2
 80275e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80275e8:	687b      	ldr	r3, [r7, #4]
 80275ea:	681b      	ldr	r3, [r3, #0]
 80275ec:	f003 0302 	and.w	r3, r3, #2
 80275f0:	2b00      	cmp	r3, #0
 80275f2:	d01f      	beq.n	8027634 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80275f4:	4b7c      	ldr	r3, [pc, #496]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80275f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80275fa:	0f1b      	lsrs	r3, r3, #28
 80275fc:	f003 0307 	and.w	r3, r3, #7
 8027600:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8027602:	687b      	ldr	r3, [r7, #4]
 8027604:	685b      	ldr	r3, [r3, #4]
 8027606:	019a      	lsls	r2, r3, #6
 8027608:	687b      	ldr	r3, [r7, #4]
 802760a:	68db      	ldr	r3, [r3, #12]
 802760c:	061b      	lsls	r3, r3, #24
 802760e:	431a      	orrs	r2, r3
 8027610:	693b      	ldr	r3, [r7, #16]
 8027612:	071b      	lsls	r3, r3, #28
 8027614:	4974      	ldr	r1, [pc, #464]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027616:	4313      	orrs	r3, r2
 8027618:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 802761c:	4b72      	ldr	r3, [pc, #456]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802761e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027622:	f023 021f 	bic.w	r2, r3, #31
 8027626:	687b      	ldr	r3, [r7, #4]
 8027628:	69db      	ldr	r3, [r3, #28]
 802762a:	3b01      	subs	r3, #1
 802762c:	496e      	ldr	r1, [pc, #440]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802762e:	4313      	orrs	r3, r2
 8027630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8027634:	687b      	ldr	r3, [r7, #4]
 8027636:	681b      	ldr	r3, [r3, #0]
 8027638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802763c:	2b00      	cmp	r3, #0
 802763e:	d00d      	beq.n	802765c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8027640:	687b      	ldr	r3, [r7, #4]
 8027642:	685b      	ldr	r3, [r3, #4]
 8027644:	019a      	lsls	r2, r3, #6
 8027646:	687b      	ldr	r3, [r7, #4]
 8027648:	68db      	ldr	r3, [r3, #12]
 802764a:	061b      	lsls	r3, r3, #24
 802764c:	431a      	orrs	r2, r3
 802764e:	687b      	ldr	r3, [r7, #4]
 8027650:	689b      	ldr	r3, [r3, #8]
 8027652:	071b      	lsls	r3, r3, #28
 8027654:	4964      	ldr	r1, [pc, #400]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027656:	4313      	orrs	r3, r2
 8027658:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 802765c:	4b61      	ldr	r3, [pc, #388]	; (80277e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 802765e:	2201      	movs	r2, #1
 8027660:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027662:	f7fb fed9 	bl	8023418 <HAL_GetTick>
 8027666:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027668:	e008      	b.n	802767c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802766a:	f7fb fed5 	bl	8023418 <HAL_GetTick>
 802766e:	4602      	mov	r2, r0
 8027670:	697b      	ldr	r3, [r7, #20]
 8027672:	1ad3      	subs	r3, r2, r3
 8027674:	2b02      	cmp	r3, #2
 8027676:	d901      	bls.n	802767c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027678:	2303      	movs	r3, #3
 802767a:	e129      	b.n	80278d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802767c:	4b5a      	ldr	r3, [pc, #360]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802767e:	681b      	ldr	r3, [r3, #0]
 8027680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027684:	2b00      	cmp	r3, #0
 8027686:	d0f0      	beq.n	802766a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8027688:	687b      	ldr	r3, [r7, #4]
 802768a:	681b      	ldr	r3, [r3, #0]
 802768c:	f003 0304 	and.w	r3, r3, #4
 8027690:	2b00      	cmp	r3, #0
 8027692:	d105      	bne.n	80276a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8027694:	687b      	ldr	r3, [r7, #4]
 8027696:	681b      	ldr	r3, [r3, #0]
 8027698:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 802769c:	2b00      	cmp	r3, #0
 802769e:	d079      	beq.n	8027794 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80276a0:	4b52      	ldr	r3, [pc, #328]	; (80277ec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80276a2:	2200      	movs	r2, #0
 80276a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80276a6:	f7fb feb7 	bl	8023418 <HAL_GetTick>
 80276aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80276ac:	e008      	b.n	80276c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80276ae:	f7fb feb3 	bl	8023418 <HAL_GetTick>
 80276b2:	4602      	mov	r2, r0
 80276b4:	697b      	ldr	r3, [r7, #20]
 80276b6:	1ad3      	subs	r3, r2, r3
 80276b8:	2b02      	cmp	r3, #2
 80276ba:	d901      	bls.n	80276c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80276bc:	2303      	movs	r3, #3
 80276be:	e107      	b.n	80278d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80276c0:	4b49      	ldr	r3, [pc, #292]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80276c2:	681b      	ldr	r3, [r3, #0]
 80276c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80276c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80276cc:	d0ef      	beq.n	80276ae <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80276ce:	687b      	ldr	r3, [r7, #4]
 80276d0:	681b      	ldr	r3, [r3, #0]
 80276d2:	f003 0304 	and.w	r3, r3, #4
 80276d6:	2b00      	cmp	r3, #0
 80276d8:	d020      	beq.n	802771c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80276da:	4b43      	ldr	r3, [pc, #268]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80276dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80276e0:	0f1b      	lsrs	r3, r3, #28
 80276e2:	f003 0307 	and.w	r3, r3, #7
 80276e6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80276e8:	687b      	ldr	r3, [r7, #4]
 80276ea:	691b      	ldr	r3, [r3, #16]
 80276ec:	019a      	lsls	r2, r3, #6
 80276ee:	687b      	ldr	r3, [r7, #4]
 80276f0:	695b      	ldr	r3, [r3, #20]
 80276f2:	061b      	lsls	r3, r3, #24
 80276f4:	431a      	orrs	r2, r3
 80276f6:	693b      	ldr	r3, [r7, #16]
 80276f8:	071b      	lsls	r3, r3, #28
 80276fa:	493b      	ldr	r1, [pc, #236]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80276fc:	4313      	orrs	r3, r2
 80276fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8027702:	4b39      	ldr	r3, [pc, #228]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027708:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 802770c:	687b      	ldr	r3, [r7, #4]
 802770e:	6a1b      	ldr	r3, [r3, #32]
 8027710:	3b01      	subs	r3, #1
 8027712:	021b      	lsls	r3, r3, #8
 8027714:	4934      	ldr	r1, [pc, #208]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027716:	4313      	orrs	r3, r2
 8027718:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 802771c:	687b      	ldr	r3, [r7, #4]
 802771e:	681b      	ldr	r3, [r3, #0]
 8027720:	f003 0308 	and.w	r3, r3, #8
 8027724:	2b00      	cmp	r3, #0
 8027726:	d01e      	beq.n	8027766 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8027728:	4b2f      	ldr	r3, [pc, #188]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802772a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802772e:	0e1b      	lsrs	r3, r3, #24
 8027730:	f003 030f 	and.w	r3, r3, #15
 8027734:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8027736:	687b      	ldr	r3, [r7, #4]
 8027738:	691b      	ldr	r3, [r3, #16]
 802773a:	019a      	lsls	r2, r3, #6
 802773c:	693b      	ldr	r3, [r7, #16]
 802773e:	061b      	lsls	r3, r3, #24
 8027740:	431a      	orrs	r2, r3
 8027742:	687b      	ldr	r3, [r7, #4]
 8027744:	699b      	ldr	r3, [r3, #24]
 8027746:	071b      	lsls	r3, r3, #28
 8027748:	4927      	ldr	r1, [pc, #156]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802774a:	4313      	orrs	r3, r2
 802774c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8027750:	4b25      	ldr	r3, [pc, #148]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027756:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802775a:	687b      	ldr	r3, [r7, #4]
 802775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802775e:	4922      	ldr	r1, [pc, #136]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027760:	4313      	orrs	r3, r2
 8027762:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8027766:	4b21      	ldr	r3, [pc, #132]	; (80277ec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8027768:	2201      	movs	r2, #1
 802776a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802776c:	f7fb fe54 	bl	8023418 <HAL_GetTick>
 8027770:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8027772:	e008      	b.n	8027786 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8027774:	f7fb fe50 	bl	8023418 <HAL_GetTick>
 8027778:	4602      	mov	r2, r0
 802777a:	697b      	ldr	r3, [r7, #20]
 802777c:	1ad3      	subs	r3, r2, r3
 802777e:	2b02      	cmp	r3, #2
 8027780:	d901      	bls.n	8027786 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027782:	2303      	movs	r3, #3
 8027784:	e0a4      	b.n	80278d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8027786:	4b18      	ldr	r3, [pc, #96]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027788:	681b      	ldr	r3, [r3, #0]
 802778a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802778e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027792:	d1ef      	bne.n	8027774 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8027794:	687b      	ldr	r3, [r7, #4]
 8027796:	681b      	ldr	r3, [r3, #0]
 8027798:	f003 0320 	and.w	r3, r3, #32
 802779c:	2b00      	cmp	r3, #0
 802779e:	f000 808b 	beq.w	80278b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80277a2:	2300      	movs	r3, #0
 80277a4:	60fb      	str	r3, [r7, #12]
 80277a6:	4b10      	ldr	r3, [pc, #64]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80277a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80277aa:	4a0f      	ldr	r2, [pc, #60]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80277ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80277b0:	6413      	str	r3, [r2, #64]	; 0x40
 80277b2:	4b0d      	ldr	r3, [pc, #52]	; (80277e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80277b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80277b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80277ba:	60fb      	str	r3, [r7, #12]
 80277bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80277be:	4b0c      	ldr	r3, [pc, #48]	; (80277f0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80277c0:	681b      	ldr	r3, [r3, #0]
 80277c2:	4a0b      	ldr	r2, [pc, #44]	; (80277f0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80277c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80277c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80277ca:	f7fb fe25 	bl	8023418 <HAL_GetTick>
 80277ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80277d0:	e010      	b.n	80277f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80277d2:	f7fb fe21 	bl	8023418 <HAL_GetTick>
 80277d6:	4602      	mov	r2, r0
 80277d8:	697b      	ldr	r3, [r7, #20]
 80277da:	1ad3      	subs	r3, r2, r3
 80277dc:	2b02      	cmp	r3, #2
 80277de:	d909      	bls.n	80277f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80277e0:	2303      	movs	r3, #3
 80277e2:	e075      	b.n	80278d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80277e4:	42470068 	.word	0x42470068
 80277e8:	40023800 	.word	0x40023800
 80277ec:	42470070 	.word	0x42470070
 80277f0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80277f4:	4b38      	ldr	r3, [pc, #224]	; (80278d8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80277f6:	681b      	ldr	r3, [r3, #0]
 80277f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80277fc:	2b00      	cmp	r3, #0
 80277fe:	d0e8      	beq.n	80277d2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8027800:	4b36      	ldr	r3, [pc, #216]	; (80278dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027808:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 802780a:	693b      	ldr	r3, [r7, #16]
 802780c:	2b00      	cmp	r3, #0
 802780e:	d02f      	beq.n	8027870 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8027810:	687b      	ldr	r3, [r7, #4]
 8027812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027818:	693a      	ldr	r2, [r7, #16]
 802781a:	429a      	cmp	r2, r3
 802781c:	d028      	beq.n	8027870 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 802781e:	4b2f      	ldr	r3, [pc, #188]	; (80278dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027826:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8027828:	4b2d      	ldr	r3, [pc, #180]	; (80278e0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 802782a:	2201      	movs	r2, #1
 802782c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 802782e:	4b2c      	ldr	r3, [pc, #176]	; (80278e0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8027830:	2200      	movs	r2, #0
 8027832:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8027834:	4a29      	ldr	r2, [pc, #164]	; (80278dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027836:	693b      	ldr	r3, [r7, #16]
 8027838:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 802783a:	4b28      	ldr	r3, [pc, #160]	; (80278dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802783c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802783e:	f003 0301 	and.w	r3, r3, #1
 8027842:	2b01      	cmp	r3, #1
 8027844:	d114      	bne.n	8027870 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8027846:	f7fb fde7 	bl	8023418 <HAL_GetTick>
 802784a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802784c:	e00a      	b.n	8027864 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802784e:	f7fb fde3 	bl	8023418 <HAL_GetTick>
 8027852:	4602      	mov	r2, r0
 8027854:	697b      	ldr	r3, [r7, #20]
 8027856:	1ad3      	subs	r3, r2, r3
 8027858:	f241 3288 	movw	r2, #5000	; 0x1388
 802785c:	4293      	cmp	r3, r2
 802785e:	d901      	bls.n	8027864 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8027860:	2303      	movs	r3, #3
 8027862:	e035      	b.n	80278d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027864:	4b1d      	ldr	r3, [pc, #116]	; (80278dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027868:	f003 0302 	and.w	r3, r3, #2
 802786c:	2b00      	cmp	r3, #0
 802786e:	d0ee      	beq.n	802784e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8027870:	687b      	ldr	r3, [r7, #4]
 8027872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802787c:	d10d      	bne.n	802789a <HAL_RCCEx_PeriphCLKConfig+0x332>
 802787e:	4b17      	ldr	r3, [pc, #92]	; (80278dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027880:	689b      	ldr	r3, [r3, #8]
 8027882:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8027886:	687b      	ldr	r3, [r7, #4]
 8027888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802788a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802788e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027892:	4912      	ldr	r1, [pc, #72]	; (80278dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027894:	4313      	orrs	r3, r2
 8027896:	608b      	str	r3, [r1, #8]
 8027898:	e005      	b.n	80278a6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 802789a:	4b10      	ldr	r3, [pc, #64]	; (80278dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802789c:	689b      	ldr	r3, [r3, #8]
 802789e:	4a0f      	ldr	r2, [pc, #60]	; (80278dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80278a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80278a4:	6093      	str	r3, [r2, #8]
 80278a6:	4b0d      	ldr	r3, [pc, #52]	; (80278dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80278a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80278aa:	687b      	ldr	r3, [r7, #4]
 80278ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80278ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80278b2:	490a      	ldr	r1, [pc, #40]	; (80278dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80278b4:	4313      	orrs	r3, r2
 80278b6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80278b8:	687b      	ldr	r3, [r7, #4]
 80278ba:	681b      	ldr	r3, [r3, #0]
 80278bc:	f003 0310 	and.w	r3, r3, #16
 80278c0:	2b00      	cmp	r3, #0
 80278c2:	d004      	beq.n	80278ce <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80278c4:	687b      	ldr	r3, [r7, #4]
 80278c6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80278ca:	4b06      	ldr	r3, [pc, #24]	; (80278e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80278cc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80278ce:	2300      	movs	r3, #0
}
 80278d0:	4618      	mov	r0, r3
 80278d2:	3718      	adds	r7, #24
 80278d4:	46bd      	mov	sp, r7
 80278d6:	bd80      	pop	{r7, pc}
 80278d8:	40007000 	.word	0x40007000
 80278dc:	40023800 	.word	0x40023800
 80278e0:	42470e40 	.word	0x42470e40
 80278e4:	424711e0 	.word	0x424711e0

080278e8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80278e8:	b580      	push	{r7, lr}
 80278ea:	b082      	sub	sp, #8
 80278ec:	af00      	add	r7, sp, #0
 80278ee:	6078      	str	r0, [r7, #4]
 80278f0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80278f2:	687b      	ldr	r3, [r7, #4]
 80278f4:	2b00      	cmp	r3, #0
 80278f6:	d101      	bne.n	80278fc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80278f8:	2301      	movs	r3, #1
 80278fa:	e025      	b.n	8027948 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80278fc:	687b      	ldr	r3, [r7, #4]
 80278fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8027902:	b2db      	uxtb	r3, r3
 8027904:	2b00      	cmp	r3, #0
 8027906:	d106      	bne.n	8027916 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8027908:	687b      	ldr	r3, [r7, #4]
 802790a:	2200      	movs	r2, #0
 802790c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8027910:	6878      	ldr	r0, [r7, #4]
 8027912:	f7fa f993 	bl	8021c3c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8027916:	687b      	ldr	r3, [r7, #4]
 8027918:	2202      	movs	r2, #2
 802791a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 802791e:	687b      	ldr	r3, [r7, #4]
 8027920:	681a      	ldr	r2, [r3, #0]
 8027922:	687b      	ldr	r3, [r7, #4]
 8027924:	3304      	adds	r3, #4
 8027926:	4619      	mov	r1, r3
 8027928:	4610      	mov	r0, r2
 802792a:	f002 fb47 	bl	8029fbc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 802792e:	687b      	ldr	r3, [r7, #4]
 8027930:	6818      	ldr	r0, [r3, #0]
 8027932:	687b      	ldr	r3, [r7, #4]
 8027934:	685b      	ldr	r3, [r3, #4]
 8027936:	461a      	mov	r2, r3
 8027938:	6839      	ldr	r1, [r7, #0]
 802793a:	f002 fb9c 	bl	802a076 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 802793e:	687b      	ldr	r3, [r7, #4]
 8027940:	2201      	movs	r2, #1
 8027942:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8027946:	2300      	movs	r3, #0
}
 8027948:	4618      	mov	r0, r3
 802794a:	3708      	adds	r7, #8
 802794c:	46bd      	mov	sp, r7
 802794e:	bd80      	pop	{r7, pc}

08027950 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8027950:	b580      	push	{r7, lr}
 8027952:	b086      	sub	sp, #24
 8027954:	af00      	add	r7, sp, #0
 8027956:	60f8      	str	r0, [r7, #12]
 8027958:	60b9      	str	r1, [r7, #8]
 802795a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 802795c:	68fb      	ldr	r3, [r7, #12]
 802795e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8027962:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8027964:	7dfb      	ldrb	r3, [r7, #23]
 8027966:	2b02      	cmp	r3, #2
 8027968:	d101      	bne.n	802796e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 802796a:	2302      	movs	r3, #2
 802796c:	e021      	b.n	80279b2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 802796e:	7dfb      	ldrb	r3, [r7, #23]
 8027970:	2b01      	cmp	r3, #1
 8027972:	d002      	beq.n	802797a <HAL_SDRAM_SendCommand+0x2a>
 8027974:	7dfb      	ldrb	r3, [r7, #23]
 8027976:	2b05      	cmp	r3, #5
 8027978:	d118      	bne.n	80279ac <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 802797a:	68fb      	ldr	r3, [r7, #12]
 802797c:	2202      	movs	r2, #2
 802797e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8027982:	68fb      	ldr	r3, [r7, #12]
 8027984:	681b      	ldr	r3, [r3, #0]
 8027986:	687a      	ldr	r2, [r7, #4]
 8027988:	68b9      	ldr	r1, [r7, #8]
 802798a:	4618      	mov	r0, r3
 802798c:	f002 fbdc 	bl	802a148 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8027990:	68bb      	ldr	r3, [r7, #8]
 8027992:	681b      	ldr	r3, [r3, #0]
 8027994:	2b02      	cmp	r3, #2
 8027996:	d104      	bne.n	80279a2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8027998:	68fb      	ldr	r3, [r7, #12]
 802799a:	2205      	movs	r2, #5
 802799c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80279a0:	e006      	b.n	80279b0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80279a2:	68fb      	ldr	r3, [r7, #12]
 80279a4:	2201      	movs	r2, #1
 80279a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80279aa:	e001      	b.n	80279b0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80279ac:	2301      	movs	r3, #1
 80279ae:	e000      	b.n	80279b2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80279b0:	2300      	movs	r3, #0
}
 80279b2:	4618      	mov	r0, r3
 80279b4:	3718      	adds	r7, #24
 80279b6:	46bd      	mov	sp, r7
 80279b8:	bd80      	pop	{r7, pc}

080279ba <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80279ba:	b580      	push	{r7, lr}
 80279bc:	b082      	sub	sp, #8
 80279be:	af00      	add	r7, sp, #0
 80279c0:	6078      	str	r0, [r7, #4]
 80279c2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80279c4:	687b      	ldr	r3, [r7, #4]
 80279c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80279ca:	b2db      	uxtb	r3, r3
 80279cc:	2b02      	cmp	r3, #2
 80279ce:	d101      	bne.n	80279d4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80279d0:	2302      	movs	r3, #2
 80279d2:	e016      	b.n	8027a02 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80279d4:	687b      	ldr	r3, [r7, #4]
 80279d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80279da:	b2db      	uxtb	r3, r3
 80279dc:	2b01      	cmp	r3, #1
 80279de:	d10f      	bne.n	8027a00 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80279e0:	687b      	ldr	r3, [r7, #4]
 80279e2:	2202      	movs	r2, #2
 80279e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80279e8:	687b      	ldr	r3, [r7, #4]
 80279ea:	681b      	ldr	r3, [r3, #0]
 80279ec:	6839      	ldr	r1, [r7, #0]
 80279ee:	4618      	mov	r0, r3
 80279f0:	f002 fbe7 	bl	802a1c2 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80279f4:	687b      	ldr	r3, [r7, #4]
 80279f6:	2201      	movs	r2, #1
 80279f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80279fc:	2300      	movs	r3, #0
 80279fe:	e000      	b.n	8027a02 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8027a00:	2301      	movs	r3, #1
}
 8027a02:	4618      	mov	r0, r3
 8027a04:	3708      	adds	r7, #8
 8027a06:	46bd      	mov	sp, r7
 8027a08:	bd80      	pop	{r7, pc}

08027a0a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8027a0a:	b580      	push	{r7, lr}
 8027a0c:	b082      	sub	sp, #8
 8027a0e:	af00      	add	r7, sp, #0
 8027a10:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8027a12:	687b      	ldr	r3, [r7, #4]
 8027a14:	2b00      	cmp	r3, #0
 8027a16:	d101      	bne.n	8027a1c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8027a18:	2301      	movs	r3, #1
 8027a1a:	e07b      	b.n	8027b14 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8027a1c:	687b      	ldr	r3, [r7, #4]
 8027a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027a20:	2b00      	cmp	r3, #0
 8027a22:	d108      	bne.n	8027a36 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8027a24:	687b      	ldr	r3, [r7, #4]
 8027a26:	685b      	ldr	r3, [r3, #4]
 8027a28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027a2c:	d009      	beq.n	8027a42 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8027a2e:	687b      	ldr	r3, [r7, #4]
 8027a30:	2200      	movs	r2, #0
 8027a32:	61da      	str	r2, [r3, #28]
 8027a34:	e005      	b.n	8027a42 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8027a36:	687b      	ldr	r3, [r7, #4]
 8027a38:	2200      	movs	r2, #0
 8027a3a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8027a3c:	687b      	ldr	r3, [r7, #4]
 8027a3e:	2200      	movs	r2, #0
 8027a40:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8027a42:	687b      	ldr	r3, [r7, #4]
 8027a44:	2200      	movs	r2, #0
 8027a46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8027a48:	687b      	ldr	r3, [r7, #4]
 8027a4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027a4e:	b2db      	uxtb	r3, r3
 8027a50:	2b00      	cmp	r3, #0
 8027a52:	d106      	bne.n	8027a62 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8027a54:	687b      	ldr	r3, [r7, #4]
 8027a56:	2200      	movs	r2, #0
 8027a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8027a5c:	6878      	ldr	r0, [r7, #4]
 8027a5e:	f7f9 ff2b 	bl	80218b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8027a62:	687b      	ldr	r3, [r7, #4]
 8027a64:	2202      	movs	r2, #2
 8027a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8027a6a:	687b      	ldr	r3, [r7, #4]
 8027a6c:	681b      	ldr	r3, [r3, #0]
 8027a6e:	681a      	ldr	r2, [r3, #0]
 8027a70:	687b      	ldr	r3, [r7, #4]
 8027a72:	681b      	ldr	r3, [r3, #0]
 8027a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027a78:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8027a7a:	687b      	ldr	r3, [r7, #4]
 8027a7c:	685b      	ldr	r3, [r3, #4]
 8027a7e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8027a82:	687b      	ldr	r3, [r7, #4]
 8027a84:	689b      	ldr	r3, [r3, #8]
 8027a86:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8027a8a:	431a      	orrs	r2, r3
 8027a8c:	687b      	ldr	r3, [r7, #4]
 8027a8e:	68db      	ldr	r3, [r3, #12]
 8027a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8027a94:	431a      	orrs	r2, r3
 8027a96:	687b      	ldr	r3, [r7, #4]
 8027a98:	691b      	ldr	r3, [r3, #16]
 8027a9a:	f003 0302 	and.w	r3, r3, #2
 8027a9e:	431a      	orrs	r2, r3
 8027aa0:	687b      	ldr	r3, [r7, #4]
 8027aa2:	695b      	ldr	r3, [r3, #20]
 8027aa4:	f003 0301 	and.w	r3, r3, #1
 8027aa8:	431a      	orrs	r2, r3
 8027aaa:	687b      	ldr	r3, [r7, #4]
 8027aac:	699b      	ldr	r3, [r3, #24]
 8027aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027ab2:	431a      	orrs	r2, r3
 8027ab4:	687b      	ldr	r3, [r7, #4]
 8027ab6:	69db      	ldr	r3, [r3, #28]
 8027ab8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8027abc:	431a      	orrs	r2, r3
 8027abe:	687b      	ldr	r3, [r7, #4]
 8027ac0:	6a1b      	ldr	r3, [r3, #32]
 8027ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027ac6:	ea42 0103 	orr.w	r1, r2, r3
 8027aca:	687b      	ldr	r3, [r7, #4]
 8027acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027ace:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8027ad2:	687b      	ldr	r3, [r7, #4]
 8027ad4:	681b      	ldr	r3, [r3, #0]
 8027ad6:	430a      	orrs	r2, r1
 8027ad8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8027ada:	687b      	ldr	r3, [r7, #4]
 8027adc:	699b      	ldr	r3, [r3, #24]
 8027ade:	0c1b      	lsrs	r3, r3, #16
 8027ae0:	f003 0104 	and.w	r1, r3, #4
 8027ae4:	687b      	ldr	r3, [r7, #4]
 8027ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027ae8:	f003 0210 	and.w	r2, r3, #16
 8027aec:	687b      	ldr	r3, [r7, #4]
 8027aee:	681b      	ldr	r3, [r3, #0]
 8027af0:	430a      	orrs	r2, r1
 8027af2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8027af4:	687b      	ldr	r3, [r7, #4]
 8027af6:	681b      	ldr	r3, [r3, #0]
 8027af8:	69da      	ldr	r2, [r3, #28]
 8027afa:	687b      	ldr	r3, [r7, #4]
 8027afc:	681b      	ldr	r3, [r3, #0]
 8027afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8027b02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8027b04:	687b      	ldr	r3, [r7, #4]
 8027b06:	2200      	movs	r2, #0
 8027b08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8027b0a:	687b      	ldr	r3, [r7, #4]
 8027b0c:	2201      	movs	r2, #1
 8027b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8027b12:	2300      	movs	r3, #0
}
 8027b14:	4618      	mov	r0, r3
 8027b16:	3708      	adds	r7, #8
 8027b18:	46bd      	mov	sp, r7
 8027b1a:	bd80      	pop	{r7, pc}

08027b1c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8027b1c:	b580      	push	{r7, lr}
 8027b1e:	b082      	sub	sp, #8
 8027b20:	af00      	add	r7, sp, #0
 8027b22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8027b24:	687b      	ldr	r3, [r7, #4]
 8027b26:	2b00      	cmp	r3, #0
 8027b28:	d101      	bne.n	8027b2e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8027b2a:	2301      	movs	r3, #1
 8027b2c:	e01a      	b.n	8027b64 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8027b2e:	687b      	ldr	r3, [r7, #4]
 8027b30:	2202      	movs	r2, #2
 8027b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8027b36:	687b      	ldr	r3, [r7, #4]
 8027b38:	681b      	ldr	r3, [r3, #0]
 8027b3a:	681a      	ldr	r2, [r3, #0]
 8027b3c:	687b      	ldr	r3, [r7, #4]
 8027b3e:	681b      	ldr	r3, [r3, #0]
 8027b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027b44:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8027b46:	6878      	ldr	r0, [r7, #4]
 8027b48:	f7f9 fefe 	bl	8021948 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8027b4c:	687b      	ldr	r3, [r7, #4]
 8027b4e:	2200      	movs	r2, #0
 8027b50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8027b52:	687b      	ldr	r3, [r7, #4]
 8027b54:	2200      	movs	r2, #0
 8027b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8027b5a:	687b      	ldr	r3, [r7, #4]
 8027b5c:	2200      	movs	r2, #0
 8027b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8027b62:	2300      	movs	r3, #0
}
 8027b64:	4618      	mov	r0, r3
 8027b66:	3708      	adds	r7, #8
 8027b68:	46bd      	mov	sp, r7
 8027b6a:	bd80      	pop	{r7, pc}

08027b6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8027b6c:	b580      	push	{r7, lr}
 8027b6e:	b088      	sub	sp, #32
 8027b70:	af00      	add	r7, sp, #0
 8027b72:	60f8      	str	r0, [r7, #12]
 8027b74:	60b9      	str	r1, [r7, #8]
 8027b76:	603b      	str	r3, [r7, #0]
 8027b78:	4613      	mov	r3, r2
 8027b7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8027b7c:	2300      	movs	r3, #0
 8027b7e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8027b80:	68fb      	ldr	r3, [r7, #12]
 8027b82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027b86:	2b01      	cmp	r3, #1
 8027b88:	d101      	bne.n	8027b8e <HAL_SPI_Transmit+0x22>
 8027b8a:	2302      	movs	r3, #2
 8027b8c:	e126      	b.n	8027ddc <HAL_SPI_Transmit+0x270>
 8027b8e:	68fb      	ldr	r3, [r7, #12]
 8027b90:	2201      	movs	r2, #1
 8027b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027b96:	f7fb fc3f 	bl	8023418 <HAL_GetTick>
 8027b9a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8027b9c:	88fb      	ldrh	r3, [r7, #6]
 8027b9e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8027ba0:	68fb      	ldr	r3, [r7, #12]
 8027ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027ba6:	b2db      	uxtb	r3, r3
 8027ba8:	2b01      	cmp	r3, #1
 8027baa:	d002      	beq.n	8027bb2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8027bac:	2302      	movs	r3, #2
 8027bae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8027bb0:	e10b      	b.n	8027dca <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8027bb2:	68bb      	ldr	r3, [r7, #8]
 8027bb4:	2b00      	cmp	r3, #0
 8027bb6:	d002      	beq.n	8027bbe <HAL_SPI_Transmit+0x52>
 8027bb8:	88fb      	ldrh	r3, [r7, #6]
 8027bba:	2b00      	cmp	r3, #0
 8027bbc:	d102      	bne.n	8027bc4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8027bbe:	2301      	movs	r3, #1
 8027bc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8027bc2:	e102      	b.n	8027dca <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8027bc4:	68fb      	ldr	r3, [r7, #12]
 8027bc6:	2203      	movs	r2, #3
 8027bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027bcc:	68fb      	ldr	r3, [r7, #12]
 8027bce:	2200      	movs	r2, #0
 8027bd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8027bd2:	68fb      	ldr	r3, [r7, #12]
 8027bd4:	68ba      	ldr	r2, [r7, #8]
 8027bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8027bd8:	68fb      	ldr	r3, [r7, #12]
 8027bda:	88fa      	ldrh	r2, [r7, #6]
 8027bdc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8027bde:	68fb      	ldr	r3, [r7, #12]
 8027be0:	88fa      	ldrh	r2, [r7, #6]
 8027be2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8027be4:	68fb      	ldr	r3, [r7, #12]
 8027be6:	2200      	movs	r2, #0
 8027be8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8027bea:	68fb      	ldr	r3, [r7, #12]
 8027bec:	2200      	movs	r2, #0
 8027bee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8027bf0:	68fb      	ldr	r3, [r7, #12]
 8027bf2:	2200      	movs	r2, #0
 8027bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8027bf6:	68fb      	ldr	r3, [r7, #12]
 8027bf8:	2200      	movs	r2, #0
 8027bfa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8027bfc:	68fb      	ldr	r3, [r7, #12]
 8027bfe:	2200      	movs	r2, #0
 8027c00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027c02:	68fb      	ldr	r3, [r7, #12]
 8027c04:	689b      	ldr	r3, [r3, #8]
 8027c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027c0a:	d10f      	bne.n	8027c2c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8027c0c:	68fb      	ldr	r3, [r7, #12]
 8027c0e:	681b      	ldr	r3, [r3, #0]
 8027c10:	681a      	ldr	r2, [r3, #0]
 8027c12:	68fb      	ldr	r3, [r7, #12]
 8027c14:	681b      	ldr	r3, [r3, #0]
 8027c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027c1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8027c1c:	68fb      	ldr	r3, [r7, #12]
 8027c1e:	681b      	ldr	r3, [r3, #0]
 8027c20:	681a      	ldr	r2, [r3, #0]
 8027c22:	68fb      	ldr	r3, [r7, #12]
 8027c24:	681b      	ldr	r3, [r3, #0]
 8027c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8027c2a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8027c2c:	68fb      	ldr	r3, [r7, #12]
 8027c2e:	681b      	ldr	r3, [r3, #0]
 8027c30:	681b      	ldr	r3, [r3, #0]
 8027c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027c36:	2b40      	cmp	r3, #64	; 0x40
 8027c38:	d007      	beq.n	8027c4a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8027c3a:	68fb      	ldr	r3, [r7, #12]
 8027c3c:	681b      	ldr	r3, [r3, #0]
 8027c3e:	681a      	ldr	r2, [r3, #0]
 8027c40:	68fb      	ldr	r3, [r7, #12]
 8027c42:	681b      	ldr	r3, [r3, #0]
 8027c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027c48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8027c4a:	68fb      	ldr	r3, [r7, #12]
 8027c4c:	68db      	ldr	r3, [r3, #12]
 8027c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8027c52:	d14b      	bne.n	8027cec <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027c54:	68fb      	ldr	r3, [r7, #12]
 8027c56:	685b      	ldr	r3, [r3, #4]
 8027c58:	2b00      	cmp	r3, #0
 8027c5a:	d002      	beq.n	8027c62 <HAL_SPI_Transmit+0xf6>
 8027c5c:	8afb      	ldrh	r3, [r7, #22]
 8027c5e:	2b01      	cmp	r3, #1
 8027c60:	d13e      	bne.n	8027ce0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027c62:	68fb      	ldr	r3, [r7, #12]
 8027c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c66:	881a      	ldrh	r2, [r3, #0]
 8027c68:	68fb      	ldr	r3, [r7, #12]
 8027c6a:	681b      	ldr	r3, [r3, #0]
 8027c6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8027c6e:	68fb      	ldr	r3, [r7, #12]
 8027c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c72:	1c9a      	adds	r2, r3, #2
 8027c74:	68fb      	ldr	r3, [r7, #12]
 8027c76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027c78:	68fb      	ldr	r3, [r7, #12]
 8027c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027c7c:	b29b      	uxth	r3, r3
 8027c7e:	3b01      	subs	r3, #1
 8027c80:	b29a      	uxth	r2, r3
 8027c82:	68fb      	ldr	r3, [r7, #12]
 8027c84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8027c86:	e02b      	b.n	8027ce0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8027c88:	68fb      	ldr	r3, [r7, #12]
 8027c8a:	681b      	ldr	r3, [r3, #0]
 8027c8c:	689b      	ldr	r3, [r3, #8]
 8027c8e:	f003 0302 	and.w	r3, r3, #2
 8027c92:	2b02      	cmp	r3, #2
 8027c94:	d112      	bne.n	8027cbc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027c96:	68fb      	ldr	r3, [r7, #12]
 8027c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c9a:	881a      	ldrh	r2, [r3, #0]
 8027c9c:	68fb      	ldr	r3, [r7, #12]
 8027c9e:	681b      	ldr	r3, [r3, #0]
 8027ca0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8027ca2:	68fb      	ldr	r3, [r7, #12]
 8027ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027ca6:	1c9a      	adds	r2, r3, #2
 8027ca8:	68fb      	ldr	r3, [r7, #12]
 8027caa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027cac:	68fb      	ldr	r3, [r7, #12]
 8027cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027cb0:	b29b      	uxth	r3, r3
 8027cb2:	3b01      	subs	r3, #1
 8027cb4:	b29a      	uxth	r2, r3
 8027cb6:	68fb      	ldr	r3, [r7, #12]
 8027cb8:	86da      	strh	r2, [r3, #54]	; 0x36
 8027cba:	e011      	b.n	8027ce0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027cbc:	f7fb fbac 	bl	8023418 <HAL_GetTick>
 8027cc0:	4602      	mov	r2, r0
 8027cc2:	69bb      	ldr	r3, [r7, #24]
 8027cc4:	1ad3      	subs	r3, r2, r3
 8027cc6:	683a      	ldr	r2, [r7, #0]
 8027cc8:	429a      	cmp	r2, r3
 8027cca:	d803      	bhi.n	8027cd4 <HAL_SPI_Transmit+0x168>
 8027ccc:	683b      	ldr	r3, [r7, #0]
 8027cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027cd2:	d102      	bne.n	8027cda <HAL_SPI_Transmit+0x16e>
 8027cd4:	683b      	ldr	r3, [r7, #0]
 8027cd6:	2b00      	cmp	r3, #0
 8027cd8:	d102      	bne.n	8027ce0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8027cda:	2303      	movs	r3, #3
 8027cdc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8027cde:	e074      	b.n	8027dca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8027ce0:	68fb      	ldr	r3, [r7, #12]
 8027ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027ce4:	b29b      	uxth	r3, r3
 8027ce6:	2b00      	cmp	r3, #0
 8027ce8:	d1ce      	bne.n	8027c88 <HAL_SPI_Transmit+0x11c>
 8027cea:	e04c      	b.n	8027d86 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027cec:	68fb      	ldr	r3, [r7, #12]
 8027cee:	685b      	ldr	r3, [r3, #4]
 8027cf0:	2b00      	cmp	r3, #0
 8027cf2:	d002      	beq.n	8027cfa <HAL_SPI_Transmit+0x18e>
 8027cf4:	8afb      	ldrh	r3, [r7, #22]
 8027cf6:	2b01      	cmp	r3, #1
 8027cf8:	d140      	bne.n	8027d7c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027cfa:	68fb      	ldr	r3, [r7, #12]
 8027cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027cfe:	68fb      	ldr	r3, [r7, #12]
 8027d00:	681b      	ldr	r3, [r3, #0]
 8027d02:	330c      	adds	r3, #12
 8027d04:	7812      	ldrb	r2, [r2, #0]
 8027d06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8027d08:	68fb      	ldr	r3, [r7, #12]
 8027d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027d0c:	1c5a      	adds	r2, r3, #1
 8027d0e:	68fb      	ldr	r3, [r7, #12]
 8027d10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027d12:	68fb      	ldr	r3, [r7, #12]
 8027d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027d16:	b29b      	uxth	r3, r3
 8027d18:	3b01      	subs	r3, #1
 8027d1a:	b29a      	uxth	r2, r3
 8027d1c:	68fb      	ldr	r3, [r7, #12]
 8027d1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8027d20:	e02c      	b.n	8027d7c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8027d22:	68fb      	ldr	r3, [r7, #12]
 8027d24:	681b      	ldr	r3, [r3, #0]
 8027d26:	689b      	ldr	r3, [r3, #8]
 8027d28:	f003 0302 	and.w	r3, r3, #2
 8027d2c:	2b02      	cmp	r3, #2
 8027d2e:	d113      	bne.n	8027d58 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027d30:	68fb      	ldr	r3, [r7, #12]
 8027d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027d34:	68fb      	ldr	r3, [r7, #12]
 8027d36:	681b      	ldr	r3, [r3, #0]
 8027d38:	330c      	adds	r3, #12
 8027d3a:	7812      	ldrb	r2, [r2, #0]
 8027d3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8027d3e:	68fb      	ldr	r3, [r7, #12]
 8027d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027d42:	1c5a      	adds	r2, r3, #1
 8027d44:	68fb      	ldr	r3, [r7, #12]
 8027d46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027d48:	68fb      	ldr	r3, [r7, #12]
 8027d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027d4c:	b29b      	uxth	r3, r3
 8027d4e:	3b01      	subs	r3, #1
 8027d50:	b29a      	uxth	r2, r3
 8027d52:	68fb      	ldr	r3, [r7, #12]
 8027d54:	86da      	strh	r2, [r3, #54]	; 0x36
 8027d56:	e011      	b.n	8027d7c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027d58:	f7fb fb5e 	bl	8023418 <HAL_GetTick>
 8027d5c:	4602      	mov	r2, r0
 8027d5e:	69bb      	ldr	r3, [r7, #24]
 8027d60:	1ad3      	subs	r3, r2, r3
 8027d62:	683a      	ldr	r2, [r7, #0]
 8027d64:	429a      	cmp	r2, r3
 8027d66:	d803      	bhi.n	8027d70 <HAL_SPI_Transmit+0x204>
 8027d68:	683b      	ldr	r3, [r7, #0]
 8027d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027d6e:	d102      	bne.n	8027d76 <HAL_SPI_Transmit+0x20a>
 8027d70:	683b      	ldr	r3, [r7, #0]
 8027d72:	2b00      	cmp	r3, #0
 8027d74:	d102      	bne.n	8027d7c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8027d76:	2303      	movs	r3, #3
 8027d78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8027d7a:	e026      	b.n	8027dca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8027d7c:	68fb      	ldr	r3, [r7, #12]
 8027d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027d80:	b29b      	uxth	r3, r3
 8027d82:	2b00      	cmp	r3, #0
 8027d84:	d1cd      	bne.n	8027d22 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027d86:	69ba      	ldr	r2, [r7, #24]
 8027d88:	6839      	ldr	r1, [r7, #0]
 8027d8a:	68f8      	ldr	r0, [r7, #12]
 8027d8c:	f000 fbda 	bl	8028544 <SPI_EndRxTxTransaction>
 8027d90:	4603      	mov	r3, r0
 8027d92:	2b00      	cmp	r3, #0
 8027d94:	d002      	beq.n	8027d9c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027d96:	68fb      	ldr	r3, [r7, #12]
 8027d98:	2220      	movs	r2, #32
 8027d9a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8027d9c:	68fb      	ldr	r3, [r7, #12]
 8027d9e:	689b      	ldr	r3, [r3, #8]
 8027da0:	2b00      	cmp	r3, #0
 8027da2:	d10a      	bne.n	8027dba <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8027da4:	2300      	movs	r3, #0
 8027da6:	613b      	str	r3, [r7, #16]
 8027da8:	68fb      	ldr	r3, [r7, #12]
 8027daa:	681b      	ldr	r3, [r3, #0]
 8027dac:	68db      	ldr	r3, [r3, #12]
 8027dae:	613b      	str	r3, [r7, #16]
 8027db0:	68fb      	ldr	r3, [r7, #12]
 8027db2:	681b      	ldr	r3, [r3, #0]
 8027db4:	689b      	ldr	r3, [r3, #8]
 8027db6:	613b      	str	r3, [r7, #16]
 8027db8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8027dba:	68fb      	ldr	r3, [r7, #12]
 8027dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027dbe:	2b00      	cmp	r3, #0
 8027dc0:	d002      	beq.n	8027dc8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8027dc2:	2301      	movs	r3, #1
 8027dc4:	77fb      	strb	r3, [r7, #31]
 8027dc6:	e000      	b.n	8027dca <HAL_SPI_Transmit+0x25e>
  }

error:
 8027dc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027dca:	68fb      	ldr	r3, [r7, #12]
 8027dcc:	2201      	movs	r2, #1
 8027dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8027dd2:	68fb      	ldr	r3, [r7, #12]
 8027dd4:	2200      	movs	r2, #0
 8027dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027dda:	7ffb      	ldrb	r3, [r7, #31]
}
 8027ddc:	4618      	mov	r0, r3
 8027dde:	3720      	adds	r7, #32
 8027de0:	46bd      	mov	sp, r7
 8027de2:	bd80      	pop	{r7, pc}

08027de4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8027de4:	b580      	push	{r7, lr}
 8027de6:	b088      	sub	sp, #32
 8027de8:	af02      	add	r7, sp, #8
 8027dea:	60f8      	str	r0, [r7, #12]
 8027dec:	60b9      	str	r1, [r7, #8]
 8027dee:	603b      	str	r3, [r7, #0]
 8027df0:	4613      	mov	r3, r2
 8027df2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8027df4:	2300      	movs	r3, #0
 8027df6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8027df8:	68fb      	ldr	r3, [r7, #12]
 8027dfa:	685b      	ldr	r3, [r3, #4]
 8027dfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027e00:	d112      	bne.n	8027e28 <HAL_SPI_Receive+0x44>
 8027e02:	68fb      	ldr	r3, [r7, #12]
 8027e04:	689b      	ldr	r3, [r3, #8]
 8027e06:	2b00      	cmp	r3, #0
 8027e08:	d10e      	bne.n	8027e28 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8027e0a:	68fb      	ldr	r3, [r7, #12]
 8027e0c:	2204      	movs	r2, #4
 8027e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8027e12:	88fa      	ldrh	r2, [r7, #6]
 8027e14:	683b      	ldr	r3, [r7, #0]
 8027e16:	9300      	str	r3, [sp, #0]
 8027e18:	4613      	mov	r3, r2
 8027e1a:	68ba      	ldr	r2, [r7, #8]
 8027e1c:	68b9      	ldr	r1, [r7, #8]
 8027e1e:	68f8      	ldr	r0, [r7, #12]
 8027e20:	f000 f8f1 	bl	8028006 <HAL_SPI_TransmitReceive>
 8027e24:	4603      	mov	r3, r0
 8027e26:	e0ea      	b.n	8027ffe <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8027e28:	68fb      	ldr	r3, [r7, #12]
 8027e2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027e2e:	2b01      	cmp	r3, #1
 8027e30:	d101      	bne.n	8027e36 <HAL_SPI_Receive+0x52>
 8027e32:	2302      	movs	r3, #2
 8027e34:	e0e3      	b.n	8027ffe <HAL_SPI_Receive+0x21a>
 8027e36:	68fb      	ldr	r3, [r7, #12]
 8027e38:	2201      	movs	r2, #1
 8027e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027e3e:	f7fb faeb 	bl	8023418 <HAL_GetTick>
 8027e42:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8027e44:	68fb      	ldr	r3, [r7, #12]
 8027e46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027e4a:	b2db      	uxtb	r3, r3
 8027e4c:	2b01      	cmp	r3, #1
 8027e4e:	d002      	beq.n	8027e56 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8027e50:	2302      	movs	r3, #2
 8027e52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8027e54:	e0ca      	b.n	8027fec <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8027e56:	68bb      	ldr	r3, [r7, #8]
 8027e58:	2b00      	cmp	r3, #0
 8027e5a:	d002      	beq.n	8027e62 <HAL_SPI_Receive+0x7e>
 8027e5c:	88fb      	ldrh	r3, [r7, #6]
 8027e5e:	2b00      	cmp	r3, #0
 8027e60:	d102      	bne.n	8027e68 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8027e62:	2301      	movs	r3, #1
 8027e64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8027e66:	e0c1      	b.n	8027fec <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8027e68:	68fb      	ldr	r3, [r7, #12]
 8027e6a:	2204      	movs	r2, #4
 8027e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027e70:	68fb      	ldr	r3, [r7, #12]
 8027e72:	2200      	movs	r2, #0
 8027e74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8027e76:	68fb      	ldr	r3, [r7, #12]
 8027e78:	68ba      	ldr	r2, [r7, #8]
 8027e7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8027e7c:	68fb      	ldr	r3, [r7, #12]
 8027e7e:	88fa      	ldrh	r2, [r7, #6]
 8027e80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8027e82:	68fb      	ldr	r3, [r7, #12]
 8027e84:	88fa      	ldrh	r2, [r7, #6]
 8027e86:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8027e88:	68fb      	ldr	r3, [r7, #12]
 8027e8a:	2200      	movs	r2, #0
 8027e8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8027e8e:	68fb      	ldr	r3, [r7, #12]
 8027e90:	2200      	movs	r2, #0
 8027e92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8027e94:	68fb      	ldr	r3, [r7, #12]
 8027e96:	2200      	movs	r2, #0
 8027e98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8027e9a:	68fb      	ldr	r3, [r7, #12]
 8027e9c:	2200      	movs	r2, #0
 8027e9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8027ea0:	68fb      	ldr	r3, [r7, #12]
 8027ea2:	2200      	movs	r2, #0
 8027ea4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027ea6:	68fb      	ldr	r3, [r7, #12]
 8027ea8:	689b      	ldr	r3, [r3, #8]
 8027eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027eae:	d10f      	bne.n	8027ed0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8027eb0:	68fb      	ldr	r3, [r7, #12]
 8027eb2:	681b      	ldr	r3, [r3, #0]
 8027eb4:	681a      	ldr	r2, [r3, #0]
 8027eb6:	68fb      	ldr	r3, [r7, #12]
 8027eb8:	681b      	ldr	r3, [r3, #0]
 8027eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027ebe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8027ec0:	68fb      	ldr	r3, [r7, #12]
 8027ec2:	681b      	ldr	r3, [r3, #0]
 8027ec4:	681a      	ldr	r2, [r3, #0]
 8027ec6:	68fb      	ldr	r3, [r7, #12]
 8027ec8:	681b      	ldr	r3, [r3, #0]
 8027eca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8027ece:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8027ed0:	68fb      	ldr	r3, [r7, #12]
 8027ed2:	681b      	ldr	r3, [r3, #0]
 8027ed4:	681b      	ldr	r3, [r3, #0]
 8027ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027eda:	2b40      	cmp	r3, #64	; 0x40
 8027edc:	d007      	beq.n	8027eee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8027ede:	68fb      	ldr	r3, [r7, #12]
 8027ee0:	681b      	ldr	r3, [r3, #0]
 8027ee2:	681a      	ldr	r2, [r3, #0]
 8027ee4:	68fb      	ldr	r3, [r7, #12]
 8027ee6:	681b      	ldr	r3, [r3, #0]
 8027ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027eec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8027eee:	68fb      	ldr	r3, [r7, #12]
 8027ef0:	68db      	ldr	r3, [r3, #12]
 8027ef2:	2b00      	cmp	r3, #0
 8027ef4:	d162      	bne.n	8027fbc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8027ef6:	e02e      	b.n	8027f56 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8027ef8:	68fb      	ldr	r3, [r7, #12]
 8027efa:	681b      	ldr	r3, [r3, #0]
 8027efc:	689b      	ldr	r3, [r3, #8]
 8027efe:	f003 0301 	and.w	r3, r3, #1
 8027f02:	2b01      	cmp	r3, #1
 8027f04:	d115      	bne.n	8027f32 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8027f06:	68fb      	ldr	r3, [r7, #12]
 8027f08:	681b      	ldr	r3, [r3, #0]
 8027f0a:	f103 020c 	add.w	r2, r3, #12
 8027f0e:	68fb      	ldr	r3, [r7, #12]
 8027f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027f12:	7812      	ldrb	r2, [r2, #0]
 8027f14:	b2d2      	uxtb	r2, r2
 8027f16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8027f18:	68fb      	ldr	r3, [r7, #12]
 8027f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027f1c:	1c5a      	adds	r2, r3, #1
 8027f1e:	68fb      	ldr	r3, [r7, #12]
 8027f20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027f22:	68fb      	ldr	r3, [r7, #12]
 8027f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027f26:	b29b      	uxth	r3, r3
 8027f28:	3b01      	subs	r3, #1
 8027f2a:	b29a      	uxth	r2, r3
 8027f2c:	68fb      	ldr	r3, [r7, #12]
 8027f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8027f30:	e011      	b.n	8027f56 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027f32:	f7fb fa71 	bl	8023418 <HAL_GetTick>
 8027f36:	4602      	mov	r2, r0
 8027f38:	693b      	ldr	r3, [r7, #16]
 8027f3a:	1ad3      	subs	r3, r2, r3
 8027f3c:	683a      	ldr	r2, [r7, #0]
 8027f3e:	429a      	cmp	r2, r3
 8027f40:	d803      	bhi.n	8027f4a <HAL_SPI_Receive+0x166>
 8027f42:	683b      	ldr	r3, [r7, #0]
 8027f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027f48:	d102      	bne.n	8027f50 <HAL_SPI_Receive+0x16c>
 8027f4a:	683b      	ldr	r3, [r7, #0]
 8027f4c:	2b00      	cmp	r3, #0
 8027f4e:	d102      	bne.n	8027f56 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8027f50:	2303      	movs	r3, #3
 8027f52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8027f54:	e04a      	b.n	8027fec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8027f56:	68fb      	ldr	r3, [r7, #12]
 8027f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027f5a:	b29b      	uxth	r3, r3
 8027f5c:	2b00      	cmp	r3, #0
 8027f5e:	d1cb      	bne.n	8027ef8 <HAL_SPI_Receive+0x114>
 8027f60:	e031      	b.n	8027fc6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8027f62:	68fb      	ldr	r3, [r7, #12]
 8027f64:	681b      	ldr	r3, [r3, #0]
 8027f66:	689b      	ldr	r3, [r3, #8]
 8027f68:	f003 0301 	and.w	r3, r3, #1
 8027f6c:	2b01      	cmp	r3, #1
 8027f6e:	d113      	bne.n	8027f98 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8027f70:	68fb      	ldr	r3, [r7, #12]
 8027f72:	681b      	ldr	r3, [r3, #0]
 8027f74:	68da      	ldr	r2, [r3, #12]
 8027f76:	68fb      	ldr	r3, [r7, #12]
 8027f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027f7a:	b292      	uxth	r2, r2
 8027f7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8027f7e:	68fb      	ldr	r3, [r7, #12]
 8027f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027f82:	1c9a      	adds	r2, r3, #2
 8027f84:	68fb      	ldr	r3, [r7, #12]
 8027f86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027f88:	68fb      	ldr	r3, [r7, #12]
 8027f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027f8c:	b29b      	uxth	r3, r3
 8027f8e:	3b01      	subs	r3, #1
 8027f90:	b29a      	uxth	r2, r3
 8027f92:	68fb      	ldr	r3, [r7, #12]
 8027f94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8027f96:	e011      	b.n	8027fbc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027f98:	f7fb fa3e 	bl	8023418 <HAL_GetTick>
 8027f9c:	4602      	mov	r2, r0
 8027f9e:	693b      	ldr	r3, [r7, #16]
 8027fa0:	1ad3      	subs	r3, r2, r3
 8027fa2:	683a      	ldr	r2, [r7, #0]
 8027fa4:	429a      	cmp	r2, r3
 8027fa6:	d803      	bhi.n	8027fb0 <HAL_SPI_Receive+0x1cc>
 8027fa8:	683b      	ldr	r3, [r7, #0]
 8027faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027fae:	d102      	bne.n	8027fb6 <HAL_SPI_Receive+0x1d2>
 8027fb0:	683b      	ldr	r3, [r7, #0]
 8027fb2:	2b00      	cmp	r3, #0
 8027fb4:	d102      	bne.n	8027fbc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8027fb6:	2303      	movs	r3, #3
 8027fb8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8027fba:	e017      	b.n	8027fec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8027fbc:	68fb      	ldr	r3, [r7, #12]
 8027fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027fc0:	b29b      	uxth	r3, r3
 8027fc2:	2b00      	cmp	r3, #0
 8027fc4:	d1cd      	bne.n	8027f62 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027fc6:	693a      	ldr	r2, [r7, #16]
 8027fc8:	6839      	ldr	r1, [r7, #0]
 8027fca:	68f8      	ldr	r0, [r7, #12]
 8027fcc:	f000 fa54 	bl	8028478 <SPI_EndRxTransaction>
 8027fd0:	4603      	mov	r3, r0
 8027fd2:	2b00      	cmp	r3, #0
 8027fd4:	d002      	beq.n	8027fdc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027fd6:	68fb      	ldr	r3, [r7, #12]
 8027fd8:	2220      	movs	r2, #32
 8027fda:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8027fdc:	68fb      	ldr	r3, [r7, #12]
 8027fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027fe0:	2b00      	cmp	r3, #0
 8027fe2:	d002      	beq.n	8027fea <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8027fe4:	2301      	movs	r3, #1
 8027fe6:	75fb      	strb	r3, [r7, #23]
 8027fe8:	e000      	b.n	8027fec <HAL_SPI_Receive+0x208>
  }

error :
 8027fea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027fec:	68fb      	ldr	r3, [r7, #12]
 8027fee:	2201      	movs	r2, #1
 8027ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8027ff4:	68fb      	ldr	r3, [r7, #12]
 8027ff6:	2200      	movs	r2, #0
 8027ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8027ffe:	4618      	mov	r0, r3
 8028000:	3718      	adds	r7, #24
 8028002:	46bd      	mov	sp, r7
 8028004:	bd80      	pop	{r7, pc}

08028006 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8028006:	b580      	push	{r7, lr}
 8028008:	b08c      	sub	sp, #48	; 0x30
 802800a:	af00      	add	r7, sp, #0
 802800c:	60f8      	str	r0, [r7, #12]
 802800e:	60b9      	str	r1, [r7, #8]
 8028010:	607a      	str	r2, [r7, #4]
 8028012:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8028014:	2301      	movs	r3, #1
 8028016:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8028018:	2300      	movs	r3, #0
 802801a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802801e:	68fb      	ldr	r3, [r7, #12]
 8028020:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028024:	2b01      	cmp	r3, #1
 8028026:	d101      	bne.n	802802c <HAL_SPI_TransmitReceive+0x26>
 8028028:	2302      	movs	r3, #2
 802802a:	e18a      	b.n	8028342 <HAL_SPI_TransmitReceive+0x33c>
 802802c:	68fb      	ldr	r3, [r7, #12]
 802802e:	2201      	movs	r2, #1
 8028030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028034:	f7fb f9f0 	bl	8023418 <HAL_GetTick>
 8028038:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 802803a:	68fb      	ldr	r3, [r7, #12]
 802803c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8028044:	68fb      	ldr	r3, [r7, #12]
 8028046:	685b      	ldr	r3, [r3, #4]
 8028048:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 802804a:	887b      	ldrh	r3, [r7, #2]
 802804c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 802804e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028052:	2b01      	cmp	r3, #1
 8028054:	d00f      	beq.n	8028076 <HAL_SPI_TransmitReceive+0x70>
 8028056:	69fb      	ldr	r3, [r7, #28]
 8028058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802805c:	d107      	bne.n	802806e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 802805e:	68fb      	ldr	r3, [r7, #12]
 8028060:	689b      	ldr	r3, [r3, #8]
 8028062:	2b00      	cmp	r3, #0
 8028064:	d103      	bne.n	802806e <HAL_SPI_TransmitReceive+0x68>
 8028066:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802806a:	2b04      	cmp	r3, #4
 802806c:	d003      	beq.n	8028076 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 802806e:	2302      	movs	r3, #2
 8028070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028074:	e15b      	b.n	802832e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8028076:	68bb      	ldr	r3, [r7, #8]
 8028078:	2b00      	cmp	r3, #0
 802807a:	d005      	beq.n	8028088 <HAL_SPI_TransmitReceive+0x82>
 802807c:	687b      	ldr	r3, [r7, #4]
 802807e:	2b00      	cmp	r3, #0
 8028080:	d002      	beq.n	8028088 <HAL_SPI_TransmitReceive+0x82>
 8028082:	887b      	ldrh	r3, [r7, #2]
 8028084:	2b00      	cmp	r3, #0
 8028086:	d103      	bne.n	8028090 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8028088:	2301      	movs	r3, #1
 802808a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 802808e:	e14e      	b.n	802832e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8028090:	68fb      	ldr	r3, [r7, #12]
 8028092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028096:	b2db      	uxtb	r3, r3
 8028098:	2b04      	cmp	r3, #4
 802809a:	d003      	beq.n	80280a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 802809c:	68fb      	ldr	r3, [r7, #12]
 802809e:	2205      	movs	r2, #5
 80280a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80280a4:	68fb      	ldr	r3, [r7, #12]
 80280a6:	2200      	movs	r2, #0
 80280a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80280aa:	68fb      	ldr	r3, [r7, #12]
 80280ac:	687a      	ldr	r2, [r7, #4]
 80280ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80280b0:	68fb      	ldr	r3, [r7, #12]
 80280b2:	887a      	ldrh	r2, [r7, #2]
 80280b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80280b6:	68fb      	ldr	r3, [r7, #12]
 80280b8:	887a      	ldrh	r2, [r7, #2]
 80280ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80280bc:	68fb      	ldr	r3, [r7, #12]
 80280be:	68ba      	ldr	r2, [r7, #8]
 80280c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80280c2:	68fb      	ldr	r3, [r7, #12]
 80280c4:	887a      	ldrh	r2, [r7, #2]
 80280c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80280c8:	68fb      	ldr	r3, [r7, #12]
 80280ca:	887a      	ldrh	r2, [r7, #2]
 80280cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80280ce:	68fb      	ldr	r3, [r7, #12]
 80280d0:	2200      	movs	r2, #0
 80280d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80280d4:	68fb      	ldr	r3, [r7, #12]
 80280d6:	2200      	movs	r2, #0
 80280d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80280da:	68fb      	ldr	r3, [r7, #12]
 80280dc:	681b      	ldr	r3, [r3, #0]
 80280de:	681b      	ldr	r3, [r3, #0]
 80280e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80280e4:	2b40      	cmp	r3, #64	; 0x40
 80280e6:	d007      	beq.n	80280f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80280e8:	68fb      	ldr	r3, [r7, #12]
 80280ea:	681b      	ldr	r3, [r3, #0]
 80280ec:	681a      	ldr	r2, [r3, #0]
 80280ee:	68fb      	ldr	r3, [r7, #12]
 80280f0:	681b      	ldr	r3, [r3, #0]
 80280f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80280f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80280f8:	68fb      	ldr	r3, [r7, #12]
 80280fa:	68db      	ldr	r3, [r3, #12]
 80280fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028100:	d178      	bne.n	80281f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028102:	68fb      	ldr	r3, [r7, #12]
 8028104:	685b      	ldr	r3, [r3, #4]
 8028106:	2b00      	cmp	r3, #0
 8028108:	d002      	beq.n	8028110 <HAL_SPI_TransmitReceive+0x10a>
 802810a:	8b7b      	ldrh	r3, [r7, #26]
 802810c:	2b01      	cmp	r3, #1
 802810e:	d166      	bne.n	80281de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028110:	68fb      	ldr	r3, [r7, #12]
 8028112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028114:	881a      	ldrh	r2, [r3, #0]
 8028116:	68fb      	ldr	r3, [r7, #12]
 8028118:	681b      	ldr	r3, [r3, #0]
 802811a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802811c:	68fb      	ldr	r3, [r7, #12]
 802811e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028120:	1c9a      	adds	r2, r3, #2
 8028122:	68fb      	ldr	r3, [r7, #12]
 8028124:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028126:	68fb      	ldr	r3, [r7, #12]
 8028128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802812a:	b29b      	uxth	r3, r3
 802812c:	3b01      	subs	r3, #1
 802812e:	b29a      	uxth	r2, r3
 8028130:	68fb      	ldr	r3, [r7, #12]
 8028132:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028134:	e053      	b.n	80281de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028136:	68fb      	ldr	r3, [r7, #12]
 8028138:	681b      	ldr	r3, [r3, #0]
 802813a:	689b      	ldr	r3, [r3, #8]
 802813c:	f003 0302 	and.w	r3, r3, #2
 8028140:	2b02      	cmp	r3, #2
 8028142:	d11b      	bne.n	802817c <HAL_SPI_TransmitReceive+0x176>
 8028144:	68fb      	ldr	r3, [r7, #12]
 8028146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028148:	b29b      	uxth	r3, r3
 802814a:	2b00      	cmp	r3, #0
 802814c:	d016      	beq.n	802817c <HAL_SPI_TransmitReceive+0x176>
 802814e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028150:	2b01      	cmp	r3, #1
 8028152:	d113      	bne.n	802817c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028154:	68fb      	ldr	r3, [r7, #12]
 8028156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028158:	881a      	ldrh	r2, [r3, #0]
 802815a:	68fb      	ldr	r3, [r7, #12]
 802815c:	681b      	ldr	r3, [r3, #0]
 802815e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028160:	68fb      	ldr	r3, [r7, #12]
 8028162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028164:	1c9a      	adds	r2, r3, #2
 8028166:	68fb      	ldr	r3, [r7, #12]
 8028168:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802816a:	68fb      	ldr	r3, [r7, #12]
 802816c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802816e:	b29b      	uxth	r3, r3
 8028170:	3b01      	subs	r3, #1
 8028172:	b29a      	uxth	r2, r3
 8028174:	68fb      	ldr	r3, [r7, #12]
 8028176:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028178:	2300      	movs	r3, #0
 802817a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 802817c:	68fb      	ldr	r3, [r7, #12]
 802817e:	681b      	ldr	r3, [r3, #0]
 8028180:	689b      	ldr	r3, [r3, #8]
 8028182:	f003 0301 	and.w	r3, r3, #1
 8028186:	2b01      	cmp	r3, #1
 8028188:	d119      	bne.n	80281be <HAL_SPI_TransmitReceive+0x1b8>
 802818a:	68fb      	ldr	r3, [r7, #12]
 802818c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802818e:	b29b      	uxth	r3, r3
 8028190:	2b00      	cmp	r3, #0
 8028192:	d014      	beq.n	80281be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028194:	68fb      	ldr	r3, [r7, #12]
 8028196:	681b      	ldr	r3, [r3, #0]
 8028198:	68da      	ldr	r2, [r3, #12]
 802819a:	68fb      	ldr	r3, [r7, #12]
 802819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802819e:	b292      	uxth	r2, r2
 80281a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80281a2:	68fb      	ldr	r3, [r7, #12]
 80281a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80281a6:	1c9a      	adds	r2, r3, #2
 80281a8:	68fb      	ldr	r3, [r7, #12]
 80281aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80281ac:	68fb      	ldr	r3, [r7, #12]
 80281ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80281b0:	b29b      	uxth	r3, r3
 80281b2:	3b01      	subs	r3, #1
 80281b4:	b29a      	uxth	r2, r3
 80281b6:	68fb      	ldr	r3, [r7, #12]
 80281b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80281ba:	2301      	movs	r3, #1
 80281bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80281be:	f7fb f92b 	bl	8023418 <HAL_GetTick>
 80281c2:	4602      	mov	r2, r0
 80281c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80281c6:	1ad3      	subs	r3, r2, r3
 80281c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80281ca:	429a      	cmp	r2, r3
 80281cc:	d807      	bhi.n	80281de <HAL_SPI_TransmitReceive+0x1d8>
 80281ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80281d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80281d4:	d003      	beq.n	80281de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80281d6:	2303      	movs	r3, #3
 80281d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80281dc:	e0a7      	b.n	802832e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80281de:	68fb      	ldr	r3, [r7, #12]
 80281e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80281e2:	b29b      	uxth	r3, r3
 80281e4:	2b00      	cmp	r3, #0
 80281e6:	d1a6      	bne.n	8028136 <HAL_SPI_TransmitReceive+0x130>
 80281e8:	68fb      	ldr	r3, [r7, #12]
 80281ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80281ec:	b29b      	uxth	r3, r3
 80281ee:	2b00      	cmp	r3, #0
 80281f0:	d1a1      	bne.n	8028136 <HAL_SPI_TransmitReceive+0x130>
 80281f2:	e07c      	b.n	80282ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80281f4:	68fb      	ldr	r3, [r7, #12]
 80281f6:	685b      	ldr	r3, [r3, #4]
 80281f8:	2b00      	cmp	r3, #0
 80281fa:	d002      	beq.n	8028202 <HAL_SPI_TransmitReceive+0x1fc>
 80281fc:	8b7b      	ldrh	r3, [r7, #26]
 80281fe:	2b01      	cmp	r3, #1
 8028200:	d16b      	bne.n	80282da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028202:	68fb      	ldr	r3, [r7, #12]
 8028204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028206:	68fb      	ldr	r3, [r7, #12]
 8028208:	681b      	ldr	r3, [r3, #0]
 802820a:	330c      	adds	r3, #12
 802820c:	7812      	ldrb	r2, [r2, #0]
 802820e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8028210:	68fb      	ldr	r3, [r7, #12]
 8028212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028214:	1c5a      	adds	r2, r3, #1
 8028216:	68fb      	ldr	r3, [r7, #12]
 8028218:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802821a:	68fb      	ldr	r3, [r7, #12]
 802821c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802821e:	b29b      	uxth	r3, r3
 8028220:	3b01      	subs	r3, #1
 8028222:	b29a      	uxth	r2, r3
 8028224:	68fb      	ldr	r3, [r7, #12]
 8028226:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028228:	e057      	b.n	80282da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 802822a:	68fb      	ldr	r3, [r7, #12]
 802822c:	681b      	ldr	r3, [r3, #0]
 802822e:	689b      	ldr	r3, [r3, #8]
 8028230:	f003 0302 	and.w	r3, r3, #2
 8028234:	2b02      	cmp	r3, #2
 8028236:	d11c      	bne.n	8028272 <HAL_SPI_TransmitReceive+0x26c>
 8028238:	68fb      	ldr	r3, [r7, #12]
 802823a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802823c:	b29b      	uxth	r3, r3
 802823e:	2b00      	cmp	r3, #0
 8028240:	d017      	beq.n	8028272 <HAL_SPI_TransmitReceive+0x26c>
 8028242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028244:	2b01      	cmp	r3, #1
 8028246:	d114      	bne.n	8028272 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8028248:	68fb      	ldr	r3, [r7, #12]
 802824a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802824c:	68fb      	ldr	r3, [r7, #12]
 802824e:	681b      	ldr	r3, [r3, #0]
 8028250:	330c      	adds	r3, #12
 8028252:	7812      	ldrb	r2, [r2, #0]
 8028254:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8028256:	68fb      	ldr	r3, [r7, #12]
 8028258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802825a:	1c5a      	adds	r2, r3, #1
 802825c:	68fb      	ldr	r3, [r7, #12]
 802825e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028260:	68fb      	ldr	r3, [r7, #12]
 8028262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028264:	b29b      	uxth	r3, r3
 8028266:	3b01      	subs	r3, #1
 8028268:	b29a      	uxth	r2, r3
 802826a:	68fb      	ldr	r3, [r7, #12]
 802826c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 802826e:	2300      	movs	r3, #0
 8028270:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028272:	68fb      	ldr	r3, [r7, #12]
 8028274:	681b      	ldr	r3, [r3, #0]
 8028276:	689b      	ldr	r3, [r3, #8]
 8028278:	f003 0301 	and.w	r3, r3, #1
 802827c:	2b01      	cmp	r3, #1
 802827e:	d119      	bne.n	80282b4 <HAL_SPI_TransmitReceive+0x2ae>
 8028280:	68fb      	ldr	r3, [r7, #12]
 8028282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028284:	b29b      	uxth	r3, r3
 8028286:	2b00      	cmp	r3, #0
 8028288:	d014      	beq.n	80282b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 802828a:	68fb      	ldr	r3, [r7, #12]
 802828c:	681b      	ldr	r3, [r3, #0]
 802828e:	68da      	ldr	r2, [r3, #12]
 8028290:	68fb      	ldr	r3, [r7, #12]
 8028292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028294:	b2d2      	uxtb	r2, r2
 8028296:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8028298:	68fb      	ldr	r3, [r7, #12]
 802829a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802829c:	1c5a      	adds	r2, r3, #1
 802829e:	68fb      	ldr	r3, [r7, #12]
 80282a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80282a2:	68fb      	ldr	r3, [r7, #12]
 80282a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80282a6:	b29b      	uxth	r3, r3
 80282a8:	3b01      	subs	r3, #1
 80282aa:	b29a      	uxth	r2, r3
 80282ac:	68fb      	ldr	r3, [r7, #12]
 80282ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80282b0:	2301      	movs	r3, #1
 80282b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80282b4:	f7fb f8b0 	bl	8023418 <HAL_GetTick>
 80282b8:	4602      	mov	r2, r0
 80282ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80282bc:	1ad3      	subs	r3, r2, r3
 80282be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80282c0:	429a      	cmp	r2, r3
 80282c2:	d803      	bhi.n	80282cc <HAL_SPI_TransmitReceive+0x2c6>
 80282c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80282c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80282ca:	d102      	bne.n	80282d2 <HAL_SPI_TransmitReceive+0x2cc>
 80282cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80282ce:	2b00      	cmp	r3, #0
 80282d0:	d103      	bne.n	80282da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80282d2:	2303      	movs	r3, #3
 80282d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80282d8:	e029      	b.n	802832e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80282da:	68fb      	ldr	r3, [r7, #12]
 80282dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80282de:	b29b      	uxth	r3, r3
 80282e0:	2b00      	cmp	r3, #0
 80282e2:	d1a2      	bne.n	802822a <HAL_SPI_TransmitReceive+0x224>
 80282e4:	68fb      	ldr	r3, [r7, #12]
 80282e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80282e8:	b29b      	uxth	r3, r3
 80282ea:	2b00      	cmp	r3, #0
 80282ec:	d19d      	bne.n	802822a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80282ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80282f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80282f2:	68f8      	ldr	r0, [r7, #12]
 80282f4:	f000 f926 	bl	8028544 <SPI_EndRxTxTransaction>
 80282f8:	4603      	mov	r3, r0
 80282fa:	2b00      	cmp	r3, #0
 80282fc:	d006      	beq.n	802830c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80282fe:	2301      	movs	r3, #1
 8028300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028304:	68fb      	ldr	r3, [r7, #12]
 8028306:	2220      	movs	r2, #32
 8028308:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 802830a:	e010      	b.n	802832e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802830c:	68fb      	ldr	r3, [r7, #12]
 802830e:	689b      	ldr	r3, [r3, #8]
 8028310:	2b00      	cmp	r3, #0
 8028312:	d10b      	bne.n	802832c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028314:	2300      	movs	r3, #0
 8028316:	617b      	str	r3, [r7, #20]
 8028318:	68fb      	ldr	r3, [r7, #12]
 802831a:	681b      	ldr	r3, [r3, #0]
 802831c:	68db      	ldr	r3, [r3, #12]
 802831e:	617b      	str	r3, [r7, #20]
 8028320:	68fb      	ldr	r3, [r7, #12]
 8028322:	681b      	ldr	r3, [r3, #0]
 8028324:	689b      	ldr	r3, [r3, #8]
 8028326:	617b      	str	r3, [r7, #20]
 8028328:	697b      	ldr	r3, [r7, #20]
 802832a:	e000      	b.n	802832e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 802832c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802832e:	68fb      	ldr	r3, [r7, #12]
 8028330:	2201      	movs	r2, #1
 8028332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028336:	68fb      	ldr	r3, [r7, #12]
 8028338:	2200      	movs	r2, #0
 802833a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802833e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8028342:	4618      	mov	r0, r3
 8028344:	3730      	adds	r7, #48	; 0x30
 8028346:	46bd      	mov	sp, r7
 8028348:	bd80      	pop	{r7, pc}

0802834a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 802834a:	b480      	push	{r7}
 802834c:	b083      	sub	sp, #12
 802834e:	af00      	add	r7, sp, #0
 8028350:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8028352:	687b      	ldr	r3, [r7, #4]
 8028354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028358:	b2db      	uxtb	r3, r3
}
 802835a:	4618      	mov	r0, r3
 802835c:	370c      	adds	r7, #12
 802835e:	46bd      	mov	sp, r7
 8028360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028364:	4770      	bx	lr
	...

08028368 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8028368:	b580      	push	{r7, lr}
 802836a:	b088      	sub	sp, #32
 802836c:	af00      	add	r7, sp, #0
 802836e:	60f8      	str	r0, [r7, #12]
 8028370:	60b9      	str	r1, [r7, #8]
 8028372:	603b      	str	r3, [r7, #0]
 8028374:	4613      	mov	r3, r2
 8028376:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8028378:	f7fb f84e 	bl	8023418 <HAL_GetTick>
 802837c:	4602      	mov	r2, r0
 802837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028380:	1a9b      	subs	r3, r3, r2
 8028382:	683a      	ldr	r2, [r7, #0]
 8028384:	4413      	add	r3, r2
 8028386:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8028388:	f7fb f846 	bl	8023418 <HAL_GetTick>
 802838c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 802838e:	4b39      	ldr	r3, [pc, #228]	; (8028474 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8028390:	681b      	ldr	r3, [r3, #0]
 8028392:	015b      	lsls	r3, r3, #5
 8028394:	0d1b      	lsrs	r3, r3, #20
 8028396:	69fa      	ldr	r2, [r7, #28]
 8028398:	fb02 f303 	mul.w	r3, r2, r3
 802839c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802839e:	e054      	b.n	802844a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80283a0:	683b      	ldr	r3, [r7, #0]
 80283a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80283a6:	d050      	beq.n	802844a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80283a8:	f7fb f836 	bl	8023418 <HAL_GetTick>
 80283ac:	4602      	mov	r2, r0
 80283ae:	69bb      	ldr	r3, [r7, #24]
 80283b0:	1ad3      	subs	r3, r2, r3
 80283b2:	69fa      	ldr	r2, [r7, #28]
 80283b4:	429a      	cmp	r2, r3
 80283b6:	d902      	bls.n	80283be <SPI_WaitFlagStateUntilTimeout+0x56>
 80283b8:	69fb      	ldr	r3, [r7, #28]
 80283ba:	2b00      	cmp	r3, #0
 80283bc:	d13d      	bne.n	802843a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80283be:	68fb      	ldr	r3, [r7, #12]
 80283c0:	681b      	ldr	r3, [r3, #0]
 80283c2:	685a      	ldr	r2, [r3, #4]
 80283c4:	68fb      	ldr	r3, [r7, #12]
 80283c6:	681b      	ldr	r3, [r3, #0]
 80283c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80283cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80283ce:	68fb      	ldr	r3, [r7, #12]
 80283d0:	685b      	ldr	r3, [r3, #4]
 80283d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80283d6:	d111      	bne.n	80283fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80283d8:	68fb      	ldr	r3, [r7, #12]
 80283da:	689b      	ldr	r3, [r3, #8]
 80283dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80283e0:	d004      	beq.n	80283ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80283e2:	68fb      	ldr	r3, [r7, #12]
 80283e4:	689b      	ldr	r3, [r3, #8]
 80283e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80283ea:	d107      	bne.n	80283fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80283ec:	68fb      	ldr	r3, [r7, #12]
 80283ee:	681b      	ldr	r3, [r3, #0]
 80283f0:	681a      	ldr	r2, [r3, #0]
 80283f2:	68fb      	ldr	r3, [r7, #12]
 80283f4:	681b      	ldr	r3, [r3, #0]
 80283f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80283fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80283fc:	68fb      	ldr	r3, [r7, #12]
 80283fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028404:	d10f      	bne.n	8028426 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8028406:	68fb      	ldr	r3, [r7, #12]
 8028408:	681b      	ldr	r3, [r3, #0]
 802840a:	681a      	ldr	r2, [r3, #0]
 802840c:	68fb      	ldr	r3, [r7, #12]
 802840e:	681b      	ldr	r3, [r3, #0]
 8028410:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8028414:	601a      	str	r2, [r3, #0]
 8028416:	68fb      	ldr	r3, [r7, #12]
 8028418:	681b      	ldr	r3, [r3, #0]
 802841a:	681a      	ldr	r2, [r3, #0]
 802841c:	68fb      	ldr	r3, [r7, #12]
 802841e:	681b      	ldr	r3, [r3, #0]
 8028420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8028424:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8028426:	68fb      	ldr	r3, [r7, #12]
 8028428:	2201      	movs	r2, #1
 802842a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 802842e:	68fb      	ldr	r3, [r7, #12]
 8028430:	2200      	movs	r2, #0
 8028432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8028436:	2303      	movs	r3, #3
 8028438:	e017      	b.n	802846a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 802843a:	697b      	ldr	r3, [r7, #20]
 802843c:	2b00      	cmp	r3, #0
 802843e:	d101      	bne.n	8028444 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8028440:	2300      	movs	r3, #0
 8028442:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8028444:	697b      	ldr	r3, [r7, #20]
 8028446:	3b01      	subs	r3, #1
 8028448:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802844a:	68fb      	ldr	r3, [r7, #12]
 802844c:	681b      	ldr	r3, [r3, #0]
 802844e:	689a      	ldr	r2, [r3, #8]
 8028450:	68bb      	ldr	r3, [r7, #8]
 8028452:	4013      	ands	r3, r2
 8028454:	68ba      	ldr	r2, [r7, #8]
 8028456:	429a      	cmp	r2, r3
 8028458:	bf0c      	ite	eq
 802845a:	2301      	moveq	r3, #1
 802845c:	2300      	movne	r3, #0
 802845e:	b2db      	uxtb	r3, r3
 8028460:	461a      	mov	r2, r3
 8028462:	79fb      	ldrb	r3, [r7, #7]
 8028464:	429a      	cmp	r2, r3
 8028466:	d19b      	bne.n	80283a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8028468:	2300      	movs	r3, #0
}
 802846a:	4618      	mov	r0, r3
 802846c:	3720      	adds	r7, #32
 802846e:	46bd      	mov	sp, r7
 8028470:	bd80      	pop	{r7, pc}
 8028472:	bf00      	nop
 8028474:	20000000 	.word	0x20000000

08028478 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8028478:	b580      	push	{r7, lr}
 802847a:	b086      	sub	sp, #24
 802847c:	af02      	add	r7, sp, #8
 802847e:	60f8      	str	r0, [r7, #12]
 8028480:	60b9      	str	r1, [r7, #8]
 8028482:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028484:	68fb      	ldr	r3, [r7, #12]
 8028486:	685b      	ldr	r3, [r3, #4]
 8028488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802848c:	d111      	bne.n	80284b2 <SPI_EndRxTransaction+0x3a>
 802848e:	68fb      	ldr	r3, [r7, #12]
 8028490:	689b      	ldr	r3, [r3, #8]
 8028492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028496:	d004      	beq.n	80284a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028498:	68fb      	ldr	r3, [r7, #12]
 802849a:	689b      	ldr	r3, [r3, #8]
 802849c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80284a0:	d107      	bne.n	80284b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80284a2:	68fb      	ldr	r3, [r7, #12]
 80284a4:	681b      	ldr	r3, [r3, #0]
 80284a6:	681a      	ldr	r2, [r3, #0]
 80284a8:	68fb      	ldr	r3, [r7, #12]
 80284aa:	681b      	ldr	r3, [r3, #0]
 80284ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80284b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80284b2:	68fb      	ldr	r3, [r7, #12]
 80284b4:	685b      	ldr	r3, [r3, #4]
 80284b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80284ba:	d12a      	bne.n	8028512 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80284bc:	68fb      	ldr	r3, [r7, #12]
 80284be:	689b      	ldr	r3, [r3, #8]
 80284c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80284c4:	d012      	beq.n	80284ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80284c6:	687b      	ldr	r3, [r7, #4]
 80284c8:	9300      	str	r3, [sp, #0]
 80284ca:	68bb      	ldr	r3, [r7, #8]
 80284cc:	2200      	movs	r2, #0
 80284ce:	2180      	movs	r1, #128	; 0x80
 80284d0:	68f8      	ldr	r0, [r7, #12]
 80284d2:	f7ff ff49 	bl	8028368 <SPI_WaitFlagStateUntilTimeout>
 80284d6:	4603      	mov	r3, r0
 80284d8:	2b00      	cmp	r3, #0
 80284da:	d02d      	beq.n	8028538 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80284dc:	68fb      	ldr	r3, [r7, #12]
 80284de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80284e0:	f043 0220 	orr.w	r2, r3, #32
 80284e4:	68fb      	ldr	r3, [r7, #12]
 80284e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80284e8:	2303      	movs	r3, #3
 80284ea:	e026      	b.n	802853a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80284ec:	687b      	ldr	r3, [r7, #4]
 80284ee:	9300      	str	r3, [sp, #0]
 80284f0:	68bb      	ldr	r3, [r7, #8]
 80284f2:	2200      	movs	r2, #0
 80284f4:	2101      	movs	r1, #1
 80284f6:	68f8      	ldr	r0, [r7, #12]
 80284f8:	f7ff ff36 	bl	8028368 <SPI_WaitFlagStateUntilTimeout>
 80284fc:	4603      	mov	r3, r0
 80284fe:	2b00      	cmp	r3, #0
 8028500:	d01a      	beq.n	8028538 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028502:	68fb      	ldr	r3, [r7, #12]
 8028504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028506:	f043 0220 	orr.w	r2, r3, #32
 802850a:	68fb      	ldr	r3, [r7, #12]
 802850c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 802850e:	2303      	movs	r3, #3
 8028510:	e013      	b.n	802853a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8028512:	687b      	ldr	r3, [r7, #4]
 8028514:	9300      	str	r3, [sp, #0]
 8028516:	68bb      	ldr	r3, [r7, #8]
 8028518:	2200      	movs	r2, #0
 802851a:	2101      	movs	r1, #1
 802851c:	68f8      	ldr	r0, [r7, #12]
 802851e:	f7ff ff23 	bl	8028368 <SPI_WaitFlagStateUntilTimeout>
 8028522:	4603      	mov	r3, r0
 8028524:	2b00      	cmp	r3, #0
 8028526:	d007      	beq.n	8028538 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028528:	68fb      	ldr	r3, [r7, #12]
 802852a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802852c:	f043 0220 	orr.w	r2, r3, #32
 8028530:	68fb      	ldr	r3, [r7, #12]
 8028532:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028534:	2303      	movs	r3, #3
 8028536:	e000      	b.n	802853a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8028538:	2300      	movs	r3, #0
}
 802853a:	4618      	mov	r0, r3
 802853c:	3710      	adds	r7, #16
 802853e:	46bd      	mov	sp, r7
 8028540:	bd80      	pop	{r7, pc}
	...

08028544 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8028544:	b580      	push	{r7, lr}
 8028546:	b088      	sub	sp, #32
 8028548:	af02      	add	r7, sp, #8
 802854a:	60f8      	str	r0, [r7, #12]
 802854c:	60b9      	str	r1, [r7, #8]
 802854e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8028550:	4b1b      	ldr	r3, [pc, #108]	; (80285c0 <SPI_EndRxTxTransaction+0x7c>)
 8028552:	681b      	ldr	r3, [r3, #0]
 8028554:	4a1b      	ldr	r2, [pc, #108]	; (80285c4 <SPI_EndRxTxTransaction+0x80>)
 8028556:	fba2 2303 	umull	r2, r3, r2, r3
 802855a:	0d5b      	lsrs	r3, r3, #21
 802855c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8028560:	fb02 f303 	mul.w	r3, r2, r3
 8028564:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028566:	68fb      	ldr	r3, [r7, #12]
 8028568:	685b      	ldr	r3, [r3, #4]
 802856a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802856e:	d112      	bne.n	8028596 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028570:	687b      	ldr	r3, [r7, #4]
 8028572:	9300      	str	r3, [sp, #0]
 8028574:	68bb      	ldr	r3, [r7, #8]
 8028576:	2200      	movs	r2, #0
 8028578:	2180      	movs	r1, #128	; 0x80
 802857a:	68f8      	ldr	r0, [r7, #12]
 802857c:	f7ff fef4 	bl	8028368 <SPI_WaitFlagStateUntilTimeout>
 8028580:	4603      	mov	r3, r0
 8028582:	2b00      	cmp	r3, #0
 8028584:	d016      	beq.n	80285b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028586:	68fb      	ldr	r3, [r7, #12]
 8028588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802858a:	f043 0220 	orr.w	r2, r3, #32
 802858e:	68fb      	ldr	r3, [r7, #12]
 8028590:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028592:	2303      	movs	r3, #3
 8028594:	e00f      	b.n	80285b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8028596:	697b      	ldr	r3, [r7, #20]
 8028598:	2b00      	cmp	r3, #0
 802859a:	d00a      	beq.n	80285b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 802859c:	697b      	ldr	r3, [r7, #20]
 802859e:	3b01      	subs	r3, #1
 80285a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80285a2:	68fb      	ldr	r3, [r7, #12]
 80285a4:	681b      	ldr	r3, [r3, #0]
 80285a6:	689b      	ldr	r3, [r3, #8]
 80285a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80285ac:	2b80      	cmp	r3, #128	; 0x80
 80285ae:	d0f2      	beq.n	8028596 <SPI_EndRxTxTransaction+0x52>
 80285b0:	e000      	b.n	80285b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80285b2:	bf00      	nop
  }

  return HAL_OK;
 80285b4:	2300      	movs	r3, #0
}
 80285b6:	4618      	mov	r0, r3
 80285b8:	3718      	adds	r7, #24
 80285ba:	46bd      	mov	sp, r7
 80285bc:	bd80      	pop	{r7, pc}
 80285be:	bf00      	nop
 80285c0:	20000000 	.word	0x20000000
 80285c4:	165e9f81 	.word	0x165e9f81

080285c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80285c8:	b580      	push	{r7, lr}
 80285ca:	b082      	sub	sp, #8
 80285cc:	af00      	add	r7, sp, #0
 80285ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80285d0:	687b      	ldr	r3, [r7, #4]
 80285d2:	2b00      	cmp	r3, #0
 80285d4:	d101      	bne.n	80285da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80285d6:	2301      	movs	r3, #1
 80285d8:	e041      	b.n	802865e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80285da:	687b      	ldr	r3, [r7, #4]
 80285dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80285e0:	b2db      	uxtb	r3, r3
 80285e2:	2b00      	cmp	r3, #0
 80285e4:	d106      	bne.n	80285f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80285e6:	687b      	ldr	r3, [r7, #4]
 80285e8:	2200      	movs	r2, #0
 80285ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80285ee:	6878      	ldr	r0, [r7, #4]
 80285f0:	f7f9 f9c8 	bl	8021984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80285f4:	687b      	ldr	r3, [r7, #4]
 80285f6:	2202      	movs	r2, #2
 80285f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80285fc:	687b      	ldr	r3, [r7, #4]
 80285fe:	681a      	ldr	r2, [r3, #0]
 8028600:	687b      	ldr	r3, [r7, #4]
 8028602:	3304      	adds	r3, #4
 8028604:	4619      	mov	r1, r3
 8028606:	4610      	mov	r0, r2
 8028608:	f000 fa96 	bl	8028b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802860c:	687b      	ldr	r3, [r7, #4]
 802860e:	2201      	movs	r2, #1
 8028610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028614:	687b      	ldr	r3, [r7, #4]
 8028616:	2201      	movs	r2, #1
 8028618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802861c:	687b      	ldr	r3, [r7, #4]
 802861e:	2201      	movs	r2, #1
 8028620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028624:	687b      	ldr	r3, [r7, #4]
 8028626:	2201      	movs	r2, #1
 8028628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802862c:	687b      	ldr	r3, [r7, #4]
 802862e:	2201      	movs	r2, #1
 8028630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028634:	687b      	ldr	r3, [r7, #4]
 8028636:	2201      	movs	r2, #1
 8028638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802863c:	687b      	ldr	r3, [r7, #4]
 802863e:	2201      	movs	r2, #1
 8028640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028644:	687b      	ldr	r3, [r7, #4]
 8028646:	2201      	movs	r2, #1
 8028648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802864c:	687b      	ldr	r3, [r7, #4]
 802864e:	2201      	movs	r2, #1
 8028650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8028654:	687b      	ldr	r3, [r7, #4]
 8028656:	2201      	movs	r2, #1
 8028658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802865c:	2300      	movs	r3, #0
}
 802865e:	4618      	mov	r0, r3
 8028660:	3708      	adds	r7, #8
 8028662:	46bd      	mov	sp, r7
 8028664:	bd80      	pop	{r7, pc}
	...

08028668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8028668:	b480      	push	{r7}
 802866a:	b085      	sub	sp, #20
 802866c:	af00      	add	r7, sp, #0
 802866e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8028670:	687b      	ldr	r3, [r7, #4]
 8028672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028676:	b2db      	uxtb	r3, r3
 8028678:	2b01      	cmp	r3, #1
 802867a:	d001      	beq.n	8028680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 802867c:	2301      	movs	r3, #1
 802867e:	e04e      	b.n	802871e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028680:	687b      	ldr	r3, [r7, #4]
 8028682:	2202      	movs	r2, #2
 8028684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8028688:	687b      	ldr	r3, [r7, #4]
 802868a:	681b      	ldr	r3, [r3, #0]
 802868c:	68da      	ldr	r2, [r3, #12]
 802868e:	687b      	ldr	r3, [r7, #4]
 8028690:	681b      	ldr	r3, [r3, #0]
 8028692:	f042 0201 	orr.w	r2, r2, #1
 8028696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028698:	687b      	ldr	r3, [r7, #4]
 802869a:	681b      	ldr	r3, [r3, #0]
 802869c:	4a23      	ldr	r2, [pc, #140]	; (802872c <HAL_TIM_Base_Start_IT+0xc4>)
 802869e:	4293      	cmp	r3, r2
 80286a0:	d022      	beq.n	80286e8 <HAL_TIM_Base_Start_IT+0x80>
 80286a2:	687b      	ldr	r3, [r7, #4]
 80286a4:	681b      	ldr	r3, [r3, #0]
 80286a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80286aa:	d01d      	beq.n	80286e8 <HAL_TIM_Base_Start_IT+0x80>
 80286ac:	687b      	ldr	r3, [r7, #4]
 80286ae:	681b      	ldr	r3, [r3, #0]
 80286b0:	4a1f      	ldr	r2, [pc, #124]	; (8028730 <HAL_TIM_Base_Start_IT+0xc8>)
 80286b2:	4293      	cmp	r3, r2
 80286b4:	d018      	beq.n	80286e8 <HAL_TIM_Base_Start_IT+0x80>
 80286b6:	687b      	ldr	r3, [r7, #4]
 80286b8:	681b      	ldr	r3, [r3, #0]
 80286ba:	4a1e      	ldr	r2, [pc, #120]	; (8028734 <HAL_TIM_Base_Start_IT+0xcc>)
 80286bc:	4293      	cmp	r3, r2
 80286be:	d013      	beq.n	80286e8 <HAL_TIM_Base_Start_IT+0x80>
 80286c0:	687b      	ldr	r3, [r7, #4]
 80286c2:	681b      	ldr	r3, [r3, #0]
 80286c4:	4a1c      	ldr	r2, [pc, #112]	; (8028738 <HAL_TIM_Base_Start_IT+0xd0>)
 80286c6:	4293      	cmp	r3, r2
 80286c8:	d00e      	beq.n	80286e8 <HAL_TIM_Base_Start_IT+0x80>
 80286ca:	687b      	ldr	r3, [r7, #4]
 80286cc:	681b      	ldr	r3, [r3, #0]
 80286ce:	4a1b      	ldr	r2, [pc, #108]	; (802873c <HAL_TIM_Base_Start_IT+0xd4>)
 80286d0:	4293      	cmp	r3, r2
 80286d2:	d009      	beq.n	80286e8 <HAL_TIM_Base_Start_IT+0x80>
 80286d4:	687b      	ldr	r3, [r7, #4]
 80286d6:	681b      	ldr	r3, [r3, #0]
 80286d8:	4a19      	ldr	r2, [pc, #100]	; (8028740 <HAL_TIM_Base_Start_IT+0xd8>)
 80286da:	4293      	cmp	r3, r2
 80286dc:	d004      	beq.n	80286e8 <HAL_TIM_Base_Start_IT+0x80>
 80286de:	687b      	ldr	r3, [r7, #4]
 80286e0:	681b      	ldr	r3, [r3, #0]
 80286e2:	4a18      	ldr	r2, [pc, #96]	; (8028744 <HAL_TIM_Base_Start_IT+0xdc>)
 80286e4:	4293      	cmp	r3, r2
 80286e6:	d111      	bne.n	802870c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80286e8:	687b      	ldr	r3, [r7, #4]
 80286ea:	681b      	ldr	r3, [r3, #0]
 80286ec:	689b      	ldr	r3, [r3, #8]
 80286ee:	f003 0307 	and.w	r3, r3, #7
 80286f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80286f4:	68fb      	ldr	r3, [r7, #12]
 80286f6:	2b06      	cmp	r3, #6
 80286f8:	d010      	beq.n	802871c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80286fa:	687b      	ldr	r3, [r7, #4]
 80286fc:	681b      	ldr	r3, [r3, #0]
 80286fe:	681a      	ldr	r2, [r3, #0]
 8028700:	687b      	ldr	r3, [r7, #4]
 8028702:	681b      	ldr	r3, [r3, #0]
 8028704:	f042 0201 	orr.w	r2, r2, #1
 8028708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802870a:	e007      	b.n	802871c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 802870c:	687b      	ldr	r3, [r7, #4]
 802870e:	681b      	ldr	r3, [r3, #0]
 8028710:	681a      	ldr	r2, [r3, #0]
 8028712:	687b      	ldr	r3, [r7, #4]
 8028714:	681b      	ldr	r3, [r3, #0]
 8028716:	f042 0201 	orr.w	r2, r2, #1
 802871a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802871c:	2300      	movs	r3, #0
}
 802871e:	4618      	mov	r0, r3
 8028720:	3714      	adds	r7, #20
 8028722:	46bd      	mov	sp, r7
 8028724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028728:	4770      	bx	lr
 802872a:	bf00      	nop
 802872c:	40010000 	.word	0x40010000
 8028730:	40000400 	.word	0x40000400
 8028734:	40000800 	.word	0x40000800
 8028738:	40000c00 	.word	0x40000c00
 802873c:	40010400 	.word	0x40010400
 8028740:	40014000 	.word	0x40014000
 8028744:	40001800 	.word	0x40001800

08028748 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8028748:	b580      	push	{r7, lr}
 802874a:	b082      	sub	sp, #8
 802874c:	af00      	add	r7, sp, #0
 802874e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8028750:	687b      	ldr	r3, [r7, #4]
 8028752:	681b      	ldr	r3, [r3, #0]
 8028754:	691b      	ldr	r3, [r3, #16]
 8028756:	f003 0302 	and.w	r3, r3, #2
 802875a:	2b02      	cmp	r3, #2
 802875c:	d122      	bne.n	80287a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 802875e:	687b      	ldr	r3, [r7, #4]
 8028760:	681b      	ldr	r3, [r3, #0]
 8028762:	68db      	ldr	r3, [r3, #12]
 8028764:	f003 0302 	and.w	r3, r3, #2
 8028768:	2b02      	cmp	r3, #2
 802876a:	d11b      	bne.n	80287a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802876c:	687b      	ldr	r3, [r7, #4]
 802876e:	681b      	ldr	r3, [r3, #0]
 8028770:	f06f 0202 	mvn.w	r2, #2
 8028774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8028776:	687b      	ldr	r3, [r7, #4]
 8028778:	2201      	movs	r2, #1
 802877a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 802877c:	687b      	ldr	r3, [r7, #4]
 802877e:	681b      	ldr	r3, [r3, #0]
 8028780:	699b      	ldr	r3, [r3, #24]
 8028782:	f003 0303 	and.w	r3, r3, #3
 8028786:	2b00      	cmp	r3, #0
 8028788:	d003      	beq.n	8028792 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802878a:	6878      	ldr	r0, [r7, #4]
 802878c:	f000 f9b5 	bl	8028afa <HAL_TIM_IC_CaptureCallback>
 8028790:	e005      	b.n	802879e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8028792:	6878      	ldr	r0, [r7, #4]
 8028794:	f000 f9a7 	bl	8028ae6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028798:	6878      	ldr	r0, [r7, #4]
 802879a:	f000 f9b8 	bl	8028b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802879e:	687b      	ldr	r3, [r7, #4]
 80287a0:	2200      	movs	r2, #0
 80287a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80287a4:	687b      	ldr	r3, [r7, #4]
 80287a6:	681b      	ldr	r3, [r3, #0]
 80287a8:	691b      	ldr	r3, [r3, #16]
 80287aa:	f003 0304 	and.w	r3, r3, #4
 80287ae:	2b04      	cmp	r3, #4
 80287b0:	d122      	bne.n	80287f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80287b2:	687b      	ldr	r3, [r7, #4]
 80287b4:	681b      	ldr	r3, [r3, #0]
 80287b6:	68db      	ldr	r3, [r3, #12]
 80287b8:	f003 0304 	and.w	r3, r3, #4
 80287bc:	2b04      	cmp	r3, #4
 80287be:	d11b      	bne.n	80287f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80287c0:	687b      	ldr	r3, [r7, #4]
 80287c2:	681b      	ldr	r3, [r3, #0]
 80287c4:	f06f 0204 	mvn.w	r2, #4
 80287c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80287ca:	687b      	ldr	r3, [r7, #4]
 80287cc:	2202      	movs	r2, #2
 80287ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80287d0:	687b      	ldr	r3, [r7, #4]
 80287d2:	681b      	ldr	r3, [r3, #0]
 80287d4:	699b      	ldr	r3, [r3, #24]
 80287d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80287da:	2b00      	cmp	r3, #0
 80287dc:	d003      	beq.n	80287e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80287de:	6878      	ldr	r0, [r7, #4]
 80287e0:	f000 f98b 	bl	8028afa <HAL_TIM_IC_CaptureCallback>
 80287e4:	e005      	b.n	80287f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80287e6:	6878      	ldr	r0, [r7, #4]
 80287e8:	f000 f97d 	bl	8028ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80287ec:	6878      	ldr	r0, [r7, #4]
 80287ee:	f000 f98e 	bl	8028b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80287f2:	687b      	ldr	r3, [r7, #4]
 80287f4:	2200      	movs	r2, #0
 80287f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80287f8:	687b      	ldr	r3, [r7, #4]
 80287fa:	681b      	ldr	r3, [r3, #0]
 80287fc:	691b      	ldr	r3, [r3, #16]
 80287fe:	f003 0308 	and.w	r3, r3, #8
 8028802:	2b08      	cmp	r3, #8
 8028804:	d122      	bne.n	802884c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8028806:	687b      	ldr	r3, [r7, #4]
 8028808:	681b      	ldr	r3, [r3, #0]
 802880a:	68db      	ldr	r3, [r3, #12]
 802880c:	f003 0308 	and.w	r3, r3, #8
 8028810:	2b08      	cmp	r3, #8
 8028812:	d11b      	bne.n	802884c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8028814:	687b      	ldr	r3, [r7, #4]
 8028816:	681b      	ldr	r3, [r3, #0]
 8028818:	f06f 0208 	mvn.w	r2, #8
 802881c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802881e:	687b      	ldr	r3, [r7, #4]
 8028820:	2204      	movs	r2, #4
 8028822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8028824:	687b      	ldr	r3, [r7, #4]
 8028826:	681b      	ldr	r3, [r3, #0]
 8028828:	69db      	ldr	r3, [r3, #28]
 802882a:	f003 0303 	and.w	r3, r3, #3
 802882e:	2b00      	cmp	r3, #0
 8028830:	d003      	beq.n	802883a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028832:	6878      	ldr	r0, [r7, #4]
 8028834:	f000 f961 	bl	8028afa <HAL_TIM_IC_CaptureCallback>
 8028838:	e005      	b.n	8028846 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802883a:	6878      	ldr	r0, [r7, #4]
 802883c:	f000 f953 	bl	8028ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028840:	6878      	ldr	r0, [r7, #4]
 8028842:	f000 f964 	bl	8028b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028846:	687b      	ldr	r3, [r7, #4]
 8028848:	2200      	movs	r2, #0
 802884a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 802884c:	687b      	ldr	r3, [r7, #4]
 802884e:	681b      	ldr	r3, [r3, #0]
 8028850:	691b      	ldr	r3, [r3, #16]
 8028852:	f003 0310 	and.w	r3, r3, #16
 8028856:	2b10      	cmp	r3, #16
 8028858:	d122      	bne.n	80288a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802885a:	687b      	ldr	r3, [r7, #4]
 802885c:	681b      	ldr	r3, [r3, #0]
 802885e:	68db      	ldr	r3, [r3, #12]
 8028860:	f003 0310 	and.w	r3, r3, #16
 8028864:	2b10      	cmp	r3, #16
 8028866:	d11b      	bne.n	80288a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8028868:	687b      	ldr	r3, [r7, #4]
 802886a:	681b      	ldr	r3, [r3, #0]
 802886c:	f06f 0210 	mvn.w	r2, #16
 8028870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8028872:	687b      	ldr	r3, [r7, #4]
 8028874:	2208      	movs	r2, #8
 8028876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8028878:	687b      	ldr	r3, [r7, #4]
 802887a:	681b      	ldr	r3, [r3, #0]
 802887c:	69db      	ldr	r3, [r3, #28]
 802887e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028882:	2b00      	cmp	r3, #0
 8028884:	d003      	beq.n	802888e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028886:	6878      	ldr	r0, [r7, #4]
 8028888:	f000 f937 	bl	8028afa <HAL_TIM_IC_CaptureCallback>
 802888c:	e005      	b.n	802889a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802888e:	6878      	ldr	r0, [r7, #4]
 8028890:	f000 f929 	bl	8028ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028894:	6878      	ldr	r0, [r7, #4]
 8028896:	f000 f93a 	bl	8028b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802889a:	687b      	ldr	r3, [r7, #4]
 802889c:	2200      	movs	r2, #0
 802889e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80288a0:	687b      	ldr	r3, [r7, #4]
 80288a2:	681b      	ldr	r3, [r3, #0]
 80288a4:	691b      	ldr	r3, [r3, #16]
 80288a6:	f003 0301 	and.w	r3, r3, #1
 80288aa:	2b01      	cmp	r3, #1
 80288ac:	d10e      	bne.n	80288cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80288ae:	687b      	ldr	r3, [r7, #4]
 80288b0:	681b      	ldr	r3, [r3, #0]
 80288b2:	68db      	ldr	r3, [r3, #12]
 80288b4:	f003 0301 	and.w	r3, r3, #1
 80288b8:	2b01      	cmp	r3, #1
 80288ba:	d107      	bne.n	80288cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80288bc:	687b      	ldr	r3, [r7, #4]
 80288be:	681b      	ldr	r3, [r3, #0]
 80288c0:	f06f 0201 	mvn.w	r2, #1
 80288c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80288c6:	6878      	ldr	r0, [r7, #4]
 80288c8:	f7f8 fac8 	bl	8020e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80288cc:	687b      	ldr	r3, [r7, #4]
 80288ce:	681b      	ldr	r3, [r3, #0]
 80288d0:	691b      	ldr	r3, [r3, #16]
 80288d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80288d6:	2b80      	cmp	r3, #128	; 0x80
 80288d8:	d10e      	bne.n	80288f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80288da:	687b      	ldr	r3, [r7, #4]
 80288dc:	681b      	ldr	r3, [r3, #0]
 80288de:	68db      	ldr	r3, [r3, #12]
 80288e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80288e4:	2b80      	cmp	r3, #128	; 0x80
 80288e6:	d107      	bne.n	80288f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80288e8:	687b      	ldr	r3, [r7, #4]
 80288ea:	681b      	ldr	r3, [r3, #0]
 80288ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80288f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80288f2:	6878      	ldr	r0, [r7, #4]
 80288f4:	f000 fae0 	bl	8028eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80288f8:	687b      	ldr	r3, [r7, #4]
 80288fa:	681b      	ldr	r3, [r3, #0]
 80288fc:	691b      	ldr	r3, [r3, #16]
 80288fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028902:	2b40      	cmp	r3, #64	; 0x40
 8028904:	d10e      	bne.n	8028924 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8028906:	687b      	ldr	r3, [r7, #4]
 8028908:	681b      	ldr	r3, [r3, #0]
 802890a:	68db      	ldr	r3, [r3, #12]
 802890c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028910:	2b40      	cmp	r3, #64	; 0x40
 8028912:	d107      	bne.n	8028924 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8028914:	687b      	ldr	r3, [r7, #4]
 8028916:	681b      	ldr	r3, [r3, #0]
 8028918:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802891c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802891e:	6878      	ldr	r0, [r7, #4]
 8028920:	f000 f8ff 	bl	8028b22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8028924:	687b      	ldr	r3, [r7, #4]
 8028926:	681b      	ldr	r3, [r3, #0]
 8028928:	691b      	ldr	r3, [r3, #16]
 802892a:	f003 0320 	and.w	r3, r3, #32
 802892e:	2b20      	cmp	r3, #32
 8028930:	d10e      	bne.n	8028950 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8028932:	687b      	ldr	r3, [r7, #4]
 8028934:	681b      	ldr	r3, [r3, #0]
 8028936:	68db      	ldr	r3, [r3, #12]
 8028938:	f003 0320 	and.w	r3, r3, #32
 802893c:	2b20      	cmp	r3, #32
 802893e:	d107      	bne.n	8028950 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8028940:	687b      	ldr	r3, [r7, #4]
 8028942:	681b      	ldr	r3, [r3, #0]
 8028944:	f06f 0220 	mvn.w	r2, #32
 8028948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802894a:	6878      	ldr	r0, [r7, #4]
 802894c:	f000 faaa 	bl	8028ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8028950:	bf00      	nop
 8028952:	3708      	adds	r7, #8
 8028954:	46bd      	mov	sp, r7
 8028956:	bd80      	pop	{r7, pc}

08028958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8028958:	b580      	push	{r7, lr}
 802895a:	b084      	sub	sp, #16
 802895c:	af00      	add	r7, sp, #0
 802895e:	6078      	str	r0, [r7, #4]
 8028960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8028962:	2300      	movs	r3, #0
 8028964:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8028966:	687b      	ldr	r3, [r7, #4]
 8028968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802896c:	2b01      	cmp	r3, #1
 802896e:	d101      	bne.n	8028974 <HAL_TIM_ConfigClockSource+0x1c>
 8028970:	2302      	movs	r3, #2
 8028972:	e0b4      	b.n	8028ade <HAL_TIM_ConfigClockSource+0x186>
 8028974:	687b      	ldr	r3, [r7, #4]
 8028976:	2201      	movs	r2, #1
 8028978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802897c:	687b      	ldr	r3, [r7, #4]
 802897e:	2202      	movs	r2, #2
 8028980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8028984:	687b      	ldr	r3, [r7, #4]
 8028986:	681b      	ldr	r3, [r3, #0]
 8028988:	689b      	ldr	r3, [r3, #8]
 802898a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 802898c:	68bb      	ldr	r3, [r7, #8]
 802898e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8028992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8028994:	68bb      	ldr	r3, [r7, #8]
 8028996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802899a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 802899c:	687b      	ldr	r3, [r7, #4]
 802899e:	681b      	ldr	r3, [r3, #0]
 80289a0:	68ba      	ldr	r2, [r7, #8]
 80289a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80289a4:	683b      	ldr	r3, [r7, #0]
 80289a6:	681b      	ldr	r3, [r3, #0]
 80289a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80289ac:	d03e      	beq.n	8028a2c <HAL_TIM_ConfigClockSource+0xd4>
 80289ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80289b2:	f200 8087 	bhi.w	8028ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80289b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80289ba:	f000 8086 	beq.w	8028aca <HAL_TIM_ConfigClockSource+0x172>
 80289be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80289c2:	d87f      	bhi.n	8028ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80289c4:	2b70      	cmp	r3, #112	; 0x70
 80289c6:	d01a      	beq.n	80289fe <HAL_TIM_ConfigClockSource+0xa6>
 80289c8:	2b70      	cmp	r3, #112	; 0x70
 80289ca:	d87b      	bhi.n	8028ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80289cc:	2b60      	cmp	r3, #96	; 0x60
 80289ce:	d050      	beq.n	8028a72 <HAL_TIM_ConfigClockSource+0x11a>
 80289d0:	2b60      	cmp	r3, #96	; 0x60
 80289d2:	d877      	bhi.n	8028ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80289d4:	2b50      	cmp	r3, #80	; 0x50
 80289d6:	d03c      	beq.n	8028a52 <HAL_TIM_ConfigClockSource+0xfa>
 80289d8:	2b50      	cmp	r3, #80	; 0x50
 80289da:	d873      	bhi.n	8028ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80289dc:	2b40      	cmp	r3, #64	; 0x40
 80289de:	d058      	beq.n	8028a92 <HAL_TIM_ConfigClockSource+0x13a>
 80289e0:	2b40      	cmp	r3, #64	; 0x40
 80289e2:	d86f      	bhi.n	8028ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80289e4:	2b30      	cmp	r3, #48	; 0x30
 80289e6:	d064      	beq.n	8028ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80289e8:	2b30      	cmp	r3, #48	; 0x30
 80289ea:	d86b      	bhi.n	8028ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80289ec:	2b20      	cmp	r3, #32
 80289ee:	d060      	beq.n	8028ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80289f0:	2b20      	cmp	r3, #32
 80289f2:	d867      	bhi.n	8028ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80289f4:	2b00      	cmp	r3, #0
 80289f6:	d05c      	beq.n	8028ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80289f8:	2b10      	cmp	r3, #16
 80289fa:	d05a      	beq.n	8028ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80289fc:	e062      	b.n	8028ac4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80289fe:	687b      	ldr	r3, [r7, #4]
 8028a00:	6818      	ldr	r0, [r3, #0]
 8028a02:	683b      	ldr	r3, [r7, #0]
 8028a04:	6899      	ldr	r1, [r3, #8]
 8028a06:	683b      	ldr	r3, [r7, #0]
 8028a08:	685a      	ldr	r2, [r3, #4]
 8028a0a:	683b      	ldr	r3, [r7, #0]
 8028a0c:	68db      	ldr	r3, [r3, #12]
 8028a0e:	f000 f9ad 	bl	8028d6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8028a12:	687b      	ldr	r3, [r7, #4]
 8028a14:	681b      	ldr	r3, [r3, #0]
 8028a16:	689b      	ldr	r3, [r3, #8]
 8028a18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8028a1a:	68bb      	ldr	r3, [r7, #8]
 8028a1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8028a20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8028a22:	687b      	ldr	r3, [r7, #4]
 8028a24:	681b      	ldr	r3, [r3, #0]
 8028a26:	68ba      	ldr	r2, [r7, #8]
 8028a28:	609a      	str	r2, [r3, #8]
      break;
 8028a2a:	e04f      	b.n	8028acc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8028a2c:	687b      	ldr	r3, [r7, #4]
 8028a2e:	6818      	ldr	r0, [r3, #0]
 8028a30:	683b      	ldr	r3, [r7, #0]
 8028a32:	6899      	ldr	r1, [r3, #8]
 8028a34:	683b      	ldr	r3, [r7, #0]
 8028a36:	685a      	ldr	r2, [r3, #4]
 8028a38:	683b      	ldr	r3, [r7, #0]
 8028a3a:	68db      	ldr	r3, [r3, #12]
 8028a3c:	f000 f996 	bl	8028d6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8028a40:	687b      	ldr	r3, [r7, #4]
 8028a42:	681b      	ldr	r3, [r3, #0]
 8028a44:	689a      	ldr	r2, [r3, #8]
 8028a46:	687b      	ldr	r3, [r7, #4]
 8028a48:	681b      	ldr	r3, [r3, #0]
 8028a4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8028a4e:	609a      	str	r2, [r3, #8]
      break;
 8028a50:	e03c      	b.n	8028acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8028a52:	687b      	ldr	r3, [r7, #4]
 8028a54:	6818      	ldr	r0, [r3, #0]
 8028a56:	683b      	ldr	r3, [r7, #0]
 8028a58:	6859      	ldr	r1, [r3, #4]
 8028a5a:	683b      	ldr	r3, [r7, #0]
 8028a5c:	68db      	ldr	r3, [r3, #12]
 8028a5e:	461a      	mov	r2, r3
 8028a60:	f000 f90a 	bl	8028c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8028a64:	687b      	ldr	r3, [r7, #4]
 8028a66:	681b      	ldr	r3, [r3, #0]
 8028a68:	2150      	movs	r1, #80	; 0x50
 8028a6a:	4618      	mov	r0, r3
 8028a6c:	f000 f963 	bl	8028d36 <TIM_ITRx_SetConfig>
      break;
 8028a70:	e02c      	b.n	8028acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8028a72:	687b      	ldr	r3, [r7, #4]
 8028a74:	6818      	ldr	r0, [r3, #0]
 8028a76:	683b      	ldr	r3, [r7, #0]
 8028a78:	6859      	ldr	r1, [r3, #4]
 8028a7a:	683b      	ldr	r3, [r7, #0]
 8028a7c:	68db      	ldr	r3, [r3, #12]
 8028a7e:	461a      	mov	r2, r3
 8028a80:	f000 f929 	bl	8028cd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8028a84:	687b      	ldr	r3, [r7, #4]
 8028a86:	681b      	ldr	r3, [r3, #0]
 8028a88:	2160      	movs	r1, #96	; 0x60
 8028a8a:	4618      	mov	r0, r3
 8028a8c:	f000 f953 	bl	8028d36 <TIM_ITRx_SetConfig>
      break;
 8028a90:	e01c      	b.n	8028acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8028a92:	687b      	ldr	r3, [r7, #4]
 8028a94:	6818      	ldr	r0, [r3, #0]
 8028a96:	683b      	ldr	r3, [r7, #0]
 8028a98:	6859      	ldr	r1, [r3, #4]
 8028a9a:	683b      	ldr	r3, [r7, #0]
 8028a9c:	68db      	ldr	r3, [r3, #12]
 8028a9e:	461a      	mov	r2, r3
 8028aa0:	f000 f8ea 	bl	8028c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8028aa4:	687b      	ldr	r3, [r7, #4]
 8028aa6:	681b      	ldr	r3, [r3, #0]
 8028aa8:	2140      	movs	r1, #64	; 0x40
 8028aaa:	4618      	mov	r0, r3
 8028aac:	f000 f943 	bl	8028d36 <TIM_ITRx_SetConfig>
      break;
 8028ab0:	e00c      	b.n	8028acc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8028ab2:	687b      	ldr	r3, [r7, #4]
 8028ab4:	681a      	ldr	r2, [r3, #0]
 8028ab6:	683b      	ldr	r3, [r7, #0]
 8028ab8:	681b      	ldr	r3, [r3, #0]
 8028aba:	4619      	mov	r1, r3
 8028abc:	4610      	mov	r0, r2
 8028abe:	f000 f93a 	bl	8028d36 <TIM_ITRx_SetConfig>
      break;
 8028ac2:	e003      	b.n	8028acc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8028ac4:	2301      	movs	r3, #1
 8028ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8028ac8:	e000      	b.n	8028acc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8028aca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8028acc:	687b      	ldr	r3, [r7, #4]
 8028ace:	2201      	movs	r2, #1
 8028ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8028ad4:	687b      	ldr	r3, [r7, #4]
 8028ad6:	2200      	movs	r2, #0
 8028ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8028adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8028ade:	4618      	mov	r0, r3
 8028ae0:	3710      	adds	r7, #16
 8028ae2:	46bd      	mov	sp, r7
 8028ae4:	bd80      	pop	{r7, pc}

08028ae6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8028ae6:	b480      	push	{r7}
 8028ae8:	b083      	sub	sp, #12
 8028aea:	af00      	add	r7, sp, #0
 8028aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8028aee:	bf00      	nop
 8028af0:	370c      	adds	r7, #12
 8028af2:	46bd      	mov	sp, r7
 8028af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028af8:	4770      	bx	lr

08028afa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8028afa:	b480      	push	{r7}
 8028afc:	b083      	sub	sp, #12
 8028afe:	af00      	add	r7, sp, #0
 8028b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8028b02:	bf00      	nop
 8028b04:	370c      	adds	r7, #12
 8028b06:	46bd      	mov	sp, r7
 8028b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b0c:	4770      	bx	lr

08028b0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8028b0e:	b480      	push	{r7}
 8028b10:	b083      	sub	sp, #12
 8028b12:	af00      	add	r7, sp, #0
 8028b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8028b16:	bf00      	nop
 8028b18:	370c      	adds	r7, #12
 8028b1a:	46bd      	mov	sp, r7
 8028b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b20:	4770      	bx	lr

08028b22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8028b22:	b480      	push	{r7}
 8028b24:	b083      	sub	sp, #12
 8028b26:	af00      	add	r7, sp, #0
 8028b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8028b2a:	bf00      	nop
 8028b2c:	370c      	adds	r7, #12
 8028b2e:	46bd      	mov	sp, r7
 8028b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b34:	4770      	bx	lr
	...

08028b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8028b38:	b480      	push	{r7}
 8028b3a:	b085      	sub	sp, #20
 8028b3c:	af00      	add	r7, sp, #0
 8028b3e:	6078      	str	r0, [r7, #4]
 8028b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8028b42:	687b      	ldr	r3, [r7, #4]
 8028b44:	681b      	ldr	r3, [r3, #0]
 8028b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8028b48:	687b      	ldr	r3, [r7, #4]
 8028b4a:	4a40      	ldr	r2, [pc, #256]	; (8028c4c <TIM_Base_SetConfig+0x114>)
 8028b4c:	4293      	cmp	r3, r2
 8028b4e:	d013      	beq.n	8028b78 <TIM_Base_SetConfig+0x40>
 8028b50:	687b      	ldr	r3, [r7, #4]
 8028b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028b56:	d00f      	beq.n	8028b78 <TIM_Base_SetConfig+0x40>
 8028b58:	687b      	ldr	r3, [r7, #4]
 8028b5a:	4a3d      	ldr	r2, [pc, #244]	; (8028c50 <TIM_Base_SetConfig+0x118>)
 8028b5c:	4293      	cmp	r3, r2
 8028b5e:	d00b      	beq.n	8028b78 <TIM_Base_SetConfig+0x40>
 8028b60:	687b      	ldr	r3, [r7, #4]
 8028b62:	4a3c      	ldr	r2, [pc, #240]	; (8028c54 <TIM_Base_SetConfig+0x11c>)
 8028b64:	4293      	cmp	r3, r2
 8028b66:	d007      	beq.n	8028b78 <TIM_Base_SetConfig+0x40>
 8028b68:	687b      	ldr	r3, [r7, #4]
 8028b6a:	4a3b      	ldr	r2, [pc, #236]	; (8028c58 <TIM_Base_SetConfig+0x120>)
 8028b6c:	4293      	cmp	r3, r2
 8028b6e:	d003      	beq.n	8028b78 <TIM_Base_SetConfig+0x40>
 8028b70:	687b      	ldr	r3, [r7, #4]
 8028b72:	4a3a      	ldr	r2, [pc, #232]	; (8028c5c <TIM_Base_SetConfig+0x124>)
 8028b74:	4293      	cmp	r3, r2
 8028b76:	d108      	bne.n	8028b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8028b78:	68fb      	ldr	r3, [r7, #12]
 8028b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8028b80:	683b      	ldr	r3, [r7, #0]
 8028b82:	685b      	ldr	r3, [r3, #4]
 8028b84:	68fa      	ldr	r2, [r7, #12]
 8028b86:	4313      	orrs	r3, r2
 8028b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8028b8a:	687b      	ldr	r3, [r7, #4]
 8028b8c:	4a2f      	ldr	r2, [pc, #188]	; (8028c4c <TIM_Base_SetConfig+0x114>)
 8028b8e:	4293      	cmp	r3, r2
 8028b90:	d02b      	beq.n	8028bea <TIM_Base_SetConfig+0xb2>
 8028b92:	687b      	ldr	r3, [r7, #4]
 8028b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028b98:	d027      	beq.n	8028bea <TIM_Base_SetConfig+0xb2>
 8028b9a:	687b      	ldr	r3, [r7, #4]
 8028b9c:	4a2c      	ldr	r2, [pc, #176]	; (8028c50 <TIM_Base_SetConfig+0x118>)
 8028b9e:	4293      	cmp	r3, r2
 8028ba0:	d023      	beq.n	8028bea <TIM_Base_SetConfig+0xb2>
 8028ba2:	687b      	ldr	r3, [r7, #4]
 8028ba4:	4a2b      	ldr	r2, [pc, #172]	; (8028c54 <TIM_Base_SetConfig+0x11c>)
 8028ba6:	4293      	cmp	r3, r2
 8028ba8:	d01f      	beq.n	8028bea <TIM_Base_SetConfig+0xb2>
 8028baa:	687b      	ldr	r3, [r7, #4]
 8028bac:	4a2a      	ldr	r2, [pc, #168]	; (8028c58 <TIM_Base_SetConfig+0x120>)
 8028bae:	4293      	cmp	r3, r2
 8028bb0:	d01b      	beq.n	8028bea <TIM_Base_SetConfig+0xb2>
 8028bb2:	687b      	ldr	r3, [r7, #4]
 8028bb4:	4a29      	ldr	r2, [pc, #164]	; (8028c5c <TIM_Base_SetConfig+0x124>)
 8028bb6:	4293      	cmp	r3, r2
 8028bb8:	d017      	beq.n	8028bea <TIM_Base_SetConfig+0xb2>
 8028bba:	687b      	ldr	r3, [r7, #4]
 8028bbc:	4a28      	ldr	r2, [pc, #160]	; (8028c60 <TIM_Base_SetConfig+0x128>)
 8028bbe:	4293      	cmp	r3, r2
 8028bc0:	d013      	beq.n	8028bea <TIM_Base_SetConfig+0xb2>
 8028bc2:	687b      	ldr	r3, [r7, #4]
 8028bc4:	4a27      	ldr	r2, [pc, #156]	; (8028c64 <TIM_Base_SetConfig+0x12c>)
 8028bc6:	4293      	cmp	r3, r2
 8028bc8:	d00f      	beq.n	8028bea <TIM_Base_SetConfig+0xb2>
 8028bca:	687b      	ldr	r3, [r7, #4]
 8028bcc:	4a26      	ldr	r2, [pc, #152]	; (8028c68 <TIM_Base_SetConfig+0x130>)
 8028bce:	4293      	cmp	r3, r2
 8028bd0:	d00b      	beq.n	8028bea <TIM_Base_SetConfig+0xb2>
 8028bd2:	687b      	ldr	r3, [r7, #4]
 8028bd4:	4a25      	ldr	r2, [pc, #148]	; (8028c6c <TIM_Base_SetConfig+0x134>)
 8028bd6:	4293      	cmp	r3, r2
 8028bd8:	d007      	beq.n	8028bea <TIM_Base_SetConfig+0xb2>
 8028bda:	687b      	ldr	r3, [r7, #4]
 8028bdc:	4a24      	ldr	r2, [pc, #144]	; (8028c70 <TIM_Base_SetConfig+0x138>)
 8028bde:	4293      	cmp	r3, r2
 8028be0:	d003      	beq.n	8028bea <TIM_Base_SetConfig+0xb2>
 8028be2:	687b      	ldr	r3, [r7, #4]
 8028be4:	4a23      	ldr	r2, [pc, #140]	; (8028c74 <TIM_Base_SetConfig+0x13c>)
 8028be6:	4293      	cmp	r3, r2
 8028be8:	d108      	bne.n	8028bfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8028bea:	68fb      	ldr	r3, [r7, #12]
 8028bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8028bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8028bf2:	683b      	ldr	r3, [r7, #0]
 8028bf4:	68db      	ldr	r3, [r3, #12]
 8028bf6:	68fa      	ldr	r2, [r7, #12]
 8028bf8:	4313      	orrs	r3, r2
 8028bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8028bfc:	68fb      	ldr	r3, [r7, #12]
 8028bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8028c02:	683b      	ldr	r3, [r7, #0]
 8028c04:	695b      	ldr	r3, [r3, #20]
 8028c06:	4313      	orrs	r3, r2
 8028c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8028c0a:	687b      	ldr	r3, [r7, #4]
 8028c0c:	68fa      	ldr	r2, [r7, #12]
 8028c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8028c10:	683b      	ldr	r3, [r7, #0]
 8028c12:	689a      	ldr	r2, [r3, #8]
 8028c14:	687b      	ldr	r3, [r7, #4]
 8028c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8028c18:	683b      	ldr	r3, [r7, #0]
 8028c1a:	681a      	ldr	r2, [r3, #0]
 8028c1c:	687b      	ldr	r3, [r7, #4]
 8028c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8028c20:	687b      	ldr	r3, [r7, #4]
 8028c22:	4a0a      	ldr	r2, [pc, #40]	; (8028c4c <TIM_Base_SetConfig+0x114>)
 8028c24:	4293      	cmp	r3, r2
 8028c26:	d003      	beq.n	8028c30 <TIM_Base_SetConfig+0xf8>
 8028c28:	687b      	ldr	r3, [r7, #4]
 8028c2a:	4a0c      	ldr	r2, [pc, #48]	; (8028c5c <TIM_Base_SetConfig+0x124>)
 8028c2c:	4293      	cmp	r3, r2
 8028c2e:	d103      	bne.n	8028c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8028c30:	683b      	ldr	r3, [r7, #0]
 8028c32:	691a      	ldr	r2, [r3, #16]
 8028c34:	687b      	ldr	r3, [r7, #4]
 8028c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8028c38:	687b      	ldr	r3, [r7, #4]
 8028c3a:	2201      	movs	r2, #1
 8028c3c:	615a      	str	r2, [r3, #20]
}
 8028c3e:	bf00      	nop
 8028c40:	3714      	adds	r7, #20
 8028c42:	46bd      	mov	sp, r7
 8028c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c48:	4770      	bx	lr
 8028c4a:	bf00      	nop
 8028c4c:	40010000 	.word	0x40010000
 8028c50:	40000400 	.word	0x40000400
 8028c54:	40000800 	.word	0x40000800
 8028c58:	40000c00 	.word	0x40000c00
 8028c5c:	40010400 	.word	0x40010400
 8028c60:	40014000 	.word	0x40014000
 8028c64:	40014400 	.word	0x40014400
 8028c68:	40014800 	.word	0x40014800
 8028c6c:	40001800 	.word	0x40001800
 8028c70:	40001c00 	.word	0x40001c00
 8028c74:	40002000 	.word	0x40002000

08028c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8028c78:	b480      	push	{r7}
 8028c7a:	b087      	sub	sp, #28
 8028c7c:	af00      	add	r7, sp, #0
 8028c7e:	60f8      	str	r0, [r7, #12]
 8028c80:	60b9      	str	r1, [r7, #8]
 8028c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8028c84:	68fb      	ldr	r3, [r7, #12]
 8028c86:	6a1b      	ldr	r3, [r3, #32]
 8028c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8028c8a:	68fb      	ldr	r3, [r7, #12]
 8028c8c:	6a1b      	ldr	r3, [r3, #32]
 8028c8e:	f023 0201 	bic.w	r2, r3, #1
 8028c92:	68fb      	ldr	r3, [r7, #12]
 8028c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8028c96:	68fb      	ldr	r3, [r7, #12]
 8028c98:	699b      	ldr	r3, [r3, #24]
 8028c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8028c9c:	693b      	ldr	r3, [r7, #16]
 8028c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8028ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8028ca4:	687b      	ldr	r3, [r7, #4]
 8028ca6:	011b      	lsls	r3, r3, #4
 8028ca8:	693a      	ldr	r2, [r7, #16]
 8028caa:	4313      	orrs	r3, r2
 8028cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8028cae:	697b      	ldr	r3, [r7, #20]
 8028cb0:	f023 030a 	bic.w	r3, r3, #10
 8028cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8028cb6:	697a      	ldr	r2, [r7, #20]
 8028cb8:	68bb      	ldr	r3, [r7, #8]
 8028cba:	4313      	orrs	r3, r2
 8028cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8028cbe:	68fb      	ldr	r3, [r7, #12]
 8028cc0:	693a      	ldr	r2, [r7, #16]
 8028cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8028cc4:	68fb      	ldr	r3, [r7, #12]
 8028cc6:	697a      	ldr	r2, [r7, #20]
 8028cc8:	621a      	str	r2, [r3, #32]
}
 8028cca:	bf00      	nop
 8028ccc:	371c      	adds	r7, #28
 8028cce:	46bd      	mov	sp, r7
 8028cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028cd4:	4770      	bx	lr

08028cd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8028cd6:	b480      	push	{r7}
 8028cd8:	b087      	sub	sp, #28
 8028cda:	af00      	add	r7, sp, #0
 8028cdc:	60f8      	str	r0, [r7, #12]
 8028cde:	60b9      	str	r1, [r7, #8]
 8028ce0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8028ce2:	68fb      	ldr	r3, [r7, #12]
 8028ce4:	6a1b      	ldr	r3, [r3, #32]
 8028ce6:	f023 0210 	bic.w	r2, r3, #16
 8028cea:	68fb      	ldr	r3, [r7, #12]
 8028cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8028cee:	68fb      	ldr	r3, [r7, #12]
 8028cf0:	699b      	ldr	r3, [r3, #24]
 8028cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8028cf4:	68fb      	ldr	r3, [r7, #12]
 8028cf6:	6a1b      	ldr	r3, [r3, #32]
 8028cf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8028cfa:	697b      	ldr	r3, [r7, #20]
 8028cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8028d00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8028d02:	687b      	ldr	r3, [r7, #4]
 8028d04:	031b      	lsls	r3, r3, #12
 8028d06:	697a      	ldr	r2, [r7, #20]
 8028d08:	4313      	orrs	r3, r2
 8028d0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8028d0c:	693b      	ldr	r3, [r7, #16]
 8028d0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8028d12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8028d14:	68bb      	ldr	r3, [r7, #8]
 8028d16:	011b      	lsls	r3, r3, #4
 8028d18:	693a      	ldr	r2, [r7, #16]
 8028d1a:	4313      	orrs	r3, r2
 8028d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8028d1e:	68fb      	ldr	r3, [r7, #12]
 8028d20:	697a      	ldr	r2, [r7, #20]
 8028d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8028d24:	68fb      	ldr	r3, [r7, #12]
 8028d26:	693a      	ldr	r2, [r7, #16]
 8028d28:	621a      	str	r2, [r3, #32]
}
 8028d2a:	bf00      	nop
 8028d2c:	371c      	adds	r7, #28
 8028d2e:	46bd      	mov	sp, r7
 8028d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d34:	4770      	bx	lr

08028d36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8028d36:	b480      	push	{r7}
 8028d38:	b085      	sub	sp, #20
 8028d3a:	af00      	add	r7, sp, #0
 8028d3c:	6078      	str	r0, [r7, #4]
 8028d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8028d40:	687b      	ldr	r3, [r7, #4]
 8028d42:	689b      	ldr	r3, [r3, #8]
 8028d44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8028d46:	68fb      	ldr	r3, [r7, #12]
 8028d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028d4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8028d4e:	683a      	ldr	r2, [r7, #0]
 8028d50:	68fb      	ldr	r3, [r7, #12]
 8028d52:	4313      	orrs	r3, r2
 8028d54:	f043 0307 	orr.w	r3, r3, #7
 8028d58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8028d5a:	687b      	ldr	r3, [r7, #4]
 8028d5c:	68fa      	ldr	r2, [r7, #12]
 8028d5e:	609a      	str	r2, [r3, #8]
}
 8028d60:	bf00      	nop
 8028d62:	3714      	adds	r7, #20
 8028d64:	46bd      	mov	sp, r7
 8028d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d6a:	4770      	bx	lr

08028d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8028d6c:	b480      	push	{r7}
 8028d6e:	b087      	sub	sp, #28
 8028d70:	af00      	add	r7, sp, #0
 8028d72:	60f8      	str	r0, [r7, #12]
 8028d74:	60b9      	str	r1, [r7, #8]
 8028d76:	607a      	str	r2, [r7, #4]
 8028d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8028d7a:	68fb      	ldr	r3, [r7, #12]
 8028d7c:	689b      	ldr	r3, [r3, #8]
 8028d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8028d80:	697b      	ldr	r3, [r7, #20]
 8028d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8028d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8028d88:	683b      	ldr	r3, [r7, #0]
 8028d8a:	021a      	lsls	r2, r3, #8
 8028d8c:	687b      	ldr	r3, [r7, #4]
 8028d8e:	431a      	orrs	r2, r3
 8028d90:	68bb      	ldr	r3, [r7, #8]
 8028d92:	4313      	orrs	r3, r2
 8028d94:	697a      	ldr	r2, [r7, #20]
 8028d96:	4313      	orrs	r3, r2
 8028d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8028d9a:	68fb      	ldr	r3, [r7, #12]
 8028d9c:	697a      	ldr	r2, [r7, #20]
 8028d9e:	609a      	str	r2, [r3, #8]
}
 8028da0:	bf00      	nop
 8028da2:	371c      	adds	r7, #28
 8028da4:	46bd      	mov	sp, r7
 8028da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028daa:	4770      	bx	lr

08028dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8028dac:	b480      	push	{r7}
 8028dae:	b085      	sub	sp, #20
 8028db0:	af00      	add	r7, sp, #0
 8028db2:	6078      	str	r0, [r7, #4]
 8028db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8028db6:	687b      	ldr	r3, [r7, #4]
 8028db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028dbc:	2b01      	cmp	r3, #1
 8028dbe:	d101      	bne.n	8028dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8028dc0:	2302      	movs	r3, #2
 8028dc2:	e05a      	b.n	8028e7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8028dc4:	687b      	ldr	r3, [r7, #4]
 8028dc6:	2201      	movs	r2, #1
 8028dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028dcc:	687b      	ldr	r3, [r7, #4]
 8028dce:	2202      	movs	r2, #2
 8028dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8028dd4:	687b      	ldr	r3, [r7, #4]
 8028dd6:	681b      	ldr	r3, [r3, #0]
 8028dd8:	685b      	ldr	r3, [r3, #4]
 8028dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8028ddc:	687b      	ldr	r3, [r7, #4]
 8028dde:	681b      	ldr	r3, [r3, #0]
 8028de0:	689b      	ldr	r3, [r3, #8]
 8028de2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8028de4:	68fb      	ldr	r3, [r7, #12]
 8028de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028dea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8028dec:	683b      	ldr	r3, [r7, #0]
 8028dee:	681b      	ldr	r3, [r3, #0]
 8028df0:	68fa      	ldr	r2, [r7, #12]
 8028df2:	4313      	orrs	r3, r2
 8028df4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8028df6:	687b      	ldr	r3, [r7, #4]
 8028df8:	681b      	ldr	r3, [r3, #0]
 8028dfa:	68fa      	ldr	r2, [r7, #12]
 8028dfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028dfe:	687b      	ldr	r3, [r7, #4]
 8028e00:	681b      	ldr	r3, [r3, #0]
 8028e02:	4a21      	ldr	r2, [pc, #132]	; (8028e88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8028e04:	4293      	cmp	r3, r2
 8028e06:	d022      	beq.n	8028e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028e08:	687b      	ldr	r3, [r7, #4]
 8028e0a:	681b      	ldr	r3, [r3, #0]
 8028e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028e10:	d01d      	beq.n	8028e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028e12:	687b      	ldr	r3, [r7, #4]
 8028e14:	681b      	ldr	r3, [r3, #0]
 8028e16:	4a1d      	ldr	r2, [pc, #116]	; (8028e8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8028e18:	4293      	cmp	r3, r2
 8028e1a:	d018      	beq.n	8028e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028e1c:	687b      	ldr	r3, [r7, #4]
 8028e1e:	681b      	ldr	r3, [r3, #0]
 8028e20:	4a1b      	ldr	r2, [pc, #108]	; (8028e90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8028e22:	4293      	cmp	r3, r2
 8028e24:	d013      	beq.n	8028e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028e26:	687b      	ldr	r3, [r7, #4]
 8028e28:	681b      	ldr	r3, [r3, #0]
 8028e2a:	4a1a      	ldr	r2, [pc, #104]	; (8028e94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8028e2c:	4293      	cmp	r3, r2
 8028e2e:	d00e      	beq.n	8028e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028e30:	687b      	ldr	r3, [r7, #4]
 8028e32:	681b      	ldr	r3, [r3, #0]
 8028e34:	4a18      	ldr	r2, [pc, #96]	; (8028e98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8028e36:	4293      	cmp	r3, r2
 8028e38:	d009      	beq.n	8028e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028e3a:	687b      	ldr	r3, [r7, #4]
 8028e3c:	681b      	ldr	r3, [r3, #0]
 8028e3e:	4a17      	ldr	r2, [pc, #92]	; (8028e9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8028e40:	4293      	cmp	r3, r2
 8028e42:	d004      	beq.n	8028e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028e44:	687b      	ldr	r3, [r7, #4]
 8028e46:	681b      	ldr	r3, [r3, #0]
 8028e48:	4a15      	ldr	r2, [pc, #84]	; (8028ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8028e4a:	4293      	cmp	r3, r2
 8028e4c:	d10c      	bne.n	8028e68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8028e4e:	68bb      	ldr	r3, [r7, #8]
 8028e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8028e54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8028e56:	683b      	ldr	r3, [r7, #0]
 8028e58:	685b      	ldr	r3, [r3, #4]
 8028e5a:	68ba      	ldr	r2, [r7, #8]
 8028e5c:	4313      	orrs	r3, r2
 8028e5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8028e60:	687b      	ldr	r3, [r7, #4]
 8028e62:	681b      	ldr	r3, [r3, #0]
 8028e64:	68ba      	ldr	r2, [r7, #8]
 8028e66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8028e68:	687b      	ldr	r3, [r7, #4]
 8028e6a:	2201      	movs	r2, #1
 8028e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8028e70:	687b      	ldr	r3, [r7, #4]
 8028e72:	2200      	movs	r2, #0
 8028e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8028e78:	2300      	movs	r3, #0
}
 8028e7a:	4618      	mov	r0, r3
 8028e7c:	3714      	adds	r7, #20
 8028e7e:	46bd      	mov	sp, r7
 8028e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028e84:	4770      	bx	lr
 8028e86:	bf00      	nop
 8028e88:	40010000 	.word	0x40010000
 8028e8c:	40000400 	.word	0x40000400
 8028e90:	40000800 	.word	0x40000800
 8028e94:	40000c00 	.word	0x40000c00
 8028e98:	40010400 	.word	0x40010400
 8028e9c:	40014000 	.word	0x40014000
 8028ea0:	40001800 	.word	0x40001800

08028ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8028ea4:	b480      	push	{r7}
 8028ea6:	b083      	sub	sp, #12
 8028ea8:	af00      	add	r7, sp, #0
 8028eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8028eac:	bf00      	nop
 8028eae:	370c      	adds	r7, #12
 8028eb0:	46bd      	mov	sp, r7
 8028eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028eb6:	4770      	bx	lr

08028eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8028eb8:	b480      	push	{r7}
 8028eba:	b083      	sub	sp, #12
 8028ebc:	af00      	add	r7, sp, #0
 8028ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8028ec0:	bf00      	nop
 8028ec2:	370c      	adds	r7, #12
 8028ec4:	46bd      	mov	sp, r7
 8028ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028eca:	4770      	bx	lr

08028ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8028ecc:	b580      	push	{r7, lr}
 8028ece:	b082      	sub	sp, #8
 8028ed0:	af00      	add	r7, sp, #0
 8028ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8028ed4:	687b      	ldr	r3, [r7, #4]
 8028ed6:	2b00      	cmp	r3, #0
 8028ed8:	d101      	bne.n	8028ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8028eda:	2301      	movs	r3, #1
 8028edc:	e03f      	b.n	8028f5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8028ede:	687b      	ldr	r3, [r7, #4]
 8028ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028ee4:	b2db      	uxtb	r3, r3
 8028ee6:	2b00      	cmp	r3, #0
 8028ee8:	d106      	bne.n	8028ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8028eea:	687b      	ldr	r3, [r7, #4]
 8028eec:	2200      	movs	r2, #0
 8028eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8028ef2:	6878      	ldr	r0, [r7, #4]
 8028ef4:	f7f8 fd68 	bl	80219c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8028ef8:	687b      	ldr	r3, [r7, #4]
 8028efa:	2224      	movs	r2, #36	; 0x24
 8028efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8028f00:	687b      	ldr	r3, [r7, #4]
 8028f02:	681b      	ldr	r3, [r3, #0]
 8028f04:	68da      	ldr	r2, [r3, #12]
 8028f06:	687b      	ldr	r3, [r7, #4]
 8028f08:	681b      	ldr	r3, [r3, #0]
 8028f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8028f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8028f10:	6878      	ldr	r0, [r7, #4]
 8028f12:	f000 fddf 	bl	8029ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8028f16:	687b      	ldr	r3, [r7, #4]
 8028f18:	681b      	ldr	r3, [r3, #0]
 8028f1a:	691a      	ldr	r2, [r3, #16]
 8028f1c:	687b      	ldr	r3, [r7, #4]
 8028f1e:	681b      	ldr	r3, [r3, #0]
 8028f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8028f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8028f26:	687b      	ldr	r3, [r7, #4]
 8028f28:	681b      	ldr	r3, [r3, #0]
 8028f2a:	695a      	ldr	r2, [r3, #20]
 8028f2c:	687b      	ldr	r3, [r7, #4]
 8028f2e:	681b      	ldr	r3, [r3, #0]
 8028f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8028f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8028f36:	687b      	ldr	r3, [r7, #4]
 8028f38:	681b      	ldr	r3, [r3, #0]
 8028f3a:	68da      	ldr	r2, [r3, #12]
 8028f3c:	687b      	ldr	r3, [r7, #4]
 8028f3e:	681b      	ldr	r3, [r3, #0]
 8028f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8028f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028f46:	687b      	ldr	r3, [r7, #4]
 8028f48:	2200      	movs	r2, #0
 8028f4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8028f4c:	687b      	ldr	r3, [r7, #4]
 8028f4e:	2220      	movs	r2, #32
 8028f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8028f54:	687b      	ldr	r3, [r7, #4]
 8028f56:	2220      	movs	r2, #32
 8028f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8028f5c:	2300      	movs	r3, #0
}
 8028f5e:	4618      	mov	r0, r3
 8028f60:	3708      	adds	r7, #8
 8028f62:	46bd      	mov	sp, r7
 8028f64:	bd80      	pop	{r7, pc}

08028f66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028f66:	b580      	push	{r7, lr}
 8028f68:	b08a      	sub	sp, #40	; 0x28
 8028f6a:	af02      	add	r7, sp, #8
 8028f6c:	60f8      	str	r0, [r7, #12]
 8028f6e:	60b9      	str	r1, [r7, #8]
 8028f70:	603b      	str	r3, [r7, #0]
 8028f72:	4613      	mov	r3, r2
 8028f74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8028f76:	2300      	movs	r3, #0
 8028f78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8028f7a:	68fb      	ldr	r3, [r7, #12]
 8028f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028f80:	b2db      	uxtb	r3, r3
 8028f82:	2b20      	cmp	r3, #32
 8028f84:	d17c      	bne.n	8029080 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8028f86:	68bb      	ldr	r3, [r7, #8]
 8028f88:	2b00      	cmp	r3, #0
 8028f8a:	d002      	beq.n	8028f92 <HAL_UART_Transmit+0x2c>
 8028f8c:	88fb      	ldrh	r3, [r7, #6]
 8028f8e:	2b00      	cmp	r3, #0
 8028f90:	d101      	bne.n	8028f96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8028f92:	2301      	movs	r3, #1
 8028f94:	e075      	b.n	8029082 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8028f96:	68fb      	ldr	r3, [r7, #12]
 8028f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028f9c:	2b01      	cmp	r3, #1
 8028f9e:	d101      	bne.n	8028fa4 <HAL_UART_Transmit+0x3e>
 8028fa0:	2302      	movs	r3, #2
 8028fa2:	e06e      	b.n	8029082 <HAL_UART_Transmit+0x11c>
 8028fa4:	68fb      	ldr	r3, [r7, #12]
 8028fa6:	2201      	movs	r2, #1
 8028fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028fac:	68fb      	ldr	r3, [r7, #12]
 8028fae:	2200      	movs	r2, #0
 8028fb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8028fb2:	68fb      	ldr	r3, [r7, #12]
 8028fb4:	2221      	movs	r2, #33	; 0x21
 8028fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8028fba:	f7fa fa2d 	bl	8023418 <HAL_GetTick>
 8028fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8028fc0:	68fb      	ldr	r3, [r7, #12]
 8028fc2:	88fa      	ldrh	r2, [r7, #6]
 8028fc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8028fc6:	68fb      	ldr	r3, [r7, #12]
 8028fc8:	88fa      	ldrh	r2, [r7, #6]
 8028fca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8028fcc:	68fb      	ldr	r3, [r7, #12]
 8028fce:	689b      	ldr	r3, [r3, #8]
 8028fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028fd4:	d108      	bne.n	8028fe8 <HAL_UART_Transmit+0x82>
 8028fd6:	68fb      	ldr	r3, [r7, #12]
 8028fd8:	691b      	ldr	r3, [r3, #16]
 8028fda:	2b00      	cmp	r3, #0
 8028fdc:	d104      	bne.n	8028fe8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8028fde:	2300      	movs	r3, #0
 8028fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8028fe2:	68bb      	ldr	r3, [r7, #8]
 8028fe4:	61bb      	str	r3, [r7, #24]
 8028fe6:	e003      	b.n	8028ff0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8028fe8:	68bb      	ldr	r3, [r7, #8]
 8028fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8028fec:	2300      	movs	r3, #0
 8028fee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8028ff0:	68fb      	ldr	r3, [r7, #12]
 8028ff2:	2200      	movs	r2, #0
 8028ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8028ff8:	e02a      	b.n	8029050 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8028ffa:	683b      	ldr	r3, [r7, #0]
 8028ffc:	9300      	str	r3, [sp, #0]
 8028ffe:	697b      	ldr	r3, [r7, #20]
 8029000:	2200      	movs	r2, #0
 8029002:	2180      	movs	r1, #128	; 0x80
 8029004:	68f8      	ldr	r0, [r7, #12]
 8029006:	f000 fb1f 	bl	8029648 <UART_WaitOnFlagUntilTimeout>
 802900a:	4603      	mov	r3, r0
 802900c:	2b00      	cmp	r3, #0
 802900e:	d001      	beq.n	8029014 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8029010:	2303      	movs	r3, #3
 8029012:	e036      	b.n	8029082 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8029014:	69fb      	ldr	r3, [r7, #28]
 8029016:	2b00      	cmp	r3, #0
 8029018:	d10b      	bne.n	8029032 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 802901a:	69bb      	ldr	r3, [r7, #24]
 802901c:	881b      	ldrh	r3, [r3, #0]
 802901e:	461a      	mov	r2, r3
 8029020:	68fb      	ldr	r3, [r7, #12]
 8029022:	681b      	ldr	r3, [r3, #0]
 8029024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8029028:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 802902a:	69bb      	ldr	r3, [r7, #24]
 802902c:	3302      	adds	r3, #2
 802902e:	61bb      	str	r3, [r7, #24]
 8029030:	e007      	b.n	8029042 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8029032:	69fb      	ldr	r3, [r7, #28]
 8029034:	781a      	ldrb	r2, [r3, #0]
 8029036:	68fb      	ldr	r3, [r7, #12]
 8029038:	681b      	ldr	r3, [r3, #0]
 802903a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 802903c:	69fb      	ldr	r3, [r7, #28]
 802903e:	3301      	adds	r3, #1
 8029040:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8029042:	68fb      	ldr	r3, [r7, #12]
 8029044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8029046:	b29b      	uxth	r3, r3
 8029048:	3b01      	subs	r3, #1
 802904a:	b29a      	uxth	r2, r3
 802904c:	68fb      	ldr	r3, [r7, #12]
 802904e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8029050:	68fb      	ldr	r3, [r7, #12]
 8029052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8029054:	b29b      	uxth	r3, r3
 8029056:	2b00      	cmp	r3, #0
 8029058:	d1cf      	bne.n	8028ffa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802905a:	683b      	ldr	r3, [r7, #0]
 802905c:	9300      	str	r3, [sp, #0]
 802905e:	697b      	ldr	r3, [r7, #20]
 8029060:	2200      	movs	r2, #0
 8029062:	2140      	movs	r1, #64	; 0x40
 8029064:	68f8      	ldr	r0, [r7, #12]
 8029066:	f000 faef 	bl	8029648 <UART_WaitOnFlagUntilTimeout>
 802906a:	4603      	mov	r3, r0
 802906c:	2b00      	cmp	r3, #0
 802906e:	d001      	beq.n	8029074 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8029070:	2303      	movs	r3, #3
 8029072:	e006      	b.n	8029082 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8029074:	68fb      	ldr	r3, [r7, #12]
 8029076:	2220      	movs	r2, #32
 8029078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 802907c:	2300      	movs	r3, #0
 802907e:	e000      	b.n	8029082 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8029080:	2302      	movs	r3, #2
  }
}
 8029082:	4618      	mov	r0, r3
 8029084:	3720      	adds	r7, #32
 8029086:	46bd      	mov	sp, r7
 8029088:	bd80      	pop	{r7, pc}

0802908a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802908a:	b580      	push	{r7, lr}
 802908c:	b084      	sub	sp, #16
 802908e:	af00      	add	r7, sp, #0
 8029090:	60f8      	str	r0, [r7, #12]
 8029092:	60b9      	str	r1, [r7, #8]
 8029094:	4613      	mov	r3, r2
 8029096:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8029098:	68fb      	ldr	r3, [r7, #12]
 802909a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802909e:	b2db      	uxtb	r3, r3
 80290a0:	2b20      	cmp	r3, #32
 80290a2:	d11d      	bne.n	80290e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80290a4:	68bb      	ldr	r3, [r7, #8]
 80290a6:	2b00      	cmp	r3, #0
 80290a8:	d002      	beq.n	80290b0 <HAL_UART_Receive_IT+0x26>
 80290aa:	88fb      	ldrh	r3, [r7, #6]
 80290ac:	2b00      	cmp	r3, #0
 80290ae:	d101      	bne.n	80290b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80290b0:	2301      	movs	r3, #1
 80290b2:	e016      	b.n	80290e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80290b4:	68fb      	ldr	r3, [r7, #12]
 80290b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80290ba:	2b01      	cmp	r3, #1
 80290bc:	d101      	bne.n	80290c2 <HAL_UART_Receive_IT+0x38>
 80290be:	2302      	movs	r3, #2
 80290c0:	e00f      	b.n	80290e2 <HAL_UART_Receive_IT+0x58>
 80290c2:	68fb      	ldr	r3, [r7, #12]
 80290c4:	2201      	movs	r2, #1
 80290c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80290ca:	68fb      	ldr	r3, [r7, #12]
 80290cc:	2200      	movs	r2, #0
 80290ce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80290d0:	88fb      	ldrh	r3, [r7, #6]
 80290d2:	461a      	mov	r2, r3
 80290d4:	68b9      	ldr	r1, [r7, #8]
 80290d6:	68f8      	ldr	r0, [r7, #12]
 80290d8:	f000 fb24 	bl	8029724 <UART_Start_Receive_IT>
 80290dc:	4603      	mov	r3, r0
 80290de:	e000      	b.n	80290e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80290e0:	2302      	movs	r3, #2
  }
}
 80290e2:	4618      	mov	r0, r3
 80290e4:	3710      	adds	r7, #16
 80290e6:	46bd      	mov	sp, r7
 80290e8:	bd80      	pop	{r7, pc}
	...

080290ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80290ec:	b580      	push	{r7, lr}
 80290ee:	b0ba      	sub	sp, #232	; 0xe8
 80290f0:	af00      	add	r7, sp, #0
 80290f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80290f4:	687b      	ldr	r3, [r7, #4]
 80290f6:	681b      	ldr	r3, [r3, #0]
 80290f8:	681b      	ldr	r3, [r3, #0]
 80290fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80290fe:	687b      	ldr	r3, [r7, #4]
 8029100:	681b      	ldr	r3, [r3, #0]
 8029102:	68db      	ldr	r3, [r3, #12]
 8029104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8029108:	687b      	ldr	r3, [r7, #4]
 802910a:	681b      	ldr	r3, [r3, #0]
 802910c:	695b      	ldr	r3, [r3, #20]
 802910e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8029112:	2300      	movs	r3, #0
 8029114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8029118:	2300      	movs	r3, #0
 802911a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 802911e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029122:	f003 030f 	and.w	r3, r3, #15
 8029126:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 802912a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802912e:	2b00      	cmp	r3, #0
 8029130:	d10f      	bne.n	8029152 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8029132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029136:	f003 0320 	and.w	r3, r3, #32
 802913a:	2b00      	cmp	r3, #0
 802913c:	d009      	beq.n	8029152 <HAL_UART_IRQHandler+0x66>
 802913e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029142:	f003 0320 	and.w	r3, r3, #32
 8029146:	2b00      	cmp	r3, #0
 8029148:	d003      	beq.n	8029152 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 802914a:	6878      	ldr	r0, [r7, #4]
 802914c:	f000 fc07 	bl	802995e <UART_Receive_IT>
      return;
 8029150:	e256      	b.n	8029600 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8029152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8029156:	2b00      	cmp	r3, #0
 8029158:	f000 80de 	beq.w	8029318 <HAL_UART_IRQHandler+0x22c>
 802915c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029160:	f003 0301 	and.w	r3, r3, #1
 8029164:	2b00      	cmp	r3, #0
 8029166:	d106      	bne.n	8029176 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8029168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802916c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8029170:	2b00      	cmp	r3, #0
 8029172:	f000 80d1 	beq.w	8029318 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8029176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802917a:	f003 0301 	and.w	r3, r3, #1
 802917e:	2b00      	cmp	r3, #0
 8029180:	d00b      	beq.n	802919a <HAL_UART_IRQHandler+0xae>
 8029182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802918a:	2b00      	cmp	r3, #0
 802918c:	d005      	beq.n	802919a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802918e:	687b      	ldr	r3, [r7, #4]
 8029190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029192:	f043 0201 	orr.w	r2, r3, #1
 8029196:	687b      	ldr	r3, [r7, #4]
 8029198:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802919a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802919e:	f003 0304 	and.w	r3, r3, #4
 80291a2:	2b00      	cmp	r3, #0
 80291a4:	d00b      	beq.n	80291be <HAL_UART_IRQHandler+0xd2>
 80291a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80291aa:	f003 0301 	and.w	r3, r3, #1
 80291ae:	2b00      	cmp	r3, #0
 80291b0:	d005      	beq.n	80291be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80291b2:	687b      	ldr	r3, [r7, #4]
 80291b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80291b6:	f043 0202 	orr.w	r2, r3, #2
 80291ba:	687b      	ldr	r3, [r7, #4]
 80291bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80291be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80291c2:	f003 0302 	and.w	r3, r3, #2
 80291c6:	2b00      	cmp	r3, #0
 80291c8:	d00b      	beq.n	80291e2 <HAL_UART_IRQHandler+0xf6>
 80291ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80291ce:	f003 0301 	and.w	r3, r3, #1
 80291d2:	2b00      	cmp	r3, #0
 80291d4:	d005      	beq.n	80291e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80291d6:	687b      	ldr	r3, [r7, #4]
 80291d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80291da:	f043 0204 	orr.w	r2, r3, #4
 80291de:	687b      	ldr	r3, [r7, #4]
 80291e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80291e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80291e6:	f003 0308 	and.w	r3, r3, #8
 80291ea:	2b00      	cmp	r3, #0
 80291ec:	d011      	beq.n	8029212 <HAL_UART_IRQHandler+0x126>
 80291ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80291f2:	f003 0320 	and.w	r3, r3, #32
 80291f6:	2b00      	cmp	r3, #0
 80291f8:	d105      	bne.n	8029206 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80291fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80291fe:	f003 0301 	and.w	r3, r3, #1
 8029202:	2b00      	cmp	r3, #0
 8029204:	d005      	beq.n	8029212 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8029206:	687b      	ldr	r3, [r7, #4]
 8029208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802920a:	f043 0208 	orr.w	r2, r3, #8
 802920e:	687b      	ldr	r3, [r7, #4]
 8029210:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8029212:	687b      	ldr	r3, [r7, #4]
 8029214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029216:	2b00      	cmp	r3, #0
 8029218:	f000 81ed 	beq.w	80295f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802921c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029220:	f003 0320 	and.w	r3, r3, #32
 8029224:	2b00      	cmp	r3, #0
 8029226:	d008      	beq.n	802923a <HAL_UART_IRQHandler+0x14e>
 8029228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802922c:	f003 0320 	and.w	r3, r3, #32
 8029230:	2b00      	cmp	r3, #0
 8029232:	d002      	beq.n	802923a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8029234:	6878      	ldr	r0, [r7, #4]
 8029236:	f000 fb92 	bl	802995e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802923a:	687b      	ldr	r3, [r7, #4]
 802923c:	681b      	ldr	r3, [r3, #0]
 802923e:	695b      	ldr	r3, [r3, #20]
 8029240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029244:	2b40      	cmp	r3, #64	; 0x40
 8029246:	bf0c      	ite	eq
 8029248:	2301      	moveq	r3, #1
 802924a:	2300      	movne	r3, #0
 802924c:	b2db      	uxtb	r3, r3
 802924e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8029252:	687b      	ldr	r3, [r7, #4]
 8029254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029256:	f003 0308 	and.w	r3, r3, #8
 802925a:	2b00      	cmp	r3, #0
 802925c:	d103      	bne.n	8029266 <HAL_UART_IRQHandler+0x17a>
 802925e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8029262:	2b00      	cmp	r3, #0
 8029264:	d04f      	beq.n	8029306 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8029266:	6878      	ldr	r0, [r7, #4]
 8029268:	f000 fa9a 	bl	80297a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802926c:	687b      	ldr	r3, [r7, #4]
 802926e:	681b      	ldr	r3, [r3, #0]
 8029270:	695b      	ldr	r3, [r3, #20]
 8029272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029276:	2b40      	cmp	r3, #64	; 0x40
 8029278:	d141      	bne.n	80292fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802927a:	687b      	ldr	r3, [r7, #4]
 802927c:	681b      	ldr	r3, [r3, #0]
 802927e:	3314      	adds	r3, #20
 8029280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8029288:	e853 3f00 	ldrex	r3, [r3]
 802928c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8029290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8029294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802929c:	687b      	ldr	r3, [r7, #4]
 802929e:	681b      	ldr	r3, [r3, #0]
 80292a0:	3314      	adds	r3, #20
 80292a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80292a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80292aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80292ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80292b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80292b6:	e841 2300 	strex	r3, r2, [r1]
 80292ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80292be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80292c2:	2b00      	cmp	r3, #0
 80292c4:	d1d9      	bne.n	802927a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80292c6:	687b      	ldr	r3, [r7, #4]
 80292c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80292ca:	2b00      	cmp	r3, #0
 80292cc:	d013      	beq.n	80292f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80292ce:	687b      	ldr	r3, [r7, #4]
 80292d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80292d2:	4a7d      	ldr	r2, [pc, #500]	; (80294c8 <HAL_UART_IRQHandler+0x3dc>)
 80292d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80292d6:	687b      	ldr	r3, [r7, #4]
 80292d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80292da:	4618      	mov	r0, r3
 80292dc:	f7fa fb46 	bl	802396c <HAL_DMA_Abort_IT>
 80292e0:	4603      	mov	r3, r0
 80292e2:	2b00      	cmp	r3, #0
 80292e4:	d016      	beq.n	8029314 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80292e6:	687b      	ldr	r3, [r7, #4]
 80292e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80292ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80292ec:	687a      	ldr	r2, [r7, #4]
 80292ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80292f0:	4610      	mov	r0, r2
 80292f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80292f4:	e00e      	b.n	8029314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80292f6:	6878      	ldr	r0, [r7, #4]
 80292f8:	f000 f990 	bl	802961c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80292fc:	e00a      	b.n	8029314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80292fe:	6878      	ldr	r0, [r7, #4]
 8029300:	f000 f98c 	bl	802961c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029304:	e006      	b.n	8029314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8029306:	6878      	ldr	r0, [r7, #4]
 8029308:	f000 f988 	bl	802961c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802930c:	687b      	ldr	r3, [r7, #4]
 802930e:	2200      	movs	r2, #0
 8029310:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8029312:	e170      	b.n	80295f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029314:	bf00      	nop
    return;
 8029316:	e16e      	b.n	80295f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8029318:	687b      	ldr	r3, [r7, #4]
 802931a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802931c:	2b01      	cmp	r3, #1
 802931e:	f040 814a 	bne.w	80295b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8029322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029326:	f003 0310 	and.w	r3, r3, #16
 802932a:	2b00      	cmp	r3, #0
 802932c:	f000 8143 	beq.w	80295b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8029330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029334:	f003 0310 	and.w	r3, r3, #16
 8029338:	2b00      	cmp	r3, #0
 802933a:	f000 813c 	beq.w	80295b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 802933e:	2300      	movs	r3, #0
 8029340:	60bb      	str	r3, [r7, #8]
 8029342:	687b      	ldr	r3, [r7, #4]
 8029344:	681b      	ldr	r3, [r3, #0]
 8029346:	681b      	ldr	r3, [r3, #0]
 8029348:	60bb      	str	r3, [r7, #8]
 802934a:	687b      	ldr	r3, [r7, #4]
 802934c:	681b      	ldr	r3, [r3, #0]
 802934e:	685b      	ldr	r3, [r3, #4]
 8029350:	60bb      	str	r3, [r7, #8]
 8029352:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029354:	687b      	ldr	r3, [r7, #4]
 8029356:	681b      	ldr	r3, [r3, #0]
 8029358:	695b      	ldr	r3, [r3, #20]
 802935a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802935e:	2b40      	cmp	r3, #64	; 0x40
 8029360:	f040 80b4 	bne.w	80294cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8029364:	687b      	ldr	r3, [r7, #4]
 8029366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029368:	681b      	ldr	r3, [r3, #0]
 802936a:	685b      	ldr	r3, [r3, #4]
 802936c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8029370:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8029374:	2b00      	cmp	r3, #0
 8029376:	f000 8140 	beq.w	80295fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802937a:	687b      	ldr	r3, [r7, #4]
 802937c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802937e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8029382:	429a      	cmp	r2, r3
 8029384:	f080 8139 	bcs.w	80295fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8029388:	687b      	ldr	r3, [r7, #4]
 802938a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802938e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8029390:	687b      	ldr	r3, [r7, #4]
 8029392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029394:	69db      	ldr	r3, [r3, #28]
 8029396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802939a:	f000 8088 	beq.w	80294ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802939e:	687b      	ldr	r3, [r7, #4]
 80293a0:	681b      	ldr	r3, [r3, #0]
 80293a2:	330c      	adds	r3, #12
 80293a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80293a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80293ac:	e853 3f00 	ldrex	r3, [r3]
 80293b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80293b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80293b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80293bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80293c0:	687b      	ldr	r3, [r7, #4]
 80293c2:	681b      	ldr	r3, [r3, #0]
 80293c4:	330c      	adds	r3, #12
 80293c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80293ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80293ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80293d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80293d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80293da:	e841 2300 	strex	r3, r2, [r1]
 80293de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80293e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80293e6:	2b00      	cmp	r3, #0
 80293e8:	d1d9      	bne.n	802939e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80293ea:	687b      	ldr	r3, [r7, #4]
 80293ec:	681b      	ldr	r3, [r3, #0]
 80293ee:	3314      	adds	r3, #20
 80293f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80293f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80293f4:	e853 3f00 	ldrex	r3, [r3]
 80293f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80293fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80293fc:	f023 0301 	bic.w	r3, r3, #1
 8029400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8029404:	687b      	ldr	r3, [r7, #4]
 8029406:	681b      	ldr	r3, [r3, #0]
 8029408:	3314      	adds	r3, #20
 802940a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 802940e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8029412:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029414:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8029416:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802941a:	e841 2300 	strex	r3, r2, [r1]
 802941e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8029420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8029422:	2b00      	cmp	r3, #0
 8029424:	d1e1      	bne.n	80293ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8029426:	687b      	ldr	r3, [r7, #4]
 8029428:	681b      	ldr	r3, [r3, #0]
 802942a:	3314      	adds	r3, #20
 802942c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802942e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8029430:	e853 3f00 	ldrex	r3, [r3]
 8029434:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8029436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802943c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8029440:	687b      	ldr	r3, [r7, #4]
 8029442:	681b      	ldr	r3, [r3, #0]
 8029444:	3314      	adds	r3, #20
 8029446:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 802944a:	66fa      	str	r2, [r7, #108]	; 0x6c
 802944c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802944e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8029450:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8029452:	e841 2300 	strex	r3, r2, [r1]
 8029456:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8029458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802945a:	2b00      	cmp	r3, #0
 802945c:	d1e3      	bne.n	8029426 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 802945e:	687b      	ldr	r3, [r7, #4]
 8029460:	2220      	movs	r2, #32
 8029462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029466:	687b      	ldr	r3, [r7, #4]
 8029468:	2200      	movs	r2, #0
 802946a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802946c:	687b      	ldr	r3, [r7, #4]
 802946e:	681b      	ldr	r3, [r3, #0]
 8029470:	330c      	adds	r3, #12
 8029472:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029476:	e853 3f00 	ldrex	r3, [r3]
 802947a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802947c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802947e:	f023 0310 	bic.w	r3, r3, #16
 8029482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8029486:	687b      	ldr	r3, [r7, #4]
 8029488:	681b      	ldr	r3, [r3, #0]
 802948a:	330c      	adds	r3, #12
 802948c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8029490:	65ba      	str	r2, [r7, #88]	; 0x58
 8029492:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029494:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8029496:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029498:	e841 2300 	strex	r3, r2, [r1]
 802949c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802949e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80294a0:	2b00      	cmp	r3, #0
 80294a2:	d1e3      	bne.n	802946c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80294a4:	687b      	ldr	r3, [r7, #4]
 80294a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80294a8:	4618      	mov	r0, r3
 80294aa:	f7fa f9ef 	bl	802388c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80294ae:	687b      	ldr	r3, [r7, #4]
 80294b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80294b2:	687b      	ldr	r3, [r7, #4]
 80294b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80294b6:	b29b      	uxth	r3, r3
 80294b8:	1ad3      	subs	r3, r2, r3
 80294ba:	b29b      	uxth	r3, r3
 80294bc:	4619      	mov	r1, r3
 80294be:	6878      	ldr	r0, [r7, #4]
 80294c0:	f000 f8b6 	bl	8029630 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80294c4:	e099      	b.n	80295fa <HAL_UART_IRQHandler+0x50e>
 80294c6:	bf00      	nop
 80294c8:	08029867 	.word	0x08029867
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80294cc:	687b      	ldr	r3, [r7, #4]
 80294ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80294d0:	687b      	ldr	r3, [r7, #4]
 80294d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80294d4:	b29b      	uxth	r3, r3
 80294d6:	1ad3      	subs	r3, r2, r3
 80294d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80294dc:	687b      	ldr	r3, [r7, #4]
 80294de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80294e0:	b29b      	uxth	r3, r3
 80294e2:	2b00      	cmp	r3, #0
 80294e4:	f000 808b 	beq.w	80295fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80294e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80294ec:	2b00      	cmp	r3, #0
 80294ee:	f000 8086 	beq.w	80295fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80294f2:	687b      	ldr	r3, [r7, #4]
 80294f4:	681b      	ldr	r3, [r3, #0]
 80294f6:	330c      	adds	r3, #12
 80294f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80294fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80294fc:	e853 3f00 	ldrex	r3, [r3]
 8029500:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8029502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8029508:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802950c:	687b      	ldr	r3, [r7, #4]
 802950e:	681b      	ldr	r3, [r3, #0]
 8029510:	330c      	adds	r3, #12
 8029512:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8029516:	647a      	str	r2, [r7, #68]	; 0x44
 8029518:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802951a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802951c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802951e:	e841 2300 	strex	r3, r2, [r1]
 8029522:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8029524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029526:	2b00      	cmp	r3, #0
 8029528:	d1e3      	bne.n	80294f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802952a:	687b      	ldr	r3, [r7, #4]
 802952c:	681b      	ldr	r3, [r3, #0]
 802952e:	3314      	adds	r3, #20
 8029530:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029534:	e853 3f00 	ldrex	r3, [r3]
 8029538:	623b      	str	r3, [r7, #32]
   return(result);
 802953a:	6a3b      	ldr	r3, [r7, #32]
 802953c:	f023 0301 	bic.w	r3, r3, #1
 8029540:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8029544:	687b      	ldr	r3, [r7, #4]
 8029546:	681b      	ldr	r3, [r3, #0]
 8029548:	3314      	adds	r3, #20
 802954a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 802954e:	633a      	str	r2, [r7, #48]	; 0x30
 8029550:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8029554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029556:	e841 2300 	strex	r3, r2, [r1]
 802955a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802955c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802955e:	2b00      	cmp	r3, #0
 8029560:	d1e3      	bne.n	802952a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8029562:	687b      	ldr	r3, [r7, #4]
 8029564:	2220      	movs	r2, #32
 8029566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802956a:	687b      	ldr	r3, [r7, #4]
 802956c:	2200      	movs	r2, #0
 802956e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029570:	687b      	ldr	r3, [r7, #4]
 8029572:	681b      	ldr	r3, [r3, #0]
 8029574:	330c      	adds	r3, #12
 8029576:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029578:	693b      	ldr	r3, [r7, #16]
 802957a:	e853 3f00 	ldrex	r3, [r3]
 802957e:	60fb      	str	r3, [r7, #12]
   return(result);
 8029580:	68fb      	ldr	r3, [r7, #12]
 8029582:	f023 0310 	bic.w	r3, r3, #16
 8029586:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802958a:	687b      	ldr	r3, [r7, #4]
 802958c:	681b      	ldr	r3, [r3, #0]
 802958e:	330c      	adds	r3, #12
 8029590:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8029594:	61fa      	str	r2, [r7, #28]
 8029596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029598:	69b9      	ldr	r1, [r7, #24]
 802959a:	69fa      	ldr	r2, [r7, #28]
 802959c:	e841 2300 	strex	r3, r2, [r1]
 80295a0:	617b      	str	r3, [r7, #20]
   return(result);
 80295a2:	697b      	ldr	r3, [r7, #20]
 80295a4:	2b00      	cmp	r3, #0
 80295a6:	d1e3      	bne.n	8029570 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80295a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80295ac:	4619      	mov	r1, r3
 80295ae:	6878      	ldr	r0, [r7, #4]
 80295b0:	f000 f83e 	bl	8029630 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80295b4:	e023      	b.n	80295fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80295b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80295ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80295be:	2b00      	cmp	r3, #0
 80295c0:	d009      	beq.n	80295d6 <HAL_UART_IRQHandler+0x4ea>
 80295c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80295c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80295ca:	2b00      	cmp	r3, #0
 80295cc:	d003      	beq.n	80295d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80295ce:	6878      	ldr	r0, [r7, #4]
 80295d0:	f000 f95d 	bl	802988e <UART_Transmit_IT>
    return;
 80295d4:	e014      	b.n	8029600 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80295d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80295da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80295de:	2b00      	cmp	r3, #0
 80295e0:	d00e      	beq.n	8029600 <HAL_UART_IRQHandler+0x514>
 80295e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80295e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80295ea:	2b00      	cmp	r3, #0
 80295ec:	d008      	beq.n	8029600 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80295ee:	6878      	ldr	r0, [r7, #4]
 80295f0:	f000 f99d 	bl	802992e <UART_EndTransmit_IT>
    return;
 80295f4:	e004      	b.n	8029600 <HAL_UART_IRQHandler+0x514>
    return;
 80295f6:	bf00      	nop
 80295f8:	e002      	b.n	8029600 <HAL_UART_IRQHandler+0x514>
      return;
 80295fa:	bf00      	nop
 80295fc:	e000      	b.n	8029600 <HAL_UART_IRQHandler+0x514>
      return;
 80295fe:	bf00      	nop
  }
}
 8029600:	37e8      	adds	r7, #232	; 0xe8
 8029602:	46bd      	mov	sp, r7
 8029604:	bd80      	pop	{r7, pc}
 8029606:	bf00      	nop

08029608 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8029608:	b480      	push	{r7}
 802960a:	b083      	sub	sp, #12
 802960c:	af00      	add	r7, sp, #0
 802960e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8029610:	bf00      	nop
 8029612:	370c      	adds	r7, #12
 8029614:	46bd      	mov	sp, r7
 8029616:	f85d 7b04 	ldr.w	r7, [sp], #4
 802961a:	4770      	bx	lr

0802961c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802961c:	b480      	push	{r7}
 802961e:	b083      	sub	sp, #12
 8029620:	af00      	add	r7, sp, #0
 8029622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8029624:	bf00      	nop
 8029626:	370c      	adds	r7, #12
 8029628:	46bd      	mov	sp, r7
 802962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802962e:	4770      	bx	lr

08029630 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8029630:	b480      	push	{r7}
 8029632:	b083      	sub	sp, #12
 8029634:	af00      	add	r7, sp, #0
 8029636:	6078      	str	r0, [r7, #4]
 8029638:	460b      	mov	r3, r1
 802963a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 802963c:	bf00      	nop
 802963e:	370c      	adds	r7, #12
 8029640:	46bd      	mov	sp, r7
 8029642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029646:	4770      	bx	lr

08029648 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8029648:	b580      	push	{r7, lr}
 802964a:	b090      	sub	sp, #64	; 0x40
 802964c:	af00      	add	r7, sp, #0
 802964e:	60f8      	str	r0, [r7, #12]
 8029650:	60b9      	str	r1, [r7, #8]
 8029652:	603b      	str	r3, [r7, #0]
 8029654:	4613      	mov	r3, r2
 8029656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8029658:	e050      	b.n	80296fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802965a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802965c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029660:	d04c      	beq.n	80296fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8029662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029664:	2b00      	cmp	r3, #0
 8029666:	d007      	beq.n	8029678 <UART_WaitOnFlagUntilTimeout+0x30>
 8029668:	f7f9 fed6 	bl	8023418 <HAL_GetTick>
 802966c:	4602      	mov	r2, r0
 802966e:	683b      	ldr	r3, [r7, #0]
 8029670:	1ad3      	subs	r3, r2, r3
 8029672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8029674:	429a      	cmp	r2, r3
 8029676:	d241      	bcs.n	80296fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8029678:	68fb      	ldr	r3, [r7, #12]
 802967a:	681b      	ldr	r3, [r3, #0]
 802967c:	330c      	adds	r3, #12
 802967e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029682:	e853 3f00 	ldrex	r3, [r3]
 8029686:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8029688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802968a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802968e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8029690:	68fb      	ldr	r3, [r7, #12]
 8029692:	681b      	ldr	r3, [r3, #0]
 8029694:	330c      	adds	r3, #12
 8029696:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8029698:	637a      	str	r2, [r7, #52]	; 0x34
 802969a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802969c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802969e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80296a0:	e841 2300 	strex	r3, r2, [r1]
 80296a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80296a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80296a8:	2b00      	cmp	r3, #0
 80296aa:	d1e5      	bne.n	8029678 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80296ac:	68fb      	ldr	r3, [r7, #12]
 80296ae:	681b      	ldr	r3, [r3, #0]
 80296b0:	3314      	adds	r3, #20
 80296b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80296b4:	697b      	ldr	r3, [r7, #20]
 80296b6:	e853 3f00 	ldrex	r3, [r3]
 80296ba:	613b      	str	r3, [r7, #16]
   return(result);
 80296bc:	693b      	ldr	r3, [r7, #16]
 80296be:	f023 0301 	bic.w	r3, r3, #1
 80296c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80296c4:	68fb      	ldr	r3, [r7, #12]
 80296c6:	681b      	ldr	r3, [r3, #0]
 80296c8:	3314      	adds	r3, #20
 80296ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80296cc:	623a      	str	r2, [r7, #32]
 80296ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80296d0:	69f9      	ldr	r1, [r7, #28]
 80296d2:	6a3a      	ldr	r2, [r7, #32]
 80296d4:	e841 2300 	strex	r3, r2, [r1]
 80296d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80296da:	69bb      	ldr	r3, [r7, #24]
 80296dc:	2b00      	cmp	r3, #0
 80296de:	d1e5      	bne.n	80296ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80296e0:	68fb      	ldr	r3, [r7, #12]
 80296e2:	2220      	movs	r2, #32
 80296e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80296e8:	68fb      	ldr	r3, [r7, #12]
 80296ea:	2220      	movs	r2, #32
 80296ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80296f0:	68fb      	ldr	r3, [r7, #12]
 80296f2:	2200      	movs	r2, #0
 80296f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80296f8:	2303      	movs	r3, #3
 80296fa:	e00f      	b.n	802971c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80296fc:	68fb      	ldr	r3, [r7, #12]
 80296fe:	681b      	ldr	r3, [r3, #0]
 8029700:	681a      	ldr	r2, [r3, #0]
 8029702:	68bb      	ldr	r3, [r7, #8]
 8029704:	4013      	ands	r3, r2
 8029706:	68ba      	ldr	r2, [r7, #8]
 8029708:	429a      	cmp	r2, r3
 802970a:	bf0c      	ite	eq
 802970c:	2301      	moveq	r3, #1
 802970e:	2300      	movne	r3, #0
 8029710:	b2db      	uxtb	r3, r3
 8029712:	461a      	mov	r2, r3
 8029714:	79fb      	ldrb	r3, [r7, #7]
 8029716:	429a      	cmp	r2, r3
 8029718:	d09f      	beq.n	802965a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 802971a:	2300      	movs	r3, #0
}
 802971c:	4618      	mov	r0, r3
 802971e:	3740      	adds	r7, #64	; 0x40
 8029720:	46bd      	mov	sp, r7
 8029722:	bd80      	pop	{r7, pc}

08029724 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8029724:	b480      	push	{r7}
 8029726:	b085      	sub	sp, #20
 8029728:	af00      	add	r7, sp, #0
 802972a:	60f8      	str	r0, [r7, #12]
 802972c:	60b9      	str	r1, [r7, #8]
 802972e:	4613      	mov	r3, r2
 8029730:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8029732:	68fb      	ldr	r3, [r7, #12]
 8029734:	68ba      	ldr	r2, [r7, #8]
 8029736:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8029738:	68fb      	ldr	r3, [r7, #12]
 802973a:	88fa      	ldrh	r2, [r7, #6]
 802973c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 802973e:	68fb      	ldr	r3, [r7, #12]
 8029740:	88fa      	ldrh	r2, [r7, #6]
 8029742:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029744:	68fb      	ldr	r3, [r7, #12]
 8029746:	2200      	movs	r2, #0
 8029748:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 802974a:	68fb      	ldr	r3, [r7, #12]
 802974c:	2222      	movs	r2, #34	; 0x22
 802974e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8029752:	68fb      	ldr	r3, [r7, #12]
 8029754:	2200      	movs	r2, #0
 8029756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 802975a:	68fb      	ldr	r3, [r7, #12]
 802975c:	691b      	ldr	r3, [r3, #16]
 802975e:	2b00      	cmp	r3, #0
 8029760:	d007      	beq.n	8029772 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8029762:	68fb      	ldr	r3, [r7, #12]
 8029764:	681b      	ldr	r3, [r3, #0]
 8029766:	68da      	ldr	r2, [r3, #12]
 8029768:	68fb      	ldr	r3, [r7, #12]
 802976a:	681b      	ldr	r3, [r3, #0]
 802976c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8029770:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8029772:	68fb      	ldr	r3, [r7, #12]
 8029774:	681b      	ldr	r3, [r3, #0]
 8029776:	695a      	ldr	r2, [r3, #20]
 8029778:	68fb      	ldr	r3, [r7, #12]
 802977a:	681b      	ldr	r3, [r3, #0]
 802977c:	f042 0201 	orr.w	r2, r2, #1
 8029780:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8029782:	68fb      	ldr	r3, [r7, #12]
 8029784:	681b      	ldr	r3, [r3, #0]
 8029786:	68da      	ldr	r2, [r3, #12]
 8029788:	68fb      	ldr	r3, [r7, #12]
 802978a:	681b      	ldr	r3, [r3, #0]
 802978c:	f042 0220 	orr.w	r2, r2, #32
 8029790:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8029792:	2300      	movs	r3, #0
}
 8029794:	4618      	mov	r0, r3
 8029796:	3714      	adds	r7, #20
 8029798:	46bd      	mov	sp, r7
 802979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802979e:	4770      	bx	lr

080297a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80297a0:	b480      	push	{r7}
 80297a2:	b095      	sub	sp, #84	; 0x54
 80297a4:	af00      	add	r7, sp, #0
 80297a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80297a8:	687b      	ldr	r3, [r7, #4]
 80297aa:	681b      	ldr	r3, [r3, #0]
 80297ac:	330c      	adds	r3, #12
 80297ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80297b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80297b2:	e853 3f00 	ldrex	r3, [r3]
 80297b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80297b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80297ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80297be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80297c0:	687b      	ldr	r3, [r7, #4]
 80297c2:	681b      	ldr	r3, [r3, #0]
 80297c4:	330c      	adds	r3, #12
 80297c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80297c8:	643a      	str	r2, [r7, #64]	; 0x40
 80297ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80297cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80297ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80297d0:	e841 2300 	strex	r3, r2, [r1]
 80297d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80297d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80297d8:	2b00      	cmp	r3, #0
 80297da:	d1e5      	bne.n	80297a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80297dc:	687b      	ldr	r3, [r7, #4]
 80297de:	681b      	ldr	r3, [r3, #0]
 80297e0:	3314      	adds	r3, #20
 80297e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80297e4:	6a3b      	ldr	r3, [r7, #32]
 80297e6:	e853 3f00 	ldrex	r3, [r3]
 80297ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80297ec:	69fb      	ldr	r3, [r7, #28]
 80297ee:	f023 0301 	bic.w	r3, r3, #1
 80297f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80297f4:	687b      	ldr	r3, [r7, #4]
 80297f6:	681b      	ldr	r3, [r3, #0]
 80297f8:	3314      	adds	r3, #20
 80297fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80297fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80297fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8029802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029804:	e841 2300 	strex	r3, r2, [r1]
 8029808:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802980c:	2b00      	cmp	r3, #0
 802980e:	d1e5      	bne.n	80297dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8029810:	687b      	ldr	r3, [r7, #4]
 8029812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029814:	2b01      	cmp	r3, #1
 8029816:	d119      	bne.n	802984c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029818:	687b      	ldr	r3, [r7, #4]
 802981a:	681b      	ldr	r3, [r3, #0]
 802981c:	330c      	adds	r3, #12
 802981e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029820:	68fb      	ldr	r3, [r7, #12]
 8029822:	e853 3f00 	ldrex	r3, [r3]
 8029826:	60bb      	str	r3, [r7, #8]
   return(result);
 8029828:	68bb      	ldr	r3, [r7, #8]
 802982a:	f023 0310 	bic.w	r3, r3, #16
 802982e:	647b      	str	r3, [r7, #68]	; 0x44
 8029830:	687b      	ldr	r3, [r7, #4]
 8029832:	681b      	ldr	r3, [r3, #0]
 8029834:	330c      	adds	r3, #12
 8029836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8029838:	61ba      	str	r2, [r7, #24]
 802983a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802983c:	6979      	ldr	r1, [r7, #20]
 802983e:	69ba      	ldr	r2, [r7, #24]
 8029840:	e841 2300 	strex	r3, r2, [r1]
 8029844:	613b      	str	r3, [r7, #16]
   return(result);
 8029846:	693b      	ldr	r3, [r7, #16]
 8029848:	2b00      	cmp	r3, #0
 802984a:	d1e5      	bne.n	8029818 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802984c:	687b      	ldr	r3, [r7, #4]
 802984e:	2220      	movs	r2, #32
 8029850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029854:	687b      	ldr	r3, [r7, #4]
 8029856:	2200      	movs	r2, #0
 8029858:	631a      	str	r2, [r3, #48]	; 0x30
}
 802985a:	bf00      	nop
 802985c:	3754      	adds	r7, #84	; 0x54
 802985e:	46bd      	mov	sp, r7
 8029860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029864:	4770      	bx	lr

08029866 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8029866:	b580      	push	{r7, lr}
 8029868:	b084      	sub	sp, #16
 802986a:	af00      	add	r7, sp, #0
 802986c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802986e:	687b      	ldr	r3, [r7, #4]
 8029870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029872:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8029874:	68fb      	ldr	r3, [r7, #12]
 8029876:	2200      	movs	r2, #0
 8029878:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802987a:	68fb      	ldr	r3, [r7, #12]
 802987c:	2200      	movs	r2, #0
 802987e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8029880:	68f8      	ldr	r0, [r7, #12]
 8029882:	f7ff fecb 	bl	802961c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8029886:	bf00      	nop
 8029888:	3710      	adds	r7, #16
 802988a:	46bd      	mov	sp, r7
 802988c:	bd80      	pop	{r7, pc}

0802988e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802988e:	b480      	push	{r7}
 8029890:	b085      	sub	sp, #20
 8029892:	af00      	add	r7, sp, #0
 8029894:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8029896:	687b      	ldr	r3, [r7, #4]
 8029898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802989c:	b2db      	uxtb	r3, r3
 802989e:	2b21      	cmp	r3, #33	; 0x21
 80298a0:	d13e      	bne.n	8029920 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80298a2:	687b      	ldr	r3, [r7, #4]
 80298a4:	689b      	ldr	r3, [r3, #8]
 80298a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80298aa:	d114      	bne.n	80298d6 <UART_Transmit_IT+0x48>
 80298ac:	687b      	ldr	r3, [r7, #4]
 80298ae:	691b      	ldr	r3, [r3, #16]
 80298b0:	2b00      	cmp	r3, #0
 80298b2:	d110      	bne.n	80298d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80298b4:	687b      	ldr	r3, [r7, #4]
 80298b6:	6a1b      	ldr	r3, [r3, #32]
 80298b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80298ba:	68fb      	ldr	r3, [r7, #12]
 80298bc:	881b      	ldrh	r3, [r3, #0]
 80298be:	461a      	mov	r2, r3
 80298c0:	687b      	ldr	r3, [r7, #4]
 80298c2:	681b      	ldr	r3, [r3, #0]
 80298c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80298c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80298ca:	687b      	ldr	r3, [r7, #4]
 80298cc:	6a1b      	ldr	r3, [r3, #32]
 80298ce:	1c9a      	adds	r2, r3, #2
 80298d0:	687b      	ldr	r3, [r7, #4]
 80298d2:	621a      	str	r2, [r3, #32]
 80298d4:	e008      	b.n	80298e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80298d6:	687b      	ldr	r3, [r7, #4]
 80298d8:	6a1b      	ldr	r3, [r3, #32]
 80298da:	1c59      	adds	r1, r3, #1
 80298dc:	687a      	ldr	r2, [r7, #4]
 80298de:	6211      	str	r1, [r2, #32]
 80298e0:	781a      	ldrb	r2, [r3, #0]
 80298e2:	687b      	ldr	r3, [r7, #4]
 80298e4:	681b      	ldr	r3, [r3, #0]
 80298e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80298e8:	687b      	ldr	r3, [r7, #4]
 80298ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80298ec:	b29b      	uxth	r3, r3
 80298ee:	3b01      	subs	r3, #1
 80298f0:	b29b      	uxth	r3, r3
 80298f2:	687a      	ldr	r2, [r7, #4]
 80298f4:	4619      	mov	r1, r3
 80298f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80298f8:	2b00      	cmp	r3, #0
 80298fa:	d10f      	bne.n	802991c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80298fc:	687b      	ldr	r3, [r7, #4]
 80298fe:	681b      	ldr	r3, [r3, #0]
 8029900:	68da      	ldr	r2, [r3, #12]
 8029902:	687b      	ldr	r3, [r7, #4]
 8029904:	681b      	ldr	r3, [r3, #0]
 8029906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802990a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802990c:	687b      	ldr	r3, [r7, #4]
 802990e:	681b      	ldr	r3, [r3, #0]
 8029910:	68da      	ldr	r2, [r3, #12]
 8029912:	687b      	ldr	r3, [r7, #4]
 8029914:	681b      	ldr	r3, [r3, #0]
 8029916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802991a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802991c:	2300      	movs	r3, #0
 802991e:	e000      	b.n	8029922 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8029920:	2302      	movs	r3, #2
  }
}
 8029922:	4618      	mov	r0, r3
 8029924:	3714      	adds	r7, #20
 8029926:	46bd      	mov	sp, r7
 8029928:	f85d 7b04 	ldr.w	r7, [sp], #4
 802992c:	4770      	bx	lr

0802992e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802992e:	b580      	push	{r7, lr}
 8029930:	b082      	sub	sp, #8
 8029932:	af00      	add	r7, sp, #0
 8029934:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8029936:	687b      	ldr	r3, [r7, #4]
 8029938:	681b      	ldr	r3, [r3, #0]
 802993a:	68da      	ldr	r2, [r3, #12]
 802993c:	687b      	ldr	r3, [r7, #4]
 802993e:	681b      	ldr	r3, [r3, #0]
 8029940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8029944:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8029946:	687b      	ldr	r3, [r7, #4]
 8029948:	2220      	movs	r2, #32
 802994a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802994e:	6878      	ldr	r0, [r7, #4]
 8029950:	f7ff fe5a 	bl	8029608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8029954:	2300      	movs	r3, #0
}
 8029956:	4618      	mov	r0, r3
 8029958:	3708      	adds	r7, #8
 802995a:	46bd      	mov	sp, r7
 802995c:	bd80      	pop	{r7, pc}

0802995e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802995e:	b580      	push	{r7, lr}
 8029960:	b08c      	sub	sp, #48	; 0x30
 8029962:	af00      	add	r7, sp, #0
 8029964:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8029966:	687b      	ldr	r3, [r7, #4]
 8029968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802996c:	b2db      	uxtb	r3, r3
 802996e:	2b22      	cmp	r3, #34	; 0x22
 8029970:	f040 80ab 	bne.w	8029aca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8029974:	687b      	ldr	r3, [r7, #4]
 8029976:	689b      	ldr	r3, [r3, #8]
 8029978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802997c:	d117      	bne.n	80299ae <UART_Receive_IT+0x50>
 802997e:	687b      	ldr	r3, [r7, #4]
 8029980:	691b      	ldr	r3, [r3, #16]
 8029982:	2b00      	cmp	r3, #0
 8029984:	d113      	bne.n	80299ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8029986:	2300      	movs	r3, #0
 8029988:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802998a:	687b      	ldr	r3, [r7, #4]
 802998c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802998e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8029990:	687b      	ldr	r3, [r7, #4]
 8029992:	681b      	ldr	r3, [r3, #0]
 8029994:	685b      	ldr	r3, [r3, #4]
 8029996:	b29b      	uxth	r3, r3
 8029998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802999c:	b29a      	uxth	r2, r3
 802999e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80299a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80299a2:	687b      	ldr	r3, [r7, #4]
 80299a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80299a6:	1c9a      	adds	r2, r3, #2
 80299a8:	687b      	ldr	r3, [r7, #4]
 80299aa:	629a      	str	r2, [r3, #40]	; 0x28
 80299ac:	e026      	b.n	80299fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80299ae:	687b      	ldr	r3, [r7, #4]
 80299b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80299b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80299b4:	2300      	movs	r3, #0
 80299b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80299b8:	687b      	ldr	r3, [r7, #4]
 80299ba:	689b      	ldr	r3, [r3, #8]
 80299bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80299c0:	d007      	beq.n	80299d2 <UART_Receive_IT+0x74>
 80299c2:	687b      	ldr	r3, [r7, #4]
 80299c4:	689b      	ldr	r3, [r3, #8]
 80299c6:	2b00      	cmp	r3, #0
 80299c8:	d10a      	bne.n	80299e0 <UART_Receive_IT+0x82>
 80299ca:	687b      	ldr	r3, [r7, #4]
 80299cc:	691b      	ldr	r3, [r3, #16]
 80299ce:	2b00      	cmp	r3, #0
 80299d0:	d106      	bne.n	80299e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80299d2:	687b      	ldr	r3, [r7, #4]
 80299d4:	681b      	ldr	r3, [r3, #0]
 80299d6:	685b      	ldr	r3, [r3, #4]
 80299d8:	b2da      	uxtb	r2, r3
 80299da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80299dc:	701a      	strb	r2, [r3, #0]
 80299de:	e008      	b.n	80299f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80299e0:	687b      	ldr	r3, [r7, #4]
 80299e2:	681b      	ldr	r3, [r3, #0]
 80299e4:	685b      	ldr	r3, [r3, #4]
 80299e6:	b2db      	uxtb	r3, r3
 80299e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80299ec:	b2da      	uxtb	r2, r3
 80299ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80299f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80299f2:	687b      	ldr	r3, [r7, #4]
 80299f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80299f6:	1c5a      	adds	r2, r3, #1
 80299f8:	687b      	ldr	r3, [r7, #4]
 80299fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80299fc:	687b      	ldr	r3, [r7, #4]
 80299fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029a00:	b29b      	uxth	r3, r3
 8029a02:	3b01      	subs	r3, #1
 8029a04:	b29b      	uxth	r3, r3
 8029a06:	687a      	ldr	r2, [r7, #4]
 8029a08:	4619      	mov	r1, r3
 8029a0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8029a0c:	2b00      	cmp	r3, #0
 8029a0e:	d15a      	bne.n	8029ac6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8029a10:	687b      	ldr	r3, [r7, #4]
 8029a12:	681b      	ldr	r3, [r3, #0]
 8029a14:	68da      	ldr	r2, [r3, #12]
 8029a16:	687b      	ldr	r3, [r7, #4]
 8029a18:	681b      	ldr	r3, [r3, #0]
 8029a1a:	f022 0220 	bic.w	r2, r2, #32
 8029a1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8029a20:	687b      	ldr	r3, [r7, #4]
 8029a22:	681b      	ldr	r3, [r3, #0]
 8029a24:	68da      	ldr	r2, [r3, #12]
 8029a26:	687b      	ldr	r3, [r7, #4]
 8029a28:	681b      	ldr	r3, [r3, #0]
 8029a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8029a2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8029a30:	687b      	ldr	r3, [r7, #4]
 8029a32:	681b      	ldr	r3, [r3, #0]
 8029a34:	695a      	ldr	r2, [r3, #20]
 8029a36:	687b      	ldr	r3, [r7, #4]
 8029a38:	681b      	ldr	r3, [r3, #0]
 8029a3a:	f022 0201 	bic.w	r2, r2, #1
 8029a3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8029a40:	687b      	ldr	r3, [r7, #4]
 8029a42:	2220      	movs	r2, #32
 8029a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8029a48:	687b      	ldr	r3, [r7, #4]
 8029a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029a4c:	2b01      	cmp	r3, #1
 8029a4e:	d135      	bne.n	8029abc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029a50:	687b      	ldr	r3, [r7, #4]
 8029a52:	2200      	movs	r2, #0
 8029a54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029a56:	687b      	ldr	r3, [r7, #4]
 8029a58:	681b      	ldr	r3, [r3, #0]
 8029a5a:	330c      	adds	r3, #12
 8029a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029a5e:	697b      	ldr	r3, [r7, #20]
 8029a60:	e853 3f00 	ldrex	r3, [r3]
 8029a64:	613b      	str	r3, [r7, #16]
   return(result);
 8029a66:	693b      	ldr	r3, [r7, #16]
 8029a68:	f023 0310 	bic.w	r3, r3, #16
 8029a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8029a6e:	687b      	ldr	r3, [r7, #4]
 8029a70:	681b      	ldr	r3, [r3, #0]
 8029a72:	330c      	adds	r3, #12
 8029a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029a76:	623a      	str	r2, [r7, #32]
 8029a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029a7a:	69f9      	ldr	r1, [r7, #28]
 8029a7c:	6a3a      	ldr	r2, [r7, #32]
 8029a7e:	e841 2300 	strex	r3, r2, [r1]
 8029a82:	61bb      	str	r3, [r7, #24]
   return(result);
 8029a84:	69bb      	ldr	r3, [r7, #24]
 8029a86:	2b00      	cmp	r3, #0
 8029a88:	d1e5      	bne.n	8029a56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8029a8a:	687b      	ldr	r3, [r7, #4]
 8029a8c:	681b      	ldr	r3, [r3, #0]
 8029a8e:	681b      	ldr	r3, [r3, #0]
 8029a90:	f003 0310 	and.w	r3, r3, #16
 8029a94:	2b10      	cmp	r3, #16
 8029a96:	d10a      	bne.n	8029aae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8029a98:	2300      	movs	r3, #0
 8029a9a:	60fb      	str	r3, [r7, #12]
 8029a9c:	687b      	ldr	r3, [r7, #4]
 8029a9e:	681b      	ldr	r3, [r3, #0]
 8029aa0:	681b      	ldr	r3, [r3, #0]
 8029aa2:	60fb      	str	r3, [r7, #12]
 8029aa4:	687b      	ldr	r3, [r7, #4]
 8029aa6:	681b      	ldr	r3, [r3, #0]
 8029aa8:	685b      	ldr	r3, [r3, #4]
 8029aaa:	60fb      	str	r3, [r7, #12]
 8029aac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8029aae:	687b      	ldr	r3, [r7, #4]
 8029ab0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8029ab2:	4619      	mov	r1, r3
 8029ab4:	6878      	ldr	r0, [r7, #4]
 8029ab6:	f7ff fdbb 	bl	8029630 <HAL_UARTEx_RxEventCallback>
 8029aba:	e002      	b.n	8029ac2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8029abc:	6878      	ldr	r0, [r7, #4]
 8029abe:	f7f7 fa2f 	bl	8020f20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8029ac2:	2300      	movs	r3, #0
 8029ac4:	e002      	b.n	8029acc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8029ac6:	2300      	movs	r3, #0
 8029ac8:	e000      	b.n	8029acc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8029aca:	2302      	movs	r3, #2
  }
}
 8029acc:	4618      	mov	r0, r3
 8029ace:	3730      	adds	r7, #48	; 0x30
 8029ad0:	46bd      	mov	sp, r7
 8029ad2:	bd80      	pop	{r7, pc}

08029ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8029ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8029ad8:	b0c0      	sub	sp, #256	; 0x100
 8029ada:	af00      	add	r7, sp, #0
 8029adc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8029ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029ae4:	681b      	ldr	r3, [r3, #0]
 8029ae6:	691b      	ldr	r3, [r3, #16]
 8029ae8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8029aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029af0:	68d9      	ldr	r1, [r3, #12]
 8029af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029af6:	681a      	ldr	r2, [r3, #0]
 8029af8:	ea40 0301 	orr.w	r3, r0, r1
 8029afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8029afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029b02:	689a      	ldr	r2, [r3, #8]
 8029b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029b08:	691b      	ldr	r3, [r3, #16]
 8029b0a:	431a      	orrs	r2, r3
 8029b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029b10:	695b      	ldr	r3, [r3, #20]
 8029b12:	431a      	orrs	r2, r3
 8029b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029b18:	69db      	ldr	r3, [r3, #28]
 8029b1a:	4313      	orrs	r3, r2
 8029b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8029b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029b24:	681b      	ldr	r3, [r3, #0]
 8029b26:	68db      	ldr	r3, [r3, #12]
 8029b28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8029b2c:	f021 010c 	bic.w	r1, r1, #12
 8029b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029b34:	681a      	ldr	r2, [r3, #0]
 8029b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029b3a:	430b      	orrs	r3, r1
 8029b3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8029b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029b42:	681b      	ldr	r3, [r3, #0]
 8029b44:	695b      	ldr	r3, [r3, #20]
 8029b46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8029b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029b4e:	6999      	ldr	r1, [r3, #24]
 8029b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029b54:	681a      	ldr	r2, [r3, #0]
 8029b56:	ea40 0301 	orr.w	r3, r0, r1
 8029b5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8029b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029b60:	681a      	ldr	r2, [r3, #0]
 8029b62:	4b8f      	ldr	r3, [pc, #572]	; (8029da0 <UART_SetConfig+0x2cc>)
 8029b64:	429a      	cmp	r2, r3
 8029b66:	d005      	beq.n	8029b74 <UART_SetConfig+0xa0>
 8029b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029b6c:	681a      	ldr	r2, [r3, #0]
 8029b6e:	4b8d      	ldr	r3, [pc, #564]	; (8029da4 <UART_SetConfig+0x2d0>)
 8029b70:	429a      	cmp	r2, r3
 8029b72:	d104      	bne.n	8029b7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8029b74:	f7fd fcb2 	bl	80274dc <HAL_RCC_GetPCLK2Freq>
 8029b78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8029b7c:	e003      	b.n	8029b86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8029b7e:	f7fd fc99 	bl	80274b4 <HAL_RCC_GetPCLK1Freq>
 8029b82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8029b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029b8a:	69db      	ldr	r3, [r3, #28]
 8029b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029b90:	f040 810c 	bne.w	8029dac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8029b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029b98:	2200      	movs	r2, #0
 8029b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8029b9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8029ba2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8029ba6:	4622      	mov	r2, r4
 8029ba8:	462b      	mov	r3, r5
 8029baa:	1891      	adds	r1, r2, r2
 8029bac:	65b9      	str	r1, [r7, #88]	; 0x58
 8029bae:	415b      	adcs	r3, r3
 8029bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029bb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8029bb6:	4621      	mov	r1, r4
 8029bb8:	eb12 0801 	adds.w	r8, r2, r1
 8029bbc:	4629      	mov	r1, r5
 8029bbe:	eb43 0901 	adc.w	r9, r3, r1
 8029bc2:	f04f 0200 	mov.w	r2, #0
 8029bc6:	f04f 0300 	mov.w	r3, #0
 8029bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8029bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8029bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8029bd6:	4690      	mov	r8, r2
 8029bd8:	4699      	mov	r9, r3
 8029bda:	4623      	mov	r3, r4
 8029bdc:	eb18 0303 	adds.w	r3, r8, r3
 8029be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8029be4:	462b      	mov	r3, r5
 8029be6:	eb49 0303 	adc.w	r3, r9, r3
 8029bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8029bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029bf2:	685b      	ldr	r3, [r3, #4]
 8029bf4:	2200      	movs	r2, #0
 8029bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8029bfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8029bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8029c02:	460b      	mov	r3, r1
 8029c04:	18db      	adds	r3, r3, r3
 8029c06:	653b      	str	r3, [r7, #80]	; 0x50
 8029c08:	4613      	mov	r3, r2
 8029c0a:	eb42 0303 	adc.w	r3, r2, r3
 8029c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8029c10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8029c14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8029c18:	f7f6 fb3a 	bl	8020290 <__aeabi_uldivmod>
 8029c1c:	4602      	mov	r2, r0
 8029c1e:	460b      	mov	r3, r1
 8029c20:	4b61      	ldr	r3, [pc, #388]	; (8029da8 <UART_SetConfig+0x2d4>)
 8029c22:	fba3 2302 	umull	r2, r3, r3, r2
 8029c26:	095b      	lsrs	r3, r3, #5
 8029c28:	011c      	lsls	r4, r3, #4
 8029c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029c2e:	2200      	movs	r2, #0
 8029c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8029c34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8029c38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8029c3c:	4642      	mov	r2, r8
 8029c3e:	464b      	mov	r3, r9
 8029c40:	1891      	adds	r1, r2, r2
 8029c42:	64b9      	str	r1, [r7, #72]	; 0x48
 8029c44:	415b      	adcs	r3, r3
 8029c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8029c4c:	4641      	mov	r1, r8
 8029c4e:	eb12 0a01 	adds.w	sl, r2, r1
 8029c52:	4649      	mov	r1, r9
 8029c54:	eb43 0b01 	adc.w	fp, r3, r1
 8029c58:	f04f 0200 	mov.w	r2, #0
 8029c5c:	f04f 0300 	mov.w	r3, #0
 8029c60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8029c64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8029c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8029c6c:	4692      	mov	sl, r2
 8029c6e:	469b      	mov	fp, r3
 8029c70:	4643      	mov	r3, r8
 8029c72:	eb1a 0303 	adds.w	r3, sl, r3
 8029c76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8029c7a:	464b      	mov	r3, r9
 8029c7c:	eb4b 0303 	adc.w	r3, fp, r3
 8029c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8029c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029c88:	685b      	ldr	r3, [r3, #4]
 8029c8a:	2200      	movs	r2, #0
 8029c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8029c90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8029c94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8029c98:	460b      	mov	r3, r1
 8029c9a:	18db      	adds	r3, r3, r3
 8029c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8029c9e:	4613      	mov	r3, r2
 8029ca0:	eb42 0303 	adc.w	r3, r2, r3
 8029ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8029ca6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8029caa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8029cae:	f7f6 faef 	bl	8020290 <__aeabi_uldivmod>
 8029cb2:	4602      	mov	r2, r0
 8029cb4:	460b      	mov	r3, r1
 8029cb6:	4611      	mov	r1, r2
 8029cb8:	4b3b      	ldr	r3, [pc, #236]	; (8029da8 <UART_SetConfig+0x2d4>)
 8029cba:	fba3 2301 	umull	r2, r3, r3, r1
 8029cbe:	095b      	lsrs	r3, r3, #5
 8029cc0:	2264      	movs	r2, #100	; 0x64
 8029cc2:	fb02 f303 	mul.w	r3, r2, r3
 8029cc6:	1acb      	subs	r3, r1, r3
 8029cc8:	00db      	lsls	r3, r3, #3
 8029cca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8029cce:	4b36      	ldr	r3, [pc, #216]	; (8029da8 <UART_SetConfig+0x2d4>)
 8029cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8029cd4:	095b      	lsrs	r3, r3, #5
 8029cd6:	005b      	lsls	r3, r3, #1
 8029cd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8029cdc:	441c      	add	r4, r3
 8029cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029ce2:	2200      	movs	r2, #0
 8029ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8029ce8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8029cec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8029cf0:	4642      	mov	r2, r8
 8029cf2:	464b      	mov	r3, r9
 8029cf4:	1891      	adds	r1, r2, r2
 8029cf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8029cf8:	415b      	adcs	r3, r3
 8029cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8029cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8029d00:	4641      	mov	r1, r8
 8029d02:	1851      	adds	r1, r2, r1
 8029d04:	6339      	str	r1, [r7, #48]	; 0x30
 8029d06:	4649      	mov	r1, r9
 8029d08:	414b      	adcs	r3, r1
 8029d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8029d0c:	f04f 0200 	mov.w	r2, #0
 8029d10:	f04f 0300 	mov.w	r3, #0
 8029d14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8029d18:	4659      	mov	r1, fp
 8029d1a:	00cb      	lsls	r3, r1, #3
 8029d1c:	4651      	mov	r1, sl
 8029d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029d22:	4651      	mov	r1, sl
 8029d24:	00ca      	lsls	r2, r1, #3
 8029d26:	4610      	mov	r0, r2
 8029d28:	4619      	mov	r1, r3
 8029d2a:	4603      	mov	r3, r0
 8029d2c:	4642      	mov	r2, r8
 8029d2e:	189b      	adds	r3, r3, r2
 8029d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8029d34:	464b      	mov	r3, r9
 8029d36:	460a      	mov	r2, r1
 8029d38:	eb42 0303 	adc.w	r3, r2, r3
 8029d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8029d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029d44:	685b      	ldr	r3, [r3, #4]
 8029d46:	2200      	movs	r2, #0
 8029d48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8029d4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8029d50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8029d54:	460b      	mov	r3, r1
 8029d56:	18db      	adds	r3, r3, r3
 8029d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8029d5a:	4613      	mov	r3, r2
 8029d5c:	eb42 0303 	adc.w	r3, r2, r3
 8029d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029d62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8029d66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8029d6a:	f7f6 fa91 	bl	8020290 <__aeabi_uldivmod>
 8029d6e:	4602      	mov	r2, r0
 8029d70:	460b      	mov	r3, r1
 8029d72:	4b0d      	ldr	r3, [pc, #52]	; (8029da8 <UART_SetConfig+0x2d4>)
 8029d74:	fba3 1302 	umull	r1, r3, r3, r2
 8029d78:	095b      	lsrs	r3, r3, #5
 8029d7a:	2164      	movs	r1, #100	; 0x64
 8029d7c:	fb01 f303 	mul.w	r3, r1, r3
 8029d80:	1ad3      	subs	r3, r2, r3
 8029d82:	00db      	lsls	r3, r3, #3
 8029d84:	3332      	adds	r3, #50	; 0x32
 8029d86:	4a08      	ldr	r2, [pc, #32]	; (8029da8 <UART_SetConfig+0x2d4>)
 8029d88:	fba2 2303 	umull	r2, r3, r2, r3
 8029d8c:	095b      	lsrs	r3, r3, #5
 8029d8e:	f003 0207 	and.w	r2, r3, #7
 8029d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029d96:	681b      	ldr	r3, [r3, #0]
 8029d98:	4422      	add	r2, r4
 8029d9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8029d9c:	e105      	b.n	8029faa <UART_SetConfig+0x4d6>
 8029d9e:	bf00      	nop
 8029da0:	40011000 	.word	0x40011000
 8029da4:	40011400 	.word	0x40011400
 8029da8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8029dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029db0:	2200      	movs	r2, #0
 8029db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8029db6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8029dba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8029dbe:	4642      	mov	r2, r8
 8029dc0:	464b      	mov	r3, r9
 8029dc2:	1891      	adds	r1, r2, r2
 8029dc4:	6239      	str	r1, [r7, #32]
 8029dc6:	415b      	adcs	r3, r3
 8029dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8029dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8029dce:	4641      	mov	r1, r8
 8029dd0:	1854      	adds	r4, r2, r1
 8029dd2:	4649      	mov	r1, r9
 8029dd4:	eb43 0501 	adc.w	r5, r3, r1
 8029dd8:	f04f 0200 	mov.w	r2, #0
 8029ddc:	f04f 0300 	mov.w	r3, #0
 8029de0:	00eb      	lsls	r3, r5, #3
 8029de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8029de6:	00e2      	lsls	r2, r4, #3
 8029de8:	4614      	mov	r4, r2
 8029dea:	461d      	mov	r5, r3
 8029dec:	4643      	mov	r3, r8
 8029dee:	18e3      	adds	r3, r4, r3
 8029df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8029df4:	464b      	mov	r3, r9
 8029df6:	eb45 0303 	adc.w	r3, r5, r3
 8029dfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8029dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029e02:	685b      	ldr	r3, [r3, #4]
 8029e04:	2200      	movs	r2, #0
 8029e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8029e0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8029e0e:	f04f 0200 	mov.w	r2, #0
 8029e12:	f04f 0300 	mov.w	r3, #0
 8029e16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8029e1a:	4629      	mov	r1, r5
 8029e1c:	008b      	lsls	r3, r1, #2
 8029e1e:	4621      	mov	r1, r4
 8029e20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029e24:	4621      	mov	r1, r4
 8029e26:	008a      	lsls	r2, r1, #2
 8029e28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8029e2c:	f7f6 fa30 	bl	8020290 <__aeabi_uldivmod>
 8029e30:	4602      	mov	r2, r0
 8029e32:	460b      	mov	r3, r1
 8029e34:	4b60      	ldr	r3, [pc, #384]	; (8029fb8 <UART_SetConfig+0x4e4>)
 8029e36:	fba3 2302 	umull	r2, r3, r3, r2
 8029e3a:	095b      	lsrs	r3, r3, #5
 8029e3c:	011c      	lsls	r4, r3, #4
 8029e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029e42:	2200      	movs	r2, #0
 8029e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8029e48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8029e4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8029e50:	4642      	mov	r2, r8
 8029e52:	464b      	mov	r3, r9
 8029e54:	1891      	adds	r1, r2, r2
 8029e56:	61b9      	str	r1, [r7, #24]
 8029e58:	415b      	adcs	r3, r3
 8029e5a:	61fb      	str	r3, [r7, #28]
 8029e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8029e60:	4641      	mov	r1, r8
 8029e62:	1851      	adds	r1, r2, r1
 8029e64:	6139      	str	r1, [r7, #16]
 8029e66:	4649      	mov	r1, r9
 8029e68:	414b      	adcs	r3, r1
 8029e6a:	617b      	str	r3, [r7, #20]
 8029e6c:	f04f 0200 	mov.w	r2, #0
 8029e70:	f04f 0300 	mov.w	r3, #0
 8029e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8029e78:	4659      	mov	r1, fp
 8029e7a:	00cb      	lsls	r3, r1, #3
 8029e7c:	4651      	mov	r1, sl
 8029e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029e82:	4651      	mov	r1, sl
 8029e84:	00ca      	lsls	r2, r1, #3
 8029e86:	4610      	mov	r0, r2
 8029e88:	4619      	mov	r1, r3
 8029e8a:	4603      	mov	r3, r0
 8029e8c:	4642      	mov	r2, r8
 8029e8e:	189b      	adds	r3, r3, r2
 8029e90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8029e94:	464b      	mov	r3, r9
 8029e96:	460a      	mov	r2, r1
 8029e98:	eb42 0303 	adc.w	r3, r2, r3
 8029e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8029ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029ea4:	685b      	ldr	r3, [r3, #4]
 8029ea6:	2200      	movs	r2, #0
 8029ea8:	67bb      	str	r3, [r7, #120]	; 0x78
 8029eaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8029eac:	f04f 0200 	mov.w	r2, #0
 8029eb0:	f04f 0300 	mov.w	r3, #0
 8029eb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8029eb8:	4649      	mov	r1, r9
 8029eba:	008b      	lsls	r3, r1, #2
 8029ebc:	4641      	mov	r1, r8
 8029ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029ec2:	4641      	mov	r1, r8
 8029ec4:	008a      	lsls	r2, r1, #2
 8029ec6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8029eca:	f7f6 f9e1 	bl	8020290 <__aeabi_uldivmod>
 8029ece:	4602      	mov	r2, r0
 8029ed0:	460b      	mov	r3, r1
 8029ed2:	4b39      	ldr	r3, [pc, #228]	; (8029fb8 <UART_SetConfig+0x4e4>)
 8029ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8029ed8:	095b      	lsrs	r3, r3, #5
 8029eda:	2164      	movs	r1, #100	; 0x64
 8029edc:	fb01 f303 	mul.w	r3, r1, r3
 8029ee0:	1ad3      	subs	r3, r2, r3
 8029ee2:	011b      	lsls	r3, r3, #4
 8029ee4:	3332      	adds	r3, #50	; 0x32
 8029ee6:	4a34      	ldr	r2, [pc, #208]	; (8029fb8 <UART_SetConfig+0x4e4>)
 8029ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8029eec:	095b      	lsrs	r3, r3, #5
 8029eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029ef2:	441c      	add	r4, r3
 8029ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029ef8:	2200      	movs	r2, #0
 8029efa:	673b      	str	r3, [r7, #112]	; 0x70
 8029efc:	677a      	str	r2, [r7, #116]	; 0x74
 8029efe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8029f02:	4642      	mov	r2, r8
 8029f04:	464b      	mov	r3, r9
 8029f06:	1891      	adds	r1, r2, r2
 8029f08:	60b9      	str	r1, [r7, #8]
 8029f0a:	415b      	adcs	r3, r3
 8029f0c:	60fb      	str	r3, [r7, #12]
 8029f0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8029f12:	4641      	mov	r1, r8
 8029f14:	1851      	adds	r1, r2, r1
 8029f16:	6039      	str	r1, [r7, #0]
 8029f18:	4649      	mov	r1, r9
 8029f1a:	414b      	adcs	r3, r1
 8029f1c:	607b      	str	r3, [r7, #4]
 8029f1e:	f04f 0200 	mov.w	r2, #0
 8029f22:	f04f 0300 	mov.w	r3, #0
 8029f26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8029f2a:	4659      	mov	r1, fp
 8029f2c:	00cb      	lsls	r3, r1, #3
 8029f2e:	4651      	mov	r1, sl
 8029f30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029f34:	4651      	mov	r1, sl
 8029f36:	00ca      	lsls	r2, r1, #3
 8029f38:	4610      	mov	r0, r2
 8029f3a:	4619      	mov	r1, r3
 8029f3c:	4603      	mov	r3, r0
 8029f3e:	4642      	mov	r2, r8
 8029f40:	189b      	adds	r3, r3, r2
 8029f42:	66bb      	str	r3, [r7, #104]	; 0x68
 8029f44:	464b      	mov	r3, r9
 8029f46:	460a      	mov	r2, r1
 8029f48:	eb42 0303 	adc.w	r3, r2, r3
 8029f4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8029f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029f52:	685b      	ldr	r3, [r3, #4]
 8029f54:	2200      	movs	r2, #0
 8029f56:	663b      	str	r3, [r7, #96]	; 0x60
 8029f58:	667a      	str	r2, [r7, #100]	; 0x64
 8029f5a:	f04f 0200 	mov.w	r2, #0
 8029f5e:	f04f 0300 	mov.w	r3, #0
 8029f62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8029f66:	4649      	mov	r1, r9
 8029f68:	008b      	lsls	r3, r1, #2
 8029f6a:	4641      	mov	r1, r8
 8029f6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029f70:	4641      	mov	r1, r8
 8029f72:	008a      	lsls	r2, r1, #2
 8029f74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8029f78:	f7f6 f98a 	bl	8020290 <__aeabi_uldivmod>
 8029f7c:	4602      	mov	r2, r0
 8029f7e:	460b      	mov	r3, r1
 8029f80:	4b0d      	ldr	r3, [pc, #52]	; (8029fb8 <UART_SetConfig+0x4e4>)
 8029f82:	fba3 1302 	umull	r1, r3, r3, r2
 8029f86:	095b      	lsrs	r3, r3, #5
 8029f88:	2164      	movs	r1, #100	; 0x64
 8029f8a:	fb01 f303 	mul.w	r3, r1, r3
 8029f8e:	1ad3      	subs	r3, r2, r3
 8029f90:	011b      	lsls	r3, r3, #4
 8029f92:	3332      	adds	r3, #50	; 0x32
 8029f94:	4a08      	ldr	r2, [pc, #32]	; (8029fb8 <UART_SetConfig+0x4e4>)
 8029f96:	fba2 2303 	umull	r2, r3, r2, r3
 8029f9a:	095b      	lsrs	r3, r3, #5
 8029f9c:	f003 020f 	and.w	r2, r3, #15
 8029fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029fa4:	681b      	ldr	r3, [r3, #0]
 8029fa6:	4422      	add	r2, r4
 8029fa8:	609a      	str	r2, [r3, #8]
}
 8029faa:	bf00      	nop
 8029fac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8029fb0:	46bd      	mov	sp, r7
 8029fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8029fb6:	bf00      	nop
 8029fb8:	51eb851f 	.word	0x51eb851f

08029fbc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8029fbc:	b480      	push	{r7}
 8029fbe:	b083      	sub	sp, #12
 8029fc0:	af00      	add	r7, sp, #0
 8029fc2:	6078      	str	r0, [r7, #4]
 8029fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8029fc6:	683b      	ldr	r3, [r7, #0]
 8029fc8:	681b      	ldr	r3, [r3, #0]
 8029fca:	2b00      	cmp	r3, #0
 8029fcc:	d123      	bne.n	802a016 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8029fce:	687b      	ldr	r3, [r7, #4]
 8029fd0:	681b      	ldr	r3, [r3, #0]
 8029fd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8029fd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8029fda:	683a      	ldr	r2, [r7, #0]
 8029fdc:	6851      	ldr	r1, [r2, #4]
 8029fde:	683a      	ldr	r2, [r7, #0]
 8029fe0:	6892      	ldr	r2, [r2, #8]
 8029fe2:	4311      	orrs	r1, r2
 8029fe4:	683a      	ldr	r2, [r7, #0]
 8029fe6:	68d2      	ldr	r2, [r2, #12]
 8029fe8:	4311      	orrs	r1, r2
 8029fea:	683a      	ldr	r2, [r7, #0]
 8029fec:	6912      	ldr	r2, [r2, #16]
 8029fee:	4311      	orrs	r1, r2
 8029ff0:	683a      	ldr	r2, [r7, #0]
 8029ff2:	6952      	ldr	r2, [r2, #20]
 8029ff4:	4311      	orrs	r1, r2
 8029ff6:	683a      	ldr	r2, [r7, #0]
 8029ff8:	6992      	ldr	r2, [r2, #24]
 8029ffa:	4311      	orrs	r1, r2
 8029ffc:	683a      	ldr	r2, [r7, #0]
 8029ffe:	69d2      	ldr	r2, [r2, #28]
 802a000:	4311      	orrs	r1, r2
 802a002:	683a      	ldr	r2, [r7, #0]
 802a004:	6a12      	ldr	r2, [r2, #32]
 802a006:	4311      	orrs	r1, r2
 802a008:	683a      	ldr	r2, [r7, #0]
 802a00a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802a00c:	430a      	orrs	r2, r1
 802a00e:	431a      	orrs	r2, r3
 802a010:	687b      	ldr	r3, [r7, #4]
 802a012:	601a      	str	r2, [r3, #0]
 802a014:	e028      	b.n	802a068 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 802a016:	687b      	ldr	r3, [r7, #4]
 802a018:	681b      	ldr	r3, [r3, #0]
 802a01a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 802a01e:	683b      	ldr	r3, [r7, #0]
 802a020:	69d9      	ldr	r1, [r3, #28]
 802a022:	683b      	ldr	r3, [r7, #0]
 802a024:	6a1b      	ldr	r3, [r3, #32]
 802a026:	4319      	orrs	r1, r3
 802a028:	683b      	ldr	r3, [r7, #0]
 802a02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a02c:	430b      	orrs	r3, r1
 802a02e:	431a      	orrs	r2, r3
 802a030:	687b      	ldr	r3, [r7, #4]
 802a032:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 802a034:	687b      	ldr	r3, [r7, #4]
 802a036:	685b      	ldr	r3, [r3, #4]
 802a038:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 802a03c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802a040:	683a      	ldr	r2, [r7, #0]
 802a042:	6851      	ldr	r1, [r2, #4]
 802a044:	683a      	ldr	r2, [r7, #0]
 802a046:	6892      	ldr	r2, [r2, #8]
 802a048:	4311      	orrs	r1, r2
 802a04a:	683a      	ldr	r2, [r7, #0]
 802a04c:	68d2      	ldr	r2, [r2, #12]
 802a04e:	4311      	orrs	r1, r2
 802a050:	683a      	ldr	r2, [r7, #0]
 802a052:	6912      	ldr	r2, [r2, #16]
 802a054:	4311      	orrs	r1, r2
 802a056:	683a      	ldr	r2, [r7, #0]
 802a058:	6952      	ldr	r2, [r2, #20]
 802a05a:	4311      	orrs	r1, r2
 802a05c:	683a      	ldr	r2, [r7, #0]
 802a05e:	6992      	ldr	r2, [r2, #24]
 802a060:	430a      	orrs	r2, r1
 802a062:	431a      	orrs	r2, r3
 802a064:	687b      	ldr	r3, [r7, #4]
 802a066:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 802a068:	2300      	movs	r3, #0
}
 802a06a:	4618      	mov	r0, r3
 802a06c:	370c      	adds	r7, #12
 802a06e:	46bd      	mov	sp, r7
 802a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a074:	4770      	bx	lr

0802a076 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 802a076:	b480      	push	{r7}
 802a078:	b085      	sub	sp, #20
 802a07a:	af00      	add	r7, sp, #0
 802a07c:	60f8      	str	r0, [r7, #12]
 802a07e:	60b9      	str	r1, [r7, #8]
 802a080:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 802a082:	687b      	ldr	r3, [r7, #4]
 802a084:	2b00      	cmp	r3, #0
 802a086:	d128      	bne.n	802a0da <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 802a088:	68fb      	ldr	r3, [r7, #12]
 802a08a:	689b      	ldr	r3, [r3, #8]
 802a08c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 802a090:	68bb      	ldr	r3, [r7, #8]
 802a092:	681b      	ldr	r3, [r3, #0]
 802a094:	1e59      	subs	r1, r3, #1
 802a096:	68bb      	ldr	r3, [r7, #8]
 802a098:	685b      	ldr	r3, [r3, #4]
 802a09a:	3b01      	subs	r3, #1
 802a09c:	011b      	lsls	r3, r3, #4
 802a09e:	4319      	orrs	r1, r3
 802a0a0:	68bb      	ldr	r3, [r7, #8]
 802a0a2:	689b      	ldr	r3, [r3, #8]
 802a0a4:	3b01      	subs	r3, #1
 802a0a6:	021b      	lsls	r3, r3, #8
 802a0a8:	4319      	orrs	r1, r3
 802a0aa:	68bb      	ldr	r3, [r7, #8]
 802a0ac:	68db      	ldr	r3, [r3, #12]
 802a0ae:	3b01      	subs	r3, #1
 802a0b0:	031b      	lsls	r3, r3, #12
 802a0b2:	4319      	orrs	r1, r3
 802a0b4:	68bb      	ldr	r3, [r7, #8]
 802a0b6:	691b      	ldr	r3, [r3, #16]
 802a0b8:	3b01      	subs	r3, #1
 802a0ba:	041b      	lsls	r3, r3, #16
 802a0bc:	4319      	orrs	r1, r3
 802a0be:	68bb      	ldr	r3, [r7, #8]
 802a0c0:	695b      	ldr	r3, [r3, #20]
 802a0c2:	3b01      	subs	r3, #1
 802a0c4:	051b      	lsls	r3, r3, #20
 802a0c6:	4319      	orrs	r1, r3
 802a0c8:	68bb      	ldr	r3, [r7, #8]
 802a0ca:	699b      	ldr	r3, [r3, #24]
 802a0cc:	3b01      	subs	r3, #1
 802a0ce:	061b      	lsls	r3, r3, #24
 802a0d0:	430b      	orrs	r3, r1
 802a0d2:	431a      	orrs	r2, r3
 802a0d4:	68fb      	ldr	r3, [r7, #12]
 802a0d6:	609a      	str	r2, [r3, #8]
 802a0d8:	e02f      	b.n	802a13a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 802a0da:	68fb      	ldr	r3, [r7, #12]
 802a0dc:	689b      	ldr	r3, [r3, #8]
 802a0de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 802a0e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802a0e6:	68ba      	ldr	r2, [r7, #8]
 802a0e8:	68d2      	ldr	r2, [r2, #12]
 802a0ea:	3a01      	subs	r2, #1
 802a0ec:	0311      	lsls	r1, r2, #12
 802a0ee:	68ba      	ldr	r2, [r7, #8]
 802a0f0:	6952      	ldr	r2, [r2, #20]
 802a0f2:	3a01      	subs	r2, #1
 802a0f4:	0512      	lsls	r2, r2, #20
 802a0f6:	430a      	orrs	r2, r1
 802a0f8:	431a      	orrs	r2, r3
 802a0fa:	68fb      	ldr	r3, [r7, #12]
 802a0fc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 802a0fe:	68fb      	ldr	r3, [r7, #12]
 802a100:	68db      	ldr	r3, [r3, #12]
 802a102:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 802a106:	68bb      	ldr	r3, [r7, #8]
 802a108:	681b      	ldr	r3, [r3, #0]
 802a10a:	1e59      	subs	r1, r3, #1
 802a10c:	68bb      	ldr	r3, [r7, #8]
 802a10e:	685b      	ldr	r3, [r3, #4]
 802a110:	3b01      	subs	r3, #1
 802a112:	011b      	lsls	r3, r3, #4
 802a114:	4319      	orrs	r1, r3
 802a116:	68bb      	ldr	r3, [r7, #8]
 802a118:	689b      	ldr	r3, [r3, #8]
 802a11a:	3b01      	subs	r3, #1
 802a11c:	021b      	lsls	r3, r3, #8
 802a11e:	4319      	orrs	r1, r3
 802a120:	68bb      	ldr	r3, [r7, #8]
 802a122:	691b      	ldr	r3, [r3, #16]
 802a124:	3b01      	subs	r3, #1
 802a126:	041b      	lsls	r3, r3, #16
 802a128:	4319      	orrs	r1, r3
 802a12a:	68bb      	ldr	r3, [r7, #8]
 802a12c:	699b      	ldr	r3, [r3, #24]
 802a12e:	3b01      	subs	r3, #1
 802a130:	061b      	lsls	r3, r3, #24
 802a132:	430b      	orrs	r3, r1
 802a134:	431a      	orrs	r2, r3
 802a136:	68fb      	ldr	r3, [r7, #12]
 802a138:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 802a13a:	2300      	movs	r3, #0
}
 802a13c:	4618      	mov	r0, r3
 802a13e:	3714      	adds	r7, #20
 802a140:	46bd      	mov	sp, r7
 802a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a146:	4770      	bx	lr

0802a148 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 802a148:	b580      	push	{r7, lr}
 802a14a:	b086      	sub	sp, #24
 802a14c:	af00      	add	r7, sp, #0
 802a14e:	60f8      	str	r0, [r7, #12]
 802a150:	60b9      	str	r1, [r7, #8]
 802a152:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 802a154:	2300      	movs	r3, #0
 802a156:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 802a158:	68fb      	ldr	r3, [r7, #12]
 802a15a:	691b      	ldr	r3, [r3, #16]
 802a15c:	0d9b      	lsrs	r3, r3, #22
 802a15e:	059b      	lsls	r3, r3, #22
 802a160:	68ba      	ldr	r2, [r7, #8]
 802a162:	6811      	ldr	r1, [r2, #0]
 802a164:	68ba      	ldr	r2, [r7, #8]
 802a166:	6852      	ldr	r2, [r2, #4]
 802a168:	4311      	orrs	r1, r2
 802a16a:	68ba      	ldr	r2, [r7, #8]
 802a16c:	6892      	ldr	r2, [r2, #8]
 802a16e:	3a01      	subs	r2, #1
 802a170:	0152      	lsls	r2, r2, #5
 802a172:	4311      	orrs	r1, r2
 802a174:	68ba      	ldr	r2, [r7, #8]
 802a176:	68d2      	ldr	r2, [r2, #12]
 802a178:	0252      	lsls	r2, r2, #9
 802a17a:	430a      	orrs	r2, r1
 802a17c:	431a      	orrs	r2, r3
 802a17e:	68fb      	ldr	r3, [r7, #12]
 802a180:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 802a182:	f7f9 f949 	bl	8023418 <HAL_GetTick>
 802a186:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 802a188:	e010      	b.n	802a1ac <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802a18a:	687b      	ldr	r3, [r7, #4]
 802a18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a190:	d00c      	beq.n	802a1ac <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 802a192:	687b      	ldr	r3, [r7, #4]
 802a194:	2b00      	cmp	r3, #0
 802a196:	d007      	beq.n	802a1a8 <FMC_SDRAM_SendCommand+0x60>
 802a198:	f7f9 f93e 	bl	8023418 <HAL_GetTick>
 802a19c:	4602      	mov	r2, r0
 802a19e:	697b      	ldr	r3, [r7, #20]
 802a1a0:	1ad3      	subs	r3, r2, r3
 802a1a2:	687a      	ldr	r2, [r7, #4]
 802a1a4:	429a      	cmp	r2, r3
 802a1a6:	d201      	bcs.n	802a1ac <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 802a1a8:	2303      	movs	r3, #3
 802a1aa:	e006      	b.n	802a1ba <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 802a1ac:	68fb      	ldr	r3, [r7, #12]
 802a1ae:	699b      	ldr	r3, [r3, #24]
 802a1b0:	f003 0320 	and.w	r3, r3, #32
 802a1b4:	2b20      	cmp	r3, #32
 802a1b6:	d0e8      	beq.n	802a18a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 802a1b8:	2300      	movs	r3, #0
}
 802a1ba:	4618      	mov	r0, r3
 802a1bc:	3718      	adds	r7, #24
 802a1be:	46bd      	mov	sp, r7
 802a1c0:	bd80      	pop	{r7, pc}

0802a1c2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 802a1c2:	b480      	push	{r7}
 802a1c4:	b083      	sub	sp, #12
 802a1c6:	af00      	add	r7, sp, #0
 802a1c8:	6078      	str	r0, [r7, #4]
 802a1ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 802a1cc:	687b      	ldr	r3, [r7, #4]
 802a1ce:	695b      	ldr	r3, [r3, #20]
 802a1d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 802a1d4:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 802a1d8:	683a      	ldr	r2, [r7, #0]
 802a1da:	0052      	lsls	r2, r2, #1
 802a1dc:	431a      	orrs	r2, r3
 802a1de:	687b      	ldr	r3, [r7, #4]
 802a1e0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 802a1e2:	2300      	movs	r3, #0
}
 802a1e4:	4618      	mov	r0, r3
 802a1e6:	370c      	adds	r7, #12
 802a1e8:	46bd      	mov	sp, r7
 802a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1ee:	4770      	bx	lr

0802a1f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802a1f0:	b084      	sub	sp, #16
 802a1f2:	b580      	push	{r7, lr}
 802a1f4:	b084      	sub	sp, #16
 802a1f6:	af00      	add	r7, sp, #0
 802a1f8:	6078      	str	r0, [r7, #4]
 802a1fa:	f107 001c 	add.w	r0, r7, #28
 802a1fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802a202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a204:	2b01      	cmp	r3, #1
 802a206:	d122      	bne.n	802a24e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802a208:	687b      	ldr	r3, [r7, #4]
 802a20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a20c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802a210:	687b      	ldr	r3, [r7, #4]
 802a212:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 802a214:	687b      	ldr	r3, [r7, #4]
 802a216:	68db      	ldr	r3, [r3, #12]
 802a218:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 802a21c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802a220:	687a      	ldr	r2, [r7, #4]
 802a222:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 802a224:	687b      	ldr	r3, [r7, #4]
 802a226:	68db      	ldr	r3, [r3, #12]
 802a228:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802a22c:	687b      	ldr	r3, [r7, #4]
 802a22e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802a230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a232:	2b01      	cmp	r3, #1
 802a234:	d105      	bne.n	802a242 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802a236:	687b      	ldr	r3, [r7, #4]
 802a238:	68db      	ldr	r3, [r3, #12]
 802a23a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802a23e:	687b      	ldr	r3, [r7, #4]
 802a240:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802a242:	6878      	ldr	r0, [r7, #4]
 802a244:	f000 f9c0 	bl	802a5c8 <USB_CoreReset>
 802a248:	4603      	mov	r3, r0
 802a24a:	73fb      	strb	r3, [r7, #15]
 802a24c:	e01a      	b.n	802a284 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802a24e:	687b      	ldr	r3, [r7, #4]
 802a250:	68db      	ldr	r3, [r3, #12]
 802a252:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802a256:	687b      	ldr	r3, [r7, #4]
 802a258:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802a25a:	6878      	ldr	r0, [r7, #4]
 802a25c:	f000 f9b4 	bl	802a5c8 <USB_CoreReset>
 802a260:	4603      	mov	r3, r0
 802a262:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 802a264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802a266:	2b00      	cmp	r3, #0
 802a268:	d106      	bne.n	802a278 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802a26a:	687b      	ldr	r3, [r7, #4]
 802a26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a26e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802a272:	687b      	ldr	r3, [r7, #4]
 802a274:	639a      	str	r2, [r3, #56]	; 0x38
 802a276:	e005      	b.n	802a284 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802a278:	687b      	ldr	r3, [r7, #4]
 802a27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a27c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802a280:	687b      	ldr	r3, [r7, #4]
 802a282:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 802a284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a286:	2b01      	cmp	r3, #1
 802a288:	d10b      	bne.n	802a2a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802a28a:	687b      	ldr	r3, [r7, #4]
 802a28c:	689b      	ldr	r3, [r3, #8]
 802a28e:	f043 0206 	orr.w	r2, r3, #6
 802a292:	687b      	ldr	r3, [r7, #4]
 802a294:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802a296:	687b      	ldr	r3, [r7, #4]
 802a298:	689b      	ldr	r3, [r3, #8]
 802a29a:	f043 0220 	orr.w	r2, r3, #32
 802a29e:	687b      	ldr	r3, [r7, #4]
 802a2a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802a2a2:	7bfb      	ldrb	r3, [r7, #15]
}
 802a2a4:	4618      	mov	r0, r3
 802a2a6:	3710      	adds	r7, #16
 802a2a8:	46bd      	mov	sp, r7
 802a2aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802a2ae:	b004      	add	sp, #16
 802a2b0:	4770      	bx	lr

0802a2b2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802a2b2:	b480      	push	{r7}
 802a2b4:	b083      	sub	sp, #12
 802a2b6:	af00      	add	r7, sp, #0
 802a2b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802a2ba:	687b      	ldr	r3, [r7, #4]
 802a2bc:	689b      	ldr	r3, [r3, #8]
 802a2be:	f043 0201 	orr.w	r2, r3, #1
 802a2c2:	687b      	ldr	r3, [r7, #4]
 802a2c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802a2c6:	2300      	movs	r3, #0
}
 802a2c8:	4618      	mov	r0, r3
 802a2ca:	370c      	adds	r7, #12
 802a2cc:	46bd      	mov	sp, r7
 802a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2d2:	4770      	bx	lr

0802a2d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802a2d4:	b480      	push	{r7}
 802a2d6:	b083      	sub	sp, #12
 802a2d8:	af00      	add	r7, sp, #0
 802a2da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802a2dc:	687b      	ldr	r3, [r7, #4]
 802a2de:	689b      	ldr	r3, [r3, #8]
 802a2e0:	f023 0201 	bic.w	r2, r3, #1
 802a2e4:	687b      	ldr	r3, [r7, #4]
 802a2e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802a2e8:	2300      	movs	r3, #0
}
 802a2ea:	4618      	mov	r0, r3
 802a2ec:	370c      	adds	r7, #12
 802a2ee:	46bd      	mov	sp, r7
 802a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2f4:	4770      	bx	lr

0802a2f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802a2f6:	b580      	push	{r7, lr}
 802a2f8:	b084      	sub	sp, #16
 802a2fa:	af00      	add	r7, sp, #0
 802a2fc:	6078      	str	r0, [r7, #4]
 802a2fe:	460b      	mov	r3, r1
 802a300:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 802a302:	2300      	movs	r3, #0
 802a304:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802a306:	687b      	ldr	r3, [r7, #4]
 802a308:	68db      	ldr	r3, [r3, #12]
 802a30a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802a30e:	687b      	ldr	r3, [r7, #4]
 802a310:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802a312:	78fb      	ldrb	r3, [r7, #3]
 802a314:	2b01      	cmp	r3, #1
 802a316:	d115      	bne.n	802a344 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802a318:	687b      	ldr	r3, [r7, #4]
 802a31a:	68db      	ldr	r3, [r3, #12]
 802a31c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802a320:	687b      	ldr	r3, [r7, #4]
 802a322:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802a324:	2001      	movs	r0, #1
 802a326:	f7f9 f883 	bl	8023430 <HAL_Delay>
      ms++;
 802a32a:	68fb      	ldr	r3, [r7, #12]
 802a32c:	3301      	adds	r3, #1
 802a32e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802a330:	6878      	ldr	r0, [r7, #4]
 802a332:	f000 f93a 	bl	802a5aa <USB_GetMode>
 802a336:	4603      	mov	r3, r0
 802a338:	2b01      	cmp	r3, #1
 802a33a:	d01e      	beq.n	802a37a <USB_SetCurrentMode+0x84>
 802a33c:	68fb      	ldr	r3, [r7, #12]
 802a33e:	2b31      	cmp	r3, #49	; 0x31
 802a340:	d9f0      	bls.n	802a324 <USB_SetCurrentMode+0x2e>
 802a342:	e01a      	b.n	802a37a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 802a344:	78fb      	ldrb	r3, [r7, #3]
 802a346:	2b00      	cmp	r3, #0
 802a348:	d115      	bne.n	802a376 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802a34a:	687b      	ldr	r3, [r7, #4]
 802a34c:	68db      	ldr	r3, [r3, #12]
 802a34e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802a352:	687b      	ldr	r3, [r7, #4]
 802a354:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802a356:	2001      	movs	r0, #1
 802a358:	f7f9 f86a 	bl	8023430 <HAL_Delay>
      ms++;
 802a35c:	68fb      	ldr	r3, [r7, #12]
 802a35e:	3301      	adds	r3, #1
 802a360:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802a362:	6878      	ldr	r0, [r7, #4]
 802a364:	f000 f921 	bl	802a5aa <USB_GetMode>
 802a368:	4603      	mov	r3, r0
 802a36a:	2b00      	cmp	r3, #0
 802a36c:	d005      	beq.n	802a37a <USB_SetCurrentMode+0x84>
 802a36e:	68fb      	ldr	r3, [r7, #12]
 802a370:	2b31      	cmp	r3, #49	; 0x31
 802a372:	d9f0      	bls.n	802a356 <USB_SetCurrentMode+0x60>
 802a374:	e001      	b.n	802a37a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 802a376:	2301      	movs	r3, #1
 802a378:	e005      	b.n	802a386 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 802a37a:	68fb      	ldr	r3, [r7, #12]
 802a37c:	2b32      	cmp	r3, #50	; 0x32
 802a37e:	d101      	bne.n	802a384 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802a380:	2301      	movs	r3, #1
 802a382:	e000      	b.n	802a386 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 802a384:	2300      	movs	r3, #0
}
 802a386:	4618      	mov	r0, r3
 802a388:	3710      	adds	r7, #16
 802a38a:	46bd      	mov	sp, r7
 802a38c:	bd80      	pop	{r7, pc}
	...

0802a390 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802a390:	b480      	push	{r7}
 802a392:	b085      	sub	sp, #20
 802a394:	af00      	add	r7, sp, #0
 802a396:	6078      	str	r0, [r7, #4]
 802a398:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802a39a:	2300      	movs	r3, #0
 802a39c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802a39e:	68fb      	ldr	r3, [r7, #12]
 802a3a0:	3301      	adds	r3, #1
 802a3a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a3a4:	68fb      	ldr	r3, [r7, #12]
 802a3a6:	4a13      	ldr	r2, [pc, #76]	; (802a3f4 <USB_FlushTxFifo+0x64>)
 802a3a8:	4293      	cmp	r3, r2
 802a3aa:	d901      	bls.n	802a3b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 802a3ac:	2303      	movs	r3, #3
 802a3ae:	e01b      	b.n	802a3e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802a3b0:	687b      	ldr	r3, [r7, #4]
 802a3b2:	691b      	ldr	r3, [r3, #16]
 802a3b4:	2b00      	cmp	r3, #0
 802a3b6:	daf2      	bge.n	802a39e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 802a3b8:	2300      	movs	r3, #0
 802a3ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802a3bc:	683b      	ldr	r3, [r7, #0]
 802a3be:	019b      	lsls	r3, r3, #6
 802a3c0:	f043 0220 	orr.w	r2, r3, #32
 802a3c4:	687b      	ldr	r3, [r7, #4]
 802a3c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802a3c8:	68fb      	ldr	r3, [r7, #12]
 802a3ca:	3301      	adds	r3, #1
 802a3cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a3ce:	68fb      	ldr	r3, [r7, #12]
 802a3d0:	4a08      	ldr	r2, [pc, #32]	; (802a3f4 <USB_FlushTxFifo+0x64>)
 802a3d2:	4293      	cmp	r3, r2
 802a3d4:	d901      	bls.n	802a3da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802a3d6:	2303      	movs	r3, #3
 802a3d8:	e006      	b.n	802a3e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802a3da:	687b      	ldr	r3, [r7, #4]
 802a3dc:	691b      	ldr	r3, [r3, #16]
 802a3de:	f003 0320 	and.w	r3, r3, #32
 802a3e2:	2b20      	cmp	r3, #32
 802a3e4:	d0f0      	beq.n	802a3c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802a3e6:	2300      	movs	r3, #0
}
 802a3e8:	4618      	mov	r0, r3
 802a3ea:	3714      	adds	r7, #20
 802a3ec:	46bd      	mov	sp, r7
 802a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3f2:	4770      	bx	lr
 802a3f4:	00030d40 	.word	0x00030d40

0802a3f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802a3f8:	b480      	push	{r7}
 802a3fa:	b085      	sub	sp, #20
 802a3fc:	af00      	add	r7, sp, #0
 802a3fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802a400:	2300      	movs	r3, #0
 802a402:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802a404:	68fb      	ldr	r3, [r7, #12]
 802a406:	3301      	adds	r3, #1
 802a408:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a40a:	68fb      	ldr	r3, [r7, #12]
 802a40c:	4a11      	ldr	r2, [pc, #68]	; (802a454 <USB_FlushRxFifo+0x5c>)
 802a40e:	4293      	cmp	r3, r2
 802a410:	d901      	bls.n	802a416 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802a412:	2303      	movs	r3, #3
 802a414:	e018      	b.n	802a448 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802a416:	687b      	ldr	r3, [r7, #4]
 802a418:	691b      	ldr	r3, [r3, #16]
 802a41a:	2b00      	cmp	r3, #0
 802a41c:	daf2      	bge.n	802a404 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802a41e:	2300      	movs	r3, #0
 802a420:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802a422:	687b      	ldr	r3, [r7, #4]
 802a424:	2210      	movs	r2, #16
 802a426:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802a428:	68fb      	ldr	r3, [r7, #12]
 802a42a:	3301      	adds	r3, #1
 802a42c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a42e:	68fb      	ldr	r3, [r7, #12]
 802a430:	4a08      	ldr	r2, [pc, #32]	; (802a454 <USB_FlushRxFifo+0x5c>)
 802a432:	4293      	cmp	r3, r2
 802a434:	d901      	bls.n	802a43a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802a436:	2303      	movs	r3, #3
 802a438:	e006      	b.n	802a448 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802a43a:	687b      	ldr	r3, [r7, #4]
 802a43c:	691b      	ldr	r3, [r3, #16]
 802a43e:	f003 0310 	and.w	r3, r3, #16
 802a442:	2b10      	cmp	r3, #16
 802a444:	d0f0      	beq.n	802a428 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802a446:	2300      	movs	r3, #0
}
 802a448:	4618      	mov	r0, r3
 802a44a:	3714      	adds	r7, #20
 802a44c:	46bd      	mov	sp, r7
 802a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a452:	4770      	bx	lr
 802a454:	00030d40 	.word	0x00030d40

0802a458 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802a458:	b480      	push	{r7}
 802a45a:	b089      	sub	sp, #36	; 0x24
 802a45c:	af00      	add	r7, sp, #0
 802a45e:	60f8      	str	r0, [r7, #12]
 802a460:	60b9      	str	r1, [r7, #8]
 802a462:	4611      	mov	r1, r2
 802a464:	461a      	mov	r2, r3
 802a466:	460b      	mov	r3, r1
 802a468:	71fb      	strb	r3, [r7, #7]
 802a46a:	4613      	mov	r3, r2
 802a46c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a46e:	68fb      	ldr	r3, [r7, #12]
 802a470:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802a472:	68bb      	ldr	r3, [r7, #8]
 802a474:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 802a476:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802a47a:	2b00      	cmp	r3, #0
 802a47c:	d123      	bne.n	802a4c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802a47e:	88bb      	ldrh	r3, [r7, #4]
 802a480:	3303      	adds	r3, #3
 802a482:	089b      	lsrs	r3, r3, #2
 802a484:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802a486:	2300      	movs	r3, #0
 802a488:	61bb      	str	r3, [r7, #24]
 802a48a:	e018      	b.n	802a4be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802a48c:	79fb      	ldrb	r3, [r7, #7]
 802a48e:	031a      	lsls	r2, r3, #12
 802a490:	697b      	ldr	r3, [r7, #20]
 802a492:	4413      	add	r3, r2
 802a494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802a498:	461a      	mov	r2, r3
 802a49a:	69fb      	ldr	r3, [r7, #28]
 802a49c:	681b      	ldr	r3, [r3, #0]
 802a49e:	6013      	str	r3, [r2, #0]
      pSrc++;
 802a4a0:	69fb      	ldr	r3, [r7, #28]
 802a4a2:	3301      	adds	r3, #1
 802a4a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802a4a6:	69fb      	ldr	r3, [r7, #28]
 802a4a8:	3301      	adds	r3, #1
 802a4aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802a4ac:	69fb      	ldr	r3, [r7, #28]
 802a4ae:	3301      	adds	r3, #1
 802a4b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802a4b2:	69fb      	ldr	r3, [r7, #28]
 802a4b4:	3301      	adds	r3, #1
 802a4b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802a4b8:	69bb      	ldr	r3, [r7, #24]
 802a4ba:	3301      	adds	r3, #1
 802a4bc:	61bb      	str	r3, [r7, #24]
 802a4be:	69ba      	ldr	r2, [r7, #24]
 802a4c0:	693b      	ldr	r3, [r7, #16]
 802a4c2:	429a      	cmp	r2, r3
 802a4c4:	d3e2      	bcc.n	802a48c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802a4c6:	2300      	movs	r3, #0
}
 802a4c8:	4618      	mov	r0, r3
 802a4ca:	3724      	adds	r7, #36	; 0x24
 802a4cc:	46bd      	mov	sp, r7
 802a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4d2:	4770      	bx	lr

0802a4d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802a4d4:	b480      	push	{r7}
 802a4d6:	b08b      	sub	sp, #44	; 0x2c
 802a4d8:	af00      	add	r7, sp, #0
 802a4da:	60f8      	str	r0, [r7, #12]
 802a4dc:	60b9      	str	r1, [r7, #8]
 802a4de:	4613      	mov	r3, r2
 802a4e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a4e2:	68fb      	ldr	r3, [r7, #12]
 802a4e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802a4e6:	68bb      	ldr	r3, [r7, #8]
 802a4e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802a4ea:	88fb      	ldrh	r3, [r7, #6]
 802a4ec:	089b      	lsrs	r3, r3, #2
 802a4ee:	b29b      	uxth	r3, r3
 802a4f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 802a4f2:	88fb      	ldrh	r3, [r7, #6]
 802a4f4:	f003 0303 	and.w	r3, r3, #3
 802a4f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802a4fa:	2300      	movs	r3, #0
 802a4fc:	623b      	str	r3, [r7, #32]
 802a4fe:	e014      	b.n	802a52a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802a500:	69bb      	ldr	r3, [r7, #24]
 802a502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802a506:	681a      	ldr	r2, [r3, #0]
 802a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a50a:	601a      	str	r2, [r3, #0]
    pDest++;
 802a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a50e:	3301      	adds	r3, #1
 802a510:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802a512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a514:	3301      	adds	r3, #1
 802a516:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a51a:	3301      	adds	r3, #1
 802a51c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802a51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a520:	3301      	adds	r3, #1
 802a522:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 802a524:	6a3b      	ldr	r3, [r7, #32]
 802a526:	3301      	adds	r3, #1
 802a528:	623b      	str	r3, [r7, #32]
 802a52a:	6a3a      	ldr	r2, [r7, #32]
 802a52c:	697b      	ldr	r3, [r7, #20]
 802a52e:	429a      	cmp	r2, r3
 802a530:	d3e6      	bcc.n	802a500 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 802a532:	8bfb      	ldrh	r3, [r7, #30]
 802a534:	2b00      	cmp	r3, #0
 802a536:	d01e      	beq.n	802a576 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 802a538:	2300      	movs	r3, #0
 802a53a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 802a53c:	69bb      	ldr	r3, [r7, #24]
 802a53e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802a542:	461a      	mov	r2, r3
 802a544:	f107 0310 	add.w	r3, r7, #16
 802a548:	6812      	ldr	r2, [r2, #0]
 802a54a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 802a54c:	693a      	ldr	r2, [r7, #16]
 802a54e:	6a3b      	ldr	r3, [r7, #32]
 802a550:	b2db      	uxtb	r3, r3
 802a552:	00db      	lsls	r3, r3, #3
 802a554:	fa22 f303 	lsr.w	r3, r2, r3
 802a558:	b2da      	uxtb	r2, r3
 802a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a55c:	701a      	strb	r2, [r3, #0]
      i++;
 802a55e:	6a3b      	ldr	r3, [r7, #32]
 802a560:	3301      	adds	r3, #1
 802a562:	623b      	str	r3, [r7, #32]
      pDest++;
 802a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a566:	3301      	adds	r3, #1
 802a568:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 802a56a:	8bfb      	ldrh	r3, [r7, #30]
 802a56c:	3b01      	subs	r3, #1
 802a56e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 802a570:	8bfb      	ldrh	r3, [r7, #30]
 802a572:	2b00      	cmp	r3, #0
 802a574:	d1ea      	bne.n	802a54c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802a576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802a578:	4618      	mov	r0, r3
 802a57a:	372c      	adds	r7, #44	; 0x2c
 802a57c:	46bd      	mov	sp, r7
 802a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a582:	4770      	bx	lr

0802a584 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802a584:	b480      	push	{r7}
 802a586:	b085      	sub	sp, #20
 802a588:	af00      	add	r7, sp, #0
 802a58a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802a58c:	687b      	ldr	r3, [r7, #4]
 802a58e:	695b      	ldr	r3, [r3, #20]
 802a590:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802a592:	687b      	ldr	r3, [r7, #4]
 802a594:	699b      	ldr	r3, [r3, #24]
 802a596:	68fa      	ldr	r2, [r7, #12]
 802a598:	4013      	ands	r3, r2
 802a59a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802a59c:	68fb      	ldr	r3, [r7, #12]
}
 802a59e:	4618      	mov	r0, r3
 802a5a0:	3714      	adds	r7, #20
 802a5a2:	46bd      	mov	sp, r7
 802a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a5a8:	4770      	bx	lr

0802a5aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802a5aa:	b480      	push	{r7}
 802a5ac:	b083      	sub	sp, #12
 802a5ae:	af00      	add	r7, sp, #0
 802a5b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802a5b2:	687b      	ldr	r3, [r7, #4]
 802a5b4:	695b      	ldr	r3, [r3, #20]
 802a5b6:	f003 0301 	and.w	r3, r3, #1
}
 802a5ba:	4618      	mov	r0, r3
 802a5bc:	370c      	adds	r7, #12
 802a5be:	46bd      	mov	sp, r7
 802a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a5c4:	4770      	bx	lr
	...

0802a5c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802a5c8:	b480      	push	{r7}
 802a5ca:	b085      	sub	sp, #20
 802a5cc:	af00      	add	r7, sp, #0
 802a5ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802a5d0:	2300      	movs	r3, #0
 802a5d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802a5d4:	68fb      	ldr	r3, [r7, #12]
 802a5d6:	3301      	adds	r3, #1
 802a5d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a5da:	68fb      	ldr	r3, [r7, #12]
 802a5dc:	4a13      	ldr	r2, [pc, #76]	; (802a62c <USB_CoreReset+0x64>)
 802a5de:	4293      	cmp	r3, r2
 802a5e0:	d901      	bls.n	802a5e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802a5e2:	2303      	movs	r3, #3
 802a5e4:	e01b      	b.n	802a61e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802a5e6:	687b      	ldr	r3, [r7, #4]
 802a5e8:	691b      	ldr	r3, [r3, #16]
 802a5ea:	2b00      	cmp	r3, #0
 802a5ec:	daf2      	bge.n	802a5d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802a5ee:	2300      	movs	r3, #0
 802a5f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802a5f2:	687b      	ldr	r3, [r7, #4]
 802a5f4:	691b      	ldr	r3, [r3, #16]
 802a5f6:	f043 0201 	orr.w	r2, r3, #1
 802a5fa:	687b      	ldr	r3, [r7, #4]
 802a5fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802a5fe:	68fb      	ldr	r3, [r7, #12]
 802a600:	3301      	adds	r3, #1
 802a602:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a604:	68fb      	ldr	r3, [r7, #12]
 802a606:	4a09      	ldr	r2, [pc, #36]	; (802a62c <USB_CoreReset+0x64>)
 802a608:	4293      	cmp	r3, r2
 802a60a:	d901      	bls.n	802a610 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802a60c:	2303      	movs	r3, #3
 802a60e:	e006      	b.n	802a61e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802a610:	687b      	ldr	r3, [r7, #4]
 802a612:	691b      	ldr	r3, [r3, #16]
 802a614:	f003 0301 	and.w	r3, r3, #1
 802a618:	2b01      	cmp	r3, #1
 802a61a:	d0f0      	beq.n	802a5fe <USB_CoreReset+0x36>

  return HAL_OK;
 802a61c:	2300      	movs	r3, #0
}
 802a61e:	4618      	mov	r0, r3
 802a620:	3714      	adds	r7, #20
 802a622:	46bd      	mov	sp, r7
 802a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a628:	4770      	bx	lr
 802a62a:	bf00      	nop
 802a62c:	00030d40 	.word	0x00030d40

0802a630 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802a630:	b084      	sub	sp, #16
 802a632:	b580      	push	{r7, lr}
 802a634:	b086      	sub	sp, #24
 802a636:	af00      	add	r7, sp, #0
 802a638:	6078      	str	r0, [r7, #4]
 802a63a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802a63e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802a642:	2300      	movs	r3, #0
 802a644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a646:	687b      	ldr	r3, [r7, #4]
 802a648:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802a64a:	68fb      	ldr	r3, [r7, #12]
 802a64c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802a650:	461a      	mov	r2, r3
 802a652:	2300      	movs	r3, #0
 802a654:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 802a656:	687b      	ldr	r3, [r7, #4]
 802a658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a65a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802a65e:	687b      	ldr	r3, [r7, #4]
 802a660:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802a662:	687b      	ldr	r3, [r7, #4]
 802a664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a666:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802a66a:	687b      	ldr	r3, [r7, #4]
 802a66c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 802a66e:	687b      	ldr	r3, [r7, #4]
 802a670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a672:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 802a676:	687b      	ldr	r3, [r7, #4]
 802a678:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802a67a:	687b      	ldr	r3, [r7, #4]
 802a67c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a67e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a682:	2b00      	cmp	r3, #0
 802a684:	d018      	beq.n	802a6b8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 802a686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a688:	2b01      	cmp	r3, #1
 802a68a:	d10a      	bne.n	802a6a2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 802a68c:	68fb      	ldr	r3, [r7, #12]
 802a68e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a692:	681b      	ldr	r3, [r3, #0]
 802a694:	68fa      	ldr	r2, [r7, #12]
 802a696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a69a:	f043 0304 	orr.w	r3, r3, #4
 802a69e:	6013      	str	r3, [r2, #0]
 802a6a0:	e014      	b.n	802a6cc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802a6a2:	68fb      	ldr	r3, [r7, #12]
 802a6a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a6a8:	681b      	ldr	r3, [r3, #0]
 802a6aa:	68fa      	ldr	r2, [r7, #12]
 802a6ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a6b0:	f023 0304 	bic.w	r3, r3, #4
 802a6b4:	6013      	str	r3, [r2, #0]
 802a6b6:	e009      	b.n	802a6cc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802a6b8:	68fb      	ldr	r3, [r7, #12]
 802a6ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a6be:	681b      	ldr	r3, [r3, #0]
 802a6c0:	68fa      	ldr	r2, [r7, #12]
 802a6c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a6c6:	f023 0304 	bic.w	r3, r3, #4
 802a6ca:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802a6cc:	2110      	movs	r1, #16
 802a6ce:	6878      	ldr	r0, [r7, #4]
 802a6d0:	f7ff fe5e 	bl	802a390 <USB_FlushTxFifo>
 802a6d4:	4603      	mov	r3, r0
 802a6d6:	2b00      	cmp	r3, #0
 802a6d8:	d001      	beq.n	802a6de <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 802a6da:	2301      	movs	r3, #1
 802a6dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802a6de:	6878      	ldr	r0, [r7, #4]
 802a6e0:	f7ff fe8a 	bl	802a3f8 <USB_FlushRxFifo>
 802a6e4:	4603      	mov	r3, r0
 802a6e6:	2b00      	cmp	r3, #0
 802a6e8:	d001      	beq.n	802a6ee <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 802a6ea:	2301      	movs	r3, #1
 802a6ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 802a6ee:	2300      	movs	r3, #0
 802a6f0:	613b      	str	r3, [r7, #16]
 802a6f2:	e015      	b.n	802a720 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 802a6f4:	693b      	ldr	r3, [r7, #16]
 802a6f6:	015a      	lsls	r2, r3, #5
 802a6f8:	68fb      	ldr	r3, [r7, #12]
 802a6fa:	4413      	add	r3, r2
 802a6fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a700:	461a      	mov	r2, r3
 802a702:	f04f 33ff 	mov.w	r3, #4294967295
 802a706:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 802a708:	693b      	ldr	r3, [r7, #16]
 802a70a:	015a      	lsls	r2, r3, #5
 802a70c:	68fb      	ldr	r3, [r7, #12]
 802a70e:	4413      	add	r3, r2
 802a710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a714:	461a      	mov	r2, r3
 802a716:	2300      	movs	r3, #0
 802a718:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 802a71a:	693b      	ldr	r3, [r7, #16]
 802a71c:	3301      	adds	r3, #1
 802a71e:	613b      	str	r3, [r7, #16]
 802a720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a722:	693a      	ldr	r2, [r7, #16]
 802a724:	429a      	cmp	r2, r3
 802a726:	d3e5      	bcc.n	802a6f4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802a728:	687b      	ldr	r3, [r7, #4]
 802a72a:	2200      	movs	r2, #0
 802a72c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 802a72e:	687b      	ldr	r3, [r7, #4]
 802a730:	f04f 32ff 	mov.w	r2, #4294967295
 802a734:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802a736:	687b      	ldr	r3, [r7, #4]
 802a738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a73a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a73e:	2b00      	cmp	r3, #0
 802a740:	d00b      	beq.n	802a75a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 802a742:	687b      	ldr	r3, [r7, #4]
 802a744:	f44f 7200 	mov.w	r2, #512	; 0x200
 802a748:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 802a74a:	687b      	ldr	r3, [r7, #4]
 802a74c:	4a13      	ldr	r2, [pc, #76]	; (802a79c <USB_HostInit+0x16c>)
 802a74e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 802a750:	687b      	ldr	r3, [r7, #4]
 802a752:	4a13      	ldr	r2, [pc, #76]	; (802a7a0 <USB_HostInit+0x170>)
 802a754:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 802a758:	e009      	b.n	802a76e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 802a75a:	687b      	ldr	r3, [r7, #4]
 802a75c:	2280      	movs	r2, #128	; 0x80
 802a75e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 802a760:	687b      	ldr	r3, [r7, #4]
 802a762:	4a10      	ldr	r2, [pc, #64]	; (802a7a4 <USB_HostInit+0x174>)
 802a764:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 802a766:	687b      	ldr	r3, [r7, #4]
 802a768:	4a0f      	ldr	r2, [pc, #60]	; (802a7a8 <USB_HostInit+0x178>)
 802a76a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802a76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a770:	2b00      	cmp	r3, #0
 802a772:	d105      	bne.n	802a780 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802a774:	687b      	ldr	r3, [r7, #4]
 802a776:	699b      	ldr	r3, [r3, #24]
 802a778:	f043 0210 	orr.w	r2, r3, #16
 802a77c:	687b      	ldr	r3, [r7, #4]
 802a77e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 802a780:	687b      	ldr	r3, [r7, #4]
 802a782:	699a      	ldr	r2, [r3, #24]
 802a784:	4b09      	ldr	r3, [pc, #36]	; (802a7ac <USB_HostInit+0x17c>)
 802a786:	4313      	orrs	r3, r2
 802a788:	687a      	ldr	r2, [r7, #4]
 802a78a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 802a78c:	7dfb      	ldrb	r3, [r7, #23]
}
 802a78e:	4618      	mov	r0, r3
 802a790:	3718      	adds	r7, #24
 802a792:	46bd      	mov	sp, r7
 802a794:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802a798:	b004      	add	sp, #16
 802a79a:	4770      	bx	lr
 802a79c:	01000200 	.word	0x01000200
 802a7a0:	00e00300 	.word	0x00e00300
 802a7a4:	00600080 	.word	0x00600080
 802a7a8:	004000e0 	.word	0x004000e0
 802a7ac:	a3200008 	.word	0xa3200008

0802a7b0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 802a7b0:	b480      	push	{r7}
 802a7b2:	b085      	sub	sp, #20
 802a7b4:	af00      	add	r7, sp, #0
 802a7b6:	6078      	str	r0, [r7, #4]
 802a7b8:	460b      	mov	r3, r1
 802a7ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a7bc:	687b      	ldr	r3, [r7, #4]
 802a7be:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 802a7c0:	68fb      	ldr	r3, [r7, #12]
 802a7c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a7c6:	681b      	ldr	r3, [r3, #0]
 802a7c8:	68fa      	ldr	r2, [r7, #12]
 802a7ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a7ce:	f023 0303 	bic.w	r3, r3, #3
 802a7d2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 802a7d4:	68fb      	ldr	r3, [r7, #12]
 802a7d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a7da:	681a      	ldr	r2, [r3, #0]
 802a7dc:	78fb      	ldrb	r3, [r7, #3]
 802a7de:	f003 0303 	and.w	r3, r3, #3
 802a7e2:	68f9      	ldr	r1, [r7, #12]
 802a7e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802a7e8:	4313      	orrs	r3, r2
 802a7ea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 802a7ec:	78fb      	ldrb	r3, [r7, #3]
 802a7ee:	2b01      	cmp	r3, #1
 802a7f0:	d107      	bne.n	802a802 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 802a7f2:	68fb      	ldr	r3, [r7, #12]
 802a7f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a7f8:	461a      	mov	r2, r3
 802a7fa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 802a7fe:	6053      	str	r3, [r2, #4]
 802a800:	e009      	b.n	802a816 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 802a802:	78fb      	ldrb	r3, [r7, #3]
 802a804:	2b02      	cmp	r3, #2
 802a806:	d106      	bne.n	802a816 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 802a808:	68fb      	ldr	r3, [r7, #12]
 802a80a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a80e:	461a      	mov	r2, r3
 802a810:	f241 7370 	movw	r3, #6000	; 0x1770
 802a814:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 802a816:	2300      	movs	r3, #0
}
 802a818:	4618      	mov	r0, r3
 802a81a:	3714      	adds	r7, #20
 802a81c:	46bd      	mov	sp, r7
 802a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a822:	4770      	bx	lr

0802a824 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 802a824:	b580      	push	{r7, lr}
 802a826:	b084      	sub	sp, #16
 802a828:	af00      	add	r7, sp, #0
 802a82a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a82c:	687b      	ldr	r3, [r7, #4]
 802a82e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 802a830:	2300      	movs	r3, #0
 802a832:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802a834:	68fb      	ldr	r3, [r7, #12]
 802a836:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802a83a:	681b      	ldr	r3, [r3, #0]
 802a83c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802a83e:	68bb      	ldr	r3, [r7, #8]
 802a840:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802a844:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 802a846:	68bb      	ldr	r3, [r7, #8]
 802a848:	68fa      	ldr	r2, [r7, #12]
 802a84a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a84e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a852:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 802a854:	2064      	movs	r0, #100	; 0x64
 802a856:	f7f8 fdeb 	bl	8023430 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 802a85a:	68bb      	ldr	r3, [r7, #8]
 802a85c:	68fa      	ldr	r2, [r7, #12]
 802a85e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802a866:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 802a868:	200a      	movs	r0, #10
 802a86a:	f7f8 fde1 	bl	8023430 <HAL_Delay>

  return HAL_OK;
 802a86e:	2300      	movs	r3, #0
}
 802a870:	4618      	mov	r0, r3
 802a872:	3710      	adds	r7, #16
 802a874:	46bd      	mov	sp, r7
 802a876:	bd80      	pop	{r7, pc}

0802a878 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 802a878:	b480      	push	{r7}
 802a87a:	b085      	sub	sp, #20
 802a87c:	af00      	add	r7, sp, #0
 802a87e:	6078      	str	r0, [r7, #4]
 802a880:	460b      	mov	r3, r1
 802a882:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a884:	687b      	ldr	r3, [r7, #4]
 802a886:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802a888:	2300      	movs	r3, #0
 802a88a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802a88c:	68fb      	ldr	r3, [r7, #12]
 802a88e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802a892:	681b      	ldr	r3, [r3, #0]
 802a894:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802a896:	68bb      	ldr	r3, [r7, #8]
 802a898:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802a89c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 802a89e:	68bb      	ldr	r3, [r7, #8]
 802a8a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802a8a4:	2b00      	cmp	r3, #0
 802a8a6:	d109      	bne.n	802a8bc <USB_DriveVbus+0x44>
 802a8a8:	78fb      	ldrb	r3, [r7, #3]
 802a8aa:	2b01      	cmp	r3, #1
 802a8ac:	d106      	bne.n	802a8bc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 802a8ae:	68bb      	ldr	r3, [r7, #8]
 802a8b0:	68fa      	ldr	r2, [r7, #12]
 802a8b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a8b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802a8ba:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 802a8bc:	68bb      	ldr	r3, [r7, #8]
 802a8be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802a8c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a8c6:	d109      	bne.n	802a8dc <USB_DriveVbus+0x64>
 802a8c8:	78fb      	ldrb	r3, [r7, #3]
 802a8ca:	2b00      	cmp	r3, #0
 802a8cc:	d106      	bne.n	802a8dc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 802a8ce:	68bb      	ldr	r3, [r7, #8]
 802a8d0:	68fa      	ldr	r2, [r7, #12]
 802a8d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a8d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a8da:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 802a8dc:	2300      	movs	r3, #0
}
 802a8de:	4618      	mov	r0, r3
 802a8e0:	3714      	adds	r7, #20
 802a8e2:	46bd      	mov	sp, r7
 802a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8e8:	4770      	bx	lr

0802a8ea <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802a8ea:	b480      	push	{r7}
 802a8ec:	b085      	sub	sp, #20
 802a8ee:	af00      	add	r7, sp, #0
 802a8f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a8f2:	687b      	ldr	r3, [r7, #4]
 802a8f4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802a8f6:	2300      	movs	r3, #0
 802a8f8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802a8fa:	68fb      	ldr	r3, [r7, #12]
 802a8fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802a900:	681b      	ldr	r3, [r3, #0]
 802a902:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 802a904:	68bb      	ldr	r3, [r7, #8]
 802a906:	0c5b      	lsrs	r3, r3, #17
 802a908:	f003 0303 	and.w	r3, r3, #3
}
 802a90c:	4618      	mov	r0, r3
 802a90e:	3714      	adds	r7, #20
 802a910:	46bd      	mov	sp, r7
 802a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a916:	4770      	bx	lr

0802a918 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 802a918:	b480      	push	{r7}
 802a91a:	b085      	sub	sp, #20
 802a91c:	af00      	add	r7, sp, #0
 802a91e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a920:	687b      	ldr	r3, [r7, #4]
 802a922:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 802a924:	68fb      	ldr	r3, [r7, #12]
 802a926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a92a:	689b      	ldr	r3, [r3, #8]
 802a92c:	b29b      	uxth	r3, r3
}
 802a92e:	4618      	mov	r0, r3
 802a930:	3714      	adds	r7, #20
 802a932:	46bd      	mov	sp, r7
 802a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a938:	4770      	bx	lr
	...

0802a93c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 802a93c:	b580      	push	{r7, lr}
 802a93e:	b088      	sub	sp, #32
 802a940:	af00      	add	r7, sp, #0
 802a942:	6078      	str	r0, [r7, #4]
 802a944:	4608      	mov	r0, r1
 802a946:	4611      	mov	r1, r2
 802a948:	461a      	mov	r2, r3
 802a94a:	4603      	mov	r3, r0
 802a94c:	70fb      	strb	r3, [r7, #3]
 802a94e:	460b      	mov	r3, r1
 802a950:	70bb      	strb	r3, [r7, #2]
 802a952:	4613      	mov	r3, r2
 802a954:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 802a956:	2300      	movs	r3, #0
 802a958:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a95a:	687b      	ldr	r3, [r7, #4]
 802a95c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 802a95e:	78fb      	ldrb	r3, [r7, #3]
 802a960:	015a      	lsls	r2, r3, #5
 802a962:	693b      	ldr	r3, [r7, #16]
 802a964:	4413      	add	r3, r2
 802a966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a96a:	461a      	mov	r2, r3
 802a96c:	f04f 33ff 	mov.w	r3, #4294967295
 802a970:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 802a972:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802a976:	2b03      	cmp	r3, #3
 802a978:	d87e      	bhi.n	802aa78 <USB_HC_Init+0x13c>
 802a97a:	a201      	add	r2, pc, #4	; (adr r2, 802a980 <USB_HC_Init+0x44>)
 802a97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a980:	0802a991 	.word	0x0802a991
 802a984:	0802aa3b 	.word	0x0802aa3b
 802a988:	0802a991 	.word	0x0802a991
 802a98c:	0802a9fd 	.word	0x0802a9fd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802a990:	78fb      	ldrb	r3, [r7, #3]
 802a992:	015a      	lsls	r2, r3, #5
 802a994:	693b      	ldr	r3, [r7, #16]
 802a996:	4413      	add	r3, r2
 802a998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a99c:	461a      	mov	r2, r3
 802a99e:	f240 439d 	movw	r3, #1181	; 0x49d
 802a9a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 802a9a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a9a8:	2b00      	cmp	r3, #0
 802a9aa:	da10      	bge.n	802a9ce <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802a9ac:	78fb      	ldrb	r3, [r7, #3]
 802a9ae:	015a      	lsls	r2, r3, #5
 802a9b0:	693b      	ldr	r3, [r7, #16]
 802a9b2:	4413      	add	r3, r2
 802a9b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a9b8:	68db      	ldr	r3, [r3, #12]
 802a9ba:	78fa      	ldrb	r2, [r7, #3]
 802a9bc:	0151      	lsls	r1, r2, #5
 802a9be:	693a      	ldr	r2, [r7, #16]
 802a9c0:	440a      	add	r2, r1
 802a9c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a9c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a9ca:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 802a9cc:	e057      	b.n	802aa7e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 802a9ce:	687b      	ldr	r3, [r7, #4]
 802a9d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a9d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a9d6:	2b00      	cmp	r3, #0
 802a9d8:	d051      	beq.n	802aa7e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 802a9da:	78fb      	ldrb	r3, [r7, #3]
 802a9dc:	015a      	lsls	r2, r3, #5
 802a9de:	693b      	ldr	r3, [r7, #16]
 802a9e0:	4413      	add	r3, r2
 802a9e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a9e6:	68db      	ldr	r3, [r3, #12]
 802a9e8:	78fa      	ldrb	r2, [r7, #3]
 802a9ea:	0151      	lsls	r1, r2, #5
 802a9ec:	693a      	ldr	r2, [r7, #16]
 802a9ee:	440a      	add	r2, r1
 802a9f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a9f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802a9f8:	60d3      	str	r3, [r2, #12]
      break;
 802a9fa:	e040      	b.n	802aa7e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802a9fc:	78fb      	ldrb	r3, [r7, #3]
 802a9fe:	015a      	lsls	r2, r3, #5
 802aa00:	693b      	ldr	r3, [r7, #16]
 802aa02:	4413      	add	r3, r2
 802aa04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aa08:	461a      	mov	r2, r3
 802aa0a:	f240 639d 	movw	r3, #1693	; 0x69d
 802aa0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802aa10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802aa14:	2b00      	cmp	r3, #0
 802aa16:	da34      	bge.n	802aa82 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802aa18:	78fb      	ldrb	r3, [r7, #3]
 802aa1a:	015a      	lsls	r2, r3, #5
 802aa1c:	693b      	ldr	r3, [r7, #16]
 802aa1e:	4413      	add	r3, r2
 802aa20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aa24:	68db      	ldr	r3, [r3, #12]
 802aa26:	78fa      	ldrb	r2, [r7, #3]
 802aa28:	0151      	lsls	r1, r2, #5
 802aa2a:	693a      	ldr	r2, [r7, #16]
 802aa2c:	440a      	add	r2, r1
 802aa2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802aa32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802aa36:	60d3      	str	r3, [r2, #12]
      }

      break;
 802aa38:	e023      	b.n	802aa82 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802aa3a:	78fb      	ldrb	r3, [r7, #3]
 802aa3c:	015a      	lsls	r2, r3, #5
 802aa3e:	693b      	ldr	r3, [r7, #16]
 802aa40:	4413      	add	r3, r2
 802aa42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aa46:	461a      	mov	r2, r3
 802aa48:	f240 2325 	movw	r3, #549	; 0x225
 802aa4c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802aa4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802aa52:	2b00      	cmp	r3, #0
 802aa54:	da17      	bge.n	802aa86 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 802aa56:	78fb      	ldrb	r3, [r7, #3]
 802aa58:	015a      	lsls	r2, r3, #5
 802aa5a:	693b      	ldr	r3, [r7, #16]
 802aa5c:	4413      	add	r3, r2
 802aa5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aa62:	68db      	ldr	r3, [r3, #12]
 802aa64:	78fa      	ldrb	r2, [r7, #3]
 802aa66:	0151      	lsls	r1, r2, #5
 802aa68:	693a      	ldr	r2, [r7, #16]
 802aa6a:	440a      	add	r2, r1
 802aa6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802aa70:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 802aa74:	60d3      	str	r3, [r2, #12]
      }
      break;
 802aa76:	e006      	b.n	802aa86 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 802aa78:	2301      	movs	r3, #1
 802aa7a:	77fb      	strb	r3, [r7, #31]
      break;
 802aa7c:	e004      	b.n	802aa88 <USB_HC_Init+0x14c>
      break;
 802aa7e:	bf00      	nop
 802aa80:	e002      	b.n	802aa88 <USB_HC_Init+0x14c>
      break;
 802aa82:	bf00      	nop
 802aa84:	e000      	b.n	802aa88 <USB_HC_Init+0x14c>
      break;
 802aa86:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 802aa88:	78fb      	ldrb	r3, [r7, #3]
 802aa8a:	015a      	lsls	r2, r3, #5
 802aa8c:	693b      	ldr	r3, [r7, #16]
 802aa8e:	4413      	add	r3, r2
 802aa90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aa94:	68db      	ldr	r3, [r3, #12]
 802aa96:	78fa      	ldrb	r2, [r7, #3]
 802aa98:	0151      	lsls	r1, r2, #5
 802aa9a:	693a      	ldr	r2, [r7, #16]
 802aa9c:	440a      	add	r2, r1
 802aa9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802aaa2:	f043 0302 	orr.w	r3, r3, #2
 802aaa6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 802aaa8:	693b      	ldr	r3, [r7, #16]
 802aaaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802aaae:	699a      	ldr	r2, [r3, #24]
 802aab0:	78fb      	ldrb	r3, [r7, #3]
 802aab2:	f003 030f 	and.w	r3, r3, #15
 802aab6:	2101      	movs	r1, #1
 802aab8:	fa01 f303 	lsl.w	r3, r1, r3
 802aabc:	6939      	ldr	r1, [r7, #16]
 802aabe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802aac2:	4313      	orrs	r3, r2
 802aac4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 802aac6:	687b      	ldr	r3, [r7, #4]
 802aac8:	699b      	ldr	r3, [r3, #24]
 802aaca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 802aace:	687b      	ldr	r3, [r7, #4]
 802aad0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 802aad2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802aad6:	2b00      	cmp	r3, #0
 802aad8:	da03      	bge.n	802aae2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 802aada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802aade:	61bb      	str	r3, [r7, #24]
 802aae0:	e001      	b.n	802aae6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 802aae2:	2300      	movs	r3, #0
 802aae4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 802aae6:	6878      	ldr	r0, [r7, #4]
 802aae8:	f7ff feff 	bl	802a8ea <USB_GetHostSpeed>
 802aaec:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 802aaee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802aaf2:	2b02      	cmp	r3, #2
 802aaf4:	d106      	bne.n	802ab04 <USB_HC_Init+0x1c8>
 802aaf6:	68fb      	ldr	r3, [r7, #12]
 802aaf8:	2b02      	cmp	r3, #2
 802aafa:	d003      	beq.n	802ab04 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 802aafc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802ab00:	617b      	str	r3, [r7, #20]
 802ab02:	e001      	b.n	802ab08 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 802ab04:	2300      	movs	r3, #0
 802ab06:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802ab08:	787b      	ldrb	r3, [r7, #1]
 802ab0a:	059b      	lsls	r3, r3, #22
 802ab0c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802ab10:	78bb      	ldrb	r3, [r7, #2]
 802ab12:	02db      	lsls	r3, r3, #11
 802ab14:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802ab18:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802ab1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802ab1e:	049b      	lsls	r3, r3, #18
 802ab20:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802ab24:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802ab26:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802ab28:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802ab2c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802ab2e:	69bb      	ldr	r3, [r7, #24]
 802ab30:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802ab32:	78fb      	ldrb	r3, [r7, #3]
 802ab34:	0159      	lsls	r1, r3, #5
 802ab36:	693b      	ldr	r3, [r7, #16]
 802ab38:	440b      	add	r3, r1
 802ab3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ab3e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802ab40:	697b      	ldr	r3, [r7, #20]
 802ab42:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802ab44:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 802ab46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802ab4a:	2b03      	cmp	r3, #3
 802ab4c:	d003      	beq.n	802ab56 <USB_HC_Init+0x21a>
 802ab4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802ab52:	2b01      	cmp	r3, #1
 802ab54:	d10f      	bne.n	802ab76 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 802ab56:	78fb      	ldrb	r3, [r7, #3]
 802ab58:	015a      	lsls	r2, r3, #5
 802ab5a:	693b      	ldr	r3, [r7, #16]
 802ab5c:	4413      	add	r3, r2
 802ab5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ab62:	681b      	ldr	r3, [r3, #0]
 802ab64:	78fa      	ldrb	r2, [r7, #3]
 802ab66:	0151      	lsls	r1, r2, #5
 802ab68:	693a      	ldr	r2, [r7, #16]
 802ab6a:	440a      	add	r2, r1
 802ab6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802ab70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802ab74:	6013      	str	r3, [r2, #0]
  }

  return ret;
 802ab76:	7ffb      	ldrb	r3, [r7, #31]
}
 802ab78:	4618      	mov	r0, r3
 802ab7a:	3720      	adds	r7, #32
 802ab7c:	46bd      	mov	sp, r7
 802ab7e:	bd80      	pop	{r7, pc}

0802ab80 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 802ab80:	b580      	push	{r7, lr}
 802ab82:	b08c      	sub	sp, #48	; 0x30
 802ab84:	af02      	add	r7, sp, #8
 802ab86:	60f8      	str	r0, [r7, #12]
 802ab88:	60b9      	str	r1, [r7, #8]
 802ab8a:	4613      	mov	r3, r2
 802ab8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ab8e:	68fb      	ldr	r3, [r7, #12]
 802ab90:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 802ab92:	68bb      	ldr	r3, [r7, #8]
 802ab94:	785b      	ldrb	r3, [r3, #1]
 802ab96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 802ab98:	f44f 7380 	mov.w	r3, #256	; 0x100
 802ab9c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 802ab9e:	68fb      	ldr	r3, [r7, #12]
 802aba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802aba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802aba6:	2b00      	cmp	r3, #0
 802aba8:	d02d      	beq.n	802ac06 <USB_HC_StartXfer+0x86>
 802abaa:	68bb      	ldr	r3, [r7, #8]
 802abac:	791b      	ldrb	r3, [r3, #4]
 802abae:	2b00      	cmp	r3, #0
 802abb0:	d129      	bne.n	802ac06 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 802abb2:	79fb      	ldrb	r3, [r7, #7]
 802abb4:	2b01      	cmp	r3, #1
 802abb6:	d117      	bne.n	802abe8 <USB_HC_StartXfer+0x68>
 802abb8:	68bb      	ldr	r3, [r7, #8]
 802abba:	79db      	ldrb	r3, [r3, #7]
 802abbc:	2b00      	cmp	r3, #0
 802abbe:	d003      	beq.n	802abc8 <USB_HC_StartXfer+0x48>
 802abc0:	68bb      	ldr	r3, [r7, #8]
 802abc2:	79db      	ldrb	r3, [r3, #7]
 802abc4:	2b02      	cmp	r3, #2
 802abc6:	d10f      	bne.n	802abe8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 802abc8:	69fb      	ldr	r3, [r7, #28]
 802abca:	015a      	lsls	r2, r3, #5
 802abcc:	6a3b      	ldr	r3, [r7, #32]
 802abce:	4413      	add	r3, r2
 802abd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802abd4:	68db      	ldr	r3, [r3, #12]
 802abd6:	69fa      	ldr	r2, [r7, #28]
 802abd8:	0151      	lsls	r1, r2, #5
 802abda:	6a3a      	ldr	r2, [r7, #32]
 802abdc:	440a      	add	r2, r1
 802abde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802abe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802abe6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 802abe8:	79fb      	ldrb	r3, [r7, #7]
 802abea:	2b00      	cmp	r3, #0
 802abec:	d10b      	bne.n	802ac06 <USB_HC_StartXfer+0x86>
 802abee:	68bb      	ldr	r3, [r7, #8]
 802abf0:	795b      	ldrb	r3, [r3, #5]
 802abf2:	2b01      	cmp	r3, #1
 802abf4:	d107      	bne.n	802ac06 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 802abf6:	68bb      	ldr	r3, [r7, #8]
 802abf8:	785b      	ldrb	r3, [r3, #1]
 802abfa:	4619      	mov	r1, r3
 802abfc:	68f8      	ldr	r0, [r7, #12]
 802abfe:	f000 fa0f 	bl	802b020 <USB_DoPing>
      return HAL_OK;
 802ac02:	2300      	movs	r3, #0
 802ac04:	e0f8      	b.n	802adf8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 802ac06:	68bb      	ldr	r3, [r7, #8]
 802ac08:	695b      	ldr	r3, [r3, #20]
 802ac0a:	2b00      	cmp	r3, #0
 802ac0c:	d018      	beq.n	802ac40 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 802ac0e:	68bb      	ldr	r3, [r7, #8]
 802ac10:	695b      	ldr	r3, [r3, #20]
 802ac12:	68ba      	ldr	r2, [r7, #8]
 802ac14:	8912      	ldrh	r2, [r2, #8]
 802ac16:	4413      	add	r3, r2
 802ac18:	3b01      	subs	r3, #1
 802ac1a:	68ba      	ldr	r2, [r7, #8]
 802ac1c:	8912      	ldrh	r2, [r2, #8]
 802ac1e:	fbb3 f3f2 	udiv	r3, r3, r2
 802ac22:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 802ac24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802ac26:	8b7b      	ldrh	r3, [r7, #26]
 802ac28:	429a      	cmp	r2, r3
 802ac2a:	d90b      	bls.n	802ac44 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 802ac2c:	8b7b      	ldrh	r3, [r7, #26]
 802ac2e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802ac30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802ac32:	68ba      	ldr	r2, [r7, #8]
 802ac34:	8912      	ldrh	r2, [r2, #8]
 802ac36:	fb03 f202 	mul.w	r2, r3, r2
 802ac3a:	68bb      	ldr	r3, [r7, #8]
 802ac3c:	611a      	str	r2, [r3, #16]
 802ac3e:	e001      	b.n	802ac44 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 802ac40:	2301      	movs	r3, #1
 802ac42:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 802ac44:	68bb      	ldr	r3, [r7, #8]
 802ac46:	78db      	ldrb	r3, [r3, #3]
 802ac48:	2b00      	cmp	r3, #0
 802ac4a:	d007      	beq.n	802ac5c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802ac4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802ac4e:	68ba      	ldr	r2, [r7, #8]
 802ac50:	8912      	ldrh	r2, [r2, #8]
 802ac52:	fb03 f202 	mul.w	r2, r3, r2
 802ac56:	68bb      	ldr	r3, [r7, #8]
 802ac58:	611a      	str	r2, [r3, #16]
 802ac5a:	e003      	b.n	802ac64 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 802ac5c:	68bb      	ldr	r3, [r7, #8]
 802ac5e:	695a      	ldr	r2, [r3, #20]
 802ac60:	68bb      	ldr	r3, [r7, #8]
 802ac62:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802ac64:	68bb      	ldr	r3, [r7, #8]
 802ac66:	691b      	ldr	r3, [r3, #16]
 802ac68:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802ac6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802ac6e:	04d9      	lsls	r1, r3, #19
 802ac70:	4b63      	ldr	r3, [pc, #396]	; (802ae00 <USB_HC_StartXfer+0x280>)
 802ac72:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802ac74:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 802ac76:	68bb      	ldr	r3, [r7, #8]
 802ac78:	7a9b      	ldrb	r3, [r3, #10]
 802ac7a:	075b      	lsls	r3, r3, #29
 802ac7c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802ac80:	69f9      	ldr	r1, [r7, #28]
 802ac82:	0148      	lsls	r0, r1, #5
 802ac84:	6a39      	ldr	r1, [r7, #32]
 802ac86:	4401      	add	r1, r0
 802ac88:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802ac8c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802ac8e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 802ac90:	79fb      	ldrb	r3, [r7, #7]
 802ac92:	2b00      	cmp	r3, #0
 802ac94:	d009      	beq.n	802acaa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 802ac96:	68bb      	ldr	r3, [r7, #8]
 802ac98:	68d9      	ldr	r1, [r3, #12]
 802ac9a:	69fb      	ldr	r3, [r7, #28]
 802ac9c:	015a      	lsls	r2, r3, #5
 802ac9e:	6a3b      	ldr	r3, [r7, #32]
 802aca0:	4413      	add	r3, r2
 802aca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aca6:	460a      	mov	r2, r1
 802aca8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 802acaa:	6a3b      	ldr	r3, [r7, #32]
 802acac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802acb0:	689b      	ldr	r3, [r3, #8]
 802acb2:	f003 0301 	and.w	r3, r3, #1
 802acb6:	2b00      	cmp	r3, #0
 802acb8:	bf0c      	ite	eq
 802acba:	2301      	moveq	r3, #1
 802acbc:	2300      	movne	r3, #0
 802acbe:	b2db      	uxtb	r3, r3
 802acc0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 802acc2:	69fb      	ldr	r3, [r7, #28]
 802acc4:	015a      	lsls	r2, r3, #5
 802acc6:	6a3b      	ldr	r3, [r7, #32]
 802acc8:	4413      	add	r3, r2
 802acca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802acce:	681b      	ldr	r3, [r3, #0]
 802acd0:	69fa      	ldr	r2, [r7, #28]
 802acd2:	0151      	lsls	r1, r2, #5
 802acd4:	6a3a      	ldr	r2, [r7, #32]
 802acd6:	440a      	add	r2, r1
 802acd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802acdc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802ace0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 802ace2:	69fb      	ldr	r3, [r7, #28]
 802ace4:	015a      	lsls	r2, r3, #5
 802ace6:	6a3b      	ldr	r3, [r7, #32]
 802ace8:	4413      	add	r3, r2
 802acea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802acee:	681a      	ldr	r2, [r3, #0]
 802acf0:	7e7b      	ldrb	r3, [r7, #25]
 802acf2:	075b      	lsls	r3, r3, #29
 802acf4:	69f9      	ldr	r1, [r7, #28]
 802acf6:	0148      	lsls	r0, r1, #5
 802acf8:	6a39      	ldr	r1, [r7, #32]
 802acfa:	4401      	add	r1, r0
 802acfc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 802ad00:	4313      	orrs	r3, r2
 802ad02:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 802ad04:	69fb      	ldr	r3, [r7, #28]
 802ad06:	015a      	lsls	r2, r3, #5
 802ad08:	6a3b      	ldr	r3, [r7, #32]
 802ad0a:	4413      	add	r3, r2
 802ad0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ad10:	681b      	ldr	r3, [r3, #0]
 802ad12:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802ad14:	693b      	ldr	r3, [r7, #16]
 802ad16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802ad1a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 802ad1c:	68bb      	ldr	r3, [r7, #8]
 802ad1e:	78db      	ldrb	r3, [r3, #3]
 802ad20:	2b00      	cmp	r3, #0
 802ad22:	d004      	beq.n	802ad2e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 802ad24:	693b      	ldr	r3, [r7, #16]
 802ad26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802ad2a:	613b      	str	r3, [r7, #16]
 802ad2c:	e003      	b.n	802ad36 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 802ad2e:	693b      	ldr	r3, [r7, #16]
 802ad30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802ad34:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802ad36:	693b      	ldr	r3, [r7, #16]
 802ad38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802ad3c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 802ad3e:	69fb      	ldr	r3, [r7, #28]
 802ad40:	015a      	lsls	r2, r3, #5
 802ad42:	6a3b      	ldr	r3, [r7, #32]
 802ad44:	4413      	add	r3, r2
 802ad46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ad4a:	461a      	mov	r2, r3
 802ad4c:	693b      	ldr	r3, [r7, #16]
 802ad4e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 802ad50:	79fb      	ldrb	r3, [r7, #7]
 802ad52:	2b00      	cmp	r3, #0
 802ad54:	d001      	beq.n	802ad5a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 802ad56:	2300      	movs	r3, #0
 802ad58:	e04e      	b.n	802adf8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 802ad5a:	68bb      	ldr	r3, [r7, #8]
 802ad5c:	78db      	ldrb	r3, [r3, #3]
 802ad5e:	2b00      	cmp	r3, #0
 802ad60:	d149      	bne.n	802adf6 <USB_HC_StartXfer+0x276>
 802ad62:	68bb      	ldr	r3, [r7, #8]
 802ad64:	695b      	ldr	r3, [r3, #20]
 802ad66:	2b00      	cmp	r3, #0
 802ad68:	d045      	beq.n	802adf6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 802ad6a:	68bb      	ldr	r3, [r7, #8]
 802ad6c:	79db      	ldrb	r3, [r3, #7]
 802ad6e:	2b03      	cmp	r3, #3
 802ad70:	d830      	bhi.n	802add4 <USB_HC_StartXfer+0x254>
 802ad72:	a201      	add	r2, pc, #4	; (adr r2, 802ad78 <USB_HC_StartXfer+0x1f8>)
 802ad74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ad78:	0802ad89 	.word	0x0802ad89
 802ad7c:	0802adad 	.word	0x0802adad
 802ad80:	0802ad89 	.word	0x0802ad89
 802ad84:	0802adad 	.word	0x0802adad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802ad88:	68bb      	ldr	r3, [r7, #8]
 802ad8a:	695b      	ldr	r3, [r3, #20]
 802ad8c:	3303      	adds	r3, #3
 802ad8e:	089b      	lsrs	r3, r3, #2
 802ad90:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 802ad92:	8afa      	ldrh	r2, [r7, #22]
 802ad94:	68fb      	ldr	r3, [r7, #12]
 802ad96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ad98:	b29b      	uxth	r3, r3
 802ad9a:	429a      	cmp	r2, r3
 802ad9c:	d91c      	bls.n	802add8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 802ad9e:	68fb      	ldr	r3, [r7, #12]
 802ada0:	699b      	ldr	r3, [r3, #24]
 802ada2:	f043 0220 	orr.w	r2, r3, #32
 802ada6:	68fb      	ldr	r3, [r7, #12]
 802ada8:	619a      	str	r2, [r3, #24]
        }
        break;
 802adaa:	e015      	b.n	802add8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802adac:	68bb      	ldr	r3, [r7, #8]
 802adae:	695b      	ldr	r3, [r3, #20]
 802adb0:	3303      	adds	r3, #3
 802adb2:	089b      	lsrs	r3, r3, #2
 802adb4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 802adb6:	8afa      	ldrh	r2, [r7, #22]
 802adb8:	6a3b      	ldr	r3, [r7, #32]
 802adba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802adbe:	691b      	ldr	r3, [r3, #16]
 802adc0:	b29b      	uxth	r3, r3
 802adc2:	429a      	cmp	r2, r3
 802adc4:	d90a      	bls.n	802addc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 802adc6:	68fb      	ldr	r3, [r7, #12]
 802adc8:	699b      	ldr	r3, [r3, #24]
 802adca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 802adce:	68fb      	ldr	r3, [r7, #12]
 802add0:	619a      	str	r2, [r3, #24]
        }
        break;
 802add2:	e003      	b.n	802addc <USB_HC_StartXfer+0x25c>

      default:
        break;
 802add4:	bf00      	nop
 802add6:	e002      	b.n	802adde <USB_HC_StartXfer+0x25e>
        break;
 802add8:	bf00      	nop
 802adda:	e000      	b.n	802adde <USB_HC_StartXfer+0x25e>
        break;
 802addc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 802adde:	68bb      	ldr	r3, [r7, #8]
 802ade0:	68d9      	ldr	r1, [r3, #12]
 802ade2:	68bb      	ldr	r3, [r7, #8]
 802ade4:	785a      	ldrb	r2, [r3, #1]
 802ade6:	68bb      	ldr	r3, [r7, #8]
 802ade8:	695b      	ldr	r3, [r3, #20]
 802adea:	b29b      	uxth	r3, r3
 802adec:	2000      	movs	r0, #0
 802adee:	9000      	str	r0, [sp, #0]
 802adf0:	68f8      	ldr	r0, [r7, #12]
 802adf2:	f7ff fb31 	bl	802a458 <USB_WritePacket>
  }

  return HAL_OK;
 802adf6:	2300      	movs	r3, #0
}
 802adf8:	4618      	mov	r0, r3
 802adfa:	3728      	adds	r7, #40	; 0x28
 802adfc:	46bd      	mov	sp, r7
 802adfe:	bd80      	pop	{r7, pc}
 802ae00:	1ff80000 	.word	0x1ff80000

0802ae04 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802ae04:	b480      	push	{r7}
 802ae06:	b085      	sub	sp, #20
 802ae08:	af00      	add	r7, sp, #0
 802ae0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ae0c:	687b      	ldr	r3, [r7, #4]
 802ae0e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 802ae10:	68fb      	ldr	r3, [r7, #12]
 802ae12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802ae16:	695b      	ldr	r3, [r3, #20]
 802ae18:	b29b      	uxth	r3, r3
}
 802ae1a:	4618      	mov	r0, r3
 802ae1c:	3714      	adds	r7, #20
 802ae1e:	46bd      	mov	sp, r7
 802ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae24:	4770      	bx	lr

0802ae26 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 802ae26:	b480      	push	{r7}
 802ae28:	b089      	sub	sp, #36	; 0x24
 802ae2a:	af00      	add	r7, sp, #0
 802ae2c:	6078      	str	r0, [r7, #4]
 802ae2e:	460b      	mov	r3, r1
 802ae30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ae32:	687b      	ldr	r3, [r7, #4]
 802ae34:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 802ae36:	78fb      	ldrb	r3, [r7, #3]
 802ae38:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 802ae3a:	2300      	movs	r3, #0
 802ae3c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 802ae3e:	69bb      	ldr	r3, [r7, #24]
 802ae40:	015a      	lsls	r2, r3, #5
 802ae42:	69fb      	ldr	r3, [r7, #28]
 802ae44:	4413      	add	r3, r2
 802ae46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ae4a:	681b      	ldr	r3, [r3, #0]
 802ae4c:	0c9b      	lsrs	r3, r3, #18
 802ae4e:	f003 0303 	and.w	r3, r3, #3
 802ae52:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 802ae54:	69bb      	ldr	r3, [r7, #24]
 802ae56:	015a      	lsls	r2, r3, #5
 802ae58:	69fb      	ldr	r3, [r7, #28]
 802ae5a:	4413      	add	r3, r2
 802ae5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ae60:	681b      	ldr	r3, [r3, #0]
 802ae62:	0fdb      	lsrs	r3, r3, #31
 802ae64:	f003 0301 	and.w	r3, r3, #1
 802ae68:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 802ae6a:	687b      	ldr	r3, [r7, #4]
 802ae6c:	689b      	ldr	r3, [r3, #8]
 802ae6e:	f003 0320 	and.w	r3, r3, #32
 802ae72:	2b20      	cmp	r3, #32
 802ae74:	d104      	bne.n	802ae80 <USB_HC_Halt+0x5a>
 802ae76:	693b      	ldr	r3, [r7, #16]
 802ae78:	2b00      	cmp	r3, #0
 802ae7a:	d101      	bne.n	802ae80 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 802ae7c:	2300      	movs	r3, #0
 802ae7e:	e0c8      	b.n	802b012 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 802ae80:	697b      	ldr	r3, [r7, #20]
 802ae82:	2b00      	cmp	r3, #0
 802ae84:	d002      	beq.n	802ae8c <USB_HC_Halt+0x66>
 802ae86:	697b      	ldr	r3, [r7, #20]
 802ae88:	2b02      	cmp	r3, #2
 802ae8a:	d163      	bne.n	802af54 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802ae8c:	69bb      	ldr	r3, [r7, #24]
 802ae8e:	015a      	lsls	r2, r3, #5
 802ae90:	69fb      	ldr	r3, [r7, #28]
 802ae92:	4413      	add	r3, r2
 802ae94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ae98:	681b      	ldr	r3, [r3, #0]
 802ae9a:	69ba      	ldr	r2, [r7, #24]
 802ae9c:	0151      	lsls	r1, r2, #5
 802ae9e:	69fa      	ldr	r2, [r7, #28]
 802aea0:	440a      	add	r2, r1
 802aea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802aea6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802aeaa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802aeac:	687b      	ldr	r3, [r7, #4]
 802aeae:	689b      	ldr	r3, [r3, #8]
 802aeb0:	f003 0320 	and.w	r3, r3, #32
 802aeb4:	2b00      	cmp	r3, #0
 802aeb6:	f040 80ab 	bne.w	802b010 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 802aeba:	687b      	ldr	r3, [r7, #4]
 802aebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802aebe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802aec2:	2b00      	cmp	r3, #0
 802aec4:	d133      	bne.n	802af2e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802aec6:	69bb      	ldr	r3, [r7, #24]
 802aec8:	015a      	lsls	r2, r3, #5
 802aeca:	69fb      	ldr	r3, [r7, #28]
 802aecc:	4413      	add	r3, r2
 802aece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aed2:	681b      	ldr	r3, [r3, #0]
 802aed4:	69ba      	ldr	r2, [r7, #24]
 802aed6:	0151      	lsls	r1, r2, #5
 802aed8:	69fa      	ldr	r2, [r7, #28]
 802aeda:	440a      	add	r2, r1
 802aedc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802aee0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802aee4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802aee6:	69bb      	ldr	r3, [r7, #24]
 802aee8:	015a      	lsls	r2, r3, #5
 802aeea:	69fb      	ldr	r3, [r7, #28]
 802aeec:	4413      	add	r3, r2
 802aeee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aef2:	681b      	ldr	r3, [r3, #0]
 802aef4:	69ba      	ldr	r2, [r7, #24]
 802aef6:	0151      	lsls	r1, r2, #5
 802aef8:	69fa      	ldr	r2, [r7, #28]
 802aefa:	440a      	add	r2, r1
 802aefc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802af00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802af04:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 802af06:	68fb      	ldr	r3, [r7, #12]
 802af08:	3301      	adds	r3, #1
 802af0a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 802af0c:	68fb      	ldr	r3, [r7, #12]
 802af0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802af12:	d81d      	bhi.n	802af50 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802af14:	69bb      	ldr	r3, [r7, #24]
 802af16:	015a      	lsls	r2, r3, #5
 802af18:	69fb      	ldr	r3, [r7, #28]
 802af1a:	4413      	add	r3, r2
 802af1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802af20:	681b      	ldr	r3, [r3, #0]
 802af22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802af26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802af2a:	d0ec      	beq.n	802af06 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802af2c:	e070      	b.n	802b010 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802af2e:	69bb      	ldr	r3, [r7, #24]
 802af30:	015a      	lsls	r2, r3, #5
 802af32:	69fb      	ldr	r3, [r7, #28]
 802af34:	4413      	add	r3, r2
 802af36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802af3a:	681b      	ldr	r3, [r3, #0]
 802af3c:	69ba      	ldr	r2, [r7, #24]
 802af3e:	0151      	lsls	r1, r2, #5
 802af40:	69fa      	ldr	r2, [r7, #28]
 802af42:	440a      	add	r2, r1
 802af44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802af48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802af4c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802af4e:	e05f      	b.n	802b010 <USB_HC_Halt+0x1ea>
            break;
 802af50:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802af52:	e05d      	b.n	802b010 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802af54:	69bb      	ldr	r3, [r7, #24]
 802af56:	015a      	lsls	r2, r3, #5
 802af58:	69fb      	ldr	r3, [r7, #28]
 802af5a:	4413      	add	r3, r2
 802af5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802af60:	681b      	ldr	r3, [r3, #0]
 802af62:	69ba      	ldr	r2, [r7, #24]
 802af64:	0151      	lsls	r1, r2, #5
 802af66:	69fa      	ldr	r2, [r7, #28]
 802af68:	440a      	add	r2, r1
 802af6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802af6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802af72:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 802af74:	69fb      	ldr	r3, [r7, #28]
 802af76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802af7a:	691b      	ldr	r3, [r3, #16]
 802af7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802af80:	2b00      	cmp	r3, #0
 802af82:	d133      	bne.n	802afec <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802af84:	69bb      	ldr	r3, [r7, #24]
 802af86:	015a      	lsls	r2, r3, #5
 802af88:	69fb      	ldr	r3, [r7, #28]
 802af8a:	4413      	add	r3, r2
 802af8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802af90:	681b      	ldr	r3, [r3, #0]
 802af92:	69ba      	ldr	r2, [r7, #24]
 802af94:	0151      	lsls	r1, r2, #5
 802af96:	69fa      	ldr	r2, [r7, #28]
 802af98:	440a      	add	r2, r1
 802af9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802af9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802afa2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802afa4:	69bb      	ldr	r3, [r7, #24]
 802afa6:	015a      	lsls	r2, r3, #5
 802afa8:	69fb      	ldr	r3, [r7, #28]
 802afaa:	4413      	add	r3, r2
 802afac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802afb0:	681b      	ldr	r3, [r3, #0]
 802afb2:	69ba      	ldr	r2, [r7, #24]
 802afb4:	0151      	lsls	r1, r2, #5
 802afb6:	69fa      	ldr	r2, [r7, #28]
 802afb8:	440a      	add	r2, r1
 802afba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802afbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802afc2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 802afc4:	68fb      	ldr	r3, [r7, #12]
 802afc6:	3301      	adds	r3, #1
 802afc8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 802afca:	68fb      	ldr	r3, [r7, #12]
 802afcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802afd0:	d81d      	bhi.n	802b00e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802afd2:	69bb      	ldr	r3, [r7, #24]
 802afd4:	015a      	lsls	r2, r3, #5
 802afd6:	69fb      	ldr	r3, [r7, #28]
 802afd8:	4413      	add	r3, r2
 802afda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802afde:	681b      	ldr	r3, [r3, #0]
 802afe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802afe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802afe8:	d0ec      	beq.n	802afc4 <USB_HC_Halt+0x19e>
 802afea:	e011      	b.n	802b010 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802afec:	69bb      	ldr	r3, [r7, #24]
 802afee:	015a      	lsls	r2, r3, #5
 802aff0:	69fb      	ldr	r3, [r7, #28]
 802aff2:	4413      	add	r3, r2
 802aff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aff8:	681b      	ldr	r3, [r3, #0]
 802affa:	69ba      	ldr	r2, [r7, #24]
 802affc:	0151      	lsls	r1, r2, #5
 802affe:	69fa      	ldr	r2, [r7, #28]
 802b000:	440a      	add	r2, r1
 802b002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b00a:	6013      	str	r3, [r2, #0]
 802b00c:	e000      	b.n	802b010 <USB_HC_Halt+0x1ea>
          break;
 802b00e:	bf00      	nop
    }
  }

  return HAL_OK;
 802b010:	2300      	movs	r3, #0
}
 802b012:	4618      	mov	r0, r3
 802b014:	3724      	adds	r7, #36	; 0x24
 802b016:	46bd      	mov	sp, r7
 802b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b01c:	4770      	bx	lr
	...

0802b020 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 802b020:	b480      	push	{r7}
 802b022:	b087      	sub	sp, #28
 802b024:	af00      	add	r7, sp, #0
 802b026:	6078      	str	r0, [r7, #4]
 802b028:	460b      	mov	r3, r1
 802b02a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b02c:	687b      	ldr	r3, [r7, #4]
 802b02e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 802b030:	78fb      	ldrb	r3, [r7, #3]
 802b032:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 802b034:	2301      	movs	r3, #1
 802b036:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802b038:	68fb      	ldr	r3, [r7, #12]
 802b03a:	04da      	lsls	r2, r3, #19
 802b03c:	4b15      	ldr	r3, [pc, #84]	; (802b094 <USB_DoPing+0x74>)
 802b03e:	4013      	ands	r3, r2
 802b040:	693a      	ldr	r2, [r7, #16]
 802b042:	0151      	lsls	r1, r2, #5
 802b044:	697a      	ldr	r2, [r7, #20]
 802b046:	440a      	add	r2, r1
 802b048:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b04c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b050:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 802b052:	693b      	ldr	r3, [r7, #16]
 802b054:	015a      	lsls	r2, r3, #5
 802b056:	697b      	ldr	r3, [r7, #20]
 802b058:	4413      	add	r3, r2
 802b05a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b05e:	681b      	ldr	r3, [r3, #0]
 802b060:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802b062:	68bb      	ldr	r3, [r7, #8]
 802b064:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802b068:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802b06a:	68bb      	ldr	r3, [r7, #8]
 802b06c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b070:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 802b072:	693b      	ldr	r3, [r7, #16]
 802b074:	015a      	lsls	r2, r3, #5
 802b076:	697b      	ldr	r3, [r7, #20]
 802b078:	4413      	add	r3, r2
 802b07a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b07e:	461a      	mov	r2, r3
 802b080:	68bb      	ldr	r3, [r7, #8]
 802b082:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 802b084:	2300      	movs	r3, #0
}
 802b086:	4618      	mov	r0, r3
 802b088:	371c      	adds	r7, #28
 802b08a:	46bd      	mov	sp, r7
 802b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b090:	4770      	bx	lr
 802b092:	bf00      	nop
 802b094:	1ff80000 	.word	0x1ff80000

0802b098 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 802b098:	b580      	push	{r7, lr}
 802b09a:	b088      	sub	sp, #32
 802b09c:	af00      	add	r7, sp, #0
 802b09e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 802b0a0:	2300      	movs	r3, #0
 802b0a2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b0a4:	687b      	ldr	r3, [r7, #4]
 802b0a6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 802b0a8:	2300      	movs	r3, #0
 802b0aa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 802b0ac:	6878      	ldr	r0, [r7, #4]
 802b0ae:	f7ff f911 	bl	802a2d4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802b0b2:	2110      	movs	r1, #16
 802b0b4:	6878      	ldr	r0, [r7, #4]
 802b0b6:	f7ff f96b 	bl	802a390 <USB_FlushTxFifo>
 802b0ba:	4603      	mov	r3, r0
 802b0bc:	2b00      	cmp	r3, #0
 802b0be:	d001      	beq.n	802b0c4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 802b0c0:	2301      	movs	r3, #1
 802b0c2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802b0c4:	6878      	ldr	r0, [r7, #4]
 802b0c6:	f7ff f997 	bl	802a3f8 <USB_FlushRxFifo>
 802b0ca:	4603      	mov	r3, r0
 802b0cc:	2b00      	cmp	r3, #0
 802b0ce:	d001      	beq.n	802b0d4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 802b0d0:	2301      	movs	r3, #1
 802b0d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 802b0d4:	2300      	movs	r3, #0
 802b0d6:	61bb      	str	r3, [r7, #24]
 802b0d8:	e01f      	b.n	802b11a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 802b0da:	69bb      	ldr	r3, [r7, #24]
 802b0dc:	015a      	lsls	r2, r3, #5
 802b0de:	697b      	ldr	r3, [r7, #20]
 802b0e0:	4413      	add	r3, r2
 802b0e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b0e6:	681b      	ldr	r3, [r3, #0]
 802b0e8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 802b0ea:	693b      	ldr	r3, [r7, #16]
 802b0ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b0f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 802b0f2:	693b      	ldr	r3, [r7, #16]
 802b0f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b0f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802b0fa:	693b      	ldr	r3, [r7, #16]
 802b0fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802b100:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802b102:	69bb      	ldr	r3, [r7, #24]
 802b104:	015a      	lsls	r2, r3, #5
 802b106:	697b      	ldr	r3, [r7, #20]
 802b108:	4413      	add	r3, r2
 802b10a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b10e:	461a      	mov	r2, r3
 802b110:	693b      	ldr	r3, [r7, #16]
 802b112:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 802b114:	69bb      	ldr	r3, [r7, #24]
 802b116:	3301      	adds	r3, #1
 802b118:	61bb      	str	r3, [r7, #24]
 802b11a:	69bb      	ldr	r3, [r7, #24]
 802b11c:	2b0f      	cmp	r3, #15
 802b11e:	d9dc      	bls.n	802b0da <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 802b120:	2300      	movs	r3, #0
 802b122:	61bb      	str	r3, [r7, #24]
 802b124:	e034      	b.n	802b190 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 802b126:	69bb      	ldr	r3, [r7, #24]
 802b128:	015a      	lsls	r2, r3, #5
 802b12a:	697b      	ldr	r3, [r7, #20]
 802b12c:	4413      	add	r3, r2
 802b12e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b132:	681b      	ldr	r3, [r3, #0]
 802b134:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 802b136:	693b      	ldr	r3, [r7, #16]
 802b138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b13c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 802b13e:	693b      	ldr	r3, [r7, #16]
 802b140:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b144:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802b146:	693b      	ldr	r3, [r7, #16]
 802b148:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802b14c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802b14e:	69bb      	ldr	r3, [r7, #24]
 802b150:	015a      	lsls	r2, r3, #5
 802b152:	697b      	ldr	r3, [r7, #20]
 802b154:	4413      	add	r3, r2
 802b156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b15a:	461a      	mov	r2, r3
 802b15c:	693b      	ldr	r3, [r7, #16]
 802b15e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 802b160:	68fb      	ldr	r3, [r7, #12]
 802b162:	3301      	adds	r3, #1
 802b164:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 802b166:	68fb      	ldr	r3, [r7, #12]
 802b168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b16c:	d80c      	bhi.n	802b188 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802b16e:	69bb      	ldr	r3, [r7, #24]
 802b170:	015a      	lsls	r2, r3, #5
 802b172:	697b      	ldr	r3, [r7, #20]
 802b174:	4413      	add	r3, r2
 802b176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b17a:	681b      	ldr	r3, [r3, #0]
 802b17c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802b180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802b184:	d0ec      	beq.n	802b160 <USB_StopHost+0xc8>
 802b186:	e000      	b.n	802b18a <USB_StopHost+0xf2>
        break;
 802b188:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 802b18a:	69bb      	ldr	r3, [r7, #24]
 802b18c:	3301      	adds	r3, #1
 802b18e:	61bb      	str	r3, [r7, #24]
 802b190:	69bb      	ldr	r3, [r7, #24]
 802b192:	2b0f      	cmp	r3, #15
 802b194:	d9c7      	bls.n	802b126 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 802b196:	697b      	ldr	r3, [r7, #20]
 802b198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b19c:	461a      	mov	r2, r3
 802b19e:	f04f 33ff 	mov.w	r3, #4294967295
 802b1a2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 802b1a4:	687b      	ldr	r3, [r7, #4]
 802b1a6:	f04f 32ff 	mov.w	r2, #4294967295
 802b1aa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 802b1ac:	6878      	ldr	r0, [r7, #4]
 802b1ae:	f7ff f880 	bl	802a2b2 <USB_EnableGlobalInt>

  return ret;
 802b1b2:	7ffb      	ldrb	r3, [r7, #31]
}
 802b1b4:	4618      	mov	r0, r3
 802b1b6:	3720      	adds	r7, #32
 802b1b8:	46bd      	mov	sp, r7
 802b1ba:	bd80      	pop	{r7, pc}

0802b1bc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 802b1bc:	b590      	push	{r4, r7, lr}
 802b1be:	b089      	sub	sp, #36	; 0x24
 802b1c0:	af04      	add	r7, sp, #16
 802b1c2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 802b1c4:	2301      	movs	r3, #1
 802b1c6:	2202      	movs	r2, #2
 802b1c8:	2102      	movs	r1, #2
 802b1ca:	6878      	ldr	r0, [r7, #4]
 802b1cc:	f000 fc66 	bl	802ba9c <USBH_FindInterface>
 802b1d0:	4603      	mov	r3, r0
 802b1d2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802b1d4:	7bfb      	ldrb	r3, [r7, #15]
 802b1d6:	2bff      	cmp	r3, #255	; 0xff
 802b1d8:	d002      	beq.n	802b1e0 <USBH_CDC_InterfaceInit+0x24>
 802b1da:	7bfb      	ldrb	r3, [r7, #15]
 802b1dc:	2b01      	cmp	r3, #1
 802b1de:	d901      	bls.n	802b1e4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802b1e0:	2302      	movs	r3, #2
 802b1e2:	e13d      	b.n	802b460 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 802b1e4:	7bfb      	ldrb	r3, [r7, #15]
 802b1e6:	4619      	mov	r1, r3
 802b1e8:	6878      	ldr	r0, [r7, #4]
 802b1ea:	f000 fc3b 	bl	802ba64 <USBH_SelectInterface>
 802b1ee:	4603      	mov	r3, r0
 802b1f0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 802b1f2:	7bbb      	ldrb	r3, [r7, #14]
 802b1f4:	2b00      	cmp	r3, #0
 802b1f6:	d001      	beq.n	802b1fc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 802b1f8:	2302      	movs	r3, #2
 802b1fa:	e131      	b.n	802b460 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 802b1fc:	687b      	ldr	r3, [r7, #4]
 802b1fe:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 802b202:	2050      	movs	r0, #80	; 0x50
 802b204:	f002 fb00 	bl	802d808 <malloc>
 802b208:	4603      	mov	r3, r0
 802b20a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b20c:	687b      	ldr	r3, [r7, #4]
 802b20e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b212:	69db      	ldr	r3, [r3, #28]
 802b214:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 802b216:	68bb      	ldr	r3, [r7, #8]
 802b218:	2b00      	cmp	r3, #0
 802b21a:	d101      	bne.n	802b220 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 802b21c:	2302      	movs	r3, #2
 802b21e:	e11f      	b.n	802b460 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 802b220:	2250      	movs	r2, #80	; 0x50
 802b222:	2100      	movs	r1, #0
 802b224:	68b8      	ldr	r0, [r7, #8]
 802b226:	f002 faff 	bl	802d828 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802b22a:	7bfb      	ldrb	r3, [r7, #15]
 802b22c:	687a      	ldr	r2, [r7, #4]
 802b22e:	211a      	movs	r1, #26
 802b230:	fb01 f303 	mul.w	r3, r1, r3
 802b234:	4413      	add	r3, r2
 802b236:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802b23a:	781b      	ldrb	r3, [r3, #0]
 802b23c:	b25b      	sxtb	r3, r3
 802b23e:	2b00      	cmp	r3, #0
 802b240:	da15      	bge.n	802b26e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802b242:	7bfb      	ldrb	r3, [r7, #15]
 802b244:	687a      	ldr	r2, [r7, #4]
 802b246:	211a      	movs	r1, #26
 802b248:	fb01 f303 	mul.w	r3, r1, r3
 802b24c:	4413      	add	r3, r2
 802b24e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802b252:	781a      	ldrb	r2, [r3, #0]
 802b254:	68bb      	ldr	r3, [r7, #8]
 802b256:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802b258:	7bfb      	ldrb	r3, [r7, #15]
 802b25a:	687a      	ldr	r2, [r7, #4]
 802b25c:	211a      	movs	r1, #26
 802b25e:	fb01 f303 	mul.w	r3, r1, r3
 802b262:	4413      	add	r3, r2
 802b264:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802b268:	881a      	ldrh	r2, [r3, #0]
 802b26a:	68bb      	ldr	r3, [r7, #8]
 802b26c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 802b26e:	68bb      	ldr	r3, [r7, #8]
 802b270:	785b      	ldrb	r3, [r3, #1]
 802b272:	4619      	mov	r1, r3
 802b274:	6878      	ldr	r0, [r7, #4]
 802b276:	f001 ff2c 	bl	802d0d2 <USBH_AllocPipe>
 802b27a:	4603      	mov	r3, r0
 802b27c:	461a      	mov	r2, r3
 802b27e:	68bb      	ldr	r3, [r7, #8]
 802b280:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 802b282:	68bb      	ldr	r3, [r7, #8]
 802b284:	7819      	ldrb	r1, [r3, #0]
 802b286:	68bb      	ldr	r3, [r7, #8]
 802b288:	7858      	ldrb	r0, [r3, #1]
 802b28a:	687b      	ldr	r3, [r7, #4]
 802b28c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802b290:	687b      	ldr	r3, [r7, #4]
 802b292:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802b296:	68ba      	ldr	r2, [r7, #8]
 802b298:	8952      	ldrh	r2, [r2, #10]
 802b29a:	9202      	str	r2, [sp, #8]
 802b29c:	2203      	movs	r2, #3
 802b29e:	9201      	str	r2, [sp, #4]
 802b2a0:	9300      	str	r3, [sp, #0]
 802b2a2:	4623      	mov	r3, r4
 802b2a4:	4602      	mov	r2, r0
 802b2a6:	6878      	ldr	r0, [r7, #4]
 802b2a8:	f001 fee4 	bl	802d074 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 802b2ac:	68bb      	ldr	r3, [r7, #8]
 802b2ae:	781b      	ldrb	r3, [r3, #0]
 802b2b0:	2200      	movs	r2, #0
 802b2b2:	4619      	mov	r1, r3
 802b2b4:	6878      	ldr	r0, [r7, #4]
 802b2b6:	f002 f9f9 	bl	802d6ac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 802b2ba:	2300      	movs	r3, #0
 802b2bc:	2200      	movs	r2, #0
 802b2be:	210a      	movs	r1, #10
 802b2c0:	6878      	ldr	r0, [r7, #4]
 802b2c2:	f000 fbeb 	bl	802ba9c <USBH_FindInterface>
 802b2c6:	4603      	mov	r3, r0
 802b2c8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802b2ca:	7bfb      	ldrb	r3, [r7, #15]
 802b2cc:	2bff      	cmp	r3, #255	; 0xff
 802b2ce:	d002      	beq.n	802b2d6 <USBH_CDC_InterfaceInit+0x11a>
 802b2d0:	7bfb      	ldrb	r3, [r7, #15]
 802b2d2:	2b01      	cmp	r3, #1
 802b2d4:	d901      	bls.n	802b2da <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802b2d6:	2302      	movs	r3, #2
 802b2d8:	e0c2      	b.n	802b460 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802b2da:	7bfb      	ldrb	r3, [r7, #15]
 802b2dc:	687a      	ldr	r2, [r7, #4]
 802b2de:	211a      	movs	r1, #26
 802b2e0:	fb01 f303 	mul.w	r3, r1, r3
 802b2e4:	4413      	add	r3, r2
 802b2e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802b2ea:	781b      	ldrb	r3, [r3, #0]
 802b2ec:	b25b      	sxtb	r3, r3
 802b2ee:	2b00      	cmp	r3, #0
 802b2f0:	da16      	bge.n	802b320 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802b2f2:	7bfb      	ldrb	r3, [r7, #15]
 802b2f4:	687a      	ldr	r2, [r7, #4]
 802b2f6:	211a      	movs	r1, #26
 802b2f8:	fb01 f303 	mul.w	r3, r1, r3
 802b2fc:	4413      	add	r3, r2
 802b2fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802b302:	781a      	ldrb	r2, [r3, #0]
 802b304:	68bb      	ldr	r3, [r7, #8]
 802b306:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802b308:	7bfb      	ldrb	r3, [r7, #15]
 802b30a:	687a      	ldr	r2, [r7, #4]
 802b30c:	211a      	movs	r1, #26
 802b30e:	fb01 f303 	mul.w	r3, r1, r3
 802b312:	4413      	add	r3, r2
 802b314:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802b318:	881a      	ldrh	r2, [r3, #0]
 802b31a:	68bb      	ldr	r3, [r7, #8]
 802b31c:	835a      	strh	r2, [r3, #26]
 802b31e:	e015      	b.n	802b34c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802b320:	7bfb      	ldrb	r3, [r7, #15]
 802b322:	687a      	ldr	r2, [r7, #4]
 802b324:	211a      	movs	r1, #26
 802b326:	fb01 f303 	mul.w	r3, r1, r3
 802b32a:	4413      	add	r3, r2
 802b32c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802b330:	781a      	ldrb	r2, [r3, #0]
 802b332:	68bb      	ldr	r3, [r7, #8]
 802b334:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802b336:	7bfb      	ldrb	r3, [r7, #15]
 802b338:	687a      	ldr	r2, [r7, #4]
 802b33a:	211a      	movs	r1, #26
 802b33c:	fb01 f303 	mul.w	r3, r1, r3
 802b340:	4413      	add	r3, r2
 802b342:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802b346:	881a      	ldrh	r2, [r3, #0]
 802b348:	68bb      	ldr	r3, [r7, #8]
 802b34a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 802b34c:	7bfb      	ldrb	r3, [r7, #15]
 802b34e:	687a      	ldr	r2, [r7, #4]
 802b350:	211a      	movs	r1, #26
 802b352:	fb01 f303 	mul.w	r3, r1, r3
 802b356:	4413      	add	r3, r2
 802b358:	f203 3356 	addw	r3, r3, #854	; 0x356
 802b35c:	781b      	ldrb	r3, [r3, #0]
 802b35e:	b25b      	sxtb	r3, r3
 802b360:	2b00      	cmp	r3, #0
 802b362:	da16      	bge.n	802b392 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802b364:	7bfb      	ldrb	r3, [r7, #15]
 802b366:	687a      	ldr	r2, [r7, #4]
 802b368:	211a      	movs	r1, #26
 802b36a:	fb01 f303 	mul.w	r3, r1, r3
 802b36e:	4413      	add	r3, r2
 802b370:	f203 3356 	addw	r3, r3, #854	; 0x356
 802b374:	781a      	ldrb	r2, [r3, #0]
 802b376:	68bb      	ldr	r3, [r7, #8]
 802b378:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802b37a:	7bfb      	ldrb	r3, [r7, #15]
 802b37c:	687a      	ldr	r2, [r7, #4]
 802b37e:	211a      	movs	r1, #26
 802b380:	fb01 f303 	mul.w	r3, r1, r3
 802b384:	4413      	add	r3, r2
 802b386:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802b38a:	881a      	ldrh	r2, [r3, #0]
 802b38c:	68bb      	ldr	r3, [r7, #8]
 802b38e:	835a      	strh	r2, [r3, #26]
 802b390:	e015      	b.n	802b3be <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802b392:	7bfb      	ldrb	r3, [r7, #15]
 802b394:	687a      	ldr	r2, [r7, #4]
 802b396:	211a      	movs	r1, #26
 802b398:	fb01 f303 	mul.w	r3, r1, r3
 802b39c:	4413      	add	r3, r2
 802b39e:	f203 3356 	addw	r3, r3, #854	; 0x356
 802b3a2:	781a      	ldrb	r2, [r3, #0]
 802b3a4:	68bb      	ldr	r3, [r7, #8]
 802b3a6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802b3a8:	7bfb      	ldrb	r3, [r7, #15]
 802b3aa:	687a      	ldr	r2, [r7, #4]
 802b3ac:	211a      	movs	r1, #26
 802b3ae:	fb01 f303 	mul.w	r3, r1, r3
 802b3b2:	4413      	add	r3, r2
 802b3b4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802b3b8:	881a      	ldrh	r2, [r3, #0]
 802b3ba:	68bb      	ldr	r3, [r7, #8]
 802b3bc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 802b3be:	68bb      	ldr	r3, [r7, #8]
 802b3c0:	7b9b      	ldrb	r3, [r3, #14]
 802b3c2:	4619      	mov	r1, r3
 802b3c4:	6878      	ldr	r0, [r7, #4]
 802b3c6:	f001 fe84 	bl	802d0d2 <USBH_AllocPipe>
 802b3ca:	4603      	mov	r3, r0
 802b3cc:	461a      	mov	r2, r3
 802b3ce:	68bb      	ldr	r3, [r7, #8]
 802b3d0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 802b3d2:	68bb      	ldr	r3, [r7, #8]
 802b3d4:	7bdb      	ldrb	r3, [r3, #15]
 802b3d6:	4619      	mov	r1, r3
 802b3d8:	6878      	ldr	r0, [r7, #4]
 802b3da:	f001 fe7a 	bl	802d0d2 <USBH_AllocPipe>
 802b3de:	4603      	mov	r3, r0
 802b3e0:	461a      	mov	r2, r3
 802b3e2:	68bb      	ldr	r3, [r7, #8]
 802b3e4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 802b3e6:	68bb      	ldr	r3, [r7, #8]
 802b3e8:	7b59      	ldrb	r1, [r3, #13]
 802b3ea:	68bb      	ldr	r3, [r7, #8]
 802b3ec:	7b98      	ldrb	r0, [r3, #14]
 802b3ee:	687b      	ldr	r3, [r7, #4]
 802b3f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802b3f4:	687b      	ldr	r3, [r7, #4]
 802b3f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802b3fa:	68ba      	ldr	r2, [r7, #8]
 802b3fc:	8b12      	ldrh	r2, [r2, #24]
 802b3fe:	9202      	str	r2, [sp, #8]
 802b400:	2202      	movs	r2, #2
 802b402:	9201      	str	r2, [sp, #4]
 802b404:	9300      	str	r3, [sp, #0]
 802b406:	4623      	mov	r3, r4
 802b408:	4602      	mov	r2, r0
 802b40a:	6878      	ldr	r0, [r7, #4]
 802b40c:	f001 fe32 	bl	802d074 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 802b410:	68bb      	ldr	r3, [r7, #8]
 802b412:	7b19      	ldrb	r1, [r3, #12]
 802b414:	68bb      	ldr	r3, [r7, #8]
 802b416:	7bd8      	ldrb	r0, [r3, #15]
 802b418:	687b      	ldr	r3, [r7, #4]
 802b41a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802b41e:	687b      	ldr	r3, [r7, #4]
 802b420:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802b424:	68ba      	ldr	r2, [r7, #8]
 802b426:	8b52      	ldrh	r2, [r2, #26]
 802b428:	9202      	str	r2, [sp, #8]
 802b42a:	2202      	movs	r2, #2
 802b42c:	9201      	str	r2, [sp, #4]
 802b42e:	9300      	str	r3, [sp, #0]
 802b430:	4623      	mov	r3, r4
 802b432:	4602      	mov	r2, r0
 802b434:	6878      	ldr	r0, [r7, #4]
 802b436:	f001 fe1d 	bl	802d074 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 802b43a:	68bb      	ldr	r3, [r7, #8]
 802b43c:	2200      	movs	r2, #0
 802b43e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 802b442:	68bb      	ldr	r3, [r7, #8]
 802b444:	7b5b      	ldrb	r3, [r3, #13]
 802b446:	2200      	movs	r2, #0
 802b448:	4619      	mov	r1, r3
 802b44a:	6878      	ldr	r0, [r7, #4]
 802b44c:	f002 f92e 	bl	802d6ac <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 802b450:	68bb      	ldr	r3, [r7, #8]
 802b452:	7b1b      	ldrb	r3, [r3, #12]
 802b454:	2200      	movs	r2, #0
 802b456:	4619      	mov	r1, r3
 802b458:	6878      	ldr	r0, [r7, #4]
 802b45a:	f002 f927 	bl	802d6ac <USBH_LL_SetToggle>

  return USBH_OK;
 802b45e:	2300      	movs	r3, #0
}
 802b460:	4618      	mov	r0, r3
 802b462:	3714      	adds	r7, #20
 802b464:	46bd      	mov	sp, r7
 802b466:	bd90      	pop	{r4, r7, pc}

0802b468 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 802b468:	b580      	push	{r7, lr}
 802b46a:	b084      	sub	sp, #16
 802b46c:	af00      	add	r7, sp, #0
 802b46e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b470:	687b      	ldr	r3, [r7, #4]
 802b472:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b476:	69db      	ldr	r3, [r3, #28]
 802b478:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 802b47a:	68fb      	ldr	r3, [r7, #12]
 802b47c:	781b      	ldrb	r3, [r3, #0]
 802b47e:	2b00      	cmp	r3, #0
 802b480:	d00e      	beq.n	802b4a0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802b482:	68fb      	ldr	r3, [r7, #12]
 802b484:	781b      	ldrb	r3, [r3, #0]
 802b486:	4619      	mov	r1, r3
 802b488:	6878      	ldr	r0, [r7, #4]
 802b48a:	f001 fe12 	bl	802d0b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802b48e:	68fb      	ldr	r3, [r7, #12]
 802b490:	781b      	ldrb	r3, [r3, #0]
 802b492:	4619      	mov	r1, r3
 802b494:	6878      	ldr	r0, [r7, #4]
 802b496:	f001 fe3d 	bl	802d114 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 802b49a:	68fb      	ldr	r3, [r7, #12]
 802b49c:	2200      	movs	r2, #0
 802b49e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 802b4a0:	68fb      	ldr	r3, [r7, #12]
 802b4a2:	7b1b      	ldrb	r3, [r3, #12]
 802b4a4:	2b00      	cmp	r3, #0
 802b4a6:	d00e      	beq.n	802b4c6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 802b4a8:	68fb      	ldr	r3, [r7, #12]
 802b4aa:	7b1b      	ldrb	r3, [r3, #12]
 802b4ac:	4619      	mov	r1, r3
 802b4ae:	6878      	ldr	r0, [r7, #4]
 802b4b0:	f001 fdff 	bl	802d0b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 802b4b4:	68fb      	ldr	r3, [r7, #12]
 802b4b6:	7b1b      	ldrb	r3, [r3, #12]
 802b4b8:	4619      	mov	r1, r3
 802b4ba:	6878      	ldr	r0, [r7, #4]
 802b4bc:	f001 fe2a 	bl	802d114 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 802b4c0:	68fb      	ldr	r3, [r7, #12]
 802b4c2:	2200      	movs	r2, #0
 802b4c4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 802b4c6:	68fb      	ldr	r3, [r7, #12]
 802b4c8:	7b5b      	ldrb	r3, [r3, #13]
 802b4ca:	2b00      	cmp	r3, #0
 802b4cc:	d00e      	beq.n	802b4ec <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 802b4ce:	68fb      	ldr	r3, [r7, #12]
 802b4d0:	7b5b      	ldrb	r3, [r3, #13]
 802b4d2:	4619      	mov	r1, r3
 802b4d4:	6878      	ldr	r0, [r7, #4]
 802b4d6:	f001 fdec 	bl	802d0b2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 802b4da:	68fb      	ldr	r3, [r7, #12]
 802b4dc:	7b5b      	ldrb	r3, [r3, #13]
 802b4de:	4619      	mov	r1, r3
 802b4e0:	6878      	ldr	r0, [r7, #4]
 802b4e2:	f001 fe17 	bl	802d114 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 802b4e6:	68fb      	ldr	r3, [r7, #12]
 802b4e8:	2200      	movs	r2, #0
 802b4ea:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 802b4ec:	687b      	ldr	r3, [r7, #4]
 802b4ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b4f2:	69db      	ldr	r3, [r3, #28]
 802b4f4:	2b00      	cmp	r3, #0
 802b4f6:	d00b      	beq.n	802b510 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 802b4f8:	687b      	ldr	r3, [r7, #4]
 802b4fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b4fe:	69db      	ldr	r3, [r3, #28]
 802b500:	4618      	mov	r0, r3
 802b502:	f002 f989 	bl	802d818 <free>
    phost->pActiveClass->pData = 0U;
 802b506:	687b      	ldr	r3, [r7, #4]
 802b508:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b50c:	2200      	movs	r2, #0
 802b50e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 802b510:	2300      	movs	r3, #0
}
 802b512:	4618      	mov	r0, r3
 802b514:	3710      	adds	r7, #16
 802b516:	46bd      	mov	sp, r7
 802b518:	bd80      	pop	{r7, pc}

0802b51a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 802b51a:	b580      	push	{r7, lr}
 802b51c:	b084      	sub	sp, #16
 802b51e:	af00      	add	r7, sp, #0
 802b520:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b522:	687b      	ldr	r3, [r7, #4]
 802b524:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b528:	69db      	ldr	r3, [r3, #28]
 802b52a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 802b52c:	68fb      	ldr	r3, [r7, #12]
 802b52e:	3340      	adds	r3, #64	; 0x40
 802b530:	4619      	mov	r1, r3
 802b532:	6878      	ldr	r0, [r7, #4]
 802b534:	f000 f8b1 	bl	802b69a <GetLineCoding>
 802b538:	4603      	mov	r3, r0
 802b53a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 802b53c:	7afb      	ldrb	r3, [r7, #11]
 802b53e:	2b00      	cmp	r3, #0
 802b540:	d105      	bne.n	802b54e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 802b542:	687b      	ldr	r3, [r7, #4]
 802b544:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802b548:	2102      	movs	r1, #2
 802b54a:	6878      	ldr	r0, [r7, #4]
 802b54c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 802b54e:	7afb      	ldrb	r3, [r7, #11]
}
 802b550:	4618      	mov	r0, r3
 802b552:	3710      	adds	r7, #16
 802b554:	46bd      	mov	sp, r7
 802b556:	bd80      	pop	{r7, pc}

0802b558 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 802b558:	b580      	push	{r7, lr}
 802b55a:	b084      	sub	sp, #16
 802b55c:	af00      	add	r7, sp, #0
 802b55e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 802b560:	2301      	movs	r3, #1
 802b562:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 802b564:	2300      	movs	r3, #0
 802b566:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b568:	687b      	ldr	r3, [r7, #4]
 802b56a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b56e:	69db      	ldr	r3, [r3, #28]
 802b570:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 802b572:	68bb      	ldr	r3, [r7, #8]
 802b574:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802b578:	2b04      	cmp	r3, #4
 802b57a:	d877      	bhi.n	802b66c <USBH_CDC_Process+0x114>
 802b57c:	a201      	add	r2, pc, #4	; (adr r2, 802b584 <USBH_CDC_Process+0x2c>)
 802b57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b582:	bf00      	nop
 802b584:	0802b599 	.word	0x0802b599
 802b588:	0802b59f 	.word	0x0802b59f
 802b58c:	0802b5cf 	.word	0x0802b5cf
 802b590:	0802b643 	.word	0x0802b643
 802b594:	0802b651 	.word	0x0802b651
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 802b598:	2300      	movs	r3, #0
 802b59a:	73fb      	strb	r3, [r7, #15]
      break;
 802b59c:	e06d      	b.n	802b67a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 802b59e:	68bb      	ldr	r3, [r7, #8]
 802b5a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b5a2:	4619      	mov	r1, r3
 802b5a4:	6878      	ldr	r0, [r7, #4]
 802b5a6:	f000 f897 	bl	802b6d8 <SetLineCoding>
 802b5aa:	4603      	mov	r3, r0
 802b5ac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802b5ae:	7bbb      	ldrb	r3, [r7, #14]
 802b5b0:	2b00      	cmp	r3, #0
 802b5b2:	d104      	bne.n	802b5be <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 802b5b4:	68bb      	ldr	r3, [r7, #8]
 802b5b6:	2202      	movs	r2, #2
 802b5b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802b5bc:	e058      	b.n	802b670 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 802b5be:	7bbb      	ldrb	r3, [r7, #14]
 802b5c0:	2b01      	cmp	r3, #1
 802b5c2:	d055      	beq.n	802b670 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 802b5c4:	68bb      	ldr	r3, [r7, #8]
 802b5c6:	2204      	movs	r2, #4
 802b5c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802b5cc:	e050      	b.n	802b670 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 802b5ce:	68bb      	ldr	r3, [r7, #8]
 802b5d0:	3340      	adds	r3, #64	; 0x40
 802b5d2:	4619      	mov	r1, r3
 802b5d4:	6878      	ldr	r0, [r7, #4]
 802b5d6:	f000 f860 	bl	802b69a <GetLineCoding>
 802b5da:	4603      	mov	r3, r0
 802b5dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802b5de:	7bbb      	ldrb	r3, [r7, #14]
 802b5e0:	2b00      	cmp	r3, #0
 802b5e2:	d126      	bne.n	802b632 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 802b5e4:	68bb      	ldr	r3, [r7, #8]
 802b5e6:	2200      	movs	r2, #0
 802b5e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802b5ec:	68bb      	ldr	r3, [r7, #8]
 802b5ee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 802b5f2:	68bb      	ldr	r3, [r7, #8]
 802b5f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b5f6:	791b      	ldrb	r3, [r3, #4]
 802b5f8:	429a      	cmp	r2, r3
 802b5fa:	d13b      	bne.n	802b674 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802b5fc:	68bb      	ldr	r3, [r7, #8]
 802b5fe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 802b602:	68bb      	ldr	r3, [r7, #8]
 802b604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b606:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802b608:	429a      	cmp	r2, r3
 802b60a:	d133      	bne.n	802b674 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802b60c:	68bb      	ldr	r3, [r7, #8]
 802b60e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 802b612:	68bb      	ldr	r3, [r7, #8]
 802b614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b616:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802b618:	429a      	cmp	r2, r3
 802b61a:	d12b      	bne.n	802b674 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 802b61c:	68bb      	ldr	r3, [r7, #8]
 802b61e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802b620:	68bb      	ldr	r3, [r7, #8]
 802b622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b624:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802b626:	429a      	cmp	r2, r3
 802b628:	d124      	bne.n	802b674 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 802b62a:	6878      	ldr	r0, [r7, #4]
 802b62c:	f000 f958 	bl	802b8e0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802b630:	e020      	b.n	802b674 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 802b632:	7bbb      	ldrb	r3, [r7, #14]
 802b634:	2b01      	cmp	r3, #1
 802b636:	d01d      	beq.n	802b674 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 802b638:	68bb      	ldr	r3, [r7, #8]
 802b63a:	2204      	movs	r2, #4
 802b63c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802b640:	e018      	b.n	802b674 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 802b642:	6878      	ldr	r0, [r7, #4]
 802b644:	f000 f867 	bl	802b716 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 802b648:	6878      	ldr	r0, [r7, #4]
 802b64a:	f000 f8da 	bl	802b802 <CDC_ProcessReception>
      break;
 802b64e:	e014      	b.n	802b67a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 802b650:	2100      	movs	r1, #0
 802b652:	6878      	ldr	r0, [r7, #4]
 802b654:	f000 ffef 	bl	802c636 <USBH_ClrFeature>
 802b658:	4603      	mov	r3, r0
 802b65a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802b65c:	7bbb      	ldrb	r3, [r7, #14]
 802b65e:	2b00      	cmp	r3, #0
 802b660:	d10a      	bne.n	802b678 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 802b662:	68bb      	ldr	r3, [r7, #8]
 802b664:	2200      	movs	r2, #0
 802b666:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 802b66a:	e005      	b.n	802b678 <USBH_CDC_Process+0x120>

    default:
      break;
 802b66c:	bf00      	nop
 802b66e:	e004      	b.n	802b67a <USBH_CDC_Process+0x122>
      break;
 802b670:	bf00      	nop
 802b672:	e002      	b.n	802b67a <USBH_CDC_Process+0x122>
      break;
 802b674:	bf00      	nop
 802b676:	e000      	b.n	802b67a <USBH_CDC_Process+0x122>
      break;
 802b678:	bf00      	nop

  }

  return status;
 802b67a:	7bfb      	ldrb	r3, [r7, #15]
}
 802b67c:	4618      	mov	r0, r3
 802b67e:	3710      	adds	r7, #16
 802b680:	46bd      	mov	sp, r7
 802b682:	bd80      	pop	{r7, pc}

0802b684 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 802b684:	b480      	push	{r7}
 802b686:	b083      	sub	sp, #12
 802b688:	af00      	add	r7, sp, #0
 802b68a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 802b68c:	2300      	movs	r3, #0
}
 802b68e:	4618      	mov	r0, r3
 802b690:	370c      	adds	r7, #12
 802b692:	46bd      	mov	sp, r7
 802b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b698:	4770      	bx	lr

0802b69a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 802b69a:	b580      	push	{r7, lr}
 802b69c:	b082      	sub	sp, #8
 802b69e:	af00      	add	r7, sp, #0
 802b6a0:	6078      	str	r0, [r7, #4]
 802b6a2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 802b6a4:	687b      	ldr	r3, [r7, #4]
 802b6a6:	22a1      	movs	r2, #161	; 0xa1
 802b6a8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 802b6aa:	687b      	ldr	r3, [r7, #4]
 802b6ac:	2221      	movs	r2, #33	; 0x21
 802b6ae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802b6b0:	687b      	ldr	r3, [r7, #4]
 802b6b2:	2200      	movs	r2, #0
 802b6b4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 802b6b6:	687b      	ldr	r3, [r7, #4]
 802b6b8:	2200      	movs	r2, #0
 802b6ba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802b6bc:	687b      	ldr	r3, [r7, #4]
 802b6be:	2207      	movs	r2, #7
 802b6c0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802b6c2:	683b      	ldr	r3, [r7, #0]
 802b6c4:	2207      	movs	r2, #7
 802b6c6:	4619      	mov	r1, r3
 802b6c8:	6878      	ldr	r0, [r7, #4]
 802b6ca:	f001 fa81 	bl	802cbd0 <USBH_CtlReq>
 802b6ce:	4603      	mov	r3, r0
}
 802b6d0:	4618      	mov	r0, r3
 802b6d2:	3708      	adds	r7, #8
 802b6d4:	46bd      	mov	sp, r7
 802b6d6:	bd80      	pop	{r7, pc}

0802b6d8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 802b6d8:	b580      	push	{r7, lr}
 802b6da:	b082      	sub	sp, #8
 802b6dc:	af00      	add	r7, sp, #0
 802b6de:	6078      	str	r0, [r7, #4]
 802b6e0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 802b6e2:	687b      	ldr	r3, [r7, #4]
 802b6e4:	2221      	movs	r2, #33	; 0x21
 802b6e6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 802b6e8:	687b      	ldr	r3, [r7, #4]
 802b6ea:	2220      	movs	r2, #32
 802b6ec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802b6ee:	687b      	ldr	r3, [r7, #4]
 802b6f0:	2200      	movs	r2, #0
 802b6f2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 802b6f4:	687b      	ldr	r3, [r7, #4]
 802b6f6:	2200      	movs	r2, #0
 802b6f8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802b6fa:	687b      	ldr	r3, [r7, #4]
 802b6fc:	2207      	movs	r2, #7
 802b6fe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802b700:	683b      	ldr	r3, [r7, #0]
 802b702:	2207      	movs	r2, #7
 802b704:	4619      	mov	r1, r3
 802b706:	6878      	ldr	r0, [r7, #4]
 802b708:	f001 fa62 	bl	802cbd0 <USBH_CtlReq>
 802b70c:	4603      	mov	r3, r0
}
 802b70e:	4618      	mov	r0, r3
 802b710:	3708      	adds	r7, #8
 802b712:	46bd      	mov	sp, r7
 802b714:	bd80      	pop	{r7, pc}

0802b716 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 802b716:	b580      	push	{r7, lr}
 802b718:	b086      	sub	sp, #24
 802b71a:	af02      	add	r7, sp, #8
 802b71c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b71e:	687b      	ldr	r3, [r7, #4]
 802b720:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b724:	69db      	ldr	r3, [r3, #28]
 802b726:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802b728:	2300      	movs	r3, #0
 802b72a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 802b72c:	68fb      	ldr	r3, [r7, #12]
 802b72e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802b732:	2b01      	cmp	r3, #1
 802b734:	d002      	beq.n	802b73c <CDC_ProcessTransmission+0x26>
 802b736:	2b02      	cmp	r3, #2
 802b738:	d023      	beq.n	802b782 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 802b73a:	e05e      	b.n	802b7fa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802b73c:	68fb      	ldr	r3, [r7, #12]
 802b73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b740:	68fa      	ldr	r2, [r7, #12]
 802b742:	8b12      	ldrh	r2, [r2, #24]
 802b744:	4293      	cmp	r3, r2
 802b746:	d90b      	bls.n	802b760 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 802b748:	68fb      	ldr	r3, [r7, #12]
 802b74a:	69d9      	ldr	r1, [r3, #28]
 802b74c:	68fb      	ldr	r3, [r7, #12]
 802b74e:	8b1a      	ldrh	r2, [r3, #24]
 802b750:	68fb      	ldr	r3, [r7, #12]
 802b752:	7b5b      	ldrb	r3, [r3, #13]
 802b754:	2001      	movs	r0, #1
 802b756:	9000      	str	r0, [sp, #0]
 802b758:	6878      	ldr	r0, [r7, #4]
 802b75a:	f001 fc48 	bl	802cfee <USBH_BulkSendData>
 802b75e:	e00b      	b.n	802b778 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 802b760:	68fb      	ldr	r3, [r7, #12]
 802b762:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 802b764:	68fb      	ldr	r3, [r7, #12]
 802b766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 802b768:	b29a      	uxth	r2, r3
 802b76a:	68fb      	ldr	r3, [r7, #12]
 802b76c:	7b5b      	ldrb	r3, [r3, #13]
 802b76e:	2001      	movs	r0, #1
 802b770:	9000      	str	r0, [sp, #0]
 802b772:	6878      	ldr	r0, [r7, #4]
 802b774:	f001 fc3b 	bl	802cfee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 802b778:	68fb      	ldr	r3, [r7, #12]
 802b77a:	2202      	movs	r2, #2
 802b77c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802b780:	e03b      	b.n	802b7fa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 802b782:	68fb      	ldr	r3, [r7, #12]
 802b784:	7b5b      	ldrb	r3, [r3, #13]
 802b786:	4619      	mov	r1, r3
 802b788:	6878      	ldr	r0, [r7, #4]
 802b78a:	f001 ff65 	bl	802d658 <USBH_LL_GetURBState>
 802b78e:	4603      	mov	r3, r0
 802b790:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 802b792:	7afb      	ldrb	r3, [r7, #11]
 802b794:	2b01      	cmp	r3, #1
 802b796:	d128      	bne.n	802b7ea <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802b798:	68fb      	ldr	r3, [r7, #12]
 802b79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b79c:	68fa      	ldr	r2, [r7, #12]
 802b79e:	8b12      	ldrh	r2, [r2, #24]
 802b7a0:	4293      	cmp	r3, r2
 802b7a2:	d90e      	bls.n	802b7c2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 802b7a4:	68fb      	ldr	r3, [r7, #12]
 802b7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b7a8:	68fa      	ldr	r2, [r7, #12]
 802b7aa:	8b12      	ldrh	r2, [r2, #24]
 802b7ac:	1a9a      	subs	r2, r3, r2
 802b7ae:	68fb      	ldr	r3, [r7, #12]
 802b7b0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 802b7b2:	68fb      	ldr	r3, [r7, #12]
 802b7b4:	69db      	ldr	r3, [r3, #28]
 802b7b6:	68fa      	ldr	r2, [r7, #12]
 802b7b8:	8b12      	ldrh	r2, [r2, #24]
 802b7ba:	441a      	add	r2, r3
 802b7bc:	68fb      	ldr	r3, [r7, #12]
 802b7be:	61da      	str	r2, [r3, #28]
 802b7c0:	e002      	b.n	802b7c8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 802b7c2:	68fb      	ldr	r3, [r7, #12]
 802b7c4:	2200      	movs	r2, #0
 802b7c6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 802b7c8:	68fb      	ldr	r3, [r7, #12]
 802b7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b7cc:	2b00      	cmp	r3, #0
 802b7ce:	d004      	beq.n	802b7da <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802b7d0:	68fb      	ldr	r3, [r7, #12]
 802b7d2:	2201      	movs	r2, #1
 802b7d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802b7d8:	e00e      	b.n	802b7f8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 802b7da:	68fb      	ldr	r3, [r7, #12]
 802b7dc:	2200      	movs	r2, #0
 802b7de:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 802b7e2:	6878      	ldr	r0, [r7, #4]
 802b7e4:	f000 f868 	bl	802b8b8 <USBH_CDC_TransmitCallback>
      break;
 802b7e8:	e006      	b.n	802b7f8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 802b7ea:	7afb      	ldrb	r3, [r7, #11]
 802b7ec:	2b02      	cmp	r3, #2
 802b7ee:	d103      	bne.n	802b7f8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802b7f0:	68fb      	ldr	r3, [r7, #12]
 802b7f2:	2201      	movs	r2, #1
 802b7f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802b7f8:	bf00      	nop
  }
}
 802b7fa:	bf00      	nop
 802b7fc:	3710      	adds	r7, #16
 802b7fe:	46bd      	mov	sp, r7
 802b800:	bd80      	pop	{r7, pc}

0802b802 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 802b802:	b580      	push	{r7, lr}
 802b804:	b086      	sub	sp, #24
 802b806:	af00      	add	r7, sp, #0
 802b808:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b80a:	687b      	ldr	r3, [r7, #4]
 802b80c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b810:	69db      	ldr	r3, [r3, #28]
 802b812:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802b814:	2300      	movs	r3, #0
 802b816:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 802b818:	697b      	ldr	r3, [r7, #20]
 802b81a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 802b81e:	2b03      	cmp	r3, #3
 802b820:	d002      	beq.n	802b828 <CDC_ProcessReception+0x26>
 802b822:	2b04      	cmp	r3, #4
 802b824:	d00e      	beq.n	802b844 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 802b826:	e043      	b.n	802b8b0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 802b828:	697b      	ldr	r3, [r7, #20]
 802b82a:	6a19      	ldr	r1, [r3, #32]
 802b82c:	697b      	ldr	r3, [r7, #20]
 802b82e:	8b5a      	ldrh	r2, [r3, #26]
 802b830:	697b      	ldr	r3, [r7, #20]
 802b832:	7b1b      	ldrb	r3, [r3, #12]
 802b834:	6878      	ldr	r0, [r7, #4]
 802b836:	f001 fbff 	bl	802d038 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 802b83a:	697b      	ldr	r3, [r7, #20]
 802b83c:	2204      	movs	r2, #4
 802b83e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802b842:	e035      	b.n	802b8b0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 802b844:	697b      	ldr	r3, [r7, #20]
 802b846:	7b1b      	ldrb	r3, [r3, #12]
 802b848:	4619      	mov	r1, r3
 802b84a:	6878      	ldr	r0, [r7, #4]
 802b84c:	f001 ff04 	bl	802d658 <USBH_LL_GetURBState>
 802b850:	4603      	mov	r3, r0
 802b852:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 802b854:	7cfb      	ldrb	r3, [r7, #19]
 802b856:	2b01      	cmp	r3, #1
 802b858:	d129      	bne.n	802b8ae <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 802b85a:	697b      	ldr	r3, [r7, #20]
 802b85c:	7b1b      	ldrb	r3, [r3, #12]
 802b85e:	4619      	mov	r1, r3
 802b860:	6878      	ldr	r0, [r7, #4]
 802b862:	f001 fe67 	bl	802d534 <USBH_LL_GetLastXferSize>
 802b866:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 802b868:	697b      	ldr	r3, [r7, #20]
 802b86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b86c:	68fa      	ldr	r2, [r7, #12]
 802b86e:	429a      	cmp	r2, r3
 802b870:	d016      	beq.n	802b8a0 <CDC_ProcessReception+0x9e>
 802b872:	697b      	ldr	r3, [r7, #20]
 802b874:	8b5b      	ldrh	r3, [r3, #26]
 802b876:	461a      	mov	r2, r3
 802b878:	68fb      	ldr	r3, [r7, #12]
 802b87a:	4293      	cmp	r3, r2
 802b87c:	d910      	bls.n	802b8a0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 802b87e:	697b      	ldr	r3, [r7, #20]
 802b880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802b882:	68fb      	ldr	r3, [r7, #12]
 802b884:	1ad2      	subs	r2, r2, r3
 802b886:	697b      	ldr	r3, [r7, #20]
 802b888:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 802b88a:	697b      	ldr	r3, [r7, #20]
 802b88c:	6a1a      	ldr	r2, [r3, #32]
 802b88e:	68fb      	ldr	r3, [r7, #12]
 802b890:	441a      	add	r2, r3
 802b892:	697b      	ldr	r3, [r7, #20]
 802b894:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 802b896:	697b      	ldr	r3, [r7, #20]
 802b898:	2203      	movs	r2, #3
 802b89a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802b89e:	e006      	b.n	802b8ae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 802b8a0:	697b      	ldr	r3, [r7, #20]
 802b8a2:	2200      	movs	r2, #0
 802b8a4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 802b8a8:	6878      	ldr	r0, [r7, #4]
 802b8aa:	f000 f80f 	bl	802b8cc <USBH_CDC_ReceiveCallback>
      break;
 802b8ae:	bf00      	nop
  }
}
 802b8b0:	bf00      	nop
 802b8b2:	3718      	adds	r7, #24
 802b8b4:	46bd      	mov	sp, r7
 802b8b6:	bd80      	pop	{r7, pc}

0802b8b8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 802b8b8:	b480      	push	{r7}
 802b8ba:	b083      	sub	sp, #12
 802b8bc:	af00      	add	r7, sp, #0
 802b8be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802b8c0:	bf00      	nop
 802b8c2:	370c      	adds	r7, #12
 802b8c4:	46bd      	mov	sp, r7
 802b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b8ca:	4770      	bx	lr

0802b8cc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 802b8cc:	b480      	push	{r7}
 802b8ce:	b083      	sub	sp, #12
 802b8d0:	af00      	add	r7, sp, #0
 802b8d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802b8d4:	bf00      	nop
 802b8d6:	370c      	adds	r7, #12
 802b8d8:	46bd      	mov	sp, r7
 802b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b8de:	4770      	bx	lr

0802b8e0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 802b8e0:	b480      	push	{r7}
 802b8e2:	b083      	sub	sp, #12
 802b8e4:	af00      	add	r7, sp, #0
 802b8e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802b8e8:	bf00      	nop
 802b8ea:	370c      	adds	r7, #12
 802b8ec:	46bd      	mov	sp, r7
 802b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b8f2:	4770      	bx	lr

0802b8f4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 802b8f4:	b580      	push	{r7, lr}
 802b8f6:	b084      	sub	sp, #16
 802b8f8:	af00      	add	r7, sp, #0
 802b8fa:	60f8      	str	r0, [r7, #12]
 802b8fc:	60b9      	str	r1, [r7, #8]
 802b8fe:	4613      	mov	r3, r2
 802b900:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 802b902:	68fb      	ldr	r3, [r7, #12]
 802b904:	2b00      	cmp	r3, #0
 802b906:	d101      	bne.n	802b90c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 802b908:	2302      	movs	r3, #2
 802b90a:	e029      	b.n	802b960 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 802b90c:	68fb      	ldr	r3, [r7, #12]
 802b90e:	79fa      	ldrb	r2, [r7, #7]
 802b910:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 802b914:	68fb      	ldr	r3, [r7, #12]
 802b916:	2200      	movs	r2, #0
 802b918:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 802b91c:	68fb      	ldr	r3, [r7, #12]
 802b91e:	2200      	movs	r2, #0
 802b920:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 802b924:	68f8      	ldr	r0, [r7, #12]
 802b926:	f000 f81f 	bl	802b968 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 802b92a:	68fb      	ldr	r3, [r7, #12]
 802b92c:	2200      	movs	r2, #0
 802b92e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 802b932:	68fb      	ldr	r3, [r7, #12]
 802b934:	2200      	movs	r2, #0
 802b936:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802b93a:	68fb      	ldr	r3, [r7, #12]
 802b93c:	2200      	movs	r2, #0
 802b93e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802b942:	68fb      	ldr	r3, [r7, #12]
 802b944:	2200      	movs	r2, #0
 802b946:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 802b94a:	68bb      	ldr	r3, [r7, #8]
 802b94c:	2b00      	cmp	r3, #0
 802b94e:	d003      	beq.n	802b958 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 802b950:	68fb      	ldr	r3, [r7, #12]
 802b952:	68ba      	ldr	r2, [r7, #8]
 802b954:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 802b958:	68f8      	ldr	r0, [r7, #12]
 802b95a:	f001 fd2d 	bl	802d3b8 <USBH_LL_Init>

  return USBH_OK;
 802b95e:	2300      	movs	r3, #0
}
 802b960:	4618      	mov	r0, r3
 802b962:	3710      	adds	r7, #16
 802b964:	46bd      	mov	sp, r7
 802b966:	bd80      	pop	{r7, pc}

0802b968 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 802b968:	b480      	push	{r7}
 802b96a:	b085      	sub	sp, #20
 802b96c:	af00      	add	r7, sp, #0
 802b96e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 802b970:	2300      	movs	r3, #0
 802b972:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802b974:	2300      	movs	r3, #0
 802b976:	60fb      	str	r3, [r7, #12]
 802b978:	e009      	b.n	802b98e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 802b97a:	687a      	ldr	r2, [r7, #4]
 802b97c:	68fb      	ldr	r3, [r7, #12]
 802b97e:	33e0      	adds	r3, #224	; 0xe0
 802b980:	009b      	lsls	r3, r3, #2
 802b982:	4413      	add	r3, r2
 802b984:	2200      	movs	r2, #0
 802b986:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802b988:	68fb      	ldr	r3, [r7, #12]
 802b98a:	3301      	adds	r3, #1
 802b98c:	60fb      	str	r3, [r7, #12]
 802b98e:	68fb      	ldr	r3, [r7, #12]
 802b990:	2b0f      	cmp	r3, #15
 802b992:	d9f2      	bls.n	802b97a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802b994:	2300      	movs	r3, #0
 802b996:	60fb      	str	r3, [r7, #12]
 802b998:	e009      	b.n	802b9ae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 802b99a:	687a      	ldr	r2, [r7, #4]
 802b99c:	68fb      	ldr	r3, [r7, #12]
 802b99e:	4413      	add	r3, r2
 802b9a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802b9a4:	2200      	movs	r2, #0
 802b9a6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802b9a8:	68fb      	ldr	r3, [r7, #12]
 802b9aa:	3301      	adds	r3, #1
 802b9ac:	60fb      	str	r3, [r7, #12]
 802b9ae:	68fb      	ldr	r3, [r7, #12]
 802b9b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b9b4:	d3f1      	bcc.n	802b99a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 802b9b6:	687b      	ldr	r3, [r7, #4]
 802b9b8:	2200      	movs	r2, #0
 802b9ba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 802b9bc:	687b      	ldr	r3, [r7, #4]
 802b9be:	2200      	movs	r2, #0
 802b9c0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 802b9c2:	687b      	ldr	r3, [r7, #4]
 802b9c4:	2201      	movs	r2, #1
 802b9c6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 802b9c8:	687b      	ldr	r3, [r7, #4]
 802b9ca:	2200      	movs	r2, #0
 802b9cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 802b9d0:	687b      	ldr	r3, [r7, #4]
 802b9d2:	2201      	movs	r2, #1
 802b9d4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 802b9d6:	687b      	ldr	r3, [r7, #4]
 802b9d8:	2240      	movs	r2, #64	; 0x40
 802b9da:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 802b9dc:	687b      	ldr	r3, [r7, #4]
 802b9de:	2200      	movs	r2, #0
 802b9e0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 802b9e2:	687b      	ldr	r3, [r7, #4]
 802b9e4:	2200      	movs	r2, #0
 802b9e6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 802b9ea:	687b      	ldr	r3, [r7, #4]
 802b9ec:	2201      	movs	r2, #1
 802b9ee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 802b9f2:	687b      	ldr	r3, [r7, #4]
 802b9f4:	2200      	movs	r2, #0
 802b9f6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 802b9fa:	687b      	ldr	r3, [r7, #4]
 802b9fc:	2200      	movs	r2, #0
 802b9fe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 802ba02:	2300      	movs	r3, #0
}
 802ba04:	4618      	mov	r0, r3
 802ba06:	3714      	adds	r7, #20
 802ba08:	46bd      	mov	sp, r7
 802ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ba0e:	4770      	bx	lr

0802ba10 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 802ba10:	b480      	push	{r7}
 802ba12:	b085      	sub	sp, #20
 802ba14:	af00      	add	r7, sp, #0
 802ba16:	6078      	str	r0, [r7, #4]
 802ba18:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 802ba1a:	2300      	movs	r3, #0
 802ba1c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 802ba1e:	683b      	ldr	r3, [r7, #0]
 802ba20:	2b00      	cmp	r3, #0
 802ba22:	d016      	beq.n	802ba52 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 802ba24:	687b      	ldr	r3, [r7, #4]
 802ba26:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802ba2a:	2b00      	cmp	r3, #0
 802ba2c:	d10e      	bne.n	802ba4c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 802ba2e:	687b      	ldr	r3, [r7, #4]
 802ba30:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802ba34:	1c59      	adds	r1, r3, #1
 802ba36:	687a      	ldr	r2, [r7, #4]
 802ba38:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 802ba3c:	687a      	ldr	r2, [r7, #4]
 802ba3e:	33de      	adds	r3, #222	; 0xde
 802ba40:	6839      	ldr	r1, [r7, #0]
 802ba42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 802ba46:	2300      	movs	r3, #0
 802ba48:	73fb      	strb	r3, [r7, #15]
 802ba4a:	e004      	b.n	802ba56 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 802ba4c:	2302      	movs	r3, #2
 802ba4e:	73fb      	strb	r3, [r7, #15]
 802ba50:	e001      	b.n	802ba56 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 802ba52:	2302      	movs	r3, #2
 802ba54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802ba56:	7bfb      	ldrb	r3, [r7, #15]
}
 802ba58:	4618      	mov	r0, r3
 802ba5a:	3714      	adds	r7, #20
 802ba5c:	46bd      	mov	sp, r7
 802ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ba62:	4770      	bx	lr

0802ba64 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 802ba64:	b480      	push	{r7}
 802ba66:	b085      	sub	sp, #20
 802ba68:	af00      	add	r7, sp, #0
 802ba6a:	6078      	str	r0, [r7, #4]
 802ba6c:	460b      	mov	r3, r1
 802ba6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 802ba70:	2300      	movs	r3, #0
 802ba72:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 802ba74:	687b      	ldr	r3, [r7, #4]
 802ba76:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 802ba7a:	78fa      	ldrb	r2, [r7, #3]
 802ba7c:	429a      	cmp	r2, r3
 802ba7e:	d204      	bcs.n	802ba8a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 802ba80:	687b      	ldr	r3, [r7, #4]
 802ba82:	78fa      	ldrb	r2, [r7, #3]
 802ba84:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 802ba88:	e001      	b.n	802ba8e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 802ba8a:	2302      	movs	r3, #2
 802ba8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802ba8e:	7bfb      	ldrb	r3, [r7, #15]
}
 802ba90:	4618      	mov	r0, r3
 802ba92:	3714      	adds	r7, #20
 802ba94:	46bd      	mov	sp, r7
 802ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ba9a:	4770      	bx	lr

0802ba9c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 802ba9c:	b480      	push	{r7}
 802ba9e:	b087      	sub	sp, #28
 802baa0:	af00      	add	r7, sp, #0
 802baa2:	6078      	str	r0, [r7, #4]
 802baa4:	4608      	mov	r0, r1
 802baa6:	4611      	mov	r1, r2
 802baa8:	461a      	mov	r2, r3
 802baaa:	4603      	mov	r3, r0
 802baac:	70fb      	strb	r3, [r7, #3]
 802baae:	460b      	mov	r3, r1
 802bab0:	70bb      	strb	r3, [r7, #2]
 802bab2:	4613      	mov	r3, r2
 802bab4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 802bab6:	2300      	movs	r3, #0
 802bab8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 802baba:	2300      	movs	r3, #0
 802babc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 802babe:	687b      	ldr	r3, [r7, #4]
 802bac0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802bac4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802bac6:	e025      	b.n	802bb14 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 802bac8:	7dfb      	ldrb	r3, [r7, #23]
 802baca:	221a      	movs	r2, #26
 802bacc:	fb02 f303 	mul.w	r3, r2, r3
 802bad0:	3308      	adds	r3, #8
 802bad2:	68fa      	ldr	r2, [r7, #12]
 802bad4:	4413      	add	r3, r2
 802bad6:	3302      	adds	r3, #2
 802bad8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802bada:	693b      	ldr	r3, [r7, #16]
 802badc:	795b      	ldrb	r3, [r3, #5]
 802bade:	78fa      	ldrb	r2, [r7, #3]
 802bae0:	429a      	cmp	r2, r3
 802bae2:	d002      	beq.n	802baea <USBH_FindInterface+0x4e>
 802bae4:	78fb      	ldrb	r3, [r7, #3]
 802bae6:	2bff      	cmp	r3, #255	; 0xff
 802bae8:	d111      	bne.n	802bb0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802baea:	693b      	ldr	r3, [r7, #16]
 802baec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802baee:	78ba      	ldrb	r2, [r7, #2]
 802baf0:	429a      	cmp	r2, r3
 802baf2:	d002      	beq.n	802bafa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802baf4:	78bb      	ldrb	r3, [r7, #2]
 802baf6:	2bff      	cmp	r3, #255	; 0xff
 802baf8:	d109      	bne.n	802bb0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802bafa:	693b      	ldr	r3, [r7, #16]
 802bafc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802bafe:	787a      	ldrb	r2, [r7, #1]
 802bb00:	429a      	cmp	r2, r3
 802bb02:	d002      	beq.n	802bb0a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802bb04:	787b      	ldrb	r3, [r7, #1]
 802bb06:	2bff      	cmp	r3, #255	; 0xff
 802bb08:	d101      	bne.n	802bb0e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 802bb0a:	7dfb      	ldrb	r3, [r7, #23]
 802bb0c:	e006      	b.n	802bb1c <USBH_FindInterface+0x80>
    }
    if_ix++;
 802bb0e:	7dfb      	ldrb	r3, [r7, #23]
 802bb10:	3301      	adds	r3, #1
 802bb12:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802bb14:	7dfb      	ldrb	r3, [r7, #23]
 802bb16:	2b01      	cmp	r3, #1
 802bb18:	d9d6      	bls.n	802bac8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 802bb1a:	23ff      	movs	r3, #255	; 0xff
}
 802bb1c:	4618      	mov	r0, r3
 802bb1e:	371c      	adds	r7, #28
 802bb20:	46bd      	mov	sp, r7
 802bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bb26:	4770      	bx	lr

0802bb28 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 802bb28:	b580      	push	{r7, lr}
 802bb2a:	b082      	sub	sp, #8
 802bb2c:	af00      	add	r7, sp, #0
 802bb2e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 802bb30:	6878      	ldr	r0, [r7, #4]
 802bb32:	f001 fc87 	bl	802d444 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 802bb36:	2101      	movs	r1, #1
 802bb38:	6878      	ldr	r0, [r7, #4]
 802bb3a:	f001 fda0 	bl	802d67e <USBH_LL_DriverVBUS>

  return USBH_OK;
 802bb3e:	2300      	movs	r3, #0
}
 802bb40:	4618      	mov	r0, r3
 802bb42:	3708      	adds	r7, #8
 802bb44:	46bd      	mov	sp, r7
 802bb46:	bd80      	pop	{r7, pc}

0802bb48 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 802bb48:	b580      	push	{r7, lr}
 802bb4a:	b088      	sub	sp, #32
 802bb4c:	af04      	add	r7, sp, #16
 802bb4e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 802bb50:	2302      	movs	r3, #2
 802bb52:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 802bb54:	2300      	movs	r3, #0
 802bb56:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 802bb58:	687b      	ldr	r3, [r7, #4]
 802bb5a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 802bb5e:	b2db      	uxtb	r3, r3
 802bb60:	2b01      	cmp	r3, #1
 802bb62:	d102      	bne.n	802bb6a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 802bb64:	687b      	ldr	r3, [r7, #4]
 802bb66:	2203      	movs	r2, #3
 802bb68:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 802bb6a:	687b      	ldr	r3, [r7, #4]
 802bb6c:	781b      	ldrb	r3, [r3, #0]
 802bb6e:	b2db      	uxtb	r3, r3
 802bb70:	2b0b      	cmp	r3, #11
 802bb72:	f200 81be 	bhi.w	802bef2 <USBH_Process+0x3aa>
 802bb76:	a201      	add	r2, pc, #4	; (adr r2, 802bb7c <USBH_Process+0x34>)
 802bb78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802bb7c:	0802bbad 	.word	0x0802bbad
 802bb80:	0802bbdf 	.word	0x0802bbdf
 802bb84:	0802bc47 	.word	0x0802bc47
 802bb88:	0802be8d 	.word	0x0802be8d
 802bb8c:	0802bef3 	.word	0x0802bef3
 802bb90:	0802bceb 	.word	0x0802bceb
 802bb94:	0802be33 	.word	0x0802be33
 802bb98:	0802bd21 	.word	0x0802bd21
 802bb9c:	0802bd41 	.word	0x0802bd41
 802bba0:	0802bd61 	.word	0x0802bd61
 802bba4:	0802bda5 	.word	0x0802bda5
 802bba8:	0802be75 	.word	0x0802be75
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 802bbac:	687b      	ldr	r3, [r7, #4]
 802bbae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802bbb2:	b2db      	uxtb	r3, r3
 802bbb4:	2b00      	cmp	r3, #0
 802bbb6:	f000 819e 	beq.w	802bef6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 802bbba:	687b      	ldr	r3, [r7, #4]
 802bbbc:	2201      	movs	r2, #1
 802bbbe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 802bbc0:	20c8      	movs	r0, #200	; 0xc8
 802bbc2:	f001 fda3 	bl	802d70c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 802bbc6:	6878      	ldr	r0, [r7, #4]
 802bbc8:	f001 fc99 	bl	802d4fe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 802bbcc:	687b      	ldr	r3, [r7, #4]
 802bbce:	2200      	movs	r2, #0
 802bbd0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 802bbd4:	687b      	ldr	r3, [r7, #4]
 802bbd6:	2200      	movs	r2, #0
 802bbd8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802bbdc:	e18b      	b.n	802bef6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 802bbde:	687b      	ldr	r3, [r7, #4]
 802bbe0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 802bbe4:	2b01      	cmp	r3, #1
 802bbe6:	d107      	bne.n	802bbf8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 802bbe8:	687b      	ldr	r3, [r7, #4]
 802bbea:	2200      	movs	r2, #0
 802bbec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 802bbf0:	687b      	ldr	r3, [r7, #4]
 802bbf2:	2202      	movs	r2, #2
 802bbf4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bbf6:	e18d      	b.n	802bf14 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 802bbf8:	687b      	ldr	r3, [r7, #4]
 802bbfa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802bbfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802bc02:	d914      	bls.n	802bc2e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 802bc04:	687b      	ldr	r3, [r7, #4]
 802bc06:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802bc0a:	3301      	adds	r3, #1
 802bc0c:	b2da      	uxtb	r2, r3
 802bc0e:	687b      	ldr	r3, [r7, #4]
 802bc10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 802bc14:	687b      	ldr	r3, [r7, #4]
 802bc16:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802bc1a:	2b03      	cmp	r3, #3
 802bc1c:	d903      	bls.n	802bc26 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 802bc1e:	687b      	ldr	r3, [r7, #4]
 802bc20:	220d      	movs	r2, #13
 802bc22:	701a      	strb	r2, [r3, #0]
      break;
 802bc24:	e176      	b.n	802bf14 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 802bc26:	687b      	ldr	r3, [r7, #4]
 802bc28:	2200      	movs	r2, #0
 802bc2a:	701a      	strb	r2, [r3, #0]
      break;
 802bc2c:	e172      	b.n	802bf14 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 802bc2e:	687b      	ldr	r3, [r7, #4]
 802bc30:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802bc34:	f103 020a 	add.w	r2, r3, #10
 802bc38:	687b      	ldr	r3, [r7, #4]
 802bc3a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 802bc3e:	200a      	movs	r0, #10
 802bc40:	f001 fd64 	bl	802d70c <USBH_Delay>
      break;
 802bc44:	e166      	b.n	802bf14 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 802bc46:	687b      	ldr	r3, [r7, #4]
 802bc48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bc4c:	2b00      	cmp	r3, #0
 802bc4e:	d005      	beq.n	802bc5c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 802bc50:	687b      	ldr	r3, [r7, #4]
 802bc52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bc56:	2104      	movs	r1, #4
 802bc58:	6878      	ldr	r0, [r7, #4]
 802bc5a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 802bc5c:	2064      	movs	r0, #100	; 0x64
 802bc5e:	f001 fd55 	bl	802d70c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 802bc62:	6878      	ldr	r0, [r7, #4]
 802bc64:	f001 fc24 	bl	802d4b0 <USBH_LL_GetSpeed>
 802bc68:	4603      	mov	r3, r0
 802bc6a:	461a      	mov	r2, r3
 802bc6c:	687b      	ldr	r3, [r7, #4]
 802bc6e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 802bc72:	687b      	ldr	r3, [r7, #4]
 802bc74:	2205      	movs	r2, #5
 802bc76:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 802bc78:	2100      	movs	r1, #0
 802bc7a:	6878      	ldr	r0, [r7, #4]
 802bc7c:	f001 fa29 	bl	802d0d2 <USBH_AllocPipe>
 802bc80:	4603      	mov	r3, r0
 802bc82:	461a      	mov	r2, r3
 802bc84:	687b      	ldr	r3, [r7, #4]
 802bc86:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 802bc88:	2180      	movs	r1, #128	; 0x80
 802bc8a:	6878      	ldr	r0, [r7, #4]
 802bc8c:	f001 fa21 	bl	802d0d2 <USBH_AllocPipe>
 802bc90:	4603      	mov	r3, r0
 802bc92:	461a      	mov	r2, r3
 802bc94:	687b      	ldr	r3, [r7, #4]
 802bc96:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802bc98:	687b      	ldr	r3, [r7, #4]
 802bc9a:	7919      	ldrb	r1, [r3, #4]
 802bc9c:	687b      	ldr	r3, [r7, #4]
 802bc9e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bca2:	687b      	ldr	r3, [r7, #4]
 802bca4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802bca8:	687a      	ldr	r2, [r7, #4]
 802bcaa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802bcac:	b292      	uxth	r2, r2
 802bcae:	9202      	str	r2, [sp, #8]
 802bcb0:	2200      	movs	r2, #0
 802bcb2:	9201      	str	r2, [sp, #4]
 802bcb4:	9300      	str	r3, [sp, #0]
 802bcb6:	4603      	mov	r3, r0
 802bcb8:	2280      	movs	r2, #128	; 0x80
 802bcba:	6878      	ldr	r0, [r7, #4]
 802bcbc:	f001 f9da 	bl	802d074 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802bcc0:	687b      	ldr	r3, [r7, #4]
 802bcc2:	7959      	ldrb	r1, [r3, #5]
 802bcc4:	687b      	ldr	r3, [r7, #4]
 802bcc6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bcca:	687b      	ldr	r3, [r7, #4]
 802bccc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802bcd0:	687a      	ldr	r2, [r7, #4]
 802bcd2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802bcd4:	b292      	uxth	r2, r2
 802bcd6:	9202      	str	r2, [sp, #8]
 802bcd8:	2200      	movs	r2, #0
 802bcda:	9201      	str	r2, [sp, #4]
 802bcdc:	9300      	str	r3, [sp, #0]
 802bcde:	4603      	mov	r3, r0
 802bce0:	2200      	movs	r2, #0
 802bce2:	6878      	ldr	r0, [r7, #4]
 802bce4:	f001 f9c6 	bl	802d074 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bce8:	e114      	b.n	802bf14 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 802bcea:	6878      	ldr	r0, [r7, #4]
 802bcec:	f000 f918 	bl	802bf20 <USBH_HandleEnum>
 802bcf0:	4603      	mov	r3, r0
 802bcf2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 802bcf4:	7bbb      	ldrb	r3, [r7, #14]
 802bcf6:	b2db      	uxtb	r3, r3
 802bcf8:	2b00      	cmp	r3, #0
 802bcfa:	f040 80fe 	bne.w	802befa <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 802bcfe:	687b      	ldr	r3, [r7, #4]
 802bd00:	2200      	movs	r2, #0
 802bd02:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 802bd06:	687b      	ldr	r3, [r7, #4]
 802bd08:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 802bd0c:	2b01      	cmp	r3, #1
 802bd0e:	d103      	bne.n	802bd18 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 802bd10:	687b      	ldr	r3, [r7, #4]
 802bd12:	2208      	movs	r2, #8
 802bd14:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802bd16:	e0f0      	b.n	802befa <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 802bd18:	687b      	ldr	r3, [r7, #4]
 802bd1a:	2207      	movs	r2, #7
 802bd1c:	701a      	strb	r2, [r3, #0]
      break;
 802bd1e:	e0ec      	b.n	802befa <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 802bd20:	687b      	ldr	r3, [r7, #4]
 802bd22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bd26:	2b00      	cmp	r3, #0
 802bd28:	f000 80e9 	beq.w	802befe <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 802bd2c:	687b      	ldr	r3, [r7, #4]
 802bd2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bd32:	2101      	movs	r1, #1
 802bd34:	6878      	ldr	r0, [r7, #4]
 802bd36:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 802bd38:	687b      	ldr	r3, [r7, #4]
 802bd3a:	2208      	movs	r2, #8
 802bd3c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 802bd3e:	e0de      	b.n	802befe <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 802bd40:	687b      	ldr	r3, [r7, #4]
 802bd42:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 802bd46:	b29b      	uxth	r3, r3
 802bd48:	4619      	mov	r1, r3
 802bd4a:	6878      	ldr	r0, [r7, #4]
 802bd4c:	f000 fc2c 	bl	802c5a8 <USBH_SetCfg>
 802bd50:	4603      	mov	r3, r0
 802bd52:	2b00      	cmp	r3, #0
 802bd54:	f040 80d5 	bne.w	802bf02 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 802bd58:	687b      	ldr	r3, [r7, #4]
 802bd5a:	2209      	movs	r2, #9
 802bd5c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bd5e:	e0d0      	b.n	802bf02 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 802bd60:	687b      	ldr	r3, [r7, #4]
 802bd62:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 802bd66:	f003 0320 	and.w	r3, r3, #32
 802bd6a:	2b00      	cmp	r3, #0
 802bd6c:	d016      	beq.n	802bd9c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 802bd6e:	2101      	movs	r1, #1
 802bd70:	6878      	ldr	r0, [r7, #4]
 802bd72:	f000 fc3c 	bl	802c5ee <USBH_SetFeature>
 802bd76:	4603      	mov	r3, r0
 802bd78:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802bd7a:	7bbb      	ldrb	r3, [r7, #14]
 802bd7c:	b2db      	uxtb	r3, r3
 802bd7e:	2b00      	cmp	r3, #0
 802bd80:	d103      	bne.n	802bd8a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 802bd82:	687b      	ldr	r3, [r7, #4]
 802bd84:	220a      	movs	r2, #10
 802bd86:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bd88:	e0bd      	b.n	802bf06 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 802bd8a:	7bbb      	ldrb	r3, [r7, #14]
 802bd8c:	b2db      	uxtb	r3, r3
 802bd8e:	2b03      	cmp	r3, #3
 802bd90:	f040 80b9 	bne.w	802bf06 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 802bd94:	687b      	ldr	r3, [r7, #4]
 802bd96:	220a      	movs	r2, #10
 802bd98:	701a      	strb	r2, [r3, #0]
      break;
 802bd9a:	e0b4      	b.n	802bf06 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 802bd9c:	687b      	ldr	r3, [r7, #4]
 802bd9e:	220a      	movs	r2, #10
 802bda0:	701a      	strb	r2, [r3, #0]
      break;
 802bda2:	e0b0      	b.n	802bf06 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 802bda4:	687b      	ldr	r3, [r7, #4]
 802bda6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802bdaa:	2b00      	cmp	r3, #0
 802bdac:	f000 80ad 	beq.w	802bf0a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 802bdb0:	687b      	ldr	r3, [r7, #4]
 802bdb2:	2200      	movs	r2, #0
 802bdb4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802bdb8:	2300      	movs	r3, #0
 802bdba:	73fb      	strb	r3, [r7, #15]
 802bdbc:	e016      	b.n	802bdec <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 802bdbe:	7bfa      	ldrb	r2, [r7, #15]
 802bdc0:	687b      	ldr	r3, [r7, #4]
 802bdc2:	32de      	adds	r2, #222	; 0xde
 802bdc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802bdc8:	791a      	ldrb	r2, [r3, #4]
 802bdca:	687b      	ldr	r3, [r7, #4]
 802bdcc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 802bdd0:	429a      	cmp	r2, r3
 802bdd2:	d108      	bne.n	802bde6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 802bdd4:	7bfa      	ldrb	r2, [r7, #15]
 802bdd6:	687b      	ldr	r3, [r7, #4]
 802bdd8:	32de      	adds	r2, #222	; 0xde
 802bdda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802bdde:	687b      	ldr	r3, [r7, #4]
 802bde0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 802bde4:	e005      	b.n	802bdf2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802bde6:	7bfb      	ldrb	r3, [r7, #15]
 802bde8:	3301      	adds	r3, #1
 802bdea:	73fb      	strb	r3, [r7, #15]
 802bdec:	7bfb      	ldrb	r3, [r7, #15]
 802bdee:	2b00      	cmp	r3, #0
 802bdf0:	d0e5      	beq.n	802bdbe <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 802bdf2:	687b      	ldr	r3, [r7, #4]
 802bdf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bdf8:	2b00      	cmp	r3, #0
 802bdfa:	d016      	beq.n	802be2a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 802bdfc:	687b      	ldr	r3, [r7, #4]
 802bdfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802be02:	689b      	ldr	r3, [r3, #8]
 802be04:	6878      	ldr	r0, [r7, #4]
 802be06:	4798      	blx	r3
 802be08:	4603      	mov	r3, r0
 802be0a:	2b00      	cmp	r3, #0
 802be0c:	d109      	bne.n	802be22 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 802be0e:	687b      	ldr	r3, [r7, #4]
 802be10:	2206      	movs	r2, #6
 802be12:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 802be14:	687b      	ldr	r3, [r7, #4]
 802be16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802be1a:	2103      	movs	r1, #3
 802be1c:	6878      	ldr	r0, [r7, #4]
 802be1e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802be20:	e073      	b.n	802bf0a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 802be22:	687b      	ldr	r3, [r7, #4]
 802be24:	220d      	movs	r2, #13
 802be26:	701a      	strb	r2, [r3, #0]
      break;
 802be28:	e06f      	b.n	802bf0a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 802be2a:	687b      	ldr	r3, [r7, #4]
 802be2c:	220d      	movs	r2, #13
 802be2e:	701a      	strb	r2, [r3, #0]
      break;
 802be30:	e06b      	b.n	802bf0a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 802be32:	687b      	ldr	r3, [r7, #4]
 802be34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802be38:	2b00      	cmp	r3, #0
 802be3a:	d017      	beq.n	802be6c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 802be3c:	687b      	ldr	r3, [r7, #4]
 802be3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802be42:	691b      	ldr	r3, [r3, #16]
 802be44:	6878      	ldr	r0, [r7, #4]
 802be46:	4798      	blx	r3
 802be48:	4603      	mov	r3, r0
 802be4a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802be4c:	7bbb      	ldrb	r3, [r7, #14]
 802be4e:	b2db      	uxtb	r3, r3
 802be50:	2b00      	cmp	r3, #0
 802be52:	d103      	bne.n	802be5c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 802be54:	687b      	ldr	r3, [r7, #4]
 802be56:	220b      	movs	r2, #11
 802be58:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802be5a:	e058      	b.n	802bf0e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 802be5c:	7bbb      	ldrb	r3, [r7, #14]
 802be5e:	b2db      	uxtb	r3, r3
 802be60:	2b02      	cmp	r3, #2
 802be62:	d154      	bne.n	802bf0e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 802be64:	687b      	ldr	r3, [r7, #4]
 802be66:	220d      	movs	r2, #13
 802be68:	701a      	strb	r2, [r3, #0]
      break;
 802be6a:	e050      	b.n	802bf0e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 802be6c:	687b      	ldr	r3, [r7, #4]
 802be6e:	220d      	movs	r2, #13
 802be70:	701a      	strb	r2, [r3, #0]
      break;
 802be72:	e04c      	b.n	802bf0e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 802be74:	687b      	ldr	r3, [r7, #4]
 802be76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802be7a:	2b00      	cmp	r3, #0
 802be7c:	d049      	beq.n	802bf12 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 802be7e:	687b      	ldr	r3, [r7, #4]
 802be80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802be84:	695b      	ldr	r3, [r3, #20]
 802be86:	6878      	ldr	r0, [r7, #4]
 802be88:	4798      	blx	r3
      }
      break;
 802be8a:	e042      	b.n	802bf12 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 802be8c:	687b      	ldr	r3, [r7, #4]
 802be8e:	2200      	movs	r2, #0
 802be90:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 802be94:	6878      	ldr	r0, [r7, #4]
 802be96:	f7ff fd67 	bl	802b968 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 802be9a:	687b      	ldr	r3, [r7, #4]
 802be9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bea0:	2b00      	cmp	r3, #0
 802bea2:	d009      	beq.n	802beb8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 802bea4:	687b      	ldr	r3, [r7, #4]
 802bea6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802beaa:	68db      	ldr	r3, [r3, #12]
 802beac:	6878      	ldr	r0, [r7, #4]
 802beae:	4798      	blx	r3
        phost->pActiveClass = NULL;
 802beb0:	687b      	ldr	r3, [r7, #4]
 802beb2:	2200      	movs	r2, #0
 802beb4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 802beb8:	687b      	ldr	r3, [r7, #4]
 802beba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bebe:	2b00      	cmp	r3, #0
 802bec0:	d005      	beq.n	802bece <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 802bec2:	687b      	ldr	r3, [r7, #4]
 802bec4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bec8:	2105      	movs	r1, #5
 802beca:	6878      	ldr	r0, [r7, #4]
 802becc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 802bece:	687b      	ldr	r3, [r7, #4]
 802bed0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 802bed4:	b2db      	uxtb	r3, r3
 802bed6:	2b01      	cmp	r3, #1
 802bed8:	d107      	bne.n	802beea <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 802beda:	687b      	ldr	r3, [r7, #4]
 802bedc:	2200      	movs	r2, #0
 802bede:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 802bee2:	6878      	ldr	r0, [r7, #4]
 802bee4:	f7ff fe20 	bl	802bb28 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bee8:	e014      	b.n	802bf14 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 802beea:	6878      	ldr	r0, [r7, #4]
 802beec:	f001 faaa 	bl	802d444 <USBH_LL_Start>
      break;
 802bef0:	e010      	b.n	802bf14 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 802bef2:	bf00      	nop
 802bef4:	e00e      	b.n	802bf14 <USBH_Process+0x3cc>
      break;
 802bef6:	bf00      	nop
 802bef8:	e00c      	b.n	802bf14 <USBH_Process+0x3cc>
      break;
 802befa:	bf00      	nop
 802befc:	e00a      	b.n	802bf14 <USBH_Process+0x3cc>
    break;
 802befe:	bf00      	nop
 802bf00:	e008      	b.n	802bf14 <USBH_Process+0x3cc>
      break;
 802bf02:	bf00      	nop
 802bf04:	e006      	b.n	802bf14 <USBH_Process+0x3cc>
      break;
 802bf06:	bf00      	nop
 802bf08:	e004      	b.n	802bf14 <USBH_Process+0x3cc>
      break;
 802bf0a:	bf00      	nop
 802bf0c:	e002      	b.n	802bf14 <USBH_Process+0x3cc>
      break;
 802bf0e:	bf00      	nop
 802bf10:	e000      	b.n	802bf14 <USBH_Process+0x3cc>
      break;
 802bf12:	bf00      	nop
  }
  return USBH_OK;
 802bf14:	2300      	movs	r3, #0
}
 802bf16:	4618      	mov	r0, r3
 802bf18:	3710      	adds	r7, #16
 802bf1a:	46bd      	mov	sp, r7
 802bf1c:	bd80      	pop	{r7, pc}
 802bf1e:	bf00      	nop

0802bf20 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 802bf20:	b580      	push	{r7, lr}
 802bf22:	b088      	sub	sp, #32
 802bf24:	af04      	add	r7, sp, #16
 802bf26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 802bf28:	2301      	movs	r3, #1
 802bf2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 802bf2c:	2301      	movs	r3, #1
 802bf2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 802bf30:	687b      	ldr	r3, [r7, #4]
 802bf32:	785b      	ldrb	r3, [r3, #1]
 802bf34:	2b07      	cmp	r3, #7
 802bf36:	f200 81c1 	bhi.w	802c2bc <USBH_HandleEnum+0x39c>
 802bf3a:	a201      	add	r2, pc, #4	; (adr r2, 802bf40 <USBH_HandleEnum+0x20>)
 802bf3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802bf40:	0802bf61 	.word	0x0802bf61
 802bf44:	0802c01f 	.word	0x0802c01f
 802bf48:	0802c089 	.word	0x0802c089
 802bf4c:	0802c117 	.word	0x0802c117
 802bf50:	0802c181 	.word	0x0802c181
 802bf54:	0802c1f1 	.word	0x0802c1f1
 802bf58:	0802c237 	.word	0x0802c237
 802bf5c:	0802c27d 	.word	0x0802c27d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 802bf60:	2108      	movs	r1, #8
 802bf62:	6878      	ldr	r0, [r7, #4]
 802bf64:	f000 fa50 	bl	802c408 <USBH_Get_DevDesc>
 802bf68:	4603      	mov	r3, r0
 802bf6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802bf6c:	7bbb      	ldrb	r3, [r7, #14]
 802bf6e:	2b00      	cmp	r3, #0
 802bf70:	d130      	bne.n	802bfd4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 802bf72:	687b      	ldr	r3, [r7, #4]
 802bf74:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 802bf78:	687b      	ldr	r3, [r7, #4]
 802bf7a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 802bf7c:	687b      	ldr	r3, [r7, #4]
 802bf7e:	2201      	movs	r2, #1
 802bf80:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802bf82:	687b      	ldr	r3, [r7, #4]
 802bf84:	7919      	ldrb	r1, [r3, #4]
 802bf86:	687b      	ldr	r3, [r7, #4]
 802bf88:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bf8c:	687b      	ldr	r3, [r7, #4]
 802bf8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802bf92:	687a      	ldr	r2, [r7, #4]
 802bf94:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802bf96:	b292      	uxth	r2, r2
 802bf98:	9202      	str	r2, [sp, #8]
 802bf9a:	2200      	movs	r2, #0
 802bf9c:	9201      	str	r2, [sp, #4]
 802bf9e:	9300      	str	r3, [sp, #0]
 802bfa0:	4603      	mov	r3, r0
 802bfa2:	2280      	movs	r2, #128	; 0x80
 802bfa4:	6878      	ldr	r0, [r7, #4]
 802bfa6:	f001 f865 	bl	802d074 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802bfaa:	687b      	ldr	r3, [r7, #4]
 802bfac:	7959      	ldrb	r1, [r3, #5]
 802bfae:	687b      	ldr	r3, [r7, #4]
 802bfb0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bfb4:	687b      	ldr	r3, [r7, #4]
 802bfb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802bfba:	687a      	ldr	r2, [r7, #4]
 802bfbc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802bfbe:	b292      	uxth	r2, r2
 802bfc0:	9202      	str	r2, [sp, #8]
 802bfc2:	2200      	movs	r2, #0
 802bfc4:	9201      	str	r2, [sp, #4]
 802bfc6:	9300      	str	r3, [sp, #0]
 802bfc8:	4603      	mov	r3, r0
 802bfca:	2200      	movs	r2, #0
 802bfcc:	6878      	ldr	r0, [r7, #4]
 802bfce:	f001 f851 	bl	802d074 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802bfd2:	e175      	b.n	802c2c0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bfd4:	7bbb      	ldrb	r3, [r7, #14]
 802bfd6:	2b03      	cmp	r3, #3
 802bfd8:	f040 8172 	bne.w	802c2c0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 802bfdc:	687b      	ldr	r3, [r7, #4]
 802bfde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bfe2:	3301      	adds	r3, #1
 802bfe4:	b2da      	uxtb	r2, r3
 802bfe6:	687b      	ldr	r3, [r7, #4]
 802bfe8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802bfec:	687b      	ldr	r3, [r7, #4]
 802bfee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bff2:	2b03      	cmp	r3, #3
 802bff4:	d903      	bls.n	802bffe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 802bff6:	687b      	ldr	r3, [r7, #4]
 802bff8:	220d      	movs	r2, #13
 802bffa:	701a      	strb	r2, [r3, #0]
      break;
 802bffc:	e160      	b.n	802c2c0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802bffe:	687b      	ldr	r3, [r7, #4]
 802c000:	795b      	ldrb	r3, [r3, #5]
 802c002:	4619      	mov	r1, r3
 802c004:	6878      	ldr	r0, [r7, #4]
 802c006:	f001 f885 	bl	802d114 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c00a:	687b      	ldr	r3, [r7, #4]
 802c00c:	791b      	ldrb	r3, [r3, #4]
 802c00e:	4619      	mov	r1, r3
 802c010:	6878      	ldr	r0, [r7, #4]
 802c012:	f001 f87f 	bl	802d114 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 802c016:	687b      	ldr	r3, [r7, #4]
 802c018:	2200      	movs	r2, #0
 802c01a:	701a      	strb	r2, [r3, #0]
      break;
 802c01c:	e150      	b.n	802c2c0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 802c01e:	2112      	movs	r1, #18
 802c020:	6878      	ldr	r0, [r7, #4]
 802c022:	f000 f9f1 	bl	802c408 <USBH_Get_DevDesc>
 802c026:	4603      	mov	r3, r0
 802c028:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c02a:	7bbb      	ldrb	r3, [r7, #14]
 802c02c:	2b00      	cmp	r3, #0
 802c02e:	d103      	bne.n	802c038 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 802c030:	687b      	ldr	r3, [r7, #4]
 802c032:	2202      	movs	r2, #2
 802c034:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802c036:	e145      	b.n	802c2c4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c038:	7bbb      	ldrb	r3, [r7, #14]
 802c03a:	2b03      	cmp	r3, #3
 802c03c:	f040 8142 	bne.w	802c2c4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 802c040:	687b      	ldr	r3, [r7, #4]
 802c042:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c046:	3301      	adds	r3, #1
 802c048:	b2da      	uxtb	r2, r3
 802c04a:	687b      	ldr	r3, [r7, #4]
 802c04c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c050:	687b      	ldr	r3, [r7, #4]
 802c052:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c056:	2b03      	cmp	r3, #3
 802c058:	d903      	bls.n	802c062 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 802c05a:	687b      	ldr	r3, [r7, #4]
 802c05c:	220d      	movs	r2, #13
 802c05e:	701a      	strb	r2, [r3, #0]
      break;
 802c060:	e130      	b.n	802c2c4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c062:	687b      	ldr	r3, [r7, #4]
 802c064:	795b      	ldrb	r3, [r3, #5]
 802c066:	4619      	mov	r1, r3
 802c068:	6878      	ldr	r0, [r7, #4]
 802c06a:	f001 f853 	bl	802d114 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c06e:	687b      	ldr	r3, [r7, #4]
 802c070:	791b      	ldrb	r3, [r3, #4]
 802c072:	4619      	mov	r1, r3
 802c074:	6878      	ldr	r0, [r7, #4]
 802c076:	f001 f84d 	bl	802d114 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802c07a:	687b      	ldr	r3, [r7, #4]
 802c07c:	2200      	movs	r2, #0
 802c07e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802c080:	687b      	ldr	r3, [r7, #4]
 802c082:	2200      	movs	r2, #0
 802c084:	701a      	strb	r2, [r3, #0]
      break;
 802c086:	e11d      	b.n	802c2c4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 802c088:	2101      	movs	r1, #1
 802c08a:	6878      	ldr	r0, [r7, #4]
 802c08c:	f000 fa68 	bl	802c560 <USBH_SetAddress>
 802c090:	4603      	mov	r3, r0
 802c092:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c094:	7bbb      	ldrb	r3, [r7, #14]
 802c096:	2b00      	cmp	r3, #0
 802c098:	d132      	bne.n	802c100 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 802c09a:	2002      	movs	r0, #2
 802c09c:	f001 fb36 	bl	802d70c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 802c0a0:	687b      	ldr	r3, [r7, #4]
 802c0a2:	2201      	movs	r2, #1
 802c0a4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 802c0a8:	687b      	ldr	r3, [r7, #4]
 802c0aa:	2203      	movs	r2, #3
 802c0ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802c0ae:	687b      	ldr	r3, [r7, #4]
 802c0b0:	7919      	ldrb	r1, [r3, #4]
 802c0b2:	687b      	ldr	r3, [r7, #4]
 802c0b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c0b8:	687b      	ldr	r3, [r7, #4]
 802c0ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c0be:	687a      	ldr	r2, [r7, #4]
 802c0c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802c0c2:	b292      	uxth	r2, r2
 802c0c4:	9202      	str	r2, [sp, #8]
 802c0c6:	2200      	movs	r2, #0
 802c0c8:	9201      	str	r2, [sp, #4]
 802c0ca:	9300      	str	r3, [sp, #0]
 802c0cc:	4603      	mov	r3, r0
 802c0ce:	2280      	movs	r2, #128	; 0x80
 802c0d0:	6878      	ldr	r0, [r7, #4]
 802c0d2:	f000 ffcf 	bl	802d074 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c0d6:	687b      	ldr	r3, [r7, #4]
 802c0d8:	7959      	ldrb	r1, [r3, #5]
 802c0da:	687b      	ldr	r3, [r7, #4]
 802c0dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c0e0:	687b      	ldr	r3, [r7, #4]
 802c0e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c0e6:	687a      	ldr	r2, [r7, #4]
 802c0e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c0ea:	b292      	uxth	r2, r2
 802c0ec:	9202      	str	r2, [sp, #8]
 802c0ee:	2200      	movs	r2, #0
 802c0f0:	9201      	str	r2, [sp, #4]
 802c0f2:	9300      	str	r3, [sp, #0]
 802c0f4:	4603      	mov	r3, r0
 802c0f6:	2200      	movs	r2, #0
 802c0f8:	6878      	ldr	r0, [r7, #4]
 802c0fa:	f000 ffbb 	bl	802d074 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802c0fe:	e0e3      	b.n	802c2c8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c100:	7bbb      	ldrb	r3, [r7, #14]
 802c102:	2b03      	cmp	r3, #3
 802c104:	f040 80e0 	bne.w	802c2c8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 802c108:	687b      	ldr	r3, [r7, #4]
 802c10a:	220d      	movs	r2, #13
 802c10c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 802c10e:	687b      	ldr	r3, [r7, #4]
 802c110:	2200      	movs	r2, #0
 802c112:	705a      	strb	r2, [r3, #1]
      break;
 802c114:	e0d8      	b.n	802c2c8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 802c116:	2109      	movs	r1, #9
 802c118:	6878      	ldr	r0, [r7, #4]
 802c11a:	f000 f99d 	bl	802c458 <USBH_Get_CfgDesc>
 802c11e:	4603      	mov	r3, r0
 802c120:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c122:	7bbb      	ldrb	r3, [r7, #14]
 802c124:	2b00      	cmp	r3, #0
 802c126:	d103      	bne.n	802c130 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 802c128:	687b      	ldr	r3, [r7, #4]
 802c12a:	2204      	movs	r2, #4
 802c12c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802c12e:	e0cd      	b.n	802c2cc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c130:	7bbb      	ldrb	r3, [r7, #14]
 802c132:	2b03      	cmp	r3, #3
 802c134:	f040 80ca 	bne.w	802c2cc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 802c138:	687b      	ldr	r3, [r7, #4]
 802c13a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c13e:	3301      	adds	r3, #1
 802c140:	b2da      	uxtb	r2, r3
 802c142:	687b      	ldr	r3, [r7, #4]
 802c144:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c148:	687b      	ldr	r3, [r7, #4]
 802c14a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c14e:	2b03      	cmp	r3, #3
 802c150:	d903      	bls.n	802c15a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 802c152:	687b      	ldr	r3, [r7, #4]
 802c154:	220d      	movs	r2, #13
 802c156:	701a      	strb	r2, [r3, #0]
      break;
 802c158:	e0b8      	b.n	802c2cc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c15a:	687b      	ldr	r3, [r7, #4]
 802c15c:	795b      	ldrb	r3, [r3, #5]
 802c15e:	4619      	mov	r1, r3
 802c160:	6878      	ldr	r0, [r7, #4]
 802c162:	f000 ffd7 	bl	802d114 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c166:	687b      	ldr	r3, [r7, #4]
 802c168:	791b      	ldrb	r3, [r3, #4]
 802c16a:	4619      	mov	r1, r3
 802c16c:	6878      	ldr	r0, [r7, #4]
 802c16e:	f000 ffd1 	bl	802d114 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802c172:	687b      	ldr	r3, [r7, #4]
 802c174:	2200      	movs	r2, #0
 802c176:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802c178:	687b      	ldr	r3, [r7, #4]
 802c17a:	2200      	movs	r2, #0
 802c17c:	701a      	strb	r2, [r3, #0]
      break;
 802c17e:	e0a5      	b.n	802c2cc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 802c180:	687b      	ldr	r3, [r7, #4]
 802c182:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 802c186:	4619      	mov	r1, r3
 802c188:	6878      	ldr	r0, [r7, #4]
 802c18a:	f000 f965 	bl	802c458 <USBH_Get_CfgDesc>
 802c18e:	4603      	mov	r3, r0
 802c190:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c192:	7bbb      	ldrb	r3, [r7, #14]
 802c194:	2b00      	cmp	r3, #0
 802c196:	d103      	bne.n	802c1a0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 802c198:	687b      	ldr	r3, [r7, #4]
 802c19a:	2205      	movs	r2, #5
 802c19c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802c19e:	e097      	b.n	802c2d0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c1a0:	7bbb      	ldrb	r3, [r7, #14]
 802c1a2:	2b03      	cmp	r3, #3
 802c1a4:	f040 8094 	bne.w	802c2d0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 802c1a8:	687b      	ldr	r3, [r7, #4]
 802c1aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c1ae:	3301      	adds	r3, #1
 802c1b0:	b2da      	uxtb	r2, r3
 802c1b2:	687b      	ldr	r3, [r7, #4]
 802c1b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c1b8:	687b      	ldr	r3, [r7, #4]
 802c1ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c1be:	2b03      	cmp	r3, #3
 802c1c0:	d903      	bls.n	802c1ca <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 802c1c2:	687b      	ldr	r3, [r7, #4]
 802c1c4:	220d      	movs	r2, #13
 802c1c6:	701a      	strb	r2, [r3, #0]
      break;
 802c1c8:	e082      	b.n	802c2d0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c1ca:	687b      	ldr	r3, [r7, #4]
 802c1cc:	795b      	ldrb	r3, [r3, #5]
 802c1ce:	4619      	mov	r1, r3
 802c1d0:	6878      	ldr	r0, [r7, #4]
 802c1d2:	f000 ff9f 	bl	802d114 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c1d6:	687b      	ldr	r3, [r7, #4]
 802c1d8:	791b      	ldrb	r3, [r3, #4]
 802c1da:	4619      	mov	r1, r3
 802c1dc:	6878      	ldr	r0, [r7, #4]
 802c1de:	f000 ff99 	bl	802d114 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802c1e2:	687b      	ldr	r3, [r7, #4]
 802c1e4:	2200      	movs	r2, #0
 802c1e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802c1e8:	687b      	ldr	r3, [r7, #4]
 802c1ea:	2200      	movs	r2, #0
 802c1ec:	701a      	strb	r2, [r3, #0]
      break;
 802c1ee:	e06f      	b.n	802c2d0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 802c1f0:	687b      	ldr	r3, [r7, #4]
 802c1f2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 802c1f6:	2b00      	cmp	r3, #0
 802c1f8:	d019      	beq.n	802c22e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802c1fa:	687b      	ldr	r3, [r7, #4]
 802c1fc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 802c200:	687b      	ldr	r3, [r7, #4]
 802c202:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802c206:	23ff      	movs	r3, #255	; 0xff
 802c208:	6878      	ldr	r0, [r7, #4]
 802c20a:	f000 f949 	bl	802c4a0 <USBH_Get_StringDesc>
 802c20e:	4603      	mov	r3, r0
 802c210:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802c212:	7bbb      	ldrb	r3, [r7, #14]
 802c214:	2b00      	cmp	r3, #0
 802c216:	d103      	bne.n	802c220 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802c218:	687b      	ldr	r3, [r7, #4]
 802c21a:	2206      	movs	r2, #6
 802c21c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802c21e:	e059      	b.n	802c2d4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c220:	7bbb      	ldrb	r3, [r7, #14]
 802c222:	2b03      	cmp	r3, #3
 802c224:	d156      	bne.n	802c2d4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802c226:	687b      	ldr	r3, [r7, #4]
 802c228:	2206      	movs	r2, #6
 802c22a:	705a      	strb	r2, [r3, #1]
      break;
 802c22c:	e052      	b.n	802c2d4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802c22e:	687b      	ldr	r3, [r7, #4]
 802c230:	2206      	movs	r2, #6
 802c232:	705a      	strb	r2, [r3, #1]
      break;
 802c234:	e04e      	b.n	802c2d4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 802c236:	687b      	ldr	r3, [r7, #4]
 802c238:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 802c23c:	2b00      	cmp	r3, #0
 802c23e:	d019      	beq.n	802c274 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802c240:	687b      	ldr	r3, [r7, #4]
 802c242:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 802c246:	687b      	ldr	r3, [r7, #4]
 802c248:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802c24c:	23ff      	movs	r3, #255	; 0xff
 802c24e:	6878      	ldr	r0, [r7, #4]
 802c250:	f000 f926 	bl	802c4a0 <USBH_Get_StringDesc>
 802c254:	4603      	mov	r3, r0
 802c256:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802c258:	7bbb      	ldrb	r3, [r7, #14]
 802c25a:	2b00      	cmp	r3, #0
 802c25c:	d103      	bne.n	802c266 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802c25e:	687b      	ldr	r3, [r7, #4]
 802c260:	2207      	movs	r2, #7
 802c262:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802c264:	e038      	b.n	802c2d8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c266:	7bbb      	ldrb	r3, [r7, #14]
 802c268:	2b03      	cmp	r3, #3
 802c26a:	d135      	bne.n	802c2d8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802c26c:	687b      	ldr	r3, [r7, #4]
 802c26e:	2207      	movs	r2, #7
 802c270:	705a      	strb	r2, [r3, #1]
      break;
 802c272:	e031      	b.n	802c2d8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802c274:	687b      	ldr	r3, [r7, #4]
 802c276:	2207      	movs	r2, #7
 802c278:	705a      	strb	r2, [r3, #1]
      break;
 802c27a:	e02d      	b.n	802c2d8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 802c27c:	687b      	ldr	r3, [r7, #4]
 802c27e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 802c282:	2b00      	cmp	r3, #0
 802c284:	d017      	beq.n	802c2b6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802c286:	687b      	ldr	r3, [r7, #4]
 802c288:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 802c28c:	687b      	ldr	r3, [r7, #4]
 802c28e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802c292:	23ff      	movs	r3, #255	; 0xff
 802c294:	6878      	ldr	r0, [r7, #4]
 802c296:	f000 f903 	bl	802c4a0 <USBH_Get_StringDesc>
 802c29a:	4603      	mov	r3, r0
 802c29c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802c29e:	7bbb      	ldrb	r3, [r7, #14]
 802c2a0:	2b00      	cmp	r3, #0
 802c2a2:	d102      	bne.n	802c2aa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 802c2a4:	2300      	movs	r3, #0
 802c2a6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 802c2a8:	e018      	b.n	802c2dc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c2aa:	7bbb      	ldrb	r3, [r7, #14]
 802c2ac:	2b03      	cmp	r3, #3
 802c2ae:	d115      	bne.n	802c2dc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 802c2b0:	2300      	movs	r3, #0
 802c2b2:	73fb      	strb	r3, [r7, #15]
      break;
 802c2b4:	e012      	b.n	802c2dc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 802c2b6:	2300      	movs	r3, #0
 802c2b8:	73fb      	strb	r3, [r7, #15]
      break;
 802c2ba:	e00f      	b.n	802c2dc <USBH_HandleEnum+0x3bc>

    default:
      break;
 802c2bc:	bf00      	nop
 802c2be:	e00e      	b.n	802c2de <USBH_HandleEnum+0x3be>
      break;
 802c2c0:	bf00      	nop
 802c2c2:	e00c      	b.n	802c2de <USBH_HandleEnum+0x3be>
      break;
 802c2c4:	bf00      	nop
 802c2c6:	e00a      	b.n	802c2de <USBH_HandleEnum+0x3be>
      break;
 802c2c8:	bf00      	nop
 802c2ca:	e008      	b.n	802c2de <USBH_HandleEnum+0x3be>
      break;
 802c2cc:	bf00      	nop
 802c2ce:	e006      	b.n	802c2de <USBH_HandleEnum+0x3be>
      break;
 802c2d0:	bf00      	nop
 802c2d2:	e004      	b.n	802c2de <USBH_HandleEnum+0x3be>
      break;
 802c2d4:	bf00      	nop
 802c2d6:	e002      	b.n	802c2de <USBH_HandleEnum+0x3be>
      break;
 802c2d8:	bf00      	nop
 802c2da:	e000      	b.n	802c2de <USBH_HandleEnum+0x3be>
      break;
 802c2dc:	bf00      	nop
  }
  return Status;
 802c2de:	7bfb      	ldrb	r3, [r7, #15]
}
 802c2e0:	4618      	mov	r0, r3
 802c2e2:	3710      	adds	r7, #16
 802c2e4:	46bd      	mov	sp, r7
 802c2e6:	bd80      	pop	{r7, pc}

0802c2e8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 802c2e8:	b480      	push	{r7}
 802c2ea:	b083      	sub	sp, #12
 802c2ec:	af00      	add	r7, sp, #0
 802c2ee:	6078      	str	r0, [r7, #4]
 802c2f0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 802c2f2:	687b      	ldr	r3, [r7, #4]
 802c2f4:	683a      	ldr	r2, [r7, #0]
 802c2f6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 802c2fa:	bf00      	nop
 802c2fc:	370c      	adds	r7, #12
 802c2fe:	46bd      	mov	sp, r7
 802c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c304:	4770      	bx	lr

0802c306 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 802c306:	b580      	push	{r7, lr}
 802c308:	b082      	sub	sp, #8
 802c30a:	af00      	add	r7, sp, #0
 802c30c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 802c30e:	687b      	ldr	r3, [r7, #4]
 802c310:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802c314:	1c5a      	adds	r2, r3, #1
 802c316:	687b      	ldr	r3, [r7, #4]
 802c318:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 802c31c:	6878      	ldr	r0, [r7, #4]
 802c31e:	f000 f804 	bl	802c32a <USBH_HandleSof>
}
 802c322:	bf00      	nop
 802c324:	3708      	adds	r7, #8
 802c326:	46bd      	mov	sp, r7
 802c328:	bd80      	pop	{r7, pc}

0802c32a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 802c32a:	b580      	push	{r7, lr}
 802c32c:	b082      	sub	sp, #8
 802c32e:	af00      	add	r7, sp, #0
 802c330:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 802c332:	687b      	ldr	r3, [r7, #4]
 802c334:	781b      	ldrb	r3, [r3, #0]
 802c336:	b2db      	uxtb	r3, r3
 802c338:	2b0b      	cmp	r3, #11
 802c33a:	d10a      	bne.n	802c352 <USBH_HandleSof+0x28>
 802c33c:	687b      	ldr	r3, [r7, #4]
 802c33e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c342:	2b00      	cmp	r3, #0
 802c344:	d005      	beq.n	802c352 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 802c346:	687b      	ldr	r3, [r7, #4]
 802c348:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c34c:	699b      	ldr	r3, [r3, #24]
 802c34e:	6878      	ldr	r0, [r7, #4]
 802c350:	4798      	blx	r3
  }
}
 802c352:	bf00      	nop
 802c354:	3708      	adds	r7, #8
 802c356:	46bd      	mov	sp, r7
 802c358:	bd80      	pop	{r7, pc}

0802c35a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 802c35a:	b480      	push	{r7}
 802c35c:	b083      	sub	sp, #12
 802c35e:	af00      	add	r7, sp, #0
 802c360:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 802c362:	687b      	ldr	r3, [r7, #4]
 802c364:	2201      	movs	r2, #1
 802c366:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 802c36a:	bf00      	nop
}
 802c36c:	370c      	adds	r7, #12
 802c36e:	46bd      	mov	sp, r7
 802c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c374:	4770      	bx	lr

0802c376 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 802c376:	b480      	push	{r7}
 802c378:	b083      	sub	sp, #12
 802c37a:	af00      	add	r7, sp, #0
 802c37c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 802c37e:	687b      	ldr	r3, [r7, #4]
 802c380:	2200      	movs	r2, #0
 802c382:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 802c386:	bf00      	nop
}
 802c388:	370c      	adds	r7, #12
 802c38a:	46bd      	mov	sp, r7
 802c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c390:	4770      	bx	lr

0802c392 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 802c392:	b480      	push	{r7}
 802c394:	b083      	sub	sp, #12
 802c396:	af00      	add	r7, sp, #0
 802c398:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 802c39a:	687b      	ldr	r3, [r7, #4]
 802c39c:	2201      	movs	r2, #1
 802c39e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802c3a2:	687b      	ldr	r3, [r7, #4]
 802c3a4:	2200      	movs	r2, #0
 802c3a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802c3aa:	687b      	ldr	r3, [r7, #4]
 802c3ac:	2200      	movs	r2, #0
 802c3ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802c3b2:	2300      	movs	r3, #0
}
 802c3b4:	4618      	mov	r0, r3
 802c3b6:	370c      	adds	r7, #12
 802c3b8:	46bd      	mov	sp, r7
 802c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c3be:	4770      	bx	lr

0802c3c0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 802c3c0:	b580      	push	{r7, lr}
 802c3c2:	b082      	sub	sp, #8
 802c3c4:	af00      	add	r7, sp, #0
 802c3c6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 802c3c8:	687b      	ldr	r3, [r7, #4]
 802c3ca:	2201      	movs	r2, #1
 802c3cc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 802c3d0:	687b      	ldr	r3, [r7, #4]
 802c3d2:	2200      	movs	r2, #0
 802c3d4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 802c3d8:	687b      	ldr	r3, [r7, #4]
 802c3da:	2200      	movs	r2, #0
 802c3dc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 802c3e0:	6878      	ldr	r0, [r7, #4]
 802c3e2:	f001 f84a 	bl	802d47a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c3e6:	687b      	ldr	r3, [r7, #4]
 802c3e8:	791b      	ldrb	r3, [r3, #4]
 802c3ea:	4619      	mov	r1, r3
 802c3ec:	6878      	ldr	r0, [r7, #4]
 802c3ee:	f000 fe91 	bl	802d114 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c3f2:	687b      	ldr	r3, [r7, #4]
 802c3f4:	795b      	ldrb	r3, [r3, #5]
 802c3f6:	4619      	mov	r1, r3
 802c3f8:	6878      	ldr	r0, [r7, #4]
 802c3fa:	f000 fe8b 	bl	802d114 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802c3fe:	2300      	movs	r3, #0
}
 802c400:	4618      	mov	r0, r3
 802c402:	3708      	adds	r7, #8
 802c404:	46bd      	mov	sp, r7
 802c406:	bd80      	pop	{r7, pc}

0802c408 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 802c408:	b580      	push	{r7, lr}
 802c40a:	b086      	sub	sp, #24
 802c40c:	af02      	add	r7, sp, #8
 802c40e:	6078      	str	r0, [r7, #4]
 802c410:	460b      	mov	r3, r1
 802c412:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 802c414:	687b      	ldr	r3, [r7, #4]
 802c416:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802c41a:	78fb      	ldrb	r3, [r7, #3]
 802c41c:	b29b      	uxth	r3, r3
 802c41e:	9300      	str	r3, [sp, #0]
 802c420:	4613      	mov	r3, r2
 802c422:	f44f 7280 	mov.w	r2, #256	; 0x100
 802c426:	2100      	movs	r1, #0
 802c428:	6878      	ldr	r0, [r7, #4]
 802c42a:	f000 f864 	bl	802c4f6 <USBH_GetDescriptor>
 802c42e:	4603      	mov	r3, r0
 802c430:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 802c432:	7bfb      	ldrb	r3, [r7, #15]
 802c434:	2b00      	cmp	r3, #0
 802c436:	d10a      	bne.n	802c44e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 802c438:	687b      	ldr	r3, [r7, #4]
 802c43a:	f203 3026 	addw	r0, r3, #806	; 0x326
 802c43e:	687b      	ldr	r3, [r7, #4]
 802c440:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802c444:	78fa      	ldrb	r2, [r7, #3]
 802c446:	b292      	uxth	r2, r2
 802c448:	4619      	mov	r1, r3
 802c44a:	f000 f918 	bl	802c67e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 802c44e:	7bfb      	ldrb	r3, [r7, #15]
}
 802c450:	4618      	mov	r0, r3
 802c452:	3710      	adds	r7, #16
 802c454:	46bd      	mov	sp, r7
 802c456:	bd80      	pop	{r7, pc}

0802c458 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 802c458:	b580      	push	{r7, lr}
 802c45a:	b086      	sub	sp, #24
 802c45c:	af02      	add	r7, sp, #8
 802c45e:	6078      	str	r0, [r7, #4]
 802c460:	460b      	mov	r3, r1
 802c462:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 802c464:	687b      	ldr	r3, [r7, #4]
 802c466:	331c      	adds	r3, #28
 802c468:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 802c46a:	887b      	ldrh	r3, [r7, #2]
 802c46c:	9300      	str	r3, [sp, #0]
 802c46e:	68bb      	ldr	r3, [r7, #8]
 802c470:	f44f 7200 	mov.w	r2, #512	; 0x200
 802c474:	2100      	movs	r1, #0
 802c476:	6878      	ldr	r0, [r7, #4]
 802c478:	f000 f83d 	bl	802c4f6 <USBH_GetDescriptor>
 802c47c:	4603      	mov	r3, r0
 802c47e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 802c480:	7bfb      	ldrb	r3, [r7, #15]
 802c482:	2b00      	cmp	r3, #0
 802c484:	d107      	bne.n	802c496 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 802c486:	887b      	ldrh	r3, [r7, #2]
 802c488:	461a      	mov	r2, r3
 802c48a:	68b9      	ldr	r1, [r7, #8]
 802c48c:	6878      	ldr	r0, [r7, #4]
 802c48e:	f000 f987 	bl	802c7a0 <USBH_ParseCfgDesc>
 802c492:	4603      	mov	r3, r0
 802c494:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802c496:	7bfb      	ldrb	r3, [r7, #15]
}
 802c498:	4618      	mov	r0, r3
 802c49a:	3710      	adds	r7, #16
 802c49c:	46bd      	mov	sp, r7
 802c49e:	bd80      	pop	{r7, pc}

0802c4a0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 802c4a0:	b580      	push	{r7, lr}
 802c4a2:	b088      	sub	sp, #32
 802c4a4:	af02      	add	r7, sp, #8
 802c4a6:	60f8      	str	r0, [r7, #12]
 802c4a8:	607a      	str	r2, [r7, #4]
 802c4aa:	461a      	mov	r2, r3
 802c4ac:	460b      	mov	r3, r1
 802c4ae:	72fb      	strb	r3, [r7, #11]
 802c4b0:	4613      	mov	r3, r2
 802c4b2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 802c4b4:	7afb      	ldrb	r3, [r7, #11]
 802c4b6:	b29b      	uxth	r3, r3
 802c4b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802c4bc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 802c4be:	68fb      	ldr	r3, [r7, #12]
 802c4c0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802c4c4:	893b      	ldrh	r3, [r7, #8]
 802c4c6:	9300      	str	r3, [sp, #0]
 802c4c8:	460b      	mov	r3, r1
 802c4ca:	2100      	movs	r1, #0
 802c4cc:	68f8      	ldr	r0, [r7, #12]
 802c4ce:	f000 f812 	bl	802c4f6 <USBH_GetDescriptor>
 802c4d2:	4603      	mov	r3, r0
 802c4d4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 802c4d6:	7dfb      	ldrb	r3, [r7, #23]
 802c4d8:	2b00      	cmp	r3, #0
 802c4da:	d107      	bne.n	802c4ec <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 802c4dc:	68fb      	ldr	r3, [r7, #12]
 802c4de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802c4e2:	893a      	ldrh	r2, [r7, #8]
 802c4e4:	6879      	ldr	r1, [r7, #4]
 802c4e6:	4618      	mov	r0, r3
 802c4e8:	f000 fb24 	bl	802cb34 <USBH_ParseStringDesc>
  }

  return status;
 802c4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 802c4ee:	4618      	mov	r0, r3
 802c4f0:	3718      	adds	r7, #24
 802c4f2:	46bd      	mov	sp, r7
 802c4f4:	bd80      	pop	{r7, pc}

0802c4f6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 802c4f6:	b580      	push	{r7, lr}
 802c4f8:	b084      	sub	sp, #16
 802c4fa:	af00      	add	r7, sp, #0
 802c4fc:	60f8      	str	r0, [r7, #12]
 802c4fe:	607b      	str	r3, [r7, #4]
 802c500:	460b      	mov	r3, r1
 802c502:	72fb      	strb	r3, [r7, #11]
 802c504:	4613      	mov	r3, r2
 802c506:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 802c508:	68fb      	ldr	r3, [r7, #12]
 802c50a:	789b      	ldrb	r3, [r3, #2]
 802c50c:	2b01      	cmp	r3, #1
 802c50e:	d11c      	bne.n	802c54a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 802c510:	7afb      	ldrb	r3, [r7, #11]
 802c512:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802c516:	b2da      	uxtb	r2, r3
 802c518:	68fb      	ldr	r3, [r7, #12]
 802c51a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 802c51c:	68fb      	ldr	r3, [r7, #12]
 802c51e:	2206      	movs	r2, #6
 802c520:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 802c522:	68fb      	ldr	r3, [r7, #12]
 802c524:	893a      	ldrh	r2, [r7, #8]
 802c526:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 802c528:	893b      	ldrh	r3, [r7, #8]
 802c52a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802c52e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802c532:	d104      	bne.n	802c53e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 802c534:	68fb      	ldr	r3, [r7, #12]
 802c536:	f240 4209 	movw	r2, #1033	; 0x409
 802c53a:	829a      	strh	r2, [r3, #20]
 802c53c:	e002      	b.n	802c544 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 802c53e:	68fb      	ldr	r3, [r7, #12]
 802c540:	2200      	movs	r2, #0
 802c542:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 802c544:	68fb      	ldr	r3, [r7, #12]
 802c546:	8b3a      	ldrh	r2, [r7, #24]
 802c548:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 802c54a:	8b3b      	ldrh	r3, [r7, #24]
 802c54c:	461a      	mov	r2, r3
 802c54e:	6879      	ldr	r1, [r7, #4]
 802c550:	68f8      	ldr	r0, [r7, #12]
 802c552:	f000 fb3d 	bl	802cbd0 <USBH_CtlReq>
 802c556:	4603      	mov	r3, r0
}
 802c558:	4618      	mov	r0, r3
 802c55a:	3710      	adds	r7, #16
 802c55c:	46bd      	mov	sp, r7
 802c55e:	bd80      	pop	{r7, pc}

0802c560 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 802c560:	b580      	push	{r7, lr}
 802c562:	b082      	sub	sp, #8
 802c564:	af00      	add	r7, sp, #0
 802c566:	6078      	str	r0, [r7, #4]
 802c568:	460b      	mov	r3, r1
 802c56a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802c56c:	687b      	ldr	r3, [r7, #4]
 802c56e:	789b      	ldrb	r3, [r3, #2]
 802c570:	2b01      	cmp	r3, #1
 802c572:	d10f      	bne.n	802c594 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 802c574:	687b      	ldr	r3, [r7, #4]
 802c576:	2200      	movs	r2, #0
 802c578:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 802c57a:	687b      	ldr	r3, [r7, #4]
 802c57c:	2205      	movs	r2, #5
 802c57e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 802c580:	78fb      	ldrb	r3, [r7, #3]
 802c582:	b29a      	uxth	r2, r3
 802c584:	687b      	ldr	r3, [r7, #4]
 802c586:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802c588:	687b      	ldr	r3, [r7, #4]
 802c58a:	2200      	movs	r2, #0
 802c58c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c58e:	687b      	ldr	r3, [r7, #4]
 802c590:	2200      	movs	r2, #0
 802c592:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802c594:	2200      	movs	r2, #0
 802c596:	2100      	movs	r1, #0
 802c598:	6878      	ldr	r0, [r7, #4]
 802c59a:	f000 fb19 	bl	802cbd0 <USBH_CtlReq>
 802c59e:	4603      	mov	r3, r0
}
 802c5a0:	4618      	mov	r0, r3
 802c5a2:	3708      	adds	r7, #8
 802c5a4:	46bd      	mov	sp, r7
 802c5a6:	bd80      	pop	{r7, pc}

0802c5a8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 802c5a8:	b580      	push	{r7, lr}
 802c5aa:	b082      	sub	sp, #8
 802c5ac:	af00      	add	r7, sp, #0
 802c5ae:	6078      	str	r0, [r7, #4]
 802c5b0:	460b      	mov	r3, r1
 802c5b2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 802c5b4:	687b      	ldr	r3, [r7, #4]
 802c5b6:	789b      	ldrb	r3, [r3, #2]
 802c5b8:	2b01      	cmp	r3, #1
 802c5ba:	d10e      	bne.n	802c5da <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802c5bc:	687b      	ldr	r3, [r7, #4]
 802c5be:	2200      	movs	r2, #0
 802c5c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 802c5c2:	687b      	ldr	r3, [r7, #4]
 802c5c4:	2209      	movs	r2, #9
 802c5c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 802c5c8:	687b      	ldr	r3, [r7, #4]
 802c5ca:	887a      	ldrh	r2, [r7, #2]
 802c5cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802c5ce:	687b      	ldr	r3, [r7, #4]
 802c5d0:	2200      	movs	r2, #0
 802c5d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c5d4:	687b      	ldr	r3, [r7, #4]
 802c5d6:	2200      	movs	r2, #0
 802c5d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802c5da:	2200      	movs	r2, #0
 802c5dc:	2100      	movs	r1, #0
 802c5de:	6878      	ldr	r0, [r7, #4]
 802c5e0:	f000 faf6 	bl	802cbd0 <USBH_CtlReq>
 802c5e4:	4603      	mov	r3, r0
}
 802c5e6:	4618      	mov	r0, r3
 802c5e8:	3708      	adds	r7, #8
 802c5ea:	46bd      	mov	sp, r7
 802c5ec:	bd80      	pop	{r7, pc}

0802c5ee <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 802c5ee:	b580      	push	{r7, lr}
 802c5f0:	b082      	sub	sp, #8
 802c5f2:	af00      	add	r7, sp, #0
 802c5f4:	6078      	str	r0, [r7, #4]
 802c5f6:	460b      	mov	r3, r1
 802c5f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802c5fa:	687b      	ldr	r3, [r7, #4]
 802c5fc:	789b      	ldrb	r3, [r3, #2]
 802c5fe:	2b01      	cmp	r3, #1
 802c600:	d10f      	bne.n	802c622 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802c602:	687b      	ldr	r3, [r7, #4]
 802c604:	2200      	movs	r2, #0
 802c606:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 802c608:	687b      	ldr	r3, [r7, #4]
 802c60a:	2203      	movs	r2, #3
 802c60c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 802c60e:	78fb      	ldrb	r3, [r7, #3]
 802c610:	b29a      	uxth	r2, r3
 802c612:	687b      	ldr	r3, [r7, #4]
 802c614:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802c616:	687b      	ldr	r3, [r7, #4]
 802c618:	2200      	movs	r2, #0
 802c61a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c61c:	687b      	ldr	r3, [r7, #4]
 802c61e:	2200      	movs	r2, #0
 802c620:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802c622:	2200      	movs	r2, #0
 802c624:	2100      	movs	r1, #0
 802c626:	6878      	ldr	r0, [r7, #4]
 802c628:	f000 fad2 	bl	802cbd0 <USBH_CtlReq>
 802c62c:	4603      	mov	r3, r0
}
 802c62e:	4618      	mov	r0, r3
 802c630:	3708      	adds	r7, #8
 802c632:	46bd      	mov	sp, r7
 802c634:	bd80      	pop	{r7, pc}

0802c636 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 802c636:	b580      	push	{r7, lr}
 802c638:	b082      	sub	sp, #8
 802c63a:	af00      	add	r7, sp, #0
 802c63c:	6078      	str	r0, [r7, #4]
 802c63e:	460b      	mov	r3, r1
 802c640:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802c642:	687b      	ldr	r3, [r7, #4]
 802c644:	789b      	ldrb	r3, [r3, #2]
 802c646:	2b01      	cmp	r3, #1
 802c648:	d10f      	bne.n	802c66a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 802c64a:	687b      	ldr	r3, [r7, #4]
 802c64c:	2202      	movs	r2, #2
 802c64e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 802c650:	687b      	ldr	r3, [r7, #4]
 802c652:	2201      	movs	r2, #1
 802c654:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 802c656:	687b      	ldr	r3, [r7, #4]
 802c658:	2200      	movs	r2, #0
 802c65a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 802c65c:	78fb      	ldrb	r3, [r7, #3]
 802c65e:	b29a      	uxth	r2, r3
 802c660:	687b      	ldr	r3, [r7, #4]
 802c662:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c664:	687b      	ldr	r3, [r7, #4]
 802c666:	2200      	movs	r2, #0
 802c668:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 802c66a:	2200      	movs	r2, #0
 802c66c:	2100      	movs	r1, #0
 802c66e:	6878      	ldr	r0, [r7, #4]
 802c670:	f000 faae 	bl	802cbd0 <USBH_CtlReq>
 802c674:	4603      	mov	r3, r0
}
 802c676:	4618      	mov	r0, r3
 802c678:	3708      	adds	r7, #8
 802c67a:	46bd      	mov	sp, r7
 802c67c:	bd80      	pop	{r7, pc}

0802c67e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 802c67e:	b480      	push	{r7}
 802c680:	b085      	sub	sp, #20
 802c682:	af00      	add	r7, sp, #0
 802c684:	60f8      	str	r0, [r7, #12]
 802c686:	60b9      	str	r1, [r7, #8]
 802c688:	4613      	mov	r3, r2
 802c68a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 802c68c:	68bb      	ldr	r3, [r7, #8]
 802c68e:	781a      	ldrb	r2, [r3, #0]
 802c690:	68fb      	ldr	r3, [r7, #12]
 802c692:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 802c694:	68bb      	ldr	r3, [r7, #8]
 802c696:	785a      	ldrb	r2, [r3, #1]
 802c698:	68fb      	ldr	r3, [r7, #12]
 802c69a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 802c69c:	68bb      	ldr	r3, [r7, #8]
 802c69e:	3302      	adds	r3, #2
 802c6a0:	781b      	ldrb	r3, [r3, #0]
 802c6a2:	b29a      	uxth	r2, r3
 802c6a4:	68bb      	ldr	r3, [r7, #8]
 802c6a6:	3303      	adds	r3, #3
 802c6a8:	781b      	ldrb	r3, [r3, #0]
 802c6aa:	b29b      	uxth	r3, r3
 802c6ac:	021b      	lsls	r3, r3, #8
 802c6ae:	b29b      	uxth	r3, r3
 802c6b0:	4313      	orrs	r3, r2
 802c6b2:	b29a      	uxth	r2, r3
 802c6b4:	68fb      	ldr	r3, [r7, #12]
 802c6b6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 802c6b8:	68bb      	ldr	r3, [r7, #8]
 802c6ba:	791a      	ldrb	r2, [r3, #4]
 802c6bc:	68fb      	ldr	r3, [r7, #12]
 802c6be:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 802c6c0:	68bb      	ldr	r3, [r7, #8]
 802c6c2:	795a      	ldrb	r2, [r3, #5]
 802c6c4:	68fb      	ldr	r3, [r7, #12]
 802c6c6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 802c6c8:	68bb      	ldr	r3, [r7, #8]
 802c6ca:	799a      	ldrb	r2, [r3, #6]
 802c6cc:	68fb      	ldr	r3, [r7, #12]
 802c6ce:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 802c6d0:	68bb      	ldr	r3, [r7, #8]
 802c6d2:	79da      	ldrb	r2, [r3, #7]
 802c6d4:	68fb      	ldr	r3, [r7, #12]
 802c6d6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 802c6d8:	68fb      	ldr	r3, [r7, #12]
 802c6da:	79db      	ldrb	r3, [r3, #7]
 802c6dc:	2b20      	cmp	r3, #32
 802c6de:	dc11      	bgt.n	802c704 <USBH_ParseDevDesc+0x86>
 802c6e0:	2b08      	cmp	r3, #8
 802c6e2:	db16      	blt.n	802c712 <USBH_ParseDevDesc+0x94>
 802c6e4:	3b08      	subs	r3, #8
 802c6e6:	2201      	movs	r2, #1
 802c6e8:	fa02 f303 	lsl.w	r3, r2, r3
 802c6ec:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 802c6f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802c6f4:	2b00      	cmp	r3, #0
 802c6f6:	bf14      	ite	ne
 802c6f8:	2301      	movne	r3, #1
 802c6fa:	2300      	moveq	r3, #0
 802c6fc:	b2db      	uxtb	r3, r3
 802c6fe:	2b00      	cmp	r3, #0
 802c700:	d102      	bne.n	802c708 <USBH_ParseDevDesc+0x8a>
 802c702:	e006      	b.n	802c712 <USBH_ParseDevDesc+0x94>
 802c704:	2b40      	cmp	r3, #64	; 0x40
 802c706:	d104      	bne.n	802c712 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 802c708:	68fb      	ldr	r3, [r7, #12]
 802c70a:	79da      	ldrb	r2, [r3, #7]
 802c70c:	68fb      	ldr	r3, [r7, #12]
 802c70e:	71da      	strb	r2, [r3, #7]
      break;
 802c710:	e003      	b.n	802c71a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 802c712:	68fb      	ldr	r3, [r7, #12]
 802c714:	2240      	movs	r2, #64	; 0x40
 802c716:	71da      	strb	r2, [r3, #7]
      break;
 802c718:	bf00      	nop
  }

  if (length > 8U)
 802c71a:	88fb      	ldrh	r3, [r7, #6]
 802c71c:	2b08      	cmp	r3, #8
 802c71e:	d939      	bls.n	802c794 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 802c720:	68bb      	ldr	r3, [r7, #8]
 802c722:	3308      	adds	r3, #8
 802c724:	781b      	ldrb	r3, [r3, #0]
 802c726:	b29a      	uxth	r2, r3
 802c728:	68bb      	ldr	r3, [r7, #8]
 802c72a:	3309      	adds	r3, #9
 802c72c:	781b      	ldrb	r3, [r3, #0]
 802c72e:	b29b      	uxth	r3, r3
 802c730:	021b      	lsls	r3, r3, #8
 802c732:	b29b      	uxth	r3, r3
 802c734:	4313      	orrs	r3, r2
 802c736:	b29a      	uxth	r2, r3
 802c738:	68fb      	ldr	r3, [r7, #12]
 802c73a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 802c73c:	68bb      	ldr	r3, [r7, #8]
 802c73e:	330a      	adds	r3, #10
 802c740:	781b      	ldrb	r3, [r3, #0]
 802c742:	b29a      	uxth	r2, r3
 802c744:	68bb      	ldr	r3, [r7, #8]
 802c746:	330b      	adds	r3, #11
 802c748:	781b      	ldrb	r3, [r3, #0]
 802c74a:	b29b      	uxth	r3, r3
 802c74c:	021b      	lsls	r3, r3, #8
 802c74e:	b29b      	uxth	r3, r3
 802c750:	4313      	orrs	r3, r2
 802c752:	b29a      	uxth	r2, r3
 802c754:	68fb      	ldr	r3, [r7, #12]
 802c756:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 802c758:	68bb      	ldr	r3, [r7, #8]
 802c75a:	330c      	adds	r3, #12
 802c75c:	781b      	ldrb	r3, [r3, #0]
 802c75e:	b29a      	uxth	r2, r3
 802c760:	68bb      	ldr	r3, [r7, #8]
 802c762:	330d      	adds	r3, #13
 802c764:	781b      	ldrb	r3, [r3, #0]
 802c766:	b29b      	uxth	r3, r3
 802c768:	021b      	lsls	r3, r3, #8
 802c76a:	b29b      	uxth	r3, r3
 802c76c:	4313      	orrs	r3, r2
 802c76e:	b29a      	uxth	r2, r3
 802c770:	68fb      	ldr	r3, [r7, #12]
 802c772:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 802c774:	68bb      	ldr	r3, [r7, #8]
 802c776:	7b9a      	ldrb	r2, [r3, #14]
 802c778:	68fb      	ldr	r3, [r7, #12]
 802c77a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 802c77c:	68bb      	ldr	r3, [r7, #8]
 802c77e:	7bda      	ldrb	r2, [r3, #15]
 802c780:	68fb      	ldr	r3, [r7, #12]
 802c782:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 802c784:	68bb      	ldr	r3, [r7, #8]
 802c786:	7c1a      	ldrb	r2, [r3, #16]
 802c788:	68fb      	ldr	r3, [r7, #12]
 802c78a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 802c78c:	68bb      	ldr	r3, [r7, #8]
 802c78e:	7c5a      	ldrb	r2, [r3, #17]
 802c790:	68fb      	ldr	r3, [r7, #12]
 802c792:	745a      	strb	r2, [r3, #17]
  }
}
 802c794:	bf00      	nop
 802c796:	3714      	adds	r7, #20
 802c798:	46bd      	mov	sp, r7
 802c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c79e:	4770      	bx	lr

0802c7a0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 802c7a0:	b580      	push	{r7, lr}
 802c7a2:	b08c      	sub	sp, #48	; 0x30
 802c7a4:	af00      	add	r7, sp, #0
 802c7a6:	60f8      	str	r0, [r7, #12]
 802c7a8:	60b9      	str	r1, [r7, #8]
 802c7aa:	4613      	mov	r3, r2
 802c7ac:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 802c7ae:	68fb      	ldr	r3, [r7, #12]
 802c7b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802c7b4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 802c7b6:	2300      	movs	r3, #0
 802c7b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 802c7bc:	68bb      	ldr	r3, [r7, #8]
 802c7be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 802c7c0:	2300      	movs	r3, #0
 802c7c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 802c7c6:	2300      	movs	r3, #0
 802c7c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 802c7cc:	68bb      	ldr	r3, [r7, #8]
 802c7ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 802c7d0:	68bb      	ldr	r3, [r7, #8]
 802c7d2:	781a      	ldrb	r2, [r3, #0]
 802c7d4:	6a3b      	ldr	r3, [r7, #32]
 802c7d6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 802c7d8:	68bb      	ldr	r3, [r7, #8]
 802c7da:	785a      	ldrb	r2, [r3, #1]
 802c7dc:	6a3b      	ldr	r3, [r7, #32]
 802c7de:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 802c7e0:	68bb      	ldr	r3, [r7, #8]
 802c7e2:	3302      	adds	r3, #2
 802c7e4:	781b      	ldrb	r3, [r3, #0]
 802c7e6:	b29a      	uxth	r2, r3
 802c7e8:	68bb      	ldr	r3, [r7, #8]
 802c7ea:	3303      	adds	r3, #3
 802c7ec:	781b      	ldrb	r3, [r3, #0]
 802c7ee:	b29b      	uxth	r3, r3
 802c7f0:	021b      	lsls	r3, r3, #8
 802c7f2:	b29b      	uxth	r3, r3
 802c7f4:	4313      	orrs	r3, r2
 802c7f6:	b29b      	uxth	r3, r3
 802c7f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802c7fc:	bf28      	it	cs
 802c7fe:	f44f 7380 	movcs.w	r3, #256	; 0x100
 802c802:	b29a      	uxth	r2, r3
 802c804:	6a3b      	ldr	r3, [r7, #32]
 802c806:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 802c808:	68bb      	ldr	r3, [r7, #8]
 802c80a:	791a      	ldrb	r2, [r3, #4]
 802c80c:	6a3b      	ldr	r3, [r7, #32]
 802c80e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 802c810:	68bb      	ldr	r3, [r7, #8]
 802c812:	795a      	ldrb	r2, [r3, #5]
 802c814:	6a3b      	ldr	r3, [r7, #32]
 802c816:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 802c818:	68bb      	ldr	r3, [r7, #8]
 802c81a:	799a      	ldrb	r2, [r3, #6]
 802c81c:	6a3b      	ldr	r3, [r7, #32]
 802c81e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 802c820:	68bb      	ldr	r3, [r7, #8]
 802c822:	79da      	ldrb	r2, [r3, #7]
 802c824:	6a3b      	ldr	r3, [r7, #32]
 802c826:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 802c828:	68bb      	ldr	r3, [r7, #8]
 802c82a:	7a1a      	ldrb	r2, [r3, #8]
 802c82c:	6a3b      	ldr	r3, [r7, #32]
 802c82e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 802c830:	6a3b      	ldr	r3, [r7, #32]
 802c832:	781b      	ldrb	r3, [r3, #0]
 802c834:	2b09      	cmp	r3, #9
 802c836:	d002      	beq.n	802c83e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 802c838:	6a3b      	ldr	r3, [r7, #32]
 802c83a:	2209      	movs	r2, #9
 802c83c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 802c83e:	88fb      	ldrh	r3, [r7, #6]
 802c840:	2b09      	cmp	r3, #9
 802c842:	f240 809d 	bls.w	802c980 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 802c846:	2309      	movs	r3, #9
 802c848:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 802c84a:	2300      	movs	r3, #0
 802c84c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802c84e:	e081      	b.n	802c954 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802c850:	f107 0316 	add.w	r3, r7, #22
 802c854:	4619      	mov	r1, r3
 802c856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c858:	f000 f99f 	bl	802cb9a <USBH_GetNextDesc>
 802c85c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 802c85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c860:	785b      	ldrb	r3, [r3, #1]
 802c862:	2b04      	cmp	r3, #4
 802c864:	d176      	bne.n	802c954 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 802c866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c868:	781b      	ldrb	r3, [r3, #0]
 802c86a:	2b09      	cmp	r3, #9
 802c86c:	d002      	beq.n	802c874 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 802c86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c870:	2209      	movs	r2, #9
 802c872:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 802c874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c878:	221a      	movs	r2, #26
 802c87a:	fb02 f303 	mul.w	r3, r2, r3
 802c87e:	3308      	adds	r3, #8
 802c880:	6a3a      	ldr	r2, [r7, #32]
 802c882:	4413      	add	r3, r2
 802c884:	3302      	adds	r3, #2
 802c886:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 802c888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802c88a:	69f8      	ldr	r0, [r7, #28]
 802c88c:	f000 f87e 	bl	802c98c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 802c890:	2300      	movs	r3, #0
 802c892:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 802c896:	2300      	movs	r3, #0
 802c898:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802c89a:	e043      	b.n	802c924 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802c89c:	f107 0316 	add.w	r3, r7, #22
 802c8a0:	4619      	mov	r1, r3
 802c8a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c8a4:	f000 f979 	bl	802cb9a <USBH_GetNextDesc>
 802c8a8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802c8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c8ac:	785b      	ldrb	r3, [r3, #1]
 802c8ae:	2b05      	cmp	r3, #5
 802c8b0:	d138      	bne.n	802c924 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 802c8b2:	69fb      	ldr	r3, [r7, #28]
 802c8b4:	795b      	ldrb	r3, [r3, #5]
 802c8b6:	2b01      	cmp	r3, #1
 802c8b8:	d10f      	bne.n	802c8da <USBH_ParseCfgDesc+0x13a>
 802c8ba:	69fb      	ldr	r3, [r7, #28]
 802c8bc:	799b      	ldrb	r3, [r3, #6]
 802c8be:	2b02      	cmp	r3, #2
 802c8c0:	d10b      	bne.n	802c8da <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802c8c2:	69fb      	ldr	r3, [r7, #28]
 802c8c4:	79db      	ldrb	r3, [r3, #7]
 802c8c6:	2b00      	cmp	r3, #0
 802c8c8:	d10f      	bne.n	802c8ea <USBH_ParseCfgDesc+0x14a>
 802c8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c8cc:	781b      	ldrb	r3, [r3, #0]
 802c8ce:	2b09      	cmp	r3, #9
 802c8d0:	d00b      	beq.n	802c8ea <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 802c8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c8d4:	2209      	movs	r2, #9
 802c8d6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802c8d8:	e007      	b.n	802c8ea <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 802c8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c8dc:	781b      	ldrb	r3, [r3, #0]
 802c8de:	2b07      	cmp	r3, #7
 802c8e0:	d004      	beq.n	802c8ec <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 802c8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c8e4:	2207      	movs	r2, #7
 802c8e6:	701a      	strb	r2, [r3, #0]
 802c8e8:	e000      	b.n	802c8ec <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802c8ea:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 802c8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c8f0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c8f4:	3201      	adds	r2, #1
 802c8f6:	00d2      	lsls	r2, r2, #3
 802c8f8:	211a      	movs	r1, #26
 802c8fa:	fb01 f303 	mul.w	r3, r1, r3
 802c8fe:	4413      	add	r3, r2
 802c900:	3308      	adds	r3, #8
 802c902:	6a3a      	ldr	r2, [r7, #32]
 802c904:	4413      	add	r3, r2
 802c906:	3304      	adds	r3, #4
 802c908:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 802c90a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802c90c:	69b9      	ldr	r1, [r7, #24]
 802c90e:	68f8      	ldr	r0, [r7, #12]
 802c910:	f000 f86b 	bl	802c9ea <USBH_ParseEPDesc>
 802c914:	4603      	mov	r3, r0
 802c916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 802c91a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c91e:	3301      	adds	r3, #1
 802c920:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802c924:	69fb      	ldr	r3, [r7, #28]
 802c926:	791b      	ldrb	r3, [r3, #4]
 802c928:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c92c:	429a      	cmp	r2, r3
 802c92e:	d204      	bcs.n	802c93a <USBH_ParseCfgDesc+0x19a>
 802c930:	6a3b      	ldr	r3, [r7, #32]
 802c932:	885a      	ldrh	r2, [r3, #2]
 802c934:	8afb      	ldrh	r3, [r7, #22]
 802c936:	429a      	cmp	r2, r3
 802c938:	d8b0      	bhi.n	802c89c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 802c93a:	69fb      	ldr	r3, [r7, #28]
 802c93c:	791b      	ldrb	r3, [r3, #4]
 802c93e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c942:	429a      	cmp	r2, r3
 802c944:	d201      	bcs.n	802c94a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 802c946:	2303      	movs	r3, #3
 802c948:	e01c      	b.n	802c984 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 802c94a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c94e:	3301      	adds	r3, #1
 802c950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802c954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c958:	2b01      	cmp	r3, #1
 802c95a:	d805      	bhi.n	802c968 <USBH_ParseCfgDesc+0x1c8>
 802c95c:	6a3b      	ldr	r3, [r7, #32]
 802c95e:	885a      	ldrh	r2, [r3, #2]
 802c960:	8afb      	ldrh	r3, [r7, #22]
 802c962:	429a      	cmp	r2, r3
 802c964:	f63f af74 	bhi.w	802c850 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 802c968:	6a3b      	ldr	r3, [r7, #32]
 802c96a:	791b      	ldrb	r3, [r3, #4]
 802c96c:	2b02      	cmp	r3, #2
 802c96e:	bf28      	it	cs
 802c970:	2302      	movcs	r3, #2
 802c972:	b2db      	uxtb	r3, r3
 802c974:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802c978:	429a      	cmp	r2, r3
 802c97a:	d201      	bcs.n	802c980 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 802c97c:	2303      	movs	r3, #3
 802c97e:	e001      	b.n	802c984 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 802c980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802c984:	4618      	mov	r0, r3
 802c986:	3730      	adds	r7, #48	; 0x30
 802c988:	46bd      	mov	sp, r7
 802c98a:	bd80      	pop	{r7, pc}

0802c98c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 802c98c:	b480      	push	{r7}
 802c98e:	b083      	sub	sp, #12
 802c990:	af00      	add	r7, sp, #0
 802c992:	6078      	str	r0, [r7, #4]
 802c994:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 802c996:	683b      	ldr	r3, [r7, #0]
 802c998:	781a      	ldrb	r2, [r3, #0]
 802c99a:	687b      	ldr	r3, [r7, #4]
 802c99c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 802c99e:	683b      	ldr	r3, [r7, #0]
 802c9a0:	785a      	ldrb	r2, [r3, #1]
 802c9a2:	687b      	ldr	r3, [r7, #4]
 802c9a4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 802c9a6:	683b      	ldr	r3, [r7, #0]
 802c9a8:	789a      	ldrb	r2, [r3, #2]
 802c9aa:	687b      	ldr	r3, [r7, #4]
 802c9ac:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 802c9ae:	683b      	ldr	r3, [r7, #0]
 802c9b0:	78da      	ldrb	r2, [r3, #3]
 802c9b2:	687b      	ldr	r3, [r7, #4]
 802c9b4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 802c9b6:	683b      	ldr	r3, [r7, #0]
 802c9b8:	791a      	ldrb	r2, [r3, #4]
 802c9ba:	687b      	ldr	r3, [r7, #4]
 802c9bc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 802c9be:	683b      	ldr	r3, [r7, #0]
 802c9c0:	795a      	ldrb	r2, [r3, #5]
 802c9c2:	687b      	ldr	r3, [r7, #4]
 802c9c4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 802c9c6:	683b      	ldr	r3, [r7, #0]
 802c9c8:	799a      	ldrb	r2, [r3, #6]
 802c9ca:	687b      	ldr	r3, [r7, #4]
 802c9cc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 802c9ce:	683b      	ldr	r3, [r7, #0]
 802c9d0:	79da      	ldrb	r2, [r3, #7]
 802c9d2:	687b      	ldr	r3, [r7, #4]
 802c9d4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 802c9d6:	683b      	ldr	r3, [r7, #0]
 802c9d8:	7a1a      	ldrb	r2, [r3, #8]
 802c9da:	687b      	ldr	r3, [r7, #4]
 802c9dc:	721a      	strb	r2, [r3, #8]
}
 802c9de:	bf00      	nop
 802c9e0:	370c      	adds	r7, #12
 802c9e2:	46bd      	mov	sp, r7
 802c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c9e8:	4770      	bx	lr

0802c9ea <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 802c9ea:	b480      	push	{r7}
 802c9ec:	b087      	sub	sp, #28
 802c9ee:	af00      	add	r7, sp, #0
 802c9f0:	60f8      	str	r0, [r7, #12]
 802c9f2:	60b9      	str	r1, [r7, #8]
 802c9f4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 802c9f6:	2300      	movs	r3, #0
 802c9f8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 802c9fa:	687b      	ldr	r3, [r7, #4]
 802c9fc:	781a      	ldrb	r2, [r3, #0]
 802c9fe:	68bb      	ldr	r3, [r7, #8]
 802ca00:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 802ca02:	687b      	ldr	r3, [r7, #4]
 802ca04:	785a      	ldrb	r2, [r3, #1]
 802ca06:	68bb      	ldr	r3, [r7, #8]
 802ca08:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 802ca0a:	687b      	ldr	r3, [r7, #4]
 802ca0c:	789a      	ldrb	r2, [r3, #2]
 802ca0e:	68bb      	ldr	r3, [r7, #8]
 802ca10:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 802ca12:	687b      	ldr	r3, [r7, #4]
 802ca14:	78da      	ldrb	r2, [r3, #3]
 802ca16:	68bb      	ldr	r3, [r7, #8]
 802ca18:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 802ca1a:	687b      	ldr	r3, [r7, #4]
 802ca1c:	3304      	adds	r3, #4
 802ca1e:	781b      	ldrb	r3, [r3, #0]
 802ca20:	b29a      	uxth	r2, r3
 802ca22:	687b      	ldr	r3, [r7, #4]
 802ca24:	3305      	adds	r3, #5
 802ca26:	781b      	ldrb	r3, [r3, #0]
 802ca28:	b29b      	uxth	r3, r3
 802ca2a:	021b      	lsls	r3, r3, #8
 802ca2c:	b29b      	uxth	r3, r3
 802ca2e:	4313      	orrs	r3, r2
 802ca30:	b29a      	uxth	r2, r3
 802ca32:	68bb      	ldr	r3, [r7, #8]
 802ca34:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 802ca36:	687b      	ldr	r3, [r7, #4]
 802ca38:	799a      	ldrb	r2, [r3, #6]
 802ca3a:	68bb      	ldr	r3, [r7, #8]
 802ca3c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 802ca3e:	68bb      	ldr	r3, [r7, #8]
 802ca40:	889b      	ldrh	r3, [r3, #4]
 802ca42:	2b00      	cmp	r3, #0
 802ca44:	d102      	bne.n	802ca4c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 802ca46:	2303      	movs	r3, #3
 802ca48:	75fb      	strb	r3, [r7, #23]
 802ca4a:	e033      	b.n	802cab4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 802ca4c:	68bb      	ldr	r3, [r7, #8]
 802ca4e:	889b      	ldrh	r3, [r3, #4]
 802ca50:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802ca54:	f023 0307 	bic.w	r3, r3, #7
 802ca58:	b29a      	uxth	r2, r3
 802ca5a:	68bb      	ldr	r3, [r7, #8]
 802ca5c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 802ca5e:	68bb      	ldr	r3, [r7, #8]
 802ca60:	889b      	ldrh	r3, [r3, #4]
 802ca62:	b21a      	sxth	r2, r3
 802ca64:	687b      	ldr	r3, [r7, #4]
 802ca66:	3304      	adds	r3, #4
 802ca68:	781b      	ldrb	r3, [r3, #0]
 802ca6a:	b299      	uxth	r1, r3
 802ca6c:	687b      	ldr	r3, [r7, #4]
 802ca6e:	3305      	adds	r3, #5
 802ca70:	781b      	ldrb	r3, [r3, #0]
 802ca72:	b29b      	uxth	r3, r3
 802ca74:	021b      	lsls	r3, r3, #8
 802ca76:	b29b      	uxth	r3, r3
 802ca78:	430b      	orrs	r3, r1
 802ca7a:	b29b      	uxth	r3, r3
 802ca7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802ca80:	2b00      	cmp	r3, #0
 802ca82:	d110      	bne.n	802caa6 <USBH_ParseEPDesc+0xbc>
 802ca84:	687b      	ldr	r3, [r7, #4]
 802ca86:	3304      	adds	r3, #4
 802ca88:	781b      	ldrb	r3, [r3, #0]
 802ca8a:	b299      	uxth	r1, r3
 802ca8c:	687b      	ldr	r3, [r7, #4]
 802ca8e:	3305      	adds	r3, #5
 802ca90:	781b      	ldrb	r3, [r3, #0]
 802ca92:	b29b      	uxth	r3, r3
 802ca94:	021b      	lsls	r3, r3, #8
 802ca96:	b29b      	uxth	r3, r3
 802ca98:	430b      	orrs	r3, r1
 802ca9a:	b29b      	uxth	r3, r3
 802ca9c:	b21b      	sxth	r3, r3
 802ca9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802caa2:	b21b      	sxth	r3, r3
 802caa4:	e001      	b.n	802caaa <USBH_ParseEPDesc+0xc0>
 802caa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 802caaa:	4313      	orrs	r3, r2
 802caac:	b21b      	sxth	r3, r3
 802caae:	b29a      	uxth	r2, r3
 802cab0:	68bb      	ldr	r3, [r7, #8]
 802cab2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 802cab4:	68fb      	ldr	r3, [r7, #12]
 802cab6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802caba:	2b00      	cmp	r3, #0
 802cabc:	d116      	bne.n	802caec <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802cabe:	68bb      	ldr	r3, [r7, #8]
 802cac0:	78db      	ldrb	r3, [r3, #3]
 802cac2:	f003 0303 	and.w	r3, r3, #3
 802cac6:	2b01      	cmp	r3, #1
 802cac8:	d005      	beq.n	802cad6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 802caca:	68bb      	ldr	r3, [r7, #8]
 802cacc:	78db      	ldrb	r3, [r3, #3]
 802cace:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802cad2:	2b03      	cmp	r3, #3
 802cad4:	d127      	bne.n	802cb26 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802cad6:	68bb      	ldr	r3, [r7, #8]
 802cad8:	799b      	ldrb	r3, [r3, #6]
 802cada:	2b00      	cmp	r3, #0
 802cadc:	d003      	beq.n	802cae6 <USBH_ParseEPDesc+0xfc>
 802cade:	68bb      	ldr	r3, [r7, #8]
 802cae0:	799b      	ldrb	r3, [r3, #6]
 802cae2:	2b10      	cmp	r3, #16
 802cae4:	d91f      	bls.n	802cb26 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802cae6:	2303      	movs	r3, #3
 802cae8:	75fb      	strb	r3, [r7, #23]
 802caea:	e01c      	b.n	802cb26 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 802caec:	68bb      	ldr	r3, [r7, #8]
 802caee:	78db      	ldrb	r3, [r3, #3]
 802caf0:	f003 0303 	and.w	r3, r3, #3
 802caf4:	2b01      	cmp	r3, #1
 802caf6:	d10a      	bne.n	802cb0e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802caf8:	68bb      	ldr	r3, [r7, #8]
 802cafa:	799b      	ldrb	r3, [r3, #6]
 802cafc:	2b00      	cmp	r3, #0
 802cafe:	d003      	beq.n	802cb08 <USBH_ParseEPDesc+0x11e>
 802cb00:	68bb      	ldr	r3, [r7, #8]
 802cb02:	799b      	ldrb	r3, [r3, #6]
 802cb04:	2b10      	cmp	r3, #16
 802cb06:	d90e      	bls.n	802cb26 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802cb08:	2303      	movs	r3, #3
 802cb0a:	75fb      	strb	r3, [r7, #23]
 802cb0c:	e00b      	b.n	802cb26 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 802cb0e:	68bb      	ldr	r3, [r7, #8]
 802cb10:	78db      	ldrb	r3, [r3, #3]
 802cb12:	f003 0303 	and.w	r3, r3, #3
 802cb16:	2b03      	cmp	r3, #3
 802cb18:	d105      	bne.n	802cb26 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 802cb1a:	68bb      	ldr	r3, [r7, #8]
 802cb1c:	799b      	ldrb	r3, [r3, #6]
 802cb1e:	2b00      	cmp	r3, #0
 802cb20:	d101      	bne.n	802cb26 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802cb22:	2303      	movs	r3, #3
 802cb24:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 802cb26:	7dfb      	ldrb	r3, [r7, #23]
}
 802cb28:	4618      	mov	r0, r3
 802cb2a:	371c      	adds	r7, #28
 802cb2c:	46bd      	mov	sp, r7
 802cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cb32:	4770      	bx	lr

0802cb34 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 802cb34:	b480      	push	{r7}
 802cb36:	b087      	sub	sp, #28
 802cb38:	af00      	add	r7, sp, #0
 802cb3a:	60f8      	str	r0, [r7, #12]
 802cb3c:	60b9      	str	r1, [r7, #8]
 802cb3e:	4613      	mov	r3, r2
 802cb40:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 802cb42:	68fb      	ldr	r3, [r7, #12]
 802cb44:	3301      	adds	r3, #1
 802cb46:	781b      	ldrb	r3, [r3, #0]
 802cb48:	2b03      	cmp	r3, #3
 802cb4a:	d120      	bne.n	802cb8e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 802cb4c:	68fb      	ldr	r3, [r7, #12]
 802cb4e:	781b      	ldrb	r3, [r3, #0]
 802cb50:	1e9a      	subs	r2, r3, #2
 802cb52:	88fb      	ldrh	r3, [r7, #6]
 802cb54:	4293      	cmp	r3, r2
 802cb56:	bf28      	it	cs
 802cb58:	4613      	movcs	r3, r2
 802cb5a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 802cb5c:	68fb      	ldr	r3, [r7, #12]
 802cb5e:	3302      	adds	r3, #2
 802cb60:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 802cb62:	2300      	movs	r3, #0
 802cb64:	82fb      	strh	r3, [r7, #22]
 802cb66:	e00b      	b.n	802cb80 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 802cb68:	8afb      	ldrh	r3, [r7, #22]
 802cb6a:	68fa      	ldr	r2, [r7, #12]
 802cb6c:	4413      	add	r3, r2
 802cb6e:	781a      	ldrb	r2, [r3, #0]
 802cb70:	68bb      	ldr	r3, [r7, #8]
 802cb72:	701a      	strb	r2, [r3, #0]
      pdest++;
 802cb74:	68bb      	ldr	r3, [r7, #8]
 802cb76:	3301      	adds	r3, #1
 802cb78:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 802cb7a:	8afb      	ldrh	r3, [r7, #22]
 802cb7c:	3302      	adds	r3, #2
 802cb7e:	82fb      	strh	r3, [r7, #22]
 802cb80:	8afa      	ldrh	r2, [r7, #22]
 802cb82:	8abb      	ldrh	r3, [r7, #20]
 802cb84:	429a      	cmp	r2, r3
 802cb86:	d3ef      	bcc.n	802cb68 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 802cb88:	68bb      	ldr	r3, [r7, #8]
 802cb8a:	2200      	movs	r2, #0
 802cb8c:	701a      	strb	r2, [r3, #0]
  }
}
 802cb8e:	bf00      	nop
 802cb90:	371c      	adds	r7, #28
 802cb92:	46bd      	mov	sp, r7
 802cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cb98:	4770      	bx	lr

0802cb9a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 802cb9a:	b480      	push	{r7}
 802cb9c:	b085      	sub	sp, #20
 802cb9e:	af00      	add	r7, sp, #0
 802cba0:	6078      	str	r0, [r7, #4]
 802cba2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 802cba4:	683b      	ldr	r3, [r7, #0]
 802cba6:	881a      	ldrh	r2, [r3, #0]
 802cba8:	687b      	ldr	r3, [r7, #4]
 802cbaa:	781b      	ldrb	r3, [r3, #0]
 802cbac:	b29b      	uxth	r3, r3
 802cbae:	4413      	add	r3, r2
 802cbb0:	b29a      	uxth	r2, r3
 802cbb2:	683b      	ldr	r3, [r7, #0]
 802cbb4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 802cbb6:	687b      	ldr	r3, [r7, #4]
 802cbb8:	781b      	ldrb	r3, [r3, #0]
 802cbba:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 802cbbc:	687b      	ldr	r3, [r7, #4]
 802cbbe:	4413      	add	r3, r2
 802cbc0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 802cbc2:	68fb      	ldr	r3, [r7, #12]
}
 802cbc4:	4618      	mov	r0, r3
 802cbc6:	3714      	adds	r7, #20
 802cbc8:	46bd      	mov	sp, r7
 802cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cbce:	4770      	bx	lr

0802cbd0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 802cbd0:	b580      	push	{r7, lr}
 802cbd2:	b086      	sub	sp, #24
 802cbd4:	af00      	add	r7, sp, #0
 802cbd6:	60f8      	str	r0, [r7, #12]
 802cbd8:	60b9      	str	r1, [r7, #8]
 802cbda:	4613      	mov	r3, r2
 802cbdc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 802cbde:	2301      	movs	r3, #1
 802cbe0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 802cbe2:	68fb      	ldr	r3, [r7, #12]
 802cbe4:	789b      	ldrb	r3, [r3, #2]
 802cbe6:	2b01      	cmp	r3, #1
 802cbe8:	d002      	beq.n	802cbf0 <USBH_CtlReq+0x20>
 802cbea:	2b02      	cmp	r3, #2
 802cbec:	d00f      	beq.n	802cc0e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 802cbee:	e027      	b.n	802cc40 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 802cbf0:	68fb      	ldr	r3, [r7, #12]
 802cbf2:	68ba      	ldr	r2, [r7, #8]
 802cbf4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 802cbf6:	68fb      	ldr	r3, [r7, #12]
 802cbf8:	88fa      	ldrh	r2, [r7, #6]
 802cbfa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 802cbfc:	68fb      	ldr	r3, [r7, #12]
 802cbfe:	2201      	movs	r2, #1
 802cc00:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 802cc02:	68fb      	ldr	r3, [r7, #12]
 802cc04:	2202      	movs	r2, #2
 802cc06:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 802cc08:	2301      	movs	r3, #1
 802cc0a:	75fb      	strb	r3, [r7, #23]
      break;
 802cc0c:	e018      	b.n	802cc40 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 802cc0e:	68f8      	ldr	r0, [r7, #12]
 802cc10:	f000 f81c 	bl	802cc4c <USBH_HandleControl>
 802cc14:	4603      	mov	r3, r0
 802cc16:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 802cc18:	7dfb      	ldrb	r3, [r7, #23]
 802cc1a:	2b00      	cmp	r3, #0
 802cc1c:	d002      	beq.n	802cc24 <USBH_CtlReq+0x54>
 802cc1e:	7dfb      	ldrb	r3, [r7, #23]
 802cc20:	2b03      	cmp	r3, #3
 802cc22:	d106      	bne.n	802cc32 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 802cc24:	68fb      	ldr	r3, [r7, #12]
 802cc26:	2201      	movs	r2, #1
 802cc28:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 802cc2a:	68fb      	ldr	r3, [r7, #12]
 802cc2c:	2200      	movs	r2, #0
 802cc2e:	761a      	strb	r2, [r3, #24]
      break;
 802cc30:	e005      	b.n	802cc3e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 802cc32:	7dfb      	ldrb	r3, [r7, #23]
 802cc34:	2b02      	cmp	r3, #2
 802cc36:	d102      	bne.n	802cc3e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 802cc38:	68fb      	ldr	r3, [r7, #12]
 802cc3a:	2201      	movs	r2, #1
 802cc3c:	709a      	strb	r2, [r3, #2]
      break;
 802cc3e:	bf00      	nop
  }
  return status;
 802cc40:	7dfb      	ldrb	r3, [r7, #23]
}
 802cc42:	4618      	mov	r0, r3
 802cc44:	3718      	adds	r7, #24
 802cc46:	46bd      	mov	sp, r7
 802cc48:	bd80      	pop	{r7, pc}
	...

0802cc4c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 802cc4c:	b580      	push	{r7, lr}
 802cc4e:	b086      	sub	sp, #24
 802cc50:	af02      	add	r7, sp, #8
 802cc52:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 802cc54:	2301      	movs	r3, #1
 802cc56:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802cc58:	2300      	movs	r3, #0
 802cc5a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 802cc5c:	687b      	ldr	r3, [r7, #4]
 802cc5e:	7e1b      	ldrb	r3, [r3, #24]
 802cc60:	3b01      	subs	r3, #1
 802cc62:	2b0a      	cmp	r3, #10
 802cc64:	f200 8156 	bhi.w	802cf14 <USBH_HandleControl+0x2c8>
 802cc68:	a201      	add	r2, pc, #4	; (adr r2, 802cc70 <USBH_HandleControl+0x24>)
 802cc6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802cc6e:	bf00      	nop
 802cc70:	0802cc9d 	.word	0x0802cc9d
 802cc74:	0802ccb7 	.word	0x0802ccb7
 802cc78:	0802cd21 	.word	0x0802cd21
 802cc7c:	0802cd47 	.word	0x0802cd47
 802cc80:	0802cd7f 	.word	0x0802cd7f
 802cc84:	0802cda9 	.word	0x0802cda9
 802cc88:	0802cdfb 	.word	0x0802cdfb
 802cc8c:	0802ce1d 	.word	0x0802ce1d
 802cc90:	0802ce59 	.word	0x0802ce59
 802cc94:	0802ce7f 	.word	0x0802ce7f
 802cc98:	0802cebd 	.word	0x0802cebd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 802cc9c:	687b      	ldr	r3, [r7, #4]
 802cc9e:	f103 0110 	add.w	r1, r3, #16
 802cca2:	687b      	ldr	r3, [r7, #4]
 802cca4:	795b      	ldrb	r3, [r3, #5]
 802cca6:	461a      	mov	r2, r3
 802cca8:	6878      	ldr	r0, [r7, #4]
 802ccaa:	f000 f943 	bl	802cf34 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 802ccae:	687b      	ldr	r3, [r7, #4]
 802ccb0:	2202      	movs	r2, #2
 802ccb2:	761a      	strb	r2, [r3, #24]
      break;
 802ccb4:	e139      	b.n	802cf2a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802ccb6:	687b      	ldr	r3, [r7, #4]
 802ccb8:	795b      	ldrb	r3, [r3, #5]
 802ccba:	4619      	mov	r1, r3
 802ccbc:	6878      	ldr	r0, [r7, #4]
 802ccbe:	f000 fccb 	bl	802d658 <USBH_LL_GetURBState>
 802ccc2:	4603      	mov	r3, r0
 802ccc4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 802ccc6:	7bbb      	ldrb	r3, [r7, #14]
 802ccc8:	2b01      	cmp	r3, #1
 802ccca:	d11e      	bne.n	802cd0a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 802cccc:	687b      	ldr	r3, [r7, #4]
 802ccce:	7c1b      	ldrb	r3, [r3, #16]
 802ccd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802ccd4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 802ccd6:	687b      	ldr	r3, [r7, #4]
 802ccd8:	8adb      	ldrh	r3, [r3, #22]
 802ccda:	2b00      	cmp	r3, #0
 802ccdc:	d00a      	beq.n	802ccf4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 802ccde:	7b7b      	ldrb	r3, [r7, #13]
 802cce0:	2b80      	cmp	r3, #128	; 0x80
 802cce2:	d103      	bne.n	802ccec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 802cce4:	687b      	ldr	r3, [r7, #4]
 802cce6:	2203      	movs	r2, #3
 802cce8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802ccea:	e115      	b.n	802cf18 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 802ccec:	687b      	ldr	r3, [r7, #4]
 802ccee:	2205      	movs	r2, #5
 802ccf0:	761a      	strb	r2, [r3, #24]
      break;
 802ccf2:	e111      	b.n	802cf18 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 802ccf4:	7b7b      	ldrb	r3, [r7, #13]
 802ccf6:	2b80      	cmp	r3, #128	; 0x80
 802ccf8:	d103      	bne.n	802cd02 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 802ccfa:	687b      	ldr	r3, [r7, #4]
 802ccfc:	2209      	movs	r2, #9
 802ccfe:	761a      	strb	r2, [r3, #24]
      break;
 802cd00:	e10a      	b.n	802cf18 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 802cd02:	687b      	ldr	r3, [r7, #4]
 802cd04:	2207      	movs	r2, #7
 802cd06:	761a      	strb	r2, [r3, #24]
      break;
 802cd08:	e106      	b.n	802cf18 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 802cd0a:	7bbb      	ldrb	r3, [r7, #14]
 802cd0c:	2b04      	cmp	r3, #4
 802cd0e:	d003      	beq.n	802cd18 <USBH_HandleControl+0xcc>
 802cd10:	7bbb      	ldrb	r3, [r7, #14]
 802cd12:	2b02      	cmp	r3, #2
 802cd14:	f040 8100 	bne.w	802cf18 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 802cd18:	687b      	ldr	r3, [r7, #4]
 802cd1a:	220b      	movs	r2, #11
 802cd1c:	761a      	strb	r2, [r3, #24]
      break;
 802cd1e:	e0fb      	b.n	802cf18 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 802cd20:	687b      	ldr	r3, [r7, #4]
 802cd22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802cd26:	b29a      	uxth	r2, r3
 802cd28:	687b      	ldr	r3, [r7, #4]
 802cd2a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 802cd2c:	687b      	ldr	r3, [r7, #4]
 802cd2e:	6899      	ldr	r1, [r3, #8]
 802cd30:	687b      	ldr	r3, [r7, #4]
 802cd32:	899a      	ldrh	r2, [r3, #12]
 802cd34:	687b      	ldr	r3, [r7, #4]
 802cd36:	791b      	ldrb	r3, [r3, #4]
 802cd38:	6878      	ldr	r0, [r7, #4]
 802cd3a:	f000 f93a 	bl	802cfb2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 802cd3e:	687b      	ldr	r3, [r7, #4]
 802cd40:	2204      	movs	r2, #4
 802cd42:	761a      	strb	r2, [r3, #24]
      break;
 802cd44:	e0f1      	b.n	802cf2a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802cd46:	687b      	ldr	r3, [r7, #4]
 802cd48:	791b      	ldrb	r3, [r3, #4]
 802cd4a:	4619      	mov	r1, r3
 802cd4c:	6878      	ldr	r0, [r7, #4]
 802cd4e:	f000 fc83 	bl	802d658 <USBH_LL_GetURBState>
 802cd52:	4603      	mov	r3, r0
 802cd54:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 802cd56:	7bbb      	ldrb	r3, [r7, #14]
 802cd58:	2b01      	cmp	r3, #1
 802cd5a:	d102      	bne.n	802cd62 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 802cd5c:	687b      	ldr	r3, [r7, #4]
 802cd5e:	2209      	movs	r2, #9
 802cd60:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 802cd62:	7bbb      	ldrb	r3, [r7, #14]
 802cd64:	2b05      	cmp	r3, #5
 802cd66:	d102      	bne.n	802cd6e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 802cd68:	2303      	movs	r3, #3
 802cd6a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802cd6c:	e0d6      	b.n	802cf1c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 802cd6e:	7bbb      	ldrb	r3, [r7, #14]
 802cd70:	2b04      	cmp	r3, #4
 802cd72:	f040 80d3 	bne.w	802cf1c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 802cd76:	687b      	ldr	r3, [r7, #4]
 802cd78:	220b      	movs	r2, #11
 802cd7a:	761a      	strb	r2, [r3, #24]
      break;
 802cd7c:	e0ce      	b.n	802cf1c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 802cd7e:	687b      	ldr	r3, [r7, #4]
 802cd80:	6899      	ldr	r1, [r3, #8]
 802cd82:	687b      	ldr	r3, [r7, #4]
 802cd84:	899a      	ldrh	r2, [r3, #12]
 802cd86:	687b      	ldr	r3, [r7, #4]
 802cd88:	795b      	ldrb	r3, [r3, #5]
 802cd8a:	2001      	movs	r0, #1
 802cd8c:	9000      	str	r0, [sp, #0]
 802cd8e:	6878      	ldr	r0, [r7, #4]
 802cd90:	f000 f8ea 	bl	802cf68 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 802cd94:	687b      	ldr	r3, [r7, #4]
 802cd96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802cd9a:	b29a      	uxth	r2, r3
 802cd9c:	687b      	ldr	r3, [r7, #4]
 802cd9e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 802cda0:	687b      	ldr	r3, [r7, #4]
 802cda2:	2206      	movs	r2, #6
 802cda4:	761a      	strb	r2, [r3, #24]
      break;
 802cda6:	e0c0      	b.n	802cf2a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802cda8:	687b      	ldr	r3, [r7, #4]
 802cdaa:	795b      	ldrb	r3, [r3, #5]
 802cdac:	4619      	mov	r1, r3
 802cdae:	6878      	ldr	r0, [r7, #4]
 802cdb0:	f000 fc52 	bl	802d658 <USBH_LL_GetURBState>
 802cdb4:	4603      	mov	r3, r0
 802cdb6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802cdb8:	7bbb      	ldrb	r3, [r7, #14]
 802cdba:	2b01      	cmp	r3, #1
 802cdbc:	d103      	bne.n	802cdc6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 802cdbe:	687b      	ldr	r3, [r7, #4]
 802cdc0:	2207      	movs	r2, #7
 802cdc2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802cdc4:	e0ac      	b.n	802cf20 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 802cdc6:	7bbb      	ldrb	r3, [r7, #14]
 802cdc8:	2b05      	cmp	r3, #5
 802cdca:	d105      	bne.n	802cdd8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 802cdcc:	687b      	ldr	r3, [r7, #4]
 802cdce:	220c      	movs	r2, #12
 802cdd0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 802cdd2:	2303      	movs	r3, #3
 802cdd4:	73fb      	strb	r3, [r7, #15]
      break;
 802cdd6:	e0a3      	b.n	802cf20 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 802cdd8:	7bbb      	ldrb	r3, [r7, #14]
 802cdda:	2b02      	cmp	r3, #2
 802cddc:	d103      	bne.n	802cde6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 802cdde:	687b      	ldr	r3, [r7, #4]
 802cde0:	2205      	movs	r2, #5
 802cde2:	761a      	strb	r2, [r3, #24]
      break;
 802cde4:	e09c      	b.n	802cf20 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 802cde6:	7bbb      	ldrb	r3, [r7, #14]
 802cde8:	2b04      	cmp	r3, #4
 802cdea:	f040 8099 	bne.w	802cf20 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 802cdee:	687b      	ldr	r3, [r7, #4]
 802cdf0:	220b      	movs	r2, #11
 802cdf2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 802cdf4:	2302      	movs	r3, #2
 802cdf6:	73fb      	strb	r3, [r7, #15]
      break;
 802cdf8:	e092      	b.n	802cf20 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 802cdfa:	687b      	ldr	r3, [r7, #4]
 802cdfc:	791b      	ldrb	r3, [r3, #4]
 802cdfe:	2200      	movs	r2, #0
 802ce00:	2100      	movs	r1, #0
 802ce02:	6878      	ldr	r0, [r7, #4]
 802ce04:	f000 f8d5 	bl	802cfb2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802ce08:	687b      	ldr	r3, [r7, #4]
 802ce0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802ce0e:	b29a      	uxth	r2, r3
 802ce10:	687b      	ldr	r3, [r7, #4]
 802ce12:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 802ce14:	687b      	ldr	r3, [r7, #4]
 802ce16:	2208      	movs	r2, #8
 802ce18:	761a      	strb	r2, [r3, #24]

      break;
 802ce1a:	e086      	b.n	802cf2a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802ce1c:	687b      	ldr	r3, [r7, #4]
 802ce1e:	791b      	ldrb	r3, [r3, #4]
 802ce20:	4619      	mov	r1, r3
 802ce22:	6878      	ldr	r0, [r7, #4]
 802ce24:	f000 fc18 	bl	802d658 <USBH_LL_GetURBState>
 802ce28:	4603      	mov	r3, r0
 802ce2a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802ce2c:	7bbb      	ldrb	r3, [r7, #14]
 802ce2e:	2b01      	cmp	r3, #1
 802ce30:	d105      	bne.n	802ce3e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 802ce32:	687b      	ldr	r3, [r7, #4]
 802ce34:	220d      	movs	r2, #13
 802ce36:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 802ce38:	2300      	movs	r3, #0
 802ce3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802ce3c:	e072      	b.n	802cf24 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 802ce3e:	7bbb      	ldrb	r3, [r7, #14]
 802ce40:	2b04      	cmp	r3, #4
 802ce42:	d103      	bne.n	802ce4c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 802ce44:	687b      	ldr	r3, [r7, #4]
 802ce46:	220b      	movs	r2, #11
 802ce48:	761a      	strb	r2, [r3, #24]
      break;
 802ce4a:	e06b      	b.n	802cf24 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 802ce4c:	7bbb      	ldrb	r3, [r7, #14]
 802ce4e:	2b05      	cmp	r3, #5
 802ce50:	d168      	bne.n	802cf24 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 802ce52:	2303      	movs	r3, #3
 802ce54:	73fb      	strb	r3, [r7, #15]
      break;
 802ce56:	e065      	b.n	802cf24 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 802ce58:	687b      	ldr	r3, [r7, #4]
 802ce5a:	795b      	ldrb	r3, [r3, #5]
 802ce5c:	2201      	movs	r2, #1
 802ce5e:	9200      	str	r2, [sp, #0]
 802ce60:	2200      	movs	r2, #0
 802ce62:	2100      	movs	r1, #0
 802ce64:	6878      	ldr	r0, [r7, #4]
 802ce66:	f000 f87f 	bl	802cf68 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802ce6a:	687b      	ldr	r3, [r7, #4]
 802ce6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802ce70:	b29a      	uxth	r2, r3
 802ce72:	687b      	ldr	r3, [r7, #4]
 802ce74:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 802ce76:	687b      	ldr	r3, [r7, #4]
 802ce78:	220a      	movs	r2, #10
 802ce7a:	761a      	strb	r2, [r3, #24]
      break;
 802ce7c:	e055      	b.n	802cf2a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802ce7e:	687b      	ldr	r3, [r7, #4]
 802ce80:	795b      	ldrb	r3, [r3, #5]
 802ce82:	4619      	mov	r1, r3
 802ce84:	6878      	ldr	r0, [r7, #4]
 802ce86:	f000 fbe7 	bl	802d658 <USBH_LL_GetURBState>
 802ce8a:	4603      	mov	r3, r0
 802ce8c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 802ce8e:	7bbb      	ldrb	r3, [r7, #14]
 802ce90:	2b01      	cmp	r3, #1
 802ce92:	d105      	bne.n	802cea0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 802ce94:	2300      	movs	r3, #0
 802ce96:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 802ce98:	687b      	ldr	r3, [r7, #4]
 802ce9a:	220d      	movs	r2, #13
 802ce9c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802ce9e:	e043      	b.n	802cf28 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 802cea0:	7bbb      	ldrb	r3, [r7, #14]
 802cea2:	2b02      	cmp	r3, #2
 802cea4:	d103      	bne.n	802ceae <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 802cea6:	687b      	ldr	r3, [r7, #4]
 802cea8:	2209      	movs	r2, #9
 802ceaa:	761a      	strb	r2, [r3, #24]
      break;
 802ceac:	e03c      	b.n	802cf28 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 802ceae:	7bbb      	ldrb	r3, [r7, #14]
 802ceb0:	2b04      	cmp	r3, #4
 802ceb2:	d139      	bne.n	802cf28 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 802ceb4:	687b      	ldr	r3, [r7, #4]
 802ceb6:	220b      	movs	r2, #11
 802ceb8:	761a      	strb	r2, [r3, #24]
      break;
 802ceba:	e035      	b.n	802cf28 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 802cebc:	687b      	ldr	r3, [r7, #4]
 802cebe:	7e5b      	ldrb	r3, [r3, #25]
 802cec0:	3301      	adds	r3, #1
 802cec2:	b2da      	uxtb	r2, r3
 802cec4:	687b      	ldr	r3, [r7, #4]
 802cec6:	765a      	strb	r2, [r3, #25]
 802cec8:	687b      	ldr	r3, [r7, #4]
 802ceca:	7e5b      	ldrb	r3, [r3, #25]
 802cecc:	2b02      	cmp	r3, #2
 802cece:	d806      	bhi.n	802cede <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 802ced0:	687b      	ldr	r3, [r7, #4]
 802ced2:	2201      	movs	r2, #1
 802ced4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 802ced6:	687b      	ldr	r3, [r7, #4]
 802ced8:	2201      	movs	r2, #1
 802ceda:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 802cedc:	e025      	b.n	802cf2a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 802cede:	687b      	ldr	r3, [r7, #4]
 802cee0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802cee4:	2106      	movs	r1, #6
 802cee6:	6878      	ldr	r0, [r7, #4]
 802cee8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 802ceea:	687b      	ldr	r3, [r7, #4]
 802ceec:	2200      	movs	r2, #0
 802ceee:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802cef0:	687b      	ldr	r3, [r7, #4]
 802cef2:	795b      	ldrb	r3, [r3, #5]
 802cef4:	4619      	mov	r1, r3
 802cef6:	6878      	ldr	r0, [r7, #4]
 802cef8:	f000 f90c 	bl	802d114 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802cefc:	687b      	ldr	r3, [r7, #4]
 802cefe:	791b      	ldrb	r3, [r3, #4]
 802cf00:	4619      	mov	r1, r3
 802cf02:	6878      	ldr	r0, [r7, #4]
 802cf04:	f000 f906 	bl	802d114 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 802cf08:	687b      	ldr	r3, [r7, #4]
 802cf0a:	2200      	movs	r2, #0
 802cf0c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 802cf0e:	2302      	movs	r3, #2
 802cf10:	73fb      	strb	r3, [r7, #15]
      break;
 802cf12:	e00a      	b.n	802cf2a <USBH_HandleControl+0x2de>

    default:
      break;
 802cf14:	bf00      	nop
 802cf16:	e008      	b.n	802cf2a <USBH_HandleControl+0x2de>
      break;
 802cf18:	bf00      	nop
 802cf1a:	e006      	b.n	802cf2a <USBH_HandleControl+0x2de>
      break;
 802cf1c:	bf00      	nop
 802cf1e:	e004      	b.n	802cf2a <USBH_HandleControl+0x2de>
      break;
 802cf20:	bf00      	nop
 802cf22:	e002      	b.n	802cf2a <USBH_HandleControl+0x2de>
      break;
 802cf24:	bf00      	nop
 802cf26:	e000      	b.n	802cf2a <USBH_HandleControl+0x2de>
      break;
 802cf28:	bf00      	nop
  }

  return status;
 802cf2a:	7bfb      	ldrb	r3, [r7, #15]
}
 802cf2c:	4618      	mov	r0, r3
 802cf2e:	3710      	adds	r7, #16
 802cf30:	46bd      	mov	sp, r7
 802cf32:	bd80      	pop	{r7, pc}

0802cf34 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 802cf34:	b580      	push	{r7, lr}
 802cf36:	b088      	sub	sp, #32
 802cf38:	af04      	add	r7, sp, #16
 802cf3a:	60f8      	str	r0, [r7, #12]
 802cf3c:	60b9      	str	r1, [r7, #8]
 802cf3e:	4613      	mov	r3, r2
 802cf40:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802cf42:	79f9      	ldrb	r1, [r7, #7]
 802cf44:	2300      	movs	r3, #0
 802cf46:	9303      	str	r3, [sp, #12]
 802cf48:	2308      	movs	r3, #8
 802cf4a:	9302      	str	r3, [sp, #8]
 802cf4c:	68bb      	ldr	r3, [r7, #8]
 802cf4e:	9301      	str	r3, [sp, #4]
 802cf50:	2300      	movs	r3, #0
 802cf52:	9300      	str	r3, [sp, #0]
 802cf54:	2300      	movs	r3, #0
 802cf56:	2200      	movs	r2, #0
 802cf58:	68f8      	ldr	r0, [r7, #12]
 802cf5a:	f000 fb4c 	bl	802d5f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 802cf5e:	2300      	movs	r3, #0
}
 802cf60:	4618      	mov	r0, r3
 802cf62:	3710      	adds	r7, #16
 802cf64:	46bd      	mov	sp, r7
 802cf66:	bd80      	pop	{r7, pc}

0802cf68 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 802cf68:	b580      	push	{r7, lr}
 802cf6a:	b088      	sub	sp, #32
 802cf6c:	af04      	add	r7, sp, #16
 802cf6e:	60f8      	str	r0, [r7, #12]
 802cf70:	60b9      	str	r1, [r7, #8]
 802cf72:	4611      	mov	r1, r2
 802cf74:	461a      	mov	r2, r3
 802cf76:	460b      	mov	r3, r1
 802cf78:	80fb      	strh	r3, [r7, #6]
 802cf7a:	4613      	mov	r3, r2
 802cf7c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802cf7e:	68fb      	ldr	r3, [r7, #12]
 802cf80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802cf84:	2b00      	cmp	r3, #0
 802cf86:	d001      	beq.n	802cf8c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 802cf88:	2300      	movs	r3, #0
 802cf8a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802cf8c:	7979      	ldrb	r1, [r7, #5]
 802cf8e:	7e3b      	ldrb	r3, [r7, #24]
 802cf90:	9303      	str	r3, [sp, #12]
 802cf92:	88fb      	ldrh	r3, [r7, #6]
 802cf94:	9302      	str	r3, [sp, #8]
 802cf96:	68bb      	ldr	r3, [r7, #8]
 802cf98:	9301      	str	r3, [sp, #4]
 802cf9a:	2301      	movs	r3, #1
 802cf9c:	9300      	str	r3, [sp, #0]
 802cf9e:	2300      	movs	r3, #0
 802cfa0:	2200      	movs	r2, #0
 802cfa2:	68f8      	ldr	r0, [r7, #12]
 802cfa4:	f000 fb27 	bl	802d5f6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 802cfa8:	2300      	movs	r3, #0
}
 802cfaa:	4618      	mov	r0, r3
 802cfac:	3710      	adds	r7, #16
 802cfae:	46bd      	mov	sp, r7
 802cfb0:	bd80      	pop	{r7, pc}

0802cfb2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 802cfb2:	b580      	push	{r7, lr}
 802cfb4:	b088      	sub	sp, #32
 802cfb6:	af04      	add	r7, sp, #16
 802cfb8:	60f8      	str	r0, [r7, #12]
 802cfba:	60b9      	str	r1, [r7, #8]
 802cfbc:	4611      	mov	r1, r2
 802cfbe:	461a      	mov	r2, r3
 802cfc0:	460b      	mov	r3, r1
 802cfc2:	80fb      	strh	r3, [r7, #6]
 802cfc4:	4613      	mov	r3, r2
 802cfc6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802cfc8:	7979      	ldrb	r1, [r7, #5]
 802cfca:	2300      	movs	r3, #0
 802cfcc:	9303      	str	r3, [sp, #12]
 802cfce:	88fb      	ldrh	r3, [r7, #6]
 802cfd0:	9302      	str	r3, [sp, #8]
 802cfd2:	68bb      	ldr	r3, [r7, #8]
 802cfd4:	9301      	str	r3, [sp, #4]
 802cfd6:	2301      	movs	r3, #1
 802cfd8:	9300      	str	r3, [sp, #0]
 802cfda:	2300      	movs	r3, #0
 802cfdc:	2201      	movs	r2, #1
 802cfde:	68f8      	ldr	r0, [r7, #12]
 802cfe0:	f000 fb09 	bl	802d5f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802cfe4:	2300      	movs	r3, #0

}
 802cfe6:	4618      	mov	r0, r3
 802cfe8:	3710      	adds	r7, #16
 802cfea:	46bd      	mov	sp, r7
 802cfec:	bd80      	pop	{r7, pc}

0802cfee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 802cfee:	b580      	push	{r7, lr}
 802cff0:	b088      	sub	sp, #32
 802cff2:	af04      	add	r7, sp, #16
 802cff4:	60f8      	str	r0, [r7, #12]
 802cff6:	60b9      	str	r1, [r7, #8]
 802cff8:	4611      	mov	r1, r2
 802cffa:	461a      	mov	r2, r3
 802cffc:	460b      	mov	r3, r1
 802cffe:	80fb      	strh	r3, [r7, #6]
 802d000:	4613      	mov	r3, r2
 802d002:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802d004:	68fb      	ldr	r3, [r7, #12]
 802d006:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802d00a:	2b00      	cmp	r3, #0
 802d00c:	d001      	beq.n	802d012 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 802d00e:	2300      	movs	r3, #0
 802d010:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d012:	7979      	ldrb	r1, [r7, #5]
 802d014:	7e3b      	ldrb	r3, [r7, #24]
 802d016:	9303      	str	r3, [sp, #12]
 802d018:	88fb      	ldrh	r3, [r7, #6]
 802d01a:	9302      	str	r3, [sp, #8]
 802d01c:	68bb      	ldr	r3, [r7, #8]
 802d01e:	9301      	str	r3, [sp, #4]
 802d020:	2301      	movs	r3, #1
 802d022:	9300      	str	r3, [sp, #0]
 802d024:	2302      	movs	r3, #2
 802d026:	2200      	movs	r2, #0
 802d028:	68f8      	ldr	r0, [r7, #12]
 802d02a:	f000 fae4 	bl	802d5f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 802d02e:	2300      	movs	r3, #0
}
 802d030:	4618      	mov	r0, r3
 802d032:	3710      	adds	r7, #16
 802d034:	46bd      	mov	sp, r7
 802d036:	bd80      	pop	{r7, pc}

0802d038 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 802d038:	b580      	push	{r7, lr}
 802d03a:	b088      	sub	sp, #32
 802d03c:	af04      	add	r7, sp, #16
 802d03e:	60f8      	str	r0, [r7, #12]
 802d040:	60b9      	str	r1, [r7, #8]
 802d042:	4611      	mov	r1, r2
 802d044:	461a      	mov	r2, r3
 802d046:	460b      	mov	r3, r1
 802d048:	80fb      	strh	r3, [r7, #6]
 802d04a:	4613      	mov	r3, r2
 802d04c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d04e:	7979      	ldrb	r1, [r7, #5]
 802d050:	2300      	movs	r3, #0
 802d052:	9303      	str	r3, [sp, #12]
 802d054:	88fb      	ldrh	r3, [r7, #6]
 802d056:	9302      	str	r3, [sp, #8]
 802d058:	68bb      	ldr	r3, [r7, #8]
 802d05a:	9301      	str	r3, [sp, #4]
 802d05c:	2301      	movs	r3, #1
 802d05e:	9300      	str	r3, [sp, #0]
 802d060:	2302      	movs	r3, #2
 802d062:	2201      	movs	r2, #1
 802d064:	68f8      	ldr	r0, [r7, #12]
 802d066:	f000 fac6 	bl	802d5f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802d06a:	2300      	movs	r3, #0
}
 802d06c:	4618      	mov	r0, r3
 802d06e:	3710      	adds	r7, #16
 802d070:	46bd      	mov	sp, r7
 802d072:	bd80      	pop	{r7, pc}

0802d074 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802d074:	b580      	push	{r7, lr}
 802d076:	b086      	sub	sp, #24
 802d078:	af04      	add	r7, sp, #16
 802d07a:	6078      	str	r0, [r7, #4]
 802d07c:	4608      	mov	r0, r1
 802d07e:	4611      	mov	r1, r2
 802d080:	461a      	mov	r2, r3
 802d082:	4603      	mov	r3, r0
 802d084:	70fb      	strb	r3, [r7, #3]
 802d086:	460b      	mov	r3, r1
 802d088:	70bb      	strb	r3, [r7, #2]
 802d08a:	4613      	mov	r3, r2
 802d08c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 802d08e:	7878      	ldrb	r0, [r7, #1]
 802d090:	78ba      	ldrb	r2, [r7, #2]
 802d092:	78f9      	ldrb	r1, [r7, #3]
 802d094:	8b3b      	ldrh	r3, [r7, #24]
 802d096:	9302      	str	r3, [sp, #8]
 802d098:	7d3b      	ldrb	r3, [r7, #20]
 802d09a:	9301      	str	r3, [sp, #4]
 802d09c:	7c3b      	ldrb	r3, [r7, #16]
 802d09e:	9300      	str	r3, [sp, #0]
 802d0a0:	4603      	mov	r3, r0
 802d0a2:	6878      	ldr	r0, [r7, #4]
 802d0a4:	f000 fa59 	bl	802d55a <USBH_LL_OpenPipe>

  return USBH_OK;
 802d0a8:	2300      	movs	r3, #0
}
 802d0aa:	4618      	mov	r0, r3
 802d0ac:	3708      	adds	r7, #8
 802d0ae:	46bd      	mov	sp, r7
 802d0b0:	bd80      	pop	{r7, pc}

0802d0b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 802d0b2:	b580      	push	{r7, lr}
 802d0b4:	b082      	sub	sp, #8
 802d0b6:	af00      	add	r7, sp, #0
 802d0b8:	6078      	str	r0, [r7, #4]
 802d0ba:	460b      	mov	r3, r1
 802d0bc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 802d0be:	78fb      	ldrb	r3, [r7, #3]
 802d0c0:	4619      	mov	r1, r3
 802d0c2:	6878      	ldr	r0, [r7, #4]
 802d0c4:	f000 fa78 	bl	802d5b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 802d0c8:	2300      	movs	r3, #0
}
 802d0ca:	4618      	mov	r0, r3
 802d0cc:	3708      	adds	r7, #8
 802d0ce:	46bd      	mov	sp, r7
 802d0d0:	bd80      	pop	{r7, pc}

0802d0d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 802d0d2:	b580      	push	{r7, lr}
 802d0d4:	b084      	sub	sp, #16
 802d0d6:	af00      	add	r7, sp, #0
 802d0d8:	6078      	str	r0, [r7, #4]
 802d0da:	460b      	mov	r3, r1
 802d0dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 802d0de:	6878      	ldr	r0, [r7, #4]
 802d0e0:	f000 f836 	bl	802d150 <USBH_GetFreePipe>
 802d0e4:	4603      	mov	r3, r0
 802d0e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 802d0e8:	89fb      	ldrh	r3, [r7, #14]
 802d0ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802d0ee:	4293      	cmp	r3, r2
 802d0f0:	d00a      	beq.n	802d108 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 802d0f2:	78fa      	ldrb	r2, [r7, #3]
 802d0f4:	89fb      	ldrh	r3, [r7, #14]
 802d0f6:	f003 030f 	and.w	r3, r3, #15
 802d0fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802d0fe:	6879      	ldr	r1, [r7, #4]
 802d100:	33e0      	adds	r3, #224	; 0xe0
 802d102:	009b      	lsls	r3, r3, #2
 802d104:	440b      	add	r3, r1
 802d106:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 802d108:	89fb      	ldrh	r3, [r7, #14]
 802d10a:	b2db      	uxtb	r3, r3
}
 802d10c:	4618      	mov	r0, r3
 802d10e:	3710      	adds	r7, #16
 802d110:	46bd      	mov	sp, r7
 802d112:	bd80      	pop	{r7, pc}

0802d114 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 802d114:	b480      	push	{r7}
 802d116:	b083      	sub	sp, #12
 802d118:	af00      	add	r7, sp, #0
 802d11a:	6078      	str	r0, [r7, #4]
 802d11c:	460b      	mov	r3, r1
 802d11e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 802d120:	78fb      	ldrb	r3, [r7, #3]
 802d122:	2b0f      	cmp	r3, #15
 802d124:	d80d      	bhi.n	802d142 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 802d126:	78fb      	ldrb	r3, [r7, #3]
 802d128:	687a      	ldr	r2, [r7, #4]
 802d12a:	33e0      	adds	r3, #224	; 0xe0
 802d12c:	009b      	lsls	r3, r3, #2
 802d12e:	4413      	add	r3, r2
 802d130:	685a      	ldr	r2, [r3, #4]
 802d132:	78fb      	ldrb	r3, [r7, #3]
 802d134:	f3c2 020e 	ubfx	r2, r2, #0, #15
 802d138:	6879      	ldr	r1, [r7, #4]
 802d13a:	33e0      	adds	r3, #224	; 0xe0
 802d13c:	009b      	lsls	r3, r3, #2
 802d13e:	440b      	add	r3, r1
 802d140:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 802d142:	2300      	movs	r3, #0
}
 802d144:	4618      	mov	r0, r3
 802d146:	370c      	adds	r7, #12
 802d148:	46bd      	mov	sp, r7
 802d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d14e:	4770      	bx	lr

0802d150 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 802d150:	b480      	push	{r7}
 802d152:	b085      	sub	sp, #20
 802d154:	af00      	add	r7, sp, #0
 802d156:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 802d158:	2300      	movs	r3, #0
 802d15a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802d15c:	2300      	movs	r3, #0
 802d15e:	73fb      	strb	r3, [r7, #15]
 802d160:	e00f      	b.n	802d182 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 802d162:	7bfb      	ldrb	r3, [r7, #15]
 802d164:	687a      	ldr	r2, [r7, #4]
 802d166:	33e0      	adds	r3, #224	; 0xe0
 802d168:	009b      	lsls	r3, r3, #2
 802d16a:	4413      	add	r3, r2
 802d16c:	685b      	ldr	r3, [r3, #4]
 802d16e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d172:	2b00      	cmp	r3, #0
 802d174:	d102      	bne.n	802d17c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 802d176:	7bfb      	ldrb	r3, [r7, #15]
 802d178:	b29b      	uxth	r3, r3
 802d17a:	e007      	b.n	802d18c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802d17c:	7bfb      	ldrb	r3, [r7, #15]
 802d17e:	3301      	adds	r3, #1
 802d180:	73fb      	strb	r3, [r7, #15]
 802d182:	7bfb      	ldrb	r3, [r7, #15]
 802d184:	2b0f      	cmp	r3, #15
 802d186:	d9ec      	bls.n	802d162 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 802d188:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 802d18c:	4618      	mov	r0, r3
 802d18e:	3714      	adds	r7, #20
 802d190:	46bd      	mov	sp, r7
 802d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d196:	4770      	bx	lr

0802d198 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 802d198:	b580      	push	{r7, lr}
 802d19a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 802d19c:	2200      	movs	r2, #0
 802d19e:	490e      	ldr	r1, [pc, #56]	; (802d1d8 <MX_USB_HOST_Init+0x40>)
 802d1a0:	480e      	ldr	r0, [pc, #56]	; (802d1dc <MX_USB_HOST_Init+0x44>)
 802d1a2:	f7fe fba7 	bl	802b8f4 <USBH_Init>
 802d1a6:	4603      	mov	r3, r0
 802d1a8:	2b00      	cmp	r3, #0
 802d1aa:	d001      	beq.n	802d1b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 802d1ac:	f7f3 fe68 	bl	8020e80 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 802d1b0:	490b      	ldr	r1, [pc, #44]	; (802d1e0 <MX_USB_HOST_Init+0x48>)
 802d1b2:	480a      	ldr	r0, [pc, #40]	; (802d1dc <MX_USB_HOST_Init+0x44>)
 802d1b4:	f7fe fc2c 	bl	802ba10 <USBH_RegisterClass>
 802d1b8:	4603      	mov	r3, r0
 802d1ba:	2b00      	cmp	r3, #0
 802d1bc:	d001      	beq.n	802d1c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 802d1be:	f7f3 fe5f 	bl	8020e80 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 802d1c2:	4806      	ldr	r0, [pc, #24]	; (802d1dc <MX_USB_HOST_Init+0x44>)
 802d1c4:	f7fe fcb0 	bl	802bb28 <USBH_Start>
 802d1c8:	4603      	mov	r3, r0
 802d1ca:	2b00      	cmp	r3, #0
 802d1cc:	d001      	beq.n	802d1d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 802d1ce:	f7f3 fe57 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 802d1d2:	bf00      	nop
 802d1d4:	bd80      	pop	{r7, pc}
 802d1d6:	bf00      	nop
 802d1d8:	0802d1f9 	.word	0x0802d1f9
 802d1dc:	20000af0 	.word	0x20000af0
 802d1e0:	2000005c 	.word	0x2000005c

0802d1e4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 802d1e4:	b580      	push	{r7, lr}
 802d1e6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 802d1e8:	4802      	ldr	r0, [pc, #8]	; (802d1f4 <MX_USB_HOST_Process+0x10>)
 802d1ea:	f7fe fcad 	bl	802bb48 <USBH_Process>
}
 802d1ee:	bf00      	nop
 802d1f0:	bd80      	pop	{r7, pc}
 802d1f2:	bf00      	nop
 802d1f4:	20000af0 	.word	0x20000af0

0802d1f8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 802d1f8:	b480      	push	{r7}
 802d1fa:	b083      	sub	sp, #12
 802d1fc:	af00      	add	r7, sp, #0
 802d1fe:	6078      	str	r0, [r7, #4]
 802d200:	460b      	mov	r3, r1
 802d202:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 802d204:	78fb      	ldrb	r3, [r7, #3]
 802d206:	3b01      	subs	r3, #1
 802d208:	2b04      	cmp	r3, #4
 802d20a:	d819      	bhi.n	802d240 <USBH_UserProcess+0x48>
 802d20c:	a201      	add	r2, pc, #4	; (adr r2, 802d214 <USBH_UserProcess+0x1c>)
 802d20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d212:	bf00      	nop
 802d214:	0802d241 	.word	0x0802d241
 802d218:	0802d231 	.word	0x0802d231
 802d21c:	0802d241 	.word	0x0802d241
 802d220:	0802d239 	.word	0x0802d239
 802d224:	0802d229 	.word	0x0802d229
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 802d228:	4b09      	ldr	r3, [pc, #36]	; (802d250 <USBH_UserProcess+0x58>)
 802d22a:	2203      	movs	r2, #3
 802d22c:	701a      	strb	r2, [r3, #0]
  break;
 802d22e:	e008      	b.n	802d242 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 802d230:	4b07      	ldr	r3, [pc, #28]	; (802d250 <USBH_UserProcess+0x58>)
 802d232:	2202      	movs	r2, #2
 802d234:	701a      	strb	r2, [r3, #0]
  break;
 802d236:	e004      	b.n	802d242 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 802d238:	4b05      	ldr	r3, [pc, #20]	; (802d250 <USBH_UserProcess+0x58>)
 802d23a:	2201      	movs	r2, #1
 802d23c:	701a      	strb	r2, [r3, #0]
  break;
 802d23e:	e000      	b.n	802d242 <USBH_UserProcess+0x4a>

  default:
  break;
 802d240:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 802d242:	bf00      	nop
 802d244:	370c      	adds	r7, #12
 802d246:	46bd      	mov	sp, r7
 802d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d24c:	4770      	bx	lr
 802d24e:	bf00      	nop
 802d250:	20000ec8 	.word	0x20000ec8

0802d254 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 802d254:	b580      	push	{r7, lr}
 802d256:	b08a      	sub	sp, #40	; 0x28
 802d258:	af00      	add	r7, sp, #0
 802d25a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802d25c:	f107 0314 	add.w	r3, r7, #20
 802d260:	2200      	movs	r2, #0
 802d262:	601a      	str	r2, [r3, #0]
 802d264:	605a      	str	r2, [r3, #4]
 802d266:	609a      	str	r2, [r3, #8]
 802d268:	60da      	str	r2, [r3, #12]
 802d26a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 802d26c:	687b      	ldr	r3, [r7, #4]
 802d26e:	681b      	ldr	r3, [r3, #0]
 802d270:	4a24      	ldr	r2, [pc, #144]	; (802d304 <HAL_HCD_MspInit+0xb0>)
 802d272:	4293      	cmp	r3, r2
 802d274:	d141      	bne.n	802d2fa <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802d276:	2300      	movs	r3, #0
 802d278:	613b      	str	r3, [r7, #16]
 802d27a:	4b23      	ldr	r3, [pc, #140]	; (802d308 <HAL_HCD_MspInit+0xb4>)
 802d27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802d27e:	4a22      	ldr	r2, [pc, #136]	; (802d308 <HAL_HCD_MspInit+0xb4>)
 802d280:	f043 0302 	orr.w	r3, r3, #2
 802d284:	6313      	str	r3, [r2, #48]	; 0x30
 802d286:	4b20      	ldr	r3, [pc, #128]	; (802d308 <HAL_HCD_MspInit+0xb4>)
 802d288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802d28a:	f003 0302 	and.w	r3, r3, #2
 802d28e:	613b      	str	r3, [r7, #16]
 802d290:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 802d292:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 802d296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802d298:	2302      	movs	r3, #2
 802d29a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802d29c:	2300      	movs	r3, #0
 802d29e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802d2a0:	2300      	movs	r3, #0
 802d2a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 802d2a4:	230c      	movs	r3, #12
 802d2a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802d2a8:	f107 0314 	add.w	r3, r7, #20
 802d2ac:	4619      	mov	r1, r3
 802d2ae:	4817      	ldr	r0, [pc, #92]	; (802d30c <HAL_HCD_MspInit+0xb8>)
 802d2b0:	f7f6 ffcc 	bl	802424c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 802d2b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802d2b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802d2ba:	2300      	movs	r3, #0
 802d2bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802d2be:	2300      	movs	r3, #0
 802d2c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 802d2c2:	f107 0314 	add.w	r3, r7, #20
 802d2c6:	4619      	mov	r1, r3
 802d2c8:	4810      	ldr	r0, [pc, #64]	; (802d30c <HAL_HCD_MspInit+0xb8>)
 802d2ca:	f7f6 ffbf 	bl	802424c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 802d2ce:	2300      	movs	r3, #0
 802d2d0:	60fb      	str	r3, [r7, #12]
 802d2d2:	4b0d      	ldr	r3, [pc, #52]	; (802d308 <HAL_HCD_MspInit+0xb4>)
 802d2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802d2d6:	4a0c      	ldr	r2, [pc, #48]	; (802d308 <HAL_HCD_MspInit+0xb4>)
 802d2d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802d2dc:	6313      	str	r3, [r2, #48]	; 0x30
 802d2de:	4b0a      	ldr	r3, [pc, #40]	; (802d308 <HAL_HCD_MspInit+0xb4>)
 802d2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802d2e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802d2e6:	60fb      	str	r3, [r7, #12]
 802d2e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 802d2ea:	2200      	movs	r2, #0
 802d2ec:	2100      	movs	r1, #0
 802d2ee:	204d      	movs	r0, #77	; 0x4d
 802d2f0:	f7f6 f97a 	bl	80235e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 802d2f4:	204d      	movs	r0, #77	; 0x4d
 802d2f6:	f7f6 f993 	bl	8023620 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 802d2fa:	bf00      	nop
 802d2fc:	3728      	adds	r7, #40	; 0x28
 802d2fe:	46bd      	mov	sp, r7
 802d300:	bd80      	pop	{r7, pc}
 802d302:	bf00      	nop
 802d304:	40040000 	.word	0x40040000
 802d308:	40023800 	.word	0x40023800
 802d30c:	40020400 	.word	0x40020400

0802d310 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 802d310:	b580      	push	{r7, lr}
 802d312:	b082      	sub	sp, #8
 802d314:	af00      	add	r7, sp, #0
 802d316:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 802d318:	687b      	ldr	r3, [r7, #4]
 802d31a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d31e:	4618      	mov	r0, r3
 802d320:	f7fe fff1 	bl	802c306 <USBH_LL_IncTimer>
}
 802d324:	bf00      	nop
 802d326:	3708      	adds	r7, #8
 802d328:	46bd      	mov	sp, r7
 802d32a:	bd80      	pop	{r7, pc}

0802d32c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 802d32c:	b580      	push	{r7, lr}
 802d32e:	b082      	sub	sp, #8
 802d330:	af00      	add	r7, sp, #0
 802d332:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 802d334:	687b      	ldr	r3, [r7, #4]
 802d336:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d33a:	4618      	mov	r0, r3
 802d33c:	f7ff f829 	bl	802c392 <USBH_LL_Connect>
}
 802d340:	bf00      	nop
 802d342:	3708      	adds	r7, #8
 802d344:	46bd      	mov	sp, r7
 802d346:	bd80      	pop	{r7, pc}

0802d348 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 802d348:	b580      	push	{r7, lr}
 802d34a:	b082      	sub	sp, #8
 802d34c:	af00      	add	r7, sp, #0
 802d34e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 802d350:	687b      	ldr	r3, [r7, #4]
 802d352:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d356:	4618      	mov	r0, r3
 802d358:	f7ff f832 	bl	802c3c0 <USBH_LL_Disconnect>
}
 802d35c:	bf00      	nop
 802d35e:	3708      	adds	r7, #8
 802d360:	46bd      	mov	sp, r7
 802d362:	bd80      	pop	{r7, pc}

0802d364 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 802d364:	b480      	push	{r7}
 802d366:	b083      	sub	sp, #12
 802d368:	af00      	add	r7, sp, #0
 802d36a:	6078      	str	r0, [r7, #4]
 802d36c:	460b      	mov	r3, r1
 802d36e:	70fb      	strb	r3, [r7, #3]
 802d370:	4613      	mov	r3, r2
 802d372:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 802d374:	bf00      	nop
 802d376:	370c      	adds	r7, #12
 802d378:	46bd      	mov	sp, r7
 802d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d37e:	4770      	bx	lr

0802d380 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802d380:	b580      	push	{r7, lr}
 802d382:	b082      	sub	sp, #8
 802d384:	af00      	add	r7, sp, #0
 802d386:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 802d388:	687b      	ldr	r3, [r7, #4]
 802d38a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d38e:	4618      	mov	r0, r3
 802d390:	f7fe ffe3 	bl	802c35a <USBH_LL_PortEnabled>
}
 802d394:	bf00      	nop
 802d396:	3708      	adds	r7, #8
 802d398:	46bd      	mov	sp, r7
 802d39a:	bd80      	pop	{r7, pc}

0802d39c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802d39c:	b580      	push	{r7, lr}
 802d39e:	b082      	sub	sp, #8
 802d3a0:	af00      	add	r7, sp, #0
 802d3a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 802d3a4:	687b      	ldr	r3, [r7, #4]
 802d3a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d3aa:	4618      	mov	r0, r3
 802d3ac:	f7fe ffe3 	bl	802c376 <USBH_LL_PortDisabled>
}
 802d3b0:	bf00      	nop
 802d3b2:	3708      	adds	r7, #8
 802d3b4:	46bd      	mov	sp, r7
 802d3b6:	bd80      	pop	{r7, pc}

0802d3b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 802d3b8:	b580      	push	{r7, lr}
 802d3ba:	b082      	sub	sp, #8
 802d3bc:	af00      	add	r7, sp, #0
 802d3be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 802d3c0:	687b      	ldr	r3, [r7, #4]
 802d3c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802d3c6:	2b00      	cmp	r3, #0
 802d3c8:	d132      	bne.n	802d430 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 802d3ca:	4a1c      	ldr	r2, [pc, #112]	; (802d43c <USBH_LL_Init+0x84>)
 802d3cc:	687b      	ldr	r3, [r7, #4]
 802d3ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 802d3d2:	687b      	ldr	r3, [r7, #4]
 802d3d4:	4a19      	ldr	r2, [pc, #100]	; (802d43c <USBH_LL_Init+0x84>)
 802d3d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 802d3da:	4b18      	ldr	r3, [pc, #96]	; (802d43c <USBH_LL_Init+0x84>)
 802d3dc:	4a18      	ldr	r2, [pc, #96]	; (802d440 <USBH_LL_Init+0x88>)
 802d3de:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 802d3e0:	4b16      	ldr	r3, [pc, #88]	; (802d43c <USBH_LL_Init+0x84>)
 802d3e2:	220c      	movs	r2, #12
 802d3e4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 802d3e6:	4b15      	ldr	r3, [pc, #84]	; (802d43c <USBH_LL_Init+0x84>)
 802d3e8:	2201      	movs	r2, #1
 802d3ea:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 802d3ec:	4b13      	ldr	r3, [pc, #76]	; (802d43c <USBH_LL_Init+0x84>)
 802d3ee:	2200      	movs	r2, #0
 802d3f0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 802d3f2:	4b12      	ldr	r3, [pc, #72]	; (802d43c <USBH_LL_Init+0x84>)
 802d3f4:	2202      	movs	r2, #2
 802d3f6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 802d3f8:	4b10      	ldr	r3, [pc, #64]	; (802d43c <USBH_LL_Init+0x84>)
 802d3fa:	2200      	movs	r2, #0
 802d3fc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 802d3fe:	4b0f      	ldr	r3, [pc, #60]	; (802d43c <USBH_LL_Init+0x84>)
 802d400:	2200      	movs	r2, #0
 802d402:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 802d404:	4b0d      	ldr	r3, [pc, #52]	; (802d43c <USBH_LL_Init+0x84>)
 802d406:	2200      	movs	r2, #0
 802d408:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 802d40a:	4b0c      	ldr	r3, [pc, #48]	; (802d43c <USBH_LL_Init+0x84>)
 802d40c:	2200      	movs	r2, #0
 802d40e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 802d410:	480a      	ldr	r0, [pc, #40]	; (802d43c <USBH_LL_Init+0x84>)
 802d412:	f7f7 fa05 	bl	8024820 <HAL_HCD_Init>
 802d416:	4603      	mov	r3, r0
 802d418:	2b00      	cmp	r3, #0
 802d41a:	d001      	beq.n	802d420 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 802d41c:	f7f3 fd30 	bl	8020e80 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 802d420:	4806      	ldr	r0, [pc, #24]	; (802d43c <USBH_LL_Init+0x84>)
 802d422:	f7f7 fde8 	bl	8024ff6 <HAL_HCD_GetCurrentFrame>
 802d426:	4603      	mov	r3, r0
 802d428:	4619      	mov	r1, r3
 802d42a:	6878      	ldr	r0, [r7, #4]
 802d42c:	f7fe ff5c 	bl	802c2e8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 802d430:	2300      	movs	r3, #0
}
 802d432:	4618      	mov	r0, r3
 802d434:	3708      	adds	r7, #8
 802d436:	46bd      	mov	sp, r7
 802d438:	bd80      	pop	{r7, pc}
 802d43a:	bf00      	nop
 802d43c:	20000ecc 	.word	0x20000ecc
 802d440:	40040000 	.word	0x40040000

0802d444 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 802d444:	b580      	push	{r7, lr}
 802d446:	b084      	sub	sp, #16
 802d448:	af00      	add	r7, sp, #0
 802d44a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d44c:	2300      	movs	r3, #0
 802d44e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d450:	2300      	movs	r3, #0
 802d452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 802d454:	687b      	ldr	r3, [r7, #4]
 802d456:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d45a:	4618      	mov	r0, r3
 802d45c:	f7f7 fd55 	bl	8024f0a <HAL_HCD_Start>
 802d460:	4603      	mov	r3, r0
 802d462:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d464:	7bfb      	ldrb	r3, [r7, #15]
 802d466:	4618      	mov	r0, r3
 802d468:	f000 f95c 	bl	802d724 <USBH_Get_USB_Status>
 802d46c:	4603      	mov	r3, r0
 802d46e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d470:	7bbb      	ldrb	r3, [r7, #14]
}
 802d472:	4618      	mov	r0, r3
 802d474:	3710      	adds	r7, #16
 802d476:	46bd      	mov	sp, r7
 802d478:	bd80      	pop	{r7, pc}

0802d47a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 802d47a:	b580      	push	{r7, lr}
 802d47c:	b084      	sub	sp, #16
 802d47e:	af00      	add	r7, sp, #0
 802d480:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d482:	2300      	movs	r3, #0
 802d484:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d486:	2300      	movs	r3, #0
 802d488:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 802d48a:	687b      	ldr	r3, [r7, #4]
 802d48c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d490:	4618      	mov	r0, r3
 802d492:	f7f7 fd5d 	bl	8024f50 <HAL_HCD_Stop>
 802d496:	4603      	mov	r3, r0
 802d498:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d49a:	7bfb      	ldrb	r3, [r7, #15]
 802d49c:	4618      	mov	r0, r3
 802d49e:	f000 f941 	bl	802d724 <USBH_Get_USB_Status>
 802d4a2:	4603      	mov	r3, r0
 802d4a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d4a6:	7bbb      	ldrb	r3, [r7, #14]
}
 802d4a8:	4618      	mov	r0, r3
 802d4aa:	3710      	adds	r7, #16
 802d4ac:	46bd      	mov	sp, r7
 802d4ae:	bd80      	pop	{r7, pc}

0802d4b0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 802d4b0:	b580      	push	{r7, lr}
 802d4b2:	b084      	sub	sp, #16
 802d4b4:	af00      	add	r7, sp, #0
 802d4b6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 802d4b8:	2301      	movs	r3, #1
 802d4ba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 802d4bc:	687b      	ldr	r3, [r7, #4]
 802d4be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d4c2:	4618      	mov	r0, r3
 802d4c4:	f7f7 fda5 	bl	8025012 <HAL_HCD_GetCurrentSpeed>
 802d4c8:	4603      	mov	r3, r0
 802d4ca:	2b02      	cmp	r3, #2
 802d4cc:	d00c      	beq.n	802d4e8 <USBH_LL_GetSpeed+0x38>
 802d4ce:	2b02      	cmp	r3, #2
 802d4d0:	d80d      	bhi.n	802d4ee <USBH_LL_GetSpeed+0x3e>
 802d4d2:	2b00      	cmp	r3, #0
 802d4d4:	d002      	beq.n	802d4dc <USBH_LL_GetSpeed+0x2c>
 802d4d6:	2b01      	cmp	r3, #1
 802d4d8:	d003      	beq.n	802d4e2 <USBH_LL_GetSpeed+0x32>
 802d4da:	e008      	b.n	802d4ee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 802d4dc:	2300      	movs	r3, #0
 802d4de:	73fb      	strb	r3, [r7, #15]
    break;
 802d4e0:	e008      	b.n	802d4f4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 802d4e2:	2301      	movs	r3, #1
 802d4e4:	73fb      	strb	r3, [r7, #15]
    break;
 802d4e6:	e005      	b.n	802d4f4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 802d4e8:	2302      	movs	r3, #2
 802d4ea:	73fb      	strb	r3, [r7, #15]
    break;
 802d4ec:	e002      	b.n	802d4f4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 802d4ee:	2301      	movs	r3, #1
 802d4f0:	73fb      	strb	r3, [r7, #15]
    break;
 802d4f2:	bf00      	nop
  }
  return  speed;
 802d4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 802d4f6:	4618      	mov	r0, r3
 802d4f8:	3710      	adds	r7, #16
 802d4fa:	46bd      	mov	sp, r7
 802d4fc:	bd80      	pop	{r7, pc}

0802d4fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 802d4fe:	b580      	push	{r7, lr}
 802d500:	b084      	sub	sp, #16
 802d502:	af00      	add	r7, sp, #0
 802d504:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d506:	2300      	movs	r3, #0
 802d508:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d50a:	2300      	movs	r3, #0
 802d50c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 802d50e:	687b      	ldr	r3, [r7, #4]
 802d510:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d514:	4618      	mov	r0, r3
 802d516:	f7f7 fd38 	bl	8024f8a <HAL_HCD_ResetPort>
 802d51a:	4603      	mov	r3, r0
 802d51c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d51e:	7bfb      	ldrb	r3, [r7, #15]
 802d520:	4618      	mov	r0, r3
 802d522:	f000 f8ff 	bl	802d724 <USBH_Get_USB_Status>
 802d526:	4603      	mov	r3, r0
 802d528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d52a:	7bbb      	ldrb	r3, [r7, #14]
}
 802d52c:	4618      	mov	r0, r3
 802d52e:	3710      	adds	r7, #16
 802d530:	46bd      	mov	sp, r7
 802d532:	bd80      	pop	{r7, pc}

0802d534 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802d534:	b580      	push	{r7, lr}
 802d536:	b082      	sub	sp, #8
 802d538:	af00      	add	r7, sp, #0
 802d53a:	6078      	str	r0, [r7, #4]
 802d53c:	460b      	mov	r3, r1
 802d53e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 802d540:	687b      	ldr	r3, [r7, #4]
 802d542:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d546:	78fa      	ldrb	r2, [r7, #3]
 802d548:	4611      	mov	r1, r2
 802d54a:	4618      	mov	r0, r3
 802d54c:	f7f7 fd3f 	bl	8024fce <HAL_HCD_HC_GetXferCount>
 802d550:	4603      	mov	r3, r0
}
 802d552:	4618      	mov	r0, r3
 802d554:	3708      	adds	r7, #8
 802d556:	46bd      	mov	sp, r7
 802d558:	bd80      	pop	{r7, pc}

0802d55a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802d55a:	b590      	push	{r4, r7, lr}
 802d55c:	b089      	sub	sp, #36	; 0x24
 802d55e:	af04      	add	r7, sp, #16
 802d560:	6078      	str	r0, [r7, #4]
 802d562:	4608      	mov	r0, r1
 802d564:	4611      	mov	r1, r2
 802d566:	461a      	mov	r2, r3
 802d568:	4603      	mov	r3, r0
 802d56a:	70fb      	strb	r3, [r7, #3]
 802d56c:	460b      	mov	r3, r1
 802d56e:	70bb      	strb	r3, [r7, #2]
 802d570:	4613      	mov	r3, r2
 802d572:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d574:	2300      	movs	r3, #0
 802d576:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d578:	2300      	movs	r3, #0
 802d57a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 802d57c:	687b      	ldr	r3, [r7, #4]
 802d57e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802d582:	787c      	ldrb	r4, [r7, #1]
 802d584:	78ba      	ldrb	r2, [r7, #2]
 802d586:	78f9      	ldrb	r1, [r7, #3]
 802d588:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802d58a:	9302      	str	r3, [sp, #8]
 802d58c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802d590:	9301      	str	r3, [sp, #4]
 802d592:	f897 3020 	ldrb.w	r3, [r7, #32]
 802d596:	9300      	str	r3, [sp, #0]
 802d598:	4623      	mov	r3, r4
 802d59a:	f7f7 f9a3 	bl	80248e4 <HAL_HCD_HC_Init>
 802d59e:	4603      	mov	r3, r0
 802d5a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 802d5a2:	7bfb      	ldrb	r3, [r7, #15]
 802d5a4:	4618      	mov	r0, r3
 802d5a6:	f000 f8bd 	bl	802d724 <USBH_Get_USB_Status>
 802d5aa:	4603      	mov	r3, r0
 802d5ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d5ae:	7bbb      	ldrb	r3, [r7, #14]
}
 802d5b0:	4618      	mov	r0, r3
 802d5b2:	3714      	adds	r7, #20
 802d5b4:	46bd      	mov	sp, r7
 802d5b6:	bd90      	pop	{r4, r7, pc}

0802d5b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802d5b8:	b580      	push	{r7, lr}
 802d5ba:	b084      	sub	sp, #16
 802d5bc:	af00      	add	r7, sp, #0
 802d5be:	6078      	str	r0, [r7, #4]
 802d5c0:	460b      	mov	r3, r1
 802d5c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d5c4:	2300      	movs	r3, #0
 802d5c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d5c8:	2300      	movs	r3, #0
 802d5ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 802d5cc:	687b      	ldr	r3, [r7, #4]
 802d5ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d5d2:	78fa      	ldrb	r2, [r7, #3]
 802d5d4:	4611      	mov	r1, r2
 802d5d6:	4618      	mov	r0, r3
 802d5d8:	f7f7 fa13 	bl	8024a02 <HAL_HCD_HC_Halt>
 802d5dc:	4603      	mov	r3, r0
 802d5de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d5e0:	7bfb      	ldrb	r3, [r7, #15]
 802d5e2:	4618      	mov	r0, r3
 802d5e4:	f000 f89e 	bl	802d724 <USBH_Get_USB_Status>
 802d5e8:	4603      	mov	r3, r0
 802d5ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d5ec:	7bbb      	ldrb	r3, [r7, #14]
}
 802d5ee:	4618      	mov	r0, r3
 802d5f0:	3710      	adds	r7, #16
 802d5f2:	46bd      	mov	sp, r7
 802d5f4:	bd80      	pop	{r7, pc}

0802d5f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 802d5f6:	b590      	push	{r4, r7, lr}
 802d5f8:	b089      	sub	sp, #36	; 0x24
 802d5fa:	af04      	add	r7, sp, #16
 802d5fc:	6078      	str	r0, [r7, #4]
 802d5fe:	4608      	mov	r0, r1
 802d600:	4611      	mov	r1, r2
 802d602:	461a      	mov	r2, r3
 802d604:	4603      	mov	r3, r0
 802d606:	70fb      	strb	r3, [r7, #3]
 802d608:	460b      	mov	r3, r1
 802d60a:	70bb      	strb	r3, [r7, #2]
 802d60c:	4613      	mov	r3, r2
 802d60e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d610:	2300      	movs	r3, #0
 802d612:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d614:	2300      	movs	r3, #0
 802d616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 802d618:	687b      	ldr	r3, [r7, #4]
 802d61a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802d61e:	787c      	ldrb	r4, [r7, #1]
 802d620:	78ba      	ldrb	r2, [r7, #2]
 802d622:	78f9      	ldrb	r1, [r7, #3]
 802d624:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802d628:	9303      	str	r3, [sp, #12]
 802d62a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802d62c:	9302      	str	r3, [sp, #8]
 802d62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d630:	9301      	str	r3, [sp, #4]
 802d632:	f897 3020 	ldrb.w	r3, [r7, #32]
 802d636:	9300      	str	r3, [sp, #0]
 802d638:	4623      	mov	r3, r4
 802d63a:	f7f7 fa05 	bl	8024a48 <HAL_HCD_HC_SubmitRequest>
 802d63e:	4603      	mov	r3, r0
 802d640:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 802d642:	7bfb      	ldrb	r3, [r7, #15]
 802d644:	4618      	mov	r0, r3
 802d646:	f000 f86d 	bl	802d724 <USBH_Get_USB_Status>
 802d64a:	4603      	mov	r3, r0
 802d64c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d64e:	7bbb      	ldrb	r3, [r7, #14]
}
 802d650:	4618      	mov	r0, r3
 802d652:	3714      	adds	r7, #20
 802d654:	46bd      	mov	sp, r7
 802d656:	bd90      	pop	{r4, r7, pc}

0802d658 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802d658:	b580      	push	{r7, lr}
 802d65a:	b082      	sub	sp, #8
 802d65c:	af00      	add	r7, sp, #0
 802d65e:	6078      	str	r0, [r7, #4]
 802d660:	460b      	mov	r3, r1
 802d662:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 802d664:	687b      	ldr	r3, [r7, #4]
 802d666:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d66a:	78fa      	ldrb	r2, [r7, #3]
 802d66c:	4611      	mov	r1, r2
 802d66e:	4618      	mov	r0, r3
 802d670:	f7f7 fc99 	bl	8024fa6 <HAL_HCD_HC_GetURBState>
 802d674:	4603      	mov	r3, r0
}
 802d676:	4618      	mov	r0, r3
 802d678:	3708      	adds	r7, #8
 802d67a:	46bd      	mov	sp, r7
 802d67c:	bd80      	pop	{r7, pc}

0802d67e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 802d67e:	b580      	push	{r7, lr}
 802d680:	b082      	sub	sp, #8
 802d682:	af00      	add	r7, sp, #0
 802d684:	6078      	str	r0, [r7, #4]
 802d686:	460b      	mov	r3, r1
 802d688:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 802d68a:	687b      	ldr	r3, [r7, #4]
 802d68c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802d690:	2b00      	cmp	r3, #0
 802d692:	d103      	bne.n	802d69c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 802d694:	78fb      	ldrb	r3, [r7, #3]
 802d696:	4618      	mov	r0, r3
 802d698:	f000 f870 	bl	802d77c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 802d69c:	20c8      	movs	r0, #200	; 0xc8
 802d69e:	f7f5 fec7 	bl	8023430 <HAL_Delay>
  return USBH_OK;
 802d6a2:	2300      	movs	r3, #0
}
 802d6a4:	4618      	mov	r0, r3
 802d6a6:	3708      	adds	r7, #8
 802d6a8:	46bd      	mov	sp, r7
 802d6aa:	bd80      	pop	{r7, pc}

0802d6ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 802d6ac:	b480      	push	{r7}
 802d6ae:	b085      	sub	sp, #20
 802d6b0:	af00      	add	r7, sp, #0
 802d6b2:	6078      	str	r0, [r7, #4]
 802d6b4:	460b      	mov	r3, r1
 802d6b6:	70fb      	strb	r3, [r7, #3]
 802d6b8:	4613      	mov	r3, r2
 802d6ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 802d6bc:	687b      	ldr	r3, [r7, #4]
 802d6be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d6c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 802d6c4:	78fb      	ldrb	r3, [r7, #3]
 802d6c6:	68fa      	ldr	r2, [r7, #12]
 802d6c8:	212c      	movs	r1, #44	; 0x2c
 802d6ca:	fb01 f303 	mul.w	r3, r1, r3
 802d6ce:	4413      	add	r3, r2
 802d6d0:	333b      	adds	r3, #59	; 0x3b
 802d6d2:	781b      	ldrb	r3, [r3, #0]
 802d6d4:	2b00      	cmp	r3, #0
 802d6d6:	d009      	beq.n	802d6ec <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 802d6d8:	78fb      	ldrb	r3, [r7, #3]
 802d6da:	68fa      	ldr	r2, [r7, #12]
 802d6dc:	212c      	movs	r1, #44	; 0x2c
 802d6de:	fb01 f303 	mul.w	r3, r1, r3
 802d6e2:	4413      	add	r3, r2
 802d6e4:	3354      	adds	r3, #84	; 0x54
 802d6e6:	78ba      	ldrb	r2, [r7, #2]
 802d6e8:	701a      	strb	r2, [r3, #0]
 802d6ea:	e008      	b.n	802d6fe <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 802d6ec:	78fb      	ldrb	r3, [r7, #3]
 802d6ee:	68fa      	ldr	r2, [r7, #12]
 802d6f0:	212c      	movs	r1, #44	; 0x2c
 802d6f2:	fb01 f303 	mul.w	r3, r1, r3
 802d6f6:	4413      	add	r3, r2
 802d6f8:	3355      	adds	r3, #85	; 0x55
 802d6fa:	78ba      	ldrb	r2, [r7, #2]
 802d6fc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 802d6fe:	2300      	movs	r3, #0
}
 802d700:	4618      	mov	r0, r3
 802d702:	3714      	adds	r7, #20
 802d704:	46bd      	mov	sp, r7
 802d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d70a:	4770      	bx	lr

0802d70c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 802d70c:	b580      	push	{r7, lr}
 802d70e:	b082      	sub	sp, #8
 802d710:	af00      	add	r7, sp, #0
 802d712:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 802d714:	6878      	ldr	r0, [r7, #4]
 802d716:	f7f5 fe8b 	bl	8023430 <HAL_Delay>
}
 802d71a:	bf00      	nop
 802d71c:	3708      	adds	r7, #8
 802d71e:	46bd      	mov	sp, r7
 802d720:	bd80      	pop	{r7, pc}
	...

0802d724 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802d724:	b480      	push	{r7}
 802d726:	b085      	sub	sp, #20
 802d728:	af00      	add	r7, sp, #0
 802d72a:	4603      	mov	r3, r0
 802d72c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d72e:	2300      	movs	r3, #0
 802d730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802d732:	79fb      	ldrb	r3, [r7, #7]
 802d734:	2b03      	cmp	r3, #3
 802d736:	d817      	bhi.n	802d768 <USBH_Get_USB_Status+0x44>
 802d738:	a201      	add	r2, pc, #4	; (adr r2, 802d740 <USBH_Get_USB_Status+0x1c>)
 802d73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d73e:	bf00      	nop
 802d740:	0802d751 	.word	0x0802d751
 802d744:	0802d757 	.word	0x0802d757
 802d748:	0802d75d 	.word	0x0802d75d
 802d74c:	0802d763 	.word	0x0802d763
  {
    case HAL_OK :
      usb_status = USBH_OK;
 802d750:	2300      	movs	r3, #0
 802d752:	73fb      	strb	r3, [r7, #15]
    break;
 802d754:	e00b      	b.n	802d76e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 802d756:	2302      	movs	r3, #2
 802d758:	73fb      	strb	r3, [r7, #15]
    break;
 802d75a:	e008      	b.n	802d76e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 802d75c:	2301      	movs	r3, #1
 802d75e:	73fb      	strb	r3, [r7, #15]
    break;
 802d760:	e005      	b.n	802d76e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 802d762:	2302      	movs	r3, #2
 802d764:	73fb      	strb	r3, [r7, #15]
    break;
 802d766:	e002      	b.n	802d76e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 802d768:	2302      	movs	r3, #2
 802d76a:	73fb      	strb	r3, [r7, #15]
    break;
 802d76c:	bf00      	nop
  }
  return usb_status;
 802d76e:	7bfb      	ldrb	r3, [r7, #15]
}
 802d770:	4618      	mov	r0, r3
 802d772:	3714      	adds	r7, #20
 802d774:	46bd      	mov	sp, r7
 802d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d77a:	4770      	bx	lr

0802d77c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 802d77c:	b580      	push	{r7, lr}
 802d77e:	b084      	sub	sp, #16
 802d780:	af00      	add	r7, sp, #0
 802d782:	4603      	mov	r3, r0
 802d784:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 802d786:	79fb      	ldrb	r3, [r7, #7]
 802d788:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 802d78a:	79fb      	ldrb	r3, [r7, #7]
 802d78c:	2b00      	cmp	r3, #0
 802d78e:	d102      	bne.n	802d796 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 802d790:	2301      	movs	r3, #1
 802d792:	73fb      	strb	r3, [r7, #15]
 802d794:	e001      	b.n	802d79a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 802d796:	2300      	movs	r3, #0
 802d798:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 802d79a:	7bfb      	ldrb	r3, [r7, #15]
 802d79c:	461a      	mov	r2, r3
 802d79e:	2110      	movs	r1, #16
 802d7a0:	4803      	ldr	r0, [pc, #12]	; (802d7b0 <MX_DriverVbusHS+0x34>)
 802d7a2:	f7f7 f80b 	bl	80247bc <HAL_GPIO_WritePin>
}
 802d7a6:	bf00      	nop
 802d7a8:	3710      	adds	r7, #16
 802d7aa:	46bd      	mov	sp, r7
 802d7ac:	bd80      	pop	{r7, pc}
 802d7ae:	bf00      	nop
 802d7b0:	40020800 	.word	0x40020800

0802d7b4 <__errno>:
 802d7b4:	4b01      	ldr	r3, [pc, #4]	; (802d7bc <__errno+0x8>)
 802d7b6:	6818      	ldr	r0, [r3, #0]
 802d7b8:	4770      	bx	lr
 802d7ba:	bf00      	nop
 802d7bc:	2000007c 	.word	0x2000007c

0802d7c0 <__libc_init_array>:
 802d7c0:	b570      	push	{r4, r5, r6, lr}
 802d7c2:	4d0d      	ldr	r5, [pc, #52]	; (802d7f8 <__libc_init_array+0x38>)
 802d7c4:	4c0d      	ldr	r4, [pc, #52]	; (802d7fc <__libc_init_array+0x3c>)
 802d7c6:	1b64      	subs	r4, r4, r5
 802d7c8:	10a4      	asrs	r4, r4, #2
 802d7ca:	2600      	movs	r6, #0
 802d7cc:	42a6      	cmp	r6, r4
 802d7ce:	d109      	bne.n	802d7e4 <__libc_init_array+0x24>
 802d7d0:	4d0b      	ldr	r5, [pc, #44]	; (802d800 <__libc_init_array+0x40>)
 802d7d2:	4c0c      	ldr	r4, [pc, #48]	; (802d804 <__libc_init_array+0x44>)
 802d7d4:	f001 fa10 	bl	802ebf8 <_init>
 802d7d8:	1b64      	subs	r4, r4, r5
 802d7da:	10a4      	asrs	r4, r4, #2
 802d7dc:	2600      	movs	r6, #0
 802d7de:	42a6      	cmp	r6, r4
 802d7e0:	d105      	bne.n	802d7ee <__libc_init_array+0x2e>
 802d7e2:	bd70      	pop	{r4, r5, r6, pc}
 802d7e4:	f855 3b04 	ldr.w	r3, [r5], #4
 802d7e8:	4798      	blx	r3
 802d7ea:	3601      	adds	r6, #1
 802d7ec:	e7ee      	b.n	802d7cc <__libc_init_array+0xc>
 802d7ee:	f855 3b04 	ldr.w	r3, [r5], #4
 802d7f2:	4798      	blx	r3
 802d7f4:	3601      	adds	r6, #1
 802d7f6:	e7f2      	b.n	802d7de <__libc_init_array+0x1e>
 802d7f8:	080311e4 	.word	0x080311e4
 802d7fc:	080311e4 	.word	0x080311e4
 802d800:	080311e4 	.word	0x080311e4
 802d804:	080311e8 	.word	0x080311e8

0802d808 <malloc>:
 802d808:	4b02      	ldr	r3, [pc, #8]	; (802d814 <malloc+0xc>)
 802d80a:	4601      	mov	r1, r0
 802d80c:	6818      	ldr	r0, [r3, #0]
 802d80e:	f000 b87f 	b.w	802d910 <_malloc_r>
 802d812:	bf00      	nop
 802d814:	2000007c 	.word	0x2000007c

0802d818 <free>:
 802d818:	4b02      	ldr	r3, [pc, #8]	; (802d824 <free+0xc>)
 802d81a:	4601      	mov	r1, r0
 802d81c:	6818      	ldr	r0, [r3, #0]
 802d81e:	f000 b80b 	b.w	802d838 <_free_r>
 802d822:	bf00      	nop
 802d824:	2000007c 	.word	0x2000007c

0802d828 <memset>:
 802d828:	4402      	add	r2, r0
 802d82a:	4603      	mov	r3, r0
 802d82c:	4293      	cmp	r3, r2
 802d82e:	d100      	bne.n	802d832 <memset+0xa>
 802d830:	4770      	bx	lr
 802d832:	f803 1b01 	strb.w	r1, [r3], #1
 802d836:	e7f9      	b.n	802d82c <memset+0x4>

0802d838 <_free_r>:
 802d838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802d83a:	2900      	cmp	r1, #0
 802d83c:	d044      	beq.n	802d8c8 <_free_r+0x90>
 802d83e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802d842:	9001      	str	r0, [sp, #4]
 802d844:	2b00      	cmp	r3, #0
 802d846:	f1a1 0404 	sub.w	r4, r1, #4
 802d84a:	bfb8      	it	lt
 802d84c:	18e4      	addlt	r4, r4, r3
 802d84e:	f000 fc71 	bl	802e134 <__malloc_lock>
 802d852:	4a1e      	ldr	r2, [pc, #120]	; (802d8cc <_free_r+0x94>)
 802d854:	9801      	ldr	r0, [sp, #4]
 802d856:	6813      	ldr	r3, [r2, #0]
 802d858:	b933      	cbnz	r3, 802d868 <_free_r+0x30>
 802d85a:	6063      	str	r3, [r4, #4]
 802d85c:	6014      	str	r4, [r2, #0]
 802d85e:	b003      	add	sp, #12
 802d860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d864:	f000 bc6c 	b.w	802e140 <__malloc_unlock>
 802d868:	42a3      	cmp	r3, r4
 802d86a:	d908      	bls.n	802d87e <_free_r+0x46>
 802d86c:	6825      	ldr	r5, [r4, #0]
 802d86e:	1961      	adds	r1, r4, r5
 802d870:	428b      	cmp	r3, r1
 802d872:	bf01      	itttt	eq
 802d874:	6819      	ldreq	r1, [r3, #0]
 802d876:	685b      	ldreq	r3, [r3, #4]
 802d878:	1949      	addeq	r1, r1, r5
 802d87a:	6021      	streq	r1, [r4, #0]
 802d87c:	e7ed      	b.n	802d85a <_free_r+0x22>
 802d87e:	461a      	mov	r2, r3
 802d880:	685b      	ldr	r3, [r3, #4]
 802d882:	b10b      	cbz	r3, 802d888 <_free_r+0x50>
 802d884:	42a3      	cmp	r3, r4
 802d886:	d9fa      	bls.n	802d87e <_free_r+0x46>
 802d888:	6811      	ldr	r1, [r2, #0]
 802d88a:	1855      	adds	r5, r2, r1
 802d88c:	42a5      	cmp	r5, r4
 802d88e:	d10b      	bne.n	802d8a8 <_free_r+0x70>
 802d890:	6824      	ldr	r4, [r4, #0]
 802d892:	4421      	add	r1, r4
 802d894:	1854      	adds	r4, r2, r1
 802d896:	42a3      	cmp	r3, r4
 802d898:	6011      	str	r1, [r2, #0]
 802d89a:	d1e0      	bne.n	802d85e <_free_r+0x26>
 802d89c:	681c      	ldr	r4, [r3, #0]
 802d89e:	685b      	ldr	r3, [r3, #4]
 802d8a0:	6053      	str	r3, [r2, #4]
 802d8a2:	4421      	add	r1, r4
 802d8a4:	6011      	str	r1, [r2, #0]
 802d8a6:	e7da      	b.n	802d85e <_free_r+0x26>
 802d8a8:	d902      	bls.n	802d8b0 <_free_r+0x78>
 802d8aa:	230c      	movs	r3, #12
 802d8ac:	6003      	str	r3, [r0, #0]
 802d8ae:	e7d6      	b.n	802d85e <_free_r+0x26>
 802d8b0:	6825      	ldr	r5, [r4, #0]
 802d8b2:	1961      	adds	r1, r4, r5
 802d8b4:	428b      	cmp	r3, r1
 802d8b6:	bf04      	itt	eq
 802d8b8:	6819      	ldreq	r1, [r3, #0]
 802d8ba:	685b      	ldreq	r3, [r3, #4]
 802d8bc:	6063      	str	r3, [r4, #4]
 802d8be:	bf04      	itt	eq
 802d8c0:	1949      	addeq	r1, r1, r5
 802d8c2:	6021      	streq	r1, [r4, #0]
 802d8c4:	6054      	str	r4, [r2, #4]
 802d8c6:	e7ca      	b.n	802d85e <_free_r+0x26>
 802d8c8:	b003      	add	sp, #12
 802d8ca:	bd30      	pop	{r4, r5, pc}
 802d8cc:	200011d0 	.word	0x200011d0

0802d8d0 <sbrk_aligned>:
 802d8d0:	b570      	push	{r4, r5, r6, lr}
 802d8d2:	4e0e      	ldr	r6, [pc, #56]	; (802d90c <sbrk_aligned+0x3c>)
 802d8d4:	460c      	mov	r4, r1
 802d8d6:	6831      	ldr	r1, [r6, #0]
 802d8d8:	4605      	mov	r5, r0
 802d8da:	b911      	cbnz	r1, 802d8e2 <sbrk_aligned+0x12>
 802d8dc:	f000 f91a 	bl	802db14 <_sbrk_r>
 802d8e0:	6030      	str	r0, [r6, #0]
 802d8e2:	4621      	mov	r1, r4
 802d8e4:	4628      	mov	r0, r5
 802d8e6:	f000 f915 	bl	802db14 <_sbrk_r>
 802d8ea:	1c43      	adds	r3, r0, #1
 802d8ec:	d00a      	beq.n	802d904 <sbrk_aligned+0x34>
 802d8ee:	1cc4      	adds	r4, r0, #3
 802d8f0:	f024 0403 	bic.w	r4, r4, #3
 802d8f4:	42a0      	cmp	r0, r4
 802d8f6:	d007      	beq.n	802d908 <sbrk_aligned+0x38>
 802d8f8:	1a21      	subs	r1, r4, r0
 802d8fa:	4628      	mov	r0, r5
 802d8fc:	f000 f90a 	bl	802db14 <_sbrk_r>
 802d900:	3001      	adds	r0, #1
 802d902:	d101      	bne.n	802d908 <sbrk_aligned+0x38>
 802d904:	f04f 34ff 	mov.w	r4, #4294967295
 802d908:	4620      	mov	r0, r4
 802d90a:	bd70      	pop	{r4, r5, r6, pc}
 802d90c:	200011d4 	.word	0x200011d4

0802d910 <_malloc_r>:
 802d910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d914:	1ccd      	adds	r5, r1, #3
 802d916:	f025 0503 	bic.w	r5, r5, #3
 802d91a:	3508      	adds	r5, #8
 802d91c:	2d0c      	cmp	r5, #12
 802d91e:	bf38      	it	cc
 802d920:	250c      	movcc	r5, #12
 802d922:	2d00      	cmp	r5, #0
 802d924:	4607      	mov	r7, r0
 802d926:	db01      	blt.n	802d92c <_malloc_r+0x1c>
 802d928:	42a9      	cmp	r1, r5
 802d92a:	d905      	bls.n	802d938 <_malloc_r+0x28>
 802d92c:	230c      	movs	r3, #12
 802d92e:	603b      	str	r3, [r7, #0]
 802d930:	2600      	movs	r6, #0
 802d932:	4630      	mov	r0, r6
 802d934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d938:	4e2e      	ldr	r6, [pc, #184]	; (802d9f4 <_malloc_r+0xe4>)
 802d93a:	f000 fbfb 	bl	802e134 <__malloc_lock>
 802d93e:	6833      	ldr	r3, [r6, #0]
 802d940:	461c      	mov	r4, r3
 802d942:	bb34      	cbnz	r4, 802d992 <_malloc_r+0x82>
 802d944:	4629      	mov	r1, r5
 802d946:	4638      	mov	r0, r7
 802d948:	f7ff ffc2 	bl	802d8d0 <sbrk_aligned>
 802d94c:	1c43      	adds	r3, r0, #1
 802d94e:	4604      	mov	r4, r0
 802d950:	d14d      	bne.n	802d9ee <_malloc_r+0xde>
 802d952:	6834      	ldr	r4, [r6, #0]
 802d954:	4626      	mov	r6, r4
 802d956:	2e00      	cmp	r6, #0
 802d958:	d140      	bne.n	802d9dc <_malloc_r+0xcc>
 802d95a:	6823      	ldr	r3, [r4, #0]
 802d95c:	4631      	mov	r1, r6
 802d95e:	4638      	mov	r0, r7
 802d960:	eb04 0803 	add.w	r8, r4, r3
 802d964:	f000 f8d6 	bl	802db14 <_sbrk_r>
 802d968:	4580      	cmp	r8, r0
 802d96a:	d13a      	bne.n	802d9e2 <_malloc_r+0xd2>
 802d96c:	6821      	ldr	r1, [r4, #0]
 802d96e:	3503      	adds	r5, #3
 802d970:	1a6d      	subs	r5, r5, r1
 802d972:	f025 0503 	bic.w	r5, r5, #3
 802d976:	3508      	adds	r5, #8
 802d978:	2d0c      	cmp	r5, #12
 802d97a:	bf38      	it	cc
 802d97c:	250c      	movcc	r5, #12
 802d97e:	4629      	mov	r1, r5
 802d980:	4638      	mov	r0, r7
 802d982:	f7ff ffa5 	bl	802d8d0 <sbrk_aligned>
 802d986:	3001      	adds	r0, #1
 802d988:	d02b      	beq.n	802d9e2 <_malloc_r+0xd2>
 802d98a:	6823      	ldr	r3, [r4, #0]
 802d98c:	442b      	add	r3, r5
 802d98e:	6023      	str	r3, [r4, #0]
 802d990:	e00e      	b.n	802d9b0 <_malloc_r+0xa0>
 802d992:	6822      	ldr	r2, [r4, #0]
 802d994:	1b52      	subs	r2, r2, r5
 802d996:	d41e      	bmi.n	802d9d6 <_malloc_r+0xc6>
 802d998:	2a0b      	cmp	r2, #11
 802d99a:	d916      	bls.n	802d9ca <_malloc_r+0xba>
 802d99c:	1961      	adds	r1, r4, r5
 802d99e:	42a3      	cmp	r3, r4
 802d9a0:	6025      	str	r5, [r4, #0]
 802d9a2:	bf18      	it	ne
 802d9a4:	6059      	strne	r1, [r3, #4]
 802d9a6:	6863      	ldr	r3, [r4, #4]
 802d9a8:	bf08      	it	eq
 802d9aa:	6031      	streq	r1, [r6, #0]
 802d9ac:	5162      	str	r2, [r4, r5]
 802d9ae:	604b      	str	r3, [r1, #4]
 802d9b0:	4638      	mov	r0, r7
 802d9b2:	f104 060b 	add.w	r6, r4, #11
 802d9b6:	f000 fbc3 	bl	802e140 <__malloc_unlock>
 802d9ba:	f026 0607 	bic.w	r6, r6, #7
 802d9be:	1d23      	adds	r3, r4, #4
 802d9c0:	1af2      	subs	r2, r6, r3
 802d9c2:	d0b6      	beq.n	802d932 <_malloc_r+0x22>
 802d9c4:	1b9b      	subs	r3, r3, r6
 802d9c6:	50a3      	str	r3, [r4, r2]
 802d9c8:	e7b3      	b.n	802d932 <_malloc_r+0x22>
 802d9ca:	6862      	ldr	r2, [r4, #4]
 802d9cc:	42a3      	cmp	r3, r4
 802d9ce:	bf0c      	ite	eq
 802d9d0:	6032      	streq	r2, [r6, #0]
 802d9d2:	605a      	strne	r2, [r3, #4]
 802d9d4:	e7ec      	b.n	802d9b0 <_malloc_r+0xa0>
 802d9d6:	4623      	mov	r3, r4
 802d9d8:	6864      	ldr	r4, [r4, #4]
 802d9da:	e7b2      	b.n	802d942 <_malloc_r+0x32>
 802d9dc:	4634      	mov	r4, r6
 802d9de:	6876      	ldr	r6, [r6, #4]
 802d9e0:	e7b9      	b.n	802d956 <_malloc_r+0x46>
 802d9e2:	230c      	movs	r3, #12
 802d9e4:	603b      	str	r3, [r7, #0]
 802d9e6:	4638      	mov	r0, r7
 802d9e8:	f000 fbaa 	bl	802e140 <__malloc_unlock>
 802d9ec:	e7a1      	b.n	802d932 <_malloc_r+0x22>
 802d9ee:	6025      	str	r5, [r4, #0]
 802d9f0:	e7de      	b.n	802d9b0 <_malloc_r+0xa0>
 802d9f2:	bf00      	nop
 802d9f4:	200011d0 	.word	0x200011d0

0802d9f8 <iprintf>:
 802d9f8:	b40f      	push	{r0, r1, r2, r3}
 802d9fa:	4b0a      	ldr	r3, [pc, #40]	; (802da24 <iprintf+0x2c>)
 802d9fc:	b513      	push	{r0, r1, r4, lr}
 802d9fe:	681c      	ldr	r4, [r3, #0]
 802da00:	b124      	cbz	r4, 802da0c <iprintf+0x14>
 802da02:	69a3      	ldr	r3, [r4, #24]
 802da04:	b913      	cbnz	r3, 802da0c <iprintf+0x14>
 802da06:	4620      	mov	r0, r4
 802da08:	f000 fa8e 	bl	802df28 <__sinit>
 802da0c:	ab05      	add	r3, sp, #20
 802da0e:	9a04      	ldr	r2, [sp, #16]
 802da10:	68a1      	ldr	r1, [r4, #8]
 802da12:	9301      	str	r3, [sp, #4]
 802da14:	4620      	mov	r0, r4
 802da16:	f000 fd1f 	bl	802e458 <_vfiprintf_r>
 802da1a:	b002      	add	sp, #8
 802da1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802da20:	b004      	add	sp, #16
 802da22:	4770      	bx	lr
 802da24:	2000007c 	.word	0x2000007c

0802da28 <_puts_r>:
 802da28:	b570      	push	{r4, r5, r6, lr}
 802da2a:	460e      	mov	r6, r1
 802da2c:	4605      	mov	r5, r0
 802da2e:	b118      	cbz	r0, 802da38 <_puts_r+0x10>
 802da30:	6983      	ldr	r3, [r0, #24]
 802da32:	b90b      	cbnz	r3, 802da38 <_puts_r+0x10>
 802da34:	f000 fa78 	bl	802df28 <__sinit>
 802da38:	69ab      	ldr	r3, [r5, #24]
 802da3a:	68ac      	ldr	r4, [r5, #8]
 802da3c:	b913      	cbnz	r3, 802da44 <_puts_r+0x1c>
 802da3e:	4628      	mov	r0, r5
 802da40:	f000 fa72 	bl	802df28 <__sinit>
 802da44:	4b2c      	ldr	r3, [pc, #176]	; (802daf8 <_puts_r+0xd0>)
 802da46:	429c      	cmp	r4, r3
 802da48:	d120      	bne.n	802da8c <_puts_r+0x64>
 802da4a:	686c      	ldr	r4, [r5, #4]
 802da4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802da4e:	07db      	lsls	r3, r3, #31
 802da50:	d405      	bmi.n	802da5e <_puts_r+0x36>
 802da52:	89a3      	ldrh	r3, [r4, #12]
 802da54:	0598      	lsls	r0, r3, #22
 802da56:	d402      	bmi.n	802da5e <_puts_r+0x36>
 802da58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802da5a:	f000 fb03 	bl	802e064 <__retarget_lock_acquire_recursive>
 802da5e:	89a3      	ldrh	r3, [r4, #12]
 802da60:	0719      	lsls	r1, r3, #28
 802da62:	d51d      	bpl.n	802daa0 <_puts_r+0x78>
 802da64:	6923      	ldr	r3, [r4, #16]
 802da66:	b1db      	cbz	r3, 802daa0 <_puts_r+0x78>
 802da68:	3e01      	subs	r6, #1
 802da6a:	68a3      	ldr	r3, [r4, #8]
 802da6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802da70:	3b01      	subs	r3, #1
 802da72:	60a3      	str	r3, [r4, #8]
 802da74:	bb39      	cbnz	r1, 802dac6 <_puts_r+0x9e>
 802da76:	2b00      	cmp	r3, #0
 802da78:	da38      	bge.n	802daec <_puts_r+0xc4>
 802da7a:	4622      	mov	r2, r4
 802da7c:	210a      	movs	r1, #10
 802da7e:	4628      	mov	r0, r5
 802da80:	f000 f878 	bl	802db74 <__swbuf_r>
 802da84:	3001      	adds	r0, #1
 802da86:	d011      	beq.n	802daac <_puts_r+0x84>
 802da88:	250a      	movs	r5, #10
 802da8a:	e011      	b.n	802dab0 <_puts_r+0x88>
 802da8c:	4b1b      	ldr	r3, [pc, #108]	; (802dafc <_puts_r+0xd4>)
 802da8e:	429c      	cmp	r4, r3
 802da90:	d101      	bne.n	802da96 <_puts_r+0x6e>
 802da92:	68ac      	ldr	r4, [r5, #8]
 802da94:	e7da      	b.n	802da4c <_puts_r+0x24>
 802da96:	4b1a      	ldr	r3, [pc, #104]	; (802db00 <_puts_r+0xd8>)
 802da98:	429c      	cmp	r4, r3
 802da9a:	bf08      	it	eq
 802da9c:	68ec      	ldreq	r4, [r5, #12]
 802da9e:	e7d5      	b.n	802da4c <_puts_r+0x24>
 802daa0:	4621      	mov	r1, r4
 802daa2:	4628      	mov	r0, r5
 802daa4:	f000 f8b8 	bl	802dc18 <__swsetup_r>
 802daa8:	2800      	cmp	r0, #0
 802daaa:	d0dd      	beq.n	802da68 <_puts_r+0x40>
 802daac:	f04f 35ff 	mov.w	r5, #4294967295
 802dab0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802dab2:	07da      	lsls	r2, r3, #31
 802dab4:	d405      	bmi.n	802dac2 <_puts_r+0x9a>
 802dab6:	89a3      	ldrh	r3, [r4, #12]
 802dab8:	059b      	lsls	r3, r3, #22
 802daba:	d402      	bmi.n	802dac2 <_puts_r+0x9a>
 802dabc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802dabe:	f000 fad2 	bl	802e066 <__retarget_lock_release_recursive>
 802dac2:	4628      	mov	r0, r5
 802dac4:	bd70      	pop	{r4, r5, r6, pc}
 802dac6:	2b00      	cmp	r3, #0
 802dac8:	da04      	bge.n	802dad4 <_puts_r+0xac>
 802daca:	69a2      	ldr	r2, [r4, #24]
 802dacc:	429a      	cmp	r2, r3
 802dace:	dc06      	bgt.n	802dade <_puts_r+0xb6>
 802dad0:	290a      	cmp	r1, #10
 802dad2:	d004      	beq.n	802dade <_puts_r+0xb6>
 802dad4:	6823      	ldr	r3, [r4, #0]
 802dad6:	1c5a      	adds	r2, r3, #1
 802dad8:	6022      	str	r2, [r4, #0]
 802dada:	7019      	strb	r1, [r3, #0]
 802dadc:	e7c5      	b.n	802da6a <_puts_r+0x42>
 802dade:	4622      	mov	r2, r4
 802dae0:	4628      	mov	r0, r5
 802dae2:	f000 f847 	bl	802db74 <__swbuf_r>
 802dae6:	3001      	adds	r0, #1
 802dae8:	d1bf      	bne.n	802da6a <_puts_r+0x42>
 802daea:	e7df      	b.n	802daac <_puts_r+0x84>
 802daec:	6823      	ldr	r3, [r4, #0]
 802daee:	250a      	movs	r5, #10
 802daf0:	1c5a      	adds	r2, r3, #1
 802daf2:	6022      	str	r2, [r4, #0]
 802daf4:	701d      	strb	r5, [r3, #0]
 802daf6:	e7db      	b.n	802dab0 <_puts_r+0x88>
 802daf8:	08031168 	.word	0x08031168
 802dafc:	08031188 	.word	0x08031188
 802db00:	08031148 	.word	0x08031148

0802db04 <puts>:
 802db04:	4b02      	ldr	r3, [pc, #8]	; (802db10 <puts+0xc>)
 802db06:	4601      	mov	r1, r0
 802db08:	6818      	ldr	r0, [r3, #0]
 802db0a:	f7ff bf8d 	b.w	802da28 <_puts_r>
 802db0e:	bf00      	nop
 802db10:	2000007c 	.word	0x2000007c

0802db14 <_sbrk_r>:
 802db14:	b538      	push	{r3, r4, r5, lr}
 802db16:	4d06      	ldr	r5, [pc, #24]	; (802db30 <_sbrk_r+0x1c>)
 802db18:	2300      	movs	r3, #0
 802db1a:	4604      	mov	r4, r0
 802db1c:	4608      	mov	r0, r1
 802db1e:	602b      	str	r3, [r5, #0]
 802db20:	f7f4 f9ee 	bl	8021f00 <_sbrk>
 802db24:	1c43      	adds	r3, r0, #1
 802db26:	d102      	bne.n	802db2e <_sbrk_r+0x1a>
 802db28:	682b      	ldr	r3, [r5, #0]
 802db2a:	b103      	cbz	r3, 802db2e <_sbrk_r+0x1a>
 802db2c:	6023      	str	r3, [r4, #0]
 802db2e:	bd38      	pop	{r3, r4, r5, pc}
 802db30:	200011dc 	.word	0x200011dc

0802db34 <siprintf>:
 802db34:	b40e      	push	{r1, r2, r3}
 802db36:	b500      	push	{lr}
 802db38:	b09c      	sub	sp, #112	; 0x70
 802db3a:	ab1d      	add	r3, sp, #116	; 0x74
 802db3c:	9002      	str	r0, [sp, #8]
 802db3e:	9006      	str	r0, [sp, #24]
 802db40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802db44:	4809      	ldr	r0, [pc, #36]	; (802db6c <siprintf+0x38>)
 802db46:	9107      	str	r1, [sp, #28]
 802db48:	9104      	str	r1, [sp, #16]
 802db4a:	4909      	ldr	r1, [pc, #36]	; (802db70 <siprintf+0x3c>)
 802db4c:	f853 2b04 	ldr.w	r2, [r3], #4
 802db50:	9105      	str	r1, [sp, #20]
 802db52:	6800      	ldr	r0, [r0, #0]
 802db54:	9301      	str	r3, [sp, #4]
 802db56:	a902      	add	r1, sp, #8
 802db58:	f000 fb54 	bl	802e204 <_svfiprintf_r>
 802db5c:	9b02      	ldr	r3, [sp, #8]
 802db5e:	2200      	movs	r2, #0
 802db60:	701a      	strb	r2, [r3, #0]
 802db62:	b01c      	add	sp, #112	; 0x70
 802db64:	f85d eb04 	ldr.w	lr, [sp], #4
 802db68:	b003      	add	sp, #12
 802db6a:	4770      	bx	lr
 802db6c:	2000007c 	.word	0x2000007c
 802db70:	ffff0208 	.word	0xffff0208

0802db74 <__swbuf_r>:
 802db74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802db76:	460e      	mov	r6, r1
 802db78:	4614      	mov	r4, r2
 802db7a:	4605      	mov	r5, r0
 802db7c:	b118      	cbz	r0, 802db86 <__swbuf_r+0x12>
 802db7e:	6983      	ldr	r3, [r0, #24]
 802db80:	b90b      	cbnz	r3, 802db86 <__swbuf_r+0x12>
 802db82:	f000 f9d1 	bl	802df28 <__sinit>
 802db86:	4b21      	ldr	r3, [pc, #132]	; (802dc0c <__swbuf_r+0x98>)
 802db88:	429c      	cmp	r4, r3
 802db8a:	d12b      	bne.n	802dbe4 <__swbuf_r+0x70>
 802db8c:	686c      	ldr	r4, [r5, #4]
 802db8e:	69a3      	ldr	r3, [r4, #24]
 802db90:	60a3      	str	r3, [r4, #8]
 802db92:	89a3      	ldrh	r3, [r4, #12]
 802db94:	071a      	lsls	r2, r3, #28
 802db96:	d52f      	bpl.n	802dbf8 <__swbuf_r+0x84>
 802db98:	6923      	ldr	r3, [r4, #16]
 802db9a:	b36b      	cbz	r3, 802dbf8 <__swbuf_r+0x84>
 802db9c:	6923      	ldr	r3, [r4, #16]
 802db9e:	6820      	ldr	r0, [r4, #0]
 802dba0:	1ac0      	subs	r0, r0, r3
 802dba2:	6963      	ldr	r3, [r4, #20]
 802dba4:	b2f6      	uxtb	r6, r6
 802dba6:	4283      	cmp	r3, r0
 802dba8:	4637      	mov	r7, r6
 802dbaa:	dc04      	bgt.n	802dbb6 <__swbuf_r+0x42>
 802dbac:	4621      	mov	r1, r4
 802dbae:	4628      	mov	r0, r5
 802dbb0:	f000 f926 	bl	802de00 <_fflush_r>
 802dbb4:	bb30      	cbnz	r0, 802dc04 <__swbuf_r+0x90>
 802dbb6:	68a3      	ldr	r3, [r4, #8]
 802dbb8:	3b01      	subs	r3, #1
 802dbba:	60a3      	str	r3, [r4, #8]
 802dbbc:	6823      	ldr	r3, [r4, #0]
 802dbbe:	1c5a      	adds	r2, r3, #1
 802dbc0:	6022      	str	r2, [r4, #0]
 802dbc2:	701e      	strb	r6, [r3, #0]
 802dbc4:	6963      	ldr	r3, [r4, #20]
 802dbc6:	3001      	adds	r0, #1
 802dbc8:	4283      	cmp	r3, r0
 802dbca:	d004      	beq.n	802dbd6 <__swbuf_r+0x62>
 802dbcc:	89a3      	ldrh	r3, [r4, #12]
 802dbce:	07db      	lsls	r3, r3, #31
 802dbd0:	d506      	bpl.n	802dbe0 <__swbuf_r+0x6c>
 802dbd2:	2e0a      	cmp	r6, #10
 802dbd4:	d104      	bne.n	802dbe0 <__swbuf_r+0x6c>
 802dbd6:	4621      	mov	r1, r4
 802dbd8:	4628      	mov	r0, r5
 802dbda:	f000 f911 	bl	802de00 <_fflush_r>
 802dbde:	b988      	cbnz	r0, 802dc04 <__swbuf_r+0x90>
 802dbe0:	4638      	mov	r0, r7
 802dbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802dbe4:	4b0a      	ldr	r3, [pc, #40]	; (802dc10 <__swbuf_r+0x9c>)
 802dbe6:	429c      	cmp	r4, r3
 802dbe8:	d101      	bne.n	802dbee <__swbuf_r+0x7a>
 802dbea:	68ac      	ldr	r4, [r5, #8]
 802dbec:	e7cf      	b.n	802db8e <__swbuf_r+0x1a>
 802dbee:	4b09      	ldr	r3, [pc, #36]	; (802dc14 <__swbuf_r+0xa0>)
 802dbf0:	429c      	cmp	r4, r3
 802dbf2:	bf08      	it	eq
 802dbf4:	68ec      	ldreq	r4, [r5, #12]
 802dbf6:	e7ca      	b.n	802db8e <__swbuf_r+0x1a>
 802dbf8:	4621      	mov	r1, r4
 802dbfa:	4628      	mov	r0, r5
 802dbfc:	f000 f80c 	bl	802dc18 <__swsetup_r>
 802dc00:	2800      	cmp	r0, #0
 802dc02:	d0cb      	beq.n	802db9c <__swbuf_r+0x28>
 802dc04:	f04f 37ff 	mov.w	r7, #4294967295
 802dc08:	e7ea      	b.n	802dbe0 <__swbuf_r+0x6c>
 802dc0a:	bf00      	nop
 802dc0c:	08031168 	.word	0x08031168
 802dc10:	08031188 	.word	0x08031188
 802dc14:	08031148 	.word	0x08031148

0802dc18 <__swsetup_r>:
 802dc18:	4b32      	ldr	r3, [pc, #200]	; (802dce4 <__swsetup_r+0xcc>)
 802dc1a:	b570      	push	{r4, r5, r6, lr}
 802dc1c:	681d      	ldr	r5, [r3, #0]
 802dc1e:	4606      	mov	r6, r0
 802dc20:	460c      	mov	r4, r1
 802dc22:	b125      	cbz	r5, 802dc2e <__swsetup_r+0x16>
 802dc24:	69ab      	ldr	r3, [r5, #24]
 802dc26:	b913      	cbnz	r3, 802dc2e <__swsetup_r+0x16>
 802dc28:	4628      	mov	r0, r5
 802dc2a:	f000 f97d 	bl	802df28 <__sinit>
 802dc2e:	4b2e      	ldr	r3, [pc, #184]	; (802dce8 <__swsetup_r+0xd0>)
 802dc30:	429c      	cmp	r4, r3
 802dc32:	d10f      	bne.n	802dc54 <__swsetup_r+0x3c>
 802dc34:	686c      	ldr	r4, [r5, #4]
 802dc36:	89a3      	ldrh	r3, [r4, #12]
 802dc38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802dc3c:	0719      	lsls	r1, r3, #28
 802dc3e:	d42c      	bmi.n	802dc9a <__swsetup_r+0x82>
 802dc40:	06dd      	lsls	r5, r3, #27
 802dc42:	d411      	bmi.n	802dc68 <__swsetup_r+0x50>
 802dc44:	2309      	movs	r3, #9
 802dc46:	6033      	str	r3, [r6, #0]
 802dc48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802dc4c:	81a3      	strh	r3, [r4, #12]
 802dc4e:	f04f 30ff 	mov.w	r0, #4294967295
 802dc52:	e03e      	b.n	802dcd2 <__swsetup_r+0xba>
 802dc54:	4b25      	ldr	r3, [pc, #148]	; (802dcec <__swsetup_r+0xd4>)
 802dc56:	429c      	cmp	r4, r3
 802dc58:	d101      	bne.n	802dc5e <__swsetup_r+0x46>
 802dc5a:	68ac      	ldr	r4, [r5, #8]
 802dc5c:	e7eb      	b.n	802dc36 <__swsetup_r+0x1e>
 802dc5e:	4b24      	ldr	r3, [pc, #144]	; (802dcf0 <__swsetup_r+0xd8>)
 802dc60:	429c      	cmp	r4, r3
 802dc62:	bf08      	it	eq
 802dc64:	68ec      	ldreq	r4, [r5, #12]
 802dc66:	e7e6      	b.n	802dc36 <__swsetup_r+0x1e>
 802dc68:	0758      	lsls	r0, r3, #29
 802dc6a:	d512      	bpl.n	802dc92 <__swsetup_r+0x7a>
 802dc6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802dc6e:	b141      	cbz	r1, 802dc82 <__swsetup_r+0x6a>
 802dc70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802dc74:	4299      	cmp	r1, r3
 802dc76:	d002      	beq.n	802dc7e <__swsetup_r+0x66>
 802dc78:	4630      	mov	r0, r6
 802dc7a:	f7ff fddd 	bl	802d838 <_free_r>
 802dc7e:	2300      	movs	r3, #0
 802dc80:	6363      	str	r3, [r4, #52]	; 0x34
 802dc82:	89a3      	ldrh	r3, [r4, #12]
 802dc84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802dc88:	81a3      	strh	r3, [r4, #12]
 802dc8a:	2300      	movs	r3, #0
 802dc8c:	6063      	str	r3, [r4, #4]
 802dc8e:	6923      	ldr	r3, [r4, #16]
 802dc90:	6023      	str	r3, [r4, #0]
 802dc92:	89a3      	ldrh	r3, [r4, #12]
 802dc94:	f043 0308 	orr.w	r3, r3, #8
 802dc98:	81a3      	strh	r3, [r4, #12]
 802dc9a:	6923      	ldr	r3, [r4, #16]
 802dc9c:	b94b      	cbnz	r3, 802dcb2 <__swsetup_r+0x9a>
 802dc9e:	89a3      	ldrh	r3, [r4, #12]
 802dca0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802dca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802dca8:	d003      	beq.n	802dcb2 <__swsetup_r+0x9a>
 802dcaa:	4621      	mov	r1, r4
 802dcac:	4630      	mov	r0, r6
 802dcae:	f000 fa01 	bl	802e0b4 <__smakebuf_r>
 802dcb2:	89a0      	ldrh	r0, [r4, #12]
 802dcb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802dcb8:	f010 0301 	ands.w	r3, r0, #1
 802dcbc:	d00a      	beq.n	802dcd4 <__swsetup_r+0xbc>
 802dcbe:	2300      	movs	r3, #0
 802dcc0:	60a3      	str	r3, [r4, #8]
 802dcc2:	6963      	ldr	r3, [r4, #20]
 802dcc4:	425b      	negs	r3, r3
 802dcc6:	61a3      	str	r3, [r4, #24]
 802dcc8:	6923      	ldr	r3, [r4, #16]
 802dcca:	b943      	cbnz	r3, 802dcde <__swsetup_r+0xc6>
 802dccc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802dcd0:	d1ba      	bne.n	802dc48 <__swsetup_r+0x30>
 802dcd2:	bd70      	pop	{r4, r5, r6, pc}
 802dcd4:	0781      	lsls	r1, r0, #30
 802dcd6:	bf58      	it	pl
 802dcd8:	6963      	ldrpl	r3, [r4, #20]
 802dcda:	60a3      	str	r3, [r4, #8]
 802dcdc:	e7f4      	b.n	802dcc8 <__swsetup_r+0xb0>
 802dcde:	2000      	movs	r0, #0
 802dce0:	e7f7      	b.n	802dcd2 <__swsetup_r+0xba>
 802dce2:	bf00      	nop
 802dce4:	2000007c 	.word	0x2000007c
 802dce8:	08031168 	.word	0x08031168
 802dcec:	08031188 	.word	0x08031188
 802dcf0:	08031148 	.word	0x08031148

0802dcf4 <__sflush_r>:
 802dcf4:	898a      	ldrh	r2, [r1, #12]
 802dcf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802dcfa:	4605      	mov	r5, r0
 802dcfc:	0710      	lsls	r0, r2, #28
 802dcfe:	460c      	mov	r4, r1
 802dd00:	d458      	bmi.n	802ddb4 <__sflush_r+0xc0>
 802dd02:	684b      	ldr	r3, [r1, #4]
 802dd04:	2b00      	cmp	r3, #0
 802dd06:	dc05      	bgt.n	802dd14 <__sflush_r+0x20>
 802dd08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802dd0a:	2b00      	cmp	r3, #0
 802dd0c:	dc02      	bgt.n	802dd14 <__sflush_r+0x20>
 802dd0e:	2000      	movs	r0, #0
 802dd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802dd14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802dd16:	2e00      	cmp	r6, #0
 802dd18:	d0f9      	beq.n	802dd0e <__sflush_r+0x1a>
 802dd1a:	2300      	movs	r3, #0
 802dd1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802dd20:	682f      	ldr	r7, [r5, #0]
 802dd22:	602b      	str	r3, [r5, #0]
 802dd24:	d032      	beq.n	802dd8c <__sflush_r+0x98>
 802dd26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802dd28:	89a3      	ldrh	r3, [r4, #12]
 802dd2a:	075a      	lsls	r2, r3, #29
 802dd2c:	d505      	bpl.n	802dd3a <__sflush_r+0x46>
 802dd2e:	6863      	ldr	r3, [r4, #4]
 802dd30:	1ac0      	subs	r0, r0, r3
 802dd32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802dd34:	b10b      	cbz	r3, 802dd3a <__sflush_r+0x46>
 802dd36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802dd38:	1ac0      	subs	r0, r0, r3
 802dd3a:	2300      	movs	r3, #0
 802dd3c:	4602      	mov	r2, r0
 802dd3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802dd40:	6a21      	ldr	r1, [r4, #32]
 802dd42:	4628      	mov	r0, r5
 802dd44:	47b0      	blx	r6
 802dd46:	1c43      	adds	r3, r0, #1
 802dd48:	89a3      	ldrh	r3, [r4, #12]
 802dd4a:	d106      	bne.n	802dd5a <__sflush_r+0x66>
 802dd4c:	6829      	ldr	r1, [r5, #0]
 802dd4e:	291d      	cmp	r1, #29
 802dd50:	d82c      	bhi.n	802ddac <__sflush_r+0xb8>
 802dd52:	4a2a      	ldr	r2, [pc, #168]	; (802ddfc <__sflush_r+0x108>)
 802dd54:	40ca      	lsrs	r2, r1
 802dd56:	07d6      	lsls	r6, r2, #31
 802dd58:	d528      	bpl.n	802ddac <__sflush_r+0xb8>
 802dd5a:	2200      	movs	r2, #0
 802dd5c:	6062      	str	r2, [r4, #4]
 802dd5e:	04d9      	lsls	r1, r3, #19
 802dd60:	6922      	ldr	r2, [r4, #16]
 802dd62:	6022      	str	r2, [r4, #0]
 802dd64:	d504      	bpl.n	802dd70 <__sflush_r+0x7c>
 802dd66:	1c42      	adds	r2, r0, #1
 802dd68:	d101      	bne.n	802dd6e <__sflush_r+0x7a>
 802dd6a:	682b      	ldr	r3, [r5, #0]
 802dd6c:	b903      	cbnz	r3, 802dd70 <__sflush_r+0x7c>
 802dd6e:	6560      	str	r0, [r4, #84]	; 0x54
 802dd70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802dd72:	602f      	str	r7, [r5, #0]
 802dd74:	2900      	cmp	r1, #0
 802dd76:	d0ca      	beq.n	802dd0e <__sflush_r+0x1a>
 802dd78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802dd7c:	4299      	cmp	r1, r3
 802dd7e:	d002      	beq.n	802dd86 <__sflush_r+0x92>
 802dd80:	4628      	mov	r0, r5
 802dd82:	f7ff fd59 	bl	802d838 <_free_r>
 802dd86:	2000      	movs	r0, #0
 802dd88:	6360      	str	r0, [r4, #52]	; 0x34
 802dd8a:	e7c1      	b.n	802dd10 <__sflush_r+0x1c>
 802dd8c:	6a21      	ldr	r1, [r4, #32]
 802dd8e:	2301      	movs	r3, #1
 802dd90:	4628      	mov	r0, r5
 802dd92:	47b0      	blx	r6
 802dd94:	1c41      	adds	r1, r0, #1
 802dd96:	d1c7      	bne.n	802dd28 <__sflush_r+0x34>
 802dd98:	682b      	ldr	r3, [r5, #0]
 802dd9a:	2b00      	cmp	r3, #0
 802dd9c:	d0c4      	beq.n	802dd28 <__sflush_r+0x34>
 802dd9e:	2b1d      	cmp	r3, #29
 802dda0:	d001      	beq.n	802dda6 <__sflush_r+0xb2>
 802dda2:	2b16      	cmp	r3, #22
 802dda4:	d101      	bne.n	802ddaa <__sflush_r+0xb6>
 802dda6:	602f      	str	r7, [r5, #0]
 802dda8:	e7b1      	b.n	802dd0e <__sflush_r+0x1a>
 802ddaa:	89a3      	ldrh	r3, [r4, #12]
 802ddac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ddb0:	81a3      	strh	r3, [r4, #12]
 802ddb2:	e7ad      	b.n	802dd10 <__sflush_r+0x1c>
 802ddb4:	690f      	ldr	r7, [r1, #16]
 802ddb6:	2f00      	cmp	r7, #0
 802ddb8:	d0a9      	beq.n	802dd0e <__sflush_r+0x1a>
 802ddba:	0793      	lsls	r3, r2, #30
 802ddbc:	680e      	ldr	r6, [r1, #0]
 802ddbe:	bf08      	it	eq
 802ddc0:	694b      	ldreq	r3, [r1, #20]
 802ddc2:	600f      	str	r7, [r1, #0]
 802ddc4:	bf18      	it	ne
 802ddc6:	2300      	movne	r3, #0
 802ddc8:	eba6 0807 	sub.w	r8, r6, r7
 802ddcc:	608b      	str	r3, [r1, #8]
 802ddce:	f1b8 0f00 	cmp.w	r8, #0
 802ddd2:	dd9c      	ble.n	802dd0e <__sflush_r+0x1a>
 802ddd4:	6a21      	ldr	r1, [r4, #32]
 802ddd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802ddd8:	4643      	mov	r3, r8
 802ddda:	463a      	mov	r2, r7
 802dddc:	4628      	mov	r0, r5
 802ddde:	47b0      	blx	r6
 802dde0:	2800      	cmp	r0, #0
 802dde2:	dc06      	bgt.n	802ddf2 <__sflush_r+0xfe>
 802dde4:	89a3      	ldrh	r3, [r4, #12]
 802dde6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ddea:	81a3      	strh	r3, [r4, #12]
 802ddec:	f04f 30ff 	mov.w	r0, #4294967295
 802ddf0:	e78e      	b.n	802dd10 <__sflush_r+0x1c>
 802ddf2:	4407      	add	r7, r0
 802ddf4:	eba8 0800 	sub.w	r8, r8, r0
 802ddf8:	e7e9      	b.n	802ddce <__sflush_r+0xda>
 802ddfa:	bf00      	nop
 802ddfc:	20400001 	.word	0x20400001

0802de00 <_fflush_r>:
 802de00:	b538      	push	{r3, r4, r5, lr}
 802de02:	690b      	ldr	r3, [r1, #16]
 802de04:	4605      	mov	r5, r0
 802de06:	460c      	mov	r4, r1
 802de08:	b913      	cbnz	r3, 802de10 <_fflush_r+0x10>
 802de0a:	2500      	movs	r5, #0
 802de0c:	4628      	mov	r0, r5
 802de0e:	bd38      	pop	{r3, r4, r5, pc}
 802de10:	b118      	cbz	r0, 802de1a <_fflush_r+0x1a>
 802de12:	6983      	ldr	r3, [r0, #24]
 802de14:	b90b      	cbnz	r3, 802de1a <_fflush_r+0x1a>
 802de16:	f000 f887 	bl	802df28 <__sinit>
 802de1a:	4b14      	ldr	r3, [pc, #80]	; (802de6c <_fflush_r+0x6c>)
 802de1c:	429c      	cmp	r4, r3
 802de1e:	d11b      	bne.n	802de58 <_fflush_r+0x58>
 802de20:	686c      	ldr	r4, [r5, #4]
 802de22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802de26:	2b00      	cmp	r3, #0
 802de28:	d0ef      	beq.n	802de0a <_fflush_r+0xa>
 802de2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802de2c:	07d0      	lsls	r0, r2, #31
 802de2e:	d404      	bmi.n	802de3a <_fflush_r+0x3a>
 802de30:	0599      	lsls	r1, r3, #22
 802de32:	d402      	bmi.n	802de3a <_fflush_r+0x3a>
 802de34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802de36:	f000 f915 	bl	802e064 <__retarget_lock_acquire_recursive>
 802de3a:	4628      	mov	r0, r5
 802de3c:	4621      	mov	r1, r4
 802de3e:	f7ff ff59 	bl	802dcf4 <__sflush_r>
 802de42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802de44:	07da      	lsls	r2, r3, #31
 802de46:	4605      	mov	r5, r0
 802de48:	d4e0      	bmi.n	802de0c <_fflush_r+0xc>
 802de4a:	89a3      	ldrh	r3, [r4, #12]
 802de4c:	059b      	lsls	r3, r3, #22
 802de4e:	d4dd      	bmi.n	802de0c <_fflush_r+0xc>
 802de50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802de52:	f000 f908 	bl	802e066 <__retarget_lock_release_recursive>
 802de56:	e7d9      	b.n	802de0c <_fflush_r+0xc>
 802de58:	4b05      	ldr	r3, [pc, #20]	; (802de70 <_fflush_r+0x70>)
 802de5a:	429c      	cmp	r4, r3
 802de5c:	d101      	bne.n	802de62 <_fflush_r+0x62>
 802de5e:	68ac      	ldr	r4, [r5, #8]
 802de60:	e7df      	b.n	802de22 <_fflush_r+0x22>
 802de62:	4b04      	ldr	r3, [pc, #16]	; (802de74 <_fflush_r+0x74>)
 802de64:	429c      	cmp	r4, r3
 802de66:	bf08      	it	eq
 802de68:	68ec      	ldreq	r4, [r5, #12]
 802de6a:	e7da      	b.n	802de22 <_fflush_r+0x22>
 802de6c:	08031168 	.word	0x08031168
 802de70:	08031188 	.word	0x08031188
 802de74:	08031148 	.word	0x08031148

0802de78 <std>:
 802de78:	2300      	movs	r3, #0
 802de7a:	b510      	push	{r4, lr}
 802de7c:	4604      	mov	r4, r0
 802de7e:	e9c0 3300 	strd	r3, r3, [r0]
 802de82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802de86:	6083      	str	r3, [r0, #8]
 802de88:	8181      	strh	r1, [r0, #12]
 802de8a:	6643      	str	r3, [r0, #100]	; 0x64
 802de8c:	81c2      	strh	r2, [r0, #14]
 802de8e:	6183      	str	r3, [r0, #24]
 802de90:	4619      	mov	r1, r3
 802de92:	2208      	movs	r2, #8
 802de94:	305c      	adds	r0, #92	; 0x5c
 802de96:	f7ff fcc7 	bl	802d828 <memset>
 802de9a:	4b05      	ldr	r3, [pc, #20]	; (802deb0 <std+0x38>)
 802de9c:	6263      	str	r3, [r4, #36]	; 0x24
 802de9e:	4b05      	ldr	r3, [pc, #20]	; (802deb4 <std+0x3c>)
 802dea0:	62a3      	str	r3, [r4, #40]	; 0x28
 802dea2:	4b05      	ldr	r3, [pc, #20]	; (802deb8 <std+0x40>)
 802dea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 802dea6:	4b05      	ldr	r3, [pc, #20]	; (802debc <std+0x44>)
 802dea8:	6224      	str	r4, [r4, #32]
 802deaa:	6323      	str	r3, [r4, #48]	; 0x30
 802deac:	bd10      	pop	{r4, pc}
 802deae:	bf00      	nop
 802deb0:	0802e9e1 	.word	0x0802e9e1
 802deb4:	0802ea03 	.word	0x0802ea03
 802deb8:	0802ea3b 	.word	0x0802ea3b
 802debc:	0802ea5f 	.word	0x0802ea5f

0802dec0 <_cleanup_r>:
 802dec0:	4901      	ldr	r1, [pc, #4]	; (802dec8 <_cleanup_r+0x8>)
 802dec2:	f000 b8af 	b.w	802e024 <_fwalk_reent>
 802dec6:	bf00      	nop
 802dec8:	0802de01 	.word	0x0802de01

0802decc <__sfmoreglue>:
 802decc:	b570      	push	{r4, r5, r6, lr}
 802dece:	2268      	movs	r2, #104	; 0x68
 802ded0:	1e4d      	subs	r5, r1, #1
 802ded2:	4355      	muls	r5, r2
 802ded4:	460e      	mov	r6, r1
 802ded6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802deda:	f7ff fd19 	bl	802d910 <_malloc_r>
 802dede:	4604      	mov	r4, r0
 802dee0:	b140      	cbz	r0, 802def4 <__sfmoreglue+0x28>
 802dee2:	2100      	movs	r1, #0
 802dee4:	e9c0 1600 	strd	r1, r6, [r0]
 802dee8:	300c      	adds	r0, #12
 802deea:	60a0      	str	r0, [r4, #8]
 802deec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802def0:	f7ff fc9a 	bl	802d828 <memset>
 802def4:	4620      	mov	r0, r4
 802def6:	bd70      	pop	{r4, r5, r6, pc}

0802def8 <__sfp_lock_acquire>:
 802def8:	4801      	ldr	r0, [pc, #4]	; (802df00 <__sfp_lock_acquire+0x8>)
 802defa:	f000 b8b3 	b.w	802e064 <__retarget_lock_acquire_recursive>
 802defe:	bf00      	nop
 802df00:	200011d9 	.word	0x200011d9

0802df04 <__sfp_lock_release>:
 802df04:	4801      	ldr	r0, [pc, #4]	; (802df0c <__sfp_lock_release+0x8>)
 802df06:	f000 b8ae 	b.w	802e066 <__retarget_lock_release_recursive>
 802df0a:	bf00      	nop
 802df0c:	200011d9 	.word	0x200011d9

0802df10 <__sinit_lock_acquire>:
 802df10:	4801      	ldr	r0, [pc, #4]	; (802df18 <__sinit_lock_acquire+0x8>)
 802df12:	f000 b8a7 	b.w	802e064 <__retarget_lock_acquire_recursive>
 802df16:	bf00      	nop
 802df18:	200011da 	.word	0x200011da

0802df1c <__sinit_lock_release>:
 802df1c:	4801      	ldr	r0, [pc, #4]	; (802df24 <__sinit_lock_release+0x8>)
 802df1e:	f000 b8a2 	b.w	802e066 <__retarget_lock_release_recursive>
 802df22:	bf00      	nop
 802df24:	200011da 	.word	0x200011da

0802df28 <__sinit>:
 802df28:	b510      	push	{r4, lr}
 802df2a:	4604      	mov	r4, r0
 802df2c:	f7ff fff0 	bl	802df10 <__sinit_lock_acquire>
 802df30:	69a3      	ldr	r3, [r4, #24]
 802df32:	b11b      	cbz	r3, 802df3c <__sinit+0x14>
 802df34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802df38:	f7ff bff0 	b.w	802df1c <__sinit_lock_release>
 802df3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802df40:	6523      	str	r3, [r4, #80]	; 0x50
 802df42:	4b13      	ldr	r3, [pc, #76]	; (802df90 <__sinit+0x68>)
 802df44:	4a13      	ldr	r2, [pc, #76]	; (802df94 <__sinit+0x6c>)
 802df46:	681b      	ldr	r3, [r3, #0]
 802df48:	62a2      	str	r2, [r4, #40]	; 0x28
 802df4a:	42a3      	cmp	r3, r4
 802df4c:	bf04      	itt	eq
 802df4e:	2301      	moveq	r3, #1
 802df50:	61a3      	streq	r3, [r4, #24]
 802df52:	4620      	mov	r0, r4
 802df54:	f000 f820 	bl	802df98 <__sfp>
 802df58:	6060      	str	r0, [r4, #4]
 802df5a:	4620      	mov	r0, r4
 802df5c:	f000 f81c 	bl	802df98 <__sfp>
 802df60:	60a0      	str	r0, [r4, #8]
 802df62:	4620      	mov	r0, r4
 802df64:	f000 f818 	bl	802df98 <__sfp>
 802df68:	2200      	movs	r2, #0
 802df6a:	60e0      	str	r0, [r4, #12]
 802df6c:	2104      	movs	r1, #4
 802df6e:	6860      	ldr	r0, [r4, #4]
 802df70:	f7ff ff82 	bl	802de78 <std>
 802df74:	68a0      	ldr	r0, [r4, #8]
 802df76:	2201      	movs	r2, #1
 802df78:	2109      	movs	r1, #9
 802df7a:	f7ff ff7d 	bl	802de78 <std>
 802df7e:	68e0      	ldr	r0, [r4, #12]
 802df80:	2202      	movs	r2, #2
 802df82:	2112      	movs	r1, #18
 802df84:	f7ff ff78 	bl	802de78 <std>
 802df88:	2301      	movs	r3, #1
 802df8a:	61a3      	str	r3, [r4, #24]
 802df8c:	e7d2      	b.n	802df34 <__sinit+0xc>
 802df8e:	bf00      	nop
 802df90:	08031144 	.word	0x08031144
 802df94:	0802dec1 	.word	0x0802dec1

0802df98 <__sfp>:
 802df98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802df9a:	4607      	mov	r7, r0
 802df9c:	f7ff ffac 	bl	802def8 <__sfp_lock_acquire>
 802dfa0:	4b1e      	ldr	r3, [pc, #120]	; (802e01c <__sfp+0x84>)
 802dfa2:	681e      	ldr	r6, [r3, #0]
 802dfa4:	69b3      	ldr	r3, [r6, #24]
 802dfa6:	b913      	cbnz	r3, 802dfae <__sfp+0x16>
 802dfa8:	4630      	mov	r0, r6
 802dfaa:	f7ff ffbd 	bl	802df28 <__sinit>
 802dfae:	3648      	adds	r6, #72	; 0x48
 802dfb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802dfb4:	3b01      	subs	r3, #1
 802dfb6:	d503      	bpl.n	802dfc0 <__sfp+0x28>
 802dfb8:	6833      	ldr	r3, [r6, #0]
 802dfba:	b30b      	cbz	r3, 802e000 <__sfp+0x68>
 802dfbc:	6836      	ldr	r6, [r6, #0]
 802dfbe:	e7f7      	b.n	802dfb0 <__sfp+0x18>
 802dfc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802dfc4:	b9d5      	cbnz	r5, 802dffc <__sfp+0x64>
 802dfc6:	4b16      	ldr	r3, [pc, #88]	; (802e020 <__sfp+0x88>)
 802dfc8:	60e3      	str	r3, [r4, #12]
 802dfca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802dfce:	6665      	str	r5, [r4, #100]	; 0x64
 802dfd0:	f000 f847 	bl	802e062 <__retarget_lock_init_recursive>
 802dfd4:	f7ff ff96 	bl	802df04 <__sfp_lock_release>
 802dfd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802dfdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802dfe0:	6025      	str	r5, [r4, #0]
 802dfe2:	61a5      	str	r5, [r4, #24]
 802dfe4:	2208      	movs	r2, #8
 802dfe6:	4629      	mov	r1, r5
 802dfe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802dfec:	f7ff fc1c 	bl	802d828 <memset>
 802dff0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802dff4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802dff8:	4620      	mov	r0, r4
 802dffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802dffc:	3468      	adds	r4, #104	; 0x68
 802dffe:	e7d9      	b.n	802dfb4 <__sfp+0x1c>
 802e000:	2104      	movs	r1, #4
 802e002:	4638      	mov	r0, r7
 802e004:	f7ff ff62 	bl	802decc <__sfmoreglue>
 802e008:	4604      	mov	r4, r0
 802e00a:	6030      	str	r0, [r6, #0]
 802e00c:	2800      	cmp	r0, #0
 802e00e:	d1d5      	bne.n	802dfbc <__sfp+0x24>
 802e010:	f7ff ff78 	bl	802df04 <__sfp_lock_release>
 802e014:	230c      	movs	r3, #12
 802e016:	603b      	str	r3, [r7, #0]
 802e018:	e7ee      	b.n	802dff8 <__sfp+0x60>
 802e01a:	bf00      	nop
 802e01c:	08031144 	.word	0x08031144
 802e020:	ffff0001 	.word	0xffff0001

0802e024 <_fwalk_reent>:
 802e024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e028:	4606      	mov	r6, r0
 802e02a:	4688      	mov	r8, r1
 802e02c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802e030:	2700      	movs	r7, #0
 802e032:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802e036:	f1b9 0901 	subs.w	r9, r9, #1
 802e03a:	d505      	bpl.n	802e048 <_fwalk_reent+0x24>
 802e03c:	6824      	ldr	r4, [r4, #0]
 802e03e:	2c00      	cmp	r4, #0
 802e040:	d1f7      	bne.n	802e032 <_fwalk_reent+0xe>
 802e042:	4638      	mov	r0, r7
 802e044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e048:	89ab      	ldrh	r3, [r5, #12]
 802e04a:	2b01      	cmp	r3, #1
 802e04c:	d907      	bls.n	802e05e <_fwalk_reent+0x3a>
 802e04e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802e052:	3301      	adds	r3, #1
 802e054:	d003      	beq.n	802e05e <_fwalk_reent+0x3a>
 802e056:	4629      	mov	r1, r5
 802e058:	4630      	mov	r0, r6
 802e05a:	47c0      	blx	r8
 802e05c:	4307      	orrs	r7, r0
 802e05e:	3568      	adds	r5, #104	; 0x68
 802e060:	e7e9      	b.n	802e036 <_fwalk_reent+0x12>

0802e062 <__retarget_lock_init_recursive>:
 802e062:	4770      	bx	lr

0802e064 <__retarget_lock_acquire_recursive>:
 802e064:	4770      	bx	lr

0802e066 <__retarget_lock_release_recursive>:
 802e066:	4770      	bx	lr

0802e068 <__swhatbuf_r>:
 802e068:	b570      	push	{r4, r5, r6, lr}
 802e06a:	460e      	mov	r6, r1
 802e06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e070:	2900      	cmp	r1, #0
 802e072:	b096      	sub	sp, #88	; 0x58
 802e074:	4614      	mov	r4, r2
 802e076:	461d      	mov	r5, r3
 802e078:	da08      	bge.n	802e08c <__swhatbuf_r+0x24>
 802e07a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802e07e:	2200      	movs	r2, #0
 802e080:	602a      	str	r2, [r5, #0]
 802e082:	061a      	lsls	r2, r3, #24
 802e084:	d410      	bmi.n	802e0a8 <__swhatbuf_r+0x40>
 802e086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802e08a:	e00e      	b.n	802e0aa <__swhatbuf_r+0x42>
 802e08c:	466a      	mov	r2, sp
 802e08e:	f000 fd0d 	bl	802eaac <_fstat_r>
 802e092:	2800      	cmp	r0, #0
 802e094:	dbf1      	blt.n	802e07a <__swhatbuf_r+0x12>
 802e096:	9a01      	ldr	r2, [sp, #4]
 802e098:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802e09c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802e0a0:	425a      	negs	r2, r3
 802e0a2:	415a      	adcs	r2, r3
 802e0a4:	602a      	str	r2, [r5, #0]
 802e0a6:	e7ee      	b.n	802e086 <__swhatbuf_r+0x1e>
 802e0a8:	2340      	movs	r3, #64	; 0x40
 802e0aa:	2000      	movs	r0, #0
 802e0ac:	6023      	str	r3, [r4, #0]
 802e0ae:	b016      	add	sp, #88	; 0x58
 802e0b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0802e0b4 <__smakebuf_r>:
 802e0b4:	898b      	ldrh	r3, [r1, #12]
 802e0b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802e0b8:	079d      	lsls	r5, r3, #30
 802e0ba:	4606      	mov	r6, r0
 802e0bc:	460c      	mov	r4, r1
 802e0be:	d507      	bpl.n	802e0d0 <__smakebuf_r+0x1c>
 802e0c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802e0c4:	6023      	str	r3, [r4, #0]
 802e0c6:	6123      	str	r3, [r4, #16]
 802e0c8:	2301      	movs	r3, #1
 802e0ca:	6163      	str	r3, [r4, #20]
 802e0cc:	b002      	add	sp, #8
 802e0ce:	bd70      	pop	{r4, r5, r6, pc}
 802e0d0:	ab01      	add	r3, sp, #4
 802e0d2:	466a      	mov	r2, sp
 802e0d4:	f7ff ffc8 	bl	802e068 <__swhatbuf_r>
 802e0d8:	9900      	ldr	r1, [sp, #0]
 802e0da:	4605      	mov	r5, r0
 802e0dc:	4630      	mov	r0, r6
 802e0de:	f7ff fc17 	bl	802d910 <_malloc_r>
 802e0e2:	b948      	cbnz	r0, 802e0f8 <__smakebuf_r+0x44>
 802e0e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e0e8:	059a      	lsls	r2, r3, #22
 802e0ea:	d4ef      	bmi.n	802e0cc <__smakebuf_r+0x18>
 802e0ec:	f023 0303 	bic.w	r3, r3, #3
 802e0f0:	f043 0302 	orr.w	r3, r3, #2
 802e0f4:	81a3      	strh	r3, [r4, #12]
 802e0f6:	e7e3      	b.n	802e0c0 <__smakebuf_r+0xc>
 802e0f8:	4b0d      	ldr	r3, [pc, #52]	; (802e130 <__smakebuf_r+0x7c>)
 802e0fa:	62b3      	str	r3, [r6, #40]	; 0x28
 802e0fc:	89a3      	ldrh	r3, [r4, #12]
 802e0fe:	6020      	str	r0, [r4, #0]
 802e100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e104:	81a3      	strh	r3, [r4, #12]
 802e106:	9b00      	ldr	r3, [sp, #0]
 802e108:	6163      	str	r3, [r4, #20]
 802e10a:	9b01      	ldr	r3, [sp, #4]
 802e10c:	6120      	str	r0, [r4, #16]
 802e10e:	b15b      	cbz	r3, 802e128 <__smakebuf_r+0x74>
 802e110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e114:	4630      	mov	r0, r6
 802e116:	f000 fcdb 	bl	802ead0 <_isatty_r>
 802e11a:	b128      	cbz	r0, 802e128 <__smakebuf_r+0x74>
 802e11c:	89a3      	ldrh	r3, [r4, #12]
 802e11e:	f023 0303 	bic.w	r3, r3, #3
 802e122:	f043 0301 	orr.w	r3, r3, #1
 802e126:	81a3      	strh	r3, [r4, #12]
 802e128:	89a0      	ldrh	r0, [r4, #12]
 802e12a:	4305      	orrs	r5, r0
 802e12c:	81a5      	strh	r5, [r4, #12]
 802e12e:	e7cd      	b.n	802e0cc <__smakebuf_r+0x18>
 802e130:	0802dec1 	.word	0x0802dec1

0802e134 <__malloc_lock>:
 802e134:	4801      	ldr	r0, [pc, #4]	; (802e13c <__malloc_lock+0x8>)
 802e136:	f7ff bf95 	b.w	802e064 <__retarget_lock_acquire_recursive>
 802e13a:	bf00      	nop
 802e13c:	200011d8 	.word	0x200011d8

0802e140 <__malloc_unlock>:
 802e140:	4801      	ldr	r0, [pc, #4]	; (802e148 <__malloc_unlock+0x8>)
 802e142:	f7ff bf90 	b.w	802e066 <__retarget_lock_release_recursive>
 802e146:	bf00      	nop
 802e148:	200011d8 	.word	0x200011d8

0802e14c <__ssputs_r>:
 802e14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e150:	688e      	ldr	r6, [r1, #8]
 802e152:	429e      	cmp	r6, r3
 802e154:	4682      	mov	sl, r0
 802e156:	460c      	mov	r4, r1
 802e158:	4690      	mov	r8, r2
 802e15a:	461f      	mov	r7, r3
 802e15c:	d838      	bhi.n	802e1d0 <__ssputs_r+0x84>
 802e15e:	898a      	ldrh	r2, [r1, #12]
 802e160:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802e164:	d032      	beq.n	802e1cc <__ssputs_r+0x80>
 802e166:	6825      	ldr	r5, [r4, #0]
 802e168:	6909      	ldr	r1, [r1, #16]
 802e16a:	eba5 0901 	sub.w	r9, r5, r1
 802e16e:	6965      	ldr	r5, [r4, #20]
 802e170:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802e174:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802e178:	3301      	adds	r3, #1
 802e17a:	444b      	add	r3, r9
 802e17c:	106d      	asrs	r5, r5, #1
 802e17e:	429d      	cmp	r5, r3
 802e180:	bf38      	it	cc
 802e182:	461d      	movcc	r5, r3
 802e184:	0553      	lsls	r3, r2, #21
 802e186:	d531      	bpl.n	802e1ec <__ssputs_r+0xa0>
 802e188:	4629      	mov	r1, r5
 802e18a:	f7ff fbc1 	bl	802d910 <_malloc_r>
 802e18e:	4606      	mov	r6, r0
 802e190:	b950      	cbnz	r0, 802e1a8 <__ssputs_r+0x5c>
 802e192:	230c      	movs	r3, #12
 802e194:	f8ca 3000 	str.w	r3, [sl]
 802e198:	89a3      	ldrh	r3, [r4, #12]
 802e19a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e19e:	81a3      	strh	r3, [r4, #12]
 802e1a0:	f04f 30ff 	mov.w	r0, #4294967295
 802e1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e1a8:	6921      	ldr	r1, [r4, #16]
 802e1aa:	464a      	mov	r2, r9
 802e1ac:	f000 fcb2 	bl	802eb14 <memcpy>
 802e1b0:	89a3      	ldrh	r3, [r4, #12]
 802e1b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802e1b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e1ba:	81a3      	strh	r3, [r4, #12]
 802e1bc:	6126      	str	r6, [r4, #16]
 802e1be:	6165      	str	r5, [r4, #20]
 802e1c0:	444e      	add	r6, r9
 802e1c2:	eba5 0509 	sub.w	r5, r5, r9
 802e1c6:	6026      	str	r6, [r4, #0]
 802e1c8:	60a5      	str	r5, [r4, #8]
 802e1ca:	463e      	mov	r6, r7
 802e1cc:	42be      	cmp	r6, r7
 802e1ce:	d900      	bls.n	802e1d2 <__ssputs_r+0x86>
 802e1d0:	463e      	mov	r6, r7
 802e1d2:	6820      	ldr	r0, [r4, #0]
 802e1d4:	4632      	mov	r2, r6
 802e1d6:	4641      	mov	r1, r8
 802e1d8:	f000 fcaa 	bl	802eb30 <memmove>
 802e1dc:	68a3      	ldr	r3, [r4, #8]
 802e1de:	1b9b      	subs	r3, r3, r6
 802e1e0:	60a3      	str	r3, [r4, #8]
 802e1e2:	6823      	ldr	r3, [r4, #0]
 802e1e4:	4433      	add	r3, r6
 802e1e6:	6023      	str	r3, [r4, #0]
 802e1e8:	2000      	movs	r0, #0
 802e1ea:	e7db      	b.n	802e1a4 <__ssputs_r+0x58>
 802e1ec:	462a      	mov	r2, r5
 802e1ee:	f000 fcb9 	bl	802eb64 <_realloc_r>
 802e1f2:	4606      	mov	r6, r0
 802e1f4:	2800      	cmp	r0, #0
 802e1f6:	d1e1      	bne.n	802e1bc <__ssputs_r+0x70>
 802e1f8:	6921      	ldr	r1, [r4, #16]
 802e1fa:	4650      	mov	r0, sl
 802e1fc:	f7ff fb1c 	bl	802d838 <_free_r>
 802e200:	e7c7      	b.n	802e192 <__ssputs_r+0x46>
	...

0802e204 <_svfiprintf_r>:
 802e204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e208:	4698      	mov	r8, r3
 802e20a:	898b      	ldrh	r3, [r1, #12]
 802e20c:	061b      	lsls	r3, r3, #24
 802e20e:	b09d      	sub	sp, #116	; 0x74
 802e210:	4607      	mov	r7, r0
 802e212:	460d      	mov	r5, r1
 802e214:	4614      	mov	r4, r2
 802e216:	d50e      	bpl.n	802e236 <_svfiprintf_r+0x32>
 802e218:	690b      	ldr	r3, [r1, #16]
 802e21a:	b963      	cbnz	r3, 802e236 <_svfiprintf_r+0x32>
 802e21c:	2140      	movs	r1, #64	; 0x40
 802e21e:	f7ff fb77 	bl	802d910 <_malloc_r>
 802e222:	6028      	str	r0, [r5, #0]
 802e224:	6128      	str	r0, [r5, #16]
 802e226:	b920      	cbnz	r0, 802e232 <_svfiprintf_r+0x2e>
 802e228:	230c      	movs	r3, #12
 802e22a:	603b      	str	r3, [r7, #0]
 802e22c:	f04f 30ff 	mov.w	r0, #4294967295
 802e230:	e0d1      	b.n	802e3d6 <_svfiprintf_r+0x1d2>
 802e232:	2340      	movs	r3, #64	; 0x40
 802e234:	616b      	str	r3, [r5, #20]
 802e236:	2300      	movs	r3, #0
 802e238:	9309      	str	r3, [sp, #36]	; 0x24
 802e23a:	2320      	movs	r3, #32
 802e23c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802e240:	f8cd 800c 	str.w	r8, [sp, #12]
 802e244:	2330      	movs	r3, #48	; 0x30
 802e246:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802e3f0 <_svfiprintf_r+0x1ec>
 802e24a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802e24e:	f04f 0901 	mov.w	r9, #1
 802e252:	4623      	mov	r3, r4
 802e254:	469a      	mov	sl, r3
 802e256:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e25a:	b10a      	cbz	r2, 802e260 <_svfiprintf_r+0x5c>
 802e25c:	2a25      	cmp	r2, #37	; 0x25
 802e25e:	d1f9      	bne.n	802e254 <_svfiprintf_r+0x50>
 802e260:	ebba 0b04 	subs.w	fp, sl, r4
 802e264:	d00b      	beq.n	802e27e <_svfiprintf_r+0x7a>
 802e266:	465b      	mov	r3, fp
 802e268:	4622      	mov	r2, r4
 802e26a:	4629      	mov	r1, r5
 802e26c:	4638      	mov	r0, r7
 802e26e:	f7ff ff6d 	bl	802e14c <__ssputs_r>
 802e272:	3001      	adds	r0, #1
 802e274:	f000 80aa 	beq.w	802e3cc <_svfiprintf_r+0x1c8>
 802e278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e27a:	445a      	add	r2, fp
 802e27c:	9209      	str	r2, [sp, #36]	; 0x24
 802e27e:	f89a 3000 	ldrb.w	r3, [sl]
 802e282:	2b00      	cmp	r3, #0
 802e284:	f000 80a2 	beq.w	802e3cc <_svfiprintf_r+0x1c8>
 802e288:	2300      	movs	r3, #0
 802e28a:	f04f 32ff 	mov.w	r2, #4294967295
 802e28e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802e292:	f10a 0a01 	add.w	sl, sl, #1
 802e296:	9304      	str	r3, [sp, #16]
 802e298:	9307      	str	r3, [sp, #28]
 802e29a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802e29e:	931a      	str	r3, [sp, #104]	; 0x68
 802e2a0:	4654      	mov	r4, sl
 802e2a2:	2205      	movs	r2, #5
 802e2a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e2a8:	4851      	ldr	r0, [pc, #324]	; (802e3f0 <_svfiprintf_r+0x1ec>)
 802e2aa:	f7f1 ffa1 	bl	80201f0 <memchr>
 802e2ae:	9a04      	ldr	r2, [sp, #16]
 802e2b0:	b9d8      	cbnz	r0, 802e2ea <_svfiprintf_r+0xe6>
 802e2b2:	06d0      	lsls	r0, r2, #27
 802e2b4:	bf44      	itt	mi
 802e2b6:	2320      	movmi	r3, #32
 802e2b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e2bc:	0711      	lsls	r1, r2, #28
 802e2be:	bf44      	itt	mi
 802e2c0:	232b      	movmi	r3, #43	; 0x2b
 802e2c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e2c6:	f89a 3000 	ldrb.w	r3, [sl]
 802e2ca:	2b2a      	cmp	r3, #42	; 0x2a
 802e2cc:	d015      	beq.n	802e2fa <_svfiprintf_r+0xf6>
 802e2ce:	9a07      	ldr	r2, [sp, #28]
 802e2d0:	4654      	mov	r4, sl
 802e2d2:	2000      	movs	r0, #0
 802e2d4:	f04f 0c0a 	mov.w	ip, #10
 802e2d8:	4621      	mov	r1, r4
 802e2da:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e2de:	3b30      	subs	r3, #48	; 0x30
 802e2e0:	2b09      	cmp	r3, #9
 802e2e2:	d94e      	bls.n	802e382 <_svfiprintf_r+0x17e>
 802e2e4:	b1b0      	cbz	r0, 802e314 <_svfiprintf_r+0x110>
 802e2e6:	9207      	str	r2, [sp, #28]
 802e2e8:	e014      	b.n	802e314 <_svfiprintf_r+0x110>
 802e2ea:	eba0 0308 	sub.w	r3, r0, r8
 802e2ee:	fa09 f303 	lsl.w	r3, r9, r3
 802e2f2:	4313      	orrs	r3, r2
 802e2f4:	9304      	str	r3, [sp, #16]
 802e2f6:	46a2      	mov	sl, r4
 802e2f8:	e7d2      	b.n	802e2a0 <_svfiprintf_r+0x9c>
 802e2fa:	9b03      	ldr	r3, [sp, #12]
 802e2fc:	1d19      	adds	r1, r3, #4
 802e2fe:	681b      	ldr	r3, [r3, #0]
 802e300:	9103      	str	r1, [sp, #12]
 802e302:	2b00      	cmp	r3, #0
 802e304:	bfbb      	ittet	lt
 802e306:	425b      	neglt	r3, r3
 802e308:	f042 0202 	orrlt.w	r2, r2, #2
 802e30c:	9307      	strge	r3, [sp, #28]
 802e30e:	9307      	strlt	r3, [sp, #28]
 802e310:	bfb8      	it	lt
 802e312:	9204      	strlt	r2, [sp, #16]
 802e314:	7823      	ldrb	r3, [r4, #0]
 802e316:	2b2e      	cmp	r3, #46	; 0x2e
 802e318:	d10c      	bne.n	802e334 <_svfiprintf_r+0x130>
 802e31a:	7863      	ldrb	r3, [r4, #1]
 802e31c:	2b2a      	cmp	r3, #42	; 0x2a
 802e31e:	d135      	bne.n	802e38c <_svfiprintf_r+0x188>
 802e320:	9b03      	ldr	r3, [sp, #12]
 802e322:	1d1a      	adds	r2, r3, #4
 802e324:	681b      	ldr	r3, [r3, #0]
 802e326:	9203      	str	r2, [sp, #12]
 802e328:	2b00      	cmp	r3, #0
 802e32a:	bfb8      	it	lt
 802e32c:	f04f 33ff 	movlt.w	r3, #4294967295
 802e330:	3402      	adds	r4, #2
 802e332:	9305      	str	r3, [sp, #20]
 802e334:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802e400 <_svfiprintf_r+0x1fc>
 802e338:	7821      	ldrb	r1, [r4, #0]
 802e33a:	2203      	movs	r2, #3
 802e33c:	4650      	mov	r0, sl
 802e33e:	f7f1 ff57 	bl	80201f0 <memchr>
 802e342:	b140      	cbz	r0, 802e356 <_svfiprintf_r+0x152>
 802e344:	2340      	movs	r3, #64	; 0x40
 802e346:	eba0 000a 	sub.w	r0, r0, sl
 802e34a:	fa03 f000 	lsl.w	r0, r3, r0
 802e34e:	9b04      	ldr	r3, [sp, #16]
 802e350:	4303      	orrs	r3, r0
 802e352:	3401      	adds	r4, #1
 802e354:	9304      	str	r3, [sp, #16]
 802e356:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e35a:	4826      	ldr	r0, [pc, #152]	; (802e3f4 <_svfiprintf_r+0x1f0>)
 802e35c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802e360:	2206      	movs	r2, #6
 802e362:	f7f1 ff45 	bl	80201f0 <memchr>
 802e366:	2800      	cmp	r0, #0
 802e368:	d038      	beq.n	802e3dc <_svfiprintf_r+0x1d8>
 802e36a:	4b23      	ldr	r3, [pc, #140]	; (802e3f8 <_svfiprintf_r+0x1f4>)
 802e36c:	bb1b      	cbnz	r3, 802e3b6 <_svfiprintf_r+0x1b2>
 802e36e:	9b03      	ldr	r3, [sp, #12]
 802e370:	3307      	adds	r3, #7
 802e372:	f023 0307 	bic.w	r3, r3, #7
 802e376:	3308      	adds	r3, #8
 802e378:	9303      	str	r3, [sp, #12]
 802e37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e37c:	4433      	add	r3, r6
 802e37e:	9309      	str	r3, [sp, #36]	; 0x24
 802e380:	e767      	b.n	802e252 <_svfiprintf_r+0x4e>
 802e382:	fb0c 3202 	mla	r2, ip, r2, r3
 802e386:	460c      	mov	r4, r1
 802e388:	2001      	movs	r0, #1
 802e38a:	e7a5      	b.n	802e2d8 <_svfiprintf_r+0xd4>
 802e38c:	2300      	movs	r3, #0
 802e38e:	3401      	adds	r4, #1
 802e390:	9305      	str	r3, [sp, #20]
 802e392:	4619      	mov	r1, r3
 802e394:	f04f 0c0a 	mov.w	ip, #10
 802e398:	4620      	mov	r0, r4
 802e39a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e39e:	3a30      	subs	r2, #48	; 0x30
 802e3a0:	2a09      	cmp	r2, #9
 802e3a2:	d903      	bls.n	802e3ac <_svfiprintf_r+0x1a8>
 802e3a4:	2b00      	cmp	r3, #0
 802e3a6:	d0c5      	beq.n	802e334 <_svfiprintf_r+0x130>
 802e3a8:	9105      	str	r1, [sp, #20]
 802e3aa:	e7c3      	b.n	802e334 <_svfiprintf_r+0x130>
 802e3ac:	fb0c 2101 	mla	r1, ip, r1, r2
 802e3b0:	4604      	mov	r4, r0
 802e3b2:	2301      	movs	r3, #1
 802e3b4:	e7f0      	b.n	802e398 <_svfiprintf_r+0x194>
 802e3b6:	ab03      	add	r3, sp, #12
 802e3b8:	9300      	str	r3, [sp, #0]
 802e3ba:	462a      	mov	r2, r5
 802e3bc:	4b0f      	ldr	r3, [pc, #60]	; (802e3fc <_svfiprintf_r+0x1f8>)
 802e3be:	a904      	add	r1, sp, #16
 802e3c0:	4638      	mov	r0, r7
 802e3c2:	f3af 8000 	nop.w
 802e3c6:	1c42      	adds	r2, r0, #1
 802e3c8:	4606      	mov	r6, r0
 802e3ca:	d1d6      	bne.n	802e37a <_svfiprintf_r+0x176>
 802e3cc:	89ab      	ldrh	r3, [r5, #12]
 802e3ce:	065b      	lsls	r3, r3, #25
 802e3d0:	f53f af2c 	bmi.w	802e22c <_svfiprintf_r+0x28>
 802e3d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e3d6:	b01d      	add	sp, #116	; 0x74
 802e3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e3dc:	ab03      	add	r3, sp, #12
 802e3de:	9300      	str	r3, [sp, #0]
 802e3e0:	462a      	mov	r2, r5
 802e3e2:	4b06      	ldr	r3, [pc, #24]	; (802e3fc <_svfiprintf_r+0x1f8>)
 802e3e4:	a904      	add	r1, sp, #16
 802e3e6:	4638      	mov	r0, r7
 802e3e8:	f000 f9d4 	bl	802e794 <_printf_i>
 802e3ec:	e7eb      	b.n	802e3c6 <_svfiprintf_r+0x1c2>
 802e3ee:	bf00      	nop
 802e3f0:	080311a8 	.word	0x080311a8
 802e3f4:	080311b2 	.word	0x080311b2
 802e3f8:	00000000 	.word	0x00000000
 802e3fc:	0802e14d 	.word	0x0802e14d
 802e400:	080311ae 	.word	0x080311ae

0802e404 <__sfputc_r>:
 802e404:	6893      	ldr	r3, [r2, #8]
 802e406:	3b01      	subs	r3, #1
 802e408:	2b00      	cmp	r3, #0
 802e40a:	b410      	push	{r4}
 802e40c:	6093      	str	r3, [r2, #8]
 802e40e:	da08      	bge.n	802e422 <__sfputc_r+0x1e>
 802e410:	6994      	ldr	r4, [r2, #24]
 802e412:	42a3      	cmp	r3, r4
 802e414:	db01      	blt.n	802e41a <__sfputc_r+0x16>
 802e416:	290a      	cmp	r1, #10
 802e418:	d103      	bne.n	802e422 <__sfputc_r+0x1e>
 802e41a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e41e:	f7ff bba9 	b.w	802db74 <__swbuf_r>
 802e422:	6813      	ldr	r3, [r2, #0]
 802e424:	1c58      	adds	r0, r3, #1
 802e426:	6010      	str	r0, [r2, #0]
 802e428:	7019      	strb	r1, [r3, #0]
 802e42a:	4608      	mov	r0, r1
 802e42c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e430:	4770      	bx	lr

0802e432 <__sfputs_r>:
 802e432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e434:	4606      	mov	r6, r0
 802e436:	460f      	mov	r7, r1
 802e438:	4614      	mov	r4, r2
 802e43a:	18d5      	adds	r5, r2, r3
 802e43c:	42ac      	cmp	r4, r5
 802e43e:	d101      	bne.n	802e444 <__sfputs_r+0x12>
 802e440:	2000      	movs	r0, #0
 802e442:	e007      	b.n	802e454 <__sfputs_r+0x22>
 802e444:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e448:	463a      	mov	r2, r7
 802e44a:	4630      	mov	r0, r6
 802e44c:	f7ff ffda 	bl	802e404 <__sfputc_r>
 802e450:	1c43      	adds	r3, r0, #1
 802e452:	d1f3      	bne.n	802e43c <__sfputs_r+0xa>
 802e454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802e458 <_vfiprintf_r>:
 802e458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e45c:	460d      	mov	r5, r1
 802e45e:	b09d      	sub	sp, #116	; 0x74
 802e460:	4614      	mov	r4, r2
 802e462:	4698      	mov	r8, r3
 802e464:	4606      	mov	r6, r0
 802e466:	b118      	cbz	r0, 802e470 <_vfiprintf_r+0x18>
 802e468:	6983      	ldr	r3, [r0, #24]
 802e46a:	b90b      	cbnz	r3, 802e470 <_vfiprintf_r+0x18>
 802e46c:	f7ff fd5c 	bl	802df28 <__sinit>
 802e470:	4b89      	ldr	r3, [pc, #548]	; (802e698 <_vfiprintf_r+0x240>)
 802e472:	429d      	cmp	r5, r3
 802e474:	d11b      	bne.n	802e4ae <_vfiprintf_r+0x56>
 802e476:	6875      	ldr	r5, [r6, #4]
 802e478:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e47a:	07d9      	lsls	r1, r3, #31
 802e47c:	d405      	bmi.n	802e48a <_vfiprintf_r+0x32>
 802e47e:	89ab      	ldrh	r3, [r5, #12]
 802e480:	059a      	lsls	r2, r3, #22
 802e482:	d402      	bmi.n	802e48a <_vfiprintf_r+0x32>
 802e484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e486:	f7ff fded 	bl	802e064 <__retarget_lock_acquire_recursive>
 802e48a:	89ab      	ldrh	r3, [r5, #12]
 802e48c:	071b      	lsls	r3, r3, #28
 802e48e:	d501      	bpl.n	802e494 <_vfiprintf_r+0x3c>
 802e490:	692b      	ldr	r3, [r5, #16]
 802e492:	b9eb      	cbnz	r3, 802e4d0 <_vfiprintf_r+0x78>
 802e494:	4629      	mov	r1, r5
 802e496:	4630      	mov	r0, r6
 802e498:	f7ff fbbe 	bl	802dc18 <__swsetup_r>
 802e49c:	b1c0      	cbz	r0, 802e4d0 <_vfiprintf_r+0x78>
 802e49e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e4a0:	07dc      	lsls	r4, r3, #31
 802e4a2:	d50e      	bpl.n	802e4c2 <_vfiprintf_r+0x6a>
 802e4a4:	f04f 30ff 	mov.w	r0, #4294967295
 802e4a8:	b01d      	add	sp, #116	; 0x74
 802e4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e4ae:	4b7b      	ldr	r3, [pc, #492]	; (802e69c <_vfiprintf_r+0x244>)
 802e4b0:	429d      	cmp	r5, r3
 802e4b2:	d101      	bne.n	802e4b8 <_vfiprintf_r+0x60>
 802e4b4:	68b5      	ldr	r5, [r6, #8]
 802e4b6:	e7df      	b.n	802e478 <_vfiprintf_r+0x20>
 802e4b8:	4b79      	ldr	r3, [pc, #484]	; (802e6a0 <_vfiprintf_r+0x248>)
 802e4ba:	429d      	cmp	r5, r3
 802e4bc:	bf08      	it	eq
 802e4be:	68f5      	ldreq	r5, [r6, #12]
 802e4c0:	e7da      	b.n	802e478 <_vfiprintf_r+0x20>
 802e4c2:	89ab      	ldrh	r3, [r5, #12]
 802e4c4:	0598      	lsls	r0, r3, #22
 802e4c6:	d4ed      	bmi.n	802e4a4 <_vfiprintf_r+0x4c>
 802e4c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e4ca:	f7ff fdcc 	bl	802e066 <__retarget_lock_release_recursive>
 802e4ce:	e7e9      	b.n	802e4a4 <_vfiprintf_r+0x4c>
 802e4d0:	2300      	movs	r3, #0
 802e4d2:	9309      	str	r3, [sp, #36]	; 0x24
 802e4d4:	2320      	movs	r3, #32
 802e4d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802e4da:	f8cd 800c 	str.w	r8, [sp, #12]
 802e4de:	2330      	movs	r3, #48	; 0x30
 802e4e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802e6a4 <_vfiprintf_r+0x24c>
 802e4e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802e4e8:	f04f 0901 	mov.w	r9, #1
 802e4ec:	4623      	mov	r3, r4
 802e4ee:	469a      	mov	sl, r3
 802e4f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e4f4:	b10a      	cbz	r2, 802e4fa <_vfiprintf_r+0xa2>
 802e4f6:	2a25      	cmp	r2, #37	; 0x25
 802e4f8:	d1f9      	bne.n	802e4ee <_vfiprintf_r+0x96>
 802e4fa:	ebba 0b04 	subs.w	fp, sl, r4
 802e4fe:	d00b      	beq.n	802e518 <_vfiprintf_r+0xc0>
 802e500:	465b      	mov	r3, fp
 802e502:	4622      	mov	r2, r4
 802e504:	4629      	mov	r1, r5
 802e506:	4630      	mov	r0, r6
 802e508:	f7ff ff93 	bl	802e432 <__sfputs_r>
 802e50c:	3001      	adds	r0, #1
 802e50e:	f000 80aa 	beq.w	802e666 <_vfiprintf_r+0x20e>
 802e512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e514:	445a      	add	r2, fp
 802e516:	9209      	str	r2, [sp, #36]	; 0x24
 802e518:	f89a 3000 	ldrb.w	r3, [sl]
 802e51c:	2b00      	cmp	r3, #0
 802e51e:	f000 80a2 	beq.w	802e666 <_vfiprintf_r+0x20e>
 802e522:	2300      	movs	r3, #0
 802e524:	f04f 32ff 	mov.w	r2, #4294967295
 802e528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802e52c:	f10a 0a01 	add.w	sl, sl, #1
 802e530:	9304      	str	r3, [sp, #16]
 802e532:	9307      	str	r3, [sp, #28]
 802e534:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802e538:	931a      	str	r3, [sp, #104]	; 0x68
 802e53a:	4654      	mov	r4, sl
 802e53c:	2205      	movs	r2, #5
 802e53e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e542:	4858      	ldr	r0, [pc, #352]	; (802e6a4 <_vfiprintf_r+0x24c>)
 802e544:	f7f1 fe54 	bl	80201f0 <memchr>
 802e548:	9a04      	ldr	r2, [sp, #16]
 802e54a:	b9d8      	cbnz	r0, 802e584 <_vfiprintf_r+0x12c>
 802e54c:	06d1      	lsls	r1, r2, #27
 802e54e:	bf44      	itt	mi
 802e550:	2320      	movmi	r3, #32
 802e552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e556:	0713      	lsls	r3, r2, #28
 802e558:	bf44      	itt	mi
 802e55a:	232b      	movmi	r3, #43	; 0x2b
 802e55c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e560:	f89a 3000 	ldrb.w	r3, [sl]
 802e564:	2b2a      	cmp	r3, #42	; 0x2a
 802e566:	d015      	beq.n	802e594 <_vfiprintf_r+0x13c>
 802e568:	9a07      	ldr	r2, [sp, #28]
 802e56a:	4654      	mov	r4, sl
 802e56c:	2000      	movs	r0, #0
 802e56e:	f04f 0c0a 	mov.w	ip, #10
 802e572:	4621      	mov	r1, r4
 802e574:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e578:	3b30      	subs	r3, #48	; 0x30
 802e57a:	2b09      	cmp	r3, #9
 802e57c:	d94e      	bls.n	802e61c <_vfiprintf_r+0x1c4>
 802e57e:	b1b0      	cbz	r0, 802e5ae <_vfiprintf_r+0x156>
 802e580:	9207      	str	r2, [sp, #28]
 802e582:	e014      	b.n	802e5ae <_vfiprintf_r+0x156>
 802e584:	eba0 0308 	sub.w	r3, r0, r8
 802e588:	fa09 f303 	lsl.w	r3, r9, r3
 802e58c:	4313      	orrs	r3, r2
 802e58e:	9304      	str	r3, [sp, #16]
 802e590:	46a2      	mov	sl, r4
 802e592:	e7d2      	b.n	802e53a <_vfiprintf_r+0xe2>
 802e594:	9b03      	ldr	r3, [sp, #12]
 802e596:	1d19      	adds	r1, r3, #4
 802e598:	681b      	ldr	r3, [r3, #0]
 802e59a:	9103      	str	r1, [sp, #12]
 802e59c:	2b00      	cmp	r3, #0
 802e59e:	bfbb      	ittet	lt
 802e5a0:	425b      	neglt	r3, r3
 802e5a2:	f042 0202 	orrlt.w	r2, r2, #2
 802e5a6:	9307      	strge	r3, [sp, #28]
 802e5a8:	9307      	strlt	r3, [sp, #28]
 802e5aa:	bfb8      	it	lt
 802e5ac:	9204      	strlt	r2, [sp, #16]
 802e5ae:	7823      	ldrb	r3, [r4, #0]
 802e5b0:	2b2e      	cmp	r3, #46	; 0x2e
 802e5b2:	d10c      	bne.n	802e5ce <_vfiprintf_r+0x176>
 802e5b4:	7863      	ldrb	r3, [r4, #1]
 802e5b6:	2b2a      	cmp	r3, #42	; 0x2a
 802e5b8:	d135      	bne.n	802e626 <_vfiprintf_r+0x1ce>
 802e5ba:	9b03      	ldr	r3, [sp, #12]
 802e5bc:	1d1a      	adds	r2, r3, #4
 802e5be:	681b      	ldr	r3, [r3, #0]
 802e5c0:	9203      	str	r2, [sp, #12]
 802e5c2:	2b00      	cmp	r3, #0
 802e5c4:	bfb8      	it	lt
 802e5c6:	f04f 33ff 	movlt.w	r3, #4294967295
 802e5ca:	3402      	adds	r4, #2
 802e5cc:	9305      	str	r3, [sp, #20]
 802e5ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802e6b4 <_vfiprintf_r+0x25c>
 802e5d2:	7821      	ldrb	r1, [r4, #0]
 802e5d4:	2203      	movs	r2, #3
 802e5d6:	4650      	mov	r0, sl
 802e5d8:	f7f1 fe0a 	bl	80201f0 <memchr>
 802e5dc:	b140      	cbz	r0, 802e5f0 <_vfiprintf_r+0x198>
 802e5de:	2340      	movs	r3, #64	; 0x40
 802e5e0:	eba0 000a 	sub.w	r0, r0, sl
 802e5e4:	fa03 f000 	lsl.w	r0, r3, r0
 802e5e8:	9b04      	ldr	r3, [sp, #16]
 802e5ea:	4303      	orrs	r3, r0
 802e5ec:	3401      	adds	r4, #1
 802e5ee:	9304      	str	r3, [sp, #16]
 802e5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e5f4:	482c      	ldr	r0, [pc, #176]	; (802e6a8 <_vfiprintf_r+0x250>)
 802e5f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802e5fa:	2206      	movs	r2, #6
 802e5fc:	f7f1 fdf8 	bl	80201f0 <memchr>
 802e600:	2800      	cmp	r0, #0
 802e602:	d03f      	beq.n	802e684 <_vfiprintf_r+0x22c>
 802e604:	4b29      	ldr	r3, [pc, #164]	; (802e6ac <_vfiprintf_r+0x254>)
 802e606:	bb1b      	cbnz	r3, 802e650 <_vfiprintf_r+0x1f8>
 802e608:	9b03      	ldr	r3, [sp, #12]
 802e60a:	3307      	adds	r3, #7
 802e60c:	f023 0307 	bic.w	r3, r3, #7
 802e610:	3308      	adds	r3, #8
 802e612:	9303      	str	r3, [sp, #12]
 802e614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e616:	443b      	add	r3, r7
 802e618:	9309      	str	r3, [sp, #36]	; 0x24
 802e61a:	e767      	b.n	802e4ec <_vfiprintf_r+0x94>
 802e61c:	fb0c 3202 	mla	r2, ip, r2, r3
 802e620:	460c      	mov	r4, r1
 802e622:	2001      	movs	r0, #1
 802e624:	e7a5      	b.n	802e572 <_vfiprintf_r+0x11a>
 802e626:	2300      	movs	r3, #0
 802e628:	3401      	adds	r4, #1
 802e62a:	9305      	str	r3, [sp, #20]
 802e62c:	4619      	mov	r1, r3
 802e62e:	f04f 0c0a 	mov.w	ip, #10
 802e632:	4620      	mov	r0, r4
 802e634:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e638:	3a30      	subs	r2, #48	; 0x30
 802e63a:	2a09      	cmp	r2, #9
 802e63c:	d903      	bls.n	802e646 <_vfiprintf_r+0x1ee>
 802e63e:	2b00      	cmp	r3, #0
 802e640:	d0c5      	beq.n	802e5ce <_vfiprintf_r+0x176>
 802e642:	9105      	str	r1, [sp, #20]
 802e644:	e7c3      	b.n	802e5ce <_vfiprintf_r+0x176>
 802e646:	fb0c 2101 	mla	r1, ip, r1, r2
 802e64a:	4604      	mov	r4, r0
 802e64c:	2301      	movs	r3, #1
 802e64e:	e7f0      	b.n	802e632 <_vfiprintf_r+0x1da>
 802e650:	ab03      	add	r3, sp, #12
 802e652:	9300      	str	r3, [sp, #0]
 802e654:	462a      	mov	r2, r5
 802e656:	4b16      	ldr	r3, [pc, #88]	; (802e6b0 <_vfiprintf_r+0x258>)
 802e658:	a904      	add	r1, sp, #16
 802e65a:	4630      	mov	r0, r6
 802e65c:	f3af 8000 	nop.w
 802e660:	4607      	mov	r7, r0
 802e662:	1c78      	adds	r0, r7, #1
 802e664:	d1d6      	bne.n	802e614 <_vfiprintf_r+0x1bc>
 802e666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e668:	07d9      	lsls	r1, r3, #31
 802e66a:	d405      	bmi.n	802e678 <_vfiprintf_r+0x220>
 802e66c:	89ab      	ldrh	r3, [r5, #12]
 802e66e:	059a      	lsls	r2, r3, #22
 802e670:	d402      	bmi.n	802e678 <_vfiprintf_r+0x220>
 802e672:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e674:	f7ff fcf7 	bl	802e066 <__retarget_lock_release_recursive>
 802e678:	89ab      	ldrh	r3, [r5, #12]
 802e67a:	065b      	lsls	r3, r3, #25
 802e67c:	f53f af12 	bmi.w	802e4a4 <_vfiprintf_r+0x4c>
 802e680:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e682:	e711      	b.n	802e4a8 <_vfiprintf_r+0x50>
 802e684:	ab03      	add	r3, sp, #12
 802e686:	9300      	str	r3, [sp, #0]
 802e688:	462a      	mov	r2, r5
 802e68a:	4b09      	ldr	r3, [pc, #36]	; (802e6b0 <_vfiprintf_r+0x258>)
 802e68c:	a904      	add	r1, sp, #16
 802e68e:	4630      	mov	r0, r6
 802e690:	f000 f880 	bl	802e794 <_printf_i>
 802e694:	e7e4      	b.n	802e660 <_vfiprintf_r+0x208>
 802e696:	bf00      	nop
 802e698:	08031168 	.word	0x08031168
 802e69c:	08031188 	.word	0x08031188
 802e6a0:	08031148 	.word	0x08031148
 802e6a4:	080311a8 	.word	0x080311a8
 802e6a8:	080311b2 	.word	0x080311b2
 802e6ac:	00000000 	.word	0x00000000
 802e6b0:	0802e433 	.word	0x0802e433
 802e6b4:	080311ae 	.word	0x080311ae

0802e6b8 <_printf_common>:
 802e6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e6bc:	4616      	mov	r6, r2
 802e6be:	4699      	mov	r9, r3
 802e6c0:	688a      	ldr	r2, [r1, #8]
 802e6c2:	690b      	ldr	r3, [r1, #16]
 802e6c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802e6c8:	4293      	cmp	r3, r2
 802e6ca:	bfb8      	it	lt
 802e6cc:	4613      	movlt	r3, r2
 802e6ce:	6033      	str	r3, [r6, #0]
 802e6d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802e6d4:	4607      	mov	r7, r0
 802e6d6:	460c      	mov	r4, r1
 802e6d8:	b10a      	cbz	r2, 802e6de <_printf_common+0x26>
 802e6da:	3301      	adds	r3, #1
 802e6dc:	6033      	str	r3, [r6, #0]
 802e6de:	6823      	ldr	r3, [r4, #0]
 802e6e0:	0699      	lsls	r1, r3, #26
 802e6e2:	bf42      	ittt	mi
 802e6e4:	6833      	ldrmi	r3, [r6, #0]
 802e6e6:	3302      	addmi	r3, #2
 802e6e8:	6033      	strmi	r3, [r6, #0]
 802e6ea:	6825      	ldr	r5, [r4, #0]
 802e6ec:	f015 0506 	ands.w	r5, r5, #6
 802e6f0:	d106      	bne.n	802e700 <_printf_common+0x48>
 802e6f2:	f104 0a19 	add.w	sl, r4, #25
 802e6f6:	68e3      	ldr	r3, [r4, #12]
 802e6f8:	6832      	ldr	r2, [r6, #0]
 802e6fa:	1a9b      	subs	r3, r3, r2
 802e6fc:	42ab      	cmp	r3, r5
 802e6fe:	dc26      	bgt.n	802e74e <_printf_common+0x96>
 802e700:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802e704:	1e13      	subs	r3, r2, #0
 802e706:	6822      	ldr	r2, [r4, #0]
 802e708:	bf18      	it	ne
 802e70a:	2301      	movne	r3, #1
 802e70c:	0692      	lsls	r2, r2, #26
 802e70e:	d42b      	bmi.n	802e768 <_printf_common+0xb0>
 802e710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e714:	4649      	mov	r1, r9
 802e716:	4638      	mov	r0, r7
 802e718:	47c0      	blx	r8
 802e71a:	3001      	adds	r0, #1
 802e71c:	d01e      	beq.n	802e75c <_printf_common+0xa4>
 802e71e:	6823      	ldr	r3, [r4, #0]
 802e720:	68e5      	ldr	r5, [r4, #12]
 802e722:	6832      	ldr	r2, [r6, #0]
 802e724:	f003 0306 	and.w	r3, r3, #6
 802e728:	2b04      	cmp	r3, #4
 802e72a:	bf08      	it	eq
 802e72c:	1aad      	subeq	r5, r5, r2
 802e72e:	68a3      	ldr	r3, [r4, #8]
 802e730:	6922      	ldr	r2, [r4, #16]
 802e732:	bf0c      	ite	eq
 802e734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802e738:	2500      	movne	r5, #0
 802e73a:	4293      	cmp	r3, r2
 802e73c:	bfc4      	itt	gt
 802e73e:	1a9b      	subgt	r3, r3, r2
 802e740:	18ed      	addgt	r5, r5, r3
 802e742:	2600      	movs	r6, #0
 802e744:	341a      	adds	r4, #26
 802e746:	42b5      	cmp	r5, r6
 802e748:	d11a      	bne.n	802e780 <_printf_common+0xc8>
 802e74a:	2000      	movs	r0, #0
 802e74c:	e008      	b.n	802e760 <_printf_common+0xa8>
 802e74e:	2301      	movs	r3, #1
 802e750:	4652      	mov	r2, sl
 802e752:	4649      	mov	r1, r9
 802e754:	4638      	mov	r0, r7
 802e756:	47c0      	blx	r8
 802e758:	3001      	adds	r0, #1
 802e75a:	d103      	bne.n	802e764 <_printf_common+0xac>
 802e75c:	f04f 30ff 	mov.w	r0, #4294967295
 802e760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e764:	3501      	adds	r5, #1
 802e766:	e7c6      	b.n	802e6f6 <_printf_common+0x3e>
 802e768:	18e1      	adds	r1, r4, r3
 802e76a:	1c5a      	adds	r2, r3, #1
 802e76c:	2030      	movs	r0, #48	; 0x30
 802e76e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802e772:	4422      	add	r2, r4
 802e774:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802e778:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802e77c:	3302      	adds	r3, #2
 802e77e:	e7c7      	b.n	802e710 <_printf_common+0x58>
 802e780:	2301      	movs	r3, #1
 802e782:	4622      	mov	r2, r4
 802e784:	4649      	mov	r1, r9
 802e786:	4638      	mov	r0, r7
 802e788:	47c0      	blx	r8
 802e78a:	3001      	adds	r0, #1
 802e78c:	d0e6      	beq.n	802e75c <_printf_common+0xa4>
 802e78e:	3601      	adds	r6, #1
 802e790:	e7d9      	b.n	802e746 <_printf_common+0x8e>
	...

0802e794 <_printf_i>:
 802e794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802e798:	7e0f      	ldrb	r7, [r1, #24]
 802e79a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802e79c:	2f78      	cmp	r7, #120	; 0x78
 802e79e:	4691      	mov	r9, r2
 802e7a0:	4680      	mov	r8, r0
 802e7a2:	460c      	mov	r4, r1
 802e7a4:	469a      	mov	sl, r3
 802e7a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802e7aa:	d807      	bhi.n	802e7bc <_printf_i+0x28>
 802e7ac:	2f62      	cmp	r7, #98	; 0x62
 802e7ae:	d80a      	bhi.n	802e7c6 <_printf_i+0x32>
 802e7b0:	2f00      	cmp	r7, #0
 802e7b2:	f000 80d8 	beq.w	802e966 <_printf_i+0x1d2>
 802e7b6:	2f58      	cmp	r7, #88	; 0x58
 802e7b8:	f000 80a3 	beq.w	802e902 <_printf_i+0x16e>
 802e7bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802e7c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802e7c4:	e03a      	b.n	802e83c <_printf_i+0xa8>
 802e7c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802e7ca:	2b15      	cmp	r3, #21
 802e7cc:	d8f6      	bhi.n	802e7bc <_printf_i+0x28>
 802e7ce:	a101      	add	r1, pc, #4	; (adr r1, 802e7d4 <_printf_i+0x40>)
 802e7d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802e7d4:	0802e82d 	.word	0x0802e82d
 802e7d8:	0802e841 	.word	0x0802e841
 802e7dc:	0802e7bd 	.word	0x0802e7bd
 802e7e0:	0802e7bd 	.word	0x0802e7bd
 802e7e4:	0802e7bd 	.word	0x0802e7bd
 802e7e8:	0802e7bd 	.word	0x0802e7bd
 802e7ec:	0802e841 	.word	0x0802e841
 802e7f0:	0802e7bd 	.word	0x0802e7bd
 802e7f4:	0802e7bd 	.word	0x0802e7bd
 802e7f8:	0802e7bd 	.word	0x0802e7bd
 802e7fc:	0802e7bd 	.word	0x0802e7bd
 802e800:	0802e94d 	.word	0x0802e94d
 802e804:	0802e871 	.word	0x0802e871
 802e808:	0802e92f 	.word	0x0802e92f
 802e80c:	0802e7bd 	.word	0x0802e7bd
 802e810:	0802e7bd 	.word	0x0802e7bd
 802e814:	0802e96f 	.word	0x0802e96f
 802e818:	0802e7bd 	.word	0x0802e7bd
 802e81c:	0802e871 	.word	0x0802e871
 802e820:	0802e7bd 	.word	0x0802e7bd
 802e824:	0802e7bd 	.word	0x0802e7bd
 802e828:	0802e937 	.word	0x0802e937
 802e82c:	682b      	ldr	r3, [r5, #0]
 802e82e:	1d1a      	adds	r2, r3, #4
 802e830:	681b      	ldr	r3, [r3, #0]
 802e832:	602a      	str	r2, [r5, #0]
 802e834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802e838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802e83c:	2301      	movs	r3, #1
 802e83e:	e0a3      	b.n	802e988 <_printf_i+0x1f4>
 802e840:	6820      	ldr	r0, [r4, #0]
 802e842:	6829      	ldr	r1, [r5, #0]
 802e844:	0606      	lsls	r6, r0, #24
 802e846:	f101 0304 	add.w	r3, r1, #4
 802e84a:	d50a      	bpl.n	802e862 <_printf_i+0xce>
 802e84c:	680e      	ldr	r6, [r1, #0]
 802e84e:	602b      	str	r3, [r5, #0]
 802e850:	2e00      	cmp	r6, #0
 802e852:	da03      	bge.n	802e85c <_printf_i+0xc8>
 802e854:	232d      	movs	r3, #45	; 0x2d
 802e856:	4276      	negs	r6, r6
 802e858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e85c:	485e      	ldr	r0, [pc, #376]	; (802e9d8 <_printf_i+0x244>)
 802e85e:	230a      	movs	r3, #10
 802e860:	e019      	b.n	802e896 <_printf_i+0x102>
 802e862:	680e      	ldr	r6, [r1, #0]
 802e864:	602b      	str	r3, [r5, #0]
 802e866:	f010 0f40 	tst.w	r0, #64	; 0x40
 802e86a:	bf18      	it	ne
 802e86c:	b236      	sxthne	r6, r6
 802e86e:	e7ef      	b.n	802e850 <_printf_i+0xbc>
 802e870:	682b      	ldr	r3, [r5, #0]
 802e872:	6820      	ldr	r0, [r4, #0]
 802e874:	1d19      	adds	r1, r3, #4
 802e876:	6029      	str	r1, [r5, #0]
 802e878:	0601      	lsls	r1, r0, #24
 802e87a:	d501      	bpl.n	802e880 <_printf_i+0xec>
 802e87c:	681e      	ldr	r6, [r3, #0]
 802e87e:	e002      	b.n	802e886 <_printf_i+0xf2>
 802e880:	0646      	lsls	r6, r0, #25
 802e882:	d5fb      	bpl.n	802e87c <_printf_i+0xe8>
 802e884:	881e      	ldrh	r6, [r3, #0]
 802e886:	4854      	ldr	r0, [pc, #336]	; (802e9d8 <_printf_i+0x244>)
 802e888:	2f6f      	cmp	r7, #111	; 0x6f
 802e88a:	bf0c      	ite	eq
 802e88c:	2308      	moveq	r3, #8
 802e88e:	230a      	movne	r3, #10
 802e890:	2100      	movs	r1, #0
 802e892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802e896:	6865      	ldr	r5, [r4, #4]
 802e898:	60a5      	str	r5, [r4, #8]
 802e89a:	2d00      	cmp	r5, #0
 802e89c:	bfa2      	ittt	ge
 802e89e:	6821      	ldrge	r1, [r4, #0]
 802e8a0:	f021 0104 	bicge.w	r1, r1, #4
 802e8a4:	6021      	strge	r1, [r4, #0]
 802e8a6:	b90e      	cbnz	r6, 802e8ac <_printf_i+0x118>
 802e8a8:	2d00      	cmp	r5, #0
 802e8aa:	d04d      	beq.n	802e948 <_printf_i+0x1b4>
 802e8ac:	4615      	mov	r5, r2
 802e8ae:	fbb6 f1f3 	udiv	r1, r6, r3
 802e8b2:	fb03 6711 	mls	r7, r3, r1, r6
 802e8b6:	5dc7      	ldrb	r7, [r0, r7]
 802e8b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802e8bc:	4637      	mov	r7, r6
 802e8be:	42bb      	cmp	r3, r7
 802e8c0:	460e      	mov	r6, r1
 802e8c2:	d9f4      	bls.n	802e8ae <_printf_i+0x11a>
 802e8c4:	2b08      	cmp	r3, #8
 802e8c6:	d10b      	bne.n	802e8e0 <_printf_i+0x14c>
 802e8c8:	6823      	ldr	r3, [r4, #0]
 802e8ca:	07de      	lsls	r6, r3, #31
 802e8cc:	d508      	bpl.n	802e8e0 <_printf_i+0x14c>
 802e8ce:	6923      	ldr	r3, [r4, #16]
 802e8d0:	6861      	ldr	r1, [r4, #4]
 802e8d2:	4299      	cmp	r1, r3
 802e8d4:	bfde      	ittt	le
 802e8d6:	2330      	movle	r3, #48	; 0x30
 802e8d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 802e8dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 802e8e0:	1b52      	subs	r2, r2, r5
 802e8e2:	6122      	str	r2, [r4, #16]
 802e8e4:	f8cd a000 	str.w	sl, [sp]
 802e8e8:	464b      	mov	r3, r9
 802e8ea:	aa03      	add	r2, sp, #12
 802e8ec:	4621      	mov	r1, r4
 802e8ee:	4640      	mov	r0, r8
 802e8f0:	f7ff fee2 	bl	802e6b8 <_printf_common>
 802e8f4:	3001      	adds	r0, #1
 802e8f6:	d14c      	bne.n	802e992 <_printf_i+0x1fe>
 802e8f8:	f04f 30ff 	mov.w	r0, #4294967295
 802e8fc:	b004      	add	sp, #16
 802e8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e902:	4835      	ldr	r0, [pc, #212]	; (802e9d8 <_printf_i+0x244>)
 802e904:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802e908:	6829      	ldr	r1, [r5, #0]
 802e90a:	6823      	ldr	r3, [r4, #0]
 802e90c:	f851 6b04 	ldr.w	r6, [r1], #4
 802e910:	6029      	str	r1, [r5, #0]
 802e912:	061d      	lsls	r5, r3, #24
 802e914:	d514      	bpl.n	802e940 <_printf_i+0x1ac>
 802e916:	07df      	lsls	r7, r3, #31
 802e918:	bf44      	itt	mi
 802e91a:	f043 0320 	orrmi.w	r3, r3, #32
 802e91e:	6023      	strmi	r3, [r4, #0]
 802e920:	b91e      	cbnz	r6, 802e92a <_printf_i+0x196>
 802e922:	6823      	ldr	r3, [r4, #0]
 802e924:	f023 0320 	bic.w	r3, r3, #32
 802e928:	6023      	str	r3, [r4, #0]
 802e92a:	2310      	movs	r3, #16
 802e92c:	e7b0      	b.n	802e890 <_printf_i+0xfc>
 802e92e:	6823      	ldr	r3, [r4, #0]
 802e930:	f043 0320 	orr.w	r3, r3, #32
 802e934:	6023      	str	r3, [r4, #0]
 802e936:	2378      	movs	r3, #120	; 0x78
 802e938:	4828      	ldr	r0, [pc, #160]	; (802e9dc <_printf_i+0x248>)
 802e93a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802e93e:	e7e3      	b.n	802e908 <_printf_i+0x174>
 802e940:	0659      	lsls	r1, r3, #25
 802e942:	bf48      	it	mi
 802e944:	b2b6      	uxthmi	r6, r6
 802e946:	e7e6      	b.n	802e916 <_printf_i+0x182>
 802e948:	4615      	mov	r5, r2
 802e94a:	e7bb      	b.n	802e8c4 <_printf_i+0x130>
 802e94c:	682b      	ldr	r3, [r5, #0]
 802e94e:	6826      	ldr	r6, [r4, #0]
 802e950:	6961      	ldr	r1, [r4, #20]
 802e952:	1d18      	adds	r0, r3, #4
 802e954:	6028      	str	r0, [r5, #0]
 802e956:	0635      	lsls	r5, r6, #24
 802e958:	681b      	ldr	r3, [r3, #0]
 802e95a:	d501      	bpl.n	802e960 <_printf_i+0x1cc>
 802e95c:	6019      	str	r1, [r3, #0]
 802e95e:	e002      	b.n	802e966 <_printf_i+0x1d2>
 802e960:	0670      	lsls	r0, r6, #25
 802e962:	d5fb      	bpl.n	802e95c <_printf_i+0x1c8>
 802e964:	8019      	strh	r1, [r3, #0]
 802e966:	2300      	movs	r3, #0
 802e968:	6123      	str	r3, [r4, #16]
 802e96a:	4615      	mov	r5, r2
 802e96c:	e7ba      	b.n	802e8e4 <_printf_i+0x150>
 802e96e:	682b      	ldr	r3, [r5, #0]
 802e970:	1d1a      	adds	r2, r3, #4
 802e972:	602a      	str	r2, [r5, #0]
 802e974:	681d      	ldr	r5, [r3, #0]
 802e976:	6862      	ldr	r2, [r4, #4]
 802e978:	2100      	movs	r1, #0
 802e97a:	4628      	mov	r0, r5
 802e97c:	f7f1 fc38 	bl	80201f0 <memchr>
 802e980:	b108      	cbz	r0, 802e986 <_printf_i+0x1f2>
 802e982:	1b40      	subs	r0, r0, r5
 802e984:	6060      	str	r0, [r4, #4]
 802e986:	6863      	ldr	r3, [r4, #4]
 802e988:	6123      	str	r3, [r4, #16]
 802e98a:	2300      	movs	r3, #0
 802e98c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e990:	e7a8      	b.n	802e8e4 <_printf_i+0x150>
 802e992:	6923      	ldr	r3, [r4, #16]
 802e994:	462a      	mov	r2, r5
 802e996:	4649      	mov	r1, r9
 802e998:	4640      	mov	r0, r8
 802e99a:	47d0      	blx	sl
 802e99c:	3001      	adds	r0, #1
 802e99e:	d0ab      	beq.n	802e8f8 <_printf_i+0x164>
 802e9a0:	6823      	ldr	r3, [r4, #0]
 802e9a2:	079b      	lsls	r3, r3, #30
 802e9a4:	d413      	bmi.n	802e9ce <_printf_i+0x23a>
 802e9a6:	68e0      	ldr	r0, [r4, #12]
 802e9a8:	9b03      	ldr	r3, [sp, #12]
 802e9aa:	4298      	cmp	r0, r3
 802e9ac:	bfb8      	it	lt
 802e9ae:	4618      	movlt	r0, r3
 802e9b0:	e7a4      	b.n	802e8fc <_printf_i+0x168>
 802e9b2:	2301      	movs	r3, #1
 802e9b4:	4632      	mov	r2, r6
 802e9b6:	4649      	mov	r1, r9
 802e9b8:	4640      	mov	r0, r8
 802e9ba:	47d0      	blx	sl
 802e9bc:	3001      	adds	r0, #1
 802e9be:	d09b      	beq.n	802e8f8 <_printf_i+0x164>
 802e9c0:	3501      	adds	r5, #1
 802e9c2:	68e3      	ldr	r3, [r4, #12]
 802e9c4:	9903      	ldr	r1, [sp, #12]
 802e9c6:	1a5b      	subs	r3, r3, r1
 802e9c8:	42ab      	cmp	r3, r5
 802e9ca:	dcf2      	bgt.n	802e9b2 <_printf_i+0x21e>
 802e9cc:	e7eb      	b.n	802e9a6 <_printf_i+0x212>
 802e9ce:	2500      	movs	r5, #0
 802e9d0:	f104 0619 	add.w	r6, r4, #25
 802e9d4:	e7f5      	b.n	802e9c2 <_printf_i+0x22e>
 802e9d6:	bf00      	nop
 802e9d8:	080311b9 	.word	0x080311b9
 802e9dc:	080311ca 	.word	0x080311ca

0802e9e0 <__sread>:
 802e9e0:	b510      	push	{r4, lr}
 802e9e2:	460c      	mov	r4, r1
 802e9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e9e8:	f000 f8ec 	bl	802ebc4 <_read_r>
 802e9ec:	2800      	cmp	r0, #0
 802e9ee:	bfab      	itete	ge
 802e9f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802e9f2:	89a3      	ldrhlt	r3, [r4, #12]
 802e9f4:	181b      	addge	r3, r3, r0
 802e9f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802e9fa:	bfac      	ite	ge
 802e9fc:	6563      	strge	r3, [r4, #84]	; 0x54
 802e9fe:	81a3      	strhlt	r3, [r4, #12]
 802ea00:	bd10      	pop	{r4, pc}

0802ea02 <__swrite>:
 802ea02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ea06:	461f      	mov	r7, r3
 802ea08:	898b      	ldrh	r3, [r1, #12]
 802ea0a:	05db      	lsls	r3, r3, #23
 802ea0c:	4605      	mov	r5, r0
 802ea0e:	460c      	mov	r4, r1
 802ea10:	4616      	mov	r6, r2
 802ea12:	d505      	bpl.n	802ea20 <__swrite+0x1e>
 802ea14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ea18:	2302      	movs	r3, #2
 802ea1a:	2200      	movs	r2, #0
 802ea1c:	f000 f868 	bl	802eaf0 <_lseek_r>
 802ea20:	89a3      	ldrh	r3, [r4, #12]
 802ea22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ea26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802ea2a:	81a3      	strh	r3, [r4, #12]
 802ea2c:	4632      	mov	r2, r6
 802ea2e:	463b      	mov	r3, r7
 802ea30:	4628      	mov	r0, r5
 802ea32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ea36:	f000 b817 	b.w	802ea68 <_write_r>

0802ea3a <__sseek>:
 802ea3a:	b510      	push	{r4, lr}
 802ea3c:	460c      	mov	r4, r1
 802ea3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ea42:	f000 f855 	bl	802eaf0 <_lseek_r>
 802ea46:	1c43      	adds	r3, r0, #1
 802ea48:	89a3      	ldrh	r3, [r4, #12]
 802ea4a:	bf15      	itete	ne
 802ea4c:	6560      	strne	r0, [r4, #84]	; 0x54
 802ea4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802ea52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802ea56:	81a3      	strheq	r3, [r4, #12]
 802ea58:	bf18      	it	ne
 802ea5a:	81a3      	strhne	r3, [r4, #12]
 802ea5c:	bd10      	pop	{r4, pc}

0802ea5e <__sclose>:
 802ea5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ea62:	f000 b813 	b.w	802ea8c <_close_r>
	...

0802ea68 <_write_r>:
 802ea68:	b538      	push	{r3, r4, r5, lr}
 802ea6a:	4d07      	ldr	r5, [pc, #28]	; (802ea88 <_write_r+0x20>)
 802ea6c:	4604      	mov	r4, r0
 802ea6e:	4608      	mov	r0, r1
 802ea70:	4611      	mov	r1, r2
 802ea72:	2200      	movs	r2, #0
 802ea74:	602a      	str	r2, [r5, #0]
 802ea76:	461a      	mov	r2, r3
 802ea78:	f7f3 f9f2 	bl	8021e60 <_write>
 802ea7c:	1c43      	adds	r3, r0, #1
 802ea7e:	d102      	bne.n	802ea86 <_write_r+0x1e>
 802ea80:	682b      	ldr	r3, [r5, #0]
 802ea82:	b103      	cbz	r3, 802ea86 <_write_r+0x1e>
 802ea84:	6023      	str	r3, [r4, #0]
 802ea86:	bd38      	pop	{r3, r4, r5, pc}
 802ea88:	200011dc 	.word	0x200011dc

0802ea8c <_close_r>:
 802ea8c:	b538      	push	{r3, r4, r5, lr}
 802ea8e:	4d06      	ldr	r5, [pc, #24]	; (802eaa8 <_close_r+0x1c>)
 802ea90:	2300      	movs	r3, #0
 802ea92:	4604      	mov	r4, r0
 802ea94:	4608      	mov	r0, r1
 802ea96:	602b      	str	r3, [r5, #0]
 802ea98:	f7f3 f9fe 	bl	8021e98 <_close>
 802ea9c:	1c43      	adds	r3, r0, #1
 802ea9e:	d102      	bne.n	802eaa6 <_close_r+0x1a>
 802eaa0:	682b      	ldr	r3, [r5, #0]
 802eaa2:	b103      	cbz	r3, 802eaa6 <_close_r+0x1a>
 802eaa4:	6023      	str	r3, [r4, #0]
 802eaa6:	bd38      	pop	{r3, r4, r5, pc}
 802eaa8:	200011dc 	.word	0x200011dc

0802eaac <_fstat_r>:
 802eaac:	b538      	push	{r3, r4, r5, lr}
 802eaae:	4d07      	ldr	r5, [pc, #28]	; (802eacc <_fstat_r+0x20>)
 802eab0:	2300      	movs	r3, #0
 802eab2:	4604      	mov	r4, r0
 802eab4:	4608      	mov	r0, r1
 802eab6:	4611      	mov	r1, r2
 802eab8:	602b      	str	r3, [r5, #0]
 802eaba:	f7f3 f9f9 	bl	8021eb0 <_fstat>
 802eabe:	1c43      	adds	r3, r0, #1
 802eac0:	d102      	bne.n	802eac8 <_fstat_r+0x1c>
 802eac2:	682b      	ldr	r3, [r5, #0]
 802eac4:	b103      	cbz	r3, 802eac8 <_fstat_r+0x1c>
 802eac6:	6023      	str	r3, [r4, #0]
 802eac8:	bd38      	pop	{r3, r4, r5, pc}
 802eaca:	bf00      	nop
 802eacc:	200011dc 	.word	0x200011dc

0802ead0 <_isatty_r>:
 802ead0:	b538      	push	{r3, r4, r5, lr}
 802ead2:	4d06      	ldr	r5, [pc, #24]	; (802eaec <_isatty_r+0x1c>)
 802ead4:	2300      	movs	r3, #0
 802ead6:	4604      	mov	r4, r0
 802ead8:	4608      	mov	r0, r1
 802eada:	602b      	str	r3, [r5, #0]
 802eadc:	f7f3 f9f8 	bl	8021ed0 <_isatty>
 802eae0:	1c43      	adds	r3, r0, #1
 802eae2:	d102      	bne.n	802eaea <_isatty_r+0x1a>
 802eae4:	682b      	ldr	r3, [r5, #0]
 802eae6:	b103      	cbz	r3, 802eaea <_isatty_r+0x1a>
 802eae8:	6023      	str	r3, [r4, #0]
 802eaea:	bd38      	pop	{r3, r4, r5, pc}
 802eaec:	200011dc 	.word	0x200011dc

0802eaf0 <_lseek_r>:
 802eaf0:	b538      	push	{r3, r4, r5, lr}
 802eaf2:	4d07      	ldr	r5, [pc, #28]	; (802eb10 <_lseek_r+0x20>)
 802eaf4:	4604      	mov	r4, r0
 802eaf6:	4608      	mov	r0, r1
 802eaf8:	4611      	mov	r1, r2
 802eafa:	2200      	movs	r2, #0
 802eafc:	602a      	str	r2, [r5, #0]
 802eafe:	461a      	mov	r2, r3
 802eb00:	f7f3 f9f1 	bl	8021ee6 <_lseek>
 802eb04:	1c43      	adds	r3, r0, #1
 802eb06:	d102      	bne.n	802eb0e <_lseek_r+0x1e>
 802eb08:	682b      	ldr	r3, [r5, #0]
 802eb0a:	b103      	cbz	r3, 802eb0e <_lseek_r+0x1e>
 802eb0c:	6023      	str	r3, [r4, #0]
 802eb0e:	bd38      	pop	{r3, r4, r5, pc}
 802eb10:	200011dc 	.word	0x200011dc

0802eb14 <memcpy>:
 802eb14:	440a      	add	r2, r1
 802eb16:	4291      	cmp	r1, r2
 802eb18:	f100 33ff 	add.w	r3, r0, #4294967295
 802eb1c:	d100      	bne.n	802eb20 <memcpy+0xc>
 802eb1e:	4770      	bx	lr
 802eb20:	b510      	push	{r4, lr}
 802eb22:	f811 4b01 	ldrb.w	r4, [r1], #1
 802eb26:	f803 4f01 	strb.w	r4, [r3, #1]!
 802eb2a:	4291      	cmp	r1, r2
 802eb2c:	d1f9      	bne.n	802eb22 <memcpy+0xe>
 802eb2e:	bd10      	pop	{r4, pc}

0802eb30 <memmove>:
 802eb30:	4288      	cmp	r0, r1
 802eb32:	b510      	push	{r4, lr}
 802eb34:	eb01 0402 	add.w	r4, r1, r2
 802eb38:	d902      	bls.n	802eb40 <memmove+0x10>
 802eb3a:	4284      	cmp	r4, r0
 802eb3c:	4623      	mov	r3, r4
 802eb3e:	d807      	bhi.n	802eb50 <memmove+0x20>
 802eb40:	1e43      	subs	r3, r0, #1
 802eb42:	42a1      	cmp	r1, r4
 802eb44:	d008      	beq.n	802eb58 <memmove+0x28>
 802eb46:	f811 2b01 	ldrb.w	r2, [r1], #1
 802eb4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802eb4e:	e7f8      	b.n	802eb42 <memmove+0x12>
 802eb50:	4402      	add	r2, r0
 802eb52:	4601      	mov	r1, r0
 802eb54:	428a      	cmp	r2, r1
 802eb56:	d100      	bne.n	802eb5a <memmove+0x2a>
 802eb58:	bd10      	pop	{r4, pc}
 802eb5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802eb5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802eb62:	e7f7      	b.n	802eb54 <memmove+0x24>

0802eb64 <_realloc_r>:
 802eb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802eb68:	4680      	mov	r8, r0
 802eb6a:	4614      	mov	r4, r2
 802eb6c:	460e      	mov	r6, r1
 802eb6e:	b921      	cbnz	r1, 802eb7a <_realloc_r+0x16>
 802eb70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802eb74:	4611      	mov	r1, r2
 802eb76:	f7fe becb 	b.w	802d910 <_malloc_r>
 802eb7a:	b92a      	cbnz	r2, 802eb88 <_realloc_r+0x24>
 802eb7c:	f7fe fe5c 	bl	802d838 <_free_r>
 802eb80:	4625      	mov	r5, r4
 802eb82:	4628      	mov	r0, r5
 802eb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802eb88:	f000 f82e 	bl	802ebe8 <_malloc_usable_size_r>
 802eb8c:	4284      	cmp	r4, r0
 802eb8e:	4607      	mov	r7, r0
 802eb90:	d802      	bhi.n	802eb98 <_realloc_r+0x34>
 802eb92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802eb96:	d812      	bhi.n	802ebbe <_realloc_r+0x5a>
 802eb98:	4621      	mov	r1, r4
 802eb9a:	4640      	mov	r0, r8
 802eb9c:	f7fe feb8 	bl	802d910 <_malloc_r>
 802eba0:	4605      	mov	r5, r0
 802eba2:	2800      	cmp	r0, #0
 802eba4:	d0ed      	beq.n	802eb82 <_realloc_r+0x1e>
 802eba6:	42bc      	cmp	r4, r7
 802eba8:	4622      	mov	r2, r4
 802ebaa:	4631      	mov	r1, r6
 802ebac:	bf28      	it	cs
 802ebae:	463a      	movcs	r2, r7
 802ebb0:	f7ff ffb0 	bl	802eb14 <memcpy>
 802ebb4:	4631      	mov	r1, r6
 802ebb6:	4640      	mov	r0, r8
 802ebb8:	f7fe fe3e 	bl	802d838 <_free_r>
 802ebbc:	e7e1      	b.n	802eb82 <_realloc_r+0x1e>
 802ebbe:	4635      	mov	r5, r6
 802ebc0:	e7df      	b.n	802eb82 <_realloc_r+0x1e>
	...

0802ebc4 <_read_r>:
 802ebc4:	b538      	push	{r3, r4, r5, lr}
 802ebc6:	4d07      	ldr	r5, [pc, #28]	; (802ebe4 <_read_r+0x20>)
 802ebc8:	4604      	mov	r4, r0
 802ebca:	4608      	mov	r0, r1
 802ebcc:	4611      	mov	r1, r2
 802ebce:	2200      	movs	r2, #0
 802ebd0:	602a      	str	r2, [r5, #0]
 802ebd2:	461a      	mov	r2, r3
 802ebd4:	f7f3 f927 	bl	8021e26 <_read>
 802ebd8:	1c43      	adds	r3, r0, #1
 802ebda:	d102      	bne.n	802ebe2 <_read_r+0x1e>
 802ebdc:	682b      	ldr	r3, [r5, #0]
 802ebde:	b103      	cbz	r3, 802ebe2 <_read_r+0x1e>
 802ebe0:	6023      	str	r3, [r4, #0]
 802ebe2:	bd38      	pop	{r3, r4, r5, pc}
 802ebe4:	200011dc 	.word	0x200011dc

0802ebe8 <_malloc_usable_size_r>:
 802ebe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ebec:	1f18      	subs	r0, r3, #4
 802ebee:	2b00      	cmp	r3, #0
 802ebf0:	bfbc      	itt	lt
 802ebf2:	580b      	ldrlt	r3, [r1, r0]
 802ebf4:	18c0      	addlt	r0, r0, r3
 802ebf6:	4770      	bx	lr

0802ebf8 <_init>:
 802ebf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ebfa:	bf00      	nop
 802ebfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ebfe:	bc08      	pop	{r3}
 802ec00:	469e      	mov	lr, r3
 802ec02:	4770      	bx	lr

0802ec04 <_fini>:
 802ec04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ec06:	bf00      	nop
 802ec08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ec0a:	bc08      	pop	{r3}
 802ec0c:	469e      	mov	lr, r3
 802ec0e:	4770      	bx	lr
