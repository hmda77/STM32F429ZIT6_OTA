
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e810  080401b0  080401b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026e4  0804e9c0  0804e9c0  0001e9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080510a4  080510a4  000300e0  2**0
                  CONTENTS
  4 .ARM          00000008  080510a4  080510a4  000210a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080510ac  080510ac  000300e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080510ac  080510ac  000210ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080510b0  080510b0  000210b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  080510b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e0  2**0
                  CONTENTS
 10 .bss          000010f4  200000e0  200000e0  000300e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200011d4  200011d4  000300e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c593  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f26  00000000  00000000  0005c6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002338  00000000  00000000  000625d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000020e8  00000000  00000000  00064908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c816  00000000  00000000  000669f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ceee  00000000  00000000  00093206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0b4c  00000000  00000000  000c00f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b0c40  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009edc  00000000  00000000  001b0c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401b0 <__do_global_dtors_aux>:
 80401b0:	b510      	push	{r4, lr}
 80401b2:	4c05      	ldr	r4, [pc, #20]	; (80401c8 <__do_global_dtors_aux+0x18>)
 80401b4:	7823      	ldrb	r3, [r4, #0]
 80401b6:	b933      	cbnz	r3, 80401c6 <__do_global_dtors_aux+0x16>
 80401b8:	4b04      	ldr	r3, [pc, #16]	; (80401cc <__do_global_dtors_aux+0x1c>)
 80401ba:	b113      	cbz	r3, 80401c2 <__do_global_dtors_aux+0x12>
 80401bc:	4804      	ldr	r0, [pc, #16]	; (80401d0 <__do_global_dtors_aux+0x20>)
 80401be:	f3af 8000 	nop.w
 80401c2:	2301      	movs	r3, #1
 80401c4:	7023      	strb	r3, [r4, #0]
 80401c6:	bd10      	pop	{r4, pc}
 80401c8:	200000e0 	.word	0x200000e0
 80401cc:	00000000 	.word	0x00000000
 80401d0:	0804e9a8 	.word	0x0804e9a8

080401d4 <frame_dummy>:
 80401d4:	b508      	push	{r3, lr}
 80401d6:	4b03      	ldr	r3, [pc, #12]	; (80401e4 <frame_dummy+0x10>)
 80401d8:	b11b      	cbz	r3, 80401e2 <frame_dummy+0xe>
 80401da:	4903      	ldr	r1, [pc, #12]	; (80401e8 <frame_dummy+0x14>)
 80401dc:	4803      	ldr	r0, [pc, #12]	; (80401ec <frame_dummy+0x18>)
 80401de:	f3af 8000 	nop.w
 80401e2:	bd08      	pop	{r3, pc}
 80401e4:	00000000 	.word	0x00000000
 80401e8:	200000e4 	.word	0x200000e4
 80401ec:	0804e9a8 	.word	0x0804e9a8

080401f0 <memchr>:
 80401f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80401f4:	2a10      	cmp	r2, #16
 80401f6:	db2b      	blt.n	8040250 <memchr+0x60>
 80401f8:	f010 0f07 	tst.w	r0, #7
 80401fc:	d008      	beq.n	8040210 <memchr+0x20>
 80401fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040202:	3a01      	subs	r2, #1
 8040204:	428b      	cmp	r3, r1
 8040206:	d02d      	beq.n	8040264 <memchr+0x74>
 8040208:	f010 0f07 	tst.w	r0, #7
 804020c:	b342      	cbz	r2, 8040260 <memchr+0x70>
 804020e:	d1f6      	bne.n	80401fe <memchr+0xe>
 8040210:	b4f0      	push	{r4, r5, r6, r7}
 8040212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804021a:	f022 0407 	bic.w	r4, r2, #7
 804021e:	f07f 0700 	mvns.w	r7, #0
 8040222:	2300      	movs	r3, #0
 8040224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040228:	3c08      	subs	r4, #8
 804022a:	ea85 0501 	eor.w	r5, r5, r1
 804022e:	ea86 0601 	eor.w	r6, r6, r1
 8040232:	fa85 f547 	uadd8	r5, r5, r7
 8040236:	faa3 f587 	sel	r5, r3, r7
 804023a:	fa86 f647 	uadd8	r6, r6, r7
 804023e:	faa5 f687 	sel	r6, r5, r7
 8040242:	b98e      	cbnz	r6, 8040268 <memchr+0x78>
 8040244:	d1ee      	bne.n	8040224 <memchr+0x34>
 8040246:	bcf0      	pop	{r4, r5, r6, r7}
 8040248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804024c:	f002 0207 	and.w	r2, r2, #7
 8040250:	b132      	cbz	r2, 8040260 <memchr+0x70>
 8040252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040256:	3a01      	subs	r2, #1
 8040258:	ea83 0301 	eor.w	r3, r3, r1
 804025c:	b113      	cbz	r3, 8040264 <memchr+0x74>
 804025e:	d1f8      	bne.n	8040252 <memchr+0x62>
 8040260:	2000      	movs	r0, #0
 8040262:	4770      	bx	lr
 8040264:	3801      	subs	r0, #1
 8040266:	4770      	bx	lr
 8040268:	2d00      	cmp	r5, #0
 804026a:	bf06      	itte	eq
 804026c:	4635      	moveq	r5, r6
 804026e:	3803      	subeq	r0, #3
 8040270:	3807      	subne	r0, #7
 8040272:	f015 0f01 	tst.w	r5, #1
 8040276:	d107      	bne.n	8040288 <memchr+0x98>
 8040278:	3001      	adds	r0, #1
 804027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804027e:	bf02      	ittt	eq
 8040280:	3001      	addeq	r0, #1
 8040282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040286:	3001      	addeq	r0, #1
 8040288:	bcf0      	pop	{r4, r5, r6, r7}
 804028a:	3801      	subs	r0, #1
 804028c:	4770      	bx	lr
 804028e:	bf00      	nop

08040290 <__aeabi_uldivmod>:
 8040290:	b953      	cbnz	r3, 80402a8 <__aeabi_uldivmod+0x18>
 8040292:	b94a      	cbnz	r2, 80402a8 <__aeabi_uldivmod+0x18>
 8040294:	2900      	cmp	r1, #0
 8040296:	bf08      	it	eq
 8040298:	2800      	cmpeq	r0, #0
 804029a:	bf1c      	itt	ne
 804029c:	f04f 31ff 	movne.w	r1, #4294967295
 80402a0:	f04f 30ff 	movne.w	r0, #4294967295
 80402a4:	f000 b974 	b.w	8040590 <__aeabi_idiv0>
 80402a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80402ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80402b0:	f000 f806 	bl	80402c0 <__udivmoddi4>
 80402b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80402b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80402bc:	b004      	add	sp, #16
 80402be:	4770      	bx	lr

080402c0 <__udivmoddi4>:
 80402c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80402c4:	9d08      	ldr	r5, [sp, #32]
 80402c6:	4604      	mov	r4, r0
 80402c8:	468e      	mov	lr, r1
 80402ca:	2b00      	cmp	r3, #0
 80402cc:	d14d      	bne.n	804036a <__udivmoddi4+0xaa>
 80402ce:	428a      	cmp	r2, r1
 80402d0:	4694      	mov	ip, r2
 80402d2:	d969      	bls.n	80403a8 <__udivmoddi4+0xe8>
 80402d4:	fab2 f282 	clz	r2, r2
 80402d8:	b152      	cbz	r2, 80402f0 <__udivmoddi4+0x30>
 80402da:	fa01 f302 	lsl.w	r3, r1, r2
 80402de:	f1c2 0120 	rsb	r1, r2, #32
 80402e2:	fa20 f101 	lsr.w	r1, r0, r1
 80402e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80402ea:	ea41 0e03 	orr.w	lr, r1, r3
 80402ee:	4094      	lsls	r4, r2
 80402f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80402f4:	0c21      	lsrs	r1, r4, #16
 80402f6:	fbbe f6f8 	udiv	r6, lr, r8
 80402fa:	fa1f f78c 	uxth.w	r7, ip
 80402fe:	fb08 e316 	mls	r3, r8, r6, lr
 8040302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040306:	fb06 f107 	mul.w	r1, r6, r7
 804030a:	4299      	cmp	r1, r3
 804030c:	d90a      	bls.n	8040324 <__udivmoddi4+0x64>
 804030e:	eb1c 0303 	adds.w	r3, ip, r3
 8040312:	f106 30ff 	add.w	r0, r6, #4294967295
 8040316:	f080 811f 	bcs.w	8040558 <__udivmoddi4+0x298>
 804031a:	4299      	cmp	r1, r3
 804031c:	f240 811c 	bls.w	8040558 <__udivmoddi4+0x298>
 8040320:	3e02      	subs	r6, #2
 8040322:	4463      	add	r3, ip
 8040324:	1a5b      	subs	r3, r3, r1
 8040326:	b2a4      	uxth	r4, r4
 8040328:	fbb3 f0f8 	udiv	r0, r3, r8
 804032c:	fb08 3310 	mls	r3, r8, r0, r3
 8040330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040334:	fb00 f707 	mul.w	r7, r0, r7
 8040338:	42a7      	cmp	r7, r4
 804033a:	d90a      	bls.n	8040352 <__udivmoddi4+0x92>
 804033c:	eb1c 0404 	adds.w	r4, ip, r4
 8040340:	f100 33ff 	add.w	r3, r0, #4294967295
 8040344:	f080 810a 	bcs.w	804055c <__udivmoddi4+0x29c>
 8040348:	42a7      	cmp	r7, r4
 804034a:	f240 8107 	bls.w	804055c <__udivmoddi4+0x29c>
 804034e:	4464      	add	r4, ip
 8040350:	3802      	subs	r0, #2
 8040352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040356:	1be4      	subs	r4, r4, r7
 8040358:	2600      	movs	r6, #0
 804035a:	b11d      	cbz	r5, 8040364 <__udivmoddi4+0xa4>
 804035c:	40d4      	lsrs	r4, r2
 804035e:	2300      	movs	r3, #0
 8040360:	e9c5 4300 	strd	r4, r3, [r5]
 8040364:	4631      	mov	r1, r6
 8040366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804036a:	428b      	cmp	r3, r1
 804036c:	d909      	bls.n	8040382 <__udivmoddi4+0xc2>
 804036e:	2d00      	cmp	r5, #0
 8040370:	f000 80ef 	beq.w	8040552 <__udivmoddi4+0x292>
 8040374:	2600      	movs	r6, #0
 8040376:	e9c5 0100 	strd	r0, r1, [r5]
 804037a:	4630      	mov	r0, r6
 804037c:	4631      	mov	r1, r6
 804037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040382:	fab3 f683 	clz	r6, r3
 8040386:	2e00      	cmp	r6, #0
 8040388:	d14a      	bne.n	8040420 <__udivmoddi4+0x160>
 804038a:	428b      	cmp	r3, r1
 804038c:	d302      	bcc.n	8040394 <__udivmoddi4+0xd4>
 804038e:	4282      	cmp	r2, r0
 8040390:	f200 80f9 	bhi.w	8040586 <__udivmoddi4+0x2c6>
 8040394:	1a84      	subs	r4, r0, r2
 8040396:	eb61 0303 	sbc.w	r3, r1, r3
 804039a:	2001      	movs	r0, #1
 804039c:	469e      	mov	lr, r3
 804039e:	2d00      	cmp	r5, #0
 80403a0:	d0e0      	beq.n	8040364 <__udivmoddi4+0xa4>
 80403a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80403a6:	e7dd      	b.n	8040364 <__udivmoddi4+0xa4>
 80403a8:	b902      	cbnz	r2, 80403ac <__udivmoddi4+0xec>
 80403aa:	deff      	udf	#255	; 0xff
 80403ac:	fab2 f282 	clz	r2, r2
 80403b0:	2a00      	cmp	r2, #0
 80403b2:	f040 8092 	bne.w	80404da <__udivmoddi4+0x21a>
 80403b6:	eba1 010c 	sub.w	r1, r1, ip
 80403ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80403be:	fa1f fe8c 	uxth.w	lr, ip
 80403c2:	2601      	movs	r6, #1
 80403c4:	0c20      	lsrs	r0, r4, #16
 80403c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80403ca:	fb07 1113 	mls	r1, r7, r3, r1
 80403ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80403d2:	fb0e f003 	mul.w	r0, lr, r3
 80403d6:	4288      	cmp	r0, r1
 80403d8:	d908      	bls.n	80403ec <__udivmoddi4+0x12c>
 80403da:	eb1c 0101 	adds.w	r1, ip, r1
 80403de:	f103 38ff 	add.w	r8, r3, #4294967295
 80403e2:	d202      	bcs.n	80403ea <__udivmoddi4+0x12a>
 80403e4:	4288      	cmp	r0, r1
 80403e6:	f200 80cb 	bhi.w	8040580 <__udivmoddi4+0x2c0>
 80403ea:	4643      	mov	r3, r8
 80403ec:	1a09      	subs	r1, r1, r0
 80403ee:	b2a4      	uxth	r4, r4
 80403f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80403f4:	fb07 1110 	mls	r1, r7, r0, r1
 80403f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80403fc:	fb0e fe00 	mul.w	lr, lr, r0
 8040400:	45a6      	cmp	lr, r4
 8040402:	d908      	bls.n	8040416 <__udivmoddi4+0x156>
 8040404:	eb1c 0404 	adds.w	r4, ip, r4
 8040408:	f100 31ff 	add.w	r1, r0, #4294967295
 804040c:	d202      	bcs.n	8040414 <__udivmoddi4+0x154>
 804040e:	45a6      	cmp	lr, r4
 8040410:	f200 80bb 	bhi.w	804058a <__udivmoddi4+0x2ca>
 8040414:	4608      	mov	r0, r1
 8040416:	eba4 040e 	sub.w	r4, r4, lr
 804041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804041e:	e79c      	b.n	804035a <__udivmoddi4+0x9a>
 8040420:	f1c6 0720 	rsb	r7, r6, #32
 8040424:	40b3      	lsls	r3, r6
 8040426:	fa22 fc07 	lsr.w	ip, r2, r7
 804042a:	ea4c 0c03 	orr.w	ip, ip, r3
 804042e:	fa20 f407 	lsr.w	r4, r0, r7
 8040432:	fa01 f306 	lsl.w	r3, r1, r6
 8040436:	431c      	orrs	r4, r3
 8040438:	40f9      	lsrs	r1, r7
 804043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804043e:	fa00 f306 	lsl.w	r3, r0, r6
 8040442:	fbb1 f8f9 	udiv	r8, r1, r9
 8040446:	0c20      	lsrs	r0, r4, #16
 8040448:	fa1f fe8c 	uxth.w	lr, ip
 804044c:	fb09 1118 	mls	r1, r9, r8, r1
 8040450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040454:	fb08 f00e 	mul.w	r0, r8, lr
 8040458:	4288      	cmp	r0, r1
 804045a:	fa02 f206 	lsl.w	r2, r2, r6
 804045e:	d90b      	bls.n	8040478 <__udivmoddi4+0x1b8>
 8040460:	eb1c 0101 	adds.w	r1, ip, r1
 8040464:	f108 3aff 	add.w	sl, r8, #4294967295
 8040468:	f080 8088 	bcs.w	804057c <__udivmoddi4+0x2bc>
 804046c:	4288      	cmp	r0, r1
 804046e:	f240 8085 	bls.w	804057c <__udivmoddi4+0x2bc>
 8040472:	f1a8 0802 	sub.w	r8, r8, #2
 8040476:	4461      	add	r1, ip
 8040478:	1a09      	subs	r1, r1, r0
 804047a:	b2a4      	uxth	r4, r4
 804047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8040480:	fb09 1110 	mls	r1, r9, r0, r1
 8040484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040488:	fb00 fe0e 	mul.w	lr, r0, lr
 804048c:	458e      	cmp	lr, r1
 804048e:	d908      	bls.n	80404a2 <__udivmoddi4+0x1e2>
 8040490:	eb1c 0101 	adds.w	r1, ip, r1
 8040494:	f100 34ff 	add.w	r4, r0, #4294967295
 8040498:	d26c      	bcs.n	8040574 <__udivmoddi4+0x2b4>
 804049a:	458e      	cmp	lr, r1
 804049c:	d96a      	bls.n	8040574 <__udivmoddi4+0x2b4>
 804049e:	3802      	subs	r0, #2
 80404a0:	4461      	add	r1, ip
 80404a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80404a6:	fba0 9402 	umull	r9, r4, r0, r2
 80404aa:	eba1 010e 	sub.w	r1, r1, lr
 80404ae:	42a1      	cmp	r1, r4
 80404b0:	46c8      	mov	r8, r9
 80404b2:	46a6      	mov	lr, r4
 80404b4:	d356      	bcc.n	8040564 <__udivmoddi4+0x2a4>
 80404b6:	d053      	beq.n	8040560 <__udivmoddi4+0x2a0>
 80404b8:	b15d      	cbz	r5, 80404d2 <__udivmoddi4+0x212>
 80404ba:	ebb3 0208 	subs.w	r2, r3, r8
 80404be:	eb61 010e 	sbc.w	r1, r1, lr
 80404c2:	fa01 f707 	lsl.w	r7, r1, r7
 80404c6:	fa22 f306 	lsr.w	r3, r2, r6
 80404ca:	40f1      	lsrs	r1, r6
 80404cc:	431f      	orrs	r7, r3
 80404ce:	e9c5 7100 	strd	r7, r1, [r5]
 80404d2:	2600      	movs	r6, #0
 80404d4:	4631      	mov	r1, r6
 80404d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80404da:	f1c2 0320 	rsb	r3, r2, #32
 80404de:	40d8      	lsrs	r0, r3
 80404e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80404e4:	fa21 f303 	lsr.w	r3, r1, r3
 80404e8:	4091      	lsls	r1, r2
 80404ea:	4301      	orrs	r1, r0
 80404ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80404f0:	fa1f fe8c 	uxth.w	lr, ip
 80404f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80404f8:	fb07 3610 	mls	r6, r7, r0, r3
 80404fc:	0c0b      	lsrs	r3, r1, #16
 80404fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040502:	fb00 f60e 	mul.w	r6, r0, lr
 8040506:	429e      	cmp	r6, r3
 8040508:	fa04 f402 	lsl.w	r4, r4, r2
 804050c:	d908      	bls.n	8040520 <__udivmoddi4+0x260>
 804050e:	eb1c 0303 	adds.w	r3, ip, r3
 8040512:	f100 38ff 	add.w	r8, r0, #4294967295
 8040516:	d22f      	bcs.n	8040578 <__udivmoddi4+0x2b8>
 8040518:	429e      	cmp	r6, r3
 804051a:	d92d      	bls.n	8040578 <__udivmoddi4+0x2b8>
 804051c:	3802      	subs	r0, #2
 804051e:	4463      	add	r3, ip
 8040520:	1b9b      	subs	r3, r3, r6
 8040522:	b289      	uxth	r1, r1
 8040524:	fbb3 f6f7 	udiv	r6, r3, r7
 8040528:	fb07 3316 	mls	r3, r7, r6, r3
 804052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040530:	fb06 f30e 	mul.w	r3, r6, lr
 8040534:	428b      	cmp	r3, r1
 8040536:	d908      	bls.n	804054a <__udivmoddi4+0x28a>
 8040538:	eb1c 0101 	adds.w	r1, ip, r1
 804053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8040540:	d216      	bcs.n	8040570 <__udivmoddi4+0x2b0>
 8040542:	428b      	cmp	r3, r1
 8040544:	d914      	bls.n	8040570 <__udivmoddi4+0x2b0>
 8040546:	3e02      	subs	r6, #2
 8040548:	4461      	add	r1, ip
 804054a:	1ac9      	subs	r1, r1, r3
 804054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040550:	e738      	b.n	80403c4 <__udivmoddi4+0x104>
 8040552:	462e      	mov	r6, r5
 8040554:	4628      	mov	r0, r5
 8040556:	e705      	b.n	8040364 <__udivmoddi4+0xa4>
 8040558:	4606      	mov	r6, r0
 804055a:	e6e3      	b.n	8040324 <__udivmoddi4+0x64>
 804055c:	4618      	mov	r0, r3
 804055e:	e6f8      	b.n	8040352 <__udivmoddi4+0x92>
 8040560:	454b      	cmp	r3, r9
 8040562:	d2a9      	bcs.n	80404b8 <__udivmoddi4+0x1f8>
 8040564:	ebb9 0802 	subs.w	r8, r9, r2
 8040568:	eb64 0e0c 	sbc.w	lr, r4, ip
 804056c:	3801      	subs	r0, #1
 804056e:	e7a3      	b.n	80404b8 <__udivmoddi4+0x1f8>
 8040570:	4646      	mov	r6, r8
 8040572:	e7ea      	b.n	804054a <__udivmoddi4+0x28a>
 8040574:	4620      	mov	r0, r4
 8040576:	e794      	b.n	80404a2 <__udivmoddi4+0x1e2>
 8040578:	4640      	mov	r0, r8
 804057a:	e7d1      	b.n	8040520 <__udivmoddi4+0x260>
 804057c:	46d0      	mov	r8, sl
 804057e:	e77b      	b.n	8040478 <__udivmoddi4+0x1b8>
 8040580:	3b02      	subs	r3, #2
 8040582:	4461      	add	r1, ip
 8040584:	e732      	b.n	80403ec <__udivmoddi4+0x12c>
 8040586:	4630      	mov	r0, r6
 8040588:	e709      	b.n	804039e <__udivmoddi4+0xde>
 804058a:	4464      	add	r4, ip
 804058c:	3802      	subs	r0, #2
 804058e:	e742      	b.n	8040416 <__udivmoddi4+0x156>

08040590 <__aeabi_idiv0>:
 8040590:	4770      	bx	lr
 8040592:	bf00      	nop

08040594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040594:	b580      	push	{r7, lr}
 8040596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040598:	f002 ff80 	bl	804349c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 804059c:	f000 f8d6 	bl	804074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80405a0:	f000 fb70 	bl	8040c84 <MX_GPIO_Init>
  MX_CRC_Init();
 80405a4:	f000 f93e 	bl	8040824 <MX_CRC_Init>
  MX_DMA2D_Init();
 80405a8:	f000 f950 	bl	804084c <MX_DMA2D_Init>
  MX_FMC_Init();
 80405ac:	f000 fb1a 	bl	8040be4 <MX_FMC_Init>
  MX_I2C3_Init();
 80405b0:	f000 f97e 	bl	80408b0 <MX_I2C3_Init>
  MX_LTDC_Init();
 80405b4:	f000 f9bc 	bl	8040930 <MX_LTDC_Init>
  MX_SPI5_Init();
 80405b8:	f000 fa3a 	bl	8040a30 <MX_SPI5_Init>
  MX_TIM1_Init();
 80405bc:	f000 fa6e 	bl	8040a9c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80405c0:	f000 fae6 	bl	8040b90 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80405c4:	f00c fcc0 	bl	804cf48 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80405c8:	f000 fab8 	bl	8040b3c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */


  sprintf(buffch,"Starting Application (%d.%d)", BL_Version[0], BL_Version[1]);
 80405cc:	2300      	movs	r3, #0
 80405ce:	461a      	mov	r2, r3
 80405d0:	2301      	movs	r3, #1
 80405d2:	4951      	ldr	r1, [pc, #324]	; (8040718 <main+0x184>)
 80405d4:	4851      	ldr	r0, [pc, #324]	; (804071c <main+0x188>)
 80405d6:	f00d f985 	bl	804d8e4 <siprintf>
  printf("Starting Application (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80405da:	2300      	movs	r3, #0
 80405dc:	2201      	movs	r2, #1
 80405de:	4619      	mov	r1, r3
 80405e0:	484f      	ldr	r0, [pc, #316]	; (8040720 <main+0x18c>)
 80405e2:	f00d f8e1 	bl	804d7a8 <iprintf>


  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 80405e6:	f002 f8d3 	bl	8042790 <BSP_LCD_Init>

  /* Layer2 Init */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80405ea:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80405ee:	2001      	movs	r0, #1
 80405f0:	f002 f950 	bl	8042894 <BSP_LCD_LayerDefaultInit>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80405f4:	2001      	movs	r0, #1
 80405f6:	f002 f9b1 	bl	804295c <BSP_LCD_SelectLayer>
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80405fa:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80405fe:	f002 fa5b 	bl	8042ab8 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_BLACK);
 8040602:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8040606:	2001      	movs	r0, #1
 8040608:	f002 f9f6 	bl	80429f8 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 804060c:	2100      	movs	r1, #0
 804060e:	2001      	movs	r0, #1
 8040610:	f002 f9b4 	bl	804297c <BSP_LCD_SetLayerVisible>

  /* Layer1 Init */
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8040614:	4943      	ldr	r1, [pc, #268]	; (8040724 <main+0x190>)
 8040616:	2000      	movs	r0, #0
 8040618:	f002 f93c 	bl	8042894 <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 804061c:	2000      	movs	r0, #0
 804061e:	f002 f99d 	bl	804295c <BSP_LCD_SelectLayer>

  /* Enable The LCD */
  BSP_LCD_DisplayOn();
 8040622:	f002 fb73 	bl	8042d0c <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8040626:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 804062a:	f002 fa45 	bl	8042ab8 <BSP_LCD_Clear>


  /* Set Touchscreen Demo description */

  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 804062e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8040632:	f002 fa0d 	bl	8042a50 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8040636:	483c      	ldr	r0, [pc, #240]	; (8040728 <main+0x194>)
 8040638:	f002 f9f2 	bl	8042a20 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 804063c:	483b      	ldr	r0, [pc, #236]	; (804072c <main+0x198>)
 804063e:	f002 fa21 	bl	8042a84 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)buffch, CENTER_MODE);
 8040642:	2301      	movs	r3, #1
 8040644:	4a35      	ldr	r2, [pc, #212]	; (804071c <main+0x188>)
 8040646:	2100      	movs	r1, #0
 8040648:	2000      	movs	r0, #0
 804064a:	f002 faa1 	bl	8042b90 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 804064e:	f04f 30ff 	mov.w	r0, #4294967295
 8040652:	f002 f9e5 	bl	8042a20 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"MUST'V BEEN THE", CENTER_MODE);
 8040656:	f002 f911 	bl	804287c <BSP_LCD_GetYSize>
 804065a:	4603      	mov	r3, r0
 804065c:	085b      	lsrs	r3, r3, #1
 804065e:	b29b      	uxth	r3, r3
 8040660:	3b1b      	subs	r3, #27
 8040662:	b299      	uxth	r1, r3
 8040664:	2301      	movs	r3, #1
 8040666:	4a32      	ldr	r2, [pc, #200]	; (8040730 <main+0x19c>)
 8040668:	2000      	movs	r0, #0
 804066a:	f002 fa91 	bl	8042b90 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"DEADLY", CENTER_MODE);
 804066e:	f002 f905 	bl	804287c <BSP_LCD_GetYSize>
 8040672:	4603      	mov	r3, r0
 8040674:	085b      	lsrs	r3, r3, #1
 8040676:	b29b      	uxth	r3, r3
 8040678:	3b0c      	subs	r3, #12
 804067a:	b299      	uxth	r1, r3
 804067c:	2301      	movs	r3, #1
 804067e:	4a2d      	ldr	r2, [pc, #180]	; (8040734 <main+0x1a0>)
 8040680:	2000      	movs	r0, #0
 8040682:	f002 fa85 	bl	8042b90 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"KISS", CENTER_MODE);
 8040686:	f002 f8f9 	bl	804287c <BSP_LCD_GetYSize>
 804068a:	4603      	mov	r3, r0
 804068c:	085b      	lsrs	r3, r3, #1
 804068e:	b29b      	uxth	r3, r3
 8040690:	3303      	adds	r3, #3
 8040692:	b299      	uxth	r1, r3
 8040694:	2301      	movs	r3, #1
 8040696:	4a28      	ldr	r2, [pc, #160]	; (8040738 <main+0x1a4>)
 8040698:	2000      	movs	r0, #0
 804069a:	f002 fa79 	bl	8042b90 <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 804069e:	f00c fc79 	bl	804cf94 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80406a2:	2201      	movs	r2, #1
 80406a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406a8:	4824      	ldr	r0, [pc, #144]	; (804073c <main+0x1a8>)
 80406aa:	f004 fb73 	bl	8044d94 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80406ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80406b2:	f002 ff35 	bl	8043520 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80406b6:	2200      	movs	r2, #0
 80406b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406bc:	481f      	ldr	r0, [pc, #124]	; (804073c <main+0x1a8>)
 80406be:	f004 fb69 	bl	8044d94 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80406c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80406c6:	f002 ff2b 	bl	8043520 <HAL_Delay>
    if (ota_update_request){
 80406ca:	4b1d      	ldr	r3, [pc, #116]	; (8040740 <main+0x1ac>)
 80406cc:	781b      	ldrb	r3, [r3, #0]
 80406ce:	2b00      	cmp	r3, #0
 80406d0:	d0e5      	beq.n	804069e <main+0x10a>
    	printf("OTA Update Requested...\r\n");
 80406d2:	481c      	ldr	r0, [pc, #112]	; (8040744 <main+0x1b0>)
 80406d4:	f00d f8ee 	bl	804d8b4 <puts>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80406d8:	2201      	movs	r2, #1
 80406da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406de:	4817      	ldr	r0, [pc, #92]	; (804073c <main+0x1a8>)
 80406e0:	f004 fb58 	bl	8044d94 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80406e4:	2201      	movs	r2, #1
 80406e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80406ea:	4814      	ldr	r0, [pc, #80]	; (804073c <main+0x1a8>)
 80406ec:	f004 fb52 	bl	8044d94 <HAL_GPIO_WritePin>
    	go_to_ota_app(&huart5);
 80406f0:	4815      	ldr	r0, [pc, #84]	; (8040748 <main+0x1b4>)
 80406f2:	f000 fc15 	bl	8040f20 <go_to_ota_app>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80406f6:	2200      	movs	r2, #0
 80406f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406fc:	480f      	ldr	r0, [pc, #60]	; (804073c <main+0x1a8>)
 80406fe:	f004 fb49 	bl	8044d94 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8040702:	2200      	movs	r2, #0
 8040704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8040708:	480c      	ldr	r0, [pc, #48]	; (804073c <main+0x1a8>)
 804070a:	f004 fb43 	bl	8044d94 <HAL_GPIO_WritePin>
    	ota_update_request = false;
 804070e:	4b0c      	ldr	r3, [pc, #48]	; (8040740 <main+0x1ac>)
 8040710:	2200      	movs	r2, #0
 8040712:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8040714:	e7c3      	b.n	804069e <main+0x10a>
 8040716:	bf00      	nop
 8040718:	0804e9c0 	.word	0x0804e9c0
 804071c:	2000039c 	.word	0x2000039c
 8040720:	0804e9e0 	.word	0x0804e9e0
 8040724:	d0130000 	.word	0xd0130000
 8040728:	ffff0000 	.word	0xffff0000
 804072c:	20000048 	.word	0x20000048
 8040730:	0804ea00 	.word	0x0804ea00
 8040734:	0804ea10 	.word	0x0804ea10
 8040738:	0804ea18 	.word	0x0804ea18
 804073c:	40021800 	.word	0x40021800
 8040740:	20000400 	.word	0x20000400
 8040744:	0804ea20 	.word	0x0804ea20
 8040748:	200002e0 	.word	0x200002e0

0804074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 804074c:	b580      	push	{r7, lr}
 804074e:	b094      	sub	sp, #80	; 0x50
 8040750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040752:	f107 0320 	add.w	r3, r7, #32
 8040756:	2230      	movs	r2, #48	; 0x30
 8040758:	2100      	movs	r1, #0
 804075a:	4618      	mov	r0, r3
 804075c:	f00c ff3c 	bl	804d5d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040760:	f107 030c 	add.w	r3, r7, #12
 8040764:	2200      	movs	r2, #0
 8040766:	601a      	str	r2, [r3, #0]
 8040768:	605a      	str	r2, [r3, #4]
 804076a:	609a      	str	r2, [r3, #8]
 804076c:	60da      	str	r2, [r3, #12]
 804076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8040770:	2300      	movs	r3, #0
 8040772:	60bb      	str	r3, [r7, #8]
 8040774:	4b29      	ldr	r3, [pc, #164]	; (804081c <SystemClock_Config+0xd0>)
 8040776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040778:	4a28      	ldr	r2, [pc, #160]	; (804081c <SystemClock_Config+0xd0>)
 804077a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804077e:	6413      	str	r3, [r2, #64]	; 0x40
 8040780:	4b26      	ldr	r3, [pc, #152]	; (804081c <SystemClock_Config+0xd0>)
 8040782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040788:	60bb      	str	r3, [r7, #8]
 804078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 804078c:	2300      	movs	r3, #0
 804078e:	607b      	str	r3, [r7, #4]
 8040790:	4b23      	ldr	r3, [pc, #140]	; (8040820 <SystemClock_Config+0xd4>)
 8040792:	681b      	ldr	r3, [r3, #0]
 8040794:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8040798:	4a21      	ldr	r2, [pc, #132]	; (8040820 <SystemClock_Config+0xd4>)
 804079a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804079e:	6013      	str	r3, [r2, #0]
 80407a0:	4b1f      	ldr	r3, [pc, #124]	; (8040820 <SystemClock_Config+0xd4>)
 80407a2:	681b      	ldr	r3, [r3, #0]
 80407a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80407a8:	607b      	str	r3, [r7, #4]
 80407aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80407ac:	2301      	movs	r3, #1
 80407ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80407b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80407b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80407b6:	2302      	movs	r3, #2
 80407b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80407ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80407be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80407c0:	2310      	movs	r3, #16
 80407c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80407c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80407c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80407ca:	2302      	movs	r3, #2
 80407cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80407ce:	2307      	movs	r3, #7
 80407d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80407d2:	f107 0320 	add.w	r3, r7, #32
 80407d6:	4618      	mov	r0, r3
 80407d8:	f006 fce8 	bl	80471ac <HAL_RCC_OscConfig>
 80407dc:	4603      	mov	r3, r0
 80407de:	2b00      	cmp	r3, #0
 80407e0:	d001      	beq.n	80407e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80407e2:	f000 fb97 	bl	8040f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80407e6:	230f      	movs	r3, #15
 80407e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80407ea:	2302      	movs	r3, #2
 80407ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80407ee:	2300      	movs	r3, #0
 80407f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80407f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80407f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80407f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80407fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80407fe:	f107 030c 	add.w	r3, r7, #12
 8040802:	2102      	movs	r1, #2
 8040804:	4618      	mov	r0, r3
 8040806:	f006 ff49 	bl	804769c <HAL_RCC_ClockConfig>
 804080a:	4603      	mov	r3, r0
 804080c:	2b00      	cmp	r3, #0
 804080e:	d001      	beq.n	8040814 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8040810:	f000 fb80 	bl	8040f14 <Error_Handler>
  }
}
 8040814:	bf00      	nop
 8040816:	3750      	adds	r7, #80	; 0x50
 8040818:	46bd      	mov	sp, r7
 804081a:	bd80      	pop	{r7, pc}
 804081c:	40023800 	.word	0x40023800
 8040820:	40007000 	.word	0x40007000

08040824 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8040824:	b580      	push	{r7, lr}
 8040826:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8040828:	4b06      	ldr	r3, [pc, #24]	; (8040844 <MX_CRC_Init+0x20>)
 804082a:	4a07      	ldr	r2, [pc, #28]	; (8040848 <MX_CRC_Init+0x24>)
 804082c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 804082e:	4805      	ldr	r0, [pc, #20]	; (8040844 <MX_CRC_Init+0x20>)
 8040830:	f002 ff7c 	bl	804372c <HAL_CRC_Init>
 8040834:	4603      	mov	r3, r0
 8040836:	2b00      	cmp	r3, #0
 8040838:	d001      	beq.n	804083e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 804083a:	f000 fb6b 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 804083e:	bf00      	nop
 8040840:	bd80      	pop	{r7, pc}
 8040842:	bf00      	nop
 8040844:	200000fc 	.word	0x200000fc
 8040848:	40023000 	.word	0x40023000

0804084c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 804084c:	b580      	push	{r7, lr}
 804084e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8040850:	4b15      	ldr	r3, [pc, #84]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 8040852:	4a16      	ldr	r2, [pc, #88]	; (80408ac <MX_DMA2D_Init+0x60>)
 8040854:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8040856:	4b14      	ldr	r3, [pc, #80]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 8040858:	2200      	movs	r2, #0
 804085a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 804085c:	4b12      	ldr	r3, [pc, #72]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 804085e:	2200      	movs	r2, #0
 8040860:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8040862:	4b11      	ldr	r3, [pc, #68]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 8040864:	2200      	movs	r2, #0
 8040866:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8040868:	4b0f      	ldr	r3, [pc, #60]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 804086a:	2200      	movs	r2, #0
 804086c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 804086e:	4b0e      	ldr	r3, [pc, #56]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 8040870:	2200      	movs	r2, #0
 8040872:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8040874:	4b0c      	ldr	r3, [pc, #48]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 8040876:	2200      	movs	r2, #0
 8040878:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 804087a:	4b0b      	ldr	r3, [pc, #44]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 804087c:	2200      	movs	r2, #0
 804087e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8040880:	4809      	ldr	r0, [pc, #36]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 8040882:	f003 f92d 	bl	8043ae0 <HAL_DMA2D_Init>
 8040886:	4603      	mov	r3, r0
 8040888:	2b00      	cmp	r3, #0
 804088a:	d001      	beq.n	8040890 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 804088c:	f000 fb42 	bl	8040f14 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8040890:	2101      	movs	r1, #1
 8040892:	4805      	ldr	r0, [pc, #20]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 8040894:	f003 fb92 	bl	8043fbc <HAL_DMA2D_ConfigLayer>
 8040898:	4603      	mov	r3, r0
 804089a:	2b00      	cmp	r3, #0
 804089c:	d001      	beq.n	80408a2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 804089e:	f000 fb39 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80408a2:	bf00      	nop
 80408a4:	bd80      	pop	{r7, pc}
 80408a6:	bf00      	nop
 80408a8:	20000104 	.word	0x20000104
 80408ac:	4002b000 	.word	0x4002b000

080408b0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80408b0:	b580      	push	{r7, lr}
 80408b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80408b4:	4b1b      	ldr	r3, [pc, #108]	; (8040924 <MX_I2C3_Init+0x74>)
 80408b6:	4a1c      	ldr	r2, [pc, #112]	; (8040928 <MX_I2C3_Init+0x78>)
 80408b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80408ba:	4b1a      	ldr	r3, [pc, #104]	; (8040924 <MX_I2C3_Init+0x74>)
 80408bc:	4a1b      	ldr	r2, [pc, #108]	; (804092c <MX_I2C3_Init+0x7c>)
 80408be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80408c0:	4b18      	ldr	r3, [pc, #96]	; (8040924 <MX_I2C3_Init+0x74>)
 80408c2:	2200      	movs	r2, #0
 80408c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80408c6:	4b17      	ldr	r3, [pc, #92]	; (8040924 <MX_I2C3_Init+0x74>)
 80408c8:	2200      	movs	r2, #0
 80408ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80408cc:	4b15      	ldr	r3, [pc, #84]	; (8040924 <MX_I2C3_Init+0x74>)
 80408ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80408d2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80408d4:	4b13      	ldr	r3, [pc, #76]	; (8040924 <MX_I2C3_Init+0x74>)
 80408d6:	2200      	movs	r2, #0
 80408d8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80408da:	4b12      	ldr	r3, [pc, #72]	; (8040924 <MX_I2C3_Init+0x74>)
 80408dc:	2200      	movs	r2, #0
 80408de:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80408e0:	4b10      	ldr	r3, [pc, #64]	; (8040924 <MX_I2C3_Init+0x74>)
 80408e2:	2200      	movs	r2, #0
 80408e4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80408e6:	4b0f      	ldr	r3, [pc, #60]	; (8040924 <MX_I2C3_Init+0x74>)
 80408e8:	2200      	movs	r2, #0
 80408ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80408ec:	480d      	ldr	r0, [pc, #52]	; (8040924 <MX_I2C3_Init+0x74>)
 80408ee:	f005 fe8d 	bl	804660c <HAL_I2C_Init>
 80408f2:	4603      	mov	r3, r0
 80408f4:	2b00      	cmp	r3, #0
 80408f6:	d001      	beq.n	80408fc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80408f8:	f000 fb0c 	bl	8040f14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80408fc:	2100      	movs	r1, #0
 80408fe:	4809      	ldr	r0, [pc, #36]	; (8040924 <MX_I2C3_Init+0x74>)
 8040900:	f005 ffc8 	bl	8046894 <HAL_I2CEx_ConfigAnalogFilter>
 8040904:	4603      	mov	r3, r0
 8040906:	2b00      	cmp	r3, #0
 8040908:	d001      	beq.n	804090e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 804090a:	f000 fb03 	bl	8040f14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 804090e:	2100      	movs	r1, #0
 8040910:	4804      	ldr	r0, [pc, #16]	; (8040924 <MX_I2C3_Init+0x74>)
 8040912:	f005 fffb 	bl	804690c <HAL_I2CEx_ConfigDigitalFilter>
 8040916:	4603      	mov	r3, r0
 8040918:	2b00      	cmp	r3, #0
 804091a:	d001      	beq.n	8040920 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 804091c:	f000 fafa 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8040920:	bf00      	nop
 8040922:	bd80      	pop	{r7, pc}
 8040924:	20000144 	.word	0x20000144
 8040928:	40005c00 	.word	0x40005c00
 804092c:	000186a0 	.word	0x000186a0

08040930 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8040930:	b580      	push	{r7, lr}
 8040932:	b08e      	sub	sp, #56	; 0x38
 8040934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8040936:	1d3b      	adds	r3, r7, #4
 8040938:	2234      	movs	r2, #52	; 0x34
 804093a:	2100      	movs	r1, #0
 804093c:	4618      	mov	r0, r3
 804093e:	f00c fe4b 	bl	804d5d8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8040942:	4b39      	ldr	r3, [pc, #228]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040944:	4a39      	ldr	r2, [pc, #228]	; (8040a2c <MX_LTDC_Init+0xfc>)
 8040946:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8040948:	4b37      	ldr	r3, [pc, #220]	; (8040a28 <MX_LTDC_Init+0xf8>)
 804094a:	2200      	movs	r2, #0
 804094c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 804094e:	4b36      	ldr	r3, [pc, #216]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040950:	2200      	movs	r2, #0
 8040952:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8040954:	4b34      	ldr	r3, [pc, #208]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040956:	2200      	movs	r2, #0
 8040958:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 804095a:	4b33      	ldr	r3, [pc, #204]	; (8040a28 <MX_LTDC_Init+0xf8>)
 804095c:	2200      	movs	r2, #0
 804095e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8040960:	4b31      	ldr	r3, [pc, #196]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040962:	2209      	movs	r2, #9
 8040964:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8040966:	4b30      	ldr	r3, [pc, #192]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040968:	2201      	movs	r2, #1
 804096a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 804096c:	4b2e      	ldr	r3, [pc, #184]	; (8040a28 <MX_LTDC_Init+0xf8>)
 804096e:	221d      	movs	r2, #29
 8040970:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8040972:	4b2d      	ldr	r3, [pc, #180]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040974:	2203      	movs	r2, #3
 8040976:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8040978:	4b2b      	ldr	r3, [pc, #172]	; (8040a28 <MX_LTDC_Init+0xf8>)
 804097a:	f240 120d 	movw	r2, #269	; 0x10d
 804097e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8040980:	4b29      	ldr	r3, [pc, #164]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040982:	f240 1243 	movw	r2, #323	; 0x143
 8040986:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8040988:	4b27      	ldr	r3, [pc, #156]	; (8040a28 <MX_LTDC_Init+0xf8>)
 804098a:	f240 1217 	movw	r2, #279	; 0x117
 804098e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8040990:	4b25      	ldr	r3, [pc, #148]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040992:	f240 1247 	movw	r2, #327	; 0x147
 8040996:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8040998:	4b23      	ldr	r3, [pc, #140]	; (8040a28 <MX_LTDC_Init+0xf8>)
 804099a:	2200      	movs	r2, #0
 804099c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80409a0:	4b21      	ldr	r3, [pc, #132]	; (8040a28 <MX_LTDC_Init+0xf8>)
 80409a2:	2200      	movs	r2, #0
 80409a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80409a8:	4b1f      	ldr	r3, [pc, #124]	; (8040a28 <MX_LTDC_Init+0xf8>)
 80409aa:	2200      	movs	r2, #0
 80409ac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80409b0:	481d      	ldr	r0, [pc, #116]	; (8040a28 <MX_LTDC_Init+0xf8>)
 80409b2:	f005 ffeb 	bl	804698c <HAL_LTDC_Init>
 80409b6:	4603      	mov	r3, r0
 80409b8:	2b00      	cmp	r3, #0
 80409ba:	d001      	beq.n	80409c0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80409bc:	f000 faaa 	bl	8040f14 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80409c0:	2300      	movs	r3, #0
 80409c2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80409c4:	23f0      	movs	r3, #240	; 0xf0
 80409c6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80409c8:	2300      	movs	r3, #0
 80409ca:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80409cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80409d0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80409d2:	2302      	movs	r3, #2
 80409d4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80409d6:	23ff      	movs	r3, #255	; 0xff
 80409d8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80409da:	2300      	movs	r3, #0
 80409dc:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80409de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80409e2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80409e4:	2307      	movs	r3, #7
 80409e6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80409e8:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80409ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80409ee:	23f0      	movs	r3, #240	; 0xf0
 80409f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80409f2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80409f6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80409f8:	2300      	movs	r3, #0
 80409fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80409fe:	2300      	movs	r3, #0
 8040a00:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8040a04:	2300      	movs	r3, #0
 8040a06:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8040a0a:	1d3b      	adds	r3, r7, #4
 8040a0c:	2200      	movs	r2, #0
 8040a0e:	4619      	mov	r1, r3
 8040a10:	4805      	ldr	r0, [pc, #20]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040a12:	f006 f94d 	bl	8046cb0 <HAL_LTDC_ConfigLayer>
 8040a16:	4603      	mov	r3, r0
 8040a18:	2b00      	cmp	r3, #0
 8040a1a:	d001      	beq.n	8040a20 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8040a1c:	f000 fa7a 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8040a20:	bf00      	nop
 8040a22:	3738      	adds	r7, #56	; 0x38
 8040a24:	46bd      	mov	sp, r7
 8040a26:	bd80      	pop	{r7, pc}
 8040a28:	20000198 	.word	0x20000198
 8040a2c:	40016800 	.word	0x40016800

08040a30 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8040a30:	b580      	push	{r7, lr}
 8040a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8040a34:	4b17      	ldr	r3, [pc, #92]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a36:	4a18      	ldr	r2, [pc, #96]	; (8040a98 <MX_SPI5_Init+0x68>)
 8040a38:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8040a3a:	4b16      	ldr	r3, [pc, #88]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8040a40:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8040a42:	4b14      	ldr	r3, [pc, #80]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a44:	2200      	movs	r2, #0
 8040a46:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8040a48:	4b12      	ldr	r3, [pc, #72]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a4a:	2200      	movs	r2, #0
 8040a4c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8040a4e:	4b11      	ldr	r3, [pc, #68]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a50:	2200      	movs	r2, #0
 8040a52:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8040a54:	4b0f      	ldr	r3, [pc, #60]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a56:	2200      	movs	r2, #0
 8040a58:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8040a5a:	4b0e      	ldr	r3, [pc, #56]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8040a60:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8040a62:	4b0c      	ldr	r3, [pc, #48]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a64:	2218      	movs	r2, #24
 8040a66:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8040a68:	4b0a      	ldr	r3, [pc, #40]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a6a:	2200      	movs	r2, #0
 8040a6c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8040a6e:	4b09      	ldr	r3, [pc, #36]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a70:	2200      	movs	r2, #0
 8040a72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8040a74:	4b07      	ldr	r3, [pc, #28]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a76:	2200      	movs	r2, #0
 8040a78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8040a7a:	4b06      	ldr	r3, [pc, #24]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a7c:	220a      	movs	r2, #10
 8040a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8040a80:	4804      	ldr	r0, [pc, #16]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a82:	f007 faae 	bl	8047fe2 <HAL_SPI_Init>
 8040a86:	4603      	mov	r3, r0
 8040a88:	2b00      	cmp	r3, #0
 8040a8a:	d001      	beq.n	8040a90 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8040a8c:	f000 fa42 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8040a90:	bf00      	nop
 8040a92:	bd80      	pop	{r7, pc}
 8040a94:	20000240 	.word	0x20000240
 8040a98:	40015000 	.word	0x40015000

08040a9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8040a9c:	b580      	push	{r7, lr}
 8040a9e:	b086      	sub	sp, #24
 8040aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8040aa2:	f107 0308 	add.w	r3, r7, #8
 8040aa6:	2200      	movs	r2, #0
 8040aa8:	601a      	str	r2, [r3, #0]
 8040aaa:	605a      	str	r2, [r3, #4]
 8040aac:	609a      	str	r2, [r3, #8]
 8040aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8040ab0:	463b      	mov	r3, r7
 8040ab2:	2200      	movs	r2, #0
 8040ab4:	601a      	str	r2, [r3, #0]
 8040ab6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8040ab8:	4b1e      	ldr	r3, [pc, #120]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040aba:	4a1f      	ldr	r2, [pc, #124]	; (8040b38 <MX_TIM1_Init+0x9c>)
 8040abc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8040abe:	4b1d      	ldr	r3, [pc, #116]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040ac0:	2200      	movs	r2, #0
 8040ac2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8040ac4:	4b1b      	ldr	r3, [pc, #108]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040ac6:	2200      	movs	r2, #0
 8040ac8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8040aca:	4b1a      	ldr	r3, [pc, #104]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8040ad0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8040ad2:	4b18      	ldr	r3, [pc, #96]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040ad4:	2200      	movs	r2, #0
 8040ad6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8040ad8:	4b16      	ldr	r3, [pc, #88]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040ada:	2200      	movs	r2, #0
 8040adc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8040ade:	4b15      	ldr	r3, [pc, #84]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040ae0:	2200      	movs	r2, #0
 8040ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8040ae4:	4813      	ldr	r0, [pc, #76]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040ae6:	f008 f85b 	bl	8048ba0 <HAL_TIM_Base_Init>
 8040aea:	4603      	mov	r3, r0
 8040aec:	2b00      	cmp	r3, #0
 8040aee:	d001      	beq.n	8040af4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8040af0:	f000 fa10 	bl	8040f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8040af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040af8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8040afa:	f107 0308 	add.w	r3, r7, #8
 8040afe:	4619      	mov	r1, r3
 8040b00:	480c      	ldr	r0, [pc, #48]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040b02:	f008 fa15 	bl	8048f30 <HAL_TIM_ConfigClockSource>
 8040b06:	4603      	mov	r3, r0
 8040b08:	2b00      	cmp	r3, #0
 8040b0a:	d001      	beq.n	8040b10 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8040b0c:	f000 fa02 	bl	8040f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8040b10:	2300      	movs	r3, #0
 8040b12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8040b14:	2300      	movs	r3, #0
 8040b16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8040b18:	463b      	mov	r3, r7
 8040b1a:	4619      	mov	r1, r3
 8040b1c:	4805      	ldr	r0, [pc, #20]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040b1e:	f008 fc31 	bl	8049384 <HAL_TIMEx_MasterConfigSynchronization>
 8040b22:	4603      	mov	r3, r0
 8040b24:	2b00      	cmp	r3, #0
 8040b26:	d001      	beq.n	8040b2c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8040b28:	f000 f9f4 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8040b2c:	bf00      	nop
 8040b2e:	3718      	adds	r7, #24
 8040b30:	46bd      	mov	sp, r7
 8040b32:	bd80      	pop	{r7, pc}
 8040b34:	20000298 	.word	0x20000298
 8040b38:	40010000 	.word	0x40010000

08040b3c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8040b3c:	b580      	push	{r7, lr}
 8040b3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8040b40:	4b11      	ldr	r3, [pc, #68]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b42:	4a12      	ldr	r2, [pc, #72]	; (8040b8c <MX_UART5_Init+0x50>)
 8040b44:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8040b46:	4b10      	ldr	r3, [pc, #64]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040b4c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8040b4e:	4b0e      	ldr	r3, [pc, #56]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b50:	2200      	movs	r2, #0
 8040b52:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8040b54:	4b0c      	ldr	r3, [pc, #48]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b56:	2200      	movs	r2, #0
 8040b58:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8040b5a:	4b0b      	ldr	r3, [pc, #44]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b5c:	2200      	movs	r2, #0
 8040b5e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8040b60:	4b09      	ldr	r3, [pc, #36]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b62:	220c      	movs	r2, #12
 8040b64:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040b66:	4b08      	ldr	r3, [pc, #32]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b68:	2200      	movs	r2, #0
 8040b6a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8040b6c:	4b06      	ldr	r3, [pc, #24]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b6e:	2200      	movs	r2, #0
 8040b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8040b72:	4805      	ldr	r0, [pc, #20]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b74:	f008 fc96 	bl	80494a4 <HAL_UART_Init>
 8040b78:	4603      	mov	r3, r0
 8040b7a:	2b00      	cmp	r3, #0
 8040b7c:	d001      	beq.n	8040b82 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8040b7e:	f000 f9c9 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8040b82:	bf00      	nop
 8040b84:	bd80      	pop	{r7, pc}
 8040b86:	bf00      	nop
 8040b88:	200002e0 	.word	0x200002e0
 8040b8c:	40005000 	.word	0x40005000

08040b90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040b90:	b580      	push	{r7, lr}
 8040b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040b94:	4b11      	ldr	r3, [pc, #68]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040b96:	4a12      	ldr	r2, [pc, #72]	; (8040be0 <MX_USART1_UART_Init+0x50>)
 8040b98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8040b9a:	4b10      	ldr	r3, [pc, #64]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040ba0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040ba2:	4b0e      	ldr	r3, [pc, #56]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040ba4:	2200      	movs	r2, #0
 8040ba6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040ba8:	4b0c      	ldr	r3, [pc, #48]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040baa:	2200      	movs	r2, #0
 8040bac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040bae:	4b0b      	ldr	r3, [pc, #44]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040bb0:	2200      	movs	r2, #0
 8040bb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040bb4:	4b09      	ldr	r3, [pc, #36]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040bb6:	220c      	movs	r2, #12
 8040bb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040bba:	4b08      	ldr	r3, [pc, #32]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040bbc:	2200      	movs	r2, #0
 8040bbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040bc0:	4b06      	ldr	r3, [pc, #24]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040bc2:	2200      	movs	r2, #0
 8040bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040bc6:	4805      	ldr	r0, [pc, #20]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040bc8:	f008 fc6c 	bl	80494a4 <HAL_UART_Init>
 8040bcc:	4603      	mov	r3, r0
 8040bce:	2b00      	cmp	r3, #0
 8040bd0:	d001      	beq.n	8040bd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8040bd2:	f000 f99f 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040bd6:	bf00      	nop
 8040bd8:	bd80      	pop	{r7, pc}
 8040bda:	bf00      	nop
 8040bdc:	20000324 	.word	0x20000324
 8040be0:	40011000 	.word	0x40011000

08040be4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8040be4:	b580      	push	{r7, lr}
 8040be6:	b088      	sub	sp, #32
 8040be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8040bea:	1d3b      	adds	r3, r7, #4
 8040bec:	2200      	movs	r2, #0
 8040bee:	601a      	str	r2, [r3, #0]
 8040bf0:	605a      	str	r2, [r3, #4]
 8040bf2:	609a      	str	r2, [r3, #8]
 8040bf4:	60da      	str	r2, [r3, #12]
 8040bf6:	611a      	str	r2, [r3, #16]
 8040bf8:	615a      	str	r2, [r3, #20]
 8040bfa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8040bfc:	4b1f      	ldr	r3, [pc, #124]	; (8040c7c <MX_FMC_Init+0x98>)
 8040bfe:	4a20      	ldr	r2, [pc, #128]	; (8040c80 <MX_FMC_Init+0x9c>)
 8040c00:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8040c02:	4b1e      	ldr	r3, [pc, #120]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c04:	2201      	movs	r2, #1
 8040c06:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8040c08:	4b1c      	ldr	r3, [pc, #112]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c0a:	2200      	movs	r2, #0
 8040c0c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8040c0e:	4b1b      	ldr	r3, [pc, #108]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c10:	2204      	movs	r2, #4
 8040c12:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8040c14:	4b19      	ldr	r3, [pc, #100]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c16:	2210      	movs	r2, #16
 8040c18:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8040c1a:	4b18      	ldr	r3, [pc, #96]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c1c:	2240      	movs	r2, #64	; 0x40
 8040c1e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8040c20:	4b16      	ldr	r3, [pc, #88]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c22:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8040c26:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8040c28:	4b14      	ldr	r3, [pc, #80]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c2a:	2200      	movs	r2, #0
 8040c2c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8040c2e:	4b13      	ldr	r3, [pc, #76]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8040c34:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8040c36:	4b11      	ldr	r3, [pc, #68]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c38:	2200      	movs	r2, #0
 8040c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8040c3c:	4b0f      	ldr	r3, [pc, #60]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8040c42:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8040c44:	2302      	movs	r3, #2
 8040c46:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8040c48:	2307      	movs	r3, #7
 8040c4a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8040c4c:	2304      	movs	r3, #4
 8040c4e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8040c50:	2307      	movs	r3, #7
 8040c52:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8040c54:	2303      	movs	r3, #3
 8040c56:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8040c58:	2302      	movs	r3, #2
 8040c5a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8040c5c:	2302      	movs	r3, #2
 8040c5e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8040c60:	1d3b      	adds	r3, r7, #4
 8040c62:	4619      	mov	r1, r3
 8040c64:	4805      	ldr	r0, [pc, #20]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c66:	f007 f92b 	bl	8047ec0 <HAL_SDRAM_Init>
 8040c6a:	4603      	mov	r3, r0
 8040c6c:	2b00      	cmp	r3, #0
 8040c6e:	d001      	beq.n	8040c74 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8040c70:	f000 f950 	bl	8040f14 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8040c74:	bf00      	nop
 8040c76:	3720      	adds	r7, #32
 8040c78:	46bd      	mov	sp, r7
 8040c7a:	bd80      	pop	{r7, pc}
 8040c7c:	20000368 	.word	0x20000368
 8040c80:	a0000140 	.word	0xa0000140

08040c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040c84:	b580      	push	{r7, lr}
 8040c86:	b08e      	sub	sp, #56	; 0x38
 8040c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040c8e:	2200      	movs	r2, #0
 8040c90:	601a      	str	r2, [r3, #0]
 8040c92:	605a      	str	r2, [r3, #4]
 8040c94:	609a      	str	r2, [r3, #8]
 8040c96:	60da      	str	r2, [r3, #12]
 8040c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040c9a:	2300      	movs	r3, #0
 8040c9c:	623b      	str	r3, [r7, #32]
 8040c9e:	4b85      	ldr	r3, [pc, #532]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ca2:	4a84      	ldr	r2, [pc, #528]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040ca4:	f043 0304 	orr.w	r3, r3, #4
 8040ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8040caa:	4b82      	ldr	r3, [pc, #520]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cae:	f003 0304 	and.w	r3, r3, #4
 8040cb2:	623b      	str	r3, [r7, #32]
 8040cb4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8040cb6:	2300      	movs	r3, #0
 8040cb8:	61fb      	str	r3, [r7, #28]
 8040cba:	4b7e      	ldr	r3, [pc, #504]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cbe:	4a7d      	ldr	r2, [pc, #500]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040cc0:	f043 0320 	orr.w	r3, r3, #32
 8040cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8040cc6:	4b7b      	ldr	r3, [pc, #492]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cca:	f003 0320 	and.w	r3, r3, #32
 8040cce:	61fb      	str	r3, [r7, #28]
 8040cd0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040cd2:	2300      	movs	r3, #0
 8040cd4:	61bb      	str	r3, [r7, #24]
 8040cd6:	4b77      	ldr	r3, [pc, #476]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cda:	4a76      	ldr	r2, [pc, #472]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8040ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8040ce2:	4b74      	ldr	r3, [pc, #464]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8040cea:	61bb      	str	r3, [r7, #24]
 8040cec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040cee:	2300      	movs	r3, #0
 8040cf0:	617b      	str	r3, [r7, #20]
 8040cf2:	4b70      	ldr	r3, [pc, #448]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cf6:	4a6f      	ldr	r2, [pc, #444]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040cf8:	f043 0301 	orr.w	r3, r3, #1
 8040cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8040cfe:	4b6d      	ldr	r3, [pc, #436]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d02:	f003 0301 	and.w	r3, r3, #1
 8040d06:	617b      	str	r3, [r7, #20]
 8040d08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040d0a:	2300      	movs	r3, #0
 8040d0c:	613b      	str	r3, [r7, #16]
 8040d0e:	4b69      	ldr	r3, [pc, #420]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d12:	4a68      	ldr	r2, [pc, #416]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d14:	f043 0302 	orr.w	r3, r3, #2
 8040d18:	6313      	str	r3, [r2, #48]	; 0x30
 8040d1a:	4b66      	ldr	r3, [pc, #408]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d1e:	f003 0302 	and.w	r3, r3, #2
 8040d22:	613b      	str	r3, [r7, #16]
 8040d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8040d26:	2300      	movs	r3, #0
 8040d28:	60fb      	str	r3, [r7, #12]
 8040d2a:	4b62      	ldr	r3, [pc, #392]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d2e:	4a61      	ldr	r2, [pc, #388]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8040d34:	6313      	str	r3, [r2, #48]	; 0x30
 8040d36:	4b5f      	ldr	r3, [pc, #380]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8040d3e:	60fb      	str	r3, [r7, #12]
 8040d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8040d42:	2300      	movs	r3, #0
 8040d44:	60bb      	str	r3, [r7, #8]
 8040d46:	4b5b      	ldr	r3, [pc, #364]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d4a:	4a5a      	ldr	r2, [pc, #360]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d4c:	f043 0310 	orr.w	r3, r3, #16
 8040d50:	6313      	str	r3, [r2, #48]	; 0x30
 8040d52:	4b58      	ldr	r3, [pc, #352]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d56:	f003 0310 	and.w	r3, r3, #16
 8040d5a:	60bb      	str	r3, [r7, #8]
 8040d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040d5e:	2300      	movs	r3, #0
 8040d60:	607b      	str	r3, [r7, #4]
 8040d62:	4b54      	ldr	r3, [pc, #336]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d66:	4a53      	ldr	r2, [pc, #332]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d68:	f043 0308 	orr.w	r3, r3, #8
 8040d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8040d6e:	4b51      	ldr	r3, [pc, #324]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d72:	f003 0308 	and.w	r3, r3, #8
 8040d76:	607b      	str	r3, [r7, #4]
 8040d78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8040d7a:	2200      	movs	r2, #0
 8040d7c:	2116      	movs	r1, #22
 8040d7e:	484e      	ldr	r0, [pc, #312]	; (8040eb8 <MX_GPIO_Init+0x234>)
 8040d80:	f004 f808 	bl	8044d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8040d84:	2200      	movs	r2, #0
 8040d86:	2180      	movs	r1, #128	; 0x80
 8040d88:	484c      	ldr	r0, [pc, #304]	; (8040ebc <MX_GPIO_Init+0x238>)
 8040d8a:	f004 f803 	bl	8044d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8040d8e:	2200      	movs	r2, #0
 8040d90:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8040d94:	484a      	ldr	r0, [pc, #296]	; (8040ec0 <MX_GPIO_Init+0x23c>)
 8040d96:	f003 fffd 	bl	8044d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8040d9a:	2200      	movs	r2, #0
 8040d9c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8040da0:	4848      	ldr	r0, [pc, #288]	; (8040ec4 <MX_GPIO_Init+0x240>)
 8040da2:	f003 fff7 	bl	8044d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8040da6:	2316      	movs	r3, #22
 8040da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040daa:	2301      	movs	r3, #1
 8040dac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040dae:	2300      	movs	r3, #0
 8040db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040db2:	2300      	movs	r3, #0
 8040db4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8040db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040dba:	4619      	mov	r1, r3
 8040dbc:	483e      	ldr	r0, [pc, #248]	; (8040eb8 <MX_GPIO_Init+0x234>)
 8040dbe:	f003 fd31 	bl	8044824 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8040dc2:	2301      	movs	r3, #1
 8040dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8040dc6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8040dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040dcc:	2300      	movs	r3, #0
 8040dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8040dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040dd4:	4619      	mov	r1, r3
 8040dd6:	4839      	ldr	r0, [pc, #228]	; (8040ebc <MX_GPIO_Init+0x238>)
 8040dd8:	f003 fd24 	bl	8044824 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8040ddc:	f248 0306 	movw	r3, #32774	; 0x8006
 8040de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8040de2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8040de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040de8:	2300      	movs	r3, #0
 8040dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040df0:	4619      	mov	r1, r3
 8040df2:	4832      	ldr	r0, [pc, #200]	; (8040ebc <MX_GPIO_Init+0x238>)
 8040df4:	f003 fd16 	bl	8044824 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8040df8:	2380      	movs	r3, #128	; 0x80
 8040dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040dfc:	2301      	movs	r3, #1
 8040dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e00:	2300      	movs	r3, #0
 8040e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040e04:	2300      	movs	r3, #0
 8040e06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8040e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e0c:	4619      	mov	r1, r3
 8040e0e:	482b      	ldr	r0, [pc, #172]	; (8040ebc <MX_GPIO_Init+0x238>)
 8040e10:	f003 fd08 	bl	8044824 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8040e14:	2320      	movs	r3, #32
 8040e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8040e18:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8040e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e1e:	2300      	movs	r3, #0
 8040e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8040e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e26:	4619      	mov	r1, r3
 8040e28:	4823      	ldr	r0, [pc, #140]	; (8040eb8 <MX_GPIO_Init+0x234>)
 8040e2a:	f003 fcfb 	bl	8044824 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8040e2e:	2304      	movs	r3, #4
 8040e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040e32:	2300      	movs	r3, #0
 8040e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e36:	2300      	movs	r3, #0
 8040e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8040e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e3e:	4619      	mov	r1, r3
 8040e40:	4821      	ldr	r0, [pc, #132]	; (8040ec8 <MX_GPIO_Init+0x244>)
 8040e42:	f003 fcef 	bl	8044824 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8040e46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8040e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040e4c:	2300      	movs	r3, #0
 8040e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e50:	2300      	movs	r3, #0
 8040e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8040e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e58:	4619      	mov	r1, r3
 8040e5a:	4819      	ldr	r0, [pc, #100]	; (8040ec0 <MX_GPIO_Init+0x23c>)
 8040e5c:	f003 fce2 	bl	8044824 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8040e60:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8040e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040e66:	2301      	movs	r3, #1
 8040e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e6a:	2300      	movs	r3, #0
 8040e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040e6e:	2300      	movs	r3, #0
 8040e70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e76:	4619      	mov	r1, r3
 8040e78:	4811      	ldr	r0, [pc, #68]	; (8040ec0 <MX_GPIO_Init+0x23c>)
 8040e7a:	f003 fcd3 	bl	8044824 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8040e7e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8040e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040e84:	2301      	movs	r3, #1
 8040e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e88:	2300      	movs	r3, #0
 8040e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040e8c:	2300      	movs	r3, #0
 8040e8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8040e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e94:	4619      	mov	r1, r3
 8040e96:	480b      	ldr	r0, [pc, #44]	; (8040ec4 <MX_GPIO_Init+0x240>)
 8040e98:	f003 fcc4 	bl	8044824 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8040e9c:	2200      	movs	r2, #0
 8040e9e:	2100      	movs	r1, #0
 8040ea0:	2006      	movs	r0, #6
 8040ea2:	f002 fc19 	bl	80436d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8040ea6:	2006      	movs	r0, #6
 8040ea8:	f002 fc32 	bl	8043710 <HAL_NVIC_EnableIRQ>

}
 8040eac:	bf00      	nop
 8040eae:	3738      	adds	r7, #56	; 0x38
 8040eb0:	46bd      	mov	sp, r7
 8040eb2:	bd80      	pop	{r7, pc}
 8040eb4:	40023800 	.word	0x40023800
 8040eb8:	40020800 	.word	0x40020800
 8040ebc:	40020000 	.word	0x40020000
 8040ec0:	40020c00 	.word	0x40020c00
 8040ec4:	40021800 	.word	0x40021800
 8040ec8:	40020400 	.word	0x40020400

08040ecc <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8040ecc:	b580      	push	{r7, lr}
 8040ece:	b082      	sub	sp, #8
 8040ed0:	af00      	add	r7, sp, #0
 8040ed2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8040ed4:	1d39      	adds	r1, r7, #4
 8040ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8040eda:	2201      	movs	r2, #1
 8040edc:	4803      	ldr	r0, [pc, #12]	; (8040eec <__io_putchar+0x20>)
 8040ede:	f008 fb2e 	bl	804953e <HAL_UART_Transmit>
	return ch;
 8040ee2:	687b      	ldr	r3, [r7, #4]
}
 8040ee4:	4618      	mov	r0, r3
 8040ee6:	3708      	adds	r7, #8
 8040ee8:	46bd      	mov	sp, r7
 8040eea:	bd80      	pop	{r7, pc}
 8040eec:	20000324 	.word	0x20000324

08040ef0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8040ef0:	b580      	push	{r7, lr}
 8040ef2:	b082      	sub	sp, #8
 8040ef4:	af00      	add	r7, sp, #0
 8040ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8040ef8:	687b      	ldr	r3, [r7, #4]
 8040efa:	681b      	ldr	r3, [r3, #0]
 8040efc:	4a04      	ldr	r2, [pc, #16]	; (8040f10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8040efe:	4293      	cmp	r3, r2
 8040f00:	d101      	bne.n	8040f06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8040f02:	f002 faed 	bl	80434e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8040f06:	bf00      	nop
 8040f08:	3708      	adds	r7, #8
 8040f0a:	46bd      	mov	sp, r7
 8040f0c:	bd80      	pop	{r7, pc}
 8040f0e:	bf00      	nop
 8040f10:	40001000 	.word	0x40001000

08040f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040f14:	b480      	push	{r7}
 8040f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040f18:	b672      	cpsid	i
}
 8040f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040f1c:	e7fe      	b.n	8040f1c <Error_Handler+0x8>
	...

08040f20 <go_to_ota_app>:
 * @brief run ota application
 * @param hurat uart handler receive ota
 * @retval None
 */
void go_to_ota_app(UART_HandleTypeDef *huart)
{
 8040f20:	b580      	push	{r7, lr}
 8040f22:	b082      	sub	sp, #8
 8040f24:	af00      	add	r7, sp, #0
 8040f26:	6078      	str	r0, [r7, #4]
  /*Start the Firmware or Application update */
    printf("Starting Firmware Download!!!\r\n");
 8040f28:	480e      	ldr	r0, [pc, #56]	; (8040f64 <go_to_ota_app+0x44>)
 8040f2a:	f00c fcc3 	bl	804d8b4 <puts>
    if( ota_download_and_flash(huart) != OTA_EX_OK )
 8040f2e:	6878      	ldr	r0, [r7, #4]
 8040f30:	f000 f820 	bl	8040f74 <ota_download_and_flash>
 8040f34:	4603      	mov	r3, r0
 8040f36:	2b00      	cmp	r3, #0
 8040f38:	d009      	beq.n	8040f4e <go_to_ota_app+0x2e>
    {
      /* Error. Don't process. */
      printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8040f3a:	480b      	ldr	r0, [pc, #44]	; (8040f68 <go_to_ota_app+0x48>)
 8040f3c:	f00c fcba 	bl	804d8b4 <puts>
      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8040f40:	2200      	movs	r2, #0
 8040f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8040f46:	4809      	ldr	r0, [pc, #36]	; (8040f6c <go_to_ota_app+0x4c>)
 8040f48:	f003 ff24 	bl	8044d94 <HAL_GPIO_WritePin>
      /* Reset to load the new application */
      printf("Firmware update is done!!! Rebooting...\r\n");
      HAL_Delay(10000);
//      HAL_NVIC_SystemReset();
    }
}
 8040f4c:	e006      	b.n	8040f5c <go_to_ota_app+0x3c>
      printf("Firmware update is done!!! Rebooting...\r\n");
 8040f4e:	4808      	ldr	r0, [pc, #32]	; (8040f70 <go_to_ota_app+0x50>)
 8040f50:	f00c fcb0 	bl	804d8b4 <puts>
      HAL_Delay(10000);
 8040f54:	f242 7010 	movw	r0, #10000	; 0x2710
 8040f58:	f002 fae2 	bl	8043520 <HAL_Delay>
}
 8040f5c:	bf00      	nop
 8040f5e:	3708      	adds	r7, #8
 8040f60:	46bd      	mov	sp, r7
 8040f62:	bd80      	pop	{r7, pc}
 8040f64:	0804ea3c 	.word	0x0804ea3c
 8040f68:	0804ea5c 	.word	0x0804ea5c
 8040f6c:	40021800 	.word	0x40021800
 8040f70:	0804ea7c 	.word	0x0804ea7c

08040f74 <ota_download_and_flash>:
  * @param huart uart handler
  * @retval ETX_OTA_EX_
  */

OTA_EX_ ota_download_and_flash(UART_HandleTypeDef *huart)
{
 8040f74:	b580      	push	{r7, lr}
 8040f76:	b084      	sub	sp, #16
 8040f78:	af00      	add	r7, sp, #0
 8040f7a:	6078      	str	r0, [r7, #4]
	OTA_EX_ ret  = OTA_EX_OK;
 8040f7c:	2300      	movs	r3, #0
 8040f7e:	73fb      	strb	r3, [r7, #15]
	uint16_t    len;

	printf("Waiting for the OTA data\r\n");
 8040f80:	4820      	ldr	r0, [pc, #128]	; (8041004 <ota_download_and_flash+0x90>)
 8040f82:	f00c fc97 	bl	804d8b4 <puts>

	/* Reset the variables */
	ota_fw_total_size		= 0u;
 8040f86:	4b20      	ldr	r3, [pc, #128]	; (8041008 <ota_download_and_flash+0x94>)
 8040f88:	2200      	movs	r2, #0
 8040f8a:	601a      	str	r2, [r3, #0]
	ota_fw_received_size	= 0u;
 8040f8c:	4b1f      	ldr	r3, [pc, #124]	; (804100c <ota_download_and_flash+0x98>)
 8040f8e:	2200      	movs	r2, #0
 8040f90:	601a      	str	r2, [r3, #0]
	ota_fw_crc				= 0u;
 8040f92:	4b1f      	ldr	r3, [pc, #124]	; (8041010 <ota_download_and_flash+0x9c>)
 8040f94:	2200      	movs	r2, #0
 8040f96:	601a      	str	r2, [r3, #0]
	ota_state				= OTA_STATE_START;
 8040f98:	4b1e      	ldr	r3, [pc, #120]	; (8041014 <ota_download_and_flash+0xa0>)
 8040f9a:	2201      	movs	r2, #1
 8040f9c:	701a      	strb	r2, [r3, #0]

	do
	{
		// clear the buffer
		memset(Rx_Buffer, 0, OTA_PACKET_MAX_SIZE);
 8040f9e:	f240 4209 	movw	r2, #1033	; 0x409
 8040fa2:	2100      	movs	r1, #0
 8040fa4:	481c      	ldr	r0, [pc, #112]	; (8041018 <ota_download_and_flash+0xa4>)
 8040fa6:	f00c fb17 	bl	804d5d8 <memset>
		len = ota_receive_chunk(huart, Rx_Buffer, OTA_PACKET_MAX_SIZE);
 8040faa:	f240 4209 	movw	r2, #1033	; 0x409
 8040fae:	491a      	ldr	r1, [pc, #104]	; (8041018 <ota_download_and_flash+0xa4>)
 8040fb0:	6878      	ldr	r0, [r7, #4]
 8040fb2:	f000 f835 	bl	8041020 <ota_receive_chunk>
 8040fb6:	4603      	mov	r3, r0
 8040fb8:	81bb      	strh	r3, [r7, #12]

		if (len != 0)
 8040fba:	89bb      	ldrh	r3, [r7, #12]
 8040fbc:	2b00      	cmp	r3, #0
 8040fbe:	d007      	beq.n	8040fd0 <ota_download_and_flash+0x5c>
		{
			ret = ota_process_data(Rx_Buffer, len);
 8040fc0:	89bb      	ldrh	r3, [r7, #12]
 8040fc2:	4619      	mov	r1, r3
 8040fc4:	4814      	ldr	r0, [pc, #80]	; (8041018 <ota_download_and_flash+0xa4>)
 8040fc6:	f000 f90d 	bl	80411e4 <ota_process_data>
 8040fca:	4603      	mov	r3, r0
 8040fcc:	73fb      	strb	r3, [r7, #15]
 8040fce:	e001      	b.n	8040fd4 <ota_download_and_flash+0x60>
		}
		else
		{
			// didn't received data or received more than expected. break
			ret = OTA_EX_ERR;
 8040fd0:	2301      	movs	r3, #1
 8040fd2:	73fb      	strb	r3, [r7, #15]
		}

		// Send ACK or NACK
		if( ret != OTA_EX_OK)
 8040fd4:	7bfb      	ldrb	r3, [r7, #15]
 8040fd6:	2b00      	cmp	r3, #0
 8040fd8:	d007      	beq.n	8040fea <ota_download_and_flash+0x76>
		{
			printf("Sending NACK\r\n");
 8040fda:	4810      	ldr	r0, [pc, #64]	; (804101c <ota_download_and_flash+0xa8>)
 8040fdc:	f00c fc6a 	bl	804d8b4 <puts>
			ota_send_resp(huart, OTA_NACK);
 8040fe0:	2101      	movs	r1, #1
 8040fe2:	6878      	ldr	r0, [r7, #4]
 8040fe4:	f000 fa82 	bl	80414ec <ota_send_resp>
			break;
 8040fe8:	e007      	b.n	8040ffa <ota_download_and_flash+0x86>
		}
		else
		{
			ota_send_resp(huart, OTA_ACK);
 8040fea:	2100      	movs	r1, #0
 8040fec:	6878      	ldr	r0, [r7, #4]
 8040fee:	f000 fa7d 	bl	80414ec <ota_send_resp>
		}


	}while( ota_state != OTA_STATE_IDLE);
 8040ff2:	4b08      	ldr	r3, [pc, #32]	; (8041014 <ota_download_and_flash+0xa0>)
 8040ff4:	781b      	ldrb	r3, [r3, #0]
 8040ff6:	2b00      	cmp	r3, #0
 8040ff8:	d1d1      	bne.n	8040f9e <ota_download_and_flash+0x2a>

	return ret;
 8040ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8040ffc:	4618      	mov	r0, r3
 8040ffe:	3710      	adds	r7, #16
 8041000:	46bd      	mov	sp, r7
 8041002:	bd80      	pop	{r7, pc}
 8041004:	0804eaa8 	.word	0x0804eaa8
 8041008:	20000404 	.word	0x20000404
 804100c:	2000040c 	.word	0x2000040c
 8041010:	20000408 	.word	0x20000408
 8041014:	20000401 	.word	0x20000401
 8041018:	20000410 	.word	0x20000410
 804101c:	0804eac4 	.word	0x0804eac4

08041020 <ota_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval OTA_EX_
  */
static uint16_t ota_receive_chunk(UART_HandleTypeDef *huart, uint8_t *buf, uint16_t max_len )
{
 8041020:	b580      	push	{r7, lr}
 8041022:	b08a      	sub	sp, #40	; 0x28
 8041024:	af00      	add	r7, sp, #0
 8041026:	60f8      	str	r0, [r7, #12]
 8041028:	60b9      	str	r1, [r7, #8]
 804102a:	4613      	mov	r3, r2
 804102c:	80fb      	strh	r3, [r7, #6]
	int16_t  ret;
	uint16_t index		  =	0u;
 804102e:	2300      	movs	r3, #0
 8041030:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t data_len;
	uint32_t cal_data_crc = 0u;
 8041032:	2300      	movs	r3, #0
 8041034:	61fb      	str	r3, [r7, #28]
	uint32_t rec_data_crc = 0u;
 8041036:	2300      	movs	r3, #0
 8041038:	61bb      	str	r3, [r7, #24]

	do
	{
		// Receive SOF byte(1 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 1, HAL_MAX_DELAY);
 804103a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 804103c:	68ba      	ldr	r2, [r7, #8]
 804103e:	18d1      	adds	r1, r2, r3
 8041040:	f04f 33ff 	mov.w	r3, #4294967295
 8041044:	2201      	movs	r2, #1
 8041046:	68f8      	ldr	r0, [r7, #12]
 8041048:	f008 fb0b 	bl	8049662 <HAL_UART_Receive>
 804104c:	4603      	mov	r3, r0
 804104e:	84fb      	strh	r3, [r7, #38]	; 0x26
		if( ret != HAL_OK)
 8041050:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8041054:	2b00      	cmp	r3, #0
 8041056:	f040 809c 	bne.w	8041192 <ota_receive_chunk+0x172>
		{
			break;
		}

		if (buf[index++] != OTA_SOF)
 804105a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 804105c:	1c5a      	adds	r2, r3, #1
 804105e:	84ba      	strh	r2, [r7, #36]	; 0x24
 8041060:	461a      	mov	r2, r3
 8041062:	68bb      	ldr	r3, [r7, #8]
 8041064:	4413      	add	r3, r2
 8041066:	781b      	ldrb	r3, [r3, #0]
 8041068:	2baa      	cmp	r3, #170	; 0xaa
 804106a:	f040 8094 	bne.w	8041196 <ota_receive_chunk+0x176>
			// Not received start of frame
			break;
		}

		// Received the packet type (1 byte)
		ret = HAL_UART_Receive(huart, &buf[index++], 1, HAL_MAX_DELAY);
 804106e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041070:	1c5a      	adds	r2, r3, #1
 8041072:	84ba      	strh	r2, [r7, #36]	; 0x24
 8041074:	461a      	mov	r2, r3
 8041076:	68bb      	ldr	r3, [r7, #8]
 8041078:	1899      	adds	r1, r3, r2
 804107a:	f04f 33ff 	mov.w	r3, #4294967295
 804107e:	2201      	movs	r2, #1
 8041080:	68f8      	ldr	r0, [r7, #12]
 8041082:	f008 faee 	bl	8049662 <HAL_UART_Receive>
 8041086:	4603      	mov	r3, r0
 8041088:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 804108a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 804108e:	2b00      	cmp	r3, #0
 8041090:	f040 8083 	bne.w	804119a <ota_receive_chunk+0x17a>
			// doesn't received anything
			break;
		}

		// Get the data length (2 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 2, HAL_MAX_DELAY);
 8041094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041096:	68ba      	ldr	r2, [r7, #8]
 8041098:	18d1      	adds	r1, r2, r3
 804109a:	f04f 33ff 	mov.w	r3, #4294967295
 804109e:	2202      	movs	r2, #2
 80410a0:	68f8      	ldr	r0, [r7, #12]
 80410a2:	f008 fade 	bl	8049662 <HAL_UART_Receive>
 80410a6:	4603      	mov	r3, r0
 80410a8:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 80410aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80410ae:	2b00      	cmp	r3, #0
 80410b0:	d175      	bne.n	804119e <ota_receive_chunk+0x17e>
		{
			// doesn't received anything
			break;
		}
		data_len = *(uint16_t *)&buf[index];
 80410b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80410b4:	68ba      	ldr	r2, [r7, #8]
 80410b6:	4413      	add	r3, r2
 80410b8:	881b      	ldrh	r3, [r3, #0]
 80410ba:	82fb      	strh	r3, [r7, #22]
		index += 2u;
 80410bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80410be:	3302      	adds	r3, #2
 80410c0:	84bb      	strh	r3, [r7, #36]	; 0x24

		for(uint16_t i = 0u; i < data_len; i++){
 80410c2:	2300      	movs	r3, #0
 80410c4:	847b      	strh	r3, [r7, #34]	; 0x22
 80410c6:	e014      	b.n	80410f2 <ota_receive_chunk+0xd2>
			ret = HAL_UART_Receive(huart, &buf[index++], 1, HAL_MAX_DELAY);
 80410c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80410ca:	1c5a      	adds	r2, r3, #1
 80410cc:	84ba      	strh	r2, [r7, #36]	; 0x24
 80410ce:	461a      	mov	r2, r3
 80410d0:	68bb      	ldr	r3, [r7, #8]
 80410d2:	1899      	adds	r1, r3, r2
 80410d4:	f04f 33ff 	mov.w	r3, #4294967295
 80410d8:	2201      	movs	r2, #1
 80410da:	68f8      	ldr	r0, [r7, #12]
 80410dc:	f008 fac1 	bl	8049662 <HAL_UART_Receive>
 80410e0:	4603      	mov	r3, r0
 80410e2:	84fb      	strh	r3, [r7, #38]	; 0x26
			if ( ret != HAL_OK)
 80410e4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80410e8:	2b00      	cmp	r3, #0
 80410ea:	d107      	bne.n	80410fc <ota_receive_chunk+0xdc>
		for(uint16_t i = 0u; i < data_len; i++){
 80410ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80410ee:	3301      	adds	r3, #1
 80410f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80410f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80410f4:	8afb      	ldrh	r3, [r7, #22]
 80410f6:	429a      	cmp	r2, r3
 80410f8:	d3e6      	bcc.n	80410c8 <ota_receive_chunk+0xa8>
 80410fa:	e000      	b.n	80410fe <ota_receive_chunk+0xde>
			{
				// doesn't received anything
				break;
 80410fc:	bf00      	nop
			}
		}

		if ( ret != HAL_OK)
 80410fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8041102:	2b00      	cmp	r3, #0
 8041104:	d14d      	bne.n	80411a2 <ota_receive_chunk+0x182>
			// doesn't received anything
			break;
		}

		// Get the CRC (4 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 4, HAL_MAX_DELAY);
 8041106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041108:	68ba      	ldr	r2, [r7, #8]
 804110a:	18d1      	adds	r1, r2, r3
 804110c:	f04f 33ff 	mov.w	r3, #4294967295
 8041110:	2204      	movs	r2, #4
 8041112:	68f8      	ldr	r0, [r7, #12]
 8041114:	f008 faa5 	bl	8049662 <HAL_UART_Receive>
 8041118:	4603      	mov	r3, r0
 804111a:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 804111c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8041120:	2b00      	cmp	r3, #0
 8041122:	d140      	bne.n	80411a6 <ota_receive_chunk+0x186>
		{
			// doesn't received anything
			break;
		}
		rec_data_crc = *(uint32_t *)&buf[index];
 8041124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041126:	68ba      	ldr	r2, [r7, #8]
 8041128:	4413      	add	r3, r2
 804112a:	681b      	ldr	r3, [r3, #0]
 804112c:	61bb      	str	r3, [r7, #24]
		index +=4u;
 804112e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041130:	3304      	adds	r3, #4
 8041132:	84bb      	strh	r3, [r7, #36]	; 0x24

		// Receive EOF byte (1 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 1, HAL_MAX_DELAY);
 8041134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041136:	68ba      	ldr	r2, [r7, #8]
 8041138:	18d1      	adds	r1, r2, r3
 804113a:	f04f 33ff 	mov.w	r3, #4294967295
 804113e:	2201      	movs	r2, #1
 8041140:	68f8      	ldr	r0, [r7, #12]
 8041142:	f008 fa8e 	bl	8049662 <HAL_UART_Receive>
 8041146:	4603      	mov	r3, r0
 8041148:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 804114a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 804114e:	2b00      	cmp	r3, #0
 8041150:	d12b      	bne.n	80411aa <ota_receive_chunk+0x18a>
		{
			// doesn't received anything
			break;
		}

		if(buf[index++] != OTA_EOF)
 8041152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041154:	1c5a      	adds	r2, r3, #1
 8041156:	84ba      	strh	r2, [r7, #36]	; 0x24
 8041158:	461a      	mov	r2, r3
 804115a:	68bb      	ldr	r3, [r7, #8]
 804115c:	4413      	add	r3, r2
 804115e:	781b      	ldrb	r3, [r3, #0]
 8041160:	2bbb      	cmp	r3, #187	; 0xbb
 8041162:	d002      	beq.n	804116a <ota_receive_chunk+0x14a>
		{
			// NOT received EOF
			ret = OTA_EX_ERR;
 8041164:	2301      	movs	r3, #1
 8041166:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8041168:	e020      	b.n	80411ac <ota_receive_chunk+0x18c>
		}

		//calculate the received data's CRC
		cal_data_crc = ota_calcCRC(&buf[OTA_DATA_STARTBYTES], data_len);
 804116a:	68bb      	ldr	r3, [r7, #8]
 804116c:	3304      	adds	r3, #4
 804116e:	8afa      	ldrh	r2, [r7, #22]
 8041170:	4611      	mov	r1, r2
 8041172:	4618      	mov	r0, r3
 8041174:	f000 f9e6 	bl	8041544 <ota_calcCRC>
 8041178:	61f8      	str	r0, [r7, #28]

		// Verify the CRC
		if( cal_data_crc != rec_data_crc )
 804117a:	69fa      	ldr	r2, [r7, #28]
 804117c:	69bb      	ldr	r3, [r7, #24]
 804117e:	429a      	cmp	r2, r3
 8041180:	d014      	beq.n	80411ac <ota_receive_chunk+0x18c>
		{
			printf("Chunk's CRC mismatch [Calc CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 8041182:	69ba      	ldr	r2, [r7, #24]
 8041184:	69f9      	ldr	r1, [r7, #28]
 8041186:	4815      	ldr	r0, [pc, #84]	; (80411dc <ota_receive_chunk+0x1bc>)
 8041188:	f00c fb0e 	bl	804d7a8 <iprintf>
			                                                   cal_data_crc, rec_data_crc );
			ret = OTA_EX_ERR;
 804118c:	2301      	movs	r3, #1
 804118e:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8041190:	e00c      	b.n	80411ac <ota_receive_chunk+0x18c>
			break;
 8041192:	bf00      	nop
 8041194:	e00a      	b.n	80411ac <ota_receive_chunk+0x18c>
			break;
 8041196:	bf00      	nop
 8041198:	e008      	b.n	80411ac <ota_receive_chunk+0x18c>
			break;
 804119a:	bf00      	nop
 804119c:	e006      	b.n	80411ac <ota_receive_chunk+0x18c>
			break;
 804119e:	bf00      	nop
 80411a0:	e004      	b.n	80411ac <ota_receive_chunk+0x18c>
			break;
 80411a2:	bf00      	nop
 80411a4:	e002      	b.n	80411ac <ota_receive_chunk+0x18c>
			break;
 80411a6:	bf00      	nop
 80411a8:	e000      	b.n	80411ac <ota_receive_chunk+0x18c>
			break;
 80411aa:	bf00      	nop
		}

	}while(false);

	if( ret != HAL_OK )
 80411ac:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80411b0:	2b00      	cmp	r3, #0
 80411b2:	d001      	beq.n	80411b8 <ota_receive_chunk+0x198>
	{
		//clear the index if error
		index = 0u;
 80411b4:	2300      	movs	r3, #0
 80411b6:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	if( index > max_len )
 80411b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80411ba:	88fb      	ldrh	r3, [r7, #6]
 80411bc:	429a      	cmp	r2, r3
 80411be:	d907      	bls.n	80411d0 <ota_receive_chunk+0x1b0>
	{
		printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 80411c0:	88fb      	ldrh	r3, [r7, #6]
 80411c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80411c4:	4619      	mov	r1, r3
 80411c6:	4806      	ldr	r0, [pc, #24]	; (80411e0 <ota_receive_chunk+0x1c0>)
 80411c8:	f00c faee 	bl	804d7a8 <iprintf>
															  	  max_len, index );
		index = 0u;
 80411cc:	2300      	movs	r3, #0
 80411ce:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	return index;
 80411d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
}
 80411d2:	4618      	mov	r0, r3
 80411d4:	3728      	adds	r7, #40	; 0x28
 80411d6:	46bd      	mov	sp, r7
 80411d8:	bd80      	pop	{r7, pc}
 80411da:	bf00      	nop
 80411dc:	0804ead4 	.word	0x0804ead4
 80411e0:	0804eb14 	.word	0x0804eb14

080411e4 <ota_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval OTA_EX_
  */
static OTA_EX_ ota_process_data( uint8_t *buf, uint16_t len )
{
 80411e4:	b580      	push	{r7, lr}
 80411e6:	b08a      	sub	sp, #40	; 0x28
 80411e8:	af00      	add	r7, sp, #0
 80411ea:	6078      	str	r0, [r7, #4]
 80411ec:	460b      	mov	r3, r1
 80411ee:	807b      	strh	r3, [r7, #2]
	OTA_EX_ ret = OTA_EX_ERR;
 80411f0:	2301      	movs	r3, #1
 80411f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	do
	{
		if( (buf== NULL) || (len == 0u))
 80411f6:	687b      	ldr	r3, [r7, #4]
 80411f8:	2b00      	cmp	r3, #0
 80411fa:	f000 80c7 	beq.w	804138c <ota_process_data+0x1a8>
 80411fe:	887b      	ldrh	r3, [r7, #2]
 8041200:	2b00      	cmp	r3, #0
 8041202:	f000 80c3 	beq.w	804138c <ota_process_data+0x1a8>
		{
			break;
		}

		//Check OTA Abort Command
		OTA_COMMAND_ *cmd = (OTA_COMMAND_ *)buf;
 8041206:	687b      	ldr	r3, [r7, #4]
 8041208:	623b      	str	r3, [r7, #32]
		if (cmd->packet_type == OTA_PACKET_TYPE_CMD){
 804120a:	6a3b      	ldr	r3, [r7, #32]
 804120c:	785b      	ldrb	r3, [r3, #1]
 804120e:	2b00      	cmp	r3, #0
 8041210:	d104      	bne.n	804121c <ota_process_data+0x38>
			if(cmd->cmd == OTA_CMD_ABORT){
 8041212:	6a3b      	ldr	r3, [r7, #32]
 8041214:	791b      	ldrb	r3, [r3, #4]
 8041216:	2b02      	cmp	r3, #2
 8041218:	f000 80ba 	beq.w	8041390 <ota_process_data+0x1ac>
				// received OTA Abort Command stop process
				break;
			}
		}

		switch (ota_state)
 804121c:	4b64      	ldr	r3, [pc, #400]	; (80413b0 <ota_process_data+0x1cc>)
 804121e:	781b      	ldrb	r3, [r3, #0]
 8041220:	2b04      	cmp	r3, #4
 8041222:	f200 80af 	bhi.w	8041384 <ota_process_data+0x1a0>
 8041226:	a201      	add	r2, pc, #4	; (adr r2, 804122c <ota_process_data+0x48>)
 8041228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804122c:	08041241 	.word	0x08041241
 8041230:	0804124f 	.word	0x0804124f
 8041234:	0804127b 	.word	0x0804127b
 8041238:	080412b7 	.word	0x080412b7
 804123c:	0804132f 	.word	0x0804132f
		{
			case OTA_STATE_IDLE:
			{
				printf("OTA_STATE_IDLE....\r\n");
 8041240:	485c      	ldr	r0, [pc, #368]	; (80413b4 <ota_process_data+0x1d0>)
 8041242:	f00c fb37 	bl	804d8b4 <puts>
				ret = OTA_EX_OK;
 8041246:	2300      	movs	r3, #0
 8041248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 804124c:	e0a9      	b.n	80413a2 <ota_process_data+0x1be>

			case OTA_STATE_START:
			{
				OTA_COMMAND_ *cmd = (OTA_COMMAND_*)buf;
 804124e:	687b      	ldr	r3, [r7, #4]
 8041250:	60bb      	str	r3, [r7, #8]
				if( cmd->packet_type == OTA_PACKET_TYPE_CMD )
 8041252:	68bb      	ldr	r3, [r7, #8]
 8041254:	785b      	ldrb	r3, [r3, #1]
 8041256:	2b00      	cmp	r3, #0
 8041258:	f040 809c 	bne.w	8041394 <ota_process_data+0x1b0>
				{
					if( cmd->cmd == OTA_CMD_START)
 804125c:	68bb      	ldr	r3, [r7, #8]
 804125e:	791b      	ldrb	r3, [r3, #4]
 8041260:	2b00      	cmp	r3, #0
 8041262:	f040 8097 	bne.w	8041394 <ota_process_data+0x1b0>
					{
						printf("Received OTA Start command\r\n");
 8041266:	4854      	ldr	r0, [pc, #336]	; (80413b8 <ota_process_data+0x1d4>)
 8041268:	f00c fb24 	bl	804d8b4 <puts>
						ota_state = OTA_STATE_HEADER;
 804126c:	4b50      	ldr	r3, [pc, #320]	; (80413b0 <ota_process_data+0x1cc>)
 804126e:	2202      	movs	r2, #2
 8041270:	701a      	strb	r2, [r3, #0]
						ret = OTA_EX_OK;
 8041272:	2300      	movs	r3, #0
 8041274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}
			}
			break;
 8041278:	e08c      	b.n	8041394 <ota_process_data+0x1b0>

			case OTA_STATE_HEADER:
			{
				OTA_HEADER_ *header = (OTA_HEADER_ *)buf;
 804127a:	687b      	ldr	r3, [r7, #4]
 804127c:	60fb      	str	r3, [r7, #12]

				if( header->packet_type == OTA_PACKET_TYPE_HEADER )
 804127e:	68fb      	ldr	r3, [r7, #12]
 8041280:	785b      	ldrb	r3, [r3, #1]
 8041282:	2b02      	cmp	r3, #2
 8041284:	f040 8088 	bne.w	8041398 <ota_process_data+0x1b4>
				{
					ota_fw_total_size = header->meta_data.package_size;
 8041288:	68fb      	ldr	r3, [r7, #12]
 804128a:	685b      	ldr	r3, [r3, #4]
 804128c:	4a4b      	ldr	r2, [pc, #300]	; (80413bc <ota_process_data+0x1d8>)
 804128e:	6013      	str	r3, [r2, #0]
					ota_fw_crc 		  = header->meta_data.package_crc;
 8041290:	68fb      	ldr	r3, [r7, #12]
 8041292:	689b      	ldr	r3, [r3, #8]
 8041294:	4a4a      	ldr	r2, [pc, #296]	; (80413c0 <ota_process_data+0x1dc>)
 8041296:	6013      	str	r3, [r2, #0]
					printf("Received OTA Header. FW size = %ld, FW crc = [0x%08lX]\r\n",
 8041298:	4b4a      	ldr	r3, [pc, #296]	; (80413c4 <ota_process_data+0x1e0>)
 804129a:	681b      	ldr	r3, [r3, #0]
 804129c:	4a48      	ldr	r2, [pc, #288]	; (80413c0 <ota_process_data+0x1dc>)
 804129e:	6812      	ldr	r2, [r2, #0]
 80412a0:	4619      	mov	r1, r3
 80412a2:	4849      	ldr	r0, [pc, #292]	; (80413c8 <ota_process_data+0x1e4>)
 80412a4:	f00c fa80 	bl	804d7a8 <iprintf>
													ota_fw_received_size, ota_fw_crc);

					ota_state = OTA_STATE_DATA;
 80412a8:	4b41      	ldr	r3, [pc, #260]	; (80413b0 <ota_process_data+0x1cc>)
 80412aa:	2203      	movs	r2, #3
 80412ac:	701a      	strb	r2, [r3, #0]
					ret = OTA_EX_OK;
 80412ae:	2300      	movs	r3, #0
 80412b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				}
			}
			break;
 80412b4:	e070      	b.n	8041398 <ota_process_data+0x1b4>

			case OTA_STATE_DATA:
			{
				OTA_DATA_	 		*data 	 = (OTA_DATA_ *)buf;
 80412b6:	687b      	ldr	r3, [r7, #4]
 80412b8:	617b      	str	r3, [r7, #20]
				uint16_t			data_len = data->data_len;
 80412ba:	697b      	ldr	r3, [r7, #20]
 80412bc:	789a      	ldrb	r2, [r3, #2]
 80412be:	78db      	ldrb	r3, [r3, #3]
 80412c0:	021b      	lsls	r3, r3, #8
 80412c2:	4313      	orrs	r3, r2
 80412c4:	827b      	strh	r3, [r7, #18]
				HAL_StatusTypeDef	ex		 = HAL_ERROR;
 80412c6:	2301      	movs	r3, #1
 80412c8:	747b      	strb	r3, [r7, #17]

				if( data->packet_type == OTA_PACKET_TYPE_DATA ){
 80412ca:	697b      	ldr	r3, [r7, #20]
 80412cc:	785b      	ldrb	r3, [r3, #1]
 80412ce:	2b01      	cmp	r3, #1
 80412d0:	d164      	bne.n	804139c <ota_process_data+0x1b8>

					bool is_first_block = false;
 80412d2:	2300      	movs	r3, #0
 80412d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

					if( ota_fw_received_size == 0){
 80412d8:	4b3a      	ldr	r3, [pc, #232]	; (80413c4 <ota_process_data+0x1e0>)
 80412da:	681b      	ldr	r3, [r3, #0]
 80412dc:	2b00      	cmp	r3, #0
 80412de:	d102      	bne.n	80412e6 <ota_process_data+0x102>
						// This is the first block
						is_first_block = true;
 80412e0:	2301      	movs	r3, #1
 80412e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						//TODO: CFG if needed
					}

					/* Write the chunk to the Flash */
					ex = write_data_to_slot(buf+4, data_len, is_first_block);
 80412e6:	687b      	ldr	r3, [r7, #4]
 80412e8:	3304      	adds	r3, #4
 80412ea:	8a79      	ldrh	r1, [r7, #18]
 80412ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80412f0:	4618      	mov	r0, r3
 80412f2:	f000 f877 	bl	80413e4 <write_data_to_slot>
 80412f6:	4603      	mov	r3, r0
 80412f8:	747b      	strb	r3, [r7, #17]
					if( ex == HAL_OK)
 80412fa:	7c7b      	ldrb	r3, [r7, #17]
 80412fc:	2b00      	cmp	r3, #0
 80412fe:	d14d      	bne.n	804139c <ota_process_data+0x1b8>
					{
						printf("[%ld/%ld]\r\n", ota_fw_received_size/OTA_DATA_MAX_SIZE,
 8041300:	4b30      	ldr	r3, [pc, #192]	; (80413c4 <ota_process_data+0x1e0>)
 8041302:	681b      	ldr	r3, [r3, #0]
 8041304:	0a99      	lsrs	r1, r3, #10
 8041306:	4b2d      	ldr	r3, [pc, #180]	; (80413bc <ota_process_data+0x1d8>)
 8041308:	681b      	ldr	r3, [r3, #0]
 804130a:	0a9b      	lsrs	r3, r3, #10
 804130c:	461a      	mov	r2, r3
 804130e:	482f      	ldr	r0, [pc, #188]	; (80413cc <ota_process_data+0x1e8>)
 8041310:	f00c fa4a 	bl	804d7a8 <iprintf>
												ota_fw_total_size/OTA_DATA_MAX_SIZE);

						if( ota_fw_received_size >= ota_fw_total_size)
 8041314:	4b2b      	ldr	r3, [pc, #172]	; (80413c4 <ota_process_data+0x1e0>)
 8041316:	681a      	ldr	r2, [r3, #0]
 8041318:	4b28      	ldr	r3, [pc, #160]	; (80413bc <ota_process_data+0x1d8>)
 804131a:	681b      	ldr	r3, [r3, #0]
 804131c:	429a      	cmp	r2, r3
 804131e:	d302      	bcc.n	8041326 <ota_process_data+0x142>
						{
							// receive all data, move to end
							ota_state = OTA_STATE_END;
 8041320:	4b23      	ldr	r3, [pc, #140]	; (80413b0 <ota_process_data+0x1cc>)
 8041322:	2204      	movs	r2, #4
 8041324:	701a      	strb	r2, [r3, #0]
						}
						ret = OTA_EX_OK;
 8041326:	2300      	movs	r3, #0
 8041328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}
			}
			break;
 804132c:	e036      	b.n	804139c <ota_process_data+0x1b8>

			case OTA_STATE_END:
			{
				OTA_COMMAND_ *cmd = (OTA_COMMAND_ *)buf;
 804132e:	687b      	ldr	r3, [r7, #4]
 8041330:	61fb      	str	r3, [r7, #28]

				if( cmd->packet_type == OTA_PACKET_TYPE_CMD )
 8041332:	69fb      	ldr	r3, [r7, #28]
 8041334:	785b      	ldrb	r3, [r3, #1]
 8041336:	2b00      	cmp	r3, #0
 8041338:	d132      	bne.n	80413a0 <ota_process_data+0x1bc>
				{
					if( cmd->cmd )
 804133a:	69fb      	ldr	r3, [r7, #28]
 804133c:	791b      	ldrb	r3, [r3, #4]
 804133e:	2b00      	cmp	r3, #0
 8041340:	d02e      	beq.n	80413a0 <ota_process_data+0x1bc>
					{
						printf("Received OTA END COMMAND\r\n");
 8041342:	4823      	ldr	r0, [pc, #140]	; (80413d0 <ota_process_data+0x1ec>)
 8041344:	f00c fab6 	bl	804d8b4 <puts>

						printf("Validating the received Binary....\r\n");
 8041348:	4822      	ldr	r0, [pc, #136]	; (80413d4 <ota_process_data+0x1f0>)
 804134a:	f00c fab3 	bl	804d8b4 <puts>

						uint32_t cal_crc = ota_calcCRC((uint8_t *) OTA_SLOT_FLASH_ADDR
 804134e:	4b1b      	ldr	r3, [pc, #108]	; (80413bc <ota_process_data+0x1d8>)
 8041350:	681b      	ldr	r3, [r3, #0]
 8041352:	4619      	mov	r1, r3
 8041354:	4820      	ldr	r0, [pc, #128]	; (80413d8 <ota_process_data+0x1f4>)
 8041356:	f000 f8f5 	bl	8041544 <ota_calcCRC>
 804135a:	61b8      	str	r0, [r7, #24]
																, ota_fw_total_size);

						if(cal_crc != ota_fw_crc)
 804135c:	4b18      	ldr	r3, [pc, #96]	; (80413c0 <ota_process_data+0x1dc>)
 804135e:	681b      	ldr	r3, [r3, #0]
 8041360:	69ba      	ldr	r2, [r7, #24]
 8041362:	429a      	cmp	r2, r3
 8041364:	d007      	beq.n	8041376 <ota_process_data+0x192>
						{
							printf("ERROR: FW CRC Mismatch: calculated: [0x%08lx] received: [0x%08lx]\r\n",
 8041366:	4b16      	ldr	r3, [pc, #88]	; (80413c0 <ota_process_data+0x1dc>)
 8041368:	681b      	ldr	r3, [r3, #0]
 804136a:	461a      	mov	r2, r3
 804136c:	69b9      	ldr	r1, [r7, #24]
 804136e:	481b      	ldr	r0, [pc, #108]	; (80413dc <ota_process_data+0x1f8>)
 8041370:	f00c fa1a 	bl	804d7a8 <iprintf>
																			cal_crc, ota_fw_crc);
							break;
 8041374:	e015      	b.n	80413a2 <ota_process_data+0x1be>
						}

						printf("Done!\r\n");
 8041376:	481a      	ldr	r0, [pc, #104]	; (80413e0 <ota_process_data+0x1fc>)
 8041378:	f00c fa9c 	bl	804d8b4 <puts>

						// TODO: Update CFG

						ret = OTA_EX_OK;
 804137c:	2300      	movs	r3, #0
 804137e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}
			}
			break;
 8041382:	e00d      	b.n	80413a0 <ota_process_data+0x1bc>

			default:
			{
				ret = OTA_EX_ERR;
 8041384:	2301      	movs	r3, #1
 8041386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 804138a:	e00a      	b.n	80413a2 <ota_process_data+0x1be>
		};
 804138c:	bf00      	nop
 804138e:	e008      	b.n	80413a2 <ota_process_data+0x1be>
				break;
 8041390:	bf00      	nop
 8041392:	e006      	b.n	80413a2 <ota_process_data+0x1be>
			break;
 8041394:	bf00      	nop
 8041396:	e004      	b.n	80413a2 <ota_process_data+0x1be>
			break;
 8041398:	bf00      	nop
 804139a:	e002      	b.n	80413a2 <ota_process_data+0x1be>
			break;
 804139c:	bf00      	nop
 804139e:	e000      	b.n	80413a2 <ota_process_data+0x1be>
			break;
 80413a0:	bf00      	nop
	}while(false);

	return ret;
 80413a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80413a6:	4618      	mov	r0, r3
 80413a8:	3728      	adds	r7, #40	; 0x28
 80413aa:	46bd      	mov	sp, r7
 80413ac:	bd80      	pop	{r7, pc}
 80413ae:	bf00      	nop
 80413b0:	20000401 	.word	0x20000401
 80413b4:	0804eb58 	.word	0x0804eb58
 80413b8:	0804eb6c 	.word	0x0804eb6c
 80413bc:	20000404 	.word	0x20000404
 80413c0:	20000408 	.word	0x20000408
 80413c4:	2000040c 	.word	0x2000040c
 80413c8:	0804eb88 	.word	0x0804eb88
 80413cc:	0804ebc4 	.word	0x0804ebc4
 80413d0:	0804ebd0 	.word	0x0804ebd0
 80413d4:	0804ebec 	.word	0x0804ebec
 80413d8:	08120000 	.word	0x08120000
 80413dc:	0804ec10 	.word	0x0804ec10
 80413e0:	0804ec54 	.word	0x0804ec54

080413e4 <write_data_to_slot>:
 * @retval HAL_StatusTypeDef
 */
static HAL_StatusTypeDef write_data_to_slot(uint8_t *data,
											uint32_t data_len,
											bool is_first_block)
{
 80413e4:	b5b0      	push	{r4, r5, r7, lr}
 80413e6:	b08e      	sub	sp, #56	; 0x38
 80413e8:	af00      	add	r7, sp, #0
 80413ea:	60f8      	str	r0, [r7, #12]
 80413ec:	60b9      	str	r1, [r7, #8]
 80413ee:	4613      	mov	r3, r2
 80413f0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_ERROR;
 80413f2:	2301      	movs	r3, #1
 80413f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	do
	{
		// Unlock Flash
		ret = HAL_FLASH_Unlock();
 80413f8:	f002 ff62 	bl	80442c0 <HAL_FLASH_Unlock>
 80413fc:	4603      	mov	r3, r0
 80413fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if ( ret != HAL_OK )
 8041402:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8041406:	2b00      	cmp	r3, #0
 8041408:	d15d      	bne.n	80414c6 <write_data_to_slot+0xe2>
		{
			break;
		}

		// Erase Only on First Block
		if( is_first_block )
 804140a:	79fb      	ldrb	r3, [r7, #7]
 804140c:	2b00      	cmp	r3, #0
 804140e:	d01f      	beq.n	8041450 <write_data_to_slot+0x6c>
		{
			printf("Erasing The Slot Flash memory....\r\n");
 8041410:	4831      	ldr	r0, [pc, #196]	; (80414d8 <write_data_to_slot+0xf4>)
 8041412:	f00c fa4f 	bl	804d8b4 <puts>
			// Erase The Flash
			FLASH_EraseInitTypeDef EraseInitStruct;
			uint32_t SectorError;

			EraseInitStruct.TypeErase			= FLASH_TYPEERASE_SECTORS;
 8041416:	2300      	movs	r3, #0
 8041418:	61bb      	str	r3, [r7, #24]
			EraseInitStruct.Sector				= OTA_SLOT_SECTOR;
 804141a:	2311      	movs	r3, #17
 804141c:	623b      	str	r3, [r7, #32]
			EraseInitStruct.NbSectors			= OTA_SLOT_NB_SECTOR;
 804141e:	2307      	movs	r3, #7
 8041420:	627b      	str	r3, [r7, #36]	; 0x24
			EraseInitStruct.VoltageRange		= FLASH_VOLTAGE_RANGE_3;
 8041422:	2302      	movs	r3, #2
 8041424:	62bb      	str	r3, [r7, #40]	; 0x28

			ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8041426:	f107 0214 	add.w	r2, r7, #20
 804142a:	f107 0318 	add.w	r3, r7, #24
 804142e:	4611      	mov	r1, r2
 8041430:	4618      	mov	r0, r3
 8041432:	f003 f8b7 	bl	80445a4 <HAL_FLASHEx_Erase>
 8041436:	4603      	mov	r3, r0
 8041438:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			if( ret != HAL_OK ){
 804143c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8041440:	2b00      	cmp	r3, #0
 8041442:	d005      	beq.n	8041450 <write_data_to_slot+0x6c>
				printf("Flash Erase Error On Sector 0x%08lx\r\n",SectorError);
 8041444:	697b      	ldr	r3, [r7, #20]
 8041446:	4619      	mov	r1, r3
 8041448:	4824      	ldr	r0, [pc, #144]	; (80414dc <write_data_to_slot+0xf8>)
 804144a:	f00c f9ad 	bl	804d7a8 <iprintf>
 804144e:	e03d      	b.n	80414cc <write_data_to_slot+0xe8>
				break;
			}
		}

		uint32_t flash_addr = OTA_SLOT_FLASH_ADDR;
 8041450:	4b23      	ldr	r3, [pc, #140]	; (80414e0 <write_data_to_slot+0xfc>)
 8041452:	62fb      	str	r3, [r7, #44]	; 0x2c

		for( int i = 0; i < data_len; i++)
 8041454:	2300      	movs	r3, #0
 8041456:	633b      	str	r3, [r7, #48]	; 0x30
 8041458:	e024      	b.n	80414a4 <write_data_to_slot+0xc0>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 804145a:	4b22      	ldr	r3, [pc, #136]	; (80414e4 <write_data_to_slot+0x100>)
 804145c:	681a      	ldr	r2, [r3, #0]
 804145e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041460:	18d1      	adds	r1, r2, r3
									(flash_addr + ota_fw_received_size),
									data[i]);
 8041462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8041464:	68fa      	ldr	r2, [r7, #12]
 8041466:	4413      	add	r3, r2
 8041468:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 804146a:	b2db      	uxtb	r3, r3
 804146c:	2200      	movs	r2, #0
 804146e:	461c      	mov	r4, r3
 8041470:	4615      	mov	r5, r2
 8041472:	4622      	mov	r2, r4
 8041474:	462b      	mov	r3, r5
 8041476:	2000      	movs	r0, #0
 8041478:	f002 fece 	bl	8044218 <HAL_FLASH_Program>
 804147c:	4603      	mov	r3, r0
 804147e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			if ( ret == HAL_OK )
 8041482:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8041486:	2b00      	cmp	r3, #0
 8041488:	d105      	bne.n	8041496 <write_data_to_slot+0xb2>
			{
				//update the data count
				ota_fw_received_size +=1;
 804148a:	4b16      	ldr	r3, [pc, #88]	; (80414e4 <write_data_to_slot+0x100>)
 804148c:	681b      	ldr	r3, [r3, #0]
 804148e:	3301      	adds	r3, #1
 8041490:	4a14      	ldr	r2, [pc, #80]	; (80414e4 <write_data_to_slot+0x100>)
 8041492:	6013      	str	r3, [r2, #0]
 8041494:	e003      	b.n	804149e <write_data_to_slot+0xba>
			}
			else
			{
				printf("Flash Write Error\r\n");
 8041496:	4814      	ldr	r0, [pc, #80]	; (80414e8 <write_data_to_slot+0x104>)
 8041498:	f00c fa0c 	bl	804d8b4 <puts>
				break;
 804149c:	e006      	b.n	80414ac <write_data_to_slot+0xc8>
		for( int i = 0; i < data_len; i++)
 804149e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80414a0:	3301      	adds	r3, #1
 80414a2:	633b      	str	r3, [r7, #48]	; 0x30
 80414a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80414a6:	68ba      	ldr	r2, [r7, #8]
 80414a8:	429a      	cmp	r2, r3
 80414aa:	d8d6      	bhi.n	804145a <write_data_to_slot+0x76>
			}
		}

		if( ret != HAL_OK )
 80414ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80414b0:	2b00      	cmp	r3, #0
 80414b2:	d10a      	bne.n	80414ca <write_data_to_slot+0xe6>
			break;
		}


		// Lock Flash
		ret = HAL_FLASH_Lock();
 80414b4:	f002 ff26 	bl	8044304 <HAL_FLASH_Lock>
 80414b8:	4603      	mov	r3, r0
 80414ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if( ret != HAL_OK )
 80414be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80414c2:	2b00      	cmp	r3, #0
 80414c4:	e002      	b.n	80414cc <write_data_to_slot+0xe8>
			break;
 80414c6:	bf00      	nop
 80414c8:	e000      	b.n	80414cc <write_data_to_slot+0xe8>
			break;
 80414ca:	bf00      	nop
		{
			break;
		}
	}while(false);

	return ret;
 80414cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80414d0:	4618      	mov	r0, r3
 80414d2:	3738      	adds	r7, #56	; 0x38
 80414d4:	46bd      	mov	sp, r7
 80414d6:	bdb0      	pop	{r4, r5, r7, pc}
 80414d8:	0804ec5c 	.word	0x0804ec5c
 80414dc:	0804ec80 	.word	0x0804ec80
 80414e0:	08120000 	.word	0x08120000
 80414e4:	2000040c 	.word	0x2000040c
 80414e8:	0804eca8 	.word	0x0804eca8

080414ec <ota_send_resp>:
 * @brief send response to host
 * @param huart uart handler
 * @param rsp ACK or NACK response
 * @retval none
 */
static void ota_send_resp(UART_HandleTypeDef *huart, uint8_t rsp){
 80414ec:	b580      	push	{r7, lr}
 80414ee:	b086      	sub	sp, #24
 80414f0:	af00      	add	r7, sp, #0
 80414f2:	6078      	str	r0, [r7, #4]
 80414f4:	460b      	mov	r3, r1
 80414f6:	70fb      	strb	r3, [r7, #3]
	OTA_RESP_ pack =
 80414f8:	f107 030c 	add.w	r3, r7, #12
 80414fc:	2200      	movs	r2, #0
 80414fe:	601a      	str	r2, [r3, #0]
 8041500:	605a      	str	r2, [r3, #4]
 8041502:	811a      	strh	r2, [r3, #8]
 8041504:	23aa      	movs	r3, #170	; 0xaa
 8041506:	733b      	strb	r3, [r7, #12]
 8041508:	2303      	movs	r3, #3
 804150a:	737b      	strb	r3, [r7, #13]
 804150c:	2301      	movs	r3, #1
 804150e:	81fb      	strh	r3, [r7, #14]
 8041510:	78fb      	ldrb	r3, [r7, #3]
 8041512:	743b      	strb	r3, [r7, #16]
 8041514:	23bb      	movs	r3, #187	; 0xbb
 8041516:	757b      	strb	r3, [r7, #21]
	  .data_len		= 1u,
	  .status		= rsp,
	  .eof			= OTA_EOF
	};

	pack.crc = ota_calcCRC(&pack.status, 1);
 8041518:	f107 030c 	add.w	r3, r7, #12
 804151c:	3304      	adds	r3, #4
 804151e:	2101      	movs	r1, #1
 8041520:	4618      	mov	r0, r3
 8041522:	f000 f80f 	bl	8041544 <ota_calcCRC>
 8041526:	4603      	mov	r3, r0
 8041528:	f8c7 3011 	str.w	r3, [r7, #17]

	//send respond
	HAL_UART_Transmit(huart, (uint8_t *)&pack, sizeof(OTA_RESP_),HAL_MAX_DELAY);
 804152c:	f107 010c 	add.w	r1, r7, #12
 8041530:	f04f 33ff 	mov.w	r3, #4294967295
 8041534:	220a      	movs	r2, #10
 8041536:	6878      	ldr	r0, [r7, #4]
 8041538:	f008 f801 	bl	804953e <HAL_UART_Transmit>

}
 804153c:	bf00      	nop
 804153e:	3718      	adds	r7, #24
 8041540:	46bd      	mov	sp, r7
 8041542:	bd80      	pop	{r7, pc}

08041544 <ota_calcCRC>:
 * @param DataLength length of data
 * @retval CRC32
 */

uint32_t ota_calcCRC(uint8_t * pData, uint32_t DataLength)
{
 8041544:	b480      	push	{r7}
 8041546:	b087      	sub	sp, #28
 8041548:	af00      	add	r7, sp, #0
 804154a:	6078      	str	r0, [r7, #4]
 804154c:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 804154e:	f04f 33ff 	mov.w	r3, #4294967295
 8041552:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 8041554:	2300      	movs	r3, #0
 8041556:	613b      	str	r3, [r7, #16]
 8041558:	e014      	b.n	8041584 <ota_calcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 804155a:	697b      	ldr	r3, [r7, #20]
 804155c:	0e1b      	lsrs	r3, r3, #24
 804155e:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 8041560:	687a      	ldr	r2, [r7, #4]
 8041562:	693b      	ldr	r3, [r7, #16]
 8041564:	4413      	add	r3, r2
 8041566:	781a      	ldrb	r2, [r3, #0]
 8041568:	7bfb      	ldrb	r3, [r7, #15]
 804156a:	4053      	eors	r3, r2
 804156c:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 804156e:	697b      	ldr	r3, [r7, #20]
 8041570:	021a      	lsls	r2, r3, #8
 8041572:	7bfb      	ldrb	r3, [r7, #15]
 8041574:	4909      	ldr	r1, [pc, #36]	; (804159c <ota_calcCRC+0x58>)
 8041576:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 804157a:	4053      	eors	r3, r2
 804157c:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 804157e:	693b      	ldr	r3, [r7, #16]
 8041580:	3301      	adds	r3, #1
 8041582:	613b      	str	r3, [r7, #16]
 8041584:	693a      	ldr	r2, [r7, #16]
 8041586:	683b      	ldr	r3, [r7, #0]
 8041588:	429a      	cmp	r2, r3
 804158a:	d3e6      	bcc.n	804155a <ota_calcCRC+0x16>
    }
    return Checksum;
 804158c:	697b      	ldr	r3, [r7, #20]
}
 804158e:	4618      	mov	r0, r3
 8041590:	371c      	adds	r7, #28
 8041592:	46bd      	mov	sp, r7
 8041594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041598:	4770      	bx	lr
 804159a:	bf00      	nop
 804159c:	0804ecc0 	.word	0x0804ecc0

080415a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80415a0:	b480      	push	{r7}
 80415a2:	b083      	sub	sp, #12
 80415a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80415a6:	2300      	movs	r3, #0
 80415a8:	607b      	str	r3, [r7, #4]
 80415aa:	4b10      	ldr	r3, [pc, #64]	; (80415ec <HAL_MspInit+0x4c>)
 80415ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80415ae:	4a0f      	ldr	r2, [pc, #60]	; (80415ec <HAL_MspInit+0x4c>)
 80415b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80415b4:	6453      	str	r3, [r2, #68]	; 0x44
 80415b6:	4b0d      	ldr	r3, [pc, #52]	; (80415ec <HAL_MspInit+0x4c>)
 80415b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80415ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80415be:	607b      	str	r3, [r7, #4]
 80415c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80415c2:	2300      	movs	r3, #0
 80415c4:	603b      	str	r3, [r7, #0]
 80415c6:	4b09      	ldr	r3, [pc, #36]	; (80415ec <HAL_MspInit+0x4c>)
 80415c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80415ca:	4a08      	ldr	r2, [pc, #32]	; (80415ec <HAL_MspInit+0x4c>)
 80415cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80415d0:	6413      	str	r3, [r2, #64]	; 0x40
 80415d2:	4b06      	ldr	r3, [pc, #24]	; (80415ec <HAL_MspInit+0x4c>)
 80415d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80415d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80415da:	603b      	str	r3, [r7, #0]
 80415dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80415de:	bf00      	nop
 80415e0:	370c      	adds	r7, #12
 80415e2:	46bd      	mov	sp, r7
 80415e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80415e8:	4770      	bx	lr
 80415ea:	bf00      	nop
 80415ec:	40023800 	.word	0x40023800

080415f0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80415f0:	b480      	push	{r7}
 80415f2:	b085      	sub	sp, #20
 80415f4:	af00      	add	r7, sp, #0
 80415f6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80415f8:	687b      	ldr	r3, [r7, #4]
 80415fa:	681b      	ldr	r3, [r3, #0]
 80415fc:	4a0b      	ldr	r2, [pc, #44]	; (804162c <HAL_CRC_MspInit+0x3c>)
 80415fe:	4293      	cmp	r3, r2
 8041600:	d10d      	bne.n	804161e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8041602:	2300      	movs	r3, #0
 8041604:	60fb      	str	r3, [r7, #12]
 8041606:	4b0a      	ldr	r3, [pc, #40]	; (8041630 <HAL_CRC_MspInit+0x40>)
 8041608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804160a:	4a09      	ldr	r2, [pc, #36]	; (8041630 <HAL_CRC_MspInit+0x40>)
 804160c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8041610:	6313      	str	r3, [r2, #48]	; 0x30
 8041612:	4b07      	ldr	r3, [pc, #28]	; (8041630 <HAL_CRC_MspInit+0x40>)
 8041614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804161a:	60fb      	str	r3, [r7, #12]
 804161c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 804161e:	bf00      	nop
 8041620:	3714      	adds	r7, #20
 8041622:	46bd      	mov	sp, r7
 8041624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041628:	4770      	bx	lr
 804162a:	bf00      	nop
 804162c:	40023000 	.word	0x40023000
 8041630:	40023800 	.word	0x40023800

08041634 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8041634:	b580      	push	{r7, lr}
 8041636:	b084      	sub	sp, #16
 8041638:	af00      	add	r7, sp, #0
 804163a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 804163c:	687b      	ldr	r3, [r7, #4]
 804163e:	681b      	ldr	r3, [r3, #0]
 8041640:	4a0e      	ldr	r2, [pc, #56]	; (804167c <HAL_DMA2D_MspInit+0x48>)
 8041642:	4293      	cmp	r3, r2
 8041644:	d115      	bne.n	8041672 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8041646:	2300      	movs	r3, #0
 8041648:	60fb      	str	r3, [r7, #12]
 804164a:	4b0d      	ldr	r3, [pc, #52]	; (8041680 <HAL_DMA2D_MspInit+0x4c>)
 804164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804164e:	4a0c      	ldr	r2, [pc, #48]	; (8041680 <HAL_DMA2D_MspInit+0x4c>)
 8041650:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8041654:	6313      	str	r3, [r2, #48]	; 0x30
 8041656:	4b0a      	ldr	r3, [pc, #40]	; (8041680 <HAL_DMA2D_MspInit+0x4c>)
 8041658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804165a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804165e:	60fb      	str	r3, [r7, #12]
 8041660:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8041662:	2200      	movs	r2, #0
 8041664:	2105      	movs	r1, #5
 8041666:	205a      	movs	r0, #90	; 0x5a
 8041668:	f002 f836 	bl	80436d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 804166c:	205a      	movs	r0, #90	; 0x5a
 804166e:	f002 f84f 	bl	8043710 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8041672:	bf00      	nop
 8041674:	3710      	adds	r7, #16
 8041676:	46bd      	mov	sp, r7
 8041678:	bd80      	pop	{r7, pc}
 804167a:	bf00      	nop
 804167c:	4002b000 	.word	0x4002b000
 8041680:	40023800 	.word	0x40023800

08041684 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8041684:	b580      	push	{r7, lr}
 8041686:	b08a      	sub	sp, #40	; 0x28
 8041688:	af00      	add	r7, sp, #0
 804168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804168c:	f107 0314 	add.w	r3, r7, #20
 8041690:	2200      	movs	r2, #0
 8041692:	601a      	str	r2, [r3, #0]
 8041694:	605a      	str	r2, [r3, #4]
 8041696:	609a      	str	r2, [r3, #8]
 8041698:	60da      	str	r2, [r3, #12]
 804169a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 804169c:	687b      	ldr	r3, [r7, #4]
 804169e:	681b      	ldr	r3, [r3, #0]
 80416a0:	4a29      	ldr	r2, [pc, #164]	; (8041748 <HAL_I2C_MspInit+0xc4>)
 80416a2:	4293      	cmp	r3, r2
 80416a4:	d14b      	bne.n	804173e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80416a6:	2300      	movs	r3, #0
 80416a8:	613b      	str	r3, [r7, #16]
 80416aa:	4b28      	ldr	r3, [pc, #160]	; (804174c <HAL_I2C_MspInit+0xc8>)
 80416ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416ae:	4a27      	ldr	r2, [pc, #156]	; (804174c <HAL_I2C_MspInit+0xc8>)
 80416b0:	f043 0304 	orr.w	r3, r3, #4
 80416b4:	6313      	str	r3, [r2, #48]	; 0x30
 80416b6:	4b25      	ldr	r3, [pc, #148]	; (804174c <HAL_I2C_MspInit+0xc8>)
 80416b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416ba:	f003 0304 	and.w	r3, r3, #4
 80416be:	613b      	str	r3, [r7, #16]
 80416c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80416c2:	2300      	movs	r3, #0
 80416c4:	60fb      	str	r3, [r7, #12]
 80416c6:	4b21      	ldr	r3, [pc, #132]	; (804174c <HAL_I2C_MspInit+0xc8>)
 80416c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416ca:	4a20      	ldr	r2, [pc, #128]	; (804174c <HAL_I2C_MspInit+0xc8>)
 80416cc:	f043 0301 	orr.w	r3, r3, #1
 80416d0:	6313      	str	r3, [r2, #48]	; 0x30
 80416d2:	4b1e      	ldr	r3, [pc, #120]	; (804174c <HAL_I2C_MspInit+0xc8>)
 80416d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416d6:	f003 0301 	and.w	r3, r3, #1
 80416da:	60fb      	str	r3, [r7, #12]
 80416dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80416de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80416e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80416e4:	2312      	movs	r3, #18
 80416e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80416e8:	2301      	movs	r3, #1
 80416ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80416ec:	2300      	movs	r3, #0
 80416ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80416f0:	2304      	movs	r3, #4
 80416f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80416f4:	f107 0314 	add.w	r3, r7, #20
 80416f8:	4619      	mov	r1, r3
 80416fa:	4815      	ldr	r0, [pc, #84]	; (8041750 <HAL_I2C_MspInit+0xcc>)
 80416fc:	f003 f892 	bl	8044824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8041700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8041704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8041706:	2312      	movs	r3, #18
 8041708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 804170a:	2301      	movs	r3, #1
 804170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804170e:	2300      	movs	r3, #0
 8041710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8041712:	2304      	movs	r3, #4
 8041714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8041716:	f107 0314 	add.w	r3, r7, #20
 804171a:	4619      	mov	r1, r3
 804171c:	480d      	ldr	r0, [pc, #52]	; (8041754 <HAL_I2C_MspInit+0xd0>)
 804171e:	f003 f881 	bl	8044824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8041722:	2300      	movs	r3, #0
 8041724:	60bb      	str	r3, [r7, #8]
 8041726:	4b09      	ldr	r3, [pc, #36]	; (804174c <HAL_I2C_MspInit+0xc8>)
 8041728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804172a:	4a08      	ldr	r2, [pc, #32]	; (804174c <HAL_I2C_MspInit+0xc8>)
 804172c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8041730:	6413      	str	r3, [r2, #64]	; 0x40
 8041732:	4b06      	ldr	r3, [pc, #24]	; (804174c <HAL_I2C_MspInit+0xc8>)
 8041734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804173a:	60bb      	str	r3, [r7, #8]
 804173c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 804173e:	bf00      	nop
 8041740:	3728      	adds	r7, #40	; 0x28
 8041742:	46bd      	mov	sp, r7
 8041744:	bd80      	pop	{r7, pc}
 8041746:	bf00      	nop
 8041748:	40005c00 	.word	0x40005c00
 804174c:	40023800 	.word	0x40023800
 8041750:	40020800 	.word	0x40020800
 8041754:	40020000 	.word	0x40020000

08041758 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8041758:	b580      	push	{r7, lr}
 804175a:	b09a      	sub	sp, #104	; 0x68
 804175c:	af00      	add	r7, sp, #0
 804175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041760:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041764:	2200      	movs	r2, #0
 8041766:	601a      	str	r2, [r3, #0]
 8041768:	605a      	str	r2, [r3, #4]
 804176a:	609a      	str	r2, [r3, #8]
 804176c:	60da      	str	r2, [r3, #12]
 804176e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8041770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8041774:	2230      	movs	r2, #48	; 0x30
 8041776:	2100      	movs	r1, #0
 8041778:	4618      	mov	r0, r3
 804177a:	f00b ff2d 	bl	804d5d8 <memset>
  if(hltdc->Instance==LTDC)
 804177e:	687b      	ldr	r3, [r7, #4]
 8041780:	681b      	ldr	r3, [r3, #0]
 8041782:	4a85      	ldr	r2, [pc, #532]	; (8041998 <HAL_LTDC_MspInit+0x240>)
 8041784:	4293      	cmp	r3, r2
 8041786:	f040 8102 	bne.w	804198e <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 804178a:	2308      	movs	r3, #8
 804178c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 804178e:	2331      	movs	r3, #49	; 0x31
 8041790:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8041792:	2302      	movs	r3, #2
 8041794:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8041796:	2300      	movs	r3, #0
 8041798:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804179a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804179e:	4618      	mov	r0, r3
 80417a0:	f006 f9ce 	bl	8047b40 <HAL_RCCEx_PeriphCLKConfig>
 80417a4:	4603      	mov	r3, r0
 80417a6:	2b00      	cmp	r3, #0
 80417a8:	d001      	beq.n	80417ae <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80417aa:	f7ff fbb3 	bl	8040f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80417ae:	2300      	movs	r3, #0
 80417b0:	623b      	str	r3, [r7, #32]
 80417b2:	4b7a      	ldr	r3, [pc, #488]	; (804199c <HAL_LTDC_MspInit+0x244>)
 80417b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80417b6:	4a79      	ldr	r2, [pc, #484]	; (804199c <HAL_LTDC_MspInit+0x244>)
 80417b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80417bc:	6453      	str	r3, [r2, #68]	; 0x44
 80417be:	4b77      	ldr	r3, [pc, #476]	; (804199c <HAL_LTDC_MspInit+0x244>)
 80417c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80417c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80417c6:	623b      	str	r3, [r7, #32]
 80417c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80417ca:	2300      	movs	r3, #0
 80417cc:	61fb      	str	r3, [r7, #28]
 80417ce:	4b73      	ldr	r3, [pc, #460]	; (804199c <HAL_LTDC_MspInit+0x244>)
 80417d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80417d2:	4a72      	ldr	r2, [pc, #456]	; (804199c <HAL_LTDC_MspInit+0x244>)
 80417d4:	f043 0320 	orr.w	r3, r3, #32
 80417d8:	6313      	str	r3, [r2, #48]	; 0x30
 80417da:	4b70      	ldr	r3, [pc, #448]	; (804199c <HAL_LTDC_MspInit+0x244>)
 80417dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80417de:	f003 0320 	and.w	r3, r3, #32
 80417e2:	61fb      	str	r3, [r7, #28]
 80417e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80417e6:	2300      	movs	r3, #0
 80417e8:	61bb      	str	r3, [r7, #24]
 80417ea:	4b6c      	ldr	r3, [pc, #432]	; (804199c <HAL_LTDC_MspInit+0x244>)
 80417ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80417ee:	4a6b      	ldr	r2, [pc, #428]	; (804199c <HAL_LTDC_MspInit+0x244>)
 80417f0:	f043 0301 	orr.w	r3, r3, #1
 80417f4:	6313      	str	r3, [r2, #48]	; 0x30
 80417f6:	4b69      	ldr	r3, [pc, #420]	; (804199c <HAL_LTDC_MspInit+0x244>)
 80417f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80417fa:	f003 0301 	and.w	r3, r3, #1
 80417fe:	61bb      	str	r3, [r7, #24]
 8041800:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8041802:	2300      	movs	r3, #0
 8041804:	617b      	str	r3, [r7, #20]
 8041806:	4b65      	ldr	r3, [pc, #404]	; (804199c <HAL_LTDC_MspInit+0x244>)
 8041808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804180a:	4a64      	ldr	r2, [pc, #400]	; (804199c <HAL_LTDC_MspInit+0x244>)
 804180c:	f043 0302 	orr.w	r3, r3, #2
 8041810:	6313      	str	r3, [r2, #48]	; 0x30
 8041812:	4b62      	ldr	r3, [pc, #392]	; (804199c <HAL_LTDC_MspInit+0x244>)
 8041814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041816:	f003 0302 	and.w	r3, r3, #2
 804181a:	617b      	str	r3, [r7, #20]
 804181c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 804181e:	2300      	movs	r3, #0
 8041820:	613b      	str	r3, [r7, #16]
 8041822:	4b5e      	ldr	r3, [pc, #376]	; (804199c <HAL_LTDC_MspInit+0x244>)
 8041824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041826:	4a5d      	ldr	r2, [pc, #372]	; (804199c <HAL_LTDC_MspInit+0x244>)
 8041828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804182c:	6313      	str	r3, [r2, #48]	; 0x30
 804182e:	4b5b      	ldr	r3, [pc, #364]	; (804199c <HAL_LTDC_MspInit+0x244>)
 8041830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041836:	613b      	str	r3, [r7, #16]
 8041838:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804183a:	2300      	movs	r3, #0
 804183c:	60fb      	str	r3, [r7, #12]
 804183e:	4b57      	ldr	r3, [pc, #348]	; (804199c <HAL_LTDC_MspInit+0x244>)
 8041840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041842:	4a56      	ldr	r2, [pc, #344]	; (804199c <HAL_LTDC_MspInit+0x244>)
 8041844:	f043 0304 	orr.w	r3, r3, #4
 8041848:	6313      	str	r3, [r2, #48]	; 0x30
 804184a:	4b54      	ldr	r3, [pc, #336]	; (804199c <HAL_LTDC_MspInit+0x244>)
 804184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804184e:	f003 0304 	and.w	r3, r3, #4
 8041852:	60fb      	str	r3, [r7, #12]
 8041854:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8041856:	2300      	movs	r3, #0
 8041858:	60bb      	str	r3, [r7, #8]
 804185a:	4b50      	ldr	r3, [pc, #320]	; (804199c <HAL_LTDC_MspInit+0x244>)
 804185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804185e:	4a4f      	ldr	r2, [pc, #316]	; (804199c <HAL_LTDC_MspInit+0x244>)
 8041860:	f043 0308 	orr.w	r3, r3, #8
 8041864:	6313      	str	r3, [r2, #48]	; 0x30
 8041866:	4b4d      	ldr	r3, [pc, #308]	; (804199c <HAL_LTDC_MspInit+0x244>)
 8041868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804186a:	f003 0308 	and.w	r3, r3, #8
 804186e:	60bb      	str	r3, [r7, #8]
 8041870:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8041872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8041876:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041878:	2302      	movs	r3, #2
 804187a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804187c:	2300      	movs	r3, #0
 804187e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041880:	2300      	movs	r3, #0
 8041882:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8041884:	230e      	movs	r3, #14
 8041886:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8041888:	f107 0354 	add.w	r3, r7, #84	; 0x54
 804188c:	4619      	mov	r1, r3
 804188e:	4844      	ldr	r0, [pc, #272]	; (80419a0 <HAL_LTDC_MspInit+0x248>)
 8041890:	f002 ffc8 	bl	8044824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8041894:	f641 0358 	movw	r3, #6232	; 0x1858
 8041898:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804189a:	2302      	movs	r3, #2
 804189c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804189e:	2300      	movs	r3, #0
 80418a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80418a2:	2300      	movs	r3, #0
 80418a4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80418a6:	230e      	movs	r3, #14
 80418a8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80418aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80418ae:	4619      	mov	r1, r3
 80418b0:	483c      	ldr	r0, [pc, #240]	; (80419a4 <HAL_LTDC_MspInit+0x24c>)
 80418b2:	f002 ffb7 	bl	8044824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80418b6:	2303      	movs	r3, #3
 80418b8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80418ba:	2302      	movs	r3, #2
 80418bc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80418be:	2300      	movs	r3, #0
 80418c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80418c2:	2300      	movs	r3, #0
 80418c4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80418c6:	2309      	movs	r3, #9
 80418c8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80418ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80418ce:	4619      	mov	r1, r3
 80418d0:	4835      	ldr	r0, [pc, #212]	; (80419a8 <HAL_LTDC_MspInit+0x250>)
 80418d2:	f002 ffa7 	bl	8044824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80418d6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80418da:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80418dc:	2302      	movs	r3, #2
 80418de:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80418e0:	2300      	movs	r3, #0
 80418e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80418e4:	2300      	movs	r3, #0
 80418e6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80418e8:	230e      	movs	r3, #14
 80418ea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80418ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80418f0:	4619      	mov	r1, r3
 80418f2:	482d      	ldr	r0, [pc, #180]	; (80419a8 <HAL_LTDC_MspInit+0x250>)
 80418f4:	f002 ff96 	bl	8044824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80418f8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80418fc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80418fe:	2302      	movs	r3, #2
 8041900:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041902:	2300      	movs	r3, #0
 8041904:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041906:	2300      	movs	r3, #0
 8041908:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 804190a:	230e      	movs	r3, #14
 804190c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 804190e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041912:	4619      	mov	r1, r3
 8041914:	4825      	ldr	r0, [pc, #148]	; (80419ac <HAL_LTDC_MspInit+0x254>)
 8041916:	f002 ff85 	bl	8044824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 804191a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 804191e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041920:	2302      	movs	r3, #2
 8041922:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041924:	2300      	movs	r3, #0
 8041926:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041928:	2300      	movs	r3, #0
 804192a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 804192c:	230e      	movs	r3, #14
 804192e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8041930:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041934:	4619      	mov	r1, r3
 8041936:	481e      	ldr	r0, [pc, #120]	; (80419b0 <HAL_LTDC_MspInit+0x258>)
 8041938:	f002 ff74 	bl	8044824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 804193c:	2348      	movs	r3, #72	; 0x48
 804193e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041940:	2302      	movs	r3, #2
 8041942:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041944:	2300      	movs	r3, #0
 8041946:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041948:	2300      	movs	r3, #0
 804194a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 804194c:	230e      	movs	r3, #14
 804194e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8041950:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041954:	4619      	mov	r1, r3
 8041956:	4817      	ldr	r0, [pc, #92]	; (80419b4 <HAL_LTDC_MspInit+0x25c>)
 8041958:	f002 ff64 	bl	8044824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 804195c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8041960:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041962:	2302      	movs	r3, #2
 8041964:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041966:	2300      	movs	r3, #0
 8041968:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804196a:	2300      	movs	r3, #0
 804196c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 804196e:	2309      	movs	r3, #9
 8041970:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8041972:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041976:	4619      	mov	r1, r3
 8041978:	480c      	ldr	r0, [pc, #48]	; (80419ac <HAL_LTDC_MspInit+0x254>)
 804197a:	f002 ff53 	bl	8044824 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 804197e:	2200      	movs	r2, #0
 8041980:	2105      	movs	r1, #5
 8041982:	2058      	movs	r0, #88	; 0x58
 8041984:	f001 fea8 	bl	80436d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8041988:	2058      	movs	r0, #88	; 0x58
 804198a:	f001 fec1 	bl	8043710 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 804198e:	bf00      	nop
 8041990:	3768      	adds	r7, #104	; 0x68
 8041992:	46bd      	mov	sp, r7
 8041994:	bd80      	pop	{r7, pc}
 8041996:	bf00      	nop
 8041998:	40016800 	.word	0x40016800
 804199c:	40023800 	.word	0x40023800
 80419a0:	40021400 	.word	0x40021400
 80419a4:	40020000 	.word	0x40020000
 80419a8:	40020400 	.word	0x40020400
 80419ac:	40021800 	.word	0x40021800
 80419b0:	40020800 	.word	0x40020800
 80419b4:	40020c00 	.word	0x40020c00

080419b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80419b8:	b580      	push	{r7, lr}
 80419ba:	b08a      	sub	sp, #40	; 0x28
 80419bc:	af00      	add	r7, sp, #0
 80419be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80419c0:	f107 0314 	add.w	r3, r7, #20
 80419c4:	2200      	movs	r2, #0
 80419c6:	601a      	str	r2, [r3, #0]
 80419c8:	605a      	str	r2, [r3, #4]
 80419ca:	609a      	str	r2, [r3, #8]
 80419cc:	60da      	str	r2, [r3, #12]
 80419ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80419d0:	687b      	ldr	r3, [r7, #4]
 80419d2:	681b      	ldr	r3, [r3, #0]
 80419d4:	4a19      	ldr	r2, [pc, #100]	; (8041a3c <HAL_SPI_MspInit+0x84>)
 80419d6:	4293      	cmp	r3, r2
 80419d8:	d12c      	bne.n	8041a34 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80419da:	2300      	movs	r3, #0
 80419dc:	613b      	str	r3, [r7, #16]
 80419de:	4b18      	ldr	r3, [pc, #96]	; (8041a40 <HAL_SPI_MspInit+0x88>)
 80419e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80419e2:	4a17      	ldr	r2, [pc, #92]	; (8041a40 <HAL_SPI_MspInit+0x88>)
 80419e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80419e8:	6453      	str	r3, [r2, #68]	; 0x44
 80419ea:	4b15      	ldr	r3, [pc, #84]	; (8041a40 <HAL_SPI_MspInit+0x88>)
 80419ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80419ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80419f2:	613b      	str	r3, [r7, #16]
 80419f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80419f6:	2300      	movs	r3, #0
 80419f8:	60fb      	str	r3, [r7, #12]
 80419fa:	4b11      	ldr	r3, [pc, #68]	; (8041a40 <HAL_SPI_MspInit+0x88>)
 80419fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80419fe:	4a10      	ldr	r2, [pc, #64]	; (8041a40 <HAL_SPI_MspInit+0x88>)
 8041a00:	f043 0320 	orr.w	r3, r3, #32
 8041a04:	6313      	str	r3, [r2, #48]	; 0x30
 8041a06:	4b0e      	ldr	r3, [pc, #56]	; (8041a40 <HAL_SPI_MspInit+0x88>)
 8041a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041a0a:	f003 0320 	and.w	r3, r3, #32
 8041a0e:	60fb      	str	r3, [r7, #12]
 8041a10:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8041a12:	f44f 7360 	mov.w	r3, #896	; 0x380
 8041a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041a18:	2302      	movs	r3, #2
 8041a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041a1c:	2300      	movs	r3, #0
 8041a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041a20:	2300      	movs	r3, #0
 8041a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8041a24:	2305      	movs	r3, #5
 8041a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8041a28:	f107 0314 	add.w	r3, r7, #20
 8041a2c:	4619      	mov	r1, r3
 8041a2e:	4805      	ldr	r0, [pc, #20]	; (8041a44 <HAL_SPI_MspInit+0x8c>)
 8041a30:	f002 fef8 	bl	8044824 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8041a34:	bf00      	nop
 8041a36:	3728      	adds	r7, #40	; 0x28
 8041a38:	46bd      	mov	sp, r7
 8041a3a:	bd80      	pop	{r7, pc}
 8041a3c:	40015000 	.word	0x40015000
 8041a40:	40023800 	.word	0x40023800
 8041a44:	40021400 	.word	0x40021400

08041a48 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8041a48:	b580      	push	{r7, lr}
 8041a4a:	b082      	sub	sp, #8
 8041a4c:	af00      	add	r7, sp, #0
 8041a4e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8041a50:	687b      	ldr	r3, [r7, #4]
 8041a52:	681b      	ldr	r3, [r3, #0]
 8041a54:	4a08      	ldr	r2, [pc, #32]	; (8041a78 <HAL_SPI_MspDeInit+0x30>)
 8041a56:	4293      	cmp	r3, r2
 8041a58:	d10a      	bne.n	8041a70 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8041a5a:	4b08      	ldr	r3, [pc, #32]	; (8041a7c <HAL_SPI_MspDeInit+0x34>)
 8041a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041a5e:	4a07      	ldr	r2, [pc, #28]	; (8041a7c <HAL_SPI_MspDeInit+0x34>)
 8041a60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8041a64:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8041a66:	f44f 7160 	mov.w	r1, #896	; 0x380
 8041a6a:	4805      	ldr	r0, [pc, #20]	; (8041a80 <HAL_SPI_MspDeInit+0x38>)
 8041a6c:	f003 f886 	bl	8044b7c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8041a70:	bf00      	nop
 8041a72:	3708      	adds	r7, #8
 8041a74:	46bd      	mov	sp, r7
 8041a76:	bd80      	pop	{r7, pc}
 8041a78:	40015000 	.word	0x40015000
 8041a7c:	40023800 	.word	0x40023800
 8041a80:	40021400 	.word	0x40021400

08041a84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8041a84:	b480      	push	{r7}
 8041a86:	b085      	sub	sp, #20
 8041a88:	af00      	add	r7, sp, #0
 8041a8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8041a8c:	687b      	ldr	r3, [r7, #4]
 8041a8e:	681b      	ldr	r3, [r3, #0]
 8041a90:	4a0b      	ldr	r2, [pc, #44]	; (8041ac0 <HAL_TIM_Base_MspInit+0x3c>)
 8041a92:	4293      	cmp	r3, r2
 8041a94:	d10d      	bne.n	8041ab2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8041a96:	2300      	movs	r3, #0
 8041a98:	60fb      	str	r3, [r7, #12]
 8041a9a:	4b0a      	ldr	r3, [pc, #40]	; (8041ac4 <HAL_TIM_Base_MspInit+0x40>)
 8041a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041a9e:	4a09      	ldr	r2, [pc, #36]	; (8041ac4 <HAL_TIM_Base_MspInit+0x40>)
 8041aa0:	f043 0301 	orr.w	r3, r3, #1
 8041aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8041aa6:	4b07      	ldr	r3, [pc, #28]	; (8041ac4 <HAL_TIM_Base_MspInit+0x40>)
 8041aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041aaa:	f003 0301 	and.w	r3, r3, #1
 8041aae:	60fb      	str	r3, [r7, #12]
 8041ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8041ab2:	bf00      	nop
 8041ab4:	3714      	adds	r7, #20
 8041ab6:	46bd      	mov	sp, r7
 8041ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041abc:	4770      	bx	lr
 8041abe:	bf00      	nop
 8041ac0:	40010000 	.word	0x40010000
 8041ac4:	40023800 	.word	0x40023800

08041ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8041ac8:	b580      	push	{r7, lr}
 8041aca:	b08c      	sub	sp, #48	; 0x30
 8041acc:	af00      	add	r7, sp, #0
 8041ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041ad0:	f107 031c 	add.w	r3, r7, #28
 8041ad4:	2200      	movs	r2, #0
 8041ad6:	601a      	str	r2, [r3, #0]
 8041ad8:	605a      	str	r2, [r3, #4]
 8041ada:	609a      	str	r2, [r3, #8]
 8041adc:	60da      	str	r2, [r3, #12]
 8041ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8041ae0:	687b      	ldr	r3, [r7, #4]
 8041ae2:	681b      	ldr	r3, [r3, #0]
 8041ae4:	4a42      	ldr	r2, [pc, #264]	; (8041bf0 <HAL_UART_MspInit+0x128>)
 8041ae6:	4293      	cmp	r3, r2
 8041ae8:	d14b      	bne.n	8041b82 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8041aea:	2300      	movs	r3, #0
 8041aec:	61bb      	str	r3, [r7, #24]
 8041aee:	4b41      	ldr	r3, [pc, #260]	; (8041bf4 <HAL_UART_MspInit+0x12c>)
 8041af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041af2:	4a40      	ldr	r2, [pc, #256]	; (8041bf4 <HAL_UART_MspInit+0x12c>)
 8041af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041af8:	6413      	str	r3, [r2, #64]	; 0x40
 8041afa:	4b3e      	ldr	r3, [pc, #248]	; (8041bf4 <HAL_UART_MspInit+0x12c>)
 8041afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041b02:	61bb      	str	r3, [r7, #24]
 8041b04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8041b06:	2300      	movs	r3, #0
 8041b08:	617b      	str	r3, [r7, #20]
 8041b0a:	4b3a      	ldr	r3, [pc, #232]	; (8041bf4 <HAL_UART_MspInit+0x12c>)
 8041b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041b0e:	4a39      	ldr	r2, [pc, #228]	; (8041bf4 <HAL_UART_MspInit+0x12c>)
 8041b10:	f043 0304 	orr.w	r3, r3, #4
 8041b14:	6313      	str	r3, [r2, #48]	; 0x30
 8041b16:	4b37      	ldr	r3, [pc, #220]	; (8041bf4 <HAL_UART_MspInit+0x12c>)
 8041b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041b1a:	f003 0304 	and.w	r3, r3, #4
 8041b1e:	617b      	str	r3, [r7, #20]
 8041b20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8041b22:	2300      	movs	r3, #0
 8041b24:	613b      	str	r3, [r7, #16]
 8041b26:	4b33      	ldr	r3, [pc, #204]	; (8041bf4 <HAL_UART_MspInit+0x12c>)
 8041b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041b2a:	4a32      	ldr	r2, [pc, #200]	; (8041bf4 <HAL_UART_MspInit+0x12c>)
 8041b2c:	f043 0308 	orr.w	r3, r3, #8
 8041b30:	6313      	str	r3, [r2, #48]	; 0x30
 8041b32:	4b30      	ldr	r3, [pc, #192]	; (8041bf4 <HAL_UART_MspInit+0x12c>)
 8041b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041b36:	f003 0308 	and.w	r3, r3, #8
 8041b3a:	613b      	str	r3, [r7, #16]
 8041b3c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8041b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8041b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041b44:	2302      	movs	r3, #2
 8041b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041b48:	2300      	movs	r3, #0
 8041b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041b4c:	2303      	movs	r3, #3
 8041b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8041b50:	2308      	movs	r3, #8
 8041b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8041b54:	f107 031c 	add.w	r3, r7, #28
 8041b58:	4619      	mov	r1, r3
 8041b5a:	4827      	ldr	r0, [pc, #156]	; (8041bf8 <HAL_UART_MspInit+0x130>)
 8041b5c:	f002 fe62 	bl	8044824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8041b60:	2304      	movs	r3, #4
 8041b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041b64:	2302      	movs	r3, #2
 8041b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041b68:	2300      	movs	r3, #0
 8041b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041b6c:	2303      	movs	r3, #3
 8041b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8041b70:	2308      	movs	r3, #8
 8041b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8041b74:	f107 031c 	add.w	r3, r7, #28
 8041b78:	4619      	mov	r1, r3
 8041b7a:	4820      	ldr	r0, [pc, #128]	; (8041bfc <HAL_UART_MspInit+0x134>)
 8041b7c:	f002 fe52 	bl	8044824 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8041b80:	e031      	b.n	8041be6 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8041b82:	687b      	ldr	r3, [r7, #4]
 8041b84:	681b      	ldr	r3, [r3, #0]
 8041b86:	4a1e      	ldr	r2, [pc, #120]	; (8041c00 <HAL_UART_MspInit+0x138>)
 8041b88:	4293      	cmp	r3, r2
 8041b8a:	d12c      	bne.n	8041be6 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8041b8c:	2300      	movs	r3, #0
 8041b8e:	60fb      	str	r3, [r7, #12]
 8041b90:	4b18      	ldr	r3, [pc, #96]	; (8041bf4 <HAL_UART_MspInit+0x12c>)
 8041b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041b94:	4a17      	ldr	r2, [pc, #92]	; (8041bf4 <HAL_UART_MspInit+0x12c>)
 8041b96:	f043 0310 	orr.w	r3, r3, #16
 8041b9a:	6453      	str	r3, [r2, #68]	; 0x44
 8041b9c:	4b15      	ldr	r3, [pc, #84]	; (8041bf4 <HAL_UART_MspInit+0x12c>)
 8041b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041ba0:	f003 0310 	and.w	r3, r3, #16
 8041ba4:	60fb      	str	r3, [r7, #12]
 8041ba6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8041ba8:	2300      	movs	r3, #0
 8041baa:	60bb      	str	r3, [r7, #8]
 8041bac:	4b11      	ldr	r3, [pc, #68]	; (8041bf4 <HAL_UART_MspInit+0x12c>)
 8041bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041bb0:	4a10      	ldr	r2, [pc, #64]	; (8041bf4 <HAL_UART_MspInit+0x12c>)
 8041bb2:	f043 0301 	orr.w	r3, r3, #1
 8041bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8041bb8:	4b0e      	ldr	r3, [pc, #56]	; (8041bf4 <HAL_UART_MspInit+0x12c>)
 8041bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041bbc:	f003 0301 	and.w	r3, r3, #1
 8041bc0:	60bb      	str	r3, [r7, #8]
 8041bc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8041bc4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8041bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041bca:	2302      	movs	r3, #2
 8041bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041bce:	2300      	movs	r3, #0
 8041bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041bd2:	2303      	movs	r3, #3
 8041bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8041bd6:	2307      	movs	r3, #7
 8041bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041bda:	f107 031c 	add.w	r3, r7, #28
 8041bde:	4619      	mov	r1, r3
 8041be0:	4808      	ldr	r0, [pc, #32]	; (8041c04 <HAL_UART_MspInit+0x13c>)
 8041be2:	f002 fe1f 	bl	8044824 <HAL_GPIO_Init>
}
 8041be6:	bf00      	nop
 8041be8:	3730      	adds	r7, #48	; 0x30
 8041bea:	46bd      	mov	sp, r7
 8041bec:	bd80      	pop	{r7, pc}
 8041bee:	bf00      	nop
 8041bf0:	40005000 	.word	0x40005000
 8041bf4:	40023800 	.word	0x40023800
 8041bf8:	40020800 	.word	0x40020800
 8041bfc:	40020c00 	.word	0x40020c00
 8041c00:	40011000 	.word	0x40011000
 8041c04:	40020000 	.word	0x40020000

08041c08 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8041c08:	b580      	push	{r7, lr}
 8041c0a:	b086      	sub	sp, #24
 8041c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8041c0e:	1d3b      	adds	r3, r7, #4
 8041c10:	2200      	movs	r2, #0
 8041c12:	601a      	str	r2, [r3, #0]
 8041c14:	605a      	str	r2, [r3, #4]
 8041c16:	609a      	str	r2, [r3, #8]
 8041c18:	60da      	str	r2, [r3, #12]
 8041c1a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8041c1c:	4b3b      	ldr	r3, [pc, #236]	; (8041d0c <HAL_FMC_MspInit+0x104>)
 8041c1e:	681b      	ldr	r3, [r3, #0]
 8041c20:	2b00      	cmp	r3, #0
 8041c22:	d16f      	bne.n	8041d04 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8041c24:	4b39      	ldr	r3, [pc, #228]	; (8041d0c <HAL_FMC_MspInit+0x104>)
 8041c26:	2201      	movs	r2, #1
 8041c28:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8041c2a:	2300      	movs	r3, #0
 8041c2c:	603b      	str	r3, [r7, #0]
 8041c2e:	4b38      	ldr	r3, [pc, #224]	; (8041d10 <HAL_FMC_MspInit+0x108>)
 8041c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041c32:	4a37      	ldr	r2, [pc, #220]	; (8041d10 <HAL_FMC_MspInit+0x108>)
 8041c34:	f043 0301 	orr.w	r3, r3, #1
 8041c38:	6393      	str	r3, [r2, #56]	; 0x38
 8041c3a:	4b35      	ldr	r3, [pc, #212]	; (8041d10 <HAL_FMC_MspInit+0x108>)
 8041c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041c3e:	f003 0301 	and.w	r3, r3, #1
 8041c42:	603b      	str	r3, [r7, #0]
 8041c44:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8041c46:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8041c4a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041c4c:	2302      	movs	r3, #2
 8041c4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041c50:	2300      	movs	r3, #0
 8041c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041c54:	2303      	movs	r3, #3
 8041c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041c58:	230c      	movs	r3, #12
 8041c5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8041c5c:	1d3b      	adds	r3, r7, #4
 8041c5e:	4619      	mov	r1, r3
 8041c60:	482c      	ldr	r0, [pc, #176]	; (8041d14 <HAL_FMC_MspInit+0x10c>)
 8041c62:	f002 fddf 	bl	8044824 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8041c66:	2301      	movs	r3, #1
 8041c68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041c6a:	2302      	movs	r3, #2
 8041c6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041c6e:	2300      	movs	r3, #0
 8041c70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041c72:	2303      	movs	r3, #3
 8041c74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041c76:	230c      	movs	r3, #12
 8041c78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8041c7a:	1d3b      	adds	r3, r7, #4
 8041c7c:	4619      	mov	r1, r3
 8041c7e:	4826      	ldr	r0, [pc, #152]	; (8041d18 <HAL_FMC_MspInit+0x110>)
 8041c80:	f002 fdd0 	bl	8044824 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8041c84:	f248 1333 	movw	r3, #33075	; 0x8133
 8041c88:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041c8a:	2302      	movs	r3, #2
 8041c8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041c8e:	2300      	movs	r3, #0
 8041c90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041c92:	2303      	movs	r3, #3
 8041c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041c96:	230c      	movs	r3, #12
 8041c98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8041c9a:	1d3b      	adds	r3, r7, #4
 8041c9c:	4619      	mov	r1, r3
 8041c9e:	481f      	ldr	r0, [pc, #124]	; (8041d1c <HAL_FMC_MspInit+0x114>)
 8041ca0:	f002 fdc0 	bl	8044824 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8041ca4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8041ca8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041caa:	2302      	movs	r3, #2
 8041cac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041cae:	2300      	movs	r3, #0
 8041cb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041cb2:	2303      	movs	r3, #3
 8041cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041cb6:	230c      	movs	r3, #12
 8041cb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8041cba:	1d3b      	adds	r3, r7, #4
 8041cbc:	4619      	mov	r1, r3
 8041cbe:	4818      	ldr	r0, [pc, #96]	; (8041d20 <HAL_FMC_MspInit+0x118>)
 8041cc0:	f002 fdb0 	bl	8044824 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8041cc4:	f24c 7303 	movw	r3, #50947	; 0xc703
 8041cc8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041cca:	2302      	movs	r3, #2
 8041ccc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041cce:	2300      	movs	r3, #0
 8041cd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041cd2:	2303      	movs	r3, #3
 8041cd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041cd6:	230c      	movs	r3, #12
 8041cd8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8041cda:	1d3b      	adds	r3, r7, #4
 8041cdc:	4619      	mov	r1, r3
 8041cde:	4811      	ldr	r0, [pc, #68]	; (8041d24 <HAL_FMC_MspInit+0x11c>)
 8041ce0:	f002 fda0 	bl	8044824 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8041ce4:	2360      	movs	r3, #96	; 0x60
 8041ce6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041ce8:	2302      	movs	r3, #2
 8041cea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041cec:	2300      	movs	r3, #0
 8041cee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041cf0:	2303      	movs	r3, #3
 8041cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041cf4:	230c      	movs	r3, #12
 8041cf6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8041cf8:	1d3b      	adds	r3, r7, #4
 8041cfa:	4619      	mov	r1, r3
 8041cfc:	480a      	ldr	r0, [pc, #40]	; (8041d28 <HAL_FMC_MspInit+0x120>)
 8041cfe:	f002 fd91 	bl	8044824 <HAL_GPIO_Init>
 8041d02:	e000      	b.n	8041d06 <HAL_FMC_MspInit+0xfe>
    return;
 8041d04:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8041d06:	3718      	adds	r7, #24
 8041d08:	46bd      	mov	sp, r7
 8041d0a:	bd80      	pop	{r7, pc}
 8041d0c:	2000081c 	.word	0x2000081c
 8041d10:	40023800 	.word	0x40023800
 8041d14:	40021400 	.word	0x40021400
 8041d18:	40020800 	.word	0x40020800
 8041d1c:	40021800 	.word	0x40021800
 8041d20:	40021000 	.word	0x40021000
 8041d24:	40020c00 	.word	0x40020c00
 8041d28:	40020400 	.word	0x40020400

08041d2c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8041d2c:	b580      	push	{r7, lr}
 8041d2e:	b082      	sub	sp, #8
 8041d30:	af00      	add	r7, sp, #0
 8041d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8041d34:	f7ff ff68 	bl	8041c08 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8041d38:	bf00      	nop
 8041d3a:	3708      	adds	r7, #8
 8041d3c:	46bd      	mov	sp, r7
 8041d3e:	bd80      	pop	{r7, pc}

08041d40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8041d40:	b580      	push	{r7, lr}
 8041d42:	b08e      	sub	sp, #56	; 0x38
 8041d44:	af00      	add	r7, sp, #0
 8041d46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8041d48:	2300      	movs	r3, #0
 8041d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8041d4c:	2300      	movs	r3, #0
 8041d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8041d50:	2300      	movs	r3, #0
 8041d52:	60fb      	str	r3, [r7, #12]
 8041d54:	4b33      	ldr	r3, [pc, #204]	; (8041e24 <HAL_InitTick+0xe4>)
 8041d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041d58:	4a32      	ldr	r2, [pc, #200]	; (8041e24 <HAL_InitTick+0xe4>)
 8041d5a:	f043 0310 	orr.w	r3, r3, #16
 8041d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8041d60:	4b30      	ldr	r3, [pc, #192]	; (8041e24 <HAL_InitTick+0xe4>)
 8041d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041d64:	f003 0310 	and.w	r3, r3, #16
 8041d68:	60fb      	str	r3, [r7, #12]
 8041d6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8041d6c:	f107 0210 	add.w	r2, r7, #16
 8041d70:	f107 0314 	add.w	r3, r7, #20
 8041d74:	4611      	mov	r1, r2
 8041d76:	4618      	mov	r0, r3
 8041d78:	f005 feb0 	bl	8047adc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8041d7c:	6a3b      	ldr	r3, [r7, #32]
 8041d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8041d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041d82:	2b00      	cmp	r3, #0
 8041d84:	d103      	bne.n	8041d8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8041d86:	f005 fe81 	bl	8047a8c <HAL_RCC_GetPCLK1Freq>
 8041d8a:	6378      	str	r0, [r7, #52]	; 0x34
 8041d8c:	e004      	b.n	8041d98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8041d8e:	f005 fe7d 	bl	8047a8c <HAL_RCC_GetPCLK1Freq>
 8041d92:	4603      	mov	r3, r0
 8041d94:	005b      	lsls	r3, r3, #1
 8041d96:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8041d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041d9a:	4a23      	ldr	r2, [pc, #140]	; (8041e28 <HAL_InitTick+0xe8>)
 8041d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8041da0:	0c9b      	lsrs	r3, r3, #18
 8041da2:	3b01      	subs	r3, #1
 8041da4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8041da6:	4b21      	ldr	r3, [pc, #132]	; (8041e2c <HAL_InitTick+0xec>)
 8041da8:	4a21      	ldr	r2, [pc, #132]	; (8041e30 <HAL_InitTick+0xf0>)
 8041daa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8041dac:	4b1f      	ldr	r3, [pc, #124]	; (8041e2c <HAL_InitTick+0xec>)
 8041dae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8041db2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8041db4:	4a1d      	ldr	r2, [pc, #116]	; (8041e2c <HAL_InitTick+0xec>)
 8041db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041db8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8041dba:	4b1c      	ldr	r3, [pc, #112]	; (8041e2c <HAL_InitTick+0xec>)
 8041dbc:	2200      	movs	r2, #0
 8041dbe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8041dc0:	4b1a      	ldr	r3, [pc, #104]	; (8041e2c <HAL_InitTick+0xec>)
 8041dc2:	2200      	movs	r2, #0
 8041dc4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8041dc6:	4b19      	ldr	r3, [pc, #100]	; (8041e2c <HAL_InitTick+0xec>)
 8041dc8:	2200      	movs	r2, #0
 8041dca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8041dcc:	4817      	ldr	r0, [pc, #92]	; (8041e2c <HAL_InitTick+0xec>)
 8041dce:	f006 fee7 	bl	8048ba0 <HAL_TIM_Base_Init>
 8041dd2:	4603      	mov	r3, r0
 8041dd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8041dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8041ddc:	2b00      	cmp	r3, #0
 8041dde:	d11b      	bne.n	8041e18 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8041de0:	4812      	ldr	r0, [pc, #72]	; (8041e2c <HAL_InitTick+0xec>)
 8041de2:	f006 ff2d 	bl	8048c40 <HAL_TIM_Base_Start_IT>
 8041de6:	4603      	mov	r3, r0
 8041de8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8041dec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8041df0:	2b00      	cmp	r3, #0
 8041df2:	d111      	bne.n	8041e18 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8041df4:	2036      	movs	r0, #54	; 0x36
 8041df6:	f001 fc8b 	bl	8043710 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8041dfa:	687b      	ldr	r3, [r7, #4]
 8041dfc:	2b0f      	cmp	r3, #15
 8041dfe:	d808      	bhi.n	8041e12 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8041e00:	2200      	movs	r2, #0
 8041e02:	6879      	ldr	r1, [r7, #4]
 8041e04:	2036      	movs	r0, #54	; 0x36
 8041e06:	f001 fc67 	bl	80436d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8041e0a:	4a0a      	ldr	r2, [pc, #40]	; (8041e34 <HAL_InitTick+0xf4>)
 8041e0c:	687b      	ldr	r3, [r7, #4]
 8041e0e:	6013      	str	r3, [r2, #0]
 8041e10:	e002      	b.n	8041e18 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8041e12:	2301      	movs	r3, #1
 8041e14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8041e18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8041e1c:	4618      	mov	r0, r3
 8041e1e:	3738      	adds	r7, #56	; 0x38
 8041e20:	46bd      	mov	sp, r7
 8041e22:	bd80      	pop	{r7, pc}
 8041e24:	40023800 	.word	0x40023800
 8041e28:	431bde83 	.word	0x431bde83
 8041e2c:	20000820 	.word	0x20000820
 8041e30:	40001000 	.word	0x40001000
 8041e34:	20000054 	.word	0x20000054

08041e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8041e38:	b480      	push	{r7}
 8041e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8041e3c:	e7fe      	b.n	8041e3c <NMI_Handler+0x4>

08041e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8041e3e:	b480      	push	{r7}
 8041e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8041e42:	e7fe      	b.n	8041e42 <HardFault_Handler+0x4>

08041e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8041e44:	b480      	push	{r7}
 8041e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8041e48:	e7fe      	b.n	8041e48 <MemManage_Handler+0x4>

08041e4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8041e4a:	b480      	push	{r7}
 8041e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8041e4e:	e7fe      	b.n	8041e4e <BusFault_Handler+0x4>

08041e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8041e50:	b480      	push	{r7}
 8041e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8041e54:	e7fe      	b.n	8041e54 <UsageFault_Handler+0x4>

08041e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8041e56:	b480      	push	{r7}
 8041e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8041e5a:	bf00      	nop
 8041e5c:	46bd      	mov	sp, r7
 8041e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e62:	4770      	bx	lr

08041e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8041e64:	b480      	push	{r7}
 8041e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8041e68:	bf00      	nop
 8041e6a:	46bd      	mov	sp, r7
 8041e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e70:	4770      	bx	lr

08041e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8041e72:	b480      	push	{r7}
 8041e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8041e76:	bf00      	nop
 8041e78:	46bd      	mov	sp, r7
 8041e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e7e:	4770      	bx	lr

08041e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8041e80:	b480      	push	{r7}
 8041e82:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8041e84:	bf00      	nop
 8041e86:	46bd      	mov	sp, r7
 8041e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e8c:	4770      	bx	lr

08041e8e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8041e8e:	b580      	push	{r7, lr}
 8041e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8041e92:	2001      	movs	r0, #1
 8041e94:	f002 ff98 	bl	8044dc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8041e98:	bf00      	nop
 8041e9a:	bd80      	pop	{r7, pc}

08041e9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8041e9c:	b580      	push	{r7, lr}
 8041e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8041ea0:	4802      	ldr	r0, [pc, #8]	; (8041eac <TIM6_DAC_IRQHandler+0x10>)
 8041ea2:	f006 ff3d 	bl	8048d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8041ea6:	bf00      	nop
 8041ea8:	bd80      	pop	{r7, pc}
 8041eaa:	bf00      	nop
 8041eac:	20000820 	.word	0x20000820

08041eb0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8041eb0:	b580      	push	{r7, lr}
 8041eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8041eb4:	4802      	ldr	r0, [pc, #8]	; (8041ec0 <OTG_HS_IRQHandler+0x10>)
 8041eb6:	f003 fa09 	bl	80452cc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8041eba:	bf00      	nop
 8041ebc:	bd80      	pop	{r7, pc}
 8041ebe:	bf00      	nop
 8041ec0:	20000ec0 	.word	0x20000ec0

08041ec4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8041ec4:	b580      	push	{r7, lr}
 8041ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8041ec8:	4802      	ldr	r0, [pc, #8]	; (8041ed4 <LTDC_IRQHandler+0x10>)
 8041eca:	f004 fe2f 	bl	8046b2c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8041ece:	bf00      	nop
 8041ed0:	bd80      	pop	{r7, pc}
 8041ed2:	bf00      	nop
 8041ed4:	20000198 	.word	0x20000198

08041ed8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8041ed8:	b580      	push	{r7, lr}
 8041eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8041edc:	4802      	ldr	r0, [pc, #8]	; (8041ee8 <DMA2D_IRQHandler+0x10>)
 8041ede:	f001 ff5c 	bl	8043d9a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8041ee2:	bf00      	nop
 8041ee4:	bd80      	pop	{r7, pc}
 8041ee6:	bf00      	nop
 8041ee8:	20000104 	.word	0x20000104

08041eec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8041eec:	b480      	push	{r7}
 8041eee:	b083      	sub	sp, #12
 8041ef0:	af00      	add	r7, sp, #0
 8041ef2:	4603      	mov	r3, r0
 8041ef4:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8041ef6:	88fb      	ldrh	r3, [r7, #6]
 8041ef8:	2b01      	cmp	r3, #1
 8041efa:	d102      	bne.n	8041f02 <HAL_GPIO_EXTI_Callback+0x16>

	case B1_Pin: //Blue Button Interrupt
		ota_update_request = true;
 8041efc:	4b04      	ldr	r3, [pc, #16]	; (8041f10 <HAL_GPIO_EXTI_Callback+0x24>)
 8041efe:	2201      	movs	r2, #1
 8041f00:	701a      	strb	r2, [r3, #0]

	}
}
 8041f02:	bf00      	nop
 8041f04:	370c      	adds	r7, #12
 8041f06:	46bd      	mov	sp, r7
 8041f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f0c:	4770      	bx	lr
 8041f0e:	bf00      	nop
 8041f10:	20000400 	.word	0x20000400

08041f14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8041f14:	b580      	push	{r7, lr}
 8041f16:	b086      	sub	sp, #24
 8041f18:	af00      	add	r7, sp, #0
 8041f1a:	60f8      	str	r0, [r7, #12]
 8041f1c:	60b9      	str	r1, [r7, #8]
 8041f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041f20:	2300      	movs	r3, #0
 8041f22:	617b      	str	r3, [r7, #20]
 8041f24:	e00a      	b.n	8041f3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8041f26:	f3af 8000 	nop.w
 8041f2a:	4601      	mov	r1, r0
 8041f2c:	68bb      	ldr	r3, [r7, #8]
 8041f2e:	1c5a      	adds	r2, r3, #1
 8041f30:	60ba      	str	r2, [r7, #8]
 8041f32:	b2ca      	uxtb	r2, r1
 8041f34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041f36:	697b      	ldr	r3, [r7, #20]
 8041f38:	3301      	adds	r3, #1
 8041f3a:	617b      	str	r3, [r7, #20]
 8041f3c:	697a      	ldr	r2, [r7, #20]
 8041f3e:	687b      	ldr	r3, [r7, #4]
 8041f40:	429a      	cmp	r2, r3
 8041f42:	dbf0      	blt.n	8041f26 <_read+0x12>
  }

  return len;
 8041f44:	687b      	ldr	r3, [r7, #4]
}
 8041f46:	4618      	mov	r0, r3
 8041f48:	3718      	adds	r7, #24
 8041f4a:	46bd      	mov	sp, r7
 8041f4c:	bd80      	pop	{r7, pc}

08041f4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8041f4e:	b580      	push	{r7, lr}
 8041f50:	b086      	sub	sp, #24
 8041f52:	af00      	add	r7, sp, #0
 8041f54:	60f8      	str	r0, [r7, #12]
 8041f56:	60b9      	str	r1, [r7, #8]
 8041f58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041f5a:	2300      	movs	r3, #0
 8041f5c:	617b      	str	r3, [r7, #20]
 8041f5e:	e009      	b.n	8041f74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8041f60:	68bb      	ldr	r3, [r7, #8]
 8041f62:	1c5a      	adds	r2, r3, #1
 8041f64:	60ba      	str	r2, [r7, #8]
 8041f66:	781b      	ldrb	r3, [r3, #0]
 8041f68:	4618      	mov	r0, r3
 8041f6a:	f7fe ffaf 	bl	8040ecc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041f6e:	697b      	ldr	r3, [r7, #20]
 8041f70:	3301      	adds	r3, #1
 8041f72:	617b      	str	r3, [r7, #20]
 8041f74:	697a      	ldr	r2, [r7, #20]
 8041f76:	687b      	ldr	r3, [r7, #4]
 8041f78:	429a      	cmp	r2, r3
 8041f7a:	dbf1      	blt.n	8041f60 <_write+0x12>
  }
  return len;
 8041f7c:	687b      	ldr	r3, [r7, #4]
}
 8041f7e:	4618      	mov	r0, r3
 8041f80:	3718      	adds	r7, #24
 8041f82:	46bd      	mov	sp, r7
 8041f84:	bd80      	pop	{r7, pc}

08041f86 <_close>:

int _close(int file)
{
 8041f86:	b480      	push	{r7}
 8041f88:	b083      	sub	sp, #12
 8041f8a:	af00      	add	r7, sp, #0
 8041f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8041f8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8041f92:	4618      	mov	r0, r3
 8041f94:	370c      	adds	r7, #12
 8041f96:	46bd      	mov	sp, r7
 8041f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f9c:	4770      	bx	lr

08041f9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8041f9e:	b480      	push	{r7}
 8041fa0:	b083      	sub	sp, #12
 8041fa2:	af00      	add	r7, sp, #0
 8041fa4:	6078      	str	r0, [r7, #4]
 8041fa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8041fa8:	683b      	ldr	r3, [r7, #0]
 8041faa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8041fae:	605a      	str	r2, [r3, #4]
  return 0;
 8041fb0:	2300      	movs	r3, #0
}
 8041fb2:	4618      	mov	r0, r3
 8041fb4:	370c      	adds	r7, #12
 8041fb6:	46bd      	mov	sp, r7
 8041fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041fbc:	4770      	bx	lr

08041fbe <_isatty>:

int _isatty(int file)
{
 8041fbe:	b480      	push	{r7}
 8041fc0:	b083      	sub	sp, #12
 8041fc2:	af00      	add	r7, sp, #0
 8041fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8041fc6:	2301      	movs	r3, #1
}
 8041fc8:	4618      	mov	r0, r3
 8041fca:	370c      	adds	r7, #12
 8041fcc:	46bd      	mov	sp, r7
 8041fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041fd2:	4770      	bx	lr

08041fd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8041fd4:	b480      	push	{r7}
 8041fd6:	b085      	sub	sp, #20
 8041fd8:	af00      	add	r7, sp, #0
 8041fda:	60f8      	str	r0, [r7, #12]
 8041fdc:	60b9      	str	r1, [r7, #8]
 8041fde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8041fe0:	2300      	movs	r3, #0
}
 8041fe2:	4618      	mov	r0, r3
 8041fe4:	3714      	adds	r7, #20
 8041fe6:	46bd      	mov	sp, r7
 8041fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041fec:	4770      	bx	lr
	...

08041ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8041ff0:	b580      	push	{r7, lr}
 8041ff2:	b086      	sub	sp, #24
 8041ff4:	af00      	add	r7, sp, #0
 8041ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8041ff8:	4a14      	ldr	r2, [pc, #80]	; (804204c <_sbrk+0x5c>)
 8041ffa:	4b15      	ldr	r3, [pc, #84]	; (8042050 <_sbrk+0x60>)
 8041ffc:	1ad3      	subs	r3, r2, r3
 8041ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8042000:	697b      	ldr	r3, [r7, #20]
 8042002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8042004:	4b13      	ldr	r3, [pc, #76]	; (8042054 <_sbrk+0x64>)
 8042006:	681b      	ldr	r3, [r3, #0]
 8042008:	2b00      	cmp	r3, #0
 804200a:	d102      	bne.n	8042012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 804200c:	4b11      	ldr	r3, [pc, #68]	; (8042054 <_sbrk+0x64>)
 804200e:	4a12      	ldr	r2, [pc, #72]	; (8042058 <_sbrk+0x68>)
 8042010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8042012:	4b10      	ldr	r3, [pc, #64]	; (8042054 <_sbrk+0x64>)
 8042014:	681a      	ldr	r2, [r3, #0]
 8042016:	687b      	ldr	r3, [r7, #4]
 8042018:	4413      	add	r3, r2
 804201a:	693a      	ldr	r2, [r7, #16]
 804201c:	429a      	cmp	r2, r3
 804201e:	d207      	bcs.n	8042030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8042020:	f00b faa0 	bl	804d564 <__errno>
 8042024:	4603      	mov	r3, r0
 8042026:	220c      	movs	r2, #12
 8042028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 804202a:	f04f 33ff 	mov.w	r3, #4294967295
 804202e:	e009      	b.n	8042044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8042030:	4b08      	ldr	r3, [pc, #32]	; (8042054 <_sbrk+0x64>)
 8042032:	681b      	ldr	r3, [r3, #0]
 8042034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8042036:	4b07      	ldr	r3, [pc, #28]	; (8042054 <_sbrk+0x64>)
 8042038:	681a      	ldr	r2, [r3, #0]
 804203a:	687b      	ldr	r3, [r7, #4]
 804203c:	4413      	add	r3, r2
 804203e:	4a05      	ldr	r2, [pc, #20]	; (8042054 <_sbrk+0x64>)
 8042040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8042042:	68fb      	ldr	r3, [r7, #12]
}
 8042044:	4618      	mov	r0, r3
 8042046:	3718      	adds	r7, #24
 8042048:	46bd      	mov	sp, r7
 804204a:	bd80      	pop	{r7, pc}
 804204c:	20030000 	.word	0x20030000
 8042050:	00000400 	.word	0x00000400
 8042054:	20000868 	.word	0x20000868
 8042058:	200011d8 	.word	0x200011d8

0804205c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 804205c:	b480      	push	{r7}
 804205e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8042060:	4b07      	ldr	r3, [pc, #28]	; (8042080 <SystemInit+0x24>)
 8042062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042066:	4a06      	ldr	r2, [pc, #24]	; (8042080 <SystemInit+0x24>)
 8042068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 804206c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8042070:	4b03      	ldr	r3, [pc, #12]	; (8042080 <SystemInit+0x24>)
 8042072:	4a04      	ldr	r2, [pc, #16]	; (8042084 <SystemInit+0x28>)
 8042074:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8042076:	bf00      	nop
 8042078:	46bd      	mov	sp, r7
 804207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804207e:	4770      	bx	lr
 8042080:	e000ed00 	.word	0xe000ed00
 8042084:	08040000 	.word	0x08040000

08042088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8042088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80420c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 804208c:	480d      	ldr	r0, [pc, #52]	; (80420c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 804208e:	490e      	ldr	r1, [pc, #56]	; (80420c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8042090:	4a0e      	ldr	r2, [pc, #56]	; (80420cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8042092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8042094:	e002      	b.n	804209c <LoopCopyDataInit>

08042096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8042096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8042098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 804209a:	3304      	adds	r3, #4

0804209c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 804209c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 804209e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80420a0:	d3f9      	bcc.n	8042096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80420a2:	4a0b      	ldr	r2, [pc, #44]	; (80420d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80420a4:	4c0b      	ldr	r4, [pc, #44]	; (80420d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80420a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80420a8:	e001      	b.n	80420ae <LoopFillZerobss>

080420aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80420aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80420ac:	3204      	adds	r2, #4

080420ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80420ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80420b0:	d3fb      	bcc.n	80420aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80420b2:	f7ff ffd3 	bl	804205c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80420b6:	f00b fa5b 	bl	804d570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80420ba:	f7fe fa6b 	bl	8040594 <main>
  bx  lr    
 80420be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80420c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80420c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80420c8:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80420cc:	080510b4 	.word	0x080510b4
  ldr r2, =_sbss
 80420d0:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80420d4:	200011d4 	.word	0x200011d4

080420d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80420d8:	e7fe      	b.n	80420d8 <ADC_IRQHandler>

080420da <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80420da:	b580      	push	{r7, lr}
 80420dc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80420de:	f000 fa5d 	bl	804259c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80420e2:	20ca      	movs	r0, #202	; 0xca
 80420e4:	f000 f95d 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80420e8:	20c3      	movs	r0, #195	; 0xc3
 80420ea:	f000 f967 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80420ee:	2008      	movs	r0, #8
 80420f0:	f000 f964 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80420f4:	2050      	movs	r0, #80	; 0x50
 80420f6:	f000 f961 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80420fa:	20cf      	movs	r0, #207	; 0xcf
 80420fc:	f000 f951 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8042100:	2000      	movs	r0, #0
 8042102:	f000 f95b 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8042106:	20c1      	movs	r0, #193	; 0xc1
 8042108:	f000 f958 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 804210c:	2030      	movs	r0, #48	; 0x30
 804210e:	f000 f955 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8042112:	20ed      	movs	r0, #237	; 0xed
 8042114:	f000 f945 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8042118:	2064      	movs	r0, #100	; 0x64
 804211a:	f000 f94f 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 804211e:	2003      	movs	r0, #3
 8042120:	f000 f94c 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8042124:	2012      	movs	r0, #18
 8042126:	f000 f949 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 804212a:	2081      	movs	r0, #129	; 0x81
 804212c:	f000 f946 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8042130:	20e8      	movs	r0, #232	; 0xe8
 8042132:	f000 f936 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8042136:	2085      	movs	r0, #133	; 0x85
 8042138:	f000 f940 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 804213c:	2000      	movs	r0, #0
 804213e:	f000 f93d 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8042142:	2078      	movs	r0, #120	; 0x78
 8042144:	f000 f93a 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8042148:	20cb      	movs	r0, #203	; 0xcb
 804214a:	f000 f92a 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 804214e:	2039      	movs	r0, #57	; 0x39
 8042150:	f000 f934 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8042154:	202c      	movs	r0, #44	; 0x2c
 8042156:	f000 f931 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 804215a:	2000      	movs	r0, #0
 804215c:	f000 f92e 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8042160:	2034      	movs	r0, #52	; 0x34
 8042162:	f000 f92b 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8042166:	2002      	movs	r0, #2
 8042168:	f000 f928 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 804216c:	20f7      	movs	r0, #247	; 0xf7
 804216e:	f000 f918 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8042172:	2020      	movs	r0, #32
 8042174:	f000 f922 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8042178:	20ea      	movs	r0, #234	; 0xea
 804217a:	f000 f912 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 804217e:	2000      	movs	r0, #0
 8042180:	f000 f91c 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8042184:	2000      	movs	r0, #0
 8042186:	f000 f919 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 804218a:	20b1      	movs	r0, #177	; 0xb1
 804218c:	f000 f909 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8042190:	2000      	movs	r0, #0
 8042192:	f000 f913 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8042196:	201b      	movs	r0, #27
 8042198:	f000 f910 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 804219c:	20b6      	movs	r0, #182	; 0xb6
 804219e:	f000 f900 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80421a2:	200a      	movs	r0, #10
 80421a4:	f000 f90a 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80421a8:	20a2      	movs	r0, #162	; 0xa2
 80421aa:	f000 f907 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80421ae:	20c0      	movs	r0, #192	; 0xc0
 80421b0:	f000 f8f7 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80421b4:	2010      	movs	r0, #16
 80421b6:	f000 f901 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80421ba:	20c1      	movs	r0, #193	; 0xc1
 80421bc:	f000 f8f1 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80421c0:	2010      	movs	r0, #16
 80421c2:	f000 f8fb 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80421c6:	20c5      	movs	r0, #197	; 0xc5
 80421c8:	f000 f8eb 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80421cc:	2045      	movs	r0, #69	; 0x45
 80421ce:	f000 f8f5 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80421d2:	2015      	movs	r0, #21
 80421d4:	f000 f8f2 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80421d8:	20c7      	movs	r0, #199	; 0xc7
 80421da:	f000 f8e2 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80421de:	2090      	movs	r0, #144	; 0x90
 80421e0:	f000 f8ec 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80421e4:	2036      	movs	r0, #54	; 0x36
 80421e6:	f000 f8dc 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80421ea:	20c8      	movs	r0, #200	; 0xc8
 80421ec:	f000 f8e6 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80421f0:	20f2      	movs	r0, #242	; 0xf2
 80421f2:	f000 f8d6 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80421f6:	2000      	movs	r0, #0
 80421f8:	f000 f8e0 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80421fc:	20b0      	movs	r0, #176	; 0xb0
 80421fe:	f000 f8d0 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8042202:	20c2      	movs	r0, #194	; 0xc2
 8042204:	f000 f8da 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8042208:	20b6      	movs	r0, #182	; 0xb6
 804220a:	f000 f8ca 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 804220e:	200a      	movs	r0, #10
 8042210:	f000 f8d4 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8042214:	20a7      	movs	r0, #167	; 0xa7
 8042216:	f000 f8d1 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 804221a:	2027      	movs	r0, #39	; 0x27
 804221c:	f000 f8ce 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8042220:	2004      	movs	r0, #4
 8042222:	f000 f8cb 	bl	80423bc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8042226:	202a      	movs	r0, #42	; 0x2a
 8042228:	f000 f8bb 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 804222c:	2000      	movs	r0, #0
 804222e:	f000 f8c5 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8042232:	2000      	movs	r0, #0
 8042234:	f000 f8c2 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8042238:	2000      	movs	r0, #0
 804223a:	f000 f8bf 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 804223e:	20ef      	movs	r0, #239	; 0xef
 8042240:	f000 f8bc 	bl	80423bc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8042244:	202b      	movs	r0, #43	; 0x2b
 8042246:	f000 f8ac 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 804224a:	2000      	movs	r0, #0
 804224c:	f000 f8b6 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8042250:	2000      	movs	r0, #0
 8042252:	f000 f8b3 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8042256:	2001      	movs	r0, #1
 8042258:	f000 f8b0 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 804225c:	203f      	movs	r0, #63	; 0x3f
 804225e:	f000 f8ad 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8042262:	20f6      	movs	r0, #246	; 0xf6
 8042264:	f000 f89d 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8042268:	2001      	movs	r0, #1
 804226a:	f000 f8a7 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 804226e:	2000      	movs	r0, #0
 8042270:	f000 f8a4 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8042274:	2006      	movs	r0, #6
 8042276:	f000 f8a1 	bl	80423bc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 804227a:	202c      	movs	r0, #44	; 0x2c
 804227c:	f000 f891 	bl	80423a2 <ili9341_WriteReg>
  LCD_Delay(200);
 8042280:	20c8      	movs	r0, #200	; 0xc8
 8042282:	f000 fa79 	bl	8042778 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8042286:	2026      	movs	r0, #38	; 0x26
 8042288:	f000 f88b 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 804228c:	2001      	movs	r0, #1
 804228e:	f000 f895 	bl	80423bc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8042292:	20e0      	movs	r0, #224	; 0xe0
 8042294:	f000 f885 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8042298:	200f      	movs	r0, #15
 804229a:	f000 f88f 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 804229e:	2029      	movs	r0, #41	; 0x29
 80422a0:	f000 f88c 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80422a4:	2024      	movs	r0, #36	; 0x24
 80422a6:	f000 f889 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80422aa:	200c      	movs	r0, #12
 80422ac:	f000 f886 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80422b0:	200e      	movs	r0, #14
 80422b2:	f000 f883 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80422b6:	2009      	movs	r0, #9
 80422b8:	f000 f880 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80422bc:	204e      	movs	r0, #78	; 0x4e
 80422be:	f000 f87d 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80422c2:	2078      	movs	r0, #120	; 0x78
 80422c4:	f000 f87a 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80422c8:	203c      	movs	r0, #60	; 0x3c
 80422ca:	f000 f877 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80422ce:	2009      	movs	r0, #9
 80422d0:	f000 f874 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80422d4:	2013      	movs	r0, #19
 80422d6:	f000 f871 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80422da:	2005      	movs	r0, #5
 80422dc:	f000 f86e 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80422e0:	2017      	movs	r0, #23
 80422e2:	f000 f86b 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80422e6:	2011      	movs	r0, #17
 80422e8:	f000 f868 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80422ec:	2000      	movs	r0, #0
 80422ee:	f000 f865 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80422f2:	20e1      	movs	r0, #225	; 0xe1
 80422f4:	f000 f855 	bl	80423a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80422f8:	2000      	movs	r0, #0
 80422fa:	f000 f85f 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80422fe:	2016      	movs	r0, #22
 8042300:	f000 f85c 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8042304:	201b      	movs	r0, #27
 8042306:	f000 f859 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 804230a:	2004      	movs	r0, #4
 804230c:	f000 f856 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8042310:	2011      	movs	r0, #17
 8042312:	f000 f853 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8042316:	2007      	movs	r0, #7
 8042318:	f000 f850 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 804231c:	2031      	movs	r0, #49	; 0x31
 804231e:	f000 f84d 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8042322:	2033      	movs	r0, #51	; 0x33
 8042324:	f000 f84a 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8042328:	2042      	movs	r0, #66	; 0x42
 804232a:	f000 f847 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 804232e:	2005      	movs	r0, #5
 8042330:	f000 f844 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8042334:	200c      	movs	r0, #12
 8042336:	f000 f841 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 804233a:	200a      	movs	r0, #10
 804233c:	f000 f83e 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8042340:	2028      	movs	r0, #40	; 0x28
 8042342:	f000 f83b 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8042346:	202f      	movs	r0, #47	; 0x2f
 8042348:	f000 f838 	bl	80423bc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 804234c:	200f      	movs	r0, #15
 804234e:	f000 f835 	bl	80423bc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8042352:	2011      	movs	r0, #17
 8042354:	f000 f825 	bl	80423a2 <ili9341_WriteReg>
  LCD_Delay(200);
 8042358:	20c8      	movs	r0, #200	; 0xc8
 804235a:	f000 fa0d 	bl	8042778 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 804235e:	2029      	movs	r0, #41	; 0x29
 8042360:	f000 f81f 	bl	80423a2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8042364:	202c      	movs	r0, #44	; 0x2c
 8042366:	f000 f81c 	bl	80423a2 <ili9341_WriteReg>
}
 804236a:	bf00      	nop
 804236c:	bd80      	pop	{r7, pc}

0804236e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 804236e:	b580      	push	{r7, lr}
 8042370:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8042372:	f000 f913 	bl	804259c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8042376:	2103      	movs	r1, #3
 8042378:	20d3      	movs	r0, #211	; 0xd3
 804237a:	f000 f82c 	bl	80423d6 <ili9341_ReadData>
 804237e:	4603      	mov	r3, r0
 8042380:	b29b      	uxth	r3, r3
}
 8042382:	4618      	mov	r0, r3
 8042384:	bd80      	pop	{r7, pc}

08042386 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8042386:	b580      	push	{r7, lr}
 8042388:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 804238a:	2029      	movs	r0, #41	; 0x29
 804238c:	f000 f809 	bl	80423a2 <ili9341_WriteReg>
}
 8042390:	bf00      	nop
 8042392:	bd80      	pop	{r7, pc}

08042394 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8042394:	b580      	push	{r7, lr}
 8042396:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8042398:	2028      	movs	r0, #40	; 0x28
 804239a:	f000 f802 	bl	80423a2 <ili9341_WriteReg>
}
 804239e:	bf00      	nop
 80423a0:	bd80      	pop	{r7, pc}

080423a2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80423a2:	b580      	push	{r7, lr}
 80423a4:	b082      	sub	sp, #8
 80423a6:	af00      	add	r7, sp, #0
 80423a8:	4603      	mov	r3, r0
 80423aa:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80423ac:	79fb      	ldrb	r3, [r7, #7]
 80423ae:	4618      	mov	r0, r3
 80423b0:	f000 f98e 	bl	80426d0 <LCD_IO_WriteReg>
}
 80423b4:	bf00      	nop
 80423b6:	3708      	adds	r7, #8
 80423b8:	46bd      	mov	sp, r7
 80423ba:	bd80      	pop	{r7, pc}

080423bc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80423bc:	b580      	push	{r7, lr}
 80423be:	b082      	sub	sp, #8
 80423c0:	af00      	add	r7, sp, #0
 80423c2:	4603      	mov	r3, r0
 80423c4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80423c6:	88fb      	ldrh	r3, [r7, #6]
 80423c8:	4618      	mov	r0, r3
 80423ca:	f000 f95f 	bl	804268c <LCD_IO_WriteData>
}
 80423ce:	bf00      	nop
 80423d0:	3708      	adds	r7, #8
 80423d2:	46bd      	mov	sp, r7
 80423d4:	bd80      	pop	{r7, pc}

080423d6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80423d6:	b580      	push	{r7, lr}
 80423d8:	b082      	sub	sp, #8
 80423da:	af00      	add	r7, sp, #0
 80423dc:	4603      	mov	r3, r0
 80423de:	460a      	mov	r2, r1
 80423e0:	80fb      	strh	r3, [r7, #6]
 80423e2:	4613      	mov	r3, r2
 80423e4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80423e6:	797a      	ldrb	r2, [r7, #5]
 80423e8:	88fb      	ldrh	r3, [r7, #6]
 80423ea:	4611      	mov	r1, r2
 80423ec:	4618      	mov	r0, r3
 80423ee:	f000 f991 	bl	8042714 <LCD_IO_ReadData>
 80423f2:	4603      	mov	r3, r0
}
 80423f4:	4618      	mov	r0, r3
 80423f6:	3708      	adds	r7, #8
 80423f8:	46bd      	mov	sp, r7
 80423fa:	bd80      	pop	{r7, pc}

080423fc <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80423fc:	b480      	push	{r7}
 80423fe:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8042400:	23f0      	movs	r3, #240	; 0xf0
}
 8042402:	4618      	mov	r0, r3
 8042404:	46bd      	mov	sp, r7
 8042406:	f85d 7b04 	ldr.w	r7, [sp], #4
 804240a:	4770      	bx	lr

0804240c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 804240c:	b480      	push	{r7}
 804240e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8042410:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8042414:	4618      	mov	r0, r3
 8042416:	46bd      	mov	sp, r7
 8042418:	f85d 7b04 	ldr.w	r7, [sp], #4
 804241c:	4770      	bx	lr
	...

08042420 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8042420:	b580      	push	{r7, lr}
 8042422:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8042424:	4819      	ldr	r0, [pc, #100]	; (804248c <SPIx_Init+0x6c>)
 8042426:	f006 fa7c 	bl	8048922 <HAL_SPI_GetState>
 804242a:	4603      	mov	r3, r0
 804242c:	2b00      	cmp	r3, #0
 804242e:	d12b      	bne.n	8042488 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8042430:	4b16      	ldr	r3, [pc, #88]	; (804248c <SPIx_Init+0x6c>)
 8042432:	4a17      	ldr	r2, [pc, #92]	; (8042490 <SPIx_Init+0x70>)
 8042434:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8042436:	4b15      	ldr	r3, [pc, #84]	; (804248c <SPIx_Init+0x6c>)
 8042438:	2218      	movs	r2, #24
 804243a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 804243c:	4b13      	ldr	r3, [pc, #76]	; (804248c <SPIx_Init+0x6c>)
 804243e:	2200      	movs	r2, #0
 8042440:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8042442:	4b12      	ldr	r3, [pc, #72]	; (804248c <SPIx_Init+0x6c>)
 8042444:	2200      	movs	r2, #0
 8042446:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8042448:	4b10      	ldr	r3, [pc, #64]	; (804248c <SPIx_Init+0x6c>)
 804244a:	2200      	movs	r2, #0
 804244c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 804244e:	4b0f      	ldr	r3, [pc, #60]	; (804248c <SPIx_Init+0x6c>)
 8042450:	2200      	movs	r2, #0
 8042452:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8042454:	4b0d      	ldr	r3, [pc, #52]	; (804248c <SPIx_Init+0x6c>)
 8042456:	2207      	movs	r2, #7
 8042458:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 804245a:	4b0c      	ldr	r3, [pc, #48]	; (804248c <SPIx_Init+0x6c>)
 804245c:	2200      	movs	r2, #0
 804245e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8042460:	4b0a      	ldr	r3, [pc, #40]	; (804248c <SPIx_Init+0x6c>)
 8042462:	2200      	movs	r2, #0
 8042464:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8042466:	4b09      	ldr	r3, [pc, #36]	; (804248c <SPIx_Init+0x6c>)
 8042468:	f44f 7200 	mov.w	r2, #512	; 0x200
 804246c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 804246e:	4b07      	ldr	r3, [pc, #28]	; (804248c <SPIx_Init+0x6c>)
 8042470:	2200      	movs	r2, #0
 8042472:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8042474:	4b05      	ldr	r3, [pc, #20]	; (804248c <SPIx_Init+0x6c>)
 8042476:	f44f 7282 	mov.w	r2, #260	; 0x104
 804247a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 804247c:	4803      	ldr	r0, [pc, #12]	; (804248c <SPIx_Init+0x6c>)
 804247e:	f000 f853 	bl	8042528 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8042482:	4802      	ldr	r0, [pc, #8]	; (804248c <SPIx_Init+0x6c>)
 8042484:	f005 fdad 	bl	8047fe2 <HAL_SPI_Init>
  } 
}
 8042488:	bf00      	nop
 804248a:	bd80      	pop	{r7, pc}
 804248c:	2000086c 	.word	0x2000086c
 8042490:	40015000 	.word	0x40015000

08042494 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8042494:	b580      	push	{r7, lr}
 8042496:	b084      	sub	sp, #16
 8042498:	af00      	add	r7, sp, #0
 804249a:	4603      	mov	r3, r0
 804249c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 804249e:	2300      	movs	r3, #0
 80424a0:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80424a2:	79fb      	ldrb	r3, [r7, #7]
 80424a4:	b29a      	uxth	r2, r3
 80424a6:	4b09      	ldr	r3, [pc, #36]	; (80424cc <SPIx_Read+0x38>)
 80424a8:	681b      	ldr	r3, [r3, #0]
 80424aa:	f107 0108 	add.w	r1, r7, #8
 80424ae:	4808      	ldr	r0, [pc, #32]	; (80424d0 <SPIx_Read+0x3c>)
 80424b0:	f005 ff84 	bl	80483bc <HAL_SPI_Receive>
 80424b4:	4603      	mov	r3, r0
 80424b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80424b8:	7bfb      	ldrb	r3, [r7, #15]
 80424ba:	2b00      	cmp	r3, #0
 80424bc:	d001      	beq.n	80424c2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80424be:	f000 f827 	bl	8042510 <SPIx_Error>
  }
  
  return readvalue;
 80424c2:	68bb      	ldr	r3, [r7, #8]
}
 80424c4:	4618      	mov	r0, r3
 80424c6:	3710      	adds	r7, #16
 80424c8:	46bd      	mov	sp, r7
 80424ca:	bd80      	pop	{r7, pc}
 80424cc:	2000003c 	.word	0x2000003c
 80424d0:	2000086c 	.word	0x2000086c

080424d4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80424d4:	b580      	push	{r7, lr}
 80424d6:	b084      	sub	sp, #16
 80424d8:	af00      	add	r7, sp, #0
 80424da:	4603      	mov	r3, r0
 80424dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80424de:	2300      	movs	r3, #0
 80424e0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80424e2:	4b09      	ldr	r3, [pc, #36]	; (8042508 <SPIx_Write+0x34>)
 80424e4:	681b      	ldr	r3, [r3, #0]
 80424e6:	1db9      	adds	r1, r7, #6
 80424e8:	2201      	movs	r2, #1
 80424ea:	4808      	ldr	r0, [pc, #32]	; (804250c <SPIx_Write+0x38>)
 80424ec:	f005 fe2a 	bl	8048144 <HAL_SPI_Transmit>
 80424f0:	4603      	mov	r3, r0
 80424f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80424f4:	7bfb      	ldrb	r3, [r7, #15]
 80424f6:	2b00      	cmp	r3, #0
 80424f8:	d001      	beq.n	80424fe <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80424fa:	f000 f809 	bl	8042510 <SPIx_Error>
  }
}
 80424fe:	bf00      	nop
 8042500:	3710      	adds	r7, #16
 8042502:	46bd      	mov	sp, r7
 8042504:	bd80      	pop	{r7, pc}
 8042506:	bf00      	nop
 8042508:	2000003c 	.word	0x2000003c
 804250c:	2000086c 	.word	0x2000086c

08042510 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8042510:	b580      	push	{r7, lr}
 8042512:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8042514:	4803      	ldr	r0, [pc, #12]	; (8042524 <SPIx_Error+0x14>)
 8042516:	f005 fded 	bl	80480f4 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 804251a:	f7ff ff81 	bl	8042420 <SPIx_Init>
}
 804251e:	bf00      	nop
 8042520:	bd80      	pop	{r7, pc}
 8042522:	bf00      	nop
 8042524:	2000086c 	.word	0x2000086c

08042528 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8042528:	b580      	push	{r7, lr}
 804252a:	b08a      	sub	sp, #40	; 0x28
 804252c:	af00      	add	r7, sp, #0
 804252e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8042530:	2300      	movs	r3, #0
 8042532:	613b      	str	r3, [r7, #16]
 8042534:	4b17      	ldr	r3, [pc, #92]	; (8042594 <SPIx_MspInit+0x6c>)
 8042536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042538:	4a16      	ldr	r2, [pc, #88]	; (8042594 <SPIx_MspInit+0x6c>)
 804253a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804253e:	6453      	str	r3, [r2, #68]	; 0x44
 8042540:	4b14      	ldr	r3, [pc, #80]	; (8042594 <SPIx_MspInit+0x6c>)
 8042542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8042548:	613b      	str	r3, [r7, #16]
 804254a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 804254c:	2300      	movs	r3, #0
 804254e:	60fb      	str	r3, [r7, #12]
 8042550:	4b10      	ldr	r3, [pc, #64]	; (8042594 <SPIx_MspInit+0x6c>)
 8042552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042554:	4a0f      	ldr	r2, [pc, #60]	; (8042594 <SPIx_MspInit+0x6c>)
 8042556:	f043 0320 	orr.w	r3, r3, #32
 804255a:	6313      	str	r3, [r2, #48]	; 0x30
 804255c:	4b0d      	ldr	r3, [pc, #52]	; (8042594 <SPIx_MspInit+0x6c>)
 804255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042560:	f003 0320 	and.w	r3, r3, #32
 8042564:	60fb      	str	r3, [r7, #12]
 8042566:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8042568:	f44f 7360 	mov.w	r3, #896	; 0x380
 804256c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 804256e:	2302      	movs	r3, #2
 8042570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8042572:	2302      	movs	r3, #2
 8042574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8042576:	2301      	movs	r3, #1
 8042578:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 804257a:	2305      	movs	r3, #5
 804257c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 804257e:	f107 0314 	add.w	r3, r7, #20
 8042582:	4619      	mov	r1, r3
 8042584:	4804      	ldr	r0, [pc, #16]	; (8042598 <SPIx_MspInit+0x70>)
 8042586:	f002 f94d 	bl	8044824 <HAL_GPIO_Init>
}
 804258a:	bf00      	nop
 804258c:	3728      	adds	r7, #40	; 0x28
 804258e:	46bd      	mov	sp, r7
 8042590:	bd80      	pop	{r7, pc}
 8042592:	bf00      	nop
 8042594:	40023800 	.word	0x40023800
 8042598:	40021400 	.word	0x40021400

0804259c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 804259c:	b580      	push	{r7, lr}
 804259e:	b088      	sub	sp, #32
 80425a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80425a2:	4b36      	ldr	r3, [pc, #216]	; (804267c <LCD_IO_Init+0xe0>)
 80425a4:	781b      	ldrb	r3, [r3, #0]
 80425a6:	2b00      	cmp	r3, #0
 80425a8:	d164      	bne.n	8042674 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80425aa:	4b34      	ldr	r3, [pc, #208]	; (804267c <LCD_IO_Init+0xe0>)
 80425ac:	2201      	movs	r2, #1
 80425ae:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80425b0:	2300      	movs	r3, #0
 80425b2:	60bb      	str	r3, [r7, #8]
 80425b4:	4b32      	ldr	r3, [pc, #200]	; (8042680 <LCD_IO_Init+0xe4>)
 80425b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80425b8:	4a31      	ldr	r2, [pc, #196]	; (8042680 <LCD_IO_Init+0xe4>)
 80425ba:	f043 0308 	orr.w	r3, r3, #8
 80425be:	6313      	str	r3, [r2, #48]	; 0x30
 80425c0:	4b2f      	ldr	r3, [pc, #188]	; (8042680 <LCD_IO_Init+0xe4>)
 80425c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80425c4:	f003 0308 	and.w	r3, r3, #8
 80425c8:	60bb      	str	r3, [r7, #8]
 80425ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80425cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80425d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80425d2:	2301      	movs	r3, #1
 80425d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80425d6:	2300      	movs	r3, #0
 80425d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80425da:	2302      	movs	r3, #2
 80425dc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80425de:	f107 030c 	add.w	r3, r7, #12
 80425e2:	4619      	mov	r1, r3
 80425e4:	4827      	ldr	r0, [pc, #156]	; (8042684 <LCD_IO_Init+0xe8>)
 80425e6:	f002 f91d 	bl	8044824 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80425ea:	2300      	movs	r3, #0
 80425ec:	607b      	str	r3, [r7, #4]
 80425ee:	4b24      	ldr	r3, [pc, #144]	; (8042680 <LCD_IO_Init+0xe4>)
 80425f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80425f2:	4a23      	ldr	r2, [pc, #140]	; (8042680 <LCD_IO_Init+0xe4>)
 80425f4:	f043 0308 	orr.w	r3, r3, #8
 80425f8:	6313      	str	r3, [r2, #48]	; 0x30
 80425fa:	4b21      	ldr	r3, [pc, #132]	; (8042680 <LCD_IO_Init+0xe4>)
 80425fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80425fe:	f003 0308 	and.w	r3, r3, #8
 8042602:	607b      	str	r3, [r7, #4]
 8042604:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8042606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804260a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 804260c:	2301      	movs	r3, #1
 804260e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8042610:	2300      	movs	r3, #0
 8042612:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8042614:	2302      	movs	r3, #2
 8042616:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8042618:	f107 030c 	add.w	r3, r7, #12
 804261c:	4619      	mov	r1, r3
 804261e:	4819      	ldr	r0, [pc, #100]	; (8042684 <LCD_IO_Init+0xe8>)
 8042620:	f002 f900 	bl	8044824 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8042624:	2300      	movs	r3, #0
 8042626:	603b      	str	r3, [r7, #0]
 8042628:	4b15      	ldr	r3, [pc, #84]	; (8042680 <LCD_IO_Init+0xe4>)
 804262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804262c:	4a14      	ldr	r2, [pc, #80]	; (8042680 <LCD_IO_Init+0xe4>)
 804262e:	f043 0304 	orr.w	r3, r3, #4
 8042632:	6313      	str	r3, [r2, #48]	; 0x30
 8042634:	4b12      	ldr	r3, [pc, #72]	; (8042680 <LCD_IO_Init+0xe4>)
 8042636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042638:	f003 0304 	and.w	r3, r3, #4
 804263c:	603b      	str	r3, [r7, #0]
 804263e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8042640:	2304      	movs	r3, #4
 8042642:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8042644:	2301      	movs	r3, #1
 8042646:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8042648:	2300      	movs	r3, #0
 804264a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 804264c:	2302      	movs	r3, #2
 804264e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8042650:	f107 030c 	add.w	r3, r7, #12
 8042654:	4619      	mov	r1, r3
 8042656:	480c      	ldr	r0, [pc, #48]	; (8042688 <LCD_IO_Init+0xec>)
 8042658:	f002 f8e4 	bl	8044824 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 804265c:	2200      	movs	r2, #0
 804265e:	2104      	movs	r1, #4
 8042660:	4809      	ldr	r0, [pc, #36]	; (8042688 <LCD_IO_Init+0xec>)
 8042662:	f002 fb97 	bl	8044d94 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8042666:	2201      	movs	r2, #1
 8042668:	2104      	movs	r1, #4
 804266a:	4807      	ldr	r0, [pc, #28]	; (8042688 <LCD_IO_Init+0xec>)
 804266c:	f002 fb92 	bl	8044d94 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8042670:	f7ff fed6 	bl	8042420 <SPIx_Init>
  }
}
 8042674:	bf00      	nop
 8042676:	3720      	adds	r7, #32
 8042678:	46bd      	mov	sp, r7
 804267a:	bd80      	pop	{r7, pc}
 804267c:	200008c4 	.word	0x200008c4
 8042680:	40023800 	.word	0x40023800
 8042684:	40020c00 	.word	0x40020c00
 8042688:	40020800 	.word	0x40020800

0804268c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 804268c:	b580      	push	{r7, lr}
 804268e:	b082      	sub	sp, #8
 8042690:	af00      	add	r7, sp, #0
 8042692:	4603      	mov	r3, r0
 8042694:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8042696:	2201      	movs	r2, #1
 8042698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 804269c:	480a      	ldr	r0, [pc, #40]	; (80426c8 <LCD_IO_WriteData+0x3c>)
 804269e:	f002 fb79 	bl	8044d94 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80426a2:	2200      	movs	r2, #0
 80426a4:	2104      	movs	r1, #4
 80426a6:	4809      	ldr	r0, [pc, #36]	; (80426cc <LCD_IO_WriteData+0x40>)
 80426a8:	f002 fb74 	bl	8044d94 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80426ac:	88fb      	ldrh	r3, [r7, #6]
 80426ae:	4618      	mov	r0, r3
 80426b0:	f7ff ff10 	bl	80424d4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80426b4:	2201      	movs	r2, #1
 80426b6:	2104      	movs	r1, #4
 80426b8:	4804      	ldr	r0, [pc, #16]	; (80426cc <LCD_IO_WriteData+0x40>)
 80426ba:	f002 fb6b 	bl	8044d94 <HAL_GPIO_WritePin>
}
 80426be:	bf00      	nop
 80426c0:	3708      	adds	r7, #8
 80426c2:	46bd      	mov	sp, r7
 80426c4:	bd80      	pop	{r7, pc}
 80426c6:	bf00      	nop
 80426c8:	40020c00 	.word	0x40020c00
 80426cc:	40020800 	.word	0x40020800

080426d0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80426d0:	b580      	push	{r7, lr}
 80426d2:	b082      	sub	sp, #8
 80426d4:	af00      	add	r7, sp, #0
 80426d6:	4603      	mov	r3, r0
 80426d8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80426da:	2200      	movs	r2, #0
 80426dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80426e0:	480a      	ldr	r0, [pc, #40]	; (804270c <LCD_IO_WriteReg+0x3c>)
 80426e2:	f002 fb57 	bl	8044d94 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80426e6:	2200      	movs	r2, #0
 80426e8:	2104      	movs	r1, #4
 80426ea:	4809      	ldr	r0, [pc, #36]	; (8042710 <LCD_IO_WriteReg+0x40>)
 80426ec:	f002 fb52 	bl	8044d94 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80426f0:	79fb      	ldrb	r3, [r7, #7]
 80426f2:	b29b      	uxth	r3, r3
 80426f4:	4618      	mov	r0, r3
 80426f6:	f7ff feed 	bl	80424d4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80426fa:	2201      	movs	r2, #1
 80426fc:	2104      	movs	r1, #4
 80426fe:	4804      	ldr	r0, [pc, #16]	; (8042710 <LCD_IO_WriteReg+0x40>)
 8042700:	f002 fb48 	bl	8044d94 <HAL_GPIO_WritePin>
}
 8042704:	bf00      	nop
 8042706:	3708      	adds	r7, #8
 8042708:	46bd      	mov	sp, r7
 804270a:	bd80      	pop	{r7, pc}
 804270c:	40020c00 	.word	0x40020c00
 8042710:	40020800 	.word	0x40020800

08042714 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8042714:	b580      	push	{r7, lr}
 8042716:	b084      	sub	sp, #16
 8042718:	af00      	add	r7, sp, #0
 804271a:	4603      	mov	r3, r0
 804271c:	460a      	mov	r2, r1
 804271e:	80fb      	strh	r3, [r7, #6]
 8042720:	4613      	mov	r3, r2
 8042722:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8042724:	2300      	movs	r3, #0
 8042726:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8042728:	2200      	movs	r2, #0
 804272a:	2104      	movs	r1, #4
 804272c:	4810      	ldr	r0, [pc, #64]	; (8042770 <LCD_IO_ReadData+0x5c>)
 804272e:	f002 fb31 	bl	8044d94 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8042732:	2200      	movs	r2, #0
 8042734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8042738:	480e      	ldr	r0, [pc, #56]	; (8042774 <LCD_IO_ReadData+0x60>)
 804273a:	f002 fb2b 	bl	8044d94 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 804273e:	88fb      	ldrh	r3, [r7, #6]
 8042740:	4618      	mov	r0, r3
 8042742:	f7ff fec7 	bl	80424d4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8042746:	797b      	ldrb	r3, [r7, #5]
 8042748:	4618      	mov	r0, r3
 804274a:	f7ff fea3 	bl	8042494 <SPIx_Read>
 804274e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8042750:	2201      	movs	r2, #1
 8042752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8042756:	4807      	ldr	r0, [pc, #28]	; (8042774 <LCD_IO_ReadData+0x60>)
 8042758:	f002 fb1c 	bl	8044d94 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 804275c:	2201      	movs	r2, #1
 804275e:	2104      	movs	r1, #4
 8042760:	4803      	ldr	r0, [pc, #12]	; (8042770 <LCD_IO_ReadData+0x5c>)
 8042762:	f002 fb17 	bl	8044d94 <HAL_GPIO_WritePin>
  
  return readvalue;
 8042766:	68fb      	ldr	r3, [r7, #12]
}
 8042768:	4618      	mov	r0, r3
 804276a:	3710      	adds	r7, #16
 804276c:	46bd      	mov	sp, r7
 804276e:	bd80      	pop	{r7, pc}
 8042770:	40020800 	.word	0x40020800
 8042774:	40020c00 	.word	0x40020c00

08042778 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8042778:	b580      	push	{r7, lr}
 804277a:	b082      	sub	sp, #8
 804277c:	af00      	add	r7, sp, #0
 804277e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8042780:	6878      	ldr	r0, [r7, #4]
 8042782:	f000 fecd 	bl	8043520 <HAL_Delay>
}
 8042786:	bf00      	nop
 8042788:	3708      	adds	r7, #8
 804278a:	46bd      	mov	sp, r7
 804278c:	bd80      	pop	{r7, pc}
	...

08042790 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8042790:	b580      	push	{r7, lr}
 8042792:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8042794:	4b2d      	ldr	r3, [pc, #180]	; (804284c <BSP_LCD_Init+0xbc>)
 8042796:	4a2e      	ldr	r2, [pc, #184]	; (8042850 <BSP_LCD_Init+0xc0>)
 8042798:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 804279a:	4b2c      	ldr	r3, [pc, #176]	; (804284c <BSP_LCD_Init+0xbc>)
 804279c:	2209      	movs	r2, #9
 804279e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80427a0:	4b2a      	ldr	r3, [pc, #168]	; (804284c <BSP_LCD_Init+0xbc>)
 80427a2:	2201      	movs	r2, #1
 80427a4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80427a6:	4b29      	ldr	r3, [pc, #164]	; (804284c <BSP_LCD_Init+0xbc>)
 80427a8:	221d      	movs	r2, #29
 80427aa:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80427ac:	4b27      	ldr	r3, [pc, #156]	; (804284c <BSP_LCD_Init+0xbc>)
 80427ae:	2203      	movs	r2, #3
 80427b0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80427b2:	4b26      	ldr	r3, [pc, #152]	; (804284c <BSP_LCD_Init+0xbc>)
 80427b4:	f240 120d 	movw	r2, #269	; 0x10d
 80427b8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80427ba:	4b24      	ldr	r3, [pc, #144]	; (804284c <BSP_LCD_Init+0xbc>)
 80427bc:	f240 1243 	movw	r2, #323	; 0x143
 80427c0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80427c2:	4b22      	ldr	r3, [pc, #136]	; (804284c <BSP_LCD_Init+0xbc>)
 80427c4:	f240 1217 	movw	r2, #279	; 0x117
 80427c8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80427ca:	4b20      	ldr	r3, [pc, #128]	; (804284c <BSP_LCD_Init+0xbc>)
 80427cc:	f240 1247 	movw	r2, #327	; 0x147
 80427d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80427d2:	4b1e      	ldr	r3, [pc, #120]	; (804284c <BSP_LCD_Init+0xbc>)
 80427d4:	2200      	movs	r2, #0
 80427d6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80427da:	4b1c      	ldr	r3, [pc, #112]	; (804284c <BSP_LCD_Init+0xbc>)
 80427dc:	2200      	movs	r2, #0
 80427de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80427e2:	4b1a      	ldr	r3, [pc, #104]	; (804284c <BSP_LCD_Init+0xbc>)
 80427e4:	2200      	movs	r2, #0
 80427e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80427ea:	4b1a      	ldr	r3, [pc, #104]	; (8042854 <BSP_LCD_Init+0xc4>)
 80427ec:	2208      	movs	r2, #8
 80427ee:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80427f0:	4b18      	ldr	r3, [pc, #96]	; (8042854 <BSP_LCD_Init+0xc4>)
 80427f2:	22c0      	movs	r2, #192	; 0xc0
 80427f4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80427f6:	4b17      	ldr	r3, [pc, #92]	; (8042854 <BSP_LCD_Init+0xc4>)
 80427f8:	2204      	movs	r2, #4
 80427fa:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80427fc:	4b15      	ldr	r3, [pc, #84]	; (8042854 <BSP_LCD_Init+0xc4>)
 80427fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8042802:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8042804:	4813      	ldr	r0, [pc, #76]	; (8042854 <BSP_LCD_Init+0xc4>)
 8042806:	f005 f99b 	bl	8047b40 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 804280a:	4b10      	ldr	r3, [pc, #64]	; (804284c <BSP_LCD_Init+0xbc>)
 804280c:	2200      	movs	r2, #0
 804280e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8042810:	4b0e      	ldr	r3, [pc, #56]	; (804284c <BSP_LCD_Init+0xbc>)
 8042812:	2200      	movs	r2, #0
 8042814:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8042816:	4b0d      	ldr	r3, [pc, #52]	; (804284c <BSP_LCD_Init+0xbc>)
 8042818:	2200      	movs	r2, #0
 804281a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 804281c:	4b0b      	ldr	r3, [pc, #44]	; (804284c <BSP_LCD_Init+0xbc>)
 804281e:	2200      	movs	r2, #0
 8042820:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8042822:	f000 fa83 	bl	8042d2c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8042826:	4809      	ldr	r0, [pc, #36]	; (804284c <BSP_LCD_Init+0xbc>)
 8042828:	f004 f8b0 	bl	804698c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 804282c:	4b0a      	ldr	r3, [pc, #40]	; (8042858 <BSP_LCD_Init+0xc8>)
 804282e:	4a0b      	ldr	r2, [pc, #44]	; (804285c <BSP_LCD_Init+0xcc>)
 8042830:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8042832:	4b09      	ldr	r3, [pc, #36]	; (8042858 <BSP_LCD_Init+0xc8>)
 8042834:	681b      	ldr	r3, [r3, #0]
 8042836:	681b      	ldr	r3, [r3, #0]
 8042838:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 804283a:	f000 fc65 	bl	8043108 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 804283e:	4808      	ldr	r0, [pc, #32]	; (8042860 <BSP_LCD_Init+0xd0>)
 8042840:	f000 f920 	bl	8042a84 <BSP_LCD_SetFont>

  return LCD_OK;
 8042844:	2300      	movs	r3, #0
}  
 8042846:	4618      	mov	r0, r3
 8042848:	bd80      	pop	{r7, pc}
 804284a:	bf00      	nop
 804284c:	200008c8 	.word	0x200008c8
 8042850:	40016800 	.word	0x40016800
 8042854:	200009b0 	.word	0x200009b0
 8042858:	200009fc 	.word	0x200009fc
 804285c:	20000004 	.word	0x20000004
 8042860:	20000040 	.word	0x20000040

08042864 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8042864:	b580      	push	{r7, lr}
 8042866:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8042868:	4b03      	ldr	r3, [pc, #12]	; (8042878 <BSP_LCD_GetXSize+0x14>)
 804286a:	681b      	ldr	r3, [r3, #0]
 804286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804286e:	4798      	blx	r3
 8042870:	4603      	mov	r3, r0
}
 8042872:	4618      	mov	r0, r3
 8042874:	bd80      	pop	{r7, pc}
 8042876:	bf00      	nop
 8042878:	200009fc 	.word	0x200009fc

0804287c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 804287c:	b580      	push	{r7, lr}
 804287e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8042880:	4b03      	ldr	r3, [pc, #12]	; (8042890 <BSP_LCD_GetYSize+0x14>)
 8042882:	681b      	ldr	r3, [r3, #0]
 8042884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042886:	4798      	blx	r3
 8042888:	4603      	mov	r3, r0
}
 804288a:	4618      	mov	r0, r3
 804288c:	bd80      	pop	{r7, pc}
 804288e:	bf00      	nop
 8042890:	200009fc 	.word	0x200009fc

08042894 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8042894:	b580      	push	{r7, lr}
 8042896:	b090      	sub	sp, #64	; 0x40
 8042898:	af00      	add	r7, sp, #0
 804289a:	4603      	mov	r3, r0
 804289c:	6039      	str	r1, [r7, #0]
 804289e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80428a0:	2300      	movs	r3, #0
 80428a2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80428a4:	f7ff ffde 	bl	8042864 <BSP_LCD_GetXSize>
 80428a8:	4603      	mov	r3, r0
 80428aa:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80428ac:	2300      	movs	r3, #0
 80428ae:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80428b0:	f7ff ffe4 	bl	804287c <BSP_LCD_GetYSize>
 80428b4:	4603      	mov	r3, r0
 80428b6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80428b8:	2300      	movs	r3, #0
 80428ba:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80428bc:	683b      	ldr	r3, [r7, #0]
 80428be:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80428c0:	23ff      	movs	r3, #255	; 0xff
 80428c2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80428c4:	2300      	movs	r3, #0
 80428c6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80428c8:	2300      	movs	r3, #0
 80428ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80428ce:	2300      	movs	r3, #0
 80428d0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80428d4:	2300      	movs	r3, #0
 80428d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80428da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80428de:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80428e0:	2307      	movs	r3, #7
 80428e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80428e4:	f7ff ffbe 	bl	8042864 <BSP_LCD_GetXSize>
 80428e8:	4603      	mov	r3, r0
 80428ea:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80428ec:	f7ff ffc6 	bl	804287c <BSP_LCD_GetYSize>
 80428f0:	4603      	mov	r3, r0
 80428f2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80428f4:	88fa      	ldrh	r2, [r7, #6]
 80428f6:	f107 030c 	add.w	r3, r7, #12
 80428fa:	4619      	mov	r1, r3
 80428fc:	4814      	ldr	r0, [pc, #80]	; (8042950 <BSP_LCD_LayerDefaultInit+0xbc>)
 80428fe:	f004 f9d7 	bl	8046cb0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8042902:	88fa      	ldrh	r2, [r7, #6]
 8042904:	4913      	ldr	r1, [pc, #76]	; (8042954 <BSP_LCD_LayerDefaultInit+0xc0>)
 8042906:	4613      	mov	r3, r2
 8042908:	005b      	lsls	r3, r3, #1
 804290a:	4413      	add	r3, r2
 804290c:	009b      	lsls	r3, r3, #2
 804290e:	440b      	add	r3, r1
 8042910:	3304      	adds	r3, #4
 8042912:	f04f 32ff 	mov.w	r2, #4294967295
 8042916:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8042918:	88fa      	ldrh	r2, [r7, #6]
 804291a:	490e      	ldr	r1, [pc, #56]	; (8042954 <BSP_LCD_LayerDefaultInit+0xc0>)
 804291c:	4613      	mov	r3, r2
 804291e:	005b      	lsls	r3, r3, #1
 8042920:	4413      	add	r3, r2
 8042922:	009b      	lsls	r3, r3, #2
 8042924:	440b      	add	r3, r1
 8042926:	3308      	adds	r3, #8
 8042928:	4a0b      	ldr	r2, [pc, #44]	; (8042958 <BSP_LCD_LayerDefaultInit+0xc4>)
 804292a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 804292c:	88fa      	ldrh	r2, [r7, #6]
 804292e:	4909      	ldr	r1, [pc, #36]	; (8042954 <BSP_LCD_LayerDefaultInit+0xc0>)
 8042930:	4613      	mov	r3, r2
 8042932:	005b      	lsls	r3, r3, #1
 8042934:	4413      	add	r3, r2
 8042936:	009b      	lsls	r3, r3, #2
 8042938:	440b      	add	r3, r1
 804293a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 804293e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8042940:	4803      	ldr	r0, [pc, #12]	; (8042950 <BSP_LCD_LayerDefaultInit+0xbc>)
 8042942:	f004 fa71 	bl	8046e28 <HAL_LTDC_EnableDither>
}
 8042946:	bf00      	nop
 8042948:	3740      	adds	r7, #64	; 0x40
 804294a:	46bd      	mov	sp, r7
 804294c:	bd80      	pop	{r7, pc}
 804294e:	bf00      	nop
 8042950:	200008c8 	.word	0x200008c8
 8042954:	200009e4 	.word	0x200009e4
 8042958:	20000040 	.word	0x20000040

0804295c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 804295c:	b480      	push	{r7}
 804295e:	b083      	sub	sp, #12
 8042960:	af00      	add	r7, sp, #0
 8042962:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8042964:	4a04      	ldr	r2, [pc, #16]	; (8042978 <BSP_LCD_SelectLayer+0x1c>)
 8042966:	687b      	ldr	r3, [r7, #4]
 8042968:	6013      	str	r3, [r2, #0]
}
 804296a:	bf00      	nop
 804296c:	370c      	adds	r7, #12
 804296e:	46bd      	mov	sp, r7
 8042970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042974:	4770      	bx	lr
 8042976:	bf00      	nop
 8042978:	200009e0 	.word	0x200009e0

0804297c <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 804297c:	b480      	push	{r7}
 804297e:	b083      	sub	sp, #12
 8042980:	af00      	add	r7, sp, #0
 8042982:	6078      	str	r0, [r7, #4]
 8042984:	460b      	mov	r3, r1
 8042986:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8042988:	78fb      	ldrb	r3, [r7, #3]
 804298a:	2b01      	cmp	r3, #1
 804298c:	d112      	bne.n	80429b4 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 804298e:	4b19      	ldr	r3, [pc, #100]	; (80429f4 <BSP_LCD_SetLayerVisible+0x78>)
 8042990:	681b      	ldr	r3, [r3, #0]
 8042992:	461a      	mov	r2, r3
 8042994:	687b      	ldr	r3, [r7, #4]
 8042996:	01db      	lsls	r3, r3, #7
 8042998:	4413      	add	r3, r2
 804299a:	3384      	adds	r3, #132	; 0x84
 804299c:	681b      	ldr	r3, [r3, #0]
 804299e:	4a15      	ldr	r2, [pc, #84]	; (80429f4 <BSP_LCD_SetLayerVisible+0x78>)
 80429a0:	6812      	ldr	r2, [r2, #0]
 80429a2:	4611      	mov	r1, r2
 80429a4:	687a      	ldr	r2, [r7, #4]
 80429a6:	01d2      	lsls	r2, r2, #7
 80429a8:	440a      	add	r2, r1
 80429aa:	3284      	adds	r2, #132	; 0x84
 80429ac:	f043 0301 	orr.w	r3, r3, #1
 80429b0:	6013      	str	r3, [r2, #0]
 80429b2:	e011      	b.n	80429d8 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 80429b4:	4b0f      	ldr	r3, [pc, #60]	; (80429f4 <BSP_LCD_SetLayerVisible+0x78>)
 80429b6:	681b      	ldr	r3, [r3, #0]
 80429b8:	461a      	mov	r2, r3
 80429ba:	687b      	ldr	r3, [r7, #4]
 80429bc:	01db      	lsls	r3, r3, #7
 80429be:	4413      	add	r3, r2
 80429c0:	3384      	adds	r3, #132	; 0x84
 80429c2:	681b      	ldr	r3, [r3, #0]
 80429c4:	4a0b      	ldr	r2, [pc, #44]	; (80429f4 <BSP_LCD_SetLayerVisible+0x78>)
 80429c6:	6812      	ldr	r2, [r2, #0]
 80429c8:	4611      	mov	r1, r2
 80429ca:	687a      	ldr	r2, [r7, #4]
 80429cc:	01d2      	lsls	r2, r2, #7
 80429ce:	440a      	add	r2, r1
 80429d0:	3284      	adds	r2, #132	; 0x84
 80429d2:	f023 0301 	bic.w	r3, r3, #1
 80429d6:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 80429d8:	4b06      	ldr	r3, [pc, #24]	; (80429f4 <BSP_LCD_SetLayerVisible+0x78>)
 80429da:	681b      	ldr	r3, [r3, #0]
 80429dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80429de:	4b05      	ldr	r3, [pc, #20]	; (80429f4 <BSP_LCD_SetLayerVisible+0x78>)
 80429e0:	681b      	ldr	r3, [r3, #0]
 80429e2:	f042 0201 	orr.w	r2, r2, #1
 80429e6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80429e8:	bf00      	nop
 80429ea:	370c      	adds	r7, #12
 80429ec:	46bd      	mov	sp, r7
 80429ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80429f2:	4770      	bx	lr
 80429f4:	200008c8 	.word	0x200008c8

080429f8 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 80429f8:	b580      	push	{r7, lr}
 80429fa:	b082      	sub	sp, #8
 80429fc:	af00      	add	r7, sp, #0
 80429fe:	6078      	str	r0, [r7, #4]
 8042a00:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8042a02:	687a      	ldr	r2, [r7, #4]
 8042a04:	6839      	ldr	r1, [r7, #0]
 8042a06:	4805      	ldr	r0, [pc, #20]	; (8042a1c <BSP_LCD_SetColorKeying+0x24>)
 8042a08:	f004 f990 	bl	8046d2c <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8042a0c:	6879      	ldr	r1, [r7, #4]
 8042a0e:	4803      	ldr	r0, [pc, #12]	; (8042a1c <BSP_LCD_SetColorKeying+0x24>)
 8042a10:	f004 f9d0 	bl	8046db4 <HAL_LTDC_EnableColorKeying>
}
 8042a14:	bf00      	nop
 8042a16:	3708      	adds	r7, #8
 8042a18:	46bd      	mov	sp, r7
 8042a1a:	bd80      	pop	{r7, pc}
 8042a1c:	200008c8 	.word	0x200008c8

08042a20 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8042a20:	b480      	push	{r7}
 8042a22:	b083      	sub	sp, #12
 8042a24:	af00      	add	r7, sp, #0
 8042a26:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8042a28:	4b07      	ldr	r3, [pc, #28]	; (8042a48 <BSP_LCD_SetTextColor+0x28>)
 8042a2a:	681a      	ldr	r2, [r3, #0]
 8042a2c:	4907      	ldr	r1, [pc, #28]	; (8042a4c <BSP_LCD_SetTextColor+0x2c>)
 8042a2e:	4613      	mov	r3, r2
 8042a30:	005b      	lsls	r3, r3, #1
 8042a32:	4413      	add	r3, r2
 8042a34:	009b      	lsls	r3, r3, #2
 8042a36:	440b      	add	r3, r1
 8042a38:	687a      	ldr	r2, [r7, #4]
 8042a3a:	601a      	str	r2, [r3, #0]
}
 8042a3c:	bf00      	nop
 8042a3e:	370c      	adds	r7, #12
 8042a40:	46bd      	mov	sp, r7
 8042a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a46:	4770      	bx	lr
 8042a48:	200009e0 	.word	0x200009e0
 8042a4c:	200009e4 	.word	0x200009e4

08042a50 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8042a50:	b480      	push	{r7}
 8042a52:	b083      	sub	sp, #12
 8042a54:	af00      	add	r7, sp, #0
 8042a56:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8042a58:	4b08      	ldr	r3, [pc, #32]	; (8042a7c <BSP_LCD_SetBackColor+0x2c>)
 8042a5a:	681a      	ldr	r2, [r3, #0]
 8042a5c:	4908      	ldr	r1, [pc, #32]	; (8042a80 <BSP_LCD_SetBackColor+0x30>)
 8042a5e:	4613      	mov	r3, r2
 8042a60:	005b      	lsls	r3, r3, #1
 8042a62:	4413      	add	r3, r2
 8042a64:	009b      	lsls	r3, r3, #2
 8042a66:	440b      	add	r3, r1
 8042a68:	3304      	adds	r3, #4
 8042a6a:	687a      	ldr	r2, [r7, #4]
 8042a6c:	601a      	str	r2, [r3, #0]
}
 8042a6e:	bf00      	nop
 8042a70:	370c      	adds	r7, #12
 8042a72:	46bd      	mov	sp, r7
 8042a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a78:	4770      	bx	lr
 8042a7a:	bf00      	nop
 8042a7c:	200009e0 	.word	0x200009e0
 8042a80:	200009e4 	.word	0x200009e4

08042a84 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8042a84:	b480      	push	{r7}
 8042a86:	b083      	sub	sp, #12
 8042a88:	af00      	add	r7, sp, #0
 8042a8a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8042a8c:	4b08      	ldr	r3, [pc, #32]	; (8042ab0 <BSP_LCD_SetFont+0x2c>)
 8042a8e:	681a      	ldr	r2, [r3, #0]
 8042a90:	4908      	ldr	r1, [pc, #32]	; (8042ab4 <BSP_LCD_SetFont+0x30>)
 8042a92:	4613      	mov	r3, r2
 8042a94:	005b      	lsls	r3, r3, #1
 8042a96:	4413      	add	r3, r2
 8042a98:	009b      	lsls	r3, r3, #2
 8042a9a:	440b      	add	r3, r1
 8042a9c:	3308      	adds	r3, #8
 8042a9e:	687a      	ldr	r2, [r7, #4]
 8042aa0:	601a      	str	r2, [r3, #0]
}
 8042aa2:	bf00      	nop
 8042aa4:	370c      	adds	r7, #12
 8042aa6:	46bd      	mov	sp, r7
 8042aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042aac:	4770      	bx	lr
 8042aae:	bf00      	nop
 8042ab0:	200009e0 	.word	0x200009e0
 8042ab4:	200009e4 	.word	0x200009e4

08042ab8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8042ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8042aba:	b085      	sub	sp, #20
 8042abc:	af02      	add	r7, sp, #8
 8042abe:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8042ac0:	4b0f      	ldr	r3, [pc, #60]	; (8042b00 <BSP_LCD_Clear+0x48>)
 8042ac2:	681c      	ldr	r4, [r3, #0]
 8042ac4:	4b0e      	ldr	r3, [pc, #56]	; (8042b00 <BSP_LCD_Clear+0x48>)
 8042ac6:	681b      	ldr	r3, [r3, #0]
 8042ac8:	4a0e      	ldr	r2, [pc, #56]	; (8042b04 <BSP_LCD_Clear+0x4c>)
 8042aca:	2134      	movs	r1, #52	; 0x34
 8042acc:	fb01 f303 	mul.w	r3, r1, r3
 8042ad0:	4413      	add	r3, r2
 8042ad2:	335c      	adds	r3, #92	; 0x5c
 8042ad4:	681b      	ldr	r3, [r3, #0]
 8042ad6:	461e      	mov	r6, r3
 8042ad8:	f7ff fec4 	bl	8042864 <BSP_LCD_GetXSize>
 8042adc:	4605      	mov	r5, r0
 8042ade:	f7ff fecd 	bl	804287c <BSP_LCD_GetYSize>
 8042ae2:	4602      	mov	r2, r0
 8042ae4:	687b      	ldr	r3, [r7, #4]
 8042ae6:	9301      	str	r3, [sp, #4]
 8042ae8:	2300      	movs	r3, #0
 8042aea:	9300      	str	r3, [sp, #0]
 8042aec:	4613      	mov	r3, r2
 8042aee:	462a      	mov	r2, r5
 8042af0:	4631      	mov	r1, r6
 8042af2:	4620      	mov	r0, r4
 8042af4:	f000 fad0 	bl	8043098 <FillBuffer>
}
 8042af8:	bf00      	nop
 8042afa:	370c      	adds	r7, #12
 8042afc:	46bd      	mov	sp, r7
 8042afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8042b00:	200009e0 	.word	0x200009e0
 8042b04:	200008c8 	.word	0x200008c8

08042b08 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8042b08:	b590      	push	{r4, r7, lr}
 8042b0a:	b083      	sub	sp, #12
 8042b0c:	af00      	add	r7, sp, #0
 8042b0e:	4603      	mov	r3, r0
 8042b10:	80fb      	strh	r3, [r7, #6]
 8042b12:	460b      	mov	r3, r1
 8042b14:	80bb      	strh	r3, [r7, #4]
 8042b16:	4613      	mov	r3, r2
 8042b18:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8042b1a:	4b1b      	ldr	r3, [pc, #108]	; (8042b88 <BSP_LCD_DisplayChar+0x80>)
 8042b1c:	681a      	ldr	r2, [r3, #0]
 8042b1e:	491b      	ldr	r1, [pc, #108]	; (8042b8c <BSP_LCD_DisplayChar+0x84>)
 8042b20:	4613      	mov	r3, r2
 8042b22:	005b      	lsls	r3, r3, #1
 8042b24:	4413      	add	r3, r2
 8042b26:	009b      	lsls	r3, r3, #2
 8042b28:	440b      	add	r3, r1
 8042b2a:	3308      	adds	r3, #8
 8042b2c:	681b      	ldr	r3, [r3, #0]
 8042b2e:	6819      	ldr	r1, [r3, #0]
 8042b30:	78fb      	ldrb	r3, [r7, #3]
 8042b32:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8042b36:	4b14      	ldr	r3, [pc, #80]	; (8042b88 <BSP_LCD_DisplayChar+0x80>)
 8042b38:	681a      	ldr	r2, [r3, #0]
 8042b3a:	4c14      	ldr	r4, [pc, #80]	; (8042b8c <BSP_LCD_DisplayChar+0x84>)
 8042b3c:	4613      	mov	r3, r2
 8042b3e:	005b      	lsls	r3, r3, #1
 8042b40:	4413      	add	r3, r2
 8042b42:	009b      	lsls	r3, r3, #2
 8042b44:	4423      	add	r3, r4
 8042b46:	3308      	adds	r3, #8
 8042b48:	681b      	ldr	r3, [r3, #0]
 8042b4a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8042b4c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8042b50:	4b0d      	ldr	r3, [pc, #52]	; (8042b88 <BSP_LCD_DisplayChar+0x80>)
 8042b52:	681a      	ldr	r2, [r3, #0]
 8042b54:	4c0d      	ldr	r4, [pc, #52]	; (8042b8c <BSP_LCD_DisplayChar+0x84>)
 8042b56:	4613      	mov	r3, r2
 8042b58:	005b      	lsls	r3, r3, #1
 8042b5a:	4413      	add	r3, r2
 8042b5c:	009b      	lsls	r3, r3, #2
 8042b5e:	4423      	add	r3, r4
 8042b60:	3308      	adds	r3, #8
 8042b62:	681b      	ldr	r3, [r3, #0]
 8042b64:	889b      	ldrh	r3, [r3, #4]
 8042b66:	3307      	adds	r3, #7
 8042b68:	2b00      	cmp	r3, #0
 8042b6a:	da00      	bge.n	8042b6e <BSP_LCD_DisplayChar+0x66>
 8042b6c:	3307      	adds	r3, #7
 8042b6e:	10db      	asrs	r3, r3, #3
 8042b70:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8042b74:	18ca      	adds	r2, r1, r3
 8042b76:	88b9      	ldrh	r1, [r7, #4]
 8042b78:	88fb      	ldrh	r3, [r7, #6]
 8042b7a:	4618      	mov	r0, r3
 8042b7c:	f000 f9d2 	bl	8042f24 <DrawChar>
}
 8042b80:	bf00      	nop
 8042b82:	370c      	adds	r7, #12
 8042b84:	46bd      	mov	sp, r7
 8042b86:	bd90      	pop	{r4, r7, pc}
 8042b88:	200009e0 	.word	0x200009e0
 8042b8c:	200009e4 	.word	0x200009e4

08042b90 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8042b90:	b5b0      	push	{r4, r5, r7, lr}
 8042b92:	b088      	sub	sp, #32
 8042b94:	af00      	add	r7, sp, #0
 8042b96:	60ba      	str	r2, [r7, #8]
 8042b98:	461a      	mov	r2, r3
 8042b9a:	4603      	mov	r3, r0
 8042b9c:	81fb      	strh	r3, [r7, #14]
 8042b9e:	460b      	mov	r3, r1
 8042ba0:	81bb      	strh	r3, [r7, #12]
 8042ba2:	4613      	mov	r3, r2
 8042ba4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8042ba6:	2301      	movs	r3, #1
 8042ba8:	83fb      	strh	r3, [r7, #30]
 8042baa:	2300      	movs	r3, #0
 8042bac:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8042bae:	2300      	movs	r3, #0
 8042bb0:	61bb      	str	r3, [r7, #24]
 8042bb2:	2300      	movs	r3, #0
 8042bb4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8042bb6:	68bb      	ldr	r3, [r7, #8]
 8042bb8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8042bba:	e002      	b.n	8042bc2 <BSP_LCD_DisplayStringAt+0x32>
 8042bbc:	69bb      	ldr	r3, [r7, #24]
 8042bbe:	3301      	adds	r3, #1
 8042bc0:	61bb      	str	r3, [r7, #24]
 8042bc2:	697b      	ldr	r3, [r7, #20]
 8042bc4:	1c5a      	adds	r2, r3, #1
 8042bc6:	617a      	str	r2, [r7, #20]
 8042bc8:	781b      	ldrb	r3, [r3, #0]
 8042bca:	2b00      	cmp	r3, #0
 8042bcc:	d1f6      	bne.n	8042bbc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8042bce:	f7ff fe49 	bl	8042864 <BSP_LCD_GetXSize>
 8042bd2:	4601      	mov	r1, r0
 8042bd4:	4b4b      	ldr	r3, [pc, #300]	; (8042d04 <BSP_LCD_DisplayStringAt+0x174>)
 8042bd6:	681a      	ldr	r2, [r3, #0]
 8042bd8:	484b      	ldr	r0, [pc, #300]	; (8042d08 <BSP_LCD_DisplayStringAt+0x178>)
 8042bda:	4613      	mov	r3, r2
 8042bdc:	005b      	lsls	r3, r3, #1
 8042bde:	4413      	add	r3, r2
 8042be0:	009b      	lsls	r3, r3, #2
 8042be2:	4403      	add	r3, r0
 8042be4:	3308      	adds	r3, #8
 8042be6:	681b      	ldr	r3, [r3, #0]
 8042be8:	889b      	ldrh	r3, [r3, #4]
 8042bea:	fbb1 f3f3 	udiv	r3, r1, r3
 8042bee:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8042bf0:	79fb      	ldrb	r3, [r7, #7]
 8042bf2:	2b03      	cmp	r3, #3
 8042bf4:	d01c      	beq.n	8042c30 <BSP_LCD_DisplayStringAt+0xa0>
 8042bf6:	2b03      	cmp	r3, #3
 8042bf8:	dc33      	bgt.n	8042c62 <BSP_LCD_DisplayStringAt+0xd2>
 8042bfa:	2b01      	cmp	r3, #1
 8042bfc:	d002      	beq.n	8042c04 <BSP_LCD_DisplayStringAt+0x74>
 8042bfe:	2b02      	cmp	r3, #2
 8042c00:	d019      	beq.n	8042c36 <BSP_LCD_DisplayStringAt+0xa6>
 8042c02:	e02e      	b.n	8042c62 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8042c04:	693a      	ldr	r2, [r7, #16]
 8042c06:	69bb      	ldr	r3, [r7, #24]
 8042c08:	1ad1      	subs	r1, r2, r3
 8042c0a:	4b3e      	ldr	r3, [pc, #248]	; (8042d04 <BSP_LCD_DisplayStringAt+0x174>)
 8042c0c:	681a      	ldr	r2, [r3, #0]
 8042c0e:	483e      	ldr	r0, [pc, #248]	; (8042d08 <BSP_LCD_DisplayStringAt+0x178>)
 8042c10:	4613      	mov	r3, r2
 8042c12:	005b      	lsls	r3, r3, #1
 8042c14:	4413      	add	r3, r2
 8042c16:	009b      	lsls	r3, r3, #2
 8042c18:	4403      	add	r3, r0
 8042c1a:	3308      	adds	r3, #8
 8042c1c:	681b      	ldr	r3, [r3, #0]
 8042c1e:	889b      	ldrh	r3, [r3, #4]
 8042c20:	fb01 f303 	mul.w	r3, r1, r3
 8042c24:	085b      	lsrs	r3, r3, #1
 8042c26:	b29a      	uxth	r2, r3
 8042c28:	89fb      	ldrh	r3, [r7, #14]
 8042c2a:	4413      	add	r3, r2
 8042c2c:	83fb      	strh	r3, [r7, #30]
      break;
 8042c2e:	e01b      	b.n	8042c68 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8042c30:	89fb      	ldrh	r3, [r7, #14]
 8042c32:	83fb      	strh	r3, [r7, #30]
      break;
 8042c34:	e018      	b.n	8042c68 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8042c36:	693a      	ldr	r2, [r7, #16]
 8042c38:	69bb      	ldr	r3, [r7, #24]
 8042c3a:	1ad3      	subs	r3, r2, r3
 8042c3c:	b299      	uxth	r1, r3
 8042c3e:	4b31      	ldr	r3, [pc, #196]	; (8042d04 <BSP_LCD_DisplayStringAt+0x174>)
 8042c40:	681a      	ldr	r2, [r3, #0]
 8042c42:	4831      	ldr	r0, [pc, #196]	; (8042d08 <BSP_LCD_DisplayStringAt+0x178>)
 8042c44:	4613      	mov	r3, r2
 8042c46:	005b      	lsls	r3, r3, #1
 8042c48:	4413      	add	r3, r2
 8042c4a:	009b      	lsls	r3, r3, #2
 8042c4c:	4403      	add	r3, r0
 8042c4e:	3308      	adds	r3, #8
 8042c50:	681b      	ldr	r3, [r3, #0]
 8042c52:	889b      	ldrh	r3, [r3, #4]
 8042c54:	fb11 f303 	smulbb	r3, r1, r3
 8042c58:	b29a      	uxth	r2, r3
 8042c5a:	89fb      	ldrh	r3, [r7, #14]
 8042c5c:	4413      	add	r3, r2
 8042c5e:	83fb      	strh	r3, [r7, #30]
      break;
 8042c60:	e002      	b.n	8042c68 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8042c62:	89fb      	ldrh	r3, [r7, #14]
 8042c64:	83fb      	strh	r3, [r7, #30]
      break;
 8042c66:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8042c68:	e01a      	b.n	8042ca0 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8042c6a:	68bb      	ldr	r3, [r7, #8]
 8042c6c:	781a      	ldrb	r2, [r3, #0]
 8042c6e:	89b9      	ldrh	r1, [r7, #12]
 8042c70:	8bfb      	ldrh	r3, [r7, #30]
 8042c72:	4618      	mov	r0, r3
 8042c74:	f7ff ff48 	bl	8042b08 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8042c78:	4b22      	ldr	r3, [pc, #136]	; (8042d04 <BSP_LCD_DisplayStringAt+0x174>)
 8042c7a:	681a      	ldr	r2, [r3, #0]
 8042c7c:	4922      	ldr	r1, [pc, #136]	; (8042d08 <BSP_LCD_DisplayStringAt+0x178>)
 8042c7e:	4613      	mov	r3, r2
 8042c80:	005b      	lsls	r3, r3, #1
 8042c82:	4413      	add	r3, r2
 8042c84:	009b      	lsls	r3, r3, #2
 8042c86:	440b      	add	r3, r1
 8042c88:	3308      	adds	r3, #8
 8042c8a:	681b      	ldr	r3, [r3, #0]
 8042c8c:	889a      	ldrh	r2, [r3, #4]
 8042c8e:	8bfb      	ldrh	r3, [r7, #30]
 8042c90:	4413      	add	r3, r2
 8042c92:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8042c94:	68bb      	ldr	r3, [r7, #8]
 8042c96:	3301      	adds	r3, #1
 8042c98:	60bb      	str	r3, [r7, #8]
    i++;
 8042c9a:	8bbb      	ldrh	r3, [r7, #28]
 8042c9c:	3301      	adds	r3, #1
 8042c9e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8042ca0:	68bb      	ldr	r3, [r7, #8]
 8042ca2:	781b      	ldrb	r3, [r3, #0]
 8042ca4:	2b00      	cmp	r3, #0
 8042ca6:	bf14      	ite	ne
 8042ca8:	2301      	movne	r3, #1
 8042caa:	2300      	moveq	r3, #0
 8042cac:	b2dc      	uxtb	r4, r3
 8042cae:	f7ff fdd9 	bl	8042864 <BSP_LCD_GetXSize>
 8042cb2:	8bb9      	ldrh	r1, [r7, #28]
 8042cb4:	4b13      	ldr	r3, [pc, #76]	; (8042d04 <BSP_LCD_DisplayStringAt+0x174>)
 8042cb6:	681a      	ldr	r2, [r3, #0]
 8042cb8:	4d13      	ldr	r5, [pc, #76]	; (8042d08 <BSP_LCD_DisplayStringAt+0x178>)
 8042cba:	4613      	mov	r3, r2
 8042cbc:	005b      	lsls	r3, r3, #1
 8042cbe:	4413      	add	r3, r2
 8042cc0:	009b      	lsls	r3, r3, #2
 8042cc2:	442b      	add	r3, r5
 8042cc4:	3308      	adds	r3, #8
 8042cc6:	681b      	ldr	r3, [r3, #0]
 8042cc8:	889b      	ldrh	r3, [r3, #4]
 8042cca:	fb01 f303 	mul.w	r3, r1, r3
 8042cce:	1ac3      	subs	r3, r0, r3
 8042cd0:	b299      	uxth	r1, r3
 8042cd2:	4b0c      	ldr	r3, [pc, #48]	; (8042d04 <BSP_LCD_DisplayStringAt+0x174>)
 8042cd4:	681a      	ldr	r2, [r3, #0]
 8042cd6:	480c      	ldr	r0, [pc, #48]	; (8042d08 <BSP_LCD_DisplayStringAt+0x178>)
 8042cd8:	4613      	mov	r3, r2
 8042cda:	005b      	lsls	r3, r3, #1
 8042cdc:	4413      	add	r3, r2
 8042cde:	009b      	lsls	r3, r3, #2
 8042ce0:	4403      	add	r3, r0
 8042ce2:	3308      	adds	r3, #8
 8042ce4:	681b      	ldr	r3, [r3, #0]
 8042ce6:	889b      	ldrh	r3, [r3, #4]
 8042ce8:	4299      	cmp	r1, r3
 8042cea:	bf2c      	ite	cs
 8042cec:	2301      	movcs	r3, #1
 8042cee:	2300      	movcc	r3, #0
 8042cf0:	b2db      	uxtb	r3, r3
 8042cf2:	4023      	ands	r3, r4
 8042cf4:	b2db      	uxtb	r3, r3
 8042cf6:	2b00      	cmp	r3, #0
 8042cf8:	d1b7      	bne.n	8042c6a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8042cfa:	bf00      	nop
 8042cfc:	bf00      	nop
 8042cfe:	3720      	adds	r7, #32
 8042d00:	46bd      	mov	sp, r7
 8042d02:	bdb0      	pop	{r4, r5, r7, pc}
 8042d04:	200009e0 	.word	0x200009e0
 8042d08:	200009e4 	.word	0x200009e4

08042d0c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8042d0c:	b580      	push	{r7, lr}
 8042d0e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8042d10:	4b05      	ldr	r3, [pc, #20]	; (8042d28 <BSP_LCD_DisplayOn+0x1c>)
 8042d12:	681b      	ldr	r3, [r3, #0]
 8042d14:	689b      	ldr	r3, [r3, #8]
 8042d16:	2b00      	cmp	r3, #0
 8042d18:	d003      	beq.n	8042d22 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8042d1a:	4b03      	ldr	r3, [pc, #12]	; (8042d28 <BSP_LCD_DisplayOn+0x1c>)
 8042d1c:	681b      	ldr	r3, [r3, #0]
 8042d1e:	689b      	ldr	r3, [r3, #8]
 8042d20:	4798      	blx	r3
  }
}
 8042d22:	bf00      	nop
 8042d24:	bd80      	pop	{r7, pc}
 8042d26:	bf00      	nop
 8042d28:	200009fc 	.word	0x200009fc

08042d2c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8042d2c:	b580      	push	{r7, lr}
 8042d2e:	b08e      	sub	sp, #56	; 0x38
 8042d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8042d32:	2300      	movs	r3, #0
 8042d34:	623b      	str	r3, [r7, #32]
 8042d36:	4b61      	ldr	r3, [pc, #388]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042d3a:	4a60      	ldr	r2, [pc, #384]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042d3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8042d40:	6453      	str	r3, [r2, #68]	; 0x44
 8042d42:	4b5e      	ldr	r3, [pc, #376]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042d46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8042d4a:	623b      	str	r3, [r7, #32]
 8042d4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8042d4e:	2300      	movs	r3, #0
 8042d50:	61fb      	str	r3, [r7, #28]
 8042d52:	4b5a      	ldr	r3, [pc, #360]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042d56:	4a59      	ldr	r2, [pc, #356]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042d58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8042d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8042d5e:	4b57      	ldr	r3, [pc, #348]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8042d66:	61fb      	str	r3, [r7, #28]
 8042d68:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8042d6a:	2300      	movs	r3, #0
 8042d6c:	61bb      	str	r3, [r7, #24]
 8042d6e:	4b53      	ldr	r3, [pc, #332]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042d72:	4a52      	ldr	r2, [pc, #328]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042d74:	f043 0301 	orr.w	r3, r3, #1
 8042d78:	6313      	str	r3, [r2, #48]	; 0x30
 8042d7a:	4b50      	ldr	r3, [pc, #320]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042d7e:	f003 0301 	and.w	r3, r3, #1
 8042d82:	61bb      	str	r3, [r7, #24]
 8042d84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8042d86:	2300      	movs	r3, #0
 8042d88:	617b      	str	r3, [r7, #20]
 8042d8a:	4b4c      	ldr	r3, [pc, #304]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042d8e:	4a4b      	ldr	r2, [pc, #300]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042d90:	f043 0302 	orr.w	r3, r3, #2
 8042d94:	6313      	str	r3, [r2, #48]	; 0x30
 8042d96:	4b49      	ldr	r3, [pc, #292]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042d9a:	f003 0302 	and.w	r3, r3, #2
 8042d9e:	617b      	str	r3, [r7, #20]
 8042da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8042da2:	2300      	movs	r3, #0
 8042da4:	613b      	str	r3, [r7, #16]
 8042da6:	4b45      	ldr	r3, [pc, #276]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042daa:	4a44      	ldr	r2, [pc, #272]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042dac:	f043 0304 	orr.w	r3, r3, #4
 8042db0:	6313      	str	r3, [r2, #48]	; 0x30
 8042db2:	4b42      	ldr	r3, [pc, #264]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042db6:	f003 0304 	and.w	r3, r3, #4
 8042dba:	613b      	str	r3, [r7, #16]
 8042dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8042dbe:	2300      	movs	r3, #0
 8042dc0:	60fb      	str	r3, [r7, #12]
 8042dc2:	4b3e      	ldr	r3, [pc, #248]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042dc6:	4a3d      	ldr	r2, [pc, #244]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042dc8:	f043 0308 	orr.w	r3, r3, #8
 8042dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8042dce:	4b3b      	ldr	r3, [pc, #236]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042dd2:	f003 0308 	and.w	r3, r3, #8
 8042dd6:	60fb      	str	r3, [r7, #12]
 8042dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8042dda:	2300      	movs	r3, #0
 8042ddc:	60bb      	str	r3, [r7, #8]
 8042dde:	4b37      	ldr	r3, [pc, #220]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042de2:	4a36      	ldr	r2, [pc, #216]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042de4:	f043 0320 	orr.w	r3, r3, #32
 8042de8:	6313      	str	r3, [r2, #48]	; 0x30
 8042dea:	4b34      	ldr	r3, [pc, #208]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042dee:	f003 0320 	and.w	r3, r3, #32
 8042df2:	60bb      	str	r3, [r7, #8]
 8042df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8042df6:	2300      	movs	r3, #0
 8042df8:	607b      	str	r3, [r7, #4]
 8042dfa:	4b30      	ldr	r3, [pc, #192]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042dfe:	4a2f      	ldr	r2, [pc, #188]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8042e04:	6313      	str	r3, [r2, #48]	; 0x30
 8042e06:	4b2d      	ldr	r3, [pc, #180]	; (8042ebc <BSP_LCD_MspInit+0x190>)
 8042e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042e0e:	607b      	str	r3, [r7, #4]
 8042e10:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8042e12:	f641 0358 	movw	r3, #6232	; 0x1858
 8042e16:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8042e18:	2302      	movs	r3, #2
 8042e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8042e1c:	2300      	movs	r3, #0
 8042e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8042e20:	2302      	movs	r3, #2
 8042e22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8042e24:	230e      	movs	r3, #14
 8042e26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8042e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042e2c:	4619      	mov	r1, r3
 8042e2e:	4824      	ldr	r0, [pc, #144]	; (8042ec0 <BSP_LCD_MspInit+0x194>)
 8042e30:	f001 fcf8 	bl	8044824 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8042e34:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8042e38:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8042e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042e3e:	4619      	mov	r1, r3
 8042e40:	4820      	ldr	r0, [pc, #128]	; (8042ec4 <BSP_LCD_MspInit+0x198>)
 8042e42:	f001 fcef 	bl	8044824 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8042e46:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8042e4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8042e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042e50:	4619      	mov	r1, r3
 8042e52:	481d      	ldr	r0, [pc, #116]	; (8042ec8 <BSP_LCD_MspInit+0x19c>)
 8042e54:	f001 fce6 	bl	8044824 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8042e58:	2348      	movs	r3, #72	; 0x48
 8042e5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8042e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042e60:	4619      	mov	r1, r3
 8042e62:	481a      	ldr	r0, [pc, #104]	; (8042ecc <BSP_LCD_MspInit+0x1a0>)
 8042e64:	f001 fcde 	bl	8044824 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8042e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8042e6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8042e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042e72:	4619      	mov	r1, r3
 8042e74:	4816      	ldr	r0, [pc, #88]	; (8042ed0 <BSP_LCD_MspInit+0x1a4>)
 8042e76:	f001 fcd5 	bl	8044824 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8042e7a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8042e7e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8042e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042e84:	4619      	mov	r1, r3
 8042e86:	4813      	ldr	r0, [pc, #76]	; (8042ed4 <BSP_LCD_MspInit+0x1a8>)
 8042e88:	f001 fccc 	bl	8044824 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8042e8c:	2303      	movs	r3, #3
 8042e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8042e90:	2309      	movs	r3, #9
 8042e92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8042e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042e98:	4619      	mov	r1, r3
 8042e9a:	480a      	ldr	r0, [pc, #40]	; (8042ec4 <BSP_LCD_MspInit+0x198>)
 8042e9c:	f001 fcc2 	bl	8044824 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8042ea0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8042ea4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8042ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042eaa:	4619      	mov	r1, r3
 8042eac:	4809      	ldr	r0, [pc, #36]	; (8042ed4 <BSP_LCD_MspInit+0x1a8>)
 8042eae:	f001 fcb9 	bl	8044824 <HAL_GPIO_Init>
}
 8042eb2:	bf00      	nop
 8042eb4:	3738      	adds	r7, #56	; 0x38
 8042eb6:	46bd      	mov	sp, r7
 8042eb8:	bd80      	pop	{r7, pc}
 8042eba:	bf00      	nop
 8042ebc:	40023800 	.word	0x40023800
 8042ec0:	40020000 	.word	0x40020000
 8042ec4:	40020400 	.word	0x40020400
 8042ec8:	40020800 	.word	0x40020800
 8042ecc:	40020c00 	.word	0x40020c00
 8042ed0:	40021400 	.word	0x40021400
 8042ed4:	40021800 	.word	0x40021800

08042ed8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8042ed8:	b5b0      	push	{r4, r5, r7, lr}
 8042eda:	b082      	sub	sp, #8
 8042edc:	af00      	add	r7, sp, #0
 8042ede:	4603      	mov	r3, r0
 8042ee0:	603a      	str	r2, [r7, #0]
 8042ee2:	80fb      	strh	r3, [r7, #6]
 8042ee4:	460b      	mov	r3, r1
 8042ee6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8042ee8:	4b0c      	ldr	r3, [pc, #48]	; (8042f1c <BSP_LCD_DrawPixel+0x44>)
 8042eea:	681b      	ldr	r3, [r3, #0]
 8042eec:	4a0c      	ldr	r2, [pc, #48]	; (8042f20 <BSP_LCD_DrawPixel+0x48>)
 8042eee:	2134      	movs	r1, #52	; 0x34
 8042ef0:	fb01 f303 	mul.w	r3, r1, r3
 8042ef4:	4413      	add	r3, r2
 8042ef6:	335c      	adds	r3, #92	; 0x5c
 8042ef8:	681c      	ldr	r4, [r3, #0]
 8042efa:	88bd      	ldrh	r5, [r7, #4]
 8042efc:	f7ff fcb2 	bl	8042864 <BSP_LCD_GetXSize>
 8042f00:	4603      	mov	r3, r0
 8042f02:	fb03 f205 	mul.w	r2, r3, r5
 8042f06:	88fb      	ldrh	r3, [r7, #6]
 8042f08:	4413      	add	r3, r2
 8042f0a:	009b      	lsls	r3, r3, #2
 8042f0c:	4423      	add	r3, r4
 8042f0e:	461a      	mov	r2, r3
 8042f10:	683b      	ldr	r3, [r7, #0]
 8042f12:	6013      	str	r3, [r2, #0]
}
 8042f14:	bf00      	nop
 8042f16:	3708      	adds	r7, #8
 8042f18:	46bd      	mov	sp, r7
 8042f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8042f1c:	200009e0 	.word	0x200009e0
 8042f20:	200008c8 	.word	0x200008c8

08042f24 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8042f24:	b580      	push	{r7, lr}
 8042f26:	b088      	sub	sp, #32
 8042f28:	af00      	add	r7, sp, #0
 8042f2a:	4603      	mov	r3, r0
 8042f2c:	603a      	str	r2, [r7, #0]
 8042f2e:	80fb      	strh	r3, [r7, #6]
 8042f30:	460b      	mov	r3, r1
 8042f32:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8042f34:	2300      	movs	r3, #0
 8042f36:	61fb      	str	r3, [r7, #28]
 8042f38:	2300      	movs	r3, #0
 8042f3a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8042f3c:	2300      	movs	r3, #0
 8042f3e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8042f40:	4b53      	ldr	r3, [pc, #332]	; (8043090 <DrawChar+0x16c>)
 8042f42:	681a      	ldr	r2, [r3, #0]
 8042f44:	4953      	ldr	r1, [pc, #332]	; (8043094 <DrawChar+0x170>)
 8042f46:	4613      	mov	r3, r2
 8042f48:	005b      	lsls	r3, r3, #1
 8042f4a:	4413      	add	r3, r2
 8042f4c:	009b      	lsls	r3, r3, #2
 8042f4e:	440b      	add	r3, r1
 8042f50:	3308      	adds	r3, #8
 8042f52:	681b      	ldr	r3, [r3, #0]
 8042f54:	88db      	ldrh	r3, [r3, #6]
 8042f56:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8042f58:	4b4d      	ldr	r3, [pc, #308]	; (8043090 <DrawChar+0x16c>)
 8042f5a:	681a      	ldr	r2, [r3, #0]
 8042f5c:	494d      	ldr	r1, [pc, #308]	; (8043094 <DrawChar+0x170>)
 8042f5e:	4613      	mov	r3, r2
 8042f60:	005b      	lsls	r3, r3, #1
 8042f62:	4413      	add	r3, r2
 8042f64:	009b      	lsls	r3, r3, #2
 8042f66:	440b      	add	r3, r1
 8042f68:	3308      	adds	r3, #8
 8042f6a:	681b      	ldr	r3, [r3, #0]
 8042f6c:	889b      	ldrh	r3, [r3, #4]
 8042f6e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8042f70:	8a3b      	ldrh	r3, [r7, #16]
 8042f72:	3307      	adds	r3, #7
 8042f74:	2b00      	cmp	r3, #0
 8042f76:	da00      	bge.n	8042f7a <DrawChar+0x56>
 8042f78:	3307      	adds	r3, #7
 8042f7a:	10db      	asrs	r3, r3, #3
 8042f7c:	b2db      	uxtb	r3, r3
 8042f7e:	00db      	lsls	r3, r3, #3
 8042f80:	b2da      	uxtb	r2, r3
 8042f82:	8a3b      	ldrh	r3, [r7, #16]
 8042f84:	b2db      	uxtb	r3, r3
 8042f86:	1ad3      	subs	r3, r2, r3
 8042f88:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8042f8a:	2300      	movs	r3, #0
 8042f8c:	61fb      	str	r3, [r7, #28]
 8042f8e:	e076      	b.n	804307e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8042f90:	8a3b      	ldrh	r3, [r7, #16]
 8042f92:	3307      	adds	r3, #7
 8042f94:	2b00      	cmp	r3, #0
 8042f96:	da00      	bge.n	8042f9a <DrawChar+0x76>
 8042f98:	3307      	adds	r3, #7
 8042f9a:	10db      	asrs	r3, r3, #3
 8042f9c:	461a      	mov	r2, r3
 8042f9e:	69fb      	ldr	r3, [r7, #28]
 8042fa0:	fb02 f303 	mul.w	r3, r2, r3
 8042fa4:	683a      	ldr	r2, [r7, #0]
 8042fa6:	4413      	add	r3, r2
 8042fa8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8042faa:	8a3b      	ldrh	r3, [r7, #16]
 8042fac:	3307      	adds	r3, #7
 8042fae:	2b00      	cmp	r3, #0
 8042fb0:	da00      	bge.n	8042fb4 <DrawChar+0x90>
 8042fb2:	3307      	adds	r3, #7
 8042fb4:	10db      	asrs	r3, r3, #3
 8042fb6:	2b01      	cmp	r3, #1
 8042fb8:	d002      	beq.n	8042fc0 <DrawChar+0x9c>
 8042fba:	2b02      	cmp	r3, #2
 8042fbc:	d004      	beq.n	8042fc8 <DrawChar+0xa4>
 8042fbe:	e00c      	b.n	8042fda <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8042fc0:	68bb      	ldr	r3, [r7, #8]
 8042fc2:	781b      	ldrb	r3, [r3, #0]
 8042fc4:	617b      	str	r3, [r7, #20]
      break;
 8042fc6:	e016      	b.n	8042ff6 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8042fc8:	68bb      	ldr	r3, [r7, #8]
 8042fca:	781b      	ldrb	r3, [r3, #0]
 8042fcc:	021b      	lsls	r3, r3, #8
 8042fce:	68ba      	ldr	r2, [r7, #8]
 8042fd0:	3201      	adds	r2, #1
 8042fd2:	7812      	ldrb	r2, [r2, #0]
 8042fd4:	4313      	orrs	r3, r2
 8042fd6:	617b      	str	r3, [r7, #20]
      break;
 8042fd8:	e00d      	b.n	8042ff6 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8042fda:	68bb      	ldr	r3, [r7, #8]
 8042fdc:	781b      	ldrb	r3, [r3, #0]
 8042fde:	041a      	lsls	r2, r3, #16
 8042fe0:	68bb      	ldr	r3, [r7, #8]
 8042fe2:	3301      	adds	r3, #1
 8042fe4:	781b      	ldrb	r3, [r3, #0]
 8042fe6:	021b      	lsls	r3, r3, #8
 8042fe8:	4313      	orrs	r3, r2
 8042fea:	68ba      	ldr	r2, [r7, #8]
 8042fec:	3202      	adds	r2, #2
 8042fee:	7812      	ldrb	r2, [r2, #0]
 8042ff0:	4313      	orrs	r3, r2
 8042ff2:	617b      	str	r3, [r7, #20]
      break;
 8042ff4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8042ff6:	2300      	movs	r3, #0
 8042ff8:	61bb      	str	r3, [r7, #24]
 8042ffa:	e036      	b.n	804306a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8042ffc:	8a3a      	ldrh	r2, [r7, #16]
 8042ffe:	69bb      	ldr	r3, [r7, #24]
 8043000:	1ad2      	subs	r2, r2, r3
 8043002:	7bfb      	ldrb	r3, [r7, #15]
 8043004:	4413      	add	r3, r2
 8043006:	3b01      	subs	r3, #1
 8043008:	2201      	movs	r2, #1
 804300a:	fa02 f303 	lsl.w	r3, r2, r3
 804300e:	461a      	mov	r2, r3
 8043010:	697b      	ldr	r3, [r7, #20]
 8043012:	4013      	ands	r3, r2
 8043014:	2b00      	cmp	r3, #0
 8043016:	d012      	beq.n	804303e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8043018:	69bb      	ldr	r3, [r7, #24]
 804301a:	b29a      	uxth	r2, r3
 804301c:	88fb      	ldrh	r3, [r7, #6]
 804301e:	4413      	add	r3, r2
 8043020:	b298      	uxth	r0, r3
 8043022:	4b1b      	ldr	r3, [pc, #108]	; (8043090 <DrawChar+0x16c>)
 8043024:	681a      	ldr	r2, [r3, #0]
 8043026:	491b      	ldr	r1, [pc, #108]	; (8043094 <DrawChar+0x170>)
 8043028:	4613      	mov	r3, r2
 804302a:	005b      	lsls	r3, r3, #1
 804302c:	4413      	add	r3, r2
 804302e:	009b      	lsls	r3, r3, #2
 8043030:	440b      	add	r3, r1
 8043032:	681a      	ldr	r2, [r3, #0]
 8043034:	88bb      	ldrh	r3, [r7, #4]
 8043036:	4619      	mov	r1, r3
 8043038:	f7ff ff4e 	bl	8042ed8 <BSP_LCD_DrawPixel>
 804303c:	e012      	b.n	8043064 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 804303e:	69bb      	ldr	r3, [r7, #24]
 8043040:	b29a      	uxth	r2, r3
 8043042:	88fb      	ldrh	r3, [r7, #6]
 8043044:	4413      	add	r3, r2
 8043046:	b298      	uxth	r0, r3
 8043048:	4b11      	ldr	r3, [pc, #68]	; (8043090 <DrawChar+0x16c>)
 804304a:	681a      	ldr	r2, [r3, #0]
 804304c:	4911      	ldr	r1, [pc, #68]	; (8043094 <DrawChar+0x170>)
 804304e:	4613      	mov	r3, r2
 8043050:	005b      	lsls	r3, r3, #1
 8043052:	4413      	add	r3, r2
 8043054:	009b      	lsls	r3, r3, #2
 8043056:	440b      	add	r3, r1
 8043058:	3304      	adds	r3, #4
 804305a:	681a      	ldr	r2, [r3, #0]
 804305c:	88bb      	ldrh	r3, [r7, #4]
 804305e:	4619      	mov	r1, r3
 8043060:	f7ff ff3a 	bl	8042ed8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8043064:	69bb      	ldr	r3, [r7, #24]
 8043066:	3301      	adds	r3, #1
 8043068:	61bb      	str	r3, [r7, #24]
 804306a:	8a3b      	ldrh	r3, [r7, #16]
 804306c:	69ba      	ldr	r2, [r7, #24]
 804306e:	429a      	cmp	r2, r3
 8043070:	d3c4      	bcc.n	8042ffc <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8043072:	88bb      	ldrh	r3, [r7, #4]
 8043074:	3301      	adds	r3, #1
 8043076:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8043078:	69fb      	ldr	r3, [r7, #28]
 804307a:	3301      	adds	r3, #1
 804307c:	61fb      	str	r3, [r7, #28]
 804307e:	8a7b      	ldrh	r3, [r7, #18]
 8043080:	69fa      	ldr	r2, [r7, #28]
 8043082:	429a      	cmp	r2, r3
 8043084:	d384      	bcc.n	8042f90 <DrawChar+0x6c>
  }
}
 8043086:	bf00      	nop
 8043088:	bf00      	nop
 804308a:	3720      	adds	r7, #32
 804308c:	46bd      	mov	sp, r7
 804308e:	bd80      	pop	{r7, pc}
 8043090:	200009e0 	.word	0x200009e0
 8043094:	200009e4 	.word	0x200009e4

08043098 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8043098:	b580      	push	{r7, lr}
 804309a:	b086      	sub	sp, #24
 804309c:	af02      	add	r7, sp, #8
 804309e:	60f8      	str	r0, [r7, #12]
 80430a0:	60b9      	str	r1, [r7, #8]
 80430a2:	607a      	str	r2, [r7, #4]
 80430a4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80430a6:	4b16      	ldr	r3, [pc, #88]	; (8043100 <FillBuffer+0x68>)
 80430a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80430ac:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80430ae:	4b14      	ldr	r3, [pc, #80]	; (8043100 <FillBuffer+0x68>)
 80430b0:	2200      	movs	r2, #0
 80430b2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80430b4:	4a12      	ldr	r2, [pc, #72]	; (8043100 <FillBuffer+0x68>)
 80430b6:	69bb      	ldr	r3, [r7, #24]
 80430b8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80430ba:	4b11      	ldr	r3, [pc, #68]	; (8043100 <FillBuffer+0x68>)
 80430bc:	4a11      	ldr	r2, [pc, #68]	; (8043104 <FillBuffer+0x6c>)
 80430be:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80430c0:	480f      	ldr	r0, [pc, #60]	; (8043100 <FillBuffer+0x68>)
 80430c2:	f000 fd0d 	bl	8043ae0 <HAL_DMA2D_Init>
 80430c6:	4603      	mov	r3, r0
 80430c8:	2b00      	cmp	r3, #0
 80430ca:	d115      	bne.n	80430f8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80430cc:	68f9      	ldr	r1, [r7, #12]
 80430ce:	480c      	ldr	r0, [pc, #48]	; (8043100 <FillBuffer+0x68>)
 80430d0:	f000 ff74 	bl	8043fbc <HAL_DMA2D_ConfigLayer>
 80430d4:	4603      	mov	r3, r0
 80430d6:	2b00      	cmp	r3, #0
 80430d8:	d10e      	bne.n	80430f8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80430da:	68ba      	ldr	r2, [r7, #8]
 80430dc:	683b      	ldr	r3, [r7, #0]
 80430de:	9300      	str	r3, [sp, #0]
 80430e0:	687b      	ldr	r3, [r7, #4]
 80430e2:	69f9      	ldr	r1, [r7, #28]
 80430e4:	4806      	ldr	r0, [pc, #24]	; (8043100 <FillBuffer+0x68>)
 80430e6:	f000 fd44 	bl	8043b72 <HAL_DMA2D_Start>
 80430ea:	4603      	mov	r3, r0
 80430ec:	2b00      	cmp	r3, #0
 80430ee:	d103      	bne.n	80430f8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80430f0:	210a      	movs	r1, #10
 80430f2:	4803      	ldr	r0, [pc, #12]	; (8043100 <FillBuffer+0x68>)
 80430f4:	f000 fd68 	bl	8043bc8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80430f8:	bf00      	nop
 80430fa:	3710      	adds	r7, #16
 80430fc:	46bd      	mov	sp, r7
 80430fe:	bd80      	pop	{r7, pc}
 8043100:	20000970 	.word	0x20000970
 8043104:	4002b000 	.word	0x4002b000

08043108 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8043108:	b580      	push	{r7, lr}
 804310a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 804310c:	4b29      	ldr	r3, [pc, #164]	; (80431b4 <BSP_SDRAM_Init+0xac>)
 804310e:	4a2a      	ldr	r2, [pc, #168]	; (80431b8 <BSP_SDRAM_Init+0xb0>)
 8043110:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8043112:	4b2a      	ldr	r3, [pc, #168]	; (80431bc <BSP_SDRAM_Init+0xb4>)
 8043114:	2202      	movs	r2, #2
 8043116:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8043118:	4b28      	ldr	r3, [pc, #160]	; (80431bc <BSP_SDRAM_Init+0xb4>)
 804311a:	2207      	movs	r2, #7
 804311c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 804311e:	4b27      	ldr	r3, [pc, #156]	; (80431bc <BSP_SDRAM_Init+0xb4>)
 8043120:	2204      	movs	r2, #4
 8043122:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8043124:	4b25      	ldr	r3, [pc, #148]	; (80431bc <BSP_SDRAM_Init+0xb4>)
 8043126:	2207      	movs	r2, #7
 8043128:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 804312a:	4b24      	ldr	r3, [pc, #144]	; (80431bc <BSP_SDRAM_Init+0xb4>)
 804312c:	2202      	movs	r2, #2
 804312e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8043130:	4b22      	ldr	r3, [pc, #136]	; (80431bc <BSP_SDRAM_Init+0xb4>)
 8043132:	2202      	movs	r2, #2
 8043134:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8043136:	4b21      	ldr	r3, [pc, #132]	; (80431bc <BSP_SDRAM_Init+0xb4>)
 8043138:	2202      	movs	r2, #2
 804313a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 804313c:	4b1d      	ldr	r3, [pc, #116]	; (80431b4 <BSP_SDRAM_Init+0xac>)
 804313e:	2201      	movs	r2, #1
 8043140:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8043142:	4b1c      	ldr	r3, [pc, #112]	; (80431b4 <BSP_SDRAM_Init+0xac>)
 8043144:	2200      	movs	r2, #0
 8043146:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8043148:	4b1a      	ldr	r3, [pc, #104]	; (80431b4 <BSP_SDRAM_Init+0xac>)
 804314a:	2204      	movs	r2, #4
 804314c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 804314e:	4b19      	ldr	r3, [pc, #100]	; (80431b4 <BSP_SDRAM_Init+0xac>)
 8043150:	2210      	movs	r2, #16
 8043152:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8043154:	4b17      	ldr	r3, [pc, #92]	; (80431b4 <BSP_SDRAM_Init+0xac>)
 8043156:	2240      	movs	r2, #64	; 0x40
 8043158:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 804315a:	4b16      	ldr	r3, [pc, #88]	; (80431b4 <BSP_SDRAM_Init+0xac>)
 804315c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8043160:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8043162:	4b14      	ldr	r3, [pc, #80]	; (80431b4 <BSP_SDRAM_Init+0xac>)
 8043164:	2200      	movs	r2, #0
 8043166:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8043168:	4b12      	ldr	r3, [pc, #72]	; (80431b4 <BSP_SDRAM_Init+0xac>)
 804316a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 804316e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8043170:	4b10      	ldr	r3, [pc, #64]	; (80431b4 <BSP_SDRAM_Init+0xac>)
 8043172:	2200      	movs	r2, #0
 8043174:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8043176:	4b0f      	ldr	r3, [pc, #60]	; (80431b4 <BSP_SDRAM_Init+0xac>)
 8043178:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 804317c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 804317e:	2100      	movs	r1, #0
 8043180:	480c      	ldr	r0, [pc, #48]	; (80431b4 <BSP_SDRAM_Init+0xac>)
 8043182:	f000 f87f 	bl	8043284 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8043186:	490d      	ldr	r1, [pc, #52]	; (80431bc <BSP_SDRAM_Init+0xb4>)
 8043188:	480a      	ldr	r0, [pc, #40]	; (80431b4 <BSP_SDRAM_Init+0xac>)
 804318a:	f004 fe99 	bl	8047ec0 <HAL_SDRAM_Init>
 804318e:	4603      	mov	r3, r0
 8043190:	2b00      	cmp	r3, #0
 8043192:	d003      	beq.n	804319c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8043194:	4b0a      	ldr	r3, [pc, #40]	; (80431c0 <BSP_SDRAM_Init+0xb8>)
 8043196:	2201      	movs	r2, #1
 8043198:	701a      	strb	r2, [r3, #0]
 804319a:	e002      	b.n	80431a2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 804319c:	4b08      	ldr	r3, [pc, #32]	; (80431c0 <BSP_SDRAM_Init+0xb8>)
 804319e:	2200      	movs	r2, #0
 80431a0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80431a2:	f240 506a 	movw	r0, #1386	; 0x56a
 80431a6:	f000 f80d 	bl	80431c4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80431aa:	4b05      	ldr	r3, [pc, #20]	; (80431c0 <BSP_SDRAM_Init+0xb8>)
 80431ac:	781b      	ldrb	r3, [r3, #0]
}
 80431ae:	4618      	mov	r0, r3
 80431b0:	bd80      	pop	{r7, pc}
 80431b2:	bf00      	nop
 80431b4:	20000a00 	.word	0x20000a00
 80431b8:	a0000140 	.word	0xa0000140
 80431bc:	20000a34 	.word	0x20000a34
 80431c0:	20000050 	.word	0x20000050

080431c4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80431c4:	b580      	push	{r7, lr}
 80431c6:	b084      	sub	sp, #16
 80431c8:	af00      	add	r7, sp, #0
 80431ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80431cc:	2300      	movs	r3, #0
 80431ce:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80431d0:	4b2a      	ldr	r3, [pc, #168]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80431d2:	2201      	movs	r2, #1
 80431d4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80431d6:	4b29      	ldr	r3, [pc, #164]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80431d8:	2208      	movs	r2, #8
 80431da:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80431dc:	4b27      	ldr	r3, [pc, #156]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80431de:	2201      	movs	r2, #1
 80431e0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80431e2:	4b26      	ldr	r3, [pc, #152]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80431e4:	2200      	movs	r2, #0
 80431e6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80431e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80431ec:	4923      	ldr	r1, [pc, #140]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80431ee:	4824      	ldr	r0, [pc, #144]	; (8043280 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80431f0:	f004 fe9a 	bl	8047f28 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80431f4:	2001      	movs	r0, #1
 80431f6:	f000 f993 	bl	8043520 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80431fa:	4b20      	ldr	r3, [pc, #128]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80431fc:	2202      	movs	r2, #2
 80431fe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8043200:	4b1e      	ldr	r3, [pc, #120]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043202:	2208      	movs	r2, #8
 8043204:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8043206:	4b1d      	ldr	r3, [pc, #116]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043208:	2201      	movs	r2, #1
 804320a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 804320c:	4b1b      	ldr	r3, [pc, #108]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 804320e:	2200      	movs	r2, #0
 8043210:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8043212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8043216:	4919      	ldr	r1, [pc, #100]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043218:	4819      	ldr	r0, [pc, #100]	; (8043280 <BSP_SDRAM_Initialization_sequence+0xbc>)
 804321a:	f004 fe85 	bl	8047f28 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 804321e:	4b17      	ldr	r3, [pc, #92]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043220:	2203      	movs	r2, #3
 8043222:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8043224:	4b15      	ldr	r3, [pc, #84]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043226:	2208      	movs	r2, #8
 8043228:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 804322a:	4b14      	ldr	r3, [pc, #80]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 804322c:	2204      	movs	r2, #4
 804322e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8043230:	4b12      	ldr	r3, [pc, #72]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043232:	2200      	movs	r2, #0
 8043234:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8043236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804323a:	4910      	ldr	r1, [pc, #64]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 804323c:	4810      	ldr	r0, [pc, #64]	; (8043280 <BSP_SDRAM_Initialization_sequence+0xbc>)
 804323e:	f004 fe73 	bl	8047f28 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8043242:	f44f 730c 	mov.w	r3, #560	; 0x230
 8043246:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8043248:	4b0c      	ldr	r3, [pc, #48]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 804324a:	2204      	movs	r2, #4
 804324c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 804324e:	4b0b      	ldr	r3, [pc, #44]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043250:	2208      	movs	r2, #8
 8043252:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8043254:	4b09      	ldr	r3, [pc, #36]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043256:	2201      	movs	r2, #1
 8043258:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 804325a:	68fb      	ldr	r3, [r7, #12]
 804325c:	4a07      	ldr	r2, [pc, #28]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 804325e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8043260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8043264:	4905      	ldr	r1, [pc, #20]	; (804327c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043266:	4806      	ldr	r0, [pc, #24]	; (8043280 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8043268:	f004 fe5e 	bl	8047f28 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 804326c:	6879      	ldr	r1, [r7, #4]
 804326e:	4804      	ldr	r0, [pc, #16]	; (8043280 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8043270:	f004 fe8f 	bl	8047f92 <HAL_SDRAM_ProgramRefreshRate>
}
 8043274:	bf00      	nop
 8043276:	3710      	adds	r7, #16
 8043278:	46bd      	mov	sp, r7
 804327a:	bd80      	pop	{r7, pc}
 804327c:	20000a50 	.word	0x20000a50
 8043280:	20000a00 	.word	0x20000a00

08043284 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8043284:	b580      	push	{r7, lr}
 8043286:	b090      	sub	sp, #64	; 0x40
 8043288:	af00      	add	r7, sp, #0
 804328a:	6078      	str	r0, [r7, #4]
 804328c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 804328e:	687b      	ldr	r3, [r7, #4]
 8043290:	2b00      	cmp	r3, #0
 8043292:	f000 80ec 	beq.w	804346e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8043296:	2300      	movs	r3, #0
 8043298:	62bb      	str	r3, [r7, #40]	; 0x28
 804329a:	4b77      	ldr	r3, [pc, #476]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 804329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804329e:	4a76      	ldr	r2, [pc, #472]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 80432a0:	f043 0301 	orr.w	r3, r3, #1
 80432a4:	6393      	str	r3, [r2, #56]	; 0x38
 80432a6:	4b74      	ldr	r3, [pc, #464]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 80432a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80432aa:	f003 0301 	and.w	r3, r3, #1
 80432ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80432b0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80432b2:	2300      	movs	r3, #0
 80432b4:	627b      	str	r3, [r7, #36]	; 0x24
 80432b6:	4b70      	ldr	r3, [pc, #448]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 80432b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80432ba:	4a6f      	ldr	r2, [pc, #444]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 80432bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80432c0:	6313      	str	r3, [r2, #48]	; 0x30
 80432c2:	4b6d      	ldr	r3, [pc, #436]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 80432c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80432c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80432ca:	627b      	str	r3, [r7, #36]	; 0x24
 80432cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80432ce:	2300      	movs	r3, #0
 80432d0:	623b      	str	r3, [r7, #32]
 80432d2:	4b69      	ldr	r3, [pc, #420]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 80432d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80432d6:	4a68      	ldr	r2, [pc, #416]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 80432d8:	f043 0302 	orr.w	r3, r3, #2
 80432dc:	6313      	str	r3, [r2, #48]	; 0x30
 80432de:	4b66      	ldr	r3, [pc, #408]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 80432e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80432e2:	f003 0302 	and.w	r3, r3, #2
 80432e6:	623b      	str	r3, [r7, #32]
 80432e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80432ea:	2300      	movs	r3, #0
 80432ec:	61fb      	str	r3, [r7, #28]
 80432ee:	4b62      	ldr	r3, [pc, #392]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 80432f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80432f2:	4a61      	ldr	r2, [pc, #388]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 80432f4:	f043 0304 	orr.w	r3, r3, #4
 80432f8:	6313      	str	r3, [r2, #48]	; 0x30
 80432fa:	4b5f      	ldr	r3, [pc, #380]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 80432fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80432fe:	f003 0304 	and.w	r3, r3, #4
 8043302:	61fb      	str	r3, [r7, #28]
 8043304:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8043306:	2300      	movs	r3, #0
 8043308:	61bb      	str	r3, [r7, #24]
 804330a:	4b5b      	ldr	r3, [pc, #364]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 804330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804330e:	4a5a      	ldr	r2, [pc, #360]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 8043310:	f043 0308 	orr.w	r3, r3, #8
 8043314:	6313      	str	r3, [r2, #48]	; 0x30
 8043316:	4b58      	ldr	r3, [pc, #352]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 8043318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804331a:	f003 0308 	and.w	r3, r3, #8
 804331e:	61bb      	str	r3, [r7, #24]
 8043320:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8043322:	2300      	movs	r3, #0
 8043324:	617b      	str	r3, [r7, #20]
 8043326:	4b54      	ldr	r3, [pc, #336]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 8043328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804332a:	4a53      	ldr	r2, [pc, #332]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 804332c:	f043 0310 	orr.w	r3, r3, #16
 8043330:	6313      	str	r3, [r2, #48]	; 0x30
 8043332:	4b51      	ldr	r3, [pc, #324]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 8043334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043336:	f003 0310 	and.w	r3, r3, #16
 804333a:	617b      	str	r3, [r7, #20]
 804333c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 804333e:	2300      	movs	r3, #0
 8043340:	613b      	str	r3, [r7, #16]
 8043342:	4b4d      	ldr	r3, [pc, #308]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 8043344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043346:	4a4c      	ldr	r2, [pc, #304]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 8043348:	f043 0320 	orr.w	r3, r3, #32
 804334c:	6313      	str	r3, [r2, #48]	; 0x30
 804334e:	4b4a      	ldr	r3, [pc, #296]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 8043350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043352:	f003 0320 	and.w	r3, r3, #32
 8043356:	613b      	str	r3, [r7, #16]
 8043358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 804335a:	2300      	movs	r3, #0
 804335c:	60fb      	str	r3, [r7, #12]
 804335e:	4b46      	ldr	r3, [pc, #280]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 8043360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043362:	4a45      	ldr	r2, [pc, #276]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 8043364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8043368:	6313      	str	r3, [r2, #48]	; 0x30
 804336a:	4b43      	ldr	r3, [pc, #268]	; (8043478 <BSP_SDRAM_MspInit+0x1f4>)
 804336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043372:	60fb      	str	r3, [r7, #12]
 8043374:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8043376:	2302      	movs	r3, #2
 8043378:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 804337a:	2302      	movs	r3, #2
 804337c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 804337e:	2300      	movs	r3, #0
 8043380:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8043382:	230c      	movs	r3, #12
 8043384:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8043386:	2360      	movs	r3, #96	; 0x60
 8043388:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 804338a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 804338e:	4619      	mov	r1, r3
 8043390:	483a      	ldr	r0, [pc, #232]	; (804347c <BSP_SDRAM_MspInit+0x1f8>)
 8043392:	f001 fa47 	bl	8044824 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8043396:	2301      	movs	r3, #1
 8043398:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 804339a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 804339e:	4619      	mov	r1, r3
 80433a0:	4837      	ldr	r0, [pc, #220]	; (8043480 <BSP_SDRAM_MspInit+0x1fc>)
 80433a2:	f001 fa3f 	bl	8044824 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80433a6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80433aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80433ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80433b0:	4619      	mov	r1, r3
 80433b2:	4834      	ldr	r0, [pc, #208]	; (8043484 <BSP_SDRAM_MspInit+0x200>)
 80433b4:	f001 fa36 	bl	8044824 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80433b8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80433bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80433be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80433c2:	4619      	mov	r1, r3
 80433c4:	4830      	ldr	r0, [pc, #192]	; (8043488 <BSP_SDRAM_MspInit+0x204>)
 80433c6:	f001 fa2d 	bl	8044824 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80433ca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80433ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80433d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80433d4:	4619      	mov	r1, r3
 80433d6:	482d      	ldr	r0, [pc, #180]	; (804348c <BSP_SDRAM_MspInit+0x208>)
 80433d8:	f001 fa24 	bl	8044824 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80433dc:	f248 1333 	movw	r3, #33075	; 0x8133
 80433e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80433e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80433e6:	4619      	mov	r1, r3
 80433e8:	4829      	ldr	r0, [pc, #164]	; (8043490 <BSP_SDRAM_MspInit+0x20c>)
 80433ea:	f001 fa1b 	bl	8044824 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80433ee:	4b29      	ldr	r3, [pc, #164]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 80433f0:	2200      	movs	r2, #0
 80433f2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80433f4:	4b27      	ldr	r3, [pc, #156]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 80433f6:	2280      	movs	r2, #128	; 0x80
 80433f8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80433fa:	4b26      	ldr	r3, [pc, #152]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 80433fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8043400:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8043402:	4b24      	ldr	r3, [pc, #144]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 8043404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8043408:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804340a:	4b22      	ldr	r3, [pc, #136]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 804340c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8043410:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8043412:	4b20      	ldr	r3, [pc, #128]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 8043414:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8043418:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 804341a:	4b1e      	ldr	r3, [pc, #120]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 804341c:	2200      	movs	r2, #0
 804341e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8043420:	4b1c      	ldr	r3, [pc, #112]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 8043422:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8043426:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8043428:	4b1a      	ldr	r3, [pc, #104]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 804342a:	2200      	movs	r2, #0
 804342c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 804342e:	4b19      	ldr	r3, [pc, #100]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 8043430:	2203      	movs	r2, #3
 8043432:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8043434:	4b17      	ldr	r3, [pc, #92]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 8043436:	2200      	movs	r2, #0
 8043438:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 804343a:	4b16      	ldr	r3, [pc, #88]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 804343c:	2200      	movs	r2, #0
 804343e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8043440:	4b14      	ldr	r3, [pc, #80]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 8043442:	4a15      	ldr	r2, [pc, #84]	; (8043498 <BSP_SDRAM_MspInit+0x214>)
 8043444:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8043446:	687b      	ldr	r3, [r7, #4]
 8043448:	4a12      	ldr	r2, [pc, #72]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 804344a:	631a      	str	r2, [r3, #48]	; 0x30
 804344c:	4a11      	ldr	r2, [pc, #68]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 804344e:	687b      	ldr	r3, [r7, #4]
 8043450:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8043452:	4810      	ldr	r0, [pc, #64]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 8043454:	f000 fa34 	bl	80438c0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8043458:	480e      	ldr	r0, [pc, #56]	; (8043494 <BSP_SDRAM_MspInit+0x210>)
 804345a:	f000 f983 	bl	8043764 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 804345e:	2200      	movs	r2, #0
 8043460:	210f      	movs	r1, #15
 8043462:	2038      	movs	r0, #56	; 0x38
 8043464:	f000 f938 	bl	80436d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8043468:	2038      	movs	r0, #56	; 0x38
 804346a:	f000 f951 	bl	8043710 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 804346e:	bf00      	nop
 8043470:	3740      	adds	r7, #64	; 0x40
 8043472:	46bd      	mov	sp, r7
 8043474:	bd80      	pop	{r7, pc}
 8043476:	bf00      	nop
 8043478:	40023800 	.word	0x40023800
 804347c:	40020400 	.word	0x40020400
 8043480:	40020800 	.word	0x40020800
 8043484:	40020c00 	.word	0x40020c00
 8043488:	40021000 	.word	0x40021000
 804348c:	40021400 	.word	0x40021400
 8043490:	40021800 	.word	0x40021800
 8043494:	20000a60 	.word	0x20000a60
 8043498:	40026410 	.word	0x40026410

0804349c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 804349c:	b580      	push	{r7, lr}
 804349e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80434a0:	4b0e      	ldr	r3, [pc, #56]	; (80434dc <HAL_Init+0x40>)
 80434a2:	681b      	ldr	r3, [r3, #0]
 80434a4:	4a0d      	ldr	r2, [pc, #52]	; (80434dc <HAL_Init+0x40>)
 80434a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80434aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80434ac:	4b0b      	ldr	r3, [pc, #44]	; (80434dc <HAL_Init+0x40>)
 80434ae:	681b      	ldr	r3, [r3, #0]
 80434b0:	4a0a      	ldr	r2, [pc, #40]	; (80434dc <HAL_Init+0x40>)
 80434b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80434b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80434b8:	4b08      	ldr	r3, [pc, #32]	; (80434dc <HAL_Init+0x40>)
 80434ba:	681b      	ldr	r3, [r3, #0]
 80434bc:	4a07      	ldr	r2, [pc, #28]	; (80434dc <HAL_Init+0x40>)
 80434be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80434c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80434c4:	2003      	movs	r0, #3
 80434c6:	f000 f8fc 	bl	80436c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80434ca:	200f      	movs	r0, #15
 80434cc:	f7fe fc38 	bl	8041d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80434d0:	f7fe f866 	bl	80415a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80434d4:	2300      	movs	r3, #0
}
 80434d6:	4618      	mov	r0, r3
 80434d8:	bd80      	pop	{r7, pc}
 80434da:	bf00      	nop
 80434dc:	40023c00 	.word	0x40023c00

080434e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80434e0:	b480      	push	{r7}
 80434e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80434e4:	4b06      	ldr	r3, [pc, #24]	; (8043500 <HAL_IncTick+0x20>)
 80434e6:	781b      	ldrb	r3, [r3, #0]
 80434e8:	461a      	mov	r2, r3
 80434ea:	4b06      	ldr	r3, [pc, #24]	; (8043504 <HAL_IncTick+0x24>)
 80434ec:	681b      	ldr	r3, [r3, #0]
 80434ee:	4413      	add	r3, r2
 80434f0:	4a04      	ldr	r2, [pc, #16]	; (8043504 <HAL_IncTick+0x24>)
 80434f2:	6013      	str	r3, [r2, #0]
}
 80434f4:	bf00      	nop
 80434f6:	46bd      	mov	sp, r7
 80434f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80434fc:	4770      	bx	lr
 80434fe:	bf00      	nop
 8043500:	20000058 	.word	0x20000058
 8043504:	20000ac0 	.word	0x20000ac0

08043508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8043508:	b480      	push	{r7}
 804350a:	af00      	add	r7, sp, #0
  return uwTick;
 804350c:	4b03      	ldr	r3, [pc, #12]	; (804351c <HAL_GetTick+0x14>)
 804350e:	681b      	ldr	r3, [r3, #0]
}
 8043510:	4618      	mov	r0, r3
 8043512:	46bd      	mov	sp, r7
 8043514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043518:	4770      	bx	lr
 804351a:	bf00      	nop
 804351c:	20000ac0 	.word	0x20000ac0

08043520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8043520:	b580      	push	{r7, lr}
 8043522:	b084      	sub	sp, #16
 8043524:	af00      	add	r7, sp, #0
 8043526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8043528:	f7ff ffee 	bl	8043508 <HAL_GetTick>
 804352c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 804352e:	687b      	ldr	r3, [r7, #4]
 8043530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8043532:	68fb      	ldr	r3, [r7, #12]
 8043534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043538:	d005      	beq.n	8043546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 804353a:	4b0a      	ldr	r3, [pc, #40]	; (8043564 <HAL_Delay+0x44>)
 804353c:	781b      	ldrb	r3, [r3, #0]
 804353e:	461a      	mov	r2, r3
 8043540:	68fb      	ldr	r3, [r7, #12]
 8043542:	4413      	add	r3, r2
 8043544:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8043546:	bf00      	nop
 8043548:	f7ff ffde 	bl	8043508 <HAL_GetTick>
 804354c:	4602      	mov	r2, r0
 804354e:	68bb      	ldr	r3, [r7, #8]
 8043550:	1ad3      	subs	r3, r2, r3
 8043552:	68fa      	ldr	r2, [r7, #12]
 8043554:	429a      	cmp	r2, r3
 8043556:	d8f7      	bhi.n	8043548 <HAL_Delay+0x28>
  {
  }
}
 8043558:	bf00      	nop
 804355a:	bf00      	nop
 804355c:	3710      	adds	r7, #16
 804355e:	46bd      	mov	sp, r7
 8043560:	bd80      	pop	{r7, pc}
 8043562:	bf00      	nop
 8043564:	20000058 	.word	0x20000058

08043568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8043568:	b480      	push	{r7}
 804356a:	b085      	sub	sp, #20
 804356c:	af00      	add	r7, sp, #0
 804356e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8043570:	687b      	ldr	r3, [r7, #4]
 8043572:	f003 0307 	and.w	r3, r3, #7
 8043576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8043578:	4b0c      	ldr	r3, [pc, #48]	; (80435ac <__NVIC_SetPriorityGrouping+0x44>)
 804357a:	68db      	ldr	r3, [r3, #12]
 804357c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 804357e:	68ba      	ldr	r2, [r7, #8]
 8043580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8043584:	4013      	ands	r3, r2
 8043586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8043588:	68fb      	ldr	r3, [r7, #12]
 804358a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 804358c:	68bb      	ldr	r3, [r7, #8]
 804358e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8043590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8043594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8043598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 804359a:	4a04      	ldr	r2, [pc, #16]	; (80435ac <__NVIC_SetPriorityGrouping+0x44>)
 804359c:	68bb      	ldr	r3, [r7, #8]
 804359e:	60d3      	str	r3, [r2, #12]
}
 80435a0:	bf00      	nop
 80435a2:	3714      	adds	r7, #20
 80435a4:	46bd      	mov	sp, r7
 80435a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80435aa:	4770      	bx	lr
 80435ac:	e000ed00 	.word	0xe000ed00

080435b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80435b0:	b480      	push	{r7}
 80435b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80435b4:	4b04      	ldr	r3, [pc, #16]	; (80435c8 <__NVIC_GetPriorityGrouping+0x18>)
 80435b6:	68db      	ldr	r3, [r3, #12]
 80435b8:	0a1b      	lsrs	r3, r3, #8
 80435ba:	f003 0307 	and.w	r3, r3, #7
}
 80435be:	4618      	mov	r0, r3
 80435c0:	46bd      	mov	sp, r7
 80435c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80435c6:	4770      	bx	lr
 80435c8:	e000ed00 	.word	0xe000ed00

080435cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80435cc:	b480      	push	{r7}
 80435ce:	b083      	sub	sp, #12
 80435d0:	af00      	add	r7, sp, #0
 80435d2:	4603      	mov	r3, r0
 80435d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80435d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80435da:	2b00      	cmp	r3, #0
 80435dc:	db0b      	blt.n	80435f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80435de:	79fb      	ldrb	r3, [r7, #7]
 80435e0:	f003 021f 	and.w	r2, r3, #31
 80435e4:	4907      	ldr	r1, [pc, #28]	; (8043604 <__NVIC_EnableIRQ+0x38>)
 80435e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80435ea:	095b      	lsrs	r3, r3, #5
 80435ec:	2001      	movs	r0, #1
 80435ee:	fa00 f202 	lsl.w	r2, r0, r2
 80435f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80435f6:	bf00      	nop
 80435f8:	370c      	adds	r7, #12
 80435fa:	46bd      	mov	sp, r7
 80435fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043600:	4770      	bx	lr
 8043602:	bf00      	nop
 8043604:	e000e100 	.word	0xe000e100

08043608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8043608:	b480      	push	{r7}
 804360a:	b083      	sub	sp, #12
 804360c:	af00      	add	r7, sp, #0
 804360e:	4603      	mov	r3, r0
 8043610:	6039      	str	r1, [r7, #0]
 8043612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8043614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8043618:	2b00      	cmp	r3, #0
 804361a:	db0a      	blt.n	8043632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804361c:	683b      	ldr	r3, [r7, #0]
 804361e:	b2da      	uxtb	r2, r3
 8043620:	490c      	ldr	r1, [pc, #48]	; (8043654 <__NVIC_SetPriority+0x4c>)
 8043622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8043626:	0112      	lsls	r2, r2, #4
 8043628:	b2d2      	uxtb	r2, r2
 804362a:	440b      	add	r3, r1
 804362c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8043630:	e00a      	b.n	8043648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043632:	683b      	ldr	r3, [r7, #0]
 8043634:	b2da      	uxtb	r2, r3
 8043636:	4908      	ldr	r1, [pc, #32]	; (8043658 <__NVIC_SetPriority+0x50>)
 8043638:	79fb      	ldrb	r3, [r7, #7]
 804363a:	f003 030f 	and.w	r3, r3, #15
 804363e:	3b04      	subs	r3, #4
 8043640:	0112      	lsls	r2, r2, #4
 8043642:	b2d2      	uxtb	r2, r2
 8043644:	440b      	add	r3, r1
 8043646:	761a      	strb	r2, [r3, #24]
}
 8043648:	bf00      	nop
 804364a:	370c      	adds	r7, #12
 804364c:	46bd      	mov	sp, r7
 804364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043652:	4770      	bx	lr
 8043654:	e000e100 	.word	0xe000e100
 8043658:	e000ed00 	.word	0xe000ed00

0804365c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 804365c:	b480      	push	{r7}
 804365e:	b089      	sub	sp, #36	; 0x24
 8043660:	af00      	add	r7, sp, #0
 8043662:	60f8      	str	r0, [r7, #12]
 8043664:	60b9      	str	r1, [r7, #8]
 8043666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8043668:	68fb      	ldr	r3, [r7, #12]
 804366a:	f003 0307 	and.w	r3, r3, #7
 804366e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8043670:	69fb      	ldr	r3, [r7, #28]
 8043672:	f1c3 0307 	rsb	r3, r3, #7
 8043676:	2b04      	cmp	r3, #4
 8043678:	bf28      	it	cs
 804367a:	2304      	movcs	r3, #4
 804367c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 804367e:	69fb      	ldr	r3, [r7, #28]
 8043680:	3304      	adds	r3, #4
 8043682:	2b06      	cmp	r3, #6
 8043684:	d902      	bls.n	804368c <NVIC_EncodePriority+0x30>
 8043686:	69fb      	ldr	r3, [r7, #28]
 8043688:	3b03      	subs	r3, #3
 804368a:	e000      	b.n	804368e <NVIC_EncodePriority+0x32>
 804368c:	2300      	movs	r3, #0
 804368e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043690:	f04f 32ff 	mov.w	r2, #4294967295
 8043694:	69bb      	ldr	r3, [r7, #24]
 8043696:	fa02 f303 	lsl.w	r3, r2, r3
 804369a:	43da      	mvns	r2, r3
 804369c:	68bb      	ldr	r3, [r7, #8]
 804369e:	401a      	ands	r2, r3
 80436a0:	697b      	ldr	r3, [r7, #20]
 80436a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80436a4:	f04f 31ff 	mov.w	r1, #4294967295
 80436a8:	697b      	ldr	r3, [r7, #20]
 80436aa:	fa01 f303 	lsl.w	r3, r1, r3
 80436ae:	43d9      	mvns	r1, r3
 80436b0:	687b      	ldr	r3, [r7, #4]
 80436b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80436b4:	4313      	orrs	r3, r2
         );
}
 80436b6:	4618      	mov	r0, r3
 80436b8:	3724      	adds	r7, #36	; 0x24
 80436ba:	46bd      	mov	sp, r7
 80436bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80436c0:	4770      	bx	lr

080436c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80436c2:	b580      	push	{r7, lr}
 80436c4:	b082      	sub	sp, #8
 80436c6:	af00      	add	r7, sp, #0
 80436c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80436ca:	6878      	ldr	r0, [r7, #4]
 80436cc:	f7ff ff4c 	bl	8043568 <__NVIC_SetPriorityGrouping>
}
 80436d0:	bf00      	nop
 80436d2:	3708      	adds	r7, #8
 80436d4:	46bd      	mov	sp, r7
 80436d6:	bd80      	pop	{r7, pc}

080436d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80436d8:	b580      	push	{r7, lr}
 80436da:	b086      	sub	sp, #24
 80436dc:	af00      	add	r7, sp, #0
 80436de:	4603      	mov	r3, r0
 80436e0:	60b9      	str	r1, [r7, #8]
 80436e2:	607a      	str	r2, [r7, #4]
 80436e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80436e6:	2300      	movs	r3, #0
 80436e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80436ea:	f7ff ff61 	bl	80435b0 <__NVIC_GetPriorityGrouping>
 80436ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80436f0:	687a      	ldr	r2, [r7, #4]
 80436f2:	68b9      	ldr	r1, [r7, #8]
 80436f4:	6978      	ldr	r0, [r7, #20]
 80436f6:	f7ff ffb1 	bl	804365c <NVIC_EncodePriority>
 80436fa:	4602      	mov	r2, r0
 80436fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8043700:	4611      	mov	r1, r2
 8043702:	4618      	mov	r0, r3
 8043704:	f7ff ff80 	bl	8043608 <__NVIC_SetPriority>
}
 8043708:	bf00      	nop
 804370a:	3718      	adds	r7, #24
 804370c:	46bd      	mov	sp, r7
 804370e:	bd80      	pop	{r7, pc}

08043710 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8043710:	b580      	push	{r7, lr}
 8043712:	b082      	sub	sp, #8
 8043714:	af00      	add	r7, sp, #0
 8043716:	4603      	mov	r3, r0
 8043718:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 804371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804371e:	4618      	mov	r0, r3
 8043720:	f7ff ff54 	bl	80435cc <__NVIC_EnableIRQ>
}
 8043724:	bf00      	nop
 8043726:	3708      	adds	r7, #8
 8043728:	46bd      	mov	sp, r7
 804372a:	bd80      	pop	{r7, pc}

0804372c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 804372c:	b580      	push	{r7, lr}
 804372e:	b082      	sub	sp, #8
 8043730:	af00      	add	r7, sp, #0
 8043732:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8043734:	687b      	ldr	r3, [r7, #4]
 8043736:	2b00      	cmp	r3, #0
 8043738:	d101      	bne.n	804373e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 804373a:	2301      	movs	r3, #1
 804373c:	e00e      	b.n	804375c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 804373e:	687b      	ldr	r3, [r7, #4]
 8043740:	795b      	ldrb	r3, [r3, #5]
 8043742:	b2db      	uxtb	r3, r3
 8043744:	2b00      	cmp	r3, #0
 8043746:	d105      	bne.n	8043754 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8043748:	687b      	ldr	r3, [r7, #4]
 804374a:	2200      	movs	r2, #0
 804374c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 804374e:	6878      	ldr	r0, [r7, #4]
 8043750:	f7fd ff4e 	bl	80415f0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8043754:	687b      	ldr	r3, [r7, #4]
 8043756:	2201      	movs	r2, #1
 8043758:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 804375a:	2300      	movs	r3, #0
}
 804375c:	4618      	mov	r0, r3
 804375e:	3708      	adds	r7, #8
 8043760:	46bd      	mov	sp, r7
 8043762:	bd80      	pop	{r7, pc}

08043764 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8043764:	b580      	push	{r7, lr}
 8043766:	b086      	sub	sp, #24
 8043768:	af00      	add	r7, sp, #0
 804376a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 804376c:	2300      	movs	r3, #0
 804376e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8043770:	f7ff feca 	bl	8043508 <HAL_GetTick>
 8043774:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8043776:	687b      	ldr	r3, [r7, #4]
 8043778:	2b00      	cmp	r3, #0
 804377a:	d101      	bne.n	8043780 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 804377c:	2301      	movs	r3, #1
 804377e:	e099      	b.n	80438b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8043780:	687b      	ldr	r3, [r7, #4]
 8043782:	2202      	movs	r2, #2
 8043784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8043788:	687b      	ldr	r3, [r7, #4]
 804378a:	2200      	movs	r2, #0
 804378c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8043790:	687b      	ldr	r3, [r7, #4]
 8043792:	681b      	ldr	r3, [r3, #0]
 8043794:	681a      	ldr	r2, [r3, #0]
 8043796:	687b      	ldr	r3, [r7, #4]
 8043798:	681b      	ldr	r3, [r3, #0]
 804379a:	f022 0201 	bic.w	r2, r2, #1
 804379e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80437a0:	e00f      	b.n	80437c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80437a2:	f7ff feb1 	bl	8043508 <HAL_GetTick>
 80437a6:	4602      	mov	r2, r0
 80437a8:	693b      	ldr	r3, [r7, #16]
 80437aa:	1ad3      	subs	r3, r2, r3
 80437ac:	2b05      	cmp	r3, #5
 80437ae:	d908      	bls.n	80437c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80437b0:	687b      	ldr	r3, [r7, #4]
 80437b2:	2220      	movs	r2, #32
 80437b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80437b6:	687b      	ldr	r3, [r7, #4]
 80437b8:	2203      	movs	r2, #3
 80437ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80437be:	2303      	movs	r3, #3
 80437c0:	e078      	b.n	80438b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80437c2:	687b      	ldr	r3, [r7, #4]
 80437c4:	681b      	ldr	r3, [r3, #0]
 80437c6:	681b      	ldr	r3, [r3, #0]
 80437c8:	f003 0301 	and.w	r3, r3, #1
 80437cc:	2b00      	cmp	r3, #0
 80437ce:	d1e8      	bne.n	80437a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80437d0:	687b      	ldr	r3, [r7, #4]
 80437d2:	681b      	ldr	r3, [r3, #0]
 80437d4:	681b      	ldr	r3, [r3, #0]
 80437d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80437d8:	697a      	ldr	r2, [r7, #20]
 80437da:	4b38      	ldr	r3, [pc, #224]	; (80438bc <HAL_DMA_Init+0x158>)
 80437dc:	4013      	ands	r3, r2
 80437de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80437e0:	687b      	ldr	r3, [r7, #4]
 80437e2:	685a      	ldr	r2, [r3, #4]
 80437e4:	687b      	ldr	r3, [r7, #4]
 80437e6:	689b      	ldr	r3, [r3, #8]
 80437e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80437ea:	687b      	ldr	r3, [r7, #4]
 80437ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80437ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80437f0:	687b      	ldr	r3, [r7, #4]
 80437f2:	691b      	ldr	r3, [r3, #16]
 80437f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80437f6:	687b      	ldr	r3, [r7, #4]
 80437f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80437fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80437fc:	687b      	ldr	r3, [r7, #4]
 80437fe:	699b      	ldr	r3, [r3, #24]
 8043800:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8043802:	687b      	ldr	r3, [r7, #4]
 8043804:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8043806:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8043808:	687b      	ldr	r3, [r7, #4]
 804380a:	6a1b      	ldr	r3, [r3, #32]
 804380c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 804380e:	697a      	ldr	r2, [r7, #20]
 8043810:	4313      	orrs	r3, r2
 8043812:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8043814:	687b      	ldr	r3, [r7, #4]
 8043816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043818:	2b04      	cmp	r3, #4
 804381a:	d107      	bne.n	804382c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 804381c:	687b      	ldr	r3, [r7, #4]
 804381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043820:	687b      	ldr	r3, [r7, #4]
 8043822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043824:	4313      	orrs	r3, r2
 8043826:	697a      	ldr	r2, [r7, #20]
 8043828:	4313      	orrs	r3, r2
 804382a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 804382c:	687b      	ldr	r3, [r7, #4]
 804382e:	681b      	ldr	r3, [r3, #0]
 8043830:	697a      	ldr	r2, [r7, #20]
 8043832:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8043834:	687b      	ldr	r3, [r7, #4]
 8043836:	681b      	ldr	r3, [r3, #0]
 8043838:	695b      	ldr	r3, [r3, #20]
 804383a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 804383c:	697b      	ldr	r3, [r7, #20]
 804383e:	f023 0307 	bic.w	r3, r3, #7
 8043842:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8043844:	687b      	ldr	r3, [r7, #4]
 8043846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043848:	697a      	ldr	r2, [r7, #20]
 804384a:	4313      	orrs	r3, r2
 804384c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 804384e:	687b      	ldr	r3, [r7, #4]
 8043850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043852:	2b04      	cmp	r3, #4
 8043854:	d117      	bne.n	8043886 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8043856:	687b      	ldr	r3, [r7, #4]
 8043858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804385a:	697a      	ldr	r2, [r7, #20]
 804385c:	4313      	orrs	r3, r2
 804385e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8043860:	687b      	ldr	r3, [r7, #4]
 8043862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043864:	2b00      	cmp	r3, #0
 8043866:	d00e      	beq.n	8043886 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8043868:	6878      	ldr	r0, [r7, #4]
 804386a:	f000 f8bd 	bl	80439e8 <DMA_CheckFifoParam>
 804386e:	4603      	mov	r3, r0
 8043870:	2b00      	cmp	r3, #0
 8043872:	d008      	beq.n	8043886 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8043874:	687b      	ldr	r3, [r7, #4]
 8043876:	2240      	movs	r2, #64	; 0x40
 8043878:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 804387a:	687b      	ldr	r3, [r7, #4]
 804387c:	2201      	movs	r2, #1
 804387e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8043882:	2301      	movs	r3, #1
 8043884:	e016      	b.n	80438b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8043886:	687b      	ldr	r3, [r7, #4]
 8043888:	681b      	ldr	r3, [r3, #0]
 804388a:	697a      	ldr	r2, [r7, #20]
 804388c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 804388e:	6878      	ldr	r0, [r7, #4]
 8043890:	f000 f874 	bl	804397c <DMA_CalcBaseAndBitshift>
 8043894:	4603      	mov	r3, r0
 8043896:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043898:	687b      	ldr	r3, [r7, #4]
 804389a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804389c:	223f      	movs	r2, #63	; 0x3f
 804389e:	409a      	lsls	r2, r3
 80438a0:	68fb      	ldr	r3, [r7, #12]
 80438a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80438a4:	687b      	ldr	r3, [r7, #4]
 80438a6:	2200      	movs	r2, #0
 80438a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80438aa:	687b      	ldr	r3, [r7, #4]
 80438ac:	2201      	movs	r2, #1
 80438ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80438b2:	2300      	movs	r3, #0
}
 80438b4:	4618      	mov	r0, r3
 80438b6:	3718      	adds	r7, #24
 80438b8:	46bd      	mov	sp, r7
 80438ba:	bd80      	pop	{r7, pc}
 80438bc:	f010803f 	.word	0xf010803f

080438c0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80438c0:	b580      	push	{r7, lr}
 80438c2:	b084      	sub	sp, #16
 80438c4:	af00      	add	r7, sp, #0
 80438c6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80438c8:	687b      	ldr	r3, [r7, #4]
 80438ca:	2b00      	cmp	r3, #0
 80438cc:	d101      	bne.n	80438d2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80438ce:	2301      	movs	r3, #1
 80438d0:	e050      	b.n	8043974 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80438d2:	687b      	ldr	r3, [r7, #4]
 80438d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80438d8:	b2db      	uxtb	r3, r3
 80438da:	2b02      	cmp	r3, #2
 80438dc:	d101      	bne.n	80438e2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80438de:	2302      	movs	r3, #2
 80438e0:	e048      	b.n	8043974 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80438e2:	687b      	ldr	r3, [r7, #4]
 80438e4:	681b      	ldr	r3, [r3, #0]
 80438e6:	681a      	ldr	r2, [r3, #0]
 80438e8:	687b      	ldr	r3, [r7, #4]
 80438ea:	681b      	ldr	r3, [r3, #0]
 80438ec:	f022 0201 	bic.w	r2, r2, #1
 80438f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80438f2:	687b      	ldr	r3, [r7, #4]
 80438f4:	681b      	ldr	r3, [r3, #0]
 80438f6:	2200      	movs	r2, #0
 80438f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80438fa:	687b      	ldr	r3, [r7, #4]
 80438fc:	681b      	ldr	r3, [r3, #0]
 80438fe:	2200      	movs	r2, #0
 8043900:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8043902:	687b      	ldr	r3, [r7, #4]
 8043904:	681b      	ldr	r3, [r3, #0]
 8043906:	2200      	movs	r2, #0
 8043908:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 804390a:	687b      	ldr	r3, [r7, #4]
 804390c:	681b      	ldr	r3, [r3, #0]
 804390e:	2200      	movs	r2, #0
 8043910:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8043912:	687b      	ldr	r3, [r7, #4]
 8043914:	681b      	ldr	r3, [r3, #0]
 8043916:	2200      	movs	r2, #0
 8043918:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 804391a:	687b      	ldr	r3, [r7, #4]
 804391c:	681b      	ldr	r3, [r3, #0]
 804391e:	2221      	movs	r2, #33	; 0x21
 8043920:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8043922:	6878      	ldr	r0, [r7, #4]
 8043924:	f000 f82a 	bl	804397c <DMA_CalcBaseAndBitshift>
 8043928:	4603      	mov	r3, r0
 804392a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 804392c:	687b      	ldr	r3, [r7, #4]
 804392e:	2200      	movs	r2, #0
 8043930:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8043932:	687b      	ldr	r3, [r7, #4]
 8043934:	2200      	movs	r2, #0
 8043936:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8043938:	687b      	ldr	r3, [r7, #4]
 804393a:	2200      	movs	r2, #0
 804393c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 804393e:	687b      	ldr	r3, [r7, #4]
 8043940:	2200      	movs	r2, #0
 8043942:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8043944:	687b      	ldr	r3, [r7, #4]
 8043946:	2200      	movs	r2, #0
 8043948:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 804394a:	687b      	ldr	r3, [r7, #4]
 804394c:	2200      	movs	r2, #0
 804394e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043950:	687b      	ldr	r3, [r7, #4]
 8043952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043954:	223f      	movs	r2, #63	; 0x3f
 8043956:	409a      	lsls	r2, r3
 8043958:	68fb      	ldr	r3, [r7, #12]
 804395a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 804395c:	687b      	ldr	r3, [r7, #4]
 804395e:	2200      	movs	r2, #0
 8043960:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8043962:	687b      	ldr	r3, [r7, #4]
 8043964:	2200      	movs	r2, #0
 8043966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 804396a:	687b      	ldr	r3, [r7, #4]
 804396c:	2200      	movs	r2, #0
 804396e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8043972:	2300      	movs	r3, #0
}
 8043974:	4618      	mov	r0, r3
 8043976:	3710      	adds	r7, #16
 8043978:	46bd      	mov	sp, r7
 804397a:	bd80      	pop	{r7, pc}

0804397c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 804397c:	b480      	push	{r7}
 804397e:	b085      	sub	sp, #20
 8043980:	af00      	add	r7, sp, #0
 8043982:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8043984:	687b      	ldr	r3, [r7, #4]
 8043986:	681b      	ldr	r3, [r3, #0]
 8043988:	b2db      	uxtb	r3, r3
 804398a:	3b10      	subs	r3, #16
 804398c:	4a14      	ldr	r2, [pc, #80]	; (80439e0 <DMA_CalcBaseAndBitshift+0x64>)
 804398e:	fba2 2303 	umull	r2, r3, r2, r3
 8043992:	091b      	lsrs	r3, r3, #4
 8043994:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8043996:	4a13      	ldr	r2, [pc, #76]	; (80439e4 <DMA_CalcBaseAndBitshift+0x68>)
 8043998:	68fb      	ldr	r3, [r7, #12]
 804399a:	4413      	add	r3, r2
 804399c:	781b      	ldrb	r3, [r3, #0]
 804399e:	461a      	mov	r2, r3
 80439a0:	687b      	ldr	r3, [r7, #4]
 80439a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80439a4:	68fb      	ldr	r3, [r7, #12]
 80439a6:	2b03      	cmp	r3, #3
 80439a8:	d909      	bls.n	80439be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80439aa:	687b      	ldr	r3, [r7, #4]
 80439ac:	681b      	ldr	r3, [r3, #0]
 80439ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80439b2:	f023 0303 	bic.w	r3, r3, #3
 80439b6:	1d1a      	adds	r2, r3, #4
 80439b8:	687b      	ldr	r3, [r7, #4]
 80439ba:	659a      	str	r2, [r3, #88]	; 0x58
 80439bc:	e007      	b.n	80439ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80439be:	687b      	ldr	r3, [r7, #4]
 80439c0:	681b      	ldr	r3, [r3, #0]
 80439c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80439c6:	f023 0303 	bic.w	r3, r3, #3
 80439ca:	687a      	ldr	r2, [r7, #4]
 80439cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80439ce:	687b      	ldr	r3, [r7, #4]
 80439d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80439d2:	4618      	mov	r0, r3
 80439d4:	3714      	adds	r7, #20
 80439d6:	46bd      	mov	sp, r7
 80439d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80439dc:	4770      	bx	lr
 80439de:	bf00      	nop
 80439e0:	aaaaaaab 	.word	0xaaaaaaab
 80439e4:	08051004 	.word	0x08051004

080439e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80439e8:	b480      	push	{r7}
 80439ea:	b085      	sub	sp, #20
 80439ec:	af00      	add	r7, sp, #0
 80439ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80439f0:	2300      	movs	r3, #0
 80439f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80439f4:	687b      	ldr	r3, [r7, #4]
 80439f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80439f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80439fa:	687b      	ldr	r3, [r7, #4]
 80439fc:	699b      	ldr	r3, [r3, #24]
 80439fe:	2b00      	cmp	r3, #0
 8043a00:	d11f      	bne.n	8043a42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8043a02:	68bb      	ldr	r3, [r7, #8]
 8043a04:	2b03      	cmp	r3, #3
 8043a06:	d856      	bhi.n	8043ab6 <DMA_CheckFifoParam+0xce>
 8043a08:	a201      	add	r2, pc, #4	; (adr r2, 8043a10 <DMA_CheckFifoParam+0x28>)
 8043a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043a0e:	bf00      	nop
 8043a10:	08043a21 	.word	0x08043a21
 8043a14:	08043a33 	.word	0x08043a33
 8043a18:	08043a21 	.word	0x08043a21
 8043a1c:	08043ab7 	.word	0x08043ab7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8043a20:	687b      	ldr	r3, [r7, #4]
 8043a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8043a28:	2b00      	cmp	r3, #0
 8043a2a:	d046      	beq.n	8043aba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8043a2c:	2301      	movs	r3, #1
 8043a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8043a30:	e043      	b.n	8043aba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8043a32:	687b      	ldr	r3, [r7, #4]
 8043a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043a36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8043a3a:	d140      	bne.n	8043abe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8043a3c:	2301      	movs	r3, #1
 8043a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8043a40:	e03d      	b.n	8043abe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8043a42:	687b      	ldr	r3, [r7, #4]
 8043a44:	699b      	ldr	r3, [r3, #24]
 8043a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8043a4a:	d121      	bne.n	8043a90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8043a4c:	68bb      	ldr	r3, [r7, #8]
 8043a4e:	2b03      	cmp	r3, #3
 8043a50:	d837      	bhi.n	8043ac2 <DMA_CheckFifoParam+0xda>
 8043a52:	a201      	add	r2, pc, #4	; (adr r2, 8043a58 <DMA_CheckFifoParam+0x70>)
 8043a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043a58:	08043a69 	.word	0x08043a69
 8043a5c:	08043a6f 	.word	0x08043a6f
 8043a60:	08043a69 	.word	0x08043a69
 8043a64:	08043a81 	.word	0x08043a81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8043a68:	2301      	movs	r3, #1
 8043a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8043a6c:	e030      	b.n	8043ad0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8043a6e:	687b      	ldr	r3, [r7, #4]
 8043a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8043a76:	2b00      	cmp	r3, #0
 8043a78:	d025      	beq.n	8043ac6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8043a7a:	2301      	movs	r3, #1
 8043a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8043a7e:	e022      	b.n	8043ac6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8043a80:	687b      	ldr	r3, [r7, #4]
 8043a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043a84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8043a88:	d11f      	bne.n	8043aca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8043a8a:	2301      	movs	r3, #1
 8043a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8043a8e:	e01c      	b.n	8043aca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8043a90:	68bb      	ldr	r3, [r7, #8]
 8043a92:	2b02      	cmp	r3, #2
 8043a94:	d903      	bls.n	8043a9e <DMA_CheckFifoParam+0xb6>
 8043a96:	68bb      	ldr	r3, [r7, #8]
 8043a98:	2b03      	cmp	r3, #3
 8043a9a:	d003      	beq.n	8043aa4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8043a9c:	e018      	b.n	8043ad0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8043a9e:	2301      	movs	r3, #1
 8043aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8043aa2:	e015      	b.n	8043ad0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8043aa4:	687b      	ldr	r3, [r7, #4]
 8043aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8043aac:	2b00      	cmp	r3, #0
 8043aae:	d00e      	beq.n	8043ace <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8043ab0:	2301      	movs	r3, #1
 8043ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8043ab4:	e00b      	b.n	8043ace <DMA_CheckFifoParam+0xe6>
      break;
 8043ab6:	bf00      	nop
 8043ab8:	e00a      	b.n	8043ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8043aba:	bf00      	nop
 8043abc:	e008      	b.n	8043ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8043abe:	bf00      	nop
 8043ac0:	e006      	b.n	8043ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8043ac2:	bf00      	nop
 8043ac4:	e004      	b.n	8043ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8043ac6:	bf00      	nop
 8043ac8:	e002      	b.n	8043ad0 <DMA_CheckFifoParam+0xe8>
      break;   
 8043aca:	bf00      	nop
 8043acc:	e000      	b.n	8043ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8043ace:	bf00      	nop
    }
  } 
  
  return status; 
 8043ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8043ad2:	4618      	mov	r0, r3
 8043ad4:	3714      	adds	r7, #20
 8043ad6:	46bd      	mov	sp, r7
 8043ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043adc:	4770      	bx	lr
 8043ade:	bf00      	nop

08043ae0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8043ae0:	b580      	push	{r7, lr}
 8043ae2:	b082      	sub	sp, #8
 8043ae4:	af00      	add	r7, sp, #0
 8043ae6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8043ae8:	687b      	ldr	r3, [r7, #4]
 8043aea:	2b00      	cmp	r3, #0
 8043aec:	d101      	bne.n	8043af2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8043aee:	2301      	movs	r3, #1
 8043af0:	e03b      	b.n	8043b6a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8043af2:	687b      	ldr	r3, [r7, #4]
 8043af4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8043af8:	b2db      	uxtb	r3, r3
 8043afa:	2b00      	cmp	r3, #0
 8043afc:	d106      	bne.n	8043b0c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8043afe:	687b      	ldr	r3, [r7, #4]
 8043b00:	2200      	movs	r2, #0
 8043b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8043b06:	6878      	ldr	r0, [r7, #4]
 8043b08:	f7fd fd94 	bl	8041634 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8043b0c:	687b      	ldr	r3, [r7, #4]
 8043b0e:	2202      	movs	r2, #2
 8043b10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8043b14:	687b      	ldr	r3, [r7, #4]
 8043b16:	681b      	ldr	r3, [r3, #0]
 8043b18:	681b      	ldr	r3, [r3, #0]
 8043b1a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8043b1e:	687b      	ldr	r3, [r7, #4]
 8043b20:	685a      	ldr	r2, [r3, #4]
 8043b22:	687b      	ldr	r3, [r7, #4]
 8043b24:	681b      	ldr	r3, [r3, #0]
 8043b26:	430a      	orrs	r2, r1
 8043b28:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8043b2a:	687b      	ldr	r3, [r7, #4]
 8043b2c:	681b      	ldr	r3, [r3, #0]
 8043b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8043b30:	f023 0107 	bic.w	r1, r3, #7
 8043b34:	687b      	ldr	r3, [r7, #4]
 8043b36:	689a      	ldr	r2, [r3, #8]
 8043b38:	687b      	ldr	r3, [r7, #4]
 8043b3a:	681b      	ldr	r3, [r3, #0]
 8043b3c:	430a      	orrs	r2, r1
 8043b3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8043b40:	687b      	ldr	r3, [r7, #4]
 8043b42:	681b      	ldr	r3, [r3, #0]
 8043b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043b46:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8043b4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8043b4e:	687a      	ldr	r2, [r7, #4]
 8043b50:	68d1      	ldr	r1, [r2, #12]
 8043b52:	687a      	ldr	r2, [r7, #4]
 8043b54:	6812      	ldr	r2, [r2, #0]
 8043b56:	430b      	orrs	r3, r1
 8043b58:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8043b5a:	687b      	ldr	r3, [r7, #4]
 8043b5c:	2200      	movs	r2, #0
 8043b5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8043b60:	687b      	ldr	r3, [r7, #4]
 8043b62:	2201      	movs	r2, #1
 8043b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8043b68:	2300      	movs	r3, #0
}
 8043b6a:	4618      	mov	r0, r3
 8043b6c:	3708      	adds	r7, #8
 8043b6e:	46bd      	mov	sp, r7
 8043b70:	bd80      	pop	{r7, pc}

08043b72 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8043b72:	b580      	push	{r7, lr}
 8043b74:	b086      	sub	sp, #24
 8043b76:	af02      	add	r7, sp, #8
 8043b78:	60f8      	str	r0, [r7, #12]
 8043b7a:	60b9      	str	r1, [r7, #8]
 8043b7c:	607a      	str	r2, [r7, #4]
 8043b7e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8043b80:	68fb      	ldr	r3, [r7, #12]
 8043b82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8043b86:	2b01      	cmp	r3, #1
 8043b88:	d101      	bne.n	8043b8e <HAL_DMA2D_Start+0x1c>
 8043b8a:	2302      	movs	r3, #2
 8043b8c:	e018      	b.n	8043bc0 <HAL_DMA2D_Start+0x4e>
 8043b8e:	68fb      	ldr	r3, [r7, #12]
 8043b90:	2201      	movs	r2, #1
 8043b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8043b96:	68fb      	ldr	r3, [r7, #12]
 8043b98:	2202      	movs	r2, #2
 8043b9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8043b9e:	69bb      	ldr	r3, [r7, #24]
 8043ba0:	9300      	str	r3, [sp, #0]
 8043ba2:	683b      	ldr	r3, [r7, #0]
 8043ba4:	687a      	ldr	r2, [r7, #4]
 8043ba6:	68b9      	ldr	r1, [r7, #8]
 8043ba8:	68f8      	ldr	r0, [r7, #12]
 8043baa:	f000 fa99 	bl	80440e0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8043bae:	68fb      	ldr	r3, [r7, #12]
 8043bb0:	681b      	ldr	r3, [r3, #0]
 8043bb2:	681a      	ldr	r2, [r3, #0]
 8043bb4:	68fb      	ldr	r3, [r7, #12]
 8043bb6:	681b      	ldr	r3, [r3, #0]
 8043bb8:	f042 0201 	orr.w	r2, r2, #1
 8043bbc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8043bbe:	2300      	movs	r3, #0
}
 8043bc0:	4618      	mov	r0, r3
 8043bc2:	3710      	adds	r7, #16
 8043bc4:	46bd      	mov	sp, r7
 8043bc6:	bd80      	pop	{r7, pc}

08043bc8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8043bc8:	b580      	push	{r7, lr}
 8043bca:	b086      	sub	sp, #24
 8043bcc:	af00      	add	r7, sp, #0
 8043bce:	6078      	str	r0, [r7, #4]
 8043bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8043bd2:	2300      	movs	r3, #0
 8043bd4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8043bd6:	687b      	ldr	r3, [r7, #4]
 8043bd8:	681b      	ldr	r3, [r3, #0]
 8043bda:	681b      	ldr	r3, [r3, #0]
 8043bdc:	f003 0301 	and.w	r3, r3, #1
 8043be0:	2b00      	cmp	r3, #0
 8043be2:	d056      	beq.n	8043c92 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8043be4:	f7ff fc90 	bl	8043508 <HAL_GetTick>
 8043be8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8043bea:	e04b      	b.n	8043c84 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8043bec:	687b      	ldr	r3, [r7, #4]
 8043bee:	681b      	ldr	r3, [r3, #0]
 8043bf0:	685b      	ldr	r3, [r3, #4]
 8043bf2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8043bf4:	68fb      	ldr	r3, [r7, #12]
 8043bf6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8043bfa:	2b00      	cmp	r3, #0
 8043bfc:	d023      	beq.n	8043c46 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8043bfe:	68fb      	ldr	r3, [r7, #12]
 8043c00:	f003 0320 	and.w	r3, r3, #32
 8043c04:	2b00      	cmp	r3, #0
 8043c06:	d005      	beq.n	8043c14 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8043c08:	687b      	ldr	r3, [r7, #4]
 8043c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043c0c:	f043 0202 	orr.w	r2, r3, #2
 8043c10:	687b      	ldr	r3, [r7, #4]
 8043c12:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8043c14:	68fb      	ldr	r3, [r7, #12]
 8043c16:	f003 0301 	and.w	r3, r3, #1
 8043c1a:	2b00      	cmp	r3, #0
 8043c1c:	d005      	beq.n	8043c2a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8043c1e:	687b      	ldr	r3, [r7, #4]
 8043c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043c22:	f043 0201 	orr.w	r2, r3, #1
 8043c26:	687b      	ldr	r3, [r7, #4]
 8043c28:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8043c2a:	687b      	ldr	r3, [r7, #4]
 8043c2c:	681b      	ldr	r3, [r3, #0]
 8043c2e:	2221      	movs	r2, #33	; 0x21
 8043c30:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043c32:	687b      	ldr	r3, [r7, #4]
 8043c34:	2204      	movs	r2, #4
 8043c36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8043c3a:	687b      	ldr	r3, [r7, #4]
 8043c3c:	2200      	movs	r2, #0
 8043c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8043c42:	2301      	movs	r3, #1
 8043c44:	e0a5      	b.n	8043d92 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8043c46:	683b      	ldr	r3, [r7, #0]
 8043c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043c4c:	d01a      	beq.n	8043c84 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8043c4e:	f7ff fc5b 	bl	8043508 <HAL_GetTick>
 8043c52:	4602      	mov	r2, r0
 8043c54:	697b      	ldr	r3, [r7, #20]
 8043c56:	1ad3      	subs	r3, r2, r3
 8043c58:	683a      	ldr	r2, [r7, #0]
 8043c5a:	429a      	cmp	r2, r3
 8043c5c:	d302      	bcc.n	8043c64 <HAL_DMA2D_PollForTransfer+0x9c>
 8043c5e:	683b      	ldr	r3, [r7, #0]
 8043c60:	2b00      	cmp	r3, #0
 8043c62:	d10f      	bne.n	8043c84 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8043c64:	687b      	ldr	r3, [r7, #4]
 8043c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043c68:	f043 0220 	orr.w	r2, r3, #32
 8043c6c:	687b      	ldr	r3, [r7, #4]
 8043c6e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8043c70:	687b      	ldr	r3, [r7, #4]
 8043c72:	2203      	movs	r2, #3
 8043c74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8043c78:	687b      	ldr	r3, [r7, #4]
 8043c7a:	2200      	movs	r2, #0
 8043c7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8043c80:	2303      	movs	r3, #3
 8043c82:	e086      	b.n	8043d92 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8043c84:	687b      	ldr	r3, [r7, #4]
 8043c86:	681b      	ldr	r3, [r3, #0]
 8043c88:	685b      	ldr	r3, [r3, #4]
 8043c8a:	f003 0302 	and.w	r3, r3, #2
 8043c8e:	2b00      	cmp	r3, #0
 8043c90:	d0ac      	beq.n	8043bec <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8043c92:	687b      	ldr	r3, [r7, #4]
 8043c94:	681b      	ldr	r3, [r3, #0]
 8043c96:	69db      	ldr	r3, [r3, #28]
 8043c98:	f003 0320 	and.w	r3, r3, #32
 8043c9c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8043c9e:	687b      	ldr	r3, [r7, #4]
 8043ca0:	681b      	ldr	r3, [r3, #0]
 8043ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043ca4:	f003 0320 	and.w	r3, r3, #32
 8043ca8:	693a      	ldr	r2, [r7, #16]
 8043caa:	4313      	orrs	r3, r2
 8043cac:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8043cae:	693b      	ldr	r3, [r7, #16]
 8043cb0:	2b00      	cmp	r3, #0
 8043cb2:	d061      	beq.n	8043d78 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8043cb4:	f7ff fc28 	bl	8043508 <HAL_GetTick>
 8043cb8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8043cba:	e056      	b.n	8043d6a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8043cbc:	687b      	ldr	r3, [r7, #4]
 8043cbe:	681b      	ldr	r3, [r3, #0]
 8043cc0:	685b      	ldr	r3, [r3, #4]
 8043cc2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8043cc4:	68fb      	ldr	r3, [r7, #12]
 8043cc6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8043cca:	2b00      	cmp	r3, #0
 8043ccc:	d02e      	beq.n	8043d2c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8043cce:	68fb      	ldr	r3, [r7, #12]
 8043cd0:	f003 0308 	and.w	r3, r3, #8
 8043cd4:	2b00      	cmp	r3, #0
 8043cd6:	d005      	beq.n	8043ce4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8043cd8:	687b      	ldr	r3, [r7, #4]
 8043cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043cdc:	f043 0204 	orr.w	r2, r3, #4
 8043ce0:	687b      	ldr	r3, [r7, #4]
 8043ce2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8043ce4:	68fb      	ldr	r3, [r7, #12]
 8043ce6:	f003 0320 	and.w	r3, r3, #32
 8043cea:	2b00      	cmp	r3, #0
 8043cec:	d005      	beq.n	8043cfa <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8043cee:	687b      	ldr	r3, [r7, #4]
 8043cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043cf2:	f043 0202 	orr.w	r2, r3, #2
 8043cf6:	687b      	ldr	r3, [r7, #4]
 8043cf8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8043cfa:	68fb      	ldr	r3, [r7, #12]
 8043cfc:	f003 0301 	and.w	r3, r3, #1
 8043d00:	2b00      	cmp	r3, #0
 8043d02:	d005      	beq.n	8043d10 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8043d04:	687b      	ldr	r3, [r7, #4]
 8043d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043d08:	f043 0201 	orr.w	r2, r3, #1
 8043d0c:	687b      	ldr	r3, [r7, #4]
 8043d0e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8043d10:	687b      	ldr	r3, [r7, #4]
 8043d12:	681b      	ldr	r3, [r3, #0]
 8043d14:	2229      	movs	r2, #41	; 0x29
 8043d16:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043d18:	687b      	ldr	r3, [r7, #4]
 8043d1a:	2204      	movs	r2, #4
 8043d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8043d20:	687b      	ldr	r3, [r7, #4]
 8043d22:	2200      	movs	r2, #0
 8043d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8043d28:	2301      	movs	r3, #1
 8043d2a:	e032      	b.n	8043d92 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8043d2c:	683b      	ldr	r3, [r7, #0]
 8043d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043d32:	d01a      	beq.n	8043d6a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8043d34:	f7ff fbe8 	bl	8043508 <HAL_GetTick>
 8043d38:	4602      	mov	r2, r0
 8043d3a:	697b      	ldr	r3, [r7, #20]
 8043d3c:	1ad3      	subs	r3, r2, r3
 8043d3e:	683a      	ldr	r2, [r7, #0]
 8043d40:	429a      	cmp	r2, r3
 8043d42:	d302      	bcc.n	8043d4a <HAL_DMA2D_PollForTransfer+0x182>
 8043d44:	683b      	ldr	r3, [r7, #0]
 8043d46:	2b00      	cmp	r3, #0
 8043d48:	d10f      	bne.n	8043d6a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8043d4a:	687b      	ldr	r3, [r7, #4]
 8043d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043d4e:	f043 0220 	orr.w	r2, r3, #32
 8043d52:	687b      	ldr	r3, [r7, #4]
 8043d54:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8043d56:	687b      	ldr	r3, [r7, #4]
 8043d58:	2203      	movs	r2, #3
 8043d5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8043d5e:	687b      	ldr	r3, [r7, #4]
 8043d60:	2200      	movs	r2, #0
 8043d62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8043d66:	2303      	movs	r3, #3
 8043d68:	e013      	b.n	8043d92 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8043d6a:	687b      	ldr	r3, [r7, #4]
 8043d6c:	681b      	ldr	r3, [r3, #0]
 8043d6e:	685b      	ldr	r3, [r3, #4]
 8043d70:	f003 0310 	and.w	r3, r3, #16
 8043d74:	2b00      	cmp	r3, #0
 8043d76:	d0a1      	beq.n	8043cbc <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8043d78:	687b      	ldr	r3, [r7, #4]
 8043d7a:	681b      	ldr	r3, [r3, #0]
 8043d7c:	2212      	movs	r2, #18
 8043d7e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8043d80:	687b      	ldr	r3, [r7, #4]
 8043d82:	2201      	movs	r2, #1
 8043d84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8043d88:	687b      	ldr	r3, [r7, #4]
 8043d8a:	2200      	movs	r2, #0
 8043d8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8043d90:	2300      	movs	r3, #0
}
 8043d92:	4618      	mov	r0, r3
 8043d94:	3718      	adds	r7, #24
 8043d96:	46bd      	mov	sp, r7
 8043d98:	bd80      	pop	{r7, pc}

08043d9a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8043d9a:	b580      	push	{r7, lr}
 8043d9c:	b084      	sub	sp, #16
 8043d9e:	af00      	add	r7, sp, #0
 8043da0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8043da2:	687b      	ldr	r3, [r7, #4]
 8043da4:	681b      	ldr	r3, [r3, #0]
 8043da6:	685b      	ldr	r3, [r3, #4]
 8043da8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8043daa:	687b      	ldr	r3, [r7, #4]
 8043dac:	681b      	ldr	r3, [r3, #0]
 8043dae:	681b      	ldr	r3, [r3, #0]
 8043db0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8043db2:	68fb      	ldr	r3, [r7, #12]
 8043db4:	f003 0301 	and.w	r3, r3, #1
 8043db8:	2b00      	cmp	r3, #0
 8043dba:	d026      	beq.n	8043e0a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8043dbc:	68bb      	ldr	r3, [r7, #8]
 8043dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043dc2:	2b00      	cmp	r3, #0
 8043dc4:	d021      	beq.n	8043e0a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8043dc6:	687b      	ldr	r3, [r7, #4]
 8043dc8:	681b      	ldr	r3, [r3, #0]
 8043dca:	681a      	ldr	r2, [r3, #0]
 8043dcc:	687b      	ldr	r3, [r7, #4]
 8043dce:	681b      	ldr	r3, [r3, #0]
 8043dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8043dd4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8043dd6:	687b      	ldr	r3, [r7, #4]
 8043dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043dda:	f043 0201 	orr.w	r2, r3, #1
 8043dde:	687b      	ldr	r3, [r7, #4]
 8043de0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8043de2:	687b      	ldr	r3, [r7, #4]
 8043de4:	681b      	ldr	r3, [r3, #0]
 8043de6:	2201      	movs	r2, #1
 8043de8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043dea:	687b      	ldr	r3, [r7, #4]
 8043dec:	2204      	movs	r2, #4
 8043dee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043df2:	687b      	ldr	r3, [r7, #4]
 8043df4:	2200      	movs	r2, #0
 8043df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8043dfa:	687b      	ldr	r3, [r7, #4]
 8043dfc:	695b      	ldr	r3, [r3, #20]
 8043dfe:	2b00      	cmp	r3, #0
 8043e00:	d003      	beq.n	8043e0a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8043e02:	687b      	ldr	r3, [r7, #4]
 8043e04:	695b      	ldr	r3, [r3, #20]
 8043e06:	6878      	ldr	r0, [r7, #4]
 8043e08:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8043e0a:	68fb      	ldr	r3, [r7, #12]
 8043e0c:	f003 0320 	and.w	r3, r3, #32
 8043e10:	2b00      	cmp	r3, #0
 8043e12:	d026      	beq.n	8043e62 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8043e14:	68bb      	ldr	r3, [r7, #8]
 8043e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8043e1a:	2b00      	cmp	r3, #0
 8043e1c:	d021      	beq.n	8043e62 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8043e1e:	687b      	ldr	r3, [r7, #4]
 8043e20:	681b      	ldr	r3, [r3, #0]
 8043e22:	681a      	ldr	r2, [r3, #0]
 8043e24:	687b      	ldr	r3, [r7, #4]
 8043e26:	681b      	ldr	r3, [r3, #0]
 8043e28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8043e2c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8043e2e:	687b      	ldr	r3, [r7, #4]
 8043e30:	681b      	ldr	r3, [r3, #0]
 8043e32:	2220      	movs	r2, #32
 8043e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8043e36:	687b      	ldr	r3, [r7, #4]
 8043e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043e3a:	f043 0202 	orr.w	r2, r3, #2
 8043e3e:	687b      	ldr	r3, [r7, #4]
 8043e40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043e42:	687b      	ldr	r3, [r7, #4]
 8043e44:	2204      	movs	r2, #4
 8043e46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043e4a:	687b      	ldr	r3, [r7, #4]
 8043e4c:	2200      	movs	r2, #0
 8043e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8043e52:	687b      	ldr	r3, [r7, #4]
 8043e54:	695b      	ldr	r3, [r3, #20]
 8043e56:	2b00      	cmp	r3, #0
 8043e58:	d003      	beq.n	8043e62 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8043e5a:	687b      	ldr	r3, [r7, #4]
 8043e5c:	695b      	ldr	r3, [r3, #20]
 8043e5e:	6878      	ldr	r0, [r7, #4]
 8043e60:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8043e62:	68fb      	ldr	r3, [r7, #12]
 8043e64:	f003 0308 	and.w	r3, r3, #8
 8043e68:	2b00      	cmp	r3, #0
 8043e6a:	d026      	beq.n	8043eba <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8043e6c:	68bb      	ldr	r3, [r7, #8]
 8043e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8043e72:	2b00      	cmp	r3, #0
 8043e74:	d021      	beq.n	8043eba <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8043e76:	687b      	ldr	r3, [r7, #4]
 8043e78:	681b      	ldr	r3, [r3, #0]
 8043e7a:	681a      	ldr	r2, [r3, #0]
 8043e7c:	687b      	ldr	r3, [r7, #4]
 8043e7e:	681b      	ldr	r3, [r3, #0]
 8043e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8043e84:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8043e86:	687b      	ldr	r3, [r7, #4]
 8043e88:	681b      	ldr	r3, [r3, #0]
 8043e8a:	2208      	movs	r2, #8
 8043e8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8043e8e:	687b      	ldr	r3, [r7, #4]
 8043e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043e92:	f043 0204 	orr.w	r2, r3, #4
 8043e96:	687b      	ldr	r3, [r7, #4]
 8043e98:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043e9a:	687b      	ldr	r3, [r7, #4]
 8043e9c:	2204      	movs	r2, #4
 8043e9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043ea2:	687b      	ldr	r3, [r7, #4]
 8043ea4:	2200      	movs	r2, #0
 8043ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8043eaa:	687b      	ldr	r3, [r7, #4]
 8043eac:	695b      	ldr	r3, [r3, #20]
 8043eae:	2b00      	cmp	r3, #0
 8043eb0:	d003      	beq.n	8043eba <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8043eb2:	687b      	ldr	r3, [r7, #4]
 8043eb4:	695b      	ldr	r3, [r3, #20]
 8043eb6:	6878      	ldr	r0, [r7, #4]
 8043eb8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8043eba:	68fb      	ldr	r3, [r7, #12]
 8043ebc:	f003 0304 	and.w	r3, r3, #4
 8043ec0:	2b00      	cmp	r3, #0
 8043ec2:	d013      	beq.n	8043eec <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8043ec4:	68bb      	ldr	r3, [r7, #8]
 8043ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8043eca:	2b00      	cmp	r3, #0
 8043ecc:	d00e      	beq.n	8043eec <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8043ece:	687b      	ldr	r3, [r7, #4]
 8043ed0:	681b      	ldr	r3, [r3, #0]
 8043ed2:	681a      	ldr	r2, [r3, #0]
 8043ed4:	687b      	ldr	r3, [r7, #4]
 8043ed6:	681b      	ldr	r3, [r3, #0]
 8043ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8043edc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8043ede:	687b      	ldr	r3, [r7, #4]
 8043ee0:	681b      	ldr	r3, [r3, #0]
 8043ee2:	2204      	movs	r2, #4
 8043ee4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8043ee6:	6878      	ldr	r0, [r7, #4]
 8043ee8:	f000 f853 	bl	8043f92 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8043eec:	68fb      	ldr	r3, [r7, #12]
 8043eee:	f003 0302 	and.w	r3, r3, #2
 8043ef2:	2b00      	cmp	r3, #0
 8043ef4:	d024      	beq.n	8043f40 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8043ef6:	68bb      	ldr	r3, [r7, #8]
 8043ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8043efc:	2b00      	cmp	r3, #0
 8043efe:	d01f      	beq.n	8043f40 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8043f00:	687b      	ldr	r3, [r7, #4]
 8043f02:	681b      	ldr	r3, [r3, #0]
 8043f04:	681a      	ldr	r2, [r3, #0]
 8043f06:	687b      	ldr	r3, [r7, #4]
 8043f08:	681b      	ldr	r3, [r3, #0]
 8043f0a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8043f0e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8043f10:	687b      	ldr	r3, [r7, #4]
 8043f12:	681b      	ldr	r3, [r3, #0]
 8043f14:	2202      	movs	r2, #2
 8043f16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8043f18:	687b      	ldr	r3, [r7, #4]
 8043f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8043f1c:	687b      	ldr	r3, [r7, #4]
 8043f1e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8043f20:	687b      	ldr	r3, [r7, #4]
 8043f22:	2201      	movs	r2, #1
 8043f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043f28:	687b      	ldr	r3, [r7, #4]
 8043f2a:	2200      	movs	r2, #0
 8043f2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8043f30:	687b      	ldr	r3, [r7, #4]
 8043f32:	691b      	ldr	r3, [r3, #16]
 8043f34:	2b00      	cmp	r3, #0
 8043f36:	d003      	beq.n	8043f40 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8043f38:	687b      	ldr	r3, [r7, #4]
 8043f3a:	691b      	ldr	r3, [r3, #16]
 8043f3c:	6878      	ldr	r0, [r7, #4]
 8043f3e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8043f40:	68fb      	ldr	r3, [r7, #12]
 8043f42:	f003 0310 	and.w	r3, r3, #16
 8043f46:	2b00      	cmp	r3, #0
 8043f48:	d01f      	beq.n	8043f8a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8043f4a:	68bb      	ldr	r3, [r7, #8]
 8043f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8043f50:	2b00      	cmp	r3, #0
 8043f52:	d01a      	beq.n	8043f8a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8043f54:	687b      	ldr	r3, [r7, #4]
 8043f56:	681b      	ldr	r3, [r3, #0]
 8043f58:	681a      	ldr	r2, [r3, #0]
 8043f5a:	687b      	ldr	r3, [r7, #4]
 8043f5c:	681b      	ldr	r3, [r3, #0]
 8043f5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8043f62:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8043f64:	687b      	ldr	r3, [r7, #4]
 8043f66:	681b      	ldr	r3, [r3, #0]
 8043f68:	2210      	movs	r2, #16
 8043f6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8043f6c:	687b      	ldr	r3, [r7, #4]
 8043f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8043f70:	687b      	ldr	r3, [r7, #4]
 8043f72:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8043f74:	687b      	ldr	r3, [r7, #4]
 8043f76:	2201      	movs	r2, #1
 8043f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043f7c:	687b      	ldr	r3, [r7, #4]
 8043f7e:	2200      	movs	r2, #0
 8043f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8043f84:	6878      	ldr	r0, [r7, #4]
 8043f86:	f000 f80e 	bl	8043fa6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8043f8a:	bf00      	nop
 8043f8c:	3710      	adds	r7, #16
 8043f8e:	46bd      	mov	sp, r7
 8043f90:	bd80      	pop	{r7, pc}

08043f92 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8043f92:	b480      	push	{r7}
 8043f94:	b083      	sub	sp, #12
 8043f96:	af00      	add	r7, sp, #0
 8043f98:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8043f9a:	bf00      	nop
 8043f9c:	370c      	adds	r7, #12
 8043f9e:	46bd      	mov	sp, r7
 8043fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043fa4:	4770      	bx	lr

08043fa6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8043fa6:	b480      	push	{r7}
 8043fa8:	b083      	sub	sp, #12
 8043faa:	af00      	add	r7, sp, #0
 8043fac:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8043fae:	bf00      	nop
 8043fb0:	370c      	adds	r7, #12
 8043fb2:	46bd      	mov	sp, r7
 8043fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043fb8:	4770      	bx	lr
	...

08043fbc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8043fbc:	b480      	push	{r7}
 8043fbe:	b087      	sub	sp, #28
 8043fc0:	af00      	add	r7, sp, #0
 8043fc2:	6078      	str	r0, [r7, #4]
 8043fc4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8043fc6:	687b      	ldr	r3, [r7, #4]
 8043fc8:	685b      	ldr	r3, [r3, #4]
 8043fca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8043fce:	687b      	ldr	r3, [r7, #4]
 8043fd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8043fd4:	2b01      	cmp	r3, #1
 8043fd6:	d101      	bne.n	8043fdc <HAL_DMA2D_ConfigLayer+0x20>
 8043fd8:	2302      	movs	r3, #2
 8043fda:	e079      	b.n	80440d0 <HAL_DMA2D_ConfigLayer+0x114>
 8043fdc:	687b      	ldr	r3, [r7, #4]
 8043fde:	2201      	movs	r2, #1
 8043fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8043fe4:	687b      	ldr	r3, [r7, #4]
 8043fe6:	2202      	movs	r2, #2
 8043fe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8043fec:	683b      	ldr	r3, [r7, #0]
 8043fee:	011b      	lsls	r3, r3, #4
 8043ff0:	3318      	adds	r3, #24
 8043ff2:	687a      	ldr	r2, [r7, #4]
 8043ff4:	4413      	add	r3, r2
 8043ff6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8043ff8:	693b      	ldr	r3, [r7, #16]
 8043ffa:	685a      	ldr	r2, [r3, #4]
 8043ffc:	693b      	ldr	r3, [r7, #16]
 8043ffe:	689b      	ldr	r3, [r3, #8]
 8044000:	041b      	lsls	r3, r3, #16
 8044002:	4313      	orrs	r3, r2
 8044004:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8044006:	4b35      	ldr	r3, [pc, #212]	; (80440dc <HAL_DMA2D_ConfigLayer+0x120>)
 8044008:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 804400a:	693b      	ldr	r3, [r7, #16]
 804400c:	685b      	ldr	r3, [r3, #4]
 804400e:	2b0a      	cmp	r3, #10
 8044010:	d003      	beq.n	804401a <HAL_DMA2D_ConfigLayer+0x5e>
 8044012:	693b      	ldr	r3, [r7, #16]
 8044014:	685b      	ldr	r3, [r3, #4]
 8044016:	2b09      	cmp	r3, #9
 8044018:	d107      	bne.n	804402a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 804401a:	693b      	ldr	r3, [r7, #16]
 804401c:	68db      	ldr	r3, [r3, #12]
 804401e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8044022:	697a      	ldr	r2, [r7, #20]
 8044024:	4313      	orrs	r3, r2
 8044026:	617b      	str	r3, [r7, #20]
 8044028:	e005      	b.n	8044036 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 804402a:	693b      	ldr	r3, [r7, #16]
 804402c:	68db      	ldr	r3, [r3, #12]
 804402e:	061b      	lsls	r3, r3, #24
 8044030:	697a      	ldr	r2, [r7, #20]
 8044032:	4313      	orrs	r3, r2
 8044034:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8044036:	683b      	ldr	r3, [r7, #0]
 8044038:	2b00      	cmp	r3, #0
 804403a:	d120      	bne.n	804407e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 804403c:	687b      	ldr	r3, [r7, #4]
 804403e:	681b      	ldr	r3, [r3, #0]
 8044040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8044042:	68fb      	ldr	r3, [r7, #12]
 8044044:	43db      	mvns	r3, r3
 8044046:	ea02 0103 	and.w	r1, r2, r3
 804404a:	687b      	ldr	r3, [r7, #4]
 804404c:	681b      	ldr	r3, [r3, #0]
 804404e:	697a      	ldr	r2, [r7, #20]
 8044050:	430a      	orrs	r2, r1
 8044052:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8044054:	687b      	ldr	r3, [r7, #4]
 8044056:	681b      	ldr	r3, [r3, #0]
 8044058:	693a      	ldr	r2, [r7, #16]
 804405a:	6812      	ldr	r2, [r2, #0]
 804405c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 804405e:	693b      	ldr	r3, [r7, #16]
 8044060:	685b      	ldr	r3, [r3, #4]
 8044062:	2b0a      	cmp	r3, #10
 8044064:	d003      	beq.n	804406e <HAL_DMA2D_ConfigLayer+0xb2>
 8044066:	693b      	ldr	r3, [r7, #16]
 8044068:	685b      	ldr	r3, [r3, #4]
 804406a:	2b09      	cmp	r3, #9
 804406c:	d127      	bne.n	80440be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 804406e:	693b      	ldr	r3, [r7, #16]
 8044070:	68da      	ldr	r2, [r3, #12]
 8044072:	687b      	ldr	r3, [r7, #4]
 8044074:	681b      	ldr	r3, [r3, #0]
 8044076:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 804407a:	629a      	str	r2, [r3, #40]	; 0x28
 804407c:	e01f      	b.n	80440be <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 804407e:	687b      	ldr	r3, [r7, #4]
 8044080:	681b      	ldr	r3, [r3, #0]
 8044082:	69da      	ldr	r2, [r3, #28]
 8044084:	68fb      	ldr	r3, [r7, #12]
 8044086:	43db      	mvns	r3, r3
 8044088:	ea02 0103 	and.w	r1, r2, r3
 804408c:	687b      	ldr	r3, [r7, #4]
 804408e:	681b      	ldr	r3, [r3, #0]
 8044090:	697a      	ldr	r2, [r7, #20]
 8044092:	430a      	orrs	r2, r1
 8044094:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8044096:	687b      	ldr	r3, [r7, #4]
 8044098:	681b      	ldr	r3, [r3, #0]
 804409a:	693a      	ldr	r2, [r7, #16]
 804409c:	6812      	ldr	r2, [r2, #0]
 804409e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80440a0:	693b      	ldr	r3, [r7, #16]
 80440a2:	685b      	ldr	r3, [r3, #4]
 80440a4:	2b0a      	cmp	r3, #10
 80440a6:	d003      	beq.n	80440b0 <HAL_DMA2D_ConfigLayer+0xf4>
 80440a8:	693b      	ldr	r3, [r7, #16]
 80440aa:	685b      	ldr	r3, [r3, #4]
 80440ac:	2b09      	cmp	r3, #9
 80440ae:	d106      	bne.n	80440be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80440b0:	693b      	ldr	r3, [r7, #16]
 80440b2:	68da      	ldr	r2, [r3, #12]
 80440b4:	687b      	ldr	r3, [r7, #4]
 80440b6:	681b      	ldr	r3, [r3, #0]
 80440b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80440bc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80440be:	687b      	ldr	r3, [r7, #4]
 80440c0:	2201      	movs	r2, #1
 80440c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80440c6:	687b      	ldr	r3, [r7, #4]
 80440c8:	2200      	movs	r2, #0
 80440ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80440ce:	2300      	movs	r3, #0
}
 80440d0:	4618      	mov	r0, r3
 80440d2:	371c      	adds	r7, #28
 80440d4:	46bd      	mov	sp, r7
 80440d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80440da:	4770      	bx	lr
 80440dc:	ff03000f 	.word	0xff03000f

080440e0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80440e0:	b480      	push	{r7}
 80440e2:	b08b      	sub	sp, #44	; 0x2c
 80440e4:	af00      	add	r7, sp, #0
 80440e6:	60f8      	str	r0, [r7, #12]
 80440e8:	60b9      	str	r1, [r7, #8]
 80440ea:	607a      	str	r2, [r7, #4]
 80440ec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80440ee:	68fb      	ldr	r3, [r7, #12]
 80440f0:	681b      	ldr	r3, [r3, #0]
 80440f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80440f4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80440f8:	683b      	ldr	r3, [r7, #0]
 80440fa:	041a      	lsls	r2, r3, #16
 80440fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80440fe:	431a      	orrs	r2, r3
 8044100:	68fb      	ldr	r3, [r7, #12]
 8044102:	681b      	ldr	r3, [r3, #0]
 8044104:	430a      	orrs	r2, r1
 8044106:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8044108:	68fb      	ldr	r3, [r7, #12]
 804410a:	681b      	ldr	r3, [r3, #0]
 804410c:	687a      	ldr	r2, [r7, #4]
 804410e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8044110:	68fb      	ldr	r3, [r7, #12]
 8044112:	685b      	ldr	r3, [r3, #4]
 8044114:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8044118:	d174      	bne.n	8044204 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 804411a:	68bb      	ldr	r3, [r7, #8]
 804411c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8044120:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8044122:	68bb      	ldr	r3, [r7, #8]
 8044124:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8044128:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 804412a:	68bb      	ldr	r3, [r7, #8]
 804412c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8044130:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8044132:	68bb      	ldr	r3, [r7, #8]
 8044134:	b2db      	uxtb	r3, r3
 8044136:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8044138:	68fb      	ldr	r3, [r7, #12]
 804413a:	689b      	ldr	r3, [r3, #8]
 804413c:	2b00      	cmp	r3, #0
 804413e:	d108      	bne.n	8044152 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8044140:	69ba      	ldr	r2, [r7, #24]
 8044142:	69fb      	ldr	r3, [r7, #28]
 8044144:	431a      	orrs	r2, r3
 8044146:	6a3b      	ldr	r3, [r7, #32]
 8044148:	4313      	orrs	r3, r2
 804414a:	697a      	ldr	r2, [r7, #20]
 804414c:	4313      	orrs	r3, r2
 804414e:	627b      	str	r3, [r7, #36]	; 0x24
 8044150:	e053      	b.n	80441fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8044152:	68fb      	ldr	r3, [r7, #12]
 8044154:	689b      	ldr	r3, [r3, #8]
 8044156:	2b01      	cmp	r3, #1
 8044158:	d106      	bne.n	8044168 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 804415a:	69ba      	ldr	r2, [r7, #24]
 804415c:	69fb      	ldr	r3, [r7, #28]
 804415e:	4313      	orrs	r3, r2
 8044160:	697a      	ldr	r2, [r7, #20]
 8044162:	4313      	orrs	r3, r2
 8044164:	627b      	str	r3, [r7, #36]	; 0x24
 8044166:	e048      	b.n	80441fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8044168:	68fb      	ldr	r3, [r7, #12]
 804416a:	689b      	ldr	r3, [r3, #8]
 804416c:	2b02      	cmp	r3, #2
 804416e:	d111      	bne.n	8044194 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8044170:	69fb      	ldr	r3, [r7, #28]
 8044172:	0cdb      	lsrs	r3, r3, #19
 8044174:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8044176:	69bb      	ldr	r3, [r7, #24]
 8044178:	0a9b      	lsrs	r3, r3, #10
 804417a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 804417c:	697b      	ldr	r3, [r7, #20]
 804417e:	08db      	lsrs	r3, r3, #3
 8044180:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8044182:	69bb      	ldr	r3, [r7, #24]
 8044184:	015a      	lsls	r2, r3, #5
 8044186:	69fb      	ldr	r3, [r7, #28]
 8044188:	02db      	lsls	r3, r3, #11
 804418a:	4313      	orrs	r3, r2
 804418c:	697a      	ldr	r2, [r7, #20]
 804418e:	4313      	orrs	r3, r2
 8044190:	627b      	str	r3, [r7, #36]	; 0x24
 8044192:	e032      	b.n	80441fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8044194:	68fb      	ldr	r3, [r7, #12]
 8044196:	689b      	ldr	r3, [r3, #8]
 8044198:	2b03      	cmp	r3, #3
 804419a:	d117      	bne.n	80441cc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 804419c:	6a3b      	ldr	r3, [r7, #32]
 804419e:	0fdb      	lsrs	r3, r3, #31
 80441a0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80441a2:	69fb      	ldr	r3, [r7, #28]
 80441a4:	0cdb      	lsrs	r3, r3, #19
 80441a6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80441a8:	69bb      	ldr	r3, [r7, #24]
 80441aa:	0adb      	lsrs	r3, r3, #11
 80441ac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80441ae:	697b      	ldr	r3, [r7, #20]
 80441b0:	08db      	lsrs	r3, r3, #3
 80441b2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80441b4:	69bb      	ldr	r3, [r7, #24]
 80441b6:	015a      	lsls	r2, r3, #5
 80441b8:	69fb      	ldr	r3, [r7, #28]
 80441ba:	029b      	lsls	r3, r3, #10
 80441bc:	431a      	orrs	r2, r3
 80441be:	6a3b      	ldr	r3, [r7, #32]
 80441c0:	03db      	lsls	r3, r3, #15
 80441c2:	4313      	orrs	r3, r2
 80441c4:	697a      	ldr	r2, [r7, #20]
 80441c6:	4313      	orrs	r3, r2
 80441c8:	627b      	str	r3, [r7, #36]	; 0x24
 80441ca:	e016      	b.n	80441fa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80441cc:	6a3b      	ldr	r3, [r7, #32]
 80441ce:	0f1b      	lsrs	r3, r3, #28
 80441d0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80441d2:	69fb      	ldr	r3, [r7, #28]
 80441d4:	0d1b      	lsrs	r3, r3, #20
 80441d6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80441d8:	69bb      	ldr	r3, [r7, #24]
 80441da:	0b1b      	lsrs	r3, r3, #12
 80441dc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80441de:	697b      	ldr	r3, [r7, #20]
 80441e0:	091b      	lsrs	r3, r3, #4
 80441e2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80441e4:	69bb      	ldr	r3, [r7, #24]
 80441e6:	011a      	lsls	r2, r3, #4
 80441e8:	69fb      	ldr	r3, [r7, #28]
 80441ea:	021b      	lsls	r3, r3, #8
 80441ec:	431a      	orrs	r2, r3
 80441ee:	6a3b      	ldr	r3, [r7, #32]
 80441f0:	031b      	lsls	r3, r3, #12
 80441f2:	4313      	orrs	r3, r2
 80441f4:	697a      	ldr	r2, [r7, #20]
 80441f6:	4313      	orrs	r3, r2
 80441f8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80441fa:	68fb      	ldr	r3, [r7, #12]
 80441fc:	681b      	ldr	r3, [r3, #0]
 80441fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8044200:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8044202:	e003      	b.n	804420c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8044204:	68fb      	ldr	r3, [r7, #12]
 8044206:	681b      	ldr	r3, [r3, #0]
 8044208:	68ba      	ldr	r2, [r7, #8]
 804420a:	60da      	str	r2, [r3, #12]
}
 804420c:	bf00      	nop
 804420e:	372c      	adds	r7, #44	; 0x2c
 8044210:	46bd      	mov	sp, r7
 8044212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044216:	4770      	bx	lr

08044218 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8044218:	b580      	push	{r7, lr}
 804421a:	b086      	sub	sp, #24
 804421c:	af00      	add	r7, sp, #0
 804421e:	60f8      	str	r0, [r7, #12]
 8044220:	60b9      	str	r1, [r7, #8]
 8044222:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8044226:	2301      	movs	r3, #1
 8044228:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 804422a:	4b23      	ldr	r3, [pc, #140]	; (80442b8 <HAL_FLASH_Program+0xa0>)
 804422c:	7e1b      	ldrb	r3, [r3, #24]
 804422e:	2b01      	cmp	r3, #1
 8044230:	d101      	bne.n	8044236 <HAL_FLASH_Program+0x1e>
 8044232:	2302      	movs	r3, #2
 8044234:	e03b      	b.n	80442ae <HAL_FLASH_Program+0x96>
 8044236:	4b20      	ldr	r3, [pc, #128]	; (80442b8 <HAL_FLASH_Program+0xa0>)
 8044238:	2201      	movs	r2, #1
 804423a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804423c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8044240:	f000 f870 	bl	8044324 <FLASH_WaitForLastOperation>
 8044244:	4603      	mov	r3, r0
 8044246:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8044248:	7dfb      	ldrb	r3, [r7, #23]
 804424a:	2b00      	cmp	r3, #0
 804424c:	d12b      	bne.n	80442a6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 804424e:	68fb      	ldr	r3, [r7, #12]
 8044250:	2b00      	cmp	r3, #0
 8044252:	d105      	bne.n	8044260 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8044254:	783b      	ldrb	r3, [r7, #0]
 8044256:	4619      	mov	r1, r3
 8044258:	68b8      	ldr	r0, [r7, #8]
 804425a:	f000 f91b 	bl	8044494 <FLASH_Program_Byte>
 804425e:	e016      	b.n	804428e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8044260:	68fb      	ldr	r3, [r7, #12]
 8044262:	2b01      	cmp	r3, #1
 8044264:	d105      	bne.n	8044272 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8044266:	883b      	ldrh	r3, [r7, #0]
 8044268:	4619      	mov	r1, r3
 804426a:	68b8      	ldr	r0, [r7, #8]
 804426c:	f000 f8ee 	bl	804444c <FLASH_Program_HalfWord>
 8044270:	e00d      	b.n	804428e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8044272:	68fb      	ldr	r3, [r7, #12]
 8044274:	2b02      	cmp	r3, #2
 8044276:	d105      	bne.n	8044284 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8044278:	683b      	ldr	r3, [r7, #0]
 804427a:	4619      	mov	r1, r3
 804427c:	68b8      	ldr	r0, [r7, #8]
 804427e:	f000 f8c3 	bl	8044408 <FLASH_Program_Word>
 8044282:	e004      	b.n	804428e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8044284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8044288:	68b8      	ldr	r0, [r7, #8]
 804428a:	f000 f88b 	bl	80443a4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804428e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8044292:	f000 f847 	bl	8044324 <FLASH_WaitForLastOperation>
 8044296:	4603      	mov	r3, r0
 8044298:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 804429a:	4b08      	ldr	r3, [pc, #32]	; (80442bc <HAL_FLASH_Program+0xa4>)
 804429c:	691b      	ldr	r3, [r3, #16]
 804429e:	4a07      	ldr	r2, [pc, #28]	; (80442bc <HAL_FLASH_Program+0xa4>)
 80442a0:	f023 0301 	bic.w	r3, r3, #1
 80442a4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80442a6:	4b04      	ldr	r3, [pc, #16]	; (80442b8 <HAL_FLASH_Program+0xa0>)
 80442a8:	2200      	movs	r2, #0
 80442aa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80442ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80442ae:	4618      	mov	r0, r3
 80442b0:	3718      	adds	r7, #24
 80442b2:	46bd      	mov	sp, r7
 80442b4:	bd80      	pop	{r7, pc}
 80442b6:	bf00      	nop
 80442b8:	20000ac4 	.word	0x20000ac4
 80442bc:	40023c00 	.word	0x40023c00

080442c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80442c0:	b480      	push	{r7}
 80442c2:	b083      	sub	sp, #12
 80442c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80442c6:	2300      	movs	r3, #0
 80442c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80442ca:	4b0b      	ldr	r3, [pc, #44]	; (80442f8 <HAL_FLASH_Unlock+0x38>)
 80442cc:	691b      	ldr	r3, [r3, #16]
 80442ce:	2b00      	cmp	r3, #0
 80442d0:	da0b      	bge.n	80442ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80442d2:	4b09      	ldr	r3, [pc, #36]	; (80442f8 <HAL_FLASH_Unlock+0x38>)
 80442d4:	4a09      	ldr	r2, [pc, #36]	; (80442fc <HAL_FLASH_Unlock+0x3c>)
 80442d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80442d8:	4b07      	ldr	r3, [pc, #28]	; (80442f8 <HAL_FLASH_Unlock+0x38>)
 80442da:	4a09      	ldr	r2, [pc, #36]	; (8044300 <HAL_FLASH_Unlock+0x40>)
 80442dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80442de:	4b06      	ldr	r3, [pc, #24]	; (80442f8 <HAL_FLASH_Unlock+0x38>)
 80442e0:	691b      	ldr	r3, [r3, #16]
 80442e2:	2b00      	cmp	r3, #0
 80442e4:	da01      	bge.n	80442ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80442e6:	2301      	movs	r3, #1
 80442e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80442ea:	79fb      	ldrb	r3, [r7, #7]
}
 80442ec:	4618      	mov	r0, r3
 80442ee:	370c      	adds	r7, #12
 80442f0:	46bd      	mov	sp, r7
 80442f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80442f6:	4770      	bx	lr
 80442f8:	40023c00 	.word	0x40023c00
 80442fc:	45670123 	.word	0x45670123
 8044300:	cdef89ab 	.word	0xcdef89ab

08044304 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8044304:	b480      	push	{r7}
 8044306:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8044308:	4b05      	ldr	r3, [pc, #20]	; (8044320 <HAL_FLASH_Lock+0x1c>)
 804430a:	691b      	ldr	r3, [r3, #16]
 804430c:	4a04      	ldr	r2, [pc, #16]	; (8044320 <HAL_FLASH_Lock+0x1c>)
 804430e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8044312:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8044314:	2300      	movs	r3, #0
}
 8044316:	4618      	mov	r0, r3
 8044318:	46bd      	mov	sp, r7
 804431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804431e:	4770      	bx	lr
 8044320:	40023c00 	.word	0x40023c00

08044324 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8044324:	b580      	push	{r7, lr}
 8044326:	b084      	sub	sp, #16
 8044328:	af00      	add	r7, sp, #0
 804432a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 804432c:	2300      	movs	r3, #0
 804432e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8044330:	4b1a      	ldr	r3, [pc, #104]	; (804439c <FLASH_WaitForLastOperation+0x78>)
 8044332:	2200      	movs	r2, #0
 8044334:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8044336:	f7ff f8e7 	bl	8043508 <HAL_GetTick>
 804433a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 804433c:	e010      	b.n	8044360 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 804433e:	687b      	ldr	r3, [r7, #4]
 8044340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8044344:	d00c      	beq.n	8044360 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8044346:	687b      	ldr	r3, [r7, #4]
 8044348:	2b00      	cmp	r3, #0
 804434a:	d007      	beq.n	804435c <FLASH_WaitForLastOperation+0x38>
 804434c:	f7ff f8dc 	bl	8043508 <HAL_GetTick>
 8044350:	4602      	mov	r2, r0
 8044352:	68fb      	ldr	r3, [r7, #12]
 8044354:	1ad3      	subs	r3, r2, r3
 8044356:	687a      	ldr	r2, [r7, #4]
 8044358:	429a      	cmp	r2, r3
 804435a:	d201      	bcs.n	8044360 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 804435c:	2303      	movs	r3, #3
 804435e:	e019      	b.n	8044394 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8044360:	4b0f      	ldr	r3, [pc, #60]	; (80443a0 <FLASH_WaitForLastOperation+0x7c>)
 8044362:	68db      	ldr	r3, [r3, #12]
 8044364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8044368:	2b00      	cmp	r3, #0
 804436a:	d1e8      	bne.n	804433e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 804436c:	4b0c      	ldr	r3, [pc, #48]	; (80443a0 <FLASH_WaitForLastOperation+0x7c>)
 804436e:	68db      	ldr	r3, [r3, #12]
 8044370:	f003 0301 	and.w	r3, r3, #1
 8044374:	2b00      	cmp	r3, #0
 8044376:	d002      	beq.n	804437e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8044378:	4b09      	ldr	r3, [pc, #36]	; (80443a0 <FLASH_WaitForLastOperation+0x7c>)
 804437a:	2201      	movs	r2, #1
 804437c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 804437e:	4b08      	ldr	r3, [pc, #32]	; (80443a0 <FLASH_WaitForLastOperation+0x7c>)
 8044380:	68db      	ldr	r3, [r3, #12]
 8044382:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8044386:	2b00      	cmp	r3, #0
 8044388:	d003      	beq.n	8044392 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 804438a:	f000 f8a5 	bl	80444d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 804438e:	2301      	movs	r3, #1
 8044390:	e000      	b.n	8044394 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8044392:	2300      	movs	r3, #0
  
}  
 8044394:	4618      	mov	r0, r3
 8044396:	3710      	adds	r7, #16
 8044398:	46bd      	mov	sp, r7
 804439a:	bd80      	pop	{r7, pc}
 804439c:	20000ac4 	.word	0x20000ac4
 80443a0:	40023c00 	.word	0x40023c00

080443a4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80443a4:	b480      	push	{r7}
 80443a6:	b085      	sub	sp, #20
 80443a8:	af00      	add	r7, sp, #0
 80443aa:	60f8      	str	r0, [r7, #12]
 80443ac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80443b0:	4b14      	ldr	r3, [pc, #80]	; (8044404 <FLASH_Program_DoubleWord+0x60>)
 80443b2:	691b      	ldr	r3, [r3, #16]
 80443b4:	4a13      	ldr	r2, [pc, #76]	; (8044404 <FLASH_Program_DoubleWord+0x60>)
 80443b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80443ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80443bc:	4b11      	ldr	r3, [pc, #68]	; (8044404 <FLASH_Program_DoubleWord+0x60>)
 80443be:	691b      	ldr	r3, [r3, #16]
 80443c0:	4a10      	ldr	r2, [pc, #64]	; (8044404 <FLASH_Program_DoubleWord+0x60>)
 80443c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80443c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80443c8:	4b0e      	ldr	r3, [pc, #56]	; (8044404 <FLASH_Program_DoubleWord+0x60>)
 80443ca:	691b      	ldr	r3, [r3, #16]
 80443cc:	4a0d      	ldr	r2, [pc, #52]	; (8044404 <FLASH_Program_DoubleWord+0x60>)
 80443ce:	f043 0301 	orr.w	r3, r3, #1
 80443d2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80443d4:	68fb      	ldr	r3, [r7, #12]
 80443d6:	683a      	ldr	r2, [r7, #0]
 80443d8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80443da:	f3bf 8f6f 	isb	sy
}
 80443de:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80443e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80443e4:	f04f 0200 	mov.w	r2, #0
 80443e8:	f04f 0300 	mov.w	r3, #0
 80443ec:	000a      	movs	r2, r1
 80443ee:	2300      	movs	r3, #0
 80443f0:	68f9      	ldr	r1, [r7, #12]
 80443f2:	3104      	adds	r1, #4
 80443f4:	4613      	mov	r3, r2
 80443f6:	600b      	str	r3, [r1, #0]
}
 80443f8:	bf00      	nop
 80443fa:	3714      	adds	r7, #20
 80443fc:	46bd      	mov	sp, r7
 80443fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044402:	4770      	bx	lr
 8044404:	40023c00 	.word	0x40023c00

08044408 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8044408:	b480      	push	{r7}
 804440a:	b083      	sub	sp, #12
 804440c:	af00      	add	r7, sp, #0
 804440e:	6078      	str	r0, [r7, #4]
 8044410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8044412:	4b0d      	ldr	r3, [pc, #52]	; (8044448 <FLASH_Program_Word+0x40>)
 8044414:	691b      	ldr	r3, [r3, #16]
 8044416:	4a0c      	ldr	r2, [pc, #48]	; (8044448 <FLASH_Program_Word+0x40>)
 8044418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804441c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 804441e:	4b0a      	ldr	r3, [pc, #40]	; (8044448 <FLASH_Program_Word+0x40>)
 8044420:	691b      	ldr	r3, [r3, #16]
 8044422:	4a09      	ldr	r2, [pc, #36]	; (8044448 <FLASH_Program_Word+0x40>)
 8044424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8044428:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 804442a:	4b07      	ldr	r3, [pc, #28]	; (8044448 <FLASH_Program_Word+0x40>)
 804442c:	691b      	ldr	r3, [r3, #16]
 804442e:	4a06      	ldr	r2, [pc, #24]	; (8044448 <FLASH_Program_Word+0x40>)
 8044430:	f043 0301 	orr.w	r3, r3, #1
 8044434:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8044436:	687b      	ldr	r3, [r7, #4]
 8044438:	683a      	ldr	r2, [r7, #0]
 804443a:	601a      	str	r2, [r3, #0]
}
 804443c:	bf00      	nop
 804443e:	370c      	adds	r7, #12
 8044440:	46bd      	mov	sp, r7
 8044442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044446:	4770      	bx	lr
 8044448:	40023c00 	.word	0x40023c00

0804444c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 804444c:	b480      	push	{r7}
 804444e:	b083      	sub	sp, #12
 8044450:	af00      	add	r7, sp, #0
 8044452:	6078      	str	r0, [r7, #4]
 8044454:	460b      	mov	r3, r1
 8044456:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8044458:	4b0d      	ldr	r3, [pc, #52]	; (8044490 <FLASH_Program_HalfWord+0x44>)
 804445a:	691b      	ldr	r3, [r3, #16]
 804445c:	4a0c      	ldr	r2, [pc, #48]	; (8044490 <FLASH_Program_HalfWord+0x44>)
 804445e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8044462:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8044464:	4b0a      	ldr	r3, [pc, #40]	; (8044490 <FLASH_Program_HalfWord+0x44>)
 8044466:	691b      	ldr	r3, [r3, #16]
 8044468:	4a09      	ldr	r2, [pc, #36]	; (8044490 <FLASH_Program_HalfWord+0x44>)
 804446a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804446e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8044470:	4b07      	ldr	r3, [pc, #28]	; (8044490 <FLASH_Program_HalfWord+0x44>)
 8044472:	691b      	ldr	r3, [r3, #16]
 8044474:	4a06      	ldr	r2, [pc, #24]	; (8044490 <FLASH_Program_HalfWord+0x44>)
 8044476:	f043 0301 	orr.w	r3, r3, #1
 804447a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 804447c:	687b      	ldr	r3, [r7, #4]
 804447e:	887a      	ldrh	r2, [r7, #2]
 8044480:	801a      	strh	r2, [r3, #0]
}
 8044482:	bf00      	nop
 8044484:	370c      	adds	r7, #12
 8044486:	46bd      	mov	sp, r7
 8044488:	f85d 7b04 	ldr.w	r7, [sp], #4
 804448c:	4770      	bx	lr
 804448e:	bf00      	nop
 8044490:	40023c00 	.word	0x40023c00

08044494 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8044494:	b480      	push	{r7}
 8044496:	b083      	sub	sp, #12
 8044498:	af00      	add	r7, sp, #0
 804449a:	6078      	str	r0, [r7, #4]
 804449c:	460b      	mov	r3, r1
 804449e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80444a0:	4b0c      	ldr	r3, [pc, #48]	; (80444d4 <FLASH_Program_Byte+0x40>)
 80444a2:	691b      	ldr	r3, [r3, #16]
 80444a4:	4a0b      	ldr	r2, [pc, #44]	; (80444d4 <FLASH_Program_Byte+0x40>)
 80444a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80444aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80444ac:	4b09      	ldr	r3, [pc, #36]	; (80444d4 <FLASH_Program_Byte+0x40>)
 80444ae:	4a09      	ldr	r2, [pc, #36]	; (80444d4 <FLASH_Program_Byte+0x40>)
 80444b0:	691b      	ldr	r3, [r3, #16]
 80444b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80444b4:	4b07      	ldr	r3, [pc, #28]	; (80444d4 <FLASH_Program_Byte+0x40>)
 80444b6:	691b      	ldr	r3, [r3, #16]
 80444b8:	4a06      	ldr	r2, [pc, #24]	; (80444d4 <FLASH_Program_Byte+0x40>)
 80444ba:	f043 0301 	orr.w	r3, r3, #1
 80444be:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80444c0:	687b      	ldr	r3, [r7, #4]
 80444c2:	78fa      	ldrb	r2, [r7, #3]
 80444c4:	701a      	strb	r2, [r3, #0]
}
 80444c6:	bf00      	nop
 80444c8:	370c      	adds	r7, #12
 80444ca:	46bd      	mov	sp, r7
 80444cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80444d0:	4770      	bx	lr
 80444d2:	bf00      	nop
 80444d4:	40023c00 	.word	0x40023c00

080444d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80444d8:	b480      	push	{r7}
 80444da:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80444dc:	4b2f      	ldr	r3, [pc, #188]	; (804459c <FLASH_SetErrorCode+0xc4>)
 80444de:	68db      	ldr	r3, [r3, #12]
 80444e0:	f003 0310 	and.w	r3, r3, #16
 80444e4:	2b00      	cmp	r3, #0
 80444e6:	d008      	beq.n	80444fa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80444e8:	4b2d      	ldr	r3, [pc, #180]	; (80445a0 <FLASH_SetErrorCode+0xc8>)
 80444ea:	69db      	ldr	r3, [r3, #28]
 80444ec:	f043 0310 	orr.w	r3, r3, #16
 80444f0:	4a2b      	ldr	r2, [pc, #172]	; (80445a0 <FLASH_SetErrorCode+0xc8>)
 80444f2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80444f4:	4b29      	ldr	r3, [pc, #164]	; (804459c <FLASH_SetErrorCode+0xc4>)
 80444f6:	2210      	movs	r2, #16
 80444f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80444fa:	4b28      	ldr	r3, [pc, #160]	; (804459c <FLASH_SetErrorCode+0xc4>)
 80444fc:	68db      	ldr	r3, [r3, #12]
 80444fe:	f003 0320 	and.w	r3, r3, #32
 8044502:	2b00      	cmp	r3, #0
 8044504:	d008      	beq.n	8044518 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8044506:	4b26      	ldr	r3, [pc, #152]	; (80445a0 <FLASH_SetErrorCode+0xc8>)
 8044508:	69db      	ldr	r3, [r3, #28]
 804450a:	f043 0308 	orr.w	r3, r3, #8
 804450e:	4a24      	ldr	r2, [pc, #144]	; (80445a0 <FLASH_SetErrorCode+0xc8>)
 8044510:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8044512:	4b22      	ldr	r3, [pc, #136]	; (804459c <FLASH_SetErrorCode+0xc4>)
 8044514:	2220      	movs	r2, #32
 8044516:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8044518:	4b20      	ldr	r3, [pc, #128]	; (804459c <FLASH_SetErrorCode+0xc4>)
 804451a:	68db      	ldr	r3, [r3, #12]
 804451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044520:	2b00      	cmp	r3, #0
 8044522:	d008      	beq.n	8044536 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8044524:	4b1e      	ldr	r3, [pc, #120]	; (80445a0 <FLASH_SetErrorCode+0xc8>)
 8044526:	69db      	ldr	r3, [r3, #28]
 8044528:	f043 0304 	orr.w	r3, r3, #4
 804452c:	4a1c      	ldr	r2, [pc, #112]	; (80445a0 <FLASH_SetErrorCode+0xc8>)
 804452e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8044530:	4b1a      	ldr	r3, [pc, #104]	; (804459c <FLASH_SetErrorCode+0xc4>)
 8044532:	2240      	movs	r2, #64	; 0x40
 8044534:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8044536:	4b19      	ldr	r3, [pc, #100]	; (804459c <FLASH_SetErrorCode+0xc4>)
 8044538:	68db      	ldr	r3, [r3, #12]
 804453a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804453e:	2b00      	cmp	r3, #0
 8044540:	d008      	beq.n	8044554 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8044542:	4b17      	ldr	r3, [pc, #92]	; (80445a0 <FLASH_SetErrorCode+0xc8>)
 8044544:	69db      	ldr	r3, [r3, #28]
 8044546:	f043 0302 	orr.w	r3, r3, #2
 804454a:	4a15      	ldr	r2, [pc, #84]	; (80445a0 <FLASH_SetErrorCode+0xc8>)
 804454c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 804454e:	4b13      	ldr	r3, [pc, #76]	; (804459c <FLASH_SetErrorCode+0xc4>)
 8044550:	2280      	movs	r2, #128	; 0x80
 8044552:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8044554:	4b11      	ldr	r3, [pc, #68]	; (804459c <FLASH_SetErrorCode+0xc4>)
 8044556:	68db      	ldr	r3, [r3, #12]
 8044558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804455c:	2b00      	cmp	r3, #0
 804455e:	d009      	beq.n	8044574 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8044560:	4b0f      	ldr	r3, [pc, #60]	; (80445a0 <FLASH_SetErrorCode+0xc8>)
 8044562:	69db      	ldr	r3, [r3, #28]
 8044564:	f043 0301 	orr.w	r3, r3, #1
 8044568:	4a0d      	ldr	r2, [pc, #52]	; (80445a0 <FLASH_SetErrorCode+0xc8>)
 804456a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 804456c:	4b0b      	ldr	r3, [pc, #44]	; (804459c <FLASH_SetErrorCode+0xc4>)
 804456e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8044572:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8044574:	4b09      	ldr	r3, [pc, #36]	; (804459c <FLASH_SetErrorCode+0xc4>)
 8044576:	68db      	ldr	r3, [r3, #12]
 8044578:	f003 0302 	and.w	r3, r3, #2
 804457c:	2b00      	cmp	r3, #0
 804457e:	d008      	beq.n	8044592 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8044580:	4b07      	ldr	r3, [pc, #28]	; (80445a0 <FLASH_SetErrorCode+0xc8>)
 8044582:	69db      	ldr	r3, [r3, #28]
 8044584:	f043 0320 	orr.w	r3, r3, #32
 8044588:	4a05      	ldr	r2, [pc, #20]	; (80445a0 <FLASH_SetErrorCode+0xc8>)
 804458a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 804458c:	4b03      	ldr	r3, [pc, #12]	; (804459c <FLASH_SetErrorCode+0xc4>)
 804458e:	2202      	movs	r2, #2
 8044590:	60da      	str	r2, [r3, #12]
  }
}
 8044592:	bf00      	nop
 8044594:	46bd      	mov	sp, r7
 8044596:	f85d 7b04 	ldr.w	r7, [sp], #4
 804459a:	4770      	bx	lr
 804459c:	40023c00 	.word	0x40023c00
 80445a0:	20000ac4 	.word	0x20000ac4

080445a4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80445a4:	b580      	push	{r7, lr}
 80445a6:	b084      	sub	sp, #16
 80445a8:	af00      	add	r7, sp, #0
 80445aa:	6078      	str	r0, [r7, #4]
 80445ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80445ae:	2301      	movs	r3, #1
 80445b0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80445b2:	2300      	movs	r3, #0
 80445b4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80445b6:	4b32      	ldr	r3, [pc, #200]	; (8044680 <HAL_FLASHEx_Erase+0xdc>)
 80445b8:	7e1b      	ldrb	r3, [r3, #24]
 80445ba:	2b01      	cmp	r3, #1
 80445bc:	d101      	bne.n	80445c2 <HAL_FLASHEx_Erase+0x1e>
 80445be:	2302      	movs	r3, #2
 80445c0:	e05a      	b.n	8044678 <HAL_FLASHEx_Erase+0xd4>
 80445c2:	4b2f      	ldr	r3, [pc, #188]	; (8044680 <HAL_FLASHEx_Erase+0xdc>)
 80445c4:	2201      	movs	r2, #1
 80445c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80445c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80445cc:	f7ff feaa 	bl	8044324 <FLASH_WaitForLastOperation>
 80445d0:	4603      	mov	r3, r0
 80445d2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80445d4:	7bfb      	ldrb	r3, [r7, #15]
 80445d6:	2b00      	cmp	r3, #0
 80445d8:	d14a      	bne.n	8044670 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80445da:	683b      	ldr	r3, [r7, #0]
 80445dc:	f04f 32ff 	mov.w	r2, #4294967295
 80445e0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80445e2:	687b      	ldr	r3, [r7, #4]
 80445e4:	681b      	ldr	r3, [r3, #0]
 80445e6:	2b01      	cmp	r3, #1
 80445e8:	d117      	bne.n	804461a <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80445ea:	687b      	ldr	r3, [r7, #4]
 80445ec:	691b      	ldr	r3, [r3, #16]
 80445ee:	b2da      	uxtb	r2, r3
 80445f0:	687b      	ldr	r3, [r7, #4]
 80445f2:	685b      	ldr	r3, [r3, #4]
 80445f4:	4619      	mov	r1, r3
 80445f6:	4610      	mov	r0, r2
 80445f8:	f000 f846 	bl	8044688 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80445fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8044600:	f7ff fe90 	bl	8044324 <FLASH_WaitForLastOperation>
 8044604:	4603      	mov	r3, r0
 8044606:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8044608:	4b1e      	ldr	r3, [pc, #120]	; (8044684 <HAL_FLASHEx_Erase+0xe0>)
 804460a:	691b      	ldr	r3, [r3, #16]
 804460c:	4a1d      	ldr	r2, [pc, #116]	; (8044684 <HAL_FLASHEx_Erase+0xe0>)
 804460e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8044612:	f023 0304 	bic.w	r3, r3, #4
 8044616:	6113      	str	r3, [r2, #16]
 8044618:	e028      	b.n	804466c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 804461a:	687b      	ldr	r3, [r7, #4]
 804461c:	689b      	ldr	r3, [r3, #8]
 804461e:	60bb      	str	r3, [r7, #8]
 8044620:	e01c      	b.n	804465c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8044622:	687b      	ldr	r3, [r7, #4]
 8044624:	691b      	ldr	r3, [r3, #16]
 8044626:	b2db      	uxtb	r3, r3
 8044628:	4619      	mov	r1, r3
 804462a:	68b8      	ldr	r0, [r7, #8]
 804462c:	f000 f866 	bl	80446fc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8044630:	f24c 3050 	movw	r0, #50000	; 0xc350
 8044634:	f7ff fe76 	bl	8044324 <FLASH_WaitForLastOperation>
 8044638:	4603      	mov	r3, r0
 804463a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 804463c:	4b11      	ldr	r3, [pc, #68]	; (8044684 <HAL_FLASHEx_Erase+0xe0>)
 804463e:	691b      	ldr	r3, [r3, #16]
 8044640:	4a10      	ldr	r2, [pc, #64]	; (8044684 <HAL_FLASHEx_Erase+0xe0>)
 8044642:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8044646:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8044648:	7bfb      	ldrb	r3, [r7, #15]
 804464a:	2b00      	cmp	r3, #0
 804464c:	d003      	beq.n	8044656 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 804464e:	683b      	ldr	r3, [r7, #0]
 8044650:	68ba      	ldr	r2, [r7, #8]
 8044652:	601a      	str	r2, [r3, #0]
          break;
 8044654:	e00a      	b.n	804466c <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8044656:	68bb      	ldr	r3, [r7, #8]
 8044658:	3301      	adds	r3, #1
 804465a:	60bb      	str	r3, [r7, #8]
 804465c:	687b      	ldr	r3, [r7, #4]
 804465e:	68da      	ldr	r2, [r3, #12]
 8044660:	687b      	ldr	r3, [r7, #4]
 8044662:	689b      	ldr	r3, [r3, #8]
 8044664:	4413      	add	r3, r2
 8044666:	68ba      	ldr	r2, [r7, #8]
 8044668:	429a      	cmp	r2, r3
 804466a:	d3da      	bcc.n	8044622 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 804466c:	f000 f894 	bl	8044798 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8044670:	4b03      	ldr	r3, [pc, #12]	; (8044680 <HAL_FLASHEx_Erase+0xdc>)
 8044672:	2200      	movs	r2, #0
 8044674:	761a      	strb	r2, [r3, #24]

  return status;
 8044676:	7bfb      	ldrb	r3, [r7, #15]
}
 8044678:	4618      	mov	r0, r3
 804467a:	3710      	adds	r7, #16
 804467c:	46bd      	mov	sp, r7
 804467e:	bd80      	pop	{r7, pc}
 8044680:	20000ac4 	.word	0x20000ac4
 8044684:	40023c00 	.word	0x40023c00

08044688 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8044688:	b480      	push	{r7}
 804468a:	b083      	sub	sp, #12
 804468c:	af00      	add	r7, sp, #0
 804468e:	4603      	mov	r3, r0
 8044690:	6039      	str	r1, [r7, #0]
 8044692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8044694:	4b18      	ldr	r3, [pc, #96]	; (80446f8 <FLASH_MassErase+0x70>)
 8044696:	691b      	ldr	r3, [r3, #16]
 8044698:	4a17      	ldr	r2, [pc, #92]	; (80446f8 <FLASH_MassErase+0x70>)
 804469a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804469e:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 80446a0:	683b      	ldr	r3, [r7, #0]
 80446a2:	2b03      	cmp	r3, #3
 80446a4:	d108      	bne.n	80446b8 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80446a6:	4b14      	ldr	r3, [pc, #80]	; (80446f8 <FLASH_MassErase+0x70>)
 80446a8:	691b      	ldr	r3, [r3, #16]
 80446aa:	4a13      	ldr	r2, [pc, #76]	; (80446f8 <FLASH_MassErase+0x70>)
 80446ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80446b0:	f043 0304 	orr.w	r3, r3, #4
 80446b4:	6113      	str	r3, [r2, #16]
 80446b6:	e00f      	b.n	80446d8 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 80446b8:	683b      	ldr	r3, [r7, #0]
 80446ba:	2b01      	cmp	r3, #1
 80446bc:	d106      	bne.n	80446cc <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 80446be:	4b0e      	ldr	r3, [pc, #56]	; (80446f8 <FLASH_MassErase+0x70>)
 80446c0:	691b      	ldr	r3, [r3, #16]
 80446c2:	4a0d      	ldr	r2, [pc, #52]	; (80446f8 <FLASH_MassErase+0x70>)
 80446c4:	f043 0304 	orr.w	r3, r3, #4
 80446c8:	6113      	str	r3, [r2, #16]
 80446ca:	e005      	b.n	80446d8 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80446cc:	4b0a      	ldr	r3, [pc, #40]	; (80446f8 <FLASH_MassErase+0x70>)
 80446ce:	691b      	ldr	r3, [r3, #16]
 80446d0:	4a09      	ldr	r2, [pc, #36]	; (80446f8 <FLASH_MassErase+0x70>)
 80446d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80446d6:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80446d8:	4b07      	ldr	r3, [pc, #28]	; (80446f8 <FLASH_MassErase+0x70>)
 80446da:	691a      	ldr	r2, [r3, #16]
 80446dc:	79fb      	ldrb	r3, [r7, #7]
 80446de:	021b      	lsls	r3, r3, #8
 80446e0:	4313      	orrs	r3, r2
 80446e2:	4a05      	ldr	r2, [pc, #20]	; (80446f8 <FLASH_MassErase+0x70>)
 80446e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80446e8:	6113      	str	r3, [r2, #16]
}
 80446ea:	bf00      	nop
 80446ec:	370c      	adds	r7, #12
 80446ee:	46bd      	mov	sp, r7
 80446f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80446f4:	4770      	bx	lr
 80446f6:	bf00      	nop
 80446f8:	40023c00 	.word	0x40023c00

080446fc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80446fc:	b480      	push	{r7}
 80446fe:	b085      	sub	sp, #20
 8044700:	af00      	add	r7, sp, #0
 8044702:	6078      	str	r0, [r7, #4]
 8044704:	460b      	mov	r3, r1
 8044706:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8044708:	2300      	movs	r3, #0
 804470a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 804470c:	78fb      	ldrb	r3, [r7, #3]
 804470e:	2b00      	cmp	r3, #0
 8044710:	d102      	bne.n	8044718 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8044712:	2300      	movs	r3, #0
 8044714:	60fb      	str	r3, [r7, #12]
 8044716:	e010      	b.n	804473a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8044718:	78fb      	ldrb	r3, [r7, #3]
 804471a:	2b01      	cmp	r3, #1
 804471c:	d103      	bne.n	8044726 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 804471e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8044722:	60fb      	str	r3, [r7, #12]
 8044724:	e009      	b.n	804473a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8044726:	78fb      	ldrb	r3, [r7, #3]
 8044728:	2b02      	cmp	r3, #2
 804472a:	d103      	bne.n	8044734 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 804472c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8044730:	60fb      	str	r3, [r7, #12]
 8044732:	e002      	b.n	804473a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8044734:	f44f 7340 	mov.w	r3, #768	; 0x300
 8044738:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 804473a:	687b      	ldr	r3, [r7, #4]
 804473c:	2b0b      	cmp	r3, #11
 804473e:	d902      	bls.n	8044746 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8044740:	687b      	ldr	r3, [r7, #4]
 8044742:	3304      	adds	r3, #4
 8044744:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8044746:	4b13      	ldr	r3, [pc, #76]	; (8044794 <FLASH_Erase_Sector+0x98>)
 8044748:	691b      	ldr	r3, [r3, #16]
 804474a:	4a12      	ldr	r2, [pc, #72]	; (8044794 <FLASH_Erase_Sector+0x98>)
 804474c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8044750:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8044752:	4b10      	ldr	r3, [pc, #64]	; (8044794 <FLASH_Erase_Sector+0x98>)
 8044754:	691a      	ldr	r2, [r3, #16]
 8044756:	490f      	ldr	r1, [pc, #60]	; (8044794 <FLASH_Erase_Sector+0x98>)
 8044758:	68fb      	ldr	r3, [r7, #12]
 804475a:	4313      	orrs	r3, r2
 804475c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 804475e:	4b0d      	ldr	r3, [pc, #52]	; (8044794 <FLASH_Erase_Sector+0x98>)
 8044760:	691b      	ldr	r3, [r3, #16]
 8044762:	4a0c      	ldr	r2, [pc, #48]	; (8044794 <FLASH_Erase_Sector+0x98>)
 8044764:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8044768:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 804476a:	4b0a      	ldr	r3, [pc, #40]	; (8044794 <FLASH_Erase_Sector+0x98>)
 804476c:	691a      	ldr	r2, [r3, #16]
 804476e:	687b      	ldr	r3, [r7, #4]
 8044770:	00db      	lsls	r3, r3, #3
 8044772:	4313      	orrs	r3, r2
 8044774:	4a07      	ldr	r2, [pc, #28]	; (8044794 <FLASH_Erase_Sector+0x98>)
 8044776:	f043 0302 	orr.w	r3, r3, #2
 804477a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 804477c:	4b05      	ldr	r3, [pc, #20]	; (8044794 <FLASH_Erase_Sector+0x98>)
 804477e:	691b      	ldr	r3, [r3, #16]
 8044780:	4a04      	ldr	r2, [pc, #16]	; (8044794 <FLASH_Erase_Sector+0x98>)
 8044782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8044786:	6113      	str	r3, [r2, #16]
}
 8044788:	bf00      	nop
 804478a:	3714      	adds	r7, #20
 804478c:	46bd      	mov	sp, r7
 804478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044792:	4770      	bx	lr
 8044794:	40023c00 	.word	0x40023c00

08044798 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8044798:	b480      	push	{r7}
 804479a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 804479c:	4b20      	ldr	r3, [pc, #128]	; (8044820 <FLASH_FlushCaches+0x88>)
 804479e:	681b      	ldr	r3, [r3, #0]
 80447a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80447a4:	2b00      	cmp	r3, #0
 80447a6:	d017      	beq.n	80447d8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80447a8:	4b1d      	ldr	r3, [pc, #116]	; (8044820 <FLASH_FlushCaches+0x88>)
 80447aa:	681b      	ldr	r3, [r3, #0]
 80447ac:	4a1c      	ldr	r2, [pc, #112]	; (8044820 <FLASH_FlushCaches+0x88>)
 80447ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80447b2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80447b4:	4b1a      	ldr	r3, [pc, #104]	; (8044820 <FLASH_FlushCaches+0x88>)
 80447b6:	681b      	ldr	r3, [r3, #0]
 80447b8:	4a19      	ldr	r2, [pc, #100]	; (8044820 <FLASH_FlushCaches+0x88>)
 80447ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80447be:	6013      	str	r3, [r2, #0]
 80447c0:	4b17      	ldr	r3, [pc, #92]	; (8044820 <FLASH_FlushCaches+0x88>)
 80447c2:	681b      	ldr	r3, [r3, #0]
 80447c4:	4a16      	ldr	r2, [pc, #88]	; (8044820 <FLASH_FlushCaches+0x88>)
 80447c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80447ca:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80447cc:	4b14      	ldr	r3, [pc, #80]	; (8044820 <FLASH_FlushCaches+0x88>)
 80447ce:	681b      	ldr	r3, [r3, #0]
 80447d0:	4a13      	ldr	r2, [pc, #76]	; (8044820 <FLASH_FlushCaches+0x88>)
 80447d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80447d6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80447d8:	4b11      	ldr	r3, [pc, #68]	; (8044820 <FLASH_FlushCaches+0x88>)
 80447da:	681b      	ldr	r3, [r3, #0]
 80447dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80447e0:	2b00      	cmp	r3, #0
 80447e2:	d017      	beq.n	8044814 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80447e4:	4b0e      	ldr	r3, [pc, #56]	; (8044820 <FLASH_FlushCaches+0x88>)
 80447e6:	681b      	ldr	r3, [r3, #0]
 80447e8:	4a0d      	ldr	r2, [pc, #52]	; (8044820 <FLASH_FlushCaches+0x88>)
 80447ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80447ee:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80447f0:	4b0b      	ldr	r3, [pc, #44]	; (8044820 <FLASH_FlushCaches+0x88>)
 80447f2:	681b      	ldr	r3, [r3, #0]
 80447f4:	4a0a      	ldr	r2, [pc, #40]	; (8044820 <FLASH_FlushCaches+0x88>)
 80447f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80447fa:	6013      	str	r3, [r2, #0]
 80447fc:	4b08      	ldr	r3, [pc, #32]	; (8044820 <FLASH_FlushCaches+0x88>)
 80447fe:	681b      	ldr	r3, [r3, #0]
 8044800:	4a07      	ldr	r2, [pc, #28]	; (8044820 <FLASH_FlushCaches+0x88>)
 8044802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8044806:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8044808:	4b05      	ldr	r3, [pc, #20]	; (8044820 <FLASH_FlushCaches+0x88>)
 804480a:	681b      	ldr	r3, [r3, #0]
 804480c:	4a04      	ldr	r2, [pc, #16]	; (8044820 <FLASH_FlushCaches+0x88>)
 804480e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8044812:	6013      	str	r3, [r2, #0]
  }
}
 8044814:	bf00      	nop
 8044816:	46bd      	mov	sp, r7
 8044818:	f85d 7b04 	ldr.w	r7, [sp], #4
 804481c:	4770      	bx	lr
 804481e:	bf00      	nop
 8044820:	40023c00 	.word	0x40023c00

08044824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8044824:	b480      	push	{r7}
 8044826:	b089      	sub	sp, #36	; 0x24
 8044828:	af00      	add	r7, sp, #0
 804482a:	6078      	str	r0, [r7, #4]
 804482c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 804482e:	2300      	movs	r3, #0
 8044830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8044832:	2300      	movs	r3, #0
 8044834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8044836:	2300      	movs	r3, #0
 8044838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 804483a:	2300      	movs	r3, #0
 804483c:	61fb      	str	r3, [r7, #28]
 804483e:	e177      	b.n	8044b30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8044840:	2201      	movs	r2, #1
 8044842:	69fb      	ldr	r3, [r7, #28]
 8044844:	fa02 f303 	lsl.w	r3, r2, r3
 8044848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 804484a:	683b      	ldr	r3, [r7, #0]
 804484c:	681b      	ldr	r3, [r3, #0]
 804484e:	697a      	ldr	r2, [r7, #20]
 8044850:	4013      	ands	r3, r2
 8044852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8044854:	693a      	ldr	r2, [r7, #16]
 8044856:	697b      	ldr	r3, [r7, #20]
 8044858:	429a      	cmp	r2, r3
 804485a:	f040 8166 	bne.w	8044b2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 804485e:	683b      	ldr	r3, [r7, #0]
 8044860:	685b      	ldr	r3, [r3, #4]
 8044862:	f003 0303 	and.w	r3, r3, #3
 8044866:	2b01      	cmp	r3, #1
 8044868:	d005      	beq.n	8044876 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 804486a:	683b      	ldr	r3, [r7, #0]
 804486c:	685b      	ldr	r3, [r3, #4]
 804486e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8044872:	2b02      	cmp	r3, #2
 8044874:	d130      	bne.n	80448d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8044876:	687b      	ldr	r3, [r7, #4]
 8044878:	689b      	ldr	r3, [r3, #8]
 804487a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 804487c:	69fb      	ldr	r3, [r7, #28]
 804487e:	005b      	lsls	r3, r3, #1
 8044880:	2203      	movs	r2, #3
 8044882:	fa02 f303 	lsl.w	r3, r2, r3
 8044886:	43db      	mvns	r3, r3
 8044888:	69ba      	ldr	r2, [r7, #24]
 804488a:	4013      	ands	r3, r2
 804488c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 804488e:	683b      	ldr	r3, [r7, #0]
 8044890:	68da      	ldr	r2, [r3, #12]
 8044892:	69fb      	ldr	r3, [r7, #28]
 8044894:	005b      	lsls	r3, r3, #1
 8044896:	fa02 f303 	lsl.w	r3, r2, r3
 804489a:	69ba      	ldr	r2, [r7, #24]
 804489c:	4313      	orrs	r3, r2
 804489e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80448a0:	687b      	ldr	r3, [r7, #4]
 80448a2:	69ba      	ldr	r2, [r7, #24]
 80448a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80448a6:	687b      	ldr	r3, [r7, #4]
 80448a8:	685b      	ldr	r3, [r3, #4]
 80448aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80448ac:	2201      	movs	r2, #1
 80448ae:	69fb      	ldr	r3, [r7, #28]
 80448b0:	fa02 f303 	lsl.w	r3, r2, r3
 80448b4:	43db      	mvns	r3, r3
 80448b6:	69ba      	ldr	r2, [r7, #24]
 80448b8:	4013      	ands	r3, r2
 80448ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80448bc:	683b      	ldr	r3, [r7, #0]
 80448be:	685b      	ldr	r3, [r3, #4]
 80448c0:	091b      	lsrs	r3, r3, #4
 80448c2:	f003 0201 	and.w	r2, r3, #1
 80448c6:	69fb      	ldr	r3, [r7, #28]
 80448c8:	fa02 f303 	lsl.w	r3, r2, r3
 80448cc:	69ba      	ldr	r2, [r7, #24]
 80448ce:	4313      	orrs	r3, r2
 80448d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80448d2:	687b      	ldr	r3, [r7, #4]
 80448d4:	69ba      	ldr	r2, [r7, #24]
 80448d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80448d8:	683b      	ldr	r3, [r7, #0]
 80448da:	685b      	ldr	r3, [r3, #4]
 80448dc:	f003 0303 	and.w	r3, r3, #3
 80448e0:	2b03      	cmp	r3, #3
 80448e2:	d017      	beq.n	8044914 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80448e4:	687b      	ldr	r3, [r7, #4]
 80448e6:	68db      	ldr	r3, [r3, #12]
 80448e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80448ea:	69fb      	ldr	r3, [r7, #28]
 80448ec:	005b      	lsls	r3, r3, #1
 80448ee:	2203      	movs	r2, #3
 80448f0:	fa02 f303 	lsl.w	r3, r2, r3
 80448f4:	43db      	mvns	r3, r3
 80448f6:	69ba      	ldr	r2, [r7, #24]
 80448f8:	4013      	ands	r3, r2
 80448fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80448fc:	683b      	ldr	r3, [r7, #0]
 80448fe:	689a      	ldr	r2, [r3, #8]
 8044900:	69fb      	ldr	r3, [r7, #28]
 8044902:	005b      	lsls	r3, r3, #1
 8044904:	fa02 f303 	lsl.w	r3, r2, r3
 8044908:	69ba      	ldr	r2, [r7, #24]
 804490a:	4313      	orrs	r3, r2
 804490c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 804490e:	687b      	ldr	r3, [r7, #4]
 8044910:	69ba      	ldr	r2, [r7, #24]
 8044912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8044914:	683b      	ldr	r3, [r7, #0]
 8044916:	685b      	ldr	r3, [r3, #4]
 8044918:	f003 0303 	and.w	r3, r3, #3
 804491c:	2b02      	cmp	r3, #2
 804491e:	d123      	bne.n	8044968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8044920:	69fb      	ldr	r3, [r7, #28]
 8044922:	08da      	lsrs	r2, r3, #3
 8044924:	687b      	ldr	r3, [r7, #4]
 8044926:	3208      	adds	r2, #8
 8044928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804492c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 804492e:	69fb      	ldr	r3, [r7, #28]
 8044930:	f003 0307 	and.w	r3, r3, #7
 8044934:	009b      	lsls	r3, r3, #2
 8044936:	220f      	movs	r2, #15
 8044938:	fa02 f303 	lsl.w	r3, r2, r3
 804493c:	43db      	mvns	r3, r3
 804493e:	69ba      	ldr	r2, [r7, #24]
 8044940:	4013      	ands	r3, r2
 8044942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8044944:	683b      	ldr	r3, [r7, #0]
 8044946:	691a      	ldr	r2, [r3, #16]
 8044948:	69fb      	ldr	r3, [r7, #28]
 804494a:	f003 0307 	and.w	r3, r3, #7
 804494e:	009b      	lsls	r3, r3, #2
 8044950:	fa02 f303 	lsl.w	r3, r2, r3
 8044954:	69ba      	ldr	r2, [r7, #24]
 8044956:	4313      	orrs	r3, r2
 8044958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 804495a:	69fb      	ldr	r3, [r7, #28]
 804495c:	08da      	lsrs	r2, r3, #3
 804495e:	687b      	ldr	r3, [r7, #4]
 8044960:	3208      	adds	r2, #8
 8044962:	69b9      	ldr	r1, [r7, #24]
 8044964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8044968:	687b      	ldr	r3, [r7, #4]
 804496a:	681b      	ldr	r3, [r3, #0]
 804496c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 804496e:	69fb      	ldr	r3, [r7, #28]
 8044970:	005b      	lsls	r3, r3, #1
 8044972:	2203      	movs	r2, #3
 8044974:	fa02 f303 	lsl.w	r3, r2, r3
 8044978:	43db      	mvns	r3, r3
 804497a:	69ba      	ldr	r2, [r7, #24]
 804497c:	4013      	ands	r3, r2
 804497e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8044980:	683b      	ldr	r3, [r7, #0]
 8044982:	685b      	ldr	r3, [r3, #4]
 8044984:	f003 0203 	and.w	r2, r3, #3
 8044988:	69fb      	ldr	r3, [r7, #28]
 804498a:	005b      	lsls	r3, r3, #1
 804498c:	fa02 f303 	lsl.w	r3, r2, r3
 8044990:	69ba      	ldr	r2, [r7, #24]
 8044992:	4313      	orrs	r3, r2
 8044994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8044996:	687b      	ldr	r3, [r7, #4]
 8044998:	69ba      	ldr	r2, [r7, #24]
 804499a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 804499c:	683b      	ldr	r3, [r7, #0]
 804499e:	685b      	ldr	r3, [r3, #4]
 80449a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80449a4:	2b00      	cmp	r3, #0
 80449a6:	f000 80c0 	beq.w	8044b2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80449aa:	2300      	movs	r3, #0
 80449ac:	60fb      	str	r3, [r7, #12]
 80449ae:	4b66      	ldr	r3, [pc, #408]	; (8044b48 <HAL_GPIO_Init+0x324>)
 80449b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80449b2:	4a65      	ldr	r2, [pc, #404]	; (8044b48 <HAL_GPIO_Init+0x324>)
 80449b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80449b8:	6453      	str	r3, [r2, #68]	; 0x44
 80449ba:	4b63      	ldr	r3, [pc, #396]	; (8044b48 <HAL_GPIO_Init+0x324>)
 80449bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80449be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80449c2:	60fb      	str	r3, [r7, #12]
 80449c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80449c6:	4a61      	ldr	r2, [pc, #388]	; (8044b4c <HAL_GPIO_Init+0x328>)
 80449c8:	69fb      	ldr	r3, [r7, #28]
 80449ca:	089b      	lsrs	r3, r3, #2
 80449cc:	3302      	adds	r3, #2
 80449ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80449d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80449d4:	69fb      	ldr	r3, [r7, #28]
 80449d6:	f003 0303 	and.w	r3, r3, #3
 80449da:	009b      	lsls	r3, r3, #2
 80449dc:	220f      	movs	r2, #15
 80449de:	fa02 f303 	lsl.w	r3, r2, r3
 80449e2:	43db      	mvns	r3, r3
 80449e4:	69ba      	ldr	r2, [r7, #24]
 80449e6:	4013      	ands	r3, r2
 80449e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80449ea:	687b      	ldr	r3, [r7, #4]
 80449ec:	4a58      	ldr	r2, [pc, #352]	; (8044b50 <HAL_GPIO_Init+0x32c>)
 80449ee:	4293      	cmp	r3, r2
 80449f0:	d037      	beq.n	8044a62 <HAL_GPIO_Init+0x23e>
 80449f2:	687b      	ldr	r3, [r7, #4]
 80449f4:	4a57      	ldr	r2, [pc, #348]	; (8044b54 <HAL_GPIO_Init+0x330>)
 80449f6:	4293      	cmp	r3, r2
 80449f8:	d031      	beq.n	8044a5e <HAL_GPIO_Init+0x23a>
 80449fa:	687b      	ldr	r3, [r7, #4]
 80449fc:	4a56      	ldr	r2, [pc, #344]	; (8044b58 <HAL_GPIO_Init+0x334>)
 80449fe:	4293      	cmp	r3, r2
 8044a00:	d02b      	beq.n	8044a5a <HAL_GPIO_Init+0x236>
 8044a02:	687b      	ldr	r3, [r7, #4]
 8044a04:	4a55      	ldr	r2, [pc, #340]	; (8044b5c <HAL_GPIO_Init+0x338>)
 8044a06:	4293      	cmp	r3, r2
 8044a08:	d025      	beq.n	8044a56 <HAL_GPIO_Init+0x232>
 8044a0a:	687b      	ldr	r3, [r7, #4]
 8044a0c:	4a54      	ldr	r2, [pc, #336]	; (8044b60 <HAL_GPIO_Init+0x33c>)
 8044a0e:	4293      	cmp	r3, r2
 8044a10:	d01f      	beq.n	8044a52 <HAL_GPIO_Init+0x22e>
 8044a12:	687b      	ldr	r3, [r7, #4]
 8044a14:	4a53      	ldr	r2, [pc, #332]	; (8044b64 <HAL_GPIO_Init+0x340>)
 8044a16:	4293      	cmp	r3, r2
 8044a18:	d019      	beq.n	8044a4e <HAL_GPIO_Init+0x22a>
 8044a1a:	687b      	ldr	r3, [r7, #4]
 8044a1c:	4a52      	ldr	r2, [pc, #328]	; (8044b68 <HAL_GPIO_Init+0x344>)
 8044a1e:	4293      	cmp	r3, r2
 8044a20:	d013      	beq.n	8044a4a <HAL_GPIO_Init+0x226>
 8044a22:	687b      	ldr	r3, [r7, #4]
 8044a24:	4a51      	ldr	r2, [pc, #324]	; (8044b6c <HAL_GPIO_Init+0x348>)
 8044a26:	4293      	cmp	r3, r2
 8044a28:	d00d      	beq.n	8044a46 <HAL_GPIO_Init+0x222>
 8044a2a:	687b      	ldr	r3, [r7, #4]
 8044a2c:	4a50      	ldr	r2, [pc, #320]	; (8044b70 <HAL_GPIO_Init+0x34c>)
 8044a2e:	4293      	cmp	r3, r2
 8044a30:	d007      	beq.n	8044a42 <HAL_GPIO_Init+0x21e>
 8044a32:	687b      	ldr	r3, [r7, #4]
 8044a34:	4a4f      	ldr	r2, [pc, #316]	; (8044b74 <HAL_GPIO_Init+0x350>)
 8044a36:	4293      	cmp	r3, r2
 8044a38:	d101      	bne.n	8044a3e <HAL_GPIO_Init+0x21a>
 8044a3a:	2309      	movs	r3, #9
 8044a3c:	e012      	b.n	8044a64 <HAL_GPIO_Init+0x240>
 8044a3e:	230a      	movs	r3, #10
 8044a40:	e010      	b.n	8044a64 <HAL_GPIO_Init+0x240>
 8044a42:	2308      	movs	r3, #8
 8044a44:	e00e      	b.n	8044a64 <HAL_GPIO_Init+0x240>
 8044a46:	2307      	movs	r3, #7
 8044a48:	e00c      	b.n	8044a64 <HAL_GPIO_Init+0x240>
 8044a4a:	2306      	movs	r3, #6
 8044a4c:	e00a      	b.n	8044a64 <HAL_GPIO_Init+0x240>
 8044a4e:	2305      	movs	r3, #5
 8044a50:	e008      	b.n	8044a64 <HAL_GPIO_Init+0x240>
 8044a52:	2304      	movs	r3, #4
 8044a54:	e006      	b.n	8044a64 <HAL_GPIO_Init+0x240>
 8044a56:	2303      	movs	r3, #3
 8044a58:	e004      	b.n	8044a64 <HAL_GPIO_Init+0x240>
 8044a5a:	2302      	movs	r3, #2
 8044a5c:	e002      	b.n	8044a64 <HAL_GPIO_Init+0x240>
 8044a5e:	2301      	movs	r3, #1
 8044a60:	e000      	b.n	8044a64 <HAL_GPIO_Init+0x240>
 8044a62:	2300      	movs	r3, #0
 8044a64:	69fa      	ldr	r2, [r7, #28]
 8044a66:	f002 0203 	and.w	r2, r2, #3
 8044a6a:	0092      	lsls	r2, r2, #2
 8044a6c:	4093      	lsls	r3, r2
 8044a6e:	69ba      	ldr	r2, [r7, #24]
 8044a70:	4313      	orrs	r3, r2
 8044a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8044a74:	4935      	ldr	r1, [pc, #212]	; (8044b4c <HAL_GPIO_Init+0x328>)
 8044a76:	69fb      	ldr	r3, [r7, #28]
 8044a78:	089b      	lsrs	r3, r3, #2
 8044a7a:	3302      	adds	r3, #2
 8044a7c:	69ba      	ldr	r2, [r7, #24]
 8044a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8044a82:	4b3d      	ldr	r3, [pc, #244]	; (8044b78 <HAL_GPIO_Init+0x354>)
 8044a84:	689b      	ldr	r3, [r3, #8]
 8044a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8044a88:	693b      	ldr	r3, [r7, #16]
 8044a8a:	43db      	mvns	r3, r3
 8044a8c:	69ba      	ldr	r2, [r7, #24]
 8044a8e:	4013      	ands	r3, r2
 8044a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8044a92:	683b      	ldr	r3, [r7, #0]
 8044a94:	685b      	ldr	r3, [r3, #4]
 8044a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8044a9a:	2b00      	cmp	r3, #0
 8044a9c:	d003      	beq.n	8044aa6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8044a9e:	69ba      	ldr	r2, [r7, #24]
 8044aa0:	693b      	ldr	r3, [r7, #16]
 8044aa2:	4313      	orrs	r3, r2
 8044aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8044aa6:	4a34      	ldr	r2, [pc, #208]	; (8044b78 <HAL_GPIO_Init+0x354>)
 8044aa8:	69bb      	ldr	r3, [r7, #24]
 8044aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8044aac:	4b32      	ldr	r3, [pc, #200]	; (8044b78 <HAL_GPIO_Init+0x354>)
 8044aae:	68db      	ldr	r3, [r3, #12]
 8044ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8044ab2:	693b      	ldr	r3, [r7, #16]
 8044ab4:	43db      	mvns	r3, r3
 8044ab6:	69ba      	ldr	r2, [r7, #24]
 8044ab8:	4013      	ands	r3, r2
 8044aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8044abc:	683b      	ldr	r3, [r7, #0]
 8044abe:	685b      	ldr	r3, [r3, #4]
 8044ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8044ac4:	2b00      	cmp	r3, #0
 8044ac6:	d003      	beq.n	8044ad0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8044ac8:	69ba      	ldr	r2, [r7, #24]
 8044aca:	693b      	ldr	r3, [r7, #16]
 8044acc:	4313      	orrs	r3, r2
 8044ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8044ad0:	4a29      	ldr	r2, [pc, #164]	; (8044b78 <HAL_GPIO_Init+0x354>)
 8044ad2:	69bb      	ldr	r3, [r7, #24]
 8044ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8044ad6:	4b28      	ldr	r3, [pc, #160]	; (8044b78 <HAL_GPIO_Init+0x354>)
 8044ad8:	685b      	ldr	r3, [r3, #4]
 8044ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8044adc:	693b      	ldr	r3, [r7, #16]
 8044ade:	43db      	mvns	r3, r3
 8044ae0:	69ba      	ldr	r2, [r7, #24]
 8044ae2:	4013      	ands	r3, r2
 8044ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8044ae6:	683b      	ldr	r3, [r7, #0]
 8044ae8:	685b      	ldr	r3, [r3, #4]
 8044aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8044aee:	2b00      	cmp	r3, #0
 8044af0:	d003      	beq.n	8044afa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8044af2:	69ba      	ldr	r2, [r7, #24]
 8044af4:	693b      	ldr	r3, [r7, #16]
 8044af6:	4313      	orrs	r3, r2
 8044af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8044afa:	4a1f      	ldr	r2, [pc, #124]	; (8044b78 <HAL_GPIO_Init+0x354>)
 8044afc:	69bb      	ldr	r3, [r7, #24]
 8044afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8044b00:	4b1d      	ldr	r3, [pc, #116]	; (8044b78 <HAL_GPIO_Init+0x354>)
 8044b02:	681b      	ldr	r3, [r3, #0]
 8044b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8044b06:	693b      	ldr	r3, [r7, #16]
 8044b08:	43db      	mvns	r3, r3
 8044b0a:	69ba      	ldr	r2, [r7, #24]
 8044b0c:	4013      	ands	r3, r2
 8044b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8044b10:	683b      	ldr	r3, [r7, #0]
 8044b12:	685b      	ldr	r3, [r3, #4]
 8044b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8044b18:	2b00      	cmp	r3, #0
 8044b1a:	d003      	beq.n	8044b24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8044b1c:	69ba      	ldr	r2, [r7, #24]
 8044b1e:	693b      	ldr	r3, [r7, #16]
 8044b20:	4313      	orrs	r3, r2
 8044b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8044b24:	4a14      	ldr	r2, [pc, #80]	; (8044b78 <HAL_GPIO_Init+0x354>)
 8044b26:	69bb      	ldr	r3, [r7, #24]
 8044b28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8044b2a:	69fb      	ldr	r3, [r7, #28]
 8044b2c:	3301      	adds	r3, #1
 8044b2e:	61fb      	str	r3, [r7, #28]
 8044b30:	69fb      	ldr	r3, [r7, #28]
 8044b32:	2b0f      	cmp	r3, #15
 8044b34:	f67f ae84 	bls.w	8044840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8044b38:	bf00      	nop
 8044b3a:	bf00      	nop
 8044b3c:	3724      	adds	r7, #36	; 0x24
 8044b3e:	46bd      	mov	sp, r7
 8044b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b44:	4770      	bx	lr
 8044b46:	bf00      	nop
 8044b48:	40023800 	.word	0x40023800
 8044b4c:	40013800 	.word	0x40013800
 8044b50:	40020000 	.word	0x40020000
 8044b54:	40020400 	.word	0x40020400
 8044b58:	40020800 	.word	0x40020800
 8044b5c:	40020c00 	.word	0x40020c00
 8044b60:	40021000 	.word	0x40021000
 8044b64:	40021400 	.word	0x40021400
 8044b68:	40021800 	.word	0x40021800
 8044b6c:	40021c00 	.word	0x40021c00
 8044b70:	40022000 	.word	0x40022000
 8044b74:	40022400 	.word	0x40022400
 8044b78:	40013c00 	.word	0x40013c00

08044b7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8044b7c:	b480      	push	{r7}
 8044b7e:	b087      	sub	sp, #28
 8044b80:	af00      	add	r7, sp, #0
 8044b82:	6078      	str	r0, [r7, #4]
 8044b84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8044b86:	2300      	movs	r3, #0
 8044b88:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8044b8a:	2300      	movs	r3, #0
 8044b8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8044b8e:	2300      	movs	r3, #0
 8044b90:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8044b92:	2300      	movs	r3, #0
 8044b94:	617b      	str	r3, [r7, #20]
 8044b96:	e0d9      	b.n	8044d4c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8044b98:	2201      	movs	r2, #1
 8044b9a:	697b      	ldr	r3, [r7, #20]
 8044b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8044ba0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8044ba2:	683a      	ldr	r2, [r7, #0]
 8044ba4:	693b      	ldr	r3, [r7, #16]
 8044ba6:	4013      	ands	r3, r2
 8044ba8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8044baa:	68fa      	ldr	r2, [r7, #12]
 8044bac:	693b      	ldr	r3, [r7, #16]
 8044bae:	429a      	cmp	r2, r3
 8044bb0:	f040 80c9 	bne.w	8044d46 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8044bb4:	4a6b      	ldr	r2, [pc, #428]	; (8044d64 <HAL_GPIO_DeInit+0x1e8>)
 8044bb6:	697b      	ldr	r3, [r7, #20]
 8044bb8:	089b      	lsrs	r3, r3, #2
 8044bba:	3302      	adds	r3, #2
 8044bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8044bc0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8044bc2:	697b      	ldr	r3, [r7, #20]
 8044bc4:	f003 0303 	and.w	r3, r3, #3
 8044bc8:	009b      	lsls	r3, r3, #2
 8044bca:	220f      	movs	r2, #15
 8044bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8044bd0:	68ba      	ldr	r2, [r7, #8]
 8044bd2:	4013      	ands	r3, r2
 8044bd4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8044bd6:	687b      	ldr	r3, [r7, #4]
 8044bd8:	4a63      	ldr	r2, [pc, #396]	; (8044d68 <HAL_GPIO_DeInit+0x1ec>)
 8044bda:	4293      	cmp	r3, r2
 8044bdc:	d037      	beq.n	8044c4e <HAL_GPIO_DeInit+0xd2>
 8044bde:	687b      	ldr	r3, [r7, #4]
 8044be0:	4a62      	ldr	r2, [pc, #392]	; (8044d6c <HAL_GPIO_DeInit+0x1f0>)
 8044be2:	4293      	cmp	r3, r2
 8044be4:	d031      	beq.n	8044c4a <HAL_GPIO_DeInit+0xce>
 8044be6:	687b      	ldr	r3, [r7, #4]
 8044be8:	4a61      	ldr	r2, [pc, #388]	; (8044d70 <HAL_GPIO_DeInit+0x1f4>)
 8044bea:	4293      	cmp	r3, r2
 8044bec:	d02b      	beq.n	8044c46 <HAL_GPIO_DeInit+0xca>
 8044bee:	687b      	ldr	r3, [r7, #4]
 8044bf0:	4a60      	ldr	r2, [pc, #384]	; (8044d74 <HAL_GPIO_DeInit+0x1f8>)
 8044bf2:	4293      	cmp	r3, r2
 8044bf4:	d025      	beq.n	8044c42 <HAL_GPIO_DeInit+0xc6>
 8044bf6:	687b      	ldr	r3, [r7, #4]
 8044bf8:	4a5f      	ldr	r2, [pc, #380]	; (8044d78 <HAL_GPIO_DeInit+0x1fc>)
 8044bfa:	4293      	cmp	r3, r2
 8044bfc:	d01f      	beq.n	8044c3e <HAL_GPIO_DeInit+0xc2>
 8044bfe:	687b      	ldr	r3, [r7, #4]
 8044c00:	4a5e      	ldr	r2, [pc, #376]	; (8044d7c <HAL_GPIO_DeInit+0x200>)
 8044c02:	4293      	cmp	r3, r2
 8044c04:	d019      	beq.n	8044c3a <HAL_GPIO_DeInit+0xbe>
 8044c06:	687b      	ldr	r3, [r7, #4]
 8044c08:	4a5d      	ldr	r2, [pc, #372]	; (8044d80 <HAL_GPIO_DeInit+0x204>)
 8044c0a:	4293      	cmp	r3, r2
 8044c0c:	d013      	beq.n	8044c36 <HAL_GPIO_DeInit+0xba>
 8044c0e:	687b      	ldr	r3, [r7, #4]
 8044c10:	4a5c      	ldr	r2, [pc, #368]	; (8044d84 <HAL_GPIO_DeInit+0x208>)
 8044c12:	4293      	cmp	r3, r2
 8044c14:	d00d      	beq.n	8044c32 <HAL_GPIO_DeInit+0xb6>
 8044c16:	687b      	ldr	r3, [r7, #4]
 8044c18:	4a5b      	ldr	r2, [pc, #364]	; (8044d88 <HAL_GPIO_DeInit+0x20c>)
 8044c1a:	4293      	cmp	r3, r2
 8044c1c:	d007      	beq.n	8044c2e <HAL_GPIO_DeInit+0xb2>
 8044c1e:	687b      	ldr	r3, [r7, #4]
 8044c20:	4a5a      	ldr	r2, [pc, #360]	; (8044d8c <HAL_GPIO_DeInit+0x210>)
 8044c22:	4293      	cmp	r3, r2
 8044c24:	d101      	bne.n	8044c2a <HAL_GPIO_DeInit+0xae>
 8044c26:	2309      	movs	r3, #9
 8044c28:	e012      	b.n	8044c50 <HAL_GPIO_DeInit+0xd4>
 8044c2a:	230a      	movs	r3, #10
 8044c2c:	e010      	b.n	8044c50 <HAL_GPIO_DeInit+0xd4>
 8044c2e:	2308      	movs	r3, #8
 8044c30:	e00e      	b.n	8044c50 <HAL_GPIO_DeInit+0xd4>
 8044c32:	2307      	movs	r3, #7
 8044c34:	e00c      	b.n	8044c50 <HAL_GPIO_DeInit+0xd4>
 8044c36:	2306      	movs	r3, #6
 8044c38:	e00a      	b.n	8044c50 <HAL_GPIO_DeInit+0xd4>
 8044c3a:	2305      	movs	r3, #5
 8044c3c:	e008      	b.n	8044c50 <HAL_GPIO_DeInit+0xd4>
 8044c3e:	2304      	movs	r3, #4
 8044c40:	e006      	b.n	8044c50 <HAL_GPIO_DeInit+0xd4>
 8044c42:	2303      	movs	r3, #3
 8044c44:	e004      	b.n	8044c50 <HAL_GPIO_DeInit+0xd4>
 8044c46:	2302      	movs	r3, #2
 8044c48:	e002      	b.n	8044c50 <HAL_GPIO_DeInit+0xd4>
 8044c4a:	2301      	movs	r3, #1
 8044c4c:	e000      	b.n	8044c50 <HAL_GPIO_DeInit+0xd4>
 8044c4e:	2300      	movs	r3, #0
 8044c50:	697a      	ldr	r2, [r7, #20]
 8044c52:	f002 0203 	and.w	r2, r2, #3
 8044c56:	0092      	lsls	r2, r2, #2
 8044c58:	4093      	lsls	r3, r2
 8044c5a:	68ba      	ldr	r2, [r7, #8]
 8044c5c:	429a      	cmp	r2, r3
 8044c5e:	d132      	bne.n	8044cc6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8044c60:	4b4b      	ldr	r3, [pc, #300]	; (8044d90 <HAL_GPIO_DeInit+0x214>)
 8044c62:	681a      	ldr	r2, [r3, #0]
 8044c64:	68fb      	ldr	r3, [r7, #12]
 8044c66:	43db      	mvns	r3, r3
 8044c68:	4949      	ldr	r1, [pc, #292]	; (8044d90 <HAL_GPIO_DeInit+0x214>)
 8044c6a:	4013      	ands	r3, r2
 8044c6c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8044c6e:	4b48      	ldr	r3, [pc, #288]	; (8044d90 <HAL_GPIO_DeInit+0x214>)
 8044c70:	685a      	ldr	r2, [r3, #4]
 8044c72:	68fb      	ldr	r3, [r7, #12]
 8044c74:	43db      	mvns	r3, r3
 8044c76:	4946      	ldr	r1, [pc, #280]	; (8044d90 <HAL_GPIO_DeInit+0x214>)
 8044c78:	4013      	ands	r3, r2
 8044c7a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8044c7c:	4b44      	ldr	r3, [pc, #272]	; (8044d90 <HAL_GPIO_DeInit+0x214>)
 8044c7e:	68da      	ldr	r2, [r3, #12]
 8044c80:	68fb      	ldr	r3, [r7, #12]
 8044c82:	43db      	mvns	r3, r3
 8044c84:	4942      	ldr	r1, [pc, #264]	; (8044d90 <HAL_GPIO_DeInit+0x214>)
 8044c86:	4013      	ands	r3, r2
 8044c88:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8044c8a:	4b41      	ldr	r3, [pc, #260]	; (8044d90 <HAL_GPIO_DeInit+0x214>)
 8044c8c:	689a      	ldr	r2, [r3, #8]
 8044c8e:	68fb      	ldr	r3, [r7, #12]
 8044c90:	43db      	mvns	r3, r3
 8044c92:	493f      	ldr	r1, [pc, #252]	; (8044d90 <HAL_GPIO_DeInit+0x214>)
 8044c94:	4013      	ands	r3, r2
 8044c96:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8044c98:	697b      	ldr	r3, [r7, #20]
 8044c9a:	f003 0303 	and.w	r3, r3, #3
 8044c9e:	009b      	lsls	r3, r3, #2
 8044ca0:	220f      	movs	r2, #15
 8044ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8044ca6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8044ca8:	4a2e      	ldr	r2, [pc, #184]	; (8044d64 <HAL_GPIO_DeInit+0x1e8>)
 8044caa:	697b      	ldr	r3, [r7, #20]
 8044cac:	089b      	lsrs	r3, r3, #2
 8044cae:	3302      	adds	r3, #2
 8044cb0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8044cb4:	68bb      	ldr	r3, [r7, #8]
 8044cb6:	43da      	mvns	r2, r3
 8044cb8:	482a      	ldr	r0, [pc, #168]	; (8044d64 <HAL_GPIO_DeInit+0x1e8>)
 8044cba:	697b      	ldr	r3, [r7, #20]
 8044cbc:	089b      	lsrs	r3, r3, #2
 8044cbe:	400a      	ands	r2, r1
 8044cc0:	3302      	adds	r3, #2
 8044cc2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8044cc6:	687b      	ldr	r3, [r7, #4]
 8044cc8:	681a      	ldr	r2, [r3, #0]
 8044cca:	697b      	ldr	r3, [r7, #20]
 8044ccc:	005b      	lsls	r3, r3, #1
 8044cce:	2103      	movs	r1, #3
 8044cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8044cd4:	43db      	mvns	r3, r3
 8044cd6:	401a      	ands	r2, r3
 8044cd8:	687b      	ldr	r3, [r7, #4]
 8044cda:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8044cdc:	697b      	ldr	r3, [r7, #20]
 8044cde:	08da      	lsrs	r2, r3, #3
 8044ce0:	687b      	ldr	r3, [r7, #4]
 8044ce2:	3208      	adds	r2, #8
 8044ce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8044ce8:	697b      	ldr	r3, [r7, #20]
 8044cea:	f003 0307 	and.w	r3, r3, #7
 8044cee:	009b      	lsls	r3, r3, #2
 8044cf0:	220f      	movs	r2, #15
 8044cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8044cf6:	43db      	mvns	r3, r3
 8044cf8:	697a      	ldr	r2, [r7, #20]
 8044cfa:	08d2      	lsrs	r2, r2, #3
 8044cfc:	4019      	ands	r1, r3
 8044cfe:	687b      	ldr	r3, [r7, #4]
 8044d00:	3208      	adds	r2, #8
 8044d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8044d06:	687b      	ldr	r3, [r7, #4]
 8044d08:	68da      	ldr	r2, [r3, #12]
 8044d0a:	697b      	ldr	r3, [r7, #20]
 8044d0c:	005b      	lsls	r3, r3, #1
 8044d0e:	2103      	movs	r1, #3
 8044d10:	fa01 f303 	lsl.w	r3, r1, r3
 8044d14:	43db      	mvns	r3, r3
 8044d16:	401a      	ands	r2, r3
 8044d18:	687b      	ldr	r3, [r7, #4]
 8044d1a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8044d1c:	687b      	ldr	r3, [r7, #4]
 8044d1e:	685a      	ldr	r2, [r3, #4]
 8044d20:	2101      	movs	r1, #1
 8044d22:	697b      	ldr	r3, [r7, #20]
 8044d24:	fa01 f303 	lsl.w	r3, r1, r3
 8044d28:	43db      	mvns	r3, r3
 8044d2a:	401a      	ands	r2, r3
 8044d2c:	687b      	ldr	r3, [r7, #4]
 8044d2e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8044d30:	687b      	ldr	r3, [r7, #4]
 8044d32:	689a      	ldr	r2, [r3, #8]
 8044d34:	697b      	ldr	r3, [r7, #20]
 8044d36:	005b      	lsls	r3, r3, #1
 8044d38:	2103      	movs	r1, #3
 8044d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8044d3e:	43db      	mvns	r3, r3
 8044d40:	401a      	ands	r2, r3
 8044d42:	687b      	ldr	r3, [r7, #4]
 8044d44:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8044d46:	697b      	ldr	r3, [r7, #20]
 8044d48:	3301      	adds	r3, #1
 8044d4a:	617b      	str	r3, [r7, #20]
 8044d4c:	697b      	ldr	r3, [r7, #20]
 8044d4e:	2b0f      	cmp	r3, #15
 8044d50:	f67f af22 	bls.w	8044b98 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8044d54:	bf00      	nop
 8044d56:	bf00      	nop
 8044d58:	371c      	adds	r7, #28
 8044d5a:	46bd      	mov	sp, r7
 8044d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044d60:	4770      	bx	lr
 8044d62:	bf00      	nop
 8044d64:	40013800 	.word	0x40013800
 8044d68:	40020000 	.word	0x40020000
 8044d6c:	40020400 	.word	0x40020400
 8044d70:	40020800 	.word	0x40020800
 8044d74:	40020c00 	.word	0x40020c00
 8044d78:	40021000 	.word	0x40021000
 8044d7c:	40021400 	.word	0x40021400
 8044d80:	40021800 	.word	0x40021800
 8044d84:	40021c00 	.word	0x40021c00
 8044d88:	40022000 	.word	0x40022000
 8044d8c:	40022400 	.word	0x40022400
 8044d90:	40013c00 	.word	0x40013c00

08044d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8044d94:	b480      	push	{r7}
 8044d96:	b083      	sub	sp, #12
 8044d98:	af00      	add	r7, sp, #0
 8044d9a:	6078      	str	r0, [r7, #4]
 8044d9c:	460b      	mov	r3, r1
 8044d9e:	807b      	strh	r3, [r7, #2]
 8044da0:	4613      	mov	r3, r2
 8044da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8044da4:	787b      	ldrb	r3, [r7, #1]
 8044da6:	2b00      	cmp	r3, #0
 8044da8:	d003      	beq.n	8044db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8044daa:	887a      	ldrh	r2, [r7, #2]
 8044dac:	687b      	ldr	r3, [r7, #4]
 8044dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8044db0:	e003      	b.n	8044dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8044db2:	887b      	ldrh	r3, [r7, #2]
 8044db4:	041a      	lsls	r2, r3, #16
 8044db6:	687b      	ldr	r3, [r7, #4]
 8044db8:	619a      	str	r2, [r3, #24]
}
 8044dba:	bf00      	nop
 8044dbc:	370c      	adds	r7, #12
 8044dbe:	46bd      	mov	sp, r7
 8044dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044dc4:	4770      	bx	lr
	...

08044dc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8044dc8:	b580      	push	{r7, lr}
 8044dca:	b082      	sub	sp, #8
 8044dcc:	af00      	add	r7, sp, #0
 8044dce:	4603      	mov	r3, r0
 8044dd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8044dd2:	4b08      	ldr	r3, [pc, #32]	; (8044df4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8044dd4:	695a      	ldr	r2, [r3, #20]
 8044dd6:	88fb      	ldrh	r3, [r7, #6]
 8044dd8:	4013      	ands	r3, r2
 8044dda:	2b00      	cmp	r3, #0
 8044ddc:	d006      	beq.n	8044dec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8044dde:	4a05      	ldr	r2, [pc, #20]	; (8044df4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8044de0:	88fb      	ldrh	r3, [r7, #6]
 8044de2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8044de4:	88fb      	ldrh	r3, [r7, #6]
 8044de6:	4618      	mov	r0, r3
 8044de8:	f7fd f880 	bl	8041eec <HAL_GPIO_EXTI_Callback>
  }
}
 8044dec:	bf00      	nop
 8044dee:	3708      	adds	r7, #8
 8044df0:	46bd      	mov	sp, r7
 8044df2:	bd80      	pop	{r7, pc}
 8044df4:	40013c00 	.word	0x40013c00

08044df8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8044df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8044dfa:	b08f      	sub	sp, #60	; 0x3c
 8044dfc:	af0a      	add	r7, sp, #40	; 0x28
 8044dfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8044e00:	687b      	ldr	r3, [r7, #4]
 8044e02:	2b00      	cmp	r3, #0
 8044e04:	d101      	bne.n	8044e0a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8044e06:	2301      	movs	r3, #1
 8044e08:	e054      	b.n	8044eb4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8044e0a:	687b      	ldr	r3, [r7, #4]
 8044e0c:	681b      	ldr	r3, [r3, #0]
 8044e0e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8044e10:	687b      	ldr	r3, [r7, #4]
 8044e12:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8044e16:	b2db      	uxtb	r3, r3
 8044e18:	2b00      	cmp	r3, #0
 8044e1a:	d106      	bne.n	8044e2a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8044e1c:	687b      	ldr	r3, [r7, #4]
 8044e1e:	2200      	movs	r2, #0
 8044e20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8044e24:	6878      	ldr	r0, [r7, #4]
 8044e26:	f008 f8ed 	bl	804d004 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8044e2a:	687b      	ldr	r3, [r7, #4]
 8044e2c:	2203      	movs	r2, #3
 8044e2e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8044e32:	68fb      	ldr	r3, [r7, #12]
 8044e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8044e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8044e3a:	2b00      	cmp	r3, #0
 8044e3c:	d102      	bne.n	8044e44 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8044e3e:	687b      	ldr	r3, [r7, #4]
 8044e40:	2200      	movs	r2, #0
 8044e42:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8044e44:	687b      	ldr	r3, [r7, #4]
 8044e46:	681b      	ldr	r3, [r3, #0]
 8044e48:	4618      	mov	r0, r3
 8044e4a:	f005 f91b 	bl	804a084 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8044e4e:	687b      	ldr	r3, [r7, #4]
 8044e50:	681b      	ldr	r3, [r3, #0]
 8044e52:	603b      	str	r3, [r7, #0]
 8044e54:	687e      	ldr	r6, [r7, #4]
 8044e56:	466d      	mov	r5, sp
 8044e58:	f106 0410 	add.w	r4, r6, #16
 8044e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8044e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8044e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8044e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8044e64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8044e68:	e885 0003 	stmia.w	r5, {r0, r1}
 8044e6c:	1d33      	adds	r3, r6, #4
 8044e6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8044e70:	6838      	ldr	r0, [r7, #0]
 8044e72:	f005 f895 	bl	8049fa0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8044e76:	687b      	ldr	r3, [r7, #4]
 8044e78:	681b      	ldr	r3, [r3, #0]
 8044e7a:	2101      	movs	r1, #1
 8044e7c:	4618      	mov	r0, r3
 8044e7e:	f005 f912 	bl	804a0a6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8044e82:	687b      	ldr	r3, [r7, #4]
 8044e84:	681b      	ldr	r3, [r3, #0]
 8044e86:	603b      	str	r3, [r7, #0]
 8044e88:	687e      	ldr	r6, [r7, #4]
 8044e8a:	466d      	mov	r5, sp
 8044e8c:	f106 0410 	add.w	r4, r6, #16
 8044e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8044e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8044e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8044e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8044e98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8044e9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8044ea0:	1d33      	adds	r3, r6, #4
 8044ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8044ea4:	6838      	ldr	r0, [r7, #0]
 8044ea6:	f005 fa9b 	bl	804a3e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8044eaa:	687b      	ldr	r3, [r7, #4]
 8044eac:	2201      	movs	r2, #1
 8044eae:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8044eb2:	2300      	movs	r3, #0
}
 8044eb4:	4618      	mov	r0, r3
 8044eb6:	3714      	adds	r7, #20
 8044eb8:	46bd      	mov	sp, r7
 8044eba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08044ebc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8044ebc:	b590      	push	{r4, r7, lr}
 8044ebe:	b089      	sub	sp, #36	; 0x24
 8044ec0:	af04      	add	r7, sp, #16
 8044ec2:	6078      	str	r0, [r7, #4]
 8044ec4:	4608      	mov	r0, r1
 8044ec6:	4611      	mov	r1, r2
 8044ec8:	461a      	mov	r2, r3
 8044eca:	4603      	mov	r3, r0
 8044ecc:	70fb      	strb	r3, [r7, #3]
 8044ece:	460b      	mov	r3, r1
 8044ed0:	70bb      	strb	r3, [r7, #2]
 8044ed2:	4613      	mov	r3, r2
 8044ed4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8044ed6:	687b      	ldr	r3, [r7, #4]
 8044ed8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8044edc:	2b01      	cmp	r3, #1
 8044ede:	d101      	bne.n	8044ee4 <HAL_HCD_HC_Init+0x28>
 8044ee0:	2302      	movs	r3, #2
 8044ee2:	e076      	b.n	8044fd2 <HAL_HCD_HC_Init+0x116>
 8044ee4:	687b      	ldr	r3, [r7, #4]
 8044ee6:	2201      	movs	r2, #1
 8044ee8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8044eec:	78fb      	ldrb	r3, [r7, #3]
 8044eee:	687a      	ldr	r2, [r7, #4]
 8044ef0:	212c      	movs	r1, #44	; 0x2c
 8044ef2:	fb01 f303 	mul.w	r3, r1, r3
 8044ef6:	4413      	add	r3, r2
 8044ef8:	333d      	adds	r3, #61	; 0x3d
 8044efa:	2200      	movs	r2, #0
 8044efc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8044efe:	78fb      	ldrb	r3, [r7, #3]
 8044f00:	687a      	ldr	r2, [r7, #4]
 8044f02:	212c      	movs	r1, #44	; 0x2c
 8044f04:	fb01 f303 	mul.w	r3, r1, r3
 8044f08:	4413      	add	r3, r2
 8044f0a:	3338      	adds	r3, #56	; 0x38
 8044f0c:	787a      	ldrb	r2, [r7, #1]
 8044f0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8044f10:	78fb      	ldrb	r3, [r7, #3]
 8044f12:	687a      	ldr	r2, [r7, #4]
 8044f14:	212c      	movs	r1, #44	; 0x2c
 8044f16:	fb01 f303 	mul.w	r3, r1, r3
 8044f1a:	4413      	add	r3, r2
 8044f1c:	3340      	adds	r3, #64	; 0x40
 8044f1e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8044f20:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8044f22:	78fb      	ldrb	r3, [r7, #3]
 8044f24:	687a      	ldr	r2, [r7, #4]
 8044f26:	212c      	movs	r1, #44	; 0x2c
 8044f28:	fb01 f303 	mul.w	r3, r1, r3
 8044f2c:	4413      	add	r3, r2
 8044f2e:	3339      	adds	r3, #57	; 0x39
 8044f30:	78fa      	ldrb	r2, [r7, #3]
 8044f32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8044f34:	78fb      	ldrb	r3, [r7, #3]
 8044f36:	687a      	ldr	r2, [r7, #4]
 8044f38:	212c      	movs	r1, #44	; 0x2c
 8044f3a:	fb01 f303 	mul.w	r3, r1, r3
 8044f3e:	4413      	add	r3, r2
 8044f40:	333f      	adds	r3, #63	; 0x3f
 8044f42:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8044f46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8044f48:	78fb      	ldrb	r3, [r7, #3]
 8044f4a:	78ba      	ldrb	r2, [r7, #2]
 8044f4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8044f50:	b2d0      	uxtb	r0, r2
 8044f52:	687a      	ldr	r2, [r7, #4]
 8044f54:	212c      	movs	r1, #44	; 0x2c
 8044f56:	fb01 f303 	mul.w	r3, r1, r3
 8044f5a:	4413      	add	r3, r2
 8044f5c:	333a      	adds	r3, #58	; 0x3a
 8044f5e:	4602      	mov	r2, r0
 8044f60:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8044f62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8044f66:	2b00      	cmp	r3, #0
 8044f68:	da09      	bge.n	8044f7e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8044f6a:	78fb      	ldrb	r3, [r7, #3]
 8044f6c:	687a      	ldr	r2, [r7, #4]
 8044f6e:	212c      	movs	r1, #44	; 0x2c
 8044f70:	fb01 f303 	mul.w	r3, r1, r3
 8044f74:	4413      	add	r3, r2
 8044f76:	333b      	adds	r3, #59	; 0x3b
 8044f78:	2201      	movs	r2, #1
 8044f7a:	701a      	strb	r2, [r3, #0]
 8044f7c:	e008      	b.n	8044f90 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8044f7e:	78fb      	ldrb	r3, [r7, #3]
 8044f80:	687a      	ldr	r2, [r7, #4]
 8044f82:	212c      	movs	r1, #44	; 0x2c
 8044f84:	fb01 f303 	mul.w	r3, r1, r3
 8044f88:	4413      	add	r3, r2
 8044f8a:	333b      	adds	r3, #59	; 0x3b
 8044f8c:	2200      	movs	r2, #0
 8044f8e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8044f90:	78fb      	ldrb	r3, [r7, #3]
 8044f92:	687a      	ldr	r2, [r7, #4]
 8044f94:	212c      	movs	r1, #44	; 0x2c
 8044f96:	fb01 f303 	mul.w	r3, r1, r3
 8044f9a:	4413      	add	r3, r2
 8044f9c:	333c      	adds	r3, #60	; 0x3c
 8044f9e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8044fa2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8044fa4:	687b      	ldr	r3, [r7, #4]
 8044fa6:	6818      	ldr	r0, [r3, #0]
 8044fa8:	787c      	ldrb	r4, [r7, #1]
 8044faa:	78ba      	ldrb	r2, [r7, #2]
 8044fac:	78f9      	ldrb	r1, [r7, #3]
 8044fae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8044fb0:	9302      	str	r3, [sp, #8]
 8044fb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8044fb6:	9301      	str	r3, [sp, #4]
 8044fb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8044fbc:	9300      	str	r3, [sp, #0]
 8044fbe:	4623      	mov	r3, r4
 8044fc0:	f005 fb94 	bl	804a6ec <USB_HC_Init>
 8044fc4:	4603      	mov	r3, r0
 8044fc6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8044fc8:	687b      	ldr	r3, [r7, #4]
 8044fca:	2200      	movs	r2, #0
 8044fcc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8044fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8044fd2:	4618      	mov	r0, r3
 8044fd4:	3714      	adds	r7, #20
 8044fd6:	46bd      	mov	sp, r7
 8044fd8:	bd90      	pop	{r4, r7, pc}

08044fda <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8044fda:	b580      	push	{r7, lr}
 8044fdc:	b084      	sub	sp, #16
 8044fde:	af00      	add	r7, sp, #0
 8044fe0:	6078      	str	r0, [r7, #4]
 8044fe2:	460b      	mov	r3, r1
 8044fe4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8044fe6:	2300      	movs	r3, #0
 8044fe8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8044fea:	687b      	ldr	r3, [r7, #4]
 8044fec:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8044ff0:	2b01      	cmp	r3, #1
 8044ff2:	d101      	bne.n	8044ff8 <HAL_HCD_HC_Halt+0x1e>
 8044ff4:	2302      	movs	r3, #2
 8044ff6:	e00f      	b.n	8045018 <HAL_HCD_HC_Halt+0x3e>
 8044ff8:	687b      	ldr	r3, [r7, #4]
 8044ffa:	2201      	movs	r2, #1
 8044ffc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045000:	687b      	ldr	r3, [r7, #4]
 8045002:	681b      	ldr	r3, [r3, #0]
 8045004:	78fa      	ldrb	r2, [r7, #3]
 8045006:	4611      	mov	r1, r2
 8045008:	4618      	mov	r0, r3
 804500a:	f005 fde4 	bl	804abd6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 804500e:	687b      	ldr	r3, [r7, #4]
 8045010:	2200      	movs	r2, #0
 8045012:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8045016:	7bfb      	ldrb	r3, [r7, #15]
}
 8045018:	4618      	mov	r0, r3
 804501a:	3710      	adds	r7, #16
 804501c:	46bd      	mov	sp, r7
 804501e:	bd80      	pop	{r7, pc}

08045020 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8045020:	b580      	push	{r7, lr}
 8045022:	b082      	sub	sp, #8
 8045024:	af00      	add	r7, sp, #0
 8045026:	6078      	str	r0, [r7, #4]
 8045028:	4608      	mov	r0, r1
 804502a:	4611      	mov	r1, r2
 804502c:	461a      	mov	r2, r3
 804502e:	4603      	mov	r3, r0
 8045030:	70fb      	strb	r3, [r7, #3]
 8045032:	460b      	mov	r3, r1
 8045034:	70bb      	strb	r3, [r7, #2]
 8045036:	4613      	mov	r3, r2
 8045038:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 804503a:	78fb      	ldrb	r3, [r7, #3]
 804503c:	687a      	ldr	r2, [r7, #4]
 804503e:	212c      	movs	r1, #44	; 0x2c
 8045040:	fb01 f303 	mul.w	r3, r1, r3
 8045044:	4413      	add	r3, r2
 8045046:	333b      	adds	r3, #59	; 0x3b
 8045048:	78ba      	ldrb	r2, [r7, #2]
 804504a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 804504c:	78fb      	ldrb	r3, [r7, #3]
 804504e:	687a      	ldr	r2, [r7, #4]
 8045050:	212c      	movs	r1, #44	; 0x2c
 8045052:	fb01 f303 	mul.w	r3, r1, r3
 8045056:	4413      	add	r3, r2
 8045058:	333f      	adds	r3, #63	; 0x3f
 804505a:	787a      	ldrb	r2, [r7, #1]
 804505c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 804505e:	7c3b      	ldrb	r3, [r7, #16]
 8045060:	2b00      	cmp	r3, #0
 8045062:	d112      	bne.n	804508a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8045064:	78fb      	ldrb	r3, [r7, #3]
 8045066:	687a      	ldr	r2, [r7, #4]
 8045068:	212c      	movs	r1, #44	; 0x2c
 804506a:	fb01 f303 	mul.w	r3, r1, r3
 804506e:	4413      	add	r3, r2
 8045070:	3342      	adds	r3, #66	; 0x42
 8045072:	2203      	movs	r2, #3
 8045074:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8045076:	78fb      	ldrb	r3, [r7, #3]
 8045078:	687a      	ldr	r2, [r7, #4]
 804507a:	212c      	movs	r1, #44	; 0x2c
 804507c:	fb01 f303 	mul.w	r3, r1, r3
 8045080:	4413      	add	r3, r2
 8045082:	333d      	adds	r3, #61	; 0x3d
 8045084:	7f3a      	ldrb	r2, [r7, #28]
 8045086:	701a      	strb	r2, [r3, #0]
 8045088:	e008      	b.n	804509c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804508a:	78fb      	ldrb	r3, [r7, #3]
 804508c:	687a      	ldr	r2, [r7, #4]
 804508e:	212c      	movs	r1, #44	; 0x2c
 8045090:	fb01 f303 	mul.w	r3, r1, r3
 8045094:	4413      	add	r3, r2
 8045096:	3342      	adds	r3, #66	; 0x42
 8045098:	2202      	movs	r2, #2
 804509a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 804509c:	787b      	ldrb	r3, [r7, #1]
 804509e:	2b03      	cmp	r3, #3
 80450a0:	f200 80c6 	bhi.w	8045230 <HAL_HCD_HC_SubmitRequest+0x210>
 80450a4:	a201      	add	r2, pc, #4	; (adr r2, 80450ac <HAL_HCD_HC_SubmitRequest+0x8c>)
 80450a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80450aa:	bf00      	nop
 80450ac:	080450bd 	.word	0x080450bd
 80450b0:	0804521d 	.word	0x0804521d
 80450b4:	08045121 	.word	0x08045121
 80450b8:	0804519f 	.word	0x0804519f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80450bc:	7c3b      	ldrb	r3, [r7, #16]
 80450be:	2b01      	cmp	r3, #1
 80450c0:	f040 80b8 	bne.w	8045234 <HAL_HCD_HC_SubmitRequest+0x214>
 80450c4:	78bb      	ldrb	r3, [r7, #2]
 80450c6:	2b00      	cmp	r3, #0
 80450c8:	f040 80b4 	bne.w	8045234 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80450cc:	8b3b      	ldrh	r3, [r7, #24]
 80450ce:	2b00      	cmp	r3, #0
 80450d0:	d108      	bne.n	80450e4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80450d2:	78fb      	ldrb	r3, [r7, #3]
 80450d4:	687a      	ldr	r2, [r7, #4]
 80450d6:	212c      	movs	r1, #44	; 0x2c
 80450d8:	fb01 f303 	mul.w	r3, r1, r3
 80450dc:	4413      	add	r3, r2
 80450de:	3355      	adds	r3, #85	; 0x55
 80450e0:	2201      	movs	r2, #1
 80450e2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80450e4:	78fb      	ldrb	r3, [r7, #3]
 80450e6:	687a      	ldr	r2, [r7, #4]
 80450e8:	212c      	movs	r1, #44	; 0x2c
 80450ea:	fb01 f303 	mul.w	r3, r1, r3
 80450ee:	4413      	add	r3, r2
 80450f0:	3355      	adds	r3, #85	; 0x55
 80450f2:	781b      	ldrb	r3, [r3, #0]
 80450f4:	2b00      	cmp	r3, #0
 80450f6:	d109      	bne.n	804510c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80450f8:	78fb      	ldrb	r3, [r7, #3]
 80450fa:	687a      	ldr	r2, [r7, #4]
 80450fc:	212c      	movs	r1, #44	; 0x2c
 80450fe:	fb01 f303 	mul.w	r3, r1, r3
 8045102:	4413      	add	r3, r2
 8045104:	3342      	adds	r3, #66	; 0x42
 8045106:	2200      	movs	r2, #0
 8045108:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 804510a:	e093      	b.n	8045234 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804510c:	78fb      	ldrb	r3, [r7, #3]
 804510e:	687a      	ldr	r2, [r7, #4]
 8045110:	212c      	movs	r1, #44	; 0x2c
 8045112:	fb01 f303 	mul.w	r3, r1, r3
 8045116:	4413      	add	r3, r2
 8045118:	3342      	adds	r3, #66	; 0x42
 804511a:	2202      	movs	r2, #2
 804511c:	701a      	strb	r2, [r3, #0]
      break;
 804511e:	e089      	b.n	8045234 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8045120:	78bb      	ldrb	r3, [r7, #2]
 8045122:	2b00      	cmp	r3, #0
 8045124:	d11d      	bne.n	8045162 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8045126:	78fb      	ldrb	r3, [r7, #3]
 8045128:	687a      	ldr	r2, [r7, #4]
 804512a:	212c      	movs	r1, #44	; 0x2c
 804512c:	fb01 f303 	mul.w	r3, r1, r3
 8045130:	4413      	add	r3, r2
 8045132:	3355      	adds	r3, #85	; 0x55
 8045134:	781b      	ldrb	r3, [r3, #0]
 8045136:	2b00      	cmp	r3, #0
 8045138:	d109      	bne.n	804514e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 804513a:	78fb      	ldrb	r3, [r7, #3]
 804513c:	687a      	ldr	r2, [r7, #4]
 804513e:	212c      	movs	r1, #44	; 0x2c
 8045140:	fb01 f303 	mul.w	r3, r1, r3
 8045144:	4413      	add	r3, r2
 8045146:	3342      	adds	r3, #66	; 0x42
 8045148:	2200      	movs	r2, #0
 804514a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 804514c:	e073      	b.n	8045236 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804514e:	78fb      	ldrb	r3, [r7, #3]
 8045150:	687a      	ldr	r2, [r7, #4]
 8045152:	212c      	movs	r1, #44	; 0x2c
 8045154:	fb01 f303 	mul.w	r3, r1, r3
 8045158:	4413      	add	r3, r2
 804515a:	3342      	adds	r3, #66	; 0x42
 804515c:	2202      	movs	r2, #2
 804515e:	701a      	strb	r2, [r3, #0]
      break;
 8045160:	e069      	b.n	8045236 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8045162:	78fb      	ldrb	r3, [r7, #3]
 8045164:	687a      	ldr	r2, [r7, #4]
 8045166:	212c      	movs	r1, #44	; 0x2c
 8045168:	fb01 f303 	mul.w	r3, r1, r3
 804516c:	4413      	add	r3, r2
 804516e:	3354      	adds	r3, #84	; 0x54
 8045170:	781b      	ldrb	r3, [r3, #0]
 8045172:	2b00      	cmp	r3, #0
 8045174:	d109      	bne.n	804518a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8045176:	78fb      	ldrb	r3, [r7, #3]
 8045178:	687a      	ldr	r2, [r7, #4]
 804517a:	212c      	movs	r1, #44	; 0x2c
 804517c:	fb01 f303 	mul.w	r3, r1, r3
 8045180:	4413      	add	r3, r2
 8045182:	3342      	adds	r3, #66	; 0x42
 8045184:	2200      	movs	r2, #0
 8045186:	701a      	strb	r2, [r3, #0]
      break;
 8045188:	e055      	b.n	8045236 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804518a:	78fb      	ldrb	r3, [r7, #3]
 804518c:	687a      	ldr	r2, [r7, #4]
 804518e:	212c      	movs	r1, #44	; 0x2c
 8045190:	fb01 f303 	mul.w	r3, r1, r3
 8045194:	4413      	add	r3, r2
 8045196:	3342      	adds	r3, #66	; 0x42
 8045198:	2202      	movs	r2, #2
 804519a:	701a      	strb	r2, [r3, #0]
      break;
 804519c:	e04b      	b.n	8045236 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 804519e:	78bb      	ldrb	r3, [r7, #2]
 80451a0:	2b00      	cmp	r3, #0
 80451a2:	d11d      	bne.n	80451e0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80451a4:	78fb      	ldrb	r3, [r7, #3]
 80451a6:	687a      	ldr	r2, [r7, #4]
 80451a8:	212c      	movs	r1, #44	; 0x2c
 80451aa:	fb01 f303 	mul.w	r3, r1, r3
 80451ae:	4413      	add	r3, r2
 80451b0:	3355      	adds	r3, #85	; 0x55
 80451b2:	781b      	ldrb	r3, [r3, #0]
 80451b4:	2b00      	cmp	r3, #0
 80451b6:	d109      	bne.n	80451cc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80451b8:	78fb      	ldrb	r3, [r7, #3]
 80451ba:	687a      	ldr	r2, [r7, #4]
 80451bc:	212c      	movs	r1, #44	; 0x2c
 80451be:	fb01 f303 	mul.w	r3, r1, r3
 80451c2:	4413      	add	r3, r2
 80451c4:	3342      	adds	r3, #66	; 0x42
 80451c6:	2200      	movs	r2, #0
 80451c8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80451ca:	e034      	b.n	8045236 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80451cc:	78fb      	ldrb	r3, [r7, #3]
 80451ce:	687a      	ldr	r2, [r7, #4]
 80451d0:	212c      	movs	r1, #44	; 0x2c
 80451d2:	fb01 f303 	mul.w	r3, r1, r3
 80451d6:	4413      	add	r3, r2
 80451d8:	3342      	adds	r3, #66	; 0x42
 80451da:	2202      	movs	r2, #2
 80451dc:	701a      	strb	r2, [r3, #0]
      break;
 80451de:	e02a      	b.n	8045236 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80451e0:	78fb      	ldrb	r3, [r7, #3]
 80451e2:	687a      	ldr	r2, [r7, #4]
 80451e4:	212c      	movs	r1, #44	; 0x2c
 80451e6:	fb01 f303 	mul.w	r3, r1, r3
 80451ea:	4413      	add	r3, r2
 80451ec:	3354      	adds	r3, #84	; 0x54
 80451ee:	781b      	ldrb	r3, [r3, #0]
 80451f0:	2b00      	cmp	r3, #0
 80451f2:	d109      	bne.n	8045208 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80451f4:	78fb      	ldrb	r3, [r7, #3]
 80451f6:	687a      	ldr	r2, [r7, #4]
 80451f8:	212c      	movs	r1, #44	; 0x2c
 80451fa:	fb01 f303 	mul.w	r3, r1, r3
 80451fe:	4413      	add	r3, r2
 8045200:	3342      	adds	r3, #66	; 0x42
 8045202:	2200      	movs	r2, #0
 8045204:	701a      	strb	r2, [r3, #0]
      break;
 8045206:	e016      	b.n	8045236 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8045208:	78fb      	ldrb	r3, [r7, #3]
 804520a:	687a      	ldr	r2, [r7, #4]
 804520c:	212c      	movs	r1, #44	; 0x2c
 804520e:	fb01 f303 	mul.w	r3, r1, r3
 8045212:	4413      	add	r3, r2
 8045214:	3342      	adds	r3, #66	; 0x42
 8045216:	2202      	movs	r2, #2
 8045218:	701a      	strb	r2, [r3, #0]
      break;
 804521a:	e00c      	b.n	8045236 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 804521c:	78fb      	ldrb	r3, [r7, #3]
 804521e:	687a      	ldr	r2, [r7, #4]
 8045220:	212c      	movs	r1, #44	; 0x2c
 8045222:	fb01 f303 	mul.w	r3, r1, r3
 8045226:	4413      	add	r3, r2
 8045228:	3342      	adds	r3, #66	; 0x42
 804522a:	2200      	movs	r2, #0
 804522c:	701a      	strb	r2, [r3, #0]
      break;
 804522e:	e002      	b.n	8045236 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8045230:	bf00      	nop
 8045232:	e000      	b.n	8045236 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8045234:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8045236:	78fb      	ldrb	r3, [r7, #3]
 8045238:	687a      	ldr	r2, [r7, #4]
 804523a:	212c      	movs	r1, #44	; 0x2c
 804523c:	fb01 f303 	mul.w	r3, r1, r3
 8045240:	4413      	add	r3, r2
 8045242:	3344      	adds	r3, #68	; 0x44
 8045244:	697a      	ldr	r2, [r7, #20]
 8045246:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8045248:	78fb      	ldrb	r3, [r7, #3]
 804524a:	8b3a      	ldrh	r2, [r7, #24]
 804524c:	6879      	ldr	r1, [r7, #4]
 804524e:	202c      	movs	r0, #44	; 0x2c
 8045250:	fb00 f303 	mul.w	r3, r0, r3
 8045254:	440b      	add	r3, r1
 8045256:	334c      	adds	r3, #76	; 0x4c
 8045258:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 804525a:	78fb      	ldrb	r3, [r7, #3]
 804525c:	687a      	ldr	r2, [r7, #4]
 804525e:	212c      	movs	r1, #44	; 0x2c
 8045260:	fb01 f303 	mul.w	r3, r1, r3
 8045264:	4413      	add	r3, r2
 8045266:	3360      	adds	r3, #96	; 0x60
 8045268:	2200      	movs	r2, #0
 804526a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 804526c:	78fb      	ldrb	r3, [r7, #3]
 804526e:	687a      	ldr	r2, [r7, #4]
 8045270:	212c      	movs	r1, #44	; 0x2c
 8045272:	fb01 f303 	mul.w	r3, r1, r3
 8045276:	4413      	add	r3, r2
 8045278:	3350      	adds	r3, #80	; 0x50
 804527a:	2200      	movs	r2, #0
 804527c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 804527e:	78fb      	ldrb	r3, [r7, #3]
 8045280:	687a      	ldr	r2, [r7, #4]
 8045282:	212c      	movs	r1, #44	; 0x2c
 8045284:	fb01 f303 	mul.w	r3, r1, r3
 8045288:	4413      	add	r3, r2
 804528a:	3339      	adds	r3, #57	; 0x39
 804528c:	78fa      	ldrb	r2, [r7, #3]
 804528e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8045290:	78fb      	ldrb	r3, [r7, #3]
 8045292:	687a      	ldr	r2, [r7, #4]
 8045294:	212c      	movs	r1, #44	; 0x2c
 8045296:	fb01 f303 	mul.w	r3, r1, r3
 804529a:	4413      	add	r3, r2
 804529c:	3361      	adds	r3, #97	; 0x61
 804529e:	2200      	movs	r2, #0
 80452a0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80452a2:	687b      	ldr	r3, [r7, #4]
 80452a4:	6818      	ldr	r0, [r3, #0]
 80452a6:	78fb      	ldrb	r3, [r7, #3]
 80452a8:	222c      	movs	r2, #44	; 0x2c
 80452aa:	fb02 f303 	mul.w	r3, r2, r3
 80452ae:	3338      	adds	r3, #56	; 0x38
 80452b0:	687a      	ldr	r2, [r7, #4]
 80452b2:	18d1      	adds	r1, r2, r3
 80452b4:	687b      	ldr	r3, [r7, #4]
 80452b6:	691b      	ldr	r3, [r3, #16]
 80452b8:	b2db      	uxtb	r3, r3
 80452ba:	461a      	mov	r2, r3
 80452bc:	f005 fb38 	bl	804a930 <USB_HC_StartXfer>
 80452c0:	4603      	mov	r3, r0
}
 80452c2:	4618      	mov	r0, r3
 80452c4:	3708      	adds	r7, #8
 80452c6:	46bd      	mov	sp, r7
 80452c8:	bd80      	pop	{r7, pc}
 80452ca:	bf00      	nop

080452cc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80452cc:	b580      	push	{r7, lr}
 80452ce:	b086      	sub	sp, #24
 80452d0:	af00      	add	r7, sp, #0
 80452d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80452d4:	687b      	ldr	r3, [r7, #4]
 80452d6:	681b      	ldr	r3, [r3, #0]
 80452d8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80452da:	693b      	ldr	r3, [r7, #16]
 80452dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80452de:	687b      	ldr	r3, [r7, #4]
 80452e0:	681b      	ldr	r3, [r3, #0]
 80452e2:	4618      	mov	r0, r3
 80452e4:	f005 f839 	bl	804a35a <USB_GetMode>
 80452e8:	4603      	mov	r3, r0
 80452ea:	2b01      	cmp	r3, #1
 80452ec:	f040 80f6 	bne.w	80454dc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80452f0:	687b      	ldr	r3, [r7, #4]
 80452f2:	681b      	ldr	r3, [r3, #0]
 80452f4:	4618      	mov	r0, r3
 80452f6:	f005 f81d 	bl	804a334 <USB_ReadInterrupts>
 80452fa:	4603      	mov	r3, r0
 80452fc:	2b00      	cmp	r3, #0
 80452fe:	f000 80ec 	beq.w	80454da <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8045302:	687b      	ldr	r3, [r7, #4]
 8045304:	681b      	ldr	r3, [r3, #0]
 8045306:	4618      	mov	r0, r3
 8045308:	f005 f814 	bl	804a334 <USB_ReadInterrupts>
 804530c:	4603      	mov	r3, r0
 804530e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8045312:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8045316:	d104      	bne.n	8045322 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8045318:	687b      	ldr	r3, [r7, #4]
 804531a:	681b      	ldr	r3, [r3, #0]
 804531c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8045320:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8045322:	687b      	ldr	r3, [r7, #4]
 8045324:	681b      	ldr	r3, [r3, #0]
 8045326:	4618      	mov	r0, r3
 8045328:	f005 f804 	bl	804a334 <USB_ReadInterrupts>
 804532c:	4603      	mov	r3, r0
 804532e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8045332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8045336:	d104      	bne.n	8045342 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8045338:	687b      	ldr	r3, [r7, #4]
 804533a:	681b      	ldr	r3, [r3, #0]
 804533c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8045340:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8045342:	687b      	ldr	r3, [r7, #4]
 8045344:	681b      	ldr	r3, [r3, #0]
 8045346:	4618      	mov	r0, r3
 8045348:	f004 fff4 	bl	804a334 <USB_ReadInterrupts>
 804534c:	4603      	mov	r3, r0
 804534e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8045352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8045356:	d104      	bne.n	8045362 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8045358:	687b      	ldr	r3, [r7, #4]
 804535a:	681b      	ldr	r3, [r3, #0]
 804535c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8045360:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8045362:	687b      	ldr	r3, [r7, #4]
 8045364:	681b      	ldr	r3, [r3, #0]
 8045366:	4618      	mov	r0, r3
 8045368:	f004 ffe4 	bl	804a334 <USB_ReadInterrupts>
 804536c:	4603      	mov	r3, r0
 804536e:	f003 0302 	and.w	r3, r3, #2
 8045372:	2b02      	cmp	r3, #2
 8045374:	d103      	bne.n	804537e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8045376:	687b      	ldr	r3, [r7, #4]
 8045378:	681b      	ldr	r3, [r3, #0]
 804537a:	2202      	movs	r2, #2
 804537c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 804537e:	687b      	ldr	r3, [r7, #4]
 8045380:	681b      	ldr	r3, [r3, #0]
 8045382:	4618      	mov	r0, r3
 8045384:	f004 ffd6 	bl	804a334 <USB_ReadInterrupts>
 8045388:	4603      	mov	r3, r0
 804538a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804538e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8045392:	d11c      	bne.n	80453ce <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8045394:	687b      	ldr	r3, [r7, #4]
 8045396:	681b      	ldr	r3, [r3, #0]
 8045398:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 804539c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 804539e:	68fb      	ldr	r3, [r7, #12]
 80453a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80453a4:	681b      	ldr	r3, [r3, #0]
 80453a6:	f003 0301 	and.w	r3, r3, #1
 80453aa:	2b00      	cmp	r3, #0
 80453ac:	d10f      	bne.n	80453ce <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80453ae:	2110      	movs	r1, #16
 80453b0:	6938      	ldr	r0, [r7, #16]
 80453b2:	f004 fec5 	bl	804a140 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80453b6:	6938      	ldr	r0, [r7, #16]
 80453b8:	f004 fef6 	bl	804a1a8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80453bc:	687b      	ldr	r3, [r7, #4]
 80453be:	681b      	ldr	r3, [r3, #0]
 80453c0:	2101      	movs	r1, #1
 80453c2:	4618      	mov	r0, r3
 80453c4:	f005 f8cc 	bl	804a560 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80453c8:	6878      	ldr	r0, [r7, #4]
 80453ca:	f007 fe95 	bl	804d0f8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80453ce:	687b      	ldr	r3, [r7, #4]
 80453d0:	681b      	ldr	r3, [r3, #0]
 80453d2:	4618      	mov	r0, r3
 80453d4:	f004 ffae 	bl	804a334 <USB_ReadInterrupts>
 80453d8:	4603      	mov	r3, r0
 80453da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80453de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80453e2:	d102      	bne.n	80453ea <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80453e4:	6878      	ldr	r0, [r7, #4]
 80453e6:	f001 f89e 	bl	8046526 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80453ea:	687b      	ldr	r3, [r7, #4]
 80453ec:	681b      	ldr	r3, [r3, #0]
 80453ee:	4618      	mov	r0, r3
 80453f0:	f004 ffa0 	bl	804a334 <USB_ReadInterrupts>
 80453f4:	4603      	mov	r3, r0
 80453f6:	f003 0308 	and.w	r3, r3, #8
 80453fa:	2b08      	cmp	r3, #8
 80453fc:	d106      	bne.n	804540c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80453fe:	6878      	ldr	r0, [r7, #4]
 8045400:	f007 fe5e 	bl	804d0c0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8045404:	687b      	ldr	r3, [r7, #4]
 8045406:	681b      	ldr	r3, [r3, #0]
 8045408:	2208      	movs	r2, #8
 804540a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 804540c:	687b      	ldr	r3, [r7, #4]
 804540e:	681b      	ldr	r3, [r3, #0]
 8045410:	4618      	mov	r0, r3
 8045412:	f004 ff8f 	bl	804a334 <USB_ReadInterrupts>
 8045416:	4603      	mov	r3, r0
 8045418:	f003 0310 	and.w	r3, r3, #16
 804541c:	2b10      	cmp	r3, #16
 804541e:	d101      	bne.n	8045424 <HAL_HCD_IRQHandler+0x158>
 8045420:	2301      	movs	r3, #1
 8045422:	e000      	b.n	8045426 <HAL_HCD_IRQHandler+0x15a>
 8045424:	2300      	movs	r3, #0
 8045426:	2b00      	cmp	r3, #0
 8045428:	d012      	beq.n	8045450 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 804542a:	687b      	ldr	r3, [r7, #4]
 804542c:	681b      	ldr	r3, [r3, #0]
 804542e:	699a      	ldr	r2, [r3, #24]
 8045430:	687b      	ldr	r3, [r7, #4]
 8045432:	681b      	ldr	r3, [r3, #0]
 8045434:	f022 0210 	bic.w	r2, r2, #16
 8045438:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 804543a:	6878      	ldr	r0, [r7, #4]
 804543c:	f000 ffa1 	bl	8046382 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8045440:	687b      	ldr	r3, [r7, #4]
 8045442:	681b      	ldr	r3, [r3, #0]
 8045444:	699a      	ldr	r2, [r3, #24]
 8045446:	687b      	ldr	r3, [r7, #4]
 8045448:	681b      	ldr	r3, [r3, #0]
 804544a:	f042 0210 	orr.w	r2, r2, #16
 804544e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8045450:	687b      	ldr	r3, [r7, #4]
 8045452:	681b      	ldr	r3, [r3, #0]
 8045454:	4618      	mov	r0, r3
 8045456:	f004 ff6d 	bl	804a334 <USB_ReadInterrupts>
 804545a:	4603      	mov	r3, r0
 804545c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8045460:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8045464:	d13a      	bne.n	80454dc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8045466:	687b      	ldr	r3, [r7, #4]
 8045468:	681b      	ldr	r3, [r3, #0]
 804546a:	4618      	mov	r0, r3
 804546c:	f005 fba2 	bl	804abb4 <USB_HC_ReadInterrupt>
 8045470:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8045472:	2300      	movs	r3, #0
 8045474:	617b      	str	r3, [r7, #20]
 8045476:	e025      	b.n	80454c4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8045478:	697b      	ldr	r3, [r7, #20]
 804547a:	f003 030f 	and.w	r3, r3, #15
 804547e:	68ba      	ldr	r2, [r7, #8]
 8045480:	fa22 f303 	lsr.w	r3, r2, r3
 8045484:	f003 0301 	and.w	r3, r3, #1
 8045488:	2b00      	cmp	r3, #0
 804548a:	d018      	beq.n	80454be <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 804548c:	697b      	ldr	r3, [r7, #20]
 804548e:	015a      	lsls	r2, r3, #5
 8045490:	68fb      	ldr	r3, [r7, #12]
 8045492:	4413      	add	r3, r2
 8045494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045498:	681b      	ldr	r3, [r3, #0]
 804549a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804549e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80454a2:	d106      	bne.n	80454b2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80454a4:	697b      	ldr	r3, [r7, #20]
 80454a6:	b2db      	uxtb	r3, r3
 80454a8:	4619      	mov	r1, r3
 80454aa:	6878      	ldr	r0, [r7, #4]
 80454ac:	f000 f8ab 	bl	8045606 <HCD_HC_IN_IRQHandler>
 80454b0:	e005      	b.n	80454be <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80454b2:	697b      	ldr	r3, [r7, #20]
 80454b4:	b2db      	uxtb	r3, r3
 80454b6:	4619      	mov	r1, r3
 80454b8:	6878      	ldr	r0, [r7, #4]
 80454ba:	f000 fbf9 	bl	8045cb0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80454be:	697b      	ldr	r3, [r7, #20]
 80454c0:	3301      	adds	r3, #1
 80454c2:	617b      	str	r3, [r7, #20]
 80454c4:	687b      	ldr	r3, [r7, #4]
 80454c6:	689b      	ldr	r3, [r3, #8]
 80454c8:	697a      	ldr	r2, [r7, #20]
 80454ca:	429a      	cmp	r2, r3
 80454cc:	d3d4      	bcc.n	8045478 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80454ce:	687b      	ldr	r3, [r7, #4]
 80454d0:	681b      	ldr	r3, [r3, #0]
 80454d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80454d6:	615a      	str	r2, [r3, #20]
 80454d8:	e000      	b.n	80454dc <HAL_HCD_IRQHandler+0x210>
      return;
 80454da:	bf00      	nop
    }
  }
}
 80454dc:	3718      	adds	r7, #24
 80454de:	46bd      	mov	sp, r7
 80454e0:	bd80      	pop	{r7, pc}

080454e2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80454e2:	b580      	push	{r7, lr}
 80454e4:	b082      	sub	sp, #8
 80454e6:	af00      	add	r7, sp, #0
 80454e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80454ea:	687b      	ldr	r3, [r7, #4]
 80454ec:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80454f0:	2b01      	cmp	r3, #1
 80454f2:	d101      	bne.n	80454f8 <HAL_HCD_Start+0x16>
 80454f4:	2302      	movs	r3, #2
 80454f6:	e013      	b.n	8045520 <HAL_HCD_Start+0x3e>
 80454f8:	687b      	ldr	r3, [r7, #4]
 80454fa:	2201      	movs	r2, #1
 80454fc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8045500:	687b      	ldr	r3, [r7, #4]
 8045502:	681b      	ldr	r3, [r3, #0]
 8045504:	2101      	movs	r1, #1
 8045506:	4618      	mov	r0, r3
 8045508:	f005 f88e 	bl	804a628 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 804550c:	687b      	ldr	r3, [r7, #4]
 804550e:	681b      	ldr	r3, [r3, #0]
 8045510:	4618      	mov	r0, r3
 8045512:	f004 fda6 	bl	804a062 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8045516:	687b      	ldr	r3, [r7, #4]
 8045518:	2200      	movs	r2, #0
 804551a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 804551e:	2300      	movs	r3, #0
}
 8045520:	4618      	mov	r0, r3
 8045522:	3708      	adds	r7, #8
 8045524:	46bd      	mov	sp, r7
 8045526:	bd80      	pop	{r7, pc}

08045528 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8045528:	b580      	push	{r7, lr}
 804552a:	b082      	sub	sp, #8
 804552c:	af00      	add	r7, sp, #0
 804552e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8045530:	687b      	ldr	r3, [r7, #4]
 8045532:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8045536:	2b01      	cmp	r3, #1
 8045538:	d101      	bne.n	804553e <HAL_HCD_Stop+0x16>
 804553a:	2302      	movs	r3, #2
 804553c:	e00d      	b.n	804555a <HAL_HCD_Stop+0x32>
 804553e:	687b      	ldr	r3, [r7, #4]
 8045540:	2201      	movs	r2, #1
 8045542:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8045546:	687b      	ldr	r3, [r7, #4]
 8045548:	681b      	ldr	r3, [r3, #0]
 804554a:	4618      	mov	r0, r3
 804554c:	f005 fc7c 	bl	804ae48 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8045550:	687b      	ldr	r3, [r7, #4]
 8045552:	2200      	movs	r2, #0
 8045554:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8045558:	2300      	movs	r3, #0
}
 804555a:	4618      	mov	r0, r3
 804555c:	3708      	adds	r7, #8
 804555e:	46bd      	mov	sp, r7
 8045560:	bd80      	pop	{r7, pc}

08045562 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8045562:	b580      	push	{r7, lr}
 8045564:	b082      	sub	sp, #8
 8045566:	af00      	add	r7, sp, #0
 8045568:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 804556a:	687b      	ldr	r3, [r7, #4]
 804556c:	681b      	ldr	r3, [r3, #0]
 804556e:	4618      	mov	r0, r3
 8045570:	f005 f830 	bl	804a5d4 <USB_ResetPort>
 8045574:	4603      	mov	r3, r0
}
 8045576:	4618      	mov	r0, r3
 8045578:	3708      	adds	r7, #8
 804557a:	46bd      	mov	sp, r7
 804557c:	bd80      	pop	{r7, pc}

0804557e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 804557e:	b480      	push	{r7}
 8045580:	b083      	sub	sp, #12
 8045582:	af00      	add	r7, sp, #0
 8045584:	6078      	str	r0, [r7, #4]
 8045586:	460b      	mov	r3, r1
 8045588:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 804558a:	78fb      	ldrb	r3, [r7, #3]
 804558c:	687a      	ldr	r2, [r7, #4]
 804558e:	212c      	movs	r1, #44	; 0x2c
 8045590:	fb01 f303 	mul.w	r3, r1, r3
 8045594:	4413      	add	r3, r2
 8045596:	3360      	adds	r3, #96	; 0x60
 8045598:	781b      	ldrb	r3, [r3, #0]
}
 804559a:	4618      	mov	r0, r3
 804559c:	370c      	adds	r7, #12
 804559e:	46bd      	mov	sp, r7
 80455a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80455a4:	4770      	bx	lr

080455a6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80455a6:	b480      	push	{r7}
 80455a8:	b083      	sub	sp, #12
 80455aa:	af00      	add	r7, sp, #0
 80455ac:	6078      	str	r0, [r7, #4]
 80455ae:	460b      	mov	r3, r1
 80455b0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80455b2:	78fb      	ldrb	r3, [r7, #3]
 80455b4:	687a      	ldr	r2, [r7, #4]
 80455b6:	212c      	movs	r1, #44	; 0x2c
 80455b8:	fb01 f303 	mul.w	r3, r1, r3
 80455bc:	4413      	add	r3, r2
 80455be:	3350      	adds	r3, #80	; 0x50
 80455c0:	681b      	ldr	r3, [r3, #0]
}
 80455c2:	4618      	mov	r0, r3
 80455c4:	370c      	adds	r7, #12
 80455c6:	46bd      	mov	sp, r7
 80455c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80455cc:	4770      	bx	lr

080455ce <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80455ce:	b580      	push	{r7, lr}
 80455d0:	b082      	sub	sp, #8
 80455d2:	af00      	add	r7, sp, #0
 80455d4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80455d6:	687b      	ldr	r3, [r7, #4]
 80455d8:	681b      	ldr	r3, [r3, #0]
 80455da:	4618      	mov	r0, r3
 80455dc:	f005 f874 	bl	804a6c8 <USB_GetCurrentFrame>
 80455e0:	4603      	mov	r3, r0
}
 80455e2:	4618      	mov	r0, r3
 80455e4:	3708      	adds	r7, #8
 80455e6:	46bd      	mov	sp, r7
 80455e8:	bd80      	pop	{r7, pc}

080455ea <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80455ea:	b580      	push	{r7, lr}
 80455ec:	b082      	sub	sp, #8
 80455ee:	af00      	add	r7, sp, #0
 80455f0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80455f2:	687b      	ldr	r3, [r7, #4]
 80455f4:	681b      	ldr	r3, [r3, #0]
 80455f6:	4618      	mov	r0, r3
 80455f8:	f005 f84f 	bl	804a69a <USB_GetHostSpeed>
 80455fc:	4603      	mov	r3, r0
}
 80455fe:	4618      	mov	r0, r3
 8045600:	3708      	adds	r7, #8
 8045602:	46bd      	mov	sp, r7
 8045604:	bd80      	pop	{r7, pc}

08045606 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8045606:	b580      	push	{r7, lr}
 8045608:	b086      	sub	sp, #24
 804560a:	af00      	add	r7, sp, #0
 804560c:	6078      	str	r0, [r7, #4]
 804560e:	460b      	mov	r3, r1
 8045610:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8045612:	687b      	ldr	r3, [r7, #4]
 8045614:	681b      	ldr	r3, [r3, #0]
 8045616:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8045618:	697b      	ldr	r3, [r7, #20]
 804561a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 804561c:	78fb      	ldrb	r3, [r7, #3]
 804561e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8045620:	68fb      	ldr	r3, [r7, #12]
 8045622:	015a      	lsls	r2, r3, #5
 8045624:	693b      	ldr	r3, [r7, #16]
 8045626:	4413      	add	r3, r2
 8045628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804562c:	689b      	ldr	r3, [r3, #8]
 804562e:	f003 0304 	and.w	r3, r3, #4
 8045632:	2b04      	cmp	r3, #4
 8045634:	d11a      	bne.n	804566c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8045636:	68fb      	ldr	r3, [r7, #12]
 8045638:	015a      	lsls	r2, r3, #5
 804563a:	693b      	ldr	r3, [r7, #16]
 804563c:	4413      	add	r3, r2
 804563e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045642:	461a      	mov	r2, r3
 8045644:	2304      	movs	r3, #4
 8045646:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8045648:	687a      	ldr	r2, [r7, #4]
 804564a:	68fb      	ldr	r3, [r7, #12]
 804564c:	212c      	movs	r1, #44	; 0x2c
 804564e:	fb01 f303 	mul.w	r3, r1, r3
 8045652:	4413      	add	r3, r2
 8045654:	3361      	adds	r3, #97	; 0x61
 8045656:	2206      	movs	r2, #6
 8045658:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804565a:	687b      	ldr	r3, [r7, #4]
 804565c:	681b      	ldr	r3, [r3, #0]
 804565e:	68fa      	ldr	r2, [r7, #12]
 8045660:	b2d2      	uxtb	r2, r2
 8045662:	4611      	mov	r1, r2
 8045664:	4618      	mov	r0, r3
 8045666:	f005 fab6 	bl	804abd6 <USB_HC_Halt>
 804566a:	e0af      	b.n	80457cc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 804566c:	68fb      	ldr	r3, [r7, #12]
 804566e:	015a      	lsls	r2, r3, #5
 8045670:	693b      	ldr	r3, [r7, #16]
 8045672:	4413      	add	r3, r2
 8045674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045678:	689b      	ldr	r3, [r3, #8]
 804567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804567e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8045682:	d11b      	bne.n	80456bc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8045684:	68fb      	ldr	r3, [r7, #12]
 8045686:	015a      	lsls	r2, r3, #5
 8045688:	693b      	ldr	r3, [r7, #16]
 804568a:	4413      	add	r3, r2
 804568c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045690:	461a      	mov	r2, r3
 8045692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8045696:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8045698:	687a      	ldr	r2, [r7, #4]
 804569a:	68fb      	ldr	r3, [r7, #12]
 804569c:	212c      	movs	r1, #44	; 0x2c
 804569e:	fb01 f303 	mul.w	r3, r1, r3
 80456a2:	4413      	add	r3, r2
 80456a4:	3361      	adds	r3, #97	; 0x61
 80456a6:	2207      	movs	r2, #7
 80456a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80456aa:	687b      	ldr	r3, [r7, #4]
 80456ac:	681b      	ldr	r3, [r3, #0]
 80456ae:	68fa      	ldr	r2, [r7, #12]
 80456b0:	b2d2      	uxtb	r2, r2
 80456b2:	4611      	mov	r1, r2
 80456b4:	4618      	mov	r0, r3
 80456b6:	f005 fa8e 	bl	804abd6 <USB_HC_Halt>
 80456ba:	e087      	b.n	80457cc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80456bc:	68fb      	ldr	r3, [r7, #12]
 80456be:	015a      	lsls	r2, r3, #5
 80456c0:	693b      	ldr	r3, [r7, #16]
 80456c2:	4413      	add	r3, r2
 80456c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80456c8:	689b      	ldr	r3, [r3, #8]
 80456ca:	f003 0320 	and.w	r3, r3, #32
 80456ce:	2b20      	cmp	r3, #32
 80456d0:	d109      	bne.n	80456e6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80456d2:	68fb      	ldr	r3, [r7, #12]
 80456d4:	015a      	lsls	r2, r3, #5
 80456d6:	693b      	ldr	r3, [r7, #16]
 80456d8:	4413      	add	r3, r2
 80456da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80456de:	461a      	mov	r2, r3
 80456e0:	2320      	movs	r3, #32
 80456e2:	6093      	str	r3, [r2, #8]
 80456e4:	e072      	b.n	80457cc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80456e6:	68fb      	ldr	r3, [r7, #12]
 80456e8:	015a      	lsls	r2, r3, #5
 80456ea:	693b      	ldr	r3, [r7, #16]
 80456ec:	4413      	add	r3, r2
 80456ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80456f2:	689b      	ldr	r3, [r3, #8]
 80456f4:	f003 0308 	and.w	r3, r3, #8
 80456f8:	2b08      	cmp	r3, #8
 80456fa:	d11a      	bne.n	8045732 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80456fc:	68fb      	ldr	r3, [r7, #12]
 80456fe:	015a      	lsls	r2, r3, #5
 8045700:	693b      	ldr	r3, [r7, #16]
 8045702:	4413      	add	r3, r2
 8045704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045708:	461a      	mov	r2, r3
 804570a:	2308      	movs	r3, #8
 804570c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 804570e:	687a      	ldr	r2, [r7, #4]
 8045710:	68fb      	ldr	r3, [r7, #12]
 8045712:	212c      	movs	r1, #44	; 0x2c
 8045714:	fb01 f303 	mul.w	r3, r1, r3
 8045718:	4413      	add	r3, r2
 804571a:	3361      	adds	r3, #97	; 0x61
 804571c:	2205      	movs	r2, #5
 804571e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045720:	687b      	ldr	r3, [r7, #4]
 8045722:	681b      	ldr	r3, [r3, #0]
 8045724:	68fa      	ldr	r2, [r7, #12]
 8045726:	b2d2      	uxtb	r2, r2
 8045728:	4611      	mov	r1, r2
 804572a:	4618      	mov	r0, r3
 804572c:	f005 fa53 	bl	804abd6 <USB_HC_Halt>
 8045730:	e04c      	b.n	80457cc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8045732:	68fb      	ldr	r3, [r7, #12]
 8045734:	015a      	lsls	r2, r3, #5
 8045736:	693b      	ldr	r3, [r7, #16]
 8045738:	4413      	add	r3, r2
 804573a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804573e:	689b      	ldr	r3, [r3, #8]
 8045740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8045748:	d11b      	bne.n	8045782 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 804574a:	68fb      	ldr	r3, [r7, #12]
 804574c:	015a      	lsls	r2, r3, #5
 804574e:	693b      	ldr	r3, [r7, #16]
 8045750:	4413      	add	r3, r2
 8045752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045756:	461a      	mov	r2, r3
 8045758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804575c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 804575e:	687a      	ldr	r2, [r7, #4]
 8045760:	68fb      	ldr	r3, [r7, #12]
 8045762:	212c      	movs	r1, #44	; 0x2c
 8045764:	fb01 f303 	mul.w	r3, r1, r3
 8045768:	4413      	add	r3, r2
 804576a:	3361      	adds	r3, #97	; 0x61
 804576c:	2208      	movs	r2, #8
 804576e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045770:	687b      	ldr	r3, [r7, #4]
 8045772:	681b      	ldr	r3, [r3, #0]
 8045774:	68fa      	ldr	r2, [r7, #12]
 8045776:	b2d2      	uxtb	r2, r2
 8045778:	4611      	mov	r1, r2
 804577a:	4618      	mov	r0, r3
 804577c:	f005 fa2b 	bl	804abd6 <USB_HC_Halt>
 8045780:	e024      	b.n	80457cc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8045782:	68fb      	ldr	r3, [r7, #12]
 8045784:	015a      	lsls	r2, r3, #5
 8045786:	693b      	ldr	r3, [r7, #16]
 8045788:	4413      	add	r3, r2
 804578a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804578e:	689b      	ldr	r3, [r3, #8]
 8045790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045794:	2b80      	cmp	r3, #128	; 0x80
 8045796:	d119      	bne.n	80457cc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8045798:	68fb      	ldr	r3, [r7, #12]
 804579a:	015a      	lsls	r2, r3, #5
 804579c:	693b      	ldr	r3, [r7, #16]
 804579e:	4413      	add	r3, r2
 80457a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80457a4:	461a      	mov	r2, r3
 80457a6:	2380      	movs	r3, #128	; 0x80
 80457a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80457aa:	687a      	ldr	r2, [r7, #4]
 80457ac:	68fb      	ldr	r3, [r7, #12]
 80457ae:	212c      	movs	r1, #44	; 0x2c
 80457b0:	fb01 f303 	mul.w	r3, r1, r3
 80457b4:	4413      	add	r3, r2
 80457b6:	3361      	adds	r3, #97	; 0x61
 80457b8:	2206      	movs	r2, #6
 80457ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80457bc:	687b      	ldr	r3, [r7, #4]
 80457be:	681b      	ldr	r3, [r3, #0]
 80457c0:	68fa      	ldr	r2, [r7, #12]
 80457c2:	b2d2      	uxtb	r2, r2
 80457c4:	4611      	mov	r1, r2
 80457c6:	4618      	mov	r0, r3
 80457c8:	f005 fa05 	bl	804abd6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80457cc:	68fb      	ldr	r3, [r7, #12]
 80457ce:	015a      	lsls	r2, r3, #5
 80457d0:	693b      	ldr	r3, [r7, #16]
 80457d2:	4413      	add	r3, r2
 80457d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80457d8:	689b      	ldr	r3, [r3, #8]
 80457da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80457de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80457e2:	d112      	bne.n	804580a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80457e4:	687b      	ldr	r3, [r7, #4]
 80457e6:	681b      	ldr	r3, [r3, #0]
 80457e8:	68fa      	ldr	r2, [r7, #12]
 80457ea:	b2d2      	uxtb	r2, r2
 80457ec:	4611      	mov	r1, r2
 80457ee:	4618      	mov	r0, r3
 80457f0:	f005 f9f1 	bl	804abd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80457f4:	68fb      	ldr	r3, [r7, #12]
 80457f6:	015a      	lsls	r2, r3, #5
 80457f8:	693b      	ldr	r3, [r7, #16]
 80457fa:	4413      	add	r3, r2
 80457fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045800:	461a      	mov	r2, r3
 8045802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8045806:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8045808:	e24e      	b.n	8045ca8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 804580a:	68fb      	ldr	r3, [r7, #12]
 804580c:	015a      	lsls	r2, r3, #5
 804580e:	693b      	ldr	r3, [r7, #16]
 8045810:	4413      	add	r3, r2
 8045812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045816:	689b      	ldr	r3, [r3, #8]
 8045818:	f003 0301 	and.w	r3, r3, #1
 804581c:	2b01      	cmp	r3, #1
 804581e:	f040 80df 	bne.w	80459e0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8045822:	687b      	ldr	r3, [r7, #4]
 8045824:	691b      	ldr	r3, [r3, #16]
 8045826:	2b00      	cmp	r3, #0
 8045828:	d019      	beq.n	804585e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 804582a:	687a      	ldr	r2, [r7, #4]
 804582c:	68fb      	ldr	r3, [r7, #12]
 804582e:	212c      	movs	r1, #44	; 0x2c
 8045830:	fb01 f303 	mul.w	r3, r1, r3
 8045834:	4413      	add	r3, r2
 8045836:	3348      	adds	r3, #72	; 0x48
 8045838:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 804583a:	68fb      	ldr	r3, [r7, #12]
 804583c:	0159      	lsls	r1, r3, #5
 804583e:	693b      	ldr	r3, [r7, #16]
 8045840:	440b      	add	r3, r1
 8045842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045846:	691b      	ldr	r3, [r3, #16]
 8045848:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 804584c:	1ad2      	subs	r2, r2, r3
 804584e:	6879      	ldr	r1, [r7, #4]
 8045850:	68fb      	ldr	r3, [r7, #12]
 8045852:	202c      	movs	r0, #44	; 0x2c
 8045854:	fb00 f303 	mul.w	r3, r0, r3
 8045858:	440b      	add	r3, r1
 804585a:	3350      	adds	r3, #80	; 0x50
 804585c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 804585e:	687a      	ldr	r2, [r7, #4]
 8045860:	68fb      	ldr	r3, [r7, #12]
 8045862:	212c      	movs	r1, #44	; 0x2c
 8045864:	fb01 f303 	mul.w	r3, r1, r3
 8045868:	4413      	add	r3, r2
 804586a:	3361      	adds	r3, #97	; 0x61
 804586c:	2201      	movs	r2, #1
 804586e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8045870:	687a      	ldr	r2, [r7, #4]
 8045872:	68fb      	ldr	r3, [r7, #12]
 8045874:	212c      	movs	r1, #44	; 0x2c
 8045876:	fb01 f303 	mul.w	r3, r1, r3
 804587a:	4413      	add	r3, r2
 804587c:	335c      	adds	r3, #92	; 0x5c
 804587e:	2200      	movs	r2, #0
 8045880:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8045882:	68fb      	ldr	r3, [r7, #12]
 8045884:	015a      	lsls	r2, r3, #5
 8045886:	693b      	ldr	r3, [r7, #16]
 8045888:	4413      	add	r3, r2
 804588a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804588e:	461a      	mov	r2, r3
 8045890:	2301      	movs	r3, #1
 8045892:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8045894:	687a      	ldr	r2, [r7, #4]
 8045896:	68fb      	ldr	r3, [r7, #12]
 8045898:	212c      	movs	r1, #44	; 0x2c
 804589a:	fb01 f303 	mul.w	r3, r1, r3
 804589e:	4413      	add	r3, r2
 80458a0:	333f      	adds	r3, #63	; 0x3f
 80458a2:	781b      	ldrb	r3, [r3, #0]
 80458a4:	2b00      	cmp	r3, #0
 80458a6:	d009      	beq.n	80458bc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80458a8:	687a      	ldr	r2, [r7, #4]
 80458aa:	68fb      	ldr	r3, [r7, #12]
 80458ac:	212c      	movs	r1, #44	; 0x2c
 80458ae:	fb01 f303 	mul.w	r3, r1, r3
 80458b2:	4413      	add	r3, r2
 80458b4:	333f      	adds	r3, #63	; 0x3f
 80458b6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80458b8:	2b02      	cmp	r3, #2
 80458ba:	d111      	bne.n	80458e0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80458bc:	687b      	ldr	r3, [r7, #4]
 80458be:	681b      	ldr	r3, [r3, #0]
 80458c0:	68fa      	ldr	r2, [r7, #12]
 80458c2:	b2d2      	uxtb	r2, r2
 80458c4:	4611      	mov	r1, r2
 80458c6:	4618      	mov	r0, r3
 80458c8:	f005 f985 	bl	804abd6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80458cc:	68fb      	ldr	r3, [r7, #12]
 80458ce:	015a      	lsls	r2, r3, #5
 80458d0:	693b      	ldr	r3, [r7, #16]
 80458d2:	4413      	add	r3, r2
 80458d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80458d8:	461a      	mov	r2, r3
 80458da:	2310      	movs	r3, #16
 80458dc:	6093      	str	r3, [r2, #8]
 80458de:	e03a      	b.n	8045956 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80458e0:	687a      	ldr	r2, [r7, #4]
 80458e2:	68fb      	ldr	r3, [r7, #12]
 80458e4:	212c      	movs	r1, #44	; 0x2c
 80458e6:	fb01 f303 	mul.w	r3, r1, r3
 80458ea:	4413      	add	r3, r2
 80458ec:	333f      	adds	r3, #63	; 0x3f
 80458ee:	781b      	ldrb	r3, [r3, #0]
 80458f0:	2b03      	cmp	r3, #3
 80458f2:	d009      	beq.n	8045908 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80458f4:	687a      	ldr	r2, [r7, #4]
 80458f6:	68fb      	ldr	r3, [r7, #12]
 80458f8:	212c      	movs	r1, #44	; 0x2c
 80458fa:	fb01 f303 	mul.w	r3, r1, r3
 80458fe:	4413      	add	r3, r2
 8045900:	333f      	adds	r3, #63	; 0x3f
 8045902:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8045904:	2b01      	cmp	r3, #1
 8045906:	d126      	bne.n	8045956 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8045908:	68fb      	ldr	r3, [r7, #12]
 804590a:	015a      	lsls	r2, r3, #5
 804590c:	693b      	ldr	r3, [r7, #16]
 804590e:	4413      	add	r3, r2
 8045910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045914:	681b      	ldr	r3, [r3, #0]
 8045916:	68fa      	ldr	r2, [r7, #12]
 8045918:	0151      	lsls	r1, r2, #5
 804591a:	693a      	ldr	r2, [r7, #16]
 804591c:	440a      	add	r2, r1
 804591e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8045922:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8045926:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8045928:	687a      	ldr	r2, [r7, #4]
 804592a:	68fb      	ldr	r3, [r7, #12]
 804592c:	212c      	movs	r1, #44	; 0x2c
 804592e:	fb01 f303 	mul.w	r3, r1, r3
 8045932:	4413      	add	r3, r2
 8045934:	3360      	adds	r3, #96	; 0x60
 8045936:	2201      	movs	r2, #1
 8045938:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 804593a:	68fb      	ldr	r3, [r7, #12]
 804593c:	b2d9      	uxtb	r1, r3
 804593e:	687a      	ldr	r2, [r7, #4]
 8045940:	68fb      	ldr	r3, [r7, #12]
 8045942:	202c      	movs	r0, #44	; 0x2c
 8045944:	fb00 f303 	mul.w	r3, r0, r3
 8045948:	4413      	add	r3, r2
 804594a:	3360      	adds	r3, #96	; 0x60
 804594c:	781b      	ldrb	r3, [r3, #0]
 804594e:	461a      	mov	r2, r3
 8045950:	6878      	ldr	r0, [r7, #4]
 8045952:	f007 fbdf 	bl	804d114 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8045956:	687b      	ldr	r3, [r7, #4]
 8045958:	691b      	ldr	r3, [r3, #16]
 804595a:	2b01      	cmp	r3, #1
 804595c:	d12b      	bne.n	80459b6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 804595e:	687a      	ldr	r2, [r7, #4]
 8045960:	68fb      	ldr	r3, [r7, #12]
 8045962:	212c      	movs	r1, #44	; 0x2c
 8045964:	fb01 f303 	mul.w	r3, r1, r3
 8045968:	4413      	add	r3, r2
 804596a:	3348      	adds	r3, #72	; 0x48
 804596c:	681b      	ldr	r3, [r3, #0]
 804596e:	6879      	ldr	r1, [r7, #4]
 8045970:	68fa      	ldr	r2, [r7, #12]
 8045972:	202c      	movs	r0, #44	; 0x2c
 8045974:	fb00 f202 	mul.w	r2, r0, r2
 8045978:	440a      	add	r2, r1
 804597a:	3240      	adds	r2, #64	; 0x40
 804597c:	8812      	ldrh	r2, [r2, #0]
 804597e:	fbb3 f3f2 	udiv	r3, r3, r2
 8045982:	f003 0301 	and.w	r3, r3, #1
 8045986:	2b00      	cmp	r3, #0
 8045988:	f000 818e 	beq.w	8045ca8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 804598c:	687a      	ldr	r2, [r7, #4]
 804598e:	68fb      	ldr	r3, [r7, #12]
 8045990:	212c      	movs	r1, #44	; 0x2c
 8045992:	fb01 f303 	mul.w	r3, r1, r3
 8045996:	4413      	add	r3, r2
 8045998:	3354      	adds	r3, #84	; 0x54
 804599a:	781b      	ldrb	r3, [r3, #0]
 804599c:	f083 0301 	eor.w	r3, r3, #1
 80459a0:	b2d8      	uxtb	r0, r3
 80459a2:	687a      	ldr	r2, [r7, #4]
 80459a4:	68fb      	ldr	r3, [r7, #12]
 80459a6:	212c      	movs	r1, #44	; 0x2c
 80459a8:	fb01 f303 	mul.w	r3, r1, r3
 80459ac:	4413      	add	r3, r2
 80459ae:	3354      	adds	r3, #84	; 0x54
 80459b0:	4602      	mov	r2, r0
 80459b2:	701a      	strb	r2, [r3, #0]
}
 80459b4:	e178      	b.n	8045ca8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80459b6:	687a      	ldr	r2, [r7, #4]
 80459b8:	68fb      	ldr	r3, [r7, #12]
 80459ba:	212c      	movs	r1, #44	; 0x2c
 80459bc:	fb01 f303 	mul.w	r3, r1, r3
 80459c0:	4413      	add	r3, r2
 80459c2:	3354      	adds	r3, #84	; 0x54
 80459c4:	781b      	ldrb	r3, [r3, #0]
 80459c6:	f083 0301 	eor.w	r3, r3, #1
 80459ca:	b2d8      	uxtb	r0, r3
 80459cc:	687a      	ldr	r2, [r7, #4]
 80459ce:	68fb      	ldr	r3, [r7, #12]
 80459d0:	212c      	movs	r1, #44	; 0x2c
 80459d2:	fb01 f303 	mul.w	r3, r1, r3
 80459d6:	4413      	add	r3, r2
 80459d8:	3354      	adds	r3, #84	; 0x54
 80459da:	4602      	mov	r2, r0
 80459dc:	701a      	strb	r2, [r3, #0]
}
 80459de:	e163      	b.n	8045ca8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80459e0:	68fb      	ldr	r3, [r7, #12]
 80459e2:	015a      	lsls	r2, r3, #5
 80459e4:	693b      	ldr	r3, [r7, #16]
 80459e6:	4413      	add	r3, r2
 80459e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80459ec:	689b      	ldr	r3, [r3, #8]
 80459ee:	f003 0302 	and.w	r3, r3, #2
 80459f2:	2b02      	cmp	r3, #2
 80459f4:	f040 80f6 	bne.w	8045be4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80459f8:	687a      	ldr	r2, [r7, #4]
 80459fa:	68fb      	ldr	r3, [r7, #12]
 80459fc:	212c      	movs	r1, #44	; 0x2c
 80459fe:	fb01 f303 	mul.w	r3, r1, r3
 8045a02:	4413      	add	r3, r2
 8045a04:	3361      	adds	r3, #97	; 0x61
 8045a06:	781b      	ldrb	r3, [r3, #0]
 8045a08:	2b01      	cmp	r3, #1
 8045a0a:	d109      	bne.n	8045a20 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8045a0c:	687a      	ldr	r2, [r7, #4]
 8045a0e:	68fb      	ldr	r3, [r7, #12]
 8045a10:	212c      	movs	r1, #44	; 0x2c
 8045a12:	fb01 f303 	mul.w	r3, r1, r3
 8045a16:	4413      	add	r3, r2
 8045a18:	3360      	adds	r3, #96	; 0x60
 8045a1a:	2201      	movs	r2, #1
 8045a1c:	701a      	strb	r2, [r3, #0]
 8045a1e:	e0c9      	b.n	8045bb4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8045a20:	687a      	ldr	r2, [r7, #4]
 8045a22:	68fb      	ldr	r3, [r7, #12]
 8045a24:	212c      	movs	r1, #44	; 0x2c
 8045a26:	fb01 f303 	mul.w	r3, r1, r3
 8045a2a:	4413      	add	r3, r2
 8045a2c:	3361      	adds	r3, #97	; 0x61
 8045a2e:	781b      	ldrb	r3, [r3, #0]
 8045a30:	2b05      	cmp	r3, #5
 8045a32:	d109      	bne.n	8045a48 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8045a34:	687a      	ldr	r2, [r7, #4]
 8045a36:	68fb      	ldr	r3, [r7, #12]
 8045a38:	212c      	movs	r1, #44	; 0x2c
 8045a3a:	fb01 f303 	mul.w	r3, r1, r3
 8045a3e:	4413      	add	r3, r2
 8045a40:	3360      	adds	r3, #96	; 0x60
 8045a42:	2205      	movs	r2, #5
 8045a44:	701a      	strb	r2, [r3, #0]
 8045a46:	e0b5      	b.n	8045bb4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8045a48:	687a      	ldr	r2, [r7, #4]
 8045a4a:	68fb      	ldr	r3, [r7, #12]
 8045a4c:	212c      	movs	r1, #44	; 0x2c
 8045a4e:	fb01 f303 	mul.w	r3, r1, r3
 8045a52:	4413      	add	r3, r2
 8045a54:	3361      	adds	r3, #97	; 0x61
 8045a56:	781b      	ldrb	r3, [r3, #0]
 8045a58:	2b06      	cmp	r3, #6
 8045a5a:	d009      	beq.n	8045a70 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8045a5c:	687a      	ldr	r2, [r7, #4]
 8045a5e:	68fb      	ldr	r3, [r7, #12]
 8045a60:	212c      	movs	r1, #44	; 0x2c
 8045a62:	fb01 f303 	mul.w	r3, r1, r3
 8045a66:	4413      	add	r3, r2
 8045a68:	3361      	adds	r3, #97	; 0x61
 8045a6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8045a6c:	2b08      	cmp	r3, #8
 8045a6e:	d150      	bne.n	8045b12 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8045a70:	687a      	ldr	r2, [r7, #4]
 8045a72:	68fb      	ldr	r3, [r7, #12]
 8045a74:	212c      	movs	r1, #44	; 0x2c
 8045a76:	fb01 f303 	mul.w	r3, r1, r3
 8045a7a:	4413      	add	r3, r2
 8045a7c:	335c      	adds	r3, #92	; 0x5c
 8045a7e:	681b      	ldr	r3, [r3, #0]
 8045a80:	1c5a      	adds	r2, r3, #1
 8045a82:	6879      	ldr	r1, [r7, #4]
 8045a84:	68fb      	ldr	r3, [r7, #12]
 8045a86:	202c      	movs	r0, #44	; 0x2c
 8045a88:	fb00 f303 	mul.w	r3, r0, r3
 8045a8c:	440b      	add	r3, r1
 8045a8e:	335c      	adds	r3, #92	; 0x5c
 8045a90:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8045a92:	687a      	ldr	r2, [r7, #4]
 8045a94:	68fb      	ldr	r3, [r7, #12]
 8045a96:	212c      	movs	r1, #44	; 0x2c
 8045a98:	fb01 f303 	mul.w	r3, r1, r3
 8045a9c:	4413      	add	r3, r2
 8045a9e:	335c      	adds	r3, #92	; 0x5c
 8045aa0:	681b      	ldr	r3, [r3, #0]
 8045aa2:	2b02      	cmp	r3, #2
 8045aa4:	d912      	bls.n	8045acc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8045aa6:	687a      	ldr	r2, [r7, #4]
 8045aa8:	68fb      	ldr	r3, [r7, #12]
 8045aaa:	212c      	movs	r1, #44	; 0x2c
 8045aac:	fb01 f303 	mul.w	r3, r1, r3
 8045ab0:	4413      	add	r3, r2
 8045ab2:	335c      	adds	r3, #92	; 0x5c
 8045ab4:	2200      	movs	r2, #0
 8045ab6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8045ab8:	687a      	ldr	r2, [r7, #4]
 8045aba:	68fb      	ldr	r3, [r7, #12]
 8045abc:	212c      	movs	r1, #44	; 0x2c
 8045abe:	fb01 f303 	mul.w	r3, r1, r3
 8045ac2:	4413      	add	r3, r2
 8045ac4:	3360      	adds	r3, #96	; 0x60
 8045ac6:	2204      	movs	r2, #4
 8045ac8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8045aca:	e073      	b.n	8045bb4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8045acc:	687a      	ldr	r2, [r7, #4]
 8045ace:	68fb      	ldr	r3, [r7, #12]
 8045ad0:	212c      	movs	r1, #44	; 0x2c
 8045ad2:	fb01 f303 	mul.w	r3, r1, r3
 8045ad6:	4413      	add	r3, r2
 8045ad8:	3360      	adds	r3, #96	; 0x60
 8045ada:	2202      	movs	r2, #2
 8045adc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8045ade:	68fb      	ldr	r3, [r7, #12]
 8045ae0:	015a      	lsls	r2, r3, #5
 8045ae2:	693b      	ldr	r3, [r7, #16]
 8045ae4:	4413      	add	r3, r2
 8045ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045aea:	681b      	ldr	r3, [r3, #0]
 8045aec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8045aee:	68bb      	ldr	r3, [r7, #8]
 8045af0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8045af4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8045af6:	68bb      	ldr	r3, [r7, #8]
 8045af8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8045afc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8045afe:	68fb      	ldr	r3, [r7, #12]
 8045b00:	015a      	lsls	r2, r3, #5
 8045b02:	693b      	ldr	r3, [r7, #16]
 8045b04:	4413      	add	r3, r2
 8045b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045b0a:	461a      	mov	r2, r3
 8045b0c:	68bb      	ldr	r3, [r7, #8]
 8045b0e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8045b10:	e050      	b.n	8045bb4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8045b12:	687a      	ldr	r2, [r7, #4]
 8045b14:	68fb      	ldr	r3, [r7, #12]
 8045b16:	212c      	movs	r1, #44	; 0x2c
 8045b18:	fb01 f303 	mul.w	r3, r1, r3
 8045b1c:	4413      	add	r3, r2
 8045b1e:	3361      	adds	r3, #97	; 0x61
 8045b20:	781b      	ldrb	r3, [r3, #0]
 8045b22:	2b03      	cmp	r3, #3
 8045b24:	d122      	bne.n	8045b6c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8045b26:	687a      	ldr	r2, [r7, #4]
 8045b28:	68fb      	ldr	r3, [r7, #12]
 8045b2a:	212c      	movs	r1, #44	; 0x2c
 8045b2c:	fb01 f303 	mul.w	r3, r1, r3
 8045b30:	4413      	add	r3, r2
 8045b32:	3360      	adds	r3, #96	; 0x60
 8045b34:	2202      	movs	r2, #2
 8045b36:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8045b38:	68fb      	ldr	r3, [r7, #12]
 8045b3a:	015a      	lsls	r2, r3, #5
 8045b3c:	693b      	ldr	r3, [r7, #16]
 8045b3e:	4413      	add	r3, r2
 8045b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045b44:	681b      	ldr	r3, [r3, #0]
 8045b46:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8045b48:	68bb      	ldr	r3, [r7, #8]
 8045b4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8045b4e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8045b50:	68bb      	ldr	r3, [r7, #8]
 8045b52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8045b56:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8045b58:	68fb      	ldr	r3, [r7, #12]
 8045b5a:	015a      	lsls	r2, r3, #5
 8045b5c:	693b      	ldr	r3, [r7, #16]
 8045b5e:	4413      	add	r3, r2
 8045b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045b64:	461a      	mov	r2, r3
 8045b66:	68bb      	ldr	r3, [r7, #8]
 8045b68:	6013      	str	r3, [r2, #0]
 8045b6a:	e023      	b.n	8045bb4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8045b6c:	687a      	ldr	r2, [r7, #4]
 8045b6e:	68fb      	ldr	r3, [r7, #12]
 8045b70:	212c      	movs	r1, #44	; 0x2c
 8045b72:	fb01 f303 	mul.w	r3, r1, r3
 8045b76:	4413      	add	r3, r2
 8045b78:	3361      	adds	r3, #97	; 0x61
 8045b7a:	781b      	ldrb	r3, [r3, #0]
 8045b7c:	2b07      	cmp	r3, #7
 8045b7e:	d119      	bne.n	8045bb4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8045b80:	687a      	ldr	r2, [r7, #4]
 8045b82:	68fb      	ldr	r3, [r7, #12]
 8045b84:	212c      	movs	r1, #44	; 0x2c
 8045b86:	fb01 f303 	mul.w	r3, r1, r3
 8045b8a:	4413      	add	r3, r2
 8045b8c:	335c      	adds	r3, #92	; 0x5c
 8045b8e:	681b      	ldr	r3, [r3, #0]
 8045b90:	1c5a      	adds	r2, r3, #1
 8045b92:	6879      	ldr	r1, [r7, #4]
 8045b94:	68fb      	ldr	r3, [r7, #12]
 8045b96:	202c      	movs	r0, #44	; 0x2c
 8045b98:	fb00 f303 	mul.w	r3, r0, r3
 8045b9c:	440b      	add	r3, r1
 8045b9e:	335c      	adds	r3, #92	; 0x5c
 8045ba0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8045ba2:	687a      	ldr	r2, [r7, #4]
 8045ba4:	68fb      	ldr	r3, [r7, #12]
 8045ba6:	212c      	movs	r1, #44	; 0x2c
 8045ba8:	fb01 f303 	mul.w	r3, r1, r3
 8045bac:	4413      	add	r3, r2
 8045bae:	3360      	adds	r3, #96	; 0x60
 8045bb0:	2204      	movs	r2, #4
 8045bb2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8045bb4:	68fb      	ldr	r3, [r7, #12]
 8045bb6:	015a      	lsls	r2, r3, #5
 8045bb8:	693b      	ldr	r3, [r7, #16]
 8045bba:	4413      	add	r3, r2
 8045bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045bc0:	461a      	mov	r2, r3
 8045bc2:	2302      	movs	r3, #2
 8045bc4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8045bc6:	68fb      	ldr	r3, [r7, #12]
 8045bc8:	b2d9      	uxtb	r1, r3
 8045bca:	687a      	ldr	r2, [r7, #4]
 8045bcc:	68fb      	ldr	r3, [r7, #12]
 8045bce:	202c      	movs	r0, #44	; 0x2c
 8045bd0:	fb00 f303 	mul.w	r3, r0, r3
 8045bd4:	4413      	add	r3, r2
 8045bd6:	3360      	adds	r3, #96	; 0x60
 8045bd8:	781b      	ldrb	r3, [r3, #0]
 8045bda:	461a      	mov	r2, r3
 8045bdc:	6878      	ldr	r0, [r7, #4]
 8045bde:	f007 fa99 	bl	804d114 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8045be2:	e061      	b.n	8045ca8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8045be4:	68fb      	ldr	r3, [r7, #12]
 8045be6:	015a      	lsls	r2, r3, #5
 8045be8:	693b      	ldr	r3, [r7, #16]
 8045bea:	4413      	add	r3, r2
 8045bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045bf0:	689b      	ldr	r3, [r3, #8]
 8045bf2:	f003 0310 	and.w	r3, r3, #16
 8045bf6:	2b10      	cmp	r3, #16
 8045bf8:	d156      	bne.n	8045ca8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8045bfa:	687a      	ldr	r2, [r7, #4]
 8045bfc:	68fb      	ldr	r3, [r7, #12]
 8045bfe:	212c      	movs	r1, #44	; 0x2c
 8045c00:	fb01 f303 	mul.w	r3, r1, r3
 8045c04:	4413      	add	r3, r2
 8045c06:	333f      	adds	r3, #63	; 0x3f
 8045c08:	781b      	ldrb	r3, [r3, #0]
 8045c0a:	2b03      	cmp	r3, #3
 8045c0c:	d111      	bne.n	8045c32 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8045c0e:	687a      	ldr	r2, [r7, #4]
 8045c10:	68fb      	ldr	r3, [r7, #12]
 8045c12:	212c      	movs	r1, #44	; 0x2c
 8045c14:	fb01 f303 	mul.w	r3, r1, r3
 8045c18:	4413      	add	r3, r2
 8045c1a:	335c      	adds	r3, #92	; 0x5c
 8045c1c:	2200      	movs	r2, #0
 8045c1e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045c20:	687b      	ldr	r3, [r7, #4]
 8045c22:	681b      	ldr	r3, [r3, #0]
 8045c24:	68fa      	ldr	r2, [r7, #12]
 8045c26:	b2d2      	uxtb	r2, r2
 8045c28:	4611      	mov	r1, r2
 8045c2a:	4618      	mov	r0, r3
 8045c2c:	f004 ffd3 	bl	804abd6 <USB_HC_Halt>
 8045c30:	e031      	b.n	8045c96 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8045c32:	687a      	ldr	r2, [r7, #4]
 8045c34:	68fb      	ldr	r3, [r7, #12]
 8045c36:	212c      	movs	r1, #44	; 0x2c
 8045c38:	fb01 f303 	mul.w	r3, r1, r3
 8045c3c:	4413      	add	r3, r2
 8045c3e:	333f      	adds	r3, #63	; 0x3f
 8045c40:	781b      	ldrb	r3, [r3, #0]
 8045c42:	2b00      	cmp	r3, #0
 8045c44:	d009      	beq.n	8045c5a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8045c46:	687a      	ldr	r2, [r7, #4]
 8045c48:	68fb      	ldr	r3, [r7, #12]
 8045c4a:	212c      	movs	r1, #44	; 0x2c
 8045c4c:	fb01 f303 	mul.w	r3, r1, r3
 8045c50:	4413      	add	r3, r2
 8045c52:	333f      	adds	r3, #63	; 0x3f
 8045c54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8045c56:	2b02      	cmp	r3, #2
 8045c58:	d11d      	bne.n	8045c96 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8045c5a:	687a      	ldr	r2, [r7, #4]
 8045c5c:	68fb      	ldr	r3, [r7, #12]
 8045c5e:	212c      	movs	r1, #44	; 0x2c
 8045c60:	fb01 f303 	mul.w	r3, r1, r3
 8045c64:	4413      	add	r3, r2
 8045c66:	335c      	adds	r3, #92	; 0x5c
 8045c68:	2200      	movs	r2, #0
 8045c6a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8045c6c:	687b      	ldr	r3, [r7, #4]
 8045c6e:	691b      	ldr	r3, [r3, #16]
 8045c70:	2b00      	cmp	r3, #0
 8045c72:	d110      	bne.n	8045c96 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8045c74:	687a      	ldr	r2, [r7, #4]
 8045c76:	68fb      	ldr	r3, [r7, #12]
 8045c78:	212c      	movs	r1, #44	; 0x2c
 8045c7a:	fb01 f303 	mul.w	r3, r1, r3
 8045c7e:	4413      	add	r3, r2
 8045c80:	3361      	adds	r3, #97	; 0x61
 8045c82:	2203      	movs	r2, #3
 8045c84:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045c86:	687b      	ldr	r3, [r7, #4]
 8045c88:	681b      	ldr	r3, [r3, #0]
 8045c8a:	68fa      	ldr	r2, [r7, #12]
 8045c8c:	b2d2      	uxtb	r2, r2
 8045c8e:	4611      	mov	r1, r2
 8045c90:	4618      	mov	r0, r3
 8045c92:	f004 ffa0 	bl	804abd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8045c96:	68fb      	ldr	r3, [r7, #12]
 8045c98:	015a      	lsls	r2, r3, #5
 8045c9a:	693b      	ldr	r3, [r7, #16]
 8045c9c:	4413      	add	r3, r2
 8045c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045ca2:	461a      	mov	r2, r3
 8045ca4:	2310      	movs	r3, #16
 8045ca6:	6093      	str	r3, [r2, #8]
}
 8045ca8:	bf00      	nop
 8045caa:	3718      	adds	r7, #24
 8045cac:	46bd      	mov	sp, r7
 8045cae:	bd80      	pop	{r7, pc}

08045cb0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8045cb0:	b580      	push	{r7, lr}
 8045cb2:	b088      	sub	sp, #32
 8045cb4:	af00      	add	r7, sp, #0
 8045cb6:	6078      	str	r0, [r7, #4]
 8045cb8:	460b      	mov	r3, r1
 8045cba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8045cbc:	687b      	ldr	r3, [r7, #4]
 8045cbe:	681b      	ldr	r3, [r3, #0]
 8045cc0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8045cc2:	69fb      	ldr	r3, [r7, #28]
 8045cc4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8045cc6:	78fb      	ldrb	r3, [r7, #3]
 8045cc8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8045cca:	697b      	ldr	r3, [r7, #20]
 8045ccc:	015a      	lsls	r2, r3, #5
 8045cce:	69bb      	ldr	r3, [r7, #24]
 8045cd0:	4413      	add	r3, r2
 8045cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045cd6:	689b      	ldr	r3, [r3, #8]
 8045cd8:	f003 0304 	and.w	r3, r3, #4
 8045cdc:	2b04      	cmp	r3, #4
 8045cde:	d11a      	bne.n	8045d16 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8045ce0:	697b      	ldr	r3, [r7, #20]
 8045ce2:	015a      	lsls	r2, r3, #5
 8045ce4:	69bb      	ldr	r3, [r7, #24]
 8045ce6:	4413      	add	r3, r2
 8045ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045cec:	461a      	mov	r2, r3
 8045cee:	2304      	movs	r3, #4
 8045cf0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8045cf2:	687a      	ldr	r2, [r7, #4]
 8045cf4:	697b      	ldr	r3, [r7, #20]
 8045cf6:	212c      	movs	r1, #44	; 0x2c
 8045cf8:	fb01 f303 	mul.w	r3, r1, r3
 8045cfc:	4413      	add	r3, r2
 8045cfe:	3361      	adds	r3, #97	; 0x61
 8045d00:	2206      	movs	r2, #6
 8045d02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045d04:	687b      	ldr	r3, [r7, #4]
 8045d06:	681b      	ldr	r3, [r3, #0]
 8045d08:	697a      	ldr	r2, [r7, #20]
 8045d0a:	b2d2      	uxtb	r2, r2
 8045d0c:	4611      	mov	r1, r2
 8045d0e:	4618      	mov	r0, r3
 8045d10:	f004 ff61 	bl	804abd6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8045d14:	e331      	b.n	804637a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8045d16:	697b      	ldr	r3, [r7, #20]
 8045d18:	015a      	lsls	r2, r3, #5
 8045d1a:	69bb      	ldr	r3, [r7, #24]
 8045d1c:	4413      	add	r3, r2
 8045d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045d22:	689b      	ldr	r3, [r3, #8]
 8045d24:	f003 0320 	and.w	r3, r3, #32
 8045d28:	2b20      	cmp	r3, #32
 8045d2a:	d12e      	bne.n	8045d8a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8045d2c:	697b      	ldr	r3, [r7, #20]
 8045d2e:	015a      	lsls	r2, r3, #5
 8045d30:	69bb      	ldr	r3, [r7, #24]
 8045d32:	4413      	add	r3, r2
 8045d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045d38:	461a      	mov	r2, r3
 8045d3a:	2320      	movs	r3, #32
 8045d3c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8045d3e:	687a      	ldr	r2, [r7, #4]
 8045d40:	697b      	ldr	r3, [r7, #20]
 8045d42:	212c      	movs	r1, #44	; 0x2c
 8045d44:	fb01 f303 	mul.w	r3, r1, r3
 8045d48:	4413      	add	r3, r2
 8045d4a:	333d      	adds	r3, #61	; 0x3d
 8045d4c:	781b      	ldrb	r3, [r3, #0]
 8045d4e:	2b01      	cmp	r3, #1
 8045d50:	f040 8313 	bne.w	804637a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8045d54:	687a      	ldr	r2, [r7, #4]
 8045d56:	697b      	ldr	r3, [r7, #20]
 8045d58:	212c      	movs	r1, #44	; 0x2c
 8045d5a:	fb01 f303 	mul.w	r3, r1, r3
 8045d5e:	4413      	add	r3, r2
 8045d60:	333d      	adds	r3, #61	; 0x3d
 8045d62:	2200      	movs	r2, #0
 8045d64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8045d66:	687a      	ldr	r2, [r7, #4]
 8045d68:	697b      	ldr	r3, [r7, #20]
 8045d6a:	212c      	movs	r1, #44	; 0x2c
 8045d6c:	fb01 f303 	mul.w	r3, r1, r3
 8045d70:	4413      	add	r3, r2
 8045d72:	3360      	adds	r3, #96	; 0x60
 8045d74:	2202      	movs	r2, #2
 8045d76:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045d78:	687b      	ldr	r3, [r7, #4]
 8045d7a:	681b      	ldr	r3, [r3, #0]
 8045d7c:	697a      	ldr	r2, [r7, #20]
 8045d7e:	b2d2      	uxtb	r2, r2
 8045d80:	4611      	mov	r1, r2
 8045d82:	4618      	mov	r0, r3
 8045d84:	f004 ff27 	bl	804abd6 <USB_HC_Halt>
}
 8045d88:	e2f7      	b.n	804637a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8045d8a:	697b      	ldr	r3, [r7, #20]
 8045d8c:	015a      	lsls	r2, r3, #5
 8045d8e:	69bb      	ldr	r3, [r7, #24]
 8045d90:	4413      	add	r3, r2
 8045d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045d96:	689b      	ldr	r3, [r3, #8]
 8045d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8045d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8045da0:	d112      	bne.n	8045dc8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8045da2:	697b      	ldr	r3, [r7, #20]
 8045da4:	015a      	lsls	r2, r3, #5
 8045da6:	69bb      	ldr	r3, [r7, #24]
 8045da8:	4413      	add	r3, r2
 8045daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045dae:	461a      	mov	r2, r3
 8045db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8045db4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045db6:	687b      	ldr	r3, [r7, #4]
 8045db8:	681b      	ldr	r3, [r3, #0]
 8045dba:	697a      	ldr	r2, [r7, #20]
 8045dbc:	b2d2      	uxtb	r2, r2
 8045dbe:	4611      	mov	r1, r2
 8045dc0:	4618      	mov	r0, r3
 8045dc2:	f004 ff08 	bl	804abd6 <USB_HC_Halt>
}
 8045dc6:	e2d8      	b.n	804637a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8045dc8:	697b      	ldr	r3, [r7, #20]
 8045dca:	015a      	lsls	r2, r3, #5
 8045dcc:	69bb      	ldr	r3, [r7, #24]
 8045dce:	4413      	add	r3, r2
 8045dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045dd4:	689b      	ldr	r3, [r3, #8]
 8045dd6:	f003 0301 	and.w	r3, r3, #1
 8045dda:	2b01      	cmp	r3, #1
 8045ddc:	d140      	bne.n	8045e60 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8045dde:	687a      	ldr	r2, [r7, #4]
 8045de0:	697b      	ldr	r3, [r7, #20]
 8045de2:	212c      	movs	r1, #44	; 0x2c
 8045de4:	fb01 f303 	mul.w	r3, r1, r3
 8045de8:	4413      	add	r3, r2
 8045dea:	335c      	adds	r3, #92	; 0x5c
 8045dec:	2200      	movs	r2, #0
 8045dee:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8045df0:	697b      	ldr	r3, [r7, #20]
 8045df2:	015a      	lsls	r2, r3, #5
 8045df4:	69bb      	ldr	r3, [r7, #24]
 8045df6:	4413      	add	r3, r2
 8045df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045dfc:	689b      	ldr	r3, [r3, #8]
 8045dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045e02:	2b40      	cmp	r3, #64	; 0x40
 8045e04:	d111      	bne.n	8045e2a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8045e06:	687a      	ldr	r2, [r7, #4]
 8045e08:	697b      	ldr	r3, [r7, #20]
 8045e0a:	212c      	movs	r1, #44	; 0x2c
 8045e0c:	fb01 f303 	mul.w	r3, r1, r3
 8045e10:	4413      	add	r3, r2
 8045e12:	333d      	adds	r3, #61	; 0x3d
 8045e14:	2201      	movs	r2, #1
 8045e16:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8045e18:	697b      	ldr	r3, [r7, #20]
 8045e1a:	015a      	lsls	r2, r3, #5
 8045e1c:	69bb      	ldr	r3, [r7, #24]
 8045e1e:	4413      	add	r3, r2
 8045e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045e24:	461a      	mov	r2, r3
 8045e26:	2340      	movs	r3, #64	; 0x40
 8045e28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8045e2a:	697b      	ldr	r3, [r7, #20]
 8045e2c:	015a      	lsls	r2, r3, #5
 8045e2e:	69bb      	ldr	r3, [r7, #24]
 8045e30:	4413      	add	r3, r2
 8045e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045e36:	461a      	mov	r2, r3
 8045e38:	2301      	movs	r3, #1
 8045e3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8045e3c:	687a      	ldr	r2, [r7, #4]
 8045e3e:	697b      	ldr	r3, [r7, #20]
 8045e40:	212c      	movs	r1, #44	; 0x2c
 8045e42:	fb01 f303 	mul.w	r3, r1, r3
 8045e46:	4413      	add	r3, r2
 8045e48:	3361      	adds	r3, #97	; 0x61
 8045e4a:	2201      	movs	r2, #1
 8045e4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045e4e:	687b      	ldr	r3, [r7, #4]
 8045e50:	681b      	ldr	r3, [r3, #0]
 8045e52:	697a      	ldr	r2, [r7, #20]
 8045e54:	b2d2      	uxtb	r2, r2
 8045e56:	4611      	mov	r1, r2
 8045e58:	4618      	mov	r0, r3
 8045e5a:	f004 febc 	bl	804abd6 <USB_HC_Halt>
}
 8045e5e:	e28c      	b.n	804637a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8045e60:	697b      	ldr	r3, [r7, #20]
 8045e62:	015a      	lsls	r2, r3, #5
 8045e64:	69bb      	ldr	r3, [r7, #24]
 8045e66:	4413      	add	r3, r2
 8045e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045e6c:	689b      	ldr	r3, [r3, #8]
 8045e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045e72:	2b40      	cmp	r3, #64	; 0x40
 8045e74:	d12c      	bne.n	8045ed0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8045e76:	687a      	ldr	r2, [r7, #4]
 8045e78:	697b      	ldr	r3, [r7, #20]
 8045e7a:	212c      	movs	r1, #44	; 0x2c
 8045e7c:	fb01 f303 	mul.w	r3, r1, r3
 8045e80:	4413      	add	r3, r2
 8045e82:	3361      	adds	r3, #97	; 0x61
 8045e84:	2204      	movs	r2, #4
 8045e86:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8045e88:	687a      	ldr	r2, [r7, #4]
 8045e8a:	697b      	ldr	r3, [r7, #20]
 8045e8c:	212c      	movs	r1, #44	; 0x2c
 8045e8e:	fb01 f303 	mul.w	r3, r1, r3
 8045e92:	4413      	add	r3, r2
 8045e94:	333d      	adds	r3, #61	; 0x3d
 8045e96:	2201      	movs	r2, #1
 8045e98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8045e9a:	687a      	ldr	r2, [r7, #4]
 8045e9c:	697b      	ldr	r3, [r7, #20]
 8045e9e:	212c      	movs	r1, #44	; 0x2c
 8045ea0:	fb01 f303 	mul.w	r3, r1, r3
 8045ea4:	4413      	add	r3, r2
 8045ea6:	335c      	adds	r3, #92	; 0x5c
 8045ea8:	2200      	movs	r2, #0
 8045eaa:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045eac:	687b      	ldr	r3, [r7, #4]
 8045eae:	681b      	ldr	r3, [r3, #0]
 8045eb0:	697a      	ldr	r2, [r7, #20]
 8045eb2:	b2d2      	uxtb	r2, r2
 8045eb4:	4611      	mov	r1, r2
 8045eb6:	4618      	mov	r0, r3
 8045eb8:	f004 fe8d 	bl	804abd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8045ebc:	697b      	ldr	r3, [r7, #20]
 8045ebe:	015a      	lsls	r2, r3, #5
 8045ec0:	69bb      	ldr	r3, [r7, #24]
 8045ec2:	4413      	add	r3, r2
 8045ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045ec8:	461a      	mov	r2, r3
 8045eca:	2340      	movs	r3, #64	; 0x40
 8045ecc:	6093      	str	r3, [r2, #8]
}
 8045ece:	e254      	b.n	804637a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8045ed0:	697b      	ldr	r3, [r7, #20]
 8045ed2:	015a      	lsls	r2, r3, #5
 8045ed4:	69bb      	ldr	r3, [r7, #24]
 8045ed6:	4413      	add	r3, r2
 8045ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045edc:	689b      	ldr	r3, [r3, #8]
 8045ede:	f003 0308 	and.w	r3, r3, #8
 8045ee2:	2b08      	cmp	r3, #8
 8045ee4:	d11a      	bne.n	8045f1c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8045ee6:	697b      	ldr	r3, [r7, #20]
 8045ee8:	015a      	lsls	r2, r3, #5
 8045eea:	69bb      	ldr	r3, [r7, #24]
 8045eec:	4413      	add	r3, r2
 8045eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045ef2:	461a      	mov	r2, r3
 8045ef4:	2308      	movs	r3, #8
 8045ef6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8045ef8:	687a      	ldr	r2, [r7, #4]
 8045efa:	697b      	ldr	r3, [r7, #20]
 8045efc:	212c      	movs	r1, #44	; 0x2c
 8045efe:	fb01 f303 	mul.w	r3, r1, r3
 8045f02:	4413      	add	r3, r2
 8045f04:	3361      	adds	r3, #97	; 0x61
 8045f06:	2205      	movs	r2, #5
 8045f08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045f0a:	687b      	ldr	r3, [r7, #4]
 8045f0c:	681b      	ldr	r3, [r3, #0]
 8045f0e:	697a      	ldr	r2, [r7, #20]
 8045f10:	b2d2      	uxtb	r2, r2
 8045f12:	4611      	mov	r1, r2
 8045f14:	4618      	mov	r0, r3
 8045f16:	f004 fe5e 	bl	804abd6 <USB_HC_Halt>
}
 8045f1a:	e22e      	b.n	804637a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8045f1c:	697b      	ldr	r3, [r7, #20]
 8045f1e:	015a      	lsls	r2, r3, #5
 8045f20:	69bb      	ldr	r3, [r7, #24]
 8045f22:	4413      	add	r3, r2
 8045f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045f28:	689b      	ldr	r3, [r3, #8]
 8045f2a:	f003 0310 	and.w	r3, r3, #16
 8045f2e:	2b10      	cmp	r3, #16
 8045f30:	d140      	bne.n	8045fb4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8045f32:	687a      	ldr	r2, [r7, #4]
 8045f34:	697b      	ldr	r3, [r7, #20]
 8045f36:	212c      	movs	r1, #44	; 0x2c
 8045f38:	fb01 f303 	mul.w	r3, r1, r3
 8045f3c:	4413      	add	r3, r2
 8045f3e:	335c      	adds	r3, #92	; 0x5c
 8045f40:	2200      	movs	r2, #0
 8045f42:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8045f44:	687a      	ldr	r2, [r7, #4]
 8045f46:	697b      	ldr	r3, [r7, #20]
 8045f48:	212c      	movs	r1, #44	; 0x2c
 8045f4a:	fb01 f303 	mul.w	r3, r1, r3
 8045f4e:	4413      	add	r3, r2
 8045f50:	3361      	adds	r3, #97	; 0x61
 8045f52:	2203      	movs	r2, #3
 8045f54:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8045f56:	687a      	ldr	r2, [r7, #4]
 8045f58:	697b      	ldr	r3, [r7, #20]
 8045f5a:	212c      	movs	r1, #44	; 0x2c
 8045f5c:	fb01 f303 	mul.w	r3, r1, r3
 8045f60:	4413      	add	r3, r2
 8045f62:	333d      	adds	r3, #61	; 0x3d
 8045f64:	781b      	ldrb	r3, [r3, #0]
 8045f66:	2b00      	cmp	r3, #0
 8045f68:	d112      	bne.n	8045f90 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8045f6a:	687a      	ldr	r2, [r7, #4]
 8045f6c:	697b      	ldr	r3, [r7, #20]
 8045f6e:	212c      	movs	r1, #44	; 0x2c
 8045f70:	fb01 f303 	mul.w	r3, r1, r3
 8045f74:	4413      	add	r3, r2
 8045f76:	333c      	adds	r3, #60	; 0x3c
 8045f78:	781b      	ldrb	r3, [r3, #0]
 8045f7a:	2b00      	cmp	r3, #0
 8045f7c:	d108      	bne.n	8045f90 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8045f7e:	687a      	ldr	r2, [r7, #4]
 8045f80:	697b      	ldr	r3, [r7, #20]
 8045f82:	212c      	movs	r1, #44	; 0x2c
 8045f84:	fb01 f303 	mul.w	r3, r1, r3
 8045f88:	4413      	add	r3, r2
 8045f8a:	333d      	adds	r3, #61	; 0x3d
 8045f8c:	2201      	movs	r2, #1
 8045f8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045f90:	687b      	ldr	r3, [r7, #4]
 8045f92:	681b      	ldr	r3, [r3, #0]
 8045f94:	697a      	ldr	r2, [r7, #20]
 8045f96:	b2d2      	uxtb	r2, r2
 8045f98:	4611      	mov	r1, r2
 8045f9a:	4618      	mov	r0, r3
 8045f9c:	f004 fe1b 	bl	804abd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8045fa0:	697b      	ldr	r3, [r7, #20]
 8045fa2:	015a      	lsls	r2, r3, #5
 8045fa4:	69bb      	ldr	r3, [r7, #24]
 8045fa6:	4413      	add	r3, r2
 8045fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045fac:	461a      	mov	r2, r3
 8045fae:	2310      	movs	r3, #16
 8045fb0:	6093      	str	r3, [r2, #8]
}
 8045fb2:	e1e2      	b.n	804637a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8045fb4:	697b      	ldr	r3, [r7, #20]
 8045fb6:	015a      	lsls	r2, r3, #5
 8045fb8:	69bb      	ldr	r3, [r7, #24]
 8045fba:	4413      	add	r3, r2
 8045fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045fc0:	689b      	ldr	r3, [r3, #8]
 8045fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045fc6:	2b80      	cmp	r3, #128	; 0x80
 8045fc8:	d164      	bne.n	8046094 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8045fca:	687b      	ldr	r3, [r7, #4]
 8045fcc:	691b      	ldr	r3, [r3, #16]
 8045fce:	2b00      	cmp	r3, #0
 8045fd0:	d111      	bne.n	8045ff6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8045fd2:	687a      	ldr	r2, [r7, #4]
 8045fd4:	697b      	ldr	r3, [r7, #20]
 8045fd6:	212c      	movs	r1, #44	; 0x2c
 8045fd8:	fb01 f303 	mul.w	r3, r1, r3
 8045fdc:	4413      	add	r3, r2
 8045fde:	3361      	adds	r3, #97	; 0x61
 8045fe0:	2206      	movs	r2, #6
 8045fe2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045fe4:	687b      	ldr	r3, [r7, #4]
 8045fe6:	681b      	ldr	r3, [r3, #0]
 8045fe8:	697a      	ldr	r2, [r7, #20]
 8045fea:	b2d2      	uxtb	r2, r2
 8045fec:	4611      	mov	r1, r2
 8045fee:	4618      	mov	r0, r3
 8045ff0:	f004 fdf1 	bl	804abd6 <USB_HC_Halt>
 8045ff4:	e044      	b.n	8046080 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8045ff6:	687a      	ldr	r2, [r7, #4]
 8045ff8:	697b      	ldr	r3, [r7, #20]
 8045ffa:	212c      	movs	r1, #44	; 0x2c
 8045ffc:	fb01 f303 	mul.w	r3, r1, r3
 8046000:	4413      	add	r3, r2
 8046002:	335c      	adds	r3, #92	; 0x5c
 8046004:	681b      	ldr	r3, [r3, #0]
 8046006:	1c5a      	adds	r2, r3, #1
 8046008:	6879      	ldr	r1, [r7, #4]
 804600a:	697b      	ldr	r3, [r7, #20]
 804600c:	202c      	movs	r0, #44	; 0x2c
 804600e:	fb00 f303 	mul.w	r3, r0, r3
 8046012:	440b      	add	r3, r1
 8046014:	335c      	adds	r3, #92	; 0x5c
 8046016:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8046018:	687a      	ldr	r2, [r7, #4]
 804601a:	697b      	ldr	r3, [r7, #20]
 804601c:	212c      	movs	r1, #44	; 0x2c
 804601e:	fb01 f303 	mul.w	r3, r1, r3
 8046022:	4413      	add	r3, r2
 8046024:	335c      	adds	r3, #92	; 0x5c
 8046026:	681b      	ldr	r3, [r3, #0]
 8046028:	2b02      	cmp	r3, #2
 804602a:	d920      	bls.n	804606e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 804602c:	687a      	ldr	r2, [r7, #4]
 804602e:	697b      	ldr	r3, [r7, #20]
 8046030:	212c      	movs	r1, #44	; 0x2c
 8046032:	fb01 f303 	mul.w	r3, r1, r3
 8046036:	4413      	add	r3, r2
 8046038:	335c      	adds	r3, #92	; 0x5c
 804603a:	2200      	movs	r2, #0
 804603c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 804603e:	687a      	ldr	r2, [r7, #4]
 8046040:	697b      	ldr	r3, [r7, #20]
 8046042:	212c      	movs	r1, #44	; 0x2c
 8046044:	fb01 f303 	mul.w	r3, r1, r3
 8046048:	4413      	add	r3, r2
 804604a:	3360      	adds	r3, #96	; 0x60
 804604c:	2204      	movs	r2, #4
 804604e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8046050:	697b      	ldr	r3, [r7, #20]
 8046052:	b2d9      	uxtb	r1, r3
 8046054:	687a      	ldr	r2, [r7, #4]
 8046056:	697b      	ldr	r3, [r7, #20]
 8046058:	202c      	movs	r0, #44	; 0x2c
 804605a:	fb00 f303 	mul.w	r3, r0, r3
 804605e:	4413      	add	r3, r2
 8046060:	3360      	adds	r3, #96	; 0x60
 8046062:	781b      	ldrb	r3, [r3, #0]
 8046064:	461a      	mov	r2, r3
 8046066:	6878      	ldr	r0, [r7, #4]
 8046068:	f007 f854 	bl	804d114 <HAL_HCD_HC_NotifyURBChange_Callback>
 804606c:	e008      	b.n	8046080 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 804606e:	687a      	ldr	r2, [r7, #4]
 8046070:	697b      	ldr	r3, [r7, #20]
 8046072:	212c      	movs	r1, #44	; 0x2c
 8046074:	fb01 f303 	mul.w	r3, r1, r3
 8046078:	4413      	add	r3, r2
 804607a:	3360      	adds	r3, #96	; 0x60
 804607c:	2202      	movs	r2, #2
 804607e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8046080:	697b      	ldr	r3, [r7, #20]
 8046082:	015a      	lsls	r2, r3, #5
 8046084:	69bb      	ldr	r3, [r7, #24]
 8046086:	4413      	add	r3, r2
 8046088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804608c:	461a      	mov	r2, r3
 804608e:	2380      	movs	r3, #128	; 0x80
 8046090:	6093      	str	r3, [r2, #8]
}
 8046092:	e172      	b.n	804637a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8046094:	697b      	ldr	r3, [r7, #20]
 8046096:	015a      	lsls	r2, r3, #5
 8046098:	69bb      	ldr	r3, [r7, #24]
 804609a:	4413      	add	r3, r2
 804609c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80460a0:	689b      	ldr	r3, [r3, #8]
 80460a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80460a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80460aa:	d11b      	bne.n	80460e4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80460ac:	687a      	ldr	r2, [r7, #4]
 80460ae:	697b      	ldr	r3, [r7, #20]
 80460b0:	212c      	movs	r1, #44	; 0x2c
 80460b2:	fb01 f303 	mul.w	r3, r1, r3
 80460b6:	4413      	add	r3, r2
 80460b8:	3361      	adds	r3, #97	; 0x61
 80460ba:	2208      	movs	r2, #8
 80460bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80460be:	687b      	ldr	r3, [r7, #4]
 80460c0:	681b      	ldr	r3, [r3, #0]
 80460c2:	697a      	ldr	r2, [r7, #20]
 80460c4:	b2d2      	uxtb	r2, r2
 80460c6:	4611      	mov	r1, r2
 80460c8:	4618      	mov	r0, r3
 80460ca:	f004 fd84 	bl	804abd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80460ce:	697b      	ldr	r3, [r7, #20]
 80460d0:	015a      	lsls	r2, r3, #5
 80460d2:	69bb      	ldr	r3, [r7, #24]
 80460d4:	4413      	add	r3, r2
 80460d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80460da:	461a      	mov	r2, r3
 80460dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80460e0:	6093      	str	r3, [r2, #8]
}
 80460e2:	e14a      	b.n	804637a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80460e4:	697b      	ldr	r3, [r7, #20]
 80460e6:	015a      	lsls	r2, r3, #5
 80460e8:	69bb      	ldr	r3, [r7, #24]
 80460ea:	4413      	add	r3, r2
 80460ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80460f0:	689b      	ldr	r3, [r3, #8]
 80460f2:	f003 0302 	and.w	r3, r3, #2
 80460f6:	2b02      	cmp	r3, #2
 80460f8:	f040 813f 	bne.w	804637a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80460fc:	687a      	ldr	r2, [r7, #4]
 80460fe:	697b      	ldr	r3, [r7, #20]
 8046100:	212c      	movs	r1, #44	; 0x2c
 8046102:	fb01 f303 	mul.w	r3, r1, r3
 8046106:	4413      	add	r3, r2
 8046108:	3361      	adds	r3, #97	; 0x61
 804610a:	781b      	ldrb	r3, [r3, #0]
 804610c:	2b01      	cmp	r3, #1
 804610e:	d17d      	bne.n	804620c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8046110:	687a      	ldr	r2, [r7, #4]
 8046112:	697b      	ldr	r3, [r7, #20]
 8046114:	212c      	movs	r1, #44	; 0x2c
 8046116:	fb01 f303 	mul.w	r3, r1, r3
 804611a:	4413      	add	r3, r2
 804611c:	3360      	adds	r3, #96	; 0x60
 804611e:	2201      	movs	r2, #1
 8046120:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8046122:	687a      	ldr	r2, [r7, #4]
 8046124:	697b      	ldr	r3, [r7, #20]
 8046126:	212c      	movs	r1, #44	; 0x2c
 8046128:	fb01 f303 	mul.w	r3, r1, r3
 804612c:	4413      	add	r3, r2
 804612e:	333f      	adds	r3, #63	; 0x3f
 8046130:	781b      	ldrb	r3, [r3, #0]
 8046132:	2b02      	cmp	r3, #2
 8046134:	d00a      	beq.n	804614c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8046136:	687a      	ldr	r2, [r7, #4]
 8046138:	697b      	ldr	r3, [r7, #20]
 804613a:	212c      	movs	r1, #44	; 0x2c
 804613c:	fb01 f303 	mul.w	r3, r1, r3
 8046140:	4413      	add	r3, r2
 8046142:	333f      	adds	r3, #63	; 0x3f
 8046144:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8046146:	2b03      	cmp	r3, #3
 8046148:	f040 8100 	bne.w	804634c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 804614c:	687b      	ldr	r3, [r7, #4]
 804614e:	691b      	ldr	r3, [r3, #16]
 8046150:	2b00      	cmp	r3, #0
 8046152:	d113      	bne.n	804617c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8046154:	687a      	ldr	r2, [r7, #4]
 8046156:	697b      	ldr	r3, [r7, #20]
 8046158:	212c      	movs	r1, #44	; 0x2c
 804615a:	fb01 f303 	mul.w	r3, r1, r3
 804615e:	4413      	add	r3, r2
 8046160:	3355      	adds	r3, #85	; 0x55
 8046162:	781b      	ldrb	r3, [r3, #0]
 8046164:	f083 0301 	eor.w	r3, r3, #1
 8046168:	b2d8      	uxtb	r0, r3
 804616a:	687a      	ldr	r2, [r7, #4]
 804616c:	697b      	ldr	r3, [r7, #20]
 804616e:	212c      	movs	r1, #44	; 0x2c
 8046170:	fb01 f303 	mul.w	r3, r1, r3
 8046174:	4413      	add	r3, r2
 8046176:	3355      	adds	r3, #85	; 0x55
 8046178:	4602      	mov	r2, r0
 804617a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 804617c:	687b      	ldr	r3, [r7, #4]
 804617e:	691b      	ldr	r3, [r3, #16]
 8046180:	2b01      	cmp	r3, #1
 8046182:	f040 80e3 	bne.w	804634c <HCD_HC_OUT_IRQHandler+0x69c>
 8046186:	687a      	ldr	r2, [r7, #4]
 8046188:	697b      	ldr	r3, [r7, #20]
 804618a:	212c      	movs	r1, #44	; 0x2c
 804618c:	fb01 f303 	mul.w	r3, r1, r3
 8046190:	4413      	add	r3, r2
 8046192:	334c      	adds	r3, #76	; 0x4c
 8046194:	681b      	ldr	r3, [r3, #0]
 8046196:	2b00      	cmp	r3, #0
 8046198:	f000 80d8 	beq.w	804634c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 804619c:	687a      	ldr	r2, [r7, #4]
 804619e:	697b      	ldr	r3, [r7, #20]
 80461a0:	212c      	movs	r1, #44	; 0x2c
 80461a2:	fb01 f303 	mul.w	r3, r1, r3
 80461a6:	4413      	add	r3, r2
 80461a8:	334c      	adds	r3, #76	; 0x4c
 80461aa:	681b      	ldr	r3, [r3, #0]
 80461ac:	6879      	ldr	r1, [r7, #4]
 80461ae:	697a      	ldr	r2, [r7, #20]
 80461b0:	202c      	movs	r0, #44	; 0x2c
 80461b2:	fb00 f202 	mul.w	r2, r0, r2
 80461b6:	440a      	add	r2, r1
 80461b8:	3240      	adds	r2, #64	; 0x40
 80461ba:	8812      	ldrh	r2, [r2, #0]
 80461bc:	4413      	add	r3, r2
 80461be:	3b01      	subs	r3, #1
 80461c0:	6879      	ldr	r1, [r7, #4]
 80461c2:	697a      	ldr	r2, [r7, #20]
 80461c4:	202c      	movs	r0, #44	; 0x2c
 80461c6:	fb00 f202 	mul.w	r2, r0, r2
 80461ca:	440a      	add	r2, r1
 80461cc:	3240      	adds	r2, #64	; 0x40
 80461ce:	8812      	ldrh	r2, [r2, #0]
 80461d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80461d4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80461d6:	68fb      	ldr	r3, [r7, #12]
 80461d8:	f003 0301 	and.w	r3, r3, #1
 80461dc:	2b00      	cmp	r3, #0
 80461de:	f000 80b5 	beq.w	804634c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80461e2:	687a      	ldr	r2, [r7, #4]
 80461e4:	697b      	ldr	r3, [r7, #20]
 80461e6:	212c      	movs	r1, #44	; 0x2c
 80461e8:	fb01 f303 	mul.w	r3, r1, r3
 80461ec:	4413      	add	r3, r2
 80461ee:	3355      	adds	r3, #85	; 0x55
 80461f0:	781b      	ldrb	r3, [r3, #0]
 80461f2:	f083 0301 	eor.w	r3, r3, #1
 80461f6:	b2d8      	uxtb	r0, r3
 80461f8:	687a      	ldr	r2, [r7, #4]
 80461fa:	697b      	ldr	r3, [r7, #20]
 80461fc:	212c      	movs	r1, #44	; 0x2c
 80461fe:	fb01 f303 	mul.w	r3, r1, r3
 8046202:	4413      	add	r3, r2
 8046204:	3355      	adds	r3, #85	; 0x55
 8046206:	4602      	mov	r2, r0
 8046208:	701a      	strb	r2, [r3, #0]
 804620a:	e09f      	b.n	804634c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 804620c:	687a      	ldr	r2, [r7, #4]
 804620e:	697b      	ldr	r3, [r7, #20]
 8046210:	212c      	movs	r1, #44	; 0x2c
 8046212:	fb01 f303 	mul.w	r3, r1, r3
 8046216:	4413      	add	r3, r2
 8046218:	3361      	adds	r3, #97	; 0x61
 804621a:	781b      	ldrb	r3, [r3, #0]
 804621c:	2b03      	cmp	r3, #3
 804621e:	d109      	bne.n	8046234 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8046220:	687a      	ldr	r2, [r7, #4]
 8046222:	697b      	ldr	r3, [r7, #20]
 8046224:	212c      	movs	r1, #44	; 0x2c
 8046226:	fb01 f303 	mul.w	r3, r1, r3
 804622a:	4413      	add	r3, r2
 804622c:	3360      	adds	r3, #96	; 0x60
 804622e:	2202      	movs	r2, #2
 8046230:	701a      	strb	r2, [r3, #0]
 8046232:	e08b      	b.n	804634c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8046234:	687a      	ldr	r2, [r7, #4]
 8046236:	697b      	ldr	r3, [r7, #20]
 8046238:	212c      	movs	r1, #44	; 0x2c
 804623a:	fb01 f303 	mul.w	r3, r1, r3
 804623e:	4413      	add	r3, r2
 8046240:	3361      	adds	r3, #97	; 0x61
 8046242:	781b      	ldrb	r3, [r3, #0]
 8046244:	2b04      	cmp	r3, #4
 8046246:	d109      	bne.n	804625c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8046248:	687a      	ldr	r2, [r7, #4]
 804624a:	697b      	ldr	r3, [r7, #20]
 804624c:	212c      	movs	r1, #44	; 0x2c
 804624e:	fb01 f303 	mul.w	r3, r1, r3
 8046252:	4413      	add	r3, r2
 8046254:	3360      	adds	r3, #96	; 0x60
 8046256:	2202      	movs	r2, #2
 8046258:	701a      	strb	r2, [r3, #0]
 804625a:	e077      	b.n	804634c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 804625c:	687a      	ldr	r2, [r7, #4]
 804625e:	697b      	ldr	r3, [r7, #20]
 8046260:	212c      	movs	r1, #44	; 0x2c
 8046262:	fb01 f303 	mul.w	r3, r1, r3
 8046266:	4413      	add	r3, r2
 8046268:	3361      	adds	r3, #97	; 0x61
 804626a:	781b      	ldrb	r3, [r3, #0]
 804626c:	2b05      	cmp	r3, #5
 804626e:	d109      	bne.n	8046284 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8046270:	687a      	ldr	r2, [r7, #4]
 8046272:	697b      	ldr	r3, [r7, #20]
 8046274:	212c      	movs	r1, #44	; 0x2c
 8046276:	fb01 f303 	mul.w	r3, r1, r3
 804627a:	4413      	add	r3, r2
 804627c:	3360      	adds	r3, #96	; 0x60
 804627e:	2205      	movs	r2, #5
 8046280:	701a      	strb	r2, [r3, #0]
 8046282:	e063      	b.n	804634c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8046284:	687a      	ldr	r2, [r7, #4]
 8046286:	697b      	ldr	r3, [r7, #20]
 8046288:	212c      	movs	r1, #44	; 0x2c
 804628a:	fb01 f303 	mul.w	r3, r1, r3
 804628e:	4413      	add	r3, r2
 8046290:	3361      	adds	r3, #97	; 0x61
 8046292:	781b      	ldrb	r3, [r3, #0]
 8046294:	2b06      	cmp	r3, #6
 8046296:	d009      	beq.n	80462ac <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8046298:	687a      	ldr	r2, [r7, #4]
 804629a:	697b      	ldr	r3, [r7, #20]
 804629c:	212c      	movs	r1, #44	; 0x2c
 804629e:	fb01 f303 	mul.w	r3, r1, r3
 80462a2:	4413      	add	r3, r2
 80462a4:	3361      	adds	r3, #97	; 0x61
 80462a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80462a8:	2b08      	cmp	r3, #8
 80462aa:	d14f      	bne.n	804634c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80462ac:	687a      	ldr	r2, [r7, #4]
 80462ae:	697b      	ldr	r3, [r7, #20]
 80462b0:	212c      	movs	r1, #44	; 0x2c
 80462b2:	fb01 f303 	mul.w	r3, r1, r3
 80462b6:	4413      	add	r3, r2
 80462b8:	335c      	adds	r3, #92	; 0x5c
 80462ba:	681b      	ldr	r3, [r3, #0]
 80462bc:	1c5a      	adds	r2, r3, #1
 80462be:	6879      	ldr	r1, [r7, #4]
 80462c0:	697b      	ldr	r3, [r7, #20]
 80462c2:	202c      	movs	r0, #44	; 0x2c
 80462c4:	fb00 f303 	mul.w	r3, r0, r3
 80462c8:	440b      	add	r3, r1
 80462ca:	335c      	adds	r3, #92	; 0x5c
 80462cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80462ce:	687a      	ldr	r2, [r7, #4]
 80462d0:	697b      	ldr	r3, [r7, #20]
 80462d2:	212c      	movs	r1, #44	; 0x2c
 80462d4:	fb01 f303 	mul.w	r3, r1, r3
 80462d8:	4413      	add	r3, r2
 80462da:	335c      	adds	r3, #92	; 0x5c
 80462dc:	681b      	ldr	r3, [r3, #0]
 80462de:	2b02      	cmp	r3, #2
 80462e0:	d912      	bls.n	8046308 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80462e2:	687a      	ldr	r2, [r7, #4]
 80462e4:	697b      	ldr	r3, [r7, #20]
 80462e6:	212c      	movs	r1, #44	; 0x2c
 80462e8:	fb01 f303 	mul.w	r3, r1, r3
 80462ec:	4413      	add	r3, r2
 80462ee:	335c      	adds	r3, #92	; 0x5c
 80462f0:	2200      	movs	r2, #0
 80462f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80462f4:	687a      	ldr	r2, [r7, #4]
 80462f6:	697b      	ldr	r3, [r7, #20]
 80462f8:	212c      	movs	r1, #44	; 0x2c
 80462fa:	fb01 f303 	mul.w	r3, r1, r3
 80462fe:	4413      	add	r3, r2
 8046300:	3360      	adds	r3, #96	; 0x60
 8046302:	2204      	movs	r2, #4
 8046304:	701a      	strb	r2, [r3, #0]
 8046306:	e021      	b.n	804634c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8046308:	687a      	ldr	r2, [r7, #4]
 804630a:	697b      	ldr	r3, [r7, #20]
 804630c:	212c      	movs	r1, #44	; 0x2c
 804630e:	fb01 f303 	mul.w	r3, r1, r3
 8046312:	4413      	add	r3, r2
 8046314:	3360      	adds	r3, #96	; 0x60
 8046316:	2202      	movs	r2, #2
 8046318:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 804631a:	697b      	ldr	r3, [r7, #20]
 804631c:	015a      	lsls	r2, r3, #5
 804631e:	69bb      	ldr	r3, [r7, #24]
 8046320:	4413      	add	r3, r2
 8046322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046326:	681b      	ldr	r3, [r3, #0]
 8046328:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804632a:	693b      	ldr	r3, [r7, #16]
 804632c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8046330:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8046332:	693b      	ldr	r3, [r7, #16]
 8046334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8046338:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 804633a:	697b      	ldr	r3, [r7, #20]
 804633c:	015a      	lsls	r2, r3, #5
 804633e:	69bb      	ldr	r3, [r7, #24]
 8046340:	4413      	add	r3, r2
 8046342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046346:	461a      	mov	r2, r3
 8046348:	693b      	ldr	r3, [r7, #16]
 804634a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 804634c:	697b      	ldr	r3, [r7, #20]
 804634e:	015a      	lsls	r2, r3, #5
 8046350:	69bb      	ldr	r3, [r7, #24]
 8046352:	4413      	add	r3, r2
 8046354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046358:	461a      	mov	r2, r3
 804635a:	2302      	movs	r3, #2
 804635c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 804635e:	697b      	ldr	r3, [r7, #20]
 8046360:	b2d9      	uxtb	r1, r3
 8046362:	687a      	ldr	r2, [r7, #4]
 8046364:	697b      	ldr	r3, [r7, #20]
 8046366:	202c      	movs	r0, #44	; 0x2c
 8046368:	fb00 f303 	mul.w	r3, r0, r3
 804636c:	4413      	add	r3, r2
 804636e:	3360      	adds	r3, #96	; 0x60
 8046370:	781b      	ldrb	r3, [r3, #0]
 8046372:	461a      	mov	r2, r3
 8046374:	6878      	ldr	r0, [r7, #4]
 8046376:	f006 fecd 	bl	804d114 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 804637a:	bf00      	nop
 804637c:	3720      	adds	r7, #32
 804637e:	46bd      	mov	sp, r7
 8046380:	bd80      	pop	{r7, pc}

08046382 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8046382:	b580      	push	{r7, lr}
 8046384:	b08a      	sub	sp, #40	; 0x28
 8046386:	af00      	add	r7, sp, #0
 8046388:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 804638a:	687b      	ldr	r3, [r7, #4]
 804638c:	681b      	ldr	r3, [r3, #0]
 804638e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8046390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046392:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8046394:	687b      	ldr	r3, [r7, #4]
 8046396:	681b      	ldr	r3, [r3, #0]
 8046398:	6a1b      	ldr	r3, [r3, #32]
 804639a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 804639c:	69fb      	ldr	r3, [r7, #28]
 804639e:	f003 030f 	and.w	r3, r3, #15
 80463a2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80463a4:	69fb      	ldr	r3, [r7, #28]
 80463a6:	0c5b      	lsrs	r3, r3, #17
 80463a8:	f003 030f 	and.w	r3, r3, #15
 80463ac:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80463ae:	69fb      	ldr	r3, [r7, #28]
 80463b0:	091b      	lsrs	r3, r3, #4
 80463b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80463b6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80463b8:	697b      	ldr	r3, [r7, #20]
 80463ba:	2b02      	cmp	r3, #2
 80463bc:	d004      	beq.n	80463c8 <HCD_RXQLVL_IRQHandler+0x46>
 80463be:	697b      	ldr	r3, [r7, #20]
 80463c0:	2b05      	cmp	r3, #5
 80463c2:	f000 80a9 	beq.w	8046518 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80463c6:	e0aa      	b.n	804651e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80463c8:	693b      	ldr	r3, [r7, #16]
 80463ca:	2b00      	cmp	r3, #0
 80463cc:	f000 80a6 	beq.w	804651c <HCD_RXQLVL_IRQHandler+0x19a>
 80463d0:	687a      	ldr	r2, [r7, #4]
 80463d2:	69bb      	ldr	r3, [r7, #24]
 80463d4:	212c      	movs	r1, #44	; 0x2c
 80463d6:	fb01 f303 	mul.w	r3, r1, r3
 80463da:	4413      	add	r3, r2
 80463dc:	3344      	adds	r3, #68	; 0x44
 80463de:	681b      	ldr	r3, [r3, #0]
 80463e0:	2b00      	cmp	r3, #0
 80463e2:	f000 809b 	beq.w	804651c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80463e6:	687a      	ldr	r2, [r7, #4]
 80463e8:	69bb      	ldr	r3, [r7, #24]
 80463ea:	212c      	movs	r1, #44	; 0x2c
 80463ec:	fb01 f303 	mul.w	r3, r1, r3
 80463f0:	4413      	add	r3, r2
 80463f2:	3350      	adds	r3, #80	; 0x50
 80463f4:	681a      	ldr	r2, [r3, #0]
 80463f6:	693b      	ldr	r3, [r7, #16]
 80463f8:	441a      	add	r2, r3
 80463fa:	6879      	ldr	r1, [r7, #4]
 80463fc:	69bb      	ldr	r3, [r7, #24]
 80463fe:	202c      	movs	r0, #44	; 0x2c
 8046400:	fb00 f303 	mul.w	r3, r0, r3
 8046404:	440b      	add	r3, r1
 8046406:	334c      	adds	r3, #76	; 0x4c
 8046408:	681b      	ldr	r3, [r3, #0]
 804640a:	429a      	cmp	r2, r3
 804640c:	d87a      	bhi.n	8046504 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 804640e:	687b      	ldr	r3, [r7, #4]
 8046410:	6818      	ldr	r0, [r3, #0]
 8046412:	687a      	ldr	r2, [r7, #4]
 8046414:	69bb      	ldr	r3, [r7, #24]
 8046416:	212c      	movs	r1, #44	; 0x2c
 8046418:	fb01 f303 	mul.w	r3, r1, r3
 804641c:	4413      	add	r3, r2
 804641e:	3344      	adds	r3, #68	; 0x44
 8046420:	681b      	ldr	r3, [r3, #0]
 8046422:	693a      	ldr	r2, [r7, #16]
 8046424:	b292      	uxth	r2, r2
 8046426:	4619      	mov	r1, r3
 8046428:	f003 ff2c 	bl	804a284 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 804642c:	687a      	ldr	r2, [r7, #4]
 804642e:	69bb      	ldr	r3, [r7, #24]
 8046430:	212c      	movs	r1, #44	; 0x2c
 8046432:	fb01 f303 	mul.w	r3, r1, r3
 8046436:	4413      	add	r3, r2
 8046438:	3344      	adds	r3, #68	; 0x44
 804643a:	681a      	ldr	r2, [r3, #0]
 804643c:	693b      	ldr	r3, [r7, #16]
 804643e:	441a      	add	r2, r3
 8046440:	6879      	ldr	r1, [r7, #4]
 8046442:	69bb      	ldr	r3, [r7, #24]
 8046444:	202c      	movs	r0, #44	; 0x2c
 8046446:	fb00 f303 	mul.w	r3, r0, r3
 804644a:	440b      	add	r3, r1
 804644c:	3344      	adds	r3, #68	; 0x44
 804644e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8046450:	687a      	ldr	r2, [r7, #4]
 8046452:	69bb      	ldr	r3, [r7, #24]
 8046454:	212c      	movs	r1, #44	; 0x2c
 8046456:	fb01 f303 	mul.w	r3, r1, r3
 804645a:	4413      	add	r3, r2
 804645c:	3350      	adds	r3, #80	; 0x50
 804645e:	681a      	ldr	r2, [r3, #0]
 8046460:	693b      	ldr	r3, [r7, #16]
 8046462:	441a      	add	r2, r3
 8046464:	6879      	ldr	r1, [r7, #4]
 8046466:	69bb      	ldr	r3, [r7, #24]
 8046468:	202c      	movs	r0, #44	; 0x2c
 804646a:	fb00 f303 	mul.w	r3, r0, r3
 804646e:	440b      	add	r3, r1
 8046470:	3350      	adds	r3, #80	; 0x50
 8046472:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8046474:	69bb      	ldr	r3, [r7, #24]
 8046476:	015a      	lsls	r2, r3, #5
 8046478:	6a3b      	ldr	r3, [r7, #32]
 804647a:	4413      	add	r3, r2
 804647c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046480:	691b      	ldr	r3, [r3, #16]
 8046482:	0cdb      	lsrs	r3, r3, #19
 8046484:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8046488:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 804648a:	687a      	ldr	r2, [r7, #4]
 804648c:	69bb      	ldr	r3, [r7, #24]
 804648e:	212c      	movs	r1, #44	; 0x2c
 8046490:	fb01 f303 	mul.w	r3, r1, r3
 8046494:	4413      	add	r3, r2
 8046496:	3340      	adds	r3, #64	; 0x40
 8046498:	881b      	ldrh	r3, [r3, #0]
 804649a:	461a      	mov	r2, r3
 804649c:	693b      	ldr	r3, [r7, #16]
 804649e:	4293      	cmp	r3, r2
 80464a0:	d13c      	bne.n	804651c <HCD_RXQLVL_IRQHandler+0x19a>
 80464a2:	68fb      	ldr	r3, [r7, #12]
 80464a4:	2b00      	cmp	r3, #0
 80464a6:	d039      	beq.n	804651c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80464a8:	69bb      	ldr	r3, [r7, #24]
 80464aa:	015a      	lsls	r2, r3, #5
 80464ac:	6a3b      	ldr	r3, [r7, #32]
 80464ae:	4413      	add	r3, r2
 80464b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80464b4:	681b      	ldr	r3, [r3, #0]
 80464b6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80464b8:	68bb      	ldr	r3, [r7, #8]
 80464ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80464be:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80464c0:	68bb      	ldr	r3, [r7, #8]
 80464c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80464c6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80464c8:	69bb      	ldr	r3, [r7, #24]
 80464ca:	015a      	lsls	r2, r3, #5
 80464cc:	6a3b      	ldr	r3, [r7, #32]
 80464ce:	4413      	add	r3, r2
 80464d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80464d4:	461a      	mov	r2, r3
 80464d6:	68bb      	ldr	r3, [r7, #8]
 80464d8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80464da:	687a      	ldr	r2, [r7, #4]
 80464dc:	69bb      	ldr	r3, [r7, #24]
 80464de:	212c      	movs	r1, #44	; 0x2c
 80464e0:	fb01 f303 	mul.w	r3, r1, r3
 80464e4:	4413      	add	r3, r2
 80464e6:	3354      	adds	r3, #84	; 0x54
 80464e8:	781b      	ldrb	r3, [r3, #0]
 80464ea:	f083 0301 	eor.w	r3, r3, #1
 80464ee:	b2d8      	uxtb	r0, r3
 80464f0:	687a      	ldr	r2, [r7, #4]
 80464f2:	69bb      	ldr	r3, [r7, #24]
 80464f4:	212c      	movs	r1, #44	; 0x2c
 80464f6:	fb01 f303 	mul.w	r3, r1, r3
 80464fa:	4413      	add	r3, r2
 80464fc:	3354      	adds	r3, #84	; 0x54
 80464fe:	4602      	mov	r2, r0
 8046500:	701a      	strb	r2, [r3, #0]
      break;
 8046502:	e00b      	b.n	804651c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8046504:	687a      	ldr	r2, [r7, #4]
 8046506:	69bb      	ldr	r3, [r7, #24]
 8046508:	212c      	movs	r1, #44	; 0x2c
 804650a:	fb01 f303 	mul.w	r3, r1, r3
 804650e:	4413      	add	r3, r2
 8046510:	3360      	adds	r3, #96	; 0x60
 8046512:	2204      	movs	r2, #4
 8046514:	701a      	strb	r2, [r3, #0]
      break;
 8046516:	e001      	b.n	804651c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8046518:	bf00      	nop
 804651a:	e000      	b.n	804651e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 804651c:	bf00      	nop
  }
}
 804651e:	bf00      	nop
 8046520:	3728      	adds	r7, #40	; 0x28
 8046522:	46bd      	mov	sp, r7
 8046524:	bd80      	pop	{r7, pc}

08046526 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8046526:	b580      	push	{r7, lr}
 8046528:	b086      	sub	sp, #24
 804652a:	af00      	add	r7, sp, #0
 804652c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 804652e:	687b      	ldr	r3, [r7, #4]
 8046530:	681b      	ldr	r3, [r3, #0]
 8046532:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8046534:	697b      	ldr	r3, [r7, #20]
 8046536:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8046538:	693b      	ldr	r3, [r7, #16]
 804653a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 804653e:	681b      	ldr	r3, [r3, #0]
 8046540:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8046542:	693b      	ldr	r3, [r7, #16]
 8046544:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8046548:	681b      	ldr	r3, [r3, #0]
 804654a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 804654c:	68bb      	ldr	r3, [r7, #8]
 804654e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8046552:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8046554:	68fb      	ldr	r3, [r7, #12]
 8046556:	f003 0302 	and.w	r3, r3, #2
 804655a:	2b02      	cmp	r3, #2
 804655c:	d10b      	bne.n	8046576 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 804655e:	68fb      	ldr	r3, [r7, #12]
 8046560:	f003 0301 	and.w	r3, r3, #1
 8046564:	2b01      	cmp	r3, #1
 8046566:	d102      	bne.n	804656e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8046568:	6878      	ldr	r0, [r7, #4]
 804656a:	f006 fdb7 	bl	804d0dc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 804656e:	68bb      	ldr	r3, [r7, #8]
 8046570:	f043 0302 	orr.w	r3, r3, #2
 8046574:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8046576:	68fb      	ldr	r3, [r7, #12]
 8046578:	f003 0308 	and.w	r3, r3, #8
 804657c:	2b08      	cmp	r3, #8
 804657e:	d132      	bne.n	80465e6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8046580:	68bb      	ldr	r3, [r7, #8]
 8046582:	f043 0308 	orr.w	r3, r3, #8
 8046586:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8046588:	68fb      	ldr	r3, [r7, #12]
 804658a:	f003 0304 	and.w	r3, r3, #4
 804658e:	2b04      	cmp	r3, #4
 8046590:	d126      	bne.n	80465e0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8046592:	687b      	ldr	r3, [r7, #4]
 8046594:	699b      	ldr	r3, [r3, #24]
 8046596:	2b02      	cmp	r3, #2
 8046598:	d113      	bne.n	80465c2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 804659a:	68fb      	ldr	r3, [r7, #12]
 804659c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80465a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80465a4:	d106      	bne.n	80465b4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80465a6:	687b      	ldr	r3, [r7, #4]
 80465a8:	681b      	ldr	r3, [r3, #0]
 80465aa:	2102      	movs	r1, #2
 80465ac:	4618      	mov	r0, r3
 80465ae:	f003 ffd7 	bl	804a560 <USB_InitFSLSPClkSel>
 80465b2:	e011      	b.n	80465d8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80465b4:	687b      	ldr	r3, [r7, #4]
 80465b6:	681b      	ldr	r3, [r3, #0]
 80465b8:	2101      	movs	r1, #1
 80465ba:	4618      	mov	r0, r3
 80465bc:	f003 ffd0 	bl	804a560 <USB_InitFSLSPClkSel>
 80465c0:	e00a      	b.n	80465d8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80465c2:	687b      	ldr	r3, [r7, #4]
 80465c4:	68db      	ldr	r3, [r3, #12]
 80465c6:	2b01      	cmp	r3, #1
 80465c8:	d106      	bne.n	80465d8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80465ca:	693b      	ldr	r3, [r7, #16]
 80465cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80465d0:	461a      	mov	r2, r3
 80465d2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80465d6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80465d8:	6878      	ldr	r0, [r7, #4]
 80465da:	f006 fda9 	bl	804d130 <HAL_HCD_PortEnabled_Callback>
 80465de:	e002      	b.n	80465e6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80465e0:	6878      	ldr	r0, [r7, #4]
 80465e2:	f006 fdb3 	bl	804d14c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80465e6:	68fb      	ldr	r3, [r7, #12]
 80465e8:	f003 0320 	and.w	r3, r3, #32
 80465ec:	2b20      	cmp	r3, #32
 80465ee:	d103      	bne.n	80465f8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80465f0:	68bb      	ldr	r3, [r7, #8]
 80465f2:	f043 0320 	orr.w	r3, r3, #32
 80465f6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80465f8:	693b      	ldr	r3, [r7, #16]
 80465fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80465fe:	461a      	mov	r2, r3
 8046600:	68bb      	ldr	r3, [r7, #8]
 8046602:	6013      	str	r3, [r2, #0]
}
 8046604:	bf00      	nop
 8046606:	3718      	adds	r7, #24
 8046608:	46bd      	mov	sp, r7
 804660a:	bd80      	pop	{r7, pc}

0804660c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 804660c:	b580      	push	{r7, lr}
 804660e:	b084      	sub	sp, #16
 8046610:	af00      	add	r7, sp, #0
 8046612:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8046614:	687b      	ldr	r3, [r7, #4]
 8046616:	2b00      	cmp	r3, #0
 8046618:	d101      	bne.n	804661e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 804661a:	2301      	movs	r3, #1
 804661c:	e12b      	b.n	8046876 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 804661e:	687b      	ldr	r3, [r7, #4]
 8046620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8046624:	b2db      	uxtb	r3, r3
 8046626:	2b00      	cmp	r3, #0
 8046628:	d106      	bne.n	8046638 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 804662a:	687b      	ldr	r3, [r7, #4]
 804662c:	2200      	movs	r2, #0
 804662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8046632:	6878      	ldr	r0, [r7, #4]
 8046634:	f7fb f826 	bl	8041684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8046638:	687b      	ldr	r3, [r7, #4]
 804663a:	2224      	movs	r2, #36	; 0x24
 804663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8046640:	687b      	ldr	r3, [r7, #4]
 8046642:	681b      	ldr	r3, [r3, #0]
 8046644:	681a      	ldr	r2, [r3, #0]
 8046646:	687b      	ldr	r3, [r7, #4]
 8046648:	681b      	ldr	r3, [r3, #0]
 804664a:	f022 0201 	bic.w	r2, r2, #1
 804664e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8046650:	687b      	ldr	r3, [r7, #4]
 8046652:	681b      	ldr	r3, [r3, #0]
 8046654:	681a      	ldr	r2, [r3, #0]
 8046656:	687b      	ldr	r3, [r7, #4]
 8046658:	681b      	ldr	r3, [r3, #0]
 804665a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 804665e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8046660:	687b      	ldr	r3, [r7, #4]
 8046662:	681b      	ldr	r3, [r3, #0]
 8046664:	681a      	ldr	r2, [r3, #0]
 8046666:	687b      	ldr	r3, [r7, #4]
 8046668:	681b      	ldr	r3, [r3, #0]
 804666a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 804666e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8046670:	f001 fa0c 	bl	8047a8c <HAL_RCC_GetPCLK1Freq>
 8046674:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8046676:	687b      	ldr	r3, [r7, #4]
 8046678:	685b      	ldr	r3, [r3, #4]
 804667a:	4a81      	ldr	r2, [pc, #516]	; (8046880 <HAL_I2C_Init+0x274>)
 804667c:	4293      	cmp	r3, r2
 804667e:	d807      	bhi.n	8046690 <HAL_I2C_Init+0x84>
 8046680:	68fb      	ldr	r3, [r7, #12]
 8046682:	4a80      	ldr	r2, [pc, #512]	; (8046884 <HAL_I2C_Init+0x278>)
 8046684:	4293      	cmp	r3, r2
 8046686:	bf94      	ite	ls
 8046688:	2301      	movls	r3, #1
 804668a:	2300      	movhi	r3, #0
 804668c:	b2db      	uxtb	r3, r3
 804668e:	e006      	b.n	804669e <HAL_I2C_Init+0x92>
 8046690:	68fb      	ldr	r3, [r7, #12]
 8046692:	4a7d      	ldr	r2, [pc, #500]	; (8046888 <HAL_I2C_Init+0x27c>)
 8046694:	4293      	cmp	r3, r2
 8046696:	bf94      	ite	ls
 8046698:	2301      	movls	r3, #1
 804669a:	2300      	movhi	r3, #0
 804669c:	b2db      	uxtb	r3, r3
 804669e:	2b00      	cmp	r3, #0
 80466a0:	d001      	beq.n	80466a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80466a2:	2301      	movs	r3, #1
 80466a4:	e0e7      	b.n	8046876 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80466a6:	68fb      	ldr	r3, [r7, #12]
 80466a8:	4a78      	ldr	r2, [pc, #480]	; (804688c <HAL_I2C_Init+0x280>)
 80466aa:	fba2 2303 	umull	r2, r3, r2, r3
 80466ae:	0c9b      	lsrs	r3, r3, #18
 80466b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80466b2:	687b      	ldr	r3, [r7, #4]
 80466b4:	681b      	ldr	r3, [r3, #0]
 80466b6:	685b      	ldr	r3, [r3, #4]
 80466b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80466bc:	687b      	ldr	r3, [r7, #4]
 80466be:	681b      	ldr	r3, [r3, #0]
 80466c0:	68ba      	ldr	r2, [r7, #8]
 80466c2:	430a      	orrs	r2, r1
 80466c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80466c6:	687b      	ldr	r3, [r7, #4]
 80466c8:	681b      	ldr	r3, [r3, #0]
 80466ca:	6a1b      	ldr	r3, [r3, #32]
 80466cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80466d0:	687b      	ldr	r3, [r7, #4]
 80466d2:	685b      	ldr	r3, [r3, #4]
 80466d4:	4a6a      	ldr	r2, [pc, #424]	; (8046880 <HAL_I2C_Init+0x274>)
 80466d6:	4293      	cmp	r3, r2
 80466d8:	d802      	bhi.n	80466e0 <HAL_I2C_Init+0xd4>
 80466da:	68bb      	ldr	r3, [r7, #8]
 80466dc:	3301      	adds	r3, #1
 80466de:	e009      	b.n	80466f4 <HAL_I2C_Init+0xe8>
 80466e0:	68bb      	ldr	r3, [r7, #8]
 80466e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80466e6:	fb02 f303 	mul.w	r3, r2, r3
 80466ea:	4a69      	ldr	r2, [pc, #420]	; (8046890 <HAL_I2C_Init+0x284>)
 80466ec:	fba2 2303 	umull	r2, r3, r2, r3
 80466f0:	099b      	lsrs	r3, r3, #6
 80466f2:	3301      	adds	r3, #1
 80466f4:	687a      	ldr	r2, [r7, #4]
 80466f6:	6812      	ldr	r2, [r2, #0]
 80466f8:	430b      	orrs	r3, r1
 80466fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80466fc:	687b      	ldr	r3, [r7, #4]
 80466fe:	681b      	ldr	r3, [r3, #0]
 8046700:	69db      	ldr	r3, [r3, #28]
 8046702:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8046706:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 804670a:	687b      	ldr	r3, [r7, #4]
 804670c:	685b      	ldr	r3, [r3, #4]
 804670e:	495c      	ldr	r1, [pc, #368]	; (8046880 <HAL_I2C_Init+0x274>)
 8046710:	428b      	cmp	r3, r1
 8046712:	d819      	bhi.n	8046748 <HAL_I2C_Init+0x13c>
 8046714:	68fb      	ldr	r3, [r7, #12]
 8046716:	1e59      	subs	r1, r3, #1
 8046718:	687b      	ldr	r3, [r7, #4]
 804671a:	685b      	ldr	r3, [r3, #4]
 804671c:	005b      	lsls	r3, r3, #1
 804671e:	fbb1 f3f3 	udiv	r3, r1, r3
 8046722:	1c59      	adds	r1, r3, #1
 8046724:	f640 73fc 	movw	r3, #4092	; 0xffc
 8046728:	400b      	ands	r3, r1
 804672a:	2b00      	cmp	r3, #0
 804672c:	d00a      	beq.n	8046744 <HAL_I2C_Init+0x138>
 804672e:	68fb      	ldr	r3, [r7, #12]
 8046730:	1e59      	subs	r1, r3, #1
 8046732:	687b      	ldr	r3, [r7, #4]
 8046734:	685b      	ldr	r3, [r3, #4]
 8046736:	005b      	lsls	r3, r3, #1
 8046738:	fbb1 f3f3 	udiv	r3, r1, r3
 804673c:	3301      	adds	r3, #1
 804673e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8046742:	e051      	b.n	80467e8 <HAL_I2C_Init+0x1dc>
 8046744:	2304      	movs	r3, #4
 8046746:	e04f      	b.n	80467e8 <HAL_I2C_Init+0x1dc>
 8046748:	687b      	ldr	r3, [r7, #4]
 804674a:	689b      	ldr	r3, [r3, #8]
 804674c:	2b00      	cmp	r3, #0
 804674e:	d111      	bne.n	8046774 <HAL_I2C_Init+0x168>
 8046750:	68fb      	ldr	r3, [r7, #12]
 8046752:	1e58      	subs	r0, r3, #1
 8046754:	687b      	ldr	r3, [r7, #4]
 8046756:	6859      	ldr	r1, [r3, #4]
 8046758:	460b      	mov	r3, r1
 804675a:	005b      	lsls	r3, r3, #1
 804675c:	440b      	add	r3, r1
 804675e:	fbb0 f3f3 	udiv	r3, r0, r3
 8046762:	3301      	adds	r3, #1
 8046764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8046768:	2b00      	cmp	r3, #0
 804676a:	bf0c      	ite	eq
 804676c:	2301      	moveq	r3, #1
 804676e:	2300      	movne	r3, #0
 8046770:	b2db      	uxtb	r3, r3
 8046772:	e012      	b.n	804679a <HAL_I2C_Init+0x18e>
 8046774:	68fb      	ldr	r3, [r7, #12]
 8046776:	1e58      	subs	r0, r3, #1
 8046778:	687b      	ldr	r3, [r7, #4]
 804677a:	6859      	ldr	r1, [r3, #4]
 804677c:	460b      	mov	r3, r1
 804677e:	009b      	lsls	r3, r3, #2
 8046780:	440b      	add	r3, r1
 8046782:	0099      	lsls	r1, r3, #2
 8046784:	440b      	add	r3, r1
 8046786:	fbb0 f3f3 	udiv	r3, r0, r3
 804678a:	3301      	adds	r3, #1
 804678c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8046790:	2b00      	cmp	r3, #0
 8046792:	bf0c      	ite	eq
 8046794:	2301      	moveq	r3, #1
 8046796:	2300      	movne	r3, #0
 8046798:	b2db      	uxtb	r3, r3
 804679a:	2b00      	cmp	r3, #0
 804679c:	d001      	beq.n	80467a2 <HAL_I2C_Init+0x196>
 804679e:	2301      	movs	r3, #1
 80467a0:	e022      	b.n	80467e8 <HAL_I2C_Init+0x1dc>
 80467a2:	687b      	ldr	r3, [r7, #4]
 80467a4:	689b      	ldr	r3, [r3, #8]
 80467a6:	2b00      	cmp	r3, #0
 80467a8:	d10e      	bne.n	80467c8 <HAL_I2C_Init+0x1bc>
 80467aa:	68fb      	ldr	r3, [r7, #12]
 80467ac:	1e58      	subs	r0, r3, #1
 80467ae:	687b      	ldr	r3, [r7, #4]
 80467b0:	6859      	ldr	r1, [r3, #4]
 80467b2:	460b      	mov	r3, r1
 80467b4:	005b      	lsls	r3, r3, #1
 80467b6:	440b      	add	r3, r1
 80467b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80467bc:	3301      	adds	r3, #1
 80467be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80467c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80467c6:	e00f      	b.n	80467e8 <HAL_I2C_Init+0x1dc>
 80467c8:	68fb      	ldr	r3, [r7, #12]
 80467ca:	1e58      	subs	r0, r3, #1
 80467cc:	687b      	ldr	r3, [r7, #4]
 80467ce:	6859      	ldr	r1, [r3, #4]
 80467d0:	460b      	mov	r3, r1
 80467d2:	009b      	lsls	r3, r3, #2
 80467d4:	440b      	add	r3, r1
 80467d6:	0099      	lsls	r1, r3, #2
 80467d8:	440b      	add	r3, r1
 80467da:	fbb0 f3f3 	udiv	r3, r0, r3
 80467de:	3301      	adds	r3, #1
 80467e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80467e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80467e8:	6879      	ldr	r1, [r7, #4]
 80467ea:	6809      	ldr	r1, [r1, #0]
 80467ec:	4313      	orrs	r3, r2
 80467ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80467f0:	687b      	ldr	r3, [r7, #4]
 80467f2:	681b      	ldr	r3, [r3, #0]
 80467f4:	681b      	ldr	r3, [r3, #0]
 80467f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80467fa:	687b      	ldr	r3, [r7, #4]
 80467fc:	69da      	ldr	r2, [r3, #28]
 80467fe:	687b      	ldr	r3, [r7, #4]
 8046800:	6a1b      	ldr	r3, [r3, #32]
 8046802:	431a      	orrs	r2, r3
 8046804:	687b      	ldr	r3, [r7, #4]
 8046806:	681b      	ldr	r3, [r3, #0]
 8046808:	430a      	orrs	r2, r1
 804680a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 804680c:	687b      	ldr	r3, [r7, #4]
 804680e:	681b      	ldr	r3, [r3, #0]
 8046810:	689b      	ldr	r3, [r3, #8]
 8046812:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8046816:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 804681a:	687a      	ldr	r2, [r7, #4]
 804681c:	6911      	ldr	r1, [r2, #16]
 804681e:	687a      	ldr	r2, [r7, #4]
 8046820:	68d2      	ldr	r2, [r2, #12]
 8046822:	4311      	orrs	r1, r2
 8046824:	687a      	ldr	r2, [r7, #4]
 8046826:	6812      	ldr	r2, [r2, #0]
 8046828:	430b      	orrs	r3, r1
 804682a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 804682c:	687b      	ldr	r3, [r7, #4]
 804682e:	681b      	ldr	r3, [r3, #0]
 8046830:	68db      	ldr	r3, [r3, #12]
 8046832:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8046836:	687b      	ldr	r3, [r7, #4]
 8046838:	695a      	ldr	r2, [r3, #20]
 804683a:	687b      	ldr	r3, [r7, #4]
 804683c:	699b      	ldr	r3, [r3, #24]
 804683e:	431a      	orrs	r2, r3
 8046840:	687b      	ldr	r3, [r7, #4]
 8046842:	681b      	ldr	r3, [r3, #0]
 8046844:	430a      	orrs	r2, r1
 8046846:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8046848:	687b      	ldr	r3, [r7, #4]
 804684a:	681b      	ldr	r3, [r3, #0]
 804684c:	681a      	ldr	r2, [r3, #0]
 804684e:	687b      	ldr	r3, [r7, #4]
 8046850:	681b      	ldr	r3, [r3, #0]
 8046852:	f042 0201 	orr.w	r2, r2, #1
 8046856:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8046858:	687b      	ldr	r3, [r7, #4]
 804685a:	2200      	movs	r2, #0
 804685c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 804685e:	687b      	ldr	r3, [r7, #4]
 8046860:	2220      	movs	r2, #32
 8046862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8046866:	687b      	ldr	r3, [r7, #4]
 8046868:	2200      	movs	r2, #0
 804686a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 804686c:	687b      	ldr	r3, [r7, #4]
 804686e:	2200      	movs	r2, #0
 8046870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8046874:	2300      	movs	r3, #0
}
 8046876:	4618      	mov	r0, r3
 8046878:	3710      	adds	r7, #16
 804687a:	46bd      	mov	sp, r7
 804687c:	bd80      	pop	{r7, pc}
 804687e:	bf00      	nop
 8046880:	000186a0 	.word	0x000186a0
 8046884:	001e847f 	.word	0x001e847f
 8046888:	003d08ff 	.word	0x003d08ff
 804688c:	431bde83 	.word	0x431bde83
 8046890:	10624dd3 	.word	0x10624dd3

08046894 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8046894:	b480      	push	{r7}
 8046896:	b083      	sub	sp, #12
 8046898:	af00      	add	r7, sp, #0
 804689a:	6078      	str	r0, [r7, #4]
 804689c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 804689e:	687b      	ldr	r3, [r7, #4]
 80468a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80468a4:	b2db      	uxtb	r3, r3
 80468a6:	2b20      	cmp	r3, #32
 80468a8:	d129      	bne.n	80468fe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80468aa:	687b      	ldr	r3, [r7, #4]
 80468ac:	2224      	movs	r2, #36	; 0x24
 80468ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80468b2:	687b      	ldr	r3, [r7, #4]
 80468b4:	681b      	ldr	r3, [r3, #0]
 80468b6:	681a      	ldr	r2, [r3, #0]
 80468b8:	687b      	ldr	r3, [r7, #4]
 80468ba:	681b      	ldr	r3, [r3, #0]
 80468bc:	f022 0201 	bic.w	r2, r2, #1
 80468c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80468c2:	687b      	ldr	r3, [r7, #4]
 80468c4:	681b      	ldr	r3, [r3, #0]
 80468c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80468c8:	687b      	ldr	r3, [r7, #4]
 80468ca:	681b      	ldr	r3, [r3, #0]
 80468cc:	f022 0210 	bic.w	r2, r2, #16
 80468d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80468d2:	687b      	ldr	r3, [r7, #4]
 80468d4:	681b      	ldr	r3, [r3, #0]
 80468d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80468d8:	687b      	ldr	r3, [r7, #4]
 80468da:	681b      	ldr	r3, [r3, #0]
 80468dc:	683a      	ldr	r2, [r7, #0]
 80468de:	430a      	orrs	r2, r1
 80468e0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80468e2:	687b      	ldr	r3, [r7, #4]
 80468e4:	681b      	ldr	r3, [r3, #0]
 80468e6:	681a      	ldr	r2, [r3, #0]
 80468e8:	687b      	ldr	r3, [r7, #4]
 80468ea:	681b      	ldr	r3, [r3, #0]
 80468ec:	f042 0201 	orr.w	r2, r2, #1
 80468f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80468f2:	687b      	ldr	r3, [r7, #4]
 80468f4:	2220      	movs	r2, #32
 80468f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80468fa:	2300      	movs	r3, #0
 80468fc:	e000      	b.n	8046900 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80468fe:	2302      	movs	r3, #2
  }
}
 8046900:	4618      	mov	r0, r3
 8046902:	370c      	adds	r7, #12
 8046904:	46bd      	mov	sp, r7
 8046906:	f85d 7b04 	ldr.w	r7, [sp], #4
 804690a:	4770      	bx	lr

0804690c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 804690c:	b480      	push	{r7}
 804690e:	b085      	sub	sp, #20
 8046910:	af00      	add	r7, sp, #0
 8046912:	6078      	str	r0, [r7, #4]
 8046914:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8046916:	2300      	movs	r3, #0
 8046918:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 804691a:	687b      	ldr	r3, [r7, #4]
 804691c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8046920:	b2db      	uxtb	r3, r3
 8046922:	2b20      	cmp	r3, #32
 8046924:	d12a      	bne.n	804697c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8046926:	687b      	ldr	r3, [r7, #4]
 8046928:	2224      	movs	r2, #36	; 0x24
 804692a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 804692e:	687b      	ldr	r3, [r7, #4]
 8046930:	681b      	ldr	r3, [r3, #0]
 8046932:	681a      	ldr	r2, [r3, #0]
 8046934:	687b      	ldr	r3, [r7, #4]
 8046936:	681b      	ldr	r3, [r3, #0]
 8046938:	f022 0201 	bic.w	r2, r2, #1
 804693c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 804693e:	687b      	ldr	r3, [r7, #4]
 8046940:	681b      	ldr	r3, [r3, #0]
 8046942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046944:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8046946:	89fb      	ldrh	r3, [r7, #14]
 8046948:	f023 030f 	bic.w	r3, r3, #15
 804694c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 804694e:	683b      	ldr	r3, [r7, #0]
 8046950:	b29a      	uxth	r2, r3
 8046952:	89fb      	ldrh	r3, [r7, #14]
 8046954:	4313      	orrs	r3, r2
 8046956:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8046958:	687b      	ldr	r3, [r7, #4]
 804695a:	681b      	ldr	r3, [r3, #0]
 804695c:	89fa      	ldrh	r2, [r7, #14]
 804695e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8046960:	687b      	ldr	r3, [r7, #4]
 8046962:	681b      	ldr	r3, [r3, #0]
 8046964:	681a      	ldr	r2, [r3, #0]
 8046966:	687b      	ldr	r3, [r7, #4]
 8046968:	681b      	ldr	r3, [r3, #0]
 804696a:	f042 0201 	orr.w	r2, r2, #1
 804696e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8046970:	687b      	ldr	r3, [r7, #4]
 8046972:	2220      	movs	r2, #32
 8046974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8046978:	2300      	movs	r3, #0
 804697a:	e000      	b.n	804697e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 804697c:	2302      	movs	r3, #2
  }
}
 804697e:	4618      	mov	r0, r3
 8046980:	3714      	adds	r7, #20
 8046982:	46bd      	mov	sp, r7
 8046984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046988:	4770      	bx	lr
	...

0804698c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 804698c:	b580      	push	{r7, lr}
 804698e:	b084      	sub	sp, #16
 8046990:	af00      	add	r7, sp, #0
 8046992:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8046994:	687b      	ldr	r3, [r7, #4]
 8046996:	2b00      	cmp	r3, #0
 8046998:	d101      	bne.n	804699e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 804699a:	2301      	movs	r3, #1
 804699c:	e0bf      	b.n	8046b1e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 804699e:	687b      	ldr	r3, [r7, #4]
 80469a0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80469a4:	b2db      	uxtb	r3, r3
 80469a6:	2b00      	cmp	r3, #0
 80469a8:	d106      	bne.n	80469b8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80469aa:	687b      	ldr	r3, [r7, #4]
 80469ac:	2200      	movs	r2, #0
 80469ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80469b2:	6878      	ldr	r0, [r7, #4]
 80469b4:	f7fa fed0 	bl	8041758 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80469b8:	687b      	ldr	r3, [r7, #4]
 80469ba:	2202      	movs	r2, #2
 80469bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80469c0:	687b      	ldr	r3, [r7, #4]
 80469c2:	681b      	ldr	r3, [r3, #0]
 80469c4:	699a      	ldr	r2, [r3, #24]
 80469c6:	687b      	ldr	r3, [r7, #4]
 80469c8:	681b      	ldr	r3, [r3, #0]
 80469ca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80469ce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80469d0:	687b      	ldr	r3, [r7, #4]
 80469d2:	681b      	ldr	r3, [r3, #0]
 80469d4:	6999      	ldr	r1, [r3, #24]
 80469d6:	687b      	ldr	r3, [r7, #4]
 80469d8:	685a      	ldr	r2, [r3, #4]
 80469da:	687b      	ldr	r3, [r7, #4]
 80469dc:	689b      	ldr	r3, [r3, #8]
 80469de:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80469e0:	687b      	ldr	r3, [r7, #4]
 80469e2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80469e4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80469e6:	687b      	ldr	r3, [r7, #4]
 80469e8:	691b      	ldr	r3, [r3, #16]
 80469ea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80469ec:	687b      	ldr	r3, [r7, #4]
 80469ee:	681b      	ldr	r3, [r3, #0]
 80469f0:	430a      	orrs	r2, r1
 80469f2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80469f4:	687b      	ldr	r3, [r7, #4]
 80469f6:	681b      	ldr	r3, [r3, #0]
 80469f8:	6899      	ldr	r1, [r3, #8]
 80469fa:	687b      	ldr	r3, [r7, #4]
 80469fc:	681a      	ldr	r2, [r3, #0]
 80469fe:	4b4a      	ldr	r3, [pc, #296]	; (8046b28 <HAL_LTDC_Init+0x19c>)
 8046a00:	400b      	ands	r3, r1
 8046a02:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8046a04:	687b      	ldr	r3, [r7, #4]
 8046a06:	695b      	ldr	r3, [r3, #20]
 8046a08:	041b      	lsls	r3, r3, #16
 8046a0a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8046a0c:	687b      	ldr	r3, [r7, #4]
 8046a0e:	681b      	ldr	r3, [r3, #0]
 8046a10:	6899      	ldr	r1, [r3, #8]
 8046a12:	687b      	ldr	r3, [r7, #4]
 8046a14:	699a      	ldr	r2, [r3, #24]
 8046a16:	68fb      	ldr	r3, [r7, #12]
 8046a18:	431a      	orrs	r2, r3
 8046a1a:	687b      	ldr	r3, [r7, #4]
 8046a1c:	681b      	ldr	r3, [r3, #0]
 8046a1e:	430a      	orrs	r2, r1
 8046a20:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8046a22:	687b      	ldr	r3, [r7, #4]
 8046a24:	681b      	ldr	r3, [r3, #0]
 8046a26:	68d9      	ldr	r1, [r3, #12]
 8046a28:	687b      	ldr	r3, [r7, #4]
 8046a2a:	681a      	ldr	r2, [r3, #0]
 8046a2c:	4b3e      	ldr	r3, [pc, #248]	; (8046b28 <HAL_LTDC_Init+0x19c>)
 8046a2e:	400b      	ands	r3, r1
 8046a30:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8046a32:	687b      	ldr	r3, [r7, #4]
 8046a34:	69db      	ldr	r3, [r3, #28]
 8046a36:	041b      	lsls	r3, r3, #16
 8046a38:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8046a3a:	687b      	ldr	r3, [r7, #4]
 8046a3c:	681b      	ldr	r3, [r3, #0]
 8046a3e:	68d9      	ldr	r1, [r3, #12]
 8046a40:	687b      	ldr	r3, [r7, #4]
 8046a42:	6a1a      	ldr	r2, [r3, #32]
 8046a44:	68fb      	ldr	r3, [r7, #12]
 8046a46:	431a      	orrs	r2, r3
 8046a48:	687b      	ldr	r3, [r7, #4]
 8046a4a:	681b      	ldr	r3, [r3, #0]
 8046a4c:	430a      	orrs	r2, r1
 8046a4e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8046a50:	687b      	ldr	r3, [r7, #4]
 8046a52:	681b      	ldr	r3, [r3, #0]
 8046a54:	6919      	ldr	r1, [r3, #16]
 8046a56:	687b      	ldr	r3, [r7, #4]
 8046a58:	681a      	ldr	r2, [r3, #0]
 8046a5a:	4b33      	ldr	r3, [pc, #204]	; (8046b28 <HAL_LTDC_Init+0x19c>)
 8046a5c:	400b      	ands	r3, r1
 8046a5e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8046a60:	687b      	ldr	r3, [r7, #4]
 8046a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046a64:	041b      	lsls	r3, r3, #16
 8046a66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8046a68:	687b      	ldr	r3, [r7, #4]
 8046a6a:	681b      	ldr	r3, [r3, #0]
 8046a6c:	6919      	ldr	r1, [r3, #16]
 8046a6e:	687b      	ldr	r3, [r7, #4]
 8046a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8046a72:	68fb      	ldr	r3, [r7, #12]
 8046a74:	431a      	orrs	r2, r3
 8046a76:	687b      	ldr	r3, [r7, #4]
 8046a78:	681b      	ldr	r3, [r3, #0]
 8046a7a:	430a      	orrs	r2, r1
 8046a7c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8046a7e:	687b      	ldr	r3, [r7, #4]
 8046a80:	681b      	ldr	r3, [r3, #0]
 8046a82:	6959      	ldr	r1, [r3, #20]
 8046a84:	687b      	ldr	r3, [r7, #4]
 8046a86:	681a      	ldr	r2, [r3, #0]
 8046a88:	4b27      	ldr	r3, [pc, #156]	; (8046b28 <HAL_LTDC_Init+0x19c>)
 8046a8a:	400b      	ands	r3, r1
 8046a8c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8046a8e:	687b      	ldr	r3, [r7, #4]
 8046a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046a92:	041b      	lsls	r3, r3, #16
 8046a94:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8046a96:	687b      	ldr	r3, [r7, #4]
 8046a98:	681b      	ldr	r3, [r3, #0]
 8046a9a:	6959      	ldr	r1, [r3, #20]
 8046a9c:	687b      	ldr	r3, [r7, #4]
 8046a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8046aa0:	68fb      	ldr	r3, [r7, #12]
 8046aa2:	431a      	orrs	r2, r3
 8046aa4:	687b      	ldr	r3, [r7, #4]
 8046aa6:	681b      	ldr	r3, [r3, #0]
 8046aa8:	430a      	orrs	r2, r1
 8046aaa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8046aac:	687b      	ldr	r3, [r7, #4]
 8046aae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8046ab2:	021b      	lsls	r3, r3, #8
 8046ab4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8046ab6:	687b      	ldr	r3, [r7, #4]
 8046ab8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8046abc:	041b      	lsls	r3, r3, #16
 8046abe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8046ac0:	687b      	ldr	r3, [r7, #4]
 8046ac2:	681b      	ldr	r3, [r3, #0]
 8046ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8046ac6:	687b      	ldr	r3, [r7, #4]
 8046ac8:	681b      	ldr	r3, [r3, #0]
 8046aca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8046ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8046ad0:	687b      	ldr	r3, [r7, #4]
 8046ad2:	681b      	ldr	r3, [r3, #0]
 8046ad4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8046ad6:	68ba      	ldr	r2, [r7, #8]
 8046ad8:	68fb      	ldr	r3, [r7, #12]
 8046ada:	4313      	orrs	r3, r2
 8046adc:	687a      	ldr	r2, [r7, #4]
 8046ade:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8046ae2:	431a      	orrs	r2, r3
 8046ae4:	687b      	ldr	r3, [r7, #4]
 8046ae6:	681b      	ldr	r3, [r3, #0]
 8046ae8:	430a      	orrs	r2, r1
 8046aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8046aec:	687b      	ldr	r3, [r7, #4]
 8046aee:	681b      	ldr	r3, [r3, #0]
 8046af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046af2:	687b      	ldr	r3, [r7, #4]
 8046af4:	681b      	ldr	r3, [r3, #0]
 8046af6:	f042 0206 	orr.w	r2, r2, #6
 8046afa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8046afc:	687b      	ldr	r3, [r7, #4]
 8046afe:	681b      	ldr	r3, [r3, #0]
 8046b00:	699a      	ldr	r2, [r3, #24]
 8046b02:	687b      	ldr	r3, [r7, #4]
 8046b04:	681b      	ldr	r3, [r3, #0]
 8046b06:	f042 0201 	orr.w	r2, r2, #1
 8046b0a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8046b0c:	687b      	ldr	r3, [r7, #4]
 8046b0e:	2200      	movs	r2, #0
 8046b10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8046b14:	687b      	ldr	r3, [r7, #4]
 8046b16:	2201      	movs	r2, #1
 8046b18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8046b1c:	2300      	movs	r3, #0
}
 8046b1e:	4618      	mov	r0, r3
 8046b20:	3710      	adds	r7, #16
 8046b22:	46bd      	mov	sp, r7
 8046b24:	bd80      	pop	{r7, pc}
 8046b26:	bf00      	nop
 8046b28:	f000f800 	.word	0xf000f800

08046b2c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8046b2c:	b580      	push	{r7, lr}
 8046b2e:	b084      	sub	sp, #16
 8046b30:	af00      	add	r7, sp, #0
 8046b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8046b34:	687b      	ldr	r3, [r7, #4]
 8046b36:	681b      	ldr	r3, [r3, #0]
 8046b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046b3a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8046b3c:	687b      	ldr	r3, [r7, #4]
 8046b3e:	681b      	ldr	r3, [r3, #0]
 8046b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8046b42:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8046b44:	68fb      	ldr	r3, [r7, #12]
 8046b46:	f003 0304 	and.w	r3, r3, #4
 8046b4a:	2b00      	cmp	r3, #0
 8046b4c:	d023      	beq.n	8046b96 <HAL_LTDC_IRQHandler+0x6a>
 8046b4e:	68bb      	ldr	r3, [r7, #8]
 8046b50:	f003 0304 	and.w	r3, r3, #4
 8046b54:	2b00      	cmp	r3, #0
 8046b56:	d01e      	beq.n	8046b96 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8046b58:	687b      	ldr	r3, [r7, #4]
 8046b5a:	681b      	ldr	r3, [r3, #0]
 8046b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046b5e:	687b      	ldr	r3, [r7, #4]
 8046b60:	681b      	ldr	r3, [r3, #0]
 8046b62:	f022 0204 	bic.w	r2, r2, #4
 8046b66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8046b68:	687b      	ldr	r3, [r7, #4]
 8046b6a:	681b      	ldr	r3, [r3, #0]
 8046b6c:	2204      	movs	r2, #4
 8046b6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8046b70:	687b      	ldr	r3, [r7, #4]
 8046b72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8046b76:	f043 0201 	orr.w	r2, r3, #1
 8046b7a:	687b      	ldr	r3, [r7, #4]
 8046b7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8046b80:	687b      	ldr	r3, [r7, #4]
 8046b82:	2204      	movs	r2, #4
 8046b84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8046b88:	687b      	ldr	r3, [r7, #4]
 8046b8a:	2200      	movs	r2, #0
 8046b8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8046b90:	6878      	ldr	r0, [r7, #4]
 8046b92:	f000 f86f 	bl	8046c74 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8046b96:	68fb      	ldr	r3, [r7, #12]
 8046b98:	f003 0302 	and.w	r3, r3, #2
 8046b9c:	2b00      	cmp	r3, #0
 8046b9e:	d023      	beq.n	8046be8 <HAL_LTDC_IRQHandler+0xbc>
 8046ba0:	68bb      	ldr	r3, [r7, #8]
 8046ba2:	f003 0302 	and.w	r3, r3, #2
 8046ba6:	2b00      	cmp	r3, #0
 8046ba8:	d01e      	beq.n	8046be8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8046baa:	687b      	ldr	r3, [r7, #4]
 8046bac:	681b      	ldr	r3, [r3, #0]
 8046bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046bb0:	687b      	ldr	r3, [r7, #4]
 8046bb2:	681b      	ldr	r3, [r3, #0]
 8046bb4:	f022 0202 	bic.w	r2, r2, #2
 8046bb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8046bba:	687b      	ldr	r3, [r7, #4]
 8046bbc:	681b      	ldr	r3, [r3, #0]
 8046bbe:	2202      	movs	r2, #2
 8046bc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8046bc2:	687b      	ldr	r3, [r7, #4]
 8046bc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8046bc8:	f043 0202 	orr.w	r2, r3, #2
 8046bcc:	687b      	ldr	r3, [r7, #4]
 8046bce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8046bd2:	687b      	ldr	r3, [r7, #4]
 8046bd4:	2204      	movs	r2, #4
 8046bd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8046bda:	687b      	ldr	r3, [r7, #4]
 8046bdc:	2200      	movs	r2, #0
 8046bde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8046be2:	6878      	ldr	r0, [r7, #4]
 8046be4:	f000 f846 	bl	8046c74 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8046be8:	68fb      	ldr	r3, [r7, #12]
 8046bea:	f003 0301 	and.w	r3, r3, #1
 8046bee:	2b00      	cmp	r3, #0
 8046bf0:	d01b      	beq.n	8046c2a <HAL_LTDC_IRQHandler+0xfe>
 8046bf2:	68bb      	ldr	r3, [r7, #8]
 8046bf4:	f003 0301 	and.w	r3, r3, #1
 8046bf8:	2b00      	cmp	r3, #0
 8046bfa:	d016      	beq.n	8046c2a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8046bfc:	687b      	ldr	r3, [r7, #4]
 8046bfe:	681b      	ldr	r3, [r3, #0]
 8046c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046c02:	687b      	ldr	r3, [r7, #4]
 8046c04:	681b      	ldr	r3, [r3, #0]
 8046c06:	f022 0201 	bic.w	r2, r2, #1
 8046c0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8046c0c:	687b      	ldr	r3, [r7, #4]
 8046c0e:	681b      	ldr	r3, [r3, #0]
 8046c10:	2201      	movs	r2, #1
 8046c12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8046c14:	687b      	ldr	r3, [r7, #4]
 8046c16:	2201      	movs	r2, #1
 8046c18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8046c1c:	687b      	ldr	r3, [r7, #4]
 8046c1e:	2200      	movs	r2, #0
 8046c20:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8046c24:	6878      	ldr	r0, [r7, #4]
 8046c26:	f000 f82f 	bl	8046c88 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8046c2a:	68fb      	ldr	r3, [r7, #12]
 8046c2c:	f003 0308 	and.w	r3, r3, #8
 8046c30:	2b00      	cmp	r3, #0
 8046c32:	d01b      	beq.n	8046c6c <HAL_LTDC_IRQHandler+0x140>
 8046c34:	68bb      	ldr	r3, [r7, #8]
 8046c36:	f003 0308 	and.w	r3, r3, #8
 8046c3a:	2b00      	cmp	r3, #0
 8046c3c:	d016      	beq.n	8046c6c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8046c3e:	687b      	ldr	r3, [r7, #4]
 8046c40:	681b      	ldr	r3, [r3, #0]
 8046c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046c44:	687b      	ldr	r3, [r7, #4]
 8046c46:	681b      	ldr	r3, [r3, #0]
 8046c48:	f022 0208 	bic.w	r2, r2, #8
 8046c4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8046c4e:	687b      	ldr	r3, [r7, #4]
 8046c50:	681b      	ldr	r3, [r3, #0]
 8046c52:	2208      	movs	r2, #8
 8046c54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8046c56:	687b      	ldr	r3, [r7, #4]
 8046c58:	2201      	movs	r2, #1
 8046c5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8046c5e:	687b      	ldr	r3, [r7, #4]
 8046c60:	2200      	movs	r2, #0
 8046c62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8046c66:	6878      	ldr	r0, [r7, #4]
 8046c68:	f000 f818 	bl	8046c9c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8046c6c:	bf00      	nop
 8046c6e:	3710      	adds	r7, #16
 8046c70:	46bd      	mov	sp, r7
 8046c72:	bd80      	pop	{r7, pc}

08046c74 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8046c74:	b480      	push	{r7}
 8046c76:	b083      	sub	sp, #12
 8046c78:	af00      	add	r7, sp, #0
 8046c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8046c7c:	bf00      	nop
 8046c7e:	370c      	adds	r7, #12
 8046c80:	46bd      	mov	sp, r7
 8046c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046c86:	4770      	bx	lr

08046c88 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8046c88:	b480      	push	{r7}
 8046c8a:	b083      	sub	sp, #12
 8046c8c:	af00      	add	r7, sp, #0
 8046c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8046c90:	bf00      	nop
 8046c92:	370c      	adds	r7, #12
 8046c94:	46bd      	mov	sp, r7
 8046c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046c9a:	4770      	bx	lr

08046c9c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8046c9c:	b480      	push	{r7}
 8046c9e:	b083      	sub	sp, #12
 8046ca0:	af00      	add	r7, sp, #0
 8046ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8046ca4:	bf00      	nop
 8046ca6:	370c      	adds	r7, #12
 8046ca8:	46bd      	mov	sp, r7
 8046caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046cae:	4770      	bx	lr

08046cb0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8046cb0:	b5b0      	push	{r4, r5, r7, lr}
 8046cb2:	b084      	sub	sp, #16
 8046cb4:	af00      	add	r7, sp, #0
 8046cb6:	60f8      	str	r0, [r7, #12]
 8046cb8:	60b9      	str	r1, [r7, #8]
 8046cba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8046cbc:	68fb      	ldr	r3, [r7, #12]
 8046cbe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8046cc2:	2b01      	cmp	r3, #1
 8046cc4:	d101      	bne.n	8046cca <HAL_LTDC_ConfigLayer+0x1a>
 8046cc6:	2302      	movs	r3, #2
 8046cc8:	e02c      	b.n	8046d24 <HAL_LTDC_ConfigLayer+0x74>
 8046cca:	68fb      	ldr	r3, [r7, #12]
 8046ccc:	2201      	movs	r2, #1
 8046cce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8046cd2:	68fb      	ldr	r3, [r7, #12]
 8046cd4:	2202      	movs	r2, #2
 8046cd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8046cda:	68fa      	ldr	r2, [r7, #12]
 8046cdc:	687b      	ldr	r3, [r7, #4]
 8046cde:	2134      	movs	r1, #52	; 0x34
 8046ce0:	fb01 f303 	mul.w	r3, r1, r3
 8046ce4:	4413      	add	r3, r2
 8046ce6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8046cea:	68bb      	ldr	r3, [r7, #8]
 8046cec:	4614      	mov	r4, r2
 8046cee:	461d      	mov	r5, r3
 8046cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8046cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8046cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8046cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8046cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8046cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8046cfc:	682b      	ldr	r3, [r5, #0]
 8046cfe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8046d00:	687a      	ldr	r2, [r7, #4]
 8046d02:	68b9      	ldr	r1, [r7, #8]
 8046d04:	68f8      	ldr	r0, [r7, #12]
 8046d06:	f000 f8b9 	bl	8046e7c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8046d0a:	68fb      	ldr	r3, [r7, #12]
 8046d0c:	681b      	ldr	r3, [r3, #0]
 8046d0e:	2201      	movs	r2, #1
 8046d10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8046d12:	68fb      	ldr	r3, [r7, #12]
 8046d14:	2201      	movs	r2, #1
 8046d16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8046d1a:	68fb      	ldr	r3, [r7, #12]
 8046d1c:	2200      	movs	r2, #0
 8046d1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8046d22:	2300      	movs	r3, #0
}
 8046d24:	4618      	mov	r0, r3
 8046d26:	3710      	adds	r7, #16
 8046d28:	46bd      	mov	sp, r7
 8046d2a:	bdb0      	pop	{r4, r5, r7, pc}

08046d2c <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8046d2c:	b480      	push	{r7}
 8046d2e:	b085      	sub	sp, #20
 8046d30:	af00      	add	r7, sp, #0
 8046d32:	60f8      	str	r0, [r7, #12]
 8046d34:	60b9      	str	r1, [r7, #8]
 8046d36:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8046d38:	68fb      	ldr	r3, [r7, #12]
 8046d3a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8046d3e:	2b01      	cmp	r3, #1
 8046d40:	d101      	bne.n	8046d46 <HAL_LTDC_ConfigColorKeying+0x1a>
 8046d42:	2302      	movs	r3, #2
 8046d44:	e030      	b.n	8046da8 <HAL_LTDC_ConfigColorKeying+0x7c>
 8046d46:	68fb      	ldr	r3, [r7, #12]
 8046d48:	2201      	movs	r2, #1
 8046d4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8046d4e:	68fb      	ldr	r3, [r7, #12]
 8046d50:	2202      	movs	r2, #2
 8046d52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8046d56:	68fb      	ldr	r3, [r7, #12]
 8046d58:	681b      	ldr	r3, [r3, #0]
 8046d5a:	461a      	mov	r2, r3
 8046d5c:	687b      	ldr	r3, [r7, #4]
 8046d5e:	01db      	lsls	r3, r3, #7
 8046d60:	4413      	add	r3, r2
 8046d62:	3384      	adds	r3, #132	; 0x84
 8046d64:	68db      	ldr	r3, [r3, #12]
 8046d66:	68fa      	ldr	r2, [r7, #12]
 8046d68:	6812      	ldr	r2, [r2, #0]
 8046d6a:	4611      	mov	r1, r2
 8046d6c:	687a      	ldr	r2, [r7, #4]
 8046d6e:	01d2      	lsls	r2, r2, #7
 8046d70:	440a      	add	r2, r1
 8046d72:	3284      	adds	r2, #132	; 0x84
 8046d74:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8046d78:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8046d7a:	68fb      	ldr	r3, [r7, #12]
 8046d7c:	681b      	ldr	r3, [r3, #0]
 8046d7e:	461a      	mov	r2, r3
 8046d80:	687b      	ldr	r3, [r7, #4]
 8046d82:	01db      	lsls	r3, r3, #7
 8046d84:	4413      	add	r3, r2
 8046d86:	3384      	adds	r3, #132	; 0x84
 8046d88:	461a      	mov	r2, r3
 8046d8a:	68bb      	ldr	r3, [r7, #8]
 8046d8c:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8046d8e:	68fb      	ldr	r3, [r7, #12]
 8046d90:	681b      	ldr	r3, [r3, #0]
 8046d92:	2201      	movs	r2, #1
 8046d94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8046d96:	68fb      	ldr	r3, [r7, #12]
 8046d98:	2201      	movs	r2, #1
 8046d9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8046d9e:	68fb      	ldr	r3, [r7, #12]
 8046da0:	2200      	movs	r2, #0
 8046da2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8046da6:	2300      	movs	r3, #0
}
 8046da8:	4618      	mov	r0, r3
 8046daa:	3714      	adds	r7, #20
 8046dac:	46bd      	mov	sp, r7
 8046dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046db2:	4770      	bx	lr

08046db4 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8046db4:	b480      	push	{r7}
 8046db6:	b083      	sub	sp, #12
 8046db8:	af00      	add	r7, sp, #0
 8046dba:	6078      	str	r0, [r7, #4]
 8046dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8046dbe:	687b      	ldr	r3, [r7, #4]
 8046dc0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8046dc4:	2b01      	cmp	r3, #1
 8046dc6:	d101      	bne.n	8046dcc <HAL_LTDC_EnableColorKeying+0x18>
 8046dc8:	2302      	movs	r3, #2
 8046dca:	e026      	b.n	8046e1a <HAL_LTDC_EnableColorKeying+0x66>
 8046dcc:	687b      	ldr	r3, [r7, #4]
 8046dce:	2201      	movs	r2, #1
 8046dd0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8046dd4:	687b      	ldr	r3, [r7, #4]
 8046dd6:	2202      	movs	r2, #2
 8046dd8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8046ddc:	687b      	ldr	r3, [r7, #4]
 8046dde:	681b      	ldr	r3, [r3, #0]
 8046de0:	461a      	mov	r2, r3
 8046de2:	683b      	ldr	r3, [r7, #0]
 8046de4:	01db      	lsls	r3, r3, #7
 8046de6:	4413      	add	r3, r2
 8046de8:	3384      	adds	r3, #132	; 0x84
 8046dea:	681b      	ldr	r3, [r3, #0]
 8046dec:	687a      	ldr	r2, [r7, #4]
 8046dee:	6812      	ldr	r2, [r2, #0]
 8046df0:	4611      	mov	r1, r2
 8046df2:	683a      	ldr	r2, [r7, #0]
 8046df4:	01d2      	lsls	r2, r2, #7
 8046df6:	440a      	add	r2, r1
 8046df8:	3284      	adds	r2, #132	; 0x84
 8046dfa:	f043 0302 	orr.w	r3, r3, #2
 8046dfe:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8046e00:	687b      	ldr	r3, [r7, #4]
 8046e02:	681b      	ldr	r3, [r3, #0]
 8046e04:	2201      	movs	r2, #1
 8046e06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8046e08:	687b      	ldr	r3, [r7, #4]
 8046e0a:	2201      	movs	r2, #1
 8046e0c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8046e10:	687b      	ldr	r3, [r7, #4]
 8046e12:	2200      	movs	r2, #0
 8046e14:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8046e18:	2300      	movs	r3, #0
}
 8046e1a:	4618      	mov	r0, r3
 8046e1c:	370c      	adds	r7, #12
 8046e1e:	46bd      	mov	sp, r7
 8046e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046e24:	4770      	bx	lr
	...

08046e28 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8046e28:	b480      	push	{r7}
 8046e2a:	b083      	sub	sp, #12
 8046e2c:	af00      	add	r7, sp, #0
 8046e2e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8046e30:	687b      	ldr	r3, [r7, #4]
 8046e32:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8046e36:	2b01      	cmp	r3, #1
 8046e38:	d101      	bne.n	8046e3e <HAL_LTDC_EnableDither+0x16>
 8046e3a:	2302      	movs	r3, #2
 8046e3c:	e016      	b.n	8046e6c <HAL_LTDC_EnableDither+0x44>
 8046e3e:	687b      	ldr	r3, [r7, #4]
 8046e40:	2201      	movs	r2, #1
 8046e42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8046e46:	687b      	ldr	r3, [r7, #4]
 8046e48:	2202      	movs	r2, #2
 8046e4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8046e4e:	4b0a      	ldr	r3, [pc, #40]	; (8046e78 <HAL_LTDC_EnableDither+0x50>)
 8046e50:	699b      	ldr	r3, [r3, #24]
 8046e52:	4a09      	ldr	r2, [pc, #36]	; (8046e78 <HAL_LTDC_EnableDither+0x50>)
 8046e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8046e58:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8046e5a:	687b      	ldr	r3, [r7, #4]
 8046e5c:	2201      	movs	r2, #1
 8046e5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8046e62:	687b      	ldr	r3, [r7, #4]
 8046e64:	2200      	movs	r2, #0
 8046e66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8046e6a:	2300      	movs	r3, #0
}
 8046e6c:	4618      	mov	r0, r3
 8046e6e:	370c      	adds	r7, #12
 8046e70:	46bd      	mov	sp, r7
 8046e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046e76:	4770      	bx	lr
 8046e78:	40016800 	.word	0x40016800

08046e7c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8046e7c:	b480      	push	{r7}
 8046e7e:	b089      	sub	sp, #36	; 0x24
 8046e80:	af00      	add	r7, sp, #0
 8046e82:	60f8      	str	r0, [r7, #12]
 8046e84:	60b9      	str	r1, [r7, #8]
 8046e86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8046e88:	68bb      	ldr	r3, [r7, #8]
 8046e8a:	685a      	ldr	r2, [r3, #4]
 8046e8c:	68fb      	ldr	r3, [r7, #12]
 8046e8e:	681b      	ldr	r3, [r3, #0]
 8046e90:	68db      	ldr	r3, [r3, #12]
 8046e92:	0c1b      	lsrs	r3, r3, #16
 8046e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8046e98:	4413      	add	r3, r2
 8046e9a:	041b      	lsls	r3, r3, #16
 8046e9c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8046e9e:	68fb      	ldr	r3, [r7, #12]
 8046ea0:	681b      	ldr	r3, [r3, #0]
 8046ea2:	461a      	mov	r2, r3
 8046ea4:	687b      	ldr	r3, [r7, #4]
 8046ea6:	01db      	lsls	r3, r3, #7
 8046ea8:	4413      	add	r3, r2
 8046eaa:	3384      	adds	r3, #132	; 0x84
 8046eac:	685b      	ldr	r3, [r3, #4]
 8046eae:	68fa      	ldr	r2, [r7, #12]
 8046eb0:	6812      	ldr	r2, [r2, #0]
 8046eb2:	4611      	mov	r1, r2
 8046eb4:	687a      	ldr	r2, [r7, #4]
 8046eb6:	01d2      	lsls	r2, r2, #7
 8046eb8:	440a      	add	r2, r1
 8046eba:	3284      	adds	r2, #132	; 0x84
 8046ebc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8046ec0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8046ec2:	68bb      	ldr	r3, [r7, #8]
 8046ec4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8046ec6:	68fb      	ldr	r3, [r7, #12]
 8046ec8:	681b      	ldr	r3, [r3, #0]
 8046eca:	68db      	ldr	r3, [r3, #12]
 8046ecc:	0c1b      	lsrs	r3, r3, #16
 8046ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8046ed2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8046ed4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8046ed6:	68fb      	ldr	r3, [r7, #12]
 8046ed8:	681b      	ldr	r3, [r3, #0]
 8046eda:	4619      	mov	r1, r3
 8046edc:	687b      	ldr	r3, [r7, #4]
 8046ede:	01db      	lsls	r3, r3, #7
 8046ee0:	440b      	add	r3, r1
 8046ee2:	3384      	adds	r3, #132	; 0x84
 8046ee4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8046ee6:	69fb      	ldr	r3, [r7, #28]
 8046ee8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8046eea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8046eec:	68bb      	ldr	r3, [r7, #8]
 8046eee:	68da      	ldr	r2, [r3, #12]
 8046ef0:	68fb      	ldr	r3, [r7, #12]
 8046ef2:	681b      	ldr	r3, [r3, #0]
 8046ef4:	68db      	ldr	r3, [r3, #12]
 8046ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8046efa:	4413      	add	r3, r2
 8046efc:	041b      	lsls	r3, r3, #16
 8046efe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8046f00:	68fb      	ldr	r3, [r7, #12]
 8046f02:	681b      	ldr	r3, [r3, #0]
 8046f04:	461a      	mov	r2, r3
 8046f06:	687b      	ldr	r3, [r7, #4]
 8046f08:	01db      	lsls	r3, r3, #7
 8046f0a:	4413      	add	r3, r2
 8046f0c:	3384      	adds	r3, #132	; 0x84
 8046f0e:	689b      	ldr	r3, [r3, #8]
 8046f10:	68fa      	ldr	r2, [r7, #12]
 8046f12:	6812      	ldr	r2, [r2, #0]
 8046f14:	4611      	mov	r1, r2
 8046f16:	687a      	ldr	r2, [r7, #4]
 8046f18:	01d2      	lsls	r2, r2, #7
 8046f1a:	440a      	add	r2, r1
 8046f1c:	3284      	adds	r2, #132	; 0x84
 8046f1e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8046f22:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8046f24:	68bb      	ldr	r3, [r7, #8]
 8046f26:	689a      	ldr	r2, [r3, #8]
 8046f28:	68fb      	ldr	r3, [r7, #12]
 8046f2a:	681b      	ldr	r3, [r3, #0]
 8046f2c:	68db      	ldr	r3, [r3, #12]
 8046f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8046f32:	4413      	add	r3, r2
 8046f34:	1c5a      	adds	r2, r3, #1
 8046f36:	68fb      	ldr	r3, [r7, #12]
 8046f38:	681b      	ldr	r3, [r3, #0]
 8046f3a:	4619      	mov	r1, r3
 8046f3c:	687b      	ldr	r3, [r7, #4]
 8046f3e:	01db      	lsls	r3, r3, #7
 8046f40:	440b      	add	r3, r1
 8046f42:	3384      	adds	r3, #132	; 0x84
 8046f44:	4619      	mov	r1, r3
 8046f46:	69fb      	ldr	r3, [r7, #28]
 8046f48:	4313      	orrs	r3, r2
 8046f4a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8046f4c:	68fb      	ldr	r3, [r7, #12]
 8046f4e:	681b      	ldr	r3, [r3, #0]
 8046f50:	461a      	mov	r2, r3
 8046f52:	687b      	ldr	r3, [r7, #4]
 8046f54:	01db      	lsls	r3, r3, #7
 8046f56:	4413      	add	r3, r2
 8046f58:	3384      	adds	r3, #132	; 0x84
 8046f5a:	691b      	ldr	r3, [r3, #16]
 8046f5c:	68fa      	ldr	r2, [r7, #12]
 8046f5e:	6812      	ldr	r2, [r2, #0]
 8046f60:	4611      	mov	r1, r2
 8046f62:	687a      	ldr	r2, [r7, #4]
 8046f64:	01d2      	lsls	r2, r2, #7
 8046f66:	440a      	add	r2, r1
 8046f68:	3284      	adds	r2, #132	; 0x84
 8046f6a:	f023 0307 	bic.w	r3, r3, #7
 8046f6e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8046f70:	68fb      	ldr	r3, [r7, #12]
 8046f72:	681b      	ldr	r3, [r3, #0]
 8046f74:	461a      	mov	r2, r3
 8046f76:	687b      	ldr	r3, [r7, #4]
 8046f78:	01db      	lsls	r3, r3, #7
 8046f7a:	4413      	add	r3, r2
 8046f7c:	3384      	adds	r3, #132	; 0x84
 8046f7e:	461a      	mov	r2, r3
 8046f80:	68bb      	ldr	r3, [r7, #8]
 8046f82:	691b      	ldr	r3, [r3, #16]
 8046f84:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8046f86:	68bb      	ldr	r3, [r7, #8]
 8046f88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8046f8c:	021b      	lsls	r3, r3, #8
 8046f8e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8046f90:	68bb      	ldr	r3, [r7, #8]
 8046f92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8046f96:	041b      	lsls	r3, r3, #16
 8046f98:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8046f9a:	68bb      	ldr	r3, [r7, #8]
 8046f9c:	699b      	ldr	r3, [r3, #24]
 8046f9e:	061b      	lsls	r3, r3, #24
 8046fa0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8046fa2:	68fb      	ldr	r3, [r7, #12]
 8046fa4:	681b      	ldr	r3, [r3, #0]
 8046fa6:	461a      	mov	r2, r3
 8046fa8:	687b      	ldr	r3, [r7, #4]
 8046faa:	01db      	lsls	r3, r3, #7
 8046fac:	4413      	add	r3, r2
 8046fae:	3384      	adds	r3, #132	; 0x84
 8046fb0:	699b      	ldr	r3, [r3, #24]
 8046fb2:	68fb      	ldr	r3, [r7, #12]
 8046fb4:	681b      	ldr	r3, [r3, #0]
 8046fb6:	461a      	mov	r2, r3
 8046fb8:	687b      	ldr	r3, [r7, #4]
 8046fba:	01db      	lsls	r3, r3, #7
 8046fbc:	4413      	add	r3, r2
 8046fbe:	3384      	adds	r3, #132	; 0x84
 8046fc0:	461a      	mov	r2, r3
 8046fc2:	2300      	movs	r3, #0
 8046fc4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8046fc6:	68bb      	ldr	r3, [r7, #8]
 8046fc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8046fcc:	461a      	mov	r2, r3
 8046fce:	69fb      	ldr	r3, [r7, #28]
 8046fd0:	431a      	orrs	r2, r3
 8046fd2:	69bb      	ldr	r3, [r7, #24]
 8046fd4:	431a      	orrs	r2, r3
 8046fd6:	68fb      	ldr	r3, [r7, #12]
 8046fd8:	681b      	ldr	r3, [r3, #0]
 8046fda:	4619      	mov	r1, r3
 8046fdc:	687b      	ldr	r3, [r7, #4]
 8046fde:	01db      	lsls	r3, r3, #7
 8046fe0:	440b      	add	r3, r1
 8046fe2:	3384      	adds	r3, #132	; 0x84
 8046fe4:	4619      	mov	r1, r3
 8046fe6:	697b      	ldr	r3, [r7, #20]
 8046fe8:	4313      	orrs	r3, r2
 8046fea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8046fec:	68fb      	ldr	r3, [r7, #12]
 8046fee:	681b      	ldr	r3, [r3, #0]
 8046ff0:	461a      	mov	r2, r3
 8046ff2:	687b      	ldr	r3, [r7, #4]
 8046ff4:	01db      	lsls	r3, r3, #7
 8046ff6:	4413      	add	r3, r2
 8046ff8:	3384      	adds	r3, #132	; 0x84
 8046ffa:	695b      	ldr	r3, [r3, #20]
 8046ffc:	68fa      	ldr	r2, [r7, #12]
 8046ffe:	6812      	ldr	r2, [r2, #0]
 8047000:	4611      	mov	r1, r2
 8047002:	687a      	ldr	r2, [r7, #4]
 8047004:	01d2      	lsls	r2, r2, #7
 8047006:	440a      	add	r2, r1
 8047008:	3284      	adds	r2, #132	; 0x84
 804700a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 804700e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8047010:	68fb      	ldr	r3, [r7, #12]
 8047012:	681b      	ldr	r3, [r3, #0]
 8047014:	461a      	mov	r2, r3
 8047016:	687b      	ldr	r3, [r7, #4]
 8047018:	01db      	lsls	r3, r3, #7
 804701a:	4413      	add	r3, r2
 804701c:	3384      	adds	r3, #132	; 0x84
 804701e:	461a      	mov	r2, r3
 8047020:	68bb      	ldr	r3, [r7, #8]
 8047022:	695b      	ldr	r3, [r3, #20]
 8047024:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8047026:	68fb      	ldr	r3, [r7, #12]
 8047028:	681b      	ldr	r3, [r3, #0]
 804702a:	461a      	mov	r2, r3
 804702c:	687b      	ldr	r3, [r7, #4]
 804702e:	01db      	lsls	r3, r3, #7
 8047030:	4413      	add	r3, r2
 8047032:	3384      	adds	r3, #132	; 0x84
 8047034:	69db      	ldr	r3, [r3, #28]
 8047036:	68fa      	ldr	r2, [r7, #12]
 8047038:	6812      	ldr	r2, [r2, #0]
 804703a:	4611      	mov	r1, r2
 804703c:	687a      	ldr	r2, [r7, #4]
 804703e:	01d2      	lsls	r2, r2, #7
 8047040:	440a      	add	r2, r1
 8047042:	3284      	adds	r2, #132	; 0x84
 8047044:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8047048:	f023 0307 	bic.w	r3, r3, #7
 804704c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 804704e:	68bb      	ldr	r3, [r7, #8]
 8047050:	69da      	ldr	r2, [r3, #28]
 8047052:	68bb      	ldr	r3, [r7, #8]
 8047054:	6a1b      	ldr	r3, [r3, #32]
 8047056:	68f9      	ldr	r1, [r7, #12]
 8047058:	6809      	ldr	r1, [r1, #0]
 804705a:	4608      	mov	r0, r1
 804705c:	6879      	ldr	r1, [r7, #4]
 804705e:	01c9      	lsls	r1, r1, #7
 8047060:	4401      	add	r1, r0
 8047062:	3184      	adds	r1, #132	; 0x84
 8047064:	4313      	orrs	r3, r2
 8047066:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8047068:	68fb      	ldr	r3, [r7, #12]
 804706a:	681b      	ldr	r3, [r3, #0]
 804706c:	461a      	mov	r2, r3
 804706e:	687b      	ldr	r3, [r7, #4]
 8047070:	01db      	lsls	r3, r3, #7
 8047072:	4413      	add	r3, r2
 8047074:	3384      	adds	r3, #132	; 0x84
 8047076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047078:	68fb      	ldr	r3, [r7, #12]
 804707a:	681b      	ldr	r3, [r3, #0]
 804707c:	461a      	mov	r2, r3
 804707e:	687b      	ldr	r3, [r7, #4]
 8047080:	01db      	lsls	r3, r3, #7
 8047082:	4413      	add	r3, r2
 8047084:	3384      	adds	r3, #132	; 0x84
 8047086:	461a      	mov	r2, r3
 8047088:	2300      	movs	r3, #0
 804708a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 804708c:	68fb      	ldr	r3, [r7, #12]
 804708e:	681b      	ldr	r3, [r3, #0]
 8047090:	461a      	mov	r2, r3
 8047092:	687b      	ldr	r3, [r7, #4]
 8047094:	01db      	lsls	r3, r3, #7
 8047096:	4413      	add	r3, r2
 8047098:	3384      	adds	r3, #132	; 0x84
 804709a:	461a      	mov	r2, r3
 804709c:	68bb      	ldr	r3, [r7, #8]
 804709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80470a0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80470a2:	68bb      	ldr	r3, [r7, #8]
 80470a4:	691b      	ldr	r3, [r3, #16]
 80470a6:	2b00      	cmp	r3, #0
 80470a8:	d102      	bne.n	80470b0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80470aa:	2304      	movs	r3, #4
 80470ac:	61fb      	str	r3, [r7, #28]
 80470ae:	e01b      	b.n	80470e8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80470b0:	68bb      	ldr	r3, [r7, #8]
 80470b2:	691b      	ldr	r3, [r3, #16]
 80470b4:	2b01      	cmp	r3, #1
 80470b6:	d102      	bne.n	80470be <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80470b8:	2303      	movs	r3, #3
 80470ba:	61fb      	str	r3, [r7, #28]
 80470bc:	e014      	b.n	80470e8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80470be:	68bb      	ldr	r3, [r7, #8]
 80470c0:	691b      	ldr	r3, [r3, #16]
 80470c2:	2b04      	cmp	r3, #4
 80470c4:	d00b      	beq.n	80470de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80470c6:	68bb      	ldr	r3, [r7, #8]
 80470c8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80470ca:	2b02      	cmp	r3, #2
 80470cc:	d007      	beq.n	80470de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80470ce:	68bb      	ldr	r3, [r7, #8]
 80470d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80470d2:	2b03      	cmp	r3, #3
 80470d4:	d003      	beq.n	80470de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80470d6:	68bb      	ldr	r3, [r7, #8]
 80470d8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80470da:	2b07      	cmp	r3, #7
 80470dc:	d102      	bne.n	80470e4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80470de:	2302      	movs	r3, #2
 80470e0:	61fb      	str	r3, [r7, #28]
 80470e2:	e001      	b.n	80470e8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80470e4:	2301      	movs	r3, #1
 80470e6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80470e8:	68fb      	ldr	r3, [r7, #12]
 80470ea:	681b      	ldr	r3, [r3, #0]
 80470ec:	461a      	mov	r2, r3
 80470ee:	687b      	ldr	r3, [r7, #4]
 80470f0:	01db      	lsls	r3, r3, #7
 80470f2:	4413      	add	r3, r2
 80470f4:	3384      	adds	r3, #132	; 0x84
 80470f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80470f8:	68fa      	ldr	r2, [r7, #12]
 80470fa:	6812      	ldr	r2, [r2, #0]
 80470fc:	4611      	mov	r1, r2
 80470fe:	687a      	ldr	r2, [r7, #4]
 8047100:	01d2      	lsls	r2, r2, #7
 8047102:	440a      	add	r2, r1
 8047104:	3284      	adds	r2, #132	; 0x84
 8047106:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 804710a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 804710c:	68bb      	ldr	r3, [r7, #8]
 804710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047110:	69fa      	ldr	r2, [r7, #28]
 8047112:	fb02 f303 	mul.w	r3, r2, r3
 8047116:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8047118:	68bb      	ldr	r3, [r7, #8]
 804711a:	6859      	ldr	r1, [r3, #4]
 804711c:	68bb      	ldr	r3, [r7, #8]
 804711e:	681b      	ldr	r3, [r3, #0]
 8047120:	1acb      	subs	r3, r1, r3
 8047122:	69f9      	ldr	r1, [r7, #28]
 8047124:	fb01 f303 	mul.w	r3, r1, r3
 8047128:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 804712a:	68f9      	ldr	r1, [r7, #12]
 804712c:	6809      	ldr	r1, [r1, #0]
 804712e:	4608      	mov	r0, r1
 8047130:	6879      	ldr	r1, [r7, #4]
 8047132:	01c9      	lsls	r1, r1, #7
 8047134:	4401      	add	r1, r0
 8047136:	3184      	adds	r1, #132	; 0x84
 8047138:	4313      	orrs	r3, r2
 804713a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 804713c:	68fb      	ldr	r3, [r7, #12]
 804713e:	681b      	ldr	r3, [r3, #0]
 8047140:	461a      	mov	r2, r3
 8047142:	687b      	ldr	r3, [r7, #4]
 8047144:	01db      	lsls	r3, r3, #7
 8047146:	4413      	add	r3, r2
 8047148:	3384      	adds	r3, #132	; 0x84
 804714a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804714c:	68fa      	ldr	r2, [r7, #12]
 804714e:	6812      	ldr	r2, [r2, #0]
 8047150:	4611      	mov	r1, r2
 8047152:	687a      	ldr	r2, [r7, #4]
 8047154:	01d2      	lsls	r2, r2, #7
 8047156:	440a      	add	r2, r1
 8047158:	3284      	adds	r2, #132	; 0x84
 804715a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 804715e:	f023 0307 	bic.w	r3, r3, #7
 8047162:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8047164:	68fb      	ldr	r3, [r7, #12]
 8047166:	681b      	ldr	r3, [r3, #0]
 8047168:	461a      	mov	r2, r3
 804716a:	687b      	ldr	r3, [r7, #4]
 804716c:	01db      	lsls	r3, r3, #7
 804716e:	4413      	add	r3, r2
 8047170:	3384      	adds	r3, #132	; 0x84
 8047172:	461a      	mov	r2, r3
 8047174:	68bb      	ldr	r3, [r7, #8]
 8047176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8047178:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 804717a:	68fb      	ldr	r3, [r7, #12]
 804717c:	681b      	ldr	r3, [r3, #0]
 804717e:	461a      	mov	r2, r3
 8047180:	687b      	ldr	r3, [r7, #4]
 8047182:	01db      	lsls	r3, r3, #7
 8047184:	4413      	add	r3, r2
 8047186:	3384      	adds	r3, #132	; 0x84
 8047188:	681b      	ldr	r3, [r3, #0]
 804718a:	68fa      	ldr	r2, [r7, #12]
 804718c:	6812      	ldr	r2, [r2, #0]
 804718e:	4611      	mov	r1, r2
 8047190:	687a      	ldr	r2, [r7, #4]
 8047192:	01d2      	lsls	r2, r2, #7
 8047194:	440a      	add	r2, r1
 8047196:	3284      	adds	r2, #132	; 0x84
 8047198:	f043 0301 	orr.w	r3, r3, #1
 804719c:	6013      	str	r3, [r2, #0]
}
 804719e:	bf00      	nop
 80471a0:	3724      	adds	r7, #36	; 0x24
 80471a2:	46bd      	mov	sp, r7
 80471a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80471a8:	4770      	bx	lr
	...

080471ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80471ac:	b580      	push	{r7, lr}
 80471ae:	b086      	sub	sp, #24
 80471b0:	af00      	add	r7, sp, #0
 80471b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80471b4:	687b      	ldr	r3, [r7, #4]
 80471b6:	2b00      	cmp	r3, #0
 80471b8:	d101      	bne.n	80471be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80471ba:	2301      	movs	r3, #1
 80471bc:	e267      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80471be:	687b      	ldr	r3, [r7, #4]
 80471c0:	681b      	ldr	r3, [r3, #0]
 80471c2:	f003 0301 	and.w	r3, r3, #1
 80471c6:	2b00      	cmp	r3, #0
 80471c8:	d075      	beq.n	80472b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80471ca:	4b88      	ldr	r3, [pc, #544]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 80471cc:	689b      	ldr	r3, [r3, #8]
 80471ce:	f003 030c 	and.w	r3, r3, #12
 80471d2:	2b04      	cmp	r3, #4
 80471d4:	d00c      	beq.n	80471f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80471d6:	4b85      	ldr	r3, [pc, #532]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 80471d8:	689b      	ldr	r3, [r3, #8]
 80471da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80471de:	2b08      	cmp	r3, #8
 80471e0:	d112      	bne.n	8047208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80471e2:	4b82      	ldr	r3, [pc, #520]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 80471e4:	685b      	ldr	r3, [r3, #4]
 80471e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80471ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80471ee:	d10b      	bne.n	8047208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80471f0:	4b7e      	ldr	r3, [pc, #504]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 80471f2:	681b      	ldr	r3, [r3, #0]
 80471f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80471f8:	2b00      	cmp	r3, #0
 80471fa:	d05b      	beq.n	80472b4 <HAL_RCC_OscConfig+0x108>
 80471fc:	687b      	ldr	r3, [r7, #4]
 80471fe:	685b      	ldr	r3, [r3, #4]
 8047200:	2b00      	cmp	r3, #0
 8047202:	d157      	bne.n	80472b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8047204:	2301      	movs	r3, #1
 8047206:	e242      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8047208:	687b      	ldr	r3, [r7, #4]
 804720a:	685b      	ldr	r3, [r3, #4]
 804720c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8047210:	d106      	bne.n	8047220 <HAL_RCC_OscConfig+0x74>
 8047212:	4b76      	ldr	r3, [pc, #472]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 8047214:	681b      	ldr	r3, [r3, #0]
 8047216:	4a75      	ldr	r2, [pc, #468]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 8047218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804721c:	6013      	str	r3, [r2, #0]
 804721e:	e01d      	b.n	804725c <HAL_RCC_OscConfig+0xb0>
 8047220:	687b      	ldr	r3, [r7, #4]
 8047222:	685b      	ldr	r3, [r3, #4]
 8047224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8047228:	d10c      	bne.n	8047244 <HAL_RCC_OscConfig+0x98>
 804722a:	4b70      	ldr	r3, [pc, #448]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 804722c:	681b      	ldr	r3, [r3, #0]
 804722e:	4a6f      	ldr	r2, [pc, #444]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 8047230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8047234:	6013      	str	r3, [r2, #0]
 8047236:	4b6d      	ldr	r3, [pc, #436]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 8047238:	681b      	ldr	r3, [r3, #0]
 804723a:	4a6c      	ldr	r2, [pc, #432]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 804723c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8047240:	6013      	str	r3, [r2, #0]
 8047242:	e00b      	b.n	804725c <HAL_RCC_OscConfig+0xb0>
 8047244:	4b69      	ldr	r3, [pc, #420]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 8047246:	681b      	ldr	r3, [r3, #0]
 8047248:	4a68      	ldr	r2, [pc, #416]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 804724a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804724e:	6013      	str	r3, [r2, #0]
 8047250:	4b66      	ldr	r3, [pc, #408]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 8047252:	681b      	ldr	r3, [r3, #0]
 8047254:	4a65      	ldr	r2, [pc, #404]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 8047256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804725a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 804725c:	687b      	ldr	r3, [r7, #4]
 804725e:	685b      	ldr	r3, [r3, #4]
 8047260:	2b00      	cmp	r3, #0
 8047262:	d013      	beq.n	804728c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8047264:	f7fc f950 	bl	8043508 <HAL_GetTick>
 8047268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804726a:	e008      	b.n	804727e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 804726c:	f7fc f94c 	bl	8043508 <HAL_GetTick>
 8047270:	4602      	mov	r2, r0
 8047272:	693b      	ldr	r3, [r7, #16]
 8047274:	1ad3      	subs	r3, r2, r3
 8047276:	2b64      	cmp	r3, #100	; 0x64
 8047278:	d901      	bls.n	804727e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 804727a:	2303      	movs	r3, #3
 804727c:	e207      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804727e:	4b5b      	ldr	r3, [pc, #364]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 8047280:	681b      	ldr	r3, [r3, #0]
 8047282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8047286:	2b00      	cmp	r3, #0
 8047288:	d0f0      	beq.n	804726c <HAL_RCC_OscConfig+0xc0>
 804728a:	e014      	b.n	80472b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 804728c:	f7fc f93c 	bl	8043508 <HAL_GetTick>
 8047290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8047292:	e008      	b.n	80472a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8047294:	f7fc f938 	bl	8043508 <HAL_GetTick>
 8047298:	4602      	mov	r2, r0
 804729a:	693b      	ldr	r3, [r7, #16]
 804729c:	1ad3      	subs	r3, r2, r3
 804729e:	2b64      	cmp	r3, #100	; 0x64
 80472a0:	d901      	bls.n	80472a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80472a2:	2303      	movs	r3, #3
 80472a4:	e1f3      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80472a6:	4b51      	ldr	r3, [pc, #324]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 80472a8:	681b      	ldr	r3, [r3, #0]
 80472aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80472ae:	2b00      	cmp	r3, #0
 80472b0:	d1f0      	bne.n	8047294 <HAL_RCC_OscConfig+0xe8>
 80472b2:	e000      	b.n	80472b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80472b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80472b6:	687b      	ldr	r3, [r7, #4]
 80472b8:	681b      	ldr	r3, [r3, #0]
 80472ba:	f003 0302 	and.w	r3, r3, #2
 80472be:	2b00      	cmp	r3, #0
 80472c0:	d063      	beq.n	804738a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80472c2:	4b4a      	ldr	r3, [pc, #296]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 80472c4:	689b      	ldr	r3, [r3, #8]
 80472c6:	f003 030c 	and.w	r3, r3, #12
 80472ca:	2b00      	cmp	r3, #0
 80472cc:	d00b      	beq.n	80472e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80472ce:	4b47      	ldr	r3, [pc, #284]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 80472d0:	689b      	ldr	r3, [r3, #8]
 80472d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80472d6:	2b08      	cmp	r3, #8
 80472d8:	d11c      	bne.n	8047314 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80472da:	4b44      	ldr	r3, [pc, #272]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 80472dc:	685b      	ldr	r3, [r3, #4]
 80472de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80472e2:	2b00      	cmp	r3, #0
 80472e4:	d116      	bne.n	8047314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80472e6:	4b41      	ldr	r3, [pc, #260]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 80472e8:	681b      	ldr	r3, [r3, #0]
 80472ea:	f003 0302 	and.w	r3, r3, #2
 80472ee:	2b00      	cmp	r3, #0
 80472f0:	d005      	beq.n	80472fe <HAL_RCC_OscConfig+0x152>
 80472f2:	687b      	ldr	r3, [r7, #4]
 80472f4:	68db      	ldr	r3, [r3, #12]
 80472f6:	2b01      	cmp	r3, #1
 80472f8:	d001      	beq.n	80472fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80472fa:	2301      	movs	r3, #1
 80472fc:	e1c7      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80472fe:	4b3b      	ldr	r3, [pc, #236]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 8047300:	681b      	ldr	r3, [r3, #0]
 8047302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8047306:	687b      	ldr	r3, [r7, #4]
 8047308:	691b      	ldr	r3, [r3, #16]
 804730a:	00db      	lsls	r3, r3, #3
 804730c:	4937      	ldr	r1, [pc, #220]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 804730e:	4313      	orrs	r3, r2
 8047310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8047312:	e03a      	b.n	804738a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8047314:	687b      	ldr	r3, [r7, #4]
 8047316:	68db      	ldr	r3, [r3, #12]
 8047318:	2b00      	cmp	r3, #0
 804731a:	d020      	beq.n	804735e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 804731c:	4b34      	ldr	r3, [pc, #208]	; (80473f0 <HAL_RCC_OscConfig+0x244>)
 804731e:	2201      	movs	r2, #1
 8047320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8047322:	f7fc f8f1 	bl	8043508 <HAL_GetTick>
 8047326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8047328:	e008      	b.n	804733c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 804732a:	f7fc f8ed 	bl	8043508 <HAL_GetTick>
 804732e:	4602      	mov	r2, r0
 8047330:	693b      	ldr	r3, [r7, #16]
 8047332:	1ad3      	subs	r3, r2, r3
 8047334:	2b02      	cmp	r3, #2
 8047336:	d901      	bls.n	804733c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8047338:	2303      	movs	r3, #3
 804733a:	e1a8      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804733c:	4b2b      	ldr	r3, [pc, #172]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 804733e:	681b      	ldr	r3, [r3, #0]
 8047340:	f003 0302 	and.w	r3, r3, #2
 8047344:	2b00      	cmp	r3, #0
 8047346:	d0f0      	beq.n	804732a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8047348:	4b28      	ldr	r3, [pc, #160]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 804734a:	681b      	ldr	r3, [r3, #0]
 804734c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8047350:	687b      	ldr	r3, [r7, #4]
 8047352:	691b      	ldr	r3, [r3, #16]
 8047354:	00db      	lsls	r3, r3, #3
 8047356:	4925      	ldr	r1, [pc, #148]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 8047358:	4313      	orrs	r3, r2
 804735a:	600b      	str	r3, [r1, #0]
 804735c:	e015      	b.n	804738a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 804735e:	4b24      	ldr	r3, [pc, #144]	; (80473f0 <HAL_RCC_OscConfig+0x244>)
 8047360:	2200      	movs	r2, #0
 8047362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8047364:	f7fc f8d0 	bl	8043508 <HAL_GetTick>
 8047368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804736a:	e008      	b.n	804737e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 804736c:	f7fc f8cc 	bl	8043508 <HAL_GetTick>
 8047370:	4602      	mov	r2, r0
 8047372:	693b      	ldr	r3, [r7, #16]
 8047374:	1ad3      	subs	r3, r2, r3
 8047376:	2b02      	cmp	r3, #2
 8047378:	d901      	bls.n	804737e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 804737a:	2303      	movs	r3, #3
 804737c:	e187      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804737e:	4b1b      	ldr	r3, [pc, #108]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 8047380:	681b      	ldr	r3, [r3, #0]
 8047382:	f003 0302 	and.w	r3, r3, #2
 8047386:	2b00      	cmp	r3, #0
 8047388:	d1f0      	bne.n	804736c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804738a:	687b      	ldr	r3, [r7, #4]
 804738c:	681b      	ldr	r3, [r3, #0]
 804738e:	f003 0308 	and.w	r3, r3, #8
 8047392:	2b00      	cmp	r3, #0
 8047394:	d036      	beq.n	8047404 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8047396:	687b      	ldr	r3, [r7, #4]
 8047398:	695b      	ldr	r3, [r3, #20]
 804739a:	2b00      	cmp	r3, #0
 804739c:	d016      	beq.n	80473cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 804739e:	4b15      	ldr	r3, [pc, #84]	; (80473f4 <HAL_RCC_OscConfig+0x248>)
 80473a0:	2201      	movs	r2, #1
 80473a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80473a4:	f7fc f8b0 	bl	8043508 <HAL_GetTick>
 80473a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80473aa:	e008      	b.n	80473be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80473ac:	f7fc f8ac 	bl	8043508 <HAL_GetTick>
 80473b0:	4602      	mov	r2, r0
 80473b2:	693b      	ldr	r3, [r7, #16]
 80473b4:	1ad3      	subs	r3, r2, r3
 80473b6:	2b02      	cmp	r3, #2
 80473b8:	d901      	bls.n	80473be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80473ba:	2303      	movs	r3, #3
 80473bc:	e167      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80473be:	4b0b      	ldr	r3, [pc, #44]	; (80473ec <HAL_RCC_OscConfig+0x240>)
 80473c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80473c2:	f003 0302 	and.w	r3, r3, #2
 80473c6:	2b00      	cmp	r3, #0
 80473c8:	d0f0      	beq.n	80473ac <HAL_RCC_OscConfig+0x200>
 80473ca:	e01b      	b.n	8047404 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80473cc:	4b09      	ldr	r3, [pc, #36]	; (80473f4 <HAL_RCC_OscConfig+0x248>)
 80473ce:	2200      	movs	r2, #0
 80473d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80473d2:	f7fc f899 	bl	8043508 <HAL_GetTick>
 80473d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80473d8:	e00e      	b.n	80473f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80473da:	f7fc f895 	bl	8043508 <HAL_GetTick>
 80473de:	4602      	mov	r2, r0
 80473e0:	693b      	ldr	r3, [r7, #16]
 80473e2:	1ad3      	subs	r3, r2, r3
 80473e4:	2b02      	cmp	r3, #2
 80473e6:	d907      	bls.n	80473f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80473e8:	2303      	movs	r3, #3
 80473ea:	e150      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
 80473ec:	40023800 	.word	0x40023800
 80473f0:	42470000 	.word	0x42470000
 80473f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80473f8:	4b88      	ldr	r3, [pc, #544]	; (804761c <HAL_RCC_OscConfig+0x470>)
 80473fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80473fc:	f003 0302 	and.w	r3, r3, #2
 8047400:	2b00      	cmp	r3, #0
 8047402:	d1ea      	bne.n	80473da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8047404:	687b      	ldr	r3, [r7, #4]
 8047406:	681b      	ldr	r3, [r3, #0]
 8047408:	f003 0304 	and.w	r3, r3, #4
 804740c:	2b00      	cmp	r3, #0
 804740e:	f000 8097 	beq.w	8047540 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8047412:	2300      	movs	r3, #0
 8047414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8047416:	4b81      	ldr	r3, [pc, #516]	; (804761c <HAL_RCC_OscConfig+0x470>)
 8047418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804741a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804741e:	2b00      	cmp	r3, #0
 8047420:	d10f      	bne.n	8047442 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8047422:	2300      	movs	r3, #0
 8047424:	60bb      	str	r3, [r7, #8]
 8047426:	4b7d      	ldr	r3, [pc, #500]	; (804761c <HAL_RCC_OscConfig+0x470>)
 8047428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804742a:	4a7c      	ldr	r2, [pc, #496]	; (804761c <HAL_RCC_OscConfig+0x470>)
 804742c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8047430:	6413      	str	r3, [r2, #64]	; 0x40
 8047432:	4b7a      	ldr	r3, [pc, #488]	; (804761c <HAL_RCC_OscConfig+0x470>)
 8047434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8047436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804743a:	60bb      	str	r3, [r7, #8]
 804743c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 804743e:	2301      	movs	r3, #1
 8047440:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8047442:	4b77      	ldr	r3, [pc, #476]	; (8047620 <HAL_RCC_OscConfig+0x474>)
 8047444:	681b      	ldr	r3, [r3, #0]
 8047446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804744a:	2b00      	cmp	r3, #0
 804744c:	d118      	bne.n	8047480 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 804744e:	4b74      	ldr	r3, [pc, #464]	; (8047620 <HAL_RCC_OscConfig+0x474>)
 8047450:	681b      	ldr	r3, [r3, #0]
 8047452:	4a73      	ldr	r2, [pc, #460]	; (8047620 <HAL_RCC_OscConfig+0x474>)
 8047454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8047458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 804745a:	f7fc f855 	bl	8043508 <HAL_GetTick>
 804745e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8047460:	e008      	b.n	8047474 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8047462:	f7fc f851 	bl	8043508 <HAL_GetTick>
 8047466:	4602      	mov	r2, r0
 8047468:	693b      	ldr	r3, [r7, #16]
 804746a:	1ad3      	subs	r3, r2, r3
 804746c:	2b02      	cmp	r3, #2
 804746e:	d901      	bls.n	8047474 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8047470:	2303      	movs	r3, #3
 8047472:	e10c      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8047474:	4b6a      	ldr	r3, [pc, #424]	; (8047620 <HAL_RCC_OscConfig+0x474>)
 8047476:	681b      	ldr	r3, [r3, #0]
 8047478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804747c:	2b00      	cmp	r3, #0
 804747e:	d0f0      	beq.n	8047462 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8047480:	687b      	ldr	r3, [r7, #4]
 8047482:	689b      	ldr	r3, [r3, #8]
 8047484:	2b01      	cmp	r3, #1
 8047486:	d106      	bne.n	8047496 <HAL_RCC_OscConfig+0x2ea>
 8047488:	4b64      	ldr	r3, [pc, #400]	; (804761c <HAL_RCC_OscConfig+0x470>)
 804748a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804748c:	4a63      	ldr	r2, [pc, #396]	; (804761c <HAL_RCC_OscConfig+0x470>)
 804748e:	f043 0301 	orr.w	r3, r3, #1
 8047492:	6713      	str	r3, [r2, #112]	; 0x70
 8047494:	e01c      	b.n	80474d0 <HAL_RCC_OscConfig+0x324>
 8047496:	687b      	ldr	r3, [r7, #4]
 8047498:	689b      	ldr	r3, [r3, #8]
 804749a:	2b05      	cmp	r3, #5
 804749c:	d10c      	bne.n	80474b8 <HAL_RCC_OscConfig+0x30c>
 804749e:	4b5f      	ldr	r3, [pc, #380]	; (804761c <HAL_RCC_OscConfig+0x470>)
 80474a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80474a2:	4a5e      	ldr	r2, [pc, #376]	; (804761c <HAL_RCC_OscConfig+0x470>)
 80474a4:	f043 0304 	orr.w	r3, r3, #4
 80474a8:	6713      	str	r3, [r2, #112]	; 0x70
 80474aa:	4b5c      	ldr	r3, [pc, #368]	; (804761c <HAL_RCC_OscConfig+0x470>)
 80474ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80474ae:	4a5b      	ldr	r2, [pc, #364]	; (804761c <HAL_RCC_OscConfig+0x470>)
 80474b0:	f043 0301 	orr.w	r3, r3, #1
 80474b4:	6713      	str	r3, [r2, #112]	; 0x70
 80474b6:	e00b      	b.n	80474d0 <HAL_RCC_OscConfig+0x324>
 80474b8:	4b58      	ldr	r3, [pc, #352]	; (804761c <HAL_RCC_OscConfig+0x470>)
 80474ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80474bc:	4a57      	ldr	r2, [pc, #348]	; (804761c <HAL_RCC_OscConfig+0x470>)
 80474be:	f023 0301 	bic.w	r3, r3, #1
 80474c2:	6713      	str	r3, [r2, #112]	; 0x70
 80474c4:	4b55      	ldr	r3, [pc, #340]	; (804761c <HAL_RCC_OscConfig+0x470>)
 80474c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80474c8:	4a54      	ldr	r2, [pc, #336]	; (804761c <HAL_RCC_OscConfig+0x470>)
 80474ca:	f023 0304 	bic.w	r3, r3, #4
 80474ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80474d0:	687b      	ldr	r3, [r7, #4]
 80474d2:	689b      	ldr	r3, [r3, #8]
 80474d4:	2b00      	cmp	r3, #0
 80474d6:	d015      	beq.n	8047504 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80474d8:	f7fc f816 	bl	8043508 <HAL_GetTick>
 80474dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80474de:	e00a      	b.n	80474f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80474e0:	f7fc f812 	bl	8043508 <HAL_GetTick>
 80474e4:	4602      	mov	r2, r0
 80474e6:	693b      	ldr	r3, [r7, #16]
 80474e8:	1ad3      	subs	r3, r2, r3
 80474ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80474ee:	4293      	cmp	r3, r2
 80474f0:	d901      	bls.n	80474f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80474f2:	2303      	movs	r3, #3
 80474f4:	e0cb      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80474f6:	4b49      	ldr	r3, [pc, #292]	; (804761c <HAL_RCC_OscConfig+0x470>)
 80474f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80474fa:	f003 0302 	and.w	r3, r3, #2
 80474fe:	2b00      	cmp	r3, #0
 8047500:	d0ee      	beq.n	80474e0 <HAL_RCC_OscConfig+0x334>
 8047502:	e014      	b.n	804752e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8047504:	f7fc f800 	bl	8043508 <HAL_GetTick>
 8047508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 804750a:	e00a      	b.n	8047522 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 804750c:	f7fb fffc 	bl	8043508 <HAL_GetTick>
 8047510:	4602      	mov	r2, r0
 8047512:	693b      	ldr	r3, [r7, #16]
 8047514:	1ad3      	subs	r3, r2, r3
 8047516:	f241 3288 	movw	r2, #5000	; 0x1388
 804751a:	4293      	cmp	r3, r2
 804751c:	d901      	bls.n	8047522 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 804751e:	2303      	movs	r3, #3
 8047520:	e0b5      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8047522:	4b3e      	ldr	r3, [pc, #248]	; (804761c <HAL_RCC_OscConfig+0x470>)
 8047524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8047526:	f003 0302 	and.w	r3, r3, #2
 804752a:	2b00      	cmp	r3, #0
 804752c:	d1ee      	bne.n	804750c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 804752e:	7dfb      	ldrb	r3, [r7, #23]
 8047530:	2b01      	cmp	r3, #1
 8047532:	d105      	bne.n	8047540 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8047534:	4b39      	ldr	r3, [pc, #228]	; (804761c <HAL_RCC_OscConfig+0x470>)
 8047536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8047538:	4a38      	ldr	r2, [pc, #224]	; (804761c <HAL_RCC_OscConfig+0x470>)
 804753a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804753e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8047540:	687b      	ldr	r3, [r7, #4]
 8047542:	699b      	ldr	r3, [r3, #24]
 8047544:	2b00      	cmp	r3, #0
 8047546:	f000 80a1 	beq.w	804768c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 804754a:	4b34      	ldr	r3, [pc, #208]	; (804761c <HAL_RCC_OscConfig+0x470>)
 804754c:	689b      	ldr	r3, [r3, #8]
 804754e:	f003 030c 	and.w	r3, r3, #12
 8047552:	2b08      	cmp	r3, #8
 8047554:	d05c      	beq.n	8047610 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8047556:	687b      	ldr	r3, [r7, #4]
 8047558:	699b      	ldr	r3, [r3, #24]
 804755a:	2b02      	cmp	r3, #2
 804755c:	d141      	bne.n	80475e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804755e:	4b31      	ldr	r3, [pc, #196]	; (8047624 <HAL_RCC_OscConfig+0x478>)
 8047560:	2200      	movs	r2, #0
 8047562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8047564:	f7fb ffd0 	bl	8043508 <HAL_GetTick>
 8047568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804756a:	e008      	b.n	804757e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 804756c:	f7fb ffcc 	bl	8043508 <HAL_GetTick>
 8047570:	4602      	mov	r2, r0
 8047572:	693b      	ldr	r3, [r7, #16]
 8047574:	1ad3      	subs	r3, r2, r3
 8047576:	2b02      	cmp	r3, #2
 8047578:	d901      	bls.n	804757e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 804757a:	2303      	movs	r3, #3
 804757c:	e087      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804757e:	4b27      	ldr	r3, [pc, #156]	; (804761c <HAL_RCC_OscConfig+0x470>)
 8047580:	681b      	ldr	r3, [r3, #0]
 8047582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8047586:	2b00      	cmp	r3, #0
 8047588:	d1f0      	bne.n	804756c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 804758a:	687b      	ldr	r3, [r7, #4]
 804758c:	69da      	ldr	r2, [r3, #28]
 804758e:	687b      	ldr	r3, [r7, #4]
 8047590:	6a1b      	ldr	r3, [r3, #32]
 8047592:	431a      	orrs	r2, r3
 8047594:	687b      	ldr	r3, [r7, #4]
 8047596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8047598:	019b      	lsls	r3, r3, #6
 804759a:	431a      	orrs	r2, r3
 804759c:	687b      	ldr	r3, [r7, #4]
 804759e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80475a0:	085b      	lsrs	r3, r3, #1
 80475a2:	3b01      	subs	r3, #1
 80475a4:	041b      	lsls	r3, r3, #16
 80475a6:	431a      	orrs	r2, r3
 80475a8:	687b      	ldr	r3, [r7, #4]
 80475aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80475ac:	061b      	lsls	r3, r3, #24
 80475ae:	491b      	ldr	r1, [pc, #108]	; (804761c <HAL_RCC_OscConfig+0x470>)
 80475b0:	4313      	orrs	r3, r2
 80475b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80475b4:	4b1b      	ldr	r3, [pc, #108]	; (8047624 <HAL_RCC_OscConfig+0x478>)
 80475b6:	2201      	movs	r2, #1
 80475b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80475ba:	f7fb ffa5 	bl	8043508 <HAL_GetTick>
 80475be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80475c0:	e008      	b.n	80475d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80475c2:	f7fb ffa1 	bl	8043508 <HAL_GetTick>
 80475c6:	4602      	mov	r2, r0
 80475c8:	693b      	ldr	r3, [r7, #16]
 80475ca:	1ad3      	subs	r3, r2, r3
 80475cc:	2b02      	cmp	r3, #2
 80475ce:	d901      	bls.n	80475d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80475d0:	2303      	movs	r3, #3
 80475d2:	e05c      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80475d4:	4b11      	ldr	r3, [pc, #68]	; (804761c <HAL_RCC_OscConfig+0x470>)
 80475d6:	681b      	ldr	r3, [r3, #0]
 80475d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80475dc:	2b00      	cmp	r3, #0
 80475de:	d0f0      	beq.n	80475c2 <HAL_RCC_OscConfig+0x416>
 80475e0:	e054      	b.n	804768c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80475e2:	4b10      	ldr	r3, [pc, #64]	; (8047624 <HAL_RCC_OscConfig+0x478>)
 80475e4:	2200      	movs	r2, #0
 80475e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80475e8:	f7fb ff8e 	bl	8043508 <HAL_GetTick>
 80475ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80475ee:	e008      	b.n	8047602 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80475f0:	f7fb ff8a 	bl	8043508 <HAL_GetTick>
 80475f4:	4602      	mov	r2, r0
 80475f6:	693b      	ldr	r3, [r7, #16]
 80475f8:	1ad3      	subs	r3, r2, r3
 80475fa:	2b02      	cmp	r3, #2
 80475fc:	d901      	bls.n	8047602 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80475fe:	2303      	movs	r3, #3
 8047600:	e045      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8047602:	4b06      	ldr	r3, [pc, #24]	; (804761c <HAL_RCC_OscConfig+0x470>)
 8047604:	681b      	ldr	r3, [r3, #0]
 8047606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804760a:	2b00      	cmp	r3, #0
 804760c:	d1f0      	bne.n	80475f0 <HAL_RCC_OscConfig+0x444>
 804760e:	e03d      	b.n	804768c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8047610:	687b      	ldr	r3, [r7, #4]
 8047612:	699b      	ldr	r3, [r3, #24]
 8047614:	2b01      	cmp	r3, #1
 8047616:	d107      	bne.n	8047628 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8047618:	2301      	movs	r3, #1
 804761a:	e038      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
 804761c:	40023800 	.word	0x40023800
 8047620:	40007000 	.word	0x40007000
 8047624:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8047628:	4b1b      	ldr	r3, [pc, #108]	; (8047698 <HAL_RCC_OscConfig+0x4ec>)
 804762a:	685b      	ldr	r3, [r3, #4]
 804762c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804762e:	687b      	ldr	r3, [r7, #4]
 8047630:	699b      	ldr	r3, [r3, #24]
 8047632:	2b01      	cmp	r3, #1
 8047634:	d028      	beq.n	8047688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8047636:	68fb      	ldr	r3, [r7, #12]
 8047638:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 804763c:	687b      	ldr	r3, [r7, #4]
 804763e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8047640:	429a      	cmp	r2, r3
 8047642:	d121      	bne.n	8047688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8047644:	68fb      	ldr	r3, [r7, #12]
 8047646:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 804764a:	687b      	ldr	r3, [r7, #4]
 804764c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804764e:	429a      	cmp	r2, r3
 8047650:	d11a      	bne.n	8047688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8047652:	68fa      	ldr	r2, [r7, #12]
 8047654:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8047658:	4013      	ands	r3, r2
 804765a:	687a      	ldr	r2, [r7, #4]
 804765c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 804765e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8047660:	4293      	cmp	r3, r2
 8047662:	d111      	bne.n	8047688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8047664:	68fb      	ldr	r3, [r7, #12]
 8047666:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 804766a:	687b      	ldr	r3, [r7, #4]
 804766c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804766e:	085b      	lsrs	r3, r3, #1
 8047670:	3b01      	subs	r3, #1
 8047672:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8047674:	429a      	cmp	r2, r3
 8047676:	d107      	bne.n	8047688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8047678:	68fb      	ldr	r3, [r7, #12]
 804767a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 804767e:	687b      	ldr	r3, [r7, #4]
 8047680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8047682:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8047684:	429a      	cmp	r2, r3
 8047686:	d001      	beq.n	804768c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8047688:	2301      	movs	r3, #1
 804768a:	e000      	b.n	804768e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 804768c:	2300      	movs	r3, #0
}
 804768e:	4618      	mov	r0, r3
 8047690:	3718      	adds	r7, #24
 8047692:	46bd      	mov	sp, r7
 8047694:	bd80      	pop	{r7, pc}
 8047696:	bf00      	nop
 8047698:	40023800 	.word	0x40023800

0804769c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 804769c:	b580      	push	{r7, lr}
 804769e:	b084      	sub	sp, #16
 80476a0:	af00      	add	r7, sp, #0
 80476a2:	6078      	str	r0, [r7, #4]
 80476a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80476a6:	687b      	ldr	r3, [r7, #4]
 80476a8:	2b00      	cmp	r3, #0
 80476aa:	d101      	bne.n	80476b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80476ac:	2301      	movs	r3, #1
 80476ae:	e0cc      	b.n	804784a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80476b0:	4b68      	ldr	r3, [pc, #416]	; (8047854 <HAL_RCC_ClockConfig+0x1b8>)
 80476b2:	681b      	ldr	r3, [r3, #0]
 80476b4:	f003 030f 	and.w	r3, r3, #15
 80476b8:	683a      	ldr	r2, [r7, #0]
 80476ba:	429a      	cmp	r2, r3
 80476bc:	d90c      	bls.n	80476d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80476be:	4b65      	ldr	r3, [pc, #404]	; (8047854 <HAL_RCC_ClockConfig+0x1b8>)
 80476c0:	683a      	ldr	r2, [r7, #0]
 80476c2:	b2d2      	uxtb	r2, r2
 80476c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80476c6:	4b63      	ldr	r3, [pc, #396]	; (8047854 <HAL_RCC_ClockConfig+0x1b8>)
 80476c8:	681b      	ldr	r3, [r3, #0]
 80476ca:	f003 030f 	and.w	r3, r3, #15
 80476ce:	683a      	ldr	r2, [r7, #0]
 80476d0:	429a      	cmp	r2, r3
 80476d2:	d001      	beq.n	80476d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80476d4:	2301      	movs	r3, #1
 80476d6:	e0b8      	b.n	804784a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80476d8:	687b      	ldr	r3, [r7, #4]
 80476da:	681b      	ldr	r3, [r3, #0]
 80476dc:	f003 0302 	and.w	r3, r3, #2
 80476e0:	2b00      	cmp	r3, #0
 80476e2:	d020      	beq.n	8047726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80476e4:	687b      	ldr	r3, [r7, #4]
 80476e6:	681b      	ldr	r3, [r3, #0]
 80476e8:	f003 0304 	and.w	r3, r3, #4
 80476ec:	2b00      	cmp	r3, #0
 80476ee:	d005      	beq.n	80476fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80476f0:	4b59      	ldr	r3, [pc, #356]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 80476f2:	689b      	ldr	r3, [r3, #8]
 80476f4:	4a58      	ldr	r2, [pc, #352]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 80476f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80476fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80476fc:	687b      	ldr	r3, [r7, #4]
 80476fe:	681b      	ldr	r3, [r3, #0]
 8047700:	f003 0308 	and.w	r3, r3, #8
 8047704:	2b00      	cmp	r3, #0
 8047706:	d005      	beq.n	8047714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8047708:	4b53      	ldr	r3, [pc, #332]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 804770a:	689b      	ldr	r3, [r3, #8]
 804770c:	4a52      	ldr	r2, [pc, #328]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 804770e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8047712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8047714:	4b50      	ldr	r3, [pc, #320]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 8047716:	689b      	ldr	r3, [r3, #8]
 8047718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 804771c:	687b      	ldr	r3, [r7, #4]
 804771e:	689b      	ldr	r3, [r3, #8]
 8047720:	494d      	ldr	r1, [pc, #308]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 8047722:	4313      	orrs	r3, r2
 8047724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8047726:	687b      	ldr	r3, [r7, #4]
 8047728:	681b      	ldr	r3, [r3, #0]
 804772a:	f003 0301 	and.w	r3, r3, #1
 804772e:	2b00      	cmp	r3, #0
 8047730:	d044      	beq.n	80477bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8047732:	687b      	ldr	r3, [r7, #4]
 8047734:	685b      	ldr	r3, [r3, #4]
 8047736:	2b01      	cmp	r3, #1
 8047738:	d107      	bne.n	804774a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804773a:	4b47      	ldr	r3, [pc, #284]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 804773c:	681b      	ldr	r3, [r3, #0]
 804773e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8047742:	2b00      	cmp	r3, #0
 8047744:	d119      	bne.n	804777a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8047746:	2301      	movs	r3, #1
 8047748:	e07f      	b.n	804784a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 804774a:	687b      	ldr	r3, [r7, #4]
 804774c:	685b      	ldr	r3, [r3, #4]
 804774e:	2b02      	cmp	r3, #2
 8047750:	d003      	beq.n	804775a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8047752:	687b      	ldr	r3, [r7, #4]
 8047754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8047756:	2b03      	cmp	r3, #3
 8047758:	d107      	bne.n	804776a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804775a:	4b3f      	ldr	r3, [pc, #252]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 804775c:	681b      	ldr	r3, [r3, #0]
 804775e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8047762:	2b00      	cmp	r3, #0
 8047764:	d109      	bne.n	804777a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8047766:	2301      	movs	r3, #1
 8047768:	e06f      	b.n	804784a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804776a:	4b3b      	ldr	r3, [pc, #236]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 804776c:	681b      	ldr	r3, [r3, #0]
 804776e:	f003 0302 	and.w	r3, r3, #2
 8047772:	2b00      	cmp	r3, #0
 8047774:	d101      	bne.n	804777a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8047776:	2301      	movs	r3, #1
 8047778:	e067      	b.n	804784a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 804777a:	4b37      	ldr	r3, [pc, #220]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 804777c:	689b      	ldr	r3, [r3, #8]
 804777e:	f023 0203 	bic.w	r2, r3, #3
 8047782:	687b      	ldr	r3, [r7, #4]
 8047784:	685b      	ldr	r3, [r3, #4]
 8047786:	4934      	ldr	r1, [pc, #208]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 8047788:	4313      	orrs	r3, r2
 804778a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 804778c:	f7fb febc 	bl	8043508 <HAL_GetTick>
 8047790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8047792:	e00a      	b.n	80477aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8047794:	f7fb feb8 	bl	8043508 <HAL_GetTick>
 8047798:	4602      	mov	r2, r0
 804779a:	68fb      	ldr	r3, [r7, #12]
 804779c:	1ad3      	subs	r3, r2, r3
 804779e:	f241 3288 	movw	r2, #5000	; 0x1388
 80477a2:	4293      	cmp	r3, r2
 80477a4:	d901      	bls.n	80477aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80477a6:	2303      	movs	r3, #3
 80477a8:	e04f      	b.n	804784a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80477aa:	4b2b      	ldr	r3, [pc, #172]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 80477ac:	689b      	ldr	r3, [r3, #8]
 80477ae:	f003 020c 	and.w	r2, r3, #12
 80477b2:	687b      	ldr	r3, [r7, #4]
 80477b4:	685b      	ldr	r3, [r3, #4]
 80477b6:	009b      	lsls	r3, r3, #2
 80477b8:	429a      	cmp	r2, r3
 80477ba:	d1eb      	bne.n	8047794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80477bc:	4b25      	ldr	r3, [pc, #148]	; (8047854 <HAL_RCC_ClockConfig+0x1b8>)
 80477be:	681b      	ldr	r3, [r3, #0]
 80477c0:	f003 030f 	and.w	r3, r3, #15
 80477c4:	683a      	ldr	r2, [r7, #0]
 80477c6:	429a      	cmp	r2, r3
 80477c8:	d20c      	bcs.n	80477e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80477ca:	4b22      	ldr	r3, [pc, #136]	; (8047854 <HAL_RCC_ClockConfig+0x1b8>)
 80477cc:	683a      	ldr	r2, [r7, #0]
 80477ce:	b2d2      	uxtb	r2, r2
 80477d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80477d2:	4b20      	ldr	r3, [pc, #128]	; (8047854 <HAL_RCC_ClockConfig+0x1b8>)
 80477d4:	681b      	ldr	r3, [r3, #0]
 80477d6:	f003 030f 	and.w	r3, r3, #15
 80477da:	683a      	ldr	r2, [r7, #0]
 80477dc:	429a      	cmp	r2, r3
 80477de:	d001      	beq.n	80477e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80477e0:	2301      	movs	r3, #1
 80477e2:	e032      	b.n	804784a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80477e4:	687b      	ldr	r3, [r7, #4]
 80477e6:	681b      	ldr	r3, [r3, #0]
 80477e8:	f003 0304 	and.w	r3, r3, #4
 80477ec:	2b00      	cmp	r3, #0
 80477ee:	d008      	beq.n	8047802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80477f0:	4b19      	ldr	r3, [pc, #100]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 80477f2:	689b      	ldr	r3, [r3, #8]
 80477f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80477f8:	687b      	ldr	r3, [r7, #4]
 80477fa:	68db      	ldr	r3, [r3, #12]
 80477fc:	4916      	ldr	r1, [pc, #88]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 80477fe:	4313      	orrs	r3, r2
 8047800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8047802:	687b      	ldr	r3, [r7, #4]
 8047804:	681b      	ldr	r3, [r3, #0]
 8047806:	f003 0308 	and.w	r3, r3, #8
 804780a:	2b00      	cmp	r3, #0
 804780c:	d009      	beq.n	8047822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 804780e:	4b12      	ldr	r3, [pc, #72]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 8047810:	689b      	ldr	r3, [r3, #8]
 8047812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8047816:	687b      	ldr	r3, [r7, #4]
 8047818:	691b      	ldr	r3, [r3, #16]
 804781a:	00db      	lsls	r3, r3, #3
 804781c:	490e      	ldr	r1, [pc, #56]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 804781e:	4313      	orrs	r3, r2
 8047820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8047822:	f000 f821 	bl	8047868 <HAL_RCC_GetSysClockFreq>
 8047826:	4602      	mov	r2, r0
 8047828:	4b0b      	ldr	r3, [pc, #44]	; (8047858 <HAL_RCC_ClockConfig+0x1bc>)
 804782a:	689b      	ldr	r3, [r3, #8]
 804782c:	091b      	lsrs	r3, r3, #4
 804782e:	f003 030f 	and.w	r3, r3, #15
 8047832:	490a      	ldr	r1, [pc, #40]	; (804785c <HAL_RCC_ClockConfig+0x1c0>)
 8047834:	5ccb      	ldrb	r3, [r1, r3]
 8047836:	fa22 f303 	lsr.w	r3, r2, r3
 804783a:	4a09      	ldr	r2, [pc, #36]	; (8047860 <HAL_RCC_ClockConfig+0x1c4>)
 804783c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 804783e:	4b09      	ldr	r3, [pc, #36]	; (8047864 <HAL_RCC_ClockConfig+0x1c8>)
 8047840:	681b      	ldr	r3, [r3, #0]
 8047842:	4618      	mov	r0, r3
 8047844:	f7fa fa7c 	bl	8041d40 <HAL_InitTick>

  return HAL_OK;
 8047848:	2300      	movs	r3, #0
}
 804784a:	4618      	mov	r0, r3
 804784c:	3710      	adds	r7, #16
 804784e:	46bd      	mov	sp, r7
 8047850:	bd80      	pop	{r7, pc}
 8047852:	bf00      	nop
 8047854:	40023c00 	.word	0x40023c00
 8047858:	40023800 	.word	0x40023800
 804785c:	0804f0c0 	.word	0x0804f0c0
 8047860:	20000000 	.word	0x20000000
 8047864:	20000054 	.word	0x20000054

08047868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8047868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 804786c:	b094      	sub	sp, #80	; 0x50
 804786e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8047870:	2300      	movs	r3, #0
 8047872:	647b      	str	r3, [r7, #68]	; 0x44
 8047874:	2300      	movs	r3, #0
 8047876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8047878:	2300      	movs	r3, #0
 804787a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 804787c:	2300      	movs	r3, #0
 804787e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8047880:	4b79      	ldr	r3, [pc, #484]	; (8047a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8047882:	689b      	ldr	r3, [r3, #8]
 8047884:	f003 030c 	and.w	r3, r3, #12
 8047888:	2b08      	cmp	r3, #8
 804788a:	d00d      	beq.n	80478a8 <HAL_RCC_GetSysClockFreq+0x40>
 804788c:	2b08      	cmp	r3, #8
 804788e:	f200 80e1 	bhi.w	8047a54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8047892:	2b00      	cmp	r3, #0
 8047894:	d002      	beq.n	804789c <HAL_RCC_GetSysClockFreq+0x34>
 8047896:	2b04      	cmp	r3, #4
 8047898:	d003      	beq.n	80478a2 <HAL_RCC_GetSysClockFreq+0x3a>
 804789a:	e0db      	b.n	8047a54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 804789c:	4b73      	ldr	r3, [pc, #460]	; (8047a6c <HAL_RCC_GetSysClockFreq+0x204>)
 804789e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80478a0:	e0db      	b.n	8047a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80478a2:	4b73      	ldr	r3, [pc, #460]	; (8047a70 <HAL_RCC_GetSysClockFreq+0x208>)
 80478a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80478a6:	e0d8      	b.n	8047a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80478a8:	4b6f      	ldr	r3, [pc, #444]	; (8047a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80478aa:	685b      	ldr	r3, [r3, #4]
 80478ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80478b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80478b2:	4b6d      	ldr	r3, [pc, #436]	; (8047a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80478b4:	685b      	ldr	r3, [r3, #4]
 80478b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80478ba:	2b00      	cmp	r3, #0
 80478bc:	d063      	beq.n	8047986 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80478be:	4b6a      	ldr	r3, [pc, #424]	; (8047a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80478c0:	685b      	ldr	r3, [r3, #4]
 80478c2:	099b      	lsrs	r3, r3, #6
 80478c4:	2200      	movs	r2, #0
 80478c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80478c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80478ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80478cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80478d0:	633b      	str	r3, [r7, #48]	; 0x30
 80478d2:	2300      	movs	r3, #0
 80478d4:	637b      	str	r3, [r7, #52]	; 0x34
 80478d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80478da:	4622      	mov	r2, r4
 80478dc:	462b      	mov	r3, r5
 80478de:	f04f 0000 	mov.w	r0, #0
 80478e2:	f04f 0100 	mov.w	r1, #0
 80478e6:	0159      	lsls	r1, r3, #5
 80478e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80478ec:	0150      	lsls	r0, r2, #5
 80478ee:	4602      	mov	r2, r0
 80478f0:	460b      	mov	r3, r1
 80478f2:	4621      	mov	r1, r4
 80478f4:	1a51      	subs	r1, r2, r1
 80478f6:	6139      	str	r1, [r7, #16]
 80478f8:	4629      	mov	r1, r5
 80478fa:	eb63 0301 	sbc.w	r3, r3, r1
 80478fe:	617b      	str	r3, [r7, #20]
 8047900:	f04f 0200 	mov.w	r2, #0
 8047904:	f04f 0300 	mov.w	r3, #0
 8047908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 804790c:	4659      	mov	r1, fp
 804790e:	018b      	lsls	r3, r1, #6
 8047910:	4651      	mov	r1, sl
 8047912:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8047916:	4651      	mov	r1, sl
 8047918:	018a      	lsls	r2, r1, #6
 804791a:	4651      	mov	r1, sl
 804791c:	ebb2 0801 	subs.w	r8, r2, r1
 8047920:	4659      	mov	r1, fp
 8047922:	eb63 0901 	sbc.w	r9, r3, r1
 8047926:	f04f 0200 	mov.w	r2, #0
 804792a:	f04f 0300 	mov.w	r3, #0
 804792e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8047932:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8047936:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 804793a:	4690      	mov	r8, r2
 804793c:	4699      	mov	r9, r3
 804793e:	4623      	mov	r3, r4
 8047940:	eb18 0303 	adds.w	r3, r8, r3
 8047944:	60bb      	str	r3, [r7, #8]
 8047946:	462b      	mov	r3, r5
 8047948:	eb49 0303 	adc.w	r3, r9, r3
 804794c:	60fb      	str	r3, [r7, #12]
 804794e:	f04f 0200 	mov.w	r2, #0
 8047952:	f04f 0300 	mov.w	r3, #0
 8047956:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 804795a:	4629      	mov	r1, r5
 804795c:	024b      	lsls	r3, r1, #9
 804795e:	4621      	mov	r1, r4
 8047960:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8047964:	4621      	mov	r1, r4
 8047966:	024a      	lsls	r2, r1, #9
 8047968:	4610      	mov	r0, r2
 804796a:	4619      	mov	r1, r3
 804796c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804796e:	2200      	movs	r2, #0
 8047970:	62bb      	str	r3, [r7, #40]	; 0x28
 8047972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8047974:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8047978:	f7f8 fc8a 	bl	8040290 <__aeabi_uldivmod>
 804797c:	4602      	mov	r2, r0
 804797e:	460b      	mov	r3, r1
 8047980:	4613      	mov	r3, r2
 8047982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8047984:	e058      	b.n	8047a38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8047986:	4b38      	ldr	r3, [pc, #224]	; (8047a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8047988:	685b      	ldr	r3, [r3, #4]
 804798a:	099b      	lsrs	r3, r3, #6
 804798c:	2200      	movs	r2, #0
 804798e:	4618      	mov	r0, r3
 8047990:	4611      	mov	r1, r2
 8047992:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8047996:	623b      	str	r3, [r7, #32]
 8047998:	2300      	movs	r3, #0
 804799a:	627b      	str	r3, [r7, #36]	; 0x24
 804799c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80479a0:	4642      	mov	r2, r8
 80479a2:	464b      	mov	r3, r9
 80479a4:	f04f 0000 	mov.w	r0, #0
 80479a8:	f04f 0100 	mov.w	r1, #0
 80479ac:	0159      	lsls	r1, r3, #5
 80479ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80479b2:	0150      	lsls	r0, r2, #5
 80479b4:	4602      	mov	r2, r0
 80479b6:	460b      	mov	r3, r1
 80479b8:	4641      	mov	r1, r8
 80479ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80479be:	4649      	mov	r1, r9
 80479c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80479c4:	f04f 0200 	mov.w	r2, #0
 80479c8:	f04f 0300 	mov.w	r3, #0
 80479cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80479d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80479d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80479d8:	ebb2 040a 	subs.w	r4, r2, sl
 80479dc:	eb63 050b 	sbc.w	r5, r3, fp
 80479e0:	f04f 0200 	mov.w	r2, #0
 80479e4:	f04f 0300 	mov.w	r3, #0
 80479e8:	00eb      	lsls	r3, r5, #3
 80479ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80479ee:	00e2      	lsls	r2, r4, #3
 80479f0:	4614      	mov	r4, r2
 80479f2:	461d      	mov	r5, r3
 80479f4:	4643      	mov	r3, r8
 80479f6:	18e3      	adds	r3, r4, r3
 80479f8:	603b      	str	r3, [r7, #0]
 80479fa:	464b      	mov	r3, r9
 80479fc:	eb45 0303 	adc.w	r3, r5, r3
 8047a00:	607b      	str	r3, [r7, #4]
 8047a02:	f04f 0200 	mov.w	r2, #0
 8047a06:	f04f 0300 	mov.w	r3, #0
 8047a0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8047a0e:	4629      	mov	r1, r5
 8047a10:	028b      	lsls	r3, r1, #10
 8047a12:	4621      	mov	r1, r4
 8047a14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8047a18:	4621      	mov	r1, r4
 8047a1a:	028a      	lsls	r2, r1, #10
 8047a1c:	4610      	mov	r0, r2
 8047a1e:	4619      	mov	r1, r3
 8047a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8047a22:	2200      	movs	r2, #0
 8047a24:	61bb      	str	r3, [r7, #24]
 8047a26:	61fa      	str	r2, [r7, #28]
 8047a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8047a2c:	f7f8 fc30 	bl	8040290 <__aeabi_uldivmod>
 8047a30:	4602      	mov	r2, r0
 8047a32:	460b      	mov	r3, r1
 8047a34:	4613      	mov	r3, r2
 8047a36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8047a38:	4b0b      	ldr	r3, [pc, #44]	; (8047a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8047a3a:	685b      	ldr	r3, [r3, #4]
 8047a3c:	0c1b      	lsrs	r3, r3, #16
 8047a3e:	f003 0303 	and.w	r3, r3, #3
 8047a42:	3301      	adds	r3, #1
 8047a44:	005b      	lsls	r3, r3, #1
 8047a46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8047a48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8047a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8047a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8047a50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8047a52:	e002      	b.n	8047a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8047a54:	4b05      	ldr	r3, [pc, #20]	; (8047a6c <HAL_RCC_GetSysClockFreq+0x204>)
 8047a56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8047a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8047a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8047a5c:	4618      	mov	r0, r3
 8047a5e:	3750      	adds	r7, #80	; 0x50
 8047a60:	46bd      	mov	sp, r7
 8047a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8047a66:	bf00      	nop
 8047a68:	40023800 	.word	0x40023800
 8047a6c:	00f42400 	.word	0x00f42400
 8047a70:	007a1200 	.word	0x007a1200

08047a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8047a74:	b480      	push	{r7}
 8047a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8047a78:	4b03      	ldr	r3, [pc, #12]	; (8047a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8047a7a:	681b      	ldr	r3, [r3, #0]
}
 8047a7c:	4618      	mov	r0, r3
 8047a7e:	46bd      	mov	sp, r7
 8047a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047a84:	4770      	bx	lr
 8047a86:	bf00      	nop
 8047a88:	20000000 	.word	0x20000000

08047a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8047a8c:	b580      	push	{r7, lr}
 8047a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8047a90:	f7ff fff0 	bl	8047a74 <HAL_RCC_GetHCLKFreq>
 8047a94:	4602      	mov	r2, r0
 8047a96:	4b05      	ldr	r3, [pc, #20]	; (8047aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8047a98:	689b      	ldr	r3, [r3, #8]
 8047a9a:	0a9b      	lsrs	r3, r3, #10
 8047a9c:	f003 0307 	and.w	r3, r3, #7
 8047aa0:	4903      	ldr	r1, [pc, #12]	; (8047ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8047aa2:	5ccb      	ldrb	r3, [r1, r3]
 8047aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8047aa8:	4618      	mov	r0, r3
 8047aaa:	bd80      	pop	{r7, pc}
 8047aac:	40023800 	.word	0x40023800
 8047ab0:	0804f0d0 	.word	0x0804f0d0

08047ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8047ab4:	b580      	push	{r7, lr}
 8047ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8047ab8:	f7ff ffdc 	bl	8047a74 <HAL_RCC_GetHCLKFreq>
 8047abc:	4602      	mov	r2, r0
 8047abe:	4b05      	ldr	r3, [pc, #20]	; (8047ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8047ac0:	689b      	ldr	r3, [r3, #8]
 8047ac2:	0b5b      	lsrs	r3, r3, #13
 8047ac4:	f003 0307 	and.w	r3, r3, #7
 8047ac8:	4903      	ldr	r1, [pc, #12]	; (8047ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8047aca:	5ccb      	ldrb	r3, [r1, r3]
 8047acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8047ad0:	4618      	mov	r0, r3
 8047ad2:	bd80      	pop	{r7, pc}
 8047ad4:	40023800 	.word	0x40023800
 8047ad8:	0804f0d0 	.word	0x0804f0d0

08047adc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8047adc:	b480      	push	{r7}
 8047ade:	b083      	sub	sp, #12
 8047ae0:	af00      	add	r7, sp, #0
 8047ae2:	6078      	str	r0, [r7, #4]
 8047ae4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8047ae6:	687b      	ldr	r3, [r7, #4]
 8047ae8:	220f      	movs	r2, #15
 8047aea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8047aec:	4b12      	ldr	r3, [pc, #72]	; (8047b38 <HAL_RCC_GetClockConfig+0x5c>)
 8047aee:	689b      	ldr	r3, [r3, #8]
 8047af0:	f003 0203 	and.w	r2, r3, #3
 8047af4:	687b      	ldr	r3, [r7, #4]
 8047af6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8047af8:	4b0f      	ldr	r3, [pc, #60]	; (8047b38 <HAL_RCC_GetClockConfig+0x5c>)
 8047afa:	689b      	ldr	r3, [r3, #8]
 8047afc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8047b00:	687b      	ldr	r3, [r7, #4]
 8047b02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8047b04:	4b0c      	ldr	r3, [pc, #48]	; (8047b38 <HAL_RCC_GetClockConfig+0x5c>)
 8047b06:	689b      	ldr	r3, [r3, #8]
 8047b08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8047b0c:	687b      	ldr	r3, [r7, #4]
 8047b0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8047b10:	4b09      	ldr	r3, [pc, #36]	; (8047b38 <HAL_RCC_GetClockConfig+0x5c>)
 8047b12:	689b      	ldr	r3, [r3, #8]
 8047b14:	08db      	lsrs	r3, r3, #3
 8047b16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8047b1a:	687b      	ldr	r3, [r7, #4]
 8047b1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8047b1e:	4b07      	ldr	r3, [pc, #28]	; (8047b3c <HAL_RCC_GetClockConfig+0x60>)
 8047b20:	681b      	ldr	r3, [r3, #0]
 8047b22:	f003 020f 	and.w	r2, r3, #15
 8047b26:	683b      	ldr	r3, [r7, #0]
 8047b28:	601a      	str	r2, [r3, #0]
}
 8047b2a:	bf00      	nop
 8047b2c:	370c      	adds	r7, #12
 8047b2e:	46bd      	mov	sp, r7
 8047b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047b34:	4770      	bx	lr
 8047b36:	bf00      	nop
 8047b38:	40023800 	.word	0x40023800
 8047b3c:	40023c00 	.word	0x40023c00

08047b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8047b40:	b580      	push	{r7, lr}
 8047b42:	b086      	sub	sp, #24
 8047b44:	af00      	add	r7, sp, #0
 8047b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8047b48:	2300      	movs	r3, #0
 8047b4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8047b4c:	2300      	movs	r3, #0
 8047b4e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8047b50:	687b      	ldr	r3, [r7, #4]
 8047b52:	681b      	ldr	r3, [r3, #0]
 8047b54:	f003 0301 	and.w	r3, r3, #1
 8047b58:	2b00      	cmp	r3, #0
 8047b5a:	d10b      	bne.n	8047b74 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8047b5c:	687b      	ldr	r3, [r7, #4]
 8047b5e:	681b      	ldr	r3, [r3, #0]
 8047b60:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8047b64:	2b00      	cmp	r3, #0
 8047b66:	d105      	bne.n	8047b74 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8047b68:	687b      	ldr	r3, [r7, #4]
 8047b6a:	681b      	ldr	r3, [r3, #0]
 8047b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8047b70:	2b00      	cmp	r3, #0
 8047b72:	d075      	beq.n	8047c60 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8047b74:	4b91      	ldr	r3, [pc, #580]	; (8047dbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8047b76:	2200      	movs	r2, #0
 8047b78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8047b7a:	f7fb fcc5 	bl	8043508 <HAL_GetTick>
 8047b7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8047b80:	e008      	b.n	8047b94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8047b82:	f7fb fcc1 	bl	8043508 <HAL_GetTick>
 8047b86:	4602      	mov	r2, r0
 8047b88:	697b      	ldr	r3, [r7, #20]
 8047b8a:	1ad3      	subs	r3, r2, r3
 8047b8c:	2b02      	cmp	r3, #2
 8047b8e:	d901      	bls.n	8047b94 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8047b90:	2303      	movs	r3, #3
 8047b92:	e189      	b.n	8047ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8047b94:	4b8a      	ldr	r3, [pc, #552]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047b96:	681b      	ldr	r3, [r3, #0]
 8047b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8047b9c:	2b00      	cmp	r3, #0
 8047b9e:	d1f0      	bne.n	8047b82 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8047ba0:	687b      	ldr	r3, [r7, #4]
 8047ba2:	681b      	ldr	r3, [r3, #0]
 8047ba4:	f003 0301 	and.w	r3, r3, #1
 8047ba8:	2b00      	cmp	r3, #0
 8047baa:	d009      	beq.n	8047bc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8047bac:	687b      	ldr	r3, [r7, #4]
 8047bae:	685b      	ldr	r3, [r3, #4]
 8047bb0:	019a      	lsls	r2, r3, #6
 8047bb2:	687b      	ldr	r3, [r7, #4]
 8047bb4:	689b      	ldr	r3, [r3, #8]
 8047bb6:	071b      	lsls	r3, r3, #28
 8047bb8:	4981      	ldr	r1, [pc, #516]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047bba:	4313      	orrs	r3, r2
 8047bbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8047bc0:	687b      	ldr	r3, [r7, #4]
 8047bc2:	681b      	ldr	r3, [r3, #0]
 8047bc4:	f003 0302 	and.w	r3, r3, #2
 8047bc8:	2b00      	cmp	r3, #0
 8047bca:	d01f      	beq.n	8047c0c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8047bcc:	4b7c      	ldr	r3, [pc, #496]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8047bd2:	0f1b      	lsrs	r3, r3, #28
 8047bd4:	f003 0307 	and.w	r3, r3, #7
 8047bd8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8047bda:	687b      	ldr	r3, [r7, #4]
 8047bdc:	685b      	ldr	r3, [r3, #4]
 8047bde:	019a      	lsls	r2, r3, #6
 8047be0:	687b      	ldr	r3, [r7, #4]
 8047be2:	68db      	ldr	r3, [r3, #12]
 8047be4:	061b      	lsls	r3, r3, #24
 8047be6:	431a      	orrs	r2, r3
 8047be8:	693b      	ldr	r3, [r7, #16]
 8047bea:	071b      	lsls	r3, r3, #28
 8047bec:	4974      	ldr	r1, [pc, #464]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047bee:	4313      	orrs	r3, r2
 8047bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8047bf4:	4b72      	ldr	r3, [pc, #456]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8047bfa:	f023 021f 	bic.w	r2, r3, #31
 8047bfe:	687b      	ldr	r3, [r7, #4]
 8047c00:	69db      	ldr	r3, [r3, #28]
 8047c02:	3b01      	subs	r3, #1
 8047c04:	496e      	ldr	r1, [pc, #440]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047c06:	4313      	orrs	r3, r2
 8047c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8047c0c:	687b      	ldr	r3, [r7, #4]
 8047c0e:	681b      	ldr	r3, [r3, #0]
 8047c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047c14:	2b00      	cmp	r3, #0
 8047c16:	d00d      	beq.n	8047c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8047c18:	687b      	ldr	r3, [r7, #4]
 8047c1a:	685b      	ldr	r3, [r3, #4]
 8047c1c:	019a      	lsls	r2, r3, #6
 8047c1e:	687b      	ldr	r3, [r7, #4]
 8047c20:	68db      	ldr	r3, [r3, #12]
 8047c22:	061b      	lsls	r3, r3, #24
 8047c24:	431a      	orrs	r2, r3
 8047c26:	687b      	ldr	r3, [r7, #4]
 8047c28:	689b      	ldr	r3, [r3, #8]
 8047c2a:	071b      	lsls	r3, r3, #28
 8047c2c:	4964      	ldr	r1, [pc, #400]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047c2e:	4313      	orrs	r3, r2
 8047c30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8047c34:	4b61      	ldr	r3, [pc, #388]	; (8047dbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8047c36:	2201      	movs	r2, #1
 8047c38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8047c3a:	f7fb fc65 	bl	8043508 <HAL_GetTick>
 8047c3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8047c40:	e008      	b.n	8047c54 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8047c42:	f7fb fc61 	bl	8043508 <HAL_GetTick>
 8047c46:	4602      	mov	r2, r0
 8047c48:	697b      	ldr	r3, [r7, #20]
 8047c4a:	1ad3      	subs	r3, r2, r3
 8047c4c:	2b02      	cmp	r3, #2
 8047c4e:	d901      	bls.n	8047c54 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8047c50:	2303      	movs	r3, #3
 8047c52:	e129      	b.n	8047ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8047c54:	4b5a      	ldr	r3, [pc, #360]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047c56:	681b      	ldr	r3, [r3, #0]
 8047c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8047c5c:	2b00      	cmp	r3, #0
 8047c5e:	d0f0      	beq.n	8047c42 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8047c60:	687b      	ldr	r3, [r7, #4]
 8047c62:	681b      	ldr	r3, [r3, #0]
 8047c64:	f003 0304 	and.w	r3, r3, #4
 8047c68:	2b00      	cmp	r3, #0
 8047c6a:	d105      	bne.n	8047c78 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8047c6c:	687b      	ldr	r3, [r7, #4]
 8047c6e:	681b      	ldr	r3, [r3, #0]
 8047c70:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8047c74:	2b00      	cmp	r3, #0
 8047c76:	d079      	beq.n	8047d6c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8047c78:	4b52      	ldr	r3, [pc, #328]	; (8047dc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8047c7a:	2200      	movs	r2, #0
 8047c7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8047c7e:	f7fb fc43 	bl	8043508 <HAL_GetTick>
 8047c82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8047c84:	e008      	b.n	8047c98 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8047c86:	f7fb fc3f 	bl	8043508 <HAL_GetTick>
 8047c8a:	4602      	mov	r2, r0
 8047c8c:	697b      	ldr	r3, [r7, #20]
 8047c8e:	1ad3      	subs	r3, r2, r3
 8047c90:	2b02      	cmp	r3, #2
 8047c92:	d901      	bls.n	8047c98 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8047c94:	2303      	movs	r3, #3
 8047c96:	e107      	b.n	8047ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8047c98:	4b49      	ldr	r3, [pc, #292]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047c9a:	681b      	ldr	r3, [r3, #0]
 8047c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8047ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8047ca4:	d0ef      	beq.n	8047c86 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8047ca6:	687b      	ldr	r3, [r7, #4]
 8047ca8:	681b      	ldr	r3, [r3, #0]
 8047caa:	f003 0304 	and.w	r3, r3, #4
 8047cae:	2b00      	cmp	r3, #0
 8047cb0:	d020      	beq.n	8047cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8047cb2:	4b43      	ldr	r3, [pc, #268]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8047cb8:	0f1b      	lsrs	r3, r3, #28
 8047cba:	f003 0307 	and.w	r3, r3, #7
 8047cbe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8047cc0:	687b      	ldr	r3, [r7, #4]
 8047cc2:	691b      	ldr	r3, [r3, #16]
 8047cc4:	019a      	lsls	r2, r3, #6
 8047cc6:	687b      	ldr	r3, [r7, #4]
 8047cc8:	695b      	ldr	r3, [r3, #20]
 8047cca:	061b      	lsls	r3, r3, #24
 8047ccc:	431a      	orrs	r2, r3
 8047cce:	693b      	ldr	r3, [r7, #16]
 8047cd0:	071b      	lsls	r3, r3, #28
 8047cd2:	493b      	ldr	r1, [pc, #236]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047cd4:	4313      	orrs	r3, r2
 8047cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8047cda:	4b39      	ldr	r3, [pc, #228]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8047ce0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8047ce4:	687b      	ldr	r3, [r7, #4]
 8047ce6:	6a1b      	ldr	r3, [r3, #32]
 8047ce8:	3b01      	subs	r3, #1
 8047cea:	021b      	lsls	r3, r3, #8
 8047cec:	4934      	ldr	r1, [pc, #208]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047cee:	4313      	orrs	r3, r2
 8047cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8047cf4:	687b      	ldr	r3, [r7, #4]
 8047cf6:	681b      	ldr	r3, [r3, #0]
 8047cf8:	f003 0308 	and.w	r3, r3, #8
 8047cfc:	2b00      	cmp	r3, #0
 8047cfe:	d01e      	beq.n	8047d3e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8047d00:	4b2f      	ldr	r3, [pc, #188]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8047d06:	0e1b      	lsrs	r3, r3, #24
 8047d08:	f003 030f 	and.w	r3, r3, #15
 8047d0c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8047d0e:	687b      	ldr	r3, [r7, #4]
 8047d10:	691b      	ldr	r3, [r3, #16]
 8047d12:	019a      	lsls	r2, r3, #6
 8047d14:	693b      	ldr	r3, [r7, #16]
 8047d16:	061b      	lsls	r3, r3, #24
 8047d18:	431a      	orrs	r2, r3
 8047d1a:	687b      	ldr	r3, [r7, #4]
 8047d1c:	699b      	ldr	r3, [r3, #24]
 8047d1e:	071b      	lsls	r3, r3, #28
 8047d20:	4927      	ldr	r1, [pc, #156]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047d22:	4313      	orrs	r3, r2
 8047d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8047d28:	4b25      	ldr	r3, [pc, #148]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8047d2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8047d32:	687b      	ldr	r3, [r7, #4]
 8047d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8047d36:	4922      	ldr	r1, [pc, #136]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047d38:	4313      	orrs	r3, r2
 8047d3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8047d3e:	4b21      	ldr	r3, [pc, #132]	; (8047dc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8047d40:	2201      	movs	r2, #1
 8047d42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8047d44:	f7fb fbe0 	bl	8043508 <HAL_GetTick>
 8047d48:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8047d4a:	e008      	b.n	8047d5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8047d4c:	f7fb fbdc 	bl	8043508 <HAL_GetTick>
 8047d50:	4602      	mov	r2, r0
 8047d52:	697b      	ldr	r3, [r7, #20]
 8047d54:	1ad3      	subs	r3, r2, r3
 8047d56:	2b02      	cmp	r3, #2
 8047d58:	d901      	bls.n	8047d5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8047d5a:	2303      	movs	r3, #3
 8047d5c:	e0a4      	b.n	8047ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8047d5e:	4b18      	ldr	r3, [pc, #96]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047d60:	681b      	ldr	r3, [r3, #0]
 8047d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8047d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8047d6a:	d1ef      	bne.n	8047d4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8047d6c:	687b      	ldr	r3, [r7, #4]
 8047d6e:	681b      	ldr	r3, [r3, #0]
 8047d70:	f003 0320 	and.w	r3, r3, #32
 8047d74:	2b00      	cmp	r3, #0
 8047d76:	f000 808b 	beq.w	8047e90 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8047d7a:	2300      	movs	r3, #0
 8047d7c:	60fb      	str	r3, [r7, #12]
 8047d7e:	4b10      	ldr	r3, [pc, #64]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8047d82:	4a0f      	ldr	r2, [pc, #60]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8047d88:	6413      	str	r3, [r2, #64]	; 0x40
 8047d8a:	4b0d      	ldr	r3, [pc, #52]	; (8047dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8047d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8047d92:	60fb      	str	r3, [r7, #12]
 8047d94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8047d96:	4b0c      	ldr	r3, [pc, #48]	; (8047dc8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8047d98:	681b      	ldr	r3, [r3, #0]
 8047d9a:	4a0b      	ldr	r2, [pc, #44]	; (8047dc8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8047d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8047da0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8047da2:	f7fb fbb1 	bl	8043508 <HAL_GetTick>
 8047da6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8047da8:	e010      	b.n	8047dcc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8047daa:	f7fb fbad 	bl	8043508 <HAL_GetTick>
 8047dae:	4602      	mov	r2, r0
 8047db0:	697b      	ldr	r3, [r7, #20]
 8047db2:	1ad3      	subs	r3, r2, r3
 8047db4:	2b02      	cmp	r3, #2
 8047db6:	d909      	bls.n	8047dcc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8047db8:	2303      	movs	r3, #3
 8047dba:	e075      	b.n	8047ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8047dbc:	42470068 	.word	0x42470068
 8047dc0:	40023800 	.word	0x40023800
 8047dc4:	42470070 	.word	0x42470070
 8047dc8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8047dcc:	4b38      	ldr	r3, [pc, #224]	; (8047eb0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8047dce:	681b      	ldr	r3, [r3, #0]
 8047dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8047dd4:	2b00      	cmp	r3, #0
 8047dd6:	d0e8      	beq.n	8047daa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8047dd8:	4b36      	ldr	r3, [pc, #216]	; (8047eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8047ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8047de0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8047de2:	693b      	ldr	r3, [r7, #16]
 8047de4:	2b00      	cmp	r3, #0
 8047de6:	d02f      	beq.n	8047e48 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8047de8:	687b      	ldr	r3, [r7, #4]
 8047dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8047df0:	693a      	ldr	r2, [r7, #16]
 8047df2:	429a      	cmp	r2, r3
 8047df4:	d028      	beq.n	8047e48 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8047df6:	4b2f      	ldr	r3, [pc, #188]	; (8047eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8047dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8047dfe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8047e00:	4b2d      	ldr	r3, [pc, #180]	; (8047eb8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8047e02:	2201      	movs	r2, #1
 8047e04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8047e06:	4b2c      	ldr	r3, [pc, #176]	; (8047eb8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8047e08:	2200      	movs	r2, #0
 8047e0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8047e0c:	4a29      	ldr	r2, [pc, #164]	; (8047eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047e0e:	693b      	ldr	r3, [r7, #16]
 8047e10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8047e12:	4b28      	ldr	r3, [pc, #160]	; (8047eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8047e16:	f003 0301 	and.w	r3, r3, #1
 8047e1a:	2b01      	cmp	r3, #1
 8047e1c:	d114      	bne.n	8047e48 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8047e1e:	f7fb fb73 	bl	8043508 <HAL_GetTick>
 8047e22:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8047e24:	e00a      	b.n	8047e3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8047e26:	f7fb fb6f 	bl	8043508 <HAL_GetTick>
 8047e2a:	4602      	mov	r2, r0
 8047e2c:	697b      	ldr	r3, [r7, #20]
 8047e2e:	1ad3      	subs	r3, r2, r3
 8047e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8047e34:	4293      	cmp	r3, r2
 8047e36:	d901      	bls.n	8047e3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8047e38:	2303      	movs	r3, #3
 8047e3a:	e035      	b.n	8047ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8047e3c:	4b1d      	ldr	r3, [pc, #116]	; (8047eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8047e40:	f003 0302 	and.w	r3, r3, #2
 8047e44:	2b00      	cmp	r3, #0
 8047e46:	d0ee      	beq.n	8047e26 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8047e48:	687b      	ldr	r3, [r7, #4]
 8047e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8047e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8047e54:	d10d      	bne.n	8047e72 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8047e56:	4b17      	ldr	r3, [pc, #92]	; (8047eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047e58:	689b      	ldr	r3, [r3, #8]
 8047e5a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8047e5e:	687b      	ldr	r3, [r7, #4]
 8047e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047e62:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8047e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8047e6a:	4912      	ldr	r1, [pc, #72]	; (8047eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047e6c:	4313      	orrs	r3, r2
 8047e6e:	608b      	str	r3, [r1, #8]
 8047e70:	e005      	b.n	8047e7e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8047e72:	4b10      	ldr	r3, [pc, #64]	; (8047eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047e74:	689b      	ldr	r3, [r3, #8]
 8047e76:	4a0f      	ldr	r2, [pc, #60]	; (8047eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047e78:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8047e7c:	6093      	str	r3, [r2, #8]
 8047e7e:	4b0d      	ldr	r3, [pc, #52]	; (8047eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047e80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8047e82:	687b      	ldr	r3, [r7, #4]
 8047e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8047e8a:	490a      	ldr	r1, [pc, #40]	; (8047eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047e8c:	4313      	orrs	r3, r2
 8047e8e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8047e90:	687b      	ldr	r3, [r7, #4]
 8047e92:	681b      	ldr	r3, [r3, #0]
 8047e94:	f003 0310 	and.w	r3, r3, #16
 8047e98:	2b00      	cmp	r3, #0
 8047e9a:	d004      	beq.n	8047ea6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8047e9c:	687b      	ldr	r3, [r7, #4]
 8047e9e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8047ea2:	4b06      	ldr	r3, [pc, #24]	; (8047ebc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8047ea4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8047ea6:	2300      	movs	r3, #0
}
 8047ea8:	4618      	mov	r0, r3
 8047eaa:	3718      	adds	r7, #24
 8047eac:	46bd      	mov	sp, r7
 8047eae:	bd80      	pop	{r7, pc}
 8047eb0:	40007000 	.word	0x40007000
 8047eb4:	40023800 	.word	0x40023800
 8047eb8:	42470e40 	.word	0x42470e40
 8047ebc:	424711e0 	.word	0x424711e0

08047ec0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8047ec0:	b580      	push	{r7, lr}
 8047ec2:	b082      	sub	sp, #8
 8047ec4:	af00      	add	r7, sp, #0
 8047ec6:	6078      	str	r0, [r7, #4]
 8047ec8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8047eca:	687b      	ldr	r3, [r7, #4]
 8047ecc:	2b00      	cmp	r3, #0
 8047ece:	d101      	bne.n	8047ed4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8047ed0:	2301      	movs	r3, #1
 8047ed2:	e025      	b.n	8047f20 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8047ed4:	687b      	ldr	r3, [r7, #4]
 8047ed6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8047eda:	b2db      	uxtb	r3, r3
 8047edc:	2b00      	cmp	r3, #0
 8047ede:	d106      	bne.n	8047eee <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8047ee0:	687b      	ldr	r3, [r7, #4]
 8047ee2:	2200      	movs	r2, #0
 8047ee4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8047ee8:	6878      	ldr	r0, [r7, #4]
 8047eea:	f7f9 ff1f 	bl	8041d2c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8047eee:	687b      	ldr	r3, [r7, #4]
 8047ef0:	2202      	movs	r2, #2
 8047ef2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8047ef6:	687b      	ldr	r3, [r7, #4]
 8047ef8:	681a      	ldr	r2, [r3, #0]
 8047efa:	687b      	ldr	r3, [r7, #4]
 8047efc:	3304      	adds	r3, #4
 8047efe:	4619      	mov	r1, r3
 8047f00:	4610      	mov	r0, r2
 8047f02:	f001 ff33 	bl	8049d6c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8047f06:	687b      	ldr	r3, [r7, #4]
 8047f08:	6818      	ldr	r0, [r3, #0]
 8047f0a:	687b      	ldr	r3, [r7, #4]
 8047f0c:	685b      	ldr	r3, [r3, #4]
 8047f0e:	461a      	mov	r2, r3
 8047f10:	6839      	ldr	r1, [r7, #0]
 8047f12:	f001 ff88 	bl	8049e26 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8047f16:	687b      	ldr	r3, [r7, #4]
 8047f18:	2201      	movs	r2, #1
 8047f1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8047f1e:	2300      	movs	r3, #0
}
 8047f20:	4618      	mov	r0, r3
 8047f22:	3708      	adds	r7, #8
 8047f24:	46bd      	mov	sp, r7
 8047f26:	bd80      	pop	{r7, pc}

08047f28 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8047f28:	b580      	push	{r7, lr}
 8047f2a:	b086      	sub	sp, #24
 8047f2c:	af00      	add	r7, sp, #0
 8047f2e:	60f8      	str	r0, [r7, #12]
 8047f30:	60b9      	str	r1, [r7, #8]
 8047f32:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8047f34:	68fb      	ldr	r3, [r7, #12]
 8047f36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8047f3a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8047f3c:	7dfb      	ldrb	r3, [r7, #23]
 8047f3e:	2b02      	cmp	r3, #2
 8047f40:	d101      	bne.n	8047f46 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8047f42:	2302      	movs	r3, #2
 8047f44:	e021      	b.n	8047f8a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8047f46:	7dfb      	ldrb	r3, [r7, #23]
 8047f48:	2b01      	cmp	r3, #1
 8047f4a:	d002      	beq.n	8047f52 <HAL_SDRAM_SendCommand+0x2a>
 8047f4c:	7dfb      	ldrb	r3, [r7, #23]
 8047f4e:	2b05      	cmp	r3, #5
 8047f50:	d118      	bne.n	8047f84 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8047f52:	68fb      	ldr	r3, [r7, #12]
 8047f54:	2202      	movs	r2, #2
 8047f56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8047f5a:	68fb      	ldr	r3, [r7, #12]
 8047f5c:	681b      	ldr	r3, [r3, #0]
 8047f5e:	687a      	ldr	r2, [r7, #4]
 8047f60:	68b9      	ldr	r1, [r7, #8]
 8047f62:	4618      	mov	r0, r3
 8047f64:	f001 ffc8 	bl	8049ef8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8047f68:	68bb      	ldr	r3, [r7, #8]
 8047f6a:	681b      	ldr	r3, [r3, #0]
 8047f6c:	2b02      	cmp	r3, #2
 8047f6e:	d104      	bne.n	8047f7a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8047f70:	68fb      	ldr	r3, [r7, #12]
 8047f72:	2205      	movs	r2, #5
 8047f74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8047f78:	e006      	b.n	8047f88 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8047f7a:	68fb      	ldr	r3, [r7, #12]
 8047f7c:	2201      	movs	r2, #1
 8047f7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8047f82:	e001      	b.n	8047f88 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8047f84:	2301      	movs	r3, #1
 8047f86:	e000      	b.n	8047f8a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8047f88:	2300      	movs	r3, #0
}
 8047f8a:	4618      	mov	r0, r3
 8047f8c:	3718      	adds	r7, #24
 8047f8e:	46bd      	mov	sp, r7
 8047f90:	bd80      	pop	{r7, pc}

08047f92 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8047f92:	b580      	push	{r7, lr}
 8047f94:	b082      	sub	sp, #8
 8047f96:	af00      	add	r7, sp, #0
 8047f98:	6078      	str	r0, [r7, #4]
 8047f9a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8047f9c:	687b      	ldr	r3, [r7, #4]
 8047f9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8047fa2:	b2db      	uxtb	r3, r3
 8047fa4:	2b02      	cmp	r3, #2
 8047fa6:	d101      	bne.n	8047fac <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8047fa8:	2302      	movs	r3, #2
 8047faa:	e016      	b.n	8047fda <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8047fac:	687b      	ldr	r3, [r7, #4]
 8047fae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8047fb2:	b2db      	uxtb	r3, r3
 8047fb4:	2b01      	cmp	r3, #1
 8047fb6:	d10f      	bne.n	8047fd8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8047fb8:	687b      	ldr	r3, [r7, #4]
 8047fba:	2202      	movs	r2, #2
 8047fbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8047fc0:	687b      	ldr	r3, [r7, #4]
 8047fc2:	681b      	ldr	r3, [r3, #0]
 8047fc4:	6839      	ldr	r1, [r7, #0]
 8047fc6:	4618      	mov	r0, r3
 8047fc8:	f001 ffd3 	bl	8049f72 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8047fcc:	687b      	ldr	r3, [r7, #4]
 8047fce:	2201      	movs	r2, #1
 8047fd0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8047fd4:	2300      	movs	r3, #0
 8047fd6:	e000      	b.n	8047fda <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8047fd8:	2301      	movs	r3, #1
}
 8047fda:	4618      	mov	r0, r3
 8047fdc:	3708      	adds	r7, #8
 8047fde:	46bd      	mov	sp, r7
 8047fe0:	bd80      	pop	{r7, pc}

08047fe2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8047fe2:	b580      	push	{r7, lr}
 8047fe4:	b082      	sub	sp, #8
 8047fe6:	af00      	add	r7, sp, #0
 8047fe8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8047fea:	687b      	ldr	r3, [r7, #4]
 8047fec:	2b00      	cmp	r3, #0
 8047fee:	d101      	bne.n	8047ff4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8047ff0:	2301      	movs	r3, #1
 8047ff2:	e07b      	b.n	80480ec <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8047ff4:	687b      	ldr	r3, [r7, #4]
 8047ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8047ff8:	2b00      	cmp	r3, #0
 8047ffa:	d108      	bne.n	804800e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8047ffc:	687b      	ldr	r3, [r7, #4]
 8047ffe:	685b      	ldr	r3, [r3, #4]
 8048000:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8048004:	d009      	beq.n	804801a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8048006:	687b      	ldr	r3, [r7, #4]
 8048008:	2200      	movs	r2, #0
 804800a:	61da      	str	r2, [r3, #28]
 804800c:	e005      	b.n	804801a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 804800e:	687b      	ldr	r3, [r7, #4]
 8048010:	2200      	movs	r2, #0
 8048012:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8048014:	687b      	ldr	r3, [r7, #4]
 8048016:	2200      	movs	r2, #0
 8048018:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804801a:	687b      	ldr	r3, [r7, #4]
 804801c:	2200      	movs	r2, #0
 804801e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8048020:	687b      	ldr	r3, [r7, #4]
 8048022:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8048026:	b2db      	uxtb	r3, r3
 8048028:	2b00      	cmp	r3, #0
 804802a:	d106      	bne.n	804803a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 804802c:	687b      	ldr	r3, [r7, #4]
 804802e:	2200      	movs	r2, #0
 8048030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8048034:	6878      	ldr	r0, [r7, #4]
 8048036:	f7f9 fcbf 	bl	80419b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 804803a:	687b      	ldr	r3, [r7, #4]
 804803c:	2202      	movs	r2, #2
 804803e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8048042:	687b      	ldr	r3, [r7, #4]
 8048044:	681b      	ldr	r3, [r3, #0]
 8048046:	681a      	ldr	r2, [r3, #0]
 8048048:	687b      	ldr	r3, [r7, #4]
 804804a:	681b      	ldr	r3, [r3, #0]
 804804c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8048050:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8048052:	687b      	ldr	r3, [r7, #4]
 8048054:	685b      	ldr	r3, [r3, #4]
 8048056:	f403 7282 	and.w	r2, r3, #260	; 0x104
 804805a:	687b      	ldr	r3, [r7, #4]
 804805c:	689b      	ldr	r3, [r3, #8]
 804805e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8048062:	431a      	orrs	r2, r3
 8048064:	687b      	ldr	r3, [r7, #4]
 8048066:	68db      	ldr	r3, [r3, #12]
 8048068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804806c:	431a      	orrs	r2, r3
 804806e:	687b      	ldr	r3, [r7, #4]
 8048070:	691b      	ldr	r3, [r3, #16]
 8048072:	f003 0302 	and.w	r3, r3, #2
 8048076:	431a      	orrs	r2, r3
 8048078:	687b      	ldr	r3, [r7, #4]
 804807a:	695b      	ldr	r3, [r3, #20]
 804807c:	f003 0301 	and.w	r3, r3, #1
 8048080:	431a      	orrs	r2, r3
 8048082:	687b      	ldr	r3, [r7, #4]
 8048084:	699b      	ldr	r3, [r3, #24]
 8048086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804808a:	431a      	orrs	r2, r3
 804808c:	687b      	ldr	r3, [r7, #4]
 804808e:	69db      	ldr	r3, [r3, #28]
 8048090:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8048094:	431a      	orrs	r2, r3
 8048096:	687b      	ldr	r3, [r7, #4]
 8048098:	6a1b      	ldr	r3, [r3, #32]
 804809a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804809e:	ea42 0103 	orr.w	r1, r2, r3
 80480a2:	687b      	ldr	r3, [r7, #4]
 80480a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80480a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80480aa:	687b      	ldr	r3, [r7, #4]
 80480ac:	681b      	ldr	r3, [r3, #0]
 80480ae:	430a      	orrs	r2, r1
 80480b0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80480b2:	687b      	ldr	r3, [r7, #4]
 80480b4:	699b      	ldr	r3, [r3, #24]
 80480b6:	0c1b      	lsrs	r3, r3, #16
 80480b8:	f003 0104 	and.w	r1, r3, #4
 80480bc:	687b      	ldr	r3, [r7, #4]
 80480be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80480c0:	f003 0210 	and.w	r2, r3, #16
 80480c4:	687b      	ldr	r3, [r7, #4]
 80480c6:	681b      	ldr	r3, [r3, #0]
 80480c8:	430a      	orrs	r2, r1
 80480ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80480cc:	687b      	ldr	r3, [r7, #4]
 80480ce:	681b      	ldr	r3, [r3, #0]
 80480d0:	69da      	ldr	r2, [r3, #28]
 80480d2:	687b      	ldr	r3, [r7, #4]
 80480d4:	681b      	ldr	r3, [r3, #0]
 80480d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80480da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80480dc:	687b      	ldr	r3, [r7, #4]
 80480de:	2200      	movs	r2, #0
 80480e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80480e2:	687b      	ldr	r3, [r7, #4]
 80480e4:	2201      	movs	r2, #1
 80480e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80480ea:	2300      	movs	r3, #0
}
 80480ec:	4618      	mov	r0, r3
 80480ee:	3708      	adds	r7, #8
 80480f0:	46bd      	mov	sp, r7
 80480f2:	bd80      	pop	{r7, pc}

080480f4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80480f4:	b580      	push	{r7, lr}
 80480f6:	b082      	sub	sp, #8
 80480f8:	af00      	add	r7, sp, #0
 80480fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80480fc:	687b      	ldr	r3, [r7, #4]
 80480fe:	2b00      	cmp	r3, #0
 8048100:	d101      	bne.n	8048106 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8048102:	2301      	movs	r3, #1
 8048104:	e01a      	b.n	804813c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8048106:	687b      	ldr	r3, [r7, #4]
 8048108:	2202      	movs	r2, #2
 804810a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 804810e:	687b      	ldr	r3, [r7, #4]
 8048110:	681b      	ldr	r3, [r3, #0]
 8048112:	681a      	ldr	r2, [r3, #0]
 8048114:	687b      	ldr	r3, [r7, #4]
 8048116:	681b      	ldr	r3, [r3, #0]
 8048118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804811c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 804811e:	6878      	ldr	r0, [r7, #4]
 8048120:	f7f9 fc92 	bl	8041a48 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8048124:	687b      	ldr	r3, [r7, #4]
 8048126:	2200      	movs	r2, #0
 8048128:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 804812a:	687b      	ldr	r3, [r7, #4]
 804812c:	2200      	movs	r2, #0
 804812e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8048132:	687b      	ldr	r3, [r7, #4]
 8048134:	2200      	movs	r2, #0
 8048136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 804813a:	2300      	movs	r3, #0
}
 804813c:	4618      	mov	r0, r3
 804813e:	3708      	adds	r7, #8
 8048140:	46bd      	mov	sp, r7
 8048142:	bd80      	pop	{r7, pc}

08048144 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8048144:	b580      	push	{r7, lr}
 8048146:	b088      	sub	sp, #32
 8048148:	af00      	add	r7, sp, #0
 804814a:	60f8      	str	r0, [r7, #12]
 804814c:	60b9      	str	r1, [r7, #8]
 804814e:	603b      	str	r3, [r7, #0]
 8048150:	4613      	mov	r3, r2
 8048152:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8048154:	2300      	movs	r3, #0
 8048156:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8048158:	68fb      	ldr	r3, [r7, #12]
 804815a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 804815e:	2b01      	cmp	r3, #1
 8048160:	d101      	bne.n	8048166 <HAL_SPI_Transmit+0x22>
 8048162:	2302      	movs	r3, #2
 8048164:	e126      	b.n	80483b4 <HAL_SPI_Transmit+0x270>
 8048166:	68fb      	ldr	r3, [r7, #12]
 8048168:	2201      	movs	r2, #1
 804816a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 804816e:	f7fb f9cb 	bl	8043508 <HAL_GetTick>
 8048172:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8048174:	88fb      	ldrh	r3, [r7, #6]
 8048176:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8048178:	68fb      	ldr	r3, [r7, #12]
 804817a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 804817e:	b2db      	uxtb	r3, r3
 8048180:	2b01      	cmp	r3, #1
 8048182:	d002      	beq.n	804818a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8048184:	2302      	movs	r3, #2
 8048186:	77fb      	strb	r3, [r7, #31]
    goto error;
 8048188:	e10b      	b.n	80483a2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 804818a:	68bb      	ldr	r3, [r7, #8]
 804818c:	2b00      	cmp	r3, #0
 804818e:	d002      	beq.n	8048196 <HAL_SPI_Transmit+0x52>
 8048190:	88fb      	ldrh	r3, [r7, #6]
 8048192:	2b00      	cmp	r3, #0
 8048194:	d102      	bne.n	804819c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8048196:	2301      	movs	r3, #1
 8048198:	77fb      	strb	r3, [r7, #31]
    goto error;
 804819a:	e102      	b.n	80483a2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 804819c:	68fb      	ldr	r3, [r7, #12]
 804819e:	2203      	movs	r2, #3
 80481a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80481a4:	68fb      	ldr	r3, [r7, #12]
 80481a6:	2200      	movs	r2, #0
 80481a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80481aa:	68fb      	ldr	r3, [r7, #12]
 80481ac:	68ba      	ldr	r2, [r7, #8]
 80481ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80481b0:	68fb      	ldr	r3, [r7, #12]
 80481b2:	88fa      	ldrh	r2, [r7, #6]
 80481b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80481b6:	68fb      	ldr	r3, [r7, #12]
 80481b8:	88fa      	ldrh	r2, [r7, #6]
 80481ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80481bc:	68fb      	ldr	r3, [r7, #12]
 80481be:	2200      	movs	r2, #0
 80481c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80481c2:	68fb      	ldr	r3, [r7, #12]
 80481c4:	2200      	movs	r2, #0
 80481c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80481c8:	68fb      	ldr	r3, [r7, #12]
 80481ca:	2200      	movs	r2, #0
 80481cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80481ce:	68fb      	ldr	r3, [r7, #12]
 80481d0:	2200      	movs	r2, #0
 80481d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80481d4:	68fb      	ldr	r3, [r7, #12]
 80481d6:	2200      	movs	r2, #0
 80481d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80481da:	68fb      	ldr	r3, [r7, #12]
 80481dc:	689b      	ldr	r3, [r3, #8]
 80481de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80481e2:	d10f      	bne.n	8048204 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80481e4:	68fb      	ldr	r3, [r7, #12]
 80481e6:	681b      	ldr	r3, [r3, #0]
 80481e8:	681a      	ldr	r2, [r3, #0]
 80481ea:	68fb      	ldr	r3, [r7, #12]
 80481ec:	681b      	ldr	r3, [r3, #0]
 80481ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80481f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80481f4:	68fb      	ldr	r3, [r7, #12]
 80481f6:	681b      	ldr	r3, [r3, #0]
 80481f8:	681a      	ldr	r2, [r3, #0]
 80481fa:	68fb      	ldr	r3, [r7, #12]
 80481fc:	681b      	ldr	r3, [r3, #0]
 80481fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8048202:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8048204:	68fb      	ldr	r3, [r7, #12]
 8048206:	681b      	ldr	r3, [r3, #0]
 8048208:	681b      	ldr	r3, [r3, #0]
 804820a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804820e:	2b40      	cmp	r3, #64	; 0x40
 8048210:	d007      	beq.n	8048222 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8048212:	68fb      	ldr	r3, [r7, #12]
 8048214:	681b      	ldr	r3, [r3, #0]
 8048216:	681a      	ldr	r2, [r3, #0]
 8048218:	68fb      	ldr	r3, [r7, #12]
 804821a:	681b      	ldr	r3, [r3, #0]
 804821c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8048220:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8048222:	68fb      	ldr	r3, [r7, #12]
 8048224:	68db      	ldr	r3, [r3, #12]
 8048226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804822a:	d14b      	bne.n	80482c4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 804822c:	68fb      	ldr	r3, [r7, #12]
 804822e:	685b      	ldr	r3, [r3, #4]
 8048230:	2b00      	cmp	r3, #0
 8048232:	d002      	beq.n	804823a <HAL_SPI_Transmit+0xf6>
 8048234:	8afb      	ldrh	r3, [r7, #22]
 8048236:	2b01      	cmp	r3, #1
 8048238:	d13e      	bne.n	80482b8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804823a:	68fb      	ldr	r3, [r7, #12]
 804823c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804823e:	881a      	ldrh	r2, [r3, #0]
 8048240:	68fb      	ldr	r3, [r7, #12]
 8048242:	681b      	ldr	r3, [r3, #0]
 8048244:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8048246:	68fb      	ldr	r3, [r7, #12]
 8048248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804824a:	1c9a      	adds	r2, r3, #2
 804824c:	68fb      	ldr	r3, [r7, #12]
 804824e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8048250:	68fb      	ldr	r3, [r7, #12]
 8048252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8048254:	b29b      	uxth	r3, r3
 8048256:	3b01      	subs	r3, #1
 8048258:	b29a      	uxth	r2, r3
 804825a:	68fb      	ldr	r3, [r7, #12]
 804825c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 804825e:	e02b      	b.n	80482b8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8048260:	68fb      	ldr	r3, [r7, #12]
 8048262:	681b      	ldr	r3, [r3, #0]
 8048264:	689b      	ldr	r3, [r3, #8]
 8048266:	f003 0302 	and.w	r3, r3, #2
 804826a:	2b02      	cmp	r3, #2
 804826c:	d112      	bne.n	8048294 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804826e:	68fb      	ldr	r3, [r7, #12]
 8048270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048272:	881a      	ldrh	r2, [r3, #0]
 8048274:	68fb      	ldr	r3, [r7, #12]
 8048276:	681b      	ldr	r3, [r3, #0]
 8048278:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 804827a:	68fb      	ldr	r3, [r7, #12]
 804827c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804827e:	1c9a      	adds	r2, r3, #2
 8048280:	68fb      	ldr	r3, [r7, #12]
 8048282:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8048284:	68fb      	ldr	r3, [r7, #12]
 8048286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8048288:	b29b      	uxth	r3, r3
 804828a:	3b01      	subs	r3, #1
 804828c:	b29a      	uxth	r2, r3
 804828e:	68fb      	ldr	r3, [r7, #12]
 8048290:	86da      	strh	r2, [r3, #54]	; 0x36
 8048292:	e011      	b.n	80482b8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8048294:	f7fb f938 	bl	8043508 <HAL_GetTick>
 8048298:	4602      	mov	r2, r0
 804829a:	69bb      	ldr	r3, [r7, #24]
 804829c:	1ad3      	subs	r3, r2, r3
 804829e:	683a      	ldr	r2, [r7, #0]
 80482a0:	429a      	cmp	r2, r3
 80482a2:	d803      	bhi.n	80482ac <HAL_SPI_Transmit+0x168>
 80482a4:	683b      	ldr	r3, [r7, #0]
 80482a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80482aa:	d102      	bne.n	80482b2 <HAL_SPI_Transmit+0x16e>
 80482ac:	683b      	ldr	r3, [r7, #0]
 80482ae:	2b00      	cmp	r3, #0
 80482b0:	d102      	bne.n	80482b8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80482b2:	2303      	movs	r3, #3
 80482b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80482b6:	e074      	b.n	80483a2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80482b8:	68fb      	ldr	r3, [r7, #12]
 80482ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80482bc:	b29b      	uxth	r3, r3
 80482be:	2b00      	cmp	r3, #0
 80482c0:	d1ce      	bne.n	8048260 <HAL_SPI_Transmit+0x11c>
 80482c2:	e04c      	b.n	804835e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80482c4:	68fb      	ldr	r3, [r7, #12]
 80482c6:	685b      	ldr	r3, [r3, #4]
 80482c8:	2b00      	cmp	r3, #0
 80482ca:	d002      	beq.n	80482d2 <HAL_SPI_Transmit+0x18e>
 80482cc:	8afb      	ldrh	r3, [r7, #22]
 80482ce:	2b01      	cmp	r3, #1
 80482d0:	d140      	bne.n	8048354 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80482d2:	68fb      	ldr	r3, [r7, #12]
 80482d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80482d6:	68fb      	ldr	r3, [r7, #12]
 80482d8:	681b      	ldr	r3, [r3, #0]
 80482da:	330c      	adds	r3, #12
 80482dc:	7812      	ldrb	r2, [r2, #0]
 80482de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80482e0:	68fb      	ldr	r3, [r7, #12]
 80482e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80482e4:	1c5a      	adds	r2, r3, #1
 80482e6:	68fb      	ldr	r3, [r7, #12]
 80482e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80482ea:	68fb      	ldr	r3, [r7, #12]
 80482ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80482ee:	b29b      	uxth	r3, r3
 80482f0:	3b01      	subs	r3, #1
 80482f2:	b29a      	uxth	r2, r3
 80482f4:	68fb      	ldr	r3, [r7, #12]
 80482f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80482f8:	e02c      	b.n	8048354 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80482fa:	68fb      	ldr	r3, [r7, #12]
 80482fc:	681b      	ldr	r3, [r3, #0]
 80482fe:	689b      	ldr	r3, [r3, #8]
 8048300:	f003 0302 	and.w	r3, r3, #2
 8048304:	2b02      	cmp	r3, #2
 8048306:	d113      	bne.n	8048330 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8048308:	68fb      	ldr	r3, [r7, #12]
 804830a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804830c:	68fb      	ldr	r3, [r7, #12]
 804830e:	681b      	ldr	r3, [r3, #0]
 8048310:	330c      	adds	r3, #12
 8048312:	7812      	ldrb	r2, [r2, #0]
 8048314:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8048316:	68fb      	ldr	r3, [r7, #12]
 8048318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804831a:	1c5a      	adds	r2, r3, #1
 804831c:	68fb      	ldr	r3, [r7, #12]
 804831e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8048320:	68fb      	ldr	r3, [r7, #12]
 8048322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8048324:	b29b      	uxth	r3, r3
 8048326:	3b01      	subs	r3, #1
 8048328:	b29a      	uxth	r2, r3
 804832a:	68fb      	ldr	r3, [r7, #12]
 804832c:	86da      	strh	r2, [r3, #54]	; 0x36
 804832e:	e011      	b.n	8048354 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8048330:	f7fb f8ea 	bl	8043508 <HAL_GetTick>
 8048334:	4602      	mov	r2, r0
 8048336:	69bb      	ldr	r3, [r7, #24]
 8048338:	1ad3      	subs	r3, r2, r3
 804833a:	683a      	ldr	r2, [r7, #0]
 804833c:	429a      	cmp	r2, r3
 804833e:	d803      	bhi.n	8048348 <HAL_SPI_Transmit+0x204>
 8048340:	683b      	ldr	r3, [r7, #0]
 8048342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8048346:	d102      	bne.n	804834e <HAL_SPI_Transmit+0x20a>
 8048348:	683b      	ldr	r3, [r7, #0]
 804834a:	2b00      	cmp	r3, #0
 804834c:	d102      	bne.n	8048354 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 804834e:	2303      	movs	r3, #3
 8048350:	77fb      	strb	r3, [r7, #31]
          goto error;
 8048352:	e026      	b.n	80483a2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8048354:	68fb      	ldr	r3, [r7, #12]
 8048356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8048358:	b29b      	uxth	r3, r3
 804835a:	2b00      	cmp	r3, #0
 804835c:	d1cd      	bne.n	80482fa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 804835e:	69ba      	ldr	r2, [r7, #24]
 8048360:	6839      	ldr	r1, [r7, #0]
 8048362:	68f8      	ldr	r0, [r7, #12]
 8048364:	f000 fbda 	bl	8048b1c <SPI_EndRxTxTransaction>
 8048368:	4603      	mov	r3, r0
 804836a:	2b00      	cmp	r3, #0
 804836c:	d002      	beq.n	8048374 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 804836e:	68fb      	ldr	r3, [r7, #12]
 8048370:	2220      	movs	r2, #32
 8048372:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8048374:	68fb      	ldr	r3, [r7, #12]
 8048376:	689b      	ldr	r3, [r3, #8]
 8048378:	2b00      	cmp	r3, #0
 804837a:	d10a      	bne.n	8048392 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 804837c:	2300      	movs	r3, #0
 804837e:	613b      	str	r3, [r7, #16]
 8048380:	68fb      	ldr	r3, [r7, #12]
 8048382:	681b      	ldr	r3, [r3, #0]
 8048384:	68db      	ldr	r3, [r3, #12]
 8048386:	613b      	str	r3, [r7, #16]
 8048388:	68fb      	ldr	r3, [r7, #12]
 804838a:	681b      	ldr	r3, [r3, #0]
 804838c:	689b      	ldr	r3, [r3, #8]
 804838e:	613b      	str	r3, [r7, #16]
 8048390:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8048392:	68fb      	ldr	r3, [r7, #12]
 8048394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8048396:	2b00      	cmp	r3, #0
 8048398:	d002      	beq.n	80483a0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 804839a:	2301      	movs	r3, #1
 804839c:	77fb      	strb	r3, [r7, #31]
 804839e:	e000      	b.n	80483a2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80483a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80483a2:	68fb      	ldr	r3, [r7, #12]
 80483a4:	2201      	movs	r2, #1
 80483a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80483aa:	68fb      	ldr	r3, [r7, #12]
 80483ac:	2200      	movs	r2, #0
 80483ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80483b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80483b4:	4618      	mov	r0, r3
 80483b6:	3720      	adds	r7, #32
 80483b8:	46bd      	mov	sp, r7
 80483ba:	bd80      	pop	{r7, pc}

080483bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80483bc:	b580      	push	{r7, lr}
 80483be:	b088      	sub	sp, #32
 80483c0:	af02      	add	r7, sp, #8
 80483c2:	60f8      	str	r0, [r7, #12]
 80483c4:	60b9      	str	r1, [r7, #8]
 80483c6:	603b      	str	r3, [r7, #0]
 80483c8:	4613      	mov	r3, r2
 80483ca:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80483cc:	2300      	movs	r3, #0
 80483ce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80483d0:	68fb      	ldr	r3, [r7, #12]
 80483d2:	685b      	ldr	r3, [r3, #4]
 80483d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80483d8:	d112      	bne.n	8048400 <HAL_SPI_Receive+0x44>
 80483da:	68fb      	ldr	r3, [r7, #12]
 80483dc:	689b      	ldr	r3, [r3, #8]
 80483de:	2b00      	cmp	r3, #0
 80483e0:	d10e      	bne.n	8048400 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80483e2:	68fb      	ldr	r3, [r7, #12]
 80483e4:	2204      	movs	r2, #4
 80483e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80483ea:	88fa      	ldrh	r2, [r7, #6]
 80483ec:	683b      	ldr	r3, [r7, #0]
 80483ee:	9300      	str	r3, [sp, #0]
 80483f0:	4613      	mov	r3, r2
 80483f2:	68ba      	ldr	r2, [r7, #8]
 80483f4:	68b9      	ldr	r1, [r7, #8]
 80483f6:	68f8      	ldr	r0, [r7, #12]
 80483f8:	f000 f8f1 	bl	80485de <HAL_SPI_TransmitReceive>
 80483fc:	4603      	mov	r3, r0
 80483fe:	e0ea      	b.n	80485d6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8048400:	68fb      	ldr	r3, [r7, #12]
 8048402:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8048406:	2b01      	cmp	r3, #1
 8048408:	d101      	bne.n	804840e <HAL_SPI_Receive+0x52>
 804840a:	2302      	movs	r3, #2
 804840c:	e0e3      	b.n	80485d6 <HAL_SPI_Receive+0x21a>
 804840e:	68fb      	ldr	r3, [r7, #12]
 8048410:	2201      	movs	r2, #1
 8048412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8048416:	f7fb f877 	bl	8043508 <HAL_GetTick>
 804841a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 804841c:	68fb      	ldr	r3, [r7, #12]
 804841e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8048422:	b2db      	uxtb	r3, r3
 8048424:	2b01      	cmp	r3, #1
 8048426:	d002      	beq.n	804842e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8048428:	2302      	movs	r3, #2
 804842a:	75fb      	strb	r3, [r7, #23]
    goto error;
 804842c:	e0ca      	b.n	80485c4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 804842e:	68bb      	ldr	r3, [r7, #8]
 8048430:	2b00      	cmp	r3, #0
 8048432:	d002      	beq.n	804843a <HAL_SPI_Receive+0x7e>
 8048434:	88fb      	ldrh	r3, [r7, #6]
 8048436:	2b00      	cmp	r3, #0
 8048438:	d102      	bne.n	8048440 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 804843a:	2301      	movs	r3, #1
 804843c:	75fb      	strb	r3, [r7, #23]
    goto error;
 804843e:	e0c1      	b.n	80485c4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8048440:	68fb      	ldr	r3, [r7, #12]
 8048442:	2204      	movs	r2, #4
 8048444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8048448:	68fb      	ldr	r3, [r7, #12]
 804844a:	2200      	movs	r2, #0
 804844c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 804844e:	68fb      	ldr	r3, [r7, #12]
 8048450:	68ba      	ldr	r2, [r7, #8]
 8048452:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8048454:	68fb      	ldr	r3, [r7, #12]
 8048456:	88fa      	ldrh	r2, [r7, #6]
 8048458:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 804845a:	68fb      	ldr	r3, [r7, #12]
 804845c:	88fa      	ldrh	r2, [r7, #6]
 804845e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8048460:	68fb      	ldr	r3, [r7, #12]
 8048462:	2200      	movs	r2, #0
 8048464:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8048466:	68fb      	ldr	r3, [r7, #12]
 8048468:	2200      	movs	r2, #0
 804846a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 804846c:	68fb      	ldr	r3, [r7, #12]
 804846e:	2200      	movs	r2, #0
 8048470:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8048472:	68fb      	ldr	r3, [r7, #12]
 8048474:	2200      	movs	r2, #0
 8048476:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8048478:	68fb      	ldr	r3, [r7, #12]
 804847a:	2200      	movs	r2, #0
 804847c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804847e:	68fb      	ldr	r3, [r7, #12]
 8048480:	689b      	ldr	r3, [r3, #8]
 8048482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8048486:	d10f      	bne.n	80484a8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8048488:	68fb      	ldr	r3, [r7, #12]
 804848a:	681b      	ldr	r3, [r3, #0]
 804848c:	681a      	ldr	r2, [r3, #0]
 804848e:	68fb      	ldr	r3, [r7, #12]
 8048490:	681b      	ldr	r3, [r3, #0]
 8048492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8048496:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8048498:	68fb      	ldr	r3, [r7, #12]
 804849a:	681b      	ldr	r3, [r3, #0]
 804849c:	681a      	ldr	r2, [r3, #0]
 804849e:	68fb      	ldr	r3, [r7, #12]
 80484a0:	681b      	ldr	r3, [r3, #0]
 80484a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80484a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80484a8:	68fb      	ldr	r3, [r7, #12]
 80484aa:	681b      	ldr	r3, [r3, #0]
 80484ac:	681b      	ldr	r3, [r3, #0]
 80484ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80484b2:	2b40      	cmp	r3, #64	; 0x40
 80484b4:	d007      	beq.n	80484c6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80484b6:	68fb      	ldr	r3, [r7, #12]
 80484b8:	681b      	ldr	r3, [r3, #0]
 80484ba:	681a      	ldr	r2, [r3, #0]
 80484bc:	68fb      	ldr	r3, [r7, #12]
 80484be:	681b      	ldr	r3, [r3, #0]
 80484c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80484c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80484c6:	68fb      	ldr	r3, [r7, #12]
 80484c8:	68db      	ldr	r3, [r3, #12]
 80484ca:	2b00      	cmp	r3, #0
 80484cc:	d162      	bne.n	8048594 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80484ce:	e02e      	b.n	804852e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80484d0:	68fb      	ldr	r3, [r7, #12]
 80484d2:	681b      	ldr	r3, [r3, #0]
 80484d4:	689b      	ldr	r3, [r3, #8]
 80484d6:	f003 0301 	and.w	r3, r3, #1
 80484da:	2b01      	cmp	r3, #1
 80484dc:	d115      	bne.n	804850a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80484de:	68fb      	ldr	r3, [r7, #12]
 80484e0:	681b      	ldr	r3, [r3, #0]
 80484e2:	f103 020c 	add.w	r2, r3, #12
 80484e6:	68fb      	ldr	r3, [r7, #12]
 80484e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80484ea:	7812      	ldrb	r2, [r2, #0]
 80484ec:	b2d2      	uxtb	r2, r2
 80484ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80484f0:	68fb      	ldr	r3, [r7, #12]
 80484f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80484f4:	1c5a      	adds	r2, r3, #1
 80484f6:	68fb      	ldr	r3, [r7, #12]
 80484f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80484fa:	68fb      	ldr	r3, [r7, #12]
 80484fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80484fe:	b29b      	uxth	r3, r3
 8048500:	3b01      	subs	r3, #1
 8048502:	b29a      	uxth	r2, r3
 8048504:	68fb      	ldr	r3, [r7, #12]
 8048506:	87da      	strh	r2, [r3, #62]	; 0x3e
 8048508:	e011      	b.n	804852e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 804850a:	f7fa fffd 	bl	8043508 <HAL_GetTick>
 804850e:	4602      	mov	r2, r0
 8048510:	693b      	ldr	r3, [r7, #16]
 8048512:	1ad3      	subs	r3, r2, r3
 8048514:	683a      	ldr	r2, [r7, #0]
 8048516:	429a      	cmp	r2, r3
 8048518:	d803      	bhi.n	8048522 <HAL_SPI_Receive+0x166>
 804851a:	683b      	ldr	r3, [r7, #0]
 804851c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8048520:	d102      	bne.n	8048528 <HAL_SPI_Receive+0x16c>
 8048522:	683b      	ldr	r3, [r7, #0]
 8048524:	2b00      	cmp	r3, #0
 8048526:	d102      	bne.n	804852e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8048528:	2303      	movs	r3, #3
 804852a:	75fb      	strb	r3, [r7, #23]
          goto error;
 804852c:	e04a      	b.n	80485c4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 804852e:	68fb      	ldr	r3, [r7, #12]
 8048530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8048532:	b29b      	uxth	r3, r3
 8048534:	2b00      	cmp	r3, #0
 8048536:	d1cb      	bne.n	80484d0 <HAL_SPI_Receive+0x114>
 8048538:	e031      	b.n	804859e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 804853a:	68fb      	ldr	r3, [r7, #12]
 804853c:	681b      	ldr	r3, [r3, #0]
 804853e:	689b      	ldr	r3, [r3, #8]
 8048540:	f003 0301 	and.w	r3, r3, #1
 8048544:	2b01      	cmp	r3, #1
 8048546:	d113      	bne.n	8048570 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8048548:	68fb      	ldr	r3, [r7, #12]
 804854a:	681b      	ldr	r3, [r3, #0]
 804854c:	68da      	ldr	r2, [r3, #12]
 804854e:	68fb      	ldr	r3, [r7, #12]
 8048550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048552:	b292      	uxth	r2, r2
 8048554:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8048556:	68fb      	ldr	r3, [r7, #12]
 8048558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804855a:	1c9a      	adds	r2, r3, #2
 804855c:	68fb      	ldr	r3, [r7, #12]
 804855e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8048560:	68fb      	ldr	r3, [r7, #12]
 8048562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8048564:	b29b      	uxth	r3, r3
 8048566:	3b01      	subs	r3, #1
 8048568:	b29a      	uxth	r2, r3
 804856a:	68fb      	ldr	r3, [r7, #12]
 804856c:	87da      	strh	r2, [r3, #62]	; 0x3e
 804856e:	e011      	b.n	8048594 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8048570:	f7fa ffca 	bl	8043508 <HAL_GetTick>
 8048574:	4602      	mov	r2, r0
 8048576:	693b      	ldr	r3, [r7, #16]
 8048578:	1ad3      	subs	r3, r2, r3
 804857a:	683a      	ldr	r2, [r7, #0]
 804857c:	429a      	cmp	r2, r3
 804857e:	d803      	bhi.n	8048588 <HAL_SPI_Receive+0x1cc>
 8048580:	683b      	ldr	r3, [r7, #0]
 8048582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8048586:	d102      	bne.n	804858e <HAL_SPI_Receive+0x1d2>
 8048588:	683b      	ldr	r3, [r7, #0]
 804858a:	2b00      	cmp	r3, #0
 804858c:	d102      	bne.n	8048594 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 804858e:	2303      	movs	r3, #3
 8048590:	75fb      	strb	r3, [r7, #23]
          goto error;
 8048592:	e017      	b.n	80485c4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8048594:	68fb      	ldr	r3, [r7, #12]
 8048596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8048598:	b29b      	uxth	r3, r3
 804859a:	2b00      	cmp	r3, #0
 804859c:	d1cd      	bne.n	804853a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 804859e:	693a      	ldr	r2, [r7, #16]
 80485a0:	6839      	ldr	r1, [r7, #0]
 80485a2:	68f8      	ldr	r0, [r7, #12]
 80485a4:	f000 fa54 	bl	8048a50 <SPI_EndRxTransaction>
 80485a8:	4603      	mov	r3, r0
 80485aa:	2b00      	cmp	r3, #0
 80485ac:	d002      	beq.n	80485b4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80485ae:	68fb      	ldr	r3, [r7, #12]
 80485b0:	2220      	movs	r2, #32
 80485b2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80485b4:	68fb      	ldr	r3, [r7, #12]
 80485b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80485b8:	2b00      	cmp	r3, #0
 80485ba:	d002      	beq.n	80485c2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80485bc:	2301      	movs	r3, #1
 80485be:	75fb      	strb	r3, [r7, #23]
 80485c0:	e000      	b.n	80485c4 <HAL_SPI_Receive+0x208>
  }

error :
 80485c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80485c4:	68fb      	ldr	r3, [r7, #12]
 80485c6:	2201      	movs	r2, #1
 80485c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80485cc:	68fb      	ldr	r3, [r7, #12]
 80485ce:	2200      	movs	r2, #0
 80485d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80485d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80485d6:	4618      	mov	r0, r3
 80485d8:	3718      	adds	r7, #24
 80485da:	46bd      	mov	sp, r7
 80485dc:	bd80      	pop	{r7, pc}

080485de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80485de:	b580      	push	{r7, lr}
 80485e0:	b08c      	sub	sp, #48	; 0x30
 80485e2:	af00      	add	r7, sp, #0
 80485e4:	60f8      	str	r0, [r7, #12]
 80485e6:	60b9      	str	r1, [r7, #8]
 80485e8:	607a      	str	r2, [r7, #4]
 80485ea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80485ec:	2301      	movs	r3, #1
 80485ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80485f0:	2300      	movs	r3, #0
 80485f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80485f6:	68fb      	ldr	r3, [r7, #12]
 80485f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80485fc:	2b01      	cmp	r3, #1
 80485fe:	d101      	bne.n	8048604 <HAL_SPI_TransmitReceive+0x26>
 8048600:	2302      	movs	r3, #2
 8048602:	e18a      	b.n	804891a <HAL_SPI_TransmitReceive+0x33c>
 8048604:	68fb      	ldr	r3, [r7, #12]
 8048606:	2201      	movs	r2, #1
 8048608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 804860c:	f7fa ff7c 	bl	8043508 <HAL_GetTick>
 8048610:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8048612:	68fb      	ldr	r3, [r7, #12]
 8048614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8048618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 804861c:	68fb      	ldr	r3, [r7, #12]
 804861e:	685b      	ldr	r3, [r3, #4]
 8048620:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8048622:	887b      	ldrh	r3, [r7, #2]
 8048624:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8048626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 804862a:	2b01      	cmp	r3, #1
 804862c:	d00f      	beq.n	804864e <HAL_SPI_TransmitReceive+0x70>
 804862e:	69fb      	ldr	r3, [r7, #28]
 8048630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8048634:	d107      	bne.n	8048646 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8048636:	68fb      	ldr	r3, [r7, #12]
 8048638:	689b      	ldr	r3, [r3, #8]
 804863a:	2b00      	cmp	r3, #0
 804863c:	d103      	bne.n	8048646 <HAL_SPI_TransmitReceive+0x68>
 804863e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8048642:	2b04      	cmp	r3, #4
 8048644:	d003      	beq.n	804864e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8048646:	2302      	movs	r3, #2
 8048648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 804864c:	e15b      	b.n	8048906 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 804864e:	68bb      	ldr	r3, [r7, #8]
 8048650:	2b00      	cmp	r3, #0
 8048652:	d005      	beq.n	8048660 <HAL_SPI_TransmitReceive+0x82>
 8048654:	687b      	ldr	r3, [r7, #4]
 8048656:	2b00      	cmp	r3, #0
 8048658:	d002      	beq.n	8048660 <HAL_SPI_TransmitReceive+0x82>
 804865a:	887b      	ldrh	r3, [r7, #2]
 804865c:	2b00      	cmp	r3, #0
 804865e:	d103      	bne.n	8048668 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8048660:	2301      	movs	r3, #1
 8048662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8048666:	e14e      	b.n	8048906 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8048668:	68fb      	ldr	r3, [r7, #12]
 804866a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 804866e:	b2db      	uxtb	r3, r3
 8048670:	2b04      	cmp	r3, #4
 8048672:	d003      	beq.n	804867c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8048674:	68fb      	ldr	r3, [r7, #12]
 8048676:	2205      	movs	r2, #5
 8048678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 804867c:	68fb      	ldr	r3, [r7, #12]
 804867e:	2200      	movs	r2, #0
 8048680:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8048682:	68fb      	ldr	r3, [r7, #12]
 8048684:	687a      	ldr	r2, [r7, #4]
 8048686:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8048688:	68fb      	ldr	r3, [r7, #12]
 804868a:	887a      	ldrh	r2, [r7, #2]
 804868c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 804868e:	68fb      	ldr	r3, [r7, #12]
 8048690:	887a      	ldrh	r2, [r7, #2]
 8048692:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8048694:	68fb      	ldr	r3, [r7, #12]
 8048696:	68ba      	ldr	r2, [r7, #8]
 8048698:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 804869a:	68fb      	ldr	r3, [r7, #12]
 804869c:	887a      	ldrh	r2, [r7, #2]
 804869e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80486a0:	68fb      	ldr	r3, [r7, #12]
 80486a2:	887a      	ldrh	r2, [r7, #2]
 80486a4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80486a6:	68fb      	ldr	r3, [r7, #12]
 80486a8:	2200      	movs	r2, #0
 80486aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80486ac:	68fb      	ldr	r3, [r7, #12]
 80486ae:	2200      	movs	r2, #0
 80486b0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80486b2:	68fb      	ldr	r3, [r7, #12]
 80486b4:	681b      	ldr	r3, [r3, #0]
 80486b6:	681b      	ldr	r3, [r3, #0]
 80486b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80486bc:	2b40      	cmp	r3, #64	; 0x40
 80486be:	d007      	beq.n	80486d0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80486c0:	68fb      	ldr	r3, [r7, #12]
 80486c2:	681b      	ldr	r3, [r3, #0]
 80486c4:	681a      	ldr	r2, [r3, #0]
 80486c6:	68fb      	ldr	r3, [r7, #12]
 80486c8:	681b      	ldr	r3, [r3, #0]
 80486ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80486ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80486d0:	68fb      	ldr	r3, [r7, #12]
 80486d2:	68db      	ldr	r3, [r3, #12]
 80486d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80486d8:	d178      	bne.n	80487cc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80486da:	68fb      	ldr	r3, [r7, #12]
 80486dc:	685b      	ldr	r3, [r3, #4]
 80486de:	2b00      	cmp	r3, #0
 80486e0:	d002      	beq.n	80486e8 <HAL_SPI_TransmitReceive+0x10a>
 80486e2:	8b7b      	ldrh	r3, [r7, #26]
 80486e4:	2b01      	cmp	r3, #1
 80486e6:	d166      	bne.n	80487b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80486e8:	68fb      	ldr	r3, [r7, #12]
 80486ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80486ec:	881a      	ldrh	r2, [r3, #0]
 80486ee:	68fb      	ldr	r3, [r7, #12]
 80486f0:	681b      	ldr	r3, [r3, #0]
 80486f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80486f4:	68fb      	ldr	r3, [r7, #12]
 80486f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80486f8:	1c9a      	adds	r2, r3, #2
 80486fa:	68fb      	ldr	r3, [r7, #12]
 80486fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80486fe:	68fb      	ldr	r3, [r7, #12]
 8048700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8048702:	b29b      	uxth	r3, r3
 8048704:	3b01      	subs	r3, #1
 8048706:	b29a      	uxth	r2, r3
 8048708:	68fb      	ldr	r3, [r7, #12]
 804870a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804870c:	e053      	b.n	80487b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 804870e:	68fb      	ldr	r3, [r7, #12]
 8048710:	681b      	ldr	r3, [r3, #0]
 8048712:	689b      	ldr	r3, [r3, #8]
 8048714:	f003 0302 	and.w	r3, r3, #2
 8048718:	2b02      	cmp	r3, #2
 804871a:	d11b      	bne.n	8048754 <HAL_SPI_TransmitReceive+0x176>
 804871c:	68fb      	ldr	r3, [r7, #12]
 804871e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8048720:	b29b      	uxth	r3, r3
 8048722:	2b00      	cmp	r3, #0
 8048724:	d016      	beq.n	8048754 <HAL_SPI_TransmitReceive+0x176>
 8048726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048728:	2b01      	cmp	r3, #1
 804872a:	d113      	bne.n	8048754 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804872c:	68fb      	ldr	r3, [r7, #12]
 804872e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048730:	881a      	ldrh	r2, [r3, #0]
 8048732:	68fb      	ldr	r3, [r7, #12]
 8048734:	681b      	ldr	r3, [r3, #0]
 8048736:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8048738:	68fb      	ldr	r3, [r7, #12]
 804873a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804873c:	1c9a      	adds	r2, r3, #2
 804873e:	68fb      	ldr	r3, [r7, #12]
 8048740:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8048742:	68fb      	ldr	r3, [r7, #12]
 8048744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8048746:	b29b      	uxth	r3, r3
 8048748:	3b01      	subs	r3, #1
 804874a:	b29a      	uxth	r2, r3
 804874c:	68fb      	ldr	r3, [r7, #12]
 804874e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8048750:	2300      	movs	r3, #0
 8048752:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8048754:	68fb      	ldr	r3, [r7, #12]
 8048756:	681b      	ldr	r3, [r3, #0]
 8048758:	689b      	ldr	r3, [r3, #8]
 804875a:	f003 0301 	and.w	r3, r3, #1
 804875e:	2b01      	cmp	r3, #1
 8048760:	d119      	bne.n	8048796 <HAL_SPI_TransmitReceive+0x1b8>
 8048762:	68fb      	ldr	r3, [r7, #12]
 8048764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8048766:	b29b      	uxth	r3, r3
 8048768:	2b00      	cmp	r3, #0
 804876a:	d014      	beq.n	8048796 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 804876c:	68fb      	ldr	r3, [r7, #12]
 804876e:	681b      	ldr	r3, [r3, #0]
 8048770:	68da      	ldr	r2, [r3, #12]
 8048772:	68fb      	ldr	r3, [r7, #12]
 8048774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048776:	b292      	uxth	r2, r2
 8048778:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 804877a:	68fb      	ldr	r3, [r7, #12]
 804877c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804877e:	1c9a      	adds	r2, r3, #2
 8048780:	68fb      	ldr	r3, [r7, #12]
 8048782:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8048784:	68fb      	ldr	r3, [r7, #12]
 8048786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8048788:	b29b      	uxth	r3, r3
 804878a:	3b01      	subs	r3, #1
 804878c:	b29a      	uxth	r2, r3
 804878e:	68fb      	ldr	r3, [r7, #12]
 8048790:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8048792:	2301      	movs	r3, #1
 8048794:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8048796:	f7fa feb7 	bl	8043508 <HAL_GetTick>
 804879a:	4602      	mov	r2, r0
 804879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804879e:	1ad3      	subs	r3, r2, r3
 80487a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80487a2:	429a      	cmp	r2, r3
 80487a4:	d807      	bhi.n	80487b6 <HAL_SPI_TransmitReceive+0x1d8>
 80487a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80487a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80487ac:	d003      	beq.n	80487b6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80487ae:	2303      	movs	r3, #3
 80487b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80487b4:	e0a7      	b.n	8048906 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80487b6:	68fb      	ldr	r3, [r7, #12]
 80487b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80487ba:	b29b      	uxth	r3, r3
 80487bc:	2b00      	cmp	r3, #0
 80487be:	d1a6      	bne.n	804870e <HAL_SPI_TransmitReceive+0x130>
 80487c0:	68fb      	ldr	r3, [r7, #12]
 80487c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80487c4:	b29b      	uxth	r3, r3
 80487c6:	2b00      	cmp	r3, #0
 80487c8:	d1a1      	bne.n	804870e <HAL_SPI_TransmitReceive+0x130>
 80487ca:	e07c      	b.n	80488c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80487cc:	68fb      	ldr	r3, [r7, #12]
 80487ce:	685b      	ldr	r3, [r3, #4]
 80487d0:	2b00      	cmp	r3, #0
 80487d2:	d002      	beq.n	80487da <HAL_SPI_TransmitReceive+0x1fc>
 80487d4:	8b7b      	ldrh	r3, [r7, #26]
 80487d6:	2b01      	cmp	r3, #1
 80487d8:	d16b      	bne.n	80488b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80487da:	68fb      	ldr	r3, [r7, #12]
 80487dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80487de:	68fb      	ldr	r3, [r7, #12]
 80487e0:	681b      	ldr	r3, [r3, #0]
 80487e2:	330c      	adds	r3, #12
 80487e4:	7812      	ldrb	r2, [r2, #0]
 80487e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80487e8:	68fb      	ldr	r3, [r7, #12]
 80487ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80487ec:	1c5a      	adds	r2, r3, #1
 80487ee:	68fb      	ldr	r3, [r7, #12]
 80487f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80487f2:	68fb      	ldr	r3, [r7, #12]
 80487f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80487f6:	b29b      	uxth	r3, r3
 80487f8:	3b01      	subs	r3, #1
 80487fa:	b29a      	uxth	r2, r3
 80487fc:	68fb      	ldr	r3, [r7, #12]
 80487fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8048800:	e057      	b.n	80488b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8048802:	68fb      	ldr	r3, [r7, #12]
 8048804:	681b      	ldr	r3, [r3, #0]
 8048806:	689b      	ldr	r3, [r3, #8]
 8048808:	f003 0302 	and.w	r3, r3, #2
 804880c:	2b02      	cmp	r3, #2
 804880e:	d11c      	bne.n	804884a <HAL_SPI_TransmitReceive+0x26c>
 8048810:	68fb      	ldr	r3, [r7, #12]
 8048812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8048814:	b29b      	uxth	r3, r3
 8048816:	2b00      	cmp	r3, #0
 8048818:	d017      	beq.n	804884a <HAL_SPI_TransmitReceive+0x26c>
 804881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804881c:	2b01      	cmp	r3, #1
 804881e:	d114      	bne.n	804884a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8048820:	68fb      	ldr	r3, [r7, #12]
 8048822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8048824:	68fb      	ldr	r3, [r7, #12]
 8048826:	681b      	ldr	r3, [r3, #0]
 8048828:	330c      	adds	r3, #12
 804882a:	7812      	ldrb	r2, [r2, #0]
 804882c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 804882e:	68fb      	ldr	r3, [r7, #12]
 8048830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048832:	1c5a      	adds	r2, r3, #1
 8048834:	68fb      	ldr	r3, [r7, #12]
 8048836:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8048838:	68fb      	ldr	r3, [r7, #12]
 804883a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804883c:	b29b      	uxth	r3, r3
 804883e:	3b01      	subs	r3, #1
 8048840:	b29a      	uxth	r2, r3
 8048842:	68fb      	ldr	r3, [r7, #12]
 8048844:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8048846:	2300      	movs	r3, #0
 8048848:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 804884a:	68fb      	ldr	r3, [r7, #12]
 804884c:	681b      	ldr	r3, [r3, #0]
 804884e:	689b      	ldr	r3, [r3, #8]
 8048850:	f003 0301 	and.w	r3, r3, #1
 8048854:	2b01      	cmp	r3, #1
 8048856:	d119      	bne.n	804888c <HAL_SPI_TransmitReceive+0x2ae>
 8048858:	68fb      	ldr	r3, [r7, #12]
 804885a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804885c:	b29b      	uxth	r3, r3
 804885e:	2b00      	cmp	r3, #0
 8048860:	d014      	beq.n	804888c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8048862:	68fb      	ldr	r3, [r7, #12]
 8048864:	681b      	ldr	r3, [r3, #0]
 8048866:	68da      	ldr	r2, [r3, #12]
 8048868:	68fb      	ldr	r3, [r7, #12]
 804886a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804886c:	b2d2      	uxtb	r2, r2
 804886e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8048870:	68fb      	ldr	r3, [r7, #12]
 8048872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048874:	1c5a      	adds	r2, r3, #1
 8048876:	68fb      	ldr	r3, [r7, #12]
 8048878:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 804887a:	68fb      	ldr	r3, [r7, #12]
 804887c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804887e:	b29b      	uxth	r3, r3
 8048880:	3b01      	subs	r3, #1
 8048882:	b29a      	uxth	r2, r3
 8048884:	68fb      	ldr	r3, [r7, #12]
 8048886:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8048888:	2301      	movs	r3, #1
 804888a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 804888c:	f7fa fe3c 	bl	8043508 <HAL_GetTick>
 8048890:	4602      	mov	r2, r0
 8048892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048894:	1ad3      	subs	r3, r2, r3
 8048896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8048898:	429a      	cmp	r2, r3
 804889a:	d803      	bhi.n	80488a4 <HAL_SPI_TransmitReceive+0x2c6>
 804889c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804889e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80488a2:	d102      	bne.n	80488aa <HAL_SPI_TransmitReceive+0x2cc>
 80488a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80488a6:	2b00      	cmp	r3, #0
 80488a8:	d103      	bne.n	80488b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80488aa:	2303      	movs	r3, #3
 80488ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80488b0:	e029      	b.n	8048906 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80488b2:	68fb      	ldr	r3, [r7, #12]
 80488b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80488b6:	b29b      	uxth	r3, r3
 80488b8:	2b00      	cmp	r3, #0
 80488ba:	d1a2      	bne.n	8048802 <HAL_SPI_TransmitReceive+0x224>
 80488bc:	68fb      	ldr	r3, [r7, #12]
 80488be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80488c0:	b29b      	uxth	r3, r3
 80488c2:	2b00      	cmp	r3, #0
 80488c4:	d19d      	bne.n	8048802 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80488c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80488c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80488ca:	68f8      	ldr	r0, [r7, #12]
 80488cc:	f000 f926 	bl	8048b1c <SPI_EndRxTxTransaction>
 80488d0:	4603      	mov	r3, r0
 80488d2:	2b00      	cmp	r3, #0
 80488d4:	d006      	beq.n	80488e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80488d6:	2301      	movs	r3, #1
 80488d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80488dc:	68fb      	ldr	r3, [r7, #12]
 80488de:	2220      	movs	r2, #32
 80488e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80488e2:	e010      	b.n	8048906 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80488e4:	68fb      	ldr	r3, [r7, #12]
 80488e6:	689b      	ldr	r3, [r3, #8]
 80488e8:	2b00      	cmp	r3, #0
 80488ea:	d10b      	bne.n	8048904 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80488ec:	2300      	movs	r3, #0
 80488ee:	617b      	str	r3, [r7, #20]
 80488f0:	68fb      	ldr	r3, [r7, #12]
 80488f2:	681b      	ldr	r3, [r3, #0]
 80488f4:	68db      	ldr	r3, [r3, #12]
 80488f6:	617b      	str	r3, [r7, #20]
 80488f8:	68fb      	ldr	r3, [r7, #12]
 80488fa:	681b      	ldr	r3, [r3, #0]
 80488fc:	689b      	ldr	r3, [r3, #8]
 80488fe:	617b      	str	r3, [r7, #20]
 8048900:	697b      	ldr	r3, [r7, #20]
 8048902:	e000      	b.n	8048906 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8048904:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8048906:	68fb      	ldr	r3, [r7, #12]
 8048908:	2201      	movs	r2, #1
 804890a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 804890e:	68fb      	ldr	r3, [r7, #12]
 8048910:	2200      	movs	r2, #0
 8048912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8048916:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 804891a:	4618      	mov	r0, r3
 804891c:	3730      	adds	r7, #48	; 0x30
 804891e:	46bd      	mov	sp, r7
 8048920:	bd80      	pop	{r7, pc}

08048922 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8048922:	b480      	push	{r7}
 8048924:	b083      	sub	sp, #12
 8048926:	af00      	add	r7, sp, #0
 8048928:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 804892a:	687b      	ldr	r3, [r7, #4]
 804892c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8048930:	b2db      	uxtb	r3, r3
}
 8048932:	4618      	mov	r0, r3
 8048934:	370c      	adds	r7, #12
 8048936:	46bd      	mov	sp, r7
 8048938:	f85d 7b04 	ldr.w	r7, [sp], #4
 804893c:	4770      	bx	lr
	...

08048940 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8048940:	b580      	push	{r7, lr}
 8048942:	b088      	sub	sp, #32
 8048944:	af00      	add	r7, sp, #0
 8048946:	60f8      	str	r0, [r7, #12]
 8048948:	60b9      	str	r1, [r7, #8]
 804894a:	603b      	str	r3, [r7, #0]
 804894c:	4613      	mov	r3, r2
 804894e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8048950:	f7fa fdda 	bl	8043508 <HAL_GetTick>
 8048954:	4602      	mov	r2, r0
 8048956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8048958:	1a9b      	subs	r3, r3, r2
 804895a:	683a      	ldr	r2, [r7, #0]
 804895c:	4413      	add	r3, r2
 804895e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8048960:	f7fa fdd2 	bl	8043508 <HAL_GetTick>
 8048964:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8048966:	4b39      	ldr	r3, [pc, #228]	; (8048a4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8048968:	681b      	ldr	r3, [r3, #0]
 804896a:	015b      	lsls	r3, r3, #5
 804896c:	0d1b      	lsrs	r3, r3, #20
 804896e:	69fa      	ldr	r2, [r7, #28]
 8048970:	fb02 f303 	mul.w	r3, r2, r3
 8048974:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8048976:	e054      	b.n	8048a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8048978:	683b      	ldr	r3, [r7, #0]
 804897a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804897e:	d050      	beq.n	8048a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8048980:	f7fa fdc2 	bl	8043508 <HAL_GetTick>
 8048984:	4602      	mov	r2, r0
 8048986:	69bb      	ldr	r3, [r7, #24]
 8048988:	1ad3      	subs	r3, r2, r3
 804898a:	69fa      	ldr	r2, [r7, #28]
 804898c:	429a      	cmp	r2, r3
 804898e:	d902      	bls.n	8048996 <SPI_WaitFlagStateUntilTimeout+0x56>
 8048990:	69fb      	ldr	r3, [r7, #28]
 8048992:	2b00      	cmp	r3, #0
 8048994:	d13d      	bne.n	8048a12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8048996:	68fb      	ldr	r3, [r7, #12]
 8048998:	681b      	ldr	r3, [r3, #0]
 804899a:	685a      	ldr	r2, [r3, #4]
 804899c:	68fb      	ldr	r3, [r7, #12]
 804899e:	681b      	ldr	r3, [r3, #0]
 80489a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80489a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80489a6:	68fb      	ldr	r3, [r7, #12]
 80489a8:	685b      	ldr	r3, [r3, #4]
 80489aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80489ae:	d111      	bne.n	80489d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80489b0:	68fb      	ldr	r3, [r7, #12]
 80489b2:	689b      	ldr	r3, [r3, #8]
 80489b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80489b8:	d004      	beq.n	80489c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80489ba:	68fb      	ldr	r3, [r7, #12]
 80489bc:	689b      	ldr	r3, [r3, #8]
 80489be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80489c2:	d107      	bne.n	80489d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80489c4:	68fb      	ldr	r3, [r7, #12]
 80489c6:	681b      	ldr	r3, [r3, #0]
 80489c8:	681a      	ldr	r2, [r3, #0]
 80489ca:	68fb      	ldr	r3, [r7, #12]
 80489cc:	681b      	ldr	r3, [r3, #0]
 80489ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80489d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80489d4:	68fb      	ldr	r3, [r7, #12]
 80489d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80489d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80489dc:	d10f      	bne.n	80489fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80489de:	68fb      	ldr	r3, [r7, #12]
 80489e0:	681b      	ldr	r3, [r3, #0]
 80489e2:	681a      	ldr	r2, [r3, #0]
 80489e4:	68fb      	ldr	r3, [r7, #12]
 80489e6:	681b      	ldr	r3, [r3, #0]
 80489e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80489ec:	601a      	str	r2, [r3, #0]
 80489ee:	68fb      	ldr	r3, [r7, #12]
 80489f0:	681b      	ldr	r3, [r3, #0]
 80489f2:	681a      	ldr	r2, [r3, #0]
 80489f4:	68fb      	ldr	r3, [r7, #12]
 80489f6:	681b      	ldr	r3, [r3, #0]
 80489f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80489fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80489fe:	68fb      	ldr	r3, [r7, #12]
 8048a00:	2201      	movs	r2, #1
 8048a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8048a06:	68fb      	ldr	r3, [r7, #12]
 8048a08:	2200      	movs	r2, #0
 8048a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8048a0e:	2303      	movs	r3, #3
 8048a10:	e017      	b.n	8048a42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8048a12:	697b      	ldr	r3, [r7, #20]
 8048a14:	2b00      	cmp	r3, #0
 8048a16:	d101      	bne.n	8048a1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8048a18:	2300      	movs	r3, #0
 8048a1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8048a1c:	697b      	ldr	r3, [r7, #20]
 8048a1e:	3b01      	subs	r3, #1
 8048a20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8048a22:	68fb      	ldr	r3, [r7, #12]
 8048a24:	681b      	ldr	r3, [r3, #0]
 8048a26:	689a      	ldr	r2, [r3, #8]
 8048a28:	68bb      	ldr	r3, [r7, #8]
 8048a2a:	4013      	ands	r3, r2
 8048a2c:	68ba      	ldr	r2, [r7, #8]
 8048a2e:	429a      	cmp	r2, r3
 8048a30:	bf0c      	ite	eq
 8048a32:	2301      	moveq	r3, #1
 8048a34:	2300      	movne	r3, #0
 8048a36:	b2db      	uxtb	r3, r3
 8048a38:	461a      	mov	r2, r3
 8048a3a:	79fb      	ldrb	r3, [r7, #7]
 8048a3c:	429a      	cmp	r2, r3
 8048a3e:	d19b      	bne.n	8048978 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8048a40:	2300      	movs	r3, #0
}
 8048a42:	4618      	mov	r0, r3
 8048a44:	3720      	adds	r7, #32
 8048a46:	46bd      	mov	sp, r7
 8048a48:	bd80      	pop	{r7, pc}
 8048a4a:	bf00      	nop
 8048a4c:	20000000 	.word	0x20000000

08048a50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8048a50:	b580      	push	{r7, lr}
 8048a52:	b086      	sub	sp, #24
 8048a54:	af02      	add	r7, sp, #8
 8048a56:	60f8      	str	r0, [r7, #12]
 8048a58:	60b9      	str	r1, [r7, #8]
 8048a5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8048a5c:	68fb      	ldr	r3, [r7, #12]
 8048a5e:	685b      	ldr	r3, [r3, #4]
 8048a60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8048a64:	d111      	bne.n	8048a8a <SPI_EndRxTransaction+0x3a>
 8048a66:	68fb      	ldr	r3, [r7, #12]
 8048a68:	689b      	ldr	r3, [r3, #8]
 8048a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8048a6e:	d004      	beq.n	8048a7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8048a70:	68fb      	ldr	r3, [r7, #12]
 8048a72:	689b      	ldr	r3, [r3, #8]
 8048a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8048a78:	d107      	bne.n	8048a8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8048a7a:	68fb      	ldr	r3, [r7, #12]
 8048a7c:	681b      	ldr	r3, [r3, #0]
 8048a7e:	681a      	ldr	r2, [r3, #0]
 8048a80:	68fb      	ldr	r3, [r7, #12]
 8048a82:	681b      	ldr	r3, [r3, #0]
 8048a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8048a88:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8048a8a:	68fb      	ldr	r3, [r7, #12]
 8048a8c:	685b      	ldr	r3, [r3, #4]
 8048a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8048a92:	d12a      	bne.n	8048aea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8048a94:	68fb      	ldr	r3, [r7, #12]
 8048a96:	689b      	ldr	r3, [r3, #8]
 8048a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8048a9c:	d012      	beq.n	8048ac4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8048a9e:	687b      	ldr	r3, [r7, #4]
 8048aa0:	9300      	str	r3, [sp, #0]
 8048aa2:	68bb      	ldr	r3, [r7, #8]
 8048aa4:	2200      	movs	r2, #0
 8048aa6:	2180      	movs	r1, #128	; 0x80
 8048aa8:	68f8      	ldr	r0, [r7, #12]
 8048aaa:	f7ff ff49 	bl	8048940 <SPI_WaitFlagStateUntilTimeout>
 8048aae:	4603      	mov	r3, r0
 8048ab0:	2b00      	cmp	r3, #0
 8048ab2:	d02d      	beq.n	8048b10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8048ab4:	68fb      	ldr	r3, [r7, #12]
 8048ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8048ab8:	f043 0220 	orr.w	r2, r3, #32
 8048abc:	68fb      	ldr	r3, [r7, #12]
 8048abe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8048ac0:	2303      	movs	r3, #3
 8048ac2:	e026      	b.n	8048b12 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8048ac4:	687b      	ldr	r3, [r7, #4]
 8048ac6:	9300      	str	r3, [sp, #0]
 8048ac8:	68bb      	ldr	r3, [r7, #8]
 8048aca:	2200      	movs	r2, #0
 8048acc:	2101      	movs	r1, #1
 8048ace:	68f8      	ldr	r0, [r7, #12]
 8048ad0:	f7ff ff36 	bl	8048940 <SPI_WaitFlagStateUntilTimeout>
 8048ad4:	4603      	mov	r3, r0
 8048ad6:	2b00      	cmp	r3, #0
 8048ad8:	d01a      	beq.n	8048b10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8048ada:	68fb      	ldr	r3, [r7, #12]
 8048adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8048ade:	f043 0220 	orr.w	r2, r3, #32
 8048ae2:	68fb      	ldr	r3, [r7, #12]
 8048ae4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8048ae6:	2303      	movs	r3, #3
 8048ae8:	e013      	b.n	8048b12 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8048aea:	687b      	ldr	r3, [r7, #4]
 8048aec:	9300      	str	r3, [sp, #0]
 8048aee:	68bb      	ldr	r3, [r7, #8]
 8048af0:	2200      	movs	r2, #0
 8048af2:	2101      	movs	r1, #1
 8048af4:	68f8      	ldr	r0, [r7, #12]
 8048af6:	f7ff ff23 	bl	8048940 <SPI_WaitFlagStateUntilTimeout>
 8048afa:	4603      	mov	r3, r0
 8048afc:	2b00      	cmp	r3, #0
 8048afe:	d007      	beq.n	8048b10 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8048b00:	68fb      	ldr	r3, [r7, #12]
 8048b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8048b04:	f043 0220 	orr.w	r2, r3, #32
 8048b08:	68fb      	ldr	r3, [r7, #12]
 8048b0a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8048b0c:	2303      	movs	r3, #3
 8048b0e:	e000      	b.n	8048b12 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8048b10:	2300      	movs	r3, #0
}
 8048b12:	4618      	mov	r0, r3
 8048b14:	3710      	adds	r7, #16
 8048b16:	46bd      	mov	sp, r7
 8048b18:	bd80      	pop	{r7, pc}
	...

08048b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8048b1c:	b580      	push	{r7, lr}
 8048b1e:	b088      	sub	sp, #32
 8048b20:	af02      	add	r7, sp, #8
 8048b22:	60f8      	str	r0, [r7, #12]
 8048b24:	60b9      	str	r1, [r7, #8]
 8048b26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8048b28:	4b1b      	ldr	r3, [pc, #108]	; (8048b98 <SPI_EndRxTxTransaction+0x7c>)
 8048b2a:	681b      	ldr	r3, [r3, #0]
 8048b2c:	4a1b      	ldr	r2, [pc, #108]	; (8048b9c <SPI_EndRxTxTransaction+0x80>)
 8048b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8048b32:	0d5b      	lsrs	r3, r3, #21
 8048b34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8048b38:	fb02 f303 	mul.w	r3, r2, r3
 8048b3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8048b3e:	68fb      	ldr	r3, [r7, #12]
 8048b40:	685b      	ldr	r3, [r3, #4]
 8048b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8048b46:	d112      	bne.n	8048b6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8048b48:	687b      	ldr	r3, [r7, #4]
 8048b4a:	9300      	str	r3, [sp, #0]
 8048b4c:	68bb      	ldr	r3, [r7, #8]
 8048b4e:	2200      	movs	r2, #0
 8048b50:	2180      	movs	r1, #128	; 0x80
 8048b52:	68f8      	ldr	r0, [r7, #12]
 8048b54:	f7ff fef4 	bl	8048940 <SPI_WaitFlagStateUntilTimeout>
 8048b58:	4603      	mov	r3, r0
 8048b5a:	2b00      	cmp	r3, #0
 8048b5c:	d016      	beq.n	8048b8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8048b5e:	68fb      	ldr	r3, [r7, #12]
 8048b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8048b62:	f043 0220 	orr.w	r2, r3, #32
 8048b66:	68fb      	ldr	r3, [r7, #12]
 8048b68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8048b6a:	2303      	movs	r3, #3
 8048b6c:	e00f      	b.n	8048b8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8048b6e:	697b      	ldr	r3, [r7, #20]
 8048b70:	2b00      	cmp	r3, #0
 8048b72:	d00a      	beq.n	8048b8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8048b74:	697b      	ldr	r3, [r7, #20]
 8048b76:	3b01      	subs	r3, #1
 8048b78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8048b7a:	68fb      	ldr	r3, [r7, #12]
 8048b7c:	681b      	ldr	r3, [r3, #0]
 8048b7e:	689b      	ldr	r3, [r3, #8]
 8048b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8048b84:	2b80      	cmp	r3, #128	; 0x80
 8048b86:	d0f2      	beq.n	8048b6e <SPI_EndRxTxTransaction+0x52>
 8048b88:	e000      	b.n	8048b8c <SPI_EndRxTxTransaction+0x70>
        break;
 8048b8a:	bf00      	nop
  }

  return HAL_OK;
 8048b8c:	2300      	movs	r3, #0
}
 8048b8e:	4618      	mov	r0, r3
 8048b90:	3718      	adds	r7, #24
 8048b92:	46bd      	mov	sp, r7
 8048b94:	bd80      	pop	{r7, pc}
 8048b96:	bf00      	nop
 8048b98:	20000000 	.word	0x20000000
 8048b9c:	165e9f81 	.word	0x165e9f81

08048ba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8048ba0:	b580      	push	{r7, lr}
 8048ba2:	b082      	sub	sp, #8
 8048ba4:	af00      	add	r7, sp, #0
 8048ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8048ba8:	687b      	ldr	r3, [r7, #4]
 8048baa:	2b00      	cmp	r3, #0
 8048bac:	d101      	bne.n	8048bb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8048bae:	2301      	movs	r3, #1
 8048bb0:	e041      	b.n	8048c36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8048bb2:	687b      	ldr	r3, [r7, #4]
 8048bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8048bb8:	b2db      	uxtb	r3, r3
 8048bba:	2b00      	cmp	r3, #0
 8048bbc:	d106      	bne.n	8048bcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8048bbe:	687b      	ldr	r3, [r7, #4]
 8048bc0:	2200      	movs	r2, #0
 8048bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8048bc6:	6878      	ldr	r0, [r7, #4]
 8048bc8:	f7f8 ff5c 	bl	8041a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8048bcc:	687b      	ldr	r3, [r7, #4]
 8048bce:	2202      	movs	r2, #2
 8048bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8048bd4:	687b      	ldr	r3, [r7, #4]
 8048bd6:	681a      	ldr	r2, [r3, #0]
 8048bd8:	687b      	ldr	r3, [r7, #4]
 8048bda:	3304      	adds	r3, #4
 8048bdc:	4619      	mov	r1, r3
 8048bde:	4610      	mov	r0, r2
 8048be0:	f000 fa96 	bl	8049110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8048be4:	687b      	ldr	r3, [r7, #4]
 8048be6:	2201      	movs	r2, #1
 8048be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8048bec:	687b      	ldr	r3, [r7, #4]
 8048bee:	2201      	movs	r2, #1
 8048bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8048bf4:	687b      	ldr	r3, [r7, #4]
 8048bf6:	2201      	movs	r2, #1
 8048bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8048bfc:	687b      	ldr	r3, [r7, #4]
 8048bfe:	2201      	movs	r2, #1
 8048c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8048c04:	687b      	ldr	r3, [r7, #4]
 8048c06:	2201      	movs	r2, #1
 8048c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8048c0c:	687b      	ldr	r3, [r7, #4]
 8048c0e:	2201      	movs	r2, #1
 8048c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8048c14:	687b      	ldr	r3, [r7, #4]
 8048c16:	2201      	movs	r2, #1
 8048c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8048c1c:	687b      	ldr	r3, [r7, #4]
 8048c1e:	2201      	movs	r2, #1
 8048c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8048c24:	687b      	ldr	r3, [r7, #4]
 8048c26:	2201      	movs	r2, #1
 8048c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8048c2c:	687b      	ldr	r3, [r7, #4]
 8048c2e:	2201      	movs	r2, #1
 8048c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8048c34:	2300      	movs	r3, #0
}
 8048c36:	4618      	mov	r0, r3
 8048c38:	3708      	adds	r7, #8
 8048c3a:	46bd      	mov	sp, r7
 8048c3c:	bd80      	pop	{r7, pc}
	...

08048c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8048c40:	b480      	push	{r7}
 8048c42:	b085      	sub	sp, #20
 8048c44:	af00      	add	r7, sp, #0
 8048c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8048c48:	687b      	ldr	r3, [r7, #4]
 8048c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8048c4e:	b2db      	uxtb	r3, r3
 8048c50:	2b01      	cmp	r3, #1
 8048c52:	d001      	beq.n	8048c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8048c54:	2301      	movs	r3, #1
 8048c56:	e04e      	b.n	8048cf6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8048c58:	687b      	ldr	r3, [r7, #4]
 8048c5a:	2202      	movs	r2, #2
 8048c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8048c60:	687b      	ldr	r3, [r7, #4]
 8048c62:	681b      	ldr	r3, [r3, #0]
 8048c64:	68da      	ldr	r2, [r3, #12]
 8048c66:	687b      	ldr	r3, [r7, #4]
 8048c68:	681b      	ldr	r3, [r3, #0]
 8048c6a:	f042 0201 	orr.w	r2, r2, #1
 8048c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8048c70:	687b      	ldr	r3, [r7, #4]
 8048c72:	681b      	ldr	r3, [r3, #0]
 8048c74:	4a23      	ldr	r2, [pc, #140]	; (8048d04 <HAL_TIM_Base_Start_IT+0xc4>)
 8048c76:	4293      	cmp	r3, r2
 8048c78:	d022      	beq.n	8048cc0 <HAL_TIM_Base_Start_IT+0x80>
 8048c7a:	687b      	ldr	r3, [r7, #4]
 8048c7c:	681b      	ldr	r3, [r3, #0]
 8048c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048c82:	d01d      	beq.n	8048cc0 <HAL_TIM_Base_Start_IT+0x80>
 8048c84:	687b      	ldr	r3, [r7, #4]
 8048c86:	681b      	ldr	r3, [r3, #0]
 8048c88:	4a1f      	ldr	r2, [pc, #124]	; (8048d08 <HAL_TIM_Base_Start_IT+0xc8>)
 8048c8a:	4293      	cmp	r3, r2
 8048c8c:	d018      	beq.n	8048cc0 <HAL_TIM_Base_Start_IT+0x80>
 8048c8e:	687b      	ldr	r3, [r7, #4]
 8048c90:	681b      	ldr	r3, [r3, #0]
 8048c92:	4a1e      	ldr	r2, [pc, #120]	; (8048d0c <HAL_TIM_Base_Start_IT+0xcc>)
 8048c94:	4293      	cmp	r3, r2
 8048c96:	d013      	beq.n	8048cc0 <HAL_TIM_Base_Start_IT+0x80>
 8048c98:	687b      	ldr	r3, [r7, #4]
 8048c9a:	681b      	ldr	r3, [r3, #0]
 8048c9c:	4a1c      	ldr	r2, [pc, #112]	; (8048d10 <HAL_TIM_Base_Start_IT+0xd0>)
 8048c9e:	4293      	cmp	r3, r2
 8048ca0:	d00e      	beq.n	8048cc0 <HAL_TIM_Base_Start_IT+0x80>
 8048ca2:	687b      	ldr	r3, [r7, #4]
 8048ca4:	681b      	ldr	r3, [r3, #0]
 8048ca6:	4a1b      	ldr	r2, [pc, #108]	; (8048d14 <HAL_TIM_Base_Start_IT+0xd4>)
 8048ca8:	4293      	cmp	r3, r2
 8048caa:	d009      	beq.n	8048cc0 <HAL_TIM_Base_Start_IT+0x80>
 8048cac:	687b      	ldr	r3, [r7, #4]
 8048cae:	681b      	ldr	r3, [r3, #0]
 8048cb0:	4a19      	ldr	r2, [pc, #100]	; (8048d18 <HAL_TIM_Base_Start_IT+0xd8>)
 8048cb2:	4293      	cmp	r3, r2
 8048cb4:	d004      	beq.n	8048cc0 <HAL_TIM_Base_Start_IT+0x80>
 8048cb6:	687b      	ldr	r3, [r7, #4]
 8048cb8:	681b      	ldr	r3, [r3, #0]
 8048cba:	4a18      	ldr	r2, [pc, #96]	; (8048d1c <HAL_TIM_Base_Start_IT+0xdc>)
 8048cbc:	4293      	cmp	r3, r2
 8048cbe:	d111      	bne.n	8048ce4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8048cc0:	687b      	ldr	r3, [r7, #4]
 8048cc2:	681b      	ldr	r3, [r3, #0]
 8048cc4:	689b      	ldr	r3, [r3, #8]
 8048cc6:	f003 0307 	and.w	r3, r3, #7
 8048cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8048ccc:	68fb      	ldr	r3, [r7, #12]
 8048cce:	2b06      	cmp	r3, #6
 8048cd0:	d010      	beq.n	8048cf4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8048cd2:	687b      	ldr	r3, [r7, #4]
 8048cd4:	681b      	ldr	r3, [r3, #0]
 8048cd6:	681a      	ldr	r2, [r3, #0]
 8048cd8:	687b      	ldr	r3, [r7, #4]
 8048cda:	681b      	ldr	r3, [r3, #0]
 8048cdc:	f042 0201 	orr.w	r2, r2, #1
 8048ce0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8048ce2:	e007      	b.n	8048cf4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8048ce4:	687b      	ldr	r3, [r7, #4]
 8048ce6:	681b      	ldr	r3, [r3, #0]
 8048ce8:	681a      	ldr	r2, [r3, #0]
 8048cea:	687b      	ldr	r3, [r7, #4]
 8048cec:	681b      	ldr	r3, [r3, #0]
 8048cee:	f042 0201 	orr.w	r2, r2, #1
 8048cf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8048cf4:	2300      	movs	r3, #0
}
 8048cf6:	4618      	mov	r0, r3
 8048cf8:	3714      	adds	r7, #20
 8048cfa:	46bd      	mov	sp, r7
 8048cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048d00:	4770      	bx	lr
 8048d02:	bf00      	nop
 8048d04:	40010000 	.word	0x40010000
 8048d08:	40000400 	.word	0x40000400
 8048d0c:	40000800 	.word	0x40000800
 8048d10:	40000c00 	.word	0x40000c00
 8048d14:	40010400 	.word	0x40010400
 8048d18:	40014000 	.word	0x40014000
 8048d1c:	40001800 	.word	0x40001800

08048d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8048d20:	b580      	push	{r7, lr}
 8048d22:	b082      	sub	sp, #8
 8048d24:	af00      	add	r7, sp, #0
 8048d26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8048d28:	687b      	ldr	r3, [r7, #4]
 8048d2a:	681b      	ldr	r3, [r3, #0]
 8048d2c:	691b      	ldr	r3, [r3, #16]
 8048d2e:	f003 0302 	and.w	r3, r3, #2
 8048d32:	2b02      	cmp	r3, #2
 8048d34:	d122      	bne.n	8048d7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8048d36:	687b      	ldr	r3, [r7, #4]
 8048d38:	681b      	ldr	r3, [r3, #0]
 8048d3a:	68db      	ldr	r3, [r3, #12]
 8048d3c:	f003 0302 	and.w	r3, r3, #2
 8048d40:	2b02      	cmp	r3, #2
 8048d42:	d11b      	bne.n	8048d7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8048d44:	687b      	ldr	r3, [r7, #4]
 8048d46:	681b      	ldr	r3, [r3, #0]
 8048d48:	f06f 0202 	mvn.w	r2, #2
 8048d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8048d4e:	687b      	ldr	r3, [r7, #4]
 8048d50:	2201      	movs	r2, #1
 8048d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8048d54:	687b      	ldr	r3, [r7, #4]
 8048d56:	681b      	ldr	r3, [r3, #0]
 8048d58:	699b      	ldr	r3, [r3, #24]
 8048d5a:	f003 0303 	and.w	r3, r3, #3
 8048d5e:	2b00      	cmp	r3, #0
 8048d60:	d003      	beq.n	8048d6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8048d62:	6878      	ldr	r0, [r7, #4]
 8048d64:	f000 f9b5 	bl	80490d2 <HAL_TIM_IC_CaptureCallback>
 8048d68:	e005      	b.n	8048d76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8048d6a:	6878      	ldr	r0, [r7, #4]
 8048d6c:	f000 f9a7 	bl	80490be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8048d70:	6878      	ldr	r0, [r7, #4]
 8048d72:	f000 f9b8 	bl	80490e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8048d76:	687b      	ldr	r3, [r7, #4]
 8048d78:	2200      	movs	r2, #0
 8048d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8048d7c:	687b      	ldr	r3, [r7, #4]
 8048d7e:	681b      	ldr	r3, [r3, #0]
 8048d80:	691b      	ldr	r3, [r3, #16]
 8048d82:	f003 0304 	and.w	r3, r3, #4
 8048d86:	2b04      	cmp	r3, #4
 8048d88:	d122      	bne.n	8048dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8048d8a:	687b      	ldr	r3, [r7, #4]
 8048d8c:	681b      	ldr	r3, [r3, #0]
 8048d8e:	68db      	ldr	r3, [r3, #12]
 8048d90:	f003 0304 	and.w	r3, r3, #4
 8048d94:	2b04      	cmp	r3, #4
 8048d96:	d11b      	bne.n	8048dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8048d98:	687b      	ldr	r3, [r7, #4]
 8048d9a:	681b      	ldr	r3, [r3, #0]
 8048d9c:	f06f 0204 	mvn.w	r2, #4
 8048da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8048da2:	687b      	ldr	r3, [r7, #4]
 8048da4:	2202      	movs	r2, #2
 8048da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8048da8:	687b      	ldr	r3, [r7, #4]
 8048daa:	681b      	ldr	r3, [r3, #0]
 8048dac:	699b      	ldr	r3, [r3, #24]
 8048dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8048db2:	2b00      	cmp	r3, #0
 8048db4:	d003      	beq.n	8048dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8048db6:	6878      	ldr	r0, [r7, #4]
 8048db8:	f000 f98b 	bl	80490d2 <HAL_TIM_IC_CaptureCallback>
 8048dbc:	e005      	b.n	8048dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8048dbe:	6878      	ldr	r0, [r7, #4]
 8048dc0:	f000 f97d 	bl	80490be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8048dc4:	6878      	ldr	r0, [r7, #4]
 8048dc6:	f000 f98e 	bl	80490e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8048dca:	687b      	ldr	r3, [r7, #4]
 8048dcc:	2200      	movs	r2, #0
 8048dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8048dd0:	687b      	ldr	r3, [r7, #4]
 8048dd2:	681b      	ldr	r3, [r3, #0]
 8048dd4:	691b      	ldr	r3, [r3, #16]
 8048dd6:	f003 0308 	and.w	r3, r3, #8
 8048dda:	2b08      	cmp	r3, #8
 8048ddc:	d122      	bne.n	8048e24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8048dde:	687b      	ldr	r3, [r7, #4]
 8048de0:	681b      	ldr	r3, [r3, #0]
 8048de2:	68db      	ldr	r3, [r3, #12]
 8048de4:	f003 0308 	and.w	r3, r3, #8
 8048de8:	2b08      	cmp	r3, #8
 8048dea:	d11b      	bne.n	8048e24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8048dec:	687b      	ldr	r3, [r7, #4]
 8048dee:	681b      	ldr	r3, [r3, #0]
 8048df0:	f06f 0208 	mvn.w	r2, #8
 8048df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8048df6:	687b      	ldr	r3, [r7, #4]
 8048df8:	2204      	movs	r2, #4
 8048dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8048dfc:	687b      	ldr	r3, [r7, #4]
 8048dfe:	681b      	ldr	r3, [r3, #0]
 8048e00:	69db      	ldr	r3, [r3, #28]
 8048e02:	f003 0303 	and.w	r3, r3, #3
 8048e06:	2b00      	cmp	r3, #0
 8048e08:	d003      	beq.n	8048e12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8048e0a:	6878      	ldr	r0, [r7, #4]
 8048e0c:	f000 f961 	bl	80490d2 <HAL_TIM_IC_CaptureCallback>
 8048e10:	e005      	b.n	8048e1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8048e12:	6878      	ldr	r0, [r7, #4]
 8048e14:	f000 f953 	bl	80490be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8048e18:	6878      	ldr	r0, [r7, #4]
 8048e1a:	f000 f964 	bl	80490e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8048e1e:	687b      	ldr	r3, [r7, #4]
 8048e20:	2200      	movs	r2, #0
 8048e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8048e24:	687b      	ldr	r3, [r7, #4]
 8048e26:	681b      	ldr	r3, [r3, #0]
 8048e28:	691b      	ldr	r3, [r3, #16]
 8048e2a:	f003 0310 	and.w	r3, r3, #16
 8048e2e:	2b10      	cmp	r3, #16
 8048e30:	d122      	bne.n	8048e78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8048e32:	687b      	ldr	r3, [r7, #4]
 8048e34:	681b      	ldr	r3, [r3, #0]
 8048e36:	68db      	ldr	r3, [r3, #12]
 8048e38:	f003 0310 	and.w	r3, r3, #16
 8048e3c:	2b10      	cmp	r3, #16
 8048e3e:	d11b      	bne.n	8048e78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8048e40:	687b      	ldr	r3, [r7, #4]
 8048e42:	681b      	ldr	r3, [r3, #0]
 8048e44:	f06f 0210 	mvn.w	r2, #16
 8048e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8048e4a:	687b      	ldr	r3, [r7, #4]
 8048e4c:	2208      	movs	r2, #8
 8048e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8048e50:	687b      	ldr	r3, [r7, #4]
 8048e52:	681b      	ldr	r3, [r3, #0]
 8048e54:	69db      	ldr	r3, [r3, #28]
 8048e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8048e5a:	2b00      	cmp	r3, #0
 8048e5c:	d003      	beq.n	8048e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8048e5e:	6878      	ldr	r0, [r7, #4]
 8048e60:	f000 f937 	bl	80490d2 <HAL_TIM_IC_CaptureCallback>
 8048e64:	e005      	b.n	8048e72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8048e66:	6878      	ldr	r0, [r7, #4]
 8048e68:	f000 f929 	bl	80490be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8048e6c:	6878      	ldr	r0, [r7, #4]
 8048e6e:	f000 f93a 	bl	80490e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8048e72:	687b      	ldr	r3, [r7, #4]
 8048e74:	2200      	movs	r2, #0
 8048e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8048e78:	687b      	ldr	r3, [r7, #4]
 8048e7a:	681b      	ldr	r3, [r3, #0]
 8048e7c:	691b      	ldr	r3, [r3, #16]
 8048e7e:	f003 0301 	and.w	r3, r3, #1
 8048e82:	2b01      	cmp	r3, #1
 8048e84:	d10e      	bne.n	8048ea4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8048e86:	687b      	ldr	r3, [r7, #4]
 8048e88:	681b      	ldr	r3, [r3, #0]
 8048e8a:	68db      	ldr	r3, [r3, #12]
 8048e8c:	f003 0301 	and.w	r3, r3, #1
 8048e90:	2b01      	cmp	r3, #1
 8048e92:	d107      	bne.n	8048ea4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8048e94:	687b      	ldr	r3, [r7, #4]
 8048e96:	681b      	ldr	r3, [r3, #0]
 8048e98:	f06f 0201 	mvn.w	r2, #1
 8048e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8048e9e:	6878      	ldr	r0, [r7, #4]
 8048ea0:	f7f8 f826 	bl	8040ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8048ea4:	687b      	ldr	r3, [r7, #4]
 8048ea6:	681b      	ldr	r3, [r3, #0]
 8048ea8:	691b      	ldr	r3, [r3, #16]
 8048eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8048eae:	2b80      	cmp	r3, #128	; 0x80
 8048eb0:	d10e      	bne.n	8048ed0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8048eb2:	687b      	ldr	r3, [r7, #4]
 8048eb4:	681b      	ldr	r3, [r3, #0]
 8048eb6:	68db      	ldr	r3, [r3, #12]
 8048eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8048ebc:	2b80      	cmp	r3, #128	; 0x80
 8048ebe:	d107      	bne.n	8048ed0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8048ec0:	687b      	ldr	r3, [r7, #4]
 8048ec2:	681b      	ldr	r3, [r3, #0]
 8048ec4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8048ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8048eca:	6878      	ldr	r0, [r7, #4]
 8048ecc:	f000 fae0 	bl	8049490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8048ed0:	687b      	ldr	r3, [r7, #4]
 8048ed2:	681b      	ldr	r3, [r3, #0]
 8048ed4:	691b      	ldr	r3, [r3, #16]
 8048ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8048eda:	2b40      	cmp	r3, #64	; 0x40
 8048edc:	d10e      	bne.n	8048efc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8048ede:	687b      	ldr	r3, [r7, #4]
 8048ee0:	681b      	ldr	r3, [r3, #0]
 8048ee2:	68db      	ldr	r3, [r3, #12]
 8048ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8048ee8:	2b40      	cmp	r3, #64	; 0x40
 8048eea:	d107      	bne.n	8048efc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8048eec:	687b      	ldr	r3, [r7, #4]
 8048eee:	681b      	ldr	r3, [r3, #0]
 8048ef0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8048ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8048ef6:	6878      	ldr	r0, [r7, #4]
 8048ef8:	f000 f8ff 	bl	80490fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8048efc:	687b      	ldr	r3, [r7, #4]
 8048efe:	681b      	ldr	r3, [r3, #0]
 8048f00:	691b      	ldr	r3, [r3, #16]
 8048f02:	f003 0320 	and.w	r3, r3, #32
 8048f06:	2b20      	cmp	r3, #32
 8048f08:	d10e      	bne.n	8048f28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8048f0a:	687b      	ldr	r3, [r7, #4]
 8048f0c:	681b      	ldr	r3, [r3, #0]
 8048f0e:	68db      	ldr	r3, [r3, #12]
 8048f10:	f003 0320 	and.w	r3, r3, #32
 8048f14:	2b20      	cmp	r3, #32
 8048f16:	d107      	bne.n	8048f28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8048f18:	687b      	ldr	r3, [r7, #4]
 8048f1a:	681b      	ldr	r3, [r3, #0]
 8048f1c:	f06f 0220 	mvn.w	r2, #32
 8048f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8048f22:	6878      	ldr	r0, [r7, #4]
 8048f24:	f000 faaa 	bl	804947c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8048f28:	bf00      	nop
 8048f2a:	3708      	adds	r7, #8
 8048f2c:	46bd      	mov	sp, r7
 8048f2e:	bd80      	pop	{r7, pc}

08048f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8048f30:	b580      	push	{r7, lr}
 8048f32:	b084      	sub	sp, #16
 8048f34:	af00      	add	r7, sp, #0
 8048f36:	6078      	str	r0, [r7, #4]
 8048f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8048f3a:	2300      	movs	r3, #0
 8048f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8048f3e:	687b      	ldr	r3, [r7, #4]
 8048f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8048f44:	2b01      	cmp	r3, #1
 8048f46:	d101      	bne.n	8048f4c <HAL_TIM_ConfigClockSource+0x1c>
 8048f48:	2302      	movs	r3, #2
 8048f4a:	e0b4      	b.n	80490b6 <HAL_TIM_ConfigClockSource+0x186>
 8048f4c:	687b      	ldr	r3, [r7, #4]
 8048f4e:	2201      	movs	r2, #1
 8048f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8048f54:	687b      	ldr	r3, [r7, #4]
 8048f56:	2202      	movs	r2, #2
 8048f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8048f5c:	687b      	ldr	r3, [r7, #4]
 8048f5e:	681b      	ldr	r3, [r3, #0]
 8048f60:	689b      	ldr	r3, [r3, #8]
 8048f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8048f64:	68bb      	ldr	r3, [r7, #8]
 8048f66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8048f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8048f6c:	68bb      	ldr	r3, [r7, #8]
 8048f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8048f72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8048f74:	687b      	ldr	r3, [r7, #4]
 8048f76:	681b      	ldr	r3, [r3, #0]
 8048f78:	68ba      	ldr	r2, [r7, #8]
 8048f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8048f7c:	683b      	ldr	r3, [r7, #0]
 8048f7e:	681b      	ldr	r3, [r3, #0]
 8048f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8048f84:	d03e      	beq.n	8049004 <HAL_TIM_ConfigClockSource+0xd4>
 8048f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8048f8a:	f200 8087 	bhi.w	804909c <HAL_TIM_ConfigClockSource+0x16c>
 8048f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8048f92:	f000 8086 	beq.w	80490a2 <HAL_TIM_ConfigClockSource+0x172>
 8048f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8048f9a:	d87f      	bhi.n	804909c <HAL_TIM_ConfigClockSource+0x16c>
 8048f9c:	2b70      	cmp	r3, #112	; 0x70
 8048f9e:	d01a      	beq.n	8048fd6 <HAL_TIM_ConfigClockSource+0xa6>
 8048fa0:	2b70      	cmp	r3, #112	; 0x70
 8048fa2:	d87b      	bhi.n	804909c <HAL_TIM_ConfigClockSource+0x16c>
 8048fa4:	2b60      	cmp	r3, #96	; 0x60
 8048fa6:	d050      	beq.n	804904a <HAL_TIM_ConfigClockSource+0x11a>
 8048fa8:	2b60      	cmp	r3, #96	; 0x60
 8048faa:	d877      	bhi.n	804909c <HAL_TIM_ConfigClockSource+0x16c>
 8048fac:	2b50      	cmp	r3, #80	; 0x50
 8048fae:	d03c      	beq.n	804902a <HAL_TIM_ConfigClockSource+0xfa>
 8048fb0:	2b50      	cmp	r3, #80	; 0x50
 8048fb2:	d873      	bhi.n	804909c <HAL_TIM_ConfigClockSource+0x16c>
 8048fb4:	2b40      	cmp	r3, #64	; 0x40
 8048fb6:	d058      	beq.n	804906a <HAL_TIM_ConfigClockSource+0x13a>
 8048fb8:	2b40      	cmp	r3, #64	; 0x40
 8048fba:	d86f      	bhi.n	804909c <HAL_TIM_ConfigClockSource+0x16c>
 8048fbc:	2b30      	cmp	r3, #48	; 0x30
 8048fbe:	d064      	beq.n	804908a <HAL_TIM_ConfigClockSource+0x15a>
 8048fc0:	2b30      	cmp	r3, #48	; 0x30
 8048fc2:	d86b      	bhi.n	804909c <HAL_TIM_ConfigClockSource+0x16c>
 8048fc4:	2b20      	cmp	r3, #32
 8048fc6:	d060      	beq.n	804908a <HAL_TIM_ConfigClockSource+0x15a>
 8048fc8:	2b20      	cmp	r3, #32
 8048fca:	d867      	bhi.n	804909c <HAL_TIM_ConfigClockSource+0x16c>
 8048fcc:	2b00      	cmp	r3, #0
 8048fce:	d05c      	beq.n	804908a <HAL_TIM_ConfigClockSource+0x15a>
 8048fd0:	2b10      	cmp	r3, #16
 8048fd2:	d05a      	beq.n	804908a <HAL_TIM_ConfigClockSource+0x15a>
 8048fd4:	e062      	b.n	804909c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8048fd6:	687b      	ldr	r3, [r7, #4]
 8048fd8:	6818      	ldr	r0, [r3, #0]
 8048fda:	683b      	ldr	r3, [r7, #0]
 8048fdc:	6899      	ldr	r1, [r3, #8]
 8048fde:	683b      	ldr	r3, [r7, #0]
 8048fe0:	685a      	ldr	r2, [r3, #4]
 8048fe2:	683b      	ldr	r3, [r7, #0]
 8048fe4:	68db      	ldr	r3, [r3, #12]
 8048fe6:	f000 f9ad 	bl	8049344 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8048fea:	687b      	ldr	r3, [r7, #4]
 8048fec:	681b      	ldr	r3, [r3, #0]
 8048fee:	689b      	ldr	r3, [r3, #8]
 8048ff0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8048ff2:	68bb      	ldr	r3, [r7, #8]
 8048ff4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8048ff8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8048ffa:	687b      	ldr	r3, [r7, #4]
 8048ffc:	681b      	ldr	r3, [r3, #0]
 8048ffe:	68ba      	ldr	r2, [r7, #8]
 8049000:	609a      	str	r2, [r3, #8]
      break;
 8049002:	e04f      	b.n	80490a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8049004:	687b      	ldr	r3, [r7, #4]
 8049006:	6818      	ldr	r0, [r3, #0]
 8049008:	683b      	ldr	r3, [r7, #0]
 804900a:	6899      	ldr	r1, [r3, #8]
 804900c:	683b      	ldr	r3, [r7, #0]
 804900e:	685a      	ldr	r2, [r3, #4]
 8049010:	683b      	ldr	r3, [r7, #0]
 8049012:	68db      	ldr	r3, [r3, #12]
 8049014:	f000 f996 	bl	8049344 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8049018:	687b      	ldr	r3, [r7, #4]
 804901a:	681b      	ldr	r3, [r3, #0]
 804901c:	689a      	ldr	r2, [r3, #8]
 804901e:	687b      	ldr	r3, [r7, #4]
 8049020:	681b      	ldr	r3, [r3, #0]
 8049022:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8049026:	609a      	str	r2, [r3, #8]
      break;
 8049028:	e03c      	b.n	80490a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 804902a:	687b      	ldr	r3, [r7, #4]
 804902c:	6818      	ldr	r0, [r3, #0]
 804902e:	683b      	ldr	r3, [r7, #0]
 8049030:	6859      	ldr	r1, [r3, #4]
 8049032:	683b      	ldr	r3, [r7, #0]
 8049034:	68db      	ldr	r3, [r3, #12]
 8049036:	461a      	mov	r2, r3
 8049038:	f000 f90a 	bl	8049250 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 804903c:	687b      	ldr	r3, [r7, #4]
 804903e:	681b      	ldr	r3, [r3, #0]
 8049040:	2150      	movs	r1, #80	; 0x50
 8049042:	4618      	mov	r0, r3
 8049044:	f000 f963 	bl	804930e <TIM_ITRx_SetConfig>
      break;
 8049048:	e02c      	b.n	80490a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 804904a:	687b      	ldr	r3, [r7, #4]
 804904c:	6818      	ldr	r0, [r3, #0]
 804904e:	683b      	ldr	r3, [r7, #0]
 8049050:	6859      	ldr	r1, [r3, #4]
 8049052:	683b      	ldr	r3, [r7, #0]
 8049054:	68db      	ldr	r3, [r3, #12]
 8049056:	461a      	mov	r2, r3
 8049058:	f000 f929 	bl	80492ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 804905c:	687b      	ldr	r3, [r7, #4]
 804905e:	681b      	ldr	r3, [r3, #0]
 8049060:	2160      	movs	r1, #96	; 0x60
 8049062:	4618      	mov	r0, r3
 8049064:	f000 f953 	bl	804930e <TIM_ITRx_SetConfig>
      break;
 8049068:	e01c      	b.n	80490a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 804906a:	687b      	ldr	r3, [r7, #4]
 804906c:	6818      	ldr	r0, [r3, #0]
 804906e:	683b      	ldr	r3, [r7, #0]
 8049070:	6859      	ldr	r1, [r3, #4]
 8049072:	683b      	ldr	r3, [r7, #0]
 8049074:	68db      	ldr	r3, [r3, #12]
 8049076:	461a      	mov	r2, r3
 8049078:	f000 f8ea 	bl	8049250 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 804907c:	687b      	ldr	r3, [r7, #4]
 804907e:	681b      	ldr	r3, [r3, #0]
 8049080:	2140      	movs	r1, #64	; 0x40
 8049082:	4618      	mov	r0, r3
 8049084:	f000 f943 	bl	804930e <TIM_ITRx_SetConfig>
      break;
 8049088:	e00c      	b.n	80490a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 804908a:	687b      	ldr	r3, [r7, #4]
 804908c:	681a      	ldr	r2, [r3, #0]
 804908e:	683b      	ldr	r3, [r7, #0]
 8049090:	681b      	ldr	r3, [r3, #0]
 8049092:	4619      	mov	r1, r3
 8049094:	4610      	mov	r0, r2
 8049096:	f000 f93a 	bl	804930e <TIM_ITRx_SetConfig>
      break;
 804909a:	e003      	b.n	80490a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 804909c:	2301      	movs	r3, #1
 804909e:	73fb      	strb	r3, [r7, #15]
      break;
 80490a0:	e000      	b.n	80490a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80490a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80490a4:	687b      	ldr	r3, [r7, #4]
 80490a6:	2201      	movs	r2, #1
 80490a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80490ac:	687b      	ldr	r3, [r7, #4]
 80490ae:	2200      	movs	r2, #0
 80490b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80490b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80490b6:	4618      	mov	r0, r3
 80490b8:	3710      	adds	r7, #16
 80490ba:	46bd      	mov	sp, r7
 80490bc:	bd80      	pop	{r7, pc}

080490be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80490be:	b480      	push	{r7}
 80490c0:	b083      	sub	sp, #12
 80490c2:	af00      	add	r7, sp, #0
 80490c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80490c6:	bf00      	nop
 80490c8:	370c      	adds	r7, #12
 80490ca:	46bd      	mov	sp, r7
 80490cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80490d0:	4770      	bx	lr

080490d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80490d2:	b480      	push	{r7}
 80490d4:	b083      	sub	sp, #12
 80490d6:	af00      	add	r7, sp, #0
 80490d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80490da:	bf00      	nop
 80490dc:	370c      	adds	r7, #12
 80490de:	46bd      	mov	sp, r7
 80490e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80490e4:	4770      	bx	lr

080490e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80490e6:	b480      	push	{r7}
 80490e8:	b083      	sub	sp, #12
 80490ea:	af00      	add	r7, sp, #0
 80490ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80490ee:	bf00      	nop
 80490f0:	370c      	adds	r7, #12
 80490f2:	46bd      	mov	sp, r7
 80490f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80490f8:	4770      	bx	lr

080490fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80490fa:	b480      	push	{r7}
 80490fc:	b083      	sub	sp, #12
 80490fe:	af00      	add	r7, sp, #0
 8049100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8049102:	bf00      	nop
 8049104:	370c      	adds	r7, #12
 8049106:	46bd      	mov	sp, r7
 8049108:	f85d 7b04 	ldr.w	r7, [sp], #4
 804910c:	4770      	bx	lr
	...

08049110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8049110:	b480      	push	{r7}
 8049112:	b085      	sub	sp, #20
 8049114:	af00      	add	r7, sp, #0
 8049116:	6078      	str	r0, [r7, #4]
 8049118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 804911a:	687b      	ldr	r3, [r7, #4]
 804911c:	681b      	ldr	r3, [r3, #0]
 804911e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8049120:	687b      	ldr	r3, [r7, #4]
 8049122:	4a40      	ldr	r2, [pc, #256]	; (8049224 <TIM_Base_SetConfig+0x114>)
 8049124:	4293      	cmp	r3, r2
 8049126:	d013      	beq.n	8049150 <TIM_Base_SetConfig+0x40>
 8049128:	687b      	ldr	r3, [r7, #4]
 804912a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804912e:	d00f      	beq.n	8049150 <TIM_Base_SetConfig+0x40>
 8049130:	687b      	ldr	r3, [r7, #4]
 8049132:	4a3d      	ldr	r2, [pc, #244]	; (8049228 <TIM_Base_SetConfig+0x118>)
 8049134:	4293      	cmp	r3, r2
 8049136:	d00b      	beq.n	8049150 <TIM_Base_SetConfig+0x40>
 8049138:	687b      	ldr	r3, [r7, #4]
 804913a:	4a3c      	ldr	r2, [pc, #240]	; (804922c <TIM_Base_SetConfig+0x11c>)
 804913c:	4293      	cmp	r3, r2
 804913e:	d007      	beq.n	8049150 <TIM_Base_SetConfig+0x40>
 8049140:	687b      	ldr	r3, [r7, #4]
 8049142:	4a3b      	ldr	r2, [pc, #236]	; (8049230 <TIM_Base_SetConfig+0x120>)
 8049144:	4293      	cmp	r3, r2
 8049146:	d003      	beq.n	8049150 <TIM_Base_SetConfig+0x40>
 8049148:	687b      	ldr	r3, [r7, #4]
 804914a:	4a3a      	ldr	r2, [pc, #232]	; (8049234 <TIM_Base_SetConfig+0x124>)
 804914c:	4293      	cmp	r3, r2
 804914e:	d108      	bne.n	8049162 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8049150:	68fb      	ldr	r3, [r7, #12]
 8049152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8049156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8049158:	683b      	ldr	r3, [r7, #0]
 804915a:	685b      	ldr	r3, [r3, #4]
 804915c:	68fa      	ldr	r2, [r7, #12]
 804915e:	4313      	orrs	r3, r2
 8049160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8049162:	687b      	ldr	r3, [r7, #4]
 8049164:	4a2f      	ldr	r2, [pc, #188]	; (8049224 <TIM_Base_SetConfig+0x114>)
 8049166:	4293      	cmp	r3, r2
 8049168:	d02b      	beq.n	80491c2 <TIM_Base_SetConfig+0xb2>
 804916a:	687b      	ldr	r3, [r7, #4]
 804916c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8049170:	d027      	beq.n	80491c2 <TIM_Base_SetConfig+0xb2>
 8049172:	687b      	ldr	r3, [r7, #4]
 8049174:	4a2c      	ldr	r2, [pc, #176]	; (8049228 <TIM_Base_SetConfig+0x118>)
 8049176:	4293      	cmp	r3, r2
 8049178:	d023      	beq.n	80491c2 <TIM_Base_SetConfig+0xb2>
 804917a:	687b      	ldr	r3, [r7, #4]
 804917c:	4a2b      	ldr	r2, [pc, #172]	; (804922c <TIM_Base_SetConfig+0x11c>)
 804917e:	4293      	cmp	r3, r2
 8049180:	d01f      	beq.n	80491c2 <TIM_Base_SetConfig+0xb2>
 8049182:	687b      	ldr	r3, [r7, #4]
 8049184:	4a2a      	ldr	r2, [pc, #168]	; (8049230 <TIM_Base_SetConfig+0x120>)
 8049186:	4293      	cmp	r3, r2
 8049188:	d01b      	beq.n	80491c2 <TIM_Base_SetConfig+0xb2>
 804918a:	687b      	ldr	r3, [r7, #4]
 804918c:	4a29      	ldr	r2, [pc, #164]	; (8049234 <TIM_Base_SetConfig+0x124>)
 804918e:	4293      	cmp	r3, r2
 8049190:	d017      	beq.n	80491c2 <TIM_Base_SetConfig+0xb2>
 8049192:	687b      	ldr	r3, [r7, #4]
 8049194:	4a28      	ldr	r2, [pc, #160]	; (8049238 <TIM_Base_SetConfig+0x128>)
 8049196:	4293      	cmp	r3, r2
 8049198:	d013      	beq.n	80491c2 <TIM_Base_SetConfig+0xb2>
 804919a:	687b      	ldr	r3, [r7, #4]
 804919c:	4a27      	ldr	r2, [pc, #156]	; (804923c <TIM_Base_SetConfig+0x12c>)
 804919e:	4293      	cmp	r3, r2
 80491a0:	d00f      	beq.n	80491c2 <TIM_Base_SetConfig+0xb2>
 80491a2:	687b      	ldr	r3, [r7, #4]
 80491a4:	4a26      	ldr	r2, [pc, #152]	; (8049240 <TIM_Base_SetConfig+0x130>)
 80491a6:	4293      	cmp	r3, r2
 80491a8:	d00b      	beq.n	80491c2 <TIM_Base_SetConfig+0xb2>
 80491aa:	687b      	ldr	r3, [r7, #4]
 80491ac:	4a25      	ldr	r2, [pc, #148]	; (8049244 <TIM_Base_SetConfig+0x134>)
 80491ae:	4293      	cmp	r3, r2
 80491b0:	d007      	beq.n	80491c2 <TIM_Base_SetConfig+0xb2>
 80491b2:	687b      	ldr	r3, [r7, #4]
 80491b4:	4a24      	ldr	r2, [pc, #144]	; (8049248 <TIM_Base_SetConfig+0x138>)
 80491b6:	4293      	cmp	r3, r2
 80491b8:	d003      	beq.n	80491c2 <TIM_Base_SetConfig+0xb2>
 80491ba:	687b      	ldr	r3, [r7, #4]
 80491bc:	4a23      	ldr	r2, [pc, #140]	; (804924c <TIM_Base_SetConfig+0x13c>)
 80491be:	4293      	cmp	r3, r2
 80491c0:	d108      	bne.n	80491d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80491c2:	68fb      	ldr	r3, [r7, #12]
 80491c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80491c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80491ca:	683b      	ldr	r3, [r7, #0]
 80491cc:	68db      	ldr	r3, [r3, #12]
 80491ce:	68fa      	ldr	r2, [r7, #12]
 80491d0:	4313      	orrs	r3, r2
 80491d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80491d4:	68fb      	ldr	r3, [r7, #12]
 80491d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80491da:	683b      	ldr	r3, [r7, #0]
 80491dc:	695b      	ldr	r3, [r3, #20]
 80491de:	4313      	orrs	r3, r2
 80491e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80491e2:	687b      	ldr	r3, [r7, #4]
 80491e4:	68fa      	ldr	r2, [r7, #12]
 80491e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80491e8:	683b      	ldr	r3, [r7, #0]
 80491ea:	689a      	ldr	r2, [r3, #8]
 80491ec:	687b      	ldr	r3, [r7, #4]
 80491ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80491f0:	683b      	ldr	r3, [r7, #0]
 80491f2:	681a      	ldr	r2, [r3, #0]
 80491f4:	687b      	ldr	r3, [r7, #4]
 80491f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80491f8:	687b      	ldr	r3, [r7, #4]
 80491fa:	4a0a      	ldr	r2, [pc, #40]	; (8049224 <TIM_Base_SetConfig+0x114>)
 80491fc:	4293      	cmp	r3, r2
 80491fe:	d003      	beq.n	8049208 <TIM_Base_SetConfig+0xf8>
 8049200:	687b      	ldr	r3, [r7, #4]
 8049202:	4a0c      	ldr	r2, [pc, #48]	; (8049234 <TIM_Base_SetConfig+0x124>)
 8049204:	4293      	cmp	r3, r2
 8049206:	d103      	bne.n	8049210 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8049208:	683b      	ldr	r3, [r7, #0]
 804920a:	691a      	ldr	r2, [r3, #16]
 804920c:	687b      	ldr	r3, [r7, #4]
 804920e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8049210:	687b      	ldr	r3, [r7, #4]
 8049212:	2201      	movs	r2, #1
 8049214:	615a      	str	r2, [r3, #20]
}
 8049216:	bf00      	nop
 8049218:	3714      	adds	r7, #20
 804921a:	46bd      	mov	sp, r7
 804921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049220:	4770      	bx	lr
 8049222:	bf00      	nop
 8049224:	40010000 	.word	0x40010000
 8049228:	40000400 	.word	0x40000400
 804922c:	40000800 	.word	0x40000800
 8049230:	40000c00 	.word	0x40000c00
 8049234:	40010400 	.word	0x40010400
 8049238:	40014000 	.word	0x40014000
 804923c:	40014400 	.word	0x40014400
 8049240:	40014800 	.word	0x40014800
 8049244:	40001800 	.word	0x40001800
 8049248:	40001c00 	.word	0x40001c00
 804924c:	40002000 	.word	0x40002000

08049250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8049250:	b480      	push	{r7}
 8049252:	b087      	sub	sp, #28
 8049254:	af00      	add	r7, sp, #0
 8049256:	60f8      	str	r0, [r7, #12]
 8049258:	60b9      	str	r1, [r7, #8]
 804925a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 804925c:	68fb      	ldr	r3, [r7, #12]
 804925e:	6a1b      	ldr	r3, [r3, #32]
 8049260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8049262:	68fb      	ldr	r3, [r7, #12]
 8049264:	6a1b      	ldr	r3, [r3, #32]
 8049266:	f023 0201 	bic.w	r2, r3, #1
 804926a:	68fb      	ldr	r3, [r7, #12]
 804926c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 804926e:	68fb      	ldr	r3, [r7, #12]
 8049270:	699b      	ldr	r3, [r3, #24]
 8049272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8049274:	693b      	ldr	r3, [r7, #16]
 8049276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804927a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 804927c:	687b      	ldr	r3, [r7, #4]
 804927e:	011b      	lsls	r3, r3, #4
 8049280:	693a      	ldr	r2, [r7, #16]
 8049282:	4313      	orrs	r3, r2
 8049284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8049286:	697b      	ldr	r3, [r7, #20]
 8049288:	f023 030a 	bic.w	r3, r3, #10
 804928c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 804928e:	697a      	ldr	r2, [r7, #20]
 8049290:	68bb      	ldr	r3, [r7, #8]
 8049292:	4313      	orrs	r3, r2
 8049294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8049296:	68fb      	ldr	r3, [r7, #12]
 8049298:	693a      	ldr	r2, [r7, #16]
 804929a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 804929c:	68fb      	ldr	r3, [r7, #12]
 804929e:	697a      	ldr	r2, [r7, #20]
 80492a0:	621a      	str	r2, [r3, #32]
}
 80492a2:	bf00      	nop
 80492a4:	371c      	adds	r7, #28
 80492a6:	46bd      	mov	sp, r7
 80492a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80492ac:	4770      	bx	lr

080492ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80492ae:	b480      	push	{r7}
 80492b0:	b087      	sub	sp, #28
 80492b2:	af00      	add	r7, sp, #0
 80492b4:	60f8      	str	r0, [r7, #12]
 80492b6:	60b9      	str	r1, [r7, #8]
 80492b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80492ba:	68fb      	ldr	r3, [r7, #12]
 80492bc:	6a1b      	ldr	r3, [r3, #32]
 80492be:	f023 0210 	bic.w	r2, r3, #16
 80492c2:	68fb      	ldr	r3, [r7, #12]
 80492c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80492c6:	68fb      	ldr	r3, [r7, #12]
 80492c8:	699b      	ldr	r3, [r3, #24]
 80492ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80492cc:	68fb      	ldr	r3, [r7, #12]
 80492ce:	6a1b      	ldr	r3, [r3, #32]
 80492d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80492d2:	697b      	ldr	r3, [r7, #20]
 80492d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80492d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80492da:	687b      	ldr	r3, [r7, #4]
 80492dc:	031b      	lsls	r3, r3, #12
 80492de:	697a      	ldr	r2, [r7, #20]
 80492e0:	4313      	orrs	r3, r2
 80492e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80492e4:	693b      	ldr	r3, [r7, #16]
 80492e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80492ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80492ec:	68bb      	ldr	r3, [r7, #8]
 80492ee:	011b      	lsls	r3, r3, #4
 80492f0:	693a      	ldr	r2, [r7, #16]
 80492f2:	4313      	orrs	r3, r2
 80492f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80492f6:	68fb      	ldr	r3, [r7, #12]
 80492f8:	697a      	ldr	r2, [r7, #20]
 80492fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80492fc:	68fb      	ldr	r3, [r7, #12]
 80492fe:	693a      	ldr	r2, [r7, #16]
 8049300:	621a      	str	r2, [r3, #32]
}
 8049302:	bf00      	nop
 8049304:	371c      	adds	r7, #28
 8049306:	46bd      	mov	sp, r7
 8049308:	f85d 7b04 	ldr.w	r7, [sp], #4
 804930c:	4770      	bx	lr

0804930e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 804930e:	b480      	push	{r7}
 8049310:	b085      	sub	sp, #20
 8049312:	af00      	add	r7, sp, #0
 8049314:	6078      	str	r0, [r7, #4]
 8049316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8049318:	687b      	ldr	r3, [r7, #4]
 804931a:	689b      	ldr	r3, [r3, #8]
 804931c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 804931e:	68fb      	ldr	r3, [r7, #12]
 8049320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8049324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8049326:	683a      	ldr	r2, [r7, #0]
 8049328:	68fb      	ldr	r3, [r7, #12]
 804932a:	4313      	orrs	r3, r2
 804932c:	f043 0307 	orr.w	r3, r3, #7
 8049330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8049332:	687b      	ldr	r3, [r7, #4]
 8049334:	68fa      	ldr	r2, [r7, #12]
 8049336:	609a      	str	r2, [r3, #8]
}
 8049338:	bf00      	nop
 804933a:	3714      	adds	r7, #20
 804933c:	46bd      	mov	sp, r7
 804933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049342:	4770      	bx	lr

08049344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8049344:	b480      	push	{r7}
 8049346:	b087      	sub	sp, #28
 8049348:	af00      	add	r7, sp, #0
 804934a:	60f8      	str	r0, [r7, #12]
 804934c:	60b9      	str	r1, [r7, #8]
 804934e:	607a      	str	r2, [r7, #4]
 8049350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8049352:	68fb      	ldr	r3, [r7, #12]
 8049354:	689b      	ldr	r3, [r3, #8]
 8049356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8049358:	697b      	ldr	r3, [r7, #20]
 804935a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 804935e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8049360:	683b      	ldr	r3, [r7, #0]
 8049362:	021a      	lsls	r2, r3, #8
 8049364:	687b      	ldr	r3, [r7, #4]
 8049366:	431a      	orrs	r2, r3
 8049368:	68bb      	ldr	r3, [r7, #8]
 804936a:	4313      	orrs	r3, r2
 804936c:	697a      	ldr	r2, [r7, #20]
 804936e:	4313      	orrs	r3, r2
 8049370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8049372:	68fb      	ldr	r3, [r7, #12]
 8049374:	697a      	ldr	r2, [r7, #20]
 8049376:	609a      	str	r2, [r3, #8]
}
 8049378:	bf00      	nop
 804937a:	371c      	adds	r7, #28
 804937c:	46bd      	mov	sp, r7
 804937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049382:	4770      	bx	lr

08049384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8049384:	b480      	push	{r7}
 8049386:	b085      	sub	sp, #20
 8049388:	af00      	add	r7, sp, #0
 804938a:	6078      	str	r0, [r7, #4]
 804938c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 804938e:	687b      	ldr	r3, [r7, #4]
 8049390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8049394:	2b01      	cmp	r3, #1
 8049396:	d101      	bne.n	804939c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8049398:	2302      	movs	r3, #2
 804939a:	e05a      	b.n	8049452 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 804939c:	687b      	ldr	r3, [r7, #4]
 804939e:	2201      	movs	r2, #1
 80493a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80493a4:	687b      	ldr	r3, [r7, #4]
 80493a6:	2202      	movs	r2, #2
 80493a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80493ac:	687b      	ldr	r3, [r7, #4]
 80493ae:	681b      	ldr	r3, [r3, #0]
 80493b0:	685b      	ldr	r3, [r3, #4]
 80493b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80493b4:	687b      	ldr	r3, [r7, #4]
 80493b6:	681b      	ldr	r3, [r3, #0]
 80493b8:	689b      	ldr	r3, [r3, #8]
 80493ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80493bc:	68fb      	ldr	r3, [r7, #12]
 80493be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80493c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80493c4:	683b      	ldr	r3, [r7, #0]
 80493c6:	681b      	ldr	r3, [r3, #0]
 80493c8:	68fa      	ldr	r2, [r7, #12]
 80493ca:	4313      	orrs	r3, r2
 80493cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80493ce:	687b      	ldr	r3, [r7, #4]
 80493d0:	681b      	ldr	r3, [r3, #0]
 80493d2:	68fa      	ldr	r2, [r7, #12]
 80493d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80493d6:	687b      	ldr	r3, [r7, #4]
 80493d8:	681b      	ldr	r3, [r3, #0]
 80493da:	4a21      	ldr	r2, [pc, #132]	; (8049460 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80493dc:	4293      	cmp	r3, r2
 80493de:	d022      	beq.n	8049426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80493e0:	687b      	ldr	r3, [r7, #4]
 80493e2:	681b      	ldr	r3, [r3, #0]
 80493e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80493e8:	d01d      	beq.n	8049426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80493ea:	687b      	ldr	r3, [r7, #4]
 80493ec:	681b      	ldr	r3, [r3, #0]
 80493ee:	4a1d      	ldr	r2, [pc, #116]	; (8049464 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80493f0:	4293      	cmp	r3, r2
 80493f2:	d018      	beq.n	8049426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80493f4:	687b      	ldr	r3, [r7, #4]
 80493f6:	681b      	ldr	r3, [r3, #0]
 80493f8:	4a1b      	ldr	r2, [pc, #108]	; (8049468 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80493fa:	4293      	cmp	r3, r2
 80493fc:	d013      	beq.n	8049426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80493fe:	687b      	ldr	r3, [r7, #4]
 8049400:	681b      	ldr	r3, [r3, #0]
 8049402:	4a1a      	ldr	r2, [pc, #104]	; (804946c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8049404:	4293      	cmp	r3, r2
 8049406:	d00e      	beq.n	8049426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8049408:	687b      	ldr	r3, [r7, #4]
 804940a:	681b      	ldr	r3, [r3, #0]
 804940c:	4a18      	ldr	r2, [pc, #96]	; (8049470 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 804940e:	4293      	cmp	r3, r2
 8049410:	d009      	beq.n	8049426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8049412:	687b      	ldr	r3, [r7, #4]
 8049414:	681b      	ldr	r3, [r3, #0]
 8049416:	4a17      	ldr	r2, [pc, #92]	; (8049474 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8049418:	4293      	cmp	r3, r2
 804941a:	d004      	beq.n	8049426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 804941c:	687b      	ldr	r3, [r7, #4]
 804941e:	681b      	ldr	r3, [r3, #0]
 8049420:	4a15      	ldr	r2, [pc, #84]	; (8049478 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8049422:	4293      	cmp	r3, r2
 8049424:	d10c      	bne.n	8049440 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8049426:	68bb      	ldr	r3, [r7, #8]
 8049428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804942c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 804942e:	683b      	ldr	r3, [r7, #0]
 8049430:	685b      	ldr	r3, [r3, #4]
 8049432:	68ba      	ldr	r2, [r7, #8]
 8049434:	4313      	orrs	r3, r2
 8049436:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8049438:	687b      	ldr	r3, [r7, #4]
 804943a:	681b      	ldr	r3, [r3, #0]
 804943c:	68ba      	ldr	r2, [r7, #8]
 804943e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8049440:	687b      	ldr	r3, [r7, #4]
 8049442:	2201      	movs	r2, #1
 8049444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8049448:	687b      	ldr	r3, [r7, #4]
 804944a:	2200      	movs	r2, #0
 804944c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8049450:	2300      	movs	r3, #0
}
 8049452:	4618      	mov	r0, r3
 8049454:	3714      	adds	r7, #20
 8049456:	46bd      	mov	sp, r7
 8049458:	f85d 7b04 	ldr.w	r7, [sp], #4
 804945c:	4770      	bx	lr
 804945e:	bf00      	nop
 8049460:	40010000 	.word	0x40010000
 8049464:	40000400 	.word	0x40000400
 8049468:	40000800 	.word	0x40000800
 804946c:	40000c00 	.word	0x40000c00
 8049470:	40010400 	.word	0x40010400
 8049474:	40014000 	.word	0x40014000
 8049478:	40001800 	.word	0x40001800

0804947c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 804947c:	b480      	push	{r7}
 804947e:	b083      	sub	sp, #12
 8049480:	af00      	add	r7, sp, #0
 8049482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8049484:	bf00      	nop
 8049486:	370c      	adds	r7, #12
 8049488:	46bd      	mov	sp, r7
 804948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804948e:	4770      	bx	lr

08049490 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8049490:	b480      	push	{r7}
 8049492:	b083      	sub	sp, #12
 8049494:	af00      	add	r7, sp, #0
 8049496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8049498:	bf00      	nop
 804949a:	370c      	adds	r7, #12
 804949c:	46bd      	mov	sp, r7
 804949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80494a2:	4770      	bx	lr

080494a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80494a4:	b580      	push	{r7, lr}
 80494a6:	b082      	sub	sp, #8
 80494a8:	af00      	add	r7, sp, #0
 80494aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80494ac:	687b      	ldr	r3, [r7, #4]
 80494ae:	2b00      	cmp	r3, #0
 80494b0:	d101      	bne.n	80494b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80494b2:	2301      	movs	r3, #1
 80494b4:	e03f      	b.n	8049536 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80494b6:	687b      	ldr	r3, [r7, #4]
 80494b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80494bc:	b2db      	uxtb	r3, r3
 80494be:	2b00      	cmp	r3, #0
 80494c0:	d106      	bne.n	80494d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80494c2:	687b      	ldr	r3, [r7, #4]
 80494c4:	2200      	movs	r2, #0
 80494c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80494ca:	6878      	ldr	r0, [r7, #4]
 80494cc:	f7f8 fafc 	bl	8041ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80494d0:	687b      	ldr	r3, [r7, #4]
 80494d2:	2224      	movs	r2, #36	; 0x24
 80494d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80494d8:	687b      	ldr	r3, [r7, #4]
 80494da:	681b      	ldr	r3, [r3, #0]
 80494dc:	68da      	ldr	r2, [r3, #12]
 80494de:	687b      	ldr	r3, [r7, #4]
 80494e0:	681b      	ldr	r3, [r3, #0]
 80494e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80494e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80494e8:	6878      	ldr	r0, [r7, #4]
 80494ea:	f000 f9cb 	bl	8049884 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80494ee:	687b      	ldr	r3, [r7, #4]
 80494f0:	681b      	ldr	r3, [r3, #0]
 80494f2:	691a      	ldr	r2, [r3, #16]
 80494f4:	687b      	ldr	r3, [r7, #4]
 80494f6:	681b      	ldr	r3, [r3, #0]
 80494f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80494fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80494fe:	687b      	ldr	r3, [r7, #4]
 8049500:	681b      	ldr	r3, [r3, #0]
 8049502:	695a      	ldr	r2, [r3, #20]
 8049504:	687b      	ldr	r3, [r7, #4]
 8049506:	681b      	ldr	r3, [r3, #0]
 8049508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 804950c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 804950e:	687b      	ldr	r3, [r7, #4]
 8049510:	681b      	ldr	r3, [r3, #0]
 8049512:	68da      	ldr	r2, [r3, #12]
 8049514:	687b      	ldr	r3, [r7, #4]
 8049516:	681b      	ldr	r3, [r3, #0]
 8049518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 804951c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 804951e:	687b      	ldr	r3, [r7, #4]
 8049520:	2200      	movs	r2, #0
 8049522:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8049524:	687b      	ldr	r3, [r7, #4]
 8049526:	2220      	movs	r2, #32
 8049528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 804952c:	687b      	ldr	r3, [r7, #4]
 804952e:	2220      	movs	r2, #32
 8049530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8049534:	2300      	movs	r3, #0
}
 8049536:	4618      	mov	r0, r3
 8049538:	3708      	adds	r7, #8
 804953a:	46bd      	mov	sp, r7
 804953c:	bd80      	pop	{r7, pc}

0804953e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 804953e:	b580      	push	{r7, lr}
 8049540:	b08a      	sub	sp, #40	; 0x28
 8049542:	af02      	add	r7, sp, #8
 8049544:	60f8      	str	r0, [r7, #12]
 8049546:	60b9      	str	r1, [r7, #8]
 8049548:	603b      	str	r3, [r7, #0]
 804954a:	4613      	mov	r3, r2
 804954c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 804954e:	2300      	movs	r3, #0
 8049550:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8049552:	68fb      	ldr	r3, [r7, #12]
 8049554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8049558:	b2db      	uxtb	r3, r3
 804955a:	2b20      	cmp	r3, #32
 804955c:	d17c      	bne.n	8049658 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 804955e:	68bb      	ldr	r3, [r7, #8]
 8049560:	2b00      	cmp	r3, #0
 8049562:	d002      	beq.n	804956a <HAL_UART_Transmit+0x2c>
 8049564:	88fb      	ldrh	r3, [r7, #6]
 8049566:	2b00      	cmp	r3, #0
 8049568:	d101      	bne.n	804956e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 804956a:	2301      	movs	r3, #1
 804956c:	e075      	b.n	804965a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 804956e:	68fb      	ldr	r3, [r7, #12]
 8049570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8049574:	2b01      	cmp	r3, #1
 8049576:	d101      	bne.n	804957c <HAL_UART_Transmit+0x3e>
 8049578:	2302      	movs	r3, #2
 804957a:	e06e      	b.n	804965a <HAL_UART_Transmit+0x11c>
 804957c:	68fb      	ldr	r3, [r7, #12]
 804957e:	2201      	movs	r2, #1
 8049580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8049584:	68fb      	ldr	r3, [r7, #12]
 8049586:	2200      	movs	r2, #0
 8049588:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 804958a:	68fb      	ldr	r3, [r7, #12]
 804958c:	2221      	movs	r2, #33	; 0x21
 804958e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8049592:	f7f9 ffb9 	bl	8043508 <HAL_GetTick>
 8049596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8049598:	68fb      	ldr	r3, [r7, #12]
 804959a:	88fa      	ldrh	r2, [r7, #6]
 804959c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 804959e:	68fb      	ldr	r3, [r7, #12]
 80495a0:	88fa      	ldrh	r2, [r7, #6]
 80495a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80495a4:	68fb      	ldr	r3, [r7, #12]
 80495a6:	689b      	ldr	r3, [r3, #8]
 80495a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80495ac:	d108      	bne.n	80495c0 <HAL_UART_Transmit+0x82>
 80495ae:	68fb      	ldr	r3, [r7, #12]
 80495b0:	691b      	ldr	r3, [r3, #16]
 80495b2:	2b00      	cmp	r3, #0
 80495b4:	d104      	bne.n	80495c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80495b6:	2300      	movs	r3, #0
 80495b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80495ba:	68bb      	ldr	r3, [r7, #8]
 80495bc:	61bb      	str	r3, [r7, #24]
 80495be:	e003      	b.n	80495c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80495c0:	68bb      	ldr	r3, [r7, #8]
 80495c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80495c4:	2300      	movs	r3, #0
 80495c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80495c8:	68fb      	ldr	r3, [r7, #12]
 80495ca:	2200      	movs	r2, #0
 80495cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80495d0:	e02a      	b.n	8049628 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80495d2:	683b      	ldr	r3, [r7, #0]
 80495d4:	9300      	str	r3, [sp, #0]
 80495d6:	697b      	ldr	r3, [r7, #20]
 80495d8:	2200      	movs	r2, #0
 80495da:	2180      	movs	r1, #128	; 0x80
 80495dc:	68f8      	ldr	r0, [r7, #12]
 80495de:	f000 f8e2 	bl	80497a6 <UART_WaitOnFlagUntilTimeout>
 80495e2:	4603      	mov	r3, r0
 80495e4:	2b00      	cmp	r3, #0
 80495e6:	d001      	beq.n	80495ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80495e8:	2303      	movs	r3, #3
 80495ea:	e036      	b.n	804965a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80495ec:	69fb      	ldr	r3, [r7, #28]
 80495ee:	2b00      	cmp	r3, #0
 80495f0:	d10b      	bne.n	804960a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80495f2:	69bb      	ldr	r3, [r7, #24]
 80495f4:	881b      	ldrh	r3, [r3, #0]
 80495f6:	461a      	mov	r2, r3
 80495f8:	68fb      	ldr	r3, [r7, #12]
 80495fa:	681b      	ldr	r3, [r3, #0]
 80495fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8049600:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8049602:	69bb      	ldr	r3, [r7, #24]
 8049604:	3302      	adds	r3, #2
 8049606:	61bb      	str	r3, [r7, #24]
 8049608:	e007      	b.n	804961a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 804960a:	69fb      	ldr	r3, [r7, #28]
 804960c:	781a      	ldrb	r2, [r3, #0]
 804960e:	68fb      	ldr	r3, [r7, #12]
 8049610:	681b      	ldr	r3, [r3, #0]
 8049612:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8049614:	69fb      	ldr	r3, [r7, #28]
 8049616:	3301      	adds	r3, #1
 8049618:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 804961a:	68fb      	ldr	r3, [r7, #12]
 804961c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 804961e:	b29b      	uxth	r3, r3
 8049620:	3b01      	subs	r3, #1
 8049622:	b29a      	uxth	r2, r3
 8049624:	68fb      	ldr	r3, [r7, #12]
 8049626:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8049628:	68fb      	ldr	r3, [r7, #12]
 804962a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 804962c:	b29b      	uxth	r3, r3
 804962e:	2b00      	cmp	r3, #0
 8049630:	d1cf      	bne.n	80495d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8049632:	683b      	ldr	r3, [r7, #0]
 8049634:	9300      	str	r3, [sp, #0]
 8049636:	697b      	ldr	r3, [r7, #20]
 8049638:	2200      	movs	r2, #0
 804963a:	2140      	movs	r1, #64	; 0x40
 804963c:	68f8      	ldr	r0, [r7, #12]
 804963e:	f000 f8b2 	bl	80497a6 <UART_WaitOnFlagUntilTimeout>
 8049642:	4603      	mov	r3, r0
 8049644:	2b00      	cmp	r3, #0
 8049646:	d001      	beq.n	804964c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8049648:	2303      	movs	r3, #3
 804964a:	e006      	b.n	804965a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 804964c:	68fb      	ldr	r3, [r7, #12]
 804964e:	2220      	movs	r2, #32
 8049650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8049654:	2300      	movs	r3, #0
 8049656:	e000      	b.n	804965a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8049658:	2302      	movs	r3, #2
  }
}
 804965a:	4618      	mov	r0, r3
 804965c:	3720      	adds	r7, #32
 804965e:	46bd      	mov	sp, r7
 8049660:	bd80      	pop	{r7, pc}

08049662 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8049662:	b580      	push	{r7, lr}
 8049664:	b08a      	sub	sp, #40	; 0x28
 8049666:	af02      	add	r7, sp, #8
 8049668:	60f8      	str	r0, [r7, #12]
 804966a:	60b9      	str	r1, [r7, #8]
 804966c:	603b      	str	r3, [r7, #0]
 804966e:	4613      	mov	r3, r2
 8049670:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8049672:	2300      	movs	r3, #0
 8049674:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8049676:	68fb      	ldr	r3, [r7, #12]
 8049678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 804967c:	b2db      	uxtb	r3, r3
 804967e:	2b20      	cmp	r3, #32
 8049680:	f040 808c 	bne.w	804979c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8049684:	68bb      	ldr	r3, [r7, #8]
 8049686:	2b00      	cmp	r3, #0
 8049688:	d002      	beq.n	8049690 <HAL_UART_Receive+0x2e>
 804968a:	88fb      	ldrh	r3, [r7, #6]
 804968c:	2b00      	cmp	r3, #0
 804968e:	d101      	bne.n	8049694 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8049690:	2301      	movs	r3, #1
 8049692:	e084      	b.n	804979e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8049694:	68fb      	ldr	r3, [r7, #12]
 8049696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 804969a:	2b01      	cmp	r3, #1
 804969c:	d101      	bne.n	80496a2 <HAL_UART_Receive+0x40>
 804969e:	2302      	movs	r3, #2
 80496a0:	e07d      	b.n	804979e <HAL_UART_Receive+0x13c>
 80496a2:	68fb      	ldr	r3, [r7, #12]
 80496a4:	2201      	movs	r2, #1
 80496a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80496aa:	68fb      	ldr	r3, [r7, #12]
 80496ac:	2200      	movs	r2, #0
 80496ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80496b0:	68fb      	ldr	r3, [r7, #12]
 80496b2:	2222      	movs	r2, #34	; 0x22
 80496b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80496b8:	68fb      	ldr	r3, [r7, #12]
 80496ba:	2200      	movs	r2, #0
 80496bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80496be:	f7f9 ff23 	bl	8043508 <HAL_GetTick>
 80496c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80496c4:	68fb      	ldr	r3, [r7, #12]
 80496c6:	88fa      	ldrh	r2, [r7, #6]
 80496c8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80496ca:	68fb      	ldr	r3, [r7, #12]
 80496cc:	88fa      	ldrh	r2, [r7, #6]
 80496ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80496d0:	68fb      	ldr	r3, [r7, #12]
 80496d2:	689b      	ldr	r3, [r3, #8]
 80496d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80496d8:	d108      	bne.n	80496ec <HAL_UART_Receive+0x8a>
 80496da:	68fb      	ldr	r3, [r7, #12]
 80496dc:	691b      	ldr	r3, [r3, #16]
 80496de:	2b00      	cmp	r3, #0
 80496e0:	d104      	bne.n	80496ec <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80496e2:	2300      	movs	r3, #0
 80496e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80496e6:	68bb      	ldr	r3, [r7, #8]
 80496e8:	61bb      	str	r3, [r7, #24]
 80496ea:	e003      	b.n	80496f4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80496ec:	68bb      	ldr	r3, [r7, #8]
 80496ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80496f0:	2300      	movs	r3, #0
 80496f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80496f4:	68fb      	ldr	r3, [r7, #12]
 80496f6:	2200      	movs	r2, #0
 80496f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80496fc:	e043      	b.n	8049786 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80496fe:	683b      	ldr	r3, [r7, #0]
 8049700:	9300      	str	r3, [sp, #0]
 8049702:	697b      	ldr	r3, [r7, #20]
 8049704:	2200      	movs	r2, #0
 8049706:	2120      	movs	r1, #32
 8049708:	68f8      	ldr	r0, [r7, #12]
 804970a:	f000 f84c 	bl	80497a6 <UART_WaitOnFlagUntilTimeout>
 804970e:	4603      	mov	r3, r0
 8049710:	2b00      	cmp	r3, #0
 8049712:	d001      	beq.n	8049718 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8049714:	2303      	movs	r3, #3
 8049716:	e042      	b.n	804979e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8049718:	69fb      	ldr	r3, [r7, #28]
 804971a:	2b00      	cmp	r3, #0
 804971c:	d10c      	bne.n	8049738 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 804971e:	68fb      	ldr	r3, [r7, #12]
 8049720:	681b      	ldr	r3, [r3, #0]
 8049722:	685b      	ldr	r3, [r3, #4]
 8049724:	b29b      	uxth	r3, r3
 8049726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804972a:	b29a      	uxth	r2, r3
 804972c:	69bb      	ldr	r3, [r7, #24]
 804972e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8049730:	69bb      	ldr	r3, [r7, #24]
 8049732:	3302      	adds	r3, #2
 8049734:	61bb      	str	r3, [r7, #24]
 8049736:	e01f      	b.n	8049778 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8049738:	68fb      	ldr	r3, [r7, #12]
 804973a:	689b      	ldr	r3, [r3, #8]
 804973c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8049740:	d007      	beq.n	8049752 <HAL_UART_Receive+0xf0>
 8049742:	68fb      	ldr	r3, [r7, #12]
 8049744:	689b      	ldr	r3, [r3, #8]
 8049746:	2b00      	cmp	r3, #0
 8049748:	d10a      	bne.n	8049760 <HAL_UART_Receive+0xfe>
 804974a:	68fb      	ldr	r3, [r7, #12]
 804974c:	691b      	ldr	r3, [r3, #16]
 804974e:	2b00      	cmp	r3, #0
 8049750:	d106      	bne.n	8049760 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8049752:	68fb      	ldr	r3, [r7, #12]
 8049754:	681b      	ldr	r3, [r3, #0]
 8049756:	685b      	ldr	r3, [r3, #4]
 8049758:	b2da      	uxtb	r2, r3
 804975a:	69fb      	ldr	r3, [r7, #28]
 804975c:	701a      	strb	r2, [r3, #0]
 804975e:	e008      	b.n	8049772 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8049760:	68fb      	ldr	r3, [r7, #12]
 8049762:	681b      	ldr	r3, [r3, #0]
 8049764:	685b      	ldr	r3, [r3, #4]
 8049766:	b2db      	uxtb	r3, r3
 8049768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804976c:	b2da      	uxtb	r2, r3
 804976e:	69fb      	ldr	r3, [r7, #28]
 8049770:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8049772:	69fb      	ldr	r3, [r7, #28]
 8049774:	3301      	adds	r3, #1
 8049776:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8049778:	68fb      	ldr	r3, [r7, #12]
 804977a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 804977c:	b29b      	uxth	r3, r3
 804977e:	3b01      	subs	r3, #1
 8049780:	b29a      	uxth	r2, r3
 8049782:	68fb      	ldr	r3, [r7, #12]
 8049784:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8049786:	68fb      	ldr	r3, [r7, #12]
 8049788:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 804978a:	b29b      	uxth	r3, r3
 804978c:	2b00      	cmp	r3, #0
 804978e:	d1b6      	bne.n	80496fe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8049790:	68fb      	ldr	r3, [r7, #12]
 8049792:	2220      	movs	r2, #32
 8049794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8049798:	2300      	movs	r3, #0
 804979a:	e000      	b.n	804979e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 804979c:	2302      	movs	r3, #2
  }
}
 804979e:	4618      	mov	r0, r3
 80497a0:	3720      	adds	r7, #32
 80497a2:	46bd      	mov	sp, r7
 80497a4:	bd80      	pop	{r7, pc}

080497a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80497a6:	b580      	push	{r7, lr}
 80497a8:	b090      	sub	sp, #64	; 0x40
 80497aa:	af00      	add	r7, sp, #0
 80497ac:	60f8      	str	r0, [r7, #12]
 80497ae:	60b9      	str	r1, [r7, #8]
 80497b0:	603b      	str	r3, [r7, #0]
 80497b2:	4613      	mov	r3, r2
 80497b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80497b6:	e050      	b.n	804985a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80497b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80497ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80497be:	d04c      	beq.n	804985a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80497c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80497c2:	2b00      	cmp	r3, #0
 80497c4:	d007      	beq.n	80497d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80497c6:	f7f9 fe9f 	bl	8043508 <HAL_GetTick>
 80497ca:	4602      	mov	r2, r0
 80497cc:	683b      	ldr	r3, [r7, #0]
 80497ce:	1ad3      	subs	r3, r2, r3
 80497d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80497d2:	429a      	cmp	r2, r3
 80497d4:	d241      	bcs.n	804985a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80497d6:	68fb      	ldr	r3, [r7, #12]
 80497d8:	681b      	ldr	r3, [r3, #0]
 80497da:	330c      	adds	r3, #12
 80497dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80497de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80497e0:	e853 3f00 	ldrex	r3, [r3]
 80497e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80497e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80497e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80497ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80497ee:	68fb      	ldr	r3, [r7, #12]
 80497f0:	681b      	ldr	r3, [r3, #0]
 80497f2:	330c      	adds	r3, #12
 80497f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80497f6:	637a      	str	r2, [r7, #52]	; 0x34
 80497f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80497fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80497fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80497fe:	e841 2300 	strex	r3, r2, [r1]
 8049802:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8049804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049806:	2b00      	cmp	r3, #0
 8049808:	d1e5      	bne.n	80497d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804980a:	68fb      	ldr	r3, [r7, #12]
 804980c:	681b      	ldr	r3, [r3, #0]
 804980e:	3314      	adds	r3, #20
 8049810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8049812:	697b      	ldr	r3, [r7, #20]
 8049814:	e853 3f00 	ldrex	r3, [r3]
 8049818:	613b      	str	r3, [r7, #16]
   return(result);
 804981a:	693b      	ldr	r3, [r7, #16]
 804981c:	f023 0301 	bic.w	r3, r3, #1
 8049820:	63bb      	str	r3, [r7, #56]	; 0x38
 8049822:	68fb      	ldr	r3, [r7, #12]
 8049824:	681b      	ldr	r3, [r3, #0]
 8049826:	3314      	adds	r3, #20
 8049828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 804982a:	623a      	str	r2, [r7, #32]
 804982c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804982e:	69f9      	ldr	r1, [r7, #28]
 8049830:	6a3a      	ldr	r2, [r7, #32]
 8049832:	e841 2300 	strex	r3, r2, [r1]
 8049836:	61bb      	str	r3, [r7, #24]
   return(result);
 8049838:	69bb      	ldr	r3, [r7, #24]
 804983a:	2b00      	cmp	r3, #0
 804983c:	d1e5      	bne.n	804980a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 804983e:	68fb      	ldr	r3, [r7, #12]
 8049840:	2220      	movs	r2, #32
 8049842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8049846:	68fb      	ldr	r3, [r7, #12]
 8049848:	2220      	movs	r2, #32
 804984a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 804984e:	68fb      	ldr	r3, [r7, #12]
 8049850:	2200      	movs	r2, #0
 8049852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8049856:	2303      	movs	r3, #3
 8049858:	e00f      	b.n	804987a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 804985a:	68fb      	ldr	r3, [r7, #12]
 804985c:	681b      	ldr	r3, [r3, #0]
 804985e:	681a      	ldr	r2, [r3, #0]
 8049860:	68bb      	ldr	r3, [r7, #8]
 8049862:	4013      	ands	r3, r2
 8049864:	68ba      	ldr	r2, [r7, #8]
 8049866:	429a      	cmp	r2, r3
 8049868:	bf0c      	ite	eq
 804986a:	2301      	moveq	r3, #1
 804986c:	2300      	movne	r3, #0
 804986e:	b2db      	uxtb	r3, r3
 8049870:	461a      	mov	r2, r3
 8049872:	79fb      	ldrb	r3, [r7, #7]
 8049874:	429a      	cmp	r2, r3
 8049876:	d09f      	beq.n	80497b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8049878:	2300      	movs	r3, #0
}
 804987a:	4618      	mov	r0, r3
 804987c:	3740      	adds	r7, #64	; 0x40
 804987e:	46bd      	mov	sp, r7
 8049880:	bd80      	pop	{r7, pc}
	...

08049884 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8049884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8049888:	b0c0      	sub	sp, #256	; 0x100
 804988a:	af00      	add	r7, sp, #0
 804988c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8049890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049894:	681b      	ldr	r3, [r3, #0]
 8049896:	691b      	ldr	r3, [r3, #16]
 8049898:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 804989c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80498a0:	68d9      	ldr	r1, [r3, #12]
 80498a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80498a6:	681a      	ldr	r2, [r3, #0]
 80498a8:	ea40 0301 	orr.w	r3, r0, r1
 80498ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80498ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80498b2:	689a      	ldr	r2, [r3, #8]
 80498b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80498b8:	691b      	ldr	r3, [r3, #16]
 80498ba:	431a      	orrs	r2, r3
 80498bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80498c0:	695b      	ldr	r3, [r3, #20]
 80498c2:	431a      	orrs	r2, r3
 80498c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80498c8:	69db      	ldr	r3, [r3, #28]
 80498ca:	4313      	orrs	r3, r2
 80498cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80498d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80498d4:	681b      	ldr	r3, [r3, #0]
 80498d6:	68db      	ldr	r3, [r3, #12]
 80498d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80498dc:	f021 010c 	bic.w	r1, r1, #12
 80498e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80498e4:	681a      	ldr	r2, [r3, #0]
 80498e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80498ea:	430b      	orrs	r3, r1
 80498ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80498ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80498f2:	681b      	ldr	r3, [r3, #0]
 80498f4:	695b      	ldr	r3, [r3, #20]
 80498f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80498fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80498fe:	6999      	ldr	r1, [r3, #24]
 8049900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049904:	681a      	ldr	r2, [r3, #0]
 8049906:	ea40 0301 	orr.w	r3, r0, r1
 804990a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 804990c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049910:	681a      	ldr	r2, [r3, #0]
 8049912:	4b8f      	ldr	r3, [pc, #572]	; (8049b50 <UART_SetConfig+0x2cc>)
 8049914:	429a      	cmp	r2, r3
 8049916:	d005      	beq.n	8049924 <UART_SetConfig+0xa0>
 8049918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804991c:	681a      	ldr	r2, [r3, #0]
 804991e:	4b8d      	ldr	r3, [pc, #564]	; (8049b54 <UART_SetConfig+0x2d0>)
 8049920:	429a      	cmp	r2, r3
 8049922:	d104      	bne.n	804992e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8049924:	f7fe f8c6 	bl	8047ab4 <HAL_RCC_GetPCLK2Freq>
 8049928:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 804992c:	e003      	b.n	8049936 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 804992e:	f7fe f8ad 	bl	8047a8c <HAL_RCC_GetPCLK1Freq>
 8049932:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8049936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804993a:	69db      	ldr	r3, [r3, #28]
 804993c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8049940:	f040 810c 	bne.w	8049b5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8049944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8049948:	2200      	movs	r2, #0
 804994a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 804994e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8049952:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8049956:	4622      	mov	r2, r4
 8049958:	462b      	mov	r3, r5
 804995a:	1891      	adds	r1, r2, r2
 804995c:	65b9      	str	r1, [r7, #88]	; 0x58
 804995e:	415b      	adcs	r3, r3
 8049960:	65fb      	str	r3, [r7, #92]	; 0x5c
 8049962:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8049966:	4621      	mov	r1, r4
 8049968:	eb12 0801 	adds.w	r8, r2, r1
 804996c:	4629      	mov	r1, r5
 804996e:	eb43 0901 	adc.w	r9, r3, r1
 8049972:	f04f 0200 	mov.w	r2, #0
 8049976:	f04f 0300 	mov.w	r3, #0
 804997a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 804997e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8049982:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8049986:	4690      	mov	r8, r2
 8049988:	4699      	mov	r9, r3
 804998a:	4623      	mov	r3, r4
 804998c:	eb18 0303 	adds.w	r3, r8, r3
 8049990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8049994:	462b      	mov	r3, r5
 8049996:	eb49 0303 	adc.w	r3, r9, r3
 804999a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 804999e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80499a2:	685b      	ldr	r3, [r3, #4]
 80499a4:	2200      	movs	r2, #0
 80499a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80499aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80499ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80499b2:	460b      	mov	r3, r1
 80499b4:	18db      	adds	r3, r3, r3
 80499b6:	653b      	str	r3, [r7, #80]	; 0x50
 80499b8:	4613      	mov	r3, r2
 80499ba:	eb42 0303 	adc.w	r3, r2, r3
 80499be:	657b      	str	r3, [r7, #84]	; 0x54
 80499c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80499c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80499c8:	f7f6 fc62 	bl	8040290 <__aeabi_uldivmod>
 80499cc:	4602      	mov	r2, r0
 80499ce:	460b      	mov	r3, r1
 80499d0:	4b61      	ldr	r3, [pc, #388]	; (8049b58 <UART_SetConfig+0x2d4>)
 80499d2:	fba3 2302 	umull	r2, r3, r3, r2
 80499d6:	095b      	lsrs	r3, r3, #5
 80499d8:	011c      	lsls	r4, r3, #4
 80499da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80499de:	2200      	movs	r2, #0
 80499e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80499e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80499e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80499ec:	4642      	mov	r2, r8
 80499ee:	464b      	mov	r3, r9
 80499f0:	1891      	adds	r1, r2, r2
 80499f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80499f4:	415b      	adcs	r3, r3
 80499f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80499f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80499fc:	4641      	mov	r1, r8
 80499fe:	eb12 0a01 	adds.w	sl, r2, r1
 8049a02:	4649      	mov	r1, r9
 8049a04:	eb43 0b01 	adc.w	fp, r3, r1
 8049a08:	f04f 0200 	mov.w	r2, #0
 8049a0c:	f04f 0300 	mov.w	r3, #0
 8049a10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8049a14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8049a18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8049a1c:	4692      	mov	sl, r2
 8049a1e:	469b      	mov	fp, r3
 8049a20:	4643      	mov	r3, r8
 8049a22:	eb1a 0303 	adds.w	r3, sl, r3
 8049a26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8049a2a:	464b      	mov	r3, r9
 8049a2c:	eb4b 0303 	adc.w	r3, fp, r3
 8049a30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8049a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049a38:	685b      	ldr	r3, [r3, #4]
 8049a3a:	2200      	movs	r2, #0
 8049a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8049a40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8049a44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8049a48:	460b      	mov	r3, r1
 8049a4a:	18db      	adds	r3, r3, r3
 8049a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8049a4e:	4613      	mov	r3, r2
 8049a50:	eb42 0303 	adc.w	r3, r2, r3
 8049a54:	647b      	str	r3, [r7, #68]	; 0x44
 8049a56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8049a5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8049a5e:	f7f6 fc17 	bl	8040290 <__aeabi_uldivmod>
 8049a62:	4602      	mov	r2, r0
 8049a64:	460b      	mov	r3, r1
 8049a66:	4611      	mov	r1, r2
 8049a68:	4b3b      	ldr	r3, [pc, #236]	; (8049b58 <UART_SetConfig+0x2d4>)
 8049a6a:	fba3 2301 	umull	r2, r3, r3, r1
 8049a6e:	095b      	lsrs	r3, r3, #5
 8049a70:	2264      	movs	r2, #100	; 0x64
 8049a72:	fb02 f303 	mul.w	r3, r2, r3
 8049a76:	1acb      	subs	r3, r1, r3
 8049a78:	00db      	lsls	r3, r3, #3
 8049a7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8049a7e:	4b36      	ldr	r3, [pc, #216]	; (8049b58 <UART_SetConfig+0x2d4>)
 8049a80:	fba3 2302 	umull	r2, r3, r3, r2
 8049a84:	095b      	lsrs	r3, r3, #5
 8049a86:	005b      	lsls	r3, r3, #1
 8049a88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8049a8c:	441c      	add	r4, r3
 8049a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8049a92:	2200      	movs	r2, #0
 8049a94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8049a98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8049a9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8049aa0:	4642      	mov	r2, r8
 8049aa2:	464b      	mov	r3, r9
 8049aa4:	1891      	adds	r1, r2, r2
 8049aa6:	63b9      	str	r1, [r7, #56]	; 0x38
 8049aa8:	415b      	adcs	r3, r3
 8049aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8049aac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8049ab0:	4641      	mov	r1, r8
 8049ab2:	1851      	adds	r1, r2, r1
 8049ab4:	6339      	str	r1, [r7, #48]	; 0x30
 8049ab6:	4649      	mov	r1, r9
 8049ab8:	414b      	adcs	r3, r1
 8049aba:	637b      	str	r3, [r7, #52]	; 0x34
 8049abc:	f04f 0200 	mov.w	r2, #0
 8049ac0:	f04f 0300 	mov.w	r3, #0
 8049ac4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8049ac8:	4659      	mov	r1, fp
 8049aca:	00cb      	lsls	r3, r1, #3
 8049acc:	4651      	mov	r1, sl
 8049ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8049ad2:	4651      	mov	r1, sl
 8049ad4:	00ca      	lsls	r2, r1, #3
 8049ad6:	4610      	mov	r0, r2
 8049ad8:	4619      	mov	r1, r3
 8049ada:	4603      	mov	r3, r0
 8049adc:	4642      	mov	r2, r8
 8049ade:	189b      	adds	r3, r3, r2
 8049ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8049ae4:	464b      	mov	r3, r9
 8049ae6:	460a      	mov	r2, r1
 8049ae8:	eb42 0303 	adc.w	r3, r2, r3
 8049aec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8049af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049af4:	685b      	ldr	r3, [r3, #4]
 8049af6:	2200      	movs	r2, #0
 8049af8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8049afc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8049b00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8049b04:	460b      	mov	r3, r1
 8049b06:	18db      	adds	r3, r3, r3
 8049b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8049b0a:	4613      	mov	r3, r2
 8049b0c:	eb42 0303 	adc.w	r3, r2, r3
 8049b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8049b12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8049b16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8049b1a:	f7f6 fbb9 	bl	8040290 <__aeabi_uldivmod>
 8049b1e:	4602      	mov	r2, r0
 8049b20:	460b      	mov	r3, r1
 8049b22:	4b0d      	ldr	r3, [pc, #52]	; (8049b58 <UART_SetConfig+0x2d4>)
 8049b24:	fba3 1302 	umull	r1, r3, r3, r2
 8049b28:	095b      	lsrs	r3, r3, #5
 8049b2a:	2164      	movs	r1, #100	; 0x64
 8049b2c:	fb01 f303 	mul.w	r3, r1, r3
 8049b30:	1ad3      	subs	r3, r2, r3
 8049b32:	00db      	lsls	r3, r3, #3
 8049b34:	3332      	adds	r3, #50	; 0x32
 8049b36:	4a08      	ldr	r2, [pc, #32]	; (8049b58 <UART_SetConfig+0x2d4>)
 8049b38:	fba2 2303 	umull	r2, r3, r2, r3
 8049b3c:	095b      	lsrs	r3, r3, #5
 8049b3e:	f003 0207 	and.w	r2, r3, #7
 8049b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049b46:	681b      	ldr	r3, [r3, #0]
 8049b48:	4422      	add	r2, r4
 8049b4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8049b4c:	e105      	b.n	8049d5a <UART_SetConfig+0x4d6>
 8049b4e:	bf00      	nop
 8049b50:	40011000 	.word	0x40011000
 8049b54:	40011400 	.word	0x40011400
 8049b58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8049b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8049b60:	2200      	movs	r2, #0
 8049b62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8049b66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8049b6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8049b6e:	4642      	mov	r2, r8
 8049b70:	464b      	mov	r3, r9
 8049b72:	1891      	adds	r1, r2, r2
 8049b74:	6239      	str	r1, [r7, #32]
 8049b76:	415b      	adcs	r3, r3
 8049b78:	627b      	str	r3, [r7, #36]	; 0x24
 8049b7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8049b7e:	4641      	mov	r1, r8
 8049b80:	1854      	adds	r4, r2, r1
 8049b82:	4649      	mov	r1, r9
 8049b84:	eb43 0501 	adc.w	r5, r3, r1
 8049b88:	f04f 0200 	mov.w	r2, #0
 8049b8c:	f04f 0300 	mov.w	r3, #0
 8049b90:	00eb      	lsls	r3, r5, #3
 8049b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8049b96:	00e2      	lsls	r2, r4, #3
 8049b98:	4614      	mov	r4, r2
 8049b9a:	461d      	mov	r5, r3
 8049b9c:	4643      	mov	r3, r8
 8049b9e:	18e3      	adds	r3, r4, r3
 8049ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8049ba4:	464b      	mov	r3, r9
 8049ba6:	eb45 0303 	adc.w	r3, r5, r3
 8049baa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8049bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049bb2:	685b      	ldr	r3, [r3, #4]
 8049bb4:	2200      	movs	r2, #0
 8049bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8049bba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8049bbe:	f04f 0200 	mov.w	r2, #0
 8049bc2:	f04f 0300 	mov.w	r3, #0
 8049bc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8049bca:	4629      	mov	r1, r5
 8049bcc:	008b      	lsls	r3, r1, #2
 8049bce:	4621      	mov	r1, r4
 8049bd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8049bd4:	4621      	mov	r1, r4
 8049bd6:	008a      	lsls	r2, r1, #2
 8049bd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8049bdc:	f7f6 fb58 	bl	8040290 <__aeabi_uldivmod>
 8049be0:	4602      	mov	r2, r0
 8049be2:	460b      	mov	r3, r1
 8049be4:	4b60      	ldr	r3, [pc, #384]	; (8049d68 <UART_SetConfig+0x4e4>)
 8049be6:	fba3 2302 	umull	r2, r3, r3, r2
 8049bea:	095b      	lsrs	r3, r3, #5
 8049bec:	011c      	lsls	r4, r3, #4
 8049bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8049bf2:	2200      	movs	r2, #0
 8049bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8049bf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8049bfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8049c00:	4642      	mov	r2, r8
 8049c02:	464b      	mov	r3, r9
 8049c04:	1891      	adds	r1, r2, r2
 8049c06:	61b9      	str	r1, [r7, #24]
 8049c08:	415b      	adcs	r3, r3
 8049c0a:	61fb      	str	r3, [r7, #28]
 8049c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8049c10:	4641      	mov	r1, r8
 8049c12:	1851      	adds	r1, r2, r1
 8049c14:	6139      	str	r1, [r7, #16]
 8049c16:	4649      	mov	r1, r9
 8049c18:	414b      	adcs	r3, r1
 8049c1a:	617b      	str	r3, [r7, #20]
 8049c1c:	f04f 0200 	mov.w	r2, #0
 8049c20:	f04f 0300 	mov.w	r3, #0
 8049c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8049c28:	4659      	mov	r1, fp
 8049c2a:	00cb      	lsls	r3, r1, #3
 8049c2c:	4651      	mov	r1, sl
 8049c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8049c32:	4651      	mov	r1, sl
 8049c34:	00ca      	lsls	r2, r1, #3
 8049c36:	4610      	mov	r0, r2
 8049c38:	4619      	mov	r1, r3
 8049c3a:	4603      	mov	r3, r0
 8049c3c:	4642      	mov	r2, r8
 8049c3e:	189b      	adds	r3, r3, r2
 8049c40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8049c44:	464b      	mov	r3, r9
 8049c46:	460a      	mov	r2, r1
 8049c48:	eb42 0303 	adc.w	r3, r2, r3
 8049c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8049c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049c54:	685b      	ldr	r3, [r3, #4]
 8049c56:	2200      	movs	r2, #0
 8049c58:	67bb      	str	r3, [r7, #120]	; 0x78
 8049c5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8049c5c:	f04f 0200 	mov.w	r2, #0
 8049c60:	f04f 0300 	mov.w	r3, #0
 8049c64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8049c68:	4649      	mov	r1, r9
 8049c6a:	008b      	lsls	r3, r1, #2
 8049c6c:	4641      	mov	r1, r8
 8049c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8049c72:	4641      	mov	r1, r8
 8049c74:	008a      	lsls	r2, r1, #2
 8049c76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8049c7a:	f7f6 fb09 	bl	8040290 <__aeabi_uldivmod>
 8049c7e:	4602      	mov	r2, r0
 8049c80:	460b      	mov	r3, r1
 8049c82:	4b39      	ldr	r3, [pc, #228]	; (8049d68 <UART_SetConfig+0x4e4>)
 8049c84:	fba3 1302 	umull	r1, r3, r3, r2
 8049c88:	095b      	lsrs	r3, r3, #5
 8049c8a:	2164      	movs	r1, #100	; 0x64
 8049c8c:	fb01 f303 	mul.w	r3, r1, r3
 8049c90:	1ad3      	subs	r3, r2, r3
 8049c92:	011b      	lsls	r3, r3, #4
 8049c94:	3332      	adds	r3, #50	; 0x32
 8049c96:	4a34      	ldr	r2, [pc, #208]	; (8049d68 <UART_SetConfig+0x4e4>)
 8049c98:	fba2 2303 	umull	r2, r3, r2, r3
 8049c9c:	095b      	lsrs	r3, r3, #5
 8049c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8049ca2:	441c      	add	r4, r3
 8049ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8049ca8:	2200      	movs	r2, #0
 8049caa:	673b      	str	r3, [r7, #112]	; 0x70
 8049cac:	677a      	str	r2, [r7, #116]	; 0x74
 8049cae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8049cb2:	4642      	mov	r2, r8
 8049cb4:	464b      	mov	r3, r9
 8049cb6:	1891      	adds	r1, r2, r2
 8049cb8:	60b9      	str	r1, [r7, #8]
 8049cba:	415b      	adcs	r3, r3
 8049cbc:	60fb      	str	r3, [r7, #12]
 8049cbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8049cc2:	4641      	mov	r1, r8
 8049cc4:	1851      	adds	r1, r2, r1
 8049cc6:	6039      	str	r1, [r7, #0]
 8049cc8:	4649      	mov	r1, r9
 8049cca:	414b      	adcs	r3, r1
 8049ccc:	607b      	str	r3, [r7, #4]
 8049cce:	f04f 0200 	mov.w	r2, #0
 8049cd2:	f04f 0300 	mov.w	r3, #0
 8049cd6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8049cda:	4659      	mov	r1, fp
 8049cdc:	00cb      	lsls	r3, r1, #3
 8049cde:	4651      	mov	r1, sl
 8049ce0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8049ce4:	4651      	mov	r1, sl
 8049ce6:	00ca      	lsls	r2, r1, #3
 8049ce8:	4610      	mov	r0, r2
 8049cea:	4619      	mov	r1, r3
 8049cec:	4603      	mov	r3, r0
 8049cee:	4642      	mov	r2, r8
 8049cf0:	189b      	adds	r3, r3, r2
 8049cf2:	66bb      	str	r3, [r7, #104]	; 0x68
 8049cf4:	464b      	mov	r3, r9
 8049cf6:	460a      	mov	r2, r1
 8049cf8:	eb42 0303 	adc.w	r3, r2, r3
 8049cfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8049cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049d02:	685b      	ldr	r3, [r3, #4]
 8049d04:	2200      	movs	r2, #0
 8049d06:	663b      	str	r3, [r7, #96]	; 0x60
 8049d08:	667a      	str	r2, [r7, #100]	; 0x64
 8049d0a:	f04f 0200 	mov.w	r2, #0
 8049d0e:	f04f 0300 	mov.w	r3, #0
 8049d12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8049d16:	4649      	mov	r1, r9
 8049d18:	008b      	lsls	r3, r1, #2
 8049d1a:	4641      	mov	r1, r8
 8049d1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8049d20:	4641      	mov	r1, r8
 8049d22:	008a      	lsls	r2, r1, #2
 8049d24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8049d28:	f7f6 fab2 	bl	8040290 <__aeabi_uldivmod>
 8049d2c:	4602      	mov	r2, r0
 8049d2e:	460b      	mov	r3, r1
 8049d30:	4b0d      	ldr	r3, [pc, #52]	; (8049d68 <UART_SetConfig+0x4e4>)
 8049d32:	fba3 1302 	umull	r1, r3, r3, r2
 8049d36:	095b      	lsrs	r3, r3, #5
 8049d38:	2164      	movs	r1, #100	; 0x64
 8049d3a:	fb01 f303 	mul.w	r3, r1, r3
 8049d3e:	1ad3      	subs	r3, r2, r3
 8049d40:	011b      	lsls	r3, r3, #4
 8049d42:	3332      	adds	r3, #50	; 0x32
 8049d44:	4a08      	ldr	r2, [pc, #32]	; (8049d68 <UART_SetConfig+0x4e4>)
 8049d46:	fba2 2303 	umull	r2, r3, r2, r3
 8049d4a:	095b      	lsrs	r3, r3, #5
 8049d4c:	f003 020f 	and.w	r2, r3, #15
 8049d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049d54:	681b      	ldr	r3, [r3, #0]
 8049d56:	4422      	add	r2, r4
 8049d58:	609a      	str	r2, [r3, #8]
}
 8049d5a:	bf00      	nop
 8049d5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8049d60:	46bd      	mov	sp, r7
 8049d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8049d66:	bf00      	nop
 8049d68:	51eb851f 	.word	0x51eb851f

08049d6c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8049d6c:	b480      	push	{r7}
 8049d6e:	b083      	sub	sp, #12
 8049d70:	af00      	add	r7, sp, #0
 8049d72:	6078      	str	r0, [r7, #4]
 8049d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8049d76:	683b      	ldr	r3, [r7, #0]
 8049d78:	681b      	ldr	r3, [r3, #0]
 8049d7a:	2b00      	cmp	r3, #0
 8049d7c:	d123      	bne.n	8049dc6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8049d7e:	687b      	ldr	r3, [r7, #4]
 8049d80:	681b      	ldr	r3, [r3, #0]
 8049d82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8049d86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8049d8a:	683a      	ldr	r2, [r7, #0]
 8049d8c:	6851      	ldr	r1, [r2, #4]
 8049d8e:	683a      	ldr	r2, [r7, #0]
 8049d90:	6892      	ldr	r2, [r2, #8]
 8049d92:	4311      	orrs	r1, r2
 8049d94:	683a      	ldr	r2, [r7, #0]
 8049d96:	68d2      	ldr	r2, [r2, #12]
 8049d98:	4311      	orrs	r1, r2
 8049d9a:	683a      	ldr	r2, [r7, #0]
 8049d9c:	6912      	ldr	r2, [r2, #16]
 8049d9e:	4311      	orrs	r1, r2
 8049da0:	683a      	ldr	r2, [r7, #0]
 8049da2:	6952      	ldr	r2, [r2, #20]
 8049da4:	4311      	orrs	r1, r2
 8049da6:	683a      	ldr	r2, [r7, #0]
 8049da8:	6992      	ldr	r2, [r2, #24]
 8049daa:	4311      	orrs	r1, r2
 8049dac:	683a      	ldr	r2, [r7, #0]
 8049dae:	69d2      	ldr	r2, [r2, #28]
 8049db0:	4311      	orrs	r1, r2
 8049db2:	683a      	ldr	r2, [r7, #0]
 8049db4:	6a12      	ldr	r2, [r2, #32]
 8049db6:	4311      	orrs	r1, r2
 8049db8:	683a      	ldr	r2, [r7, #0]
 8049dba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8049dbc:	430a      	orrs	r2, r1
 8049dbe:	431a      	orrs	r2, r3
 8049dc0:	687b      	ldr	r3, [r7, #4]
 8049dc2:	601a      	str	r2, [r3, #0]
 8049dc4:	e028      	b.n	8049e18 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8049dc6:	687b      	ldr	r3, [r7, #4]
 8049dc8:	681b      	ldr	r3, [r3, #0]
 8049dca:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8049dce:	683b      	ldr	r3, [r7, #0]
 8049dd0:	69d9      	ldr	r1, [r3, #28]
 8049dd2:	683b      	ldr	r3, [r7, #0]
 8049dd4:	6a1b      	ldr	r3, [r3, #32]
 8049dd6:	4319      	orrs	r1, r3
 8049dd8:	683b      	ldr	r3, [r7, #0]
 8049dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049ddc:	430b      	orrs	r3, r1
 8049dde:	431a      	orrs	r2, r3
 8049de0:	687b      	ldr	r3, [r7, #4]
 8049de2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8049de4:	687b      	ldr	r3, [r7, #4]
 8049de6:	685b      	ldr	r3, [r3, #4]
 8049de8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8049dec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8049df0:	683a      	ldr	r2, [r7, #0]
 8049df2:	6851      	ldr	r1, [r2, #4]
 8049df4:	683a      	ldr	r2, [r7, #0]
 8049df6:	6892      	ldr	r2, [r2, #8]
 8049df8:	4311      	orrs	r1, r2
 8049dfa:	683a      	ldr	r2, [r7, #0]
 8049dfc:	68d2      	ldr	r2, [r2, #12]
 8049dfe:	4311      	orrs	r1, r2
 8049e00:	683a      	ldr	r2, [r7, #0]
 8049e02:	6912      	ldr	r2, [r2, #16]
 8049e04:	4311      	orrs	r1, r2
 8049e06:	683a      	ldr	r2, [r7, #0]
 8049e08:	6952      	ldr	r2, [r2, #20]
 8049e0a:	4311      	orrs	r1, r2
 8049e0c:	683a      	ldr	r2, [r7, #0]
 8049e0e:	6992      	ldr	r2, [r2, #24]
 8049e10:	430a      	orrs	r2, r1
 8049e12:	431a      	orrs	r2, r3
 8049e14:	687b      	ldr	r3, [r7, #4]
 8049e16:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8049e18:	2300      	movs	r3, #0
}
 8049e1a:	4618      	mov	r0, r3
 8049e1c:	370c      	adds	r7, #12
 8049e1e:	46bd      	mov	sp, r7
 8049e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049e24:	4770      	bx	lr

08049e26 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8049e26:	b480      	push	{r7}
 8049e28:	b085      	sub	sp, #20
 8049e2a:	af00      	add	r7, sp, #0
 8049e2c:	60f8      	str	r0, [r7, #12]
 8049e2e:	60b9      	str	r1, [r7, #8]
 8049e30:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8049e32:	687b      	ldr	r3, [r7, #4]
 8049e34:	2b00      	cmp	r3, #0
 8049e36:	d128      	bne.n	8049e8a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8049e38:	68fb      	ldr	r3, [r7, #12]
 8049e3a:	689b      	ldr	r3, [r3, #8]
 8049e3c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8049e40:	68bb      	ldr	r3, [r7, #8]
 8049e42:	681b      	ldr	r3, [r3, #0]
 8049e44:	1e59      	subs	r1, r3, #1
 8049e46:	68bb      	ldr	r3, [r7, #8]
 8049e48:	685b      	ldr	r3, [r3, #4]
 8049e4a:	3b01      	subs	r3, #1
 8049e4c:	011b      	lsls	r3, r3, #4
 8049e4e:	4319      	orrs	r1, r3
 8049e50:	68bb      	ldr	r3, [r7, #8]
 8049e52:	689b      	ldr	r3, [r3, #8]
 8049e54:	3b01      	subs	r3, #1
 8049e56:	021b      	lsls	r3, r3, #8
 8049e58:	4319      	orrs	r1, r3
 8049e5a:	68bb      	ldr	r3, [r7, #8]
 8049e5c:	68db      	ldr	r3, [r3, #12]
 8049e5e:	3b01      	subs	r3, #1
 8049e60:	031b      	lsls	r3, r3, #12
 8049e62:	4319      	orrs	r1, r3
 8049e64:	68bb      	ldr	r3, [r7, #8]
 8049e66:	691b      	ldr	r3, [r3, #16]
 8049e68:	3b01      	subs	r3, #1
 8049e6a:	041b      	lsls	r3, r3, #16
 8049e6c:	4319      	orrs	r1, r3
 8049e6e:	68bb      	ldr	r3, [r7, #8]
 8049e70:	695b      	ldr	r3, [r3, #20]
 8049e72:	3b01      	subs	r3, #1
 8049e74:	051b      	lsls	r3, r3, #20
 8049e76:	4319      	orrs	r1, r3
 8049e78:	68bb      	ldr	r3, [r7, #8]
 8049e7a:	699b      	ldr	r3, [r3, #24]
 8049e7c:	3b01      	subs	r3, #1
 8049e7e:	061b      	lsls	r3, r3, #24
 8049e80:	430b      	orrs	r3, r1
 8049e82:	431a      	orrs	r2, r3
 8049e84:	68fb      	ldr	r3, [r7, #12]
 8049e86:	609a      	str	r2, [r3, #8]
 8049e88:	e02f      	b.n	8049eea <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8049e8a:	68fb      	ldr	r3, [r7, #12]
 8049e8c:	689b      	ldr	r3, [r3, #8]
 8049e8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8049e92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8049e96:	68ba      	ldr	r2, [r7, #8]
 8049e98:	68d2      	ldr	r2, [r2, #12]
 8049e9a:	3a01      	subs	r2, #1
 8049e9c:	0311      	lsls	r1, r2, #12
 8049e9e:	68ba      	ldr	r2, [r7, #8]
 8049ea0:	6952      	ldr	r2, [r2, #20]
 8049ea2:	3a01      	subs	r2, #1
 8049ea4:	0512      	lsls	r2, r2, #20
 8049ea6:	430a      	orrs	r2, r1
 8049ea8:	431a      	orrs	r2, r3
 8049eaa:	68fb      	ldr	r3, [r7, #12]
 8049eac:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8049eae:	68fb      	ldr	r3, [r7, #12]
 8049eb0:	68db      	ldr	r3, [r3, #12]
 8049eb2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8049eb6:	68bb      	ldr	r3, [r7, #8]
 8049eb8:	681b      	ldr	r3, [r3, #0]
 8049eba:	1e59      	subs	r1, r3, #1
 8049ebc:	68bb      	ldr	r3, [r7, #8]
 8049ebe:	685b      	ldr	r3, [r3, #4]
 8049ec0:	3b01      	subs	r3, #1
 8049ec2:	011b      	lsls	r3, r3, #4
 8049ec4:	4319      	orrs	r1, r3
 8049ec6:	68bb      	ldr	r3, [r7, #8]
 8049ec8:	689b      	ldr	r3, [r3, #8]
 8049eca:	3b01      	subs	r3, #1
 8049ecc:	021b      	lsls	r3, r3, #8
 8049ece:	4319      	orrs	r1, r3
 8049ed0:	68bb      	ldr	r3, [r7, #8]
 8049ed2:	691b      	ldr	r3, [r3, #16]
 8049ed4:	3b01      	subs	r3, #1
 8049ed6:	041b      	lsls	r3, r3, #16
 8049ed8:	4319      	orrs	r1, r3
 8049eda:	68bb      	ldr	r3, [r7, #8]
 8049edc:	699b      	ldr	r3, [r3, #24]
 8049ede:	3b01      	subs	r3, #1
 8049ee0:	061b      	lsls	r3, r3, #24
 8049ee2:	430b      	orrs	r3, r1
 8049ee4:	431a      	orrs	r2, r3
 8049ee6:	68fb      	ldr	r3, [r7, #12]
 8049ee8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8049eea:	2300      	movs	r3, #0
}
 8049eec:	4618      	mov	r0, r3
 8049eee:	3714      	adds	r7, #20
 8049ef0:	46bd      	mov	sp, r7
 8049ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049ef6:	4770      	bx	lr

08049ef8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8049ef8:	b580      	push	{r7, lr}
 8049efa:	b086      	sub	sp, #24
 8049efc:	af00      	add	r7, sp, #0
 8049efe:	60f8      	str	r0, [r7, #12]
 8049f00:	60b9      	str	r1, [r7, #8]
 8049f02:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8049f04:	2300      	movs	r3, #0
 8049f06:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8049f08:	68fb      	ldr	r3, [r7, #12]
 8049f0a:	691b      	ldr	r3, [r3, #16]
 8049f0c:	0d9b      	lsrs	r3, r3, #22
 8049f0e:	059b      	lsls	r3, r3, #22
 8049f10:	68ba      	ldr	r2, [r7, #8]
 8049f12:	6811      	ldr	r1, [r2, #0]
 8049f14:	68ba      	ldr	r2, [r7, #8]
 8049f16:	6852      	ldr	r2, [r2, #4]
 8049f18:	4311      	orrs	r1, r2
 8049f1a:	68ba      	ldr	r2, [r7, #8]
 8049f1c:	6892      	ldr	r2, [r2, #8]
 8049f1e:	3a01      	subs	r2, #1
 8049f20:	0152      	lsls	r2, r2, #5
 8049f22:	4311      	orrs	r1, r2
 8049f24:	68ba      	ldr	r2, [r7, #8]
 8049f26:	68d2      	ldr	r2, [r2, #12]
 8049f28:	0252      	lsls	r2, r2, #9
 8049f2a:	430a      	orrs	r2, r1
 8049f2c:	431a      	orrs	r2, r3
 8049f2e:	68fb      	ldr	r3, [r7, #12]
 8049f30:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8049f32:	f7f9 fae9 	bl	8043508 <HAL_GetTick>
 8049f36:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8049f38:	e010      	b.n	8049f5c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8049f3a:	687b      	ldr	r3, [r7, #4]
 8049f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8049f40:	d00c      	beq.n	8049f5c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8049f42:	687b      	ldr	r3, [r7, #4]
 8049f44:	2b00      	cmp	r3, #0
 8049f46:	d007      	beq.n	8049f58 <FMC_SDRAM_SendCommand+0x60>
 8049f48:	f7f9 fade 	bl	8043508 <HAL_GetTick>
 8049f4c:	4602      	mov	r2, r0
 8049f4e:	697b      	ldr	r3, [r7, #20]
 8049f50:	1ad3      	subs	r3, r2, r3
 8049f52:	687a      	ldr	r2, [r7, #4]
 8049f54:	429a      	cmp	r2, r3
 8049f56:	d201      	bcs.n	8049f5c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8049f58:	2303      	movs	r3, #3
 8049f5a:	e006      	b.n	8049f6a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8049f5c:	68fb      	ldr	r3, [r7, #12]
 8049f5e:	699b      	ldr	r3, [r3, #24]
 8049f60:	f003 0320 	and.w	r3, r3, #32
 8049f64:	2b20      	cmp	r3, #32
 8049f66:	d0e8      	beq.n	8049f3a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8049f68:	2300      	movs	r3, #0
}
 8049f6a:	4618      	mov	r0, r3
 8049f6c:	3718      	adds	r7, #24
 8049f6e:	46bd      	mov	sp, r7
 8049f70:	bd80      	pop	{r7, pc}

08049f72 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8049f72:	b480      	push	{r7}
 8049f74:	b083      	sub	sp, #12
 8049f76:	af00      	add	r7, sp, #0
 8049f78:	6078      	str	r0, [r7, #4]
 8049f7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8049f7c:	687b      	ldr	r3, [r7, #4]
 8049f7e:	695b      	ldr	r3, [r3, #20]
 8049f80:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8049f84:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8049f88:	683a      	ldr	r2, [r7, #0]
 8049f8a:	0052      	lsls	r2, r2, #1
 8049f8c:	431a      	orrs	r2, r3
 8049f8e:	687b      	ldr	r3, [r7, #4]
 8049f90:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8049f92:	2300      	movs	r3, #0
}
 8049f94:	4618      	mov	r0, r3
 8049f96:	370c      	adds	r7, #12
 8049f98:	46bd      	mov	sp, r7
 8049f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049f9e:	4770      	bx	lr

08049fa0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8049fa0:	b084      	sub	sp, #16
 8049fa2:	b580      	push	{r7, lr}
 8049fa4:	b084      	sub	sp, #16
 8049fa6:	af00      	add	r7, sp, #0
 8049fa8:	6078      	str	r0, [r7, #4]
 8049faa:	f107 001c 	add.w	r0, r7, #28
 8049fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8049fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049fb4:	2b01      	cmp	r3, #1
 8049fb6:	d122      	bne.n	8049ffe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8049fb8:	687b      	ldr	r3, [r7, #4]
 8049fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049fbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8049fc0:	687b      	ldr	r3, [r7, #4]
 8049fc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8049fc4:	687b      	ldr	r3, [r7, #4]
 8049fc6:	68db      	ldr	r3, [r3, #12]
 8049fc8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8049fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8049fd0:	687a      	ldr	r2, [r7, #4]
 8049fd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8049fd4:	687b      	ldr	r3, [r7, #4]
 8049fd6:	68db      	ldr	r3, [r3, #12]
 8049fd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8049fdc:	687b      	ldr	r3, [r7, #4]
 8049fde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8049fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8049fe2:	2b01      	cmp	r3, #1
 8049fe4:	d105      	bne.n	8049ff2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8049fe6:	687b      	ldr	r3, [r7, #4]
 8049fe8:	68db      	ldr	r3, [r3, #12]
 8049fea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8049fee:	687b      	ldr	r3, [r7, #4]
 8049ff0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8049ff2:	6878      	ldr	r0, [r7, #4]
 8049ff4:	f000 f9c0 	bl	804a378 <USB_CoreReset>
 8049ff8:	4603      	mov	r3, r0
 8049ffa:	73fb      	strb	r3, [r7, #15]
 8049ffc:	e01a      	b.n	804a034 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8049ffe:	687b      	ldr	r3, [r7, #4]
 804a000:	68db      	ldr	r3, [r3, #12]
 804a002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 804a006:	687b      	ldr	r3, [r7, #4]
 804a008:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 804a00a:	6878      	ldr	r0, [r7, #4]
 804a00c:	f000 f9b4 	bl	804a378 <USB_CoreReset>
 804a010:	4603      	mov	r3, r0
 804a012:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 804a014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804a016:	2b00      	cmp	r3, #0
 804a018:	d106      	bne.n	804a028 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 804a01a:	687b      	ldr	r3, [r7, #4]
 804a01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a01e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 804a022:	687b      	ldr	r3, [r7, #4]
 804a024:	639a      	str	r2, [r3, #56]	; 0x38
 804a026:	e005      	b.n	804a034 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 804a028:	687b      	ldr	r3, [r7, #4]
 804a02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a02c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 804a030:	687b      	ldr	r3, [r7, #4]
 804a032:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 804a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804a036:	2b01      	cmp	r3, #1
 804a038:	d10b      	bne.n	804a052 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 804a03a:	687b      	ldr	r3, [r7, #4]
 804a03c:	689b      	ldr	r3, [r3, #8]
 804a03e:	f043 0206 	orr.w	r2, r3, #6
 804a042:	687b      	ldr	r3, [r7, #4]
 804a044:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 804a046:	687b      	ldr	r3, [r7, #4]
 804a048:	689b      	ldr	r3, [r3, #8]
 804a04a:	f043 0220 	orr.w	r2, r3, #32
 804a04e:	687b      	ldr	r3, [r7, #4]
 804a050:	609a      	str	r2, [r3, #8]
  }

  return ret;
 804a052:	7bfb      	ldrb	r3, [r7, #15]
}
 804a054:	4618      	mov	r0, r3
 804a056:	3710      	adds	r7, #16
 804a058:	46bd      	mov	sp, r7
 804a05a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 804a05e:	b004      	add	sp, #16
 804a060:	4770      	bx	lr

0804a062 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 804a062:	b480      	push	{r7}
 804a064:	b083      	sub	sp, #12
 804a066:	af00      	add	r7, sp, #0
 804a068:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 804a06a:	687b      	ldr	r3, [r7, #4]
 804a06c:	689b      	ldr	r3, [r3, #8]
 804a06e:	f043 0201 	orr.w	r2, r3, #1
 804a072:	687b      	ldr	r3, [r7, #4]
 804a074:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 804a076:	2300      	movs	r3, #0
}
 804a078:	4618      	mov	r0, r3
 804a07a:	370c      	adds	r7, #12
 804a07c:	46bd      	mov	sp, r7
 804a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a082:	4770      	bx	lr

0804a084 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 804a084:	b480      	push	{r7}
 804a086:	b083      	sub	sp, #12
 804a088:	af00      	add	r7, sp, #0
 804a08a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 804a08c:	687b      	ldr	r3, [r7, #4]
 804a08e:	689b      	ldr	r3, [r3, #8]
 804a090:	f023 0201 	bic.w	r2, r3, #1
 804a094:	687b      	ldr	r3, [r7, #4]
 804a096:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 804a098:	2300      	movs	r3, #0
}
 804a09a:	4618      	mov	r0, r3
 804a09c:	370c      	adds	r7, #12
 804a09e:	46bd      	mov	sp, r7
 804a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a0a4:	4770      	bx	lr

0804a0a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 804a0a6:	b580      	push	{r7, lr}
 804a0a8:	b084      	sub	sp, #16
 804a0aa:	af00      	add	r7, sp, #0
 804a0ac:	6078      	str	r0, [r7, #4]
 804a0ae:	460b      	mov	r3, r1
 804a0b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 804a0b2:	2300      	movs	r3, #0
 804a0b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 804a0b6:	687b      	ldr	r3, [r7, #4]
 804a0b8:	68db      	ldr	r3, [r3, #12]
 804a0ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 804a0be:	687b      	ldr	r3, [r7, #4]
 804a0c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 804a0c2:	78fb      	ldrb	r3, [r7, #3]
 804a0c4:	2b01      	cmp	r3, #1
 804a0c6:	d115      	bne.n	804a0f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 804a0c8:	687b      	ldr	r3, [r7, #4]
 804a0ca:	68db      	ldr	r3, [r3, #12]
 804a0cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 804a0d0:	687b      	ldr	r3, [r7, #4]
 804a0d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 804a0d4:	2001      	movs	r0, #1
 804a0d6:	f7f9 fa23 	bl	8043520 <HAL_Delay>
      ms++;
 804a0da:	68fb      	ldr	r3, [r7, #12]
 804a0dc:	3301      	adds	r3, #1
 804a0de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 804a0e0:	6878      	ldr	r0, [r7, #4]
 804a0e2:	f000 f93a 	bl	804a35a <USB_GetMode>
 804a0e6:	4603      	mov	r3, r0
 804a0e8:	2b01      	cmp	r3, #1
 804a0ea:	d01e      	beq.n	804a12a <USB_SetCurrentMode+0x84>
 804a0ec:	68fb      	ldr	r3, [r7, #12]
 804a0ee:	2b31      	cmp	r3, #49	; 0x31
 804a0f0:	d9f0      	bls.n	804a0d4 <USB_SetCurrentMode+0x2e>
 804a0f2:	e01a      	b.n	804a12a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 804a0f4:	78fb      	ldrb	r3, [r7, #3]
 804a0f6:	2b00      	cmp	r3, #0
 804a0f8:	d115      	bne.n	804a126 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 804a0fa:	687b      	ldr	r3, [r7, #4]
 804a0fc:	68db      	ldr	r3, [r3, #12]
 804a0fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 804a102:	687b      	ldr	r3, [r7, #4]
 804a104:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 804a106:	2001      	movs	r0, #1
 804a108:	f7f9 fa0a 	bl	8043520 <HAL_Delay>
      ms++;
 804a10c:	68fb      	ldr	r3, [r7, #12]
 804a10e:	3301      	adds	r3, #1
 804a110:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 804a112:	6878      	ldr	r0, [r7, #4]
 804a114:	f000 f921 	bl	804a35a <USB_GetMode>
 804a118:	4603      	mov	r3, r0
 804a11a:	2b00      	cmp	r3, #0
 804a11c:	d005      	beq.n	804a12a <USB_SetCurrentMode+0x84>
 804a11e:	68fb      	ldr	r3, [r7, #12]
 804a120:	2b31      	cmp	r3, #49	; 0x31
 804a122:	d9f0      	bls.n	804a106 <USB_SetCurrentMode+0x60>
 804a124:	e001      	b.n	804a12a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 804a126:	2301      	movs	r3, #1
 804a128:	e005      	b.n	804a136 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 804a12a:	68fb      	ldr	r3, [r7, #12]
 804a12c:	2b32      	cmp	r3, #50	; 0x32
 804a12e:	d101      	bne.n	804a134 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 804a130:	2301      	movs	r3, #1
 804a132:	e000      	b.n	804a136 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 804a134:	2300      	movs	r3, #0
}
 804a136:	4618      	mov	r0, r3
 804a138:	3710      	adds	r7, #16
 804a13a:	46bd      	mov	sp, r7
 804a13c:	bd80      	pop	{r7, pc}
	...

0804a140 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 804a140:	b480      	push	{r7}
 804a142:	b085      	sub	sp, #20
 804a144:	af00      	add	r7, sp, #0
 804a146:	6078      	str	r0, [r7, #4]
 804a148:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 804a14a:	2300      	movs	r3, #0
 804a14c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 804a14e:	68fb      	ldr	r3, [r7, #12]
 804a150:	3301      	adds	r3, #1
 804a152:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804a154:	68fb      	ldr	r3, [r7, #12]
 804a156:	4a13      	ldr	r2, [pc, #76]	; (804a1a4 <USB_FlushTxFifo+0x64>)
 804a158:	4293      	cmp	r3, r2
 804a15a:	d901      	bls.n	804a160 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 804a15c:	2303      	movs	r3, #3
 804a15e:	e01b      	b.n	804a198 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 804a160:	687b      	ldr	r3, [r7, #4]
 804a162:	691b      	ldr	r3, [r3, #16]
 804a164:	2b00      	cmp	r3, #0
 804a166:	daf2      	bge.n	804a14e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 804a168:	2300      	movs	r3, #0
 804a16a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 804a16c:	683b      	ldr	r3, [r7, #0]
 804a16e:	019b      	lsls	r3, r3, #6
 804a170:	f043 0220 	orr.w	r2, r3, #32
 804a174:	687b      	ldr	r3, [r7, #4]
 804a176:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 804a178:	68fb      	ldr	r3, [r7, #12]
 804a17a:	3301      	adds	r3, #1
 804a17c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804a17e:	68fb      	ldr	r3, [r7, #12]
 804a180:	4a08      	ldr	r2, [pc, #32]	; (804a1a4 <USB_FlushTxFifo+0x64>)
 804a182:	4293      	cmp	r3, r2
 804a184:	d901      	bls.n	804a18a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 804a186:	2303      	movs	r3, #3
 804a188:	e006      	b.n	804a198 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 804a18a:	687b      	ldr	r3, [r7, #4]
 804a18c:	691b      	ldr	r3, [r3, #16]
 804a18e:	f003 0320 	and.w	r3, r3, #32
 804a192:	2b20      	cmp	r3, #32
 804a194:	d0f0      	beq.n	804a178 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 804a196:	2300      	movs	r3, #0
}
 804a198:	4618      	mov	r0, r3
 804a19a:	3714      	adds	r7, #20
 804a19c:	46bd      	mov	sp, r7
 804a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a1a2:	4770      	bx	lr
 804a1a4:	00030d40 	.word	0x00030d40

0804a1a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 804a1a8:	b480      	push	{r7}
 804a1aa:	b085      	sub	sp, #20
 804a1ac:	af00      	add	r7, sp, #0
 804a1ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 804a1b0:	2300      	movs	r3, #0
 804a1b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 804a1b4:	68fb      	ldr	r3, [r7, #12]
 804a1b6:	3301      	adds	r3, #1
 804a1b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804a1ba:	68fb      	ldr	r3, [r7, #12]
 804a1bc:	4a11      	ldr	r2, [pc, #68]	; (804a204 <USB_FlushRxFifo+0x5c>)
 804a1be:	4293      	cmp	r3, r2
 804a1c0:	d901      	bls.n	804a1c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 804a1c2:	2303      	movs	r3, #3
 804a1c4:	e018      	b.n	804a1f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 804a1c6:	687b      	ldr	r3, [r7, #4]
 804a1c8:	691b      	ldr	r3, [r3, #16]
 804a1ca:	2b00      	cmp	r3, #0
 804a1cc:	daf2      	bge.n	804a1b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 804a1ce:	2300      	movs	r3, #0
 804a1d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 804a1d2:	687b      	ldr	r3, [r7, #4]
 804a1d4:	2210      	movs	r2, #16
 804a1d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 804a1d8:	68fb      	ldr	r3, [r7, #12]
 804a1da:	3301      	adds	r3, #1
 804a1dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804a1de:	68fb      	ldr	r3, [r7, #12]
 804a1e0:	4a08      	ldr	r2, [pc, #32]	; (804a204 <USB_FlushRxFifo+0x5c>)
 804a1e2:	4293      	cmp	r3, r2
 804a1e4:	d901      	bls.n	804a1ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 804a1e6:	2303      	movs	r3, #3
 804a1e8:	e006      	b.n	804a1f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 804a1ea:	687b      	ldr	r3, [r7, #4]
 804a1ec:	691b      	ldr	r3, [r3, #16]
 804a1ee:	f003 0310 	and.w	r3, r3, #16
 804a1f2:	2b10      	cmp	r3, #16
 804a1f4:	d0f0      	beq.n	804a1d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 804a1f6:	2300      	movs	r3, #0
}
 804a1f8:	4618      	mov	r0, r3
 804a1fa:	3714      	adds	r7, #20
 804a1fc:	46bd      	mov	sp, r7
 804a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a202:	4770      	bx	lr
 804a204:	00030d40 	.word	0x00030d40

0804a208 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 804a208:	b480      	push	{r7}
 804a20a:	b089      	sub	sp, #36	; 0x24
 804a20c:	af00      	add	r7, sp, #0
 804a20e:	60f8      	str	r0, [r7, #12]
 804a210:	60b9      	str	r1, [r7, #8]
 804a212:	4611      	mov	r1, r2
 804a214:	461a      	mov	r2, r3
 804a216:	460b      	mov	r3, r1
 804a218:	71fb      	strb	r3, [r7, #7]
 804a21a:	4613      	mov	r3, r2
 804a21c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a21e:	68fb      	ldr	r3, [r7, #12]
 804a220:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 804a222:	68bb      	ldr	r3, [r7, #8]
 804a224:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 804a226:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 804a22a:	2b00      	cmp	r3, #0
 804a22c:	d123      	bne.n	804a276 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 804a22e:	88bb      	ldrh	r3, [r7, #4]
 804a230:	3303      	adds	r3, #3
 804a232:	089b      	lsrs	r3, r3, #2
 804a234:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 804a236:	2300      	movs	r3, #0
 804a238:	61bb      	str	r3, [r7, #24]
 804a23a:	e018      	b.n	804a26e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 804a23c:	79fb      	ldrb	r3, [r7, #7]
 804a23e:	031a      	lsls	r2, r3, #12
 804a240:	697b      	ldr	r3, [r7, #20]
 804a242:	4413      	add	r3, r2
 804a244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804a248:	461a      	mov	r2, r3
 804a24a:	69fb      	ldr	r3, [r7, #28]
 804a24c:	681b      	ldr	r3, [r3, #0]
 804a24e:	6013      	str	r3, [r2, #0]
      pSrc++;
 804a250:	69fb      	ldr	r3, [r7, #28]
 804a252:	3301      	adds	r3, #1
 804a254:	61fb      	str	r3, [r7, #28]
      pSrc++;
 804a256:	69fb      	ldr	r3, [r7, #28]
 804a258:	3301      	adds	r3, #1
 804a25a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 804a25c:	69fb      	ldr	r3, [r7, #28]
 804a25e:	3301      	adds	r3, #1
 804a260:	61fb      	str	r3, [r7, #28]
      pSrc++;
 804a262:	69fb      	ldr	r3, [r7, #28]
 804a264:	3301      	adds	r3, #1
 804a266:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 804a268:	69bb      	ldr	r3, [r7, #24]
 804a26a:	3301      	adds	r3, #1
 804a26c:	61bb      	str	r3, [r7, #24]
 804a26e:	69ba      	ldr	r2, [r7, #24]
 804a270:	693b      	ldr	r3, [r7, #16]
 804a272:	429a      	cmp	r2, r3
 804a274:	d3e2      	bcc.n	804a23c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 804a276:	2300      	movs	r3, #0
}
 804a278:	4618      	mov	r0, r3
 804a27a:	3724      	adds	r7, #36	; 0x24
 804a27c:	46bd      	mov	sp, r7
 804a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a282:	4770      	bx	lr

0804a284 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 804a284:	b480      	push	{r7}
 804a286:	b08b      	sub	sp, #44	; 0x2c
 804a288:	af00      	add	r7, sp, #0
 804a28a:	60f8      	str	r0, [r7, #12]
 804a28c:	60b9      	str	r1, [r7, #8]
 804a28e:	4613      	mov	r3, r2
 804a290:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a292:	68fb      	ldr	r3, [r7, #12]
 804a294:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 804a296:	68bb      	ldr	r3, [r7, #8]
 804a298:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 804a29a:	88fb      	ldrh	r3, [r7, #6]
 804a29c:	089b      	lsrs	r3, r3, #2
 804a29e:	b29b      	uxth	r3, r3
 804a2a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 804a2a2:	88fb      	ldrh	r3, [r7, #6]
 804a2a4:	f003 0303 	and.w	r3, r3, #3
 804a2a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 804a2aa:	2300      	movs	r3, #0
 804a2ac:	623b      	str	r3, [r7, #32]
 804a2ae:	e014      	b.n	804a2da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 804a2b0:	69bb      	ldr	r3, [r7, #24]
 804a2b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804a2b6:	681a      	ldr	r2, [r3, #0]
 804a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a2ba:	601a      	str	r2, [r3, #0]
    pDest++;
 804a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a2be:	3301      	adds	r3, #1
 804a2c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 804a2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a2c4:	3301      	adds	r3, #1
 804a2c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 804a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a2ca:	3301      	adds	r3, #1
 804a2cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 804a2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a2d0:	3301      	adds	r3, #1
 804a2d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 804a2d4:	6a3b      	ldr	r3, [r7, #32]
 804a2d6:	3301      	adds	r3, #1
 804a2d8:	623b      	str	r3, [r7, #32]
 804a2da:	6a3a      	ldr	r2, [r7, #32]
 804a2dc:	697b      	ldr	r3, [r7, #20]
 804a2de:	429a      	cmp	r2, r3
 804a2e0:	d3e6      	bcc.n	804a2b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 804a2e2:	8bfb      	ldrh	r3, [r7, #30]
 804a2e4:	2b00      	cmp	r3, #0
 804a2e6:	d01e      	beq.n	804a326 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 804a2e8:	2300      	movs	r3, #0
 804a2ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 804a2ec:	69bb      	ldr	r3, [r7, #24]
 804a2ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804a2f2:	461a      	mov	r2, r3
 804a2f4:	f107 0310 	add.w	r3, r7, #16
 804a2f8:	6812      	ldr	r2, [r2, #0]
 804a2fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 804a2fc:	693a      	ldr	r2, [r7, #16]
 804a2fe:	6a3b      	ldr	r3, [r7, #32]
 804a300:	b2db      	uxtb	r3, r3
 804a302:	00db      	lsls	r3, r3, #3
 804a304:	fa22 f303 	lsr.w	r3, r2, r3
 804a308:	b2da      	uxtb	r2, r3
 804a30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a30c:	701a      	strb	r2, [r3, #0]
      i++;
 804a30e:	6a3b      	ldr	r3, [r7, #32]
 804a310:	3301      	adds	r3, #1
 804a312:	623b      	str	r3, [r7, #32]
      pDest++;
 804a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a316:	3301      	adds	r3, #1
 804a318:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 804a31a:	8bfb      	ldrh	r3, [r7, #30]
 804a31c:	3b01      	subs	r3, #1
 804a31e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 804a320:	8bfb      	ldrh	r3, [r7, #30]
 804a322:	2b00      	cmp	r3, #0
 804a324:	d1ea      	bne.n	804a2fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 804a326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 804a328:	4618      	mov	r0, r3
 804a32a:	372c      	adds	r7, #44	; 0x2c
 804a32c:	46bd      	mov	sp, r7
 804a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a332:	4770      	bx	lr

0804a334 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 804a334:	b480      	push	{r7}
 804a336:	b085      	sub	sp, #20
 804a338:	af00      	add	r7, sp, #0
 804a33a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 804a33c:	687b      	ldr	r3, [r7, #4]
 804a33e:	695b      	ldr	r3, [r3, #20]
 804a340:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 804a342:	687b      	ldr	r3, [r7, #4]
 804a344:	699b      	ldr	r3, [r3, #24]
 804a346:	68fa      	ldr	r2, [r7, #12]
 804a348:	4013      	ands	r3, r2
 804a34a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 804a34c:	68fb      	ldr	r3, [r7, #12]
}
 804a34e:	4618      	mov	r0, r3
 804a350:	3714      	adds	r7, #20
 804a352:	46bd      	mov	sp, r7
 804a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a358:	4770      	bx	lr

0804a35a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 804a35a:	b480      	push	{r7}
 804a35c:	b083      	sub	sp, #12
 804a35e:	af00      	add	r7, sp, #0
 804a360:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 804a362:	687b      	ldr	r3, [r7, #4]
 804a364:	695b      	ldr	r3, [r3, #20]
 804a366:	f003 0301 	and.w	r3, r3, #1
}
 804a36a:	4618      	mov	r0, r3
 804a36c:	370c      	adds	r7, #12
 804a36e:	46bd      	mov	sp, r7
 804a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a374:	4770      	bx	lr
	...

0804a378 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 804a378:	b480      	push	{r7}
 804a37a:	b085      	sub	sp, #20
 804a37c:	af00      	add	r7, sp, #0
 804a37e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 804a380:	2300      	movs	r3, #0
 804a382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 804a384:	68fb      	ldr	r3, [r7, #12]
 804a386:	3301      	adds	r3, #1
 804a388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804a38a:	68fb      	ldr	r3, [r7, #12]
 804a38c:	4a13      	ldr	r2, [pc, #76]	; (804a3dc <USB_CoreReset+0x64>)
 804a38e:	4293      	cmp	r3, r2
 804a390:	d901      	bls.n	804a396 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 804a392:	2303      	movs	r3, #3
 804a394:	e01b      	b.n	804a3ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 804a396:	687b      	ldr	r3, [r7, #4]
 804a398:	691b      	ldr	r3, [r3, #16]
 804a39a:	2b00      	cmp	r3, #0
 804a39c:	daf2      	bge.n	804a384 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 804a39e:	2300      	movs	r3, #0
 804a3a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 804a3a2:	687b      	ldr	r3, [r7, #4]
 804a3a4:	691b      	ldr	r3, [r3, #16]
 804a3a6:	f043 0201 	orr.w	r2, r3, #1
 804a3aa:	687b      	ldr	r3, [r7, #4]
 804a3ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 804a3ae:	68fb      	ldr	r3, [r7, #12]
 804a3b0:	3301      	adds	r3, #1
 804a3b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804a3b4:	68fb      	ldr	r3, [r7, #12]
 804a3b6:	4a09      	ldr	r2, [pc, #36]	; (804a3dc <USB_CoreReset+0x64>)
 804a3b8:	4293      	cmp	r3, r2
 804a3ba:	d901      	bls.n	804a3c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 804a3bc:	2303      	movs	r3, #3
 804a3be:	e006      	b.n	804a3ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 804a3c0:	687b      	ldr	r3, [r7, #4]
 804a3c2:	691b      	ldr	r3, [r3, #16]
 804a3c4:	f003 0301 	and.w	r3, r3, #1
 804a3c8:	2b01      	cmp	r3, #1
 804a3ca:	d0f0      	beq.n	804a3ae <USB_CoreReset+0x36>

  return HAL_OK;
 804a3cc:	2300      	movs	r3, #0
}
 804a3ce:	4618      	mov	r0, r3
 804a3d0:	3714      	adds	r7, #20
 804a3d2:	46bd      	mov	sp, r7
 804a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a3d8:	4770      	bx	lr
 804a3da:	bf00      	nop
 804a3dc:	00030d40 	.word	0x00030d40

0804a3e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 804a3e0:	b084      	sub	sp, #16
 804a3e2:	b580      	push	{r7, lr}
 804a3e4:	b086      	sub	sp, #24
 804a3e6:	af00      	add	r7, sp, #0
 804a3e8:	6078      	str	r0, [r7, #4]
 804a3ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 804a3ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 804a3f2:	2300      	movs	r3, #0
 804a3f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a3f6:	687b      	ldr	r3, [r7, #4]
 804a3f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 804a3fa:	68fb      	ldr	r3, [r7, #12]
 804a3fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 804a400:	461a      	mov	r2, r3
 804a402:	2300      	movs	r3, #0
 804a404:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 804a406:	687b      	ldr	r3, [r7, #4]
 804a408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a40a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 804a40e:	687b      	ldr	r3, [r7, #4]
 804a410:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 804a412:	687b      	ldr	r3, [r7, #4]
 804a414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a416:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 804a41a:	687b      	ldr	r3, [r7, #4]
 804a41c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 804a41e:	687b      	ldr	r3, [r7, #4]
 804a420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a422:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 804a426:	687b      	ldr	r3, [r7, #4]
 804a428:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 804a42a:	687b      	ldr	r3, [r7, #4]
 804a42c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a42e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804a432:	2b00      	cmp	r3, #0
 804a434:	d018      	beq.n	804a468 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 804a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804a438:	2b01      	cmp	r3, #1
 804a43a:	d10a      	bne.n	804a452 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 804a43c:	68fb      	ldr	r3, [r7, #12]
 804a43e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a442:	681b      	ldr	r3, [r3, #0]
 804a444:	68fa      	ldr	r2, [r7, #12]
 804a446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804a44a:	f043 0304 	orr.w	r3, r3, #4
 804a44e:	6013      	str	r3, [r2, #0]
 804a450:	e014      	b.n	804a47c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 804a452:	68fb      	ldr	r3, [r7, #12]
 804a454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a458:	681b      	ldr	r3, [r3, #0]
 804a45a:	68fa      	ldr	r2, [r7, #12]
 804a45c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804a460:	f023 0304 	bic.w	r3, r3, #4
 804a464:	6013      	str	r3, [r2, #0]
 804a466:	e009      	b.n	804a47c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 804a468:	68fb      	ldr	r3, [r7, #12]
 804a46a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a46e:	681b      	ldr	r3, [r3, #0]
 804a470:	68fa      	ldr	r2, [r7, #12]
 804a472:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804a476:	f023 0304 	bic.w	r3, r3, #4
 804a47a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 804a47c:	2110      	movs	r1, #16
 804a47e:	6878      	ldr	r0, [r7, #4]
 804a480:	f7ff fe5e 	bl	804a140 <USB_FlushTxFifo>
 804a484:	4603      	mov	r3, r0
 804a486:	2b00      	cmp	r3, #0
 804a488:	d001      	beq.n	804a48e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 804a48a:	2301      	movs	r3, #1
 804a48c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 804a48e:	6878      	ldr	r0, [r7, #4]
 804a490:	f7ff fe8a 	bl	804a1a8 <USB_FlushRxFifo>
 804a494:	4603      	mov	r3, r0
 804a496:	2b00      	cmp	r3, #0
 804a498:	d001      	beq.n	804a49e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 804a49a:	2301      	movs	r3, #1
 804a49c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 804a49e:	2300      	movs	r3, #0
 804a4a0:	613b      	str	r3, [r7, #16]
 804a4a2:	e015      	b.n	804a4d0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 804a4a4:	693b      	ldr	r3, [r7, #16]
 804a4a6:	015a      	lsls	r2, r3, #5
 804a4a8:	68fb      	ldr	r3, [r7, #12]
 804a4aa:	4413      	add	r3, r2
 804a4ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a4b0:	461a      	mov	r2, r3
 804a4b2:	f04f 33ff 	mov.w	r3, #4294967295
 804a4b6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 804a4b8:	693b      	ldr	r3, [r7, #16]
 804a4ba:	015a      	lsls	r2, r3, #5
 804a4bc:	68fb      	ldr	r3, [r7, #12]
 804a4be:	4413      	add	r3, r2
 804a4c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a4c4:	461a      	mov	r2, r3
 804a4c6:	2300      	movs	r3, #0
 804a4c8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 804a4ca:	693b      	ldr	r3, [r7, #16]
 804a4cc:	3301      	adds	r3, #1
 804a4ce:	613b      	str	r3, [r7, #16]
 804a4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804a4d2:	693a      	ldr	r2, [r7, #16]
 804a4d4:	429a      	cmp	r2, r3
 804a4d6:	d3e5      	bcc.n	804a4a4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 804a4d8:	687b      	ldr	r3, [r7, #4]
 804a4da:	2200      	movs	r2, #0
 804a4dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 804a4de:	687b      	ldr	r3, [r7, #4]
 804a4e0:	f04f 32ff 	mov.w	r2, #4294967295
 804a4e4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 804a4e6:	687b      	ldr	r3, [r7, #4]
 804a4e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a4ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804a4ee:	2b00      	cmp	r3, #0
 804a4f0:	d00b      	beq.n	804a50a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 804a4f2:	687b      	ldr	r3, [r7, #4]
 804a4f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 804a4f8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 804a4fa:	687b      	ldr	r3, [r7, #4]
 804a4fc:	4a13      	ldr	r2, [pc, #76]	; (804a54c <USB_HostInit+0x16c>)
 804a4fe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 804a500:	687b      	ldr	r3, [r7, #4]
 804a502:	4a13      	ldr	r2, [pc, #76]	; (804a550 <USB_HostInit+0x170>)
 804a504:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 804a508:	e009      	b.n	804a51e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 804a50a:	687b      	ldr	r3, [r7, #4]
 804a50c:	2280      	movs	r2, #128	; 0x80
 804a50e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 804a510:	687b      	ldr	r3, [r7, #4]
 804a512:	4a10      	ldr	r2, [pc, #64]	; (804a554 <USB_HostInit+0x174>)
 804a514:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 804a516:	687b      	ldr	r3, [r7, #4]
 804a518:	4a0f      	ldr	r2, [pc, #60]	; (804a558 <USB_HostInit+0x178>)
 804a51a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 804a51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804a520:	2b00      	cmp	r3, #0
 804a522:	d105      	bne.n	804a530 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 804a524:	687b      	ldr	r3, [r7, #4]
 804a526:	699b      	ldr	r3, [r3, #24]
 804a528:	f043 0210 	orr.w	r2, r3, #16
 804a52c:	687b      	ldr	r3, [r7, #4]
 804a52e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 804a530:	687b      	ldr	r3, [r7, #4]
 804a532:	699a      	ldr	r2, [r3, #24]
 804a534:	4b09      	ldr	r3, [pc, #36]	; (804a55c <USB_HostInit+0x17c>)
 804a536:	4313      	orrs	r3, r2
 804a538:	687a      	ldr	r2, [r7, #4]
 804a53a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 804a53c:	7dfb      	ldrb	r3, [r7, #23]
}
 804a53e:	4618      	mov	r0, r3
 804a540:	3718      	adds	r7, #24
 804a542:	46bd      	mov	sp, r7
 804a544:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 804a548:	b004      	add	sp, #16
 804a54a:	4770      	bx	lr
 804a54c:	01000200 	.word	0x01000200
 804a550:	00e00300 	.word	0x00e00300
 804a554:	00600080 	.word	0x00600080
 804a558:	004000e0 	.word	0x004000e0
 804a55c:	a3200008 	.word	0xa3200008

0804a560 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 804a560:	b480      	push	{r7}
 804a562:	b085      	sub	sp, #20
 804a564:	af00      	add	r7, sp, #0
 804a566:	6078      	str	r0, [r7, #4]
 804a568:	460b      	mov	r3, r1
 804a56a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a56c:	687b      	ldr	r3, [r7, #4]
 804a56e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 804a570:	68fb      	ldr	r3, [r7, #12]
 804a572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a576:	681b      	ldr	r3, [r3, #0]
 804a578:	68fa      	ldr	r2, [r7, #12]
 804a57a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804a57e:	f023 0303 	bic.w	r3, r3, #3
 804a582:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 804a584:	68fb      	ldr	r3, [r7, #12]
 804a586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a58a:	681a      	ldr	r2, [r3, #0]
 804a58c:	78fb      	ldrb	r3, [r7, #3]
 804a58e:	f003 0303 	and.w	r3, r3, #3
 804a592:	68f9      	ldr	r1, [r7, #12]
 804a594:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 804a598:	4313      	orrs	r3, r2
 804a59a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 804a59c:	78fb      	ldrb	r3, [r7, #3]
 804a59e:	2b01      	cmp	r3, #1
 804a5a0:	d107      	bne.n	804a5b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 804a5a2:	68fb      	ldr	r3, [r7, #12]
 804a5a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a5a8:	461a      	mov	r2, r3
 804a5aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 804a5ae:	6053      	str	r3, [r2, #4]
 804a5b0:	e009      	b.n	804a5c6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 804a5b2:	78fb      	ldrb	r3, [r7, #3]
 804a5b4:	2b02      	cmp	r3, #2
 804a5b6:	d106      	bne.n	804a5c6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 804a5b8:	68fb      	ldr	r3, [r7, #12]
 804a5ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a5be:	461a      	mov	r2, r3
 804a5c0:	f241 7370 	movw	r3, #6000	; 0x1770
 804a5c4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 804a5c6:	2300      	movs	r3, #0
}
 804a5c8:	4618      	mov	r0, r3
 804a5ca:	3714      	adds	r7, #20
 804a5cc:	46bd      	mov	sp, r7
 804a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a5d2:	4770      	bx	lr

0804a5d4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 804a5d4:	b580      	push	{r7, lr}
 804a5d6:	b084      	sub	sp, #16
 804a5d8:	af00      	add	r7, sp, #0
 804a5da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a5dc:	687b      	ldr	r3, [r7, #4]
 804a5de:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 804a5e0:	2300      	movs	r3, #0
 804a5e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 804a5e4:	68fb      	ldr	r3, [r7, #12]
 804a5e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 804a5ea:	681b      	ldr	r3, [r3, #0]
 804a5ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 804a5ee:	68bb      	ldr	r3, [r7, #8]
 804a5f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 804a5f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 804a5f6:	68bb      	ldr	r3, [r7, #8]
 804a5f8:	68fa      	ldr	r2, [r7, #12]
 804a5fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 804a5fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804a602:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 804a604:	2064      	movs	r0, #100	; 0x64
 804a606:	f7f8 ff8b 	bl	8043520 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 804a60a:	68bb      	ldr	r3, [r7, #8]
 804a60c:	68fa      	ldr	r2, [r7, #12]
 804a60e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 804a612:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 804a616:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 804a618:	200a      	movs	r0, #10
 804a61a:	f7f8 ff81 	bl	8043520 <HAL_Delay>

  return HAL_OK;
 804a61e:	2300      	movs	r3, #0
}
 804a620:	4618      	mov	r0, r3
 804a622:	3710      	adds	r7, #16
 804a624:	46bd      	mov	sp, r7
 804a626:	bd80      	pop	{r7, pc}

0804a628 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 804a628:	b480      	push	{r7}
 804a62a:	b085      	sub	sp, #20
 804a62c:	af00      	add	r7, sp, #0
 804a62e:	6078      	str	r0, [r7, #4]
 804a630:	460b      	mov	r3, r1
 804a632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a634:	687b      	ldr	r3, [r7, #4]
 804a636:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 804a638:	2300      	movs	r3, #0
 804a63a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 804a63c:	68fb      	ldr	r3, [r7, #12]
 804a63e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 804a642:	681b      	ldr	r3, [r3, #0]
 804a644:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 804a646:	68bb      	ldr	r3, [r7, #8]
 804a648:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 804a64c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 804a64e:	68bb      	ldr	r3, [r7, #8]
 804a650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804a654:	2b00      	cmp	r3, #0
 804a656:	d109      	bne.n	804a66c <USB_DriveVbus+0x44>
 804a658:	78fb      	ldrb	r3, [r7, #3]
 804a65a:	2b01      	cmp	r3, #1
 804a65c:	d106      	bne.n	804a66c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 804a65e:	68bb      	ldr	r3, [r7, #8]
 804a660:	68fa      	ldr	r2, [r7, #12]
 804a662:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 804a666:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804a66a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 804a66c:	68bb      	ldr	r3, [r7, #8]
 804a66e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804a672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804a676:	d109      	bne.n	804a68c <USB_DriveVbus+0x64>
 804a678:	78fb      	ldrb	r3, [r7, #3]
 804a67a:	2b00      	cmp	r3, #0
 804a67c:	d106      	bne.n	804a68c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 804a67e:	68bb      	ldr	r3, [r7, #8]
 804a680:	68fa      	ldr	r2, [r7, #12]
 804a682:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 804a686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804a68a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 804a68c:	2300      	movs	r3, #0
}
 804a68e:	4618      	mov	r0, r3
 804a690:	3714      	adds	r7, #20
 804a692:	46bd      	mov	sp, r7
 804a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a698:	4770      	bx	lr

0804a69a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 804a69a:	b480      	push	{r7}
 804a69c:	b085      	sub	sp, #20
 804a69e:	af00      	add	r7, sp, #0
 804a6a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a6a2:	687b      	ldr	r3, [r7, #4]
 804a6a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 804a6a6:	2300      	movs	r3, #0
 804a6a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 804a6aa:	68fb      	ldr	r3, [r7, #12]
 804a6ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 804a6b0:	681b      	ldr	r3, [r3, #0]
 804a6b2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 804a6b4:	68bb      	ldr	r3, [r7, #8]
 804a6b6:	0c5b      	lsrs	r3, r3, #17
 804a6b8:	f003 0303 	and.w	r3, r3, #3
}
 804a6bc:	4618      	mov	r0, r3
 804a6be:	3714      	adds	r7, #20
 804a6c0:	46bd      	mov	sp, r7
 804a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a6c6:	4770      	bx	lr

0804a6c8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 804a6c8:	b480      	push	{r7}
 804a6ca:	b085      	sub	sp, #20
 804a6cc:	af00      	add	r7, sp, #0
 804a6ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a6d0:	687b      	ldr	r3, [r7, #4]
 804a6d2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 804a6d4:	68fb      	ldr	r3, [r7, #12]
 804a6d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a6da:	689b      	ldr	r3, [r3, #8]
 804a6dc:	b29b      	uxth	r3, r3
}
 804a6de:	4618      	mov	r0, r3
 804a6e0:	3714      	adds	r7, #20
 804a6e2:	46bd      	mov	sp, r7
 804a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a6e8:	4770      	bx	lr
	...

0804a6ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 804a6ec:	b580      	push	{r7, lr}
 804a6ee:	b088      	sub	sp, #32
 804a6f0:	af00      	add	r7, sp, #0
 804a6f2:	6078      	str	r0, [r7, #4]
 804a6f4:	4608      	mov	r0, r1
 804a6f6:	4611      	mov	r1, r2
 804a6f8:	461a      	mov	r2, r3
 804a6fa:	4603      	mov	r3, r0
 804a6fc:	70fb      	strb	r3, [r7, #3]
 804a6fe:	460b      	mov	r3, r1
 804a700:	70bb      	strb	r3, [r7, #2]
 804a702:	4613      	mov	r3, r2
 804a704:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 804a706:	2300      	movs	r3, #0
 804a708:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a70a:	687b      	ldr	r3, [r7, #4]
 804a70c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 804a70e:	78fb      	ldrb	r3, [r7, #3]
 804a710:	015a      	lsls	r2, r3, #5
 804a712:	693b      	ldr	r3, [r7, #16]
 804a714:	4413      	add	r3, r2
 804a716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a71a:	461a      	mov	r2, r3
 804a71c:	f04f 33ff 	mov.w	r3, #4294967295
 804a720:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 804a722:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804a726:	2b03      	cmp	r3, #3
 804a728:	d87e      	bhi.n	804a828 <USB_HC_Init+0x13c>
 804a72a:	a201      	add	r2, pc, #4	; (adr r2, 804a730 <USB_HC_Init+0x44>)
 804a72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a730:	0804a741 	.word	0x0804a741
 804a734:	0804a7eb 	.word	0x0804a7eb
 804a738:	0804a741 	.word	0x0804a741
 804a73c:	0804a7ad 	.word	0x0804a7ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 804a740:	78fb      	ldrb	r3, [r7, #3]
 804a742:	015a      	lsls	r2, r3, #5
 804a744:	693b      	ldr	r3, [r7, #16]
 804a746:	4413      	add	r3, r2
 804a748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a74c:	461a      	mov	r2, r3
 804a74e:	f240 439d 	movw	r3, #1181	; 0x49d
 804a752:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 804a754:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804a758:	2b00      	cmp	r3, #0
 804a75a:	da10      	bge.n	804a77e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 804a75c:	78fb      	ldrb	r3, [r7, #3]
 804a75e:	015a      	lsls	r2, r3, #5
 804a760:	693b      	ldr	r3, [r7, #16]
 804a762:	4413      	add	r3, r2
 804a764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a768:	68db      	ldr	r3, [r3, #12]
 804a76a:	78fa      	ldrb	r2, [r7, #3]
 804a76c:	0151      	lsls	r1, r2, #5
 804a76e:	693a      	ldr	r2, [r7, #16]
 804a770:	440a      	add	r2, r1
 804a772:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804a77a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 804a77c:	e057      	b.n	804a82e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 804a77e:	687b      	ldr	r3, [r7, #4]
 804a780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804a786:	2b00      	cmp	r3, #0
 804a788:	d051      	beq.n	804a82e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 804a78a:	78fb      	ldrb	r3, [r7, #3]
 804a78c:	015a      	lsls	r2, r3, #5
 804a78e:	693b      	ldr	r3, [r7, #16]
 804a790:	4413      	add	r3, r2
 804a792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a796:	68db      	ldr	r3, [r3, #12]
 804a798:	78fa      	ldrb	r2, [r7, #3]
 804a79a:	0151      	lsls	r1, r2, #5
 804a79c:	693a      	ldr	r2, [r7, #16]
 804a79e:	440a      	add	r2, r1
 804a7a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a7a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 804a7a8:	60d3      	str	r3, [r2, #12]
      break;
 804a7aa:	e040      	b.n	804a82e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 804a7ac:	78fb      	ldrb	r3, [r7, #3]
 804a7ae:	015a      	lsls	r2, r3, #5
 804a7b0:	693b      	ldr	r3, [r7, #16]
 804a7b2:	4413      	add	r3, r2
 804a7b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a7b8:	461a      	mov	r2, r3
 804a7ba:	f240 639d 	movw	r3, #1693	; 0x69d
 804a7be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 804a7c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804a7c4:	2b00      	cmp	r3, #0
 804a7c6:	da34      	bge.n	804a832 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 804a7c8:	78fb      	ldrb	r3, [r7, #3]
 804a7ca:	015a      	lsls	r2, r3, #5
 804a7cc:	693b      	ldr	r3, [r7, #16]
 804a7ce:	4413      	add	r3, r2
 804a7d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a7d4:	68db      	ldr	r3, [r3, #12]
 804a7d6:	78fa      	ldrb	r2, [r7, #3]
 804a7d8:	0151      	lsls	r1, r2, #5
 804a7da:	693a      	ldr	r2, [r7, #16]
 804a7dc:	440a      	add	r2, r1
 804a7de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a7e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804a7e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 804a7e8:	e023      	b.n	804a832 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 804a7ea:	78fb      	ldrb	r3, [r7, #3]
 804a7ec:	015a      	lsls	r2, r3, #5
 804a7ee:	693b      	ldr	r3, [r7, #16]
 804a7f0:	4413      	add	r3, r2
 804a7f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a7f6:	461a      	mov	r2, r3
 804a7f8:	f240 2325 	movw	r3, #549	; 0x225
 804a7fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 804a7fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804a802:	2b00      	cmp	r3, #0
 804a804:	da17      	bge.n	804a836 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 804a806:	78fb      	ldrb	r3, [r7, #3]
 804a808:	015a      	lsls	r2, r3, #5
 804a80a:	693b      	ldr	r3, [r7, #16]
 804a80c:	4413      	add	r3, r2
 804a80e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a812:	68db      	ldr	r3, [r3, #12]
 804a814:	78fa      	ldrb	r2, [r7, #3]
 804a816:	0151      	lsls	r1, r2, #5
 804a818:	693a      	ldr	r2, [r7, #16]
 804a81a:	440a      	add	r2, r1
 804a81c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a820:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 804a824:	60d3      	str	r3, [r2, #12]
      }
      break;
 804a826:	e006      	b.n	804a836 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 804a828:	2301      	movs	r3, #1
 804a82a:	77fb      	strb	r3, [r7, #31]
      break;
 804a82c:	e004      	b.n	804a838 <USB_HC_Init+0x14c>
      break;
 804a82e:	bf00      	nop
 804a830:	e002      	b.n	804a838 <USB_HC_Init+0x14c>
      break;
 804a832:	bf00      	nop
 804a834:	e000      	b.n	804a838 <USB_HC_Init+0x14c>
      break;
 804a836:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 804a838:	78fb      	ldrb	r3, [r7, #3]
 804a83a:	015a      	lsls	r2, r3, #5
 804a83c:	693b      	ldr	r3, [r7, #16]
 804a83e:	4413      	add	r3, r2
 804a840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a844:	68db      	ldr	r3, [r3, #12]
 804a846:	78fa      	ldrb	r2, [r7, #3]
 804a848:	0151      	lsls	r1, r2, #5
 804a84a:	693a      	ldr	r2, [r7, #16]
 804a84c:	440a      	add	r2, r1
 804a84e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a852:	f043 0302 	orr.w	r3, r3, #2
 804a856:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 804a858:	693b      	ldr	r3, [r7, #16]
 804a85a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a85e:	699a      	ldr	r2, [r3, #24]
 804a860:	78fb      	ldrb	r3, [r7, #3]
 804a862:	f003 030f 	and.w	r3, r3, #15
 804a866:	2101      	movs	r1, #1
 804a868:	fa01 f303 	lsl.w	r3, r1, r3
 804a86c:	6939      	ldr	r1, [r7, #16]
 804a86e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 804a872:	4313      	orrs	r3, r2
 804a874:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 804a876:	687b      	ldr	r3, [r7, #4]
 804a878:	699b      	ldr	r3, [r3, #24]
 804a87a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 804a87e:	687b      	ldr	r3, [r7, #4]
 804a880:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 804a882:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804a886:	2b00      	cmp	r3, #0
 804a888:	da03      	bge.n	804a892 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 804a88a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804a88e:	61bb      	str	r3, [r7, #24]
 804a890:	e001      	b.n	804a896 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 804a892:	2300      	movs	r3, #0
 804a894:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 804a896:	6878      	ldr	r0, [r7, #4]
 804a898:	f7ff feff 	bl	804a69a <USB_GetHostSpeed>
 804a89c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 804a89e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 804a8a2:	2b02      	cmp	r3, #2
 804a8a4:	d106      	bne.n	804a8b4 <USB_HC_Init+0x1c8>
 804a8a6:	68fb      	ldr	r3, [r7, #12]
 804a8a8:	2b02      	cmp	r3, #2
 804a8aa:	d003      	beq.n	804a8b4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 804a8ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 804a8b0:	617b      	str	r3, [r7, #20]
 804a8b2:	e001      	b.n	804a8b8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 804a8b4:	2300      	movs	r3, #0
 804a8b6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 804a8b8:	787b      	ldrb	r3, [r7, #1]
 804a8ba:	059b      	lsls	r3, r3, #22
 804a8bc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 804a8c0:	78bb      	ldrb	r3, [r7, #2]
 804a8c2:	02db      	lsls	r3, r3, #11
 804a8c4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 804a8c8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 804a8ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804a8ce:	049b      	lsls	r3, r3, #18
 804a8d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 804a8d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 804a8d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 804a8d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 804a8dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 804a8de:	69bb      	ldr	r3, [r7, #24]
 804a8e0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 804a8e2:	78fb      	ldrb	r3, [r7, #3]
 804a8e4:	0159      	lsls	r1, r3, #5
 804a8e6:	693b      	ldr	r3, [r7, #16]
 804a8e8:	440b      	add	r3, r1
 804a8ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a8ee:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 804a8f0:	697b      	ldr	r3, [r7, #20]
 804a8f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 804a8f4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 804a8f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804a8fa:	2b03      	cmp	r3, #3
 804a8fc:	d003      	beq.n	804a906 <USB_HC_Init+0x21a>
 804a8fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804a902:	2b01      	cmp	r3, #1
 804a904:	d10f      	bne.n	804a926 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 804a906:	78fb      	ldrb	r3, [r7, #3]
 804a908:	015a      	lsls	r2, r3, #5
 804a90a:	693b      	ldr	r3, [r7, #16]
 804a90c:	4413      	add	r3, r2
 804a90e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a912:	681b      	ldr	r3, [r3, #0]
 804a914:	78fa      	ldrb	r2, [r7, #3]
 804a916:	0151      	lsls	r1, r2, #5
 804a918:	693a      	ldr	r2, [r7, #16]
 804a91a:	440a      	add	r2, r1
 804a91c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a920:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 804a924:	6013      	str	r3, [r2, #0]
  }

  return ret;
 804a926:	7ffb      	ldrb	r3, [r7, #31]
}
 804a928:	4618      	mov	r0, r3
 804a92a:	3720      	adds	r7, #32
 804a92c:	46bd      	mov	sp, r7
 804a92e:	bd80      	pop	{r7, pc}

0804a930 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 804a930:	b580      	push	{r7, lr}
 804a932:	b08c      	sub	sp, #48	; 0x30
 804a934:	af02      	add	r7, sp, #8
 804a936:	60f8      	str	r0, [r7, #12]
 804a938:	60b9      	str	r1, [r7, #8]
 804a93a:	4613      	mov	r3, r2
 804a93c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a93e:	68fb      	ldr	r3, [r7, #12]
 804a940:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 804a942:	68bb      	ldr	r3, [r7, #8]
 804a944:	785b      	ldrb	r3, [r3, #1]
 804a946:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 804a948:	f44f 7380 	mov.w	r3, #256	; 0x100
 804a94c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 804a94e:	68fb      	ldr	r3, [r7, #12]
 804a950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804a956:	2b00      	cmp	r3, #0
 804a958:	d02d      	beq.n	804a9b6 <USB_HC_StartXfer+0x86>
 804a95a:	68bb      	ldr	r3, [r7, #8]
 804a95c:	791b      	ldrb	r3, [r3, #4]
 804a95e:	2b00      	cmp	r3, #0
 804a960:	d129      	bne.n	804a9b6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 804a962:	79fb      	ldrb	r3, [r7, #7]
 804a964:	2b01      	cmp	r3, #1
 804a966:	d117      	bne.n	804a998 <USB_HC_StartXfer+0x68>
 804a968:	68bb      	ldr	r3, [r7, #8]
 804a96a:	79db      	ldrb	r3, [r3, #7]
 804a96c:	2b00      	cmp	r3, #0
 804a96e:	d003      	beq.n	804a978 <USB_HC_StartXfer+0x48>
 804a970:	68bb      	ldr	r3, [r7, #8]
 804a972:	79db      	ldrb	r3, [r3, #7]
 804a974:	2b02      	cmp	r3, #2
 804a976:	d10f      	bne.n	804a998 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 804a978:	69fb      	ldr	r3, [r7, #28]
 804a97a:	015a      	lsls	r2, r3, #5
 804a97c:	6a3b      	ldr	r3, [r7, #32]
 804a97e:	4413      	add	r3, r2
 804a980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a984:	68db      	ldr	r3, [r3, #12]
 804a986:	69fa      	ldr	r2, [r7, #28]
 804a988:	0151      	lsls	r1, r2, #5
 804a98a:	6a3a      	ldr	r2, [r7, #32]
 804a98c:	440a      	add	r2, r1
 804a98e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804a996:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 804a998:	79fb      	ldrb	r3, [r7, #7]
 804a99a:	2b00      	cmp	r3, #0
 804a99c:	d10b      	bne.n	804a9b6 <USB_HC_StartXfer+0x86>
 804a99e:	68bb      	ldr	r3, [r7, #8]
 804a9a0:	795b      	ldrb	r3, [r3, #5]
 804a9a2:	2b01      	cmp	r3, #1
 804a9a4:	d107      	bne.n	804a9b6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 804a9a6:	68bb      	ldr	r3, [r7, #8]
 804a9a8:	785b      	ldrb	r3, [r3, #1]
 804a9aa:	4619      	mov	r1, r3
 804a9ac:	68f8      	ldr	r0, [r7, #12]
 804a9ae:	f000 fa0f 	bl	804add0 <USB_DoPing>
      return HAL_OK;
 804a9b2:	2300      	movs	r3, #0
 804a9b4:	e0f8      	b.n	804aba8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 804a9b6:	68bb      	ldr	r3, [r7, #8]
 804a9b8:	695b      	ldr	r3, [r3, #20]
 804a9ba:	2b00      	cmp	r3, #0
 804a9bc:	d018      	beq.n	804a9f0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 804a9be:	68bb      	ldr	r3, [r7, #8]
 804a9c0:	695b      	ldr	r3, [r3, #20]
 804a9c2:	68ba      	ldr	r2, [r7, #8]
 804a9c4:	8912      	ldrh	r2, [r2, #8]
 804a9c6:	4413      	add	r3, r2
 804a9c8:	3b01      	subs	r3, #1
 804a9ca:	68ba      	ldr	r2, [r7, #8]
 804a9cc:	8912      	ldrh	r2, [r2, #8]
 804a9ce:	fbb3 f3f2 	udiv	r3, r3, r2
 804a9d2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 804a9d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 804a9d6:	8b7b      	ldrh	r3, [r7, #26]
 804a9d8:	429a      	cmp	r2, r3
 804a9da:	d90b      	bls.n	804a9f4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 804a9dc:	8b7b      	ldrh	r3, [r7, #26]
 804a9de:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 804a9e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804a9e2:	68ba      	ldr	r2, [r7, #8]
 804a9e4:	8912      	ldrh	r2, [r2, #8]
 804a9e6:	fb03 f202 	mul.w	r2, r3, r2
 804a9ea:	68bb      	ldr	r3, [r7, #8]
 804a9ec:	611a      	str	r2, [r3, #16]
 804a9ee:	e001      	b.n	804a9f4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 804a9f0:	2301      	movs	r3, #1
 804a9f2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 804a9f4:	68bb      	ldr	r3, [r7, #8]
 804a9f6:	78db      	ldrb	r3, [r3, #3]
 804a9f8:	2b00      	cmp	r3, #0
 804a9fa:	d007      	beq.n	804aa0c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 804a9fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804a9fe:	68ba      	ldr	r2, [r7, #8]
 804aa00:	8912      	ldrh	r2, [r2, #8]
 804aa02:	fb03 f202 	mul.w	r2, r3, r2
 804aa06:	68bb      	ldr	r3, [r7, #8]
 804aa08:	611a      	str	r2, [r3, #16]
 804aa0a:	e003      	b.n	804aa14 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 804aa0c:	68bb      	ldr	r3, [r7, #8]
 804aa0e:	695a      	ldr	r2, [r3, #20]
 804aa10:	68bb      	ldr	r3, [r7, #8]
 804aa12:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 804aa14:	68bb      	ldr	r3, [r7, #8]
 804aa16:	691b      	ldr	r3, [r3, #16]
 804aa18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 804aa1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804aa1e:	04d9      	lsls	r1, r3, #19
 804aa20:	4b63      	ldr	r3, [pc, #396]	; (804abb0 <USB_HC_StartXfer+0x280>)
 804aa22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 804aa24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 804aa26:	68bb      	ldr	r3, [r7, #8]
 804aa28:	7a9b      	ldrb	r3, [r3, #10]
 804aa2a:	075b      	lsls	r3, r3, #29
 804aa2c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 804aa30:	69f9      	ldr	r1, [r7, #28]
 804aa32:	0148      	lsls	r0, r1, #5
 804aa34:	6a39      	ldr	r1, [r7, #32]
 804aa36:	4401      	add	r1, r0
 804aa38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 804aa3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 804aa3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 804aa40:	79fb      	ldrb	r3, [r7, #7]
 804aa42:	2b00      	cmp	r3, #0
 804aa44:	d009      	beq.n	804aa5a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 804aa46:	68bb      	ldr	r3, [r7, #8]
 804aa48:	68d9      	ldr	r1, [r3, #12]
 804aa4a:	69fb      	ldr	r3, [r7, #28]
 804aa4c:	015a      	lsls	r2, r3, #5
 804aa4e:	6a3b      	ldr	r3, [r7, #32]
 804aa50:	4413      	add	r3, r2
 804aa52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804aa56:	460a      	mov	r2, r1
 804aa58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 804aa5a:	6a3b      	ldr	r3, [r7, #32]
 804aa5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804aa60:	689b      	ldr	r3, [r3, #8]
 804aa62:	f003 0301 	and.w	r3, r3, #1
 804aa66:	2b00      	cmp	r3, #0
 804aa68:	bf0c      	ite	eq
 804aa6a:	2301      	moveq	r3, #1
 804aa6c:	2300      	movne	r3, #0
 804aa6e:	b2db      	uxtb	r3, r3
 804aa70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 804aa72:	69fb      	ldr	r3, [r7, #28]
 804aa74:	015a      	lsls	r2, r3, #5
 804aa76:	6a3b      	ldr	r3, [r7, #32]
 804aa78:	4413      	add	r3, r2
 804aa7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804aa7e:	681b      	ldr	r3, [r3, #0]
 804aa80:	69fa      	ldr	r2, [r7, #28]
 804aa82:	0151      	lsls	r1, r2, #5
 804aa84:	6a3a      	ldr	r2, [r7, #32]
 804aa86:	440a      	add	r2, r1
 804aa88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804aa8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 804aa90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 804aa92:	69fb      	ldr	r3, [r7, #28]
 804aa94:	015a      	lsls	r2, r3, #5
 804aa96:	6a3b      	ldr	r3, [r7, #32]
 804aa98:	4413      	add	r3, r2
 804aa9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804aa9e:	681a      	ldr	r2, [r3, #0]
 804aaa0:	7e7b      	ldrb	r3, [r7, #25]
 804aaa2:	075b      	lsls	r3, r3, #29
 804aaa4:	69f9      	ldr	r1, [r7, #28]
 804aaa6:	0148      	lsls	r0, r1, #5
 804aaa8:	6a39      	ldr	r1, [r7, #32]
 804aaaa:	4401      	add	r1, r0
 804aaac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 804aab0:	4313      	orrs	r3, r2
 804aab2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 804aab4:	69fb      	ldr	r3, [r7, #28]
 804aab6:	015a      	lsls	r2, r3, #5
 804aab8:	6a3b      	ldr	r3, [r7, #32]
 804aaba:	4413      	add	r3, r2
 804aabc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804aac0:	681b      	ldr	r3, [r3, #0]
 804aac2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804aac4:	693b      	ldr	r3, [r7, #16]
 804aac6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 804aaca:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 804aacc:	68bb      	ldr	r3, [r7, #8]
 804aace:	78db      	ldrb	r3, [r3, #3]
 804aad0:	2b00      	cmp	r3, #0
 804aad2:	d004      	beq.n	804aade <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 804aad4:	693b      	ldr	r3, [r7, #16]
 804aad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 804aada:	613b      	str	r3, [r7, #16]
 804aadc:	e003      	b.n	804aae6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 804aade:	693b      	ldr	r3, [r7, #16]
 804aae0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804aae4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 804aae6:	693b      	ldr	r3, [r7, #16]
 804aae8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804aaec:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 804aaee:	69fb      	ldr	r3, [r7, #28]
 804aaf0:	015a      	lsls	r2, r3, #5
 804aaf2:	6a3b      	ldr	r3, [r7, #32]
 804aaf4:	4413      	add	r3, r2
 804aaf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804aafa:	461a      	mov	r2, r3
 804aafc:	693b      	ldr	r3, [r7, #16]
 804aafe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 804ab00:	79fb      	ldrb	r3, [r7, #7]
 804ab02:	2b00      	cmp	r3, #0
 804ab04:	d001      	beq.n	804ab0a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 804ab06:	2300      	movs	r3, #0
 804ab08:	e04e      	b.n	804aba8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 804ab0a:	68bb      	ldr	r3, [r7, #8]
 804ab0c:	78db      	ldrb	r3, [r3, #3]
 804ab0e:	2b00      	cmp	r3, #0
 804ab10:	d149      	bne.n	804aba6 <USB_HC_StartXfer+0x276>
 804ab12:	68bb      	ldr	r3, [r7, #8]
 804ab14:	695b      	ldr	r3, [r3, #20]
 804ab16:	2b00      	cmp	r3, #0
 804ab18:	d045      	beq.n	804aba6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 804ab1a:	68bb      	ldr	r3, [r7, #8]
 804ab1c:	79db      	ldrb	r3, [r3, #7]
 804ab1e:	2b03      	cmp	r3, #3
 804ab20:	d830      	bhi.n	804ab84 <USB_HC_StartXfer+0x254>
 804ab22:	a201      	add	r2, pc, #4	; (adr r2, 804ab28 <USB_HC_StartXfer+0x1f8>)
 804ab24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804ab28:	0804ab39 	.word	0x0804ab39
 804ab2c:	0804ab5d 	.word	0x0804ab5d
 804ab30:	0804ab39 	.word	0x0804ab39
 804ab34:	0804ab5d 	.word	0x0804ab5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 804ab38:	68bb      	ldr	r3, [r7, #8]
 804ab3a:	695b      	ldr	r3, [r3, #20]
 804ab3c:	3303      	adds	r3, #3
 804ab3e:	089b      	lsrs	r3, r3, #2
 804ab40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 804ab42:	8afa      	ldrh	r2, [r7, #22]
 804ab44:	68fb      	ldr	r3, [r7, #12]
 804ab46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804ab48:	b29b      	uxth	r3, r3
 804ab4a:	429a      	cmp	r2, r3
 804ab4c:	d91c      	bls.n	804ab88 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 804ab4e:	68fb      	ldr	r3, [r7, #12]
 804ab50:	699b      	ldr	r3, [r3, #24]
 804ab52:	f043 0220 	orr.w	r2, r3, #32
 804ab56:	68fb      	ldr	r3, [r7, #12]
 804ab58:	619a      	str	r2, [r3, #24]
        }
        break;
 804ab5a:	e015      	b.n	804ab88 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 804ab5c:	68bb      	ldr	r3, [r7, #8]
 804ab5e:	695b      	ldr	r3, [r3, #20]
 804ab60:	3303      	adds	r3, #3
 804ab62:	089b      	lsrs	r3, r3, #2
 804ab64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 804ab66:	8afa      	ldrh	r2, [r7, #22]
 804ab68:	6a3b      	ldr	r3, [r7, #32]
 804ab6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804ab6e:	691b      	ldr	r3, [r3, #16]
 804ab70:	b29b      	uxth	r3, r3
 804ab72:	429a      	cmp	r2, r3
 804ab74:	d90a      	bls.n	804ab8c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 804ab76:	68fb      	ldr	r3, [r7, #12]
 804ab78:	699b      	ldr	r3, [r3, #24]
 804ab7a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 804ab7e:	68fb      	ldr	r3, [r7, #12]
 804ab80:	619a      	str	r2, [r3, #24]
        }
        break;
 804ab82:	e003      	b.n	804ab8c <USB_HC_StartXfer+0x25c>

      default:
        break;
 804ab84:	bf00      	nop
 804ab86:	e002      	b.n	804ab8e <USB_HC_StartXfer+0x25e>
        break;
 804ab88:	bf00      	nop
 804ab8a:	e000      	b.n	804ab8e <USB_HC_StartXfer+0x25e>
        break;
 804ab8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 804ab8e:	68bb      	ldr	r3, [r7, #8]
 804ab90:	68d9      	ldr	r1, [r3, #12]
 804ab92:	68bb      	ldr	r3, [r7, #8]
 804ab94:	785a      	ldrb	r2, [r3, #1]
 804ab96:	68bb      	ldr	r3, [r7, #8]
 804ab98:	695b      	ldr	r3, [r3, #20]
 804ab9a:	b29b      	uxth	r3, r3
 804ab9c:	2000      	movs	r0, #0
 804ab9e:	9000      	str	r0, [sp, #0]
 804aba0:	68f8      	ldr	r0, [r7, #12]
 804aba2:	f7ff fb31 	bl	804a208 <USB_WritePacket>
  }

  return HAL_OK;
 804aba6:	2300      	movs	r3, #0
}
 804aba8:	4618      	mov	r0, r3
 804abaa:	3728      	adds	r7, #40	; 0x28
 804abac:	46bd      	mov	sp, r7
 804abae:	bd80      	pop	{r7, pc}
 804abb0:	1ff80000 	.word	0x1ff80000

0804abb4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 804abb4:	b480      	push	{r7}
 804abb6:	b085      	sub	sp, #20
 804abb8:	af00      	add	r7, sp, #0
 804abba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804abbc:	687b      	ldr	r3, [r7, #4]
 804abbe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 804abc0:	68fb      	ldr	r3, [r7, #12]
 804abc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804abc6:	695b      	ldr	r3, [r3, #20]
 804abc8:	b29b      	uxth	r3, r3
}
 804abca:	4618      	mov	r0, r3
 804abcc:	3714      	adds	r7, #20
 804abce:	46bd      	mov	sp, r7
 804abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804abd4:	4770      	bx	lr

0804abd6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 804abd6:	b480      	push	{r7}
 804abd8:	b089      	sub	sp, #36	; 0x24
 804abda:	af00      	add	r7, sp, #0
 804abdc:	6078      	str	r0, [r7, #4]
 804abde:	460b      	mov	r3, r1
 804abe0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804abe2:	687b      	ldr	r3, [r7, #4]
 804abe4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 804abe6:	78fb      	ldrb	r3, [r7, #3]
 804abe8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 804abea:	2300      	movs	r3, #0
 804abec:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 804abee:	69bb      	ldr	r3, [r7, #24]
 804abf0:	015a      	lsls	r2, r3, #5
 804abf2:	69fb      	ldr	r3, [r7, #28]
 804abf4:	4413      	add	r3, r2
 804abf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804abfa:	681b      	ldr	r3, [r3, #0]
 804abfc:	0c9b      	lsrs	r3, r3, #18
 804abfe:	f003 0303 	and.w	r3, r3, #3
 804ac02:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 804ac04:	69bb      	ldr	r3, [r7, #24]
 804ac06:	015a      	lsls	r2, r3, #5
 804ac08:	69fb      	ldr	r3, [r7, #28]
 804ac0a:	4413      	add	r3, r2
 804ac0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804ac10:	681b      	ldr	r3, [r3, #0]
 804ac12:	0fdb      	lsrs	r3, r3, #31
 804ac14:	f003 0301 	and.w	r3, r3, #1
 804ac18:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 804ac1a:	687b      	ldr	r3, [r7, #4]
 804ac1c:	689b      	ldr	r3, [r3, #8]
 804ac1e:	f003 0320 	and.w	r3, r3, #32
 804ac22:	2b20      	cmp	r3, #32
 804ac24:	d104      	bne.n	804ac30 <USB_HC_Halt+0x5a>
 804ac26:	693b      	ldr	r3, [r7, #16]
 804ac28:	2b00      	cmp	r3, #0
 804ac2a:	d101      	bne.n	804ac30 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 804ac2c:	2300      	movs	r3, #0
 804ac2e:	e0c8      	b.n	804adc2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 804ac30:	697b      	ldr	r3, [r7, #20]
 804ac32:	2b00      	cmp	r3, #0
 804ac34:	d002      	beq.n	804ac3c <USB_HC_Halt+0x66>
 804ac36:	697b      	ldr	r3, [r7, #20]
 804ac38:	2b02      	cmp	r3, #2
 804ac3a:	d163      	bne.n	804ad04 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 804ac3c:	69bb      	ldr	r3, [r7, #24]
 804ac3e:	015a      	lsls	r2, r3, #5
 804ac40:	69fb      	ldr	r3, [r7, #28]
 804ac42:	4413      	add	r3, r2
 804ac44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804ac48:	681b      	ldr	r3, [r3, #0]
 804ac4a:	69ba      	ldr	r2, [r7, #24]
 804ac4c:	0151      	lsls	r1, r2, #5
 804ac4e:	69fa      	ldr	r2, [r7, #28]
 804ac50:	440a      	add	r2, r1
 804ac52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804ac56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804ac5a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804ac5c:	687b      	ldr	r3, [r7, #4]
 804ac5e:	689b      	ldr	r3, [r3, #8]
 804ac60:	f003 0320 	and.w	r3, r3, #32
 804ac64:	2b00      	cmp	r3, #0
 804ac66:	f040 80ab 	bne.w	804adc0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 804ac6a:	687b      	ldr	r3, [r7, #4]
 804ac6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804ac6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 804ac72:	2b00      	cmp	r3, #0
 804ac74:	d133      	bne.n	804acde <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 804ac76:	69bb      	ldr	r3, [r7, #24]
 804ac78:	015a      	lsls	r2, r3, #5
 804ac7a:	69fb      	ldr	r3, [r7, #28]
 804ac7c:	4413      	add	r3, r2
 804ac7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804ac82:	681b      	ldr	r3, [r3, #0]
 804ac84:	69ba      	ldr	r2, [r7, #24]
 804ac86:	0151      	lsls	r1, r2, #5
 804ac88:	69fa      	ldr	r2, [r7, #28]
 804ac8a:	440a      	add	r2, r1
 804ac8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804ac90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804ac94:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804ac96:	69bb      	ldr	r3, [r7, #24]
 804ac98:	015a      	lsls	r2, r3, #5
 804ac9a:	69fb      	ldr	r3, [r7, #28]
 804ac9c:	4413      	add	r3, r2
 804ac9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804aca2:	681b      	ldr	r3, [r3, #0]
 804aca4:	69ba      	ldr	r2, [r7, #24]
 804aca6:	0151      	lsls	r1, r2, #5
 804aca8:	69fa      	ldr	r2, [r7, #28]
 804acaa:	440a      	add	r2, r1
 804acac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804acb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804acb4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 804acb6:	68fb      	ldr	r3, [r7, #12]
 804acb8:	3301      	adds	r3, #1
 804acba:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 804acbc:	68fb      	ldr	r3, [r7, #12]
 804acbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804acc2:	d81d      	bhi.n	804ad00 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 804acc4:	69bb      	ldr	r3, [r7, #24]
 804acc6:	015a      	lsls	r2, r3, #5
 804acc8:	69fb      	ldr	r3, [r7, #28]
 804acca:	4413      	add	r3, r2
 804accc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804acd0:	681b      	ldr	r3, [r3, #0]
 804acd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804acd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804acda:	d0ec      	beq.n	804acb6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804acdc:	e070      	b.n	804adc0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804acde:	69bb      	ldr	r3, [r7, #24]
 804ace0:	015a      	lsls	r2, r3, #5
 804ace2:	69fb      	ldr	r3, [r7, #28]
 804ace4:	4413      	add	r3, r2
 804ace6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804acea:	681b      	ldr	r3, [r3, #0]
 804acec:	69ba      	ldr	r2, [r7, #24]
 804acee:	0151      	lsls	r1, r2, #5
 804acf0:	69fa      	ldr	r2, [r7, #28]
 804acf2:	440a      	add	r2, r1
 804acf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804acf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804acfc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804acfe:	e05f      	b.n	804adc0 <USB_HC_Halt+0x1ea>
            break;
 804ad00:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804ad02:	e05d      	b.n	804adc0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 804ad04:	69bb      	ldr	r3, [r7, #24]
 804ad06:	015a      	lsls	r2, r3, #5
 804ad08:	69fb      	ldr	r3, [r7, #28]
 804ad0a:	4413      	add	r3, r2
 804ad0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804ad10:	681b      	ldr	r3, [r3, #0]
 804ad12:	69ba      	ldr	r2, [r7, #24]
 804ad14:	0151      	lsls	r1, r2, #5
 804ad16:	69fa      	ldr	r2, [r7, #28]
 804ad18:	440a      	add	r2, r1
 804ad1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804ad1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804ad22:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 804ad24:	69fb      	ldr	r3, [r7, #28]
 804ad26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804ad2a:	691b      	ldr	r3, [r3, #16]
 804ad2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 804ad30:	2b00      	cmp	r3, #0
 804ad32:	d133      	bne.n	804ad9c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 804ad34:	69bb      	ldr	r3, [r7, #24]
 804ad36:	015a      	lsls	r2, r3, #5
 804ad38:	69fb      	ldr	r3, [r7, #28]
 804ad3a:	4413      	add	r3, r2
 804ad3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804ad40:	681b      	ldr	r3, [r3, #0]
 804ad42:	69ba      	ldr	r2, [r7, #24]
 804ad44:	0151      	lsls	r1, r2, #5
 804ad46:	69fa      	ldr	r2, [r7, #28]
 804ad48:	440a      	add	r2, r1
 804ad4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804ad4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804ad52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804ad54:	69bb      	ldr	r3, [r7, #24]
 804ad56:	015a      	lsls	r2, r3, #5
 804ad58:	69fb      	ldr	r3, [r7, #28]
 804ad5a:	4413      	add	r3, r2
 804ad5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804ad60:	681b      	ldr	r3, [r3, #0]
 804ad62:	69ba      	ldr	r2, [r7, #24]
 804ad64:	0151      	lsls	r1, r2, #5
 804ad66:	69fa      	ldr	r2, [r7, #28]
 804ad68:	440a      	add	r2, r1
 804ad6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804ad6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804ad72:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 804ad74:	68fb      	ldr	r3, [r7, #12]
 804ad76:	3301      	adds	r3, #1
 804ad78:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 804ad7a:	68fb      	ldr	r3, [r7, #12]
 804ad7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804ad80:	d81d      	bhi.n	804adbe <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 804ad82:	69bb      	ldr	r3, [r7, #24]
 804ad84:	015a      	lsls	r2, r3, #5
 804ad86:	69fb      	ldr	r3, [r7, #28]
 804ad88:	4413      	add	r3, r2
 804ad8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804ad8e:	681b      	ldr	r3, [r3, #0]
 804ad90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804ad94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804ad98:	d0ec      	beq.n	804ad74 <USB_HC_Halt+0x19e>
 804ad9a:	e011      	b.n	804adc0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804ad9c:	69bb      	ldr	r3, [r7, #24]
 804ad9e:	015a      	lsls	r2, r3, #5
 804ada0:	69fb      	ldr	r3, [r7, #28]
 804ada2:	4413      	add	r3, r2
 804ada4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804ada8:	681b      	ldr	r3, [r3, #0]
 804adaa:	69ba      	ldr	r2, [r7, #24]
 804adac:	0151      	lsls	r1, r2, #5
 804adae:	69fa      	ldr	r2, [r7, #28]
 804adb0:	440a      	add	r2, r1
 804adb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804adb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804adba:	6013      	str	r3, [r2, #0]
 804adbc:	e000      	b.n	804adc0 <USB_HC_Halt+0x1ea>
          break;
 804adbe:	bf00      	nop
    }
  }

  return HAL_OK;
 804adc0:	2300      	movs	r3, #0
}
 804adc2:	4618      	mov	r0, r3
 804adc4:	3724      	adds	r7, #36	; 0x24
 804adc6:	46bd      	mov	sp, r7
 804adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804adcc:	4770      	bx	lr
	...

0804add0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 804add0:	b480      	push	{r7}
 804add2:	b087      	sub	sp, #28
 804add4:	af00      	add	r7, sp, #0
 804add6:	6078      	str	r0, [r7, #4]
 804add8:	460b      	mov	r3, r1
 804adda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804addc:	687b      	ldr	r3, [r7, #4]
 804adde:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 804ade0:	78fb      	ldrb	r3, [r7, #3]
 804ade2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 804ade4:	2301      	movs	r3, #1
 804ade6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 804ade8:	68fb      	ldr	r3, [r7, #12]
 804adea:	04da      	lsls	r2, r3, #19
 804adec:	4b15      	ldr	r3, [pc, #84]	; (804ae44 <USB_DoPing+0x74>)
 804adee:	4013      	ands	r3, r2
 804adf0:	693a      	ldr	r2, [r7, #16]
 804adf2:	0151      	lsls	r1, r2, #5
 804adf4:	697a      	ldr	r2, [r7, #20]
 804adf6:	440a      	add	r2, r1
 804adf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804adfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804ae00:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 804ae02:	693b      	ldr	r3, [r7, #16]
 804ae04:	015a      	lsls	r2, r3, #5
 804ae06:	697b      	ldr	r3, [r7, #20]
 804ae08:	4413      	add	r3, r2
 804ae0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804ae0e:	681b      	ldr	r3, [r3, #0]
 804ae10:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804ae12:	68bb      	ldr	r3, [r7, #8]
 804ae14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 804ae18:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 804ae1a:	68bb      	ldr	r3, [r7, #8]
 804ae1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804ae20:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 804ae22:	693b      	ldr	r3, [r7, #16]
 804ae24:	015a      	lsls	r2, r3, #5
 804ae26:	697b      	ldr	r3, [r7, #20]
 804ae28:	4413      	add	r3, r2
 804ae2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804ae2e:	461a      	mov	r2, r3
 804ae30:	68bb      	ldr	r3, [r7, #8]
 804ae32:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 804ae34:	2300      	movs	r3, #0
}
 804ae36:	4618      	mov	r0, r3
 804ae38:	371c      	adds	r7, #28
 804ae3a:	46bd      	mov	sp, r7
 804ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ae40:	4770      	bx	lr
 804ae42:	bf00      	nop
 804ae44:	1ff80000 	.word	0x1ff80000

0804ae48 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 804ae48:	b580      	push	{r7, lr}
 804ae4a:	b088      	sub	sp, #32
 804ae4c:	af00      	add	r7, sp, #0
 804ae4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 804ae50:	2300      	movs	r3, #0
 804ae52:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804ae54:	687b      	ldr	r3, [r7, #4]
 804ae56:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 804ae58:	2300      	movs	r3, #0
 804ae5a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 804ae5c:	6878      	ldr	r0, [r7, #4]
 804ae5e:	f7ff f911 	bl	804a084 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 804ae62:	2110      	movs	r1, #16
 804ae64:	6878      	ldr	r0, [r7, #4]
 804ae66:	f7ff f96b 	bl	804a140 <USB_FlushTxFifo>
 804ae6a:	4603      	mov	r3, r0
 804ae6c:	2b00      	cmp	r3, #0
 804ae6e:	d001      	beq.n	804ae74 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 804ae70:	2301      	movs	r3, #1
 804ae72:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 804ae74:	6878      	ldr	r0, [r7, #4]
 804ae76:	f7ff f997 	bl	804a1a8 <USB_FlushRxFifo>
 804ae7a:	4603      	mov	r3, r0
 804ae7c:	2b00      	cmp	r3, #0
 804ae7e:	d001      	beq.n	804ae84 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 804ae80:	2301      	movs	r3, #1
 804ae82:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 804ae84:	2300      	movs	r3, #0
 804ae86:	61bb      	str	r3, [r7, #24]
 804ae88:	e01f      	b.n	804aeca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 804ae8a:	69bb      	ldr	r3, [r7, #24]
 804ae8c:	015a      	lsls	r2, r3, #5
 804ae8e:	697b      	ldr	r3, [r7, #20]
 804ae90:	4413      	add	r3, r2
 804ae92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804ae96:	681b      	ldr	r3, [r3, #0]
 804ae98:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 804ae9a:	693b      	ldr	r3, [r7, #16]
 804ae9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804aea0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 804aea2:	693b      	ldr	r3, [r7, #16]
 804aea4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804aea8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 804aeaa:	693b      	ldr	r3, [r7, #16]
 804aeac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804aeb0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 804aeb2:	69bb      	ldr	r3, [r7, #24]
 804aeb4:	015a      	lsls	r2, r3, #5
 804aeb6:	697b      	ldr	r3, [r7, #20]
 804aeb8:	4413      	add	r3, r2
 804aeba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804aebe:	461a      	mov	r2, r3
 804aec0:	693b      	ldr	r3, [r7, #16]
 804aec2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 804aec4:	69bb      	ldr	r3, [r7, #24]
 804aec6:	3301      	adds	r3, #1
 804aec8:	61bb      	str	r3, [r7, #24]
 804aeca:	69bb      	ldr	r3, [r7, #24]
 804aecc:	2b0f      	cmp	r3, #15
 804aece:	d9dc      	bls.n	804ae8a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 804aed0:	2300      	movs	r3, #0
 804aed2:	61bb      	str	r3, [r7, #24]
 804aed4:	e034      	b.n	804af40 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 804aed6:	69bb      	ldr	r3, [r7, #24]
 804aed8:	015a      	lsls	r2, r3, #5
 804aeda:	697b      	ldr	r3, [r7, #20]
 804aedc:	4413      	add	r3, r2
 804aede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804aee2:	681b      	ldr	r3, [r3, #0]
 804aee4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 804aee6:	693b      	ldr	r3, [r7, #16]
 804aee8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804aeec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 804aeee:	693b      	ldr	r3, [r7, #16]
 804aef0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804aef4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 804aef6:	693b      	ldr	r3, [r7, #16]
 804aef8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804aefc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 804aefe:	69bb      	ldr	r3, [r7, #24]
 804af00:	015a      	lsls	r2, r3, #5
 804af02:	697b      	ldr	r3, [r7, #20]
 804af04:	4413      	add	r3, r2
 804af06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804af0a:	461a      	mov	r2, r3
 804af0c:	693b      	ldr	r3, [r7, #16]
 804af0e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 804af10:	68fb      	ldr	r3, [r7, #12]
 804af12:	3301      	adds	r3, #1
 804af14:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 804af16:	68fb      	ldr	r3, [r7, #12]
 804af18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804af1c:	d80c      	bhi.n	804af38 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 804af1e:	69bb      	ldr	r3, [r7, #24]
 804af20:	015a      	lsls	r2, r3, #5
 804af22:	697b      	ldr	r3, [r7, #20]
 804af24:	4413      	add	r3, r2
 804af26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804af2a:	681b      	ldr	r3, [r3, #0]
 804af2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804af30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804af34:	d0ec      	beq.n	804af10 <USB_StopHost+0xc8>
 804af36:	e000      	b.n	804af3a <USB_StopHost+0xf2>
        break;
 804af38:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 804af3a:	69bb      	ldr	r3, [r7, #24]
 804af3c:	3301      	adds	r3, #1
 804af3e:	61bb      	str	r3, [r7, #24]
 804af40:	69bb      	ldr	r3, [r7, #24]
 804af42:	2b0f      	cmp	r3, #15
 804af44:	d9c7      	bls.n	804aed6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 804af46:	697b      	ldr	r3, [r7, #20]
 804af48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804af4c:	461a      	mov	r2, r3
 804af4e:	f04f 33ff 	mov.w	r3, #4294967295
 804af52:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 804af54:	687b      	ldr	r3, [r7, #4]
 804af56:	f04f 32ff 	mov.w	r2, #4294967295
 804af5a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 804af5c:	6878      	ldr	r0, [r7, #4]
 804af5e:	f7ff f880 	bl	804a062 <USB_EnableGlobalInt>

  return ret;
 804af62:	7ffb      	ldrb	r3, [r7, #31]
}
 804af64:	4618      	mov	r0, r3
 804af66:	3720      	adds	r7, #32
 804af68:	46bd      	mov	sp, r7
 804af6a:	bd80      	pop	{r7, pc}

0804af6c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 804af6c:	b590      	push	{r4, r7, lr}
 804af6e:	b089      	sub	sp, #36	; 0x24
 804af70:	af04      	add	r7, sp, #16
 804af72:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 804af74:	2301      	movs	r3, #1
 804af76:	2202      	movs	r2, #2
 804af78:	2102      	movs	r1, #2
 804af7a:	6878      	ldr	r0, [r7, #4]
 804af7c:	f000 fc66 	bl	804b84c <USBH_FindInterface>
 804af80:	4603      	mov	r3, r0
 804af82:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 804af84:	7bfb      	ldrb	r3, [r7, #15]
 804af86:	2bff      	cmp	r3, #255	; 0xff
 804af88:	d002      	beq.n	804af90 <USBH_CDC_InterfaceInit+0x24>
 804af8a:	7bfb      	ldrb	r3, [r7, #15]
 804af8c:	2b01      	cmp	r3, #1
 804af8e:	d901      	bls.n	804af94 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 804af90:	2302      	movs	r3, #2
 804af92:	e13d      	b.n	804b210 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 804af94:	7bfb      	ldrb	r3, [r7, #15]
 804af96:	4619      	mov	r1, r3
 804af98:	6878      	ldr	r0, [r7, #4]
 804af9a:	f000 fc3b 	bl	804b814 <USBH_SelectInterface>
 804af9e:	4603      	mov	r3, r0
 804afa0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 804afa2:	7bbb      	ldrb	r3, [r7, #14]
 804afa4:	2b00      	cmp	r3, #0
 804afa6:	d001      	beq.n	804afac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 804afa8:	2302      	movs	r3, #2
 804afaa:	e131      	b.n	804b210 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 804afac:	687b      	ldr	r3, [r7, #4]
 804afae:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 804afb2:	2050      	movs	r0, #80	; 0x50
 804afb4:	f002 fb00 	bl	804d5b8 <malloc>
 804afb8:	4603      	mov	r3, r0
 804afba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804afbc:	687b      	ldr	r3, [r7, #4]
 804afbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804afc2:	69db      	ldr	r3, [r3, #28]
 804afc4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 804afc6:	68bb      	ldr	r3, [r7, #8]
 804afc8:	2b00      	cmp	r3, #0
 804afca:	d101      	bne.n	804afd0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 804afcc:	2302      	movs	r3, #2
 804afce:	e11f      	b.n	804b210 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 804afd0:	2250      	movs	r2, #80	; 0x50
 804afd2:	2100      	movs	r1, #0
 804afd4:	68b8      	ldr	r0, [r7, #8]
 804afd6:	f002 faff 	bl	804d5d8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 804afda:	7bfb      	ldrb	r3, [r7, #15]
 804afdc:	687a      	ldr	r2, [r7, #4]
 804afde:	211a      	movs	r1, #26
 804afe0:	fb01 f303 	mul.w	r3, r1, r3
 804afe4:	4413      	add	r3, r2
 804afe6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804afea:	781b      	ldrb	r3, [r3, #0]
 804afec:	b25b      	sxtb	r3, r3
 804afee:	2b00      	cmp	r3, #0
 804aff0:	da15      	bge.n	804b01e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804aff2:	7bfb      	ldrb	r3, [r7, #15]
 804aff4:	687a      	ldr	r2, [r7, #4]
 804aff6:	211a      	movs	r1, #26
 804aff8:	fb01 f303 	mul.w	r3, r1, r3
 804affc:	4413      	add	r3, r2
 804affe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804b002:	781a      	ldrb	r2, [r3, #0]
 804b004:	68bb      	ldr	r3, [r7, #8]
 804b006:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804b008:	7bfb      	ldrb	r3, [r7, #15]
 804b00a:	687a      	ldr	r2, [r7, #4]
 804b00c:	211a      	movs	r1, #26
 804b00e:	fb01 f303 	mul.w	r3, r1, r3
 804b012:	4413      	add	r3, r2
 804b014:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804b018:	881a      	ldrh	r2, [r3, #0]
 804b01a:	68bb      	ldr	r3, [r7, #8]
 804b01c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 804b01e:	68bb      	ldr	r3, [r7, #8]
 804b020:	785b      	ldrb	r3, [r3, #1]
 804b022:	4619      	mov	r1, r3
 804b024:	6878      	ldr	r0, [r7, #4]
 804b026:	f001 ff2c 	bl	804ce82 <USBH_AllocPipe>
 804b02a:	4603      	mov	r3, r0
 804b02c:	461a      	mov	r2, r3
 804b02e:	68bb      	ldr	r3, [r7, #8]
 804b030:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 804b032:	68bb      	ldr	r3, [r7, #8]
 804b034:	7819      	ldrb	r1, [r3, #0]
 804b036:	68bb      	ldr	r3, [r7, #8]
 804b038:	7858      	ldrb	r0, [r3, #1]
 804b03a:	687b      	ldr	r3, [r7, #4]
 804b03c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804b040:	687b      	ldr	r3, [r7, #4]
 804b042:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804b046:	68ba      	ldr	r2, [r7, #8]
 804b048:	8952      	ldrh	r2, [r2, #10]
 804b04a:	9202      	str	r2, [sp, #8]
 804b04c:	2203      	movs	r2, #3
 804b04e:	9201      	str	r2, [sp, #4]
 804b050:	9300      	str	r3, [sp, #0]
 804b052:	4623      	mov	r3, r4
 804b054:	4602      	mov	r2, r0
 804b056:	6878      	ldr	r0, [r7, #4]
 804b058:	f001 fee4 	bl	804ce24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 804b05c:	68bb      	ldr	r3, [r7, #8]
 804b05e:	781b      	ldrb	r3, [r3, #0]
 804b060:	2200      	movs	r2, #0
 804b062:	4619      	mov	r1, r3
 804b064:	6878      	ldr	r0, [r7, #4]
 804b066:	f002 f9f9 	bl	804d45c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 804b06a:	2300      	movs	r3, #0
 804b06c:	2200      	movs	r2, #0
 804b06e:	210a      	movs	r1, #10
 804b070:	6878      	ldr	r0, [r7, #4]
 804b072:	f000 fbeb 	bl	804b84c <USBH_FindInterface>
 804b076:	4603      	mov	r3, r0
 804b078:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 804b07a:	7bfb      	ldrb	r3, [r7, #15]
 804b07c:	2bff      	cmp	r3, #255	; 0xff
 804b07e:	d002      	beq.n	804b086 <USBH_CDC_InterfaceInit+0x11a>
 804b080:	7bfb      	ldrb	r3, [r7, #15]
 804b082:	2b01      	cmp	r3, #1
 804b084:	d901      	bls.n	804b08a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 804b086:	2302      	movs	r3, #2
 804b088:	e0c2      	b.n	804b210 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 804b08a:	7bfb      	ldrb	r3, [r7, #15]
 804b08c:	687a      	ldr	r2, [r7, #4]
 804b08e:	211a      	movs	r1, #26
 804b090:	fb01 f303 	mul.w	r3, r1, r3
 804b094:	4413      	add	r3, r2
 804b096:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804b09a:	781b      	ldrb	r3, [r3, #0]
 804b09c:	b25b      	sxtb	r3, r3
 804b09e:	2b00      	cmp	r3, #0
 804b0a0:	da16      	bge.n	804b0d0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804b0a2:	7bfb      	ldrb	r3, [r7, #15]
 804b0a4:	687a      	ldr	r2, [r7, #4]
 804b0a6:	211a      	movs	r1, #26
 804b0a8:	fb01 f303 	mul.w	r3, r1, r3
 804b0ac:	4413      	add	r3, r2
 804b0ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804b0b2:	781a      	ldrb	r2, [r3, #0]
 804b0b4:	68bb      	ldr	r3, [r7, #8]
 804b0b6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804b0b8:	7bfb      	ldrb	r3, [r7, #15]
 804b0ba:	687a      	ldr	r2, [r7, #4]
 804b0bc:	211a      	movs	r1, #26
 804b0be:	fb01 f303 	mul.w	r3, r1, r3
 804b0c2:	4413      	add	r3, r2
 804b0c4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804b0c8:	881a      	ldrh	r2, [r3, #0]
 804b0ca:	68bb      	ldr	r3, [r7, #8]
 804b0cc:	835a      	strh	r2, [r3, #26]
 804b0ce:	e015      	b.n	804b0fc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804b0d0:	7bfb      	ldrb	r3, [r7, #15]
 804b0d2:	687a      	ldr	r2, [r7, #4]
 804b0d4:	211a      	movs	r1, #26
 804b0d6:	fb01 f303 	mul.w	r3, r1, r3
 804b0da:	4413      	add	r3, r2
 804b0dc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804b0e0:	781a      	ldrb	r2, [r3, #0]
 804b0e2:	68bb      	ldr	r3, [r7, #8]
 804b0e4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804b0e6:	7bfb      	ldrb	r3, [r7, #15]
 804b0e8:	687a      	ldr	r2, [r7, #4]
 804b0ea:	211a      	movs	r1, #26
 804b0ec:	fb01 f303 	mul.w	r3, r1, r3
 804b0f0:	4413      	add	r3, r2
 804b0f2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804b0f6:	881a      	ldrh	r2, [r3, #0]
 804b0f8:	68bb      	ldr	r3, [r7, #8]
 804b0fa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 804b0fc:	7bfb      	ldrb	r3, [r7, #15]
 804b0fe:	687a      	ldr	r2, [r7, #4]
 804b100:	211a      	movs	r1, #26
 804b102:	fb01 f303 	mul.w	r3, r1, r3
 804b106:	4413      	add	r3, r2
 804b108:	f203 3356 	addw	r3, r3, #854	; 0x356
 804b10c:	781b      	ldrb	r3, [r3, #0]
 804b10e:	b25b      	sxtb	r3, r3
 804b110:	2b00      	cmp	r3, #0
 804b112:	da16      	bge.n	804b142 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 804b114:	7bfb      	ldrb	r3, [r7, #15]
 804b116:	687a      	ldr	r2, [r7, #4]
 804b118:	211a      	movs	r1, #26
 804b11a:	fb01 f303 	mul.w	r3, r1, r3
 804b11e:	4413      	add	r3, r2
 804b120:	f203 3356 	addw	r3, r3, #854	; 0x356
 804b124:	781a      	ldrb	r2, [r3, #0]
 804b126:	68bb      	ldr	r3, [r7, #8]
 804b128:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 804b12a:	7bfb      	ldrb	r3, [r7, #15]
 804b12c:	687a      	ldr	r2, [r7, #4]
 804b12e:	211a      	movs	r1, #26
 804b130:	fb01 f303 	mul.w	r3, r1, r3
 804b134:	4413      	add	r3, r2
 804b136:	f503 7356 	add.w	r3, r3, #856	; 0x358
 804b13a:	881a      	ldrh	r2, [r3, #0]
 804b13c:	68bb      	ldr	r3, [r7, #8]
 804b13e:	835a      	strh	r2, [r3, #26]
 804b140:	e015      	b.n	804b16e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 804b142:	7bfb      	ldrb	r3, [r7, #15]
 804b144:	687a      	ldr	r2, [r7, #4]
 804b146:	211a      	movs	r1, #26
 804b148:	fb01 f303 	mul.w	r3, r1, r3
 804b14c:	4413      	add	r3, r2
 804b14e:	f203 3356 	addw	r3, r3, #854	; 0x356
 804b152:	781a      	ldrb	r2, [r3, #0]
 804b154:	68bb      	ldr	r3, [r7, #8]
 804b156:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 804b158:	7bfb      	ldrb	r3, [r7, #15]
 804b15a:	687a      	ldr	r2, [r7, #4]
 804b15c:	211a      	movs	r1, #26
 804b15e:	fb01 f303 	mul.w	r3, r1, r3
 804b162:	4413      	add	r3, r2
 804b164:	f503 7356 	add.w	r3, r3, #856	; 0x358
 804b168:	881a      	ldrh	r2, [r3, #0]
 804b16a:	68bb      	ldr	r3, [r7, #8]
 804b16c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 804b16e:	68bb      	ldr	r3, [r7, #8]
 804b170:	7b9b      	ldrb	r3, [r3, #14]
 804b172:	4619      	mov	r1, r3
 804b174:	6878      	ldr	r0, [r7, #4]
 804b176:	f001 fe84 	bl	804ce82 <USBH_AllocPipe>
 804b17a:	4603      	mov	r3, r0
 804b17c:	461a      	mov	r2, r3
 804b17e:	68bb      	ldr	r3, [r7, #8]
 804b180:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 804b182:	68bb      	ldr	r3, [r7, #8]
 804b184:	7bdb      	ldrb	r3, [r3, #15]
 804b186:	4619      	mov	r1, r3
 804b188:	6878      	ldr	r0, [r7, #4]
 804b18a:	f001 fe7a 	bl	804ce82 <USBH_AllocPipe>
 804b18e:	4603      	mov	r3, r0
 804b190:	461a      	mov	r2, r3
 804b192:	68bb      	ldr	r3, [r7, #8]
 804b194:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 804b196:	68bb      	ldr	r3, [r7, #8]
 804b198:	7b59      	ldrb	r1, [r3, #13]
 804b19a:	68bb      	ldr	r3, [r7, #8]
 804b19c:	7b98      	ldrb	r0, [r3, #14]
 804b19e:	687b      	ldr	r3, [r7, #4]
 804b1a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804b1a4:	687b      	ldr	r3, [r7, #4]
 804b1a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804b1aa:	68ba      	ldr	r2, [r7, #8]
 804b1ac:	8b12      	ldrh	r2, [r2, #24]
 804b1ae:	9202      	str	r2, [sp, #8]
 804b1b0:	2202      	movs	r2, #2
 804b1b2:	9201      	str	r2, [sp, #4]
 804b1b4:	9300      	str	r3, [sp, #0]
 804b1b6:	4623      	mov	r3, r4
 804b1b8:	4602      	mov	r2, r0
 804b1ba:	6878      	ldr	r0, [r7, #4]
 804b1bc:	f001 fe32 	bl	804ce24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 804b1c0:	68bb      	ldr	r3, [r7, #8]
 804b1c2:	7b19      	ldrb	r1, [r3, #12]
 804b1c4:	68bb      	ldr	r3, [r7, #8]
 804b1c6:	7bd8      	ldrb	r0, [r3, #15]
 804b1c8:	687b      	ldr	r3, [r7, #4]
 804b1ca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804b1ce:	687b      	ldr	r3, [r7, #4]
 804b1d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804b1d4:	68ba      	ldr	r2, [r7, #8]
 804b1d6:	8b52      	ldrh	r2, [r2, #26]
 804b1d8:	9202      	str	r2, [sp, #8]
 804b1da:	2202      	movs	r2, #2
 804b1dc:	9201      	str	r2, [sp, #4]
 804b1de:	9300      	str	r3, [sp, #0]
 804b1e0:	4623      	mov	r3, r4
 804b1e2:	4602      	mov	r2, r0
 804b1e4:	6878      	ldr	r0, [r7, #4]
 804b1e6:	f001 fe1d 	bl	804ce24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 804b1ea:	68bb      	ldr	r3, [r7, #8]
 804b1ec:	2200      	movs	r2, #0
 804b1ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 804b1f2:	68bb      	ldr	r3, [r7, #8]
 804b1f4:	7b5b      	ldrb	r3, [r3, #13]
 804b1f6:	2200      	movs	r2, #0
 804b1f8:	4619      	mov	r1, r3
 804b1fa:	6878      	ldr	r0, [r7, #4]
 804b1fc:	f002 f92e 	bl	804d45c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 804b200:	68bb      	ldr	r3, [r7, #8]
 804b202:	7b1b      	ldrb	r3, [r3, #12]
 804b204:	2200      	movs	r2, #0
 804b206:	4619      	mov	r1, r3
 804b208:	6878      	ldr	r0, [r7, #4]
 804b20a:	f002 f927 	bl	804d45c <USBH_LL_SetToggle>

  return USBH_OK;
 804b20e:	2300      	movs	r3, #0
}
 804b210:	4618      	mov	r0, r3
 804b212:	3714      	adds	r7, #20
 804b214:	46bd      	mov	sp, r7
 804b216:	bd90      	pop	{r4, r7, pc}

0804b218 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 804b218:	b580      	push	{r7, lr}
 804b21a:	b084      	sub	sp, #16
 804b21c:	af00      	add	r7, sp, #0
 804b21e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804b220:	687b      	ldr	r3, [r7, #4]
 804b222:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b226:	69db      	ldr	r3, [r3, #28]
 804b228:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 804b22a:	68fb      	ldr	r3, [r7, #12]
 804b22c:	781b      	ldrb	r3, [r3, #0]
 804b22e:	2b00      	cmp	r3, #0
 804b230:	d00e      	beq.n	804b250 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 804b232:	68fb      	ldr	r3, [r7, #12]
 804b234:	781b      	ldrb	r3, [r3, #0]
 804b236:	4619      	mov	r1, r3
 804b238:	6878      	ldr	r0, [r7, #4]
 804b23a:	f001 fe12 	bl	804ce62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 804b23e:	68fb      	ldr	r3, [r7, #12]
 804b240:	781b      	ldrb	r3, [r3, #0]
 804b242:	4619      	mov	r1, r3
 804b244:	6878      	ldr	r0, [r7, #4]
 804b246:	f001 fe3d 	bl	804cec4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 804b24a:	68fb      	ldr	r3, [r7, #12]
 804b24c:	2200      	movs	r2, #0
 804b24e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 804b250:	68fb      	ldr	r3, [r7, #12]
 804b252:	7b1b      	ldrb	r3, [r3, #12]
 804b254:	2b00      	cmp	r3, #0
 804b256:	d00e      	beq.n	804b276 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 804b258:	68fb      	ldr	r3, [r7, #12]
 804b25a:	7b1b      	ldrb	r3, [r3, #12]
 804b25c:	4619      	mov	r1, r3
 804b25e:	6878      	ldr	r0, [r7, #4]
 804b260:	f001 fdff 	bl	804ce62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 804b264:	68fb      	ldr	r3, [r7, #12]
 804b266:	7b1b      	ldrb	r3, [r3, #12]
 804b268:	4619      	mov	r1, r3
 804b26a:	6878      	ldr	r0, [r7, #4]
 804b26c:	f001 fe2a 	bl	804cec4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 804b270:	68fb      	ldr	r3, [r7, #12]
 804b272:	2200      	movs	r2, #0
 804b274:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 804b276:	68fb      	ldr	r3, [r7, #12]
 804b278:	7b5b      	ldrb	r3, [r3, #13]
 804b27a:	2b00      	cmp	r3, #0
 804b27c:	d00e      	beq.n	804b29c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 804b27e:	68fb      	ldr	r3, [r7, #12]
 804b280:	7b5b      	ldrb	r3, [r3, #13]
 804b282:	4619      	mov	r1, r3
 804b284:	6878      	ldr	r0, [r7, #4]
 804b286:	f001 fdec 	bl	804ce62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 804b28a:	68fb      	ldr	r3, [r7, #12]
 804b28c:	7b5b      	ldrb	r3, [r3, #13]
 804b28e:	4619      	mov	r1, r3
 804b290:	6878      	ldr	r0, [r7, #4]
 804b292:	f001 fe17 	bl	804cec4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 804b296:	68fb      	ldr	r3, [r7, #12]
 804b298:	2200      	movs	r2, #0
 804b29a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 804b29c:	687b      	ldr	r3, [r7, #4]
 804b29e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b2a2:	69db      	ldr	r3, [r3, #28]
 804b2a4:	2b00      	cmp	r3, #0
 804b2a6:	d00b      	beq.n	804b2c0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 804b2a8:	687b      	ldr	r3, [r7, #4]
 804b2aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b2ae:	69db      	ldr	r3, [r3, #28]
 804b2b0:	4618      	mov	r0, r3
 804b2b2:	f002 f989 	bl	804d5c8 <free>
    phost->pActiveClass->pData = 0U;
 804b2b6:	687b      	ldr	r3, [r7, #4]
 804b2b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b2bc:	2200      	movs	r2, #0
 804b2be:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 804b2c0:	2300      	movs	r3, #0
}
 804b2c2:	4618      	mov	r0, r3
 804b2c4:	3710      	adds	r7, #16
 804b2c6:	46bd      	mov	sp, r7
 804b2c8:	bd80      	pop	{r7, pc}

0804b2ca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 804b2ca:	b580      	push	{r7, lr}
 804b2cc:	b084      	sub	sp, #16
 804b2ce:	af00      	add	r7, sp, #0
 804b2d0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804b2d2:	687b      	ldr	r3, [r7, #4]
 804b2d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b2d8:	69db      	ldr	r3, [r3, #28]
 804b2da:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 804b2dc:	68fb      	ldr	r3, [r7, #12]
 804b2de:	3340      	adds	r3, #64	; 0x40
 804b2e0:	4619      	mov	r1, r3
 804b2e2:	6878      	ldr	r0, [r7, #4]
 804b2e4:	f000 f8b1 	bl	804b44a <GetLineCoding>
 804b2e8:	4603      	mov	r3, r0
 804b2ea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 804b2ec:	7afb      	ldrb	r3, [r7, #11]
 804b2ee:	2b00      	cmp	r3, #0
 804b2f0:	d105      	bne.n	804b2fe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 804b2f2:	687b      	ldr	r3, [r7, #4]
 804b2f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b2f8:	2102      	movs	r1, #2
 804b2fa:	6878      	ldr	r0, [r7, #4]
 804b2fc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 804b2fe:	7afb      	ldrb	r3, [r7, #11]
}
 804b300:	4618      	mov	r0, r3
 804b302:	3710      	adds	r7, #16
 804b304:	46bd      	mov	sp, r7
 804b306:	bd80      	pop	{r7, pc}

0804b308 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 804b308:	b580      	push	{r7, lr}
 804b30a:	b084      	sub	sp, #16
 804b30c:	af00      	add	r7, sp, #0
 804b30e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 804b310:	2301      	movs	r3, #1
 804b312:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 804b314:	2300      	movs	r3, #0
 804b316:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804b318:	687b      	ldr	r3, [r7, #4]
 804b31a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b31e:	69db      	ldr	r3, [r3, #28]
 804b320:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 804b322:	68bb      	ldr	r3, [r7, #8]
 804b324:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 804b328:	2b04      	cmp	r3, #4
 804b32a:	d877      	bhi.n	804b41c <USBH_CDC_Process+0x114>
 804b32c:	a201      	add	r2, pc, #4	; (adr r2, 804b334 <USBH_CDC_Process+0x2c>)
 804b32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804b332:	bf00      	nop
 804b334:	0804b349 	.word	0x0804b349
 804b338:	0804b34f 	.word	0x0804b34f
 804b33c:	0804b37f 	.word	0x0804b37f
 804b340:	0804b3f3 	.word	0x0804b3f3
 804b344:	0804b401 	.word	0x0804b401
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 804b348:	2300      	movs	r3, #0
 804b34a:	73fb      	strb	r3, [r7, #15]
      break;
 804b34c:	e06d      	b.n	804b42a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 804b34e:	68bb      	ldr	r3, [r7, #8]
 804b350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804b352:	4619      	mov	r1, r3
 804b354:	6878      	ldr	r0, [r7, #4]
 804b356:	f000 f897 	bl	804b488 <SetLineCoding>
 804b35a:	4603      	mov	r3, r0
 804b35c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804b35e:	7bbb      	ldrb	r3, [r7, #14]
 804b360:	2b00      	cmp	r3, #0
 804b362:	d104      	bne.n	804b36e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 804b364:	68bb      	ldr	r3, [r7, #8]
 804b366:	2202      	movs	r2, #2
 804b368:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 804b36c:	e058      	b.n	804b420 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 804b36e:	7bbb      	ldrb	r3, [r7, #14]
 804b370:	2b01      	cmp	r3, #1
 804b372:	d055      	beq.n	804b420 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 804b374:	68bb      	ldr	r3, [r7, #8]
 804b376:	2204      	movs	r2, #4
 804b378:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 804b37c:	e050      	b.n	804b420 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 804b37e:	68bb      	ldr	r3, [r7, #8]
 804b380:	3340      	adds	r3, #64	; 0x40
 804b382:	4619      	mov	r1, r3
 804b384:	6878      	ldr	r0, [r7, #4]
 804b386:	f000 f860 	bl	804b44a <GetLineCoding>
 804b38a:	4603      	mov	r3, r0
 804b38c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804b38e:	7bbb      	ldrb	r3, [r7, #14]
 804b390:	2b00      	cmp	r3, #0
 804b392:	d126      	bne.n	804b3e2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 804b394:	68bb      	ldr	r3, [r7, #8]
 804b396:	2200      	movs	r2, #0
 804b398:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 804b39c:	68bb      	ldr	r3, [r7, #8]
 804b39e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 804b3a2:	68bb      	ldr	r3, [r7, #8]
 804b3a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804b3a6:	791b      	ldrb	r3, [r3, #4]
 804b3a8:	429a      	cmp	r2, r3
 804b3aa:	d13b      	bne.n	804b424 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 804b3ac:	68bb      	ldr	r3, [r7, #8]
 804b3ae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 804b3b2:	68bb      	ldr	r3, [r7, #8]
 804b3b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804b3b6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 804b3b8:	429a      	cmp	r2, r3
 804b3ba:	d133      	bne.n	804b424 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 804b3bc:	68bb      	ldr	r3, [r7, #8]
 804b3be:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 804b3c2:	68bb      	ldr	r3, [r7, #8]
 804b3c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804b3c6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 804b3c8:	429a      	cmp	r2, r3
 804b3ca:	d12b      	bne.n	804b424 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 804b3cc:	68bb      	ldr	r3, [r7, #8]
 804b3ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804b3d0:	68bb      	ldr	r3, [r7, #8]
 804b3d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804b3d4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 804b3d6:	429a      	cmp	r2, r3
 804b3d8:	d124      	bne.n	804b424 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 804b3da:	6878      	ldr	r0, [r7, #4]
 804b3dc:	f000 f958 	bl	804b690 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 804b3e0:	e020      	b.n	804b424 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 804b3e2:	7bbb      	ldrb	r3, [r7, #14]
 804b3e4:	2b01      	cmp	r3, #1
 804b3e6:	d01d      	beq.n	804b424 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 804b3e8:	68bb      	ldr	r3, [r7, #8]
 804b3ea:	2204      	movs	r2, #4
 804b3ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 804b3f0:	e018      	b.n	804b424 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 804b3f2:	6878      	ldr	r0, [r7, #4]
 804b3f4:	f000 f867 	bl	804b4c6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 804b3f8:	6878      	ldr	r0, [r7, #4]
 804b3fa:	f000 f8da 	bl	804b5b2 <CDC_ProcessReception>
      break;
 804b3fe:	e014      	b.n	804b42a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 804b400:	2100      	movs	r1, #0
 804b402:	6878      	ldr	r0, [r7, #4]
 804b404:	f000 ffef 	bl	804c3e6 <USBH_ClrFeature>
 804b408:	4603      	mov	r3, r0
 804b40a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804b40c:	7bbb      	ldrb	r3, [r7, #14]
 804b40e:	2b00      	cmp	r3, #0
 804b410:	d10a      	bne.n	804b428 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 804b412:	68bb      	ldr	r3, [r7, #8]
 804b414:	2200      	movs	r2, #0
 804b416:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 804b41a:	e005      	b.n	804b428 <USBH_CDC_Process+0x120>

    default:
      break;
 804b41c:	bf00      	nop
 804b41e:	e004      	b.n	804b42a <USBH_CDC_Process+0x122>
      break;
 804b420:	bf00      	nop
 804b422:	e002      	b.n	804b42a <USBH_CDC_Process+0x122>
      break;
 804b424:	bf00      	nop
 804b426:	e000      	b.n	804b42a <USBH_CDC_Process+0x122>
      break;
 804b428:	bf00      	nop

  }

  return status;
 804b42a:	7bfb      	ldrb	r3, [r7, #15]
}
 804b42c:	4618      	mov	r0, r3
 804b42e:	3710      	adds	r7, #16
 804b430:	46bd      	mov	sp, r7
 804b432:	bd80      	pop	{r7, pc}

0804b434 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 804b434:	b480      	push	{r7}
 804b436:	b083      	sub	sp, #12
 804b438:	af00      	add	r7, sp, #0
 804b43a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 804b43c:	2300      	movs	r3, #0
}
 804b43e:	4618      	mov	r0, r3
 804b440:	370c      	adds	r7, #12
 804b442:	46bd      	mov	sp, r7
 804b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b448:	4770      	bx	lr

0804b44a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 804b44a:	b580      	push	{r7, lr}
 804b44c:	b082      	sub	sp, #8
 804b44e:	af00      	add	r7, sp, #0
 804b450:	6078      	str	r0, [r7, #4]
 804b452:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 804b454:	687b      	ldr	r3, [r7, #4]
 804b456:	22a1      	movs	r2, #161	; 0xa1
 804b458:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 804b45a:	687b      	ldr	r3, [r7, #4]
 804b45c:	2221      	movs	r2, #33	; 0x21
 804b45e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 804b460:	687b      	ldr	r3, [r7, #4]
 804b462:	2200      	movs	r2, #0
 804b464:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 804b466:	687b      	ldr	r3, [r7, #4]
 804b468:	2200      	movs	r2, #0
 804b46a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 804b46c:	687b      	ldr	r3, [r7, #4]
 804b46e:	2207      	movs	r2, #7
 804b470:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 804b472:	683b      	ldr	r3, [r7, #0]
 804b474:	2207      	movs	r2, #7
 804b476:	4619      	mov	r1, r3
 804b478:	6878      	ldr	r0, [r7, #4]
 804b47a:	f001 fa81 	bl	804c980 <USBH_CtlReq>
 804b47e:	4603      	mov	r3, r0
}
 804b480:	4618      	mov	r0, r3
 804b482:	3708      	adds	r7, #8
 804b484:	46bd      	mov	sp, r7
 804b486:	bd80      	pop	{r7, pc}

0804b488 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 804b488:	b580      	push	{r7, lr}
 804b48a:	b082      	sub	sp, #8
 804b48c:	af00      	add	r7, sp, #0
 804b48e:	6078      	str	r0, [r7, #4]
 804b490:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 804b492:	687b      	ldr	r3, [r7, #4]
 804b494:	2221      	movs	r2, #33	; 0x21
 804b496:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 804b498:	687b      	ldr	r3, [r7, #4]
 804b49a:	2220      	movs	r2, #32
 804b49c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 804b49e:	687b      	ldr	r3, [r7, #4]
 804b4a0:	2200      	movs	r2, #0
 804b4a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 804b4a4:	687b      	ldr	r3, [r7, #4]
 804b4a6:	2200      	movs	r2, #0
 804b4a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 804b4aa:	687b      	ldr	r3, [r7, #4]
 804b4ac:	2207      	movs	r2, #7
 804b4ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 804b4b0:	683b      	ldr	r3, [r7, #0]
 804b4b2:	2207      	movs	r2, #7
 804b4b4:	4619      	mov	r1, r3
 804b4b6:	6878      	ldr	r0, [r7, #4]
 804b4b8:	f001 fa62 	bl	804c980 <USBH_CtlReq>
 804b4bc:	4603      	mov	r3, r0
}
 804b4be:	4618      	mov	r0, r3
 804b4c0:	3708      	adds	r7, #8
 804b4c2:	46bd      	mov	sp, r7
 804b4c4:	bd80      	pop	{r7, pc}

0804b4c6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 804b4c6:	b580      	push	{r7, lr}
 804b4c8:	b086      	sub	sp, #24
 804b4ca:	af02      	add	r7, sp, #8
 804b4cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804b4ce:	687b      	ldr	r3, [r7, #4]
 804b4d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b4d4:	69db      	ldr	r3, [r3, #28]
 804b4d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804b4d8:	2300      	movs	r3, #0
 804b4da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 804b4dc:	68fb      	ldr	r3, [r7, #12]
 804b4de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 804b4e2:	2b01      	cmp	r3, #1
 804b4e4:	d002      	beq.n	804b4ec <CDC_ProcessTransmission+0x26>
 804b4e6:	2b02      	cmp	r3, #2
 804b4e8:	d023      	beq.n	804b532 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 804b4ea:	e05e      	b.n	804b5aa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 804b4ec:	68fb      	ldr	r3, [r7, #12]
 804b4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804b4f0:	68fa      	ldr	r2, [r7, #12]
 804b4f2:	8b12      	ldrh	r2, [r2, #24]
 804b4f4:	4293      	cmp	r3, r2
 804b4f6:	d90b      	bls.n	804b510 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 804b4f8:	68fb      	ldr	r3, [r7, #12]
 804b4fa:	69d9      	ldr	r1, [r3, #28]
 804b4fc:	68fb      	ldr	r3, [r7, #12]
 804b4fe:	8b1a      	ldrh	r2, [r3, #24]
 804b500:	68fb      	ldr	r3, [r7, #12]
 804b502:	7b5b      	ldrb	r3, [r3, #13]
 804b504:	2001      	movs	r0, #1
 804b506:	9000      	str	r0, [sp, #0]
 804b508:	6878      	ldr	r0, [r7, #4]
 804b50a:	f001 fc48 	bl	804cd9e <USBH_BulkSendData>
 804b50e:	e00b      	b.n	804b528 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 804b510:	68fb      	ldr	r3, [r7, #12]
 804b512:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 804b514:	68fb      	ldr	r3, [r7, #12]
 804b516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 804b518:	b29a      	uxth	r2, r3
 804b51a:	68fb      	ldr	r3, [r7, #12]
 804b51c:	7b5b      	ldrb	r3, [r3, #13]
 804b51e:	2001      	movs	r0, #1
 804b520:	9000      	str	r0, [sp, #0]
 804b522:	6878      	ldr	r0, [r7, #4]
 804b524:	f001 fc3b 	bl	804cd9e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 804b528:	68fb      	ldr	r3, [r7, #12]
 804b52a:	2202      	movs	r2, #2
 804b52c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804b530:	e03b      	b.n	804b5aa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 804b532:	68fb      	ldr	r3, [r7, #12]
 804b534:	7b5b      	ldrb	r3, [r3, #13]
 804b536:	4619      	mov	r1, r3
 804b538:	6878      	ldr	r0, [r7, #4]
 804b53a:	f001 ff65 	bl	804d408 <USBH_LL_GetURBState>
 804b53e:	4603      	mov	r3, r0
 804b540:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 804b542:	7afb      	ldrb	r3, [r7, #11]
 804b544:	2b01      	cmp	r3, #1
 804b546:	d128      	bne.n	804b59a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 804b548:	68fb      	ldr	r3, [r7, #12]
 804b54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804b54c:	68fa      	ldr	r2, [r7, #12]
 804b54e:	8b12      	ldrh	r2, [r2, #24]
 804b550:	4293      	cmp	r3, r2
 804b552:	d90e      	bls.n	804b572 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 804b554:	68fb      	ldr	r3, [r7, #12]
 804b556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804b558:	68fa      	ldr	r2, [r7, #12]
 804b55a:	8b12      	ldrh	r2, [r2, #24]
 804b55c:	1a9a      	subs	r2, r3, r2
 804b55e:	68fb      	ldr	r3, [r7, #12]
 804b560:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 804b562:	68fb      	ldr	r3, [r7, #12]
 804b564:	69db      	ldr	r3, [r3, #28]
 804b566:	68fa      	ldr	r2, [r7, #12]
 804b568:	8b12      	ldrh	r2, [r2, #24]
 804b56a:	441a      	add	r2, r3
 804b56c:	68fb      	ldr	r3, [r7, #12]
 804b56e:	61da      	str	r2, [r3, #28]
 804b570:	e002      	b.n	804b578 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 804b572:	68fb      	ldr	r3, [r7, #12]
 804b574:	2200      	movs	r2, #0
 804b576:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 804b578:	68fb      	ldr	r3, [r7, #12]
 804b57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804b57c:	2b00      	cmp	r3, #0
 804b57e:	d004      	beq.n	804b58a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 804b580:	68fb      	ldr	r3, [r7, #12]
 804b582:	2201      	movs	r2, #1
 804b584:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804b588:	e00e      	b.n	804b5a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 804b58a:	68fb      	ldr	r3, [r7, #12]
 804b58c:	2200      	movs	r2, #0
 804b58e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 804b592:	6878      	ldr	r0, [r7, #4]
 804b594:	f000 f868 	bl	804b668 <USBH_CDC_TransmitCallback>
      break;
 804b598:	e006      	b.n	804b5a8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 804b59a:	7afb      	ldrb	r3, [r7, #11]
 804b59c:	2b02      	cmp	r3, #2
 804b59e:	d103      	bne.n	804b5a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 804b5a0:	68fb      	ldr	r3, [r7, #12]
 804b5a2:	2201      	movs	r2, #1
 804b5a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804b5a8:	bf00      	nop
  }
}
 804b5aa:	bf00      	nop
 804b5ac:	3710      	adds	r7, #16
 804b5ae:	46bd      	mov	sp, r7
 804b5b0:	bd80      	pop	{r7, pc}

0804b5b2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 804b5b2:	b580      	push	{r7, lr}
 804b5b4:	b086      	sub	sp, #24
 804b5b6:	af00      	add	r7, sp, #0
 804b5b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804b5ba:	687b      	ldr	r3, [r7, #4]
 804b5bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b5c0:	69db      	ldr	r3, [r3, #28]
 804b5c2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804b5c4:	2300      	movs	r3, #0
 804b5c6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 804b5c8:	697b      	ldr	r3, [r7, #20]
 804b5ca:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 804b5ce:	2b03      	cmp	r3, #3
 804b5d0:	d002      	beq.n	804b5d8 <CDC_ProcessReception+0x26>
 804b5d2:	2b04      	cmp	r3, #4
 804b5d4:	d00e      	beq.n	804b5f4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 804b5d6:	e043      	b.n	804b660 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 804b5d8:	697b      	ldr	r3, [r7, #20]
 804b5da:	6a19      	ldr	r1, [r3, #32]
 804b5dc:	697b      	ldr	r3, [r7, #20]
 804b5de:	8b5a      	ldrh	r2, [r3, #26]
 804b5e0:	697b      	ldr	r3, [r7, #20]
 804b5e2:	7b1b      	ldrb	r3, [r3, #12]
 804b5e4:	6878      	ldr	r0, [r7, #4]
 804b5e6:	f001 fbff 	bl	804cde8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 804b5ea:	697b      	ldr	r3, [r7, #20]
 804b5ec:	2204      	movs	r2, #4
 804b5ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 804b5f2:	e035      	b.n	804b660 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 804b5f4:	697b      	ldr	r3, [r7, #20]
 804b5f6:	7b1b      	ldrb	r3, [r3, #12]
 804b5f8:	4619      	mov	r1, r3
 804b5fa:	6878      	ldr	r0, [r7, #4]
 804b5fc:	f001 ff04 	bl	804d408 <USBH_LL_GetURBState>
 804b600:	4603      	mov	r3, r0
 804b602:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 804b604:	7cfb      	ldrb	r3, [r7, #19]
 804b606:	2b01      	cmp	r3, #1
 804b608:	d129      	bne.n	804b65e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 804b60a:	697b      	ldr	r3, [r7, #20]
 804b60c:	7b1b      	ldrb	r3, [r3, #12]
 804b60e:	4619      	mov	r1, r3
 804b610:	6878      	ldr	r0, [r7, #4]
 804b612:	f001 fe67 	bl	804d2e4 <USBH_LL_GetLastXferSize>
 804b616:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 804b618:	697b      	ldr	r3, [r7, #20]
 804b61a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804b61c:	68fa      	ldr	r2, [r7, #12]
 804b61e:	429a      	cmp	r2, r3
 804b620:	d016      	beq.n	804b650 <CDC_ProcessReception+0x9e>
 804b622:	697b      	ldr	r3, [r7, #20]
 804b624:	8b5b      	ldrh	r3, [r3, #26]
 804b626:	461a      	mov	r2, r3
 804b628:	68fb      	ldr	r3, [r7, #12]
 804b62a:	4293      	cmp	r3, r2
 804b62c:	d910      	bls.n	804b650 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 804b62e:	697b      	ldr	r3, [r7, #20]
 804b630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804b632:	68fb      	ldr	r3, [r7, #12]
 804b634:	1ad2      	subs	r2, r2, r3
 804b636:	697b      	ldr	r3, [r7, #20]
 804b638:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 804b63a:	697b      	ldr	r3, [r7, #20]
 804b63c:	6a1a      	ldr	r2, [r3, #32]
 804b63e:	68fb      	ldr	r3, [r7, #12]
 804b640:	441a      	add	r2, r3
 804b642:	697b      	ldr	r3, [r7, #20]
 804b644:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 804b646:	697b      	ldr	r3, [r7, #20]
 804b648:	2203      	movs	r2, #3
 804b64a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 804b64e:	e006      	b.n	804b65e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 804b650:	697b      	ldr	r3, [r7, #20]
 804b652:	2200      	movs	r2, #0
 804b654:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 804b658:	6878      	ldr	r0, [r7, #4]
 804b65a:	f000 f80f 	bl	804b67c <USBH_CDC_ReceiveCallback>
      break;
 804b65e:	bf00      	nop
  }
}
 804b660:	bf00      	nop
 804b662:	3718      	adds	r7, #24
 804b664:	46bd      	mov	sp, r7
 804b666:	bd80      	pop	{r7, pc}

0804b668 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 804b668:	b480      	push	{r7}
 804b66a:	b083      	sub	sp, #12
 804b66c:	af00      	add	r7, sp, #0
 804b66e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804b670:	bf00      	nop
 804b672:	370c      	adds	r7, #12
 804b674:	46bd      	mov	sp, r7
 804b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b67a:	4770      	bx	lr

0804b67c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 804b67c:	b480      	push	{r7}
 804b67e:	b083      	sub	sp, #12
 804b680:	af00      	add	r7, sp, #0
 804b682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804b684:	bf00      	nop
 804b686:	370c      	adds	r7, #12
 804b688:	46bd      	mov	sp, r7
 804b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b68e:	4770      	bx	lr

0804b690 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 804b690:	b480      	push	{r7}
 804b692:	b083      	sub	sp, #12
 804b694:	af00      	add	r7, sp, #0
 804b696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804b698:	bf00      	nop
 804b69a:	370c      	adds	r7, #12
 804b69c:	46bd      	mov	sp, r7
 804b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b6a2:	4770      	bx	lr

0804b6a4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 804b6a4:	b580      	push	{r7, lr}
 804b6a6:	b084      	sub	sp, #16
 804b6a8:	af00      	add	r7, sp, #0
 804b6aa:	60f8      	str	r0, [r7, #12]
 804b6ac:	60b9      	str	r1, [r7, #8]
 804b6ae:	4613      	mov	r3, r2
 804b6b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 804b6b2:	68fb      	ldr	r3, [r7, #12]
 804b6b4:	2b00      	cmp	r3, #0
 804b6b6:	d101      	bne.n	804b6bc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 804b6b8:	2302      	movs	r3, #2
 804b6ba:	e029      	b.n	804b710 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 804b6bc:	68fb      	ldr	r3, [r7, #12]
 804b6be:	79fa      	ldrb	r2, [r7, #7]
 804b6c0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 804b6c4:	68fb      	ldr	r3, [r7, #12]
 804b6c6:	2200      	movs	r2, #0
 804b6c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 804b6cc:	68fb      	ldr	r3, [r7, #12]
 804b6ce:	2200      	movs	r2, #0
 804b6d0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 804b6d4:	68f8      	ldr	r0, [r7, #12]
 804b6d6:	f000 f81f 	bl	804b718 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 804b6da:	68fb      	ldr	r3, [r7, #12]
 804b6dc:	2200      	movs	r2, #0
 804b6de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 804b6e2:	68fb      	ldr	r3, [r7, #12]
 804b6e4:	2200      	movs	r2, #0
 804b6e6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 804b6ea:	68fb      	ldr	r3, [r7, #12]
 804b6ec:	2200      	movs	r2, #0
 804b6ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 804b6f2:	68fb      	ldr	r3, [r7, #12]
 804b6f4:	2200      	movs	r2, #0
 804b6f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 804b6fa:	68bb      	ldr	r3, [r7, #8]
 804b6fc:	2b00      	cmp	r3, #0
 804b6fe:	d003      	beq.n	804b708 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 804b700:	68fb      	ldr	r3, [r7, #12]
 804b702:	68ba      	ldr	r2, [r7, #8]
 804b704:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 804b708:	68f8      	ldr	r0, [r7, #12]
 804b70a:	f001 fd2d 	bl	804d168 <USBH_LL_Init>

  return USBH_OK;
 804b70e:	2300      	movs	r3, #0
}
 804b710:	4618      	mov	r0, r3
 804b712:	3710      	adds	r7, #16
 804b714:	46bd      	mov	sp, r7
 804b716:	bd80      	pop	{r7, pc}

0804b718 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 804b718:	b480      	push	{r7}
 804b71a:	b085      	sub	sp, #20
 804b71c:	af00      	add	r7, sp, #0
 804b71e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 804b720:	2300      	movs	r3, #0
 804b722:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 804b724:	2300      	movs	r3, #0
 804b726:	60fb      	str	r3, [r7, #12]
 804b728:	e009      	b.n	804b73e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 804b72a:	687a      	ldr	r2, [r7, #4]
 804b72c:	68fb      	ldr	r3, [r7, #12]
 804b72e:	33e0      	adds	r3, #224	; 0xe0
 804b730:	009b      	lsls	r3, r3, #2
 804b732:	4413      	add	r3, r2
 804b734:	2200      	movs	r2, #0
 804b736:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 804b738:	68fb      	ldr	r3, [r7, #12]
 804b73a:	3301      	adds	r3, #1
 804b73c:	60fb      	str	r3, [r7, #12]
 804b73e:	68fb      	ldr	r3, [r7, #12]
 804b740:	2b0f      	cmp	r3, #15
 804b742:	d9f2      	bls.n	804b72a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 804b744:	2300      	movs	r3, #0
 804b746:	60fb      	str	r3, [r7, #12]
 804b748:	e009      	b.n	804b75e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 804b74a:	687a      	ldr	r2, [r7, #4]
 804b74c:	68fb      	ldr	r3, [r7, #12]
 804b74e:	4413      	add	r3, r2
 804b750:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804b754:	2200      	movs	r2, #0
 804b756:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 804b758:	68fb      	ldr	r3, [r7, #12]
 804b75a:	3301      	adds	r3, #1
 804b75c:	60fb      	str	r3, [r7, #12]
 804b75e:	68fb      	ldr	r3, [r7, #12]
 804b760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804b764:	d3f1      	bcc.n	804b74a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 804b766:	687b      	ldr	r3, [r7, #4]
 804b768:	2200      	movs	r2, #0
 804b76a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 804b76c:	687b      	ldr	r3, [r7, #4]
 804b76e:	2200      	movs	r2, #0
 804b770:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 804b772:	687b      	ldr	r3, [r7, #4]
 804b774:	2201      	movs	r2, #1
 804b776:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 804b778:	687b      	ldr	r3, [r7, #4]
 804b77a:	2200      	movs	r2, #0
 804b77c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 804b780:	687b      	ldr	r3, [r7, #4]
 804b782:	2201      	movs	r2, #1
 804b784:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 804b786:	687b      	ldr	r3, [r7, #4]
 804b788:	2240      	movs	r2, #64	; 0x40
 804b78a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 804b78c:	687b      	ldr	r3, [r7, #4]
 804b78e:	2200      	movs	r2, #0
 804b790:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 804b792:	687b      	ldr	r3, [r7, #4]
 804b794:	2200      	movs	r2, #0
 804b796:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 804b79a:	687b      	ldr	r3, [r7, #4]
 804b79c:	2201      	movs	r2, #1
 804b79e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 804b7a2:	687b      	ldr	r3, [r7, #4]
 804b7a4:	2200      	movs	r2, #0
 804b7a6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 804b7aa:	687b      	ldr	r3, [r7, #4]
 804b7ac:	2200      	movs	r2, #0
 804b7ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 804b7b2:	2300      	movs	r3, #0
}
 804b7b4:	4618      	mov	r0, r3
 804b7b6:	3714      	adds	r7, #20
 804b7b8:	46bd      	mov	sp, r7
 804b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b7be:	4770      	bx	lr

0804b7c0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 804b7c0:	b480      	push	{r7}
 804b7c2:	b085      	sub	sp, #20
 804b7c4:	af00      	add	r7, sp, #0
 804b7c6:	6078      	str	r0, [r7, #4]
 804b7c8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 804b7ca:	2300      	movs	r3, #0
 804b7cc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 804b7ce:	683b      	ldr	r3, [r7, #0]
 804b7d0:	2b00      	cmp	r3, #0
 804b7d2:	d016      	beq.n	804b802 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 804b7d4:	687b      	ldr	r3, [r7, #4]
 804b7d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804b7da:	2b00      	cmp	r3, #0
 804b7dc:	d10e      	bne.n	804b7fc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 804b7de:	687b      	ldr	r3, [r7, #4]
 804b7e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804b7e4:	1c59      	adds	r1, r3, #1
 804b7e6:	687a      	ldr	r2, [r7, #4]
 804b7e8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 804b7ec:	687a      	ldr	r2, [r7, #4]
 804b7ee:	33de      	adds	r3, #222	; 0xde
 804b7f0:	6839      	ldr	r1, [r7, #0]
 804b7f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 804b7f6:	2300      	movs	r3, #0
 804b7f8:	73fb      	strb	r3, [r7, #15]
 804b7fa:	e004      	b.n	804b806 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 804b7fc:	2302      	movs	r3, #2
 804b7fe:	73fb      	strb	r3, [r7, #15]
 804b800:	e001      	b.n	804b806 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 804b802:	2302      	movs	r3, #2
 804b804:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804b806:	7bfb      	ldrb	r3, [r7, #15]
}
 804b808:	4618      	mov	r0, r3
 804b80a:	3714      	adds	r7, #20
 804b80c:	46bd      	mov	sp, r7
 804b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b812:	4770      	bx	lr

0804b814 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 804b814:	b480      	push	{r7}
 804b816:	b085      	sub	sp, #20
 804b818:	af00      	add	r7, sp, #0
 804b81a:	6078      	str	r0, [r7, #4]
 804b81c:	460b      	mov	r3, r1
 804b81e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 804b820:	2300      	movs	r3, #0
 804b822:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 804b824:	687b      	ldr	r3, [r7, #4]
 804b826:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 804b82a:	78fa      	ldrb	r2, [r7, #3]
 804b82c:	429a      	cmp	r2, r3
 804b82e:	d204      	bcs.n	804b83a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 804b830:	687b      	ldr	r3, [r7, #4]
 804b832:	78fa      	ldrb	r2, [r7, #3]
 804b834:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 804b838:	e001      	b.n	804b83e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 804b83a:	2302      	movs	r3, #2
 804b83c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804b83e:	7bfb      	ldrb	r3, [r7, #15]
}
 804b840:	4618      	mov	r0, r3
 804b842:	3714      	adds	r7, #20
 804b844:	46bd      	mov	sp, r7
 804b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b84a:	4770      	bx	lr

0804b84c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 804b84c:	b480      	push	{r7}
 804b84e:	b087      	sub	sp, #28
 804b850:	af00      	add	r7, sp, #0
 804b852:	6078      	str	r0, [r7, #4]
 804b854:	4608      	mov	r0, r1
 804b856:	4611      	mov	r1, r2
 804b858:	461a      	mov	r2, r3
 804b85a:	4603      	mov	r3, r0
 804b85c:	70fb      	strb	r3, [r7, #3]
 804b85e:	460b      	mov	r3, r1
 804b860:	70bb      	strb	r3, [r7, #2]
 804b862:	4613      	mov	r3, r2
 804b864:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 804b866:	2300      	movs	r3, #0
 804b868:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 804b86a:	2300      	movs	r3, #0
 804b86c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 804b86e:	687b      	ldr	r3, [r7, #4]
 804b870:	f503 734e 	add.w	r3, r3, #824	; 0x338
 804b874:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 804b876:	e025      	b.n	804b8c4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 804b878:	7dfb      	ldrb	r3, [r7, #23]
 804b87a:	221a      	movs	r2, #26
 804b87c:	fb02 f303 	mul.w	r3, r2, r3
 804b880:	3308      	adds	r3, #8
 804b882:	68fa      	ldr	r2, [r7, #12]
 804b884:	4413      	add	r3, r2
 804b886:	3302      	adds	r3, #2
 804b888:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 804b88a:	693b      	ldr	r3, [r7, #16]
 804b88c:	795b      	ldrb	r3, [r3, #5]
 804b88e:	78fa      	ldrb	r2, [r7, #3]
 804b890:	429a      	cmp	r2, r3
 804b892:	d002      	beq.n	804b89a <USBH_FindInterface+0x4e>
 804b894:	78fb      	ldrb	r3, [r7, #3]
 804b896:	2bff      	cmp	r3, #255	; 0xff
 804b898:	d111      	bne.n	804b8be <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804b89a:	693b      	ldr	r3, [r7, #16]
 804b89c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 804b89e:	78ba      	ldrb	r2, [r7, #2]
 804b8a0:	429a      	cmp	r2, r3
 804b8a2:	d002      	beq.n	804b8aa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804b8a4:	78bb      	ldrb	r3, [r7, #2]
 804b8a6:	2bff      	cmp	r3, #255	; 0xff
 804b8a8:	d109      	bne.n	804b8be <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 804b8aa:	693b      	ldr	r3, [r7, #16]
 804b8ac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804b8ae:	787a      	ldrb	r2, [r7, #1]
 804b8b0:	429a      	cmp	r2, r3
 804b8b2:	d002      	beq.n	804b8ba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 804b8b4:	787b      	ldrb	r3, [r7, #1]
 804b8b6:	2bff      	cmp	r3, #255	; 0xff
 804b8b8:	d101      	bne.n	804b8be <USBH_FindInterface+0x72>
    {
      return  if_ix;
 804b8ba:	7dfb      	ldrb	r3, [r7, #23]
 804b8bc:	e006      	b.n	804b8cc <USBH_FindInterface+0x80>
    }
    if_ix++;
 804b8be:	7dfb      	ldrb	r3, [r7, #23]
 804b8c0:	3301      	adds	r3, #1
 804b8c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 804b8c4:	7dfb      	ldrb	r3, [r7, #23]
 804b8c6:	2b01      	cmp	r3, #1
 804b8c8:	d9d6      	bls.n	804b878 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 804b8ca:	23ff      	movs	r3, #255	; 0xff
}
 804b8cc:	4618      	mov	r0, r3
 804b8ce:	371c      	adds	r7, #28
 804b8d0:	46bd      	mov	sp, r7
 804b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b8d6:	4770      	bx	lr

0804b8d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 804b8d8:	b580      	push	{r7, lr}
 804b8da:	b082      	sub	sp, #8
 804b8dc:	af00      	add	r7, sp, #0
 804b8de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 804b8e0:	6878      	ldr	r0, [r7, #4]
 804b8e2:	f001 fc87 	bl	804d1f4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 804b8e6:	2101      	movs	r1, #1
 804b8e8:	6878      	ldr	r0, [r7, #4]
 804b8ea:	f001 fda0 	bl	804d42e <USBH_LL_DriverVBUS>

  return USBH_OK;
 804b8ee:	2300      	movs	r3, #0
}
 804b8f0:	4618      	mov	r0, r3
 804b8f2:	3708      	adds	r7, #8
 804b8f4:	46bd      	mov	sp, r7
 804b8f6:	bd80      	pop	{r7, pc}

0804b8f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 804b8f8:	b580      	push	{r7, lr}
 804b8fa:	b088      	sub	sp, #32
 804b8fc:	af04      	add	r7, sp, #16
 804b8fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 804b900:	2302      	movs	r3, #2
 804b902:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 804b904:	2300      	movs	r3, #0
 804b906:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 804b908:	687b      	ldr	r3, [r7, #4]
 804b90a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 804b90e:	b2db      	uxtb	r3, r3
 804b910:	2b01      	cmp	r3, #1
 804b912:	d102      	bne.n	804b91a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 804b914:	687b      	ldr	r3, [r7, #4]
 804b916:	2203      	movs	r2, #3
 804b918:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 804b91a:	687b      	ldr	r3, [r7, #4]
 804b91c:	781b      	ldrb	r3, [r3, #0]
 804b91e:	b2db      	uxtb	r3, r3
 804b920:	2b0b      	cmp	r3, #11
 804b922:	f200 81be 	bhi.w	804bca2 <USBH_Process+0x3aa>
 804b926:	a201      	add	r2, pc, #4	; (adr r2, 804b92c <USBH_Process+0x34>)
 804b928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804b92c:	0804b95d 	.word	0x0804b95d
 804b930:	0804b98f 	.word	0x0804b98f
 804b934:	0804b9f7 	.word	0x0804b9f7
 804b938:	0804bc3d 	.word	0x0804bc3d
 804b93c:	0804bca3 	.word	0x0804bca3
 804b940:	0804ba9b 	.word	0x0804ba9b
 804b944:	0804bbe3 	.word	0x0804bbe3
 804b948:	0804bad1 	.word	0x0804bad1
 804b94c:	0804baf1 	.word	0x0804baf1
 804b950:	0804bb11 	.word	0x0804bb11
 804b954:	0804bb55 	.word	0x0804bb55
 804b958:	0804bc25 	.word	0x0804bc25
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 804b95c:	687b      	ldr	r3, [r7, #4]
 804b95e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 804b962:	b2db      	uxtb	r3, r3
 804b964:	2b00      	cmp	r3, #0
 804b966:	f000 819e 	beq.w	804bca6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 804b96a:	687b      	ldr	r3, [r7, #4]
 804b96c:	2201      	movs	r2, #1
 804b96e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 804b970:	20c8      	movs	r0, #200	; 0xc8
 804b972:	f001 fda3 	bl	804d4bc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 804b976:	6878      	ldr	r0, [r7, #4]
 804b978:	f001 fc99 	bl	804d2ae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 804b97c:	687b      	ldr	r3, [r7, #4]
 804b97e:	2200      	movs	r2, #0
 804b980:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 804b984:	687b      	ldr	r3, [r7, #4]
 804b986:	2200      	movs	r2, #0
 804b988:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804b98c:	e18b      	b.n	804bca6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 804b98e:	687b      	ldr	r3, [r7, #4]
 804b990:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 804b994:	2b01      	cmp	r3, #1
 804b996:	d107      	bne.n	804b9a8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 804b998:	687b      	ldr	r3, [r7, #4]
 804b99a:	2200      	movs	r2, #0
 804b99c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 804b9a0:	687b      	ldr	r3, [r7, #4]
 804b9a2:	2202      	movs	r2, #2
 804b9a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804b9a6:	e18d      	b.n	804bcc4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 804b9a8:	687b      	ldr	r3, [r7, #4]
 804b9aa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 804b9ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804b9b2:	d914      	bls.n	804b9de <USBH_Process+0xe6>
          phost->device.RstCnt++;
 804b9b4:	687b      	ldr	r3, [r7, #4]
 804b9b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 804b9ba:	3301      	adds	r3, #1
 804b9bc:	b2da      	uxtb	r2, r3
 804b9be:	687b      	ldr	r3, [r7, #4]
 804b9c0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 804b9c4:	687b      	ldr	r3, [r7, #4]
 804b9c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 804b9ca:	2b03      	cmp	r3, #3
 804b9cc:	d903      	bls.n	804b9d6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 804b9ce:	687b      	ldr	r3, [r7, #4]
 804b9d0:	220d      	movs	r2, #13
 804b9d2:	701a      	strb	r2, [r3, #0]
      break;
 804b9d4:	e176      	b.n	804bcc4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 804b9d6:	687b      	ldr	r3, [r7, #4]
 804b9d8:	2200      	movs	r2, #0
 804b9da:	701a      	strb	r2, [r3, #0]
      break;
 804b9dc:	e172      	b.n	804bcc4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 804b9de:	687b      	ldr	r3, [r7, #4]
 804b9e0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 804b9e4:	f103 020a 	add.w	r2, r3, #10
 804b9e8:	687b      	ldr	r3, [r7, #4]
 804b9ea:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 804b9ee:	200a      	movs	r0, #10
 804b9f0:	f001 fd64 	bl	804d4bc <USBH_Delay>
      break;
 804b9f4:	e166      	b.n	804bcc4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 804b9f6:	687b      	ldr	r3, [r7, #4]
 804b9f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b9fc:	2b00      	cmp	r3, #0
 804b9fe:	d005      	beq.n	804ba0c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 804ba00:	687b      	ldr	r3, [r7, #4]
 804ba02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804ba06:	2104      	movs	r1, #4
 804ba08:	6878      	ldr	r0, [r7, #4]
 804ba0a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 804ba0c:	2064      	movs	r0, #100	; 0x64
 804ba0e:	f001 fd55 	bl	804d4bc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 804ba12:	6878      	ldr	r0, [r7, #4]
 804ba14:	f001 fc24 	bl	804d260 <USBH_LL_GetSpeed>
 804ba18:	4603      	mov	r3, r0
 804ba1a:	461a      	mov	r2, r3
 804ba1c:	687b      	ldr	r3, [r7, #4]
 804ba1e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 804ba22:	687b      	ldr	r3, [r7, #4]
 804ba24:	2205      	movs	r2, #5
 804ba26:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 804ba28:	2100      	movs	r1, #0
 804ba2a:	6878      	ldr	r0, [r7, #4]
 804ba2c:	f001 fa29 	bl	804ce82 <USBH_AllocPipe>
 804ba30:	4603      	mov	r3, r0
 804ba32:	461a      	mov	r2, r3
 804ba34:	687b      	ldr	r3, [r7, #4]
 804ba36:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 804ba38:	2180      	movs	r1, #128	; 0x80
 804ba3a:	6878      	ldr	r0, [r7, #4]
 804ba3c:	f001 fa21 	bl	804ce82 <USBH_AllocPipe>
 804ba40:	4603      	mov	r3, r0
 804ba42:	461a      	mov	r2, r3
 804ba44:	687b      	ldr	r3, [r7, #4]
 804ba46:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 804ba48:	687b      	ldr	r3, [r7, #4]
 804ba4a:	7919      	ldrb	r1, [r3, #4]
 804ba4c:	687b      	ldr	r3, [r7, #4]
 804ba4e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804ba52:	687b      	ldr	r3, [r7, #4]
 804ba54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 804ba58:	687a      	ldr	r2, [r7, #4]
 804ba5a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 804ba5c:	b292      	uxth	r2, r2
 804ba5e:	9202      	str	r2, [sp, #8]
 804ba60:	2200      	movs	r2, #0
 804ba62:	9201      	str	r2, [sp, #4]
 804ba64:	9300      	str	r3, [sp, #0]
 804ba66:	4603      	mov	r3, r0
 804ba68:	2280      	movs	r2, #128	; 0x80
 804ba6a:	6878      	ldr	r0, [r7, #4]
 804ba6c:	f001 f9da 	bl	804ce24 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 804ba70:	687b      	ldr	r3, [r7, #4]
 804ba72:	7959      	ldrb	r1, [r3, #5]
 804ba74:	687b      	ldr	r3, [r7, #4]
 804ba76:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804ba7a:	687b      	ldr	r3, [r7, #4]
 804ba7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 804ba80:	687a      	ldr	r2, [r7, #4]
 804ba82:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 804ba84:	b292      	uxth	r2, r2
 804ba86:	9202      	str	r2, [sp, #8]
 804ba88:	2200      	movs	r2, #0
 804ba8a:	9201      	str	r2, [sp, #4]
 804ba8c:	9300      	str	r3, [sp, #0]
 804ba8e:	4603      	mov	r3, r0
 804ba90:	2200      	movs	r2, #0
 804ba92:	6878      	ldr	r0, [r7, #4]
 804ba94:	f001 f9c6 	bl	804ce24 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804ba98:	e114      	b.n	804bcc4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 804ba9a:	6878      	ldr	r0, [r7, #4]
 804ba9c:	f000 f918 	bl	804bcd0 <USBH_HandleEnum>
 804baa0:	4603      	mov	r3, r0
 804baa2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 804baa4:	7bbb      	ldrb	r3, [r7, #14]
 804baa6:	b2db      	uxtb	r3, r3
 804baa8:	2b00      	cmp	r3, #0
 804baaa:	f040 80fe 	bne.w	804bcaa <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 804baae:	687b      	ldr	r3, [r7, #4]
 804bab0:	2200      	movs	r2, #0
 804bab2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 804bab6:	687b      	ldr	r3, [r7, #4]
 804bab8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 804babc:	2b01      	cmp	r3, #1
 804babe:	d103      	bne.n	804bac8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 804bac0:	687b      	ldr	r3, [r7, #4]
 804bac2:	2208      	movs	r2, #8
 804bac4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804bac6:	e0f0      	b.n	804bcaa <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 804bac8:	687b      	ldr	r3, [r7, #4]
 804baca:	2207      	movs	r2, #7
 804bacc:	701a      	strb	r2, [r3, #0]
      break;
 804bace:	e0ec      	b.n	804bcaa <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 804bad0:	687b      	ldr	r3, [r7, #4]
 804bad2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804bad6:	2b00      	cmp	r3, #0
 804bad8:	f000 80e9 	beq.w	804bcae <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 804badc:	687b      	ldr	r3, [r7, #4]
 804bade:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804bae2:	2101      	movs	r1, #1
 804bae4:	6878      	ldr	r0, [r7, #4]
 804bae6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 804bae8:	687b      	ldr	r3, [r7, #4]
 804baea:	2208      	movs	r2, #8
 804baec:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 804baee:	e0de      	b.n	804bcae <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 804baf0:	687b      	ldr	r3, [r7, #4]
 804baf2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 804baf6:	b29b      	uxth	r3, r3
 804baf8:	4619      	mov	r1, r3
 804bafa:	6878      	ldr	r0, [r7, #4]
 804bafc:	f000 fc2c 	bl	804c358 <USBH_SetCfg>
 804bb00:	4603      	mov	r3, r0
 804bb02:	2b00      	cmp	r3, #0
 804bb04:	f040 80d5 	bne.w	804bcb2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 804bb08:	687b      	ldr	r3, [r7, #4]
 804bb0a:	2209      	movs	r2, #9
 804bb0c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804bb0e:	e0d0      	b.n	804bcb2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 804bb10:	687b      	ldr	r3, [r7, #4]
 804bb12:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 804bb16:	f003 0320 	and.w	r3, r3, #32
 804bb1a:	2b00      	cmp	r3, #0
 804bb1c:	d016      	beq.n	804bb4c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 804bb1e:	2101      	movs	r1, #1
 804bb20:	6878      	ldr	r0, [r7, #4]
 804bb22:	f000 fc3c 	bl	804c39e <USBH_SetFeature>
 804bb26:	4603      	mov	r3, r0
 804bb28:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 804bb2a:	7bbb      	ldrb	r3, [r7, #14]
 804bb2c:	b2db      	uxtb	r3, r3
 804bb2e:	2b00      	cmp	r3, #0
 804bb30:	d103      	bne.n	804bb3a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 804bb32:	687b      	ldr	r3, [r7, #4]
 804bb34:	220a      	movs	r2, #10
 804bb36:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804bb38:	e0bd      	b.n	804bcb6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 804bb3a:	7bbb      	ldrb	r3, [r7, #14]
 804bb3c:	b2db      	uxtb	r3, r3
 804bb3e:	2b03      	cmp	r3, #3
 804bb40:	f040 80b9 	bne.w	804bcb6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 804bb44:	687b      	ldr	r3, [r7, #4]
 804bb46:	220a      	movs	r2, #10
 804bb48:	701a      	strb	r2, [r3, #0]
      break;
 804bb4a:	e0b4      	b.n	804bcb6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 804bb4c:	687b      	ldr	r3, [r7, #4]
 804bb4e:	220a      	movs	r2, #10
 804bb50:	701a      	strb	r2, [r3, #0]
      break;
 804bb52:	e0b0      	b.n	804bcb6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 804bb54:	687b      	ldr	r3, [r7, #4]
 804bb56:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804bb5a:	2b00      	cmp	r3, #0
 804bb5c:	f000 80ad 	beq.w	804bcba <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 804bb60:	687b      	ldr	r3, [r7, #4]
 804bb62:	2200      	movs	r2, #0
 804bb64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 804bb68:	2300      	movs	r3, #0
 804bb6a:	73fb      	strb	r3, [r7, #15]
 804bb6c:	e016      	b.n	804bb9c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 804bb6e:	7bfa      	ldrb	r2, [r7, #15]
 804bb70:	687b      	ldr	r3, [r7, #4]
 804bb72:	32de      	adds	r2, #222	; 0xde
 804bb74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804bb78:	791a      	ldrb	r2, [r3, #4]
 804bb7a:	687b      	ldr	r3, [r7, #4]
 804bb7c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 804bb80:	429a      	cmp	r2, r3
 804bb82:	d108      	bne.n	804bb96 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 804bb84:	7bfa      	ldrb	r2, [r7, #15]
 804bb86:	687b      	ldr	r3, [r7, #4]
 804bb88:	32de      	adds	r2, #222	; 0xde
 804bb8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 804bb8e:	687b      	ldr	r3, [r7, #4]
 804bb90:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 804bb94:	e005      	b.n	804bba2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 804bb96:	7bfb      	ldrb	r3, [r7, #15]
 804bb98:	3301      	adds	r3, #1
 804bb9a:	73fb      	strb	r3, [r7, #15]
 804bb9c:	7bfb      	ldrb	r3, [r7, #15]
 804bb9e:	2b00      	cmp	r3, #0
 804bba0:	d0e5      	beq.n	804bb6e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 804bba2:	687b      	ldr	r3, [r7, #4]
 804bba4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804bba8:	2b00      	cmp	r3, #0
 804bbaa:	d016      	beq.n	804bbda <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 804bbac:	687b      	ldr	r3, [r7, #4]
 804bbae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804bbb2:	689b      	ldr	r3, [r3, #8]
 804bbb4:	6878      	ldr	r0, [r7, #4]
 804bbb6:	4798      	blx	r3
 804bbb8:	4603      	mov	r3, r0
 804bbba:	2b00      	cmp	r3, #0
 804bbbc:	d109      	bne.n	804bbd2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 804bbbe:	687b      	ldr	r3, [r7, #4]
 804bbc0:	2206      	movs	r2, #6
 804bbc2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 804bbc4:	687b      	ldr	r3, [r7, #4]
 804bbc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804bbca:	2103      	movs	r1, #3
 804bbcc:	6878      	ldr	r0, [r7, #4]
 804bbce:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804bbd0:	e073      	b.n	804bcba <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 804bbd2:	687b      	ldr	r3, [r7, #4]
 804bbd4:	220d      	movs	r2, #13
 804bbd6:	701a      	strb	r2, [r3, #0]
      break;
 804bbd8:	e06f      	b.n	804bcba <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 804bbda:	687b      	ldr	r3, [r7, #4]
 804bbdc:	220d      	movs	r2, #13
 804bbde:	701a      	strb	r2, [r3, #0]
      break;
 804bbe0:	e06b      	b.n	804bcba <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 804bbe2:	687b      	ldr	r3, [r7, #4]
 804bbe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804bbe8:	2b00      	cmp	r3, #0
 804bbea:	d017      	beq.n	804bc1c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 804bbec:	687b      	ldr	r3, [r7, #4]
 804bbee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804bbf2:	691b      	ldr	r3, [r3, #16]
 804bbf4:	6878      	ldr	r0, [r7, #4]
 804bbf6:	4798      	blx	r3
 804bbf8:	4603      	mov	r3, r0
 804bbfa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 804bbfc:	7bbb      	ldrb	r3, [r7, #14]
 804bbfe:	b2db      	uxtb	r3, r3
 804bc00:	2b00      	cmp	r3, #0
 804bc02:	d103      	bne.n	804bc0c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 804bc04:	687b      	ldr	r3, [r7, #4]
 804bc06:	220b      	movs	r2, #11
 804bc08:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804bc0a:	e058      	b.n	804bcbe <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 804bc0c:	7bbb      	ldrb	r3, [r7, #14]
 804bc0e:	b2db      	uxtb	r3, r3
 804bc10:	2b02      	cmp	r3, #2
 804bc12:	d154      	bne.n	804bcbe <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 804bc14:	687b      	ldr	r3, [r7, #4]
 804bc16:	220d      	movs	r2, #13
 804bc18:	701a      	strb	r2, [r3, #0]
      break;
 804bc1a:	e050      	b.n	804bcbe <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 804bc1c:	687b      	ldr	r3, [r7, #4]
 804bc1e:	220d      	movs	r2, #13
 804bc20:	701a      	strb	r2, [r3, #0]
      break;
 804bc22:	e04c      	b.n	804bcbe <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 804bc24:	687b      	ldr	r3, [r7, #4]
 804bc26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804bc2a:	2b00      	cmp	r3, #0
 804bc2c:	d049      	beq.n	804bcc2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 804bc2e:	687b      	ldr	r3, [r7, #4]
 804bc30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804bc34:	695b      	ldr	r3, [r3, #20]
 804bc36:	6878      	ldr	r0, [r7, #4]
 804bc38:	4798      	blx	r3
      }
      break;
 804bc3a:	e042      	b.n	804bcc2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 804bc3c:	687b      	ldr	r3, [r7, #4]
 804bc3e:	2200      	movs	r2, #0
 804bc40:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 804bc44:	6878      	ldr	r0, [r7, #4]
 804bc46:	f7ff fd67 	bl	804b718 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 804bc4a:	687b      	ldr	r3, [r7, #4]
 804bc4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804bc50:	2b00      	cmp	r3, #0
 804bc52:	d009      	beq.n	804bc68 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 804bc54:	687b      	ldr	r3, [r7, #4]
 804bc56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804bc5a:	68db      	ldr	r3, [r3, #12]
 804bc5c:	6878      	ldr	r0, [r7, #4]
 804bc5e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 804bc60:	687b      	ldr	r3, [r7, #4]
 804bc62:	2200      	movs	r2, #0
 804bc64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 804bc68:	687b      	ldr	r3, [r7, #4]
 804bc6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804bc6e:	2b00      	cmp	r3, #0
 804bc70:	d005      	beq.n	804bc7e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 804bc72:	687b      	ldr	r3, [r7, #4]
 804bc74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804bc78:	2105      	movs	r1, #5
 804bc7a:	6878      	ldr	r0, [r7, #4]
 804bc7c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 804bc7e:	687b      	ldr	r3, [r7, #4]
 804bc80:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 804bc84:	b2db      	uxtb	r3, r3
 804bc86:	2b01      	cmp	r3, #1
 804bc88:	d107      	bne.n	804bc9a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 804bc8a:	687b      	ldr	r3, [r7, #4]
 804bc8c:	2200      	movs	r2, #0
 804bc8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 804bc92:	6878      	ldr	r0, [r7, #4]
 804bc94:	f7ff fe20 	bl	804b8d8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804bc98:	e014      	b.n	804bcc4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 804bc9a:	6878      	ldr	r0, [r7, #4]
 804bc9c:	f001 faaa 	bl	804d1f4 <USBH_LL_Start>
      break;
 804bca0:	e010      	b.n	804bcc4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 804bca2:	bf00      	nop
 804bca4:	e00e      	b.n	804bcc4 <USBH_Process+0x3cc>
      break;
 804bca6:	bf00      	nop
 804bca8:	e00c      	b.n	804bcc4 <USBH_Process+0x3cc>
      break;
 804bcaa:	bf00      	nop
 804bcac:	e00a      	b.n	804bcc4 <USBH_Process+0x3cc>
    break;
 804bcae:	bf00      	nop
 804bcb0:	e008      	b.n	804bcc4 <USBH_Process+0x3cc>
      break;
 804bcb2:	bf00      	nop
 804bcb4:	e006      	b.n	804bcc4 <USBH_Process+0x3cc>
      break;
 804bcb6:	bf00      	nop
 804bcb8:	e004      	b.n	804bcc4 <USBH_Process+0x3cc>
      break;
 804bcba:	bf00      	nop
 804bcbc:	e002      	b.n	804bcc4 <USBH_Process+0x3cc>
      break;
 804bcbe:	bf00      	nop
 804bcc0:	e000      	b.n	804bcc4 <USBH_Process+0x3cc>
      break;
 804bcc2:	bf00      	nop
  }
  return USBH_OK;
 804bcc4:	2300      	movs	r3, #0
}
 804bcc6:	4618      	mov	r0, r3
 804bcc8:	3710      	adds	r7, #16
 804bcca:	46bd      	mov	sp, r7
 804bccc:	bd80      	pop	{r7, pc}
 804bcce:	bf00      	nop

0804bcd0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 804bcd0:	b580      	push	{r7, lr}
 804bcd2:	b088      	sub	sp, #32
 804bcd4:	af04      	add	r7, sp, #16
 804bcd6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 804bcd8:	2301      	movs	r3, #1
 804bcda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 804bcdc:	2301      	movs	r3, #1
 804bcde:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 804bce0:	687b      	ldr	r3, [r7, #4]
 804bce2:	785b      	ldrb	r3, [r3, #1]
 804bce4:	2b07      	cmp	r3, #7
 804bce6:	f200 81c1 	bhi.w	804c06c <USBH_HandleEnum+0x39c>
 804bcea:	a201      	add	r2, pc, #4	; (adr r2, 804bcf0 <USBH_HandleEnum+0x20>)
 804bcec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804bcf0:	0804bd11 	.word	0x0804bd11
 804bcf4:	0804bdcf 	.word	0x0804bdcf
 804bcf8:	0804be39 	.word	0x0804be39
 804bcfc:	0804bec7 	.word	0x0804bec7
 804bd00:	0804bf31 	.word	0x0804bf31
 804bd04:	0804bfa1 	.word	0x0804bfa1
 804bd08:	0804bfe7 	.word	0x0804bfe7
 804bd0c:	0804c02d 	.word	0x0804c02d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 804bd10:	2108      	movs	r1, #8
 804bd12:	6878      	ldr	r0, [r7, #4]
 804bd14:	f000 fa50 	bl	804c1b8 <USBH_Get_DevDesc>
 804bd18:	4603      	mov	r3, r0
 804bd1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804bd1c:	7bbb      	ldrb	r3, [r7, #14]
 804bd1e:	2b00      	cmp	r3, #0
 804bd20:	d130      	bne.n	804bd84 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 804bd22:	687b      	ldr	r3, [r7, #4]
 804bd24:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 804bd28:	687b      	ldr	r3, [r7, #4]
 804bd2a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 804bd2c:	687b      	ldr	r3, [r7, #4]
 804bd2e:	2201      	movs	r2, #1
 804bd30:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 804bd32:	687b      	ldr	r3, [r7, #4]
 804bd34:	7919      	ldrb	r1, [r3, #4]
 804bd36:	687b      	ldr	r3, [r7, #4]
 804bd38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804bd3c:	687b      	ldr	r3, [r7, #4]
 804bd3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804bd42:	687a      	ldr	r2, [r7, #4]
 804bd44:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 804bd46:	b292      	uxth	r2, r2
 804bd48:	9202      	str	r2, [sp, #8]
 804bd4a:	2200      	movs	r2, #0
 804bd4c:	9201      	str	r2, [sp, #4]
 804bd4e:	9300      	str	r3, [sp, #0]
 804bd50:	4603      	mov	r3, r0
 804bd52:	2280      	movs	r2, #128	; 0x80
 804bd54:	6878      	ldr	r0, [r7, #4]
 804bd56:	f001 f865 	bl	804ce24 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804bd5a:	687b      	ldr	r3, [r7, #4]
 804bd5c:	7959      	ldrb	r1, [r3, #5]
 804bd5e:	687b      	ldr	r3, [r7, #4]
 804bd60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804bd64:	687b      	ldr	r3, [r7, #4]
 804bd66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804bd6a:	687a      	ldr	r2, [r7, #4]
 804bd6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804bd6e:	b292      	uxth	r2, r2
 804bd70:	9202      	str	r2, [sp, #8]
 804bd72:	2200      	movs	r2, #0
 804bd74:	9201      	str	r2, [sp, #4]
 804bd76:	9300      	str	r3, [sp, #0]
 804bd78:	4603      	mov	r3, r0
 804bd7a:	2200      	movs	r2, #0
 804bd7c:	6878      	ldr	r0, [r7, #4]
 804bd7e:	f001 f851 	bl	804ce24 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 804bd82:	e175      	b.n	804c070 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804bd84:	7bbb      	ldrb	r3, [r7, #14]
 804bd86:	2b03      	cmp	r3, #3
 804bd88:	f040 8172 	bne.w	804c070 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 804bd8c:	687b      	ldr	r3, [r7, #4]
 804bd8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804bd92:	3301      	adds	r3, #1
 804bd94:	b2da      	uxtb	r2, r3
 804bd96:	687b      	ldr	r3, [r7, #4]
 804bd98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804bd9c:	687b      	ldr	r3, [r7, #4]
 804bd9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804bda2:	2b03      	cmp	r3, #3
 804bda4:	d903      	bls.n	804bdae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 804bda6:	687b      	ldr	r3, [r7, #4]
 804bda8:	220d      	movs	r2, #13
 804bdaa:	701a      	strb	r2, [r3, #0]
      break;
 804bdac:	e160      	b.n	804c070 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804bdae:	687b      	ldr	r3, [r7, #4]
 804bdb0:	795b      	ldrb	r3, [r3, #5]
 804bdb2:	4619      	mov	r1, r3
 804bdb4:	6878      	ldr	r0, [r7, #4]
 804bdb6:	f001 f885 	bl	804cec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804bdba:	687b      	ldr	r3, [r7, #4]
 804bdbc:	791b      	ldrb	r3, [r3, #4]
 804bdbe:	4619      	mov	r1, r3
 804bdc0:	6878      	ldr	r0, [r7, #4]
 804bdc2:	f001 f87f 	bl	804cec4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 804bdc6:	687b      	ldr	r3, [r7, #4]
 804bdc8:	2200      	movs	r2, #0
 804bdca:	701a      	strb	r2, [r3, #0]
      break;
 804bdcc:	e150      	b.n	804c070 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 804bdce:	2112      	movs	r1, #18
 804bdd0:	6878      	ldr	r0, [r7, #4]
 804bdd2:	f000 f9f1 	bl	804c1b8 <USBH_Get_DevDesc>
 804bdd6:	4603      	mov	r3, r0
 804bdd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804bdda:	7bbb      	ldrb	r3, [r7, #14]
 804bddc:	2b00      	cmp	r3, #0
 804bdde:	d103      	bne.n	804bde8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 804bde0:	687b      	ldr	r3, [r7, #4]
 804bde2:	2202      	movs	r2, #2
 804bde4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804bde6:	e145      	b.n	804c074 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804bde8:	7bbb      	ldrb	r3, [r7, #14]
 804bdea:	2b03      	cmp	r3, #3
 804bdec:	f040 8142 	bne.w	804c074 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 804bdf0:	687b      	ldr	r3, [r7, #4]
 804bdf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804bdf6:	3301      	adds	r3, #1
 804bdf8:	b2da      	uxtb	r2, r3
 804bdfa:	687b      	ldr	r3, [r7, #4]
 804bdfc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804be00:	687b      	ldr	r3, [r7, #4]
 804be02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804be06:	2b03      	cmp	r3, #3
 804be08:	d903      	bls.n	804be12 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 804be0a:	687b      	ldr	r3, [r7, #4]
 804be0c:	220d      	movs	r2, #13
 804be0e:	701a      	strb	r2, [r3, #0]
      break;
 804be10:	e130      	b.n	804c074 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804be12:	687b      	ldr	r3, [r7, #4]
 804be14:	795b      	ldrb	r3, [r3, #5]
 804be16:	4619      	mov	r1, r3
 804be18:	6878      	ldr	r0, [r7, #4]
 804be1a:	f001 f853 	bl	804cec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804be1e:	687b      	ldr	r3, [r7, #4]
 804be20:	791b      	ldrb	r3, [r3, #4]
 804be22:	4619      	mov	r1, r3
 804be24:	6878      	ldr	r0, [r7, #4]
 804be26:	f001 f84d 	bl	804cec4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804be2a:	687b      	ldr	r3, [r7, #4]
 804be2c:	2200      	movs	r2, #0
 804be2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804be30:	687b      	ldr	r3, [r7, #4]
 804be32:	2200      	movs	r2, #0
 804be34:	701a      	strb	r2, [r3, #0]
      break;
 804be36:	e11d      	b.n	804c074 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 804be38:	2101      	movs	r1, #1
 804be3a:	6878      	ldr	r0, [r7, #4]
 804be3c:	f000 fa68 	bl	804c310 <USBH_SetAddress>
 804be40:	4603      	mov	r3, r0
 804be42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804be44:	7bbb      	ldrb	r3, [r7, #14]
 804be46:	2b00      	cmp	r3, #0
 804be48:	d132      	bne.n	804beb0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 804be4a:	2002      	movs	r0, #2
 804be4c:	f001 fb36 	bl	804d4bc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 804be50:	687b      	ldr	r3, [r7, #4]
 804be52:	2201      	movs	r2, #1
 804be54:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 804be58:	687b      	ldr	r3, [r7, #4]
 804be5a:	2203      	movs	r2, #3
 804be5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 804be5e:	687b      	ldr	r3, [r7, #4]
 804be60:	7919      	ldrb	r1, [r3, #4]
 804be62:	687b      	ldr	r3, [r7, #4]
 804be64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804be68:	687b      	ldr	r3, [r7, #4]
 804be6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804be6e:	687a      	ldr	r2, [r7, #4]
 804be70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 804be72:	b292      	uxth	r2, r2
 804be74:	9202      	str	r2, [sp, #8]
 804be76:	2200      	movs	r2, #0
 804be78:	9201      	str	r2, [sp, #4]
 804be7a:	9300      	str	r3, [sp, #0]
 804be7c:	4603      	mov	r3, r0
 804be7e:	2280      	movs	r2, #128	; 0x80
 804be80:	6878      	ldr	r0, [r7, #4]
 804be82:	f000 ffcf 	bl	804ce24 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804be86:	687b      	ldr	r3, [r7, #4]
 804be88:	7959      	ldrb	r1, [r3, #5]
 804be8a:	687b      	ldr	r3, [r7, #4]
 804be8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804be90:	687b      	ldr	r3, [r7, #4]
 804be92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804be96:	687a      	ldr	r2, [r7, #4]
 804be98:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804be9a:	b292      	uxth	r2, r2
 804be9c:	9202      	str	r2, [sp, #8]
 804be9e:	2200      	movs	r2, #0
 804bea0:	9201      	str	r2, [sp, #4]
 804bea2:	9300      	str	r3, [sp, #0]
 804bea4:	4603      	mov	r3, r0
 804bea6:	2200      	movs	r2, #0
 804bea8:	6878      	ldr	r0, [r7, #4]
 804beaa:	f000 ffbb 	bl	804ce24 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 804beae:	e0e3      	b.n	804c078 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804beb0:	7bbb      	ldrb	r3, [r7, #14]
 804beb2:	2b03      	cmp	r3, #3
 804beb4:	f040 80e0 	bne.w	804c078 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 804beb8:	687b      	ldr	r3, [r7, #4]
 804beba:	220d      	movs	r2, #13
 804bebc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 804bebe:	687b      	ldr	r3, [r7, #4]
 804bec0:	2200      	movs	r2, #0
 804bec2:	705a      	strb	r2, [r3, #1]
      break;
 804bec4:	e0d8      	b.n	804c078 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 804bec6:	2109      	movs	r1, #9
 804bec8:	6878      	ldr	r0, [r7, #4]
 804beca:	f000 f99d 	bl	804c208 <USBH_Get_CfgDesc>
 804bece:	4603      	mov	r3, r0
 804bed0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804bed2:	7bbb      	ldrb	r3, [r7, #14]
 804bed4:	2b00      	cmp	r3, #0
 804bed6:	d103      	bne.n	804bee0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 804bed8:	687b      	ldr	r3, [r7, #4]
 804beda:	2204      	movs	r2, #4
 804bedc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804bede:	e0cd      	b.n	804c07c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804bee0:	7bbb      	ldrb	r3, [r7, #14]
 804bee2:	2b03      	cmp	r3, #3
 804bee4:	f040 80ca 	bne.w	804c07c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 804bee8:	687b      	ldr	r3, [r7, #4]
 804beea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804beee:	3301      	adds	r3, #1
 804bef0:	b2da      	uxtb	r2, r3
 804bef2:	687b      	ldr	r3, [r7, #4]
 804bef4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804bef8:	687b      	ldr	r3, [r7, #4]
 804befa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804befe:	2b03      	cmp	r3, #3
 804bf00:	d903      	bls.n	804bf0a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 804bf02:	687b      	ldr	r3, [r7, #4]
 804bf04:	220d      	movs	r2, #13
 804bf06:	701a      	strb	r2, [r3, #0]
      break;
 804bf08:	e0b8      	b.n	804c07c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804bf0a:	687b      	ldr	r3, [r7, #4]
 804bf0c:	795b      	ldrb	r3, [r3, #5]
 804bf0e:	4619      	mov	r1, r3
 804bf10:	6878      	ldr	r0, [r7, #4]
 804bf12:	f000 ffd7 	bl	804cec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804bf16:	687b      	ldr	r3, [r7, #4]
 804bf18:	791b      	ldrb	r3, [r3, #4]
 804bf1a:	4619      	mov	r1, r3
 804bf1c:	6878      	ldr	r0, [r7, #4]
 804bf1e:	f000 ffd1 	bl	804cec4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804bf22:	687b      	ldr	r3, [r7, #4]
 804bf24:	2200      	movs	r2, #0
 804bf26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804bf28:	687b      	ldr	r3, [r7, #4]
 804bf2a:	2200      	movs	r2, #0
 804bf2c:	701a      	strb	r2, [r3, #0]
      break;
 804bf2e:	e0a5      	b.n	804c07c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 804bf30:	687b      	ldr	r3, [r7, #4]
 804bf32:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 804bf36:	4619      	mov	r1, r3
 804bf38:	6878      	ldr	r0, [r7, #4]
 804bf3a:	f000 f965 	bl	804c208 <USBH_Get_CfgDesc>
 804bf3e:	4603      	mov	r3, r0
 804bf40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804bf42:	7bbb      	ldrb	r3, [r7, #14]
 804bf44:	2b00      	cmp	r3, #0
 804bf46:	d103      	bne.n	804bf50 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 804bf48:	687b      	ldr	r3, [r7, #4]
 804bf4a:	2205      	movs	r2, #5
 804bf4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804bf4e:	e097      	b.n	804c080 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804bf50:	7bbb      	ldrb	r3, [r7, #14]
 804bf52:	2b03      	cmp	r3, #3
 804bf54:	f040 8094 	bne.w	804c080 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 804bf58:	687b      	ldr	r3, [r7, #4]
 804bf5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804bf5e:	3301      	adds	r3, #1
 804bf60:	b2da      	uxtb	r2, r3
 804bf62:	687b      	ldr	r3, [r7, #4]
 804bf64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804bf68:	687b      	ldr	r3, [r7, #4]
 804bf6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804bf6e:	2b03      	cmp	r3, #3
 804bf70:	d903      	bls.n	804bf7a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 804bf72:	687b      	ldr	r3, [r7, #4]
 804bf74:	220d      	movs	r2, #13
 804bf76:	701a      	strb	r2, [r3, #0]
      break;
 804bf78:	e082      	b.n	804c080 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804bf7a:	687b      	ldr	r3, [r7, #4]
 804bf7c:	795b      	ldrb	r3, [r3, #5]
 804bf7e:	4619      	mov	r1, r3
 804bf80:	6878      	ldr	r0, [r7, #4]
 804bf82:	f000 ff9f 	bl	804cec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804bf86:	687b      	ldr	r3, [r7, #4]
 804bf88:	791b      	ldrb	r3, [r3, #4]
 804bf8a:	4619      	mov	r1, r3
 804bf8c:	6878      	ldr	r0, [r7, #4]
 804bf8e:	f000 ff99 	bl	804cec4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804bf92:	687b      	ldr	r3, [r7, #4]
 804bf94:	2200      	movs	r2, #0
 804bf96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804bf98:	687b      	ldr	r3, [r7, #4]
 804bf9a:	2200      	movs	r2, #0
 804bf9c:	701a      	strb	r2, [r3, #0]
      break;
 804bf9e:	e06f      	b.n	804c080 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 804bfa0:	687b      	ldr	r3, [r7, #4]
 804bfa2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 804bfa6:	2b00      	cmp	r3, #0
 804bfa8:	d019      	beq.n	804bfde <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 804bfaa:	687b      	ldr	r3, [r7, #4]
 804bfac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 804bfb0:	687b      	ldr	r3, [r7, #4]
 804bfb2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 804bfb6:	23ff      	movs	r3, #255	; 0xff
 804bfb8:	6878      	ldr	r0, [r7, #4]
 804bfba:	f000 f949 	bl	804c250 <USBH_Get_StringDesc>
 804bfbe:	4603      	mov	r3, r0
 804bfc0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804bfc2:	7bbb      	ldrb	r3, [r7, #14]
 804bfc4:	2b00      	cmp	r3, #0
 804bfc6:	d103      	bne.n	804bfd0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804bfc8:	687b      	ldr	r3, [r7, #4]
 804bfca:	2206      	movs	r2, #6
 804bfcc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804bfce:	e059      	b.n	804c084 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804bfd0:	7bbb      	ldrb	r3, [r7, #14]
 804bfd2:	2b03      	cmp	r3, #3
 804bfd4:	d156      	bne.n	804c084 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804bfd6:	687b      	ldr	r3, [r7, #4]
 804bfd8:	2206      	movs	r2, #6
 804bfda:	705a      	strb	r2, [r3, #1]
      break;
 804bfdc:	e052      	b.n	804c084 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804bfde:	687b      	ldr	r3, [r7, #4]
 804bfe0:	2206      	movs	r2, #6
 804bfe2:	705a      	strb	r2, [r3, #1]
      break;
 804bfe4:	e04e      	b.n	804c084 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 804bfe6:	687b      	ldr	r3, [r7, #4]
 804bfe8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 804bfec:	2b00      	cmp	r3, #0
 804bfee:	d019      	beq.n	804c024 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 804bff0:	687b      	ldr	r3, [r7, #4]
 804bff2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 804bff6:	687b      	ldr	r3, [r7, #4]
 804bff8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 804bffc:	23ff      	movs	r3, #255	; 0xff
 804bffe:	6878      	ldr	r0, [r7, #4]
 804c000:	f000 f926 	bl	804c250 <USBH_Get_StringDesc>
 804c004:	4603      	mov	r3, r0
 804c006:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804c008:	7bbb      	ldrb	r3, [r7, #14]
 804c00a:	2b00      	cmp	r3, #0
 804c00c:	d103      	bne.n	804c016 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804c00e:	687b      	ldr	r3, [r7, #4]
 804c010:	2207      	movs	r2, #7
 804c012:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804c014:	e038      	b.n	804c088 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804c016:	7bbb      	ldrb	r3, [r7, #14]
 804c018:	2b03      	cmp	r3, #3
 804c01a:	d135      	bne.n	804c088 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804c01c:	687b      	ldr	r3, [r7, #4]
 804c01e:	2207      	movs	r2, #7
 804c020:	705a      	strb	r2, [r3, #1]
      break;
 804c022:	e031      	b.n	804c088 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804c024:	687b      	ldr	r3, [r7, #4]
 804c026:	2207      	movs	r2, #7
 804c028:	705a      	strb	r2, [r3, #1]
      break;
 804c02a:	e02d      	b.n	804c088 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 804c02c:	687b      	ldr	r3, [r7, #4]
 804c02e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 804c032:	2b00      	cmp	r3, #0
 804c034:	d017      	beq.n	804c066 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 804c036:	687b      	ldr	r3, [r7, #4]
 804c038:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 804c03c:	687b      	ldr	r3, [r7, #4]
 804c03e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 804c042:	23ff      	movs	r3, #255	; 0xff
 804c044:	6878      	ldr	r0, [r7, #4]
 804c046:	f000 f903 	bl	804c250 <USBH_Get_StringDesc>
 804c04a:	4603      	mov	r3, r0
 804c04c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804c04e:	7bbb      	ldrb	r3, [r7, #14]
 804c050:	2b00      	cmp	r3, #0
 804c052:	d102      	bne.n	804c05a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 804c054:	2300      	movs	r3, #0
 804c056:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 804c058:	e018      	b.n	804c08c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804c05a:	7bbb      	ldrb	r3, [r7, #14]
 804c05c:	2b03      	cmp	r3, #3
 804c05e:	d115      	bne.n	804c08c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 804c060:	2300      	movs	r3, #0
 804c062:	73fb      	strb	r3, [r7, #15]
      break;
 804c064:	e012      	b.n	804c08c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 804c066:	2300      	movs	r3, #0
 804c068:	73fb      	strb	r3, [r7, #15]
      break;
 804c06a:	e00f      	b.n	804c08c <USBH_HandleEnum+0x3bc>

    default:
      break;
 804c06c:	bf00      	nop
 804c06e:	e00e      	b.n	804c08e <USBH_HandleEnum+0x3be>
      break;
 804c070:	bf00      	nop
 804c072:	e00c      	b.n	804c08e <USBH_HandleEnum+0x3be>
      break;
 804c074:	bf00      	nop
 804c076:	e00a      	b.n	804c08e <USBH_HandleEnum+0x3be>
      break;
 804c078:	bf00      	nop
 804c07a:	e008      	b.n	804c08e <USBH_HandleEnum+0x3be>
      break;
 804c07c:	bf00      	nop
 804c07e:	e006      	b.n	804c08e <USBH_HandleEnum+0x3be>
      break;
 804c080:	bf00      	nop
 804c082:	e004      	b.n	804c08e <USBH_HandleEnum+0x3be>
      break;
 804c084:	bf00      	nop
 804c086:	e002      	b.n	804c08e <USBH_HandleEnum+0x3be>
      break;
 804c088:	bf00      	nop
 804c08a:	e000      	b.n	804c08e <USBH_HandleEnum+0x3be>
      break;
 804c08c:	bf00      	nop
  }
  return Status;
 804c08e:	7bfb      	ldrb	r3, [r7, #15]
}
 804c090:	4618      	mov	r0, r3
 804c092:	3710      	adds	r7, #16
 804c094:	46bd      	mov	sp, r7
 804c096:	bd80      	pop	{r7, pc}

0804c098 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 804c098:	b480      	push	{r7}
 804c09a:	b083      	sub	sp, #12
 804c09c:	af00      	add	r7, sp, #0
 804c09e:	6078      	str	r0, [r7, #4]
 804c0a0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 804c0a2:	687b      	ldr	r3, [r7, #4]
 804c0a4:	683a      	ldr	r2, [r7, #0]
 804c0a6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 804c0aa:	bf00      	nop
 804c0ac:	370c      	adds	r7, #12
 804c0ae:	46bd      	mov	sp, r7
 804c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c0b4:	4770      	bx	lr

0804c0b6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 804c0b6:	b580      	push	{r7, lr}
 804c0b8:	b082      	sub	sp, #8
 804c0ba:	af00      	add	r7, sp, #0
 804c0bc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 804c0be:	687b      	ldr	r3, [r7, #4]
 804c0c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804c0c4:	1c5a      	adds	r2, r3, #1
 804c0c6:	687b      	ldr	r3, [r7, #4]
 804c0c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 804c0cc:	6878      	ldr	r0, [r7, #4]
 804c0ce:	f000 f804 	bl	804c0da <USBH_HandleSof>
}
 804c0d2:	bf00      	nop
 804c0d4:	3708      	adds	r7, #8
 804c0d6:	46bd      	mov	sp, r7
 804c0d8:	bd80      	pop	{r7, pc}

0804c0da <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 804c0da:	b580      	push	{r7, lr}
 804c0dc:	b082      	sub	sp, #8
 804c0de:	af00      	add	r7, sp, #0
 804c0e0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 804c0e2:	687b      	ldr	r3, [r7, #4]
 804c0e4:	781b      	ldrb	r3, [r3, #0]
 804c0e6:	b2db      	uxtb	r3, r3
 804c0e8:	2b0b      	cmp	r3, #11
 804c0ea:	d10a      	bne.n	804c102 <USBH_HandleSof+0x28>
 804c0ec:	687b      	ldr	r3, [r7, #4]
 804c0ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804c0f2:	2b00      	cmp	r3, #0
 804c0f4:	d005      	beq.n	804c102 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 804c0f6:	687b      	ldr	r3, [r7, #4]
 804c0f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804c0fc:	699b      	ldr	r3, [r3, #24]
 804c0fe:	6878      	ldr	r0, [r7, #4]
 804c100:	4798      	blx	r3
  }
}
 804c102:	bf00      	nop
 804c104:	3708      	adds	r7, #8
 804c106:	46bd      	mov	sp, r7
 804c108:	bd80      	pop	{r7, pc}

0804c10a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 804c10a:	b480      	push	{r7}
 804c10c:	b083      	sub	sp, #12
 804c10e:	af00      	add	r7, sp, #0
 804c110:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 804c112:	687b      	ldr	r3, [r7, #4]
 804c114:	2201      	movs	r2, #1
 804c116:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 804c11a:	bf00      	nop
}
 804c11c:	370c      	adds	r7, #12
 804c11e:	46bd      	mov	sp, r7
 804c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c124:	4770      	bx	lr

0804c126 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 804c126:	b480      	push	{r7}
 804c128:	b083      	sub	sp, #12
 804c12a:	af00      	add	r7, sp, #0
 804c12c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 804c12e:	687b      	ldr	r3, [r7, #4]
 804c130:	2200      	movs	r2, #0
 804c132:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 804c136:	bf00      	nop
}
 804c138:	370c      	adds	r7, #12
 804c13a:	46bd      	mov	sp, r7
 804c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c140:	4770      	bx	lr

0804c142 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 804c142:	b480      	push	{r7}
 804c144:	b083      	sub	sp, #12
 804c146:	af00      	add	r7, sp, #0
 804c148:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 804c14a:	687b      	ldr	r3, [r7, #4]
 804c14c:	2201      	movs	r2, #1
 804c14e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 804c152:	687b      	ldr	r3, [r7, #4]
 804c154:	2200      	movs	r2, #0
 804c156:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 804c15a:	687b      	ldr	r3, [r7, #4]
 804c15c:	2200      	movs	r2, #0
 804c15e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 804c162:	2300      	movs	r3, #0
}
 804c164:	4618      	mov	r0, r3
 804c166:	370c      	adds	r7, #12
 804c168:	46bd      	mov	sp, r7
 804c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c16e:	4770      	bx	lr

0804c170 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 804c170:	b580      	push	{r7, lr}
 804c172:	b082      	sub	sp, #8
 804c174:	af00      	add	r7, sp, #0
 804c176:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 804c178:	687b      	ldr	r3, [r7, #4]
 804c17a:	2201      	movs	r2, #1
 804c17c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 804c180:	687b      	ldr	r3, [r7, #4]
 804c182:	2200      	movs	r2, #0
 804c184:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 804c188:	687b      	ldr	r3, [r7, #4]
 804c18a:	2200      	movs	r2, #0
 804c18c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 804c190:	6878      	ldr	r0, [r7, #4]
 804c192:	f001 f84a 	bl	804d22a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804c196:	687b      	ldr	r3, [r7, #4]
 804c198:	791b      	ldrb	r3, [r3, #4]
 804c19a:	4619      	mov	r1, r3
 804c19c:	6878      	ldr	r0, [r7, #4]
 804c19e:	f000 fe91 	bl	804cec4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804c1a2:	687b      	ldr	r3, [r7, #4]
 804c1a4:	795b      	ldrb	r3, [r3, #5]
 804c1a6:	4619      	mov	r1, r3
 804c1a8:	6878      	ldr	r0, [r7, #4]
 804c1aa:	f000 fe8b 	bl	804cec4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 804c1ae:	2300      	movs	r3, #0
}
 804c1b0:	4618      	mov	r0, r3
 804c1b2:	3708      	adds	r7, #8
 804c1b4:	46bd      	mov	sp, r7
 804c1b6:	bd80      	pop	{r7, pc}

0804c1b8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 804c1b8:	b580      	push	{r7, lr}
 804c1ba:	b086      	sub	sp, #24
 804c1bc:	af02      	add	r7, sp, #8
 804c1be:	6078      	str	r0, [r7, #4]
 804c1c0:	460b      	mov	r3, r1
 804c1c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 804c1c4:	687b      	ldr	r3, [r7, #4]
 804c1c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 804c1ca:	78fb      	ldrb	r3, [r7, #3]
 804c1cc:	b29b      	uxth	r3, r3
 804c1ce:	9300      	str	r3, [sp, #0]
 804c1d0:	4613      	mov	r3, r2
 804c1d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 804c1d6:	2100      	movs	r1, #0
 804c1d8:	6878      	ldr	r0, [r7, #4]
 804c1da:	f000 f864 	bl	804c2a6 <USBH_GetDescriptor>
 804c1de:	4603      	mov	r3, r0
 804c1e0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 804c1e2:	7bfb      	ldrb	r3, [r7, #15]
 804c1e4:	2b00      	cmp	r3, #0
 804c1e6:	d10a      	bne.n	804c1fe <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 804c1e8:	687b      	ldr	r3, [r7, #4]
 804c1ea:	f203 3026 	addw	r0, r3, #806	; 0x326
 804c1ee:	687b      	ldr	r3, [r7, #4]
 804c1f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804c1f4:	78fa      	ldrb	r2, [r7, #3]
 804c1f6:	b292      	uxth	r2, r2
 804c1f8:	4619      	mov	r1, r3
 804c1fa:	f000 f918 	bl	804c42e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 804c1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 804c200:	4618      	mov	r0, r3
 804c202:	3710      	adds	r7, #16
 804c204:	46bd      	mov	sp, r7
 804c206:	bd80      	pop	{r7, pc}

0804c208 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 804c208:	b580      	push	{r7, lr}
 804c20a:	b086      	sub	sp, #24
 804c20c:	af02      	add	r7, sp, #8
 804c20e:	6078      	str	r0, [r7, #4]
 804c210:	460b      	mov	r3, r1
 804c212:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 804c214:	687b      	ldr	r3, [r7, #4]
 804c216:	331c      	adds	r3, #28
 804c218:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 804c21a:	887b      	ldrh	r3, [r7, #2]
 804c21c:	9300      	str	r3, [sp, #0]
 804c21e:	68bb      	ldr	r3, [r7, #8]
 804c220:	f44f 7200 	mov.w	r2, #512	; 0x200
 804c224:	2100      	movs	r1, #0
 804c226:	6878      	ldr	r0, [r7, #4]
 804c228:	f000 f83d 	bl	804c2a6 <USBH_GetDescriptor>
 804c22c:	4603      	mov	r3, r0
 804c22e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 804c230:	7bfb      	ldrb	r3, [r7, #15]
 804c232:	2b00      	cmp	r3, #0
 804c234:	d107      	bne.n	804c246 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 804c236:	887b      	ldrh	r3, [r7, #2]
 804c238:	461a      	mov	r2, r3
 804c23a:	68b9      	ldr	r1, [r7, #8]
 804c23c:	6878      	ldr	r0, [r7, #4]
 804c23e:	f000 f987 	bl	804c550 <USBH_ParseCfgDesc>
 804c242:	4603      	mov	r3, r0
 804c244:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804c246:	7bfb      	ldrb	r3, [r7, #15]
}
 804c248:	4618      	mov	r0, r3
 804c24a:	3710      	adds	r7, #16
 804c24c:	46bd      	mov	sp, r7
 804c24e:	bd80      	pop	{r7, pc}

0804c250 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 804c250:	b580      	push	{r7, lr}
 804c252:	b088      	sub	sp, #32
 804c254:	af02      	add	r7, sp, #8
 804c256:	60f8      	str	r0, [r7, #12]
 804c258:	607a      	str	r2, [r7, #4]
 804c25a:	461a      	mov	r2, r3
 804c25c:	460b      	mov	r3, r1
 804c25e:	72fb      	strb	r3, [r7, #11]
 804c260:	4613      	mov	r3, r2
 804c262:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 804c264:	7afb      	ldrb	r3, [r7, #11]
 804c266:	b29b      	uxth	r3, r3
 804c268:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 804c26c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 804c26e:	68fb      	ldr	r3, [r7, #12]
 804c270:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 804c274:	893b      	ldrh	r3, [r7, #8]
 804c276:	9300      	str	r3, [sp, #0]
 804c278:	460b      	mov	r3, r1
 804c27a:	2100      	movs	r1, #0
 804c27c:	68f8      	ldr	r0, [r7, #12]
 804c27e:	f000 f812 	bl	804c2a6 <USBH_GetDescriptor>
 804c282:	4603      	mov	r3, r0
 804c284:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 804c286:	7dfb      	ldrb	r3, [r7, #23]
 804c288:	2b00      	cmp	r3, #0
 804c28a:	d107      	bne.n	804c29c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 804c28c:	68fb      	ldr	r3, [r7, #12]
 804c28e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804c292:	893a      	ldrh	r2, [r7, #8]
 804c294:	6879      	ldr	r1, [r7, #4]
 804c296:	4618      	mov	r0, r3
 804c298:	f000 fb24 	bl	804c8e4 <USBH_ParseStringDesc>
  }

  return status;
 804c29c:	7dfb      	ldrb	r3, [r7, #23]
}
 804c29e:	4618      	mov	r0, r3
 804c2a0:	3718      	adds	r7, #24
 804c2a2:	46bd      	mov	sp, r7
 804c2a4:	bd80      	pop	{r7, pc}

0804c2a6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 804c2a6:	b580      	push	{r7, lr}
 804c2a8:	b084      	sub	sp, #16
 804c2aa:	af00      	add	r7, sp, #0
 804c2ac:	60f8      	str	r0, [r7, #12]
 804c2ae:	607b      	str	r3, [r7, #4]
 804c2b0:	460b      	mov	r3, r1
 804c2b2:	72fb      	strb	r3, [r7, #11]
 804c2b4:	4613      	mov	r3, r2
 804c2b6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 804c2b8:	68fb      	ldr	r3, [r7, #12]
 804c2ba:	789b      	ldrb	r3, [r3, #2]
 804c2bc:	2b01      	cmp	r3, #1
 804c2be:	d11c      	bne.n	804c2fa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 804c2c0:	7afb      	ldrb	r3, [r7, #11]
 804c2c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 804c2c6:	b2da      	uxtb	r2, r3
 804c2c8:	68fb      	ldr	r3, [r7, #12]
 804c2ca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 804c2cc:	68fb      	ldr	r3, [r7, #12]
 804c2ce:	2206      	movs	r2, #6
 804c2d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 804c2d2:	68fb      	ldr	r3, [r7, #12]
 804c2d4:	893a      	ldrh	r2, [r7, #8]
 804c2d6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 804c2d8:	893b      	ldrh	r3, [r7, #8]
 804c2da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 804c2de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804c2e2:	d104      	bne.n	804c2ee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 804c2e4:	68fb      	ldr	r3, [r7, #12]
 804c2e6:	f240 4209 	movw	r2, #1033	; 0x409
 804c2ea:	829a      	strh	r2, [r3, #20]
 804c2ec:	e002      	b.n	804c2f4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 804c2ee:	68fb      	ldr	r3, [r7, #12]
 804c2f0:	2200      	movs	r2, #0
 804c2f2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 804c2f4:	68fb      	ldr	r3, [r7, #12]
 804c2f6:	8b3a      	ldrh	r2, [r7, #24]
 804c2f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 804c2fa:	8b3b      	ldrh	r3, [r7, #24]
 804c2fc:	461a      	mov	r2, r3
 804c2fe:	6879      	ldr	r1, [r7, #4]
 804c300:	68f8      	ldr	r0, [r7, #12]
 804c302:	f000 fb3d 	bl	804c980 <USBH_CtlReq>
 804c306:	4603      	mov	r3, r0
}
 804c308:	4618      	mov	r0, r3
 804c30a:	3710      	adds	r7, #16
 804c30c:	46bd      	mov	sp, r7
 804c30e:	bd80      	pop	{r7, pc}

0804c310 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 804c310:	b580      	push	{r7, lr}
 804c312:	b082      	sub	sp, #8
 804c314:	af00      	add	r7, sp, #0
 804c316:	6078      	str	r0, [r7, #4]
 804c318:	460b      	mov	r3, r1
 804c31a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804c31c:	687b      	ldr	r3, [r7, #4]
 804c31e:	789b      	ldrb	r3, [r3, #2]
 804c320:	2b01      	cmp	r3, #1
 804c322:	d10f      	bne.n	804c344 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 804c324:	687b      	ldr	r3, [r7, #4]
 804c326:	2200      	movs	r2, #0
 804c328:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 804c32a:	687b      	ldr	r3, [r7, #4]
 804c32c:	2205      	movs	r2, #5
 804c32e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 804c330:	78fb      	ldrb	r3, [r7, #3]
 804c332:	b29a      	uxth	r2, r3
 804c334:	687b      	ldr	r3, [r7, #4]
 804c336:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804c338:	687b      	ldr	r3, [r7, #4]
 804c33a:	2200      	movs	r2, #0
 804c33c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804c33e:	687b      	ldr	r3, [r7, #4]
 804c340:	2200      	movs	r2, #0
 804c342:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804c344:	2200      	movs	r2, #0
 804c346:	2100      	movs	r1, #0
 804c348:	6878      	ldr	r0, [r7, #4]
 804c34a:	f000 fb19 	bl	804c980 <USBH_CtlReq>
 804c34e:	4603      	mov	r3, r0
}
 804c350:	4618      	mov	r0, r3
 804c352:	3708      	adds	r7, #8
 804c354:	46bd      	mov	sp, r7
 804c356:	bd80      	pop	{r7, pc}

0804c358 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 804c358:	b580      	push	{r7, lr}
 804c35a:	b082      	sub	sp, #8
 804c35c:	af00      	add	r7, sp, #0
 804c35e:	6078      	str	r0, [r7, #4]
 804c360:	460b      	mov	r3, r1
 804c362:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 804c364:	687b      	ldr	r3, [r7, #4]
 804c366:	789b      	ldrb	r3, [r3, #2]
 804c368:	2b01      	cmp	r3, #1
 804c36a:	d10e      	bne.n	804c38a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 804c36c:	687b      	ldr	r3, [r7, #4]
 804c36e:	2200      	movs	r2, #0
 804c370:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 804c372:	687b      	ldr	r3, [r7, #4]
 804c374:	2209      	movs	r2, #9
 804c376:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 804c378:	687b      	ldr	r3, [r7, #4]
 804c37a:	887a      	ldrh	r2, [r7, #2]
 804c37c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804c37e:	687b      	ldr	r3, [r7, #4]
 804c380:	2200      	movs	r2, #0
 804c382:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804c384:	687b      	ldr	r3, [r7, #4]
 804c386:	2200      	movs	r2, #0
 804c388:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804c38a:	2200      	movs	r2, #0
 804c38c:	2100      	movs	r1, #0
 804c38e:	6878      	ldr	r0, [r7, #4]
 804c390:	f000 faf6 	bl	804c980 <USBH_CtlReq>
 804c394:	4603      	mov	r3, r0
}
 804c396:	4618      	mov	r0, r3
 804c398:	3708      	adds	r7, #8
 804c39a:	46bd      	mov	sp, r7
 804c39c:	bd80      	pop	{r7, pc}

0804c39e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 804c39e:	b580      	push	{r7, lr}
 804c3a0:	b082      	sub	sp, #8
 804c3a2:	af00      	add	r7, sp, #0
 804c3a4:	6078      	str	r0, [r7, #4]
 804c3a6:	460b      	mov	r3, r1
 804c3a8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804c3aa:	687b      	ldr	r3, [r7, #4]
 804c3ac:	789b      	ldrb	r3, [r3, #2]
 804c3ae:	2b01      	cmp	r3, #1
 804c3b0:	d10f      	bne.n	804c3d2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 804c3b2:	687b      	ldr	r3, [r7, #4]
 804c3b4:	2200      	movs	r2, #0
 804c3b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 804c3b8:	687b      	ldr	r3, [r7, #4]
 804c3ba:	2203      	movs	r2, #3
 804c3bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 804c3be:	78fb      	ldrb	r3, [r7, #3]
 804c3c0:	b29a      	uxth	r2, r3
 804c3c2:	687b      	ldr	r3, [r7, #4]
 804c3c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804c3c6:	687b      	ldr	r3, [r7, #4]
 804c3c8:	2200      	movs	r2, #0
 804c3ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804c3cc:	687b      	ldr	r3, [r7, #4]
 804c3ce:	2200      	movs	r2, #0
 804c3d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804c3d2:	2200      	movs	r2, #0
 804c3d4:	2100      	movs	r1, #0
 804c3d6:	6878      	ldr	r0, [r7, #4]
 804c3d8:	f000 fad2 	bl	804c980 <USBH_CtlReq>
 804c3dc:	4603      	mov	r3, r0
}
 804c3de:	4618      	mov	r0, r3
 804c3e0:	3708      	adds	r7, #8
 804c3e2:	46bd      	mov	sp, r7
 804c3e4:	bd80      	pop	{r7, pc}

0804c3e6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 804c3e6:	b580      	push	{r7, lr}
 804c3e8:	b082      	sub	sp, #8
 804c3ea:	af00      	add	r7, sp, #0
 804c3ec:	6078      	str	r0, [r7, #4]
 804c3ee:	460b      	mov	r3, r1
 804c3f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804c3f2:	687b      	ldr	r3, [r7, #4]
 804c3f4:	789b      	ldrb	r3, [r3, #2]
 804c3f6:	2b01      	cmp	r3, #1
 804c3f8:	d10f      	bne.n	804c41a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 804c3fa:	687b      	ldr	r3, [r7, #4]
 804c3fc:	2202      	movs	r2, #2
 804c3fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 804c400:	687b      	ldr	r3, [r7, #4]
 804c402:	2201      	movs	r2, #1
 804c404:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 804c406:	687b      	ldr	r3, [r7, #4]
 804c408:	2200      	movs	r2, #0
 804c40a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 804c40c:	78fb      	ldrb	r3, [r7, #3]
 804c40e:	b29a      	uxth	r2, r3
 804c410:	687b      	ldr	r3, [r7, #4]
 804c412:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804c414:	687b      	ldr	r3, [r7, #4]
 804c416:	2200      	movs	r2, #0
 804c418:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 804c41a:	2200      	movs	r2, #0
 804c41c:	2100      	movs	r1, #0
 804c41e:	6878      	ldr	r0, [r7, #4]
 804c420:	f000 faae 	bl	804c980 <USBH_CtlReq>
 804c424:	4603      	mov	r3, r0
}
 804c426:	4618      	mov	r0, r3
 804c428:	3708      	adds	r7, #8
 804c42a:	46bd      	mov	sp, r7
 804c42c:	bd80      	pop	{r7, pc}

0804c42e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 804c42e:	b480      	push	{r7}
 804c430:	b085      	sub	sp, #20
 804c432:	af00      	add	r7, sp, #0
 804c434:	60f8      	str	r0, [r7, #12]
 804c436:	60b9      	str	r1, [r7, #8]
 804c438:	4613      	mov	r3, r2
 804c43a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 804c43c:	68bb      	ldr	r3, [r7, #8]
 804c43e:	781a      	ldrb	r2, [r3, #0]
 804c440:	68fb      	ldr	r3, [r7, #12]
 804c442:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 804c444:	68bb      	ldr	r3, [r7, #8]
 804c446:	785a      	ldrb	r2, [r3, #1]
 804c448:	68fb      	ldr	r3, [r7, #12]
 804c44a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 804c44c:	68bb      	ldr	r3, [r7, #8]
 804c44e:	3302      	adds	r3, #2
 804c450:	781b      	ldrb	r3, [r3, #0]
 804c452:	b29a      	uxth	r2, r3
 804c454:	68bb      	ldr	r3, [r7, #8]
 804c456:	3303      	adds	r3, #3
 804c458:	781b      	ldrb	r3, [r3, #0]
 804c45a:	b29b      	uxth	r3, r3
 804c45c:	021b      	lsls	r3, r3, #8
 804c45e:	b29b      	uxth	r3, r3
 804c460:	4313      	orrs	r3, r2
 804c462:	b29a      	uxth	r2, r3
 804c464:	68fb      	ldr	r3, [r7, #12]
 804c466:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 804c468:	68bb      	ldr	r3, [r7, #8]
 804c46a:	791a      	ldrb	r2, [r3, #4]
 804c46c:	68fb      	ldr	r3, [r7, #12]
 804c46e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 804c470:	68bb      	ldr	r3, [r7, #8]
 804c472:	795a      	ldrb	r2, [r3, #5]
 804c474:	68fb      	ldr	r3, [r7, #12]
 804c476:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 804c478:	68bb      	ldr	r3, [r7, #8]
 804c47a:	799a      	ldrb	r2, [r3, #6]
 804c47c:	68fb      	ldr	r3, [r7, #12]
 804c47e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 804c480:	68bb      	ldr	r3, [r7, #8]
 804c482:	79da      	ldrb	r2, [r3, #7]
 804c484:	68fb      	ldr	r3, [r7, #12]
 804c486:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 804c488:	68fb      	ldr	r3, [r7, #12]
 804c48a:	79db      	ldrb	r3, [r3, #7]
 804c48c:	2b20      	cmp	r3, #32
 804c48e:	dc11      	bgt.n	804c4b4 <USBH_ParseDevDesc+0x86>
 804c490:	2b08      	cmp	r3, #8
 804c492:	db16      	blt.n	804c4c2 <USBH_ParseDevDesc+0x94>
 804c494:	3b08      	subs	r3, #8
 804c496:	2201      	movs	r2, #1
 804c498:	fa02 f303 	lsl.w	r3, r2, r3
 804c49c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 804c4a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804c4a4:	2b00      	cmp	r3, #0
 804c4a6:	bf14      	ite	ne
 804c4a8:	2301      	movne	r3, #1
 804c4aa:	2300      	moveq	r3, #0
 804c4ac:	b2db      	uxtb	r3, r3
 804c4ae:	2b00      	cmp	r3, #0
 804c4b0:	d102      	bne.n	804c4b8 <USBH_ParseDevDesc+0x8a>
 804c4b2:	e006      	b.n	804c4c2 <USBH_ParseDevDesc+0x94>
 804c4b4:	2b40      	cmp	r3, #64	; 0x40
 804c4b6:	d104      	bne.n	804c4c2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 804c4b8:	68fb      	ldr	r3, [r7, #12]
 804c4ba:	79da      	ldrb	r2, [r3, #7]
 804c4bc:	68fb      	ldr	r3, [r7, #12]
 804c4be:	71da      	strb	r2, [r3, #7]
      break;
 804c4c0:	e003      	b.n	804c4ca <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 804c4c2:	68fb      	ldr	r3, [r7, #12]
 804c4c4:	2240      	movs	r2, #64	; 0x40
 804c4c6:	71da      	strb	r2, [r3, #7]
      break;
 804c4c8:	bf00      	nop
  }

  if (length > 8U)
 804c4ca:	88fb      	ldrh	r3, [r7, #6]
 804c4cc:	2b08      	cmp	r3, #8
 804c4ce:	d939      	bls.n	804c544 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 804c4d0:	68bb      	ldr	r3, [r7, #8]
 804c4d2:	3308      	adds	r3, #8
 804c4d4:	781b      	ldrb	r3, [r3, #0]
 804c4d6:	b29a      	uxth	r2, r3
 804c4d8:	68bb      	ldr	r3, [r7, #8]
 804c4da:	3309      	adds	r3, #9
 804c4dc:	781b      	ldrb	r3, [r3, #0]
 804c4de:	b29b      	uxth	r3, r3
 804c4e0:	021b      	lsls	r3, r3, #8
 804c4e2:	b29b      	uxth	r3, r3
 804c4e4:	4313      	orrs	r3, r2
 804c4e6:	b29a      	uxth	r2, r3
 804c4e8:	68fb      	ldr	r3, [r7, #12]
 804c4ea:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 804c4ec:	68bb      	ldr	r3, [r7, #8]
 804c4ee:	330a      	adds	r3, #10
 804c4f0:	781b      	ldrb	r3, [r3, #0]
 804c4f2:	b29a      	uxth	r2, r3
 804c4f4:	68bb      	ldr	r3, [r7, #8]
 804c4f6:	330b      	adds	r3, #11
 804c4f8:	781b      	ldrb	r3, [r3, #0]
 804c4fa:	b29b      	uxth	r3, r3
 804c4fc:	021b      	lsls	r3, r3, #8
 804c4fe:	b29b      	uxth	r3, r3
 804c500:	4313      	orrs	r3, r2
 804c502:	b29a      	uxth	r2, r3
 804c504:	68fb      	ldr	r3, [r7, #12]
 804c506:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 804c508:	68bb      	ldr	r3, [r7, #8]
 804c50a:	330c      	adds	r3, #12
 804c50c:	781b      	ldrb	r3, [r3, #0]
 804c50e:	b29a      	uxth	r2, r3
 804c510:	68bb      	ldr	r3, [r7, #8]
 804c512:	330d      	adds	r3, #13
 804c514:	781b      	ldrb	r3, [r3, #0]
 804c516:	b29b      	uxth	r3, r3
 804c518:	021b      	lsls	r3, r3, #8
 804c51a:	b29b      	uxth	r3, r3
 804c51c:	4313      	orrs	r3, r2
 804c51e:	b29a      	uxth	r2, r3
 804c520:	68fb      	ldr	r3, [r7, #12]
 804c522:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 804c524:	68bb      	ldr	r3, [r7, #8]
 804c526:	7b9a      	ldrb	r2, [r3, #14]
 804c528:	68fb      	ldr	r3, [r7, #12]
 804c52a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 804c52c:	68bb      	ldr	r3, [r7, #8]
 804c52e:	7bda      	ldrb	r2, [r3, #15]
 804c530:	68fb      	ldr	r3, [r7, #12]
 804c532:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 804c534:	68bb      	ldr	r3, [r7, #8]
 804c536:	7c1a      	ldrb	r2, [r3, #16]
 804c538:	68fb      	ldr	r3, [r7, #12]
 804c53a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 804c53c:	68bb      	ldr	r3, [r7, #8]
 804c53e:	7c5a      	ldrb	r2, [r3, #17]
 804c540:	68fb      	ldr	r3, [r7, #12]
 804c542:	745a      	strb	r2, [r3, #17]
  }
}
 804c544:	bf00      	nop
 804c546:	3714      	adds	r7, #20
 804c548:	46bd      	mov	sp, r7
 804c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c54e:	4770      	bx	lr

0804c550 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 804c550:	b580      	push	{r7, lr}
 804c552:	b08c      	sub	sp, #48	; 0x30
 804c554:	af00      	add	r7, sp, #0
 804c556:	60f8      	str	r0, [r7, #12]
 804c558:	60b9      	str	r1, [r7, #8]
 804c55a:	4613      	mov	r3, r2
 804c55c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 804c55e:	68fb      	ldr	r3, [r7, #12]
 804c560:	f503 734e 	add.w	r3, r3, #824	; 0x338
 804c564:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 804c566:	2300      	movs	r3, #0
 804c568:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 804c56c:	68bb      	ldr	r3, [r7, #8]
 804c56e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 804c570:	2300      	movs	r3, #0
 804c572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 804c576:	2300      	movs	r3, #0
 804c578:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 804c57c:	68bb      	ldr	r3, [r7, #8]
 804c57e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 804c580:	68bb      	ldr	r3, [r7, #8]
 804c582:	781a      	ldrb	r2, [r3, #0]
 804c584:	6a3b      	ldr	r3, [r7, #32]
 804c586:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 804c588:	68bb      	ldr	r3, [r7, #8]
 804c58a:	785a      	ldrb	r2, [r3, #1]
 804c58c:	6a3b      	ldr	r3, [r7, #32]
 804c58e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 804c590:	68bb      	ldr	r3, [r7, #8]
 804c592:	3302      	adds	r3, #2
 804c594:	781b      	ldrb	r3, [r3, #0]
 804c596:	b29a      	uxth	r2, r3
 804c598:	68bb      	ldr	r3, [r7, #8]
 804c59a:	3303      	adds	r3, #3
 804c59c:	781b      	ldrb	r3, [r3, #0]
 804c59e:	b29b      	uxth	r3, r3
 804c5a0:	021b      	lsls	r3, r3, #8
 804c5a2:	b29b      	uxth	r3, r3
 804c5a4:	4313      	orrs	r3, r2
 804c5a6:	b29b      	uxth	r3, r3
 804c5a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804c5ac:	bf28      	it	cs
 804c5ae:	f44f 7380 	movcs.w	r3, #256	; 0x100
 804c5b2:	b29a      	uxth	r2, r3
 804c5b4:	6a3b      	ldr	r3, [r7, #32]
 804c5b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 804c5b8:	68bb      	ldr	r3, [r7, #8]
 804c5ba:	791a      	ldrb	r2, [r3, #4]
 804c5bc:	6a3b      	ldr	r3, [r7, #32]
 804c5be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 804c5c0:	68bb      	ldr	r3, [r7, #8]
 804c5c2:	795a      	ldrb	r2, [r3, #5]
 804c5c4:	6a3b      	ldr	r3, [r7, #32]
 804c5c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 804c5c8:	68bb      	ldr	r3, [r7, #8]
 804c5ca:	799a      	ldrb	r2, [r3, #6]
 804c5cc:	6a3b      	ldr	r3, [r7, #32]
 804c5ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 804c5d0:	68bb      	ldr	r3, [r7, #8]
 804c5d2:	79da      	ldrb	r2, [r3, #7]
 804c5d4:	6a3b      	ldr	r3, [r7, #32]
 804c5d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 804c5d8:	68bb      	ldr	r3, [r7, #8]
 804c5da:	7a1a      	ldrb	r2, [r3, #8]
 804c5dc:	6a3b      	ldr	r3, [r7, #32]
 804c5de:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 804c5e0:	6a3b      	ldr	r3, [r7, #32]
 804c5e2:	781b      	ldrb	r3, [r3, #0]
 804c5e4:	2b09      	cmp	r3, #9
 804c5e6:	d002      	beq.n	804c5ee <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 804c5e8:	6a3b      	ldr	r3, [r7, #32]
 804c5ea:	2209      	movs	r2, #9
 804c5ec:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 804c5ee:	88fb      	ldrh	r3, [r7, #6]
 804c5f0:	2b09      	cmp	r3, #9
 804c5f2:	f240 809d 	bls.w	804c730 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 804c5f6:	2309      	movs	r3, #9
 804c5f8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 804c5fa:	2300      	movs	r3, #0
 804c5fc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 804c5fe:	e081      	b.n	804c704 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 804c600:	f107 0316 	add.w	r3, r7, #22
 804c604:	4619      	mov	r1, r3
 804c606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804c608:	f000 f99f 	bl	804c94a <USBH_GetNextDesc>
 804c60c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 804c60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804c610:	785b      	ldrb	r3, [r3, #1]
 804c612:	2b04      	cmp	r3, #4
 804c614:	d176      	bne.n	804c704 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 804c616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804c618:	781b      	ldrb	r3, [r3, #0]
 804c61a:	2b09      	cmp	r3, #9
 804c61c:	d002      	beq.n	804c624 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 804c61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804c620:	2209      	movs	r2, #9
 804c622:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 804c624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804c628:	221a      	movs	r2, #26
 804c62a:	fb02 f303 	mul.w	r3, r2, r3
 804c62e:	3308      	adds	r3, #8
 804c630:	6a3a      	ldr	r2, [r7, #32]
 804c632:	4413      	add	r3, r2
 804c634:	3302      	adds	r3, #2
 804c636:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 804c638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804c63a:	69f8      	ldr	r0, [r7, #28]
 804c63c:	f000 f87e 	bl	804c73c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 804c640:	2300      	movs	r3, #0
 804c642:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 804c646:	2300      	movs	r3, #0
 804c648:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 804c64a:	e043      	b.n	804c6d4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 804c64c:	f107 0316 	add.w	r3, r7, #22
 804c650:	4619      	mov	r1, r3
 804c652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804c654:	f000 f979 	bl	804c94a <USBH_GetNextDesc>
 804c658:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 804c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804c65c:	785b      	ldrb	r3, [r3, #1]
 804c65e:	2b05      	cmp	r3, #5
 804c660:	d138      	bne.n	804c6d4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 804c662:	69fb      	ldr	r3, [r7, #28]
 804c664:	795b      	ldrb	r3, [r3, #5]
 804c666:	2b01      	cmp	r3, #1
 804c668:	d10f      	bne.n	804c68a <USBH_ParseCfgDesc+0x13a>
 804c66a:	69fb      	ldr	r3, [r7, #28]
 804c66c:	799b      	ldrb	r3, [r3, #6]
 804c66e:	2b02      	cmp	r3, #2
 804c670:	d10b      	bne.n	804c68a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804c672:	69fb      	ldr	r3, [r7, #28]
 804c674:	79db      	ldrb	r3, [r3, #7]
 804c676:	2b00      	cmp	r3, #0
 804c678:	d10f      	bne.n	804c69a <USBH_ParseCfgDesc+0x14a>
 804c67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804c67c:	781b      	ldrb	r3, [r3, #0]
 804c67e:	2b09      	cmp	r3, #9
 804c680:	d00b      	beq.n	804c69a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 804c682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804c684:	2209      	movs	r2, #9
 804c686:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804c688:	e007      	b.n	804c69a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 804c68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804c68c:	781b      	ldrb	r3, [r3, #0]
 804c68e:	2b07      	cmp	r3, #7
 804c690:	d004      	beq.n	804c69c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 804c692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804c694:	2207      	movs	r2, #7
 804c696:	701a      	strb	r2, [r3, #0]
 804c698:	e000      	b.n	804c69c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804c69a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 804c69c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804c6a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804c6a4:	3201      	adds	r2, #1
 804c6a6:	00d2      	lsls	r2, r2, #3
 804c6a8:	211a      	movs	r1, #26
 804c6aa:	fb01 f303 	mul.w	r3, r1, r3
 804c6ae:	4413      	add	r3, r2
 804c6b0:	3308      	adds	r3, #8
 804c6b2:	6a3a      	ldr	r2, [r7, #32]
 804c6b4:	4413      	add	r3, r2
 804c6b6:	3304      	adds	r3, #4
 804c6b8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 804c6ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804c6bc:	69b9      	ldr	r1, [r7, #24]
 804c6be:	68f8      	ldr	r0, [r7, #12]
 804c6c0:	f000 f86b 	bl	804c79a <USBH_ParseEPDesc>
 804c6c4:	4603      	mov	r3, r0
 804c6c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 804c6ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 804c6ce:	3301      	adds	r3, #1
 804c6d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 804c6d4:	69fb      	ldr	r3, [r7, #28]
 804c6d6:	791b      	ldrb	r3, [r3, #4]
 804c6d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804c6dc:	429a      	cmp	r2, r3
 804c6de:	d204      	bcs.n	804c6ea <USBH_ParseCfgDesc+0x19a>
 804c6e0:	6a3b      	ldr	r3, [r7, #32]
 804c6e2:	885a      	ldrh	r2, [r3, #2]
 804c6e4:	8afb      	ldrh	r3, [r7, #22]
 804c6e6:	429a      	cmp	r2, r3
 804c6e8:	d8b0      	bhi.n	804c64c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 804c6ea:	69fb      	ldr	r3, [r7, #28]
 804c6ec:	791b      	ldrb	r3, [r3, #4]
 804c6ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804c6f2:	429a      	cmp	r2, r3
 804c6f4:	d201      	bcs.n	804c6fa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 804c6f6:	2303      	movs	r3, #3
 804c6f8:	e01c      	b.n	804c734 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 804c6fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804c6fe:	3301      	adds	r3, #1
 804c700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 804c704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804c708:	2b01      	cmp	r3, #1
 804c70a:	d805      	bhi.n	804c718 <USBH_ParseCfgDesc+0x1c8>
 804c70c:	6a3b      	ldr	r3, [r7, #32]
 804c70e:	885a      	ldrh	r2, [r3, #2]
 804c710:	8afb      	ldrh	r3, [r7, #22]
 804c712:	429a      	cmp	r2, r3
 804c714:	f63f af74 	bhi.w	804c600 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 804c718:	6a3b      	ldr	r3, [r7, #32]
 804c71a:	791b      	ldrb	r3, [r3, #4]
 804c71c:	2b02      	cmp	r3, #2
 804c71e:	bf28      	it	cs
 804c720:	2302      	movcs	r3, #2
 804c722:	b2db      	uxtb	r3, r3
 804c724:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 804c728:	429a      	cmp	r2, r3
 804c72a:	d201      	bcs.n	804c730 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 804c72c:	2303      	movs	r3, #3
 804c72e:	e001      	b.n	804c734 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 804c730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 804c734:	4618      	mov	r0, r3
 804c736:	3730      	adds	r7, #48	; 0x30
 804c738:	46bd      	mov	sp, r7
 804c73a:	bd80      	pop	{r7, pc}

0804c73c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 804c73c:	b480      	push	{r7}
 804c73e:	b083      	sub	sp, #12
 804c740:	af00      	add	r7, sp, #0
 804c742:	6078      	str	r0, [r7, #4]
 804c744:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 804c746:	683b      	ldr	r3, [r7, #0]
 804c748:	781a      	ldrb	r2, [r3, #0]
 804c74a:	687b      	ldr	r3, [r7, #4]
 804c74c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 804c74e:	683b      	ldr	r3, [r7, #0]
 804c750:	785a      	ldrb	r2, [r3, #1]
 804c752:	687b      	ldr	r3, [r7, #4]
 804c754:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 804c756:	683b      	ldr	r3, [r7, #0]
 804c758:	789a      	ldrb	r2, [r3, #2]
 804c75a:	687b      	ldr	r3, [r7, #4]
 804c75c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 804c75e:	683b      	ldr	r3, [r7, #0]
 804c760:	78da      	ldrb	r2, [r3, #3]
 804c762:	687b      	ldr	r3, [r7, #4]
 804c764:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 804c766:	683b      	ldr	r3, [r7, #0]
 804c768:	791a      	ldrb	r2, [r3, #4]
 804c76a:	687b      	ldr	r3, [r7, #4]
 804c76c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 804c76e:	683b      	ldr	r3, [r7, #0]
 804c770:	795a      	ldrb	r2, [r3, #5]
 804c772:	687b      	ldr	r3, [r7, #4]
 804c774:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 804c776:	683b      	ldr	r3, [r7, #0]
 804c778:	799a      	ldrb	r2, [r3, #6]
 804c77a:	687b      	ldr	r3, [r7, #4]
 804c77c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 804c77e:	683b      	ldr	r3, [r7, #0]
 804c780:	79da      	ldrb	r2, [r3, #7]
 804c782:	687b      	ldr	r3, [r7, #4]
 804c784:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 804c786:	683b      	ldr	r3, [r7, #0]
 804c788:	7a1a      	ldrb	r2, [r3, #8]
 804c78a:	687b      	ldr	r3, [r7, #4]
 804c78c:	721a      	strb	r2, [r3, #8]
}
 804c78e:	bf00      	nop
 804c790:	370c      	adds	r7, #12
 804c792:	46bd      	mov	sp, r7
 804c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c798:	4770      	bx	lr

0804c79a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 804c79a:	b480      	push	{r7}
 804c79c:	b087      	sub	sp, #28
 804c79e:	af00      	add	r7, sp, #0
 804c7a0:	60f8      	str	r0, [r7, #12]
 804c7a2:	60b9      	str	r1, [r7, #8]
 804c7a4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 804c7a6:	2300      	movs	r3, #0
 804c7a8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 804c7aa:	687b      	ldr	r3, [r7, #4]
 804c7ac:	781a      	ldrb	r2, [r3, #0]
 804c7ae:	68bb      	ldr	r3, [r7, #8]
 804c7b0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 804c7b2:	687b      	ldr	r3, [r7, #4]
 804c7b4:	785a      	ldrb	r2, [r3, #1]
 804c7b6:	68bb      	ldr	r3, [r7, #8]
 804c7b8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 804c7ba:	687b      	ldr	r3, [r7, #4]
 804c7bc:	789a      	ldrb	r2, [r3, #2]
 804c7be:	68bb      	ldr	r3, [r7, #8]
 804c7c0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 804c7c2:	687b      	ldr	r3, [r7, #4]
 804c7c4:	78da      	ldrb	r2, [r3, #3]
 804c7c6:	68bb      	ldr	r3, [r7, #8]
 804c7c8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 804c7ca:	687b      	ldr	r3, [r7, #4]
 804c7cc:	3304      	adds	r3, #4
 804c7ce:	781b      	ldrb	r3, [r3, #0]
 804c7d0:	b29a      	uxth	r2, r3
 804c7d2:	687b      	ldr	r3, [r7, #4]
 804c7d4:	3305      	adds	r3, #5
 804c7d6:	781b      	ldrb	r3, [r3, #0]
 804c7d8:	b29b      	uxth	r3, r3
 804c7da:	021b      	lsls	r3, r3, #8
 804c7dc:	b29b      	uxth	r3, r3
 804c7de:	4313      	orrs	r3, r2
 804c7e0:	b29a      	uxth	r2, r3
 804c7e2:	68bb      	ldr	r3, [r7, #8]
 804c7e4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 804c7e6:	687b      	ldr	r3, [r7, #4]
 804c7e8:	799a      	ldrb	r2, [r3, #6]
 804c7ea:	68bb      	ldr	r3, [r7, #8]
 804c7ec:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 804c7ee:	68bb      	ldr	r3, [r7, #8]
 804c7f0:	889b      	ldrh	r3, [r3, #4]
 804c7f2:	2b00      	cmp	r3, #0
 804c7f4:	d102      	bne.n	804c7fc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 804c7f6:	2303      	movs	r3, #3
 804c7f8:	75fb      	strb	r3, [r7, #23]
 804c7fa:	e033      	b.n	804c864 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 804c7fc:	68bb      	ldr	r3, [r7, #8]
 804c7fe:	889b      	ldrh	r3, [r3, #4]
 804c800:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 804c804:	f023 0307 	bic.w	r3, r3, #7
 804c808:	b29a      	uxth	r2, r3
 804c80a:	68bb      	ldr	r3, [r7, #8]
 804c80c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 804c80e:	68bb      	ldr	r3, [r7, #8]
 804c810:	889b      	ldrh	r3, [r3, #4]
 804c812:	b21a      	sxth	r2, r3
 804c814:	687b      	ldr	r3, [r7, #4]
 804c816:	3304      	adds	r3, #4
 804c818:	781b      	ldrb	r3, [r3, #0]
 804c81a:	b299      	uxth	r1, r3
 804c81c:	687b      	ldr	r3, [r7, #4]
 804c81e:	3305      	adds	r3, #5
 804c820:	781b      	ldrb	r3, [r3, #0]
 804c822:	b29b      	uxth	r3, r3
 804c824:	021b      	lsls	r3, r3, #8
 804c826:	b29b      	uxth	r3, r3
 804c828:	430b      	orrs	r3, r1
 804c82a:	b29b      	uxth	r3, r3
 804c82c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 804c830:	2b00      	cmp	r3, #0
 804c832:	d110      	bne.n	804c856 <USBH_ParseEPDesc+0xbc>
 804c834:	687b      	ldr	r3, [r7, #4]
 804c836:	3304      	adds	r3, #4
 804c838:	781b      	ldrb	r3, [r3, #0]
 804c83a:	b299      	uxth	r1, r3
 804c83c:	687b      	ldr	r3, [r7, #4]
 804c83e:	3305      	adds	r3, #5
 804c840:	781b      	ldrb	r3, [r3, #0]
 804c842:	b29b      	uxth	r3, r3
 804c844:	021b      	lsls	r3, r3, #8
 804c846:	b29b      	uxth	r3, r3
 804c848:	430b      	orrs	r3, r1
 804c84a:	b29b      	uxth	r3, r3
 804c84c:	b21b      	sxth	r3, r3
 804c84e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 804c852:	b21b      	sxth	r3, r3
 804c854:	e001      	b.n	804c85a <USBH_ParseEPDesc+0xc0>
 804c856:	f44f 7300 	mov.w	r3, #512	; 0x200
 804c85a:	4313      	orrs	r3, r2
 804c85c:	b21b      	sxth	r3, r3
 804c85e:	b29a      	uxth	r2, r3
 804c860:	68bb      	ldr	r3, [r7, #8]
 804c862:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 804c864:	68fb      	ldr	r3, [r7, #12]
 804c866:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804c86a:	2b00      	cmp	r3, #0
 804c86c:	d116      	bne.n	804c89c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 804c86e:	68bb      	ldr	r3, [r7, #8]
 804c870:	78db      	ldrb	r3, [r3, #3]
 804c872:	f003 0303 	and.w	r3, r3, #3
 804c876:	2b01      	cmp	r3, #1
 804c878:	d005      	beq.n	804c886 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 804c87a:	68bb      	ldr	r3, [r7, #8]
 804c87c:	78db      	ldrb	r3, [r3, #3]
 804c87e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 804c882:	2b03      	cmp	r3, #3
 804c884:	d127      	bne.n	804c8d6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 804c886:	68bb      	ldr	r3, [r7, #8]
 804c888:	799b      	ldrb	r3, [r3, #6]
 804c88a:	2b00      	cmp	r3, #0
 804c88c:	d003      	beq.n	804c896 <USBH_ParseEPDesc+0xfc>
 804c88e:	68bb      	ldr	r3, [r7, #8]
 804c890:	799b      	ldrb	r3, [r3, #6]
 804c892:	2b10      	cmp	r3, #16
 804c894:	d91f      	bls.n	804c8d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804c896:	2303      	movs	r3, #3
 804c898:	75fb      	strb	r3, [r7, #23]
 804c89a:	e01c      	b.n	804c8d6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 804c89c:	68bb      	ldr	r3, [r7, #8]
 804c89e:	78db      	ldrb	r3, [r3, #3]
 804c8a0:	f003 0303 	and.w	r3, r3, #3
 804c8a4:	2b01      	cmp	r3, #1
 804c8a6:	d10a      	bne.n	804c8be <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 804c8a8:	68bb      	ldr	r3, [r7, #8]
 804c8aa:	799b      	ldrb	r3, [r3, #6]
 804c8ac:	2b00      	cmp	r3, #0
 804c8ae:	d003      	beq.n	804c8b8 <USBH_ParseEPDesc+0x11e>
 804c8b0:	68bb      	ldr	r3, [r7, #8]
 804c8b2:	799b      	ldrb	r3, [r3, #6]
 804c8b4:	2b10      	cmp	r3, #16
 804c8b6:	d90e      	bls.n	804c8d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804c8b8:	2303      	movs	r3, #3
 804c8ba:	75fb      	strb	r3, [r7, #23]
 804c8bc:	e00b      	b.n	804c8d6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 804c8be:	68bb      	ldr	r3, [r7, #8]
 804c8c0:	78db      	ldrb	r3, [r3, #3]
 804c8c2:	f003 0303 	and.w	r3, r3, #3
 804c8c6:	2b03      	cmp	r3, #3
 804c8c8:	d105      	bne.n	804c8d6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 804c8ca:	68bb      	ldr	r3, [r7, #8]
 804c8cc:	799b      	ldrb	r3, [r3, #6]
 804c8ce:	2b00      	cmp	r3, #0
 804c8d0:	d101      	bne.n	804c8d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804c8d2:	2303      	movs	r3, #3
 804c8d4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 804c8d6:	7dfb      	ldrb	r3, [r7, #23]
}
 804c8d8:	4618      	mov	r0, r3
 804c8da:	371c      	adds	r7, #28
 804c8dc:	46bd      	mov	sp, r7
 804c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c8e2:	4770      	bx	lr

0804c8e4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 804c8e4:	b480      	push	{r7}
 804c8e6:	b087      	sub	sp, #28
 804c8e8:	af00      	add	r7, sp, #0
 804c8ea:	60f8      	str	r0, [r7, #12]
 804c8ec:	60b9      	str	r1, [r7, #8]
 804c8ee:	4613      	mov	r3, r2
 804c8f0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 804c8f2:	68fb      	ldr	r3, [r7, #12]
 804c8f4:	3301      	adds	r3, #1
 804c8f6:	781b      	ldrb	r3, [r3, #0]
 804c8f8:	2b03      	cmp	r3, #3
 804c8fa:	d120      	bne.n	804c93e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 804c8fc:	68fb      	ldr	r3, [r7, #12]
 804c8fe:	781b      	ldrb	r3, [r3, #0]
 804c900:	1e9a      	subs	r2, r3, #2
 804c902:	88fb      	ldrh	r3, [r7, #6]
 804c904:	4293      	cmp	r3, r2
 804c906:	bf28      	it	cs
 804c908:	4613      	movcs	r3, r2
 804c90a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 804c90c:	68fb      	ldr	r3, [r7, #12]
 804c90e:	3302      	adds	r3, #2
 804c910:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 804c912:	2300      	movs	r3, #0
 804c914:	82fb      	strh	r3, [r7, #22]
 804c916:	e00b      	b.n	804c930 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 804c918:	8afb      	ldrh	r3, [r7, #22]
 804c91a:	68fa      	ldr	r2, [r7, #12]
 804c91c:	4413      	add	r3, r2
 804c91e:	781a      	ldrb	r2, [r3, #0]
 804c920:	68bb      	ldr	r3, [r7, #8]
 804c922:	701a      	strb	r2, [r3, #0]
      pdest++;
 804c924:	68bb      	ldr	r3, [r7, #8]
 804c926:	3301      	adds	r3, #1
 804c928:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 804c92a:	8afb      	ldrh	r3, [r7, #22]
 804c92c:	3302      	adds	r3, #2
 804c92e:	82fb      	strh	r3, [r7, #22]
 804c930:	8afa      	ldrh	r2, [r7, #22]
 804c932:	8abb      	ldrh	r3, [r7, #20]
 804c934:	429a      	cmp	r2, r3
 804c936:	d3ef      	bcc.n	804c918 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 804c938:	68bb      	ldr	r3, [r7, #8]
 804c93a:	2200      	movs	r2, #0
 804c93c:	701a      	strb	r2, [r3, #0]
  }
}
 804c93e:	bf00      	nop
 804c940:	371c      	adds	r7, #28
 804c942:	46bd      	mov	sp, r7
 804c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c948:	4770      	bx	lr

0804c94a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 804c94a:	b480      	push	{r7}
 804c94c:	b085      	sub	sp, #20
 804c94e:	af00      	add	r7, sp, #0
 804c950:	6078      	str	r0, [r7, #4]
 804c952:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 804c954:	683b      	ldr	r3, [r7, #0]
 804c956:	881a      	ldrh	r2, [r3, #0]
 804c958:	687b      	ldr	r3, [r7, #4]
 804c95a:	781b      	ldrb	r3, [r3, #0]
 804c95c:	b29b      	uxth	r3, r3
 804c95e:	4413      	add	r3, r2
 804c960:	b29a      	uxth	r2, r3
 804c962:	683b      	ldr	r3, [r7, #0]
 804c964:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 804c966:	687b      	ldr	r3, [r7, #4]
 804c968:	781b      	ldrb	r3, [r3, #0]
 804c96a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 804c96c:	687b      	ldr	r3, [r7, #4]
 804c96e:	4413      	add	r3, r2
 804c970:	60fb      	str	r3, [r7, #12]

  return (pnext);
 804c972:	68fb      	ldr	r3, [r7, #12]
}
 804c974:	4618      	mov	r0, r3
 804c976:	3714      	adds	r7, #20
 804c978:	46bd      	mov	sp, r7
 804c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c97e:	4770      	bx	lr

0804c980 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 804c980:	b580      	push	{r7, lr}
 804c982:	b086      	sub	sp, #24
 804c984:	af00      	add	r7, sp, #0
 804c986:	60f8      	str	r0, [r7, #12]
 804c988:	60b9      	str	r1, [r7, #8]
 804c98a:	4613      	mov	r3, r2
 804c98c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 804c98e:	2301      	movs	r3, #1
 804c990:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 804c992:	68fb      	ldr	r3, [r7, #12]
 804c994:	789b      	ldrb	r3, [r3, #2]
 804c996:	2b01      	cmp	r3, #1
 804c998:	d002      	beq.n	804c9a0 <USBH_CtlReq+0x20>
 804c99a:	2b02      	cmp	r3, #2
 804c99c:	d00f      	beq.n	804c9be <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 804c99e:	e027      	b.n	804c9f0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 804c9a0:	68fb      	ldr	r3, [r7, #12]
 804c9a2:	68ba      	ldr	r2, [r7, #8]
 804c9a4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 804c9a6:	68fb      	ldr	r3, [r7, #12]
 804c9a8:	88fa      	ldrh	r2, [r7, #6]
 804c9aa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 804c9ac:	68fb      	ldr	r3, [r7, #12]
 804c9ae:	2201      	movs	r2, #1
 804c9b0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 804c9b2:	68fb      	ldr	r3, [r7, #12]
 804c9b4:	2202      	movs	r2, #2
 804c9b6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 804c9b8:	2301      	movs	r3, #1
 804c9ba:	75fb      	strb	r3, [r7, #23]
      break;
 804c9bc:	e018      	b.n	804c9f0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 804c9be:	68f8      	ldr	r0, [r7, #12]
 804c9c0:	f000 f81c 	bl	804c9fc <USBH_HandleControl>
 804c9c4:	4603      	mov	r3, r0
 804c9c6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 804c9c8:	7dfb      	ldrb	r3, [r7, #23]
 804c9ca:	2b00      	cmp	r3, #0
 804c9cc:	d002      	beq.n	804c9d4 <USBH_CtlReq+0x54>
 804c9ce:	7dfb      	ldrb	r3, [r7, #23]
 804c9d0:	2b03      	cmp	r3, #3
 804c9d2:	d106      	bne.n	804c9e2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 804c9d4:	68fb      	ldr	r3, [r7, #12]
 804c9d6:	2201      	movs	r2, #1
 804c9d8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 804c9da:	68fb      	ldr	r3, [r7, #12]
 804c9dc:	2200      	movs	r2, #0
 804c9de:	761a      	strb	r2, [r3, #24]
      break;
 804c9e0:	e005      	b.n	804c9ee <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 804c9e2:	7dfb      	ldrb	r3, [r7, #23]
 804c9e4:	2b02      	cmp	r3, #2
 804c9e6:	d102      	bne.n	804c9ee <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 804c9e8:	68fb      	ldr	r3, [r7, #12]
 804c9ea:	2201      	movs	r2, #1
 804c9ec:	709a      	strb	r2, [r3, #2]
      break;
 804c9ee:	bf00      	nop
  }
  return status;
 804c9f0:	7dfb      	ldrb	r3, [r7, #23]
}
 804c9f2:	4618      	mov	r0, r3
 804c9f4:	3718      	adds	r7, #24
 804c9f6:	46bd      	mov	sp, r7
 804c9f8:	bd80      	pop	{r7, pc}
	...

0804c9fc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 804c9fc:	b580      	push	{r7, lr}
 804c9fe:	b086      	sub	sp, #24
 804ca00:	af02      	add	r7, sp, #8
 804ca02:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 804ca04:	2301      	movs	r3, #1
 804ca06:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804ca08:	2300      	movs	r3, #0
 804ca0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 804ca0c:	687b      	ldr	r3, [r7, #4]
 804ca0e:	7e1b      	ldrb	r3, [r3, #24]
 804ca10:	3b01      	subs	r3, #1
 804ca12:	2b0a      	cmp	r3, #10
 804ca14:	f200 8156 	bhi.w	804ccc4 <USBH_HandleControl+0x2c8>
 804ca18:	a201      	add	r2, pc, #4	; (adr r2, 804ca20 <USBH_HandleControl+0x24>)
 804ca1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804ca1e:	bf00      	nop
 804ca20:	0804ca4d 	.word	0x0804ca4d
 804ca24:	0804ca67 	.word	0x0804ca67
 804ca28:	0804cad1 	.word	0x0804cad1
 804ca2c:	0804caf7 	.word	0x0804caf7
 804ca30:	0804cb2f 	.word	0x0804cb2f
 804ca34:	0804cb59 	.word	0x0804cb59
 804ca38:	0804cbab 	.word	0x0804cbab
 804ca3c:	0804cbcd 	.word	0x0804cbcd
 804ca40:	0804cc09 	.word	0x0804cc09
 804ca44:	0804cc2f 	.word	0x0804cc2f
 804ca48:	0804cc6d 	.word	0x0804cc6d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 804ca4c:	687b      	ldr	r3, [r7, #4]
 804ca4e:	f103 0110 	add.w	r1, r3, #16
 804ca52:	687b      	ldr	r3, [r7, #4]
 804ca54:	795b      	ldrb	r3, [r3, #5]
 804ca56:	461a      	mov	r2, r3
 804ca58:	6878      	ldr	r0, [r7, #4]
 804ca5a:	f000 f943 	bl	804cce4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 804ca5e:	687b      	ldr	r3, [r7, #4]
 804ca60:	2202      	movs	r2, #2
 804ca62:	761a      	strb	r2, [r3, #24]
      break;
 804ca64:	e139      	b.n	804ccda <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804ca66:	687b      	ldr	r3, [r7, #4]
 804ca68:	795b      	ldrb	r3, [r3, #5]
 804ca6a:	4619      	mov	r1, r3
 804ca6c:	6878      	ldr	r0, [r7, #4]
 804ca6e:	f000 fccb 	bl	804d408 <USBH_LL_GetURBState>
 804ca72:	4603      	mov	r3, r0
 804ca74:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 804ca76:	7bbb      	ldrb	r3, [r7, #14]
 804ca78:	2b01      	cmp	r3, #1
 804ca7a:	d11e      	bne.n	804caba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 804ca7c:	687b      	ldr	r3, [r7, #4]
 804ca7e:	7c1b      	ldrb	r3, [r3, #16]
 804ca80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 804ca84:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 804ca86:	687b      	ldr	r3, [r7, #4]
 804ca88:	8adb      	ldrh	r3, [r3, #22]
 804ca8a:	2b00      	cmp	r3, #0
 804ca8c:	d00a      	beq.n	804caa4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 804ca8e:	7b7b      	ldrb	r3, [r7, #13]
 804ca90:	2b80      	cmp	r3, #128	; 0x80
 804ca92:	d103      	bne.n	804ca9c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 804ca94:	687b      	ldr	r3, [r7, #4]
 804ca96:	2203      	movs	r2, #3
 804ca98:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804ca9a:	e115      	b.n	804ccc8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 804ca9c:	687b      	ldr	r3, [r7, #4]
 804ca9e:	2205      	movs	r2, #5
 804caa0:	761a      	strb	r2, [r3, #24]
      break;
 804caa2:	e111      	b.n	804ccc8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 804caa4:	7b7b      	ldrb	r3, [r7, #13]
 804caa6:	2b80      	cmp	r3, #128	; 0x80
 804caa8:	d103      	bne.n	804cab2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 804caaa:	687b      	ldr	r3, [r7, #4]
 804caac:	2209      	movs	r2, #9
 804caae:	761a      	strb	r2, [r3, #24]
      break;
 804cab0:	e10a      	b.n	804ccc8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 804cab2:	687b      	ldr	r3, [r7, #4]
 804cab4:	2207      	movs	r2, #7
 804cab6:	761a      	strb	r2, [r3, #24]
      break;
 804cab8:	e106      	b.n	804ccc8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 804caba:	7bbb      	ldrb	r3, [r7, #14]
 804cabc:	2b04      	cmp	r3, #4
 804cabe:	d003      	beq.n	804cac8 <USBH_HandleControl+0xcc>
 804cac0:	7bbb      	ldrb	r3, [r7, #14]
 804cac2:	2b02      	cmp	r3, #2
 804cac4:	f040 8100 	bne.w	804ccc8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 804cac8:	687b      	ldr	r3, [r7, #4]
 804caca:	220b      	movs	r2, #11
 804cacc:	761a      	strb	r2, [r3, #24]
      break;
 804cace:	e0fb      	b.n	804ccc8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 804cad0:	687b      	ldr	r3, [r7, #4]
 804cad2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804cad6:	b29a      	uxth	r2, r3
 804cad8:	687b      	ldr	r3, [r7, #4]
 804cada:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 804cadc:	687b      	ldr	r3, [r7, #4]
 804cade:	6899      	ldr	r1, [r3, #8]
 804cae0:	687b      	ldr	r3, [r7, #4]
 804cae2:	899a      	ldrh	r2, [r3, #12]
 804cae4:	687b      	ldr	r3, [r7, #4]
 804cae6:	791b      	ldrb	r3, [r3, #4]
 804cae8:	6878      	ldr	r0, [r7, #4]
 804caea:	f000 f93a 	bl	804cd62 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 804caee:	687b      	ldr	r3, [r7, #4]
 804caf0:	2204      	movs	r2, #4
 804caf2:	761a      	strb	r2, [r3, #24]
      break;
 804caf4:	e0f1      	b.n	804ccda <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 804caf6:	687b      	ldr	r3, [r7, #4]
 804caf8:	791b      	ldrb	r3, [r3, #4]
 804cafa:	4619      	mov	r1, r3
 804cafc:	6878      	ldr	r0, [r7, #4]
 804cafe:	f000 fc83 	bl	804d408 <USBH_LL_GetURBState>
 804cb02:	4603      	mov	r3, r0
 804cb04:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 804cb06:	7bbb      	ldrb	r3, [r7, #14]
 804cb08:	2b01      	cmp	r3, #1
 804cb0a:	d102      	bne.n	804cb12 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 804cb0c:	687b      	ldr	r3, [r7, #4]
 804cb0e:	2209      	movs	r2, #9
 804cb10:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 804cb12:	7bbb      	ldrb	r3, [r7, #14]
 804cb14:	2b05      	cmp	r3, #5
 804cb16:	d102      	bne.n	804cb1e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 804cb18:	2303      	movs	r3, #3
 804cb1a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804cb1c:	e0d6      	b.n	804cccc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 804cb1e:	7bbb      	ldrb	r3, [r7, #14]
 804cb20:	2b04      	cmp	r3, #4
 804cb22:	f040 80d3 	bne.w	804cccc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 804cb26:	687b      	ldr	r3, [r7, #4]
 804cb28:	220b      	movs	r2, #11
 804cb2a:	761a      	strb	r2, [r3, #24]
      break;
 804cb2c:	e0ce      	b.n	804cccc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 804cb2e:	687b      	ldr	r3, [r7, #4]
 804cb30:	6899      	ldr	r1, [r3, #8]
 804cb32:	687b      	ldr	r3, [r7, #4]
 804cb34:	899a      	ldrh	r2, [r3, #12]
 804cb36:	687b      	ldr	r3, [r7, #4]
 804cb38:	795b      	ldrb	r3, [r3, #5]
 804cb3a:	2001      	movs	r0, #1
 804cb3c:	9000      	str	r0, [sp, #0]
 804cb3e:	6878      	ldr	r0, [r7, #4]
 804cb40:	f000 f8ea 	bl	804cd18 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 804cb44:	687b      	ldr	r3, [r7, #4]
 804cb46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804cb4a:	b29a      	uxth	r2, r3
 804cb4c:	687b      	ldr	r3, [r7, #4]
 804cb4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 804cb50:	687b      	ldr	r3, [r7, #4]
 804cb52:	2206      	movs	r2, #6
 804cb54:	761a      	strb	r2, [r3, #24]
      break;
 804cb56:	e0c0      	b.n	804ccda <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804cb58:	687b      	ldr	r3, [r7, #4]
 804cb5a:	795b      	ldrb	r3, [r3, #5]
 804cb5c:	4619      	mov	r1, r3
 804cb5e:	6878      	ldr	r0, [r7, #4]
 804cb60:	f000 fc52 	bl	804d408 <USBH_LL_GetURBState>
 804cb64:	4603      	mov	r3, r0
 804cb66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 804cb68:	7bbb      	ldrb	r3, [r7, #14]
 804cb6a:	2b01      	cmp	r3, #1
 804cb6c:	d103      	bne.n	804cb76 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 804cb6e:	687b      	ldr	r3, [r7, #4]
 804cb70:	2207      	movs	r2, #7
 804cb72:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804cb74:	e0ac      	b.n	804ccd0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 804cb76:	7bbb      	ldrb	r3, [r7, #14]
 804cb78:	2b05      	cmp	r3, #5
 804cb7a:	d105      	bne.n	804cb88 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 804cb7c:	687b      	ldr	r3, [r7, #4]
 804cb7e:	220c      	movs	r2, #12
 804cb80:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 804cb82:	2303      	movs	r3, #3
 804cb84:	73fb      	strb	r3, [r7, #15]
      break;
 804cb86:	e0a3      	b.n	804ccd0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 804cb88:	7bbb      	ldrb	r3, [r7, #14]
 804cb8a:	2b02      	cmp	r3, #2
 804cb8c:	d103      	bne.n	804cb96 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 804cb8e:	687b      	ldr	r3, [r7, #4]
 804cb90:	2205      	movs	r2, #5
 804cb92:	761a      	strb	r2, [r3, #24]
      break;
 804cb94:	e09c      	b.n	804ccd0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 804cb96:	7bbb      	ldrb	r3, [r7, #14]
 804cb98:	2b04      	cmp	r3, #4
 804cb9a:	f040 8099 	bne.w	804ccd0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 804cb9e:	687b      	ldr	r3, [r7, #4]
 804cba0:	220b      	movs	r2, #11
 804cba2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 804cba4:	2302      	movs	r3, #2
 804cba6:	73fb      	strb	r3, [r7, #15]
      break;
 804cba8:	e092      	b.n	804ccd0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 804cbaa:	687b      	ldr	r3, [r7, #4]
 804cbac:	791b      	ldrb	r3, [r3, #4]
 804cbae:	2200      	movs	r2, #0
 804cbb0:	2100      	movs	r1, #0
 804cbb2:	6878      	ldr	r0, [r7, #4]
 804cbb4:	f000 f8d5 	bl	804cd62 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 804cbb8:	687b      	ldr	r3, [r7, #4]
 804cbba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804cbbe:	b29a      	uxth	r2, r3
 804cbc0:	687b      	ldr	r3, [r7, #4]
 804cbc2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 804cbc4:	687b      	ldr	r3, [r7, #4]
 804cbc6:	2208      	movs	r2, #8
 804cbc8:	761a      	strb	r2, [r3, #24]

      break;
 804cbca:	e086      	b.n	804ccda <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 804cbcc:	687b      	ldr	r3, [r7, #4]
 804cbce:	791b      	ldrb	r3, [r3, #4]
 804cbd0:	4619      	mov	r1, r3
 804cbd2:	6878      	ldr	r0, [r7, #4]
 804cbd4:	f000 fc18 	bl	804d408 <USBH_LL_GetURBState>
 804cbd8:	4603      	mov	r3, r0
 804cbda:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 804cbdc:	7bbb      	ldrb	r3, [r7, #14]
 804cbde:	2b01      	cmp	r3, #1
 804cbe0:	d105      	bne.n	804cbee <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 804cbe2:	687b      	ldr	r3, [r7, #4]
 804cbe4:	220d      	movs	r2, #13
 804cbe6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 804cbe8:	2300      	movs	r3, #0
 804cbea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804cbec:	e072      	b.n	804ccd4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 804cbee:	7bbb      	ldrb	r3, [r7, #14]
 804cbf0:	2b04      	cmp	r3, #4
 804cbf2:	d103      	bne.n	804cbfc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 804cbf4:	687b      	ldr	r3, [r7, #4]
 804cbf6:	220b      	movs	r2, #11
 804cbf8:	761a      	strb	r2, [r3, #24]
      break;
 804cbfa:	e06b      	b.n	804ccd4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 804cbfc:	7bbb      	ldrb	r3, [r7, #14]
 804cbfe:	2b05      	cmp	r3, #5
 804cc00:	d168      	bne.n	804ccd4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 804cc02:	2303      	movs	r3, #3
 804cc04:	73fb      	strb	r3, [r7, #15]
      break;
 804cc06:	e065      	b.n	804ccd4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 804cc08:	687b      	ldr	r3, [r7, #4]
 804cc0a:	795b      	ldrb	r3, [r3, #5]
 804cc0c:	2201      	movs	r2, #1
 804cc0e:	9200      	str	r2, [sp, #0]
 804cc10:	2200      	movs	r2, #0
 804cc12:	2100      	movs	r1, #0
 804cc14:	6878      	ldr	r0, [r7, #4]
 804cc16:	f000 f87f 	bl	804cd18 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 804cc1a:	687b      	ldr	r3, [r7, #4]
 804cc1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804cc20:	b29a      	uxth	r2, r3
 804cc22:	687b      	ldr	r3, [r7, #4]
 804cc24:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 804cc26:	687b      	ldr	r3, [r7, #4]
 804cc28:	220a      	movs	r2, #10
 804cc2a:	761a      	strb	r2, [r3, #24]
      break;
 804cc2c:	e055      	b.n	804ccda <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804cc2e:	687b      	ldr	r3, [r7, #4]
 804cc30:	795b      	ldrb	r3, [r3, #5]
 804cc32:	4619      	mov	r1, r3
 804cc34:	6878      	ldr	r0, [r7, #4]
 804cc36:	f000 fbe7 	bl	804d408 <USBH_LL_GetURBState>
 804cc3a:	4603      	mov	r3, r0
 804cc3c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 804cc3e:	7bbb      	ldrb	r3, [r7, #14]
 804cc40:	2b01      	cmp	r3, #1
 804cc42:	d105      	bne.n	804cc50 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 804cc44:	2300      	movs	r3, #0
 804cc46:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 804cc48:	687b      	ldr	r3, [r7, #4]
 804cc4a:	220d      	movs	r2, #13
 804cc4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804cc4e:	e043      	b.n	804ccd8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 804cc50:	7bbb      	ldrb	r3, [r7, #14]
 804cc52:	2b02      	cmp	r3, #2
 804cc54:	d103      	bne.n	804cc5e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 804cc56:	687b      	ldr	r3, [r7, #4]
 804cc58:	2209      	movs	r2, #9
 804cc5a:	761a      	strb	r2, [r3, #24]
      break;
 804cc5c:	e03c      	b.n	804ccd8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 804cc5e:	7bbb      	ldrb	r3, [r7, #14]
 804cc60:	2b04      	cmp	r3, #4
 804cc62:	d139      	bne.n	804ccd8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 804cc64:	687b      	ldr	r3, [r7, #4]
 804cc66:	220b      	movs	r2, #11
 804cc68:	761a      	strb	r2, [r3, #24]
      break;
 804cc6a:	e035      	b.n	804ccd8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 804cc6c:	687b      	ldr	r3, [r7, #4]
 804cc6e:	7e5b      	ldrb	r3, [r3, #25]
 804cc70:	3301      	adds	r3, #1
 804cc72:	b2da      	uxtb	r2, r3
 804cc74:	687b      	ldr	r3, [r7, #4]
 804cc76:	765a      	strb	r2, [r3, #25]
 804cc78:	687b      	ldr	r3, [r7, #4]
 804cc7a:	7e5b      	ldrb	r3, [r3, #25]
 804cc7c:	2b02      	cmp	r3, #2
 804cc7e:	d806      	bhi.n	804cc8e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 804cc80:	687b      	ldr	r3, [r7, #4]
 804cc82:	2201      	movs	r2, #1
 804cc84:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 804cc86:	687b      	ldr	r3, [r7, #4]
 804cc88:	2201      	movs	r2, #1
 804cc8a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 804cc8c:	e025      	b.n	804ccda <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 804cc8e:	687b      	ldr	r3, [r7, #4]
 804cc90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804cc94:	2106      	movs	r1, #6
 804cc96:	6878      	ldr	r0, [r7, #4]
 804cc98:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 804cc9a:	687b      	ldr	r3, [r7, #4]
 804cc9c:	2200      	movs	r2, #0
 804cc9e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804cca0:	687b      	ldr	r3, [r7, #4]
 804cca2:	795b      	ldrb	r3, [r3, #5]
 804cca4:	4619      	mov	r1, r3
 804cca6:	6878      	ldr	r0, [r7, #4]
 804cca8:	f000 f90c 	bl	804cec4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804ccac:	687b      	ldr	r3, [r7, #4]
 804ccae:	791b      	ldrb	r3, [r3, #4]
 804ccb0:	4619      	mov	r1, r3
 804ccb2:	6878      	ldr	r0, [r7, #4]
 804ccb4:	f000 f906 	bl	804cec4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 804ccb8:	687b      	ldr	r3, [r7, #4]
 804ccba:	2200      	movs	r2, #0
 804ccbc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 804ccbe:	2302      	movs	r3, #2
 804ccc0:	73fb      	strb	r3, [r7, #15]
      break;
 804ccc2:	e00a      	b.n	804ccda <USBH_HandleControl+0x2de>

    default:
      break;
 804ccc4:	bf00      	nop
 804ccc6:	e008      	b.n	804ccda <USBH_HandleControl+0x2de>
      break;
 804ccc8:	bf00      	nop
 804ccca:	e006      	b.n	804ccda <USBH_HandleControl+0x2de>
      break;
 804cccc:	bf00      	nop
 804ccce:	e004      	b.n	804ccda <USBH_HandleControl+0x2de>
      break;
 804ccd0:	bf00      	nop
 804ccd2:	e002      	b.n	804ccda <USBH_HandleControl+0x2de>
      break;
 804ccd4:	bf00      	nop
 804ccd6:	e000      	b.n	804ccda <USBH_HandleControl+0x2de>
      break;
 804ccd8:	bf00      	nop
  }

  return status;
 804ccda:	7bfb      	ldrb	r3, [r7, #15]
}
 804ccdc:	4618      	mov	r0, r3
 804ccde:	3710      	adds	r7, #16
 804cce0:	46bd      	mov	sp, r7
 804cce2:	bd80      	pop	{r7, pc}

0804cce4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 804cce4:	b580      	push	{r7, lr}
 804cce6:	b088      	sub	sp, #32
 804cce8:	af04      	add	r7, sp, #16
 804ccea:	60f8      	str	r0, [r7, #12]
 804ccec:	60b9      	str	r1, [r7, #8]
 804ccee:	4613      	mov	r3, r2
 804ccf0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804ccf2:	79f9      	ldrb	r1, [r7, #7]
 804ccf4:	2300      	movs	r3, #0
 804ccf6:	9303      	str	r3, [sp, #12]
 804ccf8:	2308      	movs	r3, #8
 804ccfa:	9302      	str	r3, [sp, #8]
 804ccfc:	68bb      	ldr	r3, [r7, #8]
 804ccfe:	9301      	str	r3, [sp, #4]
 804cd00:	2300      	movs	r3, #0
 804cd02:	9300      	str	r3, [sp, #0]
 804cd04:	2300      	movs	r3, #0
 804cd06:	2200      	movs	r2, #0
 804cd08:	68f8      	ldr	r0, [r7, #12]
 804cd0a:	f000 fb4c 	bl	804d3a6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 804cd0e:	2300      	movs	r3, #0
}
 804cd10:	4618      	mov	r0, r3
 804cd12:	3710      	adds	r7, #16
 804cd14:	46bd      	mov	sp, r7
 804cd16:	bd80      	pop	{r7, pc}

0804cd18 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 804cd18:	b580      	push	{r7, lr}
 804cd1a:	b088      	sub	sp, #32
 804cd1c:	af04      	add	r7, sp, #16
 804cd1e:	60f8      	str	r0, [r7, #12]
 804cd20:	60b9      	str	r1, [r7, #8]
 804cd22:	4611      	mov	r1, r2
 804cd24:	461a      	mov	r2, r3
 804cd26:	460b      	mov	r3, r1
 804cd28:	80fb      	strh	r3, [r7, #6]
 804cd2a:	4613      	mov	r3, r2
 804cd2c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 804cd2e:	68fb      	ldr	r3, [r7, #12]
 804cd30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804cd34:	2b00      	cmp	r3, #0
 804cd36:	d001      	beq.n	804cd3c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 804cd38:	2300      	movs	r3, #0
 804cd3a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804cd3c:	7979      	ldrb	r1, [r7, #5]
 804cd3e:	7e3b      	ldrb	r3, [r7, #24]
 804cd40:	9303      	str	r3, [sp, #12]
 804cd42:	88fb      	ldrh	r3, [r7, #6]
 804cd44:	9302      	str	r3, [sp, #8]
 804cd46:	68bb      	ldr	r3, [r7, #8]
 804cd48:	9301      	str	r3, [sp, #4]
 804cd4a:	2301      	movs	r3, #1
 804cd4c:	9300      	str	r3, [sp, #0]
 804cd4e:	2300      	movs	r3, #0
 804cd50:	2200      	movs	r2, #0
 804cd52:	68f8      	ldr	r0, [r7, #12]
 804cd54:	f000 fb27 	bl	804d3a6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 804cd58:	2300      	movs	r3, #0
}
 804cd5a:	4618      	mov	r0, r3
 804cd5c:	3710      	adds	r7, #16
 804cd5e:	46bd      	mov	sp, r7
 804cd60:	bd80      	pop	{r7, pc}

0804cd62 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 804cd62:	b580      	push	{r7, lr}
 804cd64:	b088      	sub	sp, #32
 804cd66:	af04      	add	r7, sp, #16
 804cd68:	60f8      	str	r0, [r7, #12]
 804cd6a:	60b9      	str	r1, [r7, #8]
 804cd6c:	4611      	mov	r1, r2
 804cd6e:	461a      	mov	r2, r3
 804cd70:	460b      	mov	r3, r1
 804cd72:	80fb      	strh	r3, [r7, #6]
 804cd74:	4613      	mov	r3, r2
 804cd76:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804cd78:	7979      	ldrb	r1, [r7, #5]
 804cd7a:	2300      	movs	r3, #0
 804cd7c:	9303      	str	r3, [sp, #12]
 804cd7e:	88fb      	ldrh	r3, [r7, #6]
 804cd80:	9302      	str	r3, [sp, #8]
 804cd82:	68bb      	ldr	r3, [r7, #8]
 804cd84:	9301      	str	r3, [sp, #4]
 804cd86:	2301      	movs	r3, #1
 804cd88:	9300      	str	r3, [sp, #0]
 804cd8a:	2300      	movs	r3, #0
 804cd8c:	2201      	movs	r2, #1
 804cd8e:	68f8      	ldr	r0, [r7, #12]
 804cd90:	f000 fb09 	bl	804d3a6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 804cd94:	2300      	movs	r3, #0

}
 804cd96:	4618      	mov	r0, r3
 804cd98:	3710      	adds	r7, #16
 804cd9a:	46bd      	mov	sp, r7
 804cd9c:	bd80      	pop	{r7, pc}

0804cd9e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 804cd9e:	b580      	push	{r7, lr}
 804cda0:	b088      	sub	sp, #32
 804cda2:	af04      	add	r7, sp, #16
 804cda4:	60f8      	str	r0, [r7, #12]
 804cda6:	60b9      	str	r1, [r7, #8]
 804cda8:	4611      	mov	r1, r2
 804cdaa:	461a      	mov	r2, r3
 804cdac:	460b      	mov	r3, r1
 804cdae:	80fb      	strh	r3, [r7, #6]
 804cdb0:	4613      	mov	r3, r2
 804cdb2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 804cdb4:	68fb      	ldr	r3, [r7, #12]
 804cdb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804cdba:	2b00      	cmp	r3, #0
 804cdbc:	d001      	beq.n	804cdc2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 804cdbe:	2300      	movs	r3, #0
 804cdc0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804cdc2:	7979      	ldrb	r1, [r7, #5]
 804cdc4:	7e3b      	ldrb	r3, [r7, #24]
 804cdc6:	9303      	str	r3, [sp, #12]
 804cdc8:	88fb      	ldrh	r3, [r7, #6]
 804cdca:	9302      	str	r3, [sp, #8]
 804cdcc:	68bb      	ldr	r3, [r7, #8]
 804cdce:	9301      	str	r3, [sp, #4]
 804cdd0:	2301      	movs	r3, #1
 804cdd2:	9300      	str	r3, [sp, #0]
 804cdd4:	2302      	movs	r3, #2
 804cdd6:	2200      	movs	r2, #0
 804cdd8:	68f8      	ldr	r0, [r7, #12]
 804cdda:	f000 fae4 	bl	804d3a6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 804cdde:	2300      	movs	r3, #0
}
 804cde0:	4618      	mov	r0, r3
 804cde2:	3710      	adds	r7, #16
 804cde4:	46bd      	mov	sp, r7
 804cde6:	bd80      	pop	{r7, pc}

0804cde8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 804cde8:	b580      	push	{r7, lr}
 804cdea:	b088      	sub	sp, #32
 804cdec:	af04      	add	r7, sp, #16
 804cdee:	60f8      	str	r0, [r7, #12]
 804cdf0:	60b9      	str	r1, [r7, #8]
 804cdf2:	4611      	mov	r1, r2
 804cdf4:	461a      	mov	r2, r3
 804cdf6:	460b      	mov	r3, r1
 804cdf8:	80fb      	strh	r3, [r7, #6]
 804cdfa:	4613      	mov	r3, r2
 804cdfc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804cdfe:	7979      	ldrb	r1, [r7, #5]
 804ce00:	2300      	movs	r3, #0
 804ce02:	9303      	str	r3, [sp, #12]
 804ce04:	88fb      	ldrh	r3, [r7, #6]
 804ce06:	9302      	str	r3, [sp, #8]
 804ce08:	68bb      	ldr	r3, [r7, #8]
 804ce0a:	9301      	str	r3, [sp, #4]
 804ce0c:	2301      	movs	r3, #1
 804ce0e:	9300      	str	r3, [sp, #0]
 804ce10:	2302      	movs	r3, #2
 804ce12:	2201      	movs	r2, #1
 804ce14:	68f8      	ldr	r0, [r7, #12]
 804ce16:	f000 fac6 	bl	804d3a6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 804ce1a:	2300      	movs	r3, #0
}
 804ce1c:	4618      	mov	r0, r3
 804ce1e:	3710      	adds	r7, #16
 804ce20:	46bd      	mov	sp, r7
 804ce22:	bd80      	pop	{r7, pc}

0804ce24 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 804ce24:	b580      	push	{r7, lr}
 804ce26:	b086      	sub	sp, #24
 804ce28:	af04      	add	r7, sp, #16
 804ce2a:	6078      	str	r0, [r7, #4]
 804ce2c:	4608      	mov	r0, r1
 804ce2e:	4611      	mov	r1, r2
 804ce30:	461a      	mov	r2, r3
 804ce32:	4603      	mov	r3, r0
 804ce34:	70fb      	strb	r3, [r7, #3]
 804ce36:	460b      	mov	r3, r1
 804ce38:	70bb      	strb	r3, [r7, #2]
 804ce3a:	4613      	mov	r3, r2
 804ce3c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 804ce3e:	7878      	ldrb	r0, [r7, #1]
 804ce40:	78ba      	ldrb	r2, [r7, #2]
 804ce42:	78f9      	ldrb	r1, [r7, #3]
 804ce44:	8b3b      	ldrh	r3, [r7, #24]
 804ce46:	9302      	str	r3, [sp, #8]
 804ce48:	7d3b      	ldrb	r3, [r7, #20]
 804ce4a:	9301      	str	r3, [sp, #4]
 804ce4c:	7c3b      	ldrb	r3, [r7, #16]
 804ce4e:	9300      	str	r3, [sp, #0]
 804ce50:	4603      	mov	r3, r0
 804ce52:	6878      	ldr	r0, [r7, #4]
 804ce54:	f000 fa59 	bl	804d30a <USBH_LL_OpenPipe>

  return USBH_OK;
 804ce58:	2300      	movs	r3, #0
}
 804ce5a:	4618      	mov	r0, r3
 804ce5c:	3708      	adds	r7, #8
 804ce5e:	46bd      	mov	sp, r7
 804ce60:	bd80      	pop	{r7, pc}

0804ce62 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 804ce62:	b580      	push	{r7, lr}
 804ce64:	b082      	sub	sp, #8
 804ce66:	af00      	add	r7, sp, #0
 804ce68:	6078      	str	r0, [r7, #4]
 804ce6a:	460b      	mov	r3, r1
 804ce6c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 804ce6e:	78fb      	ldrb	r3, [r7, #3]
 804ce70:	4619      	mov	r1, r3
 804ce72:	6878      	ldr	r0, [r7, #4]
 804ce74:	f000 fa78 	bl	804d368 <USBH_LL_ClosePipe>

  return USBH_OK;
 804ce78:	2300      	movs	r3, #0
}
 804ce7a:	4618      	mov	r0, r3
 804ce7c:	3708      	adds	r7, #8
 804ce7e:	46bd      	mov	sp, r7
 804ce80:	bd80      	pop	{r7, pc}

0804ce82 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 804ce82:	b580      	push	{r7, lr}
 804ce84:	b084      	sub	sp, #16
 804ce86:	af00      	add	r7, sp, #0
 804ce88:	6078      	str	r0, [r7, #4]
 804ce8a:	460b      	mov	r3, r1
 804ce8c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 804ce8e:	6878      	ldr	r0, [r7, #4]
 804ce90:	f000 f836 	bl	804cf00 <USBH_GetFreePipe>
 804ce94:	4603      	mov	r3, r0
 804ce96:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 804ce98:	89fb      	ldrh	r3, [r7, #14]
 804ce9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804ce9e:	4293      	cmp	r3, r2
 804cea0:	d00a      	beq.n	804ceb8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 804cea2:	78fa      	ldrb	r2, [r7, #3]
 804cea4:	89fb      	ldrh	r3, [r7, #14]
 804cea6:	f003 030f 	and.w	r3, r3, #15
 804ceaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 804ceae:	6879      	ldr	r1, [r7, #4]
 804ceb0:	33e0      	adds	r3, #224	; 0xe0
 804ceb2:	009b      	lsls	r3, r3, #2
 804ceb4:	440b      	add	r3, r1
 804ceb6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 804ceb8:	89fb      	ldrh	r3, [r7, #14]
 804ceba:	b2db      	uxtb	r3, r3
}
 804cebc:	4618      	mov	r0, r3
 804cebe:	3710      	adds	r7, #16
 804cec0:	46bd      	mov	sp, r7
 804cec2:	bd80      	pop	{r7, pc}

0804cec4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 804cec4:	b480      	push	{r7}
 804cec6:	b083      	sub	sp, #12
 804cec8:	af00      	add	r7, sp, #0
 804ceca:	6078      	str	r0, [r7, #4]
 804cecc:	460b      	mov	r3, r1
 804cece:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 804ced0:	78fb      	ldrb	r3, [r7, #3]
 804ced2:	2b0f      	cmp	r3, #15
 804ced4:	d80d      	bhi.n	804cef2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 804ced6:	78fb      	ldrb	r3, [r7, #3]
 804ced8:	687a      	ldr	r2, [r7, #4]
 804ceda:	33e0      	adds	r3, #224	; 0xe0
 804cedc:	009b      	lsls	r3, r3, #2
 804cede:	4413      	add	r3, r2
 804cee0:	685a      	ldr	r2, [r3, #4]
 804cee2:	78fb      	ldrb	r3, [r7, #3]
 804cee4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 804cee8:	6879      	ldr	r1, [r7, #4]
 804ceea:	33e0      	adds	r3, #224	; 0xe0
 804ceec:	009b      	lsls	r3, r3, #2
 804ceee:	440b      	add	r3, r1
 804cef0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 804cef2:	2300      	movs	r3, #0
}
 804cef4:	4618      	mov	r0, r3
 804cef6:	370c      	adds	r7, #12
 804cef8:	46bd      	mov	sp, r7
 804cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cefe:	4770      	bx	lr

0804cf00 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 804cf00:	b480      	push	{r7}
 804cf02:	b085      	sub	sp, #20
 804cf04:	af00      	add	r7, sp, #0
 804cf06:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 804cf08:	2300      	movs	r3, #0
 804cf0a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 804cf0c:	2300      	movs	r3, #0
 804cf0e:	73fb      	strb	r3, [r7, #15]
 804cf10:	e00f      	b.n	804cf32 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 804cf12:	7bfb      	ldrb	r3, [r7, #15]
 804cf14:	687a      	ldr	r2, [r7, #4]
 804cf16:	33e0      	adds	r3, #224	; 0xe0
 804cf18:	009b      	lsls	r3, r3, #2
 804cf1a:	4413      	add	r3, r2
 804cf1c:	685b      	ldr	r3, [r3, #4]
 804cf1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804cf22:	2b00      	cmp	r3, #0
 804cf24:	d102      	bne.n	804cf2c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 804cf26:	7bfb      	ldrb	r3, [r7, #15]
 804cf28:	b29b      	uxth	r3, r3
 804cf2a:	e007      	b.n	804cf3c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 804cf2c:	7bfb      	ldrb	r3, [r7, #15]
 804cf2e:	3301      	adds	r3, #1
 804cf30:	73fb      	strb	r3, [r7, #15]
 804cf32:	7bfb      	ldrb	r3, [r7, #15]
 804cf34:	2b0f      	cmp	r3, #15
 804cf36:	d9ec      	bls.n	804cf12 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 804cf38:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 804cf3c:	4618      	mov	r0, r3
 804cf3e:	3714      	adds	r7, #20
 804cf40:	46bd      	mov	sp, r7
 804cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cf46:	4770      	bx	lr

0804cf48 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 804cf48:	b580      	push	{r7, lr}
 804cf4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 804cf4c:	2200      	movs	r2, #0
 804cf4e:	490e      	ldr	r1, [pc, #56]	; (804cf88 <MX_USB_HOST_Init+0x40>)
 804cf50:	480e      	ldr	r0, [pc, #56]	; (804cf8c <MX_USB_HOST_Init+0x44>)
 804cf52:	f7fe fba7 	bl	804b6a4 <USBH_Init>
 804cf56:	4603      	mov	r3, r0
 804cf58:	2b00      	cmp	r3, #0
 804cf5a:	d001      	beq.n	804cf60 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 804cf5c:	f7f3 ffda 	bl	8040f14 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 804cf60:	490b      	ldr	r1, [pc, #44]	; (804cf90 <MX_USB_HOST_Init+0x48>)
 804cf62:	480a      	ldr	r0, [pc, #40]	; (804cf8c <MX_USB_HOST_Init+0x44>)
 804cf64:	f7fe fc2c 	bl	804b7c0 <USBH_RegisterClass>
 804cf68:	4603      	mov	r3, r0
 804cf6a:	2b00      	cmp	r3, #0
 804cf6c:	d001      	beq.n	804cf72 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 804cf6e:	f7f3 ffd1 	bl	8040f14 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 804cf72:	4806      	ldr	r0, [pc, #24]	; (804cf8c <MX_USB_HOST_Init+0x44>)
 804cf74:	f7fe fcb0 	bl	804b8d8 <USBH_Start>
 804cf78:	4603      	mov	r3, r0
 804cf7a:	2b00      	cmp	r3, #0
 804cf7c:	d001      	beq.n	804cf82 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 804cf7e:	f7f3 ffc9 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 804cf82:	bf00      	nop
 804cf84:	bd80      	pop	{r7, pc}
 804cf86:	bf00      	nop
 804cf88:	0804cfa9 	.word	0x0804cfa9
 804cf8c:	20000ae4 	.word	0x20000ae4
 804cf90:	2000005c 	.word	0x2000005c

0804cf94 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 804cf94:	b580      	push	{r7, lr}
 804cf96:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 804cf98:	4802      	ldr	r0, [pc, #8]	; (804cfa4 <MX_USB_HOST_Process+0x10>)
 804cf9a:	f7fe fcad 	bl	804b8f8 <USBH_Process>
}
 804cf9e:	bf00      	nop
 804cfa0:	bd80      	pop	{r7, pc}
 804cfa2:	bf00      	nop
 804cfa4:	20000ae4 	.word	0x20000ae4

0804cfa8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 804cfa8:	b480      	push	{r7}
 804cfaa:	b083      	sub	sp, #12
 804cfac:	af00      	add	r7, sp, #0
 804cfae:	6078      	str	r0, [r7, #4]
 804cfb0:	460b      	mov	r3, r1
 804cfb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 804cfb4:	78fb      	ldrb	r3, [r7, #3]
 804cfb6:	3b01      	subs	r3, #1
 804cfb8:	2b04      	cmp	r3, #4
 804cfba:	d819      	bhi.n	804cff0 <USBH_UserProcess+0x48>
 804cfbc:	a201      	add	r2, pc, #4	; (adr r2, 804cfc4 <USBH_UserProcess+0x1c>)
 804cfbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804cfc2:	bf00      	nop
 804cfc4:	0804cff1 	.word	0x0804cff1
 804cfc8:	0804cfe1 	.word	0x0804cfe1
 804cfcc:	0804cff1 	.word	0x0804cff1
 804cfd0:	0804cfe9 	.word	0x0804cfe9
 804cfd4:	0804cfd9 	.word	0x0804cfd9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 804cfd8:	4b09      	ldr	r3, [pc, #36]	; (804d000 <USBH_UserProcess+0x58>)
 804cfda:	2203      	movs	r2, #3
 804cfdc:	701a      	strb	r2, [r3, #0]
  break;
 804cfde:	e008      	b.n	804cff2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 804cfe0:	4b07      	ldr	r3, [pc, #28]	; (804d000 <USBH_UserProcess+0x58>)
 804cfe2:	2202      	movs	r2, #2
 804cfe4:	701a      	strb	r2, [r3, #0]
  break;
 804cfe6:	e004      	b.n	804cff2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 804cfe8:	4b05      	ldr	r3, [pc, #20]	; (804d000 <USBH_UserProcess+0x58>)
 804cfea:	2201      	movs	r2, #1
 804cfec:	701a      	strb	r2, [r3, #0]
  break;
 804cfee:	e000      	b.n	804cff2 <USBH_UserProcess+0x4a>

  default:
  break;
 804cff0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 804cff2:	bf00      	nop
 804cff4:	370c      	adds	r7, #12
 804cff6:	46bd      	mov	sp, r7
 804cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cffc:	4770      	bx	lr
 804cffe:	bf00      	nop
 804d000:	20000ebc 	.word	0x20000ebc

0804d004 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 804d004:	b580      	push	{r7, lr}
 804d006:	b08a      	sub	sp, #40	; 0x28
 804d008:	af00      	add	r7, sp, #0
 804d00a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804d00c:	f107 0314 	add.w	r3, r7, #20
 804d010:	2200      	movs	r2, #0
 804d012:	601a      	str	r2, [r3, #0]
 804d014:	605a      	str	r2, [r3, #4]
 804d016:	609a      	str	r2, [r3, #8]
 804d018:	60da      	str	r2, [r3, #12]
 804d01a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 804d01c:	687b      	ldr	r3, [r7, #4]
 804d01e:	681b      	ldr	r3, [r3, #0]
 804d020:	4a24      	ldr	r2, [pc, #144]	; (804d0b4 <HAL_HCD_MspInit+0xb0>)
 804d022:	4293      	cmp	r3, r2
 804d024:	d141      	bne.n	804d0aa <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 804d026:	2300      	movs	r3, #0
 804d028:	613b      	str	r3, [r7, #16]
 804d02a:	4b23      	ldr	r3, [pc, #140]	; (804d0b8 <HAL_HCD_MspInit+0xb4>)
 804d02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804d02e:	4a22      	ldr	r2, [pc, #136]	; (804d0b8 <HAL_HCD_MspInit+0xb4>)
 804d030:	f043 0302 	orr.w	r3, r3, #2
 804d034:	6313      	str	r3, [r2, #48]	; 0x30
 804d036:	4b20      	ldr	r3, [pc, #128]	; (804d0b8 <HAL_HCD_MspInit+0xb4>)
 804d038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804d03a:	f003 0302 	and.w	r3, r3, #2
 804d03e:	613b      	str	r3, [r7, #16]
 804d040:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 804d042:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 804d046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804d048:	2302      	movs	r3, #2
 804d04a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804d04c:	2300      	movs	r3, #0
 804d04e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804d050:	2300      	movs	r3, #0
 804d052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 804d054:	230c      	movs	r3, #12
 804d056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804d058:	f107 0314 	add.w	r3, r7, #20
 804d05c:	4619      	mov	r1, r3
 804d05e:	4817      	ldr	r0, [pc, #92]	; (804d0bc <HAL_HCD_MspInit+0xb8>)
 804d060:	f7f7 fbe0 	bl	8044824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 804d064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 804d068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 804d06a:	2300      	movs	r3, #0
 804d06c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804d06e:	2300      	movs	r3, #0
 804d070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 804d072:	f107 0314 	add.w	r3, r7, #20
 804d076:	4619      	mov	r1, r3
 804d078:	4810      	ldr	r0, [pc, #64]	; (804d0bc <HAL_HCD_MspInit+0xb8>)
 804d07a:	f7f7 fbd3 	bl	8044824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 804d07e:	2300      	movs	r3, #0
 804d080:	60fb      	str	r3, [r7, #12]
 804d082:	4b0d      	ldr	r3, [pc, #52]	; (804d0b8 <HAL_HCD_MspInit+0xb4>)
 804d084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804d086:	4a0c      	ldr	r2, [pc, #48]	; (804d0b8 <HAL_HCD_MspInit+0xb4>)
 804d088:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 804d08c:	6313      	str	r3, [r2, #48]	; 0x30
 804d08e:	4b0a      	ldr	r3, [pc, #40]	; (804d0b8 <HAL_HCD_MspInit+0xb4>)
 804d090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804d092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804d096:	60fb      	str	r3, [r7, #12]
 804d098:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 804d09a:	2200      	movs	r2, #0
 804d09c:	2100      	movs	r1, #0
 804d09e:	204d      	movs	r0, #77	; 0x4d
 804d0a0:	f7f6 fb1a 	bl	80436d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 804d0a4:	204d      	movs	r0, #77	; 0x4d
 804d0a6:	f7f6 fb33 	bl	8043710 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 804d0aa:	bf00      	nop
 804d0ac:	3728      	adds	r7, #40	; 0x28
 804d0ae:	46bd      	mov	sp, r7
 804d0b0:	bd80      	pop	{r7, pc}
 804d0b2:	bf00      	nop
 804d0b4:	40040000 	.word	0x40040000
 804d0b8:	40023800 	.word	0x40023800
 804d0bc:	40020400 	.word	0x40020400

0804d0c0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 804d0c0:	b580      	push	{r7, lr}
 804d0c2:	b082      	sub	sp, #8
 804d0c4:	af00      	add	r7, sp, #0
 804d0c6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 804d0c8:	687b      	ldr	r3, [r7, #4]
 804d0ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804d0ce:	4618      	mov	r0, r3
 804d0d0:	f7fe fff1 	bl	804c0b6 <USBH_LL_IncTimer>
}
 804d0d4:	bf00      	nop
 804d0d6:	3708      	adds	r7, #8
 804d0d8:	46bd      	mov	sp, r7
 804d0da:	bd80      	pop	{r7, pc}

0804d0dc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 804d0dc:	b580      	push	{r7, lr}
 804d0de:	b082      	sub	sp, #8
 804d0e0:	af00      	add	r7, sp, #0
 804d0e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 804d0e4:	687b      	ldr	r3, [r7, #4]
 804d0e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804d0ea:	4618      	mov	r0, r3
 804d0ec:	f7ff f829 	bl	804c142 <USBH_LL_Connect>
}
 804d0f0:	bf00      	nop
 804d0f2:	3708      	adds	r7, #8
 804d0f4:	46bd      	mov	sp, r7
 804d0f6:	bd80      	pop	{r7, pc}

0804d0f8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 804d0f8:	b580      	push	{r7, lr}
 804d0fa:	b082      	sub	sp, #8
 804d0fc:	af00      	add	r7, sp, #0
 804d0fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 804d100:	687b      	ldr	r3, [r7, #4]
 804d102:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804d106:	4618      	mov	r0, r3
 804d108:	f7ff f832 	bl	804c170 <USBH_LL_Disconnect>
}
 804d10c:	bf00      	nop
 804d10e:	3708      	adds	r7, #8
 804d110:	46bd      	mov	sp, r7
 804d112:	bd80      	pop	{r7, pc}

0804d114 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 804d114:	b480      	push	{r7}
 804d116:	b083      	sub	sp, #12
 804d118:	af00      	add	r7, sp, #0
 804d11a:	6078      	str	r0, [r7, #4]
 804d11c:	460b      	mov	r3, r1
 804d11e:	70fb      	strb	r3, [r7, #3]
 804d120:	4613      	mov	r3, r2
 804d122:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 804d124:	bf00      	nop
 804d126:	370c      	adds	r7, #12
 804d128:	46bd      	mov	sp, r7
 804d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d12e:	4770      	bx	lr

0804d130 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 804d130:	b580      	push	{r7, lr}
 804d132:	b082      	sub	sp, #8
 804d134:	af00      	add	r7, sp, #0
 804d136:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 804d138:	687b      	ldr	r3, [r7, #4]
 804d13a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804d13e:	4618      	mov	r0, r3
 804d140:	f7fe ffe3 	bl	804c10a <USBH_LL_PortEnabled>
}
 804d144:	bf00      	nop
 804d146:	3708      	adds	r7, #8
 804d148:	46bd      	mov	sp, r7
 804d14a:	bd80      	pop	{r7, pc}

0804d14c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 804d14c:	b580      	push	{r7, lr}
 804d14e:	b082      	sub	sp, #8
 804d150:	af00      	add	r7, sp, #0
 804d152:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 804d154:	687b      	ldr	r3, [r7, #4]
 804d156:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804d15a:	4618      	mov	r0, r3
 804d15c:	f7fe ffe3 	bl	804c126 <USBH_LL_PortDisabled>
}
 804d160:	bf00      	nop
 804d162:	3708      	adds	r7, #8
 804d164:	46bd      	mov	sp, r7
 804d166:	bd80      	pop	{r7, pc}

0804d168 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 804d168:	b580      	push	{r7, lr}
 804d16a:	b082      	sub	sp, #8
 804d16c:	af00      	add	r7, sp, #0
 804d16e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 804d170:	687b      	ldr	r3, [r7, #4]
 804d172:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 804d176:	2b00      	cmp	r3, #0
 804d178:	d132      	bne.n	804d1e0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 804d17a:	4a1c      	ldr	r2, [pc, #112]	; (804d1ec <USBH_LL_Init+0x84>)
 804d17c:	687b      	ldr	r3, [r7, #4]
 804d17e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 804d182:	687b      	ldr	r3, [r7, #4]
 804d184:	4a19      	ldr	r2, [pc, #100]	; (804d1ec <USBH_LL_Init+0x84>)
 804d186:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 804d18a:	4b18      	ldr	r3, [pc, #96]	; (804d1ec <USBH_LL_Init+0x84>)
 804d18c:	4a18      	ldr	r2, [pc, #96]	; (804d1f0 <USBH_LL_Init+0x88>)
 804d18e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 804d190:	4b16      	ldr	r3, [pc, #88]	; (804d1ec <USBH_LL_Init+0x84>)
 804d192:	220c      	movs	r2, #12
 804d194:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 804d196:	4b15      	ldr	r3, [pc, #84]	; (804d1ec <USBH_LL_Init+0x84>)
 804d198:	2201      	movs	r2, #1
 804d19a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 804d19c:	4b13      	ldr	r3, [pc, #76]	; (804d1ec <USBH_LL_Init+0x84>)
 804d19e:	2200      	movs	r2, #0
 804d1a0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 804d1a2:	4b12      	ldr	r3, [pc, #72]	; (804d1ec <USBH_LL_Init+0x84>)
 804d1a4:	2202      	movs	r2, #2
 804d1a6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 804d1a8:	4b10      	ldr	r3, [pc, #64]	; (804d1ec <USBH_LL_Init+0x84>)
 804d1aa:	2200      	movs	r2, #0
 804d1ac:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 804d1ae:	4b0f      	ldr	r3, [pc, #60]	; (804d1ec <USBH_LL_Init+0x84>)
 804d1b0:	2200      	movs	r2, #0
 804d1b2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 804d1b4:	4b0d      	ldr	r3, [pc, #52]	; (804d1ec <USBH_LL_Init+0x84>)
 804d1b6:	2200      	movs	r2, #0
 804d1b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 804d1ba:	4b0c      	ldr	r3, [pc, #48]	; (804d1ec <USBH_LL_Init+0x84>)
 804d1bc:	2200      	movs	r2, #0
 804d1be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 804d1c0:	480a      	ldr	r0, [pc, #40]	; (804d1ec <USBH_LL_Init+0x84>)
 804d1c2:	f7f7 fe19 	bl	8044df8 <HAL_HCD_Init>
 804d1c6:	4603      	mov	r3, r0
 804d1c8:	2b00      	cmp	r3, #0
 804d1ca:	d001      	beq.n	804d1d0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 804d1cc:	f7f3 fea2 	bl	8040f14 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 804d1d0:	4806      	ldr	r0, [pc, #24]	; (804d1ec <USBH_LL_Init+0x84>)
 804d1d2:	f7f8 f9fc 	bl	80455ce <HAL_HCD_GetCurrentFrame>
 804d1d6:	4603      	mov	r3, r0
 804d1d8:	4619      	mov	r1, r3
 804d1da:	6878      	ldr	r0, [r7, #4]
 804d1dc:	f7fe ff5c 	bl	804c098 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 804d1e0:	2300      	movs	r3, #0
}
 804d1e2:	4618      	mov	r0, r3
 804d1e4:	3708      	adds	r7, #8
 804d1e6:	46bd      	mov	sp, r7
 804d1e8:	bd80      	pop	{r7, pc}
 804d1ea:	bf00      	nop
 804d1ec:	20000ec0 	.word	0x20000ec0
 804d1f0:	40040000 	.word	0x40040000

0804d1f4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 804d1f4:	b580      	push	{r7, lr}
 804d1f6:	b084      	sub	sp, #16
 804d1f8:	af00      	add	r7, sp, #0
 804d1fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804d1fc:	2300      	movs	r3, #0
 804d1fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804d200:	2300      	movs	r3, #0
 804d202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 804d204:	687b      	ldr	r3, [r7, #4]
 804d206:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804d20a:	4618      	mov	r0, r3
 804d20c:	f7f8 f969 	bl	80454e2 <HAL_HCD_Start>
 804d210:	4603      	mov	r3, r0
 804d212:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804d214:	7bfb      	ldrb	r3, [r7, #15]
 804d216:	4618      	mov	r0, r3
 804d218:	f000 f95c 	bl	804d4d4 <USBH_Get_USB_Status>
 804d21c:	4603      	mov	r3, r0
 804d21e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804d220:	7bbb      	ldrb	r3, [r7, #14]
}
 804d222:	4618      	mov	r0, r3
 804d224:	3710      	adds	r7, #16
 804d226:	46bd      	mov	sp, r7
 804d228:	bd80      	pop	{r7, pc}

0804d22a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 804d22a:	b580      	push	{r7, lr}
 804d22c:	b084      	sub	sp, #16
 804d22e:	af00      	add	r7, sp, #0
 804d230:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804d232:	2300      	movs	r3, #0
 804d234:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804d236:	2300      	movs	r3, #0
 804d238:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 804d23a:	687b      	ldr	r3, [r7, #4]
 804d23c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804d240:	4618      	mov	r0, r3
 804d242:	f7f8 f971 	bl	8045528 <HAL_HCD_Stop>
 804d246:	4603      	mov	r3, r0
 804d248:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804d24a:	7bfb      	ldrb	r3, [r7, #15]
 804d24c:	4618      	mov	r0, r3
 804d24e:	f000 f941 	bl	804d4d4 <USBH_Get_USB_Status>
 804d252:	4603      	mov	r3, r0
 804d254:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804d256:	7bbb      	ldrb	r3, [r7, #14]
}
 804d258:	4618      	mov	r0, r3
 804d25a:	3710      	adds	r7, #16
 804d25c:	46bd      	mov	sp, r7
 804d25e:	bd80      	pop	{r7, pc}

0804d260 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 804d260:	b580      	push	{r7, lr}
 804d262:	b084      	sub	sp, #16
 804d264:	af00      	add	r7, sp, #0
 804d266:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 804d268:	2301      	movs	r3, #1
 804d26a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 804d26c:	687b      	ldr	r3, [r7, #4]
 804d26e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804d272:	4618      	mov	r0, r3
 804d274:	f7f8 f9b9 	bl	80455ea <HAL_HCD_GetCurrentSpeed>
 804d278:	4603      	mov	r3, r0
 804d27a:	2b02      	cmp	r3, #2
 804d27c:	d00c      	beq.n	804d298 <USBH_LL_GetSpeed+0x38>
 804d27e:	2b02      	cmp	r3, #2
 804d280:	d80d      	bhi.n	804d29e <USBH_LL_GetSpeed+0x3e>
 804d282:	2b00      	cmp	r3, #0
 804d284:	d002      	beq.n	804d28c <USBH_LL_GetSpeed+0x2c>
 804d286:	2b01      	cmp	r3, #1
 804d288:	d003      	beq.n	804d292 <USBH_LL_GetSpeed+0x32>
 804d28a:	e008      	b.n	804d29e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 804d28c:	2300      	movs	r3, #0
 804d28e:	73fb      	strb	r3, [r7, #15]
    break;
 804d290:	e008      	b.n	804d2a4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 804d292:	2301      	movs	r3, #1
 804d294:	73fb      	strb	r3, [r7, #15]
    break;
 804d296:	e005      	b.n	804d2a4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 804d298:	2302      	movs	r3, #2
 804d29a:	73fb      	strb	r3, [r7, #15]
    break;
 804d29c:	e002      	b.n	804d2a4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 804d29e:	2301      	movs	r3, #1
 804d2a0:	73fb      	strb	r3, [r7, #15]
    break;
 804d2a2:	bf00      	nop
  }
  return  speed;
 804d2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 804d2a6:	4618      	mov	r0, r3
 804d2a8:	3710      	adds	r7, #16
 804d2aa:	46bd      	mov	sp, r7
 804d2ac:	bd80      	pop	{r7, pc}

0804d2ae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 804d2ae:	b580      	push	{r7, lr}
 804d2b0:	b084      	sub	sp, #16
 804d2b2:	af00      	add	r7, sp, #0
 804d2b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804d2b6:	2300      	movs	r3, #0
 804d2b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804d2ba:	2300      	movs	r3, #0
 804d2bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 804d2be:	687b      	ldr	r3, [r7, #4]
 804d2c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804d2c4:	4618      	mov	r0, r3
 804d2c6:	f7f8 f94c 	bl	8045562 <HAL_HCD_ResetPort>
 804d2ca:	4603      	mov	r3, r0
 804d2cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804d2ce:	7bfb      	ldrb	r3, [r7, #15]
 804d2d0:	4618      	mov	r0, r3
 804d2d2:	f000 f8ff 	bl	804d4d4 <USBH_Get_USB_Status>
 804d2d6:	4603      	mov	r3, r0
 804d2d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804d2da:	7bbb      	ldrb	r3, [r7, #14]
}
 804d2dc:	4618      	mov	r0, r3
 804d2de:	3710      	adds	r7, #16
 804d2e0:	46bd      	mov	sp, r7
 804d2e2:	bd80      	pop	{r7, pc}

0804d2e4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804d2e4:	b580      	push	{r7, lr}
 804d2e6:	b082      	sub	sp, #8
 804d2e8:	af00      	add	r7, sp, #0
 804d2ea:	6078      	str	r0, [r7, #4]
 804d2ec:	460b      	mov	r3, r1
 804d2ee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 804d2f0:	687b      	ldr	r3, [r7, #4]
 804d2f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804d2f6:	78fa      	ldrb	r2, [r7, #3]
 804d2f8:	4611      	mov	r1, r2
 804d2fa:	4618      	mov	r0, r3
 804d2fc:	f7f8 f953 	bl	80455a6 <HAL_HCD_HC_GetXferCount>
 804d300:	4603      	mov	r3, r0
}
 804d302:	4618      	mov	r0, r3
 804d304:	3708      	adds	r7, #8
 804d306:	46bd      	mov	sp, r7
 804d308:	bd80      	pop	{r7, pc}

0804d30a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 804d30a:	b590      	push	{r4, r7, lr}
 804d30c:	b089      	sub	sp, #36	; 0x24
 804d30e:	af04      	add	r7, sp, #16
 804d310:	6078      	str	r0, [r7, #4]
 804d312:	4608      	mov	r0, r1
 804d314:	4611      	mov	r1, r2
 804d316:	461a      	mov	r2, r3
 804d318:	4603      	mov	r3, r0
 804d31a:	70fb      	strb	r3, [r7, #3]
 804d31c:	460b      	mov	r3, r1
 804d31e:	70bb      	strb	r3, [r7, #2]
 804d320:	4613      	mov	r3, r2
 804d322:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804d324:	2300      	movs	r3, #0
 804d326:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804d328:	2300      	movs	r3, #0
 804d32a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 804d32c:	687b      	ldr	r3, [r7, #4]
 804d32e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 804d332:	787c      	ldrb	r4, [r7, #1]
 804d334:	78ba      	ldrb	r2, [r7, #2]
 804d336:	78f9      	ldrb	r1, [r7, #3]
 804d338:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804d33a:	9302      	str	r3, [sp, #8]
 804d33c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 804d340:	9301      	str	r3, [sp, #4]
 804d342:	f897 3020 	ldrb.w	r3, [r7, #32]
 804d346:	9300      	str	r3, [sp, #0]
 804d348:	4623      	mov	r3, r4
 804d34a:	f7f7 fdb7 	bl	8044ebc <HAL_HCD_HC_Init>
 804d34e:	4603      	mov	r3, r0
 804d350:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 804d352:	7bfb      	ldrb	r3, [r7, #15]
 804d354:	4618      	mov	r0, r3
 804d356:	f000 f8bd 	bl	804d4d4 <USBH_Get_USB_Status>
 804d35a:	4603      	mov	r3, r0
 804d35c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804d35e:	7bbb      	ldrb	r3, [r7, #14]
}
 804d360:	4618      	mov	r0, r3
 804d362:	3714      	adds	r7, #20
 804d364:	46bd      	mov	sp, r7
 804d366:	bd90      	pop	{r4, r7, pc}

0804d368 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804d368:	b580      	push	{r7, lr}
 804d36a:	b084      	sub	sp, #16
 804d36c:	af00      	add	r7, sp, #0
 804d36e:	6078      	str	r0, [r7, #4]
 804d370:	460b      	mov	r3, r1
 804d372:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804d374:	2300      	movs	r3, #0
 804d376:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804d378:	2300      	movs	r3, #0
 804d37a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 804d37c:	687b      	ldr	r3, [r7, #4]
 804d37e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804d382:	78fa      	ldrb	r2, [r7, #3]
 804d384:	4611      	mov	r1, r2
 804d386:	4618      	mov	r0, r3
 804d388:	f7f7 fe27 	bl	8044fda <HAL_HCD_HC_Halt>
 804d38c:	4603      	mov	r3, r0
 804d38e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804d390:	7bfb      	ldrb	r3, [r7, #15]
 804d392:	4618      	mov	r0, r3
 804d394:	f000 f89e 	bl	804d4d4 <USBH_Get_USB_Status>
 804d398:	4603      	mov	r3, r0
 804d39a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804d39c:	7bbb      	ldrb	r3, [r7, #14]
}
 804d39e:	4618      	mov	r0, r3
 804d3a0:	3710      	adds	r7, #16
 804d3a2:	46bd      	mov	sp, r7
 804d3a4:	bd80      	pop	{r7, pc}

0804d3a6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 804d3a6:	b590      	push	{r4, r7, lr}
 804d3a8:	b089      	sub	sp, #36	; 0x24
 804d3aa:	af04      	add	r7, sp, #16
 804d3ac:	6078      	str	r0, [r7, #4]
 804d3ae:	4608      	mov	r0, r1
 804d3b0:	4611      	mov	r1, r2
 804d3b2:	461a      	mov	r2, r3
 804d3b4:	4603      	mov	r3, r0
 804d3b6:	70fb      	strb	r3, [r7, #3]
 804d3b8:	460b      	mov	r3, r1
 804d3ba:	70bb      	strb	r3, [r7, #2]
 804d3bc:	4613      	mov	r3, r2
 804d3be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804d3c0:	2300      	movs	r3, #0
 804d3c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804d3c4:	2300      	movs	r3, #0
 804d3c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 804d3c8:	687b      	ldr	r3, [r7, #4]
 804d3ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 804d3ce:	787c      	ldrb	r4, [r7, #1]
 804d3d0:	78ba      	ldrb	r2, [r7, #2]
 804d3d2:	78f9      	ldrb	r1, [r7, #3]
 804d3d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804d3d8:	9303      	str	r3, [sp, #12]
 804d3da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804d3dc:	9302      	str	r3, [sp, #8]
 804d3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804d3e0:	9301      	str	r3, [sp, #4]
 804d3e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 804d3e6:	9300      	str	r3, [sp, #0]
 804d3e8:	4623      	mov	r3, r4
 804d3ea:	f7f7 fe19 	bl	8045020 <HAL_HCD_HC_SubmitRequest>
 804d3ee:	4603      	mov	r3, r0
 804d3f0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 804d3f2:	7bfb      	ldrb	r3, [r7, #15]
 804d3f4:	4618      	mov	r0, r3
 804d3f6:	f000 f86d 	bl	804d4d4 <USBH_Get_USB_Status>
 804d3fa:	4603      	mov	r3, r0
 804d3fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804d3fe:	7bbb      	ldrb	r3, [r7, #14]
}
 804d400:	4618      	mov	r0, r3
 804d402:	3714      	adds	r7, #20
 804d404:	46bd      	mov	sp, r7
 804d406:	bd90      	pop	{r4, r7, pc}

0804d408 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804d408:	b580      	push	{r7, lr}
 804d40a:	b082      	sub	sp, #8
 804d40c:	af00      	add	r7, sp, #0
 804d40e:	6078      	str	r0, [r7, #4]
 804d410:	460b      	mov	r3, r1
 804d412:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 804d414:	687b      	ldr	r3, [r7, #4]
 804d416:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804d41a:	78fa      	ldrb	r2, [r7, #3]
 804d41c:	4611      	mov	r1, r2
 804d41e:	4618      	mov	r0, r3
 804d420:	f7f8 f8ad 	bl	804557e <HAL_HCD_HC_GetURBState>
 804d424:	4603      	mov	r3, r0
}
 804d426:	4618      	mov	r0, r3
 804d428:	3708      	adds	r7, #8
 804d42a:	46bd      	mov	sp, r7
 804d42c:	bd80      	pop	{r7, pc}

0804d42e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 804d42e:	b580      	push	{r7, lr}
 804d430:	b082      	sub	sp, #8
 804d432:	af00      	add	r7, sp, #0
 804d434:	6078      	str	r0, [r7, #4]
 804d436:	460b      	mov	r3, r1
 804d438:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 804d43a:	687b      	ldr	r3, [r7, #4]
 804d43c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 804d440:	2b00      	cmp	r3, #0
 804d442:	d103      	bne.n	804d44c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 804d444:	78fb      	ldrb	r3, [r7, #3]
 804d446:	4618      	mov	r0, r3
 804d448:	f000 f870 	bl	804d52c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 804d44c:	20c8      	movs	r0, #200	; 0xc8
 804d44e:	f7f6 f867 	bl	8043520 <HAL_Delay>
  return USBH_OK;
 804d452:	2300      	movs	r3, #0
}
 804d454:	4618      	mov	r0, r3
 804d456:	3708      	adds	r7, #8
 804d458:	46bd      	mov	sp, r7
 804d45a:	bd80      	pop	{r7, pc}

0804d45c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 804d45c:	b480      	push	{r7}
 804d45e:	b085      	sub	sp, #20
 804d460:	af00      	add	r7, sp, #0
 804d462:	6078      	str	r0, [r7, #4]
 804d464:	460b      	mov	r3, r1
 804d466:	70fb      	strb	r3, [r7, #3]
 804d468:	4613      	mov	r3, r2
 804d46a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 804d46c:	687b      	ldr	r3, [r7, #4]
 804d46e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804d472:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 804d474:	78fb      	ldrb	r3, [r7, #3]
 804d476:	68fa      	ldr	r2, [r7, #12]
 804d478:	212c      	movs	r1, #44	; 0x2c
 804d47a:	fb01 f303 	mul.w	r3, r1, r3
 804d47e:	4413      	add	r3, r2
 804d480:	333b      	adds	r3, #59	; 0x3b
 804d482:	781b      	ldrb	r3, [r3, #0]
 804d484:	2b00      	cmp	r3, #0
 804d486:	d009      	beq.n	804d49c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 804d488:	78fb      	ldrb	r3, [r7, #3]
 804d48a:	68fa      	ldr	r2, [r7, #12]
 804d48c:	212c      	movs	r1, #44	; 0x2c
 804d48e:	fb01 f303 	mul.w	r3, r1, r3
 804d492:	4413      	add	r3, r2
 804d494:	3354      	adds	r3, #84	; 0x54
 804d496:	78ba      	ldrb	r2, [r7, #2]
 804d498:	701a      	strb	r2, [r3, #0]
 804d49a:	e008      	b.n	804d4ae <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 804d49c:	78fb      	ldrb	r3, [r7, #3]
 804d49e:	68fa      	ldr	r2, [r7, #12]
 804d4a0:	212c      	movs	r1, #44	; 0x2c
 804d4a2:	fb01 f303 	mul.w	r3, r1, r3
 804d4a6:	4413      	add	r3, r2
 804d4a8:	3355      	adds	r3, #85	; 0x55
 804d4aa:	78ba      	ldrb	r2, [r7, #2]
 804d4ac:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 804d4ae:	2300      	movs	r3, #0
}
 804d4b0:	4618      	mov	r0, r3
 804d4b2:	3714      	adds	r7, #20
 804d4b4:	46bd      	mov	sp, r7
 804d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d4ba:	4770      	bx	lr

0804d4bc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 804d4bc:	b580      	push	{r7, lr}
 804d4be:	b082      	sub	sp, #8
 804d4c0:	af00      	add	r7, sp, #0
 804d4c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 804d4c4:	6878      	ldr	r0, [r7, #4]
 804d4c6:	f7f6 f82b 	bl	8043520 <HAL_Delay>
}
 804d4ca:	bf00      	nop
 804d4cc:	3708      	adds	r7, #8
 804d4ce:	46bd      	mov	sp, r7
 804d4d0:	bd80      	pop	{r7, pc}
	...

0804d4d4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 804d4d4:	b480      	push	{r7}
 804d4d6:	b085      	sub	sp, #20
 804d4d8:	af00      	add	r7, sp, #0
 804d4da:	4603      	mov	r3, r0
 804d4dc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804d4de:	2300      	movs	r3, #0
 804d4e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 804d4e2:	79fb      	ldrb	r3, [r7, #7]
 804d4e4:	2b03      	cmp	r3, #3
 804d4e6:	d817      	bhi.n	804d518 <USBH_Get_USB_Status+0x44>
 804d4e8:	a201      	add	r2, pc, #4	; (adr r2, 804d4f0 <USBH_Get_USB_Status+0x1c>)
 804d4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804d4ee:	bf00      	nop
 804d4f0:	0804d501 	.word	0x0804d501
 804d4f4:	0804d507 	.word	0x0804d507
 804d4f8:	0804d50d 	.word	0x0804d50d
 804d4fc:	0804d513 	.word	0x0804d513
  {
    case HAL_OK :
      usb_status = USBH_OK;
 804d500:	2300      	movs	r3, #0
 804d502:	73fb      	strb	r3, [r7, #15]
    break;
 804d504:	e00b      	b.n	804d51e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 804d506:	2302      	movs	r3, #2
 804d508:	73fb      	strb	r3, [r7, #15]
    break;
 804d50a:	e008      	b.n	804d51e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 804d50c:	2301      	movs	r3, #1
 804d50e:	73fb      	strb	r3, [r7, #15]
    break;
 804d510:	e005      	b.n	804d51e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 804d512:	2302      	movs	r3, #2
 804d514:	73fb      	strb	r3, [r7, #15]
    break;
 804d516:	e002      	b.n	804d51e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 804d518:	2302      	movs	r3, #2
 804d51a:	73fb      	strb	r3, [r7, #15]
    break;
 804d51c:	bf00      	nop
  }
  return usb_status;
 804d51e:	7bfb      	ldrb	r3, [r7, #15]
}
 804d520:	4618      	mov	r0, r3
 804d522:	3714      	adds	r7, #20
 804d524:	46bd      	mov	sp, r7
 804d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d52a:	4770      	bx	lr

0804d52c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 804d52c:	b580      	push	{r7, lr}
 804d52e:	b084      	sub	sp, #16
 804d530:	af00      	add	r7, sp, #0
 804d532:	4603      	mov	r3, r0
 804d534:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 804d536:	79fb      	ldrb	r3, [r7, #7]
 804d538:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 804d53a:	79fb      	ldrb	r3, [r7, #7]
 804d53c:	2b00      	cmp	r3, #0
 804d53e:	d102      	bne.n	804d546 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 804d540:	2301      	movs	r3, #1
 804d542:	73fb      	strb	r3, [r7, #15]
 804d544:	e001      	b.n	804d54a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 804d546:	2300      	movs	r3, #0
 804d548:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 804d54a:	7bfb      	ldrb	r3, [r7, #15]
 804d54c:	461a      	mov	r2, r3
 804d54e:	2110      	movs	r1, #16
 804d550:	4803      	ldr	r0, [pc, #12]	; (804d560 <MX_DriverVbusHS+0x34>)
 804d552:	f7f7 fc1f 	bl	8044d94 <HAL_GPIO_WritePin>
}
 804d556:	bf00      	nop
 804d558:	3710      	adds	r7, #16
 804d55a:	46bd      	mov	sp, r7
 804d55c:	bd80      	pop	{r7, pc}
 804d55e:	bf00      	nop
 804d560:	40020800 	.word	0x40020800

0804d564 <__errno>:
 804d564:	4b01      	ldr	r3, [pc, #4]	; (804d56c <__errno+0x8>)
 804d566:	6818      	ldr	r0, [r3, #0]
 804d568:	4770      	bx	lr
 804d56a:	bf00      	nop
 804d56c:	2000007c 	.word	0x2000007c

0804d570 <__libc_init_array>:
 804d570:	b570      	push	{r4, r5, r6, lr}
 804d572:	4d0d      	ldr	r5, [pc, #52]	; (804d5a8 <__libc_init_array+0x38>)
 804d574:	4c0d      	ldr	r4, [pc, #52]	; (804d5ac <__libc_init_array+0x3c>)
 804d576:	1b64      	subs	r4, r4, r5
 804d578:	10a4      	asrs	r4, r4, #2
 804d57a:	2600      	movs	r6, #0
 804d57c:	42a6      	cmp	r6, r4
 804d57e:	d109      	bne.n	804d594 <__libc_init_array+0x24>
 804d580:	4d0b      	ldr	r5, [pc, #44]	; (804d5b0 <__libc_init_array+0x40>)
 804d582:	4c0c      	ldr	r4, [pc, #48]	; (804d5b4 <__libc_init_array+0x44>)
 804d584:	f001 fa10 	bl	804e9a8 <_init>
 804d588:	1b64      	subs	r4, r4, r5
 804d58a:	10a4      	asrs	r4, r4, #2
 804d58c:	2600      	movs	r6, #0
 804d58e:	42a6      	cmp	r6, r4
 804d590:	d105      	bne.n	804d59e <__libc_init_array+0x2e>
 804d592:	bd70      	pop	{r4, r5, r6, pc}
 804d594:	f855 3b04 	ldr.w	r3, [r5], #4
 804d598:	4798      	blx	r3
 804d59a:	3601      	adds	r6, #1
 804d59c:	e7ee      	b.n	804d57c <__libc_init_array+0xc>
 804d59e:	f855 3b04 	ldr.w	r3, [r5], #4
 804d5a2:	4798      	blx	r3
 804d5a4:	3601      	adds	r6, #1
 804d5a6:	e7f2      	b.n	804d58e <__libc_init_array+0x1e>
 804d5a8:	080510ac 	.word	0x080510ac
 804d5ac:	080510ac 	.word	0x080510ac
 804d5b0:	080510ac 	.word	0x080510ac
 804d5b4:	080510b0 	.word	0x080510b0

0804d5b8 <malloc>:
 804d5b8:	4b02      	ldr	r3, [pc, #8]	; (804d5c4 <malloc+0xc>)
 804d5ba:	4601      	mov	r1, r0
 804d5bc:	6818      	ldr	r0, [r3, #0]
 804d5be:	f000 b87f 	b.w	804d6c0 <_malloc_r>
 804d5c2:	bf00      	nop
 804d5c4:	2000007c 	.word	0x2000007c

0804d5c8 <free>:
 804d5c8:	4b02      	ldr	r3, [pc, #8]	; (804d5d4 <free+0xc>)
 804d5ca:	4601      	mov	r1, r0
 804d5cc:	6818      	ldr	r0, [r3, #0]
 804d5ce:	f000 b80b 	b.w	804d5e8 <_free_r>
 804d5d2:	bf00      	nop
 804d5d4:	2000007c 	.word	0x2000007c

0804d5d8 <memset>:
 804d5d8:	4402      	add	r2, r0
 804d5da:	4603      	mov	r3, r0
 804d5dc:	4293      	cmp	r3, r2
 804d5de:	d100      	bne.n	804d5e2 <memset+0xa>
 804d5e0:	4770      	bx	lr
 804d5e2:	f803 1b01 	strb.w	r1, [r3], #1
 804d5e6:	e7f9      	b.n	804d5dc <memset+0x4>

0804d5e8 <_free_r>:
 804d5e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804d5ea:	2900      	cmp	r1, #0
 804d5ec:	d044      	beq.n	804d678 <_free_r+0x90>
 804d5ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804d5f2:	9001      	str	r0, [sp, #4]
 804d5f4:	2b00      	cmp	r3, #0
 804d5f6:	f1a1 0404 	sub.w	r4, r1, #4
 804d5fa:	bfb8      	it	lt
 804d5fc:	18e4      	addlt	r4, r4, r3
 804d5fe:	f000 fc71 	bl	804dee4 <__malloc_lock>
 804d602:	4a1e      	ldr	r2, [pc, #120]	; (804d67c <_free_r+0x94>)
 804d604:	9801      	ldr	r0, [sp, #4]
 804d606:	6813      	ldr	r3, [r2, #0]
 804d608:	b933      	cbnz	r3, 804d618 <_free_r+0x30>
 804d60a:	6063      	str	r3, [r4, #4]
 804d60c:	6014      	str	r4, [r2, #0]
 804d60e:	b003      	add	sp, #12
 804d610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 804d614:	f000 bc6c 	b.w	804def0 <__malloc_unlock>
 804d618:	42a3      	cmp	r3, r4
 804d61a:	d908      	bls.n	804d62e <_free_r+0x46>
 804d61c:	6825      	ldr	r5, [r4, #0]
 804d61e:	1961      	adds	r1, r4, r5
 804d620:	428b      	cmp	r3, r1
 804d622:	bf01      	itttt	eq
 804d624:	6819      	ldreq	r1, [r3, #0]
 804d626:	685b      	ldreq	r3, [r3, #4]
 804d628:	1949      	addeq	r1, r1, r5
 804d62a:	6021      	streq	r1, [r4, #0]
 804d62c:	e7ed      	b.n	804d60a <_free_r+0x22>
 804d62e:	461a      	mov	r2, r3
 804d630:	685b      	ldr	r3, [r3, #4]
 804d632:	b10b      	cbz	r3, 804d638 <_free_r+0x50>
 804d634:	42a3      	cmp	r3, r4
 804d636:	d9fa      	bls.n	804d62e <_free_r+0x46>
 804d638:	6811      	ldr	r1, [r2, #0]
 804d63a:	1855      	adds	r5, r2, r1
 804d63c:	42a5      	cmp	r5, r4
 804d63e:	d10b      	bne.n	804d658 <_free_r+0x70>
 804d640:	6824      	ldr	r4, [r4, #0]
 804d642:	4421      	add	r1, r4
 804d644:	1854      	adds	r4, r2, r1
 804d646:	42a3      	cmp	r3, r4
 804d648:	6011      	str	r1, [r2, #0]
 804d64a:	d1e0      	bne.n	804d60e <_free_r+0x26>
 804d64c:	681c      	ldr	r4, [r3, #0]
 804d64e:	685b      	ldr	r3, [r3, #4]
 804d650:	6053      	str	r3, [r2, #4]
 804d652:	4421      	add	r1, r4
 804d654:	6011      	str	r1, [r2, #0]
 804d656:	e7da      	b.n	804d60e <_free_r+0x26>
 804d658:	d902      	bls.n	804d660 <_free_r+0x78>
 804d65a:	230c      	movs	r3, #12
 804d65c:	6003      	str	r3, [r0, #0]
 804d65e:	e7d6      	b.n	804d60e <_free_r+0x26>
 804d660:	6825      	ldr	r5, [r4, #0]
 804d662:	1961      	adds	r1, r4, r5
 804d664:	428b      	cmp	r3, r1
 804d666:	bf04      	itt	eq
 804d668:	6819      	ldreq	r1, [r3, #0]
 804d66a:	685b      	ldreq	r3, [r3, #4]
 804d66c:	6063      	str	r3, [r4, #4]
 804d66e:	bf04      	itt	eq
 804d670:	1949      	addeq	r1, r1, r5
 804d672:	6021      	streq	r1, [r4, #0]
 804d674:	6054      	str	r4, [r2, #4]
 804d676:	e7ca      	b.n	804d60e <_free_r+0x26>
 804d678:	b003      	add	sp, #12
 804d67a:	bd30      	pop	{r4, r5, pc}
 804d67c:	200011c4 	.word	0x200011c4

0804d680 <sbrk_aligned>:
 804d680:	b570      	push	{r4, r5, r6, lr}
 804d682:	4e0e      	ldr	r6, [pc, #56]	; (804d6bc <sbrk_aligned+0x3c>)
 804d684:	460c      	mov	r4, r1
 804d686:	6831      	ldr	r1, [r6, #0]
 804d688:	4605      	mov	r5, r0
 804d68a:	b911      	cbnz	r1, 804d692 <sbrk_aligned+0x12>
 804d68c:	f000 f91a 	bl	804d8c4 <_sbrk_r>
 804d690:	6030      	str	r0, [r6, #0]
 804d692:	4621      	mov	r1, r4
 804d694:	4628      	mov	r0, r5
 804d696:	f000 f915 	bl	804d8c4 <_sbrk_r>
 804d69a:	1c43      	adds	r3, r0, #1
 804d69c:	d00a      	beq.n	804d6b4 <sbrk_aligned+0x34>
 804d69e:	1cc4      	adds	r4, r0, #3
 804d6a0:	f024 0403 	bic.w	r4, r4, #3
 804d6a4:	42a0      	cmp	r0, r4
 804d6a6:	d007      	beq.n	804d6b8 <sbrk_aligned+0x38>
 804d6a8:	1a21      	subs	r1, r4, r0
 804d6aa:	4628      	mov	r0, r5
 804d6ac:	f000 f90a 	bl	804d8c4 <_sbrk_r>
 804d6b0:	3001      	adds	r0, #1
 804d6b2:	d101      	bne.n	804d6b8 <sbrk_aligned+0x38>
 804d6b4:	f04f 34ff 	mov.w	r4, #4294967295
 804d6b8:	4620      	mov	r0, r4
 804d6ba:	bd70      	pop	{r4, r5, r6, pc}
 804d6bc:	200011c8 	.word	0x200011c8

0804d6c0 <_malloc_r>:
 804d6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804d6c4:	1ccd      	adds	r5, r1, #3
 804d6c6:	f025 0503 	bic.w	r5, r5, #3
 804d6ca:	3508      	adds	r5, #8
 804d6cc:	2d0c      	cmp	r5, #12
 804d6ce:	bf38      	it	cc
 804d6d0:	250c      	movcc	r5, #12
 804d6d2:	2d00      	cmp	r5, #0
 804d6d4:	4607      	mov	r7, r0
 804d6d6:	db01      	blt.n	804d6dc <_malloc_r+0x1c>
 804d6d8:	42a9      	cmp	r1, r5
 804d6da:	d905      	bls.n	804d6e8 <_malloc_r+0x28>
 804d6dc:	230c      	movs	r3, #12
 804d6de:	603b      	str	r3, [r7, #0]
 804d6e0:	2600      	movs	r6, #0
 804d6e2:	4630      	mov	r0, r6
 804d6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804d6e8:	4e2e      	ldr	r6, [pc, #184]	; (804d7a4 <_malloc_r+0xe4>)
 804d6ea:	f000 fbfb 	bl	804dee4 <__malloc_lock>
 804d6ee:	6833      	ldr	r3, [r6, #0]
 804d6f0:	461c      	mov	r4, r3
 804d6f2:	bb34      	cbnz	r4, 804d742 <_malloc_r+0x82>
 804d6f4:	4629      	mov	r1, r5
 804d6f6:	4638      	mov	r0, r7
 804d6f8:	f7ff ffc2 	bl	804d680 <sbrk_aligned>
 804d6fc:	1c43      	adds	r3, r0, #1
 804d6fe:	4604      	mov	r4, r0
 804d700:	d14d      	bne.n	804d79e <_malloc_r+0xde>
 804d702:	6834      	ldr	r4, [r6, #0]
 804d704:	4626      	mov	r6, r4
 804d706:	2e00      	cmp	r6, #0
 804d708:	d140      	bne.n	804d78c <_malloc_r+0xcc>
 804d70a:	6823      	ldr	r3, [r4, #0]
 804d70c:	4631      	mov	r1, r6
 804d70e:	4638      	mov	r0, r7
 804d710:	eb04 0803 	add.w	r8, r4, r3
 804d714:	f000 f8d6 	bl	804d8c4 <_sbrk_r>
 804d718:	4580      	cmp	r8, r0
 804d71a:	d13a      	bne.n	804d792 <_malloc_r+0xd2>
 804d71c:	6821      	ldr	r1, [r4, #0]
 804d71e:	3503      	adds	r5, #3
 804d720:	1a6d      	subs	r5, r5, r1
 804d722:	f025 0503 	bic.w	r5, r5, #3
 804d726:	3508      	adds	r5, #8
 804d728:	2d0c      	cmp	r5, #12
 804d72a:	bf38      	it	cc
 804d72c:	250c      	movcc	r5, #12
 804d72e:	4629      	mov	r1, r5
 804d730:	4638      	mov	r0, r7
 804d732:	f7ff ffa5 	bl	804d680 <sbrk_aligned>
 804d736:	3001      	adds	r0, #1
 804d738:	d02b      	beq.n	804d792 <_malloc_r+0xd2>
 804d73a:	6823      	ldr	r3, [r4, #0]
 804d73c:	442b      	add	r3, r5
 804d73e:	6023      	str	r3, [r4, #0]
 804d740:	e00e      	b.n	804d760 <_malloc_r+0xa0>
 804d742:	6822      	ldr	r2, [r4, #0]
 804d744:	1b52      	subs	r2, r2, r5
 804d746:	d41e      	bmi.n	804d786 <_malloc_r+0xc6>
 804d748:	2a0b      	cmp	r2, #11
 804d74a:	d916      	bls.n	804d77a <_malloc_r+0xba>
 804d74c:	1961      	adds	r1, r4, r5
 804d74e:	42a3      	cmp	r3, r4
 804d750:	6025      	str	r5, [r4, #0]
 804d752:	bf18      	it	ne
 804d754:	6059      	strne	r1, [r3, #4]
 804d756:	6863      	ldr	r3, [r4, #4]
 804d758:	bf08      	it	eq
 804d75a:	6031      	streq	r1, [r6, #0]
 804d75c:	5162      	str	r2, [r4, r5]
 804d75e:	604b      	str	r3, [r1, #4]
 804d760:	4638      	mov	r0, r7
 804d762:	f104 060b 	add.w	r6, r4, #11
 804d766:	f000 fbc3 	bl	804def0 <__malloc_unlock>
 804d76a:	f026 0607 	bic.w	r6, r6, #7
 804d76e:	1d23      	adds	r3, r4, #4
 804d770:	1af2      	subs	r2, r6, r3
 804d772:	d0b6      	beq.n	804d6e2 <_malloc_r+0x22>
 804d774:	1b9b      	subs	r3, r3, r6
 804d776:	50a3      	str	r3, [r4, r2]
 804d778:	e7b3      	b.n	804d6e2 <_malloc_r+0x22>
 804d77a:	6862      	ldr	r2, [r4, #4]
 804d77c:	42a3      	cmp	r3, r4
 804d77e:	bf0c      	ite	eq
 804d780:	6032      	streq	r2, [r6, #0]
 804d782:	605a      	strne	r2, [r3, #4]
 804d784:	e7ec      	b.n	804d760 <_malloc_r+0xa0>
 804d786:	4623      	mov	r3, r4
 804d788:	6864      	ldr	r4, [r4, #4]
 804d78a:	e7b2      	b.n	804d6f2 <_malloc_r+0x32>
 804d78c:	4634      	mov	r4, r6
 804d78e:	6876      	ldr	r6, [r6, #4]
 804d790:	e7b9      	b.n	804d706 <_malloc_r+0x46>
 804d792:	230c      	movs	r3, #12
 804d794:	603b      	str	r3, [r7, #0]
 804d796:	4638      	mov	r0, r7
 804d798:	f000 fbaa 	bl	804def0 <__malloc_unlock>
 804d79c:	e7a1      	b.n	804d6e2 <_malloc_r+0x22>
 804d79e:	6025      	str	r5, [r4, #0]
 804d7a0:	e7de      	b.n	804d760 <_malloc_r+0xa0>
 804d7a2:	bf00      	nop
 804d7a4:	200011c4 	.word	0x200011c4

0804d7a8 <iprintf>:
 804d7a8:	b40f      	push	{r0, r1, r2, r3}
 804d7aa:	4b0a      	ldr	r3, [pc, #40]	; (804d7d4 <iprintf+0x2c>)
 804d7ac:	b513      	push	{r0, r1, r4, lr}
 804d7ae:	681c      	ldr	r4, [r3, #0]
 804d7b0:	b124      	cbz	r4, 804d7bc <iprintf+0x14>
 804d7b2:	69a3      	ldr	r3, [r4, #24]
 804d7b4:	b913      	cbnz	r3, 804d7bc <iprintf+0x14>
 804d7b6:	4620      	mov	r0, r4
 804d7b8:	f000 fa8e 	bl	804dcd8 <__sinit>
 804d7bc:	ab05      	add	r3, sp, #20
 804d7be:	9a04      	ldr	r2, [sp, #16]
 804d7c0:	68a1      	ldr	r1, [r4, #8]
 804d7c2:	9301      	str	r3, [sp, #4]
 804d7c4:	4620      	mov	r0, r4
 804d7c6:	f000 fd1f 	bl	804e208 <_vfiprintf_r>
 804d7ca:	b002      	add	sp, #8
 804d7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804d7d0:	b004      	add	sp, #16
 804d7d2:	4770      	bx	lr
 804d7d4:	2000007c 	.word	0x2000007c

0804d7d8 <_puts_r>:
 804d7d8:	b570      	push	{r4, r5, r6, lr}
 804d7da:	460e      	mov	r6, r1
 804d7dc:	4605      	mov	r5, r0
 804d7de:	b118      	cbz	r0, 804d7e8 <_puts_r+0x10>
 804d7e0:	6983      	ldr	r3, [r0, #24]
 804d7e2:	b90b      	cbnz	r3, 804d7e8 <_puts_r+0x10>
 804d7e4:	f000 fa78 	bl	804dcd8 <__sinit>
 804d7e8:	69ab      	ldr	r3, [r5, #24]
 804d7ea:	68ac      	ldr	r4, [r5, #8]
 804d7ec:	b913      	cbnz	r3, 804d7f4 <_puts_r+0x1c>
 804d7ee:	4628      	mov	r0, r5
 804d7f0:	f000 fa72 	bl	804dcd8 <__sinit>
 804d7f4:	4b2c      	ldr	r3, [pc, #176]	; (804d8a8 <_puts_r+0xd0>)
 804d7f6:	429c      	cmp	r4, r3
 804d7f8:	d120      	bne.n	804d83c <_puts_r+0x64>
 804d7fa:	686c      	ldr	r4, [r5, #4]
 804d7fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804d7fe:	07db      	lsls	r3, r3, #31
 804d800:	d405      	bmi.n	804d80e <_puts_r+0x36>
 804d802:	89a3      	ldrh	r3, [r4, #12]
 804d804:	0598      	lsls	r0, r3, #22
 804d806:	d402      	bmi.n	804d80e <_puts_r+0x36>
 804d808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804d80a:	f000 fb03 	bl	804de14 <__retarget_lock_acquire_recursive>
 804d80e:	89a3      	ldrh	r3, [r4, #12]
 804d810:	0719      	lsls	r1, r3, #28
 804d812:	d51d      	bpl.n	804d850 <_puts_r+0x78>
 804d814:	6923      	ldr	r3, [r4, #16]
 804d816:	b1db      	cbz	r3, 804d850 <_puts_r+0x78>
 804d818:	3e01      	subs	r6, #1
 804d81a:	68a3      	ldr	r3, [r4, #8]
 804d81c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 804d820:	3b01      	subs	r3, #1
 804d822:	60a3      	str	r3, [r4, #8]
 804d824:	bb39      	cbnz	r1, 804d876 <_puts_r+0x9e>
 804d826:	2b00      	cmp	r3, #0
 804d828:	da38      	bge.n	804d89c <_puts_r+0xc4>
 804d82a:	4622      	mov	r2, r4
 804d82c:	210a      	movs	r1, #10
 804d82e:	4628      	mov	r0, r5
 804d830:	f000 f878 	bl	804d924 <__swbuf_r>
 804d834:	3001      	adds	r0, #1
 804d836:	d011      	beq.n	804d85c <_puts_r+0x84>
 804d838:	250a      	movs	r5, #10
 804d83a:	e011      	b.n	804d860 <_puts_r+0x88>
 804d83c:	4b1b      	ldr	r3, [pc, #108]	; (804d8ac <_puts_r+0xd4>)
 804d83e:	429c      	cmp	r4, r3
 804d840:	d101      	bne.n	804d846 <_puts_r+0x6e>
 804d842:	68ac      	ldr	r4, [r5, #8]
 804d844:	e7da      	b.n	804d7fc <_puts_r+0x24>
 804d846:	4b1a      	ldr	r3, [pc, #104]	; (804d8b0 <_puts_r+0xd8>)
 804d848:	429c      	cmp	r4, r3
 804d84a:	bf08      	it	eq
 804d84c:	68ec      	ldreq	r4, [r5, #12]
 804d84e:	e7d5      	b.n	804d7fc <_puts_r+0x24>
 804d850:	4621      	mov	r1, r4
 804d852:	4628      	mov	r0, r5
 804d854:	f000 f8b8 	bl	804d9c8 <__swsetup_r>
 804d858:	2800      	cmp	r0, #0
 804d85a:	d0dd      	beq.n	804d818 <_puts_r+0x40>
 804d85c:	f04f 35ff 	mov.w	r5, #4294967295
 804d860:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804d862:	07da      	lsls	r2, r3, #31
 804d864:	d405      	bmi.n	804d872 <_puts_r+0x9a>
 804d866:	89a3      	ldrh	r3, [r4, #12]
 804d868:	059b      	lsls	r3, r3, #22
 804d86a:	d402      	bmi.n	804d872 <_puts_r+0x9a>
 804d86c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804d86e:	f000 fad2 	bl	804de16 <__retarget_lock_release_recursive>
 804d872:	4628      	mov	r0, r5
 804d874:	bd70      	pop	{r4, r5, r6, pc}
 804d876:	2b00      	cmp	r3, #0
 804d878:	da04      	bge.n	804d884 <_puts_r+0xac>
 804d87a:	69a2      	ldr	r2, [r4, #24]
 804d87c:	429a      	cmp	r2, r3
 804d87e:	dc06      	bgt.n	804d88e <_puts_r+0xb6>
 804d880:	290a      	cmp	r1, #10
 804d882:	d004      	beq.n	804d88e <_puts_r+0xb6>
 804d884:	6823      	ldr	r3, [r4, #0]
 804d886:	1c5a      	adds	r2, r3, #1
 804d888:	6022      	str	r2, [r4, #0]
 804d88a:	7019      	strb	r1, [r3, #0]
 804d88c:	e7c5      	b.n	804d81a <_puts_r+0x42>
 804d88e:	4622      	mov	r2, r4
 804d890:	4628      	mov	r0, r5
 804d892:	f000 f847 	bl	804d924 <__swbuf_r>
 804d896:	3001      	adds	r0, #1
 804d898:	d1bf      	bne.n	804d81a <_puts_r+0x42>
 804d89a:	e7df      	b.n	804d85c <_puts_r+0x84>
 804d89c:	6823      	ldr	r3, [r4, #0]
 804d89e:	250a      	movs	r5, #10
 804d8a0:	1c5a      	adds	r2, r3, #1
 804d8a2:	6022      	str	r2, [r4, #0]
 804d8a4:	701d      	strb	r5, [r3, #0]
 804d8a6:	e7db      	b.n	804d860 <_puts_r+0x88>
 804d8a8:	08051030 	.word	0x08051030
 804d8ac:	08051050 	.word	0x08051050
 804d8b0:	08051010 	.word	0x08051010

0804d8b4 <puts>:
 804d8b4:	4b02      	ldr	r3, [pc, #8]	; (804d8c0 <puts+0xc>)
 804d8b6:	4601      	mov	r1, r0
 804d8b8:	6818      	ldr	r0, [r3, #0]
 804d8ba:	f7ff bf8d 	b.w	804d7d8 <_puts_r>
 804d8be:	bf00      	nop
 804d8c0:	2000007c 	.word	0x2000007c

0804d8c4 <_sbrk_r>:
 804d8c4:	b538      	push	{r3, r4, r5, lr}
 804d8c6:	4d06      	ldr	r5, [pc, #24]	; (804d8e0 <_sbrk_r+0x1c>)
 804d8c8:	2300      	movs	r3, #0
 804d8ca:	4604      	mov	r4, r0
 804d8cc:	4608      	mov	r0, r1
 804d8ce:	602b      	str	r3, [r5, #0]
 804d8d0:	f7f4 fb8e 	bl	8041ff0 <_sbrk>
 804d8d4:	1c43      	adds	r3, r0, #1
 804d8d6:	d102      	bne.n	804d8de <_sbrk_r+0x1a>
 804d8d8:	682b      	ldr	r3, [r5, #0]
 804d8da:	b103      	cbz	r3, 804d8de <_sbrk_r+0x1a>
 804d8dc:	6023      	str	r3, [r4, #0]
 804d8de:	bd38      	pop	{r3, r4, r5, pc}
 804d8e0:	200011d0 	.word	0x200011d0

0804d8e4 <siprintf>:
 804d8e4:	b40e      	push	{r1, r2, r3}
 804d8e6:	b500      	push	{lr}
 804d8e8:	b09c      	sub	sp, #112	; 0x70
 804d8ea:	ab1d      	add	r3, sp, #116	; 0x74
 804d8ec:	9002      	str	r0, [sp, #8]
 804d8ee:	9006      	str	r0, [sp, #24]
 804d8f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 804d8f4:	4809      	ldr	r0, [pc, #36]	; (804d91c <siprintf+0x38>)
 804d8f6:	9107      	str	r1, [sp, #28]
 804d8f8:	9104      	str	r1, [sp, #16]
 804d8fa:	4909      	ldr	r1, [pc, #36]	; (804d920 <siprintf+0x3c>)
 804d8fc:	f853 2b04 	ldr.w	r2, [r3], #4
 804d900:	9105      	str	r1, [sp, #20]
 804d902:	6800      	ldr	r0, [r0, #0]
 804d904:	9301      	str	r3, [sp, #4]
 804d906:	a902      	add	r1, sp, #8
 804d908:	f000 fb54 	bl	804dfb4 <_svfiprintf_r>
 804d90c:	9b02      	ldr	r3, [sp, #8]
 804d90e:	2200      	movs	r2, #0
 804d910:	701a      	strb	r2, [r3, #0]
 804d912:	b01c      	add	sp, #112	; 0x70
 804d914:	f85d eb04 	ldr.w	lr, [sp], #4
 804d918:	b003      	add	sp, #12
 804d91a:	4770      	bx	lr
 804d91c:	2000007c 	.word	0x2000007c
 804d920:	ffff0208 	.word	0xffff0208

0804d924 <__swbuf_r>:
 804d924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804d926:	460e      	mov	r6, r1
 804d928:	4614      	mov	r4, r2
 804d92a:	4605      	mov	r5, r0
 804d92c:	b118      	cbz	r0, 804d936 <__swbuf_r+0x12>
 804d92e:	6983      	ldr	r3, [r0, #24]
 804d930:	b90b      	cbnz	r3, 804d936 <__swbuf_r+0x12>
 804d932:	f000 f9d1 	bl	804dcd8 <__sinit>
 804d936:	4b21      	ldr	r3, [pc, #132]	; (804d9bc <__swbuf_r+0x98>)
 804d938:	429c      	cmp	r4, r3
 804d93a:	d12b      	bne.n	804d994 <__swbuf_r+0x70>
 804d93c:	686c      	ldr	r4, [r5, #4]
 804d93e:	69a3      	ldr	r3, [r4, #24]
 804d940:	60a3      	str	r3, [r4, #8]
 804d942:	89a3      	ldrh	r3, [r4, #12]
 804d944:	071a      	lsls	r2, r3, #28
 804d946:	d52f      	bpl.n	804d9a8 <__swbuf_r+0x84>
 804d948:	6923      	ldr	r3, [r4, #16]
 804d94a:	b36b      	cbz	r3, 804d9a8 <__swbuf_r+0x84>
 804d94c:	6923      	ldr	r3, [r4, #16]
 804d94e:	6820      	ldr	r0, [r4, #0]
 804d950:	1ac0      	subs	r0, r0, r3
 804d952:	6963      	ldr	r3, [r4, #20]
 804d954:	b2f6      	uxtb	r6, r6
 804d956:	4283      	cmp	r3, r0
 804d958:	4637      	mov	r7, r6
 804d95a:	dc04      	bgt.n	804d966 <__swbuf_r+0x42>
 804d95c:	4621      	mov	r1, r4
 804d95e:	4628      	mov	r0, r5
 804d960:	f000 f926 	bl	804dbb0 <_fflush_r>
 804d964:	bb30      	cbnz	r0, 804d9b4 <__swbuf_r+0x90>
 804d966:	68a3      	ldr	r3, [r4, #8]
 804d968:	3b01      	subs	r3, #1
 804d96a:	60a3      	str	r3, [r4, #8]
 804d96c:	6823      	ldr	r3, [r4, #0]
 804d96e:	1c5a      	adds	r2, r3, #1
 804d970:	6022      	str	r2, [r4, #0]
 804d972:	701e      	strb	r6, [r3, #0]
 804d974:	6963      	ldr	r3, [r4, #20]
 804d976:	3001      	adds	r0, #1
 804d978:	4283      	cmp	r3, r0
 804d97a:	d004      	beq.n	804d986 <__swbuf_r+0x62>
 804d97c:	89a3      	ldrh	r3, [r4, #12]
 804d97e:	07db      	lsls	r3, r3, #31
 804d980:	d506      	bpl.n	804d990 <__swbuf_r+0x6c>
 804d982:	2e0a      	cmp	r6, #10
 804d984:	d104      	bne.n	804d990 <__swbuf_r+0x6c>
 804d986:	4621      	mov	r1, r4
 804d988:	4628      	mov	r0, r5
 804d98a:	f000 f911 	bl	804dbb0 <_fflush_r>
 804d98e:	b988      	cbnz	r0, 804d9b4 <__swbuf_r+0x90>
 804d990:	4638      	mov	r0, r7
 804d992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804d994:	4b0a      	ldr	r3, [pc, #40]	; (804d9c0 <__swbuf_r+0x9c>)
 804d996:	429c      	cmp	r4, r3
 804d998:	d101      	bne.n	804d99e <__swbuf_r+0x7a>
 804d99a:	68ac      	ldr	r4, [r5, #8]
 804d99c:	e7cf      	b.n	804d93e <__swbuf_r+0x1a>
 804d99e:	4b09      	ldr	r3, [pc, #36]	; (804d9c4 <__swbuf_r+0xa0>)
 804d9a0:	429c      	cmp	r4, r3
 804d9a2:	bf08      	it	eq
 804d9a4:	68ec      	ldreq	r4, [r5, #12]
 804d9a6:	e7ca      	b.n	804d93e <__swbuf_r+0x1a>
 804d9a8:	4621      	mov	r1, r4
 804d9aa:	4628      	mov	r0, r5
 804d9ac:	f000 f80c 	bl	804d9c8 <__swsetup_r>
 804d9b0:	2800      	cmp	r0, #0
 804d9b2:	d0cb      	beq.n	804d94c <__swbuf_r+0x28>
 804d9b4:	f04f 37ff 	mov.w	r7, #4294967295
 804d9b8:	e7ea      	b.n	804d990 <__swbuf_r+0x6c>
 804d9ba:	bf00      	nop
 804d9bc:	08051030 	.word	0x08051030
 804d9c0:	08051050 	.word	0x08051050
 804d9c4:	08051010 	.word	0x08051010

0804d9c8 <__swsetup_r>:
 804d9c8:	4b32      	ldr	r3, [pc, #200]	; (804da94 <__swsetup_r+0xcc>)
 804d9ca:	b570      	push	{r4, r5, r6, lr}
 804d9cc:	681d      	ldr	r5, [r3, #0]
 804d9ce:	4606      	mov	r6, r0
 804d9d0:	460c      	mov	r4, r1
 804d9d2:	b125      	cbz	r5, 804d9de <__swsetup_r+0x16>
 804d9d4:	69ab      	ldr	r3, [r5, #24]
 804d9d6:	b913      	cbnz	r3, 804d9de <__swsetup_r+0x16>
 804d9d8:	4628      	mov	r0, r5
 804d9da:	f000 f97d 	bl	804dcd8 <__sinit>
 804d9de:	4b2e      	ldr	r3, [pc, #184]	; (804da98 <__swsetup_r+0xd0>)
 804d9e0:	429c      	cmp	r4, r3
 804d9e2:	d10f      	bne.n	804da04 <__swsetup_r+0x3c>
 804d9e4:	686c      	ldr	r4, [r5, #4]
 804d9e6:	89a3      	ldrh	r3, [r4, #12]
 804d9e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804d9ec:	0719      	lsls	r1, r3, #28
 804d9ee:	d42c      	bmi.n	804da4a <__swsetup_r+0x82>
 804d9f0:	06dd      	lsls	r5, r3, #27
 804d9f2:	d411      	bmi.n	804da18 <__swsetup_r+0x50>
 804d9f4:	2309      	movs	r3, #9
 804d9f6:	6033      	str	r3, [r6, #0]
 804d9f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 804d9fc:	81a3      	strh	r3, [r4, #12]
 804d9fe:	f04f 30ff 	mov.w	r0, #4294967295
 804da02:	e03e      	b.n	804da82 <__swsetup_r+0xba>
 804da04:	4b25      	ldr	r3, [pc, #148]	; (804da9c <__swsetup_r+0xd4>)
 804da06:	429c      	cmp	r4, r3
 804da08:	d101      	bne.n	804da0e <__swsetup_r+0x46>
 804da0a:	68ac      	ldr	r4, [r5, #8]
 804da0c:	e7eb      	b.n	804d9e6 <__swsetup_r+0x1e>
 804da0e:	4b24      	ldr	r3, [pc, #144]	; (804daa0 <__swsetup_r+0xd8>)
 804da10:	429c      	cmp	r4, r3
 804da12:	bf08      	it	eq
 804da14:	68ec      	ldreq	r4, [r5, #12]
 804da16:	e7e6      	b.n	804d9e6 <__swsetup_r+0x1e>
 804da18:	0758      	lsls	r0, r3, #29
 804da1a:	d512      	bpl.n	804da42 <__swsetup_r+0x7a>
 804da1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804da1e:	b141      	cbz	r1, 804da32 <__swsetup_r+0x6a>
 804da20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804da24:	4299      	cmp	r1, r3
 804da26:	d002      	beq.n	804da2e <__swsetup_r+0x66>
 804da28:	4630      	mov	r0, r6
 804da2a:	f7ff fddd 	bl	804d5e8 <_free_r>
 804da2e:	2300      	movs	r3, #0
 804da30:	6363      	str	r3, [r4, #52]	; 0x34
 804da32:	89a3      	ldrh	r3, [r4, #12]
 804da34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 804da38:	81a3      	strh	r3, [r4, #12]
 804da3a:	2300      	movs	r3, #0
 804da3c:	6063      	str	r3, [r4, #4]
 804da3e:	6923      	ldr	r3, [r4, #16]
 804da40:	6023      	str	r3, [r4, #0]
 804da42:	89a3      	ldrh	r3, [r4, #12]
 804da44:	f043 0308 	orr.w	r3, r3, #8
 804da48:	81a3      	strh	r3, [r4, #12]
 804da4a:	6923      	ldr	r3, [r4, #16]
 804da4c:	b94b      	cbnz	r3, 804da62 <__swsetup_r+0x9a>
 804da4e:	89a3      	ldrh	r3, [r4, #12]
 804da50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 804da54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804da58:	d003      	beq.n	804da62 <__swsetup_r+0x9a>
 804da5a:	4621      	mov	r1, r4
 804da5c:	4630      	mov	r0, r6
 804da5e:	f000 fa01 	bl	804de64 <__smakebuf_r>
 804da62:	89a0      	ldrh	r0, [r4, #12]
 804da64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804da68:	f010 0301 	ands.w	r3, r0, #1
 804da6c:	d00a      	beq.n	804da84 <__swsetup_r+0xbc>
 804da6e:	2300      	movs	r3, #0
 804da70:	60a3      	str	r3, [r4, #8]
 804da72:	6963      	ldr	r3, [r4, #20]
 804da74:	425b      	negs	r3, r3
 804da76:	61a3      	str	r3, [r4, #24]
 804da78:	6923      	ldr	r3, [r4, #16]
 804da7a:	b943      	cbnz	r3, 804da8e <__swsetup_r+0xc6>
 804da7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 804da80:	d1ba      	bne.n	804d9f8 <__swsetup_r+0x30>
 804da82:	bd70      	pop	{r4, r5, r6, pc}
 804da84:	0781      	lsls	r1, r0, #30
 804da86:	bf58      	it	pl
 804da88:	6963      	ldrpl	r3, [r4, #20]
 804da8a:	60a3      	str	r3, [r4, #8]
 804da8c:	e7f4      	b.n	804da78 <__swsetup_r+0xb0>
 804da8e:	2000      	movs	r0, #0
 804da90:	e7f7      	b.n	804da82 <__swsetup_r+0xba>
 804da92:	bf00      	nop
 804da94:	2000007c 	.word	0x2000007c
 804da98:	08051030 	.word	0x08051030
 804da9c:	08051050 	.word	0x08051050
 804daa0:	08051010 	.word	0x08051010

0804daa4 <__sflush_r>:
 804daa4:	898a      	ldrh	r2, [r1, #12]
 804daa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804daaa:	4605      	mov	r5, r0
 804daac:	0710      	lsls	r0, r2, #28
 804daae:	460c      	mov	r4, r1
 804dab0:	d458      	bmi.n	804db64 <__sflush_r+0xc0>
 804dab2:	684b      	ldr	r3, [r1, #4]
 804dab4:	2b00      	cmp	r3, #0
 804dab6:	dc05      	bgt.n	804dac4 <__sflush_r+0x20>
 804dab8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 804daba:	2b00      	cmp	r3, #0
 804dabc:	dc02      	bgt.n	804dac4 <__sflush_r+0x20>
 804dabe:	2000      	movs	r0, #0
 804dac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804dac4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804dac6:	2e00      	cmp	r6, #0
 804dac8:	d0f9      	beq.n	804dabe <__sflush_r+0x1a>
 804daca:	2300      	movs	r3, #0
 804dacc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 804dad0:	682f      	ldr	r7, [r5, #0]
 804dad2:	602b      	str	r3, [r5, #0]
 804dad4:	d032      	beq.n	804db3c <__sflush_r+0x98>
 804dad6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804dad8:	89a3      	ldrh	r3, [r4, #12]
 804dada:	075a      	lsls	r2, r3, #29
 804dadc:	d505      	bpl.n	804daea <__sflush_r+0x46>
 804dade:	6863      	ldr	r3, [r4, #4]
 804dae0:	1ac0      	subs	r0, r0, r3
 804dae2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804dae4:	b10b      	cbz	r3, 804daea <__sflush_r+0x46>
 804dae6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804dae8:	1ac0      	subs	r0, r0, r3
 804daea:	2300      	movs	r3, #0
 804daec:	4602      	mov	r2, r0
 804daee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804daf0:	6a21      	ldr	r1, [r4, #32]
 804daf2:	4628      	mov	r0, r5
 804daf4:	47b0      	blx	r6
 804daf6:	1c43      	adds	r3, r0, #1
 804daf8:	89a3      	ldrh	r3, [r4, #12]
 804dafa:	d106      	bne.n	804db0a <__sflush_r+0x66>
 804dafc:	6829      	ldr	r1, [r5, #0]
 804dafe:	291d      	cmp	r1, #29
 804db00:	d82c      	bhi.n	804db5c <__sflush_r+0xb8>
 804db02:	4a2a      	ldr	r2, [pc, #168]	; (804dbac <__sflush_r+0x108>)
 804db04:	40ca      	lsrs	r2, r1
 804db06:	07d6      	lsls	r6, r2, #31
 804db08:	d528      	bpl.n	804db5c <__sflush_r+0xb8>
 804db0a:	2200      	movs	r2, #0
 804db0c:	6062      	str	r2, [r4, #4]
 804db0e:	04d9      	lsls	r1, r3, #19
 804db10:	6922      	ldr	r2, [r4, #16]
 804db12:	6022      	str	r2, [r4, #0]
 804db14:	d504      	bpl.n	804db20 <__sflush_r+0x7c>
 804db16:	1c42      	adds	r2, r0, #1
 804db18:	d101      	bne.n	804db1e <__sflush_r+0x7a>
 804db1a:	682b      	ldr	r3, [r5, #0]
 804db1c:	b903      	cbnz	r3, 804db20 <__sflush_r+0x7c>
 804db1e:	6560      	str	r0, [r4, #84]	; 0x54
 804db20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804db22:	602f      	str	r7, [r5, #0]
 804db24:	2900      	cmp	r1, #0
 804db26:	d0ca      	beq.n	804dabe <__sflush_r+0x1a>
 804db28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804db2c:	4299      	cmp	r1, r3
 804db2e:	d002      	beq.n	804db36 <__sflush_r+0x92>
 804db30:	4628      	mov	r0, r5
 804db32:	f7ff fd59 	bl	804d5e8 <_free_r>
 804db36:	2000      	movs	r0, #0
 804db38:	6360      	str	r0, [r4, #52]	; 0x34
 804db3a:	e7c1      	b.n	804dac0 <__sflush_r+0x1c>
 804db3c:	6a21      	ldr	r1, [r4, #32]
 804db3e:	2301      	movs	r3, #1
 804db40:	4628      	mov	r0, r5
 804db42:	47b0      	blx	r6
 804db44:	1c41      	adds	r1, r0, #1
 804db46:	d1c7      	bne.n	804dad8 <__sflush_r+0x34>
 804db48:	682b      	ldr	r3, [r5, #0]
 804db4a:	2b00      	cmp	r3, #0
 804db4c:	d0c4      	beq.n	804dad8 <__sflush_r+0x34>
 804db4e:	2b1d      	cmp	r3, #29
 804db50:	d001      	beq.n	804db56 <__sflush_r+0xb2>
 804db52:	2b16      	cmp	r3, #22
 804db54:	d101      	bne.n	804db5a <__sflush_r+0xb6>
 804db56:	602f      	str	r7, [r5, #0]
 804db58:	e7b1      	b.n	804dabe <__sflush_r+0x1a>
 804db5a:	89a3      	ldrh	r3, [r4, #12]
 804db5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804db60:	81a3      	strh	r3, [r4, #12]
 804db62:	e7ad      	b.n	804dac0 <__sflush_r+0x1c>
 804db64:	690f      	ldr	r7, [r1, #16]
 804db66:	2f00      	cmp	r7, #0
 804db68:	d0a9      	beq.n	804dabe <__sflush_r+0x1a>
 804db6a:	0793      	lsls	r3, r2, #30
 804db6c:	680e      	ldr	r6, [r1, #0]
 804db6e:	bf08      	it	eq
 804db70:	694b      	ldreq	r3, [r1, #20]
 804db72:	600f      	str	r7, [r1, #0]
 804db74:	bf18      	it	ne
 804db76:	2300      	movne	r3, #0
 804db78:	eba6 0807 	sub.w	r8, r6, r7
 804db7c:	608b      	str	r3, [r1, #8]
 804db7e:	f1b8 0f00 	cmp.w	r8, #0
 804db82:	dd9c      	ble.n	804dabe <__sflush_r+0x1a>
 804db84:	6a21      	ldr	r1, [r4, #32]
 804db86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 804db88:	4643      	mov	r3, r8
 804db8a:	463a      	mov	r2, r7
 804db8c:	4628      	mov	r0, r5
 804db8e:	47b0      	blx	r6
 804db90:	2800      	cmp	r0, #0
 804db92:	dc06      	bgt.n	804dba2 <__sflush_r+0xfe>
 804db94:	89a3      	ldrh	r3, [r4, #12]
 804db96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804db9a:	81a3      	strh	r3, [r4, #12]
 804db9c:	f04f 30ff 	mov.w	r0, #4294967295
 804dba0:	e78e      	b.n	804dac0 <__sflush_r+0x1c>
 804dba2:	4407      	add	r7, r0
 804dba4:	eba8 0800 	sub.w	r8, r8, r0
 804dba8:	e7e9      	b.n	804db7e <__sflush_r+0xda>
 804dbaa:	bf00      	nop
 804dbac:	20400001 	.word	0x20400001

0804dbb0 <_fflush_r>:
 804dbb0:	b538      	push	{r3, r4, r5, lr}
 804dbb2:	690b      	ldr	r3, [r1, #16]
 804dbb4:	4605      	mov	r5, r0
 804dbb6:	460c      	mov	r4, r1
 804dbb8:	b913      	cbnz	r3, 804dbc0 <_fflush_r+0x10>
 804dbba:	2500      	movs	r5, #0
 804dbbc:	4628      	mov	r0, r5
 804dbbe:	bd38      	pop	{r3, r4, r5, pc}
 804dbc0:	b118      	cbz	r0, 804dbca <_fflush_r+0x1a>
 804dbc2:	6983      	ldr	r3, [r0, #24]
 804dbc4:	b90b      	cbnz	r3, 804dbca <_fflush_r+0x1a>
 804dbc6:	f000 f887 	bl	804dcd8 <__sinit>
 804dbca:	4b14      	ldr	r3, [pc, #80]	; (804dc1c <_fflush_r+0x6c>)
 804dbcc:	429c      	cmp	r4, r3
 804dbce:	d11b      	bne.n	804dc08 <_fflush_r+0x58>
 804dbd0:	686c      	ldr	r4, [r5, #4]
 804dbd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804dbd6:	2b00      	cmp	r3, #0
 804dbd8:	d0ef      	beq.n	804dbba <_fflush_r+0xa>
 804dbda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 804dbdc:	07d0      	lsls	r0, r2, #31
 804dbde:	d404      	bmi.n	804dbea <_fflush_r+0x3a>
 804dbe0:	0599      	lsls	r1, r3, #22
 804dbe2:	d402      	bmi.n	804dbea <_fflush_r+0x3a>
 804dbe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804dbe6:	f000 f915 	bl	804de14 <__retarget_lock_acquire_recursive>
 804dbea:	4628      	mov	r0, r5
 804dbec:	4621      	mov	r1, r4
 804dbee:	f7ff ff59 	bl	804daa4 <__sflush_r>
 804dbf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804dbf4:	07da      	lsls	r2, r3, #31
 804dbf6:	4605      	mov	r5, r0
 804dbf8:	d4e0      	bmi.n	804dbbc <_fflush_r+0xc>
 804dbfa:	89a3      	ldrh	r3, [r4, #12]
 804dbfc:	059b      	lsls	r3, r3, #22
 804dbfe:	d4dd      	bmi.n	804dbbc <_fflush_r+0xc>
 804dc00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804dc02:	f000 f908 	bl	804de16 <__retarget_lock_release_recursive>
 804dc06:	e7d9      	b.n	804dbbc <_fflush_r+0xc>
 804dc08:	4b05      	ldr	r3, [pc, #20]	; (804dc20 <_fflush_r+0x70>)
 804dc0a:	429c      	cmp	r4, r3
 804dc0c:	d101      	bne.n	804dc12 <_fflush_r+0x62>
 804dc0e:	68ac      	ldr	r4, [r5, #8]
 804dc10:	e7df      	b.n	804dbd2 <_fflush_r+0x22>
 804dc12:	4b04      	ldr	r3, [pc, #16]	; (804dc24 <_fflush_r+0x74>)
 804dc14:	429c      	cmp	r4, r3
 804dc16:	bf08      	it	eq
 804dc18:	68ec      	ldreq	r4, [r5, #12]
 804dc1a:	e7da      	b.n	804dbd2 <_fflush_r+0x22>
 804dc1c:	08051030 	.word	0x08051030
 804dc20:	08051050 	.word	0x08051050
 804dc24:	08051010 	.word	0x08051010

0804dc28 <std>:
 804dc28:	2300      	movs	r3, #0
 804dc2a:	b510      	push	{r4, lr}
 804dc2c:	4604      	mov	r4, r0
 804dc2e:	e9c0 3300 	strd	r3, r3, [r0]
 804dc32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804dc36:	6083      	str	r3, [r0, #8]
 804dc38:	8181      	strh	r1, [r0, #12]
 804dc3a:	6643      	str	r3, [r0, #100]	; 0x64
 804dc3c:	81c2      	strh	r2, [r0, #14]
 804dc3e:	6183      	str	r3, [r0, #24]
 804dc40:	4619      	mov	r1, r3
 804dc42:	2208      	movs	r2, #8
 804dc44:	305c      	adds	r0, #92	; 0x5c
 804dc46:	f7ff fcc7 	bl	804d5d8 <memset>
 804dc4a:	4b05      	ldr	r3, [pc, #20]	; (804dc60 <std+0x38>)
 804dc4c:	6263      	str	r3, [r4, #36]	; 0x24
 804dc4e:	4b05      	ldr	r3, [pc, #20]	; (804dc64 <std+0x3c>)
 804dc50:	62a3      	str	r3, [r4, #40]	; 0x28
 804dc52:	4b05      	ldr	r3, [pc, #20]	; (804dc68 <std+0x40>)
 804dc54:	62e3      	str	r3, [r4, #44]	; 0x2c
 804dc56:	4b05      	ldr	r3, [pc, #20]	; (804dc6c <std+0x44>)
 804dc58:	6224      	str	r4, [r4, #32]
 804dc5a:	6323      	str	r3, [r4, #48]	; 0x30
 804dc5c:	bd10      	pop	{r4, pc}
 804dc5e:	bf00      	nop
 804dc60:	0804e791 	.word	0x0804e791
 804dc64:	0804e7b3 	.word	0x0804e7b3
 804dc68:	0804e7eb 	.word	0x0804e7eb
 804dc6c:	0804e80f 	.word	0x0804e80f

0804dc70 <_cleanup_r>:
 804dc70:	4901      	ldr	r1, [pc, #4]	; (804dc78 <_cleanup_r+0x8>)
 804dc72:	f000 b8af 	b.w	804ddd4 <_fwalk_reent>
 804dc76:	bf00      	nop
 804dc78:	0804dbb1 	.word	0x0804dbb1

0804dc7c <__sfmoreglue>:
 804dc7c:	b570      	push	{r4, r5, r6, lr}
 804dc7e:	2268      	movs	r2, #104	; 0x68
 804dc80:	1e4d      	subs	r5, r1, #1
 804dc82:	4355      	muls	r5, r2
 804dc84:	460e      	mov	r6, r1
 804dc86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 804dc8a:	f7ff fd19 	bl	804d6c0 <_malloc_r>
 804dc8e:	4604      	mov	r4, r0
 804dc90:	b140      	cbz	r0, 804dca4 <__sfmoreglue+0x28>
 804dc92:	2100      	movs	r1, #0
 804dc94:	e9c0 1600 	strd	r1, r6, [r0]
 804dc98:	300c      	adds	r0, #12
 804dc9a:	60a0      	str	r0, [r4, #8]
 804dc9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 804dca0:	f7ff fc9a 	bl	804d5d8 <memset>
 804dca4:	4620      	mov	r0, r4
 804dca6:	bd70      	pop	{r4, r5, r6, pc}

0804dca8 <__sfp_lock_acquire>:
 804dca8:	4801      	ldr	r0, [pc, #4]	; (804dcb0 <__sfp_lock_acquire+0x8>)
 804dcaa:	f000 b8b3 	b.w	804de14 <__retarget_lock_acquire_recursive>
 804dcae:	bf00      	nop
 804dcb0:	200011cd 	.word	0x200011cd

0804dcb4 <__sfp_lock_release>:
 804dcb4:	4801      	ldr	r0, [pc, #4]	; (804dcbc <__sfp_lock_release+0x8>)
 804dcb6:	f000 b8ae 	b.w	804de16 <__retarget_lock_release_recursive>
 804dcba:	bf00      	nop
 804dcbc:	200011cd 	.word	0x200011cd

0804dcc0 <__sinit_lock_acquire>:
 804dcc0:	4801      	ldr	r0, [pc, #4]	; (804dcc8 <__sinit_lock_acquire+0x8>)
 804dcc2:	f000 b8a7 	b.w	804de14 <__retarget_lock_acquire_recursive>
 804dcc6:	bf00      	nop
 804dcc8:	200011ce 	.word	0x200011ce

0804dccc <__sinit_lock_release>:
 804dccc:	4801      	ldr	r0, [pc, #4]	; (804dcd4 <__sinit_lock_release+0x8>)
 804dcce:	f000 b8a2 	b.w	804de16 <__retarget_lock_release_recursive>
 804dcd2:	bf00      	nop
 804dcd4:	200011ce 	.word	0x200011ce

0804dcd8 <__sinit>:
 804dcd8:	b510      	push	{r4, lr}
 804dcda:	4604      	mov	r4, r0
 804dcdc:	f7ff fff0 	bl	804dcc0 <__sinit_lock_acquire>
 804dce0:	69a3      	ldr	r3, [r4, #24]
 804dce2:	b11b      	cbz	r3, 804dcec <__sinit+0x14>
 804dce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804dce8:	f7ff bff0 	b.w	804dccc <__sinit_lock_release>
 804dcec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 804dcf0:	6523      	str	r3, [r4, #80]	; 0x50
 804dcf2:	4b13      	ldr	r3, [pc, #76]	; (804dd40 <__sinit+0x68>)
 804dcf4:	4a13      	ldr	r2, [pc, #76]	; (804dd44 <__sinit+0x6c>)
 804dcf6:	681b      	ldr	r3, [r3, #0]
 804dcf8:	62a2      	str	r2, [r4, #40]	; 0x28
 804dcfa:	42a3      	cmp	r3, r4
 804dcfc:	bf04      	itt	eq
 804dcfe:	2301      	moveq	r3, #1
 804dd00:	61a3      	streq	r3, [r4, #24]
 804dd02:	4620      	mov	r0, r4
 804dd04:	f000 f820 	bl	804dd48 <__sfp>
 804dd08:	6060      	str	r0, [r4, #4]
 804dd0a:	4620      	mov	r0, r4
 804dd0c:	f000 f81c 	bl	804dd48 <__sfp>
 804dd10:	60a0      	str	r0, [r4, #8]
 804dd12:	4620      	mov	r0, r4
 804dd14:	f000 f818 	bl	804dd48 <__sfp>
 804dd18:	2200      	movs	r2, #0
 804dd1a:	60e0      	str	r0, [r4, #12]
 804dd1c:	2104      	movs	r1, #4
 804dd1e:	6860      	ldr	r0, [r4, #4]
 804dd20:	f7ff ff82 	bl	804dc28 <std>
 804dd24:	68a0      	ldr	r0, [r4, #8]
 804dd26:	2201      	movs	r2, #1
 804dd28:	2109      	movs	r1, #9
 804dd2a:	f7ff ff7d 	bl	804dc28 <std>
 804dd2e:	68e0      	ldr	r0, [r4, #12]
 804dd30:	2202      	movs	r2, #2
 804dd32:	2112      	movs	r1, #18
 804dd34:	f7ff ff78 	bl	804dc28 <std>
 804dd38:	2301      	movs	r3, #1
 804dd3a:	61a3      	str	r3, [r4, #24]
 804dd3c:	e7d2      	b.n	804dce4 <__sinit+0xc>
 804dd3e:	bf00      	nop
 804dd40:	0805100c 	.word	0x0805100c
 804dd44:	0804dc71 	.word	0x0804dc71

0804dd48 <__sfp>:
 804dd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804dd4a:	4607      	mov	r7, r0
 804dd4c:	f7ff ffac 	bl	804dca8 <__sfp_lock_acquire>
 804dd50:	4b1e      	ldr	r3, [pc, #120]	; (804ddcc <__sfp+0x84>)
 804dd52:	681e      	ldr	r6, [r3, #0]
 804dd54:	69b3      	ldr	r3, [r6, #24]
 804dd56:	b913      	cbnz	r3, 804dd5e <__sfp+0x16>
 804dd58:	4630      	mov	r0, r6
 804dd5a:	f7ff ffbd 	bl	804dcd8 <__sinit>
 804dd5e:	3648      	adds	r6, #72	; 0x48
 804dd60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 804dd64:	3b01      	subs	r3, #1
 804dd66:	d503      	bpl.n	804dd70 <__sfp+0x28>
 804dd68:	6833      	ldr	r3, [r6, #0]
 804dd6a:	b30b      	cbz	r3, 804ddb0 <__sfp+0x68>
 804dd6c:	6836      	ldr	r6, [r6, #0]
 804dd6e:	e7f7      	b.n	804dd60 <__sfp+0x18>
 804dd70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 804dd74:	b9d5      	cbnz	r5, 804ddac <__sfp+0x64>
 804dd76:	4b16      	ldr	r3, [pc, #88]	; (804ddd0 <__sfp+0x88>)
 804dd78:	60e3      	str	r3, [r4, #12]
 804dd7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 804dd7e:	6665      	str	r5, [r4, #100]	; 0x64
 804dd80:	f000 f847 	bl	804de12 <__retarget_lock_init_recursive>
 804dd84:	f7ff ff96 	bl	804dcb4 <__sfp_lock_release>
 804dd88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 804dd8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 804dd90:	6025      	str	r5, [r4, #0]
 804dd92:	61a5      	str	r5, [r4, #24]
 804dd94:	2208      	movs	r2, #8
 804dd96:	4629      	mov	r1, r5
 804dd98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 804dd9c:	f7ff fc1c 	bl	804d5d8 <memset>
 804dda0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 804dda4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 804dda8:	4620      	mov	r0, r4
 804ddaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804ddac:	3468      	adds	r4, #104	; 0x68
 804ddae:	e7d9      	b.n	804dd64 <__sfp+0x1c>
 804ddb0:	2104      	movs	r1, #4
 804ddb2:	4638      	mov	r0, r7
 804ddb4:	f7ff ff62 	bl	804dc7c <__sfmoreglue>
 804ddb8:	4604      	mov	r4, r0
 804ddba:	6030      	str	r0, [r6, #0]
 804ddbc:	2800      	cmp	r0, #0
 804ddbe:	d1d5      	bne.n	804dd6c <__sfp+0x24>
 804ddc0:	f7ff ff78 	bl	804dcb4 <__sfp_lock_release>
 804ddc4:	230c      	movs	r3, #12
 804ddc6:	603b      	str	r3, [r7, #0]
 804ddc8:	e7ee      	b.n	804dda8 <__sfp+0x60>
 804ddca:	bf00      	nop
 804ddcc:	0805100c 	.word	0x0805100c
 804ddd0:	ffff0001 	.word	0xffff0001

0804ddd4 <_fwalk_reent>:
 804ddd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804ddd8:	4606      	mov	r6, r0
 804ddda:	4688      	mov	r8, r1
 804dddc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 804dde0:	2700      	movs	r7, #0
 804dde2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 804dde6:	f1b9 0901 	subs.w	r9, r9, #1
 804ddea:	d505      	bpl.n	804ddf8 <_fwalk_reent+0x24>
 804ddec:	6824      	ldr	r4, [r4, #0]
 804ddee:	2c00      	cmp	r4, #0
 804ddf0:	d1f7      	bne.n	804dde2 <_fwalk_reent+0xe>
 804ddf2:	4638      	mov	r0, r7
 804ddf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804ddf8:	89ab      	ldrh	r3, [r5, #12]
 804ddfa:	2b01      	cmp	r3, #1
 804ddfc:	d907      	bls.n	804de0e <_fwalk_reent+0x3a>
 804ddfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804de02:	3301      	adds	r3, #1
 804de04:	d003      	beq.n	804de0e <_fwalk_reent+0x3a>
 804de06:	4629      	mov	r1, r5
 804de08:	4630      	mov	r0, r6
 804de0a:	47c0      	blx	r8
 804de0c:	4307      	orrs	r7, r0
 804de0e:	3568      	adds	r5, #104	; 0x68
 804de10:	e7e9      	b.n	804dde6 <_fwalk_reent+0x12>

0804de12 <__retarget_lock_init_recursive>:
 804de12:	4770      	bx	lr

0804de14 <__retarget_lock_acquire_recursive>:
 804de14:	4770      	bx	lr

0804de16 <__retarget_lock_release_recursive>:
 804de16:	4770      	bx	lr

0804de18 <__swhatbuf_r>:
 804de18:	b570      	push	{r4, r5, r6, lr}
 804de1a:	460e      	mov	r6, r1
 804de1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804de20:	2900      	cmp	r1, #0
 804de22:	b096      	sub	sp, #88	; 0x58
 804de24:	4614      	mov	r4, r2
 804de26:	461d      	mov	r5, r3
 804de28:	da08      	bge.n	804de3c <__swhatbuf_r+0x24>
 804de2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 804de2e:	2200      	movs	r2, #0
 804de30:	602a      	str	r2, [r5, #0]
 804de32:	061a      	lsls	r2, r3, #24
 804de34:	d410      	bmi.n	804de58 <__swhatbuf_r+0x40>
 804de36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804de3a:	e00e      	b.n	804de5a <__swhatbuf_r+0x42>
 804de3c:	466a      	mov	r2, sp
 804de3e:	f000 fd0d 	bl	804e85c <_fstat_r>
 804de42:	2800      	cmp	r0, #0
 804de44:	dbf1      	blt.n	804de2a <__swhatbuf_r+0x12>
 804de46:	9a01      	ldr	r2, [sp, #4]
 804de48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 804de4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 804de50:	425a      	negs	r2, r3
 804de52:	415a      	adcs	r2, r3
 804de54:	602a      	str	r2, [r5, #0]
 804de56:	e7ee      	b.n	804de36 <__swhatbuf_r+0x1e>
 804de58:	2340      	movs	r3, #64	; 0x40
 804de5a:	2000      	movs	r0, #0
 804de5c:	6023      	str	r3, [r4, #0]
 804de5e:	b016      	add	sp, #88	; 0x58
 804de60:	bd70      	pop	{r4, r5, r6, pc}
	...

0804de64 <__smakebuf_r>:
 804de64:	898b      	ldrh	r3, [r1, #12]
 804de66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804de68:	079d      	lsls	r5, r3, #30
 804de6a:	4606      	mov	r6, r0
 804de6c:	460c      	mov	r4, r1
 804de6e:	d507      	bpl.n	804de80 <__smakebuf_r+0x1c>
 804de70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804de74:	6023      	str	r3, [r4, #0]
 804de76:	6123      	str	r3, [r4, #16]
 804de78:	2301      	movs	r3, #1
 804de7a:	6163      	str	r3, [r4, #20]
 804de7c:	b002      	add	sp, #8
 804de7e:	bd70      	pop	{r4, r5, r6, pc}
 804de80:	ab01      	add	r3, sp, #4
 804de82:	466a      	mov	r2, sp
 804de84:	f7ff ffc8 	bl	804de18 <__swhatbuf_r>
 804de88:	9900      	ldr	r1, [sp, #0]
 804de8a:	4605      	mov	r5, r0
 804de8c:	4630      	mov	r0, r6
 804de8e:	f7ff fc17 	bl	804d6c0 <_malloc_r>
 804de92:	b948      	cbnz	r0, 804dea8 <__smakebuf_r+0x44>
 804de94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804de98:	059a      	lsls	r2, r3, #22
 804de9a:	d4ef      	bmi.n	804de7c <__smakebuf_r+0x18>
 804de9c:	f023 0303 	bic.w	r3, r3, #3
 804dea0:	f043 0302 	orr.w	r3, r3, #2
 804dea4:	81a3      	strh	r3, [r4, #12]
 804dea6:	e7e3      	b.n	804de70 <__smakebuf_r+0xc>
 804dea8:	4b0d      	ldr	r3, [pc, #52]	; (804dee0 <__smakebuf_r+0x7c>)
 804deaa:	62b3      	str	r3, [r6, #40]	; 0x28
 804deac:	89a3      	ldrh	r3, [r4, #12]
 804deae:	6020      	str	r0, [r4, #0]
 804deb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804deb4:	81a3      	strh	r3, [r4, #12]
 804deb6:	9b00      	ldr	r3, [sp, #0]
 804deb8:	6163      	str	r3, [r4, #20]
 804deba:	9b01      	ldr	r3, [sp, #4]
 804debc:	6120      	str	r0, [r4, #16]
 804debe:	b15b      	cbz	r3, 804ded8 <__smakebuf_r+0x74>
 804dec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804dec4:	4630      	mov	r0, r6
 804dec6:	f000 fcdb 	bl	804e880 <_isatty_r>
 804deca:	b128      	cbz	r0, 804ded8 <__smakebuf_r+0x74>
 804decc:	89a3      	ldrh	r3, [r4, #12]
 804dece:	f023 0303 	bic.w	r3, r3, #3
 804ded2:	f043 0301 	orr.w	r3, r3, #1
 804ded6:	81a3      	strh	r3, [r4, #12]
 804ded8:	89a0      	ldrh	r0, [r4, #12]
 804deda:	4305      	orrs	r5, r0
 804dedc:	81a5      	strh	r5, [r4, #12]
 804dede:	e7cd      	b.n	804de7c <__smakebuf_r+0x18>
 804dee0:	0804dc71 	.word	0x0804dc71

0804dee4 <__malloc_lock>:
 804dee4:	4801      	ldr	r0, [pc, #4]	; (804deec <__malloc_lock+0x8>)
 804dee6:	f7ff bf95 	b.w	804de14 <__retarget_lock_acquire_recursive>
 804deea:	bf00      	nop
 804deec:	200011cc 	.word	0x200011cc

0804def0 <__malloc_unlock>:
 804def0:	4801      	ldr	r0, [pc, #4]	; (804def8 <__malloc_unlock+0x8>)
 804def2:	f7ff bf90 	b.w	804de16 <__retarget_lock_release_recursive>
 804def6:	bf00      	nop
 804def8:	200011cc 	.word	0x200011cc

0804defc <__ssputs_r>:
 804defc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804df00:	688e      	ldr	r6, [r1, #8]
 804df02:	429e      	cmp	r6, r3
 804df04:	4682      	mov	sl, r0
 804df06:	460c      	mov	r4, r1
 804df08:	4690      	mov	r8, r2
 804df0a:	461f      	mov	r7, r3
 804df0c:	d838      	bhi.n	804df80 <__ssputs_r+0x84>
 804df0e:	898a      	ldrh	r2, [r1, #12]
 804df10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 804df14:	d032      	beq.n	804df7c <__ssputs_r+0x80>
 804df16:	6825      	ldr	r5, [r4, #0]
 804df18:	6909      	ldr	r1, [r1, #16]
 804df1a:	eba5 0901 	sub.w	r9, r5, r1
 804df1e:	6965      	ldr	r5, [r4, #20]
 804df20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 804df24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 804df28:	3301      	adds	r3, #1
 804df2a:	444b      	add	r3, r9
 804df2c:	106d      	asrs	r5, r5, #1
 804df2e:	429d      	cmp	r5, r3
 804df30:	bf38      	it	cc
 804df32:	461d      	movcc	r5, r3
 804df34:	0553      	lsls	r3, r2, #21
 804df36:	d531      	bpl.n	804df9c <__ssputs_r+0xa0>
 804df38:	4629      	mov	r1, r5
 804df3a:	f7ff fbc1 	bl	804d6c0 <_malloc_r>
 804df3e:	4606      	mov	r6, r0
 804df40:	b950      	cbnz	r0, 804df58 <__ssputs_r+0x5c>
 804df42:	230c      	movs	r3, #12
 804df44:	f8ca 3000 	str.w	r3, [sl]
 804df48:	89a3      	ldrh	r3, [r4, #12]
 804df4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804df4e:	81a3      	strh	r3, [r4, #12]
 804df50:	f04f 30ff 	mov.w	r0, #4294967295
 804df54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804df58:	6921      	ldr	r1, [r4, #16]
 804df5a:	464a      	mov	r2, r9
 804df5c:	f000 fcb2 	bl	804e8c4 <memcpy>
 804df60:	89a3      	ldrh	r3, [r4, #12]
 804df62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 804df66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804df6a:	81a3      	strh	r3, [r4, #12]
 804df6c:	6126      	str	r6, [r4, #16]
 804df6e:	6165      	str	r5, [r4, #20]
 804df70:	444e      	add	r6, r9
 804df72:	eba5 0509 	sub.w	r5, r5, r9
 804df76:	6026      	str	r6, [r4, #0]
 804df78:	60a5      	str	r5, [r4, #8]
 804df7a:	463e      	mov	r6, r7
 804df7c:	42be      	cmp	r6, r7
 804df7e:	d900      	bls.n	804df82 <__ssputs_r+0x86>
 804df80:	463e      	mov	r6, r7
 804df82:	6820      	ldr	r0, [r4, #0]
 804df84:	4632      	mov	r2, r6
 804df86:	4641      	mov	r1, r8
 804df88:	f000 fcaa 	bl	804e8e0 <memmove>
 804df8c:	68a3      	ldr	r3, [r4, #8]
 804df8e:	1b9b      	subs	r3, r3, r6
 804df90:	60a3      	str	r3, [r4, #8]
 804df92:	6823      	ldr	r3, [r4, #0]
 804df94:	4433      	add	r3, r6
 804df96:	6023      	str	r3, [r4, #0]
 804df98:	2000      	movs	r0, #0
 804df9a:	e7db      	b.n	804df54 <__ssputs_r+0x58>
 804df9c:	462a      	mov	r2, r5
 804df9e:	f000 fcb9 	bl	804e914 <_realloc_r>
 804dfa2:	4606      	mov	r6, r0
 804dfa4:	2800      	cmp	r0, #0
 804dfa6:	d1e1      	bne.n	804df6c <__ssputs_r+0x70>
 804dfa8:	6921      	ldr	r1, [r4, #16]
 804dfaa:	4650      	mov	r0, sl
 804dfac:	f7ff fb1c 	bl	804d5e8 <_free_r>
 804dfb0:	e7c7      	b.n	804df42 <__ssputs_r+0x46>
	...

0804dfb4 <_svfiprintf_r>:
 804dfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804dfb8:	4698      	mov	r8, r3
 804dfba:	898b      	ldrh	r3, [r1, #12]
 804dfbc:	061b      	lsls	r3, r3, #24
 804dfbe:	b09d      	sub	sp, #116	; 0x74
 804dfc0:	4607      	mov	r7, r0
 804dfc2:	460d      	mov	r5, r1
 804dfc4:	4614      	mov	r4, r2
 804dfc6:	d50e      	bpl.n	804dfe6 <_svfiprintf_r+0x32>
 804dfc8:	690b      	ldr	r3, [r1, #16]
 804dfca:	b963      	cbnz	r3, 804dfe6 <_svfiprintf_r+0x32>
 804dfcc:	2140      	movs	r1, #64	; 0x40
 804dfce:	f7ff fb77 	bl	804d6c0 <_malloc_r>
 804dfd2:	6028      	str	r0, [r5, #0]
 804dfd4:	6128      	str	r0, [r5, #16]
 804dfd6:	b920      	cbnz	r0, 804dfe2 <_svfiprintf_r+0x2e>
 804dfd8:	230c      	movs	r3, #12
 804dfda:	603b      	str	r3, [r7, #0]
 804dfdc:	f04f 30ff 	mov.w	r0, #4294967295
 804dfe0:	e0d1      	b.n	804e186 <_svfiprintf_r+0x1d2>
 804dfe2:	2340      	movs	r3, #64	; 0x40
 804dfe4:	616b      	str	r3, [r5, #20]
 804dfe6:	2300      	movs	r3, #0
 804dfe8:	9309      	str	r3, [sp, #36]	; 0x24
 804dfea:	2320      	movs	r3, #32
 804dfec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804dff0:	f8cd 800c 	str.w	r8, [sp, #12]
 804dff4:	2330      	movs	r3, #48	; 0x30
 804dff6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 804e1a0 <_svfiprintf_r+0x1ec>
 804dffa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804dffe:	f04f 0901 	mov.w	r9, #1
 804e002:	4623      	mov	r3, r4
 804e004:	469a      	mov	sl, r3
 804e006:	f813 2b01 	ldrb.w	r2, [r3], #1
 804e00a:	b10a      	cbz	r2, 804e010 <_svfiprintf_r+0x5c>
 804e00c:	2a25      	cmp	r2, #37	; 0x25
 804e00e:	d1f9      	bne.n	804e004 <_svfiprintf_r+0x50>
 804e010:	ebba 0b04 	subs.w	fp, sl, r4
 804e014:	d00b      	beq.n	804e02e <_svfiprintf_r+0x7a>
 804e016:	465b      	mov	r3, fp
 804e018:	4622      	mov	r2, r4
 804e01a:	4629      	mov	r1, r5
 804e01c:	4638      	mov	r0, r7
 804e01e:	f7ff ff6d 	bl	804defc <__ssputs_r>
 804e022:	3001      	adds	r0, #1
 804e024:	f000 80aa 	beq.w	804e17c <_svfiprintf_r+0x1c8>
 804e028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804e02a:	445a      	add	r2, fp
 804e02c:	9209      	str	r2, [sp, #36]	; 0x24
 804e02e:	f89a 3000 	ldrb.w	r3, [sl]
 804e032:	2b00      	cmp	r3, #0
 804e034:	f000 80a2 	beq.w	804e17c <_svfiprintf_r+0x1c8>
 804e038:	2300      	movs	r3, #0
 804e03a:	f04f 32ff 	mov.w	r2, #4294967295
 804e03e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804e042:	f10a 0a01 	add.w	sl, sl, #1
 804e046:	9304      	str	r3, [sp, #16]
 804e048:	9307      	str	r3, [sp, #28]
 804e04a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804e04e:	931a      	str	r3, [sp, #104]	; 0x68
 804e050:	4654      	mov	r4, sl
 804e052:	2205      	movs	r2, #5
 804e054:	f814 1b01 	ldrb.w	r1, [r4], #1
 804e058:	4851      	ldr	r0, [pc, #324]	; (804e1a0 <_svfiprintf_r+0x1ec>)
 804e05a:	f7f2 f8c9 	bl	80401f0 <memchr>
 804e05e:	9a04      	ldr	r2, [sp, #16]
 804e060:	b9d8      	cbnz	r0, 804e09a <_svfiprintf_r+0xe6>
 804e062:	06d0      	lsls	r0, r2, #27
 804e064:	bf44      	itt	mi
 804e066:	2320      	movmi	r3, #32
 804e068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804e06c:	0711      	lsls	r1, r2, #28
 804e06e:	bf44      	itt	mi
 804e070:	232b      	movmi	r3, #43	; 0x2b
 804e072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804e076:	f89a 3000 	ldrb.w	r3, [sl]
 804e07a:	2b2a      	cmp	r3, #42	; 0x2a
 804e07c:	d015      	beq.n	804e0aa <_svfiprintf_r+0xf6>
 804e07e:	9a07      	ldr	r2, [sp, #28]
 804e080:	4654      	mov	r4, sl
 804e082:	2000      	movs	r0, #0
 804e084:	f04f 0c0a 	mov.w	ip, #10
 804e088:	4621      	mov	r1, r4
 804e08a:	f811 3b01 	ldrb.w	r3, [r1], #1
 804e08e:	3b30      	subs	r3, #48	; 0x30
 804e090:	2b09      	cmp	r3, #9
 804e092:	d94e      	bls.n	804e132 <_svfiprintf_r+0x17e>
 804e094:	b1b0      	cbz	r0, 804e0c4 <_svfiprintf_r+0x110>
 804e096:	9207      	str	r2, [sp, #28]
 804e098:	e014      	b.n	804e0c4 <_svfiprintf_r+0x110>
 804e09a:	eba0 0308 	sub.w	r3, r0, r8
 804e09e:	fa09 f303 	lsl.w	r3, r9, r3
 804e0a2:	4313      	orrs	r3, r2
 804e0a4:	9304      	str	r3, [sp, #16]
 804e0a6:	46a2      	mov	sl, r4
 804e0a8:	e7d2      	b.n	804e050 <_svfiprintf_r+0x9c>
 804e0aa:	9b03      	ldr	r3, [sp, #12]
 804e0ac:	1d19      	adds	r1, r3, #4
 804e0ae:	681b      	ldr	r3, [r3, #0]
 804e0b0:	9103      	str	r1, [sp, #12]
 804e0b2:	2b00      	cmp	r3, #0
 804e0b4:	bfbb      	ittet	lt
 804e0b6:	425b      	neglt	r3, r3
 804e0b8:	f042 0202 	orrlt.w	r2, r2, #2
 804e0bc:	9307      	strge	r3, [sp, #28]
 804e0be:	9307      	strlt	r3, [sp, #28]
 804e0c0:	bfb8      	it	lt
 804e0c2:	9204      	strlt	r2, [sp, #16]
 804e0c4:	7823      	ldrb	r3, [r4, #0]
 804e0c6:	2b2e      	cmp	r3, #46	; 0x2e
 804e0c8:	d10c      	bne.n	804e0e4 <_svfiprintf_r+0x130>
 804e0ca:	7863      	ldrb	r3, [r4, #1]
 804e0cc:	2b2a      	cmp	r3, #42	; 0x2a
 804e0ce:	d135      	bne.n	804e13c <_svfiprintf_r+0x188>
 804e0d0:	9b03      	ldr	r3, [sp, #12]
 804e0d2:	1d1a      	adds	r2, r3, #4
 804e0d4:	681b      	ldr	r3, [r3, #0]
 804e0d6:	9203      	str	r2, [sp, #12]
 804e0d8:	2b00      	cmp	r3, #0
 804e0da:	bfb8      	it	lt
 804e0dc:	f04f 33ff 	movlt.w	r3, #4294967295
 804e0e0:	3402      	adds	r4, #2
 804e0e2:	9305      	str	r3, [sp, #20]
 804e0e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 804e1b0 <_svfiprintf_r+0x1fc>
 804e0e8:	7821      	ldrb	r1, [r4, #0]
 804e0ea:	2203      	movs	r2, #3
 804e0ec:	4650      	mov	r0, sl
 804e0ee:	f7f2 f87f 	bl	80401f0 <memchr>
 804e0f2:	b140      	cbz	r0, 804e106 <_svfiprintf_r+0x152>
 804e0f4:	2340      	movs	r3, #64	; 0x40
 804e0f6:	eba0 000a 	sub.w	r0, r0, sl
 804e0fa:	fa03 f000 	lsl.w	r0, r3, r0
 804e0fe:	9b04      	ldr	r3, [sp, #16]
 804e100:	4303      	orrs	r3, r0
 804e102:	3401      	adds	r4, #1
 804e104:	9304      	str	r3, [sp, #16]
 804e106:	f814 1b01 	ldrb.w	r1, [r4], #1
 804e10a:	4826      	ldr	r0, [pc, #152]	; (804e1a4 <_svfiprintf_r+0x1f0>)
 804e10c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804e110:	2206      	movs	r2, #6
 804e112:	f7f2 f86d 	bl	80401f0 <memchr>
 804e116:	2800      	cmp	r0, #0
 804e118:	d038      	beq.n	804e18c <_svfiprintf_r+0x1d8>
 804e11a:	4b23      	ldr	r3, [pc, #140]	; (804e1a8 <_svfiprintf_r+0x1f4>)
 804e11c:	bb1b      	cbnz	r3, 804e166 <_svfiprintf_r+0x1b2>
 804e11e:	9b03      	ldr	r3, [sp, #12]
 804e120:	3307      	adds	r3, #7
 804e122:	f023 0307 	bic.w	r3, r3, #7
 804e126:	3308      	adds	r3, #8
 804e128:	9303      	str	r3, [sp, #12]
 804e12a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804e12c:	4433      	add	r3, r6
 804e12e:	9309      	str	r3, [sp, #36]	; 0x24
 804e130:	e767      	b.n	804e002 <_svfiprintf_r+0x4e>
 804e132:	fb0c 3202 	mla	r2, ip, r2, r3
 804e136:	460c      	mov	r4, r1
 804e138:	2001      	movs	r0, #1
 804e13a:	e7a5      	b.n	804e088 <_svfiprintf_r+0xd4>
 804e13c:	2300      	movs	r3, #0
 804e13e:	3401      	adds	r4, #1
 804e140:	9305      	str	r3, [sp, #20]
 804e142:	4619      	mov	r1, r3
 804e144:	f04f 0c0a 	mov.w	ip, #10
 804e148:	4620      	mov	r0, r4
 804e14a:	f810 2b01 	ldrb.w	r2, [r0], #1
 804e14e:	3a30      	subs	r2, #48	; 0x30
 804e150:	2a09      	cmp	r2, #9
 804e152:	d903      	bls.n	804e15c <_svfiprintf_r+0x1a8>
 804e154:	2b00      	cmp	r3, #0
 804e156:	d0c5      	beq.n	804e0e4 <_svfiprintf_r+0x130>
 804e158:	9105      	str	r1, [sp, #20]
 804e15a:	e7c3      	b.n	804e0e4 <_svfiprintf_r+0x130>
 804e15c:	fb0c 2101 	mla	r1, ip, r1, r2
 804e160:	4604      	mov	r4, r0
 804e162:	2301      	movs	r3, #1
 804e164:	e7f0      	b.n	804e148 <_svfiprintf_r+0x194>
 804e166:	ab03      	add	r3, sp, #12
 804e168:	9300      	str	r3, [sp, #0]
 804e16a:	462a      	mov	r2, r5
 804e16c:	4b0f      	ldr	r3, [pc, #60]	; (804e1ac <_svfiprintf_r+0x1f8>)
 804e16e:	a904      	add	r1, sp, #16
 804e170:	4638      	mov	r0, r7
 804e172:	f3af 8000 	nop.w
 804e176:	1c42      	adds	r2, r0, #1
 804e178:	4606      	mov	r6, r0
 804e17a:	d1d6      	bne.n	804e12a <_svfiprintf_r+0x176>
 804e17c:	89ab      	ldrh	r3, [r5, #12]
 804e17e:	065b      	lsls	r3, r3, #25
 804e180:	f53f af2c 	bmi.w	804dfdc <_svfiprintf_r+0x28>
 804e184:	9809      	ldr	r0, [sp, #36]	; 0x24
 804e186:	b01d      	add	sp, #116	; 0x74
 804e188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804e18c:	ab03      	add	r3, sp, #12
 804e18e:	9300      	str	r3, [sp, #0]
 804e190:	462a      	mov	r2, r5
 804e192:	4b06      	ldr	r3, [pc, #24]	; (804e1ac <_svfiprintf_r+0x1f8>)
 804e194:	a904      	add	r1, sp, #16
 804e196:	4638      	mov	r0, r7
 804e198:	f000 f9d4 	bl	804e544 <_printf_i>
 804e19c:	e7eb      	b.n	804e176 <_svfiprintf_r+0x1c2>
 804e19e:	bf00      	nop
 804e1a0:	08051070 	.word	0x08051070
 804e1a4:	0805107a 	.word	0x0805107a
 804e1a8:	00000000 	.word	0x00000000
 804e1ac:	0804defd 	.word	0x0804defd
 804e1b0:	08051076 	.word	0x08051076

0804e1b4 <__sfputc_r>:
 804e1b4:	6893      	ldr	r3, [r2, #8]
 804e1b6:	3b01      	subs	r3, #1
 804e1b8:	2b00      	cmp	r3, #0
 804e1ba:	b410      	push	{r4}
 804e1bc:	6093      	str	r3, [r2, #8]
 804e1be:	da08      	bge.n	804e1d2 <__sfputc_r+0x1e>
 804e1c0:	6994      	ldr	r4, [r2, #24]
 804e1c2:	42a3      	cmp	r3, r4
 804e1c4:	db01      	blt.n	804e1ca <__sfputc_r+0x16>
 804e1c6:	290a      	cmp	r1, #10
 804e1c8:	d103      	bne.n	804e1d2 <__sfputc_r+0x1e>
 804e1ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 804e1ce:	f7ff bba9 	b.w	804d924 <__swbuf_r>
 804e1d2:	6813      	ldr	r3, [r2, #0]
 804e1d4:	1c58      	adds	r0, r3, #1
 804e1d6:	6010      	str	r0, [r2, #0]
 804e1d8:	7019      	strb	r1, [r3, #0]
 804e1da:	4608      	mov	r0, r1
 804e1dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 804e1e0:	4770      	bx	lr

0804e1e2 <__sfputs_r>:
 804e1e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e1e4:	4606      	mov	r6, r0
 804e1e6:	460f      	mov	r7, r1
 804e1e8:	4614      	mov	r4, r2
 804e1ea:	18d5      	adds	r5, r2, r3
 804e1ec:	42ac      	cmp	r4, r5
 804e1ee:	d101      	bne.n	804e1f4 <__sfputs_r+0x12>
 804e1f0:	2000      	movs	r0, #0
 804e1f2:	e007      	b.n	804e204 <__sfputs_r+0x22>
 804e1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 804e1f8:	463a      	mov	r2, r7
 804e1fa:	4630      	mov	r0, r6
 804e1fc:	f7ff ffda 	bl	804e1b4 <__sfputc_r>
 804e200:	1c43      	adds	r3, r0, #1
 804e202:	d1f3      	bne.n	804e1ec <__sfputs_r+0xa>
 804e204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804e208 <_vfiprintf_r>:
 804e208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804e20c:	460d      	mov	r5, r1
 804e20e:	b09d      	sub	sp, #116	; 0x74
 804e210:	4614      	mov	r4, r2
 804e212:	4698      	mov	r8, r3
 804e214:	4606      	mov	r6, r0
 804e216:	b118      	cbz	r0, 804e220 <_vfiprintf_r+0x18>
 804e218:	6983      	ldr	r3, [r0, #24]
 804e21a:	b90b      	cbnz	r3, 804e220 <_vfiprintf_r+0x18>
 804e21c:	f7ff fd5c 	bl	804dcd8 <__sinit>
 804e220:	4b89      	ldr	r3, [pc, #548]	; (804e448 <_vfiprintf_r+0x240>)
 804e222:	429d      	cmp	r5, r3
 804e224:	d11b      	bne.n	804e25e <_vfiprintf_r+0x56>
 804e226:	6875      	ldr	r5, [r6, #4]
 804e228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804e22a:	07d9      	lsls	r1, r3, #31
 804e22c:	d405      	bmi.n	804e23a <_vfiprintf_r+0x32>
 804e22e:	89ab      	ldrh	r3, [r5, #12]
 804e230:	059a      	lsls	r2, r3, #22
 804e232:	d402      	bmi.n	804e23a <_vfiprintf_r+0x32>
 804e234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804e236:	f7ff fded 	bl	804de14 <__retarget_lock_acquire_recursive>
 804e23a:	89ab      	ldrh	r3, [r5, #12]
 804e23c:	071b      	lsls	r3, r3, #28
 804e23e:	d501      	bpl.n	804e244 <_vfiprintf_r+0x3c>
 804e240:	692b      	ldr	r3, [r5, #16]
 804e242:	b9eb      	cbnz	r3, 804e280 <_vfiprintf_r+0x78>
 804e244:	4629      	mov	r1, r5
 804e246:	4630      	mov	r0, r6
 804e248:	f7ff fbbe 	bl	804d9c8 <__swsetup_r>
 804e24c:	b1c0      	cbz	r0, 804e280 <_vfiprintf_r+0x78>
 804e24e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804e250:	07dc      	lsls	r4, r3, #31
 804e252:	d50e      	bpl.n	804e272 <_vfiprintf_r+0x6a>
 804e254:	f04f 30ff 	mov.w	r0, #4294967295
 804e258:	b01d      	add	sp, #116	; 0x74
 804e25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804e25e:	4b7b      	ldr	r3, [pc, #492]	; (804e44c <_vfiprintf_r+0x244>)
 804e260:	429d      	cmp	r5, r3
 804e262:	d101      	bne.n	804e268 <_vfiprintf_r+0x60>
 804e264:	68b5      	ldr	r5, [r6, #8]
 804e266:	e7df      	b.n	804e228 <_vfiprintf_r+0x20>
 804e268:	4b79      	ldr	r3, [pc, #484]	; (804e450 <_vfiprintf_r+0x248>)
 804e26a:	429d      	cmp	r5, r3
 804e26c:	bf08      	it	eq
 804e26e:	68f5      	ldreq	r5, [r6, #12]
 804e270:	e7da      	b.n	804e228 <_vfiprintf_r+0x20>
 804e272:	89ab      	ldrh	r3, [r5, #12]
 804e274:	0598      	lsls	r0, r3, #22
 804e276:	d4ed      	bmi.n	804e254 <_vfiprintf_r+0x4c>
 804e278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804e27a:	f7ff fdcc 	bl	804de16 <__retarget_lock_release_recursive>
 804e27e:	e7e9      	b.n	804e254 <_vfiprintf_r+0x4c>
 804e280:	2300      	movs	r3, #0
 804e282:	9309      	str	r3, [sp, #36]	; 0x24
 804e284:	2320      	movs	r3, #32
 804e286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804e28a:	f8cd 800c 	str.w	r8, [sp, #12]
 804e28e:	2330      	movs	r3, #48	; 0x30
 804e290:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 804e454 <_vfiprintf_r+0x24c>
 804e294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804e298:	f04f 0901 	mov.w	r9, #1
 804e29c:	4623      	mov	r3, r4
 804e29e:	469a      	mov	sl, r3
 804e2a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 804e2a4:	b10a      	cbz	r2, 804e2aa <_vfiprintf_r+0xa2>
 804e2a6:	2a25      	cmp	r2, #37	; 0x25
 804e2a8:	d1f9      	bne.n	804e29e <_vfiprintf_r+0x96>
 804e2aa:	ebba 0b04 	subs.w	fp, sl, r4
 804e2ae:	d00b      	beq.n	804e2c8 <_vfiprintf_r+0xc0>
 804e2b0:	465b      	mov	r3, fp
 804e2b2:	4622      	mov	r2, r4
 804e2b4:	4629      	mov	r1, r5
 804e2b6:	4630      	mov	r0, r6
 804e2b8:	f7ff ff93 	bl	804e1e2 <__sfputs_r>
 804e2bc:	3001      	adds	r0, #1
 804e2be:	f000 80aa 	beq.w	804e416 <_vfiprintf_r+0x20e>
 804e2c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804e2c4:	445a      	add	r2, fp
 804e2c6:	9209      	str	r2, [sp, #36]	; 0x24
 804e2c8:	f89a 3000 	ldrb.w	r3, [sl]
 804e2cc:	2b00      	cmp	r3, #0
 804e2ce:	f000 80a2 	beq.w	804e416 <_vfiprintf_r+0x20e>
 804e2d2:	2300      	movs	r3, #0
 804e2d4:	f04f 32ff 	mov.w	r2, #4294967295
 804e2d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804e2dc:	f10a 0a01 	add.w	sl, sl, #1
 804e2e0:	9304      	str	r3, [sp, #16]
 804e2e2:	9307      	str	r3, [sp, #28]
 804e2e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804e2e8:	931a      	str	r3, [sp, #104]	; 0x68
 804e2ea:	4654      	mov	r4, sl
 804e2ec:	2205      	movs	r2, #5
 804e2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 804e2f2:	4858      	ldr	r0, [pc, #352]	; (804e454 <_vfiprintf_r+0x24c>)
 804e2f4:	f7f1 ff7c 	bl	80401f0 <memchr>
 804e2f8:	9a04      	ldr	r2, [sp, #16]
 804e2fa:	b9d8      	cbnz	r0, 804e334 <_vfiprintf_r+0x12c>
 804e2fc:	06d1      	lsls	r1, r2, #27
 804e2fe:	bf44      	itt	mi
 804e300:	2320      	movmi	r3, #32
 804e302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804e306:	0713      	lsls	r3, r2, #28
 804e308:	bf44      	itt	mi
 804e30a:	232b      	movmi	r3, #43	; 0x2b
 804e30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804e310:	f89a 3000 	ldrb.w	r3, [sl]
 804e314:	2b2a      	cmp	r3, #42	; 0x2a
 804e316:	d015      	beq.n	804e344 <_vfiprintf_r+0x13c>
 804e318:	9a07      	ldr	r2, [sp, #28]
 804e31a:	4654      	mov	r4, sl
 804e31c:	2000      	movs	r0, #0
 804e31e:	f04f 0c0a 	mov.w	ip, #10
 804e322:	4621      	mov	r1, r4
 804e324:	f811 3b01 	ldrb.w	r3, [r1], #1
 804e328:	3b30      	subs	r3, #48	; 0x30
 804e32a:	2b09      	cmp	r3, #9
 804e32c:	d94e      	bls.n	804e3cc <_vfiprintf_r+0x1c4>
 804e32e:	b1b0      	cbz	r0, 804e35e <_vfiprintf_r+0x156>
 804e330:	9207      	str	r2, [sp, #28]
 804e332:	e014      	b.n	804e35e <_vfiprintf_r+0x156>
 804e334:	eba0 0308 	sub.w	r3, r0, r8
 804e338:	fa09 f303 	lsl.w	r3, r9, r3
 804e33c:	4313      	orrs	r3, r2
 804e33e:	9304      	str	r3, [sp, #16]
 804e340:	46a2      	mov	sl, r4
 804e342:	e7d2      	b.n	804e2ea <_vfiprintf_r+0xe2>
 804e344:	9b03      	ldr	r3, [sp, #12]
 804e346:	1d19      	adds	r1, r3, #4
 804e348:	681b      	ldr	r3, [r3, #0]
 804e34a:	9103      	str	r1, [sp, #12]
 804e34c:	2b00      	cmp	r3, #0
 804e34e:	bfbb      	ittet	lt
 804e350:	425b      	neglt	r3, r3
 804e352:	f042 0202 	orrlt.w	r2, r2, #2
 804e356:	9307      	strge	r3, [sp, #28]
 804e358:	9307      	strlt	r3, [sp, #28]
 804e35a:	bfb8      	it	lt
 804e35c:	9204      	strlt	r2, [sp, #16]
 804e35e:	7823      	ldrb	r3, [r4, #0]
 804e360:	2b2e      	cmp	r3, #46	; 0x2e
 804e362:	d10c      	bne.n	804e37e <_vfiprintf_r+0x176>
 804e364:	7863      	ldrb	r3, [r4, #1]
 804e366:	2b2a      	cmp	r3, #42	; 0x2a
 804e368:	d135      	bne.n	804e3d6 <_vfiprintf_r+0x1ce>
 804e36a:	9b03      	ldr	r3, [sp, #12]
 804e36c:	1d1a      	adds	r2, r3, #4
 804e36e:	681b      	ldr	r3, [r3, #0]
 804e370:	9203      	str	r2, [sp, #12]
 804e372:	2b00      	cmp	r3, #0
 804e374:	bfb8      	it	lt
 804e376:	f04f 33ff 	movlt.w	r3, #4294967295
 804e37a:	3402      	adds	r4, #2
 804e37c:	9305      	str	r3, [sp, #20]
 804e37e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 804e464 <_vfiprintf_r+0x25c>
 804e382:	7821      	ldrb	r1, [r4, #0]
 804e384:	2203      	movs	r2, #3
 804e386:	4650      	mov	r0, sl
 804e388:	f7f1 ff32 	bl	80401f0 <memchr>
 804e38c:	b140      	cbz	r0, 804e3a0 <_vfiprintf_r+0x198>
 804e38e:	2340      	movs	r3, #64	; 0x40
 804e390:	eba0 000a 	sub.w	r0, r0, sl
 804e394:	fa03 f000 	lsl.w	r0, r3, r0
 804e398:	9b04      	ldr	r3, [sp, #16]
 804e39a:	4303      	orrs	r3, r0
 804e39c:	3401      	adds	r4, #1
 804e39e:	9304      	str	r3, [sp, #16]
 804e3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 804e3a4:	482c      	ldr	r0, [pc, #176]	; (804e458 <_vfiprintf_r+0x250>)
 804e3a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804e3aa:	2206      	movs	r2, #6
 804e3ac:	f7f1 ff20 	bl	80401f0 <memchr>
 804e3b0:	2800      	cmp	r0, #0
 804e3b2:	d03f      	beq.n	804e434 <_vfiprintf_r+0x22c>
 804e3b4:	4b29      	ldr	r3, [pc, #164]	; (804e45c <_vfiprintf_r+0x254>)
 804e3b6:	bb1b      	cbnz	r3, 804e400 <_vfiprintf_r+0x1f8>
 804e3b8:	9b03      	ldr	r3, [sp, #12]
 804e3ba:	3307      	adds	r3, #7
 804e3bc:	f023 0307 	bic.w	r3, r3, #7
 804e3c0:	3308      	adds	r3, #8
 804e3c2:	9303      	str	r3, [sp, #12]
 804e3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804e3c6:	443b      	add	r3, r7
 804e3c8:	9309      	str	r3, [sp, #36]	; 0x24
 804e3ca:	e767      	b.n	804e29c <_vfiprintf_r+0x94>
 804e3cc:	fb0c 3202 	mla	r2, ip, r2, r3
 804e3d0:	460c      	mov	r4, r1
 804e3d2:	2001      	movs	r0, #1
 804e3d4:	e7a5      	b.n	804e322 <_vfiprintf_r+0x11a>
 804e3d6:	2300      	movs	r3, #0
 804e3d8:	3401      	adds	r4, #1
 804e3da:	9305      	str	r3, [sp, #20]
 804e3dc:	4619      	mov	r1, r3
 804e3de:	f04f 0c0a 	mov.w	ip, #10
 804e3e2:	4620      	mov	r0, r4
 804e3e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 804e3e8:	3a30      	subs	r2, #48	; 0x30
 804e3ea:	2a09      	cmp	r2, #9
 804e3ec:	d903      	bls.n	804e3f6 <_vfiprintf_r+0x1ee>
 804e3ee:	2b00      	cmp	r3, #0
 804e3f0:	d0c5      	beq.n	804e37e <_vfiprintf_r+0x176>
 804e3f2:	9105      	str	r1, [sp, #20]
 804e3f4:	e7c3      	b.n	804e37e <_vfiprintf_r+0x176>
 804e3f6:	fb0c 2101 	mla	r1, ip, r1, r2
 804e3fa:	4604      	mov	r4, r0
 804e3fc:	2301      	movs	r3, #1
 804e3fe:	e7f0      	b.n	804e3e2 <_vfiprintf_r+0x1da>
 804e400:	ab03      	add	r3, sp, #12
 804e402:	9300      	str	r3, [sp, #0]
 804e404:	462a      	mov	r2, r5
 804e406:	4b16      	ldr	r3, [pc, #88]	; (804e460 <_vfiprintf_r+0x258>)
 804e408:	a904      	add	r1, sp, #16
 804e40a:	4630      	mov	r0, r6
 804e40c:	f3af 8000 	nop.w
 804e410:	4607      	mov	r7, r0
 804e412:	1c78      	adds	r0, r7, #1
 804e414:	d1d6      	bne.n	804e3c4 <_vfiprintf_r+0x1bc>
 804e416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804e418:	07d9      	lsls	r1, r3, #31
 804e41a:	d405      	bmi.n	804e428 <_vfiprintf_r+0x220>
 804e41c:	89ab      	ldrh	r3, [r5, #12]
 804e41e:	059a      	lsls	r2, r3, #22
 804e420:	d402      	bmi.n	804e428 <_vfiprintf_r+0x220>
 804e422:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804e424:	f7ff fcf7 	bl	804de16 <__retarget_lock_release_recursive>
 804e428:	89ab      	ldrh	r3, [r5, #12]
 804e42a:	065b      	lsls	r3, r3, #25
 804e42c:	f53f af12 	bmi.w	804e254 <_vfiprintf_r+0x4c>
 804e430:	9809      	ldr	r0, [sp, #36]	; 0x24
 804e432:	e711      	b.n	804e258 <_vfiprintf_r+0x50>
 804e434:	ab03      	add	r3, sp, #12
 804e436:	9300      	str	r3, [sp, #0]
 804e438:	462a      	mov	r2, r5
 804e43a:	4b09      	ldr	r3, [pc, #36]	; (804e460 <_vfiprintf_r+0x258>)
 804e43c:	a904      	add	r1, sp, #16
 804e43e:	4630      	mov	r0, r6
 804e440:	f000 f880 	bl	804e544 <_printf_i>
 804e444:	e7e4      	b.n	804e410 <_vfiprintf_r+0x208>
 804e446:	bf00      	nop
 804e448:	08051030 	.word	0x08051030
 804e44c:	08051050 	.word	0x08051050
 804e450:	08051010 	.word	0x08051010
 804e454:	08051070 	.word	0x08051070
 804e458:	0805107a 	.word	0x0805107a
 804e45c:	00000000 	.word	0x00000000
 804e460:	0804e1e3 	.word	0x0804e1e3
 804e464:	08051076 	.word	0x08051076

0804e468 <_printf_common>:
 804e468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804e46c:	4616      	mov	r6, r2
 804e46e:	4699      	mov	r9, r3
 804e470:	688a      	ldr	r2, [r1, #8]
 804e472:	690b      	ldr	r3, [r1, #16]
 804e474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 804e478:	4293      	cmp	r3, r2
 804e47a:	bfb8      	it	lt
 804e47c:	4613      	movlt	r3, r2
 804e47e:	6033      	str	r3, [r6, #0]
 804e480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 804e484:	4607      	mov	r7, r0
 804e486:	460c      	mov	r4, r1
 804e488:	b10a      	cbz	r2, 804e48e <_printf_common+0x26>
 804e48a:	3301      	adds	r3, #1
 804e48c:	6033      	str	r3, [r6, #0]
 804e48e:	6823      	ldr	r3, [r4, #0]
 804e490:	0699      	lsls	r1, r3, #26
 804e492:	bf42      	ittt	mi
 804e494:	6833      	ldrmi	r3, [r6, #0]
 804e496:	3302      	addmi	r3, #2
 804e498:	6033      	strmi	r3, [r6, #0]
 804e49a:	6825      	ldr	r5, [r4, #0]
 804e49c:	f015 0506 	ands.w	r5, r5, #6
 804e4a0:	d106      	bne.n	804e4b0 <_printf_common+0x48>
 804e4a2:	f104 0a19 	add.w	sl, r4, #25
 804e4a6:	68e3      	ldr	r3, [r4, #12]
 804e4a8:	6832      	ldr	r2, [r6, #0]
 804e4aa:	1a9b      	subs	r3, r3, r2
 804e4ac:	42ab      	cmp	r3, r5
 804e4ae:	dc26      	bgt.n	804e4fe <_printf_common+0x96>
 804e4b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 804e4b4:	1e13      	subs	r3, r2, #0
 804e4b6:	6822      	ldr	r2, [r4, #0]
 804e4b8:	bf18      	it	ne
 804e4ba:	2301      	movne	r3, #1
 804e4bc:	0692      	lsls	r2, r2, #26
 804e4be:	d42b      	bmi.n	804e518 <_printf_common+0xb0>
 804e4c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 804e4c4:	4649      	mov	r1, r9
 804e4c6:	4638      	mov	r0, r7
 804e4c8:	47c0      	blx	r8
 804e4ca:	3001      	adds	r0, #1
 804e4cc:	d01e      	beq.n	804e50c <_printf_common+0xa4>
 804e4ce:	6823      	ldr	r3, [r4, #0]
 804e4d0:	68e5      	ldr	r5, [r4, #12]
 804e4d2:	6832      	ldr	r2, [r6, #0]
 804e4d4:	f003 0306 	and.w	r3, r3, #6
 804e4d8:	2b04      	cmp	r3, #4
 804e4da:	bf08      	it	eq
 804e4dc:	1aad      	subeq	r5, r5, r2
 804e4de:	68a3      	ldr	r3, [r4, #8]
 804e4e0:	6922      	ldr	r2, [r4, #16]
 804e4e2:	bf0c      	ite	eq
 804e4e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804e4e8:	2500      	movne	r5, #0
 804e4ea:	4293      	cmp	r3, r2
 804e4ec:	bfc4      	itt	gt
 804e4ee:	1a9b      	subgt	r3, r3, r2
 804e4f0:	18ed      	addgt	r5, r5, r3
 804e4f2:	2600      	movs	r6, #0
 804e4f4:	341a      	adds	r4, #26
 804e4f6:	42b5      	cmp	r5, r6
 804e4f8:	d11a      	bne.n	804e530 <_printf_common+0xc8>
 804e4fa:	2000      	movs	r0, #0
 804e4fc:	e008      	b.n	804e510 <_printf_common+0xa8>
 804e4fe:	2301      	movs	r3, #1
 804e500:	4652      	mov	r2, sl
 804e502:	4649      	mov	r1, r9
 804e504:	4638      	mov	r0, r7
 804e506:	47c0      	blx	r8
 804e508:	3001      	adds	r0, #1
 804e50a:	d103      	bne.n	804e514 <_printf_common+0xac>
 804e50c:	f04f 30ff 	mov.w	r0, #4294967295
 804e510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804e514:	3501      	adds	r5, #1
 804e516:	e7c6      	b.n	804e4a6 <_printf_common+0x3e>
 804e518:	18e1      	adds	r1, r4, r3
 804e51a:	1c5a      	adds	r2, r3, #1
 804e51c:	2030      	movs	r0, #48	; 0x30
 804e51e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 804e522:	4422      	add	r2, r4
 804e524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 804e528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 804e52c:	3302      	adds	r3, #2
 804e52e:	e7c7      	b.n	804e4c0 <_printf_common+0x58>
 804e530:	2301      	movs	r3, #1
 804e532:	4622      	mov	r2, r4
 804e534:	4649      	mov	r1, r9
 804e536:	4638      	mov	r0, r7
 804e538:	47c0      	blx	r8
 804e53a:	3001      	adds	r0, #1
 804e53c:	d0e6      	beq.n	804e50c <_printf_common+0xa4>
 804e53e:	3601      	adds	r6, #1
 804e540:	e7d9      	b.n	804e4f6 <_printf_common+0x8e>
	...

0804e544 <_printf_i>:
 804e544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 804e548:	7e0f      	ldrb	r7, [r1, #24]
 804e54a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 804e54c:	2f78      	cmp	r7, #120	; 0x78
 804e54e:	4691      	mov	r9, r2
 804e550:	4680      	mov	r8, r0
 804e552:	460c      	mov	r4, r1
 804e554:	469a      	mov	sl, r3
 804e556:	f101 0243 	add.w	r2, r1, #67	; 0x43
 804e55a:	d807      	bhi.n	804e56c <_printf_i+0x28>
 804e55c:	2f62      	cmp	r7, #98	; 0x62
 804e55e:	d80a      	bhi.n	804e576 <_printf_i+0x32>
 804e560:	2f00      	cmp	r7, #0
 804e562:	f000 80d8 	beq.w	804e716 <_printf_i+0x1d2>
 804e566:	2f58      	cmp	r7, #88	; 0x58
 804e568:	f000 80a3 	beq.w	804e6b2 <_printf_i+0x16e>
 804e56c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804e570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 804e574:	e03a      	b.n	804e5ec <_printf_i+0xa8>
 804e576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 804e57a:	2b15      	cmp	r3, #21
 804e57c:	d8f6      	bhi.n	804e56c <_printf_i+0x28>
 804e57e:	a101      	add	r1, pc, #4	; (adr r1, 804e584 <_printf_i+0x40>)
 804e580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 804e584:	0804e5dd 	.word	0x0804e5dd
 804e588:	0804e5f1 	.word	0x0804e5f1
 804e58c:	0804e56d 	.word	0x0804e56d
 804e590:	0804e56d 	.word	0x0804e56d
 804e594:	0804e56d 	.word	0x0804e56d
 804e598:	0804e56d 	.word	0x0804e56d
 804e59c:	0804e5f1 	.word	0x0804e5f1
 804e5a0:	0804e56d 	.word	0x0804e56d
 804e5a4:	0804e56d 	.word	0x0804e56d
 804e5a8:	0804e56d 	.word	0x0804e56d
 804e5ac:	0804e56d 	.word	0x0804e56d
 804e5b0:	0804e6fd 	.word	0x0804e6fd
 804e5b4:	0804e621 	.word	0x0804e621
 804e5b8:	0804e6df 	.word	0x0804e6df
 804e5bc:	0804e56d 	.word	0x0804e56d
 804e5c0:	0804e56d 	.word	0x0804e56d
 804e5c4:	0804e71f 	.word	0x0804e71f
 804e5c8:	0804e56d 	.word	0x0804e56d
 804e5cc:	0804e621 	.word	0x0804e621
 804e5d0:	0804e56d 	.word	0x0804e56d
 804e5d4:	0804e56d 	.word	0x0804e56d
 804e5d8:	0804e6e7 	.word	0x0804e6e7
 804e5dc:	682b      	ldr	r3, [r5, #0]
 804e5de:	1d1a      	adds	r2, r3, #4
 804e5e0:	681b      	ldr	r3, [r3, #0]
 804e5e2:	602a      	str	r2, [r5, #0]
 804e5e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804e5e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 804e5ec:	2301      	movs	r3, #1
 804e5ee:	e0a3      	b.n	804e738 <_printf_i+0x1f4>
 804e5f0:	6820      	ldr	r0, [r4, #0]
 804e5f2:	6829      	ldr	r1, [r5, #0]
 804e5f4:	0606      	lsls	r6, r0, #24
 804e5f6:	f101 0304 	add.w	r3, r1, #4
 804e5fa:	d50a      	bpl.n	804e612 <_printf_i+0xce>
 804e5fc:	680e      	ldr	r6, [r1, #0]
 804e5fe:	602b      	str	r3, [r5, #0]
 804e600:	2e00      	cmp	r6, #0
 804e602:	da03      	bge.n	804e60c <_printf_i+0xc8>
 804e604:	232d      	movs	r3, #45	; 0x2d
 804e606:	4276      	negs	r6, r6
 804e608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804e60c:	485e      	ldr	r0, [pc, #376]	; (804e788 <_printf_i+0x244>)
 804e60e:	230a      	movs	r3, #10
 804e610:	e019      	b.n	804e646 <_printf_i+0x102>
 804e612:	680e      	ldr	r6, [r1, #0]
 804e614:	602b      	str	r3, [r5, #0]
 804e616:	f010 0f40 	tst.w	r0, #64	; 0x40
 804e61a:	bf18      	it	ne
 804e61c:	b236      	sxthne	r6, r6
 804e61e:	e7ef      	b.n	804e600 <_printf_i+0xbc>
 804e620:	682b      	ldr	r3, [r5, #0]
 804e622:	6820      	ldr	r0, [r4, #0]
 804e624:	1d19      	adds	r1, r3, #4
 804e626:	6029      	str	r1, [r5, #0]
 804e628:	0601      	lsls	r1, r0, #24
 804e62a:	d501      	bpl.n	804e630 <_printf_i+0xec>
 804e62c:	681e      	ldr	r6, [r3, #0]
 804e62e:	e002      	b.n	804e636 <_printf_i+0xf2>
 804e630:	0646      	lsls	r6, r0, #25
 804e632:	d5fb      	bpl.n	804e62c <_printf_i+0xe8>
 804e634:	881e      	ldrh	r6, [r3, #0]
 804e636:	4854      	ldr	r0, [pc, #336]	; (804e788 <_printf_i+0x244>)
 804e638:	2f6f      	cmp	r7, #111	; 0x6f
 804e63a:	bf0c      	ite	eq
 804e63c:	2308      	moveq	r3, #8
 804e63e:	230a      	movne	r3, #10
 804e640:	2100      	movs	r1, #0
 804e642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 804e646:	6865      	ldr	r5, [r4, #4]
 804e648:	60a5      	str	r5, [r4, #8]
 804e64a:	2d00      	cmp	r5, #0
 804e64c:	bfa2      	ittt	ge
 804e64e:	6821      	ldrge	r1, [r4, #0]
 804e650:	f021 0104 	bicge.w	r1, r1, #4
 804e654:	6021      	strge	r1, [r4, #0]
 804e656:	b90e      	cbnz	r6, 804e65c <_printf_i+0x118>
 804e658:	2d00      	cmp	r5, #0
 804e65a:	d04d      	beq.n	804e6f8 <_printf_i+0x1b4>
 804e65c:	4615      	mov	r5, r2
 804e65e:	fbb6 f1f3 	udiv	r1, r6, r3
 804e662:	fb03 6711 	mls	r7, r3, r1, r6
 804e666:	5dc7      	ldrb	r7, [r0, r7]
 804e668:	f805 7d01 	strb.w	r7, [r5, #-1]!
 804e66c:	4637      	mov	r7, r6
 804e66e:	42bb      	cmp	r3, r7
 804e670:	460e      	mov	r6, r1
 804e672:	d9f4      	bls.n	804e65e <_printf_i+0x11a>
 804e674:	2b08      	cmp	r3, #8
 804e676:	d10b      	bne.n	804e690 <_printf_i+0x14c>
 804e678:	6823      	ldr	r3, [r4, #0]
 804e67a:	07de      	lsls	r6, r3, #31
 804e67c:	d508      	bpl.n	804e690 <_printf_i+0x14c>
 804e67e:	6923      	ldr	r3, [r4, #16]
 804e680:	6861      	ldr	r1, [r4, #4]
 804e682:	4299      	cmp	r1, r3
 804e684:	bfde      	ittt	le
 804e686:	2330      	movle	r3, #48	; 0x30
 804e688:	f805 3c01 	strble.w	r3, [r5, #-1]
 804e68c:	f105 35ff 	addle.w	r5, r5, #4294967295
 804e690:	1b52      	subs	r2, r2, r5
 804e692:	6122      	str	r2, [r4, #16]
 804e694:	f8cd a000 	str.w	sl, [sp]
 804e698:	464b      	mov	r3, r9
 804e69a:	aa03      	add	r2, sp, #12
 804e69c:	4621      	mov	r1, r4
 804e69e:	4640      	mov	r0, r8
 804e6a0:	f7ff fee2 	bl	804e468 <_printf_common>
 804e6a4:	3001      	adds	r0, #1
 804e6a6:	d14c      	bne.n	804e742 <_printf_i+0x1fe>
 804e6a8:	f04f 30ff 	mov.w	r0, #4294967295
 804e6ac:	b004      	add	sp, #16
 804e6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804e6b2:	4835      	ldr	r0, [pc, #212]	; (804e788 <_printf_i+0x244>)
 804e6b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 804e6b8:	6829      	ldr	r1, [r5, #0]
 804e6ba:	6823      	ldr	r3, [r4, #0]
 804e6bc:	f851 6b04 	ldr.w	r6, [r1], #4
 804e6c0:	6029      	str	r1, [r5, #0]
 804e6c2:	061d      	lsls	r5, r3, #24
 804e6c4:	d514      	bpl.n	804e6f0 <_printf_i+0x1ac>
 804e6c6:	07df      	lsls	r7, r3, #31
 804e6c8:	bf44      	itt	mi
 804e6ca:	f043 0320 	orrmi.w	r3, r3, #32
 804e6ce:	6023      	strmi	r3, [r4, #0]
 804e6d0:	b91e      	cbnz	r6, 804e6da <_printf_i+0x196>
 804e6d2:	6823      	ldr	r3, [r4, #0]
 804e6d4:	f023 0320 	bic.w	r3, r3, #32
 804e6d8:	6023      	str	r3, [r4, #0]
 804e6da:	2310      	movs	r3, #16
 804e6dc:	e7b0      	b.n	804e640 <_printf_i+0xfc>
 804e6de:	6823      	ldr	r3, [r4, #0]
 804e6e0:	f043 0320 	orr.w	r3, r3, #32
 804e6e4:	6023      	str	r3, [r4, #0]
 804e6e6:	2378      	movs	r3, #120	; 0x78
 804e6e8:	4828      	ldr	r0, [pc, #160]	; (804e78c <_printf_i+0x248>)
 804e6ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 804e6ee:	e7e3      	b.n	804e6b8 <_printf_i+0x174>
 804e6f0:	0659      	lsls	r1, r3, #25
 804e6f2:	bf48      	it	mi
 804e6f4:	b2b6      	uxthmi	r6, r6
 804e6f6:	e7e6      	b.n	804e6c6 <_printf_i+0x182>
 804e6f8:	4615      	mov	r5, r2
 804e6fa:	e7bb      	b.n	804e674 <_printf_i+0x130>
 804e6fc:	682b      	ldr	r3, [r5, #0]
 804e6fe:	6826      	ldr	r6, [r4, #0]
 804e700:	6961      	ldr	r1, [r4, #20]
 804e702:	1d18      	adds	r0, r3, #4
 804e704:	6028      	str	r0, [r5, #0]
 804e706:	0635      	lsls	r5, r6, #24
 804e708:	681b      	ldr	r3, [r3, #0]
 804e70a:	d501      	bpl.n	804e710 <_printf_i+0x1cc>
 804e70c:	6019      	str	r1, [r3, #0]
 804e70e:	e002      	b.n	804e716 <_printf_i+0x1d2>
 804e710:	0670      	lsls	r0, r6, #25
 804e712:	d5fb      	bpl.n	804e70c <_printf_i+0x1c8>
 804e714:	8019      	strh	r1, [r3, #0]
 804e716:	2300      	movs	r3, #0
 804e718:	6123      	str	r3, [r4, #16]
 804e71a:	4615      	mov	r5, r2
 804e71c:	e7ba      	b.n	804e694 <_printf_i+0x150>
 804e71e:	682b      	ldr	r3, [r5, #0]
 804e720:	1d1a      	adds	r2, r3, #4
 804e722:	602a      	str	r2, [r5, #0]
 804e724:	681d      	ldr	r5, [r3, #0]
 804e726:	6862      	ldr	r2, [r4, #4]
 804e728:	2100      	movs	r1, #0
 804e72a:	4628      	mov	r0, r5
 804e72c:	f7f1 fd60 	bl	80401f0 <memchr>
 804e730:	b108      	cbz	r0, 804e736 <_printf_i+0x1f2>
 804e732:	1b40      	subs	r0, r0, r5
 804e734:	6060      	str	r0, [r4, #4]
 804e736:	6863      	ldr	r3, [r4, #4]
 804e738:	6123      	str	r3, [r4, #16]
 804e73a:	2300      	movs	r3, #0
 804e73c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804e740:	e7a8      	b.n	804e694 <_printf_i+0x150>
 804e742:	6923      	ldr	r3, [r4, #16]
 804e744:	462a      	mov	r2, r5
 804e746:	4649      	mov	r1, r9
 804e748:	4640      	mov	r0, r8
 804e74a:	47d0      	blx	sl
 804e74c:	3001      	adds	r0, #1
 804e74e:	d0ab      	beq.n	804e6a8 <_printf_i+0x164>
 804e750:	6823      	ldr	r3, [r4, #0]
 804e752:	079b      	lsls	r3, r3, #30
 804e754:	d413      	bmi.n	804e77e <_printf_i+0x23a>
 804e756:	68e0      	ldr	r0, [r4, #12]
 804e758:	9b03      	ldr	r3, [sp, #12]
 804e75a:	4298      	cmp	r0, r3
 804e75c:	bfb8      	it	lt
 804e75e:	4618      	movlt	r0, r3
 804e760:	e7a4      	b.n	804e6ac <_printf_i+0x168>
 804e762:	2301      	movs	r3, #1
 804e764:	4632      	mov	r2, r6
 804e766:	4649      	mov	r1, r9
 804e768:	4640      	mov	r0, r8
 804e76a:	47d0      	blx	sl
 804e76c:	3001      	adds	r0, #1
 804e76e:	d09b      	beq.n	804e6a8 <_printf_i+0x164>
 804e770:	3501      	adds	r5, #1
 804e772:	68e3      	ldr	r3, [r4, #12]
 804e774:	9903      	ldr	r1, [sp, #12]
 804e776:	1a5b      	subs	r3, r3, r1
 804e778:	42ab      	cmp	r3, r5
 804e77a:	dcf2      	bgt.n	804e762 <_printf_i+0x21e>
 804e77c:	e7eb      	b.n	804e756 <_printf_i+0x212>
 804e77e:	2500      	movs	r5, #0
 804e780:	f104 0619 	add.w	r6, r4, #25
 804e784:	e7f5      	b.n	804e772 <_printf_i+0x22e>
 804e786:	bf00      	nop
 804e788:	08051081 	.word	0x08051081
 804e78c:	08051092 	.word	0x08051092

0804e790 <__sread>:
 804e790:	b510      	push	{r4, lr}
 804e792:	460c      	mov	r4, r1
 804e794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804e798:	f000 f8ec 	bl	804e974 <_read_r>
 804e79c:	2800      	cmp	r0, #0
 804e79e:	bfab      	itete	ge
 804e7a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804e7a2:	89a3      	ldrhlt	r3, [r4, #12]
 804e7a4:	181b      	addge	r3, r3, r0
 804e7a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 804e7aa:	bfac      	ite	ge
 804e7ac:	6563      	strge	r3, [r4, #84]	; 0x54
 804e7ae:	81a3      	strhlt	r3, [r4, #12]
 804e7b0:	bd10      	pop	{r4, pc}

0804e7b2 <__swrite>:
 804e7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804e7b6:	461f      	mov	r7, r3
 804e7b8:	898b      	ldrh	r3, [r1, #12]
 804e7ba:	05db      	lsls	r3, r3, #23
 804e7bc:	4605      	mov	r5, r0
 804e7be:	460c      	mov	r4, r1
 804e7c0:	4616      	mov	r6, r2
 804e7c2:	d505      	bpl.n	804e7d0 <__swrite+0x1e>
 804e7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804e7c8:	2302      	movs	r3, #2
 804e7ca:	2200      	movs	r2, #0
 804e7cc:	f000 f868 	bl	804e8a0 <_lseek_r>
 804e7d0:	89a3      	ldrh	r3, [r4, #12]
 804e7d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804e7d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804e7da:	81a3      	strh	r3, [r4, #12]
 804e7dc:	4632      	mov	r2, r6
 804e7de:	463b      	mov	r3, r7
 804e7e0:	4628      	mov	r0, r5
 804e7e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804e7e6:	f000 b817 	b.w	804e818 <_write_r>

0804e7ea <__sseek>:
 804e7ea:	b510      	push	{r4, lr}
 804e7ec:	460c      	mov	r4, r1
 804e7ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804e7f2:	f000 f855 	bl	804e8a0 <_lseek_r>
 804e7f6:	1c43      	adds	r3, r0, #1
 804e7f8:	89a3      	ldrh	r3, [r4, #12]
 804e7fa:	bf15      	itete	ne
 804e7fc:	6560      	strne	r0, [r4, #84]	; 0x54
 804e7fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804e802:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 804e806:	81a3      	strheq	r3, [r4, #12]
 804e808:	bf18      	it	ne
 804e80a:	81a3      	strhne	r3, [r4, #12]
 804e80c:	bd10      	pop	{r4, pc}

0804e80e <__sclose>:
 804e80e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804e812:	f000 b813 	b.w	804e83c <_close_r>
	...

0804e818 <_write_r>:
 804e818:	b538      	push	{r3, r4, r5, lr}
 804e81a:	4d07      	ldr	r5, [pc, #28]	; (804e838 <_write_r+0x20>)
 804e81c:	4604      	mov	r4, r0
 804e81e:	4608      	mov	r0, r1
 804e820:	4611      	mov	r1, r2
 804e822:	2200      	movs	r2, #0
 804e824:	602a      	str	r2, [r5, #0]
 804e826:	461a      	mov	r2, r3
 804e828:	f7f3 fb91 	bl	8041f4e <_write>
 804e82c:	1c43      	adds	r3, r0, #1
 804e82e:	d102      	bne.n	804e836 <_write_r+0x1e>
 804e830:	682b      	ldr	r3, [r5, #0]
 804e832:	b103      	cbz	r3, 804e836 <_write_r+0x1e>
 804e834:	6023      	str	r3, [r4, #0]
 804e836:	bd38      	pop	{r3, r4, r5, pc}
 804e838:	200011d0 	.word	0x200011d0

0804e83c <_close_r>:
 804e83c:	b538      	push	{r3, r4, r5, lr}
 804e83e:	4d06      	ldr	r5, [pc, #24]	; (804e858 <_close_r+0x1c>)
 804e840:	2300      	movs	r3, #0
 804e842:	4604      	mov	r4, r0
 804e844:	4608      	mov	r0, r1
 804e846:	602b      	str	r3, [r5, #0]
 804e848:	f7f3 fb9d 	bl	8041f86 <_close>
 804e84c:	1c43      	adds	r3, r0, #1
 804e84e:	d102      	bne.n	804e856 <_close_r+0x1a>
 804e850:	682b      	ldr	r3, [r5, #0]
 804e852:	b103      	cbz	r3, 804e856 <_close_r+0x1a>
 804e854:	6023      	str	r3, [r4, #0]
 804e856:	bd38      	pop	{r3, r4, r5, pc}
 804e858:	200011d0 	.word	0x200011d0

0804e85c <_fstat_r>:
 804e85c:	b538      	push	{r3, r4, r5, lr}
 804e85e:	4d07      	ldr	r5, [pc, #28]	; (804e87c <_fstat_r+0x20>)
 804e860:	2300      	movs	r3, #0
 804e862:	4604      	mov	r4, r0
 804e864:	4608      	mov	r0, r1
 804e866:	4611      	mov	r1, r2
 804e868:	602b      	str	r3, [r5, #0]
 804e86a:	f7f3 fb98 	bl	8041f9e <_fstat>
 804e86e:	1c43      	adds	r3, r0, #1
 804e870:	d102      	bne.n	804e878 <_fstat_r+0x1c>
 804e872:	682b      	ldr	r3, [r5, #0]
 804e874:	b103      	cbz	r3, 804e878 <_fstat_r+0x1c>
 804e876:	6023      	str	r3, [r4, #0]
 804e878:	bd38      	pop	{r3, r4, r5, pc}
 804e87a:	bf00      	nop
 804e87c:	200011d0 	.word	0x200011d0

0804e880 <_isatty_r>:
 804e880:	b538      	push	{r3, r4, r5, lr}
 804e882:	4d06      	ldr	r5, [pc, #24]	; (804e89c <_isatty_r+0x1c>)
 804e884:	2300      	movs	r3, #0
 804e886:	4604      	mov	r4, r0
 804e888:	4608      	mov	r0, r1
 804e88a:	602b      	str	r3, [r5, #0]
 804e88c:	f7f3 fb97 	bl	8041fbe <_isatty>
 804e890:	1c43      	adds	r3, r0, #1
 804e892:	d102      	bne.n	804e89a <_isatty_r+0x1a>
 804e894:	682b      	ldr	r3, [r5, #0]
 804e896:	b103      	cbz	r3, 804e89a <_isatty_r+0x1a>
 804e898:	6023      	str	r3, [r4, #0]
 804e89a:	bd38      	pop	{r3, r4, r5, pc}
 804e89c:	200011d0 	.word	0x200011d0

0804e8a0 <_lseek_r>:
 804e8a0:	b538      	push	{r3, r4, r5, lr}
 804e8a2:	4d07      	ldr	r5, [pc, #28]	; (804e8c0 <_lseek_r+0x20>)
 804e8a4:	4604      	mov	r4, r0
 804e8a6:	4608      	mov	r0, r1
 804e8a8:	4611      	mov	r1, r2
 804e8aa:	2200      	movs	r2, #0
 804e8ac:	602a      	str	r2, [r5, #0]
 804e8ae:	461a      	mov	r2, r3
 804e8b0:	f7f3 fb90 	bl	8041fd4 <_lseek>
 804e8b4:	1c43      	adds	r3, r0, #1
 804e8b6:	d102      	bne.n	804e8be <_lseek_r+0x1e>
 804e8b8:	682b      	ldr	r3, [r5, #0]
 804e8ba:	b103      	cbz	r3, 804e8be <_lseek_r+0x1e>
 804e8bc:	6023      	str	r3, [r4, #0]
 804e8be:	bd38      	pop	{r3, r4, r5, pc}
 804e8c0:	200011d0 	.word	0x200011d0

0804e8c4 <memcpy>:
 804e8c4:	440a      	add	r2, r1
 804e8c6:	4291      	cmp	r1, r2
 804e8c8:	f100 33ff 	add.w	r3, r0, #4294967295
 804e8cc:	d100      	bne.n	804e8d0 <memcpy+0xc>
 804e8ce:	4770      	bx	lr
 804e8d0:	b510      	push	{r4, lr}
 804e8d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 804e8d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 804e8da:	4291      	cmp	r1, r2
 804e8dc:	d1f9      	bne.n	804e8d2 <memcpy+0xe>
 804e8de:	bd10      	pop	{r4, pc}

0804e8e0 <memmove>:
 804e8e0:	4288      	cmp	r0, r1
 804e8e2:	b510      	push	{r4, lr}
 804e8e4:	eb01 0402 	add.w	r4, r1, r2
 804e8e8:	d902      	bls.n	804e8f0 <memmove+0x10>
 804e8ea:	4284      	cmp	r4, r0
 804e8ec:	4623      	mov	r3, r4
 804e8ee:	d807      	bhi.n	804e900 <memmove+0x20>
 804e8f0:	1e43      	subs	r3, r0, #1
 804e8f2:	42a1      	cmp	r1, r4
 804e8f4:	d008      	beq.n	804e908 <memmove+0x28>
 804e8f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 804e8fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 804e8fe:	e7f8      	b.n	804e8f2 <memmove+0x12>
 804e900:	4402      	add	r2, r0
 804e902:	4601      	mov	r1, r0
 804e904:	428a      	cmp	r2, r1
 804e906:	d100      	bne.n	804e90a <memmove+0x2a>
 804e908:	bd10      	pop	{r4, pc}
 804e90a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 804e90e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 804e912:	e7f7      	b.n	804e904 <memmove+0x24>

0804e914 <_realloc_r>:
 804e914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804e918:	4680      	mov	r8, r0
 804e91a:	4614      	mov	r4, r2
 804e91c:	460e      	mov	r6, r1
 804e91e:	b921      	cbnz	r1, 804e92a <_realloc_r+0x16>
 804e920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804e924:	4611      	mov	r1, r2
 804e926:	f7fe becb 	b.w	804d6c0 <_malloc_r>
 804e92a:	b92a      	cbnz	r2, 804e938 <_realloc_r+0x24>
 804e92c:	f7fe fe5c 	bl	804d5e8 <_free_r>
 804e930:	4625      	mov	r5, r4
 804e932:	4628      	mov	r0, r5
 804e934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804e938:	f000 f82e 	bl	804e998 <_malloc_usable_size_r>
 804e93c:	4284      	cmp	r4, r0
 804e93e:	4607      	mov	r7, r0
 804e940:	d802      	bhi.n	804e948 <_realloc_r+0x34>
 804e942:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 804e946:	d812      	bhi.n	804e96e <_realloc_r+0x5a>
 804e948:	4621      	mov	r1, r4
 804e94a:	4640      	mov	r0, r8
 804e94c:	f7fe feb8 	bl	804d6c0 <_malloc_r>
 804e950:	4605      	mov	r5, r0
 804e952:	2800      	cmp	r0, #0
 804e954:	d0ed      	beq.n	804e932 <_realloc_r+0x1e>
 804e956:	42bc      	cmp	r4, r7
 804e958:	4622      	mov	r2, r4
 804e95a:	4631      	mov	r1, r6
 804e95c:	bf28      	it	cs
 804e95e:	463a      	movcs	r2, r7
 804e960:	f7ff ffb0 	bl	804e8c4 <memcpy>
 804e964:	4631      	mov	r1, r6
 804e966:	4640      	mov	r0, r8
 804e968:	f7fe fe3e 	bl	804d5e8 <_free_r>
 804e96c:	e7e1      	b.n	804e932 <_realloc_r+0x1e>
 804e96e:	4635      	mov	r5, r6
 804e970:	e7df      	b.n	804e932 <_realloc_r+0x1e>
	...

0804e974 <_read_r>:
 804e974:	b538      	push	{r3, r4, r5, lr}
 804e976:	4d07      	ldr	r5, [pc, #28]	; (804e994 <_read_r+0x20>)
 804e978:	4604      	mov	r4, r0
 804e97a:	4608      	mov	r0, r1
 804e97c:	4611      	mov	r1, r2
 804e97e:	2200      	movs	r2, #0
 804e980:	602a      	str	r2, [r5, #0]
 804e982:	461a      	mov	r2, r3
 804e984:	f7f3 fac6 	bl	8041f14 <_read>
 804e988:	1c43      	adds	r3, r0, #1
 804e98a:	d102      	bne.n	804e992 <_read_r+0x1e>
 804e98c:	682b      	ldr	r3, [r5, #0]
 804e98e:	b103      	cbz	r3, 804e992 <_read_r+0x1e>
 804e990:	6023      	str	r3, [r4, #0]
 804e992:	bd38      	pop	{r3, r4, r5, pc}
 804e994:	200011d0 	.word	0x200011d0

0804e998 <_malloc_usable_size_r>:
 804e998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804e99c:	1f18      	subs	r0, r3, #4
 804e99e:	2b00      	cmp	r3, #0
 804e9a0:	bfbc      	itt	lt
 804e9a2:	580b      	ldrlt	r3, [r1, r0]
 804e9a4:	18c0      	addlt	r0, r0, r3
 804e9a6:	4770      	bx	lr

0804e9a8 <_init>:
 804e9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e9aa:	bf00      	nop
 804e9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804e9ae:	bc08      	pop	{r3}
 804e9b0:	469e      	mov	lr, r3
 804e9b2:	4770      	bx	lr

0804e9b4 <_fini>:
 804e9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e9b6:	bf00      	nop
 804e9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804e9ba:	bc08      	pop	{r3}
 804e9bc:	469e      	mov	lr, r3
 804e9be:	4770      	bx	lr
