
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f318  080201b0  080201b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002654  0802f4c8  0802f4c8  0001f4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031b1c  08031b1c  000300e4  2**0
                  CONTENTS
  4 .ARM          00000008  08031b1c  08031b1c  00021b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08031b24  08031b24  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08031b24  08031b24  00021b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08031b28  08031b28  00021b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08031b2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e4  2**0
                  CONTENTS
 10 .bss          00001128  200000e4  200000e4  000300e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000120c  2000120c  000300e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ca7c  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f7f  00000000  00000000  0005cb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002358  00000000  00000000  00062b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002120  00000000  00000000  00064e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c843  00000000  00000000  00066f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002def2  00000000  00000000  000937cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0d9a  00000000  00000000  000c16bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b2457  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f6c  00000000  00000000  001b24a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201b0 <__do_global_dtors_aux>:
 80201b0:	b510      	push	{r4, lr}
 80201b2:	4c05      	ldr	r4, [pc, #20]	; (80201c8 <__do_global_dtors_aux+0x18>)
 80201b4:	7823      	ldrb	r3, [r4, #0]
 80201b6:	b933      	cbnz	r3, 80201c6 <__do_global_dtors_aux+0x16>
 80201b8:	4b04      	ldr	r3, [pc, #16]	; (80201cc <__do_global_dtors_aux+0x1c>)
 80201ba:	b113      	cbz	r3, 80201c2 <__do_global_dtors_aux+0x12>
 80201bc:	4804      	ldr	r0, [pc, #16]	; (80201d0 <__do_global_dtors_aux+0x20>)
 80201be:	f3af 8000 	nop.w
 80201c2:	2301      	movs	r3, #1
 80201c4:	7023      	strb	r3, [r4, #0]
 80201c6:	bd10      	pop	{r4, pc}
 80201c8:	200000e4 	.word	0x200000e4
 80201cc:	00000000 	.word	0x00000000
 80201d0:	0802f4b0 	.word	0x0802f4b0

080201d4 <frame_dummy>:
 80201d4:	b508      	push	{r3, lr}
 80201d6:	4b03      	ldr	r3, [pc, #12]	; (80201e4 <frame_dummy+0x10>)
 80201d8:	b11b      	cbz	r3, 80201e2 <frame_dummy+0xe>
 80201da:	4903      	ldr	r1, [pc, #12]	; (80201e8 <frame_dummy+0x14>)
 80201dc:	4803      	ldr	r0, [pc, #12]	; (80201ec <frame_dummy+0x18>)
 80201de:	f3af 8000 	nop.w
 80201e2:	bd08      	pop	{r3, pc}
 80201e4:	00000000 	.word	0x00000000
 80201e8:	200000e8 	.word	0x200000e8
 80201ec:	0802f4b0 	.word	0x0802f4b0

080201f0 <memchr>:
 80201f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201f4:	2a10      	cmp	r2, #16
 80201f6:	db2b      	blt.n	8020250 <memchr+0x60>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	d008      	beq.n	8020210 <memchr+0x20>
 80201fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020202:	3a01      	subs	r2, #1
 8020204:	428b      	cmp	r3, r1
 8020206:	d02d      	beq.n	8020264 <memchr+0x74>
 8020208:	f010 0f07 	tst.w	r0, #7
 802020c:	b342      	cbz	r2, 8020260 <memchr+0x70>
 802020e:	d1f6      	bne.n	80201fe <memchr+0xe>
 8020210:	b4f0      	push	{r4, r5, r6, r7}
 8020212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802021a:	f022 0407 	bic.w	r4, r2, #7
 802021e:	f07f 0700 	mvns.w	r7, #0
 8020222:	2300      	movs	r3, #0
 8020224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020228:	3c08      	subs	r4, #8
 802022a:	ea85 0501 	eor.w	r5, r5, r1
 802022e:	ea86 0601 	eor.w	r6, r6, r1
 8020232:	fa85 f547 	uadd8	r5, r5, r7
 8020236:	faa3 f587 	sel	r5, r3, r7
 802023a:	fa86 f647 	uadd8	r6, r6, r7
 802023e:	faa5 f687 	sel	r6, r5, r7
 8020242:	b98e      	cbnz	r6, 8020268 <memchr+0x78>
 8020244:	d1ee      	bne.n	8020224 <memchr+0x34>
 8020246:	bcf0      	pop	{r4, r5, r6, r7}
 8020248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802024c:	f002 0207 	and.w	r2, r2, #7
 8020250:	b132      	cbz	r2, 8020260 <memchr+0x70>
 8020252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020256:	3a01      	subs	r2, #1
 8020258:	ea83 0301 	eor.w	r3, r3, r1
 802025c:	b113      	cbz	r3, 8020264 <memchr+0x74>
 802025e:	d1f8      	bne.n	8020252 <memchr+0x62>
 8020260:	2000      	movs	r0, #0
 8020262:	4770      	bx	lr
 8020264:	3801      	subs	r0, #1
 8020266:	4770      	bx	lr
 8020268:	2d00      	cmp	r5, #0
 802026a:	bf06      	itte	eq
 802026c:	4635      	moveq	r5, r6
 802026e:	3803      	subeq	r0, #3
 8020270:	3807      	subne	r0, #7
 8020272:	f015 0f01 	tst.w	r5, #1
 8020276:	d107      	bne.n	8020288 <memchr+0x98>
 8020278:	3001      	adds	r0, #1
 802027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802027e:	bf02      	ittt	eq
 8020280:	3001      	addeq	r0, #1
 8020282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020286:	3001      	addeq	r0, #1
 8020288:	bcf0      	pop	{r4, r5, r6, r7}
 802028a:	3801      	subs	r0, #1
 802028c:	4770      	bx	lr
 802028e:	bf00      	nop

08020290 <__aeabi_uldivmod>:
 8020290:	b953      	cbnz	r3, 80202a8 <__aeabi_uldivmod+0x18>
 8020292:	b94a      	cbnz	r2, 80202a8 <__aeabi_uldivmod+0x18>
 8020294:	2900      	cmp	r1, #0
 8020296:	bf08      	it	eq
 8020298:	2800      	cmpeq	r0, #0
 802029a:	bf1c      	itt	ne
 802029c:	f04f 31ff 	movne.w	r1, #4294967295
 80202a0:	f04f 30ff 	movne.w	r0, #4294967295
 80202a4:	f000 b974 	b.w	8020590 <__aeabi_idiv0>
 80202a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80202ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202b0:	f000 f806 	bl	80202c0 <__udivmoddi4>
 80202b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202bc:	b004      	add	sp, #16
 80202be:	4770      	bx	lr

080202c0 <__udivmoddi4>:
 80202c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202c4:	9d08      	ldr	r5, [sp, #32]
 80202c6:	4604      	mov	r4, r0
 80202c8:	468e      	mov	lr, r1
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d14d      	bne.n	802036a <__udivmoddi4+0xaa>
 80202ce:	428a      	cmp	r2, r1
 80202d0:	4694      	mov	ip, r2
 80202d2:	d969      	bls.n	80203a8 <__udivmoddi4+0xe8>
 80202d4:	fab2 f282 	clz	r2, r2
 80202d8:	b152      	cbz	r2, 80202f0 <__udivmoddi4+0x30>
 80202da:	fa01 f302 	lsl.w	r3, r1, r2
 80202de:	f1c2 0120 	rsb	r1, r2, #32
 80202e2:	fa20 f101 	lsr.w	r1, r0, r1
 80202e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80202ea:	ea41 0e03 	orr.w	lr, r1, r3
 80202ee:	4094      	lsls	r4, r2
 80202f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80202f4:	0c21      	lsrs	r1, r4, #16
 80202f6:	fbbe f6f8 	udiv	r6, lr, r8
 80202fa:	fa1f f78c 	uxth.w	r7, ip
 80202fe:	fb08 e316 	mls	r3, r8, r6, lr
 8020302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020306:	fb06 f107 	mul.w	r1, r6, r7
 802030a:	4299      	cmp	r1, r3
 802030c:	d90a      	bls.n	8020324 <__udivmoddi4+0x64>
 802030e:	eb1c 0303 	adds.w	r3, ip, r3
 8020312:	f106 30ff 	add.w	r0, r6, #4294967295
 8020316:	f080 811f 	bcs.w	8020558 <__udivmoddi4+0x298>
 802031a:	4299      	cmp	r1, r3
 802031c:	f240 811c 	bls.w	8020558 <__udivmoddi4+0x298>
 8020320:	3e02      	subs	r6, #2
 8020322:	4463      	add	r3, ip
 8020324:	1a5b      	subs	r3, r3, r1
 8020326:	b2a4      	uxth	r4, r4
 8020328:	fbb3 f0f8 	udiv	r0, r3, r8
 802032c:	fb08 3310 	mls	r3, r8, r0, r3
 8020330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020334:	fb00 f707 	mul.w	r7, r0, r7
 8020338:	42a7      	cmp	r7, r4
 802033a:	d90a      	bls.n	8020352 <__udivmoddi4+0x92>
 802033c:	eb1c 0404 	adds.w	r4, ip, r4
 8020340:	f100 33ff 	add.w	r3, r0, #4294967295
 8020344:	f080 810a 	bcs.w	802055c <__udivmoddi4+0x29c>
 8020348:	42a7      	cmp	r7, r4
 802034a:	f240 8107 	bls.w	802055c <__udivmoddi4+0x29c>
 802034e:	4464      	add	r4, ip
 8020350:	3802      	subs	r0, #2
 8020352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020356:	1be4      	subs	r4, r4, r7
 8020358:	2600      	movs	r6, #0
 802035a:	b11d      	cbz	r5, 8020364 <__udivmoddi4+0xa4>
 802035c:	40d4      	lsrs	r4, r2
 802035e:	2300      	movs	r3, #0
 8020360:	e9c5 4300 	strd	r4, r3, [r5]
 8020364:	4631      	mov	r1, r6
 8020366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802036a:	428b      	cmp	r3, r1
 802036c:	d909      	bls.n	8020382 <__udivmoddi4+0xc2>
 802036e:	2d00      	cmp	r5, #0
 8020370:	f000 80ef 	beq.w	8020552 <__udivmoddi4+0x292>
 8020374:	2600      	movs	r6, #0
 8020376:	e9c5 0100 	strd	r0, r1, [r5]
 802037a:	4630      	mov	r0, r6
 802037c:	4631      	mov	r1, r6
 802037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020382:	fab3 f683 	clz	r6, r3
 8020386:	2e00      	cmp	r6, #0
 8020388:	d14a      	bne.n	8020420 <__udivmoddi4+0x160>
 802038a:	428b      	cmp	r3, r1
 802038c:	d302      	bcc.n	8020394 <__udivmoddi4+0xd4>
 802038e:	4282      	cmp	r2, r0
 8020390:	f200 80f9 	bhi.w	8020586 <__udivmoddi4+0x2c6>
 8020394:	1a84      	subs	r4, r0, r2
 8020396:	eb61 0303 	sbc.w	r3, r1, r3
 802039a:	2001      	movs	r0, #1
 802039c:	469e      	mov	lr, r3
 802039e:	2d00      	cmp	r5, #0
 80203a0:	d0e0      	beq.n	8020364 <__udivmoddi4+0xa4>
 80203a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80203a6:	e7dd      	b.n	8020364 <__udivmoddi4+0xa4>
 80203a8:	b902      	cbnz	r2, 80203ac <__udivmoddi4+0xec>
 80203aa:	deff      	udf	#255	; 0xff
 80203ac:	fab2 f282 	clz	r2, r2
 80203b0:	2a00      	cmp	r2, #0
 80203b2:	f040 8092 	bne.w	80204da <__udivmoddi4+0x21a>
 80203b6:	eba1 010c 	sub.w	r1, r1, ip
 80203ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80203be:	fa1f fe8c 	uxth.w	lr, ip
 80203c2:	2601      	movs	r6, #1
 80203c4:	0c20      	lsrs	r0, r4, #16
 80203c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80203ca:	fb07 1113 	mls	r1, r7, r3, r1
 80203ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203d2:	fb0e f003 	mul.w	r0, lr, r3
 80203d6:	4288      	cmp	r0, r1
 80203d8:	d908      	bls.n	80203ec <__udivmoddi4+0x12c>
 80203da:	eb1c 0101 	adds.w	r1, ip, r1
 80203de:	f103 38ff 	add.w	r8, r3, #4294967295
 80203e2:	d202      	bcs.n	80203ea <__udivmoddi4+0x12a>
 80203e4:	4288      	cmp	r0, r1
 80203e6:	f200 80cb 	bhi.w	8020580 <__udivmoddi4+0x2c0>
 80203ea:	4643      	mov	r3, r8
 80203ec:	1a09      	subs	r1, r1, r0
 80203ee:	b2a4      	uxth	r4, r4
 80203f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80203f4:	fb07 1110 	mls	r1, r7, r0, r1
 80203f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80203fc:	fb0e fe00 	mul.w	lr, lr, r0
 8020400:	45a6      	cmp	lr, r4
 8020402:	d908      	bls.n	8020416 <__udivmoddi4+0x156>
 8020404:	eb1c 0404 	adds.w	r4, ip, r4
 8020408:	f100 31ff 	add.w	r1, r0, #4294967295
 802040c:	d202      	bcs.n	8020414 <__udivmoddi4+0x154>
 802040e:	45a6      	cmp	lr, r4
 8020410:	f200 80bb 	bhi.w	802058a <__udivmoddi4+0x2ca>
 8020414:	4608      	mov	r0, r1
 8020416:	eba4 040e 	sub.w	r4, r4, lr
 802041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802041e:	e79c      	b.n	802035a <__udivmoddi4+0x9a>
 8020420:	f1c6 0720 	rsb	r7, r6, #32
 8020424:	40b3      	lsls	r3, r6
 8020426:	fa22 fc07 	lsr.w	ip, r2, r7
 802042a:	ea4c 0c03 	orr.w	ip, ip, r3
 802042e:	fa20 f407 	lsr.w	r4, r0, r7
 8020432:	fa01 f306 	lsl.w	r3, r1, r6
 8020436:	431c      	orrs	r4, r3
 8020438:	40f9      	lsrs	r1, r7
 802043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802043e:	fa00 f306 	lsl.w	r3, r0, r6
 8020442:	fbb1 f8f9 	udiv	r8, r1, r9
 8020446:	0c20      	lsrs	r0, r4, #16
 8020448:	fa1f fe8c 	uxth.w	lr, ip
 802044c:	fb09 1118 	mls	r1, r9, r8, r1
 8020450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020454:	fb08 f00e 	mul.w	r0, r8, lr
 8020458:	4288      	cmp	r0, r1
 802045a:	fa02 f206 	lsl.w	r2, r2, r6
 802045e:	d90b      	bls.n	8020478 <__udivmoddi4+0x1b8>
 8020460:	eb1c 0101 	adds.w	r1, ip, r1
 8020464:	f108 3aff 	add.w	sl, r8, #4294967295
 8020468:	f080 8088 	bcs.w	802057c <__udivmoddi4+0x2bc>
 802046c:	4288      	cmp	r0, r1
 802046e:	f240 8085 	bls.w	802057c <__udivmoddi4+0x2bc>
 8020472:	f1a8 0802 	sub.w	r8, r8, #2
 8020476:	4461      	add	r1, ip
 8020478:	1a09      	subs	r1, r1, r0
 802047a:	b2a4      	uxth	r4, r4
 802047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020480:	fb09 1110 	mls	r1, r9, r0, r1
 8020484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020488:	fb00 fe0e 	mul.w	lr, r0, lr
 802048c:	458e      	cmp	lr, r1
 802048e:	d908      	bls.n	80204a2 <__udivmoddi4+0x1e2>
 8020490:	eb1c 0101 	adds.w	r1, ip, r1
 8020494:	f100 34ff 	add.w	r4, r0, #4294967295
 8020498:	d26c      	bcs.n	8020574 <__udivmoddi4+0x2b4>
 802049a:	458e      	cmp	lr, r1
 802049c:	d96a      	bls.n	8020574 <__udivmoddi4+0x2b4>
 802049e:	3802      	subs	r0, #2
 80204a0:	4461      	add	r1, ip
 80204a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80204a6:	fba0 9402 	umull	r9, r4, r0, r2
 80204aa:	eba1 010e 	sub.w	r1, r1, lr
 80204ae:	42a1      	cmp	r1, r4
 80204b0:	46c8      	mov	r8, r9
 80204b2:	46a6      	mov	lr, r4
 80204b4:	d356      	bcc.n	8020564 <__udivmoddi4+0x2a4>
 80204b6:	d053      	beq.n	8020560 <__udivmoddi4+0x2a0>
 80204b8:	b15d      	cbz	r5, 80204d2 <__udivmoddi4+0x212>
 80204ba:	ebb3 0208 	subs.w	r2, r3, r8
 80204be:	eb61 010e 	sbc.w	r1, r1, lr
 80204c2:	fa01 f707 	lsl.w	r7, r1, r7
 80204c6:	fa22 f306 	lsr.w	r3, r2, r6
 80204ca:	40f1      	lsrs	r1, r6
 80204cc:	431f      	orrs	r7, r3
 80204ce:	e9c5 7100 	strd	r7, r1, [r5]
 80204d2:	2600      	movs	r6, #0
 80204d4:	4631      	mov	r1, r6
 80204d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204da:	f1c2 0320 	rsb	r3, r2, #32
 80204de:	40d8      	lsrs	r0, r3
 80204e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80204e4:	fa21 f303 	lsr.w	r3, r1, r3
 80204e8:	4091      	lsls	r1, r2
 80204ea:	4301      	orrs	r1, r0
 80204ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204f0:	fa1f fe8c 	uxth.w	lr, ip
 80204f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80204f8:	fb07 3610 	mls	r6, r7, r0, r3
 80204fc:	0c0b      	lsrs	r3, r1, #16
 80204fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020502:	fb00 f60e 	mul.w	r6, r0, lr
 8020506:	429e      	cmp	r6, r3
 8020508:	fa04 f402 	lsl.w	r4, r4, r2
 802050c:	d908      	bls.n	8020520 <__udivmoddi4+0x260>
 802050e:	eb1c 0303 	adds.w	r3, ip, r3
 8020512:	f100 38ff 	add.w	r8, r0, #4294967295
 8020516:	d22f      	bcs.n	8020578 <__udivmoddi4+0x2b8>
 8020518:	429e      	cmp	r6, r3
 802051a:	d92d      	bls.n	8020578 <__udivmoddi4+0x2b8>
 802051c:	3802      	subs	r0, #2
 802051e:	4463      	add	r3, ip
 8020520:	1b9b      	subs	r3, r3, r6
 8020522:	b289      	uxth	r1, r1
 8020524:	fbb3 f6f7 	udiv	r6, r3, r7
 8020528:	fb07 3316 	mls	r3, r7, r6, r3
 802052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020530:	fb06 f30e 	mul.w	r3, r6, lr
 8020534:	428b      	cmp	r3, r1
 8020536:	d908      	bls.n	802054a <__udivmoddi4+0x28a>
 8020538:	eb1c 0101 	adds.w	r1, ip, r1
 802053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8020540:	d216      	bcs.n	8020570 <__udivmoddi4+0x2b0>
 8020542:	428b      	cmp	r3, r1
 8020544:	d914      	bls.n	8020570 <__udivmoddi4+0x2b0>
 8020546:	3e02      	subs	r6, #2
 8020548:	4461      	add	r1, ip
 802054a:	1ac9      	subs	r1, r1, r3
 802054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020550:	e738      	b.n	80203c4 <__udivmoddi4+0x104>
 8020552:	462e      	mov	r6, r5
 8020554:	4628      	mov	r0, r5
 8020556:	e705      	b.n	8020364 <__udivmoddi4+0xa4>
 8020558:	4606      	mov	r6, r0
 802055a:	e6e3      	b.n	8020324 <__udivmoddi4+0x64>
 802055c:	4618      	mov	r0, r3
 802055e:	e6f8      	b.n	8020352 <__udivmoddi4+0x92>
 8020560:	454b      	cmp	r3, r9
 8020562:	d2a9      	bcs.n	80204b8 <__udivmoddi4+0x1f8>
 8020564:	ebb9 0802 	subs.w	r8, r9, r2
 8020568:	eb64 0e0c 	sbc.w	lr, r4, ip
 802056c:	3801      	subs	r0, #1
 802056e:	e7a3      	b.n	80204b8 <__udivmoddi4+0x1f8>
 8020570:	4646      	mov	r6, r8
 8020572:	e7ea      	b.n	802054a <__udivmoddi4+0x28a>
 8020574:	4620      	mov	r0, r4
 8020576:	e794      	b.n	80204a2 <__udivmoddi4+0x1e2>
 8020578:	4640      	mov	r0, r8
 802057a:	e7d1      	b.n	8020520 <__udivmoddi4+0x260>
 802057c:	46d0      	mov	r8, sl
 802057e:	e77b      	b.n	8020478 <__udivmoddi4+0x1b8>
 8020580:	3b02      	subs	r3, #2
 8020582:	4461      	add	r1, ip
 8020584:	e732      	b.n	80203ec <__udivmoddi4+0x12c>
 8020586:	4630      	mov	r0, r6
 8020588:	e709      	b.n	802039e <__udivmoddi4+0xde>
 802058a:	4464      	add	r4, ip
 802058c:	3802      	subs	r0, #2
 802058e:	e742      	b.n	8020416 <__udivmoddi4+0x156>

08020590 <__aeabi_idiv0>:
 8020590:	4770      	bx	lr
 8020592:	bf00      	nop

08020594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020594:	b580      	push	{r7, lr}
 8020596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020598:	f003 f842 	bl	8023620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802059c:	f000 f8a4 	bl	80206e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80205a0:	f000 fb3e 	bl	8020c20 <MX_GPIO_Init>
  MX_CRC_Init();
 80205a4:	f000 f90c 	bl	80207c0 <MX_CRC_Init>
  MX_DMA2D_Init();
 80205a8:	f000 f91e 	bl	80207e8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80205ac:	f000 fae8 	bl	8020b80 <MX_FMC_Init>
  MX_I2C3_Init();
 80205b0:	f000 f94c 	bl	802084c <MX_I2C3_Init>
  MX_LTDC_Init();
 80205b4:	f000 f98a 	bl	80208cc <MX_LTDC_Init>
  MX_SPI5_Init();
 80205b8:	f000 fa08 	bl	80209cc <MX_SPI5_Init>
  MX_TIM1_Init();
 80205bc:	f000 fa3c 	bl	8020a38 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80205c0:	f000 fab4 	bl	8020b2c <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80205c4:	f00d fa44 	bl	802da50 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80205c8:	f000 fa86 	bl	8020ad8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  // Start Receiving data from modem
  HAL_UART_Receive_IT(&huart5, Rx_Byte, 1);
 80205cc:	2201      	movs	r2, #1
 80205ce:	493a      	ldr	r1, [pc, #232]	; (80206b8 <main+0x124>)
 80205d0:	483a      	ldr	r0, [pc, #232]	; (80206bc <main+0x128>)
 80205d2:	f009 f9b6 	bl	8029942 <HAL_UART_Receive_IT>


  sprintf(buffch,"Starting Application (%d.%d)", BL_Version[0], BL_Version[1]);
 80205d6:	2300      	movs	r3, #0
 80205d8:	461a      	mov	r2, r3
 80205da:	2305      	movs	r3, #5
 80205dc:	4938      	ldr	r1, [pc, #224]	; (80206c0 <main+0x12c>)
 80205de:	4839      	ldr	r0, [pc, #228]	; (80206c4 <main+0x130>)
 80205e0:	f00d ff04 	bl	802e3ec <siprintf>
  printf("Starting Application (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80205e4:	2300      	movs	r3, #0
 80205e6:	2205      	movs	r2, #5
 80205e8:	4619      	mov	r1, r3
 80205ea:	4837      	ldr	r0, [pc, #220]	; (80206c8 <main+0x134>)
 80205ec:	f00d fe60 	bl	802e2b0 <iprintf>


  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 80205f0:	f002 f990 	bl	8022914 <BSP_LCD_Init>

  /* Layer2 Init */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80205f4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80205f8:	2001      	movs	r0, #1
 80205fa:	f002 fa0d 	bl	8022a18 <BSP_LCD_LayerDefaultInit>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80205fe:	2001      	movs	r0, #1
 8020600:	f002 fa6e 	bl	8022ae0 <BSP_LCD_SelectLayer>
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020604:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020608:	f002 fb18 	bl	8022c3c <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_BLACK);
 802060c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8020610:	2001      	movs	r0, #1
 8020612:	f002 fab3 	bl	8022b7c <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8020616:	2100      	movs	r1, #0
 8020618:	2001      	movs	r0, #1
 802061a:	f002 fa71 	bl	8022b00 <BSP_LCD_SetLayerVisible>

  /* Layer1 Init */
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 802061e:	492b      	ldr	r1, [pc, #172]	; (80206cc <main+0x138>)
 8020620:	2000      	movs	r0, #0
 8020622:	f002 f9f9 	bl	8022a18 <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 8020626:	2000      	movs	r0, #0
 8020628:	f002 fa5a 	bl	8022ae0 <BSP_LCD_SelectLayer>

  /* Enable The LCD */
  BSP_LCD_DisplayOn();
 802062c:	f002 fc30 	bl	8022e90 <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020630:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020634:	f002 fb02 	bl	8022c3c <BSP_LCD_Clear>


  /* Set Touchscreen Demo description */

  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8020638:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 802063c:	f002 faca 	bl	8022bd4 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8020640:	4823      	ldr	r0, [pc, #140]	; (80206d0 <main+0x13c>)
 8020642:	f002 faaf 	bl	8022ba4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 8020646:	4823      	ldr	r0, [pc, #140]	; (80206d4 <main+0x140>)
 8020648:	f002 fade 	bl	8022c08 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)buffch, CENTER_MODE);
 802064c:	2301      	movs	r3, #1
 802064e:	4a1d      	ldr	r2, [pc, #116]	; (80206c4 <main+0x130>)
 8020650:	2100      	movs	r1, #0
 8020652:	2000      	movs	r0, #0
 8020654:	f002 fb5e 	bl	8022d14 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8020658:	f04f 30ff 	mov.w	r0, #4294967295
 802065c:	f002 faa2 	bl	8022ba4 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"APPLICATION", CENTER_MODE);
 8020660:	f002 f9ce 	bl	8022a00 <BSP_LCD_GetYSize>
 8020664:	4603      	mov	r3, r0
 8020666:	085b      	lsrs	r3, r3, #1
 8020668:	b29b      	uxth	r3, r3
 802066a:	3b0c      	subs	r3, #12
 802066c:	b299      	uxth	r1, r3
 802066e:	2301      	movs	r3, #1
 8020670:	4a19      	ldr	r2, [pc, #100]	; (80206d8 <main+0x144>)
 8020672:	2000      	movs	r0, #0
 8020674:	f002 fb4e 	bl	8022d14 <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8020678:	f00d fa10 	bl	802da9c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 802067c:	2201      	movs	r2, #1
 802067e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020682:	4816      	ldr	r0, [pc, #88]	; (80206dc <main+0x148>)
 8020684:	f004 fcf6 	bl	8025074 <HAL_GPIO_WritePin>

    /* check serial communication process */
    serial_app();
 8020688:	f000 fc18 	bl	8020ebc <serial_app>

    /* check for OTA Update */
    if( HAL_GetTick() - prOTACheck > OTA_CHECK_INTERVAL)
 802068c:	f002 fffe 	bl	802368c <HAL_GetTick>
 8020690:	4602      	mov	r2, r0
 8020692:	4b13      	ldr	r3, [pc, #76]	; (80206e0 <main+0x14c>)
 8020694:	681b      	ldr	r3, [r3, #0]
 8020696:	1ad3      	subs	r3, r2, r3
 8020698:	f649 4240 	movw	r2, #40000	; 0x9c40
 802069c:	4293      	cmp	r3, r2
 802069e:	d9eb      	bls.n	8020678 <main+0xe4>
    {
    	printf("Check for Update!\r\n");
 80206a0:	4810      	ldr	r0, [pc, #64]	; (80206e4 <main+0x150>)
 80206a2:	f00d fe8b 	bl	802e3bc <puts>
    	prOTACheck = HAL_GetTick();
 80206a6:	f002 fff1 	bl	802368c <HAL_GetTick>
 80206aa:	4603      	mov	r3, r0
 80206ac:	4a0c      	ldr	r2, [pc, #48]	; (80206e0 <main+0x14c>)
 80206ae:	6013      	str	r3, [r2, #0]
    	ota_check();
 80206b0:	f000 fc9a 	bl	8020fe8 <ota_check>
    MX_USB_HOST_Process();
 80206b4:	e7e0      	b.n	8020678 <main+0xe4>
 80206b6:	bf00      	nop
 80206b8:	20000404 	.word	0x20000404
 80206bc:	200002e4 	.word	0x200002e4
 80206c0:	0802f4c8 	.word	0x0802f4c8
 80206c4:	200003a0 	.word	0x200003a0
 80206c8:	0802f4e8 	.word	0x0802f4e8
 80206cc:	d0130000 	.word	0xd0130000
 80206d0:	ffff0000 	.word	0xffff0000
 80206d4:	2000004c 	.word	0x2000004c
 80206d8:	0802f508 	.word	0x0802f508
 80206dc:	40021800 	.word	0x40021800
 80206e0:	2000041c 	.word	0x2000041c
 80206e4:	0802f514 	.word	0x0802f514

080206e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80206e8:	b580      	push	{r7, lr}
 80206ea:	b094      	sub	sp, #80	; 0x50
 80206ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80206ee:	f107 0320 	add.w	r3, r7, #32
 80206f2:	2230      	movs	r2, #48	; 0x30
 80206f4:	2100      	movs	r1, #0
 80206f6:	4618      	mov	r0, r3
 80206f8:	f00d fcf2 	bl	802e0e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80206fc:	f107 030c 	add.w	r3, r7, #12
 8020700:	2200      	movs	r2, #0
 8020702:	601a      	str	r2, [r3, #0]
 8020704:	605a      	str	r2, [r3, #4]
 8020706:	609a      	str	r2, [r3, #8]
 8020708:	60da      	str	r2, [r3, #12]
 802070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 802070c:	2300      	movs	r3, #0
 802070e:	60bb      	str	r3, [r7, #8]
 8020710:	4b29      	ldr	r3, [pc, #164]	; (80207b8 <SystemClock_Config+0xd0>)
 8020712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020714:	4a28      	ldr	r2, [pc, #160]	; (80207b8 <SystemClock_Config+0xd0>)
 8020716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802071a:	6413      	str	r3, [r2, #64]	; 0x40
 802071c:	4b26      	ldr	r3, [pc, #152]	; (80207b8 <SystemClock_Config+0xd0>)
 802071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020724:	60bb      	str	r3, [r7, #8]
 8020726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8020728:	2300      	movs	r3, #0
 802072a:	607b      	str	r3, [r7, #4]
 802072c:	4b23      	ldr	r3, [pc, #140]	; (80207bc <SystemClock_Config+0xd4>)
 802072e:	681b      	ldr	r3, [r3, #0]
 8020730:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8020734:	4a21      	ldr	r2, [pc, #132]	; (80207bc <SystemClock_Config+0xd4>)
 8020736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802073a:	6013      	str	r3, [r2, #0]
 802073c:	4b1f      	ldr	r3, [pc, #124]	; (80207bc <SystemClock_Config+0xd4>)
 802073e:	681b      	ldr	r3, [r3, #0]
 8020740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8020744:	607b      	str	r3, [r7, #4]
 8020746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8020748:	2301      	movs	r3, #1
 802074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 802074c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020750:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020752:	2302      	movs	r3, #2
 8020754:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020756:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 802075c:	2310      	movs	r3, #16
 802075e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8020760:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8020764:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8020766:	2302      	movs	r3, #2
 8020768:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 802076a:	2303      	movs	r3, #3
 802076c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802076e:	f107 0320 	add.w	r3, r7, #32
 8020772:	4618      	mov	r0, r3
 8020774:	f006 fe8a 	bl	802748c <HAL_RCC_OscConfig>
 8020778:	4603      	mov	r3, r0
 802077a:	2b00      	cmp	r3, #0
 802077c:	d001      	beq.n	8020782 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 802077e:	f000 fb97 	bl	8020eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020782:	230f      	movs	r3, #15
 8020784:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020786:	2302      	movs	r3, #2
 8020788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802078a:	2300      	movs	r3, #0
 802078c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802078e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020792:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8020794:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020798:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 802079a:	f107 030c 	add.w	r3, r7, #12
 802079e:	2102      	movs	r1, #2
 80207a0:	4618      	mov	r0, r3
 80207a2:	f007 f8eb 	bl	802797c <HAL_RCC_ClockConfig>
 80207a6:	4603      	mov	r3, r0
 80207a8:	2b00      	cmp	r3, #0
 80207aa:	d001      	beq.n	80207b0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80207ac:	f000 fb80 	bl	8020eb0 <Error_Handler>
  }
}
 80207b0:	bf00      	nop
 80207b2:	3750      	adds	r7, #80	; 0x50
 80207b4:	46bd      	mov	sp, r7
 80207b6:	bd80      	pop	{r7, pc}
 80207b8:	40023800 	.word	0x40023800
 80207bc:	40007000 	.word	0x40007000

080207c0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80207c0:	b580      	push	{r7, lr}
 80207c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80207c4:	4b06      	ldr	r3, [pc, #24]	; (80207e0 <MX_CRC_Init+0x20>)
 80207c6:	4a07      	ldr	r2, [pc, #28]	; (80207e4 <MX_CRC_Init+0x24>)
 80207c8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80207ca:	4805      	ldr	r0, [pc, #20]	; (80207e0 <MX_CRC_Init+0x20>)
 80207cc:	f003 f88b 	bl	80238e6 <HAL_CRC_Init>
 80207d0:	4603      	mov	r3, r0
 80207d2:	2b00      	cmp	r3, #0
 80207d4:	d001      	beq.n	80207da <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80207d6:	f000 fb6b 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80207da:	bf00      	nop
 80207dc:	bd80      	pop	{r7, pc}
 80207de:	bf00      	nop
 80207e0:	20000100 	.word	0x20000100
 80207e4:	40023000 	.word	0x40023000

080207e8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80207e8:	b580      	push	{r7, lr}
 80207ea:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80207ec:	4b15      	ldr	r3, [pc, #84]	; (8020844 <MX_DMA2D_Init+0x5c>)
 80207ee:	4a16      	ldr	r2, [pc, #88]	; (8020848 <MX_DMA2D_Init+0x60>)
 80207f0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80207f2:	4b14      	ldr	r3, [pc, #80]	; (8020844 <MX_DMA2D_Init+0x5c>)
 80207f4:	2200      	movs	r2, #0
 80207f6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80207f8:	4b12      	ldr	r3, [pc, #72]	; (8020844 <MX_DMA2D_Init+0x5c>)
 80207fa:	2200      	movs	r2, #0
 80207fc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80207fe:	4b11      	ldr	r3, [pc, #68]	; (8020844 <MX_DMA2D_Init+0x5c>)
 8020800:	2200      	movs	r2, #0
 8020802:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8020804:	4b0f      	ldr	r3, [pc, #60]	; (8020844 <MX_DMA2D_Init+0x5c>)
 8020806:	2200      	movs	r2, #0
 8020808:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 802080a:	4b0e      	ldr	r3, [pc, #56]	; (8020844 <MX_DMA2D_Init+0x5c>)
 802080c:	2200      	movs	r2, #0
 802080e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8020810:	4b0c      	ldr	r3, [pc, #48]	; (8020844 <MX_DMA2D_Init+0x5c>)
 8020812:	2200      	movs	r2, #0
 8020814:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8020816:	4b0b      	ldr	r3, [pc, #44]	; (8020844 <MX_DMA2D_Init+0x5c>)
 8020818:	2200      	movs	r2, #0
 802081a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 802081c:	4809      	ldr	r0, [pc, #36]	; (8020844 <MX_DMA2D_Init+0x5c>)
 802081e:	f003 facf 	bl	8023dc0 <HAL_DMA2D_Init>
 8020822:	4603      	mov	r3, r0
 8020824:	2b00      	cmp	r3, #0
 8020826:	d001      	beq.n	802082c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8020828:	f000 fb42 	bl	8020eb0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 802082c:	2101      	movs	r1, #1
 802082e:	4805      	ldr	r0, [pc, #20]	; (8020844 <MX_DMA2D_Init+0x5c>)
 8020830:	f003 fd34 	bl	802429c <HAL_DMA2D_ConfigLayer>
 8020834:	4603      	mov	r3, r0
 8020836:	2b00      	cmp	r3, #0
 8020838:	d001      	beq.n	802083e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 802083a:	f000 fb39 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 802083e:	bf00      	nop
 8020840:	bd80      	pop	{r7, pc}
 8020842:	bf00      	nop
 8020844:	20000108 	.word	0x20000108
 8020848:	4002b000 	.word	0x4002b000

0802084c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 802084c:	b580      	push	{r7, lr}
 802084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8020850:	4b1b      	ldr	r3, [pc, #108]	; (80208c0 <MX_I2C3_Init+0x74>)
 8020852:	4a1c      	ldr	r2, [pc, #112]	; (80208c4 <MX_I2C3_Init+0x78>)
 8020854:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8020856:	4b1a      	ldr	r3, [pc, #104]	; (80208c0 <MX_I2C3_Init+0x74>)
 8020858:	4a1b      	ldr	r2, [pc, #108]	; (80208c8 <MX_I2C3_Init+0x7c>)
 802085a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 802085c:	4b18      	ldr	r3, [pc, #96]	; (80208c0 <MX_I2C3_Init+0x74>)
 802085e:	2200      	movs	r2, #0
 8020860:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8020862:	4b17      	ldr	r3, [pc, #92]	; (80208c0 <MX_I2C3_Init+0x74>)
 8020864:	2200      	movs	r2, #0
 8020866:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020868:	4b15      	ldr	r3, [pc, #84]	; (80208c0 <MX_I2C3_Init+0x74>)
 802086a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802086e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020870:	4b13      	ldr	r3, [pc, #76]	; (80208c0 <MX_I2C3_Init+0x74>)
 8020872:	2200      	movs	r2, #0
 8020874:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8020876:	4b12      	ldr	r3, [pc, #72]	; (80208c0 <MX_I2C3_Init+0x74>)
 8020878:	2200      	movs	r2, #0
 802087a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802087c:	4b10      	ldr	r3, [pc, #64]	; (80208c0 <MX_I2C3_Init+0x74>)
 802087e:	2200      	movs	r2, #0
 8020880:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8020882:	4b0f      	ldr	r3, [pc, #60]	; (80208c0 <MX_I2C3_Init+0x74>)
 8020884:	2200      	movs	r2, #0
 8020886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8020888:	480d      	ldr	r0, [pc, #52]	; (80208c0 <MX_I2C3_Init+0x74>)
 802088a:	f006 f82f 	bl	80268ec <HAL_I2C_Init>
 802088e:	4603      	mov	r3, r0
 8020890:	2b00      	cmp	r3, #0
 8020892:	d001      	beq.n	8020898 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8020894:	f000 fb0c 	bl	8020eb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8020898:	2100      	movs	r1, #0
 802089a:	4809      	ldr	r0, [pc, #36]	; (80208c0 <MX_I2C3_Init+0x74>)
 802089c:	f006 f96a 	bl	8026b74 <HAL_I2CEx_ConfigAnalogFilter>
 80208a0:	4603      	mov	r3, r0
 80208a2:	2b00      	cmp	r3, #0
 80208a4:	d001      	beq.n	80208aa <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80208a6:	f000 fb03 	bl	8020eb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80208aa:	2100      	movs	r1, #0
 80208ac:	4804      	ldr	r0, [pc, #16]	; (80208c0 <MX_I2C3_Init+0x74>)
 80208ae:	f006 f99d 	bl	8026bec <HAL_I2CEx_ConfigDigitalFilter>
 80208b2:	4603      	mov	r3, r0
 80208b4:	2b00      	cmp	r3, #0
 80208b6:	d001      	beq.n	80208bc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80208b8:	f000 fafa 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80208bc:	bf00      	nop
 80208be:	bd80      	pop	{r7, pc}
 80208c0:	20000148 	.word	0x20000148
 80208c4:	40005c00 	.word	0x40005c00
 80208c8:	000186a0 	.word	0x000186a0

080208cc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80208cc:	b580      	push	{r7, lr}
 80208ce:	b08e      	sub	sp, #56	; 0x38
 80208d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80208d2:	1d3b      	adds	r3, r7, #4
 80208d4:	2234      	movs	r2, #52	; 0x34
 80208d6:	2100      	movs	r1, #0
 80208d8:	4618      	mov	r0, r3
 80208da:	f00d fc01 	bl	802e0e0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80208de:	4b39      	ldr	r3, [pc, #228]	; (80209c4 <MX_LTDC_Init+0xf8>)
 80208e0:	4a39      	ldr	r2, [pc, #228]	; (80209c8 <MX_LTDC_Init+0xfc>)
 80208e2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80208e4:	4b37      	ldr	r3, [pc, #220]	; (80209c4 <MX_LTDC_Init+0xf8>)
 80208e6:	2200      	movs	r2, #0
 80208e8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80208ea:	4b36      	ldr	r3, [pc, #216]	; (80209c4 <MX_LTDC_Init+0xf8>)
 80208ec:	2200      	movs	r2, #0
 80208ee:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80208f0:	4b34      	ldr	r3, [pc, #208]	; (80209c4 <MX_LTDC_Init+0xf8>)
 80208f2:	2200      	movs	r2, #0
 80208f4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80208f6:	4b33      	ldr	r3, [pc, #204]	; (80209c4 <MX_LTDC_Init+0xf8>)
 80208f8:	2200      	movs	r2, #0
 80208fa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80208fc:	4b31      	ldr	r3, [pc, #196]	; (80209c4 <MX_LTDC_Init+0xf8>)
 80208fe:	2209      	movs	r2, #9
 8020900:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8020902:	4b30      	ldr	r3, [pc, #192]	; (80209c4 <MX_LTDC_Init+0xf8>)
 8020904:	2201      	movs	r2, #1
 8020906:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8020908:	4b2e      	ldr	r3, [pc, #184]	; (80209c4 <MX_LTDC_Init+0xf8>)
 802090a:	221d      	movs	r2, #29
 802090c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 802090e:	4b2d      	ldr	r3, [pc, #180]	; (80209c4 <MX_LTDC_Init+0xf8>)
 8020910:	2203      	movs	r2, #3
 8020912:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8020914:	4b2b      	ldr	r3, [pc, #172]	; (80209c4 <MX_LTDC_Init+0xf8>)
 8020916:	f240 120d 	movw	r2, #269	; 0x10d
 802091a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 802091c:	4b29      	ldr	r3, [pc, #164]	; (80209c4 <MX_LTDC_Init+0xf8>)
 802091e:	f240 1243 	movw	r2, #323	; 0x143
 8020922:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8020924:	4b27      	ldr	r3, [pc, #156]	; (80209c4 <MX_LTDC_Init+0xf8>)
 8020926:	f240 1217 	movw	r2, #279	; 0x117
 802092a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 802092c:	4b25      	ldr	r3, [pc, #148]	; (80209c4 <MX_LTDC_Init+0xf8>)
 802092e:	f240 1247 	movw	r2, #327	; 0x147
 8020932:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8020934:	4b23      	ldr	r3, [pc, #140]	; (80209c4 <MX_LTDC_Init+0xf8>)
 8020936:	2200      	movs	r2, #0
 8020938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 802093c:	4b21      	ldr	r3, [pc, #132]	; (80209c4 <MX_LTDC_Init+0xf8>)
 802093e:	2200      	movs	r2, #0
 8020940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8020944:	4b1f      	ldr	r3, [pc, #124]	; (80209c4 <MX_LTDC_Init+0xf8>)
 8020946:	2200      	movs	r2, #0
 8020948:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 802094c:	481d      	ldr	r0, [pc, #116]	; (80209c4 <MX_LTDC_Init+0xf8>)
 802094e:	f006 f98d 	bl	8026c6c <HAL_LTDC_Init>
 8020952:	4603      	mov	r3, r0
 8020954:	2b00      	cmp	r3, #0
 8020956:	d001      	beq.n	802095c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8020958:	f000 faaa 	bl	8020eb0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 802095c:	2300      	movs	r3, #0
 802095e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8020960:	23f0      	movs	r3, #240	; 0xf0
 8020962:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8020964:	2300      	movs	r3, #0
 8020966:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8020968:	f44f 73a0 	mov.w	r3, #320	; 0x140
 802096c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 802096e:	2302      	movs	r3, #2
 8020970:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8020972:	23ff      	movs	r3, #255	; 0xff
 8020974:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8020976:	2300      	movs	r3, #0
 8020978:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 802097a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 802097e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8020980:	2307      	movs	r3, #7
 8020982:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8020984:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8020988:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 802098a:	23f0      	movs	r3, #240	; 0xf0
 802098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 802098e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8020992:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8020994:	2300      	movs	r3, #0
 8020996:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 802099a:	2300      	movs	r3, #0
 802099c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80209a0:	2300      	movs	r3, #0
 80209a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80209a6:	1d3b      	adds	r3, r7, #4
 80209a8:	2200      	movs	r2, #0
 80209aa:	4619      	mov	r1, r3
 80209ac:	4805      	ldr	r0, [pc, #20]	; (80209c4 <MX_LTDC_Init+0xf8>)
 80209ae:	f006 faef 	bl	8026f90 <HAL_LTDC_ConfigLayer>
 80209b2:	4603      	mov	r3, r0
 80209b4:	2b00      	cmp	r3, #0
 80209b6:	d001      	beq.n	80209bc <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80209b8:	f000 fa7a 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80209bc:	bf00      	nop
 80209be:	3738      	adds	r7, #56	; 0x38
 80209c0:	46bd      	mov	sp, r7
 80209c2:	bd80      	pop	{r7, pc}
 80209c4:	2000019c 	.word	0x2000019c
 80209c8:	40016800 	.word	0x40016800

080209cc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80209cc:	b580      	push	{r7, lr}
 80209ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80209d0:	4b17      	ldr	r3, [pc, #92]	; (8020a30 <MX_SPI5_Init+0x64>)
 80209d2:	4a18      	ldr	r2, [pc, #96]	; (8020a34 <MX_SPI5_Init+0x68>)
 80209d4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80209d6:	4b16      	ldr	r3, [pc, #88]	; (8020a30 <MX_SPI5_Init+0x64>)
 80209d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80209dc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80209de:	4b14      	ldr	r3, [pc, #80]	; (8020a30 <MX_SPI5_Init+0x64>)
 80209e0:	2200      	movs	r2, #0
 80209e2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80209e4:	4b12      	ldr	r3, [pc, #72]	; (8020a30 <MX_SPI5_Init+0x64>)
 80209e6:	2200      	movs	r2, #0
 80209e8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80209ea:	4b11      	ldr	r3, [pc, #68]	; (8020a30 <MX_SPI5_Init+0x64>)
 80209ec:	2200      	movs	r2, #0
 80209ee:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80209f0:	4b0f      	ldr	r3, [pc, #60]	; (8020a30 <MX_SPI5_Init+0x64>)
 80209f2:	2200      	movs	r2, #0
 80209f4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80209f6:	4b0e      	ldr	r3, [pc, #56]	; (8020a30 <MX_SPI5_Init+0x64>)
 80209f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80209fc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80209fe:	4b0c      	ldr	r3, [pc, #48]	; (8020a30 <MX_SPI5_Init+0x64>)
 8020a00:	2218      	movs	r2, #24
 8020a02:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8020a04:	4b0a      	ldr	r3, [pc, #40]	; (8020a30 <MX_SPI5_Init+0x64>)
 8020a06:	2200      	movs	r2, #0
 8020a08:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8020a0a:	4b09      	ldr	r3, [pc, #36]	; (8020a30 <MX_SPI5_Init+0x64>)
 8020a0c:	2200      	movs	r2, #0
 8020a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020a10:	4b07      	ldr	r3, [pc, #28]	; (8020a30 <MX_SPI5_Init+0x64>)
 8020a12:	2200      	movs	r2, #0
 8020a14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8020a16:	4b06      	ldr	r3, [pc, #24]	; (8020a30 <MX_SPI5_Init+0x64>)
 8020a18:	220a      	movs	r2, #10
 8020a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8020a1c:	4804      	ldr	r0, [pc, #16]	; (8020a30 <MX_SPI5_Init+0x64>)
 8020a1e:	f007 fc50 	bl	80282c2 <HAL_SPI_Init>
 8020a22:	4603      	mov	r3, r0
 8020a24:	2b00      	cmp	r3, #0
 8020a26:	d001      	beq.n	8020a2c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8020a28:	f000 fa42 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8020a2c:	bf00      	nop
 8020a2e:	bd80      	pop	{r7, pc}
 8020a30:	20000244 	.word	0x20000244
 8020a34:	40015000 	.word	0x40015000

08020a38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8020a38:	b580      	push	{r7, lr}
 8020a3a:	b086      	sub	sp, #24
 8020a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8020a3e:	f107 0308 	add.w	r3, r7, #8
 8020a42:	2200      	movs	r2, #0
 8020a44:	601a      	str	r2, [r3, #0]
 8020a46:	605a      	str	r2, [r3, #4]
 8020a48:	609a      	str	r2, [r3, #8]
 8020a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020a4c:	463b      	mov	r3, r7
 8020a4e:	2200      	movs	r2, #0
 8020a50:	601a      	str	r2, [r3, #0]
 8020a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8020a54:	4b1e      	ldr	r3, [pc, #120]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a56:	4a1f      	ldr	r2, [pc, #124]	; (8020ad4 <MX_TIM1_Init+0x9c>)
 8020a58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8020a5a:	4b1d      	ldr	r3, [pc, #116]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a5c:	2200      	movs	r2, #0
 8020a5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020a60:	4b1b      	ldr	r3, [pc, #108]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a62:	2200      	movs	r2, #0
 8020a64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8020a66:	4b1a      	ldr	r3, [pc, #104]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020a6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020a6e:	4b18      	ldr	r3, [pc, #96]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a70:	2200      	movs	r2, #0
 8020a72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8020a74:	4b16      	ldr	r3, [pc, #88]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a76:	2200      	movs	r2, #0
 8020a78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020a7a:	4b15      	ldr	r3, [pc, #84]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a7c:	2200      	movs	r2, #0
 8020a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8020a80:	4813      	ldr	r0, [pc, #76]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a82:	f008 f9fd 	bl	8028e80 <HAL_TIM_Base_Init>
 8020a86:	4603      	mov	r3, r0
 8020a88:	2b00      	cmp	r3, #0
 8020a8a:	d001      	beq.n	8020a90 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8020a8c:	f000 fa10 	bl	8020eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8020a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020a94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8020a96:	f107 0308 	add.w	r3, r7, #8
 8020a9a:	4619      	mov	r1, r3
 8020a9c:	480c      	ldr	r0, [pc, #48]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a9e:	f008 fbb7 	bl	8029210 <HAL_TIM_ConfigClockSource>
 8020aa2:	4603      	mov	r3, r0
 8020aa4:	2b00      	cmp	r3, #0
 8020aa6:	d001      	beq.n	8020aac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8020aa8:	f000 fa02 	bl	8020eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020aac:	2300      	movs	r3, #0
 8020aae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020ab0:	2300      	movs	r3, #0
 8020ab2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8020ab4:	463b      	mov	r3, r7
 8020ab6:	4619      	mov	r1, r3
 8020ab8:	4805      	ldr	r0, [pc, #20]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020aba:	f008 fdd3 	bl	8029664 <HAL_TIMEx_MasterConfigSynchronization>
 8020abe:	4603      	mov	r3, r0
 8020ac0:	2b00      	cmp	r3, #0
 8020ac2:	d001      	beq.n	8020ac8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8020ac4:	f000 f9f4 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8020ac8:	bf00      	nop
 8020aca:	3718      	adds	r7, #24
 8020acc:	46bd      	mov	sp, r7
 8020ace:	bd80      	pop	{r7, pc}
 8020ad0:	2000029c 	.word	0x2000029c
 8020ad4:	40010000 	.word	0x40010000

08020ad8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8020ad8:	b580      	push	{r7, lr}
 8020ada:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8020adc:	4b11      	ldr	r3, [pc, #68]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020ade:	4a12      	ldr	r2, [pc, #72]	; (8020b28 <MX_UART5_Init+0x50>)
 8020ae0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8020ae2:	4b10      	ldr	r3, [pc, #64]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020ae4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8020ae8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8020aea:	4b0e      	ldr	r3, [pc, #56]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020aec:	2200      	movs	r2, #0
 8020aee:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8020af0:	4b0c      	ldr	r3, [pc, #48]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020af2:	2200      	movs	r2, #0
 8020af4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8020af6:	4b0b      	ldr	r3, [pc, #44]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020af8:	2200      	movs	r2, #0
 8020afa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8020afc:	4b09      	ldr	r3, [pc, #36]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020afe:	220c      	movs	r2, #12
 8020b00:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020b02:	4b08      	ldr	r3, [pc, #32]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020b04:	2200      	movs	r2, #0
 8020b06:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8020b08:	4b06      	ldr	r3, [pc, #24]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020b0a:	2200      	movs	r2, #0
 8020b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8020b0e:	4805      	ldr	r0, [pc, #20]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020b10:	f008 fe38 	bl	8029784 <HAL_UART_Init>
 8020b14:	4603      	mov	r3, r0
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	d001      	beq.n	8020b1e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8020b1a:	f000 f9c9 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8020b1e:	bf00      	nop
 8020b20:	bd80      	pop	{r7, pc}
 8020b22:	bf00      	nop
 8020b24:	200002e4 	.word	0x200002e4
 8020b28:	40005000 	.word	0x40005000

08020b2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8020b2c:	b580      	push	{r7, lr}
 8020b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8020b30:	4b11      	ldr	r3, [pc, #68]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b32:	4a12      	ldr	r2, [pc, #72]	; (8020b7c <MX_USART1_UART_Init+0x50>)
 8020b34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8020b36:	4b10      	ldr	r3, [pc, #64]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020b3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020b3e:	4b0e      	ldr	r3, [pc, #56]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b40:	2200      	movs	r2, #0
 8020b42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8020b44:	4b0c      	ldr	r3, [pc, #48]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b46:	2200      	movs	r2, #0
 8020b48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8020b4a:	4b0b      	ldr	r3, [pc, #44]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b4c:	2200      	movs	r2, #0
 8020b4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8020b50:	4b09      	ldr	r3, [pc, #36]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b52:	220c      	movs	r2, #12
 8020b54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020b56:	4b08      	ldr	r3, [pc, #32]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b58:	2200      	movs	r2, #0
 8020b5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8020b5c:	4b06      	ldr	r3, [pc, #24]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b5e:	2200      	movs	r2, #0
 8020b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8020b62:	4805      	ldr	r0, [pc, #20]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b64:	f008 fe0e 	bl	8029784 <HAL_UART_Init>
 8020b68:	4603      	mov	r3, r0
 8020b6a:	2b00      	cmp	r3, #0
 8020b6c:	d001      	beq.n	8020b72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8020b6e:	f000 f99f 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8020b72:	bf00      	nop
 8020b74:	bd80      	pop	{r7, pc}
 8020b76:	bf00      	nop
 8020b78:	20000328 	.word	0x20000328
 8020b7c:	40011000 	.word	0x40011000

08020b80 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8020b80:	b580      	push	{r7, lr}
 8020b82:	b088      	sub	sp, #32
 8020b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8020b86:	1d3b      	adds	r3, r7, #4
 8020b88:	2200      	movs	r2, #0
 8020b8a:	601a      	str	r2, [r3, #0]
 8020b8c:	605a      	str	r2, [r3, #4]
 8020b8e:	609a      	str	r2, [r3, #8]
 8020b90:	60da      	str	r2, [r3, #12]
 8020b92:	611a      	str	r2, [r3, #16]
 8020b94:	615a      	str	r2, [r3, #20]
 8020b96:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8020b98:	4b1f      	ldr	r3, [pc, #124]	; (8020c18 <MX_FMC_Init+0x98>)
 8020b9a:	4a20      	ldr	r2, [pc, #128]	; (8020c1c <MX_FMC_Init+0x9c>)
 8020b9c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8020b9e:	4b1e      	ldr	r3, [pc, #120]	; (8020c18 <MX_FMC_Init+0x98>)
 8020ba0:	2201      	movs	r2, #1
 8020ba2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8020ba4:	4b1c      	ldr	r3, [pc, #112]	; (8020c18 <MX_FMC_Init+0x98>)
 8020ba6:	2200      	movs	r2, #0
 8020ba8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8020baa:	4b1b      	ldr	r3, [pc, #108]	; (8020c18 <MX_FMC_Init+0x98>)
 8020bac:	2204      	movs	r2, #4
 8020bae:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8020bb0:	4b19      	ldr	r3, [pc, #100]	; (8020c18 <MX_FMC_Init+0x98>)
 8020bb2:	2210      	movs	r2, #16
 8020bb4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8020bb6:	4b18      	ldr	r3, [pc, #96]	; (8020c18 <MX_FMC_Init+0x98>)
 8020bb8:	2240      	movs	r2, #64	; 0x40
 8020bba:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8020bbc:	4b16      	ldr	r3, [pc, #88]	; (8020c18 <MX_FMC_Init+0x98>)
 8020bbe:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8020bc2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8020bc4:	4b14      	ldr	r3, [pc, #80]	; (8020c18 <MX_FMC_Init+0x98>)
 8020bc6:	2200      	movs	r2, #0
 8020bc8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8020bca:	4b13      	ldr	r3, [pc, #76]	; (8020c18 <MX_FMC_Init+0x98>)
 8020bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020bd0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8020bd2:	4b11      	ldr	r3, [pc, #68]	; (8020c18 <MX_FMC_Init+0x98>)
 8020bd4:	2200      	movs	r2, #0
 8020bd6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8020bd8:	4b0f      	ldr	r3, [pc, #60]	; (8020c18 <MX_FMC_Init+0x98>)
 8020bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8020bde:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8020be0:	2302      	movs	r3, #2
 8020be2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8020be4:	2307      	movs	r3, #7
 8020be6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8020be8:	2304      	movs	r3, #4
 8020bea:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8020bec:	2307      	movs	r3, #7
 8020bee:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8020bf0:	2303      	movs	r3, #3
 8020bf2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8020bf4:	2302      	movs	r3, #2
 8020bf6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8020bf8:	2302      	movs	r3, #2
 8020bfa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8020bfc:	1d3b      	adds	r3, r7, #4
 8020bfe:	4619      	mov	r1, r3
 8020c00:	4805      	ldr	r0, [pc, #20]	; (8020c18 <MX_FMC_Init+0x98>)
 8020c02:	f007 facd 	bl	80281a0 <HAL_SDRAM_Init>
 8020c06:	4603      	mov	r3, r0
 8020c08:	2b00      	cmp	r3, #0
 8020c0a:	d001      	beq.n	8020c10 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8020c0c:	f000 f950 	bl	8020eb0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8020c10:	bf00      	nop
 8020c12:	3720      	adds	r7, #32
 8020c14:	46bd      	mov	sp, r7
 8020c16:	bd80      	pop	{r7, pc}
 8020c18:	2000036c 	.word	0x2000036c
 8020c1c:	a0000140 	.word	0xa0000140

08020c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020c20:	b580      	push	{r7, lr}
 8020c22:	b08e      	sub	sp, #56	; 0x38
 8020c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020c2a:	2200      	movs	r2, #0
 8020c2c:	601a      	str	r2, [r3, #0]
 8020c2e:	605a      	str	r2, [r3, #4]
 8020c30:	609a      	str	r2, [r3, #8]
 8020c32:	60da      	str	r2, [r3, #12]
 8020c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020c36:	2300      	movs	r3, #0
 8020c38:	623b      	str	r3, [r7, #32]
 8020c3a:	4b85      	ldr	r3, [pc, #532]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c3e:	4a84      	ldr	r2, [pc, #528]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c40:	f043 0304 	orr.w	r3, r3, #4
 8020c44:	6313      	str	r3, [r2, #48]	; 0x30
 8020c46:	4b82      	ldr	r3, [pc, #520]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c4a:	f003 0304 	and.w	r3, r3, #4
 8020c4e:	623b      	str	r3, [r7, #32]
 8020c50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8020c52:	2300      	movs	r3, #0
 8020c54:	61fb      	str	r3, [r7, #28]
 8020c56:	4b7e      	ldr	r3, [pc, #504]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c5a:	4a7d      	ldr	r2, [pc, #500]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c5c:	f043 0320 	orr.w	r3, r3, #32
 8020c60:	6313      	str	r3, [r2, #48]	; 0x30
 8020c62:	4b7b      	ldr	r3, [pc, #492]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c66:	f003 0320 	and.w	r3, r3, #32
 8020c6a:	61fb      	str	r3, [r7, #28]
 8020c6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020c6e:	2300      	movs	r3, #0
 8020c70:	61bb      	str	r3, [r7, #24]
 8020c72:	4b77      	ldr	r3, [pc, #476]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c76:	4a76      	ldr	r2, [pc, #472]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8020c7e:	4b74      	ldr	r3, [pc, #464]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020c86:	61bb      	str	r3, [r7, #24]
 8020c88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020c8a:	2300      	movs	r3, #0
 8020c8c:	617b      	str	r3, [r7, #20]
 8020c8e:	4b70      	ldr	r3, [pc, #448]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c92:	4a6f      	ldr	r2, [pc, #444]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c94:	f043 0301 	orr.w	r3, r3, #1
 8020c98:	6313      	str	r3, [r2, #48]	; 0x30
 8020c9a:	4b6d      	ldr	r3, [pc, #436]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c9e:	f003 0301 	and.w	r3, r3, #1
 8020ca2:	617b      	str	r3, [r7, #20]
 8020ca4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020ca6:	2300      	movs	r3, #0
 8020ca8:	613b      	str	r3, [r7, #16]
 8020caa:	4b69      	ldr	r3, [pc, #420]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cae:	4a68      	ldr	r2, [pc, #416]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020cb0:	f043 0302 	orr.w	r3, r3, #2
 8020cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8020cb6:	4b66      	ldr	r3, [pc, #408]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cba:	f003 0302 	and.w	r3, r3, #2
 8020cbe:	613b      	str	r3, [r7, #16]
 8020cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8020cc2:	2300      	movs	r3, #0
 8020cc4:	60fb      	str	r3, [r7, #12]
 8020cc6:	4b62      	ldr	r3, [pc, #392]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cca:	4a61      	ldr	r2, [pc, #388]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8020cd2:	4b5f      	ldr	r3, [pc, #380]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020cda:	60fb      	str	r3, [r7, #12]
 8020cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8020cde:	2300      	movs	r3, #0
 8020ce0:	60bb      	str	r3, [r7, #8]
 8020ce2:	4b5b      	ldr	r3, [pc, #364]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ce6:	4a5a      	ldr	r2, [pc, #360]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020ce8:	f043 0310 	orr.w	r3, r3, #16
 8020cec:	6313      	str	r3, [r2, #48]	; 0x30
 8020cee:	4b58      	ldr	r3, [pc, #352]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cf2:	f003 0310 	and.w	r3, r3, #16
 8020cf6:	60bb      	str	r3, [r7, #8]
 8020cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020cfa:	2300      	movs	r3, #0
 8020cfc:	607b      	str	r3, [r7, #4]
 8020cfe:	4b54      	ldr	r3, [pc, #336]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d02:	4a53      	ldr	r2, [pc, #332]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020d04:	f043 0308 	orr.w	r3, r3, #8
 8020d08:	6313      	str	r3, [r2, #48]	; 0x30
 8020d0a:	4b51      	ldr	r3, [pc, #324]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d0e:	f003 0308 	and.w	r3, r3, #8
 8020d12:	607b      	str	r3, [r7, #4]
 8020d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8020d16:	2200      	movs	r2, #0
 8020d18:	2116      	movs	r1, #22
 8020d1a:	484e      	ldr	r0, [pc, #312]	; (8020e54 <MX_GPIO_Init+0x234>)
 8020d1c:	f004 f9aa 	bl	8025074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8020d20:	2200      	movs	r2, #0
 8020d22:	2180      	movs	r1, #128	; 0x80
 8020d24:	484c      	ldr	r0, [pc, #304]	; (8020e58 <MX_GPIO_Init+0x238>)
 8020d26:	f004 f9a5 	bl	8025074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8020d2a:	2200      	movs	r2, #0
 8020d2c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8020d30:	484a      	ldr	r0, [pc, #296]	; (8020e5c <MX_GPIO_Init+0x23c>)
 8020d32:	f004 f99f 	bl	8025074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8020d36:	2200      	movs	r2, #0
 8020d38:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8020d3c:	4848      	ldr	r0, [pc, #288]	; (8020e60 <MX_GPIO_Init+0x240>)
 8020d3e:	f004 f999 	bl	8025074 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8020d42:	2316      	movs	r3, #22
 8020d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d46:	2301      	movs	r3, #1
 8020d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d4a:	2300      	movs	r3, #0
 8020d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d4e:	2300      	movs	r3, #0
 8020d50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d56:	4619      	mov	r1, r3
 8020d58:	483e      	ldr	r0, [pc, #248]	; (8020e54 <MX_GPIO_Init+0x234>)
 8020d5a:	f003 fed3 	bl	8024b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8020d5e:	2301      	movs	r3, #1
 8020d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8020d62:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8020d66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d68:	2300      	movs	r3, #0
 8020d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8020d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d70:	4619      	mov	r1, r3
 8020d72:	4839      	ldr	r0, [pc, #228]	; (8020e58 <MX_GPIO_Init+0x238>)
 8020d74:	f003 fec6 	bl	8024b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8020d78:	f248 0306 	movw	r3, #32774	; 0x8006
 8020d7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020d7e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d84:	2300      	movs	r3, #0
 8020d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d8c:	4619      	mov	r1, r3
 8020d8e:	4832      	ldr	r0, [pc, #200]	; (8020e58 <MX_GPIO_Init+0x238>)
 8020d90:	f003 feb8 	bl	8024b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8020d94:	2380      	movs	r3, #128	; 0x80
 8020d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d98:	2301      	movs	r3, #1
 8020d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d9c:	2300      	movs	r3, #0
 8020d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020da0:	2300      	movs	r3, #0
 8020da2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8020da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020da8:	4619      	mov	r1, r3
 8020daa:	482b      	ldr	r0, [pc, #172]	; (8020e58 <MX_GPIO_Init+0x238>)
 8020dac:	f003 feaa 	bl	8024b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8020db0:	2320      	movs	r3, #32
 8020db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020db4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dba:	2300      	movs	r3, #0
 8020dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8020dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dc2:	4619      	mov	r1, r3
 8020dc4:	4823      	ldr	r0, [pc, #140]	; (8020e54 <MX_GPIO_Init+0x234>)
 8020dc6:	f003 fe9d 	bl	8024b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8020dca:	2304      	movs	r3, #4
 8020dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020dce:	2300      	movs	r3, #0
 8020dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dd2:	2300      	movs	r3, #0
 8020dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8020dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dda:	4619      	mov	r1, r3
 8020ddc:	4821      	ldr	r0, [pc, #132]	; (8020e64 <MX_GPIO_Init+0x244>)
 8020dde:	f003 fe91 	bl	8024b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8020de2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020de8:	2300      	movs	r3, #0
 8020dea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dec:	2300      	movs	r3, #0
 8020dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8020df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020df4:	4619      	mov	r1, r3
 8020df6:	4819      	ldr	r0, [pc, #100]	; (8020e5c <MX_GPIO_Init+0x23c>)
 8020df8:	f003 fe84 	bl	8024b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8020dfc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8020e00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e02:	2301      	movs	r3, #1
 8020e04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e06:	2300      	movs	r3, #0
 8020e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e0a:	2300      	movs	r3, #0
 8020e0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e12:	4619      	mov	r1, r3
 8020e14:	4811      	ldr	r0, [pc, #68]	; (8020e5c <MX_GPIO_Init+0x23c>)
 8020e16:	f003 fe75 	bl	8024b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8020e1a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8020e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e20:	2301      	movs	r3, #1
 8020e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e24:	2300      	movs	r3, #0
 8020e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e28:	2300      	movs	r3, #0
 8020e2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e30:	4619      	mov	r1, r3
 8020e32:	480b      	ldr	r0, [pc, #44]	; (8020e60 <MX_GPIO_Init+0x240>)
 8020e34:	f003 fe66 	bl	8024b04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8020e38:	2200      	movs	r2, #0
 8020e3a:	2100      	movs	r1, #0
 8020e3c:	2006      	movs	r0, #6
 8020e3e:	f002 fd24 	bl	802388a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8020e42:	2006      	movs	r0, #6
 8020e44:	f002 fd3d 	bl	80238c2 <HAL_NVIC_EnableIRQ>

}
 8020e48:	bf00      	nop
 8020e4a:	3738      	adds	r7, #56	; 0x38
 8020e4c:	46bd      	mov	sp, r7
 8020e4e:	bd80      	pop	{r7, pc}
 8020e50:	40023800 	.word	0x40023800
 8020e54:	40020800 	.word	0x40020800
 8020e58:	40020000 	.word	0x40020000
 8020e5c:	40020c00 	.word	0x40020c00
 8020e60:	40021800 	.word	0x40021800
 8020e64:	40020400 	.word	0x40020400

08020e68 <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8020e68:	b580      	push	{r7, lr}
 8020e6a:	b082      	sub	sp, #8
 8020e6c:	af00      	add	r7, sp, #0
 8020e6e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8020e70:	1d39      	adds	r1, r7, #4
 8020e72:	f04f 33ff 	mov.w	r3, #4294967295
 8020e76:	2201      	movs	r2, #1
 8020e78:	4803      	ldr	r0, [pc, #12]	; (8020e88 <__io_putchar+0x20>)
 8020e7a:	f008 fcd0 	bl	802981e <HAL_UART_Transmit>
	return ch;
 8020e7e:	687b      	ldr	r3, [r7, #4]
}
 8020e80:	4618      	mov	r0, r3
 8020e82:	3708      	adds	r7, #8
 8020e84:	46bd      	mov	sp, r7
 8020e86:	bd80      	pop	{r7, pc}
 8020e88:	20000328 	.word	0x20000328

08020e8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020e8c:	b580      	push	{r7, lr}
 8020e8e:	b082      	sub	sp, #8
 8020e90:	af00      	add	r7, sp, #0
 8020e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8020e94:	687b      	ldr	r3, [r7, #4]
 8020e96:	681b      	ldr	r3, [r3, #0]
 8020e98:	4a04      	ldr	r2, [pc, #16]	; (8020eac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8020e9a:	4293      	cmp	r3, r2
 8020e9c:	d101      	bne.n	8020ea2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8020e9e:	f002 fbe1 	bl	8023664 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8020ea2:	bf00      	nop
 8020ea4:	3708      	adds	r7, #8
 8020ea6:	46bd      	mov	sp, r7
 8020ea8:	bd80      	pop	{r7, pc}
 8020eaa:	bf00      	nop
 8020eac:	40001000 	.word	0x40001000

08020eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020eb0:	b480      	push	{r7}
 8020eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020eb4:	b672      	cpsid	i
}
 8020eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020eb8:	e7fe      	b.n	8020eb8 <Error_Handler+0x8>
	...

08020ebc <serial_app>:
void go_to_DFU();
static void ota_req_send(UART_HandleTypeDef *huart, uint8_t cmd);
uint32_t ser_calcCRC(uint8_t * pData, uint32_t DataLength);


void serial_app(){
 8020ebc:	b580      	push	{r7, lr}
 8020ebe:	b082      	sub	sp, #8
 8020ec0:	af00      	add	r7, sp, #0
	do{
		// no Byte received or chunk reception in progress
		if( (hchunk.chunk_ready == CUN_EMPTY) ||
 8020ec2:	4b3e      	ldr	r3, [pc, #248]	; (8020fbc <serial_app+0x100>)
 8020ec4:	785b      	ldrb	r3, [r3, #1]
 8020ec6:	2b00      	cmp	r3, #0
 8020ec8:	d073      	beq.n	8020fb2 <serial_app+0xf6>
			(hchunk.chunk_ready == CUN_BUSY)){
 8020eca:	4b3c      	ldr	r3, [pc, #240]	; (8020fbc <serial_app+0x100>)
 8020ecc:	785b      	ldrb	r3, [r3, #1]
		if( (hchunk.chunk_ready == CUN_EMPTY) ||
 8020ece:	2b02      	cmp	r3, #2
 8020ed0:	d06f      	beq.n	8020fb2 <serial_app+0xf6>
			break;
		}

		SER_EX_ ret = SER_EX_OK;
 8020ed2:	2300      	movs	r3, #0
 8020ed4:	71fb      	strb	r3, [r7, #7]

		// An Error occur in during receive chunk
		if(hchunk.chunk_ready == CUN_ERROR)
 8020ed6:	4b39      	ldr	r3, [pc, #228]	; (8020fbc <serial_app+0x100>)
 8020ed8:	785b      	ldrb	r3, [r3, #1]
 8020eda:	2b03      	cmp	r3, #3
 8020edc:	d105      	bne.n	8020eea <serial_app+0x2e>
		{
			printf("Receive Chunk Error\r\n");
 8020ede:	4838      	ldr	r0, [pc, #224]	; (8020fc0 <serial_app+0x104>)
 8020ee0:	f00d fa6c 	bl	802e3bc <puts>
			ret = SER_EX_ERROR;
 8020ee4:	2301      	movs	r3, #1
 8020ee6:	71fb      	strb	r3, [r7, #7]
 8020ee8:	e00a      	b.n	8020f00 <serial_app+0x44>
		}
		else
		{
			printf("Chunk Received!!!\r\n");
 8020eea:	4836      	ldr	r0, [pc, #216]	; (8020fc4 <serial_app+0x108>)
 8020eec:	f00d fa66 	bl	802e3bc <puts>
			ret = ser_proccess_data(Rx_Buffer, hchunk.data_len);
 8020ef0:	4b32      	ldr	r3, [pc, #200]	; (8020fbc <serial_app+0x100>)
 8020ef2:	889b      	ldrh	r3, [r3, #4]
 8020ef4:	4619      	mov	r1, r3
 8020ef6:	4834      	ldr	r0, [pc, #208]	; (8020fc8 <serial_app+0x10c>)
 8020ef8:	f000 f9a6 	bl	8021248 <ser_proccess_data>
 8020efc:	4603      	mov	r3, r0
 8020efe:	71fb      	strb	r3, [r7, #7]
		}

		// Send ACK or NACK
		if( ret != SER_EX_OK){
 8020f00:	79fb      	ldrb	r3, [r7, #7]
 8020f02:	2b00      	cmp	r3, #0
 8020f04:	d00a      	beq.n	8020f1c <serial_app+0x60>
			ser_state = SER_STATE_START;
 8020f06:	4b31      	ldr	r3, [pc, #196]	; (8020fcc <serial_app+0x110>)
 8020f08:	2200      	movs	r2, #0
 8020f0a:	701a      	strb	r2, [r3, #0]
			printf("Sending NACK\r\n");
 8020f0c:	4830      	ldr	r0, [pc, #192]	; (8020fd0 <serial_app+0x114>)
 8020f0e:	f00d fa55 	bl	802e3bc <puts>
			ser_send_resp(&huart5, SER_NACK);
 8020f12:	2101      	movs	r1, #1
 8020f14:	482f      	ldr	r0, [pc, #188]	; (8020fd4 <serial_app+0x118>)
 8020f16:	f000 fac5 	bl	80214a4 <ser_send_resp>
 8020f1a:	e047      	b.n	8020fac <serial_app+0xf0>
		}
		else
		{
			ser_send_resp(&huart5, SER_ACK);
 8020f1c:	2100      	movs	r1, #0
 8020f1e:	482d      	ldr	r0, [pc, #180]	; (8020fd4 <serial_app+0x118>)
 8020f20:	f000 fac0 	bl	80214a4 <ser_send_resp>

			/* check ota request */
			if (ser_state == SER_STATE_START){
 8020f24:	4b29      	ldr	r3, [pc, #164]	; (8020fcc <serial_app+0x110>)
 8020f26:	781b      	ldrb	r3, [r3, #0]
 8020f28:	2b00      	cmp	r3, #0
 8020f2a:	d13f      	bne.n	8020fac <serial_app+0xf0>
				if(data_info.data_type == OTA_INFO_DATA)
 8020f2c:	4b2a      	ldr	r3, [pc, #168]	; (8020fd8 <serial_app+0x11c>)
 8020f2e:	781b      	ldrb	r3, [r3, #0]
 8020f30:	2b02      	cmp	r3, #2
 8020f32:	d13b      	bne.n	8020fac <serial_app+0xf0>
				{
					ota_data.ota_valid = 1u;
 8020f34:	4b29      	ldr	r3, [pc, #164]	; (8020fdc <serial_app+0x120>)
 8020f36:	2201      	movs	r2, #1
 8020f38:	721a      	strb	r2, [r3, #8]
					do
					{
						// check update is needed or not
						if(ota_data.ota_major < v_major)
 8020f3a:	4b28      	ldr	r3, [pc, #160]	; (8020fdc <serial_app+0x120>)
 8020f3c:	885b      	ldrh	r3, [r3, #2]
 8020f3e:	b29b      	uxth	r3, r3
 8020f40:	2200      	movs	r2, #0
 8020f42:	4293      	cmp	r3, r2
 8020f44:	d32f      	bcc.n	8020fa6 <serial_app+0xea>
						{
							break;
						}

						if(v_major == ota_data.ota_major )
 8020f46:	4b25      	ldr	r3, [pc, #148]	; (8020fdc <serial_app+0x120>)
 8020f48:	885b      	ldrh	r3, [r3, #2]
 8020f4a:	b29b      	uxth	r3, r3
 8020f4c:	2200      	movs	r2, #0
 8020f4e:	4293      	cmp	r3, r2
 8020f50:	d104      	bne.n	8020f5c <serial_app+0xa0>
						{
							if(ota_data.ota_minor <= v_minor)
 8020f52:	4b22      	ldr	r3, [pc, #136]	; (8020fdc <serial_app+0x120>)
 8020f54:	685b      	ldr	r3, [r3, #4]
 8020f56:	2205      	movs	r2, #5
 8020f58:	4293      	cmp	r3, r2
 8020f5a:	d926      	bls.n	8020faa <serial_app+0xee>
								break;
							}
						}

						// go to DFU mode if firmware downloaded
						if(ota_data.ota_available & ota_data.ota_download & ota_data.ota_valid)
 8020f5c:	4b1f      	ldr	r3, [pc, #124]	; (8020fdc <serial_app+0x120>)
 8020f5e:	781a      	ldrb	r2, [r3, #0]
 8020f60:	4b1e      	ldr	r3, [pc, #120]	; (8020fdc <serial_app+0x120>)
 8020f62:	785b      	ldrb	r3, [r3, #1]
 8020f64:	4013      	ands	r3, r2
 8020f66:	b2da      	uxtb	r2, r3
 8020f68:	4b1c      	ldr	r3, [pc, #112]	; (8020fdc <serial_app+0x120>)
 8020f6a:	7a1b      	ldrb	r3, [r3, #8]
 8020f6c:	4013      	ands	r3, r2
 8020f6e:	b2db      	uxtb	r3, r3
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	d002      	beq.n	8020f7a <serial_app+0xbe>
						{
							go_to_DFU();
 8020f74:	f000 fac2 	bl	80214fc <go_to_DFU>
							break;
 8020f78:	e018      	b.n	8020fac <serial_app+0xf0>
						}

						printf("A NEW FIRMWARE FOUND!!! VERSION = [%d,%ld]\r\n", ota_data.ota_major,
 8020f7a:	4b18      	ldr	r3, [pc, #96]	; (8020fdc <serial_app+0x120>)
 8020f7c:	885b      	ldrh	r3, [r3, #2]
 8020f7e:	b29b      	uxth	r3, r3
 8020f80:	4619      	mov	r1, r3
 8020f82:	4b16      	ldr	r3, [pc, #88]	; (8020fdc <serial_app+0x120>)
 8020f84:	685b      	ldr	r3, [r3, #4]
 8020f86:	461a      	mov	r2, r3
 8020f88:	4815      	ldr	r0, [pc, #84]	; (8020fe0 <serial_app+0x124>)
 8020f8a:	f00d f991 	bl	802e2b0 <iprintf>
																																		 ota_data.ota_minor);

						// request to download firmware
						if( !(ota_data.ota_download) )
 8020f8e:	4b13      	ldr	r3, [pc, #76]	; (8020fdc <serial_app+0x120>)
 8020f90:	785b      	ldrb	r3, [r3, #1]
 8020f92:	2b00      	cmp	r3, #0
 8020f94:	d10a      	bne.n	8020fac <serial_app+0xf0>
						{
							printf("request for download!\r\n");
 8020f96:	4813      	ldr	r0, [pc, #76]	; (8020fe4 <serial_app+0x128>)
 8020f98:	f00d fa10 	bl	802e3bc <puts>
							ota_req_send(&huart5, SER_CMD_FW_DL);
 8020f9c:	2106      	movs	r1, #6
 8020f9e:	480d      	ldr	r0, [pc, #52]	; (8020fd4 <serial_app+0x118>)
 8020fa0:	f000 fb60 	bl	8021664 <ota_req_send>
							break;
 8020fa4:	e002      	b.n	8020fac <serial_app+0xf0>
							break;
 8020fa6:	bf00      	nop
 8020fa8:	e000      	b.n	8020fac <serial_app+0xf0>
								break;
 8020faa:	bf00      	nop
				}
			}
		}


		hchunk.chunk_ready = CUN_EMPTY;
 8020fac:	4b03      	ldr	r3, [pc, #12]	; (8020fbc <serial_app+0x100>)
 8020fae:	2200      	movs	r2, #0
 8020fb0:	705a      	strb	r2, [r3, #1]
	}while(false);
}
 8020fb2:	bf00      	nop
 8020fb4:	3708      	adds	r7, #8
 8020fb6:	46bd      	mov	sp, r7
 8020fb8:	bd80      	pop	{r7, pc}
 8020fba:	bf00      	nop
 8020fbc:	20000830 	.word	0x20000830
 8020fc0:	0802f528 	.word	0x0802f528
 8020fc4:	0802f540 	.word	0x0802f540
 8020fc8:	20000424 	.word	0x20000424
 8020fcc:	20000420 	.word	0x20000420
 8020fd0:	0802f554 	.word	0x0802f554
 8020fd4:	200002e4 	.word	0x200002e4
 8020fd8:	2000083c 	.word	0x2000083c
 8020fdc:	20000408 	.word	0x20000408
 8020fe0:	0802f564 	.word	0x0802f564
 8020fe4:	0802f594 	.word	0x0802f594

08020fe8 <ota_check>:

void ota_check(){
 8020fe8:	b580      	push	{r7, lr}
 8020fea:	af00      	add	r7, sp, #0
	ota_req_send(&huart5, SER_CMD_FW_STATUS);
 8020fec:	2104      	movs	r1, #4
 8020fee:	4802      	ldr	r0, [pc, #8]	; (8020ff8 <ota_check+0x10>)
 8020ff0:	f000 fb38 	bl	8021664 <ota_req_send>
}
 8020ff4:	bf00      	nop
 8020ff6:	bd80      	pop	{r7, pc}
 8020ff8:	200002e4 	.word	0x200002e4

08020ffc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8020ffc:	b580      	push	{r7, lr}
 8020ffe:	b082      	sub	sp, #8
 8021000:	af00      	add	r7, sp, #0
 8021002:	6078      	str	r0, [r7, #4]
	// check serial interruption
	if(huart==&huart5){
 8021004:	687b      	ldr	r3, [r7, #4]
 8021006:	4a0f      	ldr	r2, [pc, #60]	; (8021044 <HAL_UART_RxCpltCallback+0x48>)
 8021008:	4293      	cmp	r3, r2
 802100a:	d116      	bne.n	802103a <HAL_UART_RxCpltCallback+0x3e>
		if((hchunk.chunk_ready == CUN_EMPTY) || (hchunk.chunk_ready == CUN_BUSY))
 802100c:	4b0e      	ldr	r3, [pc, #56]	; (8021048 <HAL_UART_RxCpltCallback+0x4c>)
 802100e:	785b      	ldrb	r3, [r3, #1]
 8021010:	2b00      	cmp	r3, #0
 8021012:	d003      	beq.n	802101c <HAL_UART_RxCpltCallback+0x20>
 8021014:	4b0c      	ldr	r3, [pc, #48]	; (8021048 <HAL_UART_RxCpltCallback+0x4c>)
 8021016:	785b      	ldrb	r3, [r3, #1]
 8021018:	2b02      	cmp	r3, #2
 802101a:	d104      	bne.n	8021026 <HAL_UART_RxCpltCallback+0x2a>
		{
			ser_receive_chunk(Rx_Byte[0]);
 802101c:	4b0b      	ldr	r3, [pc, #44]	; (802104c <HAL_UART_RxCpltCallback+0x50>)
 802101e:	781b      	ldrb	r3, [r3, #0]
 8021020:	4618      	mov	r0, r3
 8021022:	f000 f815 	bl	8021050 <ser_receive_chunk>
		}
		memset(Rx_Byte, 0, sizeof(Rx_Byte));
 8021026:	2202      	movs	r2, #2
 8021028:	2100      	movs	r1, #0
 802102a:	4808      	ldr	r0, [pc, #32]	; (802104c <HAL_UART_RxCpltCallback+0x50>)
 802102c:	f00d f858 	bl	802e0e0 <memset>
		HAL_UART_Receive_IT(&huart5, Rx_Byte, 1);
 8021030:	2201      	movs	r2, #1
 8021032:	4906      	ldr	r1, [pc, #24]	; (802104c <HAL_UART_RxCpltCallback+0x50>)
 8021034:	4803      	ldr	r0, [pc, #12]	; (8021044 <HAL_UART_RxCpltCallback+0x48>)
 8021036:	f008 fc84 	bl	8029942 <HAL_UART_Receive_IT>
	}
}
 802103a:	bf00      	nop
 802103c:	3708      	adds	r7, #8
 802103e:	46bd      	mov	sp, r7
 8021040:	bd80      	pop	{r7, pc}
 8021042:	bf00      	nop
 8021044:	200002e4 	.word	0x200002e4
 8021048:	20000830 	.word	0x20000830
 802104c:	20000404 	.word	0x20000404

08021050 <ser_receive_chunk>:

static void ser_receive_chunk(uint8_t rx_byte)
{
 8021050:	b580      	push	{r7, lr}
 8021052:	b084      	sub	sp, #16
 8021054:	af00      	add	r7, sp, #0
 8021056:	4603      	mov	r3, r0
 8021058:	71fb      	strb	r3, [r7, #7]
	uint32_t	cal_data_crc = 0u;
 802105a:	2300      	movs	r3, #0
 802105c:	60fb      	str	r3, [r7, #12]

	switch(hchunk.chunk_state){
 802105e:	4b75      	ldr	r3, [pc, #468]	; (8021234 <ser_receive_chunk+0x1e4>)
 8021060:	781b      	ldrb	r3, [r3, #0]
 8021062:	2b05      	cmp	r3, #5
 8021064:	f200 80e1 	bhi.w	802122a <ser_receive_chunk+0x1da>
 8021068:	a201      	add	r2, pc, #4	; (adr r2, 8021070 <ser_receive_chunk+0x20>)
 802106a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802106e:	bf00      	nop
 8021070:	08021089 	.word	0x08021089
 8021074:	080210d5 	.word	0x080210d5
 8021078:	0802111b 	.word	0x0802111b
 802107c:	08021159 	.word	0x08021159
 8021080:	08021183 	.word	0x08021183
 8021084:	080211bf 	.word	0x080211bf

		// receive SOF byte (1byte)
		case CUN_STATE_SOF:
		{
			/* initial variable again */
			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8021088:	f240 4209 	movw	r2, #1033	; 0x409
 802108c:	2100      	movs	r1, #0
 802108e:	486a      	ldr	r0, [pc, #424]	; (8021238 <ser_receive_chunk+0x1e8>)
 8021090:	f00d f826 	bl	802e0e0 <memset>
			hchunk.index 		 = 0u;
 8021094:	4b67      	ldr	r3, [pc, #412]	; (8021234 <ser_receive_chunk+0x1e4>)
 8021096:	2200      	movs	r2, #0
 8021098:	805a      	strh	r2, [r3, #2]
			hchunk.data_len 	 = 0u;
 802109a:	4b66      	ldr	r3, [pc, #408]	; (8021234 <ser_receive_chunk+0x1e4>)
 802109c:	2200      	movs	r2, #0
 802109e:	809a      	strh	r2, [r3, #4]
			hchunk.rec_data_crc  = 0u;
 80210a0:	4b64      	ldr	r3, [pc, #400]	; (8021234 <ser_receive_chunk+0x1e4>)
 80210a2:	2200      	movs	r2, #0
 80210a4:	80da      	strh	r2, [r3, #6]
 80210a6:	2200      	movs	r2, #0
 80210a8:	811a      	strh	r2, [r3, #8]


			if(rx_byte == SER_SOF)
 80210aa:	79fb      	ldrb	r3, [r7, #7]
 80210ac:	2baa      	cmp	r3, #170	; 0xaa
 80210ae:	f040 80b5 	bne.w	802121c <ser_receive_chunk+0x1cc>
			{
				Rx_Buffer[hchunk.index++] = rx_byte;
 80210b2:	4b60      	ldr	r3, [pc, #384]	; (8021234 <ser_receive_chunk+0x1e4>)
 80210b4:	885b      	ldrh	r3, [r3, #2]
 80210b6:	1c5a      	adds	r2, r3, #1
 80210b8:	b291      	uxth	r1, r2
 80210ba:	4a5e      	ldr	r2, [pc, #376]	; (8021234 <ser_receive_chunk+0x1e4>)
 80210bc:	8051      	strh	r1, [r2, #2]
 80210be:	4619      	mov	r1, r3
 80210c0:	4a5d      	ldr	r2, [pc, #372]	; (8021238 <ser_receive_chunk+0x1e8>)
 80210c2:	79fb      	ldrb	r3, [r7, #7]
 80210c4:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_state = CUN_STATE_PKT_TYPE;
 80210c6:	4b5b      	ldr	r3, [pc, #364]	; (8021234 <ser_receive_chunk+0x1e4>)
 80210c8:	2201      	movs	r2, #1
 80210ca:	701a      	strb	r2, [r3, #0]
				hchunk.chunk_ready = CUN_BUSY;
 80210cc:	4b59      	ldr	r3, [pc, #356]	; (8021234 <ser_receive_chunk+0x1e4>)
 80210ce:	2202      	movs	r2, #2
 80210d0:	705a      	strb	r2, [r3, #1]
			}
		}
		break;
 80210d2:	e0a3      	b.n	802121c <ser_receive_chunk+0x1cc>

		// receive the packet type (1byte)
		case CUN_STATE_PKT_TYPE:
		{
			if( rx_byte == SER_SOF ){
 80210d4:	79fb      	ldrb	r3, [r7, #7]
 80210d6:	2baa      	cmp	r3, #170	; 0xaa
 80210d8:	d111      	bne.n	80210fe <ser_receive_chunk+0xae>
				/* initial variable again */
				memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80210da:	f240 4209 	movw	r2, #1033	; 0x409
 80210de:	2100      	movs	r1, #0
 80210e0:	4855      	ldr	r0, [pc, #340]	; (8021238 <ser_receive_chunk+0x1e8>)
 80210e2:	f00c fffd 	bl	802e0e0 <memset>
				hchunk.index 		 = 0u;
 80210e6:	4b53      	ldr	r3, [pc, #332]	; (8021234 <ser_receive_chunk+0x1e4>)
 80210e8:	2200      	movs	r2, #0
 80210ea:	805a      	strh	r2, [r3, #2]
				hchunk.data_len 	 = 0u;
 80210ec:	4b51      	ldr	r3, [pc, #324]	; (8021234 <ser_receive_chunk+0x1e4>)
 80210ee:	2200      	movs	r2, #0
 80210f0:	809a      	strh	r2, [r3, #4]
				hchunk.rec_data_crc  = 0u;
 80210f2:	4b50      	ldr	r3, [pc, #320]	; (8021234 <ser_receive_chunk+0x1e4>)
 80210f4:	2200      	movs	r2, #0
 80210f6:	80da      	strh	r2, [r3, #6]
 80210f8:	2200      	movs	r2, #0
 80210fa:	811a      	strh	r2, [r3, #8]
			{
				Rx_Buffer[hchunk.index++] = rx_byte;
				hchunk.chunk_state = CUN_STATE_LENGTH;
			}
		}
		break;
 80210fc:	e095      	b.n	802122a <ser_receive_chunk+0x1da>
				Rx_Buffer[hchunk.index++] = rx_byte;
 80210fe:	4b4d      	ldr	r3, [pc, #308]	; (8021234 <ser_receive_chunk+0x1e4>)
 8021100:	885b      	ldrh	r3, [r3, #2]
 8021102:	1c5a      	adds	r2, r3, #1
 8021104:	b291      	uxth	r1, r2
 8021106:	4a4b      	ldr	r2, [pc, #300]	; (8021234 <ser_receive_chunk+0x1e4>)
 8021108:	8051      	strh	r1, [r2, #2]
 802110a:	4619      	mov	r1, r3
 802110c:	4a4a      	ldr	r2, [pc, #296]	; (8021238 <ser_receive_chunk+0x1e8>)
 802110e:	79fb      	ldrb	r3, [r7, #7]
 8021110:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_state = CUN_STATE_LENGTH;
 8021112:	4b48      	ldr	r3, [pc, #288]	; (8021234 <ser_receive_chunk+0x1e4>)
 8021114:	2202      	movs	r2, #2
 8021116:	701a      	strb	r2, [r3, #0]
		break;
 8021118:	e087      	b.n	802122a <ser_receive_chunk+0x1da>

		// Get the data length
		case CUN_STATE_LENGTH:
		{
			Rx_Buffer[hchunk.index++] = rx_byte;
 802111a:	4b46      	ldr	r3, [pc, #280]	; (8021234 <ser_receive_chunk+0x1e4>)
 802111c:	885b      	ldrh	r3, [r3, #2]
 802111e:	1c5a      	adds	r2, r3, #1
 8021120:	b291      	uxth	r1, r2
 8021122:	4a44      	ldr	r2, [pc, #272]	; (8021234 <ser_receive_chunk+0x1e4>)
 8021124:	8051      	strh	r1, [r2, #2]
 8021126:	4619      	mov	r1, r3
 8021128:	4a43      	ldr	r2, [pc, #268]	; (8021238 <ser_receive_chunk+0x1e8>)
 802112a:	79fb      	ldrb	r3, [r7, #7]
 802112c:	5453      	strb	r3, [r2, r1]

			if( hchunk.index >=4 ){
 802112e:	4b41      	ldr	r3, [pc, #260]	; (8021234 <ser_receive_chunk+0x1e4>)
 8021130:	885b      	ldrh	r3, [r3, #2]
 8021132:	2b03      	cmp	r3, #3
 8021134:	d974      	bls.n	8021220 <ser_receive_chunk+0x1d0>
				hchunk.data_len = *(uint16_t *) &Rx_Buffer[2];
 8021136:	4b41      	ldr	r3, [pc, #260]	; (802123c <ser_receive_chunk+0x1ec>)
 8021138:	881a      	ldrh	r2, [r3, #0]
 802113a:	4b3e      	ldr	r3, [pc, #248]	; (8021234 <ser_receive_chunk+0x1e4>)
 802113c:	809a      	strh	r2, [r3, #4]
				if(hchunk.data_len <= MAX_SERIAL_DATA_LENGTH){
 802113e:	4b3d      	ldr	r3, [pc, #244]	; (8021234 <ser_receive_chunk+0x1e4>)
 8021140:	889b      	ldrh	r3, [r3, #4]
 8021142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021146:	d803      	bhi.n	8021150 <ser_receive_chunk+0x100>
					hchunk.chunk_state = CUN_STATE_DATA;
 8021148:	4b3a      	ldr	r3, [pc, #232]	; (8021234 <ser_receive_chunk+0x1e4>)
 802114a:	2203      	movs	r2, #3
 802114c:	701a      	strb	r2, [r3, #0]
				else {
					hchunk.chunk_state = CUN_STATE_SOF;
				}
			}
		}
		break;
 802114e:	e067      	b.n	8021220 <ser_receive_chunk+0x1d0>
					hchunk.chunk_state = CUN_STATE_SOF;
 8021150:	4b38      	ldr	r3, [pc, #224]	; (8021234 <ser_receive_chunk+0x1e4>)
 8021152:	2200      	movs	r2, #0
 8021154:	701a      	strb	r2, [r3, #0]
		break;
 8021156:	e063      	b.n	8021220 <ser_receive_chunk+0x1d0>

		// Receive data
		case CUN_STATE_DATA:
		{
			Rx_Buffer[hchunk.index++] = rx_byte;
 8021158:	4b36      	ldr	r3, [pc, #216]	; (8021234 <ser_receive_chunk+0x1e4>)
 802115a:	885b      	ldrh	r3, [r3, #2]
 802115c:	1c5a      	adds	r2, r3, #1
 802115e:	b291      	uxth	r1, r2
 8021160:	4a34      	ldr	r2, [pc, #208]	; (8021234 <ser_receive_chunk+0x1e4>)
 8021162:	8051      	strh	r1, [r2, #2]
 8021164:	4619      	mov	r1, r3
 8021166:	4a34      	ldr	r2, [pc, #208]	; (8021238 <ser_receive_chunk+0x1e8>)
 8021168:	79fb      	ldrb	r3, [r7, #7]
 802116a:	5453      	strb	r3, [r2, r1]
			if( hchunk.index >= 4+hchunk.data_len )
 802116c:	4b31      	ldr	r3, [pc, #196]	; (8021234 <ser_receive_chunk+0x1e4>)
 802116e:	889b      	ldrh	r3, [r3, #4]
 8021170:	3303      	adds	r3, #3
 8021172:	4a30      	ldr	r2, [pc, #192]	; (8021234 <ser_receive_chunk+0x1e4>)
 8021174:	8852      	ldrh	r2, [r2, #2]
 8021176:	4293      	cmp	r3, r2
 8021178:	da54      	bge.n	8021224 <ser_receive_chunk+0x1d4>
			{
				hchunk.chunk_state = CUN_STATE_CRC;
 802117a:	4b2e      	ldr	r3, [pc, #184]	; (8021234 <ser_receive_chunk+0x1e4>)
 802117c:	2204      	movs	r2, #4
 802117e:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8021180:	e050      	b.n	8021224 <ser_receive_chunk+0x1d4>

		// Get the CRC
		case CUN_STATE_CRC:
			Rx_Buffer[hchunk.index++] = rx_byte;
 8021182:	4b2c      	ldr	r3, [pc, #176]	; (8021234 <ser_receive_chunk+0x1e4>)
 8021184:	885b      	ldrh	r3, [r3, #2]
 8021186:	1c5a      	adds	r2, r3, #1
 8021188:	b291      	uxth	r1, r2
 802118a:	4a2a      	ldr	r2, [pc, #168]	; (8021234 <ser_receive_chunk+0x1e4>)
 802118c:	8051      	strh	r1, [r2, #2]
 802118e:	4619      	mov	r1, r3
 8021190:	4a29      	ldr	r2, [pc, #164]	; (8021238 <ser_receive_chunk+0x1e8>)
 8021192:	79fb      	ldrb	r3, [r7, #7]
 8021194:	5453      	strb	r3, [r2, r1]
			if( hchunk.index >= 8+hchunk.data_len)
 8021196:	4b27      	ldr	r3, [pc, #156]	; (8021234 <ser_receive_chunk+0x1e4>)
 8021198:	889b      	ldrh	r3, [r3, #4]
 802119a:	3307      	adds	r3, #7
 802119c:	4a25      	ldr	r2, [pc, #148]	; (8021234 <ser_receive_chunk+0x1e4>)
 802119e:	8852      	ldrh	r2, [r2, #2]
 80211a0:	4293      	cmp	r3, r2
 80211a2:	da41      	bge.n	8021228 <ser_receive_chunk+0x1d8>
			{
				hchunk.rec_data_crc = *(uint32_t *) &Rx_Buffer[4+hchunk.data_len];
 80211a4:	4b23      	ldr	r3, [pc, #140]	; (8021234 <ser_receive_chunk+0x1e4>)
 80211a6:	889b      	ldrh	r3, [r3, #4]
 80211a8:	3304      	adds	r3, #4
 80211aa:	4a23      	ldr	r2, [pc, #140]	; (8021238 <ser_receive_chunk+0x1e8>)
 80211ac:	4413      	add	r3, r2
 80211ae:	681b      	ldr	r3, [r3, #0]
 80211b0:	4a20      	ldr	r2, [pc, #128]	; (8021234 <ser_receive_chunk+0x1e4>)
 80211b2:	f8c2 3006 	str.w	r3, [r2, #6]
				hchunk.chunk_state = CUN_STATE_EOF;
 80211b6:	4b1f      	ldr	r3, [pc, #124]	; (8021234 <ser_receive_chunk+0x1e4>)
 80211b8:	2205      	movs	r2, #5
 80211ba:	701a      	strb	r2, [r3, #0]
			}
		break;
 80211bc:	e034      	b.n	8021228 <ser_receive_chunk+0x1d8>

		case CUN_STATE_EOF:
		{
			do
			{
				Rx_Buffer[hchunk.index] = rx_byte;
 80211be:	4b1d      	ldr	r3, [pc, #116]	; (8021234 <ser_receive_chunk+0x1e4>)
 80211c0:	885b      	ldrh	r3, [r3, #2]
 80211c2:	4619      	mov	r1, r3
 80211c4:	4a1c      	ldr	r2, [pc, #112]	; (8021238 <ser_receive_chunk+0x1e8>)
 80211c6:	79fb      	ldrb	r3, [r7, #7]
 80211c8:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_ready = CUN_ERROR;
 80211ca:	4b1a      	ldr	r3, [pc, #104]	; (8021234 <ser_receive_chunk+0x1e4>)
 80211cc:	2203      	movs	r2, #3
 80211ce:	705a      	strb	r2, [r3, #1]
				hchunk.chunk_state = CUN_STATE_SOF;
 80211d0:	4b18      	ldr	r3, [pc, #96]	; (8021234 <ser_receive_chunk+0x1e4>)
 80211d2:	2200      	movs	r2, #0
 80211d4:	701a      	strb	r2, [r3, #0]

				if(Rx_Buffer[hchunk.index] != SER_EOF)
 80211d6:	4b17      	ldr	r3, [pc, #92]	; (8021234 <ser_receive_chunk+0x1e4>)
 80211d8:	885b      	ldrh	r3, [r3, #2]
 80211da:	461a      	mov	r2, r3
 80211dc:	4b16      	ldr	r3, [pc, #88]	; (8021238 <ser_receive_chunk+0x1e8>)
 80211de:	5c9b      	ldrb	r3, [r3, r2]
 80211e0:	2bbb      	cmp	r3, #187	; 0xbb
 80211e2:	d119      	bne.n	8021218 <ser_receive_chunk+0x1c8>
				{
					break;
				}

				cal_data_crc = ser_calcCRC(&Rx_Buffer[4], hchunk.data_len);
 80211e4:	4b13      	ldr	r3, [pc, #76]	; (8021234 <ser_receive_chunk+0x1e4>)
 80211e6:	889b      	ldrh	r3, [r3, #4]
 80211e8:	4619      	mov	r1, r3
 80211ea:	4815      	ldr	r0, [pc, #84]	; (8021240 <ser_receive_chunk+0x1f0>)
 80211ec:	f000 fa64 	bl	80216b8 <ser_calcCRC>
 80211f0:	60f8      	str	r0, [r7, #12]
				if(cal_data_crc != hchunk.rec_data_crc)
 80211f2:	4b10      	ldr	r3, [pc, #64]	; (8021234 <ser_receive_chunk+0x1e4>)
 80211f4:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80211f8:	68fa      	ldr	r2, [r7, #12]
 80211fa:	429a      	cmp	r2, r3
 80211fc:	d008      	beq.n	8021210 <ser_receive_chunk+0x1c0>
				{
					printf("CHUNK CRC MISMATCH!!! [Calc CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 80211fe:	4b0d      	ldr	r3, [pc, #52]	; (8021234 <ser_receive_chunk+0x1e4>)
 8021200:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8021204:	461a      	mov	r2, r3
 8021206:	68f9      	ldr	r1, [r7, #12]
 8021208:	480e      	ldr	r0, [pc, #56]	; (8021244 <ser_receive_chunk+0x1f4>)
 802120a:	f00d f851 	bl	802e2b0 <iprintf>
												                   cal_data_crc,
																   hchunk.rec_data_crc );
					break;
 802120e:	e004      	b.n	802121a <ser_receive_chunk+0x1ca>
				}

				hchunk.chunk_ready = CUN_READY;
 8021210:	4b08      	ldr	r3, [pc, #32]	; (8021234 <ser_receive_chunk+0x1e4>)
 8021212:	2201      	movs	r2, #1
 8021214:	705a      	strb	r2, [r3, #1]

			}while(false);
		}
		break;
 8021216:	e008      	b.n	802122a <ser_receive_chunk+0x1da>
					break;
 8021218:	bf00      	nop
		break;
 802121a:	e006      	b.n	802122a <ser_receive_chunk+0x1da>
		break;
 802121c:	bf00      	nop
 802121e:	e004      	b.n	802122a <ser_receive_chunk+0x1da>
		break;
 8021220:	bf00      	nop
 8021222:	e002      	b.n	802122a <ser_receive_chunk+0x1da>
		break;
 8021224:	bf00      	nop
 8021226:	e000      	b.n	802122a <ser_receive_chunk+0x1da>
		break;
 8021228:	bf00      	nop
	}
}
 802122a:	bf00      	nop
 802122c:	3710      	adds	r7, #16
 802122e:	46bd      	mov	sp, r7
 8021230:	bd80      	pop	{r7, pc}
 8021232:	bf00      	nop
 8021234:	20000830 	.word	0x20000830
 8021238:	20000424 	.word	0x20000424
 802123c:	20000426 	.word	0x20000426
 8021240:	20000428 	.word	0x20000428
 8021244:	0802f5ac 	.word	0x0802f5ac

08021248 <ser_proccess_data>:


static SER_EX_ ser_proccess_data( uint8_t *buf, uint16_t len)
{
 8021248:	b5b0      	push	{r4, r5, r7, lr}
 802124a:	b08a      	sub	sp, #40	; 0x28
 802124c:	af00      	add	r7, sp, #0
 802124e:	6078      	str	r0, [r7, #4]
 8021250:	460b      	mov	r3, r1
 8021252:	807b      	strh	r3, [r7, #2]
	SER_EX_ ret = SER_EX_ERROR;
 8021254:	2301      	movs	r3, #1
 8021256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	do
	{
		if( (buf==NULL) || (len == 0u) )
 802125a:	687b      	ldr	r3, [r7, #4]
 802125c:	2b00      	cmp	r3, #0
 802125e:	f000 80fd 	beq.w	802145c <ser_proccess_data+0x214>
 8021262:	887b      	ldrh	r3, [r7, #2]
 8021264:	2b00      	cmp	r3, #0
 8021266:	f000 80f9 	beq.w	802145c <ser_proccess_data+0x214>
		{
			break;
		}

		// Check Serial Abort Command
		SER_COMMAND_ *cmd = (SER_COMMAND_ *)buf;
 802126a:	687b      	ldr	r3, [r7, #4]
 802126c:	623b      	str	r3, [r7, #32]
		if(cmd->packet_type == SER_PACKET_TYPE_CMD)
 802126e:	6a3b      	ldr	r3, [r7, #32]
 8021270:	785b      	ldrb	r3, [r3, #1]
 8021272:	2b00      	cmp	r3, #0
 8021274:	d107      	bne.n	8021286 <ser_proccess_data+0x3e>
		{
			if(cmd->cmd == SER_CMD_ABORT)
 8021276:	6a3b      	ldr	r3, [r7, #32]
 8021278:	791b      	ldrb	r3, [r3, #4]
 802127a:	2b02      	cmp	r3, #2
 802127c:	d103      	bne.n	8021286 <ser_proccess_data+0x3e>
			{
				// Receive Serial Abort Command. stop process;
				ser_state = SER_STATE_START;
 802127e:	4b7f      	ldr	r3, [pc, #508]	; (802147c <ser_proccess_data+0x234>)
 8021280:	2200      	movs	r2, #0
 8021282:	701a      	strb	r2, [r3, #0]
				break;
 8021284:	e0f3      	b.n	802146e <ser_proccess_data+0x226>
			}
		}

		switch(ser_state)
 8021286:	4b7d      	ldr	r3, [pc, #500]	; (802147c <ser_proccess_data+0x234>)
 8021288:	781b      	ldrb	r3, [r3, #0]
 802128a:	2b03      	cmp	r3, #3
 802128c:	f200 80e2 	bhi.w	8021454 <ser_proccess_data+0x20c>
 8021290:	a201      	add	r2, pc, #4	; (adr r2, 8021298 <ser_proccess_data+0x50>)
 8021292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021296:	bf00      	nop
 8021298:	080212a9 	.word	0x080212a9
 802129c:	0802130b 	.word	0x0802130b
 80212a0:	0802135f 	.word	0x0802135f
 80212a4:	080213f5 	.word	0x080213f5
		{

			case SER_STATE_START:
			{

				data_info.data_crc 	= 0u;
 80212a8:	4b75      	ldr	r3, [pc, #468]	; (8021480 <ser_proccess_data+0x238>)
 80212aa:	2200      	movs	r2, #0
 80212ac:	715a      	strb	r2, [r3, #5]
 80212ae:	2200      	movs	r2, #0
 80212b0:	719a      	strb	r2, [r3, #6]
 80212b2:	2200      	movs	r2, #0
 80212b4:	71da      	strb	r2, [r3, #7]
 80212b6:	2200      	movs	r2, #0
 80212b8:	721a      	strb	r2, [r3, #8]
				data_info.data_size	= 0u;
 80212ba:	4b71      	ldr	r3, [pc, #452]	; (8021480 <ser_proccess_data+0x238>)
 80212bc:	2200      	movs	r2, #0
 80212be:	705a      	strb	r2, [r3, #1]
 80212c0:	2200      	movs	r2, #0
 80212c2:	709a      	strb	r2, [r3, #2]
 80212c4:	2200      	movs	r2, #0
 80212c6:	70da      	strb	r2, [r3, #3]
 80212c8:	2200      	movs	r2, #0
 80212ca:	711a      	strb	r2, [r3, #4]
				data_info.data_type	= 0u;
 80212cc:	4b6c      	ldr	r3, [pc, #432]	; (8021480 <ser_proccess_data+0x238>)
 80212ce:	2200      	movs	r2, #0
 80212d0:	701a      	strb	r2, [r3, #0]
				data_received_size	= 0u;
 80212d2:	4b6c      	ldr	r3, [pc, #432]	; (8021484 <ser_proccess_data+0x23c>)
 80212d4:	2200      	movs	r2, #0
 80212d6:	801a      	strh	r2, [r3, #0]
				data_calc_crc				= 0u;
 80212d8:	4b6b      	ldr	r3, [pc, #428]	; (8021488 <ser_proccess_data+0x240>)
 80212da:	2200      	movs	r2, #0
 80212dc:	601a      	str	r2, [r3, #0]

				SER_COMMAND_ *cmd = (SER_COMMAND_ *)buf;
 80212de:	687b      	ldr	r3, [r7, #4]
 80212e0:	60fb      	str	r3, [r7, #12]
				if( cmd->packet_type == SER_PACKET_TYPE_CMD )
 80212e2:	68fb      	ldr	r3, [r7, #12]
 80212e4:	785b      	ldrb	r3, [r3, #1]
 80212e6:	2b00      	cmp	r3, #0
 80212e8:	f040 80ba 	bne.w	8021460 <ser_proccess_data+0x218>
				{
					if( cmd->cmd == SER_CMD_START )
 80212ec:	68fb      	ldr	r3, [r7, #12]
 80212ee:	791b      	ldrb	r3, [r3, #4]
 80212f0:	2b00      	cmp	r3, #0
 80212f2:	f040 80b5 	bne.w	8021460 <ser_proccess_data+0x218>
					{
						printf("Received Serial Start Command \r\n");
 80212f6:	4865      	ldr	r0, [pc, #404]	; (802148c <ser_proccess_data+0x244>)
 80212f8:	f00d f860 	bl	802e3bc <puts>
						ser_state = SER_STATE_HEADER;
 80212fc:	4b5f      	ldr	r3, [pc, #380]	; (802147c <ser_proccess_data+0x234>)
 80212fe:	2201      	movs	r2, #1
 8021300:	701a      	strb	r2, [r3, #0]
						ret = SER_EX_OK;
 8021302:	2300      	movs	r3, #0
 8021304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}
			}
			break;
 8021308:	e0aa      	b.n	8021460 <ser_proccess_data+0x218>


			case SER_STATE_HEADER:
			{
				SER_HEADER_ *header = (SER_HEADER_ *)buf;
 802130a:	687b      	ldr	r3, [r7, #4]
 802130c:	613b      	str	r3, [r7, #16]

				if( header->packet_type == SER_PACKET_TYPE_HEADER )
 802130e:	693b      	ldr	r3, [r7, #16]
 8021310:	785b      	ldrb	r3, [r3, #1]
 8021312:	2b02      	cmp	r3, #2
 8021314:	f040 80a6 	bne.w	8021464 <ser_proccess_data+0x21c>
				{
					data_info.data_type = header->meta_data.data_type;
 8021318:	693b      	ldr	r3, [r7, #16]
 802131a:	791a      	ldrb	r2, [r3, #4]
 802131c:	4b58      	ldr	r3, [pc, #352]	; (8021480 <ser_proccess_data+0x238>)
 802131e:	701a      	strb	r2, [r3, #0]
					data_info.data_size = header->meta_data.data_size;
 8021320:	693b      	ldr	r3, [r7, #16]
 8021322:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8021326:	4a56      	ldr	r2, [pc, #344]	; (8021480 <ser_proccess_data+0x238>)
 8021328:	f8c2 3001 	str.w	r3, [r2, #1]
					data_info.data_crc	 = header->meta_data.data_crc;
 802132c:	693b      	ldr	r3, [r7, #16]
 802132e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8021332:	4a53      	ldr	r2, [pc, #332]	; (8021480 <ser_proccess_data+0x238>)
 8021334:	f8c2 3005 	str.w	r3, [r2, #5]

					printf("Received Data Header. type=[%d], size=[%ld], crc=[0x%08lX]\r\n",
																									data_info.data_type,
 8021338:	4b51      	ldr	r3, [pc, #324]	; (8021480 <ser_proccess_data+0x238>)
 802133a:	781b      	ldrb	r3, [r3, #0]
					printf("Received Data Header. type=[%d], size=[%ld], crc=[0x%08lX]\r\n",
 802133c:	4619      	mov	r1, r3
 802133e:	4b50      	ldr	r3, [pc, #320]	; (8021480 <ser_proccess_data+0x238>)
 8021340:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8021344:	4b4e      	ldr	r3, [pc, #312]	; (8021480 <ser_proccess_data+0x238>)
 8021346:	f8d3 3005 	ldr.w	r3, [r3, #5]
 802134a:	4851      	ldr	r0, [pc, #324]	; (8021490 <ser_proccess_data+0x248>)
 802134c:	f00c ffb0 	bl	802e2b0 <iprintf>
																									data_info.data_size,
																									data_info.data_crc);
					ser_state = SER_STATE_DATA;
 8021350:	4b4a      	ldr	r3, [pc, #296]	; (802147c <ser_proccess_data+0x234>)
 8021352:	2202      	movs	r2, #2
 8021354:	701a      	strb	r2, [r3, #0]
					ret = SER_EX_OK;
 8021356:	2300      	movs	r3, #0
 8021358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
			}
			break;
 802135c:	e082      	b.n	8021464 <ser_proccess_data+0x21c>


			case SER_STATE_DATA:
			{
				SER_DATA_				*data			= (SER_DATA_ *)buf;
 802135e:	687b      	ldr	r3, [r7, #4]
 8021360:	61bb      	str	r3, [r7, #24]
				uint16_t				data_len	=	data->data_len;
 8021362:	69bb      	ldr	r3, [r7, #24]
 8021364:	789a      	ldrb	r2, [r3, #2]
 8021366:	78db      	ldrb	r3, [r3, #3]
 8021368:	021b      	lsls	r3, r3, #8
 802136a:	4313      	orrs	r3, r2
 802136c:	82fb      	strh	r3, [r7, #22]

				if( data->packet_type == SER_PACKET_TYPE_DATA )
 802136e:	69bb      	ldr	r3, [r7, #24]
 8021370:	785b      	ldrb	r3, [r3, #1]
 8021372:	2b01      	cmp	r3, #1
 8021374:	d178      	bne.n	8021468 <ser_proccess_data+0x220>
				{
					switch(data_info.data_type)
 8021376:	4b42      	ldr	r3, [pc, #264]	; (8021480 <ser_proccess_data+0x238>)
 8021378:	781b      	ldrb	r3, [r3, #0]
 802137a:	2b02      	cmp	r3, #2
 802137c:	d006      	beq.n	802138c <ser_proccess_data+0x144>
 802137e:	2b02      	cmp	r3, #2
 8021380:	dc25      	bgt.n	80213ce <ser_proccess_data+0x186>
 8021382:	2b00      	cmp	r3, #0
 8021384:	d027      	beq.n	80213d6 <ser_proccess_data+0x18e>
 8021386:	2b01      	cmp	r3, #1
 8021388:	d027      	beq.n	80213da <ser_proccess_data+0x192>
 802138a:	e020      	b.n	80213ce <ser_proccess_data+0x186>
						}
						break;

						case OTA_INFO_DATA:
						{
								ota_data = *(ota_info *)&buf[4];
 802138c:	4a41      	ldr	r2, [pc, #260]	; (8021494 <ser_proccess_data+0x24c>)
 802138e:	687b      	ldr	r3, [r7, #4]
 8021390:	3304      	adds	r3, #4
 8021392:	681d      	ldr	r5, [r3, #0]
 8021394:	685c      	ldr	r4, [r3, #4]
 8021396:	6898      	ldr	r0, [r3, #8]
 8021398:	68d9      	ldr	r1, [r3, #12]
 802139a:	6015      	str	r5, [r2, #0]
 802139c:	6054      	str	r4, [r2, #4]
 802139e:	6090      	str	r0, [r2, #8]
 80213a0:	60d1      	str	r1, [r2, #12]
 80213a2:	7c1b      	ldrb	r3, [r3, #16]
 80213a4:	7413      	strb	r3, [r2, #16]
								ota_data.ota_valid = 0;
 80213a6:	4b3b      	ldr	r3, [pc, #236]	; (8021494 <ser_proccess_data+0x24c>)
 80213a8:	2200      	movs	r2, #0
 80213aa:	721a      	strb	r2, [r3, #8]
								data_received_size 			= data_len;
 80213ac:	4a35      	ldr	r2, [pc, #212]	; (8021484 <ser_proccess_data+0x23c>)
 80213ae:	8afb      	ldrh	r3, [r7, #22]
 80213b0:	8013      	strh	r3, [r2, #0]
								data_calc_crc			 	= ser_calcCRC(&buf[4], data_len);
 80213b2:	687b      	ldr	r3, [r7, #4]
 80213b4:	3304      	adds	r3, #4
 80213b6:	8afa      	ldrh	r2, [r7, #22]
 80213b8:	4611      	mov	r1, r2
 80213ba:	4618      	mov	r0, r3
 80213bc:	f000 f97c 	bl	80216b8 <ser_calcCRC>
 80213c0:	4603      	mov	r3, r0
 80213c2:	4a31      	ldr	r2, [pc, #196]	; (8021488 <ser_proccess_data+0x240>)
 80213c4:	6013      	str	r3, [r2, #0]
								ret = SER_EX_OK;
 80213c6:	2300      	movs	r3, #0
 80213c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

						}
						break;
 80213cc:	e006      	b.n	80213dc <ser_proccess_data+0x194>

						default:
						{
							// shouldn't be here
							ret = SER_EX_ERROR;
 80213ce:	2301      	movs	r3, #1
 80213d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						}
						break;
 80213d4:	e002      	b.n	80213dc <ser_proccess_data+0x194>
						break;
 80213d6:	bf00      	nop
 80213d8:	e000      	b.n	80213dc <ser_proccess_data+0x194>
						break;
 80213da:	bf00      	nop
					}

					if( data_received_size >= data_info.data_size )
 80213dc:	4b29      	ldr	r3, [pc, #164]	; (8021484 <ser_proccess_data+0x23c>)
 80213de:	881b      	ldrh	r3, [r3, #0]
 80213e0:	461a      	mov	r2, r3
 80213e2:	4b27      	ldr	r3, [pc, #156]	; (8021480 <ser_proccess_data+0x238>)
 80213e4:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80213e8:	429a      	cmp	r2, r3
 80213ea:	d33d      	bcc.n	8021468 <ser_proccess_data+0x220>
					{
						//Received All data, move to end
						ser_state = SER_STATE_END;
 80213ec:	4b23      	ldr	r3, [pc, #140]	; (802147c <ser_proccess_data+0x234>)
 80213ee:	2203      	movs	r2, #3
 80213f0:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			break;
 80213f2:	e039      	b.n	8021468 <ser_proccess_data+0x220>


			case SER_STATE_END:
			{
				SER_COMMAND_ *cmd = (SER_COMMAND_ *)buf;
 80213f4:	687b      	ldr	r3, [r7, #4]
 80213f6:	61fb      	str	r3, [r7, #28]

				if( cmd->packet_type == SER_PACKET_TYPE_CMD)
 80213f8:	69fb      	ldr	r3, [r7, #28]
 80213fa:	785b      	ldrb	r3, [r3, #1]
 80213fc:	2b00      	cmp	r3, #0
 80213fe:	d135      	bne.n	802146c <ser_proccess_data+0x224>
				{
					if(cmd->cmd == SER_CMD_END)
 8021400:	69fb      	ldr	r3, [r7, #28]
 8021402:	791b      	ldrb	r3, [r3, #4]
 8021404:	2b01      	cmp	r3, #1
 8021406:	d131      	bne.n	802146c <ser_proccess_data+0x224>
					{
						printf("Receive SERIAL END COMMAND\r\nValidation...\r\n");
 8021408:	4823      	ldr	r0, [pc, #140]	; (8021498 <ser_proccess_data+0x250>)
 802140a:	f00c ffd7 	bl	802e3bc <puts>

						//Validation the received packets
						//TODO: validation normal data

						// one packet data so:
						if( data_info.data_type == OTA_INFO_DATA ||  data_info.data_type == STATUS_DATA )
 802140e:	4b1c      	ldr	r3, [pc, #112]	; (8021480 <ser_proccess_data+0x238>)
 8021410:	781b      	ldrb	r3, [r3, #0]
 8021412:	2b02      	cmp	r3, #2
 8021414:	d003      	beq.n	802141e <ser_proccess_data+0x1d6>
 8021416:	4b1a      	ldr	r3, [pc, #104]	; (8021480 <ser_proccess_data+0x238>)
 8021418:	781b      	ldrb	r3, [r3, #0]
 802141a:	2b01      	cmp	r3, #1
 802141c:	d110      	bne.n	8021440 <ser_proccess_data+0x1f8>
						{
							if(data_calc_crc != data_info.data_crc)
 802141e:	4b18      	ldr	r3, [pc, #96]	; (8021480 <ser_proccess_data+0x238>)
 8021420:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8021424:	4b18      	ldr	r3, [pc, #96]	; (8021488 <ser_proccess_data+0x240>)
 8021426:	681b      	ldr	r3, [r3, #0]
 8021428:	429a      	cmp	r2, r3
 802142a:	d009      	beq.n	8021440 <ser_proccess_data+0x1f8>
							{
								printf("ERROR: FW CRC Mismatch: calculated: [0x%08lx] received: [0x%08lx]\r\n",
 802142c:	4b16      	ldr	r3, [pc, #88]	; (8021488 <ser_proccess_data+0x240>)
 802142e:	681b      	ldr	r3, [r3, #0]
 8021430:	4a13      	ldr	r2, [pc, #76]	; (8021480 <ser_proccess_data+0x238>)
 8021432:	f8d2 2005 	ldr.w	r2, [r2, #5]
 8021436:	4619      	mov	r1, r3
 8021438:	4818      	ldr	r0, [pc, #96]	; (802149c <ser_proccess_data+0x254>)
 802143a:	f00c ff39 	bl	802e2b0 <iprintf>
												data_calc_crc, data_info.data_crc);
								break;
 802143e:	e016      	b.n	802146e <ser_proccess_data+0x226>
							}
						}
						printf("Validated Successfully!\r\n");
 8021440:	4817      	ldr	r0, [pc, #92]	; (80214a0 <ser_proccess_data+0x258>)
 8021442:	f00c ffbb 	bl	802e3bc <puts>

						ser_state = SER_STATE_START;
 8021446:	4b0d      	ldr	r3, [pc, #52]	; (802147c <ser_proccess_data+0x234>)
 8021448:	2200      	movs	r2, #0
 802144a:	701a      	strb	r2, [r3, #0]
						ret = SER_EX_OK;
 802144c:	2300      	movs	r3, #0
 802144e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}
			}
			break;
 8021452:	e00b      	b.n	802146c <ser_proccess_data+0x224>

			default:
			{
				ret = SER_EX_ERROR;
 8021454:	2301      	movs	r3, #1
 8021456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 802145a:	e008      	b.n	802146e <ser_proccess_data+0x226>
			// state cases end
		};
 802145c:	bf00      	nop
 802145e:	e006      	b.n	802146e <ser_proccess_data+0x226>
			break;
 8021460:	bf00      	nop
 8021462:	e004      	b.n	802146e <ser_proccess_data+0x226>
			break;
 8021464:	bf00      	nop
 8021466:	e002      	b.n	802146e <ser_proccess_data+0x226>
			break;
 8021468:	bf00      	nop
 802146a:	e000      	b.n	802146e <ser_proccess_data+0x226>
			break;
 802146c:	bf00      	nop

	}while(false);

	return ret;
 802146e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8021472:	4618      	mov	r0, r3
 8021474:	3728      	adds	r7, #40	; 0x28
 8021476:	46bd      	mov	sp, r7
 8021478:	bdb0      	pop	{r4, r5, r7, pc}
 802147a:	bf00      	nop
 802147c:	20000420 	.word	0x20000420
 8021480:	2000083c 	.word	0x2000083c
 8021484:	2000084e 	.word	0x2000084e
 8021488:	20000850 	.word	0x20000850
 802148c:	0802f5f0 	.word	0x0802f5f0
 8021490:	0802f610 	.word	0x0802f610
 8021494:	20000408 	.word	0x20000408
 8021498:	0802f650 	.word	0x0802f650
 802149c:	0802f67c 	.word	0x0802f67c
 80214a0:	0802f6c0 	.word	0x0802f6c0

080214a4 <ser_send_resp>:
 * @brief send response to host
 * @param huart uart handler
 * @param rsp ACK or NACK response
 * @retval none
 */
static void ser_send_resp(UART_HandleTypeDef *huart, uint8_t rsp){
 80214a4:	b580      	push	{r7, lr}
 80214a6:	b086      	sub	sp, #24
 80214a8:	af00      	add	r7, sp, #0
 80214aa:	6078      	str	r0, [r7, #4]
 80214ac:	460b      	mov	r3, r1
 80214ae:	70fb      	strb	r3, [r7, #3]
	SER_RESP_ pack =
 80214b0:	f107 030c 	add.w	r3, r7, #12
 80214b4:	2200      	movs	r2, #0
 80214b6:	601a      	str	r2, [r3, #0]
 80214b8:	605a      	str	r2, [r3, #4]
 80214ba:	811a      	strh	r2, [r3, #8]
 80214bc:	23aa      	movs	r3, #170	; 0xaa
 80214be:	733b      	strb	r3, [r7, #12]
 80214c0:	2303      	movs	r3, #3
 80214c2:	737b      	strb	r3, [r7, #13]
 80214c4:	2301      	movs	r3, #1
 80214c6:	81fb      	strh	r3, [r7, #14]
 80214c8:	78fb      	ldrb	r3, [r7, #3]
 80214ca:	743b      	strb	r3, [r7, #16]
 80214cc:	23bb      	movs	r3, #187	; 0xbb
 80214ce:	757b      	strb	r3, [r7, #21]
		.data_len		= 1u,
		.status			= rsp,
		.eof			= SER_EOF
	};

	pack.crc = ser_calcCRC(&pack.status, 1);
 80214d0:	f107 030c 	add.w	r3, r7, #12
 80214d4:	3304      	adds	r3, #4
 80214d6:	2101      	movs	r1, #1
 80214d8:	4618      	mov	r0, r3
 80214da:	f000 f8ed 	bl	80216b8 <ser_calcCRC>
 80214de:	4603      	mov	r3, r0
 80214e0:	f8c7 3011 	str.w	r3, [r7, #17]

	//send respond
	HAL_UART_Transmit(huart, (uint8_t *)&pack, sizeof(SER_RESP_),HAL_MAX_DELAY);
 80214e4:	f107 010c 	add.w	r1, r7, #12
 80214e8:	f04f 33ff 	mov.w	r3, #4294967295
 80214ec:	220a      	movs	r2, #10
 80214ee:	6878      	ldr	r0, [r7, #4]
 80214f0:	f008 f995 	bl	802981e <HAL_UART_Transmit>

}
 80214f4:	bf00      	nop
 80214f6:	3718      	adds	r7, #24
 80214f8:	46bd      	mov	sp, r7
 80214fa:	bd80      	pop	{r7, pc}

080214fc <go_to_DFU>:
/*
 * @brief save boot reason to OTA update and save data in configuration
 * sector patr
 */
void go_to_DFU()
{
 80214fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80214fe:	b08f      	sub	sp, #60	; 0x3c
 8021500:	af00      	add	r7, sp, #0
	do
	{
		HAL_StatusTypeDef ret = HAL_ERROR;
 8021502:	2301      	movs	r3, #1
 8021504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		/* read configuration */
		OTA_GNRL_CFG_ cfg;
		memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 8021508:	4b15      	ldr	r3, [pc, #84]	; (8021560 <go_to_DFU+0x64>)
 802150a:	681b      	ldr	r3, [r3, #0]
 802150c:	461c      	mov	r4, r3
 802150e:	1d3e      	adds	r6, r7, #4
 8021510:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8021514:	4635      	mov	r5, r6
 8021516:	4623      	mov	r3, r4
 8021518:	6818      	ldr	r0, [r3, #0]
 802151a:	6859      	ldr	r1, [r3, #4]
 802151c:	689a      	ldr	r2, [r3, #8]
 802151e:	68db      	ldr	r3, [r3, #12]
 8021520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021522:	3410      	adds	r4, #16
 8021524:	3610      	adds	r6, #16
 8021526:	4564      	cmp	r4, ip
 8021528:	d1f4      	bne.n	8021514 <go_to_DFU+0x18>

		/* set reboot cause to ota request */
		cfg.reboot_cause = OTA_UPDATE_APP;
 802152a:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
 802152e:	607b      	str	r3, [r7, #4]

		/* write back config */
		ret = write_cfg_to_flash(&cfg);
 8021530:	1d3b      	adds	r3, r7, #4
 8021532:	4618      	mov	r0, r3
 8021534:	f000 f81a 	bl	802156c <write_cfg_to_flash>
 8021538:	4603      	mov	r3, r0
 802153a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		if( ret != HAL_OK )
 802153e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8021542:	2b00      	cmp	r3, #0
 8021544:	d003      	beq.n	802154e <go_to_DFU+0x52>
		{
			printf("Write configuratin Error!!!\r\n");
 8021546:	4807      	ldr	r0, [pc, #28]	; (8021564 <go_to_DFU+0x68>)
 8021548:	f00c ff38 	bl	802e3bc <puts>
		printf("Reboot for Update...\r\n");

		HAL_NVIC_SystemReset();

	}while(false);
}
 802154c:	e004      	b.n	8021558 <go_to_DFU+0x5c>
		printf("Reboot for Update...\r\n");
 802154e:	4806      	ldr	r0, [pc, #24]	; (8021568 <go_to_DFU+0x6c>)
 8021550:	f00c ff34 	bl	802e3bc <puts>
		HAL_NVIC_SystemReset();
 8021554:	f002 f9c3 	bl	80238de <HAL_NVIC_SystemReset>
}
 8021558:	bf00      	nop
 802155a:	373c      	adds	r7, #60	; 0x3c
 802155c:	46bd      	mov	sp, r7
 802155e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021560:	20000000 	.word	0x20000000
 8021564:	0802f6dc 	.word	0x0802f6dc
 8021568:	0802f6fc 	.word	0x0802f6fc

0802156c <write_cfg_to_flash>:
  * @brief Write the configuration to flash
  * @param cfg config structure
  * @retval none
  */
static HAL_StatusTypeDef write_cfg_to_flash( OTA_GNRL_CFG_ *cfg )
{
 802156c:	b5b0      	push	{r4, r5, r7, lr}
 802156e:	b08c      	sub	sp, #48	; 0x30
 8021570:	af00      	add	r7, sp, #0
 8021572:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_ERROR;
 8021574:	2301      	movs	r3, #1
 8021576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	do
	{
		if( cfg == NULL )
 802157a:	687b      	ldr	r3, [r7, #4]
 802157c:	2b00      	cmp	r3, #0
 802157e:	d05f      	beq.n	8021640 <write_cfg_to_flash+0xd4>
		{
			break;
		}

		ret = HAL_FLASH_Unlock();
 8021580:	f003 f80e 	bl	80245a0 <HAL_FLASH_Unlock>
 8021584:	4603      	mov	r3, r0
 8021586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 802158a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802158e:	2b00      	cmp	r3, #0
 8021590:	d158      	bne.n	8021644 <write_cfg_to_flash+0xd8>
		{
			break;
		}

		// Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8021592:	f04f 30ff 	mov.w	r0, #4294967295
 8021596:	f003 f835 	bl	8024604 <FLASH_WaitForLastOperation>

		// Erase the flash configuration sector
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;

		EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 802159a:	2300      	movs	r3, #0
 802159c:	613b      	str	r3, [r7, #16]
		EraseInitStruct.Sector			= OTA_CFG_SECTOR;
 802159e:	2304      	movs	r3, #4
 80215a0:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.NbSectors		= 1u;
 80215a2:	2301      	movs	r3, #1
 80215a4:	61fb      	str	r3, [r7, #28]
		EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 80215a6:	2302      	movs	r3, #2
 80215a8:	623b      	str	r3, [r7, #32]

		// clear all flags before you write it to flash
		    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 80215aa:	4b2c      	ldr	r3, [pc, #176]	; (802165c <write_cfg_to_flash+0xf0>)
 80215ac:	2273      	movs	r2, #115	; 0x73
 80215ae:	60da      	str	r2, [r3, #12]
		                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80215b0:	f107 020c 	add.w	r2, r7, #12
 80215b4:	f107 0310 	add.w	r3, r7, #16
 80215b8:	4611      	mov	r1, r2
 80215ba:	4618      	mov	r0, r3
 80215bc:	f003 f962 	bl	8024884 <HAL_FLASHEx_Erase>
 80215c0:	4603      	mov	r3, r0
 80215c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 80215c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80215ca:	2b00      	cmp	r3, #0
 80215cc:	d13c      	bne.n	8021648 <write_cfg_to_flash+0xdc>
		{
			break;
		}

		// Write the configuration
		uint8_t *data = (uint8_t*) cfg;
 80215ce:	687b      	ldr	r3, [r7, #4]
 80215d0:	627b      	str	r3, [r7, #36]	; 0x24
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 80215d2:	2300      	movs	r3, #0
 80215d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80215d6:	e01f      	b.n	8021618 <write_cfg_to_flash+0xac>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80215d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215da:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80215de:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
									OTA_CFG_FLASH_ADDR + i,
									data[i]);
 80215e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80215e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215e6:	4413      	add	r3, r2
 80215e8:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80215ea:	b2db      	uxtb	r3, r3
 80215ec:	2200      	movs	r2, #0
 80215ee:	461c      	mov	r4, r3
 80215f0:	4615      	mov	r5, r2
 80215f2:	4622      	mov	r2, r4
 80215f4:	462b      	mov	r3, r5
 80215f6:	2000      	movs	r0, #0
 80215f8:	f002 ff7e 	bl	80244f8 <HAL_FLASH_Program>
 80215fc:	4603      	mov	r3, r0
 80215fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if( ret != HAL_OK )
 8021602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021606:	2b00      	cmp	r3, #0
 8021608:	d003      	beq.n	8021612 <write_cfg_to_flash+0xa6>
			{
				printf("Slot table Flash Write Error\r\n");
 802160a:	4815      	ldr	r0, [pc, #84]	; (8021660 <write_cfg_to_flash+0xf4>)
 802160c:	f00c fed6 	bl	802e3bc <puts>
				break;
 8021610:	e005      	b.n	802161e <write_cfg_to_flash+0xb2>
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 8021612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021614:	3301      	adds	r3, #1
 8021616:	62bb      	str	r3, [r7, #40]	; 0x28
 8021618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802161a:	2b2f      	cmp	r3, #47	; 0x2f
 802161c:	d9dc      	bls.n	80215d8 <write_cfg_to_flash+0x6c>
			}
		}

	    //Check if the FLASH_FLAG_BSY.
	    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 802161e:	f04f 30ff 	mov.w	r0, #4294967295
 8021622:	f002 ffef 	bl	8024604 <FLASH_WaitForLastOperation>

	    if( ret != HAL_OK )
 8021626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802162a:	2b00      	cmp	r3, #0
 802162c:	d10e      	bne.n	802164c <write_cfg_to_flash+0xe0>
	    {
	      break;
	    }

	    ret = HAL_FLASH_Lock();
 802162e:	f002 ffd9 	bl	80245e4 <HAL_FLASH_Lock>
 8021632:	4603      	mov	r3, r0
 8021634:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	    if( ret != HAL_OK )
 8021638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802163c:	2b00      	cmp	r3, #0
 802163e:	e006      	b.n	802164e <write_cfg_to_flash+0xe2>
			break;
 8021640:	bf00      	nop
 8021642:	e004      	b.n	802164e <write_cfg_to_flash+0xe2>
			break;
 8021644:	bf00      	nop
 8021646:	e002      	b.n	802164e <write_cfg_to_flash+0xe2>
			break;
 8021648:	bf00      	nop
 802164a:	e000      	b.n	802164e <write_cfg_to_flash+0xe2>
	      break;
 802164c:	bf00      	nop
	    {
	      break;
	    }
	}while(false);

	return ret;
 802164e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8021652:	4618      	mov	r0, r3
 8021654:	3730      	adds	r7, #48	; 0x30
 8021656:	46bd      	mov	sp, r7
 8021658:	bdb0      	pop	{r4, r5, r7, pc}
 802165a:	bf00      	nop
 802165c:	40023c00 	.word	0x40023c00
 8021660:	0802f714 	.word	0x0802f714

08021664 <ota_req_send>:
 * @brief send request to host
 * @param huart uart handler
 * @retval none
 */
static void ota_req_send(UART_HandleTypeDef *huart, uint8_t cmd)
{
 8021664:	b580      	push	{r7, lr}
 8021666:	b086      	sub	sp, #24
 8021668:	af00      	add	r7, sp, #0
 802166a:	6078      	str	r0, [r7, #4]
 802166c:	460b      	mov	r3, r1
 802166e:	70fb      	strb	r3, [r7, #3]
	SER_COMMAND_ pack =
 8021670:	f107 030c 	add.w	r3, r7, #12
 8021674:	2200      	movs	r2, #0
 8021676:	601a      	str	r2, [r3, #0]
 8021678:	605a      	str	r2, [r3, #4]
 802167a:	811a      	strh	r2, [r3, #8]
 802167c:	23aa      	movs	r3, #170	; 0xaa
 802167e:	733b      	strb	r3, [r7, #12]
 8021680:	2301      	movs	r3, #1
 8021682:	81fb      	strh	r3, [r7, #14]
 8021684:	78fb      	ldrb	r3, [r7, #3]
 8021686:	743b      	strb	r3, [r7, #16]
 8021688:	23bb      	movs	r3, #187	; 0xbb
 802168a:	757b      	strb	r3, [r7, #21]
		.data_len			= 1u,
		.cmd					= cmd,
		.eof					= SER_EOF
	};

	pack.crc = ser_calcCRC(&pack.cmd, 1);
 802168c:	f107 030c 	add.w	r3, r7, #12
 8021690:	3304      	adds	r3, #4
 8021692:	2101      	movs	r1, #1
 8021694:	4618      	mov	r0, r3
 8021696:	f000 f80f 	bl	80216b8 <ser_calcCRC>
 802169a:	4603      	mov	r3, r0
 802169c:	f8c7 3011 	str.w	r3, [r7, #17]

	//send request
	HAL_UART_Transmit(huart, (uint8_t *)&pack, sizeof(SER_COMMAND_),HAL_MAX_DELAY);
 80216a0:	f107 010c 	add.w	r1, r7, #12
 80216a4:	f04f 33ff 	mov.w	r3, #4294967295
 80216a8:	220a      	movs	r2, #10
 80216aa:	6878      	ldr	r0, [r7, #4]
 80216ac:	f008 f8b7 	bl	802981e <HAL_UART_Transmit>
}
 80216b0:	bf00      	nop
 80216b2:	3718      	adds	r7, #24
 80216b4:	46bd      	mov	sp, r7
 80216b6:	bd80      	pop	{r7, pc}

080216b8 <ser_calcCRC>:
 * @param DataLength length of data
 * @retval CRC32
 */

uint32_t ser_calcCRC(uint8_t * pData, uint32_t DataLength)
{
 80216b8:	b480      	push	{r7}
 80216ba:	b087      	sub	sp, #28
 80216bc:	af00      	add	r7, sp, #0
 80216be:	6078      	str	r0, [r7, #4]
 80216c0:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 80216c2:	f04f 33ff 	mov.w	r3, #4294967295
 80216c6:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 80216c8:	2300      	movs	r3, #0
 80216ca:	613b      	str	r3, [r7, #16]
 80216cc:	e014      	b.n	80216f8 <ser_calcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 80216ce:	697b      	ldr	r3, [r7, #20]
 80216d0:	0e1b      	lsrs	r3, r3, #24
 80216d2:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 80216d4:	687a      	ldr	r2, [r7, #4]
 80216d6:	693b      	ldr	r3, [r7, #16]
 80216d8:	4413      	add	r3, r2
 80216da:	781a      	ldrb	r2, [r3, #0]
 80216dc:	7bfb      	ldrb	r3, [r7, #15]
 80216de:	4053      	eors	r3, r2
 80216e0:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 80216e2:	697b      	ldr	r3, [r7, #20]
 80216e4:	021a      	lsls	r2, r3, #8
 80216e6:	7bfb      	ldrb	r3, [r7, #15]
 80216e8:	4909      	ldr	r1, [pc, #36]	; (8021710 <ser_calcCRC+0x58>)
 80216ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80216ee:	4053      	eors	r3, r2
 80216f0:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 80216f2:	693b      	ldr	r3, [r7, #16]
 80216f4:	3301      	adds	r3, #1
 80216f6:	613b      	str	r3, [r7, #16]
 80216f8:	693a      	ldr	r2, [r7, #16]
 80216fa:	683b      	ldr	r3, [r7, #0]
 80216fc:	429a      	cmp	r2, r3
 80216fe:	d3e6      	bcc.n	80216ce <ser_calcCRC+0x16>
    }
    return Checksum;
 8021700:	697b      	ldr	r3, [r7, #20]
}
 8021702:	4618      	mov	r0, r3
 8021704:	371c      	adds	r7, #28
 8021706:	46bd      	mov	sp, r7
 8021708:	f85d 7b04 	ldr.w	r7, [sp], #4
 802170c:	4770      	bx	lr
 802170e:	bf00      	nop
 8021710:	0802f738 	.word	0x0802f738

08021714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8021714:	b480      	push	{r7}
 8021716:	b083      	sub	sp, #12
 8021718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802171a:	2300      	movs	r3, #0
 802171c:	607b      	str	r3, [r7, #4]
 802171e:	4b10      	ldr	r3, [pc, #64]	; (8021760 <HAL_MspInit+0x4c>)
 8021720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021722:	4a0f      	ldr	r2, [pc, #60]	; (8021760 <HAL_MspInit+0x4c>)
 8021724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021728:	6453      	str	r3, [r2, #68]	; 0x44
 802172a:	4b0d      	ldr	r3, [pc, #52]	; (8021760 <HAL_MspInit+0x4c>)
 802172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802172e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021732:	607b      	str	r3, [r7, #4]
 8021734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8021736:	2300      	movs	r3, #0
 8021738:	603b      	str	r3, [r7, #0]
 802173a:	4b09      	ldr	r3, [pc, #36]	; (8021760 <HAL_MspInit+0x4c>)
 802173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802173e:	4a08      	ldr	r2, [pc, #32]	; (8021760 <HAL_MspInit+0x4c>)
 8021740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021744:	6413      	str	r3, [r2, #64]	; 0x40
 8021746:	4b06      	ldr	r3, [pc, #24]	; (8021760 <HAL_MspInit+0x4c>)
 8021748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802174e:	603b      	str	r3, [r7, #0]
 8021750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8021752:	bf00      	nop
 8021754:	370c      	adds	r7, #12
 8021756:	46bd      	mov	sp, r7
 8021758:	f85d 7b04 	ldr.w	r7, [sp], #4
 802175c:	4770      	bx	lr
 802175e:	bf00      	nop
 8021760:	40023800 	.word	0x40023800

08021764 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8021764:	b480      	push	{r7}
 8021766:	b085      	sub	sp, #20
 8021768:	af00      	add	r7, sp, #0
 802176a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 802176c:	687b      	ldr	r3, [r7, #4]
 802176e:	681b      	ldr	r3, [r3, #0]
 8021770:	4a0b      	ldr	r2, [pc, #44]	; (80217a0 <HAL_CRC_MspInit+0x3c>)
 8021772:	4293      	cmp	r3, r2
 8021774:	d10d      	bne.n	8021792 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8021776:	2300      	movs	r3, #0
 8021778:	60fb      	str	r3, [r7, #12]
 802177a:	4b0a      	ldr	r3, [pc, #40]	; (80217a4 <HAL_CRC_MspInit+0x40>)
 802177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802177e:	4a09      	ldr	r2, [pc, #36]	; (80217a4 <HAL_CRC_MspInit+0x40>)
 8021780:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8021784:	6313      	str	r3, [r2, #48]	; 0x30
 8021786:	4b07      	ldr	r3, [pc, #28]	; (80217a4 <HAL_CRC_MspInit+0x40>)
 8021788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802178a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802178e:	60fb      	str	r3, [r7, #12]
 8021790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8021792:	bf00      	nop
 8021794:	3714      	adds	r7, #20
 8021796:	46bd      	mov	sp, r7
 8021798:	f85d 7b04 	ldr.w	r7, [sp], #4
 802179c:	4770      	bx	lr
 802179e:	bf00      	nop
 80217a0:	40023000 	.word	0x40023000
 80217a4:	40023800 	.word	0x40023800

080217a8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80217a8:	b580      	push	{r7, lr}
 80217aa:	b084      	sub	sp, #16
 80217ac:	af00      	add	r7, sp, #0
 80217ae:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80217b0:	687b      	ldr	r3, [r7, #4]
 80217b2:	681b      	ldr	r3, [r3, #0]
 80217b4:	4a0e      	ldr	r2, [pc, #56]	; (80217f0 <HAL_DMA2D_MspInit+0x48>)
 80217b6:	4293      	cmp	r3, r2
 80217b8:	d115      	bne.n	80217e6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80217ba:	2300      	movs	r3, #0
 80217bc:	60fb      	str	r3, [r7, #12]
 80217be:	4b0d      	ldr	r3, [pc, #52]	; (80217f4 <HAL_DMA2D_MspInit+0x4c>)
 80217c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80217c2:	4a0c      	ldr	r2, [pc, #48]	; (80217f4 <HAL_DMA2D_MspInit+0x4c>)
 80217c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80217c8:	6313      	str	r3, [r2, #48]	; 0x30
 80217ca:	4b0a      	ldr	r3, [pc, #40]	; (80217f4 <HAL_DMA2D_MspInit+0x4c>)
 80217cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80217ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80217d2:	60fb      	str	r3, [r7, #12]
 80217d4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80217d6:	2200      	movs	r2, #0
 80217d8:	2105      	movs	r1, #5
 80217da:	205a      	movs	r0, #90	; 0x5a
 80217dc:	f002 f855 	bl	802388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80217e0:	205a      	movs	r0, #90	; 0x5a
 80217e2:	f002 f86e 	bl	80238c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80217e6:	bf00      	nop
 80217e8:	3710      	adds	r7, #16
 80217ea:	46bd      	mov	sp, r7
 80217ec:	bd80      	pop	{r7, pc}
 80217ee:	bf00      	nop
 80217f0:	4002b000 	.word	0x4002b000
 80217f4:	40023800 	.word	0x40023800

080217f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80217f8:	b580      	push	{r7, lr}
 80217fa:	b08a      	sub	sp, #40	; 0x28
 80217fc:	af00      	add	r7, sp, #0
 80217fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021800:	f107 0314 	add.w	r3, r7, #20
 8021804:	2200      	movs	r2, #0
 8021806:	601a      	str	r2, [r3, #0]
 8021808:	605a      	str	r2, [r3, #4]
 802180a:	609a      	str	r2, [r3, #8]
 802180c:	60da      	str	r2, [r3, #12]
 802180e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8021810:	687b      	ldr	r3, [r7, #4]
 8021812:	681b      	ldr	r3, [r3, #0]
 8021814:	4a29      	ldr	r2, [pc, #164]	; (80218bc <HAL_I2C_MspInit+0xc4>)
 8021816:	4293      	cmp	r3, r2
 8021818:	d14b      	bne.n	80218b2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802181a:	2300      	movs	r3, #0
 802181c:	613b      	str	r3, [r7, #16]
 802181e:	4b28      	ldr	r3, [pc, #160]	; (80218c0 <HAL_I2C_MspInit+0xc8>)
 8021820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021822:	4a27      	ldr	r2, [pc, #156]	; (80218c0 <HAL_I2C_MspInit+0xc8>)
 8021824:	f043 0304 	orr.w	r3, r3, #4
 8021828:	6313      	str	r3, [r2, #48]	; 0x30
 802182a:	4b25      	ldr	r3, [pc, #148]	; (80218c0 <HAL_I2C_MspInit+0xc8>)
 802182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802182e:	f003 0304 	and.w	r3, r3, #4
 8021832:	613b      	str	r3, [r7, #16]
 8021834:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021836:	2300      	movs	r3, #0
 8021838:	60fb      	str	r3, [r7, #12]
 802183a:	4b21      	ldr	r3, [pc, #132]	; (80218c0 <HAL_I2C_MspInit+0xc8>)
 802183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802183e:	4a20      	ldr	r2, [pc, #128]	; (80218c0 <HAL_I2C_MspInit+0xc8>)
 8021840:	f043 0301 	orr.w	r3, r3, #1
 8021844:	6313      	str	r3, [r2, #48]	; 0x30
 8021846:	4b1e      	ldr	r3, [pc, #120]	; (80218c0 <HAL_I2C_MspInit+0xc8>)
 8021848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802184a:	f003 0301 	and.w	r3, r3, #1
 802184e:	60fb      	str	r3, [r7, #12]
 8021850:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8021852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021858:	2312      	movs	r3, #18
 802185a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802185c:	2301      	movs	r3, #1
 802185e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021860:	2300      	movs	r3, #0
 8021862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8021864:	2304      	movs	r3, #4
 8021866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8021868:	f107 0314 	add.w	r3, r7, #20
 802186c:	4619      	mov	r1, r3
 802186e:	4815      	ldr	r0, [pc, #84]	; (80218c4 <HAL_I2C_MspInit+0xcc>)
 8021870:	f003 f948 	bl	8024b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8021874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802187a:	2312      	movs	r3, #18
 802187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802187e:	2301      	movs	r3, #1
 8021880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021882:	2300      	movs	r3, #0
 8021884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8021886:	2304      	movs	r3, #4
 8021888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 802188a:	f107 0314 	add.w	r3, r7, #20
 802188e:	4619      	mov	r1, r3
 8021890:	480d      	ldr	r0, [pc, #52]	; (80218c8 <HAL_I2C_MspInit+0xd0>)
 8021892:	f003 f937 	bl	8024b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8021896:	2300      	movs	r3, #0
 8021898:	60bb      	str	r3, [r7, #8]
 802189a:	4b09      	ldr	r3, [pc, #36]	; (80218c0 <HAL_I2C_MspInit+0xc8>)
 802189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802189e:	4a08      	ldr	r2, [pc, #32]	; (80218c0 <HAL_I2C_MspInit+0xc8>)
 80218a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80218a4:	6413      	str	r3, [r2, #64]	; 0x40
 80218a6:	4b06      	ldr	r3, [pc, #24]	; (80218c0 <HAL_I2C_MspInit+0xc8>)
 80218a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80218aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80218ae:	60bb      	str	r3, [r7, #8]
 80218b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80218b2:	bf00      	nop
 80218b4:	3728      	adds	r7, #40	; 0x28
 80218b6:	46bd      	mov	sp, r7
 80218b8:	bd80      	pop	{r7, pc}
 80218ba:	bf00      	nop
 80218bc:	40005c00 	.word	0x40005c00
 80218c0:	40023800 	.word	0x40023800
 80218c4:	40020800 	.word	0x40020800
 80218c8:	40020000 	.word	0x40020000

080218cc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80218cc:	b580      	push	{r7, lr}
 80218ce:	b09a      	sub	sp, #104	; 0x68
 80218d0:	af00      	add	r7, sp, #0
 80218d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80218d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80218d8:	2200      	movs	r2, #0
 80218da:	601a      	str	r2, [r3, #0]
 80218dc:	605a      	str	r2, [r3, #4]
 80218de:	609a      	str	r2, [r3, #8]
 80218e0:	60da      	str	r2, [r3, #12]
 80218e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80218e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80218e8:	2230      	movs	r2, #48	; 0x30
 80218ea:	2100      	movs	r1, #0
 80218ec:	4618      	mov	r0, r3
 80218ee:	f00c fbf7 	bl	802e0e0 <memset>
  if(hltdc->Instance==LTDC)
 80218f2:	687b      	ldr	r3, [r7, #4]
 80218f4:	681b      	ldr	r3, [r3, #0]
 80218f6:	4a85      	ldr	r2, [pc, #532]	; (8021b0c <HAL_LTDC_MspInit+0x240>)
 80218f8:	4293      	cmp	r3, r2
 80218fa:	f040 8102 	bne.w	8021b02 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80218fe:	2308      	movs	r3, #8
 8021900:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 8021902:	2331      	movs	r3, #49	; 0x31
 8021904:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8021906:	2302      	movs	r3, #2
 8021908:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 802190a:	2300      	movs	r3, #0
 802190c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802190e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021912:	4618      	mov	r0, r3
 8021914:	f006 fa84 	bl	8027e20 <HAL_RCCEx_PeriphCLKConfig>
 8021918:	4603      	mov	r3, r0
 802191a:	2b00      	cmp	r3, #0
 802191c:	d001      	beq.n	8021922 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 802191e:	f7ff fac7 	bl	8020eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8021922:	2300      	movs	r3, #0
 8021924:	623b      	str	r3, [r7, #32]
 8021926:	4b7a      	ldr	r3, [pc, #488]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 8021928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802192a:	4a79      	ldr	r2, [pc, #484]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 802192c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8021930:	6453      	str	r3, [r2, #68]	; 0x44
 8021932:	4b77      	ldr	r3, [pc, #476]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 8021934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021936:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802193a:	623b      	str	r3, [r7, #32]
 802193c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 802193e:	2300      	movs	r3, #0
 8021940:	61fb      	str	r3, [r7, #28]
 8021942:	4b73      	ldr	r3, [pc, #460]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 8021944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021946:	4a72      	ldr	r2, [pc, #456]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 8021948:	f043 0320 	orr.w	r3, r3, #32
 802194c:	6313      	str	r3, [r2, #48]	; 0x30
 802194e:	4b70      	ldr	r3, [pc, #448]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 8021950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021952:	f003 0320 	and.w	r3, r3, #32
 8021956:	61fb      	str	r3, [r7, #28]
 8021958:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802195a:	2300      	movs	r3, #0
 802195c:	61bb      	str	r3, [r7, #24]
 802195e:	4b6c      	ldr	r3, [pc, #432]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 8021960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021962:	4a6b      	ldr	r2, [pc, #428]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 8021964:	f043 0301 	orr.w	r3, r3, #1
 8021968:	6313      	str	r3, [r2, #48]	; 0x30
 802196a:	4b69      	ldr	r3, [pc, #420]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 802196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802196e:	f003 0301 	and.w	r3, r3, #1
 8021972:	61bb      	str	r3, [r7, #24]
 8021974:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021976:	2300      	movs	r3, #0
 8021978:	617b      	str	r3, [r7, #20]
 802197a:	4b65      	ldr	r3, [pc, #404]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 802197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802197e:	4a64      	ldr	r2, [pc, #400]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 8021980:	f043 0302 	orr.w	r3, r3, #2
 8021984:	6313      	str	r3, [r2, #48]	; 0x30
 8021986:	4b62      	ldr	r3, [pc, #392]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 8021988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802198a:	f003 0302 	and.w	r3, r3, #2
 802198e:	617b      	str	r3, [r7, #20]
 8021990:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8021992:	2300      	movs	r3, #0
 8021994:	613b      	str	r3, [r7, #16]
 8021996:	4b5e      	ldr	r3, [pc, #376]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 8021998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802199a:	4a5d      	ldr	r2, [pc, #372]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 802199c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80219a0:	6313      	str	r3, [r2, #48]	; 0x30
 80219a2:	4b5b      	ldr	r3, [pc, #364]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 80219a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80219aa:	613b      	str	r3, [r7, #16]
 80219ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80219ae:	2300      	movs	r3, #0
 80219b0:	60fb      	str	r3, [r7, #12]
 80219b2:	4b57      	ldr	r3, [pc, #348]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 80219b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219b6:	4a56      	ldr	r2, [pc, #344]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 80219b8:	f043 0304 	orr.w	r3, r3, #4
 80219bc:	6313      	str	r3, [r2, #48]	; 0x30
 80219be:	4b54      	ldr	r3, [pc, #336]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 80219c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219c2:	f003 0304 	and.w	r3, r3, #4
 80219c6:	60fb      	str	r3, [r7, #12]
 80219c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80219ca:	2300      	movs	r3, #0
 80219cc:	60bb      	str	r3, [r7, #8]
 80219ce:	4b50      	ldr	r3, [pc, #320]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 80219d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219d2:	4a4f      	ldr	r2, [pc, #316]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 80219d4:	f043 0308 	orr.w	r3, r3, #8
 80219d8:	6313      	str	r3, [r2, #48]	; 0x30
 80219da:	4b4d      	ldr	r3, [pc, #308]	; (8021b10 <HAL_LTDC_MspInit+0x244>)
 80219dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219de:	f003 0308 	and.w	r3, r3, #8
 80219e2:	60bb      	str	r3, [r7, #8]
 80219e4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80219e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80219ea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80219ec:	2302      	movs	r3, #2
 80219ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80219f0:	2300      	movs	r3, #0
 80219f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80219f4:	2300      	movs	r3, #0
 80219f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80219f8:	230e      	movs	r3, #14
 80219fa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80219fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a00:	4619      	mov	r1, r3
 8021a02:	4844      	ldr	r0, [pc, #272]	; (8021b14 <HAL_LTDC_MspInit+0x248>)
 8021a04:	f003 f87e 	bl	8024b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8021a08:	f641 0358 	movw	r3, #6232	; 0x1858
 8021a0c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a0e:	2302      	movs	r3, #2
 8021a10:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a12:	2300      	movs	r3, #0
 8021a14:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a16:	2300      	movs	r3, #0
 8021a18:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021a1a:	230e      	movs	r3, #14
 8021a1c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021a1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a22:	4619      	mov	r1, r3
 8021a24:	483c      	ldr	r0, [pc, #240]	; (8021b18 <HAL_LTDC_MspInit+0x24c>)
 8021a26:	f003 f86d 	bl	8024b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8021a2a:	2303      	movs	r3, #3
 8021a2c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a2e:	2302      	movs	r3, #2
 8021a30:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a32:	2300      	movs	r3, #0
 8021a34:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a36:	2300      	movs	r3, #0
 8021a38:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8021a3a:	2309      	movs	r3, #9
 8021a3c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021a3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a42:	4619      	mov	r1, r3
 8021a44:	4835      	ldr	r0, [pc, #212]	; (8021b1c <HAL_LTDC_MspInit+0x250>)
 8021a46:	f003 f85d 	bl	8024b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8021a4a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8021a4e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a50:	2302      	movs	r3, #2
 8021a52:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a54:	2300      	movs	r3, #0
 8021a56:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a58:	2300      	movs	r3, #0
 8021a5a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021a5c:	230e      	movs	r3, #14
 8021a5e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021a60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a64:	4619      	mov	r1, r3
 8021a66:	482d      	ldr	r0, [pc, #180]	; (8021b1c <HAL_LTDC_MspInit+0x250>)
 8021a68:	f003 f84c 	bl	8024b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8021a6c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8021a70:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a72:	2302      	movs	r3, #2
 8021a74:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a76:	2300      	movs	r3, #0
 8021a78:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a7a:	2300      	movs	r3, #0
 8021a7c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021a7e:	230e      	movs	r3, #14
 8021a80:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021a82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a86:	4619      	mov	r1, r3
 8021a88:	4825      	ldr	r0, [pc, #148]	; (8021b20 <HAL_LTDC_MspInit+0x254>)
 8021a8a:	f003 f83b 	bl	8024b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8021a8e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8021a92:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a94:	2302      	movs	r3, #2
 8021a96:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a98:	2300      	movs	r3, #0
 8021a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a9c:	2300      	movs	r3, #0
 8021a9e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021aa0:	230e      	movs	r3, #14
 8021aa2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021aa4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021aa8:	4619      	mov	r1, r3
 8021aaa:	481e      	ldr	r0, [pc, #120]	; (8021b24 <HAL_LTDC_MspInit+0x258>)
 8021aac:	f003 f82a 	bl	8024b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8021ab0:	2348      	movs	r3, #72	; 0x48
 8021ab2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021ab4:	2302      	movs	r3, #2
 8021ab6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021ab8:	2300      	movs	r3, #0
 8021aba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021abc:	2300      	movs	r3, #0
 8021abe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021ac0:	230e      	movs	r3, #14
 8021ac2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021ac4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021ac8:	4619      	mov	r1, r3
 8021aca:	4817      	ldr	r0, [pc, #92]	; (8021b28 <HAL_LTDC_MspInit+0x25c>)
 8021acc:	f003 f81a 	bl	8024b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8021ad0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8021ad4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021ad6:	2302      	movs	r3, #2
 8021ad8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021ada:	2300      	movs	r3, #0
 8021adc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021ade:	2300      	movs	r3, #0
 8021ae0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8021ae2:	2309      	movs	r3, #9
 8021ae4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021ae6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021aea:	4619      	mov	r1, r3
 8021aec:	480c      	ldr	r0, [pc, #48]	; (8021b20 <HAL_LTDC_MspInit+0x254>)
 8021aee:	f003 f809 	bl	8024b04 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8021af2:	2200      	movs	r2, #0
 8021af4:	2105      	movs	r1, #5
 8021af6:	2058      	movs	r0, #88	; 0x58
 8021af8:	f001 fec7 	bl	802388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8021afc:	2058      	movs	r0, #88	; 0x58
 8021afe:	f001 fee0 	bl	80238c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8021b02:	bf00      	nop
 8021b04:	3768      	adds	r7, #104	; 0x68
 8021b06:	46bd      	mov	sp, r7
 8021b08:	bd80      	pop	{r7, pc}
 8021b0a:	bf00      	nop
 8021b0c:	40016800 	.word	0x40016800
 8021b10:	40023800 	.word	0x40023800
 8021b14:	40021400 	.word	0x40021400
 8021b18:	40020000 	.word	0x40020000
 8021b1c:	40020400 	.word	0x40020400
 8021b20:	40021800 	.word	0x40021800
 8021b24:	40020800 	.word	0x40020800
 8021b28:	40020c00 	.word	0x40020c00

08021b2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8021b2c:	b580      	push	{r7, lr}
 8021b2e:	b08a      	sub	sp, #40	; 0x28
 8021b30:	af00      	add	r7, sp, #0
 8021b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021b34:	f107 0314 	add.w	r3, r7, #20
 8021b38:	2200      	movs	r2, #0
 8021b3a:	601a      	str	r2, [r3, #0]
 8021b3c:	605a      	str	r2, [r3, #4]
 8021b3e:	609a      	str	r2, [r3, #8]
 8021b40:	60da      	str	r2, [r3, #12]
 8021b42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8021b44:	687b      	ldr	r3, [r7, #4]
 8021b46:	681b      	ldr	r3, [r3, #0]
 8021b48:	4a19      	ldr	r2, [pc, #100]	; (8021bb0 <HAL_SPI_MspInit+0x84>)
 8021b4a:	4293      	cmp	r3, r2
 8021b4c:	d12c      	bne.n	8021ba8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8021b4e:	2300      	movs	r3, #0
 8021b50:	613b      	str	r3, [r7, #16]
 8021b52:	4b18      	ldr	r3, [pc, #96]	; (8021bb4 <HAL_SPI_MspInit+0x88>)
 8021b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021b56:	4a17      	ldr	r2, [pc, #92]	; (8021bb4 <HAL_SPI_MspInit+0x88>)
 8021b58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8021b5e:	4b15      	ldr	r3, [pc, #84]	; (8021bb4 <HAL_SPI_MspInit+0x88>)
 8021b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021b66:	613b      	str	r3, [r7, #16]
 8021b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8021b6a:	2300      	movs	r3, #0
 8021b6c:	60fb      	str	r3, [r7, #12]
 8021b6e:	4b11      	ldr	r3, [pc, #68]	; (8021bb4 <HAL_SPI_MspInit+0x88>)
 8021b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b72:	4a10      	ldr	r2, [pc, #64]	; (8021bb4 <HAL_SPI_MspInit+0x88>)
 8021b74:	f043 0320 	orr.w	r3, r3, #32
 8021b78:	6313      	str	r3, [r2, #48]	; 0x30
 8021b7a:	4b0e      	ldr	r3, [pc, #56]	; (8021bb4 <HAL_SPI_MspInit+0x88>)
 8021b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b7e:	f003 0320 	and.w	r3, r3, #32
 8021b82:	60fb      	str	r3, [r7, #12]
 8021b84:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8021b86:	f44f 7360 	mov.w	r3, #896	; 0x380
 8021b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021b8c:	2302      	movs	r3, #2
 8021b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b90:	2300      	movs	r3, #0
 8021b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021b94:	2300      	movs	r3, #0
 8021b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8021b98:	2305      	movs	r3, #5
 8021b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021b9c:	f107 0314 	add.w	r3, r7, #20
 8021ba0:	4619      	mov	r1, r3
 8021ba2:	4805      	ldr	r0, [pc, #20]	; (8021bb8 <HAL_SPI_MspInit+0x8c>)
 8021ba4:	f002 ffae 	bl	8024b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8021ba8:	bf00      	nop
 8021baa:	3728      	adds	r7, #40	; 0x28
 8021bac:	46bd      	mov	sp, r7
 8021bae:	bd80      	pop	{r7, pc}
 8021bb0:	40015000 	.word	0x40015000
 8021bb4:	40023800 	.word	0x40023800
 8021bb8:	40021400 	.word	0x40021400

08021bbc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8021bbc:	b580      	push	{r7, lr}
 8021bbe:	b082      	sub	sp, #8
 8021bc0:	af00      	add	r7, sp, #0
 8021bc2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8021bc4:	687b      	ldr	r3, [r7, #4]
 8021bc6:	681b      	ldr	r3, [r3, #0]
 8021bc8:	4a08      	ldr	r2, [pc, #32]	; (8021bec <HAL_SPI_MspDeInit+0x30>)
 8021bca:	4293      	cmp	r3, r2
 8021bcc:	d10a      	bne.n	8021be4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8021bce:	4b08      	ldr	r3, [pc, #32]	; (8021bf0 <HAL_SPI_MspDeInit+0x34>)
 8021bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021bd2:	4a07      	ldr	r2, [pc, #28]	; (8021bf0 <HAL_SPI_MspDeInit+0x34>)
 8021bd4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8021bd8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8021bda:	f44f 7160 	mov.w	r1, #896	; 0x380
 8021bde:	4805      	ldr	r0, [pc, #20]	; (8021bf4 <HAL_SPI_MspDeInit+0x38>)
 8021be0:	f003 f93c 	bl	8024e5c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8021be4:	bf00      	nop
 8021be6:	3708      	adds	r7, #8
 8021be8:	46bd      	mov	sp, r7
 8021bea:	bd80      	pop	{r7, pc}
 8021bec:	40015000 	.word	0x40015000
 8021bf0:	40023800 	.word	0x40023800
 8021bf4:	40021400 	.word	0x40021400

08021bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8021bf8:	b480      	push	{r7}
 8021bfa:	b085      	sub	sp, #20
 8021bfc:	af00      	add	r7, sp, #0
 8021bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8021c00:	687b      	ldr	r3, [r7, #4]
 8021c02:	681b      	ldr	r3, [r3, #0]
 8021c04:	4a0b      	ldr	r2, [pc, #44]	; (8021c34 <HAL_TIM_Base_MspInit+0x3c>)
 8021c06:	4293      	cmp	r3, r2
 8021c08:	d10d      	bne.n	8021c26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8021c0a:	2300      	movs	r3, #0
 8021c0c:	60fb      	str	r3, [r7, #12]
 8021c0e:	4b0a      	ldr	r3, [pc, #40]	; (8021c38 <HAL_TIM_Base_MspInit+0x40>)
 8021c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021c12:	4a09      	ldr	r2, [pc, #36]	; (8021c38 <HAL_TIM_Base_MspInit+0x40>)
 8021c14:	f043 0301 	orr.w	r3, r3, #1
 8021c18:	6453      	str	r3, [r2, #68]	; 0x44
 8021c1a:	4b07      	ldr	r3, [pc, #28]	; (8021c38 <HAL_TIM_Base_MspInit+0x40>)
 8021c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021c1e:	f003 0301 	and.w	r3, r3, #1
 8021c22:	60fb      	str	r3, [r7, #12]
 8021c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8021c26:	bf00      	nop
 8021c28:	3714      	adds	r7, #20
 8021c2a:	46bd      	mov	sp, r7
 8021c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c30:	4770      	bx	lr
 8021c32:	bf00      	nop
 8021c34:	40010000 	.word	0x40010000
 8021c38:	40023800 	.word	0x40023800

08021c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8021c3c:	b580      	push	{r7, lr}
 8021c3e:	b08c      	sub	sp, #48	; 0x30
 8021c40:	af00      	add	r7, sp, #0
 8021c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021c44:	f107 031c 	add.w	r3, r7, #28
 8021c48:	2200      	movs	r2, #0
 8021c4a:	601a      	str	r2, [r3, #0]
 8021c4c:	605a      	str	r2, [r3, #4]
 8021c4e:	609a      	str	r2, [r3, #8]
 8021c50:	60da      	str	r2, [r3, #12]
 8021c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8021c54:	687b      	ldr	r3, [r7, #4]
 8021c56:	681b      	ldr	r3, [r3, #0]
 8021c58:	4a46      	ldr	r2, [pc, #280]	; (8021d74 <HAL_UART_MspInit+0x138>)
 8021c5a:	4293      	cmp	r3, r2
 8021c5c:	d153      	bne.n	8021d06 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8021c5e:	2300      	movs	r3, #0
 8021c60:	61bb      	str	r3, [r7, #24]
 8021c62:	4b45      	ldr	r3, [pc, #276]	; (8021d78 <HAL_UART_MspInit+0x13c>)
 8021c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c66:	4a44      	ldr	r2, [pc, #272]	; (8021d78 <HAL_UART_MspInit+0x13c>)
 8021c68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8021c6e:	4b42      	ldr	r3, [pc, #264]	; (8021d78 <HAL_UART_MspInit+0x13c>)
 8021c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021c76:	61bb      	str	r3, [r7, #24]
 8021c78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021c7a:	2300      	movs	r3, #0
 8021c7c:	617b      	str	r3, [r7, #20]
 8021c7e:	4b3e      	ldr	r3, [pc, #248]	; (8021d78 <HAL_UART_MspInit+0x13c>)
 8021c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c82:	4a3d      	ldr	r2, [pc, #244]	; (8021d78 <HAL_UART_MspInit+0x13c>)
 8021c84:	f043 0304 	orr.w	r3, r3, #4
 8021c88:	6313      	str	r3, [r2, #48]	; 0x30
 8021c8a:	4b3b      	ldr	r3, [pc, #236]	; (8021d78 <HAL_UART_MspInit+0x13c>)
 8021c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c8e:	f003 0304 	and.w	r3, r3, #4
 8021c92:	617b      	str	r3, [r7, #20]
 8021c94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021c96:	2300      	movs	r3, #0
 8021c98:	613b      	str	r3, [r7, #16]
 8021c9a:	4b37      	ldr	r3, [pc, #220]	; (8021d78 <HAL_UART_MspInit+0x13c>)
 8021c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c9e:	4a36      	ldr	r2, [pc, #216]	; (8021d78 <HAL_UART_MspInit+0x13c>)
 8021ca0:	f043 0308 	orr.w	r3, r3, #8
 8021ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8021ca6:	4b34      	ldr	r3, [pc, #208]	; (8021d78 <HAL_UART_MspInit+0x13c>)
 8021ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021caa:	f003 0308 	and.w	r3, r3, #8
 8021cae:	613b      	str	r3, [r7, #16]
 8021cb0:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8021cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021cb8:	2302      	movs	r3, #2
 8021cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021cbc:	2300      	movs	r3, #0
 8021cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021cc0:	2303      	movs	r3, #3
 8021cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021cc4:	2308      	movs	r3, #8
 8021cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021cc8:	f107 031c 	add.w	r3, r7, #28
 8021ccc:	4619      	mov	r1, r3
 8021cce:	482b      	ldr	r0, [pc, #172]	; (8021d7c <HAL_UART_MspInit+0x140>)
 8021cd0:	f002 ff18 	bl	8024b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021cd4:	2304      	movs	r3, #4
 8021cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021cd8:	2302      	movs	r3, #2
 8021cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021cdc:	2300      	movs	r3, #0
 8021cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021ce0:	2303      	movs	r3, #3
 8021ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021ce4:	2308      	movs	r3, #8
 8021ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021ce8:	f107 031c 	add.w	r3, r7, #28
 8021cec:	4619      	mov	r1, r3
 8021cee:	4824      	ldr	r0, [pc, #144]	; (8021d80 <HAL_UART_MspInit+0x144>)
 8021cf0:	f002 ff08 	bl	8024b04 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8021cf4:	2200      	movs	r2, #0
 8021cf6:	2100      	movs	r1, #0
 8021cf8:	2035      	movs	r0, #53	; 0x35
 8021cfa:	f001 fdc6 	bl	802388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8021cfe:	2035      	movs	r0, #53	; 0x35
 8021d00:	f001 fddf 	bl	80238c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8021d04:	e031      	b.n	8021d6a <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 8021d06:	687b      	ldr	r3, [r7, #4]
 8021d08:	681b      	ldr	r3, [r3, #0]
 8021d0a:	4a1e      	ldr	r2, [pc, #120]	; (8021d84 <HAL_UART_MspInit+0x148>)
 8021d0c:	4293      	cmp	r3, r2
 8021d0e:	d12c      	bne.n	8021d6a <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8021d10:	2300      	movs	r3, #0
 8021d12:	60fb      	str	r3, [r7, #12]
 8021d14:	4b18      	ldr	r3, [pc, #96]	; (8021d78 <HAL_UART_MspInit+0x13c>)
 8021d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021d18:	4a17      	ldr	r2, [pc, #92]	; (8021d78 <HAL_UART_MspInit+0x13c>)
 8021d1a:	f043 0310 	orr.w	r3, r3, #16
 8021d1e:	6453      	str	r3, [r2, #68]	; 0x44
 8021d20:	4b15      	ldr	r3, [pc, #84]	; (8021d78 <HAL_UART_MspInit+0x13c>)
 8021d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021d24:	f003 0310 	and.w	r3, r3, #16
 8021d28:	60fb      	str	r3, [r7, #12]
 8021d2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021d2c:	2300      	movs	r3, #0
 8021d2e:	60bb      	str	r3, [r7, #8]
 8021d30:	4b11      	ldr	r3, [pc, #68]	; (8021d78 <HAL_UART_MspInit+0x13c>)
 8021d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d34:	4a10      	ldr	r2, [pc, #64]	; (8021d78 <HAL_UART_MspInit+0x13c>)
 8021d36:	f043 0301 	orr.w	r3, r3, #1
 8021d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8021d3c:	4b0e      	ldr	r3, [pc, #56]	; (8021d78 <HAL_UART_MspInit+0x13c>)
 8021d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d40:	f003 0301 	and.w	r3, r3, #1
 8021d44:	60bb      	str	r3, [r7, #8]
 8021d46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8021d48:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8021d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021d4e:	2302      	movs	r3, #2
 8021d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021d52:	2300      	movs	r3, #0
 8021d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021d56:	2303      	movs	r3, #3
 8021d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8021d5a:	2307      	movs	r3, #7
 8021d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021d5e:	f107 031c 	add.w	r3, r7, #28
 8021d62:	4619      	mov	r1, r3
 8021d64:	4808      	ldr	r0, [pc, #32]	; (8021d88 <HAL_UART_MspInit+0x14c>)
 8021d66:	f002 fecd 	bl	8024b04 <HAL_GPIO_Init>
}
 8021d6a:	bf00      	nop
 8021d6c:	3730      	adds	r7, #48	; 0x30
 8021d6e:	46bd      	mov	sp, r7
 8021d70:	bd80      	pop	{r7, pc}
 8021d72:	bf00      	nop
 8021d74:	40005000 	.word	0x40005000
 8021d78:	40023800 	.word	0x40023800
 8021d7c:	40020800 	.word	0x40020800
 8021d80:	40020c00 	.word	0x40020c00
 8021d84:	40011000 	.word	0x40011000
 8021d88:	40020000 	.word	0x40020000

08021d8c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8021d8c:	b580      	push	{r7, lr}
 8021d8e:	b086      	sub	sp, #24
 8021d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8021d92:	1d3b      	adds	r3, r7, #4
 8021d94:	2200      	movs	r2, #0
 8021d96:	601a      	str	r2, [r3, #0]
 8021d98:	605a      	str	r2, [r3, #4]
 8021d9a:	609a      	str	r2, [r3, #8]
 8021d9c:	60da      	str	r2, [r3, #12]
 8021d9e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8021da0:	4b3b      	ldr	r3, [pc, #236]	; (8021e90 <HAL_FMC_MspInit+0x104>)
 8021da2:	681b      	ldr	r3, [r3, #0]
 8021da4:	2b00      	cmp	r3, #0
 8021da6:	d16f      	bne.n	8021e88 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8021da8:	4b39      	ldr	r3, [pc, #228]	; (8021e90 <HAL_FMC_MspInit+0x104>)
 8021daa:	2201      	movs	r2, #1
 8021dac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8021dae:	2300      	movs	r3, #0
 8021db0:	603b      	str	r3, [r7, #0]
 8021db2:	4b38      	ldr	r3, [pc, #224]	; (8021e94 <HAL_FMC_MspInit+0x108>)
 8021db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021db6:	4a37      	ldr	r2, [pc, #220]	; (8021e94 <HAL_FMC_MspInit+0x108>)
 8021db8:	f043 0301 	orr.w	r3, r3, #1
 8021dbc:	6393      	str	r3, [r2, #56]	; 0x38
 8021dbe:	4b35      	ldr	r3, [pc, #212]	; (8021e94 <HAL_FMC_MspInit+0x108>)
 8021dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021dc2:	f003 0301 	and.w	r3, r3, #1
 8021dc6:	603b      	str	r3, [r7, #0]
 8021dc8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8021dca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8021dce:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021dd0:	2302      	movs	r3, #2
 8021dd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021dd4:	2300      	movs	r3, #0
 8021dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021dd8:	2303      	movs	r3, #3
 8021dda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021ddc:	230c      	movs	r3, #12
 8021dde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021de0:	1d3b      	adds	r3, r7, #4
 8021de2:	4619      	mov	r1, r3
 8021de4:	482c      	ldr	r0, [pc, #176]	; (8021e98 <HAL_FMC_MspInit+0x10c>)
 8021de6:	f002 fe8d 	bl	8024b04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8021dea:	2301      	movs	r3, #1
 8021dec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021dee:	2302      	movs	r3, #2
 8021df0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021df2:	2300      	movs	r3, #0
 8021df4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021df6:	2303      	movs	r3, #3
 8021df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021dfa:	230c      	movs	r3, #12
 8021dfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8021dfe:	1d3b      	adds	r3, r7, #4
 8021e00:	4619      	mov	r1, r3
 8021e02:	4826      	ldr	r0, [pc, #152]	; (8021e9c <HAL_FMC_MspInit+0x110>)
 8021e04:	f002 fe7e 	bl	8024b04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8021e08:	f248 1333 	movw	r3, #33075	; 0x8133
 8021e0c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e0e:	2302      	movs	r3, #2
 8021e10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e12:	2300      	movs	r3, #0
 8021e14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021e16:	2303      	movs	r3, #3
 8021e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021e1a:	230c      	movs	r3, #12
 8021e1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021e1e:	1d3b      	adds	r3, r7, #4
 8021e20:	4619      	mov	r1, r3
 8021e22:	481f      	ldr	r0, [pc, #124]	; (8021ea0 <HAL_FMC_MspInit+0x114>)
 8021e24:	f002 fe6e 	bl	8024b04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8021e28:	f64f 7383 	movw	r3, #65411	; 0xff83
 8021e2c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e2e:	2302      	movs	r3, #2
 8021e30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e32:	2300      	movs	r3, #0
 8021e34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021e36:	2303      	movs	r3, #3
 8021e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021e3a:	230c      	movs	r3, #12
 8021e3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021e3e:	1d3b      	adds	r3, r7, #4
 8021e40:	4619      	mov	r1, r3
 8021e42:	4818      	ldr	r0, [pc, #96]	; (8021ea4 <HAL_FMC_MspInit+0x118>)
 8021e44:	f002 fe5e 	bl	8024b04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8021e48:	f24c 7303 	movw	r3, #50947	; 0xc703
 8021e4c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e4e:	2302      	movs	r3, #2
 8021e50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e52:	2300      	movs	r3, #0
 8021e54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021e56:	2303      	movs	r3, #3
 8021e58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021e5a:	230c      	movs	r3, #12
 8021e5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021e5e:	1d3b      	adds	r3, r7, #4
 8021e60:	4619      	mov	r1, r3
 8021e62:	4811      	ldr	r0, [pc, #68]	; (8021ea8 <HAL_FMC_MspInit+0x11c>)
 8021e64:	f002 fe4e 	bl	8024b04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8021e68:	2360      	movs	r3, #96	; 0x60
 8021e6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e6c:	2302      	movs	r3, #2
 8021e6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e70:	2300      	movs	r3, #0
 8021e72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021e74:	2303      	movs	r3, #3
 8021e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021e78:	230c      	movs	r3, #12
 8021e7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021e7c:	1d3b      	adds	r3, r7, #4
 8021e7e:	4619      	mov	r1, r3
 8021e80:	480a      	ldr	r0, [pc, #40]	; (8021eac <HAL_FMC_MspInit+0x120>)
 8021e82:	f002 fe3f 	bl	8024b04 <HAL_GPIO_Init>
 8021e86:	e000      	b.n	8021e8a <HAL_FMC_MspInit+0xfe>
    return;
 8021e88:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8021e8a:	3718      	adds	r7, #24
 8021e8c:	46bd      	mov	sp, r7
 8021e8e:	bd80      	pop	{r7, pc}
 8021e90:	20000854 	.word	0x20000854
 8021e94:	40023800 	.word	0x40023800
 8021e98:	40021400 	.word	0x40021400
 8021e9c:	40020800 	.word	0x40020800
 8021ea0:	40021800 	.word	0x40021800
 8021ea4:	40021000 	.word	0x40021000
 8021ea8:	40020c00 	.word	0x40020c00
 8021eac:	40020400 	.word	0x40020400

08021eb0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8021eb0:	b580      	push	{r7, lr}
 8021eb2:	b082      	sub	sp, #8
 8021eb4:	af00      	add	r7, sp, #0
 8021eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8021eb8:	f7ff ff68 	bl	8021d8c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8021ebc:	bf00      	nop
 8021ebe:	3708      	adds	r7, #8
 8021ec0:	46bd      	mov	sp, r7
 8021ec2:	bd80      	pop	{r7, pc}

08021ec4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021ec4:	b580      	push	{r7, lr}
 8021ec6:	b08e      	sub	sp, #56	; 0x38
 8021ec8:	af00      	add	r7, sp, #0
 8021eca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8021ecc:	2300      	movs	r3, #0
 8021ece:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8021ed0:	2300      	movs	r3, #0
 8021ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8021ed4:	2300      	movs	r3, #0
 8021ed6:	60fb      	str	r3, [r7, #12]
 8021ed8:	4b33      	ldr	r3, [pc, #204]	; (8021fa8 <HAL_InitTick+0xe4>)
 8021eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021edc:	4a32      	ldr	r2, [pc, #200]	; (8021fa8 <HAL_InitTick+0xe4>)
 8021ede:	f043 0310 	orr.w	r3, r3, #16
 8021ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8021ee4:	4b30      	ldr	r3, [pc, #192]	; (8021fa8 <HAL_InitTick+0xe4>)
 8021ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ee8:	f003 0310 	and.w	r3, r3, #16
 8021eec:	60fb      	str	r3, [r7, #12]
 8021eee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8021ef0:	f107 0210 	add.w	r2, r7, #16
 8021ef4:	f107 0314 	add.w	r3, r7, #20
 8021ef8:	4611      	mov	r1, r2
 8021efa:	4618      	mov	r0, r3
 8021efc:	f005 ff5e 	bl	8027dbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8021f00:	6a3b      	ldr	r3, [r7, #32]
 8021f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8021f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f06:	2b00      	cmp	r3, #0
 8021f08:	d103      	bne.n	8021f12 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8021f0a:	f005 ff2f 	bl	8027d6c <HAL_RCC_GetPCLK1Freq>
 8021f0e:	6378      	str	r0, [r7, #52]	; 0x34
 8021f10:	e004      	b.n	8021f1c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8021f12:	f005 ff2b 	bl	8027d6c <HAL_RCC_GetPCLK1Freq>
 8021f16:	4603      	mov	r3, r0
 8021f18:	005b      	lsls	r3, r3, #1
 8021f1a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8021f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021f1e:	4a23      	ldr	r2, [pc, #140]	; (8021fac <HAL_InitTick+0xe8>)
 8021f20:	fba2 2303 	umull	r2, r3, r2, r3
 8021f24:	0c9b      	lsrs	r3, r3, #18
 8021f26:	3b01      	subs	r3, #1
 8021f28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8021f2a:	4b21      	ldr	r3, [pc, #132]	; (8021fb0 <HAL_InitTick+0xec>)
 8021f2c:	4a21      	ldr	r2, [pc, #132]	; (8021fb4 <HAL_InitTick+0xf0>)
 8021f2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8021f30:	4b1f      	ldr	r3, [pc, #124]	; (8021fb0 <HAL_InitTick+0xec>)
 8021f32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8021f36:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8021f38:	4a1d      	ldr	r2, [pc, #116]	; (8021fb0 <HAL_InitTick+0xec>)
 8021f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f3c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8021f3e:	4b1c      	ldr	r3, [pc, #112]	; (8021fb0 <HAL_InitTick+0xec>)
 8021f40:	2200      	movs	r2, #0
 8021f42:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021f44:	4b1a      	ldr	r3, [pc, #104]	; (8021fb0 <HAL_InitTick+0xec>)
 8021f46:	2200      	movs	r2, #0
 8021f48:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021f4a:	4b19      	ldr	r3, [pc, #100]	; (8021fb0 <HAL_InitTick+0xec>)
 8021f4c:	2200      	movs	r2, #0
 8021f4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8021f50:	4817      	ldr	r0, [pc, #92]	; (8021fb0 <HAL_InitTick+0xec>)
 8021f52:	f006 ff95 	bl	8028e80 <HAL_TIM_Base_Init>
 8021f56:	4603      	mov	r3, r0
 8021f58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8021f5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021f60:	2b00      	cmp	r3, #0
 8021f62:	d11b      	bne.n	8021f9c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8021f64:	4812      	ldr	r0, [pc, #72]	; (8021fb0 <HAL_InitTick+0xec>)
 8021f66:	f006 ffdb 	bl	8028f20 <HAL_TIM_Base_Start_IT>
 8021f6a:	4603      	mov	r3, r0
 8021f6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8021f70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021f74:	2b00      	cmp	r3, #0
 8021f76:	d111      	bne.n	8021f9c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8021f78:	2036      	movs	r0, #54	; 0x36
 8021f7a:	f001 fca2 	bl	80238c2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021f7e:	687b      	ldr	r3, [r7, #4]
 8021f80:	2b0f      	cmp	r3, #15
 8021f82:	d808      	bhi.n	8021f96 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8021f84:	2200      	movs	r2, #0
 8021f86:	6879      	ldr	r1, [r7, #4]
 8021f88:	2036      	movs	r0, #54	; 0x36
 8021f8a:	f001 fc7e 	bl	802388a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8021f8e:	4a0a      	ldr	r2, [pc, #40]	; (8021fb8 <HAL_InitTick+0xf4>)
 8021f90:	687b      	ldr	r3, [r7, #4]
 8021f92:	6013      	str	r3, [r2, #0]
 8021f94:	e002      	b.n	8021f9c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8021f96:	2301      	movs	r3, #1
 8021f98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8021f9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8021fa0:	4618      	mov	r0, r3
 8021fa2:	3738      	adds	r7, #56	; 0x38
 8021fa4:	46bd      	mov	sp, r7
 8021fa6:	bd80      	pop	{r7, pc}
 8021fa8:	40023800 	.word	0x40023800
 8021fac:	431bde83 	.word	0x431bde83
 8021fb0:	20000858 	.word	0x20000858
 8021fb4:	40001000 	.word	0x40001000
 8021fb8:	20000058 	.word	0x20000058

08021fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021fbc:	b480      	push	{r7}
 8021fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021fc0:	e7fe      	b.n	8021fc0 <NMI_Handler+0x4>

08021fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021fc2:	b480      	push	{r7}
 8021fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021fc6:	e7fe      	b.n	8021fc6 <HardFault_Handler+0x4>

08021fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021fc8:	b480      	push	{r7}
 8021fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021fcc:	e7fe      	b.n	8021fcc <MemManage_Handler+0x4>

08021fce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021fce:	b480      	push	{r7}
 8021fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021fd2:	e7fe      	b.n	8021fd2 <BusFault_Handler+0x4>

08021fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021fd4:	b480      	push	{r7}
 8021fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021fd8:	e7fe      	b.n	8021fd8 <UsageFault_Handler+0x4>

08021fda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021fda:	b480      	push	{r7}
 8021fdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8021fde:	bf00      	nop
 8021fe0:	46bd      	mov	sp, r7
 8021fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fe6:	4770      	bx	lr

08021fe8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021fe8:	b480      	push	{r7}
 8021fea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021fec:	bf00      	nop
 8021fee:	46bd      	mov	sp, r7
 8021ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ff4:	4770      	bx	lr

08021ff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021ff6:	b480      	push	{r7}
 8021ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8021ffa:	bf00      	nop
 8021ffc:	46bd      	mov	sp, r7
 8021ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022002:	4770      	bx	lr

08022004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8022004:	b480      	push	{r7}
 8022006:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8022008:	bf00      	nop
 802200a:	46bd      	mov	sp, r7
 802200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022010:	4770      	bx	lr

08022012 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8022012:	b580      	push	{r7, lr}
 8022014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8022016:	2001      	movs	r0, #1
 8022018:	f003 f846 	bl	80250a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 802201c:	bf00      	nop
 802201e:	bd80      	pop	{r7, pc}

08022020 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8022020:	b580      	push	{r7, lr}
 8022022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8022024:	4802      	ldr	r0, [pc, #8]	; (8022030 <UART5_IRQHandler+0x10>)
 8022026:	f007 fcbd 	bl	80299a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 802202a:	bf00      	nop
 802202c:	bd80      	pop	{r7, pc}
 802202e:	bf00      	nop
 8022030:	200002e4 	.word	0x200002e4

08022034 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8022034:	b580      	push	{r7, lr}
 8022036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8022038:	4802      	ldr	r0, [pc, #8]	; (8022044 <TIM6_DAC_IRQHandler+0x10>)
 802203a:	f006 ffe1 	bl	8029000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 802203e:	bf00      	nop
 8022040:	bd80      	pop	{r7, pc}
 8022042:	bf00      	nop
 8022044:	20000858 	.word	0x20000858

08022048 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8022048:	b580      	push	{r7, lr}
 802204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 802204c:	4802      	ldr	r0, [pc, #8]	; (8022058 <OTG_HS_IRQHandler+0x10>)
 802204e:	f003 faad 	bl	80255ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8022052:	bf00      	nop
 8022054:	bd80      	pop	{r7, pc}
 8022056:	bf00      	nop
 8022058:	20000ef8 	.word	0x20000ef8

0802205c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 802205c:	b580      	push	{r7, lr}
 802205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8022060:	4802      	ldr	r0, [pc, #8]	; (802206c <LTDC_IRQHandler+0x10>)
 8022062:	f004 fed3 	bl	8026e0c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8022066:	bf00      	nop
 8022068:	bd80      	pop	{r7, pc}
 802206a:	bf00      	nop
 802206c:	2000019c 	.word	0x2000019c

08022070 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8022070:	b580      	push	{r7, lr}
 8022072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8022074:	4802      	ldr	r0, [pc, #8]	; (8022080 <DMA2D_IRQHandler+0x10>)
 8022076:	f002 f800 	bl	802407a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 802207a:	bf00      	nop
 802207c:	bd80      	pop	{r7, pc}
 802207e:	bf00      	nop
 8022080:	20000108 	.word	0x20000108

08022084 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8022084:	b480      	push	{r7}
 8022086:	b083      	sub	sp, #12
 8022088:	af00      	add	r7, sp, #0
 802208a:	4603      	mov	r3, r0
 802208c:	80fb      	strh	r3, [r7, #6]
//
//	case B1_Pin: //Blue Button Interrupt
//		ota_update_request = true;
//
//	}
}
 802208e:	bf00      	nop
 8022090:	370c      	adds	r7, #12
 8022092:	46bd      	mov	sp, r7
 8022094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022098:	4770      	bx	lr

0802209a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 802209a:	b580      	push	{r7, lr}
 802209c:	b086      	sub	sp, #24
 802209e:	af00      	add	r7, sp, #0
 80220a0:	60f8      	str	r0, [r7, #12]
 80220a2:	60b9      	str	r1, [r7, #8]
 80220a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80220a6:	2300      	movs	r3, #0
 80220a8:	617b      	str	r3, [r7, #20]
 80220aa:	e00a      	b.n	80220c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80220ac:	f3af 8000 	nop.w
 80220b0:	4601      	mov	r1, r0
 80220b2:	68bb      	ldr	r3, [r7, #8]
 80220b4:	1c5a      	adds	r2, r3, #1
 80220b6:	60ba      	str	r2, [r7, #8]
 80220b8:	b2ca      	uxtb	r2, r1
 80220ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80220bc:	697b      	ldr	r3, [r7, #20]
 80220be:	3301      	adds	r3, #1
 80220c0:	617b      	str	r3, [r7, #20]
 80220c2:	697a      	ldr	r2, [r7, #20]
 80220c4:	687b      	ldr	r3, [r7, #4]
 80220c6:	429a      	cmp	r2, r3
 80220c8:	dbf0      	blt.n	80220ac <_read+0x12>
  }

  return len;
 80220ca:	687b      	ldr	r3, [r7, #4]
}
 80220cc:	4618      	mov	r0, r3
 80220ce:	3718      	adds	r7, #24
 80220d0:	46bd      	mov	sp, r7
 80220d2:	bd80      	pop	{r7, pc}

080220d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80220d4:	b580      	push	{r7, lr}
 80220d6:	b086      	sub	sp, #24
 80220d8:	af00      	add	r7, sp, #0
 80220da:	60f8      	str	r0, [r7, #12]
 80220dc:	60b9      	str	r1, [r7, #8]
 80220de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80220e0:	2300      	movs	r3, #0
 80220e2:	617b      	str	r3, [r7, #20]
 80220e4:	e009      	b.n	80220fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80220e6:	68bb      	ldr	r3, [r7, #8]
 80220e8:	1c5a      	adds	r2, r3, #1
 80220ea:	60ba      	str	r2, [r7, #8]
 80220ec:	781b      	ldrb	r3, [r3, #0]
 80220ee:	4618      	mov	r0, r3
 80220f0:	f7fe feba 	bl	8020e68 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80220f4:	697b      	ldr	r3, [r7, #20]
 80220f6:	3301      	adds	r3, #1
 80220f8:	617b      	str	r3, [r7, #20]
 80220fa:	697a      	ldr	r2, [r7, #20]
 80220fc:	687b      	ldr	r3, [r7, #4]
 80220fe:	429a      	cmp	r2, r3
 8022100:	dbf1      	blt.n	80220e6 <_write+0x12>
  }
  return len;
 8022102:	687b      	ldr	r3, [r7, #4]
}
 8022104:	4618      	mov	r0, r3
 8022106:	3718      	adds	r7, #24
 8022108:	46bd      	mov	sp, r7
 802210a:	bd80      	pop	{r7, pc}

0802210c <_close>:

int _close(int file)
{
 802210c:	b480      	push	{r7}
 802210e:	b083      	sub	sp, #12
 8022110:	af00      	add	r7, sp, #0
 8022112:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8022114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8022118:	4618      	mov	r0, r3
 802211a:	370c      	adds	r7, #12
 802211c:	46bd      	mov	sp, r7
 802211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022122:	4770      	bx	lr

08022124 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8022124:	b480      	push	{r7}
 8022126:	b083      	sub	sp, #12
 8022128:	af00      	add	r7, sp, #0
 802212a:	6078      	str	r0, [r7, #4]
 802212c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 802212e:	683b      	ldr	r3, [r7, #0]
 8022130:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8022134:	605a      	str	r2, [r3, #4]
  return 0;
 8022136:	2300      	movs	r3, #0
}
 8022138:	4618      	mov	r0, r3
 802213a:	370c      	adds	r7, #12
 802213c:	46bd      	mov	sp, r7
 802213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022142:	4770      	bx	lr

08022144 <_isatty>:

int _isatty(int file)
{
 8022144:	b480      	push	{r7}
 8022146:	b083      	sub	sp, #12
 8022148:	af00      	add	r7, sp, #0
 802214a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 802214c:	2301      	movs	r3, #1
}
 802214e:	4618      	mov	r0, r3
 8022150:	370c      	adds	r7, #12
 8022152:	46bd      	mov	sp, r7
 8022154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022158:	4770      	bx	lr

0802215a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802215a:	b480      	push	{r7}
 802215c:	b085      	sub	sp, #20
 802215e:	af00      	add	r7, sp, #0
 8022160:	60f8      	str	r0, [r7, #12]
 8022162:	60b9      	str	r1, [r7, #8]
 8022164:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8022166:	2300      	movs	r3, #0
}
 8022168:	4618      	mov	r0, r3
 802216a:	3714      	adds	r7, #20
 802216c:	46bd      	mov	sp, r7
 802216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022172:	4770      	bx	lr

08022174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8022174:	b580      	push	{r7, lr}
 8022176:	b086      	sub	sp, #24
 8022178:	af00      	add	r7, sp, #0
 802217a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802217c:	4a14      	ldr	r2, [pc, #80]	; (80221d0 <_sbrk+0x5c>)
 802217e:	4b15      	ldr	r3, [pc, #84]	; (80221d4 <_sbrk+0x60>)
 8022180:	1ad3      	subs	r3, r2, r3
 8022182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8022184:	697b      	ldr	r3, [r7, #20]
 8022186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8022188:	4b13      	ldr	r3, [pc, #76]	; (80221d8 <_sbrk+0x64>)
 802218a:	681b      	ldr	r3, [r3, #0]
 802218c:	2b00      	cmp	r3, #0
 802218e:	d102      	bne.n	8022196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8022190:	4b11      	ldr	r3, [pc, #68]	; (80221d8 <_sbrk+0x64>)
 8022192:	4a12      	ldr	r2, [pc, #72]	; (80221dc <_sbrk+0x68>)
 8022194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8022196:	4b10      	ldr	r3, [pc, #64]	; (80221d8 <_sbrk+0x64>)
 8022198:	681a      	ldr	r2, [r3, #0]
 802219a:	687b      	ldr	r3, [r7, #4]
 802219c:	4413      	add	r3, r2
 802219e:	693a      	ldr	r2, [r7, #16]
 80221a0:	429a      	cmp	r2, r3
 80221a2:	d207      	bcs.n	80221b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80221a4:	f00b ff62 	bl	802e06c <__errno>
 80221a8:	4603      	mov	r3, r0
 80221aa:	220c      	movs	r2, #12
 80221ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80221ae:	f04f 33ff 	mov.w	r3, #4294967295
 80221b2:	e009      	b.n	80221c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80221b4:	4b08      	ldr	r3, [pc, #32]	; (80221d8 <_sbrk+0x64>)
 80221b6:	681b      	ldr	r3, [r3, #0]
 80221b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80221ba:	4b07      	ldr	r3, [pc, #28]	; (80221d8 <_sbrk+0x64>)
 80221bc:	681a      	ldr	r2, [r3, #0]
 80221be:	687b      	ldr	r3, [r7, #4]
 80221c0:	4413      	add	r3, r2
 80221c2:	4a05      	ldr	r2, [pc, #20]	; (80221d8 <_sbrk+0x64>)
 80221c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80221c6:	68fb      	ldr	r3, [r7, #12]
}
 80221c8:	4618      	mov	r0, r3
 80221ca:	3718      	adds	r7, #24
 80221cc:	46bd      	mov	sp, r7
 80221ce:	bd80      	pop	{r7, pc}
 80221d0:	20030000 	.word	0x20030000
 80221d4:	00000400 	.word	0x00000400
 80221d8:	200008a0 	.word	0x200008a0
 80221dc:	20001210 	.word	0x20001210

080221e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80221e0:	b480      	push	{r7}
 80221e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80221e4:	4b07      	ldr	r3, [pc, #28]	; (8022204 <SystemInit+0x24>)
 80221e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80221ea:	4a06      	ldr	r2, [pc, #24]	; (8022204 <SystemInit+0x24>)
 80221ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80221f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80221f4:	4b03      	ldr	r3, [pc, #12]	; (8022204 <SystemInit+0x24>)
 80221f6:	4a04      	ldr	r2, [pc, #16]	; (8022208 <SystemInit+0x28>)
 80221f8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80221fa:	bf00      	nop
 80221fc:	46bd      	mov	sp, r7
 80221fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022202:	4770      	bx	lr
 8022204:	e000ed00 	.word	0xe000ed00
 8022208:	08020000 	.word	0x08020000

0802220c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 802220c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8022244 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8022210:	480d      	ldr	r0, [pc, #52]	; (8022248 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8022212:	490e      	ldr	r1, [pc, #56]	; (802224c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8022214:	4a0e      	ldr	r2, [pc, #56]	; (8022250 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8022216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8022218:	e002      	b.n	8022220 <LoopCopyDataInit>

0802221a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802221a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802221c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802221e:	3304      	adds	r3, #4

08022220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8022220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8022222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8022224:	d3f9      	bcc.n	802221a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8022226:	4a0b      	ldr	r2, [pc, #44]	; (8022254 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8022228:	4c0b      	ldr	r4, [pc, #44]	; (8022258 <LoopFillZerobss+0x26>)
  movs r3, #0
 802222a:	2300      	movs	r3, #0
  b LoopFillZerobss
 802222c:	e001      	b.n	8022232 <LoopFillZerobss>

0802222e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802222e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8022230:	3204      	adds	r2, #4

08022232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8022232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8022234:	d3fb      	bcc.n	802222e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8022236:	f7ff ffd3 	bl	80221e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802223a:	f00b ff1d 	bl	802e078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802223e:	f7fe f9a9 	bl	8020594 <main>
  bx  lr    
 8022242:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8022244:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8022248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 802224c:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8022250:	08031b2c 	.word	0x08031b2c
  ldr r2, =_sbss
 8022254:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8022258:	2000120c 	.word	0x2000120c

0802225c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802225c:	e7fe      	b.n	802225c <ADC_IRQHandler>

0802225e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 802225e:	b580      	push	{r7, lr}
 8022260:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8022262:	f000 fa5d 	bl	8022720 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8022266:	20ca      	movs	r0, #202	; 0xca
 8022268:	f000 f95d 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 802226c:	20c3      	movs	r0, #195	; 0xc3
 802226e:	f000 f967 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8022272:	2008      	movs	r0, #8
 8022274:	f000 f964 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8022278:	2050      	movs	r0, #80	; 0x50
 802227a:	f000 f961 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 802227e:	20cf      	movs	r0, #207	; 0xcf
 8022280:	f000 f951 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8022284:	2000      	movs	r0, #0
 8022286:	f000 f95b 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 802228a:	20c1      	movs	r0, #193	; 0xc1
 802228c:	f000 f958 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8022290:	2030      	movs	r0, #48	; 0x30
 8022292:	f000 f955 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8022296:	20ed      	movs	r0, #237	; 0xed
 8022298:	f000 f945 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 802229c:	2064      	movs	r0, #100	; 0x64
 802229e:	f000 f94f 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80222a2:	2003      	movs	r0, #3
 80222a4:	f000 f94c 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80222a8:	2012      	movs	r0, #18
 80222aa:	f000 f949 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80222ae:	2081      	movs	r0, #129	; 0x81
 80222b0:	f000 f946 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80222b4:	20e8      	movs	r0, #232	; 0xe8
 80222b6:	f000 f936 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80222ba:	2085      	movs	r0, #133	; 0x85
 80222bc:	f000 f940 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80222c0:	2000      	movs	r0, #0
 80222c2:	f000 f93d 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80222c6:	2078      	movs	r0, #120	; 0x78
 80222c8:	f000 f93a 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80222cc:	20cb      	movs	r0, #203	; 0xcb
 80222ce:	f000 f92a 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80222d2:	2039      	movs	r0, #57	; 0x39
 80222d4:	f000 f934 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80222d8:	202c      	movs	r0, #44	; 0x2c
 80222da:	f000 f931 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80222de:	2000      	movs	r0, #0
 80222e0:	f000 f92e 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80222e4:	2034      	movs	r0, #52	; 0x34
 80222e6:	f000 f92b 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80222ea:	2002      	movs	r0, #2
 80222ec:	f000 f928 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80222f0:	20f7      	movs	r0, #247	; 0xf7
 80222f2:	f000 f918 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80222f6:	2020      	movs	r0, #32
 80222f8:	f000 f922 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80222fc:	20ea      	movs	r0, #234	; 0xea
 80222fe:	f000 f912 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8022302:	2000      	movs	r0, #0
 8022304:	f000 f91c 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8022308:	2000      	movs	r0, #0
 802230a:	f000 f919 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 802230e:	20b1      	movs	r0, #177	; 0xb1
 8022310:	f000 f909 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8022314:	2000      	movs	r0, #0
 8022316:	f000 f913 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 802231a:	201b      	movs	r0, #27
 802231c:	f000 f910 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8022320:	20b6      	movs	r0, #182	; 0xb6
 8022322:	f000 f900 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8022326:	200a      	movs	r0, #10
 8022328:	f000 f90a 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 802232c:	20a2      	movs	r0, #162	; 0xa2
 802232e:	f000 f907 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8022332:	20c0      	movs	r0, #192	; 0xc0
 8022334:	f000 f8f7 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8022338:	2010      	movs	r0, #16
 802233a:	f000 f901 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 802233e:	20c1      	movs	r0, #193	; 0xc1
 8022340:	f000 f8f1 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8022344:	2010      	movs	r0, #16
 8022346:	f000 f8fb 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 802234a:	20c5      	movs	r0, #197	; 0xc5
 802234c:	f000 f8eb 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8022350:	2045      	movs	r0, #69	; 0x45
 8022352:	f000 f8f5 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8022356:	2015      	movs	r0, #21
 8022358:	f000 f8f2 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 802235c:	20c7      	movs	r0, #199	; 0xc7
 802235e:	f000 f8e2 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8022362:	2090      	movs	r0, #144	; 0x90
 8022364:	f000 f8ec 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8022368:	2036      	movs	r0, #54	; 0x36
 802236a:	f000 f8dc 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 802236e:	20c8      	movs	r0, #200	; 0xc8
 8022370:	f000 f8e6 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8022374:	20f2      	movs	r0, #242	; 0xf2
 8022376:	f000 f8d6 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 802237a:	2000      	movs	r0, #0
 802237c:	f000 f8e0 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8022380:	20b0      	movs	r0, #176	; 0xb0
 8022382:	f000 f8d0 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8022386:	20c2      	movs	r0, #194	; 0xc2
 8022388:	f000 f8da 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 802238c:	20b6      	movs	r0, #182	; 0xb6
 802238e:	f000 f8ca 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8022392:	200a      	movs	r0, #10
 8022394:	f000 f8d4 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8022398:	20a7      	movs	r0, #167	; 0xa7
 802239a:	f000 f8d1 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 802239e:	2027      	movs	r0, #39	; 0x27
 80223a0:	f000 f8ce 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80223a4:	2004      	movs	r0, #4
 80223a6:	f000 f8cb 	bl	8022540 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80223aa:	202a      	movs	r0, #42	; 0x2a
 80223ac:	f000 f8bb 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80223b0:	2000      	movs	r0, #0
 80223b2:	f000 f8c5 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80223b6:	2000      	movs	r0, #0
 80223b8:	f000 f8c2 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80223bc:	2000      	movs	r0, #0
 80223be:	f000 f8bf 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80223c2:	20ef      	movs	r0, #239	; 0xef
 80223c4:	f000 f8bc 	bl	8022540 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80223c8:	202b      	movs	r0, #43	; 0x2b
 80223ca:	f000 f8ac 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80223ce:	2000      	movs	r0, #0
 80223d0:	f000 f8b6 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80223d4:	2000      	movs	r0, #0
 80223d6:	f000 f8b3 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80223da:	2001      	movs	r0, #1
 80223dc:	f000 f8b0 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80223e0:	203f      	movs	r0, #63	; 0x3f
 80223e2:	f000 f8ad 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80223e6:	20f6      	movs	r0, #246	; 0xf6
 80223e8:	f000 f89d 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80223ec:	2001      	movs	r0, #1
 80223ee:	f000 f8a7 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80223f2:	2000      	movs	r0, #0
 80223f4:	f000 f8a4 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80223f8:	2006      	movs	r0, #6
 80223fa:	f000 f8a1 	bl	8022540 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80223fe:	202c      	movs	r0, #44	; 0x2c
 8022400:	f000 f891 	bl	8022526 <ili9341_WriteReg>
  LCD_Delay(200);
 8022404:	20c8      	movs	r0, #200	; 0xc8
 8022406:	f000 fa79 	bl	80228fc <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 802240a:	2026      	movs	r0, #38	; 0x26
 802240c:	f000 f88b 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8022410:	2001      	movs	r0, #1
 8022412:	f000 f895 	bl	8022540 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8022416:	20e0      	movs	r0, #224	; 0xe0
 8022418:	f000 f885 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 802241c:	200f      	movs	r0, #15
 802241e:	f000 f88f 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8022422:	2029      	movs	r0, #41	; 0x29
 8022424:	f000 f88c 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8022428:	2024      	movs	r0, #36	; 0x24
 802242a:	f000 f889 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 802242e:	200c      	movs	r0, #12
 8022430:	f000 f886 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8022434:	200e      	movs	r0, #14
 8022436:	f000 f883 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 802243a:	2009      	movs	r0, #9
 802243c:	f000 f880 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8022440:	204e      	movs	r0, #78	; 0x4e
 8022442:	f000 f87d 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8022446:	2078      	movs	r0, #120	; 0x78
 8022448:	f000 f87a 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 802244c:	203c      	movs	r0, #60	; 0x3c
 802244e:	f000 f877 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8022452:	2009      	movs	r0, #9
 8022454:	f000 f874 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8022458:	2013      	movs	r0, #19
 802245a:	f000 f871 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 802245e:	2005      	movs	r0, #5
 8022460:	f000 f86e 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8022464:	2017      	movs	r0, #23
 8022466:	f000 f86b 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 802246a:	2011      	movs	r0, #17
 802246c:	f000 f868 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8022470:	2000      	movs	r0, #0
 8022472:	f000 f865 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8022476:	20e1      	movs	r0, #225	; 0xe1
 8022478:	f000 f855 	bl	8022526 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 802247c:	2000      	movs	r0, #0
 802247e:	f000 f85f 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8022482:	2016      	movs	r0, #22
 8022484:	f000 f85c 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8022488:	201b      	movs	r0, #27
 802248a:	f000 f859 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 802248e:	2004      	movs	r0, #4
 8022490:	f000 f856 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8022494:	2011      	movs	r0, #17
 8022496:	f000 f853 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 802249a:	2007      	movs	r0, #7
 802249c:	f000 f850 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80224a0:	2031      	movs	r0, #49	; 0x31
 80224a2:	f000 f84d 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80224a6:	2033      	movs	r0, #51	; 0x33
 80224a8:	f000 f84a 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80224ac:	2042      	movs	r0, #66	; 0x42
 80224ae:	f000 f847 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80224b2:	2005      	movs	r0, #5
 80224b4:	f000 f844 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80224b8:	200c      	movs	r0, #12
 80224ba:	f000 f841 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80224be:	200a      	movs	r0, #10
 80224c0:	f000 f83e 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80224c4:	2028      	movs	r0, #40	; 0x28
 80224c6:	f000 f83b 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80224ca:	202f      	movs	r0, #47	; 0x2f
 80224cc:	f000 f838 	bl	8022540 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80224d0:	200f      	movs	r0, #15
 80224d2:	f000 f835 	bl	8022540 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80224d6:	2011      	movs	r0, #17
 80224d8:	f000 f825 	bl	8022526 <ili9341_WriteReg>
  LCD_Delay(200);
 80224dc:	20c8      	movs	r0, #200	; 0xc8
 80224de:	f000 fa0d 	bl	80228fc <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80224e2:	2029      	movs	r0, #41	; 0x29
 80224e4:	f000 f81f 	bl	8022526 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80224e8:	202c      	movs	r0, #44	; 0x2c
 80224ea:	f000 f81c 	bl	8022526 <ili9341_WriteReg>
}
 80224ee:	bf00      	nop
 80224f0:	bd80      	pop	{r7, pc}

080224f2 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80224f2:	b580      	push	{r7, lr}
 80224f4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80224f6:	f000 f913 	bl	8022720 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80224fa:	2103      	movs	r1, #3
 80224fc:	20d3      	movs	r0, #211	; 0xd3
 80224fe:	f000 f82c 	bl	802255a <ili9341_ReadData>
 8022502:	4603      	mov	r3, r0
 8022504:	b29b      	uxth	r3, r3
}
 8022506:	4618      	mov	r0, r3
 8022508:	bd80      	pop	{r7, pc}

0802250a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 802250a:	b580      	push	{r7, lr}
 802250c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 802250e:	2029      	movs	r0, #41	; 0x29
 8022510:	f000 f809 	bl	8022526 <ili9341_WriteReg>
}
 8022514:	bf00      	nop
 8022516:	bd80      	pop	{r7, pc}

08022518 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8022518:	b580      	push	{r7, lr}
 802251a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 802251c:	2028      	movs	r0, #40	; 0x28
 802251e:	f000 f802 	bl	8022526 <ili9341_WriteReg>
}
 8022522:	bf00      	nop
 8022524:	bd80      	pop	{r7, pc}

08022526 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8022526:	b580      	push	{r7, lr}
 8022528:	b082      	sub	sp, #8
 802252a:	af00      	add	r7, sp, #0
 802252c:	4603      	mov	r3, r0
 802252e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8022530:	79fb      	ldrb	r3, [r7, #7]
 8022532:	4618      	mov	r0, r3
 8022534:	f000 f98e 	bl	8022854 <LCD_IO_WriteReg>
}
 8022538:	bf00      	nop
 802253a:	3708      	adds	r7, #8
 802253c:	46bd      	mov	sp, r7
 802253e:	bd80      	pop	{r7, pc}

08022540 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8022540:	b580      	push	{r7, lr}
 8022542:	b082      	sub	sp, #8
 8022544:	af00      	add	r7, sp, #0
 8022546:	4603      	mov	r3, r0
 8022548:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 802254a:	88fb      	ldrh	r3, [r7, #6]
 802254c:	4618      	mov	r0, r3
 802254e:	f000 f95f 	bl	8022810 <LCD_IO_WriteData>
}
 8022552:	bf00      	nop
 8022554:	3708      	adds	r7, #8
 8022556:	46bd      	mov	sp, r7
 8022558:	bd80      	pop	{r7, pc}

0802255a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 802255a:	b580      	push	{r7, lr}
 802255c:	b082      	sub	sp, #8
 802255e:	af00      	add	r7, sp, #0
 8022560:	4603      	mov	r3, r0
 8022562:	460a      	mov	r2, r1
 8022564:	80fb      	strh	r3, [r7, #6]
 8022566:	4613      	mov	r3, r2
 8022568:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 802256a:	797a      	ldrb	r2, [r7, #5]
 802256c:	88fb      	ldrh	r3, [r7, #6]
 802256e:	4611      	mov	r1, r2
 8022570:	4618      	mov	r0, r3
 8022572:	f000 f991 	bl	8022898 <LCD_IO_ReadData>
 8022576:	4603      	mov	r3, r0
}
 8022578:	4618      	mov	r0, r3
 802257a:	3708      	adds	r7, #8
 802257c:	46bd      	mov	sp, r7
 802257e:	bd80      	pop	{r7, pc}

08022580 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8022580:	b480      	push	{r7}
 8022582:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8022584:	23f0      	movs	r3, #240	; 0xf0
}
 8022586:	4618      	mov	r0, r3
 8022588:	46bd      	mov	sp, r7
 802258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802258e:	4770      	bx	lr

08022590 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8022590:	b480      	push	{r7}
 8022592:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8022594:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8022598:	4618      	mov	r0, r3
 802259a:	46bd      	mov	sp, r7
 802259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225a0:	4770      	bx	lr
	...

080225a4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80225a4:	b580      	push	{r7, lr}
 80225a6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80225a8:	4819      	ldr	r0, [pc, #100]	; (8022610 <SPIx_Init+0x6c>)
 80225aa:	f006 fb2a 	bl	8028c02 <HAL_SPI_GetState>
 80225ae:	4603      	mov	r3, r0
 80225b0:	2b00      	cmp	r3, #0
 80225b2:	d12b      	bne.n	802260c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80225b4:	4b16      	ldr	r3, [pc, #88]	; (8022610 <SPIx_Init+0x6c>)
 80225b6:	4a17      	ldr	r2, [pc, #92]	; (8022614 <SPIx_Init+0x70>)
 80225b8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80225ba:	4b15      	ldr	r3, [pc, #84]	; (8022610 <SPIx_Init+0x6c>)
 80225bc:	2218      	movs	r2, #24
 80225be:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80225c0:	4b13      	ldr	r3, [pc, #76]	; (8022610 <SPIx_Init+0x6c>)
 80225c2:	2200      	movs	r2, #0
 80225c4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80225c6:	4b12      	ldr	r3, [pc, #72]	; (8022610 <SPIx_Init+0x6c>)
 80225c8:	2200      	movs	r2, #0
 80225ca:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80225cc:	4b10      	ldr	r3, [pc, #64]	; (8022610 <SPIx_Init+0x6c>)
 80225ce:	2200      	movs	r2, #0
 80225d0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80225d2:	4b0f      	ldr	r3, [pc, #60]	; (8022610 <SPIx_Init+0x6c>)
 80225d4:	2200      	movs	r2, #0
 80225d6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80225d8:	4b0d      	ldr	r3, [pc, #52]	; (8022610 <SPIx_Init+0x6c>)
 80225da:	2207      	movs	r2, #7
 80225dc:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80225de:	4b0c      	ldr	r3, [pc, #48]	; (8022610 <SPIx_Init+0x6c>)
 80225e0:	2200      	movs	r2, #0
 80225e2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80225e4:	4b0a      	ldr	r3, [pc, #40]	; (8022610 <SPIx_Init+0x6c>)
 80225e6:	2200      	movs	r2, #0
 80225e8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80225ea:	4b09      	ldr	r3, [pc, #36]	; (8022610 <SPIx_Init+0x6c>)
 80225ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80225f0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80225f2:	4b07      	ldr	r3, [pc, #28]	; (8022610 <SPIx_Init+0x6c>)
 80225f4:	2200      	movs	r2, #0
 80225f6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80225f8:	4b05      	ldr	r3, [pc, #20]	; (8022610 <SPIx_Init+0x6c>)
 80225fa:	f44f 7282 	mov.w	r2, #260	; 0x104
 80225fe:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8022600:	4803      	ldr	r0, [pc, #12]	; (8022610 <SPIx_Init+0x6c>)
 8022602:	f000 f853 	bl	80226ac <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8022606:	4802      	ldr	r0, [pc, #8]	; (8022610 <SPIx_Init+0x6c>)
 8022608:	f005 fe5b 	bl	80282c2 <HAL_SPI_Init>
  } 
}
 802260c:	bf00      	nop
 802260e:	bd80      	pop	{r7, pc}
 8022610:	200008a4 	.word	0x200008a4
 8022614:	40015000 	.word	0x40015000

08022618 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8022618:	b580      	push	{r7, lr}
 802261a:	b084      	sub	sp, #16
 802261c:	af00      	add	r7, sp, #0
 802261e:	4603      	mov	r3, r0
 8022620:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8022622:	2300      	movs	r3, #0
 8022624:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8022626:	79fb      	ldrb	r3, [r7, #7]
 8022628:	b29a      	uxth	r2, r3
 802262a:	4b09      	ldr	r3, [pc, #36]	; (8022650 <SPIx_Read+0x38>)
 802262c:	681b      	ldr	r3, [r3, #0]
 802262e:	f107 0108 	add.w	r1, r7, #8
 8022632:	4808      	ldr	r0, [pc, #32]	; (8022654 <SPIx_Read+0x3c>)
 8022634:	f006 f832 	bl	802869c <HAL_SPI_Receive>
 8022638:	4603      	mov	r3, r0
 802263a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 802263c:	7bfb      	ldrb	r3, [r7, #15]
 802263e:	2b00      	cmp	r3, #0
 8022640:	d001      	beq.n	8022646 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8022642:	f000 f827 	bl	8022694 <SPIx_Error>
  }
  
  return readvalue;
 8022646:	68bb      	ldr	r3, [r7, #8]
}
 8022648:	4618      	mov	r0, r3
 802264a:	3710      	adds	r7, #16
 802264c:	46bd      	mov	sp, r7
 802264e:	bd80      	pop	{r7, pc}
 8022650:	20000040 	.word	0x20000040
 8022654:	200008a4 	.word	0x200008a4

08022658 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8022658:	b580      	push	{r7, lr}
 802265a:	b084      	sub	sp, #16
 802265c:	af00      	add	r7, sp, #0
 802265e:	4603      	mov	r3, r0
 8022660:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8022662:	2300      	movs	r3, #0
 8022664:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8022666:	4b09      	ldr	r3, [pc, #36]	; (802268c <SPIx_Write+0x34>)
 8022668:	681b      	ldr	r3, [r3, #0]
 802266a:	1db9      	adds	r1, r7, #6
 802266c:	2201      	movs	r2, #1
 802266e:	4808      	ldr	r0, [pc, #32]	; (8022690 <SPIx_Write+0x38>)
 8022670:	f005 fed8 	bl	8028424 <HAL_SPI_Transmit>
 8022674:	4603      	mov	r3, r0
 8022676:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8022678:	7bfb      	ldrb	r3, [r7, #15]
 802267a:	2b00      	cmp	r3, #0
 802267c:	d001      	beq.n	8022682 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 802267e:	f000 f809 	bl	8022694 <SPIx_Error>
  }
}
 8022682:	bf00      	nop
 8022684:	3710      	adds	r7, #16
 8022686:	46bd      	mov	sp, r7
 8022688:	bd80      	pop	{r7, pc}
 802268a:	bf00      	nop
 802268c:	20000040 	.word	0x20000040
 8022690:	200008a4 	.word	0x200008a4

08022694 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8022694:	b580      	push	{r7, lr}
 8022696:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8022698:	4803      	ldr	r0, [pc, #12]	; (80226a8 <SPIx_Error+0x14>)
 802269a:	f005 fe9b 	bl	80283d4 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 802269e:	f7ff ff81 	bl	80225a4 <SPIx_Init>
}
 80226a2:	bf00      	nop
 80226a4:	bd80      	pop	{r7, pc}
 80226a6:	bf00      	nop
 80226a8:	200008a4 	.word	0x200008a4

080226ac <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80226ac:	b580      	push	{r7, lr}
 80226ae:	b08a      	sub	sp, #40	; 0x28
 80226b0:	af00      	add	r7, sp, #0
 80226b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80226b4:	2300      	movs	r3, #0
 80226b6:	613b      	str	r3, [r7, #16]
 80226b8:	4b17      	ldr	r3, [pc, #92]	; (8022718 <SPIx_MspInit+0x6c>)
 80226ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80226bc:	4a16      	ldr	r2, [pc, #88]	; (8022718 <SPIx_MspInit+0x6c>)
 80226be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80226c2:	6453      	str	r3, [r2, #68]	; 0x44
 80226c4:	4b14      	ldr	r3, [pc, #80]	; (8022718 <SPIx_MspInit+0x6c>)
 80226c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80226c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80226cc:	613b      	str	r3, [r7, #16]
 80226ce:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80226d0:	2300      	movs	r3, #0
 80226d2:	60fb      	str	r3, [r7, #12]
 80226d4:	4b10      	ldr	r3, [pc, #64]	; (8022718 <SPIx_MspInit+0x6c>)
 80226d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226d8:	4a0f      	ldr	r2, [pc, #60]	; (8022718 <SPIx_MspInit+0x6c>)
 80226da:	f043 0320 	orr.w	r3, r3, #32
 80226de:	6313      	str	r3, [r2, #48]	; 0x30
 80226e0:	4b0d      	ldr	r3, [pc, #52]	; (8022718 <SPIx_MspInit+0x6c>)
 80226e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226e4:	f003 0320 	and.w	r3, r3, #32
 80226e8:	60fb      	str	r3, [r7, #12]
 80226ea:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80226ec:	f44f 7360 	mov.w	r3, #896	; 0x380
 80226f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80226f2:	2302      	movs	r3, #2
 80226f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80226f6:	2302      	movs	r3, #2
 80226f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80226fa:	2301      	movs	r3, #1
 80226fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80226fe:	2305      	movs	r3, #5
 8022700:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8022702:	f107 0314 	add.w	r3, r7, #20
 8022706:	4619      	mov	r1, r3
 8022708:	4804      	ldr	r0, [pc, #16]	; (802271c <SPIx_MspInit+0x70>)
 802270a:	f002 f9fb 	bl	8024b04 <HAL_GPIO_Init>
}
 802270e:	bf00      	nop
 8022710:	3728      	adds	r7, #40	; 0x28
 8022712:	46bd      	mov	sp, r7
 8022714:	bd80      	pop	{r7, pc}
 8022716:	bf00      	nop
 8022718:	40023800 	.word	0x40023800
 802271c:	40021400 	.word	0x40021400

08022720 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8022720:	b580      	push	{r7, lr}
 8022722:	b088      	sub	sp, #32
 8022724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8022726:	4b36      	ldr	r3, [pc, #216]	; (8022800 <LCD_IO_Init+0xe0>)
 8022728:	781b      	ldrb	r3, [r3, #0]
 802272a:	2b00      	cmp	r3, #0
 802272c:	d164      	bne.n	80227f8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 802272e:	4b34      	ldr	r3, [pc, #208]	; (8022800 <LCD_IO_Init+0xe0>)
 8022730:	2201      	movs	r2, #1
 8022732:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8022734:	2300      	movs	r3, #0
 8022736:	60bb      	str	r3, [r7, #8]
 8022738:	4b32      	ldr	r3, [pc, #200]	; (8022804 <LCD_IO_Init+0xe4>)
 802273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802273c:	4a31      	ldr	r2, [pc, #196]	; (8022804 <LCD_IO_Init+0xe4>)
 802273e:	f043 0308 	orr.w	r3, r3, #8
 8022742:	6313      	str	r3, [r2, #48]	; 0x30
 8022744:	4b2f      	ldr	r3, [pc, #188]	; (8022804 <LCD_IO_Init+0xe4>)
 8022746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022748:	f003 0308 	and.w	r3, r3, #8
 802274c:	60bb      	str	r3, [r7, #8]
 802274e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8022750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8022754:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8022756:	2301      	movs	r3, #1
 8022758:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 802275a:	2300      	movs	r3, #0
 802275c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 802275e:	2302      	movs	r3, #2
 8022760:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8022762:	f107 030c 	add.w	r3, r7, #12
 8022766:	4619      	mov	r1, r3
 8022768:	4827      	ldr	r0, [pc, #156]	; (8022808 <LCD_IO_Init+0xe8>)
 802276a:	f002 f9cb 	bl	8024b04 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 802276e:	2300      	movs	r3, #0
 8022770:	607b      	str	r3, [r7, #4]
 8022772:	4b24      	ldr	r3, [pc, #144]	; (8022804 <LCD_IO_Init+0xe4>)
 8022774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022776:	4a23      	ldr	r2, [pc, #140]	; (8022804 <LCD_IO_Init+0xe4>)
 8022778:	f043 0308 	orr.w	r3, r3, #8
 802277c:	6313      	str	r3, [r2, #48]	; 0x30
 802277e:	4b21      	ldr	r3, [pc, #132]	; (8022804 <LCD_IO_Init+0xe4>)
 8022780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022782:	f003 0308 	and.w	r3, r3, #8
 8022786:	607b      	str	r3, [r7, #4]
 8022788:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 802278a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802278e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8022790:	2301      	movs	r3, #1
 8022792:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8022794:	2300      	movs	r3, #0
 8022796:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8022798:	2302      	movs	r3, #2
 802279a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 802279c:	f107 030c 	add.w	r3, r7, #12
 80227a0:	4619      	mov	r1, r3
 80227a2:	4819      	ldr	r0, [pc, #100]	; (8022808 <LCD_IO_Init+0xe8>)
 80227a4:	f002 f9ae 	bl	8024b04 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80227a8:	2300      	movs	r3, #0
 80227aa:	603b      	str	r3, [r7, #0]
 80227ac:	4b15      	ldr	r3, [pc, #84]	; (8022804 <LCD_IO_Init+0xe4>)
 80227ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80227b0:	4a14      	ldr	r2, [pc, #80]	; (8022804 <LCD_IO_Init+0xe4>)
 80227b2:	f043 0304 	orr.w	r3, r3, #4
 80227b6:	6313      	str	r3, [r2, #48]	; 0x30
 80227b8:	4b12      	ldr	r3, [pc, #72]	; (8022804 <LCD_IO_Init+0xe4>)
 80227ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80227bc:	f003 0304 	and.w	r3, r3, #4
 80227c0:	603b      	str	r3, [r7, #0]
 80227c2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80227c4:	2304      	movs	r3, #4
 80227c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80227c8:	2301      	movs	r3, #1
 80227ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80227cc:	2300      	movs	r3, #0
 80227ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80227d0:	2302      	movs	r3, #2
 80227d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80227d4:	f107 030c 	add.w	r3, r7, #12
 80227d8:	4619      	mov	r1, r3
 80227da:	480c      	ldr	r0, [pc, #48]	; (802280c <LCD_IO_Init+0xec>)
 80227dc:	f002 f992 	bl	8024b04 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80227e0:	2200      	movs	r2, #0
 80227e2:	2104      	movs	r1, #4
 80227e4:	4809      	ldr	r0, [pc, #36]	; (802280c <LCD_IO_Init+0xec>)
 80227e6:	f002 fc45 	bl	8025074 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80227ea:	2201      	movs	r2, #1
 80227ec:	2104      	movs	r1, #4
 80227ee:	4807      	ldr	r0, [pc, #28]	; (802280c <LCD_IO_Init+0xec>)
 80227f0:	f002 fc40 	bl	8025074 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80227f4:	f7ff fed6 	bl	80225a4 <SPIx_Init>
  }
}
 80227f8:	bf00      	nop
 80227fa:	3720      	adds	r7, #32
 80227fc:	46bd      	mov	sp, r7
 80227fe:	bd80      	pop	{r7, pc}
 8022800:	200008fc 	.word	0x200008fc
 8022804:	40023800 	.word	0x40023800
 8022808:	40020c00 	.word	0x40020c00
 802280c:	40020800 	.word	0x40020800

08022810 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8022810:	b580      	push	{r7, lr}
 8022812:	b082      	sub	sp, #8
 8022814:	af00      	add	r7, sp, #0
 8022816:	4603      	mov	r3, r0
 8022818:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 802281a:	2201      	movs	r2, #1
 802281c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022820:	480a      	ldr	r0, [pc, #40]	; (802284c <LCD_IO_WriteData+0x3c>)
 8022822:	f002 fc27 	bl	8025074 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8022826:	2200      	movs	r2, #0
 8022828:	2104      	movs	r1, #4
 802282a:	4809      	ldr	r0, [pc, #36]	; (8022850 <LCD_IO_WriteData+0x40>)
 802282c:	f002 fc22 	bl	8025074 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8022830:	88fb      	ldrh	r3, [r7, #6]
 8022832:	4618      	mov	r0, r3
 8022834:	f7ff ff10 	bl	8022658 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8022838:	2201      	movs	r2, #1
 802283a:	2104      	movs	r1, #4
 802283c:	4804      	ldr	r0, [pc, #16]	; (8022850 <LCD_IO_WriteData+0x40>)
 802283e:	f002 fc19 	bl	8025074 <HAL_GPIO_WritePin>
}
 8022842:	bf00      	nop
 8022844:	3708      	adds	r7, #8
 8022846:	46bd      	mov	sp, r7
 8022848:	bd80      	pop	{r7, pc}
 802284a:	bf00      	nop
 802284c:	40020c00 	.word	0x40020c00
 8022850:	40020800 	.word	0x40020800

08022854 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8022854:	b580      	push	{r7, lr}
 8022856:	b082      	sub	sp, #8
 8022858:	af00      	add	r7, sp, #0
 802285a:	4603      	mov	r3, r0
 802285c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 802285e:	2200      	movs	r2, #0
 8022860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022864:	480a      	ldr	r0, [pc, #40]	; (8022890 <LCD_IO_WriteReg+0x3c>)
 8022866:	f002 fc05 	bl	8025074 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 802286a:	2200      	movs	r2, #0
 802286c:	2104      	movs	r1, #4
 802286e:	4809      	ldr	r0, [pc, #36]	; (8022894 <LCD_IO_WriteReg+0x40>)
 8022870:	f002 fc00 	bl	8025074 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8022874:	79fb      	ldrb	r3, [r7, #7]
 8022876:	b29b      	uxth	r3, r3
 8022878:	4618      	mov	r0, r3
 802287a:	f7ff feed 	bl	8022658 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 802287e:	2201      	movs	r2, #1
 8022880:	2104      	movs	r1, #4
 8022882:	4804      	ldr	r0, [pc, #16]	; (8022894 <LCD_IO_WriteReg+0x40>)
 8022884:	f002 fbf6 	bl	8025074 <HAL_GPIO_WritePin>
}
 8022888:	bf00      	nop
 802288a:	3708      	adds	r7, #8
 802288c:	46bd      	mov	sp, r7
 802288e:	bd80      	pop	{r7, pc}
 8022890:	40020c00 	.word	0x40020c00
 8022894:	40020800 	.word	0x40020800

08022898 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8022898:	b580      	push	{r7, lr}
 802289a:	b084      	sub	sp, #16
 802289c:	af00      	add	r7, sp, #0
 802289e:	4603      	mov	r3, r0
 80228a0:	460a      	mov	r2, r1
 80228a2:	80fb      	strh	r3, [r7, #6]
 80228a4:	4613      	mov	r3, r2
 80228a6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80228a8:	2300      	movs	r3, #0
 80228aa:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80228ac:	2200      	movs	r2, #0
 80228ae:	2104      	movs	r1, #4
 80228b0:	4810      	ldr	r0, [pc, #64]	; (80228f4 <LCD_IO_ReadData+0x5c>)
 80228b2:	f002 fbdf 	bl	8025074 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80228b6:	2200      	movs	r2, #0
 80228b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80228bc:	480e      	ldr	r0, [pc, #56]	; (80228f8 <LCD_IO_ReadData+0x60>)
 80228be:	f002 fbd9 	bl	8025074 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80228c2:	88fb      	ldrh	r3, [r7, #6]
 80228c4:	4618      	mov	r0, r3
 80228c6:	f7ff fec7 	bl	8022658 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80228ca:	797b      	ldrb	r3, [r7, #5]
 80228cc:	4618      	mov	r0, r3
 80228ce:	f7ff fea3 	bl	8022618 <SPIx_Read>
 80228d2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80228d4:	2201      	movs	r2, #1
 80228d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80228da:	4807      	ldr	r0, [pc, #28]	; (80228f8 <LCD_IO_ReadData+0x60>)
 80228dc:	f002 fbca 	bl	8025074 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80228e0:	2201      	movs	r2, #1
 80228e2:	2104      	movs	r1, #4
 80228e4:	4803      	ldr	r0, [pc, #12]	; (80228f4 <LCD_IO_ReadData+0x5c>)
 80228e6:	f002 fbc5 	bl	8025074 <HAL_GPIO_WritePin>
  
  return readvalue;
 80228ea:	68fb      	ldr	r3, [r7, #12]
}
 80228ec:	4618      	mov	r0, r3
 80228ee:	3710      	adds	r7, #16
 80228f0:	46bd      	mov	sp, r7
 80228f2:	bd80      	pop	{r7, pc}
 80228f4:	40020800 	.word	0x40020800
 80228f8:	40020c00 	.word	0x40020c00

080228fc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80228fc:	b580      	push	{r7, lr}
 80228fe:	b082      	sub	sp, #8
 8022900:	af00      	add	r7, sp, #0
 8022902:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8022904:	6878      	ldr	r0, [r7, #4]
 8022906:	f000 fecd 	bl	80236a4 <HAL_Delay>
}
 802290a:	bf00      	nop
 802290c:	3708      	adds	r7, #8
 802290e:	46bd      	mov	sp, r7
 8022910:	bd80      	pop	{r7, pc}
	...

08022914 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8022914:	b580      	push	{r7, lr}
 8022916:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8022918:	4b2d      	ldr	r3, [pc, #180]	; (80229d0 <BSP_LCD_Init+0xbc>)
 802291a:	4a2e      	ldr	r2, [pc, #184]	; (80229d4 <BSP_LCD_Init+0xc0>)
 802291c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 802291e:	4b2c      	ldr	r3, [pc, #176]	; (80229d0 <BSP_LCD_Init+0xbc>)
 8022920:	2209      	movs	r2, #9
 8022922:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8022924:	4b2a      	ldr	r3, [pc, #168]	; (80229d0 <BSP_LCD_Init+0xbc>)
 8022926:	2201      	movs	r2, #1
 8022928:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 802292a:	4b29      	ldr	r3, [pc, #164]	; (80229d0 <BSP_LCD_Init+0xbc>)
 802292c:	221d      	movs	r2, #29
 802292e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8022930:	4b27      	ldr	r3, [pc, #156]	; (80229d0 <BSP_LCD_Init+0xbc>)
 8022932:	2203      	movs	r2, #3
 8022934:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8022936:	4b26      	ldr	r3, [pc, #152]	; (80229d0 <BSP_LCD_Init+0xbc>)
 8022938:	f240 120d 	movw	r2, #269	; 0x10d
 802293c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 802293e:	4b24      	ldr	r3, [pc, #144]	; (80229d0 <BSP_LCD_Init+0xbc>)
 8022940:	f240 1243 	movw	r2, #323	; 0x143
 8022944:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8022946:	4b22      	ldr	r3, [pc, #136]	; (80229d0 <BSP_LCD_Init+0xbc>)
 8022948:	f240 1217 	movw	r2, #279	; 0x117
 802294c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 802294e:	4b20      	ldr	r3, [pc, #128]	; (80229d0 <BSP_LCD_Init+0xbc>)
 8022950:	f240 1247 	movw	r2, #327	; 0x147
 8022954:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8022956:	4b1e      	ldr	r3, [pc, #120]	; (80229d0 <BSP_LCD_Init+0xbc>)
 8022958:	2200      	movs	r2, #0
 802295a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 802295e:	4b1c      	ldr	r3, [pc, #112]	; (80229d0 <BSP_LCD_Init+0xbc>)
 8022960:	2200      	movs	r2, #0
 8022962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8022966:	4b1a      	ldr	r3, [pc, #104]	; (80229d0 <BSP_LCD_Init+0xbc>)
 8022968:	2200      	movs	r2, #0
 802296a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 802296e:	4b1a      	ldr	r3, [pc, #104]	; (80229d8 <BSP_LCD_Init+0xc4>)
 8022970:	2208      	movs	r2, #8
 8022972:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8022974:	4b18      	ldr	r3, [pc, #96]	; (80229d8 <BSP_LCD_Init+0xc4>)
 8022976:	22c0      	movs	r2, #192	; 0xc0
 8022978:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 802297a:	4b17      	ldr	r3, [pc, #92]	; (80229d8 <BSP_LCD_Init+0xc4>)
 802297c:	2204      	movs	r2, #4
 802297e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8022980:	4b15      	ldr	r3, [pc, #84]	; (80229d8 <BSP_LCD_Init+0xc4>)
 8022982:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8022986:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8022988:	4813      	ldr	r0, [pc, #76]	; (80229d8 <BSP_LCD_Init+0xc4>)
 802298a:	f005 fa49 	bl	8027e20 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 802298e:	4b10      	ldr	r3, [pc, #64]	; (80229d0 <BSP_LCD_Init+0xbc>)
 8022990:	2200      	movs	r2, #0
 8022992:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8022994:	4b0e      	ldr	r3, [pc, #56]	; (80229d0 <BSP_LCD_Init+0xbc>)
 8022996:	2200      	movs	r2, #0
 8022998:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 802299a:	4b0d      	ldr	r3, [pc, #52]	; (80229d0 <BSP_LCD_Init+0xbc>)
 802299c:	2200      	movs	r2, #0
 802299e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80229a0:	4b0b      	ldr	r3, [pc, #44]	; (80229d0 <BSP_LCD_Init+0xbc>)
 80229a2:	2200      	movs	r2, #0
 80229a4:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80229a6:	f000 fa83 	bl	8022eb0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80229aa:	4809      	ldr	r0, [pc, #36]	; (80229d0 <BSP_LCD_Init+0xbc>)
 80229ac:	f004 f95e 	bl	8026c6c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80229b0:	4b0a      	ldr	r3, [pc, #40]	; (80229dc <BSP_LCD_Init+0xc8>)
 80229b2:	4a0b      	ldr	r2, [pc, #44]	; (80229e0 <BSP_LCD_Init+0xcc>)
 80229b4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80229b6:	4b09      	ldr	r3, [pc, #36]	; (80229dc <BSP_LCD_Init+0xc8>)
 80229b8:	681b      	ldr	r3, [r3, #0]
 80229ba:	681b      	ldr	r3, [r3, #0]
 80229bc:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80229be:	f000 fc65 	bl	802328c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80229c2:	4808      	ldr	r0, [pc, #32]	; (80229e4 <BSP_LCD_Init+0xd0>)
 80229c4:	f000 f920 	bl	8022c08 <BSP_LCD_SetFont>

  return LCD_OK;
 80229c8:	2300      	movs	r3, #0
}  
 80229ca:	4618      	mov	r0, r3
 80229cc:	bd80      	pop	{r7, pc}
 80229ce:	bf00      	nop
 80229d0:	20000900 	.word	0x20000900
 80229d4:	40016800 	.word	0x40016800
 80229d8:	200009e8 	.word	0x200009e8
 80229dc:	20000a34 	.word	0x20000a34
 80229e0:	20000008 	.word	0x20000008
 80229e4:	20000044 	.word	0x20000044

080229e8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80229e8:	b580      	push	{r7, lr}
 80229ea:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80229ec:	4b03      	ldr	r3, [pc, #12]	; (80229fc <BSP_LCD_GetXSize+0x14>)
 80229ee:	681b      	ldr	r3, [r3, #0]
 80229f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80229f2:	4798      	blx	r3
 80229f4:	4603      	mov	r3, r0
}
 80229f6:	4618      	mov	r0, r3
 80229f8:	bd80      	pop	{r7, pc}
 80229fa:	bf00      	nop
 80229fc:	20000a34 	.word	0x20000a34

08022a00 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8022a00:	b580      	push	{r7, lr}
 8022a02:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8022a04:	4b03      	ldr	r3, [pc, #12]	; (8022a14 <BSP_LCD_GetYSize+0x14>)
 8022a06:	681b      	ldr	r3, [r3, #0]
 8022a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022a0a:	4798      	blx	r3
 8022a0c:	4603      	mov	r3, r0
}
 8022a0e:	4618      	mov	r0, r3
 8022a10:	bd80      	pop	{r7, pc}
 8022a12:	bf00      	nop
 8022a14:	20000a34 	.word	0x20000a34

08022a18 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8022a18:	b580      	push	{r7, lr}
 8022a1a:	b090      	sub	sp, #64	; 0x40
 8022a1c:	af00      	add	r7, sp, #0
 8022a1e:	4603      	mov	r3, r0
 8022a20:	6039      	str	r1, [r7, #0]
 8022a22:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8022a24:	2300      	movs	r3, #0
 8022a26:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8022a28:	f7ff ffde 	bl	80229e8 <BSP_LCD_GetXSize>
 8022a2c:	4603      	mov	r3, r0
 8022a2e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8022a30:	2300      	movs	r3, #0
 8022a32:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8022a34:	f7ff ffe4 	bl	8022a00 <BSP_LCD_GetYSize>
 8022a38:	4603      	mov	r3, r0
 8022a3a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8022a3c:	2300      	movs	r3, #0
 8022a3e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8022a40:	683b      	ldr	r3, [r7, #0]
 8022a42:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8022a44:	23ff      	movs	r3, #255	; 0xff
 8022a46:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8022a48:	2300      	movs	r3, #0
 8022a4a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8022a4c:	2300      	movs	r3, #0
 8022a4e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8022a52:	2300      	movs	r3, #0
 8022a54:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8022a58:	2300      	movs	r3, #0
 8022a5a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8022a5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8022a62:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8022a64:	2307      	movs	r3, #7
 8022a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8022a68:	f7ff ffbe 	bl	80229e8 <BSP_LCD_GetXSize>
 8022a6c:	4603      	mov	r3, r0
 8022a6e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8022a70:	f7ff ffc6 	bl	8022a00 <BSP_LCD_GetYSize>
 8022a74:	4603      	mov	r3, r0
 8022a76:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8022a78:	88fa      	ldrh	r2, [r7, #6]
 8022a7a:	f107 030c 	add.w	r3, r7, #12
 8022a7e:	4619      	mov	r1, r3
 8022a80:	4814      	ldr	r0, [pc, #80]	; (8022ad4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8022a82:	f004 fa85 	bl	8026f90 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8022a86:	88fa      	ldrh	r2, [r7, #6]
 8022a88:	4913      	ldr	r1, [pc, #76]	; (8022ad8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8022a8a:	4613      	mov	r3, r2
 8022a8c:	005b      	lsls	r3, r3, #1
 8022a8e:	4413      	add	r3, r2
 8022a90:	009b      	lsls	r3, r3, #2
 8022a92:	440b      	add	r3, r1
 8022a94:	3304      	adds	r3, #4
 8022a96:	f04f 32ff 	mov.w	r2, #4294967295
 8022a9a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8022a9c:	88fa      	ldrh	r2, [r7, #6]
 8022a9e:	490e      	ldr	r1, [pc, #56]	; (8022ad8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8022aa0:	4613      	mov	r3, r2
 8022aa2:	005b      	lsls	r3, r3, #1
 8022aa4:	4413      	add	r3, r2
 8022aa6:	009b      	lsls	r3, r3, #2
 8022aa8:	440b      	add	r3, r1
 8022aaa:	3308      	adds	r3, #8
 8022aac:	4a0b      	ldr	r2, [pc, #44]	; (8022adc <BSP_LCD_LayerDefaultInit+0xc4>)
 8022aae:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8022ab0:	88fa      	ldrh	r2, [r7, #6]
 8022ab2:	4909      	ldr	r1, [pc, #36]	; (8022ad8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8022ab4:	4613      	mov	r3, r2
 8022ab6:	005b      	lsls	r3, r3, #1
 8022ab8:	4413      	add	r3, r2
 8022aba:	009b      	lsls	r3, r3, #2
 8022abc:	440b      	add	r3, r1
 8022abe:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8022ac2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8022ac4:	4803      	ldr	r0, [pc, #12]	; (8022ad4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8022ac6:	f004 fb1f 	bl	8027108 <HAL_LTDC_EnableDither>
}
 8022aca:	bf00      	nop
 8022acc:	3740      	adds	r7, #64	; 0x40
 8022ace:	46bd      	mov	sp, r7
 8022ad0:	bd80      	pop	{r7, pc}
 8022ad2:	bf00      	nop
 8022ad4:	20000900 	.word	0x20000900
 8022ad8:	20000a1c 	.word	0x20000a1c
 8022adc:	20000044 	.word	0x20000044

08022ae0 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8022ae0:	b480      	push	{r7}
 8022ae2:	b083      	sub	sp, #12
 8022ae4:	af00      	add	r7, sp, #0
 8022ae6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8022ae8:	4a04      	ldr	r2, [pc, #16]	; (8022afc <BSP_LCD_SelectLayer+0x1c>)
 8022aea:	687b      	ldr	r3, [r7, #4]
 8022aec:	6013      	str	r3, [r2, #0]
}
 8022aee:	bf00      	nop
 8022af0:	370c      	adds	r7, #12
 8022af2:	46bd      	mov	sp, r7
 8022af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022af8:	4770      	bx	lr
 8022afa:	bf00      	nop
 8022afc:	20000a18 	.word	0x20000a18

08022b00 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8022b00:	b480      	push	{r7}
 8022b02:	b083      	sub	sp, #12
 8022b04:	af00      	add	r7, sp, #0
 8022b06:	6078      	str	r0, [r7, #4]
 8022b08:	460b      	mov	r3, r1
 8022b0a:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8022b0c:	78fb      	ldrb	r3, [r7, #3]
 8022b0e:	2b01      	cmp	r3, #1
 8022b10:	d112      	bne.n	8022b38 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8022b12:	4b19      	ldr	r3, [pc, #100]	; (8022b78 <BSP_LCD_SetLayerVisible+0x78>)
 8022b14:	681b      	ldr	r3, [r3, #0]
 8022b16:	461a      	mov	r2, r3
 8022b18:	687b      	ldr	r3, [r7, #4]
 8022b1a:	01db      	lsls	r3, r3, #7
 8022b1c:	4413      	add	r3, r2
 8022b1e:	3384      	adds	r3, #132	; 0x84
 8022b20:	681b      	ldr	r3, [r3, #0]
 8022b22:	4a15      	ldr	r2, [pc, #84]	; (8022b78 <BSP_LCD_SetLayerVisible+0x78>)
 8022b24:	6812      	ldr	r2, [r2, #0]
 8022b26:	4611      	mov	r1, r2
 8022b28:	687a      	ldr	r2, [r7, #4]
 8022b2a:	01d2      	lsls	r2, r2, #7
 8022b2c:	440a      	add	r2, r1
 8022b2e:	3284      	adds	r2, #132	; 0x84
 8022b30:	f043 0301 	orr.w	r3, r3, #1
 8022b34:	6013      	str	r3, [r2, #0]
 8022b36:	e011      	b.n	8022b5c <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8022b38:	4b0f      	ldr	r3, [pc, #60]	; (8022b78 <BSP_LCD_SetLayerVisible+0x78>)
 8022b3a:	681b      	ldr	r3, [r3, #0]
 8022b3c:	461a      	mov	r2, r3
 8022b3e:	687b      	ldr	r3, [r7, #4]
 8022b40:	01db      	lsls	r3, r3, #7
 8022b42:	4413      	add	r3, r2
 8022b44:	3384      	adds	r3, #132	; 0x84
 8022b46:	681b      	ldr	r3, [r3, #0]
 8022b48:	4a0b      	ldr	r2, [pc, #44]	; (8022b78 <BSP_LCD_SetLayerVisible+0x78>)
 8022b4a:	6812      	ldr	r2, [r2, #0]
 8022b4c:	4611      	mov	r1, r2
 8022b4e:	687a      	ldr	r2, [r7, #4]
 8022b50:	01d2      	lsls	r2, r2, #7
 8022b52:	440a      	add	r2, r1
 8022b54:	3284      	adds	r2, #132	; 0x84
 8022b56:	f023 0301 	bic.w	r3, r3, #1
 8022b5a:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8022b5c:	4b06      	ldr	r3, [pc, #24]	; (8022b78 <BSP_LCD_SetLayerVisible+0x78>)
 8022b5e:	681b      	ldr	r3, [r3, #0]
 8022b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022b62:	4b05      	ldr	r3, [pc, #20]	; (8022b78 <BSP_LCD_SetLayerVisible+0x78>)
 8022b64:	681b      	ldr	r3, [r3, #0]
 8022b66:	f042 0201 	orr.w	r2, r2, #1
 8022b6a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8022b6c:	bf00      	nop
 8022b6e:	370c      	adds	r7, #12
 8022b70:	46bd      	mov	sp, r7
 8022b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b76:	4770      	bx	lr
 8022b78:	20000900 	.word	0x20000900

08022b7c <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8022b7c:	b580      	push	{r7, lr}
 8022b7e:	b082      	sub	sp, #8
 8022b80:	af00      	add	r7, sp, #0
 8022b82:	6078      	str	r0, [r7, #4]
 8022b84:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8022b86:	687a      	ldr	r2, [r7, #4]
 8022b88:	6839      	ldr	r1, [r7, #0]
 8022b8a:	4805      	ldr	r0, [pc, #20]	; (8022ba0 <BSP_LCD_SetColorKeying+0x24>)
 8022b8c:	f004 fa3e 	bl	802700c <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8022b90:	6879      	ldr	r1, [r7, #4]
 8022b92:	4803      	ldr	r0, [pc, #12]	; (8022ba0 <BSP_LCD_SetColorKeying+0x24>)
 8022b94:	f004 fa7e 	bl	8027094 <HAL_LTDC_EnableColorKeying>
}
 8022b98:	bf00      	nop
 8022b9a:	3708      	adds	r7, #8
 8022b9c:	46bd      	mov	sp, r7
 8022b9e:	bd80      	pop	{r7, pc}
 8022ba0:	20000900 	.word	0x20000900

08022ba4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8022ba4:	b480      	push	{r7}
 8022ba6:	b083      	sub	sp, #12
 8022ba8:	af00      	add	r7, sp, #0
 8022baa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8022bac:	4b07      	ldr	r3, [pc, #28]	; (8022bcc <BSP_LCD_SetTextColor+0x28>)
 8022bae:	681a      	ldr	r2, [r3, #0]
 8022bb0:	4907      	ldr	r1, [pc, #28]	; (8022bd0 <BSP_LCD_SetTextColor+0x2c>)
 8022bb2:	4613      	mov	r3, r2
 8022bb4:	005b      	lsls	r3, r3, #1
 8022bb6:	4413      	add	r3, r2
 8022bb8:	009b      	lsls	r3, r3, #2
 8022bba:	440b      	add	r3, r1
 8022bbc:	687a      	ldr	r2, [r7, #4]
 8022bbe:	601a      	str	r2, [r3, #0]
}
 8022bc0:	bf00      	nop
 8022bc2:	370c      	adds	r7, #12
 8022bc4:	46bd      	mov	sp, r7
 8022bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bca:	4770      	bx	lr
 8022bcc:	20000a18 	.word	0x20000a18
 8022bd0:	20000a1c 	.word	0x20000a1c

08022bd4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8022bd4:	b480      	push	{r7}
 8022bd6:	b083      	sub	sp, #12
 8022bd8:	af00      	add	r7, sp, #0
 8022bda:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8022bdc:	4b08      	ldr	r3, [pc, #32]	; (8022c00 <BSP_LCD_SetBackColor+0x2c>)
 8022bde:	681a      	ldr	r2, [r3, #0]
 8022be0:	4908      	ldr	r1, [pc, #32]	; (8022c04 <BSP_LCD_SetBackColor+0x30>)
 8022be2:	4613      	mov	r3, r2
 8022be4:	005b      	lsls	r3, r3, #1
 8022be6:	4413      	add	r3, r2
 8022be8:	009b      	lsls	r3, r3, #2
 8022bea:	440b      	add	r3, r1
 8022bec:	3304      	adds	r3, #4
 8022bee:	687a      	ldr	r2, [r7, #4]
 8022bf0:	601a      	str	r2, [r3, #0]
}
 8022bf2:	bf00      	nop
 8022bf4:	370c      	adds	r7, #12
 8022bf6:	46bd      	mov	sp, r7
 8022bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bfc:	4770      	bx	lr
 8022bfe:	bf00      	nop
 8022c00:	20000a18 	.word	0x20000a18
 8022c04:	20000a1c 	.word	0x20000a1c

08022c08 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8022c08:	b480      	push	{r7}
 8022c0a:	b083      	sub	sp, #12
 8022c0c:	af00      	add	r7, sp, #0
 8022c0e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8022c10:	4b08      	ldr	r3, [pc, #32]	; (8022c34 <BSP_LCD_SetFont+0x2c>)
 8022c12:	681a      	ldr	r2, [r3, #0]
 8022c14:	4908      	ldr	r1, [pc, #32]	; (8022c38 <BSP_LCD_SetFont+0x30>)
 8022c16:	4613      	mov	r3, r2
 8022c18:	005b      	lsls	r3, r3, #1
 8022c1a:	4413      	add	r3, r2
 8022c1c:	009b      	lsls	r3, r3, #2
 8022c1e:	440b      	add	r3, r1
 8022c20:	3308      	adds	r3, #8
 8022c22:	687a      	ldr	r2, [r7, #4]
 8022c24:	601a      	str	r2, [r3, #0]
}
 8022c26:	bf00      	nop
 8022c28:	370c      	adds	r7, #12
 8022c2a:	46bd      	mov	sp, r7
 8022c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c30:	4770      	bx	lr
 8022c32:	bf00      	nop
 8022c34:	20000a18 	.word	0x20000a18
 8022c38:	20000a1c 	.word	0x20000a1c

08022c3c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8022c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c3e:	b085      	sub	sp, #20
 8022c40:	af02      	add	r7, sp, #8
 8022c42:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8022c44:	4b0f      	ldr	r3, [pc, #60]	; (8022c84 <BSP_LCD_Clear+0x48>)
 8022c46:	681c      	ldr	r4, [r3, #0]
 8022c48:	4b0e      	ldr	r3, [pc, #56]	; (8022c84 <BSP_LCD_Clear+0x48>)
 8022c4a:	681b      	ldr	r3, [r3, #0]
 8022c4c:	4a0e      	ldr	r2, [pc, #56]	; (8022c88 <BSP_LCD_Clear+0x4c>)
 8022c4e:	2134      	movs	r1, #52	; 0x34
 8022c50:	fb01 f303 	mul.w	r3, r1, r3
 8022c54:	4413      	add	r3, r2
 8022c56:	335c      	adds	r3, #92	; 0x5c
 8022c58:	681b      	ldr	r3, [r3, #0]
 8022c5a:	461e      	mov	r6, r3
 8022c5c:	f7ff fec4 	bl	80229e8 <BSP_LCD_GetXSize>
 8022c60:	4605      	mov	r5, r0
 8022c62:	f7ff fecd 	bl	8022a00 <BSP_LCD_GetYSize>
 8022c66:	4602      	mov	r2, r0
 8022c68:	687b      	ldr	r3, [r7, #4]
 8022c6a:	9301      	str	r3, [sp, #4]
 8022c6c:	2300      	movs	r3, #0
 8022c6e:	9300      	str	r3, [sp, #0]
 8022c70:	4613      	mov	r3, r2
 8022c72:	462a      	mov	r2, r5
 8022c74:	4631      	mov	r1, r6
 8022c76:	4620      	mov	r0, r4
 8022c78:	f000 fad0 	bl	802321c <FillBuffer>
}
 8022c7c:	bf00      	nop
 8022c7e:	370c      	adds	r7, #12
 8022c80:	46bd      	mov	sp, r7
 8022c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022c84:	20000a18 	.word	0x20000a18
 8022c88:	20000900 	.word	0x20000900

08022c8c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8022c8c:	b590      	push	{r4, r7, lr}
 8022c8e:	b083      	sub	sp, #12
 8022c90:	af00      	add	r7, sp, #0
 8022c92:	4603      	mov	r3, r0
 8022c94:	80fb      	strh	r3, [r7, #6]
 8022c96:	460b      	mov	r3, r1
 8022c98:	80bb      	strh	r3, [r7, #4]
 8022c9a:	4613      	mov	r3, r2
 8022c9c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022c9e:	4b1b      	ldr	r3, [pc, #108]	; (8022d0c <BSP_LCD_DisplayChar+0x80>)
 8022ca0:	681a      	ldr	r2, [r3, #0]
 8022ca2:	491b      	ldr	r1, [pc, #108]	; (8022d10 <BSP_LCD_DisplayChar+0x84>)
 8022ca4:	4613      	mov	r3, r2
 8022ca6:	005b      	lsls	r3, r3, #1
 8022ca8:	4413      	add	r3, r2
 8022caa:	009b      	lsls	r3, r3, #2
 8022cac:	440b      	add	r3, r1
 8022cae:	3308      	adds	r3, #8
 8022cb0:	681b      	ldr	r3, [r3, #0]
 8022cb2:	6819      	ldr	r1, [r3, #0]
 8022cb4:	78fb      	ldrb	r3, [r7, #3]
 8022cb6:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022cba:	4b14      	ldr	r3, [pc, #80]	; (8022d0c <BSP_LCD_DisplayChar+0x80>)
 8022cbc:	681a      	ldr	r2, [r3, #0]
 8022cbe:	4c14      	ldr	r4, [pc, #80]	; (8022d10 <BSP_LCD_DisplayChar+0x84>)
 8022cc0:	4613      	mov	r3, r2
 8022cc2:	005b      	lsls	r3, r3, #1
 8022cc4:	4413      	add	r3, r2
 8022cc6:	009b      	lsls	r3, r3, #2
 8022cc8:	4423      	add	r3, r4
 8022cca:	3308      	adds	r3, #8
 8022ccc:	681b      	ldr	r3, [r3, #0]
 8022cce:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022cd0:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022cd4:	4b0d      	ldr	r3, [pc, #52]	; (8022d0c <BSP_LCD_DisplayChar+0x80>)
 8022cd6:	681a      	ldr	r2, [r3, #0]
 8022cd8:	4c0d      	ldr	r4, [pc, #52]	; (8022d10 <BSP_LCD_DisplayChar+0x84>)
 8022cda:	4613      	mov	r3, r2
 8022cdc:	005b      	lsls	r3, r3, #1
 8022cde:	4413      	add	r3, r2
 8022ce0:	009b      	lsls	r3, r3, #2
 8022ce2:	4423      	add	r3, r4
 8022ce4:	3308      	adds	r3, #8
 8022ce6:	681b      	ldr	r3, [r3, #0]
 8022ce8:	889b      	ldrh	r3, [r3, #4]
 8022cea:	3307      	adds	r3, #7
 8022cec:	2b00      	cmp	r3, #0
 8022cee:	da00      	bge.n	8022cf2 <BSP_LCD_DisplayChar+0x66>
 8022cf0:	3307      	adds	r3, #7
 8022cf2:	10db      	asrs	r3, r3, #3
 8022cf4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022cf8:	18ca      	adds	r2, r1, r3
 8022cfa:	88b9      	ldrh	r1, [r7, #4]
 8022cfc:	88fb      	ldrh	r3, [r7, #6]
 8022cfe:	4618      	mov	r0, r3
 8022d00:	f000 f9d2 	bl	80230a8 <DrawChar>
}
 8022d04:	bf00      	nop
 8022d06:	370c      	adds	r7, #12
 8022d08:	46bd      	mov	sp, r7
 8022d0a:	bd90      	pop	{r4, r7, pc}
 8022d0c:	20000a18 	.word	0x20000a18
 8022d10:	20000a1c 	.word	0x20000a1c

08022d14 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8022d14:	b5b0      	push	{r4, r5, r7, lr}
 8022d16:	b088      	sub	sp, #32
 8022d18:	af00      	add	r7, sp, #0
 8022d1a:	60ba      	str	r2, [r7, #8]
 8022d1c:	461a      	mov	r2, r3
 8022d1e:	4603      	mov	r3, r0
 8022d20:	81fb      	strh	r3, [r7, #14]
 8022d22:	460b      	mov	r3, r1
 8022d24:	81bb      	strh	r3, [r7, #12]
 8022d26:	4613      	mov	r3, r2
 8022d28:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8022d2a:	2301      	movs	r3, #1
 8022d2c:	83fb      	strh	r3, [r7, #30]
 8022d2e:	2300      	movs	r3, #0
 8022d30:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8022d32:	2300      	movs	r3, #0
 8022d34:	61bb      	str	r3, [r7, #24]
 8022d36:	2300      	movs	r3, #0
 8022d38:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8022d3a:	68bb      	ldr	r3, [r7, #8]
 8022d3c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8022d3e:	e002      	b.n	8022d46 <BSP_LCD_DisplayStringAt+0x32>
 8022d40:	69bb      	ldr	r3, [r7, #24]
 8022d42:	3301      	adds	r3, #1
 8022d44:	61bb      	str	r3, [r7, #24]
 8022d46:	697b      	ldr	r3, [r7, #20]
 8022d48:	1c5a      	adds	r2, r3, #1
 8022d4a:	617a      	str	r2, [r7, #20]
 8022d4c:	781b      	ldrb	r3, [r3, #0]
 8022d4e:	2b00      	cmp	r3, #0
 8022d50:	d1f6      	bne.n	8022d40 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8022d52:	f7ff fe49 	bl	80229e8 <BSP_LCD_GetXSize>
 8022d56:	4601      	mov	r1, r0
 8022d58:	4b4b      	ldr	r3, [pc, #300]	; (8022e88 <BSP_LCD_DisplayStringAt+0x174>)
 8022d5a:	681a      	ldr	r2, [r3, #0]
 8022d5c:	484b      	ldr	r0, [pc, #300]	; (8022e8c <BSP_LCD_DisplayStringAt+0x178>)
 8022d5e:	4613      	mov	r3, r2
 8022d60:	005b      	lsls	r3, r3, #1
 8022d62:	4413      	add	r3, r2
 8022d64:	009b      	lsls	r3, r3, #2
 8022d66:	4403      	add	r3, r0
 8022d68:	3308      	adds	r3, #8
 8022d6a:	681b      	ldr	r3, [r3, #0]
 8022d6c:	889b      	ldrh	r3, [r3, #4]
 8022d6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8022d72:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8022d74:	79fb      	ldrb	r3, [r7, #7]
 8022d76:	2b03      	cmp	r3, #3
 8022d78:	d01c      	beq.n	8022db4 <BSP_LCD_DisplayStringAt+0xa0>
 8022d7a:	2b03      	cmp	r3, #3
 8022d7c:	dc33      	bgt.n	8022de6 <BSP_LCD_DisplayStringAt+0xd2>
 8022d7e:	2b01      	cmp	r3, #1
 8022d80:	d002      	beq.n	8022d88 <BSP_LCD_DisplayStringAt+0x74>
 8022d82:	2b02      	cmp	r3, #2
 8022d84:	d019      	beq.n	8022dba <BSP_LCD_DisplayStringAt+0xa6>
 8022d86:	e02e      	b.n	8022de6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8022d88:	693a      	ldr	r2, [r7, #16]
 8022d8a:	69bb      	ldr	r3, [r7, #24]
 8022d8c:	1ad1      	subs	r1, r2, r3
 8022d8e:	4b3e      	ldr	r3, [pc, #248]	; (8022e88 <BSP_LCD_DisplayStringAt+0x174>)
 8022d90:	681a      	ldr	r2, [r3, #0]
 8022d92:	483e      	ldr	r0, [pc, #248]	; (8022e8c <BSP_LCD_DisplayStringAt+0x178>)
 8022d94:	4613      	mov	r3, r2
 8022d96:	005b      	lsls	r3, r3, #1
 8022d98:	4413      	add	r3, r2
 8022d9a:	009b      	lsls	r3, r3, #2
 8022d9c:	4403      	add	r3, r0
 8022d9e:	3308      	adds	r3, #8
 8022da0:	681b      	ldr	r3, [r3, #0]
 8022da2:	889b      	ldrh	r3, [r3, #4]
 8022da4:	fb01 f303 	mul.w	r3, r1, r3
 8022da8:	085b      	lsrs	r3, r3, #1
 8022daa:	b29a      	uxth	r2, r3
 8022dac:	89fb      	ldrh	r3, [r7, #14]
 8022dae:	4413      	add	r3, r2
 8022db0:	83fb      	strh	r3, [r7, #30]
      break;
 8022db2:	e01b      	b.n	8022dec <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8022db4:	89fb      	ldrh	r3, [r7, #14]
 8022db6:	83fb      	strh	r3, [r7, #30]
      break;
 8022db8:	e018      	b.n	8022dec <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8022dba:	693a      	ldr	r2, [r7, #16]
 8022dbc:	69bb      	ldr	r3, [r7, #24]
 8022dbe:	1ad3      	subs	r3, r2, r3
 8022dc0:	b299      	uxth	r1, r3
 8022dc2:	4b31      	ldr	r3, [pc, #196]	; (8022e88 <BSP_LCD_DisplayStringAt+0x174>)
 8022dc4:	681a      	ldr	r2, [r3, #0]
 8022dc6:	4831      	ldr	r0, [pc, #196]	; (8022e8c <BSP_LCD_DisplayStringAt+0x178>)
 8022dc8:	4613      	mov	r3, r2
 8022dca:	005b      	lsls	r3, r3, #1
 8022dcc:	4413      	add	r3, r2
 8022dce:	009b      	lsls	r3, r3, #2
 8022dd0:	4403      	add	r3, r0
 8022dd2:	3308      	adds	r3, #8
 8022dd4:	681b      	ldr	r3, [r3, #0]
 8022dd6:	889b      	ldrh	r3, [r3, #4]
 8022dd8:	fb11 f303 	smulbb	r3, r1, r3
 8022ddc:	b29a      	uxth	r2, r3
 8022dde:	89fb      	ldrh	r3, [r7, #14]
 8022de0:	4413      	add	r3, r2
 8022de2:	83fb      	strh	r3, [r7, #30]
      break;
 8022de4:	e002      	b.n	8022dec <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8022de6:	89fb      	ldrh	r3, [r7, #14]
 8022de8:	83fb      	strh	r3, [r7, #30]
      break;
 8022dea:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022dec:	e01a      	b.n	8022e24 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8022dee:	68bb      	ldr	r3, [r7, #8]
 8022df0:	781a      	ldrb	r2, [r3, #0]
 8022df2:	89b9      	ldrh	r1, [r7, #12]
 8022df4:	8bfb      	ldrh	r3, [r7, #30]
 8022df6:	4618      	mov	r0, r3
 8022df8:	f7ff ff48 	bl	8022c8c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8022dfc:	4b22      	ldr	r3, [pc, #136]	; (8022e88 <BSP_LCD_DisplayStringAt+0x174>)
 8022dfe:	681a      	ldr	r2, [r3, #0]
 8022e00:	4922      	ldr	r1, [pc, #136]	; (8022e8c <BSP_LCD_DisplayStringAt+0x178>)
 8022e02:	4613      	mov	r3, r2
 8022e04:	005b      	lsls	r3, r3, #1
 8022e06:	4413      	add	r3, r2
 8022e08:	009b      	lsls	r3, r3, #2
 8022e0a:	440b      	add	r3, r1
 8022e0c:	3308      	adds	r3, #8
 8022e0e:	681b      	ldr	r3, [r3, #0]
 8022e10:	889a      	ldrh	r2, [r3, #4]
 8022e12:	8bfb      	ldrh	r3, [r7, #30]
 8022e14:	4413      	add	r3, r2
 8022e16:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8022e18:	68bb      	ldr	r3, [r7, #8]
 8022e1a:	3301      	adds	r3, #1
 8022e1c:	60bb      	str	r3, [r7, #8]
    i++;
 8022e1e:	8bbb      	ldrh	r3, [r7, #28]
 8022e20:	3301      	adds	r3, #1
 8022e22:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022e24:	68bb      	ldr	r3, [r7, #8]
 8022e26:	781b      	ldrb	r3, [r3, #0]
 8022e28:	2b00      	cmp	r3, #0
 8022e2a:	bf14      	ite	ne
 8022e2c:	2301      	movne	r3, #1
 8022e2e:	2300      	moveq	r3, #0
 8022e30:	b2dc      	uxtb	r4, r3
 8022e32:	f7ff fdd9 	bl	80229e8 <BSP_LCD_GetXSize>
 8022e36:	8bb9      	ldrh	r1, [r7, #28]
 8022e38:	4b13      	ldr	r3, [pc, #76]	; (8022e88 <BSP_LCD_DisplayStringAt+0x174>)
 8022e3a:	681a      	ldr	r2, [r3, #0]
 8022e3c:	4d13      	ldr	r5, [pc, #76]	; (8022e8c <BSP_LCD_DisplayStringAt+0x178>)
 8022e3e:	4613      	mov	r3, r2
 8022e40:	005b      	lsls	r3, r3, #1
 8022e42:	4413      	add	r3, r2
 8022e44:	009b      	lsls	r3, r3, #2
 8022e46:	442b      	add	r3, r5
 8022e48:	3308      	adds	r3, #8
 8022e4a:	681b      	ldr	r3, [r3, #0]
 8022e4c:	889b      	ldrh	r3, [r3, #4]
 8022e4e:	fb01 f303 	mul.w	r3, r1, r3
 8022e52:	1ac3      	subs	r3, r0, r3
 8022e54:	b299      	uxth	r1, r3
 8022e56:	4b0c      	ldr	r3, [pc, #48]	; (8022e88 <BSP_LCD_DisplayStringAt+0x174>)
 8022e58:	681a      	ldr	r2, [r3, #0]
 8022e5a:	480c      	ldr	r0, [pc, #48]	; (8022e8c <BSP_LCD_DisplayStringAt+0x178>)
 8022e5c:	4613      	mov	r3, r2
 8022e5e:	005b      	lsls	r3, r3, #1
 8022e60:	4413      	add	r3, r2
 8022e62:	009b      	lsls	r3, r3, #2
 8022e64:	4403      	add	r3, r0
 8022e66:	3308      	adds	r3, #8
 8022e68:	681b      	ldr	r3, [r3, #0]
 8022e6a:	889b      	ldrh	r3, [r3, #4]
 8022e6c:	4299      	cmp	r1, r3
 8022e6e:	bf2c      	ite	cs
 8022e70:	2301      	movcs	r3, #1
 8022e72:	2300      	movcc	r3, #0
 8022e74:	b2db      	uxtb	r3, r3
 8022e76:	4023      	ands	r3, r4
 8022e78:	b2db      	uxtb	r3, r3
 8022e7a:	2b00      	cmp	r3, #0
 8022e7c:	d1b7      	bne.n	8022dee <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8022e7e:	bf00      	nop
 8022e80:	bf00      	nop
 8022e82:	3720      	adds	r7, #32
 8022e84:	46bd      	mov	sp, r7
 8022e86:	bdb0      	pop	{r4, r5, r7, pc}
 8022e88:	20000a18 	.word	0x20000a18
 8022e8c:	20000a1c 	.word	0x20000a1c

08022e90 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8022e90:	b580      	push	{r7, lr}
 8022e92:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8022e94:	4b05      	ldr	r3, [pc, #20]	; (8022eac <BSP_LCD_DisplayOn+0x1c>)
 8022e96:	681b      	ldr	r3, [r3, #0]
 8022e98:	689b      	ldr	r3, [r3, #8]
 8022e9a:	2b00      	cmp	r3, #0
 8022e9c:	d003      	beq.n	8022ea6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8022e9e:	4b03      	ldr	r3, [pc, #12]	; (8022eac <BSP_LCD_DisplayOn+0x1c>)
 8022ea0:	681b      	ldr	r3, [r3, #0]
 8022ea2:	689b      	ldr	r3, [r3, #8]
 8022ea4:	4798      	blx	r3
  }
}
 8022ea6:	bf00      	nop
 8022ea8:	bd80      	pop	{r7, pc}
 8022eaa:	bf00      	nop
 8022eac:	20000a34 	.word	0x20000a34

08022eb0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8022eb0:	b580      	push	{r7, lr}
 8022eb2:	b08e      	sub	sp, #56	; 0x38
 8022eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8022eb6:	2300      	movs	r3, #0
 8022eb8:	623b      	str	r3, [r7, #32]
 8022eba:	4b61      	ldr	r3, [pc, #388]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022ebe:	4a60      	ldr	r2, [pc, #384]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022ec0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8022ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8022ec6:	4b5e      	ldr	r3, [pc, #376]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022eca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8022ece:	623b      	str	r3, [r7, #32]
 8022ed0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8022ed2:	2300      	movs	r3, #0
 8022ed4:	61fb      	str	r3, [r7, #28]
 8022ed6:	4b5a      	ldr	r3, [pc, #360]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022eda:	4a59      	ldr	r2, [pc, #356]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022edc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8022ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8022ee2:	4b57      	ldr	r3, [pc, #348]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8022eea:	61fb      	str	r3, [r7, #28]
 8022eec:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8022eee:	2300      	movs	r3, #0
 8022ef0:	61bb      	str	r3, [r7, #24]
 8022ef2:	4b53      	ldr	r3, [pc, #332]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ef6:	4a52      	ldr	r2, [pc, #328]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022ef8:	f043 0301 	orr.w	r3, r3, #1
 8022efc:	6313      	str	r3, [r2, #48]	; 0x30
 8022efe:	4b50      	ldr	r3, [pc, #320]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f02:	f003 0301 	and.w	r3, r3, #1
 8022f06:	61bb      	str	r3, [r7, #24]
 8022f08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8022f0a:	2300      	movs	r3, #0
 8022f0c:	617b      	str	r3, [r7, #20]
 8022f0e:	4b4c      	ldr	r3, [pc, #304]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f12:	4a4b      	ldr	r2, [pc, #300]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022f14:	f043 0302 	orr.w	r3, r3, #2
 8022f18:	6313      	str	r3, [r2, #48]	; 0x30
 8022f1a:	4b49      	ldr	r3, [pc, #292]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f1e:	f003 0302 	and.w	r3, r3, #2
 8022f22:	617b      	str	r3, [r7, #20]
 8022f24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8022f26:	2300      	movs	r3, #0
 8022f28:	613b      	str	r3, [r7, #16]
 8022f2a:	4b45      	ldr	r3, [pc, #276]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f2e:	4a44      	ldr	r2, [pc, #272]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022f30:	f043 0304 	orr.w	r3, r3, #4
 8022f34:	6313      	str	r3, [r2, #48]	; 0x30
 8022f36:	4b42      	ldr	r3, [pc, #264]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f3a:	f003 0304 	and.w	r3, r3, #4
 8022f3e:	613b      	str	r3, [r7, #16]
 8022f40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8022f42:	2300      	movs	r3, #0
 8022f44:	60fb      	str	r3, [r7, #12]
 8022f46:	4b3e      	ldr	r3, [pc, #248]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f4a:	4a3d      	ldr	r2, [pc, #244]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022f4c:	f043 0308 	orr.w	r3, r3, #8
 8022f50:	6313      	str	r3, [r2, #48]	; 0x30
 8022f52:	4b3b      	ldr	r3, [pc, #236]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f56:	f003 0308 	and.w	r3, r3, #8
 8022f5a:	60fb      	str	r3, [r7, #12]
 8022f5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8022f5e:	2300      	movs	r3, #0
 8022f60:	60bb      	str	r3, [r7, #8]
 8022f62:	4b37      	ldr	r3, [pc, #220]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f66:	4a36      	ldr	r2, [pc, #216]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022f68:	f043 0320 	orr.w	r3, r3, #32
 8022f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8022f6e:	4b34      	ldr	r3, [pc, #208]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f72:	f003 0320 	and.w	r3, r3, #32
 8022f76:	60bb      	str	r3, [r7, #8]
 8022f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8022f7a:	2300      	movs	r3, #0
 8022f7c:	607b      	str	r3, [r7, #4]
 8022f7e:	4b30      	ldr	r3, [pc, #192]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f82:	4a2f      	ldr	r2, [pc, #188]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022f88:	6313      	str	r3, [r2, #48]	; 0x30
 8022f8a:	4b2d      	ldr	r3, [pc, #180]	; (8023040 <BSP_LCD_MspInit+0x190>)
 8022f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022f92:	607b      	str	r3, [r7, #4]
 8022f94:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8022f96:	f641 0358 	movw	r3, #6232	; 0x1858
 8022f9a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8022f9c:	2302      	movs	r3, #2
 8022f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8022fa0:	2300      	movs	r3, #0
 8022fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8022fa4:	2302      	movs	r3, #2
 8022fa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8022fa8:	230e      	movs	r3, #14
 8022faa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8022fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fb0:	4619      	mov	r1, r3
 8022fb2:	4824      	ldr	r0, [pc, #144]	; (8023044 <BSP_LCD_MspInit+0x194>)
 8022fb4:	f001 fda6 	bl	8024b04 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8022fb8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8022fbc:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8022fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fc2:	4619      	mov	r1, r3
 8022fc4:	4820      	ldr	r0, [pc, #128]	; (8023048 <BSP_LCD_MspInit+0x198>)
 8022fc6:	f001 fd9d 	bl	8024b04 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8022fca:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8022fce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8022fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fd4:	4619      	mov	r1, r3
 8022fd6:	481d      	ldr	r0, [pc, #116]	; (802304c <BSP_LCD_MspInit+0x19c>)
 8022fd8:	f001 fd94 	bl	8024b04 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8022fdc:	2348      	movs	r3, #72	; 0x48
 8022fde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8022fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fe4:	4619      	mov	r1, r3
 8022fe6:	481a      	ldr	r0, [pc, #104]	; (8023050 <BSP_LCD_MspInit+0x1a0>)
 8022fe8:	f001 fd8c 	bl	8024b04 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8022fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022ff0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8022ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022ff6:	4619      	mov	r1, r3
 8022ff8:	4816      	ldr	r0, [pc, #88]	; (8023054 <BSP_LCD_MspInit+0x1a4>)
 8022ffa:	f001 fd83 	bl	8024b04 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8022ffe:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8023002:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8023004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023008:	4619      	mov	r1, r3
 802300a:	4813      	ldr	r0, [pc, #76]	; (8023058 <BSP_LCD_MspInit+0x1a8>)
 802300c:	f001 fd7a 	bl	8024b04 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8023010:	2303      	movs	r3, #3
 8023012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8023014:	2309      	movs	r3, #9
 8023016:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8023018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802301c:	4619      	mov	r1, r3
 802301e:	480a      	ldr	r0, [pc, #40]	; (8023048 <BSP_LCD_MspInit+0x198>)
 8023020:	f001 fd70 	bl	8024b04 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8023024:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8023028:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 802302a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802302e:	4619      	mov	r1, r3
 8023030:	4809      	ldr	r0, [pc, #36]	; (8023058 <BSP_LCD_MspInit+0x1a8>)
 8023032:	f001 fd67 	bl	8024b04 <HAL_GPIO_Init>
}
 8023036:	bf00      	nop
 8023038:	3738      	adds	r7, #56	; 0x38
 802303a:	46bd      	mov	sp, r7
 802303c:	bd80      	pop	{r7, pc}
 802303e:	bf00      	nop
 8023040:	40023800 	.word	0x40023800
 8023044:	40020000 	.word	0x40020000
 8023048:	40020400 	.word	0x40020400
 802304c:	40020800 	.word	0x40020800
 8023050:	40020c00 	.word	0x40020c00
 8023054:	40021400 	.word	0x40021400
 8023058:	40021800 	.word	0x40021800

0802305c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 802305c:	b5b0      	push	{r4, r5, r7, lr}
 802305e:	b082      	sub	sp, #8
 8023060:	af00      	add	r7, sp, #0
 8023062:	4603      	mov	r3, r0
 8023064:	603a      	str	r2, [r7, #0]
 8023066:	80fb      	strh	r3, [r7, #6]
 8023068:	460b      	mov	r3, r1
 802306a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 802306c:	4b0c      	ldr	r3, [pc, #48]	; (80230a0 <BSP_LCD_DrawPixel+0x44>)
 802306e:	681b      	ldr	r3, [r3, #0]
 8023070:	4a0c      	ldr	r2, [pc, #48]	; (80230a4 <BSP_LCD_DrawPixel+0x48>)
 8023072:	2134      	movs	r1, #52	; 0x34
 8023074:	fb01 f303 	mul.w	r3, r1, r3
 8023078:	4413      	add	r3, r2
 802307a:	335c      	adds	r3, #92	; 0x5c
 802307c:	681c      	ldr	r4, [r3, #0]
 802307e:	88bd      	ldrh	r5, [r7, #4]
 8023080:	f7ff fcb2 	bl	80229e8 <BSP_LCD_GetXSize>
 8023084:	4603      	mov	r3, r0
 8023086:	fb03 f205 	mul.w	r2, r3, r5
 802308a:	88fb      	ldrh	r3, [r7, #6]
 802308c:	4413      	add	r3, r2
 802308e:	009b      	lsls	r3, r3, #2
 8023090:	4423      	add	r3, r4
 8023092:	461a      	mov	r2, r3
 8023094:	683b      	ldr	r3, [r7, #0]
 8023096:	6013      	str	r3, [r2, #0]
}
 8023098:	bf00      	nop
 802309a:	3708      	adds	r7, #8
 802309c:	46bd      	mov	sp, r7
 802309e:	bdb0      	pop	{r4, r5, r7, pc}
 80230a0:	20000a18 	.word	0x20000a18
 80230a4:	20000900 	.word	0x20000900

080230a8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80230a8:	b580      	push	{r7, lr}
 80230aa:	b088      	sub	sp, #32
 80230ac:	af00      	add	r7, sp, #0
 80230ae:	4603      	mov	r3, r0
 80230b0:	603a      	str	r2, [r7, #0]
 80230b2:	80fb      	strh	r3, [r7, #6]
 80230b4:	460b      	mov	r3, r1
 80230b6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80230b8:	2300      	movs	r3, #0
 80230ba:	61fb      	str	r3, [r7, #28]
 80230bc:	2300      	movs	r3, #0
 80230be:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80230c0:	2300      	movs	r3, #0
 80230c2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80230c4:	4b53      	ldr	r3, [pc, #332]	; (8023214 <DrawChar+0x16c>)
 80230c6:	681a      	ldr	r2, [r3, #0]
 80230c8:	4953      	ldr	r1, [pc, #332]	; (8023218 <DrawChar+0x170>)
 80230ca:	4613      	mov	r3, r2
 80230cc:	005b      	lsls	r3, r3, #1
 80230ce:	4413      	add	r3, r2
 80230d0:	009b      	lsls	r3, r3, #2
 80230d2:	440b      	add	r3, r1
 80230d4:	3308      	adds	r3, #8
 80230d6:	681b      	ldr	r3, [r3, #0]
 80230d8:	88db      	ldrh	r3, [r3, #6]
 80230da:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80230dc:	4b4d      	ldr	r3, [pc, #308]	; (8023214 <DrawChar+0x16c>)
 80230de:	681a      	ldr	r2, [r3, #0]
 80230e0:	494d      	ldr	r1, [pc, #308]	; (8023218 <DrawChar+0x170>)
 80230e2:	4613      	mov	r3, r2
 80230e4:	005b      	lsls	r3, r3, #1
 80230e6:	4413      	add	r3, r2
 80230e8:	009b      	lsls	r3, r3, #2
 80230ea:	440b      	add	r3, r1
 80230ec:	3308      	adds	r3, #8
 80230ee:	681b      	ldr	r3, [r3, #0]
 80230f0:	889b      	ldrh	r3, [r3, #4]
 80230f2:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80230f4:	8a3b      	ldrh	r3, [r7, #16]
 80230f6:	3307      	adds	r3, #7
 80230f8:	2b00      	cmp	r3, #0
 80230fa:	da00      	bge.n	80230fe <DrawChar+0x56>
 80230fc:	3307      	adds	r3, #7
 80230fe:	10db      	asrs	r3, r3, #3
 8023100:	b2db      	uxtb	r3, r3
 8023102:	00db      	lsls	r3, r3, #3
 8023104:	b2da      	uxtb	r2, r3
 8023106:	8a3b      	ldrh	r3, [r7, #16]
 8023108:	b2db      	uxtb	r3, r3
 802310a:	1ad3      	subs	r3, r2, r3
 802310c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 802310e:	2300      	movs	r3, #0
 8023110:	61fb      	str	r3, [r7, #28]
 8023112:	e076      	b.n	8023202 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8023114:	8a3b      	ldrh	r3, [r7, #16]
 8023116:	3307      	adds	r3, #7
 8023118:	2b00      	cmp	r3, #0
 802311a:	da00      	bge.n	802311e <DrawChar+0x76>
 802311c:	3307      	adds	r3, #7
 802311e:	10db      	asrs	r3, r3, #3
 8023120:	461a      	mov	r2, r3
 8023122:	69fb      	ldr	r3, [r7, #28]
 8023124:	fb02 f303 	mul.w	r3, r2, r3
 8023128:	683a      	ldr	r2, [r7, #0]
 802312a:	4413      	add	r3, r2
 802312c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 802312e:	8a3b      	ldrh	r3, [r7, #16]
 8023130:	3307      	adds	r3, #7
 8023132:	2b00      	cmp	r3, #0
 8023134:	da00      	bge.n	8023138 <DrawChar+0x90>
 8023136:	3307      	adds	r3, #7
 8023138:	10db      	asrs	r3, r3, #3
 802313a:	2b01      	cmp	r3, #1
 802313c:	d002      	beq.n	8023144 <DrawChar+0x9c>
 802313e:	2b02      	cmp	r3, #2
 8023140:	d004      	beq.n	802314c <DrawChar+0xa4>
 8023142:	e00c      	b.n	802315e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8023144:	68bb      	ldr	r3, [r7, #8]
 8023146:	781b      	ldrb	r3, [r3, #0]
 8023148:	617b      	str	r3, [r7, #20]
      break;
 802314a:	e016      	b.n	802317a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 802314c:	68bb      	ldr	r3, [r7, #8]
 802314e:	781b      	ldrb	r3, [r3, #0]
 8023150:	021b      	lsls	r3, r3, #8
 8023152:	68ba      	ldr	r2, [r7, #8]
 8023154:	3201      	adds	r2, #1
 8023156:	7812      	ldrb	r2, [r2, #0]
 8023158:	4313      	orrs	r3, r2
 802315a:	617b      	str	r3, [r7, #20]
      break;
 802315c:	e00d      	b.n	802317a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 802315e:	68bb      	ldr	r3, [r7, #8]
 8023160:	781b      	ldrb	r3, [r3, #0]
 8023162:	041a      	lsls	r2, r3, #16
 8023164:	68bb      	ldr	r3, [r7, #8]
 8023166:	3301      	adds	r3, #1
 8023168:	781b      	ldrb	r3, [r3, #0]
 802316a:	021b      	lsls	r3, r3, #8
 802316c:	4313      	orrs	r3, r2
 802316e:	68ba      	ldr	r2, [r7, #8]
 8023170:	3202      	adds	r2, #2
 8023172:	7812      	ldrb	r2, [r2, #0]
 8023174:	4313      	orrs	r3, r2
 8023176:	617b      	str	r3, [r7, #20]
      break;
 8023178:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 802317a:	2300      	movs	r3, #0
 802317c:	61bb      	str	r3, [r7, #24]
 802317e:	e036      	b.n	80231ee <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8023180:	8a3a      	ldrh	r2, [r7, #16]
 8023182:	69bb      	ldr	r3, [r7, #24]
 8023184:	1ad2      	subs	r2, r2, r3
 8023186:	7bfb      	ldrb	r3, [r7, #15]
 8023188:	4413      	add	r3, r2
 802318a:	3b01      	subs	r3, #1
 802318c:	2201      	movs	r2, #1
 802318e:	fa02 f303 	lsl.w	r3, r2, r3
 8023192:	461a      	mov	r2, r3
 8023194:	697b      	ldr	r3, [r7, #20]
 8023196:	4013      	ands	r3, r2
 8023198:	2b00      	cmp	r3, #0
 802319a:	d012      	beq.n	80231c2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 802319c:	69bb      	ldr	r3, [r7, #24]
 802319e:	b29a      	uxth	r2, r3
 80231a0:	88fb      	ldrh	r3, [r7, #6]
 80231a2:	4413      	add	r3, r2
 80231a4:	b298      	uxth	r0, r3
 80231a6:	4b1b      	ldr	r3, [pc, #108]	; (8023214 <DrawChar+0x16c>)
 80231a8:	681a      	ldr	r2, [r3, #0]
 80231aa:	491b      	ldr	r1, [pc, #108]	; (8023218 <DrawChar+0x170>)
 80231ac:	4613      	mov	r3, r2
 80231ae:	005b      	lsls	r3, r3, #1
 80231b0:	4413      	add	r3, r2
 80231b2:	009b      	lsls	r3, r3, #2
 80231b4:	440b      	add	r3, r1
 80231b6:	681a      	ldr	r2, [r3, #0]
 80231b8:	88bb      	ldrh	r3, [r7, #4]
 80231ba:	4619      	mov	r1, r3
 80231bc:	f7ff ff4e 	bl	802305c <BSP_LCD_DrawPixel>
 80231c0:	e012      	b.n	80231e8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80231c2:	69bb      	ldr	r3, [r7, #24]
 80231c4:	b29a      	uxth	r2, r3
 80231c6:	88fb      	ldrh	r3, [r7, #6]
 80231c8:	4413      	add	r3, r2
 80231ca:	b298      	uxth	r0, r3
 80231cc:	4b11      	ldr	r3, [pc, #68]	; (8023214 <DrawChar+0x16c>)
 80231ce:	681a      	ldr	r2, [r3, #0]
 80231d0:	4911      	ldr	r1, [pc, #68]	; (8023218 <DrawChar+0x170>)
 80231d2:	4613      	mov	r3, r2
 80231d4:	005b      	lsls	r3, r3, #1
 80231d6:	4413      	add	r3, r2
 80231d8:	009b      	lsls	r3, r3, #2
 80231da:	440b      	add	r3, r1
 80231dc:	3304      	adds	r3, #4
 80231de:	681a      	ldr	r2, [r3, #0]
 80231e0:	88bb      	ldrh	r3, [r7, #4]
 80231e2:	4619      	mov	r1, r3
 80231e4:	f7ff ff3a 	bl	802305c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80231e8:	69bb      	ldr	r3, [r7, #24]
 80231ea:	3301      	adds	r3, #1
 80231ec:	61bb      	str	r3, [r7, #24]
 80231ee:	8a3b      	ldrh	r3, [r7, #16]
 80231f0:	69ba      	ldr	r2, [r7, #24]
 80231f2:	429a      	cmp	r2, r3
 80231f4:	d3c4      	bcc.n	8023180 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80231f6:	88bb      	ldrh	r3, [r7, #4]
 80231f8:	3301      	adds	r3, #1
 80231fa:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80231fc:	69fb      	ldr	r3, [r7, #28]
 80231fe:	3301      	adds	r3, #1
 8023200:	61fb      	str	r3, [r7, #28]
 8023202:	8a7b      	ldrh	r3, [r7, #18]
 8023204:	69fa      	ldr	r2, [r7, #28]
 8023206:	429a      	cmp	r2, r3
 8023208:	d384      	bcc.n	8023114 <DrawChar+0x6c>
  }
}
 802320a:	bf00      	nop
 802320c:	bf00      	nop
 802320e:	3720      	adds	r7, #32
 8023210:	46bd      	mov	sp, r7
 8023212:	bd80      	pop	{r7, pc}
 8023214:	20000a18 	.word	0x20000a18
 8023218:	20000a1c 	.word	0x20000a1c

0802321c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 802321c:	b580      	push	{r7, lr}
 802321e:	b086      	sub	sp, #24
 8023220:	af02      	add	r7, sp, #8
 8023222:	60f8      	str	r0, [r7, #12]
 8023224:	60b9      	str	r1, [r7, #8]
 8023226:	607a      	str	r2, [r7, #4]
 8023228:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 802322a:	4b16      	ldr	r3, [pc, #88]	; (8023284 <FillBuffer+0x68>)
 802322c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8023230:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8023232:	4b14      	ldr	r3, [pc, #80]	; (8023284 <FillBuffer+0x68>)
 8023234:	2200      	movs	r2, #0
 8023236:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8023238:	4a12      	ldr	r2, [pc, #72]	; (8023284 <FillBuffer+0x68>)
 802323a:	69bb      	ldr	r3, [r7, #24]
 802323c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 802323e:	4b11      	ldr	r3, [pc, #68]	; (8023284 <FillBuffer+0x68>)
 8023240:	4a11      	ldr	r2, [pc, #68]	; (8023288 <FillBuffer+0x6c>)
 8023242:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8023244:	480f      	ldr	r0, [pc, #60]	; (8023284 <FillBuffer+0x68>)
 8023246:	f000 fdbb 	bl	8023dc0 <HAL_DMA2D_Init>
 802324a:	4603      	mov	r3, r0
 802324c:	2b00      	cmp	r3, #0
 802324e:	d115      	bne.n	802327c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8023250:	68f9      	ldr	r1, [r7, #12]
 8023252:	480c      	ldr	r0, [pc, #48]	; (8023284 <FillBuffer+0x68>)
 8023254:	f001 f822 	bl	802429c <HAL_DMA2D_ConfigLayer>
 8023258:	4603      	mov	r3, r0
 802325a:	2b00      	cmp	r3, #0
 802325c:	d10e      	bne.n	802327c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 802325e:	68ba      	ldr	r2, [r7, #8]
 8023260:	683b      	ldr	r3, [r7, #0]
 8023262:	9300      	str	r3, [sp, #0]
 8023264:	687b      	ldr	r3, [r7, #4]
 8023266:	69f9      	ldr	r1, [r7, #28]
 8023268:	4806      	ldr	r0, [pc, #24]	; (8023284 <FillBuffer+0x68>)
 802326a:	f000 fdf2 	bl	8023e52 <HAL_DMA2D_Start>
 802326e:	4603      	mov	r3, r0
 8023270:	2b00      	cmp	r3, #0
 8023272:	d103      	bne.n	802327c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8023274:	210a      	movs	r1, #10
 8023276:	4803      	ldr	r0, [pc, #12]	; (8023284 <FillBuffer+0x68>)
 8023278:	f000 fe16 	bl	8023ea8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 802327c:	bf00      	nop
 802327e:	3710      	adds	r7, #16
 8023280:	46bd      	mov	sp, r7
 8023282:	bd80      	pop	{r7, pc}
 8023284:	200009a8 	.word	0x200009a8
 8023288:	4002b000 	.word	0x4002b000

0802328c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 802328c:	b580      	push	{r7, lr}
 802328e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8023290:	4b29      	ldr	r3, [pc, #164]	; (8023338 <BSP_SDRAM_Init+0xac>)
 8023292:	4a2a      	ldr	r2, [pc, #168]	; (802333c <BSP_SDRAM_Init+0xb0>)
 8023294:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8023296:	4b2a      	ldr	r3, [pc, #168]	; (8023340 <BSP_SDRAM_Init+0xb4>)
 8023298:	2202      	movs	r2, #2
 802329a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 802329c:	4b28      	ldr	r3, [pc, #160]	; (8023340 <BSP_SDRAM_Init+0xb4>)
 802329e:	2207      	movs	r2, #7
 80232a0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80232a2:	4b27      	ldr	r3, [pc, #156]	; (8023340 <BSP_SDRAM_Init+0xb4>)
 80232a4:	2204      	movs	r2, #4
 80232a6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80232a8:	4b25      	ldr	r3, [pc, #148]	; (8023340 <BSP_SDRAM_Init+0xb4>)
 80232aa:	2207      	movs	r2, #7
 80232ac:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80232ae:	4b24      	ldr	r3, [pc, #144]	; (8023340 <BSP_SDRAM_Init+0xb4>)
 80232b0:	2202      	movs	r2, #2
 80232b2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80232b4:	4b22      	ldr	r3, [pc, #136]	; (8023340 <BSP_SDRAM_Init+0xb4>)
 80232b6:	2202      	movs	r2, #2
 80232b8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80232ba:	4b21      	ldr	r3, [pc, #132]	; (8023340 <BSP_SDRAM_Init+0xb4>)
 80232bc:	2202      	movs	r2, #2
 80232be:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80232c0:	4b1d      	ldr	r3, [pc, #116]	; (8023338 <BSP_SDRAM_Init+0xac>)
 80232c2:	2201      	movs	r2, #1
 80232c4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80232c6:	4b1c      	ldr	r3, [pc, #112]	; (8023338 <BSP_SDRAM_Init+0xac>)
 80232c8:	2200      	movs	r2, #0
 80232ca:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80232cc:	4b1a      	ldr	r3, [pc, #104]	; (8023338 <BSP_SDRAM_Init+0xac>)
 80232ce:	2204      	movs	r2, #4
 80232d0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80232d2:	4b19      	ldr	r3, [pc, #100]	; (8023338 <BSP_SDRAM_Init+0xac>)
 80232d4:	2210      	movs	r2, #16
 80232d6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80232d8:	4b17      	ldr	r3, [pc, #92]	; (8023338 <BSP_SDRAM_Init+0xac>)
 80232da:	2240      	movs	r2, #64	; 0x40
 80232dc:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80232de:	4b16      	ldr	r3, [pc, #88]	; (8023338 <BSP_SDRAM_Init+0xac>)
 80232e0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80232e4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80232e6:	4b14      	ldr	r3, [pc, #80]	; (8023338 <BSP_SDRAM_Init+0xac>)
 80232e8:	2200      	movs	r2, #0
 80232ea:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80232ec:	4b12      	ldr	r3, [pc, #72]	; (8023338 <BSP_SDRAM_Init+0xac>)
 80232ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80232f2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80232f4:	4b10      	ldr	r3, [pc, #64]	; (8023338 <BSP_SDRAM_Init+0xac>)
 80232f6:	2200      	movs	r2, #0
 80232f8:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80232fa:	4b0f      	ldr	r3, [pc, #60]	; (8023338 <BSP_SDRAM_Init+0xac>)
 80232fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8023300:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8023302:	2100      	movs	r1, #0
 8023304:	480c      	ldr	r0, [pc, #48]	; (8023338 <BSP_SDRAM_Init+0xac>)
 8023306:	f000 f87f 	bl	8023408 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 802330a:	490d      	ldr	r1, [pc, #52]	; (8023340 <BSP_SDRAM_Init+0xb4>)
 802330c:	480a      	ldr	r0, [pc, #40]	; (8023338 <BSP_SDRAM_Init+0xac>)
 802330e:	f004 ff47 	bl	80281a0 <HAL_SDRAM_Init>
 8023312:	4603      	mov	r3, r0
 8023314:	2b00      	cmp	r3, #0
 8023316:	d003      	beq.n	8023320 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8023318:	4b0a      	ldr	r3, [pc, #40]	; (8023344 <BSP_SDRAM_Init+0xb8>)
 802331a:	2201      	movs	r2, #1
 802331c:	701a      	strb	r2, [r3, #0]
 802331e:	e002      	b.n	8023326 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8023320:	4b08      	ldr	r3, [pc, #32]	; (8023344 <BSP_SDRAM_Init+0xb8>)
 8023322:	2200      	movs	r2, #0
 8023324:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8023326:	f240 506a 	movw	r0, #1386	; 0x56a
 802332a:	f000 f80d 	bl	8023348 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 802332e:	4b05      	ldr	r3, [pc, #20]	; (8023344 <BSP_SDRAM_Init+0xb8>)
 8023330:	781b      	ldrb	r3, [r3, #0]
}
 8023332:	4618      	mov	r0, r3
 8023334:	bd80      	pop	{r7, pc}
 8023336:	bf00      	nop
 8023338:	20000a38 	.word	0x20000a38
 802333c:	a0000140 	.word	0xa0000140
 8023340:	20000a6c 	.word	0x20000a6c
 8023344:	20000054 	.word	0x20000054

08023348 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8023348:	b580      	push	{r7, lr}
 802334a:	b084      	sub	sp, #16
 802334c:	af00      	add	r7, sp, #0
 802334e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8023350:	2300      	movs	r3, #0
 8023352:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8023354:	4b2a      	ldr	r3, [pc, #168]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023356:	2201      	movs	r2, #1
 8023358:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 802335a:	4b29      	ldr	r3, [pc, #164]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802335c:	2208      	movs	r2, #8
 802335e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8023360:	4b27      	ldr	r3, [pc, #156]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023362:	2201      	movs	r2, #1
 8023364:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8023366:	4b26      	ldr	r3, [pc, #152]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023368:	2200      	movs	r2, #0
 802336a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 802336c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023370:	4923      	ldr	r1, [pc, #140]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023372:	4824      	ldr	r0, [pc, #144]	; (8023404 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8023374:	f004 ff48 	bl	8028208 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8023378:	2001      	movs	r0, #1
 802337a:	f000 f993 	bl	80236a4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 802337e:	4b20      	ldr	r3, [pc, #128]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023380:	2202      	movs	r2, #2
 8023382:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8023384:	4b1e      	ldr	r3, [pc, #120]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023386:	2208      	movs	r2, #8
 8023388:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 802338a:	4b1d      	ldr	r3, [pc, #116]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802338c:	2201      	movs	r2, #1
 802338e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8023390:	4b1b      	ldr	r3, [pc, #108]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023392:	2200      	movs	r2, #0
 8023394:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8023396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802339a:	4919      	ldr	r1, [pc, #100]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802339c:	4819      	ldr	r0, [pc, #100]	; (8023404 <BSP_SDRAM_Initialization_sequence+0xbc>)
 802339e:	f004 ff33 	bl	8028208 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80233a2:	4b17      	ldr	r3, [pc, #92]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233a4:	2203      	movs	r2, #3
 80233a6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80233a8:	4b15      	ldr	r3, [pc, #84]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233aa:	2208      	movs	r2, #8
 80233ac:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80233ae:	4b14      	ldr	r3, [pc, #80]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233b0:	2204      	movs	r2, #4
 80233b2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80233b4:	4b12      	ldr	r3, [pc, #72]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233b6:	2200      	movs	r2, #0
 80233b8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80233ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80233be:	4910      	ldr	r1, [pc, #64]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233c0:	4810      	ldr	r0, [pc, #64]	; (8023404 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80233c2:	f004 ff21 	bl	8028208 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80233c6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80233ca:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80233cc:	4b0c      	ldr	r3, [pc, #48]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233ce:	2204      	movs	r2, #4
 80233d0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80233d2:	4b0b      	ldr	r3, [pc, #44]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233d4:	2208      	movs	r2, #8
 80233d6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80233d8:	4b09      	ldr	r3, [pc, #36]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233da:	2201      	movs	r2, #1
 80233dc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80233de:	68fb      	ldr	r3, [r7, #12]
 80233e0:	4a07      	ldr	r2, [pc, #28]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233e2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80233e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80233e8:	4905      	ldr	r1, [pc, #20]	; (8023400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233ea:	4806      	ldr	r0, [pc, #24]	; (8023404 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80233ec:	f004 ff0c 	bl	8028208 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80233f0:	6879      	ldr	r1, [r7, #4]
 80233f2:	4804      	ldr	r0, [pc, #16]	; (8023404 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80233f4:	f004 ff3d 	bl	8028272 <HAL_SDRAM_ProgramRefreshRate>
}
 80233f8:	bf00      	nop
 80233fa:	3710      	adds	r7, #16
 80233fc:	46bd      	mov	sp, r7
 80233fe:	bd80      	pop	{r7, pc}
 8023400:	20000a88 	.word	0x20000a88
 8023404:	20000a38 	.word	0x20000a38

08023408 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8023408:	b580      	push	{r7, lr}
 802340a:	b090      	sub	sp, #64	; 0x40
 802340c:	af00      	add	r7, sp, #0
 802340e:	6078      	str	r0, [r7, #4]
 8023410:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8023412:	687b      	ldr	r3, [r7, #4]
 8023414:	2b00      	cmp	r3, #0
 8023416:	f000 80ec 	beq.w	80235f2 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 802341a:	2300      	movs	r3, #0
 802341c:	62bb      	str	r3, [r7, #40]	; 0x28
 802341e:	4b77      	ldr	r3, [pc, #476]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 8023420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023422:	4a76      	ldr	r2, [pc, #472]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 8023424:	f043 0301 	orr.w	r3, r3, #1
 8023428:	6393      	str	r3, [r2, #56]	; 0x38
 802342a:	4b74      	ldr	r3, [pc, #464]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 802342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802342e:	f003 0301 	and.w	r3, r3, #1
 8023432:	62bb      	str	r3, [r7, #40]	; 0x28
 8023434:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8023436:	2300      	movs	r3, #0
 8023438:	627b      	str	r3, [r7, #36]	; 0x24
 802343a:	4b70      	ldr	r3, [pc, #448]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 802343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802343e:	4a6f      	ldr	r2, [pc, #444]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 8023440:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8023444:	6313      	str	r3, [r2, #48]	; 0x30
 8023446:	4b6d      	ldr	r3, [pc, #436]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 8023448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802344a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802344e:	627b      	str	r3, [r7, #36]	; 0x24
 8023450:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8023452:	2300      	movs	r3, #0
 8023454:	623b      	str	r3, [r7, #32]
 8023456:	4b69      	ldr	r3, [pc, #420]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 8023458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802345a:	4a68      	ldr	r2, [pc, #416]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 802345c:	f043 0302 	orr.w	r3, r3, #2
 8023460:	6313      	str	r3, [r2, #48]	; 0x30
 8023462:	4b66      	ldr	r3, [pc, #408]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 8023464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023466:	f003 0302 	and.w	r3, r3, #2
 802346a:	623b      	str	r3, [r7, #32]
 802346c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802346e:	2300      	movs	r3, #0
 8023470:	61fb      	str	r3, [r7, #28]
 8023472:	4b62      	ldr	r3, [pc, #392]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 8023474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023476:	4a61      	ldr	r2, [pc, #388]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 8023478:	f043 0304 	orr.w	r3, r3, #4
 802347c:	6313      	str	r3, [r2, #48]	; 0x30
 802347e:	4b5f      	ldr	r3, [pc, #380]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 8023480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023482:	f003 0304 	and.w	r3, r3, #4
 8023486:	61fb      	str	r3, [r7, #28]
 8023488:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802348a:	2300      	movs	r3, #0
 802348c:	61bb      	str	r3, [r7, #24]
 802348e:	4b5b      	ldr	r3, [pc, #364]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 8023490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023492:	4a5a      	ldr	r2, [pc, #360]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 8023494:	f043 0308 	orr.w	r3, r3, #8
 8023498:	6313      	str	r3, [r2, #48]	; 0x30
 802349a:	4b58      	ldr	r3, [pc, #352]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 802349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802349e:	f003 0308 	and.w	r3, r3, #8
 80234a2:	61bb      	str	r3, [r7, #24]
 80234a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80234a6:	2300      	movs	r3, #0
 80234a8:	617b      	str	r3, [r7, #20]
 80234aa:	4b54      	ldr	r3, [pc, #336]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 80234ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234ae:	4a53      	ldr	r2, [pc, #332]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 80234b0:	f043 0310 	orr.w	r3, r3, #16
 80234b4:	6313      	str	r3, [r2, #48]	; 0x30
 80234b6:	4b51      	ldr	r3, [pc, #324]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 80234b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234ba:	f003 0310 	and.w	r3, r3, #16
 80234be:	617b      	str	r3, [r7, #20]
 80234c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80234c2:	2300      	movs	r3, #0
 80234c4:	613b      	str	r3, [r7, #16]
 80234c6:	4b4d      	ldr	r3, [pc, #308]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 80234c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234ca:	4a4c      	ldr	r2, [pc, #304]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 80234cc:	f043 0320 	orr.w	r3, r3, #32
 80234d0:	6313      	str	r3, [r2, #48]	; 0x30
 80234d2:	4b4a      	ldr	r3, [pc, #296]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 80234d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234d6:	f003 0320 	and.w	r3, r3, #32
 80234da:	613b      	str	r3, [r7, #16]
 80234dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80234de:	2300      	movs	r3, #0
 80234e0:	60fb      	str	r3, [r7, #12]
 80234e2:	4b46      	ldr	r3, [pc, #280]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 80234e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234e6:	4a45      	ldr	r2, [pc, #276]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 80234e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80234ec:	6313      	str	r3, [r2, #48]	; 0x30
 80234ee:	4b43      	ldr	r3, [pc, #268]	; (80235fc <BSP_SDRAM_MspInit+0x1f4>)
 80234f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80234f6:	60fb      	str	r3, [r7, #12]
 80234f8:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80234fa:	2302      	movs	r3, #2
 80234fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80234fe:	2302      	movs	r3, #2
 8023500:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8023502:	2300      	movs	r3, #0
 8023504:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8023506:	230c      	movs	r3, #12
 8023508:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 802350a:	2360      	movs	r3, #96	; 0x60
 802350c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 802350e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023512:	4619      	mov	r1, r3
 8023514:	483a      	ldr	r0, [pc, #232]	; (8023600 <BSP_SDRAM_MspInit+0x1f8>)
 8023516:	f001 faf5 	bl	8024b04 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 802351a:	2301      	movs	r3, #1
 802351c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 802351e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023522:	4619      	mov	r1, r3
 8023524:	4837      	ldr	r0, [pc, #220]	; (8023604 <BSP_SDRAM_MspInit+0x1fc>)
 8023526:	f001 faed 	bl	8024b04 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 802352a:	f24c 7303 	movw	r3, #50947	; 0xc703
 802352e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8023530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023534:	4619      	mov	r1, r3
 8023536:	4834      	ldr	r0, [pc, #208]	; (8023608 <BSP_SDRAM_MspInit+0x200>)
 8023538:	f001 fae4 	bl	8024b04 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 802353c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8023540:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8023542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023546:	4619      	mov	r1, r3
 8023548:	4830      	ldr	r0, [pc, #192]	; (802360c <BSP_SDRAM_MspInit+0x204>)
 802354a:	f001 fadb 	bl	8024b04 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 802354e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8023552:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8023554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023558:	4619      	mov	r1, r3
 802355a:	482d      	ldr	r0, [pc, #180]	; (8023610 <BSP_SDRAM_MspInit+0x208>)
 802355c:	f001 fad2 	bl	8024b04 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8023560:	f248 1333 	movw	r3, #33075	; 0x8133
 8023564:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8023566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802356a:	4619      	mov	r1, r3
 802356c:	4829      	ldr	r0, [pc, #164]	; (8023614 <BSP_SDRAM_MspInit+0x20c>)
 802356e:	f001 fac9 	bl	8024b04 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8023572:	4b29      	ldr	r3, [pc, #164]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 8023574:	2200      	movs	r2, #0
 8023576:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8023578:	4b27      	ldr	r3, [pc, #156]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 802357a:	2280      	movs	r2, #128	; 0x80
 802357c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 802357e:	4b26      	ldr	r3, [pc, #152]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 8023580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023584:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8023586:	4b24      	ldr	r3, [pc, #144]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 8023588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802358c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 802358e:	4b22      	ldr	r3, [pc, #136]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 8023590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8023594:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8023596:	4b20      	ldr	r3, [pc, #128]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 8023598:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802359c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 802359e:	4b1e      	ldr	r3, [pc, #120]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 80235a0:	2200      	movs	r2, #0
 80235a2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80235a4:	4b1c      	ldr	r3, [pc, #112]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 80235a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80235aa:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80235ac:	4b1a      	ldr	r3, [pc, #104]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 80235ae:	2200      	movs	r2, #0
 80235b0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80235b2:	4b19      	ldr	r3, [pc, #100]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 80235b4:	2203      	movs	r2, #3
 80235b6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80235b8:	4b17      	ldr	r3, [pc, #92]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 80235ba:	2200      	movs	r2, #0
 80235bc:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80235be:	4b16      	ldr	r3, [pc, #88]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 80235c0:	2200      	movs	r2, #0
 80235c2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80235c4:	4b14      	ldr	r3, [pc, #80]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 80235c6:	4a15      	ldr	r2, [pc, #84]	; (802361c <BSP_SDRAM_MspInit+0x214>)
 80235c8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80235ca:	687b      	ldr	r3, [r7, #4]
 80235cc:	4a12      	ldr	r2, [pc, #72]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 80235ce:	631a      	str	r2, [r3, #48]	; 0x30
 80235d0:	4a11      	ldr	r2, [pc, #68]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 80235d2:	687b      	ldr	r3, [r7, #4]
 80235d4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80235d6:	4810      	ldr	r0, [pc, #64]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 80235d8:	f000 fa50 	bl	8023a7c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80235dc:	480e      	ldr	r0, [pc, #56]	; (8023618 <BSP_SDRAM_MspInit+0x210>)
 80235de:	f000 f99f 	bl	8023920 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80235e2:	2200      	movs	r2, #0
 80235e4:	210f      	movs	r1, #15
 80235e6:	2038      	movs	r0, #56	; 0x38
 80235e8:	f000 f94f 	bl	802388a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80235ec:	2038      	movs	r0, #56	; 0x38
 80235ee:	f000 f968 	bl	80238c2 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80235f2:	bf00      	nop
 80235f4:	3740      	adds	r7, #64	; 0x40
 80235f6:	46bd      	mov	sp, r7
 80235f8:	bd80      	pop	{r7, pc}
 80235fa:	bf00      	nop
 80235fc:	40023800 	.word	0x40023800
 8023600:	40020400 	.word	0x40020400
 8023604:	40020800 	.word	0x40020800
 8023608:	40020c00 	.word	0x40020c00
 802360c:	40021000 	.word	0x40021000
 8023610:	40021400 	.word	0x40021400
 8023614:	40021800 	.word	0x40021800
 8023618:	20000a98 	.word	0x20000a98
 802361c:	40026410 	.word	0x40026410

08023620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8023620:	b580      	push	{r7, lr}
 8023622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8023624:	4b0e      	ldr	r3, [pc, #56]	; (8023660 <HAL_Init+0x40>)
 8023626:	681b      	ldr	r3, [r3, #0]
 8023628:	4a0d      	ldr	r2, [pc, #52]	; (8023660 <HAL_Init+0x40>)
 802362a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802362e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8023630:	4b0b      	ldr	r3, [pc, #44]	; (8023660 <HAL_Init+0x40>)
 8023632:	681b      	ldr	r3, [r3, #0]
 8023634:	4a0a      	ldr	r2, [pc, #40]	; (8023660 <HAL_Init+0x40>)
 8023636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802363a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 802363c:	4b08      	ldr	r3, [pc, #32]	; (8023660 <HAL_Init+0x40>)
 802363e:	681b      	ldr	r3, [r3, #0]
 8023640:	4a07      	ldr	r2, [pc, #28]	; (8023660 <HAL_Init+0x40>)
 8023642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8023646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8023648:	2003      	movs	r0, #3
 802364a:	f000 f913 	bl	8023874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802364e:	200f      	movs	r0, #15
 8023650:	f7fe fc38 	bl	8021ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8023654:	f7fe f85e 	bl	8021714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8023658:	2300      	movs	r3, #0
}
 802365a:	4618      	mov	r0, r3
 802365c:	bd80      	pop	{r7, pc}
 802365e:	bf00      	nop
 8023660:	40023c00 	.word	0x40023c00

08023664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8023664:	b480      	push	{r7}
 8023666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8023668:	4b06      	ldr	r3, [pc, #24]	; (8023684 <HAL_IncTick+0x20>)
 802366a:	781b      	ldrb	r3, [r3, #0]
 802366c:	461a      	mov	r2, r3
 802366e:	4b06      	ldr	r3, [pc, #24]	; (8023688 <HAL_IncTick+0x24>)
 8023670:	681b      	ldr	r3, [r3, #0]
 8023672:	4413      	add	r3, r2
 8023674:	4a04      	ldr	r2, [pc, #16]	; (8023688 <HAL_IncTick+0x24>)
 8023676:	6013      	str	r3, [r2, #0]
}
 8023678:	bf00      	nop
 802367a:	46bd      	mov	sp, r7
 802367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023680:	4770      	bx	lr
 8023682:	bf00      	nop
 8023684:	2000005c 	.word	0x2000005c
 8023688:	20000af8 	.word	0x20000af8

0802368c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802368c:	b480      	push	{r7}
 802368e:	af00      	add	r7, sp, #0
  return uwTick;
 8023690:	4b03      	ldr	r3, [pc, #12]	; (80236a0 <HAL_GetTick+0x14>)
 8023692:	681b      	ldr	r3, [r3, #0]
}
 8023694:	4618      	mov	r0, r3
 8023696:	46bd      	mov	sp, r7
 8023698:	f85d 7b04 	ldr.w	r7, [sp], #4
 802369c:	4770      	bx	lr
 802369e:	bf00      	nop
 80236a0:	20000af8 	.word	0x20000af8

080236a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80236a4:	b580      	push	{r7, lr}
 80236a6:	b084      	sub	sp, #16
 80236a8:	af00      	add	r7, sp, #0
 80236aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80236ac:	f7ff ffee 	bl	802368c <HAL_GetTick>
 80236b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80236b2:	687b      	ldr	r3, [r7, #4]
 80236b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80236b6:	68fb      	ldr	r3, [r7, #12]
 80236b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80236bc:	d005      	beq.n	80236ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80236be:	4b0a      	ldr	r3, [pc, #40]	; (80236e8 <HAL_Delay+0x44>)
 80236c0:	781b      	ldrb	r3, [r3, #0]
 80236c2:	461a      	mov	r2, r3
 80236c4:	68fb      	ldr	r3, [r7, #12]
 80236c6:	4413      	add	r3, r2
 80236c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80236ca:	bf00      	nop
 80236cc:	f7ff ffde 	bl	802368c <HAL_GetTick>
 80236d0:	4602      	mov	r2, r0
 80236d2:	68bb      	ldr	r3, [r7, #8]
 80236d4:	1ad3      	subs	r3, r2, r3
 80236d6:	68fa      	ldr	r2, [r7, #12]
 80236d8:	429a      	cmp	r2, r3
 80236da:	d8f7      	bhi.n	80236cc <HAL_Delay+0x28>
  {
  }
}
 80236dc:	bf00      	nop
 80236de:	bf00      	nop
 80236e0:	3710      	adds	r7, #16
 80236e2:	46bd      	mov	sp, r7
 80236e4:	bd80      	pop	{r7, pc}
 80236e6:	bf00      	nop
 80236e8:	2000005c 	.word	0x2000005c

080236ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80236ec:	b480      	push	{r7}
 80236ee:	b085      	sub	sp, #20
 80236f0:	af00      	add	r7, sp, #0
 80236f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80236f4:	687b      	ldr	r3, [r7, #4]
 80236f6:	f003 0307 	and.w	r3, r3, #7
 80236fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80236fc:	4b0c      	ldr	r3, [pc, #48]	; (8023730 <__NVIC_SetPriorityGrouping+0x44>)
 80236fe:	68db      	ldr	r3, [r3, #12]
 8023700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8023702:	68ba      	ldr	r2, [r7, #8]
 8023704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8023708:	4013      	ands	r3, r2
 802370a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802370c:	68fb      	ldr	r3, [r7, #12]
 802370e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8023710:	68bb      	ldr	r3, [r7, #8]
 8023712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8023714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8023718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802371c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802371e:	4a04      	ldr	r2, [pc, #16]	; (8023730 <__NVIC_SetPriorityGrouping+0x44>)
 8023720:	68bb      	ldr	r3, [r7, #8]
 8023722:	60d3      	str	r3, [r2, #12]
}
 8023724:	bf00      	nop
 8023726:	3714      	adds	r7, #20
 8023728:	46bd      	mov	sp, r7
 802372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802372e:	4770      	bx	lr
 8023730:	e000ed00 	.word	0xe000ed00

08023734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8023734:	b480      	push	{r7}
 8023736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8023738:	4b04      	ldr	r3, [pc, #16]	; (802374c <__NVIC_GetPriorityGrouping+0x18>)
 802373a:	68db      	ldr	r3, [r3, #12]
 802373c:	0a1b      	lsrs	r3, r3, #8
 802373e:	f003 0307 	and.w	r3, r3, #7
}
 8023742:	4618      	mov	r0, r3
 8023744:	46bd      	mov	sp, r7
 8023746:	f85d 7b04 	ldr.w	r7, [sp], #4
 802374a:	4770      	bx	lr
 802374c:	e000ed00 	.word	0xe000ed00

08023750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023750:	b480      	push	{r7}
 8023752:	b083      	sub	sp, #12
 8023754:	af00      	add	r7, sp, #0
 8023756:	4603      	mov	r3, r0
 8023758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802375e:	2b00      	cmp	r3, #0
 8023760:	db0b      	blt.n	802377a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8023762:	79fb      	ldrb	r3, [r7, #7]
 8023764:	f003 021f 	and.w	r2, r3, #31
 8023768:	4907      	ldr	r1, [pc, #28]	; (8023788 <__NVIC_EnableIRQ+0x38>)
 802376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802376e:	095b      	lsrs	r3, r3, #5
 8023770:	2001      	movs	r0, #1
 8023772:	fa00 f202 	lsl.w	r2, r0, r2
 8023776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 802377a:	bf00      	nop
 802377c:	370c      	adds	r7, #12
 802377e:	46bd      	mov	sp, r7
 8023780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023784:	4770      	bx	lr
 8023786:	bf00      	nop
 8023788:	e000e100 	.word	0xe000e100

0802378c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802378c:	b480      	push	{r7}
 802378e:	b083      	sub	sp, #12
 8023790:	af00      	add	r7, sp, #0
 8023792:	4603      	mov	r3, r0
 8023794:	6039      	str	r1, [r7, #0]
 8023796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8023798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802379c:	2b00      	cmp	r3, #0
 802379e:	db0a      	blt.n	80237b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80237a0:	683b      	ldr	r3, [r7, #0]
 80237a2:	b2da      	uxtb	r2, r3
 80237a4:	490c      	ldr	r1, [pc, #48]	; (80237d8 <__NVIC_SetPriority+0x4c>)
 80237a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80237aa:	0112      	lsls	r2, r2, #4
 80237ac:	b2d2      	uxtb	r2, r2
 80237ae:	440b      	add	r3, r1
 80237b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80237b4:	e00a      	b.n	80237cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80237b6:	683b      	ldr	r3, [r7, #0]
 80237b8:	b2da      	uxtb	r2, r3
 80237ba:	4908      	ldr	r1, [pc, #32]	; (80237dc <__NVIC_SetPriority+0x50>)
 80237bc:	79fb      	ldrb	r3, [r7, #7]
 80237be:	f003 030f 	and.w	r3, r3, #15
 80237c2:	3b04      	subs	r3, #4
 80237c4:	0112      	lsls	r2, r2, #4
 80237c6:	b2d2      	uxtb	r2, r2
 80237c8:	440b      	add	r3, r1
 80237ca:	761a      	strb	r2, [r3, #24]
}
 80237cc:	bf00      	nop
 80237ce:	370c      	adds	r7, #12
 80237d0:	46bd      	mov	sp, r7
 80237d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237d6:	4770      	bx	lr
 80237d8:	e000e100 	.word	0xe000e100
 80237dc:	e000ed00 	.word	0xe000ed00

080237e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80237e0:	b480      	push	{r7}
 80237e2:	b089      	sub	sp, #36	; 0x24
 80237e4:	af00      	add	r7, sp, #0
 80237e6:	60f8      	str	r0, [r7, #12]
 80237e8:	60b9      	str	r1, [r7, #8]
 80237ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80237ec:	68fb      	ldr	r3, [r7, #12]
 80237ee:	f003 0307 	and.w	r3, r3, #7
 80237f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80237f4:	69fb      	ldr	r3, [r7, #28]
 80237f6:	f1c3 0307 	rsb	r3, r3, #7
 80237fa:	2b04      	cmp	r3, #4
 80237fc:	bf28      	it	cs
 80237fe:	2304      	movcs	r3, #4
 8023800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8023802:	69fb      	ldr	r3, [r7, #28]
 8023804:	3304      	adds	r3, #4
 8023806:	2b06      	cmp	r3, #6
 8023808:	d902      	bls.n	8023810 <NVIC_EncodePriority+0x30>
 802380a:	69fb      	ldr	r3, [r7, #28]
 802380c:	3b03      	subs	r3, #3
 802380e:	e000      	b.n	8023812 <NVIC_EncodePriority+0x32>
 8023810:	2300      	movs	r3, #0
 8023812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8023814:	f04f 32ff 	mov.w	r2, #4294967295
 8023818:	69bb      	ldr	r3, [r7, #24]
 802381a:	fa02 f303 	lsl.w	r3, r2, r3
 802381e:	43da      	mvns	r2, r3
 8023820:	68bb      	ldr	r3, [r7, #8]
 8023822:	401a      	ands	r2, r3
 8023824:	697b      	ldr	r3, [r7, #20]
 8023826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8023828:	f04f 31ff 	mov.w	r1, #4294967295
 802382c:	697b      	ldr	r3, [r7, #20]
 802382e:	fa01 f303 	lsl.w	r3, r1, r3
 8023832:	43d9      	mvns	r1, r3
 8023834:	687b      	ldr	r3, [r7, #4]
 8023836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8023838:	4313      	orrs	r3, r2
         );
}
 802383a:	4618      	mov	r0, r3
 802383c:	3724      	adds	r7, #36	; 0x24
 802383e:	46bd      	mov	sp, r7
 8023840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023844:	4770      	bx	lr
	...

08023848 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8023848:	b480      	push	{r7}
 802384a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 802384c:	f3bf 8f4f 	dsb	sy
}
 8023850:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8023852:	4b06      	ldr	r3, [pc, #24]	; (802386c <__NVIC_SystemReset+0x24>)
 8023854:	68db      	ldr	r3, [r3, #12]
 8023856:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 802385a:	4904      	ldr	r1, [pc, #16]	; (802386c <__NVIC_SystemReset+0x24>)
 802385c:	4b04      	ldr	r3, [pc, #16]	; (8023870 <__NVIC_SystemReset+0x28>)
 802385e:	4313      	orrs	r3, r2
 8023860:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8023862:	f3bf 8f4f 	dsb	sy
}
 8023866:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8023868:	bf00      	nop
 802386a:	e7fd      	b.n	8023868 <__NVIC_SystemReset+0x20>
 802386c:	e000ed00 	.word	0xe000ed00
 8023870:	05fa0004 	.word	0x05fa0004

08023874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8023874:	b580      	push	{r7, lr}
 8023876:	b082      	sub	sp, #8
 8023878:	af00      	add	r7, sp, #0
 802387a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802387c:	6878      	ldr	r0, [r7, #4]
 802387e:	f7ff ff35 	bl	80236ec <__NVIC_SetPriorityGrouping>
}
 8023882:	bf00      	nop
 8023884:	3708      	adds	r7, #8
 8023886:	46bd      	mov	sp, r7
 8023888:	bd80      	pop	{r7, pc}

0802388a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802388a:	b580      	push	{r7, lr}
 802388c:	b086      	sub	sp, #24
 802388e:	af00      	add	r7, sp, #0
 8023890:	4603      	mov	r3, r0
 8023892:	60b9      	str	r1, [r7, #8]
 8023894:	607a      	str	r2, [r7, #4]
 8023896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8023898:	2300      	movs	r3, #0
 802389a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 802389c:	f7ff ff4a 	bl	8023734 <__NVIC_GetPriorityGrouping>
 80238a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80238a2:	687a      	ldr	r2, [r7, #4]
 80238a4:	68b9      	ldr	r1, [r7, #8]
 80238a6:	6978      	ldr	r0, [r7, #20]
 80238a8:	f7ff ff9a 	bl	80237e0 <NVIC_EncodePriority>
 80238ac:	4602      	mov	r2, r0
 80238ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80238b2:	4611      	mov	r1, r2
 80238b4:	4618      	mov	r0, r3
 80238b6:	f7ff ff69 	bl	802378c <__NVIC_SetPriority>
}
 80238ba:	bf00      	nop
 80238bc:	3718      	adds	r7, #24
 80238be:	46bd      	mov	sp, r7
 80238c0:	bd80      	pop	{r7, pc}

080238c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80238c2:	b580      	push	{r7, lr}
 80238c4:	b082      	sub	sp, #8
 80238c6:	af00      	add	r7, sp, #0
 80238c8:	4603      	mov	r3, r0
 80238ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80238cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80238d0:	4618      	mov	r0, r3
 80238d2:	f7ff ff3d 	bl	8023750 <__NVIC_EnableIRQ>
}
 80238d6:	bf00      	nop
 80238d8:	3708      	adds	r7, #8
 80238da:	46bd      	mov	sp, r7
 80238dc:	bd80      	pop	{r7, pc}

080238de <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80238de:	b580      	push	{r7, lr}
 80238e0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80238e2:	f7ff ffb1 	bl	8023848 <__NVIC_SystemReset>

080238e6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80238e6:	b580      	push	{r7, lr}
 80238e8:	b082      	sub	sp, #8
 80238ea:	af00      	add	r7, sp, #0
 80238ec:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80238ee:	687b      	ldr	r3, [r7, #4]
 80238f0:	2b00      	cmp	r3, #0
 80238f2:	d101      	bne.n	80238f8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80238f4:	2301      	movs	r3, #1
 80238f6:	e00e      	b.n	8023916 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80238f8:	687b      	ldr	r3, [r7, #4]
 80238fa:	795b      	ldrb	r3, [r3, #5]
 80238fc:	b2db      	uxtb	r3, r3
 80238fe:	2b00      	cmp	r3, #0
 8023900:	d105      	bne.n	802390e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8023902:	687b      	ldr	r3, [r7, #4]
 8023904:	2200      	movs	r2, #0
 8023906:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8023908:	6878      	ldr	r0, [r7, #4]
 802390a:	f7fd ff2b 	bl	8021764 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 802390e:	687b      	ldr	r3, [r7, #4]
 8023910:	2201      	movs	r2, #1
 8023912:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8023914:	2300      	movs	r3, #0
}
 8023916:	4618      	mov	r0, r3
 8023918:	3708      	adds	r7, #8
 802391a:	46bd      	mov	sp, r7
 802391c:	bd80      	pop	{r7, pc}
	...

08023920 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8023920:	b580      	push	{r7, lr}
 8023922:	b086      	sub	sp, #24
 8023924:	af00      	add	r7, sp, #0
 8023926:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8023928:	2300      	movs	r3, #0
 802392a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 802392c:	f7ff feae 	bl	802368c <HAL_GetTick>
 8023930:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8023932:	687b      	ldr	r3, [r7, #4]
 8023934:	2b00      	cmp	r3, #0
 8023936:	d101      	bne.n	802393c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8023938:	2301      	movs	r3, #1
 802393a:	e099      	b.n	8023a70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 802393c:	687b      	ldr	r3, [r7, #4]
 802393e:	2202      	movs	r2, #2
 8023940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8023944:	687b      	ldr	r3, [r7, #4]
 8023946:	2200      	movs	r2, #0
 8023948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 802394c:	687b      	ldr	r3, [r7, #4]
 802394e:	681b      	ldr	r3, [r3, #0]
 8023950:	681a      	ldr	r2, [r3, #0]
 8023952:	687b      	ldr	r3, [r7, #4]
 8023954:	681b      	ldr	r3, [r3, #0]
 8023956:	f022 0201 	bic.w	r2, r2, #1
 802395a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802395c:	e00f      	b.n	802397e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802395e:	f7ff fe95 	bl	802368c <HAL_GetTick>
 8023962:	4602      	mov	r2, r0
 8023964:	693b      	ldr	r3, [r7, #16]
 8023966:	1ad3      	subs	r3, r2, r3
 8023968:	2b05      	cmp	r3, #5
 802396a:	d908      	bls.n	802397e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802396c:	687b      	ldr	r3, [r7, #4]
 802396e:	2220      	movs	r2, #32
 8023970:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8023972:	687b      	ldr	r3, [r7, #4]
 8023974:	2203      	movs	r2, #3
 8023976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 802397a:	2303      	movs	r3, #3
 802397c:	e078      	b.n	8023a70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802397e:	687b      	ldr	r3, [r7, #4]
 8023980:	681b      	ldr	r3, [r3, #0]
 8023982:	681b      	ldr	r3, [r3, #0]
 8023984:	f003 0301 	and.w	r3, r3, #1
 8023988:	2b00      	cmp	r3, #0
 802398a:	d1e8      	bne.n	802395e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 802398c:	687b      	ldr	r3, [r7, #4]
 802398e:	681b      	ldr	r3, [r3, #0]
 8023990:	681b      	ldr	r3, [r3, #0]
 8023992:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8023994:	697a      	ldr	r2, [r7, #20]
 8023996:	4b38      	ldr	r3, [pc, #224]	; (8023a78 <HAL_DMA_Init+0x158>)
 8023998:	4013      	ands	r3, r2
 802399a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802399c:	687b      	ldr	r3, [r7, #4]
 802399e:	685a      	ldr	r2, [r3, #4]
 80239a0:	687b      	ldr	r3, [r7, #4]
 80239a2:	689b      	ldr	r3, [r3, #8]
 80239a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80239a6:	687b      	ldr	r3, [r7, #4]
 80239a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80239aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80239ac:	687b      	ldr	r3, [r7, #4]
 80239ae:	691b      	ldr	r3, [r3, #16]
 80239b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80239b2:	687b      	ldr	r3, [r7, #4]
 80239b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80239b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80239b8:	687b      	ldr	r3, [r7, #4]
 80239ba:	699b      	ldr	r3, [r3, #24]
 80239bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80239be:	687b      	ldr	r3, [r7, #4]
 80239c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80239c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80239c4:	687b      	ldr	r3, [r7, #4]
 80239c6:	6a1b      	ldr	r3, [r3, #32]
 80239c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80239ca:	697a      	ldr	r2, [r7, #20]
 80239cc:	4313      	orrs	r3, r2
 80239ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80239d0:	687b      	ldr	r3, [r7, #4]
 80239d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80239d4:	2b04      	cmp	r3, #4
 80239d6:	d107      	bne.n	80239e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80239d8:	687b      	ldr	r3, [r7, #4]
 80239da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80239dc:	687b      	ldr	r3, [r7, #4]
 80239de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80239e0:	4313      	orrs	r3, r2
 80239e2:	697a      	ldr	r2, [r7, #20]
 80239e4:	4313      	orrs	r3, r2
 80239e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80239e8:	687b      	ldr	r3, [r7, #4]
 80239ea:	681b      	ldr	r3, [r3, #0]
 80239ec:	697a      	ldr	r2, [r7, #20]
 80239ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80239f0:	687b      	ldr	r3, [r7, #4]
 80239f2:	681b      	ldr	r3, [r3, #0]
 80239f4:	695b      	ldr	r3, [r3, #20]
 80239f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80239f8:	697b      	ldr	r3, [r7, #20]
 80239fa:	f023 0307 	bic.w	r3, r3, #7
 80239fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8023a00:	687b      	ldr	r3, [r7, #4]
 8023a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023a04:	697a      	ldr	r2, [r7, #20]
 8023a06:	4313      	orrs	r3, r2
 8023a08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8023a0a:	687b      	ldr	r3, [r7, #4]
 8023a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023a0e:	2b04      	cmp	r3, #4
 8023a10:	d117      	bne.n	8023a42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8023a12:	687b      	ldr	r3, [r7, #4]
 8023a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023a16:	697a      	ldr	r2, [r7, #20]
 8023a18:	4313      	orrs	r3, r2
 8023a1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8023a1c:	687b      	ldr	r3, [r7, #4]
 8023a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023a20:	2b00      	cmp	r3, #0
 8023a22:	d00e      	beq.n	8023a42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8023a24:	6878      	ldr	r0, [r7, #4]
 8023a26:	f000 f94f 	bl	8023cc8 <DMA_CheckFifoParam>
 8023a2a:	4603      	mov	r3, r0
 8023a2c:	2b00      	cmp	r3, #0
 8023a2e:	d008      	beq.n	8023a42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8023a30:	687b      	ldr	r3, [r7, #4]
 8023a32:	2240      	movs	r2, #64	; 0x40
 8023a34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8023a36:	687b      	ldr	r3, [r7, #4]
 8023a38:	2201      	movs	r2, #1
 8023a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8023a3e:	2301      	movs	r3, #1
 8023a40:	e016      	b.n	8023a70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8023a42:	687b      	ldr	r3, [r7, #4]
 8023a44:	681b      	ldr	r3, [r3, #0]
 8023a46:	697a      	ldr	r2, [r7, #20]
 8023a48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8023a4a:	6878      	ldr	r0, [r7, #4]
 8023a4c:	f000 f906 	bl	8023c5c <DMA_CalcBaseAndBitshift>
 8023a50:	4603      	mov	r3, r0
 8023a52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023a54:	687b      	ldr	r3, [r7, #4]
 8023a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a58:	223f      	movs	r2, #63	; 0x3f
 8023a5a:	409a      	lsls	r2, r3
 8023a5c:	68fb      	ldr	r3, [r7, #12]
 8023a5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023a60:	687b      	ldr	r3, [r7, #4]
 8023a62:	2200      	movs	r2, #0
 8023a64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8023a66:	687b      	ldr	r3, [r7, #4]
 8023a68:	2201      	movs	r2, #1
 8023a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8023a6e:	2300      	movs	r3, #0
}
 8023a70:	4618      	mov	r0, r3
 8023a72:	3718      	adds	r7, #24
 8023a74:	46bd      	mov	sp, r7
 8023a76:	bd80      	pop	{r7, pc}
 8023a78:	f010803f 	.word	0xf010803f

08023a7c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8023a7c:	b580      	push	{r7, lr}
 8023a7e:	b084      	sub	sp, #16
 8023a80:	af00      	add	r7, sp, #0
 8023a82:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8023a84:	687b      	ldr	r3, [r7, #4]
 8023a86:	2b00      	cmp	r3, #0
 8023a88:	d101      	bne.n	8023a8e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8023a8a:	2301      	movs	r3, #1
 8023a8c:	e050      	b.n	8023b30 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8023a8e:	687b      	ldr	r3, [r7, #4]
 8023a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023a94:	b2db      	uxtb	r3, r3
 8023a96:	2b02      	cmp	r3, #2
 8023a98:	d101      	bne.n	8023a9e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8023a9a:	2302      	movs	r3, #2
 8023a9c:	e048      	b.n	8023b30 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8023a9e:	687b      	ldr	r3, [r7, #4]
 8023aa0:	681b      	ldr	r3, [r3, #0]
 8023aa2:	681a      	ldr	r2, [r3, #0]
 8023aa4:	687b      	ldr	r3, [r7, #4]
 8023aa6:	681b      	ldr	r3, [r3, #0]
 8023aa8:	f022 0201 	bic.w	r2, r2, #1
 8023aac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8023aae:	687b      	ldr	r3, [r7, #4]
 8023ab0:	681b      	ldr	r3, [r3, #0]
 8023ab2:	2200      	movs	r2, #0
 8023ab4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8023ab6:	687b      	ldr	r3, [r7, #4]
 8023ab8:	681b      	ldr	r3, [r3, #0]
 8023aba:	2200      	movs	r2, #0
 8023abc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8023abe:	687b      	ldr	r3, [r7, #4]
 8023ac0:	681b      	ldr	r3, [r3, #0]
 8023ac2:	2200      	movs	r2, #0
 8023ac4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8023ac6:	687b      	ldr	r3, [r7, #4]
 8023ac8:	681b      	ldr	r3, [r3, #0]
 8023aca:	2200      	movs	r2, #0
 8023acc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8023ace:	687b      	ldr	r3, [r7, #4]
 8023ad0:	681b      	ldr	r3, [r3, #0]
 8023ad2:	2200      	movs	r2, #0
 8023ad4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8023ad6:	687b      	ldr	r3, [r7, #4]
 8023ad8:	681b      	ldr	r3, [r3, #0]
 8023ada:	2221      	movs	r2, #33	; 0x21
 8023adc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8023ade:	6878      	ldr	r0, [r7, #4]
 8023ae0:	f000 f8bc 	bl	8023c5c <DMA_CalcBaseAndBitshift>
 8023ae4:	4603      	mov	r3, r0
 8023ae6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8023ae8:	687b      	ldr	r3, [r7, #4]
 8023aea:	2200      	movs	r2, #0
 8023aec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8023aee:	687b      	ldr	r3, [r7, #4]
 8023af0:	2200      	movs	r2, #0
 8023af2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8023af4:	687b      	ldr	r3, [r7, #4]
 8023af6:	2200      	movs	r2, #0
 8023af8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8023afa:	687b      	ldr	r3, [r7, #4]
 8023afc:	2200      	movs	r2, #0
 8023afe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8023b00:	687b      	ldr	r3, [r7, #4]
 8023b02:	2200      	movs	r2, #0
 8023b04:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8023b06:	687b      	ldr	r3, [r7, #4]
 8023b08:	2200      	movs	r2, #0
 8023b0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023b0c:	687b      	ldr	r3, [r7, #4]
 8023b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023b10:	223f      	movs	r2, #63	; 0x3f
 8023b12:	409a      	lsls	r2, r3
 8023b14:	68fb      	ldr	r3, [r7, #12]
 8023b16:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023b18:	687b      	ldr	r3, [r7, #4]
 8023b1a:	2200      	movs	r2, #0
 8023b1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8023b1e:	687b      	ldr	r3, [r7, #4]
 8023b20:	2200      	movs	r2, #0
 8023b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8023b26:	687b      	ldr	r3, [r7, #4]
 8023b28:	2200      	movs	r2, #0
 8023b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8023b2e:	2300      	movs	r3, #0
}
 8023b30:	4618      	mov	r0, r3
 8023b32:	3710      	adds	r7, #16
 8023b34:	46bd      	mov	sp, r7
 8023b36:	bd80      	pop	{r7, pc}

08023b38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8023b38:	b580      	push	{r7, lr}
 8023b3a:	b084      	sub	sp, #16
 8023b3c:	af00      	add	r7, sp, #0
 8023b3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8023b40:	687b      	ldr	r3, [r7, #4]
 8023b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023b44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8023b46:	f7ff fda1 	bl	802368c <HAL_GetTick>
 8023b4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023b4c:	687b      	ldr	r3, [r7, #4]
 8023b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023b52:	b2db      	uxtb	r3, r3
 8023b54:	2b02      	cmp	r3, #2
 8023b56:	d008      	beq.n	8023b6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8023b58:	687b      	ldr	r3, [r7, #4]
 8023b5a:	2280      	movs	r2, #128	; 0x80
 8023b5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	2200      	movs	r2, #0
 8023b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8023b66:	2301      	movs	r3, #1
 8023b68:	e052      	b.n	8023c10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8023b6a:	687b      	ldr	r3, [r7, #4]
 8023b6c:	681b      	ldr	r3, [r3, #0]
 8023b6e:	681a      	ldr	r2, [r3, #0]
 8023b70:	687b      	ldr	r3, [r7, #4]
 8023b72:	681b      	ldr	r3, [r3, #0]
 8023b74:	f022 0216 	bic.w	r2, r2, #22
 8023b78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8023b7a:	687b      	ldr	r3, [r7, #4]
 8023b7c:	681b      	ldr	r3, [r3, #0]
 8023b7e:	695a      	ldr	r2, [r3, #20]
 8023b80:	687b      	ldr	r3, [r7, #4]
 8023b82:	681b      	ldr	r3, [r3, #0]
 8023b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8023b88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8023b8a:	687b      	ldr	r3, [r7, #4]
 8023b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b8e:	2b00      	cmp	r3, #0
 8023b90:	d103      	bne.n	8023b9a <HAL_DMA_Abort+0x62>
 8023b92:	687b      	ldr	r3, [r7, #4]
 8023b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023b96:	2b00      	cmp	r3, #0
 8023b98:	d007      	beq.n	8023baa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8023b9a:	687b      	ldr	r3, [r7, #4]
 8023b9c:	681b      	ldr	r3, [r3, #0]
 8023b9e:	681a      	ldr	r2, [r3, #0]
 8023ba0:	687b      	ldr	r3, [r7, #4]
 8023ba2:	681b      	ldr	r3, [r3, #0]
 8023ba4:	f022 0208 	bic.w	r2, r2, #8
 8023ba8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8023baa:	687b      	ldr	r3, [r7, #4]
 8023bac:	681b      	ldr	r3, [r3, #0]
 8023bae:	681a      	ldr	r2, [r3, #0]
 8023bb0:	687b      	ldr	r3, [r7, #4]
 8023bb2:	681b      	ldr	r3, [r3, #0]
 8023bb4:	f022 0201 	bic.w	r2, r2, #1
 8023bb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023bba:	e013      	b.n	8023be4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8023bbc:	f7ff fd66 	bl	802368c <HAL_GetTick>
 8023bc0:	4602      	mov	r2, r0
 8023bc2:	68bb      	ldr	r3, [r7, #8]
 8023bc4:	1ad3      	subs	r3, r2, r3
 8023bc6:	2b05      	cmp	r3, #5
 8023bc8:	d90c      	bls.n	8023be4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8023bca:	687b      	ldr	r3, [r7, #4]
 8023bcc:	2220      	movs	r2, #32
 8023bce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8023bd0:	687b      	ldr	r3, [r7, #4]
 8023bd2:	2203      	movs	r2, #3
 8023bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8023bd8:	687b      	ldr	r3, [r7, #4]
 8023bda:	2200      	movs	r2, #0
 8023bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8023be0:	2303      	movs	r3, #3
 8023be2:	e015      	b.n	8023c10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023be4:	687b      	ldr	r3, [r7, #4]
 8023be6:	681b      	ldr	r3, [r3, #0]
 8023be8:	681b      	ldr	r3, [r3, #0]
 8023bea:	f003 0301 	and.w	r3, r3, #1
 8023bee:	2b00      	cmp	r3, #0
 8023bf0:	d1e4      	bne.n	8023bbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023bf2:	687b      	ldr	r3, [r7, #4]
 8023bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023bf6:	223f      	movs	r2, #63	; 0x3f
 8023bf8:	409a      	lsls	r2, r3
 8023bfa:	68fb      	ldr	r3, [r7, #12]
 8023bfc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8023bfe:	687b      	ldr	r3, [r7, #4]
 8023c00:	2201      	movs	r2, #1
 8023c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8023c06:	687b      	ldr	r3, [r7, #4]
 8023c08:	2200      	movs	r2, #0
 8023c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8023c0e:	2300      	movs	r3, #0
}
 8023c10:	4618      	mov	r0, r3
 8023c12:	3710      	adds	r7, #16
 8023c14:	46bd      	mov	sp, r7
 8023c16:	bd80      	pop	{r7, pc}

08023c18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8023c18:	b480      	push	{r7}
 8023c1a:	b083      	sub	sp, #12
 8023c1c:	af00      	add	r7, sp, #0
 8023c1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023c20:	687b      	ldr	r3, [r7, #4]
 8023c22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023c26:	b2db      	uxtb	r3, r3
 8023c28:	2b02      	cmp	r3, #2
 8023c2a:	d004      	beq.n	8023c36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8023c2c:	687b      	ldr	r3, [r7, #4]
 8023c2e:	2280      	movs	r2, #128	; 0x80
 8023c30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8023c32:	2301      	movs	r3, #1
 8023c34:	e00c      	b.n	8023c50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8023c36:	687b      	ldr	r3, [r7, #4]
 8023c38:	2205      	movs	r2, #5
 8023c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8023c3e:	687b      	ldr	r3, [r7, #4]
 8023c40:	681b      	ldr	r3, [r3, #0]
 8023c42:	681a      	ldr	r2, [r3, #0]
 8023c44:	687b      	ldr	r3, [r7, #4]
 8023c46:	681b      	ldr	r3, [r3, #0]
 8023c48:	f022 0201 	bic.w	r2, r2, #1
 8023c4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8023c4e:	2300      	movs	r3, #0
}
 8023c50:	4618      	mov	r0, r3
 8023c52:	370c      	adds	r7, #12
 8023c54:	46bd      	mov	sp, r7
 8023c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c5a:	4770      	bx	lr

08023c5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8023c5c:	b480      	push	{r7}
 8023c5e:	b085      	sub	sp, #20
 8023c60:	af00      	add	r7, sp, #0
 8023c62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8023c64:	687b      	ldr	r3, [r7, #4]
 8023c66:	681b      	ldr	r3, [r3, #0]
 8023c68:	b2db      	uxtb	r3, r3
 8023c6a:	3b10      	subs	r3, #16
 8023c6c:	4a14      	ldr	r2, [pc, #80]	; (8023cc0 <DMA_CalcBaseAndBitshift+0x64>)
 8023c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8023c72:	091b      	lsrs	r3, r3, #4
 8023c74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8023c76:	4a13      	ldr	r2, [pc, #76]	; (8023cc4 <DMA_CalcBaseAndBitshift+0x68>)
 8023c78:	68fb      	ldr	r3, [r7, #12]
 8023c7a:	4413      	add	r3, r2
 8023c7c:	781b      	ldrb	r3, [r3, #0]
 8023c7e:	461a      	mov	r2, r3
 8023c80:	687b      	ldr	r3, [r7, #4]
 8023c82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8023c84:	68fb      	ldr	r3, [r7, #12]
 8023c86:	2b03      	cmp	r3, #3
 8023c88:	d909      	bls.n	8023c9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8023c8a:	687b      	ldr	r3, [r7, #4]
 8023c8c:	681b      	ldr	r3, [r3, #0]
 8023c8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8023c92:	f023 0303 	bic.w	r3, r3, #3
 8023c96:	1d1a      	adds	r2, r3, #4
 8023c98:	687b      	ldr	r3, [r7, #4]
 8023c9a:	659a      	str	r2, [r3, #88]	; 0x58
 8023c9c:	e007      	b.n	8023cae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8023c9e:	687b      	ldr	r3, [r7, #4]
 8023ca0:	681b      	ldr	r3, [r3, #0]
 8023ca2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8023ca6:	f023 0303 	bic.w	r3, r3, #3
 8023caa:	687a      	ldr	r2, [r7, #4]
 8023cac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8023cae:	687b      	ldr	r3, [r7, #4]
 8023cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8023cb2:	4618      	mov	r0, r3
 8023cb4:	3714      	adds	r7, #20
 8023cb6:	46bd      	mov	sp, r7
 8023cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cbc:	4770      	bx	lr
 8023cbe:	bf00      	nop
 8023cc0:	aaaaaaab 	.word	0xaaaaaaab
 8023cc4:	08031a7c 	.word	0x08031a7c

08023cc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8023cc8:	b480      	push	{r7}
 8023cca:	b085      	sub	sp, #20
 8023ccc:	af00      	add	r7, sp, #0
 8023cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8023cd0:	2300      	movs	r3, #0
 8023cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8023cd4:	687b      	ldr	r3, [r7, #4]
 8023cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023cd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8023cda:	687b      	ldr	r3, [r7, #4]
 8023cdc:	699b      	ldr	r3, [r3, #24]
 8023cde:	2b00      	cmp	r3, #0
 8023ce0:	d11f      	bne.n	8023d22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8023ce2:	68bb      	ldr	r3, [r7, #8]
 8023ce4:	2b03      	cmp	r3, #3
 8023ce6:	d856      	bhi.n	8023d96 <DMA_CheckFifoParam+0xce>
 8023ce8:	a201      	add	r2, pc, #4	; (adr r2, 8023cf0 <DMA_CheckFifoParam+0x28>)
 8023cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023cee:	bf00      	nop
 8023cf0:	08023d01 	.word	0x08023d01
 8023cf4:	08023d13 	.word	0x08023d13
 8023cf8:	08023d01 	.word	0x08023d01
 8023cfc:	08023d97 	.word	0x08023d97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023d00:	687b      	ldr	r3, [r7, #4]
 8023d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023d08:	2b00      	cmp	r3, #0
 8023d0a:	d046      	beq.n	8023d9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8023d0c:	2301      	movs	r3, #1
 8023d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023d10:	e043      	b.n	8023d9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023d12:	687b      	ldr	r3, [r7, #4]
 8023d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023d1a:	d140      	bne.n	8023d9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8023d1c:	2301      	movs	r3, #1
 8023d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023d20:	e03d      	b.n	8023d9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8023d22:	687b      	ldr	r3, [r7, #4]
 8023d24:	699b      	ldr	r3, [r3, #24]
 8023d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023d2a:	d121      	bne.n	8023d70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8023d2c:	68bb      	ldr	r3, [r7, #8]
 8023d2e:	2b03      	cmp	r3, #3
 8023d30:	d837      	bhi.n	8023da2 <DMA_CheckFifoParam+0xda>
 8023d32:	a201      	add	r2, pc, #4	; (adr r2, 8023d38 <DMA_CheckFifoParam+0x70>)
 8023d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023d38:	08023d49 	.word	0x08023d49
 8023d3c:	08023d4f 	.word	0x08023d4f
 8023d40:	08023d49 	.word	0x08023d49
 8023d44:	08023d61 	.word	0x08023d61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8023d48:	2301      	movs	r3, #1
 8023d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8023d4c:	e030      	b.n	8023db0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023d4e:	687b      	ldr	r3, [r7, #4]
 8023d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023d56:	2b00      	cmp	r3, #0
 8023d58:	d025      	beq.n	8023da6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8023d5a:	2301      	movs	r3, #1
 8023d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023d5e:	e022      	b.n	8023da6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023d60:	687b      	ldr	r3, [r7, #4]
 8023d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023d68:	d11f      	bne.n	8023daa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8023d6a:	2301      	movs	r3, #1
 8023d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8023d6e:	e01c      	b.n	8023daa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8023d70:	68bb      	ldr	r3, [r7, #8]
 8023d72:	2b02      	cmp	r3, #2
 8023d74:	d903      	bls.n	8023d7e <DMA_CheckFifoParam+0xb6>
 8023d76:	68bb      	ldr	r3, [r7, #8]
 8023d78:	2b03      	cmp	r3, #3
 8023d7a:	d003      	beq.n	8023d84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8023d7c:	e018      	b.n	8023db0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8023d7e:	2301      	movs	r3, #1
 8023d80:	73fb      	strb	r3, [r7, #15]
      break;
 8023d82:	e015      	b.n	8023db0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023d84:	687b      	ldr	r3, [r7, #4]
 8023d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023d8c:	2b00      	cmp	r3, #0
 8023d8e:	d00e      	beq.n	8023dae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8023d90:	2301      	movs	r3, #1
 8023d92:	73fb      	strb	r3, [r7, #15]
      break;
 8023d94:	e00b      	b.n	8023dae <DMA_CheckFifoParam+0xe6>
      break;
 8023d96:	bf00      	nop
 8023d98:	e00a      	b.n	8023db0 <DMA_CheckFifoParam+0xe8>
      break;
 8023d9a:	bf00      	nop
 8023d9c:	e008      	b.n	8023db0 <DMA_CheckFifoParam+0xe8>
      break;
 8023d9e:	bf00      	nop
 8023da0:	e006      	b.n	8023db0 <DMA_CheckFifoParam+0xe8>
      break;
 8023da2:	bf00      	nop
 8023da4:	e004      	b.n	8023db0 <DMA_CheckFifoParam+0xe8>
      break;
 8023da6:	bf00      	nop
 8023da8:	e002      	b.n	8023db0 <DMA_CheckFifoParam+0xe8>
      break;   
 8023daa:	bf00      	nop
 8023dac:	e000      	b.n	8023db0 <DMA_CheckFifoParam+0xe8>
      break;
 8023dae:	bf00      	nop
    }
  } 
  
  return status; 
 8023db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8023db2:	4618      	mov	r0, r3
 8023db4:	3714      	adds	r7, #20
 8023db6:	46bd      	mov	sp, r7
 8023db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dbc:	4770      	bx	lr
 8023dbe:	bf00      	nop

08023dc0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8023dc0:	b580      	push	{r7, lr}
 8023dc2:	b082      	sub	sp, #8
 8023dc4:	af00      	add	r7, sp, #0
 8023dc6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8023dc8:	687b      	ldr	r3, [r7, #4]
 8023dca:	2b00      	cmp	r3, #0
 8023dcc:	d101      	bne.n	8023dd2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8023dce:	2301      	movs	r3, #1
 8023dd0:	e03b      	b.n	8023e4a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8023dd2:	687b      	ldr	r3, [r7, #4]
 8023dd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8023dd8:	b2db      	uxtb	r3, r3
 8023dda:	2b00      	cmp	r3, #0
 8023ddc:	d106      	bne.n	8023dec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8023dde:	687b      	ldr	r3, [r7, #4]
 8023de0:	2200      	movs	r2, #0
 8023de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8023de6:	6878      	ldr	r0, [r7, #4]
 8023de8:	f7fd fcde 	bl	80217a8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023dec:	687b      	ldr	r3, [r7, #4]
 8023dee:	2202      	movs	r2, #2
 8023df0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8023df4:	687b      	ldr	r3, [r7, #4]
 8023df6:	681b      	ldr	r3, [r3, #0]
 8023df8:	681b      	ldr	r3, [r3, #0]
 8023dfa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8023dfe:	687b      	ldr	r3, [r7, #4]
 8023e00:	685a      	ldr	r2, [r3, #4]
 8023e02:	687b      	ldr	r3, [r7, #4]
 8023e04:	681b      	ldr	r3, [r3, #0]
 8023e06:	430a      	orrs	r2, r1
 8023e08:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8023e0a:	687b      	ldr	r3, [r7, #4]
 8023e0c:	681b      	ldr	r3, [r3, #0]
 8023e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023e10:	f023 0107 	bic.w	r1, r3, #7
 8023e14:	687b      	ldr	r3, [r7, #4]
 8023e16:	689a      	ldr	r2, [r3, #8]
 8023e18:	687b      	ldr	r3, [r7, #4]
 8023e1a:	681b      	ldr	r3, [r3, #0]
 8023e1c:	430a      	orrs	r2, r1
 8023e1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8023e20:	687b      	ldr	r3, [r7, #4]
 8023e22:	681b      	ldr	r3, [r3, #0]
 8023e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023e26:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8023e2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8023e2e:	687a      	ldr	r2, [r7, #4]
 8023e30:	68d1      	ldr	r1, [r2, #12]
 8023e32:	687a      	ldr	r2, [r7, #4]
 8023e34:	6812      	ldr	r2, [r2, #0]
 8023e36:	430b      	orrs	r3, r1
 8023e38:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8023e3a:	687b      	ldr	r3, [r7, #4]
 8023e3c:	2200      	movs	r2, #0
 8023e3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8023e40:	687b      	ldr	r3, [r7, #4]
 8023e42:	2201      	movs	r2, #1
 8023e44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8023e48:	2300      	movs	r3, #0
}
 8023e4a:	4618      	mov	r0, r3
 8023e4c:	3708      	adds	r7, #8
 8023e4e:	46bd      	mov	sp, r7
 8023e50:	bd80      	pop	{r7, pc}

08023e52 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8023e52:	b580      	push	{r7, lr}
 8023e54:	b086      	sub	sp, #24
 8023e56:	af02      	add	r7, sp, #8
 8023e58:	60f8      	str	r0, [r7, #12]
 8023e5a:	60b9      	str	r1, [r7, #8]
 8023e5c:	607a      	str	r2, [r7, #4]
 8023e5e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8023e60:	68fb      	ldr	r3, [r7, #12]
 8023e62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8023e66:	2b01      	cmp	r3, #1
 8023e68:	d101      	bne.n	8023e6e <HAL_DMA2D_Start+0x1c>
 8023e6a:	2302      	movs	r3, #2
 8023e6c:	e018      	b.n	8023ea0 <HAL_DMA2D_Start+0x4e>
 8023e6e:	68fb      	ldr	r3, [r7, #12]
 8023e70:	2201      	movs	r2, #1
 8023e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023e76:	68fb      	ldr	r3, [r7, #12]
 8023e78:	2202      	movs	r2, #2
 8023e7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8023e7e:	69bb      	ldr	r3, [r7, #24]
 8023e80:	9300      	str	r3, [sp, #0]
 8023e82:	683b      	ldr	r3, [r7, #0]
 8023e84:	687a      	ldr	r2, [r7, #4]
 8023e86:	68b9      	ldr	r1, [r7, #8]
 8023e88:	68f8      	ldr	r0, [r7, #12]
 8023e8a:	f000 fa99 	bl	80243c0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8023e8e:	68fb      	ldr	r3, [r7, #12]
 8023e90:	681b      	ldr	r3, [r3, #0]
 8023e92:	681a      	ldr	r2, [r3, #0]
 8023e94:	68fb      	ldr	r3, [r7, #12]
 8023e96:	681b      	ldr	r3, [r3, #0]
 8023e98:	f042 0201 	orr.w	r2, r2, #1
 8023e9c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8023e9e:	2300      	movs	r3, #0
}
 8023ea0:	4618      	mov	r0, r3
 8023ea2:	3710      	adds	r7, #16
 8023ea4:	46bd      	mov	sp, r7
 8023ea6:	bd80      	pop	{r7, pc}

08023ea8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8023ea8:	b580      	push	{r7, lr}
 8023eaa:	b086      	sub	sp, #24
 8023eac:	af00      	add	r7, sp, #0
 8023eae:	6078      	str	r0, [r7, #4]
 8023eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8023eb2:	2300      	movs	r3, #0
 8023eb4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8023eb6:	687b      	ldr	r3, [r7, #4]
 8023eb8:	681b      	ldr	r3, [r3, #0]
 8023eba:	681b      	ldr	r3, [r3, #0]
 8023ebc:	f003 0301 	and.w	r3, r3, #1
 8023ec0:	2b00      	cmp	r3, #0
 8023ec2:	d056      	beq.n	8023f72 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8023ec4:	f7ff fbe2 	bl	802368c <HAL_GetTick>
 8023ec8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8023eca:	e04b      	b.n	8023f64 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8023ecc:	687b      	ldr	r3, [r7, #4]
 8023ece:	681b      	ldr	r3, [r3, #0]
 8023ed0:	685b      	ldr	r3, [r3, #4]
 8023ed2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8023ed4:	68fb      	ldr	r3, [r7, #12]
 8023ed6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8023eda:	2b00      	cmp	r3, #0
 8023edc:	d023      	beq.n	8023f26 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023ede:	68fb      	ldr	r3, [r7, #12]
 8023ee0:	f003 0320 	and.w	r3, r3, #32
 8023ee4:	2b00      	cmp	r3, #0
 8023ee6:	d005      	beq.n	8023ef4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023ee8:	687b      	ldr	r3, [r7, #4]
 8023eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023eec:	f043 0202 	orr.w	r2, r3, #2
 8023ef0:	687b      	ldr	r3, [r7, #4]
 8023ef2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023ef4:	68fb      	ldr	r3, [r7, #12]
 8023ef6:	f003 0301 	and.w	r3, r3, #1
 8023efa:	2b00      	cmp	r3, #0
 8023efc:	d005      	beq.n	8023f0a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023efe:	687b      	ldr	r3, [r7, #4]
 8023f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023f02:	f043 0201 	orr.w	r2, r3, #1
 8023f06:	687b      	ldr	r3, [r7, #4]
 8023f08:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8023f0a:	687b      	ldr	r3, [r7, #4]
 8023f0c:	681b      	ldr	r3, [r3, #0]
 8023f0e:	2221      	movs	r2, #33	; 0x21
 8023f10:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023f12:	687b      	ldr	r3, [r7, #4]
 8023f14:	2204      	movs	r2, #4
 8023f16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8023f1a:	687b      	ldr	r3, [r7, #4]
 8023f1c:	2200      	movs	r2, #0
 8023f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023f22:	2301      	movs	r3, #1
 8023f24:	e0a5      	b.n	8024072 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8023f26:	683b      	ldr	r3, [r7, #0]
 8023f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023f2c:	d01a      	beq.n	8023f64 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023f2e:	f7ff fbad 	bl	802368c <HAL_GetTick>
 8023f32:	4602      	mov	r2, r0
 8023f34:	697b      	ldr	r3, [r7, #20]
 8023f36:	1ad3      	subs	r3, r2, r3
 8023f38:	683a      	ldr	r2, [r7, #0]
 8023f3a:	429a      	cmp	r2, r3
 8023f3c:	d302      	bcc.n	8023f44 <HAL_DMA2D_PollForTransfer+0x9c>
 8023f3e:	683b      	ldr	r3, [r7, #0]
 8023f40:	2b00      	cmp	r3, #0
 8023f42:	d10f      	bne.n	8023f64 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8023f44:	687b      	ldr	r3, [r7, #4]
 8023f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023f48:	f043 0220 	orr.w	r2, r3, #32
 8023f4c:	687b      	ldr	r3, [r7, #4]
 8023f4e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8023f50:	687b      	ldr	r3, [r7, #4]
 8023f52:	2203      	movs	r2, #3
 8023f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8023f58:	687b      	ldr	r3, [r7, #4]
 8023f5a:	2200      	movs	r2, #0
 8023f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8023f60:	2303      	movs	r3, #3
 8023f62:	e086      	b.n	8024072 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8023f64:	687b      	ldr	r3, [r7, #4]
 8023f66:	681b      	ldr	r3, [r3, #0]
 8023f68:	685b      	ldr	r3, [r3, #4]
 8023f6a:	f003 0302 	and.w	r3, r3, #2
 8023f6e:	2b00      	cmp	r3, #0
 8023f70:	d0ac      	beq.n	8023ecc <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8023f72:	687b      	ldr	r3, [r7, #4]
 8023f74:	681b      	ldr	r3, [r3, #0]
 8023f76:	69db      	ldr	r3, [r3, #28]
 8023f78:	f003 0320 	and.w	r3, r3, #32
 8023f7c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8023f7e:	687b      	ldr	r3, [r7, #4]
 8023f80:	681b      	ldr	r3, [r3, #0]
 8023f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f84:	f003 0320 	and.w	r3, r3, #32
 8023f88:	693a      	ldr	r2, [r7, #16]
 8023f8a:	4313      	orrs	r3, r2
 8023f8c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8023f8e:	693b      	ldr	r3, [r7, #16]
 8023f90:	2b00      	cmp	r3, #0
 8023f92:	d061      	beq.n	8024058 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8023f94:	f7ff fb7a 	bl	802368c <HAL_GetTick>
 8023f98:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8023f9a:	e056      	b.n	802404a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8023f9c:	687b      	ldr	r3, [r7, #4]
 8023f9e:	681b      	ldr	r3, [r3, #0]
 8023fa0:	685b      	ldr	r3, [r3, #4]
 8023fa2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8023fa4:	68fb      	ldr	r3, [r7, #12]
 8023fa6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8023faa:	2b00      	cmp	r3, #0
 8023fac:	d02e      	beq.n	802400c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8023fae:	68fb      	ldr	r3, [r7, #12]
 8023fb0:	f003 0308 	and.w	r3, r3, #8
 8023fb4:	2b00      	cmp	r3, #0
 8023fb6:	d005      	beq.n	8023fc4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8023fb8:	687b      	ldr	r3, [r7, #4]
 8023fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023fbc:	f043 0204 	orr.w	r2, r3, #4
 8023fc0:	687b      	ldr	r3, [r7, #4]
 8023fc2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023fc4:	68fb      	ldr	r3, [r7, #12]
 8023fc6:	f003 0320 	and.w	r3, r3, #32
 8023fca:	2b00      	cmp	r3, #0
 8023fcc:	d005      	beq.n	8023fda <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023fce:	687b      	ldr	r3, [r7, #4]
 8023fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023fd2:	f043 0202 	orr.w	r2, r3, #2
 8023fd6:	687b      	ldr	r3, [r7, #4]
 8023fd8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023fda:	68fb      	ldr	r3, [r7, #12]
 8023fdc:	f003 0301 	and.w	r3, r3, #1
 8023fe0:	2b00      	cmp	r3, #0
 8023fe2:	d005      	beq.n	8023ff0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023fe4:	687b      	ldr	r3, [r7, #4]
 8023fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023fe8:	f043 0201 	orr.w	r2, r3, #1
 8023fec:	687b      	ldr	r3, [r7, #4]
 8023fee:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8023ff0:	687b      	ldr	r3, [r7, #4]
 8023ff2:	681b      	ldr	r3, [r3, #0]
 8023ff4:	2229      	movs	r2, #41	; 0x29
 8023ff6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023ff8:	687b      	ldr	r3, [r7, #4]
 8023ffa:	2204      	movs	r2, #4
 8023ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8024000:	687b      	ldr	r3, [r7, #4]
 8024002:	2200      	movs	r2, #0
 8024004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8024008:	2301      	movs	r3, #1
 802400a:	e032      	b.n	8024072 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 802400c:	683b      	ldr	r3, [r7, #0]
 802400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024012:	d01a      	beq.n	802404a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8024014:	f7ff fb3a 	bl	802368c <HAL_GetTick>
 8024018:	4602      	mov	r2, r0
 802401a:	697b      	ldr	r3, [r7, #20]
 802401c:	1ad3      	subs	r3, r2, r3
 802401e:	683a      	ldr	r2, [r7, #0]
 8024020:	429a      	cmp	r2, r3
 8024022:	d302      	bcc.n	802402a <HAL_DMA2D_PollForTransfer+0x182>
 8024024:	683b      	ldr	r3, [r7, #0]
 8024026:	2b00      	cmp	r3, #0
 8024028:	d10f      	bne.n	802404a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 802402a:	687b      	ldr	r3, [r7, #4]
 802402c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802402e:	f043 0220 	orr.w	r2, r3, #32
 8024032:	687b      	ldr	r3, [r7, #4]
 8024034:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8024036:	687b      	ldr	r3, [r7, #4]
 8024038:	2203      	movs	r2, #3
 802403a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 802403e:	687b      	ldr	r3, [r7, #4]
 8024040:	2200      	movs	r2, #0
 8024042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8024046:	2303      	movs	r3, #3
 8024048:	e013      	b.n	8024072 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 802404a:	687b      	ldr	r3, [r7, #4]
 802404c:	681b      	ldr	r3, [r3, #0]
 802404e:	685b      	ldr	r3, [r3, #4]
 8024050:	f003 0310 	and.w	r3, r3, #16
 8024054:	2b00      	cmp	r3, #0
 8024056:	d0a1      	beq.n	8023f9c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8024058:	687b      	ldr	r3, [r7, #4]
 802405a:	681b      	ldr	r3, [r3, #0]
 802405c:	2212      	movs	r2, #18
 802405e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8024060:	687b      	ldr	r3, [r7, #4]
 8024062:	2201      	movs	r2, #1
 8024064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8024068:	687b      	ldr	r3, [r7, #4]
 802406a:	2200      	movs	r2, #0
 802406c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8024070:	2300      	movs	r3, #0
}
 8024072:	4618      	mov	r0, r3
 8024074:	3718      	adds	r7, #24
 8024076:	46bd      	mov	sp, r7
 8024078:	bd80      	pop	{r7, pc}

0802407a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 802407a:	b580      	push	{r7, lr}
 802407c:	b084      	sub	sp, #16
 802407e:	af00      	add	r7, sp, #0
 8024080:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8024082:	687b      	ldr	r3, [r7, #4]
 8024084:	681b      	ldr	r3, [r3, #0]
 8024086:	685b      	ldr	r3, [r3, #4]
 8024088:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 802408a:	687b      	ldr	r3, [r7, #4]
 802408c:	681b      	ldr	r3, [r3, #0]
 802408e:	681b      	ldr	r3, [r3, #0]
 8024090:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8024092:	68fb      	ldr	r3, [r7, #12]
 8024094:	f003 0301 	and.w	r3, r3, #1
 8024098:	2b00      	cmp	r3, #0
 802409a:	d026      	beq.n	80240ea <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 802409c:	68bb      	ldr	r3, [r7, #8]
 802409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80240a2:	2b00      	cmp	r3, #0
 80240a4:	d021      	beq.n	80240ea <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80240a6:	687b      	ldr	r3, [r7, #4]
 80240a8:	681b      	ldr	r3, [r3, #0]
 80240aa:	681a      	ldr	r2, [r3, #0]
 80240ac:	687b      	ldr	r3, [r7, #4]
 80240ae:	681b      	ldr	r3, [r3, #0]
 80240b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80240b4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80240b6:	687b      	ldr	r3, [r7, #4]
 80240b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80240ba:	f043 0201 	orr.w	r2, r3, #1
 80240be:	687b      	ldr	r3, [r7, #4]
 80240c0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80240c2:	687b      	ldr	r3, [r7, #4]
 80240c4:	681b      	ldr	r3, [r3, #0]
 80240c6:	2201      	movs	r2, #1
 80240c8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80240ca:	687b      	ldr	r3, [r7, #4]
 80240cc:	2204      	movs	r2, #4
 80240ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80240d2:	687b      	ldr	r3, [r7, #4]
 80240d4:	2200      	movs	r2, #0
 80240d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80240da:	687b      	ldr	r3, [r7, #4]
 80240dc:	695b      	ldr	r3, [r3, #20]
 80240de:	2b00      	cmp	r3, #0
 80240e0:	d003      	beq.n	80240ea <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80240e2:	687b      	ldr	r3, [r7, #4]
 80240e4:	695b      	ldr	r3, [r3, #20]
 80240e6:	6878      	ldr	r0, [r7, #4]
 80240e8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80240ea:	68fb      	ldr	r3, [r7, #12]
 80240ec:	f003 0320 	and.w	r3, r3, #32
 80240f0:	2b00      	cmp	r3, #0
 80240f2:	d026      	beq.n	8024142 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80240f4:	68bb      	ldr	r3, [r7, #8]
 80240f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80240fa:	2b00      	cmp	r3, #0
 80240fc:	d021      	beq.n	8024142 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80240fe:	687b      	ldr	r3, [r7, #4]
 8024100:	681b      	ldr	r3, [r3, #0]
 8024102:	681a      	ldr	r2, [r3, #0]
 8024104:	687b      	ldr	r3, [r7, #4]
 8024106:	681b      	ldr	r3, [r3, #0]
 8024108:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802410c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 802410e:	687b      	ldr	r3, [r7, #4]
 8024110:	681b      	ldr	r3, [r3, #0]
 8024112:	2220      	movs	r2, #32
 8024114:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8024116:	687b      	ldr	r3, [r7, #4]
 8024118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802411a:	f043 0202 	orr.w	r2, r3, #2
 802411e:	687b      	ldr	r3, [r7, #4]
 8024120:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8024122:	687b      	ldr	r3, [r7, #4]
 8024124:	2204      	movs	r2, #4
 8024126:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 802412a:	687b      	ldr	r3, [r7, #4]
 802412c:	2200      	movs	r2, #0
 802412e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8024132:	687b      	ldr	r3, [r7, #4]
 8024134:	695b      	ldr	r3, [r3, #20]
 8024136:	2b00      	cmp	r3, #0
 8024138:	d003      	beq.n	8024142 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 802413a:	687b      	ldr	r3, [r7, #4]
 802413c:	695b      	ldr	r3, [r3, #20]
 802413e:	6878      	ldr	r0, [r7, #4]
 8024140:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8024142:	68fb      	ldr	r3, [r7, #12]
 8024144:	f003 0308 	and.w	r3, r3, #8
 8024148:	2b00      	cmp	r3, #0
 802414a:	d026      	beq.n	802419a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 802414c:	68bb      	ldr	r3, [r7, #8]
 802414e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8024152:	2b00      	cmp	r3, #0
 8024154:	d021      	beq.n	802419a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8024156:	687b      	ldr	r3, [r7, #4]
 8024158:	681b      	ldr	r3, [r3, #0]
 802415a:	681a      	ldr	r2, [r3, #0]
 802415c:	687b      	ldr	r3, [r7, #4]
 802415e:	681b      	ldr	r3, [r3, #0]
 8024160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8024164:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8024166:	687b      	ldr	r3, [r7, #4]
 8024168:	681b      	ldr	r3, [r3, #0]
 802416a:	2208      	movs	r2, #8
 802416c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 802416e:	687b      	ldr	r3, [r7, #4]
 8024170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024172:	f043 0204 	orr.w	r2, r3, #4
 8024176:	687b      	ldr	r3, [r7, #4]
 8024178:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 802417a:	687b      	ldr	r3, [r7, #4]
 802417c:	2204      	movs	r2, #4
 802417e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8024182:	687b      	ldr	r3, [r7, #4]
 8024184:	2200      	movs	r2, #0
 8024186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 802418a:	687b      	ldr	r3, [r7, #4]
 802418c:	695b      	ldr	r3, [r3, #20]
 802418e:	2b00      	cmp	r3, #0
 8024190:	d003      	beq.n	802419a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8024192:	687b      	ldr	r3, [r7, #4]
 8024194:	695b      	ldr	r3, [r3, #20]
 8024196:	6878      	ldr	r0, [r7, #4]
 8024198:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 802419a:	68fb      	ldr	r3, [r7, #12]
 802419c:	f003 0304 	and.w	r3, r3, #4
 80241a0:	2b00      	cmp	r3, #0
 80241a2:	d013      	beq.n	80241cc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80241a4:	68bb      	ldr	r3, [r7, #8]
 80241a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80241aa:	2b00      	cmp	r3, #0
 80241ac:	d00e      	beq.n	80241cc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80241ae:	687b      	ldr	r3, [r7, #4]
 80241b0:	681b      	ldr	r3, [r3, #0]
 80241b2:	681a      	ldr	r2, [r3, #0]
 80241b4:	687b      	ldr	r3, [r7, #4]
 80241b6:	681b      	ldr	r3, [r3, #0]
 80241b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80241bc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80241be:	687b      	ldr	r3, [r7, #4]
 80241c0:	681b      	ldr	r3, [r3, #0]
 80241c2:	2204      	movs	r2, #4
 80241c4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80241c6:	6878      	ldr	r0, [r7, #4]
 80241c8:	f000 f853 	bl	8024272 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80241cc:	68fb      	ldr	r3, [r7, #12]
 80241ce:	f003 0302 	and.w	r3, r3, #2
 80241d2:	2b00      	cmp	r3, #0
 80241d4:	d024      	beq.n	8024220 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80241d6:	68bb      	ldr	r3, [r7, #8]
 80241d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80241dc:	2b00      	cmp	r3, #0
 80241de:	d01f      	beq.n	8024220 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80241e0:	687b      	ldr	r3, [r7, #4]
 80241e2:	681b      	ldr	r3, [r3, #0]
 80241e4:	681a      	ldr	r2, [r3, #0]
 80241e6:	687b      	ldr	r3, [r7, #4]
 80241e8:	681b      	ldr	r3, [r3, #0]
 80241ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80241ee:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80241f0:	687b      	ldr	r3, [r7, #4]
 80241f2:	681b      	ldr	r3, [r3, #0]
 80241f4:	2202      	movs	r2, #2
 80241f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80241f8:	687b      	ldr	r3, [r7, #4]
 80241fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80241fc:	687b      	ldr	r3, [r7, #4]
 80241fe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8024200:	687b      	ldr	r3, [r7, #4]
 8024202:	2201      	movs	r2, #1
 8024204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8024208:	687b      	ldr	r3, [r7, #4]
 802420a:	2200      	movs	r2, #0
 802420c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8024210:	687b      	ldr	r3, [r7, #4]
 8024212:	691b      	ldr	r3, [r3, #16]
 8024214:	2b00      	cmp	r3, #0
 8024216:	d003      	beq.n	8024220 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8024218:	687b      	ldr	r3, [r7, #4]
 802421a:	691b      	ldr	r3, [r3, #16]
 802421c:	6878      	ldr	r0, [r7, #4]
 802421e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8024220:	68fb      	ldr	r3, [r7, #12]
 8024222:	f003 0310 	and.w	r3, r3, #16
 8024226:	2b00      	cmp	r3, #0
 8024228:	d01f      	beq.n	802426a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 802422a:	68bb      	ldr	r3, [r7, #8]
 802422c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8024230:	2b00      	cmp	r3, #0
 8024232:	d01a      	beq.n	802426a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8024234:	687b      	ldr	r3, [r7, #4]
 8024236:	681b      	ldr	r3, [r3, #0]
 8024238:	681a      	ldr	r2, [r3, #0]
 802423a:	687b      	ldr	r3, [r7, #4]
 802423c:	681b      	ldr	r3, [r3, #0]
 802423e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8024242:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8024244:	687b      	ldr	r3, [r7, #4]
 8024246:	681b      	ldr	r3, [r3, #0]
 8024248:	2210      	movs	r2, #16
 802424a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 802424c:	687b      	ldr	r3, [r7, #4]
 802424e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8024250:	687b      	ldr	r3, [r7, #4]
 8024252:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8024254:	687b      	ldr	r3, [r7, #4]
 8024256:	2201      	movs	r2, #1
 8024258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 802425c:	687b      	ldr	r3, [r7, #4]
 802425e:	2200      	movs	r2, #0
 8024260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8024264:	6878      	ldr	r0, [r7, #4]
 8024266:	f000 f80e 	bl	8024286 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 802426a:	bf00      	nop
 802426c:	3710      	adds	r7, #16
 802426e:	46bd      	mov	sp, r7
 8024270:	bd80      	pop	{r7, pc}

08024272 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8024272:	b480      	push	{r7}
 8024274:	b083      	sub	sp, #12
 8024276:	af00      	add	r7, sp, #0
 8024278:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 802427a:	bf00      	nop
 802427c:	370c      	adds	r7, #12
 802427e:	46bd      	mov	sp, r7
 8024280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024284:	4770      	bx	lr

08024286 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8024286:	b480      	push	{r7}
 8024288:	b083      	sub	sp, #12
 802428a:	af00      	add	r7, sp, #0
 802428c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 802428e:	bf00      	nop
 8024290:	370c      	adds	r7, #12
 8024292:	46bd      	mov	sp, r7
 8024294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024298:	4770      	bx	lr
	...

0802429c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 802429c:	b480      	push	{r7}
 802429e:	b087      	sub	sp, #28
 80242a0:	af00      	add	r7, sp, #0
 80242a2:	6078      	str	r0, [r7, #4]
 80242a4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80242a6:	687b      	ldr	r3, [r7, #4]
 80242a8:	685b      	ldr	r3, [r3, #4]
 80242aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80242ae:	687b      	ldr	r3, [r7, #4]
 80242b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80242b4:	2b01      	cmp	r3, #1
 80242b6:	d101      	bne.n	80242bc <HAL_DMA2D_ConfigLayer+0x20>
 80242b8:	2302      	movs	r3, #2
 80242ba:	e079      	b.n	80243b0 <HAL_DMA2D_ConfigLayer+0x114>
 80242bc:	687b      	ldr	r3, [r7, #4]
 80242be:	2201      	movs	r2, #1
 80242c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80242c4:	687b      	ldr	r3, [r7, #4]
 80242c6:	2202      	movs	r2, #2
 80242c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80242cc:	683b      	ldr	r3, [r7, #0]
 80242ce:	011b      	lsls	r3, r3, #4
 80242d0:	3318      	adds	r3, #24
 80242d2:	687a      	ldr	r2, [r7, #4]
 80242d4:	4413      	add	r3, r2
 80242d6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80242d8:	693b      	ldr	r3, [r7, #16]
 80242da:	685a      	ldr	r2, [r3, #4]
 80242dc:	693b      	ldr	r3, [r7, #16]
 80242de:	689b      	ldr	r3, [r3, #8]
 80242e0:	041b      	lsls	r3, r3, #16
 80242e2:	4313      	orrs	r3, r2
 80242e4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80242e6:	4b35      	ldr	r3, [pc, #212]	; (80243bc <HAL_DMA2D_ConfigLayer+0x120>)
 80242e8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80242ea:	693b      	ldr	r3, [r7, #16]
 80242ec:	685b      	ldr	r3, [r3, #4]
 80242ee:	2b0a      	cmp	r3, #10
 80242f0:	d003      	beq.n	80242fa <HAL_DMA2D_ConfigLayer+0x5e>
 80242f2:	693b      	ldr	r3, [r7, #16]
 80242f4:	685b      	ldr	r3, [r3, #4]
 80242f6:	2b09      	cmp	r3, #9
 80242f8:	d107      	bne.n	802430a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80242fa:	693b      	ldr	r3, [r7, #16]
 80242fc:	68db      	ldr	r3, [r3, #12]
 80242fe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8024302:	697a      	ldr	r2, [r7, #20]
 8024304:	4313      	orrs	r3, r2
 8024306:	617b      	str	r3, [r7, #20]
 8024308:	e005      	b.n	8024316 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 802430a:	693b      	ldr	r3, [r7, #16]
 802430c:	68db      	ldr	r3, [r3, #12]
 802430e:	061b      	lsls	r3, r3, #24
 8024310:	697a      	ldr	r2, [r7, #20]
 8024312:	4313      	orrs	r3, r2
 8024314:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8024316:	683b      	ldr	r3, [r7, #0]
 8024318:	2b00      	cmp	r3, #0
 802431a:	d120      	bne.n	802435e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 802431c:	687b      	ldr	r3, [r7, #4]
 802431e:	681b      	ldr	r3, [r3, #0]
 8024320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024322:	68fb      	ldr	r3, [r7, #12]
 8024324:	43db      	mvns	r3, r3
 8024326:	ea02 0103 	and.w	r1, r2, r3
 802432a:	687b      	ldr	r3, [r7, #4]
 802432c:	681b      	ldr	r3, [r3, #0]
 802432e:	697a      	ldr	r2, [r7, #20]
 8024330:	430a      	orrs	r2, r1
 8024332:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8024334:	687b      	ldr	r3, [r7, #4]
 8024336:	681b      	ldr	r3, [r3, #0]
 8024338:	693a      	ldr	r2, [r7, #16]
 802433a:	6812      	ldr	r2, [r2, #0]
 802433c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 802433e:	693b      	ldr	r3, [r7, #16]
 8024340:	685b      	ldr	r3, [r3, #4]
 8024342:	2b0a      	cmp	r3, #10
 8024344:	d003      	beq.n	802434e <HAL_DMA2D_ConfigLayer+0xb2>
 8024346:	693b      	ldr	r3, [r7, #16]
 8024348:	685b      	ldr	r3, [r3, #4]
 802434a:	2b09      	cmp	r3, #9
 802434c:	d127      	bne.n	802439e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 802434e:	693b      	ldr	r3, [r7, #16]
 8024350:	68da      	ldr	r2, [r3, #12]
 8024352:	687b      	ldr	r3, [r7, #4]
 8024354:	681b      	ldr	r3, [r3, #0]
 8024356:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 802435a:	629a      	str	r2, [r3, #40]	; 0x28
 802435c:	e01f      	b.n	802439e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 802435e:	687b      	ldr	r3, [r7, #4]
 8024360:	681b      	ldr	r3, [r3, #0]
 8024362:	69da      	ldr	r2, [r3, #28]
 8024364:	68fb      	ldr	r3, [r7, #12]
 8024366:	43db      	mvns	r3, r3
 8024368:	ea02 0103 	and.w	r1, r2, r3
 802436c:	687b      	ldr	r3, [r7, #4]
 802436e:	681b      	ldr	r3, [r3, #0]
 8024370:	697a      	ldr	r2, [r7, #20]
 8024372:	430a      	orrs	r2, r1
 8024374:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8024376:	687b      	ldr	r3, [r7, #4]
 8024378:	681b      	ldr	r3, [r3, #0]
 802437a:	693a      	ldr	r2, [r7, #16]
 802437c:	6812      	ldr	r2, [r2, #0]
 802437e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8024380:	693b      	ldr	r3, [r7, #16]
 8024382:	685b      	ldr	r3, [r3, #4]
 8024384:	2b0a      	cmp	r3, #10
 8024386:	d003      	beq.n	8024390 <HAL_DMA2D_ConfigLayer+0xf4>
 8024388:	693b      	ldr	r3, [r7, #16]
 802438a:	685b      	ldr	r3, [r3, #4]
 802438c:	2b09      	cmp	r3, #9
 802438e:	d106      	bne.n	802439e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8024390:	693b      	ldr	r3, [r7, #16]
 8024392:	68da      	ldr	r2, [r3, #12]
 8024394:	687b      	ldr	r3, [r7, #4]
 8024396:	681b      	ldr	r3, [r3, #0]
 8024398:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 802439c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 802439e:	687b      	ldr	r3, [r7, #4]
 80243a0:	2201      	movs	r2, #1
 80243a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80243a6:	687b      	ldr	r3, [r7, #4]
 80243a8:	2200      	movs	r2, #0
 80243aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80243ae:	2300      	movs	r3, #0
}
 80243b0:	4618      	mov	r0, r3
 80243b2:	371c      	adds	r7, #28
 80243b4:	46bd      	mov	sp, r7
 80243b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243ba:	4770      	bx	lr
 80243bc:	ff03000f 	.word	0xff03000f

080243c0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80243c0:	b480      	push	{r7}
 80243c2:	b08b      	sub	sp, #44	; 0x2c
 80243c4:	af00      	add	r7, sp, #0
 80243c6:	60f8      	str	r0, [r7, #12]
 80243c8:	60b9      	str	r1, [r7, #8]
 80243ca:	607a      	str	r2, [r7, #4]
 80243cc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80243ce:	68fb      	ldr	r3, [r7, #12]
 80243d0:	681b      	ldr	r3, [r3, #0]
 80243d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80243d4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80243d8:	683b      	ldr	r3, [r7, #0]
 80243da:	041a      	lsls	r2, r3, #16
 80243dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80243de:	431a      	orrs	r2, r3
 80243e0:	68fb      	ldr	r3, [r7, #12]
 80243e2:	681b      	ldr	r3, [r3, #0]
 80243e4:	430a      	orrs	r2, r1
 80243e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80243e8:	68fb      	ldr	r3, [r7, #12]
 80243ea:	681b      	ldr	r3, [r3, #0]
 80243ec:	687a      	ldr	r2, [r7, #4]
 80243ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80243f0:	68fb      	ldr	r3, [r7, #12]
 80243f2:	685b      	ldr	r3, [r3, #4]
 80243f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80243f8:	d174      	bne.n	80244e4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80243fa:	68bb      	ldr	r3, [r7, #8]
 80243fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8024400:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8024402:	68bb      	ldr	r3, [r7, #8]
 8024404:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8024408:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 802440a:	68bb      	ldr	r3, [r7, #8]
 802440c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024410:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8024412:	68bb      	ldr	r3, [r7, #8]
 8024414:	b2db      	uxtb	r3, r3
 8024416:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8024418:	68fb      	ldr	r3, [r7, #12]
 802441a:	689b      	ldr	r3, [r3, #8]
 802441c:	2b00      	cmp	r3, #0
 802441e:	d108      	bne.n	8024432 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8024420:	69ba      	ldr	r2, [r7, #24]
 8024422:	69fb      	ldr	r3, [r7, #28]
 8024424:	431a      	orrs	r2, r3
 8024426:	6a3b      	ldr	r3, [r7, #32]
 8024428:	4313      	orrs	r3, r2
 802442a:	697a      	ldr	r2, [r7, #20]
 802442c:	4313      	orrs	r3, r2
 802442e:	627b      	str	r3, [r7, #36]	; 0x24
 8024430:	e053      	b.n	80244da <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8024432:	68fb      	ldr	r3, [r7, #12]
 8024434:	689b      	ldr	r3, [r3, #8]
 8024436:	2b01      	cmp	r3, #1
 8024438:	d106      	bne.n	8024448 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 802443a:	69ba      	ldr	r2, [r7, #24]
 802443c:	69fb      	ldr	r3, [r7, #28]
 802443e:	4313      	orrs	r3, r2
 8024440:	697a      	ldr	r2, [r7, #20]
 8024442:	4313      	orrs	r3, r2
 8024444:	627b      	str	r3, [r7, #36]	; 0x24
 8024446:	e048      	b.n	80244da <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8024448:	68fb      	ldr	r3, [r7, #12]
 802444a:	689b      	ldr	r3, [r3, #8]
 802444c:	2b02      	cmp	r3, #2
 802444e:	d111      	bne.n	8024474 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8024450:	69fb      	ldr	r3, [r7, #28]
 8024452:	0cdb      	lsrs	r3, r3, #19
 8024454:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8024456:	69bb      	ldr	r3, [r7, #24]
 8024458:	0a9b      	lsrs	r3, r3, #10
 802445a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 802445c:	697b      	ldr	r3, [r7, #20]
 802445e:	08db      	lsrs	r3, r3, #3
 8024460:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8024462:	69bb      	ldr	r3, [r7, #24]
 8024464:	015a      	lsls	r2, r3, #5
 8024466:	69fb      	ldr	r3, [r7, #28]
 8024468:	02db      	lsls	r3, r3, #11
 802446a:	4313      	orrs	r3, r2
 802446c:	697a      	ldr	r2, [r7, #20]
 802446e:	4313      	orrs	r3, r2
 8024470:	627b      	str	r3, [r7, #36]	; 0x24
 8024472:	e032      	b.n	80244da <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8024474:	68fb      	ldr	r3, [r7, #12]
 8024476:	689b      	ldr	r3, [r3, #8]
 8024478:	2b03      	cmp	r3, #3
 802447a:	d117      	bne.n	80244ac <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 802447c:	6a3b      	ldr	r3, [r7, #32]
 802447e:	0fdb      	lsrs	r3, r3, #31
 8024480:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8024482:	69fb      	ldr	r3, [r7, #28]
 8024484:	0cdb      	lsrs	r3, r3, #19
 8024486:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8024488:	69bb      	ldr	r3, [r7, #24]
 802448a:	0adb      	lsrs	r3, r3, #11
 802448c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 802448e:	697b      	ldr	r3, [r7, #20]
 8024490:	08db      	lsrs	r3, r3, #3
 8024492:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8024494:	69bb      	ldr	r3, [r7, #24]
 8024496:	015a      	lsls	r2, r3, #5
 8024498:	69fb      	ldr	r3, [r7, #28]
 802449a:	029b      	lsls	r3, r3, #10
 802449c:	431a      	orrs	r2, r3
 802449e:	6a3b      	ldr	r3, [r7, #32]
 80244a0:	03db      	lsls	r3, r3, #15
 80244a2:	4313      	orrs	r3, r2
 80244a4:	697a      	ldr	r2, [r7, #20]
 80244a6:	4313      	orrs	r3, r2
 80244a8:	627b      	str	r3, [r7, #36]	; 0x24
 80244aa:	e016      	b.n	80244da <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80244ac:	6a3b      	ldr	r3, [r7, #32]
 80244ae:	0f1b      	lsrs	r3, r3, #28
 80244b0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80244b2:	69fb      	ldr	r3, [r7, #28]
 80244b4:	0d1b      	lsrs	r3, r3, #20
 80244b6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80244b8:	69bb      	ldr	r3, [r7, #24]
 80244ba:	0b1b      	lsrs	r3, r3, #12
 80244bc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80244be:	697b      	ldr	r3, [r7, #20]
 80244c0:	091b      	lsrs	r3, r3, #4
 80244c2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80244c4:	69bb      	ldr	r3, [r7, #24]
 80244c6:	011a      	lsls	r2, r3, #4
 80244c8:	69fb      	ldr	r3, [r7, #28]
 80244ca:	021b      	lsls	r3, r3, #8
 80244cc:	431a      	orrs	r2, r3
 80244ce:	6a3b      	ldr	r3, [r7, #32]
 80244d0:	031b      	lsls	r3, r3, #12
 80244d2:	4313      	orrs	r3, r2
 80244d4:	697a      	ldr	r2, [r7, #20]
 80244d6:	4313      	orrs	r3, r2
 80244d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80244da:	68fb      	ldr	r3, [r7, #12]
 80244dc:	681b      	ldr	r3, [r3, #0]
 80244de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80244e0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80244e2:	e003      	b.n	80244ec <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80244e4:	68fb      	ldr	r3, [r7, #12]
 80244e6:	681b      	ldr	r3, [r3, #0]
 80244e8:	68ba      	ldr	r2, [r7, #8]
 80244ea:	60da      	str	r2, [r3, #12]
}
 80244ec:	bf00      	nop
 80244ee:	372c      	adds	r7, #44	; 0x2c
 80244f0:	46bd      	mov	sp, r7
 80244f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244f6:	4770      	bx	lr

080244f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80244f8:	b580      	push	{r7, lr}
 80244fa:	b086      	sub	sp, #24
 80244fc:	af00      	add	r7, sp, #0
 80244fe:	60f8      	str	r0, [r7, #12]
 8024500:	60b9      	str	r1, [r7, #8]
 8024502:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8024506:	2301      	movs	r3, #1
 8024508:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802450a:	4b23      	ldr	r3, [pc, #140]	; (8024598 <HAL_FLASH_Program+0xa0>)
 802450c:	7e1b      	ldrb	r3, [r3, #24]
 802450e:	2b01      	cmp	r3, #1
 8024510:	d101      	bne.n	8024516 <HAL_FLASH_Program+0x1e>
 8024512:	2302      	movs	r3, #2
 8024514:	e03b      	b.n	802458e <HAL_FLASH_Program+0x96>
 8024516:	4b20      	ldr	r3, [pc, #128]	; (8024598 <HAL_FLASH_Program+0xa0>)
 8024518:	2201      	movs	r2, #1
 802451a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802451c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8024520:	f000 f870 	bl	8024604 <FLASH_WaitForLastOperation>
 8024524:	4603      	mov	r3, r0
 8024526:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8024528:	7dfb      	ldrb	r3, [r7, #23]
 802452a:	2b00      	cmp	r3, #0
 802452c:	d12b      	bne.n	8024586 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 802452e:	68fb      	ldr	r3, [r7, #12]
 8024530:	2b00      	cmp	r3, #0
 8024532:	d105      	bne.n	8024540 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8024534:	783b      	ldrb	r3, [r7, #0]
 8024536:	4619      	mov	r1, r3
 8024538:	68b8      	ldr	r0, [r7, #8]
 802453a:	f000 f91b 	bl	8024774 <FLASH_Program_Byte>
 802453e:	e016      	b.n	802456e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8024540:	68fb      	ldr	r3, [r7, #12]
 8024542:	2b01      	cmp	r3, #1
 8024544:	d105      	bne.n	8024552 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8024546:	883b      	ldrh	r3, [r7, #0]
 8024548:	4619      	mov	r1, r3
 802454a:	68b8      	ldr	r0, [r7, #8]
 802454c:	f000 f8ee 	bl	802472c <FLASH_Program_HalfWord>
 8024550:	e00d      	b.n	802456e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8024552:	68fb      	ldr	r3, [r7, #12]
 8024554:	2b02      	cmp	r3, #2
 8024556:	d105      	bne.n	8024564 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8024558:	683b      	ldr	r3, [r7, #0]
 802455a:	4619      	mov	r1, r3
 802455c:	68b8      	ldr	r0, [r7, #8]
 802455e:	f000 f8c3 	bl	80246e8 <FLASH_Program_Word>
 8024562:	e004      	b.n	802456e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8024564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024568:	68b8      	ldr	r0, [r7, #8]
 802456a:	f000 f88b 	bl	8024684 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802456e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8024572:	f000 f847 	bl	8024604 <FLASH_WaitForLastOperation>
 8024576:	4603      	mov	r3, r0
 8024578:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 802457a:	4b08      	ldr	r3, [pc, #32]	; (802459c <HAL_FLASH_Program+0xa4>)
 802457c:	691b      	ldr	r3, [r3, #16]
 802457e:	4a07      	ldr	r2, [pc, #28]	; (802459c <HAL_FLASH_Program+0xa4>)
 8024580:	f023 0301 	bic.w	r3, r3, #1
 8024584:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8024586:	4b04      	ldr	r3, [pc, #16]	; (8024598 <HAL_FLASH_Program+0xa0>)
 8024588:	2200      	movs	r2, #0
 802458a:	761a      	strb	r2, [r3, #24]
  
  return status;
 802458c:	7dfb      	ldrb	r3, [r7, #23]
}
 802458e:	4618      	mov	r0, r3
 8024590:	3718      	adds	r7, #24
 8024592:	46bd      	mov	sp, r7
 8024594:	bd80      	pop	{r7, pc}
 8024596:	bf00      	nop
 8024598:	20000afc 	.word	0x20000afc
 802459c:	40023c00 	.word	0x40023c00

080245a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80245a0:	b480      	push	{r7}
 80245a2:	b083      	sub	sp, #12
 80245a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80245a6:	2300      	movs	r3, #0
 80245a8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80245aa:	4b0b      	ldr	r3, [pc, #44]	; (80245d8 <HAL_FLASH_Unlock+0x38>)
 80245ac:	691b      	ldr	r3, [r3, #16]
 80245ae:	2b00      	cmp	r3, #0
 80245b0:	da0b      	bge.n	80245ca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80245b2:	4b09      	ldr	r3, [pc, #36]	; (80245d8 <HAL_FLASH_Unlock+0x38>)
 80245b4:	4a09      	ldr	r2, [pc, #36]	; (80245dc <HAL_FLASH_Unlock+0x3c>)
 80245b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80245b8:	4b07      	ldr	r3, [pc, #28]	; (80245d8 <HAL_FLASH_Unlock+0x38>)
 80245ba:	4a09      	ldr	r2, [pc, #36]	; (80245e0 <HAL_FLASH_Unlock+0x40>)
 80245bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80245be:	4b06      	ldr	r3, [pc, #24]	; (80245d8 <HAL_FLASH_Unlock+0x38>)
 80245c0:	691b      	ldr	r3, [r3, #16]
 80245c2:	2b00      	cmp	r3, #0
 80245c4:	da01      	bge.n	80245ca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80245c6:	2301      	movs	r3, #1
 80245c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80245ca:	79fb      	ldrb	r3, [r7, #7]
}
 80245cc:	4618      	mov	r0, r3
 80245ce:	370c      	adds	r7, #12
 80245d0:	46bd      	mov	sp, r7
 80245d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245d6:	4770      	bx	lr
 80245d8:	40023c00 	.word	0x40023c00
 80245dc:	45670123 	.word	0x45670123
 80245e0:	cdef89ab 	.word	0xcdef89ab

080245e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80245e4:	b480      	push	{r7}
 80245e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80245e8:	4b05      	ldr	r3, [pc, #20]	; (8024600 <HAL_FLASH_Lock+0x1c>)
 80245ea:	691b      	ldr	r3, [r3, #16]
 80245ec:	4a04      	ldr	r2, [pc, #16]	; (8024600 <HAL_FLASH_Lock+0x1c>)
 80245ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80245f2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80245f4:	2300      	movs	r3, #0
}
 80245f6:	4618      	mov	r0, r3
 80245f8:	46bd      	mov	sp, r7
 80245fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245fe:	4770      	bx	lr
 8024600:	40023c00 	.word	0x40023c00

08024604 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8024604:	b580      	push	{r7, lr}
 8024606:	b084      	sub	sp, #16
 8024608:	af00      	add	r7, sp, #0
 802460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802460c:	2300      	movs	r3, #0
 802460e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8024610:	4b1a      	ldr	r3, [pc, #104]	; (802467c <FLASH_WaitForLastOperation+0x78>)
 8024612:	2200      	movs	r2, #0
 8024614:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8024616:	f7ff f839 	bl	802368c <HAL_GetTick>
 802461a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 802461c:	e010      	b.n	8024640 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 802461e:	687b      	ldr	r3, [r7, #4]
 8024620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024624:	d00c      	beq.n	8024640 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8024626:	687b      	ldr	r3, [r7, #4]
 8024628:	2b00      	cmp	r3, #0
 802462a:	d007      	beq.n	802463c <FLASH_WaitForLastOperation+0x38>
 802462c:	f7ff f82e 	bl	802368c <HAL_GetTick>
 8024630:	4602      	mov	r2, r0
 8024632:	68fb      	ldr	r3, [r7, #12]
 8024634:	1ad3      	subs	r3, r2, r3
 8024636:	687a      	ldr	r2, [r7, #4]
 8024638:	429a      	cmp	r2, r3
 802463a:	d201      	bcs.n	8024640 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 802463c:	2303      	movs	r3, #3
 802463e:	e019      	b.n	8024674 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8024640:	4b0f      	ldr	r3, [pc, #60]	; (8024680 <FLASH_WaitForLastOperation+0x7c>)
 8024642:	68db      	ldr	r3, [r3, #12]
 8024644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024648:	2b00      	cmp	r3, #0
 802464a:	d1e8      	bne.n	802461e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 802464c:	4b0c      	ldr	r3, [pc, #48]	; (8024680 <FLASH_WaitForLastOperation+0x7c>)
 802464e:	68db      	ldr	r3, [r3, #12]
 8024650:	f003 0301 	and.w	r3, r3, #1
 8024654:	2b00      	cmp	r3, #0
 8024656:	d002      	beq.n	802465e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8024658:	4b09      	ldr	r3, [pc, #36]	; (8024680 <FLASH_WaitForLastOperation+0x7c>)
 802465a:	2201      	movs	r2, #1
 802465c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 802465e:	4b08      	ldr	r3, [pc, #32]	; (8024680 <FLASH_WaitForLastOperation+0x7c>)
 8024660:	68db      	ldr	r3, [r3, #12]
 8024662:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8024666:	2b00      	cmp	r3, #0
 8024668:	d003      	beq.n	8024672 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 802466a:	f000 f8a5 	bl	80247b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 802466e:	2301      	movs	r3, #1
 8024670:	e000      	b.n	8024674 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8024672:	2300      	movs	r3, #0
  
}  
 8024674:	4618      	mov	r0, r3
 8024676:	3710      	adds	r7, #16
 8024678:	46bd      	mov	sp, r7
 802467a:	bd80      	pop	{r7, pc}
 802467c:	20000afc 	.word	0x20000afc
 8024680:	40023c00 	.word	0x40023c00

08024684 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8024684:	b480      	push	{r7}
 8024686:	b085      	sub	sp, #20
 8024688:	af00      	add	r7, sp, #0
 802468a:	60f8      	str	r0, [r7, #12]
 802468c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024690:	4b14      	ldr	r3, [pc, #80]	; (80246e4 <FLASH_Program_DoubleWord+0x60>)
 8024692:	691b      	ldr	r3, [r3, #16]
 8024694:	4a13      	ldr	r2, [pc, #76]	; (80246e4 <FLASH_Program_DoubleWord+0x60>)
 8024696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802469a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 802469c:	4b11      	ldr	r3, [pc, #68]	; (80246e4 <FLASH_Program_DoubleWord+0x60>)
 802469e:	691b      	ldr	r3, [r3, #16]
 80246a0:	4a10      	ldr	r2, [pc, #64]	; (80246e4 <FLASH_Program_DoubleWord+0x60>)
 80246a2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80246a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80246a8:	4b0e      	ldr	r3, [pc, #56]	; (80246e4 <FLASH_Program_DoubleWord+0x60>)
 80246aa:	691b      	ldr	r3, [r3, #16]
 80246ac:	4a0d      	ldr	r2, [pc, #52]	; (80246e4 <FLASH_Program_DoubleWord+0x60>)
 80246ae:	f043 0301 	orr.w	r3, r3, #1
 80246b2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80246b4:	68fb      	ldr	r3, [r7, #12]
 80246b6:	683a      	ldr	r2, [r7, #0]
 80246b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80246ba:	f3bf 8f6f 	isb	sy
}
 80246be:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80246c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80246c4:	f04f 0200 	mov.w	r2, #0
 80246c8:	f04f 0300 	mov.w	r3, #0
 80246cc:	000a      	movs	r2, r1
 80246ce:	2300      	movs	r3, #0
 80246d0:	68f9      	ldr	r1, [r7, #12]
 80246d2:	3104      	adds	r1, #4
 80246d4:	4613      	mov	r3, r2
 80246d6:	600b      	str	r3, [r1, #0]
}
 80246d8:	bf00      	nop
 80246da:	3714      	adds	r7, #20
 80246dc:	46bd      	mov	sp, r7
 80246de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246e2:	4770      	bx	lr
 80246e4:	40023c00 	.word	0x40023c00

080246e8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80246e8:	b480      	push	{r7}
 80246ea:	b083      	sub	sp, #12
 80246ec:	af00      	add	r7, sp, #0
 80246ee:	6078      	str	r0, [r7, #4]
 80246f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80246f2:	4b0d      	ldr	r3, [pc, #52]	; (8024728 <FLASH_Program_Word+0x40>)
 80246f4:	691b      	ldr	r3, [r3, #16]
 80246f6:	4a0c      	ldr	r2, [pc, #48]	; (8024728 <FLASH_Program_Word+0x40>)
 80246f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80246fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80246fe:	4b0a      	ldr	r3, [pc, #40]	; (8024728 <FLASH_Program_Word+0x40>)
 8024700:	691b      	ldr	r3, [r3, #16]
 8024702:	4a09      	ldr	r2, [pc, #36]	; (8024728 <FLASH_Program_Word+0x40>)
 8024704:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8024708:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802470a:	4b07      	ldr	r3, [pc, #28]	; (8024728 <FLASH_Program_Word+0x40>)
 802470c:	691b      	ldr	r3, [r3, #16]
 802470e:	4a06      	ldr	r2, [pc, #24]	; (8024728 <FLASH_Program_Word+0x40>)
 8024710:	f043 0301 	orr.w	r3, r3, #1
 8024714:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8024716:	687b      	ldr	r3, [r7, #4]
 8024718:	683a      	ldr	r2, [r7, #0]
 802471a:	601a      	str	r2, [r3, #0]
}
 802471c:	bf00      	nop
 802471e:	370c      	adds	r7, #12
 8024720:	46bd      	mov	sp, r7
 8024722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024726:	4770      	bx	lr
 8024728:	40023c00 	.word	0x40023c00

0802472c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 802472c:	b480      	push	{r7}
 802472e:	b083      	sub	sp, #12
 8024730:	af00      	add	r7, sp, #0
 8024732:	6078      	str	r0, [r7, #4]
 8024734:	460b      	mov	r3, r1
 8024736:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024738:	4b0d      	ldr	r3, [pc, #52]	; (8024770 <FLASH_Program_HalfWord+0x44>)
 802473a:	691b      	ldr	r3, [r3, #16]
 802473c:	4a0c      	ldr	r2, [pc, #48]	; (8024770 <FLASH_Program_HalfWord+0x44>)
 802473e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024742:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8024744:	4b0a      	ldr	r3, [pc, #40]	; (8024770 <FLASH_Program_HalfWord+0x44>)
 8024746:	691b      	ldr	r3, [r3, #16]
 8024748:	4a09      	ldr	r2, [pc, #36]	; (8024770 <FLASH_Program_HalfWord+0x44>)
 802474a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802474e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8024750:	4b07      	ldr	r3, [pc, #28]	; (8024770 <FLASH_Program_HalfWord+0x44>)
 8024752:	691b      	ldr	r3, [r3, #16]
 8024754:	4a06      	ldr	r2, [pc, #24]	; (8024770 <FLASH_Program_HalfWord+0x44>)
 8024756:	f043 0301 	orr.w	r3, r3, #1
 802475a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 802475c:	687b      	ldr	r3, [r7, #4]
 802475e:	887a      	ldrh	r2, [r7, #2]
 8024760:	801a      	strh	r2, [r3, #0]
}
 8024762:	bf00      	nop
 8024764:	370c      	adds	r7, #12
 8024766:	46bd      	mov	sp, r7
 8024768:	f85d 7b04 	ldr.w	r7, [sp], #4
 802476c:	4770      	bx	lr
 802476e:	bf00      	nop
 8024770:	40023c00 	.word	0x40023c00

08024774 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8024774:	b480      	push	{r7}
 8024776:	b083      	sub	sp, #12
 8024778:	af00      	add	r7, sp, #0
 802477a:	6078      	str	r0, [r7, #4]
 802477c:	460b      	mov	r3, r1
 802477e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024780:	4b0c      	ldr	r3, [pc, #48]	; (80247b4 <FLASH_Program_Byte+0x40>)
 8024782:	691b      	ldr	r3, [r3, #16]
 8024784:	4a0b      	ldr	r2, [pc, #44]	; (80247b4 <FLASH_Program_Byte+0x40>)
 8024786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802478a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 802478c:	4b09      	ldr	r3, [pc, #36]	; (80247b4 <FLASH_Program_Byte+0x40>)
 802478e:	4a09      	ldr	r2, [pc, #36]	; (80247b4 <FLASH_Program_Byte+0x40>)
 8024790:	691b      	ldr	r3, [r3, #16]
 8024792:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8024794:	4b07      	ldr	r3, [pc, #28]	; (80247b4 <FLASH_Program_Byte+0x40>)
 8024796:	691b      	ldr	r3, [r3, #16]
 8024798:	4a06      	ldr	r2, [pc, #24]	; (80247b4 <FLASH_Program_Byte+0x40>)
 802479a:	f043 0301 	orr.w	r3, r3, #1
 802479e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80247a0:	687b      	ldr	r3, [r7, #4]
 80247a2:	78fa      	ldrb	r2, [r7, #3]
 80247a4:	701a      	strb	r2, [r3, #0]
}
 80247a6:	bf00      	nop
 80247a8:	370c      	adds	r7, #12
 80247aa:	46bd      	mov	sp, r7
 80247ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247b0:	4770      	bx	lr
 80247b2:	bf00      	nop
 80247b4:	40023c00 	.word	0x40023c00

080247b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80247b8:	b480      	push	{r7}
 80247ba:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80247bc:	4b2f      	ldr	r3, [pc, #188]	; (802487c <FLASH_SetErrorCode+0xc4>)
 80247be:	68db      	ldr	r3, [r3, #12]
 80247c0:	f003 0310 	and.w	r3, r3, #16
 80247c4:	2b00      	cmp	r3, #0
 80247c6:	d008      	beq.n	80247da <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80247c8:	4b2d      	ldr	r3, [pc, #180]	; (8024880 <FLASH_SetErrorCode+0xc8>)
 80247ca:	69db      	ldr	r3, [r3, #28]
 80247cc:	f043 0310 	orr.w	r3, r3, #16
 80247d0:	4a2b      	ldr	r2, [pc, #172]	; (8024880 <FLASH_SetErrorCode+0xc8>)
 80247d2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80247d4:	4b29      	ldr	r3, [pc, #164]	; (802487c <FLASH_SetErrorCode+0xc4>)
 80247d6:	2210      	movs	r2, #16
 80247d8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80247da:	4b28      	ldr	r3, [pc, #160]	; (802487c <FLASH_SetErrorCode+0xc4>)
 80247dc:	68db      	ldr	r3, [r3, #12]
 80247de:	f003 0320 	and.w	r3, r3, #32
 80247e2:	2b00      	cmp	r3, #0
 80247e4:	d008      	beq.n	80247f8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80247e6:	4b26      	ldr	r3, [pc, #152]	; (8024880 <FLASH_SetErrorCode+0xc8>)
 80247e8:	69db      	ldr	r3, [r3, #28]
 80247ea:	f043 0308 	orr.w	r3, r3, #8
 80247ee:	4a24      	ldr	r2, [pc, #144]	; (8024880 <FLASH_SetErrorCode+0xc8>)
 80247f0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80247f2:	4b22      	ldr	r3, [pc, #136]	; (802487c <FLASH_SetErrorCode+0xc4>)
 80247f4:	2220      	movs	r2, #32
 80247f6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80247f8:	4b20      	ldr	r3, [pc, #128]	; (802487c <FLASH_SetErrorCode+0xc4>)
 80247fa:	68db      	ldr	r3, [r3, #12]
 80247fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024800:	2b00      	cmp	r3, #0
 8024802:	d008      	beq.n	8024816 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8024804:	4b1e      	ldr	r3, [pc, #120]	; (8024880 <FLASH_SetErrorCode+0xc8>)
 8024806:	69db      	ldr	r3, [r3, #28]
 8024808:	f043 0304 	orr.w	r3, r3, #4
 802480c:	4a1c      	ldr	r2, [pc, #112]	; (8024880 <FLASH_SetErrorCode+0xc8>)
 802480e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8024810:	4b1a      	ldr	r3, [pc, #104]	; (802487c <FLASH_SetErrorCode+0xc4>)
 8024812:	2240      	movs	r2, #64	; 0x40
 8024814:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8024816:	4b19      	ldr	r3, [pc, #100]	; (802487c <FLASH_SetErrorCode+0xc4>)
 8024818:	68db      	ldr	r3, [r3, #12]
 802481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802481e:	2b00      	cmp	r3, #0
 8024820:	d008      	beq.n	8024834 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8024822:	4b17      	ldr	r3, [pc, #92]	; (8024880 <FLASH_SetErrorCode+0xc8>)
 8024824:	69db      	ldr	r3, [r3, #28]
 8024826:	f043 0302 	orr.w	r3, r3, #2
 802482a:	4a15      	ldr	r2, [pc, #84]	; (8024880 <FLASH_SetErrorCode+0xc8>)
 802482c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 802482e:	4b13      	ldr	r3, [pc, #76]	; (802487c <FLASH_SetErrorCode+0xc4>)
 8024830:	2280      	movs	r2, #128	; 0x80
 8024832:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8024834:	4b11      	ldr	r3, [pc, #68]	; (802487c <FLASH_SetErrorCode+0xc4>)
 8024836:	68db      	ldr	r3, [r3, #12]
 8024838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802483c:	2b00      	cmp	r3, #0
 802483e:	d009      	beq.n	8024854 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8024840:	4b0f      	ldr	r3, [pc, #60]	; (8024880 <FLASH_SetErrorCode+0xc8>)
 8024842:	69db      	ldr	r3, [r3, #28]
 8024844:	f043 0301 	orr.w	r3, r3, #1
 8024848:	4a0d      	ldr	r2, [pc, #52]	; (8024880 <FLASH_SetErrorCode+0xc8>)
 802484a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 802484c:	4b0b      	ldr	r3, [pc, #44]	; (802487c <FLASH_SetErrorCode+0xc4>)
 802484e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8024852:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8024854:	4b09      	ldr	r3, [pc, #36]	; (802487c <FLASH_SetErrorCode+0xc4>)
 8024856:	68db      	ldr	r3, [r3, #12]
 8024858:	f003 0302 	and.w	r3, r3, #2
 802485c:	2b00      	cmp	r3, #0
 802485e:	d008      	beq.n	8024872 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8024860:	4b07      	ldr	r3, [pc, #28]	; (8024880 <FLASH_SetErrorCode+0xc8>)
 8024862:	69db      	ldr	r3, [r3, #28]
 8024864:	f043 0320 	orr.w	r3, r3, #32
 8024868:	4a05      	ldr	r2, [pc, #20]	; (8024880 <FLASH_SetErrorCode+0xc8>)
 802486a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 802486c:	4b03      	ldr	r3, [pc, #12]	; (802487c <FLASH_SetErrorCode+0xc4>)
 802486e:	2202      	movs	r2, #2
 8024870:	60da      	str	r2, [r3, #12]
  }
}
 8024872:	bf00      	nop
 8024874:	46bd      	mov	sp, r7
 8024876:	f85d 7b04 	ldr.w	r7, [sp], #4
 802487a:	4770      	bx	lr
 802487c:	40023c00 	.word	0x40023c00
 8024880:	20000afc 	.word	0x20000afc

08024884 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8024884:	b580      	push	{r7, lr}
 8024886:	b084      	sub	sp, #16
 8024888:	af00      	add	r7, sp, #0
 802488a:	6078      	str	r0, [r7, #4]
 802488c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 802488e:	2301      	movs	r3, #1
 8024890:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8024892:	2300      	movs	r3, #0
 8024894:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8024896:	4b32      	ldr	r3, [pc, #200]	; (8024960 <HAL_FLASHEx_Erase+0xdc>)
 8024898:	7e1b      	ldrb	r3, [r3, #24]
 802489a:	2b01      	cmp	r3, #1
 802489c:	d101      	bne.n	80248a2 <HAL_FLASHEx_Erase+0x1e>
 802489e:	2302      	movs	r3, #2
 80248a0:	e05a      	b.n	8024958 <HAL_FLASHEx_Erase+0xd4>
 80248a2:	4b2f      	ldr	r3, [pc, #188]	; (8024960 <HAL_FLASHEx_Erase+0xdc>)
 80248a4:	2201      	movs	r2, #1
 80248a6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80248a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80248ac:	f7ff feaa 	bl	8024604 <FLASH_WaitForLastOperation>
 80248b0:	4603      	mov	r3, r0
 80248b2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80248b4:	7bfb      	ldrb	r3, [r7, #15]
 80248b6:	2b00      	cmp	r3, #0
 80248b8:	d14a      	bne.n	8024950 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80248ba:	683b      	ldr	r3, [r7, #0]
 80248bc:	f04f 32ff 	mov.w	r2, #4294967295
 80248c0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80248c2:	687b      	ldr	r3, [r7, #4]
 80248c4:	681b      	ldr	r3, [r3, #0]
 80248c6:	2b01      	cmp	r3, #1
 80248c8:	d117      	bne.n	80248fa <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80248ca:	687b      	ldr	r3, [r7, #4]
 80248cc:	691b      	ldr	r3, [r3, #16]
 80248ce:	b2da      	uxtb	r2, r3
 80248d0:	687b      	ldr	r3, [r7, #4]
 80248d2:	685b      	ldr	r3, [r3, #4]
 80248d4:	4619      	mov	r1, r3
 80248d6:	4610      	mov	r0, r2
 80248d8:	f000 f846 	bl	8024968 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80248dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80248e0:	f7ff fe90 	bl	8024604 <FLASH_WaitForLastOperation>
 80248e4:	4603      	mov	r3, r0
 80248e6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80248e8:	4b1e      	ldr	r3, [pc, #120]	; (8024964 <HAL_FLASHEx_Erase+0xe0>)
 80248ea:	691b      	ldr	r3, [r3, #16]
 80248ec:	4a1d      	ldr	r2, [pc, #116]	; (8024964 <HAL_FLASHEx_Erase+0xe0>)
 80248ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80248f2:	f023 0304 	bic.w	r3, r3, #4
 80248f6:	6113      	str	r3, [r2, #16]
 80248f8:	e028      	b.n	802494c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80248fa:	687b      	ldr	r3, [r7, #4]
 80248fc:	689b      	ldr	r3, [r3, #8]
 80248fe:	60bb      	str	r3, [r7, #8]
 8024900:	e01c      	b.n	802493c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8024902:	687b      	ldr	r3, [r7, #4]
 8024904:	691b      	ldr	r3, [r3, #16]
 8024906:	b2db      	uxtb	r3, r3
 8024908:	4619      	mov	r1, r3
 802490a:	68b8      	ldr	r0, [r7, #8]
 802490c:	f000 f866 	bl	80249dc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8024910:	f24c 3050 	movw	r0, #50000	; 0xc350
 8024914:	f7ff fe76 	bl	8024604 <FLASH_WaitForLastOperation>
 8024918:	4603      	mov	r3, r0
 802491a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 802491c:	4b11      	ldr	r3, [pc, #68]	; (8024964 <HAL_FLASHEx_Erase+0xe0>)
 802491e:	691b      	ldr	r3, [r3, #16]
 8024920:	4a10      	ldr	r2, [pc, #64]	; (8024964 <HAL_FLASHEx_Erase+0xe0>)
 8024922:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8024926:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8024928:	7bfb      	ldrb	r3, [r7, #15]
 802492a:	2b00      	cmp	r3, #0
 802492c:	d003      	beq.n	8024936 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 802492e:	683b      	ldr	r3, [r7, #0]
 8024930:	68ba      	ldr	r2, [r7, #8]
 8024932:	601a      	str	r2, [r3, #0]
          break;
 8024934:	e00a      	b.n	802494c <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8024936:	68bb      	ldr	r3, [r7, #8]
 8024938:	3301      	adds	r3, #1
 802493a:	60bb      	str	r3, [r7, #8]
 802493c:	687b      	ldr	r3, [r7, #4]
 802493e:	68da      	ldr	r2, [r3, #12]
 8024940:	687b      	ldr	r3, [r7, #4]
 8024942:	689b      	ldr	r3, [r3, #8]
 8024944:	4413      	add	r3, r2
 8024946:	68ba      	ldr	r2, [r7, #8]
 8024948:	429a      	cmp	r2, r3
 802494a:	d3da      	bcc.n	8024902 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 802494c:	f000 f894 	bl	8024a78 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8024950:	4b03      	ldr	r3, [pc, #12]	; (8024960 <HAL_FLASHEx_Erase+0xdc>)
 8024952:	2200      	movs	r2, #0
 8024954:	761a      	strb	r2, [r3, #24]

  return status;
 8024956:	7bfb      	ldrb	r3, [r7, #15]
}
 8024958:	4618      	mov	r0, r3
 802495a:	3710      	adds	r7, #16
 802495c:	46bd      	mov	sp, r7
 802495e:	bd80      	pop	{r7, pc}
 8024960:	20000afc 	.word	0x20000afc
 8024964:	40023c00 	.word	0x40023c00

08024968 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8024968:	b480      	push	{r7}
 802496a:	b083      	sub	sp, #12
 802496c:	af00      	add	r7, sp, #0
 802496e:	4603      	mov	r3, r0
 8024970:	6039      	str	r1, [r7, #0]
 8024972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024974:	4b18      	ldr	r3, [pc, #96]	; (80249d8 <FLASH_MassErase+0x70>)
 8024976:	691b      	ldr	r3, [r3, #16]
 8024978:	4a17      	ldr	r2, [pc, #92]	; (80249d8 <FLASH_MassErase+0x70>)
 802497a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802497e:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8024980:	683b      	ldr	r3, [r7, #0]
 8024982:	2b03      	cmp	r3, #3
 8024984:	d108      	bne.n	8024998 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8024986:	4b14      	ldr	r3, [pc, #80]	; (80249d8 <FLASH_MassErase+0x70>)
 8024988:	691b      	ldr	r3, [r3, #16]
 802498a:	4a13      	ldr	r2, [pc, #76]	; (80249d8 <FLASH_MassErase+0x70>)
 802498c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8024990:	f043 0304 	orr.w	r3, r3, #4
 8024994:	6113      	str	r3, [r2, #16]
 8024996:	e00f      	b.n	80249b8 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8024998:	683b      	ldr	r3, [r7, #0]
 802499a:	2b01      	cmp	r3, #1
 802499c:	d106      	bne.n	80249ac <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 802499e:	4b0e      	ldr	r3, [pc, #56]	; (80249d8 <FLASH_MassErase+0x70>)
 80249a0:	691b      	ldr	r3, [r3, #16]
 80249a2:	4a0d      	ldr	r2, [pc, #52]	; (80249d8 <FLASH_MassErase+0x70>)
 80249a4:	f043 0304 	orr.w	r3, r3, #4
 80249a8:	6113      	str	r3, [r2, #16]
 80249aa:	e005      	b.n	80249b8 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80249ac:	4b0a      	ldr	r3, [pc, #40]	; (80249d8 <FLASH_MassErase+0x70>)
 80249ae:	691b      	ldr	r3, [r3, #16]
 80249b0:	4a09      	ldr	r2, [pc, #36]	; (80249d8 <FLASH_MassErase+0x70>)
 80249b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80249b6:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80249b8:	4b07      	ldr	r3, [pc, #28]	; (80249d8 <FLASH_MassErase+0x70>)
 80249ba:	691a      	ldr	r2, [r3, #16]
 80249bc:	79fb      	ldrb	r3, [r7, #7]
 80249be:	021b      	lsls	r3, r3, #8
 80249c0:	4313      	orrs	r3, r2
 80249c2:	4a05      	ldr	r2, [pc, #20]	; (80249d8 <FLASH_MassErase+0x70>)
 80249c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80249c8:	6113      	str	r3, [r2, #16]
}
 80249ca:	bf00      	nop
 80249cc:	370c      	adds	r7, #12
 80249ce:	46bd      	mov	sp, r7
 80249d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249d4:	4770      	bx	lr
 80249d6:	bf00      	nop
 80249d8:	40023c00 	.word	0x40023c00

080249dc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80249dc:	b480      	push	{r7}
 80249de:	b085      	sub	sp, #20
 80249e0:	af00      	add	r7, sp, #0
 80249e2:	6078      	str	r0, [r7, #4]
 80249e4:	460b      	mov	r3, r1
 80249e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80249e8:	2300      	movs	r3, #0
 80249ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80249ec:	78fb      	ldrb	r3, [r7, #3]
 80249ee:	2b00      	cmp	r3, #0
 80249f0:	d102      	bne.n	80249f8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80249f2:	2300      	movs	r3, #0
 80249f4:	60fb      	str	r3, [r7, #12]
 80249f6:	e010      	b.n	8024a1a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80249f8:	78fb      	ldrb	r3, [r7, #3]
 80249fa:	2b01      	cmp	r3, #1
 80249fc:	d103      	bne.n	8024a06 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80249fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8024a02:	60fb      	str	r3, [r7, #12]
 8024a04:	e009      	b.n	8024a1a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8024a06:	78fb      	ldrb	r3, [r7, #3]
 8024a08:	2b02      	cmp	r3, #2
 8024a0a:	d103      	bne.n	8024a14 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8024a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024a10:	60fb      	str	r3, [r7, #12]
 8024a12:	e002      	b.n	8024a1a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8024a14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8024a18:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8024a1a:	687b      	ldr	r3, [r7, #4]
 8024a1c:	2b0b      	cmp	r3, #11
 8024a1e:	d902      	bls.n	8024a26 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8024a20:	687b      	ldr	r3, [r7, #4]
 8024a22:	3304      	adds	r3, #4
 8024a24:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024a26:	4b13      	ldr	r3, [pc, #76]	; (8024a74 <FLASH_Erase_Sector+0x98>)
 8024a28:	691b      	ldr	r3, [r3, #16]
 8024a2a:	4a12      	ldr	r2, [pc, #72]	; (8024a74 <FLASH_Erase_Sector+0x98>)
 8024a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024a30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8024a32:	4b10      	ldr	r3, [pc, #64]	; (8024a74 <FLASH_Erase_Sector+0x98>)
 8024a34:	691a      	ldr	r2, [r3, #16]
 8024a36:	490f      	ldr	r1, [pc, #60]	; (8024a74 <FLASH_Erase_Sector+0x98>)
 8024a38:	68fb      	ldr	r3, [r7, #12]
 8024a3a:	4313      	orrs	r3, r2
 8024a3c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8024a3e:	4b0d      	ldr	r3, [pc, #52]	; (8024a74 <FLASH_Erase_Sector+0x98>)
 8024a40:	691b      	ldr	r3, [r3, #16]
 8024a42:	4a0c      	ldr	r2, [pc, #48]	; (8024a74 <FLASH_Erase_Sector+0x98>)
 8024a44:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8024a48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8024a4a:	4b0a      	ldr	r3, [pc, #40]	; (8024a74 <FLASH_Erase_Sector+0x98>)
 8024a4c:	691a      	ldr	r2, [r3, #16]
 8024a4e:	687b      	ldr	r3, [r7, #4]
 8024a50:	00db      	lsls	r3, r3, #3
 8024a52:	4313      	orrs	r3, r2
 8024a54:	4a07      	ldr	r2, [pc, #28]	; (8024a74 <FLASH_Erase_Sector+0x98>)
 8024a56:	f043 0302 	orr.w	r3, r3, #2
 8024a5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8024a5c:	4b05      	ldr	r3, [pc, #20]	; (8024a74 <FLASH_Erase_Sector+0x98>)
 8024a5e:	691b      	ldr	r3, [r3, #16]
 8024a60:	4a04      	ldr	r2, [pc, #16]	; (8024a74 <FLASH_Erase_Sector+0x98>)
 8024a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8024a66:	6113      	str	r3, [r2, #16]
}
 8024a68:	bf00      	nop
 8024a6a:	3714      	adds	r7, #20
 8024a6c:	46bd      	mov	sp, r7
 8024a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a72:	4770      	bx	lr
 8024a74:	40023c00 	.word	0x40023c00

08024a78 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8024a78:	b480      	push	{r7}
 8024a7a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8024a7c:	4b20      	ldr	r3, [pc, #128]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024a7e:	681b      	ldr	r3, [r3, #0]
 8024a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8024a84:	2b00      	cmp	r3, #0
 8024a86:	d017      	beq.n	8024ab8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8024a88:	4b1d      	ldr	r3, [pc, #116]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024a8a:	681b      	ldr	r3, [r3, #0]
 8024a8c:	4a1c      	ldr	r2, [pc, #112]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024a8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8024a92:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8024a94:	4b1a      	ldr	r3, [pc, #104]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024a96:	681b      	ldr	r3, [r3, #0]
 8024a98:	4a19      	ldr	r2, [pc, #100]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024a9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8024a9e:	6013      	str	r3, [r2, #0]
 8024aa0:	4b17      	ldr	r3, [pc, #92]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024aa2:	681b      	ldr	r3, [r3, #0]
 8024aa4:	4a16      	ldr	r2, [pc, #88]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8024aaa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8024aac:	4b14      	ldr	r3, [pc, #80]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024aae:	681b      	ldr	r3, [r3, #0]
 8024ab0:	4a13      	ldr	r2, [pc, #76]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8024ab6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8024ab8:	4b11      	ldr	r3, [pc, #68]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024aba:	681b      	ldr	r3, [r3, #0]
 8024abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024ac0:	2b00      	cmp	r3, #0
 8024ac2:	d017      	beq.n	8024af4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8024ac4:	4b0e      	ldr	r3, [pc, #56]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024ac6:	681b      	ldr	r3, [r3, #0]
 8024ac8:	4a0d      	ldr	r2, [pc, #52]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024aca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8024ace:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8024ad0:	4b0b      	ldr	r3, [pc, #44]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024ad2:	681b      	ldr	r3, [r3, #0]
 8024ad4:	4a0a      	ldr	r2, [pc, #40]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024ad6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8024ada:	6013      	str	r3, [r2, #0]
 8024adc:	4b08      	ldr	r3, [pc, #32]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024ade:	681b      	ldr	r3, [r3, #0]
 8024ae0:	4a07      	ldr	r2, [pc, #28]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024ae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024ae6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8024ae8:	4b05      	ldr	r3, [pc, #20]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024aea:	681b      	ldr	r3, [r3, #0]
 8024aec:	4a04      	ldr	r2, [pc, #16]	; (8024b00 <FLASH_FlushCaches+0x88>)
 8024aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8024af2:	6013      	str	r3, [r2, #0]
  }
}
 8024af4:	bf00      	nop
 8024af6:	46bd      	mov	sp, r7
 8024af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024afc:	4770      	bx	lr
 8024afe:	bf00      	nop
 8024b00:	40023c00 	.word	0x40023c00

08024b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8024b04:	b480      	push	{r7}
 8024b06:	b089      	sub	sp, #36	; 0x24
 8024b08:	af00      	add	r7, sp, #0
 8024b0a:	6078      	str	r0, [r7, #4]
 8024b0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024b0e:	2300      	movs	r3, #0
 8024b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8024b12:	2300      	movs	r3, #0
 8024b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8024b16:	2300      	movs	r3, #0
 8024b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024b1a:	2300      	movs	r3, #0
 8024b1c:	61fb      	str	r3, [r7, #28]
 8024b1e:	e177      	b.n	8024e10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024b20:	2201      	movs	r2, #1
 8024b22:	69fb      	ldr	r3, [r7, #28]
 8024b24:	fa02 f303 	lsl.w	r3, r2, r3
 8024b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8024b2a:	683b      	ldr	r3, [r7, #0]
 8024b2c:	681b      	ldr	r3, [r3, #0]
 8024b2e:	697a      	ldr	r2, [r7, #20]
 8024b30:	4013      	ands	r3, r2
 8024b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8024b34:	693a      	ldr	r2, [r7, #16]
 8024b36:	697b      	ldr	r3, [r7, #20]
 8024b38:	429a      	cmp	r2, r3
 8024b3a:	f040 8166 	bne.w	8024e0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8024b3e:	683b      	ldr	r3, [r7, #0]
 8024b40:	685b      	ldr	r3, [r3, #4]
 8024b42:	f003 0303 	and.w	r3, r3, #3
 8024b46:	2b01      	cmp	r3, #1
 8024b48:	d005      	beq.n	8024b56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8024b4a:	683b      	ldr	r3, [r7, #0]
 8024b4c:	685b      	ldr	r3, [r3, #4]
 8024b4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8024b52:	2b02      	cmp	r3, #2
 8024b54:	d130      	bne.n	8024bb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8024b56:	687b      	ldr	r3, [r7, #4]
 8024b58:	689b      	ldr	r3, [r3, #8]
 8024b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024b5c:	69fb      	ldr	r3, [r7, #28]
 8024b5e:	005b      	lsls	r3, r3, #1
 8024b60:	2203      	movs	r2, #3
 8024b62:	fa02 f303 	lsl.w	r3, r2, r3
 8024b66:	43db      	mvns	r3, r3
 8024b68:	69ba      	ldr	r2, [r7, #24]
 8024b6a:	4013      	ands	r3, r2
 8024b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8024b6e:	683b      	ldr	r3, [r7, #0]
 8024b70:	68da      	ldr	r2, [r3, #12]
 8024b72:	69fb      	ldr	r3, [r7, #28]
 8024b74:	005b      	lsls	r3, r3, #1
 8024b76:	fa02 f303 	lsl.w	r3, r2, r3
 8024b7a:	69ba      	ldr	r2, [r7, #24]
 8024b7c:	4313      	orrs	r3, r2
 8024b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8024b80:	687b      	ldr	r3, [r7, #4]
 8024b82:	69ba      	ldr	r2, [r7, #24]
 8024b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8024b86:	687b      	ldr	r3, [r7, #4]
 8024b88:	685b      	ldr	r3, [r3, #4]
 8024b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024b8c:	2201      	movs	r2, #1
 8024b8e:	69fb      	ldr	r3, [r7, #28]
 8024b90:	fa02 f303 	lsl.w	r3, r2, r3
 8024b94:	43db      	mvns	r3, r3
 8024b96:	69ba      	ldr	r2, [r7, #24]
 8024b98:	4013      	ands	r3, r2
 8024b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8024b9c:	683b      	ldr	r3, [r7, #0]
 8024b9e:	685b      	ldr	r3, [r3, #4]
 8024ba0:	091b      	lsrs	r3, r3, #4
 8024ba2:	f003 0201 	and.w	r2, r3, #1
 8024ba6:	69fb      	ldr	r3, [r7, #28]
 8024ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8024bac:	69ba      	ldr	r2, [r7, #24]
 8024bae:	4313      	orrs	r3, r2
 8024bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8024bb2:	687b      	ldr	r3, [r7, #4]
 8024bb4:	69ba      	ldr	r2, [r7, #24]
 8024bb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8024bb8:	683b      	ldr	r3, [r7, #0]
 8024bba:	685b      	ldr	r3, [r3, #4]
 8024bbc:	f003 0303 	and.w	r3, r3, #3
 8024bc0:	2b03      	cmp	r3, #3
 8024bc2:	d017      	beq.n	8024bf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8024bc4:	687b      	ldr	r3, [r7, #4]
 8024bc6:	68db      	ldr	r3, [r3, #12]
 8024bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8024bca:	69fb      	ldr	r3, [r7, #28]
 8024bcc:	005b      	lsls	r3, r3, #1
 8024bce:	2203      	movs	r2, #3
 8024bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8024bd4:	43db      	mvns	r3, r3
 8024bd6:	69ba      	ldr	r2, [r7, #24]
 8024bd8:	4013      	ands	r3, r2
 8024bda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8024bdc:	683b      	ldr	r3, [r7, #0]
 8024bde:	689a      	ldr	r2, [r3, #8]
 8024be0:	69fb      	ldr	r3, [r7, #28]
 8024be2:	005b      	lsls	r3, r3, #1
 8024be4:	fa02 f303 	lsl.w	r3, r2, r3
 8024be8:	69ba      	ldr	r2, [r7, #24]
 8024bea:	4313      	orrs	r3, r2
 8024bec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8024bee:	687b      	ldr	r3, [r7, #4]
 8024bf0:	69ba      	ldr	r2, [r7, #24]
 8024bf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8024bf4:	683b      	ldr	r3, [r7, #0]
 8024bf6:	685b      	ldr	r3, [r3, #4]
 8024bf8:	f003 0303 	and.w	r3, r3, #3
 8024bfc:	2b02      	cmp	r3, #2
 8024bfe:	d123      	bne.n	8024c48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8024c00:	69fb      	ldr	r3, [r7, #28]
 8024c02:	08da      	lsrs	r2, r3, #3
 8024c04:	687b      	ldr	r3, [r7, #4]
 8024c06:	3208      	adds	r2, #8
 8024c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024c0e:	69fb      	ldr	r3, [r7, #28]
 8024c10:	f003 0307 	and.w	r3, r3, #7
 8024c14:	009b      	lsls	r3, r3, #2
 8024c16:	220f      	movs	r2, #15
 8024c18:	fa02 f303 	lsl.w	r3, r2, r3
 8024c1c:	43db      	mvns	r3, r3
 8024c1e:	69ba      	ldr	r2, [r7, #24]
 8024c20:	4013      	ands	r3, r2
 8024c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8024c24:	683b      	ldr	r3, [r7, #0]
 8024c26:	691a      	ldr	r2, [r3, #16]
 8024c28:	69fb      	ldr	r3, [r7, #28]
 8024c2a:	f003 0307 	and.w	r3, r3, #7
 8024c2e:	009b      	lsls	r3, r3, #2
 8024c30:	fa02 f303 	lsl.w	r3, r2, r3
 8024c34:	69ba      	ldr	r2, [r7, #24]
 8024c36:	4313      	orrs	r3, r2
 8024c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8024c3a:	69fb      	ldr	r3, [r7, #28]
 8024c3c:	08da      	lsrs	r2, r3, #3
 8024c3e:	687b      	ldr	r3, [r7, #4]
 8024c40:	3208      	adds	r2, #8
 8024c42:	69b9      	ldr	r1, [r7, #24]
 8024c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8024c48:	687b      	ldr	r3, [r7, #4]
 8024c4a:	681b      	ldr	r3, [r3, #0]
 8024c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024c4e:	69fb      	ldr	r3, [r7, #28]
 8024c50:	005b      	lsls	r3, r3, #1
 8024c52:	2203      	movs	r2, #3
 8024c54:	fa02 f303 	lsl.w	r3, r2, r3
 8024c58:	43db      	mvns	r3, r3
 8024c5a:	69ba      	ldr	r2, [r7, #24]
 8024c5c:	4013      	ands	r3, r2
 8024c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8024c60:	683b      	ldr	r3, [r7, #0]
 8024c62:	685b      	ldr	r3, [r3, #4]
 8024c64:	f003 0203 	and.w	r2, r3, #3
 8024c68:	69fb      	ldr	r3, [r7, #28]
 8024c6a:	005b      	lsls	r3, r3, #1
 8024c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8024c70:	69ba      	ldr	r2, [r7, #24]
 8024c72:	4313      	orrs	r3, r2
 8024c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8024c76:	687b      	ldr	r3, [r7, #4]
 8024c78:	69ba      	ldr	r2, [r7, #24]
 8024c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8024c7c:	683b      	ldr	r3, [r7, #0]
 8024c7e:	685b      	ldr	r3, [r3, #4]
 8024c80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8024c84:	2b00      	cmp	r3, #0
 8024c86:	f000 80c0 	beq.w	8024e0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8024c8a:	2300      	movs	r3, #0
 8024c8c:	60fb      	str	r3, [r7, #12]
 8024c8e:	4b66      	ldr	r3, [pc, #408]	; (8024e28 <HAL_GPIO_Init+0x324>)
 8024c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024c92:	4a65      	ldr	r2, [pc, #404]	; (8024e28 <HAL_GPIO_Init+0x324>)
 8024c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024c98:	6453      	str	r3, [r2, #68]	; 0x44
 8024c9a:	4b63      	ldr	r3, [pc, #396]	; (8024e28 <HAL_GPIO_Init+0x324>)
 8024c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024ca2:	60fb      	str	r3, [r7, #12]
 8024ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8024ca6:	4a61      	ldr	r2, [pc, #388]	; (8024e2c <HAL_GPIO_Init+0x328>)
 8024ca8:	69fb      	ldr	r3, [r7, #28]
 8024caa:	089b      	lsrs	r3, r3, #2
 8024cac:	3302      	adds	r3, #2
 8024cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8024cb4:	69fb      	ldr	r3, [r7, #28]
 8024cb6:	f003 0303 	and.w	r3, r3, #3
 8024cba:	009b      	lsls	r3, r3, #2
 8024cbc:	220f      	movs	r2, #15
 8024cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8024cc2:	43db      	mvns	r3, r3
 8024cc4:	69ba      	ldr	r2, [r7, #24]
 8024cc6:	4013      	ands	r3, r2
 8024cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8024cca:	687b      	ldr	r3, [r7, #4]
 8024ccc:	4a58      	ldr	r2, [pc, #352]	; (8024e30 <HAL_GPIO_Init+0x32c>)
 8024cce:	4293      	cmp	r3, r2
 8024cd0:	d037      	beq.n	8024d42 <HAL_GPIO_Init+0x23e>
 8024cd2:	687b      	ldr	r3, [r7, #4]
 8024cd4:	4a57      	ldr	r2, [pc, #348]	; (8024e34 <HAL_GPIO_Init+0x330>)
 8024cd6:	4293      	cmp	r3, r2
 8024cd8:	d031      	beq.n	8024d3e <HAL_GPIO_Init+0x23a>
 8024cda:	687b      	ldr	r3, [r7, #4]
 8024cdc:	4a56      	ldr	r2, [pc, #344]	; (8024e38 <HAL_GPIO_Init+0x334>)
 8024cde:	4293      	cmp	r3, r2
 8024ce0:	d02b      	beq.n	8024d3a <HAL_GPIO_Init+0x236>
 8024ce2:	687b      	ldr	r3, [r7, #4]
 8024ce4:	4a55      	ldr	r2, [pc, #340]	; (8024e3c <HAL_GPIO_Init+0x338>)
 8024ce6:	4293      	cmp	r3, r2
 8024ce8:	d025      	beq.n	8024d36 <HAL_GPIO_Init+0x232>
 8024cea:	687b      	ldr	r3, [r7, #4]
 8024cec:	4a54      	ldr	r2, [pc, #336]	; (8024e40 <HAL_GPIO_Init+0x33c>)
 8024cee:	4293      	cmp	r3, r2
 8024cf0:	d01f      	beq.n	8024d32 <HAL_GPIO_Init+0x22e>
 8024cf2:	687b      	ldr	r3, [r7, #4]
 8024cf4:	4a53      	ldr	r2, [pc, #332]	; (8024e44 <HAL_GPIO_Init+0x340>)
 8024cf6:	4293      	cmp	r3, r2
 8024cf8:	d019      	beq.n	8024d2e <HAL_GPIO_Init+0x22a>
 8024cfa:	687b      	ldr	r3, [r7, #4]
 8024cfc:	4a52      	ldr	r2, [pc, #328]	; (8024e48 <HAL_GPIO_Init+0x344>)
 8024cfe:	4293      	cmp	r3, r2
 8024d00:	d013      	beq.n	8024d2a <HAL_GPIO_Init+0x226>
 8024d02:	687b      	ldr	r3, [r7, #4]
 8024d04:	4a51      	ldr	r2, [pc, #324]	; (8024e4c <HAL_GPIO_Init+0x348>)
 8024d06:	4293      	cmp	r3, r2
 8024d08:	d00d      	beq.n	8024d26 <HAL_GPIO_Init+0x222>
 8024d0a:	687b      	ldr	r3, [r7, #4]
 8024d0c:	4a50      	ldr	r2, [pc, #320]	; (8024e50 <HAL_GPIO_Init+0x34c>)
 8024d0e:	4293      	cmp	r3, r2
 8024d10:	d007      	beq.n	8024d22 <HAL_GPIO_Init+0x21e>
 8024d12:	687b      	ldr	r3, [r7, #4]
 8024d14:	4a4f      	ldr	r2, [pc, #316]	; (8024e54 <HAL_GPIO_Init+0x350>)
 8024d16:	4293      	cmp	r3, r2
 8024d18:	d101      	bne.n	8024d1e <HAL_GPIO_Init+0x21a>
 8024d1a:	2309      	movs	r3, #9
 8024d1c:	e012      	b.n	8024d44 <HAL_GPIO_Init+0x240>
 8024d1e:	230a      	movs	r3, #10
 8024d20:	e010      	b.n	8024d44 <HAL_GPIO_Init+0x240>
 8024d22:	2308      	movs	r3, #8
 8024d24:	e00e      	b.n	8024d44 <HAL_GPIO_Init+0x240>
 8024d26:	2307      	movs	r3, #7
 8024d28:	e00c      	b.n	8024d44 <HAL_GPIO_Init+0x240>
 8024d2a:	2306      	movs	r3, #6
 8024d2c:	e00a      	b.n	8024d44 <HAL_GPIO_Init+0x240>
 8024d2e:	2305      	movs	r3, #5
 8024d30:	e008      	b.n	8024d44 <HAL_GPIO_Init+0x240>
 8024d32:	2304      	movs	r3, #4
 8024d34:	e006      	b.n	8024d44 <HAL_GPIO_Init+0x240>
 8024d36:	2303      	movs	r3, #3
 8024d38:	e004      	b.n	8024d44 <HAL_GPIO_Init+0x240>
 8024d3a:	2302      	movs	r3, #2
 8024d3c:	e002      	b.n	8024d44 <HAL_GPIO_Init+0x240>
 8024d3e:	2301      	movs	r3, #1
 8024d40:	e000      	b.n	8024d44 <HAL_GPIO_Init+0x240>
 8024d42:	2300      	movs	r3, #0
 8024d44:	69fa      	ldr	r2, [r7, #28]
 8024d46:	f002 0203 	and.w	r2, r2, #3
 8024d4a:	0092      	lsls	r2, r2, #2
 8024d4c:	4093      	lsls	r3, r2
 8024d4e:	69ba      	ldr	r2, [r7, #24]
 8024d50:	4313      	orrs	r3, r2
 8024d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8024d54:	4935      	ldr	r1, [pc, #212]	; (8024e2c <HAL_GPIO_Init+0x328>)
 8024d56:	69fb      	ldr	r3, [r7, #28]
 8024d58:	089b      	lsrs	r3, r3, #2
 8024d5a:	3302      	adds	r3, #2
 8024d5c:	69ba      	ldr	r2, [r7, #24]
 8024d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8024d62:	4b3d      	ldr	r3, [pc, #244]	; (8024e58 <HAL_GPIO_Init+0x354>)
 8024d64:	689b      	ldr	r3, [r3, #8]
 8024d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024d68:	693b      	ldr	r3, [r7, #16]
 8024d6a:	43db      	mvns	r3, r3
 8024d6c:	69ba      	ldr	r2, [r7, #24]
 8024d6e:	4013      	ands	r3, r2
 8024d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8024d72:	683b      	ldr	r3, [r7, #0]
 8024d74:	685b      	ldr	r3, [r3, #4]
 8024d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8024d7a:	2b00      	cmp	r3, #0
 8024d7c:	d003      	beq.n	8024d86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8024d7e:	69ba      	ldr	r2, [r7, #24]
 8024d80:	693b      	ldr	r3, [r7, #16]
 8024d82:	4313      	orrs	r3, r2
 8024d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8024d86:	4a34      	ldr	r2, [pc, #208]	; (8024e58 <HAL_GPIO_Init+0x354>)
 8024d88:	69bb      	ldr	r3, [r7, #24]
 8024d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8024d8c:	4b32      	ldr	r3, [pc, #200]	; (8024e58 <HAL_GPIO_Init+0x354>)
 8024d8e:	68db      	ldr	r3, [r3, #12]
 8024d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024d92:	693b      	ldr	r3, [r7, #16]
 8024d94:	43db      	mvns	r3, r3
 8024d96:	69ba      	ldr	r2, [r7, #24]
 8024d98:	4013      	ands	r3, r2
 8024d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8024d9c:	683b      	ldr	r3, [r7, #0]
 8024d9e:	685b      	ldr	r3, [r3, #4]
 8024da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8024da4:	2b00      	cmp	r3, #0
 8024da6:	d003      	beq.n	8024db0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8024da8:	69ba      	ldr	r2, [r7, #24]
 8024daa:	693b      	ldr	r3, [r7, #16]
 8024dac:	4313      	orrs	r3, r2
 8024dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8024db0:	4a29      	ldr	r2, [pc, #164]	; (8024e58 <HAL_GPIO_Init+0x354>)
 8024db2:	69bb      	ldr	r3, [r7, #24]
 8024db4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8024db6:	4b28      	ldr	r3, [pc, #160]	; (8024e58 <HAL_GPIO_Init+0x354>)
 8024db8:	685b      	ldr	r3, [r3, #4]
 8024dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024dbc:	693b      	ldr	r3, [r7, #16]
 8024dbe:	43db      	mvns	r3, r3
 8024dc0:	69ba      	ldr	r2, [r7, #24]
 8024dc2:	4013      	ands	r3, r2
 8024dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8024dc6:	683b      	ldr	r3, [r7, #0]
 8024dc8:	685b      	ldr	r3, [r3, #4]
 8024dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024dce:	2b00      	cmp	r3, #0
 8024dd0:	d003      	beq.n	8024dda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8024dd2:	69ba      	ldr	r2, [r7, #24]
 8024dd4:	693b      	ldr	r3, [r7, #16]
 8024dd6:	4313      	orrs	r3, r2
 8024dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8024dda:	4a1f      	ldr	r2, [pc, #124]	; (8024e58 <HAL_GPIO_Init+0x354>)
 8024ddc:	69bb      	ldr	r3, [r7, #24]
 8024dde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8024de0:	4b1d      	ldr	r3, [pc, #116]	; (8024e58 <HAL_GPIO_Init+0x354>)
 8024de2:	681b      	ldr	r3, [r3, #0]
 8024de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024de6:	693b      	ldr	r3, [r7, #16]
 8024de8:	43db      	mvns	r3, r3
 8024dea:	69ba      	ldr	r2, [r7, #24]
 8024dec:	4013      	ands	r3, r2
 8024dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8024df0:	683b      	ldr	r3, [r7, #0]
 8024df2:	685b      	ldr	r3, [r3, #4]
 8024df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024df8:	2b00      	cmp	r3, #0
 8024dfa:	d003      	beq.n	8024e04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8024dfc:	69ba      	ldr	r2, [r7, #24]
 8024dfe:	693b      	ldr	r3, [r7, #16]
 8024e00:	4313      	orrs	r3, r2
 8024e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8024e04:	4a14      	ldr	r2, [pc, #80]	; (8024e58 <HAL_GPIO_Init+0x354>)
 8024e06:	69bb      	ldr	r3, [r7, #24]
 8024e08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024e0a:	69fb      	ldr	r3, [r7, #28]
 8024e0c:	3301      	adds	r3, #1
 8024e0e:	61fb      	str	r3, [r7, #28]
 8024e10:	69fb      	ldr	r3, [r7, #28]
 8024e12:	2b0f      	cmp	r3, #15
 8024e14:	f67f ae84 	bls.w	8024b20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8024e18:	bf00      	nop
 8024e1a:	bf00      	nop
 8024e1c:	3724      	adds	r7, #36	; 0x24
 8024e1e:	46bd      	mov	sp, r7
 8024e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e24:	4770      	bx	lr
 8024e26:	bf00      	nop
 8024e28:	40023800 	.word	0x40023800
 8024e2c:	40013800 	.word	0x40013800
 8024e30:	40020000 	.word	0x40020000
 8024e34:	40020400 	.word	0x40020400
 8024e38:	40020800 	.word	0x40020800
 8024e3c:	40020c00 	.word	0x40020c00
 8024e40:	40021000 	.word	0x40021000
 8024e44:	40021400 	.word	0x40021400
 8024e48:	40021800 	.word	0x40021800
 8024e4c:	40021c00 	.word	0x40021c00
 8024e50:	40022000 	.word	0x40022000
 8024e54:	40022400 	.word	0x40022400
 8024e58:	40013c00 	.word	0x40013c00

08024e5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8024e5c:	b480      	push	{r7}
 8024e5e:	b087      	sub	sp, #28
 8024e60:	af00      	add	r7, sp, #0
 8024e62:	6078      	str	r0, [r7, #4]
 8024e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024e66:	2300      	movs	r3, #0
 8024e68:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8024e6a:	2300      	movs	r3, #0
 8024e6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8024e6e:	2300      	movs	r3, #0
 8024e70:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024e72:	2300      	movs	r3, #0
 8024e74:	617b      	str	r3, [r7, #20]
 8024e76:	e0d9      	b.n	802502c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024e78:	2201      	movs	r2, #1
 8024e7a:	697b      	ldr	r3, [r7, #20]
 8024e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8024e80:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8024e82:	683a      	ldr	r2, [r7, #0]
 8024e84:	693b      	ldr	r3, [r7, #16]
 8024e86:	4013      	ands	r3, r2
 8024e88:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8024e8a:	68fa      	ldr	r2, [r7, #12]
 8024e8c:	693b      	ldr	r3, [r7, #16]
 8024e8e:	429a      	cmp	r2, r3
 8024e90:	f040 80c9 	bne.w	8025026 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8024e94:	4a6b      	ldr	r2, [pc, #428]	; (8025044 <HAL_GPIO_DeInit+0x1e8>)
 8024e96:	697b      	ldr	r3, [r7, #20]
 8024e98:	089b      	lsrs	r3, r3, #2
 8024e9a:	3302      	adds	r3, #2
 8024e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024ea0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8024ea2:	697b      	ldr	r3, [r7, #20]
 8024ea4:	f003 0303 	and.w	r3, r3, #3
 8024ea8:	009b      	lsls	r3, r3, #2
 8024eaa:	220f      	movs	r2, #15
 8024eac:	fa02 f303 	lsl.w	r3, r2, r3
 8024eb0:	68ba      	ldr	r2, [r7, #8]
 8024eb2:	4013      	ands	r3, r2
 8024eb4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8024eb6:	687b      	ldr	r3, [r7, #4]
 8024eb8:	4a63      	ldr	r2, [pc, #396]	; (8025048 <HAL_GPIO_DeInit+0x1ec>)
 8024eba:	4293      	cmp	r3, r2
 8024ebc:	d037      	beq.n	8024f2e <HAL_GPIO_DeInit+0xd2>
 8024ebe:	687b      	ldr	r3, [r7, #4]
 8024ec0:	4a62      	ldr	r2, [pc, #392]	; (802504c <HAL_GPIO_DeInit+0x1f0>)
 8024ec2:	4293      	cmp	r3, r2
 8024ec4:	d031      	beq.n	8024f2a <HAL_GPIO_DeInit+0xce>
 8024ec6:	687b      	ldr	r3, [r7, #4]
 8024ec8:	4a61      	ldr	r2, [pc, #388]	; (8025050 <HAL_GPIO_DeInit+0x1f4>)
 8024eca:	4293      	cmp	r3, r2
 8024ecc:	d02b      	beq.n	8024f26 <HAL_GPIO_DeInit+0xca>
 8024ece:	687b      	ldr	r3, [r7, #4]
 8024ed0:	4a60      	ldr	r2, [pc, #384]	; (8025054 <HAL_GPIO_DeInit+0x1f8>)
 8024ed2:	4293      	cmp	r3, r2
 8024ed4:	d025      	beq.n	8024f22 <HAL_GPIO_DeInit+0xc6>
 8024ed6:	687b      	ldr	r3, [r7, #4]
 8024ed8:	4a5f      	ldr	r2, [pc, #380]	; (8025058 <HAL_GPIO_DeInit+0x1fc>)
 8024eda:	4293      	cmp	r3, r2
 8024edc:	d01f      	beq.n	8024f1e <HAL_GPIO_DeInit+0xc2>
 8024ede:	687b      	ldr	r3, [r7, #4]
 8024ee0:	4a5e      	ldr	r2, [pc, #376]	; (802505c <HAL_GPIO_DeInit+0x200>)
 8024ee2:	4293      	cmp	r3, r2
 8024ee4:	d019      	beq.n	8024f1a <HAL_GPIO_DeInit+0xbe>
 8024ee6:	687b      	ldr	r3, [r7, #4]
 8024ee8:	4a5d      	ldr	r2, [pc, #372]	; (8025060 <HAL_GPIO_DeInit+0x204>)
 8024eea:	4293      	cmp	r3, r2
 8024eec:	d013      	beq.n	8024f16 <HAL_GPIO_DeInit+0xba>
 8024eee:	687b      	ldr	r3, [r7, #4]
 8024ef0:	4a5c      	ldr	r2, [pc, #368]	; (8025064 <HAL_GPIO_DeInit+0x208>)
 8024ef2:	4293      	cmp	r3, r2
 8024ef4:	d00d      	beq.n	8024f12 <HAL_GPIO_DeInit+0xb6>
 8024ef6:	687b      	ldr	r3, [r7, #4]
 8024ef8:	4a5b      	ldr	r2, [pc, #364]	; (8025068 <HAL_GPIO_DeInit+0x20c>)
 8024efa:	4293      	cmp	r3, r2
 8024efc:	d007      	beq.n	8024f0e <HAL_GPIO_DeInit+0xb2>
 8024efe:	687b      	ldr	r3, [r7, #4]
 8024f00:	4a5a      	ldr	r2, [pc, #360]	; (802506c <HAL_GPIO_DeInit+0x210>)
 8024f02:	4293      	cmp	r3, r2
 8024f04:	d101      	bne.n	8024f0a <HAL_GPIO_DeInit+0xae>
 8024f06:	2309      	movs	r3, #9
 8024f08:	e012      	b.n	8024f30 <HAL_GPIO_DeInit+0xd4>
 8024f0a:	230a      	movs	r3, #10
 8024f0c:	e010      	b.n	8024f30 <HAL_GPIO_DeInit+0xd4>
 8024f0e:	2308      	movs	r3, #8
 8024f10:	e00e      	b.n	8024f30 <HAL_GPIO_DeInit+0xd4>
 8024f12:	2307      	movs	r3, #7
 8024f14:	e00c      	b.n	8024f30 <HAL_GPIO_DeInit+0xd4>
 8024f16:	2306      	movs	r3, #6
 8024f18:	e00a      	b.n	8024f30 <HAL_GPIO_DeInit+0xd4>
 8024f1a:	2305      	movs	r3, #5
 8024f1c:	e008      	b.n	8024f30 <HAL_GPIO_DeInit+0xd4>
 8024f1e:	2304      	movs	r3, #4
 8024f20:	e006      	b.n	8024f30 <HAL_GPIO_DeInit+0xd4>
 8024f22:	2303      	movs	r3, #3
 8024f24:	e004      	b.n	8024f30 <HAL_GPIO_DeInit+0xd4>
 8024f26:	2302      	movs	r3, #2
 8024f28:	e002      	b.n	8024f30 <HAL_GPIO_DeInit+0xd4>
 8024f2a:	2301      	movs	r3, #1
 8024f2c:	e000      	b.n	8024f30 <HAL_GPIO_DeInit+0xd4>
 8024f2e:	2300      	movs	r3, #0
 8024f30:	697a      	ldr	r2, [r7, #20]
 8024f32:	f002 0203 	and.w	r2, r2, #3
 8024f36:	0092      	lsls	r2, r2, #2
 8024f38:	4093      	lsls	r3, r2
 8024f3a:	68ba      	ldr	r2, [r7, #8]
 8024f3c:	429a      	cmp	r2, r3
 8024f3e:	d132      	bne.n	8024fa6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8024f40:	4b4b      	ldr	r3, [pc, #300]	; (8025070 <HAL_GPIO_DeInit+0x214>)
 8024f42:	681a      	ldr	r2, [r3, #0]
 8024f44:	68fb      	ldr	r3, [r7, #12]
 8024f46:	43db      	mvns	r3, r3
 8024f48:	4949      	ldr	r1, [pc, #292]	; (8025070 <HAL_GPIO_DeInit+0x214>)
 8024f4a:	4013      	ands	r3, r2
 8024f4c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8024f4e:	4b48      	ldr	r3, [pc, #288]	; (8025070 <HAL_GPIO_DeInit+0x214>)
 8024f50:	685a      	ldr	r2, [r3, #4]
 8024f52:	68fb      	ldr	r3, [r7, #12]
 8024f54:	43db      	mvns	r3, r3
 8024f56:	4946      	ldr	r1, [pc, #280]	; (8025070 <HAL_GPIO_DeInit+0x214>)
 8024f58:	4013      	ands	r3, r2
 8024f5a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8024f5c:	4b44      	ldr	r3, [pc, #272]	; (8025070 <HAL_GPIO_DeInit+0x214>)
 8024f5e:	68da      	ldr	r2, [r3, #12]
 8024f60:	68fb      	ldr	r3, [r7, #12]
 8024f62:	43db      	mvns	r3, r3
 8024f64:	4942      	ldr	r1, [pc, #264]	; (8025070 <HAL_GPIO_DeInit+0x214>)
 8024f66:	4013      	ands	r3, r2
 8024f68:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8024f6a:	4b41      	ldr	r3, [pc, #260]	; (8025070 <HAL_GPIO_DeInit+0x214>)
 8024f6c:	689a      	ldr	r2, [r3, #8]
 8024f6e:	68fb      	ldr	r3, [r7, #12]
 8024f70:	43db      	mvns	r3, r3
 8024f72:	493f      	ldr	r1, [pc, #252]	; (8025070 <HAL_GPIO_DeInit+0x214>)
 8024f74:	4013      	ands	r3, r2
 8024f76:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8024f78:	697b      	ldr	r3, [r7, #20]
 8024f7a:	f003 0303 	and.w	r3, r3, #3
 8024f7e:	009b      	lsls	r3, r3, #2
 8024f80:	220f      	movs	r2, #15
 8024f82:	fa02 f303 	lsl.w	r3, r2, r3
 8024f86:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8024f88:	4a2e      	ldr	r2, [pc, #184]	; (8025044 <HAL_GPIO_DeInit+0x1e8>)
 8024f8a:	697b      	ldr	r3, [r7, #20]
 8024f8c:	089b      	lsrs	r3, r3, #2
 8024f8e:	3302      	adds	r3, #2
 8024f90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8024f94:	68bb      	ldr	r3, [r7, #8]
 8024f96:	43da      	mvns	r2, r3
 8024f98:	482a      	ldr	r0, [pc, #168]	; (8025044 <HAL_GPIO_DeInit+0x1e8>)
 8024f9a:	697b      	ldr	r3, [r7, #20]
 8024f9c:	089b      	lsrs	r3, r3, #2
 8024f9e:	400a      	ands	r2, r1
 8024fa0:	3302      	adds	r3, #2
 8024fa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024fa6:	687b      	ldr	r3, [r7, #4]
 8024fa8:	681a      	ldr	r2, [r3, #0]
 8024faa:	697b      	ldr	r3, [r7, #20]
 8024fac:	005b      	lsls	r3, r3, #1
 8024fae:	2103      	movs	r1, #3
 8024fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8024fb4:	43db      	mvns	r3, r3
 8024fb6:	401a      	ands	r2, r3
 8024fb8:	687b      	ldr	r3, [r7, #4]
 8024fba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024fbc:	697b      	ldr	r3, [r7, #20]
 8024fbe:	08da      	lsrs	r2, r3, #3
 8024fc0:	687b      	ldr	r3, [r7, #4]
 8024fc2:	3208      	adds	r2, #8
 8024fc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024fc8:	697b      	ldr	r3, [r7, #20]
 8024fca:	f003 0307 	and.w	r3, r3, #7
 8024fce:	009b      	lsls	r3, r3, #2
 8024fd0:	220f      	movs	r2, #15
 8024fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8024fd6:	43db      	mvns	r3, r3
 8024fd8:	697a      	ldr	r2, [r7, #20]
 8024fda:	08d2      	lsrs	r2, r2, #3
 8024fdc:	4019      	ands	r1, r3
 8024fde:	687b      	ldr	r3, [r7, #4]
 8024fe0:	3208      	adds	r2, #8
 8024fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8024fe6:	687b      	ldr	r3, [r7, #4]
 8024fe8:	68da      	ldr	r2, [r3, #12]
 8024fea:	697b      	ldr	r3, [r7, #20]
 8024fec:	005b      	lsls	r3, r3, #1
 8024fee:	2103      	movs	r1, #3
 8024ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8024ff4:	43db      	mvns	r3, r3
 8024ff6:	401a      	ands	r2, r3
 8024ff8:	687b      	ldr	r3, [r7, #4]
 8024ffa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024ffc:	687b      	ldr	r3, [r7, #4]
 8024ffe:	685a      	ldr	r2, [r3, #4]
 8025000:	2101      	movs	r1, #1
 8025002:	697b      	ldr	r3, [r7, #20]
 8025004:	fa01 f303 	lsl.w	r3, r1, r3
 8025008:	43db      	mvns	r3, r3
 802500a:	401a      	ands	r2, r3
 802500c:	687b      	ldr	r3, [r7, #4]
 802500e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8025010:	687b      	ldr	r3, [r7, #4]
 8025012:	689a      	ldr	r2, [r3, #8]
 8025014:	697b      	ldr	r3, [r7, #20]
 8025016:	005b      	lsls	r3, r3, #1
 8025018:	2103      	movs	r1, #3
 802501a:	fa01 f303 	lsl.w	r3, r1, r3
 802501e:	43db      	mvns	r3, r3
 8025020:	401a      	ands	r2, r3
 8025022:	687b      	ldr	r3, [r7, #4]
 8025024:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8025026:	697b      	ldr	r3, [r7, #20]
 8025028:	3301      	adds	r3, #1
 802502a:	617b      	str	r3, [r7, #20]
 802502c:	697b      	ldr	r3, [r7, #20]
 802502e:	2b0f      	cmp	r3, #15
 8025030:	f67f af22 	bls.w	8024e78 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8025034:	bf00      	nop
 8025036:	bf00      	nop
 8025038:	371c      	adds	r7, #28
 802503a:	46bd      	mov	sp, r7
 802503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025040:	4770      	bx	lr
 8025042:	bf00      	nop
 8025044:	40013800 	.word	0x40013800
 8025048:	40020000 	.word	0x40020000
 802504c:	40020400 	.word	0x40020400
 8025050:	40020800 	.word	0x40020800
 8025054:	40020c00 	.word	0x40020c00
 8025058:	40021000 	.word	0x40021000
 802505c:	40021400 	.word	0x40021400
 8025060:	40021800 	.word	0x40021800
 8025064:	40021c00 	.word	0x40021c00
 8025068:	40022000 	.word	0x40022000
 802506c:	40022400 	.word	0x40022400
 8025070:	40013c00 	.word	0x40013c00

08025074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8025074:	b480      	push	{r7}
 8025076:	b083      	sub	sp, #12
 8025078:	af00      	add	r7, sp, #0
 802507a:	6078      	str	r0, [r7, #4]
 802507c:	460b      	mov	r3, r1
 802507e:	807b      	strh	r3, [r7, #2]
 8025080:	4613      	mov	r3, r2
 8025082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8025084:	787b      	ldrb	r3, [r7, #1]
 8025086:	2b00      	cmp	r3, #0
 8025088:	d003      	beq.n	8025092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802508a:	887a      	ldrh	r2, [r7, #2]
 802508c:	687b      	ldr	r3, [r7, #4]
 802508e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8025090:	e003      	b.n	802509a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8025092:	887b      	ldrh	r3, [r7, #2]
 8025094:	041a      	lsls	r2, r3, #16
 8025096:	687b      	ldr	r3, [r7, #4]
 8025098:	619a      	str	r2, [r3, #24]
}
 802509a:	bf00      	nop
 802509c:	370c      	adds	r7, #12
 802509e:	46bd      	mov	sp, r7
 80250a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250a4:	4770      	bx	lr
	...

080250a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80250a8:	b580      	push	{r7, lr}
 80250aa:	b082      	sub	sp, #8
 80250ac:	af00      	add	r7, sp, #0
 80250ae:	4603      	mov	r3, r0
 80250b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80250b2:	4b08      	ldr	r3, [pc, #32]	; (80250d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80250b4:	695a      	ldr	r2, [r3, #20]
 80250b6:	88fb      	ldrh	r3, [r7, #6]
 80250b8:	4013      	ands	r3, r2
 80250ba:	2b00      	cmp	r3, #0
 80250bc:	d006      	beq.n	80250cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80250be:	4a05      	ldr	r2, [pc, #20]	; (80250d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80250c0:	88fb      	ldrh	r3, [r7, #6]
 80250c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80250c4:	88fb      	ldrh	r3, [r7, #6]
 80250c6:	4618      	mov	r0, r3
 80250c8:	f7fc ffdc 	bl	8022084 <HAL_GPIO_EXTI_Callback>
  }
}
 80250cc:	bf00      	nop
 80250ce:	3708      	adds	r7, #8
 80250d0:	46bd      	mov	sp, r7
 80250d2:	bd80      	pop	{r7, pc}
 80250d4:	40013c00 	.word	0x40013c00

080250d8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80250d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80250da:	b08f      	sub	sp, #60	; 0x3c
 80250dc:	af0a      	add	r7, sp, #40	; 0x28
 80250de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80250e0:	687b      	ldr	r3, [r7, #4]
 80250e2:	2b00      	cmp	r3, #0
 80250e4:	d101      	bne.n	80250ea <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80250e6:	2301      	movs	r3, #1
 80250e8:	e054      	b.n	8025194 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80250ea:	687b      	ldr	r3, [r7, #4]
 80250ec:	681b      	ldr	r3, [r3, #0]
 80250ee:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80250f0:	687b      	ldr	r3, [r7, #4]
 80250f2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80250f6:	b2db      	uxtb	r3, r3
 80250f8:	2b00      	cmp	r3, #0
 80250fa:	d106      	bne.n	802510a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80250fc:	687b      	ldr	r3, [r7, #4]
 80250fe:	2200      	movs	r2, #0
 8025100:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8025104:	6878      	ldr	r0, [r7, #4]
 8025106:	f008 fd01 	bl	802db0c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 802510a:	687b      	ldr	r3, [r7, #4]
 802510c:	2203      	movs	r2, #3
 802510e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8025112:	68fb      	ldr	r3, [r7, #12]
 8025114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802511a:	2b00      	cmp	r3, #0
 802511c:	d102      	bne.n	8025124 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 802511e:	687b      	ldr	r3, [r7, #4]
 8025120:	2200      	movs	r2, #0
 8025122:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8025124:	687b      	ldr	r3, [r7, #4]
 8025126:	681b      	ldr	r3, [r3, #0]
 8025128:	4618      	mov	r0, r3
 802512a:	f005 fd2f 	bl	802ab8c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 802512e:	687b      	ldr	r3, [r7, #4]
 8025130:	681b      	ldr	r3, [r3, #0]
 8025132:	603b      	str	r3, [r7, #0]
 8025134:	687e      	ldr	r6, [r7, #4]
 8025136:	466d      	mov	r5, sp
 8025138:	f106 0410 	add.w	r4, r6, #16
 802513c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802513e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025144:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025148:	e885 0003 	stmia.w	r5, {r0, r1}
 802514c:	1d33      	adds	r3, r6, #4
 802514e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025150:	6838      	ldr	r0, [r7, #0]
 8025152:	f005 fca9 	bl	802aaa8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8025156:	687b      	ldr	r3, [r7, #4]
 8025158:	681b      	ldr	r3, [r3, #0]
 802515a:	2101      	movs	r1, #1
 802515c:	4618      	mov	r0, r3
 802515e:	f005 fd26 	bl	802abae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8025162:	687b      	ldr	r3, [r7, #4]
 8025164:	681b      	ldr	r3, [r3, #0]
 8025166:	603b      	str	r3, [r7, #0]
 8025168:	687e      	ldr	r6, [r7, #4]
 802516a:	466d      	mov	r5, sp
 802516c:	f106 0410 	add.w	r4, r6, #16
 8025170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025178:	e894 0003 	ldmia.w	r4, {r0, r1}
 802517c:	e885 0003 	stmia.w	r5, {r0, r1}
 8025180:	1d33      	adds	r3, r6, #4
 8025182:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025184:	6838      	ldr	r0, [r7, #0]
 8025186:	f005 feaf 	bl	802aee8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 802518a:	687b      	ldr	r3, [r7, #4]
 802518c:	2201      	movs	r2, #1
 802518e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8025192:	2300      	movs	r3, #0
}
 8025194:	4618      	mov	r0, r3
 8025196:	3714      	adds	r7, #20
 8025198:	46bd      	mov	sp, r7
 802519a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802519c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 802519c:	b590      	push	{r4, r7, lr}
 802519e:	b089      	sub	sp, #36	; 0x24
 80251a0:	af04      	add	r7, sp, #16
 80251a2:	6078      	str	r0, [r7, #4]
 80251a4:	4608      	mov	r0, r1
 80251a6:	4611      	mov	r1, r2
 80251a8:	461a      	mov	r2, r3
 80251aa:	4603      	mov	r3, r0
 80251ac:	70fb      	strb	r3, [r7, #3]
 80251ae:	460b      	mov	r3, r1
 80251b0:	70bb      	strb	r3, [r7, #2]
 80251b2:	4613      	mov	r3, r2
 80251b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80251b6:	687b      	ldr	r3, [r7, #4]
 80251b8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80251bc:	2b01      	cmp	r3, #1
 80251be:	d101      	bne.n	80251c4 <HAL_HCD_HC_Init+0x28>
 80251c0:	2302      	movs	r3, #2
 80251c2:	e076      	b.n	80252b2 <HAL_HCD_HC_Init+0x116>
 80251c4:	687b      	ldr	r3, [r7, #4]
 80251c6:	2201      	movs	r2, #1
 80251c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80251cc:	78fb      	ldrb	r3, [r7, #3]
 80251ce:	687a      	ldr	r2, [r7, #4]
 80251d0:	212c      	movs	r1, #44	; 0x2c
 80251d2:	fb01 f303 	mul.w	r3, r1, r3
 80251d6:	4413      	add	r3, r2
 80251d8:	333d      	adds	r3, #61	; 0x3d
 80251da:	2200      	movs	r2, #0
 80251dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80251de:	78fb      	ldrb	r3, [r7, #3]
 80251e0:	687a      	ldr	r2, [r7, #4]
 80251e2:	212c      	movs	r1, #44	; 0x2c
 80251e4:	fb01 f303 	mul.w	r3, r1, r3
 80251e8:	4413      	add	r3, r2
 80251ea:	3338      	adds	r3, #56	; 0x38
 80251ec:	787a      	ldrb	r2, [r7, #1]
 80251ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80251f0:	78fb      	ldrb	r3, [r7, #3]
 80251f2:	687a      	ldr	r2, [r7, #4]
 80251f4:	212c      	movs	r1, #44	; 0x2c
 80251f6:	fb01 f303 	mul.w	r3, r1, r3
 80251fa:	4413      	add	r3, r2
 80251fc:	3340      	adds	r3, #64	; 0x40
 80251fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8025200:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8025202:	78fb      	ldrb	r3, [r7, #3]
 8025204:	687a      	ldr	r2, [r7, #4]
 8025206:	212c      	movs	r1, #44	; 0x2c
 8025208:	fb01 f303 	mul.w	r3, r1, r3
 802520c:	4413      	add	r3, r2
 802520e:	3339      	adds	r3, #57	; 0x39
 8025210:	78fa      	ldrb	r2, [r7, #3]
 8025212:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8025214:	78fb      	ldrb	r3, [r7, #3]
 8025216:	687a      	ldr	r2, [r7, #4]
 8025218:	212c      	movs	r1, #44	; 0x2c
 802521a:	fb01 f303 	mul.w	r3, r1, r3
 802521e:	4413      	add	r3, r2
 8025220:	333f      	adds	r3, #63	; 0x3f
 8025222:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8025226:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8025228:	78fb      	ldrb	r3, [r7, #3]
 802522a:	78ba      	ldrb	r2, [r7, #2]
 802522c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8025230:	b2d0      	uxtb	r0, r2
 8025232:	687a      	ldr	r2, [r7, #4]
 8025234:	212c      	movs	r1, #44	; 0x2c
 8025236:	fb01 f303 	mul.w	r3, r1, r3
 802523a:	4413      	add	r3, r2
 802523c:	333a      	adds	r3, #58	; 0x3a
 802523e:	4602      	mov	r2, r0
 8025240:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8025242:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8025246:	2b00      	cmp	r3, #0
 8025248:	da09      	bge.n	802525e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 802524a:	78fb      	ldrb	r3, [r7, #3]
 802524c:	687a      	ldr	r2, [r7, #4]
 802524e:	212c      	movs	r1, #44	; 0x2c
 8025250:	fb01 f303 	mul.w	r3, r1, r3
 8025254:	4413      	add	r3, r2
 8025256:	333b      	adds	r3, #59	; 0x3b
 8025258:	2201      	movs	r2, #1
 802525a:	701a      	strb	r2, [r3, #0]
 802525c:	e008      	b.n	8025270 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 802525e:	78fb      	ldrb	r3, [r7, #3]
 8025260:	687a      	ldr	r2, [r7, #4]
 8025262:	212c      	movs	r1, #44	; 0x2c
 8025264:	fb01 f303 	mul.w	r3, r1, r3
 8025268:	4413      	add	r3, r2
 802526a:	333b      	adds	r3, #59	; 0x3b
 802526c:	2200      	movs	r2, #0
 802526e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8025270:	78fb      	ldrb	r3, [r7, #3]
 8025272:	687a      	ldr	r2, [r7, #4]
 8025274:	212c      	movs	r1, #44	; 0x2c
 8025276:	fb01 f303 	mul.w	r3, r1, r3
 802527a:	4413      	add	r3, r2
 802527c:	333c      	adds	r3, #60	; 0x3c
 802527e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8025282:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8025284:	687b      	ldr	r3, [r7, #4]
 8025286:	6818      	ldr	r0, [r3, #0]
 8025288:	787c      	ldrb	r4, [r7, #1]
 802528a:	78ba      	ldrb	r2, [r7, #2]
 802528c:	78f9      	ldrb	r1, [r7, #3]
 802528e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8025290:	9302      	str	r3, [sp, #8]
 8025292:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025296:	9301      	str	r3, [sp, #4]
 8025298:	f897 3020 	ldrb.w	r3, [r7, #32]
 802529c:	9300      	str	r3, [sp, #0]
 802529e:	4623      	mov	r3, r4
 80252a0:	f005 ffa8 	bl	802b1f4 <USB_HC_Init>
 80252a4:	4603      	mov	r3, r0
 80252a6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80252a8:	687b      	ldr	r3, [r7, #4]
 80252aa:	2200      	movs	r2, #0
 80252ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80252b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80252b2:	4618      	mov	r0, r3
 80252b4:	3714      	adds	r7, #20
 80252b6:	46bd      	mov	sp, r7
 80252b8:	bd90      	pop	{r4, r7, pc}

080252ba <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80252ba:	b580      	push	{r7, lr}
 80252bc:	b084      	sub	sp, #16
 80252be:	af00      	add	r7, sp, #0
 80252c0:	6078      	str	r0, [r7, #4]
 80252c2:	460b      	mov	r3, r1
 80252c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80252c6:	2300      	movs	r3, #0
 80252c8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80252ca:	687b      	ldr	r3, [r7, #4]
 80252cc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80252d0:	2b01      	cmp	r3, #1
 80252d2:	d101      	bne.n	80252d8 <HAL_HCD_HC_Halt+0x1e>
 80252d4:	2302      	movs	r3, #2
 80252d6:	e00f      	b.n	80252f8 <HAL_HCD_HC_Halt+0x3e>
 80252d8:	687b      	ldr	r3, [r7, #4]
 80252da:	2201      	movs	r2, #1
 80252dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80252e0:	687b      	ldr	r3, [r7, #4]
 80252e2:	681b      	ldr	r3, [r3, #0]
 80252e4:	78fa      	ldrb	r2, [r7, #3]
 80252e6:	4611      	mov	r1, r2
 80252e8:	4618      	mov	r0, r3
 80252ea:	f006 f9f8 	bl	802b6de <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80252ee:	687b      	ldr	r3, [r7, #4]
 80252f0:	2200      	movs	r2, #0
 80252f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80252f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80252f8:	4618      	mov	r0, r3
 80252fa:	3710      	adds	r7, #16
 80252fc:	46bd      	mov	sp, r7
 80252fe:	bd80      	pop	{r7, pc}

08025300 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8025300:	b580      	push	{r7, lr}
 8025302:	b082      	sub	sp, #8
 8025304:	af00      	add	r7, sp, #0
 8025306:	6078      	str	r0, [r7, #4]
 8025308:	4608      	mov	r0, r1
 802530a:	4611      	mov	r1, r2
 802530c:	461a      	mov	r2, r3
 802530e:	4603      	mov	r3, r0
 8025310:	70fb      	strb	r3, [r7, #3]
 8025312:	460b      	mov	r3, r1
 8025314:	70bb      	strb	r3, [r7, #2]
 8025316:	4613      	mov	r3, r2
 8025318:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 802531a:	78fb      	ldrb	r3, [r7, #3]
 802531c:	687a      	ldr	r2, [r7, #4]
 802531e:	212c      	movs	r1, #44	; 0x2c
 8025320:	fb01 f303 	mul.w	r3, r1, r3
 8025324:	4413      	add	r3, r2
 8025326:	333b      	adds	r3, #59	; 0x3b
 8025328:	78ba      	ldrb	r2, [r7, #2]
 802532a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 802532c:	78fb      	ldrb	r3, [r7, #3]
 802532e:	687a      	ldr	r2, [r7, #4]
 8025330:	212c      	movs	r1, #44	; 0x2c
 8025332:	fb01 f303 	mul.w	r3, r1, r3
 8025336:	4413      	add	r3, r2
 8025338:	333f      	adds	r3, #63	; 0x3f
 802533a:	787a      	ldrb	r2, [r7, #1]
 802533c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 802533e:	7c3b      	ldrb	r3, [r7, #16]
 8025340:	2b00      	cmp	r3, #0
 8025342:	d112      	bne.n	802536a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8025344:	78fb      	ldrb	r3, [r7, #3]
 8025346:	687a      	ldr	r2, [r7, #4]
 8025348:	212c      	movs	r1, #44	; 0x2c
 802534a:	fb01 f303 	mul.w	r3, r1, r3
 802534e:	4413      	add	r3, r2
 8025350:	3342      	adds	r3, #66	; 0x42
 8025352:	2203      	movs	r2, #3
 8025354:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8025356:	78fb      	ldrb	r3, [r7, #3]
 8025358:	687a      	ldr	r2, [r7, #4]
 802535a:	212c      	movs	r1, #44	; 0x2c
 802535c:	fb01 f303 	mul.w	r3, r1, r3
 8025360:	4413      	add	r3, r2
 8025362:	333d      	adds	r3, #61	; 0x3d
 8025364:	7f3a      	ldrb	r2, [r7, #28]
 8025366:	701a      	strb	r2, [r3, #0]
 8025368:	e008      	b.n	802537c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802536a:	78fb      	ldrb	r3, [r7, #3]
 802536c:	687a      	ldr	r2, [r7, #4]
 802536e:	212c      	movs	r1, #44	; 0x2c
 8025370:	fb01 f303 	mul.w	r3, r1, r3
 8025374:	4413      	add	r3, r2
 8025376:	3342      	adds	r3, #66	; 0x42
 8025378:	2202      	movs	r2, #2
 802537a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 802537c:	787b      	ldrb	r3, [r7, #1]
 802537e:	2b03      	cmp	r3, #3
 8025380:	f200 80c6 	bhi.w	8025510 <HAL_HCD_HC_SubmitRequest+0x210>
 8025384:	a201      	add	r2, pc, #4	; (adr r2, 802538c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8025386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802538a:	bf00      	nop
 802538c:	0802539d 	.word	0x0802539d
 8025390:	080254fd 	.word	0x080254fd
 8025394:	08025401 	.word	0x08025401
 8025398:	0802547f 	.word	0x0802547f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 802539c:	7c3b      	ldrb	r3, [r7, #16]
 802539e:	2b01      	cmp	r3, #1
 80253a0:	f040 80b8 	bne.w	8025514 <HAL_HCD_HC_SubmitRequest+0x214>
 80253a4:	78bb      	ldrb	r3, [r7, #2]
 80253a6:	2b00      	cmp	r3, #0
 80253a8:	f040 80b4 	bne.w	8025514 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80253ac:	8b3b      	ldrh	r3, [r7, #24]
 80253ae:	2b00      	cmp	r3, #0
 80253b0:	d108      	bne.n	80253c4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80253b2:	78fb      	ldrb	r3, [r7, #3]
 80253b4:	687a      	ldr	r2, [r7, #4]
 80253b6:	212c      	movs	r1, #44	; 0x2c
 80253b8:	fb01 f303 	mul.w	r3, r1, r3
 80253bc:	4413      	add	r3, r2
 80253be:	3355      	adds	r3, #85	; 0x55
 80253c0:	2201      	movs	r2, #1
 80253c2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80253c4:	78fb      	ldrb	r3, [r7, #3]
 80253c6:	687a      	ldr	r2, [r7, #4]
 80253c8:	212c      	movs	r1, #44	; 0x2c
 80253ca:	fb01 f303 	mul.w	r3, r1, r3
 80253ce:	4413      	add	r3, r2
 80253d0:	3355      	adds	r3, #85	; 0x55
 80253d2:	781b      	ldrb	r3, [r3, #0]
 80253d4:	2b00      	cmp	r3, #0
 80253d6:	d109      	bne.n	80253ec <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80253d8:	78fb      	ldrb	r3, [r7, #3]
 80253da:	687a      	ldr	r2, [r7, #4]
 80253dc:	212c      	movs	r1, #44	; 0x2c
 80253de:	fb01 f303 	mul.w	r3, r1, r3
 80253e2:	4413      	add	r3, r2
 80253e4:	3342      	adds	r3, #66	; 0x42
 80253e6:	2200      	movs	r2, #0
 80253e8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80253ea:	e093      	b.n	8025514 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80253ec:	78fb      	ldrb	r3, [r7, #3]
 80253ee:	687a      	ldr	r2, [r7, #4]
 80253f0:	212c      	movs	r1, #44	; 0x2c
 80253f2:	fb01 f303 	mul.w	r3, r1, r3
 80253f6:	4413      	add	r3, r2
 80253f8:	3342      	adds	r3, #66	; 0x42
 80253fa:	2202      	movs	r2, #2
 80253fc:	701a      	strb	r2, [r3, #0]
      break;
 80253fe:	e089      	b.n	8025514 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8025400:	78bb      	ldrb	r3, [r7, #2]
 8025402:	2b00      	cmp	r3, #0
 8025404:	d11d      	bne.n	8025442 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8025406:	78fb      	ldrb	r3, [r7, #3]
 8025408:	687a      	ldr	r2, [r7, #4]
 802540a:	212c      	movs	r1, #44	; 0x2c
 802540c:	fb01 f303 	mul.w	r3, r1, r3
 8025410:	4413      	add	r3, r2
 8025412:	3355      	adds	r3, #85	; 0x55
 8025414:	781b      	ldrb	r3, [r3, #0]
 8025416:	2b00      	cmp	r3, #0
 8025418:	d109      	bne.n	802542e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802541a:	78fb      	ldrb	r3, [r7, #3]
 802541c:	687a      	ldr	r2, [r7, #4]
 802541e:	212c      	movs	r1, #44	; 0x2c
 8025420:	fb01 f303 	mul.w	r3, r1, r3
 8025424:	4413      	add	r3, r2
 8025426:	3342      	adds	r3, #66	; 0x42
 8025428:	2200      	movs	r2, #0
 802542a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 802542c:	e073      	b.n	8025516 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802542e:	78fb      	ldrb	r3, [r7, #3]
 8025430:	687a      	ldr	r2, [r7, #4]
 8025432:	212c      	movs	r1, #44	; 0x2c
 8025434:	fb01 f303 	mul.w	r3, r1, r3
 8025438:	4413      	add	r3, r2
 802543a:	3342      	adds	r3, #66	; 0x42
 802543c:	2202      	movs	r2, #2
 802543e:	701a      	strb	r2, [r3, #0]
      break;
 8025440:	e069      	b.n	8025516 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8025442:	78fb      	ldrb	r3, [r7, #3]
 8025444:	687a      	ldr	r2, [r7, #4]
 8025446:	212c      	movs	r1, #44	; 0x2c
 8025448:	fb01 f303 	mul.w	r3, r1, r3
 802544c:	4413      	add	r3, r2
 802544e:	3354      	adds	r3, #84	; 0x54
 8025450:	781b      	ldrb	r3, [r3, #0]
 8025452:	2b00      	cmp	r3, #0
 8025454:	d109      	bne.n	802546a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8025456:	78fb      	ldrb	r3, [r7, #3]
 8025458:	687a      	ldr	r2, [r7, #4]
 802545a:	212c      	movs	r1, #44	; 0x2c
 802545c:	fb01 f303 	mul.w	r3, r1, r3
 8025460:	4413      	add	r3, r2
 8025462:	3342      	adds	r3, #66	; 0x42
 8025464:	2200      	movs	r2, #0
 8025466:	701a      	strb	r2, [r3, #0]
      break;
 8025468:	e055      	b.n	8025516 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802546a:	78fb      	ldrb	r3, [r7, #3]
 802546c:	687a      	ldr	r2, [r7, #4]
 802546e:	212c      	movs	r1, #44	; 0x2c
 8025470:	fb01 f303 	mul.w	r3, r1, r3
 8025474:	4413      	add	r3, r2
 8025476:	3342      	adds	r3, #66	; 0x42
 8025478:	2202      	movs	r2, #2
 802547a:	701a      	strb	r2, [r3, #0]
      break;
 802547c:	e04b      	b.n	8025516 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 802547e:	78bb      	ldrb	r3, [r7, #2]
 8025480:	2b00      	cmp	r3, #0
 8025482:	d11d      	bne.n	80254c0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8025484:	78fb      	ldrb	r3, [r7, #3]
 8025486:	687a      	ldr	r2, [r7, #4]
 8025488:	212c      	movs	r1, #44	; 0x2c
 802548a:	fb01 f303 	mul.w	r3, r1, r3
 802548e:	4413      	add	r3, r2
 8025490:	3355      	adds	r3, #85	; 0x55
 8025492:	781b      	ldrb	r3, [r3, #0]
 8025494:	2b00      	cmp	r3, #0
 8025496:	d109      	bne.n	80254ac <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8025498:	78fb      	ldrb	r3, [r7, #3]
 802549a:	687a      	ldr	r2, [r7, #4]
 802549c:	212c      	movs	r1, #44	; 0x2c
 802549e:	fb01 f303 	mul.w	r3, r1, r3
 80254a2:	4413      	add	r3, r2
 80254a4:	3342      	adds	r3, #66	; 0x42
 80254a6:	2200      	movs	r2, #0
 80254a8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80254aa:	e034      	b.n	8025516 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80254ac:	78fb      	ldrb	r3, [r7, #3]
 80254ae:	687a      	ldr	r2, [r7, #4]
 80254b0:	212c      	movs	r1, #44	; 0x2c
 80254b2:	fb01 f303 	mul.w	r3, r1, r3
 80254b6:	4413      	add	r3, r2
 80254b8:	3342      	adds	r3, #66	; 0x42
 80254ba:	2202      	movs	r2, #2
 80254bc:	701a      	strb	r2, [r3, #0]
      break;
 80254be:	e02a      	b.n	8025516 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80254c0:	78fb      	ldrb	r3, [r7, #3]
 80254c2:	687a      	ldr	r2, [r7, #4]
 80254c4:	212c      	movs	r1, #44	; 0x2c
 80254c6:	fb01 f303 	mul.w	r3, r1, r3
 80254ca:	4413      	add	r3, r2
 80254cc:	3354      	adds	r3, #84	; 0x54
 80254ce:	781b      	ldrb	r3, [r3, #0]
 80254d0:	2b00      	cmp	r3, #0
 80254d2:	d109      	bne.n	80254e8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80254d4:	78fb      	ldrb	r3, [r7, #3]
 80254d6:	687a      	ldr	r2, [r7, #4]
 80254d8:	212c      	movs	r1, #44	; 0x2c
 80254da:	fb01 f303 	mul.w	r3, r1, r3
 80254de:	4413      	add	r3, r2
 80254e0:	3342      	adds	r3, #66	; 0x42
 80254e2:	2200      	movs	r2, #0
 80254e4:	701a      	strb	r2, [r3, #0]
      break;
 80254e6:	e016      	b.n	8025516 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80254e8:	78fb      	ldrb	r3, [r7, #3]
 80254ea:	687a      	ldr	r2, [r7, #4]
 80254ec:	212c      	movs	r1, #44	; 0x2c
 80254ee:	fb01 f303 	mul.w	r3, r1, r3
 80254f2:	4413      	add	r3, r2
 80254f4:	3342      	adds	r3, #66	; 0x42
 80254f6:	2202      	movs	r2, #2
 80254f8:	701a      	strb	r2, [r3, #0]
      break;
 80254fa:	e00c      	b.n	8025516 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80254fc:	78fb      	ldrb	r3, [r7, #3]
 80254fe:	687a      	ldr	r2, [r7, #4]
 8025500:	212c      	movs	r1, #44	; 0x2c
 8025502:	fb01 f303 	mul.w	r3, r1, r3
 8025506:	4413      	add	r3, r2
 8025508:	3342      	adds	r3, #66	; 0x42
 802550a:	2200      	movs	r2, #0
 802550c:	701a      	strb	r2, [r3, #0]
      break;
 802550e:	e002      	b.n	8025516 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8025510:	bf00      	nop
 8025512:	e000      	b.n	8025516 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8025514:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8025516:	78fb      	ldrb	r3, [r7, #3]
 8025518:	687a      	ldr	r2, [r7, #4]
 802551a:	212c      	movs	r1, #44	; 0x2c
 802551c:	fb01 f303 	mul.w	r3, r1, r3
 8025520:	4413      	add	r3, r2
 8025522:	3344      	adds	r3, #68	; 0x44
 8025524:	697a      	ldr	r2, [r7, #20]
 8025526:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8025528:	78fb      	ldrb	r3, [r7, #3]
 802552a:	8b3a      	ldrh	r2, [r7, #24]
 802552c:	6879      	ldr	r1, [r7, #4]
 802552e:	202c      	movs	r0, #44	; 0x2c
 8025530:	fb00 f303 	mul.w	r3, r0, r3
 8025534:	440b      	add	r3, r1
 8025536:	334c      	adds	r3, #76	; 0x4c
 8025538:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 802553a:	78fb      	ldrb	r3, [r7, #3]
 802553c:	687a      	ldr	r2, [r7, #4]
 802553e:	212c      	movs	r1, #44	; 0x2c
 8025540:	fb01 f303 	mul.w	r3, r1, r3
 8025544:	4413      	add	r3, r2
 8025546:	3360      	adds	r3, #96	; 0x60
 8025548:	2200      	movs	r2, #0
 802554a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 802554c:	78fb      	ldrb	r3, [r7, #3]
 802554e:	687a      	ldr	r2, [r7, #4]
 8025550:	212c      	movs	r1, #44	; 0x2c
 8025552:	fb01 f303 	mul.w	r3, r1, r3
 8025556:	4413      	add	r3, r2
 8025558:	3350      	adds	r3, #80	; 0x50
 802555a:	2200      	movs	r2, #0
 802555c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 802555e:	78fb      	ldrb	r3, [r7, #3]
 8025560:	687a      	ldr	r2, [r7, #4]
 8025562:	212c      	movs	r1, #44	; 0x2c
 8025564:	fb01 f303 	mul.w	r3, r1, r3
 8025568:	4413      	add	r3, r2
 802556a:	3339      	adds	r3, #57	; 0x39
 802556c:	78fa      	ldrb	r2, [r7, #3]
 802556e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8025570:	78fb      	ldrb	r3, [r7, #3]
 8025572:	687a      	ldr	r2, [r7, #4]
 8025574:	212c      	movs	r1, #44	; 0x2c
 8025576:	fb01 f303 	mul.w	r3, r1, r3
 802557a:	4413      	add	r3, r2
 802557c:	3361      	adds	r3, #97	; 0x61
 802557e:	2200      	movs	r2, #0
 8025580:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8025582:	687b      	ldr	r3, [r7, #4]
 8025584:	6818      	ldr	r0, [r3, #0]
 8025586:	78fb      	ldrb	r3, [r7, #3]
 8025588:	222c      	movs	r2, #44	; 0x2c
 802558a:	fb02 f303 	mul.w	r3, r2, r3
 802558e:	3338      	adds	r3, #56	; 0x38
 8025590:	687a      	ldr	r2, [r7, #4]
 8025592:	18d1      	adds	r1, r2, r3
 8025594:	687b      	ldr	r3, [r7, #4]
 8025596:	691b      	ldr	r3, [r3, #16]
 8025598:	b2db      	uxtb	r3, r3
 802559a:	461a      	mov	r2, r3
 802559c:	f005 ff4c 	bl	802b438 <USB_HC_StartXfer>
 80255a0:	4603      	mov	r3, r0
}
 80255a2:	4618      	mov	r0, r3
 80255a4:	3708      	adds	r7, #8
 80255a6:	46bd      	mov	sp, r7
 80255a8:	bd80      	pop	{r7, pc}
 80255aa:	bf00      	nop

080255ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80255ac:	b580      	push	{r7, lr}
 80255ae:	b086      	sub	sp, #24
 80255b0:	af00      	add	r7, sp, #0
 80255b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80255b4:	687b      	ldr	r3, [r7, #4]
 80255b6:	681b      	ldr	r3, [r3, #0]
 80255b8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80255ba:	693b      	ldr	r3, [r7, #16]
 80255bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80255be:	687b      	ldr	r3, [r7, #4]
 80255c0:	681b      	ldr	r3, [r3, #0]
 80255c2:	4618      	mov	r0, r3
 80255c4:	f005 fc4d 	bl	802ae62 <USB_GetMode>
 80255c8:	4603      	mov	r3, r0
 80255ca:	2b01      	cmp	r3, #1
 80255cc:	f040 80f6 	bne.w	80257bc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80255d0:	687b      	ldr	r3, [r7, #4]
 80255d2:	681b      	ldr	r3, [r3, #0]
 80255d4:	4618      	mov	r0, r3
 80255d6:	f005 fc31 	bl	802ae3c <USB_ReadInterrupts>
 80255da:	4603      	mov	r3, r0
 80255dc:	2b00      	cmp	r3, #0
 80255de:	f000 80ec 	beq.w	80257ba <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80255e2:	687b      	ldr	r3, [r7, #4]
 80255e4:	681b      	ldr	r3, [r3, #0]
 80255e6:	4618      	mov	r0, r3
 80255e8:	f005 fc28 	bl	802ae3c <USB_ReadInterrupts>
 80255ec:	4603      	mov	r3, r0
 80255ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80255f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80255f6:	d104      	bne.n	8025602 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80255f8:	687b      	ldr	r3, [r7, #4]
 80255fa:	681b      	ldr	r3, [r3, #0]
 80255fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8025600:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8025602:	687b      	ldr	r3, [r7, #4]
 8025604:	681b      	ldr	r3, [r3, #0]
 8025606:	4618      	mov	r0, r3
 8025608:	f005 fc18 	bl	802ae3c <USB_ReadInterrupts>
 802560c:	4603      	mov	r3, r0
 802560e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8025612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8025616:	d104      	bne.n	8025622 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8025618:	687b      	ldr	r3, [r7, #4]
 802561a:	681b      	ldr	r3, [r3, #0]
 802561c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8025620:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8025622:	687b      	ldr	r3, [r7, #4]
 8025624:	681b      	ldr	r3, [r3, #0]
 8025626:	4618      	mov	r0, r3
 8025628:	f005 fc08 	bl	802ae3c <USB_ReadInterrupts>
 802562c:	4603      	mov	r3, r0
 802562e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8025632:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8025636:	d104      	bne.n	8025642 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8025638:	687b      	ldr	r3, [r7, #4]
 802563a:	681b      	ldr	r3, [r3, #0]
 802563c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8025640:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8025642:	687b      	ldr	r3, [r7, #4]
 8025644:	681b      	ldr	r3, [r3, #0]
 8025646:	4618      	mov	r0, r3
 8025648:	f005 fbf8 	bl	802ae3c <USB_ReadInterrupts>
 802564c:	4603      	mov	r3, r0
 802564e:	f003 0302 	and.w	r3, r3, #2
 8025652:	2b02      	cmp	r3, #2
 8025654:	d103      	bne.n	802565e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8025656:	687b      	ldr	r3, [r7, #4]
 8025658:	681b      	ldr	r3, [r3, #0]
 802565a:	2202      	movs	r2, #2
 802565c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 802565e:	687b      	ldr	r3, [r7, #4]
 8025660:	681b      	ldr	r3, [r3, #0]
 8025662:	4618      	mov	r0, r3
 8025664:	f005 fbea 	bl	802ae3c <USB_ReadInterrupts>
 8025668:	4603      	mov	r3, r0
 802566a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802566e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8025672:	d11c      	bne.n	80256ae <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8025674:	687b      	ldr	r3, [r7, #4]
 8025676:	681b      	ldr	r3, [r3, #0]
 8025678:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 802567c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 802567e:	68fb      	ldr	r3, [r7, #12]
 8025680:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025684:	681b      	ldr	r3, [r3, #0]
 8025686:	f003 0301 	and.w	r3, r3, #1
 802568a:	2b00      	cmp	r3, #0
 802568c:	d10f      	bne.n	80256ae <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 802568e:	2110      	movs	r1, #16
 8025690:	6938      	ldr	r0, [r7, #16]
 8025692:	f005 fad9 	bl	802ac48 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8025696:	6938      	ldr	r0, [r7, #16]
 8025698:	f005 fb0a 	bl	802acb0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 802569c:	687b      	ldr	r3, [r7, #4]
 802569e:	681b      	ldr	r3, [r3, #0]
 80256a0:	2101      	movs	r1, #1
 80256a2:	4618      	mov	r0, r3
 80256a4:	f005 fce0 	bl	802b068 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80256a8:	6878      	ldr	r0, [r7, #4]
 80256aa:	f008 faa9 	bl	802dc00 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80256ae:	687b      	ldr	r3, [r7, #4]
 80256b0:	681b      	ldr	r3, [r3, #0]
 80256b2:	4618      	mov	r0, r3
 80256b4:	f005 fbc2 	bl	802ae3c <USB_ReadInterrupts>
 80256b8:	4603      	mov	r3, r0
 80256ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80256be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80256c2:	d102      	bne.n	80256ca <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80256c4:	6878      	ldr	r0, [r7, #4]
 80256c6:	f001 f89e 	bl	8026806 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80256ca:	687b      	ldr	r3, [r7, #4]
 80256cc:	681b      	ldr	r3, [r3, #0]
 80256ce:	4618      	mov	r0, r3
 80256d0:	f005 fbb4 	bl	802ae3c <USB_ReadInterrupts>
 80256d4:	4603      	mov	r3, r0
 80256d6:	f003 0308 	and.w	r3, r3, #8
 80256da:	2b08      	cmp	r3, #8
 80256dc:	d106      	bne.n	80256ec <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80256de:	6878      	ldr	r0, [r7, #4]
 80256e0:	f008 fa72 	bl	802dbc8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80256e4:	687b      	ldr	r3, [r7, #4]
 80256e6:	681b      	ldr	r3, [r3, #0]
 80256e8:	2208      	movs	r2, #8
 80256ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80256ec:	687b      	ldr	r3, [r7, #4]
 80256ee:	681b      	ldr	r3, [r3, #0]
 80256f0:	4618      	mov	r0, r3
 80256f2:	f005 fba3 	bl	802ae3c <USB_ReadInterrupts>
 80256f6:	4603      	mov	r3, r0
 80256f8:	f003 0310 	and.w	r3, r3, #16
 80256fc:	2b10      	cmp	r3, #16
 80256fe:	d101      	bne.n	8025704 <HAL_HCD_IRQHandler+0x158>
 8025700:	2301      	movs	r3, #1
 8025702:	e000      	b.n	8025706 <HAL_HCD_IRQHandler+0x15a>
 8025704:	2300      	movs	r3, #0
 8025706:	2b00      	cmp	r3, #0
 8025708:	d012      	beq.n	8025730 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 802570a:	687b      	ldr	r3, [r7, #4]
 802570c:	681b      	ldr	r3, [r3, #0]
 802570e:	699a      	ldr	r2, [r3, #24]
 8025710:	687b      	ldr	r3, [r7, #4]
 8025712:	681b      	ldr	r3, [r3, #0]
 8025714:	f022 0210 	bic.w	r2, r2, #16
 8025718:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 802571a:	6878      	ldr	r0, [r7, #4]
 802571c:	f000 ffa1 	bl	8026662 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8025720:	687b      	ldr	r3, [r7, #4]
 8025722:	681b      	ldr	r3, [r3, #0]
 8025724:	699a      	ldr	r2, [r3, #24]
 8025726:	687b      	ldr	r3, [r7, #4]
 8025728:	681b      	ldr	r3, [r3, #0]
 802572a:	f042 0210 	orr.w	r2, r2, #16
 802572e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8025730:	687b      	ldr	r3, [r7, #4]
 8025732:	681b      	ldr	r3, [r3, #0]
 8025734:	4618      	mov	r0, r3
 8025736:	f005 fb81 	bl	802ae3c <USB_ReadInterrupts>
 802573a:	4603      	mov	r3, r0
 802573c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8025740:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8025744:	d13a      	bne.n	80257bc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8025746:	687b      	ldr	r3, [r7, #4]
 8025748:	681b      	ldr	r3, [r3, #0]
 802574a:	4618      	mov	r0, r3
 802574c:	f005 ffb6 	bl	802b6bc <USB_HC_ReadInterrupt>
 8025750:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8025752:	2300      	movs	r3, #0
 8025754:	617b      	str	r3, [r7, #20]
 8025756:	e025      	b.n	80257a4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8025758:	697b      	ldr	r3, [r7, #20]
 802575a:	f003 030f 	and.w	r3, r3, #15
 802575e:	68ba      	ldr	r2, [r7, #8]
 8025760:	fa22 f303 	lsr.w	r3, r2, r3
 8025764:	f003 0301 	and.w	r3, r3, #1
 8025768:	2b00      	cmp	r3, #0
 802576a:	d018      	beq.n	802579e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 802576c:	697b      	ldr	r3, [r7, #20]
 802576e:	015a      	lsls	r2, r3, #5
 8025770:	68fb      	ldr	r3, [r7, #12]
 8025772:	4413      	add	r3, r2
 8025774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025778:	681b      	ldr	r3, [r3, #0]
 802577a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802577e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8025782:	d106      	bne.n	8025792 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8025784:	697b      	ldr	r3, [r7, #20]
 8025786:	b2db      	uxtb	r3, r3
 8025788:	4619      	mov	r1, r3
 802578a:	6878      	ldr	r0, [r7, #4]
 802578c:	f000 f8ab 	bl	80258e6 <HCD_HC_IN_IRQHandler>
 8025790:	e005      	b.n	802579e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8025792:	697b      	ldr	r3, [r7, #20]
 8025794:	b2db      	uxtb	r3, r3
 8025796:	4619      	mov	r1, r3
 8025798:	6878      	ldr	r0, [r7, #4]
 802579a:	f000 fbf9 	bl	8025f90 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 802579e:	697b      	ldr	r3, [r7, #20]
 80257a0:	3301      	adds	r3, #1
 80257a2:	617b      	str	r3, [r7, #20]
 80257a4:	687b      	ldr	r3, [r7, #4]
 80257a6:	689b      	ldr	r3, [r3, #8]
 80257a8:	697a      	ldr	r2, [r7, #20]
 80257aa:	429a      	cmp	r2, r3
 80257ac:	d3d4      	bcc.n	8025758 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80257ae:	687b      	ldr	r3, [r7, #4]
 80257b0:	681b      	ldr	r3, [r3, #0]
 80257b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80257b6:	615a      	str	r2, [r3, #20]
 80257b8:	e000      	b.n	80257bc <HAL_HCD_IRQHandler+0x210>
      return;
 80257ba:	bf00      	nop
    }
  }
}
 80257bc:	3718      	adds	r7, #24
 80257be:	46bd      	mov	sp, r7
 80257c0:	bd80      	pop	{r7, pc}

080257c2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80257c2:	b580      	push	{r7, lr}
 80257c4:	b082      	sub	sp, #8
 80257c6:	af00      	add	r7, sp, #0
 80257c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80257ca:	687b      	ldr	r3, [r7, #4]
 80257cc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80257d0:	2b01      	cmp	r3, #1
 80257d2:	d101      	bne.n	80257d8 <HAL_HCD_Start+0x16>
 80257d4:	2302      	movs	r3, #2
 80257d6:	e013      	b.n	8025800 <HAL_HCD_Start+0x3e>
 80257d8:	687b      	ldr	r3, [r7, #4]
 80257da:	2201      	movs	r2, #1
 80257dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80257e0:	687b      	ldr	r3, [r7, #4]
 80257e2:	681b      	ldr	r3, [r3, #0]
 80257e4:	2101      	movs	r1, #1
 80257e6:	4618      	mov	r0, r3
 80257e8:	f005 fca2 	bl	802b130 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80257ec:	687b      	ldr	r3, [r7, #4]
 80257ee:	681b      	ldr	r3, [r3, #0]
 80257f0:	4618      	mov	r0, r3
 80257f2:	f005 f9ba 	bl	802ab6a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80257f6:	687b      	ldr	r3, [r7, #4]
 80257f8:	2200      	movs	r2, #0
 80257fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80257fe:	2300      	movs	r3, #0
}
 8025800:	4618      	mov	r0, r3
 8025802:	3708      	adds	r7, #8
 8025804:	46bd      	mov	sp, r7
 8025806:	bd80      	pop	{r7, pc}

08025808 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8025808:	b580      	push	{r7, lr}
 802580a:	b082      	sub	sp, #8
 802580c:	af00      	add	r7, sp, #0
 802580e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8025810:	687b      	ldr	r3, [r7, #4]
 8025812:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8025816:	2b01      	cmp	r3, #1
 8025818:	d101      	bne.n	802581e <HAL_HCD_Stop+0x16>
 802581a:	2302      	movs	r3, #2
 802581c:	e00d      	b.n	802583a <HAL_HCD_Stop+0x32>
 802581e:	687b      	ldr	r3, [r7, #4]
 8025820:	2201      	movs	r2, #1
 8025822:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8025826:	687b      	ldr	r3, [r7, #4]
 8025828:	681b      	ldr	r3, [r3, #0]
 802582a:	4618      	mov	r0, r3
 802582c:	f006 f890 	bl	802b950 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8025830:	687b      	ldr	r3, [r7, #4]
 8025832:	2200      	movs	r2, #0
 8025834:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8025838:	2300      	movs	r3, #0
}
 802583a:	4618      	mov	r0, r3
 802583c:	3708      	adds	r7, #8
 802583e:	46bd      	mov	sp, r7
 8025840:	bd80      	pop	{r7, pc}

08025842 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8025842:	b580      	push	{r7, lr}
 8025844:	b082      	sub	sp, #8
 8025846:	af00      	add	r7, sp, #0
 8025848:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 802584a:	687b      	ldr	r3, [r7, #4]
 802584c:	681b      	ldr	r3, [r3, #0]
 802584e:	4618      	mov	r0, r3
 8025850:	f005 fc44 	bl	802b0dc <USB_ResetPort>
 8025854:	4603      	mov	r3, r0
}
 8025856:	4618      	mov	r0, r3
 8025858:	3708      	adds	r7, #8
 802585a:	46bd      	mov	sp, r7
 802585c:	bd80      	pop	{r7, pc}

0802585e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 802585e:	b480      	push	{r7}
 8025860:	b083      	sub	sp, #12
 8025862:	af00      	add	r7, sp, #0
 8025864:	6078      	str	r0, [r7, #4]
 8025866:	460b      	mov	r3, r1
 8025868:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 802586a:	78fb      	ldrb	r3, [r7, #3]
 802586c:	687a      	ldr	r2, [r7, #4]
 802586e:	212c      	movs	r1, #44	; 0x2c
 8025870:	fb01 f303 	mul.w	r3, r1, r3
 8025874:	4413      	add	r3, r2
 8025876:	3360      	adds	r3, #96	; 0x60
 8025878:	781b      	ldrb	r3, [r3, #0]
}
 802587a:	4618      	mov	r0, r3
 802587c:	370c      	adds	r7, #12
 802587e:	46bd      	mov	sp, r7
 8025880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025884:	4770      	bx	lr

08025886 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025886:	b480      	push	{r7}
 8025888:	b083      	sub	sp, #12
 802588a:	af00      	add	r7, sp, #0
 802588c:	6078      	str	r0, [r7, #4]
 802588e:	460b      	mov	r3, r1
 8025890:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8025892:	78fb      	ldrb	r3, [r7, #3]
 8025894:	687a      	ldr	r2, [r7, #4]
 8025896:	212c      	movs	r1, #44	; 0x2c
 8025898:	fb01 f303 	mul.w	r3, r1, r3
 802589c:	4413      	add	r3, r2
 802589e:	3350      	adds	r3, #80	; 0x50
 80258a0:	681b      	ldr	r3, [r3, #0]
}
 80258a2:	4618      	mov	r0, r3
 80258a4:	370c      	adds	r7, #12
 80258a6:	46bd      	mov	sp, r7
 80258a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258ac:	4770      	bx	lr

080258ae <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80258ae:	b580      	push	{r7, lr}
 80258b0:	b082      	sub	sp, #8
 80258b2:	af00      	add	r7, sp, #0
 80258b4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80258b6:	687b      	ldr	r3, [r7, #4]
 80258b8:	681b      	ldr	r3, [r3, #0]
 80258ba:	4618      	mov	r0, r3
 80258bc:	f005 fc88 	bl	802b1d0 <USB_GetCurrentFrame>
 80258c0:	4603      	mov	r3, r0
}
 80258c2:	4618      	mov	r0, r3
 80258c4:	3708      	adds	r7, #8
 80258c6:	46bd      	mov	sp, r7
 80258c8:	bd80      	pop	{r7, pc}

080258ca <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80258ca:	b580      	push	{r7, lr}
 80258cc:	b082      	sub	sp, #8
 80258ce:	af00      	add	r7, sp, #0
 80258d0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80258d2:	687b      	ldr	r3, [r7, #4]
 80258d4:	681b      	ldr	r3, [r3, #0]
 80258d6:	4618      	mov	r0, r3
 80258d8:	f005 fc63 	bl	802b1a2 <USB_GetHostSpeed>
 80258dc:	4603      	mov	r3, r0
}
 80258de:	4618      	mov	r0, r3
 80258e0:	3708      	adds	r7, #8
 80258e2:	46bd      	mov	sp, r7
 80258e4:	bd80      	pop	{r7, pc}

080258e6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80258e6:	b580      	push	{r7, lr}
 80258e8:	b086      	sub	sp, #24
 80258ea:	af00      	add	r7, sp, #0
 80258ec:	6078      	str	r0, [r7, #4]
 80258ee:	460b      	mov	r3, r1
 80258f0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80258f2:	687b      	ldr	r3, [r7, #4]
 80258f4:	681b      	ldr	r3, [r3, #0]
 80258f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80258f8:	697b      	ldr	r3, [r7, #20]
 80258fa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80258fc:	78fb      	ldrb	r3, [r7, #3]
 80258fe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8025900:	68fb      	ldr	r3, [r7, #12]
 8025902:	015a      	lsls	r2, r3, #5
 8025904:	693b      	ldr	r3, [r7, #16]
 8025906:	4413      	add	r3, r2
 8025908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802590c:	689b      	ldr	r3, [r3, #8]
 802590e:	f003 0304 	and.w	r3, r3, #4
 8025912:	2b04      	cmp	r3, #4
 8025914:	d11a      	bne.n	802594c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8025916:	68fb      	ldr	r3, [r7, #12]
 8025918:	015a      	lsls	r2, r3, #5
 802591a:	693b      	ldr	r3, [r7, #16]
 802591c:	4413      	add	r3, r2
 802591e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025922:	461a      	mov	r2, r3
 8025924:	2304      	movs	r3, #4
 8025926:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025928:	687a      	ldr	r2, [r7, #4]
 802592a:	68fb      	ldr	r3, [r7, #12]
 802592c:	212c      	movs	r1, #44	; 0x2c
 802592e:	fb01 f303 	mul.w	r3, r1, r3
 8025932:	4413      	add	r3, r2
 8025934:	3361      	adds	r3, #97	; 0x61
 8025936:	2206      	movs	r2, #6
 8025938:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802593a:	687b      	ldr	r3, [r7, #4]
 802593c:	681b      	ldr	r3, [r3, #0]
 802593e:	68fa      	ldr	r2, [r7, #12]
 8025940:	b2d2      	uxtb	r2, r2
 8025942:	4611      	mov	r1, r2
 8025944:	4618      	mov	r0, r3
 8025946:	f005 feca 	bl	802b6de <USB_HC_Halt>
 802594a:	e0af      	b.n	8025aac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 802594c:	68fb      	ldr	r3, [r7, #12]
 802594e:	015a      	lsls	r2, r3, #5
 8025950:	693b      	ldr	r3, [r7, #16]
 8025952:	4413      	add	r3, r2
 8025954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025958:	689b      	ldr	r3, [r3, #8]
 802595a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802595e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8025962:	d11b      	bne.n	802599c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8025964:	68fb      	ldr	r3, [r7, #12]
 8025966:	015a      	lsls	r2, r3, #5
 8025968:	693b      	ldr	r3, [r7, #16]
 802596a:	4413      	add	r3, r2
 802596c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025970:	461a      	mov	r2, r3
 8025972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8025976:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8025978:	687a      	ldr	r2, [r7, #4]
 802597a:	68fb      	ldr	r3, [r7, #12]
 802597c:	212c      	movs	r1, #44	; 0x2c
 802597e:	fb01 f303 	mul.w	r3, r1, r3
 8025982:	4413      	add	r3, r2
 8025984:	3361      	adds	r3, #97	; 0x61
 8025986:	2207      	movs	r2, #7
 8025988:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802598a:	687b      	ldr	r3, [r7, #4]
 802598c:	681b      	ldr	r3, [r3, #0]
 802598e:	68fa      	ldr	r2, [r7, #12]
 8025990:	b2d2      	uxtb	r2, r2
 8025992:	4611      	mov	r1, r2
 8025994:	4618      	mov	r0, r3
 8025996:	f005 fea2 	bl	802b6de <USB_HC_Halt>
 802599a:	e087      	b.n	8025aac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 802599c:	68fb      	ldr	r3, [r7, #12]
 802599e:	015a      	lsls	r2, r3, #5
 80259a0:	693b      	ldr	r3, [r7, #16]
 80259a2:	4413      	add	r3, r2
 80259a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259a8:	689b      	ldr	r3, [r3, #8]
 80259aa:	f003 0320 	and.w	r3, r3, #32
 80259ae:	2b20      	cmp	r3, #32
 80259b0:	d109      	bne.n	80259c6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80259b2:	68fb      	ldr	r3, [r7, #12]
 80259b4:	015a      	lsls	r2, r3, #5
 80259b6:	693b      	ldr	r3, [r7, #16]
 80259b8:	4413      	add	r3, r2
 80259ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259be:	461a      	mov	r2, r3
 80259c0:	2320      	movs	r3, #32
 80259c2:	6093      	str	r3, [r2, #8]
 80259c4:	e072      	b.n	8025aac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80259c6:	68fb      	ldr	r3, [r7, #12]
 80259c8:	015a      	lsls	r2, r3, #5
 80259ca:	693b      	ldr	r3, [r7, #16]
 80259cc:	4413      	add	r3, r2
 80259ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259d2:	689b      	ldr	r3, [r3, #8]
 80259d4:	f003 0308 	and.w	r3, r3, #8
 80259d8:	2b08      	cmp	r3, #8
 80259da:	d11a      	bne.n	8025a12 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80259dc:	68fb      	ldr	r3, [r7, #12]
 80259de:	015a      	lsls	r2, r3, #5
 80259e0:	693b      	ldr	r3, [r7, #16]
 80259e2:	4413      	add	r3, r2
 80259e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259e8:	461a      	mov	r2, r3
 80259ea:	2308      	movs	r3, #8
 80259ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80259ee:	687a      	ldr	r2, [r7, #4]
 80259f0:	68fb      	ldr	r3, [r7, #12]
 80259f2:	212c      	movs	r1, #44	; 0x2c
 80259f4:	fb01 f303 	mul.w	r3, r1, r3
 80259f8:	4413      	add	r3, r2
 80259fa:	3361      	adds	r3, #97	; 0x61
 80259fc:	2205      	movs	r2, #5
 80259fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025a00:	687b      	ldr	r3, [r7, #4]
 8025a02:	681b      	ldr	r3, [r3, #0]
 8025a04:	68fa      	ldr	r2, [r7, #12]
 8025a06:	b2d2      	uxtb	r2, r2
 8025a08:	4611      	mov	r1, r2
 8025a0a:	4618      	mov	r0, r3
 8025a0c:	f005 fe67 	bl	802b6de <USB_HC_Halt>
 8025a10:	e04c      	b.n	8025aac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8025a12:	68fb      	ldr	r3, [r7, #12]
 8025a14:	015a      	lsls	r2, r3, #5
 8025a16:	693b      	ldr	r3, [r7, #16]
 8025a18:	4413      	add	r3, r2
 8025a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a1e:	689b      	ldr	r3, [r3, #8]
 8025a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8025a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025a28:	d11b      	bne.n	8025a62 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8025a2a:	68fb      	ldr	r3, [r7, #12]
 8025a2c:	015a      	lsls	r2, r3, #5
 8025a2e:	693b      	ldr	r3, [r7, #16]
 8025a30:	4413      	add	r3, r2
 8025a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a36:	461a      	mov	r2, r3
 8025a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025a3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8025a3e:	687a      	ldr	r2, [r7, #4]
 8025a40:	68fb      	ldr	r3, [r7, #12]
 8025a42:	212c      	movs	r1, #44	; 0x2c
 8025a44:	fb01 f303 	mul.w	r3, r1, r3
 8025a48:	4413      	add	r3, r2
 8025a4a:	3361      	adds	r3, #97	; 0x61
 8025a4c:	2208      	movs	r2, #8
 8025a4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025a50:	687b      	ldr	r3, [r7, #4]
 8025a52:	681b      	ldr	r3, [r3, #0]
 8025a54:	68fa      	ldr	r2, [r7, #12]
 8025a56:	b2d2      	uxtb	r2, r2
 8025a58:	4611      	mov	r1, r2
 8025a5a:	4618      	mov	r0, r3
 8025a5c:	f005 fe3f 	bl	802b6de <USB_HC_Halt>
 8025a60:	e024      	b.n	8025aac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8025a62:	68fb      	ldr	r3, [r7, #12]
 8025a64:	015a      	lsls	r2, r3, #5
 8025a66:	693b      	ldr	r3, [r7, #16]
 8025a68:	4413      	add	r3, r2
 8025a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a6e:	689b      	ldr	r3, [r3, #8]
 8025a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025a74:	2b80      	cmp	r3, #128	; 0x80
 8025a76:	d119      	bne.n	8025aac <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8025a78:	68fb      	ldr	r3, [r7, #12]
 8025a7a:	015a      	lsls	r2, r3, #5
 8025a7c:	693b      	ldr	r3, [r7, #16]
 8025a7e:	4413      	add	r3, r2
 8025a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a84:	461a      	mov	r2, r3
 8025a86:	2380      	movs	r3, #128	; 0x80
 8025a88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025a8a:	687a      	ldr	r2, [r7, #4]
 8025a8c:	68fb      	ldr	r3, [r7, #12]
 8025a8e:	212c      	movs	r1, #44	; 0x2c
 8025a90:	fb01 f303 	mul.w	r3, r1, r3
 8025a94:	4413      	add	r3, r2
 8025a96:	3361      	adds	r3, #97	; 0x61
 8025a98:	2206      	movs	r2, #6
 8025a9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025a9c:	687b      	ldr	r3, [r7, #4]
 8025a9e:	681b      	ldr	r3, [r3, #0]
 8025aa0:	68fa      	ldr	r2, [r7, #12]
 8025aa2:	b2d2      	uxtb	r2, r2
 8025aa4:	4611      	mov	r1, r2
 8025aa6:	4618      	mov	r0, r3
 8025aa8:	f005 fe19 	bl	802b6de <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8025aac:	68fb      	ldr	r3, [r7, #12]
 8025aae:	015a      	lsls	r2, r3, #5
 8025ab0:	693b      	ldr	r3, [r7, #16]
 8025ab2:	4413      	add	r3, r2
 8025ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ab8:	689b      	ldr	r3, [r3, #8]
 8025aba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025ac2:	d112      	bne.n	8025aea <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025ac4:	687b      	ldr	r3, [r7, #4]
 8025ac6:	681b      	ldr	r3, [r3, #0]
 8025ac8:	68fa      	ldr	r2, [r7, #12]
 8025aca:	b2d2      	uxtb	r2, r2
 8025acc:	4611      	mov	r1, r2
 8025ace:	4618      	mov	r0, r3
 8025ad0:	f005 fe05 	bl	802b6de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8025ad4:	68fb      	ldr	r3, [r7, #12]
 8025ad6:	015a      	lsls	r2, r3, #5
 8025ad8:	693b      	ldr	r3, [r7, #16]
 8025ada:	4413      	add	r3, r2
 8025adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ae0:	461a      	mov	r2, r3
 8025ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025ae6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8025ae8:	e24e      	b.n	8025f88 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8025aea:	68fb      	ldr	r3, [r7, #12]
 8025aec:	015a      	lsls	r2, r3, #5
 8025aee:	693b      	ldr	r3, [r7, #16]
 8025af0:	4413      	add	r3, r2
 8025af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025af6:	689b      	ldr	r3, [r3, #8]
 8025af8:	f003 0301 	and.w	r3, r3, #1
 8025afc:	2b01      	cmp	r3, #1
 8025afe:	f040 80df 	bne.w	8025cc0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8025b02:	687b      	ldr	r3, [r7, #4]
 8025b04:	691b      	ldr	r3, [r3, #16]
 8025b06:	2b00      	cmp	r3, #0
 8025b08:	d019      	beq.n	8025b3e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8025b0a:	687a      	ldr	r2, [r7, #4]
 8025b0c:	68fb      	ldr	r3, [r7, #12]
 8025b0e:	212c      	movs	r1, #44	; 0x2c
 8025b10:	fb01 f303 	mul.w	r3, r1, r3
 8025b14:	4413      	add	r3, r2
 8025b16:	3348      	adds	r3, #72	; 0x48
 8025b18:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8025b1a:	68fb      	ldr	r3, [r7, #12]
 8025b1c:	0159      	lsls	r1, r3, #5
 8025b1e:	693b      	ldr	r3, [r7, #16]
 8025b20:	440b      	add	r3, r1
 8025b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b26:	691b      	ldr	r3, [r3, #16]
 8025b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8025b2c:	1ad2      	subs	r2, r2, r3
 8025b2e:	6879      	ldr	r1, [r7, #4]
 8025b30:	68fb      	ldr	r3, [r7, #12]
 8025b32:	202c      	movs	r0, #44	; 0x2c
 8025b34:	fb00 f303 	mul.w	r3, r0, r3
 8025b38:	440b      	add	r3, r1
 8025b3a:	3350      	adds	r3, #80	; 0x50
 8025b3c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8025b3e:	687a      	ldr	r2, [r7, #4]
 8025b40:	68fb      	ldr	r3, [r7, #12]
 8025b42:	212c      	movs	r1, #44	; 0x2c
 8025b44:	fb01 f303 	mul.w	r3, r1, r3
 8025b48:	4413      	add	r3, r2
 8025b4a:	3361      	adds	r3, #97	; 0x61
 8025b4c:	2201      	movs	r2, #1
 8025b4e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025b50:	687a      	ldr	r2, [r7, #4]
 8025b52:	68fb      	ldr	r3, [r7, #12]
 8025b54:	212c      	movs	r1, #44	; 0x2c
 8025b56:	fb01 f303 	mul.w	r3, r1, r3
 8025b5a:	4413      	add	r3, r2
 8025b5c:	335c      	adds	r3, #92	; 0x5c
 8025b5e:	2200      	movs	r2, #0
 8025b60:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8025b62:	68fb      	ldr	r3, [r7, #12]
 8025b64:	015a      	lsls	r2, r3, #5
 8025b66:	693b      	ldr	r3, [r7, #16]
 8025b68:	4413      	add	r3, r2
 8025b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b6e:	461a      	mov	r2, r3
 8025b70:	2301      	movs	r3, #1
 8025b72:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025b74:	687a      	ldr	r2, [r7, #4]
 8025b76:	68fb      	ldr	r3, [r7, #12]
 8025b78:	212c      	movs	r1, #44	; 0x2c
 8025b7a:	fb01 f303 	mul.w	r3, r1, r3
 8025b7e:	4413      	add	r3, r2
 8025b80:	333f      	adds	r3, #63	; 0x3f
 8025b82:	781b      	ldrb	r3, [r3, #0]
 8025b84:	2b00      	cmp	r3, #0
 8025b86:	d009      	beq.n	8025b9c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8025b88:	687a      	ldr	r2, [r7, #4]
 8025b8a:	68fb      	ldr	r3, [r7, #12]
 8025b8c:	212c      	movs	r1, #44	; 0x2c
 8025b8e:	fb01 f303 	mul.w	r3, r1, r3
 8025b92:	4413      	add	r3, r2
 8025b94:	333f      	adds	r3, #63	; 0x3f
 8025b96:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025b98:	2b02      	cmp	r3, #2
 8025b9a:	d111      	bne.n	8025bc0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025b9c:	687b      	ldr	r3, [r7, #4]
 8025b9e:	681b      	ldr	r3, [r3, #0]
 8025ba0:	68fa      	ldr	r2, [r7, #12]
 8025ba2:	b2d2      	uxtb	r2, r2
 8025ba4:	4611      	mov	r1, r2
 8025ba6:	4618      	mov	r0, r3
 8025ba8:	f005 fd99 	bl	802b6de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025bac:	68fb      	ldr	r3, [r7, #12]
 8025bae:	015a      	lsls	r2, r3, #5
 8025bb0:	693b      	ldr	r3, [r7, #16]
 8025bb2:	4413      	add	r3, r2
 8025bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025bb8:	461a      	mov	r2, r3
 8025bba:	2310      	movs	r3, #16
 8025bbc:	6093      	str	r3, [r2, #8]
 8025bbe:	e03a      	b.n	8025c36 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8025bc0:	687a      	ldr	r2, [r7, #4]
 8025bc2:	68fb      	ldr	r3, [r7, #12]
 8025bc4:	212c      	movs	r1, #44	; 0x2c
 8025bc6:	fb01 f303 	mul.w	r3, r1, r3
 8025bca:	4413      	add	r3, r2
 8025bcc:	333f      	adds	r3, #63	; 0x3f
 8025bce:	781b      	ldrb	r3, [r3, #0]
 8025bd0:	2b03      	cmp	r3, #3
 8025bd2:	d009      	beq.n	8025be8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8025bd4:	687a      	ldr	r2, [r7, #4]
 8025bd6:	68fb      	ldr	r3, [r7, #12]
 8025bd8:	212c      	movs	r1, #44	; 0x2c
 8025bda:	fb01 f303 	mul.w	r3, r1, r3
 8025bde:	4413      	add	r3, r2
 8025be0:	333f      	adds	r3, #63	; 0x3f
 8025be2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8025be4:	2b01      	cmp	r3, #1
 8025be6:	d126      	bne.n	8025c36 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8025be8:	68fb      	ldr	r3, [r7, #12]
 8025bea:	015a      	lsls	r2, r3, #5
 8025bec:	693b      	ldr	r3, [r7, #16]
 8025bee:	4413      	add	r3, r2
 8025bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025bf4:	681b      	ldr	r3, [r3, #0]
 8025bf6:	68fa      	ldr	r2, [r7, #12]
 8025bf8:	0151      	lsls	r1, r2, #5
 8025bfa:	693a      	ldr	r2, [r7, #16]
 8025bfc:	440a      	add	r2, r1
 8025bfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025c02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025c06:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025c08:	687a      	ldr	r2, [r7, #4]
 8025c0a:	68fb      	ldr	r3, [r7, #12]
 8025c0c:	212c      	movs	r1, #44	; 0x2c
 8025c0e:	fb01 f303 	mul.w	r3, r1, r3
 8025c12:	4413      	add	r3, r2
 8025c14:	3360      	adds	r3, #96	; 0x60
 8025c16:	2201      	movs	r2, #1
 8025c18:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025c1a:	68fb      	ldr	r3, [r7, #12]
 8025c1c:	b2d9      	uxtb	r1, r3
 8025c1e:	687a      	ldr	r2, [r7, #4]
 8025c20:	68fb      	ldr	r3, [r7, #12]
 8025c22:	202c      	movs	r0, #44	; 0x2c
 8025c24:	fb00 f303 	mul.w	r3, r0, r3
 8025c28:	4413      	add	r3, r2
 8025c2a:	3360      	adds	r3, #96	; 0x60
 8025c2c:	781b      	ldrb	r3, [r3, #0]
 8025c2e:	461a      	mov	r2, r3
 8025c30:	6878      	ldr	r0, [r7, #4]
 8025c32:	f007 fff3 	bl	802dc1c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8025c36:	687b      	ldr	r3, [r7, #4]
 8025c38:	691b      	ldr	r3, [r3, #16]
 8025c3a:	2b01      	cmp	r3, #1
 8025c3c:	d12b      	bne.n	8025c96 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8025c3e:	687a      	ldr	r2, [r7, #4]
 8025c40:	68fb      	ldr	r3, [r7, #12]
 8025c42:	212c      	movs	r1, #44	; 0x2c
 8025c44:	fb01 f303 	mul.w	r3, r1, r3
 8025c48:	4413      	add	r3, r2
 8025c4a:	3348      	adds	r3, #72	; 0x48
 8025c4c:	681b      	ldr	r3, [r3, #0]
 8025c4e:	6879      	ldr	r1, [r7, #4]
 8025c50:	68fa      	ldr	r2, [r7, #12]
 8025c52:	202c      	movs	r0, #44	; 0x2c
 8025c54:	fb00 f202 	mul.w	r2, r0, r2
 8025c58:	440a      	add	r2, r1
 8025c5a:	3240      	adds	r2, #64	; 0x40
 8025c5c:	8812      	ldrh	r2, [r2, #0]
 8025c5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8025c62:	f003 0301 	and.w	r3, r3, #1
 8025c66:	2b00      	cmp	r3, #0
 8025c68:	f000 818e 	beq.w	8025f88 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8025c6c:	687a      	ldr	r2, [r7, #4]
 8025c6e:	68fb      	ldr	r3, [r7, #12]
 8025c70:	212c      	movs	r1, #44	; 0x2c
 8025c72:	fb01 f303 	mul.w	r3, r1, r3
 8025c76:	4413      	add	r3, r2
 8025c78:	3354      	adds	r3, #84	; 0x54
 8025c7a:	781b      	ldrb	r3, [r3, #0]
 8025c7c:	f083 0301 	eor.w	r3, r3, #1
 8025c80:	b2d8      	uxtb	r0, r3
 8025c82:	687a      	ldr	r2, [r7, #4]
 8025c84:	68fb      	ldr	r3, [r7, #12]
 8025c86:	212c      	movs	r1, #44	; 0x2c
 8025c88:	fb01 f303 	mul.w	r3, r1, r3
 8025c8c:	4413      	add	r3, r2
 8025c8e:	3354      	adds	r3, #84	; 0x54
 8025c90:	4602      	mov	r2, r0
 8025c92:	701a      	strb	r2, [r3, #0]
}
 8025c94:	e178      	b.n	8025f88 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8025c96:	687a      	ldr	r2, [r7, #4]
 8025c98:	68fb      	ldr	r3, [r7, #12]
 8025c9a:	212c      	movs	r1, #44	; 0x2c
 8025c9c:	fb01 f303 	mul.w	r3, r1, r3
 8025ca0:	4413      	add	r3, r2
 8025ca2:	3354      	adds	r3, #84	; 0x54
 8025ca4:	781b      	ldrb	r3, [r3, #0]
 8025ca6:	f083 0301 	eor.w	r3, r3, #1
 8025caa:	b2d8      	uxtb	r0, r3
 8025cac:	687a      	ldr	r2, [r7, #4]
 8025cae:	68fb      	ldr	r3, [r7, #12]
 8025cb0:	212c      	movs	r1, #44	; 0x2c
 8025cb2:	fb01 f303 	mul.w	r3, r1, r3
 8025cb6:	4413      	add	r3, r2
 8025cb8:	3354      	adds	r3, #84	; 0x54
 8025cba:	4602      	mov	r2, r0
 8025cbc:	701a      	strb	r2, [r3, #0]
}
 8025cbe:	e163      	b.n	8025f88 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8025cc0:	68fb      	ldr	r3, [r7, #12]
 8025cc2:	015a      	lsls	r2, r3, #5
 8025cc4:	693b      	ldr	r3, [r7, #16]
 8025cc6:	4413      	add	r3, r2
 8025cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ccc:	689b      	ldr	r3, [r3, #8]
 8025cce:	f003 0302 	and.w	r3, r3, #2
 8025cd2:	2b02      	cmp	r3, #2
 8025cd4:	f040 80f6 	bne.w	8025ec4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8025cd8:	687a      	ldr	r2, [r7, #4]
 8025cda:	68fb      	ldr	r3, [r7, #12]
 8025cdc:	212c      	movs	r1, #44	; 0x2c
 8025cde:	fb01 f303 	mul.w	r3, r1, r3
 8025ce2:	4413      	add	r3, r2
 8025ce4:	3361      	adds	r3, #97	; 0x61
 8025ce6:	781b      	ldrb	r3, [r3, #0]
 8025ce8:	2b01      	cmp	r3, #1
 8025cea:	d109      	bne.n	8025d00 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025cec:	687a      	ldr	r2, [r7, #4]
 8025cee:	68fb      	ldr	r3, [r7, #12]
 8025cf0:	212c      	movs	r1, #44	; 0x2c
 8025cf2:	fb01 f303 	mul.w	r3, r1, r3
 8025cf6:	4413      	add	r3, r2
 8025cf8:	3360      	adds	r3, #96	; 0x60
 8025cfa:	2201      	movs	r2, #1
 8025cfc:	701a      	strb	r2, [r3, #0]
 8025cfe:	e0c9      	b.n	8025e94 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8025d00:	687a      	ldr	r2, [r7, #4]
 8025d02:	68fb      	ldr	r3, [r7, #12]
 8025d04:	212c      	movs	r1, #44	; 0x2c
 8025d06:	fb01 f303 	mul.w	r3, r1, r3
 8025d0a:	4413      	add	r3, r2
 8025d0c:	3361      	adds	r3, #97	; 0x61
 8025d0e:	781b      	ldrb	r3, [r3, #0]
 8025d10:	2b05      	cmp	r3, #5
 8025d12:	d109      	bne.n	8025d28 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8025d14:	687a      	ldr	r2, [r7, #4]
 8025d16:	68fb      	ldr	r3, [r7, #12]
 8025d18:	212c      	movs	r1, #44	; 0x2c
 8025d1a:	fb01 f303 	mul.w	r3, r1, r3
 8025d1e:	4413      	add	r3, r2
 8025d20:	3360      	adds	r3, #96	; 0x60
 8025d22:	2205      	movs	r2, #5
 8025d24:	701a      	strb	r2, [r3, #0]
 8025d26:	e0b5      	b.n	8025e94 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025d28:	687a      	ldr	r2, [r7, #4]
 8025d2a:	68fb      	ldr	r3, [r7, #12]
 8025d2c:	212c      	movs	r1, #44	; 0x2c
 8025d2e:	fb01 f303 	mul.w	r3, r1, r3
 8025d32:	4413      	add	r3, r2
 8025d34:	3361      	adds	r3, #97	; 0x61
 8025d36:	781b      	ldrb	r3, [r3, #0]
 8025d38:	2b06      	cmp	r3, #6
 8025d3a:	d009      	beq.n	8025d50 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8025d3c:	687a      	ldr	r2, [r7, #4]
 8025d3e:	68fb      	ldr	r3, [r7, #12]
 8025d40:	212c      	movs	r1, #44	; 0x2c
 8025d42:	fb01 f303 	mul.w	r3, r1, r3
 8025d46:	4413      	add	r3, r2
 8025d48:	3361      	adds	r3, #97	; 0x61
 8025d4a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025d4c:	2b08      	cmp	r3, #8
 8025d4e:	d150      	bne.n	8025df2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8025d50:	687a      	ldr	r2, [r7, #4]
 8025d52:	68fb      	ldr	r3, [r7, #12]
 8025d54:	212c      	movs	r1, #44	; 0x2c
 8025d56:	fb01 f303 	mul.w	r3, r1, r3
 8025d5a:	4413      	add	r3, r2
 8025d5c:	335c      	adds	r3, #92	; 0x5c
 8025d5e:	681b      	ldr	r3, [r3, #0]
 8025d60:	1c5a      	adds	r2, r3, #1
 8025d62:	6879      	ldr	r1, [r7, #4]
 8025d64:	68fb      	ldr	r3, [r7, #12]
 8025d66:	202c      	movs	r0, #44	; 0x2c
 8025d68:	fb00 f303 	mul.w	r3, r0, r3
 8025d6c:	440b      	add	r3, r1
 8025d6e:	335c      	adds	r3, #92	; 0x5c
 8025d70:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025d72:	687a      	ldr	r2, [r7, #4]
 8025d74:	68fb      	ldr	r3, [r7, #12]
 8025d76:	212c      	movs	r1, #44	; 0x2c
 8025d78:	fb01 f303 	mul.w	r3, r1, r3
 8025d7c:	4413      	add	r3, r2
 8025d7e:	335c      	adds	r3, #92	; 0x5c
 8025d80:	681b      	ldr	r3, [r3, #0]
 8025d82:	2b02      	cmp	r3, #2
 8025d84:	d912      	bls.n	8025dac <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8025d86:	687a      	ldr	r2, [r7, #4]
 8025d88:	68fb      	ldr	r3, [r7, #12]
 8025d8a:	212c      	movs	r1, #44	; 0x2c
 8025d8c:	fb01 f303 	mul.w	r3, r1, r3
 8025d90:	4413      	add	r3, r2
 8025d92:	335c      	adds	r3, #92	; 0x5c
 8025d94:	2200      	movs	r2, #0
 8025d96:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025d98:	687a      	ldr	r2, [r7, #4]
 8025d9a:	68fb      	ldr	r3, [r7, #12]
 8025d9c:	212c      	movs	r1, #44	; 0x2c
 8025d9e:	fb01 f303 	mul.w	r3, r1, r3
 8025da2:	4413      	add	r3, r2
 8025da4:	3360      	adds	r3, #96	; 0x60
 8025da6:	2204      	movs	r2, #4
 8025da8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025daa:	e073      	b.n	8025e94 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025dac:	687a      	ldr	r2, [r7, #4]
 8025dae:	68fb      	ldr	r3, [r7, #12]
 8025db0:	212c      	movs	r1, #44	; 0x2c
 8025db2:	fb01 f303 	mul.w	r3, r1, r3
 8025db6:	4413      	add	r3, r2
 8025db8:	3360      	adds	r3, #96	; 0x60
 8025dba:	2202      	movs	r2, #2
 8025dbc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025dbe:	68fb      	ldr	r3, [r7, #12]
 8025dc0:	015a      	lsls	r2, r3, #5
 8025dc2:	693b      	ldr	r3, [r7, #16]
 8025dc4:	4413      	add	r3, r2
 8025dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025dca:	681b      	ldr	r3, [r3, #0]
 8025dcc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025dce:	68bb      	ldr	r3, [r7, #8]
 8025dd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025dd4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025dd6:	68bb      	ldr	r3, [r7, #8]
 8025dd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025ddc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025dde:	68fb      	ldr	r3, [r7, #12]
 8025de0:	015a      	lsls	r2, r3, #5
 8025de2:	693b      	ldr	r3, [r7, #16]
 8025de4:	4413      	add	r3, r2
 8025de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025dea:	461a      	mov	r2, r3
 8025dec:	68bb      	ldr	r3, [r7, #8]
 8025dee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025df0:	e050      	b.n	8025e94 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8025df2:	687a      	ldr	r2, [r7, #4]
 8025df4:	68fb      	ldr	r3, [r7, #12]
 8025df6:	212c      	movs	r1, #44	; 0x2c
 8025df8:	fb01 f303 	mul.w	r3, r1, r3
 8025dfc:	4413      	add	r3, r2
 8025dfe:	3361      	adds	r3, #97	; 0x61
 8025e00:	781b      	ldrb	r3, [r3, #0]
 8025e02:	2b03      	cmp	r3, #3
 8025e04:	d122      	bne.n	8025e4c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8025e06:	687a      	ldr	r2, [r7, #4]
 8025e08:	68fb      	ldr	r3, [r7, #12]
 8025e0a:	212c      	movs	r1, #44	; 0x2c
 8025e0c:	fb01 f303 	mul.w	r3, r1, r3
 8025e10:	4413      	add	r3, r2
 8025e12:	3360      	adds	r3, #96	; 0x60
 8025e14:	2202      	movs	r2, #2
 8025e16:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025e18:	68fb      	ldr	r3, [r7, #12]
 8025e1a:	015a      	lsls	r2, r3, #5
 8025e1c:	693b      	ldr	r3, [r7, #16]
 8025e1e:	4413      	add	r3, r2
 8025e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e24:	681b      	ldr	r3, [r3, #0]
 8025e26:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025e28:	68bb      	ldr	r3, [r7, #8]
 8025e2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025e2e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025e30:	68bb      	ldr	r3, [r7, #8]
 8025e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025e36:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025e38:	68fb      	ldr	r3, [r7, #12]
 8025e3a:	015a      	lsls	r2, r3, #5
 8025e3c:	693b      	ldr	r3, [r7, #16]
 8025e3e:	4413      	add	r3, r2
 8025e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e44:	461a      	mov	r2, r3
 8025e46:	68bb      	ldr	r3, [r7, #8]
 8025e48:	6013      	str	r3, [r2, #0]
 8025e4a:	e023      	b.n	8025e94 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8025e4c:	687a      	ldr	r2, [r7, #4]
 8025e4e:	68fb      	ldr	r3, [r7, #12]
 8025e50:	212c      	movs	r1, #44	; 0x2c
 8025e52:	fb01 f303 	mul.w	r3, r1, r3
 8025e56:	4413      	add	r3, r2
 8025e58:	3361      	adds	r3, #97	; 0x61
 8025e5a:	781b      	ldrb	r3, [r3, #0]
 8025e5c:	2b07      	cmp	r3, #7
 8025e5e:	d119      	bne.n	8025e94 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8025e60:	687a      	ldr	r2, [r7, #4]
 8025e62:	68fb      	ldr	r3, [r7, #12]
 8025e64:	212c      	movs	r1, #44	; 0x2c
 8025e66:	fb01 f303 	mul.w	r3, r1, r3
 8025e6a:	4413      	add	r3, r2
 8025e6c:	335c      	adds	r3, #92	; 0x5c
 8025e6e:	681b      	ldr	r3, [r3, #0]
 8025e70:	1c5a      	adds	r2, r3, #1
 8025e72:	6879      	ldr	r1, [r7, #4]
 8025e74:	68fb      	ldr	r3, [r7, #12]
 8025e76:	202c      	movs	r0, #44	; 0x2c
 8025e78:	fb00 f303 	mul.w	r3, r0, r3
 8025e7c:	440b      	add	r3, r1
 8025e7e:	335c      	adds	r3, #92	; 0x5c
 8025e80:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025e82:	687a      	ldr	r2, [r7, #4]
 8025e84:	68fb      	ldr	r3, [r7, #12]
 8025e86:	212c      	movs	r1, #44	; 0x2c
 8025e88:	fb01 f303 	mul.w	r3, r1, r3
 8025e8c:	4413      	add	r3, r2
 8025e8e:	3360      	adds	r3, #96	; 0x60
 8025e90:	2204      	movs	r2, #4
 8025e92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8025e94:	68fb      	ldr	r3, [r7, #12]
 8025e96:	015a      	lsls	r2, r3, #5
 8025e98:	693b      	ldr	r3, [r7, #16]
 8025e9a:	4413      	add	r3, r2
 8025e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ea0:	461a      	mov	r2, r3
 8025ea2:	2302      	movs	r3, #2
 8025ea4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025ea6:	68fb      	ldr	r3, [r7, #12]
 8025ea8:	b2d9      	uxtb	r1, r3
 8025eaa:	687a      	ldr	r2, [r7, #4]
 8025eac:	68fb      	ldr	r3, [r7, #12]
 8025eae:	202c      	movs	r0, #44	; 0x2c
 8025eb0:	fb00 f303 	mul.w	r3, r0, r3
 8025eb4:	4413      	add	r3, r2
 8025eb6:	3360      	adds	r3, #96	; 0x60
 8025eb8:	781b      	ldrb	r3, [r3, #0]
 8025eba:	461a      	mov	r2, r3
 8025ebc:	6878      	ldr	r0, [r7, #4]
 8025ebe:	f007 fead 	bl	802dc1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8025ec2:	e061      	b.n	8025f88 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8025ec4:	68fb      	ldr	r3, [r7, #12]
 8025ec6:	015a      	lsls	r2, r3, #5
 8025ec8:	693b      	ldr	r3, [r7, #16]
 8025eca:	4413      	add	r3, r2
 8025ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ed0:	689b      	ldr	r3, [r3, #8]
 8025ed2:	f003 0310 	and.w	r3, r3, #16
 8025ed6:	2b10      	cmp	r3, #16
 8025ed8:	d156      	bne.n	8025f88 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8025eda:	687a      	ldr	r2, [r7, #4]
 8025edc:	68fb      	ldr	r3, [r7, #12]
 8025ede:	212c      	movs	r1, #44	; 0x2c
 8025ee0:	fb01 f303 	mul.w	r3, r1, r3
 8025ee4:	4413      	add	r3, r2
 8025ee6:	333f      	adds	r3, #63	; 0x3f
 8025ee8:	781b      	ldrb	r3, [r3, #0]
 8025eea:	2b03      	cmp	r3, #3
 8025eec:	d111      	bne.n	8025f12 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8025eee:	687a      	ldr	r2, [r7, #4]
 8025ef0:	68fb      	ldr	r3, [r7, #12]
 8025ef2:	212c      	movs	r1, #44	; 0x2c
 8025ef4:	fb01 f303 	mul.w	r3, r1, r3
 8025ef8:	4413      	add	r3, r2
 8025efa:	335c      	adds	r3, #92	; 0x5c
 8025efc:	2200      	movs	r2, #0
 8025efe:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025f00:	687b      	ldr	r3, [r7, #4]
 8025f02:	681b      	ldr	r3, [r3, #0]
 8025f04:	68fa      	ldr	r2, [r7, #12]
 8025f06:	b2d2      	uxtb	r2, r2
 8025f08:	4611      	mov	r1, r2
 8025f0a:	4618      	mov	r0, r3
 8025f0c:	f005 fbe7 	bl	802b6de <USB_HC_Halt>
 8025f10:	e031      	b.n	8025f76 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025f12:	687a      	ldr	r2, [r7, #4]
 8025f14:	68fb      	ldr	r3, [r7, #12]
 8025f16:	212c      	movs	r1, #44	; 0x2c
 8025f18:	fb01 f303 	mul.w	r3, r1, r3
 8025f1c:	4413      	add	r3, r2
 8025f1e:	333f      	adds	r3, #63	; 0x3f
 8025f20:	781b      	ldrb	r3, [r3, #0]
 8025f22:	2b00      	cmp	r3, #0
 8025f24:	d009      	beq.n	8025f3a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8025f26:	687a      	ldr	r2, [r7, #4]
 8025f28:	68fb      	ldr	r3, [r7, #12]
 8025f2a:	212c      	movs	r1, #44	; 0x2c
 8025f2c:	fb01 f303 	mul.w	r3, r1, r3
 8025f30:	4413      	add	r3, r2
 8025f32:	333f      	adds	r3, #63	; 0x3f
 8025f34:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025f36:	2b02      	cmp	r3, #2
 8025f38:	d11d      	bne.n	8025f76 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8025f3a:	687a      	ldr	r2, [r7, #4]
 8025f3c:	68fb      	ldr	r3, [r7, #12]
 8025f3e:	212c      	movs	r1, #44	; 0x2c
 8025f40:	fb01 f303 	mul.w	r3, r1, r3
 8025f44:	4413      	add	r3, r2
 8025f46:	335c      	adds	r3, #92	; 0x5c
 8025f48:	2200      	movs	r2, #0
 8025f4a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8025f4c:	687b      	ldr	r3, [r7, #4]
 8025f4e:	691b      	ldr	r3, [r3, #16]
 8025f50:	2b00      	cmp	r3, #0
 8025f52:	d110      	bne.n	8025f76 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8025f54:	687a      	ldr	r2, [r7, #4]
 8025f56:	68fb      	ldr	r3, [r7, #12]
 8025f58:	212c      	movs	r1, #44	; 0x2c
 8025f5a:	fb01 f303 	mul.w	r3, r1, r3
 8025f5e:	4413      	add	r3, r2
 8025f60:	3361      	adds	r3, #97	; 0x61
 8025f62:	2203      	movs	r2, #3
 8025f64:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025f66:	687b      	ldr	r3, [r7, #4]
 8025f68:	681b      	ldr	r3, [r3, #0]
 8025f6a:	68fa      	ldr	r2, [r7, #12]
 8025f6c:	b2d2      	uxtb	r2, r2
 8025f6e:	4611      	mov	r1, r2
 8025f70:	4618      	mov	r0, r3
 8025f72:	f005 fbb4 	bl	802b6de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025f76:	68fb      	ldr	r3, [r7, #12]
 8025f78:	015a      	lsls	r2, r3, #5
 8025f7a:	693b      	ldr	r3, [r7, #16]
 8025f7c:	4413      	add	r3, r2
 8025f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f82:	461a      	mov	r2, r3
 8025f84:	2310      	movs	r3, #16
 8025f86:	6093      	str	r3, [r2, #8]
}
 8025f88:	bf00      	nop
 8025f8a:	3718      	adds	r7, #24
 8025f8c:	46bd      	mov	sp, r7
 8025f8e:	bd80      	pop	{r7, pc}

08025f90 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025f90:	b580      	push	{r7, lr}
 8025f92:	b088      	sub	sp, #32
 8025f94:	af00      	add	r7, sp, #0
 8025f96:	6078      	str	r0, [r7, #4]
 8025f98:	460b      	mov	r3, r1
 8025f9a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025f9c:	687b      	ldr	r3, [r7, #4]
 8025f9e:	681b      	ldr	r3, [r3, #0]
 8025fa0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025fa2:	69fb      	ldr	r3, [r7, #28]
 8025fa4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8025fa6:	78fb      	ldrb	r3, [r7, #3]
 8025fa8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8025faa:	697b      	ldr	r3, [r7, #20]
 8025fac:	015a      	lsls	r2, r3, #5
 8025fae:	69bb      	ldr	r3, [r7, #24]
 8025fb0:	4413      	add	r3, r2
 8025fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025fb6:	689b      	ldr	r3, [r3, #8]
 8025fb8:	f003 0304 	and.w	r3, r3, #4
 8025fbc:	2b04      	cmp	r3, #4
 8025fbe:	d11a      	bne.n	8025ff6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8025fc0:	697b      	ldr	r3, [r7, #20]
 8025fc2:	015a      	lsls	r2, r3, #5
 8025fc4:	69bb      	ldr	r3, [r7, #24]
 8025fc6:	4413      	add	r3, r2
 8025fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025fcc:	461a      	mov	r2, r3
 8025fce:	2304      	movs	r3, #4
 8025fd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025fd2:	687a      	ldr	r2, [r7, #4]
 8025fd4:	697b      	ldr	r3, [r7, #20]
 8025fd6:	212c      	movs	r1, #44	; 0x2c
 8025fd8:	fb01 f303 	mul.w	r3, r1, r3
 8025fdc:	4413      	add	r3, r2
 8025fde:	3361      	adds	r3, #97	; 0x61
 8025fe0:	2206      	movs	r2, #6
 8025fe2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025fe4:	687b      	ldr	r3, [r7, #4]
 8025fe6:	681b      	ldr	r3, [r3, #0]
 8025fe8:	697a      	ldr	r2, [r7, #20]
 8025fea:	b2d2      	uxtb	r2, r2
 8025fec:	4611      	mov	r1, r2
 8025fee:	4618      	mov	r0, r3
 8025ff0:	f005 fb75 	bl	802b6de <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8025ff4:	e331      	b.n	802665a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8025ff6:	697b      	ldr	r3, [r7, #20]
 8025ff8:	015a      	lsls	r2, r3, #5
 8025ffa:	69bb      	ldr	r3, [r7, #24]
 8025ffc:	4413      	add	r3, r2
 8025ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026002:	689b      	ldr	r3, [r3, #8]
 8026004:	f003 0320 	and.w	r3, r3, #32
 8026008:	2b20      	cmp	r3, #32
 802600a:	d12e      	bne.n	802606a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 802600c:	697b      	ldr	r3, [r7, #20]
 802600e:	015a      	lsls	r2, r3, #5
 8026010:	69bb      	ldr	r3, [r7, #24]
 8026012:	4413      	add	r3, r2
 8026014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026018:	461a      	mov	r2, r3
 802601a:	2320      	movs	r3, #32
 802601c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 802601e:	687a      	ldr	r2, [r7, #4]
 8026020:	697b      	ldr	r3, [r7, #20]
 8026022:	212c      	movs	r1, #44	; 0x2c
 8026024:	fb01 f303 	mul.w	r3, r1, r3
 8026028:	4413      	add	r3, r2
 802602a:	333d      	adds	r3, #61	; 0x3d
 802602c:	781b      	ldrb	r3, [r3, #0]
 802602e:	2b01      	cmp	r3, #1
 8026030:	f040 8313 	bne.w	802665a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8026034:	687a      	ldr	r2, [r7, #4]
 8026036:	697b      	ldr	r3, [r7, #20]
 8026038:	212c      	movs	r1, #44	; 0x2c
 802603a:	fb01 f303 	mul.w	r3, r1, r3
 802603e:	4413      	add	r3, r2
 8026040:	333d      	adds	r3, #61	; 0x3d
 8026042:	2200      	movs	r2, #0
 8026044:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8026046:	687a      	ldr	r2, [r7, #4]
 8026048:	697b      	ldr	r3, [r7, #20]
 802604a:	212c      	movs	r1, #44	; 0x2c
 802604c:	fb01 f303 	mul.w	r3, r1, r3
 8026050:	4413      	add	r3, r2
 8026052:	3360      	adds	r3, #96	; 0x60
 8026054:	2202      	movs	r2, #2
 8026056:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026058:	687b      	ldr	r3, [r7, #4]
 802605a:	681b      	ldr	r3, [r3, #0]
 802605c:	697a      	ldr	r2, [r7, #20]
 802605e:	b2d2      	uxtb	r2, r2
 8026060:	4611      	mov	r1, r2
 8026062:	4618      	mov	r0, r3
 8026064:	f005 fb3b 	bl	802b6de <USB_HC_Halt>
}
 8026068:	e2f7      	b.n	802665a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 802606a:	697b      	ldr	r3, [r7, #20]
 802606c:	015a      	lsls	r2, r3, #5
 802606e:	69bb      	ldr	r3, [r7, #24]
 8026070:	4413      	add	r3, r2
 8026072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026076:	689b      	ldr	r3, [r3, #8]
 8026078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802607c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026080:	d112      	bne.n	80260a8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8026082:	697b      	ldr	r3, [r7, #20]
 8026084:	015a      	lsls	r2, r3, #5
 8026086:	69bb      	ldr	r3, [r7, #24]
 8026088:	4413      	add	r3, r2
 802608a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802608e:	461a      	mov	r2, r3
 8026090:	f44f 7300 	mov.w	r3, #512	; 0x200
 8026094:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026096:	687b      	ldr	r3, [r7, #4]
 8026098:	681b      	ldr	r3, [r3, #0]
 802609a:	697a      	ldr	r2, [r7, #20]
 802609c:	b2d2      	uxtb	r2, r2
 802609e:	4611      	mov	r1, r2
 80260a0:	4618      	mov	r0, r3
 80260a2:	f005 fb1c 	bl	802b6de <USB_HC_Halt>
}
 80260a6:	e2d8      	b.n	802665a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80260a8:	697b      	ldr	r3, [r7, #20]
 80260aa:	015a      	lsls	r2, r3, #5
 80260ac:	69bb      	ldr	r3, [r7, #24]
 80260ae:	4413      	add	r3, r2
 80260b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80260b4:	689b      	ldr	r3, [r3, #8]
 80260b6:	f003 0301 	and.w	r3, r3, #1
 80260ba:	2b01      	cmp	r3, #1
 80260bc:	d140      	bne.n	8026140 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80260be:	687a      	ldr	r2, [r7, #4]
 80260c0:	697b      	ldr	r3, [r7, #20]
 80260c2:	212c      	movs	r1, #44	; 0x2c
 80260c4:	fb01 f303 	mul.w	r3, r1, r3
 80260c8:	4413      	add	r3, r2
 80260ca:	335c      	adds	r3, #92	; 0x5c
 80260cc:	2200      	movs	r2, #0
 80260ce:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80260d0:	697b      	ldr	r3, [r7, #20]
 80260d2:	015a      	lsls	r2, r3, #5
 80260d4:	69bb      	ldr	r3, [r7, #24]
 80260d6:	4413      	add	r3, r2
 80260d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80260dc:	689b      	ldr	r3, [r3, #8]
 80260de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80260e2:	2b40      	cmp	r3, #64	; 0x40
 80260e4:	d111      	bne.n	802610a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80260e6:	687a      	ldr	r2, [r7, #4]
 80260e8:	697b      	ldr	r3, [r7, #20]
 80260ea:	212c      	movs	r1, #44	; 0x2c
 80260ec:	fb01 f303 	mul.w	r3, r1, r3
 80260f0:	4413      	add	r3, r2
 80260f2:	333d      	adds	r3, #61	; 0x3d
 80260f4:	2201      	movs	r2, #1
 80260f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80260f8:	697b      	ldr	r3, [r7, #20]
 80260fa:	015a      	lsls	r2, r3, #5
 80260fc:	69bb      	ldr	r3, [r7, #24]
 80260fe:	4413      	add	r3, r2
 8026100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026104:	461a      	mov	r2, r3
 8026106:	2340      	movs	r3, #64	; 0x40
 8026108:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 802610a:	697b      	ldr	r3, [r7, #20]
 802610c:	015a      	lsls	r2, r3, #5
 802610e:	69bb      	ldr	r3, [r7, #24]
 8026110:	4413      	add	r3, r2
 8026112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026116:	461a      	mov	r2, r3
 8026118:	2301      	movs	r3, #1
 802611a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 802611c:	687a      	ldr	r2, [r7, #4]
 802611e:	697b      	ldr	r3, [r7, #20]
 8026120:	212c      	movs	r1, #44	; 0x2c
 8026122:	fb01 f303 	mul.w	r3, r1, r3
 8026126:	4413      	add	r3, r2
 8026128:	3361      	adds	r3, #97	; 0x61
 802612a:	2201      	movs	r2, #1
 802612c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802612e:	687b      	ldr	r3, [r7, #4]
 8026130:	681b      	ldr	r3, [r3, #0]
 8026132:	697a      	ldr	r2, [r7, #20]
 8026134:	b2d2      	uxtb	r2, r2
 8026136:	4611      	mov	r1, r2
 8026138:	4618      	mov	r0, r3
 802613a:	f005 fad0 	bl	802b6de <USB_HC_Halt>
}
 802613e:	e28c      	b.n	802665a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8026140:	697b      	ldr	r3, [r7, #20]
 8026142:	015a      	lsls	r2, r3, #5
 8026144:	69bb      	ldr	r3, [r7, #24]
 8026146:	4413      	add	r3, r2
 8026148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802614c:	689b      	ldr	r3, [r3, #8]
 802614e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026152:	2b40      	cmp	r3, #64	; 0x40
 8026154:	d12c      	bne.n	80261b0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8026156:	687a      	ldr	r2, [r7, #4]
 8026158:	697b      	ldr	r3, [r7, #20]
 802615a:	212c      	movs	r1, #44	; 0x2c
 802615c:	fb01 f303 	mul.w	r3, r1, r3
 8026160:	4413      	add	r3, r2
 8026162:	3361      	adds	r3, #97	; 0x61
 8026164:	2204      	movs	r2, #4
 8026166:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8026168:	687a      	ldr	r2, [r7, #4]
 802616a:	697b      	ldr	r3, [r7, #20]
 802616c:	212c      	movs	r1, #44	; 0x2c
 802616e:	fb01 f303 	mul.w	r3, r1, r3
 8026172:	4413      	add	r3, r2
 8026174:	333d      	adds	r3, #61	; 0x3d
 8026176:	2201      	movs	r2, #1
 8026178:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 802617a:	687a      	ldr	r2, [r7, #4]
 802617c:	697b      	ldr	r3, [r7, #20]
 802617e:	212c      	movs	r1, #44	; 0x2c
 8026180:	fb01 f303 	mul.w	r3, r1, r3
 8026184:	4413      	add	r3, r2
 8026186:	335c      	adds	r3, #92	; 0x5c
 8026188:	2200      	movs	r2, #0
 802618a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802618c:	687b      	ldr	r3, [r7, #4]
 802618e:	681b      	ldr	r3, [r3, #0]
 8026190:	697a      	ldr	r2, [r7, #20]
 8026192:	b2d2      	uxtb	r2, r2
 8026194:	4611      	mov	r1, r2
 8026196:	4618      	mov	r0, r3
 8026198:	f005 faa1 	bl	802b6de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 802619c:	697b      	ldr	r3, [r7, #20]
 802619e:	015a      	lsls	r2, r3, #5
 80261a0:	69bb      	ldr	r3, [r7, #24]
 80261a2:	4413      	add	r3, r2
 80261a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80261a8:	461a      	mov	r2, r3
 80261aa:	2340      	movs	r3, #64	; 0x40
 80261ac:	6093      	str	r3, [r2, #8]
}
 80261ae:	e254      	b.n	802665a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80261b0:	697b      	ldr	r3, [r7, #20]
 80261b2:	015a      	lsls	r2, r3, #5
 80261b4:	69bb      	ldr	r3, [r7, #24]
 80261b6:	4413      	add	r3, r2
 80261b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80261bc:	689b      	ldr	r3, [r3, #8]
 80261be:	f003 0308 	and.w	r3, r3, #8
 80261c2:	2b08      	cmp	r3, #8
 80261c4:	d11a      	bne.n	80261fc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80261c6:	697b      	ldr	r3, [r7, #20]
 80261c8:	015a      	lsls	r2, r3, #5
 80261ca:	69bb      	ldr	r3, [r7, #24]
 80261cc:	4413      	add	r3, r2
 80261ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80261d2:	461a      	mov	r2, r3
 80261d4:	2308      	movs	r3, #8
 80261d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80261d8:	687a      	ldr	r2, [r7, #4]
 80261da:	697b      	ldr	r3, [r7, #20]
 80261dc:	212c      	movs	r1, #44	; 0x2c
 80261de:	fb01 f303 	mul.w	r3, r1, r3
 80261e2:	4413      	add	r3, r2
 80261e4:	3361      	adds	r3, #97	; 0x61
 80261e6:	2205      	movs	r2, #5
 80261e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80261ea:	687b      	ldr	r3, [r7, #4]
 80261ec:	681b      	ldr	r3, [r3, #0]
 80261ee:	697a      	ldr	r2, [r7, #20]
 80261f0:	b2d2      	uxtb	r2, r2
 80261f2:	4611      	mov	r1, r2
 80261f4:	4618      	mov	r0, r3
 80261f6:	f005 fa72 	bl	802b6de <USB_HC_Halt>
}
 80261fa:	e22e      	b.n	802665a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80261fc:	697b      	ldr	r3, [r7, #20]
 80261fe:	015a      	lsls	r2, r3, #5
 8026200:	69bb      	ldr	r3, [r7, #24]
 8026202:	4413      	add	r3, r2
 8026204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026208:	689b      	ldr	r3, [r3, #8]
 802620a:	f003 0310 	and.w	r3, r3, #16
 802620e:	2b10      	cmp	r3, #16
 8026210:	d140      	bne.n	8026294 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8026212:	687a      	ldr	r2, [r7, #4]
 8026214:	697b      	ldr	r3, [r7, #20]
 8026216:	212c      	movs	r1, #44	; 0x2c
 8026218:	fb01 f303 	mul.w	r3, r1, r3
 802621c:	4413      	add	r3, r2
 802621e:	335c      	adds	r3, #92	; 0x5c
 8026220:	2200      	movs	r2, #0
 8026222:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8026224:	687a      	ldr	r2, [r7, #4]
 8026226:	697b      	ldr	r3, [r7, #20]
 8026228:	212c      	movs	r1, #44	; 0x2c
 802622a:	fb01 f303 	mul.w	r3, r1, r3
 802622e:	4413      	add	r3, r2
 8026230:	3361      	adds	r3, #97	; 0x61
 8026232:	2203      	movs	r2, #3
 8026234:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8026236:	687a      	ldr	r2, [r7, #4]
 8026238:	697b      	ldr	r3, [r7, #20]
 802623a:	212c      	movs	r1, #44	; 0x2c
 802623c:	fb01 f303 	mul.w	r3, r1, r3
 8026240:	4413      	add	r3, r2
 8026242:	333d      	adds	r3, #61	; 0x3d
 8026244:	781b      	ldrb	r3, [r3, #0]
 8026246:	2b00      	cmp	r3, #0
 8026248:	d112      	bne.n	8026270 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 802624a:	687a      	ldr	r2, [r7, #4]
 802624c:	697b      	ldr	r3, [r7, #20]
 802624e:	212c      	movs	r1, #44	; 0x2c
 8026250:	fb01 f303 	mul.w	r3, r1, r3
 8026254:	4413      	add	r3, r2
 8026256:	333c      	adds	r3, #60	; 0x3c
 8026258:	781b      	ldrb	r3, [r3, #0]
 802625a:	2b00      	cmp	r3, #0
 802625c:	d108      	bne.n	8026270 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 802625e:	687a      	ldr	r2, [r7, #4]
 8026260:	697b      	ldr	r3, [r7, #20]
 8026262:	212c      	movs	r1, #44	; 0x2c
 8026264:	fb01 f303 	mul.w	r3, r1, r3
 8026268:	4413      	add	r3, r2
 802626a:	333d      	adds	r3, #61	; 0x3d
 802626c:	2201      	movs	r2, #1
 802626e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026270:	687b      	ldr	r3, [r7, #4]
 8026272:	681b      	ldr	r3, [r3, #0]
 8026274:	697a      	ldr	r2, [r7, #20]
 8026276:	b2d2      	uxtb	r2, r2
 8026278:	4611      	mov	r1, r2
 802627a:	4618      	mov	r0, r3
 802627c:	f005 fa2f 	bl	802b6de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8026280:	697b      	ldr	r3, [r7, #20]
 8026282:	015a      	lsls	r2, r3, #5
 8026284:	69bb      	ldr	r3, [r7, #24]
 8026286:	4413      	add	r3, r2
 8026288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802628c:	461a      	mov	r2, r3
 802628e:	2310      	movs	r3, #16
 8026290:	6093      	str	r3, [r2, #8]
}
 8026292:	e1e2      	b.n	802665a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8026294:	697b      	ldr	r3, [r7, #20]
 8026296:	015a      	lsls	r2, r3, #5
 8026298:	69bb      	ldr	r3, [r7, #24]
 802629a:	4413      	add	r3, r2
 802629c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80262a0:	689b      	ldr	r3, [r3, #8]
 80262a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80262a6:	2b80      	cmp	r3, #128	; 0x80
 80262a8:	d164      	bne.n	8026374 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80262aa:	687b      	ldr	r3, [r7, #4]
 80262ac:	691b      	ldr	r3, [r3, #16]
 80262ae:	2b00      	cmp	r3, #0
 80262b0:	d111      	bne.n	80262d6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80262b2:	687a      	ldr	r2, [r7, #4]
 80262b4:	697b      	ldr	r3, [r7, #20]
 80262b6:	212c      	movs	r1, #44	; 0x2c
 80262b8:	fb01 f303 	mul.w	r3, r1, r3
 80262bc:	4413      	add	r3, r2
 80262be:	3361      	adds	r3, #97	; 0x61
 80262c0:	2206      	movs	r2, #6
 80262c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80262c4:	687b      	ldr	r3, [r7, #4]
 80262c6:	681b      	ldr	r3, [r3, #0]
 80262c8:	697a      	ldr	r2, [r7, #20]
 80262ca:	b2d2      	uxtb	r2, r2
 80262cc:	4611      	mov	r1, r2
 80262ce:	4618      	mov	r0, r3
 80262d0:	f005 fa05 	bl	802b6de <USB_HC_Halt>
 80262d4:	e044      	b.n	8026360 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80262d6:	687a      	ldr	r2, [r7, #4]
 80262d8:	697b      	ldr	r3, [r7, #20]
 80262da:	212c      	movs	r1, #44	; 0x2c
 80262dc:	fb01 f303 	mul.w	r3, r1, r3
 80262e0:	4413      	add	r3, r2
 80262e2:	335c      	adds	r3, #92	; 0x5c
 80262e4:	681b      	ldr	r3, [r3, #0]
 80262e6:	1c5a      	adds	r2, r3, #1
 80262e8:	6879      	ldr	r1, [r7, #4]
 80262ea:	697b      	ldr	r3, [r7, #20]
 80262ec:	202c      	movs	r0, #44	; 0x2c
 80262ee:	fb00 f303 	mul.w	r3, r0, r3
 80262f2:	440b      	add	r3, r1
 80262f4:	335c      	adds	r3, #92	; 0x5c
 80262f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80262f8:	687a      	ldr	r2, [r7, #4]
 80262fa:	697b      	ldr	r3, [r7, #20]
 80262fc:	212c      	movs	r1, #44	; 0x2c
 80262fe:	fb01 f303 	mul.w	r3, r1, r3
 8026302:	4413      	add	r3, r2
 8026304:	335c      	adds	r3, #92	; 0x5c
 8026306:	681b      	ldr	r3, [r3, #0]
 8026308:	2b02      	cmp	r3, #2
 802630a:	d920      	bls.n	802634e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 802630c:	687a      	ldr	r2, [r7, #4]
 802630e:	697b      	ldr	r3, [r7, #20]
 8026310:	212c      	movs	r1, #44	; 0x2c
 8026312:	fb01 f303 	mul.w	r3, r1, r3
 8026316:	4413      	add	r3, r2
 8026318:	335c      	adds	r3, #92	; 0x5c
 802631a:	2200      	movs	r2, #0
 802631c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 802631e:	687a      	ldr	r2, [r7, #4]
 8026320:	697b      	ldr	r3, [r7, #20]
 8026322:	212c      	movs	r1, #44	; 0x2c
 8026324:	fb01 f303 	mul.w	r3, r1, r3
 8026328:	4413      	add	r3, r2
 802632a:	3360      	adds	r3, #96	; 0x60
 802632c:	2204      	movs	r2, #4
 802632e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8026330:	697b      	ldr	r3, [r7, #20]
 8026332:	b2d9      	uxtb	r1, r3
 8026334:	687a      	ldr	r2, [r7, #4]
 8026336:	697b      	ldr	r3, [r7, #20]
 8026338:	202c      	movs	r0, #44	; 0x2c
 802633a:	fb00 f303 	mul.w	r3, r0, r3
 802633e:	4413      	add	r3, r2
 8026340:	3360      	adds	r3, #96	; 0x60
 8026342:	781b      	ldrb	r3, [r3, #0]
 8026344:	461a      	mov	r2, r3
 8026346:	6878      	ldr	r0, [r7, #4]
 8026348:	f007 fc68 	bl	802dc1c <HAL_HCD_HC_NotifyURBChange_Callback>
 802634c:	e008      	b.n	8026360 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 802634e:	687a      	ldr	r2, [r7, #4]
 8026350:	697b      	ldr	r3, [r7, #20]
 8026352:	212c      	movs	r1, #44	; 0x2c
 8026354:	fb01 f303 	mul.w	r3, r1, r3
 8026358:	4413      	add	r3, r2
 802635a:	3360      	adds	r3, #96	; 0x60
 802635c:	2202      	movs	r2, #2
 802635e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8026360:	697b      	ldr	r3, [r7, #20]
 8026362:	015a      	lsls	r2, r3, #5
 8026364:	69bb      	ldr	r3, [r7, #24]
 8026366:	4413      	add	r3, r2
 8026368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802636c:	461a      	mov	r2, r3
 802636e:	2380      	movs	r3, #128	; 0x80
 8026370:	6093      	str	r3, [r2, #8]
}
 8026372:	e172      	b.n	802665a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8026374:	697b      	ldr	r3, [r7, #20]
 8026376:	015a      	lsls	r2, r3, #5
 8026378:	69bb      	ldr	r3, [r7, #24]
 802637a:	4413      	add	r3, r2
 802637c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026380:	689b      	ldr	r3, [r3, #8]
 8026382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8026386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802638a:	d11b      	bne.n	80263c4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 802638c:	687a      	ldr	r2, [r7, #4]
 802638e:	697b      	ldr	r3, [r7, #20]
 8026390:	212c      	movs	r1, #44	; 0x2c
 8026392:	fb01 f303 	mul.w	r3, r1, r3
 8026396:	4413      	add	r3, r2
 8026398:	3361      	adds	r3, #97	; 0x61
 802639a:	2208      	movs	r2, #8
 802639c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802639e:	687b      	ldr	r3, [r7, #4]
 80263a0:	681b      	ldr	r3, [r3, #0]
 80263a2:	697a      	ldr	r2, [r7, #20]
 80263a4:	b2d2      	uxtb	r2, r2
 80263a6:	4611      	mov	r1, r2
 80263a8:	4618      	mov	r0, r3
 80263aa:	f005 f998 	bl	802b6de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80263ae:	697b      	ldr	r3, [r7, #20]
 80263b0:	015a      	lsls	r2, r3, #5
 80263b2:	69bb      	ldr	r3, [r7, #24]
 80263b4:	4413      	add	r3, r2
 80263b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80263ba:	461a      	mov	r2, r3
 80263bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80263c0:	6093      	str	r3, [r2, #8]
}
 80263c2:	e14a      	b.n	802665a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80263c4:	697b      	ldr	r3, [r7, #20]
 80263c6:	015a      	lsls	r2, r3, #5
 80263c8:	69bb      	ldr	r3, [r7, #24]
 80263ca:	4413      	add	r3, r2
 80263cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80263d0:	689b      	ldr	r3, [r3, #8]
 80263d2:	f003 0302 	and.w	r3, r3, #2
 80263d6:	2b02      	cmp	r3, #2
 80263d8:	f040 813f 	bne.w	802665a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80263dc:	687a      	ldr	r2, [r7, #4]
 80263de:	697b      	ldr	r3, [r7, #20]
 80263e0:	212c      	movs	r1, #44	; 0x2c
 80263e2:	fb01 f303 	mul.w	r3, r1, r3
 80263e6:	4413      	add	r3, r2
 80263e8:	3361      	adds	r3, #97	; 0x61
 80263ea:	781b      	ldrb	r3, [r3, #0]
 80263ec:	2b01      	cmp	r3, #1
 80263ee:	d17d      	bne.n	80264ec <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80263f0:	687a      	ldr	r2, [r7, #4]
 80263f2:	697b      	ldr	r3, [r7, #20]
 80263f4:	212c      	movs	r1, #44	; 0x2c
 80263f6:	fb01 f303 	mul.w	r3, r1, r3
 80263fa:	4413      	add	r3, r2
 80263fc:	3360      	adds	r3, #96	; 0x60
 80263fe:	2201      	movs	r2, #1
 8026400:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8026402:	687a      	ldr	r2, [r7, #4]
 8026404:	697b      	ldr	r3, [r7, #20]
 8026406:	212c      	movs	r1, #44	; 0x2c
 8026408:	fb01 f303 	mul.w	r3, r1, r3
 802640c:	4413      	add	r3, r2
 802640e:	333f      	adds	r3, #63	; 0x3f
 8026410:	781b      	ldrb	r3, [r3, #0]
 8026412:	2b02      	cmp	r3, #2
 8026414:	d00a      	beq.n	802642c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8026416:	687a      	ldr	r2, [r7, #4]
 8026418:	697b      	ldr	r3, [r7, #20]
 802641a:	212c      	movs	r1, #44	; 0x2c
 802641c:	fb01 f303 	mul.w	r3, r1, r3
 8026420:	4413      	add	r3, r2
 8026422:	333f      	adds	r3, #63	; 0x3f
 8026424:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8026426:	2b03      	cmp	r3, #3
 8026428:	f040 8100 	bne.w	802662c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 802642c:	687b      	ldr	r3, [r7, #4]
 802642e:	691b      	ldr	r3, [r3, #16]
 8026430:	2b00      	cmp	r3, #0
 8026432:	d113      	bne.n	802645c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8026434:	687a      	ldr	r2, [r7, #4]
 8026436:	697b      	ldr	r3, [r7, #20]
 8026438:	212c      	movs	r1, #44	; 0x2c
 802643a:	fb01 f303 	mul.w	r3, r1, r3
 802643e:	4413      	add	r3, r2
 8026440:	3355      	adds	r3, #85	; 0x55
 8026442:	781b      	ldrb	r3, [r3, #0]
 8026444:	f083 0301 	eor.w	r3, r3, #1
 8026448:	b2d8      	uxtb	r0, r3
 802644a:	687a      	ldr	r2, [r7, #4]
 802644c:	697b      	ldr	r3, [r7, #20]
 802644e:	212c      	movs	r1, #44	; 0x2c
 8026450:	fb01 f303 	mul.w	r3, r1, r3
 8026454:	4413      	add	r3, r2
 8026456:	3355      	adds	r3, #85	; 0x55
 8026458:	4602      	mov	r2, r0
 802645a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 802645c:	687b      	ldr	r3, [r7, #4]
 802645e:	691b      	ldr	r3, [r3, #16]
 8026460:	2b01      	cmp	r3, #1
 8026462:	f040 80e3 	bne.w	802662c <HCD_HC_OUT_IRQHandler+0x69c>
 8026466:	687a      	ldr	r2, [r7, #4]
 8026468:	697b      	ldr	r3, [r7, #20]
 802646a:	212c      	movs	r1, #44	; 0x2c
 802646c:	fb01 f303 	mul.w	r3, r1, r3
 8026470:	4413      	add	r3, r2
 8026472:	334c      	adds	r3, #76	; 0x4c
 8026474:	681b      	ldr	r3, [r3, #0]
 8026476:	2b00      	cmp	r3, #0
 8026478:	f000 80d8 	beq.w	802662c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 802647c:	687a      	ldr	r2, [r7, #4]
 802647e:	697b      	ldr	r3, [r7, #20]
 8026480:	212c      	movs	r1, #44	; 0x2c
 8026482:	fb01 f303 	mul.w	r3, r1, r3
 8026486:	4413      	add	r3, r2
 8026488:	334c      	adds	r3, #76	; 0x4c
 802648a:	681b      	ldr	r3, [r3, #0]
 802648c:	6879      	ldr	r1, [r7, #4]
 802648e:	697a      	ldr	r2, [r7, #20]
 8026490:	202c      	movs	r0, #44	; 0x2c
 8026492:	fb00 f202 	mul.w	r2, r0, r2
 8026496:	440a      	add	r2, r1
 8026498:	3240      	adds	r2, #64	; 0x40
 802649a:	8812      	ldrh	r2, [r2, #0]
 802649c:	4413      	add	r3, r2
 802649e:	3b01      	subs	r3, #1
 80264a0:	6879      	ldr	r1, [r7, #4]
 80264a2:	697a      	ldr	r2, [r7, #20]
 80264a4:	202c      	movs	r0, #44	; 0x2c
 80264a6:	fb00 f202 	mul.w	r2, r0, r2
 80264aa:	440a      	add	r2, r1
 80264ac:	3240      	adds	r2, #64	; 0x40
 80264ae:	8812      	ldrh	r2, [r2, #0]
 80264b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80264b4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80264b6:	68fb      	ldr	r3, [r7, #12]
 80264b8:	f003 0301 	and.w	r3, r3, #1
 80264bc:	2b00      	cmp	r3, #0
 80264be:	f000 80b5 	beq.w	802662c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80264c2:	687a      	ldr	r2, [r7, #4]
 80264c4:	697b      	ldr	r3, [r7, #20]
 80264c6:	212c      	movs	r1, #44	; 0x2c
 80264c8:	fb01 f303 	mul.w	r3, r1, r3
 80264cc:	4413      	add	r3, r2
 80264ce:	3355      	adds	r3, #85	; 0x55
 80264d0:	781b      	ldrb	r3, [r3, #0]
 80264d2:	f083 0301 	eor.w	r3, r3, #1
 80264d6:	b2d8      	uxtb	r0, r3
 80264d8:	687a      	ldr	r2, [r7, #4]
 80264da:	697b      	ldr	r3, [r7, #20]
 80264dc:	212c      	movs	r1, #44	; 0x2c
 80264de:	fb01 f303 	mul.w	r3, r1, r3
 80264e2:	4413      	add	r3, r2
 80264e4:	3355      	adds	r3, #85	; 0x55
 80264e6:	4602      	mov	r2, r0
 80264e8:	701a      	strb	r2, [r3, #0]
 80264ea:	e09f      	b.n	802662c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80264ec:	687a      	ldr	r2, [r7, #4]
 80264ee:	697b      	ldr	r3, [r7, #20]
 80264f0:	212c      	movs	r1, #44	; 0x2c
 80264f2:	fb01 f303 	mul.w	r3, r1, r3
 80264f6:	4413      	add	r3, r2
 80264f8:	3361      	adds	r3, #97	; 0x61
 80264fa:	781b      	ldrb	r3, [r3, #0]
 80264fc:	2b03      	cmp	r3, #3
 80264fe:	d109      	bne.n	8026514 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8026500:	687a      	ldr	r2, [r7, #4]
 8026502:	697b      	ldr	r3, [r7, #20]
 8026504:	212c      	movs	r1, #44	; 0x2c
 8026506:	fb01 f303 	mul.w	r3, r1, r3
 802650a:	4413      	add	r3, r2
 802650c:	3360      	adds	r3, #96	; 0x60
 802650e:	2202      	movs	r2, #2
 8026510:	701a      	strb	r2, [r3, #0]
 8026512:	e08b      	b.n	802662c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8026514:	687a      	ldr	r2, [r7, #4]
 8026516:	697b      	ldr	r3, [r7, #20]
 8026518:	212c      	movs	r1, #44	; 0x2c
 802651a:	fb01 f303 	mul.w	r3, r1, r3
 802651e:	4413      	add	r3, r2
 8026520:	3361      	adds	r3, #97	; 0x61
 8026522:	781b      	ldrb	r3, [r3, #0]
 8026524:	2b04      	cmp	r3, #4
 8026526:	d109      	bne.n	802653c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8026528:	687a      	ldr	r2, [r7, #4]
 802652a:	697b      	ldr	r3, [r7, #20]
 802652c:	212c      	movs	r1, #44	; 0x2c
 802652e:	fb01 f303 	mul.w	r3, r1, r3
 8026532:	4413      	add	r3, r2
 8026534:	3360      	adds	r3, #96	; 0x60
 8026536:	2202      	movs	r2, #2
 8026538:	701a      	strb	r2, [r3, #0]
 802653a:	e077      	b.n	802662c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 802653c:	687a      	ldr	r2, [r7, #4]
 802653e:	697b      	ldr	r3, [r7, #20]
 8026540:	212c      	movs	r1, #44	; 0x2c
 8026542:	fb01 f303 	mul.w	r3, r1, r3
 8026546:	4413      	add	r3, r2
 8026548:	3361      	adds	r3, #97	; 0x61
 802654a:	781b      	ldrb	r3, [r3, #0]
 802654c:	2b05      	cmp	r3, #5
 802654e:	d109      	bne.n	8026564 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8026550:	687a      	ldr	r2, [r7, #4]
 8026552:	697b      	ldr	r3, [r7, #20]
 8026554:	212c      	movs	r1, #44	; 0x2c
 8026556:	fb01 f303 	mul.w	r3, r1, r3
 802655a:	4413      	add	r3, r2
 802655c:	3360      	adds	r3, #96	; 0x60
 802655e:	2205      	movs	r2, #5
 8026560:	701a      	strb	r2, [r3, #0]
 8026562:	e063      	b.n	802662c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8026564:	687a      	ldr	r2, [r7, #4]
 8026566:	697b      	ldr	r3, [r7, #20]
 8026568:	212c      	movs	r1, #44	; 0x2c
 802656a:	fb01 f303 	mul.w	r3, r1, r3
 802656e:	4413      	add	r3, r2
 8026570:	3361      	adds	r3, #97	; 0x61
 8026572:	781b      	ldrb	r3, [r3, #0]
 8026574:	2b06      	cmp	r3, #6
 8026576:	d009      	beq.n	802658c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8026578:	687a      	ldr	r2, [r7, #4]
 802657a:	697b      	ldr	r3, [r7, #20]
 802657c:	212c      	movs	r1, #44	; 0x2c
 802657e:	fb01 f303 	mul.w	r3, r1, r3
 8026582:	4413      	add	r3, r2
 8026584:	3361      	adds	r3, #97	; 0x61
 8026586:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8026588:	2b08      	cmp	r3, #8
 802658a:	d14f      	bne.n	802662c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 802658c:	687a      	ldr	r2, [r7, #4]
 802658e:	697b      	ldr	r3, [r7, #20]
 8026590:	212c      	movs	r1, #44	; 0x2c
 8026592:	fb01 f303 	mul.w	r3, r1, r3
 8026596:	4413      	add	r3, r2
 8026598:	335c      	adds	r3, #92	; 0x5c
 802659a:	681b      	ldr	r3, [r3, #0]
 802659c:	1c5a      	adds	r2, r3, #1
 802659e:	6879      	ldr	r1, [r7, #4]
 80265a0:	697b      	ldr	r3, [r7, #20]
 80265a2:	202c      	movs	r0, #44	; 0x2c
 80265a4:	fb00 f303 	mul.w	r3, r0, r3
 80265a8:	440b      	add	r3, r1
 80265aa:	335c      	adds	r3, #92	; 0x5c
 80265ac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80265ae:	687a      	ldr	r2, [r7, #4]
 80265b0:	697b      	ldr	r3, [r7, #20]
 80265b2:	212c      	movs	r1, #44	; 0x2c
 80265b4:	fb01 f303 	mul.w	r3, r1, r3
 80265b8:	4413      	add	r3, r2
 80265ba:	335c      	adds	r3, #92	; 0x5c
 80265bc:	681b      	ldr	r3, [r3, #0]
 80265be:	2b02      	cmp	r3, #2
 80265c0:	d912      	bls.n	80265e8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80265c2:	687a      	ldr	r2, [r7, #4]
 80265c4:	697b      	ldr	r3, [r7, #20]
 80265c6:	212c      	movs	r1, #44	; 0x2c
 80265c8:	fb01 f303 	mul.w	r3, r1, r3
 80265cc:	4413      	add	r3, r2
 80265ce:	335c      	adds	r3, #92	; 0x5c
 80265d0:	2200      	movs	r2, #0
 80265d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80265d4:	687a      	ldr	r2, [r7, #4]
 80265d6:	697b      	ldr	r3, [r7, #20]
 80265d8:	212c      	movs	r1, #44	; 0x2c
 80265da:	fb01 f303 	mul.w	r3, r1, r3
 80265de:	4413      	add	r3, r2
 80265e0:	3360      	adds	r3, #96	; 0x60
 80265e2:	2204      	movs	r2, #4
 80265e4:	701a      	strb	r2, [r3, #0]
 80265e6:	e021      	b.n	802662c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80265e8:	687a      	ldr	r2, [r7, #4]
 80265ea:	697b      	ldr	r3, [r7, #20]
 80265ec:	212c      	movs	r1, #44	; 0x2c
 80265ee:	fb01 f303 	mul.w	r3, r1, r3
 80265f2:	4413      	add	r3, r2
 80265f4:	3360      	adds	r3, #96	; 0x60
 80265f6:	2202      	movs	r2, #2
 80265f8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80265fa:	697b      	ldr	r3, [r7, #20]
 80265fc:	015a      	lsls	r2, r3, #5
 80265fe:	69bb      	ldr	r3, [r7, #24]
 8026600:	4413      	add	r3, r2
 8026602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026606:	681b      	ldr	r3, [r3, #0]
 8026608:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802660a:	693b      	ldr	r3, [r7, #16]
 802660c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8026610:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8026612:	693b      	ldr	r3, [r7, #16]
 8026614:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8026618:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 802661a:	697b      	ldr	r3, [r7, #20]
 802661c:	015a      	lsls	r2, r3, #5
 802661e:	69bb      	ldr	r3, [r7, #24]
 8026620:	4413      	add	r3, r2
 8026622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026626:	461a      	mov	r2, r3
 8026628:	693b      	ldr	r3, [r7, #16]
 802662a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 802662c:	697b      	ldr	r3, [r7, #20]
 802662e:	015a      	lsls	r2, r3, #5
 8026630:	69bb      	ldr	r3, [r7, #24]
 8026632:	4413      	add	r3, r2
 8026634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026638:	461a      	mov	r2, r3
 802663a:	2302      	movs	r3, #2
 802663c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 802663e:	697b      	ldr	r3, [r7, #20]
 8026640:	b2d9      	uxtb	r1, r3
 8026642:	687a      	ldr	r2, [r7, #4]
 8026644:	697b      	ldr	r3, [r7, #20]
 8026646:	202c      	movs	r0, #44	; 0x2c
 8026648:	fb00 f303 	mul.w	r3, r0, r3
 802664c:	4413      	add	r3, r2
 802664e:	3360      	adds	r3, #96	; 0x60
 8026650:	781b      	ldrb	r3, [r3, #0]
 8026652:	461a      	mov	r2, r3
 8026654:	6878      	ldr	r0, [r7, #4]
 8026656:	f007 fae1 	bl	802dc1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 802665a:	bf00      	nop
 802665c:	3720      	adds	r7, #32
 802665e:	46bd      	mov	sp, r7
 8026660:	bd80      	pop	{r7, pc}

08026662 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8026662:	b580      	push	{r7, lr}
 8026664:	b08a      	sub	sp, #40	; 0x28
 8026666:	af00      	add	r7, sp, #0
 8026668:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 802666a:	687b      	ldr	r3, [r7, #4]
 802666c:	681b      	ldr	r3, [r3, #0]
 802666e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8026670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026672:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8026674:	687b      	ldr	r3, [r7, #4]
 8026676:	681b      	ldr	r3, [r3, #0]
 8026678:	6a1b      	ldr	r3, [r3, #32]
 802667a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 802667c:	69fb      	ldr	r3, [r7, #28]
 802667e:	f003 030f 	and.w	r3, r3, #15
 8026682:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8026684:	69fb      	ldr	r3, [r7, #28]
 8026686:	0c5b      	lsrs	r3, r3, #17
 8026688:	f003 030f 	and.w	r3, r3, #15
 802668c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 802668e:	69fb      	ldr	r3, [r7, #28]
 8026690:	091b      	lsrs	r3, r3, #4
 8026692:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026696:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8026698:	697b      	ldr	r3, [r7, #20]
 802669a:	2b02      	cmp	r3, #2
 802669c:	d004      	beq.n	80266a8 <HCD_RXQLVL_IRQHandler+0x46>
 802669e:	697b      	ldr	r3, [r7, #20]
 80266a0:	2b05      	cmp	r3, #5
 80266a2:	f000 80a9 	beq.w	80267f8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80266a6:	e0aa      	b.n	80267fe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80266a8:	693b      	ldr	r3, [r7, #16]
 80266aa:	2b00      	cmp	r3, #0
 80266ac:	f000 80a6 	beq.w	80267fc <HCD_RXQLVL_IRQHandler+0x19a>
 80266b0:	687a      	ldr	r2, [r7, #4]
 80266b2:	69bb      	ldr	r3, [r7, #24]
 80266b4:	212c      	movs	r1, #44	; 0x2c
 80266b6:	fb01 f303 	mul.w	r3, r1, r3
 80266ba:	4413      	add	r3, r2
 80266bc:	3344      	adds	r3, #68	; 0x44
 80266be:	681b      	ldr	r3, [r3, #0]
 80266c0:	2b00      	cmp	r3, #0
 80266c2:	f000 809b 	beq.w	80267fc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80266c6:	687a      	ldr	r2, [r7, #4]
 80266c8:	69bb      	ldr	r3, [r7, #24]
 80266ca:	212c      	movs	r1, #44	; 0x2c
 80266cc:	fb01 f303 	mul.w	r3, r1, r3
 80266d0:	4413      	add	r3, r2
 80266d2:	3350      	adds	r3, #80	; 0x50
 80266d4:	681a      	ldr	r2, [r3, #0]
 80266d6:	693b      	ldr	r3, [r7, #16]
 80266d8:	441a      	add	r2, r3
 80266da:	6879      	ldr	r1, [r7, #4]
 80266dc:	69bb      	ldr	r3, [r7, #24]
 80266de:	202c      	movs	r0, #44	; 0x2c
 80266e0:	fb00 f303 	mul.w	r3, r0, r3
 80266e4:	440b      	add	r3, r1
 80266e6:	334c      	adds	r3, #76	; 0x4c
 80266e8:	681b      	ldr	r3, [r3, #0]
 80266ea:	429a      	cmp	r2, r3
 80266ec:	d87a      	bhi.n	80267e4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80266ee:	687b      	ldr	r3, [r7, #4]
 80266f0:	6818      	ldr	r0, [r3, #0]
 80266f2:	687a      	ldr	r2, [r7, #4]
 80266f4:	69bb      	ldr	r3, [r7, #24]
 80266f6:	212c      	movs	r1, #44	; 0x2c
 80266f8:	fb01 f303 	mul.w	r3, r1, r3
 80266fc:	4413      	add	r3, r2
 80266fe:	3344      	adds	r3, #68	; 0x44
 8026700:	681b      	ldr	r3, [r3, #0]
 8026702:	693a      	ldr	r2, [r7, #16]
 8026704:	b292      	uxth	r2, r2
 8026706:	4619      	mov	r1, r3
 8026708:	f004 fb40 	bl	802ad8c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 802670c:	687a      	ldr	r2, [r7, #4]
 802670e:	69bb      	ldr	r3, [r7, #24]
 8026710:	212c      	movs	r1, #44	; 0x2c
 8026712:	fb01 f303 	mul.w	r3, r1, r3
 8026716:	4413      	add	r3, r2
 8026718:	3344      	adds	r3, #68	; 0x44
 802671a:	681a      	ldr	r2, [r3, #0]
 802671c:	693b      	ldr	r3, [r7, #16]
 802671e:	441a      	add	r2, r3
 8026720:	6879      	ldr	r1, [r7, #4]
 8026722:	69bb      	ldr	r3, [r7, #24]
 8026724:	202c      	movs	r0, #44	; 0x2c
 8026726:	fb00 f303 	mul.w	r3, r0, r3
 802672a:	440b      	add	r3, r1
 802672c:	3344      	adds	r3, #68	; 0x44
 802672e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8026730:	687a      	ldr	r2, [r7, #4]
 8026732:	69bb      	ldr	r3, [r7, #24]
 8026734:	212c      	movs	r1, #44	; 0x2c
 8026736:	fb01 f303 	mul.w	r3, r1, r3
 802673a:	4413      	add	r3, r2
 802673c:	3350      	adds	r3, #80	; 0x50
 802673e:	681a      	ldr	r2, [r3, #0]
 8026740:	693b      	ldr	r3, [r7, #16]
 8026742:	441a      	add	r2, r3
 8026744:	6879      	ldr	r1, [r7, #4]
 8026746:	69bb      	ldr	r3, [r7, #24]
 8026748:	202c      	movs	r0, #44	; 0x2c
 802674a:	fb00 f303 	mul.w	r3, r0, r3
 802674e:	440b      	add	r3, r1
 8026750:	3350      	adds	r3, #80	; 0x50
 8026752:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8026754:	69bb      	ldr	r3, [r7, #24]
 8026756:	015a      	lsls	r2, r3, #5
 8026758:	6a3b      	ldr	r3, [r7, #32]
 802675a:	4413      	add	r3, r2
 802675c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026760:	691b      	ldr	r3, [r3, #16]
 8026762:	0cdb      	lsrs	r3, r3, #19
 8026764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8026768:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 802676a:	687a      	ldr	r2, [r7, #4]
 802676c:	69bb      	ldr	r3, [r7, #24]
 802676e:	212c      	movs	r1, #44	; 0x2c
 8026770:	fb01 f303 	mul.w	r3, r1, r3
 8026774:	4413      	add	r3, r2
 8026776:	3340      	adds	r3, #64	; 0x40
 8026778:	881b      	ldrh	r3, [r3, #0]
 802677a:	461a      	mov	r2, r3
 802677c:	693b      	ldr	r3, [r7, #16]
 802677e:	4293      	cmp	r3, r2
 8026780:	d13c      	bne.n	80267fc <HCD_RXQLVL_IRQHandler+0x19a>
 8026782:	68fb      	ldr	r3, [r7, #12]
 8026784:	2b00      	cmp	r3, #0
 8026786:	d039      	beq.n	80267fc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8026788:	69bb      	ldr	r3, [r7, #24]
 802678a:	015a      	lsls	r2, r3, #5
 802678c:	6a3b      	ldr	r3, [r7, #32]
 802678e:	4413      	add	r3, r2
 8026790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026794:	681b      	ldr	r3, [r3, #0]
 8026796:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8026798:	68bb      	ldr	r3, [r7, #8]
 802679a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802679e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80267a0:	68bb      	ldr	r3, [r7, #8]
 80267a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80267a6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80267a8:	69bb      	ldr	r3, [r7, #24]
 80267aa:	015a      	lsls	r2, r3, #5
 80267ac:	6a3b      	ldr	r3, [r7, #32]
 80267ae:	4413      	add	r3, r2
 80267b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80267b4:	461a      	mov	r2, r3
 80267b6:	68bb      	ldr	r3, [r7, #8]
 80267b8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80267ba:	687a      	ldr	r2, [r7, #4]
 80267bc:	69bb      	ldr	r3, [r7, #24]
 80267be:	212c      	movs	r1, #44	; 0x2c
 80267c0:	fb01 f303 	mul.w	r3, r1, r3
 80267c4:	4413      	add	r3, r2
 80267c6:	3354      	adds	r3, #84	; 0x54
 80267c8:	781b      	ldrb	r3, [r3, #0]
 80267ca:	f083 0301 	eor.w	r3, r3, #1
 80267ce:	b2d8      	uxtb	r0, r3
 80267d0:	687a      	ldr	r2, [r7, #4]
 80267d2:	69bb      	ldr	r3, [r7, #24]
 80267d4:	212c      	movs	r1, #44	; 0x2c
 80267d6:	fb01 f303 	mul.w	r3, r1, r3
 80267da:	4413      	add	r3, r2
 80267dc:	3354      	adds	r3, #84	; 0x54
 80267de:	4602      	mov	r2, r0
 80267e0:	701a      	strb	r2, [r3, #0]
      break;
 80267e2:	e00b      	b.n	80267fc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80267e4:	687a      	ldr	r2, [r7, #4]
 80267e6:	69bb      	ldr	r3, [r7, #24]
 80267e8:	212c      	movs	r1, #44	; 0x2c
 80267ea:	fb01 f303 	mul.w	r3, r1, r3
 80267ee:	4413      	add	r3, r2
 80267f0:	3360      	adds	r3, #96	; 0x60
 80267f2:	2204      	movs	r2, #4
 80267f4:	701a      	strb	r2, [r3, #0]
      break;
 80267f6:	e001      	b.n	80267fc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80267f8:	bf00      	nop
 80267fa:	e000      	b.n	80267fe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80267fc:	bf00      	nop
  }
}
 80267fe:	bf00      	nop
 8026800:	3728      	adds	r7, #40	; 0x28
 8026802:	46bd      	mov	sp, r7
 8026804:	bd80      	pop	{r7, pc}

08026806 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8026806:	b580      	push	{r7, lr}
 8026808:	b086      	sub	sp, #24
 802680a:	af00      	add	r7, sp, #0
 802680c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 802680e:	687b      	ldr	r3, [r7, #4]
 8026810:	681b      	ldr	r3, [r3, #0]
 8026812:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8026814:	697b      	ldr	r3, [r7, #20]
 8026816:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8026818:	693b      	ldr	r3, [r7, #16]
 802681a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802681e:	681b      	ldr	r3, [r3, #0]
 8026820:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8026822:	693b      	ldr	r3, [r7, #16]
 8026824:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8026828:	681b      	ldr	r3, [r3, #0]
 802682a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 802682c:	68bb      	ldr	r3, [r7, #8]
 802682e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8026832:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8026834:	68fb      	ldr	r3, [r7, #12]
 8026836:	f003 0302 	and.w	r3, r3, #2
 802683a:	2b02      	cmp	r3, #2
 802683c:	d10b      	bne.n	8026856 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 802683e:	68fb      	ldr	r3, [r7, #12]
 8026840:	f003 0301 	and.w	r3, r3, #1
 8026844:	2b01      	cmp	r3, #1
 8026846:	d102      	bne.n	802684e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8026848:	6878      	ldr	r0, [r7, #4]
 802684a:	f007 f9cb 	bl	802dbe4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 802684e:	68bb      	ldr	r3, [r7, #8]
 8026850:	f043 0302 	orr.w	r3, r3, #2
 8026854:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8026856:	68fb      	ldr	r3, [r7, #12]
 8026858:	f003 0308 	and.w	r3, r3, #8
 802685c:	2b08      	cmp	r3, #8
 802685e:	d132      	bne.n	80268c6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8026860:	68bb      	ldr	r3, [r7, #8]
 8026862:	f043 0308 	orr.w	r3, r3, #8
 8026866:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8026868:	68fb      	ldr	r3, [r7, #12]
 802686a:	f003 0304 	and.w	r3, r3, #4
 802686e:	2b04      	cmp	r3, #4
 8026870:	d126      	bne.n	80268c0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8026872:	687b      	ldr	r3, [r7, #4]
 8026874:	699b      	ldr	r3, [r3, #24]
 8026876:	2b02      	cmp	r3, #2
 8026878:	d113      	bne.n	80268a2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 802687a:	68fb      	ldr	r3, [r7, #12]
 802687c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8026880:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8026884:	d106      	bne.n	8026894 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8026886:	687b      	ldr	r3, [r7, #4]
 8026888:	681b      	ldr	r3, [r3, #0]
 802688a:	2102      	movs	r1, #2
 802688c:	4618      	mov	r0, r3
 802688e:	f004 fbeb 	bl	802b068 <USB_InitFSLSPClkSel>
 8026892:	e011      	b.n	80268b8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8026894:	687b      	ldr	r3, [r7, #4]
 8026896:	681b      	ldr	r3, [r3, #0]
 8026898:	2101      	movs	r1, #1
 802689a:	4618      	mov	r0, r3
 802689c:	f004 fbe4 	bl	802b068 <USB_InitFSLSPClkSel>
 80268a0:	e00a      	b.n	80268b8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80268a2:	687b      	ldr	r3, [r7, #4]
 80268a4:	68db      	ldr	r3, [r3, #12]
 80268a6:	2b01      	cmp	r3, #1
 80268a8:	d106      	bne.n	80268b8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80268aa:	693b      	ldr	r3, [r7, #16]
 80268ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80268b0:	461a      	mov	r2, r3
 80268b2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80268b6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80268b8:	6878      	ldr	r0, [r7, #4]
 80268ba:	f007 f9bd 	bl	802dc38 <HAL_HCD_PortEnabled_Callback>
 80268be:	e002      	b.n	80268c6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80268c0:	6878      	ldr	r0, [r7, #4]
 80268c2:	f007 f9c7 	bl	802dc54 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80268c6:	68fb      	ldr	r3, [r7, #12]
 80268c8:	f003 0320 	and.w	r3, r3, #32
 80268cc:	2b20      	cmp	r3, #32
 80268ce:	d103      	bne.n	80268d8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80268d0:	68bb      	ldr	r3, [r7, #8]
 80268d2:	f043 0320 	orr.w	r3, r3, #32
 80268d6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80268d8:	693b      	ldr	r3, [r7, #16]
 80268da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80268de:	461a      	mov	r2, r3
 80268e0:	68bb      	ldr	r3, [r7, #8]
 80268e2:	6013      	str	r3, [r2, #0]
}
 80268e4:	bf00      	nop
 80268e6:	3718      	adds	r7, #24
 80268e8:	46bd      	mov	sp, r7
 80268ea:	bd80      	pop	{r7, pc}

080268ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80268ec:	b580      	push	{r7, lr}
 80268ee:	b084      	sub	sp, #16
 80268f0:	af00      	add	r7, sp, #0
 80268f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80268f4:	687b      	ldr	r3, [r7, #4]
 80268f6:	2b00      	cmp	r3, #0
 80268f8:	d101      	bne.n	80268fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80268fa:	2301      	movs	r3, #1
 80268fc:	e12b      	b.n	8026b56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80268fe:	687b      	ldr	r3, [r7, #4]
 8026900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026904:	b2db      	uxtb	r3, r3
 8026906:	2b00      	cmp	r3, #0
 8026908:	d106      	bne.n	8026918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802690a:	687b      	ldr	r3, [r7, #4]
 802690c:	2200      	movs	r2, #0
 802690e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8026912:	6878      	ldr	r0, [r7, #4]
 8026914:	f7fa ff70 	bl	80217f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8026918:	687b      	ldr	r3, [r7, #4]
 802691a:	2224      	movs	r2, #36	; 0x24
 802691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8026920:	687b      	ldr	r3, [r7, #4]
 8026922:	681b      	ldr	r3, [r3, #0]
 8026924:	681a      	ldr	r2, [r3, #0]
 8026926:	687b      	ldr	r3, [r7, #4]
 8026928:	681b      	ldr	r3, [r3, #0]
 802692a:	f022 0201 	bic.w	r2, r2, #1
 802692e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8026930:	687b      	ldr	r3, [r7, #4]
 8026932:	681b      	ldr	r3, [r3, #0]
 8026934:	681a      	ldr	r2, [r3, #0]
 8026936:	687b      	ldr	r3, [r7, #4]
 8026938:	681b      	ldr	r3, [r3, #0]
 802693a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802693e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8026940:	687b      	ldr	r3, [r7, #4]
 8026942:	681b      	ldr	r3, [r3, #0]
 8026944:	681a      	ldr	r2, [r3, #0]
 8026946:	687b      	ldr	r3, [r7, #4]
 8026948:	681b      	ldr	r3, [r3, #0]
 802694a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802694e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8026950:	f001 fa0c 	bl	8027d6c <HAL_RCC_GetPCLK1Freq>
 8026954:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8026956:	687b      	ldr	r3, [r7, #4]
 8026958:	685b      	ldr	r3, [r3, #4]
 802695a:	4a81      	ldr	r2, [pc, #516]	; (8026b60 <HAL_I2C_Init+0x274>)
 802695c:	4293      	cmp	r3, r2
 802695e:	d807      	bhi.n	8026970 <HAL_I2C_Init+0x84>
 8026960:	68fb      	ldr	r3, [r7, #12]
 8026962:	4a80      	ldr	r2, [pc, #512]	; (8026b64 <HAL_I2C_Init+0x278>)
 8026964:	4293      	cmp	r3, r2
 8026966:	bf94      	ite	ls
 8026968:	2301      	movls	r3, #1
 802696a:	2300      	movhi	r3, #0
 802696c:	b2db      	uxtb	r3, r3
 802696e:	e006      	b.n	802697e <HAL_I2C_Init+0x92>
 8026970:	68fb      	ldr	r3, [r7, #12]
 8026972:	4a7d      	ldr	r2, [pc, #500]	; (8026b68 <HAL_I2C_Init+0x27c>)
 8026974:	4293      	cmp	r3, r2
 8026976:	bf94      	ite	ls
 8026978:	2301      	movls	r3, #1
 802697a:	2300      	movhi	r3, #0
 802697c:	b2db      	uxtb	r3, r3
 802697e:	2b00      	cmp	r3, #0
 8026980:	d001      	beq.n	8026986 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8026982:	2301      	movs	r3, #1
 8026984:	e0e7      	b.n	8026b56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8026986:	68fb      	ldr	r3, [r7, #12]
 8026988:	4a78      	ldr	r2, [pc, #480]	; (8026b6c <HAL_I2C_Init+0x280>)
 802698a:	fba2 2303 	umull	r2, r3, r2, r3
 802698e:	0c9b      	lsrs	r3, r3, #18
 8026990:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8026992:	687b      	ldr	r3, [r7, #4]
 8026994:	681b      	ldr	r3, [r3, #0]
 8026996:	685b      	ldr	r3, [r3, #4]
 8026998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 802699c:	687b      	ldr	r3, [r7, #4]
 802699e:	681b      	ldr	r3, [r3, #0]
 80269a0:	68ba      	ldr	r2, [r7, #8]
 80269a2:	430a      	orrs	r2, r1
 80269a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80269a6:	687b      	ldr	r3, [r7, #4]
 80269a8:	681b      	ldr	r3, [r3, #0]
 80269aa:	6a1b      	ldr	r3, [r3, #32]
 80269ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80269b0:	687b      	ldr	r3, [r7, #4]
 80269b2:	685b      	ldr	r3, [r3, #4]
 80269b4:	4a6a      	ldr	r2, [pc, #424]	; (8026b60 <HAL_I2C_Init+0x274>)
 80269b6:	4293      	cmp	r3, r2
 80269b8:	d802      	bhi.n	80269c0 <HAL_I2C_Init+0xd4>
 80269ba:	68bb      	ldr	r3, [r7, #8]
 80269bc:	3301      	adds	r3, #1
 80269be:	e009      	b.n	80269d4 <HAL_I2C_Init+0xe8>
 80269c0:	68bb      	ldr	r3, [r7, #8]
 80269c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80269c6:	fb02 f303 	mul.w	r3, r2, r3
 80269ca:	4a69      	ldr	r2, [pc, #420]	; (8026b70 <HAL_I2C_Init+0x284>)
 80269cc:	fba2 2303 	umull	r2, r3, r2, r3
 80269d0:	099b      	lsrs	r3, r3, #6
 80269d2:	3301      	adds	r3, #1
 80269d4:	687a      	ldr	r2, [r7, #4]
 80269d6:	6812      	ldr	r2, [r2, #0]
 80269d8:	430b      	orrs	r3, r1
 80269da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80269dc:	687b      	ldr	r3, [r7, #4]
 80269de:	681b      	ldr	r3, [r3, #0]
 80269e0:	69db      	ldr	r3, [r3, #28]
 80269e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80269e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80269ea:	687b      	ldr	r3, [r7, #4]
 80269ec:	685b      	ldr	r3, [r3, #4]
 80269ee:	495c      	ldr	r1, [pc, #368]	; (8026b60 <HAL_I2C_Init+0x274>)
 80269f0:	428b      	cmp	r3, r1
 80269f2:	d819      	bhi.n	8026a28 <HAL_I2C_Init+0x13c>
 80269f4:	68fb      	ldr	r3, [r7, #12]
 80269f6:	1e59      	subs	r1, r3, #1
 80269f8:	687b      	ldr	r3, [r7, #4]
 80269fa:	685b      	ldr	r3, [r3, #4]
 80269fc:	005b      	lsls	r3, r3, #1
 80269fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8026a02:	1c59      	adds	r1, r3, #1
 8026a04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8026a08:	400b      	ands	r3, r1
 8026a0a:	2b00      	cmp	r3, #0
 8026a0c:	d00a      	beq.n	8026a24 <HAL_I2C_Init+0x138>
 8026a0e:	68fb      	ldr	r3, [r7, #12]
 8026a10:	1e59      	subs	r1, r3, #1
 8026a12:	687b      	ldr	r3, [r7, #4]
 8026a14:	685b      	ldr	r3, [r3, #4]
 8026a16:	005b      	lsls	r3, r3, #1
 8026a18:	fbb1 f3f3 	udiv	r3, r1, r3
 8026a1c:	3301      	adds	r3, #1
 8026a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026a22:	e051      	b.n	8026ac8 <HAL_I2C_Init+0x1dc>
 8026a24:	2304      	movs	r3, #4
 8026a26:	e04f      	b.n	8026ac8 <HAL_I2C_Init+0x1dc>
 8026a28:	687b      	ldr	r3, [r7, #4]
 8026a2a:	689b      	ldr	r3, [r3, #8]
 8026a2c:	2b00      	cmp	r3, #0
 8026a2e:	d111      	bne.n	8026a54 <HAL_I2C_Init+0x168>
 8026a30:	68fb      	ldr	r3, [r7, #12]
 8026a32:	1e58      	subs	r0, r3, #1
 8026a34:	687b      	ldr	r3, [r7, #4]
 8026a36:	6859      	ldr	r1, [r3, #4]
 8026a38:	460b      	mov	r3, r1
 8026a3a:	005b      	lsls	r3, r3, #1
 8026a3c:	440b      	add	r3, r1
 8026a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8026a42:	3301      	adds	r3, #1
 8026a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026a48:	2b00      	cmp	r3, #0
 8026a4a:	bf0c      	ite	eq
 8026a4c:	2301      	moveq	r3, #1
 8026a4e:	2300      	movne	r3, #0
 8026a50:	b2db      	uxtb	r3, r3
 8026a52:	e012      	b.n	8026a7a <HAL_I2C_Init+0x18e>
 8026a54:	68fb      	ldr	r3, [r7, #12]
 8026a56:	1e58      	subs	r0, r3, #1
 8026a58:	687b      	ldr	r3, [r7, #4]
 8026a5a:	6859      	ldr	r1, [r3, #4]
 8026a5c:	460b      	mov	r3, r1
 8026a5e:	009b      	lsls	r3, r3, #2
 8026a60:	440b      	add	r3, r1
 8026a62:	0099      	lsls	r1, r3, #2
 8026a64:	440b      	add	r3, r1
 8026a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8026a6a:	3301      	adds	r3, #1
 8026a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026a70:	2b00      	cmp	r3, #0
 8026a72:	bf0c      	ite	eq
 8026a74:	2301      	moveq	r3, #1
 8026a76:	2300      	movne	r3, #0
 8026a78:	b2db      	uxtb	r3, r3
 8026a7a:	2b00      	cmp	r3, #0
 8026a7c:	d001      	beq.n	8026a82 <HAL_I2C_Init+0x196>
 8026a7e:	2301      	movs	r3, #1
 8026a80:	e022      	b.n	8026ac8 <HAL_I2C_Init+0x1dc>
 8026a82:	687b      	ldr	r3, [r7, #4]
 8026a84:	689b      	ldr	r3, [r3, #8]
 8026a86:	2b00      	cmp	r3, #0
 8026a88:	d10e      	bne.n	8026aa8 <HAL_I2C_Init+0x1bc>
 8026a8a:	68fb      	ldr	r3, [r7, #12]
 8026a8c:	1e58      	subs	r0, r3, #1
 8026a8e:	687b      	ldr	r3, [r7, #4]
 8026a90:	6859      	ldr	r1, [r3, #4]
 8026a92:	460b      	mov	r3, r1
 8026a94:	005b      	lsls	r3, r3, #1
 8026a96:	440b      	add	r3, r1
 8026a98:	fbb0 f3f3 	udiv	r3, r0, r3
 8026a9c:	3301      	adds	r3, #1
 8026a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8026aa6:	e00f      	b.n	8026ac8 <HAL_I2C_Init+0x1dc>
 8026aa8:	68fb      	ldr	r3, [r7, #12]
 8026aaa:	1e58      	subs	r0, r3, #1
 8026aac:	687b      	ldr	r3, [r7, #4]
 8026aae:	6859      	ldr	r1, [r3, #4]
 8026ab0:	460b      	mov	r3, r1
 8026ab2:	009b      	lsls	r3, r3, #2
 8026ab4:	440b      	add	r3, r1
 8026ab6:	0099      	lsls	r1, r3, #2
 8026ab8:	440b      	add	r3, r1
 8026aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8026abe:	3301      	adds	r3, #1
 8026ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8026ac8:	6879      	ldr	r1, [r7, #4]
 8026aca:	6809      	ldr	r1, [r1, #0]
 8026acc:	4313      	orrs	r3, r2
 8026ace:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8026ad0:	687b      	ldr	r3, [r7, #4]
 8026ad2:	681b      	ldr	r3, [r3, #0]
 8026ad4:	681b      	ldr	r3, [r3, #0]
 8026ad6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8026ada:	687b      	ldr	r3, [r7, #4]
 8026adc:	69da      	ldr	r2, [r3, #28]
 8026ade:	687b      	ldr	r3, [r7, #4]
 8026ae0:	6a1b      	ldr	r3, [r3, #32]
 8026ae2:	431a      	orrs	r2, r3
 8026ae4:	687b      	ldr	r3, [r7, #4]
 8026ae6:	681b      	ldr	r3, [r3, #0]
 8026ae8:	430a      	orrs	r2, r1
 8026aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8026aec:	687b      	ldr	r3, [r7, #4]
 8026aee:	681b      	ldr	r3, [r3, #0]
 8026af0:	689b      	ldr	r3, [r3, #8]
 8026af2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8026af6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8026afa:	687a      	ldr	r2, [r7, #4]
 8026afc:	6911      	ldr	r1, [r2, #16]
 8026afe:	687a      	ldr	r2, [r7, #4]
 8026b00:	68d2      	ldr	r2, [r2, #12]
 8026b02:	4311      	orrs	r1, r2
 8026b04:	687a      	ldr	r2, [r7, #4]
 8026b06:	6812      	ldr	r2, [r2, #0]
 8026b08:	430b      	orrs	r3, r1
 8026b0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8026b0c:	687b      	ldr	r3, [r7, #4]
 8026b0e:	681b      	ldr	r3, [r3, #0]
 8026b10:	68db      	ldr	r3, [r3, #12]
 8026b12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8026b16:	687b      	ldr	r3, [r7, #4]
 8026b18:	695a      	ldr	r2, [r3, #20]
 8026b1a:	687b      	ldr	r3, [r7, #4]
 8026b1c:	699b      	ldr	r3, [r3, #24]
 8026b1e:	431a      	orrs	r2, r3
 8026b20:	687b      	ldr	r3, [r7, #4]
 8026b22:	681b      	ldr	r3, [r3, #0]
 8026b24:	430a      	orrs	r2, r1
 8026b26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8026b28:	687b      	ldr	r3, [r7, #4]
 8026b2a:	681b      	ldr	r3, [r3, #0]
 8026b2c:	681a      	ldr	r2, [r3, #0]
 8026b2e:	687b      	ldr	r3, [r7, #4]
 8026b30:	681b      	ldr	r3, [r3, #0]
 8026b32:	f042 0201 	orr.w	r2, r2, #1
 8026b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8026b38:	687b      	ldr	r3, [r7, #4]
 8026b3a:	2200      	movs	r2, #0
 8026b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8026b3e:	687b      	ldr	r3, [r7, #4]
 8026b40:	2220      	movs	r2, #32
 8026b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8026b46:	687b      	ldr	r3, [r7, #4]
 8026b48:	2200      	movs	r2, #0
 8026b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8026b4c:	687b      	ldr	r3, [r7, #4]
 8026b4e:	2200      	movs	r2, #0
 8026b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8026b54:	2300      	movs	r3, #0
}
 8026b56:	4618      	mov	r0, r3
 8026b58:	3710      	adds	r7, #16
 8026b5a:	46bd      	mov	sp, r7
 8026b5c:	bd80      	pop	{r7, pc}
 8026b5e:	bf00      	nop
 8026b60:	000186a0 	.word	0x000186a0
 8026b64:	001e847f 	.word	0x001e847f
 8026b68:	003d08ff 	.word	0x003d08ff
 8026b6c:	431bde83 	.word	0x431bde83
 8026b70:	10624dd3 	.word	0x10624dd3

08026b74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8026b74:	b480      	push	{r7}
 8026b76:	b083      	sub	sp, #12
 8026b78:	af00      	add	r7, sp, #0
 8026b7a:	6078      	str	r0, [r7, #4]
 8026b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026b7e:	687b      	ldr	r3, [r7, #4]
 8026b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026b84:	b2db      	uxtb	r3, r3
 8026b86:	2b20      	cmp	r3, #32
 8026b88:	d129      	bne.n	8026bde <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8026b8a:	687b      	ldr	r3, [r7, #4]
 8026b8c:	2224      	movs	r2, #36	; 0x24
 8026b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026b92:	687b      	ldr	r3, [r7, #4]
 8026b94:	681b      	ldr	r3, [r3, #0]
 8026b96:	681a      	ldr	r2, [r3, #0]
 8026b98:	687b      	ldr	r3, [r7, #4]
 8026b9a:	681b      	ldr	r3, [r3, #0]
 8026b9c:	f022 0201 	bic.w	r2, r2, #1
 8026ba0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8026ba2:	687b      	ldr	r3, [r7, #4]
 8026ba4:	681b      	ldr	r3, [r3, #0]
 8026ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026ba8:	687b      	ldr	r3, [r7, #4]
 8026baa:	681b      	ldr	r3, [r3, #0]
 8026bac:	f022 0210 	bic.w	r2, r2, #16
 8026bb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8026bb2:	687b      	ldr	r3, [r7, #4]
 8026bb4:	681b      	ldr	r3, [r3, #0]
 8026bb6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8026bb8:	687b      	ldr	r3, [r7, #4]
 8026bba:	681b      	ldr	r3, [r3, #0]
 8026bbc:	683a      	ldr	r2, [r7, #0]
 8026bbe:	430a      	orrs	r2, r1
 8026bc0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8026bc2:	687b      	ldr	r3, [r7, #4]
 8026bc4:	681b      	ldr	r3, [r3, #0]
 8026bc6:	681a      	ldr	r2, [r3, #0]
 8026bc8:	687b      	ldr	r3, [r7, #4]
 8026bca:	681b      	ldr	r3, [r3, #0]
 8026bcc:	f042 0201 	orr.w	r2, r2, #1
 8026bd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026bd2:	687b      	ldr	r3, [r7, #4]
 8026bd4:	2220      	movs	r2, #32
 8026bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8026bda:	2300      	movs	r3, #0
 8026bdc:	e000      	b.n	8026be0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8026bde:	2302      	movs	r3, #2
  }
}
 8026be0:	4618      	mov	r0, r3
 8026be2:	370c      	adds	r7, #12
 8026be4:	46bd      	mov	sp, r7
 8026be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bea:	4770      	bx	lr

08026bec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8026bec:	b480      	push	{r7}
 8026bee:	b085      	sub	sp, #20
 8026bf0:	af00      	add	r7, sp, #0
 8026bf2:	6078      	str	r0, [r7, #4]
 8026bf4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8026bf6:	2300      	movs	r3, #0
 8026bf8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026bfa:	687b      	ldr	r3, [r7, #4]
 8026bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026c00:	b2db      	uxtb	r3, r3
 8026c02:	2b20      	cmp	r3, #32
 8026c04:	d12a      	bne.n	8026c5c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8026c06:	687b      	ldr	r3, [r7, #4]
 8026c08:	2224      	movs	r2, #36	; 0x24
 8026c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026c0e:	687b      	ldr	r3, [r7, #4]
 8026c10:	681b      	ldr	r3, [r3, #0]
 8026c12:	681a      	ldr	r2, [r3, #0]
 8026c14:	687b      	ldr	r3, [r7, #4]
 8026c16:	681b      	ldr	r3, [r3, #0]
 8026c18:	f022 0201 	bic.w	r2, r2, #1
 8026c1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8026c1e:	687b      	ldr	r3, [r7, #4]
 8026c20:	681b      	ldr	r3, [r3, #0]
 8026c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026c24:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8026c26:	89fb      	ldrh	r3, [r7, #14]
 8026c28:	f023 030f 	bic.w	r3, r3, #15
 8026c2c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8026c2e:	683b      	ldr	r3, [r7, #0]
 8026c30:	b29a      	uxth	r2, r3
 8026c32:	89fb      	ldrh	r3, [r7, #14]
 8026c34:	4313      	orrs	r3, r2
 8026c36:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8026c38:	687b      	ldr	r3, [r7, #4]
 8026c3a:	681b      	ldr	r3, [r3, #0]
 8026c3c:	89fa      	ldrh	r2, [r7, #14]
 8026c3e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8026c40:	687b      	ldr	r3, [r7, #4]
 8026c42:	681b      	ldr	r3, [r3, #0]
 8026c44:	681a      	ldr	r2, [r3, #0]
 8026c46:	687b      	ldr	r3, [r7, #4]
 8026c48:	681b      	ldr	r3, [r3, #0]
 8026c4a:	f042 0201 	orr.w	r2, r2, #1
 8026c4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026c50:	687b      	ldr	r3, [r7, #4]
 8026c52:	2220      	movs	r2, #32
 8026c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8026c58:	2300      	movs	r3, #0
 8026c5a:	e000      	b.n	8026c5e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8026c5c:	2302      	movs	r3, #2
  }
}
 8026c5e:	4618      	mov	r0, r3
 8026c60:	3714      	adds	r7, #20
 8026c62:	46bd      	mov	sp, r7
 8026c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c68:	4770      	bx	lr
	...

08026c6c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8026c6c:	b580      	push	{r7, lr}
 8026c6e:	b084      	sub	sp, #16
 8026c70:	af00      	add	r7, sp, #0
 8026c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8026c74:	687b      	ldr	r3, [r7, #4]
 8026c76:	2b00      	cmp	r3, #0
 8026c78:	d101      	bne.n	8026c7e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8026c7a:	2301      	movs	r3, #1
 8026c7c:	e0bf      	b.n	8026dfe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8026c7e:	687b      	ldr	r3, [r7, #4]
 8026c80:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8026c84:	b2db      	uxtb	r3, r3
 8026c86:	2b00      	cmp	r3, #0
 8026c88:	d106      	bne.n	8026c98 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8026c8a:	687b      	ldr	r3, [r7, #4]
 8026c8c:	2200      	movs	r2, #0
 8026c8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8026c92:	6878      	ldr	r0, [r7, #4]
 8026c94:	f7fa fe1a 	bl	80218cc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026c98:	687b      	ldr	r3, [r7, #4]
 8026c9a:	2202      	movs	r2, #2
 8026c9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8026ca0:	687b      	ldr	r3, [r7, #4]
 8026ca2:	681b      	ldr	r3, [r3, #0]
 8026ca4:	699a      	ldr	r2, [r3, #24]
 8026ca6:	687b      	ldr	r3, [r7, #4]
 8026ca8:	681b      	ldr	r3, [r3, #0]
 8026caa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8026cae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026cb0:	687b      	ldr	r3, [r7, #4]
 8026cb2:	681b      	ldr	r3, [r3, #0]
 8026cb4:	6999      	ldr	r1, [r3, #24]
 8026cb6:	687b      	ldr	r3, [r7, #4]
 8026cb8:	685a      	ldr	r2, [r3, #4]
 8026cba:	687b      	ldr	r3, [r7, #4]
 8026cbc:	689b      	ldr	r3, [r3, #8]
 8026cbe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8026cc0:	687b      	ldr	r3, [r7, #4]
 8026cc2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026cc4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8026cc6:	687b      	ldr	r3, [r7, #4]
 8026cc8:	691b      	ldr	r3, [r3, #16]
 8026cca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026ccc:	687b      	ldr	r3, [r7, #4]
 8026cce:	681b      	ldr	r3, [r3, #0]
 8026cd0:	430a      	orrs	r2, r1
 8026cd2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8026cd4:	687b      	ldr	r3, [r7, #4]
 8026cd6:	681b      	ldr	r3, [r3, #0]
 8026cd8:	6899      	ldr	r1, [r3, #8]
 8026cda:	687b      	ldr	r3, [r7, #4]
 8026cdc:	681a      	ldr	r2, [r3, #0]
 8026cde:	4b4a      	ldr	r3, [pc, #296]	; (8026e08 <HAL_LTDC_Init+0x19c>)
 8026ce0:	400b      	ands	r3, r1
 8026ce2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8026ce4:	687b      	ldr	r3, [r7, #4]
 8026ce6:	695b      	ldr	r3, [r3, #20]
 8026ce8:	041b      	lsls	r3, r3, #16
 8026cea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8026cec:	687b      	ldr	r3, [r7, #4]
 8026cee:	681b      	ldr	r3, [r3, #0]
 8026cf0:	6899      	ldr	r1, [r3, #8]
 8026cf2:	687b      	ldr	r3, [r7, #4]
 8026cf4:	699a      	ldr	r2, [r3, #24]
 8026cf6:	68fb      	ldr	r3, [r7, #12]
 8026cf8:	431a      	orrs	r2, r3
 8026cfa:	687b      	ldr	r3, [r7, #4]
 8026cfc:	681b      	ldr	r3, [r3, #0]
 8026cfe:	430a      	orrs	r2, r1
 8026d00:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8026d02:	687b      	ldr	r3, [r7, #4]
 8026d04:	681b      	ldr	r3, [r3, #0]
 8026d06:	68d9      	ldr	r1, [r3, #12]
 8026d08:	687b      	ldr	r3, [r7, #4]
 8026d0a:	681a      	ldr	r2, [r3, #0]
 8026d0c:	4b3e      	ldr	r3, [pc, #248]	; (8026e08 <HAL_LTDC_Init+0x19c>)
 8026d0e:	400b      	ands	r3, r1
 8026d10:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8026d12:	687b      	ldr	r3, [r7, #4]
 8026d14:	69db      	ldr	r3, [r3, #28]
 8026d16:	041b      	lsls	r3, r3, #16
 8026d18:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8026d1a:	687b      	ldr	r3, [r7, #4]
 8026d1c:	681b      	ldr	r3, [r3, #0]
 8026d1e:	68d9      	ldr	r1, [r3, #12]
 8026d20:	687b      	ldr	r3, [r7, #4]
 8026d22:	6a1a      	ldr	r2, [r3, #32]
 8026d24:	68fb      	ldr	r3, [r7, #12]
 8026d26:	431a      	orrs	r2, r3
 8026d28:	687b      	ldr	r3, [r7, #4]
 8026d2a:	681b      	ldr	r3, [r3, #0]
 8026d2c:	430a      	orrs	r2, r1
 8026d2e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8026d30:	687b      	ldr	r3, [r7, #4]
 8026d32:	681b      	ldr	r3, [r3, #0]
 8026d34:	6919      	ldr	r1, [r3, #16]
 8026d36:	687b      	ldr	r3, [r7, #4]
 8026d38:	681a      	ldr	r2, [r3, #0]
 8026d3a:	4b33      	ldr	r3, [pc, #204]	; (8026e08 <HAL_LTDC_Init+0x19c>)
 8026d3c:	400b      	ands	r3, r1
 8026d3e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8026d40:	687b      	ldr	r3, [r7, #4]
 8026d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026d44:	041b      	lsls	r3, r3, #16
 8026d46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8026d48:	687b      	ldr	r3, [r7, #4]
 8026d4a:	681b      	ldr	r3, [r3, #0]
 8026d4c:	6919      	ldr	r1, [r3, #16]
 8026d4e:	687b      	ldr	r3, [r7, #4]
 8026d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026d52:	68fb      	ldr	r3, [r7, #12]
 8026d54:	431a      	orrs	r2, r3
 8026d56:	687b      	ldr	r3, [r7, #4]
 8026d58:	681b      	ldr	r3, [r3, #0]
 8026d5a:	430a      	orrs	r2, r1
 8026d5c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8026d5e:	687b      	ldr	r3, [r7, #4]
 8026d60:	681b      	ldr	r3, [r3, #0]
 8026d62:	6959      	ldr	r1, [r3, #20]
 8026d64:	687b      	ldr	r3, [r7, #4]
 8026d66:	681a      	ldr	r2, [r3, #0]
 8026d68:	4b27      	ldr	r3, [pc, #156]	; (8026e08 <HAL_LTDC_Init+0x19c>)
 8026d6a:	400b      	ands	r3, r1
 8026d6c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8026d6e:	687b      	ldr	r3, [r7, #4]
 8026d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026d72:	041b      	lsls	r3, r3, #16
 8026d74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8026d76:	687b      	ldr	r3, [r7, #4]
 8026d78:	681b      	ldr	r3, [r3, #0]
 8026d7a:	6959      	ldr	r1, [r3, #20]
 8026d7c:	687b      	ldr	r3, [r7, #4]
 8026d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8026d80:	68fb      	ldr	r3, [r7, #12]
 8026d82:	431a      	orrs	r2, r3
 8026d84:	687b      	ldr	r3, [r7, #4]
 8026d86:	681b      	ldr	r3, [r3, #0]
 8026d88:	430a      	orrs	r2, r1
 8026d8a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8026d8c:	687b      	ldr	r3, [r7, #4]
 8026d8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8026d92:	021b      	lsls	r3, r3, #8
 8026d94:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8026d96:	687b      	ldr	r3, [r7, #4]
 8026d98:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8026d9c:	041b      	lsls	r3, r3, #16
 8026d9e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8026da0:	687b      	ldr	r3, [r7, #4]
 8026da2:	681b      	ldr	r3, [r3, #0]
 8026da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026da6:	687b      	ldr	r3, [r7, #4]
 8026da8:	681b      	ldr	r3, [r3, #0]
 8026daa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8026dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8026db0:	687b      	ldr	r3, [r7, #4]
 8026db2:	681b      	ldr	r3, [r3, #0]
 8026db4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026db6:	68ba      	ldr	r2, [r7, #8]
 8026db8:	68fb      	ldr	r3, [r7, #12]
 8026dba:	4313      	orrs	r3, r2
 8026dbc:	687a      	ldr	r2, [r7, #4]
 8026dbe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8026dc2:	431a      	orrs	r2, r3
 8026dc4:	687b      	ldr	r3, [r7, #4]
 8026dc6:	681b      	ldr	r3, [r3, #0]
 8026dc8:	430a      	orrs	r2, r1
 8026dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8026dcc:	687b      	ldr	r3, [r7, #4]
 8026dce:	681b      	ldr	r3, [r3, #0]
 8026dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026dd2:	687b      	ldr	r3, [r7, #4]
 8026dd4:	681b      	ldr	r3, [r3, #0]
 8026dd6:	f042 0206 	orr.w	r2, r2, #6
 8026dda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8026ddc:	687b      	ldr	r3, [r7, #4]
 8026dde:	681b      	ldr	r3, [r3, #0]
 8026de0:	699a      	ldr	r2, [r3, #24]
 8026de2:	687b      	ldr	r3, [r7, #4]
 8026de4:	681b      	ldr	r3, [r3, #0]
 8026de6:	f042 0201 	orr.w	r2, r2, #1
 8026dea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8026dec:	687b      	ldr	r3, [r7, #4]
 8026dee:	2200      	movs	r2, #0
 8026df0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026df4:	687b      	ldr	r3, [r7, #4]
 8026df6:	2201      	movs	r2, #1
 8026df8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8026dfc:	2300      	movs	r3, #0
}
 8026dfe:	4618      	mov	r0, r3
 8026e00:	3710      	adds	r7, #16
 8026e02:	46bd      	mov	sp, r7
 8026e04:	bd80      	pop	{r7, pc}
 8026e06:	bf00      	nop
 8026e08:	f000f800 	.word	0xf000f800

08026e0c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8026e0c:	b580      	push	{r7, lr}
 8026e0e:	b084      	sub	sp, #16
 8026e10:	af00      	add	r7, sp, #0
 8026e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8026e14:	687b      	ldr	r3, [r7, #4]
 8026e16:	681b      	ldr	r3, [r3, #0]
 8026e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026e1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8026e1c:	687b      	ldr	r3, [r7, #4]
 8026e1e:	681b      	ldr	r3, [r3, #0]
 8026e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026e22:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8026e24:	68fb      	ldr	r3, [r7, #12]
 8026e26:	f003 0304 	and.w	r3, r3, #4
 8026e2a:	2b00      	cmp	r3, #0
 8026e2c:	d023      	beq.n	8026e76 <HAL_LTDC_IRQHandler+0x6a>
 8026e2e:	68bb      	ldr	r3, [r7, #8]
 8026e30:	f003 0304 	and.w	r3, r3, #4
 8026e34:	2b00      	cmp	r3, #0
 8026e36:	d01e      	beq.n	8026e76 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8026e38:	687b      	ldr	r3, [r7, #4]
 8026e3a:	681b      	ldr	r3, [r3, #0]
 8026e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026e3e:	687b      	ldr	r3, [r7, #4]
 8026e40:	681b      	ldr	r3, [r3, #0]
 8026e42:	f022 0204 	bic.w	r2, r2, #4
 8026e46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8026e48:	687b      	ldr	r3, [r7, #4]
 8026e4a:	681b      	ldr	r3, [r3, #0]
 8026e4c:	2204      	movs	r2, #4
 8026e4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8026e50:	687b      	ldr	r3, [r7, #4]
 8026e52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8026e56:	f043 0201 	orr.w	r2, r3, #1
 8026e5a:	687b      	ldr	r3, [r7, #4]
 8026e5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8026e60:	687b      	ldr	r3, [r7, #4]
 8026e62:	2204      	movs	r2, #4
 8026e64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026e68:	687b      	ldr	r3, [r7, #4]
 8026e6a:	2200      	movs	r2, #0
 8026e6c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8026e70:	6878      	ldr	r0, [r7, #4]
 8026e72:	f000 f86f 	bl	8026f54 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8026e76:	68fb      	ldr	r3, [r7, #12]
 8026e78:	f003 0302 	and.w	r3, r3, #2
 8026e7c:	2b00      	cmp	r3, #0
 8026e7e:	d023      	beq.n	8026ec8 <HAL_LTDC_IRQHandler+0xbc>
 8026e80:	68bb      	ldr	r3, [r7, #8]
 8026e82:	f003 0302 	and.w	r3, r3, #2
 8026e86:	2b00      	cmp	r3, #0
 8026e88:	d01e      	beq.n	8026ec8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8026e8a:	687b      	ldr	r3, [r7, #4]
 8026e8c:	681b      	ldr	r3, [r3, #0]
 8026e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026e90:	687b      	ldr	r3, [r7, #4]
 8026e92:	681b      	ldr	r3, [r3, #0]
 8026e94:	f022 0202 	bic.w	r2, r2, #2
 8026e98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8026e9a:	687b      	ldr	r3, [r7, #4]
 8026e9c:	681b      	ldr	r3, [r3, #0]
 8026e9e:	2202      	movs	r2, #2
 8026ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8026ea2:	687b      	ldr	r3, [r7, #4]
 8026ea4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8026ea8:	f043 0202 	orr.w	r2, r3, #2
 8026eac:	687b      	ldr	r3, [r7, #4]
 8026eae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8026eb2:	687b      	ldr	r3, [r7, #4]
 8026eb4:	2204      	movs	r2, #4
 8026eb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026eba:	687b      	ldr	r3, [r7, #4]
 8026ebc:	2200      	movs	r2, #0
 8026ebe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8026ec2:	6878      	ldr	r0, [r7, #4]
 8026ec4:	f000 f846 	bl	8026f54 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8026ec8:	68fb      	ldr	r3, [r7, #12]
 8026eca:	f003 0301 	and.w	r3, r3, #1
 8026ece:	2b00      	cmp	r3, #0
 8026ed0:	d01b      	beq.n	8026f0a <HAL_LTDC_IRQHandler+0xfe>
 8026ed2:	68bb      	ldr	r3, [r7, #8]
 8026ed4:	f003 0301 	and.w	r3, r3, #1
 8026ed8:	2b00      	cmp	r3, #0
 8026eda:	d016      	beq.n	8026f0a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8026edc:	687b      	ldr	r3, [r7, #4]
 8026ede:	681b      	ldr	r3, [r3, #0]
 8026ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026ee2:	687b      	ldr	r3, [r7, #4]
 8026ee4:	681b      	ldr	r3, [r3, #0]
 8026ee6:	f022 0201 	bic.w	r2, r2, #1
 8026eea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8026eec:	687b      	ldr	r3, [r7, #4]
 8026eee:	681b      	ldr	r3, [r3, #0]
 8026ef0:	2201      	movs	r2, #1
 8026ef2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8026ef4:	687b      	ldr	r3, [r7, #4]
 8026ef6:	2201      	movs	r2, #1
 8026ef8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026efc:	687b      	ldr	r3, [r7, #4]
 8026efe:	2200      	movs	r2, #0
 8026f00:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8026f04:	6878      	ldr	r0, [r7, #4]
 8026f06:	f000 f82f 	bl	8026f68 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8026f0a:	68fb      	ldr	r3, [r7, #12]
 8026f0c:	f003 0308 	and.w	r3, r3, #8
 8026f10:	2b00      	cmp	r3, #0
 8026f12:	d01b      	beq.n	8026f4c <HAL_LTDC_IRQHandler+0x140>
 8026f14:	68bb      	ldr	r3, [r7, #8]
 8026f16:	f003 0308 	and.w	r3, r3, #8
 8026f1a:	2b00      	cmp	r3, #0
 8026f1c:	d016      	beq.n	8026f4c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8026f1e:	687b      	ldr	r3, [r7, #4]
 8026f20:	681b      	ldr	r3, [r3, #0]
 8026f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026f24:	687b      	ldr	r3, [r7, #4]
 8026f26:	681b      	ldr	r3, [r3, #0]
 8026f28:	f022 0208 	bic.w	r2, r2, #8
 8026f2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8026f2e:	687b      	ldr	r3, [r7, #4]
 8026f30:	681b      	ldr	r3, [r3, #0]
 8026f32:	2208      	movs	r2, #8
 8026f34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8026f36:	687b      	ldr	r3, [r7, #4]
 8026f38:	2201      	movs	r2, #1
 8026f3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026f3e:	687b      	ldr	r3, [r7, #4]
 8026f40:	2200      	movs	r2, #0
 8026f42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8026f46:	6878      	ldr	r0, [r7, #4]
 8026f48:	f000 f818 	bl	8026f7c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8026f4c:	bf00      	nop
 8026f4e:	3710      	adds	r7, #16
 8026f50:	46bd      	mov	sp, r7
 8026f52:	bd80      	pop	{r7, pc}

08026f54 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8026f54:	b480      	push	{r7}
 8026f56:	b083      	sub	sp, #12
 8026f58:	af00      	add	r7, sp, #0
 8026f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8026f5c:	bf00      	nop
 8026f5e:	370c      	adds	r7, #12
 8026f60:	46bd      	mov	sp, r7
 8026f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f66:	4770      	bx	lr

08026f68 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8026f68:	b480      	push	{r7}
 8026f6a:	b083      	sub	sp, #12
 8026f6c:	af00      	add	r7, sp, #0
 8026f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8026f70:	bf00      	nop
 8026f72:	370c      	adds	r7, #12
 8026f74:	46bd      	mov	sp, r7
 8026f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f7a:	4770      	bx	lr

08026f7c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8026f7c:	b480      	push	{r7}
 8026f7e:	b083      	sub	sp, #12
 8026f80:	af00      	add	r7, sp, #0
 8026f82:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8026f84:	bf00      	nop
 8026f86:	370c      	adds	r7, #12
 8026f88:	46bd      	mov	sp, r7
 8026f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f8e:	4770      	bx	lr

08026f90 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8026f90:	b5b0      	push	{r4, r5, r7, lr}
 8026f92:	b084      	sub	sp, #16
 8026f94:	af00      	add	r7, sp, #0
 8026f96:	60f8      	str	r0, [r7, #12]
 8026f98:	60b9      	str	r1, [r7, #8]
 8026f9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026f9c:	68fb      	ldr	r3, [r7, #12]
 8026f9e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026fa2:	2b01      	cmp	r3, #1
 8026fa4:	d101      	bne.n	8026faa <HAL_LTDC_ConfigLayer+0x1a>
 8026fa6:	2302      	movs	r3, #2
 8026fa8:	e02c      	b.n	8027004 <HAL_LTDC_ConfigLayer+0x74>
 8026faa:	68fb      	ldr	r3, [r7, #12]
 8026fac:	2201      	movs	r2, #1
 8026fae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026fb2:	68fb      	ldr	r3, [r7, #12]
 8026fb4:	2202      	movs	r2, #2
 8026fb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8026fba:	68fa      	ldr	r2, [r7, #12]
 8026fbc:	687b      	ldr	r3, [r7, #4]
 8026fbe:	2134      	movs	r1, #52	; 0x34
 8026fc0:	fb01 f303 	mul.w	r3, r1, r3
 8026fc4:	4413      	add	r3, r2
 8026fc6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8026fca:	68bb      	ldr	r3, [r7, #8]
 8026fcc:	4614      	mov	r4, r2
 8026fce:	461d      	mov	r5, r3
 8026fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026fdc:	682b      	ldr	r3, [r5, #0]
 8026fde:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8026fe0:	687a      	ldr	r2, [r7, #4]
 8026fe2:	68b9      	ldr	r1, [r7, #8]
 8026fe4:	68f8      	ldr	r0, [r7, #12]
 8026fe6:	f000 f8b9 	bl	802715c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026fea:	68fb      	ldr	r3, [r7, #12]
 8026fec:	681b      	ldr	r3, [r3, #0]
 8026fee:	2201      	movs	r2, #1
 8026ff0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8026ff2:	68fb      	ldr	r3, [r7, #12]
 8026ff4:	2201      	movs	r2, #1
 8026ff6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026ffa:	68fb      	ldr	r3, [r7, #12]
 8026ffc:	2200      	movs	r2, #0
 8026ffe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8027002:	2300      	movs	r3, #0
}
 8027004:	4618      	mov	r0, r3
 8027006:	3710      	adds	r7, #16
 8027008:	46bd      	mov	sp, r7
 802700a:	bdb0      	pop	{r4, r5, r7, pc}

0802700c <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 802700c:	b480      	push	{r7}
 802700e:	b085      	sub	sp, #20
 8027010:	af00      	add	r7, sp, #0
 8027012:	60f8      	str	r0, [r7, #12]
 8027014:	60b9      	str	r1, [r7, #8]
 8027016:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8027018:	68fb      	ldr	r3, [r7, #12]
 802701a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 802701e:	2b01      	cmp	r3, #1
 8027020:	d101      	bne.n	8027026 <HAL_LTDC_ConfigColorKeying+0x1a>
 8027022:	2302      	movs	r3, #2
 8027024:	e030      	b.n	8027088 <HAL_LTDC_ConfigColorKeying+0x7c>
 8027026:	68fb      	ldr	r3, [r7, #12]
 8027028:	2201      	movs	r2, #1
 802702a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 802702e:	68fb      	ldr	r3, [r7, #12]
 8027030:	2202      	movs	r2, #2
 8027032:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8027036:	68fb      	ldr	r3, [r7, #12]
 8027038:	681b      	ldr	r3, [r3, #0]
 802703a:	461a      	mov	r2, r3
 802703c:	687b      	ldr	r3, [r7, #4]
 802703e:	01db      	lsls	r3, r3, #7
 8027040:	4413      	add	r3, r2
 8027042:	3384      	adds	r3, #132	; 0x84
 8027044:	68db      	ldr	r3, [r3, #12]
 8027046:	68fa      	ldr	r2, [r7, #12]
 8027048:	6812      	ldr	r2, [r2, #0]
 802704a:	4611      	mov	r1, r2
 802704c:	687a      	ldr	r2, [r7, #4]
 802704e:	01d2      	lsls	r2, r2, #7
 8027050:	440a      	add	r2, r1
 8027052:	3284      	adds	r2, #132	; 0x84
 8027054:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8027058:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 802705a:	68fb      	ldr	r3, [r7, #12]
 802705c:	681b      	ldr	r3, [r3, #0]
 802705e:	461a      	mov	r2, r3
 8027060:	687b      	ldr	r3, [r7, #4]
 8027062:	01db      	lsls	r3, r3, #7
 8027064:	4413      	add	r3, r2
 8027066:	3384      	adds	r3, #132	; 0x84
 8027068:	461a      	mov	r2, r3
 802706a:	68bb      	ldr	r3, [r7, #8]
 802706c:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 802706e:	68fb      	ldr	r3, [r7, #12]
 8027070:	681b      	ldr	r3, [r3, #0]
 8027072:	2201      	movs	r2, #1
 8027074:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8027076:	68fb      	ldr	r3, [r7, #12]
 8027078:	2201      	movs	r2, #1
 802707a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 802707e:	68fb      	ldr	r3, [r7, #12]
 8027080:	2200      	movs	r2, #0
 8027082:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8027086:	2300      	movs	r3, #0
}
 8027088:	4618      	mov	r0, r3
 802708a:	3714      	adds	r7, #20
 802708c:	46bd      	mov	sp, r7
 802708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027092:	4770      	bx	lr

08027094 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8027094:	b480      	push	{r7}
 8027096:	b083      	sub	sp, #12
 8027098:	af00      	add	r7, sp, #0
 802709a:	6078      	str	r0, [r7, #4]
 802709c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 802709e:	687b      	ldr	r3, [r7, #4]
 80270a0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80270a4:	2b01      	cmp	r3, #1
 80270a6:	d101      	bne.n	80270ac <HAL_LTDC_EnableColorKeying+0x18>
 80270a8:	2302      	movs	r3, #2
 80270aa:	e026      	b.n	80270fa <HAL_LTDC_EnableColorKeying+0x66>
 80270ac:	687b      	ldr	r3, [r7, #4]
 80270ae:	2201      	movs	r2, #1
 80270b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80270b4:	687b      	ldr	r3, [r7, #4]
 80270b6:	2202      	movs	r2, #2
 80270b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80270bc:	687b      	ldr	r3, [r7, #4]
 80270be:	681b      	ldr	r3, [r3, #0]
 80270c0:	461a      	mov	r2, r3
 80270c2:	683b      	ldr	r3, [r7, #0]
 80270c4:	01db      	lsls	r3, r3, #7
 80270c6:	4413      	add	r3, r2
 80270c8:	3384      	adds	r3, #132	; 0x84
 80270ca:	681b      	ldr	r3, [r3, #0]
 80270cc:	687a      	ldr	r2, [r7, #4]
 80270ce:	6812      	ldr	r2, [r2, #0]
 80270d0:	4611      	mov	r1, r2
 80270d2:	683a      	ldr	r2, [r7, #0]
 80270d4:	01d2      	lsls	r2, r2, #7
 80270d6:	440a      	add	r2, r1
 80270d8:	3284      	adds	r2, #132	; 0x84
 80270da:	f043 0302 	orr.w	r3, r3, #2
 80270de:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80270e0:	687b      	ldr	r3, [r7, #4]
 80270e2:	681b      	ldr	r3, [r3, #0]
 80270e4:	2201      	movs	r2, #1
 80270e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80270e8:	687b      	ldr	r3, [r7, #4]
 80270ea:	2201      	movs	r2, #1
 80270ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80270f0:	687b      	ldr	r3, [r7, #4]
 80270f2:	2200      	movs	r2, #0
 80270f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80270f8:	2300      	movs	r3, #0
}
 80270fa:	4618      	mov	r0, r3
 80270fc:	370c      	adds	r7, #12
 80270fe:	46bd      	mov	sp, r7
 8027100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027104:	4770      	bx	lr
	...

08027108 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8027108:	b480      	push	{r7}
 802710a:	b083      	sub	sp, #12
 802710c:	af00      	add	r7, sp, #0
 802710e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8027110:	687b      	ldr	r3, [r7, #4]
 8027112:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8027116:	2b01      	cmp	r3, #1
 8027118:	d101      	bne.n	802711e <HAL_LTDC_EnableDither+0x16>
 802711a:	2302      	movs	r3, #2
 802711c:	e016      	b.n	802714c <HAL_LTDC_EnableDither+0x44>
 802711e:	687b      	ldr	r3, [r7, #4]
 8027120:	2201      	movs	r2, #1
 8027122:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8027126:	687b      	ldr	r3, [r7, #4]
 8027128:	2202      	movs	r2, #2
 802712a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 802712e:	4b0a      	ldr	r3, [pc, #40]	; (8027158 <HAL_LTDC_EnableDither+0x50>)
 8027130:	699b      	ldr	r3, [r3, #24]
 8027132:	4a09      	ldr	r2, [pc, #36]	; (8027158 <HAL_LTDC_EnableDither+0x50>)
 8027134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027138:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 802713a:	687b      	ldr	r3, [r7, #4]
 802713c:	2201      	movs	r2, #1
 802713e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8027142:	687b      	ldr	r3, [r7, #4]
 8027144:	2200      	movs	r2, #0
 8027146:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 802714a:	2300      	movs	r3, #0
}
 802714c:	4618      	mov	r0, r3
 802714e:	370c      	adds	r7, #12
 8027150:	46bd      	mov	sp, r7
 8027152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027156:	4770      	bx	lr
 8027158:	40016800 	.word	0x40016800

0802715c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 802715c:	b480      	push	{r7}
 802715e:	b089      	sub	sp, #36	; 0x24
 8027160:	af00      	add	r7, sp, #0
 8027162:	60f8      	str	r0, [r7, #12]
 8027164:	60b9      	str	r1, [r7, #8]
 8027166:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8027168:	68bb      	ldr	r3, [r7, #8]
 802716a:	685a      	ldr	r2, [r3, #4]
 802716c:	68fb      	ldr	r3, [r7, #12]
 802716e:	681b      	ldr	r3, [r3, #0]
 8027170:	68db      	ldr	r3, [r3, #12]
 8027172:	0c1b      	lsrs	r3, r3, #16
 8027174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027178:	4413      	add	r3, r2
 802717a:	041b      	lsls	r3, r3, #16
 802717c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 802717e:	68fb      	ldr	r3, [r7, #12]
 8027180:	681b      	ldr	r3, [r3, #0]
 8027182:	461a      	mov	r2, r3
 8027184:	687b      	ldr	r3, [r7, #4]
 8027186:	01db      	lsls	r3, r3, #7
 8027188:	4413      	add	r3, r2
 802718a:	3384      	adds	r3, #132	; 0x84
 802718c:	685b      	ldr	r3, [r3, #4]
 802718e:	68fa      	ldr	r2, [r7, #12]
 8027190:	6812      	ldr	r2, [r2, #0]
 8027192:	4611      	mov	r1, r2
 8027194:	687a      	ldr	r2, [r7, #4]
 8027196:	01d2      	lsls	r2, r2, #7
 8027198:	440a      	add	r2, r1
 802719a:	3284      	adds	r2, #132	; 0x84
 802719c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80271a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80271a2:	68bb      	ldr	r3, [r7, #8]
 80271a4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80271a6:	68fb      	ldr	r3, [r7, #12]
 80271a8:	681b      	ldr	r3, [r3, #0]
 80271aa:	68db      	ldr	r3, [r3, #12]
 80271ac:	0c1b      	lsrs	r3, r3, #16
 80271ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80271b2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80271b4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80271b6:	68fb      	ldr	r3, [r7, #12]
 80271b8:	681b      	ldr	r3, [r3, #0]
 80271ba:	4619      	mov	r1, r3
 80271bc:	687b      	ldr	r3, [r7, #4]
 80271be:	01db      	lsls	r3, r3, #7
 80271c0:	440b      	add	r3, r1
 80271c2:	3384      	adds	r3, #132	; 0x84
 80271c4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80271c6:	69fb      	ldr	r3, [r7, #28]
 80271c8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80271ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80271cc:	68bb      	ldr	r3, [r7, #8]
 80271ce:	68da      	ldr	r2, [r3, #12]
 80271d0:	68fb      	ldr	r3, [r7, #12]
 80271d2:	681b      	ldr	r3, [r3, #0]
 80271d4:	68db      	ldr	r3, [r3, #12]
 80271d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80271da:	4413      	add	r3, r2
 80271dc:	041b      	lsls	r3, r3, #16
 80271de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80271e0:	68fb      	ldr	r3, [r7, #12]
 80271e2:	681b      	ldr	r3, [r3, #0]
 80271e4:	461a      	mov	r2, r3
 80271e6:	687b      	ldr	r3, [r7, #4]
 80271e8:	01db      	lsls	r3, r3, #7
 80271ea:	4413      	add	r3, r2
 80271ec:	3384      	adds	r3, #132	; 0x84
 80271ee:	689b      	ldr	r3, [r3, #8]
 80271f0:	68fa      	ldr	r2, [r7, #12]
 80271f2:	6812      	ldr	r2, [r2, #0]
 80271f4:	4611      	mov	r1, r2
 80271f6:	687a      	ldr	r2, [r7, #4]
 80271f8:	01d2      	lsls	r2, r2, #7
 80271fa:	440a      	add	r2, r1
 80271fc:	3284      	adds	r2, #132	; 0x84
 80271fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8027202:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8027204:	68bb      	ldr	r3, [r7, #8]
 8027206:	689a      	ldr	r2, [r3, #8]
 8027208:	68fb      	ldr	r3, [r7, #12]
 802720a:	681b      	ldr	r3, [r3, #0]
 802720c:	68db      	ldr	r3, [r3, #12]
 802720e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8027212:	4413      	add	r3, r2
 8027214:	1c5a      	adds	r2, r3, #1
 8027216:	68fb      	ldr	r3, [r7, #12]
 8027218:	681b      	ldr	r3, [r3, #0]
 802721a:	4619      	mov	r1, r3
 802721c:	687b      	ldr	r3, [r7, #4]
 802721e:	01db      	lsls	r3, r3, #7
 8027220:	440b      	add	r3, r1
 8027222:	3384      	adds	r3, #132	; 0x84
 8027224:	4619      	mov	r1, r3
 8027226:	69fb      	ldr	r3, [r7, #28]
 8027228:	4313      	orrs	r3, r2
 802722a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 802722c:	68fb      	ldr	r3, [r7, #12]
 802722e:	681b      	ldr	r3, [r3, #0]
 8027230:	461a      	mov	r2, r3
 8027232:	687b      	ldr	r3, [r7, #4]
 8027234:	01db      	lsls	r3, r3, #7
 8027236:	4413      	add	r3, r2
 8027238:	3384      	adds	r3, #132	; 0x84
 802723a:	691b      	ldr	r3, [r3, #16]
 802723c:	68fa      	ldr	r2, [r7, #12]
 802723e:	6812      	ldr	r2, [r2, #0]
 8027240:	4611      	mov	r1, r2
 8027242:	687a      	ldr	r2, [r7, #4]
 8027244:	01d2      	lsls	r2, r2, #7
 8027246:	440a      	add	r2, r1
 8027248:	3284      	adds	r2, #132	; 0x84
 802724a:	f023 0307 	bic.w	r3, r3, #7
 802724e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8027250:	68fb      	ldr	r3, [r7, #12]
 8027252:	681b      	ldr	r3, [r3, #0]
 8027254:	461a      	mov	r2, r3
 8027256:	687b      	ldr	r3, [r7, #4]
 8027258:	01db      	lsls	r3, r3, #7
 802725a:	4413      	add	r3, r2
 802725c:	3384      	adds	r3, #132	; 0x84
 802725e:	461a      	mov	r2, r3
 8027260:	68bb      	ldr	r3, [r7, #8]
 8027262:	691b      	ldr	r3, [r3, #16]
 8027264:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8027266:	68bb      	ldr	r3, [r7, #8]
 8027268:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802726c:	021b      	lsls	r3, r3, #8
 802726e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8027270:	68bb      	ldr	r3, [r7, #8]
 8027272:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8027276:	041b      	lsls	r3, r3, #16
 8027278:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 802727a:	68bb      	ldr	r3, [r7, #8]
 802727c:	699b      	ldr	r3, [r3, #24]
 802727e:	061b      	lsls	r3, r3, #24
 8027280:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8027282:	68fb      	ldr	r3, [r7, #12]
 8027284:	681b      	ldr	r3, [r3, #0]
 8027286:	461a      	mov	r2, r3
 8027288:	687b      	ldr	r3, [r7, #4]
 802728a:	01db      	lsls	r3, r3, #7
 802728c:	4413      	add	r3, r2
 802728e:	3384      	adds	r3, #132	; 0x84
 8027290:	699b      	ldr	r3, [r3, #24]
 8027292:	68fb      	ldr	r3, [r7, #12]
 8027294:	681b      	ldr	r3, [r3, #0]
 8027296:	461a      	mov	r2, r3
 8027298:	687b      	ldr	r3, [r7, #4]
 802729a:	01db      	lsls	r3, r3, #7
 802729c:	4413      	add	r3, r2
 802729e:	3384      	adds	r3, #132	; 0x84
 80272a0:	461a      	mov	r2, r3
 80272a2:	2300      	movs	r3, #0
 80272a4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80272a6:	68bb      	ldr	r3, [r7, #8]
 80272a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80272ac:	461a      	mov	r2, r3
 80272ae:	69fb      	ldr	r3, [r7, #28]
 80272b0:	431a      	orrs	r2, r3
 80272b2:	69bb      	ldr	r3, [r7, #24]
 80272b4:	431a      	orrs	r2, r3
 80272b6:	68fb      	ldr	r3, [r7, #12]
 80272b8:	681b      	ldr	r3, [r3, #0]
 80272ba:	4619      	mov	r1, r3
 80272bc:	687b      	ldr	r3, [r7, #4]
 80272be:	01db      	lsls	r3, r3, #7
 80272c0:	440b      	add	r3, r1
 80272c2:	3384      	adds	r3, #132	; 0x84
 80272c4:	4619      	mov	r1, r3
 80272c6:	697b      	ldr	r3, [r7, #20]
 80272c8:	4313      	orrs	r3, r2
 80272ca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80272cc:	68fb      	ldr	r3, [r7, #12]
 80272ce:	681b      	ldr	r3, [r3, #0]
 80272d0:	461a      	mov	r2, r3
 80272d2:	687b      	ldr	r3, [r7, #4]
 80272d4:	01db      	lsls	r3, r3, #7
 80272d6:	4413      	add	r3, r2
 80272d8:	3384      	adds	r3, #132	; 0x84
 80272da:	695b      	ldr	r3, [r3, #20]
 80272dc:	68fa      	ldr	r2, [r7, #12]
 80272de:	6812      	ldr	r2, [r2, #0]
 80272e0:	4611      	mov	r1, r2
 80272e2:	687a      	ldr	r2, [r7, #4]
 80272e4:	01d2      	lsls	r2, r2, #7
 80272e6:	440a      	add	r2, r1
 80272e8:	3284      	adds	r2, #132	; 0x84
 80272ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80272ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80272f0:	68fb      	ldr	r3, [r7, #12]
 80272f2:	681b      	ldr	r3, [r3, #0]
 80272f4:	461a      	mov	r2, r3
 80272f6:	687b      	ldr	r3, [r7, #4]
 80272f8:	01db      	lsls	r3, r3, #7
 80272fa:	4413      	add	r3, r2
 80272fc:	3384      	adds	r3, #132	; 0x84
 80272fe:	461a      	mov	r2, r3
 8027300:	68bb      	ldr	r3, [r7, #8]
 8027302:	695b      	ldr	r3, [r3, #20]
 8027304:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8027306:	68fb      	ldr	r3, [r7, #12]
 8027308:	681b      	ldr	r3, [r3, #0]
 802730a:	461a      	mov	r2, r3
 802730c:	687b      	ldr	r3, [r7, #4]
 802730e:	01db      	lsls	r3, r3, #7
 8027310:	4413      	add	r3, r2
 8027312:	3384      	adds	r3, #132	; 0x84
 8027314:	69db      	ldr	r3, [r3, #28]
 8027316:	68fa      	ldr	r2, [r7, #12]
 8027318:	6812      	ldr	r2, [r2, #0]
 802731a:	4611      	mov	r1, r2
 802731c:	687a      	ldr	r2, [r7, #4]
 802731e:	01d2      	lsls	r2, r2, #7
 8027320:	440a      	add	r2, r1
 8027322:	3284      	adds	r2, #132	; 0x84
 8027324:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8027328:	f023 0307 	bic.w	r3, r3, #7
 802732c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 802732e:	68bb      	ldr	r3, [r7, #8]
 8027330:	69da      	ldr	r2, [r3, #28]
 8027332:	68bb      	ldr	r3, [r7, #8]
 8027334:	6a1b      	ldr	r3, [r3, #32]
 8027336:	68f9      	ldr	r1, [r7, #12]
 8027338:	6809      	ldr	r1, [r1, #0]
 802733a:	4608      	mov	r0, r1
 802733c:	6879      	ldr	r1, [r7, #4]
 802733e:	01c9      	lsls	r1, r1, #7
 8027340:	4401      	add	r1, r0
 8027342:	3184      	adds	r1, #132	; 0x84
 8027344:	4313      	orrs	r3, r2
 8027346:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8027348:	68fb      	ldr	r3, [r7, #12]
 802734a:	681b      	ldr	r3, [r3, #0]
 802734c:	461a      	mov	r2, r3
 802734e:	687b      	ldr	r3, [r7, #4]
 8027350:	01db      	lsls	r3, r3, #7
 8027352:	4413      	add	r3, r2
 8027354:	3384      	adds	r3, #132	; 0x84
 8027356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027358:	68fb      	ldr	r3, [r7, #12]
 802735a:	681b      	ldr	r3, [r3, #0]
 802735c:	461a      	mov	r2, r3
 802735e:	687b      	ldr	r3, [r7, #4]
 8027360:	01db      	lsls	r3, r3, #7
 8027362:	4413      	add	r3, r2
 8027364:	3384      	adds	r3, #132	; 0x84
 8027366:	461a      	mov	r2, r3
 8027368:	2300      	movs	r3, #0
 802736a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 802736c:	68fb      	ldr	r3, [r7, #12]
 802736e:	681b      	ldr	r3, [r3, #0]
 8027370:	461a      	mov	r2, r3
 8027372:	687b      	ldr	r3, [r7, #4]
 8027374:	01db      	lsls	r3, r3, #7
 8027376:	4413      	add	r3, r2
 8027378:	3384      	adds	r3, #132	; 0x84
 802737a:	461a      	mov	r2, r3
 802737c:	68bb      	ldr	r3, [r7, #8]
 802737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027380:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8027382:	68bb      	ldr	r3, [r7, #8]
 8027384:	691b      	ldr	r3, [r3, #16]
 8027386:	2b00      	cmp	r3, #0
 8027388:	d102      	bne.n	8027390 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 802738a:	2304      	movs	r3, #4
 802738c:	61fb      	str	r3, [r7, #28]
 802738e:	e01b      	b.n	80273c8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8027390:	68bb      	ldr	r3, [r7, #8]
 8027392:	691b      	ldr	r3, [r3, #16]
 8027394:	2b01      	cmp	r3, #1
 8027396:	d102      	bne.n	802739e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8027398:	2303      	movs	r3, #3
 802739a:	61fb      	str	r3, [r7, #28]
 802739c:	e014      	b.n	80273c8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 802739e:	68bb      	ldr	r3, [r7, #8]
 80273a0:	691b      	ldr	r3, [r3, #16]
 80273a2:	2b04      	cmp	r3, #4
 80273a4:	d00b      	beq.n	80273be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80273a6:	68bb      	ldr	r3, [r7, #8]
 80273a8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80273aa:	2b02      	cmp	r3, #2
 80273ac:	d007      	beq.n	80273be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80273ae:	68bb      	ldr	r3, [r7, #8]
 80273b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80273b2:	2b03      	cmp	r3, #3
 80273b4:	d003      	beq.n	80273be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80273b6:	68bb      	ldr	r3, [r7, #8]
 80273b8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80273ba:	2b07      	cmp	r3, #7
 80273bc:	d102      	bne.n	80273c4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80273be:	2302      	movs	r3, #2
 80273c0:	61fb      	str	r3, [r7, #28]
 80273c2:	e001      	b.n	80273c8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80273c4:	2301      	movs	r3, #1
 80273c6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80273c8:	68fb      	ldr	r3, [r7, #12]
 80273ca:	681b      	ldr	r3, [r3, #0]
 80273cc:	461a      	mov	r2, r3
 80273ce:	687b      	ldr	r3, [r7, #4]
 80273d0:	01db      	lsls	r3, r3, #7
 80273d2:	4413      	add	r3, r2
 80273d4:	3384      	adds	r3, #132	; 0x84
 80273d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80273d8:	68fa      	ldr	r2, [r7, #12]
 80273da:	6812      	ldr	r2, [r2, #0]
 80273dc:	4611      	mov	r1, r2
 80273de:	687a      	ldr	r2, [r7, #4]
 80273e0:	01d2      	lsls	r2, r2, #7
 80273e2:	440a      	add	r2, r1
 80273e4:	3284      	adds	r2, #132	; 0x84
 80273e6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80273ea:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80273ec:	68bb      	ldr	r3, [r7, #8]
 80273ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80273f0:	69fa      	ldr	r2, [r7, #28]
 80273f2:	fb02 f303 	mul.w	r3, r2, r3
 80273f6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80273f8:	68bb      	ldr	r3, [r7, #8]
 80273fa:	6859      	ldr	r1, [r3, #4]
 80273fc:	68bb      	ldr	r3, [r7, #8]
 80273fe:	681b      	ldr	r3, [r3, #0]
 8027400:	1acb      	subs	r3, r1, r3
 8027402:	69f9      	ldr	r1, [r7, #28]
 8027404:	fb01 f303 	mul.w	r3, r1, r3
 8027408:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 802740a:	68f9      	ldr	r1, [r7, #12]
 802740c:	6809      	ldr	r1, [r1, #0]
 802740e:	4608      	mov	r0, r1
 8027410:	6879      	ldr	r1, [r7, #4]
 8027412:	01c9      	lsls	r1, r1, #7
 8027414:	4401      	add	r1, r0
 8027416:	3184      	adds	r1, #132	; 0x84
 8027418:	4313      	orrs	r3, r2
 802741a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 802741c:	68fb      	ldr	r3, [r7, #12]
 802741e:	681b      	ldr	r3, [r3, #0]
 8027420:	461a      	mov	r2, r3
 8027422:	687b      	ldr	r3, [r7, #4]
 8027424:	01db      	lsls	r3, r3, #7
 8027426:	4413      	add	r3, r2
 8027428:	3384      	adds	r3, #132	; 0x84
 802742a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802742c:	68fa      	ldr	r2, [r7, #12]
 802742e:	6812      	ldr	r2, [r2, #0]
 8027430:	4611      	mov	r1, r2
 8027432:	687a      	ldr	r2, [r7, #4]
 8027434:	01d2      	lsls	r2, r2, #7
 8027436:	440a      	add	r2, r1
 8027438:	3284      	adds	r2, #132	; 0x84
 802743a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802743e:	f023 0307 	bic.w	r3, r3, #7
 8027442:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8027444:	68fb      	ldr	r3, [r7, #12]
 8027446:	681b      	ldr	r3, [r3, #0]
 8027448:	461a      	mov	r2, r3
 802744a:	687b      	ldr	r3, [r7, #4]
 802744c:	01db      	lsls	r3, r3, #7
 802744e:	4413      	add	r3, r2
 8027450:	3384      	adds	r3, #132	; 0x84
 8027452:	461a      	mov	r2, r3
 8027454:	68bb      	ldr	r3, [r7, #8]
 8027456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027458:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 802745a:	68fb      	ldr	r3, [r7, #12]
 802745c:	681b      	ldr	r3, [r3, #0]
 802745e:	461a      	mov	r2, r3
 8027460:	687b      	ldr	r3, [r7, #4]
 8027462:	01db      	lsls	r3, r3, #7
 8027464:	4413      	add	r3, r2
 8027466:	3384      	adds	r3, #132	; 0x84
 8027468:	681b      	ldr	r3, [r3, #0]
 802746a:	68fa      	ldr	r2, [r7, #12]
 802746c:	6812      	ldr	r2, [r2, #0]
 802746e:	4611      	mov	r1, r2
 8027470:	687a      	ldr	r2, [r7, #4]
 8027472:	01d2      	lsls	r2, r2, #7
 8027474:	440a      	add	r2, r1
 8027476:	3284      	adds	r2, #132	; 0x84
 8027478:	f043 0301 	orr.w	r3, r3, #1
 802747c:	6013      	str	r3, [r2, #0]
}
 802747e:	bf00      	nop
 8027480:	3724      	adds	r7, #36	; 0x24
 8027482:	46bd      	mov	sp, r7
 8027484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027488:	4770      	bx	lr
	...

0802748c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802748c:	b580      	push	{r7, lr}
 802748e:	b086      	sub	sp, #24
 8027490:	af00      	add	r7, sp, #0
 8027492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8027494:	687b      	ldr	r3, [r7, #4]
 8027496:	2b00      	cmp	r3, #0
 8027498:	d101      	bne.n	802749e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802749a:	2301      	movs	r3, #1
 802749c:	e267      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802749e:	687b      	ldr	r3, [r7, #4]
 80274a0:	681b      	ldr	r3, [r3, #0]
 80274a2:	f003 0301 	and.w	r3, r3, #1
 80274a6:	2b00      	cmp	r3, #0
 80274a8:	d075      	beq.n	8027596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80274aa:	4b88      	ldr	r3, [pc, #544]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 80274ac:	689b      	ldr	r3, [r3, #8]
 80274ae:	f003 030c 	and.w	r3, r3, #12
 80274b2:	2b04      	cmp	r3, #4
 80274b4:	d00c      	beq.n	80274d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80274b6:	4b85      	ldr	r3, [pc, #532]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 80274b8:	689b      	ldr	r3, [r3, #8]
 80274ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80274be:	2b08      	cmp	r3, #8
 80274c0:	d112      	bne.n	80274e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80274c2:	4b82      	ldr	r3, [pc, #520]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 80274c4:	685b      	ldr	r3, [r3, #4]
 80274c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80274ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80274ce:	d10b      	bne.n	80274e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80274d0:	4b7e      	ldr	r3, [pc, #504]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 80274d2:	681b      	ldr	r3, [r3, #0]
 80274d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80274d8:	2b00      	cmp	r3, #0
 80274da:	d05b      	beq.n	8027594 <HAL_RCC_OscConfig+0x108>
 80274dc:	687b      	ldr	r3, [r7, #4]
 80274de:	685b      	ldr	r3, [r3, #4]
 80274e0:	2b00      	cmp	r3, #0
 80274e2:	d157      	bne.n	8027594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80274e4:	2301      	movs	r3, #1
 80274e6:	e242      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80274e8:	687b      	ldr	r3, [r7, #4]
 80274ea:	685b      	ldr	r3, [r3, #4]
 80274ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80274f0:	d106      	bne.n	8027500 <HAL_RCC_OscConfig+0x74>
 80274f2:	4b76      	ldr	r3, [pc, #472]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 80274f4:	681b      	ldr	r3, [r3, #0]
 80274f6:	4a75      	ldr	r2, [pc, #468]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 80274f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80274fc:	6013      	str	r3, [r2, #0]
 80274fe:	e01d      	b.n	802753c <HAL_RCC_OscConfig+0xb0>
 8027500:	687b      	ldr	r3, [r7, #4]
 8027502:	685b      	ldr	r3, [r3, #4]
 8027504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8027508:	d10c      	bne.n	8027524 <HAL_RCC_OscConfig+0x98>
 802750a:	4b70      	ldr	r3, [pc, #448]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 802750c:	681b      	ldr	r3, [r3, #0]
 802750e:	4a6f      	ldr	r2, [pc, #444]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 8027510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8027514:	6013      	str	r3, [r2, #0]
 8027516:	4b6d      	ldr	r3, [pc, #436]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 8027518:	681b      	ldr	r3, [r3, #0]
 802751a:	4a6c      	ldr	r2, [pc, #432]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 802751c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027520:	6013      	str	r3, [r2, #0]
 8027522:	e00b      	b.n	802753c <HAL_RCC_OscConfig+0xb0>
 8027524:	4b69      	ldr	r3, [pc, #420]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 8027526:	681b      	ldr	r3, [r3, #0]
 8027528:	4a68      	ldr	r2, [pc, #416]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 802752a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802752e:	6013      	str	r3, [r2, #0]
 8027530:	4b66      	ldr	r3, [pc, #408]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 8027532:	681b      	ldr	r3, [r3, #0]
 8027534:	4a65      	ldr	r2, [pc, #404]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 8027536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802753a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802753c:	687b      	ldr	r3, [r7, #4]
 802753e:	685b      	ldr	r3, [r3, #4]
 8027540:	2b00      	cmp	r3, #0
 8027542:	d013      	beq.n	802756c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027544:	f7fc f8a2 	bl	802368c <HAL_GetTick>
 8027548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802754a:	e008      	b.n	802755e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802754c:	f7fc f89e 	bl	802368c <HAL_GetTick>
 8027550:	4602      	mov	r2, r0
 8027552:	693b      	ldr	r3, [r7, #16]
 8027554:	1ad3      	subs	r3, r2, r3
 8027556:	2b64      	cmp	r3, #100	; 0x64
 8027558:	d901      	bls.n	802755e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802755a:	2303      	movs	r3, #3
 802755c:	e207      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802755e:	4b5b      	ldr	r3, [pc, #364]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 8027560:	681b      	ldr	r3, [r3, #0]
 8027562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027566:	2b00      	cmp	r3, #0
 8027568:	d0f0      	beq.n	802754c <HAL_RCC_OscConfig+0xc0>
 802756a:	e014      	b.n	8027596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802756c:	f7fc f88e 	bl	802368c <HAL_GetTick>
 8027570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8027572:	e008      	b.n	8027586 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8027574:	f7fc f88a 	bl	802368c <HAL_GetTick>
 8027578:	4602      	mov	r2, r0
 802757a:	693b      	ldr	r3, [r7, #16]
 802757c:	1ad3      	subs	r3, r2, r3
 802757e:	2b64      	cmp	r3, #100	; 0x64
 8027580:	d901      	bls.n	8027586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8027582:	2303      	movs	r3, #3
 8027584:	e1f3      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8027586:	4b51      	ldr	r3, [pc, #324]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 8027588:	681b      	ldr	r3, [r3, #0]
 802758a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802758e:	2b00      	cmp	r3, #0
 8027590:	d1f0      	bne.n	8027574 <HAL_RCC_OscConfig+0xe8>
 8027592:	e000      	b.n	8027596 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8027596:	687b      	ldr	r3, [r7, #4]
 8027598:	681b      	ldr	r3, [r3, #0]
 802759a:	f003 0302 	and.w	r3, r3, #2
 802759e:	2b00      	cmp	r3, #0
 80275a0:	d063      	beq.n	802766a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80275a2:	4b4a      	ldr	r3, [pc, #296]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 80275a4:	689b      	ldr	r3, [r3, #8]
 80275a6:	f003 030c 	and.w	r3, r3, #12
 80275aa:	2b00      	cmp	r3, #0
 80275ac:	d00b      	beq.n	80275c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80275ae:	4b47      	ldr	r3, [pc, #284]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 80275b0:	689b      	ldr	r3, [r3, #8]
 80275b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80275b6:	2b08      	cmp	r3, #8
 80275b8:	d11c      	bne.n	80275f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80275ba:	4b44      	ldr	r3, [pc, #272]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 80275bc:	685b      	ldr	r3, [r3, #4]
 80275be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80275c2:	2b00      	cmp	r3, #0
 80275c4:	d116      	bne.n	80275f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80275c6:	4b41      	ldr	r3, [pc, #260]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 80275c8:	681b      	ldr	r3, [r3, #0]
 80275ca:	f003 0302 	and.w	r3, r3, #2
 80275ce:	2b00      	cmp	r3, #0
 80275d0:	d005      	beq.n	80275de <HAL_RCC_OscConfig+0x152>
 80275d2:	687b      	ldr	r3, [r7, #4]
 80275d4:	68db      	ldr	r3, [r3, #12]
 80275d6:	2b01      	cmp	r3, #1
 80275d8:	d001      	beq.n	80275de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80275da:	2301      	movs	r3, #1
 80275dc:	e1c7      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80275de:	4b3b      	ldr	r3, [pc, #236]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 80275e0:	681b      	ldr	r3, [r3, #0]
 80275e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80275e6:	687b      	ldr	r3, [r7, #4]
 80275e8:	691b      	ldr	r3, [r3, #16]
 80275ea:	00db      	lsls	r3, r3, #3
 80275ec:	4937      	ldr	r1, [pc, #220]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 80275ee:	4313      	orrs	r3, r2
 80275f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80275f2:	e03a      	b.n	802766a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80275f4:	687b      	ldr	r3, [r7, #4]
 80275f6:	68db      	ldr	r3, [r3, #12]
 80275f8:	2b00      	cmp	r3, #0
 80275fa:	d020      	beq.n	802763e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80275fc:	4b34      	ldr	r3, [pc, #208]	; (80276d0 <HAL_RCC_OscConfig+0x244>)
 80275fe:	2201      	movs	r2, #1
 8027600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027602:	f7fc f843 	bl	802368c <HAL_GetTick>
 8027606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027608:	e008      	b.n	802761c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802760a:	f7fc f83f 	bl	802368c <HAL_GetTick>
 802760e:	4602      	mov	r2, r0
 8027610:	693b      	ldr	r3, [r7, #16]
 8027612:	1ad3      	subs	r3, r2, r3
 8027614:	2b02      	cmp	r3, #2
 8027616:	d901      	bls.n	802761c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8027618:	2303      	movs	r3, #3
 802761a:	e1a8      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802761c:	4b2b      	ldr	r3, [pc, #172]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 802761e:	681b      	ldr	r3, [r3, #0]
 8027620:	f003 0302 	and.w	r3, r3, #2
 8027624:	2b00      	cmp	r3, #0
 8027626:	d0f0      	beq.n	802760a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8027628:	4b28      	ldr	r3, [pc, #160]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 802762a:	681b      	ldr	r3, [r3, #0]
 802762c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8027630:	687b      	ldr	r3, [r7, #4]
 8027632:	691b      	ldr	r3, [r3, #16]
 8027634:	00db      	lsls	r3, r3, #3
 8027636:	4925      	ldr	r1, [pc, #148]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 8027638:	4313      	orrs	r3, r2
 802763a:	600b      	str	r3, [r1, #0]
 802763c:	e015      	b.n	802766a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802763e:	4b24      	ldr	r3, [pc, #144]	; (80276d0 <HAL_RCC_OscConfig+0x244>)
 8027640:	2200      	movs	r2, #0
 8027642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027644:	f7fc f822 	bl	802368c <HAL_GetTick>
 8027648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802764a:	e008      	b.n	802765e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802764c:	f7fc f81e 	bl	802368c <HAL_GetTick>
 8027650:	4602      	mov	r2, r0
 8027652:	693b      	ldr	r3, [r7, #16]
 8027654:	1ad3      	subs	r3, r2, r3
 8027656:	2b02      	cmp	r3, #2
 8027658:	d901      	bls.n	802765e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802765a:	2303      	movs	r3, #3
 802765c:	e187      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802765e:	4b1b      	ldr	r3, [pc, #108]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 8027660:	681b      	ldr	r3, [r3, #0]
 8027662:	f003 0302 	and.w	r3, r3, #2
 8027666:	2b00      	cmp	r3, #0
 8027668:	d1f0      	bne.n	802764c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802766a:	687b      	ldr	r3, [r7, #4]
 802766c:	681b      	ldr	r3, [r3, #0]
 802766e:	f003 0308 	and.w	r3, r3, #8
 8027672:	2b00      	cmp	r3, #0
 8027674:	d036      	beq.n	80276e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8027676:	687b      	ldr	r3, [r7, #4]
 8027678:	695b      	ldr	r3, [r3, #20]
 802767a:	2b00      	cmp	r3, #0
 802767c:	d016      	beq.n	80276ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802767e:	4b15      	ldr	r3, [pc, #84]	; (80276d4 <HAL_RCC_OscConfig+0x248>)
 8027680:	2201      	movs	r2, #1
 8027682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027684:	f7fc f802 	bl	802368c <HAL_GetTick>
 8027688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802768a:	e008      	b.n	802769e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802768c:	f7fb fffe 	bl	802368c <HAL_GetTick>
 8027690:	4602      	mov	r2, r0
 8027692:	693b      	ldr	r3, [r7, #16]
 8027694:	1ad3      	subs	r3, r2, r3
 8027696:	2b02      	cmp	r3, #2
 8027698:	d901      	bls.n	802769e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802769a:	2303      	movs	r3, #3
 802769c:	e167      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802769e:	4b0b      	ldr	r3, [pc, #44]	; (80276cc <HAL_RCC_OscConfig+0x240>)
 80276a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80276a2:	f003 0302 	and.w	r3, r3, #2
 80276a6:	2b00      	cmp	r3, #0
 80276a8:	d0f0      	beq.n	802768c <HAL_RCC_OscConfig+0x200>
 80276aa:	e01b      	b.n	80276e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80276ac:	4b09      	ldr	r3, [pc, #36]	; (80276d4 <HAL_RCC_OscConfig+0x248>)
 80276ae:	2200      	movs	r2, #0
 80276b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80276b2:	f7fb ffeb 	bl	802368c <HAL_GetTick>
 80276b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80276b8:	e00e      	b.n	80276d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80276ba:	f7fb ffe7 	bl	802368c <HAL_GetTick>
 80276be:	4602      	mov	r2, r0
 80276c0:	693b      	ldr	r3, [r7, #16]
 80276c2:	1ad3      	subs	r3, r2, r3
 80276c4:	2b02      	cmp	r3, #2
 80276c6:	d907      	bls.n	80276d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80276c8:	2303      	movs	r3, #3
 80276ca:	e150      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
 80276cc:	40023800 	.word	0x40023800
 80276d0:	42470000 	.word	0x42470000
 80276d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80276d8:	4b88      	ldr	r3, [pc, #544]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 80276da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80276dc:	f003 0302 	and.w	r3, r3, #2
 80276e0:	2b00      	cmp	r3, #0
 80276e2:	d1ea      	bne.n	80276ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80276e4:	687b      	ldr	r3, [r7, #4]
 80276e6:	681b      	ldr	r3, [r3, #0]
 80276e8:	f003 0304 	and.w	r3, r3, #4
 80276ec:	2b00      	cmp	r3, #0
 80276ee:	f000 8097 	beq.w	8027820 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80276f2:	2300      	movs	r3, #0
 80276f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80276f6:	4b81      	ldr	r3, [pc, #516]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 80276f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80276fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80276fe:	2b00      	cmp	r3, #0
 8027700:	d10f      	bne.n	8027722 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8027702:	2300      	movs	r3, #0
 8027704:	60bb      	str	r3, [r7, #8]
 8027706:	4b7d      	ldr	r3, [pc, #500]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 8027708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802770a:	4a7c      	ldr	r2, [pc, #496]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 802770c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027710:	6413      	str	r3, [r2, #64]	; 0x40
 8027712:	4b7a      	ldr	r3, [pc, #488]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 8027714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802771a:	60bb      	str	r3, [r7, #8]
 802771c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802771e:	2301      	movs	r3, #1
 8027720:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8027722:	4b77      	ldr	r3, [pc, #476]	; (8027900 <HAL_RCC_OscConfig+0x474>)
 8027724:	681b      	ldr	r3, [r3, #0]
 8027726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802772a:	2b00      	cmp	r3, #0
 802772c:	d118      	bne.n	8027760 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802772e:	4b74      	ldr	r3, [pc, #464]	; (8027900 <HAL_RCC_OscConfig+0x474>)
 8027730:	681b      	ldr	r3, [r3, #0]
 8027732:	4a73      	ldr	r2, [pc, #460]	; (8027900 <HAL_RCC_OscConfig+0x474>)
 8027734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802773a:	f7fb ffa7 	bl	802368c <HAL_GetTick>
 802773e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8027740:	e008      	b.n	8027754 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8027742:	f7fb ffa3 	bl	802368c <HAL_GetTick>
 8027746:	4602      	mov	r2, r0
 8027748:	693b      	ldr	r3, [r7, #16]
 802774a:	1ad3      	subs	r3, r2, r3
 802774c:	2b02      	cmp	r3, #2
 802774e:	d901      	bls.n	8027754 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8027750:	2303      	movs	r3, #3
 8027752:	e10c      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8027754:	4b6a      	ldr	r3, [pc, #424]	; (8027900 <HAL_RCC_OscConfig+0x474>)
 8027756:	681b      	ldr	r3, [r3, #0]
 8027758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802775c:	2b00      	cmp	r3, #0
 802775e:	d0f0      	beq.n	8027742 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8027760:	687b      	ldr	r3, [r7, #4]
 8027762:	689b      	ldr	r3, [r3, #8]
 8027764:	2b01      	cmp	r3, #1
 8027766:	d106      	bne.n	8027776 <HAL_RCC_OscConfig+0x2ea>
 8027768:	4b64      	ldr	r3, [pc, #400]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 802776a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802776c:	4a63      	ldr	r2, [pc, #396]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 802776e:	f043 0301 	orr.w	r3, r3, #1
 8027772:	6713      	str	r3, [r2, #112]	; 0x70
 8027774:	e01c      	b.n	80277b0 <HAL_RCC_OscConfig+0x324>
 8027776:	687b      	ldr	r3, [r7, #4]
 8027778:	689b      	ldr	r3, [r3, #8]
 802777a:	2b05      	cmp	r3, #5
 802777c:	d10c      	bne.n	8027798 <HAL_RCC_OscConfig+0x30c>
 802777e:	4b5f      	ldr	r3, [pc, #380]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 8027780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027782:	4a5e      	ldr	r2, [pc, #376]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 8027784:	f043 0304 	orr.w	r3, r3, #4
 8027788:	6713      	str	r3, [r2, #112]	; 0x70
 802778a:	4b5c      	ldr	r3, [pc, #368]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 802778c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802778e:	4a5b      	ldr	r2, [pc, #364]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 8027790:	f043 0301 	orr.w	r3, r3, #1
 8027794:	6713      	str	r3, [r2, #112]	; 0x70
 8027796:	e00b      	b.n	80277b0 <HAL_RCC_OscConfig+0x324>
 8027798:	4b58      	ldr	r3, [pc, #352]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 802779a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802779c:	4a57      	ldr	r2, [pc, #348]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 802779e:	f023 0301 	bic.w	r3, r3, #1
 80277a2:	6713      	str	r3, [r2, #112]	; 0x70
 80277a4:	4b55      	ldr	r3, [pc, #340]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 80277a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80277a8:	4a54      	ldr	r2, [pc, #336]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 80277aa:	f023 0304 	bic.w	r3, r3, #4
 80277ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80277b0:	687b      	ldr	r3, [r7, #4]
 80277b2:	689b      	ldr	r3, [r3, #8]
 80277b4:	2b00      	cmp	r3, #0
 80277b6:	d015      	beq.n	80277e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80277b8:	f7fb ff68 	bl	802368c <HAL_GetTick>
 80277bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80277be:	e00a      	b.n	80277d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80277c0:	f7fb ff64 	bl	802368c <HAL_GetTick>
 80277c4:	4602      	mov	r2, r0
 80277c6:	693b      	ldr	r3, [r7, #16]
 80277c8:	1ad3      	subs	r3, r2, r3
 80277ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80277ce:	4293      	cmp	r3, r2
 80277d0:	d901      	bls.n	80277d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80277d2:	2303      	movs	r3, #3
 80277d4:	e0cb      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80277d6:	4b49      	ldr	r3, [pc, #292]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 80277d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80277da:	f003 0302 	and.w	r3, r3, #2
 80277de:	2b00      	cmp	r3, #0
 80277e0:	d0ee      	beq.n	80277c0 <HAL_RCC_OscConfig+0x334>
 80277e2:	e014      	b.n	802780e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80277e4:	f7fb ff52 	bl	802368c <HAL_GetTick>
 80277e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80277ea:	e00a      	b.n	8027802 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80277ec:	f7fb ff4e 	bl	802368c <HAL_GetTick>
 80277f0:	4602      	mov	r2, r0
 80277f2:	693b      	ldr	r3, [r7, #16]
 80277f4:	1ad3      	subs	r3, r2, r3
 80277f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80277fa:	4293      	cmp	r3, r2
 80277fc:	d901      	bls.n	8027802 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80277fe:	2303      	movs	r3, #3
 8027800:	e0b5      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8027802:	4b3e      	ldr	r3, [pc, #248]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 8027804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027806:	f003 0302 	and.w	r3, r3, #2
 802780a:	2b00      	cmp	r3, #0
 802780c:	d1ee      	bne.n	80277ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802780e:	7dfb      	ldrb	r3, [r7, #23]
 8027810:	2b01      	cmp	r3, #1
 8027812:	d105      	bne.n	8027820 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8027814:	4b39      	ldr	r3, [pc, #228]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 8027816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027818:	4a38      	ldr	r2, [pc, #224]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 802781a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802781e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8027820:	687b      	ldr	r3, [r7, #4]
 8027822:	699b      	ldr	r3, [r3, #24]
 8027824:	2b00      	cmp	r3, #0
 8027826:	f000 80a1 	beq.w	802796c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802782a:	4b34      	ldr	r3, [pc, #208]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 802782c:	689b      	ldr	r3, [r3, #8]
 802782e:	f003 030c 	and.w	r3, r3, #12
 8027832:	2b08      	cmp	r3, #8
 8027834:	d05c      	beq.n	80278f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8027836:	687b      	ldr	r3, [r7, #4]
 8027838:	699b      	ldr	r3, [r3, #24]
 802783a:	2b02      	cmp	r3, #2
 802783c:	d141      	bne.n	80278c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802783e:	4b31      	ldr	r3, [pc, #196]	; (8027904 <HAL_RCC_OscConfig+0x478>)
 8027840:	2200      	movs	r2, #0
 8027842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027844:	f7fb ff22 	bl	802368c <HAL_GetTick>
 8027848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802784a:	e008      	b.n	802785e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802784c:	f7fb ff1e 	bl	802368c <HAL_GetTick>
 8027850:	4602      	mov	r2, r0
 8027852:	693b      	ldr	r3, [r7, #16]
 8027854:	1ad3      	subs	r3, r2, r3
 8027856:	2b02      	cmp	r3, #2
 8027858:	d901      	bls.n	802785e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 802785a:	2303      	movs	r3, #3
 802785c:	e087      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802785e:	4b27      	ldr	r3, [pc, #156]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 8027860:	681b      	ldr	r3, [r3, #0]
 8027862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027866:	2b00      	cmp	r3, #0
 8027868:	d1f0      	bne.n	802784c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802786a:	687b      	ldr	r3, [r7, #4]
 802786c:	69da      	ldr	r2, [r3, #28]
 802786e:	687b      	ldr	r3, [r7, #4]
 8027870:	6a1b      	ldr	r3, [r3, #32]
 8027872:	431a      	orrs	r2, r3
 8027874:	687b      	ldr	r3, [r7, #4]
 8027876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027878:	019b      	lsls	r3, r3, #6
 802787a:	431a      	orrs	r2, r3
 802787c:	687b      	ldr	r3, [r7, #4]
 802787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027880:	085b      	lsrs	r3, r3, #1
 8027882:	3b01      	subs	r3, #1
 8027884:	041b      	lsls	r3, r3, #16
 8027886:	431a      	orrs	r2, r3
 8027888:	687b      	ldr	r3, [r7, #4]
 802788a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802788c:	061b      	lsls	r3, r3, #24
 802788e:	491b      	ldr	r1, [pc, #108]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 8027890:	4313      	orrs	r3, r2
 8027892:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8027894:	4b1b      	ldr	r3, [pc, #108]	; (8027904 <HAL_RCC_OscConfig+0x478>)
 8027896:	2201      	movs	r2, #1
 8027898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802789a:	f7fb fef7 	bl	802368c <HAL_GetTick>
 802789e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80278a0:	e008      	b.n	80278b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80278a2:	f7fb fef3 	bl	802368c <HAL_GetTick>
 80278a6:	4602      	mov	r2, r0
 80278a8:	693b      	ldr	r3, [r7, #16]
 80278aa:	1ad3      	subs	r3, r2, r3
 80278ac:	2b02      	cmp	r3, #2
 80278ae:	d901      	bls.n	80278b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80278b0:	2303      	movs	r3, #3
 80278b2:	e05c      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80278b4:	4b11      	ldr	r3, [pc, #68]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 80278b6:	681b      	ldr	r3, [r3, #0]
 80278b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80278bc:	2b00      	cmp	r3, #0
 80278be:	d0f0      	beq.n	80278a2 <HAL_RCC_OscConfig+0x416>
 80278c0:	e054      	b.n	802796c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80278c2:	4b10      	ldr	r3, [pc, #64]	; (8027904 <HAL_RCC_OscConfig+0x478>)
 80278c4:	2200      	movs	r2, #0
 80278c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80278c8:	f7fb fee0 	bl	802368c <HAL_GetTick>
 80278cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80278ce:	e008      	b.n	80278e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80278d0:	f7fb fedc 	bl	802368c <HAL_GetTick>
 80278d4:	4602      	mov	r2, r0
 80278d6:	693b      	ldr	r3, [r7, #16]
 80278d8:	1ad3      	subs	r3, r2, r3
 80278da:	2b02      	cmp	r3, #2
 80278dc:	d901      	bls.n	80278e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80278de:	2303      	movs	r3, #3
 80278e0:	e045      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80278e2:	4b06      	ldr	r3, [pc, #24]	; (80278fc <HAL_RCC_OscConfig+0x470>)
 80278e4:	681b      	ldr	r3, [r3, #0]
 80278e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80278ea:	2b00      	cmp	r3, #0
 80278ec:	d1f0      	bne.n	80278d0 <HAL_RCC_OscConfig+0x444>
 80278ee:	e03d      	b.n	802796c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80278f0:	687b      	ldr	r3, [r7, #4]
 80278f2:	699b      	ldr	r3, [r3, #24]
 80278f4:	2b01      	cmp	r3, #1
 80278f6:	d107      	bne.n	8027908 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80278f8:	2301      	movs	r3, #1
 80278fa:	e038      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
 80278fc:	40023800 	.word	0x40023800
 8027900:	40007000 	.word	0x40007000
 8027904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8027908:	4b1b      	ldr	r3, [pc, #108]	; (8027978 <HAL_RCC_OscConfig+0x4ec>)
 802790a:	685b      	ldr	r3, [r3, #4]
 802790c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802790e:	687b      	ldr	r3, [r7, #4]
 8027910:	699b      	ldr	r3, [r3, #24]
 8027912:	2b01      	cmp	r3, #1
 8027914:	d028      	beq.n	8027968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8027916:	68fb      	ldr	r3, [r7, #12]
 8027918:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 802791c:	687b      	ldr	r3, [r7, #4]
 802791e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8027920:	429a      	cmp	r2, r3
 8027922:	d121      	bne.n	8027968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8027924:	68fb      	ldr	r3, [r7, #12]
 8027926:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 802792a:	687b      	ldr	r3, [r7, #4]
 802792c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802792e:	429a      	cmp	r2, r3
 8027930:	d11a      	bne.n	8027968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8027932:	68fa      	ldr	r2, [r7, #12]
 8027934:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8027938:	4013      	ands	r3, r2
 802793a:	687a      	ldr	r2, [r7, #4]
 802793c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802793e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8027940:	4293      	cmp	r3, r2
 8027942:	d111      	bne.n	8027968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8027944:	68fb      	ldr	r3, [r7, #12]
 8027946:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 802794a:	687b      	ldr	r3, [r7, #4]
 802794c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802794e:	085b      	lsrs	r3, r3, #1
 8027950:	3b01      	subs	r3, #1
 8027952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8027954:	429a      	cmp	r2, r3
 8027956:	d107      	bne.n	8027968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8027958:	68fb      	ldr	r3, [r7, #12]
 802795a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 802795e:	687b      	ldr	r3, [r7, #4]
 8027960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8027964:	429a      	cmp	r2, r3
 8027966:	d001      	beq.n	802796c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8027968:	2301      	movs	r3, #1
 802796a:	e000      	b.n	802796e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 802796c:	2300      	movs	r3, #0
}
 802796e:	4618      	mov	r0, r3
 8027970:	3718      	adds	r7, #24
 8027972:	46bd      	mov	sp, r7
 8027974:	bd80      	pop	{r7, pc}
 8027976:	bf00      	nop
 8027978:	40023800 	.word	0x40023800

0802797c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802797c:	b580      	push	{r7, lr}
 802797e:	b084      	sub	sp, #16
 8027980:	af00      	add	r7, sp, #0
 8027982:	6078      	str	r0, [r7, #4]
 8027984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8027986:	687b      	ldr	r3, [r7, #4]
 8027988:	2b00      	cmp	r3, #0
 802798a:	d101      	bne.n	8027990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802798c:	2301      	movs	r3, #1
 802798e:	e0cc      	b.n	8027b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8027990:	4b68      	ldr	r3, [pc, #416]	; (8027b34 <HAL_RCC_ClockConfig+0x1b8>)
 8027992:	681b      	ldr	r3, [r3, #0]
 8027994:	f003 030f 	and.w	r3, r3, #15
 8027998:	683a      	ldr	r2, [r7, #0]
 802799a:	429a      	cmp	r2, r3
 802799c:	d90c      	bls.n	80279b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802799e:	4b65      	ldr	r3, [pc, #404]	; (8027b34 <HAL_RCC_ClockConfig+0x1b8>)
 80279a0:	683a      	ldr	r2, [r7, #0]
 80279a2:	b2d2      	uxtb	r2, r2
 80279a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80279a6:	4b63      	ldr	r3, [pc, #396]	; (8027b34 <HAL_RCC_ClockConfig+0x1b8>)
 80279a8:	681b      	ldr	r3, [r3, #0]
 80279aa:	f003 030f 	and.w	r3, r3, #15
 80279ae:	683a      	ldr	r2, [r7, #0]
 80279b0:	429a      	cmp	r2, r3
 80279b2:	d001      	beq.n	80279b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80279b4:	2301      	movs	r3, #1
 80279b6:	e0b8      	b.n	8027b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80279b8:	687b      	ldr	r3, [r7, #4]
 80279ba:	681b      	ldr	r3, [r3, #0]
 80279bc:	f003 0302 	and.w	r3, r3, #2
 80279c0:	2b00      	cmp	r3, #0
 80279c2:	d020      	beq.n	8027a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80279c4:	687b      	ldr	r3, [r7, #4]
 80279c6:	681b      	ldr	r3, [r3, #0]
 80279c8:	f003 0304 	and.w	r3, r3, #4
 80279cc:	2b00      	cmp	r3, #0
 80279ce:	d005      	beq.n	80279dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80279d0:	4b59      	ldr	r3, [pc, #356]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 80279d2:	689b      	ldr	r3, [r3, #8]
 80279d4:	4a58      	ldr	r2, [pc, #352]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 80279d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80279da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80279dc:	687b      	ldr	r3, [r7, #4]
 80279de:	681b      	ldr	r3, [r3, #0]
 80279e0:	f003 0308 	and.w	r3, r3, #8
 80279e4:	2b00      	cmp	r3, #0
 80279e6:	d005      	beq.n	80279f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80279e8:	4b53      	ldr	r3, [pc, #332]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 80279ea:	689b      	ldr	r3, [r3, #8]
 80279ec:	4a52      	ldr	r2, [pc, #328]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 80279ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80279f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80279f4:	4b50      	ldr	r3, [pc, #320]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 80279f6:	689b      	ldr	r3, [r3, #8]
 80279f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80279fc:	687b      	ldr	r3, [r7, #4]
 80279fe:	689b      	ldr	r3, [r3, #8]
 8027a00:	494d      	ldr	r1, [pc, #308]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 8027a02:	4313      	orrs	r3, r2
 8027a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8027a06:	687b      	ldr	r3, [r7, #4]
 8027a08:	681b      	ldr	r3, [r3, #0]
 8027a0a:	f003 0301 	and.w	r3, r3, #1
 8027a0e:	2b00      	cmp	r3, #0
 8027a10:	d044      	beq.n	8027a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8027a12:	687b      	ldr	r3, [r7, #4]
 8027a14:	685b      	ldr	r3, [r3, #4]
 8027a16:	2b01      	cmp	r3, #1
 8027a18:	d107      	bne.n	8027a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027a1a:	4b47      	ldr	r3, [pc, #284]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 8027a1c:	681b      	ldr	r3, [r3, #0]
 8027a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027a22:	2b00      	cmp	r3, #0
 8027a24:	d119      	bne.n	8027a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8027a26:	2301      	movs	r3, #1
 8027a28:	e07f      	b.n	8027b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8027a2a:	687b      	ldr	r3, [r7, #4]
 8027a2c:	685b      	ldr	r3, [r3, #4]
 8027a2e:	2b02      	cmp	r3, #2
 8027a30:	d003      	beq.n	8027a3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8027a32:	687b      	ldr	r3, [r7, #4]
 8027a34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8027a36:	2b03      	cmp	r3, #3
 8027a38:	d107      	bne.n	8027a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027a3a:	4b3f      	ldr	r3, [pc, #252]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 8027a3c:	681b      	ldr	r3, [r3, #0]
 8027a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027a42:	2b00      	cmp	r3, #0
 8027a44:	d109      	bne.n	8027a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8027a46:	2301      	movs	r3, #1
 8027a48:	e06f      	b.n	8027b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027a4a:	4b3b      	ldr	r3, [pc, #236]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 8027a4c:	681b      	ldr	r3, [r3, #0]
 8027a4e:	f003 0302 	and.w	r3, r3, #2
 8027a52:	2b00      	cmp	r3, #0
 8027a54:	d101      	bne.n	8027a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8027a56:	2301      	movs	r3, #1
 8027a58:	e067      	b.n	8027b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8027a5a:	4b37      	ldr	r3, [pc, #220]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 8027a5c:	689b      	ldr	r3, [r3, #8]
 8027a5e:	f023 0203 	bic.w	r2, r3, #3
 8027a62:	687b      	ldr	r3, [r7, #4]
 8027a64:	685b      	ldr	r3, [r3, #4]
 8027a66:	4934      	ldr	r1, [pc, #208]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 8027a68:	4313      	orrs	r3, r2
 8027a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8027a6c:	f7fb fe0e 	bl	802368c <HAL_GetTick>
 8027a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027a72:	e00a      	b.n	8027a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8027a74:	f7fb fe0a 	bl	802368c <HAL_GetTick>
 8027a78:	4602      	mov	r2, r0
 8027a7a:	68fb      	ldr	r3, [r7, #12]
 8027a7c:	1ad3      	subs	r3, r2, r3
 8027a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8027a82:	4293      	cmp	r3, r2
 8027a84:	d901      	bls.n	8027a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8027a86:	2303      	movs	r3, #3
 8027a88:	e04f      	b.n	8027b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027a8a:	4b2b      	ldr	r3, [pc, #172]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 8027a8c:	689b      	ldr	r3, [r3, #8]
 8027a8e:	f003 020c 	and.w	r2, r3, #12
 8027a92:	687b      	ldr	r3, [r7, #4]
 8027a94:	685b      	ldr	r3, [r3, #4]
 8027a96:	009b      	lsls	r3, r3, #2
 8027a98:	429a      	cmp	r2, r3
 8027a9a:	d1eb      	bne.n	8027a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8027a9c:	4b25      	ldr	r3, [pc, #148]	; (8027b34 <HAL_RCC_ClockConfig+0x1b8>)
 8027a9e:	681b      	ldr	r3, [r3, #0]
 8027aa0:	f003 030f 	and.w	r3, r3, #15
 8027aa4:	683a      	ldr	r2, [r7, #0]
 8027aa6:	429a      	cmp	r2, r3
 8027aa8:	d20c      	bcs.n	8027ac4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027aaa:	4b22      	ldr	r3, [pc, #136]	; (8027b34 <HAL_RCC_ClockConfig+0x1b8>)
 8027aac:	683a      	ldr	r2, [r7, #0]
 8027aae:	b2d2      	uxtb	r2, r2
 8027ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8027ab2:	4b20      	ldr	r3, [pc, #128]	; (8027b34 <HAL_RCC_ClockConfig+0x1b8>)
 8027ab4:	681b      	ldr	r3, [r3, #0]
 8027ab6:	f003 030f 	and.w	r3, r3, #15
 8027aba:	683a      	ldr	r2, [r7, #0]
 8027abc:	429a      	cmp	r2, r3
 8027abe:	d001      	beq.n	8027ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8027ac0:	2301      	movs	r3, #1
 8027ac2:	e032      	b.n	8027b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8027ac4:	687b      	ldr	r3, [r7, #4]
 8027ac6:	681b      	ldr	r3, [r3, #0]
 8027ac8:	f003 0304 	and.w	r3, r3, #4
 8027acc:	2b00      	cmp	r3, #0
 8027ace:	d008      	beq.n	8027ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8027ad0:	4b19      	ldr	r3, [pc, #100]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 8027ad2:	689b      	ldr	r3, [r3, #8]
 8027ad4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8027ad8:	687b      	ldr	r3, [r7, #4]
 8027ada:	68db      	ldr	r3, [r3, #12]
 8027adc:	4916      	ldr	r1, [pc, #88]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 8027ade:	4313      	orrs	r3, r2
 8027ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8027ae2:	687b      	ldr	r3, [r7, #4]
 8027ae4:	681b      	ldr	r3, [r3, #0]
 8027ae6:	f003 0308 	and.w	r3, r3, #8
 8027aea:	2b00      	cmp	r3, #0
 8027aec:	d009      	beq.n	8027b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8027aee:	4b12      	ldr	r3, [pc, #72]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 8027af0:	689b      	ldr	r3, [r3, #8]
 8027af2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8027af6:	687b      	ldr	r3, [r7, #4]
 8027af8:	691b      	ldr	r3, [r3, #16]
 8027afa:	00db      	lsls	r3, r3, #3
 8027afc:	490e      	ldr	r1, [pc, #56]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 8027afe:	4313      	orrs	r3, r2
 8027b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8027b02:	f000 f821 	bl	8027b48 <HAL_RCC_GetSysClockFreq>
 8027b06:	4602      	mov	r2, r0
 8027b08:	4b0b      	ldr	r3, [pc, #44]	; (8027b38 <HAL_RCC_ClockConfig+0x1bc>)
 8027b0a:	689b      	ldr	r3, [r3, #8]
 8027b0c:	091b      	lsrs	r3, r3, #4
 8027b0e:	f003 030f 	and.w	r3, r3, #15
 8027b12:	490a      	ldr	r1, [pc, #40]	; (8027b3c <HAL_RCC_ClockConfig+0x1c0>)
 8027b14:	5ccb      	ldrb	r3, [r1, r3]
 8027b16:	fa22 f303 	lsr.w	r3, r2, r3
 8027b1a:	4a09      	ldr	r2, [pc, #36]	; (8027b40 <HAL_RCC_ClockConfig+0x1c4>)
 8027b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8027b1e:	4b09      	ldr	r3, [pc, #36]	; (8027b44 <HAL_RCC_ClockConfig+0x1c8>)
 8027b20:	681b      	ldr	r3, [r3, #0]
 8027b22:	4618      	mov	r0, r3
 8027b24:	f7fa f9ce 	bl	8021ec4 <HAL_InitTick>

  return HAL_OK;
 8027b28:	2300      	movs	r3, #0
}
 8027b2a:	4618      	mov	r0, r3
 8027b2c:	3710      	adds	r7, #16
 8027b2e:	46bd      	mov	sp, r7
 8027b30:	bd80      	pop	{r7, pc}
 8027b32:	bf00      	nop
 8027b34:	40023c00 	.word	0x40023c00
 8027b38:	40023800 	.word	0x40023800
 8027b3c:	0802fb38 	.word	0x0802fb38
 8027b40:	20000004 	.word	0x20000004
 8027b44:	20000058 	.word	0x20000058

08027b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8027b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8027b4c:	b094      	sub	sp, #80	; 0x50
 8027b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8027b50:	2300      	movs	r3, #0
 8027b52:	647b      	str	r3, [r7, #68]	; 0x44
 8027b54:	2300      	movs	r3, #0
 8027b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027b58:	2300      	movs	r3, #0
 8027b5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8027b5c:	2300      	movs	r3, #0
 8027b5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8027b60:	4b79      	ldr	r3, [pc, #484]	; (8027d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8027b62:	689b      	ldr	r3, [r3, #8]
 8027b64:	f003 030c 	and.w	r3, r3, #12
 8027b68:	2b08      	cmp	r3, #8
 8027b6a:	d00d      	beq.n	8027b88 <HAL_RCC_GetSysClockFreq+0x40>
 8027b6c:	2b08      	cmp	r3, #8
 8027b6e:	f200 80e1 	bhi.w	8027d34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8027b72:	2b00      	cmp	r3, #0
 8027b74:	d002      	beq.n	8027b7c <HAL_RCC_GetSysClockFreq+0x34>
 8027b76:	2b04      	cmp	r3, #4
 8027b78:	d003      	beq.n	8027b82 <HAL_RCC_GetSysClockFreq+0x3a>
 8027b7a:	e0db      	b.n	8027d34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8027b7c:	4b73      	ldr	r3, [pc, #460]	; (8027d4c <HAL_RCC_GetSysClockFreq+0x204>)
 8027b7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8027b80:	e0db      	b.n	8027d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8027b82:	4b73      	ldr	r3, [pc, #460]	; (8027d50 <HAL_RCC_GetSysClockFreq+0x208>)
 8027b84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027b86:	e0d8      	b.n	8027d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8027b88:	4b6f      	ldr	r3, [pc, #444]	; (8027d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8027b8a:	685b      	ldr	r3, [r3, #4]
 8027b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8027b90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8027b92:	4b6d      	ldr	r3, [pc, #436]	; (8027d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8027b94:	685b      	ldr	r3, [r3, #4]
 8027b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027b9a:	2b00      	cmp	r3, #0
 8027b9c:	d063      	beq.n	8027c66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027b9e:	4b6a      	ldr	r3, [pc, #424]	; (8027d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8027ba0:	685b      	ldr	r3, [r3, #4]
 8027ba2:	099b      	lsrs	r3, r3, #6
 8027ba4:	2200      	movs	r2, #0
 8027ba6:	63bb      	str	r3, [r7, #56]	; 0x38
 8027ba8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8027baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8027bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8027bb2:	2300      	movs	r3, #0
 8027bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8027bb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8027bba:	4622      	mov	r2, r4
 8027bbc:	462b      	mov	r3, r5
 8027bbe:	f04f 0000 	mov.w	r0, #0
 8027bc2:	f04f 0100 	mov.w	r1, #0
 8027bc6:	0159      	lsls	r1, r3, #5
 8027bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8027bcc:	0150      	lsls	r0, r2, #5
 8027bce:	4602      	mov	r2, r0
 8027bd0:	460b      	mov	r3, r1
 8027bd2:	4621      	mov	r1, r4
 8027bd4:	1a51      	subs	r1, r2, r1
 8027bd6:	6139      	str	r1, [r7, #16]
 8027bd8:	4629      	mov	r1, r5
 8027bda:	eb63 0301 	sbc.w	r3, r3, r1
 8027bde:	617b      	str	r3, [r7, #20]
 8027be0:	f04f 0200 	mov.w	r2, #0
 8027be4:	f04f 0300 	mov.w	r3, #0
 8027be8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8027bec:	4659      	mov	r1, fp
 8027bee:	018b      	lsls	r3, r1, #6
 8027bf0:	4651      	mov	r1, sl
 8027bf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8027bf6:	4651      	mov	r1, sl
 8027bf8:	018a      	lsls	r2, r1, #6
 8027bfa:	4651      	mov	r1, sl
 8027bfc:	ebb2 0801 	subs.w	r8, r2, r1
 8027c00:	4659      	mov	r1, fp
 8027c02:	eb63 0901 	sbc.w	r9, r3, r1
 8027c06:	f04f 0200 	mov.w	r2, #0
 8027c0a:	f04f 0300 	mov.w	r3, #0
 8027c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8027c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8027c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8027c1a:	4690      	mov	r8, r2
 8027c1c:	4699      	mov	r9, r3
 8027c1e:	4623      	mov	r3, r4
 8027c20:	eb18 0303 	adds.w	r3, r8, r3
 8027c24:	60bb      	str	r3, [r7, #8]
 8027c26:	462b      	mov	r3, r5
 8027c28:	eb49 0303 	adc.w	r3, r9, r3
 8027c2c:	60fb      	str	r3, [r7, #12]
 8027c2e:	f04f 0200 	mov.w	r2, #0
 8027c32:	f04f 0300 	mov.w	r3, #0
 8027c36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8027c3a:	4629      	mov	r1, r5
 8027c3c:	024b      	lsls	r3, r1, #9
 8027c3e:	4621      	mov	r1, r4
 8027c40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8027c44:	4621      	mov	r1, r4
 8027c46:	024a      	lsls	r2, r1, #9
 8027c48:	4610      	mov	r0, r2
 8027c4a:	4619      	mov	r1, r3
 8027c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027c4e:	2200      	movs	r2, #0
 8027c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8027c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8027c54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8027c58:	f7f8 fb1a 	bl	8020290 <__aeabi_uldivmod>
 8027c5c:	4602      	mov	r2, r0
 8027c5e:	460b      	mov	r3, r1
 8027c60:	4613      	mov	r3, r2
 8027c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027c64:	e058      	b.n	8027d18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027c66:	4b38      	ldr	r3, [pc, #224]	; (8027d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8027c68:	685b      	ldr	r3, [r3, #4]
 8027c6a:	099b      	lsrs	r3, r3, #6
 8027c6c:	2200      	movs	r2, #0
 8027c6e:	4618      	mov	r0, r3
 8027c70:	4611      	mov	r1, r2
 8027c72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8027c76:	623b      	str	r3, [r7, #32]
 8027c78:	2300      	movs	r3, #0
 8027c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8027c7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8027c80:	4642      	mov	r2, r8
 8027c82:	464b      	mov	r3, r9
 8027c84:	f04f 0000 	mov.w	r0, #0
 8027c88:	f04f 0100 	mov.w	r1, #0
 8027c8c:	0159      	lsls	r1, r3, #5
 8027c8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8027c92:	0150      	lsls	r0, r2, #5
 8027c94:	4602      	mov	r2, r0
 8027c96:	460b      	mov	r3, r1
 8027c98:	4641      	mov	r1, r8
 8027c9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8027c9e:	4649      	mov	r1, r9
 8027ca0:	eb63 0b01 	sbc.w	fp, r3, r1
 8027ca4:	f04f 0200 	mov.w	r2, #0
 8027ca8:	f04f 0300 	mov.w	r3, #0
 8027cac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8027cb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8027cb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8027cb8:	ebb2 040a 	subs.w	r4, r2, sl
 8027cbc:	eb63 050b 	sbc.w	r5, r3, fp
 8027cc0:	f04f 0200 	mov.w	r2, #0
 8027cc4:	f04f 0300 	mov.w	r3, #0
 8027cc8:	00eb      	lsls	r3, r5, #3
 8027cca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8027cce:	00e2      	lsls	r2, r4, #3
 8027cd0:	4614      	mov	r4, r2
 8027cd2:	461d      	mov	r5, r3
 8027cd4:	4643      	mov	r3, r8
 8027cd6:	18e3      	adds	r3, r4, r3
 8027cd8:	603b      	str	r3, [r7, #0]
 8027cda:	464b      	mov	r3, r9
 8027cdc:	eb45 0303 	adc.w	r3, r5, r3
 8027ce0:	607b      	str	r3, [r7, #4]
 8027ce2:	f04f 0200 	mov.w	r2, #0
 8027ce6:	f04f 0300 	mov.w	r3, #0
 8027cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8027cee:	4629      	mov	r1, r5
 8027cf0:	028b      	lsls	r3, r1, #10
 8027cf2:	4621      	mov	r1, r4
 8027cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8027cf8:	4621      	mov	r1, r4
 8027cfa:	028a      	lsls	r2, r1, #10
 8027cfc:	4610      	mov	r0, r2
 8027cfe:	4619      	mov	r1, r3
 8027d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027d02:	2200      	movs	r2, #0
 8027d04:	61bb      	str	r3, [r7, #24]
 8027d06:	61fa      	str	r2, [r7, #28]
 8027d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8027d0c:	f7f8 fac0 	bl	8020290 <__aeabi_uldivmod>
 8027d10:	4602      	mov	r2, r0
 8027d12:	460b      	mov	r3, r1
 8027d14:	4613      	mov	r3, r2
 8027d16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8027d18:	4b0b      	ldr	r3, [pc, #44]	; (8027d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8027d1a:	685b      	ldr	r3, [r3, #4]
 8027d1c:	0c1b      	lsrs	r3, r3, #16
 8027d1e:	f003 0303 	and.w	r3, r3, #3
 8027d22:	3301      	adds	r3, #1
 8027d24:	005b      	lsls	r3, r3, #1
 8027d26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8027d28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8027d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8027d30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027d32:	e002      	b.n	8027d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8027d34:	4b05      	ldr	r3, [pc, #20]	; (8027d4c <HAL_RCC_GetSysClockFreq+0x204>)
 8027d36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8027d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8027d3c:	4618      	mov	r0, r3
 8027d3e:	3750      	adds	r7, #80	; 0x50
 8027d40:	46bd      	mov	sp, r7
 8027d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8027d46:	bf00      	nop
 8027d48:	40023800 	.word	0x40023800
 8027d4c:	00f42400 	.word	0x00f42400
 8027d50:	007a1200 	.word	0x007a1200

08027d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8027d54:	b480      	push	{r7}
 8027d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8027d58:	4b03      	ldr	r3, [pc, #12]	; (8027d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8027d5a:	681b      	ldr	r3, [r3, #0]
}
 8027d5c:	4618      	mov	r0, r3
 8027d5e:	46bd      	mov	sp, r7
 8027d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d64:	4770      	bx	lr
 8027d66:	bf00      	nop
 8027d68:	20000004 	.word	0x20000004

08027d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8027d6c:	b580      	push	{r7, lr}
 8027d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8027d70:	f7ff fff0 	bl	8027d54 <HAL_RCC_GetHCLKFreq>
 8027d74:	4602      	mov	r2, r0
 8027d76:	4b05      	ldr	r3, [pc, #20]	; (8027d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8027d78:	689b      	ldr	r3, [r3, #8]
 8027d7a:	0a9b      	lsrs	r3, r3, #10
 8027d7c:	f003 0307 	and.w	r3, r3, #7
 8027d80:	4903      	ldr	r1, [pc, #12]	; (8027d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8027d82:	5ccb      	ldrb	r3, [r1, r3]
 8027d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8027d88:	4618      	mov	r0, r3
 8027d8a:	bd80      	pop	{r7, pc}
 8027d8c:	40023800 	.word	0x40023800
 8027d90:	0802fb48 	.word	0x0802fb48

08027d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8027d94:	b580      	push	{r7, lr}
 8027d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8027d98:	f7ff ffdc 	bl	8027d54 <HAL_RCC_GetHCLKFreq>
 8027d9c:	4602      	mov	r2, r0
 8027d9e:	4b05      	ldr	r3, [pc, #20]	; (8027db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8027da0:	689b      	ldr	r3, [r3, #8]
 8027da2:	0b5b      	lsrs	r3, r3, #13
 8027da4:	f003 0307 	and.w	r3, r3, #7
 8027da8:	4903      	ldr	r1, [pc, #12]	; (8027db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8027daa:	5ccb      	ldrb	r3, [r1, r3]
 8027dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8027db0:	4618      	mov	r0, r3
 8027db2:	bd80      	pop	{r7, pc}
 8027db4:	40023800 	.word	0x40023800
 8027db8:	0802fb48 	.word	0x0802fb48

08027dbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8027dbc:	b480      	push	{r7}
 8027dbe:	b083      	sub	sp, #12
 8027dc0:	af00      	add	r7, sp, #0
 8027dc2:	6078      	str	r0, [r7, #4]
 8027dc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8027dc6:	687b      	ldr	r3, [r7, #4]
 8027dc8:	220f      	movs	r2, #15
 8027dca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8027dcc:	4b12      	ldr	r3, [pc, #72]	; (8027e18 <HAL_RCC_GetClockConfig+0x5c>)
 8027dce:	689b      	ldr	r3, [r3, #8]
 8027dd0:	f003 0203 	and.w	r2, r3, #3
 8027dd4:	687b      	ldr	r3, [r7, #4]
 8027dd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8027dd8:	4b0f      	ldr	r3, [pc, #60]	; (8027e18 <HAL_RCC_GetClockConfig+0x5c>)
 8027dda:	689b      	ldr	r3, [r3, #8]
 8027ddc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8027de0:	687b      	ldr	r3, [r7, #4]
 8027de2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8027de4:	4b0c      	ldr	r3, [pc, #48]	; (8027e18 <HAL_RCC_GetClockConfig+0x5c>)
 8027de6:	689b      	ldr	r3, [r3, #8]
 8027de8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027dec:	687b      	ldr	r3, [r7, #4]
 8027dee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8027df0:	4b09      	ldr	r3, [pc, #36]	; (8027e18 <HAL_RCC_GetClockConfig+0x5c>)
 8027df2:	689b      	ldr	r3, [r3, #8]
 8027df4:	08db      	lsrs	r3, r3, #3
 8027df6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027dfa:	687b      	ldr	r3, [r7, #4]
 8027dfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8027dfe:	4b07      	ldr	r3, [pc, #28]	; (8027e1c <HAL_RCC_GetClockConfig+0x60>)
 8027e00:	681b      	ldr	r3, [r3, #0]
 8027e02:	f003 020f 	and.w	r2, r3, #15
 8027e06:	683b      	ldr	r3, [r7, #0]
 8027e08:	601a      	str	r2, [r3, #0]
}
 8027e0a:	bf00      	nop
 8027e0c:	370c      	adds	r7, #12
 8027e0e:	46bd      	mov	sp, r7
 8027e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e14:	4770      	bx	lr
 8027e16:	bf00      	nop
 8027e18:	40023800 	.word	0x40023800
 8027e1c:	40023c00 	.word	0x40023c00

08027e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8027e20:	b580      	push	{r7, lr}
 8027e22:	b086      	sub	sp, #24
 8027e24:	af00      	add	r7, sp, #0
 8027e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027e28:	2300      	movs	r3, #0
 8027e2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8027e2c:	2300      	movs	r3, #0
 8027e2e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8027e30:	687b      	ldr	r3, [r7, #4]
 8027e32:	681b      	ldr	r3, [r3, #0]
 8027e34:	f003 0301 	and.w	r3, r3, #1
 8027e38:	2b00      	cmp	r3, #0
 8027e3a:	d10b      	bne.n	8027e54 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8027e3c:	687b      	ldr	r3, [r7, #4]
 8027e3e:	681b      	ldr	r3, [r3, #0]
 8027e40:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8027e44:	2b00      	cmp	r3, #0
 8027e46:	d105      	bne.n	8027e54 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8027e48:	687b      	ldr	r3, [r7, #4]
 8027e4a:	681b      	ldr	r3, [r3, #0]
 8027e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8027e50:	2b00      	cmp	r3, #0
 8027e52:	d075      	beq.n	8027f40 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8027e54:	4b91      	ldr	r3, [pc, #580]	; (802809c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8027e56:	2200      	movs	r2, #0
 8027e58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027e5a:	f7fb fc17 	bl	802368c <HAL_GetTick>
 8027e5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027e60:	e008      	b.n	8027e74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8027e62:	f7fb fc13 	bl	802368c <HAL_GetTick>
 8027e66:	4602      	mov	r2, r0
 8027e68:	697b      	ldr	r3, [r7, #20]
 8027e6a:	1ad3      	subs	r3, r2, r3
 8027e6c:	2b02      	cmp	r3, #2
 8027e6e:	d901      	bls.n	8027e74 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027e70:	2303      	movs	r3, #3
 8027e72:	e189      	b.n	8028188 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027e74:	4b8a      	ldr	r3, [pc, #552]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e76:	681b      	ldr	r3, [r3, #0]
 8027e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027e7c:	2b00      	cmp	r3, #0
 8027e7e:	d1f0      	bne.n	8027e62 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8027e80:	687b      	ldr	r3, [r7, #4]
 8027e82:	681b      	ldr	r3, [r3, #0]
 8027e84:	f003 0301 	and.w	r3, r3, #1
 8027e88:	2b00      	cmp	r3, #0
 8027e8a:	d009      	beq.n	8027ea0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8027e8c:	687b      	ldr	r3, [r7, #4]
 8027e8e:	685b      	ldr	r3, [r3, #4]
 8027e90:	019a      	lsls	r2, r3, #6
 8027e92:	687b      	ldr	r3, [r7, #4]
 8027e94:	689b      	ldr	r3, [r3, #8]
 8027e96:	071b      	lsls	r3, r3, #28
 8027e98:	4981      	ldr	r1, [pc, #516]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e9a:	4313      	orrs	r3, r2
 8027e9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8027ea0:	687b      	ldr	r3, [r7, #4]
 8027ea2:	681b      	ldr	r3, [r3, #0]
 8027ea4:	f003 0302 	and.w	r3, r3, #2
 8027ea8:	2b00      	cmp	r3, #0
 8027eaa:	d01f      	beq.n	8027eec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8027eac:	4b7c      	ldr	r3, [pc, #496]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027eb2:	0f1b      	lsrs	r3, r3, #28
 8027eb4:	f003 0307 	and.w	r3, r3, #7
 8027eb8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8027eba:	687b      	ldr	r3, [r7, #4]
 8027ebc:	685b      	ldr	r3, [r3, #4]
 8027ebe:	019a      	lsls	r2, r3, #6
 8027ec0:	687b      	ldr	r3, [r7, #4]
 8027ec2:	68db      	ldr	r3, [r3, #12]
 8027ec4:	061b      	lsls	r3, r3, #24
 8027ec6:	431a      	orrs	r2, r3
 8027ec8:	693b      	ldr	r3, [r7, #16]
 8027eca:	071b      	lsls	r3, r3, #28
 8027ecc:	4974      	ldr	r1, [pc, #464]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027ece:	4313      	orrs	r3, r2
 8027ed0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8027ed4:	4b72      	ldr	r3, [pc, #456]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027eda:	f023 021f 	bic.w	r2, r3, #31
 8027ede:	687b      	ldr	r3, [r7, #4]
 8027ee0:	69db      	ldr	r3, [r3, #28]
 8027ee2:	3b01      	subs	r3, #1
 8027ee4:	496e      	ldr	r1, [pc, #440]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027ee6:	4313      	orrs	r3, r2
 8027ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8027eec:	687b      	ldr	r3, [r7, #4]
 8027eee:	681b      	ldr	r3, [r3, #0]
 8027ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027ef4:	2b00      	cmp	r3, #0
 8027ef6:	d00d      	beq.n	8027f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8027ef8:	687b      	ldr	r3, [r7, #4]
 8027efa:	685b      	ldr	r3, [r3, #4]
 8027efc:	019a      	lsls	r2, r3, #6
 8027efe:	687b      	ldr	r3, [r7, #4]
 8027f00:	68db      	ldr	r3, [r3, #12]
 8027f02:	061b      	lsls	r3, r3, #24
 8027f04:	431a      	orrs	r2, r3
 8027f06:	687b      	ldr	r3, [r7, #4]
 8027f08:	689b      	ldr	r3, [r3, #8]
 8027f0a:	071b      	lsls	r3, r3, #28
 8027f0c:	4964      	ldr	r1, [pc, #400]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f0e:	4313      	orrs	r3, r2
 8027f10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8027f14:	4b61      	ldr	r3, [pc, #388]	; (802809c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8027f16:	2201      	movs	r2, #1
 8027f18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027f1a:	f7fb fbb7 	bl	802368c <HAL_GetTick>
 8027f1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027f20:	e008      	b.n	8027f34 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8027f22:	f7fb fbb3 	bl	802368c <HAL_GetTick>
 8027f26:	4602      	mov	r2, r0
 8027f28:	697b      	ldr	r3, [r7, #20]
 8027f2a:	1ad3      	subs	r3, r2, r3
 8027f2c:	2b02      	cmp	r3, #2
 8027f2e:	d901      	bls.n	8027f34 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027f30:	2303      	movs	r3, #3
 8027f32:	e129      	b.n	8028188 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027f34:	4b5a      	ldr	r3, [pc, #360]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f36:	681b      	ldr	r3, [r3, #0]
 8027f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027f3c:	2b00      	cmp	r3, #0
 8027f3e:	d0f0      	beq.n	8027f22 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8027f40:	687b      	ldr	r3, [r7, #4]
 8027f42:	681b      	ldr	r3, [r3, #0]
 8027f44:	f003 0304 	and.w	r3, r3, #4
 8027f48:	2b00      	cmp	r3, #0
 8027f4a:	d105      	bne.n	8027f58 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8027f4c:	687b      	ldr	r3, [r7, #4]
 8027f4e:	681b      	ldr	r3, [r3, #0]
 8027f50:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8027f54:	2b00      	cmp	r3, #0
 8027f56:	d079      	beq.n	802804c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8027f58:	4b52      	ldr	r3, [pc, #328]	; (80280a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8027f5a:	2200      	movs	r2, #0
 8027f5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027f5e:	f7fb fb95 	bl	802368c <HAL_GetTick>
 8027f62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027f64:	e008      	b.n	8027f78 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8027f66:	f7fb fb91 	bl	802368c <HAL_GetTick>
 8027f6a:	4602      	mov	r2, r0
 8027f6c:	697b      	ldr	r3, [r7, #20]
 8027f6e:	1ad3      	subs	r3, r2, r3
 8027f70:	2b02      	cmp	r3, #2
 8027f72:	d901      	bls.n	8027f78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027f74:	2303      	movs	r3, #3
 8027f76:	e107      	b.n	8028188 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027f78:	4b49      	ldr	r3, [pc, #292]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f7a:	681b      	ldr	r3, [r3, #0]
 8027f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8027f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027f84:	d0ef      	beq.n	8027f66 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8027f86:	687b      	ldr	r3, [r7, #4]
 8027f88:	681b      	ldr	r3, [r3, #0]
 8027f8a:	f003 0304 	and.w	r3, r3, #4
 8027f8e:	2b00      	cmp	r3, #0
 8027f90:	d020      	beq.n	8027fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8027f92:	4b43      	ldr	r3, [pc, #268]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027f98:	0f1b      	lsrs	r3, r3, #28
 8027f9a:	f003 0307 	and.w	r3, r3, #7
 8027f9e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8027fa0:	687b      	ldr	r3, [r7, #4]
 8027fa2:	691b      	ldr	r3, [r3, #16]
 8027fa4:	019a      	lsls	r2, r3, #6
 8027fa6:	687b      	ldr	r3, [r7, #4]
 8027fa8:	695b      	ldr	r3, [r3, #20]
 8027faa:	061b      	lsls	r3, r3, #24
 8027fac:	431a      	orrs	r2, r3
 8027fae:	693b      	ldr	r3, [r7, #16]
 8027fb0:	071b      	lsls	r3, r3, #28
 8027fb2:	493b      	ldr	r1, [pc, #236]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027fb4:	4313      	orrs	r3, r2
 8027fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8027fba:	4b39      	ldr	r3, [pc, #228]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027fc0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8027fc4:	687b      	ldr	r3, [r7, #4]
 8027fc6:	6a1b      	ldr	r3, [r3, #32]
 8027fc8:	3b01      	subs	r3, #1
 8027fca:	021b      	lsls	r3, r3, #8
 8027fcc:	4934      	ldr	r1, [pc, #208]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027fce:	4313      	orrs	r3, r2
 8027fd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8027fd4:	687b      	ldr	r3, [r7, #4]
 8027fd6:	681b      	ldr	r3, [r3, #0]
 8027fd8:	f003 0308 	and.w	r3, r3, #8
 8027fdc:	2b00      	cmp	r3, #0
 8027fde:	d01e      	beq.n	802801e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8027fe0:	4b2f      	ldr	r3, [pc, #188]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027fe6:	0e1b      	lsrs	r3, r3, #24
 8027fe8:	f003 030f 	and.w	r3, r3, #15
 8027fec:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8027fee:	687b      	ldr	r3, [r7, #4]
 8027ff0:	691b      	ldr	r3, [r3, #16]
 8027ff2:	019a      	lsls	r2, r3, #6
 8027ff4:	693b      	ldr	r3, [r7, #16]
 8027ff6:	061b      	lsls	r3, r3, #24
 8027ff8:	431a      	orrs	r2, r3
 8027ffa:	687b      	ldr	r3, [r7, #4]
 8027ffc:	699b      	ldr	r3, [r3, #24]
 8027ffe:	071b      	lsls	r3, r3, #28
 8028000:	4927      	ldr	r1, [pc, #156]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8028002:	4313      	orrs	r3, r2
 8028004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8028008:	4b25      	ldr	r3, [pc, #148]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802800a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802800e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8028012:	687b      	ldr	r3, [r7, #4]
 8028014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028016:	4922      	ldr	r1, [pc, #136]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8028018:	4313      	orrs	r3, r2
 802801a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 802801e:	4b21      	ldr	r3, [pc, #132]	; (80280a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8028020:	2201      	movs	r2, #1
 8028022:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8028024:	f7fb fb32 	bl	802368c <HAL_GetTick>
 8028028:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 802802a:	e008      	b.n	802803e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 802802c:	f7fb fb2e 	bl	802368c <HAL_GetTick>
 8028030:	4602      	mov	r2, r0
 8028032:	697b      	ldr	r3, [r7, #20]
 8028034:	1ad3      	subs	r3, r2, r3
 8028036:	2b02      	cmp	r3, #2
 8028038:	d901      	bls.n	802803e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802803a:	2303      	movs	r3, #3
 802803c:	e0a4      	b.n	8028188 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 802803e:	4b18      	ldr	r3, [pc, #96]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8028040:	681b      	ldr	r3, [r3, #0]
 8028042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8028046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802804a:	d1ef      	bne.n	802802c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 802804c:	687b      	ldr	r3, [r7, #4]
 802804e:	681b      	ldr	r3, [r3, #0]
 8028050:	f003 0320 	and.w	r3, r3, #32
 8028054:	2b00      	cmp	r3, #0
 8028056:	f000 808b 	beq.w	8028170 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 802805a:	2300      	movs	r3, #0
 802805c:	60fb      	str	r3, [r7, #12]
 802805e:	4b10      	ldr	r3, [pc, #64]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8028060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028062:	4a0f      	ldr	r2, [pc, #60]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8028064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8028068:	6413      	str	r3, [r2, #64]	; 0x40
 802806a:	4b0d      	ldr	r3, [pc, #52]	; (80280a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802806e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028072:	60fb      	str	r3, [r7, #12]
 8028074:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8028076:	4b0c      	ldr	r3, [pc, #48]	; (80280a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8028078:	681b      	ldr	r3, [r3, #0]
 802807a:	4a0b      	ldr	r2, [pc, #44]	; (80280a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 802807c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028080:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8028082:	f7fb fb03 	bl	802368c <HAL_GetTick>
 8028086:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8028088:	e010      	b.n	80280ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 802808a:	f7fb faff 	bl	802368c <HAL_GetTick>
 802808e:	4602      	mov	r2, r0
 8028090:	697b      	ldr	r3, [r7, #20]
 8028092:	1ad3      	subs	r3, r2, r3
 8028094:	2b02      	cmp	r3, #2
 8028096:	d909      	bls.n	80280ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8028098:	2303      	movs	r3, #3
 802809a:	e075      	b.n	8028188 <HAL_RCCEx_PeriphCLKConfig+0x368>
 802809c:	42470068 	.word	0x42470068
 80280a0:	40023800 	.word	0x40023800
 80280a4:	42470070 	.word	0x42470070
 80280a8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80280ac:	4b38      	ldr	r3, [pc, #224]	; (8028190 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80280ae:	681b      	ldr	r3, [r3, #0]
 80280b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80280b4:	2b00      	cmp	r3, #0
 80280b6:	d0e8      	beq.n	802808a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80280b8:	4b36      	ldr	r3, [pc, #216]	; (8028194 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80280ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80280c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80280c2:	693b      	ldr	r3, [r7, #16]
 80280c4:	2b00      	cmp	r3, #0
 80280c6:	d02f      	beq.n	8028128 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80280c8:	687b      	ldr	r3, [r7, #4]
 80280ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80280cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80280d0:	693a      	ldr	r2, [r7, #16]
 80280d2:	429a      	cmp	r2, r3
 80280d4:	d028      	beq.n	8028128 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80280d6:	4b2f      	ldr	r3, [pc, #188]	; (8028194 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80280d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80280de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80280e0:	4b2d      	ldr	r3, [pc, #180]	; (8028198 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80280e2:	2201      	movs	r2, #1
 80280e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80280e6:	4b2c      	ldr	r3, [pc, #176]	; (8028198 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80280e8:	2200      	movs	r2, #0
 80280ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80280ec:	4a29      	ldr	r2, [pc, #164]	; (8028194 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80280ee:	693b      	ldr	r3, [r7, #16]
 80280f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80280f2:	4b28      	ldr	r3, [pc, #160]	; (8028194 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80280f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280f6:	f003 0301 	and.w	r3, r3, #1
 80280fa:	2b01      	cmp	r3, #1
 80280fc:	d114      	bne.n	8028128 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80280fe:	f7fb fac5 	bl	802368c <HAL_GetTick>
 8028102:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028104:	e00a      	b.n	802811c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8028106:	f7fb fac1 	bl	802368c <HAL_GetTick>
 802810a:	4602      	mov	r2, r0
 802810c:	697b      	ldr	r3, [r7, #20]
 802810e:	1ad3      	subs	r3, r2, r3
 8028110:	f241 3288 	movw	r2, #5000	; 0x1388
 8028114:	4293      	cmp	r3, r2
 8028116:	d901      	bls.n	802811c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8028118:	2303      	movs	r3, #3
 802811a:	e035      	b.n	8028188 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802811c:	4b1d      	ldr	r3, [pc, #116]	; (8028194 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802811e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028120:	f003 0302 	and.w	r3, r3, #2
 8028124:	2b00      	cmp	r3, #0
 8028126:	d0ee      	beq.n	8028106 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8028128:	687b      	ldr	r3, [r7, #4]
 802812a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802812c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028130:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8028134:	d10d      	bne.n	8028152 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8028136:	4b17      	ldr	r3, [pc, #92]	; (8028194 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028138:	689b      	ldr	r3, [r3, #8]
 802813a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 802813e:	687b      	ldr	r3, [r7, #4]
 8028140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028142:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8028146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802814a:	4912      	ldr	r1, [pc, #72]	; (8028194 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802814c:	4313      	orrs	r3, r2
 802814e:	608b      	str	r3, [r1, #8]
 8028150:	e005      	b.n	802815e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8028152:	4b10      	ldr	r3, [pc, #64]	; (8028194 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028154:	689b      	ldr	r3, [r3, #8]
 8028156:	4a0f      	ldr	r2, [pc, #60]	; (8028194 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028158:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 802815c:	6093      	str	r3, [r2, #8]
 802815e:	4b0d      	ldr	r3, [pc, #52]	; (8028194 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028160:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8028162:	687b      	ldr	r3, [r7, #4]
 8028164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802816a:	490a      	ldr	r1, [pc, #40]	; (8028194 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802816c:	4313      	orrs	r3, r2
 802816e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8028170:	687b      	ldr	r3, [r7, #4]
 8028172:	681b      	ldr	r3, [r3, #0]
 8028174:	f003 0310 	and.w	r3, r3, #16
 8028178:	2b00      	cmp	r3, #0
 802817a:	d004      	beq.n	8028186 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 802817c:	687b      	ldr	r3, [r7, #4]
 802817e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8028182:	4b06      	ldr	r3, [pc, #24]	; (802819c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8028184:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8028186:	2300      	movs	r3, #0
}
 8028188:	4618      	mov	r0, r3
 802818a:	3718      	adds	r7, #24
 802818c:	46bd      	mov	sp, r7
 802818e:	bd80      	pop	{r7, pc}
 8028190:	40007000 	.word	0x40007000
 8028194:	40023800 	.word	0x40023800
 8028198:	42470e40 	.word	0x42470e40
 802819c:	424711e0 	.word	0x424711e0

080281a0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80281a0:	b580      	push	{r7, lr}
 80281a2:	b082      	sub	sp, #8
 80281a4:	af00      	add	r7, sp, #0
 80281a6:	6078      	str	r0, [r7, #4]
 80281a8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80281aa:	687b      	ldr	r3, [r7, #4]
 80281ac:	2b00      	cmp	r3, #0
 80281ae:	d101      	bne.n	80281b4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80281b0:	2301      	movs	r3, #1
 80281b2:	e025      	b.n	8028200 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80281b4:	687b      	ldr	r3, [r7, #4]
 80281b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80281ba:	b2db      	uxtb	r3, r3
 80281bc:	2b00      	cmp	r3, #0
 80281be:	d106      	bne.n	80281ce <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80281c0:	687b      	ldr	r3, [r7, #4]
 80281c2:	2200      	movs	r2, #0
 80281c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80281c8:	6878      	ldr	r0, [r7, #4]
 80281ca:	f7f9 fe71 	bl	8021eb0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80281ce:	687b      	ldr	r3, [r7, #4]
 80281d0:	2202      	movs	r2, #2
 80281d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80281d6:	687b      	ldr	r3, [r7, #4]
 80281d8:	681a      	ldr	r2, [r3, #0]
 80281da:	687b      	ldr	r3, [r7, #4]
 80281dc:	3304      	adds	r3, #4
 80281de:	4619      	mov	r1, r3
 80281e0:	4610      	mov	r0, r2
 80281e2:	f002 fb47 	bl	802a874 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80281e6:	687b      	ldr	r3, [r7, #4]
 80281e8:	6818      	ldr	r0, [r3, #0]
 80281ea:	687b      	ldr	r3, [r7, #4]
 80281ec:	685b      	ldr	r3, [r3, #4]
 80281ee:	461a      	mov	r2, r3
 80281f0:	6839      	ldr	r1, [r7, #0]
 80281f2:	f002 fb9c 	bl	802a92e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80281f6:	687b      	ldr	r3, [r7, #4]
 80281f8:	2201      	movs	r2, #1
 80281fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80281fe:	2300      	movs	r3, #0
}
 8028200:	4618      	mov	r0, r3
 8028202:	3708      	adds	r7, #8
 8028204:	46bd      	mov	sp, r7
 8028206:	bd80      	pop	{r7, pc}

08028208 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8028208:	b580      	push	{r7, lr}
 802820a:	b086      	sub	sp, #24
 802820c:	af00      	add	r7, sp, #0
 802820e:	60f8      	str	r0, [r7, #12]
 8028210:	60b9      	str	r1, [r7, #8]
 8028212:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8028214:	68fb      	ldr	r3, [r7, #12]
 8028216:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802821a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 802821c:	7dfb      	ldrb	r3, [r7, #23]
 802821e:	2b02      	cmp	r3, #2
 8028220:	d101      	bne.n	8028226 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8028222:	2302      	movs	r3, #2
 8028224:	e021      	b.n	802826a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8028226:	7dfb      	ldrb	r3, [r7, #23]
 8028228:	2b01      	cmp	r3, #1
 802822a:	d002      	beq.n	8028232 <HAL_SDRAM_SendCommand+0x2a>
 802822c:	7dfb      	ldrb	r3, [r7, #23]
 802822e:	2b05      	cmp	r3, #5
 8028230:	d118      	bne.n	8028264 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8028232:	68fb      	ldr	r3, [r7, #12]
 8028234:	2202      	movs	r2, #2
 8028236:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 802823a:	68fb      	ldr	r3, [r7, #12]
 802823c:	681b      	ldr	r3, [r3, #0]
 802823e:	687a      	ldr	r2, [r7, #4]
 8028240:	68b9      	ldr	r1, [r7, #8]
 8028242:	4618      	mov	r0, r3
 8028244:	f002 fbdc 	bl	802aa00 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8028248:	68bb      	ldr	r3, [r7, #8]
 802824a:	681b      	ldr	r3, [r3, #0]
 802824c:	2b02      	cmp	r3, #2
 802824e:	d104      	bne.n	802825a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8028250:	68fb      	ldr	r3, [r7, #12]
 8028252:	2205      	movs	r2, #5
 8028254:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8028258:	e006      	b.n	8028268 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 802825a:	68fb      	ldr	r3, [r7, #12]
 802825c:	2201      	movs	r2, #1
 802825e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8028262:	e001      	b.n	8028268 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8028264:	2301      	movs	r3, #1
 8028266:	e000      	b.n	802826a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8028268:	2300      	movs	r3, #0
}
 802826a:	4618      	mov	r0, r3
 802826c:	3718      	adds	r7, #24
 802826e:	46bd      	mov	sp, r7
 8028270:	bd80      	pop	{r7, pc}

08028272 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8028272:	b580      	push	{r7, lr}
 8028274:	b082      	sub	sp, #8
 8028276:	af00      	add	r7, sp, #0
 8028278:	6078      	str	r0, [r7, #4]
 802827a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 802827c:	687b      	ldr	r3, [r7, #4]
 802827e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8028282:	b2db      	uxtb	r3, r3
 8028284:	2b02      	cmp	r3, #2
 8028286:	d101      	bne.n	802828c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8028288:	2302      	movs	r3, #2
 802828a:	e016      	b.n	80282ba <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 802828c:	687b      	ldr	r3, [r7, #4]
 802828e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8028292:	b2db      	uxtb	r3, r3
 8028294:	2b01      	cmp	r3, #1
 8028296:	d10f      	bne.n	80282b8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8028298:	687b      	ldr	r3, [r7, #4]
 802829a:	2202      	movs	r2, #2
 802829c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80282a0:	687b      	ldr	r3, [r7, #4]
 80282a2:	681b      	ldr	r3, [r3, #0]
 80282a4:	6839      	ldr	r1, [r7, #0]
 80282a6:	4618      	mov	r0, r3
 80282a8:	f002 fbe7 	bl	802aa7a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80282ac:	687b      	ldr	r3, [r7, #4]
 80282ae:	2201      	movs	r2, #1
 80282b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80282b4:	2300      	movs	r3, #0
 80282b6:	e000      	b.n	80282ba <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80282b8:	2301      	movs	r3, #1
}
 80282ba:	4618      	mov	r0, r3
 80282bc:	3708      	adds	r7, #8
 80282be:	46bd      	mov	sp, r7
 80282c0:	bd80      	pop	{r7, pc}

080282c2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80282c2:	b580      	push	{r7, lr}
 80282c4:	b082      	sub	sp, #8
 80282c6:	af00      	add	r7, sp, #0
 80282c8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80282ca:	687b      	ldr	r3, [r7, #4]
 80282cc:	2b00      	cmp	r3, #0
 80282ce:	d101      	bne.n	80282d4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80282d0:	2301      	movs	r3, #1
 80282d2:	e07b      	b.n	80283cc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80282d4:	687b      	ldr	r3, [r7, #4]
 80282d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80282d8:	2b00      	cmp	r3, #0
 80282da:	d108      	bne.n	80282ee <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80282dc:	687b      	ldr	r3, [r7, #4]
 80282de:	685b      	ldr	r3, [r3, #4]
 80282e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80282e4:	d009      	beq.n	80282fa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80282e6:	687b      	ldr	r3, [r7, #4]
 80282e8:	2200      	movs	r2, #0
 80282ea:	61da      	str	r2, [r3, #28]
 80282ec:	e005      	b.n	80282fa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80282ee:	687b      	ldr	r3, [r7, #4]
 80282f0:	2200      	movs	r2, #0
 80282f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80282f4:	687b      	ldr	r3, [r7, #4]
 80282f6:	2200      	movs	r2, #0
 80282f8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80282fa:	687b      	ldr	r3, [r7, #4]
 80282fc:	2200      	movs	r2, #0
 80282fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8028300:	687b      	ldr	r3, [r7, #4]
 8028302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028306:	b2db      	uxtb	r3, r3
 8028308:	2b00      	cmp	r3, #0
 802830a:	d106      	bne.n	802831a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802830c:	687b      	ldr	r3, [r7, #4]
 802830e:	2200      	movs	r2, #0
 8028310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8028314:	6878      	ldr	r0, [r7, #4]
 8028316:	f7f9 fc09 	bl	8021b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802831a:	687b      	ldr	r3, [r7, #4]
 802831c:	2202      	movs	r2, #2
 802831e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8028322:	687b      	ldr	r3, [r7, #4]
 8028324:	681b      	ldr	r3, [r3, #0]
 8028326:	681a      	ldr	r2, [r3, #0]
 8028328:	687b      	ldr	r3, [r7, #4]
 802832a:	681b      	ldr	r3, [r3, #0]
 802832c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028330:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8028332:	687b      	ldr	r3, [r7, #4]
 8028334:	685b      	ldr	r3, [r3, #4]
 8028336:	f403 7282 	and.w	r2, r3, #260	; 0x104
 802833a:	687b      	ldr	r3, [r7, #4]
 802833c:	689b      	ldr	r3, [r3, #8]
 802833e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8028342:	431a      	orrs	r2, r3
 8028344:	687b      	ldr	r3, [r7, #4]
 8028346:	68db      	ldr	r3, [r3, #12]
 8028348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802834c:	431a      	orrs	r2, r3
 802834e:	687b      	ldr	r3, [r7, #4]
 8028350:	691b      	ldr	r3, [r3, #16]
 8028352:	f003 0302 	and.w	r3, r3, #2
 8028356:	431a      	orrs	r2, r3
 8028358:	687b      	ldr	r3, [r7, #4]
 802835a:	695b      	ldr	r3, [r3, #20]
 802835c:	f003 0301 	and.w	r3, r3, #1
 8028360:	431a      	orrs	r2, r3
 8028362:	687b      	ldr	r3, [r7, #4]
 8028364:	699b      	ldr	r3, [r3, #24]
 8028366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802836a:	431a      	orrs	r2, r3
 802836c:	687b      	ldr	r3, [r7, #4]
 802836e:	69db      	ldr	r3, [r3, #28]
 8028370:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8028374:	431a      	orrs	r2, r3
 8028376:	687b      	ldr	r3, [r7, #4]
 8028378:	6a1b      	ldr	r3, [r3, #32]
 802837a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802837e:	ea42 0103 	orr.w	r1, r2, r3
 8028382:	687b      	ldr	r3, [r7, #4]
 8028384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028386:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 802838a:	687b      	ldr	r3, [r7, #4]
 802838c:	681b      	ldr	r3, [r3, #0]
 802838e:	430a      	orrs	r2, r1
 8028390:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8028392:	687b      	ldr	r3, [r7, #4]
 8028394:	699b      	ldr	r3, [r3, #24]
 8028396:	0c1b      	lsrs	r3, r3, #16
 8028398:	f003 0104 	and.w	r1, r3, #4
 802839c:	687b      	ldr	r3, [r7, #4]
 802839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80283a0:	f003 0210 	and.w	r2, r3, #16
 80283a4:	687b      	ldr	r3, [r7, #4]
 80283a6:	681b      	ldr	r3, [r3, #0]
 80283a8:	430a      	orrs	r2, r1
 80283aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80283ac:	687b      	ldr	r3, [r7, #4]
 80283ae:	681b      	ldr	r3, [r3, #0]
 80283b0:	69da      	ldr	r2, [r3, #28]
 80283b2:	687b      	ldr	r3, [r7, #4]
 80283b4:	681b      	ldr	r3, [r3, #0]
 80283b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80283ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80283bc:	687b      	ldr	r3, [r7, #4]
 80283be:	2200      	movs	r2, #0
 80283c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80283c2:	687b      	ldr	r3, [r7, #4]
 80283c4:	2201      	movs	r2, #1
 80283c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80283ca:	2300      	movs	r3, #0
}
 80283cc:	4618      	mov	r0, r3
 80283ce:	3708      	adds	r7, #8
 80283d0:	46bd      	mov	sp, r7
 80283d2:	bd80      	pop	{r7, pc}

080283d4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80283d4:	b580      	push	{r7, lr}
 80283d6:	b082      	sub	sp, #8
 80283d8:	af00      	add	r7, sp, #0
 80283da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80283dc:	687b      	ldr	r3, [r7, #4]
 80283de:	2b00      	cmp	r3, #0
 80283e0:	d101      	bne.n	80283e6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80283e2:	2301      	movs	r3, #1
 80283e4:	e01a      	b.n	802841c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80283e6:	687b      	ldr	r3, [r7, #4]
 80283e8:	2202      	movs	r2, #2
 80283ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80283ee:	687b      	ldr	r3, [r7, #4]
 80283f0:	681b      	ldr	r3, [r3, #0]
 80283f2:	681a      	ldr	r2, [r3, #0]
 80283f4:	687b      	ldr	r3, [r7, #4]
 80283f6:	681b      	ldr	r3, [r3, #0]
 80283f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80283fc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80283fe:	6878      	ldr	r0, [r7, #4]
 8028400:	f7f9 fbdc 	bl	8021bbc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8028404:	687b      	ldr	r3, [r7, #4]
 8028406:	2200      	movs	r2, #0
 8028408:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 802840a:	687b      	ldr	r3, [r7, #4]
 802840c:	2200      	movs	r2, #0
 802840e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8028412:	687b      	ldr	r3, [r7, #4]
 8028414:	2200      	movs	r2, #0
 8028416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 802841a:	2300      	movs	r3, #0
}
 802841c:	4618      	mov	r0, r3
 802841e:	3708      	adds	r7, #8
 8028420:	46bd      	mov	sp, r7
 8028422:	bd80      	pop	{r7, pc}

08028424 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028424:	b580      	push	{r7, lr}
 8028426:	b088      	sub	sp, #32
 8028428:	af00      	add	r7, sp, #0
 802842a:	60f8      	str	r0, [r7, #12]
 802842c:	60b9      	str	r1, [r7, #8]
 802842e:	603b      	str	r3, [r7, #0]
 8028430:	4613      	mov	r3, r2
 8028432:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028434:	2300      	movs	r3, #0
 8028436:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028438:	68fb      	ldr	r3, [r7, #12]
 802843a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802843e:	2b01      	cmp	r3, #1
 8028440:	d101      	bne.n	8028446 <HAL_SPI_Transmit+0x22>
 8028442:	2302      	movs	r3, #2
 8028444:	e126      	b.n	8028694 <HAL_SPI_Transmit+0x270>
 8028446:	68fb      	ldr	r3, [r7, #12]
 8028448:	2201      	movs	r2, #1
 802844a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802844e:	f7fb f91d 	bl	802368c <HAL_GetTick>
 8028452:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8028454:	88fb      	ldrh	r3, [r7, #6]
 8028456:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028458:	68fb      	ldr	r3, [r7, #12]
 802845a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802845e:	b2db      	uxtb	r3, r3
 8028460:	2b01      	cmp	r3, #1
 8028462:	d002      	beq.n	802846a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8028464:	2302      	movs	r3, #2
 8028466:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028468:	e10b      	b.n	8028682 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 802846a:	68bb      	ldr	r3, [r7, #8]
 802846c:	2b00      	cmp	r3, #0
 802846e:	d002      	beq.n	8028476 <HAL_SPI_Transmit+0x52>
 8028470:	88fb      	ldrh	r3, [r7, #6]
 8028472:	2b00      	cmp	r3, #0
 8028474:	d102      	bne.n	802847c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8028476:	2301      	movs	r3, #1
 8028478:	77fb      	strb	r3, [r7, #31]
    goto error;
 802847a:	e102      	b.n	8028682 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 802847c:	68fb      	ldr	r3, [r7, #12]
 802847e:	2203      	movs	r2, #3
 8028480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028484:	68fb      	ldr	r3, [r7, #12]
 8028486:	2200      	movs	r2, #0
 8028488:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 802848a:	68fb      	ldr	r3, [r7, #12]
 802848c:	68ba      	ldr	r2, [r7, #8]
 802848e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8028490:	68fb      	ldr	r3, [r7, #12]
 8028492:	88fa      	ldrh	r2, [r7, #6]
 8028494:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8028496:	68fb      	ldr	r3, [r7, #12]
 8028498:	88fa      	ldrh	r2, [r7, #6]
 802849a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 802849c:	68fb      	ldr	r3, [r7, #12]
 802849e:	2200      	movs	r2, #0
 80284a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80284a2:	68fb      	ldr	r3, [r7, #12]
 80284a4:	2200      	movs	r2, #0
 80284a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80284a8:	68fb      	ldr	r3, [r7, #12]
 80284aa:	2200      	movs	r2, #0
 80284ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80284ae:	68fb      	ldr	r3, [r7, #12]
 80284b0:	2200      	movs	r2, #0
 80284b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80284b4:	68fb      	ldr	r3, [r7, #12]
 80284b6:	2200      	movs	r2, #0
 80284b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80284ba:	68fb      	ldr	r3, [r7, #12]
 80284bc:	689b      	ldr	r3, [r3, #8]
 80284be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80284c2:	d10f      	bne.n	80284e4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80284c4:	68fb      	ldr	r3, [r7, #12]
 80284c6:	681b      	ldr	r3, [r3, #0]
 80284c8:	681a      	ldr	r2, [r3, #0]
 80284ca:	68fb      	ldr	r3, [r7, #12]
 80284cc:	681b      	ldr	r3, [r3, #0]
 80284ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80284d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80284d4:	68fb      	ldr	r3, [r7, #12]
 80284d6:	681b      	ldr	r3, [r3, #0]
 80284d8:	681a      	ldr	r2, [r3, #0]
 80284da:	68fb      	ldr	r3, [r7, #12]
 80284dc:	681b      	ldr	r3, [r3, #0]
 80284de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80284e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80284e4:	68fb      	ldr	r3, [r7, #12]
 80284e6:	681b      	ldr	r3, [r3, #0]
 80284e8:	681b      	ldr	r3, [r3, #0]
 80284ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80284ee:	2b40      	cmp	r3, #64	; 0x40
 80284f0:	d007      	beq.n	8028502 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80284f2:	68fb      	ldr	r3, [r7, #12]
 80284f4:	681b      	ldr	r3, [r3, #0]
 80284f6:	681a      	ldr	r2, [r3, #0]
 80284f8:	68fb      	ldr	r3, [r7, #12]
 80284fa:	681b      	ldr	r3, [r3, #0]
 80284fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028500:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028502:	68fb      	ldr	r3, [r7, #12]
 8028504:	68db      	ldr	r3, [r3, #12]
 8028506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802850a:	d14b      	bne.n	80285a4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802850c:	68fb      	ldr	r3, [r7, #12]
 802850e:	685b      	ldr	r3, [r3, #4]
 8028510:	2b00      	cmp	r3, #0
 8028512:	d002      	beq.n	802851a <HAL_SPI_Transmit+0xf6>
 8028514:	8afb      	ldrh	r3, [r7, #22]
 8028516:	2b01      	cmp	r3, #1
 8028518:	d13e      	bne.n	8028598 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802851a:	68fb      	ldr	r3, [r7, #12]
 802851c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802851e:	881a      	ldrh	r2, [r3, #0]
 8028520:	68fb      	ldr	r3, [r7, #12]
 8028522:	681b      	ldr	r3, [r3, #0]
 8028524:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8028526:	68fb      	ldr	r3, [r7, #12]
 8028528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802852a:	1c9a      	adds	r2, r3, #2
 802852c:	68fb      	ldr	r3, [r7, #12]
 802852e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028530:	68fb      	ldr	r3, [r7, #12]
 8028532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028534:	b29b      	uxth	r3, r3
 8028536:	3b01      	subs	r3, #1
 8028538:	b29a      	uxth	r2, r3
 802853a:	68fb      	ldr	r3, [r7, #12]
 802853c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 802853e:	e02b      	b.n	8028598 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028540:	68fb      	ldr	r3, [r7, #12]
 8028542:	681b      	ldr	r3, [r3, #0]
 8028544:	689b      	ldr	r3, [r3, #8]
 8028546:	f003 0302 	and.w	r3, r3, #2
 802854a:	2b02      	cmp	r3, #2
 802854c:	d112      	bne.n	8028574 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802854e:	68fb      	ldr	r3, [r7, #12]
 8028550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028552:	881a      	ldrh	r2, [r3, #0]
 8028554:	68fb      	ldr	r3, [r7, #12]
 8028556:	681b      	ldr	r3, [r3, #0]
 8028558:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802855a:	68fb      	ldr	r3, [r7, #12]
 802855c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802855e:	1c9a      	adds	r2, r3, #2
 8028560:	68fb      	ldr	r3, [r7, #12]
 8028562:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028564:	68fb      	ldr	r3, [r7, #12]
 8028566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028568:	b29b      	uxth	r3, r3
 802856a:	3b01      	subs	r3, #1
 802856c:	b29a      	uxth	r2, r3
 802856e:	68fb      	ldr	r3, [r7, #12]
 8028570:	86da      	strh	r2, [r3, #54]	; 0x36
 8028572:	e011      	b.n	8028598 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028574:	f7fb f88a 	bl	802368c <HAL_GetTick>
 8028578:	4602      	mov	r2, r0
 802857a:	69bb      	ldr	r3, [r7, #24]
 802857c:	1ad3      	subs	r3, r2, r3
 802857e:	683a      	ldr	r2, [r7, #0]
 8028580:	429a      	cmp	r2, r3
 8028582:	d803      	bhi.n	802858c <HAL_SPI_Transmit+0x168>
 8028584:	683b      	ldr	r3, [r7, #0]
 8028586:	f1b3 3fff 	cmp.w	r3, #4294967295
 802858a:	d102      	bne.n	8028592 <HAL_SPI_Transmit+0x16e>
 802858c:	683b      	ldr	r3, [r7, #0]
 802858e:	2b00      	cmp	r3, #0
 8028590:	d102      	bne.n	8028598 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8028592:	2303      	movs	r3, #3
 8028594:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028596:	e074      	b.n	8028682 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8028598:	68fb      	ldr	r3, [r7, #12]
 802859a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802859c:	b29b      	uxth	r3, r3
 802859e:	2b00      	cmp	r3, #0
 80285a0:	d1ce      	bne.n	8028540 <HAL_SPI_Transmit+0x11c>
 80285a2:	e04c      	b.n	802863e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80285a4:	68fb      	ldr	r3, [r7, #12]
 80285a6:	685b      	ldr	r3, [r3, #4]
 80285a8:	2b00      	cmp	r3, #0
 80285aa:	d002      	beq.n	80285b2 <HAL_SPI_Transmit+0x18e>
 80285ac:	8afb      	ldrh	r3, [r7, #22]
 80285ae:	2b01      	cmp	r3, #1
 80285b0:	d140      	bne.n	8028634 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80285b2:	68fb      	ldr	r3, [r7, #12]
 80285b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80285b6:	68fb      	ldr	r3, [r7, #12]
 80285b8:	681b      	ldr	r3, [r3, #0]
 80285ba:	330c      	adds	r3, #12
 80285bc:	7812      	ldrb	r2, [r2, #0]
 80285be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80285c0:	68fb      	ldr	r3, [r7, #12]
 80285c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285c4:	1c5a      	adds	r2, r3, #1
 80285c6:	68fb      	ldr	r3, [r7, #12]
 80285c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80285ca:	68fb      	ldr	r3, [r7, #12]
 80285cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80285ce:	b29b      	uxth	r3, r3
 80285d0:	3b01      	subs	r3, #1
 80285d2:	b29a      	uxth	r2, r3
 80285d4:	68fb      	ldr	r3, [r7, #12]
 80285d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80285d8:	e02c      	b.n	8028634 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80285da:	68fb      	ldr	r3, [r7, #12]
 80285dc:	681b      	ldr	r3, [r3, #0]
 80285de:	689b      	ldr	r3, [r3, #8]
 80285e0:	f003 0302 	and.w	r3, r3, #2
 80285e4:	2b02      	cmp	r3, #2
 80285e6:	d113      	bne.n	8028610 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80285e8:	68fb      	ldr	r3, [r7, #12]
 80285ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80285ec:	68fb      	ldr	r3, [r7, #12]
 80285ee:	681b      	ldr	r3, [r3, #0]
 80285f0:	330c      	adds	r3, #12
 80285f2:	7812      	ldrb	r2, [r2, #0]
 80285f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80285f6:	68fb      	ldr	r3, [r7, #12]
 80285f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285fa:	1c5a      	adds	r2, r3, #1
 80285fc:	68fb      	ldr	r3, [r7, #12]
 80285fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028600:	68fb      	ldr	r3, [r7, #12]
 8028602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028604:	b29b      	uxth	r3, r3
 8028606:	3b01      	subs	r3, #1
 8028608:	b29a      	uxth	r2, r3
 802860a:	68fb      	ldr	r3, [r7, #12]
 802860c:	86da      	strh	r2, [r3, #54]	; 0x36
 802860e:	e011      	b.n	8028634 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028610:	f7fb f83c 	bl	802368c <HAL_GetTick>
 8028614:	4602      	mov	r2, r0
 8028616:	69bb      	ldr	r3, [r7, #24]
 8028618:	1ad3      	subs	r3, r2, r3
 802861a:	683a      	ldr	r2, [r7, #0]
 802861c:	429a      	cmp	r2, r3
 802861e:	d803      	bhi.n	8028628 <HAL_SPI_Transmit+0x204>
 8028620:	683b      	ldr	r3, [r7, #0]
 8028622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028626:	d102      	bne.n	802862e <HAL_SPI_Transmit+0x20a>
 8028628:	683b      	ldr	r3, [r7, #0]
 802862a:	2b00      	cmp	r3, #0
 802862c:	d102      	bne.n	8028634 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 802862e:	2303      	movs	r3, #3
 8028630:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028632:	e026      	b.n	8028682 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8028634:	68fb      	ldr	r3, [r7, #12]
 8028636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028638:	b29b      	uxth	r3, r3
 802863a:	2b00      	cmp	r3, #0
 802863c:	d1cd      	bne.n	80285da <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802863e:	69ba      	ldr	r2, [r7, #24]
 8028640:	6839      	ldr	r1, [r7, #0]
 8028642:	68f8      	ldr	r0, [r7, #12]
 8028644:	f000 fbda 	bl	8028dfc <SPI_EndRxTxTransaction>
 8028648:	4603      	mov	r3, r0
 802864a:	2b00      	cmp	r3, #0
 802864c:	d002      	beq.n	8028654 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802864e:	68fb      	ldr	r3, [r7, #12]
 8028650:	2220      	movs	r2, #32
 8028652:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028654:	68fb      	ldr	r3, [r7, #12]
 8028656:	689b      	ldr	r3, [r3, #8]
 8028658:	2b00      	cmp	r3, #0
 802865a:	d10a      	bne.n	8028672 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802865c:	2300      	movs	r3, #0
 802865e:	613b      	str	r3, [r7, #16]
 8028660:	68fb      	ldr	r3, [r7, #12]
 8028662:	681b      	ldr	r3, [r3, #0]
 8028664:	68db      	ldr	r3, [r3, #12]
 8028666:	613b      	str	r3, [r7, #16]
 8028668:	68fb      	ldr	r3, [r7, #12]
 802866a:	681b      	ldr	r3, [r3, #0]
 802866c:	689b      	ldr	r3, [r3, #8]
 802866e:	613b      	str	r3, [r7, #16]
 8028670:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028672:	68fb      	ldr	r3, [r7, #12]
 8028674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028676:	2b00      	cmp	r3, #0
 8028678:	d002      	beq.n	8028680 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 802867a:	2301      	movs	r3, #1
 802867c:	77fb      	strb	r3, [r7, #31]
 802867e:	e000      	b.n	8028682 <HAL_SPI_Transmit+0x25e>
  }

error:
 8028680:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028682:	68fb      	ldr	r3, [r7, #12]
 8028684:	2201      	movs	r2, #1
 8028686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 802868a:	68fb      	ldr	r3, [r7, #12]
 802868c:	2200      	movs	r2, #0
 802868e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028692:	7ffb      	ldrb	r3, [r7, #31]
}
 8028694:	4618      	mov	r0, r3
 8028696:	3720      	adds	r7, #32
 8028698:	46bd      	mov	sp, r7
 802869a:	bd80      	pop	{r7, pc}

0802869c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802869c:	b580      	push	{r7, lr}
 802869e:	b088      	sub	sp, #32
 80286a0:	af02      	add	r7, sp, #8
 80286a2:	60f8      	str	r0, [r7, #12]
 80286a4:	60b9      	str	r1, [r7, #8]
 80286a6:	603b      	str	r3, [r7, #0]
 80286a8:	4613      	mov	r3, r2
 80286aa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80286ac:	2300      	movs	r3, #0
 80286ae:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80286b0:	68fb      	ldr	r3, [r7, #12]
 80286b2:	685b      	ldr	r3, [r3, #4]
 80286b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80286b8:	d112      	bne.n	80286e0 <HAL_SPI_Receive+0x44>
 80286ba:	68fb      	ldr	r3, [r7, #12]
 80286bc:	689b      	ldr	r3, [r3, #8]
 80286be:	2b00      	cmp	r3, #0
 80286c0:	d10e      	bne.n	80286e0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80286c2:	68fb      	ldr	r3, [r7, #12]
 80286c4:	2204      	movs	r2, #4
 80286c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80286ca:	88fa      	ldrh	r2, [r7, #6]
 80286cc:	683b      	ldr	r3, [r7, #0]
 80286ce:	9300      	str	r3, [sp, #0]
 80286d0:	4613      	mov	r3, r2
 80286d2:	68ba      	ldr	r2, [r7, #8]
 80286d4:	68b9      	ldr	r1, [r7, #8]
 80286d6:	68f8      	ldr	r0, [r7, #12]
 80286d8:	f000 f8f1 	bl	80288be <HAL_SPI_TransmitReceive>
 80286dc:	4603      	mov	r3, r0
 80286de:	e0ea      	b.n	80288b6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80286e0:	68fb      	ldr	r3, [r7, #12]
 80286e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80286e6:	2b01      	cmp	r3, #1
 80286e8:	d101      	bne.n	80286ee <HAL_SPI_Receive+0x52>
 80286ea:	2302      	movs	r3, #2
 80286ec:	e0e3      	b.n	80288b6 <HAL_SPI_Receive+0x21a>
 80286ee:	68fb      	ldr	r3, [r7, #12]
 80286f0:	2201      	movs	r2, #1
 80286f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80286f6:	f7fa ffc9 	bl	802368c <HAL_GetTick>
 80286fa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80286fc:	68fb      	ldr	r3, [r7, #12]
 80286fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028702:	b2db      	uxtb	r3, r3
 8028704:	2b01      	cmp	r3, #1
 8028706:	d002      	beq.n	802870e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8028708:	2302      	movs	r3, #2
 802870a:	75fb      	strb	r3, [r7, #23]
    goto error;
 802870c:	e0ca      	b.n	80288a4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 802870e:	68bb      	ldr	r3, [r7, #8]
 8028710:	2b00      	cmp	r3, #0
 8028712:	d002      	beq.n	802871a <HAL_SPI_Receive+0x7e>
 8028714:	88fb      	ldrh	r3, [r7, #6]
 8028716:	2b00      	cmp	r3, #0
 8028718:	d102      	bne.n	8028720 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 802871a:	2301      	movs	r3, #1
 802871c:	75fb      	strb	r3, [r7, #23]
    goto error;
 802871e:	e0c1      	b.n	80288a4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8028720:	68fb      	ldr	r3, [r7, #12]
 8028722:	2204      	movs	r2, #4
 8028724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028728:	68fb      	ldr	r3, [r7, #12]
 802872a:	2200      	movs	r2, #0
 802872c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 802872e:	68fb      	ldr	r3, [r7, #12]
 8028730:	68ba      	ldr	r2, [r7, #8]
 8028732:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8028734:	68fb      	ldr	r3, [r7, #12]
 8028736:	88fa      	ldrh	r2, [r7, #6]
 8028738:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 802873a:	68fb      	ldr	r3, [r7, #12]
 802873c:	88fa      	ldrh	r2, [r7, #6]
 802873e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8028740:	68fb      	ldr	r3, [r7, #12]
 8028742:	2200      	movs	r2, #0
 8028744:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8028746:	68fb      	ldr	r3, [r7, #12]
 8028748:	2200      	movs	r2, #0
 802874a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 802874c:	68fb      	ldr	r3, [r7, #12]
 802874e:	2200      	movs	r2, #0
 8028750:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8028752:	68fb      	ldr	r3, [r7, #12]
 8028754:	2200      	movs	r2, #0
 8028756:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028758:	68fb      	ldr	r3, [r7, #12]
 802875a:	2200      	movs	r2, #0
 802875c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802875e:	68fb      	ldr	r3, [r7, #12]
 8028760:	689b      	ldr	r3, [r3, #8]
 8028762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028766:	d10f      	bne.n	8028788 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8028768:	68fb      	ldr	r3, [r7, #12]
 802876a:	681b      	ldr	r3, [r3, #0]
 802876c:	681a      	ldr	r2, [r3, #0]
 802876e:	68fb      	ldr	r3, [r7, #12]
 8028770:	681b      	ldr	r3, [r3, #0]
 8028772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028776:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8028778:	68fb      	ldr	r3, [r7, #12]
 802877a:	681b      	ldr	r3, [r3, #0]
 802877c:	681a      	ldr	r2, [r3, #0]
 802877e:	68fb      	ldr	r3, [r7, #12]
 8028780:	681b      	ldr	r3, [r3, #0]
 8028782:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8028786:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028788:	68fb      	ldr	r3, [r7, #12]
 802878a:	681b      	ldr	r3, [r3, #0]
 802878c:	681b      	ldr	r3, [r3, #0]
 802878e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028792:	2b40      	cmp	r3, #64	; 0x40
 8028794:	d007      	beq.n	80287a6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028796:	68fb      	ldr	r3, [r7, #12]
 8028798:	681b      	ldr	r3, [r3, #0]
 802879a:	681a      	ldr	r2, [r3, #0]
 802879c:	68fb      	ldr	r3, [r7, #12]
 802879e:	681b      	ldr	r3, [r3, #0]
 80287a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80287a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80287a6:	68fb      	ldr	r3, [r7, #12]
 80287a8:	68db      	ldr	r3, [r3, #12]
 80287aa:	2b00      	cmp	r3, #0
 80287ac:	d162      	bne.n	8028874 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80287ae:	e02e      	b.n	802880e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80287b0:	68fb      	ldr	r3, [r7, #12]
 80287b2:	681b      	ldr	r3, [r3, #0]
 80287b4:	689b      	ldr	r3, [r3, #8]
 80287b6:	f003 0301 	and.w	r3, r3, #1
 80287ba:	2b01      	cmp	r3, #1
 80287bc:	d115      	bne.n	80287ea <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80287be:	68fb      	ldr	r3, [r7, #12]
 80287c0:	681b      	ldr	r3, [r3, #0]
 80287c2:	f103 020c 	add.w	r2, r3, #12
 80287c6:	68fb      	ldr	r3, [r7, #12]
 80287c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80287ca:	7812      	ldrb	r2, [r2, #0]
 80287cc:	b2d2      	uxtb	r2, r2
 80287ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80287d0:	68fb      	ldr	r3, [r7, #12]
 80287d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80287d4:	1c5a      	adds	r2, r3, #1
 80287d6:	68fb      	ldr	r3, [r7, #12]
 80287d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80287da:	68fb      	ldr	r3, [r7, #12]
 80287dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80287de:	b29b      	uxth	r3, r3
 80287e0:	3b01      	subs	r3, #1
 80287e2:	b29a      	uxth	r2, r3
 80287e4:	68fb      	ldr	r3, [r7, #12]
 80287e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80287e8:	e011      	b.n	802880e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80287ea:	f7fa ff4f 	bl	802368c <HAL_GetTick>
 80287ee:	4602      	mov	r2, r0
 80287f0:	693b      	ldr	r3, [r7, #16]
 80287f2:	1ad3      	subs	r3, r2, r3
 80287f4:	683a      	ldr	r2, [r7, #0]
 80287f6:	429a      	cmp	r2, r3
 80287f8:	d803      	bhi.n	8028802 <HAL_SPI_Receive+0x166>
 80287fa:	683b      	ldr	r3, [r7, #0]
 80287fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028800:	d102      	bne.n	8028808 <HAL_SPI_Receive+0x16c>
 8028802:	683b      	ldr	r3, [r7, #0]
 8028804:	2b00      	cmp	r3, #0
 8028806:	d102      	bne.n	802880e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8028808:	2303      	movs	r3, #3
 802880a:	75fb      	strb	r3, [r7, #23]
          goto error;
 802880c:	e04a      	b.n	80288a4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 802880e:	68fb      	ldr	r3, [r7, #12]
 8028810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028812:	b29b      	uxth	r3, r3
 8028814:	2b00      	cmp	r3, #0
 8028816:	d1cb      	bne.n	80287b0 <HAL_SPI_Receive+0x114>
 8028818:	e031      	b.n	802887e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 802881a:	68fb      	ldr	r3, [r7, #12]
 802881c:	681b      	ldr	r3, [r3, #0]
 802881e:	689b      	ldr	r3, [r3, #8]
 8028820:	f003 0301 	and.w	r3, r3, #1
 8028824:	2b01      	cmp	r3, #1
 8028826:	d113      	bne.n	8028850 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028828:	68fb      	ldr	r3, [r7, #12]
 802882a:	681b      	ldr	r3, [r3, #0]
 802882c:	68da      	ldr	r2, [r3, #12]
 802882e:	68fb      	ldr	r3, [r7, #12]
 8028830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028832:	b292      	uxth	r2, r2
 8028834:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028836:	68fb      	ldr	r3, [r7, #12]
 8028838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802883a:	1c9a      	adds	r2, r3, #2
 802883c:	68fb      	ldr	r3, [r7, #12]
 802883e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028840:	68fb      	ldr	r3, [r7, #12]
 8028842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028844:	b29b      	uxth	r3, r3
 8028846:	3b01      	subs	r3, #1
 8028848:	b29a      	uxth	r2, r3
 802884a:	68fb      	ldr	r3, [r7, #12]
 802884c:	87da      	strh	r2, [r3, #62]	; 0x3e
 802884e:	e011      	b.n	8028874 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028850:	f7fa ff1c 	bl	802368c <HAL_GetTick>
 8028854:	4602      	mov	r2, r0
 8028856:	693b      	ldr	r3, [r7, #16]
 8028858:	1ad3      	subs	r3, r2, r3
 802885a:	683a      	ldr	r2, [r7, #0]
 802885c:	429a      	cmp	r2, r3
 802885e:	d803      	bhi.n	8028868 <HAL_SPI_Receive+0x1cc>
 8028860:	683b      	ldr	r3, [r7, #0]
 8028862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028866:	d102      	bne.n	802886e <HAL_SPI_Receive+0x1d2>
 8028868:	683b      	ldr	r3, [r7, #0]
 802886a:	2b00      	cmp	r3, #0
 802886c:	d102      	bne.n	8028874 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 802886e:	2303      	movs	r3, #3
 8028870:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028872:	e017      	b.n	80288a4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8028874:	68fb      	ldr	r3, [r7, #12]
 8028876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028878:	b29b      	uxth	r3, r3
 802887a:	2b00      	cmp	r3, #0
 802887c:	d1cd      	bne.n	802881a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802887e:	693a      	ldr	r2, [r7, #16]
 8028880:	6839      	ldr	r1, [r7, #0]
 8028882:	68f8      	ldr	r0, [r7, #12]
 8028884:	f000 fa54 	bl	8028d30 <SPI_EndRxTransaction>
 8028888:	4603      	mov	r3, r0
 802888a:	2b00      	cmp	r3, #0
 802888c:	d002      	beq.n	8028894 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802888e:	68fb      	ldr	r3, [r7, #12]
 8028890:	2220      	movs	r2, #32
 8028892:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028894:	68fb      	ldr	r3, [r7, #12]
 8028896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028898:	2b00      	cmp	r3, #0
 802889a:	d002      	beq.n	80288a2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 802889c:	2301      	movs	r3, #1
 802889e:	75fb      	strb	r3, [r7, #23]
 80288a0:	e000      	b.n	80288a4 <HAL_SPI_Receive+0x208>
  }

error :
 80288a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80288a4:	68fb      	ldr	r3, [r7, #12]
 80288a6:	2201      	movs	r2, #1
 80288a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80288ac:	68fb      	ldr	r3, [r7, #12]
 80288ae:	2200      	movs	r2, #0
 80288b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80288b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80288b6:	4618      	mov	r0, r3
 80288b8:	3718      	adds	r7, #24
 80288ba:	46bd      	mov	sp, r7
 80288bc:	bd80      	pop	{r7, pc}

080288be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80288be:	b580      	push	{r7, lr}
 80288c0:	b08c      	sub	sp, #48	; 0x30
 80288c2:	af00      	add	r7, sp, #0
 80288c4:	60f8      	str	r0, [r7, #12]
 80288c6:	60b9      	str	r1, [r7, #8]
 80288c8:	607a      	str	r2, [r7, #4]
 80288ca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80288cc:	2301      	movs	r3, #1
 80288ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80288d0:	2300      	movs	r3, #0
 80288d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80288d6:	68fb      	ldr	r3, [r7, #12]
 80288d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80288dc:	2b01      	cmp	r3, #1
 80288de:	d101      	bne.n	80288e4 <HAL_SPI_TransmitReceive+0x26>
 80288e0:	2302      	movs	r3, #2
 80288e2:	e18a      	b.n	8028bfa <HAL_SPI_TransmitReceive+0x33c>
 80288e4:	68fb      	ldr	r3, [r7, #12]
 80288e6:	2201      	movs	r2, #1
 80288e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80288ec:	f7fa fece 	bl	802368c <HAL_GetTick>
 80288f0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80288f2:	68fb      	ldr	r3, [r7, #12]
 80288f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80288f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80288fc:	68fb      	ldr	r3, [r7, #12]
 80288fe:	685b      	ldr	r3, [r3, #4]
 8028900:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8028902:	887b      	ldrh	r3, [r7, #2]
 8028904:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8028906:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802890a:	2b01      	cmp	r3, #1
 802890c:	d00f      	beq.n	802892e <HAL_SPI_TransmitReceive+0x70>
 802890e:	69fb      	ldr	r3, [r7, #28]
 8028910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028914:	d107      	bne.n	8028926 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8028916:	68fb      	ldr	r3, [r7, #12]
 8028918:	689b      	ldr	r3, [r3, #8]
 802891a:	2b00      	cmp	r3, #0
 802891c:	d103      	bne.n	8028926 <HAL_SPI_TransmitReceive+0x68>
 802891e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028922:	2b04      	cmp	r3, #4
 8028924:	d003      	beq.n	802892e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8028926:	2302      	movs	r3, #2
 8028928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 802892c:	e15b      	b.n	8028be6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 802892e:	68bb      	ldr	r3, [r7, #8]
 8028930:	2b00      	cmp	r3, #0
 8028932:	d005      	beq.n	8028940 <HAL_SPI_TransmitReceive+0x82>
 8028934:	687b      	ldr	r3, [r7, #4]
 8028936:	2b00      	cmp	r3, #0
 8028938:	d002      	beq.n	8028940 <HAL_SPI_TransmitReceive+0x82>
 802893a:	887b      	ldrh	r3, [r7, #2]
 802893c:	2b00      	cmp	r3, #0
 802893e:	d103      	bne.n	8028948 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8028940:	2301      	movs	r3, #1
 8028942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028946:	e14e      	b.n	8028be6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8028948:	68fb      	ldr	r3, [r7, #12]
 802894a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802894e:	b2db      	uxtb	r3, r3
 8028950:	2b04      	cmp	r3, #4
 8028952:	d003      	beq.n	802895c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8028954:	68fb      	ldr	r3, [r7, #12]
 8028956:	2205      	movs	r2, #5
 8028958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802895c:	68fb      	ldr	r3, [r7, #12]
 802895e:	2200      	movs	r2, #0
 8028960:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8028962:	68fb      	ldr	r3, [r7, #12]
 8028964:	687a      	ldr	r2, [r7, #4]
 8028966:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8028968:	68fb      	ldr	r3, [r7, #12]
 802896a:	887a      	ldrh	r2, [r7, #2]
 802896c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 802896e:	68fb      	ldr	r3, [r7, #12]
 8028970:	887a      	ldrh	r2, [r7, #2]
 8028972:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8028974:	68fb      	ldr	r3, [r7, #12]
 8028976:	68ba      	ldr	r2, [r7, #8]
 8028978:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 802897a:	68fb      	ldr	r3, [r7, #12]
 802897c:	887a      	ldrh	r2, [r7, #2]
 802897e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8028980:	68fb      	ldr	r3, [r7, #12]
 8028982:	887a      	ldrh	r2, [r7, #2]
 8028984:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8028986:	68fb      	ldr	r3, [r7, #12]
 8028988:	2200      	movs	r2, #0
 802898a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 802898c:	68fb      	ldr	r3, [r7, #12]
 802898e:	2200      	movs	r2, #0
 8028990:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028992:	68fb      	ldr	r3, [r7, #12]
 8028994:	681b      	ldr	r3, [r3, #0]
 8028996:	681b      	ldr	r3, [r3, #0]
 8028998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802899c:	2b40      	cmp	r3, #64	; 0x40
 802899e:	d007      	beq.n	80289b0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80289a0:	68fb      	ldr	r3, [r7, #12]
 80289a2:	681b      	ldr	r3, [r3, #0]
 80289a4:	681a      	ldr	r2, [r3, #0]
 80289a6:	68fb      	ldr	r3, [r7, #12]
 80289a8:	681b      	ldr	r3, [r3, #0]
 80289aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80289ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80289b0:	68fb      	ldr	r3, [r7, #12]
 80289b2:	68db      	ldr	r3, [r3, #12]
 80289b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80289b8:	d178      	bne.n	8028aac <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80289ba:	68fb      	ldr	r3, [r7, #12]
 80289bc:	685b      	ldr	r3, [r3, #4]
 80289be:	2b00      	cmp	r3, #0
 80289c0:	d002      	beq.n	80289c8 <HAL_SPI_TransmitReceive+0x10a>
 80289c2:	8b7b      	ldrh	r3, [r7, #26]
 80289c4:	2b01      	cmp	r3, #1
 80289c6:	d166      	bne.n	8028a96 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80289c8:	68fb      	ldr	r3, [r7, #12]
 80289ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289cc:	881a      	ldrh	r2, [r3, #0]
 80289ce:	68fb      	ldr	r3, [r7, #12]
 80289d0:	681b      	ldr	r3, [r3, #0]
 80289d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80289d4:	68fb      	ldr	r3, [r7, #12]
 80289d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289d8:	1c9a      	adds	r2, r3, #2
 80289da:	68fb      	ldr	r3, [r7, #12]
 80289dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80289de:	68fb      	ldr	r3, [r7, #12]
 80289e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80289e2:	b29b      	uxth	r3, r3
 80289e4:	3b01      	subs	r3, #1
 80289e6:	b29a      	uxth	r2, r3
 80289e8:	68fb      	ldr	r3, [r7, #12]
 80289ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80289ec:	e053      	b.n	8028a96 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80289ee:	68fb      	ldr	r3, [r7, #12]
 80289f0:	681b      	ldr	r3, [r3, #0]
 80289f2:	689b      	ldr	r3, [r3, #8]
 80289f4:	f003 0302 	and.w	r3, r3, #2
 80289f8:	2b02      	cmp	r3, #2
 80289fa:	d11b      	bne.n	8028a34 <HAL_SPI_TransmitReceive+0x176>
 80289fc:	68fb      	ldr	r3, [r7, #12]
 80289fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028a00:	b29b      	uxth	r3, r3
 8028a02:	2b00      	cmp	r3, #0
 8028a04:	d016      	beq.n	8028a34 <HAL_SPI_TransmitReceive+0x176>
 8028a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028a08:	2b01      	cmp	r3, #1
 8028a0a:	d113      	bne.n	8028a34 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028a0c:	68fb      	ldr	r3, [r7, #12]
 8028a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a10:	881a      	ldrh	r2, [r3, #0]
 8028a12:	68fb      	ldr	r3, [r7, #12]
 8028a14:	681b      	ldr	r3, [r3, #0]
 8028a16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028a18:	68fb      	ldr	r3, [r7, #12]
 8028a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a1c:	1c9a      	adds	r2, r3, #2
 8028a1e:	68fb      	ldr	r3, [r7, #12]
 8028a20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028a22:	68fb      	ldr	r3, [r7, #12]
 8028a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028a26:	b29b      	uxth	r3, r3
 8028a28:	3b01      	subs	r3, #1
 8028a2a:	b29a      	uxth	r2, r3
 8028a2c:	68fb      	ldr	r3, [r7, #12]
 8028a2e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028a30:	2300      	movs	r3, #0
 8028a32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028a34:	68fb      	ldr	r3, [r7, #12]
 8028a36:	681b      	ldr	r3, [r3, #0]
 8028a38:	689b      	ldr	r3, [r3, #8]
 8028a3a:	f003 0301 	and.w	r3, r3, #1
 8028a3e:	2b01      	cmp	r3, #1
 8028a40:	d119      	bne.n	8028a76 <HAL_SPI_TransmitReceive+0x1b8>
 8028a42:	68fb      	ldr	r3, [r7, #12]
 8028a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028a46:	b29b      	uxth	r3, r3
 8028a48:	2b00      	cmp	r3, #0
 8028a4a:	d014      	beq.n	8028a76 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028a4c:	68fb      	ldr	r3, [r7, #12]
 8028a4e:	681b      	ldr	r3, [r3, #0]
 8028a50:	68da      	ldr	r2, [r3, #12]
 8028a52:	68fb      	ldr	r3, [r7, #12]
 8028a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a56:	b292      	uxth	r2, r2
 8028a58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028a5a:	68fb      	ldr	r3, [r7, #12]
 8028a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a5e:	1c9a      	adds	r2, r3, #2
 8028a60:	68fb      	ldr	r3, [r7, #12]
 8028a62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028a64:	68fb      	ldr	r3, [r7, #12]
 8028a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028a68:	b29b      	uxth	r3, r3
 8028a6a:	3b01      	subs	r3, #1
 8028a6c:	b29a      	uxth	r2, r3
 8028a6e:	68fb      	ldr	r3, [r7, #12]
 8028a70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028a72:	2301      	movs	r3, #1
 8028a74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8028a76:	f7fa fe09 	bl	802368c <HAL_GetTick>
 8028a7a:	4602      	mov	r2, r0
 8028a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028a7e:	1ad3      	subs	r3, r2, r3
 8028a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028a82:	429a      	cmp	r2, r3
 8028a84:	d807      	bhi.n	8028a96 <HAL_SPI_TransmitReceive+0x1d8>
 8028a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028a8c:	d003      	beq.n	8028a96 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8028a8e:	2303      	movs	r3, #3
 8028a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028a94:	e0a7      	b.n	8028be6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028a96:	68fb      	ldr	r3, [r7, #12]
 8028a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028a9a:	b29b      	uxth	r3, r3
 8028a9c:	2b00      	cmp	r3, #0
 8028a9e:	d1a6      	bne.n	80289ee <HAL_SPI_TransmitReceive+0x130>
 8028aa0:	68fb      	ldr	r3, [r7, #12]
 8028aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028aa4:	b29b      	uxth	r3, r3
 8028aa6:	2b00      	cmp	r3, #0
 8028aa8:	d1a1      	bne.n	80289ee <HAL_SPI_TransmitReceive+0x130>
 8028aaa:	e07c      	b.n	8028ba6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028aac:	68fb      	ldr	r3, [r7, #12]
 8028aae:	685b      	ldr	r3, [r3, #4]
 8028ab0:	2b00      	cmp	r3, #0
 8028ab2:	d002      	beq.n	8028aba <HAL_SPI_TransmitReceive+0x1fc>
 8028ab4:	8b7b      	ldrh	r3, [r7, #26]
 8028ab6:	2b01      	cmp	r3, #1
 8028ab8:	d16b      	bne.n	8028b92 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028aba:	68fb      	ldr	r3, [r7, #12]
 8028abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028abe:	68fb      	ldr	r3, [r7, #12]
 8028ac0:	681b      	ldr	r3, [r3, #0]
 8028ac2:	330c      	adds	r3, #12
 8028ac4:	7812      	ldrb	r2, [r2, #0]
 8028ac6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8028ac8:	68fb      	ldr	r3, [r7, #12]
 8028aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028acc:	1c5a      	adds	r2, r3, #1
 8028ace:	68fb      	ldr	r3, [r7, #12]
 8028ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028ad2:	68fb      	ldr	r3, [r7, #12]
 8028ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028ad6:	b29b      	uxth	r3, r3
 8028ad8:	3b01      	subs	r3, #1
 8028ada:	b29a      	uxth	r2, r3
 8028adc:	68fb      	ldr	r3, [r7, #12]
 8028ade:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028ae0:	e057      	b.n	8028b92 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028ae2:	68fb      	ldr	r3, [r7, #12]
 8028ae4:	681b      	ldr	r3, [r3, #0]
 8028ae6:	689b      	ldr	r3, [r3, #8]
 8028ae8:	f003 0302 	and.w	r3, r3, #2
 8028aec:	2b02      	cmp	r3, #2
 8028aee:	d11c      	bne.n	8028b2a <HAL_SPI_TransmitReceive+0x26c>
 8028af0:	68fb      	ldr	r3, [r7, #12]
 8028af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028af4:	b29b      	uxth	r3, r3
 8028af6:	2b00      	cmp	r3, #0
 8028af8:	d017      	beq.n	8028b2a <HAL_SPI_TransmitReceive+0x26c>
 8028afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028afc:	2b01      	cmp	r3, #1
 8028afe:	d114      	bne.n	8028b2a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8028b00:	68fb      	ldr	r3, [r7, #12]
 8028b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028b04:	68fb      	ldr	r3, [r7, #12]
 8028b06:	681b      	ldr	r3, [r3, #0]
 8028b08:	330c      	adds	r3, #12
 8028b0a:	7812      	ldrb	r2, [r2, #0]
 8028b0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8028b0e:	68fb      	ldr	r3, [r7, #12]
 8028b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b12:	1c5a      	adds	r2, r3, #1
 8028b14:	68fb      	ldr	r3, [r7, #12]
 8028b16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028b18:	68fb      	ldr	r3, [r7, #12]
 8028b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028b1c:	b29b      	uxth	r3, r3
 8028b1e:	3b01      	subs	r3, #1
 8028b20:	b29a      	uxth	r2, r3
 8028b22:	68fb      	ldr	r3, [r7, #12]
 8028b24:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028b26:	2300      	movs	r3, #0
 8028b28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028b2a:	68fb      	ldr	r3, [r7, #12]
 8028b2c:	681b      	ldr	r3, [r3, #0]
 8028b2e:	689b      	ldr	r3, [r3, #8]
 8028b30:	f003 0301 	and.w	r3, r3, #1
 8028b34:	2b01      	cmp	r3, #1
 8028b36:	d119      	bne.n	8028b6c <HAL_SPI_TransmitReceive+0x2ae>
 8028b38:	68fb      	ldr	r3, [r7, #12]
 8028b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028b3c:	b29b      	uxth	r3, r3
 8028b3e:	2b00      	cmp	r3, #0
 8028b40:	d014      	beq.n	8028b6c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8028b42:	68fb      	ldr	r3, [r7, #12]
 8028b44:	681b      	ldr	r3, [r3, #0]
 8028b46:	68da      	ldr	r2, [r3, #12]
 8028b48:	68fb      	ldr	r3, [r7, #12]
 8028b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028b4c:	b2d2      	uxtb	r2, r2
 8028b4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8028b50:	68fb      	ldr	r3, [r7, #12]
 8028b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028b54:	1c5a      	adds	r2, r3, #1
 8028b56:	68fb      	ldr	r3, [r7, #12]
 8028b58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028b5a:	68fb      	ldr	r3, [r7, #12]
 8028b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028b5e:	b29b      	uxth	r3, r3
 8028b60:	3b01      	subs	r3, #1
 8028b62:	b29a      	uxth	r2, r3
 8028b64:	68fb      	ldr	r3, [r7, #12]
 8028b66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028b68:	2301      	movs	r3, #1
 8028b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8028b6c:	f7fa fd8e 	bl	802368c <HAL_GetTick>
 8028b70:	4602      	mov	r2, r0
 8028b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028b74:	1ad3      	subs	r3, r2, r3
 8028b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028b78:	429a      	cmp	r2, r3
 8028b7a:	d803      	bhi.n	8028b84 <HAL_SPI_TransmitReceive+0x2c6>
 8028b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028b82:	d102      	bne.n	8028b8a <HAL_SPI_TransmitReceive+0x2cc>
 8028b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028b86:	2b00      	cmp	r3, #0
 8028b88:	d103      	bne.n	8028b92 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8028b8a:	2303      	movs	r3, #3
 8028b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028b90:	e029      	b.n	8028be6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028b92:	68fb      	ldr	r3, [r7, #12]
 8028b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028b96:	b29b      	uxth	r3, r3
 8028b98:	2b00      	cmp	r3, #0
 8028b9a:	d1a2      	bne.n	8028ae2 <HAL_SPI_TransmitReceive+0x224>
 8028b9c:	68fb      	ldr	r3, [r7, #12]
 8028b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028ba0:	b29b      	uxth	r3, r3
 8028ba2:	2b00      	cmp	r3, #0
 8028ba4:	d19d      	bne.n	8028ae2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028ba8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8028baa:	68f8      	ldr	r0, [r7, #12]
 8028bac:	f000 f926 	bl	8028dfc <SPI_EndRxTxTransaction>
 8028bb0:	4603      	mov	r3, r0
 8028bb2:	2b00      	cmp	r3, #0
 8028bb4:	d006      	beq.n	8028bc4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8028bb6:	2301      	movs	r3, #1
 8028bb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028bbc:	68fb      	ldr	r3, [r7, #12]
 8028bbe:	2220      	movs	r2, #32
 8028bc0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8028bc2:	e010      	b.n	8028be6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028bc4:	68fb      	ldr	r3, [r7, #12]
 8028bc6:	689b      	ldr	r3, [r3, #8]
 8028bc8:	2b00      	cmp	r3, #0
 8028bca:	d10b      	bne.n	8028be4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028bcc:	2300      	movs	r3, #0
 8028bce:	617b      	str	r3, [r7, #20]
 8028bd0:	68fb      	ldr	r3, [r7, #12]
 8028bd2:	681b      	ldr	r3, [r3, #0]
 8028bd4:	68db      	ldr	r3, [r3, #12]
 8028bd6:	617b      	str	r3, [r7, #20]
 8028bd8:	68fb      	ldr	r3, [r7, #12]
 8028bda:	681b      	ldr	r3, [r3, #0]
 8028bdc:	689b      	ldr	r3, [r3, #8]
 8028bde:	617b      	str	r3, [r7, #20]
 8028be0:	697b      	ldr	r3, [r7, #20]
 8028be2:	e000      	b.n	8028be6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8028be4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028be6:	68fb      	ldr	r3, [r7, #12]
 8028be8:	2201      	movs	r2, #1
 8028bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028bee:	68fb      	ldr	r3, [r7, #12]
 8028bf0:	2200      	movs	r2, #0
 8028bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028bf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8028bfa:	4618      	mov	r0, r3
 8028bfc:	3730      	adds	r7, #48	; 0x30
 8028bfe:	46bd      	mov	sp, r7
 8028c00:	bd80      	pop	{r7, pc}

08028c02 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8028c02:	b480      	push	{r7}
 8028c04:	b083      	sub	sp, #12
 8028c06:	af00      	add	r7, sp, #0
 8028c08:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8028c0a:	687b      	ldr	r3, [r7, #4]
 8028c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028c10:	b2db      	uxtb	r3, r3
}
 8028c12:	4618      	mov	r0, r3
 8028c14:	370c      	adds	r7, #12
 8028c16:	46bd      	mov	sp, r7
 8028c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c1c:	4770      	bx	lr
	...

08028c20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8028c20:	b580      	push	{r7, lr}
 8028c22:	b088      	sub	sp, #32
 8028c24:	af00      	add	r7, sp, #0
 8028c26:	60f8      	str	r0, [r7, #12]
 8028c28:	60b9      	str	r1, [r7, #8]
 8028c2a:	603b      	str	r3, [r7, #0]
 8028c2c:	4613      	mov	r3, r2
 8028c2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8028c30:	f7fa fd2c 	bl	802368c <HAL_GetTick>
 8028c34:	4602      	mov	r2, r0
 8028c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028c38:	1a9b      	subs	r3, r3, r2
 8028c3a:	683a      	ldr	r2, [r7, #0]
 8028c3c:	4413      	add	r3, r2
 8028c3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8028c40:	f7fa fd24 	bl	802368c <HAL_GetTick>
 8028c44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8028c46:	4b39      	ldr	r3, [pc, #228]	; (8028d2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8028c48:	681b      	ldr	r3, [r3, #0]
 8028c4a:	015b      	lsls	r3, r3, #5
 8028c4c:	0d1b      	lsrs	r3, r3, #20
 8028c4e:	69fa      	ldr	r2, [r7, #28]
 8028c50:	fb02 f303 	mul.w	r3, r2, r3
 8028c54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028c56:	e054      	b.n	8028d02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8028c58:	683b      	ldr	r3, [r7, #0]
 8028c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028c5e:	d050      	beq.n	8028d02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8028c60:	f7fa fd14 	bl	802368c <HAL_GetTick>
 8028c64:	4602      	mov	r2, r0
 8028c66:	69bb      	ldr	r3, [r7, #24]
 8028c68:	1ad3      	subs	r3, r2, r3
 8028c6a:	69fa      	ldr	r2, [r7, #28]
 8028c6c:	429a      	cmp	r2, r3
 8028c6e:	d902      	bls.n	8028c76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8028c70:	69fb      	ldr	r3, [r7, #28]
 8028c72:	2b00      	cmp	r3, #0
 8028c74:	d13d      	bne.n	8028cf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8028c76:	68fb      	ldr	r3, [r7, #12]
 8028c78:	681b      	ldr	r3, [r3, #0]
 8028c7a:	685a      	ldr	r2, [r3, #4]
 8028c7c:	68fb      	ldr	r3, [r7, #12]
 8028c7e:	681b      	ldr	r3, [r3, #0]
 8028c80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8028c84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028c86:	68fb      	ldr	r3, [r7, #12]
 8028c88:	685b      	ldr	r3, [r3, #4]
 8028c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028c8e:	d111      	bne.n	8028cb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8028c90:	68fb      	ldr	r3, [r7, #12]
 8028c92:	689b      	ldr	r3, [r3, #8]
 8028c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028c98:	d004      	beq.n	8028ca4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028c9a:	68fb      	ldr	r3, [r7, #12]
 8028c9c:	689b      	ldr	r3, [r3, #8]
 8028c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028ca2:	d107      	bne.n	8028cb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8028ca4:	68fb      	ldr	r3, [r7, #12]
 8028ca6:	681b      	ldr	r3, [r3, #0]
 8028ca8:	681a      	ldr	r2, [r3, #0]
 8028caa:	68fb      	ldr	r3, [r7, #12]
 8028cac:	681b      	ldr	r3, [r3, #0]
 8028cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028cb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8028cb4:	68fb      	ldr	r3, [r7, #12]
 8028cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028cbc:	d10f      	bne.n	8028cde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8028cbe:	68fb      	ldr	r3, [r7, #12]
 8028cc0:	681b      	ldr	r3, [r3, #0]
 8028cc2:	681a      	ldr	r2, [r3, #0]
 8028cc4:	68fb      	ldr	r3, [r7, #12]
 8028cc6:	681b      	ldr	r3, [r3, #0]
 8028cc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8028ccc:	601a      	str	r2, [r3, #0]
 8028cce:	68fb      	ldr	r3, [r7, #12]
 8028cd0:	681b      	ldr	r3, [r3, #0]
 8028cd2:	681a      	ldr	r2, [r3, #0]
 8028cd4:	68fb      	ldr	r3, [r7, #12]
 8028cd6:	681b      	ldr	r3, [r3, #0]
 8028cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8028cdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8028cde:	68fb      	ldr	r3, [r7, #12]
 8028ce0:	2201      	movs	r2, #1
 8028ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8028ce6:	68fb      	ldr	r3, [r7, #12]
 8028ce8:	2200      	movs	r2, #0
 8028cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8028cee:	2303      	movs	r3, #3
 8028cf0:	e017      	b.n	8028d22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8028cf2:	697b      	ldr	r3, [r7, #20]
 8028cf4:	2b00      	cmp	r3, #0
 8028cf6:	d101      	bne.n	8028cfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8028cf8:	2300      	movs	r3, #0
 8028cfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8028cfc:	697b      	ldr	r3, [r7, #20]
 8028cfe:	3b01      	subs	r3, #1
 8028d00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028d02:	68fb      	ldr	r3, [r7, #12]
 8028d04:	681b      	ldr	r3, [r3, #0]
 8028d06:	689a      	ldr	r2, [r3, #8]
 8028d08:	68bb      	ldr	r3, [r7, #8]
 8028d0a:	4013      	ands	r3, r2
 8028d0c:	68ba      	ldr	r2, [r7, #8]
 8028d0e:	429a      	cmp	r2, r3
 8028d10:	bf0c      	ite	eq
 8028d12:	2301      	moveq	r3, #1
 8028d14:	2300      	movne	r3, #0
 8028d16:	b2db      	uxtb	r3, r3
 8028d18:	461a      	mov	r2, r3
 8028d1a:	79fb      	ldrb	r3, [r7, #7]
 8028d1c:	429a      	cmp	r2, r3
 8028d1e:	d19b      	bne.n	8028c58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8028d20:	2300      	movs	r3, #0
}
 8028d22:	4618      	mov	r0, r3
 8028d24:	3720      	adds	r7, #32
 8028d26:	46bd      	mov	sp, r7
 8028d28:	bd80      	pop	{r7, pc}
 8028d2a:	bf00      	nop
 8028d2c:	20000004 	.word	0x20000004

08028d30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8028d30:	b580      	push	{r7, lr}
 8028d32:	b086      	sub	sp, #24
 8028d34:	af02      	add	r7, sp, #8
 8028d36:	60f8      	str	r0, [r7, #12]
 8028d38:	60b9      	str	r1, [r7, #8]
 8028d3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028d3c:	68fb      	ldr	r3, [r7, #12]
 8028d3e:	685b      	ldr	r3, [r3, #4]
 8028d40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028d44:	d111      	bne.n	8028d6a <SPI_EndRxTransaction+0x3a>
 8028d46:	68fb      	ldr	r3, [r7, #12]
 8028d48:	689b      	ldr	r3, [r3, #8]
 8028d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028d4e:	d004      	beq.n	8028d5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028d50:	68fb      	ldr	r3, [r7, #12]
 8028d52:	689b      	ldr	r3, [r3, #8]
 8028d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028d58:	d107      	bne.n	8028d6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8028d5a:	68fb      	ldr	r3, [r7, #12]
 8028d5c:	681b      	ldr	r3, [r3, #0]
 8028d5e:	681a      	ldr	r2, [r3, #0]
 8028d60:	68fb      	ldr	r3, [r7, #12]
 8028d62:	681b      	ldr	r3, [r3, #0]
 8028d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028d68:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028d6a:	68fb      	ldr	r3, [r7, #12]
 8028d6c:	685b      	ldr	r3, [r3, #4]
 8028d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028d72:	d12a      	bne.n	8028dca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8028d74:	68fb      	ldr	r3, [r7, #12]
 8028d76:	689b      	ldr	r3, [r3, #8]
 8028d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028d7c:	d012      	beq.n	8028da4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028d7e:	687b      	ldr	r3, [r7, #4]
 8028d80:	9300      	str	r3, [sp, #0]
 8028d82:	68bb      	ldr	r3, [r7, #8]
 8028d84:	2200      	movs	r2, #0
 8028d86:	2180      	movs	r1, #128	; 0x80
 8028d88:	68f8      	ldr	r0, [r7, #12]
 8028d8a:	f7ff ff49 	bl	8028c20 <SPI_WaitFlagStateUntilTimeout>
 8028d8e:	4603      	mov	r3, r0
 8028d90:	2b00      	cmp	r3, #0
 8028d92:	d02d      	beq.n	8028df0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028d94:	68fb      	ldr	r3, [r7, #12]
 8028d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028d98:	f043 0220 	orr.w	r2, r3, #32
 8028d9c:	68fb      	ldr	r3, [r7, #12]
 8028d9e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8028da0:	2303      	movs	r3, #3
 8028da2:	e026      	b.n	8028df2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8028da4:	687b      	ldr	r3, [r7, #4]
 8028da6:	9300      	str	r3, [sp, #0]
 8028da8:	68bb      	ldr	r3, [r7, #8]
 8028daa:	2200      	movs	r2, #0
 8028dac:	2101      	movs	r1, #1
 8028dae:	68f8      	ldr	r0, [r7, #12]
 8028db0:	f7ff ff36 	bl	8028c20 <SPI_WaitFlagStateUntilTimeout>
 8028db4:	4603      	mov	r3, r0
 8028db6:	2b00      	cmp	r3, #0
 8028db8:	d01a      	beq.n	8028df0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028dba:	68fb      	ldr	r3, [r7, #12]
 8028dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028dbe:	f043 0220 	orr.w	r2, r3, #32
 8028dc2:	68fb      	ldr	r3, [r7, #12]
 8028dc4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8028dc6:	2303      	movs	r3, #3
 8028dc8:	e013      	b.n	8028df2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8028dca:	687b      	ldr	r3, [r7, #4]
 8028dcc:	9300      	str	r3, [sp, #0]
 8028dce:	68bb      	ldr	r3, [r7, #8]
 8028dd0:	2200      	movs	r2, #0
 8028dd2:	2101      	movs	r1, #1
 8028dd4:	68f8      	ldr	r0, [r7, #12]
 8028dd6:	f7ff ff23 	bl	8028c20 <SPI_WaitFlagStateUntilTimeout>
 8028dda:	4603      	mov	r3, r0
 8028ddc:	2b00      	cmp	r3, #0
 8028dde:	d007      	beq.n	8028df0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028de0:	68fb      	ldr	r3, [r7, #12]
 8028de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028de4:	f043 0220 	orr.w	r2, r3, #32
 8028de8:	68fb      	ldr	r3, [r7, #12]
 8028dea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028dec:	2303      	movs	r3, #3
 8028dee:	e000      	b.n	8028df2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8028df0:	2300      	movs	r3, #0
}
 8028df2:	4618      	mov	r0, r3
 8028df4:	3710      	adds	r7, #16
 8028df6:	46bd      	mov	sp, r7
 8028df8:	bd80      	pop	{r7, pc}
	...

08028dfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8028dfc:	b580      	push	{r7, lr}
 8028dfe:	b088      	sub	sp, #32
 8028e00:	af02      	add	r7, sp, #8
 8028e02:	60f8      	str	r0, [r7, #12]
 8028e04:	60b9      	str	r1, [r7, #8]
 8028e06:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8028e08:	4b1b      	ldr	r3, [pc, #108]	; (8028e78 <SPI_EndRxTxTransaction+0x7c>)
 8028e0a:	681b      	ldr	r3, [r3, #0]
 8028e0c:	4a1b      	ldr	r2, [pc, #108]	; (8028e7c <SPI_EndRxTxTransaction+0x80>)
 8028e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8028e12:	0d5b      	lsrs	r3, r3, #21
 8028e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8028e18:	fb02 f303 	mul.w	r3, r2, r3
 8028e1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028e1e:	68fb      	ldr	r3, [r7, #12]
 8028e20:	685b      	ldr	r3, [r3, #4]
 8028e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028e26:	d112      	bne.n	8028e4e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028e28:	687b      	ldr	r3, [r7, #4]
 8028e2a:	9300      	str	r3, [sp, #0]
 8028e2c:	68bb      	ldr	r3, [r7, #8]
 8028e2e:	2200      	movs	r2, #0
 8028e30:	2180      	movs	r1, #128	; 0x80
 8028e32:	68f8      	ldr	r0, [r7, #12]
 8028e34:	f7ff fef4 	bl	8028c20 <SPI_WaitFlagStateUntilTimeout>
 8028e38:	4603      	mov	r3, r0
 8028e3a:	2b00      	cmp	r3, #0
 8028e3c:	d016      	beq.n	8028e6c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028e3e:	68fb      	ldr	r3, [r7, #12]
 8028e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028e42:	f043 0220 	orr.w	r2, r3, #32
 8028e46:	68fb      	ldr	r3, [r7, #12]
 8028e48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028e4a:	2303      	movs	r3, #3
 8028e4c:	e00f      	b.n	8028e6e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8028e4e:	697b      	ldr	r3, [r7, #20]
 8028e50:	2b00      	cmp	r3, #0
 8028e52:	d00a      	beq.n	8028e6a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8028e54:	697b      	ldr	r3, [r7, #20]
 8028e56:	3b01      	subs	r3, #1
 8028e58:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8028e5a:	68fb      	ldr	r3, [r7, #12]
 8028e5c:	681b      	ldr	r3, [r3, #0]
 8028e5e:	689b      	ldr	r3, [r3, #8]
 8028e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028e64:	2b80      	cmp	r3, #128	; 0x80
 8028e66:	d0f2      	beq.n	8028e4e <SPI_EndRxTxTransaction+0x52>
 8028e68:	e000      	b.n	8028e6c <SPI_EndRxTxTransaction+0x70>
        break;
 8028e6a:	bf00      	nop
  }

  return HAL_OK;
 8028e6c:	2300      	movs	r3, #0
}
 8028e6e:	4618      	mov	r0, r3
 8028e70:	3718      	adds	r7, #24
 8028e72:	46bd      	mov	sp, r7
 8028e74:	bd80      	pop	{r7, pc}
 8028e76:	bf00      	nop
 8028e78:	20000004 	.word	0x20000004
 8028e7c:	165e9f81 	.word	0x165e9f81

08028e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8028e80:	b580      	push	{r7, lr}
 8028e82:	b082      	sub	sp, #8
 8028e84:	af00      	add	r7, sp, #0
 8028e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8028e88:	687b      	ldr	r3, [r7, #4]
 8028e8a:	2b00      	cmp	r3, #0
 8028e8c:	d101      	bne.n	8028e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8028e8e:	2301      	movs	r3, #1
 8028e90:	e041      	b.n	8028f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8028e92:	687b      	ldr	r3, [r7, #4]
 8028e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028e98:	b2db      	uxtb	r3, r3
 8028e9a:	2b00      	cmp	r3, #0
 8028e9c:	d106      	bne.n	8028eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8028e9e:	687b      	ldr	r3, [r7, #4]
 8028ea0:	2200      	movs	r2, #0
 8028ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8028ea6:	6878      	ldr	r0, [r7, #4]
 8028ea8:	f7f8 fea6 	bl	8021bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028eac:	687b      	ldr	r3, [r7, #4]
 8028eae:	2202      	movs	r2, #2
 8028eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8028eb4:	687b      	ldr	r3, [r7, #4]
 8028eb6:	681a      	ldr	r2, [r3, #0]
 8028eb8:	687b      	ldr	r3, [r7, #4]
 8028eba:	3304      	adds	r3, #4
 8028ebc:	4619      	mov	r1, r3
 8028ebe:	4610      	mov	r0, r2
 8028ec0:	f000 fa96 	bl	80293f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8028ec4:	687b      	ldr	r3, [r7, #4]
 8028ec6:	2201      	movs	r2, #1
 8028ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028ecc:	687b      	ldr	r3, [r7, #4]
 8028ece:	2201      	movs	r2, #1
 8028ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8028ed4:	687b      	ldr	r3, [r7, #4]
 8028ed6:	2201      	movs	r2, #1
 8028ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028edc:	687b      	ldr	r3, [r7, #4]
 8028ede:	2201      	movs	r2, #1
 8028ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8028ee4:	687b      	ldr	r3, [r7, #4]
 8028ee6:	2201      	movs	r2, #1
 8028ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028eec:	687b      	ldr	r3, [r7, #4]
 8028eee:	2201      	movs	r2, #1
 8028ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8028ef4:	687b      	ldr	r3, [r7, #4]
 8028ef6:	2201      	movs	r2, #1
 8028ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028efc:	687b      	ldr	r3, [r7, #4]
 8028efe:	2201      	movs	r2, #1
 8028f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028f04:	687b      	ldr	r3, [r7, #4]
 8028f06:	2201      	movs	r2, #1
 8028f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8028f0c:	687b      	ldr	r3, [r7, #4]
 8028f0e:	2201      	movs	r2, #1
 8028f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8028f14:	2300      	movs	r3, #0
}
 8028f16:	4618      	mov	r0, r3
 8028f18:	3708      	adds	r7, #8
 8028f1a:	46bd      	mov	sp, r7
 8028f1c:	bd80      	pop	{r7, pc}
	...

08028f20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8028f20:	b480      	push	{r7}
 8028f22:	b085      	sub	sp, #20
 8028f24:	af00      	add	r7, sp, #0
 8028f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8028f28:	687b      	ldr	r3, [r7, #4]
 8028f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028f2e:	b2db      	uxtb	r3, r3
 8028f30:	2b01      	cmp	r3, #1
 8028f32:	d001      	beq.n	8028f38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8028f34:	2301      	movs	r3, #1
 8028f36:	e04e      	b.n	8028fd6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028f38:	687b      	ldr	r3, [r7, #4]
 8028f3a:	2202      	movs	r2, #2
 8028f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8028f40:	687b      	ldr	r3, [r7, #4]
 8028f42:	681b      	ldr	r3, [r3, #0]
 8028f44:	68da      	ldr	r2, [r3, #12]
 8028f46:	687b      	ldr	r3, [r7, #4]
 8028f48:	681b      	ldr	r3, [r3, #0]
 8028f4a:	f042 0201 	orr.w	r2, r2, #1
 8028f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028f50:	687b      	ldr	r3, [r7, #4]
 8028f52:	681b      	ldr	r3, [r3, #0]
 8028f54:	4a23      	ldr	r2, [pc, #140]	; (8028fe4 <HAL_TIM_Base_Start_IT+0xc4>)
 8028f56:	4293      	cmp	r3, r2
 8028f58:	d022      	beq.n	8028fa0 <HAL_TIM_Base_Start_IT+0x80>
 8028f5a:	687b      	ldr	r3, [r7, #4]
 8028f5c:	681b      	ldr	r3, [r3, #0]
 8028f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028f62:	d01d      	beq.n	8028fa0 <HAL_TIM_Base_Start_IT+0x80>
 8028f64:	687b      	ldr	r3, [r7, #4]
 8028f66:	681b      	ldr	r3, [r3, #0]
 8028f68:	4a1f      	ldr	r2, [pc, #124]	; (8028fe8 <HAL_TIM_Base_Start_IT+0xc8>)
 8028f6a:	4293      	cmp	r3, r2
 8028f6c:	d018      	beq.n	8028fa0 <HAL_TIM_Base_Start_IT+0x80>
 8028f6e:	687b      	ldr	r3, [r7, #4]
 8028f70:	681b      	ldr	r3, [r3, #0]
 8028f72:	4a1e      	ldr	r2, [pc, #120]	; (8028fec <HAL_TIM_Base_Start_IT+0xcc>)
 8028f74:	4293      	cmp	r3, r2
 8028f76:	d013      	beq.n	8028fa0 <HAL_TIM_Base_Start_IT+0x80>
 8028f78:	687b      	ldr	r3, [r7, #4]
 8028f7a:	681b      	ldr	r3, [r3, #0]
 8028f7c:	4a1c      	ldr	r2, [pc, #112]	; (8028ff0 <HAL_TIM_Base_Start_IT+0xd0>)
 8028f7e:	4293      	cmp	r3, r2
 8028f80:	d00e      	beq.n	8028fa0 <HAL_TIM_Base_Start_IT+0x80>
 8028f82:	687b      	ldr	r3, [r7, #4]
 8028f84:	681b      	ldr	r3, [r3, #0]
 8028f86:	4a1b      	ldr	r2, [pc, #108]	; (8028ff4 <HAL_TIM_Base_Start_IT+0xd4>)
 8028f88:	4293      	cmp	r3, r2
 8028f8a:	d009      	beq.n	8028fa0 <HAL_TIM_Base_Start_IT+0x80>
 8028f8c:	687b      	ldr	r3, [r7, #4]
 8028f8e:	681b      	ldr	r3, [r3, #0]
 8028f90:	4a19      	ldr	r2, [pc, #100]	; (8028ff8 <HAL_TIM_Base_Start_IT+0xd8>)
 8028f92:	4293      	cmp	r3, r2
 8028f94:	d004      	beq.n	8028fa0 <HAL_TIM_Base_Start_IT+0x80>
 8028f96:	687b      	ldr	r3, [r7, #4]
 8028f98:	681b      	ldr	r3, [r3, #0]
 8028f9a:	4a18      	ldr	r2, [pc, #96]	; (8028ffc <HAL_TIM_Base_Start_IT+0xdc>)
 8028f9c:	4293      	cmp	r3, r2
 8028f9e:	d111      	bne.n	8028fc4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028fa0:	687b      	ldr	r3, [r7, #4]
 8028fa2:	681b      	ldr	r3, [r3, #0]
 8028fa4:	689b      	ldr	r3, [r3, #8]
 8028fa6:	f003 0307 	and.w	r3, r3, #7
 8028faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028fac:	68fb      	ldr	r3, [r7, #12]
 8028fae:	2b06      	cmp	r3, #6
 8028fb0:	d010      	beq.n	8028fd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8028fb2:	687b      	ldr	r3, [r7, #4]
 8028fb4:	681b      	ldr	r3, [r3, #0]
 8028fb6:	681a      	ldr	r2, [r3, #0]
 8028fb8:	687b      	ldr	r3, [r7, #4]
 8028fba:	681b      	ldr	r3, [r3, #0]
 8028fbc:	f042 0201 	orr.w	r2, r2, #1
 8028fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028fc2:	e007      	b.n	8028fd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8028fc4:	687b      	ldr	r3, [r7, #4]
 8028fc6:	681b      	ldr	r3, [r3, #0]
 8028fc8:	681a      	ldr	r2, [r3, #0]
 8028fca:	687b      	ldr	r3, [r7, #4]
 8028fcc:	681b      	ldr	r3, [r3, #0]
 8028fce:	f042 0201 	orr.w	r2, r2, #1
 8028fd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8028fd4:	2300      	movs	r3, #0
}
 8028fd6:	4618      	mov	r0, r3
 8028fd8:	3714      	adds	r7, #20
 8028fda:	46bd      	mov	sp, r7
 8028fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028fe0:	4770      	bx	lr
 8028fe2:	bf00      	nop
 8028fe4:	40010000 	.word	0x40010000
 8028fe8:	40000400 	.word	0x40000400
 8028fec:	40000800 	.word	0x40000800
 8028ff0:	40000c00 	.word	0x40000c00
 8028ff4:	40010400 	.word	0x40010400
 8028ff8:	40014000 	.word	0x40014000
 8028ffc:	40001800 	.word	0x40001800

08029000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8029000:	b580      	push	{r7, lr}
 8029002:	b082      	sub	sp, #8
 8029004:	af00      	add	r7, sp, #0
 8029006:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8029008:	687b      	ldr	r3, [r7, #4]
 802900a:	681b      	ldr	r3, [r3, #0]
 802900c:	691b      	ldr	r3, [r3, #16]
 802900e:	f003 0302 	and.w	r3, r3, #2
 8029012:	2b02      	cmp	r3, #2
 8029014:	d122      	bne.n	802905c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8029016:	687b      	ldr	r3, [r7, #4]
 8029018:	681b      	ldr	r3, [r3, #0]
 802901a:	68db      	ldr	r3, [r3, #12]
 802901c:	f003 0302 	and.w	r3, r3, #2
 8029020:	2b02      	cmp	r3, #2
 8029022:	d11b      	bne.n	802905c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8029024:	687b      	ldr	r3, [r7, #4]
 8029026:	681b      	ldr	r3, [r3, #0]
 8029028:	f06f 0202 	mvn.w	r2, #2
 802902c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802902e:	687b      	ldr	r3, [r7, #4]
 8029030:	2201      	movs	r2, #1
 8029032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8029034:	687b      	ldr	r3, [r7, #4]
 8029036:	681b      	ldr	r3, [r3, #0]
 8029038:	699b      	ldr	r3, [r3, #24]
 802903a:	f003 0303 	and.w	r3, r3, #3
 802903e:	2b00      	cmp	r3, #0
 8029040:	d003      	beq.n	802904a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8029042:	6878      	ldr	r0, [r7, #4]
 8029044:	f000 f9b5 	bl	80293b2 <HAL_TIM_IC_CaptureCallback>
 8029048:	e005      	b.n	8029056 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802904a:	6878      	ldr	r0, [r7, #4]
 802904c:	f000 f9a7 	bl	802939e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029050:	6878      	ldr	r0, [r7, #4]
 8029052:	f000 f9b8 	bl	80293c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029056:	687b      	ldr	r3, [r7, #4]
 8029058:	2200      	movs	r2, #0
 802905a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802905c:	687b      	ldr	r3, [r7, #4]
 802905e:	681b      	ldr	r3, [r3, #0]
 8029060:	691b      	ldr	r3, [r3, #16]
 8029062:	f003 0304 	and.w	r3, r3, #4
 8029066:	2b04      	cmp	r3, #4
 8029068:	d122      	bne.n	80290b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802906a:	687b      	ldr	r3, [r7, #4]
 802906c:	681b      	ldr	r3, [r3, #0]
 802906e:	68db      	ldr	r3, [r3, #12]
 8029070:	f003 0304 	and.w	r3, r3, #4
 8029074:	2b04      	cmp	r3, #4
 8029076:	d11b      	bne.n	80290b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8029078:	687b      	ldr	r3, [r7, #4]
 802907a:	681b      	ldr	r3, [r3, #0]
 802907c:	f06f 0204 	mvn.w	r2, #4
 8029080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8029082:	687b      	ldr	r3, [r7, #4]
 8029084:	2202      	movs	r2, #2
 8029086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8029088:	687b      	ldr	r3, [r7, #4]
 802908a:	681b      	ldr	r3, [r3, #0]
 802908c:	699b      	ldr	r3, [r3, #24]
 802908e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029092:	2b00      	cmp	r3, #0
 8029094:	d003      	beq.n	802909e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029096:	6878      	ldr	r0, [r7, #4]
 8029098:	f000 f98b 	bl	80293b2 <HAL_TIM_IC_CaptureCallback>
 802909c:	e005      	b.n	80290aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802909e:	6878      	ldr	r0, [r7, #4]
 80290a0:	f000 f97d 	bl	802939e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80290a4:	6878      	ldr	r0, [r7, #4]
 80290a6:	f000 f98e 	bl	80293c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80290aa:	687b      	ldr	r3, [r7, #4]
 80290ac:	2200      	movs	r2, #0
 80290ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80290b0:	687b      	ldr	r3, [r7, #4]
 80290b2:	681b      	ldr	r3, [r3, #0]
 80290b4:	691b      	ldr	r3, [r3, #16]
 80290b6:	f003 0308 	and.w	r3, r3, #8
 80290ba:	2b08      	cmp	r3, #8
 80290bc:	d122      	bne.n	8029104 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80290be:	687b      	ldr	r3, [r7, #4]
 80290c0:	681b      	ldr	r3, [r3, #0]
 80290c2:	68db      	ldr	r3, [r3, #12]
 80290c4:	f003 0308 	and.w	r3, r3, #8
 80290c8:	2b08      	cmp	r3, #8
 80290ca:	d11b      	bne.n	8029104 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80290cc:	687b      	ldr	r3, [r7, #4]
 80290ce:	681b      	ldr	r3, [r3, #0]
 80290d0:	f06f 0208 	mvn.w	r2, #8
 80290d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80290d6:	687b      	ldr	r3, [r7, #4]
 80290d8:	2204      	movs	r2, #4
 80290da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80290dc:	687b      	ldr	r3, [r7, #4]
 80290de:	681b      	ldr	r3, [r3, #0]
 80290e0:	69db      	ldr	r3, [r3, #28]
 80290e2:	f003 0303 	and.w	r3, r3, #3
 80290e6:	2b00      	cmp	r3, #0
 80290e8:	d003      	beq.n	80290f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80290ea:	6878      	ldr	r0, [r7, #4]
 80290ec:	f000 f961 	bl	80293b2 <HAL_TIM_IC_CaptureCallback>
 80290f0:	e005      	b.n	80290fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80290f2:	6878      	ldr	r0, [r7, #4]
 80290f4:	f000 f953 	bl	802939e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80290f8:	6878      	ldr	r0, [r7, #4]
 80290fa:	f000 f964 	bl	80293c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80290fe:	687b      	ldr	r3, [r7, #4]
 8029100:	2200      	movs	r2, #0
 8029102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8029104:	687b      	ldr	r3, [r7, #4]
 8029106:	681b      	ldr	r3, [r3, #0]
 8029108:	691b      	ldr	r3, [r3, #16]
 802910a:	f003 0310 	and.w	r3, r3, #16
 802910e:	2b10      	cmp	r3, #16
 8029110:	d122      	bne.n	8029158 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8029112:	687b      	ldr	r3, [r7, #4]
 8029114:	681b      	ldr	r3, [r3, #0]
 8029116:	68db      	ldr	r3, [r3, #12]
 8029118:	f003 0310 	and.w	r3, r3, #16
 802911c:	2b10      	cmp	r3, #16
 802911e:	d11b      	bne.n	8029158 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8029120:	687b      	ldr	r3, [r7, #4]
 8029122:	681b      	ldr	r3, [r3, #0]
 8029124:	f06f 0210 	mvn.w	r2, #16
 8029128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802912a:	687b      	ldr	r3, [r7, #4]
 802912c:	2208      	movs	r2, #8
 802912e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8029130:	687b      	ldr	r3, [r7, #4]
 8029132:	681b      	ldr	r3, [r3, #0]
 8029134:	69db      	ldr	r3, [r3, #28]
 8029136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802913a:	2b00      	cmp	r3, #0
 802913c:	d003      	beq.n	8029146 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802913e:	6878      	ldr	r0, [r7, #4]
 8029140:	f000 f937 	bl	80293b2 <HAL_TIM_IC_CaptureCallback>
 8029144:	e005      	b.n	8029152 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029146:	6878      	ldr	r0, [r7, #4]
 8029148:	f000 f929 	bl	802939e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802914c:	6878      	ldr	r0, [r7, #4]
 802914e:	f000 f93a 	bl	80293c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029152:	687b      	ldr	r3, [r7, #4]
 8029154:	2200      	movs	r2, #0
 8029156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8029158:	687b      	ldr	r3, [r7, #4]
 802915a:	681b      	ldr	r3, [r3, #0]
 802915c:	691b      	ldr	r3, [r3, #16]
 802915e:	f003 0301 	and.w	r3, r3, #1
 8029162:	2b01      	cmp	r3, #1
 8029164:	d10e      	bne.n	8029184 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8029166:	687b      	ldr	r3, [r7, #4]
 8029168:	681b      	ldr	r3, [r3, #0]
 802916a:	68db      	ldr	r3, [r3, #12]
 802916c:	f003 0301 	and.w	r3, r3, #1
 8029170:	2b01      	cmp	r3, #1
 8029172:	d107      	bne.n	8029184 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8029174:	687b      	ldr	r3, [r7, #4]
 8029176:	681b      	ldr	r3, [r3, #0]
 8029178:	f06f 0201 	mvn.w	r2, #1
 802917c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802917e:	6878      	ldr	r0, [r7, #4]
 8029180:	f7f7 fe84 	bl	8020e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8029184:	687b      	ldr	r3, [r7, #4]
 8029186:	681b      	ldr	r3, [r3, #0]
 8029188:	691b      	ldr	r3, [r3, #16]
 802918a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802918e:	2b80      	cmp	r3, #128	; 0x80
 8029190:	d10e      	bne.n	80291b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8029192:	687b      	ldr	r3, [r7, #4]
 8029194:	681b      	ldr	r3, [r3, #0]
 8029196:	68db      	ldr	r3, [r3, #12]
 8029198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802919c:	2b80      	cmp	r3, #128	; 0x80
 802919e:	d107      	bne.n	80291b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80291a0:	687b      	ldr	r3, [r7, #4]
 80291a2:	681b      	ldr	r3, [r3, #0]
 80291a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80291a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80291aa:	6878      	ldr	r0, [r7, #4]
 80291ac:	f000 fae0 	bl	8029770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80291b0:	687b      	ldr	r3, [r7, #4]
 80291b2:	681b      	ldr	r3, [r3, #0]
 80291b4:	691b      	ldr	r3, [r3, #16]
 80291b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80291ba:	2b40      	cmp	r3, #64	; 0x40
 80291bc:	d10e      	bne.n	80291dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80291be:	687b      	ldr	r3, [r7, #4]
 80291c0:	681b      	ldr	r3, [r3, #0]
 80291c2:	68db      	ldr	r3, [r3, #12]
 80291c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80291c8:	2b40      	cmp	r3, #64	; 0x40
 80291ca:	d107      	bne.n	80291dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80291cc:	687b      	ldr	r3, [r7, #4]
 80291ce:	681b      	ldr	r3, [r3, #0]
 80291d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80291d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80291d6:	6878      	ldr	r0, [r7, #4]
 80291d8:	f000 f8ff 	bl	80293da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80291dc:	687b      	ldr	r3, [r7, #4]
 80291de:	681b      	ldr	r3, [r3, #0]
 80291e0:	691b      	ldr	r3, [r3, #16]
 80291e2:	f003 0320 	and.w	r3, r3, #32
 80291e6:	2b20      	cmp	r3, #32
 80291e8:	d10e      	bne.n	8029208 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80291ea:	687b      	ldr	r3, [r7, #4]
 80291ec:	681b      	ldr	r3, [r3, #0]
 80291ee:	68db      	ldr	r3, [r3, #12]
 80291f0:	f003 0320 	and.w	r3, r3, #32
 80291f4:	2b20      	cmp	r3, #32
 80291f6:	d107      	bne.n	8029208 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80291f8:	687b      	ldr	r3, [r7, #4]
 80291fa:	681b      	ldr	r3, [r3, #0]
 80291fc:	f06f 0220 	mvn.w	r2, #32
 8029200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8029202:	6878      	ldr	r0, [r7, #4]
 8029204:	f000 faaa 	bl	802975c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8029208:	bf00      	nop
 802920a:	3708      	adds	r7, #8
 802920c:	46bd      	mov	sp, r7
 802920e:	bd80      	pop	{r7, pc}

08029210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8029210:	b580      	push	{r7, lr}
 8029212:	b084      	sub	sp, #16
 8029214:	af00      	add	r7, sp, #0
 8029216:	6078      	str	r0, [r7, #4]
 8029218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802921a:	2300      	movs	r3, #0
 802921c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 802921e:	687b      	ldr	r3, [r7, #4]
 8029220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029224:	2b01      	cmp	r3, #1
 8029226:	d101      	bne.n	802922c <HAL_TIM_ConfigClockSource+0x1c>
 8029228:	2302      	movs	r3, #2
 802922a:	e0b4      	b.n	8029396 <HAL_TIM_ConfigClockSource+0x186>
 802922c:	687b      	ldr	r3, [r7, #4]
 802922e:	2201      	movs	r2, #1
 8029230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029234:	687b      	ldr	r3, [r7, #4]
 8029236:	2202      	movs	r2, #2
 8029238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 802923c:	687b      	ldr	r3, [r7, #4]
 802923e:	681b      	ldr	r3, [r3, #0]
 8029240:	689b      	ldr	r3, [r3, #8]
 8029242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8029244:	68bb      	ldr	r3, [r7, #8]
 8029246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802924a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802924c:	68bb      	ldr	r3, [r7, #8]
 802924e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029252:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8029254:	687b      	ldr	r3, [r7, #4]
 8029256:	681b      	ldr	r3, [r3, #0]
 8029258:	68ba      	ldr	r2, [r7, #8]
 802925a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 802925c:	683b      	ldr	r3, [r7, #0]
 802925e:	681b      	ldr	r3, [r3, #0]
 8029260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029264:	d03e      	beq.n	80292e4 <HAL_TIM_ConfigClockSource+0xd4>
 8029266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802926a:	f200 8087 	bhi.w	802937c <HAL_TIM_ConfigClockSource+0x16c>
 802926e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029272:	f000 8086 	beq.w	8029382 <HAL_TIM_ConfigClockSource+0x172>
 8029276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802927a:	d87f      	bhi.n	802937c <HAL_TIM_ConfigClockSource+0x16c>
 802927c:	2b70      	cmp	r3, #112	; 0x70
 802927e:	d01a      	beq.n	80292b6 <HAL_TIM_ConfigClockSource+0xa6>
 8029280:	2b70      	cmp	r3, #112	; 0x70
 8029282:	d87b      	bhi.n	802937c <HAL_TIM_ConfigClockSource+0x16c>
 8029284:	2b60      	cmp	r3, #96	; 0x60
 8029286:	d050      	beq.n	802932a <HAL_TIM_ConfigClockSource+0x11a>
 8029288:	2b60      	cmp	r3, #96	; 0x60
 802928a:	d877      	bhi.n	802937c <HAL_TIM_ConfigClockSource+0x16c>
 802928c:	2b50      	cmp	r3, #80	; 0x50
 802928e:	d03c      	beq.n	802930a <HAL_TIM_ConfigClockSource+0xfa>
 8029290:	2b50      	cmp	r3, #80	; 0x50
 8029292:	d873      	bhi.n	802937c <HAL_TIM_ConfigClockSource+0x16c>
 8029294:	2b40      	cmp	r3, #64	; 0x40
 8029296:	d058      	beq.n	802934a <HAL_TIM_ConfigClockSource+0x13a>
 8029298:	2b40      	cmp	r3, #64	; 0x40
 802929a:	d86f      	bhi.n	802937c <HAL_TIM_ConfigClockSource+0x16c>
 802929c:	2b30      	cmp	r3, #48	; 0x30
 802929e:	d064      	beq.n	802936a <HAL_TIM_ConfigClockSource+0x15a>
 80292a0:	2b30      	cmp	r3, #48	; 0x30
 80292a2:	d86b      	bhi.n	802937c <HAL_TIM_ConfigClockSource+0x16c>
 80292a4:	2b20      	cmp	r3, #32
 80292a6:	d060      	beq.n	802936a <HAL_TIM_ConfigClockSource+0x15a>
 80292a8:	2b20      	cmp	r3, #32
 80292aa:	d867      	bhi.n	802937c <HAL_TIM_ConfigClockSource+0x16c>
 80292ac:	2b00      	cmp	r3, #0
 80292ae:	d05c      	beq.n	802936a <HAL_TIM_ConfigClockSource+0x15a>
 80292b0:	2b10      	cmp	r3, #16
 80292b2:	d05a      	beq.n	802936a <HAL_TIM_ConfigClockSource+0x15a>
 80292b4:	e062      	b.n	802937c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80292b6:	687b      	ldr	r3, [r7, #4]
 80292b8:	6818      	ldr	r0, [r3, #0]
 80292ba:	683b      	ldr	r3, [r7, #0]
 80292bc:	6899      	ldr	r1, [r3, #8]
 80292be:	683b      	ldr	r3, [r7, #0]
 80292c0:	685a      	ldr	r2, [r3, #4]
 80292c2:	683b      	ldr	r3, [r7, #0]
 80292c4:	68db      	ldr	r3, [r3, #12]
 80292c6:	f000 f9ad 	bl	8029624 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80292ca:	687b      	ldr	r3, [r7, #4]
 80292cc:	681b      	ldr	r3, [r3, #0]
 80292ce:	689b      	ldr	r3, [r3, #8]
 80292d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80292d2:	68bb      	ldr	r3, [r7, #8]
 80292d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80292d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80292da:	687b      	ldr	r3, [r7, #4]
 80292dc:	681b      	ldr	r3, [r3, #0]
 80292de:	68ba      	ldr	r2, [r7, #8]
 80292e0:	609a      	str	r2, [r3, #8]
      break;
 80292e2:	e04f      	b.n	8029384 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80292e4:	687b      	ldr	r3, [r7, #4]
 80292e6:	6818      	ldr	r0, [r3, #0]
 80292e8:	683b      	ldr	r3, [r7, #0]
 80292ea:	6899      	ldr	r1, [r3, #8]
 80292ec:	683b      	ldr	r3, [r7, #0]
 80292ee:	685a      	ldr	r2, [r3, #4]
 80292f0:	683b      	ldr	r3, [r7, #0]
 80292f2:	68db      	ldr	r3, [r3, #12]
 80292f4:	f000 f996 	bl	8029624 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80292f8:	687b      	ldr	r3, [r7, #4]
 80292fa:	681b      	ldr	r3, [r3, #0]
 80292fc:	689a      	ldr	r2, [r3, #8]
 80292fe:	687b      	ldr	r3, [r7, #4]
 8029300:	681b      	ldr	r3, [r3, #0]
 8029302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8029306:	609a      	str	r2, [r3, #8]
      break;
 8029308:	e03c      	b.n	8029384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802930a:	687b      	ldr	r3, [r7, #4]
 802930c:	6818      	ldr	r0, [r3, #0]
 802930e:	683b      	ldr	r3, [r7, #0]
 8029310:	6859      	ldr	r1, [r3, #4]
 8029312:	683b      	ldr	r3, [r7, #0]
 8029314:	68db      	ldr	r3, [r3, #12]
 8029316:	461a      	mov	r2, r3
 8029318:	f000 f90a 	bl	8029530 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 802931c:	687b      	ldr	r3, [r7, #4]
 802931e:	681b      	ldr	r3, [r3, #0]
 8029320:	2150      	movs	r1, #80	; 0x50
 8029322:	4618      	mov	r0, r3
 8029324:	f000 f963 	bl	80295ee <TIM_ITRx_SetConfig>
      break;
 8029328:	e02c      	b.n	8029384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 802932a:	687b      	ldr	r3, [r7, #4]
 802932c:	6818      	ldr	r0, [r3, #0]
 802932e:	683b      	ldr	r3, [r7, #0]
 8029330:	6859      	ldr	r1, [r3, #4]
 8029332:	683b      	ldr	r3, [r7, #0]
 8029334:	68db      	ldr	r3, [r3, #12]
 8029336:	461a      	mov	r2, r3
 8029338:	f000 f929 	bl	802958e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802933c:	687b      	ldr	r3, [r7, #4]
 802933e:	681b      	ldr	r3, [r3, #0]
 8029340:	2160      	movs	r1, #96	; 0x60
 8029342:	4618      	mov	r0, r3
 8029344:	f000 f953 	bl	80295ee <TIM_ITRx_SetConfig>
      break;
 8029348:	e01c      	b.n	8029384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802934a:	687b      	ldr	r3, [r7, #4]
 802934c:	6818      	ldr	r0, [r3, #0]
 802934e:	683b      	ldr	r3, [r7, #0]
 8029350:	6859      	ldr	r1, [r3, #4]
 8029352:	683b      	ldr	r3, [r7, #0]
 8029354:	68db      	ldr	r3, [r3, #12]
 8029356:	461a      	mov	r2, r3
 8029358:	f000 f8ea 	bl	8029530 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802935c:	687b      	ldr	r3, [r7, #4]
 802935e:	681b      	ldr	r3, [r3, #0]
 8029360:	2140      	movs	r1, #64	; 0x40
 8029362:	4618      	mov	r0, r3
 8029364:	f000 f943 	bl	80295ee <TIM_ITRx_SetConfig>
      break;
 8029368:	e00c      	b.n	8029384 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802936a:	687b      	ldr	r3, [r7, #4]
 802936c:	681a      	ldr	r2, [r3, #0]
 802936e:	683b      	ldr	r3, [r7, #0]
 8029370:	681b      	ldr	r3, [r3, #0]
 8029372:	4619      	mov	r1, r3
 8029374:	4610      	mov	r0, r2
 8029376:	f000 f93a 	bl	80295ee <TIM_ITRx_SetConfig>
      break;
 802937a:	e003      	b.n	8029384 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 802937c:	2301      	movs	r3, #1
 802937e:	73fb      	strb	r3, [r7, #15]
      break;
 8029380:	e000      	b.n	8029384 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8029382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8029384:	687b      	ldr	r3, [r7, #4]
 8029386:	2201      	movs	r2, #1
 8029388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802938c:	687b      	ldr	r3, [r7, #4]
 802938e:	2200      	movs	r2, #0
 8029390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8029394:	7bfb      	ldrb	r3, [r7, #15]
}
 8029396:	4618      	mov	r0, r3
 8029398:	3710      	adds	r7, #16
 802939a:	46bd      	mov	sp, r7
 802939c:	bd80      	pop	{r7, pc}

0802939e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802939e:	b480      	push	{r7}
 80293a0:	b083      	sub	sp, #12
 80293a2:	af00      	add	r7, sp, #0
 80293a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80293a6:	bf00      	nop
 80293a8:	370c      	adds	r7, #12
 80293aa:	46bd      	mov	sp, r7
 80293ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293b0:	4770      	bx	lr

080293b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80293b2:	b480      	push	{r7}
 80293b4:	b083      	sub	sp, #12
 80293b6:	af00      	add	r7, sp, #0
 80293b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80293ba:	bf00      	nop
 80293bc:	370c      	adds	r7, #12
 80293be:	46bd      	mov	sp, r7
 80293c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293c4:	4770      	bx	lr

080293c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80293c6:	b480      	push	{r7}
 80293c8:	b083      	sub	sp, #12
 80293ca:	af00      	add	r7, sp, #0
 80293cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80293ce:	bf00      	nop
 80293d0:	370c      	adds	r7, #12
 80293d2:	46bd      	mov	sp, r7
 80293d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293d8:	4770      	bx	lr

080293da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80293da:	b480      	push	{r7}
 80293dc:	b083      	sub	sp, #12
 80293de:	af00      	add	r7, sp, #0
 80293e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80293e2:	bf00      	nop
 80293e4:	370c      	adds	r7, #12
 80293e6:	46bd      	mov	sp, r7
 80293e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293ec:	4770      	bx	lr
	...

080293f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80293f0:	b480      	push	{r7}
 80293f2:	b085      	sub	sp, #20
 80293f4:	af00      	add	r7, sp, #0
 80293f6:	6078      	str	r0, [r7, #4]
 80293f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80293fa:	687b      	ldr	r3, [r7, #4]
 80293fc:	681b      	ldr	r3, [r3, #0]
 80293fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8029400:	687b      	ldr	r3, [r7, #4]
 8029402:	4a40      	ldr	r2, [pc, #256]	; (8029504 <TIM_Base_SetConfig+0x114>)
 8029404:	4293      	cmp	r3, r2
 8029406:	d013      	beq.n	8029430 <TIM_Base_SetConfig+0x40>
 8029408:	687b      	ldr	r3, [r7, #4]
 802940a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802940e:	d00f      	beq.n	8029430 <TIM_Base_SetConfig+0x40>
 8029410:	687b      	ldr	r3, [r7, #4]
 8029412:	4a3d      	ldr	r2, [pc, #244]	; (8029508 <TIM_Base_SetConfig+0x118>)
 8029414:	4293      	cmp	r3, r2
 8029416:	d00b      	beq.n	8029430 <TIM_Base_SetConfig+0x40>
 8029418:	687b      	ldr	r3, [r7, #4]
 802941a:	4a3c      	ldr	r2, [pc, #240]	; (802950c <TIM_Base_SetConfig+0x11c>)
 802941c:	4293      	cmp	r3, r2
 802941e:	d007      	beq.n	8029430 <TIM_Base_SetConfig+0x40>
 8029420:	687b      	ldr	r3, [r7, #4]
 8029422:	4a3b      	ldr	r2, [pc, #236]	; (8029510 <TIM_Base_SetConfig+0x120>)
 8029424:	4293      	cmp	r3, r2
 8029426:	d003      	beq.n	8029430 <TIM_Base_SetConfig+0x40>
 8029428:	687b      	ldr	r3, [r7, #4]
 802942a:	4a3a      	ldr	r2, [pc, #232]	; (8029514 <TIM_Base_SetConfig+0x124>)
 802942c:	4293      	cmp	r3, r2
 802942e:	d108      	bne.n	8029442 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8029430:	68fb      	ldr	r3, [r7, #12]
 8029432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8029438:	683b      	ldr	r3, [r7, #0]
 802943a:	685b      	ldr	r3, [r3, #4]
 802943c:	68fa      	ldr	r2, [r7, #12]
 802943e:	4313      	orrs	r3, r2
 8029440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8029442:	687b      	ldr	r3, [r7, #4]
 8029444:	4a2f      	ldr	r2, [pc, #188]	; (8029504 <TIM_Base_SetConfig+0x114>)
 8029446:	4293      	cmp	r3, r2
 8029448:	d02b      	beq.n	80294a2 <TIM_Base_SetConfig+0xb2>
 802944a:	687b      	ldr	r3, [r7, #4]
 802944c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029450:	d027      	beq.n	80294a2 <TIM_Base_SetConfig+0xb2>
 8029452:	687b      	ldr	r3, [r7, #4]
 8029454:	4a2c      	ldr	r2, [pc, #176]	; (8029508 <TIM_Base_SetConfig+0x118>)
 8029456:	4293      	cmp	r3, r2
 8029458:	d023      	beq.n	80294a2 <TIM_Base_SetConfig+0xb2>
 802945a:	687b      	ldr	r3, [r7, #4]
 802945c:	4a2b      	ldr	r2, [pc, #172]	; (802950c <TIM_Base_SetConfig+0x11c>)
 802945e:	4293      	cmp	r3, r2
 8029460:	d01f      	beq.n	80294a2 <TIM_Base_SetConfig+0xb2>
 8029462:	687b      	ldr	r3, [r7, #4]
 8029464:	4a2a      	ldr	r2, [pc, #168]	; (8029510 <TIM_Base_SetConfig+0x120>)
 8029466:	4293      	cmp	r3, r2
 8029468:	d01b      	beq.n	80294a2 <TIM_Base_SetConfig+0xb2>
 802946a:	687b      	ldr	r3, [r7, #4]
 802946c:	4a29      	ldr	r2, [pc, #164]	; (8029514 <TIM_Base_SetConfig+0x124>)
 802946e:	4293      	cmp	r3, r2
 8029470:	d017      	beq.n	80294a2 <TIM_Base_SetConfig+0xb2>
 8029472:	687b      	ldr	r3, [r7, #4]
 8029474:	4a28      	ldr	r2, [pc, #160]	; (8029518 <TIM_Base_SetConfig+0x128>)
 8029476:	4293      	cmp	r3, r2
 8029478:	d013      	beq.n	80294a2 <TIM_Base_SetConfig+0xb2>
 802947a:	687b      	ldr	r3, [r7, #4]
 802947c:	4a27      	ldr	r2, [pc, #156]	; (802951c <TIM_Base_SetConfig+0x12c>)
 802947e:	4293      	cmp	r3, r2
 8029480:	d00f      	beq.n	80294a2 <TIM_Base_SetConfig+0xb2>
 8029482:	687b      	ldr	r3, [r7, #4]
 8029484:	4a26      	ldr	r2, [pc, #152]	; (8029520 <TIM_Base_SetConfig+0x130>)
 8029486:	4293      	cmp	r3, r2
 8029488:	d00b      	beq.n	80294a2 <TIM_Base_SetConfig+0xb2>
 802948a:	687b      	ldr	r3, [r7, #4]
 802948c:	4a25      	ldr	r2, [pc, #148]	; (8029524 <TIM_Base_SetConfig+0x134>)
 802948e:	4293      	cmp	r3, r2
 8029490:	d007      	beq.n	80294a2 <TIM_Base_SetConfig+0xb2>
 8029492:	687b      	ldr	r3, [r7, #4]
 8029494:	4a24      	ldr	r2, [pc, #144]	; (8029528 <TIM_Base_SetConfig+0x138>)
 8029496:	4293      	cmp	r3, r2
 8029498:	d003      	beq.n	80294a2 <TIM_Base_SetConfig+0xb2>
 802949a:	687b      	ldr	r3, [r7, #4]
 802949c:	4a23      	ldr	r2, [pc, #140]	; (802952c <TIM_Base_SetConfig+0x13c>)
 802949e:	4293      	cmp	r3, r2
 80294a0:	d108      	bne.n	80294b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80294a2:	68fb      	ldr	r3, [r7, #12]
 80294a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80294a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80294aa:	683b      	ldr	r3, [r7, #0]
 80294ac:	68db      	ldr	r3, [r3, #12]
 80294ae:	68fa      	ldr	r2, [r7, #12]
 80294b0:	4313      	orrs	r3, r2
 80294b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80294b4:	68fb      	ldr	r3, [r7, #12]
 80294b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80294ba:	683b      	ldr	r3, [r7, #0]
 80294bc:	695b      	ldr	r3, [r3, #20]
 80294be:	4313      	orrs	r3, r2
 80294c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80294c2:	687b      	ldr	r3, [r7, #4]
 80294c4:	68fa      	ldr	r2, [r7, #12]
 80294c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80294c8:	683b      	ldr	r3, [r7, #0]
 80294ca:	689a      	ldr	r2, [r3, #8]
 80294cc:	687b      	ldr	r3, [r7, #4]
 80294ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80294d0:	683b      	ldr	r3, [r7, #0]
 80294d2:	681a      	ldr	r2, [r3, #0]
 80294d4:	687b      	ldr	r3, [r7, #4]
 80294d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80294d8:	687b      	ldr	r3, [r7, #4]
 80294da:	4a0a      	ldr	r2, [pc, #40]	; (8029504 <TIM_Base_SetConfig+0x114>)
 80294dc:	4293      	cmp	r3, r2
 80294de:	d003      	beq.n	80294e8 <TIM_Base_SetConfig+0xf8>
 80294e0:	687b      	ldr	r3, [r7, #4]
 80294e2:	4a0c      	ldr	r2, [pc, #48]	; (8029514 <TIM_Base_SetConfig+0x124>)
 80294e4:	4293      	cmp	r3, r2
 80294e6:	d103      	bne.n	80294f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80294e8:	683b      	ldr	r3, [r7, #0]
 80294ea:	691a      	ldr	r2, [r3, #16]
 80294ec:	687b      	ldr	r3, [r7, #4]
 80294ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80294f0:	687b      	ldr	r3, [r7, #4]
 80294f2:	2201      	movs	r2, #1
 80294f4:	615a      	str	r2, [r3, #20]
}
 80294f6:	bf00      	nop
 80294f8:	3714      	adds	r7, #20
 80294fa:	46bd      	mov	sp, r7
 80294fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029500:	4770      	bx	lr
 8029502:	bf00      	nop
 8029504:	40010000 	.word	0x40010000
 8029508:	40000400 	.word	0x40000400
 802950c:	40000800 	.word	0x40000800
 8029510:	40000c00 	.word	0x40000c00
 8029514:	40010400 	.word	0x40010400
 8029518:	40014000 	.word	0x40014000
 802951c:	40014400 	.word	0x40014400
 8029520:	40014800 	.word	0x40014800
 8029524:	40001800 	.word	0x40001800
 8029528:	40001c00 	.word	0x40001c00
 802952c:	40002000 	.word	0x40002000

08029530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029530:	b480      	push	{r7}
 8029532:	b087      	sub	sp, #28
 8029534:	af00      	add	r7, sp, #0
 8029536:	60f8      	str	r0, [r7, #12]
 8029538:	60b9      	str	r1, [r7, #8]
 802953a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802953c:	68fb      	ldr	r3, [r7, #12]
 802953e:	6a1b      	ldr	r3, [r3, #32]
 8029540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029542:	68fb      	ldr	r3, [r7, #12]
 8029544:	6a1b      	ldr	r3, [r3, #32]
 8029546:	f023 0201 	bic.w	r2, r3, #1
 802954a:	68fb      	ldr	r3, [r7, #12]
 802954c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802954e:	68fb      	ldr	r3, [r7, #12]
 8029550:	699b      	ldr	r3, [r3, #24]
 8029552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8029554:	693b      	ldr	r3, [r7, #16]
 8029556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802955a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802955c:	687b      	ldr	r3, [r7, #4]
 802955e:	011b      	lsls	r3, r3, #4
 8029560:	693a      	ldr	r2, [r7, #16]
 8029562:	4313      	orrs	r3, r2
 8029564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8029566:	697b      	ldr	r3, [r7, #20]
 8029568:	f023 030a 	bic.w	r3, r3, #10
 802956c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802956e:	697a      	ldr	r2, [r7, #20]
 8029570:	68bb      	ldr	r3, [r7, #8]
 8029572:	4313      	orrs	r3, r2
 8029574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8029576:	68fb      	ldr	r3, [r7, #12]
 8029578:	693a      	ldr	r2, [r7, #16]
 802957a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802957c:	68fb      	ldr	r3, [r7, #12]
 802957e:	697a      	ldr	r2, [r7, #20]
 8029580:	621a      	str	r2, [r3, #32]
}
 8029582:	bf00      	nop
 8029584:	371c      	adds	r7, #28
 8029586:	46bd      	mov	sp, r7
 8029588:	f85d 7b04 	ldr.w	r7, [sp], #4
 802958c:	4770      	bx	lr

0802958e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802958e:	b480      	push	{r7}
 8029590:	b087      	sub	sp, #28
 8029592:	af00      	add	r7, sp, #0
 8029594:	60f8      	str	r0, [r7, #12]
 8029596:	60b9      	str	r1, [r7, #8]
 8029598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802959a:	68fb      	ldr	r3, [r7, #12]
 802959c:	6a1b      	ldr	r3, [r3, #32]
 802959e:	f023 0210 	bic.w	r2, r3, #16
 80295a2:	68fb      	ldr	r3, [r7, #12]
 80295a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80295a6:	68fb      	ldr	r3, [r7, #12]
 80295a8:	699b      	ldr	r3, [r3, #24]
 80295aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80295ac:	68fb      	ldr	r3, [r7, #12]
 80295ae:	6a1b      	ldr	r3, [r3, #32]
 80295b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80295b2:	697b      	ldr	r3, [r7, #20]
 80295b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80295b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80295ba:	687b      	ldr	r3, [r7, #4]
 80295bc:	031b      	lsls	r3, r3, #12
 80295be:	697a      	ldr	r2, [r7, #20]
 80295c0:	4313      	orrs	r3, r2
 80295c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80295c4:	693b      	ldr	r3, [r7, #16]
 80295c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80295ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80295cc:	68bb      	ldr	r3, [r7, #8]
 80295ce:	011b      	lsls	r3, r3, #4
 80295d0:	693a      	ldr	r2, [r7, #16]
 80295d2:	4313      	orrs	r3, r2
 80295d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80295d6:	68fb      	ldr	r3, [r7, #12]
 80295d8:	697a      	ldr	r2, [r7, #20]
 80295da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80295dc:	68fb      	ldr	r3, [r7, #12]
 80295de:	693a      	ldr	r2, [r7, #16]
 80295e0:	621a      	str	r2, [r3, #32]
}
 80295e2:	bf00      	nop
 80295e4:	371c      	adds	r7, #28
 80295e6:	46bd      	mov	sp, r7
 80295e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295ec:	4770      	bx	lr

080295ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80295ee:	b480      	push	{r7}
 80295f0:	b085      	sub	sp, #20
 80295f2:	af00      	add	r7, sp, #0
 80295f4:	6078      	str	r0, [r7, #4]
 80295f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80295f8:	687b      	ldr	r3, [r7, #4]
 80295fa:	689b      	ldr	r3, [r3, #8]
 80295fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80295fe:	68fb      	ldr	r3, [r7, #12]
 8029600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029604:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8029606:	683a      	ldr	r2, [r7, #0]
 8029608:	68fb      	ldr	r3, [r7, #12]
 802960a:	4313      	orrs	r3, r2
 802960c:	f043 0307 	orr.w	r3, r3, #7
 8029610:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8029612:	687b      	ldr	r3, [r7, #4]
 8029614:	68fa      	ldr	r2, [r7, #12]
 8029616:	609a      	str	r2, [r3, #8]
}
 8029618:	bf00      	nop
 802961a:	3714      	adds	r7, #20
 802961c:	46bd      	mov	sp, r7
 802961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029622:	4770      	bx	lr

08029624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8029624:	b480      	push	{r7}
 8029626:	b087      	sub	sp, #28
 8029628:	af00      	add	r7, sp, #0
 802962a:	60f8      	str	r0, [r7, #12]
 802962c:	60b9      	str	r1, [r7, #8]
 802962e:	607a      	str	r2, [r7, #4]
 8029630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8029632:	68fb      	ldr	r3, [r7, #12]
 8029634:	689b      	ldr	r3, [r3, #8]
 8029636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029638:	697b      	ldr	r3, [r7, #20]
 802963a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802963e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8029640:	683b      	ldr	r3, [r7, #0]
 8029642:	021a      	lsls	r2, r3, #8
 8029644:	687b      	ldr	r3, [r7, #4]
 8029646:	431a      	orrs	r2, r3
 8029648:	68bb      	ldr	r3, [r7, #8]
 802964a:	4313      	orrs	r3, r2
 802964c:	697a      	ldr	r2, [r7, #20]
 802964e:	4313      	orrs	r3, r2
 8029650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8029652:	68fb      	ldr	r3, [r7, #12]
 8029654:	697a      	ldr	r2, [r7, #20]
 8029656:	609a      	str	r2, [r3, #8]
}
 8029658:	bf00      	nop
 802965a:	371c      	adds	r7, #28
 802965c:	46bd      	mov	sp, r7
 802965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029662:	4770      	bx	lr

08029664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8029664:	b480      	push	{r7}
 8029666:	b085      	sub	sp, #20
 8029668:	af00      	add	r7, sp, #0
 802966a:	6078      	str	r0, [r7, #4]
 802966c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802966e:	687b      	ldr	r3, [r7, #4]
 8029670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029674:	2b01      	cmp	r3, #1
 8029676:	d101      	bne.n	802967c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8029678:	2302      	movs	r3, #2
 802967a:	e05a      	b.n	8029732 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802967c:	687b      	ldr	r3, [r7, #4]
 802967e:	2201      	movs	r2, #1
 8029680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029684:	687b      	ldr	r3, [r7, #4]
 8029686:	2202      	movs	r2, #2
 8029688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802968c:	687b      	ldr	r3, [r7, #4]
 802968e:	681b      	ldr	r3, [r3, #0]
 8029690:	685b      	ldr	r3, [r3, #4]
 8029692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8029694:	687b      	ldr	r3, [r7, #4]
 8029696:	681b      	ldr	r3, [r3, #0]
 8029698:	689b      	ldr	r3, [r3, #8]
 802969a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802969c:	68fb      	ldr	r3, [r7, #12]
 802969e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80296a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80296a4:	683b      	ldr	r3, [r7, #0]
 80296a6:	681b      	ldr	r3, [r3, #0]
 80296a8:	68fa      	ldr	r2, [r7, #12]
 80296aa:	4313      	orrs	r3, r2
 80296ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80296ae:	687b      	ldr	r3, [r7, #4]
 80296b0:	681b      	ldr	r3, [r3, #0]
 80296b2:	68fa      	ldr	r2, [r7, #12]
 80296b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80296b6:	687b      	ldr	r3, [r7, #4]
 80296b8:	681b      	ldr	r3, [r3, #0]
 80296ba:	4a21      	ldr	r2, [pc, #132]	; (8029740 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80296bc:	4293      	cmp	r3, r2
 80296be:	d022      	beq.n	8029706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296c0:	687b      	ldr	r3, [r7, #4]
 80296c2:	681b      	ldr	r3, [r3, #0]
 80296c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80296c8:	d01d      	beq.n	8029706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296ca:	687b      	ldr	r3, [r7, #4]
 80296cc:	681b      	ldr	r3, [r3, #0]
 80296ce:	4a1d      	ldr	r2, [pc, #116]	; (8029744 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80296d0:	4293      	cmp	r3, r2
 80296d2:	d018      	beq.n	8029706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296d4:	687b      	ldr	r3, [r7, #4]
 80296d6:	681b      	ldr	r3, [r3, #0]
 80296d8:	4a1b      	ldr	r2, [pc, #108]	; (8029748 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80296da:	4293      	cmp	r3, r2
 80296dc:	d013      	beq.n	8029706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296de:	687b      	ldr	r3, [r7, #4]
 80296e0:	681b      	ldr	r3, [r3, #0]
 80296e2:	4a1a      	ldr	r2, [pc, #104]	; (802974c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80296e4:	4293      	cmp	r3, r2
 80296e6:	d00e      	beq.n	8029706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296e8:	687b      	ldr	r3, [r7, #4]
 80296ea:	681b      	ldr	r3, [r3, #0]
 80296ec:	4a18      	ldr	r2, [pc, #96]	; (8029750 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80296ee:	4293      	cmp	r3, r2
 80296f0:	d009      	beq.n	8029706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296f2:	687b      	ldr	r3, [r7, #4]
 80296f4:	681b      	ldr	r3, [r3, #0]
 80296f6:	4a17      	ldr	r2, [pc, #92]	; (8029754 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80296f8:	4293      	cmp	r3, r2
 80296fa:	d004      	beq.n	8029706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296fc:	687b      	ldr	r3, [r7, #4]
 80296fe:	681b      	ldr	r3, [r3, #0]
 8029700:	4a15      	ldr	r2, [pc, #84]	; (8029758 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8029702:	4293      	cmp	r3, r2
 8029704:	d10c      	bne.n	8029720 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8029706:	68bb      	ldr	r3, [r7, #8]
 8029708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802970c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802970e:	683b      	ldr	r3, [r7, #0]
 8029710:	685b      	ldr	r3, [r3, #4]
 8029712:	68ba      	ldr	r2, [r7, #8]
 8029714:	4313      	orrs	r3, r2
 8029716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8029718:	687b      	ldr	r3, [r7, #4]
 802971a:	681b      	ldr	r3, [r3, #0]
 802971c:	68ba      	ldr	r2, [r7, #8]
 802971e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8029720:	687b      	ldr	r3, [r7, #4]
 8029722:	2201      	movs	r2, #1
 8029724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029728:	687b      	ldr	r3, [r7, #4]
 802972a:	2200      	movs	r2, #0
 802972c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029730:	2300      	movs	r3, #0
}
 8029732:	4618      	mov	r0, r3
 8029734:	3714      	adds	r7, #20
 8029736:	46bd      	mov	sp, r7
 8029738:	f85d 7b04 	ldr.w	r7, [sp], #4
 802973c:	4770      	bx	lr
 802973e:	bf00      	nop
 8029740:	40010000 	.word	0x40010000
 8029744:	40000400 	.word	0x40000400
 8029748:	40000800 	.word	0x40000800
 802974c:	40000c00 	.word	0x40000c00
 8029750:	40010400 	.word	0x40010400
 8029754:	40014000 	.word	0x40014000
 8029758:	40001800 	.word	0x40001800

0802975c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802975c:	b480      	push	{r7}
 802975e:	b083      	sub	sp, #12
 8029760:	af00      	add	r7, sp, #0
 8029762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8029764:	bf00      	nop
 8029766:	370c      	adds	r7, #12
 8029768:	46bd      	mov	sp, r7
 802976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802976e:	4770      	bx	lr

08029770 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8029770:	b480      	push	{r7}
 8029772:	b083      	sub	sp, #12
 8029774:	af00      	add	r7, sp, #0
 8029776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8029778:	bf00      	nop
 802977a:	370c      	adds	r7, #12
 802977c:	46bd      	mov	sp, r7
 802977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029782:	4770      	bx	lr

08029784 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8029784:	b580      	push	{r7, lr}
 8029786:	b082      	sub	sp, #8
 8029788:	af00      	add	r7, sp, #0
 802978a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802978c:	687b      	ldr	r3, [r7, #4]
 802978e:	2b00      	cmp	r3, #0
 8029790:	d101      	bne.n	8029796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8029792:	2301      	movs	r3, #1
 8029794:	e03f      	b.n	8029816 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8029796:	687b      	ldr	r3, [r7, #4]
 8029798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802979c:	b2db      	uxtb	r3, r3
 802979e:	2b00      	cmp	r3, #0
 80297a0:	d106      	bne.n	80297b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80297a2:	687b      	ldr	r3, [r7, #4]
 80297a4:	2200      	movs	r2, #0
 80297a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80297aa:	6878      	ldr	r0, [r7, #4]
 80297ac:	f7f8 fa46 	bl	8021c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80297b0:	687b      	ldr	r3, [r7, #4]
 80297b2:	2224      	movs	r2, #36	; 0x24
 80297b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80297b8:	687b      	ldr	r3, [r7, #4]
 80297ba:	681b      	ldr	r3, [r3, #0]
 80297bc:	68da      	ldr	r2, [r3, #12]
 80297be:	687b      	ldr	r3, [r7, #4]
 80297c0:	681b      	ldr	r3, [r3, #0]
 80297c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80297c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80297c8:	6878      	ldr	r0, [r7, #4]
 80297ca:	f000 fddf 	bl	802a38c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80297ce:	687b      	ldr	r3, [r7, #4]
 80297d0:	681b      	ldr	r3, [r3, #0]
 80297d2:	691a      	ldr	r2, [r3, #16]
 80297d4:	687b      	ldr	r3, [r7, #4]
 80297d6:	681b      	ldr	r3, [r3, #0]
 80297d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80297dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80297de:	687b      	ldr	r3, [r7, #4]
 80297e0:	681b      	ldr	r3, [r3, #0]
 80297e2:	695a      	ldr	r2, [r3, #20]
 80297e4:	687b      	ldr	r3, [r7, #4]
 80297e6:	681b      	ldr	r3, [r3, #0]
 80297e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80297ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80297ee:	687b      	ldr	r3, [r7, #4]
 80297f0:	681b      	ldr	r3, [r3, #0]
 80297f2:	68da      	ldr	r2, [r3, #12]
 80297f4:	687b      	ldr	r3, [r7, #4]
 80297f6:	681b      	ldr	r3, [r3, #0]
 80297f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80297fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80297fe:	687b      	ldr	r3, [r7, #4]
 8029800:	2200      	movs	r2, #0
 8029802:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8029804:	687b      	ldr	r3, [r7, #4]
 8029806:	2220      	movs	r2, #32
 8029808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 802980c:	687b      	ldr	r3, [r7, #4]
 802980e:	2220      	movs	r2, #32
 8029810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8029814:	2300      	movs	r3, #0
}
 8029816:	4618      	mov	r0, r3
 8029818:	3708      	adds	r7, #8
 802981a:	46bd      	mov	sp, r7
 802981c:	bd80      	pop	{r7, pc}

0802981e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802981e:	b580      	push	{r7, lr}
 8029820:	b08a      	sub	sp, #40	; 0x28
 8029822:	af02      	add	r7, sp, #8
 8029824:	60f8      	str	r0, [r7, #12]
 8029826:	60b9      	str	r1, [r7, #8]
 8029828:	603b      	str	r3, [r7, #0]
 802982a:	4613      	mov	r3, r2
 802982c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 802982e:	2300      	movs	r3, #0
 8029830:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8029832:	68fb      	ldr	r3, [r7, #12]
 8029834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029838:	b2db      	uxtb	r3, r3
 802983a:	2b20      	cmp	r3, #32
 802983c:	d17c      	bne.n	8029938 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 802983e:	68bb      	ldr	r3, [r7, #8]
 8029840:	2b00      	cmp	r3, #0
 8029842:	d002      	beq.n	802984a <HAL_UART_Transmit+0x2c>
 8029844:	88fb      	ldrh	r3, [r7, #6]
 8029846:	2b00      	cmp	r3, #0
 8029848:	d101      	bne.n	802984e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 802984a:	2301      	movs	r3, #1
 802984c:	e075      	b.n	802993a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802984e:	68fb      	ldr	r3, [r7, #12]
 8029850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029854:	2b01      	cmp	r3, #1
 8029856:	d101      	bne.n	802985c <HAL_UART_Transmit+0x3e>
 8029858:	2302      	movs	r3, #2
 802985a:	e06e      	b.n	802993a <HAL_UART_Transmit+0x11c>
 802985c:	68fb      	ldr	r3, [r7, #12]
 802985e:	2201      	movs	r2, #1
 8029860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029864:	68fb      	ldr	r3, [r7, #12]
 8029866:	2200      	movs	r2, #0
 8029868:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802986a:	68fb      	ldr	r3, [r7, #12]
 802986c:	2221      	movs	r2, #33	; 0x21
 802986e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8029872:	f7f9 ff0b 	bl	802368c <HAL_GetTick>
 8029876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8029878:	68fb      	ldr	r3, [r7, #12]
 802987a:	88fa      	ldrh	r2, [r7, #6]
 802987c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 802987e:	68fb      	ldr	r3, [r7, #12]
 8029880:	88fa      	ldrh	r2, [r7, #6]
 8029882:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8029884:	68fb      	ldr	r3, [r7, #12]
 8029886:	689b      	ldr	r3, [r3, #8]
 8029888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802988c:	d108      	bne.n	80298a0 <HAL_UART_Transmit+0x82>
 802988e:	68fb      	ldr	r3, [r7, #12]
 8029890:	691b      	ldr	r3, [r3, #16]
 8029892:	2b00      	cmp	r3, #0
 8029894:	d104      	bne.n	80298a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8029896:	2300      	movs	r3, #0
 8029898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802989a:	68bb      	ldr	r3, [r7, #8]
 802989c:	61bb      	str	r3, [r7, #24]
 802989e:	e003      	b.n	80298a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80298a0:	68bb      	ldr	r3, [r7, #8]
 80298a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80298a4:	2300      	movs	r3, #0
 80298a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80298a8:	68fb      	ldr	r3, [r7, #12]
 80298aa:	2200      	movs	r2, #0
 80298ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80298b0:	e02a      	b.n	8029908 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80298b2:	683b      	ldr	r3, [r7, #0]
 80298b4:	9300      	str	r3, [sp, #0]
 80298b6:	697b      	ldr	r3, [r7, #20]
 80298b8:	2200      	movs	r2, #0
 80298ba:	2180      	movs	r1, #128	; 0x80
 80298bc:	68f8      	ldr	r0, [r7, #12]
 80298be:	f000 fb1f 	bl	8029f00 <UART_WaitOnFlagUntilTimeout>
 80298c2:	4603      	mov	r3, r0
 80298c4:	2b00      	cmp	r3, #0
 80298c6:	d001      	beq.n	80298cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80298c8:	2303      	movs	r3, #3
 80298ca:	e036      	b.n	802993a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80298cc:	69fb      	ldr	r3, [r7, #28]
 80298ce:	2b00      	cmp	r3, #0
 80298d0:	d10b      	bne.n	80298ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80298d2:	69bb      	ldr	r3, [r7, #24]
 80298d4:	881b      	ldrh	r3, [r3, #0]
 80298d6:	461a      	mov	r2, r3
 80298d8:	68fb      	ldr	r3, [r7, #12]
 80298da:	681b      	ldr	r3, [r3, #0]
 80298dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80298e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80298e2:	69bb      	ldr	r3, [r7, #24]
 80298e4:	3302      	adds	r3, #2
 80298e6:	61bb      	str	r3, [r7, #24]
 80298e8:	e007      	b.n	80298fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80298ea:	69fb      	ldr	r3, [r7, #28]
 80298ec:	781a      	ldrb	r2, [r3, #0]
 80298ee:	68fb      	ldr	r3, [r7, #12]
 80298f0:	681b      	ldr	r3, [r3, #0]
 80298f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80298f4:	69fb      	ldr	r3, [r7, #28]
 80298f6:	3301      	adds	r3, #1
 80298f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80298fa:	68fb      	ldr	r3, [r7, #12]
 80298fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80298fe:	b29b      	uxth	r3, r3
 8029900:	3b01      	subs	r3, #1
 8029902:	b29a      	uxth	r2, r3
 8029904:	68fb      	ldr	r3, [r7, #12]
 8029906:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8029908:	68fb      	ldr	r3, [r7, #12]
 802990a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802990c:	b29b      	uxth	r3, r3
 802990e:	2b00      	cmp	r3, #0
 8029910:	d1cf      	bne.n	80298b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8029912:	683b      	ldr	r3, [r7, #0]
 8029914:	9300      	str	r3, [sp, #0]
 8029916:	697b      	ldr	r3, [r7, #20]
 8029918:	2200      	movs	r2, #0
 802991a:	2140      	movs	r1, #64	; 0x40
 802991c:	68f8      	ldr	r0, [r7, #12]
 802991e:	f000 faef 	bl	8029f00 <UART_WaitOnFlagUntilTimeout>
 8029922:	4603      	mov	r3, r0
 8029924:	2b00      	cmp	r3, #0
 8029926:	d001      	beq.n	802992c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8029928:	2303      	movs	r3, #3
 802992a:	e006      	b.n	802993a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 802992c:	68fb      	ldr	r3, [r7, #12]
 802992e:	2220      	movs	r2, #32
 8029930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8029934:	2300      	movs	r3, #0
 8029936:	e000      	b.n	802993a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8029938:	2302      	movs	r3, #2
  }
}
 802993a:	4618      	mov	r0, r3
 802993c:	3720      	adds	r7, #32
 802993e:	46bd      	mov	sp, r7
 8029940:	bd80      	pop	{r7, pc}

08029942 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8029942:	b580      	push	{r7, lr}
 8029944:	b084      	sub	sp, #16
 8029946:	af00      	add	r7, sp, #0
 8029948:	60f8      	str	r0, [r7, #12]
 802994a:	60b9      	str	r1, [r7, #8]
 802994c:	4613      	mov	r3, r2
 802994e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8029950:	68fb      	ldr	r3, [r7, #12]
 8029952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8029956:	b2db      	uxtb	r3, r3
 8029958:	2b20      	cmp	r3, #32
 802995a:	d11d      	bne.n	8029998 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 802995c:	68bb      	ldr	r3, [r7, #8]
 802995e:	2b00      	cmp	r3, #0
 8029960:	d002      	beq.n	8029968 <HAL_UART_Receive_IT+0x26>
 8029962:	88fb      	ldrh	r3, [r7, #6]
 8029964:	2b00      	cmp	r3, #0
 8029966:	d101      	bne.n	802996c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8029968:	2301      	movs	r3, #1
 802996a:	e016      	b.n	802999a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802996c:	68fb      	ldr	r3, [r7, #12]
 802996e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029972:	2b01      	cmp	r3, #1
 8029974:	d101      	bne.n	802997a <HAL_UART_Receive_IT+0x38>
 8029976:	2302      	movs	r3, #2
 8029978:	e00f      	b.n	802999a <HAL_UART_Receive_IT+0x58>
 802997a:	68fb      	ldr	r3, [r7, #12]
 802997c:	2201      	movs	r2, #1
 802997e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029982:	68fb      	ldr	r3, [r7, #12]
 8029984:	2200      	movs	r2, #0
 8029986:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8029988:	88fb      	ldrh	r3, [r7, #6]
 802998a:	461a      	mov	r2, r3
 802998c:	68b9      	ldr	r1, [r7, #8]
 802998e:	68f8      	ldr	r0, [r7, #12]
 8029990:	f000 fb24 	bl	8029fdc <UART_Start_Receive_IT>
 8029994:	4603      	mov	r3, r0
 8029996:	e000      	b.n	802999a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8029998:	2302      	movs	r3, #2
  }
}
 802999a:	4618      	mov	r0, r3
 802999c:	3710      	adds	r7, #16
 802999e:	46bd      	mov	sp, r7
 80299a0:	bd80      	pop	{r7, pc}
	...

080299a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80299a4:	b580      	push	{r7, lr}
 80299a6:	b0ba      	sub	sp, #232	; 0xe8
 80299a8:	af00      	add	r7, sp, #0
 80299aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80299ac:	687b      	ldr	r3, [r7, #4]
 80299ae:	681b      	ldr	r3, [r3, #0]
 80299b0:	681b      	ldr	r3, [r3, #0]
 80299b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80299b6:	687b      	ldr	r3, [r7, #4]
 80299b8:	681b      	ldr	r3, [r3, #0]
 80299ba:	68db      	ldr	r3, [r3, #12]
 80299bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80299c0:	687b      	ldr	r3, [r7, #4]
 80299c2:	681b      	ldr	r3, [r3, #0]
 80299c4:	695b      	ldr	r3, [r3, #20]
 80299c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80299ca:	2300      	movs	r3, #0
 80299cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80299d0:	2300      	movs	r3, #0
 80299d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80299d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80299da:	f003 030f 	and.w	r3, r3, #15
 80299de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80299e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80299e6:	2b00      	cmp	r3, #0
 80299e8:	d10f      	bne.n	8029a0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80299ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80299ee:	f003 0320 	and.w	r3, r3, #32
 80299f2:	2b00      	cmp	r3, #0
 80299f4:	d009      	beq.n	8029a0a <HAL_UART_IRQHandler+0x66>
 80299f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80299fa:	f003 0320 	and.w	r3, r3, #32
 80299fe:	2b00      	cmp	r3, #0
 8029a00:	d003      	beq.n	8029a0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8029a02:	6878      	ldr	r0, [r7, #4]
 8029a04:	f000 fc07 	bl	802a216 <UART_Receive_IT>
      return;
 8029a08:	e256      	b.n	8029eb8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8029a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8029a0e:	2b00      	cmp	r3, #0
 8029a10:	f000 80de 	beq.w	8029bd0 <HAL_UART_IRQHandler+0x22c>
 8029a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029a18:	f003 0301 	and.w	r3, r3, #1
 8029a1c:	2b00      	cmp	r3, #0
 8029a1e:	d106      	bne.n	8029a2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8029a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029a24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8029a28:	2b00      	cmp	r3, #0
 8029a2a:	f000 80d1 	beq.w	8029bd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8029a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029a32:	f003 0301 	and.w	r3, r3, #1
 8029a36:	2b00      	cmp	r3, #0
 8029a38:	d00b      	beq.n	8029a52 <HAL_UART_IRQHandler+0xae>
 8029a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8029a42:	2b00      	cmp	r3, #0
 8029a44:	d005      	beq.n	8029a52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8029a46:	687b      	ldr	r3, [r7, #4]
 8029a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029a4a:	f043 0201 	orr.w	r2, r3, #1
 8029a4e:	687b      	ldr	r3, [r7, #4]
 8029a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8029a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029a56:	f003 0304 	and.w	r3, r3, #4
 8029a5a:	2b00      	cmp	r3, #0
 8029a5c:	d00b      	beq.n	8029a76 <HAL_UART_IRQHandler+0xd2>
 8029a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029a62:	f003 0301 	and.w	r3, r3, #1
 8029a66:	2b00      	cmp	r3, #0
 8029a68:	d005      	beq.n	8029a76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8029a6a:	687b      	ldr	r3, [r7, #4]
 8029a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029a6e:	f043 0202 	orr.w	r2, r3, #2
 8029a72:	687b      	ldr	r3, [r7, #4]
 8029a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8029a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029a7a:	f003 0302 	and.w	r3, r3, #2
 8029a7e:	2b00      	cmp	r3, #0
 8029a80:	d00b      	beq.n	8029a9a <HAL_UART_IRQHandler+0xf6>
 8029a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029a86:	f003 0301 	and.w	r3, r3, #1
 8029a8a:	2b00      	cmp	r3, #0
 8029a8c:	d005      	beq.n	8029a9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8029a8e:	687b      	ldr	r3, [r7, #4]
 8029a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029a92:	f043 0204 	orr.w	r2, r3, #4
 8029a96:	687b      	ldr	r3, [r7, #4]
 8029a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8029a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029a9e:	f003 0308 	and.w	r3, r3, #8
 8029aa2:	2b00      	cmp	r3, #0
 8029aa4:	d011      	beq.n	8029aca <HAL_UART_IRQHandler+0x126>
 8029aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029aaa:	f003 0320 	and.w	r3, r3, #32
 8029aae:	2b00      	cmp	r3, #0
 8029ab0:	d105      	bne.n	8029abe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8029ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029ab6:	f003 0301 	and.w	r3, r3, #1
 8029aba:	2b00      	cmp	r3, #0
 8029abc:	d005      	beq.n	8029aca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8029abe:	687b      	ldr	r3, [r7, #4]
 8029ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029ac2:	f043 0208 	orr.w	r2, r3, #8
 8029ac6:	687b      	ldr	r3, [r7, #4]
 8029ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8029aca:	687b      	ldr	r3, [r7, #4]
 8029acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029ace:	2b00      	cmp	r3, #0
 8029ad0:	f000 81ed 	beq.w	8029eae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8029ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029ad8:	f003 0320 	and.w	r3, r3, #32
 8029adc:	2b00      	cmp	r3, #0
 8029ade:	d008      	beq.n	8029af2 <HAL_UART_IRQHandler+0x14e>
 8029ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029ae4:	f003 0320 	and.w	r3, r3, #32
 8029ae8:	2b00      	cmp	r3, #0
 8029aea:	d002      	beq.n	8029af2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8029aec:	6878      	ldr	r0, [r7, #4]
 8029aee:	f000 fb92 	bl	802a216 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8029af2:	687b      	ldr	r3, [r7, #4]
 8029af4:	681b      	ldr	r3, [r3, #0]
 8029af6:	695b      	ldr	r3, [r3, #20]
 8029af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029afc:	2b40      	cmp	r3, #64	; 0x40
 8029afe:	bf0c      	ite	eq
 8029b00:	2301      	moveq	r3, #1
 8029b02:	2300      	movne	r3, #0
 8029b04:	b2db      	uxtb	r3, r3
 8029b06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8029b0a:	687b      	ldr	r3, [r7, #4]
 8029b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029b0e:	f003 0308 	and.w	r3, r3, #8
 8029b12:	2b00      	cmp	r3, #0
 8029b14:	d103      	bne.n	8029b1e <HAL_UART_IRQHandler+0x17a>
 8029b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8029b1a:	2b00      	cmp	r3, #0
 8029b1c:	d04f      	beq.n	8029bbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8029b1e:	6878      	ldr	r0, [r7, #4]
 8029b20:	f000 fa9a 	bl	802a058 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b24:	687b      	ldr	r3, [r7, #4]
 8029b26:	681b      	ldr	r3, [r3, #0]
 8029b28:	695b      	ldr	r3, [r3, #20]
 8029b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029b2e:	2b40      	cmp	r3, #64	; 0x40
 8029b30:	d141      	bne.n	8029bb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8029b32:	687b      	ldr	r3, [r7, #4]
 8029b34:	681b      	ldr	r3, [r3, #0]
 8029b36:	3314      	adds	r3, #20
 8029b38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8029b40:	e853 3f00 	ldrex	r3, [r3]
 8029b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8029b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8029b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8029b54:	687b      	ldr	r3, [r7, #4]
 8029b56:	681b      	ldr	r3, [r3, #0]
 8029b58:	3314      	adds	r3, #20
 8029b5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8029b5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8029b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029b66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8029b6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8029b6e:	e841 2300 	strex	r3, r2, [r1]
 8029b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8029b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8029b7a:	2b00      	cmp	r3, #0
 8029b7c:	d1d9      	bne.n	8029b32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8029b7e:	687b      	ldr	r3, [r7, #4]
 8029b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029b82:	2b00      	cmp	r3, #0
 8029b84:	d013      	beq.n	8029bae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8029b86:	687b      	ldr	r3, [r7, #4]
 8029b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029b8a:	4a7d      	ldr	r2, [pc, #500]	; (8029d80 <HAL_UART_IRQHandler+0x3dc>)
 8029b8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8029b8e:	687b      	ldr	r3, [r7, #4]
 8029b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029b92:	4618      	mov	r0, r3
 8029b94:	f7fa f840 	bl	8023c18 <HAL_DMA_Abort_IT>
 8029b98:	4603      	mov	r3, r0
 8029b9a:	2b00      	cmp	r3, #0
 8029b9c:	d016      	beq.n	8029bcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8029b9e:	687b      	ldr	r3, [r7, #4]
 8029ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029ba4:	687a      	ldr	r2, [r7, #4]
 8029ba6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8029ba8:	4610      	mov	r0, r2
 8029baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029bac:	e00e      	b.n	8029bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8029bae:	6878      	ldr	r0, [r7, #4]
 8029bb0:	f000 f990 	bl	8029ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029bb4:	e00a      	b.n	8029bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8029bb6:	6878      	ldr	r0, [r7, #4]
 8029bb8:	f000 f98c 	bl	8029ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029bbc:	e006      	b.n	8029bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8029bbe:	6878      	ldr	r0, [r7, #4]
 8029bc0:	f000 f988 	bl	8029ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029bc4:	687b      	ldr	r3, [r7, #4]
 8029bc6:	2200      	movs	r2, #0
 8029bc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8029bca:	e170      	b.n	8029eae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029bcc:	bf00      	nop
    return;
 8029bce:	e16e      	b.n	8029eae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8029bd0:	687b      	ldr	r3, [r7, #4]
 8029bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029bd4:	2b01      	cmp	r3, #1
 8029bd6:	f040 814a 	bne.w	8029e6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8029bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029bde:	f003 0310 	and.w	r3, r3, #16
 8029be2:	2b00      	cmp	r3, #0
 8029be4:	f000 8143 	beq.w	8029e6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8029be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029bec:	f003 0310 	and.w	r3, r3, #16
 8029bf0:	2b00      	cmp	r3, #0
 8029bf2:	f000 813c 	beq.w	8029e6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8029bf6:	2300      	movs	r3, #0
 8029bf8:	60bb      	str	r3, [r7, #8]
 8029bfa:	687b      	ldr	r3, [r7, #4]
 8029bfc:	681b      	ldr	r3, [r3, #0]
 8029bfe:	681b      	ldr	r3, [r3, #0]
 8029c00:	60bb      	str	r3, [r7, #8]
 8029c02:	687b      	ldr	r3, [r7, #4]
 8029c04:	681b      	ldr	r3, [r3, #0]
 8029c06:	685b      	ldr	r3, [r3, #4]
 8029c08:	60bb      	str	r3, [r7, #8]
 8029c0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029c0c:	687b      	ldr	r3, [r7, #4]
 8029c0e:	681b      	ldr	r3, [r3, #0]
 8029c10:	695b      	ldr	r3, [r3, #20]
 8029c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029c16:	2b40      	cmp	r3, #64	; 0x40
 8029c18:	f040 80b4 	bne.w	8029d84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8029c1c:	687b      	ldr	r3, [r7, #4]
 8029c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029c20:	681b      	ldr	r3, [r3, #0]
 8029c22:	685b      	ldr	r3, [r3, #4]
 8029c24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8029c28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8029c2c:	2b00      	cmp	r3, #0
 8029c2e:	f000 8140 	beq.w	8029eb2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8029c32:	687b      	ldr	r3, [r7, #4]
 8029c34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8029c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8029c3a:	429a      	cmp	r2, r3
 8029c3c:	f080 8139 	bcs.w	8029eb2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8029c40:	687b      	ldr	r3, [r7, #4]
 8029c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8029c46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8029c48:	687b      	ldr	r3, [r7, #4]
 8029c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029c4c:	69db      	ldr	r3, [r3, #28]
 8029c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8029c52:	f000 8088 	beq.w	8029d66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8029c56:	687b      	ldr	r3, [r7, #4]
 8029c58:	681b      	ldr	r3, [r3, #0]
 8029c5a:	330c      	adds	r3, #12
 8029c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029c64:	e853 3f00 	ldrex	r3, [r3]
 8029c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8029c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8029c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8029c78:	687b      	ldr	r3, [r7, #4]
 8029c7a:	681b      	ldr	r3, [r3, #0]
 8029c7c:	330c      	adds	r3, #12
 8029c7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8029c82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8029c86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029c8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8029c8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8029c92:	e841 2300 	strex	r3, r2, [r1]
 8029c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8029c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8029c9e:	2b00      	cmp	r3, #0
 8029ca0:	d1d9      	bne.n	8029c56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029ca2:	687b      	ldr	r3, [r7, #4]
 8029ca4:	681b      	ldr	r3, [r3, #0]
 8029ca6:	3314      	adds	r3, #20
 8029ca8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029cac:	e853 3f00 	ldrex	r3, [r3]
 8029cb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8029cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8029cb4:	f023 0301 	bic.w	r3, r3, #1
 8029cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8029cbc:	687b      	ldr	r3, [r7, #4]
 8029cbe:	681b      	ldr	r3, [r3, #0]
 8029cc0:	3314      	adds	r3, #20
 8029cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8029cc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8029cca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029ccc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8029cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8029cd2:	e841 2300 	strex	r3, r2, [r1]
 8029cd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8029cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8029cda:	2b00      	cmp	r3, #0
 8029cdc:	d1e1      	bne.n	8029ca2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8029cde:	687b      	ldr	r3, [r7, #4]
 8029ce0:	681b      	ldr	r3, [r3, #0]
 8029ce2:	3314      	adds	r3, #20
 8029ce4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8029ce8:	e853 3f00 	ldrex	r3, [r3]
 8029cec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8029cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8029cf8:	687b      	ldr	r3, [r7, #4]
 8029cfa:	681b      	ldr	r3, [r3, #0]
 8029cfc:	3314      	adds	r3, #20
 8029cfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8029d02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8029d04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029d06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8029d08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8029d0a:	e841 2300 	strex	r3, r2, [r1]
 8029d0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8029d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8029d12:	2b00      	cmp	r3, #0
 8029d14:	d1e3      	bne.n	8029cde <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8029d16:	687b      	ldr	r3, [r7, #4]
 8029d18:	2220      	movs	r2, #32
 8029d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029d1e:	687b      	ldr	r3, [r7, #4]
 8029d20:	2200      	movs	r2, #0
 8029d22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029d24:	687b      	ldr	r3, [r7, #4]
 8029d26:	681b      	ldr	r3, [r3, #0]
 8029d28:	330c      	adds	r3, #12
 8029d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d2e:	e853 3f00 	ldrex	r3, [r3]
 8029d32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8029d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029d36:	f023 0310 	bic.w	r3, r3, #16
 8029d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8029d3e:	687b      	ldr	r3, [r7, #4]
 8029d40:	681b      	ldr	r3, [r3, #0]
 8029d42:	330c      	adds	r3, #12
 8029d44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8029d48:	65ba      	str	r2, [r7, #88]	; 0x58
 8029d4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029d4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8029d4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029d50:	e841 2300 	strex	r3, r2, [r1]
 8029d54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8029d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029d58:	2b00      	cmp	r3, #0
 8029d5a:	d1e3      	bne.n	8029d24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8029d5c:	687b      	ldr	r3, [r7, #4]
 8029d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029d60:	4618      	mov	r0, r3
 8029d62:	f7f9 fee9 	bl	8023b38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8029d66:	687b      	ldr	r3, [r7, #4]
 8029d68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8029d6a:	687b      	ldr	r3, [r7, #4]
 8029d6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029d6e:	b29b      	uxth	r3, r3
 8029d70:	1ad3      	subs	r3, r2, r3
 8029d72:	b29b      	uxth	r3, r3
 8029d74:	4619      	mov	r1, r3
 8029d76:	6878      	ldr	r0, [r7, #4]
 8029d78:	f000 f8b6 	bl	8029ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8029d7c:	e099      	b.n	8029eb2 <HAL_UART_IRQHandler+0x50e>
 8029d7e:	bf00      	nop
 8029d80:	0802a11f 	.word	0x0802a11f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8029d84:	687b      	ldr	r3, [r7, #4]
 8029d86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8029d88:	687b      	ldr	r3, [r7, #4]
 8029d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029d8c:	b29b      	uxth	r3, r3
 8029d8e:	1ad3      	subs	r3, r2, r3
 8029d90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8029d94:	687b      	ldr	r3, [r7, #4]
 8029d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029d98:	b29b      	uxth	r3, r3
 8029d9a:	2b00      	cmp	r3, #0
 8029d9c:	f000 808b 	beq.w	8029eb6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8029da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8029da4:	2b00      	cmp	r3, #0
 8029da6:	f000 8086 	beq.w	8029eb6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8029daa:	687b      	ldr	r3, [r7, #4]
 8029dac:	681b      	ldr	r3, [r3, #0]
 8029dae:	330c      	adds	r3, #12
 8029db0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029db4:	e853 3f00 	ldrex	r3, [r3]
 8029db8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8029dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029dbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8029dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8029dc4:	687b      	ldr	r3, [r7, #4]
 8029dc6:	681b      	ldr	r3, [r3, #0]
 8029dc8:	330c      	adds	r3, #12
 8029dca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8029dce:	647a      	str	r2, [r7, #68]	; 0x44
 8029dd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029dd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8029dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8029dd6:	e841 2300 	strex	r3, r2, [r1]
 8029dda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8029ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029dde:	2b00      	cmp	r3, #0
 8029de0:	d1e3      	bne.n	8029daa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029de2:	687b      	ldr	r3, [r7, #4]
 8029de4:	681b      	ldr	r3, [r3, #0]
 8029de6:	3314      	adds	r3, #20
 8029de8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029dec:	e853 3f00 	ldrex	r3, [r3]
 8029df0:	623b      	str	r3, [r7, #32]
   return(result);
 8029df2:	6a3b      	ldr	r3, [r7, #32]
 8029df4:	f023 0301 	bic.w	r3, r3, #1
 8029df8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8029dfc:	687b      	ldr	r3, [r7, #4]
 8029dfe:	681b      	ldr	r3, [r3, #0]
 8029e00:	3314      	adds	r3, #20
 8029e02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8029e06:	633a      	str	r2, [r7, #48]	; 0x30
 8029e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8029e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029e0e:	e841 2300 	strex	r3, r2, [r1]
 8029e12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8029e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029e16:	2b00      	cmp	r3, #0
 8029e18:	d1e3      	bne.n	8029de2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8029e1a:	687b      	ldr	r3, [r7, #4]
 8029e1c:	2220      	movs	r2, #32
 8029e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029e22:	687b      	ldr	r3, [r7, #4]
 8029e24:	2200      	movs	r2, #0
 8029e26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029e28:	687b      	ldr	r3, [r7, #4]
 8029e2a:	681b      	ldr	r3, [r3, #0]
 8029e2c:	330c      	adds	r3, #12
 8029e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029e30:	693b      	ldr	r3, [r7, #16]
 8029e32:	e853 3f00 	ldrex	r3, [r3]
 8029e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8029e38:	68fb      	ldr	r3, [r7, #12]
 8029e3a:	f023 0310 	bic.w	r3, r3, #16
 8029e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8029e42:	687b      	ldr	r3, [r7, #4]
 8029e44:	681b      	ldr	r3, [r3, #0]
 8029e46:	330c      	adds	r3, #12
 8029e48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8029e4c:	61fa      	str	r2, [r7, #28]
 8029e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029e50:	69b9      	ldr	r1, [r7, #24]
 8029e52:	69fa      	ldr	r2, [r7, #28]
 8029e54:	e841 2300 	strex	r3, r2, [r1]
 8029e58:	617b      	str	r3, [r7, #20]
   return(result);
 8029e5a:	697b      	ldr	r3, [r7, #20]
 8029e5c:	2b00      	cmp	r3, #0
 8029e5e:	d1e3      	bne.n	8029e28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8029e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8029e64:	4619      	mov	r1, r3
 8029e66:	6878      	ldr	r0, [r7, #4]
 8029e68:	f000 f83e 	bl	8029ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8029e6c:	e023      	b.n	8029eb6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8029e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029e76:	2b00      	cmp	r3, #0
 8029e78:	d009      	beq.n	8029e8e <HAL_UART_IRQHandler+0x4ea>
 8029e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029e82:	2b00      	cmp	r3, #0
 8029e84:	d003      	beq.n	8029e8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8029e86:	6878      	ldr	r0, [r7, #4]
 8029e88:	f000 f95d 	bl	802a146 <UART_Transmit_IT>
    return;
 8029e8c:	e014      	b.n	8029eb8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8029e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029e96:	2b00      	cmp	r3, #0
 8029e98:	d00e      	beq.n	8029eb8 <HAL_UART_IRQHandler+0x514>
 8029e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029ea2:	2b00      	cmp	r3, #0
 8029ea4:	d008      	beq.n	8029eb8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8029ea6:	6878      	ldr	r0, [r7, #4]
 8029ea8:	f000 f99d 	bl	802a1e6 <UART_EndTransmit_IT>
    return;
 8029eac:	e004      	b.n	8029eb8 <HAL_UART_IRQHandler+0x514>
    return;
 8029eae:	bf00      	nop
 8029eb0:	e002      	b.n	8029eb8 <HAL_UART_IRQHandler+0x514>
      return;
 8029eb2:	bf00      	nop
 8029eb4:	e000      	b.n	8029eb8 <HAL_UART_IRQHandler+0x514>
      return;
 8029eb6:	bf00      	nop
  }
}
 8029eb8:	37e8      	adds	r7, #232	; 0xe8
 8029eba:	46bd      	mov	sp, r7
 8029ebc:	bd80      	pop	{r7, pc}
 8029ebe:	bf00      	nop

08029ec0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8029ec0:	b480      	push	{r7}
 8029ec2:	b083      	sub	sp, #12
 8029ec4:	af00      	add	r7, sp, #0
 8029ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8029ec8:	bf00      	nop
 8029eca:	370c      	adds	r7, #12
 8029ecc:	46bd      	mov	sp, r7
 8029ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ed2:	4770      	bx	lr

08029ed4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8029ed4:	b480      	push	{r7}
 8029ed6:	b083      	sub	sp, #12
 8029ed8:	af00      	add	r7, sp, #0
 8029eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8029edc:	bf00      	nop
 8029ede:	370c      	adds	r7, #12
 8029ee0:	46bd      	mov	sp, r7
 8029ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ee6:	4770      	bx	lr

08029ee8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8029ee8:	b480      	push	{r7}
 8029eea:	b083      	sub	sp, #12
 8029eec:	af00      	add	r7, sp, #0
 8029eee:	6078      	str	r0, [r7, #4]
 8029ef0:	460b      	mov	r3, r1
 8029ef2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8029ef4:	bf00      	nop
 8029ef6:	370c      	adds	r7, #12
 8029ef8:	46bd      	mov	sp, r7
 8029efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029efe:	4770      	bx	lr

08029f00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8029f00:	b580      	push	{r7, lr}
 8029f02:	b090      	sub	sp, #64	; 0x40
 8029f04:	af00      	add	r7, sp, #0
 8029f06:	60f8      	str	r0, [r7, #12]
 8029f08:	60b9      	str	r1, [r7, #8]
 8029f0a:	603b      	str	r3, [r7, #0]
 8029f0c:	4613      	mov	r3, r2
 8029f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8029f10:	e050      	b.n	8029fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8029f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029f18:	d04c      	beq.n	8029fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8029f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029f1c:	2b00      	cmp	r3, #0
 8029f1e:	d007      	beq.n	8029f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8029f20:	f7f9 fbb4 	bl	802368c <HAL_GetTick>
 8029f24:	4602      	mov	r2, r0
 8029f26:	683b      	ldr	r3, [r7, #0]
 8029f28:	1ad3      	subs	r3, r2, r3
 8029f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8029f2c:	429a      	cmp	r2, r3
 8029f2e:	d241      	bcs.n	8029fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8029f30:	68fb      	ldr	r3, [r7, #12]
 8029f32:	681b      	ldr	r3, [r3, #0]
 8029f34:	330c      	adds	r3, #12
 8029f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029f3a:	e853 3f00 	ldrex	r3, [r3]
 8029f3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8029f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8029f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8029f48:	68fb      	ldr	r3, [r7, #12]
 8029f4a:	681b      	ldr	r3, [r3, #0]
 8029f4c:	330c      	adds	r3, #12
 8029f4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8029f50:	637a      	str	r2, [r7, #52]	; 0x34
 8029f52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8029f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029f58:	e841 2300 	strex	r3, r2, [r1]
 8029f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8029f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029f60:	2b00      	cmp	r3, #0
 8029f62:	d1e5      	bne.n	8029f30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029f64:	68fb      	ldr	r3, [r7, #12]
 8029f66:	681b      	ldr	r3, [r3, #0]
 8029f68:	3314      	adds	r3, #20
 8029f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029f6c:	697b      	ldr	r3, [r7, #20]
 8029f6e:	e853 3f00 	ldrex	r3, [r3]
 8029f72:	613b      	str	r3, [r7, #16]
   return(result);
 8029f74:	693b      	ldr	r3, [r7, #16]
 8029f76:	f023 0301 	bic.w	r3, r3, #1
 8029f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8029f7c:	68fb      	ldr	r3, [r7, #12]
 8029f7e:	681b      	ldr	r3, [r3, #0]
 8029f80:	3314      	adds	r3, #20
 8029f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8029f84:	623a      	str	r2, [r7, #32]
 8029f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029f88:	69f9      	ldr	r1, [r7, #28]
 8029f8a:	6a3a      	ldr	r2, [r7, #32]
 8029f8c:	e841 2300 	strex	r3, r2, [r1]
 8029f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8029f92:	69bb      	ldr	r3, [r7, #24]
 8029f94:	2b00      	cmp	r3, #0
 8029f96:	d1e5      	bne.n	8029f64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8029f98:	68fb      	ldr	r3, [r7, #12]
 8029f9a:	2220      	movs	r2, #32
 8029f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8029fa0:	68fb      	ldr	r3, [r7, #12]
 8029fa2:	2220      	movs	r2, #32
 8029fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8029fa8:	68fb      	ldr	r3, [r7, #12]
 8029faa:	2200      	movs	r2, #0
 8029fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8029fb0:	2303      	movs	r3, #3
 8029fb2:	e00f      	b.n	8029fd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8029fb4:	68fb      	ldr	r3, [r7, #12]
 8029fb6:	681b      	ldr	r3, [r3, #0]
 8029fb8:	681a      	ldr	r2, [r3, #0]
 8029fba:	68bb      	ldr	r3, [r7, #8]
 8029fbc:	4013      	ands	r3, r2
 8029fbe:	68ba      	ldr	r2, [r7, #8]
 8029fc0:	429a      	cmp	r2, r3
 8029fc2:	bf0c      	ite	eq
 8029fc4:	2301      	moveq	r3, #1
 8029fc6:	2300      	movne	r3, #0
 8029fc8:	b2db      	uxtb	r3, r3
 8029fca:	461a      	mov	r2, r3
 8029fcc:	79fb      	ldrb	r3, [r7, #7]
 8029fce:	429a      	cmp	r2, r3
 8029fd0:	d09f      	beq.n	8029f12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8029fd2:	2300      	movs	r3, #0
}
 8029fd4:	4618      	mov	r0, r3
 8029fd6:	3740      	adds	r7, #64	; 0x40
 8029fd8:	46bd      	mov	sp, r7
 8029fda:	bd80      	pop	{r7, pc}

08029fdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8029fdc:	b480      	push	{r7}
 8029fde:	b085      	sub	sp, #20
 8029fe0:	af00      	add	r7, sp, #0
 8029fe2:	60f8      	str	r0, [r7, #12]
 8029fe4:	60b9      	str	r1, [r7, #8]
 8029fe6:	4613      	mov	r3, r2
 8029fe8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8029fea:	68fb      	ldr	r3, [r7, #12]
 8029fec:	68ba      	ldr	r2, [r7, #8]
 8029fee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8029ff0:	68fb      	ldr	r3, [r7, #12]
 8029ff2:	88fa      	ldrh	r2, [r7, #6]
 8029ff4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8029ff6:	68fb      	ldr	r3, [r7, #12]
 8029ff8:	88fa      	ldrh	r2, [r7, #6]
 8029ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029ffc:	68fb      	ldr	r3, [r7, #12]
 8029ffe:	2200      	movs	r2, #0
 802a000:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 802a002:	68fb      	ldr	r3, [r7, #12]
 802a004:	2222      	movs	r2, #34	; 0x22
 802a006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802a00a:	68fb      	ldr	r3, [r7, #12]
 802a00c:	2200      	movs	r2, #0
 802a00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 802a012:	68fb      	ldr	r3, [r7, #12]
 802a014:	691b      	ldr	r3, [r3, #16]
 802a016:	2b00      	cmp	r3, #0
 802a018:	d007      	beq.n	802a02a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 802a01a:	68fb      	ldr	r3, [r7, #12]
 802a01c:	681b      	ldr	r3, [r3, #0]
 802a01e:	68da      	ldr	r2, [r3, #12]
 802a020:	68fb      	ldr	r3, [r7, #12]
 802a022:	681b      	ldr	r3, [r3, #0]
 802a024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802a028:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 802a02a:	68fb      	ldr	r3, [r7, #12]
 802a02c:	681b      	ldr	r3, [r3, #0]
 802a02e:	695a      	ldr	r2, [r3, #20]
 802a030:	68fb      	ldr	r3, [r7, #12]
 802a032:	681b      	ldr	r3, [r3, #0]
 802a034:	f042 0201 	orr.w	r2, r2, #1
 802a038:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 802a03a:	68fb      	ldr	r3, [r7, #12]
 802a03c:	681b      	ldr	r3, [r3, #0]
 802a03e:	68da      	ldr	r2, [r3, #12]
 802a040:	68fb      	ldr	r3, [r7, #12]
 802a042:	681b      	ldr	r3, [r3, #0]
 802a044:	f042 0220 	orr.w	r2, r2, #32
 802a048:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802a04a:	2300      	movs	r3, #0
}
 802a04c:	4618      	mov	r0, r3
 802a04e:	3714      	adds	r7, #20
 802a050:	46bd      	mov	sp, r7
 802a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a056:	4770      	bx	lr

0802a058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802a058:	b480      	push	{r7}
 802a05a:	b095      	sub	sp, #84	; 0x54
 802a05c:	af00      	add	r7, sp, #0
 802a05e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802a060:	687b      	ldr	r3, [r7, #4]
 802a062:	681b      	ldr	r3, [r3, #0]
 802a064:	330c      	adds	r3, #12
 802a066:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a06a:	e853 3f00 	ldrex	r3, [r3]
 802a06e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802a070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a072:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802a076:	64fb      	str	r3, [r7, #76]	; 0x4c
 802a078:	687b      	ldr	r3, [r7, #4]
 802a07a:	681b      	ldr	r3, [r3, #0]
 802a07c:	330c      	adds	r3, #12
 802a07e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802a080:	643a      	str	r2, [r7, #64]	; 0x40
 802a082:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a084:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802a086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802a088:	e841 2300 	strex	r3, r2, [r1]
 802a08c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802a08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a090:	2b00      	cmp	r3, #0
 802a092:	d1e5      	bne.n	802a060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802a094:	687b      	ldr	r3, [r7, #4]
 802a096:	681b      	ldr	r3, [r3, #0]
 802a098:	3314      	adds	r3, #20
 802a09a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a09c:	6a3b      	ldr	r3, [r7, #32]
 802a09e:	e853 3f00 	ldrex	r3, [r3]
 802a0a2:	61fb      	str	r3, [r7, #28]
   return(result);
 802a0a4:	69fb      	ldr	r3, [r7, #28]
 802a0a6:	f023 0301 	bic.w	r3, r3, #1
 802a0aa:	64bb      	str	r3, [r7, #72]	; 0x48
 802a0ac:	687b      	ldr	r3, [r7, #4]
 802a0ae:	681b      	ldr	r3, [r3, #0]
 802a0b0:	3314      	adds	r3, #20
 802a0b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802a0b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 802a0b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a0b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802a0ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802a0bc:	e841 2300 	strex	r3, r2, [r1]
 802a0c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802a0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0c4:	2b00      	cmp	r3, #0
 802a0c6:	d1e5      	bne.n	802a094 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802a0c8:	687b      	ldr	r3, [r7, #4]
 802a0ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a0cc:	2b01      	cmp	r3, #1
 802a0ce:	d119      	bne.n	802a104 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802a0d0:	687b      	ldr	r3, [r7, #4]
 802a0d2:	681b      	ldr	r3, [r3, #0]
 802a0d4:	330c      	adds	r3, #12
 802a0d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a0d8:	68fb      	ldr	r3, [r7, #12]
 802a0da:	e853 3f00 	ldrex	r3, [r3]
 802a0de:	60bb      	str	r3, [r7, #8]
   return(result);
 802a0e0:	68bb      	ldr	r3, [r7, #8]
 802a0e2:	f023 0310 	bic.w	r3, r3, #16
 802a0e6:	647b      	str	r3, [r7, #68]	; 0x44
 802a0e8:	687b      	ldr	r3, [r7, #4]
 802a0ea:	681b      	ldr	r3, [r3, #0]
 802a0ec:	330c      	adds	r3, #12
 802a0ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802a0f0:	61ba      	str	r2, [r7, #24]
 802a0f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a0f4:	6979      	ldr	r1, [r7, #20]
 802a0f6:	69ba      	ldr	r2, [r7, #24]
 802a0f8:	e841 2300 	strex	r3, r2, [r1]
 802a0fc:	613b      	str	r3, [r7, #16]
   return(result);
 802a0fe:	693b      	ldr	r3, [r7, #16]
 802a100:	2b00      	cmp	r3, #0
 802a102:	d1e5      	bne.n	802a0d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802a104:	687b      	ldr	r3, [r7, #4]
 802a106:	2220      	movs	r2, #32
 802a108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802a10c:	687b      	ldr	r3, [r7, #4]
 802a10e:	2200      	movs	r2, #0
 802a110:	631a      	str	r2, [r3, #48]	; 0x30
}
 802a112:	bf00      	nop
 802a114:	3754      	adds	r7, #84	; 0x54
 802a116:	46bd      	mov	sp, r7
 802a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a11c:	4770      	bx	lr

0802a11e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802a11e:	b580      	push	{r7, lr}
 802a120:	b084      	sub	sp, #16
 802a122:	af00      	add	r7, sp, #0
 802a124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802a126:	687b      	ldr	r3, [r7, #4]
 802a128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a12a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802a12c:	68fb      	ldr	r3, [r7, #12]
 802a12e:	2200      	movs	r2, #0
 802a130:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802a132:	68fb      	ldr	r3, [r7, #12]
 802a134:	2200      	movs	r2, #0
 802a136:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802a138:	68f8      	ldr	r0, [r7, #12]
 802a13a:	f7ff fecb 	bl	8029ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802a13e:	bf00      	nop
 802a140:	3710      	adds	r7, #16
 802a142:	46bd      	mov	sp, r7
 802a144:	bd80      	pop	{r7, pc}

0802a146 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802a146:	b480      	push	{r7}
 802a148:	b085      	sub	sp, #20
 802a14a:	af00      	add	r7, sp, #0
 802a14c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802a14e:	687b      	ldr	r3, [r7, #4]
 802a150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802a154:	b2db      	uxtb	r3, r3
 802a156:	2b21      	cmp	r3, #33	; 0x21
 802a158:	d13e      	bne.n	802a1d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802a15a:	687b      	ldr	r3, [r7, #4]
 802a15c:	689b      	ldr	r3, [r3, #8]
 802a15e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a162:	d114      	bne.n	802a18e <UART_Transmit_IT+0x48>
 802a164:	687b      	ldr	r3, [r7, #4]
 802a166:	691b      	ldr	r3, [r3, #16]
 802a168:	2b00      	cmp	r3, #0
 802a16a:	d110      	bne.n	802a18e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802a16c:	687b      	ldr	r3, [r7, #4]
 802a16e:	6a1b      	ldr	r3, [r3, #32]
 802a170:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802a172:	68fb      	ldr	r3, [r7, #12]
 802a174:	881b      	ldrh	r3, [r3, #0]
 802a176:	461a      	mov	r2, r3
 802a178:	687b      	ldr	r3, [r7, #4]
 802a17a:	681b      	ldr	r3, [r3, #0]
 802a17c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802a180:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 802a182:	687b      	ldr	r3, [r7, #4]
 802a184:	6a1b      	ldr	r3, [r3, #32]
 802a186:	1c9a      	adds	r2, r3, #2
 802a188:	687b      	ldr	r3, [r7, #4]
 802a18a:	621a      	str	r2, [r3, #32]
 802a18c:	e008      	b.n	802a1a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802a18e:	687b      	ldr	r3, [r7, #4]
 802a190:	6a1b      	ldr	r3, [r3, #32]
 802a192:	1c59      	adds	r1, r3, #1
 802a194:	687a      	ldr	r2, [r7, #4]
 802a196:	6211      	str	r1, [r2, #32]
 802a198:	781a      	ldrb	r2, [r3, #0]
 802a19a:	687b      	ldr	r3, [r7, #4]
 802a19c:	681b      	ldr	r3, [r3, #0]
 802a19e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802a1a0:	687b      	ldr	r3, [r7, #4]
 802a1a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802a1a4:	b29b      	uxth	r3, r3
 802a1a6:	3b01      	subs	r3, #1
 802a1a8:	b29b      	uxth	r3, r3
 802a1aa:	687a      	ldr	r2, [r7, #4]
 802a1ac:	4619      	mov	r1, r3
 802a1ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 802a1b0:	2b00      	cmp	r3, #0
 802a1b2:	d10f      	bne.n	802a1d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802a1b4:	687b      	ldr	r3, [r7, #4]
 802a1b6:	681b      	ldr	r3, [r3, #0]
 802a1b8:	68da      	ldr	r2, [r3, #12]
 802a1ba:	687b      	ldr	r3, [r7, #4]
 802a1bc:	681b      	ldr	r3, [r3, #0]
 802a1be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802a1c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802a1c4:	687b      	ldr	r3, [r7, #4]
 802a1c6:	681b      	ldr	r3, [r3, #0]
 802a1c8:	68da      	ldr	r2, [r3, #12]
 802a1ca:	687b      	ldr	r3, [r7, #4]
 802a1cc:	681b      	ldr	r3, [r3, #0]
 802a1ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802a1d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802a1d4:	2300      	movs	r3, #0
 802a1d6:	e000      	b.n	802a1da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 802a1d8:	2302      	movs	r3, #2
  }
}
 802a1da:	4618      	mov	r0, r3
 802a1dc:	3714      	adds	r7, #20
 802a1de:	46bd      	mov	sp, r7
 802a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1e4:	4770      	bx	lr

0802a1e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802a1e6:	b580      	push	{r7, lr}
 802a1e8:	b082      	sub	sp, #8
 802a1ea:	af00      	add	r7, sp, #0
 802a1ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802a1ee:	687b      	ldr	r3, [r7, #4]
 802a1f0:	681b      	ldr	r3, [r3, #0]
 802a1f2:	68da      	ldr	r2, [r3, #12]
 802a1f4:	687b      	ldr	r3, [r7, #4]
 802a1f6:	681b      	ldr	r3, [r3, #0]
 802a1f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802a1fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802a1fe:	687b      	ldr	r3, [r7, #4]
 802a200:	2220      	movs	r2, #32
 802a202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802a206:	6878      	ldr	r0, [r7, #4]
 802a208:	f7ff fe5a 	bl	8029ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802a20c:	2300      	movs	r3, #0
}
 802a20e:	4618      	mov	r0, r3
 802a210:	3708      	adds	r7, #8
 802a212:	46bd      	mov	sp, r7
 802a214:	bd80      	pop	{r7, pc}

0802a216 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802a216:	b580      	push	{r7, lr}
 802a218:	b08c      	sub	sp, #48	; 0x30
 802a21a:	af00      	add	r7, sp, #0
 802a21c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802a21e:	687b      	ldr	r3, [r7, #4]
 802a220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802a224:	b2db      	uxtb	r3, r3
 802a226:	2b22      	cmp	r3, #34	; 0x22
 802a228:	f040 80ab 	bne.w	802a382 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802a22c:	687b      	ldr	r3, [r7, #4]
 802a22e:	689b      	ldr	r3, [r3, #8]
 802a230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a234:	d117      	bne.n	802a266 <UART_Receive_IT+0x50>
 802a236:	687b      	ldr	r3, [r7, #4]
 802a238:	691b      	ldr	r3, [r3, #16]
 802a23a:	2b00      	cmp	r3, #0
 802a23c:	d113      	bne.n	802a266 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 802a23e:	2300      	movs	r3, #0
 802a240:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802a242:	687b      	ldr	r3, [r7, #4]
 802a244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a246:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802a248:	687b      	ldr	r3, [r7, #4]
 802a24a:	681b      	ldr	r3, [r3, #0]
 802a24c:	685b      	ldr	r3, [r3, #4]
 802a24e:	b29b      	uxth	r3, r3
 802a250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802a254:	b29a      	uxth	r2, r3
 802a256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a258:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802a25a:	687b      	ldr	r3, [r7, #4]
 802a25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a25e:	1c9a      	adds	r2, r3, #2
 802a260:	687b      	ldr	r3, [r7, #4]
 802a262:	629a      	str	r2, [r3, #40]	; 0x28
 802a264:	e026      	b.n	802a2b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802a266:	687b      	ldr	r3, [r7, #4]
 802a268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a26a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 802a26c:	2300      	movs	r3, #0
 802a26e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802a270:	687b      	ldr	r3, [r7, #4]
 802a272:	689b      	ldr	r3, [r3, #8]
 802a274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a278:	d007      	beq.n	802a28a <UART_Receive_IT+0x74>
 802a27a:	687b      	ldr	r3, [r7, #4]
 802a27c:	689b      	ldr	r3, [r3, #8]
 802a27e:	2b00      	cmp	r3, #0
 802a280:	d10a      	bne.n	802a298 <UART_Receive_IT+0x82>
 802a282:	687b      	ldr	r3, [r7, #4]
 802a284:	691b      	ldr	r3, [r3, #16]
 802a286:	2b00      	cmp	r3, #0
 802a288:	d106      	bne.n	802a298 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802a28a:	687b      	ldr	r3, [r7, #4]
 802a28c:	681b      	ldr	r3, [r3, #0]
 802a28e:	685b      	ldr	r3, [r3, #4]
 802a290:	b2da      	uxtb	r2, r3
 802a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a294:	701a      	strb	r2, [r3, #0]
 802a296:	e008      	b.n	802a2aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802a298:	687b      	ldr	r3, [r7, #4]
 802a29a:	681b      	ldr	r3, [r3, #0]
 802a29c:	685b      	ldr	r3, [r3, #4]
 802a29e:	b2db      	uxtb	r3, r3
 802a2a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802a2a4:	b2da      	uxtb	r2, r3
 802a2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a2a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 802a2aa:	687b      	ldr	r3, [r7, #4]
 802a2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a2ae:	1c5a      	adds	r2, r3, #1
 802a2b0:	687b      	ldr	r3, [r7, #4]
 802a2b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 802a2b4:	687b      	ldr	r3, [r7, #4]
 802a2b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802a2b8:	b29b      	uxth	r3, r3
 802a2ba:	3b01      	subs	r3, #1
 802a2bc:	b29b      	uxth	r3, r3
 802a2be:	687a      	ldr	r2, [r7, #4]
 802a2c0:	4619      	mov	r1, r3
 802a2c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 802a2c4:	2b00      	cmp	r3, #0
 802a2c6:	d15a      	bne.n	802a37e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802a2c8:	687b      	ldr	r3, [r7, #4]
 802a2ca:	681b      	ldr	r3, [r3, #0]
 802a2cc:	68da      	ldr	r2, [r3, #12]
 802a2ce:	687b      	ldr	r3, [r7, #4]
 802a2d0:	681b      	ldr	r3, [r3, #0]
 802a2d2:	f022 0220 	bic.w	r2, r2, #32
 802a2d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802a2d8:	687b      	ldr	r3, [r7, #4]
 802a2da:	681b      	ldr	r3, [r3, #0]
 802a2dc:	68da      	ldr	r2, [r3, #12]
 802a2de:	687b      	ldr	r3, [r7, #4]
 802a2e0:	681b      	ldr	r3, [r3, #0]
 802a2e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802a2e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802a2e8:	687b      	ldr	r3, [r7, #4]
 802a2ea:	681b      	ldr	r3, [r3, #0]
 802a2ec:	695a      	ldr	r2, [r3, #20]
 802a2ee:	687b      	ldr	r3, [r7, #4]
 802a2f0:	681b      	ldr	r3, [r3, #0]
 802a2f2:	f022 0201 	bic.w	r2, r2, #1
 802a2f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802a2f8:	687b      	ldr	r3, [r7, #4]
 802a2fa:	2220      	movs	r2, #32
 802a2fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802a300:	687b      	ldr	r3, [r7, #4]
 802a302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a304:	2b01      	cmp	r3, #1
 802a306:	d135      	bne.n	802a374 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802a308:	687b      	ldr	r3, [r7, #4]
 802a30a:	2200      	movs	r2, #0
 802a30c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802a30e:	687b      	ldr	r3, [r7, #4]
 802a310:	681b      	ldr	r3, [r3, #0]
 802a312:	330c      	adds	r3, #12
 802a314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a316:	697b      	ldr	r3, [r7, #20]
 802a318:	e853 3f00 	ldrex	r3, [r3]
 802a31c:	613b      	str	r3, [r7, #16]
   return(result);
 802a31e:	693b      	ldr	r3, [r7, #16]
 802a320:	f023 0310 	bic.w	r3, r3, #16
 802a324:	627b      	str	r3, [r7, #36]	; 0x24
 802a326:	687b      	ldr	r3, [r7, #4]
 802a328:	681b      	ldr	r3, [r3, #0]
 802a32a:	330c      	adds	r3, #12
 802a32c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a32e:	623a      	str	r2, [r7, #32]
 802a330:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a332:	69f9      	ldr	r1, [r7, #28]
 802a334:	6a3a      	ldr	r2, [r7, #32]
 802a336:	e841 2300 	strex	r3, r2, [r1]
 802a33a:	61bb      	str	r3, [r7, #24]
   return(result);
 802a33c:	69bb      	ldr	r3, [r7, #24]
 802a33e:	2b00      	cmp	r3, #0
 802a340:	d1e5      	bne.n	802a30e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 802a342:	687b      	ldr	r3, [r7, #4]
 802a344:	681b      	ldr	r3, [r3, #0]
 802a346:	681b      	ldr	r3, [r3, #0]
 802a348:	f003 0310 	and.w	r3, r3, #16
 802a34c:	2b10      	cmp	r3, #16
 802a34e:	d10a      	bne.n	802a366 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 802a350:	2300      	movs	r3, #0
 802a352:	60fb      	str	r3, [r7, #12]
 802a354:	687b      	ldr	r3, [r7, #4]
 802a356:	681b      	ldr	r3, [r3, #0]
 802a358:	681b      	ldr	r3, [r3, #0]
 802a35a:	60fb      	str	r3, [r7, #12]
 802a35c:	687b      	ldr	r3, [r7, #4]
 802a35e:	681b      	ldr	r3, [r3, #0]
 802a360:	685b      	ldr	r3, [r3, #4]
 802a362:	60fb      	str	r3, [r7, #12]
 802a364:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802a366:	687b      	ldr	r3, [r7, #4]
 802a368:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802a36a:	4619      	mov	r1, r3
 802a36c:	6878      	ldr	r0, [r7, #4]
 802a36e:	f7ff fdbb 	bl	8029ee8 <HAL_UARTEx_RxEventCallback>
 802a372:	e002      	b.n	802a37a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 802a374:	6878      	ldr	r0, [r7, #4]
 802a376:	f7f6 fe41 	bl	8020ffc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 802a37a:	2300      	movs	r3, #0
 802a37c:	e002      	b.n	802a384 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 802a37e:	2300      	movs	r3, #0
 802a380:	e000      	b.n	802a384 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 802a382:	2302      	movs	r3, #2
  }
}
 802a384:	4618      	mov	r0, r3
 802a386:	3730      	adds	r7, #48	; 0x30
 802a388:	46bd      	mov	sp, r7
 802a38a:	bd80      	pop	{r7, pc}

0802a38c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802a38c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802a390:	b0c0      	sub	sp, #256	; 0x100
 802a392:	af00      	add	r7, sp, #0
 802a394:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802a398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a39c:	681b      	ldr	r3, [r3, #0]
 802a39e:	691b      	ldr	r3, [r3, #16]
 802a3a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 802a3a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3a8:	68d9      	ldr	r1, [r3, #12]
 802a3aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3ae:	681a      	ldr	r2, [r3, #0]
 802a3b0:	ea40 0301 	orr.w	r3, r0, r1
 802a3b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802a3b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3ba:	689a      	ldr	r2, [r3, #8]
 802a3bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3c0:	691b      	ldr	r3, [r3, #16]
 802a3c2:	431a      	orrs	r2, r3
 802a3c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3c8:	695b      	ldr	r3, [r3, #20]
 802a3ca:	431a      	orrs	r2, r3
 802a3cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3d0:	69db      	ldr	r3, [r3, #28]
 802a3d2:	4313      	orrs	r3, r2
 802a3d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 802a3d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3dc:	681b      	ldr	r3, [r3, #0]
 802a3de:	68db      	ldr	r3, [r3, #12]
 802a3e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 802a3e4:	f021 010c 	bic.w	r1, r1, #12
 802a3e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3ec:	681a      	ldr	r2, [r3, #0]
 802a3ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802a3f2:	430b      	orrs	r3, r1
 802a3f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802a3f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3fa:	681b      	ldr	r3, [r3, #0]
 802a3fc:	695b      	ldr	r3, [r3, #20]
 802a3fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 802a402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a406:	6999      	ldr	r1, [r3, #24]
 802a408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a40c:	681a      	ldr	r2, [r3, #0]
 802a40e:	ea40 0301 	orr.w	r3, r0, r1
 802a412:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802a414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a418:	681a      	ldr	r2, [r3, #0]
 802a41a:	4b8f      	ldr	r3, [pc, #572]	; (802a658 <UART_SetConfig+0x2cc>)
 802a41c:	429a      	cmp	r2, r3
 802a41e:	d005      	beq.n	802a42c <UART_SetConfig+0xa0>
 802a420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a424:	681a      	ldr	r2, [r3, #0]
 802a426:	4b8d      	ldr	r3, [pc, #564]	; (802a65c <UART_SetConfig+0x2d0>)
 802a428:	429a      	cmp	r2, r3
 802a42a:	d104      	bne.n	802a436 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802a42c:	f7fd fcb2 	bl	8027d94 <HAL_RCC_GetPCLK2Freq>
 802a430:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 802a434:	e003      	b.n	802a43e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802a436:	f7fd fc99 	bl	8027d6c <HAL_RCC_GetPCLK1Freq>
 802a43a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802a43e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a442:	69db      	ldr	r3, [r3, #28]
 802a444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802a448:	f040 810c 	bne.w	802a664 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802a44c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a450:	2200      	movs	r2, #0
 802a452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 802a456:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 802a45a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 802a45e:	4622      	mov	r2, r4
 802a460:	462b      	mov	r3, r5
 802a462:	1891      	adds	r1, r2, r2
 802a464:	65b9      	str	r1, [r7, #88]	; 0x58
 802a466:	415b      	adcs	r3, r3
 802a468:	65fb      	str	r3, [r7, #92]	; 0x5c
 802a46a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 802a46e:	4621      	mov	r1, r4
 802a470:	eb12 0801 	adds.w	r8, r2, r1
 802a474:	4629      	mov	r1, r5
 802a476:	eb43 0901 	adc.w	r9, r3, r1
 802a47a:	f04f 0200 	mov.w	r2, #0
 802a47e:	f04f 0300 	mov.w	r3, #0
 802a482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802a486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802a48a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802a48e:	4690      	mov	r8, r2
 802a490:	4699      	mov	r9, r3
 802a492:	4623      	mov	r3, r4
 802a494:	eb18 0303 	adds.w	r3, r8, r3
 802a498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 802a49c:	462b      	mov	r3, r5
 802a49e:	eb49 0303 	adc.w	r3, r9, r3
 802a4a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802a4a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a4aa:	685b      	ldr	r3, [r3, #4]
 802a4ac:	2200      	movs	r2, #0
 802a4ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802a4b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 802a4b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 802a4ba:	460b      	mov	r3, r1
 802a4bc:	18db      	adds	r3, r3, r3
 802a4be:	653b      	str	r3, [r7, #80]	; 0x50
 802a4c0:	4613      	mov	r3, r2
 802a4c2:	eb42 0303 	adc.w	r3, r2, r3
 802a4c6:	657b      	str	r3, [r7, #84]	; 0x54
 802a4c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 802a4cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 802a4d0:	f7f5 fede 	bl	8020290 <__aeabi_uldivmod>
 802a4d4:	4602      	mov	r2, r0
 802a4d6:	460b      	mov	r3, r1
 802a4d8:	4b61      	ldr	r3, [pc, #388]	; (802a660 <UART_SetConfig+0x2d4>)
 802a4da:	fba3 2302 	umull	r2, r3, r3, r2
 802a4de:	095b      	lsrs	r3, r3, #5
 802a4e0:	011c      	lsls	r4, r3, #4
 802a4e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a4e6:	2200      	movs	r2, #0
 802a4e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802a4ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 802a4f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 802a4f4:	4642      	mov	r2, r8
 802a4f6:	464b      	mov	r3, r9
 802a4f8:	1891      	adds	r1, r2, r2
 802a4fa:	64b9      	str	r1, [r7, #72]	; 0x48
 802a4fc:	415b      	adcs	r3, r3
 802a4fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 802a500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802a504:	4641      	mov	r1, r8
 802a506:	eb12 0a01 	adds.w	sl, r2, r1
 802a50a:	4649      	mov	r1, r9
 802a50c:	eb43 0b01 	adc.w	fp, r3, r1
 802a510:	f04f 0200 	mov.w	r2, #0
 802a514:	f04f 0300 	mov.w	r3, #0
 802a518:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802a51c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 802a520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802a524:	4692      	mov	sl, r2
 802a526:	469b      	mov	fp, r3
 802a528:	4643      	mov	r3, r8
 802a52a:	eb1a 0303 	adds.w	r3, sl, r3
 802a52e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802a532:	464b      	mov	r3, r9
 802a534:	eb4b 0303 	adc.w	r3, fp, r3
 802a538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802a53c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a540:	685b      	ldr	r3, [r3, #4]
 802a542:	2200      	movs	r2, #0
 802a544:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802a548:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 802a54c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 802a550:	460b      	mov	r3, r1
 802a552:	18db      	adds	r3, r3, r3
 802a554:	643b      	str	r3, [r7, #64]	; 0x40
 802a556:	4613      	mov	r3, r2
 802a558:	eb42 0303 	adc.w	r3, r2, r3
 802a55c:	647b      	str	r3, [r7, #68]	; 0x44
 802a55e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802a562:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 802a566:	f7f5 fe93 	bl	8020290 <__aeabi_uldivmod>
 802a56a:	4602      	mov	r2, r0
 802a56c:	460b      	mov	r3, r1
 802a56e:	4611      	mov	r1, r2
 802a570:	4b3b      	ldr	r3, [pc, #236]	; (802a660 <UART_SetConfig+0x2d4>)
 802a572:	fba3 2301 	umull	r2, r3, r3, r1
 802a576:	095b      	lsrs	r3, r3, #5
 802a578:	2264      	movs	r2, #100	; 0x64
 802a57a:	fb02 f303 	mul.w	r3, r2, r3
 802a57e:	1acb      	subs	r3, r1, r3
 802a580:	00db      	lsls	r3, r3, #3
 802a582:	f103 0232 	add.w	r2, r3, #50	; 0x32
 802a586:	4b36      	ldr	r3, [pc, #216]	; (802a660 <UART_SetConfig+0x2d4>)
 802a588:	fba3 2302 	umull	r2, r3, r3, r2
 802a58c:	095b      	lsrs	r3, r3, #5
 802a58e:	005b      	lsls	r3, r3, #1
 802a590:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802a594:	441c      	add	r4, r3
 802a596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a59a:	2200      	movs	r2, #0
 802a59c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802a5a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 802a5a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 802a5a8:	4642      	mov	r2, r8
 802a5aa:	464b      	mov	r3, r9
 802a5ac:	1891      	adds	r1, r2, r2
 802a5ae:	63b9      	str	r1, [r7, #56]	; 0x38
 802a5b0:	415b      	adcs	r3, r3
 802a5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 802a5b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 802a5b8:	4641      	mov	r1, r8
 802a5ba:	1851      	adds	r1, r2, r1
 802a5bc:	6339      	str	r1, [r7, #48]	; 0x30
 802a5be:	4649      	mov	r1, r9
 802a5c0:	414b      	adcs	r3, r1
 802a5c2:	637b      	str	r3, [r7, #52]	; 0x34
 802a5c4:	f04f 0200 	mov.w	r2, #0
 802a5c8:	f04f 0300 	mov.w	r3, #0
 802a5cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 802a5d0:	4659      	mov	r1, fp
 802a5d2:	00cb      	lsls	r3, r1, #3
 802a5d4:	4651      	mov	r1, sl
 802a5d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802a5da:	4651      	mov	r1, sl
 802a5dc:	00ca      	lsls	r2, r1, #3
 802a5de:	4610      	mov	r0, r2
 802a5e0:	4619      	mov	r1, r3
 802a5e2:	4603      	mov	r3, r0
 802a5e4:	4642      	mov	r2, r8
 802a5e6:	189b      	adds	r3, r3, r2
 802a5e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802a5ec:	464b      	mov	r3, r9
 802a5ee:	460a      	mov	r2, r1
 802a5f0:	eb42 0303 	adc.w	r3, r2, r3
 802a5f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802a5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a5fc:	685b      	ldr	r3, [r3, #4]
 802a5fe:	2200      	movs	r2, #0
 802a600:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 802a604:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 802a608:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 802a60c:	460b      	mov	r3, r1
 802a60e:	18db      	adds	r3, r3, r3
 802a610:	62bb      	str	r3, [r7, #40]	; 0x28
 802a612:	4613      	mov	r3, r2
 802a614:	eb42 0303 	adc.w	r3, r2, r3
 802a618:	62fb      	str	r3, [r7, #44]	; 0x2c
 802a61a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802a61e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 802a622:	f7f5 fe35 	bl	8020290 <__aeabi_uldivmod>
 802a626:	4602      	mov	r2, r0
 802a628:	460b      	mov	r3, r1
 802a62a:	4b0d      	ldr	r3, [pc, #52]	; (802a660 <UART_SetConfig+0x2d4>)
 802a62c:	fba3 1302 	umull	r1, r3, r3, r2
 802a630:	095b      	lsrs	r3, r3, #5
 802a632:	2164      	movs	r1, #100	; 0x64
 802a634:	fb01 f303 	mul.w	r3, r1, r3
 802a638:	1ad3      	subs	r3, r2, r3
 802a63a:	00db      	lsls	r3, r3, #3
 802a63c:	3332      	adds	r3, #50	; 0x32
 802a63e:	4a08      	ldr	r2, [pc, #32]	; (802a660 <UART_SetConfig+0x2d4>)
 802a640:	fba2 2303 	umull	r2, r3, r2, r3
 802a644:	095b      	lsrs	r3, r3, #5
 802a646:	f003 0207 	and.w	r2, r3, #7
 802a64a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a64e:	681b      	ldr	r3, [r3, #0]
 802a650:	4422      	add	r2, r4
 802a652:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 802a654:	e105      	b.n	802a862 <UART_SetConfig+0x4d6>
 802a656:	bf00      	nop
 802a658:	40011000 	.word	0x40011000
 802a65c:	40011400 	.word	0x40011400
 802a660:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802a664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a668:	2200      	movs	r2, #0
 802a66a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802a66e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 802a672:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 802a676:	4642      	mov	r2, r8
 802a678:	464b      	mov	r3, r9
 802a67a:	1891      	adds	r1, r2, r2
 802a67c:	6239      	str	r1, [r7, #32]
 802a67e:	415b      	adcs	r3, r3
 802a680:	627b      	str	r3, [r7, #36]	; 0x24
 802a682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802a686:	4641      	mov	r1, r8
 802a688:	1854      	adds	r4, r2, r1
 802a68a:	4649      	mov	r1, r9
 802a68c:	eb43 0501 	adc.w	r5, r3, r1
 802a690:	f04f 0200 	mov.w	r2, #0
 802a694:	f04f 0300 	mov.w	r3, #0
 802a698:	00eb      	lsls	r3, r5, #3
 802a69a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802a69e:	00e2      	lsls	r2, r4, #3
 802a6a0:	4614      	mov	r4, r2
 802a6a2:	461d      	mov	r5, r3
 802a6a4:	4643      	mov	r3, r8
 802a6a6:	18e3      	adds	r3, r4, r3
 802a6a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802a6ac:	464b      	mov	r3, r9
 802a6ae:	eb45 0303 	adc.w	r3, r5, r3
 802a6b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802a6b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a6ba:	685b      	ldr	r3, [r3, #4]
 802a6bc:	2200      	movs	r2, #0
 802a6be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802a6c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802a6c6:	f04f 0200 	mov.w	r2, #0
 802a6ca:	f04f 0300 	mov.w	r3, #0
 802a6ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 802a6d2:	4629      	mov	r1, r5
 802a6d4:	008b      	lsls	r3, r1, #2
 802a6d6:	4621      	mov	r1, r4
 802a6d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802a6dc:	4621      	mov	r1, r4
 802a6de:	008a      	lsls	r2, r1, #2
 802a6e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 802a6e4:	f7f5 fdd4 	bl	8020290 <__aeabi_uldivmod>
 802a6e8:	4602      	mov	r2, r0
 802a6ea:	460b      	mov	r3, r1
 802a6ec:	4b60      	ldr	r3, [pc, #384]	; (802a870 <UART_SetConfig+0x4e4>)
 802a6ee:	fba3 2302 	umull	r2, r3, r3, r2
 802a6f2:	095b      	lsrs	r3, r3, #5
 802a6f4:	011c      	lsls	r4, r3, #4
 802a6f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a6fa:	2200      	movs	r2, #0
 802a6fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802a700:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 802a704:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 802a708:	4642      	mov	r2, r8
 802a70a:	464b      	mov	r3, r9
 802a70c:	1891      	adds	r1, r2, r2
 802a70e:	61b9      	str	r1, [r7, #24]
 802a710:	415b      	adcs	r3, r3
 802a712:	61fb      	str	r3, [r7, #28]
 802a714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802a718:	4641      	mov	r1, r8
 802a71a:	1851      	adds	r1, r2, r1
 802a71c:	6139      	str	r1, [r7, #16]
 802a71e:	4649      	mov	r1, r9
 802a720:	414b      	adcs	r3, r1
 802a722:	617b      	str	r3, [r7, #20]
 802a724:	f04f 0200 	mov.w	r2, #0
 802a728:	f04f 0300 	mov.w	r3, #0
 802a72c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802a730:	4659      	mov	r1, fp
 802a732:	00cb      	lsls	r3, r1, #3
 802a734:	4651      	mov	r1, sl
 802a736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802a73a:	4651      	mov	r1, sl
 802a73c:	00ca      	lsls	r2, r1, #3
 802a73e:	4610      	mov	r0, r2
 802a740:	4619      	mov	r1, r3
 802a742:	4603      	mov	r3, r0
 802a744:	4642      	mov	r2, r8
 802a746:	189b      	adds	r3, r3, r2
 802a748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802a74c:	464b      	mov	r3, r9
 802a74e:	460a      	mov	r2, r1
 802a750:	eb42 0303 	adc.w	r3, r2, r3
 802a754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802a758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a75c:	685b      	ldr	r3, [r3, #4]
 802a75e:	2200      	movs	r2, #0
 802a760:	67bb      	str	r3, [r7, #120]	; 0x78
 802a762:	67fa      	str	r2, [r7, #124]	; 0x7c
 802a764:	f04f 0200 	mov.w	r2, #0
 802a768:	f04f 0300 	mov.w	r3, #0
 802a76c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 802a770:	4649      	mov	r1, r9
 802a772:	008b      	lsls	r3, r1, #2
 802a774:	4641      	mov	r1, r8
 802a776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802a77a:	4641      	mov	r1, r8
 802a77c:	008a      	lsls	r2, r1, #2
 802a77e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 802a782:	f7f5 fd85 	bl	8020290 <__aeabi_uldivmod>
 802a786:	4602      	mov	r2, r0
 802a788:	460b      	mov	r3, r1
 802a78a:	4b39      	ldr	r3, [pc, #228]	; (802a870 <UART_SetConfig+0x4e4>)
 802a78c:	fba3 1302 	umull	r1, r3, r3, r2
 802a790:	095b      	lsrs	r3, r3, #5
 802a792:	2164      	movs	r1, #100	; 0x64
 802a794:	fb01 f303 	mul.w	r3, r1, r3
 802a798:	1ad3      	subs	r3, r2, r3
 802a79a:	011b      	lsls	r3, r3, #4
 802a79c:	3332      	adds	r3, #50	; 0x32
 802a79e:	4a34      	ldr	r2, [pc, #208]	; (802a870 <UART_SetConfig+0x4e4>)
 802a7a0:	fba2 2303 	umull	r2, r3, r2, r3
 802a7a4:	095b      	lsrs	r3, r3, #5
 802a7a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802a7aa:	441c      	add	r4, r3
 802a7ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a7b0:	2200      	movs	r2, #0
 802a7b2:	673b      	str	r3, [r7, #112]	; 0x70
 802a7b4:	677a      	str	r2, [r7, #116]	; 0x74
 802a7b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 802a7ba:	4642      	mov	r2, r8
 802a7bc:	464b      	mov	r3, r9
 802a7be:	1891      	adds	r1, r2, r2
 802a7c0:	60b9      	str	r1, [r7, #8]
 802a7c2:	415b      	adcs	r3, r3
 802a7c4:	60fb      	str	r3, [r7, #12]
 802a7c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802a7ca:	4641      	mov	r1, r8
 802a7cc:	1851      	adds	r1, r2, r1
 802a7ce:	6039      	str	r1, [r7, #0]
 802a7d0:	4649      	mov	r1, r9
 802a7d2:	414b      	adcs	r3, r1
 802a7d4:	607b      	str	r3, [r7, #4]
 802a7d6:	f04f 0200 	mov.w	r2, #0
 802a7da:	f04f 0300 	mov.w	r3, #0
 802a7de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802a7e2:	4659      	mov	r1, fp
 802a7e4:	00cb      	lsls	r3, r1, #3
 802a7e6:	4651      	mov	r1, sl
 802a7e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802a7ec:	4651      	mov	r1, sl
 802a7ee:	00ca      	lsls	r2, r1, #3
 802a7f0:	4610      	mov	r0, r2
 802a7f2:	4619      	mov	r1, r3
 802a7f4:	4603      	mov	r3, r0
 802a7f6:	4642      	mov	r2, r8
 802a7f8:	189b      	adds	r3, r3, r2
 802a7fa:	66bb      	str	r3, [r7, #104]	; 0x68
 802a7fc:	464b      	mov	r3, r9
 802a7fe:	460a      	mov	r2, r1
 802a800:	eb42 0303 	adc.w	r3, r2, r3
 802a804:	66fb      	str	r3, [r7, #108]	; 0x6c
 802a806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a80a:	685b      	ldr	r3, [r3, #4]
 802a80c:	2200      	movs	r2, #0
 802a80e:	663b      	str	r3, [r7, #96]	; 0x60
 802a810:	667a      	str	r2, [r7, #100]	; 0x64
 802a812:	f04f 0200 	mov.w	r2, #0
 802a816:	f04f 0300 	mov.w	r3, #0
 802a81a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 802a81e:	4649      	mov	r1, r9
 802a820:	008b      	lsls	r3, r1, #2
 802a822:	4641      	mov	r1, r8
 802a824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802a828:	4641      	mov	r1, r8
 802a82a:	008a      	lsls	r2, r1, #2
 802a82c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 802a830:	f7f5 fd2e 	bl	8020290 <__aeabi_uldivmod>
 802a834:	4602      	mov	r2, r0
 802a836:	460b      	mov	r3, r1
 802a838:	4b0d      	ldr	r3, [pc, #52]	; (802a870 <UART_SetConfig+0x4e4>)
 802a83a:	fba3 1302 	umull	r1, r3, r3, r2
 802a83e:	095b      	lsrs	r3, r3, #5
 802a840:	2164      	movs	r1, #100	; 0x64
 802a842:	fb01 f303 	mul.w	r3, r1, r3
 802a846:	1ad3      	subs	r3, r2, r3
 802a848:	011b      	lsls	r3, r3, #4
 802a84a:	3332      	adds	r3, #50	; 0x32
 802a84c:	4a08      	ldr	r2, [pc, #32]	; (802a870 <UART_SetConfig+0x4e4>)
 802a84e:	fba2 2303 	umull	r2, r3, r2, r3
 802a852:	095b      	lsrs	r3, r3, #5
 802a854:	f003 020f 	and.w	r2, r3, #15
 802a858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a85c:	681b      	ldr	r3, [r3, #0]
 802a85e:	4422      	add	r2, r4
 802a860:	609a      	str	r2, [r3, #8]
}
 802a862:	bf00      	nop
 802a864:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802a868:	46bd      	mov	sp, r7
 802a86a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802a86e:	bf00      	nop
 802a870:	51eb851f 	.word	0x51eb851f

0802a874 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 802a874:	b480      	push	{r7}
 802a876:	b083      	sub	sp, #12
 802a878:	af00      	add	r7, sp, #0
 802a87a:	6078      	str	r0, [r7, #4]
 802a87c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 802a87e:	683b      	ldr	r3, [r7, #0]
 802a880:	681b      	ldr	r3, [r3, #0]
 802a882:	2b00      	cmp	r3, #0
 802a884:	d123      	bne.n	802a8ce <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 802a886:	687b      	ldr	r3, [r7, #4]
 802a888:	681b      	ldr	r3, [r3, #0]
 802a88a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 802a88e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802a892:	683a      	ldr	r2, [r7, #0]
 802a894:	6851      	ldr	r1, [r2, #4]
 802a896:	683a      	ldr	r2, [r7, #0]
 802a898:	6892      	ldr	r2, [r2, #8]
 802a89a:	4311      	orrs	r1, r2
 802a89c:	683a      	ldr	r2, [r7, #0]
 802a89e:	68d2      	ldr	r2, [r2, #12]
 802a8a0:	4311      	orrs	r1, r2
 802a8a2:	683a      	ldr	r2, [r7, #0]
 802a8a4:	6912      	ldr	r2, [r2, #16]
 802a8a6:	4311      	orrs	r1, r2
 802a8a8:	683a      	ldr	r2, [r7, #0]
 802a8aa:	6952      	ldr	r2, [r2, #20]
 802a8ac:	4311      	orrs	r1, r2
 802a8ae:	683a      	ldr	r2, [r7, #0]
 802a8b0:	6992      	ldr	r2, [r2, #24]
 802a8b2:	4311      	orrs	r1, r2
 802a8b4:	683a      	ldr	r2, [r7, #0]
 802a8b6:	69d2      	ldr	r2, [r2, #28]
 802a8b8:	4311      	orrs	r1, r2
 802a8ba:	683a      	ldr	r2, [r7, #0]
 802a8bc:	6a12      	ldr	r2, [r2, #32]
 802a8be:	4311      	orrs	r1, r2
 802a8c0:	683a      	ldr	r2, [r7, #0]
 802a8c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802a8c4:	430a      	orrs	r2, r1
 802a8c6:	431a      	orrs	r2, r3
 802a8c8:	687b      	ldr	r3, [r7, #4]
 802a8ca:	601a      	str	r2, [r3, #0]
 802a8cc:	e028      	b.n	802a920 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 802a8ce:	687b      	ldr	r3, [r7, #4]
 802a8d0:	681b      	ldr	r3, [r3, #0]
 802a8d2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 802a8d6:	683b      	ldr	r3, [r7, #0]
 802a8d8:	69d9      	ldr	r1, [r3, #28]
 802a8da:	683b      	ldr	r3, [r7, #0]
 802a8dc:	6a1b      	ldr	r3, [r3, #32]
 802a8de:	4319      	orrs	r1, r3
 802a8e0:	683b      	ldr	r3, [r7, #0]
 802a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a8e4:	430b      	orrs	r3, r1
 802a8e6:	431a      	orrs	r2, r3
 802a8e8:	687b      	ldr	r3, [r7, #4]
 802a8ea:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 802a8ec:	687b      	ldr	r3, [r7, #4]
 802a8ee:	685b      	ldr	r3, [r3, #4]
 802a8f0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 802a8f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802a8f8:	683a      	ldr	r2, [r7, #0]
 802a8fa:	6851      	ldr	r1, [r2, #4]
 802a8fc:	683a      	ldr	r2, [r7, #0]
 802a8fe:	6892      	ldr	r2, [r2, #8]
 802a900:	4311      	orrs	r1, r2
 802a902:	683a      	ldr	r2, [r7, #0]
 802a904:	68d2      	ldr	r2, [r2, #12]
 802a906:	4311      	orrs	r1, r2
 802a908:	683a      	ldr	r2, [r7, #0]
 802a90a:	6912      	ldr	r2, [r2, #16]
 802a90c:	4311      	orrs	r1, r2
 802a90e:	683a      	ldr	r2, [r7, #0]
 802a910:	6952      	ldr	r2, [r2, #20]
 802a912:	4311      	orrs	r1, r2
 802a914:	683a      	ldr	r2, [r7, #0]
 802a916:	6992      	ldr	r2, [r2, #24]
 802a918:	430a      	orrs	r2, r1
 802a91a:	431a      	orrs	r2, r3
 802a91c:	687b      	ldr	r3, [r7, #4]
 802a91e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 802a920:	2300      	movs	r3, #0
}
 802a922:	4618      	mov	r0, r3
 802a924:	370c      	adds	r7, #12
 802a926:	46bd      	mov	sp, r7
 802a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a92c:	4770      	bx	lr

0802a92e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 802a92e:	b480      	push	{r7}
 802a930:	b085      	sub	sp, #20
 802a932:	af00      	add	r7, sp, #0
 802a934:	60f8      	str	r0, [r7, #12]
 802a936:	60b9      	str	r1, [r7, #8]
 802a938:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 802a93a:	687b      	ldr	r3, [r7, #4]
 802a93c:	2b00      	cmp	r3, #0
 802a93e:	d128      	bne.n	802a992 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 802a940:	68fb      	ldr	r3, [r7, #12]
 802a942:	689b      	ldr	r3, [r3, #8]
 802a944:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 802a948:	68bb      	ldr	r3, [r7, #8]
 802a94a:	681b      	ldr	r3, [r3, #0]
 802a94c:	1e59      	subs	r1, r3, #1
 802a94e:	68bb      	ldr	r3, [r7, #8]
 802a950:	685b      	ldr	r3, [r3, #4]
 802a952:	3b01      	subs	r3, #1
 802a954:	011b      	lsls	r3, r3, #4
 802a956:	4319      	orrs	r1, r3
 802a958:	68bb      	ldr	r3, [r7, #8]
 802a95a:	689b      	ldr	r3, [r3, #8]
 802a95c:	3b01      	subs	r3, #1
 802a95e:	021b      	lsls	r3, r3, #8
 802a960:	4319      	orrs	r1, r3
 802a962:	68bb      	ldr	r3, [r7, #8]
 802a964:	68db      	ldr	r3, [r3, #12]
 802a966:	3b01      	subs	r3, #1
 802a968:	031b      	lsls	r3, r3, #12
 802a96a:	4319      	orrs	r1, r3
 802a96c:	68bb      	ldr	r3, [r7, #8]
 802a96e:	691b      	ldr	r3, [r3, #16]
 802a970:	3b01      	subs	r3, #1
 802a972:	041b      	lsls	r3, r3, #16
 802a974:	4319      	orrs	r1, r3
 802a976:	68bb      	ldr	r3, [r7, #8]
 802a978:	695b      	ldr	r3, [r3, #20]
 802a97a:	3b01      	subs	r3, #1
 802a97c:	051b      	lsls	r3, r3, #20
 802a97e:	4319      	orrs	r1, r3
 802a980:	68bb      	ldr	r3, [r7, #8]
 802a982:	699b      	ldr	r3, [r3, #24]
 802a984:	3b01      	subs	r3, #1
 802a986:	061b      	lsls	r3, r3, #24
 802a988:	430b      	orrs	r3, r1
 802a98a:	431a      	orrs	r2, r3
 802a98c:	68fb      	ldr	r3, [r7, #12]
 802a98e:	609a      	str	r2, [r3, #8]
 802a990:	e02f      	b.n	802a9f2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 802a992:	68fb      	ldr	r3, [r7, #12]
 802a994:	689b      	ldr	r3, [r3, #8]
 802a996:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 802a99a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802a99e:	68ba      	ldr	r2, [r7, #8]
 802a9a0:	68d2      	ldr	r2, [r2, #12]
 802a9a2:	3a01      	subs	r2, #1
 802a9a4:	0311      	lsls	r1, r2, #12
 802a9a6:	68ba      	ldr	r2, [r7, #8]
 802a9a8:	6952      	ldr	r2, [r2, #20]
 802a9aa:	3a01      	subs	r2, #1
 802a9ac:	0512      	lsls	r2, r2, #20
 802a9ae:	430a      	orrs	r2, r1
 802a9b0:	431a      	orrs	r2, r3
 802a9b2:	68fb      	ldr	r3, [r7, #12]
 802a9b4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 802a9b6:	68fb      	ldr	r3, [r7, #12]
 802a9b8:	68db      	ldr	r3, [r3, #12]
 802a9ba:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 802a9be:	68bb      	ldr	r3, [r7, #8]
 802a9c0:	681b      	ldr	r3, [r3, #0]
 802a9c2:	1e59      	subs	r1, r3, #1
 802a9c4:	68bb      	ldr	r3, [r7, #8]
 802a9c6:	685b      	ldr	r3, [r3, #4]
 802a9c8:	3b01      	subs	r3, #1
 802a9ca:	011b      	lsls	r3, r3, #4
 802a9cc:	4319      	orrs	r1, r3
 802a9ce:	68bb      	ldr	r3, [r7, #8]
 802a9d0:	689b      	ldr	r3, [r3, #8]
 802a9d2:	3b01      	subs	r3, #1
 802a9d4:	021b      	lsls	r3, r3, #8
 802a9d6:	4319      	orrs	r1, r3
 802a9d8:	68bb      	ldr	r3, [r7, #8]
 802a9da:	691b      	ldr	r3, [r3, #16]
 802a9dc:	3b01      	subs	r3, #1
 802a9de:	041b      	lsls	r3, r3, #16
 802a9e0:	4319      	orrs	r1, r3
 802a9e2:	68bb      	ldr	r3, [r7, #8]
 802a9e4:	699b      	ldr	r3, [r3, #24]
 802a9e6:	3b01      	subs	r3, #1
 802a9e8:	061b      	lsls	r3, r3, #24
 802a9ea:	430b      	orrs	r3, r1
 802a9ec:	431a      	orrs	r2, r3
 802a9ee:	68fb      	ldr	r3, [r7, #12]
 802a9f0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 802a9f2:	2300      	movs	r3, #0
}
 802a9f4:	4618      	mov	r0, r3
 802a9f6:	3714      	adds	r7, #20
 802a9f8:	46bd      	mov	sp, r7
 802a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a9fe:	4770      	bx	lr

0802aa00 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 802aa00:	b580      	push	{r7, lr}
 802aa02:	b086      	sub	sp, #24
 802aa04:	af00      	add	r7, sp, #0
 802aa06:	60f8      	str	r0, [r7, #12]
 802aa08:	60b9      	str	r1, [r7, #8]
 802aa0a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 802aa0c:	2300      	movs	r3, #0
 802aa0e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 802aa10:	68fb      	ldr	r3, [r7, #12]
 802aa12:	691b      	ldr	r3, [r3, #16]
 802aa14:	0d9b      	lsrs	r3, r3, #22
 802aa16:	059b      	lsls	r3, r3, #22
 802aa18:	68ba      	ldr	r2, [r7, #8]
 802aa1a:	6811      	ldr	r1, [r2, #0]
 802aa1c:	68ba      	ldr	r2, [r7, #8]
 802aa1e:	6852      	ldr	r2, [r2, #4]
 802aa20:	4311      	orrs	r1, r2
 802aa22:	68ba      	ldr	r2, [r7, #8]
 802aa24:	6892      	ldr	r2, [r2, #8]
 802aa26:	3a01      	subs	r2, #1
 802aa28:	0152      	lsls	r2, r2, #5
 802aa2a:	4311      	orrs	r1, r2
 802aa2c:	68ba      	ldr	r2, [r7, #8]
 802aa2e:	68d2      	ldr	r2, [r2, #12]
 802aa30:	0252      	lsls	r2, r2, #9
 802aa32:	430a      	orrs	r2, r1
 802aa34:	431a      	orrs	r2, r3
 802aa36:	68fb      	ldr	r3, [r7, #12]
 802aa38:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 802aa3a:	f7f8 fe27 	bl	802368c <HAL_GetTick>
 802aa3e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 802aa40:	e010      	b.n	802aa64 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802aa42:	687b      	ldr	r3, [r7, #4]
 802aa44:	f1b3 3fff 	cmp.w	r3, #4294967295
 802aa48:	d00c      	beq.n	802aa64 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 802aa4a:	687b      	ldr	r3, [r7, #4]
 802aa4c:	2b00      	cmp	r3, #0
 802aa4e:	d007      	beq.n	802aa60 <FMC_SDRAM_SendCommand+0x60>
 802aa50:	f7f8 fe1c 	bl	802368c <HAL_GetTick>
 802aa54:	4602      	mov	r2, r0
 802aa56:	697b      	ldr	r3, [r7, #20]
 802aa58:	1ad3      	subs	r3, r2, r3
 802aa5a:	687a      	ldr	r2, [r7, #4]
 802aa5c:	429a      	cmp	r2, r3
 802aa5e:	d201      	bcs.n	802aa64 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 802aa60:	2303      	movs	r3, #3
 802aa62:	e006      	b.n	802aa72 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 802aa64:	68fb      	ldr	r3, [r7, #12]
 802aa66:	699b      	ldr	r3, [r3, #24]
 802aa68:	f003 0320 	and.w	r3, r3, #32
 802aa6c:	2b20      	cmp	r3, #32
 802aa6e:	d0e8      	beq.n	802aa42 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 802aa70:	2300      	movs	r3, #0
}
 802aa72:	4618      	mov	r0, r3
 802aa74:	3718      	adds	r7, #24
 802aa76:	46bd      	mov	sp, r7
 802aa78:	bd80      	pop	{r7, pc}

0802aa7a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 802aa7a:	b480      	push	{r7}
 802aa7c:	b083      	sub	sp, #12
 802aa7e:	af00      	add	r7, sp, #0
 802aa80:	6078      	str	r0, [r7, #4]
 802aa82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 802aa84:	687b      	ldr	r3, [r7, #4]
 802aa86:	695b      	ldr	r3, [r3, #20]
 802aa88:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 802aa8c:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 802aa90:	683a      	ldr	r2, [r7, #0]
 802aa92:	0052      	lsls	r2, r2, #1
 802aa94:	431a      	orrs	r2, r3
 802aa96:	687b      	ldr	r3, [r7, #4]
 802aa98:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 802aa9a:	2300      	movs	r3, #0
}
 802aa9c:	4618      	mov	r0, r3
 802aa9e:	370c      	adds	r7, #12
 802aaa0:	46bd      	mov	sp, r7
 802aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aaa6:	4770      	bx	lr

0802aaa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802aaa8:	b084      	sub	sp, #16
 802aaaa:	b580      	push	{r7, lr}
 802aaac:	b084      	sub	sp, #16
 802aaae:	af00      	add	r7, sp, #0
 802aab0:	6078      	str	r0, [r7, #4]
 802aab2:	f107 001c 	add.w	r0, r7, #28
 802aab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aabc:	2b01      	cmp	r3, #1
 802aabe:	d122      	bne.n	802ab06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802aac0:	687b      	ldr	r3, [r7, #4]
 802aac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802aac4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802aac8:	687b      	ldr	r3, [r7, #4]
 802aaca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 802aacc:	687b      	ldr	r3, [r7, #4]
 802aace:	68db      	ldr	r3, [r3, #12]
 802aad0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 802aad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802aad8:	687a      	ldr	r2, [r7, #4]
 802aada:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 802aadc:	687b      	ldr	r3, [r7, #4]
 802aade:	68db      	ldr	r3, [r3, #12]
 802aae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802aae4:	687b      	ldr	r3, [r7, #4]
 802aae6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802aae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802aaea:	2b01      	cmp	r3, #1
 802aaec:	d105      	bne.n	802aafa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802aaee:	687b      	ldr	r3, [r7, #4]
 802aaf0:	68db      	ldr	r3, [r3, #12]
 802aaf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802aaf6:	687b      	ldr	r3, [r7, #4]
 802aaf8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802aafa:	6878      	ldr	r0, [r7, #4]
 802aafc:	f000 f9c0 	bl	802ae80 <USB_CoreReset>
 802ab00:	4603      	mov	r3, r0
 802ab02:	73fb      	strb	r3, [r7, #15]
 802ab04:	e01a      	b.n	802ab3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802ab06:	687b      	ldr	r3, [r7, #4]
 802ab08:	68db      	ldr	r3, [r3, #12]
 802ab0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802ab0e:	687b      	ldr	r3, [r7, #4]
 802ab10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802ab12:	6878      	ldr	r0, [r7, #4]
 802ab14:	f000 f9b4 	bl	802ae80 <USB_CoreReset>
 802ab18:	4603      	mov	r3, r0
 802ab1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 802ab1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802ab1e:	2b00      	cmp	r3, #0
 802ab20:	d106      	bne.n	802ab30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802ab22:	687b      	ldr	r3, [r7, #4]
 802ab24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ab26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802ab2a:	687b      	ldr	r3, [r7, #4]
 802ab2c:	639a      	str	r2, [r3, #56]	; 0x38
 802ab2e:	e005      	b.n	802ab3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802ab30:	687b      	ldr	r3, [r7, #4]
 802ab32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ab34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802ab38:	687b      	ldr	r3, [r7, #4]
 802ab3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 802ab3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab3e:	2b01      	cmp	r3, #1
 802ab40:	d10b      	bne.n	802ab5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802ab42:	687b      	ldr	r3, [r7, #4]
 802ab44:	689b      	ldr	r3, [r3, #8]
 802ab46:	f043 0206 	orr.w	r2, r3, #6
 802ab4a:	687b      	ldr	r3, [r7, #4]
 802ab4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802ab4e:	687b      	ldr	r3, [r7, #4]
 802ab50:	689b      	ldr	r3, [r3, #8]
 802ab52:	f043 0220 	orr.w	r2, r3, #32
 802ab56:	687b      	ldr	r3, [r7, #4]
 802ab58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802ab5a:	7bfb      	ldrb	r3, [r7, #15]
}
 802ab5c:	4618      	mov	r0, r3
 802ab5e:	3710      	adds	r7, #16
 802ab60:	46bd      	mov	sp, r7
 802ab62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802ab66:	b004      	add	sp, #16
 802ab68:	4770      	bx	lr

0802ab6a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802ab6a:	b480      	push	{r7}
 802ab6c:	b083      	sub	sp, #12
 802ab6e:	af00      	add	r7, sp, #0
 802ab70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802ab72:	687b      	ldr	r3, [r7, #4]
 802ab74:	689b      	ldr	r3, [r3, #8]
 802ab76:	f043 0201 	orr.w	r2, r3, #1
 802ab7a:	687b      	ldr	r3, [r7, #4]
 802ab7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802ab7e:	2300      	movs	r3, #0
}
 802ab80:	4618      	mov	r0, r3
 802ab82:	370c      	adds	r7, #12
 802ab84:	46bd      	mov	sp, r7
 802ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab8a:	4770      	bx	lr

0802ab8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802ab8c:	b480      	push	{r7}
 802ab8e:	b083      	sub	sp, #12
 802ab90:	af00      	add	r7, sp, #0
 802ab92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802ab94:	687b      	ldr	r3, [r7, #4]
 802ab96:	689b      	ldr	r3, [r3, #8]
 802ab98:	f023 0201 	bic.w	r2, r3, #1
 802ab9c:	687b      	ldr	r3, [r7, #4]
 802ab9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802aba0:	2300      	movs	r3, #0
}
 802aba2:	4618      	mov	r0, r3
 802aba4:	370c      	adds	r7, #12
 802aba6:	46bd      	mov	sp, r7
 802aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802abac:	4770      	bx	lr

0802abae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802abae:	b580      	push	{r7, lr}
 802abb0:	b084      	sub	sp, #16
 802abb2:	af00      	add	r7, sp, #0
 802abb4:	6078      	str	r0, [r7, #4]
 802abb6:	460b      	mov	r3, r1
 802abb8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 802abba:	2300      	movs	r3, #0
 802abbc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802abbe:	687b      	ldr	r3, [r7, #4]
 802abc0:	68db      	ldr	r3, [r3, #12]
 802abc2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802abc6:	687b      	ldr	r3, [r7, #4]
 802abc8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802abca:	78fb      	ldrb	r3, [r7, #3]
 802abcc:	2b01      	cmp	r3, #1
 802abce:	d115      	bne.n	802abfc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802abd0:	687b      	ldr	r3, [r7, #4]
 802abd2:	68db      	ldr	r3, [r3, #12]
 802abd4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802abd8:	687b      	ldr	r3, [r7, #4]
 802abda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802abdc:	2001      	movs	r0, #1
 802abde:	f7f8 fd61 	bl	80236a4 <HAL_Delay>
      ms++;
 802abe2:	68fb      	ldr	r3, [r7, #12]
 802abe4:	3301      	adds	r3, #1
 802abe6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802abe8:	6878      	ldr	r0, [r7, #4]
 802abea:	f000 f93a 	bl	802ae62 <USB_GetMode>
 802abee:	4603      	mov	r3, r0
 802abf0:	2b01      	cmp	r3, #1
 802abf2:	d01e      	beq.n	802ac32 <USB_SetCurrentMode+0x84>
 802abf4:	68fb      	ldr	r3, [r7, #12]
 802abf6:	2b31      	cmp	r3, #49	; 0x31
 802abf8:	d9f0      	bls.n	802abdc <USB_SetCurrentMode+0x2e>
 802abfa:	e01a      	b.n	802ac32 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 802abfc:	78fb      	ldrb	r3, [r7, #3]
 802abfe:	2b00      	cmp	r3, #0
 802ac00:	d115      	bne.n	802ac2e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802ac02:	687b      	ldr	r3, [r7, #4]
 802ac04:	68db      	ldr	r3, [r3, #12]
 802ac06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802ac0a:	687b      	ldr	r3, [r7, #4]
 802ac0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802ac0e:	2001      	movs	r0, #1
 802ac10:	f7f8 fd48 	bl	80236a4 <HAL_Delay>
      ms++;
 802ac14:	68fb      	ldr	r3, [r7, #12]
 802ac16:	3301      	adds	r3, #1
 802ac18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802ac1a:	6878      	ldr	r0, [r7, #4]
 802ac1c:	f000 f921 	bl	802ae62 <USB_GetMode>
 802ac20:	4603      	mov	r3, r0
 802ac22:	2b00      	cmp	r3, #0
 802ac24:	d005      	beq.n	802ac32 <USB_SetCurrentMode+0x84>
 802ac26:	68fb      	ldr	r3, [r7, #12]
 802ac28:	2b31      	cmp	r3, #49	; 0x31
 802ac2a:	d9f0      	bls.n	802ac0e <USB_SetCurrentMode+0x60>
 802ac2c:	e001      	b.n	802ac32 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 802ac2e:	2301      	movs	r3, #1
 802ac30:	e005      	b.n	802ac3e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 802ac32:	68fb      	ldr	r3, [r7, #12]
 802ac34:	2b32      	cmp	r3, #50	; 0x32
 802ac36:	d101      	bne.n	802ac3c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802ac38:	2301      	movs	r3, #1
 802ac3a:	e000      	b.n	802ac3e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 802ac3c:	2300      	movs	r3, #0
}
 802ac3e:	4618      	mov	r0, r3
 802ac40:	3710      	adds	r7, #16
 802ac42:	46bd      	mov	sp, r7
 802ac44:	bd80      	pop	{r7, pc}
	...

0802ac48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802ac48:	b480      	push	{r7}
 802ac4a:	b085      	sub	sp, #20
 802ac4c:	af00      	add	r7, sp, #0
 802ac4e:	6078      	str	r0, [r7, #4]
 802ac50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802ac52:	2300      	movs	r3, #0
 802ac54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802ac56:	68fb      	ldr	r3, [r7, #12]
 802ac58:	3301      	adds	r3, #1
 802ac5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802ac5c:	68fb      	ldr	r3, [r7, #12]
 802ac5e:	4a13      	ldr	r2, [pc, #76]	; (802acac <USB_FlushTxFifo+0x64>)
 802ac60:	4293      	cmp	r3, r2
 802ac62:	d901      	bls.n	802ac68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 802ac64:	2303      	movs	r3, #3
 802ac66:	e01b      	b.n	802aca0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802ac68:	687b      	ldr	r3, [r7, #4]
 802ac6a:	691b      	ldr	r3, [r3, #16]
 802ac6c:	2b00      	cmp	r3, #0
 802ac6e:	daf2      	bge.n	802ac56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 802ac70:	2300      	movs	r3, #0
 802ac72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802ac74:	683b      	ldr	r3, [r7, #0]
 802ac76:	019b      	lsls	r3, r3, #6
 802ac78:	f043 0220 	orr.w	r2, r3, #32
 802ac7c:	687b      	ldr	r3, [r7, #4]
 802ac7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802ac80:	68fb      	ldr	r3, [r7, #12]
 802ac82:	3301      	adds	r3, #1
 802ac84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802ac86:	68fb      	ldr	r3, [r7, #12]
 802ac88:	4a08      	ldr	r2, [pc, #32]	; (802acac <USB_FlushTxFifo+0x64>)
 802ac8a:	4293      	cmp	r3, r2
 802ac8c:	d901      	bls.n	802ac92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802ac8e:	2303      	movs	r3, #3
 802ac90:	e006      	b.n	802aca0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802ac92:	687b      	ldr	r3, [r7, #4]
 802ac94:	691b      	ldr	r3, [r3, #16]
 802ac96:	f003 0320 	and.w	r3, r3, #32
 802ac9a:	2b20      	cmp	r3, #32
 802ac9c:	d0f0      	beq.n	802ac80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802ac9e:	2300      	movs	r3, #0
}
 802aca0:	4618      	mov	r0, r3
 802aca2:	3714      	adds	r7, #20
 802aca4:	46bd      	mov	sp, r7
 802aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acaa:	4770      	bx	lr
 802acac:	00030d40 	.word	0x00030d40

0802acb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802acb0:	b480      	push	{r7}
 802acb2:	b085      	sub	sp, #20
 802acb4:	af00      	add	r7, sp, #0
 802acb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802acb8:	2300      	movs	r3, #0
 802acba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802acbc:	68fb      	ldr	r3, [r7, #12]
 802acbe:	3301      	adds	r3, #1
 802acc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802acc2:	68fb      	ldr	r3, [r7, #12]
 802acc4:	4a11      	ldr	r2, [pc, #68]	; (802ad0c <USB_FlushRxFifo+0x5c>)
 802acc6:	4293      	cmp	r3, r2
 802acc8:	d901      	bls.n	802acce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802acca:	2303      	movs	r3, #3
 802accc:	e018      	b.n	802ad00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802acce:	687b      	ldr	r3, [r7, #4]
 802acd0:	691b      	ldr	r3, [r3, #16]
 802acd2:	2b00      	cmp	r3, #0
 802acd4:	daf2      	bge.n	802acbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802acd6:	2300      	movs	r3, #0
 802acd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802acda:	687b      	ldr	r3, [r7, #4]
 802acdc:	2210      	movs	r2, #16
 802acde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802ace0:	68fb      	ldr	r3, [r7, #12]
 802ace2:	3301      	adds	r3, #1
 802ace4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802ace6:	68fb      	ldr	r3, [r7, #12]
 802ace8:	4a08      	ldr	r2, [pc, #32]	; (802ad0c <USB_FlushRxFifo+0x5c>)
 802acea:	4293      	cmp	r3, r2
 802acec:	d901      	bls.n	802acf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802acee:	2303      	movs	r3, #3
 802acf0:	e006      	b.n	802ad00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802acf2:	687b      	ldr	r3, [r7, #4]
 802acf4:	691b      	ldr	r3, [r3, #16]
 802acf6:	f003 0310 	and.w	r3, r3, #16
 802acfa:	2b10      	cmp	r3, #16
 802acfc:	d0f0      	beq.n	802ace0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802acfe:	2300      	movs	r3, #0
}
 802ad00:	4618      	mov	r0, r3
 802ad02:	3714      	adds	r7, #20
 802ad04:	46bd      	mov	sp, r7
 802ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad0a:	4770      	bx	lr
 802ad0c:	00030d40 	.word	0x00030d40

0802ad10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802ad10:	b480      	push	{r7}
 802ad12:	b089      	sub	sp, #36	; 0x24
 802ad14:	af00      	add	r7, sp, #0
 802ad16:	60f8      	str	r0, [r7, #12]
 802ad18:	60b9      	str	r1, [r7, #8]
 802ad1a:	4611      	mov	r1, r2
 802ad1c:	461a      	mov	r2, r3
 802ad1e:	460b      	mov	r3, r1
 802ad20:	71fb      	strb	r3, [r7, #7]
 802ad22:	4613      	mov	r3, r2
 802ad24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ad26:	68fb      	ldr	r3, [r7, #12]
 802ad28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802ad2a:	68bb      	ldr	r3, [r7, #8]
 802ad2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 802ad2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802ad32:	2b00      	cmp	r3, #0
 802ad34:	d123      	bne.n	802ad7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802ad36:	88bb      	ldrh	r3, [r7, #4]
 802ad38:	3303      	adds	r3, #3
 802ad3a:	089b      	lsrs	r3, r3, #2
 802ad3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802ad3e:	2300      	movs	r3, #0
 802ad40:	61bb      	str	r3, [r7, #24]
 802ad42:	e018      	b.n	802ad76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802ad44:	79fb      	ldrb	r3, [r7, #7]
 802ad46:	031a      	lsls	r2, r3, #12
 802ad48:	697b      	ldr	r3, [r7, #20]
 802ad4a:	4413      	add	r3, r2
 802ad4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802ad50:	461a      	mov	r2, r3
 802ad52:	69fb      	ldr	r3, [r7, #28]
 802ad54:	681b      	ldr	r3, [r3, #0]
 802ad56:	6013      	str	r3, [r2, #0]
      pSrc++;
 802ad58:	69fb      	ldr	r3, [r7, #28]
 802ad5a:	3301      	adds	r3, #1
 802ad5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802ad5e:	69fb      	ldr	r3, [r7, #28]
 802ad60:	3301      	adds	r3, #1
 802ad62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802ad64:	69fb      	ldr	r3, [r7, #28]
 802ad66:	3301      	adds	r3, #1
 802ad68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802ad6a:	69fb      	ldr	r3, [r7, #28]
 802ad6c:	3301      	adds	r3, #1
 802ad6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802ad70:	69bb      	ldr	r3, [r7, #24]
 802ad72:	3301      	adds	r3, #1
 802ad74:	61bb      	str	r3, [r7, #24]
 802ad76:	69ba      	ldr	r2, [r7, #24]
 802ad78:	693b      	ldr	r3, [r7, #16]
 802ad7a:	429a      	cmp	r2, r3
 802ad7c:	d3e2      	bcc.n	802ad44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802ad7e:	2300      	movs	r3, #0
}
 802ad80:	4618      	mov	r0, r3
 802ad82:	3724      	adds	r7, #36	; 0x24
 802ad84:	46bd      	mov	sp, r7
 802ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad8a:	4770      	bx	lr

0802ad8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802ad8c:	b480      	push	{r7}
 802ad8e:	b08b      	sub	sp, #44	; 0x2c
 802ad90:	af00      	add	r7, sp, #0
 802ad92:	60f8      	str	r0, [r7, #12]
 802ad94:	60b9      	str	r1, [r7, #8]
 802ad96:	4613      	mov	r3, r2
 802ad98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ad9a:	68fb      	ldr	r3, [r7, #12]
 802ad9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802ad9e:	68bb      	ldr	r3, [r7, #8]
 802ada0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802ada2:	88fb      	ldrh	r3, [r7, #6]
 802ada4:	089b      	lsrs	r3, r3, #2
 802ada6:	b29b      	uxth	r3, r3
 802ada8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 802adaa:	88fb      	ldrh	r3, [r7, #6]
 802adac:	f003 0303 	and.w	r3, r3, #3
 802adb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802adb2:	2300      	movs	r3, #0
 802adb4:	623b      	str	r3, [r7, #32]
 802adb6:	e014      	b.n	802ade2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802adb8:	69bb      	ldr	r3, [r7, #24]
 802adba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802adbe:	681a      	ldr	r2, [r3, #0]
 802adc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802adc2:	601a      	str	r2, [r3, #0]
    pDest++;
 802adc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802adc6:	3301      	adds	r3, #1
 802adc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802adcc:	3301      	adds	r3, #1
 802adce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802add2:	3301      	adds	r3, #1
 802add4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802add6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802add8:	3301      	adds	r3, #1
 802adda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 802addc:	6a3b      	ldr	r3, [r7, #32]
 802adde:	3301      	adds	r3, #1
 802ade0:	623b      	str	r3, [r7, #32]
 802ade2:	6a3a      	ldr	r2, [r7, #32]
 802ade4:	697b      	ldr	r3, [r7, #20]
 802ade6:	429a      	cmp	r2, r3
 802ade8:	d3e6      	bcc.n	802adb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 802adea:	8bfb      	ldrh	r3, [r7, #30]
 802adec:	2b00      	cmp	r3, #0
 802adee:	d01e      	beq.n	802ae2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 802adf0:	2300      	movs	r3, #0
 802adf2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 802adf4:	69bb      	ldr	r3, [r7, #24]
 802adf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802adfa:	461a      	mov	r2, r3
 802adfc:	f107 0310 	add.w	r3, r7, #16
 802ae00:	6812      	ldr	r2, [r2, #0]
 802ae02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 802ae04:	693a      	ldr	r2, [r7, #16]
 802ae06:	6a3b      	ldr	r3, [r7, #32]
 802ae08:	b2db      	uxtb	r3, r3
 802ae0a:	00db      	lsls	r3, r3, #3
 802ae0c:	fa22 f303 	lsr.w	r3, r2, r3
 802ae10:	b2da      	uxtb	r2, r3
 802ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ae14:	701a      	strb	r2, [r3, #0]
      i++;
 802ae16:	6a3b      	ldr	r3, [r7, #32]
 802ae18:	3301      	adds	r3, #1
 802ae1a:	623b      	str	r3, [r7, #32]
      pDest++;
 802ae1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ae1e:	3301      	adds	r3, #1
 802ae20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 802ae22:	8bfb      	ldrh	r3, [r7, #30]
 802ae24:	3b01      	subs	r3, #1
 802ae26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 802ae28:	8bfb      	ldrh	r3, [r7, #30]
 802ae2a:	2b00      	cmp	r3, #0
 802ae2c:	d1ea      	bne.n	802ae04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802ae30:	4618      	mov	r0, r3
 802ae32:	372c      	adds	r7, #44	; 0x2c
 802ae34:	46bd      	mov	sp, r7
 802ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae3a:	4770      	bx	lr

0802ae3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802ae3c:	b480      	push	{r7}
 802ae3e:	b085      	sub	sp, #20
 802ae40:	af00      	add	r7, sp, #0
 802ae42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802ae44:	687b      	ldr	r3, [r7, #4]
 802ae46:	695b      	ldr	r3, [r3, #20]
 802ae48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802ae4a:	687b      	ldr	r3, [r7, #4]
 802ae4c:	699b      	ldr	r3, [r3, #24]
 802ae4e:	68fa      	ldr	r2, [r7, #12]
 802ae50:	4013      	ands	r3, r2
 802ae52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802ae54:	68fb      	ldr	r3, [r7, #12]
}
 802ae56:	4618      	mov	r0, r3
 802ae58:	3714      	adds	r7, #20
 802ae5a:	46bd      	mov	sp, r7
 802ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae60:	4770      	bx	lr

0802ae62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802ae62:	b480      	push	{r7}
 802ae64:	b083      	sub	sp, #12
 802ae66:	af00      	add	r7, sp, #0
 802ae68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802ae6a:	687b      	ldr	r3, [r7, #4]
 802ae6c:	695b      	ldr	r3, [r3, #20]
 802ae6e:	f003 0301 	and.w	r3, r3, #1
}
 802ae72:	4618      	mov	r0, r3
 802ae74:	370c      	adds	r7, #12
 802ae76:	46bd      	mov	sp, r7
 802ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae7c:	4770      	bx	lr
	...

0802ae80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802ae80:	b480      	push	{r7}
 802ae82:	b085      	sub	sp, #20
 802ae84:	af00      	add	r7, sp, #0
 802ae86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802ae88:	2300      	movs	r3, #0
 802ae8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802ae8c:	68fb      	ldr	r3, [r7, #12]
 802ae8e:	3301      	adds	r3, #1
 802ae90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802ae92:	68fb      	ldr	r3, [r7, #12]
 802ae94:	4a13      	ldr	r2, [pc, #76]	; (802aee4 <USB_CoreReset+0x64>)
 802ae96:	4293      	cmp	r3, r2
 802ae98:	d901      	bls.n	802ae9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802ae9a:	2303      	movs	r3, #3
 802ae9c:	e01b      	b.n	802aed6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802ae9e:	687b      	ldr	r3, [r7, #4]
 802aea0:	691b      	ldr	r3, [r3, #16]
 802aea2:	2b00      	cmp	r3, #0
 802aea4:	daf2      	bge.n	802ae8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802aea6:	2300      	movs	r3, #0
 802aea8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802aeaa:	687b      	ldr	r3, [r7, #4]
 802aeac:	691b      	ldr	r3, [r3, #16]
 802aeae:	f043 0201 	orr.w	r2, r3, #1
 802aeb2:	687b      	ldr	r3, [r7, #4]
 802aeb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802aeb6:	68fb      	ldr	r3, [r7, #12]
 802aeb8:	3301      	adds	r3, #1
 802aeba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802aebc:	68fb      	ldr	r3, [r7, #12]
 802aebe:	4a09      	ldr	r2, [pc, #36]	; (802aee4 <USB_CoreReset+0x64>)
 802aec0:	4293      	cmp	r3, r2
 802aec2:	d901      	bls.n	802aec8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802aec4:	2303      	movs	r3, #3
 802aec6:	e006      	b.n	802aed6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802aec8:	687b      	ldr	r3, [r7, #4]
 802aeca:	691b      	ldr	r3, [r3, #16]
 802aecc:	f003 0301 	and.w	r3, r3, #1
 802aed0:	2b01      	cmp	r3, #1
 802aed2:	d0f0      	beq.n	802aeb6 <USB_CoreReset+0x36>

  return HAL_OK;
 802aed4:	2300      	movs	r3, #0
}
 802aed6:	4618      	mov	r0, r3
 802aed8:	3714      	adds	r7, #20
 802aeda:	46bd      	mov	sp, r7
 802aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aee0:	4770      	bx	lr
 802aee2:	bf00      	nop
 802aee4:	00030d40 	.word	0x00030d40

0802aee8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802aee8:	b084      	sub	sp, #16
 802aeea:	b580      	push	{r7, lr}
 802aeec:	b086      	sub	sp, #24
 802aeee:	af00      	add	r7, sp, #0
 802aef0:	6078      	str	r0, [r7, #4]
 802aef2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802aef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802aefa:	2300      	movs	r3, #0
 802aefc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802aefe:	687b      	ldr	r3, [r7, #4]
 802af00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802af02:	68fb      	ldr	r3, [r7, #12]
 802af04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802af08:	461a      	mov	r2, r3
 802af0a:	2300      	movs	r3, #0
 802af0c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 802af0e:	687b      	ldr	r3, [r7, #4]
 802af10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802af12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802af16:	687b      	ldr	r3, [r7, #4]
 802af18:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802af1a:	687b      	ldr	r3, [r7, #4]
 802af1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802af1e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802af22:	687b      	ldr	r3, [r7, #4]
 802af24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 802af26:	687b      	ldr	r3, [r7, #4]
 802af28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802af2a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 802af2e:	687b      	ldr	r3, [r7, #4]
 802af30:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802af32:	687b      	ldr	r3, [r7, #4]
 802af34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802af36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802af3a:	2b00      	cmp	r3, #0
 802af3c:	d018      	beq.n	802af70 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 802af3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802af40:	2b01      	cmp	r3, #1
 802af42:	d10a      	bne.n	802af5a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 802af44:	68fb      	ldr	r3, [r7, #12]
 802af46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802af4a:	681b      	ldr	r3, [r3, #0]
 802af4c:	68fa      	ldr	r2, [r7, #12]
 802af4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802af52:	f043 0304 	orr.w	r3, r3, #4
 802af56:	6013      	str	r3, [r2, #0]
 802af58:	e014      	b.n	802af84 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802af5a:	68fb      	ldr	r3, [r7, #12]
 802af5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802af60:	681b      	ldr	r3, [r3, #0]
 802af62:	68fa      	ldr	r2, [r7, #12]
 802af64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802af68:	f023 0304 	bic.w	r3, r3, #4
 802af6c:	6013      	str	r3, [r2, #0]
 802af6e:	e009      	b.n	802af84 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802af70:	68fb      	ldr	r3, [r7, #12]
 802af72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802af76:	681b      	ldr	r3, [r3, #0]
 802af78:	68fa      	ldr	r2, [r7, #12]
 802af7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802af7e:	f023 0304 	bic.w	r3, r3, #4
 802af82:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802af84:	2110      	movs	r1, #16
 802af86:	6878      	ldr	r0, [r7, #4]
 802af88:	f7ff fe5e 	bl	802ac48 <USB_FlushTxFifo>
 802af8c:	4603      	mov	r3, r0
 802af8e:	2b00      	cmp	r3, #0
 802af90:	d001      	beq.n	802af96 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 802af92:	2301      	movs	r3, #1
 802af94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802af96:	6878      	ldr	r0, [r7, #4]
 802af98:	f7ff fe8a 	bl	802acb0 <USB_FlushRxFifo>
 802af9c:	4603      	mov	r3, r0
 802af9e:	2b00      	cmp	r3, #0
 802afa0:	d001      	beq.n	802afa6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 802afa2:	2301      	movs	r3, #1
 802afa4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 802afa6:	2300      	movs	r3, #0
 802afa8:	613b      	str	r3, [r7, #16]
 802afaa:	e015      	b.n	802afd8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 802afac:	693b      	ldr	r3, [r7, #16]
 802afae:	015a      	lsls	r2, r3, #5
 802afb0:	68fb      	ldr	r3, [r7, #12]
 802afb2:	4413      	add	r3, r2
 802afb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802afb8:	461a      	mov	r2, r3
 802afba:	f04f 33ff 	mov.w	r3, #4294967295
 802afbe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 802afc0:	693b      	ldr	r3, [r7, #16]
 802afc2:	015a      	lsls	r2, r3, #5
 802afc4:	68fb      	ldr	r3, [r7, #12]
 802afc6:	4413      	add	r3, r2
 802afc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802afcc:	461a      	mov	r2, r3
 802afce:	2300      	movs	r3, #0
 802afd0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 802afd2:	693b      	ldr	r3, [r7, #16]
 802afd4:	3301      	adds	r3, #1
 802afd6:	613b      	str	r3, [r7, #16]
 802afd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802afda:	693a      	ldr	r2, [r7, #16]
 802afdc:	429a      	cmp	r2, r3
 802afde:	d3e5      	bcc.n	802afac <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802afe0:	687b      	ldr	r3, [r7, #4]
 802afe2:	2200      	movs	r2, #0
 802afe4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 802afe6:	687b      	ldr	r3, [r7, #4]
 802afe8:	f04f 32ff 	mov.w	r2, #4294967295
 802afec:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802afee:	687b      	ldr	r3, [r7, #4]
 802aff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802aff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802aff6:	2b00      	cmp	r3, #0
 802aff8:	d00b      	beq.n	802b012 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 802affa:	687b      	ldr	r3, [r7, #4]
 802affc:	f44f 7200 	mov.w	r2, #512	; 0x200
 802b000:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 802b002:	687b      	ldr	r3, [r7, #4]
 802b004:	4a13      	ldr	r2, [pc, #76]	; (802b054 <USB_HostInit+0x16c>)
 802b006:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 802b008:	687b      	ldr	r3, [r7, #4]
 802b00a:	4a13      	ldr	r2, [pc, #76]	; (802b058 <USB_HostInit+0x170>)
 802b00c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 802b010:	e009      	b.n	802b026 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 802b012:	687b      	ldr	r3, [r7, #4]
 802b014:	2280      	movs	r2, #128	; 0x80
 802b016:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 802b018:	687b      	ldr	r3, [r7, #4]
 802b01a:	4a10      	ldr	r2, [pc, #64]	; (802b05c <USB_HostInit+0x174>)
 802b01c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 802b01e:	687b      	ldr	r3, [r7, #4]
 802b020:	4a0f      	ldr	r2, [pc, #60]	; (802b060 <USB_HostInit+0x178>)
 802b022:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802b026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b028:	2b00      	cmp	r3, #0
 802b02a:	d105      	bne.n	802b038 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802b02c:	687b      	ldr	r3, [r7, #4]
 802b02e:	699b      	ldr	r3, [r3, #24]
 802b030:	f043 0210 	orr.w	r2, r3, #16
 802b034:	687b      	ldr	r3, [r7, #4]
 802b036:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 802b038:	687b      	ldr	r3, [r7, #4]
 802b03a:	699a      	ldr	r2, [r3, #24]
 802b03c:	4b09      	ldr	r3, [pc, #36]	; (802b064 <USB_HostInit+0x17c>)
 802b03e:	4313      	orrs	r3, r2
 802b040:	687a      	ldr	r2, [r7, #4]
 802b042:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 802b044:	7dfb      	ldrb	r3, [r7, #23]
}
 802b046:	4618      	mov	r0, r3
 802b048:	3718      	adds	r7, #24
 802b04a:	46bd      	mov	sp, r7
 802b04c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802b050:	b004      	add	sp, #16
 802b052:	4770      	bx	lr
 802b054:	01000200 	.word	0x01000200
 802b058:	00e00300 	.word	0x00e00300
 802b05c:	00600080 	.word	0x00600080
 802b060:	004000e0 	.word	0x004000e0
 802b064:	a3200008 	.word	0xa3200008

0802b068 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 802b068:	b480      	push	{r7}
 802b06a:	b085      	sub	sp, #20
 802b06c:	af00      	add	r7, sp, #0
 802b06e:	6078      	str	r0, [r7, #4]
 802b070:	460b      	mov	r3, r1
 802b072:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b074:	687b      	ldr	r3, [r7, #4]
 802b076:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 802b078:	68fb      	ldr	r3, [r7, #12]
 802b07a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b07e:	681b      	ldr	r3, [r3, #0]
 802b080:	68fa      	ldr	r2, [r7, #12]
 802b082:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802b086:	f023 0303 	bic.w	r3, r3, #3
 802b08a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 802b08c:	68fb      	ldr	r3, [r7, #12]
 802b08e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b092:	681a      	ldr	r2, [r3, #0]
 802b094:	78fb      	ldrb	r3, [r7, #3]
 802b096:	f003 0303 	and.w	r3, r3, #3
 802b09a:	68f9      	ldr	r1, [r7, #12]
 802b09c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802b0a0:	4313      	orrs	r3, r2
 802b0a2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 802b0a4:	78fb      	ldrb	r3, [r7, #3]
 802b0a6:	2b01      	cmp	r3, #1
 802b0a8:	d107      	bne.n	802b0ba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 802b0aa:	68fb      	ldr	r3, [r7, #12]
 802b0ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b0b0:	461a      	mov	r2, r3
 802b0b2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 802b0b6:	6053      	str	r3, [r2, #4]
 802b0b8:	e009      	b.n	802b0ce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 802b0ba:	78fb      	ldrb	r3, [r7, #3]
 802b0bc:	2b02      	cmp	r3, #2
 802b0be:	d106      	bne.n	802b0ce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 802b0c0:	68fb      	ldr	r3, [r7, #12]
 802b0c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b0c6:	461a      	mov	r2, r3
 802b0c8:	f241 7370 	movw	r3, #6000	; 0x1770
 802b0cc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 802b0ce:	2300      	movs	r3, #0
}
 802b0d0:	4618      	mov	r0, r3
 802b0d2:	3714      	adds	r7, #20
 802b0d4:	46bd      	mov	sp, r7
 802b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0da:	4770      	bx	lr

0802b0dc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 802b0dc:	b580      	push	{r7, lr}
 802b0de:	b084      	sub	sp, #16
 802b0e0:	af00      	add	r7, sp, #0
 802b0e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b0e4:	687b      	ldr	r3, [r7, #4]
 802b0e6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 802b0e8:	2300      	movs	r3, #0
 802b0ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802b0ec:	68fb      	ldr	r3, [r7, #12]
 802b0ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802b0f2:	681b      	ldr	r3, [r3, #0]
 802b0f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802b0f6:	68bb      	ldr	r3, [r7, #8]
 802b0f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802b0fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 802b0fe:	68bb      	ldr	r3, [r7, #8]
 802b100:	68fa      	ldr	r2, [r7, #12]
 802b102:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802b106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b10a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 802b10c:	2064      	movs	r0, #100	; 0x64
 802b10e:	f7f8 fac9 	bl	80236a4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 802b112:	68bb      	ldr	r3, [r7, #8]
 802b114:	68fa      	ldr	r2, [r7, #12]
 802b116:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802b11a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802b11e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 802b120:	200a      	movs	r0, #10
 802b122:	f7f8 fabf 	bl	80236a4 <HAL_Delay>

  return HAL_OK;
 802b126:	2300      	movs	r3, #0
}
 802b128:	4618      	mov	r0, r3
 802b12a:	3710      	adds	r7, #16
 802b12c:	46bd      	mov	sp, r7
 802b12e:	bd80      	pop	{r7, pc}

0802b130 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 802b130:	b480      	push	{r7}
 802b132:	b085      	sub	sp, #20
 802b134:	af00      	add	r7, sp, #0
 802b136:	6078      	str	r0, [r7, #4]
 802b138:	460b      	mov	r3, r1
 802b13a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b13c:	687b      	ldr	r3, [r7, #4]
 802b13e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802b140:	2300      	movs	r3, #0
 802b142:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802b144:	68fb      	ldr	r3, [r7, #12]
 802b146:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802b14a:	681b      	ldr	r3, [r3, #0]
 802b14c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802b14e:	68bb      	ldr	r3, [r7, #8]
 802b150:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802b154:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 802b156:	68bb      	ldr	r3, [r7, #8]
 802b158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802b15c:	2b00      	cmp	r3, #0
 802b15e:	d109      	bne.n	802b174 <USB_DriveVbus+0x44>
 802b160:	78fb      	ldrb	r3, [r7, #3]
 802b162:	2b01      	cmp	r3, #1
 802b164:	d106      	bne.n	802b174 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 802b166:	68bb      	ldr	r3, [r7, #8]
 802b168:	68fa      	ldr	r2, [r7, #12]
 802b16a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802b16e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802b172:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 802b174:	68bb      	ldr	r3, [r7, #8]
 802b176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802b17a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802b17e:	d109      	bne.n	802b194 <USB_DriveVbus+0x64>
 802b180:	78fb      	ldrb	r3, [r7, #3]
 802b182:	2b00      	cmp	r3, #0
 802b184:	d106      	bne.n	802b194 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 802b186:	68bb      	ldr	r3, [r7, #8]
 802b188:	68fa      	ldr	r2, [r7, #12]
 802b18a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802b18e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b192:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 802b194:	2300      	movs	r3, #0
}
 802b196:	4618      	mov	r0, r3
 802b198:	3714      	adds	r7, #20
 802b19a:	46bd      	mov	sp, r7
 802b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1a0:	4770      	bx	lr

0802b1a2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802b1a2:	b480      	push	{r7}
 802b1a4:	b085      	sub	sp, #20
 802b1a6:	af00      	add	r7, sp, #0
 802b1a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b1aa:	687b      	ldr	r3, [r7, #4]
 802b1ac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802b1ae:	2300      	movs	r3, #0
 802b1b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802b1b2:	68fb      	ldr	r3, [r7, #12]
 802b1b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802b1b8:	681b      	ldr	r3, [r3, #0]
 802b1ba:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 802b1bc:	68bb      	ldr	r3, [r7, #8]
 802b1be:	0c5b      	lsrs	r3, r3, #17
 802b1c0:	f003 0303 	and.w	r3, r3, #3
}
 802b1c4:	4618      	mov	r0, r3
 802b1c6:	3714      	adds	r7, #20
 802b1c8:	46bd      	mov	sp, r7
 802b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1ce:	4770      	bx	lr

0802b1d0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 802b1d0:	b480      	push	{r7}
 802b1d2:	b085      	sub	sp, #20
 802b1d4:	af00      	add	r7, sp, #0
 802b1d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b1d8:	687b      	ldr	r3, [r7, #4]
 802b1da:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 802b1dc:	68fb      	ldr	r3, [r7, #12]
 802b1de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b1e2:	689b      	ldr	r3, [r3, #8]
 802b1e4:	b29b      	uxth	r3, r3
}
 802b1e6:	4618      	mov	r0, r3
 802b1e8:	3714      	adds	r7, #20
 802b1ea:	46bd      	mov	sp, r7
 802b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1f0:	4770      	bx	lr
	...

0802b1f4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 802b1f4:	b580      	push	{r7, lr}
 802b1f6:	b088      	sub	sp, #32
 802b1f8:	af00      	add	r7, sp, #0
 802b1fa:	6078      	str	r0, [r7, #4]
 802b1fc:	4608      	mov	r0, r1
 802b1fe:	4611      	mov	r1, r2
 802b200:	461a      	mov	r2, r3
 802b202:	4603      	mov	r3, r0
 802b204:	70fb      	strb	r3, [r7, #3]
 802b206:	460b      	mov	r3, r1
 802b208:	70bb      	strb	r3, [r7, #2]
 802b20a:	4613      	mov	r3, r2
 802b20c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 802b20e:	2300      	movs	r3, #0
 802b210:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b212:	687b      	ldr	r3, [r7, #4]
 802b214:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 802b216:	78fb      	ldrb	r3, [r7, #3]
 802b218:	015a      	lsls	r2, r3, #5
 802b21a:	693b      	ldr	r3, [r7, #16]
 802b21c:	4413      	add	r3, r2
 802b21e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b222:	461a      	mov	r2, r3
 802b224:	f04f 33ff 	mov.w	r3, #4294967295
 802b228:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 802b22a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802b22e:	2b03      	cmp	r3, #3
 802b230:	d87e      	bhi.n	802b330 <USB_HC_Init+0x13c>
 802b232:	a201      	add	r2, pc, #4	; (adr r2, 802b238 <USB_HC_Init+0x44>)
 802b234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b238:	0802b249 	.word	0x0802b249
 802b23c:	0802b2f3 	.word	0x0802b2f3
 802b240:	0802b249 	.word	0x0802b249
 802b244:	0802b2b5 	.word	0x0802b2b5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802b248:	78fb      	ldrb	r3, [r7, #3]
 802b24a:	015a      	lsls	r2, r3, #5
 802b24c:	693b      	ldr	r3, [r7, #16]
 802b24e:	4413      	add	r3, r2
 802b250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b254:	461a      	mov	r2, r3
 802b256:	f240 439d 	movw	r3, #1181	; 0x49d
 802b25a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 802b25c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802b260:	2b00      	cmp	r3, #0
 802b262:	da10      	bge.n	802b286 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802b264:	78fb      	ldrb	r3, [r7, #3]
 802b266:	015a      	lsls	r2, r3, #5
 802b268:	693b      	ldr	r3, [r7, #16]
 802b26a:	4413      	add	r3, r2
 802b26c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b270:	68db      	ldr	r3, [r3, #12]
 802b272:	78fa      	ldrb	r2, [r7, #3]
 802b274:	0151      	lsls	r1, r2, #5
 802b276:	693a      	ldr	r2, [r7, #16]
 802b278:	440a      	add	r2, r1
 802b27a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b27e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b282:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 802b284:	e057      	b.n	802b336 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 802b286:	687b      	ldr	r3, [r7, #4]
 802b288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b28a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b28e:	2b00      	cmp	r3, #0
 802b290:	d051      	beq.n	802b336 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 802b292:	78fb      	ldrb	r3, [r7, #3]
 802b294:	015a      	lsls	r2, r3, #5
 802b296:	693b      	ldr	r3, [r7, #16]
 802b298:	4413      	add	r3, r2
 802b29a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b29e:	68db      	ldr	r3, [r3, #12]
 802b2a0:	78fa      	ldrb	r2, [r7, #3]
 802b2a2:	0151      	lsls	r1, r2, #5
 802b2a4:	693a      	ldr	r2, [r7, #16]
 802b2a6:	440a      	add	r2, r1
 802b2a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b2ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802b2b0:	60d3      	str	r3, [r2, #12]
      break;
 802b2b2:	e040      	b.n	802b336 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802b2b4:	78fb      	ldrb	r3, [r7, #3]
 802b2b6:	015a      	lsls	r2, r3, #5
 802b2b8:	693b      	ldr	r3, [r7, #16]
 802b2ba:	4413      	add	r3, r2
 802b2bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b2c0:	461a      	mov	r2, r3
 802b2c2:	f240 639d 	movw	r3, #1693	; 0x69d
 802b2c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802b2c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802b2cc:	2b00      	cmp	r3, #0
 802b2ce:	da34      	bge.n	802b33a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802b2d0:	78fb      	ldrb	r3, [r7, #3]
 802b2d2:	015a      	lsls	r2, r3, #5
 802b2d4:	693b      	ldr	r3, [r7, #16]
 802b2d6:	4413      	add	r3, r2
 802b2d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b2dc:	68db      	ldr	r3, [r3, #12]
 802b2de:	78fa      	ldrb	r2, [r7, #3]
 802b2e0:	0151      	lsls	r1, r2, #5
 802b2e2:	693a      	ldr	r2, [r7, #16]
 802b2e4:	440a      	add	r2, r1
 802b2e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b2ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b2ee:	60d3      	str	r3, [r2, #12]
      }

      break;
 802b2f0:	e023      	b.n	802b33a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802b2f2:	78fb      	ldrb	r3, [r7, #3]
 802b2f4:	015a      	lsls	r2, r3, #5
 802b2f6:	693b      	ldr	r3, [r7, #16]
 802b2f8:	4413      	add	r3, r2
 802b2fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b2fe:	461a      	mov	r2, r3
 802b300:	f240 2325 	movw	r3, #549	; 0x225
 802b304:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802b306:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802b30a:	2b00      	cmp	r3, #0
 802b30c:	da17      	bge.n	802b33e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 802b30e:	78fb      	ldrb	r3, [r7, #3]
 802b310:	015a      	lsls	r2, r3, #5
 802b312:	693b      	ldr	r3, [r7, #16]
 802b314:	4413      	add	r3, r2
 802b316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b31a:	68db      	ldr	r3, [r3, #12]
 802b31c:	78fa      	ldrb	r2, [r7, #3]
 802b31e:	0151      	lsls	r1, r2, #5
 802b320:	693a      	ldr	r2, [r7, #16]
 802b322:	440a      	add	r2, r1
 802b324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b328:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 802b32c:	60d3      	str	r3, [r2, #12]
      }
      break;
 802b32e:	e006      	b.n	802b33e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 802b330:	2301      	movs	r3, #1
 802b332:	77fb      	strb	r3, [r7, #31]
      break;
 802b334:	e004      	b.n	802b340 <USB_HC_Init+0x14c>
      break;
 802b336:	bf00      	nop
 802b338:	e002      	b.n	802b340 <USB_HC_Init+0x14c>
      break;
 802b33a:	bf00      	nop
 802b33c:	e000      	b.n	802b340 <USB_HC_Init+0x14c>
      break;
 802b33e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 802b340:	78fb      	ldrb	r3, [r7, #3]
 802b342:	015a      	lsls	r2, r3, #5
 802b344:	693b      	ldr	r3, [r7, #16]
 802b346:	4413      	add	r3, r2
 802b348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b34c:	68db      	ldr	r3, [r3, #12]
 802b34e:	78fa      	ldrb	r2, [r7, #3]
 802b350:	0151      	lsls	r1, r2, #5
 802b352:	693a      	ldr	r2, [r7, #16]
 802b354:	440a      	add	r2, r1
 802b356:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b35a:	f043 0302 	orr.w	r3, r3, #2
 802b35e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 802b360:	693b      	ldr	r3, [r7, #16]
 802b362:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b366:	699a      	ldr	r2, [r3, #24]
 802b368:	78fb      	ldrb	r3, [r7, #3]
 802b36a:	f003 030f 	and.w	r3, r3, #15
 802b36e:	2101      	movs	r1, #1
 802b370:	fa01 f303 	lsl.w	r3, r1, r3
 802b374:	6939      	ldr	r1, [r7, #16]
 802b376:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802b37a:	4313      	orrs	r3, r2
 802b37c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 802b37e:	687b      	ldr	r3, [r7, #4]
 802b380:	699b      	ldr	r3, [r3, #24]
 802b382:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 802b386:	687b      	ldr	r3, [r7, #4]
 802b388:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 802b38a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802b38e:	2b00      	cmp	r3, #0
 802b390:	da03      	bge.n	802b39a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 802b392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802b396:	61bb      	str	r3, [r7, #24]
 802b398:	e001      	b.n	802b39e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 802b39a:	2300      	movs	r3, #0
 802b39c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 802b39e:	6878      	ldr	r0, [r7, #4]
 802b3a0:	f7ff feff 	bl	802b1a2 <USB_GetHostSpeed>
 802b3a4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 802b3a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802b3aa:	2b02      	cmp	r3, #2
 802b3ac:	d106      	bne.n	802b3bc <USB_HC_Init+0x1c8>
 802b3ae:	68fb      	ldr	r3, [r7, #12]
 802b3b0:	2b02      	cmp	r3, #2
 802b3b2:	d003      	beq.n	802b3bc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 802b3b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802b3b8:	617b      	str	r3, [r7, #20]
 802b3ba:	e001      	b.n	802b3c0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 802b3bc:	2300      	movs	r3, #0
 802b3be:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802b3c0:	787b      	ldrb	r3, [r7, #1]
 802b3c2:	059b      	lsls	r3, r3, #22
 802b3c4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802b3c8:	78bb      	ldrb	r3, [r7, #2]
 802b3ca:	02db      	lsls	r3, r3, #11
 802b3cc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802b3d0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802b3d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802b3d6:	049b      	lsls	r3, r3, #18
 802b3d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802b3dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802b3de:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802b3e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802b3e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802b3e6:	69bb      	ldr	r3, [r7, #24]
 802b3e8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802b3ea:	78fb      	ldrb	r3, [r7, #3]
 802b3ec:	0159      	lsls	r1, r3, #5
 802b3ee:	693b      	ldr	r3, [r7, #16]
 802b3f0:	440b      	add	r3, r1
 802b3f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b3f6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802b3f8:	697b      	ldr	r3, [r7, #20]
 802b3fa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802b3fc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 802b3fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802b402:	2b03      	cmp	r3, #3
 802b404:	d003      	beq.n	802b40e <USB_HC_Init+0x21a>
 802b406:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802b40a:	2b01      	cmp	r3, #1
 802b40c:	d10f      	bne.n	802b42e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 802b40e:	78fb      	ldrb	r3, [r7, #3]
 802b410:	015a      	lsls	r2, r3, #5
 802b412:	693b      	ldr	r3, [r7, #16]
 802b414:	4413      	add	r3, r2
 802b416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b41a:	681b      	ldr	r3, [r3, #0]
 802b41c:	78fa      	ldrb	r2, [r7, #3]
 802b41e:	0151      	lsls	r1, r2, #5
 802b420:	693a      	ldr	r2, [r7, #16]
 802b422:	440a      	add	r2, r1
 802b424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b428:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802b42c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 802b42e:	7ffb      	ldrb	r3, [r7, #31]
}
 802b430:	4618      	mov	r0, r3
 802b432:	3720      	adds	r7, #32
 802b434:	46bd      	mov	sp, r7
 802b436:	bd80      	pop	{r7, pc}

0802b438 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 802b438:	b580      	push	{r7, lr}
 802b43a:	b08c      	sub	sp, #48	; 0x30
 802b43c:	af02      	add	r7, sp, #8
 802b43e:	60f8      	str	r0, [r7, #12]
 802b440:	60b9      	str	r1, [r7, #8]
 802b442:	4613      	mov	r3, r2
 802b444:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b446:	68fb      	ldr	r3, [r7, #12]
 802b448:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 802b44a:	68bb      	ldr	r3, [r7, #8]
 802b44c:	785b      	ldrb	r3, [r3, #1]
 802b44e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 802b450:	f44f 7380 	mov.w	r3, #256	; 0x100
 802b454:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 802b456:	68fb      	ldr	r3, [r7, #12]
 802b458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b45a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b45e:	2b00      	cmp	r3, #0
 802b460:	d02d      	beq.n	802b4be <USB_HC_StartXfer+0x86>
 802b462:	68bb      	ldr	r3, [r7, #8]
 802b464:	791b      	ldrb	r3, [r3, #4]
 802b466:	2b00      	cmp	r3, #0
 802b468:	d129      	bne.n	802b4be <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 802b46a:	79fb      	ldrb	r3, [r7, #7]
 802b46c:	2b01      	cmp	r3, #1
 802b46e:	d117      	bne.n	802b4a0 <USB_HC_StartXfer+0x68>
 802b470:	68bb      	ldr	r3, [r7, #8]
 802b472:	79db      	ldrb	r3, [r3, #7]
 802b474:	2b00      	cmp	r3, #0
 802b476:	d003      	beq.n	802b480 <USB_HC_StartXfer+0x48>
 802b478:	68bb      	ldr	r3, [r7, #8]
 802b47a:	79db      	ldrb	r3, [r3, #7]
 802b47c:	2b02      	cmp	r3, #2
 802b47e:	d10f      	bne.n	802b4a0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 802b480:	69fb      	ldr	r3, [r7, #28]
 802b482:	015a      	lsls	r2, r3, #5
 802b484:	6a3b      	ldr	r3, [r7, #32]
 802b486:	4413      	add	r3, r2
 802b488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b48c:	68db      	ldr	r3, [r3, #12]
 802b48e:	69fa      	ldr	r2, [r7, #28]
 802b490:	0151      	lsls	r1, r2, #5
 802b492:	6a3a      	ldr	r2, [r7, #32]
 802b494:	440a      	add	r2, r1
 802b496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802b49e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 802b4a0:	79fb      	ldrb	r3, [r7, #7]
 802b4a2:	2b00      	cmp	r3, #0
 802b4a4:	d10b      	bne.n	802b4be <USB_HC_StartXfer+0x86>
 802b4a6:	68bb      	ldr	r3, [r7, #8]
 802b4a8:	795b      	ldrb	r3, [r3, #5]
 802b4aa:	2b01      	cmp	r3, #1
 802b4ac:	d107      	bne.n	802b4be <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 802b4ae:	68bb      	ldr	r3, [r7, #8]
 802b4b0:	785b      	ldrb	r3, [r3, #1]
 802b4b2:	4619      	mov	r1, r3
 802b4b4:	68f8      	ldr	r0, [r7, #12]
 802b4b6:	f000 fa0f 	bl	802b8d8 <USB_DoPing>
      return HAL_OK;
 802b4ba:	2300      	movs	r3, #0
 802b4bc:	e0f8      	b.n	802b6b0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 802b4be:	68bb      	ldr	r3, [r7, #8]
 802b4c0:	695b      	ldr	r3, [r3, #20]
 802b4c2:	2b00      	cmp	r3, #0
 802b4c4:	d018      	beq.n	802b4f8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 802b4c6:	68bb      	ldr	r3, [r7, #8]
 802b4c8:	695b      	ldr	r3, [r3, #20]
 802b4ca:	68ba      	ldr	r2, [r7, #8]
 802b4cc:	8912      	ldrh	r2, [r2, #8]
 802b4ce:	4413      	add	r3, r2
 802b4d0:	3b01      	subs	r3, #1
 802b4d2:	68ba      	ldr	r2, [r7, #8]
 802b4d4:	8912      	ldrh	r2, [r2, #8]
 802b4d6:	fbb3 f3f2 	udiv	r3, r3, r2
 802b4da:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 802b4dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802b4de:	8b7b      	ldrh	r3, [r7, #26]
 802b4e0:	429a      	cmp	r2, r3
 802b4e2:	d90b      	bls.n	802b4fc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 802b4e4:	8b7b      	ldrh	r3, [r7, #26]
 802b4e6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802b4e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802b4ea:	68ba      	ldr	r2, [r7, #8]
 802b4ec:	8912      	ldrh	r2, [r2, #8]
 802b4ee:	fb03 f202 	mul.w	r2, r3, r2
 802b4f2:	68bb      	ldr	r3, [r7, #8]
 802b4f4:	611a      	str	r2, [r3, #16]
 802b4f6:	e001      	b.n	802b4fc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 802b4f8:	2301      	movs	r3, #1
 802b4fa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 802b4fc:	68bb      	ldr	r3, [r7, #8]
 802b4fe:	78db      	ldrb	r3, [r3, #3]
 802b500:	2b00      	cmp	r3, #0
 802b502:	d007      	beq.n	802b514 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802b504:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802b506:	68ba      	ldr	r2, [r7, #8]
 802b508:	8912      	ldrh	r2, [r2, #8]
 802b50a:	fb03 f202 	mul.w	r2, r3, r2
 802b50e:	68bb      	ldr	r3, [r7, #8]
 802b510:	611a      	str	r2, [r3, #16]
 802b512:	e003      	b.n	802b51c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 802b514:	68bb      	ldr	r3, [r7, #8]
 802b516:	695a      	ldr	r2, [r3, #20]
 802b518:	68bb      	ldr	r3, [r7, #8]
 802b51a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802b51c:	68bb      	ldr	r3, [r7, #8]
 802b51e:	691b      	ldr	r3, [r3, #16]
 802b520:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802b524:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802b526:	04d9      	lsls	r1, r3, #19
 802b528:	4b63      	ldr	r3, [pc, #396]	; (802b6b8 <USB_HC_StartXfer+0x280>)
 802b52a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802b52c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 802b52e:	68bb      	ldr	r3, [r7, #8]
 802b530:	7a9b      	ldrb	r3, [r3, #10]
 802b532:	075b      	lsls	r3, r3, #29
 802b534:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802b538:	69f9      	ldr	r1, [r7, #28]
 802b53a:	0148      	lsls	r0, r1, #5
 802b53c:	6a39      	ldr	r1, [r7, #32]
 802b53e:	4401      	add	r1, r0
 802b540:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802b544:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802b546:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 802b548:	79fb      	ldrb	r3, [r7, #7]
 802b54a:	2b00      	cmp	r3, #0
 802b54c:	d009      	beq.n	802b562 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 802b54e:	68bb      	ldr	r3, [r7, #8]
 802b550:	68d9      	ldr	r1, [r3, #12]
 802b552:	69fb      	ldr	r3, [r7, #28]
 802b554:	015a      	lsls	r2, r3, #5
 802b556:	6a3b      	ldr	r3, [r7, #32]
 802b558:	4413      	add	r3, r2
 802b55a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b55e:	460a      	mov	r2, r1
 802b560:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 802b562:	6a3b      	ldr	r3, [r7, #32]
 802b564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b568:	689b      	ldr	r3, [r3, #8]
 802b56a:	f003 0301 	and.w	r3, r3, #1
 802b56e:	2b00      	cmp	r3, #0
 802b570:	bf0c      	ite	eq
 802b572:	2301      	moveq	r3, #1
 802b574:	2300      	movne	r3, #0
 802b576:	b2db      	uxtb	r3, r3
 802b578:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 802b57a:	69fb      	ldr	r3, [r7, #28]
 802b57c:	015a      	lsls	r2, r3, #5
 802b57e:	6a3b      	ldr	r3, [r7, #32]
 802b580:	4413      	add	r3, r2
 802b582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b586:	681b      	ldr	r3, [r3, #0]
 802b588:	69fa      	ldr	r2, [r7, #28]
 802b58a:	0151      	lsls	r1, r2, #5
 802b58c:	6a3a      	ldr	r2, [r7, #32]
 802b58e:	440a      	add	r2, r1
 802b590:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b594:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802b598:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 802b59a:	69fb      	ldr	r3, [r7, #28]
 802b59c:	015a      	lsls	r2, r3, #5
 802b59e:	6a3b      	ldr	r3, [r7, #32]
 802b5a0:	4413      	add	r3, r2
 802b5a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b5a6:	681a      	ldr	r2, [r3, #0]
 802b5a8:	7e7b      	ldrb	r3, [r7, #25]
 802b5aa:	075b      	lsls	r3, r3, #29
 802b5ac:	69f9      	ldr	r1, [r7, #28]
 802b5ae:	0148      	lsls	r0, r1, #5
 802b5b0:	6a39      	ldr	r1, [r7, #32]
 802b5b2:	4401      	add	r1, r0
 802b5b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 802b5b8:	4313      	orrs	r3, r2
 802b5ba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 802b5bc:	69fb      	ldr	r3, [r7, #28]
 802b5be:	015a      	lsls	r2, r3, #5
 802b5c0:	6a3b      	ldr	r3, [r7, #32]
 802b5c2:	4413      	add	r3, r2
 802b5c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b5c8:	681b      	ldr	r3, [r3, #0]
 802b5ca:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802b5cc:	693b      	ldr	r3, [r7, #16]
 802b5ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802b5d2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 802b5d4:	68bb      	ldr	r3, [r7, #8]
 802b5d6:	78db      	ldrb	r3, [r3, #3]
 802b5d8:	2b00      	cmp	r3, #0
 802b5da:	d004      	beq.n	802b5e6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 802b5dc:	693b      	ldr	r3, [r7, #16]
 802b5de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802b5e2:	613b      	str	r3, [r7, #16]
 802b5e4:	e003      	b.n	802b5ee <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 802b5e6:	693b      	ldr	r3, [r7, #16]
 802b5e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802b5ec:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802b5ee:	693b      	ldr	r3, [r7, #16]
 802b5f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b5f4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 802b5f6:	69fb      	ldr	r3, [r7, #28]
 802b5f8:	015a      	lsls	r2, r3, #5
 802b5fa:	6a3b      	ldr	r3, [r7, #32]
 802b5fc:	4413      	add	r3, r2
 802b5fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b602:	461a      	mov	r2, r3
 802b604:	693b      	ldr	r3, [r7, #16]
 802b606:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 802b608:	79fb      	ldrb	r3, [r7, #7]
 802b60a:	2b00      	cmp	r3, #0
 802b60c:	d001      	beq.n	802b612 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 802b60e:	2300      	movs	r3, #0
 802b610:	e04e      	b.n	802b6b0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 802b612:	68bb      	ldr	r3, [r7, #8]
 802b614:	78db      	ldrb	r3, [r3, #3]
 802b616:	2b00      	cmp	r3, #0
 802b618:	d149      	bne.n	802b6ae <USB_HC_StartXfer+0x276>
 802b61a:	68bb      	ldr	r3, [r7, #8]
 802b61c:	695b      	ldr	r3, [r3, #20]
 802b61e:	2b00      	cmp	r3, #0
 802b620:	d045      	beq.n	802b6ae <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 802b622:	68bb      	ldr	r3, [r7, #8]
 802b624:	79db      	ldrb	r3, [r3, #7]
 802b626:	2b03      	cmp	r3, #3
 802b628:	d830      	bhi.n	802b68c <USB_HC_StartXfer+0x254>
 802b62a:	a201      	add	r2, pc, #4	; (adr r2, 802b630 <USB_HC_StartXfer+0x1f8>)
 802b62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b630:	0802b641 	.word	0x0802b641
 802b634:	0802b665 	.word	0x0802b665
 802b638:	0802b641 	.word	0x0802b641
 802b63c:	0802b665 	.word	0x0802b665
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802b640:	68bb      	ldr	r3, [r7, #8]
 802b642:	695b      	ldr	r3, [r3, #20]
 802b644:	3303      	adds	r3, #3
 802b646:	089b      	lsrs	r3, r3, #2
 802b648:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 802b64a:	8afa      	ldrh	r2, [r7, #22]
 802b64c:	68fb      	ldr	r3, [r7, #12]
 802b64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b650:	b29b      	uxth	r3, r3
 802b652:	429a      	cmp	r2, r3
 802b654:	d91c      	bls.n	802b690 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 802b656:	68fb      	ldr	r3, [r7, #12]
 802b658:	699b      	ldr	r3, [r3, #24]
 802b65a:	f043 0220 	orr.w	r2, r3, #32
 802b65e:	68fb      	ldr	r3, [r7, #12]
 802b660:	619a      	str	r2, [r3, #24]
        }
        break;
 802b662:	e015      	b.n	802b690 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802b664:	68bb      	ldr	r3, [r7, #8]
 802b666:	695b      	ldr	r3, [r3, #20]
 802b668:	3303      	adds	r3, #3
 802b66a:	089b      	lsrs	r3, r3, #2
 802b66c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 802b66e:	8afa      	ldrh	r2, [r7, #22]
 802b670:	6a3b      	ldr	r3, [r7, #32]
 802b672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b676:	691b      	ldr	r3, [r3, #16]
 802b678:	b29b      	uxth	r3, r3
 802b67a:	429a      	cmp	r2, r3
 802b67c:	d90a      	bls.n	802b694 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 802b67e:	68fb      	ldr	r3, [r7, #12]
 802b680:	699b      	ldr	r3, [r3, #24]
 802b682:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 802b686:	68fb      	ldr	r3, [r7, #12]
 802b688:	619a      	str	r2, [r3, #24]
        }
        break;
 802b68a:	e003      	b.n	802b694 <USB_HC_StartXfer+0x25c>

      default:
        break;
 802b68c:	bf00      	nop
 802b68e:	e002      	b.n	802b696 <USB_HC_StartXfer+0x25e>
        break;
 802b690:	bf00      	nop
 802b692:	e000      	b.n	802b696 <USB_HC_StartXfer+0x25e>
        break;
 802b694:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 802b696:	68bb      	ldr	r3, [r7, #8]
 802b698:	68d9      	ldr	r1, [r3, #12]
 802b69a:	68bb      	ldr	r3, [r7, #8]
 802b69c:	785a      	ldrb	r2, [r3, #1]
 802b69e:	68bb      	ldr	r3, [r7, #8]
 802b6a0:	695b      	ldr	r3, [r3, #20]
 802b6a2:	b29b      	uxth	r3, r3
 802b6a4:	2000      	movs	r0, #0
 802b6a6:	9000      	str	r0, [sp, #0]
 802b6a8:	68f8      	ldr	r0, [r7, #12]
 802b6aa:	f7ff fb31 	bl	802ad10 <USB_WritePacket>
  }

  return HAL_OK;
 802b6ae:	2300      	movs	r3, #0
}
 802b6b0:	4618      	mov	r0, r3
 802b6b2:	3728      	adds	r7, #40	; 0x28
 802b6b4:	46bd      	mov	sp, r7
 802b6b6:	bd80      	pop	{r7, pc}
 802b6b8:	1ff80000 	.word	0x1ff80000

0802b6bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802b6bc:	b480      	push	{r7}
 802b6be:	b085      	sub	sp, #20
 802b6c0:	af00      	add	r7, sp, #0
 802b6c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b6c4:	687b      	ldr	r3, [r7, #4]
 802b6c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 802b6c8:	68fb      	ldr	r3, [r7, #12]
 802b6ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b6ce:	695b      	ldr	r3, [r3, #20]
 802b6d0:	b29b      	uxth	r3, r3
}
 802b6d2:	4618      	mov	r0, r3
 802b6d4:	3714      	adds	r7, #20
 802b6d6:	46bd      	mov	sp, r7
 802b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b6dc:	4770      	bx	lr

0802b6de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 802b6de:	b480      	push	{r7}
 802b6e0:	b089      	sub	sp, #36	; 0x24
 802b6e2:	af00      	add	r7, sp, #0
 802b6e4:	6078      	str	r0, [r7, #4]
 802b6e6:	460b      	mov	r3, r1
 802b6e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b6ea:	687b      	ldr	r3, [r7, #4]
 802b6ec:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 802b6ee:	78fb      	ldrb	r3, [r7, #3]
 802b6f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 802b6f2:	2300      	movs	r3, #0
 802b6f4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 802b6f6:	69bb      	ldr	r3, [r7, #24]
 802b6f8:	015a      	lsls	r2, r3, #5
 802b6fa:	69fb      	ldr	r3, [r7, #28]
 802b6fc:	4413      	add	r3, r2
 802b6fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b702:	681b      	ldr	r3, [r3, #0]
 802b704:	0c9b      	lsrs	r3, r3, #18
 802b706:	f003 0303 	and.w	r3, r3, #3
 802b70a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 802b70c:	69bb      	ldr	r3, [r7, #24]
 802b70e:	015a      	lsls	r2, r3, #5
 802b710:	69fb      	ldr	r3, [r7, #28]
 802b712:	4413      	add	r3, r2
 802b714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b718:	681b      	ldr	r3, [r3, #0]
 802b71a:	0fdb      	lsrs	r3, r3, #31
 802b71c:	f003 0301 	and.w	r3, r3, #1
 802b720:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 802b722:	687b      	ldr	r3, [r7, #4]
 802b724:	689b      	ldr	r3, [r3, #8]
 802b726:	f003 0320 	and.w	r3, r3, #32
 802b72a:	2b20      	cmp	r3, #32
 802b72c:	d104      	bne.n	802b738 <USB_HC_Halt+0x5a>
 802b72e:	693b      	ldr	r3, [r7, #16]
 802b730:	2b00      	cmp	r3, #0
 802b732:	d101      	bne.n	802b738 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 802b734:	2300      	movs	r3, #0
 802b736:	e0c8      	b.n	802b8ca <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 802b738:	697b      	ldr	r3, [r7, #20]
 802b73a:	2b00      	cmp	r3, #0
 802b73c:	d002      	beq.n	802b744 <USB_HC_Halt+0x66>
 802b73e:	697b      	ldr	r3, [r7, #20]
 802b740:	2b02      	cmp	r3, #2
 802b742:	d163      	bne.n	802b80c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802b744:	69bb      	ldr	r3, [r7, #24]
 802b746:	015a      	lsls	r2, r3, #5
 802b748:	69fb      	ldr	r3, [r7, #28]
 802b74a:	4413      	add	r3, r2
 802b74c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b750:	681b      	ldr	r3, [r3, #0]
 802b752:	69ba      	ldr	r2, [r7, #24]
 802b754:	0151      	lsls	r1, r2, #5
 802b756:	69fa      	ldr	r2, [r7, #28]
 802b758:	440a      	add	r2, r1
 802b75a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b75e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b762:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802b764:	687b      	ldr	r3, [r7, #4]
 802b766:	689b      	ldr	r3, [r3, #8]
 802b768:	f003 0320 	and.w	r3, r3, #32
 802b76c:	2b00      	cmp	r3, #0
 802b76e:	f040 80ab 	bne.w	802b8c8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 802b772:	687b      	ldr	r3, [r7, #4]
 802b774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b776:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802b77a:	2b00      	cmp	r3, #0
 802b77c:	d133      	bne.n	802b7e6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802b77e:	69bb      	ldr	r3, [r7, #24]
 802b780:	015a      	lsls	r2, r3, #5
 802b782:	69fb      	ldr	r3, [r7, #28]
 802b784:	4413      	add	r3, r2
 802b786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b78a:	681b      	ldr	r3, [r3, #0]
 802b78c:	69ba      	ldr	r2, [r7, #24]
 802b78e:	0151      	lsls	r1, r2, #5
 802b790:	69fa      	ldr	r2, [r7, #28]
 802b792:	440a      	add	r2, r1
 802b794:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b798:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b79c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802b79e:	69bb      	ldr	r3, [r7, #24]
 802b7a0:	015a      	lsls	r2, r3, #5
 802b7a2:	69fb      	ldr	r3, [r7, #28]
 802b7a4:	4413      	add	r3, r2
 802b7a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b7aa:	681b      	ldr	r3, [r3, #0]
 802b7ac:	69ba      	ldr	r2, [r7, #24]
 802b7ae:	0151      	lsls	r1, r2, #5
 802b7b0:	69fa      	ldr	r2, [r7, #28]
 802b7b2:	440a      	add	r2, r1
 802b7b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b7b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b7bc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 802b7be:	68fb      	ldr	r3, [r7, #12]
 802b7c0:	3301      	adds	r3, #1
 802b7c2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 802b7c4:	68fb      	ldr	r3, [r7, #12]
 802b7c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b7ca:	d81d      	bhi.n	802b808 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802b7cc:	69bb      	ldr	r3, [r7, #24]
 802b7ce:	015a      	lsls	r2, r3, #5
 802b7d0:	69fb      	ldr	r3, [r7, #28]
 802b7d2:	4413      	add	r3, r2
 802b7d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b7d8:	681b      	ldr	r3, [r3, #0]
 802b7da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802b7de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802b7e2:	d0ec      	beq.n	802b7be <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802b7e4:	e070      	b.n	802b8c8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802b7e6:	69bb      	ldr	r3, [r7, #24]
 802b7e8:	015a      	lsls	r2, r3, #5
 802b7ea:	69fb      	ldr	r3, [r7, #28]
 802b7ec:	4413      	add	r3, r2
 802b7ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b7f2:	681b      	ldr	r3, [r3, #0]
 802b7f4:	69ba      	ldr	r2, [r7, #24]
 802b7f6:	0151      	lsls	r1, r2, #5
 802b7f8:	69fa      	ldr	r2, [r7, #28]
 802b7fa:	440a      	add	r2, r1
 802b7fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b800:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b804:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802b806:	e05f      	b.n	802b8c8 <USB_HC_Halt+0x1ea>
            break;
 802b808:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802b80a:	e05d      	b.n	802b8c8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802b80c:	69bb      	ldr	r3, [r7, #24]
 802b80e:	015a      	lsls	r2, r3, #5
 802b810:	69fb      	ldr	r3, [r7, #28]
 802b812:	4413      	add	r3, r2
 802b814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b818:	681b      	ldr	r3, [r3, #0]
 802b81a:	69ba      	ldr	r2, [r7, #24]
 802b81c:	0151      	lsls	r1, r2, #5
 802b81e:	69fa      	ldr	r2, [r7, #28]
 802b820:	440a      	add	r2, r1
 802b822:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b826:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b82a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 802b82c:	69fb      	ldr	r3, [r7, #28]
 802b82e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b832:	691b      	ldr	r3, [r3, #16]
 802b834:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802b838:	2b00      	cmp	r3, #0
 802b83a:	d133      	bne.n	802b8a4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802b83c:	69bb      	ldr	r3, [r7, #24]
 802b83e:	015a      	lsls	r2, r3, #5
 802b840:	69fb      	ldr	r3, [r7, #28]
 802b842:	4413      	add	r3, r2
 802b844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b848:	681b      	ldr	r3, [r3, #0]
 802b84a:	69ba      	ldr	r2, [r7, #24]
 802b84c:	0151      	lsls	r1, r2, #5
 802b84e:	69fa      	ldr	r2, [r7, #28]
 802b850:	440a      	add	r2, r1
 802b852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b856:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b85a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802b85c:	69bb      	ldr	r3, [r7, #24]
 802b85e:	015a      	lsls	r2, r3, #5
 802b860:	69fb      	ldr	r3, [r7, #28]
 802b862:	4413      	add	r3, r2
 802b864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b868:	681b      	ldr	r3, [r3, #0]
 802b86a:	69ba      	ldr	r2, [r7, #24]
 802b86c:	0151      	lsls	r1, r2, #5
 802b86e:	69fa      	ldr	r2, [r7, #28]
 802b870:	440a      	add	r2, r1
 802b872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b87a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 802b87c:	68fb      	ldr	r3, [r7, #12]
 802b87e:	3301      	adds	r3, #1
 802b880:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 802b882:	68fb      	ldr	r3, [r7, #12]
 802b884:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b888:	d81d      	bhi.n	802b8c6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802b88a:	69bb      	ldr	r3, [r7, #24]
 802b88c:	015a      	lsls	r2, r3, #5
 802b88e:	69fb      	ldr	r3, [r7, #28]
 802b890:	4413      	add	r3, r2
 802b892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b896:	681b      	ldr	r3, [r3, #0]
 802b898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802b89c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802b8a0:	d0ec      	beq.n	802b87c <USB_HC_Halt+0x19e>
 802b8a2:	e011      	b.n	802b8c8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802b8a4:	69bb      	ldr	r3, [r7, #24]
 802b8a6:	015a      	lsls	r2, r3, #5
 802b8a8:	69fb      	ldr	r3, [r7, #28]
 802b8aa:	4413      	add	r3, r2
 802b8ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b8b0:	681b      	ldr	r3, [r3, #0]
 802b8b2:	69ba      	ldr	r2, [r7, #24]
 802b8b4:	0151      	lsls	r1, r2, #5
 802b8b6:	69fa      	ldr	r2, [r7, #28]
 802b8b8:	440a      	add	r2, r1
 802b8ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b8be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b8c2:	6013      	str	r3, [r2, #0]
 802b8c4:	e000      	b.n	802b8c8 <USB_HC_Halt+0x1ea>
          break;
 802b8c6:	bf00      	nop
    }
  }

  return HAL_OK;
 802b8c8:	2300      	movs	r3, #0
}
 802b8ca:	4618      	mov	r0, r3
 802b8cc:	3724      	adds	r7, #36	; 0x24
 802b8ce:	46bd      	mov	sp, r7
 802b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b8d4:	4770      	bx	lr
	...

0802b8d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 802b8d8:	b480      	push	{r7}
 802b8da:	b087      	sub	sp, #28
 802b8dc:	af00      	add	r7, sp, #0
 802b8de:	6078      	str	r0, [r7, #4]
 802b8e0:	460b      	mov	r3, r1
 802b8e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b8e4:	687b      	ldr	r3, [r7, #4]
 802b8e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 802b8e8:	78fb      	ldrb	r3, [r7, #3]
 802b8ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 802b8ec:	2301      	movs	r3, #1
 802b8ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802b8f0:	68fb      	ldr	r3, [r7, #12]
 802b8f2:	04da      	lsls	r2, r3, #19
 802b8f4:	4b15      	ldr	r3, [pc, #84]	; (802b94c <USB_DoPing+0x74>)
 802b8f6:	4013      	ands	r3, r2
 802b8f8:	693a      	ldr	r2, [r7, #16]
 802b8fa:	0151      	lsls	r1, r2, #5
 802b8fc:	697a      	ldr	r2, [r7, #20]
 802b8fe:	440a      	add	r2, r1
 802b900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b908:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 802b90a:	693b      	ldr	r3, [r7, #16]
 802b90c:	015a      	lsls	r2, r3, #5
 802b90e:	697b      	ldr	r3, [r7, #20]
 802b910:	4413      	add	r3, r2
 802b912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b916:	681b      	ldr	r3, [r3, #0]
 802b918:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802b91a:	68bb      	ldr	r3, [r7, #8]
 802b91c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802b920:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802b922:	68bb      	ldr	r3, [r7, #8]
 802b924:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b928:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 802b92a:	693b      	ldr	r3, [r7, #16]
 802b92c:	015a      	lsls	r2, r3, #5
 802b92e:	697b      	ldr	r3, [r7, #20]
 802b930:	4413      	add	r3, r2
 802b932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b936:	461a      	mov	r2, r3
 802b938:	68bb      	ldr	r3, [r7, #8]
 802b93a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 802b93c:	2300      	movs	r3, #0
}
 802b93e:	4618      	mov	r0, r3
 802b940:	371c      	adds	r7, #28
 802b942:	46bd      	mov	sp, r7
 802b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b948:	4770      	bx	lr
 802b94a:	bf00      	nop
 802b94c:	1ff80000 	.word	0x1ff80000

0802b950 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 802b950:	b580      	push	{r7, lr}
 802b952:	b088      	sub	sp, #32
 802b954:	af00      	add	r7, sp, #0
 802b956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 802b958:	2300      	movs	r3, #0
 802b95a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b95c:	687b      	ldr	r3, [r7, #4]
 802b95e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 802b960:	2300      	movs	r3, #0
 802b962:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 802b964:	6878      	ldr	r0, [r7, #4]
 802b966:	f7ff f911 	bl	802ab8c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802b96a:	2110      	movs	r1, #16
 802b96c:	6878      	ldr	r0, [r7, #4]
 802b96e:	f7ff f96b 	bl	802ac48 <USB_FlushTxFifo>
 802b972:	4603      	mov	r3, r0
 802b974:	2b00      	cmp	r3, #0
 802b976:	d001      	beq.n	802b97c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 802b978:	2301      	movs	r3, #1
 802b97a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802b97c:	6878      	ldr	r0, [r7, #4]
 802b97e:	f7ff f997 	bl	802acb0 <USB_FlushRxFifo>
 802b982:	4603      	mov	r3, r0
 802b984:	2b00      	cmp	r3, #0
 802b986:	d001      	beq.n	802b98c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 802b988:	2301      	movs	r3, #1
 802b98a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 802b98c:	2300      	movs	r3, #0
 802b98e:	61bb      	str	r3, [r7, #24]
 802b990:	e01f      	b.n	802b9d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 802b992:	69bb      	ldr	r3, [r7, #24]
 802b994:	015a      	lsls	r2, r3, #5
 802b996:	697b      	ldr	r3, [r7, #20]
 802b998:	4413      	add	r3, r2
 802b99a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b99e:	681b      	ldr	r3, [r3, #0]
 802b9a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 802b9a2:	693b      	ldr	r3, [r7, #16]
 802b9a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b9a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 802b9aa:	693b      	ldr	r3, [r7, #16]
 802b9ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b9b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802b9b2:	693b      	ldr	r3, [r7, #16]
 802b9b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802b9b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802b9ba:	69bb      	ldr	r3, [r7, #24]
 802b9bc:	015a      	lsls	r2, r3, #5
 802b9be:	697b      	ldr	r3, [r7, #20]
 802b9c0:	4413      	add	r3, r2
 802b9c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b9c6:	461a      	mov	r2, r3
 802b9c8:	693b      	ldr	r3, [r7, #16]
 802b9ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 802b9cc:	69bb      	ldr	r3, [r7, #24]
 802b9ce:	3301      	adds	r3, #1
 802b9d0:	61bb      	str	r3, [r7, #24]
 802b9d2:	69bb      	ldr	r3, [r7, #24]
 802b9d4:	2b0f      	cmp	r3, #15
 802b9d6:	d9dc      	bls.n	802b992 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 802b9d8:	2300      	movs	r3, #0
 802b9da:	61bb      	str	r3, [r7, #24]
 802b9dc:	e034      	b.n	802ba48 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 802b9de:	69bb      	ldr	r3, [r7, #24]
 802b9e0:	015a      	lsls	r2, r3, #5
 802b9e2:	697b      	ldr	r3, [r7, #20]
 802b9e4:	4413      	add	r3, r2
 802b9e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b9ea:	681b      	ldr	r3, [r3, #0]
 802b9ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 802b9ee:	693b      	ldr	r3, [r7, #16]
 802b9f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b9f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 802b9f6:	693b      	ldr	r3, [r7, #16]
 802b9f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b9fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802b9fe:	693b      	ldr	r3, [r7, #16]
 802ba00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802ba04:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802ba06:	69bb      	ldr	r3, [r7, #24]
 802ba08:	015a      	lsls	r2, r3, #5
 802ba0a:	697b      	ldr	r3, [r7, #20]
 802ba0c:	4413      	add	r3, r2
 802ba0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ba12:	461a      	mov	r2, r3
 802ba14:	693b      	ldr	r3, [r7, #16]
 802ba16:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 802ba18:	68fb      	ldr	r3, [r7, #12]
 802ba1a:	3301      	adds	r3, #1
 802ba1c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 802ba1e:	68fb      	ldr	r3, [r7, #12]
 802ba20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802ba24:	d80c      	bhi.n	802ba40 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802ba26:	69bb      	ldr	r3, [r7, #24]
 802ba28:	015a      	lsls	r2, r3, #5
 802ba2a:	697b      	ldr	r3, [r7, #20]
 802ba2c:	4413      	add	r3, r2
 802ba2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ba32:	681b      	ldr	r3, [r3, #0]
 802ba34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802ba38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802ba3c:	d0ec      	beq.n	802ba18 <USB_StopHost+0xc8>
 802ba3e:	e000      	b.n	802ba42 <USB_StopHost+0xf2>
        break;
 802ba40:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 802ba42:	69bb      	ldr	r3, [r7, #24]
 802ba44:	3301      	adds	r3, #1
 802ba46:	61bb      	str	r3, [r7, #24]
 802ba48:	69bb      	ldr	r3, [r7, #24]
 802ba4a:	2b0f      	cmp	r3, #15
 802ba4c:	d9c7      	bls.n	802b9de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 802ba4e:	697b      	ldr	r3, [r7, #20]
 802ba50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802ba54:	461a      	mov	r2, r3
 802ba56:	f04f 33ff 	mov.w	r3, #4294967295
 802ba5a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 802ba5c:	687b      	ldr	r3, [r7, #4]
 802ba5e:	f04f 32ff 	mov.w	r2, #4294967295
 802ba62:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 802ba64:	6878      	ldr	r0, [r7, #4]
 802ba66:	f7ff f880 	bl	802ab6a <USB_EnableGlobalInt>

  return ret;
 802ba6a:	7ffb      	ldrb	r3, [r7, #31]
}
 802ba6c:	4618      	mov	r0, r3
 802ba6e:	3720      	adds	r7, #32
 802ba70:	46bd      	mov	sp, r7
 802ba72:	bd80      	pop	{r7, pc}

0802ba74 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 802ba74:	b590      	push	{r4, r7, lr}
 802ba76:	b089      	sub	sp, #36	; 0x24
 802ba78:	af04      	add	r7, sp, #16
 802ba7a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 802ba7c:	2301      	movs	r3, #1
 802ba7e:	2202      	movs	r2, #2
 802ba80:	2102      	movs	r1, #2
 802ba82:	6878      	ldr	r0, [r7, #4]
 802ba84:	f000 fc66 	bl	802c354 <USBH_FindInterface>
 802ba88:	4603      	mov	r3, r0
 802ba8a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802ba8c:	7bfb      	ldrb	r3, [r7, #15]
 802ba8e:	2bff      	cmp	r3, #255	; 0xff
 802ba90:	d002      	beq.n	802ba98 <USBH_CDC_InterfaceInit+0x24>
 802ba92:	7bfb      	ldrb	r3, [r7, #15]
 802ba94:	2b01      	cmp	r3, #1
 802ba96:	d901      	bls.n	802ba9c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802ba98:	2302      	movs	r3, #2
 802ba9a:	e13d      	b.n	802bd18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 802ba9c:	7bfb      	ldrb	r3, [r7, #15]
 802ba9e:	4619      	mov	r1, r3
 802baa0:	6878      	ldr	r0, [r7, #4]
 802baa2:	f000 fc3b 	bl	802c31c <USBH_SelectInterface>
 802baa6:	4603      	mov	r3, r0
 802baa8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 802baaa:	7bbb      	ldrb	r3, [r7, #14]
 802baac:	2b00      	cmp	r3, #0
 802baae:	d001      	beq.n	802bab4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 802bab0:	2302      	movs	r3, #2
 802bab2:	e131      	b.n	802bd18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 802bab4:	687b      	ldr	r3, [r7, #4]
 802bab6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 802baba:	2050      	movs	r0, #80	; 0x50
 802babc:	f002 fb00 	bl	802e0c0 <malloc>
 802bac0:	4603      	mov	r3, r0
 802bac2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802bac4:	687b      	ldr	r3, [r7, #4]
 802bac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802baca:	69db      	ldr	r3, [r3, #28]
 802bacc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 802bace:	68bb      	ldr	r3, [r7, #8]
 802bad0:	2b00      	cmp	r3, #0
 802bad2:	d101      	bne.n	802bad8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 802bad4:	2302      	movs	r3, #2
 802bad6:	e11f      	b.n	802bd18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 802bad8:	2250      	movs	r2, #80	; 0x50
 802bada:	2100      	movs	r1, #0
 802badc:	68b8      	ldr	r0, [r7, #8]
 802bade:	f002 faff 	bl	802e0e0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802bae2:	7bfb      	ldrb	r3, [r7, #15]
 802bae4:	687a      	ldr	r2, [r7, #4]
 802bae6:	211a      	movs	r1, #26
 802bae8:	fb01 f303 	mul.w	r3, r1, r3
 802baec:	4413      	add	r3, r2
 802baee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802baf2:	781b      	ldrb	r3, [r3, #0]
 802baf4:	b25b      	sxtb	r3, r3
 802baf6:	2b00      	cmp	r3, #0
 802baf8:	da15      	bge.n	802bb26 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802bafa:	7bfb      	ldrb	r3, [r7, #15]
 802bafc:	687a      	ldr	r2, [r7, #4]
 802bafe:	211a      	movs	r1, #26
 802bb00:	fb01 f303 	mul.w	r3, r1, r3
 802bb04:	4413      	add	r3, r2
 802bb06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802bb0a:	781a      	ldrb	r2, [r3, #0]
 802bb0c:	68bb      	ldr	r3, [r7, #8]
 802bb0e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802bb10:	7bfb      	ldrb	r3, [r7, #15]
 802bb12:	687a      	ldr	r2, [r7, #4]
 802bb14:	211a      	movs	r1, #26
 802bb16:	fb01 f303 	mul.w	r3, r1, r3
 802bb1a:	4413      	add	r3, r2
 802bb1c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802bb20:	881a      	ldrh	r2, [r3, #0]
 802bb22:	68bb      	ldr	r3, [r7, #8]
 802bb24:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 802bb26:	68bb      	ldr	r3, [r7, #8]
 802bb28:	785b      	ldrb	r3, [r3, #1]
 802bb2a:	4619      	mov	r1, r3
 802bb2c:	6878      	ldr	r0, [r7, #4]
 802bb2e:	f001 ff2c 	bl	802d98a <USBH_AllocPipe>
 802bb32:	4603      	mov	r3, r0
 802bb34:	461a      	mov	r2, r3
 802bb36:	68bb      	ldr	r3, [r7, #8]
 802bb38:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 802bb3a:	68bb      	ldr	r3, [r7, #8]
 802bb3c:	7819      	ldrb	r1, [r3, #0]
 802bb3e:	68bb      	ldr	r3, [r7, #8]
 802bb40:	7858      	ldrb	r0, [r3, #1]
 802bb42:	687b      	ldr	r3, [r7, #4]
 802bb44:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802bb48:	687b      	ldr	r3, [r7, #4]
 802bb4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802bb4e:	68ba      	ldr	r2, [r7, #8]
 802bb50:	8952      	ldrh	r2, [r2, #10]
 802bb52:	9202      	str	r2, [sp, #8]
 802bb54:	2203      	movs	r2, #3
 802bb56:	9201      	str	r2, [sp, #4]
 802bb58:	9300      	str	r3, [sp, #0]
 802bb5a:	4623      	mov	r3, r4
 802bb5c:	4602      	mov	r2, r0
 802bb5e:	6878      	ldr	r0, [r7, #4]
 802bb60:	f001 fee4 	bl	802d92c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 802bb64:	68bb      	ldr	r3, [r7, #8]
 802bb66:	781b      	ldrb	r3, [r3, #0]
 802bb68:	2200      	movs	r2, #0
 802bb6a:	4619      	mov	r1, r3
 802bb6c:	6878      	ldr	r0, [r7, #4]
 802bb6e:	f002 f9f9 	bl	802df64 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 802bb72:	2300      	movs	r3, #0
 802bb74:	2200      	movs	r2, #0
 802bb76:	210a      	movs	r1, #10
 802bb78:	6878      	ldr	r0, [r7, #4]
 802bb7a:	f000 fbeb 	bl	802c354 <USBH_FindInterface>
 802bb7e:	4603      	mov	r3, r0
 802bb80:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802bb82:	7bfb      	ldrb	r3, [r7, #15]
 802bb84:	2bff      	cmp	r3, #255	; 0xff
 802bb86:	d002      	beq.n	802bb8e <USBH_CDC_InterfaceInit+0x11a>
 802bb88:	7bfb      	ldrb	r3, [r7, #15]
 802bb8a:	2b01      	cmp	r3, #1
 802bb8c:	d901      	bls.n	802bb92 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802bb8e:	2302      	movs	r3, #2
 802bb90:	e0c2      	b.n	802bd18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802bb92:	7bfb      	ldrb	r3, [r7, #15]
 802bb94:	687a      	ldr	r2, [r7, #4]
 802bb96:	211a      	movs	r1, #26
 802bb98:	fb01 f303 	mul.w	r3, r1, r3
 802bb9c:	4413      	add	r3, r2
 802bb9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802bba2:	781b      	ldrb	r3, [r3, #0]
 802bba4:	b25b      	sxtb	r3, r3
 802bba6:	2b00      	cmp	r3, #0
 802bba8:	da16      	bge.n	802bbd8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802bbaa:	7bfb      	ldrb	r3, [r7, #15]
 802bbac:	687a      	ldr	r2, [r7, #4]
 802bbae:	211a      	movs	r1, #26
 802bbb0:	fb01 f303 	mul.w	r3, r1, r3
 802bbb4:	4413      	add	r3, r2
 802bbb6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802bbba:	781a      	ldrb	r2, [r3, #0]
 802bbbc:	68bb      	ldr	r3, [r7, #8]
 802bbbe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802bbc0:	7bfb      	ldrb	r3, [r7, #15]
 802bbc2:	687a      	ldr	r2, [r7, #4]
 802bbc4:	211a      	movs	r1, #26
 802bbc6:	fb01 f303 	mul.w	r3, r1, r3
 802bbca:	4413      	add	r3, r2
 802bbcc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802bbd0:	881a      	ldrh	r2, [r3, #0]
 802bbd2:	68bb      	ldr	r3, [r7, #8]
 802bbd4:	835a      	strh	r2, [r3, #26]
 802bbd6:	e015      	b.n	802bc04 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802bbd8:	7bfb      	ldrb	r3, [r7, #15]
 802bbda:	687a      	ldr	r2, [r7, #4]
 802bbdc:	211a      	movs	r1, #26
 802bbde:	fb01 f303 	mul.w	r3, r1, r3
 802bbe2:	4413      	add	r3, r2
 802bbe4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802bbe8:	781a      	ldrb	r2, [r3, #0]
 802bbea:	68bb      	ldr	r3, [r7, #8]
 802bbec:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802bbee:	7bfb      	ldrb	r3, [r7, #15]
 802bbf0:	687a      	ldr	r2, [r7, #4]
 802bbf2:	211a      	movs	r1, #26
 802bbf4:	fb01 f303 	mul.w	r3, r1, r3
 802bbf8:	4413      	add	r3, r2
 802bbfa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802bbfe:	881a      	ldrh	r2, [r3, #0]
 802bc00:	68bb      	ldr	r3, [r7, #8]
 802bc02:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 802bc04:	7bfb      	ldrb	r3, [r7, #15]
 802bc06:	687a      	ldr	r2, [r7, #4]
 802bc08:	211a      	movs	r1, #26
 802bc0a:	fb01 f303 	mul.w	r3, r1, r3
 802bc0e:	4413      	add	r3, r2
 802bc10:	f203 3356 	addw	r3, r3, #854	; 0x356
 802bc14:	781b      	ldrb	r3, [r3, #0]
 802bc16:	b25b      	sxtb	r3, r3
 802bc18:	2b00      	cmp	r3, #0
 802bc1a:	da16      	bge.n	802bc4a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802bc1c:	7bfb      	ldrb	r3, [r7, #15]
 802bc1e:	687a      	ldr	r2, [r7, #4]
 802bc20:	211a      	movs	r1, #26
 802bc22:	fb01 f303 	mul.w	r3, r1, r3
 802bc26:	4413      	add	r3, r2
 802bc28:	f203 3356 	addw	r3, r3, #854	; 0x356
 802bc2c:	781a      	ldrb	r2, [r3, #0]
 802bc2e:	68bb      	ldr	r3, [r7, #8]
 802bc30:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802bc32:	7bfb      	ldrb	r3, [r7, #15]
 802bc34:	687a      	ldr	r2, [r7, #4]
 802bc36:	211a      	movs	r1, #26
 802bc38:	fb01 f303 	mul.w	r3, r1, r3
 802bc3c:	4413      	add	r3, r2
 802bc3e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802bc42:	881a      	ldrh	r2, [r3, #0]
 802bc44:	68bb      	ldr	r3, [r7, #8]
 802bc46:	835a      	strh	r2, [r3, #26]
 802bc48:	e015      	b.n	802bc76 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802bc4a:	7bfb      	ldrb	r3, [r7, #15]
 802bc4c:	687a      	ldr	r2, [r7, #4]
 802bc4e:	211a      	movs	r1, #26
 802bc50:	fb01 f303 	mul.w	r3, r1, r3
 802bc54:	4413      	add	r3, r2
 802bc56:	f203 3356 	addw	r3, r3, #854	; 0x356
 802bc5a:	781a      	ldrb	r2, [r3, #0]
 802bc5c:	68bb      	ldr	r3, [r7, #8]
 802bc5e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802bc60:	7bfb      	ldrb	r3, [r7, #15]
 802bc62:	687a      	ldr	r2, [r7, #4]
 802bc64:	211a      	movs	r1, #26
 802bc66:	fb01 f303 	mul.w	r3, r1, r3
 802bc6a:	4413      	add	r3, r2
 802bc6c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802bc70:	881a      	ldrh	r2, [r3, #0]
 802bc72:	68bb      	ldr	r3, [r7, #8]
 802bc74:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 802bc76:	68bb      	ldr	r3, [r7, #8]
 802bc78:	7b9b      	ldrb	r3, [r3, #14]
 802bc7a:	4619      	mov	r1, r3
 802bc7c:	6878      	ldr	r0, [r7, #4]
 802bc7e:	f001 fe84 	bl	802d98a <USBH_AllocPipe>
 802bc82:	4603      	mov	r3, r0
 802bc84:	461a      	mov	r2, r3
 802bc86:	68bb      	ldr	r3, [r7, #8]
 802bc88:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 802bc8a:	68bb      	ldr	r3, [r7, #8]
 802bc8c:	7bdb      	ldrb	r3, [r3, #15]
 802bc8e:	4619      	mov	r1, r3
 802bc90:	6878      	ldr	r0, [r7, #4]
 802bc92:	f001 fe7a 	bl	802d98a <USBH_AllocPipe>
 802bc96:	4603      	mov	r3, r0
 802bc98:	461a      	mov	r2, r3
 802bc9a:	68bb      	ldr	r3, [r7, #8]
 802bc9c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 802bc9e:	68bb      	ldr	r3, [r7, #8]
 802bca0:	7b59      	ldrb	r1, [r3, #13]
 802bca2:	68bb      	ldr	r3, [r7, #8]
 802bca4:	7b98      	ldrb	r0, [r3, #14]
 802bca6:	687b      	ldr	r3, [r7, #4]
 802bca8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802bcac:	687b      	ldr	r3, [r7, #4]
 802bcae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802bcb2:	68ba      	ldr	r2, [r7, #8]
 802bcb4:	8b12      	ldrh	r2, [r2, #24]
 802bcb6:	9202      	str	r2, [sp, #8]
 802bcb8:	2202      	movs	r2, #2
 802bcba:	9201      	str	r2, [sp, #4]
 802bcbc:	9300      	str	r3, [sp, #0]
 802bcbe:	4623      	mov	r3, r4
 802bcc0:	4602      	mov	r2, r0
 802bcc2:	6878      	ldr	r0, [r7, #4]
 802bcc4:	f001 fe32 	bl	802d92c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 802bcc8:	68bb      	ldr	r3, [r7, #8]
 802bcca:	7b19      	ldrb	r1, [r3, #12]
 802bccc:	68bb      	ldr	r3, [r7, #8]
 802bcce:	7bd8      	ldrb	r0, [r3, #15]
 802bcd0:	687b      	ldr	r3, [r7, #4]
 802bcd2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802bcd6:	687b      	ldr	r3, [r7, #4]
 802bcd8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802bcdc:	68ba      	ldr	r2, [r7, #8]
 802bcde:	8b52      	ldrh	r2, [r2, #26]
 802bce0:	9202      	str	r2, [sp, #8]
 802bce2:	2202      	movs	r2, #2
 802bce4:	9201      	str	r2, [sp, #4]
 802bce6:	9300      	str	r3, [sp, #0]
 802bce8:	4623      	mov	r3, r4
 802bcea:	4602      	mov	r2, r0
 802bcec:	6878      	ldr	r0, [r7, #4]
 802bcee:	f001 fe1d 	bl	802d92c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 802bcf2:	68bb      	ldr	r3, [r7, #8]
 802bcf4:	2200      	movs	r2, #0
 802bcf6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 802bcfa:	68bb      	ldr	r3, [r7, #8]
 802bcfc:	7b5b      	ldrb	r3, [r3, #13]
 802bcfe:	2200      	movs	r2, #0
 802bd00:	4619      	mov	r1, r3
 802bd02:	6878      	ldr	r0, [r7, #4]
 802bd04:	f002 f92e 	bl	802df64 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 802bd08:	68bb      	ldr	r3, [r7, #8]
 802bd0a:	7b1b      	ldrb	r3, [r3, #12]
 802bd0c:	2200      	movs	r2, #0
 802bd0e:	4619      	mov	r1, r3
 802bd10:	6878      	ldr	r0, [r7, #4]
 802bd12:	f002 f927 	bl	802df64 <USBH_LL_SetToggle>

  return USBH_OK;
 802bd16:	2300      	movs	r3, #0
}
 802bd18:	4618      	mov	r0, r3
 802bd1a:	3714      	adds	r7, #20
 802bd1c:	46bd      	mov	sp, r7
 802bd1e:	bd90      	pop	{r4, r7, pc}

0802bd20 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 802bd20:	b580      	push	{r7, lr}
 802bd22:	b084      	sub	sp, #16
 802bd24:	af00      	add	r7, sp, #0
 802bd26:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802bd28:	687b      	ldr	r3, [r7, #4]
 802bd2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bd2e:	69db      	ldr	r3, [r3, #28]
 802bd30:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 802bd32:	68fb      	ldr	r3, [r7, #12]
 802bd34:	781b      	ldrb	r3, [r3, #0]
 802bd36:	2b00      	cmp	r3, #0
 802bd38:	d00e      	beq.n	802bd58 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802bd3a:	68fb      	ldr	r3, [r7, #12]
 802bd3c:	781b      	ldrb	r3, [r3, #0]
 802bd3e:	4619      	mov	r1, r3
 802bd40:	6878      	ldr	r0, [r7, #4]
 802bd42:	f001 fe12 	bl	802d96a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802bd46:	68fb      	ldr	r3, [r7, #12]
 802bd48:	781b      	ldrb	r3, [r3, #0]
 802bd4a:	4619      	mov	r1, r3
 802bd4c:	6878      	ldr	r0, [r7, #4]
 802bd4e:	f001 fe3d 	bl	802d9cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 802bd52:	68fb      	ldr	r3, [r7, #12]
 802bd54:	2200      	movs	r2, #0
 802bd56:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 802bd58:	68fb      	ldr	r3, [r7, #12]
 802bd5a:	7b1b      	ldrb	r3, [r3, #12]
 802bd5c:	2b00      	cmp	r3, #0
 802bd5e:	d00e      	beq.n	802bd7e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 802bd60:	68fb      	ldr	r3, [r7, #12]
 802bd62:	7b1b      	ldrb	r3, [r3, #12]
 802bd64:	4619      	mov	r1, r3
 802bd66:	6878      	ldr	r0, [r7, #4]
 802bd68:	f001 fdff 	bl	802d96a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 802bd6c:	68fb      	ldr	r3, [r7, #12]
 802bd6e:	7b1b      	ldrb	r3, [r3, #12]
 802bd70:	4619      	mov	r1, r3
 802bd72:	6878      	ldr	r0, [r7, #4]
 802bd74:	f001 fe2a 	bl	802d9cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 802bd78:	68fb      	ldr	r3, [r7, #12]
 802bd7a:	2200      	movs	r2, #0
 802bd7c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 802bd7e:	68fb      	ldr	r3, [r7, #12]
 802bd80:	7b5b      	ldrb	r3, [r3, #13]
 802bd82:	2b00      	cmp	r3, #0
 802bd84:	d00e      	beq.n	802bda4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 802bd86:	68fb      	ldr	r3, [r7, #12]
 802bd88:	7b5b      	ldrb	r3, [r3, #13]
 802bd8a:	4619      	mov	r1, r3
 802bd8c:	6878      	ldr	r0, [r7, #4]
 802bd8e:	f001 fdec 	bl	802d96a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 802bd92:	68fb      	ldr	r3, [r7, #12]
 802bd94:	7b5b      	ldrb	r3, [r3, #13]
 802bd96:	4619      	mov	r1, r3
 802bd98:	6878      	ldr	r0, [r7, #4]
 802bd9a:	f001 fe17 	bl	802d9cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 802bd9e:	68fb      	ldr	r3, [r7, #12]
 802bda0:	2200      	movs	r2, #0
 802bda2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 802bda4:	687b      	ldr	r3, [r7, #4]
 802bda6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bdaa:	69db      	ldr	r3, [r3, #28]
 802bdac:	2b00      	cmp	r3, #0
 802bdae:	d00b      	beq.n	802bdc8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 802bdb0:	687b      	ldr	r3, [r7, #4]
 802bdb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bdb6:	69db      	ldr	r3, [r3, #28]
 802bdb8:	4618      	mov	r0, r3
 802bdba:	f002 f989 	bl	802e0d0 <free>
    phost->pActiveClass->pData = 0U;
 802bdbe:	687b      	ldr	r3, [r7, #4]
 802bdc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bdc4:	2200      	movs	r2, #0
 802bdc6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 802bdc8:	2300      	movs	r3, #0
}
 802bdca:	4618      	mov	r0, r3
 802bdcc:	3710      	adds	r7, #16
 802bdce:	46bd      	mov	sp, r7
 802bdd0:	bd80      	pop	{r7, pc}

0802bdd2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 802bdd2:	b580      	push	{r7, lr}
 802bdd4:	b084      	sub	sp, #16
 802bdd6:	af00      	add	r7, sp, #0
 802bdd8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802bdda:	687b      	ldr	r3, [r7, #4]
 802bddc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bde0:	69db      	ldr	r3, [r3, #28]
 802bde2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 802bde4:	68fb      	ldr	r3, [r7, #12]
 802bde6:	3340      	adds	r3, #64	; 0x40
 802bde8:	4619      	mov	r1, r3
 802bdea:	6878      	ldr	r0, [r7, #4]
 802bdec:	f000 f8b1 	bl	802bf52 <GetLineCoding>
 802bdf0:	4603      	mov	r3, r0
 802bdf2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 802bdf4:	7afb      	ldrb	r3, [r7, #11]
 802bdf6:	2b00      	cmp	r3, #0
 802bdf8:	d105      	bne.n	802be06 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 802bdfa:	687b      	ldr	r3, [r7, #4]
 802bdfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802be00:	2102      	movs	r1, #2
 802be02:	6878      	ldr	r0, [r7, #4]
 802be04:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 802be06:	7afb      	ldrb	r3, [r7, #11]
}
 802be08:	4618      	mov	r0, r3
 802be0a:	3710      	adds	r7, #16
 802be0c:	46bd      	mov	sp, r7
 802be0e:	bd80      	pop	{r7, pc}

0802be10 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 802be10:	b580      	push	{r7, lr}
 802be12:	b084      	sub	sp, #16
 802be14:	af00      	add	r7, sp, #0
 802be16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 802be18:	2301      	movs	r3, #1
 802be1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 802be1c:	2300      	movs	r3, #0
 802be1e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802be20:	687b      	ldr	r3, [r7, #4]
 802be22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802be26:	69db      	ldr	r3, [r3, #28]
 802be28:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 802be2a:	68bb      	ldr	r3, [r7, #8]
 802be2c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802be30:	2b04      	cmp	r3, #4
 802be32:	d877      	bhi.n	802bf24 <USBH_CDC_Process+0x114>
 802be34:	a201      	add	r2, pc, #4	; (adr r2, 802be3c <USBH_CDC_Process+0x2c>)
 802be36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802be3a:	bf00      	nop
 802be3c:	0802be51 	.word	0x0802be51
 802be40:	0802be57 	.word	0x0802be57
 802be44:	0802be87 	.word	0x0802be87
 802be48:	0802befb 	.word	0x0802befb
 802be4c:	0802bf09 	.word	0x0802bf09
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 802be50:	2300      	movs	r3, #0
 802be52:	73fb      	strb	r3, [r7, #15]
      break;
 802be54:	e06d      	b.n	802bf32 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 802be56:	68bb      	ldr	r3, [r7, #8]
 802be58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802be5a:	4619      	mov	r1, r3
 802be5c:	6878      	ldr	r0, [r7, #4]
 802be5e:	f000 f897 	bl	802bf90 <SetLineCoding>
 802be62:	4603      	mov	r3, r0
 802be64:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802be66:	7bbb      	ldrb	r3, [r7, #14]
 802be68:	2b00      	cmp	r3, #0
 802be6a:	d104      	bne.n	802be76 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 802be6c:	68bb      	ldr	r3, [r7, #8]
 802be6e:	2202      	movs	r2, #2
 802be70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802be74:	e058      	b.n	802bf28 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 802be76:	7bbb      	ldrb	r3, [r7, #14]
 802be78:	2b01      	cmp	r3, #1
 802be7a:	d055      	beq.n	802bf28 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 802be7c:	68bb      	ldr	r3, [r7, #8]
 802be7e:	2204      	movs	r2, #4
 802be80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802be84:	e050      	b.n	802bf28 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 802be86:	68bb      	ldr	r3, [r7, #8]
 802be88:	3340      	adds	r3, #64	; 0x40
 802be8a:	4619      	mov	r1, r3
 802be8c:	6878      	ldr	r0, [r7, #4]
 802be8e:	f000 f860 	bl	802bf52 <GetLineCoding>
 802be92:	4603      	mov	r3, r0
 802be94:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802be96:	7bbb      	ldrb	r3, [r7, #14]
 802be98:	2b00      	cmp	r3, #0
 802be9a:	d126      	bne.n	802beea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 802be9c:	68bb      	ldr	r3, [r7, #8]
 802be9e:	2200      	movs	r2, #0
 802bea0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802bea4:	68bb      	ldr	r3, [r7, #8]
 802bea6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 802beaa:	68bb      	ldr	r3, [r7, #8]
 802beac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802beae:	791b      	ldrb	r3, [r3, #4]
 802beb0:	429a      	cmp	r2, r3
 802beb2:	d13b      	bne.n	802bf2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802beb4:	68bb      	ldr	r3, [r7, #8]
 802beb6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 802beba:	68bb      	ldr	r3, [r7, #8]
 802bebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802bebe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802bec0:	429a      	cmp	r2, r3
 802bec2:	d133      	bne.n	802bf2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802bec4:	68bb      	ldr	r3, [r7, #8]
 802bec6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 802beca:	68bb      	ldr	r3, [r7, #8]
 802becc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802bece:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802bed0:	429a      	cmp	r2, r3
 802bed2:	d12b      	bne.n	802bf2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 802bed4:	68bb      	ldr	r3, [r7, #8]
 802bed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802bed8:	68bb      	ldr	r3, [r7, #8]
 802beda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802bedc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802bede:	429a      	cmp	r2, r3
 802bee0:	d124      	bne.n	802bf2c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 802bee2:	6878      	ldr	r0, [r7, #4]
 802bee4:	f000 f958 	bl	802c198 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802bee8:	e020      	b.n	802bf2c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 802beea:	7bbb      	ldrb	r3, [r7, #14]
 802beec:	2b01      	cmp	r3, #1
 802beee:	d01d      	beq.n	802bf2c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 802bef0:	68bb      	ldr	r3, [r7, #8]
 802bef2:	2204      	movs	r2, #4
 802bef4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802bef8:	e018      	b.n	802bf2c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 802befa:	6878      	ldr	r0, [r7, #4]
 802befc:	f000 f867 	bl	802bfce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 802bf00:	6878      	ldr	r0, [r7, #4]
 802bf02:	f000 f8da 	bl	802c0ba <CDC_ProcessReception>
      break;
 802bf06:	e014      	b.n	802bf32 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 802bf08:	2100      	movs	r1, #0
 802bf0a:	6878      	ldr	r0, [r7, #4]
 802bf0c:	f000 ffef 	bl	802ceee <USBH_ClrFeature>
 802bf10:	4603      	mov	r3, r0
 802bf12:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802bf14:	7bbb      	ldrb	r3, [r7, #14]
 802bf16:	2b00      	cmp	r3, #0
 802bf18:	d10a      	bne.n	802bf30 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 802bf1a:	68bb      	ldr	r3, [r7, #8]
 802bf1c:	2200      	movs	r2, #0
 802bf1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 802bf22:	e005      	b.n	802bf30 <USBH_CDC_Process+0x120>

    default:
      break;
 802bf24:	bf00      	nop
 802bf26:	e004      	b.n	802bf32 <USBH_CDC_Process+0x122>
      break;
 802bf28:	bf00      	nop
 802bf2a:	e002      	b.n	802bf32 <USBH_CDC_Process+0x122>
      break;
 802bf2c:	bf00      	nop
 802bf2e:	e000      	b.n	802bf32 <USBH_CDC_Process+0x122>
      break;
 802bf30:	bf00      	nop

  }

  return status;
 802bf32:	7bfb      	ldrb	r3, [r7, #15]
}
 802bf34:	4618      	mov	r0, r3
 802bf36:	3710      	adds	r7, #16
 802bf38:	46bd      	mov	sp, r7
 802bf3a:	bd80      	pop	{r7, pc}

0802bf3c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 802bf3c:	b480      	push	{r7}
 802bf3e:	b083      	sub	sp, #12
 802bf40:	af00      	add	r7, sp, #0
 802bf42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 802bf44:	2300      	movs	r3, #0
}
 802bf46:	4618      	mov	r0, r3
 802bf48:	370c      	adds	r7, #12
 802bf4a:	46bd      	mov	sp, r7
 802bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bf50:	4770      	bx	lr

0802bf52 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 802bf52:	b580      	push	{r7, lr}
 802bf54:	b082      	sub	sp, #8
 802bf56:	af00      	add	r7, sp, #0
 802bf58:	6078      	str	r0, [r7, #4]
 802bf5a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 802bf5c:	687b      	ldr	r3, [r7, #4]
 802bf5e:	22a1      	movs	r2, #161	; 0xa1
 802bf60:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 802bf62:	687b      	ldr	r3, [r7, #4]
 802bf64:	2221      	movs	r2, #33	; 0x21
 802bf66:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802bf68:	687b      	ldr	r3, [r7, #4]
 802bf6a:	2200      	movs	r2, #0
 802bf6c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 802bf6e:	687b      	ldr	r3, [r7, #4]
 802bf70:	2200      	movs	r2, #0
 802bf72:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802bf74:	687b      	ldr	r3, [r7, #4]
 802bf76:	2207      	movs	r2, #7
 802bf78:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802bf7a:	683b      	ldr	r3, [r7, #0]
 802bf7c:	2207      	movs	r2, #7
 802bf7e:	4619      	mov	r1, r3
 802bf80:	6878      	ldr	r0, [r7, #4]
 802bf82:	f001 fa81 	bl	802d488 <USBH_CtlReq>
 802bf86:	4603      	mov	r3, r0
}
 802bf88:	4618      	mov	r0, r3
 802bf8a:	3708      	adds	r7, #8
 802bf8c:	46bd      	mov	sp, r7
 802bf8e:	bd80      	pop	{r7, pc}

0802bf90 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 802bf90:	b580      	push	{r7, lr}
 802bf92:	b082      	sub	sp, #8
 802bf94:	af00      	add	r7, sp, #0
 802bf96:	6078      	str	r0, [r7, #4]
 802bf98:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 802bf9a:	687b      	ldr	r3, [r7, #4]
 802bf9c:	2221      	movs	r2, #33	; 0x21
 802bf9e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 802bfa0:	687b      	ldr	r3, [r7, #4]
 802bfa2:	2220      	movs	r2, #32
 802bfa4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802bfa6:	687b      	ldr	r3, [r7, #4]
 802bfa8:	2200      	movs	r2, #0
 802bfaa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 802bfac:	687b      	ldr	r3, [r7, #4]
 802bfae:	2200      	movs	r2, #0
 802bfb0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802bfb2:	687b      	ldr	r3, [r7, #4]
 802bfb4:	2207      	movs	r2, #7
 802bfb6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802bfb8:	683b      	ldr	r3, [r7, #0]
 802bfba:	2207      	movs	r2, #7
 802bfbc:	4619      	mov	r1, r3
 802bfbe:	6878      	ldr	r0, [r7, #4]
 802bfc0:	f001 fa62 	bl	802d488 <USBH_CtlReq>
 802bfc4:	4603      	mov	r3, r0
}
 802bfc6:	4618      	mov	r0, r3
 802bfc8:	3708      	adds	r7, #8
 802bfca:	46bd      	mov	sp, r7
 802bfcc:	bd80      	pop	{r7, pc}

0802bfce <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 802bfce:	b580      	push	{r7, lr}
 802bfd0:	b086      	sub	sp, #24
 802bfd2:	af02      	add	r7, sp, #8
 802bfd4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802bfd6:	687b      	ldr	r3, [r7, #4]
 802bfd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bfdc:	69db      	ldr	r3, [r3, #28]
 802bfde:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802bfe0:	2300      	movs	r3, #0
 802bfe2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 802bfe4:	68fb      	ldr	r3, [r7, #12]
 802bfe6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802bfea:	2b01      	cmp	r3, #1
 802bfec:	d002      	beq.n	802bff4 <CDC_ProcessTransmission+0x26>
 802bfee:	2b02      	cmp	r3, #2
 802bff0:	d023      	beq.n	802c03a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 802bff2:	e05e      	b.n	802c0b2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802bff4:	68fb      	ldr	r3, [r7, #12]
 802bff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bff8:	68fa      	ldr	r2, [r7, #12]
 802bffa:	8b12      	ldrh	r2, [r2, #24]
 802bffc:	4293      	cmp	r3, r2
 802bffe:	d90b      	bls.n	802c018 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 802c000:	68fb      	ldr	r3, [r7, #12]
 802c002:	69d9      	ldr	r1, [r3, #28]
 802c004:	68fb      	ldr	r3, [r7, #12]
 802c006:	8b1a      	ldrh	r2, [r3, #24]
 802c008:	68fb      	ldr	r3, [r7, #12]
 802c00a:	7b5b      	ldrb	r3, [r3, #13]
 802c00c:	2001      	movs	r0, #1
 802c00e:	9000      	str	r0, [sp, #0]
 802c010:	6878      	ldr	r0, [r7, #4]
 802c012:	f001 fc48 	bl	802d8a6 <USBH_BulkSendData>
 802c016:	e00b      	b.n	802c030 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 802c018:	68fb      	ldr	r3, [r7, #12]
 802c01a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 802c01c:	68fb      	ldr	r3, [r7, #12]
 802c01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 802c020:	b29a      	uxth	r2, r3
 802c022:	68fb      	ldr	r3, [r7, #12]
 802c024:	7b5b      	ldrb	r3, [r3, #13]
 802c026:	2001      	movs	r0, #1
 802c028:	9000      	str	r0, [sp, #0]
 802c02a:	6878      	ldr	r0, [r7, #4]
 802c02c:	f001 fc3b 	bl	802d8a6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 802c030:	68fb      	ldr	r3, [r7, #12]
 802c032:	2202      	movs	r2, #2
 802c034:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802c038:	e03b      	b.n	802c0b2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 802c03a:	68fb      	ldr	r3, [r7, #12]
 802c03c:	7b5b      	ldrb	r3, [r3, #13]
 802c03e:	4619      	mov	r1, r3
 802c040:	6878      	ldr	r0, [r7, #4]
 802c042:	f001 ff65 	bl	802df10 <USBH_LL_GetURBState>
 802c046:	4603      	mov	r3, r0
 802c048:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 802c04a:	7afb      	ldrb	r3, [r7, #11]
 802c04c:	2b01      	cmp	r3, #1
 802c04e:	d128      	bne.n	802c0a2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802c050:	68fb      	ldr	r3, [r7, #12]
 802c052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c054:	68fa      	ldr	r2, [r7, #12]
 802c056:	8b12      	ldrh	r2, [r2, #24]
 802c058:	4293      	cmp	r3, r2
 802c05a:	d90e      	bls.n	802c07a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 802c05c:	68fb      	ldr	r3, [r7, #12]
 802c05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c060:	68fa      	ldr	r2, [r7, #12]
 802c062:	8b12      	ldrh	r2, [r2, #24]
 802c064:	1a9a      	subs	r2, r3, r2
 802c066:	68fb      	ldr	r3, [r7, #12]
 802c068:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 802c06a:	68fb      	ldr	r3, [r7, #12]
 802c06c:	69db      	ldr	r3, [r3, #28]
 802c06e:	68fa      	ldr	r2, [r7, #12]
 802c070:	8b12      	ldrh	r2, [r2, #24]
 802c072:	441a      	add	r2, r3
 802c074:	68fb      	ldr	r3, [r7, #12]
 802c076:	61da      	str	r2, [r3, #28]
 802c078:	e002      	b.n	802c080 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 802c07a:	68fb      	ldr	r3, [r7, #12]
 802c07c:	2200      	movs	r2, #0
 802c07e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 802c080:	68fb      	ldr	r3, [r7, #12]
 802c082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c084:	2b00      	cmp	r3, #0
 802c086:	d004      	beq.n	802c092 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802c088:	68fb      	ldr	r3, [r7, #12]
 802c08a:	2201      	movs	r2, #1
 802c08c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802c090:	e00e      	b.n	802c0b0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 802c092:	68fb      	ldr	r3, [r7, #12]
 802c094:	2200      	movs	r2, #0
 802c096:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 802c09a:	6878      	ldr	r0, [r7, #4]
 802c09c:	f000 f868 	bl	802c170 <USBH_CDC_TransmitCallback>
      break;
 802c0a0:	e006      	b.n	802c0b0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 802c0a2:	7afb      	ldrb	r3, [r7, #11]
 802c0a4:	2b02      	cmp	r3, #2
 802c0a6:	d103      	bne.n	802c0b0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802c0a8:	68fb      	ldr	r3, [r7, #12]
 802c0aa:	2201      	movs	r2, #1
 802c0ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802c0b0:	bf00      	nop
  }
}
 802c0b2:	bf00      	nop
 802c0b4:	3710      	adds	r7, #16
 802c0b6:	46bd      	mov	sp, r7
 802c0b8:	bd80      	pop	{r7, pc}

0802c0ba <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 802c0ba:	b580      	push	{r7, lr}
 802c0bc:	b086      	sub	sp, #24
 802c0be:	af00      	add	r7, sp, #0
 802c0c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802c0c2:	687b      	ldr	r3, [r7, #4]
 802c0c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c0c8:	69db      	ldr	r3, [r3, #28]
 802c0ca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802c0cc:	2300      	movs	r3, #0
 802c0ce:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 802c0d0:	697b      	ldr	r3, [r7, #20]
 802c0d2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 802c0d6:	2b03      	cmp	r3, #3
 802c0d8:	d002      	beq.n	802c0e0 <CDC_ProcessReception+0x26>
 802c0da:	2b04      	cmp	r3, #4
 802c0dc:	d00e      	beq.n	802c0fc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 802c0de:	e043      	b.n	802c168 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 802c0e0:	697b      	ldr	r3, [r7, #20]
 802c0e2:	6a19      	ldr	r1, [r3, #32]
 802c0e4:	697b      	ldr	r3, [r7, #20]
 802c0e6:	8b5a      	ldrh	r2, [r3, #26]
 802c0e8:	697b      	ldr	r3, [r7, #20]
 802c0ea:	7b1b      	ldrb	r3, [r3, #12]
 802c0ec:	6878      	ldr	r0, [r7, #4]
 802c0ee:	f001 fbff 	bl	802d8f0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 802c0f2:	697b      	ldr	r3, [r7, #20]
 802c0f4:	2204      	movs	r2, #4
 802c0f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802c0fa:	e035      	b.n	802c168 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 802c0fc:	697b      	ldr	r3, [r7, #20]
 802c0fe:	7b1b      	ldrb	r3, [r3, #12]
 802c100:	4619      	mov	r1, r3
 802c102:	6878      	ldr	r0, [r7, #4]
 802c104:	f001 ff04 	bl	802df10 <USBH_LL_GetURBState>
 802c108:	4603      	mov	r3, r0
 802c10a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 802c10c:	7cfb      	ldrb	r3, [r7, #19]
 802c10e:	2b01      	cmp	r3, #1
 802c110:	d129      	bne.n	802c166 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 802c112:	697b      	ldr	r3, [r7, #20]
 802c114:	7b1b      	ldrb	r3, [r3, #12]
 802c116:	4619      	mov	r1, r3
 802c118:	6878      	ldr	r0, [r7, #4]
 802c11a:	f001 fe67 	bl	802ddec <USBH_LL_GetLastXferSize>
 802c11e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 802c120:	697b      	ldr	r3, [r7, #20]
 802c122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c124:	68fa      	ldr	r2, [r7, #12]
 802c126:	429a      	cmp	r2, r3
 802c128:	d016      	beq.n	802c158 <CDC_ProcessReception+0x9e>
 802c12a:	697b      	ldr	r3, [r7, #20]
 802c12c:	8b5b      	ldrh	r3, [r3, #26]
 802c12e:	461a      	mov	r2, r3
 802c130:	68fb      	ldr	r3, [r7, #12]
 802c132:	4293      	cmp	r3, r2
 802c134:	d910      	bls.n	802c158 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 802c136:	697b      	ldr	r3, [r7, #20]
 802c138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802c13a:	68fb      	ldr	r3, [r7, #12]
 802c13c:	1ad2      	subs	r2, r2, r3
 802c13e:	697b      	ldr	r3, [r7, #20]
 802c140:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 802c142:	697b      	ldr	r3, [r7, #20]
 802c144:	6a1a      	ldr	r2, [r3, #32]
 802c146:	68fb      	ldr	r3, [r7, #12]
 802c148:	441a      	add	r2, r3
 802c14a:	697b      	ldr	r3, [r7, #20]
 802c14c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 802c14e:	697b      	ldr	r3, [r7, #20]
 802c150:	2203      	movs	r2, #3
 802c152:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802c156:	e006      	b.n	802c166 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 802c158:	697b      	ldr	r3, [r7, #20]
 802c15a:	2200      	movs	r2, #0
 802c15c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 802c160:	6878      	ldr	r0, [r7, #4]
 802c162:	f000 f80f 	bl	802c184 <USBH_CDC_ReceiveCallback>
      break;
 802c166:	bf00      	nop
  }
}
 802c168:	bf00      	nop
 802c16a:	3718      	adds	r7, #24
 802c16c:	46bd      	mov	sp, r7
 802c16e:	bd80      	pop	{r7, pc}

0802c170 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 802c170:	b480      	push	{r7}
 802c172:	b083      	sub	sp, #12
 802c174:	af00      	add	r7, sp, #0
 802c176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802c178:	bf00      	nop
 802c17a:	370c      	adds	r7, #12
 802c17c:	46bd      	mov	sp, r7
 802c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c182:	4770      	bx	lr

0802c184 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 802c184:	b480      	push	{r7}
 802c186:	b083      	sub	sp, #12
 802c188:	af00      	add	r7, sp, #0
 802c18a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802c18c:	bf00      	nop
 802c18e:	370c      	adds	r7, #12
 802c190:	46bd      	mov	sp, r7
 802c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c196:	4770      	bx	lr

0802c198 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 802c198:	b480      	push	{r7}
 802c19a:	b083      	sub	sp, #12
 802c19c:	af00      	add	r7, sp, #0
 802c19e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802c1a0:	bf00      	nop
 802c1a2:	370c      	adds	r7, #12
 802c1a4:	46bd      	mov	sp, r7
 802c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c1aa:	4770      	bx	lr

0802c1ac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 802c1ac:	b580      	push	{r7, lr}
 802c1ae:	b084      	sub	sp, #16
 802c1b0:	af00      	add	r7, sp, #0
 802c1b2:	60f8      	str	r0, [r7, #12]
 802c1b4:	60b9      	str	r1, [r7, #8]
 802c1b6:	4613      	mov	r3, r2
 802c1b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 802c1ba:	68fb      	ldr	r3, [r7, #12]
 802c1bc:	2b00      	cmp	r3, #0
 802c1be:	d101      	bne.n	802c1c4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 802c1c0:	2302      	movs	r3, #2
 802c1c2:	e029      	b.n	802c218 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 802c1c4:	68fb      	ldr	r3, [r7, #12]
 802c1c6:	79fa      	ldrb	r2, [r7, #7]
 802c1c8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 802c1cc:	68fb      	ldr	r3, [r7, #12]
 802c1ce:	2200      	movs	r2, #0
 802c1d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 802c1d4:	68fb      	ldr	r3, [r7, #12]
 802c1d6:	2200      	movs	r2, #0
 802c1d8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 802c1dc:	68f8      	ldr	r0, [r7, #12]
 802c1de:	f000 f81f 	bl	802c220 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 802c1e2:	68fb      	ldr	r3, [r7, #12]
 802c1e4:	2200      	movs	r2, #0
 802c1e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 802c1ea:	68fb      	ldr	r3, [r7, #12]
 802c1ec:	2200      	movs	r2, #0
 802c1ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802c1f2:	68fb      	ldr	r3, [r7, #12]
 802c1f4:	2200      	movs	r2, #0
 802c1f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802c1fa:	68fb      	ldr	r3, [r7, #12]
 802c1fc:	2200      	movs	r2, #0
 802c1fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 802c202:	68bb      	ldr	r3, [r7, #8]
 802c204:	2b00      	cmp	r3, #0
 802c206:	d003      	beq.n	802c210 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 802c208:	68fb      	ldr	r3, [r7, #12]
 802c20a:	68ba      	ldr	r2, [r7, #8]
 802c20c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 802c210:	68f8      	ldr	r0, [r7, #12]
 802c212:	f001 fd2d 	bl	802dc70 <USBH_LL_Init>

  return USBH_OK;
 802c216:	2300      	movs	r3, #0
}
 802c218:	4618      	mov	r0, r3
 802c21a:	3710      	adds	r7, #16
 802c21c:	46bd      	mov	sp, r7
 802c21e:	bd80      	pop	{r7, pc}

0802c220 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 802c220:	b480      	push	{r7}
 802c222:	b085      	sub	sp, #20
 802c224:	af00      	add	r7, sp, #0
 802c226:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 802c228:	2300      	movs	r3, #0
 802c22a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802c22c:	2300      	movs	r3, #0
 802c22e:	60fb      	str	r3, [r7, #12]
 802c230:	e009      	b.n	802c246 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 802c232:	687a      	ldr	r2, [r7, #4]
 802c234:	68fb      	ldr	r3, [r7, #12]
 802c236:	33e0      	adds	r3, #224	; 0xe0
 802c238:	009b      	lsls	r3, r3, #2
 802c23a:	4413      	add	r3, r2
 802c23c:	2200      	movs	r2, #0
 802c23e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802c240:	68fb      	ldr	r3, [r7, #12]
 802c242:	3301      	adds	r3, #1
 802c244:	60fb      	str	r3, [r7, #12]
 802c246:	68fb      	ldr	r3, [r7, #12]
 802c248:	2b0f      	cmp	r3, #15
 802c24a:	d9f2      	bls.n	802c232 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802c24c:	2300      	movs	r3, #0
 802c24e:	60fb      	str	r3, [r7, #12]
 802c250:	e009      	b.n	802c266 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 802c252:	687a      	ldr	r2, [r7, #4]
 802c254:	68fb      	ldr	r3, [r7, #12]
 802c256:	4413      	add	r3, r2
 802c258:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802c25c:	2200      	movs	r2, #0
 802c25e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802c260:	68fb      	ldr	r3, [r7, #12]
 802c262:	3301      	adds	r3, #1
 802c264:	60fb      	str	r3, [r7, #12]
 802c266:	68fb      	ldr	r3, [r7, #12]
 802c268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802c26c:	d3f1      	bcc.n	802c252 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 802c26e:	687b      	ldr	r3, [r7, #4]
 802c270:	2200      	movs	r2, #0
 802c272:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 802c274:	687b      	ldr	r3, [r7, #4]
 802c276:	2200      	movs	r2, #0
 802c278:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 802c27a:	687b      	ldr	r3, [r7, #4]
 802c27c:	2201      	movs	r2, #1
 802c27e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 802c280:	687b      	ldr	r3, [r7, #4]
 802c282:	2200      	movs	r2, #0
 802c284:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 802c288:	687b      	ldr	r3, [r7, #4]
 802c28a:	2201      	movs	r2, #1
 802c28c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 802c28e:	687b      	ldr	r3, [r7, #4]
 802c290:	2240      	movs	r2, #64	; 0x40
 802c292:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 802c294:	687b      	ldr	r3, [r7, #4]
 802c296:	2200      	movs	r2, #0
 802c298:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 802c29a:	687b      	ldr	r3, [r7, #4]
 802c29c:	2200      	movs	r2, #0
 802c29e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 802c2a2:	687b      	ldr	r3, [r7, #4]
 802c2a4:	2201      	movs	r2, #1
 802c2a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 802c2aa:	687b      	ldr	r3, [r7, #4]
 802c2ac:	2200      	movs	r2, #0
 802c2ae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 802c2b2:	687b      	ldr	r3, [r7, #4]
 802c2b4:	2200      	movs	r2, #0
 802c2b6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 802c2ba:	2300      	movs	r3, #0
}
 802c2bc:	4618      	mov	r0, r3
 802c2be:	3714      	adds	r7, #20
 802c2c0:	46bd      	mov	sp, r7
 802c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c2c6:	4770      	bx	lr

0802c2c8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 802c2c8:	b480      	push	{r7}
 802c2ca:	b085      	sub	sp, #20
 802c2cc:	af00      	add	r7, sp, #0
 802c2ce:	6078      	str	r0, [r7, #4]
 802c2d0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 802c2d2:	2300      	movs	r3, #0
 802c2d4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 802c2d6:	683b      	ldr	r3, [r7, #0]
 802c2d8:	2b00      	cmp	r3, #0
 802c2da:	d016      	beq.n	802c30a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 802c2dc:	687b      	ldr	r3, [r7, #4]
 802c2de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802c2e2:	2b00      	cmp	r3, #0
 802c2e4:	d10e      	bne.n	802c304 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 802c2e6:	687b      	ldr	r3, [r7, #4]
 802c2e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802c2ec:	1c59      	adds	r1, r3, #1
 802c2ee:	687a      	ldr	r2, [r7, #4]
 802c2f0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 802c2f4:	687a      	ldr	r2, [r7, #4]
 802c2f6:	33de      	adds	r3, #222	; 0xde
 802c2f8:	6839      	ldr	r1, [r7, #0]
 802c2fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 802c2fe:	2300      	movs	r3, #0
 802c300:	73fb      	strb	r3, [r7, #15]
 802c302:	e004      	b.n	802c30e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 802c304:	2302      	movs	r3, #2
 802c306:	73fb      	strb	r3, [r7, #15]
 802c308:	e001      	b.n	802c30e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 802c30a:	2302      	movs	r3, #2
 802c30c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802c30e:	7bfb      	ldrb	r3, [r7, #15]
}
 802c310:	4618      	mov	r0, r3
 802c312:	3714      	adds	r7, #20
 802c314:	46bd      	mov	sp, r7
 802c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c31a:	4770      	bx	lr

0802c31c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 802c31c:	b480      	push	{r7}
 802c31e:	b085      	sub	sp, #20
 802c320:	af00      	add	r7, sp, #0
 802c322:	6078      	str	r0, [r7, #4]
 802c324:	460b      	mov	r3, r1
 802c326:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 802c328:	2300      	movs	r3, #0
 802c32a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 802c32c:	687b      	ldr	r3, [r7, #4]
 802c32e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 802c332:	78fa      	ldrb	r2, [r7, #3]
 802c334:	429a      	cmp	r2, r3
 802c336:	d204      	bcs.n	802c342 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 802c338:	687b      	ldr	r3, [r7, #4]
 802c33a:	78fa      	ldrb	r2, [r7, #3]
 802c33c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 802c340:	e001      	b.n	802c346 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 802c342:	2302      	movs	r3, #2
 802c344:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802c346:	7bfb      	ldrb	r3, [r7, #15]
}
 802c348:	4618      	mov	r0, r3
 802c34a:	3714      	adds	r7, #20
 802c34c:	46bd      	mov	sp, r7
 802c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c352:	4770      	bx	lr

0802c354 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 802c354:	b480      	push	{r7}
 802c356:	b087      	sub	sp, #28
 802c358:	af00      	add	r7, sp, #0
 802c35a:	6078      	str	r0, [r7, #4]
 802c35c:	4608      	mov	r0, r1
 802c35e:	4611      	mov	r1, r2
 802c360:	461a      	mov	r2, r3
 802c362:	4603      	mov	r3, r0
 802c364:	70fb      	strb	r3, [r7, #3]
 802c366:	460b      	mov	r3, r1
 802c368:	70bb      	strb	r3, [r7, #2]
 802c36a:	4613      	mov	r3, r2
 802c36c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 802c36e:	2300      	movs	r3, #0
 802c370:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 802c372:	2300      	movs	r3, #0
 802c374:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 802c376:	687b      	ldr	r3, [r7, #4]
 802c378:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802c37c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802c37e:	e025      	b.n	802c3cc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 802c380:	7dfb      	ldrb	r3, [r7, #23]
 802c382:	221a      	movs	r2, #26
 802c384:	fb02 f303 	mul.w	r3, r2, r3
 802c388:	3308      	adds	r3, #8
 802c38a:	68fa      	ldr	r2, [r7, #12]
 802c38c:	4413      	add	r3, r2
 802c38e:	3302      	adds	r3, #2
 802c390:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802c392:	693b      	ldr	r3, [r7, #16]
 802c394:	795b      	ldrb	r3, [r3, #5]
 802c396:	78fa      	ldrb	r2, [r7, #3]
 802c398:	429a      	cmp	r2, r3
 802c39a:	d002      	beq.n	802c3a2 <USBH_FindInterface+0x4e>
 802c39c:	78fb      	ldrb	r3, [r7, #3]
 802c39e:	2bff      	cmp	r3, #255	; 0xff
 802c3a0:	d111      	bne.n	802c3c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802c3a2:	693b      	ldr	r3, [r7, #16]
 802c3a4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802c3a6:	78ba      	ldrb	r2, [r7, #2]
 802c3a8:	429a      	cmp	r2, r3
 802c3aa:	d002      	beq.n	802c3b2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802c3ac:	78bb      	ldrb	r3, [r7, #2]
 802c3ae:	2bff      	cmp	r3, #255	; 0xff
 802c3b0:	d109      	bne.n	802c3c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802c3b2:	693b      	ldr	r3, [r7, #16]
 802c3b4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802c3b6:	787a      	ldrb	r2, [r7, #1]
 802c3b8:	429a      	cmp	r2, r3
 802c3ba:	d002      	beq.n	802c3c2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802c3bc:	787b      	ldrb	r3, [r7, #1]
 802c3be:	2bff      	cmp	r3, #255	; 0xff
 802c3c0:	d101      	bne.n	802c3c6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 802c3c2:	7dfb      	ldrb	r3, [r7, #23]
 802c3c4:	e006      	b.n	802c3d4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 802c3c6:	7dfb      	ldrb	r3, [r7, #23]
 802c3c8:	3301      	adds	r3, #1
 802c3ca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802c3cc:	7dfb      	ldrb	r3, [r7, #23]
 802c3ce:	2b01      	cmp	r3, #1
 802c3d0:	d9d6      	bls.n	802c380 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 802c3d2:	23ff      	movs	r3, #255	; 0xff
}
 802c3d4:	4618      	mov	r0, r3
 802c3d6:	371c      	adds	r7, #28
 802c3d8:	46bd      	mov	sp, r7
 802c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c3de:	4770      	bx	lr

0802c3e0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 802c3e0:	b580      	push	{r7, lr}
 802c3e2:	b082      	sub	sp, #8
 802c3e4:	af00      	add	r7, sp, #0
 802c3e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 802c3e8:	6878      	ldr	r0, [r7, #4]
 802c3ea:	f001 fc87 	bl	802dcfc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 802c3ee:	2101      	movs	r1, #1
 802c3f0:	6878      	ldr	r0, [r7, #4]
 802c3f2:	f001 fda0 	bl	802df36 <USBH_LL_DriverVBUS>

  return USBH_OK;
 802c3f6:	2300      	movs	r3, #0
}
 802c3f8:	4618      	mov	r0, r3
 802c3fa:	3708      	adds	r7, #8
 802c3fc:	46bd      	mov	sp, r7
 802c3fe:	bd80      	pop	{r7, pc}

0802c400 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 802c400:	b580      	push	{r7, lr}
 802c402:	b088      	sub	sp, #32
 802c404:	af04      	add	r7, sp, #16
 802c406:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 802c408:	2302      	movs	r3, #2
 802c40a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 802c40c:	2300      	movs	r3, #0
 802c40e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 802c410:	687b      	ldr	r3, [r7, #4]
 802c412:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 802c416:	b2db      	uxtb	r3, r3
 802c418:	2b01      	cmp	r3, #1
 802c41a:	d102      	bne.n	802c422 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 802c41c:	687b      	ldr	r3, [r7, #4]
 802c41e:	2203      	movs	r2, #3
 802c420:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 802c422:	687b      	ldr	r3, [r7, #4]
 802c424:	781b      	ldrb	r3, [r3, #0]
 802c426:	b2db      	uxtb	r3, r3
 802c428:	2b0b      	cmp	r3, #11
 802c42a:	f200 81be 	bhi.w	802c7aa <USBH_Process+0x3aa>
 802c42e:	a201      	add	r2, pc, #4	; (adr r2, 802c434 <USBH_Process+0x34>)
 802c430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c434:	0802c465 	.word	0x0802c465
 802c438:	0802c497 	.word	0x0802c497
 802c43c:	0802c4ff 	.word	0x0802c4ff
 802c440:	0802c745 	.word	0x0802c745
 802c444:	0802c7ab 	.word	0x0802c7ab
 802c448:	0802c5a3 	.word	0x0802c5a3
 802c44c:	0802c6eb 	.word	0x0802c6eb
 802c450:	0802c5d9 	.word	0x0802c5d9
 802c454:	0802c5f9 	.word	0x0802c5f9
 802c458:	0802c619 	.word	0x0802c619
 802c45c:	0802c65d 	.word	0x0802c65d
 802c460:	0802c72d 	.word	0x0802c72d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 802c464:	687b      	ldr	r3, [r7, #4]
 802c466:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802c46a:	b2db      	uxtb	r3, r3
 802c46c:	2b00      	cmp	r3, #0
 802c46e:	f000 819e 	beq.w	802c7ae <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 802c472:	687b      	ldr	r3, [r7, #4]
 802c474:	2201      	movs	r2, #1
 802c476:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 802c478:	20c8      	movs	r0, #200	; 0xc8
 802c47a:	f001 fda3 	bl	802dfc4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 802c47e:	6878      	ldr	r0, [r7, #4]
 802c480:	f001 fc99 	bl	802ddb6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 802c484:	687b      	ldr	r3, [r7, #4]
 802c486:	2200      	movs	r2, #0
 802c488:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 802c48c:	687b      	ldr	r3, [r7, #4]
 802c48e:	2200      	movs	r2, #0
 802c490:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802c494:	e18b      	b.n	802c7ae <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 802c496:	687b      	ldr	r3, [r7, #4]
 802c498:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 802c49c:	2b01      	cmp	r3, #1
 802c49e:	d107      	bne.n	802c4b0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 802c4a0:	687b      	ldr	r3, [r7, #4]
 802c4a2:	2200      	movs	r2, #0
 802c4a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 802c4a8:	687b      	ldr	r3, [r7, #4]
 802c4aa:	2202      	movs	r2, #2
 802c4ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c4ae:	e18d      	b.n	802c7cc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 802c4b0:	687b      	ldr	r3, [r7, #4]
 802c4b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802c4b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802c4ba:	d914      	bls.n	802c4e6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 802c4bc:	687b      	ldr	r3, [r7, #4]
 802c4be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802c4c2:	3301      	adds	r3, #1
 802c4c4:	b2da      	uxtb	r2, r3
 802c4c6:	687b      	ldr	r3, [r7, #4]
 802c4c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 802c4cc:	687b      	ldr	r3, [r7, #4]
 802c4ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802c4d2:	2b03      	cmp	r3, #3
 802c4d4:	d903      	bls.n	802c4de <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 802c4d6:	687b      	ldr	r3, [r7, #4]
 802c4d8:	220d      	movs	r2, #13
 802c4da:	701a      	strb	r2, [r3, #0]
      break;
 802c4dc:	e176      	b.n	802c7cc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 802c4de:	687b      	ldr	r3, [r7, #4]
 802c4e0:	2200      	movs	r2, #0
 802c4e2:	701a      	strb	r2, [r3, #0]
      break;
 802c4e4:	e172      	b.n	802c7cc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 802c4e6:	687b      	ldr	r3, [r7, #4]
 802c4e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802c4ec:	f103 020a 	add.w	r2, r3, #10
 802c4f0:	687b      	ldr	r3, [r7, #4]
 802c4f2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 802c4f6:	200a      	movs	r0, #10
 802c4f8:	f001 fd64 	bl	802dfc4 <USBH_Delay>
      break;
 802c4fc:	e166      	b.n	802c7cc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 802c4fe:	687b      	ldr	r3, [r7, #4]
 802c500:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c504:	2b00      	cmp	r3, #0
 802c506:	d005      	beq.n	802c514 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 802c508:	687b      	ldr	r3, [r7, #4]
 802c50a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c50e:	2104      	movs	r1, #4
 802c510:	6878      	ldr	r0, [r7, #4]
 802c512:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 802c514:	2064      	movs	r0, #100	; 0x64
 802c516:	f001 fd55 	bl	802dfc4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 802c51a:	6878      	ldr	r0, [r7, #4]
 802c51c:	f001 fc24 	bl	802dd68 <USBH_LL_GetSpeed>
 802c520:	4603      	mov	r3, r0
 802c522:	461a      	mov	r2, r3
 802c524:	687b      	ldr	r3, [r7, #4]
 802c526:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 802c52a:	687b      	ldr	r3, [r7, #4]
 802c52c:	2205      	movs	r2, #5
 802c52e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 802c530:	2100      	movs	r1, #0
 802c532:	6878      	ldr	r0, [r7, #4]
 802c534:	f001 fa29 	bl	802d98a <USBH_AllocPipe>
 802c538:	4603      	mov	r3, r0
 802c53a:	461a      	mov	r2, r3
 802c53c:	687b      	ldr	r3, [r7, #4]
 802c53e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 802c540:	2180      	movs	r1, #128	; 0x80
 802c542:	6878      	ldr	r0, [r7, #4]
 802c544:	f001 fa21 	bl	802d98a <USBH_AllocPipe>
 802c548:	4603      	mov	r3, r0
 802c54a:	461a      	mov	r2, r3
 802c54c:	687b      	ldr	r3, [r7, #4]
 802c54e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802c550:	687b      	ldr	r3, [r7, #4]
 802c552:	7919      	ldrb	r1, [r3, #4]
 802c554:	687b      	ldr	r3, [r7, #4]
 802c556:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c55a:	687b      	ldr	r3, [r7, #4]
 802c55c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802c560:	687a      	ldr	r2, [r7, #4]
 802c562:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802c564:	b292      	uxth	r2, r2
 802c566:	9202      	str	r2, [sp, #8]
 802c568:	2200      	movs	r2, #0
 802c56a:	9201      	str	r2, [sp, #4]
 802c56c:	9300      	str	r3, [sp, #0]
 802c56e:	4603      	mov	r3, r0
 802c570:	2280      	movs	r2, #128	; 0x80
 802c572:	6878      	ldr	r0, [r7, #4]
 802c574:	f001 f9da 	bl	802d92c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802c578:	687b      	ldr	r3, [r7, #4]
 802c57a:	7959      	ldrb	r1, [r3, #5]
 802c57c:	687b      	ldr	r3, [r7, #4]
 802c57e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c582:	687b      	ldr	r3, [r7, #4]
 802c584:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802c588:	687a      	ldr	r2, [r7, #4]
 802c58a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802c58c:	b292      	uxth	r2, r2
 802c58e:	9202      	str	r2, [sp, #8]
 802c590:	2200      	movs	r2, #0
 802c592:	9201      	str	r2, [sp, #4]
 802c594:	9300      	str	r3, [sp, #0]
 802c596:	4603      	mov	r3, r0
 802c598:	2200      	movs	r2, #0
 802c59a:	6878      	ldr	r0, [r7, #4]
 802c59c:	f001 f9c6 	bl	802d92c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c5a0:	e114      	b.n	802c7cc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 802c5a2:	6878      	ldr	r0, [r7, #4]
 802c5a4:	f000 f918 	bl	802c7d8 <USBH_HandleEnum>
 802c5a8:	4603      	mov	r3, r0
 802c5aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 802c5ac:	7bbb      	ldrb	r3, [r7, #14]
 802c5ae:	b2db      	uxtb	r3, r3
 802c5b0:	2b00      	cmp	r3, #0
 802c5b2:	f040 80fe 	bne.w	802c7b2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 802c5b6:	687b      	ldr	r3, [r7, #4]
 802c5b8:	2200      	movs	r2, #0
 802c5ba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 802c5be:	687b      	ldr	r3, [r7, #4]
 802c5c0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 802c5c4:	2b01      	cmp	r3, #1
 802c5c6:	d103      	bne.n	802c5d0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 802c5c8:	687b      	ldr	r3, [r7, #4]
 802c5ca:	2208      	movs	r2, #8
 802c5cc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802c5ce:	e0f0      	b.n	802c7b2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 802c5d0:	687b      	ldr	r3, [r7, #4]
 802c5d2:	2207      	movs	r2, #7
 802c5d4:	701a      	strb	r2, [r3, #0]
      break;
 802c5d6:	e0ec      	b.n	802c7b2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 802c5d8:	687b      	ldr	r3, [r7, #4]
 802c5da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c5de:	2b00      	cmp	r3, #0
 802c5e0:	f000 80e9 	beq.w	802c7b6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 802c5e4:	687b      	ldr	r3, [r7, #4]
 802c5e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c5ea:	2101      	movs	r1, #1
 802c5ec:	6878      	ldr	r0, [r7, #4]
 802c5ee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 802c5f0:	687b      	ldr	r3, [r7, #4]
 802c5f2:	2208      	movs	r2, #8
 802c5f4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 802c5f6:	e0de      	b.n	802c7b6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 802c5f8:	687b      	ldr	r3, [r7, #4]
 802c5fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 802c5fe:	b29b      	uxth	r3, r3
 802c600:	4619      	mov	r1, r3
 802c602:	6878      	ldr	r0, [r7, #4]
 802c604:	f000 fc2c 	bl	802ce60 <USBH_SetCfg>
 802c608:	4603      	mov	r3, r0
 802c60a:	2b00      	cmp	r3, #0
 802c60c:	f040 80d5 	bne.w	802c7ba <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 802c610:	687b      	ldr	r3, [r7, #4]
 802c612:	2209      	movs	r2, #9
 802c614:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c616:	e0d0      	b.n	802c7ba <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 802c618:	687b      	ldr	r3, [r7, #4]
 802c61a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 802c61e:	f003 0320 	and.w	r3, r3, #32
 802c622:	2b00      	cmp	r3, #0
 802c624:	d016      	beq.n	802c654 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 802c626:	2101      	movs	r1, #1
 802c628:	6878      	ldr	r0, [r7, #4]
 802c62a:	f000 fc3c 	bl	802cea6 <USBH_SetFeature>
 802c62e:	4603      	mov	r3, r0
 802c630:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802c632:	7bbb      	ldrb	r3, [r7, #14]
 802c634:	b2db      	uxtb	r3, r3
 802c636:	2b00      	cmp	r3, #0
 802c638:	d103      	bne.n	802c642 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 802c63a:	687b      	ldr	r3, [r7, #4]
 802c63c:	220a      	movs	r2, #10
 802c63e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c640:	e0bd      	b.n	802c7be <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 802c642:	7bbb      	ldrb	r3, [r7, #14]
 802c644:	b2db      	uxtb	r3, r3
 802c646:	2b03      	cmp	r3, #3
 802c648:	f040 80b9 	bne.w	802c7be <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 802c64c:	687b      	ldr	r3, [r7, #4]
 802c64e:	220a      	movs	r2, #10
 802c650:	701a      	strb	r2, [r3, #0]
      break;
 802c652:	e0b4      	b.n	802c7be <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 802c654:	687b      	ldr	r3, [r7, #4]
 802c656:	220a      	movs	r2, #10
 802c658:	701a      	strb	r2, [r3, #0]
      break;
 802c65a:	e0b0      	b.n	802c7be <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 802c65c:	687b      	ldr	r3, [r7, #4]
 802c65e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802c662:	2b00      	cmp	r3, #0
 802c664:	f000 80ad 	beq.w	802c7c2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 802c668:	687b      	ldr	r3, [r7, #4]
 802c66a:	2200      	movs	r2, #0
 802c66c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802c670:	2300      	movs	r3, #0
 802c672:	73fb      	strb	r3, [r7, #15]
 802c674:	e016      	b.n	802c6a4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 802c676:	7bfa      	ldrb	r2, [r7, #15]
 802c678:	687b      	ldr	r3, [r7, #4]
 802c67a:	32de      	adds	r2, #222	; 0xde
 802c67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802c680:	791a      	ldrb	r2, [r3, #4]
 802c682:	687b      	ldr	r3, [r7, #4]
 802c684:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 802c688:	429a      	cmp	r2, r3
 802c68a:	d108      	bne.n	802c69e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 802c68c:	7bfa      	ldrb	r2, [r7, #15]
 802c68e:	687b      	ldr	r3, [r7, #4]
 802c690:	32de      	adds	r2, #222	; 0xde
 802c692:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802c696:	687b      	ldr	r3, [r7, #4]
 802c698:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 802c69c:	e005      	b.n	802c6aa <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802c69e:	7bfb      	ldrb	r3, [r7, #15]
 802c6a0:	3301      	adds	r3, #1
 802c6a2:	73fb      	strb	r3, [r7, #15]
 802c6a4:	7bfb      	ldrb	r3, [r7, #15]
 802c6a6:	2b00      	cmp	r3, #0
 802c6a8:	d0e5      	beq.n	802c676 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 802c6aa:	687b      	ldr	r3, [r7, #4]
 802c6ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c6b0:	2b00      	cmp	r3, #0
 802c6b2:	d016      	beq.n	802c6e2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 802c6b4:	687b      	ldr	r3, [r7, #4]
 802c6b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c6ba:	689b      	ldr	r3, [r3, #8]
 802c6bc:	6878      	ldr	r0, [r7, #4]
 802c6be:	4798      	blx	r3
 802c6c0:	4603      	mov	r3, r0
 802c6c2:	2b00      	cmp	r3, #0
 802c6c4:	d109      	bne.n	802c6da <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 802c6c6:	687b      	ldr	r3, [r7, #4]
 802c6c8:	2206      	movs	r2, #6
 802c6ca:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 802c6cc:	687b      	ldr	r3, [r7, #4]
 802c6ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c6d2:	2103      	movs	r1, #3
 802c6d4:	6878      	ldr	r0, [r7, #4]
 802c6d6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c6d8:	e073      	b.n	802c7c2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 802c6da:	687b      	ldr	r3, [r7, #4]
 802c6dc:	220d      	movs	r2, #13
 802c6de:	701a      	strb	r2, [r3, #0]
      break;
 802c6e0:	e06f      	b.n	802c7c2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 802c6e2:	687b      	ldr	r3, [r7, #4]
 802c6e4:	220d      	movs	r2, #13
 802c6e6:	701a      	strb	r2, [r3, #0]
      break;
 802c6e8:	e06b      	b.n	802c7c2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 802c6ea:	687b      	ldr	r3, [r7, #4]
 802c6ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c6f0:	2b00      	cmp	r3, #0
 802c6f2:	d017      	beq.n	802c724 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 802c6f4:	687b      	ldr	r3, [r7, #4]
 802c6f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c6fa:	691b      	ldr	r3, [r3, #16]
 802c6fc:	6878      	ldr	r0, [r7, #4]
 802c6fe:	4798      	blx	r3
 802c700:	4603      	mov	r3, r0
 802c702:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802c704:	7bbb      	ldrb	r3, [r7, #14]
 802c706:	b2db      	uxtb	r3, r3
 802c708:	2b00      	cmp	r3, #0
 802c70a:	d103      	bne.n	802c714 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 802c70c:	687b      	ldr	r3, [r7, #4]
 802c70e:	220b      	movs	r2, #11
 802c710:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c712:	e058      	b.n	802c7c6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 802c714:	7bbb      	ldrb	r3, [r7, #14]
 802c716:	b2db      	uxtb	r3, r3
 802c718:	2b02      	cmp	r3, #2
 802c71a:	d154      	bne.n	802c7c6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 802c71c:	687b      	ldr	r3, [r7, #4]
 802c71e:	220d      	movs	r2, #13
 802c720:	701a      	strb	r2, [r3, #0]
      break;
 802c722:	e050      	b.n	802c7c6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 802c724:	687b      	ldr	r3, [r7, #4]
 802c726:	220d      	movs	r2, #13
 802c728:	701a      	strb	r2, [r3, #0]
      break;
 802c72a:	e04c      	b.n	802c7c6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 802c72c:	687b      	ldr	r3, [r7, #4]
 802c72e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c732:	2b00      	cmp	r3, #0
 802c734:	d049      	beq.n	802c7ca <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 802c736:	687b      	ldr	r3, [r7, #4]
 802c738:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c73c:	695b      	ldr	r3, [r3, #20]
 802c73e:	6878      	ldr	r0, [r7, #4]
 802c740:	4798      	blx	r3
      }
      break;
 802c742:	e042      	b.n	802c7ca <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 802c744:	687b      	ldr	r3, [r7, #4]
 802c746:	2200      	movs	r2, #0
 802c748:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 802c74c:	6878      	ldr	r0, [r7, #4]
 802c74e:	f7ff fd67 	bl	802c220 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 802c752:	687b      	ldr	r3, [r7, #4]
 802c754:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c758:	2b00      	cmp	r3, #0
 802c75a:	d009      	beq.n	802c770 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 802c75c:	687b      	ldr	r3, [r7, #4]
 802c75e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c762:	68db      	ldr	r3, [r3, #12]
 802c764:	6878      	ldr	r0, [r7, #4]
 802c766:	4798      	blx	r3
        phost->pActiveClass = NULL;
 802c768:	687b      	ldr	r3, [r7, #4]
 802c76a:	2200      	movs	r2, #0
 802c76c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 802c770:	687b      	ldr	r3, [r7, #4]
 802c772:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c776:	2b00      	cmp	r3, #0
 802c778:	d005      	beq.n	802c786 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 802c77a:	687b      	ldr	r3, [r7, #4]
 802c77c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c780:	2105      	movs	r1, #5
 802c782:	6878      	ldr	r0, [r7, #4]
 802c784:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 802c786:	687b      	ldr	r3, [r7, #4]
 802c788:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 802c78c:	b2db      	uxtb	r3, r3
 802c78e:	2b01      	cmp	r3, #1
 802c790:	d107      	bne.n	802c7a2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 802c792:	687b      	ldr	r3, [r7, #4]
 802c794:	2200      	movs	r2, #0
 802c796:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 802c79a:	6878      	ldr	r0, [r7, #4]
 802c79c:	f7ff fe20 	bl	802c3e0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c7a0:	e014      	b.n	802c7cc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 802c7a2:	6878      	ldr	r0, [r7, #4]
 802c7a4:	f001 faaa 	bl	802dcfc <USBH_LL_Start>
      break;
 802c7a8:	e010      	b.n	802c7cc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 802c7aa:	bf00      	nop
 802c7ac:	e00e      	b.n	802c7cc <USBH_Process+0x3cc>
      break;
 802c7ae:	bf00      	nop
 802c7b0:	e00c      	b.n	802c7cc <USBH_Process+0x3cc>
      break;
 802c7b2:	bf00      	nop
 802c7b4:	e00a      	b.n	802c7cc <USBH_Process+0x3cc>
    break;
 802c7b6:	bf00      	nop
 802c7b8:	e008      	b.n	802c7cc <USBH_Process+0x3cc>
      break;
 802c7ba:	bf00      	nop
 802c7bc:	e006      	b.n	802c7cc <USBH_Process+0x3cc>
      break;
 802c7be:	bf00      	nop
 802c7c0:	e004      	b.n	802c7cc <USBH_Process+0x3cc>
      break;
 802c7c2:	bf00      	nop
 802c7c4:	e002      	b.n	802c7cc <USBH_Process+0x3cc>
      break;
 802c7c6:	bf00      	nop
 802c7c8:	e000      	b.n	802c7cc <USBH_Process+0x3cc>
      break;
 802c7ca:	bf00      	nop
  }
  return USBH_OK;
 802c7cc:	2300      	movs	r3, #0
}
 802c7ce:	4618      	mov	r0, r3
 802c7d0:	3710      	adds	r7, #16
 802c7d2:	46bd      	mov	sp, r7
 802c7d4:	bd80      	pop	{r7, pc}
 802c7d6:	bf00      	nop

0802c7d8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 802c7d8:	b580      	push	{r7, lr}
 802c7da:	b088      	sub	sp, #32
 802c7dc:	af04      	add	r7, sp, #16
 802c7de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 802c7e0:	2301      	movs	r3, #1
 802c7e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 802c7e4:	2301      	movs	r3, #1
 802c7e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 802c7e8:	687b      	ldr	r3, [r7, #4]
 802c7ea:	785b      	ldrb	r3, [r3, #1]
 802c7ec:	2b07      	cmp	r3, #7
 802c7ee:	f200 81c1 	bhi.w	802cb74 <USBH_HandleEnum+0x39c>
 802c7f2:	a201      	add	r2, pc, #4	; (adr r2, 802c7f8 <USBH_HandleEnum+0x20>)
 802c7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c7f8:	0802c819 	.word	0x0802c819
 802c7fc:	0802c8d7 	.word	0x0802c8d7
 802c800:	0802c941 	.word	0x0802c941
 802c804:	0802c9cf 	.word	0x0802c9cf
 802c808:	0802ca39 	.word	0x0802ca39
 802c80c:	0802caa9 	.word	0x0802caa9
 802c810:	0802caef 	.word	0x0802caef
 802c814:	0802cb35 	.word	0x0802cb35
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 802c818:	2108      	movs	r1, #8
 802c81a:	6878      	ldr	r0, [r7, #4]
 802c81c:	f000 fa50 	bl	802ccc0 <USBH_Get_DevDesc>
 802c820:	4603      	mov	r3, r0
 802c822:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c824:	7bbb      	ldrb	r3, [r7, #14]
 802c826:	2b00      	cmp	r3, #0
 802c828:	d130      	bne.n	802c88c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 802c82a:	687b      	ldr	r3, [r7, #4]
 802c82c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 802c830:	687b      	ldr	r3, [r7, #4]
 802c832:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 802c834:	687b      	ldr	r3, [r7, #4]
 802c836:	2201      	movs	r2, #1
 802c838:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802c83a:	687b      	ldr	r3, [r7, #4]
 802c83c:	7919      	ldrb	r1, [r3, #4]
 802c83e:	687b      	ldr	r3, [r7, #4]
 802c840:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c844:	687b      	ldr	r3, [r7, #4]
 802c846:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c84a:	687a      	ldr	r2, [r7, #4]
 802c84c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802c84e:	b292      	uxth	r2, r2
 802c850:	9202      	str	r2, [sp, #8]
 802c852:	2200      	movs	r2, #0
 802c854:	9201      	str	r2, [sp, #4]
 802c856:	9300      	str	r3, [sp, #0]
 802c858:	4603      	mov	r3, r0
 802c85a:	2280      	movs	r2, #128	; 0x80
 802c85c:	6878      	ldr	r0, [r7, #4]
 802c85e:	f001 f865 	bl	802d92c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c862:	687b      	ldr	r3, [r7, #4]
 802c864:	7959      	ldrb	r1, [r3, #5]
 802c866:	687b      	ldr	r3, [r7, #4]
 802c868:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c86c:	687b      	ldr	r3, [r7, #4]
 802c86e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c872:	687a      	ldr	r2, [r7, #4]
 802c874:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c876:	b292      	uxth	r2, r2
 802c878:	9202      	str	r2, [sp, #8]
 802c87a:	2200      	movs	r2, #0
 802c87c:	9201      	str	r2, [sp, #4]
 802c87e:	9300      	str	r3, [sp, #0]
 802c880:	4603      	mov	r3, r0
 802c882:	2200      	movs	r2, #0
 802c884:	6878      	ldr	r0, [r7, #4]
 802c886:	f001 f851 	bl	802d92c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802c88a:	e175      	b.n	802cb78 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c88c:	7bbb      	ldrb	r3, [r7, #14]
 802c88e:	2b03      	cmp	r3, #3
 802c890:	f040 8172 	bne.w	802cb78 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 802c894:	687b      	ldr	r3, [r7, #4]
 802c896:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c89a:	3301      	adds	r3, #1
 802c89c:	b2da      	uxtb	r2, r3
 802c89e:	687b      	ldr	r3, [r7, #4]
 802c8a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c8a4:	687b      	ldr	r3, [r7, #4]
 802c8a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c8aa:	2b03      	cmp	r3, #3
 802c8ac:	d903      	bls.n	802c8b6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 802c8ae:	687b      	ldr	r3, [r7, #4]
 802c8b0:	220d      	movs	r2, #13
 802c8b2:	701a      	strb	r2, [r3, #0]
      break;
 802c8b4:	e160      	b.n	802cb78 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c8b6:	687b      	ldr	r3, [r7, #4]
 802c8b8:	795b      	ldrb	r3, [r3, #5]
 802c8ba:	4619      	mov	r1, r3
 802c8bc:	6878      	ldr	r0, [r7, #4]
 802c8be:	f001 f885 	bl	802d9cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c8c2:	687b      	ldr	r3, [r7, #4]
 802c8c4:	791b      	ldrb	r3, [r3, #4]
 802c8c6:	4619      	mov	r1, r3
 802c8c8:	6878      	ldr	r0, [r7, #4]
 802c8ca:	f001 f87f 	bl	802d9cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 802c8ce:	687b      	ldr	r3, [r7, #4]
 802c8d0:	2200      	movs	r2, #0
 802c8d2:	701a      	strb	r2, [r3, #0]
      break;
 802c8d4:	e150      	b.n	802cb78 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 802c8d6:	2112      	movs	r1, #18
 802c8d8:	6878      	ldr	r0, [r7, #4]
 802c8da:	f000 f9f1 	bl	802ccc0 <USBH_Get_DevDesc>
 802c8de:	4603      	mov	r3, r0
 802c8e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c8e2:	7bbb      	ldrb	r3, [r7, #14]
 802c8e4:	2b00      	cmp	r3, #0
 802c8e6:	d103      	bne.n	802c8f0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 802c8e8:	687b      	ldr	r3, [r7, #4]
 802c8ea:	2202      	movs	r2, #2
 802c8ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802c8ee:	e145      	b.n	802cb7c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c8f0:	7bbb      	ldrb	r3, [r7, #14]
 802c8f2:	2b03      	cmp	r3, #3
 802c8f4:	f040 8142 	bne.w	802cb7c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 802c8f8:	687b      	ldr	r3, [r7, #4]
 802c8fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c8fe:	3301      	adds	r3, #1
 802c900:	b2da      	uxtb	r2, r3
 802c902:	687b      	ldr	r3, [r7, #4]
 802c904:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c908:	687b      	ldr	r3, [r7, #4]
 802c90a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c90e:	2b03      	cmp	r3, #3
 802c910:	d903      	bls.n	802c91a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 802c912:	687b      	ldr	r3, [r7, #4]
 802c914:	220d      	movs	r2, #13
 802c916:	701a      	strb	r2, [r3, #0]
      break;
 802c918:	e130      	b.n	802cb7c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c91a:	687b      	ldr	r3, [r7, #4]
 802c91c:	795b      	ldrb	r3, [r3, #5]
 802c91e:	4619      	mov	r1, r3
 802c920:	6878      	ldr	r0, [r7, #4]
 802c922:	f001 f853 	bl	802d9cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c926:	687b      	ldr	r3, [r7, #4]
 802c928:	791b      	ldrb	r3, [r3, #4]
 802c92a:	4619      	mov	r1, r3
 802c92c:	6878      	ldr	r0, [r7, #4]
 802c92e:	f001 f84d 	bl	802d9cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802c932:	687b      	ldr	r3, [r7, #4]
 802c934:	2200      	movs	r2, #0
 802c936:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802c938:	687b      	ldr	r3, [r7, #4]
 802c93a:	2200      	movs	r2, #0
 802c93c:	701a      	strb	r2, [r3, #0]
      break;
 802c93e:	e11d      	b.n	802cb7c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 802c940:	2101      	movs	r1, #1
 802c942:	6878      	ldr	r0, [r7, #4]
 802c944:	f000 fa68 	bl	802ce18 <USBH_SetAddress>
 802c948:	4603      	mov	r3, r0
 802c94a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c94c:	7bbb      	ldrb	r3, [r7, #14]
 802c94e:	2b00      	cmp	r3, #0
 802c950:	d132      	bne.n	802c9b8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 802c952:	2002      	movs	r0, #2
 802c954:	f001 fb36 	bl	802dfc4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 802c958:	687b      	ldr	r3, [r7, #4]
 802c95a:	2201      	movs	r2, #1
 802c95c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 802c960:	687b      	ldr	r3, [r7, #4]
 802c962:	2203      	movs	r2, #3
 802c964:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802c966:	687b      	ldr	r3, [r7, #4]
 802c968:	7919      	ldrb	r1, [r3, #4]
 802c96a:	687b      	ldr	r3, [r7, #4]
 802c96c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c970:	687b      	ldr	r3, [r7, #4]
 802c972:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c976:	687a      	ldr	r2, [r7, #4]
 802c978:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802c97a:	b292      	uxth	r2, r2
 802c97c:	9202      	str	r2, [sp, #8]
 802c97e:	2200      	movs	r2, #0
 802c980:	9201      	str	r2, [sp, #4]
 802c982:	9300      	str	r3, [sp, #0]
 802c984:	4603      	mov	r3, r0
 802c986:	2280      	movs	r2, #128	; 0x80
 802c988:	6878      	ldr	r0, [r7, #4]
 802c98a:	f000 ffcf 	bl	802d92c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c98e:	687b      	ldr	r3, [r7, #4]
 802c990:	7959      	ldrb	r1, [r3, #5]
 802c992:	687b      	ldr	r3, [r7, #4]
 802c994:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c998:	687b      	ldr	r3, [r7, #4]
 802c99a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c99e:	687a      	ldr	r2, [r7, #4]
 802c9a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c9a2:	b292      	uxth	r2, r2
 802c9a4:	9202      	str	r2, [sp, #8]
 802c9a6:	2200      	movs	r2, #0
 802c9a8:	9201      	str	r2, [sp, #4]
 802c9aa:	9300      	str	r3, [sp, #0]
 802c9ac:	4603      	mov	r3, r0
 802c9ae:	2200      	movs	r2, #0
 802c9b0:	6878      	ldr	r0, [r7, #4]
 802c9b2:	f000 ffbb 	bl	802d92c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802c9b6:	e0e3      	b.n	802cb80 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c9b8:	7bbb      	ldrb	r3, [r7, #14]
 802c9ba:	2b03      	cmp	r3, #3
 802c9bc:	f040 80e0 	bne.w	802cb80 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 802c9c0:	687b      	ldr	r3, [r7, #4]
 802c9c2:	220d      	movs	r2, #13
 802c9c4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 802c9c6:	687b      	ldr	r3, [r7, #4]
 802c9c8:	2200      	movs	r2, #0
 802c9ca:	705a      	strb	r2, [r3, #1]
      break;
 802c9cc:	e0d8      	b.n	802cb80 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 802c9ce:	2109      	movs	r1, #9
 802c9d0:	6878      	ldr	r0, [r7, #4]
 802c9d2:	f000 f99d 	bl	802cd10 <USBH_Get_CfgDesc>
 802c9d6:	4603      	mov	r3, r0
 802c9d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c9da:	7bbb      	ldrb	r3, [r7, #14]
 802c9dc:	2b00      	cmp	r3, #0
 802c9de:	d103      	bne.n	802c9e8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 802c9e0:	687b      	ldr	r3, [r7, #4]
 802c9e2:	2204      	movs	r2, #4
 802c9e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802c9e6:	e0cd      	b.n	802cb84 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c9e8:	7bbb      	ldrb	r3, [r7, #14]
 802c9ea:	2b03      	cmp	r3, #3
 802c9ec:	f040 80ca 	bne.w	802cb84 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 802c9f0:	687b      	ldr	r3, [r7, #4]
 802c9f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c9f6:	3301      	adds	r3, #1
 802c9f8:	b2da      	uxtb	r2, r3
 802c9fa:	687b      	ldr	r3, [r7, #4]
 802c9fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802ca00:	687b      	ldr	r3, [r7, #4]
 802ca02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ca06:	2b03      	cmp	r3, #3
 802ca08:	d903      	bls.n	802ca12 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 802ca0a:	687b      	ldr	r3, [r7, #4]
 802ca0c:	220d      	movs	r2, #13
 802ca0e:	701a      	strb	r2, [r3, #0]
      break;
 802ca10:	e0b8      	b.n	802cb84 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802ca12:	687b      	ldr	r3, [r7, #4]
 802ca14:	795b      	ldrb	r3, [r3, #5]
 802ca16:	4619      	mov	r1, r3
 802ca18:	6878      	ldr	r0, [r7, #4]
 802ca1a:	f000 ffd7 	bl	802d9cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802ca1e:	687b      	ldr	r3, [r7, #4]
 802ca20:	791b      	ldrb	r3, [r3, #4]
 802ca22:	4619      	mov	r1, r3
 802ca24:	6878      	ldr	r0, [r7, #4]
 802ca26:	f000 ffd1 	bl	802d9cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802ca2a:	687b      	ldr	r3, [r7, #4]
 802ca2c:	2200      	movs	r2, #0
 802ca2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802ca30:	687b      	ldr	r3, [r7, #4]
 802ca32:	2200      	movs	r2, #0
 802ca34:	701a      	strb	r2, [r3, #0]
      break;
 802ca36:	e0a5      	b.n	802cb84 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 802ca38:	687b      	ldr	r3, [r7, #4]
 802ca3a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 802ca3e:	4619      	mov	r1, r3
 802ca40:	6878      	ldr	r0, [r7, #4]
 802ca42:	f000 f965 	bl	802cd10 <USBH_Get_CfgDesc>
 802ca46:	4603      	mov	r3, r0
 802ca48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802ca4a:	7bbb      	ldrb	r3, [r7, #14]
 802ca4c:	2b00      	cmp	r3, #0
 802ca4e:	d103      	bne.n	802ca58 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 802ca50:	687b      	ldr	r3, [r7, #4]
 802ca52:	2205      	movs	r2, #5
 802ca54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802ca56:	e097      	b.n	802cb88 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ca58:	7bbb      	ldrb	r3, [r7, #14]
 802ca5a:	2b03      	cmp	r3, #3
 802ca5c:	f040 8094 	bne.w	802cb88 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 802ca60:	687b      	ldr	r3, [r7, #4]
 802ca62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ca66:	3301      	adds	r3, #1
 802ca68:	b2da      	uxtb	r2, r3
 802ca6a:	687b      	ldr	r3, [r7, #4]
 802ca6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802ca70:	687b      	ldr	r3, [r7, #4]
 802ca72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ca76:	2b03      	cmp	r3, #3
 802ca78:	d903      	bls.n	802ca82 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 802ca7a:	687b      	ldr	r3, [r7, #4]
 802ca7c:	220d      	movs	r2, #13
 802ca7e:	701a      	strb	r2, [r3, #0]
      break;
 802ca80:	e082      	b.n	802cb88 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802ca82:	687b      	ldr	r3, [r7, #4]
 802ca84:	795b      	ldrb	r3, [r3, #5]
 802ca86:	4619      	mov	r1, r3
 802ca88:	6878      	ldr	r0, [r7, #4]
 802ca8a:	f000 ff9f 	bl	802d9cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802ca8e:	687b      	ldr	r3, [r7, #4]
 802ca90:	791b      	ldrb	r3, [r3, #4]
 802ca92:	4619      	mov	r1, r3
 802ca94:	6878      	ldr	r0, [r7, #4]
 802ca96:	f000 ff99 	bl	802d9cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802ca9a:	687b      	ldr	r3, [r7, #4]
 802ca9c:	2200      	movs	r2, #0
 802ca9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802caa0:	687b      	ldr	r3, [r7, #4]
 802caa2:	2200      	movs	r2, #0
 802caa4:	701a      	strb	r2, [r3, #0]
      break;
 802caa6:	e06f      	b.n	802cb88 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 802caa8:	687b      	ldr	r3, [r7, #4]
 802caaa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 802caae:	2b00      	cmp	r3, #0
 802cab0:	d019      	beq.n	802cae6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802cab2:	687b      	ldr	r3, [r7, #4]
 802cab4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 802cab8:	687b      	ldr	r3, [r7, #4]
 802caba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802cabe:	23ff      	movs	r3, #255	; 0xff
 802cac0:	6878      	ldr	r0, [r7, #4]
 802cac2:	f000 f949 	bl	802cd58 <USBH_Get_StringDesc>
 802cac6:	4603      	mov	r3, r0
 802cac8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802caca:	7bbb      	ldrb	r3, [r7, #14]
 802cacc:	2b00      	cmp	r3, #0
 802cace:	d103      	bne.n	802cad8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802cad0:	687b      	ldr	r3, [r7, #4]
 802cad2:	2206      	movs	r2, #6
 802cad4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802cad6:	e059      	b.n	802cb8c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802cad8:	7bbb      	ldrb	r3, [r7, #14]
 802cada:	2b03      	cmp	r3, #3
 802cadc:	d156      	bne.n	802cb8c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802cade:	687b      	ldr	r3, [r7, #4]
 802cae0:	2206      	movs	r2, #6
 802cae2:	705a      	strb	r2, [r3, #1]
      break;
 802cae4:	e052      	b.n	802cb8c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802cae6:	687b      	ldr	r3, [r7, #4]
 802cae8:	2206      	movs	r2, #6
 802caea:	705a      	strb	r2, [r3, #1]
      break;
 802caec:	e04e      	b.n	802cb8c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 802caee:	687b      	ldr	r3, [r7, #4]
 802caf0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 802caf4:	2b00      	cmp	r3, #0
 802caf6:	d019      	beq.n	802cb2c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802caf8:	687b      	ldr	r3, [r7, #4]
 802cafa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 802cafe:	687b      	ldr	r3, [r7, #4]
 802cb00:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802cb04:	23ff      	movs	r3, #255	; 0xff
 802cb06:	6878      	ldr	r0, [r7, #4]
 802cb08:	f000 f926 	bl	802cd58 <USBH_Get_StringDesc>
 802cb0c:	4603      	mov	r3, r0
 802cb0e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802cb10:	7bbb      	ldrb	r3, [r7, #14]
 802cb12:	2b00      	cmp	r3, #0
 802cb14:	d103      	bne.n	802cb1e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802cb16:	687b      	ldr	r3, [r7, #4]
 802cb18:	2207      	movs	r2, #7
 802cb1a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802cb1c:	e038      	b.n	802cb90 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802cb1e:	7bbb      	ldrb	r3, [r7, #14]
 802cb20:	2b03      	cmp	r3, #3
 802cb22:	d135      	bne.n	802cb90 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802cb24:	687b      	ldr	r3, [r7, #4]
 802cb26:	2207      	movs	r2, #7
 802cb28:	705a      	strb	r2, [r3, #1]
      break;
 802cb2a:	e031      	b.n	802cb90 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802cb2c:	687b      	ldr	r3, [r7, #4]
 802cb2e:	2207      	movs	r2, #7
 802cb30:	705a      	strb	r2, [r3, #1]
      break;
 802cb32:	e02d      	b.n	802cb90 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 802cb34:	687b      	ldr	r3, [r7, #4]
 802cb36:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 802cb3a:	2b00      	cmp	r3, #0
 802cb3c:	d017      	beq.n	802cb6e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802cb3e:	687b      	ldr	r3, [r7, #4]
 802cb40:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 802cb44:	687b      	ldr	r3, [r7, #4]
 802cb46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802cb4a:	23ff      	movs	r3, #255	; 0xff
 802cb4c:	6878      	ldr	r0, [r7, #4]
 802cb4e:	f000 f903 	bl	802cd58 <USBH_Get_StringDesc>
 802cb52:	4603      	mov	r3, r0
 802cb54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802cb56:	7bbb      	ldrb	r3, [r7, #14]
 802cb58:	2b00      	cmp	r3, #0
 802cb5a:	d102      	bne.n	802cb62 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 802cb5c:	2300      	movs	r3, #0
 802cb5e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 802cb60:	e018      	b.n	802cb94 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802cb62:	7bbb      	ldrb	r3, [r7, #14]
 802cb64:	2b03      	cmp	r3, #3
 802cb66:	d115      	bne.n	802cb94 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 802cb68:	2300      	movs	r3, #0
 802cb6a:	73fb      	strb	r3, [r7, #15]
      break;
 802cb6c:	e012      	b.n	802cb94 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 802cb6e:	2300      	movs	r3, #0
 802cb70:	73fb      	strb	r3, [r7, #15]
      break;
 802cb72:	e00f      	b.n	802cb94 <USBH_HandleEnum+0x3bc>

    default:
      break;
 802cb74:	bf00      	nop
 802cb76:	e00e      	b.n	802cb96 <USBH_HandleEnum+0x3be>
      break;
 802cb78:	bf00      	nop
 802cb7a:	e00c      	b.n	802cb96 <USBH_HandleEnum+0x3be>
      break;
 802cb7c:	bf00      	nop
 802cb7e:	e00a      	b.n	802cb96 <USBH_HandleEnum+0x3be>
      break;
 802cb80:	bf00      	nop
 802cb82:	e008      	b.n	802cb96 <USBH_HandleEnum+0x3be>
      break;
 802cb84:	bf00      	nop
 802cb86:	e006      	b.n	802cb96 <USBH_HandleEnum+0x3be>
      break;
 802cb88:	bf00      	nop
 802cb8a:	e004      	b.n	802cb96 <USBH_HandleEnum+0x3be>
      break;
 802cb8c:	bf00      	nop
 802cb8e:	e002      	b.n	802cb96 <USBH_HandleEnum+0x3be>
      break;
 802cb90:	bf00      	nop
 802cb92:	e000      	b.n	802cb96 <USBH_HandleEnum+0x3be>
      break;
 802cb94:	bf00      	nop
  }
  return Status;
 802cb96:	7bfb      	ldrb	r3, [r7, #15]
}
 802cb98:	4618      	mov	r0, r3
 802cb9a:	3710      	adds	r7, #16
 802cb9c:	46bd      	mov	sp, r7
 802cb9e:	bd80      	pop	{r7, pc}

0802cba0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 802cba0:	b480      	push	{r7}
 802cba2:	b083      	sub	sp, #12
 802cba4:	af00      	add	r7, sp, #0
 802cba6:	6078      	str	r0, [r7, #4]
 802cba8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 802cbaa:	687b      	ldr	r3, [r7, #4]
 802cbac:	683a      	ldr	r2, [r7, #0]
 802cbae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 802cbb2:	bf00      	nop
 802cbb4:	370c      	adds	r7, #12
 802cbb6:	46bd      	mov	sp, r7
 802cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cbbc:	4770      	bx	lr

0802cbbe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 802cbbe:	b580      	push	{r7, lr}
 802cbc0:	b082      	sub	sp, #8
 802cbc2:	af00      	add	r7, sp, #0
 802cbc4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 802cbc6:	687b      	ldr	r3, [r7, #4]
 802cbc8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802cbcc:	1c5a      	adds	r2, r3, #1
 802cbce:	687b      	ldr	r3, [r7, #4]
 802cbd0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 802cbd4:	6878      	ldr	r0, [r7, #4]
 802cbd6:	f000 f804 	bl	802cbe2 <USBH_HandleSof>
}
 802cbda:	bf00      	nop
 802cbdc:	3708      	adds	r7, #8
 802cbde:	46bd      	mov	sp, r7
 802cbe0:	bd80      	pop	{r7, pc}

0802cbe2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 802cbe2:	b580      	push	{r7, lr}
 802cbe4:	b082      	sub	sp, #8
 802cbe6:	af00      	add	r7, sp, #0
 802cbe8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 802cbea:	687b      	ldr	r3, [r7, #4]
 802cbec:	781b      	ldrb	r3, [r3, #0]
 802cbee:	b2db      	uxtb	r3, r3
 802cbf0:	2b0b      	cmp	r3, #11
 802cbf2:	d10a      	bne.n	802cc0a <USBH_HandleSof+0x28>
 802cbf4:	687b      	ldr	r3, [r7, #4]
 802cbf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cbfa:	2b00      	cmp	r3, #0
 802cbfc:	d005      	beq.n	802cc0a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 802cbfe:	687b      	ldr	r3, [r7, #4]
 802cc00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cc04:	699b      	ldr	r3, [r3, #24]
 802cc06:	6878      	ldr	r0, [r7, #4]
 802cc08:	4798      	blx	r3
  }
}
 802cc0a:	bf00      	nop
 802cc0c:	3708      	adds	r7, #8
 802cc0e:	46bd      	mov	sp, r7
 802cc10:	bd80      	pop	{r7, pc}

0802cc12 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 802cc12:	b480      	push	{r7}
 802cc14:	b083      	sub	sp, #12
 802cc16:	af00      	add	r7, sp, #0
 802cc18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 802cc1a:	687b      	ldr	r3, [r7, #4]
 802cc1c:	2201      	movs	r2, #1
 802cc1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 802cc22:	bf00      	nop
}
 802cc24:	370c      	adds	r7, #12
 802cc26:	46bd      	mov	sp, r7
 802cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cc2c:	4770      	bx	lr

0802cc2e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 802cc2e:	b480      	push	{r7}
 802cc30:	b083      	sub	sp, #12
 802cc32:	af00      	add	r7, sp, #0
 802cc34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 802cc36:	687b      	ldr	r3, [r7, #4]
 802cc38:	2200      	movs	r2, #0
 802cc3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 802cc3e:	bf00      	nop
}
 802cc40:	370c      	adds	r7, #12
 802cc42:	46bd      	mov	sp, r7
 802cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cc48:	4770      	bx	lr

0802cc4a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 802cc4a:	b480      	push	{r7}
 802cc4c:	b083      	sub	sp, #12
 802cc4e:	af00      	add	r7, sp, #0
 802cc50:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 802cc52:	687b      	ldr	r3, [r7, #4]
 802cc54:	2201      	movs	r2, #1
 802cc56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802cc5a:	687b      	ldr	r3, [r7, #4]
 802cc5c:	2200      	movs	r2, #0
 802cc5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802cc62:	687b      	ldr	r3, [r7, #4]
 802cc64:	2200      	movs	r2, #0
 802cc66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802cc6a:	2300      	movs	r3, #0
}
 802cc6c:	4618      	mov	r0, r3
 802cc6e:	370c      	adds	r7, #12
 802cc70:	46bd      	mov	sp, r7
 802cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cc76:	4770      	bx	lr

0802cc78 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 802cc78:	b580      	push	{r7, lr}
 802cc7a:	b082      	sub	sp, #8
 802cc7c:	af00      	add	r7, sp, #0
 802cc7e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 802cc80:	687b      	ldr	r3, [r7, #4]
 802cc82:	2201      	movs	r2, #1
 802cc84:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 802cc88:	687b      	ldr	r3, [r7, #4]
 802cc8a:	2200      	movs	r2, #0
 802cc8c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 802cc90:	687b      	ldr	r3, [r7, #4]
 802cc92:	2200      	movs	r2, #0
 802cc94:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 802cc98:	6878      	ldr	r0, [r7, #4]
 802cc9a:	f001 f84a 	bl	802dd32 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802cc9e:	687b      	ldr	r3, [r7, #4]
 802cca0:	791b      	ldrb	r3, [r3, #4]
 802cca2:	4619      	mov	r1, r3
 802cca4:	6878      	ldr	r0, [r7, #4]
 802cca6:	f000 fe91 	bl	802d9cc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802ccaa:	687b      	ldr	r3, [r7, #4]
 802ccac:	795b      	ldrb	r3, [r3, #5]
 802ccae:	4619      	mov	r1, r3
 802ccb0:	6878      	ldr	r0, [r7, #4]
 802ccb2:	f000 fe8b 	bl	802d9cc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802ccb6:	2300      	movs	r3, #0
}
 802ccb8:	4618      	mov	r0, r3
 802ccba:	3708      	adds	r7, #8
 802ccbc:	46bd      	mov	sp, r7
 802ccbe:	bd80      	pop	{r7, pc}

0802ccc0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 802ccc0:	b580      	push	{r7, lr}
 802ccc2:	b086      	sub	sp, #24
 802ccc4:	af02      	add	r7, sp, #8
 802ccc6:	6078      	str	r0, [r7, #4]
 802ccc8:	460b      	mov	r3, r1
 802ccca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 802cccc:	687b      	ldr	r3, [r7, #4]
 802ccce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802ccd2:	78fb      	ldrb	r3, [r7, #3]
 802ccd4:	b29b      	uxth	r3, r3
 802ccd6:	9300      	str	r3, [sp, #0]
 802ccd8:	4613      	mov	r3, r2
 802ccda:	f44f 7280 	mov.w	r2, #256	; 0x100
 802ccde:	2100      	movs	r1, #0
 802cce0:	6878      	ldr	r0, [r7, #4]
 802cce2:	f000 f864 	bl	802cdae <USBH_GetDescriptor>
 802cce6:	4603      	mov	r3, r0
 802cce8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 802ccea:	7bfb      	ldrb	r3, [r7, #15]
 802ccec:	2b00      	cmp	r3, #0
 802ccee:	d10a      	bne.n	802cd06 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 802ccf0:	687b      	ldr	r3, [r7, #4]
 802ccf2:	f203 3026 	addw	r0, r3, #806	; 0x326
 802ccf6:	687b      	ldr	r3, [r7, #4]
 802ccf8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802ccfc:	78fa      	ldrb	r2, [r7, #3]
 802ccfe:	b292      	uxth	r2, r2
 802cd00:	4619      	mov	r1, r3
 802cd02:	f000 f918 	bl	802cf36 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 802cd06:	7bfb      	ldrb	r3, [r7, #15]
}
 802cd08:	4618      	mov	r0, r3
 802cd0a:	3710      	adds	r7, #16
 802cd0c:	46bd      	mov	sp, r7
 802cd0e:	bd80      	pop	{r7, pc}

0802cd10 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 802cd10:	b580      	push	{r7, lr}
 802cd12:	b086      	sub	sp, #24
 802cd14:	af02      	add	r7, sp, #8
 802cd16:	6078      	str	r0, [r7, #4]
 802cd18:	460b      	mov	r3, r1
 802cd1a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 802cd1c:	687b      	ldr	r3, [r7, #4]
 802cd1e:	331c      	adds	r3, #28
 802cd20:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 802cd22:	887b      	ldrh	r3, [r7, #2]
 802cd24:	9300      	str	r3, [sp, #0]
 802cd26:	68bb      	ldr	r3, [r7, #8]
 802cd28:	f44f 7200 	mov.w	r2, #512	; 0x200
 802cd2c:	2100      	movs	r1, #0
 802cd2e:	6878      	ldr	r0, [r7, #4]
 802cd30:	f000 f83d 	bl	802cdae <USBH_GetDescriptor>
 802cd34:	4603      	mov	r3, r0
 802cd36:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 802cd38:	7bfb      	ldrb	r3, [r7, #15]
 802cd3a:	2b00      	cmp	r3, #0
 802cd3c:	d107      	bne.n	802cd4e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 802cd3e:	887b      	ldrh	r3, [r7, #2]
 802cd40:	461a      	mov	r2, r3
 802cd42:	68b9      	ldr	r1, [r7, #8]
 802cd44:	6878      	ldr	r0, [r7, #4]
 802cd46:	f000 f987 	bl	802d058 <USBH_ParseCfgDesc>
 802cd4a:	4603      	mov	r3, r0
 802cd4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802cd4e:	7bfb      	ldrb	r3, [r7, #15]
}
 802cd50:	4618      	mov	r0, r3
 802cd52:	3710      	adds	r7, #16
 802cd54:	46bd      	mov	sp, r7
 802cd56:	bd80      	pop	{r7, pc}

0802cd58 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 802cd58:	b580      	push	{r7, lr}
 802cd5a:	b088      	sub	sp, #32
 802cd5c:	af02      	add	r7, sp, #8
 802cd5e:	60f8      	str	r0, [r7, #12]
 802cd60:	607a      	str	r2, [r7, #4]
 802cd62:	461a      	mov	r2, r3
 802cd64:	460b      	mov	r3, r1
 802cd66:	72fb      	strb	r3, [r7, #11]
 802cd68:	4613      	mov	r3, r2
 802cd6a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 802cd6c:	7afb      	ldrb	r3, [r7, #11]
 802cd6e:	b29b      	uxth	r3, r3
 802cd70:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802cd74:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 802cd76:	68fb      	ldr	r3, [r7, #12]
 802cd78:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802cd7c:	893b      	ldrh	r3, [r7, #8]
 802cd7e:	9300      	str	r3, [sp, #0]
 802cd80:	460b      	mov	r3, r1
 802cd82:	2100      	movs	r1, #0
 802cd84:	68f8      	ldr	r0, [r7, #12]
 802cd86:	f000 f812 	bl	802cdae <USBH_GetDescriptor>
 802cd8a:	4603      	mov	r3, r0
 802cd8c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 802cd8e:	7dfb      	ldrb	r3, [r7, #23]
 802cd90:	2b00      	cmp	r3, #0
 802cd92:	d107      	bne.n	802cda4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 802cd94:	68fb      	ldr	r3, [r7, #12]
 802cd96:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802cd9a:	893a      	ldrh	r2, [r7, #8]
 802cd9c:	6879      	ldr	r1, [r7, #4]
 802cd9e:	4618      	mov	r0, r3
 802cda0:	f000 fb24 	bl	802d3ec <USBH_ParseStringDesc>
  }

  return status;
 802cda4:	7dfb      	ldrb	r3, [r7, #23]
}
 802cda6:	4618      	mov	r0, r3
 802cda8:	3718      	adds	r7, #24
 802cdaa:	46bd      	mov	sp, r7
 802cdac:	bd80      	pop	{r7, pc}

0802cdae <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 802cdae:	b580      	push	{r7, lr}
 802cdb0:	b084      	sub	sp, #16
 802cdb2:	af00      	add	r7, sp, #0
 802cdb4:	60f8      	str	r0, [r7, #12]
 802cdb6:	607b      	str	r3, [r7, #4]
 802cdb8:	460b      	mov	r3, r1
 802cdba:	72fb      	strb	r3, [r7, #11]
 802cdbc:	4613      	mov	r3, r2
 802cdbe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 802cdc0:	68fb      	ldr	r3, [r7, #12]
 802cdc2:	789b      	ldrb	r3, [r3, #2]
 802cdc4:	2b01      	cmp	r3, #1
 802cdc6:	d11c      	bne.n	802ce02 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 802cdc8:	7afb      	ldrb	r3, [r7, #11]
 802cdca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802cdce:	b2da      	uxtb	r2, r3
 802cdd0:	68fb      	ldr	r3, [r7, #12]
 802cdd2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 802cdd4:	68fb      	ldr	r3, [r7, #12]
 802cdd6:	2206      	movs	r2, #6
 802cdd8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 802cdda:	68fb      	ldr	r3, [r7, #12]
 802cddc:	893a      	ldrh	r2, [r7, #8]
 802cdde:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 802cde0:	893b      	ldrh	r3, [r7, #8]
 802cde2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802cde6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802cdea:	d104      	bne.n	802cdf6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 802cdec:	68fb      	ldr	r3, [r7, #12]
 802cdee:	f240 4209 	movw	r2, #1033	; 0x409
 802cdf2:	829a      	strh	r2, [r3, #20]
 802cdf4:	e002      	b.n	802cdfc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 802cdf6:	68fb      	ldr	r3, [r7, #12]
 802cdf8:	2200      	movs	r2, #0
 802cdfa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 802cdfc:	68fb      	ldr	r3, [r7, #12]
 802cdfe:	8b3a      	ldrh	r2, [r7, #24]
 802ce00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 802ce02:	8b3b      	ldrh	r3, [r7, #24]
 802ce04:	461a      	mov	r2, r3
 802ce06:	6879      	ldr	r1, [r7, #4]
 802ce08:	68f8      	ldr	r0, [r7, #12]
 802ce0a:	f000 fb3d 	bl	802d488 <USBH_CtlReq>
 802ce0e:	4603      	mov	r3, r0
}
 802ce10:	4618      	mov	r0, r3
 802ce12:	3710      	adds	r7, #16
 802ce14:	46bd      	mov	sp, r7
 802ce16:	bd80      	pop	{r7, pc}

0802ce18 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 802ce18:	b580      	push	{r7, lr}
 802ce1a:	b082      	sub	sp, #8
 802ce1c:	af00      	add	r7, sp, #0
 802ce1e:	6078      	str	r0, [r7, #4]
 802ce20:	460b      	mov	r3, r1
 802ce22:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802ce24:	687b      	ldr	r3, [r7, #4]
 802ce26:	789b      	ldrb	r3, [r3, #2]
 802ce28:	2b01      	cmp	r3, #1
 802ce2a:	d10f      	bne.n	802ce4c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 802ce2c:	687b      	ldr	r3, [r7, #4]
 802ce2e:	2200      	movs	r2, #0
 802ce30:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 802ce32:	687b      	ldr	r3, [r7, #4]
 802ce34:	2205      	movs	r2, #5
 802ce36:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 802ce38:	78fb      	ldrb	r3, [r7, #3]
 802ce3a:	b29a      	uxth	r2, r3
 802ce3c:	687b      	ldr	r3, [r7, #4]
 802ce3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802ce40:	687b      	ldr	r3, [r7, #4]
 802ce42:	2200      	movs	r2, #0
 802ce44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802ce46:	687b      	ldr	r3, [r7, #4]
 802ce48:	2200      	movs	r2, #0
 802ce4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802ce4c:	2200      	movs	r2, #0
 802ce4e:	2100      	movs	r1, #0
 802ce50:	6878      	ldr	r0, [r7, #4]
 802ce52:	f000 fb19 	bl	802d488 <USBH_CtlReq>
 802ce56:	4603      	mov	r3, r0
}
 802ce58:	4618      	mov	r0, r3
 802ce5a:	3708      	adds	r7, #8
 802ce5c:	46bd      	mov	sp, r7
 802ce5e:	bd80      	pop	{r7, pc}

0802ce60 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 802ce60:	b580      	push	{r7, lr}
 802ce62:	b082      	sub	sp, #8
 802ce64:	af00      	add	r7, sp, #0
 802ce66:	6078      	str	r0, [r7, #4]
 802ce68:	460b      	mov	r3, r1
 802ce6a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 802ce6c:	687b      	ldr	r3, [r7, #4]
 802ce6e:	789b      	ldrb	r3, [r3, #2]
 802ce70:	2b01      	cmp	r3, #1
 802ce72:	d10e      	bne.n	802ce92 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802ce74:	687b      	ldr	r3, [r7, #4]
 802ce76:	2200      	movs	r2, #0
 802ce78:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 802ce7a:	687b      	ldr	r3, [r7, #4]
 802ce7c:	2209      	movs	r2, #9
 802ce7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 802ce80:	687b      	ldr	r3, [r7, #4]
 802ce82:	887a      	ldrh	r2, [r7, #2]
 802ce84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802ce86:	687b      	ldr	r3, [r7, #4]
 802ce88:	2200      	movs	r2, #0
 802ce8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802ce8c:	687b      	ldr	r3, [r7, #4]
 802ce8e:	2200      	movs	r2, #0
 802ce90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802ce92:	2200      	movs	r2, #0
 802ce94:	2100      	movs	r1, #0
 802ce96:	6878      	ldr	r0, [r7, #4]
 802ce98:	f000 faf6 	bl	802d488 <USBH_CtlReq>
 802ce9c:	4603      	mov	r3, r0
}
 802ce9e:	4618      	mov	r0, r3
 802cea0:	3708      	adds	r7, #8
 802cea2:	46bd      	mov	sp, r7
 802cea4:	bd80      	pop	{r7, pc}

0802cea6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 802cea6:	b580      	push	{r7, lr}
 802cea8:	b082      	sub	sp, #8
 802ceaa:	af00      	add	r7, sp, #0
 802ceac:	6078      	str	r0, [r7, #4]
 802ceae:	460b      	mov	r3, r1
 802ceb0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802ceb2:	687b      	ldr	r3, [r7, #4]
 802ceb4:	789b      	ldrb	r3, [r3, #2]
 802ceb6:	2b01      	cmp	r3, #1
 802ceb8:	d10f      	bne.n	802ceda <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802ceba:	687b      	ldr	r3, [r7, #4]
 802cebc:	2200      	movs	r2, #0
 802cebe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 802cec0:	687b      	ldr	r3, [r7, #4]
 802cec2:	2203      	movs	r2, #3
 802cec4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 802cec6:	78fb      	ldrb	r3, [r7, #3]
 802cec8:	b29a      	uxth	r2, r3
 802ceca:	687b      	ldr	r3, [r7, #4]
 802cecc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802cece:	687b      	ldr	r3, [r7, #4]
 802ced0:	2200      	movs	r2, #0
 802ced2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802ced4:	687b      	ldr	r3, [r7, #4]
 802ced6:	2200      	movs	r2, #0
 802ced8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802ceda:	2200      	movs	r2, #0
 802cedc:	2100      	movs	r1, #0
 802cede:	6878      	ldr	r0, [r7, #4]
 802cee0:	f000 fad2 	bl	802d488 <USBH_CtlReq>
 802cee4:	4603      	mov	r3, r0
}
 802cee6:	4618      	mov	r0, r3
 802cee8:	3708      	adds	r7, #8
 802ceea:	46bd      	mov	sp, r7
 802ceec:	bd80      	pop	{r7, pc}

0802ceee <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 802ceee:	b580      	push	{r7, lr}
 802cef0:	b082      	sub	sp, #8
 802cef2:	af00      	add	r7, sp, #0
 802cef4:	6078      	str	r0, [r7, #4]
 802cef6:	460b      	mov	r3, r1
 802cef8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802cefa:	687b      	ldr	r3, [r7, #4]
 802cefc:	789b      	ldrb	r3, [r3, #2]
 802cefe:	2b01      	cmp	r3, #1
 802cf00:	d10f      	bne.n	802cf22 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 802cf02:	687b      	ldr	r3, [r7, #4]
 802cf04:	2202      	movs	r2, #2
 802cf06:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 802cf08:	687b      	ldr	r3, [r7, #4]
 802cf0a:	2201      	movs	r2, #1
 802cf0c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 802cf0e:	687b      	ldr	r3, [r7, #4]
 802cf10:	2200      	movs	r2, #0
 802cf12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 802cf14:	78fb      	ldrb	r3, [r7, #3]
 802cf16:	b29a      	uxth	r2, r3
 802cf18:	687b      	ldr	r3, [r7, #4]
 802cf1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802cf1c:	687b      	ldr	r3, [r7, #4]
 802cf1e:	2200      	movs	r2, #0
 802cf20:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 802cf22:	2200      	movs	r2, #0
 802cf24:	2100      	movs	r1, #0
 802cf26:	6878      	ldr	r0, [r7, #4]
 802cf28:	f000 faae 	bl	802d488 <USBH_CtlReq>
 802cf2c:	4603      	mov	r3, r0
}
 802cf2e:	4618      	mov	r0, r3
 802cf30:	3708      	adds	r7, #8
 802cf32:	46bd      	mov	sp, r7
 802cf34:	bd80      	pop	{r7, pc}

0802cf36 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 802cf36:	b480      	push	{r7}
 802cf38:	b085      	sub	sp, #20
 802cf3a:	af00      	add	r7, sp, #0
 802cf3c:	60f8      	str	r0, [r7, #12]
 802cf3e:	60b9      	str	r1, [r7, #8]
 802cf40:	4613      	mov	r3, r2
 802cf42:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 802cf44:	68bb      	ldr	r3, [r7, #8]
 802cf46:	781a      	ldrb	r2, [r3, #0]
 802cf48:	68fb      	ldr	r3, [r7, #12]
 802cf4a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 802cf4c:	68bb      	ldr	r3, [r7, #8]
 802cf4e:	785a      	ldrb	r2, [r3, #1]
 802cf50:	68fb      	ldr	r3, [r7, #12]
 802cf52:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 802cf54:	68bb      	ldr	r3, [r7, #8]
 802cf56:	3302      	adds	r3, #2
 802cf58:	781b      	ldrb	r3, [r3, #0]
 802cf5a:	b29a      	uxth	r2, r3
 802cf5c:	68bb      	ldr	r3, [r7, #8]
 802cf5e:	3303      	adds	r3, #3
 802cf60:	781b      	ldrb	r3, [r3, #0]
 802cf62:	b29b      	uxth	r3, r3
 802cf64:	021b      	lsls	r3, r3, #8
 802cf66:	b29b      	uxth	r3, r3
 802cf68:	4313      	orrs	r3, r2
 802cf6a:	b29a      	uxth	r2, r3
 802cf6c:	68fb      	ldr	r3, [r7, #12]
 802cf6e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 802cf70:	68bb      	ldr	r3, [r7, #8]
 802cf72:	791a      	ldrb	r2, [r3, #4]
 802cf74:	68fb      	ldr	r3, [r7, #12]
 802cf76:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 802cf78:	68bb      	ldr	r3, [r7, #8]
 802cf7a:	795a      	ldrb	r2, [r3, #5]
 802cf7c:	68fb      	ldr	r3, [r7, #12]
 802cf7e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 802cf80:	68bb      	ldr	r3, [r7, #8]
 802cf82:	799a      	ldrb	r2, [r3, #6]
 802cf84:	68fb      	ldr	r3, [r7, #12]
 802cf86:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 802cf88:	68bb      	ldr	r3, [r7, #8]
 802cf8a:	79da      	ldrb	r2, [r3, #7]
 802cf8c:	68fb      	ldr	r3, [r7, #12]
 802cf8e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 802cf90:	68fb      	ldr	r3, [r7, #12]
 802cf92:	79db      	ldrb	r3, [r3, #7]
 802cf94:	2b20      	cmp	r3, #32
 802cf96:	dc11      	bgt.n	802cfbc <USBH_ParseDevDesc+0x86>
 802cf98:	2b08      	cmp	r3, #8
 802cf9a:	db16      	blt.n	802cfca <USBH_ParseDevDesc+0x94>
 802cf9c:	3b08      	subs	r3, #8
 802cf9e:	2201      	movs	r2, #1
 802cfa0:	fa02 f303 	lsl.w	r3, r2, r3
 802cfa4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 802cfa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802cfac:	2b00      	cmp	r3, #0
 802cfae:	bf14      	ite	ne
 802cfb0:	2301      	movne	r3, #1
 802cfb2:	2300      	moveq	r3, #0
 802cfb4:	b2db      	uxtb	r3, r3
 802cfb6:	2b00      	cmp	r3, #0
 802cfb8:	d102      	bne.n	802cfc0 <USBH_ParseDevDesc+0x8a>
 802cfba:	e006      	b.n	802cfca <USBH_ParseDevDesc+0x94>
 802cfbc:	2b40      	cmp	r3, #64	; 0x40
 802cfbe:	d104      	bne.n	802cfca <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 802cfc0:	68fb      	ldr	r3, [r7, #12]
 802cfc2:	79da      	ldrb	r2, [r3, #7]
 802cfc4:	68fb      	ldr	r3, [r7, #12]
 802cfc6:	71da      	strb	r2, [r3, #7]
      break;
 802cfc8:	e003      	b.n	802cfd2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 802cfca:	68fb      	ldr	r3, [r7, #12]
 802cfcc:	2240      	movs	r2, #64	; 0x40
 802cfce:	71da      	strb	r2, [r3, #7]
      break;
 802cfd0:	bf00      	nop
  }

  if (length > 8U)
 802cfd2:	88fb      	ldrh	r3, [r7, #6]
 802cfd4:	2b08      	cmp	r3, #8
 802cfd6:	d939      	bls.n	802d04c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 802cfd8:	68bb      	ldr	r3, [r7, #8]
 802cfda:	3308      	adds	r3, #8
 802cfdc:	781b      	ldrb	r3, [r3, #0]
 802cfde:	b29a      	uxth	r2, r3
 802cfe0:	68bb      	ldr	r3, [r7, #8]
 802cfe2:	3309      	adds	r3, #9
 802cfe4:	781b      	ldrb	r3, [r3, #0]
 802cfe6:	b29b      	uxth	r3, r3
 802cfe8:	021b      	lsls	r3, r3, #8
 802cfea:	b29b      	uxth	r3, r3
 802cfec:	4313      	orrs	r3, r2
 802cfee:	b29a      	uxth	r2, r3
 802cff0:	68fb      	ldr	r3, [r7, #12]
 802cff2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 802cff4:	68bb      	ldr	r3, [r7, #8]
 802cff6:	330a      	adds	r3, #10
 802cff8:	781b      	ldrb	r3, [r3, #0]
 802cffa:	b29a      	uxth	r2, r3
 802cffc:	68bb      	ldr	r3, [r7, #8]
 802cffe:	330b      	adds	r3, #11
 802d000:	781b      	ldrb	r3, [r3, #0]
 802d002:	b29b      	uxth	r3, r3
 802d004:	021b      	lsls	r3, r3, #8
 802d006:	b29b      	uxth	r3, r3
 802d008:	4313      	orrs	r3, r2
 802d00a:	b29a      	uxth	r2, r3
 802d00c:	68fb      	ldr	r3, [r7, #12]
 802d00e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 802d010:	68bb      	ldr	r3, [r7, #8]
 802d012:	330c      	adds	r3, #12
 802d014:	781b      	ldrb	r3, [r3, #0]
 802d016:	b29a      	uxth	r2, r3
 802d018:	68bb      	ldr	r3, [r7, #8]
 802d01a:	330d      	adds	r3, #13
 802d01c:	781b      	ldrb	r3, [r3, #0]
 802d01e:	b29b      	uxth	r3, r3
 802d020:	021b      	lsls	r3, r3, #8
 802d022:	b29b      	uxth	r3, r3
 802d024:	4313      	orrs	r3, r2
 802d026:	b29a      	uxth	r2, r3
 802d028:	68fb      	ldr	r3, [r7, #12]
 802d02a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 802d02c:	68bb      	ldr	r3, [r7, #8]
 802d02e:	7b9a      	ldrb	r2, [r3, #14]
 802d030:	68fb      	ldr	r3, [r7, #12]
 802d032:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 802d034:	68bb      	ldr	r3, [r7, #8]
 802d036:	7bda      	ldrb	r2, [r3, #15]
 802d038:	68fb      	ldr	r3, [r7, #12]
 802d03a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 802d03c:	68bb      	ldr	r3, [r7, #8]
 802d03e:	7c1a      	ldrb	r2, [r3, #16]
 802d040:	68fb      	ldr	r3, [r7, #12]
 802d042:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 802d044:	68bb      	ldr	r3, [r7, #8]
 802d046:	7c5a      	ldrb	r2, [r3, #17]
 802d048:	68fb      	ldr	r3, [r7, #12]
 802d04a:	745a      	strb	r2, [r3, #17]
  }
}
 802d04c:	bf00      	nop
 802d04e:	3714      	adds	r7, #20
 802d050:	46bd      	mov	sp, r7
 802d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d056:	4770      	bx	lr

0802d058 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 802d058:	b580      	push	{r7, lr}
 802d05a:	b08c      	sub	sp, #48	; 0x30
 802d05c:	af00      	add	r7, sp, #0
 802d05e:	60f8      	str	r0, [r7, #12]
 802d060:	60b9      	str	r1, [r7, #8]
 802d062:	4613      	mov	r3, r2
 802d064:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 802d066:	68fb      	ldr	r3, [r7, #12]
 802d068:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802d06c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 802d06e:	2300      	movs	r3, #0
 802d070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 802d074:	68bb      	ldr	r3, [r7, #8]
 802d076:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 802d078:	2300      	movs	r3, #0
 802d07a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 802d07e:	2300      	movs	r3, #0
 802d080:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 802d084:	68bb      	ldr	r3, [r7, #8]
 802d086:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 802d088:	68bb      	ldr	r3, [r7, #8]
 802d08a:	781a      	ldrb	r2, [r3, #0]
 802d08c:	6a3b      	ldr	r3, [r7, #32]
 802d08e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 802d090:	68bb      	ldr	r3, [r7, #8]
 802d092:	785a      	ldrb	r2, [r3, #1]
 802d094:	6a3b      	ldr	r3, [r7, #32]
 802d096:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 802d098:	68bb      	ldr	r3, [r7, #8]
 802d09a:	3302      	adds	r3, #2
 802d09c:	781b      	ldrb	r3, [r3, #0]
 802d09e:	b29a      	uxth	r2, r3
 802d0a0:	68bb      	ldr	r3, [r7, #8]
 802d0a2:	3303      	adds	r3, #3
 802d0a4:	781b      	ldrb	r3, [r3, #0]
 802d0a6:	b29b      	uxth	r3, r3
 802d0a8:	021b      	lsls	r3, r3, #8
 802d0aa:	b29b      	uxth	r3, r3
 802d0ac:	4313      	orrs	r3, r2
 802d0ae:	b29b      	uxth	r3, r3
 802d0b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802d0b4:	bf28      	it	cs
 802d0b6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 802d0ba:	b29a      	uxth	r2, r3
 802d0bc:	6a3b      	ldr	r3, [r7, #32]
 802d0be:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 802d0c0:	68bb      	ldr	r3, [r7, #8]
 802d0c2:	791a      	ldrb	r2, [r3, #4]
 802d0c4:	6a3b      	ldr	r3, [r7, #32]
 802d0c6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 802d0c8:	68bb      	ldr	r3, [r7, #8]
 802d0ca:	795a      	ldrb	r2, [r3, #5]
 802d0cc:	6a3b      	ldr	r3, [r7, #32]
 802d0ce:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 802d0d0:	68bb      	ldr	r3, [r7, #8]
 802d0d2:	799a      	ldrb	r2, [r3, #6]
 802d0d4:	6a3b      	ldr	r3, [r7, #32]
 802d0d6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 802d0d8:	68bb      	ldr	r3, [r7, #8]
 802d0da:	79da      	ldrb	r2, [r3, #7]
 802d0dc:	6a3b      	ldr	r3, [r7, #32]
 802d0de:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 802d0e0:	68bb      	ldr	r3, [r7, #8]
 802d0e2:	7a1a      	ldrb	r2, [r3, #8]
 802d0e4:	6a3b      	ldr	r3, [r7, #32]
 802d0e6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 802d0e8:	6a3b      	ldr	r3, [r7, #32]
 802d0ea:	781b      	ldrb	r3, [r3, #0]
 802d0ec:	2b09      	cmp	r3, #9
 802d0ee:	d002      	beq.n	802d0f6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 802d0f0:	6a3b      	ldr	r3, [r7, #32]
 802d0f2:	2209      	movs	r2, #9
 802d0f4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 802d0f6:	88fb      	ldrh	r3, [r7, #6]
 802d0f8:	2b09      	cmp	r3, #9
 802d0fa:	f240 809d 	bls.w	802d238 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 802d0fe:	2309      	movs	r3, #9
 802d100:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 802d102:	2300      	movs	r3, #0
 802d104:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802d106:	e081      	b.n	802d20c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802d108:	f107 0316 	add.w	r3, r7, #22
 802d10c:	4619      	mov	r1, r3
 802d10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d110:	f000 f99f 	bl	802d452 <USBH_GetNextDesc>
 802d114:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 802d116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d118:	785b      	ldrb	r3, [r3, #1]
 802d11a:	2b04      	cmp	r3, #4
 802d11c:	d176      	bne.n	802d20c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 802d11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d120:	781b      	ldrb	r3, [r3, #0]
 802d122:	2b09      	cmp	r3, #9
 802d124:	d002      	beq.n	802d12c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 802d126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d128:	2209      	movs	r2, #9
 802d12a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 802d12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d130:	221a      	movs	r2, #26
 802d132:	fb02 f303 	mul.w	r3, r2, r3
 802d136:	3308      	adds	r3, #8
 802d138:	6a3a      	ldr	r2, [r7, #32]
 802d13a:	4413      	add	r3, r2
 802d13c:	3302      	adds	r3, #2
 802d13e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 802d140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802d142:	69f8      	ldr	r0, [r7, #28]
 802d144:	f000 f87e 	bl	802d244 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 802d148:	2300      	movs	r3, #0
 802d14a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 802d14e:	2300      	movs	r3, #0
 802d150:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802d152:	e043      	b.n	802d1dc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802d154:	f107 0316 	add.w	r3, r7, #22
 802d158:	4619      	mov	r1, r3
 802d15a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d15c:	f000 f979 	bl	802d452 <USBH_GetNextDesc>
 802d160:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802d162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d164:	785b      	ldrb	r3, [r3, #1]
 802d166:	2b05      	cmp	r3, #5
 802d168:	d138      	bne.n	802d1dc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 802d16a:	69fb      	ldr	r3, [r7, #28]
 802d16c:	795b      	ldrb	r3, [r3, #5]
 802d16e:	2b01      	cmp	r3, #1
 802d170:	d10f      	bne.n	802d192 <USBH_ParseCfgDesc+0x13a>
 802d172:	69fb      	ldr	r3, [r7, #28]
 802d174:	799b      	ldrb	r3, [r3, #6]
 802d176:	2b02      	cmp	r3, #2
 802d178:	d10b      	bne.n	802d192 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802d17a:	69fb      	ldr	r3, [r7, #28]
 802d17c:	79db      	ldrb	r3, [r3, #7]
 802d17e:	2b00      	cmp	r3, #0
 802d180:	d10f      	bne.n	802d1a2 <USBH_ParseCfgDesc+0x14a>
 802d182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d184:	781b      	ldrb	r3, [r3, #0]
 802d186:	2b09      	cmp	r3, #9
 802d188:	d00b      	beq.n	802d1a2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 802d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d18c:	2209      	movs	r2, #9
 802d18e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802d190:	e007      	b.n	802d1a2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 802d192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d194:	781b      	ldrb	r3, [r3, #0]
 802d196:	2b07      	cmp	r3, #7
 802d198:	d004      	beq.n	802d1a4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 802d19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d19c:	2207      	movs	r2, #7
 802d19e:	701a      	strb	r2, [r3, #0]
 802d1a0:	e000      	b.n	802d1a4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802d1a2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 802d1a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d1a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802d1ac:	3201      	adds	r2, #1
 802d1ae:	00d2      	lsls	r2, r2, #3
 802d1b0:	211a      	movs	r1, #26
 802d1b2:	fb01 f303 	mul.w	r3, r1, r3
 802d1b6:	4413      	add	r3, r2
 802d1b8:	3308      	adds	r3, #8
 802d1ba:	6a3a      	ldr	r2, [r7, #32]
 802d1bc:	4413      	add	r3, r2
 802d1be:	3304      	adds	r3, #4
 802d1c0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 802d1c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d1c4:	69b9      	ldr	r1, [r7, #24]
 802d1c6:	68f8      	ldr	r0, [r7, #12]
 802d1c8:	f000 f86b 	bl	802d2a2 <USBH_ParseEPDesc>
 802d1cc:	4603      	mov	r3, r0
 802d1ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 802d1d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802d1d6:	3301      	adds	r3, #1
 802d1d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802d1dc:	69fb      	ldr	r3, [r7, #28]
 802d1de:	791b      	ldrb	r3, [r3, #4]
 802d1e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802d1e4:	429a      	cmp	r2, r3
 802d1e6:	d204      	bcs.n	802d1f2 <USBH_ParseCfgDesc+0x19a>
 802d1e8:	6a3b      	ldr	r3, [r7, #32]
 802d1ea:	885a      	ldrh	r2, [r3, #2]
 802d1ec:	8afb      	ldrh	r3, [r7, #22]
 802d1ee:	429a      	cmp	r2, r3
 802d1f0:	d8b0      	bhi.n	802d154 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 802d1f2:	69fb      	ldr	r3, [r7, #28]
 802d1f4:	791b      	ldrb	r3, [r3, #4]
 802d1f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802d1fa:	429a      	cmp	r2, r3
 802d1fc:	d201      	bcs.n	802d202 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 802d1fe:	2303      	movs	r3, #3
 802d200:	e01c      	b.n	802d23c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 802d202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d206:	3301      	adds	r3, #1
 802d208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802d20c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d210:	2b01      	cmp	r3, #1
 802d212:	d805      	bhi.n	802d220 <USBH_ParseCfgDesc+0x1c8>
 802d214:	6a3b      	ldr	r3, [r7, #32]
 802d216:	885a      	ldrh	r2, [r3, #2]
 802d218:	8afb      	ldrh	r3, [r7, #22]
 802d21a:	429a      	cmp	r2, r3
 802d21c:	f63f af74 	bhi.w	802d108 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 802d220:	6a3b      	ldr	r3, [r7, #32]
 802d222:	791b      	ldrb	r3, [r3, #4]
 802d224:	2b02      	cmp	r3, #2
 802d226:	bf28      	it	cs
 802d228:	2302      	movcs	r3, #2
 802d22a:	b2db      	uxtb	r3, r3
 802d22c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802d230:	429a      	cmp	r2, r3
 802d232:	d201      	bcs.n	802d238 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 802d234:	2303      	movs	r3, #3
 802d236:	e001      	b.n	802d23c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 802d238:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802d23c:	4618      	mov	r0, r3
 802d23e:	3730      	adds	r7, #48	; 0x30
 802d240:	46bd      	mov	sp, r7
 802d242:	bd80      	pop	{r7, pc}

0802d244 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 802d244:	b480      	push	{r7}
 802d246:	b083      	sub	sp, #12
 802d248:	af00      	add	r7, sp, #0
 802d24a:	6078      	str	r0, [r7, #4]
 802d24c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 802d24e:	683b      	ldr	r3, [r7, #0]
 802d250:	781a      	ldrb	r2, [r3, #0]
 802d252:	687b      	ldr	r3, [r7, #4]
 802d254:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 802d256:	683b      	ldr	r3, [r7, #0]
 802d258:	785a      	ldrb	r2, [r3, #1]
 802d25a:	687b      	ldr	r3, [r7, #4]
 802d25c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 802d25e:	683b      	ldr	r3, [r7, #0]
 802d260:	789a      	ldrb	r2, [r3, #2]
 802d262:	687b      	ldr	r3, [r7, #4]
 802d264:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 802d266:	683b      	ldr	r3, [r7, #0]
 802d268:	78da      	ldrb	r2, [r3, #3]
 802d26a:	687b      	ldr	r3, [r7, #4]
 802d26c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 802d26e:	683b      	ldr	r3, [r7, #0]
 802d270:	791a      	ldrb	r2, [r3, #4]
 802d272:	687b      	ldr	r3, [r7, #4]
 802d274:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 802d276:	683b      	ldr	r3, [r7, #0]
 802d278:	795a      	ldrb	r2, [r3, #5]
 802d27a:	687b      	ldr	r3, [r7, #4]
 802d27c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 802d27e:	683b      	ldr	r3, [r7, #0]
 802d280:	799a      	ldrb	r2, [r3, #6]
 802d282:	687b      	ldr	r3, [r7, #4]
 802d284:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 802d286:	683b      	ldr	r3, [r7, #0]
 802d288:	79da      	ldrb	r2, [r3, #7]
 802d28a:	687b      	ldr	r3, [r7, #4]
 802d28c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 802d28e:	683b      	ldr	r3, [r7, #0]
 802d290:	7a1a      	ldrb	r2, [r3, #8]
 802d292:	687b      	ldr	r3, [r7, #4]
 802d294:	721a      	strb	r2, [r3, #8]
}
 802d296:	bf00      	nop
 802d298:	370c      	adds	r7, #12
 802d29a:	46bd      	mov	sp, r7
 802d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d2a0:	4770      	bx	lr

0802d2a2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 802d2a2:	b480      	push	{r7}
 802d2a4:	b087      	sub	sp, #28
 802d2a6:	af00      	add	r7, sp, #0
 802d2a8:	60f8      	str	r0, [r7, #12]
 802d2aa:	60b9      	str	r1, [r7, #8]
 802d2ac:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 802d2ae:	2300      	movs	r3, #0
 802d2b0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 802d2b2:	687b      	ldr	r3, [r7, #4]
 802d2b4:	781a      	ldrb	r2, [r3, #0]
 802d2b6:	68bb      	ldr	r3, [r7, #8]
 802d2b8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 802d2ba:	687b      	ldr	r3, [r7, #4]
 802d2bc:	785a      	ldrb	r2, [r3, #1]
 802d2be:	68bb      	ldr	r3, [r7, #8]
 802d2c0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 802d2c2:	687b      	ldr	r3, [r7, #4]
 802d2c4:	789a      	ldrb	r2, [r3, #2]
 802d2c6:	68bb      	ldr	r3, [r7, #8]
 802d2c8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 802d2ca:	687b      	ldr	r3, [r7, #4]
 802d2cc:	78da      	ldrb	r2, [r3, #3]
 802d2ce:	68bb      	ldr	r3, [r7, #8]
 802d2d0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 802d2d2:	687b      	ldr	r3, [r7, #4]
 802d2d4:	3304      	adds	r3, #4
 802d2d6:	781b      	ldrb	r3, [r3, #0]
 802d2d8:	b29a      	uxth	r2, r3
 802d2da:	687b      	ldr	r3, [r7, #4]
 802d2dc:	3305      	adds	r3, #5
 802d2de:	781b      	ldrb	r3, [r3, #0]
 802d2e0:	b29b      	uxth	r3, r3
 802d2e2:	021b      	lsls	r3, r3, #8
 802d2e4:	b29b      	uxth	r3, r3
 802d2e6:	4313      	orrs	r3, r2
 802d2e8:	b29a      	uxth	r2, r3
 802d2ea:	68bb      	ldr	r3, [r7, #8]
 802d2ec:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 802d2ee:	687b      	ldr	r3, [r7, #4]
 802d2f0:	799a      	ldrb	r2, [r3, #6]
 802d2f2:	68bb      	ldr	r3, [r7, #8]
 802d2f4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 802d2f6:	68bb      	ldr	r3, [r7, #8]
 802d2f8:	889b      	ldrh	r3, [r3, #4]
 802d2fa:	2b00      	cmp	r3, #0
 802d2fc:	d102      	bne.n	802d304 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 802d2fe:	2303      	movs	r3, #3
 802d300:	75fb      	strb	r3, [r7, #23]
 802d302:	e033      	b.n	802d36c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 802d304:	68bb      	ldr	r3, [r7, #8]
 802d306:	889b      	ldrh	r3, [r3, #4]
 802d308:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802d30c:	f023 0307 	bic.w	r3, r3, #7
 802d310:	b29a      	uxth	r2, r3
 802d312:	68bb      	ldr	r3, [r7, #8]
 802d314:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 802d316:	68bb      	ldr	r3, [r7, #8]
 802d318:	889b      	ldrh	r3, [r3, #4]
 802d31a:	b21a      	sxth	r2, r3
 802d31c:	687b      	ldr	r3, [r7, #4]
 802d31e:	3304      	adds	r3, #4
 802d320:	781b      	ldrb	r3, [r3, #0]
 802d322:	b299      	uxth	r1, r3
 802d324:	687b      	ldr	r3, [r7, #4]
 802d326:	3305      	adds	r3, #5
 802d328:	781b      	ldrb	r3, [r3, #0]
 802d32a:	b29b      	uxth	r3, r3
 802d32c:	021b      	lsls	r3, r3, #8
 802d32e:	b29b      	uxth	r3, r3
 802d330:	430b      	orrs	r3, r1
 802d332:	b29b      	uxth	r3, r3
 802d334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802d338:	2b00      	cmp	r3, #0
 802d33a:	d110      	bne.n	802d35e <USBH_ParseEPDesc+0xbc>
 802d33c:	687b      	ldr	r3, [r7, #4]
 802d33e:	3304      	adds	r3, #4
 802d340:	781b      	ldrb	r3, [r3, #0]
 802d342:	b299      	uxth	r1, r3
 802d344:	687b      	ldr	r3, [r7, #4]
 802d346:	3305      	adds	r3, #5
 802d348:	781b      	ldrb	r3, [r3, #0]
 802d34a:	b29b      	uxth	r3, r3
 802d34c:	021b      	lsls	r3, r3, #8
 802d34e:	b29b      	uxth	r3, r3
 802d350:	430b      	orrs	r3, r1
 802d352:	b29b      	uxth	r3, r3
 802d354:	b21b      	sxth	r3, r3
 802d356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802d35a:	b21b      	sxth	r3, r3
 802d35c:	e001      	b.n	802d362 <USBH_ParseEPDesc+0xc0>
 802d35e:	f44f 7300 	mov.w	r3, #512	; 0x200
 802d362:	4313      	orrs	r3, r2
 802d364:	b21b      	sxth	r3, r3
 802d366:	b29a      	uxth	r2, r3
 802d368:	68bb      	ldr	r3, [r7, #8]
 802d36a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 802d36c:	68fb      	ldr	r3, [r7, #12]
 802d36e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802d372:	2b00      	cmp	r3, #0
 802d374:	d116      	bne.n	802d3a4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802d376:	68bb      	ldr	r3, [r7, #8]
 802d378:	78db      	ldrb	r3, [r3, #3]
 802d37a:	f003 0303 	and.w	r3, r3, #3
 802d37e:	2b01      	cmp	r3, #1
 802d380:	d005      	beq.n	802d38e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 802d382:	68bb      	ldr	r3, [r7, #8]
 802d384:	78db      	ldrb	r3, [r3, #3]
 802d386:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802d38a:	2b03      	cmp	r3, #3
 802d38c:	d127      	bne.n	802d3de <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802d38e:	68bb      	ldr	r3, [r7, #8]
 802d390:	799b      	ldrb	r3, [r3, #6]
 802d392:	2b00      	cmp	r3, #0
 802d394:	d003      	beq.n	802d39e <USBH_ParseEPDesc+0xfc>
 802d396:	68bb      	ldr	r3, [r7, #8]
 802d398:	799b      	ldrb	r3, [r3, #6]
 802d39a:	2b10      	cmp	r3, #16
 802d39c:	d91f      	bls.n	802d3de <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802d39e:	2303      	movs	r3, #3
 802d3a0:	75fb      	strb	r3, [r7, #23]
 802d3a2:	e01c      	b.n	802d3de <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 802d3a4:	68bb      	ldr	r3, [r7, #8]
 802d3a6:	78db      	ldrb	r3, [r3, #3]
 802d3a8:	f003 0303 	and.w	r3, r3, #3
 802d3ac:	2b01      	cmp	r3, #1
 802d3ae:	d10a      	bne.n	802d3c6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802d3b0:	68bb      	ldr	r3, [r7, #8]
 802d3b2:	799b      	ldrb	r3, [r3, #6]
 802d3b4:	2b00      	cmp	r3, #0
 802d3b6:	d003      	beq.n	802d3c0 <USBH_ParseEPDesc+0x11e>
 802d3b8:	68bb      	ldr	r3, [r7, #8]
 802d3ba:	799b      	ldrb	r3, [r3, #6]
 802d3bc:	2b10      	cmp	r3, #16
 802d3be:	d90e      	bls.n	802d3de <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802d3c0:	2303      	movs	r3, #3
 802d3c2:	75fb      	strb	r3, [r7, #23]
 802d3c4:	e00b      	b.n	802d3de <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 802d3c6:	68bb      	ldr	r3, [r7, #8]
 802d3c8:	78db      	ldrb	r3, [r3, #3]
 802d3ca:	f003 0303 	and.w	r3, r3, #3
 802d3ce:	2b03      	cmp	r3, #3
 802d3d0:	d105      	bne.n	802d3de <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 802d3d2:	68bb      	ldr	r3, [r7, #8]
 802d3d4:	799b      	ldrb	r3, [r3, #6]
 802d3d6:	2b00      	cmp	r3, #0
 802d3d8:	d101      	bne.n	802d3de <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802d3da:	2303      	movs	r3, #3
 802d3dc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 802d3de:	7dfb      	ldrb	r3, [r7, #23]
}
 802d3e0:	4618      	mov	r0, r3
 802d3e2:	371c      	adds	r7, #28
 802d3e4:	46bd      	mov	sp, r7
 802d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d3ea:	4770      	bx	lr

0802d3ec <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 802d3ec:	b480      	push	{r7}
 802d3ee:	b087      	sub	sp, #28
 802d3f0:	af00      	add	r7, sp, #0
 802d3f2:	60f8      	str	r0, [r7, #12]
 802d3f4:	60b9      	str	r1, [r7, #8]
 802d3f6:	4613      	mov	r3, r2
 802d3f8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 802d3fa:	68fb      	ldr	r3, [r7, #12]
 802d3fc:	3301      	adds	r3, #1
 802d3fe:	781b      	ldrb	r3, [r3, #0]
 802d400:	2b03      	cmp	r3, #3
 802d402:	d120      	bne.n	802d446 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 802d404:	68fb      	ldr	r3, [r7, #12]
 802d406:	781b      	ldrb	r3, [r3, #0]
 802d408:	1e9a      	subs	r2, r3, #2
 802d40a:	88fb      	ldrh	r3, [r7, #6]
 802d40c:	4293      	cmp	r3, r2
 802d40e:	bf28      	it	cs
 802d410:	4613      	movcs	r3, r2
 802d412:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 802d414:	68fb      	ldr	r3, [r7, #12]
 802d416:	3302      	adds	r3, #2
 802d418:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 802d41a:	2300      	movs	r3, #0
 802d41c:	82fb      	strh	r3, [r7, #22]
 802d41e:	e00b      	b.n	802d438 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 802d420:	8afb      	ldrh	r3, [r7, #22]
 802d422:	68fa      	ldr	r2, [r7, #12]
 802d424:	4413      	add	r3, r2
 802d426:	781a      	ldrb	r2, [r3, #0]
 802d428:	68bb      	ldr	r3, [r7, #8]
 802d42a:	701a      	strb	r2, [r3, #0]
      pdest++;
 802d42c:	68bb      	ldr	r3, [r7, #8]
 802d42e:	3301      	adds	r3, #1
 802d430:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 802d432:	8afb      	ldrh	r3, [r7, #22]
 802d434:	3302      	adds	r3, #2
 802d436:	82fb      	strh	r3, [r7, #22]
 802d438:	8afa      	ldrh	r2, [r7, #22]
 802d43a:	8abb      	ldrh	r3, [r7, #20]
 802d43c:	429a      	cmp	r2, r3
 802d43e:	d3ef      	bcc.n	802d420 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 802d440:	68bb      	ldr	r3, [r7, #8]
 802d442:	2200      	movs	r2, #0
 802d444:	701a      	strb	r2, [r3, #0]
  }
}
 802d446:	bf00      	nop
 802d448:	371c      	adds	r7, #28
 802d44a:	46bd      	mov	sp, r7
 802d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d450:	4770      	bx	lr

0802d452 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 802d452:	b480      	push	{r7}
 802d454:	b085      	sub	sp, #20
 802d456:	af00      	add	r7, sp, #0
 802d458:	6078      	str	r0, [r7, #4]
 802d45a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 802d45c:	683b      	ldr	r3, [r7, #0]
 802d45e:	881a      	ldrh	r2, [r3, #0]
 802d460:	687b      	ldr	r3, [r7, #4]
 802d462:	781b      	ldrb	r3, [r3, #0]
 802d464:	b29b      	uxth	r3, r3
 802d466:	4413      	add	r3, r2
 802d468:	b29a      	uxth	r2, r3
 802d46a:	683b      	ldr	r3, [r7, #0]
 802d46c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 802d46e:	687b      	ldr	r3, [r7, #4]
 802d470:	781b      	ldrb	r3, [r3, #0]
 802d472:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 802d474:	687b      	ldr	r3, [r7, #4]
 802d476:	4413      	add	r3, r2
 802d478:	60fb      	str	r3, [r7, #12]

  return (pnext);
 802d47a:	68fb      	ldr	r3, [r7, #12]
}
 802d47c:	4618      	mov	r0, r3
 802d47e:	3714      	adds	r7, #20
 802d480:	46bd      	mov	sp, r7
 802d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d486:	4770      	bx	lr

0802d488 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 802d488:	b580      	push	{r7, lr}
 802d48a:	b086      	sub	sp, #24
 802d48c:	af00      	add	r7, sp, #0
 802d48e:	60f8      	str	r0, [r7, #12]
 802d490:	60b9      	str	r1, [r7, #8]
 802d492:	4613      	mov	r3, r2
 802d494:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 802d496:	2301      	movs	r3, #1
 802d498:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 802d49a:	68fb      	ldr	r3, [r7, #12]
 802d49c:	789b      	ldrb	r3, [r3, #2]
 802d49e:	2b01      	cmp	r3, #1
 802d4a0:	d002      	beq.n	802d4a8 <USBH_CtlReq+0x20>
 802d4a2:	2b02      	cmp	r3, #2
 802d4a4:	d00f      	beq.n	802d4c6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 802d4a6:	e027      	b.n	802d4f8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 802d4a8:	68fb      	ldr	r3, [r7, #12]
 802d4aa:	68ba      	ldr	r2, [r7, #8]
 802d4ac:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 802d4ae:	68fb      	ldr	r3, [r7, #12]
 802d4b0:	88fa      	ldrh	r2, [r7, #6]
 802d4b2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 802d4b4:	68fb      	ldr	r3, [r7, #12]
 802d4b6:	2201      	movs	r2, #1
 802d4b8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 802d4ba:	68fb      	ldr	r3, [r7, #12]
 802d4bc:	2202      	movs	r2, #2
 802d4be:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 802d4c0:	2301      	movs	r3, #1
 802d4c2:	75fb      	strb	r3, [r7, #23]
      break;
 802d4c4:	e018      	b.n	802d4f8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 802d4c6:	68f8      	ldr	r0, [r7, #12]
 802d4c8:	f000 f81c 	bl	802d504 <USBH_HandleControl>
 802d4cc:	4603      	mov	r3, r0
 802d4ce:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 802d4d0:	7dfb      	ldrb	r3, [r7, #23]
 802d4d2:	2b00      	cmp	r3, #0
 802d4d4:	d002      	beq.n	802d4dc <USBH_CtlReq+0x54>
 802d4d6:	7dfb      	ldrb	r3, [r7, #23]
 802d4d8:	2b03      	cmp	r3, #3
 802d4da:	d106      	bne.n	802d4ea <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 802d4dc:	68fb      	ldr	r3, [r7, #12]
 802d4de:	2201      	movs	r2, #1
 802d4e0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 802d4e2:	68fb      	ldr	r3, [r7, #12]
 802d4e4:	2200      	movs	r2, #0
 802d4e6:	761a      	strb	r2, [r3, #24]
      break;
 802d4e8:	e005      	b.n	802d4f6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 802d4ea:	7dfb      	ldrb	r3, [r7, #23]
 802d4ec:	2b02      	cmp	r3, #2
 802d4ee:	d102      	bne.n	802d4f6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 802d4f0:	68fb      	ldr	r3, [r7, #12]
 802d4f2:	2201      	movs	r2, #1
 802d4f4:	709a      	strb	r2, [r3, #2]
      break;
 802d4f6:	bf00      	nop
  }
  return status;
 802d4f8:	7dfb      	ldrb	r3, [r7, #23]
}
 802d4fa:	4618      	mov	r0, r3
 802d4fc:	3718      	adds	r7, #24
 802d4fe:	46bd      	mov	sp, r7
 802d500:	bd80      	pop	{r7, pc}
	...

0802d504 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 802d504:	b580      	push	{r7, lr}
 802d506:	b086      	sub	sp, #24
 802d508:	af02      	add	r7, sp, #8
 802d50a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 802d50c:	2301      	movs	r3, #1
 802d50e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802d510:	2300      	movs	r3, #0
 802d512:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 802d514:	687b      	ldr	r3, [r7, #4]
 802d516:	7e1b      	ldrb	r3, [r3, #24]
 802d518:	3b01      	subs	r3, #1
 802d51a:	2b0a      	cmp	r3, #10
 802d51c:	f200 8156 	bhi.w	802d7cc <USBH_HandleControl+0x2c8>
 802d520:	a201      	add	r2, pc, #4	; (adr r2, 802d528 <USBH_HandleControl+0x24>)
 802d522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d526:	bf00      	nop
 802d528:	0802d555 	.word	0x0802d555
 802d52c:	0802d56f 	.word	0x0802d56f
 802d530:	0802d5d9 	.word	0x0802d5d9
 802d534:	0802d5ff 	.word	0x0802d5ff
 802d538:	0802d637 	.word	0x0802d637
 802d53c:	0802d661 	.word	0x0802d661
 802d540:	0802d6b3 	.word	0x0802d6b3
 802d544:	0802d6d5 	.word	0x0802d6d5
 802d548:	0802d711 	.word	0x0802d711
 802d54c:	0802d737 	.word	0x0802d737
 802d550:	0802d775 	.word	0x0802d775
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 802d554:	687b      	ldr	r3, [r7, #4]
 802d556:	f103 0110 	add.w	r1, r3, #16
 802d55a:	687b      	ldr	r3, [r7, #4]
 802d55c:	795b      	ldrb	r3, [r3, #5]
 802d55e:	461a      	mov	r2, r3
 802d560:	6878      	ldr	r0, [r7, #4]
 802d562:	f000 f943 	bl	802d7ec <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 802d566:	687b      	ldr	r3, [r7, #4]
 802d568:	2202      	movs	r2, #2
 802d56a:	761a      	strb	r2, [r3, #24]
      break;
 802d56c:	e139      	b.n	802d7e2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802d56e:	687b      	ldr	r3, [r7, #4]
 802d570:	795b      	ldrb	r3, [r3, #5]
 802d572:	4619      	mov	r1, r3
 802d574:	6878      	ldr	r0, [r7, #4]
 802d576:	f000 fccb 	bl	802df10 <USBH_LL_GetURBState>
 802d57a:	4603      	mov	r3, r0
 802d57c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 802d57e:	7bbb      	ldrb	r3, [r7, #14]
 802d580:	2b01      	cmp	r3, #1
 802d582:	d11e      	bne.n	802d5c2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 802d584:	687b      	ldr	r3, [r7, #4]
 802d586:	7c1b      	ldrb	r3, [r3, #16]
 802d588:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802d58c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 802d58e:	687b      	ldr	r3, [r7, #4]
 802d590:	8adb      	ldrh	r3, [r3, #22]
 802d592:	2b00      	cmp	r3, #0
 802d594:	d00a      	beq.n	802d5ac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 802d596:	7b7b      	ldrb	r3, [r7, #13]
 802d598:	2b80      	cmp	r3, #128	; 0x80
 802d59a:	d103      	bne.n	802d5a4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 802d59c:	687b      	ldr	r3, [r7, #4]
 802d59e:	2203      	movs	r2, #3
 802d5a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d5a2:	e115      	b.n	802d7d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 802d5a4:	687b      	ldr	r3, [r7, #4]
 802d5a6:	2205      	movs	r2, #5
 802d5a8:	761a      	strb	r2, [r3, #24]
      break;
 802d5aa:	e111      	b.n	802d7d0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 802d5ac:	7b7b      	ldrb	r3, [r7, #13]
 802d5ae:	2b80      	cmp	r3, #128	; 0x80
 802d5b0:	d103      	bne.n	802d5ba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 802d5b2:	687b      	ldr	r3, [r7, #4]
 802d5b4:	2209      	movs	r2, #9
 802d5b6:	761a      	strb	r2, [r3, #24]
      break;
 802d5b8:	e10a      	b.n	802d7d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 802d5ba:	687b      	ldr	r3, [r7, #4]
 802d5bc:	2207      	movs	r2, #7
 802d5be:	761a      	strb	r2, [r3, #24]
      break;
 802d5c0:	e106      	b.n	802d7d0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 802d5c2:	7bbb      	ldrb	r3, [r7, #14]
 802d5c4:	2b04      	cmp	r3, #4
 802d5c6:	d003      	beq.n	802d5d0 <USBH_HandleControl+0xcc>
 802d5c8:	7bbb      	ldrb	r3, [r7, #14]
 802d5ca:	2b02      	cmp	r3, #2
 802d5cc:	f040 8100 	bne.w	802d7d0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 802d5d0:	687b      	ldr	r3, [r7, #4]
 802d5d2:	220b      	movs	r2, #11
 802d5d4:	761a      	strb	r2, [r3, #24]
      break;
 802d5d6:	e0fb      	b.n	802d7d0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 802d5d8:	687b      	ldr	r3, [r7, #4]
 802d5da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d5de:	b29a      	uxth	r2, r3
 802d5e0:	687b      	ldr	r3, [r7, #4]
 802d5e2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 802d5e4:	687b      	ldr	r3, [r7, #4]
 802d5e6:	6899      	ldr	r1, [r3, #8]
 802d5e8:	687b      	ldr	r3, [r7, #4]
 802d5ea:	899a      	ldrh	r2, [r3, #12]
 802d5ec:	687b      	ldr	r3, [r7, #4]
 802d5ee:	791b      	ldrb	r3, [r3, #4]
 802d5f0:	6878      	ldr	r0, [r7, #4]
 802d5f2:	f000 f93a 	bl	802d86a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 802d5f6:	687b      	ldr	r3, [r7, #4]
 802d5f8:	2204      	movs	r2, #4
 802d5fa:	761a      	strb	r2, [r3, #24]
      break;
 802d5fc:	e0f1      	b.n	802d7e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802d5fe:	687b      	ldr	r3, [r7, #4]
 802d600:	791b      	ldrb	r3, [r3, #4]
 802d602:	4619      	mov	r1, r3
 802d604:	6878      	ldr	r0, [r7, #4]
 802d606:	f000 fc83 	bl	802df10 <USBH_LL_GetURBState>
 802d60a:	4603      	mov	r3, r0
 802d60c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 802d60e:	7bbb      	ldrb	r3, [r7, #14]
 802d610:	2b01      	cmp	r3, #1
 802d612:	d102      	bne.n	802d61a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 802d614:	687b      	ldr	r3, [r7, #4]
 802d616:	2209      	movs	r2, #9
 802d618:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 802d61a:	7bbb      	ldrb	r3, [r7, #14]
 802d61c:	2b05      	cmp	r3, #5
 802d61e:	d102      	bne.n	802d626 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 802d620:	2303      	movs	r3, #3
 802d622:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d624:	e0d6      	b.n	802d7d4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 802d626:	7bbb      	ldrb	r3, [r7, #14]
 802d628:	2b04      	cmp	r3, #4
 802d62a:	f040 80d3 	bne.w	802d7d4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 802d62e:	687b      	ldr	r3, [r7, #4]
 802d630:	220b      	movs	r2, #11
 802d632:	761a      	strb	r2, [r3, #24]
      break;
 802d634:	e0ce      	b.n	802d7d4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 802d636:	687b      	ldr	r3, [r7, #4]
 802d638:	6899      	ldr	r1, [r3, #8]
 802d63a:	687b      	ldr	r3, [r7, #4]
 802d63c:	899a      	ldrh	r2, [r3, #12]
 802d63e:	687b      	ldr	r3, [r7, #4]
 802d640:	795b      	ldrb	r3, [r3, #5]
 802d642:	2001      	movs	r0, #1
 802d644:	9000      	str	r0, [sp, #0]
 802d646:	6878      	ldr	r0, [r7, #4]
 802d648:	f000 f8ea 	bl	802d820 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 802d64c:	687b      	ldr	r3, [r7, #4]
 802d64e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d652:	b29a      	uxth	r2, r3
 802d654:	687b      	ldr	r3, [r7, #4]
 802d656:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 802d658:	687b      	ldr	r3, [r7, #4]
 802d65a:	2206      	movs	r2, #6
 802d65c:	761a      	strb	r2, [r3, #24]
      break;
 802d65e:	e0c0      	b.n	802d7e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802d660:	687b      	ldr	r3, [r7, #4]
 802d662:	795b      	ldrb	r3, [r3, #5]
 802d664:	4619      	mov	r1, r3
 802d666:	6878      	ldr	r0, [r7, #4]
 802d668:	f000 fc52 	bl	802df10 <USBH_LL_GetURBState>
 802d66c:	4603      	mov	r3, r0
 802d66e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802d670:	7bbb      	ldrb	r3, [r7, #14]
 802d672:	2b01      	cmp	r3, #1
 802d674:	d103      	bne.n	802d67e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 802d676:	687b      	ldr	r3, [r7, #4]
 802d678:	2207      	movs	r2, #7
 802d67a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d67c:	e0ac      	b.n	802d7d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 802d67e:	7bbb      	ldrb	r3, [r7, #14]
 802d680:	2b05      	cmp	r3, #5
 802d682:	d105      	bne.n	802d690 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 802d684:	687b      	ldr	r3, [r7, #4]
 802d686:	220c      	movs	r2, #12
 802d688:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 802d68a:	2303      	movs	r3, #3
 802d68c:	73fb      	strb	r3, [r7, #15]
      break;
 802d68e:	e0a3      	b.n	802d7d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 802d690:	7bbb      	ldrb	r3, [r7, #14]
 802d692:	2b02      	cmp	r3, #2
 802d694:	d103      	bne.n	802d69e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 802d696:	687b      	ldr	r3, [r7, #4]
 802d698:	2205      	movs	r2, #5
 802d69a:	761a      	strb	r2, [r3, #24]
      break;
 802d69c:	e09c      	b.n	802d7d8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 802d69e:	7bbb      	ldrb	r3, [r7, #14]
 802d6a0:	2b04      	cmp	r3, #4
 802d6a2:	f040 8099 	bne.w	802d7d8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 802d6a6:	687b      	ldr	r3, [r7, #4]
 802d6a8:	220b      	movs	r2, #11
 802d6aa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 802d6ac:	2302      	movs	r3, #2
 802d6ae:	73fb      	strb	r3, [r7, #15]
      break;
 802d6b0:	e092      	b.n	802d7d8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 802d6b2:	687b      	ldr	r3, [r7, #4]
 802d6b4:	791b      	ldrb	r3, [r3, #4]
 802d6b6:	2200      	movs	r2, #0
 802d6b8:	2100      	movs	r1, #0
 802d6ba:	6878      	ldr	r0, [r7, #4]
 802d6bc:	f000 f8d5 	bl	802d86a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802d6c0:	687b      	ldr	r3, [r7, #4]
 802d6c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d6c6:	b29a      	uxth	r2, r3
 802d6c8:	687b      	ldr	r3, [r7, #4]
 802d6ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 802d6cc:	687b      	ldr	r3, [r7, #4]
 802d6ce:	2208      	movs	r2, #8
 802d6d0:	761a      	strb	r2, [r3, #24]

      break;
 802d6d2:	e086      	b.n	802d7e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802d6d4:	687b      	ldr	r3, [r7, #4]
 802d6d6:	791b      	ldrb	r3, [r3, #4]
 802d6d8:	4619      	mov	r1, r3
 802d6da:	6878      	ldr	r0, [r7, #4]
 802d6dc:	f000 fc18 	bl	802df10 <USBH_LL_GetURBState>
 802d6e0:	4603      	mov	r3, r0
 802d6e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802d6e4:	7bbb      	ldrb	r3, [r7, #14]
 802d6e6:	2b01      	cmp	r3, #1
 802d6e8:	d105      	bne.n	802d6f6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 802d6ea:	687b      	ldr	r3, [r7, #4]
 802d6ec:	220d      	movs	r2, #13
 802d6ee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 802d6f0:	2300      	movs	r3, #0
 802d6f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d6f4:	e072      	b.n	802d7dc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 802d6f6:	7bbb      	ldrb	r3, [r7, #14]
 802d6f8:	2b04      	cmp	r3, #4
 802d6fa:	d103      	bne.n	802d704 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 802d6fc:	687b      	ldr	r3, [r7, #4]
 802d6fe:	220b      	movs	r2, #11
 802d700:	761a      	strb	r2, [r3, #24]
      break;
 802d702:	e06b      	b.n	802d7dc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 802d704:	7bbb      	ldrb	r3, [r7, #14]
 802d706:	2b05      	cmp	r3, #5
 802d708:	d168      	bne.n	802d7dc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 802d70a:	2303      	movs	r3, #3
 802d70c:	73fb      	strb	r3, [r7, #15]
      break;
 802d70e:	e065      	b.n	802d7dc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 802d710:	687b      	ldr	r3, [r7, #4]
 802d712:	795b      	ldrb	r3, [r3, #5]
 802d714:	2201      	movs	r2, #1
 802d716:	9200      	str	r2, [sp, #0]
 802d718:	2200      	movs	r2, #0
 802d71a:	2100      	movs	r1, #0
 802d71c:	6878      	ldr	r0, [r7, #4]
 802d71e:	f000 f87f 	bl	802d820 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802d722:	687b      	ldr	r3, [r7, #4]
 802d724:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d728:	b29a      	uxth	r2, r3
 802d72a:	687b      	ldr	r3, [r7, #4]
 802d72c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 802d72e:	687b      	ldr	r3, [r7, #4]
 802d730:	220a      	movs	r2, #10
 802d732:	761a      	strb	r2, [r3, #24]
      break;
 802d734:	e055      	b.n	802d7e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802d736:	687b      	ldr	r3, [r7, #4]
 802d738:	795b      	ldrb	r3, [r3, #5]
 802d73a:	4619      	mov	r1, r3
 802d73c:	6878      	ldr	r0, [r7, #4]
 802d73e:	f000 fbe7 	bl	802df10 <USBH_LL_GetURBState>
 802d742:	4603      	mov	r3, r0
 802d744:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 802d746:	7bbb      	ldrb	r3, [r7, #14]
 802d748:	2b01      	cmp	r3, #1
 802d74a:	d105      	bne.n	802d758 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 802d74c:	2300      	movs	r3, #0
 802d74e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 802d750:	687b      	ldr	r3, [r7, #4]
 802d752:	220d      	movs	r2, #13
 802d754:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d756:	e043      	b.n	802d7e0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 802d758:	7bbb      	ldrb	r3, [r7, #14]
 802d75a:	2b02      	cmp	r3, #2
 802d75c:	d103      	bne.n	802d766 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 802d75e:	687b      	ldr	r3, [r7, #4]
 802d760:	2209      	movs	r2, #9
 802d762:	761a      	strb	r2, [r3, #24]
      break;
 802d764:	e03c      	b.n	802d7e0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 802d766:	7bbb      	ldrb	r3, [r7, #14]
 802d768:	2b04      	cmp	r3, #4
 802d76a:	d139      	bne.n	802d7e0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 802d76c:	687b      	ldr	r3, [r7, #4]
 802d76e:	220b      	movs	r2, #11
 802d770:	761a      	strb	r2, [r3, #24]
      break;
 802d772:	e035      	b.n	802d7e0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 802d774:	687b      	ldr	r3, [r7, #4]
 802d776:	7e5b      	ldrb	r3, [r3, #25]
 802d778:	3301      	adds	r3, #1
 802d77a:	b2da      	uxtb	r2, r3
 802d77c:	687b      	ldr	r3, [r7, #4]
 802d77e:	765a      	strb	r2, [r3, #25]
 802d780:	687b      	ldr	r3, [r7, #4]
 802d782:	7e5b      	ldrb	r3, [r3, #25]
 802d784:	2b02      	cmp	r3, #2
 802d786:	d806      	bhi.n	802d796 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 802d788:	687b      	ldr	r3, [r7, #4]
 802d78a:	2201      	movs	r2, #1
 802d78c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 802d78e:	687b      	ldr	r3, [r7, #4]
 802d790:	2201      	movs	r2, #1
 802d792:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 802d794:	e025      	b.n	802d7e2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 802d796:	687b      	ldr	r3, [r7, #4]
 802d798:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802d79c:	2106      	movs	r1, #6
 802d79e:	6878      	ldr	r0, [r7, #4]
 802d7a0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 802d7a2:	687b      	ldr	r3, [r7, #4]
 802d7a4:	2200      	movs	r2, #0
 802d7a6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802d7a8:	687b      	ldr	r3, [r7, #4]
 802d7aa:	795b      	ldrb	r3, [r3, #5]
 802d7ac:	4619      	mov	r1, r3
 802d7ae:	6878      	ldr	r0, [r7, #4]
 802d7b0:	f000 f90c 	bl	802d9cc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802d7b4:	687b      	ldr	r3, [r7, #4]
 802d7b6:	791b      	ldrb	r3, [r3, #4]
 802d7b8:	4619      	mov	r1, r3
 802d7ba:	6878      	ldr	r0, [r7, #4]
 802d7bc:	f000 f906 	bl	802d9cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 802d7c0:	687b      	ldr	r3, [r7, #4]
 802d7c2:	2200      	movs	r2, #0
 802d7c4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 802d7c6:	2302      	movs	r3, #2
 802d7c8:	73fb      	strb	r3, [r7, #15]
      break;
 802d7ca:	e00a      	b.n	802d7e2 <USBH_HandleControl+0x2de>

    default:
      break;
 802d7cc:	bf00      	nop
 802d7ce:	e008      	b.n	802d7e2 <USBH_HandleControl+0x2de>
      break;
 802d7d0:	bf00      	nop
 802d7d2:	e006      	b.n	802d7e2 <USBH_HandleControl+0x2de>
      break;
 802d7d4:	bf00      	nop
 802d7d6:	e004      	b.n	802d7e2 <USBH_HandleControl+0x2de>
      break;
 802d7d8:	bf00      	nop
 802d7da:	e002      	b.n	802d7e2 <USBH_HandleControl+0x2de>
      break;
 802d7dc:	bf00      	nop
 802d7de:	e000      	b.n	802d7e2 <USBH_HandleControl+0x2de>
      break;
 802d7e0:	bf00      	nop
  }

  return status;
 802d7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 802d7e4:	4618      	mov	r0, r3
 802d7e6:	3710      	adds	r7, #16
 802d7e8:	46bd      	mov	sp, r7
 802d7ea:	bd80      	pop	{r7, pc}

0802d7ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 802d7ec:	b580      	push	{r7, lr}
 802d7ee:	b088      	sub	sp, #32
 802d7f0:	af04      	add	r7, sp, #16
 802d7f2:	60f8      	str	r0, [r7, #12]
 802d7f4:	60b9      	str	r1, [r7, #8]
 802d7f6:	4613      	mov	r3, r2
 802d7f8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d7fa:	79f9      	ldrb	r1, [r7, #7]
 802d7fc:	2300      	movs	r3, #0
 802d7fe:	9303      	str	r3, [sp, #12]
 802d800:	2308      	movs	r3, #8
 802d802:	9302      	str	r3, [sp, #8]
 802d804:	68bb      	ldr	r3, [r7, #8]
 802d806:	9301      	str	r3, [sp, #4]
 802d808:	2300      	movs	r3, #0
 802d80a:	9300      	str	r3, [sp, #0]
 802d80c:	2300      	movs	r3, #0
 802d80e:	2200      	movs	r2, #0
 802d810:	68f8      	ldr	r0, [r7, #12]
 802d812:	f000 fb4c 	bl	802deae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 802d816:	2300      	movs	r3, #0
}
 802d818:	4618      	mov	r0, r3
 802d81a:	3710      	adds	r7, #16
 802d81c:	46bd      	mov	sp, r7
 802d81e:	bd80      	pop	{r7, pc}

0802d820 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 802d820:	b580      	push	{r7, lr}
 802d822:	b088      	sub	sp, #32
 802d824:	af04      	add	r7, sp, #16
 802d826:	60f8      	str	r0, [r7, #12]
 802d828:	60b9      	str	r1, [r7, #8]
 802d82a:	4611      	mov	r1, r2
 802d82c:	461a      	mov	r2, r3
 802d82e:	460b      	mov	r3, r1
 802d830:	80fb      	strh	r3, [r7, #6]
 802d832:	4613      	mov	r3, r2
 802d834:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802d836:	68fb      	ldr	r3, [r7, #12]
 802d838:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802d83c:	2b00      	cmp	r3, #0
 802d83e:	d001      	beq.n	802d844 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 802d840:	2300      	movs	r3, #0
 802d842:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d844:	7979      	ldrb	r1, [r7, #5]
 802d846:	7e3b      	ldrb	r3, [r7, #24]
 802d848:	9303      	str	r3, [sp, #12]
 802d84a:	88fb      	ldrh	r3, [r7, #6]
 802d84c:	9302      	str	r3, [sp, #8]
 802d84e:	68bb      	ldr	r3, [r7, #8]
 802d850:	9301      	str	r3, [sp, #4]
 802d852:	2301      	movs	r3, #1
 802d854:	9300      	str	r3, [sp, #0]
 802d856:	2300      	movs	r3, #0
 802d858:	2200      	movs	r2, #0
 802d85a:	68f8      	ldr	r0, [r7, #12]
 802d85c:	f000 fb27 	bl	802deae <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 802d860:	2300      	movs	r3, #0
}
 802d862:	4618      	mov	r0, r3
 802d864:	3710      	adds	r7, #16
 802d866:	46bd      	mov	sp, r7
 802d868:	bd80      	pop	{r7, pc}

0802d86a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 802d86a:	b580      	push	{r7, lr}
 802d86c:	b088      	sub	sp, #32
 802d86e:	af04      	add	r7, sp, #16
 802d870:	60f8      	str	r0, [r7, #12]
 802d872:	60b9      	str	r1, [r7, #8]
 802d874:	4611      	mov	r1, r2
 802d876:	461a      	mov	r2, r3
 802d878:	460b      	mov	r3, r1
 802d87a:	80fb      	strh	r3, [r7, #6]
 802d87c:	4613      	mov	r3, r2
 802d87e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d880:	7979      	ldrb	r1, [r7, #5]
 802d882:	2300      	movs	r3, #0
 802d884:	9303      	str	r3, [sp, #12]
 802d886:	88fb      	ldrh	r3, [r7, #6]
 802d888:	9302      	str	r3, [sp, #8]
 802d88a:	68bb      	ldr	r3, [r7, #8]
 802d88c:	9301      	str	r3, [sp, #4]
 802d88e:	2301      	movs	r3, #1
 802d890:	9300      	str	r3, [sp, #0]
 802d892:	2300      	movs	r3, #0
 802d894:	2201      	movs	r2, #1
 802d896:	68f8      	ldr	r0, [r7, #12]
 802d898:	f000 fb09 	bl	802deae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802d89c:	2300      	movs	r3, #0

}
 802d89e:	4618      	mov	r0, r3
 802d8a0:	3710      	adds	r7, #16
 802d8a2:	46bd      	mov	sp, r7
 802d8a4:	bd80      	pop	{r7, pc}

0802d8a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 802d8a6:	b580      	push	{r7, lr}
 802d8a8:	b088      	sub	sp, #32
 802d8aa:	af04      	add	r7, sp, #16
 802d8ac:	60f8      	str	r0, [r7, #12]
 802d8ae:	60b9      	str	r1, [r7, #8]
 802d8b0:	4611      	mov	r1, r2
 802d8b2:	461a      	mov	r2, r3
 802d8b4:	460b      	mov	r3, r1
 802d8b6:	80fb      	strh	r3, [r7, #6]
 802d8b8:	4613      	mov	r3, r2
 802d8ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802d8bc:	68fb      	ldr	r3, [r7, #12]
 802d8be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802d8c2:	2b00      	cmp	r3, #0
 802d8c4:	d001      	beq.n	802d8ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 802d8c6:	2300      	movs	r3, #0
 802d8c8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d8ca:	7979      	ldrb	r1, [r7, #5]
 802d8cc:	7e3b      	ldrb	r3, [r7, #24]
 802d8ce:	9303      	str	r3, [sp, #12]
 802d8d0:	88fb      	ldrh	r3, [r7, #6]
 802d8d2:	9302      	str	r3, [sp, #8]
 802d8d4:	68bb      	ldr	r3, [r7, #8]
 802d8d6:	9301      	str	r3, [sp, #4]
 802d8d8:	2301      	movs	r3, #1
 802d8da:	9300      	str	r3, [sp, #0]
 802d8dc:	2302      	movs	r3, #2
 802d8de:	2200      	movs	r2, #0
 802d8e0:	68f8      	ldr	r0, [r7, #12]
 802d8e2:	f000 fae4 	bl	802deae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 802d8e6:	2300      	movs	r3, #0
}
 802d8e8:	4618      	mov	r0, r3
 802d8ea:	3710      	adds	r7, #16
 802d8ec:	46bd      	mov	sp, r7
 802d8ee:	bd80      	pop	{r7, pc}

0802d8f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 802d8f0:	b580      	push	{r7, lr}
 802d8f2:	b088      	sub	sp, #32
 802d8f4:	af04      	add	r7, sp, #16
 802d8f6:	60f8      	str	r0, [r7, #12]
 802d8f8:	60b9      	str	r1, [r7, #8]
 802d8fa:	4611      	mov	r1, r2
 802d8fc:	461a      	mov	r2, r3
 802d8fe:	460b      	mov	r3, r1
 802d900:	80fb      	strh	r3, [r7, #6]
 802d902:	4613      	mov	r3, r2
 802d904:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d906:	7979      	ldrb	r1, [r7, #5]
 802d908:	2300      	movs	r3, #0
 802d90a:	9303      	str	r3, [sp, #12]
 802d90c:	88fb      	ldrh	r3, [r7, #6]
 802d90e:	9302      	str	r3, [sp, #8]
 802d910:	68bb      	ldr	r3, [r7, #8]
 802d912:	9301      	str	r3, [sp, #4]
 802d914:	2301      	movs	r3, #1
 802d916:	9300      	str	r3, [sp, #0]
 802d918:	2302      	movs	r3, #2
 802d91a:	2201      	movs	r2, #1
 802d91c:	68f8      	ldr	r0, [r7, #12]
 802d91e:	f000 fac6 	bl	802deae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802d922:	2300      	movs	r3, #0
}
 802d924:	4618      	mov	r0, r3
 802d926:	3710      	adds	r7, #16
 802d928:	46bd      	mov	sp, r7
 802d92a:	bd80      	pop	{r7, pc}

0802d92c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802d92c:	b580      	push	{r7, lr}
 802d92e:	b086      	sub	sp, #24
 802d930:	af04      	add	r7, sp, #16
 802d932:	6078      	str	r0, [r7, #4]
 802d934:	4608      	mov	r0, r1
 802d936:	4611      	mov	r1, r2
 802d938:	461a      	mov	r2, r3
 802d93a:	4603      	mov	r3, r0
 802d93c:	70fb      	strb	r3, [r7, #3]
 802d93e:	460b      	mov	r3, r1
 802d940:	70bb      	strb	r3, [r7, #2]
 802d942:	4613      	mov	r3, r2
 802d944:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 802d946:	7878      	ldrb	r0, [r7, #1]
 802d948:	78ba      	ldrb	r2, [r7, #2]
 802d94a:	78f9      	ldrb	r1, [r7, #3]
 802d94c:	8b3b      	ldrh	r3, [r7, #24]
 802d94e:	9302      	str	r3, [sp, #8]
 802d950:	7d3b      	ldrb	r3, [r7, #20]
 802d952:	9301      	str	r3, [sp, #4]
 802d954:	7c3b      	ldrb	r3, [r7, #16]
 802d956:	9300      	str	r3, [sp, #0]
 802d958:	4603      	mov	r3, r0
 802d95a:	6878      	ldr	r0, [r7, #4]
 802d95c:	f000 fa59 	bl	802de12 <USBH_LL_OpenPipe>

  return USBH_OK;
 802d960:	2300      	movs	r3, #0
}
 802d962:	4618      	mov	r0, r3
 802d964:	3708      	adds	r7, #8
 802d966:	46bd      	mov	sp, r7
 802d968:	bd80      	pop	{r7, pc}

0802d96a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 802d96a:	b580      	push	{r7, lr}
 802d96c:	b082      	sub	sp, #8
 802d96e:	af00      	add	r7, sp, #0
 802d970:	6078      	str	r0, [r7, #4]
 802d972:	460b      	mov	r3, r1
 802d974:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 802d976:	78fb      	ldrb	r3, [r7, #3]
 802d978:	4619      	mov	r1, r3
 802d97a:	6878      	ldr	r0, [r7, #4]
 802d97c:	f000 fa78 	bl	802de70 <USBH_LL_ClosePipe>

  return USBH_OK;
 802d980:	2300      	movs	r3, #0
}
 802d982:	4618      	mov	r0, r3
 802d984:	3708      	adds	r7, #8
 802d986:	46bd      	mov	sp, r7
 802d988:	bd80      	pop	{r7, pc}

0802d98a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 802d98a:	b580      	push	{r7, lr}
 802d98c:	b084      	sub	sp, #16
 802d98e:	af00      	add	r7, sp, #0
 802d990:	6078      	str	r0, [r7, #4]
 802d992:	460b      	mov	r3, r1
 802d994:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 802d996:	6878      	ldr	r0, [r7, #4]
 802d998:	f000 f836 	bl	802da08 <USBH_GetFreePipe>
 802d99c:	4603      	mov	r3, r0
 802d99e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 802d9a0:	89fb      	ldrh	r3, [r7, #14]
 802d9a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802d9a6:	4293      	cmp	r3, r2
 802d9a8:	d00a      	beq.n	802d9c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 802d9aa:	78fa      	ldrb	r2, [r7, #3]
 802d9ac:	89fb      	ldrh	r3, [r7, #14]
 802d9ae:	f003 030f 	and.w	r3, r3, #15
 802d9b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802d9b6:	6879      	ldr	r1, [r7, #4]
 802d9b8:	33e0      	adds	r3, #224	; 0xe0
 802d9ba:	009b      	lsls	r3, r3, #2
 802d9bc:	440b      	add	r3, r1
 802d9be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 802d9c0:	89fb      	ldrh	r3, [r7, #14]
 802d9c2:	b2db      	uxtb	r3, r3
}
 802d9c4:	4618      	mov	r0, r3
 802d9c6:	3710      	adds	r7, #16
 802d9c8:	46bd      	mov	sp, r7
 802d9ca:	bd80      	pop	{r7, pc}

0802d9cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 802d9cc:	b480      	push	{r7}
 802d9ce:	b083      	sub	sp, #12
 802d9d0:	af00      	add	r7, sp, #0
 802d9d2:	6078      	str	r0, [r7, #4]
 802d9d4:	460b      	mov	r3, r1
 802d9d6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 802d9d8:	78fb      	ldrb	r3, [r7, #3]
 802d9da:	2b0f      	cmp	r3, #15
 802d9dc:	d80d      	bhi.n	802d9fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 802d9de:	78fb      	ldrb	r3, [r7, #3]
 802d9e0:	687a      	ldr	r2, [r7, #4]
 802d9e2:	33e0      	adds	r3, #224	; 0xe0
 802d9e4:	009b      	lsls	r3, r3, #2
 802d9e6:	4413      	add	r3, r2
 802d9e8:	685a      	ldr	r2, [r3, #4]
 802d9ea:	78fb      	ldrb	r3, [r7, #3]
 802d9ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 802d9f0:	6879      	ldr	r1, [r7, #4]
 802d9f2:	33e0      	adds	r3, #224	; 0xe0
 802d9f4:	009b      	lsls	r3, r3, #2
 802d9f6:	440b      	add	r3, r1
 802d9f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 802d9fa:	2300      	movs	r3, #0
}
 802d9fc:	4618      	mov	r0, r3
 802d9fe:	370c      	adds	r7, #12
 802da00:	46bd      	mov	sp, r7
 802da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 802da06:	4770      	bx	lr

0802da08 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 802da08:	b480      	push	{r7}
 802da0a:	b085      	sub	sp, #20
 802da0c:	af00      	add	r7, sp, #0
 802da0e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 802da10:	2300      	movs	r3, #0
 802da12:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802da14:	2300      	movs	r3, #0
 802da16:	73fb      	strb	r3, [r7, #15]
 802da18:	e00f      	b.n	802da3a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 802da1a:	7bfb      	ldrb	r3, [r7, #15]
 802da1c:	687a      	ldr	r2, [r7, #4]
 802da1e:	33e0      	adds	r3, #224	; 0xe0
 802da20:	009b      	lsls	r3, r3, #2
 802da22:	4413      	add	r3, r2
 802da24:	685b      	ldr	r3, [r3, #4]
 802da26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802da2a:	2b00      	cmp	r3, #0
 802da2c:	d102      	bne.n	802da34 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 802da2e:	7bfb      	ldrb	r3, [r7, #15]
 802da30:	b29b      	uxth	r3, r3
 802da32:	e007      	b.n	802da44 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802da34:	7bfb      	ldrb	r3, [r7, #15]
 802da36:	3301      	adds	r3, #1
 802da38:	73fb      	strb	r3, [r7, #15]
 802da3a:	7bfb      	ldrb	r3, [r7, #15]
 802da3c:	2b0f      	cmp	r3, #15
 802da3e:	d9ec      	bls.n	802da1a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 802da40:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 802da44:	4618      	mov	r0, r3
 802da46:	3714      	adds	r7, #20
 802da48:	46bd      	mov	sp, r7
 802da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802da4e:	4770      	bx	lr

0802da50 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 802da50:	b580      	push	{r7, lr}
 802da52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 802da54:	2200      	movs	r2, #0
 802da56:	490e      	ldr	r1, [pc, #56]	; (802da90 <MX_USB_HOST_Init+0x40>)
 802da58:	480e      	ldr	r0, [pc, #56]	; (802da94 <MX_USB_HOST_Init+0x44>)
 802da5a:	f7fe fba7 	bl	802c1ac <USBH_Init>
 802da5e:	4603      	mov	r3, r0
 802da60:	2b00      	cmp	r3, #0
 802da62:	d001      	beq.n	802da68 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 802da64:	f7f3 fa24 	bl	8020eb0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 802da68:	490b      	ldr	r1, [pc, #44]	; (802da98 <MX_USB_HOST_Init+0x48>)
 802da6a:	480a      	ldr	r0, [pc, #40]	; (802da94 <MX_USB_HOST_Init+0x44>)
 802da6c:	f7fe fc2c 	bl	802c2c8 <USBH_RegisterClass>
 802da70:	4603      	mov	r3, r0
 802da72:	2b00      	cmp	r3, #0
 802da74:	d001      	beq.n	802da7a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 802da76:	f7f3 fa1b 	bl	8020eb0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 802da7a:	4806      	ldr	r0, [pc, #24]	; (802da94 <MX_USB_HOST_Init+0x44>)
 802da7c:	f7fe fcb0 	bl	802c3e0 <USBH_Start>
 802da80:	4603      	mov	r3, r0
 802da82:	2b00      	cmp	r3, #0
 802da84:	d001      	beq.n	802da8a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 802da86:	f7f3 fa13 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 802da8a:	bf00      	nop
 802da8c:	bd80      	pop	{r7, pc}
 802da8e:	bf00      	nop
 802da90:	0802dab1 	.word	0x0802dab1
 802da94:	20000b1c 	.word	0x20000b1c
 802da98:	20000060 	.word	0x20000060

0802da9c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 802da9c:	b580      	push	{r7, lr}
 802da9e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 802daa0:	4802      	ldr	r0, [pc, #8]	; (802daac <MX_USB_HOST_Process+0x10>)
 802daa2:	f7fe fcad 	bl	802c400 <USBH_Process>
}
 802daa6:	bf00      	nop
 802daa8:	bd80      	pop	{r7, pc}
 802daaa:	bf00      	nop
 802daac:	20000b1c 	.word	0x20000b1c

0802dab0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 802dab0:	b480      	push	{r7}
 802dab2:	b083      	sub	sp, #12
 802dab4:	af00      	add	r7, sp, #0
 802dab6:	6078      	str	r0, [r7, #4]
 802dab8:	460b      	mov	r3, r1
 802daba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 802dabc:	78fb      	ldrb	r3, [r7, #3]
 802dabe:	3b01      	subs	r3, #1
 802dac0:	2b04      	cmp	r3, #4
 802dac2:	d819      	bhi.n	802daf8 <USBH_UserProcess+0x48>
 802dac4:	a201      	add	r2, pc, #4	; (adr r2, 802dacc <USBH_UserProcess+0x1c>)
 802dac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802daca:	bf00      	nop
 802dacc:	0802daf9 	.word	0x0802daf9
 802dad0:	0802dae9 	.word	0x0802dae9
 802dad4:	0802daf9 	.word	0x0802daf9
 802dad8:	0802daf1 	.word	0x0802daf1
 802dadc:	0802dae1 	.word	0x0802dae1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 802dae0:	4b09      	ldr	r3, [pc, #36]	; (802db08 <USBH_UserProcess+0x58>)
 802dae2:	2203      	movs	r2, #3
 802dae4:	701a      	strb	r2, [r3, #0]
  break;
 802dae6:	e008      	b.n	802dafa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 802dae8:	4b07      	ldr	r3, [pc, #28]	; (802db08 <USBH_UserProcess+0x58>)
 802daea:	2202      	movs	r2, #2
 802daec:	701a      	strb	r2, [r3, #0]
  break;
 802daee:	e004      	b.n	802dafa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 802daf0:	4b05      	ldr	r3, [pc, #20]	; (802db08 <USBH_UserProcess+0x58>)
 802daf2:	2201      	movs	r2, #1
 802daf4:	701a      	strb	r2, [r3, #0]
  break;
 802daf6:	e000      	b.n	802dafa <USBH_UserProcess+0x4a>

  default:
  break;
 802daf8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 802dafa:	bf00      	nop
 802dafc:	370c      	adds	r7, #12
 802dafe:	46bd      	mov	sp, r7
 802db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 802db04:	4770      	bx	lr
 802db06:	bf00      	nop
 802db08:	20000ef4 	.word	0x20000ef4

0802db0c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 802db0c:	b580      	push	{r7, lr}
 802db0e:	b08a      	sub	sp, #40	; 0x28
 802db10:	af00      	add	r7, sp, #0
 802db12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802db14:	f107 0314 	add.w	r3, r7, #20
 802db18:	2200      	movs	r2, #0
 802db1a:	601a      	str	r2, [r3, #0]
 802db1c:	605a      	str	r2, [r3, #4]
 802db1e:	609a      	str	r2, [r3, #8]
 802db20:	60da      	str	r2, [r3, #12]
 802db22:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 802db24:	687b      	ldr	r3, [r7, #4]
 802db26:	681b      	ldr	r3, [r3, #0]
 802db28:	4a24      	ldr	r2, [pc, #144]	; (802dbbc <HAL_HCD_MspInit+0xb0>)
 802db2a:	4293      	cmp	r3, r2
 802db2c:	d141      	bne.n	802dbb2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802db2e:	2300      	movs	r3, #0
 802db30:	613b      	str	r3, [r7, #16]
 802db32:	4b23      	ldr	r3, [pc, #140]	; (802dbc0 <HAL_HCD_MspInit+0xb4>)
 802db34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802db36:	4a22      	ldr	r2, [pc, #136]	; (802dbc0 <HAL_HCD_MspInit+0xb4>)
 802db38:	f043 0302 	orr.w	r3, r3, #2
 802db3c:	6313      	str	r3, [r2, #48]	; 0x30
 802db3e:	4b20      	ldr	r3, [pc, #128]	; (802dbc0 <HAL_HCD_MspInit+0xb4>)
 802db40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802db42:	f003 0302 	and.w	r3, r3, #2
 802db46:	613b      	str	r3, [r7, #16]
 802db48:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 802db4a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 802db4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802db50:	2302      	movs	r3, #2
 802db52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802db54:	2300      	movs	r3, #0
 802db56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802db58:	2300      	movs	r3, #0
 802db5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 802db5c:	230c      	movs	r3, #12
 802db5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802db60:	f107 0314 	add.w	r3, r7, #20
 802db64:	4619      	mov	r1, r3
 802db66:	4817      	ldr	r0, [pc, #92]	; (802dbc4 <HAL_HCD_MspInit+0xb8>)
 802db68:	f7f6 ffcc 	bl	8024b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 802db6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802db70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802db72:	2300      	movs	r3, #0
 802db74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802db76:	2300      	movs	r3, #0
 802db78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 802db7a:	f107 0314 	add.w	r3, r7, #20
 802db7e:	4619      	mov	r1, r3
 802db80:	4810      	ldr	r0, [pc, #64]	; (802dbc4 <HAL_HCD_MspInit+0xb8>)
 802db82:	f7f6 ffbf 	bl	8024b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 802db86:	2300      	movs	r3, #0
 802db88:	60fb      	str	r3, [r7, #12]
 802db8a:	4b0d      	ldr	r3, [pc, #52]	; (802dbc0 <HAL_HCD_MspInit+0xb4>)
 802db8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802db8e:	4a0c      	ldr	r2, [pc, #48]	; (802dbc0 <HAL_HCD_MspInit+0xb4>)
 802db90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802db94:	6313      	str	r3, [r2, #48]	; 0x30
 802db96:	4b0a      	ldr	r3, [pc, #40]	; (802dbc0 <HAL_HCD_MspInit+0xb4>)
 802db98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802db9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802db9e:	60fb      	str	r3, [r7, #12]
 802dba0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 802dba2:	2200      	movs	r2, #0
 802dba4:	2100      	movs	r1, #0
 802dba6:	204d      	movs	r0, #77	; 0x4d
 802dba8:	f7f5 fe6f 	bl	802388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 802dbac:	204d      	movs	r0, #77	; 0x4d
 802dbae:	f7f5 fe88 	bl	80238c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 802dbb2:	bf00      	nop
 802dbb4:	3728      	adds	r7, #40	; 0x28
 802dbb6:	46bd      	mov	sp, r7
 802dbb8:	bd80      	pop	{r7, pc}
 802dbba:	bf00      	nop
 802dbbc:	40040000 	.word	0x40040000
 802dbc0:	40023800 	.word	0x40023800
 802dbc4:	40020400 	.word	0x40020400

0802dbc8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 802dbc8:	b580      	push	{r7, lr}
 802dbca:	b082      	sub	sp, #8
 802dbcc:	af00      	add	r7, sp, #0
 802dbce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 802dbd0:	687b      	ldr	r3, [r7, #4]
 802dbd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802dbd6:	4618      	mov	r0, r3
 802dbd8:	f7fe fff1 	bl	802cbbe <USBH_LL_IncTimer>
}
 802dbdc:	bf00      	nop
 802dbde:	3708      	adds	r7, #8
 802dbe0:	46bd      	mov	sp, r7
 802dbe2:	bd80      	pop	{r7, pc}

0802dbe4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 802dbe4:	b580      	push	{r7, lr}
 802dbe6:	b082      	sub	sp, #8
 802dbe8:	af00      	add	r7, sp, #0
 802dbea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 802dbec:	687b      	ldr	r3, [r7, #4]
 802dbee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802dbf2:	4618      	mov	r0, r3
 802dbf4:	f7ff f829 	bl	802cc4a <USBH_LL_Connect>
}
 802dbf8:	bf00      	nop
 802dbfa:	3708      	adds	r7, #8
 802dbfc:	46bd      	mov	sp, r7
 802dbfe:	bd80      	pop	{r7, pc}

0802dc00 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 802dc00:	b580      	push	{r7, lr}
 802dc02:	b082      	sub	sp, #8
 802dc04:	af00      	add	r7, sp, #0
 802dc06:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 802dc08:	687b      	ldr	r3, [r7, #4]
 802dc0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802dc0e:	4618      	mov	r0, r3
 802dc10:	f7ff f832 	bl	802cc78 <USBH_LL_Disconnect>
}
 802dc14:	bf00      	nop
 802dc16:	3708      	adds	r7, #8
 802dc18:	46bd      	mov	sp, r7
 802dc1a:	bd80      	pop	{r7, pc}

0802dc1c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 802dc1c:	b480      	push	{r7}
 802dc1e:	b083      	sub	sp, #12
 802dc20:	af00      	add	r7, sp, #0
 802dc22:	6078      	str	r0, [r7, #4]
 802dc24:	460b      	mov	r3, r1
 802dc26:	70fb      	strb	r3, [r7, #3]
 802dc28:	4613      	mov	r3, r2
 802dc2a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 802dc2c:	bf00      	nop
 802dc2e:	370c      	adds	r7, #12
 802dc30:	46bd      	mov	sp, r7
 802dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dc36:	4770      	bx	lr

0802dc38 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802dc38:	b580      	push	{r7, lr}
 802dc3a:	b082      	sub	sp, #8
 802dc3c:	af00      	add	r7, sp, #0
 802dc3e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 802dc40:	687b      	ldr	r3, [r7, #4]
 802dc42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802dc46:	4618      	mov	r0, r3
 802dc48:	f7fe ffe3 	bl	802cc12 <USBH_LL_PortEnabled>
}
 802dc4c:	bf00      	nop
 802dc4e:	3708      	adds	r7, #8
 802dc50:	46bd      	mov	sp, r7
 802dc52:	bd80      	pop	{r7, pc}

0802dc54 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802dc54:	b580      	push	{r7, lr}
 802dc56:	b082      	sub	sp, #8
 802dc58:	af00      	add	r7, sp, #0
 802dc5a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 802dc5c:	687b      	ldr	r3, [r7, #4]
 802dc5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802dc62:	4618      	mov	r0, r3
 802dc64:	f7fe ffe3 	bl	802cc2e <USBH_LL_PortDisabled>
}
 802dc68:	bf00      	nop
 802dc6a:	3708      	adds	r7, #8
 802dc6c:	46bd      	mov	sp, r7
 802dc6e:	bd80      	pop	{r7, pc}

0802dc70 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 802dc70:	b580      	push	{r7, lr}
 802dc72:	b082      	sub	sp, #8
 802dc74:	af00      	add	r7, sp, #0
 802dc76:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 802dc78:	687b      	ldr	r3, [r7, #4]
 802dc7a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802dc7e:	2b00      	cmp	r3, #0
 802dc80:	d132      	bne.n	802dce8 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 802dc82:	4a1c      	ldr	r2, [pc, #112]	; (802dcf4 <USBH_LL_Init+0x84>)
 802dc84:	687b      	ldr	r3, [r7, #4]
 802dc86:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 802dc8a:	687b      	ldr	r3, [r7, #4]
 802dc8c:	4a19      	ldr	r2, [pc, #100]	; (802dcf4 <USBH_LL_Init+0x84>)
 802dc8e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 802dc92:	4b18      	ldr	r3, [pc, #96]	; (802dcf4 <USBH_LL_Init+0x84>)
 802dc94:	4a18      	ldr	r2, [pc, #96]	; (802dcf8 <USBH_LL_Init+0x88>)
 802dc96:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 802dc98:	4b16      	ldr	r3, [pc, #88]	; (802dcf4 <USBH_LL_Init+0x84>)
 802dc9a:	220c      	movs	r2, #12
 802dc9c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 802dc9e:	4b15      	ldr	r3, [pc, #84]	; (802dcf4 <USBH_LL_Init+0x84>)
 802dca0:	2201      	movs	r2, #1
 802dca2:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 802dca4:	4b13      	ldr	r3, [pc, #76]	; (802dcf4 <USBH_LL_Init+0x84>)
 802dca6:	2200      	movs	r2, #0
 802dca8:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 802dcaa:	4b12      	ldr	r3, [pc, #72]	; (802dcf4 <USBH_LL_Init+0x84>)
 802dcac:	2202      	movs	r2, #2
 802dcae:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 802dcb0:	4b10      	ldr	r3, [pc, #64]	; (802dcf4 <USBH_LL_Init+0x84>)
 802dcb2:	2200      	movs	r2, #0
 802dcb4:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 802dcb6:	4b0f      	ldr	r3, [pc, #60]	; (802dcf4 <USBH_LL_Init+0x84>)
 802dcb8:	2200      	movs	r2, #0
 802dcba:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 802dcbc:	4b0d      	ldr	r3, [pc, #52]	; (802dcf4 <USBH_LL_Init+0x84>)
 802dcbe:	2200      	movs	r2, #0
 802dcc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 802dcc2:	4b0c      	ldr	r3, [pc, #48]	; (802dcf4 <USBH_LL_Init+0x84>)
 802dcc4:	2200      	movs	r2, #0
 802dcc6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 802dcc8:	480a      	ldr	r0, [pc, #40]	; (802dcf4 <USBH_LL_Init+0x84>)
 802dcca:	f7f7 fa05 	bl	80250d8 <HAL_HCD_Init>
 802dcce:	4603      	mov	r3, r0
 802dcd0:	2b00      	cmp	r3, #0
 802dcd2:	d001      	beq.n	802dcd8 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 802dcd4:	f7f3 f8ec 	bl	8020eb0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 802dcd8:	4806      	ldr	r0, [pc, #24]	; (802dcf4 <USBH_LL_Init+0x84>)
 802dcda:	f7f7 fde8 	bl	80258ae <HAL_HCD_GetCurrentFrame>
 802dcde:	4603      	mov	r3, r0
 802dce0:	4619      	mov	r1, r3
 802dce2:	6878      	ldr	r0, [r7, #4]
 802dce4:	f7fe ff5c 	bl	802cba0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 802dce8:	2300      	movs	r3, #0
}
 802dcea:	4618      	mov	r0, r3
 802dcec:	3708      	adds	r7, #8
 802dcee:	46bd      	mov	sp, r7
 802dcf0:	bd80      	pop	{r7, pc}
 802dcf2:	bf00      	nop
 802dcf4:	20000ef8 	.word	0x20000ef8
 802dcf8:	40040000 	.word	0x40040000

0802dcfc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 802dcfc:	b580      	push	{r7, lr}
 802dcfe:	b084      	sub	sp, #16
 802dd00:	af00      	add	r7, sp, #0
 802dd02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802dd04:	2300      	movs	r3, #0
 802dd06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802dd08:	2300      	movs	r3, #0
 802dd0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 802dd0c:	687b      	ldr	r3, [r7, #4]
 802dd0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dd12:	4618      	mov	r0, r3
 802dd14:	f7f7 fd55 	bl	80257c2 <HAL_HCD_Start>
 802dd18:	4603      	mov	r3, r0
 802dd1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802dd1c:	7bfb      	ldrb	r3, [r7, #15]
 802dd1e:	4618      	mov	r0, r3
 802dd20:	f000 f95c 	bl	802dfdc <USBH_Get_USB_Status>
 802dd24:	4603      	mov	r3, r0
 802dd26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802dd28:	7bbb      	ldrb	r3, [r7, #14]
}
 802dd2a:	4618      	mov	r0, r3
 802dd2c:	3710      	adds	r7, #16
 802dd2e:	46bd      	mov	sp, r7
 802dd30:	bd80      	pop	{r7, pc}

0802dd32 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 802dd32:	b580      	push	{r7, lr}
 802dd34:	b084      	sub	sp, #16
 802dd36:	af00      	add	r7, sp, #0
 802dd38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802dd3a:	2300      	movs	r3, #0
 802dd3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802dd3e:	2300      	movs	r3, #0
 802dd40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 802dd42:	687b      	ldr	r3, [r7, #4]
 802dd44:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dd48:	4618      	mov	r0, r3
 802dd4a:	f7f7 fd5d 	bl	8025808 <HAL_HCD_Stop>
 802dd4e:	4603      	mov	r3, r0
 802dd50:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802dd52:	7bfb      	ldrb	r3, [r7, #15]
 802dd54:	4618      	mov	r0, r3
 802dd56:	f000 f941 	bl	802dfdc <USBH_Get_USB_Status>
 802dd5a:	4603      	mov	r3, r0
 802dd5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802dd5e:	7bbb      	ldrb	r3, [r7, #14]
}
 802dd60:	4618      	mov	r0, r3
 802dd62:	3710      	adds	r7, #16
 802dd64:	46bd      	mov	sp, r7
 802dd66:	bd80      	pop	{r7, pc}

0802dd68 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 802dd68:	b580      	push	{r7, lr}
 802dd6a:	b084      	sub	sp, #16
 802dd6c:	af00      	add	r7, sp, #0
 802dd6e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 802dd70:	2301      	movs	r3, #1
 802dd72:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 802dd74:	687b      	ldr	r3, [r7, #4]
 802dd76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dd7a:	4618      	mov	r0, r3
 802dd7c:	f7f7 fda5 	bl	80258ca <HAL_HCD_GetCurrentSpeed>
 802dd80:	4603      	mov	r3, r0
 802dd82:	2b02      	cmp	r3, #2
 802dd84:	d00c      	beq.n	802dda0 <USBH_LL_GetSpeed+0x38>
 802dd86:	2b02      	cmp	r3, #2
 802dd88:	d80d      	bhi.n	802dda6 <USBH_LL_GetSpeed+0x3e>
 802dd8a:	2b00      	cmp	r3, #0
 802dd8c:	d002      	beq.n	802dd94 <USBH_LL_GetSpeed+0x2c>
 802dd8e:	2b01      	cmp	r3, #1
 802dd90:	d003      	beq.n	802dd9a <USBH_LL_GetSpeed+0x32>
 802dd92:	e008      	b.n	802dda6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 802dd94:	2300      	movs	r3, #0
 802dd96:	73fb      	strb	r3, [r7, #15]
    break;
 802dd98:	e008      	b.n	802ddac <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 802dd9a:	2301      	movs	r3, #1
 802dd9c:	73fb      	strb	r3, [r7, #15]
    break;
 802dd9e:	e005      	b.n	802ddac <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 802dda0:	2302      	movs	r3, #2
 802dda2:	73fb      	strb	r3, [r7, #15]
    break;
 802dda4:	e002      	b.n	802ddac <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 802dda6:	2301      	movs	r3, #1
 802dda8:	73fb      	strb	r3, [r7, #15]
    break;
 802ddaa:	bf00      	nop
  }
  return  speed;
 802ddac:	7bfb      	ldrb	r3, [r7, #15]
}
 802ddae:	4618      	mov	r0, r3
 802ddb0:	3710      	adds	r7, #16
 802ddb2:	46bd      	mov	sp, r7
 802ddb4:	bd80      	pop	{r7, pc}

0802ddb6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 802ddb6:	b580      	push	{r7, lr}
 802ddb8:	b084      	sub	sp, #16
 802ddba:	af00      	add	r7, sp, #0
 802ddbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802ddbe:	2300      	movs	r3, #0
 802ddc0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802ddc2:	2300      	movs	r3, #0
 802ddc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 802ddc6:	687b      	ldr	r3, [r7, #4]
 802ddc8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802ddcc:	4618      	mov	r0, r3
 802ddce:	f7f7 fd38 	bl	8025842 <HAL_HCD_ResetPort>
 802ddd2:	4603      	mov	r3, r0
 802ddd4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802ddd6:	7bfb      	ldrb	r3, [r7, #15]
 802ddd8:	4618      	mov	r0, r3
 802ddda:	f000 f8ff 	bl	802dfdc <USBH_Get_USB_Status>
 802ddde:	4603      	mov	r3, r0
 802dde0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802dde2:	7bbb      	ldrb	r3, [r7, #14]
}
 802dde4:	4618      	mov	r0, r3
 802dde6:	3710      	adds	r7, #16
 802dde8:	46bd      	mov	sp, r7
 802ddea:	bd80      	pop	{r7, pc}

0802ddec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802ddec:	b580      	push	{r7, lr}
 802ddee:	b082      	sub	sp, #8
 802ddf0:	af00      	add	r7, sp, #0
 802ddf2:	6078      	str	r0, [r7, #4]
 802ddf4:	460b      	mov	r3, r1
 802ddf6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 802ddf8:	687b      	ldr	r3, [r7, #4]
 802ddfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802ddfe:	78fa      	ldrb	r2, [r7, #3]
 802de00:	4611      	mov	r1, r2
 802de02:	4618      	mov	r0, r3
 802de04:	f7f7 fd3f 	bl	8025886 <HAL_HCD_HC_GetXferCount>
 802de08:	4603      	mov	r3, r0
}
 802de0a:	4618      	mov	r0, r3
 802de0c:	3708      	adds	r7, #8
 802de0e:	46bd      	mov	sp, r7
 802de10:	bd80      	pop	{r7, pc}

0802de12 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802de12:	b590      	push	{r4, r7, lr}
 802de14:	b089      	sub	sp, #36	; 0x24
 802de16:	af04      	add	r7, sp, #16
 802de18:	6078      	str	r0, [r7, #4]
 802de1a:	4608      	mov	r0, r1
 802de1c:	4611      	mov	r1, r2
 802de1e:	461a      	mov	r2, r3
 802de20:	4603      	mov	r3, r0
 802de22:	70fb      	strb	r3, [r7, #3]
 802de24:	460b      	mov	r3, r1
 802de26:	70bb      	strb	r3, [r7, #2]
 802de28:	4613      	mov	r3, r2
 802de2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802de2c:	2300      	movs	r3, #0
 802de2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802de30:	2300      	movs	r3, #0
 802de32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 802de34:	687b      	ldr	r3, [r7, #4]
 802de36:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802de3a:	787c      	ldrb	r4, [r7, #1]
 802de3c:	78ba      	ldrb	r2, [r7, #2]
 802de3e:	78f9      	ldrb	r1, [r7, #3]
 802de40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802de42:	9302      	str	r3, [sp, #8]
 802de44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802de48:	9301      	str	r3, [sp, #4]
 802de4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 802de4e:	9300      	str	r3, [sp, #0]
 802de50:	4623      	mov	r3, r4
 802de52:	f7f7 f9a3 	bl	802519c <HAL_HCD_HC_Init>
 802de56:	4603      	mov	r3, r0
 802de58:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 802de5a:	7bfb      	ldrb	r3, [r7, #15]
 802de5c:	4618      	mov	r0, r3
 802de5e:	f000 f8bd 	bl	802dfdc <USBH_Get_USB_Status>
 802de62:	4603      	mov	r3, r0
 802de64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802de66:	7bbb      	ldrb	r3, [r7, #14]
}
 802de68:	4618      	mov	r0, r3
 802de6a:	3714      	adds	r7, #20
 802de6c:	46bd      	mov	sp, r7
 802de6e:	bd90      	pop	{r4, r7, pc}

0802de70 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802de70:	b580      	push	{r7, lr}
 802de72:	b084      	sub	sp, #16
 802de74:	af00      	add	r7, sp, #0
 802de76:	6078      	str	r0, [r7, #4]
 802de78:	460b      	mov	r3, r1
 802de7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802de7c:	2300      	movs	r3, #0
 802de7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802de80:	2300      	movs	r3, #0
 802de82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 802de84:	687b      	ldr	r3, [r7, #4]
 802de86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802de8a:	78fa      	ldrb	r2, [r7, #3]
 802de8c:	4611      	mov	r1, r2
 802de8e:	4618      	mov	r0, r3
 802de90:	f7f7 fa13 	bl	80252ba <HAL_HCD_HC_Halt>
 802de94:	4603      	mov	r3, r0
 802de96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802de98:	7bfb      	ldrb	r3, [r7, #15]
 802de9a:	4618      	mov	r0, r3
 802de9c:	f000 f89e 	bl	802dfdc <USBH_Get_USB_Status>
 802dea0:	4603      	mov	r3, r0
 802dea2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802dea4:	7bbb      	ldrb	r3, [r7, #14]
}
 802dea6:	4618      	mov	r0, r3
 802dea8:	3710      	adds	r7, #16
 802deaa:	46bd      	mov	sp, r7
 802deac:	bd80      	pop	{r7, pc}

0802deae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 802deae:	b590      	push	{r4, r7, lr}
 802deb0:	b089      	sub	sp, #36	; 0x24
 802deb2:	af04      	add	r7, sp, #16
 802deb4:	6078      	str	r0, [r7, #4]
 802deb6:	4608      	mov	r0, r1
 802deb8:	4611      	mov	r1, r2
 802deba:	461a      	mov	r2, r3
 802debc:	4603      	mov	r3, r0
 802debe:	70fb      	strb	r3, [r7, #3]
 802dec0:	460b      	mov	r3, r1
 802dec2:	70bb      	strb	r3, [r7, #2]
 802dec4:	4613      	mov	r3, r2
 802dec6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802dec8:	2300      	movs	r3, #0
 802deca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802decc:	2300      	movs	r3, #0
 802dece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 802ded0:	687b      	ldr	r3, [r7, #4]
 802ded2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802ded6:	787c      	ldrb	r4, [r7, #1]
 802ded8:	78ba      	ldrb	r2, [r7, #2]
 802deda:	78f9      	ldrb	r1, [r7, #3]
 802dedc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802dee0:	9303      	str	r3, [sp, #12]
 802dee2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802dee4:	9302      	str	r3, [sp, #8]
 802dee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dee8:	9301      	str	r3, [sp, #4]
 802deea:	f897 3020 	ldrb.w	r3, [r7, #32]
 802deee:	9300      	str	r3, [sp, #0]
 802def0:	4623      	mov	r3, r4
 802def2:	f7f7 fa05 	bl	8025300 <HAL_HCD_HC_SubmitRequest>
 802def6:	4603      	mov	r3, r0
 802def8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 802defa:	7bfb      	ldrb	r3, [r7, #15]
 802defc:	4618      	mov	r0, r3
 802defe:	f000 f86d 	bl	802dfdc <USBH_Get_USB_Status>
 802df02:	4603      	mov	r3, r0
 802df04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802df06:	7bbb      	ldrb	r3, [r7, #14]
}
 802df08:	4618      	mov	r0, r3
 802df0a:	3714      	adds	r7, #20
 802df0c:	46bd      	mov	sp, r7
 802df0e:	bd90      	pop	{r4, r7, pc}

0802df10 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802df10:	b580      	push	{r7, lr}
 802df12:	b082      	sub	sp, #8
 802df14:	af00      	add	r7, sp, #0
 802df16:	6078      	str	r0, [r7, #4]
 802df18:	460b      	mov	r3, r1
 802df1a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 802df1c:	687b      	ldr	r3, [r7, #4]
 802df1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802df22:	78fa      	ldrb	r2, [r7, #3]
 802df24:	4611      	mov	r1, r2
 802df26:	4618      	mov	r0, r3
 802df28:	f7f7 fc99 	bl	802585e <HAL_HCD_HC_GetURBState>
 802df2c:	4603      	mov	r3, r0
}
 802df2e:	4618      	mov	r0, r3
 802df30:	3708      	adds	r7, #8
 802df32:	46bd      	mov	sp, r7
 802df34:	bd80      	pop	{r7, pc}

0802df36 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 802df36:	b580      	push	{r7, lr}
 802df38:	b082      	sub	sp, #8
 802df3a:	af00      	add	r7, sp, #0
 802df3c:	6078      	str	r0, [r7, #4]
 802df3e:	460b      	mov	r3, r1
 802df40:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 802df42:	687b      	ldr	r3, [r7, #4]
 802df44:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802df48:	2b00      	cmp	r3, #0
 802df4a:	d103      	bne.n	802df54 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 802df4c:	78fb      	ldrb	r3, [r7, #3]
 802df4e:	4618      	mov	r0, r3
 802df50:	f000 f870 	bl	802e034 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 802df54:	20c8      	movs	r0, #200	; 0xc8
 802df56:	f7f5 fba5 	bl	80236a4 <HAL_Delay>
  return USBH_OK;
 802df5a:	2300      	movs	r3, #0
}
 802df5c:	4618      	mov	r0, r3
 802df5e:	3708      	adds	r7, #8
 802df60:	46bd      	mov	sp, r7
 802df62:	bd80      	pop	{r7, pc}

0802df64 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 802df64:	b480      	push	{r7}
 802df66:	b085      	sub	sp, #20
 802df68:	af00      	add	r7, sp, #0
 802df6a:	6078      	str	r0, [r7, #4]
 802df6c:	460b      	mov	r3, r1
 802df6e:	70fb      	strb	r3, [r7, #3]
 802df70:	4613      	mov	r3, r2
 802df72:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 802df74:	687b      	ldr	r3, [r7, #4]
 802df76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802df7a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 802df7c:	78fb      	ldrb	r3, [r7, #3]
 802df7e:	68fa      	ldr	r2, [r7, #12]
 802df80:	212c      	movs	r1, #44	; 0x2c
 802df82:	fb01 f303 	mul.w	r3, r1, r3
 802df86:	4413      	add	r3, r2
 802df88:	333b      	adds	r3, #59	; 0x3b
 802df8a:	781b      	ldrb	r3, [r3, #0]
 802df8c:	2b00      	cmp	r3, #0
 802df8e:	d009      	beq.n	802dfa4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 802df90:	78fb      	ldrb	r3, [r7, #3]
 802df92:	68fa      	ldr	r2, [r7, #12]
 802df94:	212c      	movs	r1, #44	; 0x2c
 802df96:	fb01 f303 	mul.w	r3, r1, r3
 802df9a:	4413      	add	r3, r2
 802df9c:	3354      	adds	r3, #84	; 0x54
 802df9e:	78ba      	ldrb	r2, [r7, #2]
 802dfa0:	701a      	strb	r2, [r3, #0]
 802dfa2:	e008      	b.n	802dfb6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 802dfa4:	78fb      	ldrb	r3, [r7, #3]
 802dfa6:	68fa      	ldr	r2, [r7, #12]
 802dfa8:	212c      	movs	r1, #44	; 0x2c
 802dfaa:	fb01 f303 	mul.w	r3, r1, r3
 802dfae:	4413      	add	r3, r2
 802dfb0:	3355      	adds	r3, #85	; 0x55
 802dfb2:	78ba      	ldrb	r2, [r7, #2]
 802dfb4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 802dfb6:	2300      	movs	r3, #0
}
 802dfb8:	4618      	mov	r0, r3
 802dfba:	3714      	adds	r7, #20
 802dfbc:	46bd      	mov	sp, r7
 802dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dfc2:	4770      	bx	lr

0802dfc4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 802dfc4:	b580      	push	{r7, lr}
 802dfc6:	b082      	sub	sp, #8
 802dfc8:	af00      	add	r7, sp, #0
 802dfca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 802dfcc:	6878      	ldr	r0, [r7, #4]
 802dfce:	f7f5 fb69 	bl	80236a4 <HAL_Delay>
}
 802dfd2:	bf00      	nop
 802dfd4:	3708      	adds	r7, #8
 802dfd6:	46bd      	mov	sp, r7
 802dfd8:	bd80      	pop	{r7, pc}
	...

0802dfdc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802dfdc:	b480      	push	{r7}
 802dfde:	b085      	sub	sp, #20
 802dfe0:	af00      	add	r7, sp, #0
 802dfe2:	4603      	mov	r3, r0
 802dfe4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802dfe6:	2300      	movs	r3, #0
 802dfe8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802dfea:	79fb      	ldrb	r3, [r7, #7]
 802dfec:	2b03      	cmp	r3, #3
 802dfee:	d817      	bhi.n	802e020 <USBH_Get_USB_Status+0x44>
 802dff0:	a201      	add	r2, pc, #4	; (adr r2, 802dff8 <USBH_Get_USB_Status+0x1c>)
 802dff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802dff6:	bf00      	nop
 802dff8:	0802e009 	.word	0x0802e009
 802dffc:	0802e00f 	.word	0x0802e00f
 802e000:	0802e015 	.word	0x0802e015
 802e004:	0802e01b 	.word	0x0802e01b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 802e008:	2300      	movs	r3, #0
 802e00a:	73fb      	strb	r3, [r7, #15]
    break;
 802e00c:	e00b      	b.n	802e026 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 802e00e:	2302      	movs	r3, #2
 802e010:	73fb      	strb	r3, [r7, #15]
    break;
 802e012:	e008      	b.n	802e026 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 802e014:	2301      	movs	r3, #1
 802e016:	73fb      	strb	r3, [r7, #15]
    break;
 802e018:	e005      	b.n	802e026 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 802e01a:	2302      	movs	r3, #2
 802e01c:	73fb      	strb	r3, [r7, #15]
    break;
 802e01e:	e002      	b.n	802e026 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 802e020:	2302      	movs	r3, #2
 802e022:	73fb      	strb	r3, [r7, #15]
    break;
 802e024:	bf00      	nop
  }
  return usb_status;
 802e026:	7bfb      	ldrb	r3, [r7, #15]
}
 802e028:	4618      	mov	r0, r3
 802e02a:	3714      	adds	r7, #20
 802e02c:	46bd      	mov	sp, r7
 802e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e032:	4770      	bx	lr

0802e034 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 802e034:	b580      	push	{r7, lr}
 802e036:	b084      	sub	sp, #16
 802e038:	af00      	add	r7, sp, #0
 802e03a:	4603      	mov	r3, r0
 802e03c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 802e03e:	79fb      	ldrb	r3, [r7, #7]
 802e040:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 802e042:	79fb      	ldrb	r3, [r7, #7]
 802e044:	2b00      	cmp	r3, #0
 802e046:	d102      	bne.n	802e04e <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 802e048:	2301      	movs	r3, #1
 802e04a:	73fb      	strb	r3, [r7, #15]
 802e04c:	e001      	b.n	802e052 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 802e04e:	2300      	movs	r3, #0
 802e050:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 802e052:	7bfb      	ldrb	r3, [r7, #15]
 802e054:	461a      	mov	r2, r3
 802e056:	2110      	movs	r1, #16
 802e058:	4803      	ldr	r0, [pc, #12]	; (802e068 <MX_DriverVbusHS+0x34>)
 802e05a:	f7f7 f80b 	bl	8025074 <HAL_GPIO_WritePin>
}
 802e05e:	bf00      	nop
 802e060:	3710      	adds	r7, #16
 802e062:	46bd      	mov	sp, r7
 802e064:	bd80      	pop	{r7, pc}
 802e066:	bf00      	nop
 802e068:	40020800 	.word	0x40020800

0802e06c <__errno>:
 802e06c:	4b01      	ldr	r3, [pc, #4]	; (802e074 <__errno+0x8>)
 802e06e:	6818      	ldr	r0, [r3, #0]
 802e070:	4770      	bx	lr
 802e072:	bf00      	nop
 802e074:	20000080 	.word	0x20000080

0802e078 <__libc_init_array>:
 802e078:	b570      	push	{r4, r5, r6, lr}
 802e07a:	4d0d      	ldr	r5, [pc, #52]	; (802e0b0 <__libc_init_array+0x38>)
 802e07c:	4c0d      	ldr	r4, [pc, #52]	; (802e0b4 <__libc_init_array+0x3c>)
 802e07e:	1b64      	subs	r4, r4, r5
 802e080:	10a4      	asrs	r4, r4, #2
 802e082:	2600      	movs	r6, #0
 802e084:	42a6      	cmp	r6, r4
 802e086:	d109      	bne.n	802e09c <__libc_init_array+0x24>
 802e088:	4d0b      	ldr	r5, [pc, #44]	; (802e0b8 <__libc_init_array+0x40>)
 802e08a:	4c0c      	ldr	r4, [pc, #48]	; (802e0bc <__libc_init_array+0x44>)
 802e08c:	f001 fa10 	bl	802f4b0 <_init>
 802e090:	1b64      	subs	r4, r4, r5
 802e092:	10a4      	asrs	r4, r4, #2
 802e094:	2600      	movs	r6, #0
 802e096:	42a6      	cmp	r6, r4
 802e098:	d105      	bne.n	802e0a6 <__libc_init_array+0x2e>
 802e09a:	bd70      	pop	{r4, r5, r6, pc}
 802e09c:	f855 3b04 	ldr.w	r3, [r5], #4
 802e0a0:	4798      	blx	r3
 802e0a2:	3601      	adds	r6, #1
 802e0a4:	e7ee      	b.n	802e084 <__libc_init_array+0xc>
 802e0a6:	f855 3b04 	ldr.w	r3, [r5], #4
 802e0aa:	4798      	blx	r3
 802e0ac:	3601      	adds	r6, #1
 802e0ae:	e7f2      	b.n	802e096 <__libc_init_array+0x1e>
 802e0b0:	08031b24 	.word	0x08031b24
 802e0b4:	08031b24 	.word	0x08031b24
 802e0b8:	08031b24 	.word	0x08031b24
 802e0bc:	08031b28 	.word	0x08031b28

0802e0c0 <malloc>:
 802e0c0:	4b02      	ldr	r3, [pc, #8]	; (802e0cc <malloc+0xc>)
 802e0c2:	4601      	mov	r1, r0
 802e0c4:	6818      	ldr	r0, [r3, #0]
 802e0c6:	f000 b87f 	b.w	802e1c8 <_malloc_r>
 802e0ca:	bf00      	nop
 802e0cc:	20000080 	.word	0x20000080

0802e0d0 <free>:
 802e0d0:	4b02      	ldr	r3, [pc, #8]	; (802e0dc <free+0xc>)
 802e0d2:	4601      	mov	r1, r0
 802e0d4:	6818      	ldr	r0, [r3, #0]
 802e0d6:	f000 b80b 	b.w	802e0f0 <_free_r>
 802e0da:	bf00      	nop
 802e0dc:	20000080 	.word	0x20000080

0802e0e0 <memset>:
 802e0e0:	4402      	add	r2, r0
 802e0e2:	4603      	mov	r3, r0
 802e0e4:	4293      	cmp	r3, r2
 802e0e6:	d100      	bne.n	802e0ea <memset+0xa>
 802e0e8:	4770      	bx	lr
 802e0ea:	f803 1b01 	strb.w	r1, [r3], #1
 802e0ee:	e7f9      	b.n	802e0e4 <memset+0x4>

0802e0f0 <_free_r>:
 802e0f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802e0f2:	2900      	cmp	r1, #0
 802e0f4:	d044      	beq.n	802e180 <_free_r+0x90>
 802e0f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e0fa:	9001      	str	r0, [sp, #4]
 802e0fc:	2b00      	cmp	r3, #0
 802e0fe:	f1a1 0404 	sub.w	r4, r1, #4
 802e102:	bfb8      	it	lt
 802e104:	18e4      	addlt	r4, r4, r3
 802e106:	f000 fc71 	bl	802e9ec <__malloc_lock>
 802e10a:	4a1e      	ldr	r2, [pc, #120]	; (802e184 <_free_r+0x94>)
 802e10c:	9801      	ldr	r0, [sp, #4]
 802e10e:	6813      	ldr	r3, [r2, #0]
 802e110:	b933      	cbnz	r3, 802e120 <_free_r+0x30>
 802e112:	6063      	str	r3, [r4, #4]
 802e114:	6014      	str	r4, [r2, #0]
 802e116:	b003      	add	sp, #12
 802e118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e11c:	f000 bc6c 	b.w	802e9f8 <__malloc_unlock>
 802e120:	42a3      	cmp	r3, r4
 802e122:	d908      	bls.n	802e136 <_free_r+0x46>
 802e124:	6825      	ldr	r5, [r4, #0]
 802e126:	1961      	adds	r1, r4, r5
 802e128:	428b      	cmp	r3, r1
 802e12a:	bf01      	itttt	eq
 802e12c:	6819      	ldreq	r1, [r3, #0]
 802e12e:	685b      	ldreq	r3, [r3, #4]
 802e130:	1949      	addeq	r1, r1, r5
 802e132:	6021      	streq	r1, [r4, #0]
 802e134:	e7ed      	b.n	802e112 <_free_r+0x22>
 802e136:	461a      	mov	r2, r3
 802e138:	685b      	ldr	r3, [r3, #4]
 802e13a:	b10b      	cbz	r3, 802e140 <_free_r+0x50>
 802e13c:	42a3      	cmp	r3, r4
 802e13e:	d9fa      	bls.n	802e136 <_free_r+0x46>
 802e140:	6811      	ldr	r1, [r2, #0]
 802e142:	1855      	adds	r5, r2, r1
 802e144:	42a5      	cmp	r5, r4
 802e146:	d10b      	bne.n	802e160 <_free_r+0x70>
 802e148:	6824      	ldr	r4, [r4, #0]
 802e14a:	4421      	add	r1, r4
 802e14c:	1854      	adds	r4, r2, r1
 802e14e:	42a3      	cmp	r3, r4
 802e150:	6011      	str	r1, [r2, #0]
 802e152:	d1e0      	bne.n	802e116 <_free_r+0x26>
 802e154:	681c      	ldr	r4, [r3, #0]
 802e156:	685b      	ldr	r3, [r3, #4]
 802e158:	6053      	str	r3, [r2, #4]
 802e15a:	4421      	add	r1, r4
 802e15c:	6011      	str	r1, [r2, #0]
 802e15e:	e7da      	b.n	802e116 <_free_r+0x26>
 802e160:	d902      	bls.n	802e168 <_free_r+0x78>
 802e162:	230c      	movs	r3, #12
 802e164:	6003      	str	r3, [r0, #0]
 802e166:	e7d6      	b.n	802e116 <_free_r+0x26>
 802e168:	6825      	ldr	r5, [r4, #0]
 802e16a:	1961      	adds	r1, r4, r5
 802e16c:	428b      	cmp	r3, r1
 802e16e:	bf04      	itt	eq
 802e170:	6819      	ldreq	r1, [r3, #0]
 802e172:	685b      	ldreq	r3, [r3, #4]
 802e174:	6063      	str	r3, [r4, #4]
 802e176:	bf04      	itt	eq
 802e178:	1949      	addeq	r1, r1, r5
 802e17a:	6021      	streq	r1, [r4, #0]
 802e17c:	6054      	str	r4, [r2, #4]
 802e17e:	e7ca      	b.n	802e116 <_free_r+0x26>
 802e180:	b003      	add	sp, #12
 802e182:	bd30      	pop	{r4, r5, pc}
 802e184:	200011fc 	.word	0x200011fc

0802e188 <sbrk_aligned>:
 802e188:	b570      	push	{r4, r5, r6, lr}
 802e18a:	4e0e      	ldr	r6, [pc, #56]	; (802e1c4 <sbrk_aligned+0x3c>)
 802e18c:	460c      	mov	r4, r1
 802e18e:	6831      	ldr	r1, [r6, #0]
 802e190:	4605      	mov	r5, r0
 802e192:	b911      	cbnz	r1, 802e19a <sbrk_aligned+0x12>
 802e194:	f000 f91a 	bl	802e3cc <_sbrk_r>
 802e198:	6030      	str	r0, [r6, #0]
 802e19a:	4621      	mov	r1, r4
 802e19c:	4628      	mov	r0, r5
 802e19e:	f000 f915 	bl	802e3cc <_sbrk_r>
 802e1a2:	1c43      	adds	r3, r0, #1
 802e1a4:	d00a      	beq.n	802e1bc <sbrk_aligned+0x34>
 802e1a6:	1cc4      	adds	r4, r0, #3
 802e1a8:	f024 0403 	bic.w	r4, r4, #3
 802e1ac:	42a0      	cmp	r0, r4
 802e1ae:	d007      	beq.n	802e1c0 <sbrk_aligned+0x38>
 802e1b0:	1a21      	subs	r1, r4, r0
 802e1b2:	4628      	mov	r0, r5
 802e1b4:	f000 f90a 	bl	802e3cc <_sbrk_r>
 802e1b8:	3001      	adds	r0, #1
 802e1ba:	d101      	bne.n	802e1c0 <sbrk_aligned+0x38>
 802e1bc:	f04f 34ff 	mov.w	r4, #4294967295
 802e1c0:	4620      	mov	r0, r4
 802e1c2:	bd70      	pop	{r4, r5, r6, pc}
 802e1c4:	20001200 	.word	0x20001200

0802e1c8 <_malloc_r>:
 802e1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e1cc:	1ccd      	adds	r5, r1, #3
 802e1ce:	f025 0503 	bic.w	r5, r5, #3
 802e1d2:	3508      	adds	r5, #8
 802e1d4:	2d0c      	cmp	r5, #12
 802e1d6:	bf38      	it	cc
 802e1d8:	250c      	movcc	r5, #12
 802e1da:	2d00      	cmp	r5, #0
 802e1dc:	4607      	mov	r7, r0
 802e1de:	db01      	blt.n	802e1e4 <_malloc_r+0x1c>
 802e1e0:	42a9      	cmp	r1, r5
 802e1e2:	d905      	bls.n	802e1f0 <_malloc_r+0x28>
 802e1e4:	230c      	movs	r3, #12
 802e1e6:	603b      	str	r3, [r7, #0]
 802e1e8:	2600      	movs	r6, #0
 802e1ea:	4630      	mov	r0, r6
 802e1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e1f0:	4e2e      	ldr	r6, [pc, #184]	; (802e2ac <_malloc_r+0xe4>)
 802e1f2:	f000 fbfb 	bl	802e9ec <__malloc_lock>
 802e1f6:	6833      	ldr	r3, [r6, #0]
 802e1f8:	461c      	mov	r4, r3
 802e1fa:	bb34      	cbnz	r4, 802e24a <_malloc_r+0x82>
 802e1fc:	4629      	mov	r1, r5
 802e1fe:	4638      	mov	r0, r7
 802e200:	f7ff ffc2 	bl	802e188 <sbrk_aligned>
 802e204:	1c43      	adds	r3, r0, #1
 802e206:	4604      	mov	r4, r0
 802e208:	d14d      	bne.n	802e2a6 <_malloc_r+0xde>
 802e20a:	6834      	ldr	r4, [r6, #0]
 802e20c:	4626      	mov	r6, r4
 802e20e:	2e00      	cmp	r6, #0
 802e210:	d140      	bne.n	802e294 <_malloc_r+0xcc>
 802e212:	6823      	ldr	r3, [r4, #0]
 802e214:	4631      	mov	r1, r6
 802e216:	4638      	mov	r0, r7
 802e218:	eb04 0803 	add.w	r8, r4, r3
 802e21c:	f000 f8d6 	bl	802e3cc <_sbrk_r>
 802e220:	4580      	cmp	r8, r0
 802e222:	d13a      	bne.n	802e29a <_malloc_r+0xd2>
 802e224:	6821      	ldr	r1, [r4, #0]
 802e226:	3503      	adds	r5, #3
 802e228:	1a6d      	subs	r5, r5, r1
 802e22a:	f025 0503 	bic.w	r5, r5, #3
 802e22e:	3508      	adds	r5, #8
 802e230:	2d0c      	cmp	r5, #12
 802e232:	bf38      	it	cc
 802e234:	250c      	movcc	r5, #12
 802e236:	4629      	mov	r1, r5
 802e238:	4638      	mov	r0, r7
 802e23a:	f7ff ffa5 	bl	802e188 <sbrk_aligned>
 802e23e:	3001      	adds	r0, #1
 802e240:	d02b      	beq.n	802e29a <_malloc_r+0xd2>
 802e242:	6823      	ldr	r3, [r4, #0]
 802e244:	442b      	add	r3, r5
 802e246:	6023      	str	r3, [r4, #0]
 802e248:	e00e      	b.n	802e268 <_malloc_r+0xa0>
 802e24a:	6822      	ldr	r2, [r4, #0]
 802e24c:	1b52      	subs	r2, r2, r5
 802e24e:	d41e      	bmi.n	802e28e <_malloc_r+0xc6>
 802e250:	2a0b      	cmp	r2, #11
 802e252:	d916      	bls.n	802e282 <_malloc_r+0xba>
 802e254:	1961      	adds	r1, r4, r5
 802e256:	42a3      	cmp	r3, r4
 802e258:	6025      	str	r5, [r4, #0]
 802e25a:	bf18      	it	ne
 802e25c:	6059      	strne	r1, [r3, #4]
 802e25e:	6863      	ldr	r3, [r4, #4]
 802e260:	bf08      	it	eq
 802e262:	6031      	streq	r1, [r6, #0]
 802e264:	5162      	str	r2, [r4, r5]
 802e266:	604b      	str	r3, [r1, #4]
 802e268:	4638      	mov	r0, r7
 802e26a:	f104 060b 	add.w	r6, r4, #11
 802e26e:	f000 fbc3 	bl	802e9f8 <__malloc_unlock>
 802e272:	f026 0607 	bic.w	r6, r6, #7
 802e276:	1d23      	adds	r3, r4, #4
 802e278:	1af2      	subs	r2, r6, r3
 802e27a:	d0b6      	beq.n	802e1ea <_malloc_r+0x22>
 802e27c:	1b9b      	subs	r3, r3, r6
 802e27e:	50a3      	str	r3, [r4, r2]
 802e280:	e7b3      	b.n	802e1ea <_malloc_r+0x22>
 802e282:	6862      	ldr	r2, [r4, #4]
 802e284:	42a3      	cmp	r3, r4
 802e286:	bf0c      	ite	eq
 802e288:	6032      	streq	r2, [r6, #0]
 802e28a:	605a      	strne	r2, [r3, #4]
 802e28c:	e7ec      	b.n	802e268 <_malloc_r+0xa0>
 802e28e:	4623      	mov	r3, r4
 802e290:	6864      	ldr	r4, [r4, #4]
 802e292:	e7b2      	b.n	802e1fa <_malloc_r+0x32>
 802e294:	4634      	mov	r4, r6
 802e296:	6876      	ldr	r6, [r6, #4]
 802e298:	e7b9      	b.n	802e20e <_malloc_r+0x46>
 802e29a:	230c      	movs	r3, #12
 802e29c:	603b      	str	r3, [r7, #0]
 802e29e:	4638      	mov	r0, r7
 802e2a0:	f000 fbaa 	bl	802e9f8 <__malloc_unlock>
 802e2a4:	e7a1      	b.n	802e1ea <_malloc_r+0x22>
 802e2a6:	6025      	str	r5, [r4, #0]
 802e2a8:	e7de      	b.n	802e268 <_malloc_r+0xa0>
 802e2aa:	bf00      	nop
 802e2ac:	200011fc 	.word	0x200011fc

0802e2b0 <iprintf>:
 802e2b0:	b40f      	push	{r0, r1, r2, r3}
 802e2b2:	4b0a      	ldr	r3, [pc, #40]	; (802e2dc <iprintf+0x2c>)
 802e2b4:	b513      	push	{r0, r1, r4, lr}
 802e2b6:	681c      	ldr	r4, [r3, #0]
 802e2b8:	b124      	cbz	r4, 802e2c4 <iprintf+0x14>
 802e2ba:	69a3      	ldr	r3, [r4, #24]
 802e2bc:	b913      	cbnz	r3, 802e2c4 <iprintf+0x14>
 802e2be:	4620      	mov	r0, r4
 802e2c0:	f000 fa8e 	bl	802e7e0 <__sinit>
 802e2c4:	ab05      	add	r3, sp, #20
 802e2c6:	9a04      	ldr	r2, [sp, #16]
 802e2c8:	68a1      	ldr	r1, [r4, #8]
 802e2ca:	9301      	str	r3, [sp, #4]
 802e2cc:	4620      	mov	r0, r4
 802e2ce:	f000 fd1f 	bl	802ed10 <_vfiprintf_r>
 802e2d2:	b002      	add	sp, #8
 802e2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e2d8:	b004      	add	sp, #16
 802e2da:	4770      	bx	lr
 802e2dc:	20000080 	.word	0x20000080

0802e2e0 <_puts_r>:
 802e2e0:	b570      	push	{r4, r5, r6, lr}
 802e2e2:	460e      	mov	r6, r1
 802e2e4:	4605      	mov	r5, r0
 802e2e6:	b118      	cbz	r0, 802e2f0 <_puts_r+0x10>
 802e2e8:	6983      	ldr	r3, [r0, #24]
 802e2ea:	b90b      	cbnz	r3, 802e2f0 <_puts_r+0x10>
 802e2ec:	f000 fa78 	bl	802e7e0 <__sinit>
 802e2f0:	69ab      	ldr	r3, [r5, #24]
 802e2f2:	68ac      	ldr	r4, [r5, #8]
 802e2f4:	b913      	cbnz	r3, 802e2fc <_puts_r+0x1c>
 802e2f6:	4628      	mov	r0, r5
 802e2f8:	f000 fa72 	bl	802e7e0 <__sinit>
 802e2fc:	4b2c      	ldr	r3, [pc, #176]	; (802e3b0 <_puts_r+0xd0>)
 802e2fe:	429c      	cmp	r4, r3
 802e300:	d120      	bne.n	802e344 <_puts_r+0x64>
 802e302:	686c      	ldr	r4, [r5, #4]
 802e304:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e306:	07db      	lsls	r3, r3, #31
 802e308:	d405      	bmi.n	802e316 <_puts_r+0x36>
 802e30a:	89a3      	ldrh	r3, [r4, #12]
 802e30c:	0598      	lsls	r0, r3, #22
 802e30e:	d402      	bmi.n	802e316 <_puts_r+0x36>
 802e310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e312:	f000 fb03 	bl	802e91c <__retarget_lock_acquire_recursive>
 802e316:	89a3      	ldrh	r3, [r4, #12]
 802e318:	0719      	lsls	r1, r3, #28
 802e31a:	d51d      	bpl.n	802e358 <_puts_r+0x78>
 802e31c:	6923      	ldr	r3, [r4, #16]
 802e31e:	b1db      	cbz	r3, 802e358 <_puts_r+0x78>
 802e320:	3e01      	subs	r6, #1
 802e322:	68a3      	ldr	r3, [r4, #8]
 802e324:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802e328:	3b01      	subs	r3, #1
 802e32a:	60a3      	str	r3, [r4, #8]
 802e32c:	bb39      	cbnz	r1, 802e37e <_puts_r+0x9e>
 802e32e:	2b00      	cmp	r3, #0
 802e330:	da38      	bge.n	802e3a4 <_puts_r+0xc4>
 802e332:	4622      	mov	r2, r4
 802e334:	210a      	movs	r1, #10
 802e336:	4628      	mov	r0, r5
 802e338:	f000 f878 	bl	802e42c <__swbuf_r>
 802e33c:	3001      	adds	r0, #1
 802e33e:	d011      	beq.n	802e364 <_puts_r+0x84>
 802e340:	250a      	movs	r5, #10
 802e342:	e011      	b.n	802e368 <_puts_r+0x88>
 802e344:	4b1b      	ldr	r3, [pc, #108]	; (802e3b4 <_puts_r+0xd4>)
 802e346:	429c      	cmp	r4, r3
 802e348:	d101      	bne.n	802e34e <_puts_r+0x6e>
 802e34a:	68ac      	ldr	r4, [r5, #8]
 802e34c:	e7da      	b.n	802e304 <_puts_r+0x24>
 802e34e:	4b1a      	ldr	r3, [pc, #104]	; (802e3b8 <_puts_r+0xd8>)
 802e350:	429c      	cmp	r4, r3
 802e352:	bf08      	it	eq
 802e354:	68ec      	ldreq	r4, [r5, #12]
 802e356:	e7d5      	b.n	802e304 <_puts_r+0x24>
 802e358:	4621      	mov	r1, r4
 802e35a:	4628      	mov	r0, r5
 802e35c:	f000 f8b8 	bl	802e4d0 <__swsetup_r>
 802e360:	2800      	cmp	r0, #0
 802e362:	d0dd      	beq.n	802e320 <_puts_r+0x40>
 802e364:	f04f 35ff 	mov.w	r5, #4294967295
 802e368:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e36a:	07da      	lsls	r2, r3, #31
 802e36c:	d405      	bmi.n	802e37a <_puts_r+0x9a>
 802e36e:	89a3      	ldrh	r3, [r4, #12]
 802e370:	059b      	lsls	r3, r3, #22
 802e372:	d402      	bmi.n	802e37a <_puts_r+0x9a>
 802e374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e376:	f000 fad2 	bl	802e91e <__retarget_lock_release_recursive>
 802e37a:	4628      	mov	r0, r5
 802e37c:	bd70      	pop	{r4, r5, r6, pc}
 802e37e:	2b00      	cmp	r3, #0
 802e380:	da04      	bge.n	802e38c <_puts_r+0xac>
 802e382:	69a2      	ldr	r2, [r4, #24]
 802e384:	429a      	cmp	r2, r3
 802e386:	dc06      	bgt.n	802e396 <_puts_r+0xb6>
 802e388:	290a      	cmp	r1, #10
 802e38a:	d004      	beq.n	802e396 <_puts_r+0xb6>
 802e38c:	6823      	ldr	r3, [r4, #0]
 802e38e:	1c5a      	adds	r2, r3, #1
 802e390:	6022      	str	r2, [r4, #0]
 802e392:	7019      	strb	r1, [r3, #0]
 802e394:	e7c5      	b.n	802e322 <_puts_r+0x42>
 802e396:	4622      	mov	r2, r4
 802e398:	4628      	mov	r0, r5
 802e39a:	f000 f847 	bl	802e42c <__swbuf_r>
 802e39e:	3001      	adds	r0, #1
 802e3a0:	d1bf      	bne.n	802e322 <_puts_r+0x42>
 802e3a2:	e7df      	b.n	802e364 <_puts_r+0x84>
 802e3a4:	6823      	ldr	r3, [r4, #0]
 802e3a6:	250a      	movs	r5, #10
 802e3a8:	1c5a      	adds	r2, r3, #1
 802e3aa:	6022      	str	r2, [r4, #0]
 802e3ac:	701d      	strb	r5, [r3, #0]
 802e3ae:	e7db      	b.n	802e368 <_puts_r+0x88>
 802e3b0:	08031aa8 	.word	0x08031aa8
 802e3b4:	08031ac8 	.word	0x08031ac8
 802e3b8:	08031a88 	.word	0x08031a88

0802e3bc <puts>:
 802e3bc:	4b02      	ldr	r3, [pc, #8]	; (802e3c8 <puts+0xc>)
 802e3be:	4601      	mov	r1, r0
 802e3c0:	6818      	ldr	r0, [r3, #0]
 802e3c2:	f7ff bf8d 	b.w	802e2e0 <_puts_r>
 802e3c6:	bf00      	nop
 802e3c8:	20000080 	.word	0x20000080

0802e3cc <_sbrk_r>:
 802e3cc:	b538      	push	{r3, r4, r5, lr}
 802e3ce:	4d06      	ldr	r5, [pc, #24]	; (802e3e8 <_sbrk_r+0x1c>)
 802e3d0:	2300      	movs	r3, #0
 802e3d2:	4604      	mov	r4, r0
 802e3d4:	4608      	mov	r0, r1
 802e3d6:	602b      	str	r3, [r5, #0]
 802e3d8:	f7f3 fecc 	bl	8022174 <_sbrk>
 802e3dc:	1c43      	adds	r3, r0, #1
 802e3de:	d102      	bne.n	802e3e6 <_sbrk_r+0x1a>
 802e3e0:	682b      	ldr	r3, [r5, #0]
 802e3e2:	b103      	cbz	r3, 802e3e6 <_sbrk_r+0x1a>
 802e3e4:	6023      	str	r3, [r4, #0]
 802e3e6:	bd38      	pop	{r3, r4, r5, pc}
 802e3e8:	20001208 	.word	0x20001208

0802e3ec <siprintf>:
 802e3ec:	b40e      	push	{r1, r2, r3}
 802e3ee:	b500      	push	{lr}
 802e3f0:	b09c      	sub	sp, #112	; 0x70
 802e3f2:	ab1d      	add	r3, sp, #116	; 0x74
 802e3f4:	9002      	str	r0, [sp, #8]
 802e3f6:	9006      	str	r0, [sp, #24]
 802e3f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802e3fc:	4809      	ldr	r0, [pc, #36]	; (802e424 <siprintf+0x38>)
 802e3fe:	9107      	str	r1, [sp, #28]
 802e400:	9104      	str	r1, [sp, #16]
 802e402:	4909      	ldr	r1, [pc, #36]	; (802e428 <siprintf+0x3c>)
 802e404:	f853 2b04 	ldr.w	r2, [r3], #4
 802e408:	9105      	str	r1, [sp, #20]
 802e40a:	6800      	ldr	r0, [r0, #0]
 802e40c:	9301      	str	r3, [sp, #4]
 802e40e:	a902      	add	r1, sp, #8
 802e410:	f000 fb54 	bl	802eabc <_svfiprintf_r>
 802e414:	9b02      	ldr	r3, [sp, #8]
 802e416:	2200      	movs	r2, #0
 802e418:	701a      	strb	r2, [r3, #0]
 802e41a:	b01c      	add	sp, #112	; 0x70
 802e41c:	f85d eb04 	ldr.w	lr, [sp], #4
 802e420:	b003      	add	sp, #12
 802e422:	4770      	bx	lr
 802e424:	20000080 	.word	0x20000080
 802e428:	ffff0208 	.word	0xffff0208

0802e42c <__swbuf_r>:
 802e42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e42e:	460e      	mov	r6, r1
 802e430:	4614      	mov	r4, r2
 802e432:	4605      	mov	r5, r0
 802e434:	b118      	cbz	r0, 802e43e <__swbuf_r+0x12>
 802e436:	6983      	ldr	r3, [r0, #24]
 802e438:	b90b      	cbnz	r3, 802e43e <__swbuf_r+0x12>
 802e43a:	f000 f9d1 	bl	802e7e0 <__sinit>
 802e43e:	4b21      	ldr	r3, [pc, #132]	; (802e4c4 <__swbuf_r+0x98>)
 802e440:	429c      	cmp	r4, r3
 802e442:	d12b      	bne.n	802e49c <__swbuf_r+0x70>
 802e444:	686c      	ldr	r4, [r5, #4]
 802e446:	69a3      	ldr	r3, [r4, #24]
 802e448:	60a3      	str	r3, [r4, #8]
 802e44a:	89a3      	ldrh	r3, [r4, #12]
 802e44c:	071a      	lsls	r2, r3, #28
 802e44e:	d52f      	bpl.n	802e4b0 <__swbuf_r+0x84>
 802e450:	6923      	ldr	r3, [r4, #16]
 802e452:	b36b      	cbz	r3, 802e4b0 <__swbuf_r+0x84>
 802e454:	6923      	ldr	r3, [r4, #16]
 802e456:	6820      	ldr	r0, [r4, #0]
 802e458:	1ac0      	subs	r0, r0, r3
 802e45a:	6963      	ldr	r3, [r4, #20]
 802e45c:	b2f6      	uxtb	r6, r6
 802e45e:	4283      	cmp	r3, r0
 802e460:	4637      	mov	r7, r6
 802e462:	dc04      	bgt.n	802e46e <__swbuf_r+0x42>
 802e464:	4621      	mov	r1, r4
 802e466:	4628      	mov	r0, r5
 802e468:	f000 f926 	bl	802e6b8 <_fflush_r>
 802e46c:	bb30      	cbnz	r0, 802e4bc <__swbuf_r+0x90>
 802e46e:	68a3      	ldr	r3, [r4, #8]
 802e470:	3b01      	subs	r3, #1
 802e472:	60a3      	str	r3, [r4, #8]
 802e474:	6823      	ldr	r3, [r4, #0]
 802e476:	1c5a      	adds	r2, r3, #1
 802e478:	6022      	str	r2, [r4, #0]
 802e47a:	701e      	strb	r6, [r3, #0]
 802e47c:	6963      	ldr	r3, [r4, #20]
 802e47e:	3001      	adds	r0, #1
 802e480:	4283      	cmp	r3, r0
 802e482:	d004      	beq.n	802e48e <__swbuf_r+0x62>
 802e484:	89a3      	ldrh	r3, [r4, #12]
 802e486:	07db      	lsls	r3, r3, #31
 802e488:	d506      	bpl.n	802e498 <__swbuf_r+0x6c>
 802e48a:	2e0a      	cmp	r6, #10
 802e48c:	d104      	bne.n	802e498 <__swbuf_r+0x6c>
 802e48e:	4621      	mov	r1, r4
 802e490:	4628      	mov	r0, r5
 802e492:	f000 f911 	bl	802e6b8 <_fflush_r>
 802e496:	b988      	cbnz	r0, 802e4bc <__swbuf_r+0x90>
 802e498:	4638      	mov	r0, r7
 802e49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e49c:	4b0a      	ldr	r3, [pc, #40]	; (802e4c8 <__swbuf_r+0x9c>)
 802e49e:	429c      	cmp	r4, r3
 802e4a0:	d101      	bne.n	802e4a6 <__swbuf_r+0x7a>
 802e4a2:	68ac      	ldr	r4, [r5, #8]
 802e4a4:	e7cf      	b.n	802e446 <__swbuf_r+0x1a>
 802e4a6:	4b09      	ldr	r3, [pc, #36]	; (802e4cc <__swbuf_r+0xa0>)
 802e4a8:	429c      	cmp	r4, r3
 802e4aa:	bf08      	it	eq
 802e4ac:	68ec      	ldreq	r4, [r5, #12]
 802e4ae:	e7ca      	b.n	802e446 <__swbuf_r+0x1a>
 802e4b0:	4621      	mov	r1, r4
 802e4b2:	4628      	mov	r0, r5
 802e4b4:	f000 f80c 	bl	802e4d0 <__swsetup_r>
 802e4b8:	2800      	cmp	r0, #0
 802e4ba:	d0cb      	beq.n	802e454 <__swbuf_r+0x28>
 802e4bc:	f04f 37ff 	mov.w	r7, #4294967295
 802e4c0:	e7ea      	b.n	802e498 <__swbuf_r+0x6c>
 802e4c2:	bf00      	nop
 802e4c4:	08031aa8 	.word	0x08031aa8
 802e4c8:	08031ac8 	.word	0x08031ac8
 802e4cc:	08031a88 	.word	0x08031a88

0802e4d0 <__swsetup_r>:
 802e4d0:	4b32      	ldr	r3, [pc, #200]	; (802e59c <__swsetup_r+0xcc>)
 802e4d2:	b570      	push	{r4, r5, r6, lr}
 802e4d4:	681d      	ldr	r5, [r3, #0]
 802e4d6:	4606      	mov	r6, r0
 802e4d8:	460c      	mov	r4, r1
 802e4da:	b125      	cbz	r5, 802e4e6 <__swsetup_r+0x16>
 802e4dc:	69ab      	ldr	r3, [r5, #24]
 802e4de:	b913      	cbnz	r3, 802e4e6 <__swsetup_r+0x16>
 802e4e0:	4628      	mov	r0, r5
 802e4e2:	f000 f97d 	bl	802e7e0 <__sinit>
 802e4e6:	4b2e      	ldr	r3, [pc, #184]	; (802e5a0 <__swsetup_r+0xd0>)
 802e4e8:	429c      	cmp	r4, r3
 802e4ea:	d10f      	bne.n	802e50c <__swsetup_r+0x3c>
 802e4ec:	686c      	ldr	r4, [r5, #4]
 802e4ee:	89a3      	ldrh	r3, [r4, #12]
 802e4f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802e4f4:	0719      	lsls	r1, r3, #28
 802e4f6:	d42c      	bmi.n	802e552 <__swsetup_r+0x82>
 802e4f8:	06dd      	lsls	r5, r3, #27
 802e4fa:	d411      	bmi.n	802e520 <__swsetup_r+0x50>
 802e4fc:	2309      	movs	r3, #9
 802e4fe:	6033      	str	r3, [r6, #0]
 802e500:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802e504:	81a3      	strh	r3, [r4, #12]
 802e506:	f04f 30ff 	mov.w	r0, #4294967295
 802e50a:	e03e      	b.n	802e58a <__swsetup_r+0xba>
 802e50c:	4b25      	ldr	r3, [pc, #148]	; (802e5a4 <__swsetup_r+0xd4>)
 802e50e:	429c      	cmp	r4, r3
 802e510:	d101      	bne.n	802e516 <__swsetup_r+0x46>
 802e512:	68ac      	ldr	r4, [r5, #8]
 802e514:	e7eb      	b.n	802e4ee <__swsetup_r+0x1e>
 802e516:	4b24      	ldr	r3, [pc, #144]	; (802e5a8 <__swsetup_r+0xd8>)
 802e518:	429c      	cmp	r4, r3
 802e51a:	bf08      	it	eq
 802e51c:	68ec      	ldreq	r4, [r5, #12]
 802e51e:	e7e6      	b.n	802e4ee <__swsetup_r+0x1e>
 802e520:	0758      	lsls	r0, r3, #29
 802e522:	d512      	bpl.n	802e54a <__swsetup_r+0x7a>
 802e524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e526:	b141      	cbz	r1, 802e53a <__swsetup_r+0x6a>
 802e528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802e52c:	4299      	cmp	r1, r3
 802e52e:	d002      	beq.n	802e536 <__swsetup_r+0x66>
 802e530:	4630      	mov	r0, r6
 802e532:	f7ff fddd 	bl	802e0f0 <_free_r>
 802e536:	2300      	movs	r3, #0
 802e538:	6363      	str	r3, [r4, #52]	; 0x34
 802e53a:	89a3      	ldrh	r3, [r4, #12]
 802e53c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802e540:	81a3      	strh	r3, [r4, #12]
 802e542:	2300      	movs	r3, #0
 802e544:	6063      	str	r3, [r4, #4]
 802e546:	6923      	ldr	r3, [r4, #16]
 802e548:	6023      	str	r3, [r4, #0]
 802e54a:	89a3      	ldrh	r3, [r4, #12]
 802e54c:	f043 0308 	orr.w	r3, r3, #8
 802e550:	81a3      	strh	r3, [r4, #12]
 802e552:	6923      	ldr	r3, [r4, #16]
 802e554:	b94b      	cbnz	r3, 802e56a <__swsetup_r+0x9a>
 802e556:	89a3      	ldrh	r3, [r4, #12]
 802e558:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802e55c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802e560:	d003      	beq.n	802e56a <__swsetup_r+0x9a>
 802e562:	4621      	mov	r1, r4
 802e564:	4630      	mov	r0, r6
 802e566:	f000 fa01 	bl	802e96c <__smakebuf_r>
 802e56a:	89a0      	ldrh	r0, [r4, #12]
 802e56c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802e570:	f010 0301 	ands.w	r3, r0, #1
 802e574:	d00a      	beq.n	802e58c <__swsetup_r+0xbc>
 802e576:	2300      	movs	r3, #0
 802e578:	60a3      	str	r3, [r4, #8]
 802e57a:	6963      	ldr	r3, [r4, #20]
 802e57c:	425b      	negs	r3, r3
 802e57e:	61a3      	str	r3, [r4, #24]
 802e580:	6923      	ldr	r3, [r4, #16]
 802e582:	b943      	cbnz	r3, 802e596 <__swsetup_r+0xc6>
 802e584:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802e588:	d1ba      	bne.n	802e500 <__swsetup_r+0x30>
 802e58a:	bd70      	pop	{r4, r5, r6, pc}
 802e58c:	0781      	lsls	r1, r0, #30
 802e58e:	bf58      	it	pl
 802e590:	6963      	ldrpl	r3, [r4, #20]
 802e592:	60a3      	str	r3, [r4, #8]
 802e594:	e7f4      	b.n	802e580 <__swsetup_r+0xb0>
 802e596:	2000      	movs	r0, #0
 802e598:	e7f7      	b.n	802e58a <__swsetup_r+0xba>
 802e59a:	bf00      	nop
 802e59c:	20000080 	.word	0x20000080
 802e5a0:	08031aa8 	.word	0x08031aa8
 802e5a4:	08031ac8 	.word	0x08031ac8
 802e5a8:	08031a88 	.word	0x08031a88

0802e5ac <__sflush_r>:
 802e5ac:	898a      	ldrh	r2, [r1, #12]
 802e5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e5b2:	4605      	mov	r5, r0
 802e5b4:	0710      	lsls	r0, r2, #28
 802e5b6:	460c      	mov	r4, r1
 802e5b8:	d458      	bmi.n	802e66c <__sflush_r+0xc0>
 802e5ba:	684b      	ldr	r3, [r1, #4]
 802e5bc:	2b00      	cmp	r3, #0
 802e5be:	dc05      	bgt.n	802e5cc <__sflush_r+0x20>
 802e5c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802e5c2:	2b00      	cmp	r3, #0
 802e5c4:	dc02      	bgt.n	802e5cc <__sflush_r+0x20>
 802e5c6:	2000      	movs	r0, #0
 802e5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e5cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802e5ce:	2e00      	cmp	r6, #0
 802e5d0:	d0f9      	beq.n	802e5c6 <__sflush_r+0x1a>
 802e5d2:	2300      	movs	r3, #0
 802e5d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802e5d8:	682f      	ldr	r7, [r5, #0]
 802e5da:	602b      	str	r3, [r5, #0]
 802e5dc:	d032      	beq.n	802e644 <__sflush_r+0x98>
 802e5de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802e5e0:	89a3      	ldrh	r3, [r4, #12]
 802e5e2:	075a      	lsls	r2, r3, #29
 802e5e4:	d505      	bpl.n	802e5f2 <__sflush_r+0x46>
 802e5e6:	6863      	ldr	r3, [r4, #4]
 802e5e8:	1ac0      	subs	r0, r0, r3
 802e5ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802e5ec:	b10b      	cbz	r3, 802e5f2 <__sflush_r+0x46>
 802e5ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802e5f0:	1ac0      	subs	r0, r0, r3
 802e5f2:	2300      	movs	r3, #0
 802e5f4:	4602      	mov	r2, r0
 802e5f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802e5f8:	6a21      	ldr	r1, [r4, #32]
 802e5fa:	4628      	mov	r0, r5
 802e5fc:	47b0      	blx	r6
 802e5fe:	1c43      	adds	r3, r0, #1
 802e600:	89a3      	ldrh	r3, [r4, #12]
 802e602:	d106      	bne.n	802e612 <__sflush_r+0x66>
 802e604:	6829      	ldr	r1, [r5, #0]
 802e606:	291d      	cmp	r1, #29
 802e608:	d82c      	bhi.n	802e664 <__sflush_r+0xb8>
 802e60a:	4a2a      	ldr	r2, [pc, #168]	; (802e6b4 <__sflush_r+0x108>)
 802e60c:	40ca      	lsrs	r2, r1
 802e60e:	07d6      	lsls	r6, r2, #31
 802e610:	d528      	bpl.n	802e664 <__sflush_r+0xb8>
 802e612:	2200      	movs	r2, #0
 802e614:	6062      	str	r2, [r4, #4]
 802e616:	04d9      	lsls	r1, r3, #19
 802e618:	6922      	ldr	r2, [r4, #16]
 802e61a:	6022      	str	r2, [r4, #0]
 802e61c:	d504      	bpl.n	802e628 <__sflush_r+0x7c>
 802e61e:	1c42      	adds	r2, r0, #1
 802e620:	d101      	bne.n	802e626 <__sflush_r+0x7a>
 802e622:	682b      	ldr	r3, [r5, #0]
 802e624:	b903      	cbnz	r3, 802e628 <__sflush_r+0x7c>
 802e626:	6560      	str	r0, [r4, #84]	; 0x54
 802e628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e62a:	602f      	str	r7, [r5, #0]
 802e62c:	2900      	cmp	r1, #0
 802e62e:	d0ca      	beq.n	802e5c6 <__sflush_r+0x1a>
 802e630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802e634:	4299      	cmp	r1, r3
 802e636:	d002      	beq.n	802e63e <__sflush_r+0x92>
 802e638:	4628      	mov	r0, r5
 802e63a:	f7ff fd59 	bl	802e0f0 <_free_r>
 802e63e:	2000      	movs	r0, #0
 802e640:	6360      	str	r0, [r4, #52]	; 0x34
 802e642:	e7c1      	b.n	802e5c8 <__sflush_r+0x1c>
 802e644:	6a21      	ldr	r1, [r4, #32]
 802e646:	2301      	movs	r3, #1
 802e648:	4628      	mov	r0, r5
 802e64a:	47b0      	blx	r6
 802e64c:	1c41      	adds	r1, r0, #1
 802e64e:	d1c7      	bne.n	802e5e0 <__sflush_r+0x34>
 802e650:	682b      	ldr	r3, [r5, #0]
 802e652:	2b00      	cmp	r3, #0
 802e654:	d0c4      	beq.n	802e5e0 <__sflush_r+0x34>
 802e656:	2b1d      	cmp	r3, #29
 802e658:	d001      	beq.n	802e65e <__sflush_r+0xb2>
 802e65a:	2b16      	cmp	r3, #22
 802e65c:	d101      	bne.n	802e662 <__sflush_r+0xb6>
 802e65e:	602f      	str	r7, [r5, #0]
 802e660:	e7b1      	b.n	802e5c6 <__sflush_r+0x1a>
 802e662:	89a3      	ldrh	r3, [r4, #12]
 802e664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e668:	81a3      	strh	r3, [r4, #12]
 802e66a:	e7ad      	b.n	802e5c8 <__sflush_r+0x1c>
 802e66c:	690f      	ldr	r7, [r1, #16]
 802e66e:	2f00      	cmp	r7, #0
 802e670:	d0a9      	beq.n	802e5c6 <__sflush_r+0x1a>
 802e672:	0793      	lsls	r3, r2, #30
 802e674:	680e      	ldr	r6, [r1, #0]
 802e676:	bf08      	it	eq
 802e678:	694b      	ldreq	r3, [r1, #20]
 802e67a:	600f      	str	r7, [r1, #0]
 802e67c:	bf18      	it	ne
 802e67e:	2300      	movne	r3, #0
 802e680:	eba6 0807 	sub.w	r8, r6, r7
 802e684:	608b      	str	r3, [r1, #8]
 802e686:	f1b8 0f00 	cmp.w	r8, #0
 802e68a:	dd9c      	ble.n	802e5c6 <__sflush_r+0x1a>
 802e68c:	6a21      	ldr	r1, [r4, #32]
 802e68e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802e690:	4643      	mov	r3, r8
 802e692:	463a      	mov	r2, r7
 802e694:	4628      	mov	r0, r5
 802e696:	47b0      	blx	r6
 802e698:	2800      	cmp	r0, #0
 802e69a:	dc06      	bgt.n	802e6aa <__sflush_r+0xfe>
 802e69c:	89a3      	ldrh	r3, [r4, #12]
 802e69e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e6a2:	81a3      	strh	r3, [r4, #12]
 802e6a4:	f04f 30ff 	mov.w	r0, #4294967295
 802e6a8:	e78e      	b.n	802e5c8 <__sflush_r+0x1c>
 802e6aa:	4407      	add	r7, r0
 802e6ac:	eba8 0800 	sub.w	r8, r8, r0
 802e6b0:	e7e9      	b.n	802e686 <__sflush_r+0xda>
 802e6b2:	bf00      	nop
 802e6b4:	20400001 	.word	0x20400001

0802e6b8 <_fflush_r>:
 802e6b8:	b538      	push	{r3, r4, r5, lr}
 802e6ba:	690b      	ldr	r3, [r1, #16]
 802e6bc:	4605      	mov	r5, r0
 802e6be:	460c      	mov	r4, r1
 802e6c0:	b913      	cbnz	r3, 802e6c8 <_fflush_r+0x10>
 802e6c2:	2500      	movs	r5, #0
 802e6c4:	4628      	mov	r0, r5
 802e6c6:	bd38      	pop	{r3, r4, r5, pc}
 802e6c8:	b118      	cbz	r0, 802e6d2 <_fflush_r+0x1a>
 802e6ca:	6983      	ldr	r3, [r0, #24]
 802e6cc:	b90b      	cbnz	r3, 802e6d2 <_fflush_r+0x1a>
 802e6ce:	f000 f887 	bl	802e7e0 <__sinit>
 802e6d2:	4b14      	ldr	r3, [pc, #80]	; (802e724 <_fflush_r+0x6c>)
 802e6d4:	429c      	cmp	r4, r3
 802e6d6:	d11b      	bne.n	802e710 <_fflush_r+0x58>
 802e6d8:	686c      	ldr	r4, [r5, #4]
 802e6da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e6de:	2b00      	cmp	r3, #0
 802e6e0:	d0ef      	beq.n	802e6c2 <_fflush_r+0xa>
 802e6e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802e6e4:	07d0      	lsls	r0, r2, #31
 802e6e6:	d404      	bmi.n	802e6f2 <_fflush_r+0x3a>
 802e6e8:	0599      	lsls	r1, r3, #22
 802e6ea:	d402      	bmi.n	802e6f2 <_fflush_r+0x3a>
 802e6ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e6ee:	f000 f915 	bl	802e91c <__retarget_lock_acquire_recursive>
 802e6f2:	4628      	mov	r0, r5
 802e6f4:	4621      	mov	r1, r4
 802e6f6:	f7ff ff59 	bl	802e5ac <__sflush_r>
 802e6fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e6fc:	07da      	lsls	r2, r3, #31
 802e6fe:	4605      	mov	r5, r0
 802e700:	d4e0      	bmi.n	802e6c4 <_fflush_r+0xc>
 802e702:	89a3      	ldrh	r3, [r4, #12]
 802e704:	059b      	lsls	r3, r3, #22
 802e706:	d4dd      	bmi.n	802e6c4 <_fflush_r+0xc>
 802e708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e70a:	f000 f908 	bl	802e91e <__retarget_lock_release_recursive>
 802e70e:	e7d9      	b.n	802e6c4 <_fflush_r+0xc>
 802e710:	4b05      	ldr	r3, [pc, #20]	; (802e728 <_fflush_r+0x70>)
 802e712:	429c      	cmp	r4, r3
 802e714:	d101      	bne.n	802e71a <_fflush_r+0x62>
 802e716:	68ac      	ldr	r4, [r5, #8]
 802e718:	e7df      	b.n	802e6da <_fflush_r+0x22>
 802e71a:	4b04      	ldr	r3, [pc, #16]	; (802e72c <_fflush_r+0x74>)
 802e71c:	429c      	cmp	r4, r3
 802e71e:	bf08      	it	eq
 802e720:	68ec      	ldreq	r4, [r5, #12]
 802e722:	e7da      	b.n	802e6da <_fflush_r+0x22>
 802e724:	08031aa8 	.word	0x08031aa8
 802e728:	08031ac8 	.word	0x08031ac8
 802e72c:	08031a88 	.word	0x08031a88

0802e730 <std>:
 802e730:	2300      	movs	r3, #0
 802e732:	b510      	push	{r4, lr}
 802e734:	4604      	mov	r4, r0
 802e736:	e9c0 3300 	strd	r3, r3, [r0]
 802e73a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802e73e:	6083      	str	r3, [r0, #8]
 802e740:	8181      	strh	r1, [r0, #12]
 802e742:	6643      	str	r3, [r0, #100]	; 0x64
 802e744:	81c2      	strh	r2, [r0, #14]
 802e746:	6183      	str	r3, [r0, #24]
 802e748:	4619      	mov	r1, r3
 802e74a:	2208      	movs	r2, #8
 802e74c:	305c      	adds	r0, #92	; 0x5c
 802e74e:	f7ff fcc7 	bl	802e0e0 <memset>
 802e752:	4b05      	ldr	r3, [pc, #20]	; (802e768 <std+0x38>)
 802e754:	6263      	str	r3, [r4, #36]	; 0x24
 802e756:	4b05      	ldr	r3, [pc, #20]	; (802e76c <std+0x3c>)
 802e758:	62a3      	str	r3, [r4, #40]	; 0x28
 802e75a:	4b05      	ldr	r3, [pc, #20]	; (802e770 <std+0x40>)
 802e75c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802e75e:	4b05      	ldr	r3, [pc, #20]	; (802e774 <std+0x44>)
 802e760:	6224      	str	r4, [r4, #32]
 802e762:	6323      	str	r3, [r4, #48]	; 0x30
 802e764:	bd10      	pop	{r4, pc}
 802e766:	bf00      	nop
 802e768:	0802f299 	.word	0x0802f299
 802e76c:	0802f2bb 	.word	0x0802f2bb
 802e770:	0802f2f3 	.word	0x0802f2f3
 802e774:	0802f317 	.word	0x0802f317

0802e778 <_cleanup_r>:
 802e778:	4901      	ldr	r1, [pc, #4]	; (802e780 <_cleanup_r+0x8>)
 802e77a:	f000 b8af 	b.w	802e8dc <_fwalk_reent>
 802e77e:	bf00      	nop
 802e780:	0802e6b9 	.word	0x0802e6b9

0802e784 <__sfmoreglue>:
 802e784:	b570      	push	{r4, r5, r6, lr}
 802e786:	2268      	movs	r2, #104	; 0x68
 802e788:	1e4d      	subs	r5, r1, #1
 802e78a:	4355      	muls	r5, r2
 802e78c:	460e      	mov	r6, r1
 802e78e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802e792:	f7ff fd19 	bl	802e1c8 <_malloc_r>
 802e796:	4604      	mov	r4, r0
 802e798:	b140      	cbz	r0, 802e7ac <__sfmoreglue+0x28>
 802e79a:	2100      	movs	r1, #0
 802e79c:	e9c0 1600 	strd	r1, r6, [r0]
 802e7a0:	300c      	adds	r0, #12
 802e7a2:	60a0      	str	r0, [r4, #8]
 802e7a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802e7a8:	f7ff fc9a 	bl	802e0e0 <memset>
 802e7ac:	4620      	mov	r0, r4
 802e7ae:	bd70      	pop	{r4, r5, r6, pc}

0802e7b0 <__sfp_lock_acquire>:
 802e7b0:	4801      	ldr	r0, [pc, #4]	; (802e7b8 <__sfp_lock_acquire+0x8>)
 802e7b2:	f000 b8b3 	b.w	802e91c <__retarget_lock_acquire_recursive>
 802e7b6:	bf00      	nop
 802e7b8:	20001205 	.word	0x20001205

0802e7bc <__sfp_lock_release>:
 802e7bc:	4801      	ldr	r0, [pc, #4]	; (802e7c4 <__sfp_lock_release+0x8>)
 802e7be:	f000 b8ae 	b.w	802e91e <__retarget_lock_release_recursive>
 802e7c2:	bf00      	nop
 802e7c4:	20001205 	.word	0x20001205

0802e7c8 <__sinit_lock_acquire>:
 802e7c8:	4801      	ldr	r0, [pc, #4]	; (802e7d0 <__sinit_lock_acquire+0x8>)
 802e7ca:	f000 b8a7 	b.w	802e91c <__retarget_lock_acquire_recursive>
 802e7ce:	bf00      	nop
 802e7d0:	20001206 	.word	0x20001206

0802e7d4 <__sinit_lock_release>:
 802e7d4:	4801      	ldr	r0, [pc, #4]	; (802e7dc <__sinit_lock_release+0x8>)
 802e7d6:	f000 b8a2 	b.w	802e91e <__retarget_lock_release_recursive>
 802e7da:	bf00      	nop
 802e7dc:	20001206 	.word	0x20001206

0802e7e0 <__sinit>:
 802e7e0:	b510      	push	{r4, lr}
 802e7e2:	4604      	mov	r4, r0
 802e7e4:	f7ff fff0 	bl	802e7c8 <__sinit_lock_acquire>
 802e7e8:	69a3      	ldr	r3, [r4, #24]
 802e7ea:	b11b      	cbz	r3, 802e7f4 <__sinit+0x14>
 802e7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e7f0:	f7ff bff0 	b.w	802e7d4 <__sinit_lock_release>
 802e7f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802e7f8:	6523      	str	r3, [r4, #80]	; 0x50
 802e7fa:	4b13      	ldr	r3, [pc, #76]	; (802e848 <__sinit+0x68>)
 802e7fc:	4a13      	ldr	r2, [pc, #76]	; (802e84c <__sinit+0x6c>)
 802e7fe:	681b      	ldr	r3, [r3, #0]
 802e800:	62a2      	str	r2, [r4, #40]	; 0x28
 802e802:	42a3      	cmp	r3, r4
 802e804:	bf04      	itt	eq
 802e806:	2301      	moveq	r3, #1
 802e808:	61a3      	streq	r3, [r4, #24]
 802e80a:	4620      	mov	r0, r4
 802e80c:	f000 f820 	bl	802e850 <__sfp>
 802e810:	6060      	str	r0, [r4, #4]
 802e812:	4620      	mov	r0, r4
 802e814:	f000 f81c 	bl	802e850 <__sfp>
 802e818:	60a0      	str	r0, [r4, #8]
 802e81a:	4620      	mov	r0, r4
 802e81c:	f000 f818 	bl	802e850 <__sfp>
 802e820:	2200      	movs	r2, #0
 802e822:	60e0      	str	r0, [r4, #12]
 802e824:	2104      	movs	r1, #4
 802e826:	6860      	ldr	r0, [r4, #4]
 802e828:	f7ff ff82 	bl	802e730 <std>
 802e82c:	68a0      	ldr	r0, [r4, #8]
 802e82e:	2201      	movs	r2, #1
 802e830:	2109      	movs	r1, #9
 802e832:	f7ff ff7d 	bl	802e730 <std>
 802e836:	68e0      	ldr	r0, [r4, #12]
 802e838:	2202      	movs	r2, #2
 802e83a:	2112      	movs	r1, #18
 802e83c:	f7ff ff78 	bl	802e730 <std>
 802e840:	2301      	movs	r3, #1
 802e842:	61a3      	str	r3, [r4, #24]
 802e844:	e7d2      	b.n	802e7ec <__sinit+0xc>
 802e846:	bf00      	nop
 802e848:	08031a84 	.word	0x08031a84
 802e84c:	0802e779 	.word	0x0802e779

0802e850 <__sfp>:
 802e850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e852:	4607      	mov	r7, r0
 802e854:	f7ff ffac 	bl	802e7b0 <__sfp_lock_acquire>
 802e858:	4b1e      	ldr	r3, [pc, #120]	; (802e8d4 <__sfp+0x84>)
 802e85a:	681e      	ldr	r6, [r3, #0]
 802e85c:	69b3      	ldr	r3, [r6, #24]
 802e85e:	b913      	cbnz	r3, 802e866 <__sfp+0x16>
 802e860:	4630      	mov	r0, r6
 802e862:	f7ff ffbd 	bl	802e7e0 <__sinit>
 802e866:	3648      	adds	r6, #72	; 0x48
 802e868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802e86c:	3b01      	subs	r3, #1
 802e86e:	d503      	bpl.n	802e878 <__sfp+0x28>
 802e870:	6833      	ldr	r3, [r6, #0]
 802e872:	b30b      	cbz	r3, 802e8b8 <__sfp+0x68>
 802e874:	6836      	ldr	r6, [r6, #0]
 802e876:	e7f7      	b.n	802e868 <__sfp+0x18>
 802e878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802e87c:	b9d5      	cbnz	r5, 802e8b4 <__sfp+0x64>
 802e87e:	4b16      	ldr	r3, [pc, #88]	; (802e8d8 <__sfp+0x88>)
 802e880:	60e3      	str	r3, [r4, #12]
 802e882:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802e886:	6665      	str	r5, [r4, #100]	; 0x64
 802e888:	f000 f847 	bl	802e91a <__retarget_lock_init_recursive>
 802e88c:	f7ff ff96 	bl	802e7bc <__sfp_lock_release>
 802e890:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802e894:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802e898:	6025      	str	r5, [r4, #0]
 802e89a:	61a5      	str	r5, [r4, #24]
 802e89c:	2208      	movs	r2, #8
 802e89e:	4629      	mov	r1, r5
 802e8a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802e8a4:	f7ff fc1c 	bl	802e0e0 <memset>
 802e8a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802e8ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802e8b0:	4620      	mov	r0, r4
 802e8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e8b4:	3468      	adds	r4, #104	; 0x68
 802e8b6:	e7d9      	b.n	802e86c <__sfp+0x1c>
 802e8b8:	2104      	movs	r1, #4
 802e8ba:	4638      	mov	r0, r7
 802e8bc:	f7ff ff62 	bl	802e784 <__sfmoreglue>
 802e8c0:	4604      	mov	r4, r0
 802e8c2:	6030      	str	r0, [r6, #0]
 802e8c4:	2800      	cmp	r0, #0
 802e8c6:	d1d5      	bne.n	802e874 <__sfp+0x24>
 802e8c8:	f7ff ff78 	bl	802e7bc <__sfp_lock_release>
 802e8cc:	230c      	movs	r3, #12
 802e8ce:	603b      	str	r3, [r7, #0]
 802e8d0:	e7ee      	b.n	802e8b0 <__sfp+0x60>
 802e8d2:	bf00      	nop
 802e8d4:	08031a84 	.word	0x08031a84
 802e8d8:	ffff0001 	.word	0xffff0001

0802e8dc <_fwalk_reent>:
 802e8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e8e0:	4606      	mov	r6, r0
 802e8e2:	4688      	mov	r8, r1
 802e8e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802e8e8:	2700      	movs	r7, #0
 802e8ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802e8ee:	f1b9 0901 	subs.w	r9, r9, #1
 802e8f2:	d505      	bpl.n	802e900 <_fwalk_reent+0x24>
 802e8f4:	6824      	ldr	r4, [r4, #0]
 802e8f6:	2c00      	cmp	r4, #0
 802e8f8:	d1f7      	bne.n	802e8ea <_fwalk_reent+0xe>
 802e8fa:	4638      	mov	r0, r7
 802e8fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e900:	89ab      	ldrh	r3, [r5, #12]
 802e902:	2b01      	cmp	r3, #1
 802e904:	d907      	bls.n	802e916 <_fwalk_reent+0x3a>
 802e906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802e90a:	3301      	adds	r3, #1
 802e90c:	d003      	beq.n	802e916 <_fwalk_reent+0x3a>
 802e90e:	4629      	mov	r1, r5
 802e910:	4630      	mov	r0, r6
 802e912:	47c0      	blx	r8
 802e914:	4307      	orrs	r7, r0
 802e916:	3568      	adds	r5, #104	; 0x68
 802e918:	e7e9      	b.n	802e8ee <_fwalk_reent+0x12>

0802e91a <__retarget_lock_init_recursive>:
 802e91a:	4770      	bx	lr

0802e91c <__retarget_lock_acquire_recursive>:
 802e91c:	4770      	bx	lr

0802e91e <__retarget_lock_release_recursive>:
 802e91e:	4770      	bx	lr

0802e920 <__swhatbuf_r>:
 802e920:	b570      	push	{r4, r5, r6, lr}
 802e922:	460e      	mov	r6, r1
 802e924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e928:	2900      	cmp	r1, #0
 802e92a:	b096      	sub	sp, #88	; 0x58
 802e92c:	4614      	mov	r4, r2
 802e92e:	461d      	mov	r5, r3
 802e930:	da08      	bge.n	802e944 <__swhatbuf_r+0x24>
 802e932:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802e936:	2200      	movs	r2, #0
 802e938:	602a      	str	r2, [r5, #0]
 802e93a:	061a      	lsls	r2, r3, #24
 802e93c:	d410      	bmi.n	802e960 <__swhatbuf_r+0x40>
 802e93e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802e942:	e00e      	b.n	802e962 <__swhatbuf_r+0x42>
 802e944:	466a      	mov	r2, sp
 802e946:	f000 fd0d 	bl	802f364 <_fstat_r>
 802e94a:	2800      	cmp	r0, #0
 802e94c:	dbf1      	blt.n	802e932 <__swhatbuf_r+0x12>
 802e94e:	9a01      	ldr	r2, [sp, #4]
 802e950:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802e954:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802e958:	425a      	negs	r2, r3
 802e95a:	415a      	adcs	r2, r3
 802e95c:	602a      	str	r2, [r5, #0]
 802e95e:	e7ee      	b.n	802e93e <__swhatbuf_r+0x1e>
 802e960:	2340      	movs	r3, #64	; 0x40
 802e962:	2000      	movs	r0, #0
 802e964:	6023      	str	r3, [r4, #0]
 802e966:	b016      	add	sp, #88	; 0x58
 802e968:	bd70      	pop	{r4, r5, r6, pc}
	...

0802e96c <__smakebuf_r>:
 802e96c:	898b      	ldrh	r3, [r1, #12]
 802e96e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802e970:	079d      	lsls	r5, r3, #30
 802e972:	4606      	mov	r6, r0
 802e974:	460c      	mov	r4, r1
 802e976:	d507      	bpl.n	802e988 <__smakebuf_r+0x1c>
 802e978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802e97c:	6023      	str	r3, [r4, #0]
 802e97e:	6123      	str	r3, [r4, #16]
 802e980:	2301      	movs	r3, #1
 802e982:	6163      	str	r3, [r4, #20]
 802e984:	b002      	add	sp, #8
 802e986:	bd70      	pop	{r4, r5, r6, pc}
 802e988:	ab01      	add	r3, sp, #4
 802e98a:	466a      	mov	r2, sp
 802e98c:	f7ff ffc8 	bl	802e920 <__swhatbuf_r>
 802e990:	9900      	ldr	r1, [sp, #0]
 802e992:	4605      	mov	r5, r0
 802e994:	4630      	mov	r0, r6
 802e996:	f7ff fc17 	bl	802e1c8 <_malloc_r>
 802e99a:	b948      	cbnz	r0, 802e9b0 <__smakebuf_r+0x44>
 802e99c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e9a0:	059a      	lsls	r2, r3, #22
 802e9a2:	d4ef      	bmi.n	802e984 <__smakebuf_r+0x18>
 802e9a4:	f023 0303 	bic.w	r3, r3, #3
 802e9a8:	f043 0302 	orr.w	r3, r3, #2
 802e9ac:	81a3      	strh	r3, [r4, #12]
 802e9ae:	e7e3      	b.n	802e978 <__smakebuf_r+0xc>
 802e9b0:	4b0d      	ldr	r3, [pc, #52]	; (802e9e8 <__smakebuf_r+0x7c>)
 802e9b2:	62b3      	str	r3, [r6, #40]	; 0x28
 802e9b4:	89a3      	ldrh	r3, [r4, #12]
 802e9b6:	6020      	str	r0, [r4, #0]
 802e9b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e9bc:	81a3      	strh	r3, [r4, #12]
 802e9be:	9b00      	ldr	r3, [sp, #0]
 802e9c0:	6163      	str	r3, [r4, #20]
 802e9c2:	9b01      	ldr	r3, [sp, #4]
 802e9c4:	6120      	str	r0, [r4, #16]
 802e9c6:	b15b      	cbz	r3, 802e9e0 <__smakebuf_r+0x74>
 802e9c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e9cc:	4630      	mov	r0, r6
 802e9ce:	f000 fcdb 	bl	802f388 <_isatty_r>
 802e9d2:	b128      	cbz	r0, 802e9e0 <__smakebuf_r+0x74>
 802e9d4:	89a3      	ldrh	r3, [r4, #12]
 802e9d6:	f023 0303 	bic.w	r3, r3, #3
 802e9da:	f043 0301 	orr.w	r3, r3, #1
 802e9de:	81a3      	strh	r3, [r4, #12]
 802e9e0:	89a0      	ldrh	r0, [r4, #12]
 802e9e2:	4305      	orrs	r5, r0
 802e9e4:	81a5      	strh	r5, [r4, #12]
 802e9e6:	e7cd      	b.n	802e984 <__smakebuf_r+0x18>
 802e9e8:	0802e779 	.word	0x0802e779

0802e9ec <__malloc_lock>:
 802e9ec:	4801      	ldr	r0, [pc, #4]	; (802e9f4 <__malloc_lock+0x8>)
 802e9ee:	f7ff bf95 	b.w	802e91c <__retarget_lock_acquire_recursive>
 802e9f2:	bf00      	nop
 802e9f4:	20001204 	.word	0x20001204

0802e9f8 <__malloc_unlock>:
 802e9f8:	4801      	ldr	r0, [pc, #4]	; (802ea00 <__malloc_unlock+0x8>)
 802e9fa:	f7ff bf90 	b.w	802e91e <__retarget_lock_release_recursive>
 802e9fe:	bf00      	nop
 802ea00:	20001204 	.word	0x20001204

0802ea04 <__ssputs_r>:
 802ea04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ea08:	688e      	ldr	r6, [r1, #8]
 802ea0a:	429e      	cmp	r6, r3
 802ea0c:	4682      	mov	sl, r0
 802ea0e:	460c      	mov	r4, r1
 802ea10:	4690      	mov	r8, r2
 802ea12:	461f      	mov	r7, r3
 802ea14:	d838      	bhi.n	802ea88 <__ssputs_r+0x84>
 802ea16:	898a      	ldrh	r2, [r1, #12]
 802ea18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802ea1c:	d032      	beq.n	802ea84 <__ssputs_r+0x80>
 802ea1e:	6825      	ldr	r5, [r4, #0]
 802ea20:	6909      	ldr	r1, [r1, #16]
 802ea22:	eba5 0901 	sub.w	r9, r5, r1
 802ea26:	6965      	ldr	r5, [r4, #20]
 802ea28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802ea2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802ea30:	3301      	adds	r3, #1
 802ea32:	444b      	add	r3, r9
 802ea34:	106d      	asrs	r5, r5, #1
 802ea36:	429d      	cmp	r5, r3
 802ea38:	bf38      	it	cc
 802ea3a:	461d      	movcc	r5, r3
 802ea3c:	0553      	lsls	r3, r2, #21
 802ea3e:	d531      	bpl.n	802eaa4 <__ssputs_r+0xa0>
 802ea40:	4629      	mov	r1, r5
 802ea42:	f7ff fbc1 	bl	802e1c8 <_malloc_r>
 802ea46:	4606      	mov	r6, r0
 802ea48:	b950      	cbnz	r0, 802ea60 <__ssputs_r+0x5c>
 802ea4a:	230c      	movs	r3, #12
 802ea4c:	f8ca 3000 	str.w	r3, [sl]
 802ea50:	89a3      	ldrh	r3, [r4, #12]
 802ea52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ea56:	81a3      	strh	r3, [r4, #12]
 802ea58:	f04f 30ff 	mov.w	r0, #4294967295
 802ea5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ea60:	6921      	ldr	r1, [r4, #16]
 802ea62:	464a      	mov	r2, r9
 802ea64:	f000 fcb2 	bl	802f3cc <memcpy>
 802ea68:	89a3      	ldrh	r3, [r4, #12]
 802ea6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802ea6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ea72:	81a3      	strh	r3, [r4, #12]
 802ea74:	6126      	str	r6, [r4, #16]
 802ea76:	6165      	str	r5, [r4, #20]
 802ea78:	444e      	add	r6, r9
 802ea7a:	eba5 0509 	sub.w	r5, r5, r9
 802ea7e:	6026      	str	r6, [r4, #0]
 802ea80:	60a5      	str	r5, [r4, #8]
 802ea82:	463e      	mov	r6, r7
 802ea84:	42be      	cmp	r6, r7
 802ea86:	d900      	bls.n	802ea8a <__ssputs_r+0x86>
 802ea88:	463e      	mov	r6, r7
 802ea8a:	6820      	ldr	r0, [r4, #0]
 802ea8c:	4632      	mov	r2, r6
 802ea8e:	4641      	mov	r1, r8
 802ea90:	f000 fcaa 	bl	802f3e8 <memmove>
 802ea94:	68a3      	ldr	r3, [r4, #8]
 802ea96:	1b9b      	subs	r3, r3, r6
 802ea98:	60a3      	str	r3, [r4, #8]
 802ea9a:	6823      	ldr	r3, [r4, #0]
 802ea9c:	4433      	add	r3, r6
 802ea9e:	6023      	str	r3, [r4, #0]
 802eaa0:	2000      	movs	r0, #0
 802eaa2:	e7db      	b.n	802ea5c <__ssputs_r+0x58>
 802eaa4:	462a      	mov	r2, r5
 802eaa6:	f000 fcb9 	bl	802f41c <_realloc_r>
 802eaaa:	4606      	mov	r6, r0
 802eaac:	2800      	cmp	r0, #0
 802eaae:	d1e1      	bne.n	802ea74 <__ssputs_r+0x70>
 802eab0:	6921      	ldr	r1, [r4, #16]
 802eab2:	4650      	mov	r0, sl
 802eab4:	f7ff fb1c 	bl	802e0f0 <_free_r>
 802eab8:	e7c7      	b.n	802ea4a <__ssputs_r+0x46>
	...

0802eabc <_svfiprintf_r>:
 802eabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802eac0:	4698      	mov	r8, r3
 802eac2:	898b      	ldrh	r3, [r1, #12]
 802eac4:	061b      	lsls	r3, r3, #24
 802eac6:	b09d      	sub	sp, #116	; 0x74
 802eac8:	4607      	mov	r7, r0
 802eaca:	460d      	mov	r5, r1
 802eacc:	4614      	mov	r4, r2
 802eace:	d50e      	bpl.n	802eaee <_svfiprintf_r+0x32>
 802ead0:	690b      	ldr	r3, [r1, #16]
 802ead2:	b963      	cbnz	r3, 802eaee <_svfiprintf_r+0x32>
 802ead4:	2140      	movs	r1, #64	; 0x40
 802ead6:	f7ff fb77 	bl	802e1c8 <_malloc_r>
 802eada:	6028      	str	r0, [r5, #0]
 802eadc:	6128      	str	r0, [r5, #16]
 802eade:	b920      	cbnz	r0, 802eaea <_svfiprintf_r+0x2e>
 802eae0:	230c      	movs	r3, #12
 802eae2:	603b      	str	r3, [r7, #0]
 802eae4:	f04f 30ff 	mov.w	r0, #4294967295
 802eae8:	e0d1      	b.n	802ec8e <_svfiprintf_r+0x1d2>
 802eaea:	2340      	movs	r3, #64	; 0x40
 802eaec:	616b      	str	r3, [r5, #20]
 802eaee:	2300      	movs	r3, #0
 802eaf0:	9309      	str	r3, [sp, #36]	; 0x24
 802eaf2:	2320      	movs	r3, #32
 802eaf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802eaf8:	f8cd 800c 	str.w	r8, [sp, #12]
 802eafc:	2330      	movs	r3, #48	; 0x30
 802eafe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802eca8 <_svfiprintf_r+0x1ec>
 802eb02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802eb06:	f04f 0901 	mov.w	r9, #1
 802eb0a:	4623      	mov	r3, r4
 802eb0c:	469a      	mov	sl, r3
 802eb0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 802eb12:	b10a      	cbz	r2, 802eb18 <_svfiprintf_r+0x5c>
 802eb14:	2a25      	cmp	r2, #37	; 0x25
 802eb16:	d1f9      	bne.n	802eb0c <_svfiprintf_r+0x50>
 802eb18:	ebba 0b04 	subs.w	fp, sl, r4
 802eb1c:	d00b      	beq.n	802eb36 <_svfiprintf_r+0x7a>
 802eb1e:	465b      	mov	r3, fp
 802eb20:	4622      	mov	r2, r4
 802eb22:	4629      	mov	r1, r5
 802eb24:	4638      	mov	r0, r7
 802eb26:	f7ff ff6d 	bl	802ea04 <__ssputs_r>
 802eb2a:	3001      	adds	r0, #1
 802eb2c:	f000 80aa 	beq.w	802ec84 <_svfiprintf_r+0x1c8>
 802eb30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802eb32:	445a      	add	r2, fp
 802eb34:	9209      	str	r2, [sp, #36]	; 0x24
 802eb36:	f89a 3000 	ldrb.w	r3, [sl]
 802eb3a:	2b00      	cmp	r3, #0
 802eb3c:	f000 80a2 	beq.w	802ec84 <_svfiprintf_r+0x1c8>
 802eb40:	2300      	movs	r3, #0
 802eb42:	f04f 32ff 	mov.w	r2, #4294967295
 802eb46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802eb4a:	f10a 0a01 	add.w	sl, sl, #1
 802eb4e:	9304      	str	r3, [sp, #16]
 802eb50:	9307      	str	r3, [sp, #28]
 802eb52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802eb56:	931a      	str	r3, [sp, #104]	; 0x68
 802eb58:	4654      	mov	r4, sl
 802eb5a:	2205      	movs	r2, #5
 802eb5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802eb60:	4851      	ldr	r0, [pc, #324]	; (802eca8 <_svfiprintf_r+0x1ec>)
 802eb62:	f7f1 fb45 	bl	80201f0 <memchr>
 802eb66:	9a04      	ldr	r2, [sp, #16]
 802eb68:	b9d8      	cbnz	r0, 802eba2 <_svfiprintf_r+0xe6>
 802eb6a:	06d0      	lsls	r0, r2, #27
 802eb6c:	bf44      	itt	mi
 802eb6e:	2320      	movmi	r3, #32
 802eb70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802eb74:	0711      	lsls	r1, r2, #28
 802eb76:	bf44      	itt	mi
 802eb78:	232b      	movmi	r3, #43	; 0x2b
 802eb7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802eb7e:	f89a 3000 	ldrb.w	r3, [sl]
 802eb82:	2b2a      	cmp	r3, #42	; 0x2a
 802eb84:	d015      	beq.n	802ebb2 <_svfiprintf_r+0xf6>
 802eb86:	9a07      	ldr	r2, [sp, #28]
 802eb88:	4654      	mov	r4, sl
 802eb8a:	2000      	movs	r0, #0
 802eb8c:	f04f 0c0a 	mov.w	ip, #10
 802eb90:	4621      	mov	r1, r4
 802eb92:	f811 3b01 	ldrb.w	r3, [r1], #1
 802eb96:	3b30      	subs	r3, #48	; 0x30
 802eb98:	2b09      	cmp	r3, #9
 802eb9a:	d94e      	bls.n	802ec3a <_svfiprintf_r+0x17e>
 802eb9c:	b1b0      	cbz	r0, 802ebcc <_svfiprintf_r+0x110>
 802eb9e:	9207      	str	r2, [sp, #28]
 802eba0:	e014      	b.n	802ebcc <_svfiprintf_r+0x110>
 802eba2:	eba0 0308 	sub.w	r3, r0, r8
 802eba6:	fa09 f303 	lsl.w	r3, r9, r3
 802ebaa:	4313      	orrs	r3, r2
 802ebac:	9304      	str	r3, [sp, #16]
 802ebae:	46a2      	mov	sl, r4
 802ebb0:	e7d2      	b.n	802eb58 <_svfiprintf_r+0x9c>
 802ebb2:	9b03      	ldr	r3, [sp, #12]
 802ebb4:	1d19      	adds	r1, r3, #4
 802ebb6:	681b      	ldr	r3, [r3, #0]
 802ebb8:	9103      	str	r1, [sp, #12]
 802ebba:	2b00      	cmp	r3, #0
 802ebbc:	bfbb      	ittet	lt
 802ebbe:	425b      	neglt	r3, r3
 802ebc0:	f042 0202 	orrlt.w	r2, r2, #2
 802ebc4:	9307      	strge	r3, [sp, #28]
 802ebc6:	9307      	strlt	r3, [sp, #28]
 802ebc8:	bfb8      	it	lt
 802ebca:	9204      	strlt	r2, [sp, #16]
 802ebcc:	7823      	ldrb	r3, [r4, #0]
 802ebce:	2b2e      	cmp	r3, #46	; 0x2e
 802ebd0:	d10c      	bne.n	802ebec <_svfiprintf_r+0x130>
 802ebd2:	7863      	ldrb	r3, [r4, #1]
 802ebd4:	2b2a      	cmp	r3, #42	; 0x2a
 802ebd6:	d135      	bne.n	802ec44 <_svfiprintf_r+0x188>
 802ebd8:	9b03      	ldr	r3, [sp, #12]
 802ebda:	1d1a      	adds	r2, r3, #4
 802ebdc:	681b      	ldr	r3, [r3, #0]
 802ebde:	9203      	str	r2, [sp, #12]
 802ebe0:	2b00      	cmp	r3, #0
 802ebe2:	bfb8      	it	lt
 802ebe4:	f04f 33ff 	movlt.w	r3, #4294967295
 802ebe8:	3402      	adds	r4, #2
 802ebea:	9305      	str	r3, [sp, #20]
 802ebec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802ecb8 <_svfiprintf_r+0x1fc>
 802ebf0:	7821      	ldrb	r1, [r4, #0]
 802ebf2:	2203      	movs	r2, #3
 802ebf4:	4650      	mov	r0, sl
 802ebf6:	f7f1 fafb 	bl	80201f0 <memchr>
 802ebfa:	b140      	cbz	r0, 802ec0e <_svfiprintf_r+0x152>
 802ebfc:	2340      	movs	r3, #64	; 0x40
 802ebfe:	eba0 000a 	sub.w	r0, r0, sl
 802ec02:	fa03 f000 	lsl.w	r0, r3, r0
 802ec06:	9b04      	ldr	r3, [sp, #16]
 802ec08:	4303      	orrs	r3, r0
 802ec0a:	3401      	adds	r4, #1
 802ec0c:	9304      	str	r3, [sp, #16]
 802ec0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ec12:	4826      	ldr	r0, [pc, #152]	; (802ecac <_svfiprintf_r+0x1f0>)
 802ec14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802ec18:	2206      	movs	r2, #6
 802ec1a:	f7f1 fae9 	bl	80201f0 <memchr>
 802ec1e:	2800      	cmp	r0, #0
 802ec20:	d038      	beq.n	802ec94 <_svfiprintf_r+0x1d8>
 802ec22:	4b23      	ldr	r3, [pc, #140]	; (802ecb0 <_svfiprintf_r+0x1f4>)
 802ec24:	bb1b      	cbnz	r3, 802ec6e <_svfiprintf_r+0x1b2>
 802ec26:	9b03      	ldr	r3, [sp, #12]
 802ec28:	3307      	adds	r3, #7
 802ec2a:	f023 0307 	bic.w	r3, r3, #7
 802ec2e:	3308      	adds	r3, #8
 802ec30:	9303      	str	r3, [sp, #12]
 802ec32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ec34:	4433      	add	r3, r6
 802ec36:	9309      	str	r3, [sp, #36]	; 0x24
 802ec38:	e767      	b.n	802eb0a <_svfiprintf_r+0x4e>
 802ec3a:	fb0c 3202 	mla	r2, ip, r2, r3
 802ec3e:	460c      	mov	r4, r1
 802ec40:	2001      	movs	r0, #1
 802ec42:	e7a5      	b.n	802eb90 <_svfiprintf_r+0xd4>
 802ec44:	2300      	movs	r3, #0
 802ec46:	3401      	adds	r4, #1
 802ec48:	9305      	str	r3, [sp, #20]
 802ec4a:	4619      	mov	r1, r3
 802ec4c:	f04f 0c0a 	mov.w	ip, #10
 802ec50:	4620      	mov	r0, r4
 802ec52:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ec56:	3a30      	subs	r2, #48	; 0x30
 802ec58:	2a09      	cmp	r2, #9
 802ec5a:	d903      	bls.n	802ec64 <_svfiprintf_r+0x1a8>
 802ec5c:	2b00      	cmp	r3, #0
 802ec5e:	d0c5      	beq.n	802ebec <_svfiprintf_r+0x130>
 802ec60:	9105      	str	r1, [sp, #20]
 802ec62:	e7c3      	b.n	802ebec <_svfiprintf_r+0x130>
 802ec64:	fb0c 2101 	mla	r1, ip, r1, r2
 802ec68:	4604      	mov	r4, r0
 802ec6a:	2301      	movs	r3, #1
 802ec6c:	e7f0      	b.n	802ec50 <_svfiprintf_r+0x194>
 802ec6e:	ab03      	add	r3, sp, #12
 802ec70:	9300      	str	r3, [sp, #0]
 802ec72:	462a      	mov	r2, r5
 802ec74:	4b0f      	ldr	r3, [pc, #60]	; (802ecb4 <_svfiprintf_r+0x1f8>)
 802ec76:	a904      	add	r1, sp, #16
 802ec78:	4638      	mov	r0, r7
 802ec7a:	f3af 8000 	nop.w
 802ec7e:	1c42      	adds	r2, r0, #1
 802ec80:	4606      	mov	r6, r0
 802ec82:	d1d6      	bne.n	802ec32 <_svfiprintf_r+0x176>
 802ec84:	89ab      	ldrh	r3, [r5, #12]
 802ec86:	065b      	lsls	r3, r3, #25
 802ec88:	f53f af2c 	bmi.w	802eae4 <_svfiprintf_r+0x28>
 802ec8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ec8e:	b01d      	add	sp, #116	; 0x74
 802ec90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ec94:	ab03      	add	r3, sp, #12
 802ec96:	9300      	str	r3, [sp, #0]
 802ec98:	462a      	mov	r2, r5
 802ec9a:	4b06      	ldr	r3, [pc, #24]	; (802ecb4 <_svfiprintf_r+0x1f8>)
 802ec9c:	a904      	add	r1, sp, #16
 802ec9e:	4638      	mov	r0, r7
 802eca0:	f000 f9d4 	bl	802f04c <_printf_i>
 802eca4:	e7eb      	b.n	802ec7e <_svfiprintf_r+0x1c2>
 802eca6:	bf00      	nop
 802eca8:	08031ae8 	.word	0x08031ae8
 802ecac:	08031af2 	.word	0x08031af2
 802ecb0:	00000000 	.word	0x00000000
 802ecb4:	0802ea05 	.word	0x0802ea05
 802ecb8:	08031aee 	.word	0x08031aee

0802ecbc <__sfputc_r>:
 802ecbc:	6893      	ldr	r3, [r2, #8]
 802ecbe:	3b01      	subs	r3, #1
 802ecc0:	2b00      	cmp	r3, #0
 802ecc2:	b410      	push	{r4}
 802ecc4:	6093      	str	r3, [r2, #8]
 802ecc6:	da08      	bge.n	802ecda <__sfputc_r+0x1e>
 802ecc8:	6994      	ldr	r4, [r2, #24]
 802ecca:	42a3      	cmp	r3, r4
 802eccc:	db01      	blt.n	802ecd2 <__sfputc_r+0x16>
 802ecce:	290a      	cmp	r1, #10
 802ecd0:	d103      	bne.n	802ecda <__sfputc_r+0x1e>
 802ecd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ecd6:	f7ff bba9 	b.w	802e42c <__swbuf_r>
 802ecda:	6813      	ldr	r3, [r2, #0]
 802ecdc:	1c58      	adds	r0, r3, #1
 802ecde:	6010      	str	r0, [r2, #0]
 802ece0:	7019      	strb	r1, [r3, #0]
 802ece2:	4608      	mov	r0, r1
 802ece4:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ece8:	4770      	bx	lr

0802ecea <__sfputs_r>:
 802ecea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ecec:	4606      	mov	r6, r0
 802ecee:	460f      	mov	r7, r1
 802ecf0:	4614      	mov	r4, r2
 802ecf2:	18d5      	adds	r5, r2, r3
 802ecf4:	42ac      	cmp	r4, r5
 802ecf6:	d101      	bne.n	802ecfc <__sfputs_r+0x12>
 802ecf8:	2000      	movs	r0, #0
 802ecfa:	e007      	b.n	802ed0c <__sfputs_r+0x22>
 802ecfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ed00:	463a      	mov	r2, r7
 802ed02:	4630      	mov	r0, r6
 802ed04:	f7ff ffda 	bl	802ecbc <__sfputc_r>
 802ed08:	1c43      	adds	r3, r0, #1
 802ed0a:	d1f3      	bne.n	802ecf4 <__sfputs_r+0xa>
 802ed0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802ed10 <_vfiprintf_r>:
 802ed10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ed14:	460d      	mov	r5, r1
 802ed16:	b09d      	sub	sp, #116	; 0x74
 802ed18:	4614      	mov	r4, r2
 802ed1a:	4698      	mov	r8, r3
 802ed1c:	4606      	mov	r6, r0
 802ed1e:	b118      	cbz	r0, 802ed28 <_vfiprintf_r+0x18>
 802ed20:	6983      	ldr	r3, [r0, #24]
 802ed22:	b90b      	cbnz	r3, 802ed28 <_vfiprintf_r+0x18>
 802ed24:	f7ff fd5c 	bl	802e7e0 <__sinit>
 802ed28:	4b89      	ldr	r3, [pc, #548]	; (802ef50 <_vfiprintf_r+0x240>)
 802ed2a:	429d      	cmp	r5, r3
 802ed2c:	d11b      	bne.n	802ed66 <_vfiprintf_r+0x56>
 802ed2e:	6875      	ldr	r5, [r6, #4]
 802ed30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ed32:	07d9      	lsls	r1, r3, #31
 802ed34:	d405      	bmi.n	802ed42 <_vfiprintf_r+0x32>
 802ed36:	89ab      	ldrh	r3, [r5, #12]
 802ed38:	059a      	lsls	r2, r3, #22
 802ed3a:	d402      	bmi.n	802ed42 <_vfiprintf_r+0x32>
 802ed3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ed3e:	f7ff fded 	bl	802e91c <__retarget_lock_acquire_recursive>
 802ed42:	89ab      	ldrh	r3, [r5, #12]
 802ed44:	071b      	lsls	r3, r3, #28
 802ed46:	d501      	bpl.n	802ed4c <_vfiprintf_r+0x3c>
 802ed48:	692b      	ldr	r3, [r5, #16]
 802ed4a:	b9eb      	cbnz	r3, 802ed88 <_vfiprintf_r+0x78>
 802ed4c:	4629      	mov	r1, r5
 802ed4e:	4630      	mov	r0, r6
 802ed50:	f7ff fbbe 	bl	802e4d0 <__swsetup_r>
 802ed54:	b1c0      	cbz	r0, 802ed88 <_vfiprintf_r+0x78>
 802ed56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ed58:	07dc      	lsls	r4, r3, #31
 802ed5a:	d50e      	bpl.n	802ed7a <_vfiprintf_r+0x6a>
 802ed5c:	f04f 30ff 	mov.w	r0, #4294967295
 802ed60:	b01d      	add	sp, #116	; 0x74
 802ed62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ed66:	4b7b      	ldr	r3, [pc, #492]	; (802ef54 <_vfiprintf_r+0x244>)
 802ed68:	429d      	cmp	r5, r3
 802ed6a:	d101      	bne.n	802ed70 <_vfiprintf_r+0x60>
 802ed6c:	68b5      	ldr	r5, [r6, #8]
 802ed6e:	e7df      	b.n	802ed30 <_vfiprintf_r+0x20>
 802ed70:	4b79      	ldr	r3, [pc, #484]	; (802ef58 <_vfiprintf_r+0x248>)
 802ed72:	429d      	cmp	r5, r3
 802ed74:	bf08      	it	eq
 802ed76:	68f5      	ldreq	r5, [r6, #12]
 802ed78:	e7da      	b.n	802ed30 <_vfiprintf_r+0x20>
 802ed7a:	89ab      	ldrh	r3, [r5, #12]
 802ed7c:	0598      	lsls	r0, r3, #22
 802ed7e:	d4ed      	bmi.n	802ed5c <_vfiprintf_r+0x4c>
 802ed80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ed82:	f7ff fdcc 	bl	802e91e <__retarget_lock_release_recursive>
 802ed86:	e7e9      	b.n	802ed5c <_vfiprintf_r+0x4c>
 802ed88:	2300      	movs	r3, #0
 802ed8a:	9309      	str	r3, [sp, #36]	; 0x24
 802ed8c:	2320      	movs	r3, #32
 802ed8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ed92:	f8cd 800c 	str.w	r8, [sp, #12]
 802ed96:	2330      	movs	r3, #48	; 0x30
 802ed98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802ef5c <_vfiprintf_r+0x24c>
 802ed9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802eda0:	f04f 0901 	mov.w	r9, #1
 802eda4:	4623      	mov	r3, r4
 802eda6:	469a      	mov	sl, r3
 802eda8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802edac:	b10a      	cbz	r2, 802edb2 <_vfiprintf_r+0xa2>
 802edae:	2a25      	cmp	r2, #37	; 0x25
 802edb0:	d1f9      	bne.n	802eda6 <_vfiprintf_r+0x96>
 802edb2:	ebba 0b04 	subs.w	fp, sl, r4
 802edb6:	d00b      	beq.n	802edd0 <_vfiprintf_r+0xc0>
 802edb8:	465b      	mov	r3, fp
 802edba:	4622      	mov	r2, r4
 802edbc:	4629      	mov	r1, r5
 802edbe:	4630      	mov	r0, r6
 802edc0:	f7ff ff93 	bl	802ecea <__sfputs_r>
 802edc4:	3001      	adds	r0, #1
 802edc6:	f000 80aa 	beq.w	802ef1e <_vfiprintf_r+0x20e>
 802edca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802edcc:	445a      	add	r2, fp
 802edce:	9209      	str	r2, [sp, #36]	; 0x24
 802edd0:	f89a 3000 	ldrb.w	r3, [sl]
 802edd4:	2b00      	cmp	r3, #0
 802edd6:	f000 80a2 	beq.w	802ef1e <_vfiprintf_r+0x20e>
 802edda:	2300      	movs	r3, #0
 802eddc:	f04f 32ff 	mov.w	r2, #4294967295
 802ede0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ede4:	f10a 0a01 	add.w	sl, sl, #1
 802ede8:	9304      	str	r3, [sp, #16]
 802edea:	9307      	str	r3, [sp, #28]
 802edec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802edf0:	931a      	str	r3, [sp, #104]	; 0x68
 802edf2:	4654      	mov	r4, sl
 802edf4:	2205      	movs	r2, #5
 802edf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802edfa:	4858      	ldr	r0, [pc, #352]	; (802ef5c <_vfiprintf_r+0x24c>)
 802edfc:	f7f1 f9f8 	bl	80201f0 <memchr>
 802ee00:	9a04      	ldr	r2, [sp, #16]
 802ee02:	b9d8      	cbnz	r0, 802ee3c <_vfiprintf_r+0x12c>
 802ee04:	06d1      	lsls	r1, r2, #27
 802ee06:	bf44      	itt	mi
 802ee08:	2320      	movmi	r3, #32
 802ee0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ee0e:	0713      	lsls	r3, r2, #28
 802ee10:	bf44      	itt	mi
 802ee12:	232b      	movmi	r3, #43	; 0x2b
 802ee14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ee18:	f89a 3000 	ldrb.w	r3, [sl]
 802ee1c:	2b2a      	cmp	r3, #42	; 0x2a
 802ee1e:	d015      	beq.n	802ee4c <_vfiprintf_r+0x13c>
 802ee20:	9a07      	ldr	r2, [sp, #28]
 802ee22:	4654      	mov	r4, sl
 802ee24:	2000      	movs	r0, #0
 802ee26:	f04f 0c0a 	mov.w	ip, #10
 802ee2a:	4621      	mov	r1, r4
 802ee2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ee30:	3b30      	subs	r3, #48	; 0x30
 802ee32:	2b09      	cmp	r3, #9
 802ee34:	d94e      	bls.n	802eed4 <_vfiprintf_r+0x1c4>
 802ee36:	b1b0      	cbz	r0, 802ee66 <_vfiprintf_r+0x156>
 802ee38:	9207      	str	r2, [sp, #28]
 802ee3a:	e014      	b.n	802ee66 <_vfiprintf_r+0x156>
 802ee3c:	eba0 0308 	sub.w	r3, r0, r8
 802ee40:	fa09 f303 	lsl.w	r3, r9, r3
 802ee44:	4313      	orrs	r3, r2
 802ee46:	9304      	str	r3, [sp, #16]
 802ee48:	46a2      	mov	sl, r4
 802ee4a:	e7d2      	b.n	802edf2 <_vfiprintf_r+0xe2>
 802ee4c:	9b03      	ldr	r3, [sp, #12]
 802ee4e:	1d19      	adds	r1, r3, #4
 802ee50:	681b      	ldr	r3, [r3, #0]
 802ee52:	9103      	str	r1, [sp, #12]
 802ee54:	2b00      	cmp	r3, #0
 802ee56:	bfbb      	ittet	lt
 802ee58:	425b      	neglt	r3, r3
 802ee5a:	f042 0202 	orrlt.w	r2, r2, #2
 802ee5e:	9307      	strge	r3, [sp, #28]
 802ee60:	9307      	strlt	r3, [sp, #28]
 802ee62:	bfb8      	it	lt
 802ee64:	9204      	strlt	r2, [sp, #16]
 802ee66:	7823      	ldrb	r3, [r4, #0]
 802ee68:	2b2e      	cmp	r3, #46	; 0x2e
 802ee6a:	d10c      	bne.n	802ee86 <_vfiprintf_r+0x176>
 802ee6c:	7863      	ldrb	r3, [r4, #1]
 802ee6e:	2b2a      	cmp	r3, #42	; 0x2a
 802ee70:	d135      	bne.n	802eede <_vfiprintf_r+0x1ce>
 802ee72:	9b03      	ldr	r3, [sp, #12]
 802ee74:	1d1a      	adds	r2, r3, #4
 802ee76:	681b      	ldr	r3, [r3, #0]
 802ee78:	9203      	str	r2, [sp, #12]
 802ee7a:	2b00      	cmp	r3, #0
 802ee7c:	bfb8      	it	lt
 802ee7e:	f04f 33ff 	movlt.w	r3, #4294967295
 802ee82:	3402      	adds	r4, #2
 802ee84:	9305      	str	r3, [sp, #20]
 802ee86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802ef6c <_vfiprintf_r+0x25c>
 802ee8a:	7821      	ldrb	r1, [r4, #0]
 802ee8c:	2203      	movs	r2, #3
 802ee8e:	4650      	mov	r0, sl
 802ee90:	f7f1 f9ae 	bl	80201f0 <memchr>
 802ee94:	b140      	cbz	r0, 802eea8 <_vfiprintf_r+0x198>
 802ee96:	2340      	movs	r3, #64	; 0x40
 802ee98:	eba0 000a 	sub.w	r0, r0, sl
 802ee9c:	fa03 f000 	lsl.w	r0, r3, r0
 802eea0:	9b04      	ldr	r3, [sp, #16]
 802eea2:	4303      	orrs	r3, r0
 802eea4:	3401      	adds	r4, #1
 802eea6:	9304      	str	r3, [sp, #16]
 802eea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802eeac:	482c      	ldr	r0, [pc, #176]	; (802ef60 <_vfiprintf_r+0x250>)
 802eeae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802eeb2:	2206      	movs	r2, #6
 802eeb4:	f7f1 f99c 	bl	80201f0 <memchr>
 802eeb8:	2800      	cmp	r0, #0
 802eeba:	d03f      	beq.n	802ef3c <_vfiprintf_r+0x22c>
 802eebc:	4b29      	ldr	r3, [pc, #164]	; (802ef64 <_vfiprintf_r+0x254>)
 802eebe:	bb1b      	cbnz	r3, 802ef08 <_vfiprintf_r+0x1f8>
 802eec0:	9b03      	ldr	r3, [sp, #12]
 802eec2:	3307      	adds	r3, #7
 802eec4:	f023 0307 	bic.w	r3, r3, #7
 802eec8:	3308      	adds	r3, #8
 802eeca:	9303      	str	r3, [sp, #12]
 802eecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802eece:	443b      	add	r3, r7
 802eed0:	9309      	str	r3, [sp, #36]	; 0x24
 802eed2:	e767      	b.n	802eda4 <_vfiprintf_r+0x94>
 802eed4:	fb0c 3202 	mla	r2, ip, r2, r3
 802eed8:	460c      	mov	r4, r1
 802eeda:	2001      	movs	r0, #1
 802eedc:	e7a5      	b.n	802ee2a <_vfiprintf_r+0x11a>
 802eede:	2300      	movs	r3, #0
 802eee0:	3401      	adds	r4, #1
 802eee2:	9305      	str	r3, [sp, #20]
 802eee4:	4619      	mov	r1, r3
 802eee6:	f04f 0c0a 	mov.w	ip, #10
 802eeea:	4620      	mov	r0, r4
 802eeec:	f810 2b01 	ldrb.w	r2, [r0], #1
 802eef0:	3a30      	subs	r2, #48	; 0x30
 802eef2:	2a09      	cmp	r2, #9
 802eef4:	d903      	bls.n	802eefe <_vfiprintf_r+0x1ee>
 802eef6:	2b00      	cmp	r3, #0
 802eef8:	d0c5      	beq.n	802ee86 <_vfiprintf_r+0x176>
 802eefa:	9105      	str	r1, [sp, #20]
 802eefc:	e7c3      	b.n	802ee86 <_vfiprintf_r+0x176>
 802eefe:	fb0c 2101 	mla	r1, ip, r1, r2
 802ef02:	4604      	mov	r4, r0
 802ef04:	2301      	movs	r3, #1
 802ef06:	e7f0      	b.n	802eeea <_vfiprintf_r+0x1da>
 802ef08:	ab03      	add	r3, sp, #12
 802ef0a:	9300      	str	r3, [sp, #0]
 802ef0c:	462a      	mov	r2, r5
 802ef0e:	4b16      	ldr	r3, [pc, #88]	; (802ef68 <_vfiprintf_r+0x258>)
 802ef10:	a904      	add	r1, sp, #16
 802ef12:	4630      	mov	r0, r6
 802ef14:	f3af 8000 	nop.w
 802ef18:	4607      	mov	r7, r0
 802ef1a:	1c78      	adds	r0, r7, #1
 802ef1c:	d1d6      	bne.n	802eecc <_vfiprintf_r+0x1bc>
 802ef1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ef20:	07d9      	lsls	r1, r3, #31
 802ef22:	d405      	bmi.n	802ef30 <_vfiprintf_r+0x220>
 802ef24:	89ab      	ldrh	r3, [r5, #12]
 802ef26:	059a      	lsls	r2, r3, #22
 802ef28:	d402      	bmi.n	802ef30 <_vfiprintf_r+0x220>
 802ef2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ef2c:	f7ff fcf7 	bl	802e91e <__retarget_lock_release_recursive>
 802ef30:	89ab      	ldrh	r3, [r5, #12]
 802ef32:	065b      	lsls	r3, r3, #25
 802ef34:	f53f af12 	bmi.w	802ed5c <_vfiprintf_r+0x4c>
 802ef38:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ef3a:	e711      	b.n	802ed60 <_vfiprintf_r+0x50>
 802ef3c:	ab03      	add	r3, sp, #12
 802ef3e:	9300      	str	r3, [sp, #0]
 802ef40:	462a      	mov	r2, r5
 802ef42:	4b09      	ldr	r3, [pc, #36]	; (802ef68 <_vfiprintf_r+0x258>)
 802ef44:	a904      	add	r1, sp, #16
 802ef46:	4630      	mov	r0, r6
 802ef48:	f000 f880 	bl	802f04c <_printf_i>
 802ef4c:	e7e4      	b.n	802ef18 <_vfiprintf_r+0x208>
 802ef4e:	bf00      	nop
 802ef50:	08031aa8 	.word	0x08031aa8
 802ef54:	08031ac8 	.word	0x08031ac8
 802ef58:	08031a88 	.word	0x08031a88
 802ef5c:	08031ae8 	.word	0x08031ae8
 802ef60:	08031af2 	.word	0x08031af2
 802ef64:	00000000 	.word	0x00000000
 802ef68:	0802eceb 	.word	0x0802eceb
 802ef6c:	08031aee 	.word	0x08031aee

0802ef70 <_printf_common>:
 802ef70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ef74:	4616      	mov	r6, r2
 802ef76:	4699      	mov	r9, r3
 802ef78:	688a      	ldr	r2, [r1, #8]
 802ef7a:	690b      	ldr	r3, [r1, #16]
 802ef7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802ef80:	4293      	cmp	r3, r2
 802ef82:	bfb8      	it	lt
 802ef84:	4613      	movlt	r3, r2
 802ef86:	6033      	str	r3, [r6, #0]
 802ef88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802ef8c:	4607      	mov	r7, r0
 802ef8e:	460c      	mov	r4, r1
 802ef90:	b10a      	cbz	r2, 802ef96 <_printf_common+0x26>
 802ef92:	3301      	adds	r3, #1
 802ef94:	6033      	str	r3, [r6, #0]
 802ef96:	6823      	ldr	r3, [r4, #0]
 802ef98:	0699      	lsls	r1, r3, #26
 802ef9a:	bf42      	ittt	mi
 802ef9c:	6833      	ldrmi	r3, [r6, #0]
 802ef9e:	3302      	addmi	r3, #2
 802efa0:	6033      	strmi	r3, [r6, #0]
 802efa2:	6825      	ldr	r5, [r4, #0]
 802efa4:	f015 0506 	ands.w	r5, r5, #6
 802efa8:	d106      	bne.n	802efb8 <_printf_common+0x48>
 802efaa:	f104 0a19 	add.w	sl, r4, #25
 802efae:	68e3      	ldr	r3, [r4, #12]
 802efb0:	6832      	ldr	r2, [r6, #0]
 802efb2:	1a9b      	subs	r3, r3, r2
 802efb4:	42ab      	cmp	r3, r5
 802efb6:	dc26      	bgt.n	802f006 <_printf_common+0x96>
 802efb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802efbc:	1e13      	subs	r3, r2, #0
 802efbe:	6822      	ldr	r2, [r4, #0]
 802efc0:	bf18      	it	ne
 802efc2:	2301      	movne	r3, #1
 802efc4:	0692      	lsls	r2, r2, #26
 802efc6:	d42b      	bmi.n	802f020 <_printf_common+0xb0>
 802efc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802efcc:	4649      	mov	r1, r9
 802efce:	4638      	mov	r0, r7
 802efd0:	47c0      	blx	r8
 802efd2:	3001      	adds	r0, #1
 802efd4:	d01e      	beq.n	802f014 <_printf_common+0xa4>
 802efd6:	6823      	ldr	r3, [r4, #0]
 802efd8:	68e5      	ldr	r5, [r4, #12]
 802efda:	6832      	ldr	r2, [r6, #0]
 802efdc:	f003 0306 	and.w	r3, r3, #6
 802efe0:	2b04      	cmp	r3, #4
 802efe2:	bf08      	it	eq
 802efe4:	1aad      	subeq	r5, r5, r2
 802efe6:	68a3      	ldr	r3, [r4, #8]
 802efe8:	6922      	ldr	r2, [r4, #16]
 802efea:	bf0c      	ite	eq
 802efec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802eff0:	2500      	movne	r5, #0
 802eff2:	4293      	cmp	r3, r2
 802eff4:	bfc4      	itt	gt
 802eff6:	1a9b      	subgt	r3, r3, r2
 802eff8:	18ed      	addgt	r5, r5, r3
 802effa:	2600      	movs	r6, #0
 802effc:	341a      	adds	r4, #26
 802effe:	42b5      	cmp	r5, r6
 802f000:	d11a      	bne.n	802f038 <_printf_common+0xc8>
 802f002:	2000      	movs	r0, #0
 802f004:	e008      	b.n	802f018 <_printf_common+0xa8>
 802f006:	2301      	movs	r3, #1
 802f008:	4652      	mov	r2, sl
 802f00a:	4649      	mov	r1, r9
 802f00c:	4638      	mov	r0, r7
 802f00e:	47c0      	blx	r8
 802f010:	3001      	adds	r0, #1
 802f012:	d103      	bne.n	802f01c <_printf_common+0xac>
 802f014:	f04f 30ff 	mov.w	r0, #4294967295
 802f018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f01c:	3501      	adds	r5, #1
 802f01e:	e7c6      	b.n	802efae <_printf_common+0x3e>
 802f020:	18e1      	adds	r1, r4, r3
 802f022:	1c5a      	adds	r2, r3, #1
 802f024:	2030      	movs	r0, #48	; 0x30
 802f026:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802f02a:	4422      	add	r2, r4
 802f02c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802f030:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802f034:	3302      	adds	r3, #2
 802f036:	e7c7      	b.n	802efc8 <_printf_common+0x58>
 802f038:	2301      	movs	r3, #1
 802f03a:	4622      	mov	r2, r4
 802f03c:	4649      	mov	r1, r9
 802f03e:	4638      	mov	r0, r7
 802f040:	47c0      	blx	r8
 802f042:	3001      	adds	r0, #1
 802f044:	d0e6      	beq.n	802f014 <_printf_common+0xa4>
 802f046:	3601      	adds	r6, #1
 802f048:	e7d9      	b.n	802effe <_printf_common+0x8e>
	...

0802f04c <_printf_i>:
 802f04c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802f050:	7e0f      	ldrb	r7, [r1, #24]
 802f052:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802f054:	2f78      	cmp	r7, #120	; 0x78
 802f056:	4691      	mov	r9, r2
 802f058:	4680      	mov	r8, r0
 802f05a:	460c      	mov	r4, r1
 802f05c:	469a      	mov	sl, r3
 802f05e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802f062:	d807      	bhi.n	802f074 <_printf_i+0x28>
 802f064:	2f62      	cmp	r7, #98	; 0x62
 802f066:	d80a      	bhi.n	802f07e <_printf_i+0x32>
 802f068:	2f00      	cmp	r7, #0
 802f06a:	f000 80d8 	beq.w	802f21e <_printf_i+0x1d2>
 802f06e:	2f58      	cmp	r7, #88	; 0x58
 802f070:	f000 80a3 	beq.w	802f1ba <_printf_i+0x16e>
 802f074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802f078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802f07c:	e03a      	b.n	802f0f4 <_printf_i+0xa8>
 802f07e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802f082:	2b15      	cmp	r3, #21
 802f084:	d8f6      	bhi.n	802f074 <_printf_i+0x28>
 802f086:	a101      	add	r1, pc, #4	; (adr r1, 802f08c <_printf_i+0x40>)
 802f088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802f08c:	0802f0e5 	.word	0x0802f0e5
 802f090:	0802f0f9 	.word	0x0802f0f9
 802f094:	0802f075 	.word	0x0802f075
 802f098:	0802f075 	.word	0x0802f075
 802f09c:	0802f075 	.word	0x0802f075
 802f0a0:	0802f075 	.word	0x0802f075
 802f0a4:	0802f0f9 	.word	0x0802f0f9
 802f0a8:	0802f075 	.word	0x0802f075
 802f0ac:	0802f075 	.word	0x0802f075
 802f0b0:	0802f075 	.word	0x0802f075
 802f0b4:	0802f075 	.word	0x0802f075
 802f0b8:	0802f205 	.word	0x0802f205
 802f0bc:	0802f129 	.word	0x0802f129
 802f0c0:	0802f1e7 	.word	0x0802f1e7
 802f0c4:	0802f075 	.word	0x0802f075
 802f0c8:	0802f075 	.word	0x0802f075
 802f0cc:	0802f227 	.word	0x0802f227
 802f0d0:	0802f075 	.word	0x0802f075
 802f0d4:	0802f129 	.word	0x0802f129
 802f0d8:	0802f075 	.word	0x0802f075
 802f0dc:	0802f075 	.word	0x0802f075
 802f0e0:	0802f1ef 	.word	0x0802f1ef
 802f0e4:	682b      	ldr	r3, [r5, #0]
 802f0e6:	1d1a      	adds	r2, r3, #4
 802f0e8:	681b      	ldr	r3, [r3, #0]
 802f0ea:	602a      	str	r2, [r5, #0]
 802f0ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802f0f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802f0f4:	2301      	movs	r3, #1
 802f0f6:	e0a3      	b.n	802f240 <_printf_i+0x1f4>
 802f0f8:	6820      	ldr	r0, [r4, #0]
 802f0fa:	6829      	ldr	r1, [r5, #0]
 802f0fc:	0606      	lsls	r6, r0, #24
 802f0fe:	f101 0304 	add.w	r3, r1, #4
 802f102:	d50a      	bpl.n	802f11a <_printf_i+0xce>
 802f104:	680e      	ldr	r6, [r1, #0]
 802f106:	602b      	str	r3, [r5, #0]
 802f108:	2e00      	cmp	r6, #0
 802f10a:	da03      	bge.n	802f114 <_printf_i+0xc8>
 802f10c:	232d      	movs	r3, #45	; 0x2d
 802f10e:	4276      	negs	r6, r6
 802f110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802f114:	485e      	ldr	r0, [pc, #376]	; (802f290 <_printf_i+0x244>)
 802f116:	230a      	movs	r3, #10
 802f118:	e019      	b.n	802f14e <_printf_i+0x102>
 802f11a:	680e      	ldr	r6, [r1, #0]
 802f11c:	602b      	str	r3, [r5, #0]
 802f11e:	f010 0f40 	tst.w	r0, #64	; 0x40
 802f122:	bf18      	it	ne
 802f124:	b236      	sxthne	r6, r6
 802f126:	e7ef      	b.n	802f108 <_printf_i+0xbc>
 802f128:	682b      	ldr	r3, [r5, #0]
 802f12a:	6820      	ldr	r0, [r4, #0]
 802f12c:	1d19      	adds	r1, r3, #4
 802f12e:	6029      	str	r1, [r5, #0]
 802f130:	0601      	lsls	r1, r0, #24
 802f132:	d501      	bpl.n	802f138 <_printf_i+0xec>
 802f134:	681e      	ldr	r6, [r3, #0]
 802f136:	e002      	b.n	802f13e <_printf_i+0xf2>
 802f138:	0646      	lsls	r6, r0, #25
 802f13a:	d5fb      	bpl.n	802f134 <_printf_i+0xe8>
 802f13c:	881e      	ldrh	r6, [r3, #0]
 802f13e:	4854      	ldr	r0, [pc, #336]	; (802f290 <_printf_i+0x244>)
 802f140:	2f6f      	cmp	r7, #111	; 0x6f
 802f142:	bf0c      	ite	eq
 802f144:	2308      	moveq	r3, #8
 802f146:	230a      	movne	r3, #10
 802f148:	2100      	movs	r1, #0
 802f14a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802f14e:	6865      	ldr	r5, [r4, #4]
 802f150:	60a5      	str	r5, [r4, #8]
 802f152:	2d00      	cmp	r5, #0
 802f154:	bfa2      	ittt	ge
 802f156:	6821      	ldrge	r1, [r4, #0]
 802f158:	f021 0104 	bicge.w	r1, r1, #4
 802f15c:	6021      	strge	r1, [r4, #0]
 802f15e:	b90e      	cbnz	r6, 802f164 <_printf_i+0x118>
 802f160:	2d00      	cmp	r5, #0
 802f162:	d04d      	beq.n	802f200 <_printf_i+0x1b4>
 802f164:	4615      	mov	r5, r2
 802f166:	fbb6 f1f3 	udiv	r1, r6, r3
 802f16a:	fb03 6711 	mls	r7, r3, r1, r6
 802f16e:	5dc7      	ldrb	r7, [r0, r7]
 802f170:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802f174:	4637      	mov	r7, r6
 802f176:	42bb      	cmp	r3, r7
 802f178:	460e      	mov	r6, r1
 802f17a:	d9f4      	bls.n	802f166 <_printf_i+0x11a>
 802f17c:	2b08      	cmp	r3, #8
 802f17e:	d10b      	bne.n	802f198 <_printf_i+0x14c>
 802f180:	6823      	ldr	r3, [r4, #0]
 802f182:	07de      	lsls	r6, r3, #31
 802f184:	d508      	bpl.n	802f198 <_printf_i+0x14c>
 802f186:	6923      	ldr	r3, [r4, #16]
 802f188:	6861      	ldr	r1, [r4, #4]
 802f18a:	4299      	cmp	r1, r3
 802f18c:	bfde      	ittt	le
 802f18e:	2330      	movle	r3, #48	; 0x30
 802f190:	f805 3c01 	strble.w	r3, [r5, #-1]
 802f194:	f105 35ff 	addle.w	r5, r5, #4294967295
 802f198:	1b52      	subs	r2, r2, r5
 802f19a:	6122      	str	r2, [r4, #16]
 802f19c:	f8cd a000 	str.w	sl, [sp]
 802f1a0:	464b      	mov	r3, r9
 802f1a2:	aa03      	add	r2, sp, #12
 802f1a4:	4621      	mov	r1, r4
 802f1a6:	4640      	mov	r0, r8
 802f1a8:	f7ff fee2 	bl	802ef70 <_printf_common>
 802f1ac:	3001      	adds	r0, #1
 802f1ae:	d14c      	bne.n	802f24a <_printf_i+0x1fe>
 802f1b0:	f04f 30ff 	mov.w	r0, #4294967295
 802f1b4:	b004      	add	sp, #16
 802f1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f1ba:	4835      	ldr	r0, [pc, #212]	; (802f290 <_printf_i+0x244>)
 802f1bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802f1c0:	6829      	ldr	r1, [r5, #0]
 802f1c2:	6823      	ldr	r3, [r4, #0]
 802f1c4:	f851 6b04 	ldr.w	r6, [r1], #4
 802f1c8:	6029      	str	r1, [r5, #0]
 802f1ca:	061d      	lsls	r5, r3, #24
 802f1cc:	d514      	bpl.n	802f1f8 <_printf_i+0x1ac>
 802f1ce:	07df      	lsls	r7, r3, #31
 802f1d0:	bf44      	itt	mi
 802f1d2:	f043 0320 	orrmi.w	r3, r3, #32
 802f1d6:	6023      	strmi	r3, [r4, #0]
 802f1d8:	b91e      	cbnz	r6, 802f1e2 <_printf_i+0x196>
 802f1da:	6823      	ldr	r3, [r4, #0]
 802f1dc:	f023 0320 	bic.w	r3, r3, #32
 802f1e0:	6023      	str	r3, [r4, #0]
 802f1e2:	2310      	movs	r3, #16
 802f1e4:	e7b0      	b.n	802f148 <_printf_i+0xfc>
 802f1e6:	6823      	ldr	r3, [r4, #0]
 802f1e8:	f043 0320 	orr.w	r3, r3, #32
 802f1ec:	6023      	str	r3, [r4, #0]
 802f1ee:	2378      	movs	r3, #120	; 0x78
 802f1f0:	4828      	ldr	r0, [pc, #160]	; (802f294 <_printf_i+0x248>)
 802f1f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802f1f6:	e7e3      	b.n	802f1c0 <_printf_i+0x174>
 802f1f8:	0659      	lsls	r1, r3, #25
 802f1fa:	bf48      	it	mi
 802f1fc:	b2b6      	uxthmi	r6, r6
 802f1fe:	e7e6      	b.n	802f1ce <_printf_i+0x182>
 802f200:	4615      	mov	r5, r2
 802f202:	e7bb      	b.n	802f17c <_printf_i+0x130>
 802f204:	682b      	ldr	r3, [r5, #0]
 802f206:	6826      	ldr	r6, [r4, #0]
 802f208:	6961      	ldr	r1, [r4, #20]
 802f20a:	1d18      	adds	r0, r3, #4
 802f20c:	6028      	str	r0, [r5, #0]
 802f20e:	0635      	lsls	r5, r6, #24
 802f210:	681b      	ldr	r3, [r3, #0]
 802f212:	d501      	bpl.n	802f218 <_printf_i+0x1cc>
 802f214:	6019      	str	r1, [r3, #0]
 802f216:	e002      	b.n	802f21e <_printf_i+0x1d2>
 802f218:	0670      	lsls	r0, r6, #25
 802f21a:	d5fb      	bpl.n	802f214 <_printf_i+0x1c8>
 802f21c:	8019      	strh	r1, [r3, #0]
 802f21e:	2300      	movs	r3, #0
 802f220:	6123      	str	r3, [r4, #16]
 802f222:	4615      	mov	r5, r2
 802f224:	e7ba      	b.n	802f19c <_printf_i+0x150>
 802f226:	682b      	ldr	r3, [r5, #0]
 802f228:	1d1a      	adds	r2, r3, #4
 802f22a:	602a      	str	r2, [r5, #0]
 802f22c:	681d      	ldr	r5, [r3, #0]
 802f22e:	6862      	ldr	r2, [r4, #4]
 802f230:	2100      	movs	r1, #0
 802f232:	4628      	mov	r0, r5
 802f234:	f7f0 ffdc 	bl	80201f0 <memchr>
 802f238:	b108      	cbz	r0, 802f23e <_printf_i+0x1f2>
 802f23a:	1b40      	subs	r0, r0, r5
 802f23c:	6060      	str	r0, [r4, #4]
 802f23e:	6863      	ldr	r3, [r4, #4]
 802f240:	6123      	str	r3, [r4, #16]
 802f242:	2300      	movs	r3, #0
 802f244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802f248:	e7a8      	b.n	802f19c <_printf_i+0x150>
 802f24a:	6923      	ldr	r3, [r4, #16]
 802f24c:	462a      	mov	r2, r5
 802f24e:	4649      	mov	r1, r9
 802f250:	4640      	mov	r0, r8
 802f252:	47d0      	blx	sl
 802f254:	3001      	adds	r0, #1
 802f256:	d0ab      	beq.n	802f1b0 <_printf_i+0x164>
 802f258:	6823      	ldr	r3, [r4, #0]
 802f25a:	079b      	lsls	r3, r3, #30
 802f25c:	d413      	bmi.n	802f286 <_printf_i+0x23a>
 802f25e:	68e0      	ldr	r0, [r4, #12]
 802f260:	9b03      	ldr	r3, [sp, #12]
 802f262:	4298      	cmp	r0, r3
 802f264:	bfb8      	it	lt
 802f266:	4618      	movlt	r0, r3
 802f268:	e7a4      	b.n	802f1b4 <_printf_i+0x168>
 802f26a:	2301      	movs	r3, #1
 802f26c:	4632      	mov	r2, r6
 802f26e:	4649      	mov	r1, r9
 802f270:	4640      	mov	r0, r8
 802f272:	47d0      	blx	sl
 802f274:	3001      	adds	r0, #1
 802f276:	d09b      	beq.n	802f1b0 <_printf_i+0x164>
 802f278:	3501      	adds	r5, #1
 802f27a:	68e3      	ldr	r3, [r4, #12]
 802f27c:	9903      	ldr	r1, [sp, #12]
 802f27e:	1a5b      	subs	r3, r3, r1
 802f280:	42ab      	cmp	r3, r5
 802f282:	dcf2      	bgt.n	802f26a <_printf_i+0x21e>
 802f284:	e7eb      	b.n	802f25e <_printf_i+0x212>
 802f286:	2500      	movs	r5, #0
 802f288:	f104 0619 	add.w	r6, r4, #25
 802f28c:	e7f5      	b.n	802f27a <_printf_i+0x22e>
 802f28e:	bf00      	nop
 802f290:	08031af9 	.word	0x08031af9
 802f294:	08031b0a 	.word	0x08031b0a

0802f298 <__sread>:
 802f298:	b510      	push	{r4, lr}
 802f29a:	460c      	mov	r4, r1
 802f29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f2a0:	f000 f8ec 	bl	802f47c <_read_r>
 802f2a4:	2800      	cmp	r0, #0
 802f2a6:	bfab      	itete	ge
 802f2a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802f2aa:	89a3      	ldrhlt	r3, [r4, #12]
 802f2ac:	181b      	addge	r3, r3, r0
 802f2ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802f2b2:	bfac      	ite	ge
 802f2b4:	6563      	strge	r3, [r4, #84]	; 0x54
 802f2b6:	81a3      	strhlt	r3, [r4, #12]
 802f2b8:	bd10      	pop	{r4, pc}

0802f2ba <__swrite>:
 802f2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f2be:	461f      	mov	r7, r3
 802f2c0:	898b      	ldrh	r3, [r1, #12]
 802f2c2:	05db      	lsls	r3, r3, #23
 802f2c4:	4605      	mov	r5, r0
 802f2c6:	460c      	mov	r4, r1
 802f2c8:	4616      	mov	r6, r2
 802f2ca:	d505      	bpl.n	802f2d8 <__swrite+0x1e>
 802f2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f2d0:	2302      	movs	r3, #2
 802f2d2:	2200      	movs	r2, #0
 802f2d4:	f000 f868 	bl	802f3a8 <_lseek_r>
 802f2d8:	89a3      	ldrh	r3, [r4, #12]
 802f2da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802f2de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802f2e2:	81a3      	strh	r3, [r4, #12]
 802f2e4:	4632      	mov	r2, r6
 802f2e6:	463b      	mov	r3, r7
 802f2e8:	4628      	mov	r0, r5
 802f2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802f2ee:	f000 b817 	b.w	802f320 <_write_r>

0802f2f2 <__sseek>:
 802f2f2:	b510      	push	{r4, lr}
 802f2f4:	460c      	mov	r4, r1
 802f2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f2fa:	f000 f855 	bl	802f3a8 <_lseek_r>
 802f2fe:	1c43      	adds	r3, r0, #1
 802f300:	89a3      	ldrh	r3, [r4, #12]
 802f302:	bf15      	itete	ne
 802f304:	6560      	strne	r0, [r4, #84]	; 0x54
 802f306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802f30a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802f30e:	81a3      	strheq	r3, [r4, #12]
 802f310:	bf18      	it	ne
 802f312:	81a3      	strhne	r3, [r4, #12]
 802f314:	bd10      	pop	{r4, pc}

0802f316 <__sclose>:
 802f316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f31a:	f000 b813 	b.w	802f344 <_close_r>
	...

0802f320 <_write_r>:
 802f320:	b538      	push	{r3, r4, r5, lr}
 802f322:	4d07      	ldr	r5, [pc, #28]	; (802f340 <_write_r+0x20>)
 802f324:	4604      	mov	r4, r0
 802f326:	4608      	mov	r0, r1
 802f328:	4611      	mov	r1, r2
 802f32a:	2200      	movs	r2, #0
 802f32c:	602a      	str	r2, [r5, #0]
 802f32e:	461a      	mov	r2, r3
 802f330:	f7f2 fed0 	bl	80220d4 <_write>
 802f334:	1c43      	adds	r3, r0, #1
 802f336:	d102      	bne.n	802f33e <_write_r+0x1e>
 802f338:	682b      	ldr	r3, [r5, #0]
 802f33a:	b103      	cbz	r3, 802f33e <_write_r+0x1e>
 802f33c:	6023      	str	r3, [r4, #0]
 802f33e:	bd38      	pop	{r3, r4, r5, pc}
 802f340:	20001208 	.word	0x20001208

0802f344 <_close_r>:
 802f344:	b538      	push	{r3, r4, r5, lr}
 802f346:	4d06      	ldr	r5, [pc, #24]	; (802f360 <_close_r+0x1c>)
 802f348:	2300      	movs	r3, #0
 802f34a:	4604      	mov	r4, r0
 802f34c:	4608      	mov	r0, r1
 802f34e:	602b      	str	r3, [r5, #0]
 802f350:	f7f2 fedc 	bl	802210c <_close>
 802f354:	1c43      	adds	r3, r0, #1
 802f356:	d102      	bne.n	802f35e <_close_r+0x1a>
 802f358:	682b      	ldr	r3, [r5, #0]
 802f35a:	b103      	cbz	r3, 802f35e <_close_r+0x1a>
 802f35c:	6023      	str	r3, [r4, #0]
 802f35e:	bd38      	pop	{r3, r4, r5, pc}
 802f360:	20001208 	.word	0x20001208

0802f364 <_fstat_r>:
 802f364:	b538      	push	{r3, r4, r5, lr}
 802f366:	4d07      	ldr	r5, [pc, #28]	; (802f384 <_fstat_r+0x20>)
 802f368:	2300      	movs	r3, #0
 802f36a:	4604      	mov	r4, r0
 802f36c:	4608      	mov	r0, r1
 802f36e:	4611      	mov	r1, r2
 802f370:	602b      	str	r3, [r5, #0]
 802f372:	f7f2 fed7 	bl	8022124 <_fstat>
 802f376:	1c43      	adds	r3, r0, #1
 802f378:	d102      	bne.n	802f380 <_fstat_r+0x1c>
 802f37a:	682b      	ldr	r3, [r5, #0]
 802f37c:	b103      	cbz	r3, 802f380 <_fstat_r+0x1c>
 802f37e:	6023      	str	r3, [r4, #0]
 802f380:	bd38      	pop	{r3, r4, r5, pc}
 802f382:	bf00      	nop
 802f384:	20001208 	.word	0x20001208

0802f388 <_isatty_r>:
 802f388:	b538      	push	{r3, r4, r5, lr}
 802f38a:	4d06      	ldr	r5, [pc, #24]	; (802f3a4 <_isatty_r+0x1c>)
 802f38c:	2300      	movs	r3, #0
 802f38e:	4604      	mov	r4, r0
 802f390:	4608      	mov	r0, r1
 802f392:	602b      	str	r3, [r5, #0]
 802f394:	f7f2 fed6 	bl	8022144 <_isatty>
 802f398:	1c43      	adds	r3, r0, #1
 802f39a:	d102      	bne.n	802f3a2 <_isatty_r+0x1a>
 802f39c:	682b      	ldr	r3, [r5, #0]
 802f39e:	b103      	cbz	r3, 802f3a2 <_isatty_r+0x1a>
 802f3a0:	6023      	str	r3, [r4, #0]
 802f3a2:	bd38      	pop	{r3, r4, r5, pc}
 802f3a4:	20001208 	.word	0x20001208

0802f3a8 <_lseek_r>:
 802f3a8:	b538      	push	{r3, r4, r5, lr}
 802f3aa:	4d07      	ldr	r5, [pc, #28]	; (802f3c8 <_lseek_r+0x20>)
 802f3ac:	4604      	mov	r4, r0
 802f3ae:	4608      	mov	r0, r1
 802f3b0:	4611      	mov	r1, r2
 802f3b2:	2200      	movs	r2, #0
 802f3b4:	602a      	str	r2, [r5, #0]
 802f3b6:	461a      	mov	r2, r3
 802f3b8:	f7f2 fecf 	bl	802215a <_lseek>
 802f3bc:	1c43      	adds	r3, r0, #1
 802f3be:	d102      	bne.n	802f3c6 <_lseek_r+0x1e>
 802f3c0:	682b      	ldr	r3, [r5, #0]
 802f3c2:	b103      	cbz	r3, 802f3c6 <_lseek_r+0x1e>
 802f3c4:	6023      	str	r3, [r4, #0]
 802f3c6:	bd38      	pop	{r3, r4, r5, pc}
 802f3c8:	20001208 	.word	0x20001208

0802f3cc <memcpy>:
 802f3cc:	440a      	add	r2, r1
 802f3ce:	4291      	cmp	r1, r2
 802f3d0:	f100 33ff 	add.w	r3, r0, #4294967295
 802f3d4:	d100      	bne.n	802f3d8 <memcpy+0xc>
 802f3d6:	4770      	bx	lr
 802f3d8:	b510      	push	{r4, lr}
 802f3da:	f811 4b01 	ldrb.w	r4, [r1], #1
 802f3de:	f803 4f01 	strb.w	r4, [r3, #1]!
 802f3e2:	4291      	cmp	r1, r2
 802f3e4:	d1f9      	bne.n	802f3da <memcpy+0xe>
 802f3e6:	bd10      	pop	{r4, pc}

0802f3e8 <memmove>:
 802f3e8:	4288      	cmp	r0, r1
 802f3ea:	b510      	push	{r4, lr}
 802f3ec:	eb01 0402 	add.w	r4, r1, r2
 802f3f0:	d902      	bls.n	802f3f8 <memmove+0x10>
 802f3f2:	4284      	cmp	r4, r0
 802f3f4:	4623      	mov	r3, r4
 802f3f6:	d807      	bhi.n	802f408 <memmove+0x20>
 802f3f8:	1e43      	subs	r3, r0, #1
 802f3fa:	42a1      	cmp	r1, r4
 802f3fc:	d008      	beq.n	802f410 <memmove+0x28>
 802f3fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 802f402:	f803 2f01 	strb.w	r2, [r3, #1]!
 802f406:	e7f8      	b.n	802f3fa <memmove+0x12>
 802f408:	4402      	add	r2, r0
 802f40a:	4601      	mov	r1, r0
 802f40c:	428a      	cmp	r2, r1
 802f40e:	d100      	bne.n	802f412 <memmove+0x2a>
 802f410:	bd10      	pop	{r4, pc}
 802f412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802f416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802f41a:	e7f7      	b.n	802f40c <memmove+0x24>

0802f41c <_realloc_r>:
 802f41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f420:	4680      	mov	r8, r0
 802f422:	4614      	mov	r4, r2
 802f424:	460e      	mov	r6, r1
 802f426:	b921      	cbnz	r1, 802f432 <_realloc_r+0x16>
 802f428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802f42c:	4611      	mov	r1, r2
 802f42e:	f7fe becb 	b.w	802e1c8 <_malloc_r>
 802f432:	b92a      	cbnz	r2, 802f440 <_realloc_r+0x24>
 802f434:	f7fe fe5c 	bl	802e0f0 <_free_r>
 802f438:	4625      	mov	r5, r4
 802f43a:	4628      	mov	r0, r5
 802f43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f440:	f000 f82e 	bl	802f4a0 <_malloc_usable_size_r>
 802f444:	4284      	cmp	r4, r0
 802f446:	4607      	mov	r7, r0
 802f448:	d802      	bhi.n	802f450 <_realloc_r+0x34>
 802f44a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802f44e:	d812      	bhi.n	802f476 <_realloc_r+0x5a>
 802f450:	4621      	mov	r1, r4
 802f452:	4640      	mov	r0, r8
 802f454:	f7fe feb8 	bl	802e1c8 <_malloc_r>
 802f458:	4605      	mov	r5, r0
 802f45a:	2800      	cmp	r0, #0
 802f45c:	d0ed      	beq.n	802f43a <_realloc_r+0x1e>
 802f45e:	42bc      	cmp	r4, r7
 802f460:	4622      	mov	r2, r4
 802f462:	4631      	mov	r1, r6
 802f464:	bf28      	it	cs
 802f466:	463a      	movcs	r2, r7
 802f468:	f7ff ffb0 	bl	802f3cc <memcpy>
 802f46c:	4631      	mov	r1, r6
 802f46e:	4640      	mov	r0, r8
 802f470:	f7fe fe3e 	bl	802e0f0 <_free_r>
 802f474:	e7e1      	b.n	802f43a <_realloc_r+0x1e>
 802f476:	4635      	mov	r5, r6
 802f478:	e7df      	b.n	802f43a <_realloc_r+0x1e>
	...

0802f47c <_read_r>:
 802f47c:	b538      	push	{r3, r4, r5, lr}
 802f47e:	4d07      	ldr	r5, [pc, #28]	; (802f49c <_read_r+0x20>)
 802f480:	4604      	mov	r4, r0
 802f482:	4608      	mov	r0, r1
 802f484:	4611      	mov	r1, r2
 802f486:	2200      	movs	r2, #0
 802f488:	602a      	str	r2, [r5, #0]
 802f48a:	461a      	mov	r2, r3
 802f48c:	f7f2 fe05 	bl	802209a <_read>
 802f490:	1c43      	adds	r3, r0, #1
 802f492:	d102      	bne.n	802f49a <_read_r+0x1e>
 802f494:	682b      	ldr	r3, [r5, #0]
 802f496:	b103      	cbz	r3, 802f49a <_read_r+0x1e>
 802f498:	6023      	str	r3, [r4, #0]
 802f49a:	bd38      	pop	{r3, r4, r5, pc}
 802f49c:	20001208 	.word	0x20001208

0802f4a0 <_malloc_usable_size_r>:
 802f4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802f4a4:	1f18      	subs	r0, r3, #4
 802f4a6:	2b00      	cmp	r3, #0
 802f4a8:	bfbc      	itt	lt
 802f4aa:	580b      	ldrlt	r3, [r1, r0]
 802f4ac:	18c0      	addlt	r0, r0, r3
 802f4ae:	4770      	bx	lr

0802f4b0 <_init>:
 802f4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f4b2:	bf00      	nop
 802f4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f4b6:	bc08      	pop	{r3}
 802f4b8:	469e      	mov	lr, r3
 802f4ba:	4770      	bx	lr

0802f4bc <_fini>:
 802f4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f4be:	bf00      	nop
 802f4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f4c2:	bc08      	pop	{r3}
 802f4c4:	469e      	mov	lr, r3
 802f4c6:	4770      	bx	lr
